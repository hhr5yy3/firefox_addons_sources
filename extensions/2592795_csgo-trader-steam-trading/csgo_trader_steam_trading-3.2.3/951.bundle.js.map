{"version":3,"file":"951.bundle.js","mappings":"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","sources":["webpack://csgotrader.app-extension/./src/utils/IEconService.js","webpack://csgotrader.app-extension/./src/components/TradeHistory/TradeOfferSide.js","webpack://csgotrader.app-extension/./src/components/TradeHistory/TradeHistoryDetailsPrint.js","webpack://csgotrader.app-extension/./src/components/TradeHistory/TradeOffers.js","webpack://csgotrader.app-extension/./src/components/TradeHistory/MissingItems.js","webpack://csgotrader.app-extension/./src/components/TradeHistory/TradeOfferHistorySide.js","webpack://csgotrader.app-extension/./src/components/TradeHistory/OfferHistoryContent.js","webpack://csgotrader.app-extension/./src/components/Spinner/Spinner.js","webpack://csgotrader.app-extension/./src/components/TradeHistory/TradeOfferContent.js","webpack://csgotrader.app-extension/./src/components/TradeHistory/TradeSummary.js","webpack://csgotrader.app-extension/./src/components/TradeHistory/TradeHistoryControls.js","webpack://csgotrader.app-extension/./src/components/TradeHistory/TradeHistoryContent.js","webpack://csgotrader.app-extension/./src/components/TradeHistory/CSVExport.js","webpack://csgotrader.app-extension/./src/components/TradeHistory/TradeOfferHistoryHeader.js","webpack://csgotrader.app-extension/./src/components/TradeHistory/addItemDetails.js","webpack://csgotrader.app-extension/./src/components/TradeHistory/IncomingOfferHistory.js","webpack://csgotrader.app-extension/./src/components/TradeHistory/SentOfferHistory.js","webpack://csgotrader.app-extension/./src/pages/TradeHistory/TradeHistory.js","webpack://csgotrader.app-extension/./src/utils/steamID.js"],"sourcesContent":["import { getPrice, prettyPrintPrice } from 'utils/pricing';\nimport { getDopplerInfo, setAccessTokenFirstTime } from 'utils/utilsModular';\nimport { getPlayerSummaries } from 'utils/ISteamUser';\nimport { isDopplerInName, getFormattedPLPercentage } from './simpleUtils';\n\nconst getTradeHistory = (\n  maxTrades, startTime = 0, afterTrade = 0,\n) => new Promise((resolve, reject) => {\n  chrome.storage.local.get(['steamAcessTokenValid', 'steamAcessToken', 'prices', 'pricingProvider', 'currency', 'exchangeRate'],\n    ({\n      steamAcessTokenValid, steamAcessToken, prices, pricingProvider, pricingMode, currency, exchangeRate,\n    }) => {\n      if (steamAcessTokenValid) {\n        const getRequest = new Request(\n          `https://api.steampowered.com/IEconService/GetTradeHistory/v1/?max_trades=${maxTrades}&start_after_time=${startTime}&start_after_tradeid=${afterTrade}&get_descriptions=1&include_total=1language=english&access_token=${steamAcessToken}`,\n        );\n\n        fetch(getRequest).then((response) => {\n          if (!response.ok) {\n            console.log(`Error code: ${response.status} Status: ${response.statusText}`);\n            if (response.status === 403) {\n              setAccessTokenFirstTime();\n              reject('access_token_invalid');\n            } else reject(response.statusText);\n          } else return response.json();\n        }).then((body) => {\n          try {\n            if (body.response.trades) {\n              const partnerIDs = [];\n              body.response.trades.forEach((trade) => {\n                partnerIDs.push(trade.steamid_other);\n              });\n              const uniquePartnerIDs = [...new Set(partnerIDs)];\n              getPlayerSummaries(uniquePartnerIDs).then((summaries) => {\n                const trades = [];\n                body.response.trades.forEach((trade) => {\n                  const partnerSummary = summaries[trade.steamid_other] !== undefined\n                    ? summaries[trade.steamid_other]\n                    : {\n                      personaname: 'No name found',\n                    };\n                  const tradeWithDesc = {\n                    ...trade,\n                    receivedTotal: 0.0,\n                    givenTotal: 0.0,\n                    partnerSummary,\n                  };\n                  tradeWithDesc.assets_received_desc = [];\n                  tradeWithDesc.assets_given_desc = [];\n\n                  if (trade.assets_received) {\n                    trade.assets_received.forEach((received) => {\n                      const description = body.response.descriptions.filter((desc) => {\n                        return desc.appid === received.appid && desc.classid === received.classid\n                          && desc.instanceid === received.instanceid;\n                      });\n                      const dopplerInfo = isDopplerInName(description[0].market_hash_name)\n                        ? getDopplerInfo(description[0].icon_url)\n                        : null;\n                      const price = getPrice(\n                        description[0].market_hash_name,\n                        dopplerInfo,\n                        prices,\n                        pricingProvider,\n                        pricingMode,\n                        exchangeRate,\n                        currency,\n                      );\n                      tradeWithDesc.receivedTotal += parseFloat(price.price);\n                      tradeWithDesc.assets_received_desc.push({\n                        ...received,\n                        ...description[0],\n                        dopplerInfo,\n                        price,\n                      });\n                    });\n                  }\n\n                  if (trade.assets_given) {\n                    trade.assets_given.forEach((given) => {\n                      const description = body.response.descriptions.filter((desc) => {\n                        return desc.appid === given.appid && desc.classid === given.classid\n                          && desc.instanceid === given.instanceid;\n                      });\n                      const dopplerInfo = isDopplerInName(description[0].market_hash_name)\n                        ? getDopplerInfo(description[0].icon_url)\n                        : null;\n                      const price = getPrice(\n                        description[0].market_hash_name,\n                        dopplerInfo,\n                        prices,\n                        pricingProvider,\n                        pricingMode,\n                        exchangeRate,\n                        currency,\n                      );\n                      tradeWithDesc.givenTotal += parseFloat(price.price);\n                      tradeWithDesc.assets_given_desc.push({\n                        ...given,\n                        ...description[0],\n                        dopplerInfo,\n                        price,\n                      });\n                    });\n                  }\n\n                  tradeWithDesc.profitLoss = tradeWithDesc.receivedTotal - tradeWithDesc.givenTotal;\n                  tradeWithDesc.receivedTotalFormatted = prettyPrintPrice(\n                    currency,\n                    tradeWithDesc.receivedTotal.toFixed(2),\n                  );\n                  tradeWithDesc.givenTotalFormatted = prettyPrintPrice(\n                    currency,\n                    tradeWithDesc.givenTotal.toFixed(2),\n                  );\n                  tradeWithDesc.profitLossFormatted = prettyPrintPrice(\n                    currency,\n                    tradeWithDesc.profitLoss.toFixed(2),\n                  );\n                  tradeWithDesc.PLPercentageFormatted = getFormattedPLPercentage(\n                    tradeWithDesc.givenTotal,\n                    tradeWithDesc.receivedTotal,\n                  );\n\n                  trades.push(tradeWithDesc);\n                });\n                resolve({\n                  totalTrades: body.response.total_trades,\n                  trades,\n                  lastTradeID: trades[trades.length - 1].tradeid,\n                  lastTradeTime: trades[trades.length - 1].time_init,\n                  more: body.response.more,\n                });\n              }).catch((err) => {\n                console.log(err);\n              });\n            } else reject('trades undefined');\n          } catch (e) {\n            console.log(e);\n            reject(e);\n          }\n        }).catch((err) => {\n          console.log(err);\n          reject(err);\n        });\n      } else {\n        setAccessTokenFirstTime();\n        reject('access_token_invalid');\n      }\n    });\n});\n\nconst getTradeOffers = (\n  activesOnly, historicalOnly, includeDescriptions, sent, received,\n) => new Promise((resolve, reject) => {\n  chrome.storage.local.get(['steamAcessTokenValid', 'steamAcessToken'], ({ steamAcessTokenValid, steamAcessToken }) => {\n    if (steamAcessTokenValid) {\n      const getRequest = new Request(`https://api.steampowered.com/IEconService/GetTradeOffers/v1/?get_received_offers=${received}&get_sent_offers=${sent}&active_only=${activesOnly}&historical_only${historicalOnly}&get_descriptions=${includeDescriptions}&language=english&access_token=${steamAcessToken}`);\n\n      fetch(getRequest).then((response) => {\n        if (!response.ok) {\n          console.log(`Error code: ${response.status} Status: ${response.statusText}`);\n          if (response.status === 403) {\n            setAccessTokenFirstTime();\n            reject('access_token_invalid');\n          } else reject(response.statusText);\n        } else return response.json();\n      }).then((body) => {\n        try { resolve(body.response); } catch (e) {\n          console.log(e);\n          reject(e);\n        }\n      }).catch((err) => {\n        console.log(err);\n        reject(err);\n      });\n    } else {\n      setAccessTokenFirstTime();\n      reject('access_token_invalid');\n    }\n  });\n});\n\nexport { getTradeHistory, getTradeOffers };\n","import React from 'react';\n\nimport NewTabLink from 'components/NewTabLink/NewTabLink';\nimport { getItemMarketLink } from 'utils/simpleUtils';\n\nconst TradeOfferSide = (props) => {\n  const urlIconToString = (iconURL) => {\n    return `https://steamcommunity.com/economy/image/${iconURL}/256x256`;\n  };\n\n  const linkToItem = (profileid, appid, contextid, assetid) => {\n    return `https://steamcommunity.com/profiles/${profileid}/inventory/#${appid}_${contextid}_${assetid}`;\n  };\n\n  const { assets, profileid } = props;\n\n  return assets !== undefined ? (\n    <div className=\"assets col-md-6\">\n      <div className=\"assets__items\">\n        {assets.map((asset) => {\n          return (\n            <div\n              className=\"row assets__item \"\n              key={asset.assetid + asset.appid + asset.contextid}\n            >\n              <div className=\"col-3\">\n                <NewTabLink\n                  to={linkToItem(\n                    profileid,\n                    asset.appid,\n                    asset.contextid,\n                    asset.new_assetid,\n                  )}\n                >\n                  <img\n                    className=\"assets__image\"\n                    key={asset.assetid}\n                    src={urlIconToString(asset.icon_url)}\n                    alt={asset.market_hash_name}\n                  />\n                </NewTabLink>\n              </div>\n              <div className=\"col-9\">\n                <h3 className=\"assets__name\">\n                  <NewTabLink\n                    to={getItemMarketLink(asset.appid, asset.market_hash_name)}\n                  >\n                    {asset.market_hash_name}\n                  </NewTabLink>\n                </h3>\n                <span className=\"assets__price\">{asset.price.display}</span>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  ) : null;\n};\n\nexport default TradeOfferSide;\n","import React, { useState } from 'react';\n\nimport { dateToISODisplay } from 'utils/dateTime';\nimport CustomA11yButton from 'components/CustomA11yButton/CustomA11yButton';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPrint } from '@fortawesome/free-solid-svg-icons';\n\nconst SideList = (props) => {\n  const { assets } = props;\n  return (\n    <ul style={{ listStyle: 'none' }}>\n      {assets.map((item) => (\n        <li key={item.assetid}>\n          {item.market_hash_name}\n          :\n          <ul style={{ listStyle: 'none' }}>\n            <li>\n              Asset ID:\n              {' '}\n              {item.assetid}\n            </li>\n            <li>\n              New Asset ID:\n              {' '}\n              {item.new_assetid}\n            </li>\n          </ul>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nconst TradeHistoryDetailsPrint = (props) => {\n  const { trade } = props;\n  const [showDetails, setShowDetails] = useState(false);\n\n  return (\n    <>\n      <span style={{ float: 'right' }}>\n        <CustomA11yButton\n          action={() => { setShowDetails(!showDetails); }}\n          title=\"Print trade technical details\"\n          id=\"printTradeDetails\"\n        >\n          <FontAwesomeIcon icon={faPrint} />\n        </CustomA11yButton>\n      </span>\n      <div className={showDetails ? 'tradePrintDetails' : 'tradePrintDetails hidden'}>\n        Partner:\n        <ul style={{ listStyle: 'none' }}>\n          <li>\n            Name:\n            {' '}\n            {trade.partnerSummary.personaname}\n          </li>\n          <li>\n            SteamID:\n            {' '}\n            {trade.steamid_other}\n          </li>\n          <li>\n            Profile Link:\n            {' '}\n            {trade.partnerSummary.profileurl}\n          </li>\n        </ul>\n        Trade:\n        <ul style={{ listStyle: 'none' }}>\n          <li>\n            ID:\n            {' '}\n            {trade.tradeid}\n          </li>\n          <li>\n            Status:\n            {' '}\n            {trade.status}\n          </li>\n          <li>\n            Unix timestamp:\n            {' '}\n            {trade.time_init}\n          </li>\n          <li>\n            UTC time:\n            {' '}\n            {dateToISODisplay(trade.time_init)}\n          </li>\n        </ul>\n        Items:\n        <ul style={{ listStyle: 'none' }}>\n          <li>\n            Given:\n            {trade.assets_given_desc ? <SideList assets={trade.assets_given_desc} /> : null}\n          </li>\n          <li>\n            Received:\n            {trade.assets_received_desc ? <SideList assets={trade.assets_received_desc} /> : null}\n          </li>\n        </ul>\n      </div>\n    </>\n  );\n};\n\nexport default TradeHistoryDetailsPrint;\n","import React, { useEffect, useState } from 'react';\nimport TradeOfferSide from 'components/TradeHistory/TradeOfferSide';\nimport TradeHistoryDetailsPrint from 'components/TradeHistory/TradeHistoryDetailsPrint';\nimport NewTabLink from 'components/NewTabLink/NewTabLink';\nimport { dateToISODisplay, prettyTimeAgo } from 'utils/dateTime';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExchangeAlt } from '@fortawesome/free-solid-svg-icons';\n\nconst TradeOffers = ({ trades }) => {\n  const [steamID, setSteamID] = useState(null);\n\n  useEffect(() => {\n    chrome.storage.local.get(['steamIDOfUser'], ({ steamIDOfUser }) => {\n      setSteamID(steamIDOfUser);\n    });\n  }, []);\n\n  const profileIDToURL = (userId) => {\n    return `https://steamcommunity.com/profiles/${userId}`;\n  };\n\n  return trades.map((trade, index) => {\n    return (\n      <div className=\"row trade-history__list-item\" key={trade.tradeid}>\n        <div className=\"col-12\">\n          <h4 className=\"trade-history__title\">\n            #\n            {Number(index) + 1}\n            &nbsp;You have traded with&nbsp;\n            <NewTabLink\n              to={profileIDToURL(trade.steamid_other)}\n              className=\"trade-history__partner\"\n            >\n              {trade.partnerSummary.personaname}\n            </NewTabLink>\n            .\n          </h4>\n          <div className=\"row\" style={{ marginBottom: '20px' }}>\n            <div\n              className=\"trade-history__date-of-trade col-md-6\"\n              title={dateToISODisplay(trade.time_init)}\n            >\n              {prettyTimeAgo(trade.time_init)}\n            </div>\n\n            <div className=\"col-md-6\" style={{ color: 'rgba(255, 255, 255, 0.8)' }}>\n              <TradeHistoryDetailsPrint trade={trade} />\n            </div>\n          </div>\n        </div>\n        {TradeOfferSide({\n          assets: trade.assets_given_desc,\n          profileid: trade.steamid_other,\n        })}\n        {TradeOfferSide({\n          assets: trade.assets_received_desc,\n          profileid: steamID,\n        })}\n        <div className=\"col-12 \">\n          <div className=\"trade-history__exchange\">\n            <span className=\"trade-history__third\" title=\"Given Total\">\n              {trade.givenTotalFormatted}\n            </span>\n            <span className=\"trade-history__third trade-history__third--narrower\">\n              &nbsp;\n              <FontAwesomeIcon\n                className={`trade-history__icon trade-history__icon--${trade.profitLoss >= 0 ? 'profit' : 'loss'\n                }`}\n                icon={faExchangeAlt}\n              />\n            </span>\n            <span\n              className=\"trade-history__third\"\n              title=\"Received Total\"\n            >\n              {trade.receivedTotalFormatted}\n            </span>\n            <span\n              className={`trade-history__profit trade-history__profit--${trade.profitLoss >= 0 ? 'profit' : 'loss'\n              }`}\n              title=\"Profit/Loss made\"\n            >\n              {trade.profitLossFormatted}\n              &nbsp;\n              {trade.PLPercentageFormatted}\n            </span>\n          </div>\n        </div>\n      </div>\n    );\n  });\n};\n\nexport default TradeOffers;\n","import React from 'react';\n\nconst MissingItems = (props) => {\n  const { numberOfItemsMissing } = props;\n\n  const missingItem = (index) => {\n    return (\n      <div\n        className=\"row assets__item\"\n        key={`missing_item_${index}`}\n      >\n        <div className=\"col-9\">\n          <h3 className=\"assets__name\">\n            Item Missing Details\n          </h3>\n        </div>\n      </div>\n    );\n  };\n\n  const missingItemsArray = () => {\n    const missingItemsList = [];\n    for (let i = 0; i < numberOfItemsMissing; i += 1) {\n      missingItemsList.push(missingItem(i));\n    }\n    return missingItemsList;\n  };\n\n  return numberOfItemsMissing !== 0 ? (\n    <div className=\"assets col-md-6\">\n      <div className=\"assets__items\">\n        {\n          missingItemsArray()\n        }\n      </div>\n    </div>\n  ) : null;\n};\n\nexport default MissingItems;\n","import React from 'react';\n\nimport NewTabLink from 'components/NewTabLink/NewTabLink';\nimport MissingItems from 'components/TradeHistory/MissingItems';\nimport { getItemMarketLink } from 'utils/simpleUtils';\n\nconst TradeOfferHistorySide = (props) => {\n  const urlIconToString = (iconURL) => {\n    return `https://steamcommunity.com/economy/image/${iconURL}/256x256`;\n  };\n\n  const { assets, itemsWithoutDescriptions } = props;\n\n  return assets !== undefined ? (\n    <div className=\"assets col-md-6\">\n      <div className=\"assets__items\">\n        {assets.map((asset) => {\n          return (\n            <div\n              className=\"row assets__item \"\n              key={asset.assetid + asset.appid + asset.contextid}\n            >\n              <div className=\"col-3\">\n                <img\n                  className=\"assets__image\"\n                  key={asset.assetid}\n                  src={urlIconToString(asset.icon_url)}\n                  alt={asset.market_hash_name}\n                />\n              </div>\n              <div className=\"col-9\">\n                <h3 className=\"assets__name\">\n                  <NewTabLink\n                    to={getItemMarketLink(asset.appid, asset.market_hash_name)}\n                  >\n                    {asset.market_hash_name}\n                  </NewTabLink>\n                </h3>\n                <span className=\"assets__price\">{asset.price.display}</span>\n              </div>\n            </div>\n          );\n        })}\n        <MissingItems numberOfItemsMissing={itemsWithoutDescriptions} />\n      </div>\n    </div>\n  ) : null;\n};\n\nexport default TradeOfferHistorySide;\n","import React from 'react';\nimport TradeOfferHistorySide from 'components/TradeHistory/TradeOfferHistorySide';\nimport NewTabLink from 'components/NewTabLink/NewTabLink';\nimport { dateToISODisplay, prettyTimeAgo } from 'utils/dateTime';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExchangeAlt } from '@fortawesome/free-solid-svg-icons';\nimport { getProperStyleSteamIDFromOfferStyle } from 'utils/steamID';\nimport { offerStates } from 'utils/static/offers';\n\nconst OfferHistoryContent = ({ offers }) => {\n  const profileIDToURL = (userId) => {\n    return `https://steamcommunity.com/profiles/${userId}`;\n  };\n\n  return offers.map((offer) => {\n    return (\n      <div className=\"row trade-history__list-item\" key={offer.tradeofferid}>\n        <div className=\"col-12\">\n          <h4 className=\"trade-history__title\">\n            Offer from:&nbsp;\n            <NewTabLink\n              to={profileIDToURL(getProperStyleSteamIDFromOfferStyle(offer.accountid_other))}\n              className=\"trade-history__partner\"\n            >\n              {offer.partnerSummary.personaname}\n            </NewTabLink>\n            .\n          </h4>\n          <span\n            className=\"trade-history__date-of-trade\"\n            title={dateToISODisplay(offer.time_updated)}\n          >\n            {prettyTimeAgo(offer.time_updated)}\n          </span>\n          <OfferMessage message={offer.message} />\n          <OfferState state={offer.trade_offer_state} />\n        </div>\n        {TradeOfferHistorySide({\n          assets: offer.assets_given_desc,\n          itemsWithoutDescriptions: offer.itemsGivenWithoutDescriptions,\n        })}\n        {TradeOfferHistorySide({\n          assets: offer.assets_received_desc,\n          itemsWithoutDescriptions: offer.itemsToReceiveWithoutDescriptions,\n        })}\n        <div className=\"col-12 \">\n          <div className=\"trade-history__exchange\">\n            <span className=\"trade-history__third\" title=\"Given Total\">\n              {offer.givenTotalFormatted}\n            </span>\n            <span className=\"trade-history__third trade-history__third--narrower\">\n                      &nbsp;\n              <FontAwesomeIcon\n                className={`trade-history__icon trade-history__icon--${\n                  offer.profitLoss >= 0 ? 'profit' : 'loss'\n                }`}\n                icon={faExchangeAlt}\n              />\n            </span>\n            <span\n              className=\"trade-history__third\"\n              title=\"Received Total\"\n            >\n              {offer.receivedTotalFormatted}\n            </span>\n            <span\n              className={`trade-history__profit trade-history__profit--${\n                offer.profitLoss >= 0 ? 'profit' : 'loss'\n              }`}\n              title=\"Profit/Loss made\"\n            >\n              {offer.profitLossFormatted}\n              &nbsp;\n              {offer.PLPercentageFormatted}\n            </span>\n          </div>\n        </div>\n      </div>\n    );\n  });\n};\n\nconst OfferMessage = ({ message }) => {\n  return message !== ''\n    ? (\n      <div>\n        Message: &nbsp;&quot;\n        {message}\n        &quot;\n      </div>\n    )\n    : null;\n};\n\nconst OfferState = ({ state }) => {\n  return (\n    <div>\n      State:&nbsp;\n      {offerStates[state].pretty}\n    </div>\n  );\n};\n\nexport default OfferHistoryContent;\n","import React from 'react';\nimport SpinnerGif from 'assets/images/spinner.gif';\n\nconst Spinner = () => {\n  return (\n    <div className=\"spinner\">\n      <img src={SpinnerGif} alt=\"loading\" />\n    </div>\n  );\n};\n\nexport default Spinner;\n","import React from 'react';\nimport TradeOffers from 'components/TradeHistory/TradeOffers';\nimport OfferHistoryContent from 'components/TradeHistory/OfferHistoryContent';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEllipsisH } from '@fortawesome/free-solid-svg-icons';\nimport CustomA11yButton from 'components/CustomA11yButton/CustomA11yButton';\nimport Spinner from 'components/Spinner/Spinner';\n\nconst TradeOfferContent = ({ trades, type, loadNextBatch }) => {\n  return trades !== null\n    ? (\n      <>\n        <TypeSwitch trades={trades} type={type} />\n        <div className=\"text-center\">\n          <CustomA11yButton\n            title=\"Load more\"\n            action={loadNextBatch}\n            id=\"loadMore\"\n\n          >\n            <FontAwesomeIcon\n              icon={faEllipsisH}\n            />\n          </CustomA11yButton>\n        </div>\n      </>\n    )\n    : <Spinner />;\n};\n\nconst TypeSwitch = ({ trades, type }) => {\n  return type === 'history'\n    ? <TradeOffers trades={trades} />\n    : <OfferHistoryContent offers={trades} />;\n};\n\nexport default TradeOfferContent;\n","import React, { useState, useEffect } from 'react';\nimport { prettyPrintPrice } from 'utils/pricing';\n\nconst TradeSummary = ({ trades }) => {\n  const [PL, setPL] = useState(0);\n\n  useEffect(() => {\n    chrome.storage.local.get(['currency'], ({ currency }) => {\n      let sum = 0;\n      trades.forEach((trade) => {\n        sum += Number(trade.profitLoss);\n      });\n      setPL(prettyPrintPrice(currency, sum.toFixed(2)));\n    });\n  }, [trades]);\n\n  return (\n    <div className=\"trade-history__summary\">\n      P/L:&nbsp;\n      {PL}\n      &nbsp;in&nbsp;\n      {trades.length}\n      &nbsp;trades\n    </div>\n  );\n};\n\nexport default TradeSummary;\n","import React, { useState } from 'react';\nimport DatePicker from 'react-datepicker';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport CustomA11yButton from 'components/CustomA11yButton/CustomA11yButton';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSync } from '@fortawesome/free-solid-svg-icons';\n\nconst TradeHistoryControls = ({\n  historySize,\n  setHistorySize,\n  setExcludeEmpty,\n  setStartTime,\n  updateTrades,\n}) => {\n  const [selectState, setSelectState] = useState(historySize);\n  const [exclude, setExclude] = useState(false);\n  const [date, setDate] = useState(Date.now());\n\n  const selectValues = [10, 25, 50, 100];\n\n  const changeHandler = (e) => {\n    const value = e.target.value;\n    setSelectState(value);\n    setHistorySize(value);\n  };\n\n  const onExcludeChange = (event) => {\n    const value = event.target.checked;\n    setExclude(value);\n    setExcludeEmpty(value);\n  };\n\n  const onDateChange = (dateObject) => {\n    const unixTimeStamp = dateObject.getTime() / 1000;\n    setDate(dateObject);\n    setStartTime(unixTimeStamp);\n  };\n\n  return (\n    <div className=\"trade-history__controls\">\n      <div className=\"row\">\n        <span className=\"trade-history__control\">\n          Show:&nbsp;\n          <select\n            className=\"select-theme\"\n            onChange={changeHandler}\n            value={selectState}\n          >\n            {selectValues.map((selectValue) => {\n              return (\n                <option\n                  key={selectValue}\n                  value={selectValue}\n                  title={selectValue}\n                >\n                  {selectValue}\n                </option>\n              );\n            })}\n          </select>\n        </span>\n      </div>\n      <div className=\"row\">\n        <span className=\"trade-history__control\">\n          Show before:&nbsp;\n          <DatePicker\n            selected={date}\n            onChange={onDateChange}\n            className=\"input\"\n            showTimeSelect\n          />\n        </span>\n      </div>\n      <div className=\"row\">\n        <span className=\"trade-history__control\">\n          <label className=\"checkmark\">\n            Exclude empty offers:&nbsp;\n            <input\n              type=\"checkbox\"\n              onChange={onExcludeChange}\n              checked={exclude}\n              title=\"Hide trades that are empty in one side\"\n              className=\"checkmark__checkbox\"\n            />\n            <span className=\"checkmark__designed\" />\n          </label>\n        </span>\n      </div>\n      <div className=\"row\">\n        <span className=\"trade-history__control\">\n          <CustomA11yButton action={() => { updateTrades(false); }} title=\"Refresh\">\n            <FontAwesomeIcon icon={faSync} />\n          </CustomA11yButton>\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default TradeHistoryControls;\n","import React, { useEffect, useState } from 'react';\n\nimport { getTradeHistory } from 'utils/IEconService';\nimport TradeOfferContent from 'components/TradeHistory/TradeOfferContent';\nimport TradeSummary from 'components/TradeHistory/TradeSummary';\nimport TradeHistoryControls from 'components/TradeHistory/TradeHistoryControls';\n\nconst TradeHistoryContent = () => {\n  document.title = 'Trade History';\n\n  const [trades, setTrades] = useState(null);\n  const [totalTrades, setTotalTrades] = useState(0);\n  const [lastTradeID, setLastTradeID] = useState(0);\n  const [lastTradeTime, setLastTradeTime] = useState(0);\n  const [historySize, setHistorySize] = useState(50);\n  const [startTime, setStartTime] = useState(0);\n  const [excludeEmpty, setExcludeEmpty] = useState(false);\n  const [error, setError] = useState(null);\n\n  const updateTrades = (next) => {\n    setTrades(null);\n    getTradeHistory(historySize, next ? lastTradeTime : startTime, next ? lastTradeID : 0)\n      .then((tradesResponse) => {\n        const noEmptyTrades = [];\n        tradesResponse.trades.forEach((trade) => {\n          if (trade.assets_given_desc.length !== 0 && trade.assets_received_desc.length !== 0) {\n            noEmptyTrades.push(trade);\n          }\n        });\n        setTrades(excludeEmpty ? noEmptyTrades : tradesResponse.trades);\n        setTotalTrades(tradesResponse.totalTrades);\n        setLastTradeID(tradesResponse.lastTradeID);\n        setLastTradeTime(tradesResponse.lastTradeTime);\n      })\n      .catch((err) => {\n        console.log(err);\n        setError('Could not load your offer history, Steam might be down or you don\\'t have your API key set.');\n      });\n  };\n\n  const loadNextBatch = () => {\n    updateTrades(true);\n  };\n\n  useEffect(() => {\n    updateTrades();\n  }, [historySize, startTime, excludeEmpty]);\n\n  return (\n    <div className=\"container\">\n      <div className=\"trade-history\">\n        <h1 className=\"trade-history__headline clearfix\">\n          Trade History (\n          { totalTrades }\n          )\n          {trades !== null ? <TradeSummary trades={trades} /> : null}\n        </h1>\n        <TradeHistoryControls\n          setHistorySize={setHistorySize}\n          historySize={historySize}\n          setExcludeEmpty={setExcludeEmpty}\n          setStartTime={setStartTime}\n          updateTrades={updateTrades}\n        />\n        {\n          error === null\n            ? <TradeOfferContent trades={trades} type=\"history\" loadNextBatch={loadNextBatch} />\n            : <div className=\"warning\">{error}</div>\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default TradeHistoryContent;\n","import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileExport, faPlay } from '@fortawesome/free-solid-svg-icons';\nimport DatePicker from 'react-datepicker';\n\nimport CustomA11yButton from 'components/CustomA11yButton/CustomA11yButton';\nimport { getTradeHistory } from 'utils/IEconService';\n\nconst CSVExport = () => {\n  let csvContent = 'Partner SteamID,Partner Name,Time,P/L,Given Total,Received Total,Items Given,Items Taken\\n';\n  let requestCount = 0;\n\n  const [downloadURI, setDownloadURI] = useState('');\n  const [showDownload, setShowDownload] = useState(false);\n  const [statusMessage, setStatusMessage] = useState('');\n  const [exclude, setExclude] = useState(false);\n  const [exportStartTime, setExportStartTime] = useState(Date.now());\n  const [exportEndTime, setExportEndTime] = useState(Date.now());\n  const [exportStartTimeUnix, setExportStartTimeUnix] = useState(\n    parseInt(new Date().getTime() / 1000),\n  );\n  const [exportEndTimeUnix, setExportEndTimeUnix] = useState(\n    parseInt(new Date().getTime() / 1000),\n  );\n\n  const finishExport = () => {\n    const encodedURI = `data:text/csv;charset=utf-8,${encodeURIComponent(\n      csvContent,\n    )}`;\n    setDownloadURI(encodedURI);\n    setStatusMessage(\n      'Export finished, click the file icon to download the resulting .CSV file',\n    );\n    setShowDownload(true);\n  };\n\n  const loadNextChunk = (startTime, lastTradeID) => {\n    getTradeHistory(100, startTime, lastTradeID).then((tradesResponse) => {\n      requestCount += 1;\n      setStatusMessage(`Request ${requestCount} received`);\n\n      let lines = '';\n      let lastProcessedTradeTime;\n      let lastProcessedTradeID;\n\n      tradesResponse.trades.forEach((trade) => {\n        if (\n          (!exclude\n            || (exclude\n              && trade.assets_given_desc.length !== 0\n              && trade.assets_received_desc.length !== 0))\n          && exportEndTimeUnix <= trade.time_init\n        ) {\n          let givenItems = '';\n          trade.assets_given_desc.forEach((item) => {\n            givenItems += `${item.market_hash_name}(${item.price.price}),`;\n          });\n          let receivedItems = '';\n          trade.assets_received_desc.forEach((item) => {\n            receivedItems += `${item.market_hash_name}(${item.price.price}),`;\n          });\n          lines += `${trade.steamid_other},${\n            trade.partnerSummary.personaname\n          },${new Date(trade.time_init * 1000)},${trade.profitLoss},${\n            trade.givenTotal\n          },${trade.receivedTotal},\"${givenItems}\",\"${receivedItems}\"\\n`;\n        }\n        lastProcessedTradeTime = trade.time_init;\n        lastProcessedTradeID = trade.tradeid;\n      });\n\n      csvContent += lines;\n      if (tradesResponse.more && (\n        tradesResponse.trades.length === 0 || exportEndTimeUnix <= lastProcessedTradeTime)) {\n        loadNextChunk(lastProcessedTradeTime, lastProcessedTradeID);\n      } else finishExport();\n    }).catch(() => {\n      setStatusMessage('Steam did not return any trades for that period.');\n    });\n  };\n\n  const startExport = () => {\n    requestCount = 0;\n    setStatusMessage('Exporting in progress');\n    loadNextChunk(exportStartTimeUnix);\n  };\n\n  const onExcludeChange = (event) => {\n    const value = event.target.checked;\n    setExclude(value);\n  };\n\n  const onStartTimeChange = (date) => {\n    setExportStartTime(date);\n    const unixTimeStamp = parseInt(date.getTime() / 1000);\n    setExportStartTimeUnix(unixTimeStamp);\n  };\n\n  const onEndTimeChange = (date) => {\n    setExportEndTime(date);\n    const unixTimeStamp = parseInt(date.getTime() / 1000);\n    setExportEndTimeUnix(unixTimeStamp);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Export to .CSV</h1>\n      <div>\n        <div className=\"row\">\n          <span className=\"trade-history__control\">\n            <label className=\"checkmark\">\n              Exclude empty offers:&nbsp;\n              <input\n                type=\"checkbox\"\n                onChange={onExcludeChange}\n                checked={exclude}\n                title=\"Hide trades that are empty in one side\"\n                className=\"checkmark__checkbox\"\n              />\n              <span className=\"checkmark__designed\" />\n            </label>\n          </span>\n        </div>\n        <div className=\"row\">\n          <span className=\"trade-history__control\">\n            From:&nbsp;\n            <DatePicker\n              selected={exportEndTime}\n              onChange={onEndTimeChange}\n              className=\"input\"\n              showTimeSelect\n            />\n          </span>\n        </div>\n        <div className=\"row\">\n          <span className=\"trade-history__control\">\n            To:&nbsp;\n            <DatePicker\n              selected={exportStartTime}\n              onChange={onStartTimeChange}\n              className=\"input\"\n              showTimeSelect\n            />\n          </span>\n        </div>\n      </div>\n      <div>{statusMessage}</div>\n      <div className=\"row\">\n        <span className=\"trade-history__control\">\n          <CustomA11yButton\n            action={startExport}\n            title=\"Start export\"\n            id=\"startExport\"\n          >\n            Start export&nbsp;\n            <FontAwesomeIcon icon={faPlay} />\n          </CustomA11yButton>\n        </span>\n      </div>\n\n      {showDownload ? (\n        <a\n          href={downloadURI}\n          download=\"trade_history_export.csv\"\n          title=\"Download trade_history_export.csv\"\n        >\n          <FontAwesomeIcon icon={faFileExport} />\n        </a>\n      ) : null}\n    </div>\n  );\n};\n\nexport default CSVExport;\n","import React from 'react';\nimport TradeOfferContent from 'components/TradeHistory/TradeOfferContent';\n\nconst TradeOfferHistoryHeader = ({\n  type, totalOffers, error, currentPageOffers, loadNextBatch,\n}) => {\n  return (\n    <div className=\"container\">\n      <div className=\"trade-history\">\n        <h1 className=\"trade-history__headline clearfix\">\n          { type }\n          &nbsp;Offer History BETA (\n          { totalOffers }\n          )\n        </h1>\n        <p>\n          Unfortunately the Steam API does not return the details (names, images) of some items.\n          I will try to address this in the future.\n        </p>\n        {\n          error === null\n            ? <TradeOfferContent trades={currentPageOffers} type=\"offer\" loadNextBatch={loadNextBatch} />\n            : <div className=\"warning\">{error}</div>\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default TradeOfferHistoryHeader;\n","import { getPlayerSummaries } from 'utils/ISteamUser';\nimport { getProperStyleSteamIDFromOfferStyle } from 'utils/steamID';\nimport { isDopplerInName, getFormattedPLPercentage } from '../../utils/simpleUtils';\nimport { getDopplerInfo } from '../../utils/utilsModular';\nimport { getPrice, prettyPrintPrice } from '../../utils/pricing';\n\nconst addOfferDetails = (offers, descriptions, currentIndex) => {\n  const currentBatch = [...offers].splice(currentIndex, 50);\n  const partnerIDs = [];\n\n  currentBatch.forEach((offer) => {\n    if (offer.accountid_other) {\n      partnerIDs.push(getProperStyleSteamIDFromOfferStyle(offer.accountid_other));\n    }\n  });\n\n  const uniquePartnerIDs = [...new Set(partnerIDs)];\n\n  return new Promise((resolve, reject) => {\n    chrome.storage.local.get(['prices', 'pricingProvider', 'currency', 'exchangeRate'],\n      ({\n        prices, pricingProvider, pricingMode, currency, exchangeRate,\n      }) => {\n        getPlayerSummaries(uniquePartnerIDs).then((summaries) => {\n          const offersWithDetails = [];\n          currentBatch.forEach((offer) => {\n            const partnerSummary = summaries[\n              getProperStyleSteamIDFromOfferStyle(offer.accountid_other)\n            ] !== undefined\n              ? summaries[getProperStyleSteamIDFromOfferStyle(offer.accountid_other)]\n              : {\n                personaname: 'No name found',\n              };\n            const offerWithDesc = {\n              ...offer,\n              receivedTotal: 0.0,\n              givenTotal: 0.0,\n              partnerSummary,\n            };\n            offerWithDesc.assets_received_desc = [];\n            offerWithDesc.assets_given_desc = [];\n\n            if (offer.items_to_receive) {\n              offerWithDesc.itemsToReceiveWithoutDescriptions = 0;\n              offer.items_to_receive.forEach((received) => {\n                const description = descriptions.filter((desc) => {\n                  return desc.appid === received.appid && desc.classid === received.classid\n                    && desc.instanceid === received.instanceid;\n                });\n                if (description[0]) {\n                  const dopplerInfo = isDopplerInName(description[0].market_hash_name)\n                    ? getDopplerInfo(description[0].icon_url)\n                    : null;\n                  const price = getPrice(\n                    description[0].market_hash_name,\n                    dopplerInfo,\n                    prices,\n                    pricingProvider,\n                    pricingMode,\n                    exchangeRate,\n                    currency,\n                  );\n                  offerWithDesc.receivedTotal += parseFloat(price.price);\n                  offerWithDesc.assets_received_desc.push({\n                    ...received,\n                    ...description[0],\n                    dopplerInfo,\n                    price,\n                  });\n                } else offerWithDesc.itemsToReceiveWithoutDescriptions += 1;\n              });\n            }\n\n            if (offer.items_to_give) {\n              offerWithDesc.itemsGivenWithoutDescriptions = 0;\n              offer.items_to_give.forEach((given) => {\n                const description = descriptions.filter((desc) => {\n                  return desc.appid === given.appid && desc.classid === given.classid\n                    && desc.instanceid === given.instanceid;\n                });\n                if (description[0]) {\n                  const dopplerInfo = isDopplerInName(description[0].market_hash_name)\n                    ? getDopplerInfo(description[0].icon_url)\n                    : null;\n                  const price = getPrice(\n                    description[0].market_hash_name,\n                    dopplerInfo,\n                    prices,\n                    pricingProvider,\n                    pricingMode,\n                    exchangeRate,\n                    currency,\n                  );\n                  offerWithDesc.givenTotal += parseFloat(price.price);\n                  offerWithDesc.assets_given_desc.push({\n                    ...given,\n                    ...description[0],\n                    dopplerInfo,\n                    price,\n                  });\n                } else offerWithDesc.itemsGivenWithoutDescriptions += 1;\n              });\n            }\n\n            offerWithDesc.profitLoss = offerWithDesc.receivedTotal - offerWithDesc.givenTotal;\n            offerWithDesc.receivedTotalFormatted = prettyPrintPrice(\n              currency,\n              offerWithDesc.receivedTotal.toFixed(2),\n            );\n            offerWithDesc.givenTotalFormatted = prettyPrintPrice(\n              currency,\n              offerWithDesc.givenTotal.toFixed(2),\n            );\n            offerWithDesc.profitLossFormatted = prettyPrintPrice(\n              currency,\n              offerWithDesc.profitLoss.toFixed(2),\n            );\n            offerWithDesc.PLPercentageFormatted = getFormattedPLPercentage(\n              offerWithDesc.givenTotal,\n              offerWithDesc.receivedTotal,\n            );\n            offersWithDetails.push(offerWithDesc);\n          });\n          resolve(offersWithDetails);\n        }).catch((err) => {\n          console.log(err);\n          reject(err);\n        });\n      });\n  });\n};\n\nexport default addOfferDetails;\n","import React, { useEffect, useState } from 'react';\n\nimport { getTradeOffers } from 'utils/IEconService';\nimport TradeOfferHistoryHeader from 'components/TradeHistory/TradeOfferHistoryHeader';\nimport { offerStates } from 'utils/static/offers';\nimport addItemDetails from './addItemDetails';\n\nconst IncomingOfferHistory = () => {\n  document.title = 'Incoming Offer History';\n\n  const [offers, setOffers] = useState([]);\n  const [descriptions, setDescriptions] = useState([]);\n  const [totalOffers, setTotalOffers] = useState(0);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [error, setError] = useState(null);\n  const [currentPageOffers, setCurrentPageOffers] = useState(null);\n\n  const loadOffers = () => {\n    getTradeOffers(0, 1, 1, 0, 1)\n      .then((offersResponse) => {\n        const nonActiveOffers = [];\n        offersResponse.trade_offers_received.forEach((offer) => {\n          if (offer.trade_offer_state && offer.trade_offer_state !== offerStates[2].key) {\n            nonActiveOffers.push(offer);\n          }\n        });\n        setDescriptions(offersResponse.descriptions);\n        setOffers(nonActiveOffers);\n        setTotalOffers(nonActiveOffers.length);\n      })\n      .catch((err) => {\n        console.log(err);\n        setError('Could not load your offer history, Steam might be down or you don\\'t have your API key set.');\n      });\n  };\n\n  const loadNextBatch = () => {\n    setCurrentIndex(currentIndex + 50);\n  };\n\n  useEffect(() => {\n    loadOffers();\n  }, []);\n\n  useEffect(() => {\n    if (offers.length > 0) {\n      addItemDetails(offers, descriptions, currentIndex).then((offersWithDetails) => {\n        setCurrentPageOffers(offersWithDetails);\n      }).catch((err) => {\n        console.log(err);\n      });\n    }\n  }, [offers, currentIndex]);\n\n  return (\n    <TradeOfferHistoryHeader\n      type=\"Incoming\"\n      totalOffers={totalOffers}\n      error={error}\n      currentPageOffers={currentPageOffers}\n      loadNextBatch={loadNextBatch}\n    />\n  );\n};\n\nexport default IncomingOfferHistory;\n","import React, { useEffect, useState } from 'react';\n\nimport { getTradeOffers } from 'utils/IEconService';\nimport TradeOfferHistoryHeader from 'components/TradeHistory/TradeOfferHistoryHeader';\nimport { offerStates } from 'utils/static/offers';\nimport addItemDetails from './addItemDetails';\n\nconst SentOfferHistory = () => {\n  document.title = 'Sent Offer History';\n\n  const [offers, setOffers] = useState([]);\n  const [descriptions, setDescriptions] = useState([]);\n  const [totalOffers, setTotalOffers] = useState(0);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [error, setError] = useState(null);\n  const [currentPageOffers, setCurrentPageOffers] = useState(null);\n\n  const loadOffers = () => {\n    getTradeOffers(0, 1, 1, 1, 0)\n      .then((offersResponse) => {\n        const nonActiveOffers = [];\n        offersResponse.trade_offers_sent.forEach((offer) => {\n          if (offer.trade_offer_state && offer.trade_offer_state !== offerStates[2].key) {\n            nonActiveOffers.push(offer);\n          }\n        });\n        setDescriptions(offersResponse.descriptions);\n        setOffers(nonActiveOffers);\n        setTotalOffers(nonActiveOffers.length);\n      })\n      .catch((err) => {\n        console.log(err);\n        setError('Could not load your offer history, Steam might be down or you don\\'t have your API key set.');\n      });\n  };\n\n  const loadNextBatch = () => {\n    setCurrentIndex(currentIndex + 50);\n  };\n\n  useEffect(() => {\n    loadOffers();\n  }, []);\n\n  useEffect(() => {\n    if (offers.length > 0) {\n      addItemDetails(offers, descriptions, currentIndex).then((offersWithDetails) => {\n        setCurrentPageOffers(offersWithDetails);\n      }).catch((err) => {\n        console.log(err);\n      });\n    }\n  }, [offers, currentIndex]);\n\n  return (\n    <TradeOfferHistoryHeader\n      type=\"Sent\"\n      totalOffers={totalOffers}\n      error={error}\n      currentPageOffers={currentPageOffers}\n      loadNextBatch={loadNextBatch}\n    />\n  );\n};\n\nexport default SentOfferHistory;\n","import React from 'react';\nimport {\n  Routes,\n  Route,\n  Navigate,\n} from 'react-router-dom';\nimport { Nav } from 'react-bootstrap';\n\nimport TradeHistoryContent from 'components/TradeHistory/TradeHistoryContent';\nimport CSVExport from 'components/TradeHistory/CSVExport';\nimport IncomingOfferHistory from 'components/TradeHistory/IncomingOfferHistory';\nimport SentOfferHistory from 'components/TradeHistory/SentOfferHistory';\nimport CustomNavLink from 'components/Navigation/CustomNavLink';\n\nconst routes = [\n  {\n    to: 'history/',\n    name: 'Trade History',\n    component: TradeHistoryContent,\n  },\n  {\n    to: 'history-export/',\n    name: 'Trade History Export',\n    component: CSVExport,\n  },\n  {\n    to: 'incoming-offer-history/',\n    name: 'Incoming Offer History',\n    component: IncomingOfferHistory,\n  },\n  {\n    to: 'sent-offer-history/',\n    name: 'Sent Offer History',\n    component: SentOfferHistory,\n  },\n];\n\nconst TradeHistory = () => {\n  return (\n    <div className=\"options\">\n      <div className=\"container-fluid full-height\">\n        <div className=\"row\">\n          <div className=\"col-md-2 d-none d-md-block nav__sidebar\">\n            <div className=\"sidebar-sticky\">\n              <Nav\n                defaultActiveKey=\"/trade-history/history/\"\n                className=\"flex-column\"\n              >\n                {routes.map((route) => (\n                  <CustomNavLink\n                    to={route.to}\n                    key={route.to}\n                    title={route.name}\n                    activeClassName=\"sideNavActive\"\n                    className=\"px-4 py-3\"\n                  />\n                ))}\n              </Nav>\n            </div>\n          </div>\n          <div className=\"col-md-10 ml-sm-auto col-lg-10 pt-3 px-4 options__content\">\n            <Routes>\n              {routes.map((route) => (\n                <Route\n                  path={route.to}\n                  element={<route.component />}\n                  key={route.to}\n                />\n              ))}\n              <Route path=\"*\" element={<Navigate to=\"history/\" replace />} />\n            </Routes>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TradeHistory;\n","import { injectScript } from 'utils/injection';\n\n// converts shitty annoying trade offer style SteamID to proper SteamID64\nconst getProperStyleSteamIDFromOfferStyle = (offerStyleID) => {\n  return `7656${Number(offerStyleID) + Number(1197960265728)}`;\n};\n\n// there are many different kinds of SteamID formats\n// this function converts the 64bit into the ones used in trade offers\nconst getOfferStyleSteamID = (steamID64) => {\n  return Number(steamID64.split('7656')[1]) - Number(1197960265728);\n};\n\n// gets SteamID of the user logged into steam (returns false if there is no user logged in)\nconst getUserSteamID = () => {\n  const getUserSteamIDScript = 'document.querySelector(\\'body\\').setAttribute(\\'steamidOfLoggedinUser\\', g_steamID);';\n  return injectScript(getUserSteamIDScript, true, 'steamidOfLoggedinUser', 'steamidOfLoggedinUser');\n};\n\n// gets the steam id of the user that's profile this script is run on\nconst getProfileOwnerSteamID = () => {\n  const steamIDOfProfileOwnerScript = 'document.querySelector(\\'body\\').setAttribute(\\'steamidOfProfileOwner\\', g_rgProfileData.steamid);';\n  return injectScript(steamIDOfProfileOwnerScript, true, 'steamidOfProfileOwner', 'steamidOfProfileOwner');\n};\n\nconst getGroupID = () => {\n  return document.querySelector('input[name=groupId]').value;\n};\n\nconst getSharedFileIDAndOwner = () => {\n  const pagingElement = document.querySelector('.commentthread_paging');\n\n  const ownerID = pagingElement.id.split('commentthread_PublishedFile_Public_')[1].split('_')[0];\n  const sharedFileID = pagingElement.id.split('_pagecontrols')[0].split('_')[4];\n\n  return { ownerID, sharedFileID };\n};\n\nexport {\n  getProperStyleSteamIDFromOfferStyle, getOfferStyleSteamID,\n  getUserSteamID, getProfileOwnerSteamID, getGroupID,\n  getSharedFileIDAndOwner,\n};\n"],"names":["getTradeHistory","maxTrades","startTime","afterTrade","Promise","resolve","reject","chrome","storage","local","get","steamAcessTokenValid","steamAcessToken","prices","pricingProvider","pricingMode","currency","exchangeRate","getRequest","Request","fetch","then","response","ok","json","console","log","status","statusText","setAccessTokenFirstTime","body","trades","partnerIDs","forEach","trade","push","steamid_other","uniquePartnerIDs","Set","getPlayerSummaries","summaries","partnerSummary","undefined","personaname","tradeWithDesc","receivedTotal","givenTotal","assets_received_desc","assets_given_desc","assets_received","received","description","descriptions","filter","desc","appid","classid","instanceid","dopplerInfo","isDopplerInName","market_hash_name","getDopplerInfo","icon_url","price","getPrice","parseFloat","assets_given","given","profitLoss","receivedTotalFormatted","prettyPrintPrice","toFixed","givenTotalFormatted","profitLossFormatted","PLPercentageFormatted","getFormattedPLPercentage","totalTrades","total_trades","lastTradeID","length","tradeid","lastTradeTime","time_init","more","catch","err","e","getTradeOffers","activesOnly","historicalOnly","includeDescriptions","sent","props","linkToItem","profileid","contextid","assetid","assets","React","className","map","asset","key","NewTabLink","to","new_assetid","src","iconURL","alt","getItemMarketLink","display","SideList","style","listStyle","item","showDetails","setShowDetails","useState","float","CustomA11yButton","action","title","id","FontAwesomeIcon","icon","faPrint","profileurl","dateToISODisplay","TradeOffers","steamID","setSteamID","useEffect","steamIDOfUser","index","Number","userId","marginBottom","prettyTimeAgo","color","TradeHistoryDetailsPrint","TradeOfferSide","faExchangeAlt","numberOfItemsMissing","missingItemsArray","missingItemsList","i","itemsWithoutDescriptions","MissingItems","OfferMessage","message","OfferState","state","offerStates","pretty","OfferHistoryContent","offers","offer","tradeofferid","getProperStyleSteamIDFromOfferStyle","accountid_other","time_updated","trade_offer_state","TradeOfferHistorySide","itemsGivenWithoutDescriptions","itemsToReceiveWithoutDescriptions","Spinner","SpinnerGif","TypeSwitch","type","TradeOfferContent","loadNextBatch","faEllipsisH","TradeSummary","PL","setPL","sum","TradeHistoryControls","historySize","setHistorySize","setExcludeEmpty","setStartTime","updateTrades","selectState","setSelectState","exclude","setExclude","date","setDate","Date","now","onChange","value","target","selectValue","DatePicker","selected","dateObject","unixTimeStamp","getTime","showTimeSelect","event","checked","faSync","TradeHistoryContent","document","setTrades","setTotalTrades","setLastTradeID","setLastTradeTime","excludeEmpty","error","setError","next","tradesResponse","noEmptyTrades","CSVExport","csvContent","requestCount","downloadURI","setDownloadURI","showDownload","setShowDownload","statusMessage","setStatusMessage","exportStartTime","setExportStartTime","exportEndTime","setExportEndTime","exportStartTimeUnix","setExportStartTimeUnix","parseInt","exportEndTimeUnix","setExportEndTimeUnix","loadNextChunk","lastProcessedTradeTime","lastProcessedTradeID","lines","givenItems","receivedItems","finishExport","encodedURI","encodeURIComponent","startExport","faPlay","href","download","faFileExport","TradeOfferHistoryHeader","totalOffers","currentPageOffers","addOfferDetails","currentIndex","currentBatch","splice","offersWithDetails","offerWithDesc","items_to_receive","items_to_give","IncomingOfferHistory","setOffers","setDescriptions","setTotalOffers","setCurrentIndex","setCurrentPageOffers","offersResponse","nonActiveOffers","trade_offers_received","addItemDetails","SentOfferHistory","trade_offers_sent","routes","name","component","TradeHistory","Nav","defaultActiveKey","route","CustomNavLink","activeClassName","Routes","Route","path","element","Navigate","replace","offerStyleID","getOfferStyleSteamID","steamID64","split"],"sourceRoot":""}