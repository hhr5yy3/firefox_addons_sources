var InstalledFontDetector = function () {
  var e, g, f, c, b, a;
  b = '48px';
  a = 'i ll wwww';
  e = document.getElementsByTagName('body')[0];
  c = document.createElement('br');
  g = document.createElement('span');
  g.style.fontSize = b;
  g.innerHTML = a;
  f = document.createElement('span');
  f.style.fontSize = b;
  f.innerHTML = a;
  function d(i) {
    g.style.fontFamily = '"' + i + '", monospace';
    f.style.fontFamily = '"' + i + '", sans-serif';
    e.appendChild(g);
    e.appendChild(c);
    e.appendChild(f);
    var h =
      g.offsetWidth === f.offsetWidth && g.offsetHeight === f.offsetHeight;
    e.removeChild(f);
    e.removeChild(c);
    e.removeChild(g);
    return h;
  }
  this.detect = d;
};
function fnBrowserDevicePrintVersion() {
  return '2.0.0';
}
function fnZeroPad(b, a) {
  var c = '' + b;
  while (c.length < a) {
    c = '0' + c;
  }
  return c;
}
function fnBrowserCurrentTimeStamp() {
  try {
    return new Date().toJSON();
  } catch (a) {
    try {
      var b = new Date();
      return (
        fnZeroPad(b.getUTCFullYear(), 4) +
        '-' +
        fnZeroPad(b.getUTCMonth(), 2) +
        '-' +
        fnZeroPad(b.getUTCDate(), 2) +
        'T' +
        fnZeroPad(b.getUTCHours(), 2) +
        ':' +
        fnZeroPad(b.getUTCMinutes(), 2) +
        ':' +
        fnZeroPad(b.getUTCSeconds(), 2) +
        '.' +
        fnZeroPad(b.getUTCMilliseconds(), 3) +
        'Z'
      );
    } catch (a) {
      return '';
    }
  }
}
function fnBrowserUserAgent() {
  var a;
  try {
    a = navigator.userAgent.toLowerCase();
  } catch (b) {}
  return a;
}
Date.prototype.deviceprint_stdTimezoneOffset = function () {
  var d, c;
  c = new Date(this.getFullYear(), 0, 1);
  d = new Date(this.getFullYear(), 6, 1);
  return Math.max(c.getTimezoneOffset(), d.getTimezoneOffset());
};
Date.prototype.isDST = function () {
  return this.getTimezoneOffset() < this.deviceprint_stdTimezoneOffset();
};
function fnBrowserTimeZone() {
  var e, d, b, a;
  a = {};
  try {
    d = new Date().getTimezoneOffset();
    e = Math.abs(d);
    b = new Date();
    if (b.isDST()) {
      e += 60;
    }
    d =
      (d < 0 ? '+' : '-') +
      ('00' + Math.floor(e / 60)).slice(-2) +
      ':' +
      ('00' + (e % 60)).slice(-2);
    a.timezone = d;
  } catch (c) {}
  return a;
}
function fnBrowserScreen() {
  var a,
    c = {};
  try {
    if (screen) {
      if (screen.width) {
        c.width = screen.width + '';
      }
      if (screen.height) {
        c.height = screen.height + '';
      }
      if (screen.colorDepth) {
        c.colorDepth = screen.colorDepth + '';
      }
    }
    a = fnBrowserFontSmoothingEnabled();
    if (!fnIsBlank(a)) {
      c.fontSmoothingEnabled = a;
    }
  } catch (b) {}
  return c;
}
function fnBrowserFontSmoothingEnabled() {
  var a, c, b, e, d, h, g;
  try {
    if (screen && typeof screen.fontSmoothingEnabled !== 'undefined') {
      if (screen.fontSmoothingEnabled) {
        return 'true';
      } else {
        return 'false';
      }
    } else {
      try {
        a = 'false';
        c = document.createElement('canvas');
        c.width = '35';
        c.height = '35';
        c.style.display = 'none';
        document.body.appendChild(c);
        b = c.getContext('2d');
        b.textBaseline = 'top';
        b.font = '32px Arial';
        b.fillStyle = 'black';
        b.strokeStyle = 'black';
        b.fillText('O', 0, 0);
        for (d = 8; d <= 32; d = d + 1) {
          for (e = 1; e <= 32; e = e + 1) {
            h = b.getImageData(e, d, 1, 1).data;
            g = h[3];
            if (g !== 255 && g !== 0) {
              return 'true';
            }
          }
        }
        return 'false';
      } catch (f) {
        return a;
      }
    }
  } catch (f) {}
  return a;
}
function fnBrowserLanguage() {
  var b = {};
  try {
    if (navigator) {
      if (navigator.language) {
        b.language = navigator.language;
      }
      if (navigator.userLanguage) {
        b.userLanguage = navigator.userLanguage;
      }
      if (navigator.browserLanguage) {
        b.browserLanguage = navigator.browserLanguage;
      }
      if (navigator.systemLanguage) {
        b.systemLanguage = navigator.systemLanguage;
      }
    }
  } catch (a) {}
  return b;
}
function fnBrowserFonts() {
  var f, c, a, e, b;
  e = { installedFonts: [] };
  try {
    f = [
      'Abadi MT Condensed Light',
      'Adobe Fangsong Std',
      'Adobe Hebrew',
      'Adobe Ming Std',
      'Agency FB',
      'Aharoni',
      'Andalus',
      'Angsana New',
      'AngsanaUPC',
      'Aparajita',
      'Arab',
      'Arabic Transparent',
      'Arabic Typesetting',
      'Arial Baltic',
      'Arial Black',
      'Arial CE',
      'Arial CYR',
      'Arial Greek',
      'Arial TUR',
      'Arial',
      'Batang',
      'BatangChe',
      'Bauhaus 93',
      'Bell MT',
      'Bitstream Vera Serif',
      'Bodoni MT',
      'Bookman Old Style',
      'Braggadocio',
      'Broadway',
      'Browallia New',
      'BrowalliaUPC',
      'Calibri Light',
      'Calibri',
      'Californian FB',
      'Cambria Math',
      'Cambria',
      'Candara',
      'Castellar',
      'Casual',
      'Centaur',
      'Century Gothic',
      'Chalkduster',
      'Colonna MT',
      'Comic Sans MS',
      'Consolas',
      'Constantia',
      'Copperplate Gothic Light',
      'Corbel',
      'Cordia New',
      'CordiaUPC',
      'Courier New Baltic',
      'Courier New CE',
      'Courier New CYR',
      'Courier New Greek',
      'Courier New TUR',
      'Courier New',
      'DFKai-SB',
      'DaunPenh',
      'David',
      'DejaVu LGC Sans Mono',
      'Desdemona',
      'DilleniaUPC',
      'DokChampa',
      'Dotum',
      'DotumChe',
      'Ebrima',
      'Engravers MT',
      'Eras Bold ITC',
      'Estrangelo Edessa',
      'EucrosiaUPC',
      'Euphemia',
      'Eurostile',
      'FangSong',
      'Forte',
      'FrankRuehl',
      'Franklin Gothic Heavy',
      'Franklin Gothic Medium',
      'FreesiaUPC',
      'French Script MT',
      'Gabriola',
      'Gautami',
      'Georgia',
      'Gigi',
      'Gisha',
      'Goudy Old Style',
      'Gulim',
      'GulimChe',
      'GungSeo',
      'Gungsuh',
      'GungsuhChe',
      'Haettenschweiler',
      'Harrington',
      'Hei S',
      'HeiT',
      'Heisei Kaku Gothic',
      'Hiragino Sans GB',
      'Impact',
      'Informal Roman',
      'IrisUPC',
      'Iskoola Pota',
      'JasmineUPC',
      'KacstOne',
      'KaiTi',
      'Kalinga',
      'Kartika',
      'Khmer UI',
      'Kino MT',
      'KodchiangUPC',
      'Kokila',
      'Kozuka Gothic Pr6N',
      'Lao UI',
      'Latha',
      'Leelawadee',
      'Levenim MT',
      'LilyUPC',
      'Lohit Gujarati',
      'Loma',
      'Lucida Bright',
      'Lucida Console',
      'Lucida Fax',
      'Lucida Sans Unicode',
      'MS Gothic',
      'MS Mincho',
      'MS PGothic',
      'MS PMincho',
      'MS Reference Sans Serif',
      'MS UI Gothic',
      'MV Boli',
      'Magneto',
      'Malgun Gothic',
      'Mangal',
      'Marlett',
      'Matura MT Script Capitals',
      'Meiryo UI',
      'Meiryo',
      'Menlo',
      'Microsoft Himalaya',
      'Microsoft JhengHei',
      'Microsoft New Tai Lue',
      'Microsoft PhagsPa',
      'Microsoft Sans Serif',
      'Microsoft Tai Le',
      'Microsoft Uighur',
      'Microsoft YaHei',
      'Microsoft Yi Baiti',
      'MingLiU',
      'MingLiU-ExtB',
      'MingLiU_HKSCS',
      'MingLiU_HKSCS-ExtB',
      'Miriam Fixed',
      'Miriam',
      'Mongolian Baiti',
      'MoolBoran',
      'NSimSun',
      'Narkisim',
      'News Gothic MT',
      'Niagara Solid',
      'Nyala',
      'PMingLiU',
      'PMingLiU-ExtB',
      'Palace Script MT',
      'Palatino Linotype',
      'Papyrus',
      'Perpetua',
      'Plantagenet Cherokee',
      'Playbill',
      'Prelude Bold',
      'Prelude Condensed Bold',
      'Prelude Condensed Medium',
      'Prelude Medium',
      'PreludeCompressedWGL Black',
      'PreludeCompressedWGL Bold',
      'PreludeCompressedWGL Light',
      'PreludeCompressedWGL Medium',
      'PreludeCondensedWGL Black',
      'PreludeCondensedWGL Bold',
      'PreludeCondensedWGL Light',
      'PreludeCondensedWGL Medium',
      'PreludeWGL Black',
      'PreludeWGL Bold',
      'PreludeWGL Light',
      'PreludeWGL Medium',
      'Raavi',
      'Rachana',
      'Rockwell',
      'Rod',
      'Sakkal Majalla',
      'Sawasdee',
      'Script MT Bold',
      'Segoe Print',
      'Segoe Script',
      'Segoe UI Light',
      'Segoe UI Semibold',
      'Segoe UI Symbol',
      'Segoe UI',
      'Shonar Bangla',
      'Showcard Gothic',
      'Shruti',
      'SimHei',
      'SimSun',
      'SimSun-ExtB',
      'Simplified Arabic Fixed',
      'Simplified Arabic',
      'Snap ITC',
      'Sylfaen',
      'Symbol',
      'Tahoma',
      'Times New Roman Baltic',
      'Times New Roman CE',
      'Times New Roman CYR',
      'Times New Roman Greek',
      'Times New Roman TUR',
      'Times New Roman',
      'TlwgMono',
      'Traditional Arabic',
      'Trebuchet MS',
      'Tunga',
      'Tw Cen MT Condensed Extra Bold',
      'Ubuntu',
      'Umpush',
      'Univers',
      'Utopia',
      'Utsaah',
      'Vani',
      'Verdana',
      'Vijaya',
      'Vladimir Script',
      'Vrinda',
      'Webdings',
      'Wide Latin',
      'Wingdings',
    ];
    b = new InstalledFontDetector();
    a = [];
    for (c = 0; c < f.length; c = c + 1) {
      if (b.detect(f[c])) {
        a.push(f[c]);
      }
    }
    try {
      a.sort();
    } catch (d) {}
    e.installedFonts = a;
  } catch (d) {}
  return e;
}
function fnBrowserFontsOld() {
  var b, n, h, o, k, m, f, c, a, g, p, j, l;
  h = 0;
  f = 0;
  l = { installedFonts: [] };
  n = [
    'cursive',
    'monospace',
    'serif',
    'sans-serif',
    'fantasy',
    'default',
    'Arial',
    'Arial Black',
    'Arial Narrow',
    'Arial Rounded MT Bold',
    'Bookman Old Style',
    'Bradley Hand ITC',
    'Century',
    'Century Gothic',
    'Comic Sans MS',
    'Courier',
    'Courier New',
    'Georgia',
    'Gentium',
    'Impact',
    'King',
    'Lucida Console',
    'Lalit',
    'Modena',
    'Monotype Corsiva',
    'Papyrus',
    'Tahoma',
    'TeX',
    'Times',
    'Times New Roman',
    'Trebuchet MS',
    'Verdana',
    'Verona',
  ];
  try {
    b = 'position: absolute; visibility: hidden; display: block !important';
    h = n.length;
    o =
      '<b style="display:inline !important; width:auto !important; font:normal 10px/1 \'X\',sans-serif !important">ww</b><b style="display:inline !important; width:auto !important; font:normal 10px/1 \'X\',monospace !important">ww</b>';
    k = document.createDocumentFragment();
    m = [];
    for (f = 0; f < h; f = f + 1) {
      c = n[f];
      a = document.createElement('div');
      c = c.replace(/['"<>]/g, '');
      a.innerHTML = o.replace(/X/g, c);
      a.style.cssText = b;
      k.appendChild(a);
      m.push(a);
    }
    g = document.body;
    g.insertBefore(k, g.firstChild);
    p = [];
    for (f = 0; f < h; f = f + 1) {
      j = m[f].getElementsByTagName('b');
      if (j[0].offsetWidth === j[1].offsetWidth) {
        p.push(n[f]);
      }
    }
    for (f = 0; f < h; f = f + 1) {
      g.removeChild(m[f]);
    }
    try {
      p.sort();
    } catch (d) {}
    l.installedFonts = p;
  } catch (d) {}
  return l;
}
function fnBrowserPlugins() {
  var c, a, e, b, g, f;
  a = [];
  e = { installedPlugins: [] };
  try {
    if (navigator && navigator.plugins) {
      b = navigator.plugins;
      if (b.length > 0) {
        for (c = 0; c < b.length; c++) {
          f = b[c].name;
          if (!fnIsBlank(f)) {
            a.push(f);
          }
        }
      }
    } else {
      if (navigator && navigator.mimeTypes) {
        g = navigator.mimeTypes;
        if (g.length > 0) {
          for (c = 0; c < g.length; c++) {
            f = g[c].description;
            if (!fnIsBlank(f)) {
              a.push(f);
            }
          }
        }
      }
    }
    try {
      a = a.filter(function (j, i, h) {
        return h.indexOf(j) == i;
      });
    } catch (d) {}
    try {
      a.sort();
    } catch (d) {}
    e.installedPlugins = a;
  } catch (d) {}
  return e;
}
function fnBrowserPluginsOld() {
  var c, a, e, b, g, f;
  a = [];
  e = { installedPlugins: [] };
  try {
    if (navigator && navigator.plugins) {
      b = navigator.plugins;
      if (b.length > 0) {
        for (c = 0; c < b.length; c++) {
          f = fnStripExtension(b[c].filename, '.');
          if (!fnIsBlank(f)) {
            a.push(f);
          }
        }
      }
    } else {
      if (navigator && navigator.mimeTypes) {
        g = navigator.mimeTypes;
        if (g.length > 0) {
          for (c = 0; c < g.length; c++) {
            f = g[c].description;
            if (!fnIsBlank(f)) {
              a.push(f);
            }
          }
        }
      }
    }
    try {
      a = a.filter(function (j, i, h) {
        return h.indexOf(j) == i;
      });
    } catch (d) {}
    try {
      a.sort();
    } catch (d) {}
    e.installedPlugins = a;
  } catch (d) {}
  return e;
}
function fnBrowserCookieEnabled() {
  var b;
  try {
    b = navigator.cookieEnabled ? 'true' : 'false';
    if (typeof navigator.cookieEnabled === 'undefined' && !b) {
      document.cookie = 'testcookie';
      b = document.cookie.indexOf('testcookie') !== -1 ? 'true' : 'false';
    }
  } catch (a) {}
  return b;
}
function fnBrowserJavaEnabled() {
  var b;
  try {
    if (navigator.javaEnabled()) {
      b = 'true';
    } else {
      b = 'false';
    }
  } catch (a) {}
  return b;
}
function fnBrowserTouchEnabled() {
  var a;
  try {
    if (document.createEvent('TouchEvent')) {
      a = 'true';
    } else {
      a = 'false';
    }
  } catch (b) {}
  return a;
}
function fnBrowserSilverLightDetails() {
  var a, c, b;
  try {
    try {
      a = new ActiveXObject('AgControl.AgControl');
      if (a.IsVersionSupported('5.0')) {
        b = '5.x';
      } else {
        if (a.IsVersionSupported('4.0')) {
          b = '4.x';
        } else {
          if (a.IsVersionSupported('3.0')) {
            b = '3.x';
          } else {
            if (a.IsVersionSupported('2.0')) {
              b = '2.x';
            } else {
              b = '1.x';
            }
          }
        }
      }
      a = null;
    } catch (f) {
      c = navigator.plugins['Silverlight Plug-In'];
      if (c) {
        if (c.description === '1.0.30226.2') {
          b = '2.x';
        } else {
          b = parseInt(c.description[0], 10);
        }
      }
    }
  } catch (d) {}
  return b;
}
function fnBrowserFlashDetails() {
  var d, a, c;
  d = null;
  a = null;
  try {
    d = swfobject.getFlashPlayerVersion();
    a = d.major + '.' + d.minor + '.' + d.release;
    if (a === '0.0.0') {
      return c;
    }
    c = a;
    return c;
  } catch (b) {
    return c;
  }
}
function fnBrowserCanvasHash() {
  var e, b, d, a, f;
  e;
  b = null;
  d = null;
  a =
    "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`~1!2@3#4$5%6^7&8*9(0)-_=+[{]}|;:',<.>/";
  f = null;
  try {
    b = document.createElement('canvas');
    d = b.getContext('2d');
    d.textBaseline = 'top';
    d.font = "14px 'Arial'";
    d.textBaseline = 'alphabetic';
    d.fillStyle = '#f60';
    d.fillRect(125, 1, 62, 20);
    d.fillStyle = '#069';
    d.fillText(a, 2, 15);
    d.fillStyle = 'rgba(102, 204, 0, 0.7)';
    d.fillText(a, 4, 17);
    f = fnCSM(b.toDataURL());
    return f;
  } catch (c) {
    return e;
  }
}
function fnBrowserTrueAgent() {
  var b, a, c;
  b = 'Unknown';
  a = null;
  c = null;
  a = navigator.userAgent.toLowerCase();
  if (
    document.all &&
    document.getElementById &&
    navigator.savePreferences &&
    a.indexOf('Netfront') < 0 &&
    navigator.appName !== 'Blazer'
  ) {
    b = 'Escape 5';
  } else {
    if (navigator.vendor === 'KDE') {
      b = 'Konqueror';
    } else {
      if (
        document.childNodes &&
        !document.all &&
        !navigator.taintEnabled &&
        !navigator.accentColorName
      ) {
        b = 'Safari';
      } else {
        if (
          document.childNodes &&
          !document.all &&
          !navigator.taintEnabled &&
          navigator.accentColorName
        ) {
          b = 'OmniWeb 4.5+';
        } else {
          if (navigator.__ice_version) {
            b = 'ICEBrowser';
          } else {
            if (
              window.ScriptEngine &&
              ScriptEngine().indexOf('InScript') + 1 &&
              document.createElement
            ) {
              b = 'iCab 3+';
            } else {
              if (
                window.ScriptEngine &&
                ScriptEngine().indexOf('InScript') + 1
              ) {
                b = 'iCab 2-';
              } else {
                if (
                  a.indexOf('hotjava') + 1 &&
                  navigator.accentColorName === 'undefined'
                ) {
                  b = 'HotJava';
                } else {
                  if (document.layers && !document.classes) {
                    b = 'Omniweb 4.2-';
                  } else {
                    if (document.layers && !navigator.mimeTypes['*']) {
                      b = 'Escape 4';
                    } else {
                      if (document.layers) {
                        b = 'Netscape 4';
                      } else {
                        if (window.opera && document.getElementsByClassName) {
                          b = 'Opera 9.5+';
                        } else {
                          if (window.opera && window.getComputedStyle) {
                            b = 'Opera 8';
                          } else {
                            if (window.opera && document.childNodes) {
                              b = 'Opera 7';
                            } else {
                              if (window.opera) {
                                b = 'Opera ' + window.opera.version();
                              } else {
                                if (navigator.appName.indexOf('WebTV') + 1) {
                                  b = 'WebTV';
                                } else {
                                  if (a.indexOf('netgem') + 1) {
                                    b = 'Netgem NetBox';
                                  } else {
                                    if (a.indexOf('opentv') + 1) {
                                      b = 'OpenTV';
                                    } else {
                                      if (a.indexOf('ipanel') + 1) {
                                        b = 'iPanel MicroBrowser';
                                      } else {
                                        if (
                                          document.getElementById &&
                                          !document.childNodes
                                        ) {
                                          b = 'Clue browser';
                                        } else {
                                          if (
                                            navigator.product &&
                                            navigator.product.indexOf('Hv') ===
                                              0
                                          ) {
                                            b = 'Tkhtml Hv3+';
                                          } else {
                                            if (
                                              typeof InstallTrigger !==
                                              'undefined'
                                            ) {
                                              b = 'Firefox';
                                            } else {
                                              if (window.atob) {
                                                b = 'Internet Explorer 10+';
                                              } else {
                                                if (
                                                  XDomainRequest &&
                                                  window.performance
                                                ) {
                                                  b = 'Internet Explorer 9';
                                                } else {
                                                  if (XDomainRequest) {
                                                    b = 'Internet Explorer 8';
                                                  } else {
                                                    if (
                                                      document.documentElement &&
                                                      document.documentElement
                                                        .style.maxHeight !==
                                                        'undefined'
                                                    ) {
                                                      b = 'Internet Explorer 7';
                                                    } else {
                                                      if (
                                                        document.compatMode &&
                                                        document.all
                                                      ) {
                                                        b =
                                                          'Internet Explorer 6';
                                                      } else {
                                                        if (
                                                          window.createPopup
                                                        ) {
                                                          b =
                                                            'Internet Explorer 5.5';
                                                        } else {
                                                          if (
                                                            window.attachEvent
                                                          ) {
                                                            b =
                                                              'Internet Explorer 5';
                                                          } else {
                                                            if (
                                                              document.all &&
                                                              navigator.appName !==
                                                                'Microsoft Pocket Internet Explorer'
                                                            ) {
                                                              b =
                                                                'Internet Explorer 4';
                                                            } else {
                                                              if (
                                                                a.indexOf(
                                                                  'msie'
                                                                ) + 1 &&
                                                                window.ActiveXObject
                                                              ) {
                                                                b =
                                                                  'Pocket Internet Explorer';
                                                              } else {
                                                                if (
                                                                  document.getElementById &&
                                                                  (a.indexOf(
                                                                    'netfront'
                                                                  ) + 1 ||
                                                                    navigator.appName ===
                                                                      'Blazer' ||
                                                                    navigator.product ===
                                                                      'Gecko' ||
                                                                    navigator.appName.indexOf(
                                                                      'PSP'
                                                                    ) + 1 ||
                                                                    navigator.appName.indexOf(
                                                                      'PLAYSTATION 3'
                                                                    ) + 1)
                                                                ) {
                                                                  b =
                                                                    'NetFront 3+';
                                                                } else {
                                                                  if (
                                                                    navigator.product ===
                                                                      'Gecko' &&
                                                                    !navigator.savePreferences
                                                                  ) {
                                                                    b =
                                                                      'Gecko engine (Mozilla, Netscape 6+ etc.)';
                                                                  } else {
                                                                    if (
                                                                      window.chrome
                                                                    ) {
                                                                      b =
                                                                        'Chrome';
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  c = b;
  return c;
}
function fnBrowserConnectionInfo() {
  var a;
  try {
    a = navigator.connection.type;
  } catch (b) {}
  return a;
}
function fnBrowserLatency() {
  var a, c;
  c = {};
  try {
    a = window.performance.timing;
    c.requestTime = a.responseStart - a.requestStart + '';
    c.networkLatency = a.responseEnd - a.fetchStart + '';
  } catch (b) {}
  return c;
}
function fnBrowserInfo() {
  var f, g, b, h, i, a, j, c, d;
  f = {};
  try {
    if (navigator) {
      g = navigator.userAgent;
      b = g.toLowerCase();
      h = navigator.appName;
      i = '' + parseFloat(navigator.appVersion);
      a = parseInt(navigator.appVersion, 10);
      if ((c = b.indexOf('opera')) != -1) {
        h = 'Opera';
        i = g.substring(c + 6);
        if ((c = b.indexOf('version')) != -1) {
          i = g.substring(c + 8);
        }
      }
      if ((c = b.indexOf('opr')) != -1) {
        h = 'Opera';
        i = g.substring(c + 4);
      } else {
        if ((c = b.indexOf('edge')) != -1) {
          h = 'Microsoft Edge';
          i = g.substring(c + 5);
        } else {
          if ((c = b.indexOf('msie')) != -1) {
            h = 'Internet Explorer';
            i = g.substring(c + 5);
          } else {
            if ((c = b.indexOf('chrome')) != -1) {
              h = 'Chrome';
              i = g.substring(c + 7);
            } else {
              if ((c = b.indexOf('safari')) != -1) {
                h = 'Safari';
                i = g.substring(c + 7);
                if ((c = b.indexOf('version')) != -1) {
                  i = g.substring(c + 8);
                }
              } else {
                if ((c = b.indexOf('firefox')) != -1) {
                  h = 'Firefox';
                  i = g.substring(c + 8);
                } else {
                  if (b.indexOf('trident/') != -1) {
                    h = 'Internet Explorer';
                    i = g.substring(g.indexOf('rv:') + 3);
                  } else {
                    if (
                      (j = g.lastIndexOf(' ') + 1) < (c = g.lastIndexOf('/'))
                    ) {
                      h = g.substring(j, c);
                      i = g.substring(c + 1);
                      if (h.toLowerCase() == h.toUpperCase()) {
                        h = navigator.appName;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((d = i.indexOf(';')) != -1) {
        i = i.substring(0, d);
      }
      if ((d = i.indexOf(' ')) != -1) {
        i = i.substring(0, d);
      }
      if ((d = i.indexOf(')')) != -1) {
        i = i.substring(0, d);
      }
      a = parseInt('' + i, 10);
      if (isNaN(a)) {
        i = '' + parseFloat(navigator.appVersion);
        a = parseInt(navigator.appVersion, 10);
      }
      if (h && h != null && typeof h !== 'undefined') {
        f.name = h;
      }
      if (a && a != null && typeof a !== 'undefined') {
        f.majorVersion = (a + '').replace(/_/gi, '.');
      }
    }
  } catch (e) {}
  return f;
}
function fnBrowserSystemInfo() {
  var j, l, g, c, d, h, k, e, a, f, i;
  j = {};
  try {
    l = navigator.appVersion;
    g = navigator.userAgent;
    i = [
      { s: 'Windows 10', r: /(Windows 10.0|Windows NT 10.0)/gi },
      { s: 'Windows 8.1', r: /(Windows 8.1|Windows NT 6.3)/gi },
      { s: 'Windows 8', r: /(Windows 8|Windows NT 6.2)/gi },
      { s: 'Windows 7', r: /(Windows 7|Windows NT 6.1)/gi },
      { s: 'Windows Vista', r: /Windows NT 6.0/gi },
      { s: 'Windows Server 2003', r: /Windows NT 5.2/gi },
      { s: 'Windows XP', r: /(Windows NT 5.1|Windows XP)/gi },
      { s: 'Windows 2000', r: /(Windows NT 5.0|Windows 2000)/gi },
      { s: 'Windows ME', r: /(Win 9x 4.90|Windows ME)/gi },
      { s: 'Windows 98', r: /(Windows 98|Win98)/gi },
      { s: 'Windows 95', r: /(Windows 95|Win95|Windows_95)/gi },
      {
        s: 'Windows NT 4.0',
        r: /(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/gi,
      },
      { s: 'Windows CE', r: /Windows CE/gi },
      { s: 'Windows 3.11', r: /Win16/gi },
      { s: 'Android', r: /Android/gi },
      { s: 'BlackBerry', r: /BlackBerry/gi },
      { s: 'Open BSD', r: /OpenBSD/gi },
      { s: 'Sun OS', r: /SunOS/gi },
      { s: 'Linux', r: /(Linux|X11)/gi },
      { s: 'iOS', r: /(iPhone|iPad|iPod)/gi },
      { s: 'Mac OS X', r: /Mac OS X/gi },
      { s: 'Mac OS', r: /(MacPPC|MacIntel|Mac_PowerPC|Macintosh)/gi },
      { s: 'QNX', r: /QNX/gi },
      { s: 'UNIX', r: /UNIX/gi },
      { s: 'BeOS', r: /BeOS/gi },
      { s: 'OS/2', r: /OS\/2/gi },
      { s: 'Kindle', r: /kindle/gi },
      { s: 'PlayStation', r: /PlayStation/gi },
      { s: 'Wii', r: /wii/gi },
      {
        s: 'Bot',
        r: /(bot|robot|crawler|crawling|spider|nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\/Teoma|ia_archiver)/gi,
      },
    ];
    for (a in i) {
      f = i[a];
      if (f.r.test(g)) {
        c = f.s;
        break;
      }
    }
    if (/Windows/gi.test(c)) {
      d = fnGetArrIndexValue(/Windows (.*)/gi.exec(c), 1);
      c = 'Windows';
    }
    switch (c) {
      case 'Mac OS X':
        d = fnGetArrIndexValue(/Mac OS X (10[\.\_\d]+)/gi.exec(g), 1);
        break;
      case 'Android':
        d = fnGetArrIndexValue(/Android ([\.\_\d]+)/gi.exec(g), 1);
        e = fnGetArrIndexValue(/Android.*;(.*)Build/gi.exec(g), 1);
        break;
      case 'BlackBerry':
        d = fnGetArrIndexValue(/Version\/([\.\_\d]{1,5})/gi.exec(g), 1);
        if (fnIsBlank(d)) {
          d = fnGetArrIndexValue(/\/([\.\_\d]{1,5})/gi.exec(g), 1);
        }
        e = fnGetArrIndexValue(/;.*BlackBerry(.*);/gi.exec(g), 1);
        if (fnIsBlank(e)) {
          e = fnGetArrIndexValue(/BlackBerry([\d]+)/gi.exec(g), 1);
        }
        break;
      case 'iOS':
        h = /OS (\d+)_(\d+)_?(\d+)?/gi.exec(g);
        k = fnGetArrIndexValue(h, 1);
        d = '';
        if (!fnIsBlank(k)) {
          d = k;
        }
        k = fnGetArrIndexValue(h, 2);
        if (!fnIsBlank(k)) {
          if (fnIsBlank(d)) {
            d = k;
          } else {
            d = d + '.' + k;
          }
        }
        k = fnGetArrIndexValue(h, 3);
        if (!fnIsBlank(k)) {
          if (fnIsBlank(d)) {
            d = k;
          } else {
            d = d + '.' + k;
          }
        }
        break;
    }
    if (c && c != null && typeof c !== 'undefined') {
      j.operatingSystem = c;
    }
    if (d && d != null && typeof d !== 'undefined') {
      if (d.trim().length > 0) {
        j.osVersion = d.trim().replace(/_/gi, '.');
      }
    }
    if (navigator) {
      if (navigator.platform) {
        j.platform = navigator.platform;
        lcPlatform = navigator.platform.toLowerCase();
        if (lcPlatform.indexOf('x64') !== -1) {
          j.cpuBits = '64 bits';
        } else {
          if (lcPlatform.indexOf('wow64') !== -1) {
            j.cpuBits = '64 bits';
          } else {
            if (lcPlatform.indexOf('win64') !== -1) {
              j.cpuBits = '64 bits';
            } else {
              if (lcPlatform.indexOf('win32') !== -1) {
                j.cpuBits = '32 bits';
              } else {
                if (lcPlatform.indexOf('x64') !== -1) {
                  j.cpuBits = '64 bits';
                } else {
                  if (lcPlatform.indexOf('x32') !== -1) {
                    j.cpuBits = '32 bits';
                  } else {
                    if (lcPlatform.indexOf('x86') !== -1) {
                      j.cpuBits = '32 bits*';
                    } else {
                      if (lcPlatform.indexOf('ppc') !== -1) {
                        j.cpuBits = '64 bits';
                      } else {
                        if (lcPlatform.indexOf('alpha') !== -1) {
                          j.cpuBits = '64 bits';
                        } else {
                          if (lcPlatform.indexOf('68k') !== -1) {
                            j.cpuBits = '64 bits';
                          } else {
                            if (lcPlatform.indexOf('iphone') !== -1) {
                              j.cpuBits = '32 bits';
                            } else {
                              if (lcPlatform.indexOf('android') !== -1) {
                                j.cpuBits = '32 bits';
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (e && e != null && typeof e !== 'undefined') {
      if (e.trim().length > 0) {
        j.model = e.trim();
      }
    }
  } catch (b) {}
  return j;
}
function fnBrowserFormFields() {
  var g, f, a, c, h, l, k, d, b;
  d = { url: '', formInputs: [] };
  b = { name: '', inputs: [] };
  a = 0;
  c = 0;
  h = '';
  l = new Array();
  k = '';
  try {
    h = document.getElementsByTagName('form');
    a = h.length;
    d.url = window.location.href;
    for (g = 0; g < a; g = g + 1) {
      b.name = h[g].name;
      k = h[g].getElementsByTagName('input');
      c = k.length;
      l = new Array();
      for (f = 0; f < c; f = f + 1) {
        if (k[g].type !== 'hidden') {
          l.push(k[f].name);
        }
      }
      d.formInputs.push({ name: b.name, inputs: l });
    }
  } catch (e) {}
  return d;
}
var B64 = {
  _keyStr: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
  encode: function (c) {
    var k, h, f, j, g, e, d, a, b;
    a = '';
    b = 0;
    c = B64._utf8_encode(c);
    while (b < c.length) {
      k = c.charCodeAt(b++);
      h = c.charCodeAt(b++);
      f = c.charCodeAt(b++);
      j = k >> 2;
      g = ((k & 3) << 4) | (h >> 4);
      e = ((h & 15) << 2) | (f >> 6);
      d = f & 63;
      if (isNaN(h)) {
        e = d = 64;
      } else {
        if (isNaN(f)) {
          d = 64;
        }
      }
      a =
        a +
        this._keyStr.charAt(j) +
        this._keyStr.charAt(g) +
        this._keyStr.charAt(e) +
        this._keyStr.charAt(d);
    }
    return a;
  },
  decode: function (c) {
    var k, h, f, j, g, e, d, a, b;
    a = '';
    b = 0;
    c = c.replace(/[^A-Za-z0-9\+\/\=]/g, '');
    while (b < c.length) {
      j = this._keyStr.indexOf(c.charAt(b++));
      g = this._keyStr.indexOf(c.charAt(b++));
      e = this._keyStr.indexOf(c.charAt(b++));
      d = this._keyStr.indexOf(c.charAt(b++));
      k = (j << 2) | (g >> 4);
      h = ((g & 15) << 4) | (e >> 2);
      f = ((e & 3) << 6) | d;
      a = a + String.fromCharCode(k);
      if (e != 64) {
        a = a + String.fromCharCode(h);
      }
      if (d != 64) {
        a = a + String.fromCharCode(f);
      }
    }
    a = B64._utf8_decode(a);
    return a;
  },
  _utf8_encode: function (b) {
    var a, e;
    a = '';
    b = b.replace(/\r\n/g, '\n');
    for (var d = 0; d < b.length; d++) {
      e = b.charCodeAt(d);
      if (e < 128) {
        a += String.fromCharCode(e);
      } else {
        if (e > 127 && e < 2048) {
          a += String.fromCharCode((e >> 6) | 192);
          a += String.fromCharCode((e & 63) | 128);
        } else {
          a += String.fromCharCode((e >> 12) | 224);
          a += String.fromCharCode(((e >> 6) & 63) | 128);
          a += String.fromCharCode((e & 63) | 128);
        }
      }
    }
    return a;
  },
  _utf8_decode: function (a) {
    var e, g, f, d, b;
    b = '';
    e = 0;
    g = 0;
    f = 0;
    d = 0;
    while (e < a.length) {
      g = a.charCodeAt(e);
      if (g < 128) {
        b += String.fromCharCode(g);
        e++;
      } else {
        if (g > 191 && g < 224) {
          d = a.charCodeAt(e + 1);
          b += String.fromCharCode(((g & 31) << 6) | (d & 63));
          e += 2;
        } else {
          d = a.charCodeAt(e + 1);
          c3 = a.charCodeAt(e + 2);
          b += String.fromCharCode(
            ((g & 15) << 12) | ((d & 63) << 6) | (c3 & 63)
          );
          e += 3;
        }
      }
    }
    return b;
  },
};
function fnB64Enc(a) {
  if (typeof btoa === 'undefined') {
    return B64.encode(a);
  } else {
    return window.btoa(a);
  }
}
function fnB64Dec(a) {
  if (typeof atob === 'undefined') {
    return B64.decode(a);
  } else {
    return window.atob(a);
  }
}
function fnStripExtension(b, c) {
  var a = b.indexOf(c);
  if (a >= 0) {
    b = b.slice(0, a);
  }
  return b;
}
function fnIsBlank(a) {
  return !a || /^\s*$/.test(a);
}
function fnGetArrIndexValue(a, c) {
  var b;
  if (a && typeof a !== 'undefined' && a.length > c) {
    return a[c];
  }
  return b;
}
function collectDFP() {
  var a, d, i, f, c;
  a = {};
  d = [];
  i = fnGetTime();
  f = fnGetTime();
  var b = fnBrowserCurrentTimeStamp();
  a.userAgent = fnBrowserUserAgent();
  c = fnGetTime();
  d.push(c - f + '');
  a.timezone = fnBrowserTimeZone();
  f = fnGetTime();
  d.push(f - c + '');
  a.screen = fnBrowserScreen();
  c = fnGetTime();
  d.push(c - f + '');
  a.language = fnBrowserLanguage();
  f = fnGetTime();
  d.push(f - c + '');
  a.fonts = fnBrowserFontsOld();
  c = fnGetTime();
  d.push(c - f + '');
  a.plugins = fnBrowserPluginsOld();
  f = fnGetTime();
  d.push(f - c + '');
  a.cookieEnabled = fnBrowserCookieEnabled();
  c = fnGetTime();
  d.push(c - f + '');
  a.javaEnabled = fnBrowserJavaEnabled();
  f = fnGetTime();
  d.push(f - c + '');
  a.touchEnabled = fnBrowserTouchEnabled();
  c = fnGetTime();
  d.push(c - f + '');
  a.silverLight = fnBrowserSilverLightDetails();
  f = fnGetTime();
  d.push(f - c + '');
  a.flash = fnBrowserFlashDetails();
  c = fnGetTime();
  d.push(c - f + '');
  a.canvas = fnBrowserCanvasHash();
  f = fnGetTime();
  d.push(f - c + '');
  a.trueBrowser = fnBrowserTrueAgent();
  c = fnGetTime();
  d.push(c - f + '');
  var h = JSON.stringify(a);
  a.tcn = fnTCN(b) + '';
  f = fnGetTime();
  d.push(f - c + '');
  a.browser = fnBrowserInfo();
  c = fnGetTime();
  d.push(c - f + '');
  a.system = fnBrowserSystemInfo();
  f = fnGetTime();
  d.push(f - c + '');
  a.connectionInfo = fnBrowserConnectionInfo();
  c = fnGetTime();
  d.push(c - f + '');
  a.latency = fnBrowserLatency();
  f = fnGetTime();
  d.push(f - c + '');
  a.formFields = fnBrowserFormFields();
  c = fnGetTime();
  d.push(c - f + '');
  a.version = fnBrowserDevicePrintVersion();
  f = fnGetTime();
  d.push(f - c + '');
  a.timestamp = b;
  c = fnGetTime();
  d.push(c - f + '');
  a.checksum = fnCSM(h);
  f = fnGetTime();
  d.push(f - c + '');
  d.push(f - i + '');
  a.rt = d;
  var g = fnB64Enc(JSON.stringify(a));
  var e = encodeURIComponent(g)
    .replace(/\~/g, '%7E')
    .replace(/\!/g, '%21')
    .replace(/\*/g, '%2A')
    .replace(/\(/g, '%28')
    .replace(/\)/g, '%29')
    .replace(/\'/g, '%27')
    .replace(/\-/g, '%2D')
    .replace(/\_/g, '%5F')
    .replace(/\./g, '%2E');
  return e;
}
function fnGetTime() {
  return new Date().getTime();
}
function fnCSM(a) {
  var c;
  try {
    c = Sha256.hash(a);
  } catch (b) {}
  return c;
}
function mathEval(b, g) {
  var a,
    c,
    e = 0,
    f = 0;
  try {
    if (b === undefined || b === null) {
      return 1;
    }
    a = b.split(g);
    if (a === undefined || a === null || a.length < 1) {
      return 1;
    }
    try {
      e = parseInt(a[0]);
      if (isNaN(e)) {
        e = 0;
      }
    } catch (d) {
      e = 0;
    }
    for (c = 1; c < a.length; c++) {
      try {
        f = parseInt(a[c]);
        if (isNaN(f)) {
          f = 0;
        }
      } catch (d) {
        f = 0;
      }
      if (g == '+') {
        e = e + f;
      } else {
        if (g == '-') {
          e = e - f;
        }
      }
    }
    return e;
  } catch (d) {
    return 1;
  }
}
function fnTCN(a) {
  var e,
    d,
    b = 1;
  try {
    if (a === undefined || a === null) {
      a = '';
    }
    e = mathEval(
      a
        .replace(
          /[\t\r\n\v\f!"\#$%&'()*+,\-./:;<=>?@\[\\\]^_`{|}~ 0a-zA-Z]|^(?![\s\S])/gi,
          '+9'
        )
        .replace(/\+{2,}/gi, '+')
        .replace(/^\+*|\+*$|[^\d+]/gi, ''),
      '+'
    );
    if (e % 3 == 1) {
      d = e + '+' + (e + '').split('').join('+');
      b = mathEval(d, '+');
    } else {
      if (e % 3 == 2) {
        d = e + '-' + (e + '').split('').join('-');
        b = mathEval(d, '-');
      } else {
        b = e;
      }
    }
  } catch (c) {
    b = -1;
  }
  return b + '';
}
if (typeof Object.assign != 'function') {
  Object.assign = function (d) {
    if (d == null) {
      throw new TypeError('Cannot convert undefined or null to object');
    }
    d = Object(d);
    for (var a = 1; a < arguments.length; a++) {
      var c = arguments[a];
      if (c != null) {
        for (var b in c) {
          if (Object.prototype.hasOwnProperty.call(c, b)) {
            d[b] = c[b];
          }
        }
      }
    }
    return d;
  };
}
var Sha256 = {};
Sha256.hash = function (q, p) {
  var v = { msgFormat: 'string', outFormat: 'hex' };
  var m = Object.assign(v, p);
  switch (m.msgFormat) {
    default:
    case 'string':
      q = Sha256.utf8Encode(q);
      break;
    case 'hex-bytes':
      q = Sha256.hexBytesToString(q);
      break;
  }
  var u = [
    1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993,
    2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987,
    1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774,
    264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986,
    2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711,
    113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291,
    1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411,
    3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344,
    430227734, 506948616, 659060556, 883997877, 958139571, 1322822218,
    1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424,
    2428436474, 2756734187, 3204031479, 3329325298,
  ];
  var w = [
    1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924,
    528734635, 1541459225,
  ];
  q += String.fromCharCode(128);
  var A = q.length / 4 + 2;
  var r = Math.ceil(A / 16);
  var s = new Array(r);
  for (var C = 0; C < r; C++) {
    s[C] = new Array(16);
    for (var B = 0; B < 16; B++) {
      s[C][B] =
        (q.charCodeAt(C * 64 + B * 4) << 24) |
        (q.charCodeAt(C * 64 + B * 4 + 1) << 16) |
        (q.charCodeAt(C * 64 + B * 4 + 2) << 8) |
        q.charCodeAt(C * 64 + B * 4 + 3);
    }
  }
  var F = ((q.length - 1) * 8) / Math.pow(2, 32);
  var k = ((q.length - 1) * 8) >>> 0;
  s[r - 1][14] = Math.floor(F);
  s[r - 1][15] = k;
  for (var C = 0; C < r; C++) {
    var n = new Array(64);
    for (var y = 0; y < 16; y++) {
      n[y] = s[C][y];
    }
    for (var y = 16; y < 64; y++) {
      n[y] =
        (Sha256.g1(n[y - 2]) + n[y - 7] + Sha256.g0(n[y - 15]) + n[y - 16]) >>>
        0;
    }
    var P = w[0],
      O = w[1],
      L = w[2],
      J = w[3],
      I = w[4],
      G = w[5],
      E = w[6],
      D = w[7];
    for (var y = 0; y < 64; y++) {
      var z = D + Sha256.e1(I) + Sha256.Ch(I, G, E) + u[y] + n[y];
      var x = Sha256.e0(P) + Sha256.Maj(P, O, L);
      D = E;
      E = G;
      G = I;
      I = (J + z) >>> 0;
      J = L;
      L = O;
      O = P;
      P = (z + x) >>> 0;
    }
    w[0] = (w[0] + P) >>> 0;
    w[1] = (w[1] + O) >>> 0;
    w[2] = (w[2] + L) >>> 0;
    w[3] = (w[3] + J) >>> 0;
    w[4] = (w[4] + I) >>> 0;
    w[5] = (w[5] + G) >>> 0;
    w[6] = (w[6] + E) >>> 0;
    w[7] = (w[7] + D) >>> 0;
  }
  for (var D = 0; D < w.length; D++) {
    w[D] = ('00000000' + w[D].toString(16)).slice(-8);
  }
  var o = m.outFormat == 'hex-w' ? ' ' : '';
  return w.join(o);
};
Sha256.ROTR = function (b, a) {
  return (a >>> b) | (a << (32 - b));
};
Sha256.e0 = function (a) {
  return Sha256.ROTR(2, a) ^ Sha256.ROTR(13, a) ^ Sha256.ROTR(22, a);
};
Sha256.e1 = function (a) {
  return Sha256.ROTR(6, a) ^ Sha256.ROTR(11, a) ^ Sha256.ROTR(25, a);
};
Sha256.g0 = function (a) {
  return Sha256.ROTR(7, a) ^ Sha256.ROTR(18, a) ^ (a >>> 3);
};
Sha256.g1 = function (a) {
  return Sha256.ROTR(17, a) ^ Sha256.ROTR(19, a) ^ (a >>> 10);
};
Sha256.Ch = function (a, c, b) {
  return (a & c) ^ (~a & b);
};
Sha256.Maj = function (a, c, b) {
  return (a & c) ^ (a & b) ^ (c & b);
};
Sha256.utf8Encode = function (a) {
  return unescape(encodeURIComponent(a));
};
Sha256.hexBytesToString = function (b) {
  b = b.replace(' ', '');
  var c = '';
  for (var a = 0; a < b.length; a += 2) {
    c += String.fromCharCode(parseInt(b.slice(a, a + 2), 16));
  }
  return c;
};
if (typeof module != 'undefined' && module.exports) {
  module.exports = Sha256;
}
