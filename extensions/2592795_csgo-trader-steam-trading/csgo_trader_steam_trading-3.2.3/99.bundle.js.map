{"version":3,"file":"99.bundle.js","mappings":"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","sources":["webpack://csgotrader.app-extension/./src/components/FlipSwitch/FlipSwitch.js","webpack://csgotrader.app-extension/./node_modules/dom-helpers/esm/scrollbarSize.js","webpack://csgotrader.app-extension/./node_modules/@restart/hooks/esm/useWillUnmount.js","webpack://csgotrader.app-extension/./node_modules/@restart/hooks/esm/useUpdatedRef.js","webpack://csgotrader.app-extension/./node_modules/react-bootstrap/esm/ModalBody.js","webpack://csgotrader.app-extension/./node_modules/react-bootstrap/esm/ModalDialog.js","webpack://csgotrader.app-extension/./node_modules/react-bootstrap/esm/ModalFooter.js","webpack://csgotrader.app-extension/./node_modules/react-bootstrap/esm/ModalHeader.js","webpack://csgotrader.app-extension/./node_modules/react-bootstrap/esm/ModalTitle.js","webpack://csgotrader.app-extension/./node_modules/react-bootstrap/esm/Modal.js","webpack://csgotrader.app-extension/./node_modules/@restart/hooks/esm/useCallbackRef.js","webpack://csgotrader.app-extension/./node_modules/react-bootstrap/esm/Button.js","webpack://csgotrader.app-extension/./src/components/Modal/Modal.js","webpack://csgotrader.app-extension/./src/utils/notifications.js"],"sourcesContent":["import React from 'react';\n\nconst FlipSwitch = ({\n  id, checked, onChange,\n}) => {\n  return (\n    <div className=\"flipswitch\">\n      <label className=\"switch\">\n        <input\n          type=\"checkbox\"\n          id={id}\n          checked={checked}\n          onChange={onChange}\n        />\n        <span className=\"slider round\" />\n      </label>\n    </div>\n  );\n};\n\nexport default FlipSwitch;\n","import canUseDOM from './canUseDOM';\nvar size;\nexport default function scrollbarSize(recalc) {\n  if (!size && size !== 0 || recalc) {\n    if (canUseDOM) {\n      var scrollDiv = document.createElement('div');\n      scrollDiv.style.position = 'absolute';\n      scrollDiv.style.top = '-9999px';\n      scrollDiv.style.width = '50px';\n      scrollDiv.style.height = '50px';\n      scrollDiv.style.overflow = 'scroll';\n      document.body.appendChild(scrollDiv);\n      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n      document.body.removeChild(scrollDiv);\n    }\n  }\n\n  return size;\n}","import useUpdatedRef from './useUpdatedRef';\nimport { useEffect } from 'react';\n/**\n * Attach a callback that fires when a component unmounts\n *\n * @param fn Handler to run when the component unmounts\n * @category effects\n */\n\nexport default function useWillUnmount(fn) {\n  var onUnmount = useUpdatedRef(fn);\n  useEffect(function () {\n    return function () {\n      return onUnmount.current();\n    };\n  }, []);\n}","import { useRef } from 'react';\n/**\n * Returns a ref that is immediately updated with the new value\n *\n * @param value The Ref value\n * @category refs\n */\n\nexport default function useUpdatedRef(value) {\n  var valueRef = useRef(value);\n  valueRef.current = value;\n  return valueRef;\n}","import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('modal-body');","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ModalDialog = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  contentClassName,\n  centered,\n  size,\n  fullscreen,\n  children,\n  scrollable,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'modal');\n  const dialogClass = `${bsPrefix}-dialog`;\n  const fullScreenClass = typeof fullscreen === 'string' ? `${bsPrefix}-fullscreen-${fullscreen}` : `${bsPrefix}-fullscreen`;\n  return /*#__PURE__*/_jsx(\"div\", { ...props,\n    ref: ref,\n    className: classNames(dialogClass, className, size && `${bsPrefix}-${size}`, centered && `${dialogClass}-centered`, scrollable && `${dialogClass}-scrollable`, fullscreen && fullScreenClass),\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: classNames(`${bsPrefix}-content`, contentClassName),\n      children: children\n    })\n  });\n});\nModalDialog.displayName = 'ModalDialog';\nexport default ModalDialog;","import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('modal-footer');","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AbstractModalHeader from './AbstractModalHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  closeLabel: 'Close',\n  closeButton: false\n};\nconst ModalHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'modal-header');\n  return /*#__PURE__*/_jsx(AbstractModalHeader, {\n    ref: ref,\n    ...props,\n    className: classNames(className, bsPrefix)\n  });\n});\nModalHeader.displayName = 'ModalHeader';\nModalHeader.defaultProps = defaultProps;\nexport default ModalHeader;","import createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nconst DivStyledAsH4 = divWithClassName('h4');\nexport default createWithBsPrefix('modal-title', {\n  Component: DivStyledAsH4\n});","import classNames from 'classnames';\nimport addEventListener from 'dom-helpers/addEventListener';\nimport canUseDOM from 'dom-helpers/canUseDOM';\nimport ownerDocument from 'dom-helpers/ownerDocument';\nimport removeEventListener from 'dom-helpers/removeEventListener';\nimport getScrollbarSize from 'dom-helpers/scrollbarSize';\nimport useCallbackRef from '@restart/hooks/useCallbackRef';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport useWillUnmount from '@restart/hooks/useWillUnmount';\nimport transitionEnd from 'dom-helpers/transitionEnd';\nimport * as React from 'react';\nimport { useCallback, useMemo, useRef, useState } from 'react';\nimport BaseModal from '@restart/ui/Modal';\nimport { getSharedManager } from './BootstrapModalManager';\nimport Fade from './Fade';\nimport ModalBody from './ModalBody';\nimport ModalContext from './ModalContext';\nimport ModalDialog from './ModalDialog';\nimport ModalFooter from './ModalFooter';\nimport ModalHeader from './ModalHeader';\nimport ModalTitle from './ModalTitle';\nimport { useBootstrapPrefix, useIsRTL } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  show: false,\n  backdrop: true,\n  keyboard: true,\n  autoFocus: true,\n  enforceFocus: true,\n  restoreFocus: true,\n  animation: true,\n  dialogAs: ModalDialog\n};\n/* eslint-disable no-use-before-define, react/no-multi-comp */\n\nfunction DialogTransition(props) {\n  return /*#__PURE__*/_jsx(Fade, { ...props,\n    timeout: null\n  });\n}\n\nfunction BackdropTransition(props) {\n  return /*#__PURE__*/_jsx(Fade, { ...props,\n    timeout: null\n  });\n}\n/* eslint-enable no-use-before-define */\n\n\nconst Modal = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  style,\n  dialogClassName,\n  contentClassName,\n  children,\n  dialogAs: Dialog,\n  'aria-labelledby': ariaLabelledby,\n\n  /* BaseModal props */\n  show,\n  animation,\n  backdrop,\n  keyboard,\n  onEscapeKeyDown,\n  onShow,\n  onHide,\n  container,\n  autoFocus,\n  enforceFocus,\n  restoreFocus,\n  restoreFocusOptions,\n  onEntered,\n  onExit,\n  onExiting,\n  onEnter,\n  onEntering,\n  onExited,\n  backdropClassName,\n  manager: propsManager,\n  ...props\n}, ref) => {\n  const [modalStyle, setStyle] = useState({});\n  const [animateStaticModal, setAnimateStaticModal] = useState(false);\n  const waitingForMouseUpRef = useRef(false);\n  const ignoreBackdropClickRef = useRef(false);\n  const removeStaticModalAnimationRef = useRef(null);\n  const [modal, setModalRef] = useCallbackRef();\n  const mergedRef = useMergedRefs(ref, setModalRef);\n  const handleHide = useEventCallback(onHide);\n  const isRTL = useIsRTL();\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'modal');\n  const modalContext = useMemo(() => ({\n    onHide: handleHide\n  }), [handleHide]);\n\n  function getModalManager() {\n    if (propsManager) return propsManager;\n    return getSharedManager({\n      isRTL\n    });\n  }\n\n  function updateDialogStyle(node) {\n    if (!canUseDOM) return;\n    const containerIsOverflowing = getModalManager().getScrollbarWidth() > 0;\n    const modalIsOverflowing = node.scrollHeight > ownerDocument(node).documentElement.clientHeight;\n    setStyle({\n      paddingRight: containerIsOverflowing && !modalIsOverflowing ? getScrollbarSize() : undefined,\n      paddingLeft: !containerIsOverflowing && modalIsOverflowing ? getScrollbarSize() : undefined\n    });\n  }\n\n  const handleWindowResize = useEventCallback(() => {\n    if (modal) {\n      updateDialogStyle(modal.dialog);\n    }\n  });\n  useWillUnmount(() => {\n    removeEventListener(window, 'resize', handleWindowResize);\n    removeStaticModalAnimationRef.current == null ? void 0 : removeStaticModalAnimationRef.current();\n  }); // We prevent the modal from closing during a drag by detecting where the\n  // the click originates from. If it starts in the modal and then ends outside\n  // don't close.\n\n  const handleDialogMouseDown = () => {\n    waitingForMouseUpRef.current = true;\n  };\n\n  const handleMouseUp = e => {\n    if (waitingForMouseUpRef.current && modal && e.target === modal.dialog) {\n      ignoreBackdropClickRef.current = true;\n    }\n\n    waitingForMouseUpRef.current = false;\n  };\n\n  const handleStaticModalAnimation = () => {\n    setAnimateStaticModal(true);\n    removeStaticModalAnimationRef.current = transitionEnd(modal.dialog, () => {\n      setAnimateStaticModal(false);\n    });\n  };\n\n  const handleStaticBackdropClick = e => {\n    if (e.target !== e.currentTarget) {\n      return;\n    }\n\n    handleStaticModalAnimation();\n  };\n\n  const handleClick = e => {\n    if (backdrop === 'static') {\n      handleStaticBackdropClick(e);\n      return;\n    }\n\n    if (ignoreBackdropClickRef.current || e.target !== e.currentTarget) {\n      ignoreBackdropClickRef.current = false;\n      return;\n    }\n\n    onHide == null ? void 0 : onHide();\n  };\n\n  const handleEscapeKeyDown = e => {\n    if (!keyboard && backdrop === 'static') {\n      // Call preventDefault to stop modal from closing in restart ui,\n      // then play our animation.\n      e.preventDefault();\n      handleStaticModalAnimation();\n    } else if (keyboard && onEscapeKeyDown) {\n      onEscapeKeyDown(e);\n    }\n  };\n\n  const handleEnter = (node, isAppearing) => {\n    if (node) {\n      node.style.display = 'block';\n      updateDialogStyle(node);\n    }\n\n    onEnter == null ? void 0 : onEnter(node, isAppearing);\n  };\n\n  const handleExit = node => {\n    removeStaticModalAnimationRef.current == null ? void 0 : removeStaticModalAnimationRef.current();\n    onExit == null ? void 0 : onExit(node);\n  };\n\n  const handleEntering = (node, isAppearing) => {\n    onEntering == null ? void 0 : onEntering(node, isAppearing); // FIXME: This should work even when animation is disabled.\n\n    addEventListener(window, 'resize', handleWindowResize);\n  };\n\n  const handleExited = node => {\n    if (node) node.style.display = ''; // RHL removes it sometimes\n\n    onExited == null ? void 0 : onExited(node); // FIXME: This should work even when animation is disabled.\n\n    removeEventListener(window, 'resize', handleWindowResize);\n  };\n\n  const renderBackdrop = useCallback(backdropProps => /*#__PURE__*/_jsx(\"div\", { ...backdropProps,\n    className: classNames(`${bsPrefix}-backdrop`, backdropClassName, !animation && 'show')\n  }), [animation, backdropClassName, bsPrefix]);\n  const baseModalStyle = { ...style,\n    ...modalStyle\n  }; // Sets `display` always block when `animation` is false\n\n  if (!animation) {\n    baseModalStyle.display = 'block';\n  }\n\n  const renderDialog = dialogProps => /*#__PURE__*/_jsx(\"div\", {\n    role: \"dialog\",\n    ...dialogProps,\n    style: baseModalStyle,\n    className: classNames(className, bsPrefix, animateStaticModal && `${bsPrefix}-static`),\n    onClick: backdrop ? handleClick : undefined,\n    onMouseUp: handleMouseUp,\n    \"aria-labelledby\": ariaLabelledby,\n    children: /*#__PURE__*/_jsx(Dialog, { ...props,\n      onMouseDown: handleDialogMouseDown,\n      className: dialogClassName,\n      contentClassName: contentClassName,\n      children: children\n    })\n  });\n\n  return /*#__PURE__*/_jsx(ModalContext.Provider, {\n    value: modalContext,\n    children: /*#__PURE__*/_jsx(BaseModal, {\n      show: show,\n      ref: mergedRef,\n      backdrop: backdrop,\n      container: container,\n      keyboard: true // Always set true - see handleEscapeKeyDown\n      ,\n      autoFocus: autoFocus,\n      enforceFocus: enforceFocus,\n      restoreFocus: restoreFocus,\n      restoreFocusOptions: restoreFocusOptions,\n      onEscapeKeyDown: handleEscapeKeyDown,\n      onShow: onShow,\n      onHide: onHide,\n      onEnter: handleEnter,\n      onEntering: handleEntering,\n      onEntered: onEntered,\n      onExit: handleExit,\n      onExiting: onExiting,\n      onExited: handleExited,\n      manager: getModalManager(),\n      transition: animation ? DialogTransition : undefined,\n      backdropTransition: animation ? BackdropTransition : undefined,\n      renderBackdrop: renderBackdrop,\n      renderDialog: renderDialog\n    })\n  });\n});\nModal.displayName = 'Modal';\nModal.defaultProps = defaultProps;\nexport default Object.assign(Modal, {\n  Body: ModalBody,\n  Header: ModalHeader,\n  Title: ModalTitle,\n  Footer: ModalFooter,\n  Dialog: ModalDialog,\n  TRANSITION_DURATION: 300,\n  BACKDROP_TRANSITION_DURATION: 150\n});","import { useState } from 'react';\n/**\n * A convenience hook around `useState` designed to be paired with\n * the component [callback ref](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs) api.\n * Callback refs are useful over `useRef()` when you need to respond to the ref being set\n * instead of lazily accessing it in an effect.\n *\n * ```ts\n * const [element, attachRef] = useCallbackRef<HTMLDivElement>()\n *\n * useEffect(() => {\n *   if (!element) return\n *\n *   const calendar = new FullCalendar.Calendar(element)\n *\n *   return () => {\n *     calendar.destroy()\n *   }\n * }, [element])\n *\n * return <div ref={attachRef} />\n * ```\n *\n * @category refs\n */\n\nexport default function useCallbackRef() {\n  return useState(null);\n}","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  variant: 'primary',\n  active: false,\n  disabled: false\n};\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant,\n  size,\n  active,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    ...buttonProps,\n    ref: ref,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && props.disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nButton.defaultProps = defaultProps;\nexport default Button;","import React, { useState } from 'react';\nimport { Button, Modal as BSModal } from 'react-bootstrap';\nimport CustomA11yButton from 'components/CustomA11yButton/CustomA11yButton';\n\nconst Modal = ({\n  modalTitle, opener, validator, children,\n}) => {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <CustomA11yButton action={handleShow} className=\"openModal\">\n        {opener}\n      </CustomA11yButton>\n      <BSModal show={show} onHide={handleClose}>\n        <BSModal.Header closeButton>\n          <BSModal.Title>{modalTitle}</BSModal.Title>\n        </BSModal.Header>\n        {children\n          && (\n          <BSModal.Body>\n            {children}\n          </BSModal.Body>\n          )}\n        <BSModal.Footer>\n          <Button className=\"button button__cancel\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button className=\"button button__save\" onClick={() => { validator(handleClose); }}>\n            Save Changes\n          </Button>\n        </BSModal.Footer>\n      </BSModal>\n    </>\n  );\n};\n\nexport default Modal;\n","import { notificationSounds } from 'utils/static/notifications';\nimport { playAudio } from 'utils/simpleUtils';\n\nconst determineNotificationDate = (\n  tradableDate,\n  minutesOrHours,\n  numberOfMinutesOrHours,\n  beforeOrAfter,\n) => {\n  let baseTimeUnit = 0;\n  if (minutesOrHours === 'minutes') baseTimeUnit = 60;\n  else if (minutesOrHours === 'hours') baseTimeUnit = 3600;\n  if (beforeOrAfter === 'before') baseTimeUnit *= -1;\n  const timeDifference = numberOfMinutesOrHours * baseTimeUnit;\n\n  return new Date(\n    (parseInt((new Date(tradableDate).getTime() / 1000).toFixed(0)) + timeDifference) * 1000,\n  );\n};\n\nconst reverseWhenNotifDetails = (tradability, notifTime) => {\n  const difference = (parseInt(new Date(notifTime).getTime() / 1000).toFixed(0))\n    - (parseInt(new Date(tradability).getTime() / 1000).toFixed(0)\n    );\n  const differenceAbs = Math.abs(difference);\n\n  return {\n    numberOfMinutesOrHours: differenceAbs / 60 >= 60\n      ? (differenceAbs / 60) / 60\n      : differenceAbs / 60,\n    minutesOrHours: differenceAbs / 60 >= 60 ? 'hours' : 'minutes',\n    beforeOrAfter: difference >= 0 ? 'after' : 'before',\n  };\n};\n\nconst playNotificationSound = () => {\n  chrome.storage.local.get(\n    ['notificationSoundOn', 'notificationSoundToPlay', 'notificationVolume', 'customNotificationURL'],\n    ({\n      notificationSoundOn, notificationSoundToPlay, notificationVolume, customNotificationURL,\n    }) => {\n      if (notificationSoundOn) {\n        const volume = notificationVolume / 100;\n        if (notificationSoundToPlay === notificationSounds.custom.key) {\n          playAudio(customNotificationURL, 'remote', volume);\n        } else {\n          playAudio(`sounds/notification/${notificationSoundToPlay}.mp3`, 'local', volume);\n        }\n      }\n    },\n  );\n};\n\nconst notifyOnDiscord = (embed) => {\n  chrome.storage.local.get(['allowDiscordNotification', 'discordNotificationHook'],\n    ({ allowDiscordNotification, discordNotificationHook }) => {\n      if (allowDiscordNotification && discordNotificationHook !== '') {\n        const request = new Request(discordNotificationHook, {\n          method: 'POST',\n          body: JSON.stringify({\n            embeds: [embed],\n            username: 'CS2TRADER.APP',\n            avatar_url: 'https://csgotrader.app/cstlogo48.png',\n          }),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n\n        fetch(request).then((response) => {\n          if (!response.ok) console.log(`Error code: ${response.status} Status: ${response.statusText}`);\n        }).catch((err) => { console.log(err); });\n      }\n    });\n};\n\nconst loggedOutNotification = (loggedOut) => {\n  if (loggedOut) {\n    chrome.storage.local.get(\n      [\n        'logOutDetected', 'lastLogoutNotified', 'notifyAboutBeingLoggedOut',\n        'notifyAboutBeingLoggedOutOnDiscord', 'nickNameOfUser',\n      ],\n      ({\n        logOutDetected, lastLogoutNotified, notifyAboutBeingLoggedOut,\n        notifyAboutBeingLoggedOutOnDiscord, nickNameOfUser,\n      }) => {\n        chrome.storage.local.set({ logOutDetected: true }, () => { });\n\n        if (!logOutDetected) {\n          // first attempt to get a new session\n        // if it fails, then we end up here in the next interval and notify the user\n          console.log('Session expired? Attempting to refresh a Steam page or open the Steam trade offers page to get a new session.');\n\n          chrome.permissions.contains({ permissions: ['tabs'] }, (permission) => {\n            if (permission) {\n              chrome.tabs.query({ url: 'https://steamcommunity.com/*' }, (tabs) => {\n                if (tabs.length !== 0) chrome.tabs.reload(tabs[0].id, {}, () => {});\n                else {\n                  chrome.tabs.create({\n                    url: 'https://steamcommunity.com/my/tradeoffers?csgotrader_close=true',\n                  });\n                }\n              });\n            }\n          });\n        }\n\n        if (logOutDetected && (Date.now() - lastLogoutNotified) > 60 * 60 * 1000) {\n          // should only send notification once per hour\n          chrome.storage.local.set({ lastLogoutNotified: Date.now() }, () => { });\n          const title = 'You are not signed in on Steam!';\n          const message = `Hi, ${nickNameOfUser}! You set to be notified if the extension detects that you are not logged in.`;\n\n          if (notifyAboutBeingLoggedOut) {\n            chrome.notifications.create('loggedOutOfSteam', {\n              type: 'basic',\n              iconUrl: '/images/cstlogo128.png',\n              title,\n              message,\n            }, () => {\n              playNotificationSound();\n            });\n          }\n\n          if (notifyAboutBeingLoggedOutOnDiscord) {\n            const embed = {\n              footer: {\n                text: 'CS2 Trader',\n                icon_url: 'https://csgotrader.app/cstlogo48.png',\n              },\n              title,\n              description: message,\n              // #ff8c00 (taken from csgotrader.app text color)\n              color: 16747520,\n              fields: [],\n              timestamp: new Date(Date.now()).toISOString(),\n              type: 'rich',\n            };\n\n            notifyOnDiscord(embed);\n          }\n        }\n      },\n    );\n  } else chrome.storage.local.set({ logOutDetected: false }, () => { });\n};\n\nexport {\n  reverseWhenNotifDetails, determineNotificationDate, notifyOnDiscord,\n  playNotificationSound, loggedOutNotification,\n};\n"],"names":["FlipSwitch","id","checked","onChange","React","className","type","size","scrollbarSize","recalc","canUseDOM","scrollDiv","document","createElement","style","position","top","width","height","overflow","body","appendChild","offsetWidth","clientWidth","removeChild","useWillUnmount","fn","value","valueRef","onUnmount","useRef","current","useEffect","createWithBsPrefix","ModalDialog","bsPrefix","contentClassName","centered","fullscreen","children","scrollable","props","ref","dialogClass","fullScreenClass","displayName","ModalHeader","AbstractModalHeader","defaultProps","closeLabel","closeButton","DivStyledAsH4","Component","show","backdrop","keyboard","autoFocus","enforceFocus","restoreFocus","animation","dialogAs","DialogTransition","Fade","timeout","BackdropTransition","dialogClassName","Dialog","ariaLabelledby","onEscapeKeyDown","onShow","onHide","container","restoreFocusOptions","onEntered","onExit","onExiting","onEnter","onEntering","onExited","backdropClassName","manager","propsManager","modalStyle","setStyle","useState","animateStaticModal","setAnimateStaticModal","waitingForMouseUpRef","ignoreBackdropClickRef","removeStaticModalAnimationRef","modal","setModalRef","mergedRef","useMergedRefs","handleHide","useEventCallback","isRTL","modalContext","useMemo","getModalManager","updateDialogStyle","node","containerIsOverflowing","getScrollbarWidth","modalIsOverflowing","scrollHeight","ownerDocument","documentElement","clientHeight","paddingRight","undefined","paddingLeft","handleWindowResize","dialog","removeEventListener","window","handleDialogMouseDown","handleMouseUp","e","target","handleStaticModalAnimation","transitionEnd","handleClick","currentTarget","handleStaticBackdropClick","renderBackdrop","useCallback","backdropProps","baseModalStyle","display","ModalContext","Provider","preventDefault","isAppearing","addEventListener","transition","backdropTransition","renderDialog","dialogProps","role","onClick","onMouseUp","onMouseDown","Object","assign","Body","ModalBody","Header","Title","ModalTitle","Footer","ModalFooter","TRANSITION_DURATION","BACKDROP_TRANSITION_DURATION","as","variant","active","prefix","buttonProps","tagName","href","disabled","Modal","modalTitle","opener","validator","setShow","handleClose","CustomA11yButton","action","handleShow","BSModal","Button","determineNotificationDate","tradableDate","minutesOrHours","numberOfMinutesOrHours","beforeOrAfter","baseTimeUnit","timeDifference","Date","parseInt","getTime","toFixed","reverseWhenNotifDetails","tradability","notifTime","difference","differenceAbs","Math","abs","playNotificationSound","chrome","storage","local","get","notificationSoundOn","notificationSoundToPlay","notificationVolume","customNotificationURL","volume","notificationSounds","custom","key","playAudio","loggedOutNotification","loggedOut","logOutDetected","lastLogoutNotified","notifyAboutBeingLoggedOut","notifyAboutBeingLoggedOutOnDiscord","nickNameOfUser","set","console","log","permissions","contains","permission","tabs","query","url","length","reload","create","now","title","message","notifications","iconUrl","embed","allowDiscordNotification","discordNotificationHook","request","Request","method","JSON","stringify","embeds","username","avatar_url","headers","fetch","then","response","ok","status","statusText","catch","err","notifyOnDiscord","footer","text","icon_url","description","color","fields","timestamp","toISOString"],"sourceRoot":""}