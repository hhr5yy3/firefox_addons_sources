var u=Object.defineProperty;var h=(a,t,e)=>t in a?u(a,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):a[t]=e;var s=(a,t,e)=>(h(a,typeof t!="symbol"?t+"":t,e),e);import{R as m}from"./chunk-4da8f9f7.js";const i="BlockCounterCriticalPoint",c=1e3;class f{constructor(t){s(this,"storage");s(this,"value");s(this,"timeout");this.storage=t,this.value=0,this.timeout=null}async getCriticalPoint(t){var r;let e=null,o=50;do{const l=(await this.storage.get({[i]:null}))[i];!l||l.refId===t||l.time<=new Date().valueOf()?(await this.storage.set({[i]:{refId:t,time:new Date().valueOf()+c*1.5}}),await new Promise(n=>setTimeout(n,10)),e=(r=(await this.storage.get({[i]:null}))[i])==null?void 0:r.refId):(await new Promise(n=>setTimeout(n,o)),o=Math.min(o**2,c))}while(e!==t)}async releaseCriticalPoint(t){const e=(await this.storage.get({[i]:null}))[i];(e==null?void 0:e.refId)===t&&e.time>new Date().valueOf()&&await this.storage.set({[i]:null})}async sync(){const t=m();await this.getCriticalPoint(t);const e=await this.storage.get({BlockCounter:0});e.BlockCounter+=this.value,this.value=0,await this.storage.set(e),this.releaseCriticalPoint(t)}async increment(t=1){this.value+=t,this.timeout&&clearTimeout(this.timeout),this.timeout=setTimeout(()=>this.sync(),100)}}export{f as B};
