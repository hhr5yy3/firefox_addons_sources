{"version":3,"file":"423.bundle.js","mappings":"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","sources":["webpack://csgotrader.app-extension/./src/components/CustomA11yButton/CustomA11yButton.js","webpack://csgotrader.app-extension/./src/components/Bookmarks/Bookmark/Action.js","webpack://csgotrader.app-extension/./src/components/Bookmarks/Bookmark/Countdown.js","webpack://csgotrader.app-extension/./src/components/Bookmarks/Bookmark/Tradability.js","webpack://csgotrader.app-extension/./src/components/Bookmarks/Bookmark/STS.js","webpack://csgotrader.app-extension/./src/components/Bookmarks/Bookmark/Bookmark.js","webpack://csgotrader.app-extension/./src/pages/Bookmarks/Bookmarks.js","webpack://csgotrader.app-extension/./src/utils/simpleUtils.js","webpack://csgotrader.app-extension/./src/utils/static/notifications.js","webpack://csgotrader.app-extension/./src/utils/steamID.js"],"sourcesContent":["import React from 'react';\n\nconst CustomA11yButton = ({\n  action, children, className, title, id,\n}) => {\n  return (\n    <span\n      role=\"button\"\n      tabIndex=\"0\"\n      onClick={action}\n      onKeyDown={action}\n      className={`${className} customButton`}\n      title={title}\n      id={id}\n    >\n      {children}\n    </span>\n  );\n};\n\nexport default CustomA11yButton;\n","import React from 'react';\n\nconst Action = ({ children, className, title }) => (\n  <span className={`action ${className}`} title={title}>\n    {children}\n  </span>\n);\n\nexport default Action;\n","import React, { useEffect, useState } from 'react';\n\nconst Countdown = ({\n  tradability,\n}) => {\n  const dateToCountDownTo = tradability;\n  const [state, setState] = useState({\n    text: '',\n    class: 'countdown',\n  });\n\n  useEffect(() => {\n    const countDownInterval = setInterval(() => {\n      // eslint-disable-next-line no-use-before-define\n      setCurrentRemaining();\n    }, 1000);\n\n    const setCurrentRemaining = () => {\n      const now = new Date().getTime();\n      const distance = new Date(dateToCountDownTo) - now;\n      const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n      const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n      const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n      if (distance > 0) setState({ ...state, text: `${days}d ${hours}h ${minutes}m ${seconds}s` });\n      else {\n        setState({ text: 'Tradable', class: null });\n        clearInterval(countDownInterval);\n      }\n    };\n\n    setCurrentRemaining();\n\n    return () => { // cleanup function, runs when the components get removed\n      clearInterval(countDownInterval);\n    };\n  }, []);\n\n  return (\n    <div className={state.class}>\n      {state.text}\n    </div>\n  );\n};\n\nexport default Countdown;\n","import React from 'react';\nimport Countdown from 'components/Bookmarks/Bookmark/Countdown';\n\nconst Tradability = (props) => {\n  const { tradability } = props;\n\n  if (tradability === 'Tradable') {\n    return (<span>{tradability}</span>);\n  } if (tradability === 'Not Tradable') {\n    return (\n      <div className=\"countdown\">\n        Untradable\n      </div>\n    );\n  } if (tradability === 'Tradelocked') {\n    return (\n      <div className=\"countdown\">\n        Tradelocked\n      </div>\n    );\n  }\n\n  return (\n    <Countdown tradability={tradability} />\n  );\n};\n\nexport default Tradability;\n","import React from 'react';\n\nconst STS = ({ st, s }) => {\n  if (st) {\n    return (\n      <span className=\"statTrak\">\n        StatTrak™\n      </span>\n    );\n  }\n  if (s) {\n    return (\n      <span className=\"souvenir\">\n        Souvenir\n      </span>\n    );\n  }\n  return null;\n};\n\nexport default STS;\n","import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faBell, faChartLine, faComment, faEye, faLink, faTrash, faUser, faExchangeAlt,\n} from '@fortawesome/free-solid-svg-icons';\n\nimport NewTabLink from 'components/NewTabLink/NewTabLink';\nimport Modal from 'components/Modal/Modal';\nimport FlipSwitch from 'components/FlipSwitch/FlipSwitch';\nimport { determineNotificationDate, reverseWhenNotifDetails } from 'utils/notifications';\nimport { getOfferStyleSteamID } from 'utils/steamID';\nimport Action from 'components/Bookmarks/Bookmark/Action';\nimport Tradability from 'components/Bookmarks/Bookmark/Tradability';\nimport STS from 'components/Bookmarks/Bookmark/STS';\n\nimport { getItemInventoryLink } from 'utils/simpleUtils';\n\nconst Bookmark = ({\n  bookmarkData, editBookmark, removeBookmark,\n}) => {\n  const {\n    added, itemInfo, notifTime, notifType, notify, owner,\n  } = bookmarkData;\n  const imageSRC = `https://steamcommunity.com/economy/image/${itemInfo.iconURL}/256x256`;\n  const exterior = itemInfo.exterior ? itemInfo.exterior.localized_name : '';\n  const displayName = itemInfo.name.split('| ')[1] ? itemInfo.name.split('| ')[1] : itemInfo.name;\n\n  const [comment, setComment] = useState(bookmarkData.comment);\n  const [doNotify, setDoNotify] = useState(notify);\n\n  const whenDetails = reverseWhenNotifDetails(itemInfo.tradability, notifTime);\n\n  const notifTypeSelect = React.createRef();\n  const numberOfMinutesOrHours = React.createRef();\n  const minutesOrHours = React.createRef();\n  const beforeOrAfter = React.createRef();\n\n  const commentChangeHandler = (event) => {\n    setComment(event.target.value);\n  };\n\n  const onNotifyChange = () => {\n    setDoNotify(!doNotify);\n  };\n\n  const saveComment = (closeModal) => {\n    const newBookmarkData = { ...bookmarkData, comment };\n    editBookmark(newBookmarkData);\n    closeModal();\n  };\n\n  const saveNotification = (closeModal) => {\n    const newNotifTime = determineNotificationDate(itemInfo.tradability,\n      minutesOrHours.current.value, numberOfMinutesOrHours.current.value,\n      beforeOrAfter.current.value).toString();\n\n    const newBookmarkData = {\n      ...bookmarkData,\n      notify: doNotify,\n      notifType: notifTypeSelect.current.value,\n      notifTime: newNotifTime,\n    };\n\n    editBookmark(newBookmarkData);\n\n    if (doNotify) {\n      chrome.runtime.sendMessage({\n        setAlarm: {\n          name: `${itemInfo.appid}_${itemInfo.contextid}_${itemInfo.assetid}_${added}`,\n          when: newNotifTime,\n        },\n      }, () => {\n        closeModal();\n      });\n    } else {\n      chrome.alarms.clear(\n        `${itemInfo.appid}_${itemInfo.contextid}_${itemInfo.assetid}_${added}`, () => {\n          closeModal();\n        },\n      );\n    }\n  };\n\n  const removeBookmarkFunction = (closeModal) => {\n    removeBookmark(itemInfo.appid, itemInfo.contextid, itemInfo.assetid, added);\n    closeModal();\n  };\n\n  const qualityClass = (itemInfo.quality !== undefined && itemInfo.quality !== null)\n    ? `bookmark__${itemInfo.quality.name}`\n    : '';\n\n  return (\n    <div className={`bookmark ${qualityClass}`}>\n      <h5 className=\"itemName\" title={itemInfo.name}>{displayName}</h5>\n      <div className=\"exterior\">{exterior}</div>\n      <div className=\"bookmark__image-container\">\n        <span className=\"STS\">\n          <STS st={itemInfo.isStatrack} s={itemInfo.isSouvenir} />\n        </span>\n        <img src={imageSRC} alt={itemInfo.name} title={itemInfo.name} />\n      </div>\n      <div className=\"actions\">\n        <Action title=\"Add or edit a comment\">\n          <Modal modalTitle=\"Add your comment\" opener={<FontAwesomeIcon icon={faComment} />} validator={saveComment}>\n            <textarea\n              className=\"modalTextArea\"\n              placeholder=\"Type your comment here\"\n              onChange={commentChangeHandler}\n              value={comment}\n            />\n          </Modal>\n        </Action>\n        <Action title=\"Edit notifications options\" className={(itemInfo.tradability === 'Tradable' || itemInfo.tradability === 'Not Tradable') ? 'hidden' : null}>\n          <Modal modalTitle=\"Edit notifications options\" opener={<FontAwesomeIcon icon={faBell} />} validator={saveNotification}>\n            <div className=\"center\">\n              <Tradability tradability={itemInfo.tradability} />\n            </div>\n            <div>\n              Notify:\n              {' '}\n              <FlipSwitch id=\"notify\" checked={doNotify} onChange={onNotifyChange} />\n            </div>\n            <div className={doNotify ? null : 'hidden'}>\n              <div className=\"mt-3\">\n                How do you want to be notified?\n                <div>\n                  <select ref={notifTypeSelect} defaultValue={notifType} className=\"select\">\n                    <option value=\"chrome\">Browser desktop notification</option>\n                    <option value=\"alert\">Browser alert (to focus)</option>\n                  </select>\n                </div>\n              </div>\n              <div className=\"mt-3\">\n                When do you want to be notified?\n                <div>\n                  <input\n                    type=\"number\"\n                    ref={numberOfMinutesOrHours}\n                    defaultValue={whenDetails.numberOfMinutesOrHours}\n                    className=\"numberInput numberInput__narrow\"\n                  />\n                  <select ref={minutesOrHours} defaultValue={whenDetails.minutesOrHours} className=\"select\">\n                    <option value=\"minutes\">minutes</option>\n                    <option value=\"hours\">hours</option>\n                  </select>\n                  <select ref={beforeOrAfter} defaultValue={whenDetails.beforeOrAfter} className=\"select\">\n                    <option value=\"before\">before</option>\n                    <option value=\"after\">after</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n          </Modal>\n        </Action>\n        <Action title=\"Delete bookmark\">\n          <Modal modalTitle=\"Are you sure?\" opener={<FontAwesomeIcon icon={faTrash} />} validator={removeBookmarkFunction} />\n        </Action>\n      </div>\n      <div className=\"actions\">\n        <Action title=\"Inspect the item in-game\">\n          <NewTabLink to={itemInfo.inspectLink}>\n            <FontAwesomeIcon icon={faEye} />\n          </NewTabLink>\n        </Action>\n        <Action title=\"Open the market listings page of the item\">\n          <NewTabLink to={itemInfo.marketlink}>\n            <FontAwesomeIcon icon={faChartLine} />\n          </NewTabLink>\n        </Action>\n        <Action title={'View the item in the owner\\'s inventory'}>\n          <NewTabLink\n            to={getItemInventoryLink(owner, itemInfo.appid, itemInfo.contextid, itemInfo.assetid)}\n          >\n            <FontAwesomeIcon icon={faLink} />\n          </NewTabLink>\n        </Action>\n        <Action title=\"Send a trade offer to the owner (if on friend list)\">\n          <NewTabLink to={`https://steamcommunity.com/tradeoffer/new/?partner=${getOfferStyleSteamID(owner)}`}>\n            <FontAwesomeIcon icon={faExchangeAlt} />\n          </NewTabLink>\n        </Action>\n        <Action title={'Open the owner\\'s profile'}>\n          <NewTabLink to={`https://steamcommunity.com/profiles/${owner}`}>\n            <FontAwesomeIcon icon={faUser} />\n          </NewTabLink>\n        </Action>\n      </div>\n      <div className=\"center\">\n        <Tradability tradability={itemInfo.tradability} />\n      </div>\n    </div>\n  );\n};\n\nexport default Bookmark;\n","import React, { useEffect, useState } from 'react';\n\nimport Bookmark from 'components/Bookmarks/Bookmark/Bookmark';\n\nconst Bookmarks = () => {\n  chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    if (request.alert !== undefined) {\n      // eslint-disable-next-line no-alert\n      alert(`${request.alert} is now tradable!`);\n      sendResponse({ alert: request.alert });\n    }\n  });\n\n  const [bookmarks, setBookmarks] = useState([]);\n\n  const saveBookmarks = (bookmarksToSave) => {\n    chrome.storage.local.set({ bookmarks: bookmarksToSave }, () => {\n      setBookmarks(bookmarksToSave);\n    });\n  };\n\n  const removeBookmark = (appID, contextID, assetID, added) => {\n    const bookmarksToKeep = bookmarks.filter((bookmark) => {\n      return (bookmark.itemInfo.appid !== appID || bookmark.itemInfo.contextid !== contextID\n        || bookmark.itemInfo.assetid !== assetID || bookmark.added !== added);\n    });\n\n    saveBookmarks(bookmarksToKeep);\n  };\n\n  const editBookmark = (bookmarkData) => {\n    const newBookmarks = bookmarks.map((bookmark) => (\n      (bookmark.itemInfo.assetid === bookmarkData.itemInfo.assetid\n      && bookmark.itemInfo.appid === bookmarkData.itemInfo.appid\n      && bookmark.itemInfo.contextid === bookmarkData.itemInfo.contextid\n      && bookmark.added === bookmarkData.added) ? bookmarkData : bookmark\n    ));\n    saveBookmarks(newBookmarks);\n  };\n\n  useEffect(() => {\n    document.title = 'Bookmarks';\n\n    chrome.storage.local.get('bookmarks', (result) => {\n      setBookmarks(result.bookmarks);\n    });\n  }, []);\n\n  return (\n    <div>\n      <h1>Bookmark and Notify</h1>\n      <div className=\"bookmarks\">\n        <BookmarkContent bookmarks={bookmarks} remove={removeBookmark} edit={editBookmark} />\n      </div>\n    </div>\n  );\n};\n\nconst BookmarkContent = (props) => {\n  if (props.bookmarks.length === 0) return 'You don\\'t have any bookmarks yet. You can bookmark items from user inventories!';\n\n  return props.bookmarks.map((bookmark) => (\n    <Bookmark\n      key={`${bookmark.itemInfo.appid}_${bookmark.itemInfo.contextid}_${bookmark.itemInfo.assetid}_${bookmark.added}`}\n      bookmarkData={bookmark}\n      removeBookmark={props.remove}\n      editBookmark={props.edit}\n    />\n  ));\n};\n\nexport default Bookmarks;\n","// this utils module should never have any non-static dependencies\n\nconst getItemMarketLink = (appID, marketHashName) => {\n  return `https://steamcommunity.com/market/listings/${appID}/${marketHashName}`;\n};\n\nconst getItemInventoryLink = (steamID, appID, contextID, assetID) => {\n  return `https://steamcommunity.com/profiles/${steamID}/inventory/#${appID}_${contextID}_${assetID}`;\n};\n\nconst getOfferLink = (offerID) => {\n  return `https://steamcommunity.com/tradeoffer/${offerID}`;\n};\n\n// true when chrome or edge, false on ff\nconst isChromium = () => {\n  return chrome.runtime.getURL('/index.html').includes('chrome-extension');\n};\n\n// Create the offscreen document if it doesn't already exist\nconst createOffscreen = async (reasons, justification) => {\n  if (await chrome.offscreen.hasDocument()) return;\n  await chrome.offscreen.createDocument({\n    url: '/offScreen/offscreen.html',\n    reasons,\n    justification,\n  });\n};\n\n// https://stackoverflow.com/questions/67437180/play-audio-from-background-script-in-chrome-extention-manifest-v3\nconst playAudioChromium = async (source, sourceType, volume) => {\n  const sourceURL = sourceType === 'local'\n    ? chrome.runtime.getURL(source)\n    : source;\n  await createOffscreen([chrome.offscreen.Reason.AUDIO_PLAYBACK], 'to play notification sound in the background');\n  await chrome.runtime.sendMessage({ playAudio: { sourceURL, volume } });\n};\n\nconst playAudioFirefox = (source, sourceType, volume) => {\n  const sourceURL = sourceType === 'local'\n    ? chrome.runtime.getURL(source)\n    : source;\n  const audio = new Audio(sourceURL);\n  audio.volume = volume;\n  audio.play();\n};\n\nconst playAudio = isChromium() ? playAudioChromium : playAudioFirefox;\n\nconst getItemByNameAndGame = (inventory, appID, contextID, itemName) => {\n  return inventory.find((item) => {\n    return (item.market_hash_name === itemName\n      && item.appid === appID && item.contextid === contextID);\n  });\n};\n\nconst closeTab = () => new Promise((resolve, reject) => {\n  if (window.opener) {\n    window.close(); // only tabs opened by js can be closed by js\n    resolve('closed');\n  } else {\n    chrome.runtime.sendMessage({\n      closeTab: window.location.href,\n    }, () => {\n      reject('couldnt_close');\n    });\n  }\n});\n\nconst getFormattedPLPercentage = (giving, receiving) => {\n  return (giving === 0 || receiving === 0)\n    ? ''\n    : `(${(((receiving / giving) - 1) * 100).toFixed(2)}%)`;\n};\n\n// for phase detection we have to know if th item is a doppler\nconst isDopplerInName = (name) => {\n  // english and many other languages, polish iirc, simplified chinese, korean, bulgarian, russian\n  const patterns = ['Doppler', 'doppler', '多普勒', '도플러', 'Доплер', 'Волны'];\n  const dopplerCheckRegex = new RegExp(patterns.join('|'), 'i');\n  return dopplerCheckRegex.test(name);\n};\n\n// tries to parse which collection the item belongs to\n// if it find a collection it return its name as a string\n// otherwise return null\nconst getCollection = (descriptions) => {\n  let collectionName = null;\n\n  if (descriptions) {\n    descriptions.forEach((description) => {\n      if (description.value.slice(description.value.length - 11) === ' Collection') {\n        collectionName = description.value;\n      } else if (description.value.slice(description.value.length - 7) === ' Agents') {\n        collectionName = description.value;\n      }\n    });\n  }\n  return collectionName;\n};\n\n// not used atm\nconst generateInspectCommand = (fullName, fv, paintindex, defindex, paintseed, stickers) => {\n  // glove code starts with different name\n  const isGloves = fullName.includes('Gloves')\n    || fullName.includes('Wrap');\n\n  let stickerInfo = ' ';\n\n  if (stickers && stickers.length > 0) {\n    // parse the sticker array to a string like:\n    // `firstStickerId firstStickerWear secondStickerId secondStickerWear...`\n\n    for (let index = 0; index < 4; index += 1) {\n      const sticker = stickers.filter((stckr) => {\n        return stckr.slot === index;\n      })[0];\n\n      if (sticker) {\n        stickerInfo += `${sticker.stickerId} ${sticker.wear ? parseFloat(sticker.wear) : 0} `;\n      } else stickerInfo += '0 0 ';\n    }\n  }\n\n  // Join all into a string\n  return (\n    `!${isGloves ? 'gengl' : 'gen'} ${defindex} ${paintindex} ${paintseed} ${fv}${stickers ? stickerInfo : ''}`\n  );\n};\n\n// when the extension is updated or reloaded\n// the content scrips lose the ability to comminicate with the background script\n// this function reloads the page to fix that\nconst reloadPageOnExtensionUpdate = () => {\n  setInterval(() => {\n    if (!chrome.runtime?.id) window.location.reload();\n  }, 5000);\n};\n\nexport {\n  getItemMarketLink, getItemInventoryLink, getOfferLink, playAudio, isChromium,\n  getItemByNameAndGame, closeTab, isDopplerInName, getFormattedPLPercentage,\n  getCollection, generateInspectCommand, createOffscreen, reloadPageOnExtensionUpdate,\n};\n","const notificationSounds = {\n  'done-for-you': {\n    key: 'done-for-you',\n    name: 'Done for you',\n  },\n  juntos: {\n    key: 'juntos',\n    name: 'Juntos',\n  },\n  'piece-of-cake': {\n    key: 'piece-of-cake',\n    name: 'Piece of cake',\n  },\n  pristine: {\n    key: 'pristine',\n    name: 'Pristine',\n  },\n  swiftly: {\n    key: 'swiftly',\n    name: 'Swifty',\n  },\n  when: {\n    key: 'when',\n    name: 'When',\n  },\n  custom: {\n    key: 'custom',\n    name: 'Custom',\n  },\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport { notificationSounds };\n","import { injectScript } from 'utils/injection';\n\n// converts shitty annoying trade offer style SteamID to proper SteamID64\nconst getProperStyleSteamIDFromOfferStyle = (offerStyleID) => {\n  return `7656${Number(offerStyleID) + Number(1197960265728)}`;\n};\n\n// there are many different kinds of SteamID formats\n// this function converts the 64bit into the ones used in trade offers\nconst getOfferStyleSteamID = (steamID64) => {\n  return Number(steamID64.split('7656')[1]) - Number(1197960265728);\n};\n\n// gets SteamID of the user logged into steam (returns false if there is no user logged in)\nconst getUserSteamID = () => {\n  const getUserSteamIDScript = 'document.querySelector(\\'body\\').setAttribute(\\'steamidOfLoggedinUser\\', g_steamID);';\n  return injectScript(getUserSteamIDScript, true, 'steamidOfLoggedinUser', 'steamidOfLoggedinUser');\n};\n\n// gets the steam id of the user that's profile this script is run on\nconst getProfileOwnerSteamID = () => {\n  const steamIDOfProfileOwnerScript = 'document.querySelector(\\'body\\').setAttribute(\\'steamidOfProfileOwner\\', g_rgProfileData.steamid);';\n  return injectScript(steamIDOfProfileOwnerScript, true, 'steamidOfProfileOwner', 'steamidOfProfileOwner');\n};\n\nconst getGroupID = () => {\n  return document.querySelector('input[name=groupId]').value;\n};\n\nconst getSharedFileIDAndOwner = () => {\n  const pagingElement = document.querySelector('.commentthread_paging');\n\n  const ownerID = pagingElement.id.split('commentthread_PublishedFile_Public_')[1].split('_')[0];\n  const sharedFileID = pagingElement.id.split('_pagecontrols')[0].split('_')[4];\n\n  return { ownerID, sharedFileID };\n};\n\nexport {\n  getProperStyleSteamIDFromOfferStyle, getOfferStyleSteamID,\n  getUserSteamID, getProfileOwnerSteamID, getGroupID,\n  getSharedFileIDAndOwner,\n};\n"],"names":["CustomA11yButton","action","children","className","title","id","React","role","tabIndex","onClick","onKeyDown","Action","Countdown","tradability","dateToCountDownTo","state","setState","useState","text","class","useEffect","countDownInterval","setInterval","setCurrentRemaining","now","Date","getTime","distance","days","Math","floor","hours","minutes","seconds","clearInterval","props","STS","st","s","Bookmark","bookmarkData","editBookmark","removeBookmark","added","itemInfo","notifTime","notifType","notify","owner","imageSRC","iconURL","exterior","localized_name","displayName","name","split","comment","setComment","doNotify","setDoNotify","whenDetails","reverseWhenNotifDetails","notifTypeSelect","numberOfMinutesOrHours","minutesOrHours","beforeOrAfter","qualityClass","undefined","quality","isStatrack","isSouvenir","src","alt","Modal","modalTitle","opener","FontAwesomeIcon","icon","faComment","validator","closeModal","newBookmarkData","placeholder","onChange","event","target","value","faBell","newNotifTime","determineNotificationDate","current","toString","chrome","runtime","sendMessage","setAlarm","appid","contextid","assetid","when","alarms","clear","Tradability","FlipSwitch","checked","onNotifyChange","ref","defaultValue","type","faTrash","NewTabLink","to","inspectLink","faEye","marketlink","faChartLine","getItemInventoryLink","faLink","getOfferStyleSteamID","faExchangeAlt","faUser","BookmarkContent","bookmarks","length","map","bookmark","key","remove","edit","Bookmarks","onMessage","addListener","request","sender","sendResponse","alert","setBookmarks","saveBookmarks","bookmarksToSave","storage","local","set","document","get","result","appID","contextID","assetID","bookmarksToKeep","filter","newBookmarks","getItemMarketLink","marketHashName","steamID","getOfferLink","offerID","createOffscreen","async","reasons","justification","offscreen","hasDocument","createDocument","url","playAudio","getURL","includes","source","sourceType","volume","sourceURL","Reason","AUDIO_PLAYBACK","playAudioFirefox","audio","Audio","play","getFormattedPLPercentage","giving","receiving","toFixed","isDopplerInName","RegExp","join","test","getCollection","descriptions","collectionName","forEach","description","slice","notificationSounds","juntos","pristine","swiftly","custom","getProperStyleSteamIDFromOfferStyle","offerStyleID","Number","steamID64"],"sourceRoot":""}