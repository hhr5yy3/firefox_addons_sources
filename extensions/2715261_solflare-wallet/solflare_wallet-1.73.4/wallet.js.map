{"version":3,"file":"wallet.js","mappings":";;;;;AAYA;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;AAUA","sources":["webpack://@solflare/extension/../../libs/shared/dist/features/shared/snackbar/components/Notifier/index.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { Box, Fade, LinearProgress, styled, Zoom } from '@mui/material';\nimport { Typography } from '@solflare/foundation-ui';\nimport { useSnackbarNotifier } from '../../context/SnackbarContext';\nimport FullMessageModal from '../FullMessageModal';\nconst NotifierContainer = styled(Box) `\n  position: fixed;\n  top: 63px;\n  width: 100%;\n  z-index: 20000;\n`;\nconst MessageContainer = styled(Box) `\n  display: flex;\n  justify-content: center;\n  position: absolute;\n  cursor: pointer;\n  top: 50%;\n  left: 50%;\n  max-width: calc(100% - 32px);\n  transform: translate(-50%, -50%);\n  &:before {\n    content: '';\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    z-index: -1;\n    border-radius: 19px;\n    background: #131519;\n  }\n`;\nconst MessageChip = styled(Box) `\n  border: 1px solid transparent;\n  border-radius: 19px;\n  padding: 2px 8px;\n  white-space: nowrap;\n  max-width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  text-align: center;\n`;\nconst GradientProgress = styled(LinearProgress) `\n  background: rgba(245, 252, 255, 0.1);\n  height: 1px;\n  & .MuiLinearProgress-bar {\n    background: linear-gradient(90deg, #3dd28b 0%, rgba(61, 210, 139, 0) 88.53%);\n  }\n`;\nconst colorByVariant = {\n    success: 'success.main',\n    error: 'error.main',\n    info: 'info.main',\n    warning: 'warning.main',\n};\nconst backgroundByVariant = {\n    success: 'black',\n    error: 'black',\n    info: 'black',\n    warning: 'blackd',\n};\nexport const Notifier = () => {\n    const [showFullMessageData, setShowFullMessage] = useState(null);\n    const { loading, notification, showNotification, setShowNotification, setNotification } = useSnackbarNotifier();\n    const handleMessageClick = () => {\n        if (notification?.onClick) {\n            notification.onClick();\n        }\n        else {\n            setShowNotification(false);\n            setNotification(null);\n            setShowFullMessage(notification);\n        }\n    };\n    return (_jsxs(_Fragment, { children: [_jsxs(NotifierContainer, { children: [loading && _jsx(GradientProgress, {}), _jsx(Zoom, { in: showNotification, timeout: 500, children: _jsx(Box, { children: _jsx(LinearProgress, { variant: 'determinate', value: 100, sx: {\n                                    height: '1px',\n                                    backgroundColor: colorByVariant[notification?.variant] ?? 'transparent',\n                                    variant: notification?.variant,\n                                    '& .MuiLinearProgress-bar': {\n                                        backgroundColor: colorByVariant[notification?.variant] ?? 'transparent',\n                                    },\n                                } }) }) }), _jsx(Fade, { in: showNotification, timeout: 500, mountOnEnter: true, unmountOnExit: true, children: _jsx(Box, { children: notification?.message && (_jsx(MessageContainer, { onClick: handleMessageClick, children: _jsx(MessageChip, { sx: {\n                                        borderColor: colorByVariant[notification?.variant],\n                                        backgroundColor: backgroundByVariant[notification?.variant],\n                                    }, children: _jsx(Typography, { variant: 'headingXS', children: notification?.message }) }) })) }) })] }), !!showFullMessageData && (_jsx(FullMessageModal, { notification: showFullMessageData, onClose: () => setShowFullMessage(null) }))] }));\n};\nexport default Notifier;\n\n"],"names":[],"sourceRoot":""}