/*************************************/
/*********** Veriables ***************/
/*************************************/
/*************************************/
/************** Mixins ***************/
/*************************************/
/*************************************/
/*************** Antd ****************/
/*************************************/
.ant-select-arrow {
  color: rgba(0, 0, 0, 0.5);
  font-size: 13px;
}
html,
body {
  margin: 0;
  padding: 0;
  background: #212224;
}
.main {
  width: 560px;
  padding: 15px 0 25px 0;
  margin: 0 auto 0 auto;
}
.main .top {
  overflow: auto;
  margin-bottom: 20px;
}
.main .top .logo {
  margin-top: 10px;
  padding-left: 50px;
  width: 135px;
  height: 33px;
  float: left;
  background-size: 135px 33px;
  background-image: url(../../images/logo_white.png);
  position: relative;
}
@media only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (-moz-min-device-pixel-ratio: 1.5), only screen and (-o-min-device-pixel-ratio: 3/2), only screen and (min-device-pixel-ratio: 1.5) {
  .main .top .logo {
    background-image: url(../../images/logo_white@2x.png);
  }
}
.main .top .logo a {
  position: absolute;
  left: 0;
  width: 0;
  height: 100%;
  width: 100%;
}
.main .top .logo .logo-text {
  line-height: 20px;
  font-weight: 500;
  font-size: 16px;
  color: white;
  transition: all 0.5s ease;
}
.main .options-container {
  border-radius: 3px;
  background: white;
  padding: 10px 50px;
  overflow: hidden;
}
.main .options-container .sent-message {
  padding: 20px 0;
  text-align: center;
}
.main .options-container .sent-message .anticon {
  font-size: 50px;
  margin-bottom: 15px;
  color: #52c42e;
}
.main .options-container .sent-message .title {
  font-size: 28px;
}
.main .options-container .sent-message .content {
  font-size: 14px;
  margin: 10px 0 20px 0;
}
.main .options-container .main-title {
  font-size: 24px;
  text-align: center;
  line-height: 40px;
  margin: 20px 0 0 0;
  color: #2d354a;
}
.main .options-container .title-tip {
  color: rgba(0, 0, 0, 0.45);
  text-align: center;
  margin-bottom: 20px;
  font-size: 13px;
}
.main .options-container .label {
  color: #2d354a;
  font-size: 14px;
  line-height: 16px;
  font-weight: 500;
  margin-top: 15px;
}
.main .options-container .label-tip {
  font-size: 12px;
  color: rgba(0, 0, 0, 0.45);
}
.main .options-container input {
  height: 38px;
}
.main .options-container .ant-form-item {
  margin-top: 5px;
}
.main .options-container .ant-select-selector {
  height: 38px;
}
.main .options-container .ant-select-selector .ant-select-selection-search-input {
  height: 36px;
  line-height: 36px;
}
.main .options-container .ant-select-selector .ant-select-selection-placeholder {
  line-height: 36px;
}
.main .options-container .ant-select-selection-item {
  line-height: 36px;
}
.main .options-container form button {
  height: 48px;
  margin-top: 20px;
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/