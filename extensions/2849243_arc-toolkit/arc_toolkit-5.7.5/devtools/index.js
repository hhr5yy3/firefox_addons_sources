import{b as n}from"../browser-polyfill.js";function e(){}function t(){}n.devtools.panels.create("ARC Toolkit","/icon/16.png","/panel/index.html").then((n=>{n.onShown.addListener(e),n.onHidden.addListener(t)}));n.devtools.panels.elements.onSelectionChanged.addListener((function(){const e=n.devtools.inspectedWindow.tabId;console.log(`[${e}] arc-toolkit:devtools inspected element change detected`),n.devtools.inspectedWindow.eval('\nfunction getXPath(el) {\n    if (el.id) {\n        return `//*[@id="${el.id}"]`;\n    }\n    const parts = [];\n    while (el && el.nodeType === Node.ELEMENT_NODE) {\n        let nbOfPreviousSiblings = 0;\n        let hasNextSiblings = false;\n        let sibling = el.previousSibling;\n        while (sibling) {\n            if (\n                sibling.nodeType !== Node.DOCUMENT_TYPE_NODE &&\n                sibling.nodeName === el.nodeName\n            ) {\n                nbOfPreviousSiblings++;\n            }\n            sibling = sibling.previousSibling;\n        }\n        sibling = el.nextSibling;\n        while (sibling) {\n            if (sibling.nodeName === el.nodeName) {\n                hasNextSiblings = true;\n                break;\n            }\n            sibling = sibling.nextSibling;\n        }\n        const prefix = el.prefix ? el.prefix + ":" : "";\n        const nth =\n            nbOfPreviousSiblings || hasNextSiblings\n                ? `[${nbOfPreviousSiblings + 1}]`\n                : "";\n        parts.push(prefix + el.localName + nth);\n        el = el.parentNode;\n    }\n    return parts.length ? "/" + parts.reverse().join("/") : "";\n}\n\nfunction sendElementToArc(e) {\n    if (e) {\n        try{\n            const XPath = getXPath(e);\n            const htmlText = e.outerHTML\n            const start  = htmlText.search(/</)\n            const end  = htmlText.search(/>/)\n            const shortHtml = htmlText.substr(start, end + 1)\n            let frameId\n            let frameUrl\n            if (e.ownerDocument != document) { // The element is in a iFrame\n                frameId = e.ownerDocument.documentElement.getAttribute("arc-frame-id")\n                frameUrl = e.ownerDocument.URL\n            }\n            const message = {\n                extension: "arc-toolkit",\n                type: "fromDevtools",\n                command: "inspectSelected",\n                data: {\n                    elementInfo: {\n                        frameId,\n                        frameUrl,\n                        xpath: XPath,\n                        html: shortHtml,\n                    },\n                },\n            };\n            return message;\n        }\n        catch(err)\n        {\n            console.error("devtools: sendElementToArc", err)\n        }\n    }\n}\nsendElementToArc($0);\n',{}).then((t=>{const o=t[0];o&&(o.tabId=e,n.runtime.sendMessage(o))})).catch((n=>console.error("devtools error: ",n)))})),n.devtools.network.onNavigated.addListener((function(e){const t=n.devtools.inspectedWindow.tabId;console.log(`[${t}] arc-toolkit:devtools page change detected`,e),function(e,t,o){const i={extension:"arc-toolkit",tabId:e,type:"fromDevtools",command:t,data:o};console.log(`[${e}] arc-toolkit:background send command`,i),n.runtime.sendMessage(i)}(t,"pageChanged",{url:e})}));
