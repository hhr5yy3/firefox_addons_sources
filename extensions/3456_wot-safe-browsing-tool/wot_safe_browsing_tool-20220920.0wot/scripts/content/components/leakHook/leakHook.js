function _toConsumableArray(e){if(Array.isArray(e)){for(var t=0,o=Array(e.length);t<e.length;t++)o[t]=e[t];return o}return Array.from(e)}class LeakHook extends React.Component{constructor(){super(),this.state={showMe:!1,closed:!1},this.passwordInputs=document.querySelectorAll('input[type="password"], input[type="email"]'),this.showAd=this.showAd.bind(this)}componentDidMount(){[].concat(_toConsumableArray(this.passwordInputs)).forEach(e=>{if(e.value&&e.value.length)return this.showAd(),1;!this.state.showMe&&e.addEventListener("input",this.showAd)})}componentWillUnmount(){[].concat(_toConsumableArray(this.passwordInputs)).forEach(e=>{e.removeEventListener("input",this.showAd)})}handleClose(){this.setState({showMe:!1,closed:!0})}showAd(){if(!this.state.closed&&!this.state.showMe){GA("leak monitoring","popup hook","shown"),this.setState({showMe:!0}),this.props.incrementCounter();const e=calculateNextReminder(REMOTE_CONFIG_KEYS.LEAK_MONITORING_HOOK,this.props.state);this.props.setReminder(e)}}closeMe(){GA("leak monitoring","popup hook","close"),this.handleClose()}protectYourself(){goUpgrade("leak monitoring","upgrade","popup hook"),this.handleClose()}render(){return React.createElement("div",{className:"wot-leak-hook-container "+(this.state.showMe?"show":"")},React.createElement("div",{className:"top"},React.createElement("div",{className:"header"},React.createElement(SvgIcon,{svg:"wot-logo",className:"wot-logo"}),React.createElement(SvgIcon,{svg:"mail-serp-cross",className:"close-btn",onClick:()=>this.closeMe()})),React.createElement(SvgIcon,{svg:"leak-hook-warning",className:"shield-warning-icon"})),React.createElement("div",{className:"bottom"},React.createElement("div",{className:"title"},translate("dataBreachHookTitle")),React.createElement("div",{className:"text"},translate("dataBreachHookText")),React.createElement("div",{className:"protect-btn",onClick:()=>this.protectYourself()},translate("protectYourself"))))}}function mapStateToProps(e){return{state:e}}function mapDispatchToProps(e){return{setReminder:t=>e(setReminder(SCHEDULER_TYPES.LEAK_MONITORING_AD,t)),incrementCounter:()=>e(incrementCounter(SCHEDULER_TYPES.LEAK_MONITORING_AD))}}LeakHook=ReactRedux.connect(mapStateToProps,mapDispatchToProps)(LeakHook);