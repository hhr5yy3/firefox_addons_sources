(()=>{var e={285:(e,a,o)=>{var t=o(186),n="https://example.org/";e.exports=m;var s={Accept:"application/json, application/x-www-form-urlencoded","Content-Type":"application/x-www-form-urlencoded"},i={invalid_request:["The request is missing a required parameter, includes an","invalid parameter value, includes a parameter more than","once, or is otherwise malformed."].join(" "),invalid_client:["Client authentication failed (e.g., unknown client, no","client authentication included, or unsupported","authentication method)."].join(" "),invalid_grant:["The provided authorization grant (e.g., authorization","code, resource owner credentials) or refresh token is","invalid, expired, revoked, does not match the redirection","URI used in the authorization request, or was issued to","another client."].join(" "),unauthorized_client:["The client is not authorized to request an authorization","code using this method."].join(" "),unsupported_grant_type:["The authorization grant type is not supported by the","authorization server."].join(" "),access_denied:["The resource owner or authorization server denied the request."].join(" "),unsupported_response_type:["The authorization server does not support obtaining","an authorization code using this method."].join(" "),invalid_scope:["The requested scope is invalid, unknown, or malformed."].join(" "),server_error:["The authorization server encountered an unexpected","condition that prevented it from fulfilling the request.","(This error code is needed because a 500 Internal Server","Error HTTP status code cannot be returned to the client","via an HTTP redirect.)"].join(" "),temporarily_unavailable:["The authorization server is currently unable to handle","the request due to a temporary overloading or maintenance","of the server."].join(" ")};function r(e){for(var a=1;a<arguments.length;a++){var o=arguments[a];if(null==e[o])throw new TypeError('Expected "'+o+'" to exist')}}function c(e,a){return"Basic "+btoa(u(e)+":"+u(a))}function u(e){return null==e?"":String(e)}function l(e,a){return{url:e.url,method:e.method,body:Object.assign({},e.body,a.body),query:Object.assign({},e.query,a.query),headers:Object.assign({},e.headers,a.headers)}}function d(e,a,o,t){return fetch(a,{method:e,headers:t,body:o}).then((function(e){if(!e.ok)throw new Error("HTTP error! Status: ".concat(e.status));return e.json()}))}function m(e){this.options=e,this.request=d,this.code=new g(this)}function h(e,a){this.client=e,this.data=a,this.tokenType=a.token_type&&a.token_type.toLowerCase(),this.accessToken=a.access_token,this.refreshToken=a.refresh_token,this.expiresIn(Number(a.expires_in))}function g(e){this.client=e}m.Token=h,m.prototype.createToken=function(e,a,o,t){var n=Object.assign({},t,"string"==typeof e?{access_token:e}:e,"string"==typeof a?{refresh_token:a}:a,"string"==typeof o?{token_type:o}:o);return new m.Token(this,n)},m.prototype._request=function(e){var a=e.url,o=t.stringify(e.body),n=t.stringify(e.query);return n&&(a+=(-1===a.indexOf("?")?"?":"&")+n),this.request(e.method,a,o,e.headers)},h.prototype.expiresIn=function(e){if("number"==typeof e)this.expires=new Date,this.expires.setSeconds(this.expires.getSeconds()+e);else{if(!(e instanceof Date))throw new TypeError("Unknown duration: "+e);this.expires=new Date(e.getTime())}return this.expires},h.prototype.sign=function(e){if(!this.accessToken)throw new Error("Unable to sign without access token");if(e.headers=e.headers||{},"bearer"===this.tokenType)e.headers.Authorization="Bearer "+this.accessToken;else{var a=e.url.split("#"),o="access_token="+this.accessToken,t=a[0].replace(/[?&]access_token=[^&#]/,""),n=a[1]?"#"+a[1]:"";e.url=t+(t.indexOf("?")>-1?"&":"?")+o+n,e.headers.Pragma="no-store",e.headers["Cache-Control"]="no-store"}return e},h.prototype.refresh=function(e){var a=this,o=Object.assign({},this.client.options,e);return this.refreshToken?this.client._request(l({url:o.accessTokenUri,method:"POST",headers:Object.assign({},s,{Authorization:c(o.clientId,o.clientSecret)}),body:{refresh_token:this.refreshToken,grant_type:"refresh_token"}},o)).then((function(e){return a.client.createToken(Object.assign({},a.data,e))})):Promise.reject(new Error("No refresh token"))},h.prototype.expired=function(){return Date.now()>this.expires.getTime()},g.prototype.getUri=function(e){return function(e,a){r(e,"clientId","authorizationUri");var o,n={client_id:e.clientId,redirect_uri:e.redirectUri,response_type:a,state:e.state};void 0!==e.scopes&&(n.scope=(o=e.scopes,Array.isArray(o)?o.join(" "):u(o)));var s=e.authorizationUri.includes("?")?"&":"?";return e.authorizationUri+s+t.stringify(Object.assign(n,e.query))}(Object.assign({},this.client.options,e),"code")},g.prototype.getToken=function(e,a){var o=this,u=Object.assign({},this.client.options,a);r(u,"clientId","accessTokenUri");var d="object"==typeof e?e:new URL(e,n);if("string"==typeof u.redirectUri&&"string"==typeof d.pathname&&d.pathname!==new URL(u.redirectUri,n).pathname)return Promise.reject(new TypeError("Redirected path should match configured path, but got: "+d.pathname));if(!d.search||!d.search.substr(1))return Promise.reject(new TypeError("Unable to process uri: "+e));var m="string"==typeof d.search?t.parse(d.search.substr(1)):d.search||{},h=function(e){var a=i[e.error]||e.error_description||e.error;if(a){var o=new Error(a);return o.body=e,o.code="EAUTH",o}}(m);if(h)return Promise.reject(h);if(null!=u.state&&m.state!==u.state)return Promise.reject(new TypeError("Invalid state: "+m.state));if(!m.code)return Promise.reject(new TypeError("Missing code, unable to request token"));var g=Object.assign({},s),p={code:m.code,grant_type:"authorization_code",redirect_uri:u.redirectUri};return u.clientSecret?g.Authorization=c(u.clientId,u.clientSecret):p.client_id=u.clientId,this.client._request(l({url:u.accessTokenUri,method:"POST",headers:g,body:p},u)).then((function(e){return o.client.createToken(e)}))}},630:e=>{"use strict";function a(e,a){return Object.prototype.hasOwnProperty.call(e,a)}e.exports=function(e,o,t,n){o=o||"&",t=t||"=";var s={};if("string"!=typeof e||0===e.length)return s;var i=/\+/g;e=e.split(o);var r=1e3;n&&"number"==typeof n.maxKeys&&(r=n.maxKeys);var c=e.length;r>0&&c>r&&(c=r);for(var u=0;u<c;++u){var l,d,m,h,g=e[u].replace(i,"%20"),p=g.indexOf(t);p>=0?(l=g.substr(0,p),d=g.substr(p+1)):(l=g,d=""),m=decodeURIComponent(l),h=decodeURIComponent(d),a(s,m)?Array.isArray(s[m])?s[m].push(h):s[m]=[s[m],h]:s[m]=h}return s}},106:e=>{"use strict";var a=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,o,t,n){return o=o||"&",t=t||"=",null===e&&(e=void 0),"object"==typeof e?Object.keys(e).map((function(n){var s=encodeURIComponent(a(n))+t;return Array.isArray(e[n])?e[n].map((function(e){return s+encodeURIComponent(a(e))})).join(o):s+encodeURIComponent(a(e[n]))})).filter(Boolean).join(o):n?encodeURIComponent(a(n))+t+encodeURIComponent(a(e)):""}},186:(e,a,o)=>{"use strict";a.decode=a.parse=o(630),a.encode=a.stringify=o(106)}},a={};function o(t){var n=a[t];if(void 0!==n)return n.exports;var s=a[t]={exports:{}};return e[t](s,s.exports,o),s.exports}o.n=e=>{var a=e&&e.__esModule?()=>e.default:()=>e;return o.d(a,{a}),a},o.d=(e,a)=>{for(var t in a)o.o(a,t)&&!o.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:a[t]})},o.o=(e,a)=>Object.prototype.hasOwnProperty.call(e,a),(()=>{"use strict";var e=null;function a(e,a){(null==a||a>e.length)&&(a=e.length);for(var o=0,t=Array(a);o<a;o++)t[o]=e[o];return t}function t(e,o){if(e){if("string"==typeof e)return a(e,o);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?a(e,o):void 0}}function n(e,a){return function(e){if(Array.isArray(e))return e}(e)||function(e,a){var o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var t,n,s,i,r=[],c=!0,u=!1;try{if(s=(o=o.call(e)).next,0===a){if(Object(o)!==o)return;c=!1}else for(;!(c=(t=s.call(o)).done)&&(r.push(t.value),r.length!==a);c=!0);}catch(e){u=!0,n=e}finally{try{if(!c&&null!=o.return&&(i=o.return(),Object(i)!==i))return}finally{if(u)throw n}}return r}}(e,a)||t(e,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e){return function(e){if(Array.isArray(e))return a(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||t(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function r(e){var a=function(e){if("object"!=i(e)||!e)return e;var a=e[Symbol.toPrimitive];if(void 0!==a){var o=a.call(e,"string");if("object"!=i(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==i(a)?a:a+""}function c(e,a){for(var o=0;o<a.length;o++){var t=a[o];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,r(t.key),t)}}function u(e,a,o){return a&&c(e.prototype,a),o&&c(e,o),Object.defineProperty(e,"prototype",{writable:!1}),e}function l(e,a){if(!(e instanceof a))throw new TypeError("Cannot call a class as a function")}function d(e,a,o){return(a=r(a))in e?Object.defineProperty(e,a,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[a]=o,e}const m=new TextEncoder,h=new TextDecoder;const g=e=>{let a=e;a instanceof Uint8Array&&(a=h.decode(a)),a=a.replace(/-/g,"+").replace(/_/g,"/").replace(/\s/g,"");try{return(e=>{const a=atob(e),o=new Uint8Array(a.length);for(let e=0;e<a.length;e++)o[e]=a.charCodeAt(e);return o})(a)}catch{throw new TypeError("The input to be decoded is not correctly encoded.")}},p=crypto,k=e=>e instanceof CryptoKey;class b extends Error{static get code(){return"ERR_JOSE_GENERIC"}constructor(e){super(e),this.code="ERR_JOSE_GENERIC",this.name=this.constructor.name,Error.captureStackTrace?.(this,this.constructor)}}class f extends b{static get code(){return"ERR_JWT_CLAIM_VALIDATION_FAILED"}constructor(e,a,o="unspecified",t="unspecified"){super(e),this.code="ERR_JWT_CLAIM_VALIDATION_FAILED",this.claim=o,this.reason=t,this.payload=a}}class y extends b{static get code(){return"ERR_JWT_EXPIRED"}constructor(e,a,o="unspecified",t="unspecified"){super(e),this.code="ERR_JWT_EXPIRED",this.claim=o,this.reason=t,this.payload=a}}class v extends b{constructor(){super(...arguments),this.code="ERR_JOSE_ALG_NOT_ALLOWED"}static get code(){return"ERR_JOSE_ALG_NOT_ALLOWED"}}class w extends b{constructor(){super(...arguments),this.code="ERR_JOSE_NOT_SUPPORTED"}static get code(){return"ERR_JOSE_NOT_SUPPORTED"}}class x extends b{constructor(){super(...arguments),this.code="ERR_JWS_INVALID"}static get code(){return"ERR_JWS_INVALID"}}class j extends b{constructor(){super(...arguments),this.code="ERR_JWT_INVALID"}static get code(){return"ERR_JWT_INVALID"}}class z extends b{constructor(){super(...arguments),this.code="ERR_JWKS_INVALID"}static get code(){return"ERR_JWKS_INVALID"}}class S extends b{constructor(){super(...arguments),this.code="ERR_JWKS_NO_MATCHING_KEY",this.message="no applicable key found in the JSON Web Key Set"}static get code(){return"ERR_JWKS_NO_MATCHING_KEY"}}class E extends b{constructor(){super(...arguments),this.code="ERR_JWKS_MULTIPLE_MATCHING_KEYS",this.message="multiple matching keys found in the JSON Web Key Set"}static get code(){return"ERR_JWKS_MULTIPLE_MATCHING_KEYS"}}Symbol.asyncIterator;class A extends b{constructor(){super(...arguments),this.code="ERR_JWS_SIGNATURE_VERIFICATION_FAILED",this.message="signature verification failed"}static get code(){return"ERR_JWS_SIGNATURE_VERIFICATION_FAILED"}}const _=async e=>{if(!e.alg)throw new TypeError('"alg" argument is required when "jwk.alg" is not present');const{algorithm:a,keyUsages:o}=function(e){let a,o;switch(e.kty){case"RSA":switch(e.alg){case"PS256":case"PS384":case"PS512":a={name:"RSA-PSS",hash:`SHA-${e.alg.slice(-3)}`},o=e.d?["sign"]:["verify"];break;case"RS256":case"RS384":case"RS512":a={name:"RSASSA-PKCS1-v1_5",hash:`SHA-${e.alg.slice(-3)}`},o=e.d?["sign"]:["verify"];break;case"RSA-OAEP":case"RSA-OAEP-256":case"RSA-OAEP-384":case"RSA-OAEP-512":a={name:"RSA-OAEP",hash:`SHA-${parseInt(e.alg.slice(-3),10)||1}`},o=e.d?["decrypt","unwrapKey"]:["encrypt","wrapKey"];break;default:throw new w('Invalid or unsupported JWK "alg" (Algorithm) Parameter value')}break;case"EC":switch(e.alg){case"ES256":a={name:"ECDSA",namedCurve:"P-256"},o=e.d?["sign"]:["verify"];break;case"ES384":a={name:"ECDSA",namedCurve:"P-384"},o=e.d?["sign"]:["verify"];break;case"ES512":a={name:"ECDSA",namedCurve:"P-521"},o=e.d?["sign"]:["verify"];break;case"ECDH-ES":case"ECDH-ES+A128KW":case"ECDH-ES+A192KW":case"ECDH-ES+A256KW":a={name:"ECDH",namedCurve:e.crv},o=e.d?["deriveBits"]:[];break;default:throw new w('Invalid or unsupported JWK "alg" (Algorithm) Parameter value')}break;case"OKP":switch(e.alg){case"EdDSA":a={name:e.crv},o=e.d?["sign"]:["verify"];break;case"ECDH-ES":case"ECDH-ES+A128KW":case"ECDH-ES+A192KW":case"ECDH-ES+A256KW":a={name:e.crv},o=e.d?["deriveBits"]:[];break;default:throw new w('Invalid or unsupported JWK "alg" (Algorithm) Parameter value')}break;default:throw new w('Invalid or unsupported JWK "kty" (Key Type) Parameter value')}return{algorithm:a,keyUsages:o}}(e),t=[a,e.ext??!1,e.key_ops??o],n={...e};return delete n.alg,delete n.use,p.subtle.importKey("jwk",n,...t)};function R(e){if("object"!=typeof(a=e)||null===a||"[object Object]"!==Object.prototype.toString.call(e))return!1;var a;if(null===Object.getPrototypeOf(e))return!0;let o=e;for(;null!==Object.getPrototypeOf(o);)o=Object.getPrototypeOf(o);return Object.getPrototypeOf(e)===o}async function T(e,a){if(!R(e))throw new TypeError("JWK must be an object");switch(a||(a=e.alg),e.kty){case"oct":if("string"!=typeof e.k||!e.k)throw new TypeError('missing "k" (Key Value) Parameter value');return g(e.k);case"RSA":if(void 0!==e.oth)throw new w('RSA JWK "oth" (Other Primes Info) Parameter value is not supported');case"EC":case"OKP":return _({...e,alg:a});default:throw new w('Unsupported "kty" (Key Type) Parameter value')}}function q(e){return R(e)}function I(e){return"function"==typeof structuredClone?structuredClone(e):JSON.parse(JSON.stringify(e))}class C{constructor(e){if(this._cached=new WeakMap,!function(e){return e&&"object"==typeof e&&Array.isArray(e.keys)&&e.keys.every(q)}(e))throw new z("JSON Web Key Set malformed");this._jwks=I(e)}async getKey(e,a){const{alg:o,kid:t}={...e,...a?.header},n=function(e){switch("string"==typeof e&&e.slice(0,2)){case"RS":case"PS":return"RSA";case"ES":return"EC";case"Ed":return"OKP";default:throw new w('Unsupported "alg" value for a JSON Web Key Set')}}(o),s=this._jwks.keys.filter((e=>{let a=n===e.kty;if(a&&"string"==typeof t&&(a=t===e.kid),a&&"string"==typeof e.alg&&(a=o===e.alg),a&&"string"==typeof e.use&&(a="sig"===e.use),a&&Array.isArray(e.key_ops)&&(a=e.key_ops.includes("verify")),a&&"EdDSA"===o&&(a="Ed25519"===e.crv||"Ed448"===e.crv),a)switch(o){case"ES256":a="P-256"===e.crv;break;case"ES256K":a="secp256k1"===e.crv;break;case"ES384":a="P-384"===e.crv;break;case"ES512":a="P-521"===e.crv}return a})),{0:i,length:r}=s;if(0===r)throw new S;if(1!==r){const e=new E,{_cached:a}=this;throw e[Symbol.asyncIterator]=async function*(){for(const e of s)try{yield await P(a,e,o)}catch{}},e}return P(this._cached,i,o)}}async function P(e,a,o){const t=e.get(a)||e.set(a,{}).get(a);if(void 0===t[o]){const e=await T({...a,ext:!0},o);if(e instanceof Uint8Array||"public"!==e.type)throw new z("JSON Web Key Set members must be public keys");t[o]=e}return t[o]}function L(e){const a=new C(e),o=async(e,o)=>a.getKey(e,o);return Object.defineProperties(o,{jwks:{value:()=>I(a._jwks),enumerable:!0,configurable:!1,writable:!1}}),o}function O(e,a="algorithm.name"){return new TypeError(`CryptoKey does not support this operation, its ${a} must be ${e}`)}function U(e,a){return e.name===a}function N(e){return parseInt(e.name.slice(4),10)}function D(e,a,...o){switch(a){case"HS256":case"HS384":case"HS512":{if(!U(e.algorithm,"HMAC"))throw O("HMAC");const o=parseInt(a.slice(2),10);if(N(e.algorithm.hash)!==o)throw O(`SHA-${o}`,"algorithm.hash");break}case"RS256":case"RS384":case"RS512":{if(!U(e.algorithm,"RSASSA-PKCS1-v1_5"))throw O("RSASSA-PKCS1-v1_5");const o=parseInt(a.slice(2),10);if(N(e.algorithm.hash)!==o)throw O(`SHA-${o}`,"algorithm.hash");break}case"PS256":case"PS384":case"PS512":{if(!U(e.algorithm,"RSA-PSS"))throw O("RSA-PSS");const o=parseInt(a.slice(2),10);if(N(e.algorithm.hash)!==o)throw O(`SHA-${o}`,"algorithm.hash");break}case"EdDSA":if("Ed25519"!==e.algorithm.name&&"Ed448"!==e.algorithm.name)throw O("Ed25519 or Ed448");break;case"ES256":case"ES384":case"ES512":{if(!U(e.algorithm,"ECDSA"))throw O("ECDSA");const o=function(e){switch(e){case"ES256":return"P-256";case"ES384":return"P-384";case"ES512":return"P-521";default:throw new Error("unreachable")}}(a);if(e.algorithm.namedCurve!==o)throw O(o,"algorithm.namedCurve");break}default:throw new TypeError("CryptoKey does not support this operation")}!function(e,a){if(a.length&&!a.some((a=>e.usages.includes(a)))){let e="CryptoKey does not support this operation, its usages must include ";if(a.length>2){const o=a.pop();e+=`one of ${a.join(", ")}, or ${o}.`}else 2===a.length?e+=`one of ${a[0]} or ${a[1]}.`:e+=`${a[0]}.`;throw new TypeError(e)}}(e,o)}function V(e,a,...o){if((o=o.filter(Boolean)).length>2){const a=o.pop();e+=`one of type ${o.join(", ")}, or ${a}.`}else 2===o.length?e+=`one of type ${o[0]} or ${o[1]}.`:e+=`of type ${o[0]}.`;return null==a?e+=` Received ${a}`:"function"==typeof a&&a.name?e+=` Received function ${a.name}`:"object"==typeof a&&null!=a&&a.constructor?.name&&(e+=` Received an instance of ${a.constructor.name}`),e}const W=(e,...a)=>V("Key must be ",e,...a);function M(e,a,...o){return V(`Key for the ${e} algorithm must be `,a,...o)}const H=e=>!!k(e)||"KeyObject"===e?.[Symbol.toStringTag],K=["CryptoKey"];function J(e){return R(e)&&"string"==typeof e.kty}const F=e=>g(e);let $;const G=e=>"KeyObject"===e?.[Symbol.toStringTag],B=async(e,a,o,t,n=!1)=>{let s=e.get(a);if(s?.[t])return s[t];const i=await _({...o,alg:t});return n&&Object.freeze(a),s?s[t]=i:e.set(a,{[t]:i}),i},Q=async(e,a,o,t)=>{const n=await async function(e,a,o){if(a=await((e,a)=>{if(G(e)){let o=e.export({format:"jwk"});return delete o.d,delete o.dp,delete o.dq,delete o.p,delete o.q,delete o.qi,o.k?F(o.k):($||($=new WeakMap),B($,e,o,a))}return J(e)?e.k?g(e.k):($||($=new WeakMap),B($,e,e,a,!0)):e})(a,e),k(a))return D(a,e,o),a;if(a instanceof Uint8Array){if(!e.startsWith("HS"))throw new TypeError(W(a,...K));return p.subtle.importKey("raw",a,{hash:`SHA-${e.slice(-3)}`,name:"HMAC"},!1,[o])}throw new TypeError(W(a,...K,"Uint8Array","JSON Web Key"))}(e,a,"verify");((e,a)=>{if(e.startsWith("RS")||e.startsWith("PS")){const{modulusLength:o}=a.algorithm;if("number"!=typeof o||o<2048)throw new TypeError(`${e} requires key modulusLength to be 2048 bits or larger`)}})(e,n);const s=function(e,a){const o=`SHA-${e.slice(-3)}`;switch(e){case"HS256":case"HS384":case"HS512":return{hash:o,name:"HMAC"};case"PS256":case"PS384":case"PS512":return{hash:o,name:"RSA-PSS",saltLength:e.slice(-3)>>3};case"RS256":case"RS384":case"RS512":return{hash:o,name:"RSASSA-PKCS1-v1_5"};case"ES256":case"ES384":case"ES512":return{hash:o,name:"ECDSA",namedCurve:a.namedCurve};case"EdDSA":return{name:a.name};default:throw new w(`alg ${e} is not supported either by JOSE or your javascript runtime`)}}(e,n.algorithm);try{return await p.subtle.verify(s,n,o,t)}catch{return!1}},Z=e=>e?.[Symbol.toStringTag],X=(e,a,o)=>{if(void 0!==a.use&&"sig"!==a.use)throw new TypeError("Invalid key for this operation, when present its use must be sig");if(void 0!==a.key_ops&&!0!==a.key_ops.includes?.(o))throw new TypeError(`Invalid key for this operation, when present its key_ops must include ${o}`);if(void 0!==a.alg&&a.alg!==e)throw new TypeError(`Invalid key for this operation, when present its alg must be ${e}`);return!0};function Y(e,a,o,t){a.startsWith("HS")||"dir"===a||a.startsWith("PBES2")||/^A\d{3}(?:GCM)?KW$/.test(a)?((e,a,o,t)=>{if(!(a instanceof Uint8Array)){if(t&&J(a)){if(function(e){return J(e)&&"oct"===e.kty&&"string"==typeof e.k}(a)&&X(e,a,o))return;throw new TypeError('JSON Web Key for symmetric algorithms must have JWK "kty" (Key Type) equal to "oct" and the JWK "k" (Key Value) present')}if(!H(a))throw new TypeError(M(e,a,...K,"Uint8Array",t?"JSON Web Key":null));if("secret"!==a.type)throw new TypeError(`${Z(a)} instances for symmetric algorithms must be of type "secret"`)}})(a,o,t,e):((e,a,o,t)=>{if(t&&J(a))switch(o){case"sign":if(function(e){return"oct"!==e.kty&&"string"==typeof e.d}(a)&&X(e,a,o))return;throw new TypeError("JSON Web Key for this operation be a private JWK");case"verify":if(function(e){return"oct"!==e.kty&&void 0===e.d}(a)&&X(e,a,o))return;throw new TypeError("JSON Web Key for this operation be a public JWK")}if(!H(a))throw new TypeError(M(e,a,...K,t?"JSON Web Key":null));if("secret"===a.type)throw new TypeError(`${Z(a)} instances for asymmetric algorithms must not be of type "secret"`);if("sign"===o&&"public"===a.type)throw new TypeError(`${Z(a)} instances for asymmetric algorithm signing must be of type "private"`);if("decrypt"===o&&"public"===a.type)throw new TypeError(`${Z(a)} instances for asymmetric algorithm decryption must be of type "private"`);if(a.algorithm&&"verify"===o&&"private"===a.type)throw new TypeError(`${Z(a)} instances for asymmetric algorithm verifying must be of type "public"`);if(a.algorithm&&"encrypt"===o&&"private"===a.type)throw new TypeError(`${Z(a)} instances for asymmetric algorithm encryption must be of type "public"`)})(a,o,t,e)}Y.bind(void 0,!1);const ee=Y.bind(void 0,!0);async function ae(e,a,o){if(e instanceof Uint8Array&&(e=h.decode(e)),"string"!=typeof e)throw new x("Compact JWS must be a string or Uint8Array");const{0:t,1:n,2:s,length:i}=e.split(".");if(3!==i)throw new x("Invalid Compact JWS");const r=await async function(e,a,o){if(!R(e))throw new x("Flattened JWS must be an object");if(void 0===e.protected&&void 0===e.header)throw new x('Flattened JWS must have either of the "protected" or "header" members');if(void 0!==e.protected&&"string"!=typeof e.protected)throw new x("JWS Protected Header incorrect type");if(void 0===e.payload)throw new x("JWS Payload missing");if("string"!=typeof e.signature)throw new x("JWS Signature missing or incorrect type");if(void 0!==e.header&&!R(e.header))throw new x("JWS Unprotected Header incorrect type");let t={};if(e.protected)try{const a=g(e.protected);t=JSON.parse(h.decode(a))}catch{throw new x("JWS Protected Header is invalid")}if(!((...e)=>{const a=e.filter(Boolean);if(0===a.length||1===a.length)return!0;let o;for(const e of a){const a=Object.keys(e);if(o&&0!==o.size)for(const e of a){if(o.has(e))return!1;o.add(e)}else o=new Set(a)}return!0})(t,e.header))throw new x("JWS Protected and JWS Unprotected Header Parameter names must be disjoint");const n={...t,...e.header};let s=!0;if(function(e,a,o,t,n){if(void 0!==n.crit&&void 0===t?.crit)throw new e('"crit" (Critical) Header Parameter MUST be integrity protected');if(!t||void 0===t.crit)return new Set;if(!Array.isArray(t.crit)||0===t.crit.length||t.crit.some((e=>"string"!=typeof e||0===e.length)))throw new e('"crit" (Critical) Header Parameter MUST be an array of non-empty strings when present');let s;s=void 0!==o?new Map([...Object.entries(o),...a.entries()]):a;for(const a of t.crit){if(!s.has(a))throw new w(`Extension Header Parameter "${a}" is not recognized`);if(void 0===n[a])throw new e(`Extension Header Parameter "${a}" is missing`);if(s.get(a)&&void 0===t[a])throw new e(`Extension Header Parameter "${a}" MUST be integrity protected`)}return new Set(t.crit)}(x,new Map([["b64",!0]]),o?.crit,t,n).has("b64")&&(s=t.b64,"boolean"!=typeof s))throw new x('The "b64" (base64url-encode payload) Header Parameter must be a boolean');const{alg:i}=n;if("string"!=typeof i||!i)throw new x('JWS "alg" (Algorithm) Header Parameter missing or invalid');const r=o&&((e,a)=>{if(void 0!==a&&(!Array.isArray(a)||a.some((e=>"string"!=typeof e))))throw new TypeError(`"${e}" option must be an array of strings`);if(a)return new Set(a)})("algorithms",o.algorithms);if(r&&!r.has(i))throw new v('"alg" (Algorithm) Header Parameter value not allowed');if(s){if("string"!=typeof e.payload)throw new x("JWS Payload must be a string")}else if("string"!=typeof e.payload&&!(e.payload instanceof Uint8Array))throw new x("JWS Payload must be a string or an Uint8Array instance");let c=!1;"function"==typeof a?(a=await a(t,e),c=!0,ee(i,a,"verify"),J(a)&&(a=await T(a,i))):ee(i,a,"verify");const u=function(...e){const a=e.reduce(((e,{length:a})=>e+a),0),o=new Uint8Array(a);let t=0;for(const a of e)o.set(a,t),t+=a.length;return o}(m.encode(e.protected??""),m.encode("."),"string"==typeof e.payload?m.encode(e.payload):e.payload);let l,d;try{l=g(e.signature)}catch{throw new x("Failed to base64url decode the signature")}if(!await Q(i,a,l,u))throw new A;if(s)try{d=g(e.payload)}catch{throw new x("Failed to base64url decode the payload")}else d="string"==typeof e.payload?m.encode(e.payload):e.payload;const p={payload:d};return void 0!==e.protected&&(p.protectedHeader=t),void 0!==e.header&&(p.unprotectedHeader=e.header),c?{...p,key:a}:p}({payload:n,protected:t,signature:s},a,o),c={payload:r.payload,protectedHeader:r.protectedHeader};return"function"==typeof a?{...c,key:r.key}:c}const oe=/^(\+|\-)? ?(\d+|\d+\.\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)(?: (ago|from now))?$/i,te=e=>{const a=oe.exec(e);if(!a||a[4]&&a[1])throw new TypeError("Invalid time period format");const o=parseFloat(a[2]);let t;switch(a[3].toLowerCase()){case"sec":case"secs":case"second":case"seconds":case"s":t=Math.round(o);break;case"minute":case"minutes":case"min":case"mins":case"m":t=Math.round(60*o);break;case"hour":case"hours":case"hr":case"hrs":case"h":t=Math.round(3600*o);break;case"day":case"days":case"d":t=Math.round(86400*o);break;case"week":case"weeks":case"w":t=Math.round(604800*o);break;default:t=Math.round(31557600*o)}return"-"===a[1]||"ago"===a[4]?-t:t},ne=e=>e.toLowerCase().replace(/^application\//,""),se=(e,a,o={})=>{let t;try{t=JSON.parse(h.decode(a))}catch{}if(!R(t))throw new j("JWT Claims Set must be a top-level JSON object");const{typ:n}=o;if(n&&("string"!=typeof e.typ||ne(e.typ)!==ne(n)))throw new f('unexpected "typ" JWT header value',t,"typ","check_failed");const{requiredClaims:s=[],issuer:i,subject:r,audience:c,maxTokenAge:u}=o,l=[...s];void 0!==u&&l.push("iat"),void 0!==c&&l.push("aud"),void 0!==r&&l.push("sub"),void 0!==i&&l.push("iss");for(const e of new Set(l.reverse()))if(!(e in t))throw new f(`missing required "${e}" claim`,t,e,"missing");if(i&&!(Array.isArray(i)?i:[i]).includes(t.iss))throw new f('unexpected "iss" claim value',t,"iss","check_failed");if(r&&t.sub!==r)throw new f('unexpected "sub" claim value',t,"sub","check_failed");if(c&&(m="string"==typeof c?[c]:c,!("string"==typeof(d=t.aud)?m.includes(d):Array.isArray(d)&&m.some(Set.prototype.has.bind(new Set(d))))))throw new f('unexpected "aud" claim value',t,"aud","check_failed");var d,m;let g;switch(typeof o.clockTolerance){case"string":g=te(o.clockTolerance);break;case"number":g=o.clockTolerance;break;case"undefined":g=0;break;default:throw new TypeError("Invalid clockTolerance option type")}const{currentDate:p}=o,k=(b=p||new Date,Math.floor(b.getTime()/1e3));var b;if((void 0!==t.iat||u)&&"number"!=typeof t.iat)throw new f('"iat" claim must be a number',t,"iat","invalid");if(void 0!==t.nbf){if("number"!=typeof t.nbf)throw new f('"nbf" claim must be a number',t,"nbf","invalid");if(t.nbf>k+g)throw new f('"nbf" claim timestamp check failed',t,"nbf","check_failed")}if(void 0!==t.exp){if("number"!=typeof t.exp)throw new f('"exp" claim must be a number',t,"exp","invalid");if(t.exp<=k-g)throw new y('"exp" claim timestamp check failed',t,"exp","check_failed")}if(u){const e=k-t.iat;if(e-g>("number"==typeof u?u:te(u)))throw new y('"iat" claim timestamp check failed (too far in the past)',t,"iat","check_failed");if(e<0-g)throw new f('"iat" claim timestamp check failed (it should be in the past)',t,"iat","check_failed")}return t};async function ie(e,a,o){const t=await ae(e,a,o);if(t.protectedHeader.crit?.includes("b64")&&!1===t.protectedHeader.b64)throw new j("JWTs MUST NOT use unencoded payload");const n={payload:se(t.protectedHeader,t.payload,o),protectedHeader:t.protectedHeader};return"function"==typeof a?{...n,key:t.key}:n}var re=o(285),ce=o.n(re);const ue=(e,a)=>{const o=e.slice(),t=[];let n=a;for(;0!==o.length;){const e=o.pop(),a=e.toLowerCase();if(n.children.has("*")){if(n.children.has("!"+a))break;n=n.children.get("*")}else{if(!1===n.children.has(a))break;n=n.children.get(a)}t.unshift(e)}return t},le="[a-fA-F\\d:]",de=e=>e&&e.includeBoundaries?`(?:(?<=\\s|^)(?=${le})|(?<=${le})(?=\\s|$))`:"",me="(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}",he="[a-fA-F\\d]{1,4}",ge=`\n(?:\n(?:${he}:){7}(?:${he}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:${he}:){6}(?:${me}|:${he}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:${he}:){5}(?::${me}|(?::${he}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:${he}:){4}(?:(?::${he}){0,1}:${me}|(?::${he}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:${he}:){3}(?:(?::${he}){0,2}:${me}|(?::${he}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:${he}:){2}(?:(?::${he}){0,3}:${me}|(?::${he}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:${he}:){1}(?:(?::${he}){0,4}:${me}|(?::${he}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::${he}){0,5}:${me}|(?::${he}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n`.replace(/\s*\/\/.*$/gm,"").replace(/\n/g,"").trim(),pe=new RegExp(`(?:^${me}$)|(?:^${ge}$)`),ke=new RegExp(`^${me}$`),be=new RegExp(`^${ge}$`),fe=e=>e&&e.exact?pe:new RegExp(`(?:${de(e)}${me}${de(e)})|(?:${de(e)}${ge}${de(e)})`,"g");fe.v4=e=>e&&e.exact?ke:new RegExp(`${de(e)}${me}${de(e)}`,"g"),fe.v6=e=>e&&e.exact?be:new RegExp(`${de(e)}${ge}${de(e)}`,"g");const ye=fe,{toString:ve}=Object.prototype,we={global:"g",ignoreCase:"i",multiline:"m",dotAll:"s",sticky:"y",unicode:"u"};function xe(e,a,{timeout:o}={}){try{return function(e){const a=(...a)=>e(...a);return Object.defineProperty(a,"name",{value:`functionTimeout(${e.name||"<anonymous>"})`,configurable:!0}),a}((()=>function(e,a={}){if(o=e,"[object RegExp]"!==ve.call(o))throw new TypeError("Expected a RegExp instance");var o;const t=Object.keys(we).map((o=>("boolean"==typeof a[o]?a[o]:e[o])?we[o]:"")).join(""),n=new RegExp(a.source||e.source,t);return n.lastIndex="number"==typeof a.lastIndex?a.lastIndex:e.lastIndex,n}(e).test(a)))()}catch(e){throw e}}const je={timeout:400};function ze(e){return function(e){return!(e.length>45)&&xe(ye.v6({exact:!0}),e,je)}(e)?6:function(e){return!(e.length>15)&&xe(ye.v4({exact:!0}),e,je)}(e)?4:void 0}const Se=new TextEncoder;var Ee,Ae,_e;!function(e){e.Lax="LAX",e.Strict="STRICT"}(Ee||(Ee={})),function(e){e.NoHostname="NO_HOSTNAME",e.DomainMaxLength="DOMAIN_MAX_LENGTH",e.LabelMinLength="LABEL_MIN_LENGTH",e.LabelMaxLength="LABEL_MAX_LENGTH",e.LabelInvalidCharacter="LABEL_INVALID_CHARACTER",e.LastLabelInvalid="LAST_LABEL_INVALID"}(Ae||(Ae={})),function(e){e.ValidIp="VALID_IP",e.ValidDomain="VALID_DOMAIN",e.Error="ERROR"}(_e||(_e={}));const Re=e=>({type:Ae.NoHostname,message:`The given input ${String(e)} does not look like a hostname.`,column:1}),Te=(e,a)=>{const o=e.length;return{type:Ae.LabelMinLength,message:`Label "${e}" is too short. Label is ${o} octets long but should be at least 1.`,column:a}},qe=(e,a)=>{const o=e.length;return{type:Ae.LabelMaxLength,message:`Label "${e}" is too long. Label is ${o} octets long but should not be longer than 63.`,column:a}},Ie=(e,a,o)=>({type:Ae.LabelInvalidCharacter,message:`Label "${e}" contains invalid character "${a}" at column ${o}.`,column:o}),Ce={[Ee.Lax]:e=>{const a=[];let o=1;for(const t of e){const e=Se.encode(t);e.length<1?a.push(Te(t,o)):e.length>63&&a.push(qe(t,o)),o+=t.length+1}return a},[Ee.Strict]:e=>{const a=[];let o,t=1;for(const n of e){const e=/[^\da-z-]/i.exec(n);e&&a.push(Ie(n,e[0],e.index+1)),n.startsWith("-")?a.push(Ie(n,"-",t)):n.endsWith("-")&&a.push(Ie(n,"-",t+n.length-1)),n.length<1?a.push(Te(n,t)):n.length>63&&a.push(qe(n,t)),t+=n.length+1,o=n}return void 0!==o&&!1===/[a-z-]/iu.test(o)&&a.push(((e,a)=>({type:Ae.LabelInvalidCharacter,message:`Last label "${e}" must not be all-numeric.`,column:a}))(o,t-o.length-1)),a}},Pe=Symbol("ROOT"),Le=Symbol("CHILD"),Oe=e=>{const a={type:Pe,children:new Map};let o="",t=a,n=a;const s=()=>{n=((e,a)=>{let o=e.children.get(a);return void 0===o&&(o={type:Le,label:a,children:new Map,parent:e},e.children.set(a,o)),o})(t,o),o=""};for(let i=0;i<e.length;i++){const r=e.charAt(i);switch(r){case",":s();continue;case">":s(),t=n;continue;case"|":s(),t=a;continue;case"<":if(t.type===Pe)throw new Error(`Error in serialized trie at position ${i}: Cannot go up, current parent node is already root`);s(),t=t.parent;continue}o+=r}return""!==o&&s(),a},Ue=["localhost","local","example","invalid","test"];var Ne;!function(e){e.Invalid="INVALID",e.Ip="IP",e.Reserved="RESERVED",e.NotListed="NOT_LISTED",e.Listed="LISTED"}(Ne||(Ne={}));const De=(e,a)=>a>=0&&a<e.length?e[a]:void 0,Ve=(e,a)=>({subDomains:e.slice(0,Math.max(0,a)),domain:De(e,a),topLevelDomains:e.slice(a+1)});let We,Me;const He=(e,a)=>{const o=((e,a={})=>{if("string"!=typeof e)return{type:_e.Error,errors:[Re(e)]};if(""===e)return{type:_e.ValidDomain,domain:e,labels:[]};const o=e.replace(/^\[|]$/g,""),t=ze(o);if(void 0!==t)return{type:_e.ValidIp,ip:o,ipVersion:t};const n="."===e.charAt(e.length-1)?e.slice(0,-1):e,s=(new TextEncoder).encode(n);if(s.length>253)return{type:_e.Error,errors:[(i=e,r=s.length,{type:Ae.DomainMaxLength,message:`Domain "${i}" is too long. Domain is ${r} octets long but should not be longer than 253.`,column:r})]};var i,r;const c=n.split("."),{validation:u=Ee.Strict}=a,l=Ce[u](c);return l.length>0?{type:_e.Error,errors:l}:{type:_e.ValidDomain,domain:e,labels:c}})(e,a);if(o.type===_e.Error)return{type:Ne.Invalid,hostname:e,errors:o.errors};if(o.type===_e.ValidIp)return{type:Ne.Ip,hostname:o.ip,ipVersion:o.ipVersion};const{labels:t,domain:n}=o;if(""===e||Ue.includes(t[t.length-1]))return{type:Ne.Reserved,hostname:n,labels:t};We=null!=We?We:Oe("ac>com,edu,gov,net,mil,org<ad>nom<ae>co,net,org,sch,ac,gov,mil<aero>airline,airport,accident-investigation,accident-prevention,aerobatic,aeroclub,aerodrome,agents,air-surveillance,air-traffic-control,aircraft,airtraffic,ambulance,association,author,ballooning,broker,caa,cargo,catering,certification,championship,charter,civilaviation,club,conference,consultant,consulting,control,council,crew,design,dgca,educator,emergency,engine,engineer,entertainment,equipment,exchange,express,federation,flight,freight,fuel,gliding,government,groundhandling,group,hanggliding,homebuilt,insurance,journal,journalist,leasing,logistics,magazine,maintenance,marketplace,media,microlight,modelling,navigation,parachuting,paragliding,passenger-association,pilot,press,production,recreation,repbody,res,research,rotorcraft,safety,scientist,services,show,skydiving,software,student,taxi,trader,trading,trainer,union,workinggroup,works<af>gov,com,org,net,edu<ag>com,org,net,co,nom<ai>off,com,net,org<al>com,edu,gov,mil,net,org<am>co,com,commune,net,org<ao>ed,gv,og,co,pb,it<aq,ar>bet,com,coop,edu,gob,gov,int,mil,musica,mutual,net,org,senasa,tur<arpa>e164,in-addr,ip6,iris,uri,urn<as>gov<asia,at>ac>sth<co,gv,or<au>com,net,org,edu>act,catholic,nsw>schools<nt,qld,sa,tas,vic,wa<gov>qld,sa,tas,vic,wa<asn,id,info,conf,oz,act,nsw,nt,qld,sa,tas,vic,wa<aw>com<ax,az>com,net,int,gov,org,edu,info,pp,mil,name,pro,biz<ba>com,edu,gov,mil,net,org<bb>biz,co,com,edu,gov,info,net,org,store,tv<bd>*<be>ac<bf>gov<bg>a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,0,1,2,3,4,5,6,7,8,9<bh>com,edu,net,org,gov<bi>co,com,edu,or,org<biz,bj>africa,agro,architectes,assur,avocats,co,com,eco,econo,edu,info,loisirs,money,net,org,ote,resto,restaurant,tourism,univ<bm>com,edu,gov,net,org<bn>com,edu,gov,net,org<bo>com,edu,gob,int,org,net,mil,tv,web,academia,agro,arte,blog,bolivia,ciencia,cooperativa,democracia,deporte,ecologia,economia,empresa,indigena,industria,info,medicina,movimiento,musica,natural,nombre,noticias,patria,politica,profesional,plurinacional,pueblo,revista,salud,tecnologia,tksat,transporte,wiki<br>9guacu,abc,adm,adv,agr,aju,am,anani,aparecida,app,arq,art,ato,b,barueri,belem,bhz,bib,bio,blog,bmd,boavista,bsb,campinagrande,campinas,caxias,cim,cng,cnt,com,contagem,coop,coz,cri,cuiaba,curitiba,def,des,det,dev,ecn,eco,edu,emp,enf,eng,esp,etc,eti,far,feira,flog,floripa,fm,fnd,fortal,fot,foz,fst,g12,geo,ggf,goiania,gov>ac,al,am,ap,ba,ce,df,es,go,ma,mg,ms,mt,pa,pb,pe,pi,pr,rj,rn,ro,rr,rs,sc,se,sp,to<gru,imb,ind,inf,jab,jampa,jdf,joinville,jor,jus,leg,lel,log,londrina,macapa,maceio,manaus,maringa,mat,med,mil,morena,mp,mus,natal,net,niteroi,nom>*<not,ntr,odo,ong,org,osasco,palmas,poa,ppg,pro,psc,psi,pvh,qsl,radio,rec,recife,rep,ribeirao,rio,riobranco,riopreto,salvador,sampa,santamaria,santoandre,saobernardo,saogonca,seg,sjc,slg,slz,sorocaba,srv,taxi,tc,tec,teo,the,tmp,trd,tur,tv,udi,vet,vix,vlog,wiki,zlg<bs>com,net,org,edu,gov<bt>com,edu,gov,net,org<bv,bw>co,org<by>gov,mil,com,of<bz>com,net,org,edu,gov<ca>ab,bc,mb,nb,nf,nl,ns,nt,nu,on,pe,qc,sk,yk,gc<cat,cc,cd>gov<cf,cg,ch,ci>org,or,com,co,edu,ed,ac,net,go,asso,xn--aroport-bya,int,presse,md,gouv<ck>*,!www<cl>co,gob,gov,mil<cm>co,com,gov,net<cn>ac,com,edu,gov,net,org,mil,xn--55qx5d,xn--io0a7i,xn--od0alg,ah,bj,cq,fj,gd,gs,gz,gx,ha,hb,he,hi,hl,hn,jl,js,jx,ln,nm,nx,qh,sc,sd,sh,sn,sx,tj,xj,xz,yn,zj,hk,mo,tw<co>arts,com,edu,firm,gov,info,int,mil,net,nom,org,rec,web<com,coop,cr>ac,co,ed,fi,go,or,sa<cu>com,edu,org,net,gov,inf<cv>com,edu,int,nome,org<cw>com,edu,net,org<cx>gov<cy>ac,biz,com,ekloges,gov,ltd,mil,net,org,press,pro,tm<cz,de,dj,dk,dm>com,net,org,edu,gov<do>art,com,edu,gob,gov,mil,net,org,sld,web<dz>art,asso,com,edu,gov,org,net,pol,soc,tm<ec>com,info,net,fin,k12,med,pro,org,edu,gov,gob,mil<edu,ee>edu,gov,riik,lib,med,com,pri,aip,org,fie<eg>com,edu,eun,gov,mil,name,net,org,sci<er>*<es>com,nom,org,gob,edu<et>com,gov,org,edu,biz,name,info,net<eu,fi>aland<fj>ac,biz,com,gov,info,mil,name,net,org,pro<fk>*<fm>com,edu,net,org<fo,fr>asso,com,gouv,nom,prd,tm,avoues,cci,greta,huissier-justice<ga,gb,gd>edu,gov<ge>com,edu,gov,org,mil,net,pvt<gf,gg>co,net,org<gh>com,edu,gov,org,mil<gi>com,ltd,gov,mod,edu,org<gl>co,com,edu,net,org<gm,gn>ac,com,edu,gov,org,net<gov,gp>com,net,mobi,edu,org,asso<gq,gr>com,edu,net,org,gov<gs,gt>com,edu,gob,ind,mil,net,org<gu>com,edu,gov,guam,info,net,org,web<gw,gy>co,com,edu,gov,net,org<hk>com,edu,gov,idv,net,org,xn--55qx5d,xn--wcvs22d,xn--lcvr32d,xn--mxtq1m,xn--gmqw5a,xn--ciqpn,xn--gmq050i,xn--zf0avx,xn--io0a7i,xn--mk0axi,xn--od0alg,xn--od0aq3b,xn--tn0ag,xn--uc0atv,xn--uc0ay4a<hm,hn>com,edu,org,net,mil,gob<hr>iz,from,name,com<ht>com,shop,firm,info,adult,net,pro,org,med,art,coop,pol,asso,edu,rel,gouv,perso<hu>co,info,org,priv,sport,tm,2000,agrar,bolt,casino,city,erotica,erotika,film,forum,games,hotel,ingatlan,jogasz,konyvelo,lakas,media,news,reklam,sex,shop,suli,szex,tozsde,utazas,video<id>ac,biz,co,desa,go,mil,my,net,or,ponpes,sch,web<ie>gov<il>ac,co,gov,idf,k12,muni,net,org<xn--4dbrk0ce>xn--4dbgdty6c,xn--5dbhl8d,xn--8dbq2a,xn--hebda8b<im>ac,co>ltd,plc<com,net,org,tt,tv<in>5g,6g,ac,ai,am,bihar,biz,business,ca,cn,co,com,coop,cs,delhi,dr,edu,er,firm,gen,gov,gujarat,ind,info,int,internet,io,me,mil,net,nic,org,pg,post,pro,res,travel,tv,uk,up,us<info,int>eu<io>com<iq>gov,edu,mil,com,org,net<ir>ac,co,gov,id,net,org,sch,xn--mgba3a4f16a,xn--mgba3a4fra<is>net,com,edu,gov,org,int<it>gov,edu,abr,abruzzo,aosta-valley,aostavalley,bas,basilicata,cal,calabria,cam,campania,emilia-romagna,emiliaromagna,emr,friuli-v-giulia,friuli-ve-giulia,friuli-vegiulia,friuli-venezia-giulia,friuli-veneziagiulia,friuli-vgiulia,friuliv-giulia,friulive-giulia,friulivegiulia,friulivenezia-giulia,friuliveneziagiulia,friulivgiulia,fvg,laz,lazio,lig,liguria,lom,lombardia,lombardy,lucania,mar,marche,mol,molise,piedmont,piemonte,pmn,pug,puglia,sar,sardegna,sardinia,sic,sicilia,sicily,taa,tos,toscana,trentin-sud-tirol,xn--trentin-sd-tirol-rzb,trentin-sudtirol,xn--trentin-sdtirol-7vb,trentin-sued-tirol,trentin-suedtirol,trentino-a-adige,trentino-aadige,trentino-alto-adige,trentino-altoadige,trentino-s-tirol,trentino-stirol,trentino-sud-tirol,xn--trentino-sd-tirol-c3b,trentino-sudtirol,xn--trentino-sdtirol-szb,trentino-sued-tirol,trentino-suedtirol,trentino,trentinoa-adige,trentinoaadige,trentinoalto-adige,trentinoaltoadige,trentinos-tirol,trentinostirol,trentinosud-tirol,xn--trentinosd-tirol-rzb,trentinosudtirol,xn--trentinosdtirol-7vb,trentinosued-tirol,trentinosuedtirol,trentinsud-tirol,xn--trentinsd-tirol-6vb,trentinsudtirol,xn--trentinsdtirol-nsb,trentinsued-tirol,trentinsuedtirol,tuscany,umb,umbria,val-d-aosta,val-daosta,vald-aosta,valdaosta,valle-aosta,valle-d-aosta,valle-daosta,valleaosta,valled-aosta,valledaosta,vallee-aoste,xn--valle-aoste-ebb,vallee-d-aoste,xn--valle-d-aoste-ehb,valleeaoste,xn--valleaoste-e7a,valleedaoste,xn--valledaoste-ebb,vao,vda,ven,veneto,ag,agrigento,al,alessandria,alto-adige,altoadige,an,ancona,andria-barletta-trani,andria-trani-barletta,andriabarlettatrani,andriatranibarletta,ao,aosta,aoste,ap,aq,aquila,ar,arezzo,ascoli-piceno,ascolipiceno,asti,at,av,avellino,ba,balsan-sudtirol,xn--balsan-sdtirol-nsb,balsan-suedtirol,balsan,bari,barletta-trani-andria,barlettatraniandria,belluno,benevento,bergamo,bg,bi,biella,bl,bn,bo,bologna,bolzano-altoadige,bolzano,bozen-sudtirol,xn--bozen-sdtirol-2ob,bozen-suedtirol,bozen,br,brescia,brindisi,bs,bt,bulsan-sudtirol,xn--bulsan-sdtirol-nsb,bulsan-suedtirol,bulsan,bz,ca,cagliari,caltanissetta,campidano-medio,campidanomedio,campobasso,carbonia-iglesias,carboniaiglesias,carrara-massa,carraramassa,caserta,catania,catanzaro,cb,ce,cesena-forli,xn--cesena-forl-mcb,cesenaforli,xn--cesenaforl-i8a,ch,chieti,ci,cl,cn,co,como,cosenza,cr,cremona,crotone,cs,ct,cuneo,cz,dell-ogliastra,dellogliastra,en,enna,fc,fe,fermo,ferrara,fg,fi,firenze,florence,fm,foggia,forli-cesena,xn--forl-cesena-fcb,forlicesena,xn--forlcesena-c8a,fr,frosinone,ge,genoa,genova,go,gorizia,gr,grosseto,iglesias-carbonia,iglesiascarbonia,im,imperia,is,isernia,kr,la-spezia,laquila,laspezia,latina,lc,le,lecce,lecco,li,livorno,lo,lodi,lt,lu,lucca,macerata,mantova,massa-carrara,massacarrara,matera,mb,mc,me,medio-campidano,mediocampidano,messina,mi,milan,milano,mn,mo,modena,monza-brianza,monza-e-della-brianza,monza,monzabrianza,monzaebrianza,monzaedellabrianza,ms,mt,na,naples,napoli,no,novara,nu,nuoro,og,ogliastra,olbia-tempio,olbiatempio,or,oristano,ot,pa,padova,padua,palermo,parma,pavia,pc,pd,pe,perugia,pesaro-urbino,pesarourbino,pescara,pg,pi,piacenza,pisa,pistoia,pn,po,pordenone,potenza,pr,prato,pt,pu,pv,pz,ra,ragusa,ravenna,rc,re,reggio-calabria,reggio-emilia,reggiocalabria,reggioemilia,rg,ri,rieti,rimini,rm,rn,ro,roma,rome,rovigo,sa,salerno,sassari,savona,si,siena,siracusa,so,sondrio,sp,sr,ss,suedtirol,xn--sdtirol-n2a,sv,ta,taranto,te,tempio-olbia,tempioolbia,teramo,terni,tn,to,torino,tp,tr,trani-andria-barletta,trani-barletta-andria,traniandriabarletta,tranibarlettaandria,trapani,trento,treviso,trieste,ts,turin,tv,ud,udine,urbino-pesaro,urbinopesaro,va,varese,vb,vc,ve,venezia,venice,verbania,vercelli,verona,vi,vibo-valentia,vibovalentia,vicenza,viterbo,vr,vs,vt,vv<je>co,net,org<jm>*<jo>com,org,net,edu,sch,gov,mil,name<jobs,jp>ac,ad,co,ed,go,gr,lg,ne,or,aichi>aisai,ama,anjo,asuke,chiryu,chita,fuso,gamagori,handa,hazu,hekinan,higashiura,ichinomiya,inazawa,inuyama,isshiki,iwakura,kanie,kariya,kasugai,kira,kiyosu,komaki,konan,kota,mihama,miyoshi,nishio,nisshin,obu,oguchi,oharu,okazaki,owariasahi,seto,shikatsu,shinshiro,shitara,tahara,takahama,tobishima,toei,togo,tokai,tokoname,toyoake,toyohashi,toyokawa,toyone,toyota,tsushima,yatomi<akita>akita,daisen,fujisato,gojome,hachirogata,happou,higashinaruse,honjo,honjyo,ikawa,kamikoani,kamioka,katagami,kazuno,kitaakita,kosaka,kyowa,misato,mitane,moriyoshi,nikaho,noshiro,odate,oga,ogata,semboku,yokote,yurihonjo<aomori>aomori,gonohe,hachinohe,hashikami,hiranai,hirosaki,itayanagi,kuroishi,misawa,mutsu,nakadomari,noheji,oirase,owani,rokunohe,sannohe,shichinohe,shingo,takko,towada,tsugaru,tsuruta<chiba>abiko,asahi,chonan,chosei,choshi,chuo,funabashi,futtsu,hanamigawa,ichihara,ichikawa,ichinomiya,inzai,isumi,kamagaya,kamogawa,kashiwa,katori,katsuura,kimitsu,kisarazu,kozaki,kujukuri,kyonan,matsudo,midori,mihama,minamiboso,mobara,mutsuzawa,nagara,nagareyama,narashino,narita,noda,oamishirasato,omigawa,onjuku,otaki,sakae,sakura,shimofusa,shirako,shiroi,shisui,sodegaura,sosa,tako,tateyama,togane,tohnosho,tomisato,urayasu,yachimata,yachiyo,yokaichiba,yokoshibahikari,yotsukaido<ehime>ainan,honai,ikata,imabari,iyo,kamijima,kihoku,kumakogen,masaki,matsuno,matsuyama,namikata,niihama,ozu,saijo,seiyo,shikokuchuo,tobe,toon,uchiko,uwajima,yawatahama<fukui>echizen,eiheiji,fukui,ikeda,katsuyama,mihama,minamiechizen,obama,ohi,ono,sabae,sakai,takahama,tsuruga,wakasa<fukuoka>ashiya,buzen,chikugo,chikuho,chikujo,chikushino,chikuzen,chuo,dazaifu,fukuchi,hakata,higashi,hirokawa,hisayama,iizuka,inatsuki,kaho,kasuga,kasuya,kawara,keisen,koga,kurate,kurogi,kurume,minami,miyako,miyama,miyawaka,mizumaki,munakata,nakagawa,nakama,nishi,nogata,ogori,okagaki,okawa,oki,omuta,onga,onojo,oto,saigawa,sasaguri,shingu,shinyoshitomi,shonai,soeda,sue,tachiarai,tagawa,takata,toho,toyotsu,tsuiki,ukiha,umi,usui,yamada,yame,yanagawa,yukuhashi<fukushima>aizubange,aizumisato,aizuwakamatsu,asakawa,bandai,date,fukushima,furudono,futaba,hanawa,higashi,hirata,hirono,iitate,inawashiro,ishikawa,iwaki,izumizaki,kagamiishi,kaneyama,kawamata,kitakata,kitashiobara,koori,koriyama,kunimi,miharu,mishima,namie,nango,nishiaizu,nishigo,okuma,omotego,ono,otama,samegawa,shimogo,shirakawa,showa,soma,sukagawa,taishin,tamakawa,tanagura,tenei,yabuki,yamato,yamatsuri,yanaizu,yugawa<gifu>anpachi,ena,gifu,ginan,godo,gujo,hashima,hichiso,hida,higashishirakawa,ibigawa,ikeda,kakamigahara,kani,kasahara,kasamatsu,kawaue,kitagata,mino,minokamo,mitake,mizunami,motosu,nakatsugawa,ogaki,sakahogi,seki,sekigahara,shirakawa,tajimi,takayama,tarui,toki,tomika,wanouchi,yamagata,yaotsu,yoro<gunma>annaka,chiyoda,fujioka,higashiagatsuma,isesaki,itakura,kanna,kanra,katashina,kawaba,kiryu,kusatsu,maebashi,meiwa,midori,minakami,naganohara,nakanojo,nanmoku,numata,oizumi,ora,ota,shibukawa,shimonita,shinto,showa,takasaki,takayama,tamamura,tatebayashi,tomioka,tsukiyono,tsumagoi,ueno,yoshioka<hiroshima>asaminami,daiwa,etajima,fuchu,fukuyama,hatsukaichi,higashihiroshima,hongo,jinsekikogen,kaita,kui,kumano,kure,mihara,miyoshi,naka,onomichi,osakikamijima,otake,saka,sera,seranishi,shinichi,shobara,takehara<hokkaido>abashiri,abira,aibetsu,akabira,akkeshi,asahikawa,ashibetsu,ashoro,assabu,atsuma,bibai,biei,bifuka,bihoro,biratori,chippubetsu,chitose,date,ebetsu,embetsu,eniwa,erimo,esan,esashi,fukagawa,fukushima,furano,furubira,haboro,hakodate,hamatonbetsu,hidaka,higashikagura,higashikawa,hiroo,hokuryu,hokuto,honbetsu,horokanai,horonobe,ikeda,imakane,ishikari,iwamizawa,iwanai,kamifurano,kamikawa,kamishihoro,kamisunagawa,kamoenai,kayabe,kembuchi,kikonai,kimobetsu,kitahiroshima,kitami,kiyosato,koshimizu,kunneppu,kuriyama,kuromatsunai,kushiro,kutchan,kyowa,mashike,matsumae,mikasa,minamifurano,mombetsu,moseushi,mukawa,muroran,naie,nakagawa,nakasatsunai,nakatombetsu,nanae,nanporo,nayoro,nemuro,niikappu,niki,nishiokoppe,noboribetsu,numata,obihiro,obira,oketo,okoppe,otaru,otobe,otofuke,otoineppu,oumu,ozora,pippu,rankoshi,rebun,rikubetsu,rishiri,rishirifuji,saroma,sarufutsu,shakotan,shari,shibecha,shibetsu,shikabe,shikaoi,shimamaki,shimizu,shimokawa,shinshinotsu,shintoku,shiranuka,shiraoi,shiriuchi,sobetsu,sunagawa,taiki,takasu,takikawa,takinoue,teshikaga,tobetsu,tohma,tomakomai,tomari,toya,toyako,toyotomi,toyoura,tsubetsu,tsukigata,urakawa,urausu,uryu,utashinai,wakkanai,wassamu,yakumo,yoichi<hyogo>aioi,akashi,ako,amagasaki,aogaki,asago,ashiya,awaji,fukusaki,goshiki,harima,himeji,ichikawa,inagawa,itami,kakogawa,kamigori,kamikawa,kasai,kasuga,kawanishi,miki,minamiawaji,nishinomiya,nishiwaki,ono,sanda,sannan,sasayama,sayo,shingu,shinonsen,shiso,sumoto,taishi,taka,takarazuka,takasago,takino,tamba,tatsuno,toyooka,yabu,yashiro,yoka,yokawa<ibaraki>ami,asahi,bando,chikusei,daigo,fujishiro,hitachi,hitachinaka,hitachiomiya,hitachiota,ibaraki,ina,inashiki,itako,iwama,joso,kamisu,kasama,kashima,kasumigaura,koga,miho,mito,moriya,naka,namegata,oarai,ogawa,omitama,ryugasaki,sakai,sakuragawa,shimodate,shimotsuma,shirosato,sowa,suifu,takahagi,tamatsukuri,tokai,tomobe,tone,toride,tsuchiura,tsukuba,uchihara,ushiku,yachiyo,yamagata,yawara,yuki<ishikawa>anamizu,hakui,hakusan,kaga,kahoku,kanazawa,kawakita,komatsu,nakanoto,nanao,nomi,nonoichi,noto,shika,suzu,tsubata,tsurugi,uchinada,wajima<iwate>fudai,fujisawa,hanamaki,hiraizumi,hirono,ichinohe,ichinoseki,iwaizumi,iwate,joboji,kamaishi,kanegasaki,karumai,kawai,kitakami,kuji,kunohe,kuzumaki,miyako,mizusawa,morioka,ninohe,noda,ofunato,oshu,otsuchi,rikuzentakata,shiwa,shizukuishi,sumita,tanohata,tono,yahaba,yamada<kagawa>ayagawa,higashikagawa,kanonji,kotohira,manno,marugame,mitoyo,naoshima,sanuki,tadotsu,takamatsu,tonosho,uchinomi,utazu,zentsuji<kagoshima>akune,amami,hioki,isa,isen,izumi,kagoshima,kanoya,kawanabe,kinko,kouyama,makurazaki,matsumoto,minamitane,nakatane,nishinoomote,satsumasendai,soo,tarumizu,yusui<kanagawa>aikawa,atsugi,ayase,chigasaki,ebina,fujisawa,hadano,hakone,hiratsuka,isehara,kaisei,kamakura,kiyokawa,matsuda,minamiashigara,miura,nakai,ninomiya,odawara,oi,oiso,sagamihara,samukawa,tsukui,yamakita,yamato,yokosuka,yugawara,zama,zushi<kochi>aki,geisei,hidaka,higashitsuno,ino,kagami,kami,kitagawa,kochi,mihara,motoyama,muroto,nahari,nakamura,nankoku,nishitosa,niyodogawa,ochi,okawa,otoyo,otsuki,sakawa,sukumo,susaki,tosa,tosashimizu,toyo,tsuno,umaji,yasuda,yusuhara<kumamoto>amakusa,arao,aso,choyo,gyokuto,kamiamakusa,kikuchi,kumamoto,mashiki,mifune,minamata,minamioguni,nagasu,nishihara,oguni,ozu,sumoto,takamori,uki,uto,yamaga,yamato,yatsushiro<kyoto>ayabe,fukuchiyama,higashiyama,ide,ine,joyo,kameoka,kamo,kita,kizu,kumiyama,kyotamba,kyotanabe,kyotango,maizuru,minami,minamiyamashiro,miyazu,muko,nagaokakyo,nakagyo,nantan,oyamazaki,sakyo,seika,tanabe,uji,ujitawara,wazuka,yamashina,yawata<mie>asahi,inabe,ise,kameyama,kawagoe,kiho,kisosaki,kiwa,komono,kumano,kuwana,matsusaka,meiwa,mihama,minamiise,misugi,miyama,nabari,shima,suzuka,tado,taiki,taki,tamaki,toba,tsu,udono,ureshino,watarai,yokkaichi<miyagi>furukawa,higashimatsushima,ishinomaki,iwanuma,kakuda,kami,kawasaki,marumori,matsushima,minamisanriku,misato,murata,natori,ogawara,ohira,onagawa,osaki,rifu,semine,shibata,shichikashuku,shikama,shiogama,shiroishi,tagajo,taiwa,tome,tomiya,wakuya,watari,yamamoto,zao<miyazaki>aya,ebino,gokase,hyuga,kadogawa,kawaminami,kijo,kitagawa,kitakata,kitaura,kobayashi,kunitomi,kushima,mimata,miyakonojo,miyazaki,morotsuka,nichinan,nishimera,nobeoka,saito,shiiba,shintomi,takaharu,takanabe,takazaki,tsuno<nagano>achi,agematsu,anan,aoki,asahi,azumino,chikuhoku,chikuma,chino,fujimi,hakuba,hara,hiraya,iida,iijima,iiyama,iizuna,ikeda,ikusaka,ina,karuizawa,kawakami,kiso,kisofukushima,kitaaiki,komagane,komoro,matsukawa,matsumoto,miasa,minamiaiki,minamimaki,minamiminowa,minowa,miyada,miyota,mochizuki,nagano,nagawa,nagiso,nakagawa,nakano,nozawaonsen,obuse,ogawa,okaya,omachi,omi,ookuwa,ooshika,otaki,otari,sakae,sakaki,saku,sakuho,shimosuwa,shinanomachi,shiojiri,suwa,suzaka,takagi,takamori,takayama,tateshina,tatsuno,togakushi,togura,tomi,ueda,wada,yamagata,yamanouchi,yasaka,yasuoka<nagasaki>chijiwa,futsu,goto,hasami,hirado,iki,isahaya,kawatana,kuchinotsu,matsuura,nagasaki,obama,omura,oseto,saikai,sasebo,seihi,shimabara,shinkamigoto,togitsu,tsushima,unzen<nara>ando,gose,heguri,higashiyoshino,ikaruga,ikoma,kamikitayama,kanmaki,kashiba,kashihara,katsuragi,kawai,kawakami,kawanishi,koryo,kurotaki,mitsue,miyake,nara,nosegawa,oji,ouda,oyodo,sakurai,sango,shimoichi,shimokitayama,shinjo,soni,takatori,tawaramoto,tenkawa,tenri,uda,yamatokoriyama,yamatotakada,yamazoe,yoshino<niigata>aga,agano,gosen,itoigawa,izumozaki,joetsu,kamo,kariwa,kashiwazaki,minamiuonuma,mitsuke,muika,murakami,myoko,nagaoka,niigata,ojiya,omi,sado,sanjo,seiro,seirou,sekikawa,shibata,tagami,tainai,tochio,tokamachi,tsubame,tsunan,uonuma,yahiko,yoita,yuzawa<oita>beppu,bungoono,bungotakada,hasama,hiji,himeshima,hita,kamitsue,kokonoe,kuju,kunisaki,kusu,oita,saiki,taketa,tsukumi,usa,usuki,yufu<okayama>akaiwa,asakuchi,bizen,hayashima,ibara,kagamino,kasaoka,kibichuo,kumenan,kurashiki,maniwa,misaki,nagi,niimi,nishiawakura,okayama,satosho,setouchi,shinjo,shoo,soja,takahashi,tamano,tsuyama,wake,yakage<okinawa>aguni,ginowan,ginoza,gushikami,haebaru,higashi,hirara,iheya,ishigaki,ishikawa,itoman,izena,kadena,kin,kitadaito,kitanakagusuku,kumejima,kunigami,minamidaito,motobu,nago,naha,nakagusuku,nakijin,nanjo,nishihara,ogimi,okinawa,onna,shimoji,taketomi,tarama,tokashiki,tomigusuku,tonaki,urasoe,uruma,yaese,yomitan,yonabaru,yonaguni,zamami<osaka>abeno,chihayaakasaka,chuo,daito,fujiidera,habikino,hannan,higashiosaka,higashisumiyoshi,higashiyodogawa,hirakata,ibaraki,ikeda,izumi,izumiotsu,izumisano,kadoma,kaizuka,kanan,kashiwara,katano,kawachinagano,kishiwada,kita,kumatori,matsubara,minato,minoh,misaki,moriguchi,neyagawa,nishi,nose,osakasayama,sakai,sayama,sennan,settsu,shijonawate,shimamoto,suita,tadaoka,taishi,tajiri,takaishi,takatsuki,tondabayashi,toyonaka,toyono,yao<saga>ariake,arita,fukudomi,genkai,hamatama,hizen,imari,kamimine,kanzaki,karatsu,kashima,kitagata,kitahata,kiyama,kouhoku,kyuragi,nishiarita,ogi,omachi,ouchi,saga,shiroishi,taku,tara,tosu,yoshinogari<saitama>arakawa,asaka,chichibu,fujimi,fujimino,fukaya,hanno,hanyu,hasuda,hatogaya,hatoyama,hidaka,higashichichibu,higashimatsuyama,honjo,ina,iruma,iwatsuki,kamiizumi,kamikawa,kamisato,kasukabe,kawagoe,kawaguchi,kawajima,kazo,kitamoto,koshigaya,kounosu,kuki,kumagaya,matsubushi,minano,misato,miyashiro,miyoshi,moroyama,nagatoro,namegawa,niiza,ogano,ogawa,ogose,okegawa,omiya,otaki,ranzan,ryokami,saitama,sakado,satte,sayama,shiki,shiraoka,soka,sugito,toda,tokigawa,tokorozawa,tsurugashima,urawa,warabi,yashio,yokoze,yono,yorii,yoshida,yoshikawa,yoshimi<shiga>aisho,gamo,higashiomi,hikone,koka,konan,kosei,koto,kusatsu,maibara,moriyama,nagahama,nishiazai,notogawa,omihachiman,otsu,ritto,ryuoh,takashima,takatsuki,torahime,toyosato,yasu<shimane>akagi,ama,gotsu,hamada,higashiizumo,hikawa,hikimi,izumo,kakinoki,masuda,matsue,misato,nishinoshima,ohda,okinoshima,okuizumo,shimane,tamayu,tsuwano,unnan,yakumo,yasugi,yatsuka<shizuoka>arai,atami,fuji,fujieda,fujikawa,fujinomiya,fukuroi,gotemba,haibara,hamamatsu,higashiizu,ito,iwata,izu,izunokuni,kakegawa,kannami,kawanehon,kawazu,kikugawa,kosai,makinohara,matsuzaki,minamiizu,mishima,morimachi,nishiizu,numazu,omaezaki,shimada,shimizu,shimoda,shizuoka,susono,yaizu,yoshida<tochigi>ashikaga,bato,haga,ichikai,iwafune,kaminokawa,kanuma,karasuyama,kuroiso,mashiko,mibu,moka,motegi,nasu,nasushiobara,nikko,nishikata,nogi,ohira,ohtawara,oyama,sakura,sano,shimotsuke,shioya,takanezawa,tochigi,tsuga,ujiie,utsunomiya,yaita<tokushima>aizumi,anan,ichiba,itano,kainan,komatsushima,matsushige,mima,minami,miyoshi,mugi,nakagawa,naruto,sanagochi,shishikui,tokushima,wajiki<tokyo>adachi,akiruno,akishima,aogashima,arakawa,bunkyo,chiyoda,chofu,chuo,edogawa,fuchu,fussa,hachijo,hachioji,hamura,higashikurume,higashimurayama,higashiyamato,hino,hinode,hinohara,inagi,itabashi,katsushika,kita,kiyose,kodaira,koganei,kokubunji,komae,koto,kouzushima,kunitachi,machida,meguro,minato,mitaka,mizuho,musashimurayama,musashino,nakano,nerima,ogasawara,okutama,ome,oshima,ota,setagaya,shibuya,shinagawa,shinjuku,suginami,sumida,tachikawa,taito,tama,toshima<tottori>chizu,hino,kawahara,koge,kotoura,misasa,nanbu,nichinan,sakaiminato,tottori,wakasa,yazu,yonago<toyama>asahi,fuchu,fukumitsu,funahashi,himi,imizu,inami,johana,kamiichi,kurobe,nakaniikawa,namerikawa,nanto,nyuzen,oyabe,taira,takaoka,tateyama,toga,tonami,toyama,unazuki,uozu,yamada<wakayama>arida,aridagawa,gobo,hashimoto,hidaka,hirogawa,inami,iwade,kainan,kamitonda,katsuragi,kimino,kinokawa,kitayama,koya,koza,kozagawa,kudoyama,kushimoto,mihama,misato,nachikatsuura,shingu,shirahama,taiji,tanabe,wakayama,yuasa,yura<yamagata>asahi,funagata,higashine,iide,kahoku,kaminoyama,kaneyama,kawanishi,mamurogawa,mikawa,murayama,nagai,nakayama,nanyo,nishikawa,obanazawa,oe,oguni,ohkura,oishida,sagae,sakata,sakegawa,shinjo,shirataka,shonai,takahata,tendo,tozawa,tsuruoka,yamagata,yamanobe,yonezawa,yuza<yamaguchi>abu,hagi,hikari,hofu,iwakuni,kudamatsu,mitou,nagato,oshima,shimonoseki,shunan,tabuse,tokuyama,toyota,ube,yuu<yamanashi>chuo,doshi,fuefuki,fujikawa,fujikawaguchiko,fujiyoshida,hayakawa,hokuto,ichikawamisato,kai,kofu,koshu,kosuge,minami-alps,minobu,nakamichi,nanbu,narusawa,nirasaki,nishikatsura,oshino,otsuki,showa,tabayama,tsuru,uenohara,yamanakako,yamanashi<xn--4pvxs,xn--vgu402c,xn--c3s14m,xn--f6qx53a,xn--8pvr4u,xn--uist22h,xn--djrs72d6uy,xn--mkru45i,xn--0trq7p7nn,xn--8ltr62k,xn--2m4a15e,xn--efvn9s,xn--32vp30h,xn--4it797k,xn--1lqs71d,xn--5rtp49c,xn--5js045d,xn--ehqz56n,xn--1lqs03n,xn--qqqt11m,xn--kbrq7o,xn--pssu33l,xn--ntsq17g,xn--uisz3g,xn--6btw5a,xn--1ctwo,xn--6orx2r,xn--rht61e,xn--rht27z,xn--djty4k,xn--nit225k,xn--rht3d,xn--klty5x,xn--kltx9a,xn--kltp7d,xn--uuwu58a,xn--zbx025d,xn--ntso0iqx3a,xn--elqq16h,xn--4it168d,xn--klt787d,xn--rny31h,xn--7t0a264c,xn--5rtq34k,xn--k7yn95e,xn--tor131o,xn--d5qv7z876c,kawasaki>*,!city<kitakyushu>*,!city<kobe>*,!city<nagoya>*,!city<sapporo>*,!city<sendai>*,!city<yokohama>*,!city<<ke>ac,co,go,info,me,mobi,ne,or,sc<kg>org,net,com,edu,gov,mil<kh>*<ki>edu,biz,net,org,gov,info,com<km>org,nom,gov,prd,tm,edu,mil,ass,com,coop,asso,presse,medecin,notaires,pharmaciens,veterinaire,gouv<kn>net,org,edu,gov<kp>com,edu,gov,org,rep,tra<kr>ac,co,es,go,hs,kg,mil,ms,ne,or,pe,re,sc,busan,chungbuk,chungnam,daegu,daejeon,gangwon,gwangju,gyeongbuk,gyeonggi,gyeongnam,incheon,jeju,jeonbuk,jeonnam,seoul,ulsan<kw>com,edu,emb,gov,ind,net,org<ky>com,edu,net,org<kz>org,edu,net,gov,mil,com<la>int,net,info,edu,gov,per,com,org<lb>com,edu,gov,net,org<lc>com,net,co,org,edu,gov<li,lk>gov,sch,net,int,com,org,edu,ngo,soc,web,ltd,assn,grp,hotel,ac<lr>com,edu,gov,org,net<ls>ac,biz,co,edu,gov,info,net,org,sc<lt>gov<lu,lv>com,edu,gov,org,mil,id,net,asn,conf<ly>com,net,gov,plc,edu,sch,med,org,id<ma>co,net,gov,org,ac,press<mc>tm,asso<md,me>co,net,org,edu,ac,gov,its,priv<mg>org,nom,gov,prd,tm,edu,mil,com,co<mh,mil,mk>com,org,net,edu,gov,inf,name<ml>com,edu,gouv,gov,net,org,presse<mm>*<mn>gov,edu,org<mo>com,net,org,edu,gov<mobi,mp,mq,mr>gov<ms>com,edu,gov,net,org<mt>com,edu,net,org<mu>com,net,org,gov,ac,co,or<museum,mv>aero,biz,com,coop,edu,gov,info,int,mil,museum,name,net,org,pro<mw>ac,biz,co,com,coop,edu,gov,int,museum,net,org<mx>com,org,gob,edu,net<my>biz,com,edu,gov,mil,name,net,org<mz>ac,adv,co,edu,gov,mil,net,org<na>info,pro,name,school,or,dr,us,mx,ca,in,cc,tv,ws,mobi,co,com,org<name,nc>asso,nom<ne,net,nf>com,net,per,rec,web,arts,firm,info,other,store<ng>com,edu,gov,i,mil,mobi,name,net,org,sch<ni>ac,biz,co,com,edu,gob,in,info,int,mil,net,nom,org,web<nl,no>fhs,vgs,fylkesbibl,folkebibl,museum,idrett,priv,mil,stat,dep,kommune,herad,aa>gs<ah>gs<bu>gs<fm>gs<hl>gs<hm>gs<jan-mayen>gs<mr>gs<nl>gs<nt>gs<of>gs<ol>gs<oslo>gs<rl>gs<sf>gs<st>gs<svalbard>gs<tm>gs<tr>gs<va>gs<vf>gs<akrehamn,xn--krehamn-dxa,algard,xn--lgrd-poac,arna,brumunddal,bryne,bronnoysund,xn--brnnysund-m8ac,drobak,xn--drbak-wua,egersund,fetsund,floro,xn--flor-jra,fredrikstad,hokksund,honefoss,xn--hnefoss-q1a,jessheim,jorpeland,xn--jrpeland-54a,kirkenes,kopervik,krokstadelva,langevag,xn--langevg-jxa,leirvik,mjondalen,xn--mjndalen-64a,mo-i-rana,mosjoen,xn--mosjen-eya,nesoddtangen,orkanger,osoyro,xn--osyro-wua,raholt,xn--rholt-mra,sandnessjoen,xn--sandnessjen-ogb,skedsmokorset,slattum,spjelkavik,stathelle,stavern,stjordalshalsen,xn--stjrdalshalsen-sqb,tananger,tranby,vossevangen,afjord,xn--fjord-lra,agdenes,al,xn--l-1fa,alesund,xn--lesund-hua,alstahaug,alta,xn--lt-liac,alaheadju,xn--laheadju-7ya,alvdal,amli,xn--mli-tla,amot,xn--mot-tla,andebu,andoy,xn--andy-ira,andasuolo,ardal,xn--rdal-poa,aremark,arendal,xn--s-1fa,aseral,xn--seral-lra,asker,askim,askvoll,askoy,xn--asky-ira,asnes,xn--snes-poa,audnedaln,aukra,aure,aurland,aurskog-holand,xn--aurskog-hland-jnb,austevoll,austrheim,averoy,xn--avery-yua,balestrand,ballangen,balat,xn--blt-elab,balsfjord,bahccavuotna,xn--bhccavuotna-k7a,bamble,bardu,beardu,beiarn,bajddar,xn--bjddar-pta,baidar,xn--bidr-5nac,berg,bergen,berlevag,xn--berlevg-jxa,bearalvahki,xn--bearalvhki-y4a,bindal,birkenes,bjarkoy,xn--bjarky-fya,bjerkreim,bjugn,bodo,xn--bod-2na,badaddja,xn--bdddj-mrabd,budejju,bokn,bremanger,bronnoy,xn--brnny-wuac,bygland,bykle,barum,xn--brum-voa,telemark>bo,xn--b-5ga<nordland>bo,xn--b-5ga,heroy,xn--hery-ira<bievat,xn--bievt-0qa,bomlo,xn--bmlo-gra,batsfjord,xn--btsfjord-9za,bahcavuotna,xn--bhcavuotna-s4a,dovre,drammen,drangedal,dyroy,xn--dyry-ira,donna,xn--dnna-gra,eid,eidfjord,eidsberg,eidskog,eidsvoll,eigersund,elverum,enebakk,engerdal,etne,etnedal,evenes,evenassi,xn--eveni-0qa01ga,evje-og-hornnes,farsund,fauske,fuossko,fuoisku,fedje,fet,finnoy,xn--finny-yua,fitjar,fjaler,fjell,flakstad,flatanger,flekkefjord,flesberg,flora,fla,xn--fl-zia,folldal,forsand,fosnes,frei,frogn,froland,frosta,frana,xn--frna-woa,froya,xn--frya-hra,fusa,fyresdal,forde,xn--frde-gra,gamvik,gangaviika,xn--ggaviika-8ya47h,gaular,gausdal,gildeskal,xn--gildeskl-g0a,giske,gjemnes,gjerdrum,gjerstad,gjesdal,gjovik,xn--gjvik-wua,gloppen,gol,gran,grane,granvin,gratangen,grimstad,grong,kraanghke,xn--kranghke-b0a,grue,gulen,hadsel,halden,halsa,hamar,hamaroy,habmer,xn--hbmer-xqa,hapmir,xn--hpmir-xqa,hammerfest,hammarfeasta,xn--hmmrfeasta-s4ac,haram,hareid,harstad,hasvik,aknoluokta,xn--koluokta-7ya57h,hattfjelldal,aarborte,haugesund,hemne,hemnes,hemsedal,more-og-romsdal>heroy,sande<xn--mre-og-romsdal-qqb>xn--hery-ira,sande<hitra,hjartdal,hjelmeland,hobol,xn--hobl-ira,hof,hol,hole,holmestrand,holtalen,xn--holtlen-hxa,hornindal,horten,hurdal,hurum,hvaler,hyllestad,hagebostad,xn--hgebostad-g3a,hoyanger,xn--hyanger-q1a,hoylandet,xn--hylandet-54a,ha,xn--h-2fa,ibestad,inderoy,xn--indery-fya,iveland,jevnaker,jondal,jolster,xn--jlster-bya,karasjok,karasjohka,xn--krjohka-hwab49j,karlsoy,galsa,xn--gls-elac,karmoy,xn--karmy-yua,kautokeino,guovdageaidnu,klepp,klabu,xn--klbu-woa,kongsberg,kongsvinger,kragero,xn--krager-gya,kristiansand,kristiansund,krodsherad,xn--krdsherad-m8a,kvalsund,rahkkeravju,xn--rhkkervju-01af,kvam,kvinesdal,kvinnherad,kviteseid,kvitsoy,xn--kvitsy-fya,kvafjord,xn--kvfjord-nxa,giehtavuoatna,kvanangen,xn--kvnangen-k0a,navuotna,xn--nvuotna-hwa,kafjord,xn--kfjord-iua,gaivuotna,xn--givuotna-8ya,larvik,lavangen,lavagis,loabat,xn--loabt-0qa,lebesby,davvesiida,leikanger,leirfjord,leka,leksvik,lenvik,leangaviika,xn--leagaviika-52b,lesja,levanger,lier,lierne,lillehammer,lillesand,lindesnes,lindas,xn--linds-pra,lom,loppa,lahppi,xn--lhppi-xqa,lund,lunner,luroy,xn--lury-ira,luster,lyngdal,lyngen,ivgu,lardal,lerdal,xn--lrdal-sra,lodingen,xn--ldingen-q1a,lorenskog,xn--lrenskog-54a,loten,xn--lten-gra,malvik,masoy,xn--msy-ula0h,muosat,xn--muost-0qa,mandal,marker,marnardal,masfjorden,meland,meldal,melhus,meloy,xn--mely-ira,meraker,xn--merker-kua,moareke,xn--moreke-jua,midsund,midtre-gauldal,modalen,modum,molde,moskenes,moss,mosvik,malselv,xn--mlselv-iua,malatvuopmi,xn--mlatvuopmi-s4a,namdalseid,aejrie,namsos,namsskogan,naamesjevuemie,xn--nmesjevuemie-tcba,laakesvuemie,nannestad,narvik,narviika,naustdal,nedre-eiker,akershus>nes<buskerud>nes<nesna,nesodden,nesseby,unjarga,xn--unjrga-rta,nesset,nissedal,nittedal,nord-aurdal,nord-fron,nord-odal,norddal,nordkapp,davvenjarga,xn--davvenjrga-y4a,nordre-land,nordreisa,raisa,xn--risa-5na,nore-og-uvdal,notodden,naroy,xn--nry-yla5g,notteroy,xn--nttery-byae,odda,oksnes,xn--ksnes-uua,oppdal,oppegard,xn--oppegrd-ixa,orkdal,orland,xn--rland-uua,orskog,xn--rskog-uua,orsta,xn--rsta-fra,hedmark>os,valer,xn--vler-qoa<hordaland>os<osen,osteroy,xn--ostery-fya,ostre-toten,xn--stre-toten-zcb,overhalla,ovre-eiker,xn--vre-eiker-k8a,oyer,xn--yer-zna,oygarden,xn--ygarden-p1a,oystre-slidre,xn--ystre-slidre-ujb,porsanger,porsangu,xn--porsgu-sta26f,porsgrunn,radoy,xn--rady-ira,rakkestad,rana,ruovat,randaberg,rauma,rendalen,rennebu,rennesoy,xn--rennesy-v1a,rindal,ringebu,ringerike,ringsaker,rissa,risor,xn--risr-ira,roan,rollag,rygge,ralingen,xn--rlingen-mxa,rodoy,xn--rdy-0nab,romskog,xn--rmskog-bya,roros,xn--rros-gra,rost,xn--rst-0na,royken,xn--ryken-vua,royrvik,xn--ryrvik-bya,rade,xn--rde-ula,salangen,siellak,saltdal,salat,xn--slt-elab,xn--slat-5na,samnanger,vestfold>sande<sandefjord,sandnes,sandoy,xn--sandy-yua,sarpsborg,sauda,sauherad,sel,selbu,selje,seljord,sigdal,siljan,sirdal,skaun,skedsmo,ski,skien,skiptvet,skjervoy,xn--skjervy-v1a,skierva,xn--skierv-uta,skjak,xn--skjk-soa,skodje,skanland,xn--sknland-fxa,skanit,xn--sknit-yqa,smola,xn--smla-hra,snillfjord,snasa,xn--snsa-roa,snoasa,snaase,xn--snase-nra,sogndal,sokndal,sola,solund,songdalen,sortland,spydeberg,stange,stavanger,steigen,steinkjer,stjordal,xn--stjrdal-s1a,stokke,stor-elvdal,stord,stordal,storfjord,omasvuotna,strand,stranda,stryn,sula,suldal,sund,sunndal,surnadal,sveio,svelvik,sykkylven,sogne,xn--sgne-gra,somna,xn--smna-gra,sondre-land,xn--sndre-land-0cb,sor-aurdal,xn--sr-aurdal-l8a,sor-fron,xn--sr-fron-q1a,sor-odal,xn--sr-odal-q1a,sor-varanger,xn--sr-varanger-ggb,matta-varjjat,xn--mtta-vrjjat-k7af,sorfold,xn--srfold-bya,sorreisa,xn--srreisa-q1a,sorum,xn--srum-gra,tana,deatnu,time,tingvoll,tinn,tjeldsund,dielddanuorri,tjome,xn--tjme-hra,tokke,tolga,torsken,tranoy,xn--trany-yua,tromso,xn--troms-zua,tromsa,romsa,trondheim,troandin,trysil,trana,xn--trna-woa,trogstad,xn--trgstad-r1a,tvedestrand,tydal,tynset,tysfjord,divtasvuodna,divttasvuotna,tysnes,tysvar,xn--tysvr-vra,tonsberg,xn--tnsberg-q1a,ullensaker,ullensvang,ulvik,utsira,vadso,xn--vads-jra,cahcesuolo,xn--hcesuolo-7ya35b,vaksdal,valle,vang,vanylven,vardo,xn--vard-jra,varggat,xn--vrggt-xqad,vefsn,vaapste,vega,vegarshei,xn--vegrshei-c0a,vennesla,verdal,verran,vestby,vestnes,vestre-slidre,vestre-toten,vestvagoy,xn--vestvgy-ixa6o,vevelstad,vik,vikna,vindafjord,volda,voss,varoy,xn--vry-yla5g,vagan,xn--vgan-qoa,voagat,vagsoy,xn--vgsy-qoa0j,vaga,xn--vg-yiab,ostfold>valer<xn--stfold-9xa>xn--vler-qoa<<np>*<nr>biz,info,gov,edu,org,net,com<nu,nz>ac,co,cri,geek,gen,govt,health,iwi,kiwi,maori,mil,xn--mori-qsa,net,org,parliament,school<om>co,com,edu,gov,med,museum,net,org,pro<onion,org,pa>ac,gob,com,org,sld,edu,net,ing,abo,med,nom<pe>edu,gob,nom,mil,org,com,net<pf>com,org,edu<pg>*<ph>com,net,org,gov,edu,ngo,mil,i<pk>ac,biz,com,edu,fam,gkp,gob,gog,gok,gon,gop,gos,gov,net,org,web<pl>com,net,org,aid,agro,atm,auto,biz,edu,gmina,gsm,info,mail,miasta,media,mil,nieruchomosci,nom,pc,powiat,priv,realestate,rel,sex,shop,sklep,sos,szkola,targi,tm,tourism,travel,turystyka,gov>ap,griw,ic,is,kmpsp,konsulat,kppsp,kwp,kwpsp,mup,mw,oia,oirm,oke,oow,oschr,oum,pa,pinb,piw,po,pr,psp,psse,pup,rzgw,sa,sdn,sko,so,sr,starostwo,ug,ugim,um,umig,upow,uppo,us,uw,uzs,wif,wiih,winb,wios,witd,wiw,wkz,wsa,wskr,wsse,wuoz,wzmiuw,zp,zpisdn<augustow,babia-gora,bedzin,beskidy,bialowieza,bialystok,bielawa,bieszczady,boleslawiec,bydgoszcz,bytom,cieszyn,czeladz,czest,dlugoleka,elblag,elk,glogow,gniezno,gorlice,grajewo,ilawa,jaworzno,jelenia-gora,jgora,kalisz,kazimierz-dolny,karpacz,kartuzy,kaszuby,katowice,kepno,ketrzyn,klodzko,kobierzyce,kolobrzeg,konin,konskowola,kutno,lapy,lebork,legnica,lezajsk,limanowa,lomza,lowicz,lubin,lukow,malbork,malopolska,mazowsze,mazury,mielec,mielno,mragowo,naklo,nowaruda,nysa,olawa,olecko,olkusz,olsztyn,opoczno,opole,ostroda,ostroleka,ostrowiec,ostrowwlkp,pila,pisz,podhale,podlasie,polkowice,pomorze,pomorskie,prochowice,pruszkow,przeworsk,pulawy,radom,rawa-maz,rybnik,rzeszow,sanok,sejny,slask,slupsk,sosnowiec,stalowa-wola,skoczow,starachowice,stargard,suwalki,swidnica,swiebodzin,swinoujscie,szczecin,szczytno,tarnobrzeg,tgory,turek,tychy,ustka,walbrzych,warmia,warszawa,waw,wegrow,wielun,wlocl,wloclawek,wodzislaw,wolomin,wroclaw,zachpomor,zagan,zarow,zgora,zgorzelec<pm,pn>gov,co,org,edu,net<post,pr>com,net,org,gov,edu,isla,pro,biz,info,name,est,prof,ac<pro>aaa,aca,acct,avocat,bar,cpa,eng,jur,law,med,recht<ps>edu,gov,sec,plo,com,org,net<pt>net,gov,org,edu,int,publ,com,nome<pw>co,ne,or,ed,go,belau<py>com,coop,edu,gov,mil,net,org<qa>com,edu,gov,mil,name,net,org,sch<re>asso,com,nom<ro>arts,com,firm,info,nom,nt,org,rec,store,tm,www<rs>ac,co,edu,gov,in,org<ru,rw>ac,co,coop,gov,mil,net,org<sa>com,net,org,gov,med,pub,edu,sch<sb>com,edu,gov,net,org<sc>com,gov,net,org,edu<sd>com,net,org,edu,med,tv,gov,info<se>a,ac,b,bd,brand,c,d,e,f,fh,fhsk,fhv,g,h,i,k,komforb,kommunalforbund,komvux,l,lanbib,m,n,naturbruksgymn,o,org,p,parti,pp,press,r,s,t,tm,u,w,x,y,z<sg>com,net,org,gov,edu,per<sh>com,net,gov,org,mil<si,sj,sk,sl>com,net,edu,gov,org<sm,sn>art,com,edu,gouv,org,perso,univ<so>com,edu,gov,me,net,org<sr,ss>biz,com,edu,gov,me,net,org,sch<st>co,com,consulado,edu,embaixada,mil,net,org,principe,saotome,store<su,sv>com,edu,gob,org,red<sx>gov<sy>edu,gov,net,mil,com,org<sz>co,ac,org<tc,td,tel,tf,tg,th>ac,co,go,in,mi,net,or<tj>ac,biz,co,com,edu,go,gov,int,mil,name,net,nic,org,test,web<tk,tl>gov<tm>com,co,org,net,nom,gov,mil,edu<tn>com,ens,fin,gov,ind,info,intl,mincom,nat,net,org,perso,tourism<to>com,gov,net,org,edu,mil<tr>av,bbs,bel,biz,com,dr,edu,gen,gov,info,mil,k12,kep,name,net,org,pol,tel,tsk,tv,web,nc>gov<<tt>co,com,org,net,biz,info,pro,int,coop,jobs,mobi,travel,museum,aero,name,gov,edu<tv,tw>edu,gov,mil,com,net,org,idv,game,ebiz,club,xn--zf0ao64a,xn--uc0atv,xn--czrw28b<tz>ac,co,go,hotel,info,me,mil,mobi,ne,or,sc,tv<ua>com,edu,gov,in,net,org,cherkassy,cherkasy,chernigov,chernihiv,chernivtsi,chernovtsy,ck,cn,cr,crimea,cv,dn,dnepropetrovsk,dnipropetrovsk,donetsk,dp,if,ivano-frankivsk,kh,kharkiv,kharkov,kherson,khmelnitskiy,khmelnytskyi,kiev,kirovograd,km,kr,kropyvnytskyi,krym,ks,kv,kyiv,lg,lt,lugansk,luhansk,lutsk,lv,lviv,mk,mykolaiv,nikolaev,od,odesa,odessa,pl,poltava,rivne,rovno,rv,sb,sebastopol,sevastopol,sm,sumy,te,ternopil,uz,uzhgorod,uzhhorod,vinnica,vinnytsia,vn,volyn,yalta,zakarpattia,zaporizhzhe,zaporizhzhia,zhitomir,zhytomyr,zp,zt<ug>co,or,ac,sc,go,ne,com,org<uk>ac,co,gov,ltd,me,net,nhs,org,plc,police,sch>*<<us>dni,fed,isa,kids,nsn,ak>k12,cc,lib<al>k12,cc,lib<ar>k12,cc,lib<as>k12,cc,lib<az>k12,cc,lib<ca>k12,cc,lib<co>k12,cc,lib<ct>k12,cc,lib<dc>k12,cc,lib<de>cc<fl>k12,cc,lib<ga>k12,cc,lib<gu>k12,cc,lib<hi>cc,lib<ia>k12,cc,lib<id>k12,cc,lib<il>k12,cc,lib<in>k12,cc,lib<ks>k12,cc,lib<ky>k12,cc,lib<la>k12,cc,lib<ma>k12>pvt,chtr,paroch<cc,lib<md>k12,cc,lib<me>k12,cc,lib<mi>k12,cc,lib,ann-arbor,cog,dst,eaton,gen,mus,tec,washtenaw<mn>k12,cc,lib<mo>k12,cc,lib<ms>k12,cc,lib<mt>k12,cc,lib<nc>k12,cc,lib<nd>cc,lib<ne>k12,cc,lib<nh>k12,cc,lib<nj>k12,cc,lib<nm>k12,cc,lib<nv>k12,cc,lib<ny>k12,cc,lib<oh>k12,cc,lib<ok>k12,cc,lib<or>k12,cc,lib<pa>k12,cc,lib<pr>k12,cc,lib<ri>cc,lib<sc>k12,cc,lib<sd>cc,lib<tn>k12,cc,lib<tx>k12,cc,lib<ut>k12,cc,lib<vi>k12,cc,lib<vt>k12,cc,lib<va>k12,cc,lib<wa>k12,cc,lib<wi>k12,cc,lib<wv>cc<wy>k12,cc,lib<<uy>com,edu,gub,mil,net,org<uz>co,com,net,org<va,vc>com,net,org,gov,mil,edu<ve>arts,bib,co,com,e12,edu,firm,gob,gov,info,int,mil,net,nom,org,rar,rec,store,tec,web<vg,vi>co,com,k12,net,org<vn>ac,ai,biz,com,edu,gov,health,id,info,int,io,name,net,org,pro,angiang,bacgiang,backan,baclieu,bacninh,baria-vungtau,bentre,binhdinh,binhduong,binhphuoc,binhthuan,camau,cantho,caobang,daklak,daknong,danang,dienbien,dongnai,dongthap,gialai,hagiang,haiduong,haiphong,hanam,hanoi,hatinh,haugiang,hoabinh,hungyen,khanhhoa,kiengiang,kontum,laichau,lamdong,langson,laocai,longan,namdinh,nghean,ninhbinh,ninhthuan,phutho,phuyen,quangbinh,quangnam,quangngai,quangninh,quangtri,soctrang,sonla,tayninh,thaibinh,thainguyen,thanhhoa,thanhphohochiminh,thuathienhue,tiengiang,travinh,tuyenquang,vinhlong,vinhphuc,yenbai<vu>com,edu,net,org<wf,ws>com,net,org,gov,edu<yt,xn--mgbaam7a8h,xn--y9a3aq,xn--54b7fta0cc,xn--90ae,xn--mgbcpq6gpa1a,xn--90ais,xn--fiqs8s,xn--fiqz9s,xn--lgbbat1ad8j,xn--wgbh1c,xn--e1a4c,xn--qxa6a,xn--mgbah1a3hjkrd,xn--node,xn--qxam,xn--j6w193g>xn--55qx5d,xn--wcvs22d,xn--mxtq1m,xn--gmqw5a,xn--od0alg,xn--uc0atv<xn--2scrj9c,xn--3hcrj9c,xn--45br5cyl,xn--h2breg3eve,xn--h2brj9c8c,xn--mgbgu82a,xn--rvc1e0am3e,xn--h2brj9c,xn--mgbbh1a,xn--mgbbh1a71e,xn--fpcrj9c3d,xn--gecrj9c,xn--s9brj9c,xn--45brj9c,xn--xkc2dl3a5ee0h,xn--mgba3a4f16a,xn--mgba3a4fra,xn--mgbtx2b,xn--mgbayh7gpa,xn--3e0b707e,xn--80ao21a,xn--q7ce6a,xn--fzc2c9e2c,xn--xkc2al3hye2a,xn--mgbc0a9azcg,xn--d1alf,xn--l1acc,xn--mix891f,xn--mix082f,xn--mgbx4cd0ab,xn--mgb9awbf,xn--mgbai9azgqp6j,xn--mgbai9a5eva00b,xn--ygbi2ammx,xn--90a3ac>xn--o1ac,xn--c1avg,xn--90azh,xn--d1at,xn--o1ach,xn--80au<xn--p1ai,xn--wgbl6a,xn--mgberp4a5d4ar,xn--mgberp4a5d4a87g,xn--mgbqly7c0a67fbc,xn--mgbqly7cvafr,xn--mgbpl2fh,xn--yfro4i67o,xn--clchc0ea0b2g2a9gcd,xn--ogbpf8fl,xn--mgbtf8fl,xn--o3cw4h>xn--12c1fe0br,xn--12co0c3b4eva,xn--h3cuzk1di,xn--o3cyx2a,xn--m3ch0j3a,xn--12cfi8ixb8l<xn--pgbs0dh,xn--kpry57d,xn--kprw13d,xn--nnx388a,xn--j1amh,xn--mgb2ddes,xxx,ye>com,edu,gov,net,mil,org<za>ac,agric,alt,co,edu,gov,grondar,law,mil,net,ngo,nic,nis,nom,org,school,tm,web<zm>ac,biz,co,com,edu,gov,info,mil,net,org,sch<zw>ac,co,gov,mil,org<aaa,aarp,abb,abbott,abbvie,abc,able,abogado,abudhabi,academy,accenture,accountant,accountants,aco,actor,ads,adult,aeg,aetna,afl,africa,agakhan,agency,aig,airbus,airforce,airtel,akdn,alibaba,alipay,allfinanz,allstate,ally,alsace,alstom,amazon,americanexpress,americanfamily,amex,amfam,amica,amsterdam,analytics,android,anquan,anz,aol,apartments,app,apple,aquarelle,arab,aramco,archi,army,art,arte,asda,associates,athleta,attorney,auction,audi,audible,audio,auspost,author,auto,autos,aws,axa,azure,baby,baidu,banamex,band,bank,bar,barcelona,barclaycard,barclays,barefoot,bargains,baseball,basketball,bauhaus,bayern,bbc,bbt,bbva,bcg,bcn,beats,beauty,beer,bentley,berlin,best,bestbuy,bet,bharti,bible,bid,bike,bing,bingo,bio,black,blackfriday,blockbuster,blog,bloomberg,blue,bms,bmw,bnpparibas,boats,boehringer,bofa,bom,bond,boo,book,booking,bosch,bostik,boston,bot,boutique,box,bradesco,bridgestone,broadway,broker,brother,brussels,build,builders,business,buy,buzz,bzh,cab,cafe,cal,call,calvinklein,cam,camera,camp,canon,capetown,capital,capitalone,car,caravan,cards,care,career,careers,cars,casa,case,cash,casino,catering,catholic,cba,cbn,cbre,center,ceo,cern,cfa,cfd,chanel,channel,charity,chase,chat,cheap,chintai,christmas,chrome,church,cipriani,circle,cisco,citadel,citi,citic,city,claims,cleaning,click,clinic,clinique,clothing,cloud,club,clubmed,coach,codes,coffee,college,cologne,commbank,community,company,compare,computer,comsec,condos,construction,consulting,contact,contractors,cooking,cool,corsica,country,coupon,coupons,courses,cpa,credit,creditcard,creditunion,cricket,crown,crs,cruise,cruises,cuisinella,cymru,cyou,dabur,dad,dance,data,date,dating,datsun,day,dclk,dds,deal,dealer,deals,degree,delivery,dell,deloitte,delta,democrat,dental,dentist,desi,design,dev,dhl,diamonds,diet,digital,direct,directory,discount,discover,dish,diy,dnp,docs,doctor,dog,domains,dot,download,drive,dtv,dubai,dunlop,dupont,durban,dvag,dvr,earth,eat,eco,edeka,education,email,emerck,energy,engineer,engineering,enterprises,epson,equipment,ericsson,erni,esq,estate,eurovision,eus,events,exchange,expert,exposed,express,extraspace,fage,fail,fairwinds,faith,family,fan,fans,farm,farmers,fashion,fast,fedex,feedback,ferrari,ferrero,fidelity,fido,film,final,finance,financial,fire,firestone,firmdale,fish,fishing,fit,fitness,flickr,flights,flir,florist,flowers,fly,foo,food,football,ford,forex,forsale,forum,foundation,fox,free,fresenius,frl,frogans,frontier,ftr,fujitsu,fun,fund,furniture,futbol,fyi,gal,gallery,gallo,gallup,game,games,gap,garden,gay,gbiz,gdn,gea,gent,genting,george,ggee,gift,gifts,gives,giving,glass,gle,global,globo,gmail,gmbh,gmo,gmx,godaddy,gold,goldpoint,golf,goo,goodyear,goog,google,gop,got,grainger,graphics,gratis,green,gripe,grocery,group,gucci,guge,guide,guitars,guru,hair,hamburg,hangout,haus,hbo,hdfc,hdfcbank,health,healthcare,help,helsinki,here,hermes,hiphop,hisamitsu,hitachi,hiv,hkt,hockey,holdings,holiday,homedepot,homegoods,homes,homesense,honda,horse,hospital,host,hosting,hot,hotels,hotmail,house,how,hsbc,hughes,hyatt,hyundai,ibm,icbc,ice,icu,ieee,ifm,ikano,imamat,imdb,immo,immobilien,inc,industries,infiniti,ing,ink,institute,insurance,insure,international,intuit,investments,ipiranga,irish,ismaili,ist,istanbul,itau,itv,jaguar,java,jcb,jeep,jetzt,jewelry,jio,jll,jmp,jnj,joburg,jot,joy,jpmorgan,jprs,juegos,juniper,kaufen,kddi,kerryhotels,kerrylogistics,kerryproperties,kfh,kia,kids,kim,kindle,kitchen,kiwi,koeln,komatsu,kosher,kpmg,kpn,krd,kred,kuokgroup,kyoto,lacaixa,lamborghini,lamer,lancaster,land,landrover,lanxess,lasalle,lat,latino,latrobe,law,lawyer,lds,lease,leclerc,lefrak,legal,lego,lexus,lgbt,lidl,life,lifeinsurance,lifestyle,lighting,like,lilly,limited,limo,lincoln,link,lipsy,live,living,llc,llp,loan,loans,locker,locus,lol,london,lotte,lotto,love,lpl,lplfinancial,ltd,ltda,lundbeck,luxe,luxury,madrid,maif,maison,makeup,man,management,mango,map,market,marketing,markets,marriott,marshalls,mattel,mba,mckinsey,med,media,meet,melbourne,meme,memorial,men,menu,merckmsd,miami,microsoft,mini,mint,mit,mitsubishi,mlb,mls,mma,mobile,moda,moe,moi,mom,monash,money,monster,mormon,mortgage,moscow,moto,motorcycles,mov,movie,msd,mtn,mtr,music,nab,nagoya,navy,nba,nec,netbank,netflix,network,neustar,new,news,next,nextdirect,nexus,nfl,ngo,nhk,nico,nike,nikon,ninja,nissan,nissay,nokia,norton,now,nowruz,nowtv,nra,nrw,ntt,nyc,obi,observer,office,okinawa,olayan,olayangroup,ollo,omega,one,ong,onl,online,ooo,open,oracle,orange,organic,origins,osaka,otsuka,ott,ovh,page,panasonic,paris,pars,partners,parts,party,pay,pccw,pet,pfizer,pharmacy,phd,philips,phone,photo,photography,photos,physio,pics,pictet,pictures,pid,pin,ping,pink,pioneer,pizza,place,play,playstation,plumbing,plus,pnc,pohl,poker,politie,porn,pramerica,praxi,press,prime,prod,productions,prof,progressive,promo,properties,property,protection,pru,prudential,pub,pwc,qpon,quebec,quest,racing,radio,read,realestate,realtor,realty,recipes,red,redstone,redumbrella,rehab,reise,reisen,reit,reliance,ren,rent,rentals,repair,report,republican,rest,restaurant,review,reviews,rexroth,rich,richardli,ricoh,ril,rio,rip,rocks,rodeo,rogers,room,rsvp,rugby,ruhr,run,rwe,ryukyu,saarland,safe,safety,sakura,sale,salon,samsclub,samsung,sandvik,sandvikcoromant,sanofi,sap,sarl,sas,save,saxo,sbi,sbs,scb,schaeffler,schmidt,scholarships,school,schule,schwarz,science,scot,search,seat,secure,security,seek,select,sener,services,seven,sew,sex,sexy,sfr,shangrila,sharp,shell,shia,shiksha,shoes,shop,shopping,shouji,show,silk,sina,singles,site,ski,skin,sky,skype,sling,smart,smile,sncf,soccer,social,softbank,software,sohu,solar,solutions,song,sony,soy,spa,space,sport,spot,srl,stada,staples,star,statebank,statefarm,stc,stcgroup,stockholm,storage,store,stream,studio,study,style,sucks,supplies,supply,support,surf,surgery,suzuki,swatch,swiss,sydney,systems,tab,taipei,talk,taobao,target,tatamotors,tatar,tattoo,tax,taxi,tci,tdk,team,tech,technology,temasek,tennis,teva,thd,theater,theatre,tiaa,tickets,tienda,tips,tires,tirol,tjmaxx,tjx,tkmaxx,tmall,today,tokyo,tools,top,toray,toshiba,total,tours,town,toyota,toys,trade,trading,training,travel,travelers,travelersinsurance,trust,trv,tube,tui,tunes,tushu,tvs,ubank,ubs,unicom,university,uno,uol,ups,vacations,vana,vanguard,vegas,ventures,verisign,versicherung,vet,viajes,video,vig,viking,villas,vin,vip,virgin,visa,vision,viva,vivo,vlaanderen,vodka,volvo,vote,voting,voto,voyage,wales,walmart,walter,wang,wanggou,watch,watches,weather,weatherchannel,webcam,weber,website,wed,wedding,weibo,weir,whoswho,wien,wiki,williamhill,win,windows,wine,winners,wme,wolterskluwer,woodside,work,works,world,wow,wtc,wtf,xbox,xerox,xihuan,xin,xn--11b4c3d,xn--1ck2e1b,xn--1qqw23a,xn--30rr7y,xn--3bst00m,xn--3ds443g,xn--3pxu8k,xn--42c2d9a,xn--45q11c,xn--4gbrim,xn--55qw42g,xn--55qx5d,xn--5su34j936bgsg,xn--5tzm5g,xn--6frz82g,xn--6qq986b3xl,xn--80adxhks,xn--80aqecdr1a,xn--80asehdb,xn--80aswg,xn--8y0a063a,xn--9dbq2a,xn--9et52u,xn--9krt00a,xn--b4w605ferd,xn--bck1b9a5dre4c,xn--c1avg,xn--c2br7g,xn--cck2b3b,xn--cckwcxetd,xn--cg4bki,xn--czr694b,xn--czrs0t,xn--czru2d,xn--d1acj3b,xn--eckvdtc9d,xn--efvy88h,xn--fct429k,xn--fhbei,xn--fiq228c5hs,xn--fiq64b,xn--fjq720a,xn--flw351e,xn--fzys8d69uvgm,xn--g2xx48c,xn--gckr3f0f,xn--gk3at1e,xn--hxt814e,xn--i1b6b1a6a2e,xn--imr513n,xn--io0a7i,xn--j1aef,xn--jlq480n2rg,xn--jvr189m,xn--kcrx77d1x4a,xn--kput3i,xn--mgba3a3ejt,xn--mgba7c0bbn0a,xn--mgbab2bd,xn--mgbca7dzdo,xn--mgbi4ecexp,xn--mgbt3dhd,xn--mk1bu44c,xn--mxtq1m,xn--ngbc5azd,xn--ngbe9e0a,xn--ngbrx,xn--nqv7f,xn--nqv7fs00ema,xn--nyqy26a,xn--otu796d,xn--p1acf,xn--pssy2u,xn--q9jyb4c,xn--qcka1pmc,xn--rhqv96g,xn--rovu88b,xn--ses554g,xn--t60b56a,xn--tckwe,xn--tiq49xqyj,xn--unup4y,xn--vermgensberater-ctb,xn--vermgensberatung-pwb,xn--vhquv,xn--vuq861b,xn--w4r85el8fhu5dnra,xn--w4rs40l,xn--xhq521b,xn--zfr164b,xyz,yachts,yahoo,yamaxun,yandex,yodobashi,yoga,yokohama,you,youtube,yun,zappos,zara,zero,zip,zone,zuerich"),Me=null!=Me?Me:Oe("krd>co,edu<pl>art,gliwice,krakow,poznan,wroc,zakopane,beep,ecommerce-shop,cfolks,dfirma,dkonto,you2,shoparena,homesklep,sdscloud,unicloud,krasnik,leczna,lubartow,lublin,poniatowa,swidnik,co,torun,simplesite,myspreadshop,gda,gdansk,gdynia,med,sopot,bielsko<us>de>lib<cloudns,drud,is-by,land-4-sale,stuff-4-sale,heliohost,enscaled>phx<mircloud,ngo,golffan,noip,pointto,freeddns,srv>gh,gl<platterp,servername<dev>12chars,panel,autocode,lcl>*<lclstage>*<stg>*<stgstage>*<pages,r2,workers,curv,deno,deno-staging,deta,evervault>relay<fly,githubpreview,gateway>*<is-a,iserv,runcontainers,localcert>user>*<<loginline,barsy,mediatech,modx,ngrok,ngrok-free,is-cool,is-not-a,localplayer,xmit,platter-app,replit>archer,bones,canary,global,hacker,id,janeway,kim,kira,kirk,odo,paris,picard,pike,prerelease,reed,riker,sisko,spock,staging,sulu,tarpit,teams,tucker,wesley,worf<crm>d>*<w>*<wa>*<wb>*<wc>*<wd>*<we>*<wf>*<<vercel,webhare>*<<it>12chars,blogspot,ibxos,iliadboxos,neen>jc<tim>open>jelastic>cloud<<<16-b,32-b,64-b,123homepage,myspreadshop,syncloud<pro>12chars,cloudns,dnstrace>bci<barsy,ngrok<ua>cc,inf,ltd,cx,ie,biz,co,pp,v<to>611,oya,x0,quickconnect>direct<vpnplus<com>a2hosted,cpserver,adobeaemcloud>dev>*<<africa,airkitapps,airkitapps-au,aivencloud,kasserver,amazonaws>af-south-1>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint,s3-website<s3,s3-accesspoint,s3-object-lambda,s3-website,aws-cloud9>webview-assets<cloud9>vfs,webview-assets<<ap-east-1>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint<s3,s3-accesspoint,s3-object-lambda,s3-website,aws-cloud9>webview-assets<cloud9>vfs,webview-assets<<ap-northeast-1>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint,s3-website<s3,s3-accesspoint,s3-object-lambda,s3-website,analytics-gateway,aws-cloud9>webview-assets<cloud9>vfs,webview-assets<<ap-northeast-2>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint,s3-website<s3,s3-accesspoint,s3-object-lambda,s3-website,analytics-gateway,aws-cloud9>webview-assets<cloud9>vfs,webview-assets<<ap-northeast-3>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint,s3-website<s3,s3-accesspoint,s3-object-lambda,s3-website,aws-cloud9>webview-assets<cloud9>vfs,webview-assets<<ap-south-1>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint,s3-website<s3,s3-accesspoint,s3-object-lambda,s3-website,analytics-gateway,aws-cloud9>webview-assets<cloud9>vfs,webview-assets<<ap-south-2>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint<s3,s3-accesspoint,s3-object-lambda,s3-website<ap-southeast-1>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint,s3-website<s3,s3-accesspoint,s3-object-lambda,s3-website,analytics-gateway,aws-cloud9>webview-assets<cloud9>vfs,webview-assets<<ap-southeast-2>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint,s3-website<s3,s3-accesspoint,s3-object-lambda,s3-website,analytics-gateway,aws-cloud9>webview-assets<cloud9>vfs,webview-assets<<ap-southeast-3>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint<s3,s3-accesspoint,s3-object-lambda,s3-website<ap-southeast-4>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint<s3,s3-accesspoint,s3-object-lambda,s3-website<ca-central-1>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint,s3-accesspoint-fips,s3-fips,s3-website<s3,s3-accesspoint,s3-accesspoint-fips,s3-fips,s3-object-lambda,s3-website,aws-cloud9>webview-assets<cloud9>vfs,webview-assets<<ca-west-1>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint,s3-accesspoint-fips,s3-fips,s3-website<s3,s3-accesspoint,s3-accesspoint-fips,s3-fips,s3-website<eu-central-1>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint,s3-website<s3,s3-accesspoint,s3-object-lambda,s3-website,analytics-gateway,aws-cloud9>webview-assets<cloud9>vfs,webview-assets<<eu-central-2>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint<s3,s3-accesspoint,s3-object-lambda,s3-website<eu-north-1>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint<s3,s3-accesspoint,s3-object-lambda,s3-website,aws-cloud9>webview-assets<cloud9>vfs,webview-assets<<eu-south-1>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint,s3-website<s3,s3-accesspoint,s3-object-lambda,s3-website,aws-cloud9>webview-assets<cloud9>vfs,webview-assets<<eu-south-2>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint<s3,s3-accesspoint,s3-object-lambda,s3-website<eu-west-1>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint,s3-website<s3,s3-accesspoint,s3-deprecated,s3-object-lambda,s3-website,analytics-gateway,aws-cloud9>webview-assets<cloud9>vfs,webview-assets<<eu-west-2>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint<s3,s3-accesspoint,s3-object-lambda,s3-website,aws-cloud9>webview-assets<cloud9>vfs,webview-assets<<eu-west-3>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint,s3-website<s3,s3-accesspoint,s3-object-lambda,s3-website,aws-cloud9>webview-assets<cloud9>vfs,webview-assets<<il-central-1>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint<s3,s3-accesspoint,s3-object-lambda,s3-website,aws-cloud9>webview-assets<cloud9>vfs<<me-central-1>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint<s3,s3-accesspoint,s3-object-lambda,s3-website<me-south-1>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint<s3,s3-accesspoint,s3-object-lambda,s3-website,aws-cloud9>webview-assets<cloud9>vfs,webview-assets<<sa-east-1>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint,s3-website<s3,s3-accesspoint,s3-object-lambda,s3-website,aws-cloud9>webview-assets<cloud9>vfs,webview-assets<<us-east-1>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint,s3-accesspoint-fips,s3-fips,s3-website<s3,s3-accesspoint,s3-accesspoint-fips,s3-deprecated,s3-fips,s3-object-lambda,s3-website,analytics-gateway,aws-cloud9>webview-assets<cloud9>vfs,webview-assets<<us-east-2>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint,s3-accesspoint-fips,s3-fips<s3,s3-accesspoint,s3-accesspoint-fips,s3-deprecated,s3-fips,s3-object-lambda,s3-website,analytics-gateway,aws-cloud9>webview-assets<cloud9>vfs,webview-assets<<us-gov-east-1>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint,s3-accesspoint-fips,s3-fips<s3,s3-accesspoint,s3-accesspoint-fips,s3-fips,s3-object-lambda,s3-website<us-gov-west-1>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint,s3-accesspoint-fips,s3-fips<s3,s3-accesspoint,s3-accesspoint-fips,s3-fips,s3-object-lambda,s3-website<us-west-1>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint,s3-accesspoint-fips,s3-fips,s3-website<s3,s3-accesspoint,s3-accesspoint-fips,s3-fips,s3-object-lambda,s3-website,aws-cloud9>webview-assets<cloud9>vfs,webview-assets<<us-west-2>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint,s3-accesspoint-fips,s3-fips,s3-website<s3,s3-accesspoint,s3-accesspoint-fips,s3-deprecated,s3-fips,s3-object-lambda,s3-website,analytics-gateway,aws-cloud9>webview-assets<cloud9>vfs,webview-assets<<compute>*<compute-1>*<airflow>af-south-1>*<ap-east-1>*<ap-northeast-1>*<ap-northeast-2>*<ap-northeast-3>*<ap-south-1>*<ap-south-2>*<ap-southeast-1>*<ap-southeast-2>*<ap-southeast-3>*<ap-southeast-4>*<ca-central-1>*<ca-west-1>*<eu-central-1>*<eu-central-2>*<eu-north-1>*<eu-south-1>*<eu-south-2>*<eu-west-1>*<eu-west-2>*<eu-west-3>*<il-central-1>*<me-central-1>*<me-south-1>*<sa-east-1>*<us-east-1>*<us-east-2>*<us-west-1>*<us-west-2>*<<s3,s3-1,s3-ap-east-1,s3-ap-northeast-1,s3-ap-northeast-2,s3-ap-northeast-3,s3-ap-south-1,s3-ap-southeast-1,s3-ap-southeast-2,s3-ca-central-1,s3-eu-central-1,s3-eu-north-1,s3-eu-west-1,s3-eu-west-2,s3-eu-west-3,s3-external-1,s3-fips-us-gov-east-1,s3-fips-us-gov-west-1,s3-global>accesspoint>mrap<<s3-me-south-1,s3-sa-east-1,s3-us-east-2,s3-us-gov-east-1,s3-us-gov-west-1,s3-us-west-1,s3-us-west-2,s3-website-ap-northeast-1,s3-website-ap-southeast-1,s3-website-ap-southeast-2,s3-website-eu-west-1,s3-website-sa-east-1,s3-website-us-east-1,s3-website-us-gov-west-1,s3-website-us-west-1,s3-website-us-west-2,elb>*<<amazoncognito>af-south-1>auth<ap-east-1>auth<ap-northeast-1>auth<ap-northeast-2>auth<ap-northeast-3>auth<ap-south-1>auth<ap-south-2>auth<ap-southeast-1>auth<ap-southeast-2>auth<ap-southeast-3>auth<ap-southeast-4>auth<ca-central-1>auth<ca-west-1>auth<eu-central-1>auth<eu-central-2>auth<eu-north-1>auth<eu-south-1>auth<eu-south-2>auth<eu-west-1>auth<eu-west-2>auth<eu-west-3>auth<il-central-1>auth<me-central-1>auth<me-south-1>auth<sa-east-1>auth<us-east-1>auth,auth-fips<us-east-2>auth,auth-fips<us-gov-west-1>auth-fips<us-west-1>auth,auth-fips<us-west-2>auth,auth-fips<<amplifyapp,awsapprunner>*<awsapps,elasticbeanstalk>af-south-1,ap-east-1,ap-northeast-1,ap-northeast-2,ap-northeast-3,ap-south-1,ap-southeast-1,ap-southeast-2,ap-southeast-3,ca-central-1,eu-central-1,eu-north-1,eu-south-1,eu-west-1,eu-west-2,eu-west-3,il-central-1,me-south-1,sa-east-1,us-east-1,us-east-2,us-gov-east-1,us-gov-west-1,us-west-1,us-west-2<awsglobalaccelerator,siiites,appspacehosted,appspaceusercontent,on-aptible,myasustor,balena-devices,betainabox,boutir,bplaced,cafjs,canva-apps,cdn77-storage,br,cn,de,eu,jpn,mex,ru,sa,uk,us,za,clever-cloud>services>*<<dnsabr,jdevcloud,wpdevcloud,cf-ipfs,cloudflare-ipfs,trycloudflare,co,customer-oci>*,oci>*<ocp>*<ocs>*<<builtwithdark,datadetect>demo,instance<dattolocal,dattorelay,dattoweb,mydatto,ddns5,digitaloceanspaces>*<discordsays,discordsez,drayddns,dreamhosters,durumis,mydrobo,blogdns,cechire,dnsalias,dnsdojo,doesntexist,dontexist,doomdns,dyn-o-saur,dynalias,dyndns-at-home,dyndns-at-work,dyndns-blog,dyndns-free,dyndns-home,dyndns-ip,dyndns-mail,dyndns-office,dyndns-pics,dyndns-remote,dyndns-server,dyndns-web,dyndns-wiki,dyndns-work,est-a-la-maison,est-a-la-masion,est-le-patron,est-mon-blogueur,from-ak,from-al,from-ar,from-ca,from-ct,from-dc,from-de,from-fl,from-ga,from-hi,from-ia,from-id,from-il,from-in,from-ks,from-ky,from-ma,from-md,from-mi,from-mn,from-mo,from-ms,from-mt,from-nc,from-nd,from-ne,from-nh,from-nj,from-nm,from-nv,from-oh,from-ok,from-or,from-pa,from-pr,from-ri,from-sc,from-sd,from-tn,from-tx,from-ut,from-va,from-vt,from-wa,from-wi,from-wv,from-wy,getmyip,gotdns,hobby-site,homelinux,homeunix,iamallama,is-a-anarchist,is-a-blogger,is-a-bookkeeper,is-a-bulls-fan,is-a-caterer,is-a-chef,is-a-conservative,is-a-cpa,is-a-cubicle-slave,is-a-democrat,is-a-designer,is-a-doctor,is-a-financialadvisor,is-a-geek,is-a-green,is-a-guru,is-a-hard-worker,is-a-hunter,is-a-landscaper,is-a-lawyer,is-a-liberal,is-a-libertarian,is-a-llama,is-a-musician,is-a-nascarfan,is-a-nurse,is-a-painter,is-a-personaltrainer,is-a-photographer,is-a-player,is-a-republican,is-a-rockstar,is-a-socialist,is-a-student,is-a-teacher,is-a-techie,is-a-therapist,is-an-accountant,is-an-actor,is-an-actress,is-an-anarchist,is-an-artist,is-an-engineer,is-an-entertainer,is-certified,is-gone,is-into-anime,is-into-cars,is-into-cartoons,is-into-games,is-leet,is-not-certified,is-slick,is-uberleet,is-with-theband,isa-geek,isa-hockeynut,issmarterthanyou,likes-pie,likescandy,neat-url,saves-the-whales,selfip,sells-for-less,sells-for-u,servebbs,simple-url,space-to-rent,teaches-yoga,writesthisblog,ddnsfree,ddnsgeek,giize,gleeze,kozow,loseyourip,ooguy,theworkpc,mytuleap,tuleap-partners,encoreapi,evennode>eu-1,eu-2,eu-3,eu-4,us-1,us-2,us-3,us-4<onfabrica,fastly-edge,fastly-terrarium,fastvps-server,mydobiss,firebaseapp,fldrv,forgeblocks,framercanvas,freebox-os,freeboxos,freemyip,aliases121,gentapps,gentlentapis,githubusercontent,0emm>*<appspot>r>*<<blogspot,codespot,googleapis,googlecode,pagespeedmobilizer,publishproxy,withgoogle,withyoutube,grayjayleagues,hatenablog,hatenadiary,herokuapp,herokussl,gr,smushcdn,wphostedmail,wpmucdn,pixolino,apps-1and1,live-website,amscompute,dopaas,hosted-by-previder>paas<hosteur>rag-cloud,rag-cloud-ch<ik-server>jcloud,jcloud-ver-jpc<jelastic>demo<kilatiron,massivegrid>paas<wafaicloud>jed,lon,ryd<webadorsite,joyent>cns>*<<ktistory,lpusercontent,linode>members,nodebalancer>*<<linodeobjects>*<linodeusercontent>ip<barsycenter,barsyonline,mazeplay,miniserver,atmeta,fbsbx>apps<meteorapp>eu<hostedpi,mythic-beasts>caracal,customer,fentiger,lynx,ocelot,oncilla,onza,sphinx,vs,x,yali<nospamproxy>cloud<4u,nfshost,ar,hu,kr,no,qc,uy,3utilities,blogsyte,ciscofreak,damnserver,ddnsking,ditchyourip,dnsiskinky,dynns,geekgalaxy,health-carereform,homesecuritymac,homesecuritypc,myactivedirectory,mysecuritycamera,myvnc,net-freaks,onthewifi,point2this,quicksytes,securitytactics,servebeer,servecounterstrike,serveexchange,serveftp,servegame,servehalflife,servehttp,servehumour,serveirc,servemp3,servep2p,servepics,servequake,servesarcasm,stufftoread,unusualperson,workisboring,001www,ddnslive,myiphost,observableusercontent>static<simplesite,orsites,operaunite,authgear-staging,authgearapps,skygearapp,outsystemscloud,ownprovider,pgfog,pagexl,gotpantheon,paywhirl>*<upsunapp,platter-app,postman-echo,prgmr>xen<pythonanywhere>eu<qa2,alpha-myqnapcloud,dev-myqnapcloud,mycloudnas,mynascloud,myqnapcloud,qualifioapp,ladesk,qbuser,quipelements>*<rackmaze,rhcloud,onrender,render>app<180r,dojin,sakuratan,sakuraweb,x0,code>builder>*<dev-builder>*<stg-builder>*<<salesforce>platform>code-builder-stg>test>001>*<<<<<logoip,scrysec,firewall-gateway,myshopblocks,myshopify,shopitsite,1kapp,appchizi,applinzi,sinaapp,vipsinaapp,bounty-full>alpha,beta<streamlitapp,try-snowplow,playstation-cloud,myspreadshop,w-corp-staticblitz,w-credentialless-staticblitz,w-staticblitz,stackhero-network,stdlib>api<strapiapp>media<streak-link,streaklinks,streakusercontent,temp-dns,dsmynas,familyds,mytabit,tb-hosting>site<reservd,thingdustdata,bloxcms,townnews-staging,typeform>pro<hk,it,vultrobjects>*<wafflecell,hotelwithflight,reserve-online,cprapid,pleskns,remotewd,wiardweb>pages<wixsite,wixstudio,messwithdns,woltlab-demo,wpenginepowered>js<xnbay>u2,u2-local<yolasite<vodka>aaa<io>on-acorn>*<apigee,b-data,banzaicloud>app,backyards>*<<beagleboard,bitbucket,bluebite,boxfuse,brave>s>*<<browsersafetymark,bigv>uk0<cleverapps,dappnode>dyndns<darklang,definima,dedyn,drud,fh-muenster,shw,forgerock>id<github,gitlab,lolipop,hasura-app,hostyhosting,hypernode,moonscale>*<beebyte>paas<beebyteapp>sekd1<jele,unispace>cloud-fr1<webthings,loginline,barsy,azurecontainer>*<ngrok>ap,au,eu,in,jp,sa,us<nodeart>stage<pantheonsite,dyn53,pstmn>mock<protonet,qcx>sys>*<<qoto,vaporcloud,myrdbx,rb-hosting>site<on-k3s>*<on-rio>*<readthedocs,resindevice,resinstaging>devices<hzc,sandcats,scrypted>client<shiftedit,mo-siemens,lair>apps<stolos>*<spacekit,musician,utwente,s5y>*<edugit,telebit,thingdust>dev>cust,reservd<disrec>cust,reservd<prod>cust<testing>cust,reservd<<tickets,upli,2038,webflow,webflowtest,editorx,wixstudio,basicserver,virtualserver<biz>activetrail,cloudns,jozi,dyndns,for-better,for-more,for-some,for-the,selfip,webhop,orx,mmafan,myftp,no-ip,dscloud<app>adaptable,beget>*<clerk,clerkstage,wnext,csb>preview<platform0,deta,ondigitalocean,easypanel,encr,evervault>relay<expo>staging<edgecompute,fireweb,flutterflow,framer,hosted>*<run>*<web,hasura,loginline,messerli,netfy,netlify,ngrok,ngrok-free,developer>*<noop,northflank>*<upsun>*<replit>id<snowflake>*,privatelink>*<<streamlit,storipress,telebit,typedream,vercel,bookonline,wdh>preview<zeabur<live>aem,hlx,ewp>*<<net>adobeaemcloud,adobeio-static,adobeioruntime,akadns,akamai,akamai-staging,akamaiedge,akamaiedge-staging,akamaihd,akamaihd-staging,akamaiorigin,akamaiorigin-staging,akamaized,akamaized-staging,edgekey,edgekey-staging,edgesuite,edgesuite-staging,alwaysdata,myamaze,cloudfront,appudo,atlassian-dev>prod>cdn<<myfritz,onavstack,shopselect,blackbaudcdn,boomla,bplaced,square7,cdn77>r<cdn77-ssl,gb,hu,jp,se,uk,clickrising,dns-cloud,dns-dynamic,cloudaccess,cloudflare>cdn<cloudflareanycast>cdn<cloudflarecn>cdn<cloudflareglobal>cdn<feste-ip,knx-server,static-access,cryptonomic>*<dattolocal,mydatto,debian,definima,at-band-camp,blogdns,broke-it,buyshouses,dnsalias,dnsdojo,does-it,dontexist,dynalias,dynathome,endofinternet,from-az,from-co,from-la,from-ny,gets-it,ham-radio-op,homeftp,homeip,homelinux,homeunix,in-the-band,is-a-chef,is-a-geek,isa-geek,kicks-ass,office-on-the,podzone,scrapper-site,selfip,sells-it,servebbs,serveftp,thruhere,webhop,casacam,dynu,dynv6,twmail,ru,channelsdvr>u<fastly>freetls,map,prod>a,global<ssl>a,b,global<<fastlylb>map<edgeapp,keyword-on,live-on,server-on,cdn-edges,localcert,localhostcert,heteml,cloudfunctions,iobb,moonscale,in-dsl,in-vpn,apps-1and1,ipifony,cloudjiffy>fra1-de,west1-us<elastx>jls-sto1,jls-sto2,jls-sto3<faststacks,massivegrid>paas>fr-1,lon-1,lon-2,ny-1,ny-2,sg-1<<saveincloud>jelastic,nordeste-idc<scaleforce>j<tsukaeru>jelastic<kinghost,uni5,krellian,ggff,barsy,memset,azure-api,azure-mobile,azureedge,azurefd,azurestaticapps>1,2,3,4,5,6,7,centralus,eastasia,eastus2,westeurope,westus2<azurewebsites,cloudapp,trafficmanager,windows>core>blob<servicebus<mynetname>sn<bounceme,ddns,eating-organic,mydissent,myeffect,mymediapc,mypsx,mysecuritycamera,nhlfan,no-ip,pgafan,privatizehealthinsurance,redirectme,serveblog,serveminecraft,sytes,dnsup,hicam,now-dns,ownip,vpndns,cloudycluster,ovh>hosting>*<webpaas>*<<rackmaze,myradweb,in,squares,schokokeks,firewall-gateway,seidat,senseering,siteleaf,mafelo,myspreadshop,vps-host>jelastic>atl,njs,ric<<srcf>soc,user<supabase,dsmynas,familyds,tailscale>beta<ts>c>*<<torproject>pages<reserve-online,community-pro,meinforum,yandexcloud>storage,website<za<page>aem,hlx,hlx3,translated,codeberg,prvcy,rocky,magnet,pdns,plesk<eu>airkitapps,mycd,cloudns,dogado>jelastic<barsy,wellbeingzone,spdns,transurl>*<diskstation<ca>barsy,awdev>*<co,blogspot,no-ip,myspreadshop,box<estate>compute>*<<network>alces>*<co,arvo,azimuth,tlon<org>altervista,pimienta,poivron,potager,sweetpepper,cdn77>c,rsc<cdn77-secure>origin>ssl<<ae,certmgr,cloudns,ddnss,duckdns,tunk,blogdns,blogsite,boldlygoingnowhere,dnsalias,dnsdojo,doesntexist,dontexist,doomdns,dvrdns,dynalias,dyndns>go,home<endofinternet,endoftheinternet,from-me,game-host,gotdns,hobby-site,homedns,homeftp,homelinux,homeunix,is-a-bruinsfan,is-a-candidate,is-a-celticsfan,is-a-chef,is-a-geek,is-a-knight,is-a-linux-user,is-a-patsfan,is-a-soxfan,is-found,is-lost,is-saved,is-very-bad,is-very-evil,is-very-good,is-very-nice,is-very-sweet,isa-geek,kicks-ass,misconfused,podzone,readmyblog,selfip,sellsyourhome,servebbs,serveftp,servegame,stuff-4-sale,webhop,accesscam,camdvr,freeddns,mywire,webredirect,twmail,eu>al,asso,at,au,be,bg,ca,cd,ch,cn,cy,cz,de,dk,edu,ee,es,fi,fr,gr,hr,hu,ie,il,in,int,is,it,jp,kr,lt,lu,lv,mc,me,mk,mt,my,net,ng,nl,no,nz,paris,pl,pt,q-a,ro,ru,se,si,sk,tr,uk,us<fedorainfracloud,fedorapeople,fedoraproject>cloud,os>app<stg>os>app<<<freedesktop,hatenadiary,hepforge,in-dsl,in-vpn,js,barsy,mayfirst,bmoattachments,cable-modem,collegefan,couchpotatofries,hopto,mlbfan,myftp,mysecuritycamera,nflfan,no-ip,read-books,ufcfan,zapto,dynserv,now-dns,is-local,httpbin,pubtls,jpn,my-firewall,myfirewall,spdns,small-web,dsmynas,familyds,teckids>s3<tuxfamily,diskstation,hk,us,toolforge,wmcloud,wmflabs,za<cn>com>amazonaws>cn-north-1>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint,s3-website<s3,s3-accesspoint,s3-deprecated,s3-object-lambda,s3-website<cn-northwest-1>execute-api,emrappui-prod,emrnotebooks-prod,emrstudio-prod,dualstack>s3,s3-accesspoint<s3,s3-accesspoint,s3-object-lambda,s3-website<compute>*<airflow>cn-north-1>*<cn-northwest-1>*<<eb>cn-north-1,cn-northwest-1<elb>*<<sagemaker>cn-north-1>notebook,studio<cn-northwest-1>notebook,studio<<<canva-apps,canvasite>my>*<<myqnapcloud,sh>as<quickconnect>direct<<aws>sagemaker>ap-northeast-1>labeling,notebook,studio<ap-northeast-2>labeling,notebook,studio<ap-south-1>labeling,notebook,studio<ap-southeast-1>labeling,notebook,studio<ap-southeast-2>labeling,notebook,studio<ca-central-1>labeling,notebook,notebook-fips,studio<eu-central-1>labeling,notebook,studio<eu-west-1>labeling,notebook,studio<eu-west-2>labeling,notebook,studio<us-east-1>labeling,notebook,notebook-fips,studio<us-east-2>labeling,notebook,notebook-fips,studio<us-west-2>labeling,notebook,notebook-fips,studio<af-south-1>notebook,studio<ap-east-1>notebook,studio<ap-northeast-3>notebook,studio<ap-south-2>notebook<ap-southeast-3>notebook,studio<ap-southeast-4>notebook<ca-west-1>notebook,notebook-fips<eu-central-2>notebook<eu-north-1>notebook,studio<eu-south-1>notebook,studio<eu-south-2>notebook,studio<eu-west-3>notebook,studio<il-central-1>notebook,studio<me-central-1>notebook,studio<me-south-1>notebook,studio<sa-east-1>notebook,studio<us-gov-east-1>notebook,notebook-fips,studio,studio-fips<us-gov-west-1>notebook,notebook-fips,studio,studio-fips<us-west-1>notebook,notebook-fips,studio<experiments>*<<repost>private>*<<<online>eero,eero-stage,websitebuilder,barsy<si>f5,gitapp,gitpage,blogspot<jp>ne>aseinet>user<gehirn,ivory,mail-box,mints,mokuren,opal,sakura,sumomo,topaz<buyshop,fashionstore,handcrafted,kawaiishop,supersale,theshop,0am,0g0,0j0,0t0,mydns,pgw,wjg,usercontent,angry,babyblue,babymilk,backdrop,bambina,bitter,blush,boo,boy,boyfriend,but,candypop,capoo,catfood,cheap,chicappa,chillout,chips,chowder,chu,ciao,cocotte,coolblog,cranky,cutegirl,daa,deca,deci,digick,egoism,fakefur,fem,flier,floppy,fool,frenchkiss,girlfriend,girly,gloomy,gonna,greater,hacca,heavy,her,hiho,hippy,holy,hungry,icurus,itigo,jellybean,kikirara,kill,kilo,kuron,littlestar,lolipopmc,lolitapunk,lomo,lovepop,lovesick,main,mods,mond,mongolian,moo,namaste,nikita,nobushi,noor,oops,parallel,parasite,pecori,peewee,penne,pepper,perma,pigboat,pinoko,punyu,pupu,pussycat,pya,raindrop,readymade,sadist,schoolbus,secret,staba,stripper,sub,sunnyday,thick,tonkotsu,under,upper,velvet,verse,versus,vivian,watson,weblike,whitesnow,zombie,blogspot,hateblo,hatenablog,hatenadiary,2-d,bona,crap,daynight,eek,flop,halfmoon,jeez,matrix,mimoza,netgamers,nyanta,o0o0,rdy,rgr,rulez,sakurastorage>isk01>s3<isk02>s3<<saloon,sblo,skr,tank,uh-oh,undo,webaccel>rs,user<websozai,xii<vc>gv>d<0e,mydns<eus>party>user<<link>myfritz,cyon,nftstorage>ipfs<mypep,dweb>*<<ws>advisor>*<cloud66,dyndns,mypets<cloud>banzai>*<elementor,encoway>eu<statics>*<ravendb,axarnet>es-1<diadem,jelastic>vip<jele,jenv-aruba>aruba>eur>it1<<it1<keliweb>cs<oxa>tn,uk<primetel>uk<reclaim>ca,uk,us<trendhosting>ch,de<jotelulu,kuleuven,linkyard,magentosite>*<observablehq,perspecta,vapor,on-rancher>*<scw>baremetal>fr-par-1,fr-par-2,nl-ams-1<fr-par>cockpit,fnc>functions<k8s>nodes<s3,s3-website,whm<instances>priv,pub<k8s,nl-ams>cockpit,k8s>nodes<s3,s3-website,whm<pl-waw>cockpit,k8s>nodes<s3,s3-website<scalebook,smartlabeling<servebolt,onstackit>runs<sensiosite>*<trafficplex,unison-services,urown,voorloper,zap<ec>base,official<shop>base,hoplix,barsy,barsyonline<gay>pages<la>bnr<sh>bip,hashbang,platform>ent,eu,us<now<je>of<ch>square7,cloudns,cloudscale>cust,lpg>objects<rma>objects<<blogspot,flow>ae>alp1<appengine<linkyard-cloud,gotdns,dnsking,123website,myspreadshop,firenet>*,svc>*<<12hp,2ix,4lima,lima-city<de>bplaced,square7,com,cosidns>dyn<dnsupdater,dynamisches-dns,internet-dns,l-o-g-i-n,ddnss>dyn,dyndns<dyn-ip24,dyndns1,home-webserver>dyn<myhome-server,dnshome,fuettertdasnetz,isteingeek,istmein,lebtimnetz,leitungsen,traeumtgerade,frusky>*<goip,blogspot,xn--gnstigbestellen-zvb,xn--gnstigliefern-wob,hs-heilbronn>it>pages<<dyn-berlin,in-berlin,in-brb,in-butter,in-dsl,in-vpn,iservschule,mein-iserv,schulplattform,schulserver,test-iserv,keymachine,git-repos,lcube-server,svn-repos,barsy,123webseite,logoip,firewall-gateway,my-gateway,my-router,spdns,speedpartner>customer<myspreadshop,taifun-dns,12hp,2ix,4lima,lima-city,dd-dns,dray-dns,draydns,dyn-vpn,dynvpn,mein-vigor,my-vigor,my-wan,syno-ds,synology-diskstation,synology-ds,uberspace>*<virtual-user,virtualuser,community-pro,diskussionsbereich<hr>brendly>shop<blogspot,free<rs>brendly>shop<blogspot,ua,barsy,ox<am>radio,blogspot<fm>radio,user>*<<uk>co>bytemark>dh,vm<blogspot,layershift>j<barsy,barsyonline,retrosnub>cust<nh-serv,no-ip,wellbeingzone,adimo,myspreadshop<gov>api,campaign,service<conn,copro,hosp,independent-commission,independent-inquest,independent-inquiry,independent-panel,independent-review,public-inquiry,royal-commission,pymnt,org>glug,lug,lugs,affinitylottery,raffleentry,weeklylottery<barsy,nimsite<site>canva>my>*<<cloudera>*<convex,cyon,fnwk,folionetwork,fastvps,jele,jouwweb,lelux,loginline,barsy,notion,omniwe,opensocial,madethis,platformsh>*<tst>*<byen,srht,novecore,wpsquared<ac>drr,feedback,forms<ai>uwu,framer<co>carrd,crd,otap>*<com>blogspot<leadpages,lpages,mypi,n4t,xmit>*<firewalledreplit>id<repl>id<supabase<mp>ju<cz>contentproxy9>rsc<realm,e4,blogspot,co,metacentrum>cloud>*<custom<muni>cloud>flt,usr<<<bz>za,mydns,gsj<se>com,blogspot,conf,iopsys,123minsida,itcouldbewor,myspreadshop<group>discourse<team>discourse,jelastic<cc>cleverapps,cloudns,ftpaccess,game-server,myphotos,scrapping,twmail,csx,fantasyleague,spawn>instances<<tech>cleverapps<asia>cloudns,daemon,dix<be>cloudns,webhosting,blogspot,interhostsolutions>cloud<kuleuven>ezproxy<123website,myspreadshop,transurl>*<<cl>cloudns,blogspot<club>cloudns,jele,barsy<cx>cloudns,ath,info,assessments,calculators,funnels,paynow,quizzes,researched,tests<in>cloudns,blogspot,barsy,web,supabase<info>cloudns,dynamic-dns,barrel-of-knowledge,barrell-of-knowledge,dyndns,for-our,groks-the,groks-this,here-for-more,knowsitall,selfip,webhop,barsy,mayfirst,dvrcam,ilovecollege,no-ip,forumz,nsupdate,dnsupdate,v-info<nz>cloudns,co>blogspot<<ph>cloudns<pw>cloudns,x443<me>c66,craft,daplie>localhost<edgestack,filegear,glitch,filegear-sg,lohmus,barsy,mcdir,mcpe,brasilia,ddns,dnsfor,hopto,loginto,noip,webhop,soundcast,tcp4,vp4,diskstation,dscloud,i234,myds,synology,transip>site<yombo,nohost<zone>cloud66,hs,triton>*<stackit,lima<host>cloudaccess,freesite,easypanel,fastvps,myfast,tempurl,wpmudev,jele,mircloud,wp2,half<gdn>cnpy<nl>co,hosting-cluster,blogspot,gov,khplay,123website,myspreadshop,transurl>*<cistron,demon<no>co,blogspot,123hjemmeside,myspreadshop<ru>ac,edu,gov,int,mil,test,eurodir,adygeya,bashkiria,bir,cbg,com,dagestan,grozny,kalmykia,kustanai,marine,mordovia,msk,mytis,nalchik,nov,pyatigorsk,spb,vladikavkaz,vladimir,blogspot,na4u,mircloud,regruhosting>jelastic<myjino>hosting>*<landing>*<spectrum>*<vps>*<<cldmail>hb<mcdir>vps<mcpre,net,org,pp,lk3,ras<email>crisp>on<tawk>p<tawkto>p<<dk>biz,co,firm,reg,store,blogspot,123hjemmeside,myspreadshop<earth>dapps>*,bzz>*<<<kg>us<id>my>rss>*<<flap,co>blogspot<forte<solutions>diher>*<<th>online,shop<fi>dy,blogspot,xn--hkkinen-5wa,iki,cloudplatform>fi<datacenter>demo,paas<kapsi,123kotisivu,myspreadshop<name>her>forgot<his>forgot<<nu>merseine,mine,shacknet,enterprisecloud<tv>better-than,dyndns,on-the-web,worse-than,from,sakura<rocks>myddns,stackit,lima-city,webspace<xyz>blogsite,localzone,crafting,zapto,telebit>*<<one>onred>staging<kin>*<service,homelink<tw>com>mymailer<url,mydns,blogspot<camp>emf>at<<ht>rt<cool>elementor,de<fr>en-root,fbx-os,fbxos,freebox-os,freeboxos,blogspot,goupile,123siteweb,on-web,chirurgiens-dentistes-en-france,dedibox,aeroport,avocat,chambagri,chirurgiens-dentistes,experts-comptables,medecin,notaires,pharmacien,port,veterinaire,myspreadshop,ynh<su>abkhazia,adygeya,aktyubinsk,arkhangelsk,armenia,ashgabad,azerbaijan,balashov,bashkiria,bryansk,bukhara,chimkent,dagestan,east-kazakhstan,exnet,georgia,grozny,ivanovo,jambyl,kalmykia,kaluga,karacol,karaganda,karelia,khakassia,krasnodar,kurgan,kustanai,lenug,mangyshlak,mordovia,msk,murmansk,nalchik,navoi,north-kazakhstan,nov,obninsk,penza,pokrovsk,sochi,spb,tashkent,termez,togliatti,troitsk,tselinograd,tula,tuva,vladikavkaz,vladimir,vologda<space>myfast,heiyu,app-ionos,uber,xs4all<media>framer<photos>framer<website>framer<wiki>framer<at>funkfeuer>wien<futurecms>*,ex>*<in>*<<futurehosting,futuremailing,ortsinfo>ex>*<kunden>*<<co>blogspot<biz,info,123webseite,priv,myspreadshop,12hp,2ix,4lima,lima-city<ms>lab,minisite<work>corpnet<community>nog,ravendb,myforum<ro>co,shop,blogspot,barsy<design>graphic,bss<ae>blogspot<al>blogspot<ar>com>blogspot<<au>com>blogspot,cloudlets>mel<myspreadshop<<ba>blogspot,rs<bg>blogspot,barsy<bj>blogspot<br>com>blogspot,simplesite<leg>ac,al,am,ap,ba,ce,df,es,go,ma,mg,ms,mt,pa,pb,pe,pi,pr,rj,rn,ro,rr,rs,sc,se,sp,to<<by>com>blogspot<mycloud,mediatech<cf>blogspot<cv>blogspot<cy>com>blogspot,scaleforce>j<<<ee>com>blogspot<<eg>com>blogspot<<es>com>blogspot<123miweb,myspreadshop<goog>cloud,translate,usercontent>*<<gr>blogspot,barsy,simplesite<hk>blogspot,secaas,inc,ltd<hu>blogspot<ie>blogspot,myspreadshop<il>co>blogspot,ravpage,mytabit,tabitorder<<is>blogspot<ke>co>blogspot<<kr>blogspot<li>blogspot,caa<lt>blogspot<lu>blogspot,123website<md>blogspot,ir<mk>blogspot<mr>blogspot<mt>com>blogspot<<mx>blogspot<my>blogspot<ng>com>blogspot<col,firm,gen,ltd,ngo<pe>blogspot<pt>blogspot,123paginaweb<qa>blogspot<re>blogspot,can<sg>blogspot,enscaled<sk>blogspot<sn>blogspot<td>blogspot<tr>com>blogspot<<ug>blogspot<uy>com>blogspot<<vn>blogspot<za>co>blogspot<<digital>cloudapps>london<<ci>fin<run>hs,development,ravendb,servers,build>*<code>*<database>*<migration>*<onporter,repl,stackit,val>express,web<wix<st>helioho,kirara,noho<pub>id>*<kin>*<barsy<gl>biz<scot>edu,gov>service<<so>sch,surveys<kz>jcloud,kazteleport>upaas<<tn>orangecloud<gg>kaas,stackit,panel>daemon<<systems>knightpoint<events>koobin,co<direct>libp2p<business>co<education>co<financial>co<place>co<technology>co<bs>we<services>loginline<menu>barsy,barsyonline<mobi>barsy,dscloud<store>barsy,sellfy,shopware,storebase<support>barsy<health>hra<casa>nabu>ui<<pizza>ngrok<news>noticeable<top>now-dns,ntdll,wadl>*<<ovh>nerdpol<mn>nyc<ong>obl<lol>omg<hosting>opencraft<orange>tech<pm>own,name<codes>owo>*<<lc>oy<games>pley,sheezy<bn>co<today>prequalifyme<builders>cloudsite<basketball>aus,nz<edu>rit>git-pages<<xn--p1acf>xn--90amc,xn--j1aef,xn--j1ael8b,xn--h1ahn,xn--j1adp,xn--c1avg,xn--80aaa0cvac,xn--h1aliz,xn--90a1af,xn--41a<mom>ind<farm>storj<pictures>1337<rip>clan<tf>sch<wf>biz,sch<yt>org<management>router<academy>official<faith>ybo<party>ybo<review>ybo<science>ybo<trade>ybo");const s=ue(t,We),i=ue(t,Me);if(0===s.length&&0===i.length)return{type:Ne.NotListed,hostname:n,labels:t};const r=t.length-Math.max(i.length,s.length)-1,c=t.length-s.length-1;return Object.assign({type:Ne.Listed,hostname:n,labels:t,icann:Ve(t,c)},Ve(t,r))},Ke=/^[a-z][*+.a-z-]+:\/\//i,Je=/^([a-z][*+.a-z-]+:\/\/)([^[][^/?]*:[^/?]*:[^/?]*)(.*)/i,Fe=Symbol("NO_HOSTNAME"),$e=e=>{if("function"!=typeof URL)throw new Error("Looks like the new URL() constructor is not globally available in your environment. Please make sure to use a polyfill.");if("string"!=typeof e)return Fe;let a=e.startsWith("//")?`http:${e}`:e.startsWith("/")||Ke.test(e)?e:`http://${e}`;a=a.replace(Je,"$1[$2]$3");try{return new URL(a).hostname}catch(e){return Fe}};const Ge=new(function(){return u((function e(){l(this,e)}),[{key:"hasType",value:function(e,a,o){return!!e.types.includes(a)||void 0!==o&&e.types.includes(o)}},{key:"findRecordsByText",value:function(e,a){var o=this;return this.search(e,(function(e){return o.matchesSearch(o.norm(a),e)}))}},{key:"findRecordsByUrls",value:function(e,a){var o=this;return this.search(e,(function(e){return Math.max.apply(Math,s(a.map((function(a){return o.urlMatches(a,e)}))))}))}},{key:"search",value:function(e,a){var o=this,t=e.filter((function(e){return!!e.additionalObjects.vault})).map((function(e){return e.additionalObjects.vault})).reduce((function(e,a){return e.concat(a.records.map((function(e){return Object.assign(e,{vault:a.name})})))}),[]).filter((function(e){return o.hasType(e,"PASSWORD","TOTP")})).filter(a);return t.sort((function(e,t){return o.recordCompare(e,t,a)})),t}},{key:"absoluteUrl",value:function(e){return/^[a-z][a-z0-9+.-]*:\/\//.test(e)?e:"http://"+e}},{key:"urlMatches",value:function(e,a){if(!e||!a.url)return 0;var o=He($e(e)),t=He($e(a.url));if(null!==o&&null!==t&&void 0!==o.domain&&void 0!==t.domain&&this.arrayEquals(o.topLevelDomains,t.topLevelDomains)&&o.domain===t.domain)return this.arrayEquals(o.subDomains,t.subDomains)?2:this.arrayContainsAll(o.subDomains,t.subDomains)||this.arrayContainsAll(t.subDomains,o.subDomains)?1:0;try{return new URL(e).host===new URL(this.absoluteUrl(a.url)).host?10:0}catch(e){return 0}}},{key:"arrayEquals",value:function(e,a){return e.length===a.length&&e.every((function(e,o){return e===a[o]}))}},{key:"arrayContainsAll",value:function(e,a){return a.every((function(a){return e.includes(a)}))}},{key:"matchesSearch",value:function(e,a){var o=e.toLowerCase();return this.norm(a.name.toLowerCase()).includes(o)||0===a.uuid.indexOf(o)||a.url&&this.norm(a.url.toLowerCase()).includes(o)||a.username&&this.norm(a.username.toLowerCase()).includes(o)||a.filename&&this.norm(a.filename.toLowerCase()).includes(o)}},{key:"norm",value:function(e){return e.normalize("NFD").replace(/[^\u0000-\u00FF]/g,"")}},{key:"recordCompare",value:function(e,a,o){var t=["GREEN","RED","BLUE","DARK","PINK_LAVENDER","CRIMSON_RED","MIDDLE_YELLOW","ANDROID_GREEN","SAGE","ARTICHOKE","NONE"],n=o(a)-o(e);return 0!==n?n:e.color!==a.color?t.indexOf(e.color)-t.indexOf(a.color):e.name.localeCompare(a.name)}}])}());var Be=u((function e(){var a=this;l(this,e),d(this,"restoreState",(function(){return chrome.storage.sync.get("issuer").then((function(e){return a._issuer=e.issuer?e.issuer:void 0,chrome.storage.session.get("oauthToken")})).then((function(e){return a._token=e.oauthToken?e.oauthToken:void 0,chrome.storage.local.get(null)})).then((function(e){return a._vaults=e.vaults?e.vaults:[],a._searches=e.searches?e.searches:{},a._settings=e.settings?e.settings:{show_icon:!0},a}))})),d(this,"callback",(function(e){return a.getAuthState().resolver(e)})),d(this,"getIssuer",(function(){return a._issuer})),d(this,"setIssuer",(function(e){a._issuer=e,chrome.storage.sync.set({issuer:e})})),d(this,"hasIssuer",(function(){return!!a.getIssuer()})),d(this,"getToken",(function(){return a._token})),d(this,"setToken",(function(e){a._token=e,chrome.storage.session.set({oauthToken:e})})),d(this,"getVaults",(function(){return a._vaults})),d(this,"setVaults",(function(e){a._vaults=e,chrome.storage.local.set({vaults:e})})),d(this,"getAuthState",(function(){return a._authState})),d(this,"setAuthState",(function(e){a._authState=e})),d(this,"getSettings",(function(){return a._settings})),d(this,"setSettings",(function(e){a._settings=e,chrome.storage.local.set({settings:e})})),d(this,"hasPermissions",(function(){return chrome.permissions.contains({origins:["*://*/*"]})})),d(this,"fetchToken",(function(e){if(e=Object.assign({prompt:!1,query:{authVault:"access-if-unlocked"}},e),!a.hasIssuer())return Promise.reject(new Error("disconnected"));var o=a.getToken();if(o&&o.valid_until>Date.now())return Promise.resolve(o);var t={state:a.random(32),nonce:a.random(32)};a.setAuthState(t);var n=new(ce())({clientId:"573abe51-0dc2-4293-bce9-599321164042",accessTokenUri:a.getIssuer()+"/login/oauth2/token",authorizationUri:a.getIssuer()+"/login/oauth2/authorize",redirectUri:"https://www.topicus-keyhub.com/browser-extension-callback.html",scopes:["openid","profile","access_vault"],state:t.state});return a.createTokenCall(e,n,!1).then((function(e){return n.code.getToken(e,{body:{code_verifier:t.pkceVerifier}})})).then((function(e){return a.storeToken(e)}),(function(o){return a.createTokenCall(e,n,!0).then((function(e){return n.code.getToken(e,{body:{code_verifier:t.pkceVerifier}})})).then((function(e){return a.storeToken(e)}))})).then((function(e){return e}),(function(e){console.log(e)}))})),d(this,"createTokenCall",(function(e,o,t){return new Promise((function(n,s){var i=a.getAuthState();i.time=Date.now(),i.resolver=n,i.pkceVerifier=a.random(32),a.setAuthState(i);var r=new TextEncoder("utf-8").encode(i.pkceVerifier);self.crypto.subtle.digest("SHA-256",r).then((function(n){var s={response_type:"code",nonce:i.nonce,code_challenge:a.base64url(n),code_challenge_method:"S256"},r=e.prompt||t;s=r?Object.assign(s,e.query):Object.assign(s,e.query,{prompt:"none"}),t||chrome.tabs.query({active:!0,currentWindow:!0},(function(e){a._lastActiveTab=e.length>0?e[0].id:void 0})),a._restoreLastActiveTab=r,chrome.tabs.create({url:o.code.getUri({query:s}),active:r})}))}))})),d(this,"base64url",(function(e){var a=String.fromCharCode.apply(String,s(new Uint8Array(e)));return btoa(a).replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_")})),d(this,"random",(function(e){var a=new Uint8Array(e);return self.crypto.getRandomValues(a),Array.from(a,(function(e){return("0"+e.toString(16)).substr(-2)})).join("")})),d(this,"fetchJSON",(function(e,o,t){return a.fetchResponse(e,o,t).then((function(e){return e.json()}),(function(e){throw e}))})),d(this,"fetchResponse",(function(e,o,t){return a.fetchToken(o).then((function(o){return fetch(e,{headers:null==t?a.buildHeaders():a.buildHeaders(t,t+100-1)})})).then((function(n){return 406===n.status?(a.disconnect(),Promise.reject(new Error("version_mismatch"))):401===n.status?n.json().then((function(o){var n=o.applicationError;if("USERNAME_PASSWORD_TOKEN_LOGIN_REQUIRED"===n||"USERNAME_PASSWORD_LOGIN_REQUIRED"===n||"FEDERATED_LOGIN_REQUIRED"===n||"VAULT_NOT_UNLOCKED"===n)return a.reauth(e,o,t);var s=new Error("auth_error");return s.body=o,Promise.reject(s)}),(function(n){return a.clearSession(),a.fetchResponse(e,o,t)})):409===n.status?n.json().then((function(e){var a=new Error("conflict");return a.body=e,Promise.reject(a)})):Promise.resolve(n)}))})),d(this,"reauth",(function(e,o,t){return a.setToken(void 0),chrome.storage.local.remove("oauthToken"),a.fetchResponse(e,{prompt:"VAULT_NOT_UNLOCKED"!==o.applicationError,query:{authVault:"access",authRequiredLevel:"high",authError:o.applicationError,authErrorInfo:JSON.stringify(o.applicationErrorParameters)}},t)})),d(this,"storeToken",(function(e){var o=e.data;return o.expires_in&&(o.valid_until=Date.now()+1e3*o.expires_in),chrome.storage.local.set({oauthToken:o}),a.setToken(o),o})),d(this,"selfLink",(function(e){return e.links.find((function(e){return"self"===e.rel})).href})),d(this,"fetchAccount",(function(){return a.fetchJSON(a.getIssuer()+"/keyhub/rest/v1/account/me")})),d(this,"readCachedVaults",(function(){return a.getVaults()})),d(this,"fetchVaults",(function(){var e=a.fetchAccount();return a.fetchPersonalVault(e).then((function(o){return a.fetchGroupVaults(e).then((function(e){return e.unshift(o),a.setVaults(e),e})).catch((function(e){console.log(e)}))})).catch((function(e){console.log(e)}))})),d(this,"fetchPersonalVault",(function(e){return e.then((function(e){return a.fetchJSON(a.selfLink(e)+"?additional=vault&additional=settings")}))})),d(this,"fetchGroupVaults",(function(e){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10;return e.then((function(e){return a.fetchResponse(a.selfLink(e)+"/group?group.hasVault=true&vaultAccess=true&sort=asc-group.name&additional=vault",null,o)})).then((function(o){var n=o.headers.get("Content-Range");return o.json().then((function(o){var s=o.items;if(t>1&&null!=n){var i=a.parseContentRange(n);if(null!=i&&a.hasMore(i))return a.fetchGroupVaults(e,i.end+1,t-1).then((function(e){return s.concat(e)}))}return s}))}))})),d(this,"fetchUnlockedRecord",(function(e){return a.fetchJSON(a.selfLink(e)+"?additional=secret")})),d(this,"fetchRotatingPassword",(function(){return a.fetchAccount().then((function(e){return e.tokenPasswordEnabled?a.fetchJSON(a.getIssuer()+"/keyhub/rest/v1/account/provisioning/tokenpwd",{query:{authRequiredLevel:"high"}}).then((function(a){return Object.assign({type:"PASSWORD",username:e.username},a)})):Promise.reject()}))})),d(this,"buildHeaders",(function(e,o){var t=a.getToken(),n=new Headers;return n.append("Accept","application/vnd.topicus.keyhub+json;version=v63"),n.append("Content-Type","application/vnd.topicus.keyhub+json;version=v63"),n.append("Authorization","Bearer "+t.access_token),null!=e&&n.append("Range","items="+e+"-"+o),t.vaultSession&&n.append("topicus-Vault-session",t.vaultSession),n})),d(this,"disconnect",(function(){chrome.storage.sync.clear(),chrome.storage.local.clear(),a.reset()})),d(this,"reset",(function(){chrome.contextMenus.removeAll(),a.setToken(void 0),a.setVaults([]),a._authState=void 0})),d(this,"clearSession",(function(){a.setToken(void 0),a.setVaults([]),chrome.storage.local.remove(["oauthToken","vaults"])})),d(this,"logout",(function(){return a.clearSession(),new Promise((function(e,o){chrome.tabs.create({url:a.getIssuer()+"/login/oauth2/logout",active:!0},(function(a){e()}))}))})),d(this,"updateBadge",(function(e){if(e.url){var o=Ge.findRecordsByUrls(a.getVaults(),[e.url]).length;(chrome.action?chrome.action:chrome.browserAction).setBadgeText({tabId:e.id,text:0===o?"":o.toString()}).catch((function(){}))}return!0})),d(this,"hostFromUrl",(function(e){try{return new URL(e).host}catch(a){return e}})),d(this,"getSearchQuery",(function(e){var o="search-"+a.hostFromUrl(e);return Promise.resolve(a._searches[o]||"")})),d(this,"setSearchQuery",(function(e,o){return a._searches["search-"+a.hostFromUrl(e)]=o,chrome.storage.session.set({searches:a._searches})})),d(this,"checkLicense",(function(e,a,o){if(a!==o)return console.log("Issuer does not match URI: "+a+" !== "+o),Promise.resolve("mismatch");var t=L({keys:[{kty:"RSA",e:"AQAB",use:"sig",kid:"LICENSEv1",alg:"RS256",n:"t5-rvXMkfY0K3AtZovx9jRQmSKGbX-3FRgbB6AaCKeZvGMNQqUWIJiKUlqZynYBspJ07AdCuZden6Li1SNnuq138rzyyjzmeZWhTQZlehSb-sFFclb0xqMgIRpUB1ANqfvDy0iOFu068Eq0W4UwMzp-w5VnRa2ZBHXvEUfPeBw53MQygFFADMpaOMV00uYS6lSyTd-NugSd2GcVZ1u9U1x06_pGVUEtCrem9CNJiypbNH2zFhvamRjdcWXKij_UMrWak5Uc7Rm8HmXOQ_0i4p7Ne13Lv3UIiLiBpfvAeT-yiB5hyLJqMXW0Fik2dDyUke6QG8axFcGDqB1hajzwTTlDN2tS1hJMzXQdpM2QcQyd_YYbEH_v8T35F2uHsXH7bm1W214stjmH6t-ujMLBzWneov4ME95tsuUWfXkQgCH80MyJvidtLl91Upq6WGlX5IroXZOIDZhmsgpqqTkoIn-45e7I8DBxjK-Pr4xc2sh8szM84qWxEBJRRybnUVW67WHReWV_cnUfGJAx0uAvV2n9zZQiHdB6ShRuFzCZ7q1CMh1Ttr9gk29ReVb-pKqA511xLJi5FA4GpeF03C-PrYa3cPx-JG6h44Z8JWlNb9zHGvFUdAwtPDc-xC_mDIdn-me1GmwPSNNFuBZ37RgynRCgZC-cgwiCfKN_Vm7XyHu0"},{kty:"RSA",e:"AQAB",use:"sig",kid:"LICENSEv2",alg:"RS256",n:"7u4uSMkGbH7Uk_Wr9AjUf68aOMJTB0Cmg1fqfMyJj0NJMURFbZP-faqC0xE-qp1BZmzWAGBCCPlKFHPnvpd_L93osimHZ9UKDlXEkKXmo_einibfU6WQc2YQfrVEGs8wj26596V2eZIrkh78NwQ-re5VWVE6ZD-cPCQiKwVTfZEG41tuGpKpKuY_eQBdFuk5Zs8E0UZFaKRY17uWhThQgaWzlJfPGj9cnkXIRDIt6GGearnpHxb53SvnfSAY6c_tWaDhL7a9lMQBUg3zH55Vm-iVP7afkpwn80zuKFzCyVVNebK12CcEGnwCXJyJzWwtpoAuelMwo79Rrbl3bf9jZIE0icYdRATdAofViOIzUCcP5pbIexXapH3sfmoab2VxSW4lygqq3Ub-Ix13jX_i2q7SQuTEVS6PjVe71Fiu_RGXphsxgH9vs1Jd9Hs9jXu0VdzzCOMavvpSaag1JmepeCJoTRf9jujrJGN6QmHGSmJmHL6pvbvGCFP2eYprh9yH0Z0tu-0ncXmG7UKA7WjxlO-rvrJh7nacd-DcMYq-U6R6F76iCJlPfPtmhYiWMZeI3ljn7lq7SojjTGrpcBqIvuhoTcH_egFgxGfVweM_QdQ39NZee6Lonaj2tjUmcw0wQ6UEfsqWoPoEXMkNEVX-gsa70XCEkxHnr6LTQ5wWEss"},{kty:"RSA",e:"AQAB",use:"sig",kid:"TEST_LICENSE_SIGNING_KEY",alg:"RS256",n:"1xw4RPDHTEgPCQ6fs4IfeKovD0Rrw6Vt_KGdqHBGrKnmoI_lEw04APR15Iq1vqCVchg0TVKPqq7FJIJSlaXgjZY-fgk62T2t7_G0k8bdAuOYlN-FGg7_MHNmMYuZ6JxlCfcp9KKEHP2xRF_Vo9Dhuh8ZF4EzyxQsbIt0lXIHqztDDbgh_3DBEKKeoJDljHc4JQKYGKaH73EYnFWqYoOsGRej4ICLIi9YUpTmf6P2y1FeOs6Wbf5EAQc6AnoThQ3PyBxQ9XT3XYX7utZe2R15m3q6C8Wgt1wg8CpSZYWtrQF_aNTmOb9ZhxWCLZcwTuFFaSp_CoP9QgkT94Wr888dXrD3Kg1Jw3URvHtD5JkhrFXfi8sGlZVcoVAtVAY-gnF_glCwN7pYxFVmhOQkQz3EO9P3tqrL4d3Eb8ePseOcVVbD5XI3jH6Y05ZMA3xTVWy9qPauQaQtSh-Ht2DNh0LudfFs-O5DOiBQrRlkeyhqK0H6ubDkCYieEv3gsCFom_pedewkOjXllaJ5jLMpZL4_QDMT-S9GB5ORQHTKTsv8GSntHAgjA-OUrPXFmOzvEoaFBI3C0ozqOBiLk7WZjuItaXevFFZRcrhhIJm1NKCf3hUpD16Ez2Ey320uME84uejFzcANFMbOOknIu2cVCwnt7x4qDkTAAXFg2V6156pe398"}]});return ie(atob(e),t,{}).then((function(e){var o=e.payload.dmn;if(void 0===o||0===o.length)return console.log("License does not contain domains, cannot make a match"),Promise.resolve("unknown");var t=new URL(a).hostname;return o.some((function(e){return new URL(e).hostname===t}))?(console.log("License matches issuer "+a),Promise.resolve("match")):(console.log("License does not match issuer "+a+" in "+o),Promise.resolve("mismatch"))})).catch((function(e){return console.log("License verification failed with "+e),Promise.resolve("mismatch")}))})),d(this,"invoke",(function(e){return"getIssuer"===e.method?Promise.resolve(a.getIssuer()):"getSearchQuery"===e.method?a.getSearchQuery(e.url):"setSearchQuery"===e.method?a.setSearchQuery(e.url,e.query):"readCachedVaults"===e.method?Promise.resolve(a.readCachedVaults()):"fetchVaults"===e.method?a.fetchVaults():"fetchUnlockedRecord"===e.method?a.fetchUnlockedRecord(e.record):"fetchRotatingPassword"===e.method?a.fetchRotatingPassword():"updateBadge"===e.method?Promise.resolve(a.updateBadge(e.tab)):"readSettings"===e.method?Promise.resolve(a.getSettings()):"writeSettings"===e.method?Promise.resolve(a.setSettings(e.settings)):"hasPermissions"===e.method?a.hasPermissions():"logout"===e.method?a.logout():void console.log("invalid request",e)})),d(this,"handleMessage",(function(e,o,t){if(o.extensionId===chrome.runtime.id||o.id===chrome.runtime.id)if("record-count"===e.type)try{e.urls[0].startsWith(a.getIssuer())?t({count:0}):t({count:Ge.findRecordsByUrls(a.readCachedVaults(),e.urls).length})}catch(e){}else if("check-license"===e.type)a.checkLicense(e.license,e.issuer,e.uri).then((function(e){t({status:e})}));else if("link"===e.type||"query"===e.type){"link"===e.type&&(void 0===a.getIssuer()?(a.reset(),chrome.storage.local.remove(["oauthToken","vaults"]),a.setIssuer(e.issuer),a.syncVersion()):console.log("Blocking a request to unlink the extension"));try{var n=a.getIssuer();t({linked:n===e.issuer,issuer:n})}catch(e){}}else if("unlink"===e.type)a.reset(),a.setIssuer(void 0),chrome.storage.local.remove(["oauthToken","vaults"]),chrome.storage.sync.remove("issuer"),t({linked:!1});else{if("invoke"===e.type)return a.invoke(e).then((function(e){try{t({ok:!0,msg:e})}catch(e){console.log(e)}}),(function(e){try{t({ok:!1,error:Object.assign({message:e.message},e)})}catch(e){console.log(e)}})),!0;if("query-tab-url"===e.type)t({url:o.tab.url});else{if("add-new-record"===e.type)return chrome.tabs.query({active:!0,currentWindow:!0},(function(e){chrome.tabs.create({url:a.getIssuer()+"/console/vaults/newrecord?url="+encodeURIComponent(e[0].url)})})),!1;if("go-to-keyhub"===e.type)return chrome.tabs.create({url:a.getIssuer()}),!1;if("callback"===e.type)return a.handleCallback({tabId:o.tab.id,url:o.tab.url.split("#")[1]}),!1;if("relay"===e.type)return chrome.tabs.query({active:!0,currentWindow:!0},(function(a){a.length>0&&(e.body.relayed=!0,chrome.tabs.sendMessage(a[0].id,e.body))})),!1;if("generate-nonce"===e.type){var s=crypto.randomUUID();chrome.storage.session.set({iframeNonce:s}).then((function(){t({nonce:s})}))}else"verify-nonce"===e.type&&chrome.storage.session.get("iframeNonce").then((function(a){var o=null!==a.iframeNonce&&e.nonce===a.iframeNonce;o||console.log("Invalid nonce detected, refusing to render the popup: expected "+a.iframeNonce+", got "+e.nonce),t({ok:o}),chrome.storage.session.remove("iframeNonce")}))}}})),d(this,"handleCallback",(function(e){try{-1!==e.tabId&&(chrome.tabs.remove(e.tabId),a._restoreLastActiveTab&&void 0!==a._lastActiveTab&&chrome.tabs.update(a._lastActiveTab,{active:!0})),a.callback(e.url)}catch(e){console.log(e)}return{cancel:!0}})),d(this,"handleTabUpdated",(function(e,o,t){(o.url||o.status)&&a.updateBadge(t)})),d(this,"handleTabCreated",(function(e){a.updateBadge(e)})),d(this,"handleTabReplaced",(function(e,o){chrome.tabs.get(e,(function(e){a.updateBadge(e)}))})),d(this,"handleTabActivated",(function(e){chrome.tabs.get(e.tabId,(function(e){a.updateBadge(e)}))})),d(this,"handleCommand",(function(e){a.hasIssuer()&&chrome.tabs.query({active:!0,currentWindow:!0},(function(o){1===o.length&&("trigger-fill-with-keyhub"===e?chrome.tabs.sendMessage(o[0].id,{type:"trigger-fill"}):"trigger-fill-rotating-pwd"===e&&a.fetchRotatingPassword().then((function(e){chrome.tabs.sendMessage(o[0].id,{type:"fill",creds:e})}),(function(e){})))}))})),d(this,"handleContextMenuClick",(function(e,a){chrome.tabs.sendMessage(a.id,{type:"trigger-fill",editable:e.editable})})),d(this,"syncVersion",(function(){a.hasIssuer()&&fetch(a.getIssuer()+"/keyhub/rest/v1/info",{headers:new Headers({Accept:"application/vnd.topicus.keyhub+json"})}).then((function(e){return e.ok?e.json().then((function(e){return Math.max.apply(Math,s(e.contractVersions))})):21})).then((function(e){chrome.storage.local.set({version:e},(function(){return chrome.runtime.reload()}))}))})),d(this,"parseContentRange",(function(e){var a=e.match(/^(\w+) ((\d+)-(\d+)|\*)\/(\d+|\*)$/);if(!a)return null;var o=n(a,6),t=o[1],s=o[3],i=o[4],r=o[5],c={unit:t,start:null!=s?Number(s):null,end:null!=i?Number(i):null,size:"*"===r?null:Number(r)};return null===c.start&&null===c.end&&null===c.size?null:c})),d(this,"hasMore",(function(e){return null!=e.size?null!=e.end?e.end+1<e.size:e.start+1<e.size:null!=e.end&&e.end>e.start})),console.log("Loading KeyHub Browser extension version 6")})),Qe=function(){return u((function e(){l(this,e)}),[{key:"hasType",value:function(e,a,o){return!!e.types.includes(a)||void 0!==o&&e.types.includes(o)}},{key:"findRecordsByText",value:function(e,a){var o=this;return this.search(e,(function(e){return o.matchesSearch(o.norm(a),e)}))}},{key:"findRecordsByUrls",value:function(e,a){var o=this;return this.search(e,(function(e){return Math.max.apply(Math,s(a.map((function(a){return o.urlMatches(a,e)}))))}))}},{key:"search",value:function(e,a){var o=this,t=e.filter((function(e){return!!e.additionalObjects.vault})).map((function(e){return e.additionalObjects.vault})).reduce((function(e,a){return e.concat(a.records.map((function(e){return Object.assign(e,{vault:a.name})})))}),[]).filter((function(e){return o.hasType(e,"PASSWORD","TOTP")})).filter(a);return t.sort((function(e,t){return o.recordCompare(e,t,a)})),t}},{key:"absoluteUrl",value:function(e){return/^[a-z][a-z0-9+.-]*:\/\//.test(e)?e:"http://"+e}},{key:"urlMatches",value:function(e,a){if(!e||!a.url)return 0;var o=He($e(e)),t=He($e(a.url));if(null!==o&&null!==t&&void 0!==o.domain&&void 0!==t.domain&&this.arrayEquals(o.topLevelDomains,t.topLevelDomains)&&o.domain===t.domain)return this.arrayEquals(o.subDomains,t.subDomains)?2:this.arrayContainsAll(o.subDomains,t.subDomains)||this.arrayContainsAll(t.subDomains,o.subDomains)?1:0;try{return new URL(e).host===new URL(this.absoluteUrl(a.url)).host?10:0}catch(e){return 0}}},{key:"arrayEquals",value:function(e,a){return e.length===a.length&&e.every((function(e,o){return e===a[o]}))}},{key:"arrayContainsAll",value:function(e,a){return a.every((function(a){return e.includes(a)}))}},{key:"matchesSearch",value:function(e,a){var o=e.toLowerCase();return this.norm(a.name.toLowerCase()).includes(o)||0===a.uuid.indexOf(o)||a.url&&this.norm(a.url.toLowerCase()).includes(o)||a.username&&this.norm(a.username.toLowerCase()).includes(o)||a.filename&&this.norm(a.filename.toLowerCase()).includes(o)}},{key:"norm",value:function(e){return e.normalize("NFD").replace(/[^\u0000-\u00FF]/g,"")}},{key:"recordCompare",value:function(e,a,o){var t=["GREEN","RED","BLUE","DARK","PINK_LAVENDER","CRIMSON_RED","MIDDLE_YELLOW","ANDROID_GREEN","SAGE","ARTICHOKE","NONE"],n=o(a)-o(e);return 0!==n?n:e.color!==a.color?t.indexOf(e.color)-t.indexOf(a.color):e.name.localeCompare(a.name)}}])}();const Ze=new Qe;var Xe=u((function e(){var a=this;l(this,e),d(this,"restoreState",(function(){return chrome.storage.sync.get("issuer").then((function(e){return a._issuer=e.issuer?e.issuer:void 0,chrome.storage.session.get("oauthToken")})).then((function(e){return a._token=e.oauthToken?e.oauthToken:void 0,chrome.storage.local.get(null)})).then((function(e){return a._vaults=e.vaults?e.vaults:[],a._searches=e.searches?e.searches:{},a._settings=e.settings?e.settings:{show_icon:!0},a}))})),d(this,"callback",(function(e){return a.getAuthState().resolver(e)})),d(this,"getIssuer",(function(){return a._issuer})),d(this,"setIssuer",(function(e){a._issuer=e,chrome.storage.sync.set({issuer:e})})),d(this,"hasIssuer",(function(){return!!a.getIssuer()})),d(this,"getToken",(function(){return a._token})),d(this,"setToken",(function(e){a._token=e,chrome.storage.session.set({oauthToken:e})})),d(this,"getVaults",(function(){return a._vaults})),d(this,"setVaults",(function(e){a._vaults=e,chrome.storage.local.set({vaults:e})})),d(this,"getAuthState",(function(){return a._authState})),d(this,"setAuthState",(function(e){a._authState=e})),d(this,"getSettings",(function(){return a._settings})),d(this,"setSettings",(function(e){a._settings=e,chrome.storage.local.set({settings:e})})),d(this,"hasPermissions",(function(){return chrome.permissions.contains({origins:["*://*/*"]})})),d(this,"fetchToken",(function(e){if(e=Object.assign({prompt:!1,query:{authVault:"access-if-unlocked"}},e),!a.hasIssuer())return Promise.reject(new Error("disconnected"));var o=a.getToken();if(o&&o.valid_until>Date.now())return Promise.resolve(o);var t={state:a.random(32),nonce:a.random(32)};a.setAuthState(t);var n=new(ce())({clientId:"573abe51-0dc2-4293-bce9-599321164042",accessTokenUri:a.getIssuer()+"/login/oauth2/token",authorizationUri:a.getIssuer()+"/login/oauth2/authorize",redirectUri:"https://www.topicus-keyhub.com/browser-extension-callback.html",scopes:["openid","profile","access_vault"],state:t.state});return a.createTokenCall(e,n,!1).then((function(e){return n.code.getToken(e,{body:{code_verifier:t.pkceVerifier}})})).then((function(e){return a.storeToken(e)}),(function(o){return a.createTokenCall(e,n,!0).then((function(e){return n.code.getToken(e,{body:{code_verifier:t.pkceVerifier}})})).then((function(e){return a.storeToken(e)}))})).then((function(e){return e}),(function(e){console.log(e)}))})),d(this,"createTokenCall",(function(e,o,t){return new Promise((function(n,s){var i=a.getAuthState();i.time=Date.now(),i.resolver=n,i.pkceVerifier=a.random(32),a.setAuthState(i);var r=new TextEncoder("utf-8").encode(i.pkceVerifier);self.crypto.subtle.digest("SHA-256",r).then((function(n){var s={response_type:"code",nonce:i.nonce,code_challenge:a.base64url(n),code_challenge_method:"S256"},r=e.prompt||t;s=r?Object.assign(s,e.query):Object.assign(s,e.query,{prompt:"none"}),t||chrome.tabs.query({active:!0,currentWindow:!0},(function(e){a._lastActiveTab=e.length>0?e[0].id:void 0})),a._restoreLastActiveTab=r,chrome.tabs.create({url:o.code.getUri({query:s}),active:r})}))}))})),d(this,"base64url",(function(e){var a=String.fromCharCode.apply(String,s(new Uint8Array(e)));return btoa(a).replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_")})),d(this,"random",(function(e){var a=new Uint8Array(e);return self.crypto.getRandomValues(a),Array.from(a,(function(e){return("0"+e.toString(16)).substr(-2)})).join("")})),d(this,"fetchJSON",(function(e,o,t){return a.fetchResponse(e,o,t).then((function(e){return e.json()}),(function(e){throw e}))})),d(this,"fetchResponse",(function(e,o,t){return a.fetchToken(o).then((function(o){return fetch(e,{headers:null==t?a.buildHeaders():a.buildHeaders(t,t+100-1)})})).then((function(n){return 406===n.status?(a.disconnect(),Promise.reject(new Error("version_mismatch"))):401===n.status?n.json().then((function(o){var n=o.applicationError;if("USERNAME_PASSWORD_TOKEN_LOGIN_REQUIRED"===n||"USERNAME_PASSWORD_LOGIN_REQUIRED"===n||"FEDERATED_LOGIN_REQUIRED"===n||"VAULT_NOT_UNLOCKED"===n)return a.reauth(e,o,t);var s=new Error("auth_error");return s.body=o,Promise.reject(s)}),(function(n){return a.clearSession(),a.fetchResponse(e,o,t)})):409===n.status?n.json().then((function(e){var a=new Error("conflict");return a.body=e,Promise.reject(a)})):Promise.resolve(n)}))})),d(this,"reauth",(function(e,o,t){return a.setToken(void 0),chrome.storage.local.remove("oauthToken"),a.fetchResponse(e,{prompt:"VAULT_NOT_UNLOCKED"!==o.applicationError,query:{authVault:"access",authRequiredLevel:"high",authError:o.applicationError,authErrorInfo:JSON.stringify(o.applicationErrorParameters)}},t)})),d(this,"storeToken",(function(e){var o=e.data;return o.expires_in&&(o.valid_until=Date.now()+1e3*o.expires_in),chrome.storage.local.set({oauthToken:o}),a.setToken(o),o})),d(this,"selfLink",(function(e){return e.links.find((function(e){return"self"===e.rel})).href})),d(this,"fetchAccount",(function(){return a.fetchJSON(a.getIssuer()+"/keyhub/rest/v1/account/me")})),d(this,"readCachedVaults",(function(){return a.getVaults()})),d(this,"fetchVaults",(function(){var e=a.fetchAccount();return a.fetchPersonalVault(e).then((function(o){return a.fetchGroupVaults(e).then((function(e){return e.unshift(o),a.setVaults(e),e})).catch((function(e){console.log(e)}))})).catch((function(e){console.log(e)}))})),d(this,"fetchPersonalVault",(function(e){return e.then((function(e){return a.fetchJSON(a.selfLink(e)+"?additional=vault&additional=settings")}))})),d(this,"fetchGroupVaults",(function(e){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10;return e.then((function(e){return a.fetchResponse(a.selfLink(e)+"/group?group.hasVault=true&vaultAccess=true&sort=asc-group.name&additional=vault",null,o)})).then((function(o){var n=o.headers.get("Content-Range");return o.json().then((function(o){var s=o.items;if(t>1&&null!=n){var i=a.parseContentRange(n);if(null!=i&&a.hasMore(i))return a.fetchGroupVaults(e,i.end+1,t-1).then((function(e){return s.concat(e)}))}return s}))}))})),d(this,"fetchUnlockedRecord",(function(e){return a.fetchJSON(a.selfLink(e)+"?additional=secret")})),d(this,"fetchRotatingPassword",(function(){return a.fetchAccount().then((function(e){return e.tokenPasswordEnabled?a.fetchJSON(a.getIssuer()+"/keyhub/rest/v1/account/provisioning/tokenpwd",{query:{authRequiredLevel:"high"}}).then((function(a){return Object.assign({type:"PASSWORD",username:e.username},a)})):Promise.reject()}))})),d(this,"buildHeaders",(function(e,o){var t=a.getToken(),n=new Headers;return n.append("Accept","application/vnd.topicus.keyhub+json;version=v69"),n.append("Content-Type","application/vnd.topicus.keyhub+json;version=v69"),n.append("Authorization","Bearer "+t.access_token),null!=e&&n.append("Range","items="+e+"-"+o),t.vaultSession&&n.append("topicus-Vault-session",t.vaultSession),n})),d(this,"disconnect",(function(){chrome.storage.sync.clear(),chrome.storage.local.clear(),a.reset()})),d(this,"reset",(function(){chrome.contextMenus.removeAll(),a.setToken(void 0),a.setVaults([]),a._authState=void 0})),d(this,"clearSession",(function(){a.setToken(void 0),a.setVaults([]),chrome.storage.local.remove(["oauthToken","vaults"])})),d(this,"logout",(function(){return a.clearSession(),new Promise((function(e,o){chrome.tabs.create({url:a.getIssuer()+"/login/oauth2/logout",active:!0},(function(a){e()}))}))})),d(this,"updateBadge",(function(e){if(e.url){var o=Ze.findRecordsByUrls(a.getVaults(),[e.url]).length;(chrome.action?chrome.action:chrome.browserAction).setBadgeText({tabId:e.id,text:0===o?"":o.toString()}).catch((function(){}))}return!0})),d(this,"hostFromUrl",(function(e){try{return new URL(e).host}catch(a){return e}})),d(this,"getSearchQuery",(function(e){var o="search-"+a.hostFromUrl(e);return Promise.resolve(a._searches[o]||"")})),d(this,"setSearchQuery",(function(e,o){return a._searches["search-"+a.hostFromUrl(e)]=o,chrome.storage.session.set({searches:a._searches})})),d(this,"checkLicense",(function(e,a,o){if(a!==o)return console.log("Issuer does not match URI: "+a+" !== "+o),Promise.resolve("mismatch");var t=L({keys:[{kty:"RSA",e:"AQAB",use:"sig",kid:"LICENSEv1",alg:"RS256",n:"t5-rvXMkfY0K3AtZovx9jRQmSKGbX-3FRgbB6AaCKeZvGMNQqUWIJiKUlqZynYBspJ07AdCuZden6Li1SNnuq138rzyyjzmeZWhTQZlehSb-sFFclb0xqMgIRpUB1ANqfvDy0iOFu068Eq0W4UwMzp-w5VnRa2ZBHXvEUfPeBw53MQygFFADMpaOMV00uYS6lSyTd-NugSd2GcVZ1u9U1x06_pGVUEtCrem9CNJiypbNH2zFhvamRjdcWXKij_UMrWak5Uc7Rm8HmXOQ_0i4p7Ne13Lv3UIiLiBpfvAeT-yiB5hyLJqMXW0Fik2dDyUke6QG8axFcGDqB1hajzwTTlDN2tS1hJMzXQdpM2QcQyd_YYbEH_v8T35F2uHsXH7bm1W214stjmH6t-ujMLBzWneov4ME95tsuUWfXkQgCH80MyJvidtLl91Upq6WGlX5IroXZOIDZhmsgpqqTkoIn-45e7I8DBxjK-Pr4xc2sh8szM84qWxEBJRRybnUVW67WHReWV_cnUfGJAx0uAvV2n9zZQiHdB6ShRuFzCZ7q1CMh1Ttr9gk29ReVb-pKqA511xLJi5FA4GpeF03C-PrYa3cPx-JG6h44Z8JWlNb9zHGvFUdAwtPDc-xC_mDIdn-me1GmwPSNNFuBZ37RgynRCgZC-cgwiCfKN_Vm7XyHu0"},{kty:"RSA",e:"AQAB",use:"sig",kid:"LICENSEv2",alg:"RS256",n:"7u4uSMkGbH7Uk_Wr9AjUf68aOMJTB0Cmg1fqfMyJj0NJMURFbZP-faqC0xE-qp1BZmzWAGBCCPlKFHPnvpd_L93osimHZ9UKDlXEkKXmo_einibfU6WQc2YQfrVEGs8wj26596V2eZIrkh78NwQ-re5VWVE6ZD-cPCQiKwVTfZEG41tuGpKpKuY_eQBdFuk5Zs8E0UZFaKRY17uWhThQgaWzlJfPGj9cnkXIRDIt6GGearnpHxb53SvnfSAY6c_tWaDhL7a9lMQBUg3zH55Vm-iVP7afkpwn80zuKFzCyVVNebK12CcEGnwCXJyJzWwtpoAuelMwo79Rrbl3bf9jZIE0icYdRATdAofViOIzUCcP5pbIexXapH3sfmoab2VxSW4lygqq3Ub-Ix13jX_i2q7SQuTEVS6PjVe71Fiu_RGXphsxgH9vs1Jd9Hs9jXu0VdzzCOMavvpSaag1JmepeCJoTRf9jujrJGN6QmHGSmJmHL6pvbvGCFP2eYprh9yH0Z0tu-0ncXmG7UKA7WjxlO-rvrJh7nacd-DcMYq-U6R6F76iCJlPfPtmhYiWMZeI3ljn7lq7SojjTGrpcBqIvuhoTcH_egFgxGfVweM_QdQ39NZee6Lonaj2tjUmcw0wQ6UEfsqWoPoEXMkNEVX-gsa70XCEkxHnr6LTQ5wWEss"},{kty:"RSA",e:"AQAB",use:"sig",kid:"TEST_LICENSE_SIGNING_KEY",alg:"RS256",n:"1xw4RPDHTEgPCQ6fs4IfeKovD0Rrw6Vt_KGdqHBGrKnmoI_lEw04APR15Iq1vqCVchg0TVKPqq7FJIJSlaXgjZY-fgk62T2t7_G0k8bdAuOYlN-FGg7_MHNmMYuZ6JxlCfcp9KKEHP2xRF_Vo9Dhuh8ZF4EzyxQsbIt0lXIHqztDDbgh_3DBEKKeoJDljHc4JQKYGKaH73EYnFWqYoOsGRej4ICLIi9YUpTmf6P2y1FeOs6Wbf5EAQc6AnoThQ3PyBxQ9XT3XYX7utZe2R15m3q6C8Wgt1wg8CpSZYWtrQF_aNTmOb9ZhxWCLZcwTuFFaSp_CoP9QgkT94Wr888dXrD3Kg1Jw3URvHtD5JkhrFXfi8sGlZVcoVAtVAY-gnF_glCwN7pYxFVmhOQkQz3EO9P3tqrL4d3Eb8ePseOcVVbD5XI3jH6Y05ZMA3xTVWy9qPauQaQtSh-Ht2DNh0LudfFs-O5DOiBQrRlkeyhqK0H6ubDkCYieEv3gsCFom_pedewkOjXllaJ5jLMpZL4_QDMT-S9GB5ORQHTKTsv8GSntHAgjA-OUrPXFmOzvEoaFBI3C0ozqOBiLk7WZjuItaXevFFZRcrhhIJm1NKCf3hUpD16Ez2Ey320uME84uejFzcANFMbOOknIu2cVCwnt7x4qDkTAAXFg2V6156pe398"}]});return ie(atob(e),t,{}).then((function(e){var o=e.payload.dmn;if(void 0===o||0===o.length)return console.log("License does not contain domains, cannot make a match"),Promise.resolve("unknown");var t=new URL(a).hostname;return o.some((function(e){return new URL(e).hostname===t}))?(console.log("License matches issuer "+a),Promise.resolve("match")):(console.log("License does not match issuer "+a+" in "+o),Promise.resolve("mismatch"))})).catch((function(e){return console.log("License verification failed with "+e),Promise.resolve("mismatch")}))})),d(this,"invoke",(function(e){return"getIssuer"===e.method?Promise.resolve(a.getIssuer()):"getSearchQuery"===e.method?a.getSearchQuery(e.url):"setSearchQuery"===e.method?a.setSearchQuery(e.url,e.query):"readCachedVaults"===e.method?Promise.resolve(a.readCachedVaults()):"fetchVaults"===e.method?a.fetchVaults():"fetchUnlockedRecord"===e.method?a.fetchUnlockedRecord(e.record):"fetchRotatingPassword"===e.method?a.fetchRotatingPassword():"updateBadge"===e.method?Promise.resolve(a.updateBadge(e.tab)):"readSettings"===e.method?Promise.resolve(a.getSettings()):"writeSettings"===e.method?Promise.resolve(a.setSettings(e.settings)):"hasPermissions"===e.method?a.hasPermissions():"logout"===e.method?a.logout():void console.log("invalid request",e)})),d(this,"handleMessage",(function(e,o,t){if(o.extensionId===chrome.runtime.id||o.id===chrome.runtime.id)if("record-count"===e.type)try{e.urls[0].startsWith(a.getIssuer())?t({count:0}):t({count:Ze.findRecordsByUrls(a.readCachedVaults(),e.urls).length})}catch(e){}else if("check-license"===e.type)a.checkLicense(e.license,e.issuer,e.uri).then((function(e){t({status:e})}));else if("link"===e.type||"query"===e.type){"link"===e.type&&(void 0===a.getIssuer()?(a.reset(),chrome.storage.local.remove(["oauthToken","vaults"]),a.setIssuer(e.issuer),a.syncVersion()):console.log("Blocking a request to unlink the extension"));try{var n=a.getIssuer();t({linked:n===e.issuer,issuer:n})}catch(e){}}else if("unlink"===e.type)a.reset(),a.setIssuer(void 0),chrome.storage.local.remove(["oauthToken","vaults"]),chrome.storage.sync.remove("issuer"),t({linked:!1});else{if("invoke"===e.type)return a.invoke(e).then((function(e){try{t({ok:!0,msg:e})}catch(e){console.log(e)}}),(function(e){try{t({ok:!1,error:Object.assign({message:e.message},e)})}catch(e){console.log(e)}})),!0;if("query-tab-url"===e.type)t({url:o.tab.url});else{if("add-new-record"===e.type)return chrome.tabs.query({active:!0,currentWindow:!0},(function(e){chrome.tabs.create({url:a.getIssuer()+"/console/vaults/newrecord?url="+encodeURIComponent(e[0].url)})})),!1;if("go-to-keyhub"===e.type)return chrome.tabs.create({url:a.getIssuer()}),!1;if("callback"===e.type)return a.handleCallback({tabId:o.tab.id,url:o.tab.url.split("#")[1]}),!1;if("relay"===e.type)return chrome.tabs.query({active:!0,currentWindow:!0},(function(a){a.length>0&&(e.body.relayed=!0,chrome.tabs.sendMessage(a[0].id,e.body))})),!1;if("generate-nonce"===e.type){var s=crypto.randomUUID();chrome.storage.session.set({iframeNonce:s}).then((function(){t({nonce:s})}))}else"verify-nonce"===e.type&&chrome.storage.session.get("iframeNonce").then((function(a){var o=null!==a.iframeNonce&&e.nonce===a.iframeNonce;o||console.log("Invalid nonce detected, refusing to render the popup: expected "+a.iframeNonce+", got "+e.nonce),t({ok:o}),chrome.storage.session.remove("iframeNonce")}))}}})),d(this,"handleCallback",(function(e){try{-1!==e.tabId&&(chrome.tabs.remove(e.tabId),a._restoreLastActiveTab&&void 0!==a._lastActiveTab&&chrome.tabs.update(a._lastActiveTab,{active:!0})),a.callback(e.url)}catch(e){console.log(e)}return{cancel:!0}})),d(this,"handleTabUpdated",(function(e,o,t){(o.url||o.status)&&a.updateBadge(t)})),d(this,"handleTabCreated",(function(e){a.updateBadge(e)})),d(this,"handleTabReplaced",(function(e,o){chrome.tabs.get(e,(function(e){a.updateBadge(e)}))})),d(this,"handleTabActivated",(function(e){chrome.tabs.get(e.tabId,(function(e){a.updateBadge(e)}))})),d(this,"handleCommand",(function(e){a.hasIssuer()&&chrome.tabs.query({active:!0,currentWindow:!0},(function(o){1===o.length&&("trigger-fill-with-keyhub"===e?chrome.tabs.sendMessage(o[0].id,{type:"trigger-fill"}):"trigger-fill-rotating-pwd"===e&&a.fetchRotatingPassword().then((function(e){chrome.tabs.sendMessage(o[0].id,{type:"fill",creds:e})}),(function(e){})))}))})),d(this,"handleContextMenuClick",(function(e,a){chrome.tabs.sendMessage(a.id,{type:"trigger-fill",editable:e.editable})})),d(this,"syncVersion",(function(){a.hasIssuer()&&fetch(a.getIssuer()+"/keyhub/rest/v1/info",{headers:new Headers({Accept:"application/vnd.topicus.keyhub+json"})}).then((function(e){return e.ok?e.json().then((function(e){return Math.max.apply(Math,s(e.contractVersions))})):21})).then((function(e){chrome.storage.local.set({version:e},(function(){return chrome.runtime.reload()}))}))})),d(this,"parseContentRange",(function(e){var a=e.match(/^(\w+) ((\d+)-(\d+)|\*)\/(\d+|\*)$/);if(!a)return null;var o=n(a,6),t=o[1],s=o[3],i=o[4],r=o[5],c={unit:t,start:null!=s?Number(s):null,end:null!=i?Number(i):null,size:"*"===r?null:Number(r)};return null===c.start&&null===c.end&&null===c.size?null:c})),d(this,"hasMore",(function(e){return null!=e.size?null!=e.end?e.end+1<e.size:e.start+1<e.size:null!=e.end&&e.end>e.start})),console.log("Loading KeyHub Browser extension version 7")})),Ye=null;function ea(){return Ye||(Ye=(e||(e=new Promise((function(e,a){chrome.storage.local.get("version",(function(o){var t=o.version;t<63?a(t+" is too old"):e(t<=69?6:7)}))})))).then((function(e){return 6===e?new Be:new Xe})).then((function(e){return e.restoreState()})))}chrome.commands.onCommand.addListener((function(e){return ea().then((function(a){return a.handleCommand(e)}))})),chrome.contextMenus.onClicked.addListener((function(e,a){chrome.permissions.request({origins:["<all_urls>"]}).then((function(o){o&&ea().then((function(o){return o.handleContextMenuClick(e,a)}))}))})),chrome.runtime.onMessage.addListener((function(e,a,o){return ea().then((function(t){return t.handleMessage(e,a,o)})),!0})),chrome.tabs.onUpdated.addListener((function(e,a,o){return ea().then((function(t){return t.handleTabUpdated(e,a,o)}))})),chrome.tabs.onCreated.addListener((function(e){return ea().then((function(a){return a.handleTabCreated(e)}))})),chrome.tabs.onReplaced.addListener((function(e,a){return ea().then((function(o){return o.handleTabReplaced(e,a)}))})),chrome.tabs.onActivated.addListener((function(e){return ea().then((function(a){return a.handleTabActivated(e)}))})),chrome.declarativeNetRequest?chrome.runtime.onInstalled.addListener((function(e){var a=chrome.runtime.getURL("/callback.html");console.log("Using declarativeNetRequest API");var o=[{id:1,condition:{regexFilter:"^https://www\\.topicus-keyhub\\.com/browser-extension-callback\\.html.+$",resourceTypes:["main_frame"]},action:{type:"redirect",redirect:{regexSubstitution:a+"#\\0"}}}];chrome.declarativeNetRequest.updateDynamicRules({removeRuleIds:o.map((function(e){return e.id})),addRules:o})})):(console.log("Fallback to webRequest API because declarativeNetRequest is not supported"),chrome.identity?chrome.webRequest.onBeforeRequest.addListener((function(e){ea().then((function(a){return a.handleCallback(e)}))}),{urls:["https://www.topicus-keyhub.com/browser-extension-callback.html*"]},["blocking"]):(console.log("Registering Safari onBeforeRedirect hack"),chrome.webRequest.onBeforeRedirect.addListener((function(e){e.redirectUrl.startsWith("https://www.topicus-keyhub.com/browser-extension-callback.html")&&ea().then((function(a){return a.handleCallback({tabId:e.tabId,url:e.redirectUrl})}))}),{urls:["https://*/login*"]}))),ea().then((function(e){if(e.hasIssuer()){var a=new URL(e.getIssuer());a.port="";var o=a.toString()+"login/logout*";console.log("Watching for logout calls at "+o),chrome.webRequest.onBeforeRedirect.addListener((function(e){console.log("Detected logout, clearing session"),ea().then((function(e){return e.clearSession()}))}),{urls:[o]})}})),chrome.runtime.onInstalled.addListener((function(e){chrome.tabs.query({url:"https://*/console*"},(function(e){e.forEach((function(e){chrome.scripting.executeScript({target:{tabId:e.id},files:["detectkeyhub.js"]},(function(e){chrome.runtime.lastError}))}))}))})),chrome.contextMenus.removeAll((function(){chrome.contextMenus.create({id:"context-fill",title:chrome.i18n.getMessage("contextmenu_fill"),contexts:["all"]})})),chrome.runtime.onStartup.addListener((function(){ea().then((function(e){return e.syncVersion()}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SyxTQUFBK3FCLEdBQUUsT0FBSUEsRUFBRzNHLGNBQWMsR0FDN0MsR0FDQSxDQUFFeEcsS0FBTSxDQUFDd1AsSUFDWCxDQUNELElBRUFwTixPQUFPeUksUUFBUXlELFlBQVlmLGFBQVksU0FBQzlCLEdBQ3ZDckosT0FBT2lELEtBQUtyakIsTUFBTSxDQUFFTCxJQUFLLHVCQUF3QixTQUFDMGpCLEdBQ2pEQSxFQUFLb0ssU0FBUSxTQUFDeEcsR0FDYjdHLE9BQU9zTixVQUFVQyxjQUFjLENBQzlCQyxPQUFRLENBQUVyRyxNQUFPTixFQUFJeEQsSUFDckJvSyxNQUFPLENBQUMscUJBQ04sU0FBQ3hsQixHQUNlK1gsT0FBT3lJLFFBQVFpRixTQUNsQyxHQUNELEdBQ0QsR0FDRCxJQUVBMU4sT0FBTzJHLGFBQWFDLFdBQVUsV0FDN0I1RyxPQUFPMkcsYUFBYXBELE9BQU8sQ0FDMUJGLEdBQUksZUFDSnNLLE1BQU8zTixPQUFPNE4sS0FBS0MsV0FBVyxvQkFDOUJDLFNBQVUsQ0FBQyxRQUViLElBRUE5TixPQUFPeUksUUFBUXNGLFVBQVU1QyxhQUFZLFdBQVFSLEtBQWdCM3FCLE1BQUssU0FBQStxQixHQUFFLE9BQUlBLEVBQUduQyxhQUFhLEdBQUUsRyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jyb3dzZXItZXh0ZW5zaW9uLy4vc3JjL2NsaWVudC1vYXV0aDIvc3JjL2NsaWVudC1vYXV0aDIuanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmcvZGVjb2RlLmpzIiwid2VicGFjazovL2Jyb3dzZXItZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nL2VuY29kZS5qcyIsIndlYnBhY2s6Ly9icm93c2VyLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy9pbmRleC5qcyIsIndlYnBhY2s6Ly9icm93c2VyLWV4dGVuc2lvbi93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9icm93c2VyLWV4dGVuc2lvbi93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9icm93c2VyLWV4dGVuc2lvbi93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1leHRlbnNpb24vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9icm93c2VyLWV4dGVuc2lvbi8uL3NyYy92ZXJzaW9uLmpzIiwid2VicGFjazovL2Jyb3dzZXItZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5TGlrZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9icm93c2VyLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheVdpdGhIb2xlcy5qcyIsIndlYnBhY2s6Ly9icm93c2VyLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qcyIsIndlYnBhY2s6Ly9icm93c2VyLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVJlc3QuanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRob3V0SG9sZXMuanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovL2Jyb3dzZXItZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovL2Jyb3dzZXItZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly9icm93c2VyLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b1Byb3BlcnR5S2V5LmpzIiwid2VicGFjazovL2Jyb3dzZXItZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvUHJpbWl0aXZlLmpzIiwid2VicGFjazovL2Jyb3dzZXItZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovL2Jyb3dzZXItZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovL2Jyb3dzZXItZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovL2Jyb3dzZXItZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL2xpYi9idWZmZXJfdXRpbHMuanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvcnVudGltZS9iYXNlNjR1cmwuanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvcnVudGltZS93ZWJjcnlwdG8uanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvdXRpbC9lcnJvcnMuanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvcnVudGltZS9qd2tfdG9fa2V5LmpzIiwid2VicGFjazovL2Jyb3dzZXItZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL2xpYi9pc19vYmplY3QuanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIva2V5L2ltcG9ydC5qcyIsIndlYnBhY2s6Ly9icm93c2VyLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9qd2tzL2xvY2FsLmpzIiwid2VicGFjazovL2Jyb3dzZXItZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL2xpYi9jcnlwdG9fa2V5LmpzIiwid2VicGFjazovL2Jyb3dzZXItZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL2xpYi9pbnZhbGlkX2tleV9pbnB1dC5qcyIsIndlYnBhY2s6Ly9icm93c2VyLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9ydW50aW1lL2lzX2tleV9saWtlLmpzIiwid2VicGFjazovL2Jyb3dzZXItZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL2xpYi9pc19qd2suanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvcnVudGltZS9ub3JtYWxpemVfa2V5LmpzIiwid2VicGFjazovL2Jyb3dzZXItZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL3J1bnRpbWUvdmVyaWZ5LmpzIiwid2VicGFjazovL2Jyb3dzZXItZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL3J1bnRpbWUvZ2V0X3NpZ25fdmVyaWZ5X2tleS5qcyIsIndlYnBhY2s6Ly9icm93c2VyLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9ydW50aW1lL2NoZWNrX2tleV9sZW5ndGguanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvcnVudGltZS9zdWJ0bGVfZHNhLmpzIiwid2VicGFjazovL2Jyb3dzZXItZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL2xpYi9jaGVja19rZXlfdHlwZS5qcyIsIndlYnBhY2s6Ly9icm93c2VyLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9qd3MvY29tcGFjdC92ZXJpZnkuanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvandzL2ZsYXR0ZW5lZC92ZXJpZnkuanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvbGliL2lzX2Rpc2pvaW50LmpzIiwid2VicGFjazovL2Jyb3dzZXItZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL2xpYi92YWxpZGF0ZV9jcml0LmpzIiwid2VicGFjazovL2Jyb3dzZXItZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL2xpYi92YWxpZGF0ZV9hbGdvcml0aG1zLmpzIiwid2VicGFjazovL2Jyb3dzZXItZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9icm93c2VyL2xpYi9lcG9jaC5qcyIsIndlYnBhY2s6Ly9icm93c2VyLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9saWIvc2Vjcy5qcyIsIndlYnBhY2s6Ly9icm93c2VyLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9qb3NlL2Rpc3QvYnJvd3Nlci9saWIvand0X2NsYWltc19zZXQuanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvam9zZS9kaXN0L2Jyb3dzZXIvand0L3ZlcmlmeS5qcyIsIndlYnBhY2s6Ly9icm93c2VyLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9wYXJzZS1kb21haW4vc2VyaWFsaXplZC10cmllcy9pY2Fubi5qcyIsIndlYnBhY2s6Ly9icm93c2VyLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9wYXJzZS1kb21haW4vYnVpbGQvdHJpZS9sb29rLXVwLmpzIiwid2VicGFjazovL2Jyb3dzZXItZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL3BhcnNlLWRvbWFpbi9idWlsZC90cmllL2NoYXJhY3RlcnMuanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvaXAtcmVnZXgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvaXMtcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovL2Jyb3dzZXItZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL2Nsb25lLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly9icm93c2VyLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9zdXBlci1yZWdleC9pbmRleC5qcyIsIndlYnBhY2s6Ly9icm93c2VyLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9mdW5jdGlvbi10aW1lb3V0L2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvaXMtaXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvcGFyc2UtZG9tYWluL2J1aWxkL3Nhbml0aXplLmpzIiwid2VicGFjazovL2Jyb3dzZXItZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL3BhcnNlLWRvbWFpbi9idWlsZC90cmllL25vZGVzLmpzIiwid2VicGFjazovL2Jyb3dzZXItZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL3BhcnNlLWRvbWFpbi9idWlsZC90cmllL3BhcnNlLXRyaWUuanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvcGFyc2UtZG9tYWluL2J1aWxkL3BhcnNlLWRvbWFpbi5qcyIsIndlYnBhY2s6Ly9icm93c2VyLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9wYXJzZS1kb21haW4vc2VyaWFsaXplZC10cmllcy9wcml2YXRlLmpzIiwid2VicGFjazovL2Jyb3dzZXItZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL3BhcnNlLWRvbWFpbi9idWlsZC9mcm9tLXVybC5qcyIsIndlYnBhY2s6Ly9icm93c2VyLWV4dGVuc2lvbi8uL3NyYy92Ni9WYXVsdHMuanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1leHRlbnNpb24vLi9zcmMvdjYvYmFja2dyb3VuZC5qcyIsIndlYnBhY2s6Ly9icm93c2VyLWV4dGVuc2lvbi8uL3NyYy92Ny9WYXVsdHMuanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1leHRlbnNpb24vLi9zcmMvdjcvYmFja2dyb3VuZC5qcyIsIndlYnBhY2s6Ly9icm93c2VyLWV4dGVuc2lvbi8uL3NyYy9iYWNrZ3JvdW5kLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBRdWVyeXN0cmluZyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5nJylcblxuY29uc3QgREVGQVVMVF9VUkxfQkFTRSA9ICdodHRwczovL2V4YW1wbGUub3JnLydcblxuLyoqXG4gKiBFeHBvcnQgYENsaWVudE9BdXRoMmAgY2xhc3MuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gQ2xpZW50T0F1dGgyXG5cbi8qKlxuICogRGVmYXVsdCBoZWFkZXJzIGZvciBleGVjdXRpbmcgT0F1dGggMi4wIGZsb3dzLlxuICovXG52YXIgREVGQVVMVF9IRUFERVJTID0ge1xuXHRBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uLCBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxuXHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn1cblxuLyoqXG4gKiBGb3JtYXQgZXJyb3IgcmVzcG9uc2UgdHlwZXMgdG8gcmVndWxhciBzdHJpbmdzIGZvciBkaXNwbGF5aW5nIHRvIGNsaWVudHMuXG4gKlxuICogUmVmZXJlbmNlOiBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2NzQ5I3NlY3Rpb24tNC4xLjIuMVxuICovXG52YXIgRVJST1JfUkVTUE9OU0VTID0ge1xuXHRpbnZhbGlkX3JlcXVlc3Q6IFtcblx0XHQnVGhlIHJlcXVlc3QgaXMgbWlzc2luZyBhIHJlcXVpcmVkIHBhcmFtZXRlciwgaW5jbHVkZXMgYW4nLFxuXHRcdCdpbnZhbGlkIHBhcmFtZXRlciB2YWx1ZSwgaW5jbHVkZXMgYSBwYXJhbWV0ZXIgbW9yZSB0aGFuJyxcblx0XHQnb25jZSwgb3IgaXMgb3RoZXJ3aXNlIG1hbGZvcm1lZC4nXG5cdF0uam9pbignICcpLFxuXHRpbnZhbGlkX2NsaWVudDogW1xuXHRcdCdDbGllbnQgYXV0aGVudGljYXRpb24gZmFpbGVkIChlLmcuLCB1bmtub3duIGNsaWVudCwgbm8nLFxuXHRcdCdjbGllbnQgYXV0aGVudGljYXRpb24gaW5jbHVkZWQsIG9yIHVuc3VwcG9ydGVkJyxcblx0XHQnYXV0aGVudGljYXRpb24gbWV0aG9kKS4nXG5cdF0uam9pbignICcpLFxuXHRpbnZhbGlkX2dyYW50OiBbXG5cdFx0J1RoZSBwcm92aWRlZCBhdXRob3JpemF0aW9uIGdyYW50IChlLmcuLCBhdXRob3JpemF0aW9uJyxcblx0XHQnY29kZSwgcmVzb3VyY2Ugb3duZXIgY3JlZGVudGlhbHMpIG9yIHJlZnJlc2ggdG9rZW4gaXMnLFxuXHRcdCdpbnZhbGlkLCBleHBpcmVkLCByZXZva2VkLCBkb2VzIG5vdCBtYXRjaCB0aGUgcmVkaXJlY3Rpb24nLFxuXHRcdCdVUkkgdXNlZCBpbiB0aGUgYXV0aG9yaXphdGlvbiByZXF1ZXN0LCBvciB3YXMgaXNzdWVkIHRvJyxcblx0XHQnYW5vdGhlciBjbGllbnQuJ1xuXHRdLmpvaW4oJyAnKSxcblx0dW5hdXRob3JpemVkX2NsaWVudDogW1xuXHRcdCdUaGUgY2xpZW50IGlzIG5vdCBhdXRob3JpemVkIHRvIHJlcXVlc3QgYW4gYXV0aG9yaXphdGlvbicsXG5cdFx0J2NvZGUgdXNpbmcgdGhpcyBtZXRob2QuJ1xuXHRdLmpvaW4oJyAnKSxcblx0dW5zdXBwb3J0ZWRfZ3JhbnRfdHlwZTogW1xuXHRcdCdUaGUgYXV0aG9yaXphdGlvbiBncmFudCB0eXBlIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlJyxcblx0XHQnYXV0aG9yaXphdGlvbiBzZXJ2ZXIuJ1xuXHRdLmpvaW4oJyAnKSxcblx0YWNjZXNzX2RlbmllZDogW1xuXHRcdCdUaGUgcmVzb3VyY2Ugb3duZXIgb3IgYXV0aG9yaXphdGlvbiBzZXJ2ZXIgZGVuaWVkIHRoZSByZXF1ZXN0Lidcblx0XS5qb2luKCcgJyksXG5cdHVuc3VwcG9ydGVkX3Jlc3BvbnNlX3R5cGU6IFtcblx0XHQnVGhlIGF1dGhvcml6YXRpb24gc2VydmVyIGRvZXMgbm90IHN1cHBvcnQgb2J0YWluaW5nJyxcblx0XHQnYW4gYXV0aG9yaXphdGlvbiBjb2RlIHVzaW5nIHRoaXMgbWV0aG9kLidcblx0XS5qb2luKCcgJyksXG5cdGludmFsaWRfc2NvcGU6IFtcblx0XHQnVGhlIHJlcXVlc3RlZCBzY29wZSBpcyBpbnZhbGlkLCB1bmtub3duLCBvciBtYWxmb3JtZWQuJ1xuXHRdLmpvaW4oJyAnKSxcblx0c2VydmVyX2Vycm9yOiBbXG5cdFx0J1RoZSBhdXRob3JpemF0aW9uIHNlcnZlciBlbmNvdW50ZXJlZCBhbiB1bmV4cGVjdGVkJyxcblx0XHQnY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC4nLFxuXHRcdCcoVGhpcyBlcnJvciBjb2RlIGlzIG5lZWRlZCBiZWNhdXNlIGEgNTAwIEludGVybmFsIFNlcnZlcicsXG5cdFx0J0Vycm9yIEhUVFAgc3RhdHVzIGNvZGUgY2Fubm90IGJlIHJldHVybmVkIHRvIHRoZSBjbGllbnQnLFxuXHRcdCd2aWEgYW4gSFRUUCByZWRpcmVjdC4pJ1xuXHRdLmpvaW4oJyAnKSxcblx0dGVtcG9yYXJpbHlfdW5hdmFpbGFibGU6IFtcblx0XHQnVGhlIGF1dGhvcml6YXRpb24gc2VydmVyIGlzIGN1cnJlbnRseSB1bmFibGUgdG8gaGFuZGxlJyxcblx0XHQndGhlIHJlcXVlc3QgZHVlIHRvIGEgdGVtcG9yYXJ5IG92ZXJsb2FkaW5nIG9yIG1haW50ZW5hbmNlJyxcblx0XHQnb2YgdGhlIHNlcnZlci4nXG5cdF0uam9pbignICcpXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgcHJvcGVydGllcyBleGlzdCBvbiBhbiBvYmplY3QgYW5kIHRocm93IHdoZW4gdGhleSBhcmVuJ3QuXG4gKlxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBhbiBleHBlY3RlZCBwcm9wZXJ0eSBpcyBtaXNzaW5nLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSAgICBvYmpcbiAqIEBwYXJhbSB7Li4uc3RyaW5nfSBwcm9wc1xuICovXG5mdW5jdGlvbiBleHBlY3RzKG9iaikge1xuXHRmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBwcm9wID0gYXJndW1lbnRzW2ldXG5cblx0XHRpZiAob2JqW3Byb3BdID09IG51bGwpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHByb3AgKyAnXCIgdG8gZXhpc3QnKVxuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIFB1bGwgYW4gYXV0aGVudGljYXRpb24gZXJyb3IgZnJvbSB0aGUgcmVzcG9uc2UgZGF0YS5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IGRhdGFcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZ2V0QXV0aEVycm9yKGJvZHkpIHtcblx0dmFyIG1lc3NhZ2UgPSBFUlJPUl9SRVNQT05TRVNbYm9keS5lcnJvcl0gfHxcblx0XHRib2R5LmVycm9yX2Rlc2NyaXB0aW9uIHx8XG5cdFx0Ym9keS5lcnJvclxuXG5cdGlmIChtZXNzYWdlKSB7XG5cdFx0dmFyIGVyciA9IG5ldyBFcnJvcihtZXNzYWdlKVxuXHRcdGVyci5ib2R5ID0gYm9keVxuXHRcdGVyci5jb2RlID0gJ0VBVVRIJ1xuXHRcdHJldHVybiBlcnJcblx0fVxufVxuXG4vKipcbiAqIEF0dGVtcHQgdG8gcGFyc2UgcmVzcG9uc2UgYm9keSBhcyBKU09OLCBmYWxsIGJhY2sgdG8gcGFyc2luZyBhcyBhIHF1ZXJ5IHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYm9keVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBwYXJzZVJlc3BvbnNlQm9keShib2R5KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoYm9keSlcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBRdWVyeXN0cmluZy5wYXJzZShib2R5KVxuXHR9XG59XG5cbi8qKlxuICogU2FuaXRpemUgdGhlIHNjb3BlcyBvcHRpb24gdG8gYmUgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7QXJyYXl9ICBzY29wZXNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gc2FuaXRpemVTY29wZShzY29wZXMpIHtcblx0cmV0dXJuIEFycmF5LmlzQXJyYXkoc2NvcGVzKSA/IHNjb3Blcy5qb2luKCcgJykgOiB0b1N0cmluZyhzY29wZXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcmVxdWVzdCB1cmkgYmFzZWQgb24gYW4gb3B0aW9ucyBvYmplY3QgYW5kIHRva2VuIHR5cGUuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHRva2VuVHlwZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBjcmVhdGVVcmkob3B0aW9ucywgdG9rZW5UeXBlKSB7XG5cdC8vIENoZWNrIHRoZSByZXF1aXJlZCBwYXJhbWV0ZXJzIGFyZSBzZXQuXG5cdGV4cGVjdHMob3B0aW9ucywgJ2NsaWVudElkJywgJ2F1dGhvcml6YXRpb25VcmknKVxuXG5cdGNvbnN0IHFzID0ge1xuXHRcdGNsaWVudF9pZDogb3B0aW9ucy5jbGllbnRJZCxcblx0XHRyZWRpcmVjdF91cmk6IG9wdGlvbnMucmVkaXJlY3RVcmksXG5cdFx0cmVzcG9uc2VfdHlwZTogdG9rZW5UeXBlLFxuXHRcdHN0YXRlOiBvcHRpb25zLnN0YXRlXG5cdH1cblx0aWYgKG9wdGlvbnMuc2NvcGVzICE9PSB1bmRlZmluZWQpIHtcblx0XHRxcy5zY29wZSA9IHNhbml0aXplU2NvcGUob3B0aW9ucy5zY29wZXMpXG5cdH1cblxuXHRjb25zdCBzZXAgPSBvcHRpb25zLmF1dGhvcml6YXRpb25VcmkuaW5jbHVkZXMoJz8nKSA/ICcmJyA6ICc/J1xuXHRyZXR1cm4gb3B0aW9ucy5hdXRob3JpemF0aW9uVXJpICsgc2VwICsgUXVlcnlzdHJpbmcuc3RyaW5naWZ5KFxuXHRcdE9iamVjdC5hc3NpZ24ocXMsIG9wdGlvbnMucXVlcnkpKVxufVxuXG4vKipcbiAqIENyZWF0ZSBiYXNpYyBhdXRoIGhlYWRlci5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHVzZXJuYW1lXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHBhc3N3b3JkXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGF1dGgodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG5cdHJldHVybiAnQmFzaWMgJyArIGJ0b2EodG9TdHJpbmcodXNlcm5hbWUpICsgJzonICsgdG9TdHJpbmcocGFzc3dvcmQpKVxufVxuXG4vKipcbiAqIEVuc3VyZSBhIHZhbHVlIGlzIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHN0cikge1xuXHRyZXR1cm4gc3RyID09IG51bGwgPyAnJyA6IFN0cmluZyhzdHIpXG59XG5cbi8qKlxuICogTWVyZ2UgcmVxdWVzdCBvcHRpb25zIGZyb20gYW4gb3B0aW9ucyBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHJlcXVlc3RPcHRpb25zKHJlcXVlc3RPcHRpb25zLCBvcHRpb25zKSB7XG5cdHJldHVybiB7XG5cdFx0dXJsOiByZXF1ZXN0T3B0aW9ucy51cmwsXG5cdFx0bWV0aG9kOiByZXF1ZXN0T3B0aW9ucy5tZXRob2QsXG5cdFx0Ym9keTogT2JqZWN0LmFzc2lnbih7fSwgcmVxdWVzdE9wdGlvbnMuYm9keSwgb3B0aW9ucy5ib2R5KSxcblx0XHRxdWVyeTogT2JqZWN0LmFzc2lnbih7fSwgcmVxdWVzdE9wdGlvbnMucXVlcnksIG9wdGlvbnMucXVlcnkpLFxuXHRcdGhlYWRlcnM6IE9iamVjdC5hc3NpZ24oe30sIHJlcXVlc3RPcHRpb25zLmhlYWRlcnMsIG9wdGlvbnMuaGVhZGVycylcblx0fVxufVxuXG5mdW5jdGlvbiBmZXRjaFJlcXVlc3QobWV0aG9kLCB1cmwsIGJvZHksIGhlYWRlcnMpIHtcblx0cmV0dXJuIGZldGNoKHVybCwgeyBtZXRob2Q6IG1ldGhvZCwgaGVhZGVyczogaGVhZGVycywgYm9keTogYm9keSB9KS50aGVuKHJlc3BvbnNlID0+IHtcblx0XHRpZiAoIXJlc3BvbnNlLm9rKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEhUVFAgZXJyb3IhIFN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcblx0fSk7XG59XG5cbi8qKlxuICogQ29uc3RydWN0IGFuIG9iamVjdCB0aGF0IGNhbiBoYW5kbGUgdGhlIG11bHRpcGxlIE9BdXRoIDIuMCBmbG93cy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICovXG5mdW5jdGlvbiBDbGllbnRPQXV0aDIob3B0aW9ucykge1xuXHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zXG5cdHRoaXMucmVxdWVzdCA9IGZldGNoUmVxdWVzdFxuXG5cdHRoaXMuY29kZSA9IG5ldyBDb2RlRmxvdyh0aGlzKVxufVxuXG4vKipcbiAqIEFsaWFzIHRoZSB0b2tlbiBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAdHlwZSB7RnVuY3Rpb259XG4gKi9cbkNsaWVudE9BdXRoMi5Ub2tlbiA9IENsaWVudE9BdXRoMlRva2VuXG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IHRva2VuIGZyb20gZXhpc3RpbmcgZGF0YS5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGFjY2Vzc1xuICogQHBhcmFtICB7c3RyaW5nfSBbcmVmcmVzaF1cbiAqIEBwYXJhbSAge3N0cmluZ30gW3R5cGVdXG4gKiBAcGFyYW0gIHtPYmplY3R9IFtkYXRhXVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5DbGllbnRPQXV0aDIucHJvdG90eXBlLmNyZWF0ZVRva2VuID0gZnVuY3Rpb24oYWNjZXNzLCByZWZyZXNoLCB0eXBlLCBkYXRhKSB7XG5cdHZhciBvcHRpb25zID0gT2JqZWN0LmFzc2lnbihcblx0XHR7fSxcblx0XHRkYXRhLFxuXHRcdHR5cGVvZiBhY2Nlc3MgPT09ICdzdHJpbmcnID8geyBhY2Nlc3NfdG9rZW46IGFjY2VzcyB9IDogYWNjZXNzLFxuXHRcdHR5cGVvZiByZWZyZXNoID09PSAnc3RyaW5nJyA/IHsgcmVmcmVzaF90b2tlbjogcmVmcmVzaCB9IDogcmVmcmVzaCxcblx0XHR0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycgPyB7IHRva2VuX3R5cGU6IHR5cGUgfSA6IHR5cGVcblx0KVxuXG5cdHJldHVybiBuZXcgQ2xpZW50T0F1dGgyLlRva2VuKHRoaXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogVXNpbmcgdGhlIGJ1aWx0LWluIHJlcXVlc3QgbWV0aG9kLCB3ZSdsbCBhdXRvbWF0aWNhbGx5IGF0dGVtcHQgdG8gcGFyc2VcbiAqIHRoZSByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9ICBvcHRpb25zXG4gKiBAcmV0dXJuIHtQcm9taXNlfVxuICovXG5DbGllbnRPQXV0aDIucHJvdG90eXBlLl9yZXF1ZXN0ID0gZnVuY3Rpb24ob3B0aW9ucykge1xuXHR2YXIgdXJsID0gb3B0aW9ucy51cmxcblx0dmFyIGJvZHkgPSBRdWVyeXN0cmluZy5zdHJpbmdpZnkob3B0aW9ucy5ib2R5KVxuXHR2YXIgcXVlcnkgPSBRdWVyeXN0cmluZy5zdHJpbmdpZnkob3B0aW9ucy5xdWVyeSlcblxuXHRpZiAocXVlcnkpIHtcblx0XHR1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHF1ZXJ5XG5cdH1cblxuXHRyZXR1cm4gdGhpcy5yZXF1ZXN0KG9wdGlvbnMubWV0aG9kLCB1cmwsIGJvZHksIG9wdGlvbnMuaGVhZGVycylcbn1cblxuLyoqXG4gKiBHZW5lcmFsIHB1cnBvc2UgY2xpZW50IHRva2VuIGdlbmVyYXRvci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY2xpZW50XG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICovXG5mdW5jdGlvbiBDbGllbnRPQXV0aDJUb2tlbihjbGllbnQsIGRhdGEpIHtcblx0dGhpcy5jbGllbnQgPSBjbGllbnRcblx0dGhpcy5kYXRhID0gZGF0YVxuXHR0aGlzLnRva2VuVHlwZSA9IGRhdGEudG9rZW5fdHlwZSAmJiBkYXRhLnRva2VuX3R5cGUudG9Mb3dlckNhc2UoKVxuXHR0aGlzLmFjY2Vzc1Rva2VuID0gZGF0YS5hY2Nlc3NfdG9rZW5cblx0dGhpcy5yZWZyZXNoVG9rZW4gPSBkYXRhLnJlZnJlc2hfdG9rZW5cblxuXHR0aGlzLmV4cGlyZXNJbihOdW1iZXIoZGF0YS5leHBpcmVzX2luKSlcbn1cblxuLyoqXG4gKiBFeHBpcmUgdGhlIHRva2VuIGFmdGVyIHNvbWUgdGltZS5cbiAqXG4gKiBAcGFyYW0gIHtudW1iZXJ8RGF0ZX0gZHVyYXRpb24gU2Vjb25kcyBmcm9tIG5vdyB0byBleHBpcmUsIG9yIGEgZGF0ZSB0byBleHBpcmUgb24uXG4gKiBAcmV0dXJuIHtEYXRlfVxuICovXG5DbGllbnRPQXV0aDJUb2tlbi5wcm90b3R5cGUuZXhwaXJlc0luID0gZnVuY3Rpb24oZHVyYXRpb24pIHtcblx0aWYgKHR5cGVvZiBkdXJhdGlvbiA9PT0gJ251bWJlcicpIHtcblx0XHR0aGlzLmV4cGlyZXMgPSBuZXcgRGF0ZSgpXG5cdFx0dGhpcy5leHBpcmVzLnNldFNlY29uZHModGhpcy5leHBpcmVzLmdldFNlY29uZHMoKSArIGR1cmF0aW9uKVxuXHR9IGVsc2UgaWYgKGR1cmF0aW9uIGluc3RhbmNlb2YgRGF0ZSkge1xuXHRcdHRoaXMuZXhwaXJlcyA9IG5ldyBEYXRlKGR1cmF0aW9uLmdldFRpbWUoKSlcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGR1cmF0aW9uOiAnICsgZHVyYXRpb24pXG5cdH1cblxuXHRyZXR1cm4gdGhpcy5leHBpcmVzXG59XG5cbi8qKlxuICogU2lnbiBhIHN0YW5kYXJkaXNlZCByZXF1ZXN0IG9iamVjdCB3aXRoIHVzZXIgYXV0aGVudGljYXRpb24gaW5mb3JtYXRpb24uXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSByZXF1ZXN0T2JqZWN0XG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbkNsaWVudE9BdXRoMlRva2VuLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24ocmVxdWVzdE9iamVjdCkge1xuXHRpZiAoIXRoaXMuYWNjZXNzVG9rZW4pIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBzaWduIHdpdGhvdXQgYWNjZXNzIHRva2VuJylcblx0fVxuXG5cdHJlcXVlc3RPYmplY3QuaGVhZGVycyA9IHJlcXVlc3RPYmplY3QuaGVhZGVycyB8fCB7fVxuXG5cdGlmICh0aGlzLnRva2VuVHlwZSA9PT0gJ2JlYXJlcicpIHtcblx0XHRyZXF1ZXN0T2JqZWN0LmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCZWFyZXIgJyArIHRoaXMuYWNjZXNzVG9rZW5cblx0fSBlbHNlIHtcblx0XHR2YXIgcGFydHMgPSByZXF1ZXN0T2JqZWN0LnVybC5zcGxpdCgnIycpXG5cdFx0dmFyIHRva2VuID0gJ2FjY2Vzc190b2tlbj0nICsgdGhpcy5hY2Nlc3NUb2tlblxuXHRcdHZhciB1cmwgPSBwYXJ0c1swXS5yZXBsYWNlKC9bPyZdYWNjZXNzX3Rva2VuPVteJiNdLywgJycpXG5cdFx0dmFyIGZyYWdtZW50ID0gcGFydHNbMV0gPyAnIycgKyBwYXJ0c1sxXSA6ICcnXG5cblx0XHQvLyBQcmVwZW5kIHRoZSBjb3JyZWN0IHF1ZXJ5IHN0cmluZyBwYXJhbWV0ZXIgdG8gdGhlIHVybC5cblx0XHRyZXF1ZXN0T2JqZWN0LnVybCA9IHVybCArICh1cmwuaW5kZXhPZignPycpID4gLTEgPyAnJicgOiAnPycpICsgdG9rZW4gKyBmcmFnbWVudFxuXG5cdFx0Ly8gQXR0ZW1wdCB0byBhdm9pZCBzdG9yaW5nIHRoZSB1cmwgaW4gcHJveGllcywgc2luY2UgdGhlIGFjY2VzcyB0b2tlblxuXHRcdC8vIGlzIGV4cG9zZWQgaW4gdGhlIHF1ZXJ5IHBhcmFtZXRlcnMuXG5cdFx0cmVxdWVzdE9iamVjdC5oZWFkZXJzLlByYWdtYSA9ICduby1zdG9yZSdcblx0XHRyZXF1ZXN0T2JqZWN0LmhlYWRlcnNbJ0NhY2hlLUNvbnRyb2wnXSA9ICduby1zdG9yZSdcblx0fVxuXG5cdHJldHVybiByZXF1ZXN0T2JqZWN0XG59XG5cbi8qKlxuICogUmVmcmVzaCBhIHVzZXIgYWNjZXNzIHRva2VuIHdpdGggdGhlIHN1cHBsaWVkIHRva2VuLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gIG9wdHNcbiAqIEByZXR1cm4ge1Byb21pc2V9XG4gKi9cbkNsaWVudE9BdXRoMlRva2VuLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24ob3B0cykge1xuXHR2YXIgc2VsZiA9IHRoaXNcblx0dmFyIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmNsaWVudC5vcHRpb25zLCBvcHRzKVxuXG5cdGlmICghdGhpcy5yZWZyZXNoVG9rZW4pIHtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdObyByZWZyZXNoIHRva2VuJykpXG5cdH1cblxuXHRyZXR1cm4gdGhpcy5jbGllbnQuX3JlcXVlc3QocmVxdWVzdE9wdGlvbnMoe1xuXHRcdHVybDogb3B0aW9ucy5hY2Nlc3NUb2tlblVyaSxcblx0XHRtZXRob2Q6ICdQT1NUJyxcblx0XHRoZWFkZXJzOiBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX0hFQURFUlMsIHtcblx0XHRcdEF1dGhvcml6YXRpb246IGF1dGgob3B0aW9ucy5jbGllbnRJZCwgb3B0aW9ucy5jbGllbnRTZWNyZXQpXG5cdFx0fSksXG5cdFx0Ym9keToge1xuXHRcdFx0cmVmcmVzaF90b2tlbjogdGhpcy5yZWZyZXNoVG9rZW4sXG5cdFx0XHRncmFudF90eXBlOiAncmVmcmVzaF90b2tlbidcblx0XHR9XG5cdH0sIG9wdGlvbnMpKVxuXHRcdC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcblx0XHRcdHJldHVybiBzZWxmLmNsaWVudC5jcmVhdGVUb2tlbihPYmplY3QuYXNzaWduKHt9LCBzZWxmLmRhdGEsIGRhdGEpKVxuXHRcdH0pXG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgdG9rZW4gaGFzIGV4cGlyZWQuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuQ2xpZW50T0F1dGgyVG9rZW4ucHJvdG90eXBlLmV4cGlyZWQgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIERhdGUubm93KCkgPiB0aGlzLmV4cGlyZXMuZ2V0VGltZSgpXG59XG5cbi8qKlxuICogU3VwcG9ydCBhdXRob3JpemF0aW9uIGNvZGUgT0F1dGggMi4wIGdyYW50LlxuICpcbiAqIFJlZmVyZW5jZTogaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjc0OSNzZWN0aW9uLTQuMVxuICpcbiAqIEBwYXJhbSB7Q2xpZW50T0F1dGgyfSBjbGllbnRcbiAqL1xuZnVuY3Rpb24gQ29kZUZsb3coY2xpZW50KSB7XG5cdHRoaXMuY2xpZW50ID0gY2xpZW50XG59XG5cbi8qKlxuICogR2VuZXJhdGUgdGhlIHVyaSBmb3IgZG9pbmcgdGhlIGZpcnN0IHJlZGlyZWN0LlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gW29wdHNdXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbkNvZGVGbG93LnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbihvcHRzKSB7XG5cdHZhciBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jbGllbnQub3B0aW9ucywgb3B0cylcblxuXHRyZXR1cm4gY3JlYXRlVXJpKG9wdGlvbnMsICdjb2RlJylcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGNvZGUgdG9rZW4gZnJvbSB0aGUgcmVkaXJlY3RlZCB1cmkgYW5kIG1ha2UgYW5vdGhlciByZXF1ZXN0IGZvclxuICogdGhlIHVzZXIgYWNjZXNzIHRva2VuLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ3xPYmplY3R9IHVyaVxuICogQHBhcmFtICB7T2JqZWN0fSAgICAgICAgW29wdHNdXG4gKiBAcmV0dXJuIHtQcm9taXNlfVxuICovXG5Db2RlRmxvdy5wcm90b3R5cGUuZ2V0VG9rZW4gPSBmdW5jdGlvbih1cmksIG9wdHMpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cdHZhciBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jbGllbnQub3B0aW9ucywgb3B0cylcblxuXHRleHBlY3RzKG9wdGlvbnMsICdjbGllbnRJZCcsICdhY2Nlc3NUb2tlblVyaScpXG5cblx0dmFyIHVybCA9IHR5cGVvZiB1cmkgPT09ICdvYmplY3QnID8gdXJpIDogbmV3IFVSTCh1cmksIERFRkFVTFRfVVJMX0JBU0UpXG5cblx0aWYgKFxuXHRcdHR5cGVvZiBvcHRpb25zLnJlZGlyZWN0VXJpID09PSAnc3RyaW5nJyAmJlxuXHRcdHR5cGVvZiB1cmwucGF0aG5hbWUgPT09ICdzdHJpbmcnICYmXG5cdFx0dXJsLnBhdGhuYW1lICE9PSAobmV3IFVSTChvcHRpb25zLnJlZGlyZWN0VXJpLCBERUZBVUxUX1VSTF9CQVNFKSkucGF0aG5hbWVcblx0KSB7XG5cdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KFxuXHRcdFx0bmV3IFR5cGVFcnJvcignUmVkaXJlY3RlZCBwYXRoIHNob3VsZCBtYXRjaCBjb25maWd1cmVkIHBhdGgsIGJ1dCBnb3Q6ICcgKyB1cmwucGF0aG5hbWUpXG5cdFx0KVxuXHR9XG5cblx0aWYgKCF1cmwuc2VhcmNoIHx8ICF1cmwuc2VhcmNoLnN1YnN0cigxKSkge1xuXHRcdHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdVbmFibGUgdG8gcHJvY2VzcyB1cmk6ICcgKyB1cmkpKVxuXHR9XG5cblx0dmFyIGRhdGEgPSB0eXBlb2YgdXJsLnNlYXJjaCA9PT0gJ3N0cmluZydcblx0XHQ/IFF1ZXJ5c3RyaW5nLnBhcnNlKHVybC5zZWFyY2guc3Vic3RyKDEpKVxuXHRcdDogKHVybC5zZWFyY2ggfHwge30pXG5cdHZhciBlcnIgPSBnZXRBdXRoRXJyb3IoZGF0YSlcblxuXHRpZiAoZXJyKSB7XG5cdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGVycilcblx0fVxuXG5cdGlmIChvcHRpb25zLnN0YXRlICE9IG51bGwgJiYgZGF0YS5zdGF0ZSAhPT0gb3B0aW9ucy5zdGF0ZSkge1xuXHRcdHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdJbnZhbGlkIHN0YXRlOiAnICsgZGF0YS5zdGF0ZSkpXG5cdH1cblxuXHQvLyBDaGVjayB3aGV0aGVyIHRoZSByZXNwb25zZSBjb2RlIGlzIHNldC5cblx0aWYgKCFkYXRhLmNvZGUpIHtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IFR5cGVFcnJvcignTWlzc2luZyBjb2RlLCB1bmFibGUgdG8gcmVxdWVzdCB0b2tlbicpKVxuXHR9XG5cblx0dmFyIGhlYWRlcnMgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX0hFQURFUlMpXG5cdHZhciBib2R5ID0geyBjb2RlOiBkYXRhLmNvZGUsIGdyYW50X3R5cGU6ICdhdXRob3JpemF0aW9uX2NvZGUnLCByZWRpcmVjdF91cmk6IG9wdGlvbnMucmVkaXJlY3RVcmkgfVxuXG5cdC8vIGBjbGllbnRfaWRgOiBSRVFVSVJFRCwgaWYgdGhlIGNsaWVudCBpcyBub3QgYXV0aGVudGljYXRpbmcgd2l0aCB0aGVcblx0Ly8gYXV0aG9yaXphdGlvbiBzZXJ2ZXIgYXMgZGVzY3JpYmVkIGluIFNlY3Rpb24gMy4yLjEuXG5cdC8vIFJlZmVyZW5jZTogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzY3NDkjc2VjdGlvbi0zLjIuMVxuXHRpZiAob3B0aW9ucy5jbGllbnRTZWNyZXQpIHtcblx0XHRoZWFkZXJzLkF1dGhvcml6YXRpb24gPSBhdXRoKG9wdGlvbnMuY2xpZW50SWQsIG9wdGlvbnMuY2xpZW50U2VjcmV0KVxuXHR9IGVsc2Uge1xuXHRcdGJvZHkuY2xpZW50X2lkID0gb3B0aW9ucy5jbGllbnRJZFxuXHR9XG5cblx0cmV0dXJuIHRoaXMuY2xpZW50Ll9yZXF1ZXN0KHJlcXVlc3RPcHRpb25zKHtcblx0XHR1cmw6IG9wdGlvbnMuYWNjZXNzVG9rZW5VcmksXG5cdFx0bWV0aG9kOiAnUE9TVCcsXG5cdFx0aGVhZGVyczogaGVhZGVycyxcblx0XHRib2R5OiBib2R5XG5cdH0sIG9wdGlvbnMpKVxuXHRcdC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcblx0XHRcdHJldHVybiBzZWxmLmNsaWVudC5jcmVhdGVUb2tlbihkYXRhKVxuXHRcdH0pXG59IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gSWYgb2JqLmhhc093blByb3BlcnR5IGhhcyBiZWVuIG92ZXJyaWRkZW4sIHRoZW4gY2FsbGluZ1xuLy8gb2JqLmhhc093blByb3BlcnR5KHByb3ApIHdpbGwgYnJlYWsuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9pc3N1ZXMvMTcwN1xuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihxcywgc2VwLCBlcSwgb3B0aW9ucykge1xuICBzZXAgPSBzZXAgfHwgJyYnO1xuICBlcSA9IGVxIHx8ICc9JztcbiAgdmFyIG9iaiA9IHt9O1xuXG4gIGlmICh0eXBlb2YgcXMgIT09ICdzdHJpbmcnIHx8IHFzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICB2YXIgcmVnZXhwID0gL1xcKy9nO1xuICBxcyA9IHFzLnNwbGl0KHNlcCk7XG5cbiAgdmFyIG1heEtleXMgPSAxMDAwO1xuICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5tYXhLZXlzID09PSAnbnVtYmVyJykge1xuICAgIG1heEtleXMgPSBvcHRpb25zLm1heEtleXM7XG4gIH1cblxuICB2YXIgbGVuID0gcXMubGVuZ3RoO1xuICAvLyBtYXhLZXlzIDw9IDAgbWVhbnMgdGhhdCB3ZSBzaG91bGQgbm90IGxpbWl0IGtleXMgY291bnRcbiAgaWYgKG1heEtleXMgPiAwICYmIGxlbiA+IG1heEtleXMpIHtcbiAgICBsZW4gPSBtYXhLZXlzO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIHZhciB4ID0gcXNbaV0ucmVwbGFjZShyZWdleHAsICclMjAnKSxcbiAgICAgICAgaWR4ID0geC5pbmRleE9mKGVxKSxcbiAgICAgICAga3N0ciwgdnN0ciwgaywgdjtcblxuICAgIGlmIChpZHggPj0gMCkge1xuICAgICAga3N0ciA9IHguc3Vic3RyKDAsIGlkeCk7XG4gICAgICB2c3RyID0geC5zdWJzdHIoaWR4ICsgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtzdHIgPSB4O1xuICAgICAgdnN0ciA9ICcnO1xuICAgIH1cblxuICAgIGsgPSBkZWNvZGVVUklDb21wb25lbnQoa3N0cik7XG4gICAgdiA9IGRlY29kZVVSSUNvbXBvbmVudCh2c3RyKTtcblxuICAgIGlmICghaGFzT3duUHJvcGVydHkob2JqLCBrKSkge1xuICAgICAgb2JqW2tdID0gdjtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqW2tdKSkge1xuICAgICAgb2JqW2tdLnB1c2godik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrXSA9IFtvYmpba10sIHZdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHN0cmluZ2lmeVByaW1pdGl2ZSA9IGZ1bmN0aW9uKHYpIHtcbiAgc3dpdGNoICh0eXBlb2Ygdikge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4gdjtcblxuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuIHYgPyAndHJ1ZScgOiAnZmFsc2UnO1xuXG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIHJldHVybiBpc0Zpbml0ZSh2KSA/IHYgOiAnJztcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJyc7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBzZXAsIGVxLCBuYW1lKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgb2JqID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uKGspIHtcbiAgICAgIHZhciBrcyA9IGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUoaykpICsgZXE7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmpba10pKSB7XG4gICAgICAgIHJldHVybiBvYmpba10ubWFwKGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICByZXR1cm4ga3MgKyBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKHYpKTtcbiAgICAgICAgfSkuam9pbihzZXApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmpba10pKTtcbiAgICAgIH1cbiAgICB9KS5maWx0ZXIoQm9vbGVhbikuam9pbihzZXApO1xuXG4gIH1cblxuICBpZiAoIW5hbWUpIHJldHVybiAnJztcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUobmFtZSkpICsgZXEgK1xuICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmopKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuZGVjb2RlID0gZXhwb3J0cy5wYXJzZSA9IHJlcXVpcmUoJy4vZGVjb2RlJyk7XG5leHBvcnRzLmVuY29kZSA9IGV4cG9ydHMuc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9lbmNvZGUnKTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvKiBlc2xpbnQtZW52IHdlYmV4dGVuc2lvbnMgKi9cblxudmFyIGNhY2hlZFZlcnNpb24gPSBudWxsO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2ZXJzaW9uKCkge1xuXG5cdGlmIChjYWNoZWRWZXJzaW9uKSB7XG5cdFx0cmV0dXJuIGNhY2hlZFZlcnNpb247XG5cdH1cblxuXHRjYWNoZWRWZXJzaW9uID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0Y2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KCd2ZXJzaW9uJywgKGl0ZW1zKSA9PiB7XG5cdFx0XHRsZXQgY29udHJhY3RWZXJzaW9uID0gaXRlbXMudmVyc2lvbjtcblxuXHRcdFx0aWYgKGNvbnRyYWN0VmVyc2lvbiA8IDYzKSB7XG5cdFx0XHRcdHJlamVjdChjb250cmFjdFZlcnNpb24gKyBcIiBpcyB0b28gb2xkXCIpO1xuXHRcdFx0fSBlbHNlIGlmIChjb250cmFjdFZlcnNpb24gPD0gNjkpIHtcblx0XHRcdFx0cmVzb2x2ZSg2KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlc29sdmUoNyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xuXHRyZXR1cm4gY2FjaGVkVmVyc2lvbjtcbn1cbiIsImZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KHIsIGEpIHtcbiAgKG51bGwgPT0gYSB8fCBhID4gci5sZW5ndGgpICYmIChhID0gci5sZW5ndGgpO1xuICBmb3IgKHZhciBlID0gMCwgbiA9IEFycmF5KGEpOyBlIDwgYTsgZSsrKSBuW2VdID0gcltlXTtcbiAgcmV0dXJuIG47XG59XG5leHBvcnQgeyBfYXJyYXlMaWtlVG9BcnJheSBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiO1xuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIsIGEpIHtcbiAgaWYgKHIpIHtcbiAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgcikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkociwgYSk7XG4gICAgdmFyIHQgPSB7fS50b1N0cmluZy5jYWxsKHIpLnNsaWNlKDgsIC0xKTtcbiAgICByZXR1cm4gXCJPYmplY3RcIiA9PT0gdCAmJiByLmNvbnN0cnVjdG9yICYmICh0ID0gci5jb25zdHJ1Y3Rvci5uYW1lKSwgXCJNYXBcIiA9PT0gdCB8fCBcIlNldFwiID09PSB0ID8gQXJyYXkuZnJvbShyKSA6IFwiQXJndW1lbnRzXCIgPT09IHQgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCkgPyBhcnJheUxpa2VUb0FycmF5KHIsIGEpIDogdm9pZCAwO1xuICB9XG59XG5leHBvcnQgeyBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBhcnJheVdpdGhIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhIb2xlcy5qc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheUxpbWl0IGZyb20gXCIuL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzXCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCBub25JdGVyYWJsZVJlc3QgZnJvbSBcIi4vbm9uSXRlcmFibGVSZXN0LmpzXCI7XG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShyLCBlKSB7XG4gIHJldHVybiBhcnJheVdpdGhIb2xlcyhyKSB8fCBpdGVyYWJsZVRvQXJyYXlMaW1pdChyLCBlKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShyLCBlKSB8fCBub25JdGVyYWJsZVJlc3QoKTtcbn1cbmV4cG9ydCB7IF9zbGljZWRUb0FycmF5IGFzIGRlZmF1bHQgfTsiLCJmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMocikge1xuICBpZiAoQXJyYXkuaXNBcnJheShyKSkgcmV0dXJuIHI7XG59XG5leHBvcnQgeyBfYXJyYXlXaXRoSG9sZXMgYXMgZGVmYXVsdCB9OyIsImZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChyLCBsKSB7XG4gIHZhciB0ID0gbnVsbCA9PSByID8gbnVsbCA6IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFN5bWJvbCAmJiByW1N5bWJvbC5pdGVyYXRvcl0gfHwgcltcIkBAaXRlcmF0b3JcIl07XG4gIGlmIChudWxsICE9IHQpIHtcbiAgICB2YXIgZSxcbiAgICAgIG4sXG4gICAgICBpLFxuICAgICAgdSxcbiAgICAgIGEgPSBbXSxcbiAgICAgIGYgPSAhMCxcbiAgICAgIG8gPSAhMTtcbiAgICB0cnkge1xuICAgICAgaWYgKGkgPSAodCA9IHQuY2FsbChyKSkubmV4dCwgMCA9PT0gbCkge1xuICAgICAgICBpZiAoT2JqZWN0KHQpICE9PSB0KSByZXR1cm47XG4gICAgICAgIGYgPSAhMTtcbiAgICAgIH0gZWxzZSBmb3IgKDsgIShmID0gKGUgPSBpLmNhbGwodCkpLmRvbmUpICYmIChhLnB1c2goZS52YWx1ZSksIGEubGVuZ3RoICE9PSBsKTsgZiA9ICEwKTtcbiAgICB9IGNhdGNoIChyKSB7XG4gICAgICBvID0gITAsIG4gPSByO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIWYgJiYgbnVsbCAhPSB0W1wicmV0dXJuXCJdICYmICh1ID0gdFtcInJldHVyblwiXSgpLCBPYmplY3QodSkgIT09IHUpKSByZXR1cm47XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAobykgdGhyb3cgbjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGE7XG4gIH1cbn1cbmV4cG9ydCB7IF9pdGVyYWJsZVRvQXJyYXlMaW1pdCBhcyBkZWZhdWx0IH07IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cbmV4cG9ydCB7IF9ub25JdGVyYWJsZVJlc3QgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBhcnJheVdpdGhvdXRIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhvdXRIb2xlcy5qc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlU3ByZWFkIGZyb20gXCIuL25vbkl0ZXJhYmxlU3ByZWFkLmpzXCI7XG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkocikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMocikgfHwgaXRlcmFibGVUb0FycmF5KHIpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5leHBvcnQgeyBfdG9Db25zdW1hYmxlQXJyYXkgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBhcnJheUxpa2VUb0FycmF5IGZyb20gXCIuL2FycmF5TGlrZVRvQXJyYXkuanNcIjtcbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHIpKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShyKTtcbn1cbmV4cG9ydCB7IF9hcnJheVdpdGhvdXRIb2xlcyBhcyBkZWZhdWx0IH07IiwiZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShyKSB7XG4gIGlmIChcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBTeW1ib2wgJiYgbnVsbCAhPSByW1N5bWJvbC5pdGVyYXRvcl0gfHwgbnVsbCAhPSByW1wiQEBpdGVyYXRvclwiXSkgcmV0dXJuIEFycmF5LmZyb20ocik7XG59XG5leHBvcnQgeyBfaXRlcmFibGVUb0FycmF5IGFzIGRlZmF1bHQgfTsiLCJmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuZXhwb3J0IHsgX25vbkl0ZXJhYmxlU3ByZWFkIGFzIGRlZmF1bHQgfTsiLCJmdW5jdGlvbiBfdHlwZW9mKG8pIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIG87XG4gIH0gOiBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvO1xuICB9LCBfdHlwZW9mKG8pO1xufVxuZXhwb3J0IHsgX3R5cGVvZiBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IF90eXBlb2YgZnJvbSBcIi4vdHlwZW9mLmpzXCI7XG5pbXBvcnQgdG9QcmltaXRpdmUgZnJvbSBcIi4vdG9QcmltaXRpdmUuanNcIjtcbmZ1bmN0aW9uIHRvUHJvcGVydHlLZXkodCkge1xuICB2YXIgaSA9IHRvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpO1xuICByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiO1xufVxuZXhwb3J0IHsgdG9Qcm9wZXJ0eUtleSBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IF90eXBlb2YgZnJvbSBcIi4vdHlwZW9mLmpzXCI7XG5mdW5jdGlvbiB0b1ByaW1pdGl2ZSh0LCByKSB7XG4gIGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0O1xuICB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTtcbiAgaWYgKHZvaWQgMCAhPT0gZSkge1xuICAgIHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpO1xuICAgIGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpO1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTtcbiAgfVxuICByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpO1xufVxuZXhwb3J0IHsgdG9QcmltaXRpdmUgYXMgZGVmYXVsdCB9OyIsImltcG9ydCB0b1Byb3BlcnR5S2V5IGZyb20gXCIuL3RvUHJvcGVydHlLZXkuanNcIjtcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHtcbiAgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7XG4gICAgdmFyIG8gPSByW3RdO1xuICAgIG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCB0b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7XG4gIH1cbn1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7XG4gIHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogITFcbiAgfSksIGU7XG59XG5leHBvcnQgeyBfY3JlYXRlQ2xhc3MgYXMgZGVmYXVsdCB9OyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7XG4gIGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbn1cbmV4cG9ydCB7IF9jbGFzc0NhbGxDaGVjayBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IHRvUHJvcGVydHlLZXkgZnJvbSBcIi4vdG9Qcm9wZXJ0eUtleS5qc1wiO1xuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KGUsIHIsIHQpIHtcbiAgcmV0dXJuIChyID0gdG9Qcm9wZXJ0eUtleShyKSkgaW4gZSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCB7XG4gICAgdmFsdWU6IHQsXG4gICAgZW51bWVyYWJsZTogITAsXG4gICAgY29uZmlndXJhYmxlOiAhMCxcbiAgICB3cml0YWJsZTogITBcbiAgfSkgOiBlW3JdID0gdCwgZTtcbn1cbmV4cG9ydCB7IF9kZWZpbmVQcm9wZXJ0eSBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IGRpZ2VzdCBmcm9tICcuLi9ydW50aW1lL2RpZ2VzdC5qcyc7XG5leHBvcnQgY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuZXhwb3J0IGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKTtcbmNvbnN0IE1BWF9JTlQzMiA9IDIgKiogMzI7XG5leHBvcnQgZnVuY3Rpb24gY29uY2F0KC4uLmJ1ZmZlcnMpIHtcbiAgICBjb25zdCBzaXplID0gYnVmZmVycy5yZWR1Y2UoKGFjYywgeyBsZW5ndGggfSkgPT4gYWNjICsgbGVuZ3RoLCAwKTtcbiAgICBjb25zdCBidWYgPSBuZXcgVWludDhBcnJheShzaXplKTtcbiAgICBsZXQgaSA9IDA7XG4gICAgZm9yIChjb25zdCBidWZmZXIgb2YgYnVmZmVycykge1xuICAgICAgICBidWYuc2V0KGJ1ZmZlciwgaSk7XG4gICAgICAgIGkgKz0gYnVmZmVyLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIGJ1Zjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwMnMoYWxnLCBwMnNJbnB1dCkge1xuICAgIHJldHVybiBjb25jYXQoZW5jb2Rlci5lbmNvZGUoYWxnKSwgbmV3IFVpbnQ4QXJyYXkoWzBdKSwgcDJzSW5wdXQpO1xufVxuZnVuY3Rpb24gd3JpdGVVSW50MzJCRShidWYsIHZhbHVlLCBvZmZzZXQpIHtcbiAgICBpZiAodmFsdWUgPCAwIHx8IHZhbHVlID49IE1BWF9JTlQzMikge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgdmFsdWUgbXVzdCBiZSA+PSAwIGFuZCA8PSAke01BWF9JTlQzMiAtIDF9LiBSZWNlaXZlZCAke3ZhbHVlfWApO1xuICAgIH1cbiAgICBidWYuc2V0KFt2YWx1ZSA+Pj4gMjQsIHZhbHVlID4+PiAxNiwgdmFsdWUgPj4+IDgsIHZhbHVlICYgMHhmZl0sIG9mZnNldCk7XG59XG5leHBvcnQgZnVuY3Rpb24gdWludDY0YmUodmFsdWUpIHtcbiAgICBjb25zdCBoaWdoID0gTWF0aC5mbG9vcih2YWx1ZSAvIE1BWF9JTlQzMik7XG4gICAgY29uc3QgbG93ID0gdmFsdWUgJSBNQVhfSU5UMzI7XG4gICAgY29uc3QgYnVmID0gbmV3IFVpbnQ4QXJyYXkoOCk7XG4gICAgd3JpdGVVSW50MzJCRShidWYsIGhpZ2gsIDApO1xuICAgIHdyaXRlVUludDMyQkUoYnVmLCBsb3csIDQpO1xuICAgIHJldHVybiBidWY7XG59XG5leHBvcnQgZnVuY3Rpb24gdWludDMyYmUodmFsdWUpIHtcbiAgICBjb25zdCBidWYgPSBuZXcgVWludDhBcnJheSg0KTtcbiAgICB3cml0ZVVJbnQzMkJFKGJ1ZiwgdmFsdWUpO1xuICAgIHJldHVybiBidWY7XG59XG5leHBvcnQgZnVuY3Rpb24gbGVuZ3RoQW5kSW5wdXQoaW5wdXQpIHtcbiAgICByZXR1cm4gY29uY2F0KHVpbnQzMmJlKGlucHV0Lmxlbmd0aCksIGlucHV0KTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb25jYXRLZGYoc2VjcmV0LCBiaXRzLCB2YWx1ZSkge1xuICAgIGNvbnN0IGl0ZXJhdGlvbnMgPSBNYXRoLmNlaWwoKGJpdHMgPj4gMykgLyAzMik7XG4gICAgY29uc3QgcmVzID0gbmV3IFVpbnQ4QXJyYXkoaXRlcmF0aW9ucyAqIDMyKTtcbiAgICBmb3IgKGxldCBpdGVyID0gMDsgaXRlciA8IGl0ZXJhdGlvbnM7IGl0ZXIrKykge1xuICAgICAgICBjb25zdCBidWYgPSBuZXcgVWludDhBcnJheSg0ICsgc2VjcmV0Lmxlbmd0aCArIHZhbHVlLmxlbmd0aCk7XG4gICAgICAgIGJ1Zi5zZXQodWludDMyYmUoaXRlciArIDEpKTtcbiAgICAgICAgYnVmLnNldChzZWNyZXQsIDQpO1xuICAgICAgICBidWYuc2V0KHZhbHVlLCA0ICsgc2VjcmV0Lmxlbmd0aCk7XG4gICAgICAgIHJlcy5zZXQoYXdhaXQgZGlnZXN0KCdzaGEyNTYnLCBidWYpLCBpdGVyICogMzIpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLnNsaWNlKDAsIGJpdHMgPj4gMyk7XG59XG4iLCJpbXBvcnQgeyBlbmNvZGVyLCBkZWNvZGVyIH0gZnJvbSAnLi4vbGliL2J1ZmZlcl91dGlscy5qcyc7XG5leHBvcnQgY29uc3QgZW5jb2RlQmFzZTY0ID0gKGlucHV0KSA9PiB7XG4gICAgbGV0IHVuZW5jb2RlZCA9IGlucHV0O1xuICAgIGlmICh0eXBlb2YgdW5lbmNvZGVkID09PSAnc3RyaW5nJykge1xuICAgICAgICB1bmVuY29kZWQgPSBlbmNvZGVyLmVuY29kZSh1bmVuY29kZWQpO1xuICAgIH1cbiAgICBjb25zdCBDSFVOS19TSVpFID0gMHg4MDAwO1xuICAgIGNvbnN0IGFyciA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdW5lbmNvZGVkLmxlbmd0aDsgaSArPSBDSFVOS19TSVpFKSB7XG4gICAgICAgIGFyci5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgdW5lbmNvZGVkLnN1YmFycmF5KGksIGkgKyBDSFVOS19TSVpFKSkpO1xuICAgIH1cbiAgICByZXR1cm4gYnRvYShhcnIuam9pbignJykpO1xufTtcbmV4cG9ydCBjb25zdCBlbmNvZGUgPSAoaW5wdXQpID0+IHtcbiAgICByZXR1cm4gZW5jb2RlQmFzZTY0KGlucHV0KS5yZXBsYWNlKC89L2csICcnKS5yZXBsYWNlKC9cXCsvZywgJy0nKS5yZXBsYWNlKC9cXC8vZywgJ18nKTtcbn07XG5leHBvcnQgY29uc3QgZGVjb2RlQmFzZTY0ID0gKGVuY29kZWQpID0+IHtcbiAgICBjb25zdCBiaW5hcnkgPSBhdG9iKGVuY29kZWQpO1xuICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYmluYXJ5Lmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiaW5hcnkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYnl0ZXNbaV0gPSBiaW5hcnkuY2hhckNvZGVBdChpKTtcbiAgICB9XG4gICAgcmV0dXJuIGJ5dGVzO1xufTtcbmV4cG9ydCBjb25zdCBkZWNvZGUgPSAoaW5wdXQpID0+IHtcbiAgICBsZXQgZW5jb2RlZCA9IGlucHV0O1xuICAgIGlmIChlbmNvZGVkIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICBlbmNvZGVkID0gZGVjb2Rlci5kZWNvZGUoZW5jb2RlZCk7XG4gICAgfVxuICAgIGVuY29kZWQgPSBlbmNvZGVkLnJlcGxhY2UoLy0vZywgJysnKS5yZXBsYWNlKC9fL2csICcvJykucmVwbGFjZSgvXFxzL2csICcnKTtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gZGVjb2RlQmFzZTY0KGVuY29kZWQpO1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBpbnB1dCB0byBiZSBkZWNvZGVkIGlzIG5vdCBjb3JyZWN0bHkgZW5jb2RlZC4nKTtcbiAgICB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgY3J5cHRvO1xuZXhwb3J0IGNvbnN0IGlzQ3J5cHRvS2V5ID0gKGtleSkgPT4ga2V5IGluc3RhbmNlb2YgQ3J5cHRvS2V5O1xuIiwiZXhwb3J0IGNsYXNzIEpPU0VFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBzdGF0aWMgZ2V0IGNvZGUoKSB7XG4gICAgICAgIHJldHVybiAnRVJSX0pPU0VfR0VORVJJQyc7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuY29kZSA9ICdFUlJfSk9TRV9HRU5FUklDJztcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZT8uKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBKV1RDbGFpbVZhbGlkYXRpb25GYWlsZWQgZXh0ZW5kcyBKT1NFRXJyb3Ige1xuICAgIHN0YXRpYyBnZXQgY29kZSgpIHtcbiAgICAgICAgcmV0dXJuICdFUlJfSldUX0NMQUlNX1ZBTElEQVRJT05fRkFJTEVEJztcbiAgICB9XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgcGF5bG9hZCwgY2xhaW0gPSAndW5zcGVjaWZpZWQnLCByZWFzb24gPSAndW5zcGVjaWZpZWQnKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLmNvZGUgPSAnRVJSX0pXVF9DTEFJTV9WQUxJREFUSU9OX0ZBSUxFRCc7XG4gICAgICAgIHRoaXMuY2xhaW0gPSBjbGFpbTtcbiAgICAgICAgdGhpcy5yZWFzb24gPSByZWFzb247XG4gICAgICAgIHRoaXMucGF5bG9hZCA9IHBheWxvYWQ7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEpXVEV4cGlyZWQgZXh0ZW5kcyBKT1NFRXJyb3Ige1xuICAgIHN0YXRpYyBnZXQgY29kZSgpIHtcbiAgICAgICAgcmV0dXJuICdFUlJfSldUX0VYUElSRUQnO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBwYXlsb2FkLCBjbGFpbSA9ICd1bnNwZWNpZmllZCcsIHJlYXNvbiA9ICd1bnNwZWNpZmllZCcpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuY29kZSA9ICdFUlJfSldUX0VYUElSRUQnO1xuICAgICAgICB0aGlzLmNsYWltID0gY2xhaW07XG4gICAgICAgIHRoaXMucmVhc29uID0gcmVhc29uO1xuICAgICAgICB0aGlzLnBheWxvYWQgPSBwYXlsb2FkO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBKT1NFQWxnTm90QWxsb3dlZCBleHRlbmRzIEpPU0VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY29kZSA9ICdFUlJfSk9TRV9BTEdfTk9UX0FMTE9XRUQnO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IGNvZGUoKSB7XG4gICAgICAgIHJldHVybiAnRVJSX0pPU0VfQUxHX05PVF9BTExPV0VEJztcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSk9TRU5vdFN1cHBvcnRlZCBleHRlbmRzIEpPU0VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY29kZSA9ICdFUlJfSk9TRV9OT1RfU1VQUE9SVEVEJztcbiAgICB9XG4gICAgc3RhdGljIGdldCBjb2RlKCkge1xuICAgICAgICByZXR1cm4gJ0VSUl9KT1NFX05PVF9TVVBQT1JURUQnO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBKV0VEZWNyeXB0aW9uRmFpbGVkIGV4dGVuZHMgSk9TRUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VSUl9KV0VfREVDUllQVElPTl9GQUlMRUQnO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnZGVjcnlwdGlvbiBvcGVyYXRpb24gZmFpbGVkJztcbiAgICB9XG4gICAgc3RhdGljIGdldCBjb2RlKCkge1xuICAgICAgICByZXR1cm4gJ0VSUl9KV0VfREVDUllQVElPTl9GQUlMRUQnO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBKV0VJbnZhbGlkIGV4dGVuZHMgSk9TRUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VSUl9KV0VfSU5WQUxJRCc7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgY29kZSgpIHtcbiAgICAgICAgcmV0dXJuICdFUlJfSldFX0lOVkFMSUQnO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBKV1NJbnZhbGlkIGV4dGVuZHMgSk9TRUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VSUl9KV1NfSU5WQUxJRCc7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgY29kZSgpIHtcbiAgICAgICAgcmV0dXJuICdFUlJfSldTX0lOVkFMSUQnO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBKV1RJbnZhbGlkIGV4dGVuZHMgSk9TRUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VSUl9KV1RfSU5WQUxJRCc7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgY29kZSgpIHtcbiAgICAgICAgcmV0dXJuICdFUlJfSldUX0lOVkFMSUQnO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBKV0tJbnZhbGlkIGV4dGVuZHMgSk9TRUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VSUl9KV0tfSU5WQUxJRCc7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgY29kZSgpIHtcbiAgICAgICAgcmV0dXJuICdFUlJfSldLX0lOVkFMSUQnO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBKV0tTSW52YWxpZCBleHRlbmRzIEpPU0VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY29kZSA9ICdFUlJfSldLU19JTlZBTElEJztcbiAgICB9XG4gICAgc3RhdGljIGdldCBjb2RlKCkge1xuICAgICAgICByZXR1cm4gJ0VSUl9KV0tTX0lOVkFMSUQnO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBKV0tTTm9NYXRjaGluZ0tleSBleHRlbmRzIEpPU0VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY29kZSA9ICdFUlJfSldLU19OT19NQVRDSElOR19LRVknO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnbm8gYXBwbGljYWJsZSBrZXkgZm91bmQgaW4gdGhlIEpTT04gV2ViIEtleSBTZXQnO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IGNvZGUoKSB7XG4gICAgICAgIHJldHVybiAnRVJSX0pXS1NfTk9fTUFUQ0hJTkdfS0VZJztcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSldLU011bHRpcGxlTWF0Y2hpbmdLZXlzIGV4dGVuZHMgSk9TRUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VSUl9KV0tTX01VTFRJUExFX01BVENISU5HX0tFWVMnO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnbXVsdGlwbGUgbWF0Y2hpbmcga2V5cyBmb3VuZCBpbiB0aGUgSlNPTiBXZWIgS2V5IFNldCc7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgY29kZSgpIHtcbiAgICAgICAgcmV0dXJuICdFUlJfSldLU19NVUxUSVBMRV9NQVRDSElOR19LRVlTJztcbiAgICB9XG59XG5TeW1ib2wuYXN5bmNJdGVyYXRvcjtcbmV4cG9ydCBjbGFzcyBKV0tTVGltZW91dCBleHRlbmRzIEpPU0VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY29kZSA9ICdFUlJfSldLU19USU1FT1VUJztcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ3JlcXVlc3QgdGltZWQgb3V0JztcbiAgICB9XG4gICAgc3RhdGljIGdldCBjb2RlKCkge1xuICAgICAgICByZXR1cm4gJ0VSUl9KV0tTX1RJTUVPVVQnO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBKV1NTaWduYXR1cmVWZXJpZmljYXRpb25GYWlsZWQgZXh0ZW5kcyBKT1NFRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNvZGUgPSAnRVJSX0pXU19TSUdOQVRVUkVfVkVSSUZJQ0FUSU9OX0ZBSUxFRCc7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9ICdzaWduYXR1cmUgdmVyaWZpY2F0aW9uIGZhaWxlZCc7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgY29kZSgpIHtcbiAgICAgICAgcmV0dXJuICdFUlJfSldTX1NJR05BVFVSRV9WRVJJRklDQVRJT05fRkFJTEVEJztcbiAgICB9XG59XG4iLCJpbXBvcnQgY3J5cHRvIGZyb20gJy4vd2ViY3J5cHRvLmpzJztcbmltcG9ydCB7IEpPU0VOb3RTdXBwb3J0ZWQgfSBmcm9tICcuLi91dGlsL2Vycm9ycy5qcyc7XG5mdW5jdGlvbiBzdWJ0bGVNYXBwaW5nKGp3aykge1xuICAgIGxldCBhbGdvcml0aG07XG4gICAgbGV0IGtleVVzYWdlcztcbiAgICBzd2l0Y2ggKGp3ay5rdHkpIHtcbiAgICAgICAgY2FzZSAnUlNBJzoge1xuICAgICAgICAgICAgc3dpdGNoIChqd2suYWxnKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnUFMyNTYnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1BTMzg0JzpcbiAgICAgICAgICAgICAgICBjYXNlICdQUzUxMic6XG4gICAgICAgICAgICAgICAgICAgIGFsZ29yaXRobSA9IHsgbmFtZTogJ1JTQS1QU1MnLCBoYXNoOiBgU0hBLSR7andrLmFsZy5zbGljZSgtMyl9YCB9O1xuICAgICAgICAgICAgICAgICAgICBrZXlVc2FnZXMgPSBqd2suZCA/IFsnc2lnbiddIDogWyd2ZXJpZnknXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnUlMyNTYnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1JTMzg0JzpcbiAgICAgICAgICAgICAgICBjYXNlICdSUzUxMic6XG4gICAgICAgICAgICAgICAgICAgIGFsZ29yaXRobSA9IHsgbmFtZTogJ1JTQVNTQS1QS0NTMS12MV81JywgaGFzaDogYFNIQS0ke2p3ay5hbGcuc2xpY2UoLTMpfWAgfTtcbiAgICAgICAgICAgICAgICAgICAga2V5VXNhZ2VzID0gandrLmQgPyBbJ3NpZ24nXSA6IFsndmVyaWZ5J107XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1JTQS1PQUVQJzpcbiAgICAgICAgICAgICAgICBjYXNlICdSU0EtT0FFUC0yNTYnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1JTQS1PQUVQLTM4NCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnUlNBLU9BRVAtNTEyJzpcbiAgICAgICAgICAgICAgICAgICAgYWxnb3JpdGhtID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1JTQS1PQUVQJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc2g6IGBTSEEtJHtwYXJzZUludChqd2suYWxnLnNsaWNlKC0zKSwgMTApIHx8IDF9YCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAga2V5VXNhZ2VzID0gandrLmQgPyBbJ2RlY3J5cHQnLCAndW53cmFwS2V5J10gOiBbJ2VuY3J5cHQnLCAnd3JhcEtleSddO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSk9TRU5vdFN1cHBvcnRlZCgnSW52YWxpZCBvciB1bnN1cHBvcnRlZCBKV0sgXCJhbGdcIiAoQWxnb3JpdGhtKSBQYXJhbWV0ZXIgdmFsdWUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ0VDJzoge1xuICAgICAgICAgICAgc3dpdGNoIChqd2suYWxnKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnRVMyNTYnOlxuICAgICAgICAgICAgICAgICAgICBhbGdvcml0aG0gPSB7IG5hbWU6ICdFQ0RTQScsIG5hbWVkQ3VydmU6ICdQLTI1NicgfTtcbiAgICAgICAgICAgICAgICAgICAga2V5VXNhZ2VzID0gandrLmQgPyBbJ3NpZ24nXSA6IFsndmVyaWZ5J107XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0VTMzg0JzpcbiAgICAgICAgICAgICAgICAgICAgYWxnb3JpdGhtID0geyBuYW1lOiAnRUNEU0EnLCBuYW1lZEN1cnZlOiAnUC0zODQnIH07XG4gICAgICAgICAgICAgICAgICAgIGtleVVzYWdlcyA9IGp3ay5kID8gWydzaWduJ10gOiBbJ3ZlcmlmeSddO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdFUzUxMic6XG4gICAgICAgICAgICAgICAgICAgIGFsZ29yaXRobSA9IHsgbmFtZTogJ0VDRFNBJywgbmFtZWRDdXJ2ZTogJ1AtNTIxJyB9O1xuICAgICAgICAgICAgICAgICAgICBrZXlVc2FnZXMgPSBqd2suZCA/IFsnc2lnbiddIDogWyd2ZXJpZnknXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnRUNESC1FUyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRUNESC1FUytBMTI4S1cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0VDREgtRVMrQTE5MktXJzpcbiAgICAgICAgICAgICAgICBjYXNlICdFQ0RILUVTK0EyNTZLVyc6XG4gICAgICAgICAgICAgICAgICAgIGFsZ29yaXRobSA9IHsgbmFtZTogJ0VDREgnLCBuYW1lZEN1cnZlOiBqd2suY3J2IH07XG4gICAgICAgICAgICAgICAgICAgIGtleVVzYWdlcyA9IGp3ay5kID8gWydkZXJpdmVCaXRzJ10gOiBbXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEpPU0VOb3RTdXBwb3J0ZWQoJ0ludmFsaWQgb3IgdW5zdXBwb3J0ZWQgSldLIFwiYWxnXCIgKEFsZ29yaXRobSkgUGFyYW1ldGVyIHZhbHVlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdPS1AnOiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGp3ay5hbGcpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdFZERTQSc6XG4gICAgICAgICAgICAgICAgICAgIGFsZ29yaXRobSA9IHsgbmFtZTogandrLmNydiB9O1xuICAgICAgICAgICAgICAgICAgICBrZXlVc2FnZXMgPSBqd2suZCA/IFsnc2lnbiddIDogWyd2ZXJpZnknXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnRUNESC1FUyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRUNESC1FUytBMTI4S1cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0VDREgtRVMrQTE5MktXJzpcbiAgICAgICAgICAgICAgICBjYXNlICdFQ0RILUVTK0EyNTZLVyc6XG4gICAgICAgICAgICAgICAgICAgIGFsZ29yaXRobSA9IHsgbmFtZTogandrLmNydiB9O1xuICAgICAgICAgICAgICAgICAgICBrZXlVc2FnZXMgPSBqd2suZCA/IFsnZGVyaXZlQml0cyddIDogW107XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBKT1NFTm90U3VwcG9ydGVkKCdJbnZhbGlkIG9yIHVuc3VwcG9ydGVkIEpXSyBcImFsZ1wiIChBbGdvcml0aG0pIFBhcmFtZXRlciB2YWx1ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBKT1NFTm90U3VwcG9ydGVkKCdJbnZhbGlkIG9yIHVuc3VwcG9ydGVkIEpXSyBcImt0eVwiIChLZXkgVHlwZSkgUGFyYW1ldGVyIHZhbHVlJyk7XG4gICAgfVxuICAgIHJldHVybiB7IGFsZ29yaXRobSwga2V5VXNhZ2VzIH07XG59XG5jb25zdCBwYXJzZSA9IGFzeW5jIChqd2spID0+IHtcbiAgICBpZiAoIWp3ay5hbGcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJhbGdcIiBhcmd1bWVudCBpcyByZXF1aXJlZCB3aGVuIFwiandrLmFsZ1wiIGlzIG5vdCBwcmVzZW50Jyk7XG4gICAgfVxuICAgIGNvbnN0IHsgYWxnb3JpdGhtLCBrZXlVc2FnZXMgfSA9IHN1YnRsZU1hcHBpbmcoandrKTtcbiAgICBjb25zdCByZXN0ID0gW1xuICAgICAgICBhbGdvcml0aG0sXG4gICAgICAgIGp3ay5leHQgPz8gZmFsc2UsXG4gICAgICAgIGp3ay5rZXlfb3BzID8/IGtleVVzYWdlcyxcbiAgICBdO1xuICAgIGNvbnN0IGtleURhdGEgPSB7IC4uLmp3ayB9O1xuICAgIGRlbGV0ZSBrZXlEYXRhLmFsZztcbiAgICBkZWxldGUga2V5RGF0YS51c2U7XG4gICAgcmV0dXJuIGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KCdqd2snLCBrZXlEYXRhLCAuLi5yZXN0KTtcbn07XG5leHBvcnQgZGVmYXVsdCBwYXJzZTtcbiIsImZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsO1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNPYmplY3QoaW5wdXQpIHtcbiAgICBpZiAoIWlzT2JqZWN0TGlrZShpbnB1dCkgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKGlucHV0KSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgbGV0IHByb3RvID0gaW5wdXQ7XG4gICAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICAgICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKGlucHV0KSA9PT0gcHJvdG87XG59XG4iLCJpbXBvcnQgeyBkZWNvZGUgYXMgZGVjb2RlQmFzZTY0VVJMIH0gZnJvbSAnLi4vcnVudGltZS9iYXNlNjR1cmwuanMnO1xuaW1wb3J0IHsgZnJvbVNQS0ksIGZyb21QS0NTOCwgZnJvbVg1MDkgfSBmcm9tICcuLi9ydW50aW1lL2FzbjEuanMnO1xuaW1wb3J0IGFzS2V5T2JqZWN0IGZyb20gJy4uL3J1bnRpbWUvandrX3RvX2tleS5qcyc7XG5pbXBvcnQgeyBKT1NFTm90U3VwcG9ydGVkIH0gZnJvbSAnLi4vdXRpbC9lcnJvcnMuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4uL2xpYi9pc19vYmplY3QuanMnO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGltcG9ydFNQS0koc3BraSwgYWxnLCBvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBzcGtpICE9PSAnc3RyaW5nJyB8fCBzcGtpLmluZGV4T2YoJy0tLS0tQkVHSU4gUFVCTElDIEtFWS0tLS0tJykgIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzcGtpXCIgbXVzdCBiZSBTUEtJIGZvcm1hdHRlZCBzdHJpbmcnKTtcbiAgICB9XG4gICAgcmV0dXJuIGZyb21TUEtJKHNwa2ksIGFsZywgb3B0aW9ucyk7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW1wb3J0WDUwOSh4NTA5LCBhbGcsIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIHg1MDkgIT09ICdzdHJpbmcnIHx8IHg1MDkuaW5kZXhPZignLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tJykgIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ4NTA5XCIgbXVzdCBiZSBYLjUwOSBmb3JtYXR0ZWQgc3RyaW5nJyk7XG4gICAgfVxuICAgIHJldHVybiBmcm9tWDUwOSh4NTA5LCBhbGcsIG9wdGlvbnMpO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGltcG9ydFBLQ1M4KHBrY3M4LCBhbGcsIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIHBrY3M4ICE9PSAnc3RyaW5nJyB8fCBwa2NzOC5pbmRleE9mKCctLS0tLUJFR0lOIFBSSVZBVEUgS0VZLS0tLS0nKSAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInBrY3M4XCIgbXVzdCBiZSBQS0NTIzggZm9ybWF0dGVkIHN0cmluZycpO1xuICAgIH1cbiAgICByZXR1cm4gZnJvbVBLQ1M4KHBrY3M4LCBhbGcsIG9wdGlvbnMpO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGltcG9ydEpXSyhqd2ssIGFsZykge1xuICAgIGlmICghaXNPYmplY3QoandrKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdKV0sgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgICB9XG4gICAgYWxnIHx8IChhbGcgPSBqd2suYWxnKTtcbiAgICBzd2l0Y2ggKGp3ay5rdHkpIHtcbiAgICAgICAgY2FzZSAnb2N0JzpcbiAgICAgICAgICAgIGlmICh0eXBlb2YgandrLmsgIT09ICdzdHJpbmcnIHx8ICFqd2suaykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21pc3NpbmcgXCJrXCIgKEtleSBWYWx1ZSkgUGFyYW1ldGVyIHZhbHVlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGVjb2RlQmFzZTY0VVJMKGp3ay5rKTtcbiAgICAgICAgY2FzZSAnUlNBJzpcbiAgICAgICAgICAgIGlmIChqd2sub3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSk9TRU5vdFN1cHBvcnRlZCgnUlNBIEpXSyBcIm90aFwiIChPdGhlciBQcmltZXMgSW5mbykgUGFyYW1ldGVyIHZhbHVlIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnRUMnOlxuICAgICAgICBjYXNlICdPS1AnOlxuICAgICAgICAgICAgcmV0dXJuIGFzS2V5T2JqZWN0KHsgLi4uandrLCBhbGcgfSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgSk9TRU5vdFN1cHBvcnRlZCgnVW5zdXBwb3J0ZWQgXCJrdHlcIiAoS2V5IFR5cGUpIFBhcmFtZXRlciB2YWx1ZScpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGltcG9ydEpXSyB9IGZyb20gJy4uL2tleS9pbXBvcnQuanMnO1xuaW1wb3J0IHsgSldLU0ludmFsaWQsIEpPU0VOb3RTdXBwb3J0ZWQsIEpXS1NOb01hdGNoaW5nS2V5LCBKV0tTTXVsdGlwbGVNYXRjaGluZ0tleXMsIH0gZnJvbSAnLi4vdXRpbC9lcnJvcnMuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4uL2xpYi9pc19vYmplY3QuanMnO1xuZnVuY3Rpb24gZ2V0S3R5RnJvbUFsZyhhbGcpIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiBhbGcgPT09ICdzdHJpbmcnICYmIGFsZy5zbGljZSgwLCAyKSkge1xuICAgICAgICBjYXNlICdSUyc6XG4gICAgICAgIGNhc2UgJ1BTJzpcbiAgICAgICAgICAgIHJldHVybiAnUlNBJztcbiAgICAgICAgY2FzZSAnRVMnOlxuICAgICAgICAgICAgcmV0dXJuICdFQyc7XG4gICAgICAgIGNhc2UgJ0VkJzpcbiAgICAgICAgICAgIHJldHVybiAnT0tQJztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBKT1NFTm90U3VwcG9ydGVkKCdVbnN1cHBvcnRlZCBcImFsZ1wiIHZhbHVlIGZvciBhIEpTT04gV2ViIEtleSBTZXQnKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc0pXS1NMaWtlKGp3a3MpIHtcbiAgICByZXR1cm4gKGp3a3MgJiZcbiAgICAgICAgdHlwZW9mIGp3a3MgPT09ICdvYmplY3QnICYmXG4gICAgICAgIEFycmF5LmlzQXJyYXkoandrcy5rZXlzKSAmJlxuICAgICAgICBqd2tzLmtleXMuZXZlcnkoaXNKV0tMaWtlKSk7XG59XG5mdW5jdGlvbiBpc0pXS0xpa2Uoa2V5KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGtleSk7XG59XG5mdW5jdGlvbiBjbG9uZShvYmopIHtcbiAgICBpZiAodHlwZW9mIHN0cnVjdHVyZWRDbG9uZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gc3RydWN0dXJlZENsb25lKG9iaik7XG4gICAgfVxuICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xufVxuY2xhc3MgTG9jYWxKV0tTZXQge1xuICAgIGNvbnN0cnVjdG9yKGp3a3MpIHtcbiAgICAgICAgdGhpcy5fY2FjaGVkID0gbmV3IFdlYWtNYXAoKTtcbiAgICAgICAgaWYgKCFpc0pXS1NMaWtlKGp3a3MpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSldLU0ludmFsaWQoJ0pTT04gV2ViIEtleSBTZXQgbWFsZm9ybWVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fandrcyA9IGNsb25lKGp3a3MpO1xuICAgIH1cbiAgICBhc3luYyBnZXRLZXkocHJvdGVjdGVkSGVhZGVyLCB0b2tlbikge1xuICAgICAgICBjb25zdCB7IGFsZywga2lkIH0gPSB7IC4uLnByb3RlY3RlZEhlYWRlciwgLi4udG9rZW4/LmhlYWRlciB9O1xuICAgICAgICBjb25zdCBrdHkgPSBnZXRLdHlGcm9tQWxnKGFsZyk7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZXMgPSB0aGlzLl9qd2tzLmtleXMuZmlsdGVyKChqd2spID0+IHtcbiAgICAgICAgICAgIGxldCBjYW5kaWRhdGUgPSBrdHkgPT09IGp3ay5rdHk7XG4gICAgICAgICAgICBpZiAoY2FuZGlkYXRlICYmIHR5cGVvZiBraWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgY2FuZGlkYXRlID0ga2lkID09PSBqd2sua2lkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhbmRpZGF0ZSAmJiB0eXBlb2YgandrLmFsZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjYW5kaWRhdGUgPSBhbGcgPT09IGp3ay5hbGc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FuZGlkYXRlICYmIHR5cGVvZiBqd2sudXNlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNhbmRpZGF0ZSA9IGp3ay51c2UgPT09ICdzaWcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhbmRpZGF0ZSAmJiBBcnJheS5pc0FycmF5KGp3ay5rZXlfb3BzKSkge1xuICAgICAgICAgICAgICAgIGNhbmRpZGF0ZSA9IGp3ay5rZXlfb3BzLmluY2x1ZGVzKCd2ZXJpZnknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYW5kaWRhdGUgJiYgYWxnID09PSAnRWREU0EnKSB7XG4gICAgICAgICAgICAgICAgY2FuZGlkYXRlID0gandrLmNydiA9PT0gJ0VkMjU1MTknIHx8IGp3ay5jcnYgPT09ICdFZDQ0OCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FuZGlkYXRlKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChhbGcpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnRVMyNTYnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlID0gandrLmNydiA9PT0gJ1AtMjU2JztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdFUzI1NksnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlID0gandrLmNydiA9PT0gJ3NlY3AyNTZrMSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnRVMzODQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlID0gandrLmNydiA9PT0gJ1AtMzg0JztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdFUzUxMic6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5kaWRhdGUgPSBqd2suY3J2ID09PSAnUC01MjEnO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHsgMDogandrLCBsZW5ndGggfSA9IGNhbmRpZGF0ZXM7XG4gICAgICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBKV0tTTm9NYXRjaGluZ0tleSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEpXS1NNdWx0aXBsZU1hdGNoaW5nS2V5cygpO1xuICAgICAgICAgICAgY29uc3QgeyBfY2FjaGVkIH0gPSB0aGlzO1xuICAgICAgICAgICAgZXJyb3JbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gYXN5bmMgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGp3ayBvZiBjYW5kaWRhdGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCBhd2FpdCBpbXBvcnRXaXRoQWxnQ2FjaGUoX2NhY2hlZCwgandrLCBhbGcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIHsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW1wb3J0V2l0aEFsZ0NhY2hlKHRoaXMuX2NhY2hlZCwgandrLCBhbGcpO1xuICAgIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIGltcG9ydFdpdGhBbGdDYWNoZShjYWNoZSwgandrLCBhbGcpIHtcbiAgICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQoandrKSB8fCBjYWNoZS5zZXQoandrLCB7fSkuZ2V0KGp3ayk7XG4gICAgaWYgKGNhY2hlZFthbGddID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gYXdhaXQgaW1wb3J0SldLKHsgLi4uandrLCBleHQ6IHRydWUgfSwgYWxnKTtcbiAgICAgICAgaWYgKGtleSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgfHwga2V5LnR5cGUgIT09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSldLU0ludmFsaWQoJ0pTT04gV2ViIEtleSBTZXQgbWVtYmVycyBtdXN0IGJlIHB1YmxpYyBrZXlzJyk7XG4gICAgICAgIH1cbiAgICAgICAgY2FjaGVkW2FsZ10gPSBrZXk7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZWRbYWxnXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMb2NhbEpXS1NldChqd2tzKSB7XG4gICAgY29uc3Qgc2V0ID0gbmV3IExvY2FsSldLU2V0KGp3a3MpO1xuICAgIGNvbnN0IGxvY2FsSldLU2V0ID0gYXN5bmMgKHByb3RlY3RlZEhlYWRlciwgdG9rZW4pID0+IHNldC5nZXRLZXkocHJvdGVjdGVkSGVhZGVyLCB0b2tlbik7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMobG9jYWxKV0tTZXQsIHtcbiAgICAgICAgandrczoge1xuICAgICAgICAgICAgdmFsdWU6ICgpID0+IGNsb25lKHNldC5fandrcyksXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gbG9jYWxKV0tTZXQ7XG59XG4iLCJmdW5jdGlvbiB1bnVzYWJsZShuYW1lLCBwcm9wID0gJ2FsZ29yaXRobS5uYW1lJykge1xuICAgIHJldHVybiBuZXcgVHlwZUVycm9yKGBDcnlwdG9LZXkgZG9lcyBub3Qgc3VwcG9ydCB0aGlzIG9wZXJhdGlvbiwgaXRzICR7cHJvcH0gbXVzdCBiZSAke25hbWV9YCk7XG59XG5mdW5jdGlvbiBpc0FsZ29yaXRobShhbGdvcml0aG0sIG5hbWUpIHtcbiAgICByZXR1cm4gYWxnb3JpdGhtLm5hbWUgPT09IG5hbWU7XG59XG5mdW5jdGlvbiBnZXRIYXNoTGVuZ3RoKGhhc2gpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoaGFzaC5uYW1lLnNsaWNlKDQpLCAxMCk7XG59XG5mdW5jdGlvbiBnZXROYW1lZEN1cnZlKGFsZykge1xuICAgIHN3aXRjaCAoYWxnKSB7XG4gICAgICAgIGNhc2UgJ0VTMjU2JzpcbiAgICAgICAgICAgIHJldHVybiAnUC0yNTYnO1xuICAgICAgICBjYXNlICdFUzM4NCc6XG4gICAgICAgICAgICByZXR1cm4gJ1AtMzg0JztcbiAgICAgICAgY2FzZSAnRVM1MTInOlxuICAgICAgICAgICAgcmV0dXJuICdQLTUyMSc7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VucmVhY2hhYmxlJyk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2hlY2tVc2FnZShrZXksIHVzYWdlcykge1xuICAgIGlmICh1c2FnZXMubGVuZ3RoICYmICF1c2FnZXMuc29tZSgoZXhwZWN0ZWQpID0+IGtleS51c2FnZXMuaW5jbHVkZXMoZXhwZWN0ZWQpKSkge1xuICAgICAgICBsZXQgbXNnID0gJ0NyeXB0b0tleSBkb2VzIG5vdCBzdXBwb3J0IHRoaXMgb3BlcmF0aW9uLCBpdHMgdXNhZ2VzIG11c3QgaW5jbHVkZSAnO1xuICAgICAgICBpZiAodXNhZ2VzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgIGNvbnN0IGxhc3QgPSB1c2FnZXMucG9wKCk7XG4gICAgICAgICAgICBtc2cgKz0gYG9uZSBvZiAke3VzYWdlcy5qb2luKCcsICcpfSwgb3IgJHtsYXN0fS5gO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHVzYWdlcy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgIG1zZyArPSBgb25lIG9mICR7dXNhZ2VzWzBdfSBvciAke3VzYWdlc1sxXX0uYDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG1zZyArPSBgJHt1c2FnZXNbMF19LmA7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihtc2cpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBjaGVja1NpZ0NyeXB0b0tleShrZXksIGFsZywgLi4udXNhZ2VzKSB7XG4gICAgc3dpdGNoIChhbGcpIHtcbiAgICAgICAgY2FzZSAnSFMyNTYnOlxuICAgICAgICBjYXNlICdIUzM4NCc6XG4gICAgICAgIGNhc2UgJ0hTNTEyJzoge1xuICAgICAgICAgICAgaWYgKCFpc0FsZ29yaXRobShrZXkuYWxnb3JpdGhtLCAnSE1BQycpKVxuICAgICAgICAgICAgICAgIHRocm93IHVudXNhYmxlKCdITUFDJyk7XG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZCA9IHBhcnNlSW50KGFsZy5zbGljZSgyKSwgMTApO1xuICAgICAgICAgICAgY29uc3QgYWN0dWFsID0gZ2V0SGFzaExlbmd0aChrZXkuYWxnb3JpdGhtLmhhc2gpO1xuICAgICAgICAgICAgaWYgKGFjdHVhbCAhPT0gZXhwZWN0ZWQpXG4gICAgICAgICAgICAgICAgdGhyb3cgdW51c2FibGUoYFNIQS0ke2V4cGVjdGVkfWAsICdhbGdvcml0aG0uaGFzaCcpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnUlMyNTYnOlxuICAgICAgICBjYXNlICdSUzM4NCc6XG4gICAgICAgIGNhc2UgJ1JTNTEyJzoge1xuICAgICAgICAgICAgaWYgKCFpc0FsZ29yaXRobShrZXkuYWxnb3JpdGhtLCAnUlNBU1NBLVBLQ1MxLXYxXzUnKSlcbiAgICAgICAgICAgICAgICB0aHJvdyB1bnVzYWJsZSgnUlNBU1NBLVBLQ1MxLXYxXzUnKTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkID0gcGFyc2VJbnQoYWxnLnNsaWNlKDIpLCAxMCk7XG4gICAgICAgICAgICBjb25zdCBhY3R1YWwgPSBnZXRIYXNoTGVuZ3RoKGtleS5hbGdvcml0aG0uaGFzaCk7XG4gICAgICAgICAgICBpZiAoYWN0dWFsICE9PSBleHBlY3RlZClcbiAgICAgICAgICAgICAgICB0aHJvdyB1bnVzYWJsZShgU0hBLSR7ZXhwZWN0ZWR9YCwgJ2FsZ29yaXRobS5oYXNoJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdQUzI1Nic6XG4gICAgICAgIGNhc2UgJ1BTMzg0JzpcbiAgICAgICAgY2FzZSAnUFM1MTInOiB7XG4gICAgICAgICAgICBpZiAoIWlzQWxnb3JpdGhtKGtleS5hbGdvcml0aG0sICdSU0EtUFNTJykpXG4gICAgICAgICAgICAgICAgdGhyb3cgdW51c2FibGUoJ1JTQS1QU1MnKTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkID0gcGFyc2VJbnQoYWxnLnNsaWNlKDIpLCAxMCk7XG4gICAgICAgICAgICBjb25zdCBhY3R1YWwgPSBnZXRIYXNoTGVuZ3RoKGtleS5hbGdvcml0aG0uaGFzaCk7XG4gICAgICAgICAgICBpZiAoYWN0dWFsICE9PSBleHBlY3RlZClcbiAgICAgICAgICAgICAgICB0aHJvdyB1bnVzYWJsZShgU0hBLSR7ZXhwZWN0ZWR9YCwgJ2FsZ29yaXRobS5oYXNoJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdFZERTQSc6IHtcbiAgICAgICAgICAgIGlmIChrZXkuYWxnb3JpdGhtLm5hbWUgIT09ICdFZDI1NTE5JyAmJiBrZXkuYWxnb3JpdGhtLm5hbWUgIT09ICdFZDQ0OCcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyB1bnVzYWJsZSgnRWQyNTUxOSBvciBFZDQ0OCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnRVMyNTYnOlxuICAgICAgICBjYXNlICdFUzM4NCc6XG4gICAgICAgIGNhc2UgJ0VTNTEyJzoge1xuICAgICAgICAgICAgaWYgKCFpc0FsZ29yaXRobShrZXkuYWxnb3JpdGhtLCAnRUNEU0EnKSlcbiAgICAgICAgICAgICAgICB0aHJvdyB1bnVzYWJsZSgnRUNEU0EnKTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkID0gZ2V0TmFtZWRDdXJ2ZShhbGcpO1xuICAgICAgICAgICAgY29uc3QgYWN0dWFsID0ga2V5LmFsZ29yaXRobS5uYW1lZEN1cnZlO1xuICAgICAgICAgICAgaWYgKGFjdHVhbCAhPT0gZXhwZWN0ZWQpXG4gICAgICAgICAgICAgICAgdGhyb3cgdW51c2FibGUoZXhwZWN0ZWQsICdhbGdvcml0aG0ubmFtZWRDdXJ2ZScpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NyeXB0b0tleSBkb2VzIG5vdCBzdXBwb3J0IHRoaXMgb3BlcmF0aW9uJyk7XG4gICAgfVxuICAgIGNoZWNrVXNhZ2Uoa2V5LCB1c2FnZXMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrRW5jQ3J5cHRvS2V5KGtleSwgYWxnLCAuLi51c2FnZXMpIHtcbiAgICBzd2l0Y2ggKGFsZykge1xuICAgICAgICBjYXNlICdBMTI4R0NNJzpcbiAgICAgICAgY2FzZSAnQTE5MkdDTSc6XG4gICAgICAgIGNhc2UgJ0EyNTZHQ00nOiB7XG4gICAgICAgICAgICBpZiAoIWlzQWxnb3JpdGhtKGtleS5hbGdvcml0aG0sICdBRVMtR0NNJykpXG4gICAgICAgICAgICAgICAgdGhyb3cgdW51c2FibGUoJ0FFUy1HQ00nKTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkID0gcGFyc2VJbnQoYWxnLnNsaWNlKDEsIDQpLCAxMCk7XG4gICAgICAgICAgICBjb25zdCBhY3R1YWwgPSBrZXkuYWxnb3JpdGhtLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChhY3R1YWwgIT09IGV4cGVjdGVkKVxuICAgICAgICAgICAgICAgIHRocm93IHVudXNhYmxlKGV4cGVjdGVkLCAnYWxnb3JpdGhtLmxlbmd0aCcpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnQTEyOEtXJzpcbiAgICAgICAgY2FzZSAnQTE5MktXJzpcbiAgICAgICAgY2FzZSAnQTI1NktXJzoge1xuICAgICAgICAgICAgaWYgKCFpc0FsZ29yaXRobShrZXkuYWxnb3JpdGhtLCAnQUVTLUtXJykpXG4gICAgICAgICAgICAgICAgdGhyb3cgdW51c2FibGUoJ0FFUy1LVycpO1xuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWQgPSBwYXJzZUludChhbGcuc2xpY2UoMSwgNCksIDEwKTtcbiAgICAgICAgICAgIGNvbnN0IGFjdHVhbCA9IGtleS5hbGdvcml0aG0ubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGFjdHVhbCAhPT0gZXhwZWN0ZWQpXG4gICAgICAgICAgICAgICAgdGhyb3cgdW51c2FibGUoZXhwZWN0ZWQsICdhbGdvcml0aG0ubGVuZ3RoJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdFQ0RIJzoge1xuICAgICAgICAgICAgc3dpdGNoIChrZXkuYWxnb3JpdGhtLm5hbWUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdFQ0RIJzpcbiAgICAgICAgICAgICAgICBjYXNlICdYMjU1MTknOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1g0NDgnOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyB1bnVzYWJsZSgnRUNESCwgWDI1NTE5LCBvciBYNDQ4Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdQQkVTMi1IUzI1NitBMTI4S1cnOlxuICAgICAgICBjYXNlICdQQkVTMi1IUzM4NCtBMTkyS1cnOlxuICAgICAgICBjYXNlICdQQkVTMi1IUzUxMitBMjU2S1cnOlxuICAgICAgICAgICAgaWYgKCFpc0FsZ29yaXRobShrZXkuYWxnb3JpdGhtLCAnUEJLREYyJykpXG4gICAgICAgICAgICAgICAgdGhyb3cgdW51c2FibGUoJ1BCS0RGMicpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQJzpcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAtMjU2JzpcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAtMzg0JzpcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAtNTEyJzoge1xuICAgICAgICAgICAgaWYgKCFpc0FsZ29yaXRobShrZXkuYWxnb3JpdGhtLCAnUlNBLU9BRVAnKSlcbiAgICAgICAgICAgICAgICB0aHJvdyB1bnVzYWJsZSgnUlNBLU9BRVAnKTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkID0gcGFyc2VJbnQoYWxnLnNsaWNlKDkpLCAxMCkgfHwgMTtcbiAgICAgICAgICAgIGNvbnN0IGFjdHVhbCA9IGdldEhhc2hMZW5ndGgoa2V5LmFsZ29yaXRobS5oYXNoKTtcbiAgICAgICAgICAgIGlmIChhY3R1YWwgIT09IGV4cGVjdGVkKVxuICAgICAgICAgICAgICAgIHRocm93IHVudXNhYmxlKGBTSEEtJHtleHBlY3RlZH1gLCAnYWxnb3JpdGhtLmhhc2gnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDcnlwdG9LZXkgZG9lcyBub3Qgc3VwcG9ydCB0aGlzIG9wZXJhdGlvbicpO1xuICAgIH1cbiAgICBjaGVja1VzYWdlKGtleSwgdXNhZ2VzKTtcbn1cbiIsImZ1bmN0aW9uIG1lc3NhZ2UobXNnLCBhY3R1YWwsIC4uLnR5cGVzKSB7XG4gICAgdHlwZXMgPSB0eXBlcy5maWx0ZXIoQm9vbGVhbik7XG4gICAgaWYgKHR5cGVzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgY29uc3QgbGFzdCA9IHR5cGVzLnBvcCgpO1xuICAgICAgICBtc2cgKz0gYG9uZSBvZiB0eXBlICR7dHlwZXMuam9pbignLCAnKX0sIG9yICR7bGFzdH0uYDtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZXMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIG1zZyArPSBgb25lIG9mIHR5cGUgJHt0eXBlc1swXX0gb3IgJHt0eXBlc1sxXX0uYDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG1zZyArPSBgb2YgdHlwZSAke3R5cGVzWzBdfS5gO1xuICAgIH1cbiAgICBpZiAoYWN0dWFsID09IG51bGwpIHtcbiAgICAgICAgbXNnICs9IGAgUmVjZWl2ZWQgJHthY3R1YWx9YDtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGFjdHVhbCA9PT0gJ2Z1bmN0aW9uJyAmJiBhY3R1YWwubmFtZSkge1xuICAgICAgICBtc2cgKz0gYCBSZWNlaXZlZCBmdW5jdGlvbiAke2FjdHVhbC5uYW1lfWA7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBhY3R1YWwgPT09ICdvYmplY3QnICYmIGFjdHVhbCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChhY3R1YWwuY29uc3RydWN0b3I/Lm5hbWUpIHtcbiAgICAgICAgICAgIG1zZyArPSBgIFJlY2VpdmVkIGFuIGluc3RhbmNlIG9mICR7YWN0dWFsLmNvbnN0cnVjdG9yLm5hbWV9YDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbXNnO1xufVxuZXhwb3J0IGRlZmF1bHQgKGFjdHVhbCwgLi4udHlwZXMpID0+IHtcbiAgICByZXR1cm4gbWVzc2FnZSgnS2V5IG11c3QgYmUgJywgYWN0dWFsLCAuLi50eXBlcyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIHdpdGhBbGcoYWxnLCBhY3R1YWwsIC4uLnR5cGVzKSB7XG4gICAgcmV0dXJuIG1lc3NhZ2UoYEtleSBmb3IgdGhlICR7YWxnfSBhbGdvcml0aG0gbXVzdCBiZSBgLCBhY3R1YWwsIC4uLnR5cGVzKTtcbn1cbiIsImltcG9ydCB7IGlzQ3J5cHRvS2V5IH0gZnJvbSAnLi93ZWJjcnlwdG8uanMnO1xuZXhwb3J0IGRlZmF1bHQgKGtleSkgPT4ge1xuICAgIGlmIChpc0NyeXB0b0tleShrZXkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4ga2V5Py5bU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ0tleU9iamVjdCc7XG59O1xuZXhwb3J0IGNvbnN0IHR5cGVzID0gWydDcnlwdG9LZXknXTtcbiIsImltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzX29iamVjdC5qcyc7XG5leHBvcnQgZnVuY3Rpb24gaXNKV0soa2V5KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGtleSkgJiYgdHlwZW9mIGtleS5rdHkgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJpdmF0ZUpXSyhrZXkpIHtcbiAgICByZXR1cm4ga2V5Lmt0eSAhPT0gJ29jdCcgJiYgdHlwZW9mIGtleS5kID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1B1YmxpY0pXSyhrZXkpIHtcbiAgICByZXR1cm4ga2V5Lmt0eSAhPT0gJ29jdCcgJiYgdHlwZW9mIGtleS5kID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1NlY3JldEpXSyhrZXkpIHtcbiAgICByZXR1cm4gaXNKV0soa2V5KSAmJiBrZXkua3R5ID09PSAnb2N0JyAmJiB0eXBlb2Yga2V5LmsgPT09ICdzdHJpbmcnO1xufVxuIiwiaW1wb3J0IHsgaXNKV0sgfSBmcm9tICcuLi9saWIvaXNfandrLmpzJztcbmltcG9ydCB7IGRlY29kZSB9IGZyb20gJy4vYmFzZTY0dXJsLmpzJztcbmltcG9ydCBpbXBvcnRKV0sgZnJvbSAnLi9qd2tfdG9fa2V5LmpzJztcbmNvbnN0IGV4cG9ydEtleVZhbHVlID0gKGspID0+IGRlY29kZShrKTtcbmxldCBwcml2Q2FjaGU7XG5sZXQgcHViQ2FjaGU7XG5jb25zdCBpc0tleU9iamVjdCA9IChrZXkpID0+IHtcbiAgICByZXR1cm4ga2V5Py5bU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ0tleU9iamVjdCc7XG59O1xuY29uc3QgaW1wb3J0QW5kQ2FjaGUgPSBhc3luYyAoY2FjaGUsIGtleSwgandrLCBhbGcsIGZyZWV6ZSA9IGZhbHNlKSA9PiB7XG4gICAgbGV0IGNhY2hlZCA9IGNhY2hlLmdldChrZXkpO1xuICAgIGlmIChjYWNoZWQ/LlthbGddKSB7XG4gICAgICAgIHJldHVybiBjYWNoZWRbYWxnXTtcbiAgICB9XG4gICAgY29uc3QgY3J5cHRvS2V5ID0gYXdhaXQgaW1wb3J0SldLKHsgLi4uandrLCBhbGcgfSk7XG4gICAgaWYgKGZyZWV6ZSlcbiAgICAgICAgT2JqZWN0LmZyZWV6ZShrZXkpO1xuICAgIGlmICghY2FjaGVkKSB7XG4gICAgICAgIGNhY2hlLnNldChrZXksIHsgW2FsZ106IGNyeXB0b0tleSB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNhY2hlZFthbGddID0gY3J5cHRvS2V5O1xuICAgIH1cbiAgICByZXR1cm4gY3J5cHRvS2V5O1xufTtcbmNvbnN0IG5vcm1hbGl6ZVB1YmxpY0tleSA9IChrZXksIGFsZykgPT4ge1xuICAgIGlmIChpc0tleU9iamVjdChrZXkpKSB7XG4gICAgICAgIGxldCBqd2sgPSBrZXkuZXhwb3J0KHsgZm9ybWF0OiAnandrJyB9KTtcbiAgICAgICAgZGVsZXRlIGp3ay5kO1xuICAgICAgICBkZWxldGUgandrLmRwO1xuICAgICAgICBkZWxldGUgandrLmRxO1xuICAgICAgICBkZWxldGUgandrLnA7XG4gICAgICAgIGRlbGV0ZSBqd2sucTtcbiAgICAgICAgZGVsZXRlIGp3ay5xaTtcbiAgICAgICAgaWYgKGp3ay5rKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhwb3J0S2V5VmFsdWUoandrLmspO1xuICAgICAgICB9XG4gICAgICAgIHB1YkNhY2hlIHx8IChwdWJDYWNoZSA9IG5ldyBXZWFrTWFwKCkpO1xuICAgICAgICByZXR1cm4gaW1wb3J0QW5kQ2FjaGUocHViQ2FjaGUsIGtleSwgandrLCBhbGcpO1xuICAgIH1cbiAgICBpZiAoaXNKV0soa2V5KSkge1xuICAgICAgICBpZiAoa2V5LmspXG4gICAgICAgICAgICByZXR1cm4gZGVjb2RlKGtleS5rKTtcbiAgICAgICAgcHViQ2FjaGUgfHwgKHB1YkNhY2hlID0gbmV3IFdlYWtNYXAoKSk7XG4gICAgICAgIGNvbnN0IGNyeXB0b0tleSA9IGltcG9ydEFuZENhY2hlKHB1YkNhY2hlLCBrZXksIGtleSwgYWxnLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIGNyeXB0b0tleTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbn07XG5jb25zdCBub3JtYWxpemVQcml2YXRlS2V5ID0gKGtleSwgYWxnKSA9PiB7XG4gICAgaWYgKGlzS2V5T2JqZWN0KGtleSkpIHtcbiAgICAgICAgbGV0IGp3ayA9IGtleS5leHBvcnQoeyBmb3JtYXQ6ICdqd2snIH0pO1xuICAgICAgICBpZiAoandrLmspIHtcbiAgICAgICAgICAgIHJldHVybiBleHBvcnRLZXlWYWx1ZShqd2suayk7XG4gICAgICAgIH1cbiAgICAgICAgcHJpdkNhY2hlIHx8IChwcml2Q2FjaGUgPSBuZXcgV2Vha01hcCgpKTtcbiAgICAgICAgcmV0dXJuIGltcG9ydEFuZENhY2hlKHByaXZDYWNoZSwga2V5LCBqd2ssIGFsZyk7XG4gICAgfVxuICAgIGlmIChpc0pXSyhrZXkpKSB7XG4gICAgICAgIGlmIChrZXkuaylcbiAgICAgICAgICAgIHJldHVybiBkZWNvZGUoa2V5LmspO1xuICAgICAgICBwcml2Q2FjaGUgfHwgKHByaXZDYWNoZSA9IG5ldyBXZWFrTWFwKCkpO1xuICAgICAgICBjb25zdCBjcnlwdG9LZXkgPSBpbXBvcnRBbmRDYWNoZShwcml2Q2FjaGUsIGtleSwga2V5LCBhbGcsIHRydWUpO1xuICAgICAgICByZXR1cm4gY3J5cHRvS2V5O1xuICAgIH1cbiAgICByZXR1cm4ga2V5O1xufTtcbmV4cG9ydCBkZWZhdWx0IHsgbm9ybWFsaXplUHVibGljS2V5LCBub3JtYWxpemVQcml2YXRlS2V5IH07XG4iLCJpbXBvcnQgc3VidGxlQWxnb3JpdGhtIGZyb20gJy4vc3VidGxlX2RzYS5qcyc7XG5pbXBvcnQgY3J5cHRvIGZyb20gJy4vd2ViY3J5cHRvLmpzJztcbmltcG9ydCBjaGVja0tleUxlbmd0aCBmcm9tICcuL2NoZWNrX2tleV9sZW5ndGguanMnO1xuaW1wb3J0IGdldFZlcmlmeUtleSBmcm9tICcuL2dldF9zaWduX3ZlcmlmeV9rZXkuanMnO1xuY29uc3QgdmVyaWZ5ID0gYXN5bmMgKGFsZywga2V5LCBzaWduYXR1cmUsIGRhdGEpID0+IHtcbiAgICBjb25zdCBjcnlwdG9LZXkgPSBhd2FpdCBnZXRWZXJpZnlLZXkoYWxnLCBrZXksICd2ZXJpZnknKTtcbiAgICBjaGVja0tleUxlbmd0aChhbGcsIGNyeXB0b0tleSk7XG4gICAgY29uc3QgYWxnb3JpdGhtID0gc3VidGxlQWxnb3JpdGhtKGFsZywgY3J5cHRvS2V5LmFsZ29yaXRobSk7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IGNyeXB0by5zdWJ0bGUudmVyaWZ5KGFsZ29yaXRobSwgY3J5cHRvS2V5LCBzaWduYXR1cmUsIGRhdGEpO1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgdmVyaWZ5O1xuIiwiaW1wb3J0IGNyeXB0bywgeyBpc0NyeXB0b0tleSB9IGZyb20gJy4vd2ViY3J5cHRvLmpzJztcbmltcG9ydCB7IGNoZWNrU2lnQ3J5cHRvS2V5IH0gZnJvbSAnLi4vbGliL2NyeXB0b19rZXkuanMnO1xuaW1wb3J0IGludmFsaWRLZXlJbnB1dCBmcm9tICcuLi9saWIvaW52YWxpZF9rZXlfaW5wdXQuanMnO1xuaW1wb3J0IHsgdHlwZXMgfSBmcm9tICcuL2lzX2tleV9saWtlLmpzJztcbmltcG9ydCBub3JtYWxpemUgZnJvbSAnLi9ub3JtYWxpemVfa2V5LmpzJztcbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGdldENyeXB0b0tleShhbGcsIGtleSwgdXNhZ2UpIHtcbiAgICBpZiAodXNhZ2UgPT09ICdzaWduJykge1xuICAgICAgICBrZXkgPSBhd2FpdCBub3JtYWxpemUubm9ybWFsaXplUHJpdmF0ZUtleShrZXksIGFsZyk7XG4gICAgfVxuICAgIGlmICh1c2FnZSA9PT0gJ3ZlcmlmeScpIHtcbiAgICAgICAga2V5ID0gYXdhaXQgbm9ybWFsaXplLm5vcm1hbGl6ZVB1YmxpY0tleShrZXksIGFsZyk7XG4gICAgfVxuICAgIGlmIChpc0NyeXB0b0tleShrZXkpKSB7XG4gICAgICAgIGNoZWNrU2lnQ3J5cHRvS2V5KGtleSwgYWxnLCB1c2FnZSk7XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICAgIGlmIChrZXkgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIGlmICghYWxnLnN0YXJ0c1dpdGgoJ0hTJykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoaW52YWxpZEtleUlucHV0KGtleSwgLi4udHlwZXMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoJ3JhdycsIGtleSwgeyBoYXNoOiBgU0hBLSR7YWxnLnNsaWNlKC0zKX1gLCBuYW1lOiAnSE1BQycgfSwgZmFsc2UsIFt1c2FnZV0pO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGludmFsaWRLZXlJbnB1dChrZXksIC4uLnR5cGVzLCAnVWludDhBcnJheScsICdKU09OIFdlYiBLZXknKSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCAoYWxnLCBrZXkpID0+IHtcbiAgICBpZiAoYWxnLnN0YXJ0c1dpdGgoJ1JTJykgfHwgYWxnLnN0YXJ0c1dpdGgoJ1BTJykpIHtcbiAgICAgICAgY29uc3QgeyBtb2R1bHVzTGVuZ3RoIH0gPSBrZXkuYWxnb3JpdGhtO1xuICAgICAgICBpZiAodHlwZW9mIG1vZHVsdXNMZW5ndGggIT09ICdudW1iZXInIHx8IG1vZHVsdXNMZW5ndGggPCAyMDQ4KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke2FsZ30gcmVxdWlyZXMga2V5IG1vZHVsdXNMZW5ndGggdG8gYmUgMjA0OCBiaXRzIG9yIGxhcmdlcmApO1xuICAgICAgICB9XG4gICAgfVxufTtcbiIsImltcG9ydCB7IEpPU0VOb3RTdXBwb3J0ZWQgfSBmcm9tICcuLi91dGlsL2Vycm9ycy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdWJ0bGVEc2EoYWxnLCBhbGdvcml0aG0pIHtcbiAgICBjb25zdCBoYXNoID0gYFNIQS0ke2FsZy5zbGljZSgtMyl9YDtcbiAgICBzd2l0Y2ggKGFsZykge1xuICAgICAgICBjYXNlICdIUzI1Nic6XG4gICAgICAgIGNhc2UgJ0hTMzg0JzpcbiAgICAgICAgY2FzZSAnSFM1MTInOlxuICAgICAgICAgICAgcmV0dXJuIHsgaGFzaCwgbmFtZTogJ0hNQUMnIH07XG4gICAgICAgIGNhc2UgJ1BTMjU2JzpcbiAgICAgICAgY2FzZSAnUFMzODQnOlxuICAgICAgICBjYXNlICdQUzUxMic6XG4gICAgICAgICAgICByZXR1cm4geyBoYXNoLCBuYW1lOiAnUlNBLVBTUycsIHNhbHRMZW5ndGg6IGFsZy5zbGljZSgtMykgPj4gMyB9O1xuICAgICAgICBjYXNlICdSUzI1Nic6XG4gICAgICAgIGNhc2UgJ1JTMzg0JzpcbiAgICAgICAgY2FzZSAnUlM1MTInOlxuICAgICAgICAgICAgcmV0dXJuIHsgaGFzaCwgbmFtZTogJ1JTQVNTQS1QS0NTMS12MV81JyB9O1xuICAgICAgICBjYXNlICdFUzI1Nic6XG4gICAgICAgIGNhc2UgJ0VTMzg0JzpcbiAgICAgICAgY2FzZSAnRVM1MTInOlxuICAgICAgICAgICAgcmV0dXJuIHsgaGFzaCwgbmFtZTogJ0VDRFNBJywgbmFtZWRDdXJ2ZTogYWxnb3JpdGhtLm5hbWVkQ3VydmUgfTtcbiAgICAgICAgY2FzZSAnRWREU0EnOlxuICAgICAgICAgICAgcmV0dXJuIHsgbmFtZTogYWxnb3JpdGhtLm5hbWUgfTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBKT1NFTm90U3VwcG9ydGVkKGBhbGcgJHthbGd9IGlzIG5vdCBzdXBwb3J0ZWQgZWl0aGVyIGJ5IEpPU0Ugb3IgeW91ciBqYXZhc2NyaXB0IHJ1bnRpbWVgKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyB3aXRoQWxnIGFzIGludmFsaWRLZXlJbnB1dCB9IGZyb20gJy4vaW52YWxpZF9rZXlfaW5wdXQuanMnO1xuaW1wb3J0IGlzS2V5TGlrZSwgeyB0eXBlcyB9IGZyb20gJy4uL3J1bnRpbWUvaXNfa2V5X2xpa2UuanMnO1xuaW1wb3J0ICogYXMgandrIGZyb20gJy4vaXNfandrLmpzJztcbmNvbnN0IHRhZyA9IChrZXkpID0+IGtleT8uW1N5bWJvbC50b1N0cmluZ1RhZ107XG5jb25zdCBqd2tNYXRjaGVzT3AgPSAoYWxnLCBrZXksIHVzYWdlKSA9PiB7XG4gICAgaWYgKGtleS51c2UgIT09IHVuZGVmaW5lZCAmJiBrZXkudXNlICE9PSAnc2lnJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGtleSBmb3IgdGhpcyBvcGVyYXRpb24sIHdoZW4gcHJlc2VudCBpdHMgdXNlIG11c3QgYmUgc2lnJyk7XG4gICAgfVxuICAgIGlmIChrZXkua2V5X29wcyAhPT0gdW5kZWZpbmVkICYmIGtleS5rZXlfb3BzLmluY2x1ZGVzPy4odXNhZ2UpICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQga2V5IGZvciB0aGlzIG9wZXJhdGlvbiwgd2hlbiBwcmVzZW50IGl0cyBrZXlfb3BzIG11c3QgaW5jbHVkZSAke3VzYWdlfWApO1xuICAgIH1cbiAgICBpZiAoa2V5LmFsZyAhPT0gdW5kZWZpbmVkICYmIGtleS5hbGcgIT09IGFsZykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIGtleSBmb3IgdGhpcyBvcGVyYXRpb24sIHdoZW4gcHJlc2VudCBpdHMgYWxnIG11c3QgYmUgJHthbGd9YCk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbmNvbnN0IHN5bW1ldHJpY1R5cGVDaGVjayA9IChhbGcsIGtleSwgdXNhZ2UsIGFsbG93SndrKSA9PiB7XG4gICAgaWYgKGtleSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAoYWxsb3dKd2sgJiYgandrLmlzSldLKGtleSkpIHtcbiAgICAgICAgaWYgKGp3ay5pc1NlY3JldEpXSyhrZXkpICYmIGp3a01hdGNoZXNPcChhbGcsIGtleSwgdXNhZ2UpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBKU09OIFdlYiBLZXkgZm9yIHN5bW1ldHJpYyBhbGdvcml0aG1zIG11c3QgaGF2ZSBKV0sgXCJrdHlcIiAoS2V5IFR5cGUpIGVxdWFsIHRvIFwib2N0XCIgYW5kIHRoZSBKV0sgXCJrXCIgKEtleSBWYWx1ZSkgcHJlc2VudGApO1xuICAgIH1cbiAgICBpZiAoIWlzS2V5TGlrZShrZXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoaW52YWxpZEtleUlucHV0KGFsZywga2V5LCAuLi50eXBlcywgJ1VpbnQ4QXJyYXknLCBhbGxvd0p3ayA/ICdKU09OIFdlYiBLZXknIDogbnVsbCkpO1xuICAgIH1cbiAgICBpZiAoa2V5LnR5cGUgIT09ICdzZWNyZXQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7dGFnKGtleSl9IGluc3RhbmNlcyBmb3Igc3ltbWV0cmljIGFsZ29yaXRobXMgbXVzdCBiZSBvZiB0eXBlIFwic2VjcmV0XCJgKTtcbiAgICB9XG59O1xuY29uc3QgYXN5bW1ldHJpY1R5cGVDaGVjayA9IChhbGcsIGtleSwgdXNhZ2UsIGFsbG93SndrKSA9PiB7XG4gICAgaWYgKGFsbG93SndrICYmIGp3ay5pc0pXSyhrZXkpKSB7XG4gICAgICAgIHN3aXRjaCAodXNhZ2UpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NpZ24nOlxuICAgICAgICAgICAgICAgIGlmIChqd2suaXNQcml2YXRlSldLKGtleSkgJiYgandrTWF0Y2hlc09wKGFsZywga2V5LCB1c2FnZSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBKU09OIFdlYiBLZXkgZm9yIHRoaXMgb3BlcmF0aW9uIGJlIGEgcHJpdmF0ZSBKV0tgKTtcbiAgICAgICAgICAgIGNhc2UgJ3ZlcmlmeSc6XG4gICAgICAgICAgICAgICAgaWYgKGp3ay5pc1B1YmxpY0pXSyhrZXkpICYmIGp3a01hdGNoZXNPcChhbGcsIGtleSwgdXNhZ2UpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSlNPTiBXZWIgS2V5IGZvciB0aGlzIG9wZXJhdGlvbiBiZSBhIHB1YmxpYyBKV0tgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWlzS2V5TGlrZShrZXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoaW52YWxpZEtleUlucHV0KGFsZywga2V5LCAuLi50eXBlcywgYWxsb3dKd2sgPyAnSlNPTiBXZWIgS2V5JyA6IG51bGwpKTtcbiAgICB9XG4gICAgaWYgKGtleS50eXBlID09PSAnc2VjcmV0Jykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke3RhZyhrZXkpfSBpbnN0YW5jZXMgZm9yIGFzeW1tZXRyaWMgYWxnb3JpdGhtcyBtdXN0IG5vdCBiZSBvZiB0eXBlIFwic2VjcmV0XCJgKTtcbiAgICB9XG4gICAgaWYgKHVzYWdlID09PSAnc2lnbicgJiYga2V5LnR5cGUgPT09ICdwdWJsaWMnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7dGFnKGtleSl9IGluc3RhbmNlcyBmb3IgYXN5bW1ldHJpYyBhbGdvcml0aG0gc2lnbmluZyBtdXN0IGJlIG9mIHR5cGUgXCJwcml2YXRlXCJgKTtcbiAgICB9XG4gICAgaWYgKHVzYWdlID09PSAnZGVjcnlwdCcgJiYga2V5LnR5cGUgPT09ICdwdWJsaWMnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7dGFnKGtleSl9IGluc3RhbmNlcyBmb3IgYXN5bW1ldHJpYyBhbGdvcml0aG0gZGVjcnlwdGlvbiBtdXN0IGJlIG9mIHR5cGUgXCJwcml2YXRlXCJgKTtcbiAgICB9XG4gICAgaWYgKGtleS5hbGdvcml0aG0gJiYgdXNhZ2UgPT09ICd2ZXJpZnknICYmIGtleS50eXBlID09PSAncHJpdmF0ZScpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHt0YWcoa2V5KX0gaW5zdGFuY2VzIGZvciBhc3ltbWV0cmljIGFsZ29yaXRobSB2ZXJpZnlpbmcgbXVzdCBiZSBvZiB0eXBlIFwicHVibGljXCJgKTtcbiAgICB9XG4gICAgaWYgKGtleS5hbGdvcml0aG0gJiYgdXNhZ2UgPT09ICdlbmNyeXB0JyAmJiBrZXkudHlwZSA9PT0gJ3ByaXZhdGUnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7dGFnKGtleSl9IGluc3RhbmNlcyBmb3IgYXN5bW1ldHJpYyBhbGdvcml0aG0gZW5jcnlwdGlvbiBtdXN0IGJlIG9mIHR5cGUgXCJwdWJsaWNcImApO1xuICAgIH1cbn07XG5mdW5jdGlvbiBjaGVja0tleVR5cGUoYWxsb3dKd2ssIGFsZywga2V5LCB1c2FnZSkge1xuICAgIGNvbnN0IHN5bW1ldHJpYyA9IGFsZy5zdGFydHNXaXRoKCdIUycpIHx8XG4gICAgICAgIGFsZyA9PT0gJ2RpcicgfHxcbiAgICAgICAgYWxnLnN0YXJ0c1dpdGgoJ1BCRVMyJykgfHxcbiAgICAgICAgL15BXFxkezN9KD86R0NNKT9LVyQvLnRlc3QoYWxnKTtcbiAgICBpZiAoc3ltbWV0cmljKSB7XG4gICAgICAgIHN5bW1ldHJpY1R5cGVDaGVjayhhbGcsIGtleSwgdXNhZ2UsIGFsbG93SndrKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGFzeW1tZXRyaWNUeXBlQ2hlY2soYWxnLCBrZXksIHVzYWdlLCBhbGxvd0p3ayk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgY2hlY2tLZXlUeXBlLmJpbmQodW5kZWZpbmVkLCBmYWxzZSk7XG5leHBvcnQgY29uc3QgY2hlY2tLZXlUeXBlV2l0aEp3ayA9IGNoZWNrS2V5VHlwZS5iaW5kKHVuZGVmaW5lZCwgdHJ1ZSk7XG4iLCJpbXBvcnQgeyBmbGF0dGVuZWRWZXJpZnkgfSBmcm9tICcuLi9mbGF0dGVuZWQvdmVyaWZ5LmpzJztcbmltcG9ydCB7IEpXU0ludmFsaWQgfSBmcm9tICcuLi8uLi91dGlsL2Vycm9ycy5qcyc7XG5pbXBvcnQgeyBkZWNvZGVyIH0gZnJvbSAnLi4vLi4vbGliL2J1ZmZlcl91dGlscy5qcyc7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29tcGFjdFZlcmlmeShqd3MsIGtleSwgb3B0aW9ucykge1xuICAgIGlmIChqd3MgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIGp3cyA9IGRlY29kZXIuZGVjb2RlKGp3cyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgandzICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgSldTSW52YWxpZCgnQ29tcGFjdCBKV1MgbXVzdCBiZSBhIHN0cmluZyBvciBVaW50OEFycmF5Jyk7XG4gICAgfVxuICAgIGNvbnN0IHsgMDogcHJvdGVjdGVkSGVhZGVyLCAxOiBwYXlsb2FkLCAyOiBzaWduYXR1cmUsIGxlbmd0aCB9ID0gandzLnNwbGl0KCcuJyk7XG4gICAgaWYgKGxlbmd0aCAhPT0gMykge1xuICAgICAgICB0aHJvdyBuZXcgSldTSW52YWxpZCgnSW52YWxpZCBDb21wYWN0IEpXUycpO1xuICAgIH1cbiAgICBjb25zdCB2ZXJpZmllZCA9IGF3YWl0IGZsYXR0ZW5lZFZlcmlmeSh7IHBheWxvYWQsIHByb3RlY3RlZDogcHJvdGVjdGVkSGVhZGVyLCBzaWduYXR1cmUgfSwga2V5LCBvcHRpb25zKTtcbiAgICBjb25zdCByZXN1bHQgPSB7IHBheWxvYWQ6IHZlcmlmaWVkLnBheWxvYWQsIHByb3RlY3RlZEhlYWRlcjogdmVyaWZpZWQucHJvdGVjdGVkSGVhZGVyIH07XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHsgLi4ucmVzdWx0LCBrZXk6IHZlcmlmaWVkLmtleSB9O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIiwiaW1wb3J0IHsgZGVjb2RlIGFzIGJhc2U2NHVybCB9IGZyb20gJy4uLy4uL3J1bnRpbWUvYmFzZTY0dXJsLmpzJztcbmltcG9ydCB2ZXJpZnkgZnJvbSAnLi4vLi4vcnVudGltZS92ZXJpZnkuanMnO1xuaW1wb3J0IHsgSk9TRUFsZ05vdEFsbG93ZWQsIEpXU0ludmFsaWQsIEpXU1NpZ25hdHVyZVZlcmlmaWNhdGlvbkZhaWxlZCB9IGZyb20gJy4uLy4uL3V0aWwvZXJyb3JzLmpzJztcbmltcG9ydCB7IGNvbmNhdCwgZW5jb2RlciwgZGVjb2RlciB9IGZyb20gJy4uLy4uL2xpYi9idWZmZXJfdXRpbHMuanMnO1xuaW1wb3J0IGlzRGlzam9pbnQgZnJvbSAnLi4vLi4vbGliL2lzX2Rpc2pvaW50LmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuLi8uLi9saWIvaXNfb2JqZWN0LmpzJztcbmltcG9ydCB7IGNoZWNrS2V5VHlwZVdpdGhKd2sgfSBmcm9tICcuLi8uLi9saWIvY2hlY2tfa2V5X3R5cGUuanMnO1xuaW1wb3J0IHZhbGlkYXRlQ3JpdCBmcm9tICcuLi8uLi9saWIvdmFsaWRhdGVfY3JpdC5qcyc7XG5pbXBvcnQgdmFsaWRhdGVBbGdvcml0aG1zIGZyb20gJy4uLy4uL2xpYi92YWxpZGF0ZV9hbGdvcml0aG1zLmpzJztcbmltcG9ydCB7IGlzSldLIH0gZnJvbSAnLi4vLi4vbGliL2lzX2p3ay5qcyc7XG5pbXBvcnQgeyBpbXBvcnRKV0sgfSBmcm9tICcuLi8uLi9rZXkvaW1wb3J0LmpzJztcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmbGF0dGVuZWRWZXJpZnkoandzLCBrZXksIG9wdGlvbnMpIHtcbiAgICBpZiAoIWlzT2JqZWN0KGp3cykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpXU0ludmFsaWQoJ0ZsYXR0ZW5lZCBKV1MgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgICB9XG4gICAgaWYgKGp3cy5wcm90ZWN0ZWQgPT09IHVuZGVmaW5lZCAmJiBqd3MuaGVhZGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpXU0ludmFsaWQoJ0ZsYXR0ZW5lZCBKV1MgbXVzdCBoYXZlIGVpdGhlciBvZiB0aGUgXCJwcm90ZWN0ZWRcIiBvciBcImhlYWRlclwiIG1lbWJlcnMnKTtcbiAgICB9XG4gICAgaWYgKGp3cy5wcm90ZWN0ZWQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgandzLnByb3RlY3RlZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpXU0ludmFsaWQoJ0pXUyBQcm90ZWN0ZWQgSGVhZGVyIGluY29ycmVjdCB0eXBlJyk7XG4gICAgfVxuICAgIGlmIChqd3MucGF5bG9hZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBKV1NJbnZhbGlkKCdKV1MgUGF5bG9hZCBtaXNzaW5nJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgandzLnNpZ25hdHVyZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpXU0ludmFsaWQoJ0pXUyBTaWduYXR1cmUgbWlzc2luZyBvciBpbmNvcnJlY3QgdHlwZScpO1xuICAgIH1cbiAgICBpZiAoandzLmhlYWRlciAhPT0gdW5kZWZpbmVkICYmICFpc09iamVjdChqd3MuaGVhZGVyKSkge1xuICAgICAgICB0aHJvdyBuZXcgSldTSW52YWxpZCgnSldTIFVucHJvdGVjdGVkIEhlYWRlciBpbmNvcnJlY3QgdHlwZScpO1xuICAgIH1cbiAgICBsZXQgcGFyc2VkUHJvdCA9IHt9O1xuICAgIGlmIChqd3MucHJvdGVjdGVkKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwcm90ZWN0ZWRIZWFkZXIgPSBiYXNlNjR1cmwoandzLnByb3RlY3RlZCk7XG4gICAgICAgICAgICBwYXJzZWRQcm90ID0gSlNPTi5wYXJzZShkZWNvZGVyLmRlY29kZShwcm90ZWN0ZWRIZWFkZXIpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSldTSW52YWxpZCgnSldTIFByb3RlY3RlZCBIZWFkZXIgaXMgaW52YWxpZCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghaXNEaXNqb2ludChwYXJzZWRQcm90LCBqd3MuaGVhZGVyKSkge1xuICAgICAgICB0aHJvdyBuZXcgSldTSW52YWxpZCgnSldTIFByb3RlY3RlZCBhbmQgSldTIFVucHJvdGVjdGVkIEhlYWRlciBQYXJhbWV0ZXIgbmFtZXMgbXVzdCBiZSBkaXNqb2ludCcpO1xuICAgIH1cbiAgICBjb25zdCBqb3NlSGVhZGVyID0ge1xuICAgICAgICAuLi5wYXJzZWRQcm90LFxuICAgICAgICAuLi5qd3MuaGVhZGVyLFxuICAgIH07XG4gICAgY29uc3QgZXh0ZW5zaW9ucyA9IHZhbGlkYXRlQ3JpdChKV1NJbnZhbGlkLCBuZXcgTWFwKFtbJ2I2NCcsIHRydWVdXSksIG9wdGlvbnM/LmNyaXQsIHBhcnNlZFByb3QsIGpvc2VIZWFkZXIpO1xuICAgIGxldCBiNjQgPSB0cnVlO1xuICAgIGlmIChleHRlbnNpb25zLmhhcygnYjY0JykpIHtcbiAgICAgICAgYjY0ID0gcGFyc2VkUHJvdC5iNjQ7XG4gICAgICAgIGlmICh0eXBlb2YgYjY0ICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBKV1NJbnZhbGlkKCdUaGUgXCJiNjRcIiAoYmFzZTY0dXJsLWVuY29kZSBwYXlsb2FkKSBIZWFkZXIgUGFyYW1ldGVyIG11c3QgYmUgYSBib29sZWFuJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgeyBhbGcgfSA9IGpvc2VIZWFkZXI7XG4gICAgaWYgKHR5cGVvZiBhbGcgIT09ICdzdHJpbmcnIHx8ICFhbGcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpXU0ludmFsaWQoJ0pXUyBcImFsZ1wiIChBbGdvcml0aG0pIEhlYWRlciBQYXJhbWV0ZXIgbWlzc2luZyBvciBpbnZhbGlkJyk7XG4gICAgfVxuICAgIGNvbnN0IGFsZ29yaXRobXMgPSBvcHRpb25zICYmIHZhbGlkYXRlQWxnb3JpdGhtcygnYWxnb3JpdGhtcycsIG9wdGlvbnMuYWxnb3JpdGhtcyk7XG4gICAgaWYgKGFsZ29yaXRobXMgJiYgIWFsZ29yaXRobXMuaGFzKGFsZykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpPU0VBbGdOb3RBbGxvd2VkKCdcImFsZ1wiIChBbGdvcml0aG0pIEhlYWRlciBQYXJhbWV0ZXIgdmFsdWUgbm90IGFsbG93ZWQnKTtcbiAgICB9XG4gICAgaWYgKGI2NCkge1xuICAgICAgICBpZiAodHlwZW9mIGp3cy5wYXlsb2FkICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEpXU0ludmFsaWQoJ0pXUyBQYXlsb2FkIG11c3QgYmUgYSBzdHJpbmcnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgandzLnBheWxvYWQgIT09ICdzdHJpbmcnICYmICEoandzLnBheWxvYWQgaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgICB0aHJvdyBuZXcgSldTSW52YWxpZCgnSldTIFBheWxvYWQgbXVzdCBiZSBhIHN0cmluZyBvciBhbiBVaW50OEFycmF5IGluc3RhbmNlJyk7XG4gICAgfVxuICAgIGxldCByZXNvbHZlZEtleSA9IGZhbHNlO1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGtleSA9IGF3YWl0IGtleShwYXJzZWRQcm90LCBqd3MpO1xuICAgICAgICByZXNvbHZlZEtleSA9IHRydWU7XG4gICAgICAgIGNoZWNrS2V5VHlwZVdpdGhKd2soYWxnLCBrZXksICd2ZXJpZnknKTtcbiAgICAgICAgaWYgKGlzSldLKGtleSkpIHtcbiAgICAgICAgICAgIGtleSA9IGF3YWl0IGltcG9ydEpXSyhrZXksIGFsZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNoZWNrS2V5VHlwZVdpdGhKd2soYWxnLCBrZXksICd2ZXJpZnknKTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGNvbmNhdChlbmNvZGVyLmVuY29kZShqd3MucHJvdGVjdGVkID8/ICcnKSwgZW5jb2Rlci5lbmNvZGUoJy4nKSwgdHlwZW9mIGp3cy5wYXlsb2FkID09PSAnc3RyaW5nJyA/IGVuY29kZXIuZW5jb2RlKGp3cy5wYXlsb2FkKSA6IGp3cy5wYXlsb2FkKTtcbiAgICBsZXQgc2lnbmF0dXJlO1xuICAgIHRyeSB7XG4gICAgICAgIHNpZ25hdHVyZSA9IGJhc2U2NHVybChqd3Muc2lnbmF0dXJlKTtcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICB0aHJvdyBuZXcgSldTSW52YWxpZCgnRmFpbGVkIHRvIGJhc2U2NHVybCBkZWNvZGUgdGhlIHNpZ25hdHVyZScpO1xuICAgIH1cbiAgICBjb25zdCB2ZXJpZmllZCA9IGF3YWl0IHZlcmlmeShhbGcsIGtleSwgc2lnbmF0dXJlLCBkYXRhKTtcbiAgICBpZiAoIXZlcmlmaWVkKSB7XG4gICAgICAgIHRocm93IG5ldyBKV1NTaWduYXR1cmVWZXJpZmljYXRpb25GYWlsZWQoKTtcbiAgICB9XG4gICAgbGV0IHBheWxvYWQ7XG4gICAgaWYgKGI2NCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcGF5bG9hZCA9IGJhc2U2NHVybChqd3MucGF5bG9hZCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEpXU0ludmFsaWQoJ0ZhaWxlZCB0byBiYXNlNjR1cmwgZGVjb2RlIHRoZSBwYXlsb2FkJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGp3cy5wYXlsb2FkID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXlsb2FkID0gZW5jb2Rlci5lbmNvZGUoandzLnBheWxvYWQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcGF5bG9hZCA9IGp3cy5wYXlsb2FkO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSB7IHBheWxvYWQgfTtcbiAgICBpZiAoandzLnByb3RlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdC5wcm90ZWN0ZWRIZWFkZXIgPSBwYXJzZWRQcm90O1xuICAgIH1cbiAgICBpZiAoandzLmhlYWRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdC51bnByb3RlY3RlZEhlYWRlciA9IGp3cy5oZWFkZXI7XG4gICAgfVxuICAgIGlmIChyZXNvbHZlZEtleSkge1xuICAgICAgICByZXR1cm4geyAuLi5yZXN1bHQsIGtleSB9O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIiwiY29uc3QgaXNEaXNqb2ludCA9ICguLi5oZWFkZXJzKSA9PiB7XG4gICAgY29uc3Qgc291cmNlcyA9IGhlYWRlcnMuZmlsdGVyKEJvb2xlYW4pO1xuICAgIGlmIChzb3VyY2VzLmxlbmd0aCA9PT0gMCB8fCBzb3VyY2VzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgbGV0IGFjYztcbiAgICBmb3IgKGNvbnN0IGhlYWRlciBvZiBzb3VyY2VzKSB7XG4gICAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSBPYmplY3Qua2V5cyhoZWFkZXIpO1xuICAgICAgICBpZiAoIWFjYyB8fCBhY2Muc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgYWNjID0gbmV3IFNldChwYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgcGFyYW1ldGVyIG9mIHBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgIGlmIChhY2MuaGFzKHBhcmFtZXRlcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY2MuYWRkKHBhcmFtZXRlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuZXhwb3J0IGRlZmF1bHQgaXNEaXNqb2ludDtcbiIsImltcG9ydCB7IEpPU0VOb3RTdXBwb3J0ZWQgfSBmcm9tICcuLi91dGlsL2Vycm9ycy5qcyc7XG5mdW5jdGlvbiB2YWxpZGF0ZUNyaXQoRXJyLCByZWNvZ25pemVkRGVmYXVsdCwgcmVjb2duaXplZE9wdGlvbiwgcHJvdGVjdGVkSGVhZGVyLCBqb3NlSGVhZGVyKSB7XG4gICAgaWYgKGpvc2VIZWFkZXIuY3JpdCAhPT0gdW5kZWZpbmVkICYmIHByb3RlY3RlZEhlYWRlcj8uY3JpdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnIoJ1wiY3JpdFwiIChDcml0aWNhbCkgSGVhZGVyIFBhcmFtZXRlciBNVVNUIGJlIGludGVncml0eSBwcm90ZWN0ZWQnKTtcbiAgICB9XG4gICAgaWYgKCFwcm90ZWN0ZWRIZWFkZXIgfHwgcHJvdGVjdGVkSGVhZGVyLmNyaXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbmV3IFNldCgpO1xuICAgIH1cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocHJvdGVjdGVkSGVhZGVyLmNyaXQpIHx8XG4gICAgICAgIHByb3RlY3RlZEhlYWRlci5jcml0Lmxlbmd0aCA9PT0gMCB8fFxuICAgICAgICBwcm90ZWN0ZWRIZWFkZXIuY3JpdC5zb21lKChpbnB1dCkgPT4gdHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJyB8fCBpbnB1dC5sZW5ndGggPT09IDApKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnIoJ1wiY3JpdFwiIChDcml0aWNhbCkgSGVhZGVyIFBhcmFtZXRlciBNVVNUIGJlIGFuIGFycmF5IG9mIG5vbi1lbXB0eSBzdHJpbmdzIHdoZW4gcHJlc2VudCcpO1xuICAgIH1cbiAgICBsZXQgcmVjb2duaXplZDtcbiAgICBpZiAocmVjb2duaXplZE9wdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlY29nbml6ZWQgPSBuZXcgTWFwKFsuLi5PYmplY3QuZW50cmllcyhyZWNvZ25pemVkT3B0aW9uKSwgLi4ucmVjb2duaXplZERlZmF1bHQuZW50cmllcygpXSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZWNvZ25pemVkID0gcmVjb2duaXplZERlZmF1bHQ7XG4gICAgfVxuICAgIGZvciAoY29uc3QgcGFyYW1ldGVyIG9mIHByb3RlY3RlZEhlYWRlci5jcml0KSB7XG4gICAgICAgIGlmICghcmVjb2duaXplZC5oYXMocGFyYW1ldGVyKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEpPU0VOb3RTdXBwb3J0ZWQoYEV4dGVuc2lvbiBIZWFkZXIgUGFyYW1ldGVyIFwiJHtwYXJhbWV0ZXJ9XCIgaXMgbm90IHJlY29nbml6ZWRgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoam9zZUhlYWRlcltwYXJhbWV0ZXJdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnIoYEV4dGVuc2lvbiBIZWFkZXIgUGFyYW1ldGVyIFwiJHtwYXJhbWV0ZXJ9XCIgaXMgbWlzc2luZ2ApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZWNvZ25pemVkLmdldChwYXJhbWV0ZXIpICYmIHByb3RlY3RlZEhlYWRlcltwYXJhbWV0ZXJdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnIoYEV4dGVuc2lvbiBIZWFkZXIgUGFyYW1ldGVyIFwiJHtwYXJhbWV0ZXJ9XCIgTVVTVCBiZSBpbnRlZ3JpdHkgcHJvdGVjdGVkYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBTZXQocHJvdGVjdGVkSGVhZGVyLmNyaXQpO1xufVxuZXhwb3J0IGRlZmF1bHQgdmFsaWRhdGVDcml0O1xuIiwiY29uc3QgdmFsaWRhdGVBbGdvcml0aG1zID0gKG9wdGlvbiwgYWxnb3JpdGhtcykgPT4ge1xuICAgIGlmIChhbGdvcml0aG1zICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgKCFBcnJheS5pc0FycmF5KGFsZ29yaXRobXMpIHx8IGFsZ29yaXRobXMuc29tZSgocykgPT4gdHlwZW9mIHMgIT09ICdzdHJpbmcnKSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgXCIke29wdGlvbn1cIiBvcHRpb24gbXVzdCBiZSBhbiBhcnJheSBvZiBzdHJpbmdzYCk7XG4gICAgfVxuICAgIGlmICghYWxnb3JpdGhtcykge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFNldChhbGdvcml0aG1zKTtcbn07XG5leHBvcnQgZGVmYXVsdCB2YWxpZGF0ZUFsZ29yaXRobXM7XG4iLCJleHBvcnQgZGVmYXVsdCAoZGF0ZSkgPT4gTWF0aC5mbG9vcihkYXRlLmdldFRpbWUoKSAvIDEwMDApO1xuIiwiY29uc3QgbWludXRlID0gNjA7XG5jb25zdCBob3VyID0gbWludXRlICogNjA7XG5jb25zdCBkYXkgPSBob3VyICogMjQ7XG5jb25zdCB3ZWVrID0gZGF5ICogNztcbmNvbnN0IHllYXIgPSBkYXkgKiAzNjUuMjU7XG5jb25zdCBSRUdFWCA9IC9eKFxcK3xcXC0pPyA/KFxcZCt8XFxkK1xcLlxcZCspID8oc2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx3ZWVrcz98d3x5ZWFycz98eXJzP3x5KSg/OiAoYWdvfGZyb20gbm93KSk/JC9pO1xuZXhwb3J0IGRlZmF1bHQgKHN0cikgPT4ge1xuICAgIGNvbnN0IG1hdGNoZWQgPSBSRUdFWC5leGVjKHN0cik7XG4gICAgaWYgKCFtYXRjaGVkIHx8IChtYXRjaGVkWzRdICYmIG1hdGNoZWRbMV0pKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgdGltZSBwZXJpb2QgZm9ybWF0Jyk7XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlID0gcGFyc2VGbG9hdChtYXRjaGVkWzJdKTtcbiAgICBjb25zdCB1bml0ID0gbWF0Y2hlZFszXS50b0xvd2VyQ2FzZSgpO1xuICAgIGxldCBudW1lcmljRGF0ZTtcbiAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgICAgY2FzZSAnc2VjJzpcbiAgICAgICAgY2FzZSAnc2Vjcyc6XG4gICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgIG51bWVyaWNEYXRlID0gTWF0aC5yb3VuZCh2YWx1ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgY2FzZSAnbWludXRlcyc6XG4gICAgICAgIGNhc2UgJ21pbic6XG4gICAgICAgIGNhc2UgJ21pbnMnOlxuICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgIG51bWVyaWNEYXRlID0gTWF0aC5yb3VuZCh2YWx1ZSAqIG1pbnV0ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgIGNhc2UgJ2hvdXJzJzpcbiAgICAgICAgY2FzZSAnaHInOlxuICAgICAgICBjYXNlICdocnMnOlxuICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgIG51bWVyaWNEYXRlID0gTWF0aC5yb3VuZCh2YWx1ZSAqIGhvdXIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgIGNhc2UgJ2RheXMnOlxuICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgIG51bWVyaWNEYXRlID0gTWF0aC5yb3VuZCh2YWx1ZSAqIGRheSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgIGNhc2UgJ3dlZWtzJzpcbiAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICBudW1lcmljRGF0ZSA9IE1hdGgucm91bmQodmFsdWUgKiB3ZWVrKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgbnVtZXJpY0RhdGUgPSBNYXRoLnJvdW5kKHZhbHVlICogeWVhcik7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKG1hdGNoZWRbMV0gPT09ICctJyB8fCBtYXRjaGVkWzRdID09PSAnYWdvJykge1xuICAgICAgICByZXR1cm4gLW51bWVyaWNEYXRlO1xuICAgIH1cbiAgICByZXR1cm4gbnVtZXJpY0RhdGU7XG59O1xuIiwiaW1wb3J0IHsgSldUQ2xhaW1WYWxpZGF0aW9uRmFpbGVkLCBKV1RFeHBpcmVkLCBKV1RJbnZhbGlkIH0gZnJvbSAnLi4vdXRpbC9lcnJvcnMuanMnO1xuaW1wb3J0IHsgZGVjb2RlciB9IGZyb20gJy4vYnVmZmVyX3V0aWxzLmpzJztcbmltcG9ydCBlcG9jaCBmcm9tICcuL2Vwb2NoLmpzJztcbmltcG9ydCBzZWNzIGZyb20gJy4vc2Vjcy5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc19vYmplY3QuanMnO1xuY29uc3Qgbm9ybWFsaXplVHlwID0gKHZhbHVlKSA9PiB2YWx1ZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL15hcHBsaWNhdGlvblxcLy8sICcnKTtcbmNvbnN0IGNoZWNrQXVkaWVuY2VQcmVzZW5jZSA9IChhdWRQYXlsb2FkLCBhdWRPcHRpb24pID0+IHtcbiAgICBpZiAodHlwZW9mIGF1ZFBheWxvYWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBhdWRPcHRpb24uaW5jbHVkZXMoYXVkUGF5bG9hZCk7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGF1ZFBheWxvYWQpKSB7XG4gICAgICAgIHJldHVybiBhdWRPcHRpb24uc29tZShTZXQucHJvdG90eXBlLmhhcy5iaW5kKG5ldyBTZXQoYXVkUGF5bG9hZCkpKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbmV4cG9ydCBkZWZhdWx0IChwcm90ZWN0ZWRIZWFkZXIsIGVuY29kZWRQYXlsb2FkLCBvcHRpb25zID0ge30pID0+IHtcbiAgICBsZXQgcGF5bG9hZDtcbiAgICB0cnkge1xuICAgICAgICBwYXlsb2FkID0gSlNPTi5wYXJzZShkZWNvZGVyLmRlY29kZShlbmNvZGVkUGF5bG9hZCkpO1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgfVxuICAgIGlmICghaXNPYmplY3QocGF5bG9hZCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpXVEludmFsaWQoJ0pXVCBDbGFpbXMgU2V0IG11c3QgYmUgYSB0b3AtbGV2ZWwgSlNPTiBvYmplY3QnKTtcbiAgICB9XG4gICAgY29uc3QgeyB0eXAgfSA9IG9wdGlvbnM7XG4gICAgaWYgKHR5cCAmJlxuICAgICAgICAodHlwZW9mIHByb3RlY3RlZEhlYWRlci50eXAgIT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICBub3JtYWxpemVUeXAocHJvdGVjdGVkSGVhZGVyLnR5cCkgIT09IG5vcm1hbGl6ZVR5cCh0eXApKSkge1xuICAgICAgICB0aHJvdyBuZXcgSldUQ2xhaW1WYWxpZGF0aW9uRmFpbGVkKCd1bmV4cGVjdGVkIFwidHlwXCIgSldUIGhlYWRlciB2YWx1ZScsIHBheWxvYWQsICd0eXAnLCAnY2hlY2tfZmFpbGVkJyk7XG4gICAgfVxuICAgIGNvbnN0IHsgcmVxdWlyZWRDbGFpbXMgPSBbXSwgaXNzdWVyLCBzdWJqZWN0LCBhdWRpZW5jZSwgbWF4VG9rZW5BZ2UgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgcHJlc2VuY2VDaGVjayA9IFsuLi5yZXF1aXJlZENsYWltc107XG4gICAgaWYgKG1heFRva2VuQWdlICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHByZXNlbmNlQ2hlY2sucHVzaCgnaWF0Jyk7XG4gICAgaWYgKGF1ZGllbmNlICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHByZXNlbmNlQ2hlY2sucHVzaCgnYXVkJyk7XG4gICAgaWYgKHN1YmplY3QgIT09IHVuZGVmaW5lZClcbiAgICAgICAgcHJlc2VuY2VDaGVjay5wdXNoKCdzdWInKTtcbiAgICBpZiAoaXNzdWVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHByZXNlbmNlQ2hlY2sucHVzaCgnaXNzJyk7XG4gICAgZm9yIChjb25zdCBjbGFpbSBvZiBuZXcgU2V0KHByZXNlbmNlQ2hlY2sucmV2ZXJzZSgpKSkge1xuICAgICAgICBpZiAoIShjbGFpbSBpbiBwYXlsb2FkKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEpXVENsYWltVmFsaWRhdGlvbkZhaWxlZChgbWlzc2luZyByZXF1aXJlZCBcIiR7Y2xhaW19XCIgY2xhaW1gLCBwYXlsb2FkLCBjbGFpbSwgJ21pc3NpbmcnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNzdWVyICYmXG4gICAgICAgICEoQXJyYXkuaXNBcnJheShpc3N1ZXIpID8gaXNzdWVyIDogW2lzc3Vlcl0pLmluY2x1ZGVzKHBheWxvYWQuaXNzKSkge1xuICAgICAgICB0aHJvdyBuZXcgSldUQ2xhaW1WYWxpZGF0aW9uRmFpbGVkKCd1bmV4cGVjdGVkIFwiaXNzXCIgY2xhaW0gdmFsdWUnLCBwYXlsb2FkLCAnaXNzJywgJ2NoZWNrX2ZhaWxlZCcpO1xuICAgIH1cbiAgICBpZiAoc3ViamVjdCAmJiBwYXlsb2FkLnN1YiAhPT0gc3ViamVjdCkge1xuICAgICAgICB0aHJvdyBuZXcgSldUQ2xhaW1WYWxpZGF0aW9uRmFpbGVkKCd1bmV4cGVjdGVkIFwic3ViXCIgY2xhaW0gdmFsdWUnLCBwYXlsb2FkLCAnc3ViJywgJ2NoZWNrX2ZhaWxlZCcpO1xuICAgIH1cbiAgICBpZiAoYXVkaWVuY2UgJiZcbiAgICAgICAgIWNoZWNrQXVkaWVuY2VQcmVzZW5jZShwYXlsb2FkLmF1ZCwgdHlwZW9mIGF1ZGllbmNlID09PSAnc3RyaW5nJyA/IFthdWRpZW5jZV0gOiBhdWRpZW5jZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpXVENsYWltVmFsaWRhdGlvbkZhaWxlZCgndW5leHBlY3RlZCBcImF1ZFwiIGNsYWltIHZhbHVlJywgcGF5bG9hZCwgJ2F1ZCcsICdjaGVja19mYWlsZWQnKTtcbiAgICB9XG4gICAgbGV0IHRvbGVyYW5jZTtcbiAgICBzd2l0Y2ggKHR5cGVvZiBvcHRpb25zLmNsb2NrVG9sZXJhbmNlKSB7XG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICB0b2xlcmFuY2UgPSBzZWNzKG9wdGlvbnMuY2xvY2tUb2xlcmFuY2UpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgICAgICB0b2xlcmFuY2UgPSBvcHRpb25zLmNsb2NrVG9sZXJhbmNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgICAgICB0b2xlcmFuY2UgPSAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNsb2NrVG9sZXJhbmNlIG9wdGlvbiB0eXBlJyk7XG4gICAgfVxuICAgIGNvbnN0IHsgY3VycmVudERhdGUgfSA9IG9wdGlvbnM7XG4gICAgY29uc3Qgbm93ID0gZXBvY2goY3VycmVudERhdGUgfHwgbmV3IERhdGUoKSk7XG4gICAgaWYgKChwYXlsb2FkLmlhdCAhPT0gdW5kZWZpbmVkIHx8IG1heFRva2VuQWdlKSAmJiB0eXBlb2YgcGF5bG9hZC5pYXQgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHRocm93IG5ldyBKV1RDbGFpbVZhbGlkYXRpb25GYWlsZWQoJ1wiaWF0XCIgY2xhaW0gbXVzdCBiZSBhIG51bWJlcicsIHBheWxvYWQsICdpYXQnLCAnaW52YWxpZCcpO1xuICAgIH1cbiAgICBpZiAocGF5bG9hZC5uYmYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodHlwZW9mIHBheWxvYWQubmJmICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEpXVENsYWltVmFsaWRhdGlvbkZhaWxlZCgnXCJuYmZcIiBjbGFpbSBtdXN0IGJlIGEgbnVtYmVyJywgcGF5bG9hZCwgJ25iZicsICdpbnZhbGlkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBheWxvYWQubmJmID4gbm93ICsgdG9sZXJhbmNlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSldUQ2xhaW1WYWxpZGF0aW9uRmFpbGVkKCdcIm5iZlwiIGNsYWltIHRpbWVzdGFtcCBjaGVjayBmYWlsZWQnLCBwYXlsb2FkLCAnbmJmJywgJ2NoZWNrX2ZhaWxlZCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChwYXlsb2FkLmV4cCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGF5bG9hZC5leHAgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSldUQ2xhaW1WYWxpZGF0aW9uRmFpbGVkKCdcImV4cFwiIGNsYWltIG11c3QgYmUgYSBudW1iZXInLCBwYXlsb2FkLCAnZXhwJywgJ2ludmFsaWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF5bG9hZC5leHAgPD0gbm93IC0gdG9sZXJhbmNlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSldURXhwaXJlZCgnXCJleHBcIiBjbGFpbSB0aW1lc3RhbXAgY2hlY2sgZmFpbGVkJywgcGF5bG9hZCwgJ2V4cCcsICdjaGVja19mYWlsZWQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAobWF4VG9rZW5BZ2UpIHtcbiAgICAgICAgY29uc3QgYWdlID0gbm93IC0gcGF5bG9hZC5pYXQ7XG4gICAgICAgIGNvbnN0IG1heCA9IHR5cGVvZiBtYXhUb2tlbkFnZSA9PT0gJ251bWJlcicgPyBtYXhUb2tlbkFnZSA6IHNlY3MobWF4VG9rZW5BZ2UpO1xuICAgICAgICBpZiAoYWdlIC0gdG9sZXJhbmNlID4gbWF4KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSldURXhwaXJlZCgnXCJpYXRcIiBjbGFpbSB0aW1lc3RhbXAgY2hlY2sgZmFpbGVkICh0b28gZmFyIGluIHRoZSBwYXN0KScsIHBheWxvYWQsICdpYXQnLCAnY2hlY2tfZmFpbGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFnZSA8IDAgLSB0b2xlcmFuY2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBKV1RDbGFpbVZhbGlkYXRpb25GYWlsZWQoJ1wiaWF0XCIgY2xhaW0gdGltZXN0YW1wIGNoZWNrIGZhaWxlZCAoaXQgc2hvdWxkIGJlIGluIHRoZSBwYXN0KScsIHBheWxvYWQsICdpYXQnLCAnY2hlY2tfZmFpbGVkJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBheWxvYWQ7XG59O1xuIiwiaW1wb3J0IHsgY29tcGFjdFZlcmlmeSB9IGZyb20gJy4uL2p3cy9jb21wYWN0L3ZlcmlmeS5qcyc7XG5pbXBvcnQgand0UGF5bG9hZCBmcm9tICcuLi9saWIvand0X2NsYWltc19zZXQuanMnO1xuaW1wb3J0IHsgSldUSW52YWxpZCB9IGZyb20gJy4uL3V0aWwvZXJyb3JzLmpzJztcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBqd3RWZXJpZnkoand0LCBrZXksIG9wdGlvbnMpIHtcbiAgICBjb25zdCB2ZXJpZmllZCA9IGF3YWl0IGNvbXBhY3RWZXJpZnkoand0LCBrZXksIG9wdGlvbnMpO1xuICAgIGlmICh2ZXJpZmllZC5wcm90ZWN0ZWRIZWFkZXIuY3JpdD8uaW5jbHVkZXMoJ2I2NCcpICYmIHZlcmlmaWVkLnByb3RlY3RlZEhlYWRlci5iNjQgPT09IGZhbHNlKSB7XG4gICAgICAgIHRocm93IG5ldyBKV1RJbnZhbGlkKCdKV1RzIE1VU1QgTk9UIHVzZSB1bmVuY29kZWQgcGF5bG9hZCcpO1xuICAgIH1cbiAgICBjb25zdCBwYXlsb2FkID0gand0UGF5bG9hZCh2ZXJpZmllZC5wcm90ZWN0ZWRIZWFkZXIsIHZlcmlmaWVkLnBheWxvYWQsIG9wdGlvbnMpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHsgcGF5bG9hZCwgcHJvdGVjdGVkSGVhZGVyOiB2ZXJpZmllZC5wcm90ZWN0ZWRIZWFkZXIgfTtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4geyAuLi5yZXN1bHQsIGtleTogdmVyaWZpZWQua2V5IH07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBcImFjPmNvbSxlZHUsZ292LG5ldCxtaWwsb3JnPGFkPm5vbTxhZT5jbyxuZXQsb3JnLHNjaCxhYyxnb3YsbWlsPGFlcm8+YWlybGluZSxhaXJwb3J0LGFjY2lkZW50LWludmVzdGlnYXRpb24sYWNjaWRlbnQtcHJldmVudGlvbixhZXJvYmF0aWMsYWVyb2NsdWIsYWVyb2Ryb21lLGFnZW50cyxhaXItc3VydmVpbGxhbmNlLGFpci10cmFmZmljLWNvbnRyb2wsYWlyY3JhZnQsYWlydHJhZmZpYyxhbWJ1bGFuY2UsYXNzb2NpYXRpb24sYXV0aG9yLGJhbGxvb25pbmcsYnJva2VyLGNhYSxjYXJnbyxjYXRlcmluZyxjZXJ0aWZpY2F0aW9uLGNoYW1waW9uc2hpcCxjaGFydGVyLGNpdmlsYXZpYXRpb24sY2x1Yixjb25mZXJlbmNlLGNvbnN1bHRhbnQsY29uc3VsdGluZyxjb250cm9sLGNvdW5jaWwsY3JldyxkZXNpZ24sZGdjYSxlZHVjYXRvcixlbWVyZ2VuY3ksZW5naW5lLGVuZ2luZWVyLGVudGVydGFpbm1lbnQsZXF1aXBtZW50LGV4Y2hhbmdlLGV4cHJlc3MsZmVkZXJhdGlvbixmbGlnaHQsZnJlaWdodCxmdWVsLGdsaWRpbmcsZ292ZXJubWVudCxncm91bmRoYW5kbGluZyxncm91cCxoYW5nZ2xpZGluZyxob21lYnVpbHQsaW5zdXJhbmNlLGpvdXJuYWwsam91cm5hbGlzdCxsZWFzaW5nLGxvZ2lzdGljcyxtYWdhemluZSxtYWludGVuYW5jZSxtYXJrZXRwbGFjZSxtZWRpYSxtaWNyb2xpZ2h0LG1vZGVsbGluZyxuYXZpZ2F0aW9uLHBhcmFjaHV0aW5nLHBhcmFnbGlkaW5nLHBhc3Nlbmdlci1hc3NvY2lhdGlvbixwaWxvdCxwcmVzcyxwcm9kdWN0aW9uLHJlY3JlYXRpb24scmVwYm9keSxyZXMscmVzZWFyY2gscm90b3JjcmFmdCxzYWZldHksc2NpZW50aXN0LHNlcnZpY2VzLHNob3csc2t5ZGl2aW5nLHNvZnR3YXJlLHN0dWRlbnQsdGF4aSx0cmFkZXIsdHJhZGluZyx0cmFpbmVyLHVuaW9uLHdvcmtpbmdncm91cCx3b3JrczxhZj5nb3YsY29tLG9yZyxuZXQsZWR1PGFnPmNvbSxvcmcsbmV0LGNvLG5vbTxhaT5vZmYsY29tLG5ldCxvcmc8YWw+Y29tLGVkdSxnb3YsbWlsLG5ldCxvcmc8YW0+Y28sY29tLGNvbW11bmUsbmV0LG9yZzxhbz5lZCxndixvZyxjbyxwYixpdDxhcSxhcj5iZXQsY29tLGNvb3AsZWR1LGdvYixnb3YsaW50LG1pbCxtdXNpY2EsbXV0dWFsLG5ldCxvcmcsc2VuYXNhLHR1cjxhcnBhPmUxNjQsaW4tYWRkcixpcDYsaXJpcyx1cmksdXJuPGFzPmdvdjxhc2lhLGF0PmFjPnN0aDxjbyxndixvcjxhdT5jb20sbmV0LG9yZyxlZHU+YWN0LGNhdGhvbGljLG5zdz5zY2hvb2xzPG50LHFsZCxzYSx0YXMsdmljLHdhPGdvdj5xbGQsc2EsdGFzLHZpYyx3YTxhc24saWQsaW5mbyxjb25mLG96LGFjdCxuc3csbnQscWxkLHNhLHRhcyx2aWMsd2E8YXc+Y29tPGF4LGF6PmNvbSxuZXQsaW50LGdvdixvcmcsZWR1LGluZm8scHAsbWlsLG5hbWUscHJvLGJpejxiYT5jb20sZWR1LGdvdixtaWwsbmV0LG9yZzxiYj5iaXosY28sY29tLGVkdSxnb3YsaW5mbyxuZXQsb3JnLHN0b3JlLHR2PGJkPio8YmU+YWM8YmY+Z292PGJnPmEsYixjLGQsZSxmLGcsaCxpLGosayxsLG0sbixvLHAscSxyLHMsdCx1LHYsdyx4LHkseiwwLDEsMiwzLDQsNSw2LDcsOCw5PGJoPmNvbSxlZHUsbmV0LG9yZyxnb3Y8Ymk+Y28sY29tLGVkdSxvcixvcmc8Yml6LGJqPmFmcmljYSxhZ3JvLGFyY2hpdGVjdGVzLGFzc3VyLGF2b2NhdHMsY28sY29tLGVjbyxlY29ubyxlZHUsaW5mbyxsb2lzaXJzLG1vbmV5LG5ldCxvcmcsb3RlLHJlc3RvLHJlc3RhdXJhbnQsdG91cmlzbSx1bml2PGJtPmNvbSxlZHUsZ292LG5ldCxvcmc8Ym4+Y29tLGVkdSxnb3YsbmV0LG9yZzxibz5jb20sZWR1LGdvYixpbnQsb3JnLG5ldCxtaWwsdHYsd2ViLGFjYWRlbWlhLGFncm8sYXJ0ZSxibG9nLGJvbGl2aWEsY2llbmNpYSxjb29wZXJhdGl2YSxkZW1vY3JhY2lhLGRlcG9ydGUsZWNvbG9naWEsZWNvbm9taWEsZW1wcmVzYSxpbmRpZ2VuYSxpbmR1c3RyaWEsaW5mbyxtZWRpY2luYSxtb3ZpbWllbnRvLG11c2ljYSxuYXR1cmFsLG5vbWJyZSxub3RpY2lhcyxwYXRyaWEscG9saXRpY2EscHJvZmVzaW9uYWwscGx1cmluYWNpb25hbCxwdWVibG8scmV2aXN0YSxzYWx1ZCx0ZWNub2xvZ2lhLHRrc2F0LHRyYW5zcG9ydGUsd2lraTxicj45Z3VhY3UsYWJjLGFkbSxhZHYsYWdyLGFqdSxhbSxhbmFuaSxhcGFyZWNpZGEsYXBwLGFycSxhcnQsYXRvLGIsYmFydWVyaSxiZWxlbSxiaHosYmliLGJpbyxibG9nLGJtZCxib2F2aXN0YSxic2IsY2FtcGluYWdyYW5kZSxjYW1waW5hcyxjYXhpYXMsY2ltLGNuZyxjbnQsY29tLGNvbnRhZ2VtLGNvb3AsY296LGNyaSxjdWlhYmEsY3VyaXRpYmEsZGVmLGRlcyxkZXQsZGV2LGVjbixlY28sZWR1LGVtcCxlbmYsZW5nLGVzcCxldGMsZXRpLGZhcixmZWlyYSxmbG9nLGZsb3JpcGEsZm0sZm5kLGZvcnRhbCxmb3QsZm96LGZzdCxnMTIsZ2VvLGdnZixnb2lhbmlhLGdvdj5hYyxhbCxhbSxhcCxiYSxjZSxkZixlcyxnbyxtYSxtZyxtcyxtdCxwYSxwYixwZSxwaSxwcixyaixybixybyxycixycyxzYyxzZSxzcCx0bzxncnUsaW1iLGluZCxpbmYsamFiLGphbXBhLGpkZixqb2ludmlsbGUsam9yLGp1cyxsZWcsbGVsLGxvZyxsb25kcmluYSxtYWNhcGEsbWFjZWlvLG1hbmF1cyxtYXJpbmdhLG1hdCxtZWQsbWlsLG1vcmVuYSxtcCxtdXMsbmF0YWwsbmV0LG5pdGVyb2ksbm9tPio8bm90LG50cixvZG8sb25nLG9yZyxvc2FzY28scGFsbWFzLHBvYSxwcGcscHJvLHBzYyxwc2kscHZoLHFzbCxyYWRpbyxyZWMscmVjaWZlLHJlcCxyaWJlaXJhbyxyaW8scmlvYnJhbmNvLHJpb3ByZXRvLHNhbHZhZG9yLHNhbXBhLHNhbnRhbWFyaWEsc2FudG9hbmRyZSxzYW9iZXJuYXJkbyxzYW9nb25jYSxzZWcsc2pjLHNsZyxzbHosc29yb2NhYmEsc3J2LHRheGksdGMsdGVjLHRlbyx0aGUsdG1wLHRyZCx0dXIsdHYsdWRpLHZldCx2aXgsdmxvZyx3aWtpLHpsZzxicz5jb20sbmV0LG9yZyxlZHUsZ292PGJ0PmNvbSxlZHUsZ292LG5ldCxvcmc8YnYsYnc+Y28sb3JnPGJ5PmdvdixtaWwsY29tLG9mPGJ6PmNvbSxuZXQsb3JnLGVkdSxnb3Y8Y2E+YWIsYmMsbWIsbmIsbmYsbmwsbnMsbnQsbnUsb24scGUscWMsc2sseWssZ2M8Y2F0LGNjLGNkPmdvdjxjZixjZyxjaCxjaT5vcmcsb3IsY29tLGNvLGVkdSxlZCxhYyxuZXQsZ28sYXNzbyx4bi0tYXJvcG9ydC1ieWEsaW50LHByZXNzZSxtZCxnb3V2PGNrPiosIXd3dzxjbD5jbyxnb2IsZ292LG1pbDxjbT5jbyxjb20sZ292LG5ldDxjbj5hYyxjb20sZWR1LGdvdixuZXQsb3JnLG1pbCx4bi0tNTVxeDVkLHhuLS1pbzBhN2kseG4tLW9kMGFsZyxhaCxiaixjcSxmaixnZCxncyxneixneCxoYSxoYixoZSxoaSxobCxobixqbCxqcyxqeCxsbixubSxueCxxaCxzYyxzZCxzaCxzbixzeCx0aix4aix4eix5bix6aixoayxtbyx0dzxjbz5hcnRzLGNvbSxlZHUsZmlybSxnb3YsaW5mbyxpbnQsbWlsLG5ldCxub20sb3JnLHJlYyx3ZWI8Y29tLGNvb3AsY3I+YWMsY28sZWQsZmksZ28sb3Isc2E8Y3U+Y29tLGVkdSxvcmcsbmV0LGdvdixpbmY8Y3Y+Y29tLGVkdSxpbnQsbm9tZSxvcmc8Y3c+Y29tLGVkdSxuZXQsb3JnPGN4PmdvdjxjeT5hYyxiaXosY29tLGVrbG9nZXMsZ292LGx0ZCxtaWwsbmV0LG9yZyxwcmVzcyxwcm8sdG08Y3osZGUsZGosZGssZG0+Y29tLG5ldCxvcmcsZWR1LGdvdjxkbz5hcnQsY29tLGVkdSxnb2IsZ292LG1pbCxuZXQsb3JnLHNsZCx3ZWI8ZHo+YXJ0LGFzc28sY29tLGVkdSxnb3Ysb3JnLG5ldCxwb2wsc29jLHRtPGVjPmNvbSxpbmZvLG5ldCxmaW4sazEyLG1lZCxwcm8sb3JnLGVkdSxnb3YsZ29iLG1pbDxlZHUsZWU+ZWR1LGdvdixyaWlrLGxpYixtZWQsY29tLHByaSxhaXAsb3JnLGZpZTxlZz5jb20sZWR1LGV1bixnb3YsbWlsLG5hbWUsbmV0LG9yZyxzY2k8ZXI+Kjxlcz5jb20sbm9tLG9yZyxnb2IsZWR1PGV0PmNvbSxnb3Ysb3JnLGVkdSxiaXosbmFtZSxpbmZvLG5ldDxldSxmaT5hbGFuZDxmaj5hYyxiaXosY29tLGdvdixpbmZvLG1pbCxuYW1lLG5ldCxvcmcscHJvPGZrPio8Zm0+Y29tLGVkdSxuZXQsb3JnPGZvLGZyPmFzc28sY29tLGdvdXYsbm9tLHByZCx0bSxhdm91ZXMsY2NpLGdyZXRhLGh1aXNzaWVyLWp1c3RpY2U8Z2EsZ2IsZ2Q+ZWR1LGdvdjxnZT5jb20sZWR1LGdvdixvcmcsbWlsLG5ldCxwdnQ8Z2YsZ2c+Y28sbmV0LG9yZzxnaD5jb20sZWR1LGdvdixvcmcsbWlsPGdpPmNvbSxsdGQsZ292LG1vZCxlZHUsb3JnPGdsPmNvLGNvbSxlZHUsbmV0LG9yZzxnbSxnbj5hYyxjb20sZWR1LGdvdixvcmcsbmV0PGdvdixncD5jb20sbmV0LG1vYmksZWR1LG9yZyxhc3NvPGdxLGdyPmNvbSxlZHUsbmV0LG9yZyxnb3Y8Z3MsZ3Q+Y29tLGVkdSxnb2IsaW5kLG1pbCxuZXQsb3JnPGd1PmNvbSxlZHUsZ292LGd1YW0saW5mbyxuZXQsb3JnLHdlYjxndyxneT5jbyxjb20sZWR1LGdvdixuZXQsb3JnPGhrPmNvbSxlZHUsZ292LGlkdixuZXQsb3JnLHhuLS01NXF4NWQseG4tLXdjdnMyMmQseG4tLWxjdnIzMmQseG4tLW14dHExbSx4bi0tZ21xdzVhLHhuLS1jaXFwbix4bi0tZ21xMDUwaSx4bi0temYwYXZ4LHhuLS1pbzBhN2kseG4tLW1rMGF4aSx4bi0tb2QwYWxnLHhuLS1vZDBhcTNiLHhuLS10bjBhZyx4bi0tdWMwYXR2LHhuLS11YzBheTRhPGhtLGhuPmNvbSxlZHUsb3JnLG5ldCxtaWwsZ29iPGhyPml6LGZyb20sbmFtZSxjb208aHQ+Y29tLHNob3AsZmlybSxpbmZvLGFkdWx0LG5ldCxwcm8sb3JnLG1lZCxhcnQsY29vcCxwb2wsYXNzbyxlZHUscmVsLGdvdXYscGVyc288aHU+Y28saW5mbyxvcmcscHJpdixzcG9ydCx0bSwyMDAwLGFncmFyLGJvbHQsY2FzaW5vLGNpdHksZXJvdGljYSxlcm90aWthLGZpbG0sZm9ydW0sZ2FtZXMsaG90ZWwsaW5nYXRsYW4sam9nYXN6LGtvbnl2ZWxvLGxha2FzLG1lZGlhLG5ld3MscmVrbGFtLHNleCxzaG9wLHN1bGksc3pleCx0b3pzZGUsdXRhemFzLHZpZGVvPGlkPmFjLGJpeixjbyxkZXNhLGdvLG1pbCxteSxuZXQsb3IscG9ucGVzLHNjaCx3ZWI8aWU+Z292PGlsPmFjLGNvLGdvdixpZGYsazEyLG11bmksbmV0LG9yZzx4bi0tNGRicmswY2U+eG4tLTRkYmdkdHk2Yyx4bi0tNWRiaGw4ZCx4bi0tOGRicTJhLHhuLS1oZWJkYThiPGltPmFjLGNvPmx0ZCxwbGM8Y29tLG5ldCxvcmcsdHQsdHY8aW4+NWcsNmcsYWMsYWksYW0sYmloYXIsYml6LGJ1c2luZXNzLGNhLGNuLGNvLGNvbSxjb29wLGNzLGRlbGhpLGRyLGVkdSxlcixmaXJtLGdlbixnb3YsZ3VqYXJhdCxpbmQsaW5mbyxpbnQsaW50ZXJuZXQsaW8sbWUsbWlsLG5ldCxuaWMsb3JnLHBnLHBvc3QscHJvLHJlcyx0cmF2ZWwsdHYsdWssdXAsdXM8aW5mbyxpbnQ+ZXU8aW8+Y29tPGlxPmdvdixlZHUsbWlsLGNvbSxvcmcsbmV0PGlyPmFjLGNvLGdvdixpZCxuZXQsb3JnLHNjaCx4bi0tbWdiYTNhNGYxNmEseG4tLW1nYmEzYTRmcmE8aXM+bmV0LGNvbSxlZHUsZ292LG9yZyxpbnQ8aXQ+Z292LGVkdSxhYnIsYWJydXp6byxhb3N0YS12YWxsZXksYW9zdGF2YWxsZXksYmFzLGJhc2lsaWNhdGEsY2FsLGNhbGFicmlhLGNhbSxjYW1wYW5pYSxlbWlsaWEtcm9tYWduYSxlbWlsaWFyb21hZ25hLGVtcixmcml1bGktdi1naXVsaWEsZnJpdWxpLXZlLWdpdWxpYSxmcml1bGktdmVnaXVsaWEsZnJpdWxpLXZlbmV6aWEtZ2l1bGlhLGZyaXVsaS12ZW5lemlhZ2l1bGlhLGZyaXVsaS12Z2l1bGlhLGZyaXVsaXYtZ2l1bGlhLGZyaXVsaXZlLWdpdWxpYSxmcml1bGl2ZWdpdWxpYSxmcml1bGl2ZW5lemlhLWdpdWxpYSxmcml1bGl2ZW5lemlhZ2l1bGlhLGZyaXVsaXZnaXVsaWEsZnZnLGxheixsYXppbyxsaWcsbGlndXJpYSxsb20sbG9tYmFyZGlhLGxvbWJhcmR5LGx1Y2FuaWEsbWFyLG1hcmNoZSxtb2wsbW9saXNlLHBpZWRtb250LHBpZW1vbnRlLHBtbixwdWcscHVnbGlhLHNhcixzYXJkZWduYSxzYXJkaW5pYSxzaWMsc2ljaWxpYSxzaWNpbHksdGFhLHRvcyx0b3NjYW5hLHRyZW50aW4tc3VkLXRpcm9sLHhuLS10cmVudGluLXNkLXRpcm9sLXJ6Yix0cmVudGluLXN1ZHRpcm9sLHhuLS10cmVudGluLXNkdGlyb2wtN3ZiLHRyZW50aW4tc3VlZC10aXJvbCx0cmVudGluLXN1ZWR0aXJvbCx0cmVudGluby1hLWFkaWdlLHRyZW50aW5vLWFhZGlnZSx0cmVudGluby1hbHRvLWFkaWdlLHRyZW50aW5vLWFsdG9hZGlnZSx0cmVudGluby1zLXRpcm9sLHRyZW50aW5vLXN0aXJvbCx0cmVudGluby1zdWQtdGlyb2wseG4tLXRyZW50aW5vLXNkLXRpcm9sLWMzYix0cmVudGluby1zdWR0aXJvbCx4bi0tdHJlbnRpbm8tc2R0aXJvbC1zemIsdHJlbnRpbm8tc3VlZC10aXJvbCx0cmVudGluby1zdWVkdGlyb2wsdHJlbnRpbm8sdHJlbnRpbm9hLWFkaWdlLHRyZW50aW5vYWFkaWdlLHRyZW50aW5vYWx0by1hZGlnZSx0cmVudGlub2FsdG9hZGlnZSx0cmVudGlub3MtdGlyb2wsdHJlbnRpbm9zdGlyb2wsdHJlbnRpbm9zdWQtdGlyb2wseG4tLXRyZW50aW5vc2QtdGlyb2wtcnpiLHRyZW50aW5vc3VkdGlyb2wseG4tLXRyZW50aW5vc2R0aXJvbC03dmIsdHJlbnRpbm9zdWVkLXRpcm9sLHRyZW50aW5vc3VlZHRpcm9sLHRyZW50aW5zdWQtdGlyb2wseG4tLXRyZW50aW5zZC10aXJvbC02dmIsdHJlbnRpbnN1ZHRpcm9sLHhuLS10cmVudGluc2R0aXJvbC1uc2IsdHJlbnRpbnN1ZWQtdGlyb2wsdHJlbnRpbnN1ZWR0aXJvbCx0dXNjYW55LHVtYix1bWJyaWEsdmFsLWQtYW9zdGEsdmFsLWRhb3N0YSx2YWxkLWFvc3RhLHZhbGRhb3N0YSx2YWxsZS1hb3N0YSx2YWxsZS1kLWFvc3RhLHZhbGxlLWRhb3N0YSx2YWxsZWFvc3RhLHZhbGxlZC1hb3N0YSx2YWxsZWRhb3N0YSx2YWxsZWUtYW9zdGUseG4tLXZhbGxlLWFvc3RlLWViYix2YWxsZWUtZC1hb3N0ZSx4bi0tdmFsbGUtZC1hb3N0ZS1laGIsdmFsbGVlYW9zdGUseG4tLXZhbGxlYW9zdGUtZTdhLHZhbGxlZWRhb3N0ZSx4bi0tdmFsbGVkYW9zdGUtZWJiLHZhbyx2ZGEsdmVuLHZlbmV0byxhZyxhZ3JpZ2VudG8sYWwsYWxlc3NhbmRyaWEsYWx0by1hZGlnZSxhbHRvYWRpZ2UsYW4sYW5jb25hLGFuZHJpYS1iYXJsZXR0YS10cmFuaSxhbmRyaWEtdHJhbmktYmFybGV0dGEsYW5kcmlhYmFybGV0dGF0cmFuaSxhbmRyaWF0cmFuaWJhcmxldHRhLGFvLGFvc3RhLGFvc3RlLGFwLGFxLGFxdWlsYSxhcixhcmV6em8sYXNjb2xpLXBpY2Vubyxhc2NvbGlwaWNlbm8sYXN0aSxhdCxhdixhdmVsbGlubyxiYSxiYWxzYW4tc3VkdGlyb2wseG4tLWJhbHNhbi1zZHRpcm9sLW5zYixiYWxzYW4tc3VlZHRpcm9sLGJhbHNhbixiYXJpLGJhcmxldHRhLXRyYW5pLWFuZHJpYSxiYXJsZXR0YXRyYW5pYW5kcmlhLGJlbGx1bm8sYmVuZXZlbnRvLGJlcmdhbW8sYmcsYmksYmllbGxhLGJsLGJuLGJvLGJvbG9nbmEsYm9semFuby1hbHRvYWRpZ2UsYm9semFubyxib3plbi1zdWR0aXJvbCx4bi0tYm96ZW4tc2R0aXJvbC0yb2IsYm96ZW4tc3VlZHRpcm9sLGJvemVuLGJyLGJyZXNjaWEsYnJpbmRpc2ksYnMsYnQsYnVsc2FuLXN1ZHRpcm9sLHhuLS1idWxzYW4tc2R0aXJvbC1uc2IsYnVsc2FuLXN1ZWR0aXJvbCxidWxzYW4sYnosY2EsY2FnbGlhcmksY2FsdGFuaXNzZXR0YSxjYW1waWRhbm8tbWVkaW8sY2FtcGlkYW5vbWVkaW8sY2FtcG9iYXNzbyxjYXJib25pYS1pZ2xlc2lhcyxjYXJib25pYWlnbGVzaWFzLGNhcnJhcmEtbWFzc2EsY2FycmFyYW1hc3NhLGNhc2VydGEsY2F0YW5pYSxjYXRhbnphcm8sY2IsY2UsY2VzZW5hLWZvcmxpLHhuLS1jZXNlbmEtZm9ybC1tY2IsY2VzZW5hZm9ybGkseG4tLWNlc2VuYWZvcmwtaThhLGNoLGNoaWV0aSxjaSxjbCxjbixjbyxjb21vLGNvc2VuemEsY3IsY3JlbW9uYSxjcm90b25lLGNzLGN0LGN1bmVvLGN6LGRlbGwtb2dsaWFzdHJhLGRlbGxvZ2xpYXN0cmEsZW4sZW5uYSxmYyxmZSxmZXJtbyxmZXJyYXJhLGZnLGZpLGZpcmVuemUsZmxvcmVuY2UsZm0sZm9nZ2lhLGZvcmxpLWNlc2VuYSx4bi0tZm9ybC1jZXNlbmEtZmNiLGZvcmxpY2VzZW5hLHhuLS1mb3JsY2VzZW5hLWM4YSxmcixmcm9zaW5vbmUsZ2UsZ2Vub2EsZ2Vub3ZhLGdvLGdvcml6aWEsZ3IsZ3Jvc3NldG8saWdsZXNpYXMtY2FyYm9uaWEsaWdsZXNpYXNjYXJib25pYSxpbSxpbXBlcmlhLGlzLGlzZXJuaWEsa3IsbGEtc3BlemlhLGxhcXVpbGEsbGFzcGV6aWEsbGF0aW5hLGxjLGxlLGxlY2NlLGxlY2NvLGxpLGxpdm9ybm8sbG8sbG9kaSxsdCxsdSxsdWNjYSxtYWNlcmF0YSxtYW50b3ZhLG1hc3NhLWNhcnJhcmEsbWFzc2FjYXJyYXJhLG1hdGVyYSxtYixtYyxtZSxtZWRpby1jYW1waWRhbm8sbWVkaW9jYW1waWRhbm8sbWVzc2luYSxtaSxtaWxhbixtaWxhbm8sbW4sbW8sbW9kZW5hLG1vbnphLWJyaWFuemEsbW9uemEtZS1kZWxsYS1icmlhbnphLG1vbnphLG1vbnphYnJpYW56YSxtb256YWVicmlhbnphLG1vbnphZWRlbGxhYnJpYW56YSxtcyxtdCxuYSxuYXBsZXMsbmFwb2xpLG5vLG5vdmFyYSxudSxudW9ybyxvZyxvZ2xpYXN0cmEsb2xiaWEtdGVtcGlvLG9sYmlhdGVtcGlvLG9yLG9yaXN0YW5vLG90LHBhLHBhZG92YSxwYWR1YSxwYWxlcm1vLHBhcm1hLHBhdmlhLHBjLHBkLHBlLHBlcnVnaWEscGVzYXJvLXVyYmlubyxwZXNhcm91cmJpbm8scGVzY2FyYSxwZyxwaSxwaWFjZW56YSxwaXNhLHBpc3RvaWEscG4scG8scG9yZGVub25lLHBvdGVuemEscHIscHJhdG8scHQscHUscHYscHoscmEscmFndXNhLHJhdmVubmEscmMscmUscmVnZ2lvLWNhbGFicmlhLHJlZ2dpby1lbWlsaWEscmVnZ2lvY2FsYWJyaWEscmVnZ2lvZW1pbGlhLHJnLHJpLHJpZXRpLHJpbWluaSxybSxybixybyxyb21hLHJvbWUscm92aWdvLHNhLHNhbGVybm8sc2Fzc2FyaSxzYXZvbmEsc2ksc2llbmEsc2lyYWN1c2Esc28sc29uZHJpbyxzcCxzcixzcyxzdWVkdGlyb2wseG4tLXNkdGlyb2wtbjJhLHN2LHRhLHRhcmFudG8sdGUsdGVtcGlvLW9sYmlhLHRlbXBpb29sYmlhLHRlcmFtbyx0ZXJuaSx0bix0byx0b3Jpbm8sdHAsdHIsdHJhbmktYW5kcmlhLWJhcmxldHRhLHRyYW5pLWJhcmxldHRhLWFuZHJpYSx0cmFuaWFuZHJpYWJhcmxldHRhLHRyYW5pYmFybGV0dGFhbmRyaWEsdHJhcGFuaSx0cmVudG8sdHJldmlzbyx0cmllc3RlLHRzLHR1cmluLHR2LHVkLHVkaW5lLHVyYmluby1wZXNhcm8sdXJiaW5vcGVzYXJvLHZhLHZhcmVzZSx2Yix2Yyx2ZSx2ZW5lemlhLHZlbmljZSx2ZXJiYW5pYSx2ZXJjZWxsaSx2ZXJvbmEsdmksdmliby12YWxlbnRpYSx2aWJvdmFsZW50aWEsdmljZW56YSx2aXRlcmJvLHZyLHZzLHZ0LHZ2PGplPmNvLG5ldCxvcmc8am0+Kjxqbz5jb20sb3JnLG5ldCxlZHUsc2NoLGdvdixtaWwsbmFtZTxqb2JzLGpwPmFjLGFkLGNvLGVkLGdvLGdyLGxnLG5lLG9yLGFpY2hpPmFpc2FpLGFtYSxhbmpvLGFzdWtlLGNoaXJ5dSxjaGl0YSxmdXNvLGdhbWFnb3JpLGhhbmRhLGhhenUsaGVraW5hbixoaWdhc2hpdXJhLGljaGlub21peWEsaW5hemF3YSxpbnV5YW1hLGlzc2hpa2ksaXdha3VyYSxrYW5pZSxrYXJpeWEsa2FzdWdhaSxraXJhLGtpeW9zdSxrb21ha2ksa29uYW4sa290YSxtaWhhbWEsbWl5b3NoaSxuaXNoaW8sbmlzc2hpbixvYnUsb2d1Y2hpLG9oYXJ1LG9rYXpha2ksb3dhcmlhc2FoaSxzZXRvLHNoaWthdHN1LHNoaW5zaGlybyxzaGl0YXJhLHRhaGFyYSx0YWthaGFtYSx0b2Jpc2hpbWEsdG9laSx0b2dvLHRva2FpLHRva29uYW1lLHRveW9ha2UsdG95b2hhc2hpLHRveW9rYXdhLHRveW9uZSx0b3lvdGEsdHN1c2hpbWEseWF0b21pPGFraXRhPmFraXRhLGRhaXNlbixmdWppc2F0byxnb2pvbWUsaGFjaGlyb2dhdGEsaGFwcG91LGhpZ2FzaGluYXJ1c2UsaG9uam8saG9uanlvLGlrYXdhLGthbWlrb2FuaSxrYW1pb2thLGthdGFnYW1pLGthenVubyxraXRhYWtpdGEsa29zYWthLGt5b3dhLG1pc2F0byxtaXRhbmUsbW9yaXlvc2hpLG5pa2Fobyxub3NoaXJvLG9kYXRlLG9nYSxvZ2F0YSxzZW1ib2t1LHlva290ZSx5dXJpaG9uam88YW9tb3JpPmFvbW9yaSxnb25vaGUsaGFjaGlub2hlLGhhc2hpa2FtaSxoaXJhbmFpLGhpcm9zYWtpLGl0YXlhbmFnaSxrdXJvaXNoaSxtaXNhd2EsbXV0c3UsbmFrYWRvbWFyaSxub2hlamksb2lyYXNlLG93YW5pLHJva3Vub2hlLHNhbm5vaGUsc2hpY2hpbm9oZSxzaGluZ28sdGFra28sdG93YWRhLHRzdWdhcnUsdHN1cnV0YTxjaGliYT5hYmlrbyxhc2FoaSxjaG9uYW4sY2hvc2VpLGNob3NoaSxjaHVvLGZ1bmFiYXNoaSxmdXR0c3UsaGFuYW1pZ2F3YSxpY2hpaGFyYSxpY2hpa2F3YSxpY2hpbm9taXlhLGluemFpLGlzdW1pLGthbWFnYXlhLGthbW9nYXdhLGthc2hpd2Esa2F0b3JpLGthdHN1dXJhLGtpbWl0c3Usa2lzYXJhenUsa296YWtpLGt1anVrdXJpLGt5b25hbixtYXRzdWRvLG1pZG9yaSxtaWhhbWEsbWluYW1pYm9zbyxtb2JhcmEsbXV0c3V6YXdhLG5hZ2FyYSxuYWdhcmV5YW1hLG5hcmFzaGlubyxuYXJpdGEsbm9kYSxvYW1pc2hpcmFzYXRvLG9taWdhd2Esb25qdWt1LG90YWtpLHNha2FlLHNha3VyYSxzaGltb2Z1c2Esc2hpcmFrbyxzaGlyb2ksc2hpc3VpLHNvZGVnYXVyYSxzb3NhLHRha28sdGF0ZXlhbWEsdG9nYW5lLHRvaG5vc2hvLHRvbWlzYXRvLHVyYXlhc3UseWFjaGltYXRhLHlhY2hpeW8seW9rYWljaGliYSx5b2tvc2hpYmFoaWthcmkseW90c3VrYWlkbzxlaGltZT5haW5hbixob25haSxpa2F0YSxpbWFiYXJpLGl5byxrYW1pamltYSxraWhva3Usa3VtYWtvZ2VuLG1hc2FraSxtYXRzdW5vLG1hdHN1eWFtYSxuYW1pa2F0YSxuaWloYW1hLG96dSxzYWlqbyxzZWl5byxzaGlrb2t1Y2h1byx0b2JlLHRvb24sdWNoaWtvLHV3YWppbWEseWF3YXRhaGFtYTxmdWt1aT5lY2hpemVuLGVpaGVpamksZnVrdWksaWtlZGEsa2F0c3V5YW1hLG1paGFtYSxtaW5hbWllY2hpemVuLG9iYW1hLG9oaSxvbm8sc2FiYWUsc2FrYWksdGFrYWhhbWEsdHN1cnVnYSx3YWthc2E8ZnVrdW9rYT5hc2hpeWEsYnV6ZW4sY2hpa3VnbyxjaGlrdWhvLGNoaWt1am8sY2hpa3VzaGlubyxjaGlrdXplbixjaHVvLGRhemFpZnUsZnVrdWNoaSxoYWthdGEsaGlnYXNoaSxoaXJva2F3YSxoaXNheWFtYSxpaXp1a2EsaW5hdHN1a2ksa2FobyxrYXN1Z2Esa2FzdXlhLGthd2FyYSxrZWlzZW4sa29nYSxrdXJhdGUsa3Vyb2dpLGt1cnVtZSxtaW5hbWksbWl5YWtvLG1peWFtYSxtaXlhd2FrYSxtaXp1bWFraSxtdW5ha2F0YSxuYWthZ2F3YSxuYWthbWEsbmlzaGksbm9nYXRhLG9nb3JpLG9rYWdha2ksb2thd2Esb2tpLG9tdXRhLG9uZ2Esb25vam8sb3RvLHNhaWdhd2Esc2FzYWd1cmksc2hpbmd1LHNoaW55b3NoaXRvbWksc2hvbmFpLHNvZWRhLHN1ZSx0YWNoaWFyYWksdGFnYXdhLHRha2F0YSx0b2hvLHRveW90c3UsdHN1aWtpLHVraWhhLHVtaSx1c3VpLHlhbWFkYSx5YW1lLHlhbmFnYXdhLHl1a3VoYXNoaTxmdWt1c2hpbWE+YWl6dWJhbmdlLGFpenVtaXNhdG8sYWl6dXdha2FtYXRzdSxhc2FrYXdhLGJhbmRhaSxkYXRlLGZ1a3VzaGltYSxmdXJ1ZG9ubyxmdXRhYmEsaGFuYXdhLGhpZ2FzaGksaGlyYXRhLGhpcm9ubyxpaXRhdGUsaW5hd2FzaGlybyxpc2hpa2F3YSxpd2FraSxpenVtaXpha2ksa2FnYW1paXNoaSxrYW5leWFtYSxrYXdhbWF0YSxraXRha2F0YSxraXRhc2hpb2JhcmEsa29vcmksa29yaXlhbWEsa3VuaW1pLG1paGFydSxtaXNoaW1hLG5hbWllLG5hbmdvLG5pc2hpYWl6dSxuaXNoaWdvLG9rdW1hLG9tb3RlZ28sb25vLG90YW1hLHNhbWVnYXdhLHNoaW1vZ28sc2hpcmFrYXdhLHNob3dhLHNvbWEsc3VrYWdhd2EsdGFpc2hpbix0YW1ha2F3YSx0YW5hZ3VyYSx0ZW5laSx5YWJ1a2kseWFtYXRvLHlhbWF0c3VyaSx5YW5haXp1LHl1Z2F3YTxnaWZ1PmFucGFjaGksZW5hLGdpZnUsZ2luYW4sZ29kbyxndWpvLGhhc2hpbWEsaGljaGlzbyxoaWRhLGhpZ2FzaGlzaGlyYWthd2EsaWJpZ2F3YSxpa2VkYSxrYWthbWlnYWhhcmEsa2FuaSxrYXNhaGFyYSxrYXNhbWF0c3Usa2F3YXVlLGtpdGFnYXRhLG1pbm8sbWlub2thbW8sbWl0YWtlLG1penVuYW1pLG1vdG9zdSxuYWthdHN1Z2F3YSxvZ2FraSxzYWthaG9naSxzZWtpLHNla2lnYWhhcmEsc2hpcmFrYXdhLHRhamltaSx0YWtheWFtYSx0YXJ1aSx0b2tpLHRvbWlrYSx3YW5vdWNoaSx5YW1hZ2F0YSx5YW90c3UseW9ybzxndW5tYT5hbm5ha2EsY2hpeW9kYSxmdWppb2thLGhpZ2FzaGlhZ2F0c3VtYSxpc2VzYWtpLGl0YWt1cmEsa2FubmEsa2FucmEsa2F0YXNoaW5hLGthd2FiYSxraXJ5dSxrdXNhdHN1LG1hZWJhc2hpLG1laXdhLG1pZG9yaSxtaW5ha2FtaSxuYWdhbm9oYXJhLG5ha2Fub2pvLG5hbm1va3UsbnVtYXRhLG9penVtaSxvcmEsb3RhLHNoaWJ1a2F3YSxzaGltb25pdGEsc2hpbnRvLHNob3dhLHRha2FzYWtpLHRha2F5YW1hLHRhbWFtdXJhLHRhdGViYXlhc2hpLHRvbWlva2EsdHN1a2l5b25vLHRzdW1hZ29pLHVlbm8seW9zaGlva2E8aGlyb3NoaW1hPmFzYW1pbmFtaSxkYWl3YSxldGFqaW1hLGZ1Y2h1LGZ1a3V5YW1hLGhhdHN1a2FpY2hpLGhpZ2FzaGloaXJvc2hpbWEsaG9uZ28samluc2VraWtvZ2VuLGthaXRhLGt1aSxrdW1hbm8sa3VyZSxtaWhhcmEsbWl5b3NoaSxuYWthLG9ub21pY2hpLG9zYWtpa2FtaWppbWEsb3Rha2Usc2FrYSxzZXJhLHNlcmFuaXNoaSxzaGluaWNoaSxzaG9iYXJhLHRha2VoYXJhPGhva2thaWRvPmFiYXNoaXJpLGFiaXJhLGFpYmV0c3UsYWthYmlyYSxha2tlc2hpLGFzYWhpa2F3YSxhc2hpYmV0c3UsYXNob3JvLGFzc2FidSxhdHN1bWEsYmliYWksYmllaSxiaWZ1a2EsYmlob3JvLGJpcmF0b3JpLGNoaXBwdWJldHN1LGNoaXRvc2UsZGF0ZSxlYmV0c3UsZW1iZXRzdSxlbml3YSxlcmltbyxlc2FuLGVzYXNoaSxmdWthZ2F3YSxmdWt1c2hpbWEsZnVyYW5vLGZ1cnViaXJhLGhhYm9ybyxoYWtvZGF0ZSxoYW1hdG9uYmV0c3UsaGlkYWthLGhpZ2FzaGlrYWd1cmEsaGlnYXNoaWthd2EsaGlyb28saG9rdXJ5dSxob2t1dG8saG9uYmV0c3UsaG9yb2thbmFpLGhvcm9ub2JlLGlrZWRhLGltYWthbmUsaXNoaWthcmksaXdhbWl6YXdhLGl3YW5haSxrYW1pZnVyYW5vLGthbWlrYXdhLGthbWlzaGlob3JvLGthbWlzdW5hZ2F3YSxrYW1vZW5haSxrYXlhYmUsa2VtYnVjaGksa2lrb25haSxraW1vYmV0c3Usa2l0YWhpcm9zaGltYSxraXRhbWksa2l5b3NhdG8sa29zaGltaXp1LGt1bm5lcHB1LGt1cml5YW1hLGt1cm9tYXRzdW5haSxrdXNoaXJvLGt1dGNoYW4sa3lvd2EsbWFzaGlrZSxtYXRzdW1hZSxtaWthc2EsbWluYW1pZnVyYW5vLG1vbWJldHN1LG1vc2V1c2hpLG11a2F3YSxtdXJvcmFuLG5haWUsbmFrYWdhd2EsbmFrYXNhdHN1bmFpLG5ha2F0b21iZXRzdSxuYW5hZSxuYW5wb3JvLG5heW9ybyxuZW11cm8sbmlpa2FwcHUsbmlraSxuaXNoaW9rb3BwZSxub2JvcmliZXRzdSxudW1hdGEsb2JpaGlybyxvYmlyYSxva2V0byxva29wcGUsb3RhcnUsb3RvYmUsb3RvZnVrZSxvdG9pbmVwcHUsb3VtdSxvem9yYSxwaXBwdSxyYW5rb3NoaSxyZWJ1bixyaWt1YmV0c3UscmlzaGlyaSxyaXNoaXJpZnVqaSxzYXJvbWEsc2FydWZ1dHN1LHNoYWtvdGFuLHNoYXJpLHNoaWJlY2hhLHNoaWJldHN1LHNoaWthYmUsc2hpa2FvaSxzaGltYW1ha2ksc2hpbWl6dSxzaGltb2thd2Esc2hpbnNoaW5vdHN1LHNoaW50b2t1LHNoaXJhbnVrYSxzaGlyYW9pLHNoaXJpdWNoaSxzb2JldHN1LHN1bmFnYXdhLHRhaWtpLHRha2FzdSx0YWtpa2F3YSx0YWtpbm91ZSx0ZXNoaWthZ2EsdG9iZXRzdSx0b2htYSx0b21ha29tYWksdG9tYXJpLHRveWEsdG95YWtvLHRveW90b21pLHRveW91cmEsdHN1YmV0c3UsdHN1a2lnYXRhLHVyYWthd2EsdXJhdXN1LHVyeXUsdXRhc2hpbmFpLHdha2thbmFpLHdhc3NhbXUseWFrdW1vLHlvaWNoaTxoeW9nbz5haW9pLGFrYXNoaSxha28sYW1hZ2FzYWtpLGFvZ2FraSxhc2Fnbyxhc2hpeWEsYXdhamksZnVrdXNha2ksZ29zaGlraSxoYXJpbWEsaGltZWppLGljaGlrYXdhLGluYWdhd2EsaXRhbWksa2Frb2dhd2Esa2FtaWdvcmksa2FtaWthd2Esa2FzYWksa2FzdWdhLGthd2FuaXNoaSxtaWtpLG1pbmFtaWF3YWppLG5pc2hpbm9taXlhLG5pc2hpd2FraSxvbm8sc2FuZGEsc2FubmFuLHNhc2F5YW1hLHNheW8sc2hpbmd1LHNoaW5vbnNlbixzaGlzbyxzdW1vdG8sdGFpc2hpLHRha2EsdGFrYXJhenVrYSx0YWthc2Fnbyx0YWtpbm8sdGFtYmEsdGF0c3Vubyx0b3lvb2thLHlhYnUseWFzaGlybyx5b2thLHlva2F3YTxpYmFyYWtpPmFtaSxhc2FoaSxiYW5kbyxjaGlrdXNlaSxkYWlnbyxmdWppc2hpcm8saGl0YWNoaSxoaXRhY2hpbmFrYSxoaXRhY2hpb21peWEsaGl0YWNoaW90YSxpYmFyYWtpLGluYSxpbmFzaGlraSxpdGFrbyxpd2FtYSxqb3NvLGthbWlzdSxrYXNhbWEsa2FzaGltYSxrYXN1bWlnYXVyYSxrb2dhLG1paG8sbWl0byxtb3JpeWEsbmFrYSxuYW1lZ2F0YSxvYXJhaSxvZ2F3YSxvbWl0YW1hLHJ5dWdhc2FraSxzYWthaSxzYWt1cmFnYXdhLHNoaW1vZGF0ZSxzaGltb3RzdW1hLHNoaXJvc2F0byxzb3dhLHN1aWZ1LHRha2FoYWdpLHRhbWF0c3VrdXJpLHRva2FpLHRvbW9iZSx0b25lLHRvcmlkZSx0c3VjaGl1cmEsdHN1a3ViYSx1Y2hpaGFyYSx1c2hpa3UseWFjaGl5byx5YW1hZ2F0YSx5YXdhcmEseXVraTxpc2hpa2F3YT5hbmFtaXp1LGhha3VpLGhha3VzYW4sa2FnYSxrYWhva3Usa2FuYXphd2Esa2F3YWtpdGEsa29tYXRzdSxuYWthbm90byxuYW5hbyxub21pLG5vbm9pY2hpLG5vdG8sc2hpa2Esc3V6dSx0c3ViYXRhLHRzdXJ1Z2ksdWNoaW5hZGEsd2FqaW1hPGl3YXRlPmZ1ZGFpLGZ1amlzYXdhLGhhbmFtYWtpLGhpcmFpenVtaSxoaXJvbm8saWNoaW5vaGUsaWNoaW5vc2VraSxpd2FpenVtaSxpd2F0ZSxqb2Jvamksa2FtYWlzaGksa2FuZWdhc2FraSxrYXJ1bWFpLGthd2FpLGtpdGFrYW1pLGt1amksa3Vub2hlLGt1enVtYWtpLG1peWFrbyxtaXp1c2F3YSxtb3Jpb2thLG5pbm9oZSxub2RhLG9mdW5hdG8sb3NodSxvdHN1Y2hpLHJpa3V6ZW50YWthdGEsc2hpd2Esc2hpenVrdWlzaGksc3VtaXRhLHRhbm9oYXRhLHRvbm8seWFoYWJhLHlhbWFkYTxrYWdhd2E+YXlhZ2F3YSxoaWdhc2hpa2FnYXdhLGthbm9uamksa290b2hpcmEsbWFubm8sbWFydWdhbWUsbWl0b3lvLG5hb3NoaW1hLHNhbnVraSx0YWRvdHN1LHRha2FtYXRzdSx0b25vc2hvLHVjaGlub21pLHV0YXp1LHplbnRzdWppPGthZ29zaGltYT5ha3VuZSxhbWFtaSxoaW9raSxpc2EsaXNlbixpenVtaSxrYWdvc2hpbWEsa2Fub3lhLGthd2FuYWJlLGtpbmtvLGtvdXlhbWEsbWFrdXJhemFraSxtYXRzdW1vdG8sbWluYW1pdGFuZSxuYWthdGFuZSxuaXNoaW5vb21vdGUsc2F0c3VtYXNlbmRhaSxzb28sdGFydW1penUseXVzdWk8a2FuYWdhd2E+YWlrYXdhLGF0c3VnaSxheWFzZSxjaGlnYXNha2ksZWJpbmEsZnVqaXNhd2EsaGFkYW5vLGhha29uZSxoaXJhdHN1a2EsaXNlaGFyYSxrYWlzZWksa2FtYWt1cmEsa2l5b2thd2EsbWF0c3VkYSxtaW5hbWlhc2hpZ2FyYSxtaXVyYSxuYWthaSxuaW5vbWl5YSxvZGF3YXJhLG9pLG9pc28sc2FnYW1paGFyYSxzYW11a2F3YSx0c3VrdWkseWFtYWtpdGEseWFtYXRvLHlva29zdWthLHl1Z2F3YXJhLHphbWEsenVzaGk8a29jaGk+YWtpLGdlaXNlaSxoaWRha2EsaGlnYXNoaXRzdW5vLGlubyxrYWdhbWksa2FtaSxraXRhZ2F3YSxrb2NoaSxtaWhhcmEsbW90b3lhbWEsbXVyb3RvLG5haGFyaSxuYWthbXVyYSxuYW5rb2t1LG5pc2hpdG9zYSxuaXlvZG9nYXdhLG9jaGksb2thd2Esb3RveW8sb3RzdWtpLHNha2F3YSxzdWt1bW8sc3VzYWtpLHRvc2EsdG9zYXNoaW1penUsdG95byx0c3Vubyx1bWFqaSx5YXN1ZGEseXVzdWhhcmE8a3VtYW1vdG8+YW1ha3VzYSxhcmFvLGFzbyxjaG95byxneW9rdXRvLGthbWlhbWFrdXNhLGtpa3VjaGksa3VtYW1vdG8sbWFzaGlraSxtaWZ1bmUsbWluYW1hdGEsbWluYW1pb2d1bmksbmFnYXN1LG5pc2hpaGFyYSxvZ3VuaSxvenUsc3Vtb3RvLHRha2Ftb3JpLHVraSx1dG8seWFtYWdhLHlhbWF0byx5YXRzdXNoaXJvPGt5b3RvPmF5YWJlLGZ1a3VjaGl5YW1hLGhpZ2FzaGl5YW1hLGlkZSxpbmUsam95byxrYW1lb2thLGthbW8sa2l0YSxraXp1LGt1bWl5YW1hLGt5b3RhbWJhLGt5b3RhbmFiZSxreW90YW5nbyxtYWl6dXJ1LG1pbmFtaSxtaW5hbWl5YW1hc2hpcm8sbWl5YXp1LG11a28sbmFnYW9rYWt5byxuYWthZ3lvLG5hbnRhbixveWFtYXpha2ksc2FreW8sc2Vpa2EsdGFuYWJlLHVqaSx1aml0YXdhcmEsd2F6dWthLHlhbWFzaGluYSx5YXdhdGE8bWllPmFzYWhpLGluYWJlLGlzZSxrYW1leWFtYSxrYXdhZ29lLGtpaG8sa2lzb3Nha2ksa2l3YSxrb21vbm8sa3VtYW5vLGt1d2FuYSxtYXRzdXNha2EsbWVpd2EsbWloYW1hLG1pbmFtaWlzZSxtaXN1Z2ksbWl5YW1hLG5hYmFyaSxzaGltYSxzdXp1a2EsdGFkbyx0YWlraSx0YWtpLHRhbWFraSx0b2JhLHRzdSx1ZG9ubyx1cmVzaGlubyx3YXRhcmFpLHlva2thaWNoaTxtaXlhZ2k+ZnVydWthd2EsaGlnYXNoaW1hdHN1c2hpbWEsaXNoaW5vbWFraSxpd2FudW1hLGtha3VkYSxrYW1pLGthd2FzYWtpLG1hcnVtb3JpLG1hdHN1c2hpbWEsbWluYW1pc2FucmlrdSxtaXNhdG8sbXVyYXRhLG5hdG9yaSxvZ2F3YXJhLG9oaXJhLG9uYWdhd2Esb3Nha2kscmlmdSxzZW1pbmUsc2hpYmF0YSxzaGljaGlrYXNodWt1LHNoaWthbWEsc2hpb2dhbWEsc2hpcm9pc2hpLHRhZ2Fqbyx0YWl3YSx0b21lLHRvbWl5YSx3YWt1eWEsd2F0YXJpLHlhbWFtb3RvLHphbzxtaXlhemFraT5heWEsZWJpbm8sZ29rYXNlLGh5dWdhLGthZG9nYXdhLGthd2FtaW5hbWksa2lqbyxraXRhZ2F3YSxraXRha2F0YSxraXRhdXJhLGtvYmF5YXNoaSxrdW5pdG9taSxrdXNoaW1hLG1pbWF0YSxtaXlha29ub2pvLG1peWF6YWtpLG1vcm90c3VrYSxuaWNoaW5hbixuaXNoaW1lcmEsbm9iZW9rYSxzYWl0byxzaGlpYmEsc2hpbnRvbWksdGFrYWhhcnUsdGFrYW5hYmUsdGFrYXpha2ksdHN1bm88bmFnYW5vPmFjaGksYWdlbWF0c3UsYW5hbixhb2tpLGFzYWhpLGF6dW1pbm8sY2hpa3Vob2t1LGNoaWt1bWEsY2hpbm8sZnVqaW1pLGhha3ViYSxoYXJhLGhpcmF5YSxpaWRhLGlpamltYSxpaXlhbWEsaWl6dW5hLGlrZWRhLGlrdXNha2EsaW5hLGthcnVpemF3YSxrYXdha2FtaSxraXNvLGtpc29mdWt1c2hpbWEsa2l0YWFpa2ksa29tYWdhbmUsa29tb3JvLG1hdHN1a2F3YSxtYXRzdW1vdG8sbWlhc2EsbWluYW1pYWlraSxtaW5hbWltYWtpLG1pbmFtaW1pbm93YSxtaW5vd2EsbWl5YWRhLG1peW90YSxtb2NoaXp1a2ksbmFnYW5vLG5hZ2F3YSxuYWdpc28sbmFrYWdhd2EsbmFrYW5vLG5vemF3YW9uc2VuLG9idXNlLG9nYXdhLG9rYXlhLG9tYWNoaSxvbWksb29rdXdhLG9vc2hpa2Esb3Rha2ksb3Rhcmksc2FrYWUsc2FrYWtpLHNha3Usc2FrdWhvLHNoaW1vc3V3YSxzaGluYW5vbWFjaGksc2hpb2ppcmksc3V3YSxzdXpha2EsdGFrYWdpLHRha2Ftb3JpLHRha2F5YW1hLHRhdGVzaGluYSx0YXRzdW5vLHRvZ2FrdXNoaSx0b2d1cmEsdG9taSx1ZWRhLHdhZGEseWFtYWdhdGEseWFtYW5vdWNoaSx5YXNha2EseWFzdW9rYTxuYWdhc2FraT5jaGlqaXdhLGZ1dHN1LGdvdG8saGFzYW1pLGhpcmFkbyxpa2ksaXNhaGF5YSxrYXdhdGFuYSxrdWNoaW5vdHN1LG1hdHN1dXJhLG5hZ2FzYWtpLG9iYW1hLG9tdXJhLG9zZXRvLHNhaWthaSxzYXNlYm8sc2VpaGksc2hpbWFiYXJhLHNoaW5rYW1pZ290byx0b2dpdHN1LHRzdXNoaW1hLHVuemVuPG5hcmE+YW5kbyxnb3NlLGhlZ3VyaSxoaWdhc2hpeW9zaGlubyxpa2FydWdhLGlrb21hLGthbWlraXRheWFtYSxrYW5tYWtpLGthc2hpYmEsa2FzaGloYXJhLGthdHN1cmFnaSxrYXdhaSxrYXdha2FtaSxrYXdhbmlzaGksa29yeW8sa3Vyb3Rha2ksbWl0c3VlLG1peWFrZSxuYXJhLG5vc2VnYXdhLG9qaSxvdWRhLG95b2RvLHNha3VyYWksc2FuZ28sc2hpbW9pY2hpLHNoaW1va2l0YXlhbWEsc2hpbmpvLHNvbmksdGFrYXRvcmksdGF3YXJhbW90byx0ZW5rYXdhLHRlbnJpLHVkYSx5YW1hdG9rb3JpeWFtYSx5YW1hdG90YWthZGEseWFtYXpvZSx5b3NoaW5vPG5paWdhdGE+YWdhLGFnYW5vLGdvc2VuLGl0b2lnYXdhLGl6dW1vemFraSxqb2V0c3Usa2FtbyxrYXJpd2Esa2FzaGl3YXpha2ksbWluYW1pdW9udW1hLG1pdHN1a2UsbXVpa2EsbXVyYWthbWksbXlva28sbmFnYW9rYSxuaWlnYXRhLG9qaXlhLG9taSxzYWRvLHNhbmpvLHNlaXJvLHNlaXJvdSxzZWtpa2F3YSxzaGliYXRhLHRhZ2FtaSx0YWluYWksdG9jaGlvLHRva2FtYWNoaSx0c3ViYW1lLHRzdW5hbix1b251bWEseWFoaWtvLHlvaXRhLHl1emF3YTxvaXRhPmJlcHB1LGJ1bmdvb25vLGJ1bmdvdGFrYWRhLGhhc2FtYSxoaWppLGhpbWVzaGltYSxoaXRhLGthbWl0c3VlLGtva29ub2Usa3VqdSxrdW5pc2FraSxrdXN1LG9pdGEsc2Fpa2ksdGFrZXRhLHRzdWt1bWksdXNhLHVzdWtpLHl1ZnU8b2theWFtYT5ha2Fpd2EsYXNha3VjaGksYml6ZW4saGF5YXNoaW1hLGliYXJhLGthZ2FtaW5vLGthc2Fva2Esa2liaWNodW8sa3VtZW5hbixrdXJhc2hpa2ksbWFuaXdhLG1pc2FraSxuYWdpLG5paW1pLG5pc2hpYXdha3VyYSxva2F5YW1hLHNhdG9zaG8sc2V0b3VjaGksc2hpbmpvLHNob28sc29qYSx0YWthaGFzaGksdGFtYW5vLHRzdXlhbWEsd2FrZSx5YWthZ2U8b2tpbmF3YT5hZ3VuaSxnaW5vd2FuLGdpbm96YSxndXNoaWthbWksaGFlYmFydSxoaWdhc2hpLGhpcmFyYSxpaGV5YSxpc2hpZ2FraSxpc2hpa2F3YSxpdG9tYW4saXplbmEsa2FkZW5hLGtpbixraXRhZGFpdG8sa2l0YW5ha2FndXN1a3Usa3VtZWppbWEsa3VuaWdhbWksbWluYW1pZGFpdG8sbW90b2J1LG5hZ28sbmFoYSxuYWthZ3VzdWt1LG5ha2lqaW4sbmFuam8sbmlzaGloYXJhLG9naW1pLG9raW5hd2Esb25uYSxzaGltb2ppLHRha2V0b21pLHRhcmFtYSx0b2thc2hpa2ksdG9taWd1c3VrdSx0b25ha2ksdXJhc29lLHVydW1hLHlhZXNlLHlvbWl0YW4seW9uYWJhcnUseW9uYWd1bmksemFtYW1pPG9zYWthPmFiZW5vLGNoaWhheWFha2FzYWthLGNodW8sZGFpdG8sZnVqaWlkZXJhLGhhYmlraW5vLGhhbm5hbixoaWdhc2hpb3Nha2EsaGlnYXNoaXN1bWl5b3NoaSxoaWdhc2hpeW9kb2dhd2EsaGlyYWthdGEsaWJhcmFraSxpa2VkYSxpenVtaSxpenVtaW90c3UsaXp1bWlzYW5vLGthZG9tYSxrYWl6dWthLGthbmFuLGthc2hpd2FyYSxrYXRhbm8sa2F3YWNoaW5hZ2FubyxraXNoaXdhZGEsa2l0YSxrdW1hdG9yaSxtYXRzdWJhcmEsbWluYXRvLG1pbm9oLG1pc2FraSxtb3JpZ3VjaGksbmV5YWdhd2EsbmlzaGksbm9zZSxvc2FrYXNheWFtYSxzYWthaSxzYXlhbWEsc2VubmFuLHNldHRzdSxzaGlqb25hd2F0ZSxzaGltYW1vdG8sc3VpdGEsdGFkYW9rYSx0YWlzaGksdGFqaXJpLHRha2Fpc2hpLHRha2F0c3VraSx0b25kYWJheWFzaGksdG95b25ha2EsdG95b25vLHlhbzxzYWdhPmFyaWFrZSxhcml0YSxmdWt1ZG9taSxnZW5rYWksaGFtYXRhbWEsaGl6ZW4saW1hcmksa2FtaW1pbmUsa2FuemFraSxrYXJhdHN1LGthc2hpbWEsa2l0YWdhdGEsa2l0YWhhdGEsa2l5YW1hLGtvdWhva3Usa3l1cmFnaSxuaXNoaWFyaXRhLG9naSxvbWFjaGksb3VjaGksc2FnYSxzaGlyb2lzaGksdGFrdSx0YXJhLHRvc3UseW9zaGlub2dhcmk8c2FpdGFtYT5hcmFrYXdhLGFzYWthLGNoaWNoaWJ1LGZ1amltaSxmdWppbWlubyxmdWtheWEsaGFubm8saGFueXUsaGFzdWRhLGhhdG9nYXlhLGhhdG95YW1hLGhpZGFrYSxoaWdhc2hpY2hpY2hpYnUsaGlnYXNoaW1hdHN1eWFtYSxob25qbyxpbmEsaXJ1bWEsaXdhdHN1a2ksa2FtaWl6dW1pLGthbWlrYXdhLGthbWlzYXRvLGthc3VrYWJlLGthd2Fnb2Usa2F3YWd1Y2hpLGthd2FqaW1hLGthem8sa2l0YW1vdG8sa29zaGlnYXlhLGtvdW5vc3Usa3VraSxrdW1hZ2F5YSxtYXRzdWJ1c2hpLG1pbmFubyxtaXNhdG8sbWl5YXNoaXJvLG1peW9zaGksbW9yb3lhbWEsbmFnYXRvcm8sbmFtZWdhd2EsbmlpemEsb2dhbm8sb2dhd2Esb2dvc2Usb2tlZ2F3YSxvbWl5YSxvdGFraSxyYW56YW4scnlva2FtaSxzYWl0YW1hLHNha2FkbyxzYXR0ZSxzYXlhbWEsc2hpa2ksc2hpcmFva2Esc29rYSxzdWdpdG8sdG9kYSx0b2tpZ2F3YSx0b2tvcm96YXdhLHRzdXJ1Z2FzaGltYSx1cmF3YSx3YXJhYmkseWFzaGlvLHlva296ZSx5b25vLHlvcmlpLHlvc2hpZGEseW9zaGlrYXdhLHlvc2hpbWk8c2hpZ2E+YWlzaG8sZ2FtbyxoaWdhc2hpb21pLGhpa29uZSxrb2thLGtvbmFuLGtvc2VpLGtvdG8sa3VzYXRzdSxtYWliYXJhLG1vcml5YW1hLG5hZ2FoYW1hLG5pc2hpYXphaSxub3RvZ2F3YSxvbWloYWNoaW1hbixvdHN1LHJpdHRvLHJ5dW9oLHRha2FzaGltYSx0YWthdHN1a2ksdG9yYWhpbWUsdG95b3NhdG8seWFzdTxzaGltYW5lPmFrYWdpLGFtYSxnb3RzdSxoYW1hZGEsaGlnYXNoaWl6dW1vLGhpa2F3YSxoaWtpbWksaXp1bW8sa2FraW5va2ksbWFzdWRhLG1hdHN1ZSxtaXNhdG8sbmlzaGlub3NoaW1hLG9oZGEsb2tpbm9zaGltYSxva3VpenVtbyxzaGltYW5lLHRhbWF5dSx0c3V3YW5vLHVubmFuLHlha3Vtbyx5YXN1Z2kseWF0c3VrYTxzaGl6dW9rYT5hcmFpLGF0YW1pLGZ1amksZnVqaWVkYSxmdWppa2F3YSxmdWppbm9taXlhLGZ1a3Vyb2ksZ290ZW1iYSxoYWliYXJhLGhhbWFtYXRzdSxoaWdhc2hpaXp1LGl0byxpd2F0YSxpenUsaXp1bm9rdW5pLGtha2VnYXdhLGthbm5hbWksa2F3YW5laG9uLGthd2F6dSxraWt1Z2F3YSxrb3NhaSxtYWtpbm9oYXJhLG1hdHN1emFraSxtaW5hbWlpenUsbWlzaGltYSxtb3JpbWFjaGksbmlzaGlpenUsbnVtYXp1LG9tYWV6YWtpLHNoaW1hZGEsc2hpbWl6dSxzaGltb2RhLHNoaXp1b2thLHN1c29ubyx5YWl6dSx5b3NoaWRhPHRvY2hpZ2k+YXNoaWthZ2EsYmF0byxoYWdhLGljaGlrYWksaXdhZnVuZSxrYW1pbm9rYXdhLGthbnVtYSxrYXJhc3V5YW1hLGt1cm9pc28sbWFzaGlrbyxtaWJ1LG1va2EsbW90ZWdpLG5hc3UsbmFzdXNoaW9iYXJhLG5pa2tvLG5pc2hpa2F0YSxub2dpLG9oaXJhLG9odGF3YXJhLG95YW1hLHNha3VyYSxzYW5vLHNoaW1vdHN1a2Usc2hpb3lhLHRha2FuZXphd2EsdG9jaGlnaSx0c3VnYSx1amlpZSx1dHN1bm9taXlhLHlhaXRhPHRva3VzaGltYT5haXp1bWksYW5hbixpY2hpYmEsaXRhbm8sa2FpbmFuLGtvbWF0c3VzaGltYSxtYXRzdXNoaWdlLG1pbWEsbWluYW1pLG1peW9zaGksbXVnaSxuYWthZ2F3YSxuYXJ1dG8sc2FuYWdvY2hpLHNoaXNoaWt1aSx0b2t1c2hpbWEsd2FqaWtpPHRva3lvPmFkYWNoaSxha2lydW5vLGFraXNoaW1hLGFvZ2FzaGltYSxhcmFrYXdhLGJ1bmt5byxjaGl5b2RhLGNob2Z1LGNodW8sZWRvZ2F3YSxmdWNodSxmdXNzYSxoYWNoaWpvLGhhY2hpb2ppLGhhbXVyYSxoaWdhc2hpa3VydW1lLGhpZ2FzaGltdXJheWFtYSxoaWdhc2hpeWFtYXRvLGhpbm8saGlub2RlLGhpbm9oYXJhLGluYWdpLGl0YWJhc2hpLGthdHN1c2hpa2Esa2l0YSxraXlvc2Usa29kYWlyYSxrb2dhbmVpLGtva3VidW5qaSxrb21hZSxrb3RvLGtvdXp1c2hpbWEsa3VuaXRhY2hpLG1hY2hpZGEsbWVndXJvLG1pbmF0byxtaXRha2EsbWl6dWhvLG11c2FzaGltdXJheWFtYSxtdXNhc2hpbm8sbmFrYW5vLG5lcmltYSxvZ2FzYXdhcmEsb2t1dGFtYSxvbWUsb3NoaW1hLG90YSxzZXRhZ2F5YSxzaGlidXlhLHNoaW5hZ2F3YSxzaGluanVrdSxzdWdpbmFtaSxzdW1pZGEsdGFjaGlrYXdhLHRhaXRvLHRhbWEsdG9zaGltYTx0b3R0b3JpPmNoaXp1LGhpbm8sa2F3YWhhcmEsa29nZSxrb3RvdXJhLG1pc2FzYSxuYW5idSxuaWNoaW5hbixzYWthaW1pbmF0byx0b3R0b3JpLHdha2FzYSx5YXp1LHlvbmFnbzx0b3lhbWE+YXNhaGksZnVjaHUsZnVrdW1pdHN1LGZ1bmFoYXNoaSxoaW1pLGltaXp1LGluYW1pLGpvaGFuYSxrYW1paWNoaSxrdXJvYmUsbmFrYW5paWthd2EsbmFtZXJpa2F3YSxuYW50byxueXV6ZW4sb3lhYmUsdGFpcmEsdGFrYW9rYSx0YXRleWFtYSx0b2dhLHRvbmFtaSx0b3lhbWEsdW5henVraSx1b3p1LHlhbWFkYTx3YWtheWFtYT5hcmlkYSxhcmlkYWdhd2EsZ29ibyxoYXNoaW1vdG8saGlkYWthLGhpcm9nYXdhLGluYW1pLGl3YWRlLGthaW5hbixrYW1pdG9uZGEsa2F0c3VyYWdpLGtpbWlubyxraW5va2F3YSxraXRheWFtYSxrb3lhLGtvemEsa296YWdhd2Esa3Vkb3lhbWEsa3VzaGltb3RvLG1paGFtYSxtaXNhdG8sbmFjaGlrYXRzdXVyYSxzaGluZ3Usc2hpcmFoYW1hLHRhaWppLHRhbmFiZSx3YWtheWFtYSx5dWFzYSx5dXJhPHlhbWFnYXRhPmFzYWhpLGZ1bmFnYXRhLGhpZ2FzaGluZSxpaWRlLGthaG9rdSxrYW1pbm95YW1hLGthbmV5YW1hLGthd2FuaXNoaSxtYW11cm9nYXdhLG1pa2F3YSxtdXJheWFtYSxuYWdhaSxuYWtheWFtYSxuYW55byxuaXNoaWthd2Esb2JhbmF6YXdhLG9lLG9ndW5pLG9oa3VyYSxvaXNoaWRhLHNhZ2FlLHNha2F0YSxzYWtlZ2F3YSxzaGluam8sc2hpcmF0YWthLHNob25haSx0YWthaGF0YSx0ZW5kbyx0b3phd2EsdHN1cnVva2EseWFtYWdhdGEseWFtYW5vYmUseW9uZXphd2EseXV6YTx5YW1hZ3VjaGk+YWJ1LGhhZ2ksaGlrYXJpLGhvZnUsaXdha3VuaSxrdWRhbWF0c3UsbWl0b3UsbmFnYXRvLG9zaGltYSxzaGltb25vc2VraSxzaHVuYW4sdGFidXNlLHRva3V5YW1hLHRveW90YSx1YmUseXV1PHlhbWFuYXNoaT5jaHVvLGRvc2hpLGZ1ZWZ1a2ksZnVqaWthd2EsZnVqaWthd2FndWNoaWtvLGZ1aml5b3NoaWRhLGhheWFrYXdhLGhva3V0byxpY2hpa2F3YW1pc2F0byxrYWksa29mdSxrb3NodSxrb3N1Z2UsbWluYW1pLWFscHMsbWlub2J1LG5ha2FtaWNoaSxuYW5idSxuYXJ1c2F3YSxuaXJhc2FraSxuaXNoaWthdHN1cmEsb3NoaW5vLG90c3VraSxzaG93YSx0YWJheWFtYSx0c3VydSx1ZW5vaGFyYSx5YW1hbmFrYWtvLHlhbWFuYXNoaTx4bi0tNHB2eHMseG4tLXZndTQwMmMseG4tLWMzczE0bSx4bi0tZjZxeDUzYSx4bi0tOHB2cjR1LHhuLS11aXN0MjJoLHhuLS1kanJzNzJkNnV5LHhuLS1ta3J1NDVpLHhuLS0wdHJxN3A3bm4seG4tLThsdHI2MmsseG4tLTJtNGExNWUseG4tLWVmdm45cyx4bi0tMzJ2cDMwaCx4bi0tNGl0Nzk3ayx4bi0tMWxxczcxZCx4bi0tNXJ0cDQ5Yyx4bi0tNWpzMDQ1ZCx4bi0tZWhxejU2bix4bi0tMWxxczAzbix4bi0tcXFxdDExbSx4bi0ta2JycTdvLHhuLS1wc3N1MzNsLHhuLS1udHNxMTdnLHhuLS11aXN6M2cseG4tLTZidHc1YSx4bi0tMWN0d28seG4tLTZvcngycix4bi0tcmh0NjFlLHhuLS1yaHQyN3oseG4tLWRqdHk0ayx4bi0tbml0MjI1ayx4bi0tcmh0M2QseG4tLWtsdHk1eCx4bi0ta2x0eDlhLHhuLS1rbHRwN2QseG4tLXV1d3U1OGEseG4tLXpieDAyNWQseG4tLW50c28waXF4M2EseG4tLWVscXExNmgseG4tLTRpdDE2OGQseG4tLWtsdDc4N2QseG4tLXJueTMxaCx4bi0tN3QwYTI2NGMseG4tLTVydHEzNGsseG4tLWs3eW45NWUseG4tLXRvcjEzMW8seG4tLWQ1cXY3ejg3NmMsa2F3YXNha2k+KiwhY2l0eTxraXRha3l1c2h1PiosIWNpdHk8a29iZT4qLCFjaXR5PG5hZ295YT4qLCFjaXR5PHNhcHBvcm8+KiwhY2l0eTxzZW5kYWk+KiwhY2l0eTx5b2tvaGFtYT4qLCFjaXR5PDxrZT5hYyxjbyxnbyxpbmZvLG1lLG1vYmksbmUsb3Isc2M8a2c+b3JnLG5ldCxjb20sZWR1LGdvdixtaWw8a2g+KjxraT5lZHUsYml6LG5ldCxvcmcsZ292LGluZm8sY29tPGttPm9yZyxub20sZ292LHByZCx0bSxlZHUsbWlsLGFzcyxjb20sY29vcCxhc3NvLHByZXNzZSxtZWRlY2luLG5vdGFpcmVzLHBoYXJtYWNpZW5zLHZldGVyaW5haXJlLGdvdXY8a24+bmV0LG9yZyxlZHUsZ292PGtwPmNvbSxlZHUsZ292LG9yZyxyZXAsdHJhPGtyPmFjLGNvLGVzLGdvLGhzLGtnLG1pbCxtcyxuZSxvcixwZSxyZSxzYyxidXNhbixjaHVuZ2J1ayxjaHVuZ25hbSxkYWVndSxkYWVqZW9uLGdhbmd3b24sZ3dhbmdqdSxneWVvbmdidWssZ3llb25nZ2ksZ3llb25nbmFtLGluY2hlb24samVqdSxqZW9uYnVrLGplb25uYW0sc2VvdWwsdWxzYW48a3c+Y29tLGVkdSxlbWIsZ292LGluZCxuZXQsb3JnPGt5PmNvbSxlZHUsbmV0LG9yZzxrej5vcmcsZWR1LG5ldCxnb3YsbWlsLGNvbTxsYT5pbnQsbmV0LGluZm8sZWR1LGdvdixwZXIsY29tLG9yZzxsYj5jb20sZWR1LGdvdixuZXQsb3JnPGxjPmNvbSxuZXQsY28sb3JnLGVkdSxnb3Y8bGksbGs+Z292LHNjaCxuZXQsaW50LGNvbSxvcmcsZWR1LG5nbyxzb2Msd2ViLGx0ZCxhc3NuLGdycCxob3RlbCxhYzxscj5jb20sZWR1LGdvdixvcmcsbmV0PGxzPmFjLGJpeixjbyxlZHUsZ292LGluZm8sbmV0LG9yZyxzYzxsdD5nb3Y8bHUsbHY+Y29tLGVkdSxnb3Ysb3JnLG1pbCxpZCxuZXQsYXNuLGNvbmY8bHk+Y29tLG5ldCxnb3YscGxjLGVkdSxzY2gsbWVkLG9yZyxpZDxtYT5jbyxuZXQsZ292LG9yZyxhYyxwcmVzczxtYz50bSxhc3NvPG1kLG1lPmNvLG5ldCxvcmcsZWR1LGFjLGdvdixpdHMscHJpdjxtZz5vcmcsbm9tLGdvdixwcmQsdG0sZWR1LG1pbCxjb20sY288bWgsbWlsLG1rPmNvbSxvcmcsbmV0LGVkdSxnb3YsaW5mLG5hbWU8bWw+Y29tLGVkdSxnb3V2LGdvdixuZXQsb3JnLHByZXNzZTxtbT4qPG1uPmdvdixlZHUsb3JnPG1vPmNvbSxuZXQsb3JnLGVkdSxnb3Y8bW9iaSxtcCxtcSxtcj5nb3Y8bXM+Y29tLGVkdSxnb3YsbmV0LG9yZzxtdD5jb20sZWR1LG5ldCxvcmc8bXU+Y29tLG5ldCxvcmcsZ292LGFjLGNvLG9yPG11c2V1bSxtdj5hZXJvLGJpeixjb20sY29vcCxlZHUsZ292LGluZm8saW50LG1pbCxtdXNldW0sbmFtZSxuZXQsb3JnLHBybzxtdz5hYyxiaXosY28sY29tLGNvb3AsZWR1LGdvdixpbnQsbXVzZXVtLG5ldCxvcmc8bXg+Y29tLG9yZyxnb2IsZWR1LG5ldDxteT5iaXosY29tLGVkdSxnb3YsbWlsLG5hbWUsbmV0LG9yZzxtej5hYyxhZHYsY28sZWR1LGdvdixtaWwsbmV0LG9yZzxuYT5pbmZvLHBybyxuYW1lLHNjaG9vbCxvcixkcix1cyxteCxjYSxpbixjYyx0dix3cyxtb2JpLGNvLGNvbSxvcmc8bmFtZSxuYz5hc3NvLG5vbTxuZSxuZXQsbmY+Y29tLG5ldCxwZXIscmVjLHdlYixhcnRzLGZpcm0saW5mbyxvdGhlcixzdG9yZTxuZz5jb20sZWR1LGdvdixpLG1pbCxtb2JpLG5hbWUsbmV0LG9yZyxzY2g8bmk+YWMsYml6LGNvLGNvbSxlZHUsZ29iLGluLGluZm8saW50LG1pbCxuZXQsbm9tLG9yZyx3ZWI8bmwsbm8+ZmhzLHZncyxmeWxrZXNiaWJsLGZvbGtlYmlibCxtdXNldW0saWRyZXR0LHByaXYsbWlsLHN0YXQsZGVwLGtvbW11bmUsaGVyYWQsYWE+Z3M8YWg+Z3M8YnU+Z3M8Zm0+Z3M8aGw+Z3M8aG0+Z3M8amFuLW1heWVuPmdzPG1yPmdzPG5sPmdzPG50PmdzPG9mPmdzPG9sPmdzPG9zbG8+Z3M8cmw+Z3M8c2Y+Z3M8c3Q+Z3M8c3ZhbGJhcmQ+Z3M8dG0+Z3M8dHI+Z3M8dmE+Z3M8dmY+Z3M8YWtyZWhhbW4seG4tLWtyZWhhbW4tZHhhLGFsZ2FyZCx4bi0tbGdyZC1wb2FjLGFybmEsYnJ1bXVuZGRhbCxicnluZSxicm9ubm95c3VuZCx4bi0tYnJubnlzdW5kLW04YWMsZHJvYmFrLHhuLS1kcmJhay13dWEsZWdlcnN1bmQsZmV0c3VuZCxmbG9ybyx4bi0tZmxvci1qcmEsZnJlZHJpa3N0YWQsaG9ra3N1bmQsaG9uZWZvc3MseG4tLWhuZWZvc3MtcTFhLGplc3NoZWltLGpvcnBlbGFuZCx4bi0tanJwZWxhbmQtNTRhLGtpcmtlbmVzLGtvcGVydmlrLGtyb2tzdGFkZWx2YSxsYW5nZXZhZyx4bi0tbGFuZ2V2Zy1qeGEsbGVpcnZpayxtam9uZGFsZW4seG4tLW1qbmRhbGVuLTY0YSxtby1pLXJhbmEsbW9zam9lbix4bi0tbW9zamVuLWV5YSxuZXNvZGR0YW5nZW4sb3JrYW5nZXIsb3NveXJvLHhuLS1vc3lyby13dWEscmFob2x0LHhuLS1yaG9sdC1tcmEsc2FuZG5lc3Nqb2VuLHhuLS1zYW5kbmVzc2plbi1vZ2Isc2tlZHNtb2tvcnNldCxzbGF0dHVtLHNwamVsa2F2aWssc3RhdGhlbGxlLHN0YXZlcm4sc3Rqb3JkYWxzaGFsc2VuLHhuLS1zdGpyZGFsc2hhbHNlbi1zcWIsdGFuYW5nZXIsdHJhbmJ5LHZvc3NldmFuZ2VuLGFmam9yZCx4bi0tZmpvcmQtbHJhLGFnZGVuZXMsYWwseG4tLWwtMWZhLGFsZXN1bmQseG4tLWxlc3VuZC1odWEsYWxzdGFoYXVnLGFsdGEseG4tLWx0LWxpYWMsYWxhaGVhZGp1LHhuLS1sYWhlYWRqdS03eWEsYWx2ZGFsLGFtbGkseG4tLW1saS10bGEsYW1vdCx4bi0tbW90LXRsYSxhbmRlYnUsYW5kb3kseG4tLWFuZHktaXJhLGFuZGFzdW9sbyxhcmRhbCx4bi0tcmRhbC1wb2EsYXJlbWFyayxhcmVuZGFsLHhuLS1zLTFmYSxhc2VyYWwseG4tLXNlcmFsLWxyYSxhc2tlcixhc2tpbSxhc2t2b2xsLGFza295LHhuLS1hc2t5LWlyYSxhc25lcyx4bi0tc25lcy1wb2EsYXVkbmVkYWxuLGF1a3JhLGF1cmUsYXVybGFuZCxhdXJza29nLWhvbGFuZCx4bi0tYXVyc2tvZy1obGFuZC1qbmIsYXVzdGV2b2xsLGF1c3RyaGVpbSxhdmVyb3kseG4tLWF2ZXJ5LXl1YSxiYWxlc3RyYW5kLGJhbGxhbmdlbixiYWxhdCx4bi0tYmx0LWVsYWIsYmFsc2Zqb3JkLGJhaGNjYXZ1b3RuYSx4bi0tYmhjY2F2dW90bmEtazdhLGJhbWJsZSxiYXJkdSxiZWFyZHUsYmVpYXJuLGJhamRkYXIseG4tLWJqZGRhci1wdGEsYmFpZGFyLHhuLS1iaWRyLTVuYWMsYmVyZyxiZXJnZW4sYmVybGV2YWcseG4tLWJlcmxldmctanhhLGJlYXJhbHZhaGtpLHhuLS1iZWFyYWx2aGtpLXk0YSxiaW5kYWwsYmlya2VuZXMsYmphcmtveSx4bi0tYmphcmt5LWZ5YSxiamVya3JlaW0sYmp1Z24sYm9kbyx4bi0tYm9kLTJuYSxiYWRhZGRqYSx4bi0tYmRkZGotbXJhYmQsYnVkZWpqdSxib2tuLGJyZW1hbmdlcixicm9ubm95LHhuLS1icm5ueS13dWFjLGJ5Z2xhbmQsYnlrbGUsYmFydW0seG4tLWJydW0tdm9hLHRlbGVtYXJrPmJvLHhuLS1iLTVnYTxub3JkbGFuZD5ibyx4bi0tYi01Z2EsaGVyb3kseG4tLWhlcnktaXJhPGJpZXZhdCx4bi0tYmlldnQtMHFhLGJvbWxvLHhuLS1ibWxvLWdyYSxiYXRzZmpvcmQseG4tLWJ0c2Zqb3JkLTl6YSxiYWhjYXZ1b3RuYSx4bi0tYmhjYXZ1b3RuYS1zNGEsZG92cmUsZHJhbW1lbixkcmFuZ2VkYWwsZHlyb3kseG4tLWR5cnktaXJhLGRvbm5hLHhuLS1kbm5hLWdyYSxlaWQsZWlkZmpvcmQsZWlkc2JlcmcsZWlkc2tvZyxlaWRzdm9sbCxlaWdlcnN1bmQsZWx2ZXJ1bSxlbmViYWtrLGVuZ2VyZGFsLGV0bmUsZXRuZWRhbCxldmVuZXMsZXZlbmFzc2kseG4tLWV2ZW5pLTBxYTAxZ2EsZXZqZS1vZy1ob3JubmVzLGZhcnN1bmQsZmF1c2tlLGZ1b3Nza28sZnVvaXNrdSxmZWRqZSxmZXQsZmlubm95LHhuLS1maW5ueS15dWEsZml0amFyLGZqYWxlcixmamVsbCxmbGFrc3RhZCxmbGF0YW5nZXIsZmxla2tlZmpvcmQsZmxlc2JlcmcsZmxvcmEsZmxhLHhuLS1mbC16aWEsZm9sbGRhbCxmb3JzYW5kLGZvc25lcyxmcmVpLGZyb2duLGZyb2xhbmQsZnJvc3RhLGZyYW5hLHhuLS1mcm5hLXdvYSxmcm95YSx4bi0tZnJ5YS1ocmEsZnVzYSxmeXJlc2RhbCxmb3JkZSx4bi0tZnJkZS1ncmEsZ2FtdmlrLGdhbmdhdmlpa2EseG4tLWdnYXZpaWthLTh5YTQ3aCxnYXVsYXIsZ2F1c2RhbCxnaWxkZXNrYWwseG4tLWdpbGRlc2tsLWcwYSxnaXNrZSxnamVtbmVzLGdqZXJkcnVtLGdqZXJzdGFkLGdqZXNkYWwsZ2pvdmlrLHhuLS1nanZpay13dWEsZ2xvcHBlbixnb2wsZ3JhbixncmFuZSxncmFudmluLGdyYXRhbmdlbixncmltc3RhZCxncm9uZyxrcmFhbmdoa2UseG4tLWtyYW5naGtlLWIwYSxncnVlLGd1bGVuLGhhZHNlbCxoYWxkZW4saGFsc2EsaGFtYXIsaGFtYXJveSxoYWJtZXIseG4tLWhibWVyLXhxYSxoYXBtaXIseG4tLWhwbWlyLXhxYSxoYW1tZXJmZXN0LGhhbW1hcmZlYXN0YSx4bi0taG1tcmZlYXN0YS1zNGFjLGhhcmFtLGhhcmVpZCxoYXJzdGFkLGhhc3Zpayxha25vbHVva3RhLHhuLS1rb2x1b2t0YS03eWE1N2gsaGF0dGZqZWxsZGFsLGFhcmJvcnRlLGhhdWdlc3VuZCxoZW1uZSxoZW1uZXMsaGVtc2VkYWwsbW9yZS1vZy1yb21zZGFsPmhlcm95LHNhbmRlPHhuLS1tcmUtb2ctcm9tc2RhbC1xcWI+eG4tLWhlcnktaXJhLHNhbmRlPGhpdHJhLGhqYXJ0ZGFsLGhqZWxtZWxhbmQsaG9ib2wseG4tLWhvYmwtaXJhLGhvZixob2wsaG9sZSxob2xtZXN0cmFuZCxob2x0YWxlbix4bi0taG9sdGxlbi1oeGEsaG9ybmluZGFsLGhvcnRlbixodXJkYWwsaHVydW0saHZhbGVyLGh5bGxlc3RhZCxoYWdlYm9zdGFkLHhuLS1oZ2Vib3N0YWQtZzNhLGhveWFuZ2VyLHhuLS1oeWFuZ2VyLXExYSxob3lsYW5kZXQseG4tLWh5bGFuZGV0LTU0YSxoYSx4bi0taC0yZmEsaWJlc3RhZCxpbmRlcm95LHhuLS1pbmRlcnktZnlhLGl2ZWxhbmQsamV2bmFrZXIsam9uZGFsLGpvbHN0ZXIseG4tLWpsc3Rlci1ieWEsa2FyYXNqb2ssa2FyYXNqb2hrYSx4bi0ta3Jqb2hrYS1od2FiNDlqLGthcmxzb3ksZ2Fsc2EseG4tLWdscy1lbGFjLGthcm1veSx4bi0ta2FybXkteXVhLGthdXRva2Vpbm8sZ3VvdmRhZ2VhaWRudSxrbGVwcCxrbGFidSx4bi0ta2xidS13b2Esa29uZ3NiZXJnLGtvbmdzdmluZ2VyLGtyYWdlcm8seG4tLWtyYWdlci1neWEsa3Jpc3RpYW5zYW5kLGtyaXN0aWFuc3VuZCxrcm9kc2hlcmFkLHhuLS1rcmRzaGVyYWQtbThhLGt2YWxzdW5kLHJhaGtrZXJhdmp1LHhuLS1yaGtrZXJ2anUtMDFhZixrdmFtLGt2aW5lc2RhbCxrdmlubmhlcmFkLGt2aXRlc2VpZCxrdml0c295LHhuLS1rdml0c3ktZnlhLGt2YWZqb3JkLHhuLS1rdmZqb3JkLW54YSxnaWVodGF2dW9hdG5hLGt2YW5hbmdlbix4bi0ta3ZuYW5nZW4tazBhLG5hdnVvdG5hLHhuLS1udnVvdG5hLWh3YSxrYWZqb3JkLHhuLS1rZmpvcmQtaXVhLGdhaXZ1b3RuYSx4bi0tZ2l2dW90bmEtOHlhLGxhcnZpayxsYXZhbmdlbixsYXZhZ2lzLGxvYWJhdCx4bi0tbG9hYnQtMHFhLGxlYmVzYnksZGF2dmVzaWlkYSxsZWlrYW5nZXIsbGVpcmZqb3JkLGxla2EsbGVrc3ZpayxsZW52aWssbGVhbmdhdmlpa2EseG4tLWxlYWdhdmlpa2EtNTJiLGxlc2phLGxldmFuZ2VyLGxpZXIsbGllcm5lLGxpbGxlaGFtbWVyLGxpbGxlc2FuZCxsaW5kZXNuZXMsbGluZGFzLHhuLS1saW5kcy1wcmEsbG9tLGxvcHBhLGxhaHBwaSx4bi0tbGhwcGkteHFhLGx1bmQsbHVubmVyLGx1cm95LHhuLS1sdXJ5LWlyYSxsdXN0ZXIsbHluZ2RhbCxseW5nZW4saXZndSxsYXJkYWwsbGVyZGFsLHhuLS1scmRhbC1zcmEsbG9kaW5nZW4seG4tLWxkaW5nZW4tcTFhLGxvcmVuc2tvZyx4bi0tbHJlbnNrb2ctNTRhLGxvdGVuLHhuLS1sdGVuLWdyYSxtYWx2aWssbWFzb3kseG4tLW1zeS11bGEwaCxtdW9zYXQseG4tLW11b3N0LTBxYSxtYW5kYWwsbWFya2VyLG1hcm5hcmRhbCxtYXNmam9yZGVuLG1lbGFuZCxtZWxkYWwsbWVsaHVzLG1lbG95LHhuLS1tZWx5LWlyYSxtZXJha2VyLHhuLS1tZXJrZXIta3VhLG1vYXJla2UseG4tLW1vcmVrZS1qdWEsbWlkc3VuZCxtaWR0cmUtZ2F1bGRhbCxtb2RhbGVuLG1vZHVtLG1vbGRlLG1vc2tlbmVzLG1vc3MsbW9zdmlrLG1hbHNlbHYseG4tLW1sc2Vsdi1pdWEsbWFsYXR2dW9wbWkseG4tLW1sYXR2dW9wbWktczRhLG5hbWRhbHNlaWQsYWVqcmllLG5hbXNvcyxuYW1zc2tvZ2FuLG5hYW1lc2pldnVlbWllLHhuLS1ubWVzamV2dWVtaWUtdGNiYSxsYWFrZXN2dWVtaWUsbmFubmVzdGFkLG5hcnZpayxuYXJ2aWlrYSxuYXVzdGRhbCxuZWRyZS1laWtlcixha2Vyc2h1cz5uZXM8YnVza2VydWQ+bmVzPG5lc25hLG5lc29kZGVuLG5lc3NlYnksdW5qYXJnYSx4bi0tdW5qcmdhLXJ0YSxuZXNzZXQsbmlzc2VkYWwsbml0dGVkYWwsbm9yZC1hdXJkYWwsbm9yZC1mcm9uLG5vcmQtb2RhbCxub3JkZGFsLG5vcmRrYXBwLGRhdnZlbmphcmdhLHhuLS1kYXZ2ZW5qcmdhLXk0YSxub3JkcmUtbGFuZCxub3JkcmVpc2EscmFpc2EseG4tLXJpc2EtNW5hLG5vcmUtb2ctdXZkYWwsbm90b2RkZW4sbmFyb3kseG4tLW5yeS15bGE1Zyxub3R0ZXJveSx4bi0tbnR0ZXJ5LWJ5YWUsb2RkYSxva3NuZXMseG4tLWtzbmVzLXV1YSxvcHBkYWwsb3BwZWdhcmQseG4tLW9wcGVncmQtaXhhLG9ya2RhbCxvcmxhbmQseG4tLXJsYW5kLXV1YSxvcnNrb2cseG4tLXJza29nLXV1YSxvcnN0YSx4bi0tcnN0YS1mcmEsaGVkbWFyaz5vcyx2YWxlcix4bi0tdmxlci1xb2E8aG9yZGFsYW5kPm9zPG9zZW4sb3N0ZXJveSx4bi0tb3N0ZXJ5LWZ5YSxvc3RyZS10b3Rlbix4bi0tc3RyZS10b3Rlbi16Y2Isb3ZlcmhhbGxhLG92cmUtZWlrZXIseG4tLXZyZS1laWtlci1rOGEsb3llcix4bi0teWVyLXpuYSxveWdhcmRlbix4bi0teWdhcmRlbi1wMWEsb3lzdHJlLXNsaWRyZSx4bi0teXN0cmUtc2xpZHJlLXVqYixwb3JzYW5nZXIscG9yc2FuZ3UseG4tLXBvcnNndS1zdGEyNmYscG9yc2dydW5uLHJhZG95LHhuLS1yYWR5LWlyYSxyYWtrZXN0YWQscmFuYSxydW92YXQscmFuZGFiZXJnLHJhdW1hLHJlbmRhbGVuLHJlbm5lYnUscmVubmVzb3kseG4tLXJlbm5lc3ktdjFhLHJpbmRhbCxyaW5nZWJ1LHJpbmdlcmlrZSxyaW5nc2FrZXIscmlzc2Escmlzb3IseG4tLXJpc3ItaXJhLHJvYW4scm9sbGFnLHJ5Z2dlLHJhbGluZ2VuLHhuLS1ybGluZ2VuLW14YSxyb2RveSx4bi0tcmR5LTBuYWIscm9tc2tvZyx4bi0tcm1za29nLWJ5YSxyb3Jvcyx4bi0tcnJvcy1ncmEscm9zdCx4bi0tcnN0LTBuYSxyb3lrZW4seG4tLXJ5a2VuLXZ1YSxyb3lydmlrLHhuLS1yeXJ2aWstYnlhLHJhZGUseG4tLXJkZS11bGEsc2FsYW5nZW4sc2llbGxhayxzYWx0ZGFsLHNhbGF0LHhuLS1zbHQtZWxhYix4bi0tc2xhdC01bmEsc2FtbmFuZ2VyLHZlc3Rmb2xkPnNhbmRlPHNhbmRlZmpvcmQsc2FuZG5lcyxzYW5kb3kseG4tLXNhbmR5LXl1YSxzYXJwc2Jvcmcsc2F1ZGEsc2F1aGVyYWQsc2VsLHNlbGJ1LHNlbGplLHNlbGpvcmQsc2lnZGFsLHNpbGphbixzaXJkYWwsc2thdW4sc2tlZHNtbyxza2ksc2tpZW4sc2tpcHR2ZXQsc2tqZXJ2b3kseG4tLXNramVydnktdjFhLHNraWVydmEseG4tLXNraWVydi11dGEsc2tqYWsseG4tLXNramstc29hLHNrb2RqZSxza2FubGFuZCx4bi0tc2tubGFuZC1meGEsc2thbml0LHhuLS1za25pdC15cWEsc21vbGEseG4tLXNtbGEtaHJhLHNuaWxsZmpvcmQsc25hc2EseG4tLXNuc2Etcm9hLHNub2FzYSxzbmFhc2UseG4tLXNuYXNlLW5yYSxzb2duZGFsLHNva25kYWwsc29sYSxzb2x1bmQsc29uZ2RhbGVuLHNvcnRsYW5kLHNweWRlYmVyZyxzdGFuZ2Usc3RhdmFuZ2VyLHN0ZWlnZW4sc3RlaW5ramVyLHN0am9yZGFsLHhuLS1zdGpyZGFsLXMxYSxzdG9ra2Usc3Rvci1lbHZkYWwsc3RvcmQsc3RvcmRhbCxzdG9yZmpvcmQsb21hc3Z1b3RuYSxzdHJhbmQsc3RyYW5kYSxzdHJ5bixzdWxhLHN1bGRhbCxzdW5kLHN1bm5kYWwsc3VybmFkYWwsc3ZlaW8sc3ZlbHZpayxzeWtreWx2ZW4sc29nbmUseG4tLXNnbmUtZ3JhLHNvbW5hLHhuLS1zbW5hLWdyYSxzb25kcmUtbGFuZCx4bi0tc25kcmUtbGFuZC0wY2Isc29yLWF1cmRhbCx4bi0tc3ItYXVyZGFsLWw4YSxzb3ItZnJvbix4bi0tc3ItZnJvbi1xMWEsc29yLW9kYWwseG4tLXNyLW9kYWwtcTFhLHNvci12YXJhbmdlcix4bi0tc3ItdmFyYW5nZXItZ2diLG1hdHRhLXZhcmpqYXQseG4tLW10dGEtdnJqamF0LWs3YWYsc29yZm9sZCx4bi0tc3Jmb2xkLWJ5YSxzb3JyZWlzYSx4bi0tc3JyZWlzYS1xMWEsc29ydW0seG4tLXNydW0tZ3JhLHRhbmEsZGVhdG51LHRpbWUsdGluZ3ZvbGwsdGlubix0amVsZHN1bmQsZGllbGRkYW51b3JyaSx0am9tZSx4bi0tdGptZS1ocmEsdG9ra2UsdG9sZ2EsdG9yc2tlbix0cmFub3kseG4tLXRyYW55LXl1YSx0cm9tc28seG4tLXRyb21zLXp1YSx0cm9tc2Escm9tc2EsdHJvbmRoZWltLHRyb2FuZGluLHRyeXNpbCx0cmFuYSx4bi0tdHJuYS13b2EsdHJvZ3N0YWQseG4tLXRyZ3N0YWQtcjFhLHR2ZWRlc3RyYW5kLHR5ZGFsLHR5bnNldCx0eXNmam9yZCxkaXZ0YXN2dW9kbmEsZGl2dHRhc3Z1b3RuYSx0eXNuZXMsdHlzdmFyLHhuLS10eXN2ci12cmEsdG9uc2JlcmcseG4tLXRuc2JlcmctcTFhLHVsbGVuc2FrZXIsdWxsZW5zdmFuZyx1bHZpayx1dHNpcmEsdmFkc28seG4tLXZhZHMtanJhLGNhaGNlc3VvbG8seG4tLWhjZXN1b2xvLTd5YTM1Yix2YWtzZGFsLHZhbGxlLHZhbmcsdmFueWx2ZW4sdmFyZG8seG4tLXZhcmQtanJhLHZhcmdnYXQseG4tLXZyZ2d0LXhxYWQsdmVmc24sdmFhcHN0ZSx2ZWdhLHZlZ2Fyc2hlaSx4bi0tdmVncnNoZWktYzBhLHZlbm5lc2xhLHZlcmRhbCx2ZXJyYW4sdmVzdGJ5LHZlc3RuZXMsdmVzdHJlLXNsaWRyZSx2ZXN0cmUtdG90ZW4sdmVzdHZhZ295LHhuLS12ZXN0dmd5LWl4YTZvLHZldmVsc3RhZCx2aWssdmlrbmEsdmluZGFmam9yZCx2b2xkYSx2b3NzLHZhcm95LHhuLS12cnkteWxhNWcsdmFnYW4seG4tLXZnYW4tcW9hLHZvYWdhdCx2YWdzb3kseG4tLXZnc3ktcW9hMGosdmFnYSx4bi0tdmcteWlhYixvc3Rmb2xkPnZhbGVyPHhuLS1zdGZvbGQtOXhhPnhuLS12bGVyLXFvYTw8bnA+Kjxucj5iaXosaW5mbyxnb3YsZWR1LG9yZyxuZXQsY29tPG51LG56PmFjLGNvLGNyaSxnZWVrLGdlbixnb3Z0LGhlYWx0aCxpd2ksa2l3aSxtYW9yaSxtaWwseG4tLW1vcmktcXNhLG5ldCxvcmcscGFybGlhbWVudCxzY2hvb2w8b20+Y28sY29tLGVkdSxnb3YsbWVkLG11c2V1bSxuZXQsb3JnLHBybzxvbmlvbixvcmcscGE+YWMsZ29iLGNvbSxvcmcsc2xkLGVkdSxuZXQsaW5nLGFibyxtZWQsbm9tPHBlPmVkdSxnb2Isbm9tLG1pbCxvcmcsY29tLG5ldDxwZj5jb20sb3JnLGVkdTxwZz4qPHBoPmNvbSxuZXQsb3JnLGdvdixlZHUsbmdvLG1pbCxpPHBrPmFjLGJpeixjb20sZWR1LGZhbSxna3AsZ29iLGdvZyxnb2ssZ29uLGdvcCxnb3MsZ292LG5ldCxvcmcsd2ViPHBsPmNvbSxuZXQsb3JnLGFpZCxhZ3JvLGF0bSxhdXRvLGJpeixlZHUsZ21pbmEsZ3NtLGluZm8sbWFpbCxtaWFzdGEsbWVkaWEsbWlsLG5pZXJ1Y2hvbW9zY2ksbm9tLHBjLHBvd2lhdCxwcml2LHJlYWxlc3RhdGUscmVsLHNleCxzaG9wLHNrbGVwLHNvcyxzemtvbGEsdGFyZ2ksdG0sdG91cmlzbSx0cmF2ZWwsdHVyeXN0eWthLGdvdj5hcCxncml3LGljLGlzLGttcHNwLGtvbnN1bGF0LGtwcHNwLGt3cCxrd3BzcCxtdXAsbXcsb2lhLG9pcm0sb2tlLG9vdyxvc2NocixvdW0scGEscGluYixwaXcscG8scHIscHNwLHBzc2UscHVwLHJ6Z3csc2Esc2RuLHNrbyxzbyxzcixzdGFyb3N0d28sdWcsdWdpbSx1bSx1bWlnLHVwb3csdXBwbyx1cyx1dyx1enMsd2lmLHdpaWgsd2luYix3aW9zLHdpdGQsd2l3LHdreix3c2Esd3Nrcix3c3NlLHd1b3osd3ptaXV3LHpwLHpwaXNkbjxhdWd1c3RvdyxiYWJpYS1nb3JhLGJlZHppbixiZXNraWR5LGJpYWxvd2llemEsYmlhbHlzdG9rLGJpZWxhd2EsYmllc3pjemFkeSxib2xlc2xhd2llYyxieWRnb3N6Y3osYnl0b20sY2llc3p5bixjemVsYWR6LGN6ZXN0LGRsdWdvbGVrYSxlbGJsYWcsZWxrLGdsb2dvdyxnbmllem5vLGdvcmxpY2UsZ3JhamV3byxpbGF3YSxqYXdvcnpubyxqZWxlbmlhLWdvcmEsamdvcmEsa2FsaXN6LGthemltaWVyei1kb2xueSxrYXJwYWN6LGthcnR1enksa2FzenVieSxrYXRvd2ljZSxrZXBubyxrZXRyenluLGtsb2R6a28sa29iaWVyenljZSxrb2xvYnJ6ZWcsa29uaW4sa29uc2tvd29sYSxrdXRubyxsYXB5LGxlYm9yayxsZWduaWNhLGxlemFqc2ssbGltYW5vd2EsbG9temEsbG93aWN6LGx1YmluLGx1a293LG1hbGJvcmssbWFsb3BvbHNrYSxtYXpvd3N6ZSxtYXp1cnksbWllbGVjLG1pZWxubyxtcmFnb3dvLG5ha2xvLG5vd2FydWRhLG55c2Esb2xhd2Esb2xlY2tvLG9sa3VzeixvbHN6dHluLG9wb2N6bm8sb3BvbGUsb3N0cm9kYSxvc3Ryb2xla2Esb3N0cm93aWVjLG9zdHJvd3dsa3AscGlsYSxwaXN6LHBvZGhhbGUscG9kbGFzaWUscG9sa293aWNlLHBvbW9yemUscG9tb3Jza2llLHByb2Nob3dpY2UscHJ1c3prb3cscHJ6ZXdvcnNrLHB1bGF3eSxyYWRvbSxyYXdhLW1heixyeWJuaWsscnplc3pvdyxzYW5vayxzZWpueSxzbGFzayxzbHVwc2ssc29zbm93aWVjLHN0YWxvd2Etd29sYSxza29jem93LHN0YXJhY2hvd2ljZSxzdGFyZ2FyZCxzdXdhbGtpLHN3aWRuaWNhLHN3aWVib2R6aW4sc3dpbm91anNjaWUsc3pjemVjaW4sc3pjenl0bm8sdGFybm9icnplZyx0Z29yeSx0dXJlayx0eWNoeSx1c3RrYSx3YWxicnp5Y2gsd2FybWlhLHdhcnN6YXdhLHdhdyx3ZWdyb3csd2llbHVuLHdsb2NsLHdsb2NsYXdlayx3b2R6aXNsYXcsd29sb21pbix3cm9jbGF3LHphY2hwb21vcix6YWdhbix6YXJvdyx6Z29yYSx6Z29yemVsZWM8cG0scG4+Z292LGNvLG9yZyxlZHUsbmV0PHBvc3QscHI+Y29tLG5ldCxvcmcsZ292LGVkdSxpc2xhLHBybyxiaXosaW5mbyxuYW1lLGVzdCxwcm9mLGFjPHBybz5hYWEsYWNhLGFjY3QsYXZvY2F0LGJhcixjcGEsZW5nLGp1cixsYXcsbWVkLHJlY2h0PHBzPmVkdSxnb3Ysc2VjLHBsbyxjb20sb3JnLG5ldDxwdD5uZXQsZ292LG9yZyxlZHUsaW50LHB1YmwsY29tLG5vbWU8cHc+Y28sbmUsb3IsZWQsZ28sYmVsYXU8cHk+Y29tLGNvb3AsZWR1LGdvdixtaWwsbmV0LG9yZzxxYT5jb20sZWR1LGdvdixtaWwsbmFtZSxuZXQsb3JnLHNjaDxyZT5hc3NvLGNvbSxub208cm8+YXJ0cyxjb20sZmlybSxpbmZvLG5vbSxudCxvcmcscmVjLHN0b3JlLHRtLHd3dzxycz5hYyxjbyxlZHUsZ292LGluLG9yZzxydSxydz5hYyxjbyxjb29wLGdvdixtaWwsbmV0LG9yZzxzYT5jb20sbmV0LG9yZyxnb3YsbWVkLHB1YixlZHUsc2NoPHNiPmNvbSxlZHUsZ292LG5ldCxvcmc8c2M+Y29tLGdvdixuZXQsb3JnLGVkdTxzZD5jb20sbmV0LG9yZyxlZHUsbWVkLHR2LGdvdixpbmZvPHNlPmEsYWMsYixiZCxicmFuZCxjLGQsZSxmLGZoLGZoc2ssZmh2LGcsaCxpLGssa29tZm9yYixrb21tdW5hbGZvcmJ1bmQsa29tdnV4LGwsbGFuYmliLG0sbixuYXR1cmJydWtzZ3ltbixvLG9yZyxwLHBhcnRpLHBwLHByZXNzLHIscyx0LHRtLHUsdyx4LHksejxzZz5jb20sbmV0LG9yZyxnb3YsZWR1LHBlcjxzaD5jb20sbmV0LGdvdixvcmcsbWlsPHNpLHNqLHNrLHNsPmNvbSxuZXQsZWR1LGdvdixvcmc8c20sc24+YXJ0LGNvbSxlZHUsZ291dixvcmcscGVyc28sdW5pdjxzbz5jb20sZWR1LGdvdixtZSxuZXQsb3JnPHNyLHNzPmJpeixjb20sZWR1LGdvdixtZSxuZXQsb3JnLHNjaDxzdD5jbyxjb20sY29uc3VsYWRvLGVkdSxlbWJhaXhhZGEsbWlsLG5ldCxvcmcscHJpbmNpcGUsc2FvdG9tZSxzdG9yZTxzdSxzdj5jb20sZWR1LGdvYixvcmcscmVkPHN4PmdvdjxzeT5lZHUsZ292LG5ldCxtaWwsY29tLG9yZzxzej5jbyxhYyxvcmc8dGMsdGQsdGVsLHRmLHRnLHRoPmFjLGNvLGdvLGluLG1pLG5ldCxvcjx0aj5hYyxiaXosY28sY29tLGVkdSxnbyxnb3YsaW50LG1pbCxuYW1lLG5ldCxuaWMsb3JnLHRlc3Qsd2ViPHRrLHRsPmdvdjx0bT5jb20sY28sb3JnLG5ldCxub20sZ292LG1pbCxlZHU8dG4+Y29tLGVucyxmaW4sZ292LGluZCxpbmZvLGludGwsbWluY29tLG5hdCxuZXQsb3JnLHBlcnNvLHRvdXJpc208dG8+Y29tLGdvdixuZXQsb3JnLGVkdSxtaWw8dHI+YXYsYmJzLGJlbCxiaXosY29tLGRyLGVkdSxnZW4sZ292LGluZm8sbWlsLGsxMixrZXAsbmFtZSxuZXQsb3JnLHBvbCx0ZWwsdHNrLHR2LHdlYixuYz5nb3Y8PHR0PmNvLGNvbSxvcmcsbmV0LGJpeixpbmZvLHBybyxpbnQsY29vcCxqb2JzLG1vYmksdHJhdmVsLG11c2V1bSxhZXJvLG5hbWUsZ292LGVkdTx0dix0dz5lZHUsZ292LG1pbCxjb20sbmV0LG9yZyxpZHYsZ2FtZSxlYml6LGNsdWIseG4tLXpmMGFvNjRhLHhuLS11YzBhdHYseG4tLWN6cncyOGI8dHo+YWMsY28sZ28saG90ZWwsaW5mbyxtZSxtaWwsbW9iaSxuZSxvcixzYyx0djx1YT5jb20sZWR1LGdvdixpbixuZXQsb3JnLGNoZXJrYXNzeSxjaGVya2FzeSxjaGVybmlnb3YsY2hlcm5paGl2LGNoZXJuaXZ0c2ksY2hlcm5vdnRzeSxjayxjbixjcixjcmltZWEsY3YsZG4sZG5lcHJvcGV0cm92c2ssZG5pcHJvcGV0cm92c2ssZG9uZXRzayxkcCxpZixpdmFuby1mcmFua2l2c2ssa2gsa2hhcmtpdixraGFya292LGtoZXJzb24sa2htZWxuaXRza2l5LGtobWVsbnl0c2t5aSxraWV2LGtpcm92b2dyYWQsa20sa3Isa3JvcHl2bnl0c2t5aSxrcnltLGtzLGt2LGt5aXYsbGcsbHQsbHVnYW5zayxsdWhhbnNrLGx1dHNrLGx2LGx2aXYsbWssbXlrb2xhaXYsbmlrb2xhZXYsb2Qsb2Rlc2Esb2Rlc3NhLHBsLHBvbHRhdmEscml2bmUscm92bm8scnYsc2Isc2ViYXN0b3BvbCxzZXZhc3RvcG9sLHNtLHN1bXksdGUsdGVybm9waWwsdXosdXpoZ29yb2QsdXpoaG9yb2QsdmlubmljYSx2aW5ueXRzaWEsdm4sdm9seW4seWFsdGEsemFrYXJwYXR0aWEsemFwb3Jpemh6aGUsemFwb3Jpemh6aGlhLHpoaXRvbWlyLHpoeXRvbXlyLHpwLHp0PHVnPmNvLG9yLGFjLHNjLGdvLG5lLGNvbSxvcmc8dWs+YWMsY28sZ292LGx0ZCxtZSxuZXQsbmhzLG9yZyxwbGMscG9saWNlLHNjaD4qPDx1cz5kbmksZmVkLGlzYSxraWRzLG5zbixhaz5rMTIsY2MsbGliPGFsPmsxMixjYyxsaWI8YXI+azEyLGNjLGxpYjxhcz5rMTIsY2MsbGliPGF6PmsxMixjYyxsaWI8Y2E+azEyLGNjLGxpYjxjbz5rMTIsY2MsbGliPGN0PmsxMixjYyxsaWI8ZGM+azEyLGNjLGxpYjxkZT5jYzxmbD5rMTIsY2MsbGliPGdhPmsxMixjYyxsaWI8Z3U+azEyLGNjLGxpYjxoaT5jYyxsaWI8aWE+azEyLGNjLGxpYjxpZD5rMTIsY2MsbGliPGlsPmsxMixjYyxsaWI8aW4+azEyLGNjLGxpYjxrcz5rMTIsY2MsbGliPGt5PmsxMixjYyxsaWI8bGE+azEyLGNjLGxpYjxtYT5rMTI+cHZ0LGNodHIscGFyb2NoPGNjLGxpYjxtZD5rMTIsY2MsbGliPG1lPmsxMixjYyxsaWI8bWk+azEyLGNjLGxpYixhbm4tYXJib3IsY29nLGRzdCxlYXRvbixnZW4sbXVzLHRlYyx3YXNodGVuYXc8bW4+azEyLGNjLGxpYjxtbz5rMTIsY2MsbGliPG1zPmsxMixjYyxsaWI8bXQ+azEyLGNjLGxpYjxuYz5rMTIsY2MsbGliPG5kPmNjLGxpYjxuZT5rMTIsY2MsbGliPG5oPmsxMixjYyxsaWI8bmo+azEyLGNjLGxpYjxubT5rMTIsY2MsbGliPG52PmsxMixjYyxsaWI8bnk+azEyLGNjLGxpYjxvaD5rMTIsY2MsbGliPG9rPmsxMixjYyxsaWI8b3I+azEyLGNjLGxpYjxwYT5rMTIsY2MsbGliPHByPmsxMixjYyxsaWI8cmk+Y2MsbGliPHNjPmsxMixjYyxsaWI8c2Q+Y2MsbGliPHRuPmsxMixjYyxsaWI8dHg+azEyLGNjLGxpYjx1dD5rMTIsY2MsbGliPHZpPmsxMixjYyxsaWI8dnQ+azEyLGNjLGxpYjx2YT5rMTIsY2MsbGliPHdhPmsxMixjYyxsaWI8d2k+azEyLGNjLGxpYjx3dj5jYzx3eT5rMTIsY2MsbGliPDx1eT5jb20sZWR1LGd1YixtaWwsbmV0LG9yZzx1ej5jbyxjb20sbmV0LG9yZzx2YSx2Yz5jb20sbmV0LG9yZyxnb3YsbWlsLGVkdTx2ZT5hcnRzLGJpYixjbyxjb20sZTEyLGVkdSxmaXJtLGdvYixnb3YsaW5mbyxpbnQsbWlsLG5ldCxub20sb3JnLHJhcixyZWMsc3RvcmUsdGVjLHdlYjx2Zyx2aT5jbyxjb20sazEyLG5ldCxvcmc8dm4+YWMsYWksYml6LGNvbSxlZHUsZ292LGhlYWx0aCxpZCxpbmZvLGludCxpbyxuYW1lLG5ldCxvcmcscHJvLGFuZ2lhbmcsYmFjZ2lhbmcsYmFja2FuLGJhY2xpZXUsYmFjbmluaCxiYXJpYS12dW5ndGF1LGJlbnRyZSxiaW5oZGluaCxiaW5oZHVvbmcsYmluaHBodW9jLGJpbmh0aHVhbixjYW1hdSxjYW50aG8sY2FvYmFuZyxkYWtsYWssZGFrbm9uZyxkYW5hbmcsZGllbmJpZW4sZG9uZ25haSxkb25ndGhhcCxnaWFsYWksaGFnaWFuZyxoYWlkdW9uZyxoYWlwaG9uZyxoYW5hbSxoYW5vaSxoYXRpbmgsaGF1Z2lhbmcsaG9hYmluaCxodW5neWVuLGtoYW5oaG9hLGtpZW5naWFuZyxrb250dW0sbGFpY2hhdSxsYW1kb25nLGxhbmdzb24sbGFvY2FpLGxvbmdhbixuYW1kaW5oLG5naGVhbixuaW5oYmluaCxuaW5odGh1YW4scGh1dGhvLHBodXllbixxdWFuZ2JpbmgscXVhbmduYW0scXVhbmduZ2FpLHF1YW5nbmluaCxxdWFuZ3RyaSxzb2N0cmFuZyxzb25sYSx0YXluaW5oLHRoYWliaW5oLHRoYWluZ3V5ZW4sdGhhbmhob2EsdGhhbmhwaG9ob2NoaW1pbmgsdGh1YXRoaWVuaHVlLHRpZW5naWFuZyx0cmF2aW5oLHR1eWVucXVhbmcsdmluaGxvbmcsdmluaHBodWMseWVuYmFpPHZ1PmNvbSxlZHUsbmV0LG9yZzx3Zix3cz5jb20sbmV0LG9yZyxnb3YsZWR1PHl0LHhuLS1tZ2JhYW03YThoLHhuLS15OWEzYXEseG4tLTU0YjdmdGEwY2MseG4tLTkwYWUseG4tLW1nYmNwcTZncGExYSx4bi0tOTBhaXMseG4tLWZpcXM4cyx4bi0tZmlxejlzLHhuLS1sZ2JiYXQxYWQ4aix4bi0td2diaDFjLHhuLS1lMWE0Yyx4bi0tcXhhNmEseG4tLW1nYmFoMWEzaGprcmQseG4tLW5vZGUseG4tLXF4YW0seG4tLWo2dzE5M2c+eG4tLTU1cXg1ZCx4bi0td2N2czIyZCx4bi0tbXh0cTFtLHhuLS1nbXF3NWEseG4tLW9kMGFsZyx4bi0tdWMwYXR2PHhuLS0yc2NyajljLHhuLS0zaGNyajljLHhuLS00NWJyNWN5bCx4bi0taDJicmVnM2V2ZSx4bi0taDJicmo5YzhjLHhuLS1tZ2JndTgyYSx4bi0tcnZjMWUwYW0zZSx4bi0taDJicmo5Yyx4bi0tbWdiYmgxYSx4bi0tbWdiYmgxYTcxZSx4bi0tZnBjcmo5YzNkLHhuLS1nZWNyajljLHhuLS1zOWJyajljLHhuLS00NWJyajljLHhuLS14a2MyZGwzYTVlZTBoLHhuLS1tZ2JhM2E0ZjE2YSx4bi0tbWdiYTNhNGZyYSx4bi0tbWdidHgyYix4bi0tbWdiYXloN2dwYSx4bi0tM2UwYjcwN2UseG4tLTgwYW8yMWEseG4tLXE3Y2U2YSx4bi0tZnpjMmM5ZTJjLHhuLS14a2MyYWwzaHllMmEseG4tLW1nYmMwYTlhemNnLHhuLS1kMWFsZix4bi0tbDFhY2MseG4tLW1peDg5MWYseG4tLW1peDA4MmYseG4tLW1nYng0Y2QwYWIseG4tLW1nYjlhd2JmLHhuLS1tZ2JhaTlhemdxcDZqLHhuLS1tZ2JhaTlhNWV2YTAwYix4bi0teWdiaTJhbW14LHhuLS05MGEzYWM+eG4tLW8xYWMseG4tLWMxYXZnLHhuLS05MGF6aCx4bi0tZDFhdCx4bi0tbzFhY2gseG4tLTgwYXU8eG4tLXAxYWkseG4tLXdnYmw2YSx4bi0tbWdiZXJwNGE1ZDRhcix4bi0tbWdiZXJwNGE1ZDRhODdnLHhuLS1tZ2JxbHk3YzBhNjdmYmMseG4tLW1nYnFseTdjdmFmcix4bi0tbWdicGwyZmgseG4tLXlmcm80aTY3byx4bi0tY2xjaGMwZWEwYjJnMmE5Z2NkLHhuLS1vZ2JwZjhmbCx4bi0tbWdidGY4ZmwseG4tLW8zY3c0aD54bi0tMTJjMWZlMGJyLHhuLS0xMmNvMGMzYjRldmEseG4tLWgzY3V6azFkaSx4bi0tbzNjeXgyYSx4bi0tbTNjaDBqM2EseG4tLTEyY2ZpOGl4YjhsPHhuLS1wZ2JzMGRoLHhuLS1rcHJ5NTdkLHhuLS1rcHJ3MTNkLHhuLS1ubngzODhhLHhuLS1qMWFtaCx4bi0tbWdiMmRkZXMseHh4LHllPmNvbSxlZHUsZ292LG5ldCxtaWwsb3JnPHphPmFjLGFncmljLGFsdCxjbyxlZHUsZ292LGdyb25kYXIsbGF3LG1pbCxuZXQsbmdvLG5pYyxuaXMsbm9tLG9yZyxzY2hvb2wsdG0sd2ViPHptPmFjLGJpeixjbyxjb20sZWR1LGdvdixpbmZvLG1pbCxuZXQsb3JnLHNjaDx6dz5hYyxjbyxnb3YsbWlsLG9yZzxhYWEsYWFycCxhYmIsYWJib3R0LGFiYnZpZSxhYmMsYWJsZSxhYm9nYWRvLGFidWRoYWJpLGFjYWRlbXksYWNjZW50dXJlLGFjY291bnRhbnQsYWNjb3VudGFudHMsYWNvLGFjdG9yLGFkcyxhZHVsdCxhZWcsYWV0bmEsYWZsLGFmcmljYSxhZ2FraGFuLGFnZW5jeSxhaWcsYWlyYnVzLGFpcmZvcmNlLGFpcnRlbCxha2RuLGFsaWJhYmEsYWxpcGF5LGFsbGZpbmFueixhbGxzdGF0ZSxhbGx5LGFsc2FjZSxhbHN0b20sYW1hem9uLGFtZXJpY2FuZXhwcmVzcyxhbWVyaWNhbmZhbWlseSxhbWV4LGFtZmFtLGFtaWNhLGFtc3RlcmRhbSxhbmFseXRpY3MsYW5kcm9pZCxhbnF1YW4sYW56LGFvbCxhcGFydG1lbnRzLGFwcCxhcHBsZSxhcXVhcmVsbGUsYXJhYixhcmFtY28sYXJjaGksYXJteSxhcnQsYXJ0ZSxhc2RhLGFzc29jaWF0ZXMsYXRobGV0YSxhdHRvcm5leSxhdWN0aW9uLGF1ZGksYXVkaWJsZSxhdWRpbyxhdXNwb3N0LGF1dGhvcixhdXRvLGF1dG9zLGF3cyxheGEsYXp1cmUsYmFieSxiYWlkdSxiYW5hbWV4LGJhbmQsYmFuayxiYXIsYmFyY2Vsb25hLGJhcmNsYXljYXJkLGJhcmNsYXlzLGJhcmVmb290LGJhcmdhaW5zLGJhc2ViYWxsLGJhc2tldGJhbGwsYmF1aGF1cyxiYXllcm4sYmJjLGJidCxiYnZhLGJjZyxiY24sYmVhdHMsYmVhdXR5LGJlZXIsYmVudGxleSxiZXJsaW4sYmVzdCxiZXN0YnV5LGJldCxiaGFydGksYmlibGUsYmlkLGJpa2UsYmluZyxiaW5nbyxiaW8sYmxhY2ssYmxhY2tmcmlkYXksYmxvY2tidXN0ZXIsYmxvZyxibG9vbWJlcmcsYmx1ZSxibXMsYm13LGJucHBhcmliYXMsYm9hdHMsYm9laHJpbmdlcixib2ZhLGJvbSxib25kLGJvbyxib29rLGJvb2tpbmcsYm9zY2gsYm9zdGlrLGJvc3Rvbixib3QsYm91dGlxdWUsYm94LGJyYWRlc2NvLGJyaWRnZXN0b25lLGJyb2Fkd2F5LGJyb2tlcixicm90aGVyLGJydXNzZWxzLGJ1aWxkLGJ1aWxkZXJzLGJ1c2luZXNzLGJ1eSxidXp6LGJ6aCxjYWIsY2FmZSxjYWwsY2FsbCxjYWx2aW5rbGVpbixjYW0sY2FtZXJhLGNhbXAsY2Fub24sY2FwZXRvd24sY2FwaXRhbCxjYXBpdGFsb25lLGNhcixjYXJhdmFuLGNhcmRzLGNhcmUsY2FyZWVyLGNhcmVlcnMsY2FycyxjYXNhLGNhc2UsY2FzaCxjYXNpbm8sY2F0ZXJpbmcsY2F0aG9saWMsY2JhLGNibixjYnJlLGNlbnRlcixjZW8sY2VybixjZmEsY2ZkLGNoYW5lbCxjaGFubmVsLGNoYXJpdHksY2hhc2UsY2hhdCxjaGVhcCxjaGludGFpLGNocmlzdG1hcyxjaHJvbWUsY2h1cmNoLGNpcHJpYW5pLGNpcmNsZSxjaXNjbyxjaXRhZGVsLGNpdGksY2l0aWMsY2l0eSxjbGFpbXMsY2xlYW5pbmcsY2xpY2ssY2xpbmljLGNsaW5pcXVlLGNsb3RoaW5nLGNsb3VkLGNsdWIsY2x1Ym1lZCxjb2FjaCxjb2Rlcyxjb2ZmZWUsY29sbGVnZSxjb2xvZ25lLGNvbW1iYW5rLGNvbW11bml0eSxjb21wYW55LGNvbXBhcmUsY29tcHV0ZXIsY29tc2VjLGNvbmRvcyxjb25zdHJ1Y3Rpb24sY29uc3VsdGluZyxjb250YWN0LGNvbnRyYWN0b3JzLGNvb2tpbmcsY29vbCxjb3JzaWNhLGNvdW50cnksY291cG9uLGNvdXBvbnMsY291cnNlcyxjcGEsY3JlZGl0LGNyZWRpdGNhcmQsY3JlZGl0dW5pb24sY3JpY2tldCxjcm93bixjcnMsY3J1aXNlLGNydWlzZXMsY3Vpc2luZWxsYSxjeW1ydSxjeW91LGRhYnVyLGRhZCxkYW5jZSxkYXRhLGRhdGUsZGF0aW5nLGRhdHN1bixkYXksZGNsayxkZHMsZGVhbCxkZWFsZXIsZGVhbHMsZGVncmVlLGRlbGl2ZXJ5LGRlbGwsZGVsb2l0dGUsZGVsdGEsZGVtb2NyYXQsZGVudGFsLGRlbnRpc3QsZGVzaSxkZXNpZ24sZGV2LGRobCxkaWFtb25kcyxkaWV0LGRpZ2l0YWwsZGlyZWN0LGRpcmVjdG9yeSxkaXNjb3VudCxkaXNjb3ZlcixkaXNoLGRpeSxkbnAsZG9jcyxkb2N0b3IsZG9nLGRvbWFpbnMsZG90LGRvd25sb2FkLGRyaXZlLGR0dixkdWJhaSxkdW5sb3AsZHVwb250LGR1cmJhbixkdmFnLGR2cixlYXJ0aCxlYXQsZWNvLGVkZWthLGVkdWNhdGlvbixlbWFpbCxlbWVyY2ssZW5lcmd5LGVuZ2luZWVyLGVuZ2luZWVyaW5nLGVudGVycHJpc2VzLGVwc29uLGVxdWlwbWVudCxlcmljc3Nvbixlcm5pLGVzcSxlc3RhdGUsZXVyb3Zpc2lvbixldXMsZXZlbnRzLGV4Y2hhbmdlLGV4cGVydCxleHBvc2VkLGV4cHJlc3MsZXh0cmFzcGFjZSxmYWdlLGZhaWwsZmFpcndpbmRzLGZhaXRoLGZhbWlseSxmYW4sZmFucyxmYXJtLGZhcm1lcnMsZmFzaGlvbixmYXN0LGZlZGV4LGZlZWRiYWNrLGZlcnJhcmksZmVycmVybyxmaWRlbGl0eSxmaWRvLGZpbG0sZmluYWwsZmluYW5jZSxmaW5hbmNpYWwsZmlyZSxmaXJlc3RvbmUsZmlybWRhbGUsZmlzaCxmaXNoaW5nLGZpdCxmaXRuZXNzLGZsaWNrcixmbGlnaHRzLGZsaXIsZmxvcmlzdCxmbG93ZXJzLGZseSxmb28sZm9vZCxmb290YmFsbCxmb3JkLGZvcmV4LGZvcnNhbGUsZm9ydW0sZm91bmRhdGlvbixmb3gsZnJlZSxmcmVzZW5pdXMsZnJsLGZyb2dhbnMsZnJvbnRpZXIsZnRyLGZ1aml0c3UsZnVuLGZ1bmQsZnVybml0dXJlLGZ1dGJvbCxmeWksZ2FsLGdhbGxlcnksZ2FsbG8sZ2FsbHVwLGdhbWUsZ2FtZXMsZ2FwLGdhcmRlbixnYXksZ2JpeixnZG4sZ2VhLGdlbnQsZ2VudGluZyxnZW9yZ2UsZ2dlZSxnaWZ0LGdpZnRzLGdpdmVzLGdpdmluZyxnbGFzcyxnbGUsZ2xvYmFsLGdsb2JvLGdtYWlsLGdtYmgsZ21vLGdteCxnb2RhZGR5LGdvbGQsZ29sZHBvaW50LGdvbGYsZ29vLGdvb2R5ZWFyLGdvb2csZ29vZ2xlLGdvcCxnb3QsZ3JhaW5nZXIsZ3JhcGhpY3MsZ3JhdGlzLGdyZWVuLGdyaXBlLGdyb2NlcnksZ3JvdXAsZ3VjY2ksZ3VnZSxndWlkZSxndWl0YXJzLGd1cnUsaGFpcixoYW1idXJnLGhhbmdvdXQsaGF1cyxoYm8saGRmYyxoZGZjYmFuayxoZWFsdGgsaGVhbHRoY2FyZSxoZWxwLGhlbHNpbmtpLGhlcmUsaGVybWVzLGhpcGhvcCxoaXNhbWl0c3UsaGl0YWNoaSxoaXYsaGt0LGhvY2tleSxob2xkaW5ncyxob2xpZGF5LGhvbWVkZXBvdCxob21lZ29vZHMsaG9tZXMsaG9tZXNlbnNlLGhvbmRhLGhvcnNlLGhvc3BpdGFsLGhvc3QsaG9zdGluZyxob3QsaG90ZWxzLGhvdG1haWwsaG91c2UsaG93LGhzYmMsaHVnaGVzLGh5YXR0LGh5dW5kYWksaWJtLGljYmMsaWNlLGljdSxpZWVlLGlmbSxpa2FubyxpbWFtYXQsaW1kYixpbW1vLGltbW9iaWxpZW4saW5jLGluZHVzdHJpZXMsaW5maW5pdGksaW5nLGluayxpbnN0aXR1dGUsaW5zdXJhbmNlLGluc3VyZSxpbnRlcm5hdGlvbmFsLGludHVpdCxpbnZlc3RtZW50cyxpcGlyYW5nYSxpcmlzaCxpc21haWxpLGlzdCxpc3RhbmJ1bCxpdGF1LGl0dixqYWd1YXIsamF2YSxqY2IsamVlcCxqZXR6dCxqZXdlbHJ5LGppbyxqbGwsam1wLGpuaixqb2J1cmcsam90LGpveSxqcG1vcmdhbixqcHJzLGp1ZWdvcyxqdW5pcGVyLGthdWZlbixrZGRpLGtlcnJ5aG90ZWxzLGtlcnJ5bG9naXN0aWNzLGtlcnJ5cHJvcGVydGllcyxrZmgsa2lhLGtpZHMsa2ltLGtpbmRsZSxraXRjaGVuLGtpd2ksa29lbG4sa29tYXRzdSxrb3NoZXIsa3BtZyxrcG4sa3JkLGtyZWQsa3Vva2dyb3VwLGt5b3RvLGxhY2FpeGEsbGFtYm9yZ2hpbmksbGFtZXIsbGFuY2FzdGVyLGxhbmQsbGFuZHJvdmVyLGxhbnhlc3MsbGFzYWxsZSxsYXQsbGF0aW5vLGxhdHJvYmUsbGF3LGxhd3llcixsZHMsbGVhc2UsbGVjbGVyYyxsZWZyYWssbGVnYWwsbGVnbyxsZXh1cyxsZ2J0LGxpZGwsbGlmZSxsaWZlaW5zdXJhbmNlLGxpZmVzdHlsZSxsaWdodGluZyxsaWtlLGxpbGx5LGxpbWl0ZWQsbGltbyxsaW5jb2xuLGxpbmssbGlwc3ksbGl2ZSxsaXZpbmcsbGxjLGxscCxsb2FuLGxvYW5zLGxvY2tlcixsb2N1cyxsb2wsbG9uZG9uLGxvdHRlLGxvdHRvLGxvdmUsbHBsLGxwbGZpbmFuY2lhbCxsdGQsbHRkYSxsdW5kYmVjayxsdXhlLGx1eHVyeSxtYWRyaWQsbWFpZixtYWlzb24sbWFrZXVwLG1hbixtYW5hZ2VtZW50LG1hbmdvLG1hcCxtYXJrZXQsbWFya2V0aW5nLG1hcmtldHMsbWFycmlvdHQsbWFyc2hhbGxzLG1hdHRlbCxtYmEsbWNraW5zZXksbWVkLG1lZGlhLG1lZXQsbWVsYm91cm5lLG1lbWUsbWVtb3JpYWwsbWVuLG1lbnUsbWVyY2ttc2QsbWlhbWksbWljcm9zb2Z0LG1pbmksbWludCxtaXQsbWl0c3ViaXNoaSxtbGIsbWxzLG1tYSxtb2JpbGUsbW9kYSxtb2UsbW9pLG1vbSxtb25hc2gsbW9uZXksbW9uc3Rlcixtb3Jtb24sbW9ydGdhZ2UsbW9zY293LG1vdG8sbW90b3JjeWNsZXMsbW92LG1vdmllLG1zZCxtdG4sbXRyLG11c2ljLG5hYixuYWdveWEsbmF2eSxuYmEsbmVjLG5ldGJhbmssbmV0ZmxpeCxuZXR3b3JrLG5ldXN0YXIsbmV3LG5ld3MsbmV4dCxuZXh0ZGlyZWN0LG5leHVzLG5mbCxuZ28sbmhrLG5pY28sbmlrZSxuaWtvbixuaW5qYSxuaXNzYW4sbmlzc2F5LG5va2lhLG5vcnRvbixub3csbm93cnV6LG5vd3R2LG5yYSxucncsbnR0LG55YyxvYmksb2JzZXJ2ZXIsb2ZmaWNlLG9raW5hd2Esb2xheWFuLG9sYXlhbmdyb3VwLG9sbG8sb21lZ2Esb25lLG9uZyxvbmwsb25saW5lLG9vbyxvcGVuLG9yYWNsZSxvcmFuZ2Usb3JnYW5pYyxvcmlnaW5zLG9zYWthLG90c3VrYSxvdHQsb3ZoLHBhZ2UscGFuYXNvbmljLHBhcmlzLHBhcnMscGFydG5lcnMscGFydHMscGFydHkscGF5LHBjY3cscGV0LHBmaXplcixwaGFybWFjeSxwaGQscGhpbGlwcyxwaG9uZSxwaG90byxwaG90b2dyYXBoeSxwaG90b3MscGh5c2lvLHBpY3MscGljdGV0LHBpY3R1cmVzLHBpZCxwaW4scGluZyxwaW5rLHBpb25lZXIscGl6emEscGxhY2UscGxheSxwbGF5c3RhdGlvbixwbHVtYmluZyxwbHVzLHBuYyxwb2hsLHBva2VyLHBvbGl0aWUscG9ybixwcmFtZXJpY2EscHJheGkscHJlc3MscHJpbWUscHJvZCxwcm9kdWN0aW9ucyxwcm9mLHByb2dyZXNzaXZlLHByb21vLHByb3BlcnRpZXMscHJvcGVydHkscHJvdGVjdGlvbixwcnUscHJ1ZGVudGlhbCxwdWIscHdjLHFwb24scXVlYmVjLHF1ZXN0LHJhY2luZyxyYWRpbyxyZWFkLHJlYWxlc3RhdGUscmVhbHRvcixyZWFsdHkscmVjaXBlcyxyZWQscmVkc3RvbmUscmVkdW1icmVsbGEscmVoYWIscmVpc2UscmVpc2VuLHJlaXQscmVsaWFuY2UscmVuLHJlbnQscmVudGFscyxyZXBhaXIscmVwb3J0LHJlcHVibGljYW4scmVzdCxyZXN0YXVyYW50LHJldmlldyxyZXZpZXdzLHJleHJvdGgscmljaCxyaWNoYXJkbGkscmljb2gscmlsLHJpbyxyaXAscm9ja3Mscm9kZW8scm9nZXJzLHJvb20scnN2cCxydWdieSxydWhyLHJ1bixyd2Uscnl1a3l1LHNhYXJsYW5kLHNhZmUsc2FmZXR5LHNha3VyYSxzYWxlLHNhbG9uLHNhbXNjbHViLHNhbXN1bmcsc2FuZHZpayxzYW5kdmlrY29yb21hbnQsc2Fub2ZpLHNhcCxzYXJsLHNhcyxzYXZlLHNheG8sc2JpLHNicyxzY2Isc2NoYWVmZmxlcixzY2htaWR0LHNjaG9sYXJzaGlwcyxzY2hvb2wsc2NodWxlLHNjaHdhcnosc2NpZW5jZSxzY290LHNlYXJjaCxzZWF0LHNlY3VyZSxzZWN1cml0eSxzZWVrLHNlbGVjdCxzZW5lcixzZXJ2aWNlcyxzZXZlbixzZXcsc2V4LHNleHksc2ZyLHNoYW5ncmlsYSxzaGFycCxzaGVsbCxzaGlhLHNoaWtzaGEsc2hvZXMsc2hvcCxzaG9wcGluZyxzaG91amksc2hvdyxzaWxrLHNpbmEsc2luZ2xlcyxzaXRlLHNraSxza2luLHNreSxza3lwZSxzbGluZyxzbWFydCxzbWlsZSxzbmNmLHNvY2Nlcixzb2NpYWwsc29mdGJhbmssc29mdHdhcmUsc29odSxzb2xhcixzb2x1dGlvbnMsc29uZyxzb255LHNveSxzcGEsc3BhY2Usc3BvcnQsc3BvdCxzcmwsc3RhZGEsc3RhcGxlcyxzdGFyLHN0YXRlYmFuayxzdGF0ZWZhcm0sc3RjLHN0Y2dyb3VwLHN0b2NraG9sbSxzdG9yYWdlLHN0b3JlLHN0cmVhbSxzdHVkaW8sc3R1ZHksc3R5bGUsc3Vja3Msc3VwcGxpZXMsc3VwcGx5LHN1cHBvcnQsc3VyZixzdXJnZXJ5LHN1enVraSxzd2F0Y2gsc3dpc3Msc3lkbmV5LHN5c3RlbXMsdGFiLHRhaXBlaSx0YWxrLHRhb2Jhbyx0YXJnZXQsdGF0YW1vdG9ycyx0YXRhcix0YXR0b28sdGF4LHRheGksdGNpLHRkayx0ZWFtLHRlY2gsdGVjaG5vbG9neSx0ZW1hc2VrLHRlbm5pcyx0ZXZhLHRoZCx0aGVhdGVyLHRoZWF0cmUsdGlhYSx0aWNrZXRzLHRpZW5kYSx0aXBzLHRpcmVzLHRpcm9sLHRqbWF4eCx0angsdGttYXh4LHRtYWxsLHRvZGF5LHRva3lvLHRvb2xzLHRvcCx0b3JheSx0b3NoaWJhLHRvdGFsLHRvdXJzLHRvd24sdG95b3RhLHRveXMsdHJhZGUsdHJhZGluZyx0cmFpbmluZyx0cmF2ZWwsdHJhdmVsZXJzLHRyYXZlbGVyc2luc3VyYW5jZSx0cnVzdCx0cnYsdHViZSx0dWksdHVuZXMsdHVzaHUsdHZzLHViYW5rLHVicyx1bmljb20sdW5pdmVyc2l0eSx1bm8sdW9sLHVwcyx2YWNhdGlvbnMsdmFuYSx2YW5ndWFyZCx2ZWdhcyx2ZW50dXJlcyx2ZXJpc2lnbix2ZXJzaWNoZXJ1bmcsdmV0LHZpYWplcyx2aWRlbyx2aWcsdmlraW5nLHZpbGxhcyx2aW4sdmlwLHZpcmdpbix2aXNhLHZpc2lvbix2aXZhLHZpdm8sdmxhYW5kZXJlbix2b2RrYSx2b2x2byx2b3RlLHZvdGluZyx2b3RvLHZveWFnZSx3YWxlcyx3YWxtYXJ0LHdhbHRlcix3YW5nLHdhbmdnb3Usd2F0Y2gsd2F0Y2hlcyx3ZWF0aGVyLHdlYXRoZXJjaGFubmVsLHdlYmNhbSx3ZWJlcix3ZWJzaXRlLHdlZCx3ZWRkaW5nLHdlaWJvLHdlaXIsd2hvc3dobyx3aWVuLHdpa2ksd2lsbGlhbWhpbGwsd2luLHdpbmRvd3Msd2luZSx3aW5uZXJzLHdtZSx3b2x0ZXJza2x1d2VyLHdvb2RzaWRlLHdvcmssd29ya3Msd29ybGQsd293LHd0Yyx3dGYseGJveCx4ZXJveCx4aWh1YW4seGluLHhuLS0xMWI0YzNkLHhuLS0xY2syZTFiLHhuLS0xcXF3MjNhLHhuLS0zMHJyN3kseG4tLTNic3QwMG0seG4tLTNkczQ0M2cseG4tLTNweHU4ayx4bi0tNDJjMmQ5YSx4bi0tNDVxMTFjLHhuLS00Z2JyaW0seG4tLTU1cXc0MmcseG4tLTU1cXg1ZCx4bi0tNXN1MzRqOTM2YmdzZyx4bi0tNXR6bTVnLHhuLS02ZnJ6ODJnLHhuLS02cXE5ODZiM3hsLHhuLS04MGFkeGhrcyx4bi0tODBhcWVjZHIxYSx4bi0tODBhc2VoZGIseG4tLTgwYXN3Zyx4bi0tOHkwYTA2M2EseG4tLTlkYnEyYSx4bi0tOWV0NTJ1LHhuLS05a3J0MDBhLHhuLS1iNHc2MDVmZXJkLHhuLS1iY2sxYjlhNWRyZTRjLHhuLS1jMWF2Zyx4bi0tYzJicjdnLHhuLS1jY2syYjNiLHhuLS1jY2t3Y3hldGQseG4tLWNnNGJraSx4bi0tY3pyNjk0Yix4bi0tY3pyczB0LHhuLS1jenJ1MmQseG4tLWQxYWNqM2IseG4tLWVja3ZkdGM5ZCx4bi0tZWZ2eTg4aCx4bi0tZmN0NDI5ayx4bi0tZmhiZWkseG4tLWZpcTIyOGM1aHMseG4tLWZpcTY0Yix4bi0tZmpxNzIwYSx4bi0tZmx3MzUxZSx4bi0tZnp5czhkNjl1dmdtLHhuLS1nMnh4NDhjLHhuLS1nY2tyM2YwZix4bi0tZ2szYXQxZSx4bi0taHh0ODE0ZSx4bi0taTFiNmIxYTZhMmUseG4tLWltcjUxM24seG4tLWlvMGE3aSx4bi0tajFhZWYseG4tLWpscTQ4MG4ycmcseG4tLWp2cjE4OW0seG4tLWtjcng3N2QxeDRhLHhuLS1rcHV0M2kseG4tLW1nYmEzYTNlanQseG4tLW1nYmE3YzBiYm4wYSx4bi0tbWdiYWIyYmQseG4tLW1nYmNhN2R6ZG8seG4tLW1nYmk0ZWNleHAseG4tLW1nYnQzZGhkLHhuLS1tazFidTQ0Yyx4bi0tbXh0cTFtLHhuLS1uZ2JjNWF6ZCx4bi0tbmdiZTllMGEseG4tLW5nYnJ4LHhuLS1ucXY3Zix4bi0tbnF2N2ZzMDBlbWEseG4tLW55cXkyNmEseG4tLW90dTc5NmQseG4tLXAxYWNmLHhuLS1wc3N5MnUseG4tLXE5anliNGMseG4tLXFja2ExcG1jLHhuLS1yaHF2OTZnLHhuLS1yb3Z1ODhiLHhuLS1zZXM1NTRnLHhuLS10NjBiNTZhLHhuLS10Y2t3ZSx4bi0tdGlxNDl4cXlqLHhuLS11bnVwNHkseG4tLXZlcm1nZW5zYmVyYXRlci1jdGIseG4tLXZlcm1nZW5zYmVyYXR1bmctcHdiLHhuLS12aHF1dix4bi0tdnVxODYxYix4bi0tdzRyODVlbDhmaHU1ZG5yYSx4bi0tdzRyczQwbCx4bi0teGhxNTIxYix4bi0temZyMTY0Yix4eXoseWFjaHRzLHlhaG9vLHlhbWF4dW4seWFuZGV4LHlvZG9iYXNoaSx5b2dhLHlva29oYW1hLHlvdSx5b3V0dWJlLHl1bix6YXBwb3MsemFyYSx6ZXJvLHppcCx6b25lLHp1ZXJpY2hcIjsiLCJpbXBvcnQgKiBhcyBjaGFyYWN0ZXJzIGZyb20gXCIuL2NoYXJhY3RlcnMuanNcIjtcbmV4cG9ydCBjb25zdCBsb29rVXBUbGRzSW5UcmllID0gKGxhYmVscywgdHJpZSkgPT4ge1xuICAgIGNvbnN0IGxhYmVsc1RvQ2hlY2sgPSBsYWJlbHMuc2xpY2UoKTtcbiAgICBjb25zdCB0bGRzID0gW107XG4gICAgbGV0IG5vZGUgPSB0cmllO1xuICAgIHdoaWxlIChsYWJlbHNUb0NoZWNrLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBjb25zdCBsYWJlbCA9IGxhYmVsc1RvQ2hlY2sucG9wKCk7XG4gICAgICAgIGNvbnN0IGxhYmVsTG93ZXJDYXNlID0gbGFiZWwudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4uaGFzKGNoYXJhY3RlcnMuV0lMRENBUkQpKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5jaGlsZHJlbi5oYXMoY2hhcmFjdGVycy5FWENFUFRJT04gKyBsYWJlbExvd2VyQ2FzZSkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5vZGUgPSBub2RlLmNoaWxkcmVuLmdldChjaGFyYWN0ZXJzLldJTERDQVJEKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChub2RlLmNoaWxkcmVuLmhhcyhsYWJlbExvd2VyQ2FzZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub2RlID0gbm9kZS5jaGlsZHJlbi5nZXQobGFiZWxMb3dlckNhc2UpO1xuICAgICAgICB9XG4gICAgICAgIHRsZHMudW5zaGlmdChsYWJlbCk7XG4gICAgfVxuICAgIHJldHVybiB0bGRzO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvb2stdXAuanMubWFwIiwiLy8gVVAsIFNBTUUsIERPV04sIFJFU0VUIHNob3VsZCBub3QgYmUgc3BlY2lhbCByZWdleCBjaGFyYWN0ZXJzIGluIGEgY2hhcmFjdGVyIGNsYXNzLlxuZXhwb3J0IGNvbnN0IFVQID0gXCI8XCI7IC8vIG9uZSBsZXZlbCB1cFxuZXhwb3J0IGNvbnN0IFNBTUUgPSBcIixcIjsgLy8gc2FtZSBsZXZlbFxuZXhwb3J0IGNvbnN0IERPV04gPSBcIj5cIjsgLy8gb25lIGxldmVsIGRvd25cbmV4cG9ydCBjb25zdCBSRVNFVCA9IFwifFwiOyAvLyByZXNldCBsZXZlbCBpbmRleCBhbmQgc3RhcnQgbmV3XG5leHBvcnQgY29uc3QgV0lMRENBUkQgPSBcIipcIjsgLy8gYXMgZGVmaW5lZCBieSBwdWJsaWNzdWZmaXgub3JnXG5leHBvcnQgY29uc3QgRVhDRVBUSU9OID0gXCIhXCI7IC8vIGFzIGRlZmluZWQgYnkgcHVibGljc3VmZml4Lm9yZ1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hhcmFjdGVycy5qcy5tYXAiLCJjb25zdCB3b3JkID0gJ1thLWZBLUZcXFxcZDpdJztcblxuY29uc3QgYm91bmRyeSA9IG9wdGlvbnMgPT4gb3B0aW9ucyAmJiBvcHRpb25zLmluY2x1ZGVCb3VuZGFyaWVzXG5cdD8gYCg/Oig/PD1cXFxcc3xeKSg/PSR7d29yZH0pfCg/PD0ke3dvcmR9KSg/PVxcXFxzfCQpKWBcblx0OiAnJztcblxuY29uc3QgdjQgPSAnKD86MjVbMC01XXwyWzAtNF1cXFxcZHwxXFxcXGRcXFxcZHxbMS05XVxcXFxkfFxcXFxkKSg/OlxcXFwuKD86MjVbMC01XXwyWzAtNF1cXFxcZHwxXFxcXGRcXFxcZHxbMS05XVxcXFxkfFxcXFxkKSl7M30nO1xuXG5jb25zdCB2NnNlZ21lbnQgPSAnW2EtZkEtRlxcXFxkXXsxLDR9JztcblxuY29uc3QgdjYgPSBgXG4oPzpcbig/OiR7djZzZWdtZW50fTopezd9KD86JHt2NnNlZ21lbnR9fDopfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDE6MjozOjQ6NTo2Ojc6OiAgMToyOjM6NDo1OjY6Nzo4XG4oPzoke3Y2c2VnbWVudH06KXs2fSg/OiR7djR9fDoke3Y2c2VnbWVudH18Oil8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAxOjI6Mzo0OjU6Njo6ICAgIDE6MjozOjQ6NTo2Ojo4ICAgMToyOjM6NDo1OjY6OjggIDE6MjozOjQ6NTo2OjoxLjIuMy40XG4oPzoke3Y2c2VnbWVudH06KXs1fSg/Ojoke3Y0fXwoPzo6JHt2NnNlZ21lbnR9KXsxLDJ9fDopfCAgICAgICAgICAgICAgICAgICAvLyAxOjI6Mzo0OjU6OiAgICAgIDE6MjozOjQ6NTo6Nzo4ICAgMToyOjM6NDo1Ojo4ICAgIDE6MjozOjQ6NTo6NzoxLjIuMy40XG4oPzoke3Y2c2VnbWVudH06KXs0fSg/Oig/Ojoke3Y2c2VnbWVudH0pezAsMX06JHt2NH18KD86OiR7djZzZWdtZW50fSl7MSwzfXw6KXwgLy8gMToyOjM6NDo6ICAgICAgICAxOjI6Mzo0Ojo2Ojc6OCAgIDE6MjozOjQ6OjggICAgICAxOjI6Mzo0Ojo2Ojc6MS4yLjMuNFxuKD86JHt2NnNlZ21lbnR9Oil7M30oPzooPzo6JHt2NnNlZ21lbnR9KXswLDJ9OiR7djR9fCg/Ojoke3Y2c2VnbWVudH0pezEsNH18Oil8IC8vIDE6MjozOjogICAgICAgICAgMToyOjM6OjU6Njo3OjggICAxOjI6Mzo6OCAgICAgICAgMToyOjM6OjU6Njo3OjEuMi4zLjRcbig/OiR7djZzZWdtZW50fTopezJ9KD86KD86OiR7djZzZWdtZW50fSl7MCwzfToke3Y0fXwoPzo6JHt2NnNlZ21lbnR9KXsxLDV9fDopfCAvLyAxOjI6OiAgICAgICAgICAgIDE6Mjo6NDo1OjY6Nzo4ICAgMToyOjo4ICAgICAgICAgIDE6Mjo6NDo1OjY6NzoxLjIuMy40XG4oPzoke3Y2c2VnbWVudH06KXsxfSg/Oig/Ojoke3Y2c2VnbWVudH0pezAsNH06JHt2NH18KD86OiR7djZzZWdtZW50fSl7MSw2fXw6KXwgLy8gMTo6ICAgICAgICAgICAgICAxOjozOjQ6NTo2Ojc6OCAgIDE6OjggICAgICAgICAgICAxOjozOjQ6NTo2Ojc6MS4yLjMuNFxuKD86Oig/Oig/Ojoke3Y2c2VnbWVudH0pezAsNX06JHt2NH18KD86OiR7djZzZWdtZW50fSl7MSw3fXw6KSkgICAgICAgICAgICAgLy8gOjoyOjM6NDo1OjY6Nzo4ICA6OjI6Mzo0OjU6Njo3OjggIDo6OCAgICAgICAgICAgICA6OjEuMi4zLjRcbikoPzolWzAtOWEtekEtWl17MSx9KT8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAlZXRoMCAgICAgICAgICAgICUxXG5gLnJlcGxhY2UoL1xccypcXC9cXC8uKiQvZ20sICcnKS5yZXBsYWNlKC9cXG4vZywgJycpLnRyaW0oKTtcblxuLy8gUHJlLWNvbXBpbGUgb25seSB0aGUgZXhhY3QgcmVnZXhlcyBiZWNhdXNlIGFkZGluZyBhIGdsb2JhbCBmbGFnIG1ha2UgcmVnZXhlcyBzdGF0ZWZ1bFxuY29uc3QgdjQ2RXhhY3QgPSBuZXcgUmVnRXhwKGAoPzpeJHt2NH0kKXwoPzpeJHt2Nn0kKWApO1xuY29uc3QgdjRleGFjdCA9IG5ldyBSZWdFeHAoYF4ke3Y0fSRgKTtcbmNvbnN0IHY2ZXhhY3QgPSBuZXcgUmVnRXhwKGBeJHt2Nn0kYCk7XG5cbmNvbnN0IGlwUmVnZXggPSBvcHRpb25zID0+IG9wdGlvbnMgJiYgb3B0aW9ucy5leGFjdFxuXHQ/IHY0NkV4YWN0XG5cdDogbmV3IFJlZ0V4cChgKD86JHtib3VuZHJ5KG9wdGlvbnMpfSR7djR9JHtib3VuZHJ5KG9wdGlvbnMpfSl8KD86JHtib3VuZHJ5KG9wdGlvbnMpfSR7djZ9JHtib3VuZHJ5KG9wdGlvbnMpfSlgLCAnZycpO1xuXG5pcFJlZ2V4LnY0ID0gb3B0aW9ucyA9PiBvcHRpb25zICYmIG9wdGlvbnMuZXhhY3QgPyB2NGV4YWN0IDogbmV3IFJlZ0V4cChgJHtib3VuZHJ5KG9wdGlvbnMpfSR7djR9JHtib3VuZHJ5KG9wdGlvbnMpfWAsICdnJyk7XG5pcFJlZ2V4LnY2ID0gb3B0aW9ucyA9PiBvcHRpb25zICYmIG9wdGlvbnMuZXhhY3QgPyB2NmV4YWN0IDogbmV3IFJlZ0V4cChgJHtib3VuZHJ5KG9wdGlvbnMpfSR7djZ9JHtib3VuZHJ5KG9wdGlvbnMpfWAsICdnJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGlwUmVnZXg7XG4iLCJjb25zdCB7dG9TdHJpbmd9ID0gT2JqZWN0LnByb3RvdHlwZTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNSZWdleHAodmFsdWUpIHtcblx0cmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbiIsImltcG9ydCBpc1JlZ2V4cCBmcm9tICdpcy1yZWdleHAnO1xuXG5jb25zdCBmbGFnTWFwID0ge1xuXHRnbG9iYWw6ICdnJyxcblx0aWdub3JlQ2FzZTogJ2knLFxuXHRtdWx0aWxpbmU6ICdtJyxcblx0ZG90QWxsOiAncycsXG5cdHN0aWNreTogJ3knLFxuXHR1bmljb2RlOiAndSdcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsb25lZFJlZ2V4cChyZWdleHAsIG9wdGlvbnMgPSB7fSkge1xuXHRpZiAoIWlzUmVnZXhwKHJlZ2V4cCkpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhIFJlZ0V4cCBpbnN0YW5jZScpO1xuXHR9XG5cblx0Y29uc3QgZmxhZ3MgPSBPYmplY3Qua2V5cyhmbGFnTWFwKS5tYXAoZmxhZyA9PiAoXG5cdFx0KHR5cGVvZiBvcHRpb25zW2ZsYWddID09PSAnYm9vbGVhbicgPyBvcHRpb25zW2ZsYWddIDogcmVnZXhwW2ZsYWddKSA/IGZsYWdNYXBbZmxhZ10gOiAnJ1xuXHQpKS5qb2luKCcnKTtcblxuXHRjb25zdCBjbG9uZWRSZWdleHAgPSBuZXcgUmVnRXhwKG9wdGlvbnMuc291cmNlIHx8IHJlZ2V4cC5zb3VyY2UsIGZsYWdzKTtcblxuXHRjbG9uZWRSZWdleHAubGFzdEluZGV4ID0gdHlwZW9mIG9wdGlvbnMubGFzdEluZGV4ID09PSAnbnVtYmVyJyA/XG5cdFx0b3B0aW9ucy5sYXN0SW5kZXggOlxuXHRcdHJlZ2V4cC5sYXN0SW5kZXg7XG5cblx0cmV0dXJuIGNsb25lZFJlZ2V4cDtcbn1cbiIsImltcG9ydCBmdW5jdGlvblRpbWVvdXQsIHtpc1RpbWVvdXRFcnJvcn0gZnJvbSAnZnVuY3Rpb24tdGltZW91dCc7XG5pbXBvcnQgdGltZVNwYW4gZnJvbSAndGltZS1zcGFuJztcbmltcG9ydCBjbG9uZVJlZ2V4cCBmcm9tICdjbG9uZS1yZWdleHAnOyAvLyBUT0RPOiBVc2UgYHN0cnVjdHVyZWRDbG9uZWAgaW5zdGVhZCB3aGVuIHRhcmdldGluZyBOb2RlLmpzIDE4LlxuXG5jb25zdCByZXN1bHRUb01hdGNoID0gcmVzdWx0ID0+ICh7XG5cdG1hdGNoOiByZXN1bHRbMF0sXG5cdGluZGV4OiByZXN1bHQuaW5kZXgsXG5cdGdyb3VwczogcmVzdWx0LnNsaWNlKDEpLFxuXHRuYW1lZEdyb3VwczogcmVzdWx0Lmdyb3VwcyA/PyB7fSxcblx0aW5wdXQ6IHJlc3VsdC5pbnB1dCxcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNNYXRjaChyZWdleCwgc3RyaW5nLCB7dGltZW91dH0gPSB7fSkge1xuXHR0cnkge1xuXHRcdHJldHVybiBmdW5jdGlvblRpbWVvdXQoKCkgPT4gY2xvbmVSZWdleHAocmVnZXgpLnRlc3Qoc3RyaW5nKSwge3RpbWVvdXR9KSgpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGlmIChpc1RpbWVvdXRFcnJvcihlcnJvcikpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHR0aHJvdyBlcnJvcjtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlyc3RNYXRjaChyZWdleCwgc3RyaW5nLCB7dGltZW91dH0gPSB7fSkge1xuXHR0cnkge1xuXHRcdGNvbnN0IHJlc3VsdCA9IGZ1bmN0aW9uVGltZW91dCgoKSA9PiBjbG9uZVJlZ2V4cChyZWdleCkuZXhlYyhzdHJpbmcpLCB7dGltZW91dH0pKCk7XG5cblx0XHRpZiAocmVzdWx0ID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdFRvTWF0Y2gocmVzdWx0KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRpZiAoaXNUaW1lb3V0RXJyb3IoZXJyb3IpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhyb3cgZXJyb3I7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoZXMocmVnZXgsIHN0cmluZywge3RpbWVvdXQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksIG1hdGNoVGltZW91dCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWX0gPSB7fSkge1xuXHRpZiAoIXJlZ2V4Lmdsb2JhbCkge1xuXHRcdHRocm93IG5ldyBFcnJvcignVGhlIHJlZ2V4IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIGZsYWcsIG90aGVyd2lzZSwgdXNlIGBmaXJzdE1hdGNoKClgIGluc3RlYWQnKTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0KiBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbnN0IG1hdGNoZXMgPSBzdHJpbmcubWF0Y2hBbGwocmVnZXgpOyAvLyBUaGUgcmVnZXggaXMgb25seSBleGVjdXRlZCB3aGVuIGl0ZXJhdGVkIG92ZXIuXG5cblx0XHRcdFx0d2hpbGUgKHRydWUpIHtcblx0XHRcdFx0XHRjb25zdCBuZXh0TWF0Y2ggPSBmdW5jdGlvblRpbWVvdXQoKCkgPT4gbWF0Y2hlcy5uZXh0KCksIHt0aW1lb3V0OiAodGltZW91dCAhPT0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZIHx8IG1hdGNoVGltZW91dCAhPT0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKSA/IE1hdGgubWluKHRpbWVvdXQsIG1hdGNoVGltZW91dCkgOiB1bmRlZmluZWR9KTsgLy8gYG1hdGNoZXMubmV4dGAgbXVzdCBiZSBjYWxsZWQgd2l0aGluIGFuIGFycm93IGZ1bmN0aW9uIHNvIHRoYXQgaXQgZG9lc24ndCBsb29zZSBpdHMgY29udGV4dC5cblxuXHRcdFx0XHRcdGNvbnN0IGVuZCA9IHRpbWVTcGFuKCk7XG5cdFx0XHRcdFx0Y29uc3Qge3ZhbHVlLCBkb25lfSA9IG5leHRNYXRjaCgpO1xuXHRcdFx0XHRcdHRpbWVvdXQgLT0gTWF0aC5jZWlsKGVuZCgpKTtcblxuXHRcdFx0XHRcdGlmIChkb25lKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR5aWVsZCByZXN1bHRUb01hdGNoKHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0aWYgKCFpc1RpbWVvdXRFcnJvcihlcnJvcikpIHtcblx0XHRcdFx0XHR0aHJvdyBlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdH07XG59XG4iLCIvLyBFdmVuIHRob3VnaCB0aGUgYnJvd3NlciB2ZXJzaW9uIGlzIGEgbm8tb3AsIHdlIHdyYXAgaXQgdG8gZW5zdXJlIGNvbnNpc3RlbnQgYmVoYXZpb3IuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmdW5jdGlvblRpbWVvdXQoZnVuY3Rpb25fKSB7XG5cdGNvbnN0IHdyYXBwZWRGdW5jdGlvbiA9ICguLi5hcmd1bWVudHNfKSA9PiBmdW5jdGlvbl8oLi4uYXJndW1lbnRzXyk7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHdyYXBwZWRGdW5jdGlvbiwgJ25hbWUnLCB7XG5cdFx0dmFsdWU6IGBmdW5jdGlvblRpbWVvdXQoJHtmdW5jdGlvbl8ubmFtZSB8fCAnPGFub255bW91cz4nfSlgLFxuXHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0fSk7XG5cblx0cmV0dXJuIHdyYXBwZWRGdW5jdGlvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVGltZW91dEVycm9yKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG4iLCJpbXBvcnQgaXBSZWdleCBmcm9tICdpcC1yZWdleCc7XG5pbXBvcnQge2lzTWF0Y2h9IGZyb20gJ3N1cGVyLXJlZ2V4JztcblxuY29uc3QgbWF4SVB2NExlbmd0aCA9IDE1O1xuY29uc3QgbWF4SVB2Nkxlbmd0aCA9IDQ1O1xuXG5jb25zdCBvcHRpb25zID0ge1xuXHR0aW1lb3V0OiA0MDAsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gaXNJUChzdHJpbmcpIHtcblx0aWYgKHN0cmluZy5sZW5ndGggPiBtYXhJUHY2TGVuZ3RoKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIGlzTWF0Y2goaXBSZWdleCh7ZXhhY3Q6IHRydWV9KSwgc3RyaW5nLCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSVB2NihzdHJpbmcpIHtcblx0aWYgKHN0cmluZy5sZW5ndGggPiBtYXhJUHY2TGVuZ3RoKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIGlzTWF0Y2goaXBSZWdleC52Nih7ZXhhY3Q6IHRydWV9KSwgc3RyaW5nLCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSVB2NChzdHJpbmcpIHtcblx0aWYgKHN0cmluZy5sZW5ndGggPiBtYXhJUHY0TGVuZ3RoKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIGlzTWF0Y2goaXBSZWdleC52NCh7ZXhhY3Q6IHRydWV9KSwgc3RyaW5nLCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlwVmVyc2lvbihzdHJpbmcpIHtcblx0aWYgKGlzSVB2NihzdHJpbmcpKSB7XG5cdFx0cmV0dXJuIDY7XG5cdH1cblxuXHRpZiAoaXNJUHY0KHN0cmluZykpIHtcblx0XHRyZXR1cm4gNDtcblx0fVxufVxuIiwiaW1wb3J0IHsgaXBWZXJzaW9uIH0gZnJvbSBcImlzLWlwXCI7XG4vLyBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRG9tYWluX25hbWVcbi8vIFNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMTAzNFxuY29uc3QgTEFCRUxfU0VQQVJBVE9SID0gXCIuXCI7XG5jb25zdCBMQUJFTF9MRU5HVEhfTUlOID0gMTtcbmNvbnN0IExBQkVMX0xFTkdUSF9NQVggPSA2Mztcbi8qKlxuICogMjU1IG9jdGV0cyAtIDIgb2N0ZXRzIGlmIHlvdSByZW1vdmUgdGhlIGxhc3QgZG90XG4gKiBAc2VlIGh0dHBzOi8vZGV2YmxvZ3MubWljcm9zb2Z0LmNvbS9vbGRuZXd0aGluZy8yMDEyMDQxMi0wMC8/cD03ODczXG4gKi9cbmNvbnN0IERPTUFJTl9MRU5HVEhfTUFYID0gMjUzO1xuY29uc3QgdGV4dEVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcbmV4cG9ydCB2YXIgVmFsaWRhdGlvbjtcbihmdW5jdGlvbiAoVmFsaWRhdGlvbikge1xuICAgIC8qKlxuICAgICAqIEFsbG93cyBhbnkgb2N0ZXRzIGFzIGxhYmVsc1xuICAgICAqIGJ1dCBzdGlsbCByZXN0cmljdHMgdGhlIGxlbmd0aCBvZiBsYWJlbHMgYW5kIHRoZSBvdmVyYWxsIGRvbWFpbi5cbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzIxODEjc2VjdGlvbi0xMVxuICAgICAqKi9cbiAgICBWYWxpZGF0aW9uW1wiTGF4XCJdID0gXCJMQVhcIjtcbiAgICAvKipcbiAgICAgKiBPbmx5IGFsbG93cyBBU0NJSSBsZXR0ZXJzLCBkaWdpdHMgYW5kIGh5cGhlbnMgKGFrYSBMREgpLFxuICAgICAqIGZvcmJpZHMgaHlwaGVucyBhdCB0aGUgYmVnaW5uaW5nIG9yIGVuZCBvZiBhIGxhYmVsXG4gICAgICogYW5kIHJlcXVpcmVzIHRvcC1sZXZlbCBkb21haW4gbmFtZXMgbm90IHRvIGJlIGFsbC1udW1lcmljLlxuICAgICAqXG4gICAgICogVGhpcyBpcyB0aGUgZGVmYXVsdCBpZiBubyB2YWxpZGF0aW9uIGlzIGNvbmZpZ3VyZWQuXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGF0YXRyYWNrZXIuaWV0Zi5vcmcvZG9jL2h0bWwvcmZjMzY5NiNzZWN0aW9uLTJcbiAgICAgKi9cbiAgICBWYWxpZGF0aW9uW1wiU3RyaWN0XCJdID0gXCJTVFJJQ1RcIjtcbn0pKFZhbGlkYXRpb24gfHwgKFZhbGlkYXRpb24gPSB7fSkpO1xuZXhwb3J0IHZhciBWYWxpZGF0aW9uRXJyb3JUeXBlO1xuKGZ1bmN0aW9uIChWYWxpZGF0aW9uRXJyb3JUeXBlKSB7XG4gICAgVmFsaWRhdGlvbkVycm9yVHlwZVtcIk5vSG9zdG5hbWVcIl0gPSBcIk5PX0hPU1ROQU1FXCI7XG4gICAgVmFsaWRhdGlvbkVycm9yVHlwZVtcIkRvbWFpbk1heExlbmd0aFwiXSA9IFwiRE9NQUlOX01BWF9MRU5HVEhcIjtcbiAgICBWYWxpZGF0aW9uRXJyb3JUeXBlW1wiTGFiZWxNaW5MZW5ndGhcIl0gPSBcIkxBQkVMX01JTl9MRU5HVEhcIjtcbiAgICBWYWxpZGF0aW9uRXJyb3JUeXBlW1wiTGFiZWxNYXhMZW5ndGhcIl0gPSBcIkxBQkVMX01BWF9MRU5HVEhcIjtcbiAgICBWYWxpZGF0aW9uRXJyb3JUeXBlW1wiTGFiZWxJbnZhbGlkQ2hhcmFjdGVyXCJdID0gXCJMQUJFTF9JTlZBTElEX0NIQVJBQ1RFUlwiO1xuICAgIFZhbGlkYXRpb25FcnJvclR5cGVbXCJMYXN0TGFiZWxJbnZhbGlkXCJdID0gXCJMQVNUX0xBQkVMX0lOVkFMSURcIjtcbn0pKFZhbGlkYXRpb25FcnJvclR5cGUgfHwgKFZhbGlkYXRpb25FcnJvclR5cGUgPSB7fSkpO1xuZXhwb3J0IHZhciBTYW5pdGl6YXRpb25SZXN1bHRUeXBlO1xuKGZ1bmN0aW9uIChTYW5pdGl6YXRpb25SZXN1bHRUeXBlKSB7XG4gICAgU2FuaXRpemF0aW9uUmVzdWx0VHlwZVtcIlZhbGlkSXBcIl0gPSBcIlZBTElEX0lQXCI7XG4gICAgU2FuaXRpemF0aW9uUmVzdWx0VHlwZVtcIlZhbGlkRG9tYWluXCJdID0gXCJWQUxJRF9ET01BSU5cIjtcbiAgICBTYW5pdGl6YXRpb25SZXN1bHRUeXBlW1wiRXJyb3JcIl0gPSBcIkVSUk9SXCI7XG59KShTYW5pdGl6YXRpb25SZXN1bHRUeXBlIHx8IChTYW5pdGl6YXRpb25SZXN1bHRUeXBlID0ge30pKTtcbmNvbnN0IGNyZWF0ZU5vSG9zdG5hbWVFcnJvciA9IChpbnB1dCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFZhbGlkYXRpb25FcnJvclR5cGUuTm9Ib3N0bmFtZSxcbiAgICAgICAgbWVzc2FnZTogYFRoZSBnaXZlbiBpbnB1dCAke1N0cmluZyhpbnB1dCl9IGRvZXMgbm90IGxvb2sgbGlrZSBhIGhvc3RuYW1lLmAsXG4gICAgICAgIGNvbHVtbjogMSxcbiAgICB9O1xufTtcbmNvbnN0IGNyZWF0ZURvbWFpbk1heExlbmd0aEVycm9yID0gKGRvbWFpbiwgbGVuZ3RoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogVmFsaWRhdGlvbkVycm9yVHlwZS5Eb21haW5NYXhMZW5ndGgsXG4gICAgICAgIG1lc3NhZ2U6IGBEb21haW4gXCIke2RvbWFpbn1cIiBpcyB0b28gbG9uZy4gRG9tYWluIGlzICR7bGVuZ3RofSBvY3RldHMgbG9uZyBidXQgc2hvdWxkIG5vdCBiZSBsb25nZXIgdGhhbiAke0RPTUFJTl9MRU5HVEhfTUFYfS5gLFxuICAgICAgICBjb2x1bW46IGxlbmd0aCxcbiAgICB9O1xufTtcbmNvbnN0IGNyZWF0ZUxhYmVsTWluTGVuZ3RoRXJyb3IgPSAobGFiZWwsIGNvbHVtbikgPT4ge1xuICAgIGNvbnN0IGxlbmd0aCA9IGxhYmVsLmxlbmd0aDtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBWYWxpZGF0aW9uRXJyb3JUeXBlLkxhYmVsTWluTGVuZ3RoLFxuICAgICAgICBtZXNzYWdlOiBgTGFiZWwgXCIke2xhYmVsfVwiIGlzIHRvbyBzaG9ydC4gTGFiZWwgaXMgJHtsZW5ndGh9IG9jdGV0cyBsb25nIGJ1dCBzaG91bGQgYmUgYXQgbGVhc3QgJHtMQUJFTF9MRU5HVEhfTUlOfS5gLFxuICAgICAgICBjb2x1bW4sXG4gICAgfTtcbn07XG5jb25zdCBjcmVhdGVMYWJlbE1heExlbmd0aEVycm9yID0gKGxhYmVsLCBjb2x1bW4pID0+IHtcbiAgICBjb25zdCBsZW5ndGggPSBsYWJlbC5sZW5ndGg7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogVmFsaWRhdGlvbkVycm9yVHlwZS5MYWJlbE1heExlbmd0aCxcbiAgICAgICAgbWVzc2FnZTogYExhYmVsIFwiJHtsYWJlbH1cIiBpcyB0b28gbG9uZy4gTGFiZWwgaXMgJHtsZW5ndGh9IG9jdGV0cyBsb25nIGJ1dCBzaG91bGQgbm90IGJlIGxvbmdlciB0aGFuICR7TEFCRUxfTEVOR1RIX01BWH0uYCxcbiAgICAgICAgY29sdW1uLFxuICAgIH07XG59O1xuY29uc3QgY3JlYXRlTGFiZWxJbnZhbGlkQ2hhcmFjdGVyRXJyb3IgPSAobGFiZWwsIGludmFsaWRDaGFyYWN0ZXIsIGNvbHVtbikgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFZhbGlkYXRpb25FcnJvclR5cGUuTGFiZWxJbnZhbGlkQ2hhcmFjdGVyLFxuICAgICAgICBtZXNzYWdlOiBgTGFiZWwgXCIke2xhYmVsfVwiIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVyIFwiJHtpbnZhbGlkQ2hhcmFjdGVyfVwiIGF0IGNvbHVtbiAke2NvbHVtbn0uYCxcbiAgICAgICAgY29sdW1uLFxuICAgIH07XG59O1xuY29uc3QgY3JlYXRlTGFzdExhYmVsSW52YWxpZEVycm9yID0gKGxhYmVsLCBjb2x1bW4pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBWYWxpZGF0aW9uRXJyb3JUeXBlLkxhYmVsSW52YWxpZENoYXJhY3RlcixcbiAgICAgICAgbWVzc2FnZTogYExhc3QgbGFiZWwgXCIke2xhYmVsfVwiIG11c3Qgbm90IGJlIGFsbC1udW1lcmljLmAsXG4gICAgICAgIGNvbHVtbixcbiAgICB9O1xufTtcbmV4cG9ydCBjb25zdCBzYW5pdGl6ZSA9IChpbnB1dCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgLy8gRXh0cmEgY2hlY2sgZm9yIG5vbi1UeXBlU2NyaXB0IHVzZXJzXG4gICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogU2FuaXRpemF0aW9uUmVzdWx0VHlwZS5FcnJvcixcbiAgICAgICAgICAgIGVycm9yczogW2NyZWF0ZU5vSG9zdG5hbWVFcnJvcihpbnB1dCldLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoaW5wdXQgPT09IFwiXCIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IFNhbml0aXphdGlvblJlc3VsdFR5cGUuVmFsaWREb21haW4sXG4gICAgICAgICAgICBkb21haW46IGlucHV0LFxuICAgICAgICAgICAgbGFiZWxzOiBbXSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gSVB2NiBhZGRyZXNzZXMgYXJlIHN1cnJvdW5kZWQgYnkgc3F1YXJlIGJyYWNrZXRzIGluIFVSTHNcbiAgICAvLyBTZWUgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjc2VjdGlvbi0zLjIuMlxuICAgIGNvbnN0IGlucHV0VHJpbW1lZEFzSXAgPSBpbnB1dC5yZXBsYWNlKC9eXFxbfF0kL2csIFwiXCIpO1xuICAgIGNvbnN0IGlwVmVyc2lvbk9mSW5wdXQgPSBpcFZlcnNpb24oaW5wdXRUcmltbWVkQXNJcCk7XG4gICAgaWYgKGlwVmVyc2lvbk9mSW5wdXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogU2FuaXRpemF0aW9uUmVzdWx0VHlwZS5WYWxpZElwLFxuICAgICAgICAgICAgaXA6IGlucHV0VHJpbW1lZEFzSXAsXG4gICAgICAgICAgICBpcFZlcnNpb246IGlwVmVyc2lvbk9mSW5wdXQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IGxhc3RDaGFyID0gaW5wdXQuY2hhckF0KGlucHV0Lmxlbmd0aCAtIDEpO1xuICAgIGNvbnN0IGNhbm9uaWNhbElucHV0ID0gbGFzdENoYXIgPT09IExBQkVMX1NFUEFSQVRPUiA/IGlucHV0LnNsaWNlKDAsIC0xKSA6IGlucHV0O1xuICAgIGNvbnN0IG9jdGV0cyA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShjYW5vbmljYWxJbnB1dCk7XG4gICAgaWYgKG9jdGV0cy5sZW5ndGggPiBET01BSU5fTEVOR1RIX01BWCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogU2FuaXRpemF0aW9uUmVzdWx0VHlwZS5FcnJvcixcbiAgICAgICAgICAgIGVycm9yczogW2NyZWF0ZURvbWFpbk1heExlbmd0aEVycm9yKGlucHV0LCBvY3RldHMubGVuZ3RoKV0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IGxhYmVscyA9IGNhbm9uaWNhbElucHV0LnNwbGl0KExBQkVMX1NFUEFSQVRPUik7XG4gICAgY29uc3QgeyB2YWxpZGF0aW9uID0gVmFsaWRhdGlvbi5TdHJpY3QgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgbGFiZWxWYWxpZGF0aW9uRXJyb3JzID0gdmFsaWRhdGVMYWJlbHNbdmFsaWRhdGlvbl0obGFiZWxzKTtcbiAgICBpZiAobGFiZWxWYWxpZGF0aW9uRXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IFNhbml0aXphdGlvblJlc3VsdFR5cGUuRXJyb3IsXG4gICAgICAgICAgICBlcnJvcnM6IGxhYmVsVmFsaWRhdGlvbkVycm9ycyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogU2FuaXRpemF0aW9uUmVzdWx0VHlwZS5WYWxpZERvbWFpbixcbiAgICAgICAgZG9tYWluOiBpbnB1dCxcbiAgICAgICAgbGFiZWxzLFxuICAgIH07XG59O1xuY29uc3QgdmFsaWRhdGVMYWJlbHMgPSB7XG4gICAgW1ZhbGlkYXRpb24uTGF4XTogKGxhYmVscykgPT4ge1xuICAgICAgICBjb25zdCBsYWJlbFZhbGlkYXRpb25FcnJvcnMgPSBbXTtcbiAgICAgICAgbGV0IGNvbHVtbiA9IDE7XG4gICAgICAgIGZvciAoY29uc3QgbGFiZWwgb2YgbGFiZWxzKSB7XG4gICAgICAgICAgICBjb25zdCBvY3RldHMgPSB0ZXh0RW5jb2Rlci5lbmNvZGUobGFiZWwpO1xuICAgICAgICAgICAgaWYgKG9jdGV0cy5sZW5ndGggPCBMQUJFTF9MRU5HVEhfTUlOKSB7XG4gICAgICAgICAgICAgICAgbGFiZWxWYWxpZGF0aW9uRXJyb3JzLnB1c2goY3JlYXRlTGFiZWxNaW5MZW5ndGhFcnJvcihsYWJlbCwgY29sdW1uKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChvY3RldHMubGVuZ3RoID4gTEFCRUxfTEVOR1RIX01BWCkge1xuICAgICAgICAgICAgICAgIGxhYmVsVmFsaWRhdGlvbkVycm9ycy5wdXNoKGNyZWF0ZUxhYmVsTWF4TGVuZ3RoRXJyb3IobGFiZWwsIGNvbHVtbikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29sdW1uICs9IGxhYmVsLmxlbmd0aCArIExBQkVMX1NFUEFSQVRPUi5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxhYmVsVmFsaWRhdGlvbkVycm9ycztcbiAgICB9LFxuICAgIFtWYWxpZGF0aW9uLlN0cmljdF06IChsYWJlbHMpID0+IHtcbiAgICAgICAgY29uc3QgbGFiZWxWYWxpZGF0aW9uRXJyb3JzID0gW107XG4gICAgICAgIGxldCBjb2x1bW4gPSAxO1xuICAgICAgICBsZXQgbGFzdExhYmVsO1xuICAgICAgICBmb3IgKGNvbnN0IGxhYmVsIG9mIGxhYmVscykge1xuICAgICAgICAgICAgLy8gQWNjb3JkaW5nIHRvIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2NzYxIGxhYmVscyBzaG91bGRcbiAgICAgICAgICAgIC8vIG9ubHkgY29udGFpbiBBU0NJSSBsZXR0ZXJzLCBkaWdpdHMgYW5kIGh5cGhlbnMgKExESCkuXG4gICAgICAgICAgICBjb25zdCBpbnZhbGlkQ2hhcmFjdGVyID0gL1teXFxkYS16LV0vaS5leGVjKGxhYmVsKTtcbiAgICAgICAgICAgIGlmIChpbnZhbGlkQ2hhcmFjdGVyKSB7XG4gICAgICAgICAgICAgICAgbGFiZWxWYWxpZGF0aW9uRXJyb3JzLnB1c2goY3JlYXRlTGFiZWxJbnZhbGlkQ2hhcmFjdGVyRXJyb3IobGFiZWwsIGludmFsaWRDaGFyYWN0ZXJbMF0sIGludmFsaWRDaGFyYWN0ZXIuaW5kZXggKyAxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobGFiZWwuc3RhcnRzV2l0aChcIi1cIikpIHtcbiAgICAgICAgICAgICAgICBsYWJlbFZhbGlkYXRpb25FcnJvcnMucHVzaChjcmVhdGVMYWJlbEludmFsaWRDaGFyYWN0ZXJFcnJvcihsYWJlbCwgXCItXCIsIGNvbHVtbikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobGFiZWwuZW5kc1dpdGgoXCItXCIpKSB7XG4gICAgICAgICAgICAgICAgbGFiZWxWYWxpZGF0aW9uRXJyb3JzLnB1c2goY3JlYXRlTGFiZWxJbnZhbGlkQ2hhcmFjdGVyRXJyb3IobGFiZWwsIFwiLVwiLCBjb2x1bW4gKyBsYWJlbC5sZW5ndGggLSAxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAvLyBXZSBjYW4gdXNlIC5sZW5ndGggaGVyZSB0byBjaGVjayBmb3IgdGhlIG9jdGV0IHNpemUgYmVjYXVzZVxuICAgICAgICAgICAgLy8gbGFiZWwgY2FuIG9ubHkgY29udGFpbiBBU0NJSSBMREggY2hhcmFjdGVycyBhdCB0aGlzIHBvaW50LlxuICAgICAgICAgICAgbGFiZWwubGVuZ3RoIDwgTEFCRUxfTEVOR1RIX01JTikge1xuICAgICAgICAgICAgICAgIGxhYmVsVmFsaWRhdGlvbkVycm9ycy5wdXNoKGNyZWF0ZUxhYmVsTWluTGVuZ3RoRXJyb3IobGFiZWwsIGNvbHVtbikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobGFiZWwubGVuZ3RoID4gTEFCRUxfTEVOR1RIX01BWCkge1xuICAgICAgICAgICAgICAgIGxhYmVsVmFsaWRhdGlvbkVycm9ycy5wdXNoKGNyZWF0ZUxhYmVsTWF4TGVuZ3RoRXJyb3IobGFiZWwsIGNvbHVtbikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29sdW1uICs9IGxhYmVsLmxlbmd0aCArIExBQkVMX1NFUEFSQVRPUi5sZW5ndGg7XG4gICAgICAgICAgICBsYXN0TGFiZWwgPSBsYWJlbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGFzdExhYmVsICE9PSB1bmRlZmluZWQgJiYgL1thLXotXS9pdS50ZXN0KGxhc3RMYWJlbCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBsYWJlbFZhbGlkYXRpb25FcnJvcnMucHVzaChjcmVhdGVMYXN0TGFiZWxJbnZhbGlkRXJyb3IobGFzdExhYmVsLCBjb2x1bW4gLSBsYXN0TGFiZWwubGVuZ3RoIC0gTEFCRUxfU0VQQVJBVE9SLmxlbmd0aCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsYWJlbFZhbGlkYXRpb25FcnJvcnM7XG4gICAgfSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zYW5pdGl6ZS5qcy5tYXAiLCJleHBvcnQgY29uc3QgTk9ERV9UWVBFX1JPT1QgPSBTeW1ib2woXCJST09UXCIpO1xuZXhwb3J0IGNvbnN0IE5PREVfVFlQRV9DSElMRCA9IFN5bWJvbChcIkNISUxEXCIpO1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVJvb3ROb2RlID0gKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IE5PREVfVFlQRV9ST09ULFxuICAgICAgICBjaGlsZHJlbjogbmV3IE1hcCgpLFxuICAgIH07XG59O1xuZXhwb3J0IGNvbnN0IGNyZWF0ZU9yR2V0Q2hpbGQgPSAocGFyZW50LCBsYWJlbCkgPT4ge1xuICAgIGxldCBjaGlsZCA9IHBhcmVudC5jaGlsZHJlbi5nZXQobGFiZWwpO1xuICAgIGlmIChjaGlsZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNoaWxkID0ge1xuICAgICAgICAgICAgdHlwZTogTk9ERV9UWVBFX0NISUxELFxuICAgICAgICAgICAgbGFiZWwsXG4gICAgICAgICAgICBjaGlsZHJlbjogbmV3IE1hcCgpLFxuICAgICAgICAgICAgcGFyZW50LFxuICAgICAgICB9O1xuICAgICAgICBwYXJlbnQuY2hpbGRyZW4uc2V0KGxhYmVsLCBjaGlsZCk7XG4gICAgfVxuICAgIHJldHVybiBjaGlsZDtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2Rlcy5qcy5tYXAiLCJpbXBvcnQgKiBhcyBjaGFyYWN0ZXJzIGZyb20gXCIuL2NoYXJhY3RlcnMuanNcIjtcbmltcG9ydCB7IGNyZWF0ZVJvb3ROb2RlLCBjcmVhdGVPckdldENoaWxkLCBOT0RFX1RZUEVfUk9PVCwgfSBmcm9tIFwiLi9ub2Rlcy5qc1wiO1xuZXhwb3J0IGNvbnN0IHBhcnNlVHJpZSA9IChzZXJpYWxpemVkVHJpZSkgPT4ge1xuICAgIGNvbnN0IHJvb3ROb2RlID0gY3JlYXRlUm9vdE5vZGUoKTtcbiAgICBsZXQgZG9tYWluID0gXCJcIjtcbiAgICBsZXQgcGFyZW50Tm9kZSA9IHJvb3ROb2RlO1xuICAgIC8vIFR5cGUgYXNzZXJ0aW9uIG5lY2Vzc2FyeSBoZXJlIGR1ZSB0byBhIFR5cGVTY3JpcHQgdW5zb3VuZG5lc3NcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzk5OTgjaXNzdWVjb21tZW50LTIzNTk2MzQ1N1xuICAgIGxldCBub2RlID0gcm9vdE5vZGU7XG4gICAgY29uc3QgYWRkRG9tYWluID0gKCkgPT4ge1xuICAgICAgICBub2RlID0gY3JlYXRlT3JHZXRDaGlsZChwYXJlbnROb2RlLCBkb21haW4pO1xuICAgICAgICBkb21haW4gPSBcIlwiO1xuICAgIH07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpYWxpemVkVHJpZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjaGFyID0gc2VyaWFsaXplZFRyaWUuY2hhckF0KGkpO1xuICAgICAgICBzd2l0Y2ggKGNoYXIpIHtcbiAgICAgICAgICAgIGNhc2UgY2hhcmFjdGVycy5TQU1FOiB7XG4gICAgICAgICAgICAgICAgYWRkRG9tYWluKCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIGNoYXJhY3RlcnMuRE9XTjoge1xuICAgICAgICAgICAgICAgIGFkZERvbWFpbigpO1xuICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBub2RlO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBjaGFyYWN0ZXJzLlJFU0VUOiB7XG4gICAgICAgICAgICAgICAgYWRkRG9tYWluKCk7XG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IHJvb3ROb2RlO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBjaGFyYWN0ZXJzLlVQOiB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudE5vZGUudHlwZSA9PT0gTk9ERV9UWVBFX1JPT1QpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciBpbiBzZXJpYWxpemVkIHRyaWUgYXQgcG9zaXRpb24gJHtpfTogQ2Fubm90IGdvIHVwLCBjdXJyZW50IHBhcmVudCBub2RlIGlzIGFscmVhZHkgcm9vdGApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhZGREb21haW4oKTtcbiAgICAgICAgICAgICAgICBwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQ7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZG9tYWluICs9IGNoYXI7XG4gICAgfVxuICAgIGlmIChkb21haW4gIT09IFwiXCIpIHtcbiAgICAgICAgYWRkRG9tYWluKCk7XG4gICAgfVxuICAgIHJldHVybiByb290Tm9kZTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZS10cmllLmpzLm1hcCIsImltcG9ydCB7IGljYW5uVHJpZSwgcHJpdmF0ZVRyaWUgfSBmcm9tIFwiLi9zZXJpYWxpemVkLXRyaWVzLmpzXCI7XG5pbXBvcnQgeyBsb29rVXBUbGRzSW5UcmllIH0gZnJvbSBcIi4vdHJpZS9sb29rLXVwLmpzXCI7XG5pbXBvcnQgeyBzYW5pdGl6ZSwgU2FuaXRpemF0aW9uUmVzdWx0VHlwZSwgfSBmcm9tIFwiLi9zYW5pdGl6ZS5qc1wiO1xuaW1wb3J0IHsgcGFyc2VUcmllIH0gZnJvbSBcIi4vdHJpZS9wYXJzZS10cmllLmpzXCI7XG5leHBvcnQgY29uc3QgUkVTRVJWRURfVE9QX0xFVkVMX0RPTUFJTlMgPSBbXG4gICAgXCJsb2NhbGhvc3RcIixcbiAgICBcImxvY2FsXCIsXG4gICAgXCJleGFtcGxlXCIsXG4gICAgXCJpbnZhbGlkXCIsXG4gICAgXCJ0ZXN0XCIsXG5dO1xuZXhwb3J0IHZhciBQYXJzZVJlc3VsdFR5cGU7XG4oZnVuY3Rpb24gKFBhcnNlUmVzdWx0VHlwZSkge1xuICAgIC8qKlxuICAgICAqIFRoaXMgcGFyc2UgcmVzdWx0IGlzIHJldHVybmVkIGluIGNhc2UgdGhlIGdpdmVuIGhvc3RuYW1lIGRvZXMgbm90IGFkaGVyZSB0byBbUkZDIDEwMzRdKGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMxMDM0KS5cbiAgICAgKi9cbiAgICBQYXJzZVJlc3VsdFR5cGVbXCJJbnZhbGlkXCJdID0gXCJJTlZBTElEXCI7XG4gICAgLyoqXG4gICAgICogVGhpcyBwYXJzZSByZXN1bHQgaXMgcmV0dXJuZWQgaWYgdGhlIGdpdmVuIGhvc3RuYW1lIHdhcyBhbiBJUHY0IG9yIElQdjYuXG4gICAgICovXG4gICAgUGFyc2VSZXN1bHRUeXBlW1wiSXBcIl0gPSBcIklQXCI7XG4gICAgLyoqXG4gICAgICogVGhpcyBwYXJzZSByZXN1bHQgaXMgcmV0dXJuZWQgd2hlbiB0aGUgZ2l2ZW4gaG9zdG5hbWVcbiAgICAgKiAtIGlzIHRoZSByb290IGRvbWFpbiAodGhlIGVtcHR5IHN0cmluZyBgXCJcImApXG4gICAgICogLSBiZWxvbmdzIHRvIHRoZSB0b3AtbGV2ZWwgZG9tYWluIGBsb2NhbGhvc3RgLCBgbG9jYWxgLCBgZXhhbXBsZWAsIGBpbnZhbGlkYCBvciBgdGVzdGBcbiAgICAgKi9cbiAgICBQYXJzZVJlc3VsdFR5cGVbXCJSZXNlcnZlZFwiXSA9IFwiUkVTRVJWRURcIjtcbiAgICAvKipcbiAgICAgKiBUaGlzIHBhcnNlIHJlc3VsdCBpcyByZXR1cm5lZCB3aGVuIHRoZSBnaXZlbiBob3N0bmFtZSBpcyB2YWxpZCBhbmQgZG9lcyBub3QgYmVsb25nIHRvIGEgcmVzZXJ2ZWQgdG9wLWxldmVsIGRvbWFpbiwgYnV0IGlzIG5vdCBsaXN0ZWQgaW4gdGhlIHB1YmxpYyBzdWZmaXggbGlzdC5cbiAgICAgKi9cbiAgICBQYXJzZVJlc3VsdFR5cGVbXCJOb3RMaXN0ZWRcIl0gPSBcIk5PVF9MSVNURURcIjtcbiAgICAvKipcbiAgICAgKiBUaGlzIHBhcnNlIHJlc3VsdCBpcyByZXR1cm5lZCB3aGVuIHRoZSBnaXZlbiBob3N0bmFtZSBiZWxvbmdzIHRvIGEgdG9wLWxldmVsIGRvbWFpbiB0aGF0IGlzIGxpc3RlZCBpbiB0aGUgcHVibGljIHN1ZmZpeCBsaXN0LlxuICAgICAqL1xuICAgIFBhcnNlUmVzdWx0VHlwZVtcIkxpc3RlZFwiXSA9IFwiTElTVEVEXCI7XG59KShQYXJzZVJlc3VsdFR5cGUgfHwgKFBhcnNlUmVzdWx0VHlwZSA9IHt9KSk7XG5jb25zdCBnZXRBdEluZGV4ID0gKGFycmF5LCBpbmRleCkgPT4ge1xuICAgIHJldHVybiBpbmRleCA+PSAwICYmIGluZGV4IDwgYXJyYXkubGVuZ3RoID8gYXJyYXlbaW5kZXhdIDogdW5kZWZpbmVkO1xufTtcbmNvbnN0IHNwbGl0TGFiZWxzSW50b0RvbWFpbnMgPSAobGFiZWxzLCBpbmRleCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHN1YkRvbWFpbnM6IGxhYmVscy5zbGljZSgwLCBNYXRoLm1heCgwLCBpbmRleCkpLFxuICAgICAgICBkb21haW46IGdldEF0SW5kZXgobGFiZWxzLCBpbmRleCksXG4gICAgICAgIHRvcExldmVsRG9tYWluczogbGFiZWxzLnNsaWNlKGluZGV4ICsgMSksXG4gICAgfTtcbn07XG5sZXQgcGFyc2VkSWNhbm5UcmllO1xubGV0IHBhcnNlZFByaXZhdGVUcmllO1xuLyoqXG4gKiBTcGxpdHMgdGhlIGdpdmVuIGhvc3RuYW1lIGluIHRvcExldmVsRG9tYWlucywgYSBkb21haW4gYW5kIHN1YkRvbWFpbnMuXG4gKi9cbmV4cG9ydCBjb25zdCBwYXJzZURvbWFpbiA9IChob3N0bmFtZSwgb3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IHNhbml0aXphdGlvblJlc3VsdCA9IHNhbml0aXplKGhvc3RuYW1lLCBvcHRpb25zKTtcbiAgICBpZiAoc2FuaXRpemF0aW9uUmVzdWx0LnR5cGUgPT09IFNhbml0aXphdGlvblJlc3VsdFR5cGUuRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IFBhcnNlUmVzdWx0VHlwZS5JbnZhbGlkLFxuICAgICAgICAgICAgaG9zdG5hbWUsXG4gICAgICAgICAgICBlcnJvcnM6IHNhbml0aXphdGlvblJlc3VsdC5lcnJvcnMsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChzYW5pdGl6YXRpb25SZXN1bHQudHlwZSA9PT0gU2FuaXRpemF0aW9uUmVzdWx0VHlwZS5WYWxpZElwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBQYXJzZVJlc3VsdFR5cGUuSXAsXG4gICAgICAgICAgICBob3N0bmFtZTogc2FuaXRpemF0aW9uUmVzdWx0LmlwLFxuICAgICAgICAgICAgaXBWZXJzaW9uOiBzYW5pdGl6YXRpb25SZXN1bHQuaXBWZXJzaW9uLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCB7IGxhYmVscywgZG9tYWluIH0gPSBzYW5pdGl6YXRpb25SZXN1bHQ7XG4gICAgaWYgKGhvc3RuYW1lID09PSBcIlwiIHx8XG4gICAgICAgIFJFU0VSVkVEX1RPUF9MRVZFTF9ET01BSU5TLmluY2x1ZGVzKGxhYmVsc1tsYWJlbHMubGVuZ3RoIC0gMV0pKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBQYXJzZVJlc3VsdFR5cGUuUmVzZXJ2ZWQsXG4gICAgICAgICAgICBob3N0bmFtZTogZG9tYWluLFxuICAgICAgICAgICAgbGFiZWxzLFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBQYXJzZSB0aGUgc2VyaWFsaXplZCB0cmllIGxhemlseVxuICAgIHBhcnNlZEljYW5uVHJpZSA9IHBhcnNlZEljYW5uVHJpZSAhPT0gbnVsbCAmJiBwYXJzZWRJY2FublRyaWUgIT09IHZvaWQgMCA/IHBhcnNlZEljYW5uVHJpZSA6IHBhcnNlVHJpZShpY2FublRyaWUpO1xuICAgIHBhcnNlZFByaXZhdGVUcmllID0gcGFyc2VkUHJpdmF0ZVRyaWUgIT09IG51bGwgJiYgcGFyc2VkUHJpdmF0ZVRyaWUgIT09IHZvaWQgMCA/IHBhcnNlZFByaXZhdGVUcmllIDogcGFyc2VUcmllKHByaXZhdGVUcmllKTtcbiAgICBjb25zdCBpY2FublRsZHMgPSBsb29rVXBUbGRzSW5UcmllKGxhYmVscywgcGFyc2VkSWNhbm5UcmllKTtcbiAgICBjb25zdCBwcml2YXRlVGxkcyA9IGxvb2tVcFRsZHNJblRyaWUobGFiZWxzLCBwYXJzZWRQcml2YXRlVHJpZSk7XG4gICAgaWYgKGljYW5uVGxkcy5sZW5ndGggPT09IDAgJiYgcHJpdmF0ZVRsZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBQYXJzZVJlc3VsdFR5cGUuTm90TGlzdGVkLFxuICAgICAgICAgICAgaG9zdG5hbWU6IGRvbWFpbixcbiAgICAgICAgICAgIGxhYmVscyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgaW5kZXhPZlB1YmxpY1N1ZmZpeERvbWFpbiA9IGxhYmVscy5sZW5ndGggLSBNYXRoLm1heChwcml2YXRlVGxkcy5sZW5ndGgsIGljYW5uVGxkcy5sZW5ndGgpIC0gMTtcbiAgICBjb25zdCBpbmRleE9mSWNhbm5Eb21haW4gPSBsYWJlbHMubGVuZ3RoIC0gaWNhbm5UbGRzLmxlbmd0aCAtIDE7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyB0eXBlOiBQYXJzZVJlc3VsdFR5cGUuTGlzdGVkLCBob3N0bmFtZTogZG9tYWluLCBsYWJlbHMsIGljYW5uOiBzcGxpdExhYmVsc0ludG9Eb21haW5zKGxhYmVscywgaW5kZXhPZkljYW5uRG9tYWluKSB9LCBzcGxpdExhYmVsc0ludG9Eb21haW5zKGxhYmVscywgaW5kZXhPZlB1YmxpY1N1ZmZpeERvbWFpbikpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlLWRvbWFpbi5qcy5tYXAiLCJleHBvcnQgZGVmYXVsdCBcImtyZD5jbyxlZHU8cGw+YXJ0LGdsaXdpY2Usa3Jha293LHBvem5hbix3cm9jLHpha29wYW5lLGJlZXAsZWNvbW1lcmNlLXNob3AsY2ZvbGtzLGRmaXJtYSxka29udG8seW91MixzaG9wYXJlbmEsaG9tZXNrbGVwLHNkc2Nsb3VkLHVuaWNsb3VkLGtyYXNuaWssbGVjem5hLGx1YmFydG93LGx1Ymxpbixwb25pYXRvd2Esc3dpZG5payxjbyx0b3J1bixzaW1wbGVzaXRlLG15c3ByZWFkc2hvcCxnZGEsZ2RhbnNrLGdkeW5pYSxtZWQsc29wb3QsYmllbHNrbzx1cz5kZT5saWI8Y2xvdWRucyxkcnVkLGlzLWJ5LGxhbmQtNC1zYWxlLHN0dWZmLTQtc2FsZSxoZWxpb2hvc3QsZW5zY2FsZWQ+cGh4PG1pcmNsb3VkLG5nbyxnb2xmZmFuLG5vaXAscG9pbnR0byxmcmVlZGRucyxzcnY+Z2gsZ2w8cGxhdHRlcnAsc2VydmVybmFtZTxkZXY+MTJjaGFycyxwYW5lbCxhdXRvY29kZSxsY2w+KjxsY2xzdGFnZT4qPHN0Zz4qPHN0Z3N0YWdlPio8cGFnZXMscjIsd29ya2VycyxjdXJ2LGRlbm8sZGVuby1zdGFnaW5nLGRldGEsZXZlcnZhdWx0PnJlbGF5PGZseSxnaXRodWJwcmV2aWV3LGdhdGV3YXk+Kjxpcy1hLGlzZXJ2LHJ1bmNvbnRhaW5lcnMsbG9jYWxjZXJ0PnVzZXI+Kjw8bG9naW5saW5lLGJhcnN5LG1lZGlhdGVjaCxtb2R4LG5ncm9rLG5ncm9rLWZyZWUsaXMtY29vbCxpcy1ub3QtYSxsb2NhbHBsYXllcix4bWl0LHBsYXR0ZXItYXBwLHJlcGxpdD5hcmNoZXIsYm9uZXMsY2FuYXJ5LGdsb2JhbCxoYWNrZXIsaWQsamFuZXdheSxraW0sa2lyYSxraXJrLG9kbyxwYXJpcyxwaWNhcmQscGlrZSxwcmVyZWxlYXNlLHJlZWQscmlrZXIsc2lza28sc3BvY2ssc3RhZ2luZyxzdWx1LHRhcnBpdCx0ZWFtcyx0dWNrZXIsd2VzbGV5LHdvcmY8Y3JtPmQ+Kjx3Pio8d2E+Kjx3Yj4qPHdjPio8d2Q+Kjx3ZT4qPHdmPio8PHZlcmNlbCx3ZWJoYXJlPio8PGl0PjEyY2hhcnMsYmxvZ3Nwb3QsaWJ4b3MsaWxpYWRib3hvcyxuZWVuPmpjPHRpbT5vcGVuPmplbGFzdGljPmNsb3VkPDw8MTYtYiwzMi1iLDY0LWIsMTIzaG9tZXBhZ2UsbXlzcHJlYWRzaG9wLHN5bmNsb3VkPHBybz4xMmNoYXJzLGNsb3VkbnMsZG5zdHJhY2U+YmNpPGJhcnN5LG5ncm9rPHVhPmNjLGluZixsdGQsY3gsaWUsYml6LGNvLHBwLHY8dG8+NjExLG95YSx4MCxxdWlja2Nvbm5lY3Q+ZGlyZWN0PHZwbnBsdXM8Y29tPmEyaG9zdGVkLGNwc2VydmVyLGFkb2JlYWVtY2xvdWQ+ZGV2Pio8PGFmcmljYSxhaXJraXRhcHBzLGFpcmtpdGFwcHMtYXUsYWl2ZW5jbG91ZCxrYXNzZXJ2ZXIsYW1hem9uYXdzPmFmLXNvdXRoLTE+ZXhlY3V0ZS1hcGksZW1yYXBwdWktcHJvZCxlbXJub3RlYm9va3MtcHJvZCxlbXJzdHVkaW8tcHJvZCxkdWFsc3RhY2s+czMsczMtYWNjZXNzcG9pbnQsczMtd2Vic2l0ZTxzMyxzMy1hY2Nlc3Nwb2ludCxzMy1vYmplY3QtbGFtYmRhLHMzLXdlYnNpdGUsYXdzLWNsb3VkOT53ZWJ2aWV3LWFzc2V0czxjbG91ZDk+dmZzLHdlYnZpZXctYXNzZXRzPDxhcC1lYXN0LTE+ZXhlY3V0ZS1hcGksZW1yYXBwdWktcHJvZCxlbXJub3RlYm9va3MtcHJvZCxlbXJzdHVkaW8tcHJvZCxkdWFsc3RhY2s+czMsczMtYWNjZXNzcG9pbnQ8czMsczMtYWNjZXNzcG9pbnQsczMtb2JqZWN0LWxhbWJkYSxzMy13ZWJzaXRlLGF3cy1jbG91ZDk+d2Vidmlldy1hc3NldHM8Y2xvdWQ5PnZmcyx3ZWJ2aWV3LWFzc2V0czw8YXAtbm9ydGhlYXN0LTE+ZXhlY3V0ZS1hcGksZW1yYXBwdWktcHJvZCxlbXJub3RlYm9va3MtcHJvZCxlbXJzdHVkaW8tcHJvZCxkdWFsc3RhY2s+czMsczMtYWNjZXNzcG9pbnQsczMtd2Vic2l0ZTxzMyxzMy1hY2Nlc3Nwb2ludCxzMy1vYmplY3QtbGFtYmRhLHMzLXdlYnNpdGUsYW5hbHl0aWNzLWdhdGV3YXksYXdzLWNsb3VkOT53ZWJ2aWV3LWFzc2V0czxjbG91ZDk+dmZzLHdlYnZpZXctYXNzZXRzPDxhcC1ub3J0aGVhc3QtMj5leGVjdXRlLWFwaSxlbXJhcHB1aS1wcm9kLGVtcm5vdGVib29rcy1wcm9kLGVtcnN0dWRpby1wcm9kLGR1YWxzdGFjaz5zMyxzMy1hY2Nlc3Nwb2ludCxzMy13ZWJzaXRlPHMzLHMzLWFjY2Vzc3BvaW50LHMzLW9iamVjdC1sYW1iZGEsczMtd2Vic2l0ZSxhbmFseXRpY3MtZ2F0ZXdheSxhd3MtY2xvdWQ5PndlYnZpZXctYXNzZXRzPGNsb3VkOT52ZnMsd2Vidmlldy1hc3NldHM8PGFwLW5vcnRoZWFzdC0zPmV4ZWN1dGUtYXBpLGVtcmFwcHVpLXByb2QsZW1ybm90ZWJvb2tzLXByb2QsZW1yc3R1ZGlvLXByb2QsZHVhbHN0YWNrPnMzLHMzLWFjY2Vzc3BvaW50LHMzLXdlYnNpdGU8czMsczMtYWNjZXNzcG9pbnQsczMtb2JqZWN0LWxhbWJkYSxzMy13ZWJzaXRlLGF3cy1jbG91ZDk+d2Vidmlldy1hc3NldHM8Y2xvdWQ5PnZmcyx3ZWJ2aWV3LWFzc2V0czw8YXAtc291dGgtMT5leGVjdXRlLWFwaSxlbXJhcHB1aS1wcm9kLGVtcm5vdGVib29rcy1wcm9kLGVtcnN0dWRpby1wcm9kLGR1YWxzdGFjaz5zMyxzMy1hY2Nlc3Nwb2ludCxzMy13ZWJzaXRlPHMzLHMzLWFjY2Vzc3BvaW50LHMzLW9iamVjdC1sYW1iZGEsczMtd2Vic2l0ZSxhbmFseXRpY3MtZ2F0ZXdheSxhd3MtY2xvdWQ5PndlYnZpZXctYXNzZXRzPGNsb3VkOT52ZnMsd2Vidmlldy1hc3NldHM8PGFwLXNvdXRoLTI+ZXhlY3V0ZS1hcGksZW1yYXBwdWktcHJvZCxlbXJub3RlYm9va3MtcHJvZCxlbXJzdHVkaW8tcHJvZCxkdWFsc3RhY2s+czMsczMtYWNjZXNzcG9pbnQ8czMsczMtYWNjZXNzcG9pbnQsczMtb2JqZWN0LWxhbWJkYSxzMy13ZWJzaXRlPGFwLXNvdXRoZWFzdC0xPmV4ZWN1dGUtYXBpLGVtcmFwcHVpLXByb2QsZW1ybm90ZWJvb2tzLXByb2QsZW1yc3R1ZGlvLXByb2QsZHVhbHN0YWNrPnMzLHMzLWFjY2Vzc3BvaW50LHMzLXdlYnNpdGU8czMsczMtYWNjZXNzcG9pbnQsczMtb2JqZWN0LWxhbWJkYSxzMy13ZWJzaXRlLGFuYWx5dGljcy1nYXRld2F5LGF3cy1jbG91ZDk+d2Vidmlldy1hc3NldHM8Y2xvdWQ5PnZmcyx3ZWJ2aWV3LWFzc2V0czw8YXAtc291dGhlYXN0LTI+ZXhlY3V0ZS1hcGksZW1yYXBwdWktcHJvZCxlbXJub3RlYm9va3MtcHJvZCxlbXJzdHVkaW8tcHJvZCxkdWFsc3RhY2s+czMsczMtYWNjZXNzcG9pbnQsczMtd2Vic2l0ZTxzMyxzMy1hY2Nlc3Nwb2ludCxzMy1vYmplY3QtbGFtYmRhLHMzLXdlYnNpdGUsYW5hbHl0aWNzLWdhdGV3YXksYXdzLWNsb3VkOT53ZWJ2aWV3LWFzc2V0czxjbG91ZDk+dmZzLHdlYnZpZXctYXNzZXRzPDxhcC1zb3V0aGVhc3QtMz5leGVjdXRlLWFwaSxlbXJhcHB1aS1wcm9kLGVtcm5vdGVib29rcy1wcm9kLGVtcnN0dWRpby1wcm9kLGR1YWxzdGFjaz5zMyxzMy1hY2Nlc3Nwb2ludDxzMyxzMy1hY2Nlc3Nwb2ludCxzMy1vYmplY3QtbGFtYmRhLHMzLXdlYnNpdGU8YXAtc291dGhlYXN0LTQ+ZXhlY3V0ZS1hcGksZW1yYXBwdWktcHJvZCxlbXJub3RlYm9va3MtcHJvZCxlbXJzdHVkaW8tcHJvZCxkdWFsc3RhY2s+czMsczMtYWNjZXNzcG9pbnQ8czMsczMtYWNjZXNzcG9pbnQsczMtb2JqZWN0LWxhbWJkYSxzMy13ZWJzaXRlPGNhLWNlbnRyYWwtMT5leGVjdXRlLWFwaSxlbXJhcHB1aS1wcm9kLGVtcm5vdGVib29rcy1wcm9kLGVtcnN0dWRpby1wcm9kLGR1YWxzdGFjaz5zMyxzMy1hY2Nlc3Nwb2ludCxzMy1hY2Nlc3Nwb2ludC1maXBzLHMzLWZpcHMsczMtd2Vic2l0ZTxzMyxzMy1hY2Nlc3Nwb2ludCxzMy1hY2Nlc3Nwb2ludC1maXBzLHMzLWZpcHMsczMtb2JqZWN0LWxhbWJkYSxzMy13ZWJzaXRlLGF3cy1jbG91ZDk+d2Vidmlldy1hc3NldHM8Y2xvdWQ5PnZmcyx3ZWJ2aWV3LWFzc2V0czw8Y2Etd2VzdC0xPmV4ZWN1dGUtYXBpLGVtcmFwcHVpLXByb2QsZW1ybm90ZWJvb2tzLXByb2QsZW1yc3R1ZGlvLXByb2QsZHVhbHN0YWNrPnMzLHMzLWFjY2Vzc3BvaW50LHMzLWFjY2Vzc3BvaW50LWZpcHMsczMtZmlwcyxzMy13ZWJzaXRlPHMzLHMzLWFjY2Vzc3BvaW50LHMzLWFjY2Vzc3BvaW50LWZpcHMsczMtZmlwcyxzMy13ZWJzaXRlPGV1LWNlbnRyYWwtMT5leGVjdXRlLWFwaSxlbXJhcHB1aS1wcm9kLGVtcm5vdGVib29rcy1wcm9kLGVtcnN0dWRpby1wcm9kLGR1YWxzdGFjaz5zMyxzMy1hY2Nlc3Nwb2ludCxzMy13ZWJzaXRlPHMzLHMzLWFjY2Vzc3BvaW50LHMzLW9iamVjdC1sYW1iZGEsczMtd2Vic2l0ZSxhbmFseXRpY3MtZ2F0ZXdheSxhd3MtY2xvdWQ5PndlYnZpZXctYXNzZXRzPGNsb3VkOT52ZnMsd2Vidmlldy1hc3NldHM8PGV1LWNlbnRyYWwtMj5leGVjdXRlLWFwaSxlbXJhcHB1aS1wcm9kLGVtcm5vdGVib29rcy1wcm9kLGVtcnN0dWRpby1wcm9kLGR1YWxzdGFjaz5zMyxzMy1hY2Nlc3Nwb2ludDxzMyxzMy1hY2Nlc3Nwb2ludCxzMy1vYmplY3QtbGFtYmRhLHMzLXdlYnNpdGU8ZXUtbm9ydGgtMT5leGVjdXRlLWFwaSxlbXJhcHB1aS1wcm9kLGVtcm5vdGVib29rcy1wcm9kLGVtcnN0dWRpby1wcm9kLGR1YWxzdGFjaz5zMyxzMy1hY2Nlc3Nwb2ludDxzMyxzMy1hY2Nlc3Nwb2ludCxzMy1vYmplY3QtbGFtYmRhLHMzLXdlYnNpdGUsYXdzLWNsb3VkOT53ZWJ2aWV3LWFzc2V0czxjbG91ZDk+dmZzLHdlYnZpZXctYXNzZXRzPDxldS1zb3V0aC0xPmV4ZWN1dGUtYXBpLGVtcmFwcHVpLXByb2QsZW1ybm90ZWJvb2tzLXByb2QsZW1yc3R1ZGlvLXByb2QsZHVhbHN0YWNrPnMzLHMzLWFjY2Vzc3BvaW50LHMzLXdlYnNpdGU8czMsczMtYWNjZXNzcG9pbnQsczMtb2JqZWN0LWxhbWJkYSxzMy13ZWJzaXRlLGF3cy1jbG91ZDk+d2Vidmlldy1hc3NldHM8Y2xvdWQ5PnZmcyx3ZWJ2aWV3LWFzc2V0czw8ZXUtc291dGgtMj5leGVjdXRlLWFwaSxlbXJhcHB1aS1wcm9kLGVtcm5vdGVib29rcy1wcm9kLGVtcnN0dWRpby1wcm9kLGR1YWxzdGFjaz5zMyxzMy1hY2Nlc3Nwb2ludDxzMyxzMy1hY2Nlc3Nwb2ludCxzMy1vYmplY3QtbGFtYmRhLHMzLXdlYnNpdGU8ZXUtd2VzdC0xPmV4ZWN1dGUtYXBpLGVtcmFwcHVpLXByb2QsZW1ybm90ZWJvb2tzLXByb2QsZW1yc3R1ZGlvLXByb2QsZHVhbHN0YWNrPnMzLHMzLWFjY2Vzc3BvaW50LHMzLXdlYnNpdGU8czMsczMtYWNjZXNzcG9pbnQsczMtZGVwcmVjYXRlZCxzMy1vYmplY3QtbGFtYmRhLHMzLXdlYnNpdGUsYW5hbHl0aWNzLWdhdGV3YXksYXdzLWNsb3VkOT53ZWJ2aWV3LWFzc2V0czxjbG91ZDk+dmZzLHdlYnZpZXctYXNzZXRzPDxldS13ZXN0LTI+ZXhlY3V0ZS1hcGksZW1yYXBwdWktcHJvZCxlbXJub3RlYm9va3MtcHJvZCxlbXJzdHVkaW8tcHJvZCxkdWFsc3RhY2s+czMsczMtYWNjZXNzcG9pbnQ8czMsczMtYWNjZXNzcG9pbnQsczMtb2JqZWN0LWxhbWJkYSxzMy13ZWJzaXRlLGF3cy1jbG91ZDk+d2Vidmlldy1hc3NldHM8Y2xvdWQ5PnZmcyx3ZWJ2aWV3LWFzc2V0czw8ZXUtd2VzdC0zPmV4ZWN1dGUtYXBpLGVtcmFwcHVpLXByb2QsZW1ybm90ZWJvb2tzLXByb2QsZW1yc3R1ZGlvLXByb2QsZHVhbHN0YWNrPnMzLHMzLWFjY2Vzc3BvaW50LHMzLXdlYnNpdGU8czMsczMtYWNjZXNzcG9pbnQsczMtb2JqZWN0LWxhbWJkYSxzMy13ZWJzaXRlLGF3cy1jbG91ZDk+d2Vidmlldy1hc3NldHM8Y2xvdWQ5PnZmcyx3ZWJ2aWV3LWFzc2V0czw8aWwtY2VudHJhbC0xPmV4ZWN1dGUtYXBpLGVtcmFwcHVpLXByb2QsZW1ybm90ZWJvb2tzLXByb2QsZW1yc3R1ZGlvLXByb2QsZHVhbHN0YWNrPnMzLHMzLWFjY2Vzc3BvaW50PHMzLHMzLWFjY2Vzc3BvaW50LHMzLW9iamVjdC1sYW1iZGEsczMtd2Vic2l0ZSxhd3MtY2xvdWQ5PndlYnZpZXctYXNzZXRzPGNsb3VkOT52ZnM8PG1lLWNlbnRyYWwtMT5leGVjdXRlLWFwaSxlbXJhcHB1aS1wcm9kLGVtcm5vdGVib29rcy1wcm9kLGVtcnN0dWRpby1wcm9kLGR1YWxzdGFjaz5zMyxzMy1hY2Nlc3Nwb2ludDxzMyxzMy1hY2Nlc3Nwb2ludCxzMy1vYmplY3QtbGFtYmRhLHMzLXdlYnNpdGU8bWUtc291dGgtMT5leGVjdXRlLWFwaSxlbXJhcHB1aS1wcm9kLGVtcm5vdGVib29rcy1wcm9kLGVtcnN0dWRpby1wcm9kLGR1YWxzdGFjaz5zMyxzMy1hY2Nlc3Nwb2ludDxzMyxzMy1hY2Nlc3Nwb2ludCxzMy1vYmplY3QtbGFtYmRhLHMzLXdlYnNpdGUsYXdzLWNsb3VkOT53ZWJ2aWV3LWFzc2V0czxjbG91ZDk+dmZzLHdlYnZpZXctYXNzZXRzPDxzYS1lYXN0LTE+ZXhlY3V0ZS1hcGksZW1yYXBwdWktcHJvZCxlbXJub3RlYm9va3MtcHJvZCxlbXJzdHVkaW8tcHJvZCxkdWFsc3RhY2s+czMsczMtYWNjZXNzcG9pbnQsczMtd2Vic2l0ZTxzMyxzMy1hY2Nlc3Nwb2ludCxzMy1vYmplY3QtbGFtYmRhLHMzLXdlYnNpdGUsYXdzLWNsb3VkOT53ZWJ2aWV3LWFzc2V0czxjbG91ZDk+dmZzLHdlYnZpZXctYXNzZXRzPDx1cy1lYXN0LTE+ZXhlY3V0ZS1hcGksZW1yYXBwdWktcHJvZCxlbXJub3RlYm9va3MtcHJvZCxlbXJzdHVkaW8tcHJvZCxkdWFsc3RhY2s+czMsczMtYWNjZXNzcG9pbnQsczMtYWNjZXNzcG9pbnQtZmlwcyxzMy1maXBzLHMzLXdlYnNpdGU8czMsczMtYWNjZXNzcG9pbnQsczMtYWNjZXNzcG9pbnQtZmlwcyxzMy1kZXByZWNhdGVkLHMzLWZpcHMsczMtb2JqZWN0LWxhbWJkYSxzMy13ZWJzaXRlLGFuYWx5dGljcy1nYXRld2F5LGF3cy1jbG91ZDk+d2Vidmlldy1hc3NldHM8Y2xvdWQ5PnZmcyx3ZWJ2aWV3LWFzc2V0czw8dXMtZWFzdC0yPmV4ZWN1dGUtYXBpLGVtcmFwcHVpLXByb2QsZW1ybm90ZWJvb2tzLXByb2QsZW1yc3R1ZGlvLXByb2QsZHVhbHN0YWNrPnMzLHMzLWFjY2Vzc3BvaW50LHMzLWFjY2Vzc3BvaW50LWZpcHMsczMtZmlwczxzMyxzMy1hY2Nlc3Nwb2ludCxzMy1hY2Nlc3Nwb2ludC1maXBzLHMzLWRlcHJlY2F0ZWQsczMtZmlwcyxzMy1vYmplY3QtbGFtYmRhLHMzLXdlYnNpdGUsYW5hbHl0aWNzLWdhdGV3YXksYXdzLWNsb3VkOT53ZWJ2aWV3LWFzc2V0czxjbG91ZDk+dmZzLHdlYnZpZXctYXNzZXRzPDx1cy1nb3YtZWFzdC0xPmV4ZWN1dGUtYXBpLGVtcmFwcHVpLXByb2QsZW1ybm90ZWJvb2tzLXByb2QsZW1yc3R1ZGlvLXByb2QsZHVhbHN0YWNrPnMzLHMzLWFjY2Vzc3BvaW50LHMzLWFjY2Vzc3BvaW50LWZpcHMsczMtZmlwczxzMyxzMy1hY2Nlc3Nwb2ludCxzMy1hY2Nlc3Nwb2ludC1maXBzLHMzLWZpcHMsczMtb2JqZWN0LWxhbWJkYSxzMy13ZWJzaXRlPHVzLWdvdi13ZXN0LTE+ZXhlY3V0ZS1hcGksZW1yYXBwdWktcHJvZCxlbXJub3RlYm9va3MtcHJvZCxlbXJzdHVkaW8tcHJvZCxkdWFsc3RhY2s+czMsczMtYWNjZXNzcG9pbnQsczMtYWNjZXNzcG9pbnQtZmlwcyxzMy1maXBzPHMzLHMzLWFjY2Vzc3BvaW50LHMzLWFjY2Vzc3BvaW50LWZpcHMsczMtZmlwcyxzMy1vYmplY3QtbGFtYmRhLHMzLXdlYnNpdGU8dXMtd2VzdC0xPmV4ZWN1dGUtYXBpLGVtcmFwcHVpLXByb2QsZW1ybm90ZWJvb2tzLXByb2QsZW1yc3R1ZGlvLXByb2QsZHVhbHN0YWNrPnMzLHMzLWFjY2Vzc3BvaW50LHMzLWFjY2Vzc3BvaW50LWZpcHMsczMtZmlwcyxzMy13ZWJzaXRlPHMzLHMzLWFjY2Vzc3BvaW50LHMzLWFjY2Vzc3BvaW50LWZpcHMsczMtZmlwcyxzMy1vYmplY3QtbGFtYmRhLHMzLXdlYnNpdGUsYXdzLWNsb3VkOT53ZWJ2aWV3LWFzc2V0czxjbG91ZDk+dmZzLHdlYnZpZXctYXNzZXRzPDx1cy13ZXN0LTI+ZXhlY3V0ZS1hcGksZW1yYXBwdWktcHJvZCxlbXJub3RlYm9va3MtcHJvZCxlbXJzdHVkaW8tcHJvZCxkdWFsc3RhY2s+czMsczMtYWNjZXNzcG9pbnQsczMtYWNjZXNzcG9pbnQtZmlwcyxzMy1maXBzLHMzLXdlYnNpdGU8czMsczMtYWNjZXNzcG9pbnQsczMtYWNjZXNzcG9pbnQtZmlwcyxzMy1kZXByZWNhdGVkLHMzLWZpcHMsczMtb2JqZWN0LWxhbWJkYSxzMy13ZWJzaXRlLGFuYWx5dGljcy1nYXRld2F5LGF3cy1jbG91ZDk+d2Vidmlldy1hc3NldHM8Y2xvdWQ5PnZmcyx3ZWJ2aWV3LWFzc2V0czw8Y29tcHV0ZT4qPGNvbXB1dGUtMT4qPGFpcmZsb3c+YWYtc291dGgtMT4qPGFwLWVhc3QtMT4qPGFwLW5vcnRoZWFzdC0xPio8YXAtbm9ydGhlYXN0LTI+KjxhcC1ub3J0aGVhc3QtMz4qPGFwLXNvdXRoLTE+KjxhcC1zb3V0aC0yPio8YXAtc291dGhlYXN0LTE+KjxhcC1zb3V0aGVhc3QtMj4qPGFwLXNvdXRoZWFzdC0zPio8YXAtc291dGhlYXN0LTQ+KjxjYS1jZW50cmFsLTE+KjxjYS13ZXN0LTE+KjxldS1jZW50cmFsLTE+KjxldS1jZW50cmFsLTI+KjxldS1ub3J0aC0xPio8ZXUtc291dGgtMT4qPGV1LXNvdXRoLTI+KjxldS13ZXN0LTE+KjxldS13ZXN0LTI+KjxldS13ZXN0LTM+KjxpbC1jZW50cmFsLTE+KjxtZS1jZW50cmFsLTE+KjxtZS1zb3V0aC0xPio8c2EtZWFzdC0xPio8dXMtZWFzdC0xPio8dXMtZWFzdC0yPio8dXMtd2VzdC0xPio8dXMtd2VzdC0yPio8PHMzLHMzLTEsczMtYXAtZWFzdC0xLHMzLWFwLW5vcnRoZWFzdC0xLHMzLWFwLW5vcnRoZWFzdC0yLHMzLWFwLW5vcnRoZWFzdC0zLHMzLWFwLXNvdXRoLTEsczMtYXAtc291dGhlYXN0LTEsczMtYXAtc291dGhlYXN0LTIsczMtY2EtY2VudHJhbC0xLHMzLWV1LWNlbnRyYWwtMSxzMy1ldS1ub3J0aC0xLHMzLWV1LXdlc3QtMSxzMy1ldS13ZXN0LTIsczMtZXUtd2VzdC0zLHMzLWV4dGVybmFsLTEsczMtZmlwcy11cy1nb3YtZWFzdC0xLHMzLWZpcHMtdXMtZ292LXdlc3QtMSxzMy1nbG9iYWw+YWNjZXNzcG9pbnQ+bXJhcDw8czMtbWUtc291dGgtMSxzMy1zYS1lYXN0LTEsczMtdXMtZWFzdC0yLHMzLXVzLWdvdi1lYXN0LTEsczMtdXMtZ292LXdlc3QtMSxzMy11cy13ZXN0LTEsczMtdXMtd2VzdC0yLHMzLXdlYnNpdGUtYXAtbm9ydGhlYXN0LTEsczMtd2Vic2l0ZS1hcC1zb3V0aGVhc3QtMSxzMy13ZWJzaXRlLWFwLXNvdXRoZWFzdC0yLHMzLXdlYnNpdGUtZXUtd2VzdC0xLHMzLXdlYnNpdGUtc2EtZWFzdC0xLHMzLXdlYnNpdGUtdXMtZWFzdC0xLHMzLXdlYnNpdGUtdXMtZ292LXdlc3QtMSxzMy13ZWJzaXRlLXVzLXdlc3QtMSxzMy13ZWJzaXRlLXVzLXdlc3QtMixlbGI+Kjw8YW1hem9uY29nbml0bz5hZi1zb3V0aC0xPmF1dGg8YXAtZWFzdC0xPmF1dGg8YXAtbm9ydGhlYXN0LTE+YXV0aDxhcC1ub3J0aGVhc3QtMj5hdXRoPGFwLW5vcnRoZWFzdC0zPmF1dGg8YXAtc291dGgtMT5hdXRoPGFwLXNvdXRoLTI+YXV0aDxhcC1zb3V0aGVhc3QtMT5hdXRoPGFwLXNvdXRoZWFzdC0yPmF1dGg8YXAtc291dGhlYXN0LTM+YXV0aDxhcC1zb3V0aGVhc3QtND5hdXRoPGNhLWNlbnRyYWwtMT5hdXRoPGNhLXdlc3QtMT5hdXRoPGV1LWNlbnRyYWwtMT5hdXRoPGV1LWNlbnRyYWwtMj5hdXRoPGV1LW5vcnRoLTE+YXV0aDxldS1zb3V0aC0xPmF1dGg8ZXUtc291dGgtMj5hdXRoPGV1LXdlc3QtMT5hdXRoPGV1LXdlc3QtMj5hdXRoPGV1LXdlc3QtMz5hdXRoPGlsLWNlbnRyYWwtMT5hdXRoPG1lLWNlbnRyYWwtMT5hdXRoPG1lLXNvdXRoLTE+YXV0aDxzYS1lYXN0LTE+YXV0aDx1cy1lYXN0LTE+YXV0aCxhdXRoLWZpcHM8dXMtZWFzdC0yPmF1dGgsYXV0aC1maXBzPHVzLWdvdi13ZXN0LTE+YXV0aC1maXBzPHVzLXdlc3QtMT5hdXRoLGF1dGgtZmlwczx1cy13ZXN0LTI+YXV0aCxhdXRoLWZpcHM8PGFtcGxpZnlhcHAsYXdzYXBwcnVubmVyPio8YXdzYXBwcyxlbGFzdGljYmVhbnN0YWxrPmFmLXNvdXRoLTEsYXAtZWFzdC0xLGFwLW5vcnRoZWFzdC0xLGFwLW5vcnRoZWFzdC0yLGFwLW5vcnRoZWFzdC0zLGFwLXNvdXRoLTEsYXAtc291dGhlYXN0LTEsYXAtc291dGhlYXN0LTIsYXAtc291dGhlYXN0LTMsY2EtY2VudHJhbC0xLGV1LWNlbnRyYWwtMSxldS1ub3J0aC0xLGV1LXNvdXRoLTEsZXUtd2VzdC0xLGV1LXdlc3QtMixldS13ZXN0LTMsaWwtY2VudHJhbC0xLG1lLXNvdXRoLTEsc2EtZWFzdC0xLHVzLWVhc3QtMSx1cy1lYXN0LTIsdXMtZ292LWVhc3QtMSx1cy1nb3Ytd2VzdC0xLHVzLXdlc3QtMSx1cy13ZXN0LTI8YXdzZ2xvYmFsYWNjZWxlcmF0b3Isc2lpaXRlcyxhcHBzcGFjZWhvc3RlZCxhcHBzcGFjZXVzZXJjb250ZW50LG9uLWFwdGlibGUsbXlhc3VzdG9yLGJhbGVuYS1kZXZpY2VzLGJldGFpbmFib3gsYm91dGlyLGJwbGFjZWQsY2FmanMsY2FudmEtYXBwcyxjZG43Ny1zdG9yYWdlLGJyLGNuLGRlLGV1LGpwbixtZXgscnUsc2EsdWssdXMsemEsY2xldmVyLWNsb3VkPnNlcnZpY2VzPio8PGRuc2FicixqZGV2Y2xvdWQsd3BkZXZjbG91ZCxjZi1pcGZzLGNsb3VkZmxhcmUtaXBmcyx0cnljbG91ZGZsYXJlLGNvLGN1c3RvbWVyLW9jaT4qLG9jaT4qPG9jcD4qPG9jcz4qPDxidWlsdHdpdGhkYXJrLGRhdGFkZXRlY3Q+ZGVtbyxpbnN0YW5jZTxkYXR0b2xvY2FsLGRhdHRvcmVsYXksZGF0dG93ZWIsbXlkYXR0byxkZG5zNSxkaWdpdGFsb2NlYW5zcGFjZXM+KjxkaXNjb3Jkc2F5cyxkaXNjb3Jkc2V6LGRyYXlkZG5zLGRyZWFtaG9zdGVycyxkdXJ1bWlzLG15ZHJvYm8sYmxvZ2RucyxjZWNoaXJlLGRuc2FsaWFzLGRuc2Rvam8sZG9lc250ZXhpc3QsZG9udGV4aXN0LGRvb21kbnMsZHluLW8tc2F1cixkeW5hbGlhcyxkeW5kbnMtYXQtaG9tZSxkeW5kbnMtYXQtd29yayxkeW5kbnMtYmxvZyxkeW5kbnMtZnJlZSxkeW5kbnMtaG9tZSxkeW5kbnMtaXAsZHluZG5zLW1haWwsZHluZG5zLW9mZmljZSxkeW5kbnMtcGljcyxkeW5kbnMtcmVtb3RlLGR5bmRucy1zZXJ2ZXIsZHluZG5zLXdlYixkeW5kbnMtd2lraSxkeW5kbnMtd29yayxlc3QtYS1sYS1tYWlzb24sZXN0LWEtbGEtbWFzaW9uLGVzdC1sZS1wYXRyb24sZXN0LW1vbi1ibG9ndWV1cixmcm9tLWFrLGZyb20tYWwsZnJvbS1hcixmcm9tLWNhLGZyb20tY3QsZnJvbS1kYyxmcm9tLWRlLGZyb20tZmwsZnJvbS1nYSxmcm9tLWhpLGZyb20taWEsZnJvbS1pZCxmcm9tLWlsLGZyb20taW4sZnJvbS1rcyxmcm9tLWt5LGZyb20tbWEsZnJvbS1tZCxmcm9tLW1pLGZyb20tbW4sZnJvbS1tbyxmcm9tLW1zLGZyb20tbXQsZnJvbS1uYyxmcm9tLW5kLGZyb20tbmUsZnJvbS1uaCxmcm9tLW5qLGZyb20tbm0sZnJvbS1udixmcm9tLW9oLGZyb20tb2ssZnJvbS1vcixmcm9tLXBhLGZyb20tcHIsZnJvbS1yaSxmcm9tLXNjLGZyb20tc2QsZnJvbS10bixmcm9tLXR4LGZyb20tdXQsZnJvbS12YSxmcm9tLXZ0LGZyb20td2EsZnJvbS13aSxmcm9tLXd2LGZyb20td3ksZ2V0bXlpcCxnb3RkbnMsaG9iYnktc2l0ZSxob21lbGludXgsaG9tZXVuaXgsaWFtYWxsYW1hLGlzLWEtYW5hcmNoaXN0LGlzLWEtYmxvZ2dlcixpcy1hLWJvb2trZWVwZXIsaXMtYS1idWxscy1mYW4saXMtYS1jYXRlcmVyLGlzLWEtY2hlZixpcy1hLWNvbnNlcnZhdGl2ZSxpcy1hLWNwYSxpcy1hLWN1YmljbGUtc2xhdmUsaXMtYS1kZW1vY3JhdCxpcy1hLWRlc2lnbmVyLGlzLWEtZG9jdG9yLGlzLWEtZmluYW5jaWFsYWR2aXNvcixpcy1hLWdlZWssaXMtYS1ncmVlbixpcy1hLWd1cnUsaXMtYS1oYXJkLXdvcmtlcixpcy1hLWh1bnRlcixpcy1hLWxhbmRzY2FwZXIsaXMtYS1sYXd5ZXIsaXMtYS1saWJlcmFsLGlzLWEtbGliZXJ0YXJpYW4saXMtYS1sbGFtYSxpcy1hLW11c2ljaWFuLGlzLWEtbmFzY2FyZmFuLGlzLWEtbnVyc2UsaXMtYS1wYWludGVyLGlzLWEtcGVyc29uYWx0cmFpbmVyLGlzLWEtcGhvdG9ncmFwaGVyLGlzLWEtcGxheWVyLGlzLWEtcmVwdWJsaWNhbixpcy1hLXJvY2tzdGFyLGlzLWEtc29jaWFsaXN0LGlzLWEtc3R1ZGVudCxpcy1hLXRlYWNoZXIsaXMtYS10ZWNoaWUsaXMtYS10aGVyYXBpc3QsaXMtYW4tYWNjb3VudGFudCxpcy1hbi1hY3Rvcixpcy1hbi1hY3RyZXNzLGlzLWFuLWFuYXJjaGlzdCxpcy1hbi1hcnRpc3QsaXMtYW4tZW5naW5lZXIsaXMtYW4tZW50ZXJ0YWluZXIsaXMtY2VydGlmaWVkLGlzLWdvbmUsaXMtaW50by1hbmltZSxpcy1pbnRvLWNhcnMsaXMtaW50by1jYXJ0b29ucyxpcy1pbnRvLWdhbWVzLGlzLWxlZXQsaXMtbm90LWNlcnRpZmllZCxpcy1zbGljayxpcy11YmVybGVldCxpcy13aXRoLXRoZWJhbmQsaXNhLWdlZWssaXNhLWhvY2tleW51dCxpc3NtYXJ0ZXJ0aGFueW91LGxpa2VzLXBpZSxsaWtlc2NhbmR5LG5lYXQtdXJsLHNhdmVzLXRoZS13aGFsZXMsc2VsZmlwLHNlbGxzLWZvci1sZXNzLHNlbGxzLWZvci11LHNlcnZlYmJzLHNpbXBsZS11cmwsc3BhY2UtdG8tcmVudCx0ZWFjaGVzLXlvZ2Esd3JpdGVzdGhpc2Jsb2csZGRuc2ZyZWUsZGRuc2dlZWssZ2lpemUsZ2xlZXplLGtvem93LGxvc2V5b3VyaXAsb29ndXksdGhld29ya3BjLG15dHVsZWFwLHR1bGVhcC1wYXJ0bmVycyxlbmNvcmVhcGksZXZlbm5vZGU+ZXUtMSxldS0yLGV1LTMsZXUtNCx1cy0xLHVzLTIsdXMtMyx1cy00PG9uZmFicmljYSxmYXN0bHktZWRnZSxmYXN0bHktdGVycmFyaXVtLGZhc3R2cHMtc2VydmVyLG15ZG9iaXNzLGZpcmViYXNlYXBwLGZsZHJ2LGZvcmdlYmxvY2tzLGZyYW1lcmNhbnZhcyxmcmVlYm94LW9zLGZyZWVib3hvcyxmcmVlbXlpcCxhbGlhc2VzMTIxLGdlbnRhcHBzLGdlbnRsZW50YXBpcyxnaXRodWJ1c2VyY29udGVudCwwZW1tPio8YXBwc3BvdD5yPio8PGJsb2dzcG90LGNvZGVzcG90LGdvb2dsZWFwaXMsZ29vZ2xlY29kZSxwYWdlc3BlZWRtb2JpbGl6ZXIscHVibGlzaHByb3h5LHdpdGhnb29nbGUsd2l0aHlvdXR1YmUsZ3JheWpheWxlYWd1ZXMsaGF0ZW5hYmxvZyxoYXRlbmFkaWFyeSxoZXJva3VhcHAsaGVyb2t1c3NsLGdyLHNtdXNoY2RuLHdwaG9zdGVkbWFpbCx3cG11Y2RuLHBpeG9saW5vLGFwcHMtMWFuZDEsbGl2ZS13ZWJzaXRlLGFtc2NvbXB1dGUsZG9wYWFzLGhvc3RlZC1ieS1wcmV2aWRlcj5wYWFzPGhvc3RldXI+cmFnLWNsb3VkLHJhZy1jbG91ZC1jaDxpay1zZXJ2ZXI+amNsb3VkLGpjbG91ZC12ZXItanBjPGplbGFzdGljPmRlbW88a2lsYXRpcm9uLG1hc3NpdmVncmlkPnBhYXM8d2FmYWljbG91ZD5qZWQsbG9uLHJ5ZDx3ZWJhZG9yc2l0ZSxqb3llbnQ+Y25zPio8PGt0aXN0b3J5LGxwdXNlcmNvbnRlbnQsbGlub2RlPm1lbWJlcnMsbm9kZWJhbGFuY2VyPio8PGxpbm9kZW9iamVjdHM+KjxsaW5vZGV1c2VyY29udGVudD5pcDxiYXJzeWNlbnRlcixiYXJzeW9ubGluZSxtYXplcGxheSxtaW5pc2VydmVyLGF0bWV0YSxmYnNieD5hcHBzPG1ldGVvcmFwcD5ldTxob3N0ZWRwaSxteXRoaWMtYmVhc3RzPmNhcmFjYWwsY3VzdG9tZXIsZmVudGlnZXIsbHlueCxvY2Vsb3Qsb25jaWxsYSxvbnphLHNwaGlueCx2cyx4LHlhbGk8bm9zcGFtcHJveHk+Y2xvdWQ8NHUsbmZzaG9zdCxhcixodSxrcixubyxxYyx1eSwzdXRpbGl0aWVzLGJsb2dzeXRlLGNpc2NvZnJlYWssZGFtbnNlcnZlcixkZG5za2luZyxkaXRjaHlvdXJpcCxkbnNpc2tpbmt5LGR5bm5zLGdlZWtnYWxheHksaGVhbHRoLWNhcmVyZWZvcm0saG9tZXNlY3VyaXR5bWFjLGhvbWVzZWN1cml0eXBjLG15YWN0aXZlZGlyZWN0b3J5LG15c2VjdXJpdHljYW1lcmEsbXl2bmMsbmV0LWZyZWFrcyxvbnRoZXdpZmkscG9pbnQydGhpcyxxdWlja3N5dGVzLHNlY3VyaXR5dGFjdGljcyxzZXJ2ZWJlZXIsc2VydmVjb3VudGVyc3RyaWtlLHNlcnZlZXhjaGFuZ2Usc2VydmVmdHAsc2VydmVnYW1lLHNlcnZlaGFsZmxpZmUsc2VydmVodHRwLHNlcnZlaHVtb3VyLHNlcnZlaXJjLHNlcnZlbXAzLHNlcnZlcDJwLHNlcnZlcGljcyxzZXJ2ZXF1YWtlLHNlcnZlc2FyY2FzbSxzdHVmZnRvcmVhZCx1bnVzdWFscGVyc29uLHdvcmtpc2JvcmluZywwMDF3d3csZGRuc2xpdmUsbXlpcGhvc3Qsb2JzZXJ2YWJsZXVzZXJjb250ZW50PnN0YXRpYzxzaW1wbGVzaXRlLG9yc2l0ZXMsb3BlcmF1bml0ZSxhdXRoZ2Vhci1zdGFnaW5nLGF1dGhnZWFyYXBwcyxza3lnZWFyYXBwLG91dHN5c3RlbXNjbG91ZCxvd25wcm92aWRlcixwZ2ZvZyxwYWdleGwsZ290cGFudGhlb24scGF5d2hpcmw+Kjx1cHN1bmFwcCxwbGF0dGVyLWFwcCxwb3N0bWFuLWVjaG8scHJnbXI+eGVuPHB5dGhvbmFueXdoZXJlPmV1PHFhMixhbHBoYS1teXFuYXBjbG91ZCxkZXYtbXlxbmFwY2xvdWQsbXljbG91ZG5hcyxteW5hc2Nsb3VkLG15cW5hcGNsb3VkLHF1YWxpZmlvYXBwLGxhZGVzayxxYnVzZXIscXVpcGVsZW1lbnRzPio8cmFja21hemUscmhjbG91ZCxvbnJlbmRlcixyZW5kZXI+YXBwPDE4MHIsZG9qaW4sc2FrdXJhdGFuLHNha3VyYXdlYix4MCxjb2RlPmJ1aWxkZXI+KjxkZXYtYnVpbGRlcj4qPHN0Zy1idWlsZGVyPio8PHNhbGVzZm9yY2U+cGxhdGZvcm0+Y29kZS1idWlsZGVyLXN0Zz50ZXN0PjAwMT4qPDw8PDxsb2dvaXAsc2NyeXNlYyxmaXJld2FsbC1nYXRld2F5LG15c2hvcGJsb2NrcyxteXNob3BpZnksc2hvcGl0c2l0ZSwxa2FwcCxhcHBjaGl6aSxhcHBsaW56aSxzaW5hYXBwLHZpcHNpbmFhcHAsYm91bnR5LWZ1bGw+YWxwaGEsYmV0YTxzdHJlYW1saXRhcHAsdHJ5LXNub3dwbG93LHBsYXlzdGF0aW9uLWNsb3VkLG15c3ByZWFkc2hvcCx3LWNvcnAtc3RhdGljYmxpdHosdy1jcmVkZW50aWFsbGVzcy1zdGF0aWNibGl0eix3LXN0YXRpY2JsaXR6LHN0YWNraGVyby1uZXR3b3JrLHN0ZGxpYj5hcGk8c3RyYXBpYXBwPm1lZGlhPHN0cmVhay1saW5rLHN0cmVha2xpbmtzLHN0cmVha3VzZXJjb250ZW50LHRlbXAtZG5zLGRzbXluYXMsZmFtaWx5ZHMsbXl0YWJpdCx0Yi1ob3N0aW5nPnNpdGU8cmVzZXJ2ZCx0aGluZ2R1c3RkYXRhLGJsb3hjbXMsdG93bm5ld3Mtc3RhZ2luZyx0eXBlZm9ybT5wcm88aGssaXQsdnVsdHJvYmplY3RzPio8d2FmZmxlY2VsbCxob3RlbHdpdGhmbGlnaHQscmVzZXJ2ZS1vbmxpbmUsY3ByYXBpZCxwbGVza25zLHJlbW90ZXdkLHdpYXJkd2ViPnBhZ2VzPHdpeHNpdGUsd2l4c3R1ZGlvLG1lc3N3aXRoZG5zLHdvbHRsYWItZGVtbyx3cGVuZ2luZXBvd2VyZWQ+anM8eG5iYXk+dTIsdTItbG9jYWw8eW9sYXNpdGU8dm9ka2E+YWFhPGlvPm9uLWFjb3JuPio8YXBpZ2VlLGItZGF0YSxiYW56YWljbG91ZD5hcHAsYmFja3lhcmRzPio8PGJlYWdsZWJvYXJkLGJpdGJ1Y2tldCxibHVlYml0ZSxib3hmdXNlLGJyYXZlPnM+Kjw8YnJvd3NlcnNhZmV0eW1hcmssYmlndj51azA8Y2xldmVyYXBwcyxkYXBwbm9kZT5keW5kbnM8ZGFya2xhbmcsZGVmaW5pbWEsZGVkeW4sZHJ1ZCxmaC1tdWVuc3RlcixzaHcsZm9yZ2Vyb2NrPmlkPGdpdGh1YixnaXRsYWIsbG9saXBvcCxoYXN1cmEtYXBwLGhvc3R5aG9zdGluZyxoeXBlcm5vZGUsbW9vbnNjYWxlPio8YmVlYnl0ZT5wYWFzPGJlZWJ5dGVhcHA+c2VrZDE8amVsZSx1bmlzcGFjZT5jbG91ZC1mcjE8d2VidGhpbmdzLGxvZ2lubGluZSxiYXJzeSxhenVyZWNvbnRhaW5lcj4qPG5ncm9rPmFwLGF1LGV1LGluLGpwLHNhLHVzPG5vZGVhcnQ+c3RhZ2U8cGFudGhlb25zaXRlLGR5bjUzLHBzdG1uPm1vY2s8cHJvdG9uZXQscWN4PnN5cz4qPDxxb3RvLHZhcG9yY2xvdWQsbXlyZGJ4LHJiLWhvc3Rpbmc+c2l0ZTxvbi1rM3M+Kjxvbi1yaW8+KjxyZWFkdGhlZG9jcyxyZXNpbmRldmljZSxyZXNpbnN0YWdpbmc+ZGV2aWNlczxoemMsc2FuZGNhdHMsc2NyeXB0ZWQ+Y2xpZW50PHNoaWZ0ZWRpdCxtby1zaWVtZW5zLGxhaXI+YXBwczxzdG9sb3M+KjxzcGFjZWtpdCxtdXNpY2lhbix1dHdlbnRlLHM1eT4qPGVkdWdpdCx0ZWxlYml0LHRoaW5nZHVzdD5kZXY+Y3VzdCxyZXNlcnZkPGRpc3JlYz5jdXN0LHJlc2VydmQ8cHJvZD5jdXN0PHRlc3Rpbmc+Y3VzdCxyZXNlcnZkPDx0aWNrZXRzLHVwbGksMjAzOCx3ZWJmbG93LHdlYmZsb3d0ZXN0LGVkaXRvcngsd2l4c3R1ZGlvLGJhc2ljc2VydmVyLHZpcnR1YWxzZXJ2ZXI8Yml6PmFjdGl2ZXRyYWlsLGNsb3VkbnMsam96aSxkeW5kbnMsZm9yLWJldHRlcixmb3ItbW9yZSxmb3Itc29tZSxmb3ItdGhlLHNlbGZpcCx3ZWJob3Asb3J4LG1tYWZhbixteWZ0cCxuby1pcCxkc2Nsb3VkPGFwcD5hZGFwdGFibGUsYmVnZXQ+KjxjbGVyayxjbGVya3N0YWdlLHduZXh0LGNzYj5wcmV2aWV3PHBsYXRmb3JtMCxkZXRhLG9uZGlnaXRhbG9jZWFuLGVhc3lwYW5lbCxlbmNyLGV2ZXJ2YXVsdD5yZWxheTxleHBvPnN0YWdpbmc8ZWRnZWNvbXB1dGUsZmlyZXdlYixmbHV0dGVyZmxvdyxmcmFtZXIsaG9zdGVkPio8cnVuPio8d2ViLGhhc3VyYSxsb2dpbmxpbmUsbWVzc2VybGksbmV0ZnksbmV0bGlmeSxuZ3JvayxuZ3Jvay1mcmVlLGRldmVsb3Blcj4qPG5vb3Asbm9ydGhmbGFuaz4qPHVwc3VuPio8cmVwbGl0PmlkPHNub3dmbGFrZT4qLHByaXZhdGVsaW5rPio8PHN0cmVhbWxpdCxzdG9yaXByZXNzLHRlbGViaXQsdHlwZWRyZWFtLHZlcmNlbCxib29rb25saW5lLHdkaD5wcmV2aWV3PHplYWJ1cjxsaXZlPmFlbSxobHgsZXdwPio8PG5ldD5hZG9iZWFlbWNsb3VkLGFkb2JlaW8tc3RhdGljLGFkb2JlaW9ydW50aW1lLGFrYWRucyxha2FtYWksYWthbWFpLXN0YWdpbmcsYWthbWFpZWRnZSxha2FtYWllZGdlLXN0YWdpbmcsYWthbWFpaGQsYWthbWFpaGQtc3RhZ2luZyxha2FtYWlvcmlnaW4sYWthbWFpb3JpZ2luLXN0YWdpbmcsYWthbWFpemVkLGFrYW1haXplZC1zdGFnaW5nLGVkZ2VrZXksZWRnZWtleS1zdGFnaW5nLGVkZ2VzdWl0ZSxlZGdlc3VpdGUtc3RhZ2luZyxhbHdheXNkYXRhLG15YW1hemUsY2xvdWRmcm9udCxhcHB1ZG8sYXRsYXNzaWFuLWRldj5wcm9kPmNkbjw8bXlmcml0eixvbmF2c3RhY2ssc2hvcHNlbGVjdCxibGFja2JhdWRjZG4sYm9vbWxhLGJwbGFjZWQsc3F1YXJlNyxjZG43Nz5yPGNkbjc3LXNzbCxnYixodSxqcCxzZSx1ayxjbGlja3Jpc2luZyxkbnMtY2xvdWQsZG5zLWR5bmFtaWMsY2xvdWRhY2Nlc3MsY2xvdWRmbGFyZT5jZG48Y2xvdWRmbGFyZWFueWNhc3Q+Y2RuPGNsb3VkZmxhcmVjbj5jZG48Y2xvdWRmbGFyZWdsb2JhbD5jZG48ZmVzdGUtaXAsa254LXNlcnZlcixzdGF0aWMtYWNjZXNzLGNyeXB0b25vbWljPio8ZGF0dG9sb2NhbCxteWRhdHRvLGRlYmlhbixkZWZpbmltYSxhdC1iYW5kLWNhbXAsYmxvZ2Rucyxicm9rZS1pdCxidXlzaG91c2VzLGRuc2FsaWFzLGRuc2Rvam8sZG9lcy1pdCxkb250ZXhpc3QsZHluYWxpYXMsZHluYXRob21lLGVuZG9maW50ZXJuZXQsZnJvbS1heixmcm9tLWNvLGZyb20tbGEsZnJvbS1ueSxnZXRzLWl0LGhhbS1yYWRpby1vcCxob21lZnRwLGhvbWVpcCxob21lbGludXgsaG9tZXVuaXgsaW4tdGhlLWJhbmQsaXMtYS1jaGVmLGlzLWEtZ2Vlayxpc2EtZ2VlayxraWNrcy1hc3Msb2ZmaWNlLW9uLXRoZSxwb2R6b25lLHNjcmFwcGVyLXNpdGUsc2VsZmlwLHNlbGxzLWl0LHNlcnZlYmJzLHNlcnZlZnRwLHRocnVoZXJlLHdlYmhvcCxjYXNhY2FtLGR5bnUsZHludjYsdHdtYWlsLHJ1LGNoYW5uZWxzZHZyPnU8ZmFzdGx5PmZyZWV0bHMsbWFwLHByb2Q+YSxnbG9iYWw8c3NsPmEsYixnbG9iYWw8PGZhc3RseWxiPm1hcDxlZGdlYXBwLGtleXdvcmQtb24sbGl2ZS1vbixzZXJ2ZXItb24sY2RuLWVkZ2VzLGxvY2FsY2VydCxsb2NhbGhvc3RjZXJ0LGhldGVtbCxjbG91ZGZ1bmN0aW9ucyxpb2JiLG1vb25zY2FsZSxpbi1kc2wsaW4tdnBuLGFwcHMtMWFuZDEsaXBpZm9ueSxjbG91ZGppZmZ5PmZyYTEtZGUsd2VzdDEtdXM8ZWxhc3R4Pmpscy1zdG8xLGpscy1zdG8yLGpscy1zdG8zPGZhc3RzdGFja3MsbWFzc2l2ZWdyaWQ+cGFhcz5mci0xLGxvbi0xLGxvbi0yLG55LTEsbnktMixzZy0xPDxzYXZlaW5jbG91ZD5qZWxhc3RpYyxub3JkZXN0ZS1pZGM8c2NhbGVmb3JjZT5qPHRzdWthZXJ1PmplbGFzdGljPGtpbmdob3N0LHVuaTUsa3JlbGxpYW4sZ2dmZixiYXJzeSxtZW1zZXQsYXp1cmUtYXBpLGF6dXJlLW1vYmlsZSxhenVyZWVkZ2UsYXp1cmVmZCxhenVyZXN0YXRpY2FwcHM+MSwyLDMsNCw1LDYsNyxjZW50cmFsdXMsZWFzdGFzaWEsZWFzdHVzMix3ZXN0ZXVyb3BlLHdlc3R1czI8YXp1cmV3ZWJzaXRlcyxjbG91ZGFwcCx0cmFmZmljbWFuYWdlcix3aW5kb3dzPmNvcmU+YmxvYjxzZXJ2aWNlYnVzPG15bmV0bmFtZT5zbjxib3VuY2VtZSxkZG5zLGVhdGluZy1vcmdhbmljLG15ZGlzc2VudCxteWVmZmVjdCxteW1lZGlhcGMsbXlwc3gsbXlzZWN1cml0eWNhbWVyYSxuaGxmYW4sbm8taXAscGdhZmFuLHByaXZhdGl6ZWhlYWx0aGluc3VyYW5jZSxyZWRpcmVjdG1lLHNlcnZlYmxvZyxzZXJ2ZW1pbmVjcmFmdCxzeXRlcyxkbnN1cCxoaWNhbSxub3ctZG5zLG93bmlwLHZwbmRucyxjbG91ZHljbHVzdGVyLG92aD5ob3N0aW5nPio8d2VicGFhcz4qPDxyYWNrbWF6ZSxteXJhZHdlYixpbixzcXVhcmVzLHNjaG9rb2tla3MsZmlyZXdhbGwtZ2F0ZXdheSxzZWlkYXQsc2Vuc2VlcmluZyxzaXRlbGVhZixtYWZlbG8sbXlzcHJlYWRzaG9wLHZwcy1ob3N0PmplbGFzdGljPmF0bCxuanMscmljPDxzcmNmPnNvYyx1c2VyPHN1cGFiYXNlLGRzbXluYXMsZmFtaWx5ZHMsdGFpbHNjYWxlPmJldGE8dHM+Yz4qPDx0b3Jwcm9qZWN0PnBhZ2VzPHJlc2VydmUtb25saW5lLGNvbW11bml0eS1wcm8sbWVpbmZvcnVtLHlhbmRleGNsb3VkPnN0b3JhZ2Usd2Vic2l0ZTx6YTxwYWdlPmFlbSxobHgsaGx4Myx0cmFuc2xhdGVkLGNvZGViZXJnLHBydmN5LHJvY2t5LG1hZ25ldCxwZG5zLHBsZXNrPGV1PmFpcmtpdGFwcHMsbXljZCxjbG91ZG5zLGRvZ2Fkbz5qZWxhc3RpYzxiYXJzeSx3ZWxsYmVpbmd6b25lLHNwZG5zLHRyYW5zdXJsPio8ZGlza3N0YXRpb248Y2E+YmFyc3ksYXdkZXY+KjxjbyxibG9nc3BvdCxuby1pcCxteXNwcmVhZHNob3AsYm94PGVzdGF0ZT5jb21wdXRlPio8PG5ldHdvcms+YWxjZXM+KjxjbyxhcnZvLGF6aW11dGgsdGxvbjxvcmc+YWx0ZXJ2aXN0YSxwaW1pZW50YSxwb2l2cm9uLHBvdGFnZXIsc3dlZXRwZXBwZXIsY2RuNzc+Yyxyc2M8Y2RuNzctc2VjdXJlPm9yaWdpbj5zc2w8PGFlLGNlcnRtZ3IsY2xvdWRucyxkZG5zcyxkdWNrZG5zLHR1bmssYmxvZ2RucyxibG9nc2l0ZSxib2xkbHlnb2luZ25vd2hlcmUsZG5zYWxpYXMsZG5zZG9qbyxkb2VzbnRleGlzdCxkb250ZXhpc3QsZG9vbWRucyxkdnJkbnMsZHluYWxpYXMsZHluZG5zPmdvLGhvbWU8ZW5kb2ZpbnRlcm5ldCxlbmRvZnRoZWludGVybmV0LGZyb20tbWUsZ2FtZS1ob3N0LGdvdGRucyxob2JieS1zaXRlLGhvbWVkbnMsaG9tZWZ0cCxob21lbGludXgsaG9tZXVuaXgsaXMtYS1icnVpbnNmYW4saXMtYS1jYW5kaWRhdGUsaXMtYS1jZWx0aWNzZmFuLGlzLWEtY2hlZixpcy1hLWdlZWssaXMtYS1rbmlnaHQsaXMtYS1saW51eC11c2VyLGlzLWEtcGF0c2Zhbixpcy1hLXNveGZhbixpcy1mb3VuZCxpcy1sb3N0LGlzLXNhdmVkLGlzLXZlcnktYmFkLGlzLXZlcnktZXZpbCxpcy12ZXJ5LWdvb2QsaXMtdmVyeS1uaWNlLGlzLXZlcnktc3dlZXQsaXNhLWdlZWssa2lja3MtYXNzLG1pc2NvbmZ1c2VkLHBvZHpvbmUscmVhZG15YmxvZyxzZWxmaXAsc2VsbHN5b3VyaG9tZSxzZXJ2ZWJicyxzZXJ2ZWZ0cCxzZXJ2ZWdhbWUsc3R1ZmYtNC1zYWxlLHdlYmhvcCxhY2Nlc3NjYW0sY2FtZHZyLGZyZWVkZG5zLG15d2lyZSx3ZWJyZWRpcmVjdCx0d21haWwsZXU+YWwsYXNzbyxhdCxhdSxiZSxiZyxjYSxjZCxjaCxjbixjeSxjeixkZSxkayxlZHUsZWUsZXMsZmksZnIsZ3IsaHIsaHUsaWUsaWwsaW4saW50LGlzLGl0LGpwLGtyLGx0LGx1LGx2LG1jLG1lLG1rLG10LG15LG5ldCxuZyxubCxubyxueixwYXJpcyxwbCxwdCxxLWEscm8scnUsc2Usc2ksc2ssdHIsdWssdXM8ZmVkb3JhaW5mcmFjbG91ZCxmZWRvcmFwZW9wbGUsZmVkb3JhcHJvamVjdD5jbG91ZCxvcz5hcHA8c3RnPm9zPmFwcDw8PGZyZWVkZXNrdG9wLGhhdGVuYWRpYXJ5LGhlcGZvcmdlLGluLWRzbCxpbi12cG4sanMsYmFyc3ksbWF5Zmlyc3QsYm1vYXR0YWNobWVudHMsY2FibGUtbW9kZW0sY29sbGVnZWZhbixjb3VjaHBvdGF0b2ZyaWVzLGhvcHRvLG1sYmZhbixteWZ0cCxteXNlY3VyaXR5Y2FtZXJhLG5mbGZhbixuby1pcCxyZWFkLWJvb2tzLHVmY2Zhbix6YXB0byxkeW5zZXJ2LG5vdy1kbnMsaXMtbG9jYWwsaHR0cGJpbixwdWJ0bHMsanBuLG15LWZpcmV3YWxsLG15ZmlyZXdhbGwsc3BkbnMsc21hbGwtd2ViLGRzbXluYXMsZmFtaWx5ZHMsdGVja2lkcz5zMzx0dXhmYW1pbHksZGlza3N0YXRpb24saGssdXMsdG9vbGZvcmdlLHdtY2xvdWQsd21mbGFicyx6YTxjbj5jb20+YW1hem9uYXdzPmNuLW5vcnRoLTE+ZXhlY3V0ZS1hcGksZW1yYXBwdWktcHJvZCxlbXJub3RlYm9va3MtcHJvZCxlbXJzdHVkaW8tcHJvZCxkdWFsc3RhY2s+czMsczMtYWNjZXNzcG9pbnQsczMtd2Vic2l0ZTxzMyxzMy1hY2Nlc3Nwb2ludCxzMy1kZXByZWNhdGVkLHMzLW9iamVjdC1sYW1iZGEsczMtd2Vic2l0ZTxjbi1ub3J0aHdlc3QtMT5leGVjdXRlLWFwaSxlbXJhcHB1aS1wcm9kLGVtcm5vdGVib29rcy1wcm9kLGVtcnN0dWRpby1wcm9kLGR1YWxzdGFjaz5zMyxzMy1hY2Nlc3Nwb2ludDxzMyxzMy1hY2Nlc3Nwb2ludCxzMy1vYmplY3QtbGFtYmRhLHMzLXdlYnNpdGU8Y29tcHV0ZT4qPGFpcmZsb3c+Y24tbm9ydGgtMT4qPGNuLW5vcnRod2VzdC0xPio8PGViPmNuLW5vcnRoLTEsY24tbm9ydGh3ZXN0LTE8ZWxiPio8PHNhZ2VtYWtlcj5jbi1ub3J0aC0xPm5vdGVib29rLHN0dWRpbzxjbi1ub3J0aHdlc3QtMT5ub3RlYm9vayxzdHVkaW88PDxjYW52YS1hcHBzLGNhbnZhc2l0ZT5teT4qPDxteXFuYXBjbG91ZCxzaD5hczxxdWlja2Nvbm5lY3Q+ZGlyZWN0PDxhd3M+c2FnZW1ha2VyPmFwLW5vcnRoZWFzdC0xPmxhYmVsaW5nLG5vdGVib29rLHN0dWRpbzxhcC1ub3J0aGVhc3QtMj5sYWJlbGluZyxub3RlYm9vayxzdHVkaW88YXAtc291dGgtMT5sYWJlbGluZyxub3RlYm9vayxzdHVkaW88YXAtc291dGhlYXN0LTE+bGFiZWxpbmcsbm90ZWJvb2ssc3R1ZGlvPGFwLXNvdXRoZWFzdC0yPmxhYmVsaW5nLG5vdGVib29rLHN0dWRpbzxjYS1jZW50cmFsLTE+bGFiZWxpbmcsbm90ZWJvb2ssbm90ZWJvb2stZmlwcyxzdHVkaW88ZXUtY2VudHJhbC0xPmxhYmVsaW5nLG5vdGVib29rLHN0dWRpbzxldS13ZXN0LTE+bGFiZWxpbmcsbm90ZWJvb2ssc3R1ZGlvPGV1LXdlc3QtMj5sYWJlbGluZyxub3RlYm9vayxzdHVkaW88dXMtZWFzdC0xPmxhYmVsaW5nLG5vdGVib29rLG5vdGVib29rLWZpcHMsc3R1ZGlvPHVzLWVhc3QtMj5sYWJlbGluZyxub3RlYm9vayxub3RlYm9vay1maXBzLHN0dWRpbzx1cy13ZXN0LTI+bGFiZWxpbmcsbm90ZWJvb2ssbm90ZWJvb2stZmlwcyxzdHVkaW88YWYtc291dGgtMT5ub3RlYm9vayxzdHVkaW88YXAtZWFzdC0xPm5vdGVib29rLHN0dWRpbzxhcC1ub3J0aGVhc3QtMz5ub3RlYm9vayxzdHVkaW88YXAtc291dGgtMj5ub3RlYm9vazxhcC1zb3V0aGVhc3QtMz5ub3RlYm9vayxzdHVkaW88YXAtc291dGhlYXN0LTQ+bm90ZWJvb2s8Y2Etd2VzdC0xPm5vdGVib29rLG5vdGVib29rLWZpcHM8ZXUtY2VudHJhbC0yPm5vdGVib29rPGV1LW5vcnRoLTE+bm90ZWJvb2ssc3R1ZGlvPGV1LXNvdXRoLTE+bm90ZWJvb2ssc3R1ZGlvPGV1LXNvdXRoLTI+bm90ZWJvb2ssc3R1ZGlvPGV1LXdlc3QtMz5ub3RlYm9vayxzdHVkaW88aWwtY2VudHJhbC0xPm5vdGVib29rLHN0dWRpbzxtZS1jZW50cmFsLTE+bm90ZWJvb2ssc3R1ZGlvPG1lLXNvdXRoLTE+bm90ZWJvb2ssc3R1ZGlvPHNhLWVhc3QtMT5ub3RlYm9vayxzdHVkaW88dXMtZ292LWVhc3QtMT5ub3RlYm9vayxub3RlYm9vay1maXBzLHN0dWRpbyxzdHVkaW8tZmlwczx1cy1nb3Ytd2VzdC0xPm5vdGVib29rLG5vdGVib29rLWZpcHMsc3R1ZGlvLHN0dWRpby1maXBzPHVzLXdlc3QtMT5ub3RlYm9vayxub3RlYm9vay1maXBzLHN0dWRpbzxleHBlcmltZW50cz4qPDxyZXBvc3Q+cHJpdmF0ZT4qPDw8b25saW5lPmVlcm8sZWVyby1zdGFnZSx3ZWJzaXRlYnVpbGRlcixiYXJzeTxzaT5mNSxnaXRhcHAsZ2l0cGFnZSxibG9nc3BvdDxqcD5uZT5hc2VpbmV0PnVzZXI8Z2VoaXJuLGl2b3J5LG1haWwtYm94LG1pbnRzLG1va3VyZW4sb3BhbCxzYWt1cmEsc3Vtb21vLHRvcGF6PGJ1eXNob3AsZmFzaGlvbnN0b3JlLGhhbmRjcmFmdGVkLGthd2FpaXNob3Asc3VwZXJzYWxlLHRoZXNob3AsMGFtLDBnMCwwajAsMHQwLG15ZG5zLHBndyx3amcsdXNlcmNvbnRlbnQsYW5ncnksYmFieWJsdWUsYmFieW1pbGssYmFja2Ryb3AsYmFtYmluYSxiaXR0ZXIsYmx1c2gsYm9vLGJveSxib3lmcmllbmQsYnV0LGNhbmR5cG9wLGNhcG9vLGNhdGZvb2QsY2hlYXAsY2hpY2FwcGEsY2hpbGxvdXQsY2hpcHMsY2hvd2RlcixjaHUsY2lhbyxjb2NvdHRlLGNvb2xibG9nLGNyYW5reSxjdXRlZ2lybCxkYWEsZGVjYSxkZWNpLGRpZ2ljayxlZ29pc20sZmFrZWZ1cixmZW0sZmxpZXIsZmxvcHB5LGZvb2wsZnJlbmNoa2lzcyxnaXJsZnJpZW5kLGdpcmx5LGdsb29teSxnb25uYSxncmVhdGVyLGhhY2NhLGhlYXZ5LGhlcixoaWhvLGhpcHB5LGhvbHksaHVuZ3J5LGljdXJ1cyxpdGlnbyxqZWxseWJlYW4sa2lraXJhcmEsa2lsbCxraWxvLGt1cm9uLGxpdHRsZXN0YXIsbG9saXBvcG1jLGxvbGl0YXB1bmssbG9tbyxsb3ZlcG9wLGxvdmVzaWNrLG1haW4sbW9kcyxtb25kLG1vbmdvbGlhbixtb28sbmFtYXN0ZSxuaWtpdGEsbm9idXNoaSxub29yLG9vcHMscGFyYWxsZWwscGFyYXNpdGUscGVjb3JpLHBlZXdlZSxwZW5uZSxwZXBwZXIscGVybWEscGlnYm9hdCxwaW5va28scHVueXUscHVwdSxwdXNzeWNhdCxweWEscmFpbmRyb3AscmVhZHltYWRlLHNhZGlzdCxzY2hvb2xidXMsc2VjcmV0LHN0YWJhLHN0cmlwcGVyLHN1YixzdW5ueWRheSx0aGljayx0b25rb3RzdSx1bmRlcix1cHBlcix2ZWx2ZXQsdmVyc2UsdmVyc3VzLHZpdmlhbix3YXRzb24sd2VibGlrZSx3aGl0ZXNub3csem9tYmllLGJsb2dzcG90LGhhdGVibG8saGF0ZW5hYmxvZyxoYXRlbmFkaWFyeSwyLWQsYm9uYSxjcmFwLGRheW5pZ2h0LGVlayxmbG9wLGhhbGZtb29uLGplZXosbWF0cml4LG1pbW96YSxuZXRnYW1lcnMsbnlhbnRhLG8wbzAscmR5LHJncixydWxleixzYWt1cmFzdG9yYWdlPmlzazAxPnMzPGlzazAyPnMzPDxzYWxvb24sc2Jsbyxza3IsdGFuayx1aC1vaCx1bmRvLHdlYmFjY2VsPnJzLHVzZXI8d2Vic296YWkseGlpPHZjPmd2PmQ8MGUsbXlkbnM8ZXVzPnBhcnR5PnVzZXI8PGxpbms+bXlmcml0eixjeW9uLG5mdHN0b3JhZ2U+aXBmczxteXBlcCxkd2ViPio8PHdzPmFkdmlzb3I+KjxjbG91ZDY2LGR5bmRucyxteXBldHM8Y2xvdWQ+YmFuemFpPio8ZWxlbWVudG9yLGVuY293YXk+ZXU8c3RhdGljcz4qPHJhdmVuZGIsYXhhcm5ldD5lcy0xPGRpYWRlbSxqZWxhc3RpYz52aXA8amVsZSxqZW52LWFydWJhPmFydWJhPmV1cj5pdDE8PGl0MTxrZWxpd2ViPmNzPG94YT50bix1azxwcmltZXRlbD51azxyZWNsYWltPmNhLHVrLHVzPHRyZW5kaG9zdGluZz5jaCxkZTxqb3RlbHVsdSxrdWxldXZlbixsaW5reWFyZCxtYWdlbnRvc2l0ZT4qPG9ic2VydmFibGVocSxwZXJzcGVjdGEsdmFwb3Isb24tcmFuY2hlcj4qPHNjdz5iYXJlbWV0YWw+ZnItcGFyLTEsZnItcGFyLTIsbmwtYW1zLTE8ZnItcGFyPmNvY2twaXQsZm5jPmZ1bmN0aW9uczxrOHM+bm9kZXM8czMsczMtd2Vic2l0ZSx3aG08aW5zdGFuY2VzPnByaXYscHViPGs4cyxubC1hbXM+Y29ja3BpdCxrOHM+bm9kZXM8czMsczMtd2Vic2l0ZSx3aG08cGwtd2F3PmNvY2twaXQsazhzPm5vZGVzPHMzLHMzLXdlYnNpdGU8c2NhbGVib29rLHNtYXJ0bGFiZWxpbmc8c2VydmVib2x0LG9uc3RhY2tpdD5ydW5zPHNlbnNpb3NpdGU+Kjx0cmFmZmljcGxleCx1bmlzb24tc2VydmljZXMsdXJvd24sdm9vcmxvcGVyLHphcDxlYz5iYXNlLG9mZmljaWFsPHNob3A+YmFzZSxob3BsaXgsYmFyc3ksYmFyc3lvbmxpbmU8Z2F5PnBhZ2VzPGxhPmJucjxzaD5iaXAsaGFzaGJhbmcscGxhdGZvcm0+ZW50LGV1LHVzPG5vdzxqZT5vZjxjaD5zcXVhcmU3LGNsb3VkbnMsY2xvdWRzY2FsZT5jdXN0LGxwZz5vYmplY3RzPHJtYT5vYmplY3RzPDxibG9nc3BvdCxmbG93PmFlPmFscDE8YXBwZW5naW5lPGxpbmt5YXJkLWNsb3VkLGdvdGRucyxkbnNraW5nLDEyM3dlYnNpdGUsbXlzcHJlYWRzaG9wLGZpcmVuZXQ+KixzdmM+Kjw8MTJocCwyaXgsNGxpbWEsbGltYS1jaXR5PGRlPmJwbGFjZWQsc3F1YXJlNyxjb20sY29zaWRucz5keW48ZG5zdXBkYXRlcixkeW5hbWlzY2hlcy1kbnMsaW50ZXJuZXQtZG5zLGwtby1nLWktbixkZG5zcz5keW4sZHluZG5zPGR5bi1pcDI0LGR5bmRuczEsaG9tZS13ZWJzZXJ2ZXI+ZHluPG15aG9tZS1zZXJ2ZXIsZG5zaG9tZSxmdWV0dGVydGRhc25ldHosaXN0ZWluZ2Vlayxpc3RtZWluLGxlYnRpbW5ldHosbGVpdHVuZ3Nlbix0cmFldW10Z2VyYWRlLGZydXNreT4qPGdvaXAsYmxvZ3Nwb3QseG4tLWduc3RpZ2Jlc3RlbGxlbi16dmIseG4tLWduc3RpZ2xpZWZlcm4td29iLGhzLWhlaWxicm9ubj5pdD5wYWdlczw8ZHluLWJlcmxpbixpbi1iZXJsaW4saW4tYnJiLGluLWJ1dHRlcixpbi1kc2wsaW4tdnBuLGlzZXJ2c2NodWxlLG1laW4taXNlcnYsc2NodWxwbGF0dGZvcm0sc2NodWxzZXJ2ZXIsdGVzdC1pc2VydixrZXltYWNoaW5lLGdpdC1yZXBvcyxsY3ViZS1zZXJ2ZXIsc3ZuLXJlcG9zLGJhcnN5LDEyM3dlYnNlaXRlLGxvZ29pcCxmaXJld2FsbC1nYXRld2F5LG15LWdhdGV3YXksbXktcm91dGVyLHNwZG5zLHNwZWVkcGFydG5lcj5jdXN0b21lcjxteXNwcmVhZHNob3AsdGFpZnVuLWRucywxMmhwLDJpeCw0bGltYSxsaW1hLWNpdHksZGQtZG5zLGRyYXktZG5zLGRyYXlkbnMsZHluLXZwbixkeW52cG4sbWVpbi12aWdvcixteS12aWdvcixteS13YW4sc3luby1kcyxzeW5vbG9neS1kaXNrc3RhdGlvbixzeW5vbG9neS1kcyx1YmVyc3BhY2U+Kjx2aXJ0dWFsLXVzZXIsdmlydHVhbHVzZXIsY29tbXVuaXR5LXBybyxkaXNrdXNzaW9uc2JlcmVpY2g8aHI+YnJlbmRseT5zaG9wPGJsb2dzcG90LGZyZWU8cnM+YnJlbmRseT5zaG9wPGJsb2dzcG90LHVhLGJhcnN5LG94PGFtPnJhZGlvLGJsb2dzcG90PGZtPnJhZGlvLHVzZXI+Kjw8dWs+Y28+Ynl0ZW1hcms+ZGgsdm08YmxvZ3Nwb3QsbGF5ZXJzaGlmdD5qPGJhcnN5LGJhcnN5b25saW5lLHJldHJvc251Yj5jdXN0PG5oLXNlcnYsbm8taXAsd2VsbGJlaW5nem9uZSxhZGltbyxteXNwcmVhZHNob3A8Z292PmFwaSxjYW1wYWlnbixzZXJ2aWNlPGNvbm4sY29wcm8saG9zcCxpbmRlcGVuZGVudC1jb21taXNzaW9uLGluZGVwZW5kZW50LWlucXVlc3QsaW5kZXBlbmRlbnQtaW5xdWlyeSxpbmRlcGVuZGVudC1wYW5lbCxpbmRlcGVuZGVudC1yZXZpZXcscHVibGljLWlucXVpcnkscm95YWwtY29tbWlzc2lvbixweW1udCxvcmc+Z2x1ZyxsdWcsbHVncyxhZmZpbml0eWxvdHRlcnkscmFmZmxlZW50cnksd2Vla2x5bG90dGVyeTxiYXJzeSxuaW1zaXRlPHNpdGU+Y2FudmE+bXk+Kjw8Y2xvdWRlcmE+Kjxjb252ZXgsY3lvbixmbndrLGZvbGlvbmV0d29yayxmYXN0dnBzLGplbGUsam91d3dlYixsZWx1eCxsb2dpbmxpbmUsYmFyc3ksbm90aW9uLG9tbml3ZSxvcGVuc29jaWFsLG1hZGV0aGlzLHBsYXRmb3Jtc2g+Kjx0c3Q+KjxieWVuLHNyaHQsbm92ZWNvcmUsd3BzcXVhcmVkPGFjPmRycixmZWVkYmFjayxmb3JtczxhaT51d3UsZnJhbWVyPGNvPmNhcnJkLGNyZCxvdGFwPio8Y29tPmJsb2dzcG90PGxlYWRwYWdlcyxscGFnZXMsbXlwaSxuNHQseG1pdD4qPGZpcmV3YWxsZWRyZXBsaXQ+aWQ8cmVwbD5pZDxzdXBhYmFzZTxtcD5qdTxjej5jb250ZW50cHJveHk5PnJzYzxyZWFsbSxlNCxibG9nc3BvdCxjbyxtZXRhY2VudHJ1bT5jbG91ZD4qPGN1c3RvbTxtdW5pPmNsb3VkPmZsdCx1c3I8PDxiej56YSxteWRucyxnc2o8c2U+Y29tLGJsb2dzcG90LGNvbmYsaW9wc3lzLDEyM21pbnNpZGEsaXRjb3VsZGJld29yLG15c3ByZWFkc2hvcDxncm91cD5kaXNjb3Vyc2U8dGVhbT5kaXNjb3Vyc2UsamVsYXN0aWM8Y2M+Y2xldmVyYXBwcyxjbG91ZG5zLGZ0cGFjY2VzcyxnYW1lLXNlcnZlcixteXBob3RvcyxzY3JhcHBpbmcsdHdtYWlsLGNzeCxmYW50YXN5bGVhZ3VlLHNwYXduPmluc3RhbmNlczw8dGVjaD5jbGV2ZXJhcHBzPGFzaWE+Y2xvdWRucyxkYWVtb24sZGl4PGJlPmNsb3VkbnMsd2ViaG9zdGluZyxibG9nc3BvdCxpbnRlcmhvc3Rzb2x1dGlvbnM+Y2xvdWQ8a3VsZXV2ZW4+ZXpwcm94eTwxMjN3ZWJzaXRlLG15c3ByZWFkc2hvcCx0cmFuc3VybD4qPDxjbD5jbG91ZG5zLGJsb2dzcG90PGNsdWI+Y2xvdWRucyxqZWxlLGJhcnN5PGN4PmNsb3VkbnMsYXRoLGluZm8sYXNzZXNzbWVudHMsY2FsY3VsYXRvcnMsZnVubmVscyxwYXlub3cscXVpenplcyxyZXNlYXJjaGVkLHRlc3RzPGluPmNsb3VkbnMsYmxvZ3Nwb3QsYmFyc3ksd2ViLHN1cGFiYXNlPGluZm8+Y2xvdWRucyxkeW5hbWljLWRucyxiYXJyZWwtb2Yta25vd2xlZGdlLGJhcnJlbGwtb2Yta25vd2xlZGdlLGR5bmRucyxmb3Itb3VyLGdyb2tzLXRoZSxncm9rcy10aGlzLGhlcmUtZm9yLW1vcmUsa25vd3NpdGFsbCxzZWxmaXAsd2ViaG9wLGJhcnN5LG1heWZpcnN0LGR2cmNhbSxpbG92ZWNvbGxlZ2Usbm8taXAsZm9ydW16LG5zdXBkYXRlLGRuc3VwZGF0ZSx2LWluZm88bno+Y2xvdWRucyxjbz5ibG9nc3BvdDw8cGg+Y2xvdWRuczxwdz5jbG91ZG5zLHg0NDM8bWU+YzY2LGNyYWZ0LGRhcGxpZT5sb2NhbGhvc3Q8ZWRnZXN0YWNrLGZpbGVnZWFyLGdsaXRjaCxmaWxlZ2Vhci1zZyxsb2htdXMsYmFyc3ksbWNkaXIsbWNwZSxicmFzaWxpYSxkZG5zLGRuc2Zvcixob3B0byxsb2dpbnRvLG5vaXAsd2ViaG9wLHNvdW5kY2FzdCx0Y3A0LHZwNCxkaXNrc3RhdGlvbixkc2Nsb3VkLGkyMzQsbXlkcyxzeW5vbG9neSx0cmFuc2lwPnNpdGU8eW9tYm8sbm9ob3N0PHpvbmU+Y2xvdWQ2Nixocyx0cml0b24+KjxzdGFja2l0LGxpbWE8aG9zdD5jbG91ZGFjY2VzcyxmcmVlc2l0ZSxlYXN5cGFuZWwsZmFzdHZwcyxteWZhc3QsdGVtcHVybCx3cG11ZGV2LGplbGUsbWlyY2xvdWQsd3AyLGhhbGY8Z2RuPmNucHk8bmw+Y28saG9zdGluZy1jbHVzdGVyLGJsb2dzcG90LGdvdixraHBsYXksMTIzd2Vic2l0ZSxteXNwcmVhZHNob3AsdHJhbnN1cmw+KjxjaXN0cm9uLGRlbW9uPG5vPmNvLGJsb2dzcG90LDEyM2hqZW1tZXNpZGUsbXlzcHJlYWRzaG9wPHJ1PmFjLGVkdSxnb3YsaW50LG1pbCx0ZXN0LGV1cm9kaXIsYWR5Z2V5YSxiYXNoa2lyaWEsYmlyLGNiZyxjb20sZGFnZXN0YW4sZ3Jvem55LGthbG15a2lhLGt1c3RhbmFpLG1hcmluZSxtb3Jkb3ZpYSxtc2ssbXl0aXMsbmFsY2hpayxub3YscHlhdGlnb3JzayxzcGIsdmxhZGlrYXZrYXosdmxhZGltaXIsYmxvZ3Nwb3QsbmE0dSxtaXJjbG91ZCxyZWdydWhvc3Rpbmc+amVsYXN0aWM8bXlqaW5vPmhvc3Rpbmc+KjxsYW5kaW5nPio8c3BlY3RydW0+Kjx2cHM+Kjw8Y2xkbWFpbD5oYjxtY2Rpcj52cHM8bWNwcmUsbmV0LG9yZyxwcCxsazMscmFzPGVtYWlsPmNyaXNwPm9uPHRhd2s+cDx0YXdrdG8+cDw8ZGs+Yml6LGNvLGZpcm0scmVnLHN0b3JlLGJsb2dzcG90LDEyM2hqZW1tZXNpZGUsbXlzcHJlYWRzaG9wPGVhcnRoPmRhcHBzPiosYnp6Pio8PDxrZz51czxpZD5teT5yc3M+Kjw8ZmxhcCxjbz5ibG9nc3BvdDxmb3J0ZTxzb2x1dGlvbnM+ZGloZXI+Kjw8dGg+b25saW5lLHNob3A8Zmk+ZHksYmxvZ3Nwb3QseG4tLWhra2luZW4tNXdhLGlraSxjbG91ZHBsYXRmb3JtPmZpPGRhdGFjZW50ZXI+ZGVtbyxwYWFzPGthcHNpLDEyM2tvdGlzaXZ1LG15c3ByZWFkc2hvcDxuYW1lPmhlcj5mb3Jnb3Q8aGlzPmZvcmdvdDw8bnU+bWVyc2VpbmUsbWluZSxzaGFja25ldCxlbnRlcnByaXNlY2xvdWQ8dHY+YmV0dGVyLXRoYW4sZHluZG5zLG9uLXRoZS13ZWIsd29yc2UtdGhhbixmcm9tLHNha3VyYTxyb2Nrcz5teWRkbnMsc3RhY2tpdCxsaW1hLWNpdHksd2Vic3BhY2U8eHl6PmJsb2dzaXRlLGxvY2Fsem9uZSxjcmFmdGluZyx6YXB0byx0ZWxlYml0Pio8PG9uZT5vbnJlZD5zdGFnaW5nPGtpbj4qPHNlcnZpY2UsaG9tZWxpbms8dHc+Y29tPm15bWFpbGVyPHVybCxteWRucyxibG9nc3BvdDxjYW1wPmVtZj5hdDw8aHQ+cnQ8Y29vbD5lbGVtZW50b3IsZGU8ZnI+ZW4tcm9vdCxmYngtb3MsZmJ4b3MsZnJlZWJveC1vcyxmcmVlYm94b3MsYmxvZ3Nwb3QsZ291cGlsZSwxMjNzaXRld2ViLG9uLXdlYixjaGlydXJnaWVucy1kZW50aXN0ZXMtZW4tZnJhbmNlLGRlZGlib3gsYWVyb3BvcnQsYXZvY2F0LGNoYW1iYWdyaSxjaGlydXJnaWVucy1kZW50aXN0ZXMsZXhwZXJ0cy1jb21wdGFibGVzLG1lZGVjaW4sbm90YWlyZXMscGhhcm1hY2llbixwb3J0LHZldGVyaW5haXJlLG15c3ByZWFkc2hvcCx5bmg8c3U+YWJraGF6aWEsYWR5Z2V5YSxha3R5dWJpbnNrLGFya2hhbmdlbHNrLGFybWVuaWEsYXNoZ2FiYWQsYXplcmJhaWphbixiYWxhc2hvdixiYXNoa2lyaWEsYnJ5YW5zayxidWtoYXJhLGNoaW1rZW50LGRhZ2VzdGFuLGVhc3Qta2F6YWtoc3RhbixleG5ldCxnZW9yZ2lhLGdyb3pueSxpdmFub3ZvLGphbWJ5bCxrYWxteWtpYSxrYWx1Z2Esa2FyYWNvbCxrYXJhZ2FuZGEsa2FyZWxpYSxraGFrYXNzaWEsa3Jhc25vZGFyLGt1cmdhbixrdXN0YW5haSxsZW51ZyxtYW5neXNobGFrLG1vcmRvdmlhLG1zayxtdXJtYW5zayxuYWxjaGlrLG5hdm9pLG5vcnRoLWthemFraHN0YW4sbm92LG9ibmluc2sscGVuemEscG9rcm92c2ssc29jaGksc3BiLHRhc2hrZW50LHRlcm1leix0b2dsaWF0dGksdHJvaXRzayx0c2VsaW5vZ3JhZCx0dWxhLHR1dmEsdmxhZGlrYXZrYXosdmxhZGltaXIsdm9sb2dkYTxzcGFjZT5teWZhc3QsaGVpeXUsYXBwLWlvbm9zLHViZXIseHM0YWxsPG1lZGlhPmZyYW1lcjxwaG90b3M+ZnJhbWVyPHdlYnNpdGU+ZnJhbWVyPHdpa2k+ZnJhbWVyPGF0PmZ1bmtmZXVlcj53aWVuPGZ1dHVyZWNtcz4qLGV4Pio8aW4+Kjw8ZnV0dXJlaG9zdGluZyxmdXR1cmVtYWlsaW5nLG9ydHNpbmZvPmV4Pio8a3VuZGVuPio8PGNvPmJsb2dzcG90PGJpeixpbmZvLDEyM3dlYnNlaXRlLHByaXYsbXlzcHJlYWRzaG9wLDEyaHAsMml4LDRsaW1hLGxpbWEtY2l0eTxtcz5sYWIsbWluaXNpdGU8d29yaz5jb3JwbmV0PGNvbW11bml0eT5ub2cscmF2ZW5kYixteWZvcnVtPHJvPmNvLHNob3AsYmxvZ3Nwb3QsYmFyc3k8ZGVzaWduPmdyYXBoaWMsYnNzPGFlPmJsb2dzcG90PGFsPmJsb2dzcG90PGFyPmNvbT5ibG9nc3BvdDw8YXU+Y29tPmJsb2dzcG90LGNsb3VkbGV0cz5tZWw8bXlzcHJlYWRzaG9wPDxiYT5ibG9nc3BvdCxyczxiZz5ibG9nc3BvdCxiYXJzeTxiaj5ibG9nc3BvdDxicj5jb20+YmxvZ3Nwb3Qsc2ltcGxlc2l0ZTxsZWc+YWMsYWwsYW0sYXAsYmEsY2UsZGYsZXMsZ28sbWEsbWcsbXMsbXQscGEscGIscGUscGkscHIscmoscm4scm8scnIscnMsc2Msc2Usc3AsdG88PGJ5PmNvbT5ibG9nc3BvdDxteWNsb3VkLG1lZGlhdGVjaDxjZj5ibG9nc3BvdDxjdj5ibG9nc3BvdDxjeT5jb20+YmxvZ3Nwb3Qsc2NhbGVmb3JjZT5qPDw8ZWU+Y29tPmJsb2dzcG90PDxlZz5jb20+YmxvZ3Nwb3Q8PGVzPmNvbT5ibG9nc3BvdDwxMjNtaXdlYixteXNwcmVhZHNob3A8Z29vZz5jbG91ZCx0cmFuc2xhdGUsdXNlcmNvbnRlbnQ+Kjw8Z3I+YmxvZ3Nwb3QsYmFyc3ksc2ltcGxlc2l0ZTxoaz5ibG9nc3BvdCxzZWNhYXMsaW5jLGx0ZDxodT5ibG9nc3BvdDxpZT5ibG9nc3BvdCxteXNwcmVhZHNob3A8aWw+Y28+YmxvZ3Nwb3QscmF2cGFnZSxteXRhYml0LHRhYml0b3JkZXI8PGlzPmJsb2dzcG90PGtlPmNvPmJsb2dzcG90PDxrcj5ibG9nc3BvdDxsaT5ibG9nc3BvdCxjYWE8bHQ+YmxvZ3Nwb3Q8bHU+YmxvZ3Nwb3QsMTIzd2Vic2l0ZTxtZD5ibG9nc3BvdCxpcjxtaz5ibG9nc3BvdDxtcj5ibG9nc3BvdDxtdD5jb20+YmxvZ3Nwb3Q8PG14PmJsb2dzcG90PG15PmJsb2dzcG90PG5nPmNvbT5ibG9nc3BvdDxjb2wsZmlybSxnZW4sbHRkLG5nbzxwZT5ibG9nc3BvdDxwdD5ibG9nc3BvdCwxMjNwYWdpbmF3ZWI8cWE+YmxvZ3Nwb3Q8cmU+YmxvZ3Nwb3QsY2FuPHNnPmJsb2dzcG90LGVuc2NhbGVkPHNrPmJsb2dzcG90PHNuPmJsb2dzcG90PHRkPmJsb2dzcG90PHRyPmNvbT5ibG9nc3BvdDw8dWc+YmxvZ3Nwb3Q8dXk+Y29tPmJsb2dzcG90PDx2bj5ibG9nc3BvdDx6YT5jbz5ibG9nc3BvdDw8ZGlnaXRhbD5jbG91ZGFwcHM+bG9uZG9uPDxjaT5maW48cnVuPmhzLGRldmVsb3BtZW50LHJhdmVuZGIsc2VydmVycyxidWlsZD4qPGNvZGU+KjxkYXRhYmFzZT4qPG1pZ3JhdGlvbj4qPG9ucG9ydGVyLHJlcGwsc3RhY2tpdCx2YWw+ZXhwcmVzcyx3ZWI8d2l4PHN0PmhlbGlvaG8sa2lyYXJhLG5vaG88cHViPmlkPio8a2luPio8YmFyc3k8Z2w+Yml6PHNjb3Q+ZWR1LGdvdj5zZXJ2aWNlPDxzbz5zY2gsc3VydmV5czxrej5qY2xvdWQsa2F6dGVsZXBvcnQ+dXBhYXM8PHRuPm9yYW5nZWNsb3VkPGdnPmthYXMsc3RhY2tpdCxwYW5lbD5kYWVtb248PHN5c3RlbXM+a25pZ2h0cG9pbnQ8ZXZlbnRzPmtvb2JpbixjbzxkaXJlY3Q+bGlicDJwPGJ1c2luZXNzPmNvPGVkdWNhdGlvbj5jbzxmaW5hbmNpYWw+Y288cGxhY2U+Y288dGVjaG5vbG9neT5jbzxicz53ZTxzZXJ2aWNlcz5sb2dpbmxpbmU8bWVudT5iYXJzeSxiYXJzeW9ubGluZTxtb2JpPmJhcnN5LGRzY2xvdWQ8c3RvcmU+YmFyc3ksc2VsbGZ5LHNob3B3YXJlLHN0b3JlYmFzZTxzdXBwb3J0PmJhcnN5PGhlYWx0aD5ocmE8Y2FzYT5uYWJ1PnVpPDxwaXp6YT5uZ3JvazxuZXdzPm5vdGljZWFibGU8dG9wPm5vdy1kbnMsbnRkbGwsd2FkbD4qPDxvdmg+bmVyZHBvbDxtbj5ueWM8b25nPm9ibDxsb2w+b21nPGhvc3Rpbmc+b3BlbmNyYWZ0PG9yYW5nZT50ZWNoPHBtPm93bixuYW1lPGNvZGVzPm93bz4qPDxsYz5veTxnYW1lcz5wbGV5LHNoZWV6eTxibj5jbzx0b2RheT5wcmVxdWFsaWZ5bWU8YnVpbGRlcnM+Y2xvdWRzaXRlPGJhc2tldGJhbGw+YXVzLG56PGVkdT5yaXQ+Z2l0LXBhZ2VzPDx4bi0tcDFhY2Y+eG4tLTkwYW1jLHhuLS1qMWFlZix4bi0tajFhZWw4Yix4bi0taDFhaG4seG4tLWoxYWRwLHhuLS1jMWF2Zyx4bi0tODBhYWEwY3ZhYyx4bi0taDFhbGl6LHhuLS05MGExYWYseG4tLTQxYTxtb20+aW5kPGZhcm0+c3Rvcmo8cGljdHVyZXM+MTMzNzxyaXA+Y2xhbjx0Zj5zY2g8d2Y+Yml6LHNjaDx5dD5vcmc8bWFuYWdlbWVudD5yb3V0ZXI8YWNhZGVteT5vZmZpY2lhbDxmYWl0aD55Ym88cGFydHk+eWJvPHJldmlldz55Ym88c2NpZW5jZT55Ym88dHJhZGU+eWJvXCI7IiwiY29uc3QgdXJsUGF0dGVybiA9IC9eW2Etel1bKisuYS16LV0rOlxcL1xcLy9pO1xuY29uc3QgaW52YWxpZElwdjZQYXR0ZXJuID0gL14oW2Etel1bKisuYS16LV0rOlxcL1xcLykoW15bXVteLz9dKjpbXi8/XSo6W14vP10qKSguKikvaTtcbmV4cG9ydCBjb25zdCBOT19IT1NUTkFNRSA9IFN5bWJvbChcIk5PX0hPU1ROQU1FXCIpO1xuZXhwb3J0IGNvbnN0IGZyb21VcmwgPSAodXJsTGlrZSkgPT4ge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgaWYgKHR5cGVvZiBVUkwgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMb29rcyBsaWtlIHRoZSBuZXcgVVJMKCkgY29uc3RydWN0b3IgaXMgbm90IGdsb2JhbGx5IGF2YWlsYWJsZSBpbiB5b3VyIGVudmlyb25tZW50LiBQbGVhc2UgbWFrZSBzdXJlIHRvIHVzZSBhIHBvbHlmaWxsLlwiKTtcbiAgICB9XG4gICAgLy8gRXh0cmEgY2hlY2sgZm9yIG5vbi1UeXBlU2NyaXB0IHVzZXJzXG4gICAgaWYgKHR5cGVvZiB1cmxMaWtlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBOT19IT1NUTkFNRTtcbiAgICB9XG4gICAgLy8gVVJMcyB0aGF0IHN0YXJ0IHdpdGggLy8gYXJlIHByb3RvY29sIHJlbGF0aXZlXG4gICAgbGV0IHVybCA9IHVybExpa2Uuc3RhcnRzV2l0aChcIi8vXCIpXG4gICAgICAgID8gYGh0dHA6JHt1cmxMaWtlfWBcbiAgICAgICAgOiAvLyBVUkxzIHRoYXQgc3RhcnQgd2l0aCAvIGRvIG5vdCBoYXZlIGEgaG9zdG5hbWUgc2VjdGlvblxuICAgICAgICAgICAgdXJsTGlrZS5zdGFydHNXaXRoKFwiL1wiKVxuICAgICAgICAgICAgICAgID8gdXJsTGlrZVxuICAgICAgICAgICAgICAgIDogdXJsUGF0dGVybi50ZXN0KHVybExpa2UpXG4gICAgICAgICAgICAgICAgICAgID8gdXJsTGlrZVxuICAgICAgICAgICAgICAgICAgICA6IGBodHRwOi8vJHt1cmxMaWtlfWA7XG4gICAgdXJsID0gdXJsLnJlcGxhY2UoaW52YWxpZElwdjZQYXR0ZXJuLCBcIiQxWyQyXSQzXCIpO1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBuZXcgVVJMKHVybCkuaG9zdG5hbWU7XG4gICAgfVxuICAgIGNhdGNoIChfYSkge1xuICAgICAgICByZXR1cm4gTk9fSE9TVE5BTUU7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb20tdXJsLmpzLm1hcCIsImltcG9ydCB7IHBhcnNlRG9tYWluLCBmcm9tVXJsIH0gZnJvbSAncGFyc2UtZG9tYWluJztcblxuY2xhc3MgVmF1bHRzIHtcblx0aGFzVHlwZShyZWNvcmQsIHR5cGUxLCB0eXBlMikge1xuXHRcdGlmIChyZWNvcmQudHlwZXMuaW5jbHVkZXModHlwZTEpKVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0cmV0dXJuIHR5cGUyICE9PSB1bmRlZmluZWQgJiYgcmVjb3JkLnR5cGVzLmluY2x1ZGVzKHR5cGUyKTtcblx0fVxuXG5cdGZpbmRSZWNvcmRzQnlUZXh0KHZhdWx0cywgdGV4dCkge1xuXHRcdHJldHVybiB0aGlzLnNlYXJjaCh2YXVsdHMsIHIgPT4gdGhpcy5tYXRjaGVzU2VhcmNoKHRoaXMubm9ybSh0ZXh0KSwgcikpO1xuXHR9XG5cblx0ZmluZFJlY29yZHNCeVVybHModmF1bHRzLCB1cmxzKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2VhcmNoKHZhdWx0cywgciA9PiBNYXRoLm1heCguLi51cmxzLm1hcCh1cmwgPT4gdGhpcy51cmxNYXRjaGVzKHVybCwgcikpKSk7XG5cdH1cblxuXHRzZWFyY2godmF1bHRzLCBtYXRjaGVyKSB7XG5cdFx0Y29uc3QgcmVjb3JkcyA9IHZhdWx0c1xuXHRcdFx0LmZpbHRlcih2YXVsdCA9PiAhIXZhdWx0LmFkZGl0aW9uYWxPYmplY3RzLnZhdWx0KVxuXHRcdFx0Lm1hcCgodmF1bHQpID0+IHZhdWx0LmFkZGl0aW9uYWxPYmplY3RzLnZhdWx0KVxuXHRcdFx0LnJlZHVjZSgoYSwgYykgPT4gYS5jb25jYXQoYy5yZWNvcmRzLm1hcChyID0+IE9iamVjdC5hc3NpZ24ociwgeyB2YXVsdDogYy5uYW1lIH0pKSksIFtdKVxuXHRcdFx0LmZpbHRlcihyID0+IHRoaXMuaGFzVHlwZShyLCAnUEFTU1dPUkQnLCAnVE9UUCcpKVxuXHRcdFx0LmZpbHRlcihtYXRjaGVyKTtcblxuXHRcdHJlY29yZHMuc29ydCgocjEsIHIyKSA9PiB0aGlzLnJlY29yZENvbXBhcmUocjEsIHIyLCBtYXRjaGVyKSk7XG5cdFx0cmV0dXJuIHJlY29yZHM7XG5cdH1cblxuXHRhYnNvbHV0ZVVybCh1cmwpIHtcblx0XHQvLyBjaGVja3Mgd2hldGhlciB0aGUgc3RyaW5nIHN0YXJ0cyB3aXRoIGEgc2NoZW1lXG5cdFx0Y29uc3Qgd2l0aFNjaGVtZSA9IC9eW2Etel1bYS16MC05Ky4tXSo6XFwvXFwvLztcblx0XHRyZXR1cm4gd2l0aFNjaGVtZS50ZXN0KHVybCkgPyB1cmwgOiBcImh0dHA6Ly9cIiArIHVybDtcblx0fVxuXG5cdHVybE1hdGNoZXModXJsLCByZWNvcmQpIHtcblx0XHRpZiAoIXVybCB8fCAhcmVjb3JkLnVybClcblx0XHRcdHJldHVybiAwO1xuXG5cdFx0Y29uc3QgcGFyc2VkVXJsID0gcGFyc2VEb21haW4oZnJvbVVybCh1cmwpKTtcblx0XHRjb25zdCBwYXJzZWRSZWNvcmRVcmwgPSBwYXJzZURvbWFpbihmcm9tVXJsKHJlY29yZC51cmwpKTtcblx0XHRpZiAocGFyc2VkVXJsICE9PSBudWxsICYmIHBhcnNlZFJlY29yZFVybCAhPT0gbnVsbCAmJlxuXHRcdFx0cGFyc2VkVXJsLmRvbWFpbiAhPT0gdW5kZWZpbmVkICYmIHBhcnNlZFJlY29yZFVybC5kb21haW4gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0aWYgKHRoaXMuYXJyYXlFcXVhbHMocGFyc2VkVXJsLnRvcExldmVsRG9tYWlucywgcGFyc2VkUmVjb3JkVXJsLnRvcExldmVsRG9tYWlucykgJiZcblx0XHRcdFx0cGFyc2VkVXJsLmRvbWFpbiA9PT0gcGFyc2VkUmVjb3JkVXJsLmRvbWFpbikge1xuXHRcdFx0XHRpZiAodGhpcy5hcnJheUVxdWFscyhwYXJzZWRVcmwuc3ViRG9tYWlucywgcGFyc2VkUmVjb3JkVXJsLnN1YkRvbWFpbnMpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5hcnJheUNvbnRhaW5zQWxsKHBhcnNlZFVybC5zdWJEb21haW5zLCBwYXJzZWRSZWNvcmRVcmwuc3ViRG9tYWlucykgfHxcblx0XHRcdFx0XHR0aGlzLmFycmF5Q29udGFpbnNBbGwocGFyc2VkUmVjb3JkVXJsLnN1YkRvbWFpbnMsIHBhcnNlZFVybC5zdWJEb21haW5zKSkge1xuXHRcdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBuZXcgVVJMKHVybCkuaG9zdCA9PT0gbmV3IFVSTCh0aGlzLmFic29sdXRlVXJsKHJlY29yZC51cmwpKS5ob3N0ID8gMTAgOiAwO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblx0fVxuXG5cdGFycmF5RXF1YWxzKGExLCBhMikge1xuXHRcdHJldHVybiBhMS5sZW5ndGggPT09IGEyLmxlbmd0aCAmJlxuXHRcdFx0YTEuZXZlcnkoZnVuY3Rpb24oYTFlbGVtZW50LCBpbmRleCkgeyByZXR1cm4gYTFlbGVtZW50ID09PSBhMltpbmRleF0gfSk7XG5cdH1cblxuXHRhcnJheUNvbnRhaW5zQWxsKGFyciwgc3Vic2V0KSB7XG5cdFx0cmV0dXJuIHN1YnNldC5ldmVyeShlID0+IGFyci5pbmNsdWRlcyhlKSk7XG5cdH1cblxuXHRtYXRjaGVzU2VhcmNoKHNlYXJjaFRlcm0sIHJlY29yZCkge1xuXHRcdGNvbnN0IHNlYXJjaCA9IHNlYXJjaFRlcm0udG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gdGhpcy5ub3JtKHJlY29yZC5uYW1lLnRvTG93ZXJDYXNlKCkpLmluY2x1ZGVzKHNlYXJjaClcblx0XHRcdHx8IHJlY29yZC51dWlkLmluZGV4T2Yoc2VhcmNoKSA9PT0gMFxuXHRcdFx0fHwgKHJlY29yZC51cmwgJiYgdGhpcy5ub3JtKHJlY29yZC51cmwudG9Mb3dlckNhc2UoKSkuaW5jbHVkZXMoc2VhcmNoKSlcblx0XHRcdHx8IChyZWNvcmQudXNlcm5hbWUgJiYgdGhpcy5ub3JtKHJlY29yZC51c2VybmFtZS50b0xvd2VyQ2FzZSgpKS5pbmNsdWRlcyhzZWFyY2gpKVxuXHRcdFx0fHwgKHJlY29yZC5maWxlbmFtZSAmJiB0aGlzLm5vcm0ocmVjb3JkLmZpbGVuYW1lLnRvTG93ZXJDYXNlKCkpLmluY2x1ZGVzKHNlYXJjaCkpO1xuXHR9XG5cblx0bm9ybSh2YWwpIHtcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblx0XHRyZXR1cm4gdmFsLm5vcm1hbGl6ZSgnTkZEJykucmVwbGFjZSgvW15cXHUwMDAwLVxcdTAwRkZdL2csICcnKTtcblx0fVxuXG5cdHJlY29yZENvbXBhcmUocjEsIHIyLCBtYXRjaGVyKSB7XG5cdFx0Y29uc3QgY29sb3JzID0gWydHUkVFTicsICdSRUQnLCAnQkxVRScsICdEQVJLJywgJ1BJTktfTEFWRU5ERVInLCAnQ1JJTVNPTl9SRUQnLCAnTUlERExFX1lFTExPVycsICdBTkRST0lEX0dSRUVOJywgJ1NBR0UnLCAnQVJUSUNIT0tFJywgJ05PTkUnXTtcblx0XHRjb25zdCBtYXRjaGVyRGlmZiA9IG1hdGNoZXIocjIpIC0gbWF0Y2hlcihyMSk7XG5cdFx0aWYgKG1hdGNoZXJEaWZmICE9PSAwKSB7XG5cdFx0XHRyZXR1cm4gbWF0Y2hlckRpZmY7XG5cdFx0fVxuXHRcdGlmIChyMS5jb2xvciAhPT0gcjIuY29sb3IpIHtcblx0XHRcdHJldHVybiBjb2xvcnMuaW5kZXhPZihyMS5jb2xvcikgLSBjb2xvcnMuaW5kZXhPZihyMi5jb2xvcik7XG5cdFx0fVxuXHRcdHJldHVybiByMS5uYW1lLmxvY2FsZUNvbXBhcmUocjIubmFtZSk7XG5cdH1cbn1cblxuY29uc3QgdmF1bHRzID0gbmV3IFZhdWx0cygpO1xuZXhwb3J0IGRlZmF1bHQgdmF1bHRzO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXG4vKiBlc2xpbnQtZW52IHdlYmV4dGVuc2lvbnMgKi9cblxuaW1wb3J0ICogYXMgam9zZSBmcm9tICdqb3NlJztcbmltcG9ydCBDbGllbnRPQXV0aDIgZnJvbSAnLi4vY2xpZW50LW9hdXRoMic7XG5pbXBvcnQgVmF1bHRzIGZyb20gJy4vVmF1bHRzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgS2V5SHViU2VydmljZSB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0Y29uc29sZS5sb2coJ0xvYWRpbmcgS2V5SHViIEJyb3dzZXIgZXh0ZW5zaW9uIHZlcnNpb24gNicpO1xuXHR9XG5cblx0cmVzdG9yZVN0YXRlID0gKCkgPT4ge1xuXHRcdHJldHVybiBjaHJvbWUuc3RvcmFnZS5zeW5jLmdldCgnaXNzdWVyJykudGhlbihpdGVtcyA9PiB7XG5cdFx0XHR0aGlzLl9pc3N1ZXIgPSBpdGVtcy5pc3N1ZXIgPyBpdGVtcy5pc3N1ZXIgOiB1bmRlZmluZWQ7XG5cdFx0XHRyZXR1cm4gY2hyb21lLnN0b3JhZ2Uuc2Vzc2lvbi5nZXQoJ29hdXRoVG9rZW4nKTtcblx0XHR9KS50aGVuKGl0ZW1zID0+IHtcblx0XHRcdHRoaXMuX3Rva2VuID0gaXRlbXMub2F1dGhUb2tlbiA/IGl0ZW1zLm9hdXRoVG9rZW4gOiB1bmRlZmluZWQ7XG5cdFx0XHRyZXR1cm4gY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KG51bGwpO1xuXHRcdH0pLnRoZW4oaXRlbXMgPT4ge1xuXHRcdFx0dGhpcy5fdmF1bHRzID0gaXRlbXMudmF1bHRzID8gaXRlbXMudmF1bHRzIDogW107XG5cdFx0XHR0aGlzLl9zZWFyY2hlcyA9IGl0ZW1zLnNlYXJjaGVzID8gaXRlbXMuc2VhcmNoZXMgOiB7fTtcblx0XHRcdHRoaXMuX3NldHRpbmdzID0gaXRlbXMuc2V0dGluZ3MgPyBpdGVtcy5zZXR0aW5ncyA6IHsgc2hvd19pY29uOiB0cnVlIH07XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9KTtcblx0fVxuXG5cdGNhbGxiYWNrID0gKHVyaSkgPT4ge1xuXHRcdHJldHVybiB0aGlzLmdldEF1dGhTdGF0ZSgpLnJlc29sdmVyKHVyaSk7XG5cdH1cblxuXHRnZXRJc3N1ZXIgPSAoKSA9PiB7XG5cdFx0cmV0dXJuIHRoaXMuX2lzc3Vlcjtcblx0fVxuXG5cdHNldElzc3VlciA9IChpc3N1ZXIpID0+IHtcblx0XHR0aGlzLl9pc3N1ZXIgPSBpc3N1ZXI7XG5cdFx0Y2hyb21lLnN0b3JhZ2Uuc3luYy5zZXQoeyAnaXNzdWVyJzogaXNzdWVyIH0pO1xuXHR9XG5cblx0aGFzSXNzdWVyID0gKCkgPT4ge1xuXHRcdHJldHVybiAhIXRoaXMuZ2V0SXNzdWVyKCk7XG5cdH1cblxuXHRnZXRUb2tlbiA9ICgpID0+IHtcblx0XHRyZXR1cm4gdGhpcy5fdG9rZW47XG5cdH1cblxuXHRzZXRUb2tlbiA9ICh0b2tlbikgPT4ge1xuXHRcdHRoaXMuX3Rva2VuID0gdG9rZW47XG5cdFx0Y2hyb21lLnN0b3JhZ2Uuc2Vzc2lvbi5zZXQoeyAnb2F1dGhUb2tlbic6IHRva2VuIH0pO1xuXHR9XG5cblx0Z2V0VmF1bHRzID0gKCkgPT4ge1xuXHRcdHJldHVybiB0aGlzLl92YXVsdHM7XG5cdH1cblxuXHRzZXRWYXVsdHMgPSAodmF1bHRzKSA9PiB7XG5cdFx0dGhpcy5fdmF1bHRzID0gdmF1bHRzO1xuXHRcdGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7ICd2YXVsdHMnOiB2YXVsdHMgfSk7XG5cdH1cblxuXHRnZXRBdXRoU3RhdGUgPSAoKSA9PiB7XG5cdFx0cmV0dXJuIHRoaXMuX2F1dGhTdGF0ZTtcblx0fVxuXG5cdHNldEF1dGhTdGF0ZSA9IChhdXRoU3RhdGUpID0+IHtcblx0XHR0aGlzLl9hdXRoU3RhdGUgPSBhdXRoU3RhdGU7XG5cdH1cblxuXHRnZXRTZXR0aW5ncyA9ICgpID0+IHtcblx0XHRyZXR1cm4gdGhpcy5fc2V0dGluZ3M7XG5cdH1cblxuXHRzZXRTZXR0aW5ncyA9IChzZXR0aW5ncykgPT4ge1xuXHRcdHRoaXMuX3NldHRpbmdzID0gc2V0dGluZ3M7XG5cdFx0Y2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHsgJ3NldHRpbmdzJzogc2V0dGluZ3MgfSk7XG5cdH1cblxuXHRoYXNQZXJtaXNzaW9ucyA9ICgpID0+IHtcblx0XHRyZXR1cm4gY2hyb21lLnBlcm1pc3Npb25zLmNvbnRhaW5zKHsgb3JpZ2luczogWycqOi8vKi8qJ10gfSlcblx0fVxuXG5cdGZldGNoVG9rZW4gPSAocGFyYW1ldGVycykgPT4ge1xuXHRcdHBhcmFtZXRlcnMgPSBPYmplY3QuYXNzaWduKHtcblx0XHRcdHByb21wdDogZmFsc2UsXG5cdFx0XHRxdWVyeToge1xuXHRcdFx0XHRhdXRoVmF1bHQ6ICdhY2Nlc3MtaWYtdW5sb2NrZWQnXG5cdFx0XHR9XG5cdFx0fSwgcGFyYW1ldGVycyk7XG5cblx0XHRpZiAoIXRoaXMuaGFzSXNzdWVyKCkpIHtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ2Rpc2Nvbm5lY3RlZCcpKTtcblx0XHR9XG5cblx0XHRjb25zdCB0b2tlbiA9IHRoaXMuZ2V0VG9rZW4oKTtcblx0XHRpZiAodG9rZW4gJiYgdG9rZW4udmFsaWRfdW50aWwgPiBEYXRlLm5vdygpKSB7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRva2VuKTtcblx0XHR9XG5cblx0XHRsZXQgYXV0aFN0YXRlID0ge1xuXHRcdFx0c3RhdGU6IHRoaXMucmFuZG9tKDMyKSxcblx0XHRcdG5vbmNlOiB0aGlzLnJhbmRvbSgzMilcblx0XHR9O1xuXHRcdHRoaXMuc2V0QXV0aFN0YXRlKGF1dGhTdGF0ZSk7XG5cblx0XHRjb25zdCBvYXV0aDIgPSBuZXcgQ2xpZW50T0F1dGgyKHtcblx0XHRcdGNsaWVudElkOiAnNTczYWJlNTEtMGRjMi00MjkzLWJjZTktNTk5MzIxMTY0MDQyJyxcblx0XHRcdGFjY2Vzc1Rva2VuVXJpOiB0aGlzLmdldElzc3VlcigpICsgJy9sb2dpbi9vYXV0aDIvdG9rZW4nLFxuXHRcdFx0YXV0aG9yaXphdGlvblVyaTogdGhpcy5nZXRJc3N1ZXIoKSArICcvbG9naW4vb2F1dGgyL2F1dGhvcml6ZScsXG5cdFx0XHRyZWRpcmVjdFVyaTogJ2h0dHBzOi8vd3d3LnRvcGljdXMta2V5aHViLmNvbS9icm93c2VyLWV4dGVuc2lvbi1jYWxsYmFjay5odG1sJyxcblx0XHRcdHNjb3BlczogWydvcGVuaWQnLCAncHJvZmlsZScsICdhY2Nlc3NfdmF1bHQnXSxcblx0XHRcdHN0YXRlOiBhdXRoU3RhdGUuc3RhdGVcblx0XHR9KTtcblxuXG5cdFx0cmV0dXJuIHRoaXMuY3JlYXRlVG9rZW5DYWxsKHBhcmFtZXRlcnMsIG9hdXRoMiwgZmFsc2UpXG5cdFx0XHQudGhlbih1cmkgPT4ge1xuXHRcdFx0XHRyZXR1cm4gb2F1dGgyLmNvZGUuZ2V0VG9rZW4odXJpLCB7IGJvZHk6IHsgY29kZV92ZXJpZmllcjogYXV0aFN0YXRlLnBrY2VWZXJpZmllciB9IH0pO1xuXHRcdFx0fSlcblx0XHRcdC50aGVuKHRva2VuID0+IHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuc3RvcmVUb2tlbih0b2tlbik7XG5cdFx0XHR9LCBlcnJvciA9PiB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNyZWF0ZVRva2VuQ2FsbChwYXJhbWV0ZXJzLCBvYXV0aDIsIHRydWUpLnRoZW4odXJpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gb2F1dGgyLmNvZGUuZ2V0VG9rZW4odXJpLCB7IGJvZHk6IHsgY29kZV92ZXJpZmllcjogYXV0aFN0YXRlLnBrY2VWZXJpZmllciB9IH0pO1xuXHRcdFx0XHR9KS50aGVuKHRva2VuID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5zdG9yZVRva2VuKHRva2VuKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9KS50aGVuKHRva2VuID0+IHRva2VuLCBjYXVzZSA9PiB7IGNvbnNvbGUubG9nKGNhdXNlKSB9KTtcblx0fVxuXG5cdGNyZWF0ZVRva2VuQ2FsbCA9IChwYXJhbWV0ZXJzLCBvYXV0aDIsIGVycm9yaGFuZGxpbmcpID0+IHtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0bGV0IGF1dGhTdGF0ZSA9IHRoaXMuZ2V0QXV0aFN0YXRlKCk7XG5cdFx0XHRhdXRoU3RhdGUudGltZSA9IERhdGUubm93KCk7XG5cdFx0XHRhdXRoU3RhdGUucmVzb2x2ZXIgPSByZXNvbHZlO1xuXHRcdFx0YXV0aFN0YXRlLnBrY2VWZXJpZmllciA9IHRoaXMucmFuZG9tKDMyKTtcblx0XHRcdHRoaXMuc2V0QXV0aFN0YXRlKGF1dGhTdGF0ZSk7XG5cblx0XHRcdHZhciBidWZmZXIgPSBuZXcgVGV4dEVuY29kZXIoJ3V0Zi04JykuZW5jb2RlKGF1dGhTdGF0ZS5wa2NlVmVyaWZpZXIpO1xuXHRcdFx0c2VsZi5jcnlwdG8uc3VidGxlLmRpZ2VzdCgnU0hBLTI1NicsIGJ1ZmZlcikudGhlbihwa2NlSGFzaCA9PiB7XG5cdFx0XHRcdHZhciBxdWVyeU9iaiA9IHtcblx0XHRcdFx0XHRyZXNwb25zZV90eXBlOiAnY29kZScsXG5cdFx0XHRcdFx0bm9uY2U6IGF1dGhTdGF0ZS5ub25jZSxcblx0XHRcdFx0XHRjb2RlX2NoYWxsZW5nZTogdGhpcy5iYXNlNjR1cmwocGtjZUhhc2gpLFxuXHRcdFx0XHRcdGNvZGVfY2hhbGxlbmdlX21ldGhvZDogJ1MyNTYnXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0bGV0IHNob3VsZFByb21wdCA9IHBhcmFtZXRlcnMucHJvbXB0IHx8IGVycm9yaGFuZGxpbmc7XG5cblx0XHRcdFx0aWYgKCFzaG91bGRQcm9tcHQpIHtcblx0XHRcdFx0XHRxdWVyeU9iaiA9IE9iamVjdC5hc3NpZ24ocXVlcnlPYmosIHBhcmFtZXRlcnMucXVlcnksIHsgcHJvbXB0OiAnbm9uZScgfSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0cXVlcnlPYmogPSBPYmplY3QuYXNzaWduKHF1ZXJ5T2JqLCBwYXJhbWV0ZXJzLnF1ZXJ5KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICghZXJyb3JoYW5kbGluZykge1xuXHRcdFx0XHRcdGNocm9tZS50YWJzLnF1ZXJ5KHsgYWN0aXZlOiB0cnVlLCBjdXJyZW50V2luZG93OiB0cnVlIH0sIHRhYnMgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5fbGFzdEFjdGl2ZVRhYiA9IHRhYnMubGVuZ3RoID4gMCA/IHRhYnNbMF0uaWQgOiB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5fcmVzdG9yZUxhc3RBY3RpdmVUYWIgPSBzaG91bGRQcm9tcHQ7XG5cblx0XHRcdFx0Y2hyb21lLnRhYnMuY3JlYXRlKHtcblx0XHRcdFx0XHR1cmw6IG9hdXRoMi5jb2RlLmdldFVyaSh7XG5cdFx0XHRcdFx0XHRxdWVyeTogcXVlcnlPYmpcblx0XHRcdFx0XHR9KSxcblx0XHRcdFx0XHRhY3RpdmU6IHNob3VsZFByb21wdFxuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9XG5cblxuXHRiYXNlNjR1cmwgPSAoYnVmZmVyKSA9PiB7XG5cdFx0dmFyIGVuY29kZWRCdWZmZXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKC4uLm5ldyBVaW50OEFycmF5KGJ1ZmZlcikpO1xuXHRcdHJldHVybiBidG9hKGVuY29kZWRCdWZmZXIpXG5cdFx0XHQucmVwbGFjZSgvPS9nLCAnJylcblx0XHRcdC5yZXBsYWNlKC9cXCsvZywgJy0nKVxuXHRcdFx0LnJlcGxhY2UoL1xcLy9nLCAnXycpO1xuXHR9XG5cblx0cmFuZG9tID0gKGxlbikgPT4ge1xuXHRcdHZhciBhcnIgPSBuZXcgVWludDhBcnJheShsZW4pO1xuXHRcdHNlbGYuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnIpO1xuXHRcdHJldHVybiBBcnJheS5mcm9tKGFyciwgZGVjID0+ICgnMCcgKyBkZWMudG9TdHJpbmcoMTYpKS5zdWJzdHIoLTIpKS5qb2luKCcnKTtcblx0fVxuXG5cdGZldGNoSlNPTiA9ICh1cmksIHBhcmFtZXRlcnMsIHJhbmdlU3RhcnQpID0+IHtcblx0XHRyZXR1cm4gdGhpcy5mZXRjaFJlc3BvbnNlKHVyaSwgcGFyYW1ldGVycywgcmFuZ2VTdGFydCkudGhlbihcblx0XHRcdHJlc3BvbnNlID0+IHtcblx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcblx0XHRcdH0sXG5cdFx0XHRlID0+IHsgdGhyb3cgZTsgfVxuXHRcdCk7XG5cdH1cblxuXHRmZXRjaFJlc3BvbnNlID0gKHVyaSwgcGFyYW1ldGVycywgcmFuZ2VTdGFydCkgPT4ge1xuXHRcdHJldHVybiB0aGlzLmZldGNoVG9rZW4ocGFyYW1ldGVycykudGhlbih0b2tlbiA9PiB7XG5cdFx0XHRyZXR1cm4gZmV0Y2godXJpLCB7IGhlYWRlcnM6IHJhbmdlU3RhcnQgPT0gbnVsbCA/IHRoaXMuYnVpbGRIZWFkZXJzKCkgOiB0aGlzLmJ1aWxkSGVhZGVycyhyYW5nZVN0YXJ0LCByYW5nZVN0YXJ0ICsgMTAwIC0gMSkgfSk7XG5cdFx0fSkudGhlbihyZXNwb25zZSA9PiB7XG5cdFx0XHRpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDYpIHtcblx0XHRcdFx0dGhpcy5kaXNjb25uZWN0KCk7XG5cdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ3ZlcnNpb25fbWlzbWF0Y2gnKSlcblx0XHRcdH0gZWxzZSBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcblx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLmpzb24oKS50aGVuKGJvZHkgPT4ge1xuXHRcdFx0XHRcdHZhciBlcnIgPSBib2R5LmFwcGxpY2F0aW9uRXJyb3I7XG5cdFx0XHRcdFx0aWYgKGVyciA9PT0gJ1VTRVJOQU1FX1BBU1NXT1JEX1RPS0VOX0xPR0lOX1JFUVVJUkVEJ1xuXHRcdFx0XHRcdFx0fHwgZXJyID09PSAnVVNFUk5BTUVfUEFTU1dPUkRfTE9HSU5fUkVRVUlSRUQnXG5cdFx0XHRcdFx0XHR8fCBlcnIgPT09ICdGRURFUkFURURfTE9HSU5fUkVRVUlSRUQnXG5cdFx0XHRcdFx0XHR8fCBlcnIgPT09ICdWQVVMVF9OT1RfVU5MT0NLRUQnKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5yZWF1dGgodXJpLCBib2R5LCByYW5nZVN0YXJ0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dmFyIHJldCA9IG5ldyBFcnJvcignYXV0aF9lcnJvcicpO1xuXHRcdFx0XHRcdHJldC5ib2R5ID0gYm9keTtcblx0XHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QocmV0KTtcblx0XHRcdFx0fSwgZSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5jbGVhclNlc3Npb24oKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5mZXRjaFJlc3BvbnNlKHVyaSwgcGFyYW1ldGVycywgcmFuZ2VTdGFydCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwOSkge1xuXHRcdFx0XHRyZXR1cm4gcmVzcG9uc2UuanNvbigpLnRoZW4oYm9keSA9PiB7XG5cdFx0XHRcdFx0dmFyIHJldCA9IG5ldyBFcnJvcignY29uZmxpY3QnKTtcblx0XHRcdFx0XHRyZXQuYm9keSA9IGJvZHk7XG5cdFx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KHJldCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXNwb25zZSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRyZWF1dGggPSAodXJpLCBkZXRhaWwsIHJhbmdlU3RhcnQpID0+IHtcblx0XHR0aGlzLnNldFRva2VuKHVuZGVmaW5lZCk7XG5cdFx0Y2hyb21lLnN0b3JhZ2UubG9jYWwucmVtb3ZlKCdvYXV0aFRva2VuJyk7XG5cdFx0cmV0dXJuIHRoaXMuZmV0Y2hSZXNwb25zZSh1cmksIHtcblx0XHRcdC8vIG1heSBub3QgcmVxdWlyZSBpbnRlcmFjdGlvblxuXHRcdFx0cHJvbXB0OiBkZXRhaWwuYXBwbGljYXRpb25FcnJvciAhPT0gJ1ZBVUxUX05PVF9VTkxPQ0tFRCcsXG5cdFx0XHRxdWVyeToge1xuXHRcdFx0XHRhdXRoVmF1bHQ6ICdhY2Nlc3MnLFxuXHRcdFx0XHRhdXRoUmVxdWlyZWRMZXZlbDogJ2hpZ2gnLFxuXHRcdFx0XHRhdXRoRXJyb3I6IGRldGFpbC5hcHBsaWNhdGlvbkVycm9yLFxuXHRcdFx0XHRhdXRoRXJyb3JJbmZvOiBKU09OLnN0cmluZ2lmeShkZXRhaWwuYXBwbGljYXRpb25FcnJvclBhcmFtZXRlcnMpXG5cdFx0XHR9XG5cdFx0fSwgcmFuZ2VTdGFydCk7XG5cdH1cblxuXHRzdG9yZVRva2VuID0gKHRva2VuSG9sZGVyKSA9PiB7XG5cdFx0bGV0IHRva2VuID0gdG9rZW5Ib2xkZXIuZGF0YTtcblx0XHRpZiAodG9rZW4uZXhwaXJlc19pbikge1xuXHRcdFx0dG9rZW4udmFsaWRfdW50aWwgPSBEYXRlLm5vdygpICsgdG9rZW4uZXhwaXJlc19pbiAqIDEwMDA7XG5cdFx0fVxuXHRcdGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7ICdvYXV0aFRva2VuJzogdG9rZW4gfSk7XG5cdFx0dGhpcy5zZXRUb2tlbih0b2tlbik7XG5cdFx0cmV0dXJuIHRva2VuO1xuXHR9XG5cblx0c2VsZkxpbmsgPSAob2JqKSA9PiB7XG5cdFx0cmV0dXJuIG9iai5saW5rcy5maW5kKGwgPT4gbC5yZWwgPT09ICdzZWxmJykuaHJlZlxuXHR9XG5cblx0ZmV0Y2hBY2NvdW50ID0gKCkgPT4ge1xuXHRcdHJldHVybiB0aGlzLmZldGNoSlNPTih0aGlzLmdldElzc3VlcigpICsgJy9rZXlodWIvcmVzdC92MS9hY2NvdW50L21lJyk7XG5cdH1cblxuXHRyZWFkQ2FjaGVkVmF1bHRzID0gKCkgPT4ge1xuXHRcdHJldHVybiB0aGlzLmdldFZhdWx0cygpO1xuXHR9XG5cblx0ZmV0Y2hWYXVsdHMgPSAoKSA9PiB7XG5cdFx0Y29uc3QgYWNjb3VudCA9IHRoaXMuZmV0Y2hBY2NvdW50KCk7XG5cdFx0cmV0dXJuIHRoaXMuZmV0Y2hQZXJzb25hbFZhdWx0KGFjY291bnQpLnRoZW4oKHBlcnNvbmFsKSA9PiB7XG5cdFx0XHRyZXR1cm4gdGhpcy5mZXRjaEdyb3VwVmF1bHRzKGFjY291bnQpLnRoZW4oKGdyb3VwcykgPT4ge1xuXHRcdFx0XHRncm91cHMudW5zaGlmdChwZXJzb25hbCk7XG5cdFx0XHRcdHRoaXMuc2V0VmF1bHRzKGdyb3Vwcyk7XG5cdFx0XHRcdHJldHVybiBncm91cHM7XG5cdFx0XHR9KS5jYXRjaChlID0+IHtcblx0XHRcdFx0Y29uc29sZS5sb2coZSk7XG5cdFx0XHR9KTtcblx0XHR9KS5jYXRjaChlID0+IHtcblx0XHRcdGNvbnNvbGUubG9nKGUpO1xuXHRcdH0pO1xuXHR9XG5cblx0ZmV0Y2hQZXJzb25hbFZhdWx0ID0gKGZldGNoQWNjb3VudCkgPT4ge1xuXHRcdHJldHVybiBmZXRjaEFjY291bnQudGhlbihhY2NvdW50ID0+XG5cdFx0XHR0aGlzLmZldGNoSlNPTih0aGlzLnNlbGZMaW5rKGFjY291bnQpICsgJz9hZGRpdGlvbmFsPXZhdWx0JmFkZGl0aW9uYWw9c2V0dGluZ3MnKSk7XG5cdH1cblxuXHQvLyBtYXhGZXRjaGVzIGxpbWl0cyB0aGUgdG90YWwgYW1vdW50IG9mIGZldGNoZXMuIDEwIGZldGNoZXMgb2YgMTAwIGl0ZW1zIGVhY2ggOj0gbWF4IDEwMDAgZ3JvdXB2YXVsdHNcblx0ZmV0Y2hHcm91cFZhdWx0cyA9IChmZXRjaEFjY291bnQsIHJhbmdlU3RhcnQgPSAwLCBtYXhGZXRjaGVzID0gMTApID0+IHtcblx0XHRyZXR1cm4gZmV0Y2hBY2NvdW50XG5cdFx0XHQudGhlbihhY2NvdW50ID0+IHRoaXMuZmV0Y2hSZXNwb25zZSh0aGlzLnNlbGZMaW5rKGFjY291bnQpICsgJy9ncm91cD8nICtcblx0XHRcdFx0J2dyb3VwLmhhc1ZhdWx0PXRydWUmdmF1bHRBY2Nlc3M9dHJ1ZSZzb3J0PWFzYy1ncm91cC5uYW1lJmFkZGl0aW9uYWw9dmF1bHQnLCBudWxsLCByYW5nZVN0YXJ0KSlcblx0XHRcdC50aGVuKHJlc3BvbnNlID0+IHtcblx0XHRcdFx0bGV0IGNvbnRlbnRSYW5nZUhlYWRlciA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdDb250ZW50LVJhbmdlJyk7XG5cdFx0XHRcdHJldHVybiByZXNwb25zZS5qc29uKCkudGhlbihyZXNwb25zZUpzb24gPT4ge1xuXHRcdFx0XHRcdGxldCBjdXJyZW50SXRlbXMgPSByZXNwb25zZUpzb24uaXRlbXM7XG5cdFx0XHRcdFx0aWYgKG1heEZldGNoZXMgPiAxKSB7XG5cdFx0XHRcdFx0XHRpZiAoY29udGVudFJhbmdlSGVhZGVyICE9IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0bGV0IGNvbnRlbnRSYW5nZSA9IHRoaXMucGFyc2VDb250ZW50UmFuZ2UoY29udGVudFJhbmdlSGVhZGVyKTtcblx0XHRcdFx0XHRcdFx0aWYgKGNvbnRlbnRSYW5nZSAhPSBudWxsICYmIHRoaXMuaGFzTW9yZShjb250ZW50UmFuZ2UpKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly9yZWFkIGV2ZXJ5dGhpbmdcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5mZXRjaEdyb3VwVmF1bHRzKGZldGNoQWNjb3VudCwgY29udGVudFJhbmdlLmVuZCArIDEsIG1heEZldGNoZXMgLSAxKS50aGVuKG90aGVySXRlbXMgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGN1cnJlbnRJdGVtcy5jb25jYXQob3RoZXJJdGVtcyk7XG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIGN1cnJlbnRJdGVtcztcblx0XHRcdFx0fSlcblx0XHRcdH0pO1xuXHR9XG5cblx0ZmV0Y2hVbmxvY2tlZFJlY29yZCA9IChyZWNvcmQpID0+IHtcblx0XHRyZXR1cm4gdGhpcy5mZXRjaEpTT04odGhpcy5zZWxmTGluayhyZWNvcmQpICsgJz9hZGRpdGlvbmFsPXNlY3JldCcpO1xuXHR9XG5cblx0ZmV0Y2hSb3RhdGluZ1Bhc3N3b3JkID0gKCkgPT4ge1xuXHRcdHJldHVybiB0aGlzLmZldGNoQWNjb3VudCgpXG5cdFx0XHQudGhlbihhY2NvdW50ID0+IHtcblx0XHRcdFx0aWYgKCFhY2NvdW50LnRva2VuUGFzc3dvcmRFbmFibGVkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXMuZmV0Y2hKU09OKHRoaXMuZ2V0SXNzdWVyKCkgKyAnL2tleWh1Yi9yZXN0L3YxL2FjY291bnQvcHJvdmlzaW9uaW5nL3Rva2VucHdkJywge1xuXHRcdFx0XHRcdHF1ZXJ5OiB7IGF1dGhSZXF1aXJlZExldmVsOiAnaGlnaCcgfVxuXHRcdFx0XHR9KS50aGVuKHJldCA9PlxuXHRcdFx0XHRcdE9iamVjdC5hc3NpZ24oeyB0eXBlOiAnUEFTU1dPUkQnLCB1c2VybmFtZTogYWNjb3VudC51c2VybmFtZSB9LCByZXQpKVxuXHRcdFx0fSk7XG5cdH1cblxuXHRidWlsZEhlYWRlcnMgPSAocmFuZ2VTdGFydCwgcmFuZ2VFbmQpID0+IHtcblx0XHRsZXQgdG9rZW4gPSB0aGlzLmdldFRva2VuKCk7XG5cdFx0Y29uc3QgcmV0ID0gbmV3IEhlYWRlcnMoKTtcblx0XHRyZXQuYXBwZW5kKCdBY2NlcHQnLCAnYXBwbGljYXRpb24vdm5kLnRvcGljdXMua2V5aHViK2pzb247dmVyc2lvbj12NjMnKTtcblx0XHRyZXQuYXBwZW5kKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vdm5kLnRvcGljdXMua2V5aHViK2pzb247dmVyc2lvbj12NjMnKTtcblx0XHRyZXQuYXBwZW5kKCdBdXRob3JpemF0aW9uJywgJ0JlYXJlciAnICsgdG9rZW4uYWNjZXNzX3Rva2VuKTtcblx0XHRpZiAocmFuZ2VTdGFydCAhPSBudWxsKSB7XG5cdFx0XHRyZXQuYXBwZW5kKCdSYW5nZScsICdpdGVtcz0nICsgcmFuZ2VTdGFydCArICctJyArIHJhbmdlRW5kKVxuXHRcdH1cblx0XHRpZiAodG9rZW4udmF1bHRTZXNzaW9uKSB7XG5cdFx0XHRyZXQuYXBwZW5kKCd0b3BpY3VzLVZhdWx0LXNlc3Npb24nLCB0b2tlbi52YXVsdFNlc3Npb24pXG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH1cblxuXHRkaXNjb25uZWN0ID0gKCkgPT4ge1xuXHRcdGNocm9tZS5zdG9yYWdlLnN5bmMuY2xlYXIoKTtcblx0XHRjaHJvbWUuc3RvcmFnZS5sb2NhbC5jbGVhcigpO1xuXHRcdHRoaXMucmVzZXQoKTtcblx0fVxuXG5cdHJlc2V0ID0gKCkgPT4ge1xuXHRcdGNocm9tZS5jb250ZXh0TWVudXMucmVtb3ZlQWxsKCk7XG5cdFx0dGhpcy5zZXRUb2tlbih1bmRlZmluZWQpO1xuXHRcdHRoaXMuc2V0VmF1bHRzKFtdKTtcblx0XHR0aGlzLl9hdXRoU3RhdGUgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRjbGVhclNlc3Npb24gPSAoKSA9PiB7XG5cdFx0dGhpcy5zZXRUb2tlbih1bmRlZmluZWQpO1xuXHRcdHRoaXMuc2V0VmF1bHRzKFtdKTtcblx0XHRjaHJvbWUuc3RvcmFnZS5sb2NhbC5yZW1vdmUoWydvYXV0aFRva2VuJywgJ3ZhdWx0cyddKTtcblx0fVxuXG5cdGxvZ291dCA9ICgpID0+IHtcblx0XHR0aGlzLmNsZWFyU2Vzc2lvbigpO1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRjaHJvbWUudGFicy5jcmVhdGUoe1xuXHRcdFx0XHR1cmw6IHRoaXMuZ2V0SXNzdWVyKCkgKyAnL2xvZ2luL29hdXRoMi9sb2dvdXQnLFxuXHRcdFx0XHRhY3RpdmU6IHRydWVcblx0XHRcdH0sIHRhYiA9PiB7XG5cdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9XG5cblx0dXBkYXRlQmFkZ2UgPSAodGFiKSA9PiB7XG5cdFx0aWYgKHRhYi51cmwpIHtcblx0XHRcdGNvbnN0IGNvdW50ID0gVmF1bHRzLmZpbmRSZWNvcmRzQnlVcmxzKHRoaXMuZ2V0VmF1bHRzKCksIFt0YWIudXJsXSkubGVuZ3RoO1xuXHRcdFx0Y29uc3QgYWN0aW9uID0gY2hyb21lLmFjdGlvbiA/IGNocm9tZS5hY3Rpb24gOiBjaHJvbWUuYnJvd3NlckFjdGlvbjtcblx0XHRcdGFjdGlvbi5zZXRCYWRnZVRleHQoe1xuXHRcdFx0XHR0YWJJZDogdGFiLmlkLFxuXHRcdFx0XHR0ZXh0OiBjb3VudCA9PT0gMCA/ICcnIDogY291bnQudG9TdHJpbmcoKVxuXHRcdFx0fSkuY2F0Y2goKCkgPT4geyB9KTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRob3N0RnJvbVVybCA9ICh1cmwpID0+IHtcblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuIG5ldyBVUkwodXJsKS5ob3N0O1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiB1cmw7XG5cdFx0fVxuXHR9XG5cblx0Z2V0U2VhcmNoUXVlcnkgPSAodXJsKSA9PiB7XG5cdFx0Y29uc3Qga2V5ID0gJ3NlYXJjaC0nICsgdGhpcy5ob3N0RnJvbVVybCh1cmwpO1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fc2VhcmNoZXNba2V5XSB8fCAnJyk7XG5cdH1cblxuXHRzZXRTZWFyY2hRdWVyeSA9ICh1cmwsIHF1ZXJ5KSA9PiB7XG5cdFx0dGhpcy5fc2VhcmNoZXNbJ3NlYXJjaC0nICsgdGhpcy5ob3N0RnJvbVVybCh1cmwpXSA9IHF1ZXJ5XG5cdFx0cmV0dXJuIGNocm9tZS5zdG9yYWdlLnNlc3Npb24uc2V0KHsgJ3NlYXJjaGVzJzogdGhpcy5fc2VhcmNoZXMgfSk7XG5cdH1cblxuXHRjaGVja0xpY2Vuc2UgPSAobGljZW5zZSwgaXNzdWVyLCB1cmkpID0+IHtcblx0XHRpZiAoaXNzdWVyICE9PSB1cmkpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdJc3N1ZXIgZG9lcyBub3QgbWF0Y2ggVVJJOiAnICsgaXNzdWVyICsgJyAhPT0gJyArIHVyaSk7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCdtaXNtYXRjaCcpO1xuXHRcdH1cblx0XHRjb25zdCBqd2tzID0gam9zZS5jcmVhdGVMb2NhbEpXS1NldCh7XG5cdFx0XHRrZXlzOiBbe1xuXHRcdFx0XHRrdHk6ICdSU0EnLFxuXHRcdFx0XHRlOiAnQVFBQicsXG5cdFx0XHRcdHVzZTogJ3NpZycsXG5cdFx0XHRcdGtpZDogJ0xJQ0VOU0V2MScsXG5cdFx0XHRcdGFsZzogJ1JTMjU2Jyxcblx0XHRcdFx0bjogJ3Q1LXJ2WE1rZlkwSzNBdFpvdng5alJRbVNLR2JYLTNGUmdiQjZBYUNLZVp2R01OUXFVV0lKaUtVbHFaeW5ZQnNwSjA3QWRDdVpkZW42TCdcblx0XHRcdFx0XHQrICdpMVNObnVxMTM4cnp5eWp6bWVaV2hUUVpsZWhTYi1zRkZjbGIweHFNZ0lScFVCMUFOcWZ2RHkwaU9GdTA2OEVxMFc0VXdNenAtdzUnXG5cdFx0XHRcdFx0KyAnVm5SYTJaQkhYdkVVZlBlQnc1M01ReWdGRkFETXBhT01WMDB1WVM2bFN5VGQtTnVnU2QyR2NWWjF1OVUxeDA2X3BHVlVFdENyZW05J1xuXHRcdFx0XHRcdCsgJ0NOSml5cGJOSDJ6Rmh2YW1SamRjV1hLaWpfVU1yV2FrNVVjN1JtOEhtWE9RXzBpNHA3TmUxM0x2M1VJaUxpQnBmdkFlVC15aUI1aCdcblx0XHRcdFx0XHQrICd5TEpxTVhXMEZpazJkRHlVa2U2UUc4YXhGY0dEcUIxaGFqendUVGxETjJ0UzFoSk16WFFkcE0yUWNReWRfWVliRUhfdjhUMzVGMnUnXG5cdFx0XHRcdFx0KyAnSHNYSDdibTFXMjE0c3RqbUg2dC11ak1MQnpXbmVvdjRNRTk1dHN1VVdmWGtRZ0NIODBNeUp2aWR0TGw5MVVwcTZXR2xYNUlyb1haJ1xuXHRcdFx0XHRcdCsgJ09JRFpobXNncHFxVGtvSW4tNDVlN0k4REJ4akstUHI0eGMyc2g4c3pNODRxV3hFQkpSUnliblVWVzY3V0hSZVdWX2NuVWZHSkF4MCdcblx0XHRcdFx0XHQrICd1QXZWMm45elpRaUhkQjZTaFJ1RnpDWjdxMUNNaDFUdHI5Z2syOVJlVmItcEtxQTUxMXhMSmk1RkE0R3BlRjAzQy1QcllhM2NQeC0nXG5cdFx0XHRcdFx0KyAnSkc2aDQ0WjhKV2xOYjl6SEd2RlVkQXd0UERjLXhDX21ESWRuLW1lMUdtd1BTTk5GdUJaMzdSZ3luUkNnWkMtY2d3aUNmS05fVm03J1xuXHRcdFx0XHRcdCsgJ1h5SHUwJ1xuXHRcdFx0fSwge1xuXHRcdFx0XHRrdHk6ICdSU0EnLFxuXHRcdFx0XHRlOiAnQVFBQicsXG5cdFx0XHRcdHVzZTogJ3NpZycsXG5cdFx0XHRcdGtpZDogJ0xJQ0VOU0V2MicsXG5cdFx0XHRcdGFsZzogJ1JTMjU2Jyxcblx0XHRcdFx0bjogJzd1NHVTTWtHYkg3VWtfV3I5QWpVZjY4YU9NSlRCMENtZzFmcWZNeUpqME5KTVVSRmJaUC1mYXFDMHhFLXFwMUJabXpXQUdCQ0NQbEtGSCdcblx0XHRcdFx0XHQrICdQbnZwZF9MOTNvc2ltSFo5VUtEbFhFa0tYbW9fZWluaWJmVTZXUWMyWVFmclZFR3M4d2oyNjU5NlYyZVpJcmtoNzhOd1EtcmU1VlcnXG5cdFx0XHRcdFx0KyAnVkU2WkQtY1BDUWlLd1ZUZlpFRzQxdHVHcEtwS3VZX2VRQmRGdWs1WnM4RTBVWkZhS1JZMTd1V2hUaFFnYVd6bEpmUEdqOWNua1hJJ1xuXHRcdFx0XHRcdCsgJ1JESXQ2R0dlYXJucEh4YjUzU3ZuZlNBWTZjX3RXYURoTDdhOWxNUUJVZzN6SDU1Vm0taVZQN2Fma3B3bjgwenVLRnpDeVZWTmViSydcblx0XHRcdFx0XHQrICcxMkNjRUdud0NYSnlKeld3dHBvQXVlbE13bzc5UnJibDNiZjlqWklFMGljWWRSQVRkQW9mVmlPSXpVQ2NQNXBiSWV4WGFwSDNzZm0nXG5cdFx0XHRcdFx0KyAnb2FiMlZ4U1c0bHlncXEzVWItSXgxM2pYX2kycTdTUXVURVZTNlBqVmU3MUZpdV9SR1hwaHN4Z0g5dnMxSmQ5SHM5alh1MFZkenpDJ1xuXHRcdFx0XHRcdCsgJ09NYXZ2cFNhYWcxSm1lcGVDSm9UUmY5anVqckpHTjZRbUhHU21KbUhMNnB2YnZHQ0ZQMmVZcHJoOXlIMFowdHUtMG5jWG1HN1VLQSdcblx0XHRcdFx0XHQrICc3V2p4bE8tcnZySmg3bmFjZC1EY01ZcS1VNlI2Rjc2aUNKbFBmUHRtaFlpV01aZUkzbGpuN2xxN1NvampUR3JwY0JxSXZ1aG9UY0gnXG5cdFx0XHRcdFx0KyAnX2VnRmd4R2ZWd2VNX1FkUTM5TlplZTZMb25hajJ0alVtY3cwd1E2VUVmc3FXb1BvRVhNa05FVlgtZ3NhNzBYQ0VreEhucjZMVFE1J1xuXHRcdFx0XHRcdCsgJ3dXRXNzJ1xuXHRcdFx0fSwge1xuXHRcdFx0XHRrdHk6ICdSU0EnLFxuXHRcdFx0XHRlOiAnQVFBQicsXG5cdFx0XHRcdHVzZTogJ3NpZycsXG5cdFx0XHRcdGtpZDogJ1RFU1RfTElDRU5TRV9TSUdOSU5HX0tFWScsXG5cdFx0XHRcdGFsZzogJ1JTMjU2Jyxcblx0XHRcdFx0bjogJzF4dzRSUERIVEVnUENRNmZzNElmZUtvdkQwUnJ3NlZ0X0tHZHFIQkdyS25tb0lfbEV3MDRBUFIxNUlxMXZxQ1ZjaGcwVFZLUHFxN0ZKSSdcblx0XHRcdFx0XHQrICdKU2xhWGdqWlktZmdrNjJUMnQ3X0cwazhiZEF1T1lsTi1GR2c3X01ITm1NWXVaNkp4bENmY3A5S0tFSFAyeFJGX1ZvOURodWg4WkYnXG5cdFx0XHRcdFx0KyAnNEV6eXhRc2JJdDBsWElIcXp0RERiZ2hfM0RCRUtLZW9KRGxqSGM0SlFLWUdLYUg3M0VZbkZXcVlvT3NHUmVqNElDTElpOVlVcFRtJ1xuXHRcdFx0XHRcdCsgJ2Y2UDJ5MUZlT3M2V2JmNUVBUWM2QW5vVGhRM1B5QnhROVhUM1hZWDd1dFplMlIxNW0zcTZDOFdndDF3ZzhDcFNaWVd0clFGX2FOVCdcblx0XHRcdFx0XHQrICdtT2I5Wmh4V0NMWmN3VHVGRmFTcF9Db1A5UWdrVDk0V3I4ODhkWHJEM0tnMUp3M1VSdkh0RDVKa2hyRlhmaThzR2xaVmNvVkF0VkEnXG5cdFx0XHRcdFx0KyAnWS1nbkZfZ2xDd043cFl4RlZtaE9Ra1F6M0VPOVAzdHFyTDRkM0ViOGVQc2VPY1ZWYkQ1WEkzakg2WTA1Wk1BM3hUVld5OXFQYXVRJ1xuXHRcdFx0XHRcdCsgJ2FRdFNoLUh0MkROaDBMdWRmRnMtTzVET2lCUXJSbGtleWhxSzBINnViRGtDWWllRXYzZ3NDRm9tX3BlZGV3a09qWGxsYUo1akxNcCdcblx0XHRcdFx0XHQrICdaTDRfUURNVC1TOUdCNU9SUUhUS1RzdjhHU250SEFnakEtT1VyUFhGbU96dkVvYUZCSTNDMG96cU9CaUxrN1daanVJdGFYZXZGRlonXG5cdFx0XHRcdFx0KyAnUmNyaGhJSm0xTktDZjNoVXBEMTZFejJFeTMyMHVNRTg0dWVqRnpjQU5GTWJPT2tuSXUyY1ZDd250N3g0cURrVEFBWEZnMlY2MTU2J1xuXHRcdFx0XHRcdCsgJ3BlMzk4J1xuXHRcdFx0fV1cblx0XHR9KTtcblx0XHRyZXR1cm4gam9zZS5qd3RWZXJpZnkoYXRvYihsaWNlbnNlKSwgandrcywge30pLnRoZW4odmVyaWZ5UmVzdWx0ID0+IHtcblx0XHRcdGNvbnN0IGRvbWFpbnMgPSB2ZXJpZnlSZXN1bHQucGF5bG9hZC5kbW47XG5cdFx0XHRpZiAoZG9tYWlucyA9PT0gdW5kZWZpbmVkIHx8IGRvbWFpbnMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKCdMaWNlbnNlIGRvZXMgbm90IGNvbnRhaW4gZG9tYWlucywgY2Fubm90IG1ha2UgYSBtYXRjaCcpO1xuXHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCd1bmtub3duJyk7XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBpc3N1ZXJIb3N0ID0gbmV3IFVSTChpc3N1ZXIpLmhvc3RuYW1lXG5cdFx0XHRjb25zdCBtYXRjaCA9IGRvbWFpbnMuc29tZShkID0+IG5ldyBVUkwoZCkuaG9zdG5hbWUgPT09IGlzc3Vlckhvc3QpO1xuXHRcdFx0aWYgKG1hdGNoKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKCdMaWNlbnNlIG1hdGNoZXMgaXNzdWVyICcgKyBpc3N1ZXIpO1xuXHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCdtYXRjaCcpO1xuXHRcdFx0fVxuXHRcdFx0Y29uc29sZS5sb2coJ0xpY2Vuc2UgZG9lcyBub3QgbWF0Y2ggaXNzdWVyICcgKyBpc3N1ZXIgKyAnIGluICcgKyBkb21haW5zKTtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoJ21pc21hdGNoJyk7XG5cdFx0fSkuY2F0Y2goZXJyb3IgPT4ge1xuXHRcdFx0Y29uc29sZS5sb2coJ0xpY2Vuc2UgdmVyaWZpY2F0aW9uIGZhaWxlZCB3aXRoICcgKyBlcnJvcik7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCdtaXNtYXRjaCcpO1xuXHRcdH0pO1xuXHR9XG5cblx0aW52b2tlID0gKHJlcXVlc3QpID0+IHtcblx0XHRpZiAocmVxdWVzdC5tZXRob2QgPT09ICdnZXRJc3N1ZXInKSB7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuZ2V0SXNzdWVyKCkpO1xuXHRcdH0gZWxzZSBpZiAocmVxdWVzdC5tZXRob2QgPT09ICdnZXRTZWFyY2hRdWVyeScpIHtcblx0XHRcdHJldHVybiB0aGlzLmdldFNlYXJjaFF1ZXJ5KHJlcXVlc3QudXJsKTtcblx0XHR9IGVsc2UgaWYgKHJlcXVlc3QubWV0aG9kID09PSAnc2V0U2VhcmNoUXVlcnknKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5zZXRTZWFyY2hRdWVyeShyZXF1ZXN0LnVybCwgcmVxdWVzdC5xdWVyeSk7XG5cdFx0fSBlbHNlIGlmIChyZXF1ZXN0Lm1ldGhvZCA9PT0gJ3JlYWRDYWNoZWRWYXVsdHMnKSB7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMucmVhZENhY2hlZFZhdWx0cygpKTtcblx0XHR9IGVsc2UgaWYgKHJlcXVlc3QubWV0aG9kID09PSAnZmV0Y2hWYXVsdHMnKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5mZXRjaFZhdWx0cygpO1xuXHRcdH0gZWxzZSBpZiAocmVxdWVzdC5tZXRob2QgPT09ICdmZXRjaFVubG9ja2VkUmVjb3JkJykge1xuXHRcdFx0cmV0dXJuIHRoaXMuZmV0Y2hVbmxvY2tlZFJlY29yZChyZXF1ZXN0LnJlY29yZCk7XG5cdFx0fSBlbHNlIGlmIChyZXF1ZXN0Lm1ldGhvZCA9PT0gJ2ZldGNoUm90YXRpbmdQYXNzd29yZCcpIHtcblx0XHRcdHJldHVybiB0aGlzLmZldGNoUm90YXRpbmdQYXNzd29yZCgpO1xuXHRcdH0gZWxzZSBpZiAocmVxdWVzdC5tZXRob2QgPT09ICd1cGRhdGVCYWRnZScpIHtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy51cGRhdGVCYWRnZShyZXF1ZXN0LnRhYikpO1xuXHRcdH0gZWxzZSBpZiAocmVxdWVzdC5tZXRob2QgPT09ICdyZWFkU2V0dGluZ3MnKSB7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuZ2V0U2V0dGluZ3MoKSk7XG5cdFx0fSBlbHNlIGlmIChyZXF1ZXN0Lm1ldGhvZCA9PT0gJ3dyaXRlU2V0dGluZ3MnKSB7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuc2V0U2V0dGluZ3MocmVxdWVzdC5zZXR0aW5ncykpO1xuXHRcdH0gZWxzZSBpZiAocmVxdWVzdC5tZXRob2QgPT09ICdoYXNQZXJtaXNzaW9ucycpIHtcblx0XHRcdHJldHVybiB0aGlzLmhhc1Blcm1pc3Npb25zKCk7XG5cdFx0fSBlbHNlIGlmIChyZXF1ZXN0Lm1ldGhvZCA9PT0gJ2xvZ291dCcpIHtcblx0XHRcdHJldHVybiB0aGlzLmxvZ291dCgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zb2xlLmxvZygnaW52YWxpZCByZXF1ZXN0JywgcmVxdWVzdCk7XG5cdFx0fVxuXHR9XG5cblx0aGFuZGxlTWVzc2FnZSA9IChyZXF1ZXN0LCBzZW5kZXIsIHNlbmRSZXNwb25zZSkgPT4ge1xuXHRcdGlmIChzZW5kZXIuZXh0ZW5zaW9uSWQgPT09IGNocm9tZS5ydW50aW1lLmlkIHx8IHNlbmRlci5pZCA9PT0gY2hyb21lLnJ1bnRpbWUuaWQpIHtcblx0XHRcdGlmIChyZXF1ZXN0LnR5cGUgPT09ICdyZWNvcmQtY291bnQnKSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0aWYgKHJlcXVlc3QudXJsc1swXS5zdGFydHNXaXRoKHRoaXMuZ2V0SXNzdWVyKCkpKSB7XG5cdFx0XHRcdFx0XHRzZW5kUmVzcG9uc2UoeyBjb3VudDogMCB9KTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VuZFJlc3BvbnNlKHtcblx0XHRcdFx0XHRcdFx0Y291bnQ6IFZhdWx0cy5maW5kUmVjb3Jkc0J5VXJscyh0aGlzLnJlYWRDYWNoZWRWYXVsdHMoKSwgcmVxdWVzdC51cmxzKS5sZW5ndGhcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBjYXRjaCAoZSkgeyB9XG5cdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3QudHlwZSA9PT0gJ2NoZWNrLWxpY2Vuc2UnKSB7XG5cdFx0XHRcdHRoaXMuY2hlY2tMaWNlbnNlKHJlcXVlc3QubGljZW5zZSwgcmVxdWVzdC5pc3N1ZXIsIHJlcXVlc3QudXJpKS50aGVuKHN0YXR1cyA9PiB7XG5cdFx0XHRcdFx0c2VuZFJlc3BvbnNlKHsgc3RhdHVzOiBzdGF0dXMgfSk7XG5cdFx0XHRcdH0pXG5cdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3QudHlwZSA9PT0gJ2xpbmsnIHx8IHJlcXVlc3QudHlwZSA9PT0gJ3F1ZXJ5Jykge1xuXHRcdFx0XHRpZiAocmVxdWVzdC50eXBlID09PSAnbGluaycpIHtcblx0XHRcdFx0XHRpZiAodGhpcy5nZXRJc3N1ZXIoKSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnJlc2V0KCk7XG5cdFx0XHRcdFx0XHRjaHJvbWUuc3RvcmFnZS5sb2NhbC5yZW1vdmUoWydvYXV0aFRva2VuJywgJ3ZhdWx0cyddKTtcblx0XHRcdFx0XHRcdHRoaXMuc2V0SXNzdWVyKHJlcXVlc3QuaXNzdWVyKTtcblx0XHRcdFx0XHRcdHRoaXMuc3luY1ZlcnNpb24oKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coJ0Jsb2NraW5nIGEgcmVxdWVzdCB0byB1bmxpbmsgdGhlIGV4dGVuc2lvbicpXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Y29uc3Qgb3duSXNzdWVyID0gdGhpcy5nZXRJc3N1ZXIoKTtcblx0XHRcdFx0XHRzZW5kUmVzcG9uc2Uoe1xuXHRcdFx0XHRcdFx0bGlua2VkOiBvd25Jc3N1ZXIgPT09IHJlcXVlc3QuaXNzdWVyLFxuXHRcdFx0XHRcdFx0aXNzdWVyOiBvd25Jc3N1ZXJcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSBjYXRjaCAoZSkgeyB9XG5cdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3QudHlwZSA9PT0gJ3VubGluaycpIHtcblx0XHRcdFx0dGhpcy5yZXNldCgpO1xuXHRcdFx0XHR0aGlzLnNldElzc3Vlcih1bmRlZmluZWQpO1xuXHRcdFx0XHRjaHJvbWUuc3RvcmFnZS5sb2NhbC5yZW1vdmUoWydvYXV0aFRva2VuJywgJ3ZhdWx0cyddKTtcblx0XHRcdFx0Y2hyb21lLnN0b3JhZ2Uuc3luYy5yZW1vdmUoJ2lzc3VlcicpO1xuXHRcdFx0XHRzZW5kUmVzcG9uc2Uoe1xuXHRcdFx0XHRcdGxpbmtlZDogZmFsc2Vcblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3QudHlwZSA9PT0gJ2ludm9rZScpIHtcblx0XHRcdFx0dGhpcy5pbnZva2UocmVxdWVzdCkudGhlbihcblx0XHRcdFx0XHRtc2cgPT4ge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0c2VuZFJlc3BvbnNlKHsgb2s6IHRydWUsIG1zZzogbXNnIH0pO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZSkgeyBjb25zb2xlLmxvZyhlKSB9XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRlID0+IHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHNlbmRSZXNwb25zZSh7IG9rOiBmYWxzZSwgZXJyb3I6IE9iamVjdC5hc3NpZ24oeyBtZXNzYWdlOiBlLm1lc3NhZ2UgfSwgZSkgfSlcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHsgY29uc29sZS5sb2coZSkgfVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0gZWxzZSBpZiAocmVxdWVzdC50eXBlID09PSAncXVlcnktdGFiLXVybCcpIHtcblx0XHRcdFx0c2VuZFJlc3BvbnNlKHsgJ3VybCc6IHNlbmRlci50YWIudXJsIH0pO1xuXHRcdFx0fSBlbHNlIGlmIChyZXF1ZXN0LnR5cGUgPT09ICdhZGQtbmV3LXJlY29yZCcpIHtcblx0XHRcdFx0Y2hyb21lLnRhYnMucXVlcnkoeyBhY3RpdmU6IHRydWUsIGN1cnJlbnRXaW5kb3c6IHRydWUgfSwgKHRhYikgPT4ge1xuXHRcdFx0XHRcdGNocm9tZS50YWJzLmNyZWF0ZSh7IHVybDogdGhpcy5nZXRJc3N1ZXIoKSArICcvY29uc29sZS92YXVsdHMvbmV3cmVjb3JkP3VybD0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHRhYlswXS51cmwpIH0pO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmIChyZXF1ZXN0LnR5cGUgPT09ICdnby10by1rZXlodWInKSB7XG5cdFx0XHRcdGNocm9tZS50YWJzLmNyZWF0ZSh7IHVybDogdGhpcy5nZXRJc3N1ZXIoKSB9KTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmIChyZXF1ZXN0LnR5cGUgPT09ICdjYWxsYmFjaycpIHtcblx0XHRcdFx0dGhpcy5oYW5kbGVDYWxsYmFjayh7IHRhYklkOiBzZW5kZXIudGFiLmlkLCB1cmw6IHNlbmRlci50YWIudXJsLnNwbGl0KCcjJylbMV0gfSk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAocmVxdWVzdC50eXBlID09PSAncmVsYXknKSB7XG5cdFx0XHRcdGNocm9tZS50YWJzLnF1ZXJ5KHsgYWN0aXZlOiB0cnVlLCBjdXJyZW50V2luZG93OiB0cnVlIH0sIHRhYnMgPT4ge1xuXHRcdFx0XHRcdGlmICh0YWJzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRcdHJlcXVlc3QuYm9keS5yZWxheWVkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGNocm9tZS50YWJzLnNlbmRNZXNzYWdlKHRhYnNbMF0uaWQsIHJlcXVlc3QuYm9keSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmIChyZXF1ZXN0LnR5cGUgPT09ICdnZW5lcmF0ZS1ub25jZScpIHtcblx0XHRcdFx0Y29uc3Qgbm9uY2UgPSBjcnlwdG8ucmFuZG9tVVVJRCgpO1xuXHRcdFx0XHRjaHJvbWUuc3RvcmFnZS5zZXNzaW9uLnNldCh7ICdpZnJhbWVOb25jZSc6IG5vbmNlIH0pLnRoZW4oKCkgPT4ge1xuXHRcdFx0XHRcdHNlbmRSZXNwb25zZSh7IG5vbmNlOiBub25jZSB9KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3QudHlwZSA9PT0gJ3ZlcmlmeS1ub25jZScpIHtcblx0XHRcdFx0Y2hyb21lLnN0b3JhZ2Uuc2Vzc2lvbi5nZXQoJ2lmcmFtZU5vbmNlJykudGhlbihpdGVtcyA9PiB7XG5cdFx0XHRcdFx0Y29uc3Qgb2sgPSBpdGVtcy5pZnJhbWVOb25jZSAhPT0gbnVsbCAmJiByZXF1ZXN0Lm5vbmNlID09PSBpdGVtcy5pZnJhbWVOb25jZTtcblx0XHRcdFx0XHRpZiAoIW9rKSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZygnSW52YWxpZCBub25jZSBkZXRlY3RlZCwgcmVmdXNpbmcgdG8gcmVuZGVyIHRoZSBwb3B1cDogZXhwZWN0ZWQgJ1xuXHRcdFx0XHRcdFx0XHQrIGl0ZW1zLmlmcmFtZU5vbmNlICsgJywgZ290ICcgKyByZXF1ZXN0Lm5vbmNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c2VuZFJlc3BvbnNlKHsgb2s6IG9rIH0pO1xuXHRcdFx0XHRcdGNocm9tZS5zdG9yYWdlLnNlc3Npb24ucmVtb3ZlKCdpZnJhbWVOb25jZScpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRoYW5kbGVDYWxsYmFjayA9IChkZXRhaWxzKSA9PiB7XG5cdFx0dHJ5IHtcblx0XHRcdGlmIChkZXRhaWxzLnRhYklkICE9PSAtMSkge1xuXHRcdFx0XHRjaHJvbWUudGFicy5yZW1vdmUoZGV0YWlscy50YWJJZCk7XG5cdFx0XHRcdGlmICh0aGlzLl9yZXN0b3JlTGFzdEFjdGl2ZVRhYiAmJiB0aGlzLl9sYXN0QWN0aXZlVGFiICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRjaHJvbWUudGFicy51cGRhdGUodGhpcy5fbGFzdEFjdGl2ZVRhYiwgeyBhY3RpdmU6IHRydWUgfSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRoaXMuY2FsbGJhY2soZGV0YWlscy51cmwpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdGNvbnNvbGUubG9nKGUpO1xuXHRcdH1cblx0XHRyZXR1cm4geyBjYW5jZWw6IHRydWUgfTtcblx0fVxuXG5cdGhhbmRsZVRhYlVwZGF0ZWQgPSAodGFiSWQsIGNoYW5nZUluZm8sIHRhYikgPT4ge1xuXHRcdGlmIChjaGFuZ2VJbmZvLnVybCB8fCBjaGFuZ2VJbmZvLnN0YXR1cylcblx0XHRcdHRoaXMudXBkYXRlQmFkZ2UodGFiKTtcblx0fVxuXG5cdGhhbmRsZVRhYkNyZWF0ZWQgPSAodGFiKSA9PiB7XG5cdFx0dGhpcy51cGRhdGVCYWRnZSh0YWIpO1xuXHR9XG5cblx0aGFuZGxlVGFiUmVwbGFjZWQgPSAoYWRkZWRUYWJJZCwgcmVtb3ZlZFRhYklkKSA9PiB7XG5cdFx0Y2hyb21lLnRhYnMuZ2V0KGFkZGVkVGFiSWQsICh0YWIpID0+IHtcblx0XHRcdHRoaXMudXBkYXRlQmFkZ2UodGFiKTtcblx0XHR9KTtcblx0fVxuXG5cdGhhbmRsZVRhYkFjdGl2YXRlZCA9IChhY3RpdmVJbmZvKSA9PiB7XG5cdFx0Y2hyb21lLnRhYnMuZ2V0KGFjdGl2ZUluZm8udGFiSWQsICh0YWIpID0+IHtcblx0XHRcdHRoaXMudXBkYXRlQmFkZ2UodGFiKTtcblx0XHR9KTtcblx0fVxuXG5cdGhhbmRsZUNvbW1hbmQgPSAoY29tbWFuZCkgPT4ge1xuXHRcdGlmICh0aGlzLmhhc0lzc3VlcigpKSB7XG5cdFx0XHRjaHJvbWUudGFicy5xdWVyeSh7IGFjdGl2ZTogdHJ1ZSwgY3VycmVudFdpbmRvdzogdHJ1ZSB9LCB0YWJzID0+IHtcblx0XHRcdFx0aWYgKHRhYnMubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRcdFx0aWYgKGNvbW1hbmQgPT09ICd0cmlnZ2VyLWZpbGwtd2l0aC1rZXlodWInKSB7XG5cdFx0XHRcdFx0XHRjaHJvbWUudGFicy5zZW5kTWVzc2FnZSh0YWJzWzBdLmlkLCB7XG5cdFx0XHRcdFx0XHRcdHR5cGU6ICd0cmlnZ2VyLWZpbGwnXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGNvbW1hbmQgPT09ICd0cmlnZ2VyLWZpbGwtcm90YXRpbmctcHdkJykge1xuXHRcdFx0XHRcdFx0dGhpcy5mZXRjaFJvdGF0aW5nUGFzc3dvcmQoKS50aGVuKGNyZWRzID0+IHtcblx0XHRcdFx0XHRcdFx0Y2hyb21lLnRhYnMuc2VuZE1lc3NhZ2UodGFic1swXS5pZCwge1xuXHRcdFx0XHRcdFx0XHRcdHR5cGU6ICdmaWxsJyxcblx0XHRcdFx0XHRcdFx0XHRjcmVkczogY3JlZHNcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9LCBjYXVzZSA9PiB7IH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0aGFuZGxlQ29udGV4dE1lbnVDbGljayA9IChpbmZvLCB0YWIpID0+IHtcblx0XHRjaHJvbWUudGFicy5zZW5kTWVzc2FnZSh0YWIuaWQsIHtcblx0XHRcdHR5cGU6ICd0cmlnZ2VyLWZpbGwnLFxuXHRcdFx0ZWRpdGFibGU6IGluZm8uZWRpdGFibGVcblx0XHR9KTtcblx0fVxuXG5cdHN5bmNWZXJzaW9uID0gKCkgPT4ge1xuXHRcdGlmICghdGhpcy5oYXNJc3N1ZXIoKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGZldGNoKHRoaXMuZ2V0SXNzdWVyKCkgKyAnL2tleWh1Yi9yZXN0L3YxL2luZm8nLCB7XG5cdFx0XHRoZWFkZXJzOiBuZXcgSGVhZGVycyh7ICdBY2NlcHQnOiAnYXBwbGljYXRpb24vdm5kLnRvcGljdXMua2V5aHViK2pzb24nIH0pXG5cdFx0fSkudGhlbihyZXNwb25zZSA9PiB7XG5cdFx0XHRpZiAocmVzcG9uc2Uub2spIHtcblx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLmpzb24oKS50aGVuKGpzb24gPT4ge1xuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heCguLi5qc29uLmNvbnRyYWN0VmVyc2lvbnMpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiAyMTtcblx0XHR9KS50aGVuKHZlcnNpb24gPT4ge1xuXHRcdFx0Y2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHsgJ3ZlcnNpb24nOiB2ZXJzaW9uIH0sICgpID0+IGNocm9tZS5ydW50aW1lLnJlbG9hZCgpKTtcblx0XHR9KTtcblx0fVxuXG5cdHBhcnNlQ29udGVudFJhbmdlID0gKHZhbHVlKSA9PiB7XG5cdFx0Y29uc3QgbWF0Y2hlcyA9IHZhbHVlLm1hdGNoKC9eKFxcdyspICgoXFxkKyktKFxcZCspfFxcKilcXC8oXFxkK3xcXCopJC8pO1xuXHRcdGlmICghbWF0Y2hlcykgcmV0dXJuIG51bGw7XG5cdFx0Y29uc3QgWywgdW5pdCwgLCBzdGFydCwgZW5kLCBzaXplXSA9IG1hdGNoZXM7XG5cdFx0Y29uc3QgcmFuZ2UgPSB7XG5cdFx0XHR1bml0OiB1bml0LFxuXHRcdFx0c3RhcnQ6IHN0YXJ0ICE9IG51bGwgPyBOdW1iZXIoc3RhcnQpIDogbnVsbCxcblx0XHRcdGVuZDogZW5kICE9IG51bGwgPyBOdW1iZXIoZW5kKSA6IG51bGwsXG5cdFx0XHRzaXplOiBzaXplID09PSAnKicgPyBudWxsIDogTnVtYmVyKHNpemUpLFxuXHRcdH07XG5cblx0XHRpZiAocmFuZ2Uuc3RhcnQgPT09IG51bGwgJiYgcmFuZ2UuZW5kID09PSBudWxsICYmIHJhbmdlLnNpemUgPT09IG51bGwpXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdHJldHVybiByYW5nZTtcblx0fVxuXG5cdGhhc01vcmUgPSAoY29udGVudFJhbmdlKSA9PiB7XG5cdFx0aWYgKGNvbnRlbnRSYW5nZS5zaXplICE9IG51bGwpIHtcblx0XHRcdGlmIChjb250ZW50UmFuZ2UuZW5kICE9IG51bGwpIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnRSYW5nZS5lbmQgKyAxIDwgY29udGVudFJhbmdlLnNpemU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gY29udGVudFJhbmdlLnN0YXJ0ICsgMSA8IGNvbnRlbnRSYW5nZS5zaXplO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoY29udGVudFJhbmdlLmVuZCAhPSBudWxsKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50UmFuZ2UuZW5kID4gY29udGVudFJhbmdlLnN0YXJ0O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuIiwiaW1wb3J0IHsgcGFyc2VEb21haW4sIGZyb21VcmwgfSBmcm9tICdwYXJzZS1kb21haW4nO1xuXG5jbGFzcyBWYXVsdHMge1xuXHRoYXNUeXBlKHJlY29yZCwgdHlwZTEsIHR5cGUyKSB7XG5cdFx0aWYgKHJlY29yZC50eXBlcy5pbmNsdWRlcyh0eXBlMSkpXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRyZXR1cm4gdHlwZTIgIT09IHVuZGVmaW5lZCAmJiByZWNvcmQudHlwZXMuaW5jbHVkZXModHlwZTIpO1xuXHR9XG5cblx0ZmluZFJlY29yZHNCeVRleHQodmF1bHRzLCB0ZXh0KSB7XG5cdFx0cmV0dXJuIHRoaXMuc2VhcmNoKHZhdWx0cywgciA9PiB0aGlzLm1hdGNoZXNTZWFyY2godGhpcy5ub3JtKHRleHQpLCByKSk7XG5cdH1cblxuXHRmaW5kUmVjb3Jkc0J5VXJscyh2YXVsdHMsIHVybHMpIHtcblx0XHRyZXR1cm4gdGhpcy5zZWFyY2godmF1bHRzLCByID0+IE1hdGgubWF4KC4uLnVybHMubWFwKHVybCA9PiB0aGlzLnVybE1hdGNoZXModXJsLCByKSkpKTtcblx0fVxuXG5cdHNlYXJjaCh2YXVsdHMsIG1hdGNoZXIpIHtcblx0XHRjb25zdCByZWNvcmRzID0gdmF1bHRzXG5cdFx0XHQuZmlsdGVyKHZhdWx0ID0+ICEhdmF1bHQuYWRkaXRpb25hbE9iamVjdHMudmF1bHQpXG5cdFx0XHQubWFwKCh2YXVsdCkgPT4gdmF1bHQuYWRkaXRpb25hbE9iamVjdHMudmF1bHQpXG5cdFx0XHQucmVkdWNlKChhLCBjKSA9PiBhLmNvbmNhdChjLnJlY29yZHMubWFwKHIgPT4gT2JqZWN0LmFzc2lnbihyLCB7IHZhdWx0OiBjLm5hbWUgfSkpKSwgW10pXG5cdFx0XHQuZmlsdGVyKHIgPT4gdGhpcy5oYXNUeXBlKHIsICdQQVNTV09SRCcsICdUT1RQJykpXG5cdFx0XHQuZmlsdGVyKG1hdGNoZXIpO1xuXG5cdFx0cmVjb3Jkcy5zb3J0KChyMSwgcjIpID0+IHRoaXMucmVjb3JkQ29tcGFyZShyMSwgcjIsIG1hdGNoZXIpKTtcblx0XHRyZXR1cm4gcmVjb3Jkcztcblx0fVxuXG5cdGFic29sdXRlVXJsKHVybCkge1xuXHRcdC8vIGNoZWNrcyB3aGV0aGVyIHRoZSBzdHJpbmcgc3RhcnRzIHdpdGggYSBzY2hlbWVcblx0XHRjb25zdCB3aXRoU2NoZW1lID0gL15bYS16XVthLXowLTkrLi1dKjpcXC9cXC8vO1xuXHRcdHJldHVybiB3aXRoU2NoZW1lLnRlc3QodXJsKSA/IHVybCA6IFwiaHR0cDovL1wiICsgdXJsO1xuXHR9XG5cblx0dXJsTWF0Y2hlcyh1cmwsIHJlY29yZCkge1xuXHRcdGlmICghdXJsIHx8ICFyZWNvcmQudXJsKVxuXHRcdFx0cmV0dXJuIDA7XG5cblx0XHRjb25zdCBwYXJzZWRVcmwgPSBwYXJzZURvbWFpbihmcm9tVXJsKHVybCkpO1xuXHRcdGNvbnN0IHBhcnNlZFJlY29yZFVybCA9IHBhcnNlRG9tYWluKGZyb21VcmwocmVjb3JkLnVybCkpO1xuXHRcdGlmIChwYXJzZWRVcmwgIT09IG51bGwgJiYgcGFyc2VkUmVjb3JkVXJsICE9PSBudWxsICYmXG5cdFx0XHRwYXJzZWRVcmwuZG9tYWluICE9PSB1bmRlZmluZWQgJiYgcGFyc2VkUmVjb3JkVXJsLmRvbWFpbiAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRpZiAodGhpcy5hcnJheUVxdWFscyhwYXJzZWRVcmwudG9wTGV2ZWxEb21haW5zLCBwYXJzZWRSZWNvcmRVcmwudG9wTGV2ZWxEb21haW5zKSAmJlxuXHRcdFx0XHRwYXJzZWRVcmwuZG9tYWluID09PSBwYXJzZWRSZWNvcmRVcmwuZG9tYWluKSB7XG5cdFx0XHRcdGlmICh0aGlzLmFycmF5RXF1YWxzKHBhcnNlZFVybC5zdWJEb21haW5zLCBwYXJzZWRSZWNvcmRVcmwuc3ViRG9tYWlucykpIHtcblx0XHRcdFx0XHRyZXR1cm4gMjtcblx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLmFycmF5Q29udGFpbnNBbGwocGFyc2VkVXJsLnN1YkRvbWFpbnMsIHBhcnNlZFJlY29yZFVybC5zdWJEb21haW5zKSB8fFxuXHRcdFx0XHRcdHRoaXMuYXJyYXlDb250YWluc0FsbChwYXJzZWRSZWNvcmRVcmwuc3ViRG9tYWlucywgcGFyc2VkVXJsLnN1YkRvbWFpbnMpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuIG5ldyBVUkwodXJsKS5ob3N0ID09PSBuZXcgVVJMKHRoaXMuYWJzb2x1dGVVcmwocmVjb3JkLnVybCkpLmhvc3QgPyAxMCA6IDA7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXHR9XG5cblx0YXJyYXlFcXVhbHMoYTEsIGEyKSB7XG5cdFx0cmV0dXJuIGExLmxlbmd0aCA9PT0gYTIubGVuZ3RoICYmXG5cdFx0XHRhMS5ldmVyeShmdW5jdGlvbihhMWVsZW1lbnQsIGluZGV4KSB7IHJldHVybiBhMWVsZW1lbnQgPT09IGEyW2luZGV4XSB9KTtcblx0fVxuXG5cdGFycmF5Q29udGFpbnNBbGwoYXJyLCBzdWJzZXQpIHtcblx0XHRyZXR1cm4gc3Vic2V0LmV2ZXJ5KGUgPT4gYXJyLmluY2x1ZGVzKGUpKTtcblx0fVxuXG5cdG1hdGNoZXNTZWFyY2goc2VhcmNoVGVybSwgcmVjb3JkKSB7XG5cdFx0Y29uc3Qgc2VhcmNoID0gc2VhcmNoVGVybS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiB0aGlzLm5vcm0ocmVjb3JkLm5hbWUudG9Mb3dlckNhc2UoKSkuaW5jbHVkZXMoc2VhcmNoKVxuXHRcdFx0fHwgcmVjb3JkLnV1aWQuaW5kZXhPZihzZWFyY2gpID09PSAwXG5cdFx0XHR8fCAocmVjb3JkLnVybCAmJiB0aGlzLm5vcm0ocmVjb3JkLnVybC50b0xvd2VyQ2FzZSgpKS5pbmNsdWRlcyhzZWFyY2gpKVxuXHRcdFx0fHwgKHJlY29yZC51c2VybmFtZSAmJiB0aGlzLm5vcm0ocmVjb3JkLnVzZXJuYW1lLnRvTG93ZXJDYXNlKCkpLmluY2x1ZGVzKHNlYXJjaCkpXG5cdFx0XHR8fCAocmVjb3JkLmZpbGVuYW1lICYmIHRoaXMubm9ybShyZWNvcmQuZmlsZW5hbWUudG9Mb3dlckNhc2UoKSkuaW5jbHVkZXMoc2VhcmNoKSk7XG5cdH1cblxuXHRub3JtKHZhbCkge1xuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXHRcdHJldHVybiB2YWwubm9ybWFsaXplKCdORkQnKS5yZXBsYWNlKC9bXlxcdTAwMDAtXFx1MDBGRl0vZywgJycpO1xuXHR9XG5cblx0cmVjb3JkQ29tcGFyZShyMSwgcjIsIG1hdGNoZXIpIHtcblx0XHRjb25zdCBjb2xvcnMgPSBbJ0dSRUVOJywgJ1JFRCcsICdCTFVFJywgJ0RBUksnLCAnUElOS19MQVZFTkRFUicsICdDUklNU09OX1JFRCcsICdNSURETEVfWUVMTE9XJywgJ0FORFJPSURfR1JFRU4nLCAnU0FHRScsICdBUlRJQ0hPS0UnLCAnTk9ORSddO1xuXHRcdGNvbnN0IG1hdGNoZXJEaWZmID0gbWF0Y2hlcihyMikgLSBtYXRjaGVyKHIxKTtcblx0XHRpZiAobWF0Y2hlckRpZmYgIT09IDApIHtcblx0XHRcdHJldHVybiBtYXRjaGVyRGlmZjtcblx0XHR9XG5cdFx0aWYgKHIxLmNvbG9yICE9PSByMi5jb2xvcikge1xuXHRcdFx0cmV0dXJuIGNvbG9ycy5pbmRleE9mKHIxLmNvbG9yKSAtIGNvbG9ycy5pbmRleE9mKHIyLmNvbG9yKTtcblx0XHR9XG5cdFx0cmV0dXJuIHIxLm5hbWUubG9jYWxlQ29tcGFyZShyMi5uYW1lKTtcblx0fVxufVxuXG5jb25zdCB2YXVsdHMgPSBuZXcgVmF1bHRzKCk7XG5leHBvcnQgZGVmYXVsdCB2YXVsdHM7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cbi8qIGVzbGludC1lbnYgd2ViZXh0ZW5zaW9ucyAqL1xuXG5pbXBvcnQgKiBhcyBqb3NlIGZyb20gJ2pvc2UnO1xuaW1wb3J0IENsaWVudE9BdXRoMiBmcm9tICcuLi9jbGllbnQtb2F1dGgyJztcbmltcG9ydCBWYXVsdHMgZnJvbSAnLi9WYXVsdHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBLZXlIdWJTZXJ2aWNlIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRjb25zb2xlLmxvZygnTG9hZGluZyBLZXlIdWIgQnJvd3NlciBleHRlbnNpb24gdmVyc2lvbiA3Jyk7XG5cdH1cblxuXHRyZXN0b3JlU3RhdGUgPSAoKSA9PiB7XG5cdFx0cmV0dXJuIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KCdpc3N1ZXInKS50aGVuKGl0ZW1zID0+IHtcblx0XHRcdHRoaXMuX2lzc3VlciA9IGl0ZW1zLmlzc3VlciA/IGl0ZW1zLmlzc3VlciA6IHVuZGVmaW5lZDtcblx0XHRcdHJldHVybiBjaHJvbWUuc3RvcmFnZS5zZXNzaW9uLmdldCgnb2F1dGhUb2tlbicpO1xuXHRcdH0pLnRoZW4oaXRlbXMgPT4ge1xuXHRcdFx0dGhpcy5fdG9rZW4gPSBpdGVtcy5vYXV0aFRva2VuID8gaXRlbXMub2F1dGhUb2tlbiA6IHVuZGVmaW5lZDtcblx0XHRcdHJldHVybiBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQobnVsbCk7XG5cdFx0fSkudGhlbihpdGVtcyA9PiB7XG5cdFx0XHR0aGlzLl92YXVsdHMgPSBpdGVtcy52YXVsdHMgPyBpdGVtcy52YXVsdHMgOiBbXTtcblx0XHRcdHRoaXMuX3NlYXJjaGVzID0gaXRlbXMuc2VhcmNoZXMgPyBpdGVtcy5zZWFyY2hlcyA6IHt9O1xuXHRcdFx0dGhpcy5fc2V0dGluZ3MgPSBpdGVtcy5zZXR0aW5ncyA/IGl0ZW1zLnNldHRpbmdzIDogeyBzaG93X2ljb246IHRydWUgfTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH0pO1xuXHR9XG5cblx0Y2FsbGJhY2sgPSAodXJpKSA9PiB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0QXV0aFN0YXRlKCkucmVzb2x2ZXIodXJpKTtcblx0fVxuXG5cdGdldElzc3VlciA9ICgpID0+IHtcblx0XHRyZXR1cm4gdGhpcy5faXNzdWVyO1xuXHR9XG5cblx0c2V0SXNzdWVyID0gKGlzc3VlcikgPT4ge1xuXHRcdHRoaXMuX2lzc3VlciA9IGlzc3Vlcjtcblx0XHRjaHJvbWUuc3RvcmFnZS5zeW5jLnNldCh7ICdpc3N1ZXInOiBpc3N1ZXIgfSk7XG5cdH1cblxuXHRoYXNJc3N1ZXIgPSAoKSA9PiB7XG5cdFx0cmV0dXJuICEhdGhpcy5nZXRJc3N1ZXIoKTtcblx0fVxuXG5cdGdldFRva2VuID0gKCkgPT4ge1xuXHRcdHJldHVybiB0aGlzLl90b2tlbjtcblx0fVxuXG5cdHNldFRva2VuID0gKHRva2VuKSA9PiB7XG5cdFx0dGhpcy5fdG9rZW4gPSB0b2tlbjtcblx0XHRjaHJvbWUuc3RvcmFnZS5zZXNzaW9uLnNldCh7ICdvYXV0aFRva2VuJzogdG9rZW4gfSk7XG5cdH1cblxuXHRnZXRWYXVsdHMgPSAoKSA9PiB7XG5cdFx0cmV0dXJuIHRoaXMuX3ZhdWx0cztcblx0fVxuXG5cdHNldFZhdWx0cyA9ICh2YXVsdHMpID0+IHtcblx0XHR0aGlzLl92YXVsdHMgPSB2YXVsdHM7XG5cdFx0Y2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHsgJ3ZhdWx0cyc6IHZhdWx0cyB9KTtcblx0fVxuXG5cdGdldEF1dGhTdGF0ZSA9ICgpID0+IHtcblx0XHRyZXR1cm4gdGhpcy5fYXV0aFN0YXRlO1xuXHR9XG5cblx0c2V0QXV0aFN0YXRlID0gKGF1dGhTdGF0ZSkgPT4ge1xuXHRcdHRoaXMuX2F1dGhTdGF0ZSA9IGF1dGhTdGF0ZTtcblx0fVxuXG5cdGdldFNldHRpbmdzID0gKCkgPT4ge1xuXHRcdHJldHVybiB0aGlzLl9zZXR0aW5ncztcblx0fVxuXG5cdHNldFNldHRpbmdzID0gKHNldHRpbmdzKSA9PiB7XG5cdFx0dGhpcy5fc2V0dGluZ3MgPSBzZXR0aW5ncztcblx0XHRjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoeyAnc2V0dGluZ3MnOiBzZXR0aW5ncyB9KTtcblx0fVxuXG5cdGhhc1Blcm1pc3Npb25zID0gKCkgPT4ge1xuXHRcdHJldHVybiBjaHJvbWUucGVybWlzc2lvbnMuY29udGFpbnMoeyBvcmlnaW5zOiBbJyo6Ly8qLyonXSB9KVxuXHR9XG5cblx0ZmV0Y2hUb2tlbiA9IChwYXJhbWV0ZXJzKSA9PiB7XG5cdFx0cGFyYW1ldGVycyA9IE9iamVjdC5hc3NpZ24oe1xuXHRcdFx0cHJvbXB0OiBmYWxzZSxcblx0XHRcdHF1ZXJ5OiB7XG5cdFx0XHRcdGF1dGhWYXVsdDogJ2FjY2Vzcy1pZi11bmxvY2tlZCdcblx0XHRcdH1cblx0XHR9LCBwYXJhbWV0ZXJzKTtcblxuXHRcdGlmICghdGhpcy5oYXNJc3N1ZXIoKSkge1xuXHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignZGlzY29ubmVjdGVkJykpO1xuXHRcdH1cblxuXHRcdGNvbnN0IHRva2VuID0gdGhpcy5nZXRUb2tlbigpO1xuXHRcdGlmICh0b2tlbiAmJiB0b2tlbi52YWxpZF91bnRpbCA+IERhdGUubm93KCkpIHtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUodG9rZW4pO1xuXHRcdH1cblxuXHRcdGxldCBhdXRoU3RhdGUgPSB7XG5cdFx0XHRzdGF0ZTogdGhpcy5yYW5kb20oMzIpLFxuXHRcdFx0bm9uY2U6IHRoaXMucmFuZG9tKDMyKVxuXHRcdH07XG5cdFx0dGhpcy5zZXRBdXRoU3RhdGUoYXV0aFN0YXRlKTtcblxuXHRcdGNvbnN0IG9hdXRoMiA9IG5ldyBDbGllbnRPQXV0aDIoe1xuXHRcdFx0Y2xpZW50SWQ6ICc1NzNhYmU1MS0wZGMyLTQyOTMtYmNlOS01OTkzMjExNjQwNDInLFxuXHRcdFx0YWNjZXNzVG9rZW5Vcmk6IHRoaXMuZ2V0SXNzdWVyKCkgKyAnL2xvZ2luL29hdXRoMi90b2tlbicsXG5cdFx0XHRhdXRob3JpemF0aW9uVXJpOiB0aGlzLmdldElzc3VlcigpICsgJy9sb2dpbi9vYXV0aDIvYXV0aG9yaXplJyxcblx0XHRcdHJlZGlyZWN0VXJpOiAnaHR0cHM6Ly93d3cudG9waWN1cy1rZXlodWIuY29tL2Jyb3dzZXItZXh0ZW5zaW9uLWNhbGxiYWNrLmh0bWwnLFxuXHRcdFx0c2NvcGVzOiBbJ29wZW5pZCcsICdwcm9maWxlJywgJ2FjY2Vzc192YXVsdCddLFxuXHRcdFx0c3RhdGU6IGF1dGhTdGF0ZS5zdGF0ZVxuXHRcdH0pO1xuXG5cblx0XHRyZXR1cm4gdGhpcy5jcmVhdGVUb2tlbkNhbGwocGFyYW1ldGVycywgb2F1dGgyLCBmYWxzZSlcblx0XHRcdC50aGVuKHVyaSA9PiB7XG5cdFx0XHRcdHJldHVybiBvYXV0aDIuY29kZS5nZXRUb2tlbih1cmksIHsgYm9keTogeyBjb2RlX3ZlcmlmaWVyOiBhdXRoU3RhdGUucGtjZVZlcmlmaWVyIH0gfSk7XG5cdFx0XHR9KVxuXHRcdFx0LnRoZW4odG9rZW4gPT4ge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5zdG9yZVRva2VuKHRva2VuKTtcblx0XHRcdH0sIGVycm9yID0+IHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY3JlYXRlVG9rZW5DYWxsKHBhcmFtZXRlcnMsIG9hdXRoMiwgdHJ1ZSkudGhlbih1cmkgPT4ge1xuXHRcdFx0XHRcdHJldHVybiBvYXV0aDIuY29kZS5nZXRUb2tlbih1cmksIHsgYm9keTogeyBjb2RlX3ZlcmlmaWVyOiBhdXRoU3RhdGUucGtjZVZlcmlmaWVyIH0gfSk7XG5cdFx0XHRcdH0pLnRoZW4odG9rZW4gPT4ge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLnN0b3JlVG9rZW4odG9rZW4pO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pLnRoZW4odG9rZW4gPT4gdG9rZW4sIGNhdXNlID0+IHsgY29uc29sZS5sb2coY2F1c2UpIH0pO1xuXHR9XG5cblx0Y3JlYXRlVG9rZW5DYWxsID0gKHBhcmFtZXRlcnMsIG9hdXRoMiwgZXJyb3JoYW5kbGluZykgPT4ge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRsZXQgYXV0aFN0YXRlID0gdGhpcy5nZXRBdXRoU3RhdGUoKTtcblx0XHRcdGF1dGhTdGF0ZS50aW1lID0gRGF0ZS5ub3coKTtcblx0XHRcdGF1dGhTdGF0ZS5yZXNvbHZlciA9IHJlc29sdmU7XG5cdFx0XHRhdXRoU3RhdGUucGtjZVZlcmlmaWVyID0gdGhpcy5yYW5kb20oMzIpO1xuXHRcdFx0dGhpcy5zZXRBdXRoU3RhdGUoYXV0aFN0YXRlKTtcblxuXHRcdFx0dmFyIGJ1ZmZlciA9IG5ldyBUZXh0RW5jb2RlcigndXRmLTgnKS5lbmNvZGUoYXV0aFN0YXRlLnBrY2VWZXJpZmllcik7XG5cdFx0XHRzZWxmLmNyeXB0by5zdWJ0bGUuZGlnZXN0KCdTSEEtMjU2JywgYnVmZmVyKS50aGVuKHBrY2VIYXNoID0+IHtcblx0XHRcdFx0dmFyIHF1ZXJ5T2JqID0ge1xuXHRcdFx0XHRcdHJlc3BvbnNlX3R5cGU6ICdjb2RlJyxcblx0XHRcdFx0XHRub25jZTogYXV0aFN0YXRlLm5vbmNlLFxuXHRcdFx0XHRcdGNvZGVfY2hhbGxlbmdlOiB0aGlzLmJhc2U2NHVybChwa2NlSGFzaCksXG5cdFx0XHRcdFx0Y29kZV9jaGFsbGVuZ2VfbWV0aG9kOiAnUzI1Nidcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRsZXQgc2hvdWxkUHJvbXB0ID0gcGFyYW1ldGVycy5wcm9tcHQgfHwgZXJyb3JoYW5kbGluZztcblxuXHRcdFx0XHRpZiAoIXNob3VsZFByb21wdCkge1xuXHRcdFx0XHRcdHF1ZXJ5T2JqID0gT2JqZWN0LmFzc2lnbihxdWVyeU9iaiwgcGFyYW1ldGVycy5xdWVyeSwgeyBwcm9tcHQ6ICdub25lJyB9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRxdWVyeU9iaiA9IE9iamVjdC5hc3NpZ24ocXVlcnlPYmosIHBhcmFtZXRlcnMucXVlcnkpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCFlcnJvcmhhbmRsaW5nKSB7XG5cdFx0XHRcdFx0Y2hyb21lLnRhYnMucXVlcnkoeyBhY3RpdmU6IHRydWUsIGN1cnJlbnRXaW5kb3c6IHRydWUgfSwgdGFicyA9PiB7XG5cdFx0XHRcdFx0XHR0aGlzLl9sYXN0QWN0aXZlVGFiID0gdGFicy5sZW5ndGggPiAwID8gdGFic1swXS5pZCA6IHVuZGVmaW5lZDtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLl9yZXN0b3JlTGFzdEFjdGl2ZVRhYiA9IHNob3VsZFByb21wdDtcblxuXHRcdFx0XHRjaHJvbWUudGFicy5jcmVhdGUoe1xuXHRcdFx0XHRcdHVybDogb2F1dGgyLmNvZGUuZ2V0VXJpKHtcblx0XHRcdFx0XHRcdHF1ZXJ5OiBxdWVyeU9ialxuXHRcdFx0XHRcdH0pLFxuXHRcdFx0XHRcdGFjdGl2ZTogc2hvdWxkUHJvbXB0XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cblxuXG5cdGJhc2U2NHVybCA9IChidWZmZXIpID0+IHtcblx0XHR2YXIgZW5jb2RlZEJ1ZmZlciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoLi4ubmV3IFVpbnQ4QXJyYXkoYnVmZmVyKSk7XG5cdFx0cmV0dXJuIGJ0b2EoZW5jb2RlZEJ1ZmZlcilcblx0XHRcdC5yZXBsYWNlKC89L2csICcnKVxuXHRcdFx0LnJlcGxhY2UoL1xcKy9nLCAnLScpXG5cdFx0XHQucmVwbGFjZSgvXFwvL2csICdfJyk7XG5cdH1cblxuXHRyYW5kb20gPSAobGVuKSA9PiB7XG5cdFx0dmFyIGFyciA9IG5ldyBVaW50OEFycmF5KGxlbik7XG5cdFx0c2VsZi5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycik7XG5cdFx0cmV0dXJuIEFycmF5LmZyb20oYXJyLCBkZWMgPT4gKCcwJyArIGRlYy50b1N0cmluZygxNikpLnN1YnN0cigtMikpLmpvaW4oJycpO1xuXHR9XG5cblx0ZmV0Y2hKU09OID0gKHVyaSwgcGFyYW1ldGVycywgcmFuZ2VTdGFydCkgPT4ge1xuXHRcdHJldHVybiB0aGlzLmZldGNoUmVzcG9uc2UodXJpLCBwYXJhbWV0ZXJzLCByYW5nZVN0YXJ0KS50aGVuKFxuXHRcdFx0cmVzcG9uc2UgPT4ge1xuXHRcdFx0XHRyZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuXHRcdFx0fSxcblx0XHRcdGUgPT4geyB0aHJvdyBlOyB9XG5cdFx0KTtcblx0fVxuXG5cdGZldGNoUmVzcG9uc2UgPSAodXJpLCBwYXJhbWV0ZXJzLCByYW5nZVN0YXJ0KSA9PiB7XG5cdFx0cmV0dXJuIHRoaXMuZmV0Y2hUb2tlbihwYXJhbWV0ZXJzKS50aGVuKHRva2VuID0+IHtcblx0XHRcdHJldHVybiBmZXRjaCh1cmksIHsgaGVhZGVyczogcmFuZ2VTdGFydCA9PSBudWxsID8gdGhpcy5idWlsZEhlYWRlcnMoKSA6IHRoaXMuYnVpbGRIZWFkZXJzKHJhbmdlU3RhcnQsIHJhbmdlU3RhcnQgKyAxMDAgLSAxKSB9KTtcblx0XHR9KS50aGVuKHJlc3BvbnNlID0+IHtcblx0XHRcdGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwNikge1xuXHRcdFx0XHR0aGlzLmRpc2Nvbm5lY3QoKTtcblx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcigndmVyc2lvbl9taXNtYXRjaCcpKVxuXHRcdFx0fSBlbHNlIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xuXHRcdFx0XHRyZXR1cm4gcmVzcG9uc2UuanNvbigpLnRoZW4oYm9keSA9PiB7XG5cdFx0XHRcdFx0dmFyIGVyciA9IGJvZHkuYXBwbGljYXRpb25FcnJvcjtcblx0XHRcdFx0XHRpZiAoZXJyID09PSAnVVNFUk5BTUVfUEFTU1dPUkRfVE9LRU5fTE9HSU5fUkVRVUlSRUQnXG5cdFx0XHRcdFx0XHR8fCBlcnIgPT09ICdVU0VSTkFNRV9QQVNTV09SRF9MT0dJTl9SRVFVSVJFRCdcblx0XHRcdFx0XHRcdHx8IGVyciA9PT0gJ0ZFREVSQVRFRF9MT0dJTl9SRVFVSVJFRCdcblx0XHRcdFx0XHRcdHx8IGVyciA9PT0gJ1ZBVUxUX05PVF9VTkxPQ0tFRCcpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLnJlYXV0aCh1cmksIGJvZHksIHJhbmdlU3RhcnQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR2YXIgcmV0ID0gbmV3IEVycm9yKCdhdXRoX2Vycm9yJyk7XG5cdFx0XHRcdFx0cmV0LmJvZHkgPSBib2R5O1xuXHRcdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChyZXQpO1xuXHRcdFx0XHR9LCBlID0+IHtcblx0XHRcdFx0XHR0aGlzLmNsZWFyU2Vzc2lvbigpO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLmZldGNoUmVzcG9uc2UodXJpLCBwYXJhbWV0ZXJzLCByYW5nZVN0YXJ0KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2UgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7XG5cdFx0XHRcdHJldHVybiByZXNwb25zZS5qc29uKCkudGhlbihib2R5ID0+IHtcblx0XHRcdFx0XHR2YXIgcmV0ID0gbmV3IEVycm9yKCdjb25mbGljdCcpO1xuXHRcdFx0XHRcdHJldC5ib2R5ID0gYm9keTtcblx0XHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QocmV0KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdHJlYXV0aCA9ICh1cmksIGRldGFpbCwgcmFuZ2VTdGFydCkgPT4ge1xuXHRcdHRoaXMuc2V0VG9rZW4odW5kZWZpbmVkKTtcblx0XHRjaHJvbWUuc3RvcmFnZS5sb2NhbC5yZW1vdmUoJ29hdXRoVG9rZW4nKTtcblx0XHRyZXR1cm4gdGhpcy5mZXRjaFJlc3BvbnNlKHVyaSwge1xuXHRcdFx0Ly8gbWF5IG5vdCByZXF1aXJlIGludGVyYWN0aW9uXG5cdFx0XHRwcm9tcHQ6IGRldGFpbC5hcHBsaWNhdGlvbkVycm9yICE9PSAnVkFVTFRfTk9UX1VOTE9DS0VEJyxcblx0XHRcdHF1ZXJ5OiB7XG5cdFx0XHRcdGF1dGhWYXVsdDogJ2FjY2VzcycsXG5cdFx0XHRcdGF1dGhSZXF1aXJlZExldmVsOiAnaGlnaCcsXG5cdFx0XHRcdGF1dGhFcnJvcjogZGV0YWlsLmFwcGxpY2F0aW9uRXJyb3IsXG5cdFx0XHRcdGF1dGhFcnJvckluZm86IEpTT04uc3RyaW5naWZ5KGRldGFpbC5hcHBsaWNhdGlvbkVycm9yUGFyYW1ldGVycylcblx0XHRcdH1cblx0XHR9LCByYW5nZVN0YXJ0KTtcblx0fVxuXG5cdHN0b3JlVG9rZW4gPSAodG9rZW5Ib2xkZXIpID0+IHtcblx0XHRsZXQgdG9rZW4gPSB0b2tlbkhvbGRlci5kYXRhO1xuXHRcdGlmICh0b2tlbi5leHBpcmVzX2luKSB7XG5cdFx0XHR0b2tlbi52YWxpZF91bnRpbCA9IERhdGUubm93KCkgKyB0b2tlbi5leHBpcmVzX2luICogMTAwMDtcblx0XHR9XG5cdFx0Y2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHsgJ29hdXRoVG9rZW4nOiB0b2tlbiB9KTtcblx0XHR0aGlzLnNldFRva2VuKHRva2VuKTtcblx0XHRyZXR1cm4gdG9rZW47XG5cdH1cblxuXHRzZWxmTGluayA9IChvYmopID0+IHtcblx0XHRyZXR1cm4gb2JqLmxpbmtzLmZpbmQobCA9PiBsLnJlbCA9PT0gJ3NlbGYnKS5ocmVmXG5cdH1cblxuXHRmZXRjaEFjY291bnQgPSAoKSA9PiB7XG5cdFx0cmV0dXJuIHRoaXMuZmV0Y2hKU09OKHRoaXMuZ2V0SXNzdWVyKCkgKyAnL2tleWh1Yi9yZXN0L3YxL2FjY291bnQvbWUnKTtcblx0fVxuXG5cdHJlYWRDYWNoZWRWYXVsdHMgPSAoKSA9PiB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0VmF1bHRzKCk7XG5cdH1cblxuXHRmZXRjaFZhdWx0cyA9ICgpID0+IHtcblx0XHRjb25zdCBhY2NvdW50ID0gdGhpcy5mZXRjaEFjY291bnQoKTtcblx0XHRyZXR1cm4gdGhpcy5mZXRjaFBlcnNvbmFsVmF1bHQoYWNjb3VudCkudGhlbigocGVyc29uYWwpID0+IHtcblx0XHRcdHJldHVybiB0aGlzLmZldGNoR3JvdXBWYXVsdHMoYWNjb3VudCkudGhlbigoZ3JvdXBzKSA9PiB7XG5cdFx0XHRcdGdyb3Vwcy51bnNoaWZ0KHBlcnNvbmFsKTtcblx0XHRcdFx0dGhpcy5zZXRWYXVsdHMoZ3JvdXBzKTtcblx0XHRcdFx0cmV0dXJuIGdyb3Vwcztcblx0XHRcdH0pLmNhdGNoKGUgPT4ge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhlKTtcblx0XHRcdH0pO1xuXHRcdH0pLmNhdGNoKGUgPT4ge1xuXHRcdFx0Y29uc29sZS5sb2coZSk7XG5cdFx0fSk7XG5cdH1cblxuXHRmZXRjaFBlcnNvbmFsVmF1bHQgPSAoZmV0Y2hBY2NvdW50KSA9PiB7XG5cdFx0cmV0dXJuIGZldGNoQWNjb3VudC50aGVuKGFjY291bnQgPT5cblx0XHRcdHRoaXMuZmV0Y2hKU09OKHRoaXMuc2VsZkxpbmsoYWNjb3VudCkgKyAnP2FkZGl0aW9uYWw9dmF1bHQmYWRkaXRpb25hbD1zZXR0aW5ncycpKTtcblx0fVxuXG5cdC8vIG1heEZldGNoZXMgbGltaXRzIHRoZSB0b3RhbCBhbW91bnQgb2YgZmV0Y2hlcy4gMTAgZmV0Y2hlcyBvZiAxMDAgaXRlbXMgZWFjaCA6PSBtYXggMTAwMCBncm91cHZhdWx0c1xuXHRmZXRjaEdyb3VwVmF1bHRzID0gKGZldGNoQWNjb3VudCwgcmFuZ2VTdGFydCA9IDAsIG1heEZldGNoZXMgPSAxMCkgPT4ge1xuXHRcdHJldHVybiBmZXRjaEFjY291bnRcblx0XHRcdC50aGVuKGFjY291bnQgPT4gdGhpcy5mZXRjaFJlc3BvbnNlKHRoaXMuc2VsZkxpbmsoYWNjb3VudCkgKyAnL2dyb3VwPycgK1xuXHRcdFx0XHQnZ3JvdXAuaGFzVmF1bHQ9dHJ1ZSZ2YXVsdEFjY2Vzcz10cnVlJnNvcnQ9YXNjLWdyb3VwLm5hbWUmYWRkaXRpb25hbD12YXVsdCcsIG51bGwsIHJhbmdlU3RhcnQpKVxuXHRcdFx0LnRoZW4ocmVzcG9uc2UgPT4ge1xuXHRcdFx0XHRsZXQgY29udGVudFJhbmdlSGVhZGVyID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoJ0NvbnRlbnQtUmFuZ2UnKTtcblx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLmpzb24oKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7XG5cdFx0XHRcdFx0bGV0IGN1cnJlbnRJdGVtcyA9IHJlc3BvbnNlSnNvbi5pdGVtcztcblx0XHRcdFx0XHRpZiAobWF4RmV0Y2hlcyA+IDEpIHtcblx0XHRcdFx0XHRcdGlmIChjb250ZW50UmFuZ2VIZWFkZXIgIT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0XHRsZXQgY29udGVudFJhbmdlID0gdGhpcy5wYXJzZUNvbnRlbnRSYW5nZShjb250ZW50UmFuZ2VIZWFkZXIpO1xuXHRcdFx0XHRcdFx0XHRpZiAoY29udGVudFJhbmdlICE9IG51bGwgJiYgdGhpcy5oYXNNb3JlKGNvbnRlbnRSYW5nZSkpIHtcblx0XHRcdFx0XHRcdFx0XHQvL3JlYWQgZXZlcnl0aGluZ1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmZldGNoR3JvdXBWYXVsdHMoZmV0Y2hBY2NvdW50LCBjb250ZW50UmFuZ2UuZW5kICsgMSwgbWF4RmV0Y2hlcyAtIDEpLnRoZW4ob3RoZXJJdGVtcyA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gY3VycmVudEl0ZW1zLmNvbmNhdChvdGhlckl0ZW1zKTtcblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gY3VycmVudEl0ZW1zO1xuXHRcdFx0XHR9KVxuXHRcdFx0fSk7XG5cdH1cblxuXHRmZXRjaFVubG9ja2VkUmVjb3JkID0gKHJlY29yZCkgPT4ge1xuXHRcdHJldHVybiB0aGlzLmZldGNoSlNPTih0aGlzLnNlbGZMaW5rKHJlY29yZCkgKyAnP2FkZGl0aW9uYWw9c2VjcmV0Jyk7XG5cdH1cblxuXHRmZXRjaFJvdGF0aW5nUGFzc3dvcmQgPSAoKSA9PiB7XG5cdFx0cmV0dXJuIHRoaXMuZmV0Y2hBY2NvdW50KClcblx0XHRcdC50aGVuKGFjY291bnQgPT4ge1xuXHRcdFx0XHRpZiAoIWFjY291bnQudG9rZW5QYXNzd29yZEVuYWJsZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcy5mZXRjaEpTT04odGhpcy5nZXRJc3N1ZXIoKSArICcva2V5aHViL3Jlc3QvdjEvYWNjb3VudC9wcm92aXNpb25pbmcvdG9rZW5wd2QnLCB7XG5cdFx0XHRcdFx0cXVlcnk6IHsgYXV0aFJlcXVpcmVkTGV2ZWw6ICdoaWdoJyB9XG5cdFx0XHRcdH0pLnRoZW4ocmV0ID0+XG5cdFx0XHRcdFx0T2JqZWN0LmFzc2lnbih7IHR5cGU6ICdQQVNTV09SRCcsIHVzZXJuYW1lOiBhY2NvdW50LnVzZXJuYW1lIH0sIHJldCkpXG5cdFx0XHR9KTtcblx0fVxuXG5cdGJ1aWxkSGVhZGVycyA9IChyYW5nZVN0YXJ0LCByYW5nZUVuZCkgPT4ge1xuXHRcdGxldCB0b2tlbiA9IHRoaXMuZ2V0VG9rZW4oKTtcblx0XHRjb25zdCByZXQgPSBuZXcgSGVhZGVycygpO1xuXHRcdHJldC5hcHBlbmQoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi92bmQudG9waWN1cy5rZXlodWIranNvbjt2ZXJzaW9uPXY2OScpO1xuXHRcdHJldC5hcHBlbmQoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi92bmQudG9waWN1cy5rZXlodWIranNvbjt2ZXJzaW9uPXY2OScpO1xuXHRcdHJldC5hcHBlbmQoJ0F1dGhvcml6YXRpb24nLCAnQmVhcmVyICcgKyB0b2tlbi5hY2Nlc3NfdG9rZW4pO1xuXHRcdGlmIChyYW5nZVN0YXJ0ICE9IG51bGwpIHtcblx0XHRcdHJldC5hcHBlbmQoJ1JhbmdlJywgJ2l0ZW1zPScgKyByYW5nZVN0YXJ0ICsgJy0nICsgcmFuZ2VFbmQpXG5cdFx0fVxuXHRcdGlmICh0b2tlbi52YXVsdFNlc3Npb24pIHtcblx0XHRcdHJldC5hcHBlbmQoJ3RvcGljdXMtVmF1bHQtc2Vzc2lvbicsIHRva2VuLnZhdWx0U2Vzc2lvbilcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXG5cdGRpc2Nvbm5lY3QgPSAoKSA9PiB7XG5cdFx0Y2hyb21lLnN0b3JhZ2Uuc3luYy5jbGVhcigpO1xuXHRcdGNocm9tZS5zdG9yYWdlLmxvY2FsLmNsZWFyKCk7XG5cdFx0dGhpcy5yZXNldCgpO1xuXHR9XG5cblx0cmVzZXQgPSAoKSA9PiB7XG5cdFx0Y2hyb21lLmNvbnRleHRNZW51cy5yZW1vdmVBbGwoKTtcblx0XHR0aGlzLnNldFRva2VuKHVuZGVmaW5lZCk7XG5cdFx0dGhpcy5zZXRWYXVsdHMoW10pO1xuXHRcdHRoaXMuX2F1dGhTdGF0ZSA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGNsZWFyU2Vzc2lvbiA9ICgpID0+IHtcblx0XHR0aGlzLnNldFRva2VuKHVuZGVmaW5lZCk7XG5cdFx0dGhpcy5zZXRWYXVsdHMoW10pO1xuXHRcdGNocm9tZS5zdG9yYWdlLmxvY2FsLnJlbW92ZShbJ29hdXRoVG9rZW4nLCAndmF1bHRzJ10pO1xuXHR9XG5cblx0bG9nb3V0ID0gKCkgPT4ge1xuXHRcdHRoaXMuY2xlYXJTZXNzaW9uKCk7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdGNocm9tZS50YWJzLmNyZWF0ZSh7XG5cdFx0XHRcdHVybDogdGhpcy5nZXRJc3N1ZXIoKSArICcvbG9naW4vb2F1dGgyL2xvZ291dCcsXG5cdFx0XHRcdGFjdGl2ZTogdHJ1ZVxuXHRcdFx0fSwgdGFiID0+IHtcblx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cblxuXHR1cGRhdGVCYWRnZSA9ICh0YWIpID0+IHtcblx0XHRpZiAodGFiLnVybCkge1xuXHRcdFx0Y29uc3QgY291bnQgPSBWYXVsdHMuZmluZFJlY29yZHNCeVVybHModGhpcy5nZXRWYXVsdHMoKSwgW3RhYi51cmxdKS5sZW5ndGg7XG5cdFx0XHRjb25zdCBhY3Rpb24gPSBjaHJvbWUuYWN0aW9uID8gY2hyb21lLmFjdGlvbiA6IGNocm9tZS5icm93c2VyQWN0aW9uO1xuXHRcdFx0YWN0aW9uLnNldEJhZGdlVGV4dCh7XG5cdFx0XHRcdHRhYklkOiB0YWIuaWQsXG5cdFx0XHRcdHRleHQ6IGNvdW50ID09PSAwID8gJycgOiBjb3VudC50b1N0cmluZygpXG5cdFx0XHR9KS5jYXRjaCgoKSA9PiB7IH0pO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGhvc3RGcm9tVXJsID0gKHVybCkgPT4ge1xuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gbmV3IFVSTCh1cmwpLmhvc3Q7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0cmV0dXJuIHVybDtcblx0XHR9XG5cdH1cblxuXHRnZXRTZWFyY2hRdWVyeSA9ICh1cmwpID0+IHtcblx0XHRjb25zdCBrZXkgPSAnc2VhcmNoLScgKyB0aGlzLmhvc3RGcm9tVXJsKHVybCk7XG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9zZWFyY2hlc1trZXldIHx8ICcnKTtcblx0fVxuXG5cdHNldFNlYXJjaFF1ZXJ5ID0gKHVybCwgcXVlcnkpID0+IHtcblx0XHR0aGlzLl9zZWFyY2hlc1snc2VhcmNoLScgKyB0aGlzLmhvc3RGcm9tVXJsKHVybCldID0gcXVlcnlcblx0XHRyZXR1cm4gY2hyb21lLnN0b3JhZ2Uuc2Vzc2lvbi5zZXQoeyAnc2VhcmNoZXMnOiB0aGlzLl9zZWFyY2hlcyB9KTtcblx0fVxuXG5cdGNoZWNrTGljZW5zZSA9IChsaWNlbnNlLCBpc3N1ZXIsIHVyaSkgPT4ge1xuXHRcdGlmIChpc3N1ZXIgIT09IHVyaSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ0lzc3VlciBkb2VzIG5vdCBtYXRjaCBVUkk6ICcgKyBpc3N1ZXIgKyAnICE9PSAnICsgdXJpKTtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoJ21pc21hdGNoJyk7XG5cdFx0fVxuXHRcdGNvbnN0IGp3a3MgPSBqb3NlLmNyZWF0ZUxvY2FsSldLU2V0KHtcblx0XHRcdGtleXM6IFt7XG5cdFx0XHRcdGt0eTogJ1JTQScsXG5cdFx0XHRcdGU6ICdBUUFCJyxcblx0XHRcdFx0dXNlOiAnc2lnJyxcblx0XHRcdFx0a2lkOiAnTElDRU5TRXYxJyxcblx0XHRcdFx0YWxnOiAnUlMyNTYnLFxuXHRcdFx0XHRuOiAndDUtcnZYTWtmWTBLM0F0Wm92eDlqUlFtU0tHYlgtM0ZSZ2JCNkFhQ0tlWnZHTU5RcVVXSUppS1VscVp5bllCc3BKMDdBZEN1WmRlbjZMJ1xuXHRcdFx0XHRcdCsgJ2kxU05udXExMzhyenl5anptZVpXaFRRWmxlaFNiLXNGRmNsYjB4cU1nSVJwVUIxQU5xZnZEeTBpT0Z1MDY4RXEwVzRVd016cC13NSdcblx0XHRcdFx0XHQrICdWblJhMlpCSFh2RVVmUGVCdzUzTVF5Z0ZGQURNcGFPTVYwMHVZUzZsU3lUZC1OdWdTZDJHY1ZaMXU5VTF4MDZfcEdWVUV0Q3JlbTknXG5cdFx0XHRcdFx0KyAnQ05KaXlwYk5IMnpGaHZhbVJqZGNXWEtpal9VTXJXYWs1VWM3Um04SG1YT1FfMGk0cDdOZTEzTHYzVUlpTGlCcGZ2QWVULXlpQjVoJ1xuXHRcdFx0XHRcdCsgJ3lMSnFNWFcwRmlrMmREeVVrZTZRRzhheEZjR0RxQjFoYWp6d1RUbEROMnRTMWhKTXpYUWRwTTJRY1F5ZF9ZWWJFSF92OFQzNUYydSdcblx0XHRcdFx0XHQrICdIc1hIN2JtMVcyMTRzdGptSDZ0LXVqTUxCelduZW92NE1FOTV0c3VVV2ZYa1FnQ0g4ME15SnZpZHRMbDkxVXBxNldHbFg1SXJvWFonXG5cdFx0XHRcdFx0KyAnT0lEWmhtc2dwcXFUa29Jbi00NWU3SThEQnhqSy1QcjR4YzJzaDhzek04NHFXeEVCSlJSeWJuVVZXNjdXSFJlV1ZfY25VZkdKQXgwJ1xuXHRcdFx0XHRcdCsgJ3VBdlYybjl6WlFpSGRCNlNoUnVGekNaN3ExQ01oMVR0cjlnazI5UmVWYi1wS3FBNTExeExKaTVGQTRHcGVGMDNDLVByWWEzY1B4LSdcblx0XHRcdFx0XHQrICdKRzZoNDRaOEpXbE5iOXpIR3ZGVWRBd3RQRGMteENfbURJZG4tbWUxR213UFNOTkZ1QlozN1JneW5SQ2daQy1jZ3dpQ2ZLTl9WbTcnXG5cdFx0XHRcdFx0KyAnWHlIdTAnXG5cdFx0XHR9LCB7XG5cdFx0XHRcdGt0eTogJ1JTQScsXG5cdFx0XHRcdGU6ICdBUUFCJyxcblx0XHRcdFx0dXNlOiAnc2lnJyxcblx0XHRcdFx0a2lkOiAnTElDRU5TRXYyJyxcblx0XHRcdFx0YWxnOiAnUlMyNTYnLFxuXHRcdFx0XHRuOiAnN3U0dVNNa0diSDdVa19XcjlBalVmNjhhT01KVEIwQ21nMWZxZk15SmowTkpNVVJGYlpQLWZhcUMweEUtcXAxQlpteldBR0JDQ1BsS0ZIJ1xuXHRcdFx0XHRcdCsgJ1BudnBkX0w5M29zaW1IWjlVS0RsWEVrS1htb19laW5pYmZVNldRYzJZUWZyVkVHczh3ajI2NTk2VjJlWklya2g3OE53US1yZTVWVydcblx0XHRcdFx0XHQrICdWRTZaRC1jUENRaUt3VlRmWkVHNDF0dUdwS3BLdVlfZVFCZEZ1azVaczhFMFVaRmFLUlkxN3VXaFRoUWdhV3psSmZQR2o5Y25rWEknXG5cdFx0XHRcdFx0KyAnUkRJdDZHR2Vhcm5wSHhiNTNTdm5mU0FZNmNfdFdhRGhMN2E5bE1RQlVnM3pINTVWbS1pVlA3YWZrcHduODB6dUtGekN5VlZOZWJLJ1xuXHRcdFx0XHRcdCsgJzEyQ2NFR253Q1hKeUp6V3d0cG9BdWVsTXdvNzlScmJsM2JmOWpaSUUwaWNZZFJBVGRBb2ZWaU9JelVDY1A1cGJJZXhYYXBIM3NmbSdcblx0XHRcdFx0XHQrICdvYWIyVnhTVzRseWdxcTNVYi1JeDEzalhfaTJxN1NRdVRFVlM2UGpWZTcxRml1X1JHWHBoc3hnSDl2czFKZDlIczlqWHUwVmR6ekMnXG5cdFx0XHRcdFx0KyAnT01hdnZwU2FhZzFKbWVwZUNKb1RSZjlqdWpySkdONlFtSEdTbUptSEw2cHZidkdDRlAyZVlwcmg5eUgwWjB0dS0wbmNYbUc3VUtBJ1xuXHRcdFx0XHRcdCsgJzdXanhsTy1ydnJKaDduYWNkLURjTVlxLVU2UjZGNzZpQ0psUGZQdG1oWWlXTVplSTNsam43bHE3U29qalRHcnBjQnFJdnVob1RjSCdcblx0XHRcdFx0XHQrICdfZWdGZ3hHZlZ3ZU1fUWRRMzlOWmVlNkxvbmFqMnRqVW1jdzB3UTZVRWZzcVdvUG9FWE1rTkVWWC1nc2E3MFhDRWt4SG5yNkxUUTUnXG5cdFx0XHRcdFx0KyAnd1dFc3MnXG5cdFx0XHR9LCB7XG5cdFx0XHRcdGt0eTogJ1JTQScsXG5cdFx0XHRcdGU6ICdBUUFCJyxcblx0XHRcdFx0dXNlOiAnc2lnJyxcblx0XHRcdFx0a2lkOiAnVEVTVF9MSUNFTlNFX1NJR05JTkdfS0VZJyxcblx0XHRcdFx0YWxnOiAnUlMyNTYnLFxuXHRcdFx0XHRuOiAnMXh3NFJQREhURWdQQ1E2ZnM0SWZlS292RDBScnc2VnRfS0dkcUhCR3JLbm1vSV9sRXcwNEFQUjE1SXExdnFDVmNoZzBUVktQcXE3RkpJJ1xuXHRcdFx0XHRcdCsgJ0pTbGFYZ2paWS1mZ2s2MlQydDdfRzBrOGJkQXVPWWxOLUZHZzdfTUhObU1ZdVo2SnhsQ2ZjcDlLS0VIUDJ4UkZfVm85RGh1aDhaRidcblx0XHRcdFx0XHQrICc0RXp5eFFzYkl0MGxYSUhxenRERGJnaF8zREJFS0tlb0pEbGpIYzRKUUtZR0thSDczRVluRldxWW9Pc0dSZWo0SUNMSWk5WVVwVG0nXG5cdFx0XHRcdFx0KyAnZjZQMnkxRmVPczZXYmY1RUFRYzZBbm9UaFEzUHlCeFE5WFQzWFlYN3V0WmUyUjE1bTNxNkM4V2d0MXdnOENwU1pZV3RyUUZfYU5UJ1xuXHRcdFx0XHRcdCsgJ21PYjlaaHhXQ0xaY3dUdUZGYVNwX0NvUDlRZ2tUOTRXcjg4OGRYckQzS2cxSnczVVJ2SHRENUpraHJGWGZpOHNHbFpWY29WQXRWQSdcblx0XHRcdFx0XHQrICdZLWduRl9nbEN3TjdwWXhGVm1oT1FrUXozRU85UDN0cXJMNGQzRWI4ZVBzZU9jVlZiRDVYSTNqSDZZMDVaTUEzeFRWV3k5cVBhdVEnXG5cdFx0XHRcdFx0KyAnYVF0U2gtSHQyRE5oMEx1ZGZGcy1PNURPaUJRclJsa2V5aHFLMEg2dWJEa0NZaWVFdjNnc0NGb21fcGVkZXdrT2pYbGxhSjVqTE1wJ1xuXHRcdFx0XHRcdCsgJ1pMNF9RRE1ULVM5R0I1T1JRSFRLVHN2OEdTbnRIQWdqQS1PVXJQWEZtT3p2RW9hRkJJM0Mwb3pxT0JpTGs3V1pqdUl0YVhldkZGWidcblx0XHRcdFx0XHQrICdSY3JoaElKbTFOS0NmM2hVcEQxNkV6MkV5MzIwdU1FODR1ZWpGemNBTkZNYk9Pa25JdTJjVkN3bnQ3eDRxRGtUQUFYRmcyVjYxNTYnXG5cdFx0XHRcdFx0KyAncGUzOTgnXG5cdFx0XHR9XVxuXHRcdH0pO1xuXHRcdHJldHVybiBqb3NlLmp3dFZlcmlmeShhdG9iKGxpY2Vuc2UpLCBqd2tzLCB7fSkudGhlbih2ZXJpZnlSZXN1bHQgPT4ge1xuXHRcdFx0Y29uc3QgZG9tYWlucyA9IHZlcmlmeVJlc3VsdC5wYXlsb2FkLmRtbjtcblx0XHRcdGlmIChkb21haW5zID09PSB1bmRlZmluZWQgfHwgZG9tYWlucy5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ0xpY2Vuc2UgZG9lcyBub3QgY29udGFpbiBkb21haW5zLCBjYW5ub3QgbWFrZSBhIG1hdGNoJyk7XG5cdFx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoJ3Vua25vd24nKTtcblx0XHRcdH1cblx0XHRcdGNvbnN0IGlzc3Vlckhvc3QgPSBuZXcgVVJMKGlzc3VlcikuaG9zdG5hbWVcblx0XHRcdGNvbnN0IG1hdGNoID0gZG9tYWlucy5zb21lKGQgPT4gbmV3IFVSTChkKS5ob3N0bmFtZSA9PT0gaXNzdWVySG9zdCk7XG5cdFx0XHRpZiAobWF0Y2gpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ0xpY2Vuc2UgbWF0Y2hlcyBpc3N1ZXIgJyArIGlzc3Vlcik7XG5cdFx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoJ21hdGNoJyk7XG5cdFx0XHR9XG5cdFx0XHRjb25zb2xlLmxvZygnTGljZW5zZSBkb2VzIG5vdCBtYXRjaCBpc3N1ZXIgJyArIGlzc3VlciArICcgaW4gJyArIGRvbWFpbnMpO1xuXHRcdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgnbWlzbWF0Y2gnKTtcblx0XHR9KS5jYXRjaChlcnJvciA9PiB7XG5cdFx0XHRjb25zb2xlLmxvZygnTGljZW5zZSB2ZXJpZmljYXRpb24gZmFpbGVkIHdpdGggJyArIGVycm9yKTtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoJ21pc21hdGNoJyk7XG5cdFx0fSk7XG5cdH1cblxuXHRpbnZva2UgPSAocmVxdWVzdCkgPT4ge1xuXHRcdGlmIChyZXF1ZXN0Lm1ldGhvZCA9PT0gJ2dldElzc3VlcicpIHtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5nZXRJc3N1ZXIoKSk7XG5cdFx0fSBlbHNlIGlmIChyZXF1ZXN0Lm1ldGhvZCA9PT0gJ2dldFNlYXJjaFF1ZXJ5Jykge1xuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0U2VhcmNoUXVlcnkocmVxdWVzdC51cmwpO1xuXHRcdH0gZWxzZSBpZiAocmVxdWVzdC5tZXRob2QgPT09ICdzZXRTZWFyY2hRdWVyeScpIHtcblx0XHRcdHJldHVybiB0aGlzLnNldFNlYXJjaFF1ZXJ5KHJlcXVlc3QudXJsLCByZXF1ZXN0LnF1ZXJ5KTtcblx0XHR9IGVsc2UgaWYgKHJlcXVlc3QubWV0aG9kID09PSAncmVhZENhY2hlZFZhdWx0cycpIHtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5yZWFkQ2FjaGVkVmF1bHRzKCkpO1xuXHRcdH0gZWxzZSBpZiAocmVxdWVzdC5tZXRob2QgPT09ICdmZXRjaFZhdWx0cycpIHtcblx0XHRcdHJldHVybiB0aGlzLmZldGNoVmF1bHRzKCk7XG5cdFx0fSBlbHNlIGlmIChyZXF1ZXN0Lm1ldGhvZCA9PT0gJ2ZldGNoVW5sb2NrZWRSZWNvcmQnKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5mZXRjaFVubG9ja2VkUmVjb3JkKHJlcXVlc3QucmVjb3JkKTtcblx0XHR9IGVsc2UgaWYgKHJlcXVlc3QubWV0aG9kID09PSAnZmV0Y2hSb3RhdGluZ1Bhc3N3b3JkJykge1xuXHRcdFx0cmV0dXJuIHRoaXMuZmV0Y2hSb3RhdGluZ1Bhc3N3b3JkKCk7XG5cdFx0fSBlbHNlIGlmIChyZXF1ZXN0Lm1ldGhvZCA9PT0gJ3VwZGF0ZUJhZGdlJykge1xuXHRcdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLnVwZGF0ZUJhZGdlKHJlcXVlc3QudGFiKSk7XG5cdFx0fSBlbHNlIGlmIChyZXF1ZXN0Lm1ldGhvZCA9PT0gJ3JlYWRTZXR0aW5ncycpIHtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5nZXRTZXR0aW5ncygpKTtcblx0XHR9IGVsc2UgaWYgKHJlcXVlc3QubWV0aG9kID09PSAnd3JpdGVTZXR0aW5ncycpIHtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5zZXRTZXR0aW5ncyhyZXF1ZXN0LnNldHRpbmdzKSk7XG5cdFx0fSBlbHNlIGlmIChyZXF1ZXN0Lm1ldGhvZCA9PT0gJ2hhc1Blcm1pc3Npb25zJykge1xuXHRcdFx0cmV0dXJuIHRoaXMuaGFzUGVybWlzc2lvbnMoKTtcblx0XHR9IGVsc2UgaWYgKHJlcXVlc3QubWV0aG9kID09PSAnbG9nb3V0Jykge1xuXHRcdFx0cmV0dXJuIHRoaXMubG9nb3V0KCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnNvbGUubG9nKCdpbnZhbGlkIHJlcXVlc3QnLCByZXF1ZXN0KTtcblx0XHR9XG5cdH1cblxuXHRoYW5kbGVNZXNzYWdlID0gKHJlcXVlc3QsIHNlbmRlciwgc2VuZFJlc3BvbnNlKSA9PiB7XG5cdFx0aWYgKHNlbmRlci5leHRlbnNpb25JZCA9PT0gY2hyb21lLnJ1bnRpbWUuaWQgfHwgc2VuZGVyLmlkID09PSBjaHJvbWUucnVudGltZS5pZCkge1xuXHRcdFx0aWYgKHJlcXVlc3QudHlwZSA9PT0gJ3JlY29yZC1jb3VudCcpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRpZiAocmVxdWVzdC51cmxzWzBdLnN0YXJ0c1dpdGgodGhpcy5nZXRJc3N1ZXIoKSkpIHtcblx0XHRcdFx0XHRcdHNlbmRSZXNwb25zZSh7IGNvdW50OiAwIH0pO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZW5kUmVzcG9uc2Uoe1xuXHRcdFx0XHRcdFx0XHRjb3VudDogVmF1bHRzLmZpbmRSZWNvcmRzQnlVcmxzKHRoaXMucmVhZENhY2hlZFZhdWx0cygpLCByZXF1ZXN0LnVybHMpLmxlbmd0aFxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGNhdGNoIChlKSB7IH1cblx0XHRcdH0gZWxzZSBpZiAocmVxdWVzdC50eXBlID09PSAnY2hlY2stbGljZW5zZScpIHtcblx0XHRcdFx0dGhpcy5jaGVja0xpY2Vuc2UocmVxdWVzdC5saWNlbnNlLCByZXF1ZXN0Lmlzc3VlciwgcmVxdWVzdC51cmkpLnRoZW4oc3RhdHVzID0+IHtcblx0XHRcdFx0XHRzZW5kUmVzcG9uc2UoeyBzdGF0dXM6IHN0YXR1cyB9KTtcblx0XHRcdFx0fSlcblx0XHRcdH0gZWxzZSBpZiAocmVxdWVzdC50eXBlID09PSAnbGluaycgfHwgcmVxdWVzdC50eXBlID09PSAncXVlcnknKSB7XG5cdFx0XHRcdGlmIChyZXF1ZXN0LnR5cGUgPT09ICdsaW5rJykge1xuXHRcdFx0XHRcdGlmICh0aGlzLmdldElzc3VlcigpID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdHRoaXMucmVzZXQoKTtcblx0XHRcdFx0XHRcdGNocm9tZS5zdG9yYWdlLmxvY2FsLnJlbW92ZShbJ29hdXRoVG9rZW4nLCAndmF1bHRzJ10pO1xuXHRcdFx0XHRcdFx0dGhpcy5zZXRJc3N1ZXIocmVxdWVzdC5pc3N1ZXIpO1xuXHRcdFx0XHRcdFx0dGhpcy5zeW5jVmVyc2lvbigpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZygnQmxvY2tpbmcgYSByZXF1ZXN0IHRvIHVubGluayB0aGUgZXh0ZW5zaW9uJylcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRjb25zdCBvd25Jc3N1ZXIgPSB0aGlzLmdldElzc3VlcigpO1xuXHRcdFx0XHRcdHNlbmRSZXNwb25zZSh7XG5cdFx0XHRcdFx0XHRsaW5rZWQ6IG93bklzc3VlciA9PT0gcmVxdWVzdC5pc3N1ZXIsXG5cdFx0XHRcdFx0XHRpc3N1ZXI6IG93bklzc3VlclxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9IGNhdGNoIChlKSB7IH1cblx0XHRcdH0gZWxzZSBpZiAocmVxdWVzdC50eXBlID09PSAndW5saW5rJykge1xuXHRcdFx0XHR0aGlzLnJlc2V0KCk7XG5cdFx0XHRcdHRoaXMuc2V0SXNzdWVyKHVuZGVmaW5lZCk7XG5cdFx0XHRcdGNocm9tZS5zdG9yYWdlLmxvY2FsLnJlbW92ZShbJ29hdXRoVG9rZW4nLCAndmF1bHRzJ10pO1xuXHRcdFx0XHRjaHJvbWUuc3RvcmFnZS5zeW5jLnJlbW92ZSgnaXNzdWVyJyk7XG5cdFx0XHRcdHNlbmRSZXNwb25zZSh7XG5cdFx0XHRcdFx0bGlua2VkOiBmYWxzZVxuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSBpZiAocmVxdWVzdC50eXBlID09PSAnaW52b2tlJykge1xuXHRcdFx0XHR0aGlzLmludm9rZShyZXF1ZXN0KS50aGVuKFxuXHRcdFx0XHRcdG1zZyA9PiB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRzZW5kUmVzcG9uc2UoeyBvazogdHJ1ZSwgbXNnOiBtc2cgfSk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoIChlKSB7IGNvbnNvbGUubG9nKGUpIH1cblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGUgPT4ge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0c2VuZFJlc3BvbnNlKHsgb2s6IGZhbHNlLCBlcnJvcjogT2JqZWN0LmFzc2lnbih7IG1lc3NhZ2U6IGUubWVzc2FnZSB9LCBlKSB9KVxuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZSkgeyBjb25zb2xlLmxvZyhlKSB9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSBlbHNlIGlmIChyZXF1ZXN0LnR5cGUgPT09ICdxdWVyeS10YWItdXJsJykge1xuXHRcdFx0XHRzZW5kUmVzcG9uc2UoeyAndXJsJzogc2VuZGVyLnRhYi51cmwgfSk7XG5cdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3QudHlwZSA9PT0gJ2FkZC1uZXctcmVjb3JkJykge1xuXHRcdFx0XHRjaHJvbWUudGFicy5xdWVyeSh7IGFjdGl2ZTogdHJ1ZSwgY3VycmVudFdpbmRvdzogdHJ1ZSB9LCAodGFiKSA9PiB7XG5cdFx0XHRcdFx0Y2hyb21lLnRhYnMuY3JlYXRlKHsgdXJsOiB0aGlzLmdldElzc3VlcigpICsgJy9jb25zb2xlL3ZhdWx0cy9uZXdyZWNvcmQ/dXJsPScgKyBlbmNvZGVVUklDb21wb25lbnQodGFiWzBdLnVybCkgfSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3QudHlwZSA9PT0gJ2dvLXRvLWtleWh1YicpIHtcblx0XHRcdFx0Y2hyb21lLnRhYnMuY3JlYXRlKHsgdXJsOiB0aGlzLmdldElzc3VlcigpIH0pO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3QudHlwZSA9PT0gJ2NhbGxiYWNrJykge1xuXHRcdFx0XHR0aGlzLmhhbmRsZUNhbGxiYWNrKHsgdGFiSWQ6IHNlbmRlci50YWIuaWQsIHVybDogc2VuZGVyLnRhYi51cmwuc3BsaXQoJyMnKVsxXSB9KTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmIChyZXF1ZXN0LnR5cGUgPT09ICdyZWxheScpIHtcblx0XHRcdFx0Y2hyb21lLnRhYnMucXVlcnkoeyBhY3RpdmU6IHRydWUsIGN1cnJlbnRXaW5kb3c6IHRydWUgfSwgdGFicyA9PiB7XG5cdFx0XHRcdFx0aWYgKHRhYnMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdFx0cmVxdWVzdC5ib2R5LnJlbGF5ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0Y2hyb21lLnRhYnMuc2VuZE1lc3NhZ2UodGFic1swXS5pZCwgcmVxdWVzdC5ib2R5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3QudHlwZSA9PT0gJ2dlbmVyYXRlLW5vbmNlJykge1xuXHRcdFx0XHRjb25zdCBub25jZSA9IGNyeXB0by5yYW5kb21VVUlEKCk7XG5cdFx0XHRcdGNocm9tZS5zdG9yYWdlLnNlc3Npb24uc2V0KHsgJ2lmcmFtZU5vbmNlJzogbm9uY2UgfSkudGhlbigoKSA9PiB7XG5cdFx0XHRcdFx0c2VuZFJlc3BvbnNlKHsgbm9uY2U6IG5vbmNlIH0pO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSBpZiAocmVxdWVzdC50eXBlID09PSAndmVyaWZ5LW5vbmNlJykge1xuXHRcdFx0XHRjaHJvbWUuc3RvcmFnZS5zZXNzaW9uLmdldCgnaWZyYW1lTm9uY2UnKS50aGVuKGl0ZW1zID0+IHtcblx0XHRcdFx0XHRjb25zdCBvayA9IGl0ZW1zLmlmcmFtZU5vbmNlICE9PSBudWxsICYmIHJlcXVlc3Qubm9uY2UgPT09IGl0ZW1zLmlmcmFtZU5vbmNlO1xuXHRcdFx0XHRcdGlmICghb2spIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKCdJbnZhbGlkIG5vbmNlIGRldGVjdGVkLCByZWZ1c2luZyB0byByZW5kZXIgdGhlIHBvcHVwOiBleHBlY3RlZCAnXG5cdFx0XHRcdFx0XHRcdCsgaXRlbXMuaWZyYW1lTm9uY2UgKyAnLCBnb3QgJyArIHJlcXVlc3Qubm9uY2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzZW5kUmVzcG9uc2UoeyBvazogb2sgfSk7XG5cdFx0XHRcdFx0Y2hyb21lLnN0b3JhZ2Uuc2Vzc2lvbi5yZW1vdmUoJ2lmcmFtZU5vbmNlJyk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGhhbmRsZUNhbGxiYWNrID0gKGRldGFpbHMpID0+IHtcblx0XHR0cnkge1xuXHRcdFx0aWYgKGRldGFpbHMudGFiSWQgIT09IC0xKSB7XG5cdFx0XHRcdGNocm9tZS50YWJzLnJlbW92ZShkZXRhaWxzLnRhYklkKTtcblx0XHRcdFx0aWYgKHRoaXMuX3Jlc3RvcmVMYXN0QWN0aXZlVGFiICYmIHRoaXMuX2xhc3RBY3RpdmVUYWIgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdGNocm9tZS50YWJzLnVwZGF0ZSh0aGlzLl9sYXN0QWN0aXZlVGFiLCB7IGFjdGl2ZTogdHJ1ZSB9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy5jYWxsYmFjayhkZXRhaWxzLnVybCk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0Y29uc29sZS5sb2coZSk7XG5cdFx0fVxuXHRcdHJldHVybiB7IGNhbmNlbDogdHJ1ZSB9O1xuXHR9XG5cblx0aGFuZGxlVGFiVXBkYXRlZCA9ICh0YWJJZCwgY2hhbmdlSW5mbywgdGFiKSA9PiB7XG5cdFx0aWYgKGNoYW5nZUluZm8udXJsIHx8IGNoYW5nZUluZm8uc3RhdHVzKVxuXHRcdFx0dGhpcy51cGRhdGVCYWRnZSh0YWIpO1xuXHR9XG5cblx0aGFuZGxlVGFiQ3JlYXRlZCA9ICh0YWIpID0+IHtcblx0XHR0aGlzLnVwZGF0ZUJhZGdlKHRhYik7XG5cdH1cblxuXHRoYW5kbGVUYWJSZXBsYWNlZCA9IChhZGRlZFRhYklkLCByZW1vdmVkVGFiSWQpID0+IHtcblx0XHRjaHJvbWUudGFicy5nZXQoYWRkZWRUYWJJZCwgKHRhYikgPT4ge1xuXHRcdFx0dGhpcy51cGRhdGVCYWRnZSh0YWIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aGFuZGxlVGFiQWN0aXZhdGVkID0gKGFjdGl2ZUluZm8pID0+IHtcblx0XHRjaHJvbWUudGFicy5nZXQoYWN0aXZlSW5mby50YWJJZCwgKHRhYikgPT4ge1xuXHRcdFx0dGhpcy51cGRhdGVCYWRnZSh0YWIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aGFuZGxlQ29tbWFuZCA9IChjb21tYW5kKSA9PiB7XG5cdFx0aWYgKHRoaXMuaGFzSXNzdWVyKCkpIHtcblx0XHRcdGNocm9tZS50YWJzLnF1ZXJ5KHsgYWN0aXZlOiB0cnVlLCBjdXJyZW50V2luZG93OiB0cnVlIH0sIHRhYnMgPT4ge1xuXHRcdFx0XHRpZiAodGFicy5sZW5ndGggPT09IDEpIHtcblx0XHRcdFx0XHRpZiAoY29tbWFuZCA9PT0gJ3RyaWdnZXItZmlsbC13aXRoLWtleWh1YicpIHtcblx0XHRcdFx0XHRcdGNocm9tZS50YWJzLnNlbmRNZXNzYWdlKHRhYnNbMF0uaWQsIHtcblx0XHRcdFx0XHRcdFx0dHlwZTogJ3RyaWdnZXItZmlsbCdcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoY29tbWFuZCA9PT0gJ3RyaWdnZXItZmlsbC1yb3RhdGluZy1wd2QnKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmZldGNoUm90YXRpbmdQYXNzd29yZCgpLnRoZW4oY3JlZHMgPT4ge1xuXHRcdFx0XHRcdFx0XHRjaHJvbWUudGFicy5zZW5kTWVzc2FnZSh0YWJzWzBdLmlkLCB7XG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogJ2ZpbGwnLFxuXHRcdFx0XHRcdFx0XHRcdGNyZWRzOiBjcmVkc1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH0sIGNhdXNlID0+IHsgfSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRoYW5kbGVDb250ZXh0TWVudUNsaWNrID0gKGluZm8sIHRhYikgPT4ge1xuXHRcdGNocm9tZS50YWJzLnNlbmRNZXNzYWdlKHRhYi5pZCwge1xuXHRcdFx0dHlwZTogJ3RyaWdnZXItZmlsbCcsXG5cdFx0XHRlZGl0YWJsZTogaW5mby5lZGl0YWJsZVxuXHRcdH0pO1xuXHR9XG5cblx0c3luY1ZlcnNpb24gPSAoKSA9PiB7XG5cdFx0aWYgKCF0aGlzLmhhc0lzc3VlcigpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0ZmV0Y2godGhpcy5nZXRJc3N1ZXIoKSArICcva2V5aHViL3Jlc3QvdjEvaW5mbycsIHtcblx0XHRcdGhlYWRlcnM6IG5ldyBIZWFkZXJzKHsgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi92bmQudG9waWN1cy5rZXlodWIranNvbicgfSlcblx0XHR9KS50aGVuKHJlc3BvbnNlID0+IHtcblx0XHRcdGlmIChyZXNwb25zZS5vaykge1xuXHRcdFx0XHRyZXR1cm4gcmVzcG9uc2UuanNvbigpLnRoZW4oanNvbiA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KC4uLmpzb24uY29udHJhY3RWZXJzaW9ucyk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIDIxO1xuXHRcdH0pLnRoZW4odmVyc2lvbiA9PiB7XG5cdFx0XHRjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoeyAndmVyc2lvbic6IHZlcnNpb24gfSwgKCkgPT4gY2hyb21lLnJ1bnRpbWUucmVsb2FkKCkpO1xuXHRcdH0pO1xuXHR9XG5cblx0cGFyc2VDb250ZW50UmFuZ2UgPSAodmFsdWUpID0+IHtcblx0XHRjb25zdCBtYXRjaGVzID0gdmFsdWUubWF0Y2goL14oXFx3KykgKChcXGQrKS0oXFxkKyl8XFwqKVxcLyhcXGQrfFxcKikkLyk7XG5cdFx0aWYgKCFtYXRjaGVzKSByZXR1cm4gbnVsbDtcblx0XHRjb25zdCBbLCB1bml0LCAsIHN0YXJ0LCBlbmQsIHNpemVdID0gbWF0Y2hlcztcblx0XHRjb25zdCByYW5nZSA9IHtcblx0XHRcdHVuaXQ6IHVuaXQsXG5cdFx0XHRzdGFydDogc3RhcnQgIT0gbnVsbCA/IE51bWJlcihzdGFydCkgOiBudWxsLFxuXHRcdFx0ZW5kOiBlbmQgIT0gbnVsbCA/IE51bWJlcihlbmQpIDogbnVsbCxcblx0XHRcdHNpemU6IHNpemUgPT09ICcqJyA/IG51bGwgOiBOdW1iZXIoc2l6ZSksXG5cdFx0fTtcblxuXHRcdGlmIChyYW5nZS5zdGFydCA9PT0gbnVsbCAmJiByYW5nZS5lbmQgPT09IG51bGwgJiYgcmFuZ2Uuc2l6ZSA9PT0gbnVsbClcblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0cmV0dXJuIHJhbmdlO1xuXHR9XG5cblx0aGFzTW9yZSA9IChjb250ZW50UmFuZ2UpID0+IHtcblx0XHRpZiAoY29udGVudFJhbmdlLnNpemUgIT0gbnVsbCkge1xuXHRcdFx0aWYgKGNvbnRlbnRSYW5nZS5lbmQgIT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm4gY29udGVudFJhbmdlLmVuZCArIDEgPCBjb250ZW50UmFuZ2Uuc2l6ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50UmFuZ2Uuc3RhcnQgKyAxIDwgY29udGVudFJhbmdlLnNpemU7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmIChjb250ZW50UmFuZ2UuZW5kICE9IG51bGwpIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnRSYW5nZS5lbmQgPiBjb250ZW50UmFuZ2Uuc3RhcnQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG4iLCIvKiBlc2xpbnQtZW52IHdlYmV4dGVuc2lvbnMgKi9cblxuaW1wb3J0IHZlcnNpb24gZnJvbSAnLi92ZXJzaW9uJztcbmltcG9ydCBCYWNrZ3JvdW5kVjYgZnJvbSAnLi92Ni9iYWNrZ3JvdW5kJztcbmltcG9ydCBCYWNrZ3JvdW5kVjcgZnJvbSAnLi92Ny9iYWNrZ3JvdW5kJztcblxudmFyIGNhY2hlZEJhY2tncm91bmQgPSBudWxsO1xuXG5mdW5jdGlvbiBnZXRCYWNrZ3JvdW5kKCkge1xuXHRpZiAoY2FjaGVkQmFja2dyb3VuZCkge1xuXHRcdHJldHVybiBjYWNoZWRCYWNrZ3JvdW5kO1xuXHR9XG5cblx0Y2FjaGVkQmFja2dyb3VuZCA9IHZlcnNpb24oKVxuXHRcdC50aGVuKHYgPT4gdiA9PT0gNiA/IG5ldyBCYWNrZ3JvdW5kVjYoKSA6IG5ldyBCYWNrZ3JvdW5kVjcoKSlcblx0XHQudGhlbihiZyA9PiBiZy5yZXN0b3JlU3RhdGUoKSk7XG5cdHJldHVybiBjYWNoZWRCYWNrZ3JvdW5kO1xufVxuXG5mdW5jdGlvbiByZWdpc3RlckV2ZW50SGFuZGxlcnMoKSB7XG5cdGNocm9tZS5jb21tYW5kcy5vbkNvbW1hbmQuYWRkTGlzdGVuZXIoXG5cdFx0KGNvbW1hbmQpID0+IGdldEJhY2tncm91bmQoKS50aGVuKGJnID0+IGJnLmhhbmRsZUNvbW1hbmQoY29tbWFuZCkpKTtcblx0Y2hyb21lLmNvbnRleHRNZW51cy5vbkNsaWNrZWQuYWRkTGlzdGVuZXIoXG5cdFx0KGluZm8sIHRhYikgPT4ge1xuXHRcdFx0Y2hyb21lLnBlcm1pc3Npb25zLnJlcXVlc3QoeyBvcmlnaW5zOiBbXCI8YWxsX3VybHM+XCJdIH0pLnRoZW4ocmVzdWx0ID0+IHtcblx0XHRcdFx0aWYgKHJlc3VsdCkge1xuXHRcdFx0XHRcdGdldEJhY2tncm91bmQoKS50aGVuKGJnID0+IGJnLmhhbmRsZUNvbnRleHRNZW51Q2xpY2soaW5mbywgdGFiKSlcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdGNocm9tZS5ydW50aW1lLm9uTWVzc2FnZS5hZGRMaXN0ZW5lcihcblx0XHQobWVzc2FnZSwgc2VuZGVyLCBzZW5kUmVzcG9uc2UpID0+IHtcblx0XHRcdGdldEJhY2tncm91bmQoKS50aGVuKGJnID0+IGJnLmhhbmRsZU1lc3NhZ2UobWVzc2FnZSwgc2VuZGVyLCBzZW5kUmVzcG9uc2UpKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0pO1xuXHRjaHJvbWUudGFicy5vblVwZGF0ZWQuYWRkTGlzdGVuZXIoXG5cdFx0KHRhYklkLCBjaGFuZ2VJbmZvLCB0YWIpID0+IGdldEJhY2tncm91bmQoKS50aGVuKGJnID0+IGJnLmhhbmRsZVRhYlVwZGF0ZWQodGFiSWQsIGNoYW5nZUluZm8sIHRhYikpKTtcblx0Y2hyb21lLnRhYnMub25DcmVhdGVkLmFkZExpc3RlbmVyKFxuXHRcdCh0YWIpID0+IGdldEJhY2tncm91bmQoKS50aGVuKGJnID0+IGJnLmhhbmRsZVRhYkNyZWF0ZWQodGFiKSkpO1xuXHRjaHJvbWUudGFicy5vblJlcGxhY2VkLmFkZExpc3RlbmVyKFxuXHRcdChhZGRlZFRhYklkLCByZW1vdmVkVGFiSWQpID0+IGdldEJhY2tncm91bmQoKS50aGVuKGJnID0+IGJnLmhhbmRsZVRhYlJlcGxhY2VkKGFkZGVkVGFiSWQsIHJlbW92ZWRUYWJJZCkpKTtcblx0Y2hyb21lLnRhYnMub25BY3RpdmF0ZWQuYWRkTGlzdGVuZXIoXG5cdFx0KGFjdGl2ZUluZm8pID0+IGdldEJhY2tncm91bmQoKS50aGVuKGJnID0+IGJnLmhhbmRsZVRhYkFjdGl2YXRlZChhY3RpdmVJbmZvKSkpO1xuXG5cdGlmIChjaHJvbWUuZGVjbGFyYXRpdmVOZXRSZXF1ZXN0KSB7XG5cdFx0Ly8gY2hyb21pdW0gKGNocm9tZSBhbmQgZWRnZSlcblx0XHRjaHJvbWUucnVudGltZS5vbkluc3RhbGxlZC5hZGRMaXN0ZW5lcigoZGV0YWlscykgPT4ge1xuXHRcdFx0Y29uc3QgRVhUX1BBR0UgPSBjaHJvbWUucnVudGltZS5nZXRVUkwoJy9jYWxsYmFjay5odG1sJyk7XG5cdFx0XHRjb25zb2xlLmxvZygnVXNpbmcgZGVjbGFyYXRpdmVOZXRSZXF1ZXN0IEFQSScpO1xuXHRcdFx0Y29uc3QgUlVMRVMgPSBbe1xuXHRcdFx0XHRpZDogMSxcblx0XHRcdFx0Y29uZGl0aW9uOiB7XG5cdFx0XHRcdFx0cmVnZXhGaWx0ZXI6ICdeaHR0cHM6Ly93d3dcXFxcLnRvcGljdXMta2V5aHViXFxcXC5jb20vYnJvd3Nlci1leHRlbnNpb24tY2FsbGJhY2tcXFxcLmh0bWwuKyQnLFxuXHRcdFx0XHRcdHJlc291cmNlVHlwZXM6IFsnbWFpbl9mcmFtZSddXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFjdGlvbjoge1xuXHRcdFx0XHRcdHR5cGU6ICdyZWRpcmVjdCcsXG5cdFx0XHRcdFx0cmVkaXJlY3Q6IHsgcmVnZXhTdWJzdGl0dXRpb246IEVYVF9QQUdFICsgJyNcXFxcMCcgfVxuXHRcdFx0XHR9XG5cdFx0XHR9XTtcblx0XHRcdGNocm9tZS5kZWNsYXJhdGl2ZU5ldFJlcXVlc3QudXBkYXRlRHluYW1pY1J1bGVzKHtcblx0XHRcdFx0cmVtb3ZlUnVsZUlkczogUlVMRVMubWFwKHIgPT4gci5pZCksXG5cdFx0XHRcdGFkZFJ1bGVzOiBSVUxFUyxcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdGNvbnNvbGUubG9nKCdGYWxsYmFjayB0byB3ZWJSZXF1ZXN0IEFQSSBiZWNhdXNlIGRlY2xhcmF0aXZlTmV0UmVxdWVzdCBpcyBub3Qgc3VwcG9ydGVkJyk7XG5cdFx0aWYgKGNocm9tZS5pZGVudGl0eSkge1xuXHRcdFx0Ly8gZmlyZWZveFxuXHRcdFx0Y2hyb21lLndlYlJlcXVlc3Qub25CZWZvcmVSZXF1ZXN0LmFkZExpc3RlbmVyKFxuXHRcdFx0XHQoZGV0YWlscykgPT4ge1xuXHRcdFx0XHRcdGdldEJhY2tncm91bmQoKS50aGVuKGJnID0+IGJnLmhhbmRsZUNhbGxiYWNrKGRldGFpbHMpKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0eyB1cmxzOiBbJ2h0dHBzOi8vd3d3LnRvcGljdXMta2V5aHViLmNvbS9icm93c2VyLWV4dGVuc2lvbi1jYWxsYmFjay5odG1sKiddIH0sXG5cdFx0XHRcdFsnYmxvY2tpbmcnXSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHNhZmFyaVxuXHRcdFx0Y29uc29sZS5sb2coJ1JlZ2lzdGVyaW5nIFNhZmFyaSBvbkJlZm9yZVJlZGlyZWN0IGhhY2snKTtcblx0XHRcdGNocm9tZS53ZWJSZXF1ZXN0Lm9uQmVmb3JlUmVkaXJlY3QuYWRkTGlzdGVuZXIoXG5cdFx0XHRcdChkZXRhaWxzKSA9PiB7XG5cdFx0XHRcdFx0aWYgKGRldGFpbHMucmVkaXJlY3RVcmwuc3RhcnRzV2l0aCgnaHR0cHM6Ly93d3cudG9waWN1cy1rZXlodWIuY29tL2Jyb3dzZXItZXh0ZW5zaW9uLWNhbGxiYWNrLmh0bWwnKSkge1xuXHRcdFx0XHRcdFx0Z2V0QmFja2dyb3VuZCgpLnRoZW4oYmcgPT4gYmcuaGFuZGxlQ2FsbGJhY2soeyB0YWJJZDogZGV0YWlscy50YWJJZCwgdXJsOiBkZXRhaWxzLnJlZGlyZWN0VXJsIH0pKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHsgdXJsczogWydodHRwczovLyovbG9naW4qJ10gfSk7XG5cdFx0fVxuXHR9XG5cdGdldEJhY2tncm91bmQoKS50aGVuKGJnID0+IHtcblx0XHRpZiAoYmcuaGFzSXNzdWVyKCkpIHtcblx0XHRcdGNvbnN0IGlzc3VlciA9IG5ldyBVUkwoYmcuZ2V0SXNzdWVyKCkpO1xuXHRcdFx0aXNzdWVyLnBvcnQgPSAnJztcblx0XHRcdGNvbnN0IGxvZ291dFVybCA9IGlzc3Vlci50b1N0cmluZygpICsgJ2xvZ2luL2xvZ291dConO1xuXHRcdFx0Y29uc29sZS5sb2coJ1dhdGNoaW5nIGZvciBsb2dvdXQgY2FsbHMgYXQgJyArIGxvZ291dFVybClcblx0XHRcdGNocm9tZS53ZWJSZXF1ZXN0Lm9uQmVmb3JlUmVkaXJlY3QuYWRkTGlzdGVuZXIoXG5cdFx0XHRcdChkZXRhaWxzKSA9PiB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJ0RldGVjdGVkIGxvZ291dCwgY2xlYXJpbmcgc2Vzc2lvbicpO1xuXHRcdFx0XHRcdGdldEJhY2tncm91bmQoKS50aGVuKGJnID0+IGJnLmNsZWFyU2Vzc2lvbigpKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0eyB1cmxzOiBbbG9nb3V0VXJsXSB9KTtcblx0XHR9XG5cdH0pXG5cblx0Y2hyb21lLnJ1bnRpbWUub25JbnN0YWxsZWQuYWRkTGlzdGVuZXIoKGRldGFpbHMpID0+IHtcblx0XHRjaHJvbWUudGFicy5xdWVyeSh7IHVybDogJ2h0dHBzOi8vKi9jb25zb2xlKicgfSwgKHRhYnMpID0+IHtcblx0XHRcdHRhYnMuZm9yRWFjaCgodGFiKSA9PiB7XG5cdFx0XHRcdGNocm9tZS5zY3JpcHRpbmcuZXhlY3V0ZVNjcmlwdCh7XG5cdFx0XHRcdFx0dGFyZ2V0OiB7IHRhYklkOiB0YWIuaWQgfSxcblx0XHRcdFx0XHRmaWxlczogW1wiZGV0ZWN0a2V5aHViLmpzXCJdXG5cdFx0XHRcdH0sIChyKSA9PiB7XG5cdFx0XHRcdFx0dmFyIGVyclRvSWdub3JlID0gY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9KTtcblxuXHRjaHJvbWUuY29udGV4dE1lbnVzLnJlbW92ZUFsbCgoKSA9PiB7XG5cdFx0Y2hyb21lLmNvbnRleHRNZW51cy5jcmVhdGUoe1xuXHRcdFx0aWQ6ICdjb250ZXh0LWZpbGwnLFxuXHRcdFx0dGl0bGU6IGNocm9tZS5pMThuLmdldE1lc3NhZ2UoJ2NvbnRleHRtZW51X2ZpbGwnKSxcblx0XHRcdGNvbnRleHRzOiBbJ2FsbCddXG5cdFx0fSk7XG5cdH0pO1xuXG5cdGNocm9tZS5ydW50aW1lLm9uU3RhcnR1cC5hZGRMaXN0ZW5lcigoKSA9PiB7IGdldEJhY2tncm91bmQoKS50aGVuKGJnID0+IGJnLnN5bmNWZXJzaW9uKCkpIH0pO1xufVxuXG5yZWdpc3RlckV2ZW50SGFuZGxlcnMoKTtcbiJdLCJuYW1lcyI6WyJRdWVyeXN0cmluZyIsInJlcXVpcmUiLCJERUZBVUxUX1VSTF9CQVNFIiwibW9kdWxlIiwiZXhwb3J0cyIsIkNsaWVudE9BdXRoMiIsIkRFRkFVTFRfSEVBREVSUyIsIkFjY2VwdCIsIkVSUk9SX1JFU1BPTlNFUyIsImludmFsaWRfcmVxdWVzdCIsImpvaW4iLCJpbnZhbGlkX2NsaWVudCIsImludmFsaWRfZ3JhbnQiLCJ1bmF1dGhvcml6ZWRfY2xpZW50IiwidW5zdXBwb3J0ZWRfZ3JhbnRfdHlwZSIsImFjY2Vzc19kZW5pZWQiLCJ1bnN1cHBvcnRlZF9yZXNwb25zZV90eXBlIiwiaW52YWxpZF9zY29wZSIsInNlcnZlcl9lcnJvciIsInRlbXBvcmFyaWx5X3VuYXZhaWxhYmxlIiwiZXhwZWN0cyIsIm9iaiIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwcm9wIiwiVHlwZUVycm9yIiwiYXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJidG9hIiwidG9TdHJpbmciLCJzdHIiLCJTdHJpbmciLCJyZXF1ZXN0T3B0aW9ucyIsIm9wdGlvbnMiLCJ1cmwiLCJtZXRob2QiLCJib2R5IiwiT2JqZWN0IiwiYXNzaWduIiwicXVlcnkiLCJoZWFkZXJzIiwiZmV0Y2hSZXF1ZXN0IiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJvayIsIkVycm9yIiwiY29uY2F0Iiwic3RhdHVzIiwianNvbiIsInRoaXMiLCJyZXF1ZXN0IiwiY29kZSIsIkNvZGVGbG93IiwiQ2xpZW50T0F1dGgyVG9rZW4iLCJjbGllbnQiLCJkYXRhIiwidG9rZW5UeXBlIiwidG9rZW5fdHlwZSIsInRvTG93ZXJDYXNlIiwiYWNjZXNzVG9rZW4iLCJhY2Nlc3NfdG9rZW4iLCJyZWZyZXNoVG9rZW4iLCJyZWZyZXNoX3Rva2VuIiwiZXhwaXJlc0luIiwiTnVtYmVyIiwiZXhwaXJlc19pbiIsIlRva2VuIiwicHJvdG90eXBlIiwiY3JlYXRlVG9rZW4iLCJhY2Nlc3MiLCJyZWZyZXNoIiwidHlwZSIsIl9yZXF1ZXN0Iiwic3RyaW5naWZ5IiwiaW5kZXhPZiIsImR1cmF0aW9uIiwiZXhwaXJlcyIsIkRhdGUiLCJzZXRTZWNvbmRzIiwiZ2V0U2Vjb25kcyIsImdldFRpbWUiLCJzaWduIiwicmVxdWVzdE9iamVjdCIsIkF1dGhvcml6YXRpb24iLCJwYXJ0cyIsInNwbGl0IiwidG9rZW4iLCJyZXBsYWNlIiwiZnJhZ21lbnQiLCJQcmFnbWEiLCJvcHRzIiwic2VsZiIsImFjY2Vzc1Rva2VuVXJpIiwiY2xpZW50SWQiLCJjbGllbnRTZWNyZXQiLCJncmFudF90eXBlIiwiUHJvbWlzZSIsInJlamVjdCIsImV4cGlyZWQiLCJub3ciLCJnZXRVcmkiLCJzY29wZXMiLCJxcyIsImNsaWVudF9pZCIsInJlZGlyZWN0X3VyaSIsInJlZGlyZWN0VXJpIiwicmVzcG9uc2VfdHlwZSIsInN0YXRlIiwidW5kZWZpbmVkIiwic2NvcGUiLCJBcnJheSIsImlzQXJyYXkiLCJzZXAiLCJhdXRob3JpemF0aW9uVXJpIiwiaW5jbHVkZXMiLCJjcmVhdGVVcmkiLCJnZXRUb2tlbiIsInVyaSIsIlVSTCIsInBhdGhuYW1lIiwic2VhcmNoIiwic3Vic3RyIiwicGFyc2UiLCJlcnIiLCJtZXNzYWdlIiwiZXJyb3IiLCJlcnJvcl9kZXNjcmlwdGlvbiIsImdldEF1dGhFcnJvciIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImVxIiwicmVnZXhwIiwibWF4S2V5cyIsImxlbiIsImtzdHIiLCJ2c3RyIiwiayIsInYiLCJ4IiwiaWR4IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicHVzaCIsInN0cmluZ2lmeVByaW1pdGl2ZSIsImlzRmluaXRlIiwibmFtZSIsImtleXMiLCJtYXAiLCJrcyIsImVuY29kZVVSSUNvbXBvbmVudCIsImZpbHRlciIsIkJvb2xlYW4iLCJkZWNvZGUiLCJlbmNvZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiY2FjaGVkVmVyc2lvbiIsIl9hcnJheUxpa2VUb0FycmF5IiwiciIsImUiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJ0Iiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsImZyb20iLCJ0ZXN0IiwiX3NsaWNlZFRvQXJyYXkiLCJsIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJ1IiwiZiIsIm5leHQiLCJkb25lIiwidmFsdWUiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJfdHlwZW9mIiwidG9Qcm9wZXJ0eUtleSIsInRvUHJpbWl0aXZlIiwiX2RlZmluZVByb3BlcnRpZXMiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9jcmVhdGVDbGFzcyIsIl9jbGFzc0NhbGxDaGVjayIsIl9kZWZpbmVQcm9wZXJ0eSIsIlRleHRFbmNvZGVyIiwiZGVjb2RlciIsIlRleHREZWNvZGVyIiwiaW5wdXQiLCJlbmNvZGVkIiwiVWludDhBcnJheSIsImJpbmFyeSIsImF0b2IiLCJieXRlcyIsImNoYXJDb2RlQXQiLCJkZWNvZGVCYXNlNjQiLCJpc0NyeXB0b0tleSIsIkNyeXB0b0tleSIsIkpPU0VFcnJvciIsInN1cGVyIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJKV1RDbGFpbVZhbGlkYXRpb25GYWlsZWQiLCJwYXlsb2FkIiwiY2xhaW0iLCJyZWFzb24iLCJKV1RFeHBpcmVkIiwiSk9TRUFsZ05vdEFsbG93ZWQiLCJKT1NFTm90U3VwcG9ydGVkIiwiSldTSW52YWxpZCIsIkpXVEludmFsaWQiLCJKV0tTSW52YWxpZCIsIkpXS1NOb01hdGNoaW5nS2V5IiwiSldLU011bHRpcGxlTWF0Y2hpbmdLZXlzIiwiYXN5bmNJdGVyYXRvciIsIkpXU1NpZ25hdHVyZVZlcmlmaWNhdGlvbkZhaWxlZCIsImFzeW5jIiwiandrIiwiYWxnIiwiYWxnb3JpdGhtIiwia2V5VXNhZ2VzIiwia3R5IiwiaGFzaCIsInBhcnNlSW50IiwibmFtZWRDdXJ2ZSIsImNydiIsInN1YnRsZU1hcHBpbmciLCJyZXN0IiwiZXh0Iiwia2V5X29wcyIsImtleURhdGEiLCJ1c2UiLCJzdWJ0bGUiLCJpbXBvcnRLZXkiLCJpc09iamVjdCIsImdldFByb3RvdHlwZU9mIiwicHJvdG8iLCJpbXBvcnRKV0siLCJvdGgiLCJpc0pXS0xpa2UiLCJjbG9uZSIsInN0cnVjdHVyZWRDbG9uZSIsIkpTT04iLCJMb2NhbEpXS1NldCIsImp3a3MiLCJfY2FjaGVkIiwiV2Vha01hcCIsImV2ZXJ5IiwiaXNKV0tTTGlrZSIsIl9qd2tzIiwiZ2V0S2V5IiwicHJvdGVjdGVkSGVhZGVyIiwia2lkIiwiaGVhZGVyIiwiZ2V0S3R5RnJvbUFsZyIsImNhbmRpZGF0ZXMiLCJjYW5kaWRhdGUiLCJpbXBvcnRXaXRoQWxnQ2FjaGUiLCJjYWNoZSIsImNhY2hlZCIsInNldCIsImNyZWF0ZUxvY2FsSldLU2V0IiwibG9jYWxKV0tTZXQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidW51c2FibGUiLCJpc0FsZ29yaXRobSIsImdldEhhc2hMZW5ndGgiLCJjaGVja1NpZ0NyeXB0b0tleSIsInVzYWdlcyIsImV4cGVjdGVkIiwiZ2V0TmFtZWRDdXJ2ZSIsInNvbWUiLCJtc2ciLCJsYXN0IiwicG9wIiwiY2hlY2tVc2FnZSIsImFjdHVhbCIsInR5cGVzIiwid2l0aEFsZyIsInRvU3RyaW5nVGFnIiwiaXNKV0siLCJleHBvcnRLZXlWYWx1ZSIsInB1YkNhY2hlIiwiaXNLZXlPYmplY3QiLCJpbXBvcnRBbmRDYWNoZSIsImZyZWV6ZSIsImNyeXB0b0tleSIsInNpZ25hdHVyZSIsInVzYWdlIiwiZXhwb3J0IiwiZm9ybWF0IiwiZHAiLCJkcSIsInAiLCJxIiwicWkiLCJzdGFydHNXaXRoIiwibW9kdWx1c0xlbmd0aCIsInNhbHRMZW5ndGgiLCJ2ZXJpZnkiLCJ0YWciLCJqd2tNYXRjaGVzT3AiLCJjaGVja0tleVR5cGUiLCJhbGxvd0p3ayIsInN5bW1ldHJpY1R5cGVDaGVjayIsImFzeW1tZXRyaWNUeXBlQ2hlY2siLCJiaW5kIiwiY2hlY2tLZXlUeXBlV2l0aEp3ayIsImNvbXBhY3RWZXJpZnkiLCJqd3MiLCJ2ZXJpZmllZCIsInByb3RlY3RlZCIsInBhcnNlZFByb3QiLCJzb3VyY2VzIiwiYWNjIiwicGFyYW1ldGVycyIsInNpemUiLCJwYXJhbWV0ZXIiLCJoYXMiLCJhZGQiLCJTZXQiLCJqb3NlSGVhZGVyIiwiYjY0IiwiRXJyIiwicmVjb2duaXplZERlZmF1bHQiLCJyZWNvZ25pemVkT3B0aW9uIiwiY3JpdCIsInJlY29nbml6ZWQiLCJNYXAiLCJlbnRyaWVzIiwiYWxnb3JpdGhtcyIsIm9wdGlvbiIsInMiLCJyZXNvbHZlZEtleSIsImJ1ZmZlcnMiLCJyZWR1Y2UiLCJidWYiLCJidWZmZXIiLCJyZXN1bHQiLCJ1bnByb3RlY3RlZEhlYWRlciIsImZsYXR0ZW5lZFZlcmlmeSIsIlJFR0VYIiwibWF0Y2hlZCIsImV4ZWMiLCJwYXJzZUZsb2F0IiwibnVtZXJpY0RhdGUiLCJNYXRoIiwicm91bmQiLCJtaW51dGUiLCJob3VyIiwiZGF5Iiwibm9ybWFsaXplVHlwIiwiZW5jb2RlZFBheWxvYWQiLCJ0eXAiLCJyZXF1aXJlZENsYWltcyIsImlzc3VlciIsInN1YmplY3QiLCJhdWRpZW5jZSIsIm1heFRva2VuQWdlIiwicHJlc2VuY2VDaGVjayIsInJldmVyc2UiLCJpc3MiLCJzdWIiLCJhdWRPcHRpb24iLCJhdWRQYXlsb2FkIiwiYXVkIiwidG9sZXJhbmNlIiwiY2xvY2tUb2xlcmFuY2UiLCJzZWNzIiwiY3VycmVudERhdGUiLCJkYXRlIiwiZmxvb3IiLCJpYXQiLCJuYmYiLCJleHAiLCJhZ2UiLCJqd3RWZXJpZnkiLCJqd3QiLCJsb29rVXBUbGRzSW5UcmllIiwibGFiZWxzIiwidHJpZSIsImxhYmVsc1RvQ2hlY2siLCJ0bGRzIiwibm9kZSIsImxhYmVsIiwibGFiZWxMb3dlckNhc2UiLCJjaGlsZHJlbiIsInVuc2hpZnQiLCJ3b3JkIiwiYm91bmRyeSIsImluY2x1ZGVCb3VuZGFyaWVzIiwidjQiLCJ2NnNlZ21lbnQiLCJ2NiIsInRyaW0iLCJ2NDZFeGFjdCIsIlJlZ0V4cCIsInY0ZXhhY3QiLCJ2NmV4YWN0IiwiZXhhY3QiLCJmbGFnTWFwIiwiZ2xvYmFsIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsImRvdEFsbCIsInN0aWNreSIsInVuaWNvZGUiLCJyZWdleCIsInN0cmluZyIsInRpbWVvdXQiLCJmdW5jdGlvbl8iLCJ3cmFwcGVkRnVuY3Rpb24iLCJhcmd1bWVudHNfIiwiZmxhZ3MiLCJmbGFnIiwiY2xvbmVkUmVnZXhwIiwic291cmNlIiwibGFzdEluZGV4IiwiaXBWZXJzaW9uIiwiaXNJUHY2IiwiaXNJUHY0IiwidGV4dEVuY29kZXIiLCJWYWxpZGF0aW9uIiwiVmFsaWRhdGlvbkVycm9yVHlwZSIsIlNhbml0aXphdGlvblJlc3VsdFR5cGUiLCJjcmVhdGVOb0hvc3RuYW1lRXJyb3IiLCJOb0hvc3RuYW1lIiwiY29sdW1uIiwiY3JlYXRlTGFiZWxNaW5MZW5ndGhFcnJvciIsIkxhYmVsTWluTGVuZ3RoIiwiY3JlYXRlTGFiZWxNYXhMZW5ndGhFcnJvciIsIkxhYmVsTWF4TGVuZ3RoIiwiY3JlYXRlTGFiZWxJbnZhbGlkQ2hhcmFjdGVyRXJyb3IiLCJpbnZhbGlkQ2hhcmFjdGVyIiwiTGFiZWxJbnZhbGlkQ2hhcmFjdGVyIiwidmFsaWRhdGVMYWJlbHMiLCJMYXgiLCJsYWJlbFZhbGlkYXRpb25FcnJvcnMiLCJvY3RldHMiLCJMQUJFTF9TRVBBUkFUT1IiLCJTdHJpY3QiLCJsYXN0TGFiZWwiLCJpbmRleCIsImVuZHNXaXRoIiwiY3JlYXRlTGFzdExhYmVsSW52YWxpZEVycm9yIiwiTk9ERV9UWVBFX1JPT1QiLCJOT0RFX1RZUEVfQ0hJTEQiLCJwYXJzZVRyaWUiLCJzZXJpYWxpemVkVHJpZSIsInJvb3ROb2RlIiwiZG9tYWluIiwicGFyZW50Tm9kZSIsImFkZERvbWFpbiIsInBhcmVudCIsImNoaWxkIiwiY3JlYXRlT3JHZXRDaGlsZCIsImNoYXIiLCJjaGFyQXQiLCJSRVNFUlZFRF9UT1BfTEVWRUxfRE9NQUlOUyIsIlBhcnNlUmVzdWx0VHlwZSIsImdldEF0SW5kZXgiLCJhcnJheSIsInNwbGl0TGFiZWxzSW50b0RvbWFpbnMiLCJzdWJEb21haW5zIiwibWF4IiwidG9wTGV2ZWxEb21haW5zIiwicGFyc2VkSWNhbm5UcmllIiwicGFyc2VkUHJpdmF0ZVRyaWUiLCJwYXJzZURvbWFpbiIsImhvc3RuYW1lIiwic2FuaXRpemF0aW9uUmVzdWx0IiwiZXJyb3JzIiwiVmFsaWREb21haW4iLCJpbnB1dFRyaW1tZWRBc0lwIiwiaXBWZXJzaW9uT2ZJbnB1dCIsIlZhbGlkSXAiLCJpcCIsImNhbm9uaWNhbElucHV0IiwiRG9tYWluTWF4TGVuZ3RoIiwidmFsaWRhdGlvbiIsInNhbml0aXplIiwiSW52YWxpZCIsIklwIiwiUmVzZXJ2ZWQiLCJpY2FublRsZHMiLCJwcml2YXRlVGxkcyIsIk5vdExpc3RlZCIsImluZGV4T2ZQdWJsaWNTdWZmaXhEb21haW4iLCJpbmRleE9mSWNhbm5Eb21haW4iLCJMaXN0ZWQiLCJpY2FubiIsInVybFBhdHRlcm4iLCJpbnZhbGlkSXB2NlBhdHRlcm4iLCJOT19IT1NUTkFNRSIsImZyb21VcmwiLCJ1cmxMaWtlIiwiX2EiLCJWYXVsdHMiLCJyZWNvcmQiLCJ0eXBlMSIsInR5cGUyIiwidmF1bHRzIiwidGV4dCIsIl90aGlzIiwibWF0Y2hlc1NlYXJjaCIsIm5vcm0iLCJ1cmxzIiwiX3RoaXMyIiwiYXBwbHkiLCJ1cmxNYXRjaGVzIiwibWF0Y2hlciIsIl90aGlzMyIsInJlY29yZHMiLCJ2YXVsdCIsImFkZGl0aW9uYWxPYmplY3RzIiwiYyIsImhhc1R5cGUiLCJzb3J0IiwicjEiLCJyMiIsInJlY29yZENvbXBhcmUiLCJwYXJzZWRVcmwiLCJwYXJzZWRSZWNvcmRVcmwiLCJhcnJheUVxdWFscyIsImFycmF5Q29udGFpbnNBbGwiLCJob3N0IiwiYWJzb2x1dGVVcmwiLCJhMSIsImEyIiwiYTFlbGVtZW50IiwiYXJyIiwic3Vic2V0Iiwic2VhcmNoVGVybSIsInV1aWQiLCJmaWxlbmFtZSIsInZhbCIsIm5vcm1hbGl6ZSIsImNvbG9ycyIsIm1hdGNoZXJEaWZmIiwiY29sb3IiLCJsb2NhbGVDb21wYXJlIiwiS2V5SHViU2VydmljZSIsImNocm9tZSIsInN0b3JhZ2UiLCJzeW5jIiwiaXRlbXMiLCJfaXNzdWVyIiwic2Vzc2lvbiIsIl90b2tlbiIsIm9hdXRoVG9rZW4iLCJsb2NhbCIsIl92YXVsdHMiLCJfc2VhcmNoZXMiLCJzZWFyY2hlcyIsIl9zZXR0aW5ncyIsInNldHRpbmdzIiwic2hvd19pY29uIiwiZ2V0QXV0aFN0YXRlIiwicmVzb2x2ZXIiLCJnZXRJc3N1ZXIiLCJfYXV0aFN0YXRlIiwiYXV0aFN0YXRlIiwicGVybWlzc2lvbnMiLCJjb250YWlucyIsIm9yaWdpbnMiLCJwcm9tcHQiLCJhdXRoVmF1bHQiLCJoYXNJc3N1ZXIiLCJ2YWxpZF91bnRpbCIsInJlc29sdmUiLCJyYW5kb20iLCJub25jZSIsInNldEF1dGhTdGF0ZSIsIm9hdXRoMiIsImNyZWF0ZVRva2VuQ2FsbCIsImNvZGVfdmVyaWZpZXIiLCJwa2NlVmVyaWZpZXIiLCJzdG9yZVRva2VuIiwiY2F1c2UiLCJjb25zb2xlIiwibG9nIiwiZXJyb3JoYW5kbGluZyIsInRpbWUiLCJjcnlwdG8iLCJkaWdlc3QiLCJwa2NlSGFzaCIsInF1ZXJ5T2JqIiwiY29kZV9jaGFsbGVuZ2UiLCJiYXNlNjR1cmwiLCJjb2RlX2NoYWxsZW5nZV9tZXRob2QiLCJzaG91bGRQcm9tcHQiLCJ0YWJzIiwiYWN0aXZlIiwiY3VycmVudFdpbmRvdyIsIl9sYXN0QWN0aXZlVGFiIiwiaWQiLCJfcmVzdG9yZUxhc3RBY3RpdmVUYWIiLCJjcmVhdGUiLCJlbmNvZGVkQnVmZmVyIiwiZnJvbUNoYXJDb2RlIiwiZ2V0UmFuZG9tVmFsdWVzIiwiZGVjIiwicmFuZ2VTdGFydCIsImZldGNoUmVzcG9uc2UiLCJmZXRjaFRva2VuIiwiYnVpbGRIZWFkZXJzIiwiZGlzY29ubmVjdCIsImFwcGxpY2F0aW9uRXJyb3IiLCJyZWF1dGgiLCJyZXQiLCJjbGVhclNlc3Npb24iLCJkZXRhaWwiLCJzZXRUb2tlbiIsInJlbW92ZSIsImF1dGhSZXF1aXJlZExldmVsIiwiYXV0aEVycm9yIiwiYXV0aEVycm9ySW5mbyIsImFwcGxpY2F0aW9uRXJyb3JQYXJhbWV0ZXJzIiwidG9rZW5Ib2xkZXIiLCJsaW5rcyIsImZpbmQiLCJyZWwiLCJocmVmIiwiZmV0Y2hKU09OIiwiZ2V0VmF1bHRzIiwiYWNjb3VudCIsImZldGNoQWNjb3VudCIsImZldGNoUGVyc29uYWxWYXVsdCIsInBlcnNvbmFsIiwiZmV0Y2hHcm91cFZhdWx0cyIsImdyb3VwcyIsInNldFZhdWx0cyIsInNlbGZMaW5rIiwibWF4RmV0Y2hlcyIsImNvbnRlbnRSYW5nZUhlYWRlciIsInJlc3BvbnNlSnNvbiIsImN1cnJlbnRJdGVtcyIsImNvbnRlbnRSYW5nZSIsInBhcnNlQ29udGVudFJhbmdlIiwiaGFzTW9yZSIsImVuZCIsIm90aGVySXRlbXMiLCJ0b2tlblBhc3N3b3JkRW5hYmxlZCIsInJhbmdlRW5kIiwiSGVhZGVycyIsImFwcGVuZCIsInZhdWx0U2Vzc2lvbiIsImNsZWFyIiwicmVzZXQiLCJjb250ZXh0TWVudXMiLCJyZW1vdmVBbGwiLCJ0YWIiLCJjb3VudCIsImZpbmRSZWNvcmRzQnlVcmxzIiwiYWN0aW9uIiwiYnJvd3NlckFjdGlvbiIsInNldEJhZGdlVGV4dCIsInRhYklkIiwiaG9zdEZyb21VcmwiLCJsaWNlbnNlIiwiam9zZSIsInZlcmlmeVJlc3VsdCIsImRvbWFpbnMiLCJkbW4iLCJpc3N1ZXJIb3N0IiwiZ2V0U2VhcmNoUXVlcnkiLCJzZXRTZWFyY2hRdWVyeSIsInJlYWRDYWNoZWRWYXVsdHMiLCJmZXRjaFZhdWx0cyIsImZldGNoVW5sb2NrZWRSZWNvcmQiLCJmZXRjaFJvdGF0aW5nUGFzc3dvcmQiLCJ1cGRhdGVCYWRnZSIsImdldFNldHRpbmdzIiwic2V0U2V0dGluZ3MiLCJoYXNQZXJtaXNzaW9ucyIsImxvZ291dCIsInNlbmRlciIsInNlbmRSZXNwb25zZSIsImV4dGVuc2lvbklkIiwicnVudGltZSIsImNoZWNrTGljZW5zZSIsInNldElzc3VlciIsInN5bmNWZXJzaW9uIiwib3duSXNzdWVyIiwibGlua2VkIiwiaW52b2tlIiwiaGFuZGxlQ2FsbGJhY2siLCJyZWxheWVkIiwic2VuZE1lc3NhZ2UiLCJyYW5kb21VVUlEIiwiaWZyYW1lTm9uY2UiLCJkZXRhaWxzIiwidXBkYXRlIiwiY2FsbGJhY2siLCJjYW5jZWwiLCJjaGFuZ2VJbmZvIiwiYWRkZWRUYWJJZCIsInJlbW92ZWRUYWJJZCIsImFjdGl2ZUluZm8iLCJjb21tYW5kIiwiY3JlZHMiLCJpbmZvIiwiZWRpdGFibGUiLCJjb250cmFjdFZlcnNpb25zIiwidmVyc2lvbiIsInJlbG9hZCIsIm1hdGNoZXMiLCJtYXRjaCIsIl9tYXRjaGVzIiwidW5pdCIsInN0YXJ0IiwicmFuZ2UiLCJjYWNoZWRCYWNrZ3JvdW5kIiwiZ2V0QmFja2dyb3VuZCIsImNvbnRyYWN0VmVyc2lvbiIsIkJhY2tncm91bmRWNiIsIkJhY2tncm91bmRWNyIsImJnIiwicmVzdG9yZVN0YXRlIiwiY29tbWFuZHMiLCJvbkNvbW1hbmQiLCJhZGRMaXN0ZW5lciIsImhhbmRsZUNvbW1hbmQiLCJvbkNsaWNrZWQiLCJoYW5kbGVDb250ZXh0TWVudUNsaWNrIiwib25NZXNzYWdlIiwiaGFuZGxlTWVzc2FnZSIsIm9uVXBkYXRlZCIsImhhbmRsZVRhYlVwZGF0ZWQiLCJvbkNyZWF0ZWQiLCJoYW5kbGVUYWJDcmVhdGVkIiwib25SZXBsYWNlZCIsImhhbmRsZVRhYlJlcGxhY2VkIiwib25BY3RpdmF0ZWQiLCJoYW5kbGVUYWJBY3RpdmF0ZWQiLCJkZWNsYXJhdGl2ZU5ldFJlcXVlc3QiLCJvbkluc3RhbGxlZCIsIkVYVF9QQUdFIiwiZ2V0VVJMIiwiUlVMRVMiLCJjb25kaXRpb24iLCJyZWdleEZpbHRlciIsInJlc291cmNlVHlwZXMiLCJyZWRpcmVjdCIsInJlZ2V4U3Vic3RpdHV0aW9uIiwidXBkYXRlRHluYW1pY1J1bGVzIiwicmVtb3ZlUnVsZUlkcyIsImFkZFJ1bGVzIiwiaWRlbnRpdHkiLCJ3ZWJSZXF1ZXN0Iiwib25CZWZvcmVSZXF1ZXN0Iiwib25CZWZvcmVSZWRpcmVjdCIsInJlZGlyZWN0VXJsIiwicG9ydCIsImxvZ291dFVybCIsImZvckVhY2giLCJzY3JpcHRpbmciLCJleGVjdXRlU2NyaXB0IiwidGFyZ2V0IiwiZmlsZXMiLCJsYXN0RXJyb3IiLCJ0aXRsZSIsImkxOG4iLCJnZXRNZXNzYWdlIiwiY29udGV4dHMiLCJvblN0YXJ0dXAiXSwic291cmNlUm9vdCI6IiJ9