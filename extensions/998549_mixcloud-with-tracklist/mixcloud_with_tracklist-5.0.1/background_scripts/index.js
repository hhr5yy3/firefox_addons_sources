(()=>{var t={895:t=>{"use strict";let e;function a(){return e.clear()}async function s(t){const a=await e.get("settings"),s=a&&a.settings?a.settings:{};Object.assign(s,t),e.set({settings:s})}async function n(){const t=await e.get("settings");return t&&t.settings?t.settings:{}}e=browser.storage.local,t.exports={clear:a,setSettings:s,getSettings:n,saveIdToPath:function(t,a){e.set({[t]:a}).catch((t=>console.log("error on save id",t)))},getCloudcastPathFromId:async function(t){const a=await e.get(t).catch((t=>{}));return 0===Object.keys(a).length&&a.constructor===Object?void 0:a[t]},getCloudcastByPath:async function(t){const a=await e.get(t).catch((t=>{}));return void 0===a||0===Object.keys(a).length&&a.constructor===Object?void 0:a[t]},setMixData:async function(t){const o=t.path;try{await e.set({[o]:t})}catch(r){if(console.error(`Error on save for mixData ${o}`,r),r.name&&r.name.toLowerCase().includes("quota")){const r=await n();await a(),await s(r),await e.set({[o]:t})}}},getMultipleMixData:async function(t){const a=await e.get(t).catch((t=>{console.error(t)}));return a?t.filter((t=>!!a[t])).map((t=>a[t])):[]}}},585:t=>{function e(t){let e=[];if(t&&t.length>0){const s=!isNaN(t[t.length-1].startSeconds)&&t[t.length-1].startSeconds>3600;e=t.map(((t,e)=>({trackNumber:e+1<10?"0"+(e+1):""+(e+1),timestamp:t.startSeconds,time:a(t.startSeconds,s),artistName:void 0===t.artistName?"unknow":t.artistName,songName:void 0===t.artistName?"unknow":t.songName})))}return e}function a(t,e){let a;return a=null==t?"not provided":function(t,e){var a=parseInt(t,10),s=Math.floor(a/3600)%24,n=Math.floor(a/60)%60,o=a%60;return[s,n,o].map((t=>t<10?"0"+t:t)).filter(((t,a)=>!0===e||("00"!==t||a>0))).join(":")}(t,e),a}t.exports={cloudcastToMixData:function(t,a){return{id:t.id,path:"/"+a.username+"/"+a.slug+"/",tracklist:e(t.sections)}}}}},e={};function a(s){var n=e[s];if(void 0!==n)return n.exports;var o=e[s]={exports:{}};return t[s](o,o.exports,a),o.exports}(()=>{"use strict";const t=a(895),e=a(585);async function s(a,s){const n=e.cloudcastToMixData(a,s);await t.getCloudcastPathFromId(n.id)||(t.saveIdToPath(n.id,n.path),n.path,t.setMixData(n))}chrome.runtime.onInstalled.addListener((e=>{"install"===e.reason&&t.setSettings({onboardingInstall:!0})})),chrome.webRequest.onBeforeRequest.addListener((async function(e){if(e.requestBody){const a=new Uint8Array(e.requestBody.raw[0].bytes),n=new TextDecoder("utf-8"),o=JSON.parse(n.decode(a));"MwT"!==o.id&&o.query.includes("TracklistAudioPageQuery")&&!await t.getCloudcastByPath("/"+o.variables.lookup.username+"/"+o.variables.lookup.slug+"/")?chrome.tabs.query({url:"*://*.mixcloud.com/*"},(t=>{var e,a;t[0]&&(e=t[0],a=o.variables,chrome.tabs.sendMessage(e.id,{action:"requestTracklist",variables:a,query:"\n    query TracklistAudioPageQuery($lookup: CloudcastLookup!) {\n        cloudcast: cloudcastLookup(lookup: $lookup) {\n            canShowTracklist\n            featuringArtistList\n            moreFeaturingArtists\n            sections {\n                ... on TrackSection {\n                    __typename\n                    artistName\n                    songName\n                    startSeconds\n                }\n                ... on ChapterSection {\n                    chapter\n                }\n            }\n            id\n        }\n    }\n"},(t=>{(function(t){return!!t?.xhrResponse?.data?.cloudcast})(t)&&s(t.xhrResponse.data.cloudcast,{username:a.lookup.username,slug:a.lookup.slug})})))})):"MwT"!==o.id&&o.query.includes("PlayerControlsQuery")&&!await t.getCloudcastPathFromId(o.variables.cloudcastId)&&chrome.tabs.query({url:"*://*.mixcloud.com/*"},(t=>{var e,a,n;t[0]&&(e=t[0],a=o.variables,n=o.query,chrome.tabs.sendMessage(e.id,{action:"requestTracklist",variables:a,query:n},(t=>{(function(t){return!!t?.xhrResponse?.data?.cloudcast?.owner?.username&&!!t?.xhrResponse?.data?.cloudcast?.slug})(t)&&s(t.xhrResponse.data.cloudcast,{username:t.xhrResponse.data.cloudcast.owner.username,slug:t.xhrResponse.data.cloudcast.slug})})))}))}}),{urls:["https://app.mixcloud.com/graphql"]},["requestBody"])})()})();