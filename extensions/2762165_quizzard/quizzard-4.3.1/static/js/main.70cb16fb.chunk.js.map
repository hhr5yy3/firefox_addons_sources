{"version":3,"sources":["components/themes/theme/Theme.tsx","components/themes/Themes.tsx","components/results/Results.tsx","util/Time.ts","components/settings/Settings.tsx","components/tos/TermsAndConditions.tsx","util/Window.ts","browser/BrowserStorage.ts","components/auth/Auth.tsx","browser/runtime/base/AbstractRuntime.ts","browser/runtime/QuizzardRuntime.ts","config/Configuration.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Theme","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","renderedComponent","_createClass","key","value","isSelected","this","props","theme","primaryColor","selectedColor","_jsx","style","backgroundColor","border","secondaryColor","opacity","className","onClick","onThemeClick","bind","children","_jsxs","disabled","width","src","alt","Component","Themes","onThemeChange","display","onCloseClick","id","themes","map","Results","reCAPTCHAIframe","state","captchaLoaded","result","index","onWebsiteClick","window","open","url","encodeURI","question","promotion","onPromotionClick","goldPromotion","onSettingsClick","onClearClick","_onReCAPTCHALoaded","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","prev","next","onReCAPTCHAResult","success","abrupt","undefined","console","error","setState","stop","_x","_this2","results","isLoading","settings","windowPrimaryColor","borderColor","reCAPTCHAData","marginTop","ref","iframe","onLoad","onReCAPTCHALoaded","title","scrolling","overflow","minWidth","marginLeft","marginBottom","href","onReCAPTCHAManualFix","_this2$props$randomiz2","_this2$props$randomiz3","randomizedPromotion","fontWeight","color","windowSecondaryColor","header","_this2$props$randomiz","onVisitPromotionalWebsite","lineHeight","body","onVisitWebsiteClick","answer","Math","round","confidence","noResults","onTrySearchingWithGoogleClick","onReportAProblemClick","Time","dateTime","date","Date","relativeTime","moment","fromNow","getTime","getFullYear","getMonth","getDate","floor","SettingsComponent","inputElement","displayFreeTrial","displayGoldPromotion","displayConfirmLogout","displayConfirmFreeTrial","isFreeTrialLoading","newProps","onInputChange","event","confidenceThreshold","parseInt","target","autoSort","autoClear","min","ratioValue","max","background","user","onLoginOrSignUp","onSubscribe","onLogout","setTimeout","onClose","onDiscordClick","JOIN_DISCORD_URL","onDonateClick","DONATION_URL","_this$props$user","_this$props$user2","_this3","onBackToSettingsClick","tabIndex","onSubscribeClick","userID","email","onLogoutClick","input","type","onInput","onChange","onConfidenceThresholdChange","onAutomaticallySortChange","checked","onAutomaticallyClearChange","isGoldSearch","goldSearchEndTimeEpoch","_Fragment","isRecurringSubscription","onManageSubscriptionClick","onLoginOrSignUpClick","onConfirmLogoutClick","MANAGE_QUIZZARD_GOLD_SUBSCRIPTION_URL","TermsAndConditions","tosInfoContainer","handleScroll","_this$tosInfoContaine","scrolled","scrollTop","scrollHeight","clientHeight","amountScrolled","addEventListener","removeEventListener","div","onScroll","onIAgreeClick","createPopup","BrowserStorage","keys","callback","chrome","storage","local","get","AuthType","focusIfNotNull","element","focus","focusAfterMS","AUTH_TYPE_MAP","_AUTH_TYPE_MAP","_defineProperty","NONE","LOGIN","ACTIVATE_USER","SIGN_UP","FORGOT_PASSWORD","FORGOT_PASSWORD_CONFIRMED","Auth","emailInputElement","passwordInputElement","errorButtonElement","_ref","isActivationRequired","rememberMe","authType","password","activationCode","onPopupClosed","trim","onLogin","then","loginResponse","isFreeTrialActivated","code","message","finally","onSignUp","_this4","onActivate","activateAccountResponse","_this5","onForgotPassword","onResetSignUpSession","onLoginClick","onSignUpClick","onActivateClick","_this6","toString","padStart","onBackToSignUp","onEmailInputChanged","onKeyDown","onEnterKeyPressed","placeholder","onPasswordInputChanged","onRememberMeChanged","name","htmlFor","onForgotPasswordViewClick","onActivationInputChanged","onNotNowClick","onForgotPasswordClick","OnForgotPasswordConfirmedGoBackClick","borderBottom","textAlign","fontSize","padding","position","top","onGoogleSignInClick","onAppleSignInClick","onViewSignUpClick","onViewLoginClick","btnError","onErrorGoBackClick","height","MessageType","Runtime","process","browser","runtime","safelyResolve","promise","resolve","constructBackgroundMessage","messageType","QuizzardRuntime","quizzardRuntimeEventListener","runtimePort","loginPromise","logoutPromise","signUpPromise","activationPromise","forgotPasswordPromise","freeTrialActivationPromise","initializeRuntime","onDisconnect","onMessage","disconnect","sendMessage","Promise","LOGOUT","ACTIVATE_ACCOUNT","ACTIVATE_FREE_TRIAL","RESET_SIGN_UP_SESSION","AGREE_TO_TERMS_OF_SERVICE","UPDATE_THEME","UPDATE_SEARCH_SETTINGS","UPDATE_STATE","SEARCH_START","SETTINGS_MODAL_CLICK","THEMES_MODAL_CLICK","DONATE_CLICK","DISCORD_CLICK","SUBSCRIBE_CLICK","FREE_TRIAL_CLICK","WEBSITE_CLICK","PROMOTION_CLICK","backgroundMessage","postMessage","removeListener","LOAD_APPLICATION_DATA","onLoadApplicationData","onStateUpdate","ERROR_OCCURRED","connect","DEFAULT_RUNTIME_ID","addListener","Configuration","DefaultSettings","DefaultState","answers","DefaultThemes","PopupDisplay","App","_React$Component","quizzardRuntime","defaultState","onLocalApplicationDataLoaded","_assertThisInitialized","popup","currentPopup","Authentication","None","_objectSpread","isGold","resetSignUpSession","didAgree","signInResetTimeEpoch","search","_event$target","_this$input","onThemesClick","displayGold","Settings","updateSearchSettings","_event$target2","updateApplicationState","updateTheme","resetInput","signup","activate","forgotPassword","login","logout","SUBSCRIPTION_URL","onFreeTrialClick","activateFreeTrial","updatedUser","agreeToTermsOfService","_this$state","_this$state$user","onAppClick","APPLICATION_NAME","onInputChanged","onKeyPress","onEnterKeyPress","onPaletteClick","React","Fragment","onDisplayLoginPopup","onLogoutRequest","onFreeTrial","onFreeTrialRequest","onSubscribeRequest","onSettingsCloseClick","onPaletteCloseClick","onAuthenticationPopupClosed","onForgotPasswordRequest","onLoginRequest","onSignupRequest","onActivationRequest","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70cb16fb.chunk.js","sourcesContent":["import './Theme.scss';\n\nimport { Component } from 'react';\nimport { Theme as ThemeType } from '../../../types/theme';\n\nexport default class Theme extends Component<{ theme: ThemeType, selectedColor: string, onThemeClick: (theme: ThemeType) => void }> {\n\n    private renderedComponent: any;\n\n    public render() {\n\n        const isSelected: boolean = this.props.theme.primaryColor === this.props.selectedColor;\n\n        this.renderedComponent = (<button style={{ backgroundColor: this.props.theme.primaryColor, border: `4px solid ${this.props.theme.secondaryColor}`, opacity: 1.0 }} className='Theme' onClick={this.props.onThemeClick.bind(this, this.props.theme)} > </button>);\n\n        if (isSelected === true) {\n            this.renderedComponent = (<button disabled={true} style={{ backgroundColor: this.props.theme.primaryColor, border: `4px solid ${this.props.theme.secondaryColor}`, opacity: 0.10 }} className='Theme' onClick={this.props.onThemeClick.bind(this, this.props.theme)} ><img style={{ width: '65%' }} src='./img/check.svg' alt='Check'></img> </button>);\n        }\n\n        return this.renderedComponent;\n    }\n\n}","import './Themes.scss';\nimport Theme from './theme/Theme';\n\nimport { Component } from 'react';\nimport { Theme as ThemeType } from '../../types/theme';\n\nexport default class Themes extends Component<{ display: boolean, themes: Array<ThemeType>, selectedColor: string, onThemeChange: (theme: ThemeType) => void, onCloseClick: () => void }> {\n\n    private onThemeClick(theme: ThemeType): void {\n        this.props.onThemeChange(theme);\n    }\n\n    public render() {\n\n        return (\n            <div style={{ display: this.props.display === true ? 'flex' : 'none' }} className='popup-container Fade-In'>\n\n                <button className='Pallete-Close-Button' onClick={this.props.onCloseClick}><img src='img/close.svg' alt='Close' /></button>\n\n                <div id='Themes' className='Theme-Container' >\n\n                    <h1>Select a theme</h1>\n                    <div className='Themes'>\n\n                        {\n                            this.props.themes.map(theme =>\n                                <Theme theme={theme} onThemeClick={this.onThemeClick.bind(this)} selectedColor={this.props.selectedColor} />\n                            )\n                        }\n\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n\n}\n","import './Results.scss';\n\nimport { Component } from 'react';\nimport { QuizletSet } from '../../types/quizlet-set';\nimport { Promotion, RandomizedPromotion } from '../../types/promotion';\nimport { Settings } from '../../types/settings';\nimport { ReCAPTCHAData } from '../../types/re-CAPTCHA';\n\ntype ResultComponentProperties = {\n    reCAPTCHAData: ReCAPTCHAData | undefined;\n    results: Array<QuizletSet>;\n    randomizedPromotion: RandomizedPromotion | undefined;\n    settings: Settings;\n    isLoading: boolean;\n    onClearClick: (resetInput: boolean) => void;\n    onSettingsClick: (displayGold?: boolean) => void;\n    onWebsiteClick: (index: number) => void;\n    onPromotionClick: (id: number) => void;\n    onReCAPTCHAResult: (value: any) => void;\n    noResults: boolean;\n    question: string;\n};\n\nexport default class Results extends Component<ResultComponentProperties, { captchaLoaded: boolean }> {\n\n    public reCAPTCHAIframe: HTMLIFrameElement | undefined;\n\n    constructor(props: any) {\n\n        super(props);\n        this.state = { captchaLoaded: false };\n    }\n\n    public onVisitWebsiteClick(result: QuizletSet, index: number): void {\n        this.props.onWebsiteClick(index);\n        window.open(result.url.concat(`#:~:text=${encodeURI(result.question)}`), '_blank');\n    }\n\n    public onVisitPromotionalWebsite(promotion: Promotion): void {\n\n        this.props.onPromotionClick(promotion.id);\n\n        if (promotion.goldPromotion === true) {\n            this.props.onSettingsClick(true);\n            return;\n        }\n\n        window.open(promotion.url, '_blank');\n    }\n\n    public onTrySearchingWithGoogleClick(): void {\n        window.open(`http://google.com/search?q=${this.props.question} site:quizlet.com`, '__blank');\n    }\n\n    public onReportAProblemClick(): void {\n        window.open(`https://www.quizzardapp.com/feedback`, '__blank');\n    }\n\n    public onReCAPTCHAManualFix(): void {\n        this.props.onClearClick(false);\n        window.open(`http://google.com/search?q=${this.props.question} quizlet`, '__blank');\n    }\n\n    public async onReCAPTCHALoaded(data: any) {\n\n        if (this.state.captchaLoaded === true) {\n            this.props.onReCAPTCHAResult({ success: true });\n            return;\n        }\n\n        if (this.reCAPTCHAIframe === undefined) {\n            console.error('reset state here');\n            return;\n        }\n\n        this.setState({ captchaLoaded: true });\n    }\n\n    public render() {\n\n        return (\n\n            <div className='Root'>\n\n                <div className='Results-Container' >\n\n                    <div className='Results-Settings-Container' >\n\n                        <p className='Results-Label'> Results: {this.props.results.length} </p>\n                        <span className='Span-Stretch'></span>\n\n                        <div className='Button-Container' >\n\n                            <div className='Button-Wrapper'>\n                                <p className='Button-Label'>Settings</p>\n                                <button style={ /* Temp Fix. Pulled 26px out of my ass hole. */ { width: '26px' }} className='Button' onClick={this.props.onSettingsClick.bind(null, false)}>\n                                    <img className='Button-Image' src='./img/settings.svg' alt='clear' />\n                                </button>\n                            </div>\n\n                            <div className='Button-Wrapper'>\n                                <p className='Button-Label'>Clear</p>\n                                <button style={ /* Temp Fix. Pulled 25px out of my ass hole. */ { width: '25px' }} className='Button' onClick={() => this.props.onClearClick(true)} >\n                                    <img className='Button-Image' src='./img/trash.svg' alt='clear' />\n                                </button>\n                            </div>\n\n                        </div>\n                    </div>\n\n                    {\n                        this.props.isLoading === true ?\n\n                            <div className='Loading-Container'>\n\n                                <div className='Lds-Ring' >\n                                    <div style={{ border: `8px solid ${this.props.settings.windowPrimaryColor}`, borderColor: `${this.props.settings.windowPrimaryColor} transparent transparent transparent` }} ></div>\n                                    <div style={{ border: `8px solid ${this.props.settings.windowPrimaryColor}`, borderColor: `${this.props.settings.windowPrimaryColor} transparent transparent transparent` }}></div>\n                                    <div style={{ border: `8px solid ${this.props.settings.windowPrimaryColor}`, borderColor: `${this.props.settings.windowPrimaryColor} transparent transparent transparent` }}></div>\n                                    <div style={{ border: `8px solid ${this.props.settings.windowPrimaryColor}`, borderColor: `${this.props.settings.windowPrimaryColor} transparent transparent transparent` }}></div>\n                                </div>\n\n                            </div>\n\n                            :\n\n                            this.props.reCAPTCHAData !== undefined ?\n\n                                <div className='ReCAPTCHA-Container' style={{ marginTop: '45px' }} >\n\n                                    <iframe ref={(iframe: HTMLIFrameElement) => { this.reCAPTCHAIframe = iframe; }} onLoad={this.onReCAPTCHALoaded.bind(this)} title='ReCAPTCHA' src={this.props.reCAPTCHAData.url} scrolling='no' style={{ overflow: 'auto', minWidth: '100%', width: '332px', border: 'none', marginTop: '-68px', marginLeft: '-28px', marginBottom: '-6px' }}></iframe>\n\n                                    <div className='Captcha'>\n                                        <p>Having troubles?</p>\n                                        <a href='#' onClick={this.onReCAPTCHAManualFix.bind(this)}>Click here to manually reset this captcha</a>\n                                    </div>\n\n                                </div>\n\n                                :\n\n                                <div className='Result-Container'>\n\n                                    {this.props.results.map((result: QuizletSet, index: number) =>\n\n                                        <div className='Result-Wrapper-Container'>\n\n                                            {\n                                                this.props.randomizedPromotion !== undefined && index === this.props.randomizedPromotion.index &&\n\n                                                <div className='Result'>\n\n                                                    <div className='Result-Title'>\n                                                        <h1 className='Result-Header' style={{ fontWeight: 600, color: this.props.settings.windowSecondaryColor }}>{this.props.randomizedPromotion.promotion.header}</h1>\n                                                        <button className='Result-Visit-Website-Button' style={{ fontWeight: 600, color: this.props.settings.windowSecondaryColor }} onClick={() => this.onVisitPromotionalWebsite(this.props.randomizedPromotion?.promotion as Promotion)}>{this.props.randomizedPromotion?.promotion?.goldPromotion ? 'Subscribe' : 'Visit Website'}</button>\n                                                    </div>\n\n                                                    <p className='Result-Answer' style={{ lineHeight: '1.20rem' }} >{this.props.randomizedPromotion.promotion.body}</p>\n\n                                                    <span className='Span'></span>\n\n                                                </div>\n                                            }\n\n                                            <div className='Result'>\n\n                                                <div className='Result-Title'>\n                                                    <h1 className='Result-Header' style={{ color: this.props.settings.windowSecondaryColor }}> Answer #{index + 1}</h1>\n                                                    <button className='Result-Visit-Website-Button' style={{ color: this.props.settings.windowSecondaryColor }} onClick={() => this.onVisitWebsiteClick(result as QuizletSet, index + 1)}>Visit Website</button>\n                                                </div>\n\n                                                <p style={{ lineHeight: '1.20rem' }} className='Result-Answer'>{result.answer}</p>\n\n                                                <span className='Span'></span>\n                                                <p className='Result-Confidence'>Confidence: {Math.round(result.confidence * 100)}%</p>\n\n                                            </div>\n\n                                        </div>\n\n                                    )}\n\n                                    {this.props.noResults === true ?\n\n                                        <div className='No-Results'>\n                                            <p>Not what you're looking for?</p>\n                                            {/* All in one line 'Try searching Google OR Report a problem */}\n\n                                            <span>\n                                                <a href='#' onClick={this.onTrySearchingWithGoogleClick.bind(this)}>Try searching Google</a>\n                                                 {' or '}\n                                                <a href='#' onClick={this.onReportAProblemClick.bind(this)}>report a problem</a>\n                                            </span>\n                                        </div>\n\n                                        : null\n                                    }\n\n                                </div>\n                    }\n                </div>\n            </div>\n        );\n    }\n\n}\n","import moment from 'moment';\n\nconst getFormattedRelativeDate = (dateTime: number): string => {\n\n    const date = new Date(dateTime);\n    const relativeTime: string = moment(dateTime).fromNow();\n\n    // If time is in future don't display.\n    if (dateTime - date.getTime() < 0) {\n        return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;\n    }\n\n    return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()} (${relativeTime})`;\n};\n\nconst getCurrentTimeEpoch = (): number => {\n    return Math.floor(new Date().getTime() / 1000);\n};\n\nexport const Time = { getFormattedRelativeDate, getCurrentTimeEpoch };","import './Settings.scss';\n\nimport { Component } from 'react';\nimport { Settings } from '../../types/settings';\nimport { User } from '../../types/user';\n\nimport { Time } from '../../util/Time';\n\ntype SettingsComponentProperties = {\n    user: User | undefined;\n    settings: Settings;\n    display: boolean;\n    displayGoldPromotion: boolean;\n    onFreeTrial(): Promise<any>;\n    onSubscribe(): void;\n    onLoginOrSignUp(): void;\n    onLogout(): void;\n    onDiscordClick(): void;\n    onDonateClick(): void;\n    onClose: (confidenceThreshold: number, autoSort: boolean, autoClear: boolean) => void;\n};\n\ntype SettingsComponentState = {\n    displayFreeTrial: boolean;\n    displayConfirmLogout: boolean;\n    displayConfirmFreeTrial: boolean;\n    isFreeTrialLoading: boolean;\n    settings: Settings;\n};\n\nexport default class SettingsComponent extends Component<SettingsComponentProperties, SettingsComponentState> {\n\n    private static readonly DONATION_URL: string = 'https://www.quizzardapp.com/api/v2/extension/donation';\n    private static readonly JOIN_DISCORD_URL: string = 'https://www.quizzardapp.com/join-discord';\n\n    private static readonly MANAGE_QUIZZARD_GOLD_SUBSCRIPTION_URL: string = 'https://www.quizzardapp.com/manage-subscription';\n\n    private inputElement: HTMLInputElement | undefined;\n\n    constructor(props: any) {\n\n        super(props);\n\n        let displayFreeTrial: boolean = false;\n\n        if (props.displayGoldPromotion === true) {\n            displayFreeTrial = true;\n        }\n\n        this.state = { displayFreeTrial, displayConfirmLogout: false, displayConfirmFreeTrial: false, settings: this.props.settings, isFreeTrialLoading: false };\n    }\n\n    componentWillReceiveProps(newProps: any) {\n        this.onInputChange();\n        this.setState({ settings: newProps.settings, displayFreeTrial: newProps.displayGoldPromotion });\n    }\n\n    public onConfidenceThresholdChange(event: any): void {\n\n        const settings: Settings = this.state.settings;\n        settings.confidenceThreshold = parseInt(event.target.value, 10);\n\n        this.setState({ settings });\n    }\n\n    public onAutomaticallySortChange(): void {\n\n        const settings: Settings = this.state.settings;\n        settings.autoSort = !settings.autoSort;\n\n        this.setState({ settings });\n    }\n\n    public onAutomaticallyClearChange(): void {\n\n        const settings: Settings = this.state.settings;\n        settings.autoClear = !settings.autoClear;\n\n        this.setState({ settings });\n    }\n\n    private onInputChange(): void {\n\n        if (this.inputElement === undefined || this.inputElement === null) {\n            return;\n        }\n\n        const value: number = parseInt((this.inputElement as any).value, 10) || 0;\n        const min: number = parseInt((this.inputElement as any).min, 10);\n        const max: number = parseInt((this.inputElement as any).max, 10);\n        const ratioValue = (value - min) / (max - min) * 100;\n\n        (this.inputElement as any).style.background = `linear-gradient(to right, #5A8FFA 0%, #5A8FFA ${ratioValue}%, #F2F2F2 ${ratioValue}%, #F2F2F2 100%)`;\n    }\n\n    public onSubscribeClick(): void {\n\n        if (this.props.user === undefined) {\n            this.setState({ displayFreeTrial: false, displayConfirmFreeTrial: false });\n            this.props.onLoginOrSignUp();\n            return;\n        }\n\n        this.props.onSubscribe();\n    }\n\n    public onLoginOrSignUpClick(): void {\n        this.props.onLoginOrSignUp();\n    }\n\n    public onConfirmLogoutClick(): void {\n        this.setState({ displayConfirmLogout: true });\n    }\n\n    public onLogoutClick(): void {\n        this.setState({ displayConfirmLogout: false });\n        this.props.onLogout();\n    }\n\n    private onBackToSettingsClick(): void {\n\n        /*\n         * 2023-03-21 - Workaround to update the slider if the user\n         * clicks the back button.\n         */\n\n        setTimeout(() => this.onInputChange(), 25);\n        this.setState({ displayFreeTrial: false, displayConfirmLogout: false, displayConfirmFreeTrial: false, isFreeTrialLoading: false });\n    }\n\n    private onCloseClick(): void {\n        this.setState({ displayFreeTrial: false, displayConfirmLogout: false, displayConfirmFreeTrial: false, isFreeTrialLoading: false });\n        this.props.onClose(this.state.settings.confidenceThreshold, this.state.settings.autoSort, this.state.settings.autoClear);\n    }\n\n    private onDiscordClick(): void {\n        this.props.onDiscordClick();\n        window.open(SettingsComponent.JOIN_DISCORD_URL, '_blank');\n    }\n\n    private onDonateClick(): void {\n        this.props.onDonateClick();\n        window.open(SettingsComponent.DONATION_URL, '_blank');\n    }\n\n    public render() {\n\n        return (\n\n            <div style={{ display: this.props.display === true ? 'flex' : 'none' }} className='popup-container Fade-In'>\n\n                <style>\n                    {`\n                          .input-slider-confidence::after {\n                            content: '${this.state.settings.confidenceThreshold}%';\n                            color: #576574;\n                            text-align: right;\n                            position: absolute;\n                            right: 100px;\n                            top: 70px;\n                            opacity: 0.4;\n                          }\n\n                    `}\n\n\n                </style>\n\n                {\n                    this.state.displayFreeTrial === true && this.state.displayConfirmLogout === false ?\n\n                        <div id='Settings' className='Settings-Container' >\n\n                            <button className='Popup-Back-Button' onClick={this.onBackToSettingsClick.bind(this)}><img src='img/back.svg' alt='Back' /></button>\n                            <button className='Settings-Close-Button' onClick={this.onCloseClick.bind(this)}><img src='img/close.svg' alt='Close' /></button>\n\n                            <div className='Free-Trial-Container'>\n\n                                <div className='Free-Trial-Body'>\n                                    <img src='img/quizzard-gold.png' alt='quizzard-gold' />\n                                    <div className='Free-Trial-Body-Content'>\n                                        <h1>Quizzard Gold</h1>\n                                        <p>Double your search speed, accuracy, and bypass 'I am not a robot' reCAPTCHA!</p>\n                                    </div>\n                                </div>\n                                <div className=\"Free-Trial-Button-Container\">\n                                    <button tabIndex={5} className='Subscribe-Button' onClick={this.onSubscribeClick.bind(this)}>Subscribe</button>\n                                </div>\n                            </div>\n\n                        </div>\n\n                        : this.state.displayFreeTrial === false && this.state.displayConfirmLogout === true ?\n                            <div id='Settings' className='Settings-Container' >\n\n                                <button className='Popup-Back-Button' onClick={this.onBackToSettingsClick.bind(this)}><img src='img/back.svg' alt='Back' /></button>\n                                <button className='Settings-Close-Button' onClick={this.onCloseClick.bind(this)}><img src='img/close.svg' alt='Close' /></button>\n\n                                <div className='Logout-Container'>\n                                    <h1>Are you sure you want to logout?</h1>\n                                    {\n                                        this.props.user !== undefined &&\n                                        <div className='User-Data-Container'>\n                                            <h1>User ID: {this.props.user.userID}</h1>\n                                            <h1>Email:  {this.props.user.email}</h1>\n                                        </div>\n                                    }\n                                    <button tabIndex={4} className='Logout-Button' onClick={this.onLogoutClick.bind(this)}>Logout</button>\n                                </div>\n                            </div>\n                            :\n                            <div id='Settings' className='Settings-Container' >\n\n                                <button className='Settings-Close-Button' onClick={this.props.onClose.bind(null, this.state.settings.confidenceThreshold, this.state.settings.autoSort, this.state.settings.autoClear)}><img src='img/close.svg' alt='Close' /></button>\n\n                                <div className='slider-container'>\n                                    <h1>Confidence Threshold</h1>\n                                    <input ref={(input: HTMLInputElement) => { this.inputElement = input; }} className='input-slider-confidence input-hover' type='range' min='1' max='100' value={this.state.settings.confidenceThreshold} onInput={this.onInputChange.bind(this)} onChange={this.onConfidenceThresholdChange.bind(this)} />\n                                </div>\n\n                                <div className='toggle-container'>\n\n                                    <div className='item'>\n                                        <p>Automatically Sort</p>\n                                        <span></span>\n                                        <label className='switch'>\n                                            <input className='input-hover' type='checkbox' value={this.state.settings.autoSort as any} onChange={this.onAutomaticallySortChange.bind(this)} checked={this.state.settings.autoSort} />\n                                            <div className='Slider'></div>\n                                        </label>\n                                    </div>\n\n                                    <div className='item'>\n                                        <p>Automatically Clear</p>\n                                        <span></span>\n                                        <label className='switch'>\n                                            <input className='input-hover' type='checkbox' value={this.state.settings.autoClear as any} onChange={this.onAutomaticallyClearChange.bind(this)} checked={this.state.settings.autoClear} />\n                                            <div className='Slider'></div>\n                                        </label>\n                                    </div>\n\n                                    <div className='item'>\n                                        <p>Quizzard Gold</p>\n                                        <span></span>\n                                        <div className='Quizzard-Gold-Container'>\n                                            {\n                                                this.props.user?.isGoldSearch === true && this.props.user?.goldSearchEndTimeEpoch !== undefined ?\n                                                    <>\n                                                        {\n                                                            this.props.user.isRecurringSubscription === true ?\n                                                                <>\n                                                                    <div className='Renew-Subscription-Container'>\n                                                                        <p className='Quizzard-Gold-Expiration-Label'>Renews {Time.getFormattedRelativeDate(this.props.user.goldSearchEndTimeEpoch * 1000)}</p>\n                                                                        <button className='Manage-Subscription-Button' onClick={SettingsComponent.onManageSubscriptionClick}>Manage Subscription</button>\n                                                                    </div>\n                                                                </>\n                                                                :\n                                                                <p className='Quizzard-Gold-Expiration-Label'>Expires {Time.getFormattedRelativeDate(this.props.user.goldSearchEndTimeEpoch * 1000)}</p>\n                                                        }\n                                                    </>\n                                                    :\n                                                    <>\n                                                        <button className='Subscribe-Button' onClick={this.onSubscribeClick.bind(this)}>Subscribe</button>\n                                                        {/* <button disabled={this.props.user !== undefined && this.props.user.isFreeTrialActivated === true} className='Trial-Button' onClick={this.onFreeTrialClick.bind(this)}>Free Trial</button> */}\n                                                    </>\n                                            }\n                                        </div>\n\n                                    </div>\n\n                                </div>\n\n                                <div className='button-container'>\n\n                                    <button onClick={this.onDonateClick.bind(this)}>\n                                        <img className='button-icon' src='img/donate-icon.png' alt='Donate' />\n                                        DONATE\n                                    </button>\n\n                                    <button onClick={this.onDiscordClick.bind(this)} >\n                                        <img className='button-icon' src='img/discord.png' alt='Discord' />\n                                        DISCORD\n                                    </button>\n\n                                    {\n                                        this.props.user === undefined ?\n\n                                            <button onClick={this.onLoginOrSignUpClick.bind(this)} >\n                                                <img className='button-icon' src='img/login.svg' alt='Login/Sign-Up' />\n                                                LOGIN/SIGN-UP\n                                            </button>\n                                            :\n                                            <button onClick={this.onConfirmLogoutClick.bind(this)} >\n                                                <img className='button-icon' src='img/logout.svg' alt='Logout' />\n                                                LOGOUT\n                                            </button>\n                                    }\n\n                                </div>\n\n                            </div>\n\n                }\n            </div>\n\n        );\n    }\n\n    private static onManageSubscriptionClick(): void {\n        window.open(SettingsComponent.MANAGE_QUIZZARD_GOLD_SUBSCRIPTION_URL, '_blank');\n    }\n\n}\n","import './TermsAndConditions.scss';\nimport { Component } from 'react';\n\nexport default class TermsAndConditions extends Component<{ display: boolean, onIAgreeClick: (amountScrolled: number) => void }, { amountScrolled: number }> {\n\n    private tosInfoContainer: HTMLDivElement | null;\n\n    public constructor(props: any) {\n        super(props);\n        this.tosInfoContainer = null;\n        this.state = { amountScrolled: 0 };\n    }\n\n    componentDidMount() {\n\n        if (this.tosInfoContainer) {\n            this.tosInfoContainer.addEventListener('scroll', this.handleScroll);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.tosInfoContainer) {\n            this.tosInfoContainer.removeEventListener('scroll', this.handleScroll);\n        }\n    }\n\n    handleScroll = () => {\n        if (this.tosInfoContainer) {\n            const { scrollTop, scrollHeight, clientHeight } = this.tosInfoContainer;\n            const scrolled: number = (scrollTop / (scrollHeight - clientHeight)) * 100;\n            const amountScrolled: number = Math.round(scrolled * 100) / 100;\n            this.setState({ amountScrolled });\n        }\n    }\n\n    public render() {\n\n        return (\n            <div style={{ display: this.props.display === true ? 'flex' : 'none' }} className='Popup-Container Fade-In'>\n\n                <div className='Tos-Wrapper-Container' >\n                    <div className='Tos-Container' >\n                        <h1>Terms and Conditions</h1>\n                        <div ref={(div) => { this.tosInfoContainer = div; }} onScroll={this.handleScroll} className='Tos-Info-Container'>\n\n                            <h2>General Use</h2>\n                            <p>\n                                Quizzard is a Google Chrome extension search tool that is solely intended to assist users in rapidly finding Quizlet-hosted question sets.\n                                It is strictly prohibited to use this tool to facilitate any form of academic misconduct on assessed material as follows, but not limited to:\n                                quizzes, tests, exams, and alike.\n                            </p>\n\n                            <h2>DISCLAIMER</h2>\n                            <p>\n                                THE APPLICATION IS PROVIDED ON AN AS-IS AND AS-AVAILABLE BASIS. YOU AGREE THAT YOUR USE OF THE APPLICATION SERVICES\n                                WILL BE AT YOUR SOLE RISK. TO THE FULLEST EXTENT PERMITTED BY LAW, WE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n                                IN CONNECTION WITH THE APPLICATION AND YOUR USE THEREOF, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\n                                MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT. WE MAKE NO WARRANTIES OR REPRESENTATIONS\n                                ABOUT THE ACCURACY OR COMPLETENESS OF THE APPLICATION’S CONTENT OR THE CONTENT OF ANY WEBSITES LINKED TO THIS\n                                APPLICATION AND WE WILL ASSUME NO LIABILITY OR RESPONSIBILITY FOR ANY (1) ERRORS, MISTAKES, OR INACCURACIES OF CONTENT\n                                AND MATERIALS, (2) PERSONAL INJURY OR PROPERTY DAMAGE, OF ANY NATURE WHATSOEVER, RESULTING FROM YOUR ACCESS TO\n                                AND USE OF THE APPLICATION, (3) ANY UNAUTHORIZED ACCESS TO OR USE OF OUR SECURE SERVERS AND/OR ANY AND ALL PERSONAL\n                                INFORMATION AND/OR FINANCIAL INFORMATION STORED THEREIN, (4) ANY INTERRUPTION OR CESSATION OF TRANSMISSION TO\n                                OR FROM THE APPLICATION, (5) ANY BUGS, VIRUSES, TROJAN HORSES, OR THE LIKE WHICH MAY BE TRANSMITTED TO OR\n                                THROUGH THE APPLICATION BY ANY THIRD PARTY, AND/OR (6) ANY ERRORS OR OMISSIONS IN ANY CONTENT AND MATERIALS\n                                OR FOR ANY LOSS OR DAMAGE OF ANY KIND INCURRED AS A RESULT OF THE USE OF ANY CONTENT POSTED, TRANSMITTED, OR\n                                OTHERWISE MADE AVAILABLE VIA THE APPLICATION. WE DO NOT WARRANT, ENDORSE, GUARANTEE, OR ASSUME RESPONSIBILITY\n                                FOR ANY PRODUCT OR SERVICE ADVERTISED OR OFFERED BY A THIRD PARTY THROUGH THE APPLICATION, ANY HYPERLINKED\n                                WEBSITE, OR ANY WEBSITE OR MOBILE APPLICATION FEATURED IN ANY BANNER OR OTHER ADVERTISING, AND WE WILL NOT BE\n                                A PARTY TO OR IN ANY WAY BE RESPONSIBLE FOR MONITORING ANY TRANSACTION BETWEEN YOU AND ANY THIRD-PARTY PROVIDERS\n                                OF PRODUCTS OR SERVICES. AS WITH THE PURCHASE OF A PRODUCT OR SERVICE THROUGH ANY MEDIUM OR IN ANY ENVIRONMENT,\n                                YOU SHOULD USE YOUR BEST JUDGMENT AND EXERCISE CAUTION WHERE APPROPRIATE.\n                            </p>\n\n                            <h2>LIMITATIONS OF LIABILITY</h2>\n                            <p>\n                                IN NO EVENT WILL WE OR OUR DIRECTORS, EMPLOYEES, OR AGENTS BE LIABLE TO YOU OR ANY THIRD PARTY FOR ANY DIRECT,\n                                INDIRECT, CONSEQUENTIAL, EXEMPLARY, INCIDENTAL, SPECIAL, OR PUNITIVE DAMAGES, INCLUDING LOST PROFIT, LOST REVENUE,\n                                LOSS OF DATA, OR OTHER DAMAGES ARISING FROM YOUR USE OF THE APPLICATION, EVEN IF WE HAVE BEEN ADVISED\n                                OF THE POSSIBILITY OF SUCH DAMAGES.\n                            </p>\n\n                        </div>\n\n                        <button className='Tos-Button' onClick={this.props.onIAgreeClick.bind(null, this.state.amountScrolled)} >I Agree</button>\n\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n\n}\n","\nconst createPopup = (url: string, width: number = 450, height: number = 600): void => {\n\n    /*\n     * 2023-03-25: If we display the URL in a popup then we have to handle\n     * the popup closing after the extension is closed. For the time being\n     * I think it's most approrpiate to just open the URL in a new tab.\n     * Opening the URL in a new tab will automatically close the extension\n     * ensuring that the state is reset upon successful login.\n     *\n     * If we can figure out how to automatically close the popup after the\n     * authentication is complete then we can change this to open the URL\n     * in a popup.\n     *\n     * // const left: number = (screen.width / 2) - (width / 2);\n     * // const top: number = (screen.height / 2) - (height / 2);\n     * //\n     * // const data: chrome.windows.CreateData = { url, type: 'normal', width, height, left, top };\n     * //\n     * // chrome.windows.create(data).then((window: chrome.windows.Window) => { });\n     */\n\n    window.open(url, '_blank');\n};\n\nexport { createPopup };\n","export default class BrowserStorage {\n\n    public static get(keys: string | string[] | { [key: string]: any } | null, callback: (items: { [key: string]: any; } | any) => void): void {\n        chrome.storage.local.get(keys, callback);\n    }\n\n}\n","import './Auth.scss';\nimport { Component } from 'react';\nimport { RequestError, ActivateAccountResponse, LoginResponse } from '../../types/authentication';\nimport { createPopup } from '../../util/Window';\nimport { User } from '../../types/user';\n\nimport BrowserStorage from '../../browser/BrowserStorage';\n\nenum AuthType {\n    NONE,\n    LOGIN,\n    ACTIVATE_USER,\n    SIGN_UP,\n    FORGOT_PASSWORD,\n    FORGOT_PASSWORD_CONFIRMED,\n}\n\ntype AuthComponentProperties = {\n    display: boolean;\n    onResetSignUpSession: () => void;\n    onPopupClosed: (userData?: User) => void;\n    onForgotPassword: (email: string) => Promise<void>\n    onSignUp: (email: string, password: string, rememberMe: boolean) => Promise<RequestError | undefined>;\n    onLogin: (email: string, password: string, rememberMe: boolean) => Promise<LoginResponse>;\n    onActivate: (email: string, activationCode: string) => Promise<ActivateAccountResponse>;\n};\n\ntype AuthComponentState = {\n    authType: AuthType;\n    email: string;\n    password: string;\n    activationCode: string;\n    rememberMe: boolean;\n    error: RequestError | undefined;\n    isLoading: boolean;\n};\n\nconst focusIfNotNull = (element: HTMLElement | null): void => {\n\n    if (element == null) {\n        return;\n    }\n\n    element.focus();\n};\n\nconst focusAfterMS = (element: HTMLElement | null, ms: number = 0): void => {\n    setTimeout(() => focusIfNotNull(element), ms);\n};\n\nconst WEIRD_RESPONSE_ERROR: number = 679;\n\nconst AUTH_TYPE_MAP: Record<AuthType, string> = {\n    [AuthType.NONE]: '',\n    [AuthType.LOGIN]: 'Login',\n    [AuthType.ACTIVATE_USER]: 'Activate Account',\n    [AuthType.SIGN_UP]: 'Sign Up',\n    [AuthType.FORGOT_PASSWORD]: 'Forgot Password',\n    [AuthType.FORGOT_PASSWORD_CONFIRMED]: 'Forgot Password'\n};\n\nexport default class Auth extends Component<AuthComponentProperties, AuthComponentState> {\n\n    public emailInputElement: HTMLInputElement | null;\n    public passwordInputElement: HTMLInputElement | null;\n    public errorButtonElement: HTMLButtonElement | null;\n\n    public constructor(props: AuthComponentProperties) {\n        super(props);\n\n        this.emailInputElement = null;\n        this.passwordInputElement = null;\n        this.errorButtonElement = null;\n\n        BrowserStorage.get(['isActivationRequired', 'email', 'rememberMe'], ({ isActivationRequired, email, rememberMe }) => {\n\n            let authType: AuthType = AuthType.SIGN_UP;\n\n            if (isActivationRequired === true) {\n                authType = AuthType.ACTIVATE_USER;\n            }\n\n            if (rememberMe === true) {\n                this.setState({ authType, email, rememberMe: true });\n                return;\n            }\n\n            this.setState({ authType, email: '', rememberMe: false });\n        });\n\n        this.state = { authType: AuthType.SIGN_UP, email: '', password: '', activationCode: '', rememberMe: false, error: undefined, isLoading: false };\n    }\n\n    public onPopupClosed(): void {\n        this.setState({ password: '', activationCode: '' });\n        this.props.onPopupClosed();\n    }\n\n    public onLoginClick(): void {\n\n        // this.setState({ isLoading: true });\n        // setTimeout(() => this.setState({ isLoading: false }), 5000);\n        // return;\n\n        const email: string = this.state.email.trim();\n        const password = this.state.password.trim();\n        const rememberMe: boolean = this.state.rememberMe;\n\n        if (email.length === 0 && password.length === 0) {\n            return;\n        }\n\n        if (email.length === 0 && password.length !== 0) {\n            focusIfNotNull(this.emailInputElement);\n            return;\n        }\n\n        if (password.length === 0 && email.length !== 0) {\n            focusIfNotNull(this.passwordInputElement);\n            return;\n        }\n\n        this.setState({ isLoading: true });\n        this.props.onLogin(email, password, rememberMe).then((loginResponse: LoginResponse) => {\n\n            if (loginResponse === undefined) {\n                return;\n            }\n\n            if (loginResponse.error !== undefined) {\n                this.setState({ error: loginResponse.error });\n                focusAfterMS(this.errorButtonElement, 500);\n                return;\n            }\n\n            if (loginResponse.user === undefined) {\n                this.setState({ error: { code: WEIRD_RESPONSE_ERROR, message: 'An unknown error occured during login! Please try-again.' } });\n                return;\n            }\n\n            this.setState({ password: '', activationCode: '' });\n            this.props.onPopupClosed({ email, userID: loginResponse.user.userID, isGoldSearch: loginResponse.user.isGoldSearch, isFreeTrialActivated: loginResponse.user.isFreeTrialActivated, goldSearchEndTimeEpoch: loginResponse.user.goldSearchEndTimeEpoch });\n\n        }).finally(() => {\n            this.setState({ isLoading: false });\n        });\n\n    }\n\n    public onSignUpClick(): void {\n\n        const email: string = this.state.email.trim();\n        const password = this.state.password.trim();\n        const rememberMe: boolean = this.state.rememberMe;\n\n        if (email.length === 0 && password.length === 0) {\n            return;\n        }\n\n        if (email.length === 0 && password.length !== 0) {\n            focusIfNotNull(this.emailInputElement);\n            return;\n        }\n\n        if (password.length === 0 && email.length !== 0) {\n            focusIfNotNull(this.passwordInputElement);\n            return;\n        }\n\n        this.setState({ isLoading: true });\n        this.props.onSignUp(email, password, rememberMe).then((error: RequestError | undefined) => {\n\n            if (error !== undefined) {\n                this.setState({ error });\n                focusAfterMS(this.errorButtonElement, 500);\n                return;\n            }\n\n            this.setState({ authType: AuthType.ACTIVATE_USER });\n\n        }).finally(() => {\n            this.setState({ isLoading: false });\n        });\n    }\n\n    public onActivateClick(): void {\n\n        const activationCode: string = this.state.activationCode.trim();\n        const email: string = this.state.email.trim();\n\n        if (activationCode.length === 0) {\n            return;\n        }\n\n        this.setState({ isLoading: true });\n        this.props.onActivate(email, activationCode).then((activateAccountResponse: ActivateAccountResponse) => {\n\n            if (activateAccountResponse.error !== undefined) {\n                this.setState({ error: activateAccountResponse.error });\n                return;\n            }\n\n            if (activateAccountResponse.userID === undefined) {\n                this.setState({ error: { code: WEIRD_RESPONSE_ERROR, message: 'An unknown error occured during activation! Please try-again.' } });\n                return;\n            }\n\n            this.setState({ password: '', activationCode: '' });\n            this.props.onPopupClosed({ email, userID: activateAccountResponse.userID, isGoldSearch: false, isFreeTrialActivated: false, goldSearchEndTimeEpoch: undefined });\n\n        }).finally(() => {\n            this.setState({ isLoading: false });\n        });\n    }\n\n    public OnForgotPasswordConfirmedGoBackClick(): void {\n        this.setState({ authType: AuthType.LOGIN });\n    }\n\n    public onForgotPasswordClick(): void {\n\n        const email: string = this.state.email.trim();\n\n        if (email.length === 0) {\n            focusIfNotNull(this.emailInputElement);\n            return;\n        }\n\n        this.setState({ isLoading: true });\n        this.props.onForgotPassword(email).finally(() => this.setState({ isLoading: false, authType: AuthType.FORGOT_PASSWORD_CONFIRMED }));\n    }\n\n    public onNotNowClick(): void {\n        this.props.onPopupClosed();\n    }\n\n    public onForgotPasswordViewClick(): void {\n        this.setState({ authType: AuthType.FORGOT_PASSWORD });\n    }\n\n    public onViewSignUpClick(): void {\n        this.setState({ authType: AuthType.SIGN_UP });\n    }\n\n    public onViewLoginClick(): void {\n        this.setState({ authType: AuthType.LOGIN });\n    }\n\n    public onErrorGoBackClick(): void {\n        this.setState({ error: undefined });\n    }\n\n    public onBackToSignUp(): void {\n        this.props.onResetSignUpSession();\n        this.setState({ authType: AuthType.SIGN_UP });\n    }\n\n    public onEmailInputChanged(event: React.ChangeEvent<HTMLInputElement>): void {\n        this.setState({ email: event.target.value });\n    }\n\n    public onPasswordInputChanged(event: React.ChangeEvent<HTMLInputElement>): void {\n        this.setState({ password: event.target.value });\n    }\n\n    public onActivationInputChanged(event: React.ChangeEvent<HTMLInputElement>): void {\n        this.setState({ activationCode: event.target.value });\n    }\n\n    public onRememberMeChanged(event: React.ChangeEvent<HTMLInputElement>): void {\n        this.setState({ rememberMe: event.target.checked });\n    }\n\n    public onEnterKeyPressed(event: React.KeyboardEvent<HTMLInputElement>): void {\n\n        if (event.key !== 'Enter') {\n            return;\n        }\n\n        switch (this.state.authType) {\n\n            case AuthType.LOGIN: {\n                this.onLoginClick();\n                break;\n            }\n\n            case AuthType.SIGN_UP: {\n                this.onSignUpClick();\n                break;\n            }\n\n            case AuthType.ACTIVATE_USER: {\n                this.onActivateClick();\n                break;\n            }\n        }\n    }\n\n    public render() {\n\n        return (\n            <div style={{ display: this.props.display === true ? 'flex' : 'none' }} className='Popup-Container Fade-In'>\n\n                <div className='Auth-Wrapper-Container'>\n\n                    {\n                        this.state.isLoading === false ?\n                            <div className='Auth-Container'>\n\n                                <div className='Header-Input-Container'>\n\n                                    {\n                                        this.state.error !== undefined &&\n                                        <>\n                                            <span className='Error-Code-Label'>E{this.state.error.code.toString().padStart(4, '0')}</span>\n                                            <span className='Flex-Region'></span>\n                                        </>\n                                    }\n\n                                    {\n                                        this.state.error === undefined && this.state.authType === AuthType.ACTIVATE_USER &&\n                                        <button className='Popup-Back-Button' onClick={this.onBackToSignUp.bind(this)}><img src='img/back.svg' alt='Back' /></button>\n                                    }\n\n                                    <button onClick={this.onPopupClosed.bind(this)}>\n                                        <img src='./img/close.svg' alt='Close'></img>\n                                    </button>\n                                </div>\n\n                                {\n                                    this.state.error === undefined ?\n                                        <>\n                                            <div className='Auth-Logo-Container'>\n                                                <h1>{AUTH_TYPE_MAP[this.state.authType]}</h1>\n                                            </div>\n\n                                            <div className='Auth-Sign-In-Container'>\n\n                                                {\n                                                    this.state.authType === AuthType.ACTIVATE_USER ?\n                                                        <p className='Auth-Activate-Message'>Please enter the verification code sent to your email. If you don't see the email, please check your spam folder. If you did not receive an email, please go back and try again.</p>\n                                                    :\n                                                    this.state.authType === AuthType.FORGOT_PASSWORD ?\n                                                        <p className='Auth-Forgot-Password-Message'>Enter the email associated with your Quizzard account and we'll send you instructions on how to reset your password.</p>\n                                                    :\n                                                    this.state.authType === AuthType.FORGOT_PASSWORD_CONFIRMED ?\n                                                    <p className='Auth-Forgot-Password-Message'>An email with instructions on how to reset your password was just sent to your inbox.</p>\n                                                    :\n                                                    <></>\n                                                }\n\n                                                <div className='Auth-Sign-In-Input-Container'>\n                                                    {\n                                                        (this.state.authType === AuthType.LOGIN || this.state.authType === AuthType.SIGN_UP) ?\n                                                            <>\n                                                                <input\n                                                                    ref={(input) => this.emailInputElement = input}\n                                                                    tabIndex={1} value={this.state.email}\n                                                                    onChange={this.onEmailInputChanged.bind(this)}\n                                                                    onKeyDown={this.onEnterKeyPressed.bind(this)}\n                                                                    className='Auth-Sign-In-Input'\n                                                                    type='text'\n                                                                    placeholder='Email'\n                                                                />\n\n                                                                <input\n                                                                    ref={(input) => this.passwordInputElement = input}\n                                                                    tabIndex={2}\n                                                                    value={this.state.password}\n                                                                    onChange={this.onPasswordInputChanged.bind(this)}\n                                                                    onKeyDown={this.onEnterKeyPressed.bind(this)}\n                                                                    className='Auth-Sign-In-Input'\n                                                                    type='password'\n                                                                    placeholder='Password'\n                                                                />\n\n                                                                <div className='Auth-Sign-In-Options-Container'>\n\n                                                                    <div className='Auth-Sign-In-Remember-Me-Container'>\n                                                                        <input\n                                                                            tabIndex={3}\n                                                                            checked={this.state.rememberMe}\n                                                                            onChange={this.onRememberMeChanged.bind(this)}\n                                                                            type='checkbox'\n                                                                            id='remember-me'\n                                                                            name='remember-me'\n                                                                        />\n                                                                        <label htmlFor='remember-me'>Remember me</label>\n                                                                    </div>\n                                                                    {\n                                                                        this.state.authType === AuthType.LOGIN &&\n                                                                        <a tabIndex={4} onClick={this.onForgotPasswordViewClick.bind(this)}>Forgot password?</a>\n                                                                    }\n                                                                </div>\n\n                                                            </>\n                                                            : this.state.authType === AuthType.FORGOT_PASSWORD ?\n\n                                                                <input\n                                                                    ref={(input) => this.emailInputElement = input}\n                                                                    tabIndex={1}\n                                                                    value={this.state.email}\n                                                                    onChange={this.onEmailInputChanged.bind(this)}\n                                                                    onKeyDown={this.onEnterKeyPressed.bind(this)}\n                                                                    className='Auth-Sign-In-Input'\n                                                                    type='text'\n                                                                    placeholder='Email'\n                                                                />\n\n                                                                : this.state.authType === AuthType.ACTIVATE_USER ?\n\n                                                                    <input\n                                                                        tabIndex={1}\n                                                                        value={this.state.activationCode}\n                                                                        onChange={this.onActivationInputChanged.bind(this)}\n                                                                        onKeyDown={this.onEnterKeyPressed.bind(this)}\n                                                                        className='Auth-Sign-In-Input'\n                                                                        type='text'\n                                                                        placeholder='Activation Code'\n                                                                    />\n                                                                    : this.state.authType === AuthType.FORGOT_PASSWORD_CONFIRMED ?\n                                                                    <img src='./img/success.png' alt='Success' className='Forgot-Password-Success-Icon'></img>\n                                                                    :\n                                                                    <></>\n                                                    }\n                                                    <div className='Auth-Sign-In-Button-Container'>\n                                                        {\n                                                            this.state.authType === AuthType.LOGIN ?\n                                                                <button tabIndex={5} className='Auth-Sign-In-Button' onClick={this.onLoginClick.bind(this)}>Login</button>\n                                                                :\n                                                                this.state.authType === AuthType.SIGN_UP ?\n                                                                    <>\n                                                                        <button tabIndex={4} className='Auth-Sign-In-Button' onClick={this.onSignUpClick.bind(this)}>Sign Up</button>\n                                                                        <button tabIndex={5} className='Auth-Sign-In-Later-Button' onClick={this.onNotNowClick.bind(this)}>Not Now</button>\n\n                                                                    </>\n                                                                    :\n                                                                    this.state.authType === AuthType.FORGOT_PASSWORD ?\n                                                                        <button tabIndex={2} className='Auth-Sign-In-Button' onClick={this.onForgotPasswordClick.bind(this)}>Submit</button>\n                                                                        :\n                                                                        this.state.authType === AuthType.ACTIVATE_USER ?\n                                                                            <button tabIndex={2} className='Auth-Sign-In-Button' onClick={this.onActivateClick.bind(this)}>Activate</button>\n                                                                            :\n                                                                            this.state.authType === AuthType.FORGOT_PASSWORD_CONFIRMED ?\n                                                                            <button tabIndex={2} className='Auth-Sign-In-Button' onClick={this.OnForgotPasswordConfirmedGoBackClick.bind(this)}>Go Back</button>\n                                                                            :\n                                                                            <></>\n                                                        }\n                                                    </div>\n\n\n\n                                                    {\n                                                        (this.state.authType === AuthType.LOGIN || this.state.authType === AuthType.SIGN_UP) &&\n                                                            <>\n                                                                <div style={{ width: '65%', borderBottom: '1px solid #ccc', textAlign: 'center' }}>\n                                                                    <span style={{ fontSize: '0.75rem', backgroundColor: 'white', padding: '0 10px', position: 'relative', top: '8px' }}>\n                                                                        OR\n                                                                    </span>\n                                                                </div>\n\n                                                                <div className='Auth-Alternative-Sign-In-Container'>\n                                                                    <button className='Auth-Alternative-Sign-In-Button' onClick={Auth.onGoogleSignInClick}>\n                                                                        <img src='./img/google-sign-in.png' alt='Google' />\n                                                                        Google\n                                                                    </button>\n                                                                    <button className='Auth-Alternative-Sign-In-Button' onClick={Auth.onAppleSignInClick}>\n                                                                        <img src='./img/apple-sign-in.png' alt='Apple' />\n                                                                        Apple\n                                                                    </button>\n                                                                </div>\n                                                            </>\n                                                    }\n\n\n                                                    {\n                                                        (this.state.authType === AuthType.LOGIN) &&\n                                                        <p>Don't have an account? <a tabIndex={6} onClick={this.onViewSignUpClick.bind(this)}>Sign up</a></p>\n                                                    }\n                                                    {\n                                                        (this.state.authType === AuthType.SIGN_UP || this.state.authType === AuthType.FORGOT_PASSWORD) &&\n                                                        <p>Already have an account? <a tabIndex={6} onClick={this.onViewLoginClick.bind(this)}>Login</a></p>\n                                                    }\n\n                                                </div>\n                                            </div>\n                                        </>\n                                        :\n                                        <>\n\n                                            <div className='Auth-Error-Container'>\n\n                                                <h1>{this.state.error.message}</h1>\n\n                                                <div>\n                                                    <img src='./img/error.svg' alt='Error'></img>\n                                                </div>\n\n                                                <div className='Auth-Sign-In-Input-Container'>\n                                                    {\n                                                        <div className='Auth-Error-Button-Container'>\n                                                            <button id='btnError' ref={(btnError) => { this.errorButtonElement = btnError; }} className='Auth-Error-Button' onClick={this.onErrorGoBackClick.bind(this)}>Go Back</button>\n                                                        </div>\n                                                    }\n                                                </div>\n                                            </div>\n\n                                        </>\n                                }\n                            </div>\n                            :\n                            <div style={{ height: '235px' }} className='Auth-Container'>\n                                <div className='Auth-Loading-Container'>\n                                    <div style={{ width: '100px', height: '100px' }} className='Lds-Ring'>\n                                        <div style={{ width: '84px', height: '84px', border: `8px solid #54a0fc`, borderColor: `#54a0fc transparent transparent transparent` }} ></div>\n                                        <div style={{ width: '84px', height: '84px', border: `8px solid #54a0fc`, borderColor: `#54a0fc transparent transparent transparent` }}></div>\n                                        <div style={{ width: '84px', height: '84px', border: `8px solid #54a0fc`, borderColor: `#54a0fc transparent transparent transparent` }}></div>\n                                        <div style={{ width: '84px', height: '84px', border: `8px solid #54a0fc`, borderColor: `#54a0fc transparent transparent transparent` }}></div>\n                                    </div>\n\n                                    <h1>Loading, please wait</h1>\n\n                                </div>\n                            </div>\n                    }\n\n                </div>\n            </div>\n\n        );\n    }\n\n    private static onGoogleSignInClick(): void {\n        createPopup('https://www.quizzardapp.com/api/v2/extension/google-sign-in', 450, 600);\n     }\n\n    private static onAppleSignInClick(): void {\n        createPopup('https://www.quizzardapp.com/api/v2/extension/apple-sign-in', 550, 750);\n    }\n\n}\n","export enum MessageType {\n    LOAD_APPLICATION_DATA = 'LOAD_APPLICATION_DATA',\n    AGREE_TO_TERMS_OF_SERVICE = 'AGREE_TO_TERMS_OF_SERVICE',\n    UPDATE_THEME = 'UPDATE_THEME',\n    UPDATE_SEARCH_SETTINGS = 'UPDATE_SEARCH_SETTINGS',\n    UPDATE_STATE = 'UPDATE_STATE',\n    SEARCH_START = 'SEARCH',\n    SEARCH_RESULT = 'SEARCH_RESULT',\n    SEARCH_END = 'SEARCH_END',\n    ABORT_SEARCH = 'ABORT_SEARCH',\n    CLEAR_RESULTS = 'CLEAR_RESULTS',\n    ERROR_OCCURRED = 'ERROR_OCCURRED',\n    LOGIN = 'LOGIN',\n    LOGOUT = 'LOGOUT',\n    SIGN_UP = 'SIGN_UP',\n    ACTIVATE_ACCOUNT = 'ACTIVATE_ACCOUNT',\n    RESET_SIGN_UP_SESSION = 'RESET_SIGN_UP_SESSION',\n    ACTIVATE_FREE_TRIAL = 'ACTIVATE_FREE_TRIAL',\n    FORGOT_PASSWORD = 'FORGOT_PASSWORD',\n    SETTINGS_MODAL_CLICK = 'SETTINGS_MODAL_CLICK',\n    THEMES_MODAL_CLICK = 'THEMES_MODAL_CLICK',\n    DONATE_CLICK = 'DONATE_CLICK',\n    DISCORD_CLICK = 'DISCORD_CLICK',\n    SUBSCRIBE_CLICK = 'SUBSCRIBE_CLICK',\n    FREE_TRIAL_CLICK = 'FREE_TRIAL_CLICK',\n    WEBSITE_CLICK = 'WEBSITE_CLICK',\n    PROMOTION_CLICK = 'PROMOTION_CLICK'\n}\n\nexport type BackgroundMessage = {\n    readonly messageType: MessageType;\n    readonly data: { [key: string]: any };\n};\n","import { BackgroundMessage, MessageType } from './base/AbstractRuntime';\n\nimport { Theme } from '../../types/theme';\nimport { State } from '../../types/state';\nimport { ActivateAccountResponse, LoginResponse, RequestError } from '../../types/authentication';\n\nexport interface QuizzardRuntimeEventListener {\n    onLoadApplicationData(data: { themes: Theme[], isGold: boolean }): void;\n    onStateUpdate(state: State): void;\n}\n\ntype RuntimePort = chrome.runtime.Port | browser.runtime.Port;\nconst Runtime = process.env['MANIFEST_VERSION'] === '2' ? browser.runtime : chrome.runtime;\n\nconst safelyResolve = (promise: any, data: any): void => {\n        \n    if (promise === undefined) {\n        return;\n    }\n\n    promise.resolve(data);\n}\n\nconst constructBackgroundMessage = (data: any, messageType: MessageType): BackgroundMessage => {\n    return { data, messageType };\n}\n\nexport default class QuizzardRuntime {\n\n    private static readonly DEFAULT_RUNTIME_ID = 'QuizzardComm';\n\n    private runtimePort: RuntimePort | undefined;\n    private loginPromise: any;\n    private logoutPromise: any;\n    private signUpPromise: any;\n    private activationPromise: any;\n    private forgotPasswordPromise: any;\n    private freeTrialActivationPromise: any;\n\n    private readonly quizzardRuntimeEventListener: QuizzardRuntimeEventListener;\n\n    public constructor(quizzardRuntimeEventListener: QuizzardRuntimeEventListener) {\n        this.quizzardRuntimeEventListener = quizzardRuntimeEventListener;\n        this.runtimePort = QuizzardRuntime.initializeRuntime(this.onDisconnect.bind(this), this.onMessage.bind(this));\n    }\n\n    public disconnect(): void {\n\n        if (this.runtimePort === undefined) {\n            return;\n        }\n\n        this.runtimePort.disconnect();\n    }\n\n    public login(email: string, password: string, rememberMe: boolean): Promise<LoginResponse> {\n       \n        this.sendMessage(constructBackgroundMessage({ email, password, rememberMe }, MessageType.LOGIN));\n\n        return new Promise<LoginResponse>((resolve) => {\n            this.loginPromise = { resolve };\n        });\n\n    }\n\n    public logout(): Promise<void> {\n\n        this.sendMessage(constructBackgroundMessage({}, MessageType.LOGOUT));\n\n        return new Promise<void>((resolve) => {\n            this.logoutPromise = { resolve };\n        });\n    }\n\n    public signup(email: string, password: string, rememberMe: boolean): Promise<RequestError | undefined> {\n        \n        this.sendMessage(constructBackgroundMessage({ email, password, rememberMe }, MessageType.SIGN_UP));\n\n        return new Promise<RequestError | undefined>((resolve) => {\n            this.signUpPromise = { resolve };\n        });\n    }\n\n    public activate(email: string, activationCode: string): Promise<ActivateAccountResponse> {\n        \n        this.sendMessage(constructBackgroundMessage({ email, activationCode }, MessageType.ACTIVATE_ACCOUNT));\n\n        return new Promise<ActivateAccountResponse>((resolve) => {\n            this.activationPromise = { resolve };\n        });\n    }\n\n    public activateFreeTrial(): Promise<{ goldSearchEndTimeEpoch?: number }> {\n\n        this.sendMessage(constructBackgroundMessage({}, MessageType.ACTIVATE_FREE_TRIAL));\n\n        return new Promise<{ goldSearchEndTimeEpoch?: number }>((resolve) => {\n            this.freeTrialActivationPromise = { resolve };\n        });\n    }\n\n    public forgotPassword(email: string): Promise<void> {\n        \n        this.sendMessage(constructBackgroundMessage({ email }, MessageType.FORGOT_PASSWORD));\n\n        return new Promise<void>((resolve) => {\n            this.forgotPasswordPromise = { resolve };\n        });\n    }\n\n    public resetSignUpSession(): void {\n        this.sendMessage(constructBackgroundMessage({}, MessageType.RESET_SIGN_UP_SESSION));\n    }\n\n    public agreeToTermsOfService(amountScrolled: number): void {\n        this.sendMessage(constructBackgroundMessage({ amountScrolled }, MessageType.AGREE_TO_TERMS_OF_SERVICE));\n    }\n\n    public updateTheme(theme: Theme): void {\n        this.sendMessage(constructBackgroundMessage(theme, MessageType.UPDATE_THEME));\n    }\n\n    public updateSearchSettings(confidenceThreshold: number, autoSort: boolean, autoClear: boolean): void {\n        this.sendMessage(constructBackgroundMessage({ confidenceThreshold, autoSort, autoClear }, MessageType.UPDATE_SEARCH_SETTINGS));\n    }\n\n    public updateApplicationState(state: State): void {\n        this.sendMessage(constructBackgroundMessage(state, MessageType.UPDATE_STATE));\n    }\n\n    public search(question: string): void {\n        this.sendMessage(constructBackgroundMessage({ question }, MessageType.SEARCH_START));\n    }\n\n    public onSettingsClick(): void {\n        this.sendMessage(constructBackgroundMessage({ }, MessageType.SETTINGS_MODAL_CLICK));\n    }\n\n    public onThemesClick(): void {\n        this.sendMessage(constructBackgroundMessage({ }, MessageType.THEMES_MODAL_CLICK));\n    }\n\n    public onDonateClick(): void {\n        this.sendMessage(constructBackgroundMessage({ }, MessageType.DONATE_CLICK));\n    }\n\n    public onDiscordClick(): void {\n        this.sendMessage(constructBackgroundMessage({ }, MessageType.DISCORD_CLICK));\n    }\n\n    public onSubscribeClick(): void {\n        this.sendMessage(constructBackgroundMessage({ }, MessageType.SUBSCRIBE_CLICK));\n    }\n\n    public onFreeTrialClick(): void {\n        this.sendMessage(constructBackgroundMessage({ }, MessageType.FREE_TRIAL_CLICK));\n    }\n\n    public onWebsiteClick(index: number): void {\n        this.sendMessage(constructBackgroundMessage({ index }, MessageType.WEBSITE_CLICK));\n    }\n\n    public onPromotionClick(id: number): void {\n        this.sendMessage(constructBackgroundMessage({ id }, MessageType.PROMOTION_CLICK));\n    }\n\n    private sendMessage(backgroundMessage: BackgroundMessage): void {\n\n        if (this.runtimePort === undefined) {\n            this.runtimePort = QuizzardRuntime.initializeRuntime(this.onDisconnect.bind(this), this.onMessage.bind(this));\n        }\n\n        this.runtimePort.postMessage(backgroundMessage);\n    }\n\n    private onDisconnect(): void {\n\n        if (this.runtimePort === undefined) {\n            return;\n        }\n\n        this.runtimePort.onDisconnect.removeListener(this.onDisconnect.bind(this));\n        this.runtimePort.onMessage.removeListener(this.onMessage.bind(this) as any);\n        this.runtimePort = undefined;\n    }\n    \n    private onMessage(message: BackgroundMessage): void {\n\n        if (message.messageType === MessageType.LOAD_APPLICATION_DATA) {\n            this.quizzardRuntimeEventListener.onLoadApplicationData(message.data as any);\n        }\n\n        else if (message.messageType === MessageType.UPDATE_STATE) {\n            this.quizzardRuntimeEventListener.onStateUpdate(message.data as State);\n        }\n\n        else if (message.messageType === MessageType.LOGIN) {\n            safelyResolve(this.loginPromise, message.data as LoginResponse);\n        }\n\n        else if (message.messageType === MessageType.LOGOUT) {\n            safelyResolve(this.logoutPromise, undefined);\n        }\n\n        else if (message.messageType === MessageType.SIGN_UP) {\n            safelyResolve(this.signUpPromise, message.data as RequestError | undefined);\n        }\n\n        else if (message.messageType === MessageType.ACTIVATE_ACCOUNT) {\n            safelyResolve(this.activationPromise, message.data as ActivateAccountResponse);\n        }\n\n        else if (message.messageType === MessageType.ACTIVATE_FREE_TRIAL) {\n            safelyResolve(this.freeTrialActivationPromise, message.data as any);\n        }\n\n        else if (message.messageType === MessageType.FORGOT_PASSWORD) {\n            safelyResolve(this.forgotPasswordPromise, undefined);\n        }\n\n        else if (message.messageType === MessageType.ERROR_OCCURRED) {\n            console.error(message.data);\n        }\n\n    }\n\n    private static initializeRuntime(onDisconnect: () => void, onMessage: (backgroundMessage: BackgroundMessage) => void): RuntimePort {\n\n        const runtimePort: RuntimePort = Runtime.connect({ name: QuizzardRuntime.DEFAULT_RUNTIME_ID });\n        runtimePort.onDisconnect.addListener(onDisconnect);\n        runtimePort.onMessage.addListener(onMessage as any);\n\n        return runtimePort;\n    }\n\n}\n","import { Settings } from '../types/settings';\nimport { State } from '../types/state';\nimport { Theme } from '../types/theme';\n\nexport class Configuration {\n\n    public static readonly DefaultSettings: Settings = { autoSort: true, autoClear: false, confidenceThreshold: 60, windowPrimaryColor: '#54A0FC', windowSecondaryColor: '#2E86DE' };\n\n    public static readonly DefaultState: State = { question: '', answers: [], isLoading: false, noResults: false, reCAPTCHAData: undefined };\n\n    public static readonly DefaultThemes: Array<Theme> = [\n        {\n            name: 'Red',\n            primaryColor: '#FD6B6B',\n            secondaryColor: '#EE5253'\n        },\n        {\n            name: 'Orange',\n            primaryColor: '#FE9F43',\n            secondaryColor: '#FF8B1C'\n        },\n        {\n            name: 'Green',\n            primaryColor: '#21D1A1',\n            secondaryColor: '#19AC84'\n        },\n        {\n            name: 'Blue',\n            primaryColor: '#54A0FC',\n            secondaryColor: '#2E86DE'\n        },\n        {\n            name: 'Pink',\n            primaryColor: '#FE9FF3',\n            secondaryColor: '#F368DF'\n        },\n        {\n            name: 'Black',\n            primaryColor: '#576574',\n            secondaryColor: '#222E3E'\n        },\n        {\n            name: 'Purple',\n            primaryColor: '#5F27CD',\n            secondaryColor: '#2E1D8C'\n        },\n        {\n            name: 'Brown',\n            primaryColor: '#B76D24',\n            secondaryColor: '#914F0F',\n        }\n    ];\n\n}\n","import React from 'react';\nimport './App.scss';\n\nimport Themes from './components/themes/Themes';\nimport Results from './components/results/Results';\nimport SettingsComponent from './components/settings/Settings';\nimport TermsAndConditions from './components/tos/TermsAndConditions';\nimport Auth from './components/auth/Auth';\nimport BrowserStorage from './browser/BrowserStorage';\nimport QuizzardRuntime, { QuizzardRuntimeEventListener } from './browser/runtime/QuizzardRuntime';\nimport { Time } from './util/Time';\n\nimport { Configuration } from './config/Configuration';\nimport { Theme, Theme as ThemeType } from './types/theme';\nimport { Settings } from './types/settings';\nimport { State } from './types/state';\nimport { RequestError, ActivateAccountResponse, LoginResponse } from './types/authentication';\nimport { User } from './types/user';\n\nenum PopupDisplay {\n    None = 0,\n    Themes = 1,\n    Settings = 2,\n    Authentication = 3\n}\n\ntype ApplicationReactState = {\n\n    /**\n     * Object representing the configurations that will take affect\n     * on the application.\n     */\n\n    settings: Settings;\n\n    /**\n     * A state object that is sent from the background service. This\n     * will determine the state of the application after it has been\n     * initialized.\n     */\n\n    state: State;\n\n    /**\n     * A list of themes that are available to the user to select from.\n     */\n\n    themes: Array<ThemeType>;\n\n    /**\n     * An enum representing the current popup that is being rendered\n     * on the application.\n     */\n\n    currentPopup: PopupDisplay;\n\n    /*\n     * State variable to control whether or not to display\n     * the goldPromotion popup right away within the settings\n     * popup.\n    */\n\n    displayGoldPromotion: boolean;\n\n    /**\n     * A boolean field to toggle the legal popup.\n     */\n\n    didAgree: boolean;\n\n    /**\n     * A boolean field to indicate whether or not user is a gold\n     * member or not.\n     */\n\n    isGold: boolean;\n\n    /**\n     * A boolean field to indicate whether or not the user is\n     * authenticated.\n     */\n\n    user: User | undefined;\n};\n\nexport default class App extends React.Component<{}, ApplicationReactState> implements QuizzardRuntimeEventListener {\n\n    private static readonly APPLICATION_NAME: string = 'Quizzard';\n    private static readonly SUBSCRIPTION_URL: string = 'https://www.quizzardapp.com/quizzard-gold';\n\n    private readonly quizzardRuntime: QuizzardRuntime;\n\n    public input: HTMLInputElement | null;\n\n    constructor(props: any) {\n\n        super(props);\n\n        this.state = App.defaultState;\n        this.input = null;\n\n        /*\n         * Sets the default state to the last saved state.\n         * This way settings are displayed to the user faster.\n         */\n\n        BrowserStorage.get(['state', 'settings', 'didAgree', 'isGold', 'user', 'isActivationRequired', 'signInResetTimeEpoch'], this.onLocalApplicationDataLoaded.bind(this));\n        this.quizzardRuntime = new QuizzardRuntime(this);\n    }\n\n    componentWillMount(): void {\n\n        if (this.input === undefined || this.input === null) {\n            return;\n        }\n\n        this.input.focus();\n    }\n\n    componentWillUnmount(): void {\n        this.quizzardRuntime.disconnect();\n    }\n\n    onLoadApplicationData(data: { themes: Theme[], isGold: boolean, isActivationRequired: boolean, user?: User }): void {\n\n        // console.log('Application data loaded: ', data);\n\n        let popup: PopupDisplay = this.state.currentPopup;\n\n        if (popup === PopupDisplay.Authentication && data.user !== undefined) {\n            popup = PopupDisplay.None;\n        }\n\n        /*\n         * If the user has turned on gold searching\n         * then we should remove any gold promotion\n         * popups that may be displayed.\n         */\n\n        const isDisplayingGoldPromotionWhenNotSupposedTo: boolean = data.user !== undefined && data.user.isGoldSearch === true && this.state.state.randomizedPromotion !== undefined && this.state.state.randomizedPromotion.promotion.goldPromotion === true;\n\n        if (isDisplayingGoldPromotionWhenNotSupposedTo === true) {\n            this.setState({ state: { ...this.state.state, randomizedPromotion: undefined } });\n        }\n\n        this.setState({ themes: data.themes, isGold: data.isGold, user: data.user, currentPopup: popup });\n    }\n\n    onStateUpdate(state: State): void {\n\n        if (state.reCAPTCHAData !== undefined) {\n            this.setState({ state: { ...state } });\n            return;\n        }\n\n        if (this.input !== undefined && this.input !== null) {\n            this.input.value = state.question;\n        }\n\n        this.setState({ state });\n    }\n\n    private onAuthenticationPopupClosed(user?: User): void {\n\n        if (user !== undefined) {\n            this.setState({ user: { email: user.email, userID: user.userID, isGoldSearch: user.isGoldSearch, isFreeTrialActivated: user.isFreeTrialActivated, goldSearchEndTimeEpoch: user.goldSearchEndTimeEpoch } });\n        }\n\n        this.quizzardRuntime.resetSignUpSession();\n        this.setState({ currentPopup: PopupDisplay.None });\n    }\n\n    private onLocalApplicationDataLoaded(data: { state: State, settings: Settings, didAgree: boolean, isGold: boolean, user?: User, isActivationRequired?: boolean, signInResetTimeEpoch?: number }): void {\n\n        if (data.settings === undefined) {\n            data.settings = Configuration.DefaultSettings;\n        }\n\n        // console.log('Loaded local application data: ', data);\n\n        if (data.settings.autoClear === true && data.state.reCAPTCHAData === undefined) {\n            data.state = Configuration.DefaultState;\n        }\n\n        if (data.didAgree === undefined) {\n            data.didAgree = false;\n        }\n\n        if (this.input !== undefined && this.input !== null) {\n            this.input.value = data.state.question;\n        }\n\n        this.setState({ settings: data.settings, state: data.state, didAgree: data.didAgree, isGold: data.isGold, user: data.user });\n\n        let popup: PopupDisplay = PopupDisplay.None;\n\n        if (data.user === undefined || data.isActivationRequired === true) {\n\n            /*\n             * If the amount of time has passed since the user declined\n             * to sign in, then we will show the sign in popup again.\n             */\n\n            popup = PopupDisplay.Authentication;\n\n            if (data.isActivationRequired === false && data.signInResetTimeEpoch !== undefined && new Date().getTime() <= data.signInResetTimeEpoch) {\n                popup = PopupDisplay.None;\n            }\n\n        }\n\n        this.setState({ currentPopup: popup });\n\n    }\n\n    private search(question: string): void {\n\n        if (question === undefined) {\n            return;\n        }\n\n        if (question.trim().length === 0) {\n            return;\n        }\n\n        if (this.state.state.reCAPTCHAData !== undefined) {\n            return;\n        }\n\n        this.quizzardRuntime.search(question);\n    }\n\n    public onEnterKeyPress(event: any): void {\n\n        if (event.key !== 'Enter') {\n            return;\n        }\n\n        // console.log('Searching .... key press!');\n        this.search(event?.target?.value);\n    }\n\n    public onReCAPTCHAResult(result: any): void {\n\n        if (result?.success === false) {\n            return;\n        }\n\n        const question: string | undefined = this.input?.value;\n\n        if (question === undefined) {\n            return;\n        }\n\n        const state: State = this.state.state;\n        state.reCAPTCHAData = undefined;\n        state.isLoading = true;\n\n        this.setState({ state });\n        setTimeout(() => this.search(question), 1000);\n    }\n\n    public onPaletteClick(): void {\n        this.quizzardRuntime.onThemesClick();\n        this.setState({ currentPopup: this.state.currentPopup === PopupDisplay.Themes ? PopupDisplay.None : PopupDisplay.Themes });\n    }\n\n    public onPaletteCloseClick(): void {\n        this.setState({ currentPopup: PopupDisplay.None });\n    }\n\n    public onSettingsClick(displayGold?: boolean): void {\n        this.quizzardRuntime.onSettingsClick();\n        const displayGoldPromotion: boolean = displayGold === true || false;\n        this.setState({ displayGoldPromotion, currentPopup: this.state.currentPopup === PopupDisplay.Settings ? PopupDisplay.None : PopupDisplay.Settings });\n    }\n\n    public onWebsiteClick(index: number): void {\n        this.quizzardRuntime.onWebsiteClick(index);\n    }\n\n    public onPromotionClick(id: number): void {\n        this.quizzardRuntime.onPromotionClick(id);\n    }\n\n    public onSettingsCloseClick(confidenceThreshold: number, autoSort: boolean, autoClear: boolean): void {\n        this.quizzardRuntime.updateSearchSettings(confidenceThreshold, autoSort, autoClear);\n        this.setState({ currentPopup: PopupDisplay.None, displayGoldPromotion: false });\n    }\n\n    public onInputChanged(event: any): void {\n\n        const input = event?.target?.value || undefined;\n\n        if (input === undefined) {\n            return;\n        }\n\n        const state: State = this.state.state;\n        state.question = input;\n\n        this.quizzardRuntime.updateApplicationState(this.state.state);\n        this.setState({ state });\n    }\n\n    public onAppClick(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void {\n\n        if (event === undefined || event === null) {\n            return;\n        }\n\n        if ((event.target as any).id === 'btnTheme') {\n            return;\n        }\n\n        this.setState({ currentPopup: PopupDisplay.None });\n    }\n\n    private onThemeChange(theme: ThemeType): void {\n\n        const settings: Settings = this.state.settings;\n        settings.windowPrimaryColor = theme.primaryColor;\n        settings.windowSecondaryColor = theme.secondaryColor;\n\n        this.setState({ settings });\n        this.quizzardRuntime.updateTheme(theme);\n    }\n\n    private onClearClick(resetInput: boolean): void {\n\n        const state: State = Configuration.DefaultState;\n\n        if (this.input !== undefined && this.input !== null) {\n\n            state.question = this.input.value;\n\n            if (resetInput === true) {\n                this.input.value = '';\n                state.question = '';\n            }\n\n        }\n\n        this.quizzardRuntime.updateApplicationState(state);\n        this.setState({ state });\n    }\n\n    public onResetSignUpSession(): void {\n        this.quizzardRuntime.resetSignUpSession();\n    }\n\n    public onSignupRequest(email: string, password: string, rememberMe: boolean): Promise<RequestError | undefined> {\n        return this.quizzardRuntime.signup(email, password, rememberMe);\n    }\n\n    public onActivationRequest(email: string, activationCode: string): Promise<ActivateAccountResponse> {\n        return this.quizzardRuntime.activate(email, activationCode);\n    }\n\n    public onForgotPasswordRequest(email: string): Promise<void> {\n        return this.quizzardRuntime.forgotPassword(email);\n    }\n\n    public onLoginRequest(email: string, password: string, rememberMe: boolean): Promise<LoginResponse> {\n        return this.quizzardRuntime.login(email, password, rememberMe);\n    }\n\n    public onLogoutRequest(): void {\n        this.quizzardRuntime.logout().finally(() => {\n            this.setState({ user: undefined });\n        });\n    }\n\n    public onSubscribeRequest(): void {\n\n        this.quizzardRuntime.onSubscribeClick();\n\n        if (this.state.user === undefined) {\n            this.setState({ currentPopup: PopupDisplay.Authentication });\n            return;\n        }\n\n        window.open(App.SUBSCRIPTION_URL, '_blank');\n    }\n\n    public onFreeTrialRequest(): Promise<{ goldSearchEndTimeEpoch?: number }> {\n\n        this.quizzardRuntime.onFreeTrialClick();\n\n        if (this.state.user === undefined) {\n            this.setState({ currentPopup: PopupDisplay.Authentication });\n            return Promise.resolve({ goldSearchEndTimeEpoch: undefined });\n        }\n\n        return this.quizzardRuntime.activateFreeTrial().then(({ goldSearchEndTimeEpoch }) => {\n\n            if (this.state.user !== undefined && goldSearchEndTimeEpoch !== undefined) {\n                const updatedUser: User = { ...this.state.user, isGoldSearch: true, goldSearchEndTimeEpoch };\n                this.setState({ user: updatedUser });\n            }\n\n            return Promise.resolve({ goldSearchEndTimeEpoch });\n        });\n    }\n\n    public onDisplayLoginPopup(): void {\n        this.setState({ currentPopup: PopupDisplay.Authentication });\n    }\n\n    public onIAgreeClick(amountScrolled: number): void {\n        this.quizzardRuntime.agreeToTermsOfService(amountScrolled);\n        this.setState({ didAgree: true });\n    }\n\n    public onDiscordClick(): void {\n        this.quizzardRuntime.onDiscordClick();\n    }\n\n    public onDonateClick(): void {\n        this.quizzardRuntime.onDonateClick();\n    }\n\n    public render(): JSX.Element {\n\n        return (\n\n            <div id='App' className='App'>\n\n                <header onClick={this.onAppClick.bind(this)} style={{ backgroundColor: this.state.settings.windowPrimaryColor }} className='App-header'>\n\n                    <div className='App-Header-Wrapper'>\n\n                        <h1 className={this.state?.user?.isGoldSearch && (this.state.user.goldSearchEndTimeEpoch !== undefined && Time.getCurrentTimeEpoch() < this.state.user.goldSearchEndTimeEpoch) ? 'Quizzard-Gold' : ''}>{App.APPLICATION_NAME}</h1>\n\n                        <input\n                            onChange={this.onInputChanged.bind(this)}\n                            ref={(input) => this.input = input}\n                            style={{ backgroundColor: this.state.settings.windowSecondaryColor }}\n                            className='search-bar' placeholder='What is the capital of canada?' name='input'\n                            onKeyPress={this.onEnterKeyPress.bind(this)}\n                        />\n\n                        <button id='btnTheme' className='btn' onClick={this.onPaletteClick.bind(this)}>\n                            <img id='btnTheme' src='img/palette.svg' alt='Change Theme' />\n                        </button>\n\n                    </div>\n\n                </header>\n\n                <Results\n                    reCAPTCHAData={this.state.state.reCAPTCHAData}\n                    onReCAPTCHAResult={this.onReCAPTCHAResult.bind(this)}\n                    isLoading={this.state.state.isLoading}\n                    randomizedPromotion={this.state.state.randomizedPromotion}\n                    settings={this.state.settings}\n                    results={this.state.state.answers}\n                    onClearClick={this.onClearClick.bind(this)}\n                    onSettingsClick={this.onSettingsClick.bind(this)}\n                    onWebsiteClick={this.onWebsiteClick.bind(this)}\n                    onPromotionClick={this.onPromotionClick.bind(this)}\n                    question={this.state.state.question}\n                    noResults={this.state.state.isLoading === false && this.state.state.noResults === true && this.state.state.question.trim().length !== 0}\n                />\n\n                <React.Fragment>\n\n                    <SettingsComponent\n                        onLoginOrSignUp={this.onDisplayLoginPopup.bind(this)}\n                        onLogout={this.onLogoutRequest.bind(this)}\n                        onDiscordClick={this.onDiscordClick.bind(this)}\n                        onDonateClick={this.onDonateClick.bind(this)}\n                        onFreeTrial={this.onFreeTrialRequest.bind(this)}\n                        onSubscribe={this.onSubscribeRequest.bind(this)}\n                        settings={this.state.settings}\n                        user={this.state.user}\n                        display={this.state.currentPopup === PopupDisplay.Settings && this.state.didAgree === true}\n                        displayGoldPromotion={this.state.displayGoldPromotion}\n                        onClose={this.onSettingsCloseClick.bind(this)}\n                    />\n\n                    <Themes\n                        themes={this.state.themes}\n                        display={this.state.currentPopup === PopupDisplay.Themes && this.state.didAgree === true}\n                        selectedColor={this.state.settings.windowPrimaryColor}\n                        onThemeChange={this.onThemeChange.bind(this)}\n                        onCloseClick={this.onPaletteCloseClick.bind(this)}\n                    />\n\n                    <Auth\n                        display={this.state.currentPopup === PopupDisplay.Authentication}\n                        onResetSignUpSession={this.onResetSignUpSession.bind(this)}\n                        onPopupClosed={this.onAuthenticationPopupClosed.bind(this)}\n                        onForgotPassword={this.onForgotPasswordRequest.bind(this)}\n                        onLogin={this.onLoginRequest.bind(this)}\n                        onSignUp={this.onSignupRequest.bind(this)}\n                        onActivate={this.onActivationRequest.bind(this)}\n                    />\n\n                    <TermsAndConditions\n                        display={this.state.currentPopup !== PopupDisplay.Authentication && this.state.didAgree === false}\n                        onIAgreeClick={this.onIAgreeClick.bind(this)}\n                    />\n\n                </React.Fragment>\n\n            </div>\n        );\n    }\n\n    private static get defaultState(): ApplicationReactState {\n        return {\n            settings: Configuration.DefaultSettings,\n            state: Configuration.DefaultState,\n            themes: Configuration.DefaultThemes,\n            currentPopup: PopupDisplay.None,\n            displayGoldPromotion: false,\n            didAgree: true,\n            isGold: false,\n            user: undefined\n        };\n    }\n\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.scss';\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <App />\n  </React.StrictMode >,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}