let WebRTCSocketInstance=function(e,o,t=null){if(console.info("create new webSocket."),this.websocketUrl=e,this.websocketProtocol=o,this.websocketId=null,this.wsReconnectTimeoutEvent=null,this.wsReconnecting=!1,this.wsReconnectTime=6e3,this.wsReconnectCount=0,this.WS_RECONNECTED_TIMEOUT_TIME=120,this.wsKeepAliveTimeProcessor=null,this.wasWebsocketClosed=!1,this.keepAliveWithoutResponse=0,this.WS_KEEP_ALIVE_TIMEOUT_FLAG=5,this.WS_KEEP_ALIVE_MILLISEC=5e3,this.WS_KEEP_ALIVE_CLOSE_TYPE=!1,WebRTCSocketInstance.prototype.tskStringIsNullOrEmpty(e))throw new Error("ERR_INVALID_PARAMETER_VALUE: '"+e+"' is not valid as webSocket url value");if(WebRTCSocketInstance.prototype.tskStringIsNullOrEmpty(o))throw new Error("ERR_INVALID_PARAMETER_VALUE: '"+o+"' is not valid as protocol value");if(!(this instanceof WebRTCSocketInstance))return new WebRTCSocketInstance(e,o,t);this.isChannelOpen=!1,this.ws=this.createWebSocket(e,o,t)};WebRTCSocketInstance.prototype.tskStringIsNullOrEmpty=function(e){return void 0===e||null==e||""===e},WebRTCSocketInstance.prototype.createWebSocket=function(e,o,t=null){if(console.info("create webSocket"),WebRTCSocketInstance.prototype.tskStringIsNullOrEmpty(e))throw new Error("ERR_INVALID_PARAMETER_VALUE: '"+e+"' is not valid as webSocket url value");let n=this;console.info("webSocket Connecting to "+e+", protocols: "+o);let s=new WebSocket(e,o);return s.onopen=function(e){console.log("websocket onopen!"),grpDialingApi.sid&&(console.log("send sid"),s.send(JSON.stringify({sid:grpDialingApi.sid})))},s.onmessage=function(e){if("string"==typeof e.data)if("pong"===e.data||"ping"===e.data||"\r\n"===e.data||"\r\n\r\n"===e.data)"pong"!==e.data&&"\r\n\r\n"!==e.data||(n.keepAliveWithoutResponse=0,s.keepAlive());else{console.info("Recv:  \r\n"+e.data);let o=JSON.parse(e.data);o&&(o.hasOwnProperty("allow")?o.allow?(console.log("***************************** create ws success *****************************"),s.keepAlive(),n.isChannelOpen=!0,n.wsReconnecting=!1,grpDialingApi.websocketStatus=1,t&&t({code:999,data:o})):(console.log("create ws failed, cause: ",o.reason),n.wsCleanUp(),n.wsReconnecting||t&&t({code:"",data:o})):n.handleRecvMessage(o))}},s.keepAlive=function(e){if(!n.wsIsConnected())return clearTimeout(n.wsKeepAliveTimeProcessor),void(n.wsKeepAliveTimeProcessor=null);n.wsKeepAliveTimeProcessor=setTimeout((function(){if(n.keepAliveWithoutResponse>=n.WS_KEEP_ALIVE_TIMEOUT_FLAG)return console.log("Keep alive failed, close webSocket"),s.close(4e3),clearTimeout(n.wsKeepAliveTimeProcessor),n.wsKeepAliveTimeProcessor=null,void(n.WS_KEEP_ALIVE_CLOSE_TYPE=!0);s.send("\r\n"),n.keepAliveWithoutResponse+=1}),n.WS_KEEP_ALIVE_MILLISEC)},s.onclose=function(e){console.log("websocket onclose code: "+e.code),n.isChannelOpen=!1,grpDialingApi.isLogin?(console.log("Already logged in, try to reconnect"),n.wsReconnecting=!0,grpDialingApi.websocketStatus=2,grpDialingApi.socketOnClose({status:grpDialingApi.websocketStatus,code:e.code}),n.wsReconnect(n.wsReconnectTime,t)):console.log("Logged out and will not reconnect. . .")},s},WebRTCSocketInstance.prototype.wsReconnect=function(e,o){let t=this;console.log("webSocket reConnect within time "+e),t.wsReconnectTimeoutEvent=setTimeout((function(){console.log("reconnecting timer trigger..."),grpDialingApi.isLogin?t.wsIsConnected()?console.log("ws connection already exists."):(t.wsReconnectCount++,t.ws=t.createWebSocket(t.websocketUrl,t.websocketProtocol,o)):console.log("Currently logged out, will not reconnect")}),e)},WebRTCSocketInstance.prototype.handleRecvMessage=function(e){switch(e.api){case"phone_state":"unauthorized"===e.state&&grpDialingApi.autoReLogin();break;case"line_status":e.data&&e.data.length&&(grpDialingApi.sendMessage2Popup({cmd:"setLineStatus",lines:e.data}),grpDialingApi.handleRequest({cmd:"setLineStatus",lines:e.data}));break;case"accounts":e.data&&(grpDialingApi.loginData.accountLists=e.data,grpDialingApi.sendMessage2Popup({cmd:"updateAccountLists",accountLists:e.data}),grpDialingApi.extensionNamespace.storage.local.set({updateAccountLists:e.data},(function(){console.log("set accountLists success")})))}},WebRTCSocketInstance.prototype.wsIsConnected=function(){let e=!1;if(this.ws)switch(this.ws.readyState){case WebSocket.OPEN:e=!0;break;case WebSocket.CONNECTING:console.log("Socket has been created. The connection is not yet open.");break;case WebSocket.CLOSING:console.log("The connection is in the process of closing.");break;case WebSocket.CLOSED:console.log("The connection is closed or could not be opened.")}return e},WebRTCSocketInstance.prototype.wsCleanUp=function(){let e=this;console.log("clean ws && Reconnection timer"),e.ws&&(e.ws.close(4e3),e.ws=null),clearTimeout(e.wsReconnectTimeoutEvent),e.wsReconnectTimeoutEvent=null,clearTimeout(e.wsKeepAliveTimeProcessor),e.wsKeepAliveTimeProcessor=null,e.wsReconnectCount=0,e.keepAliveWithoutResponse=0,e.wasWebsocketClosed=!1,e.isChannelOpen=!0};export{WebRTCSocketInstance};