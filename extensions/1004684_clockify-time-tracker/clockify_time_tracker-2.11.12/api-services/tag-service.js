class TagService extends ClockifyService{static async getUrlTags(){return`${await this.apiEndpoint}/v1/workspaces/${await this.workspaceId}/tags`}static async getOrCreateTags(a){let t=[],e="",s=1,i=0;do{const{data:a,error:e,status:r}=await this.getAllTagsWithFilter(s,50);if(200!==r){if(e)return{tagovi:[],message:e.message};break}t=t.concat(a.map((a=>({id:a.id,name:a.name})))),s++,i=a.length}while(50===i);const{forceTags:r}=await this.getForces(),n=[];let g=!1;for(const s of a){const a=t.find((a=>a.name.toUpperCase()===s.toUpperCase())),i=await this.getCreateObjects(),r=await this.getCanCreateTags();if(a)n.push(a);else if(i&&r){const{data:a,error:t,status:i}=await this.createTag({name:s});201===i?n.push(a):e+=`\nCouldn't create tag: ${s}`}else e+=`\nCouldn't create tag: ${s}`,i||(g=!0)}return g&&(e+="\n Integrations can't create tags."),r&&n.length!==a.length&&(e+="\n Tags are required."),{tagovi:n,message:e}}static async getAllTagsWithFilter(a,t,e){let s=`${await this.getUrlTags()}?page=${a}&pagesize=${t}&archived=false`;return e&&(s=s.concat(`&name=${e}`)),await this.apiCall(s)}static async createTag(a){const t=await this.getUrlTags(),e=a;return await this.apiCall(t,"POST",e)}}