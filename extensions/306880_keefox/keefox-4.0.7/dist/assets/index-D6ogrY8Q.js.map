{"version":3,"file":"index-D6ogrY8Q.js","sources":["../../../node_modules/webext-detect-page/index.js"],"sourcesContent":["let cache = true;\nexport function disableWebextDetectPageCache() {\n    cache = false;\n}\nfunction isCurrentPathname(path) {\n    if (!path) {\n        return false;\n    }\n    try {\n        const { pathname } = new URL(path, location.origin);\n        return pathname === location.pathname;\n    }\n    catch {\n        return false;\n    }\n}\nfunction getManifest(_version) {\n    return globalThis.chrome?.runtime?.getManifest?.();\n}\nfunction once(function_) {\n    let result;\n    return () => {\n        if (!cache || result === undefined) {\n            result = function_();\n        }\n        return result;\n    };\n}\n/** Indicates whether the code is being run on http(s):// pages (it could be in a content script or regular web context) */\nexport const isWebPage = once(() => ['about:', 'http:', 'https:'].includes(location.protocol));\n/** Indicates whether the code is being run in extension contexts that have access to the chrome API */\nexport const isExtensionContext = once(() => typeof globalThis.chrome?.extension === 'object');\n/** Indicates whether the code is being run in a content script */\nexport const isContentScript = once(() => isExtensionContext() && isWebPage());\n/** Indicates whether the code is being run in a background context */\nexport const isBackground = () => isBackgroundPage() || isBackgroundWorker();\n/** Indicates whether the code is being run in a background page */\nexport const isBackgroundPage = once(() => {\n    const manifest = getManifest(2);\n    if (manifest\n        && isCurrentPathname(manifest.background_page ?? manifest.background?.page)) {\n        return true;\n    }\n    return Boolean(manifest?.background?.scripts\n        && isCurrentPathname('/_generated_background_page.html'));\n});\n/** Indicates whether the code is being run in a background worker */\nexport const isBackgroundWorker = once(() => isCurrentPathname(getManifest(3)?.background?.service_worker));\n/** Indicates whether the code is being run in a persistent background page (as opposed to an Event Page or Background Worker, both of which can be unloaded by the browser) */\nexport const isPersistentBackgroundPage = once(() => isBackgroundPage()\n    && getManifest(2)?.manifest_version === 2 // Firefox can have a background page on MV3, but can't be persistent\n    && getManifest(2)?.background?.persistent !== false);\n/** Indicates whether the code is being run in an options page. This only works if the current page’s URL matches the one specified in the extension's `manifest.json` */\nexport const isOptionsPage = once(() => {\n    const path = getManifest()?.options_ui?.page;\n    if (typeof path !== 'string') {\n        return false;\n    }\n    const url = new URL(path, location.origin);\n    return url.pathname === location.pathname;\n});\n/** Indicates whether the code is being run in an options page. This only works if the current page’s URL matches the one specified in the extension's `manifest.json` */\nexport const isSidePanel = once(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- Not yet in @types/chrome\n    const path = getManifest(3)?.['side_panel']?.default_path;\n    if (typeof path !== 'string') {\n        return false;\n    }\n    const url = new URL(path, location.origin);\n    return url.pathname === location.pathname;\n});\n/** Indicates whether the code is being run in a dev tools page. This only works if the current page’s URL matches the one specified in the extension's `manifest.json` `devtools_page` field. */\nexport const isDevToolsPage = once(() => {\n    const devtoolsPage = isExtensionContext() && chrome.devtools && getManifest()?.devtools_page;\n    if (typeof devtoolsPage !== 'string') {\n        return false;\n    }\n    const url = new URL(devtoolsPage, location.origin);\n    return url.pathname === location.pathname;\n});\n/** Indicates whether the code is being run in the dev tools page. Unlike `isDevToolsPage`, this works in any page that has the `chrome.devTools` API */\nexport const isDevTools = () => Boolean(globalThis.chrome?.devtools);\n/** Loosely detect Firefox via user agent */\nexport const isFirefox = () => globalThis.navigator?.userAgent.includes('Firefox');\n/** Loosely detect Chrome via user agent (might also include Chromium and forks like Opera) */\nexport const isChrome = () => globalThis.navigator?.userAgent.includes('Chrome');\n/** Loosely detect Safari via user agent */\nexport const isSafari = () => !isChrome() && globalThis.navigator?.userAgent.includes('Safari');\n/** Loosely detect Mobile Safari via user agent */\nexport const isMobileSafari = () => isSafari() && globalThis.navigator?.userAgent.includes('Mobile');\nconst contextChecks = {\n    contentScript: isContentScript,\n    background: isBackground,\n    options: isOptionsPage,\n    sidePanel: isSidePanel,\n    devTools: isDevTools,\n    devToolsPage: isDevToolsPage,\n    extension: isExtensionContext,\n    web: isWebPage,\n};\nexport const contextNames = Object.keys(contextChecks);\nexport function getContextName() {\n    for (const [name, test] of Object.entries(contextChecks)) {\n        if (test()) {\n            return name;\n        }\n    }\n    return 'unknown';\n}\n"],"names":[],"mappings":"AAmBA,SAAS,KAAK,WAAW;AACrB,MAAI;AACJ,SAAO,MAAM;AACT,QAAc,WAAW,QAAW;AAChC,eAAS,UAAS;AAAA,IACrB;AACD,WAAO;AAAA,EACf;AACA;AAIY,MAAC,qBAAqB,KAAK,MAAM;AAZ7C;AAY6C,kBAAO,gBAAW,WAAX,mBAAmB,eAAc;AAAA,CAAQ;AAoDjF,MAAC,YAAY,MAAM;AAhE/B;AAgE+B,0BAAW,cAAX,mBAAsB,UAAU,SAAS;AAAA;AAE5D,MAAC,WAAW,MAAA;AAlExB;AAkE8B,0BAAW,cAAX,mBAAsB,UAAU,SAAS;AAAA;","x_google_ignoreList":[0]}