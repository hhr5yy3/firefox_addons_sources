/*! For license information please see background.bundle.js.LICENSE.txt */
(() => {
    var __webpack_modules__ = {
        4792: function(__unused_webpack_module, exports, __webpack_require__) {
            "use strict";
            var __importDefault = this && this.__importDefault || function(mod) {
                return mod && mod.__esModule ? mod : {
                    default: mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.userFlowExport = exports.jUnitXmlExport = exports.universalExport = exports.exportIssues = void 0;
            const json_axe_devtools_1 = __importDefault(__webpack_require__(8362));
            const csv_axe_devtools_1 = __importDefault(__webpack_require__(8864));
            const csv_axe_reports_1 = __importDefault(__webpack_require__(2));
            const json_universal_1 = __importDefault(__webpack_require__(6808));
            const j_unit_xml_1 = __importDefault(__webpack_require__(3643));
            const json_ufa_1 = __webpack_require__(4435);
            function unknownFormat(format) {
                throw new Error(`Unknown export format: ${format}`);
            }
            function issuesTransformer(issues, format, options) {
                switch (format) {
                  case "json":
                    return (0, json_axe_devtools_1.default)(issues, options);

                  case "csv-axe-devtools":
                    return (0, csv_axe_devtools_1.default)(issues, options);

                  case "csv-axe-reports":
                    return (0, csv_axe_reports_1.default)(issues);

                  default:
                    return unknownFormat(format);
                }
            }
            function createExport(filename, dataString, type) {
                const data = new Blob([ dataString ], {
                    type
                });
                const url = window.URL.createObjectURL(data);
                const tempLink = document.createElement("a");
                tempLink.href = url;
                tempLink.setAttribute("download", filename);
                tempLink.click();
            }
            async function exportIssues({filename, issues, format, options}) {
                const exportString = await issuesTransformer(issues, format, options);
                const mimeType = "json" === format ? "application/json" : "text/csv";
                createExport(filename, exportString, mimeType);
            }
            exports.exportIssues = exportIssues;
            function universalExport({filename, test, manifests, issues, additionalProperties}) {
                const data = (0, json_universal_1.default)(test, manifests, issues, additionalProperties);
                createExport(filename, data, "application/json");
            }
            exports.universalExport = universalExport;
            function jUnitXmlExport({filename, issues, additionalProperties}) {
                const data = (0, j_unit_xml_1.default)(issues, additionalProperties);
                createExport(filename, data, "application/json");
            }
            exports.jUnitXmlExport = jUnitXmlExport;
            function userFlowExport({filename, userFlow, results, additionalProperties}) {
                const data = (0, json_ufa_1.jsonUFA)(userFlow, results, additionalProperties);
                createExport(filename, data, "application/json");
            }
            exports.userFlowExport = userFlowExport;
        },
        8864: (__unused_webpack_module, exports, __webpack_require__) => {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const json2csv_1 = __webpack_require__(1331);
            const igt_name_map_1 = __webpack_require__(7574);
            const issue_mapper_1 = __webpack_require__(2623);
            const get_screenshot_url_1 = __webpack_require__(8627);
            function default_1(issues, {baseScreenshotURL} = {}, options = {
                delimiter: ","
            }) {
                const fields = [ {
                    label: "Rule ID",
                    value: "rule"
                }, {
                    label: "Description",
                    value: "description"
                }, {
                    label: "Help",
                    value: "helpText"
                }, {
                    label: "Help URL",
                    value: "helpUrl"
                }, {
                    label: "Impact",
                    value: row => row.isNeedsReview ? "" : row.impact
                }, {
                    label: "Manual",
                    value: row => row.isManual ? "Yes" : "No"
                }, {
                    label: "Needs Review",
                    value: row => row.isNeedsReview ? "Yes" : "No"
                }, {
                    label: "IGT",
                    value: row => (0, igt_name_map_1.getIgtName)(row.igtTool)
                }, {
                    label: "Selector",
                    value: "selector"
                }, {
                    label: "Summary",
                    value: "summary"
                }, {
                    label: "Source Code",
                    value: "source"
                }, {
                    label: "Tags",
                    value: row => (0, issue_mapper_1.getIssueTags)(row).join(",")
                }, {
                    label: "Found By",
                    value: "foundBy"
                }, {
                    label: "Test Title",
                    value: "testName"
                }, {
                    label: "Test URL",
                    value: "testUrl"
                }, {
                    label: "Share URL",
                    value: "shareURL"
                }, {
                    label: "Created At",
                    value: "createdAt"
                }, {
                    label: "Screenshot URL",
                    value: row => (0, get_screenshot_url_1.getScreenshotUrl)(baseScreenshotURL, row.screenshotId) || ""
                } ];
                return (0, json2csv_1.parseAsync)(issues, {
                    delimiter: options.delimiter,
                    excelStrings: false,
                    fields
                });
            }
            exports["default"] = default_1;
        },
        2: (__unused_webpack_module, exports, __webpack_require__) => {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const json2csv_1 = __webpack_require__(1331);
            const igt_name_map_1 = __webpack_require__(7574);
            const issue_mapper_1 = __webpack_require__(2623);
            function default_1(issues, options = {
                delimiter: ","
            }) {
                const fields = [ {
                    label: "Page URL",
                    value: "testUrl"
                }, {
                    label: "Page Title",
                    value: "testPageTitle"
                }, {
                    label: "Outcome",
                    value: ""
                }, {
                    label: "Impact",
                    value: row => row.isNeedsReview ? "" : row.impact
                }, {
                    label: "Code Snippet",
                    value: "source"
                }, {
                    label: "Selector",
                    value: "selector"
                }, {
                    label: "Remediation",
                    value: "summary"
                }, {
                    label: "Manual",
                    value: row => row.isManual ? "Yes" : "No"
                }, {
                    label: "Rule ID",
                    value: "rule"
                }, {
                    label: "Help",
                    value: "helpText"
                }, {
                    label: "Description",
                    value: "description"
                }, {
                    label: "Help URL",
                    value: "helpUrl"
                }, {
                    label: "Standard",
                    value: ""
                }, {
                    label: "WCAG 2 Success Criteria",
                    value: ""
                }, {
                    label: "Section 508 Paragraph",
                    value: ""
                }, {
                    label: "Tags",
                    value: row => (0, issue_mapper_1.getIssueTags)(row).join(",")
                }, {
                    label: "Date",
                    value: "createdAt"
                }, {
                    label: "axe-core",
                    value: "axeVersion"
                }, {
                    label: "Needs Review",
                    value: row => row.isNeedsReview ? "Yes" : "No"
                }, {
                    label: "IGT",
                    value: row => (0, igt_name_map_1.getIgtName)(row.igtTool)
                }, {
                    label: "Found By",
                    value: "foundBy"
                }, {
                    label: "Test Title",
                    value: "testName"
                }, {
                    label: "Share URL",
                    value: "shareURL"
                } ];
                return (0, json2csv_1.parseAsync)(issues, {
                    delimiter: options.delimiter,
                    excelStrings: false,
                    fields
                });
            }
            exports["default"] = default_1;
        },
        3643: function(__unused_webpack_module, exports, __webpack_require__) {
            "use strict";
            var __importDefault = this && this.__importDefault || function(mod) {
                return mod && mod.__esModule ? mod : {
                    default: mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const common_tags_1 = __webpack_require__(1137);
            const accessibility_standards_1 = __importDefault(__webpack_require__(9906));
            const escapeHTML = str => String(str).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;");
            function default_1(issues, {ruleset, name, timestamp = (new Date).toISOString()}) {
                const groupedByRule = issues.reduce(((groupedData, issue) => {
                    groupedData[issue.rule] = groupedData[issue.rule] || {
                        igt: [],
                        manual: [],
                        automatic: []
                    };
                    if (issue.isManual && issue.igtTool) groupedData[issue.rule].igt.push(issue); else if (issue.isManual && !issue.igtTool) groupedData[issue.rule].manual.push(issue); else groupedData[issue.rule].automatic.push(issue);
                    return groupedData;
                }), {});
                return (0, common_tags_1.html)`
    <?xml version="1.0" encoding="utf-8"?>
    <testsuites>
      <testsuite
        id="${ruleset ? accessibility_standards_1.default[ruleset]?.value : accessibility_standards_1.default.all.value}"
        name="${name}"
        package="axe DevTools Browser Extension"
        timestamp="${timestamp}"
      >
        <properties>
          <property name="platform.userAgent" value="" />
          <property name="platform.testMachine" value="" />
          <property name="testSubject.fileName" value="" />
          <property name="testSubject.lineNum" value="-1" />
        </properties>
        ${Object.entries(groupedByRule).map((([ruleId, ruleIssues]) => Object.entries(ruleIssues).map((([type, typeIssues]) => {
                    if (!typeIssues.length) return "";
                    const firstIssue = typeIssues[0];
                    let id;
                    if ("igt" === type) id = `igt:${firstIssue.igtTool.replace(/\s+/g, "-").toLowerCase()}`; else if ("manual" === type) id = "manual";
                    return (0, common_tags_1.html)`
                  <testcase name="${ruleId}" ${id ? `id="${id}"` : ""}>
                    <failure
                      message="${firstIssue.description} ${firstIssue.helpUrl}"
                      impact="${firstIssue.impact}"
                    >
                      ${typeIssues.map((typeIssue => {
                        const selector = 1 === typeIssue.selector?.length ? typeIssue.selector[0] : JSON.stringify(typeIssue.selector);
                        const source = escapeHTML(typeIssue.source);
                        return [ `CSS Path: ${selector}`, `HTML: ${source}` ].join("\n");
                    })).join("\n\n--------\n\n")}
                    </failure>
                  </testcase>
                `;
                })).join("\n"))).join("\n")}
      </testsuite>
    </testsuites>
  `;
            }
            exports["default"] = default_1;
        },
        8362: (__unused_webpack_module, exports, __webpack_require__) => {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const igt_name_map_1 = __webpack_require__(7574);
            const issue_mapper_1 = __webpack_require__(2623);
            const get_screenshot_url_1 = __webpack_require__(8627);
            function default_1(issues, {baseScreenshotURL} = {}) {
                const createdAt = (new Date).toISOString();
                return JSON.stringify(issues.map((issue => ({
                    ruleId: issue.rule,
                    description: issue.description,
                    help: issue.helpText,
                    helpUrl: issue.helpUrl,
                    impact: issue.impact,
                    needsReview: !!issue.isNeedsReview,
                    isManual: issue.isManual,
                    selector: issue.selector,
                    summary: issue.summary,
                    source: issue.source,
                    tags: (0, issue_mapper_1.getIssueTags)(issue),
                    igt: (0, igt_name_map_1.getIgtName)(issue.igtTool),
                    testName: issue.testName,
                    shareURL: issue.shareURL,
                    createdAt: issue.createdAt || createdAt,
                    testUrl: issue.testUrl,
                    testPageTitle: issue.testPageTitle,
                    foundBy: issue.foundBy,
                    axeVersion: issue.axeVersion,
                    screenshotURL: (0, get_screenshot_url_1.getScreenshotUrl)(baseScreenshotURL, issue.screenshotId)
                })))).replace(/\\n/g, "\\\\n");
            }
            exports["default"] = default_1;
        },
        4435: (__unused_webpack_module, exports, __webpack_require__) => {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.jsonUFA = void 0;
            const get_screenshot_url_1 = __webpack_require__(8627);
            const getIssueRules = issues => {
                const issuesByRuleId = {};
                issues.forEach((issue => {
                    const ruleId = issue.id;
                    if (issuesByRuleId[ruleId]) {
                        issuesByRuleId[ruleId].count += issue.uniques.length;
                        return;
                    }
                    issuesByRuleId[ruleId] = {
                        count: issue.uniques.length,
                        mode: "automated"
                    };
                }));
                return Object.entries(issuesByRuleId).map((([ruleId, {count, mode}]) => ({
                    name: ruleId,
                    count,
                    mode
                })));
            };
            const jsonUFA = (record, results, additionalProperties) => {
                const failedRules = getIssueRules(results.results);
                const startDate = record.created_at ? new Date(record.created_at).toISOString() : null;
                const endDate = record.updated_at ? new Date(record.updated_at).toISOString() : null;
                const axeVersion = record.axe_core_version;
                const bestPracticesEnabled = false;
                const experimentalEnabled = false;
                const exportData = {
                    url: results.pageStateResults.length ? results.pageStateResults[0].url : "",
                    extensionVersion: record.data_source_version || "",
                    axeVersion,
                    standard: additionalProperties.standard,
                    testingStartDate: startDate,
                    testingEndDate: endDate,
                    bestPracticesEnabled,
                    experimentalEnabled,
                    issueSummary: {
                        critical: results.overview.numIssueSeverity.critical.totalCurrent,
                        minor: results.overview.numIssueSeverity.minor.totalCurrent,
                        moderate: results.overview.numIssueSeverity.moderate.totalCurrent,
                        serious: results.overview.numIssueSeverity.serious.totalCurrent,
                        needsReview: 0,
                        bestPractices: 0
                    },
                    remainingTestingSummary: {
                        run: false
                    },
                    igtSummary: void 0,
                    failedRules,
                    needsReview: [],
                    source: additionalProperties.source,
                    testDetails: {
                        testId: record.id,
                        axeVersion: axeVersion || "",
                        engine: additionalProperties.engine,
                        standard: additionalProperties.standard,
                        startDate,
                        endDate,
                        bestPracticesEnabled,
                        experimentalEnabled
                    },
                    allIssues: results.pageStateResults.map((pageStateResult => pageStateResult.result.map((issue => issue.uniques.map((uniqueIssue => ({
                        issueId: null,
                        ruleId: issue.id,
                        description: issue.description,
                        help: issue.help,
                        helpUrl: issue.helpUrl,
                        impact: issue.impact,
                        needsReview: false,
                        isManual: false,
                        summary: issue.description,
                        source: uniqueIssue.html,
                        selector: uniqueIssue.target,
                        tags: issue.tags,
                        testName: record.name,
                        shareURL: null,
                        createdAt: new Date(uniqueIssue.created_at).toISOString(),
                        isExperimental: false,
                        foundBy: record.user_email || void 0,
                        testUrl: uniqueIssue.url,
                        axeVersion,
                        testPageTitle: uniqueIssue.page_state || void 0,
                        integrationUrl: null,
                        screenshotURL: (0, get_screenshot_url_1.getScreenshotUrl)(additionalProperties.baseScreenshotURL, uniqueIssue.screenshot_id)
                    }))))))).flat(3)
                };
                return JSON.stringify(exportData).replace(/\\n/g, "\\\\n");
            };
            exports.jsonUFA = jsonUFA;
        },
        6808: (__unused_webpack_module, exports, __webpack_require__) => {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const issue_mapper_1 = __webpack_require__(2623);
            const universal_format_utils_1 = __webpack_require__(1393);
            const get_screenshot_url_1 = __webpack_require__(8627);
            function default_1(test, manifests, issues, additionalProperties) {
                const issueSummary = (0, universal_format_utils_1.getIssueSummary)(issues);
                const igtSummary = (0, universal_format_utils_1.getIgtSummary)(test, manifests, issues);
                const failedRules = (0, universal_format_utils_1.getIssueRules)(issues);
                const needsReview = (0, universal_format_utils_1.getIssueRules)(issues, true);
                const startDate = additionalProperties.startDate ? new Date(additionalProperties.startDate).toISOString() : null;
                const endDate = additionalProperties.endDate ? new Date(additionalProperties.endDate).toISOString() : null;
                const axeVersion = test.metadata.axeVersion;
                const bestPracticesEnabled = additionalProperties.bestPracticesEnabled;
                const experimentalEnabled = additionalProperties.experimentalEnabled;
                const exportData = {
                    url: test.url,
                    extensionVersion: additionalProperties.extensionVersion,
                    axeVersion,
                    standard: additionalProperties.standard,
                    testingStartDate: startDate,
                    testingEndDate: endDate,
                    bestPracticesEnabled,
                    experimentalEnabled,
                    issueSummary,
                    remainingTestingSummary: {
                        run: !!test.manual_tests_completed_at
                    },
                    igtSummary,
                    failedRules,
                    needsReview,
                    source: additionalProperties.source,
                    testDetails: {
                        testId: test.id,
                        axeVersion,
                        engine: additionalProperties.engine,
                        standard: additionalProperties.standard,
                        startDate,
                        endDate,
                        bestPracticesEnabled,
                        experimentalEnabled
                    },
                    allIssues: issues.map((issue => ({
                        ...(0, issue_mapper_1.mapAxeExtensionIssueToUniversalIssue)(issue),
                        appIdentifier: issue.appIdentifier,
                        screenTitle: issue.screenTitle,
                        foundBy: issue.foundBy || additionalProperties.foundBy,
                        testUrl: issue.testUrl || test.url,
                        analyzedValues: issue.analyzedValues,
                        axeVersion: issue.axeVersion || axeVersion,
                        testPageTitle: issue.testPageTitle,
                        screenshotURL: (0, get_screenshot_url_1.getScreenshotUrl)(additionalProperties.baseScreenshotURL, issue.screenshotId)
                    })))
                };
                return JSON.stringify(exportData).replace(/\\n/g, "\\\\n");
            }
            exports["default"] = default_1;
        },
        1274: function(__unused_webpack_module, exports, __webpack_require__) {
            "use strict";
            var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                if (void 0 === k2) k2 = k;
                var desc = Object.getOwnPropertyDescriptor(m, k);
                if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
                    enumerable: true,
                    get: function() {
                        return m[k];
                    }
                };
                Object.defineProperty(o, k2, desc);
            } : function(o, m, k, k2) {
                if (void 0 === k2) k2 = k;
                o[k2] = m[k];
            });
            var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
                Object.defineProperty(o, "default", {
                    enumerable: true,
                    value: v
                });
            } : function(o, v) {
                o["default"] = v;
            });
            var __importStar = this && this.__importStar || function(mod) {
                if (mod && mod.__esModule) return mod;
                var result = {};
                if (null != mod) for (var k in mod) if ("default" !== k && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                __setModuleDefault(result, mod);
                return result;
            };
            var __exportStar = this && this.__exportStar || function(m, exports) {
                for (var p in m) if ("default" !== p && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
            };
            var __importDefault = this && this.__importDefault || function(mod) {
                return mod && mod.__esModule ? mod : {
                    default: mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.manifestUtils = exports.getIgtName = exports.buildPageStateKey = exports.getFriendlyFilename = exports.userFlowExport = exports.jUnitXmlExport = exports.universalExport = exports.exportIssues = exports.filterIssues = exports.mapDedupedPageStatesToUniversalIssue = exports.mapDedupedResultsToUniversalIssue = exports.mapAxeExtensionIssueToUniversalIssue = exports.mapIssueToSavedIssue = exports.mapAxeResultsToIssues = void 0;
            const issue_mapper_1 = __webpack_require__(2623);
            Object.defineProperty(exports, "mapDedupedResultsToUniversalIssue", {
                enumerable: true,
                get: function() {
                    return issue_mapper_1.mapDedupedResultsToUniversalIssue;
                }
            });
            Object.defineProperty(exports, "mapAxeExtensionIssueToUniversalIssue", {
                enumerable: true,
                get: function() {
                    return issue_mapper_1.mapAxeExtensionIssueToUniversalIssue;
                }
            });
            Object.defineProperty(exports, "mapDedupedPageStatesToUniversalIssue", {
                enumerable: true,
                get: function() {
                    return issue_mapper_1.mapDedupedPageStatesToUniversalIssue;
                }
            });
            Object.defineProperty(exports, "mapAxeResultsToIssues", {
                enumerable: true,
                get: function() {
                    return issue_mapper_1.mapAxeResultsToIssues;
                }
            });
            Object.defineProperty(exports, "mapIssueToSavedIssue", {
                enumerable: true,
                get: function() {
                    return issue_mapper_1.mapIssueToSavedIssue;
                }
            });
            const issue_filter_1 = __importDefault(__webpack_require__(8183));
            Object.defineProperty(exports, "filterIssues", {
                enumerable: true,
                get: function() {
                    return issue_filter_1.default;
                }
            });
            const export_1 = __webpack_require__(4792);
            Object.defineProperty(exports, "exportIssues", {
                enumerable: true,
                get: function() {
                    return export_1.exportIssues;
                }
            });
            Object.defineProperty(exports, "universalExport", {
                enumerable: true,
                get: function() {
                    return export_1.universalExport;
                }
            });
            Object.defineProperty(exports, "jUnitXmlExport", {
                enumerable: true,
                get: function() {
                    return export_1.jUnitXmlExport;
                }
            });
            Object.defineProperty(exports, "userFlowExport", {
                enumerable: true,
                get: function() {
                    return export_1.userFlowExport;
                }
            });
            const friendly_filename_1 = __webpack_require__(3247);
            Object.defineProperty(exports, "getFriendlyFilename", {
                enumerable: true,
                get: function() {
                    return friendly_filename_1.getFriendlyFilename;
                }
            });
            const igt_name_map_1 = __webpack_require__(7574);
            Object.defineProperty(exports, "getIgtName", {
                enumerable: true,
                get: function() {
                    return igt_name_map_1.getIgtName;
                }
            });
            const build_page_state_key_1 = __webpack_require__(5595);
            Object.defineProperty(exports, "buildPageStateKey", {
                enumerable: true,
                get: function() {
                    return build_page_state_key_1.buildPageStateKey;
                }
            });
            const manifestUtils = __importStar(__webpack_require__(6407));
            exports.manifestUtils = manifestUtils;
            __exportStar(__webpack_require__(5571), exports);
        },
        5571: (__unused_webpack_module, exports) => {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.deprecatedIgtTools = void 0;
            exports.deprecatedIgtTools = [ "page-info", "buttons-and-links", "lists", "headings" ];
        },
        5595: (__unused_webpack_module, exports) => {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.buildPageStateKey = void 0;
            const buildPageStateKey = pageState => `${new Date(pageState.created_at).getTime()}-${pageState.url}`;
            exports.buildPageStateKey = buildPageStateKey;
        },
        3247: function(__unused_webpack_module, exports, __webpack_require__) {
            "use strict";
            var __importDefault = this && this.__importDefault || function(mod) {
                return mod && mod.__esModule ? mod : {
                    default: mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.getFriendlyFilename = void 0;
            const slugify_1 = __importDefault(__webpack_require__(1485));
            const FRIENDLY_FILENAME_LIMIT = 64;
            function getFriendlyFilename(url, name) {
                let urlString;
                try {
                    urlString = new URL(url).host;
                } catch (ex) {}
                const date = (new Date).toISOString().substring(0, 10);
                return `${[ urlString, name ].filter(Boolean).map((s => (0, slugify_1.default)(s))).join("-").substring(0, FRIENDLY_FILENAME_LIMIT)}-${date}`;
            }
            exports.getFriendlyFilename = getFriendlyFilename;
        },
        8627: (__unused_webpack_module, exports) => {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.getScreenshotUrl = void 0;
            const getScreenshotUrl = (baseScreenshotURL, screenshotId) => baseScreenshotURL && screenshotId ? `${baseScreenshotURL}/api/screenshots/${screenshotId}` : null;
            exports.getScreenshotUrl = getScreenshotUrl;
        },
        7574: (__unused_webpack_module, exports) => {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.getIgtName = exports.igtNameMap = void 0;
            exports.igtNameMap = {
                table: "Table",
                keyboard: "Keyboard",
                "aria-modal": "Modal Dialog",
                "interactive-elements": "Interactive Elements",
                structure: "Structure",
                "page-info": "Page Information",
                "buttons-and-links": "Buttons and Links",
                lists: "Lists",
                images: "Images",
                headings: "Headings",
                forms: "Forms"
            };
            const getIgtName = igt => igt ? exports.igtNameMap[igt] : "";
            exports.getIgtName = getIgtName;
            exports["default"] = exports.igtNameMap;
        },
        8183: (__unused_webpack_module, exports) => {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            function filterIssues(issues, filter) {
                const filters = Object.entries(filter);
                return issues.filter((issue => {
                    for (const [key, filterValue] of filters) {
                        const issueValue = issue[key];
                        if ("undefined" === typeof issueValue) return false;
                        const filterIsArray = Array.isArray(filterValue);
                        const valueIsArray = Array.isArray(issueValue);
                        if (valueIsArray) if (filterIsArray) return filterValue.some((value => issueValue.includes(value))); else return issueValue.includes(filterValue); else if (filterIsArray) return filterValue.some((value => value === issueValue)); else if (issueValue !== filterValue) return false;
                    }
                    return true;
                }));
            }
            exports["default"] = filterIssues;
        },
        2623: function(__unused_webpack_module, exports, __webpack_require__) {
            "use strict";
            var __importDefault = this && this.__importDefault || function(mod) {
                return mod && mod.__esModule ? mod : {
                    default: mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.mapDedupedPageStatesToUniversalIssue = exports.mapDedupedResultsToUniversalIssue = exports.mapAxeExtensionIssueToUniversalIssue = exports.mapIssueToSavedIssue = exports.getIssueTags = exports.mapAxeResultsToIssues = void 0;
            const axe_core_1 = __importDefault(__webpack_require__(8405));
            const descriptions_json_1 = __importDefault(__webpack_require__(4379));
            const igt_name_map_1 = __webpack_require__(7574);
            const build_page_state_key_1 = __webpack_require__(5595);
            const WCAG_REGEX = /^wcag\d{1,2}a{1,3}$/;
            const checkpointToTag = checkpoint => checkpoint ? `wcag${checkpoint.replace(/\./g, "")}` : "";
            const findWcagTag = data => data.find((d => d.standards.find((t => WCAG_REGEX.test(t)))))?.standards || [];
            const allowedRuleTags = {
                "keyboard-inaccessible": "wcag211a",
                "alt-text-essential-image-text": "wcag111b",
                "alt-text-missing": "wcag111b"
            };
            const getCheckpointTags = (data, rule) => data.map((d => !!d.checkpoint && d.standards.find((t => WCAG_REGEX.test(t))) ? checkpointToTag(d.checkpoint) : "")).filter(Boolean).filter((tag => !allowedRuleTags[rule] || allowedRuleTags[rule] === tag));
            function mapAxeResultsToIssues(axeResults) {
                const issueMapper = (results, overrideProperties) => results.map((axeIssue => axeIssue.nodes.map((node => ({
                    rule: axeIssue.id,
                    description: axeIssue.description,
                    helpText: axeIssue.help,
                    helpUrl: axeIssue.helpUrl,
                    impact: axeIssue.impact,
                    potentialImpact: overrideProperties?.isNeedsReview ? axeIssue.impact : null,
                    selector: node.target,
                    source: node.html,
                    summary: node.failureSummary,
                    tags: axeIssue.tags,
                    isBestPractice: axeIssue.tags.includes("best-practice"),
                    isNeedsReview: false,
                    isManual: false,
                    is_off_screen: false,
                    is_scrolled_out_of_view: false,
                    remediation: {
                        any: node.any,
                        all: node.all,
                        none: node.none
                    },
                    createdAt: axeResults.timestamp,
                    ...overrideProperties
                }))))).flat();
                return [ ...issueMapper(axeResults.violations), ...issueMapper(axeResults.incomplete, {
                    isNeedsReview: true,
                    impact: null
                }) ];
            }
            exports.mapAxeResultsToIssues = mapAxeResultsToIssues;
            function getIssueTags({rule, tags}) {
                if (Array.isArray(tags)) return tags;
                const axeRule = axe_core_1.default.getRules().find((auditRule => auditRule.ruleId === rule));
                if (axeRule?.tags?.length) return axeRule.tags;
                const issue = descriptions_json_1.default.find((({id}) => id === rule));
                if (!issue) return [];
                return [ ...findWcagTag(issue.data), ...getCheckpointTags(issue.data, rule) ];
            }
            exports.getIssueTags = getIssueTags;
            function mapIssueToSavedIssue(issue, additionalProperties = {}) {
                const tags = getIssueTags(issue);
                return {
                    rule: issue.rule,
                    description: issue.description,
                    helpText: issue.help,
                    helpUrl: issue.help_url,
                    impact: issue.needs_review ? null : issue.impact,
                    potentialImpact: issue.needs_review ? issue.impact : null,
                    selector: issue.selector,
                    source: issue.source,
                    summary: issue.summary,
                    tags,
                    isBestPractice: "best-practice" === issue.variant || tags.includes("best-practice"),
                    isNeedsReview: issue.needs_review,
                    isManual: issue.is_manual,
                    is_off_screen: issue.is_off_screen,
                    is_scrolled_out_of_view: issue.is_scrolled_out_of_view,
                    id: issue.id,
                    testId: issue.test_id,
                    testName: issue.test_name,
                    testUrl: issue.test_url,
                    foundBy: issue.found_by,
                    createdAt: issue.created_at,
                    updatedAt: issue.updated_at,
                    remediation: issue.remediation,
                    igtTool: issue.manifest_guide,
                    sharedWith: issue.shared_with,
                    screenshotId: issue.screenshot_id,
                    boundingBox: issue.bounding_box,
                    manifestId: issue.manifest_id,
                    integrationUrl: issue.integration_url,
                    ...additionalProperties
                };
            }
            exports.mapIssueToSavedIssue = mapIssueToSavedIssue;
            const mapAxeExtensionIssueToUniversalIssue = issue => {
                const createdAt = (new Date).toISOString();
                const tags = getIssueTags(issue);
                const guideName = (0, igt_name_map_1.getIgtName)(issue.igtTool);
                return {
                    issueId: issue.id || null,
                    ruleId: issue.rule,
                    description: issue.description,
                    help: issue.helpText,
                    helpUrl: issue.helpUrl,
                    impact: issue.impact,
                    needsReview: issue.isNeedsReview,
                    isManual: issue.isManual,
                    selector: issue.selector,
                    summary: issue.summary,
                    source: issue.source,
                    tags,
                    igt: guideName,
                    testName: issue.testName,
                    shareURL: issue.shareURL || null,
                    createdAt: issue.createdAt ? new Date(issue.createdAt).toISOString() : createdAt,
                    isExperimental: tags.includes("experimental"),
                    foundBy: issue.foundBy,
                    manifestId: issue.manifestId,
                    integrationUrl: issue.integrationUrl || null,
                    igtId: issue.igtTool
                };
            };
            exports.mapAxeExtensionIssueToUniversalIssue = mapAxeExtensionIssueToUniversalIssue;
            const mapDedupedResultToUniversalIssue = (result, unique) => {
                const {id, impact, tags, description, help, helpUrl, duplicates} = result;
                return {
                    issueId: null,
                    ruleId: id,
                    description,
                    help,
                    helpUrl,
                    impact,
                    needsReview: false,
                    isExperimental: false,
                    isManual: false,
                    summary: unique.failureSummary,
                    shareURL: null,
                    selector: unique.target,
                    source: unique.html,
                    tags,
                    createdAt: new Date(unique.created_at).toISOString(),
                    screenshotId: unique.screenshot_id || null,
                    boundingBox: unique.advanced?.visibleBoundingRect ?? null,
                    testUrl: unique.url,
                    testPageTitle: unique.page_state || "",
                    duplicates,
                    integrationUrl: null
                };
            };
            const mapDedupedResultsToUniversalIssue = watcherResults => watcherResults.flatMap((result => result.uniques.map((unique => mapDedupedResultToUniversalIssue(result, unique)))));
            exports.mapDedupedResultsToUniversalIssue = mapDedupedResultsToUniversalIssue;
            const mapDedupedPageStatesToUniversalIssue = pageStates => pageStates.flatMap((pageState => pageState.result.flatMap((result => result.uniques.map((unique => ({
                ...mapDedupedResultToUniversalIssue(result, unique),
                pageStateKey: (0, build_page_state_key_1.buildPageStateKey)(pageState),
                isNewIssue: unique.isNewIssue
            })))))));
            exports.mapDedupedPageStatesToUniversalIssue = mapDedupedPageStatesToUniversalIssue;
        },
        6407: (__unused_webpack_module, exports) => {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.getManifestsToDelete = exports.getGroupForRerun = exports.getCurrentIssues = exports.getCurrentManifestIds = exports.getCurrentManifestForRerunGroup = exports.getManifestRerunGroupsByType = exports.getManifestRerunGroups = exports.getRunIssues = exports.getRunProgress = exports.getRunDuration = exports.getMetadata = void 0;
            const getMetadata = run => run.body?.metadata || {};
            exports.getMetadata = getMetadata;
            const getRunDuration = run => {
                const metadata = (0, exports.getMetadata)(run);
                const duration = metadata.duration && metadata.duration > 0 ? metadata.duration / 1e3 / 60 : 0;
                return duration;
            };
            exports.getRunDuration = getRunDuration;
            const getRunProgress = run => {
                const metadata = (0, exports.getMetadata)(run);
                const steps = metadata.progress?.filter((step => step.text)) || [];
                let currentStepIndex = steps.findIndex((step => "current" === step.status));
                if (-1 === currentStepIndex) currentStepIndex = 0;
                const totalSteps = steps.length;
                const completedSteps = metadata.complete ? totalSteps : currentStepIndex;
                const progress = Math.trunc(completedSteps / totalSteps * 100) || 0;
                return progress;
            };
            exports.getRunProgress = getRunProgress;
            const getRunIssues = run => {
                const metadata = (0, exports.getMetadata)(run);
                const issues = (metadata.issues || []).map((issue => {
                    const mappedIssue = {
                        ...issue,
                        isManual: issue.is_manual
                    };
                    delete mappedIssue.is_manual;
                    return mappedIssue;
                }));
                return issues;
            };
            exports.getRunIssues = getRunIssues;
            const getManifestRerunGroups = manifests => {
                const originalManifests = [];
                const manifestsByRerunId = {};
                const manifestsById = {};
                for (const manifest of manifests) {
                    if (manifest.body.__rerunFromManifestId) manifestsByRerunId[manifest.body.__rerunFromManifestId] = manifest; else originalManifests.push(manifest);
                    manifestsById[manifest.id] = manifest;
                }
                Object.keys(manifestsByRerunId).forEach((rerunId => {
                    if (!manifestsById[rerunId]) originalManifests.push(manifestsByRerunId[rerunId]);
                }));
                const rerunGroups = originalManifests.map((originalManifest => {
                    const rerunGroup = [ originalManifest ];
                    let currentManifest = originalManifest;
                    while (currentManifest) {
                        const rerunManifest = manifestsByRerunId[currentManifest.id];
                        if (rerunManifest) rerunGroup.push(rerunManifest);
                        currentManifest = rerunManifest;
                    }
                    return rerunGroup.reverse();
                }));
                const sortedRerunGroups = rerunGroups.sort(((groupA, groupB) => {
                    const groupALatestRun = groupA[0];
                    const groupBLatestRun = groupB[0];
                    return new Date(groupALatestRun.updated_at || groupALatestRun.created_at || 0) < new Date(groupBLatestRun.updated_at || groupBLatestRun.created_at || 0) ? 1 : -1;
                }));
                return sortedRerunGroups;
            };
            exports.getManifestRerunGroups = getManifestRerunGroups;
            const getManifestRerunGroupsByType = manifestsByType => {
                const manifestRerunGroups = Object.keys(manifestsByType).reduce(((acc, type) => {
                    acc[type] = (0, exports.getManifestRerunGroups)(manifestsByType[type]);
                    return acc;
                }), {});
                return manifestRerunGroups;
            };
            exports.getManifestRerunGroupsByType = getManifestRerunGroupsByType;
            const getCurrentManifestForRerunGroup = manifestRerunGroup => {
                const mostRecentCompletedManifest = manifestRerunGroup.find((manifest => !!(0, exports.getMetadata)(manifest).complete));
                return mostRecentCompletedManifest || manifestRerunGroup[0];
            };
            exports.getCurrentManifestForRerunGroup = getCurrentManifestForRerunGroup;
            const getCurrentManifestIds = manifestRerunGroups => manifestRerunGroups.reduce(((acc, rerunGroup) => {
                const currentManifest = (0, exports.getCurrentManifestForRerunGroup)(rerunGroup);
                acc.add(currentManifest.id);
                return acc;
            }), new Set);
            exports.getCurrentManifestIds = getCurrentManifestIds;
            const getCurrentIssues = (issues, manifestRerunGroups) => {
                const currentManifestIds = (0, exports.getCurrentManifestIds)(manifestRerunGroups);
                return issues.filter((issue => !issue.manifestId || currentManifestIds.has(issue.manifestId)));
            };
            exports.getCurrentIssues = getCurrentIssues;
            const getGroupForRerun = (rerun, rerunGroups) => rerunGroups.find((group => group.some((manifest => manifest.id === rerun.id)))) || null;
            exports.getGroupForRerun = getGroupForRerun;
            const getManifestsToDelete = (rerun, rerunGroups) => {
                const rerunGroup = (0, exports.getGroupForRerun)(rerun, rerunGroups);
                if (!rerunGroup) return [];
                const rerunIndex = rerunGroup.findIndex((run => run.id === rerun.id));
                return -1 !== rerunIndex ? rerunGroup.slice(0, rerunIndex + 1) : [];
            };
            exports.getManifestsToDelete = getManifestsToDelete;
        },
        1393: function(__unused_webpack_module, exports, __webpack_require__) {
            "use strict";
            var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                if (void 0 === k2) k2 = k;
                var desc = Object.getOwnPropertyDescriptor(m, k);
                if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
                    enumerable: true,
                    get: function() {
                        return m[k];
                    }
                };
                Object.defineProperty(o, k2, desc);
            } : function(o, m, k, k2) {
                if (void 0 === k2) k2 = k;
                o[k2] = m[k];
            });
            var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
                Object.defineProperty(o, "default", {
                    enumerable: true,
                    value: v
                });
            } : function(o, v) {
                o["default"] = v;
            });
            var __importStar = this && this.__importStar || function(mod) {
                if (mod && mod.__esModule) return mod;
                var result = {};
                if (null != mod) for (var k in mod) if ("default" !== k && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                __setModuleDefault(result, mod);
                return result;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.getIssueSummary = exports.getIssueRules = exports.getIgtSummary = void 0;
            const igt_name_map_1 = __importStar(__webpack_require__(7574));
            const types_1 = __webpack_require__(5571);
            const getIgtSummary = (record, manifests, issues) => {
                if (!Object.keys(manifests || {}).length) return [];
                const guides = Object.keys(igt_name_map_1.default).filter((igt => !types_1.deprecatedIgtTools.includes(igt)));
                return guides.flatMap((guide => {
                    const guideManifests = manifests[guide];
                    const guideSummary = {
                        tool: (0, igt_name_map_1.getIgtName)(guide),
                        skipped: !!record.skipped_guides?.includes(guide)
                    };
                    if (!guideManifests?.length) return {
                        ...guideSummary,
                        name: null,
                        run: false
                    };
                    return guideManifests.map((guideManifest => {
                        const summary = {
                            ...guideSummary,
                            name: guideManifest.name || null,
                            run: !!guideManifest.body?.metadata?.complete
                        };
                        if (summary.run) {
                            const guidedIssues = issues.filter((issue => issue.manifestId === guideManifest.id));
                            summary.issues = (0, exports.getIssueSummary)(guidedIssues, true);
                            summary.duration = guideManifest.body?.metadata?.duration;
                        }
                        return summary;
                    }));
                }));
            };
            exports.getIgtSummary = getIgtSummary;
            const getIssueRules = (issues, onlyNeedsReview = false) => {
                const dictionary = {};
                issues.forEach((issue => {
                    if (onlyNeedsReview && !issue.isNeedsReview) return;
                    const rule = issue.rule;
                    if (dictionary[rule]) {
                        dictionary[rule].count++;
                        return;
                    }
                    dictionary[rule] = {};
                    dictionary[rule].count = 1;
                    dictionary[rule].mode = issue.isManual ? "manual" : "automated";
                }));
                const rules = [];
                for (const rule in dictionary) rules.push({
                    name: rule,
                    count: dictionary[rule].count,
                    mode: dictionary[rule].mode
                });
                return rules;
            };
            exports.getIssueRules = getIssueRules;
            const getIssueSummary = (issues, isIgt = false) => {
                const issueCount = {};
                issueCount.critical = issues.filter((issue => "critical" === issue.impact)).length || 0;
                issueCount.serious = issues.filter((issue => "serious" === issue.impact)).length || 0;
                issueCount.moderate = issues.filter((issue => "moderate" === issue.impact)).length || 0;
                issueCount.minor = issues.filter((issue => "minor" === issue.impact)).length || 0;
                if (isIgt) return issueCount;
                issueCount.bestPractices = issues.filter((issue => issue.isBestPractice)).length || 0;
                issueCount.needsReview = issues.filter((issue => issue.isNeedsReview)).length || 0;
                return issueCount;
            };
            exports.getIssueSummary = getIssueSummary;
        },
        8405: (module, exports, __webpack_require__) => {
            module = __webpack_require__.nmd(module);
            var __WEBPACK_AMD_DEFINE_ARRAY__;
            var __WEBPACK_AMD_DEFINE_FACTORY__;
            var __WEBPACK_AMD_DEFINE_RESULT__;
            (function axeFunction(window) {
                var global = window;
                var document = window.document;
                "use strict";
                function _typeof(o) {
                    "@babel/helpers - typeof";
                    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o) {
                        return typeof o;
                    } : function(o) {
                        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
                    }, _typeof(o);
                }
                var axe = axe || {};
                axe.version = "4.10.0";
                if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
                    return axe;
                }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), void 0 !== __WEBPACK_AMD_DEFINE_RESULT__ && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                if ("object" === (false ? 0 : _typeof(module)) && module.exports && "function" === typeof axeFunction.toString) {
                    axe.source = "(" + axeFunction.toString() + ')(typeof window === "object" ? window : this);';
                    module.exports = axe;
                }
                if ("function" === typeof window.getComputedStyle) window.axe = axe;
                function SupportError(error) {
                    this.name = "SupportError";
                    this.cause = error.cause;
                    this.message = "`".concat(error.cause, "` - feature unsupported in your environment.");
                    if (error.ruleId) {
                        this.ruleId = error.ruleId;
                        this.message += " Skipping ".concat(this.ruleId, " rule.");
                    }
                    this.stack = (new Error).stack;
                }
                SupportError.prototype = Object.create(Error.prototype);
                SupportError.prototype.constructor = SupportError;
                "use strict";
                var _excluded = [ "node" ], _excluded2 = [ "relatedNodes" ], _excluded3 = [ "node" ], _excluded4 = [ "variant" ], _excluded5 = [ "matches" ], _excluded6 = [ "chromium" ], _excluded7 = [ "noImplicit" ], _excluded8 = [ "noPresentational" ], _excluded9 = [ "precision", "format", "inGamut" ], _excluded10 = [ "space" ], _excluded11 = [ "algorithm" ], _excluded12 = [ "method" ], _excluded13 = [ "maxDeltaE", "deltaEMethod", "steps", "maxSteps" ], _excluded14 = [ "node" ], _excluded15 = [ "environmentData" ], _excluded16 = [ "environmentData" ], _excluded17 = [ "environmentData" ], _excluded18 = [ "environmentData" ], _excluded19 = [ "environmentData" ];
                function _toArray(r) {
                    return _arrayWithHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableRest();
                }
                function _defineProperty(e, r, t) {
                    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
                        value: t,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : e[r] = t, e;
                }
                function _construct(t, e, r) {
                    if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
                    var o = [ null ];
                    o.push.apply(o, e);
                    var p = new (t.bind.apply(t, o));
                    return r && _setPrototypeOf(p, r.prototype), p;
                }
                function _callSuper(t, o, e) {
                    return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
                }
                function _possibleConstructorReturn(t, e) {
                    if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
                    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                    return _assertThisInitialized(t);
                }
                function _assertThisInitialized(e) {
                    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e;
                }
                function _isNativeReflectConstruct() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {})));
                    } catch (t) {}
                    return (_isNativeReflectConstruct = function() {
                        return !!t;
                    })();
                }
                function _getPrototypeOf(t) {
                    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                    }, _getPrototypeOf(t);
                }
                function _inherits(t, e) {
                    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                    t.prototype = Object.create(e && e.prototype, {
                        constructor: {
                            value: t,
                            writable: !0,
                            configurable: !0
                        }
                    }), Object.defineProperty(t, "prototype", {
                        writable: !1
                    }), e && _setPrototypeOf(t, e);
                }
                function _setPrototypeOf(t, e) {
                    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
                        return t.__proto__ = e, t;
                    }, _setPrototypeOf(t, e);
                }
                function _classPrivateFieldInitSpec(e, t, a) {
                    _checkPrivateRedeclaration(e, t), t.set(e, a);
                }
                function _classPrivateMethodInitSpec(e, a) {
                    _checkPrivateRedeclaration(e, a), a.add(e);
                }
                function _checkPrivateRedeclaration(e, t) {
                    if (t.has(e)) throw new TypeError("Cannot initialize the same private elements twice on an object");
                }
                function _classPrivateFieldGet(s, a) {
                    return s.get(_assertClassBrand(s, a));
                }
                function _classPrivateFieldSet(s, a, r) {
                    return s.set(_assertClassBrand(s, a), r), r;
                }
                function _assertClassBrand(e, t, n) {
                    if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;
                    throw new TypeError("Private element is not present on this object");
                }
                function _objectWithoutProperties(e, t) {
                    if (null == e) return {};
                    var o, r, i = _objectWithoutPropertiesLoose(e, t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(e);
                        for (r = 0; r < n.length; r++) o = n[r], t.indexOf(o) >= 0 || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
                    }
                    return i;
                }
                function _objectWithoutPropertiesLoose(r, e) {
                    if (null == r) return {};
                    var t = {};
                    for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
                        if (e.indexOf(n) >= 0) continue;
                        t[n] = r[n];
                    }
                    return t;
                }
                function _toConsumableArray(r) {
                    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
                }
                function _nonIterableSpread() {
                    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                function _iterableToArray(r) {
                    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
                }
                function _arrayWithoutHoles(r) {
                    if (Array.isArray(r)) return _arrayLikeToArray(r);
                }
                function _extends() {
                    return _extends = Object.assign ? Object.assign.bind() : function(n) {
                        for (var e = 1; e < arguments.length; e++) {
                            var t = arguments[e];
                            for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
                        }
                        return n;
                    }, _extends.apply(null, arguments);
                }
                function _slicedToArray(r, e) {
                    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
                }
                function _nonIterableRest() {
                    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                function _iterableToArrayLimit(r, l) {
                    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
                    if (null != t) {
                        var e, n, i, u, a = [], f = !0, o = !1;
                        try {
                            if (i = (t = t.call(r)).next, 0 === l) {
                                if (Object(t) !== t) return;
                                f = !1;
                            } else for (;!(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0) ;
                        } catch (r) {
                            o = !0, n = r;
                        } finally {
                            try {
                                if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
                            } finally {
                                if (o) throw n;
                            }
                        }
                        return a;
                    }
                }
                function _arrayWithHoles(r) {
                    if (Array.isArray(r)) return r;
                }
                function _classCallCheck(a, n) {
                    if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
                }
                function _defineProperties(e, r) {
                    for (var t = 0; t < r.length; t++) {
                        var o = r[t];
                        o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), 
                        Object.defineProperty(e, _toPropertyKey(o.key), o);
                    }
                }
                function _createClass(e, r, t) {
                    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
                        writable: !1
                    }), e;
                }
                function _toPropertyKey(t) {
                    var i = _toPrimitive(t, "string");
                    return "symbol" == _typeof(i) ? i : i + "";
                }
                function _toPrimitive(t, r) {
                    if ("object" != _typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || "default");
                        if ("object" != _typeof(i)) return i;
                        throw new TypeError("@@toPrimitive must return a primitive value.");
                    }
                    return ("string" === r ? String : Number)(t);
                }
                function _createForOfIteratorHelper(r, e) {
                    var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
                    if (!t) {
                        if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
                            t && (r = t);
                            var _n = 0, F = function() {};
                            return {
                                s: F,
                                n: function() {
                                    return _n >= r.length ? {
                                        done: !0
                                    } : {
                                        done: !1,
                                        value: r[_n++]
                                    };
                                },
                                e: function(r) {
                                    throw r;
                                },
                                f: F
                            };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var o, a = !0, u = !1;
                    return {
                        s: function() {
                            t = t.call(r);
                        },
                        n: function() {
                            var r = t.next();
                            return a = r.done, r;
                        },
                        e: function(r) {
                            u = !0, o = r;
                        },
                        f: function() {
                            try {
                                a || null == t["return"] || t["return"]();
                            } finally {
                                if (u) throw o;
                            }
                        }
                    };
                }
                function _unsupportedIterableToArray(r, a) {
                    if (r) {
                        if ("string" == typeof r) return _arrayLikeToArray(r, a);
                        var t = {}.toString.call(r).slice(8, -1);
                        return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
                    }
                }
                function _arrayLikeToArray(r, a) {
                    (null == a || a > r.length) && (a = r.length);
                    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
                    return n;
                }
                function _typeof(o) {
                    "@babel/helpers - typeof";
                    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o) {
                        return typeof o;
                    } : function(o) {
                        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
                    }, _typeof(o);
                }
                (function(_Class_brand, _path, _CSS, _space, _r, _g, _b, _red, _green, _blue, _Class3_brand) {
                    var __create = Object.create;
                    var __defProp = Object.defineProperty;
                    var __getProtoOf = Object.getPrototypeOf;
                    var __hasOwnProp = Object.prototype.hasOwnProperty;
                    var __getOwnPropNames = Object.getOwnPropertyNames;
                    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
                    var __defNormalProp = function(obj, key, value) {
                        return key in obj ? __defProp(obj, key, {
                            enumerable: true,
                            configurable: true,
                            writable: true,
                            value
                        }) : obj[key] = value;
                    };
                    var __markAsModule = function(target) {
                        return __defProp(target, "__esModule", {
                            value: true
                        });
                    };
                    var __commonJS = function(cb, mod) {
                        return function() {
                            return mod || cb((mod = {
                                exports: {}
                            }).exports, mod), mod.exports;
                        };
                    };
                    var __export = function(target, all) {
                        for (var name in all) __defProp(target, name, {
                            get: all[name],
                            enumerable: true
                        });
                    };
                    var __exportStar = function(target, module, desc) {
                        if (module && "object" === _typeof(module) || "function" === typeof module) {
                            var _step, _iterator = _createForOfIteratorHelper(__getOwnPropNames(module));
                            try {
                                var _loop = function() {
                                    var key = _step.value;
                                    if (!__hasOwnProp.call(target, key) && "default" !== key) __defProp(target, key, {
                                        get: function() {
                                            return module[key];
                                        },
                                        enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable
                                    });
                                };
                                for (_iterator.s(); !(_step = _iterator.n()).done; ) _loop();
                            } catch (err) {
                                _iterator.e(err);
                            } finally {
                                _iterator.f();
                            }
                        }
                        return target;
                    };
                    var __toModule = function(module) {
                        return __exportStar(__markAsModule(__defProp(null != module ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? {
                            get: function() {
                                return module["default"];
                            },
                            enumerable: true
                        } : {
                            value: module,
                            enumerable: true
                        })), module);
                    };
                    var __publicField = function(obj, key, value) {
                        __defNormalProp(obj, "symbol" !== _typeof(key) ? key + "" : key, value);
                        return value;
                    };
                    var require_noop = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = function() {};
                    }));
                    var require_is_value = __commonJS((function(exports, module) {
                        "use strict";
                        var _undefined = require_noop()();
                        module.exports = function(val) {
                            return val !== _undefined && null !== val;
                        };
                    }));
                    var require_normalize_options = __commonJS((function(exports, module) {
                        "use strict";
                        var isValue = require_is_value();
                        var forEach = Array.prototype.forEach;
                        var create = Object.create;
                        var process2 = function(src, obj) {
                            var key;
                            for (key in src) obj[key] = src[key];
                        };
                        module.exports = function(opts1) {
                            var result = create(null);
                            forEach.call(arguments, (function(options) {
                                if (!isValue(options)) return;
                                process2(Object(options), result);
                            }));
                            return result;
                        };
                    }));
                    var require_is_implemented = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = function() {
                            var sign = Math.sign;
                            if ("function" !== typeof sign) return false;
                            return 1 === sign(10) && -1 === sign(-20);
                        };
                    }));
                    var require_shim = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = function(value) {
                            value = Number(value);
                            if (isNaN(value) || 0 === value) return value;
                            return value > 0 ? 1 : -1;
                        };
                    }));
                    var require_sign = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = require_is_implemented()() ? Math.sign : require_shim();
                    }));
                    var require_to_integer = __commonJS((function(exports, module) {
                        "use strict";
                        var sign = require_sign();
                        var abs = Math.abs;
                        var floor = Math.floor;
                        module.exports = function(value) {
                            if (isNaN(value)) return 0;
                            value = Number(value);
                            if (0 === value || !isFinite(value)) return value;
                            return sign(value) * floor(abs(value));
                        };
                    }));
                    var require_to_pos_integer = __commonJS((function(exports, module) {
                        "use strict";
                        var toInteger = require_to_integer();
                        var max2 = Math.max;
                        module.exports = function(value) {
                            return max2(0, toInteger(value));
                        };
                    }));
                    var require_resolve_length = __commonJS((function(exports, module) {
                        "use strict";
                        var toPosInt = require_to_pos_integer();
                        module.exports = function(optsLength, fnLength, isAsync) {
                            var length;
                            if (isNaN(optsLength)) {
                                length = fnLength;
                                if (!(length >= 0)) return 1;
                                if (isAsync && length) return length - 1;
                                return length;
                            }
                            if (false === optsLength) return false;
                            return toPosInt(optsLength);
                        };
                    }));
                    var require_valid_callable = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = function(fn) {
                            if ("function" !== typeof fn) throw new TypeError(fn + " is not a function");
                            return fn;
                        };
                    }));
                    var require_valid_value = __commonJS((function(exports, module) {
                        "use strict";
                        var isValue = require_is_value();
                        module.exports = function(value) {
                            if (!isValue(value)) throw new TypeError("Cannot use null or undefined");
                            return value;
                        };
                    }));
                    var require_iterate = __commonJS((function(exports, module) {
                        "use strict";
                        var callable = require_valid_callable();
                        var value = require_valid_value();
                        var bind = Function.prototype.bind;
                        var call = Function.prototype.call;
                        var keys = Object.keys;
                        var objPropertyIsEnumerable = Object.prototype.propertyIsEnumerable;
                        module.exports = function(method, defVal) {
                            return function(obj, cb) {
                                var list, thisArg = arguments[2], compareFn = arguments[3];
                                obj = Object(value(obj));
                                callable(cb);
                                list = keys(obj);
                                if (compareFn) list.sort("function" === typeof compareFn ? bind.call(compareFn, obj) : void 0);
                                if ("function" !== typeof method) method = list[method];
                                return call.call(method, list, (function(key, index) {
                                    if (!objPropertyIsEnumerable.call(obj, key)) return defVal;
                                    return call.call(cb, thisArg, obj[key], key, obj, index);
                                }));
                            };
                        };
                    }));
                    var require_for_each = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = require_iterate()("forEach");
                    }));
                    var require_registered_extensions = __commonJS((function() {
                        "use strict";
                    }));
                    var require_is_implemented2 = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = function() {
                            var obj, assign = Object.assign;
                            if ("function" !== typeof assign) return false;
                            obj = {
                                foo: "raz"
                            };
                            assign(obj, {
                                bar: "dwa"
                            }, {
                                trzy: "trzy"
                            });
                            return obj.foo + obj.bar + obj.trzy === "razdwatrzy";
                        };
                    }));
                    var require_is_implemented3 = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = function() {
                            try {
                                Object.keys("primitive");
                                return true;
                            } catch (e) {
                                return false;
                            }
                        };
                    }));
                    var require_shim2 = __commonJS((function(exports, module) {
                        "use strict";
                        var isValue = require_is_value();
                        var keys = Object.keys;
                        module.exports = function(object) {
                            return keys(isValue(object) ? Object(object) : object);
                        };
                    }));
                    var require_keys = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = require_is_implemented3()() ? Object.keys : require_shim2();
                    }));
                    var require_shim3 = __commonJS((function(exports, module) {
                        "use strict";
                        var keys = require_keys();
                        var value = require_valid_value();
                        var max2 = Math.max;
                        module.exports = function(dest, src) {
                            var error, i, assign, length = max2(arguments.length, 2);
                            dest = Object(value(dest));
                            assign = function(key) {
                                try {
                                    dest[key] = src[key];
                                } catch (e) {
                                    if (!error) error = e;
                                }
                            };
                            for (i = 1; i < length; ++i) {
                                src = arguments[i];
                                keys(src).forEach(assign);
                            }
                            if (void 0 !== error) throw error;
                            return dest;
                        };
                    }));
                    var require_assign = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = require_is_implemented2()() ? Object.assign : require_shim3();
                    }));
                    var require_is_object = __commonJS((function(exports, module) {
                        "use strict";
                        var isValue = require_is_value();
                        var map = {
                            function: true,
                            object: true
                        };
                        module.exports = function(value) {
                            return isValue(value) && map[_typeof(value)] || false;
                        };
                    }));
                    var require_custom = __commonJS((function(exports, module) {
                        "use strict";
                        var assign = require_assign();
                        var isObject = require_is_object();
                        var isValue = require_is_value();
                        var captureStackTrace = Error.captureStackTrace;
                        module.exports = function(message) {
                            var err2 = new Error(message), code = arguments[1], ext = arguments[2];
                            if (!isValue(ext)) if (isObject(code)) {
                                ext = code;
                                code = null;
                            }
                            if (isValue(ext)) assign(err2, ext);
                            if (isValue(code)) err2.code = code;
                            if (captureStackTrace) captureStackTrace(err2, module.exports);
                            return err2;
                        };
                    }));
                    var require_mixin = __commonJS((function(exports, module) {
                        "use strict";
                        var value = require_valid_value();
                        var defineProperty = Object.defineProperty;
                        var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
                        var getOwnPropertyNames = Object.getOwnPropertyNames;
                        var getOwnPropertySymbols = Object.getOwnPropertySymbols;
                        module.exports = function(target, source) {
                            var error, sourceObject = Object(value(source));
                            target = Object(value(target));
                            getOwnPropertyNames(sourceObject).forEach((function(name) {
                                try {
                                    defineProperty(target, name, getOwnPropertyDescriptor(source, name));
                                } catch (e) {
                                    error = e;
                                }
                            }));
                            if ("function" === typeof getOwnPropertySymbols) getOwnPropertySymbols(sourceObject).forEach((function(symbol) {
                                try {
                                    defineProperty(target, symbol, getOwnPropertyDescriptor(source, symbol));
                                } catch (e) {
                                    error = e;
                                }
                            }));
                            if (void 0 !== error) throw error;
                            return target;
                        };
                    }));
                    var require_define_length = __commonJS((function(exports, module) {
                        "use strict";
                        var toPosInt = require_to_pos_integer();
                        var test = function(arg1, arg2) {
                            return arg2;
                        };
                        var desc;
                        var defineProperty;
                        var generate;
                        var mixin;
                        try {
                            Object.defineProperty(test, "length", {
                                configurable: true,
                                writable: false,
                                enumerable: false,
                                value: 1
                            });
                        } catch (ignore) {}
                        if (1 === test.length) {
                            desc = {
                                configurable: true,
                                writable: false,
                                enumerable: false
                            };
                            defineProperty = Object.defineProperty;
                            module.exports = function(fn, length) {
                                length = toPosInt(length);
                                if (fn.length === length) return fn;
                                desc.value = length;
                                return defineProperty(fn, "length", desc);
                            };
                        } else {
                            mixin = require_mixin();
                            generate = function() {
                                var cache2 = [];
                                return function(length) {
                                    var args, i = 0;
                                    if (cache2[length]) return cache2[length];
                                    args = [];
                                    while (length--) args.push("a" + (++i).toString(36));
                                    return new Function("fn", "return function (" + args.join(", ") + ") { return fn.apply(this, arguments); };");
                                };
                            }();
                            module.exports = function(src, length) {
                                var target;
                                length = toPosInt(length);
                                if (src.length === length) return src;
                                target = generate(length)(src);
                                try {
                                    mixin(target, src);
                                } catch (ignore) {}
                                return target;
                            };
                        }
                    }));
                    var require_is = __commonJS((function(exports, module) {
                        "use strict";
                        var _undefined = void 0;
                        module.exports = function(value) {
                            return value !== _undefined && null !== value;
                        };
                    }));
                    var require_is2 = __commonJS((function(exports, module) {
                        "use strict";
                        var isValue = require_is();
                        var possibleTypes = {
                            object: true,
                            function: true,
                            undefined: true
                        };
                        module.exports = function(value) {
                            if (!isValue(value)) return false;
                            return hasOwnProperty.call(possibleTypes, _typeof(value));
                        };
                    }));
                    var require_is3 = __commonJS((function(exports, module) {
                        "use strict";
                        var isObject = require_is2();
                        module.exports = function(value) {
                            if (!isObject(value)) return false;
                            try {
                                if (!value.constructor) return false;
                                return value.constructor.prototype === value;
                            } catch (error) {
                                return false;
                            }
                        };
                    }));
                    var require_is4 = __commonJS((function(exports, module) {
                        "use strict";
                        var isPrototype = require_is3();
                        module.exports = function(value) {
                            if ("function" !== typeof value) return false;
                            if (!hasOwnProperty.call(value, "length")) return false;
                            try {
                                if ("number" !== typeof value.length) return false;
                                if ("function" !== typeof value.call) return false;
                                if ("function" !== typeof value.apply) return false;
                            } catch (error) {
                                return false;
                            }
                            return !isPrototype(value);
                        };
                    }));
                    var require_is5 = __commonJS((function(exports, module) {
                        "use strict";
                        var isFunction = require_is4();
                        var classRe = /^\s*class[\s{/}]/;
                        var functionToString = Function.prototype.toString;
                        module.exports = function(value) {
                            if (!isFunction(value)) return false;
                            if (classRe.test(functionToString.call(value))) return false;
                            return true;
                        };
                    }));
                    var require_is_implemented4 = __commonJS((function(exports, module) {
                        "use strict";
                        var str = "razdwatrzy";
                        module.exports = function() {
                            if ("function" !== typeof str.contains) return false;
                            return true === str.contains("dwa") && false === str.contains("foo");
                        };
                    }));
                    var require_shim4 = __commonJS((function(exports, module) {
                        "use strict";
                        var indexOf = String.prototype.indexOf;
                        module.exports = function(searchString) {
                            return indexOf.call(this, searchString, arguments[1]) > -1;
                        };
                    }));
                    var require_contains = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = require_is_implemented4()() ? String.prototype.contains : require_shim4();
                    }));
                    var require_d = __commonJS((function(exports, module) {
                        "use strict";
                        var isValue = require_is();
                        var isPlainFunction = require_is5();
                        var assign = require_assign();
                        var normalizeOpts = require_normalize_options();
                        var contains3 = require_contains();
                        var d2 = module.exports = function(dscr, value) {
                            var c4, e, w, options, desc;
                            if (arguments.length < 2 || "string" !== typeof dscr) {
                                options = value;
                                value = dscr;
                                dscr = null;
                            } else options = arguments[2];
                            if (isValue(dscr)) {
                                c4 = contains3.call(dscr, "c");
                                e = contains3.call(dscr, "e");
                                w = contains3.call(dscr, "w");
                            } else {
                                c4 = w = true;
                                e = false;
                            }
                            desc = {
                                value,
                                configurable: c4,
                                enumerable: e,
                                writable: w
                            };
                            return !options ? desc : assign(normalizeOpts(options), desc);
                        };
                        d2.gs = function(dscr, get2, set2) {
                            var c4, e, options, desc;
                            if ("string" !== typeof dscr) {
                                options = set2;
                                set2 = get2;
                                get2 = dscr;
                                dscr = null;
                            } else options = arguments[3];
                            if (!isValue(get2)) get2 = void 0; else if (!isPlainFunction(get2)) {
                                options = get2;
                                get2 = set2 = void 0;
                            } else if (!isValue(set2)) set2 = void 0; else if (!isPlainFunction(set2)) {
                                options = set2;
                                set2 = void 0;
                            }
                            if (isValue(dscr)) {
                                c4 = contains3.call(dscr, "c");
                                e = contains3.call(dscr, "e");
                            } else {
                                c4 = true;
                                e = false;
                            }
                            desc = {
                                get: get2,
                                set: set2,
                                configurable: c4,
                                enumerable: e
                            };
                            return !options ? desc : assign(normalizeOpts(options), desc);
                        };
                    }));
                    var require_event_emitter = __commonJS((function(exports, module) {
                        "use strict";
                        var d2 = require_d();
                        var callable = require_valid_callable();
                        var apply = Function.prototype.apply;
                        var call = Function.prototype.call;
                        var create = Object.create;
                        var defineProperty = Object.defineProperty;
                        var defineProperties = Object.defineProperties;
                        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
                        var descriptor = {
                            configurable: true,
                            enumerable: false,
                            writable: true
                        };
                        var on;
                        var once;
                        var off;
                        var emit;
                        var methods;
                        var descriptors;
                        var base;
                        on = function(type2, listener) {
                            var data;
                            callable(listener);
                            if (!hasOwnProperty2.call(this, "__ee__")) {
                                data = descriptor.value = create(null);
                                defineProperty(this, "__ee__", descriptor);
                                descriptor.value = null;
                            } else data = this.__ee__;
                            if (!data[type2]) data[type2] = listener; else if ("object" === _typeof(data[type2])) data[type2].push(listener); else data[type2] = [ data[type2], listener ];
                            return this;
                        };
                        once = function(type2, listener) {
                            var _once, self2;
                            callable(listener);
                            self2 = this;
                            on.call(this, type2, _once = function() {
                                off.call(self2, type2, _once);
                                apply.call(listener, this, arguments);
                            });
                            _once.__eeOnceListener__ = listener;
                            return this;
                        };
                        off = function(type2, listener) {
                            var data, listeners, candidate, i;
                            callable(listener);
                            if (!hasOwnProperty2.call(this, "__ee__")) return this;
                            data = this.__ee__;
                            if (!data[type2]) return this;
                            listeners = data[type2];
                            if ("object" === _typeof(listeners)) {
                                for (i = 0; candidate = listeners[i]; ++i) if (candidate === listener || candidate.__eeOnceListener__ === listener) if (2 === listeners.length) data[type2] = listeners[i ? 0 : 1]; else listeners.splice(i, 1);
                            } else if (listeners === listener || listeners.__eeOnceListener__ === listener) delete data[type2];
                            return this;
                        };
                        emit = function(type2) {
                            var i, l, listener, listeners, args;
                            if (!hasOwnProperty2.call(this, "__ee__")) return;
                            listeners = this.__ee__[type2];
                            if (!listeners) return;
                            if ("object" === _typeof(listeners)) {
                                l = arguments.length;
                                args = new Array(l - 1);
                                for (i = 1; i < l; ++i) args[i - 1] = arguments[i];
                                listeners = listeners.slice();
                                for (i = 0; listener = listeners[i]; ++i) apply.call(listener, this, args);
                            } else switch (arguments.length) {
                              case 1:
                                call.call(listeners, this);
                                break;

                              case 2:
                                call.call(listeners, this, arguments[1]);
                                break;

                              case 3:
                                call.call(listeners, this, arguments[1], arguments[2]);
                                break;

                              default:
                                l = arguments.length;
                                args = new Array(l - 1);
                                for (i = 1; i < l; ++i) args[i - 1] = arguments[i];
                                apply.call(listeners, this, args);
                            }
                        };
                        methods = {
                            on,
                            once,
                            off,
                            emit
                        };
                        descriptors = {
                            on: d2(on),
                            once: d2(once),
                            off: d2(off),
                            emit: d2(emit)
                        };
                        base = defineProperties({}, descriptors);
                        module.exports = exports = function(o) {
                            return null == o ? create(base) : defineProperties(Object(o), descriptors);
                        };
                        exports.methods = methods;
                    }));
                    var require_is_implemented5 = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = function() {
                            var arr, result, from = Array.from;
                            if ("function" !== typeof from) return false;
                            arr = [ "raz", "dwa" ];
                            result = from(arr);
                            return Boolean(result && result !== arr && "dwa" === result[1]);
                        };
                    }));
                    var require_is_implemented6 = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = function() {
                            if ("object" !== ("undefined" === typeof globalThis ? "undefined" : _typeof(globalThis))) return false;
                            if (!globalThis) return false;
                            return globalThis.Array === Array;
                        };
                    }));
                    var require_implementation = __commonJS((function(exports, module) {
                        var naiveFallback = function() {
                            if ("object" === ("undefined" === typeof self ? "undefined" : _typeof(self)) && self) return self;
                            if ("object" === ("undefined" === typeof window ? "undefined" : _typeof(window)) && window) return window;
                            throw new Error("Unable to resolve global `this`");
                        };
                        module.exports = function() {
                            if (this) return this;
                            try {
                                Object.defineProperty(Object.prototype, "__global__", {
                                    get: function() {
                                        return this;
                                    },
                                    configurable: true
                                });
                            } catch (error) {
                                return naiveFallback();
                            }
                            try {
                                if (!__global__) return naiveFallback();
                                return __global__;
                            } finally {
                                delete Object.prototype.__global__;
                            }
                        }();
                    }));
                    var require_global_this = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = require_is_implemented6()() ? globalThis : require_implementation();
                    }));
                    var require_is_implemented7 = __commonJS((function(exports, module) {
                        "use strict";
                        var global2 = require_global_this();
                        var validTypes = {
                            object: true,
                            symbol: true
                        };
                        module.exports = function() {
                            var Symbol2 = global2.Symbol;
                            var symbol;
                            if ("function" !== typeof Symbol2) return false;
                            symbol = Symbol2("test symbol");
                            try {
                                String(symbol);
                            } catch (e) {
                                return false;
                            }
                            if (!validTypes[_typeof(Symbol2.iterator)]) return false;
                            if (!validTypes[_typeof(Symbol2.toPrimitive)]) return false;
                            if (!validTypes[_typeof(Symbol2.toStringTag)]) return false;
                            return true;
                        };
                    }));
                    var require_is_symbol = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = function(value) {
                            if (!value) return false;
                            if ("symbol" === _typeof(value)) return true;
                            if (!value.constructor) return false;
                            if ("Symbol" !== value.constructor.name) return false;
                            return "Symbol" === value[value.constructor.toStringTag];
                        };
                    }));
                    var require_validate_symbol = __commonJS((function(exports, module) {
                        "use strict";
                        var isSymbol = require_is_symbol();
                        module.exports = function(value) {
                            if (!isSymbol(value)) throw new TypeError(value + " is not a symbol");
                            return value;
                        };
                    }));
                    var require_generate_name = __commonJS((function(exports, module) {
                        "use strict";
                        var d2 = require_d();
                        var create = Object.create;
                        var defineProperty = Object.defineProperty;
                        var objPrototype = Object.prototype;
                        var created = create(null);
                        module.exports = function(desc) {
                            var name, ie11BugWorkaround, postfix = 0;
                            while (created[desc + (postfix || "")]) ++postfix;
                            desc += postfix || "";
                            created[desc] = true;
                            name = "@@" + desc;
                            defineProperty(objPrototype, name, d2.gs(null, (function(value) {
                                if (ie11BugWorkaround) return;
                                ie11BugWorkaround = true;
                                defineProperty(this, name, d2(value));
                                ie11BugWorkaround = false;
                            })));
                            return name;
                        };
                    }));
                    var require_standard_symbols = __commonJS((function(exports, module) {
                        "use strict";
                        var d2 = require_d();
                        var NativeSymbol = require_global_this().Symbol;
                        module.exports = function(SymbolPolyfill) {
                            return Object.defineProperties(SymbolPolyfill, {
                                hasInstance: d2("", NativeSymbol && NativeSymbol.hasInstance || SymbolPolyfill("hasInstance")),
                                isConcatSpreadable: d2("", NativeSymbol && NativeSymbol.isConcatSpreadable || SymbolPolyfill("isConcatSpreadable")),
                                iterator: d2("", NativeSymbol && NativeSymbol.iterator || SymbolPolyfill("iterator")),
                                match: d2("", NativeSymbol && NativeSymbol.match || SymbolPolyfill("match")),
                                replace: d2("", NativeSymbol && NativeSymbol.replace || SymbolPolyfill("replace")),
                                search: d2("", NativeSymbol && NativeSymbol.search || SymbolPolyfill("search")),
                                species: d2("", NativeSymbol && NativeSymbol.species || SymbolPolyfill("species")),
                                split: d2("", NativeSymbol && NativeSymbol.split || SymbolPolyfill("split")),
                                toPrimitive: d2("", NativeSymbol && NativeSymbol.toPrimitive || SymbolPolyfill("toPrimitive")),
                                toStringTag: d2("", NativeSymbol && NativeSymbol.toStringTag || SymbolPolyfill("toStringTag")),
                                unscopables: d2("", NativeSymbol && NativeSymbol.unscopables || SymbolPolyfill("unscopables"))
                            });
                        };
                    }));
                    var require_symbol_registry = __commonJS((function(exports, module) {
                        "use strict";
                        var d2 = require_d();
                        var validateSymbol = require_validate_symbol();
                        var registry = Object.create(null);
                        module.exports = function(SymbolPolyfill) {
                            return Object.defineProperties(SymbolPolyfill, {
                                for: d2((function(key) {
                                    if (registry[key]) return registry[key];
                                    return registry[key] = SymbolPolyfill(String(key));
                                })),
                                keyFor: d2((function(symbol) {
                                    var key;
                                    validateSymbol(symbol);
                                    for (key in registry) if (registry[key] === symbol) return key;
                                    return;
                                }))
                            });
                        };
                    }));
                    var require_polyfill = __commonJS((function(exports, module) {
                        "use strict";
                        var d2 = require_d();
                        var validateSymbol = require_validate_symbol();
                        var NativeSymbol = require_global_this().Symbol;
                        var generateName = require_generate_name();
                        var setupStandardSymbols = require_standard_symbols();
                        var setupSymbolRegistry = require_symbol_registry();
                        var create = Object.create;
                        var defineProperties = Object.defineProperties;
                        var defineProperty = Object.defineProperty;
                        var SymbolPolyfill;
                        var HiddenSymbol;
                        var isNativeSafe;
                        if ("function" === typeof NativeSymbol) try {
                            String(NativeSymbol());
                            isNativeSafe = true;
                        } catch (ignore) {} else NativeSymbol = null;
                        HiddenSymbol = function(description) {
                            if (this instanceof HiddenSymbol) throw new TypeError("Symbol is not a constructor");
                            return SymbolPolyfill(description);
                        };
                        module.exports = SymbolPolyfill = function Symbol2(description) {
                            var symbol;
                            if (this instanceof Symbol2) throw new TypeError("Symbol is not a constructor");
                            if (isNativeSafe) return NativeSymbol(description);
                            symbol = create(HiddenSymbol.prototype);
                            description = void 0 === description ? "" : String(description);
                            return defineProperties(symbol, {
                                __description__: d2("", description),
                                __name__: d2("", generateName(description))
                            });
                        };
                        setupStandardSymbols(SymbolPolyfill);
                        setupSymbolRegistry(SymbolPolyfill);
                        defineProperties(HiddenSymbol.prototype, {
                            constructor: d2(SymbolPolyfill),
                            toString: d2("", (function() {
                                return this.__name__;
                            }))
                        });
                        defineProperties(SymbolPolyfill.prototype, {
                            toString: d2((function() {
                                return "Symbol (" + validateSymbol(this).__description__ + ")";
                            })),
                            valueOf: d2((function() {
                                return validateSymbol(this);
                            }))
                        });
                        defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toPrimitive, d2("", (function() {
                            var symbol = validateSymbol(this);
                            if ("symbol" === _typeof(symbol)) return symbol;
                            return symbol.toString();
                        })));
                        defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d2("c", "Symbol"));
                        defineProperty(HiddenSymbol.prototype, SymbolPolyfill.toStringTag, d2("c", SymbolPolyfill.prototype[SymbolPolyfill.toStringTag]));
                        defineProperty(HiddenSymbol.prototype, SymbolPolyfill.toPrimitive, d2("c", SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive]));
                    }));
                    var require_es6_symbol = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = require_is_implemented7()() ? require_global_this().Symbol : require_polyfill();
                    }));
                    var require_is_arguments = __commonJS((function(exports, module) {
                        "use strict";
                        var objToString = Object.prototype.toString;
                        var id = objToString.call(function() {
                            return arguments;
                        }());
                        module.exports = function(value) {
                            return objToString.call(value) === id;
                        };
                    }));
                    var require_is_function = __commonJS((function(exports, module) {
                        "use strict";
                        var objToString = Object.prototype.toString;
                        var isFunctionStringTag = RegExp.prototype.test.bind(/^[object [A-Za-z0-9]*Function]$/);
                        module.exports = function(value) {
                            return "function" === typeof value && isFunctionStringTag(objToString.call(value));
                        };
                    }));
                    var require_is_string = __commonJS((function(exports, module) {
                        "use strict";
                        var objToString = Object.prototype.toString;
                        var id = objToString.call("");
                        module.exports = function(value) {
                            return "string" === typeof value || value && "object" === _typeof(value) && (value instanceof String || objToString.call(value) === id) || false;
                        };
                    }));
                    var require_shim5 = __commonJS((function(exports, module) {
                        "use strict";
                        var iteratorSymbol = require_es6_symbol().iterator;
                        var isArguments = require_is_arguments();
                        var isFunction = require_is_function();
                        var toPosInt = require_to_pos_integer();
                        var callable = require_valid_callable();
                        var validValue = require_valid_value();
                        var isValue = require_is_value();
                        var isString2 = require_is_string();
                        var isArray = Array.isArray;
                        var call = Function.prototype.call;
                        var desc = {
                            configurable: true,
                            enumerable: true,
                            writable: true,
                            value: null
                        };
                        var defineProperty = Object.defineProperty;
                        module.exports = function(arrayLike) {
                            var Context2, i, j, arr, length, code, iterator, result, getIterator, value, mapFn = arguments[1], thisArg = arguments[2];
                            arrayLike = Object(validValue(arrayLike));
                            if (isValue(mapFn)) callable(mapFn);
                            if (!this || this === Array || !isFunction(this)) {
                                if (!mapFn) {
                                    if (isArguments(arrayLike)) {
                                        length = arrayLike.length;
                                        if (1 !== length) return Array.apply(null, arrayLike);
                                        arr = new Array(1);
                                        arr[0] = arrayLike[0];
                                        return arr;
                                    }
                                    if (isArray(arrayLike)) {
                                        arr = new Array(length = arrayLike.length);
                                        for (i = 0; i < length; ++i) arr[i] = arrayLike[i];
                                        return arr;
                                    }
                                }
                                arr = [];
                            } else Context2 = this;
                            if (!isArray(arrayLike)) if (void 0 !== (getIterator = arrayLike[iteratorSymbol])) {
                                iterator = callable(getIterator).call(arrayLike);
                                if (Context2) arr = new Context2;
                                result = iterator.next();
                                i = 0;
                                while (!result.done) {
                                    value = mapFn ? call.call(mapFn, thisArg, result.value, i) : result.value;
                                    if (Context2) {
                                        desc.value = value;
                                        defineProperty(arr, i, desc);
                                    } else arr[i] = value;
                                    result = iterator.next();
                                    ++i;
                                }
                                length = i;
                            } else if (isString2(arrayLike)) {
                                length = arrayLike.length;
                                if (Context2) arr = new Context2;
                                for (i = 0, j = 0; i < length; ++i) {
                                    value = arrayLike[i];
                                    if (i + 1 < length) {
                                        code = value.charCodeAt(0);
                                        if (code >= 55296 && code <= 56319) value += arrayLike[++i];
                                    }
                                    value = mapFn ? call.call(mapFn, thisArg, value, j) : value;
                                    if (Context2) {
                                        desc.value = value;
                                        defineProperty(arr, j, desc);
                                    } else arr[j] = value;
                                    ++j;
                                }
                                length = j;
                            }
                            if (void 0 === length) {
                                length = toPosInt(arrayLike.length);
                                if (Context2) arr = new Context2(length);
                                for (i = 0; i < length; ++i) {
                                    value = mapFn ? call.call(mapFn, thisArg, arrayLike[i], i) : arrayLike[i];
                                    if (Context2) {
                                        desc.value = value;
                                        defineProperty(arr, i, desc);
                                    } else arr[i] = value;
                                }
                            }
                            if (Context2) {
                                desc.value = null;
                                arr.length = length;
                            }
                            return arr;
                        };
                    }));
                    var require_from = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = require_is_implemented5()() ? Array.from : require_shim5();
                    }));
                    var require_to_array = __commonJS((function(exports, module) {
                        "use strict";
                        var from = require_from();
                        var isArray = Array.isArray;
                        module.exports = function(arrayLike) {
                            return isArray(arrayLike) ? arrayLike : from(arrayLike);
                        };
                    }));
                    var require_resolve_resolve = __commonJS((function(exports, module) {
                        "use strict";
                        var toArray2 = require_to_array();
                        var isValue = require_is_value();
                        var callable = require_valid_callable();
                        var slice = Array.prototype.slice;
                        var resolveArgs;
                        resolveArgs = function(args) {
                            return this.map((function(resolve, i) {
                                return resolve ? resolve(args[i]) : args[i];
                            })).concat(slice.call(args, this.length));
                        };
                        module.exports = function(resolvers) {
                            resolvers = toArray2(resolvers);
                            resolvers.forEach((function(resolve) {
                                if (isValue(resolve)) callable(resolve);
                            }));
                            return resolveArgs.bind(resolvers);
                        };
                    }));
                    var require_resolve_normalize = __commonJS((function(exports, module) {
                        "use strict";
                        var callable = require_valid_callable();
                        module.exports = function(userNormalizer) {
                            var normalizer;
                            if ("function" === typeof userNormalizer) return {
                                set: userNormalizer,
                                get: userNormalizer
                            };
                            normalizer = {
                                get: callable(userNormalizer.get)
                            };
                            if (void 0 !== userNormalizer.set) {
                                normalizer.set = callable(userNormalizer.set);
                                if (userNormalizer["delete"]) normalizer["delete"] = callable(userNormalizer["delete"]);
                                if (userNormalizer.clear) normalizer.clear = callable(userNormalizer.clear);
                                return normalizer;
                            }
                            normalizer.set = normalizer.get;
                            return normalizer;
                        };
                    }));
                    var require_configure_map = __commonJS((function(exports, module) {
                        "use strict";
                        var customError = require_custom();
                        var defineLength = require_define_length();
                        var d2 = require_d();
                        var ee = require_event_emitter().methods;
                        var resolveResolve = require_resolve_resolve();
                        var resolveNormalize = require_resolve_normalize();
                        var apply = Function.prototype.apply;
                        var call = Function.prototype.call;
                        var create = Object.create;
                        var defineProperties = Object.defineProperties;
                        var _on = ee.on;
                        var emit = ee.emit;
                        module.exports = function(original, length, options) {
                            var conf, memLength, get2, set2, del, _clear, extDel, extGet, extHas, normalizer, getListeners, setListeners, deleteListeners, memoized, resolve, cache2 = create(null);
                            if (false !== length) memLength = length; else if (isNaN(original.length)) memLength = 1; else memLength = original.length;
                            if (options.normalizer) {
                                normalizer = resolveNormalize(options.normalizer);
                                get2 = normalizer.get;
                                set2 = normalizer.set;
                                del = normalizer["delete"];
                                _clear = normalizer.clear;
                            }
                            if (null != options.resolvers) resolve = resolveResolve(options.resolvers);
                            if (get2) memoized = defineLength((function(arg) {
                                var id, result, args = arguments;
                                if (resolve) args = resolve(args);
                                id = get2(args);
                                if (null !== id) if (hasOwnProperty.call(cache2, id)) {
                                    if (getListeners) conf.emit("get", id, args, this);
                                    return cache2[id];
                                }
                                if (1 === args.length) result = call.call(original, this, args[0]); else result = apply.call(original, this, args);
                                if (null === id) {
                                    id = get2(args);
                                    if (null !== id) throw customError("Circular invocation", "CIRCULAR_INVOCATION");
                                    id = set2(args);
                                } else if (hasOwnProperty.call(cache2, id)) throw customError("Circular invocation", "CIRCULAR_INVOCATION");
                                cache2[id] = result;
                                if (setListeners) conf.emit("set", id, null, result);
                                return result;
                            }), memLength); else if (0 === length) memoized = function() {
                                var result;
                                if (hasOwnProperty.call(cache2, "data")) {
                                    if (getListeners) conf.emit("get", "data", arguments, this);
                                    return cache2.data;
                                }
                                if (arguments.length) result = apply.call(original, this, arguments); else result = call.call(original, this);
                                if (hasOwnProperty.call(cache2, "data")) throw customError("Circular invocation", "CIRCULAR_INVOCATION");
                                cache2.data = result;
                                if (setListeners) conf.emit("set", "data", null, result);
                                return result;
                            }; else memoized = function(arg) {
                                var result, id, args = arguments;
                                if (resolve) args = resolve(arguments);
                                id = String(args[0]);
                                if (hasOwnProperty.call(cache2, id)) {
                                    if (getListeners) conf.emit("get", id, args, this);
                                    return cache2[id];
                                }
                                if (1 === args.length) result = call.call(original, this, args[0]); else result = apply.call(original, this, args);
                                if (hasOwnProperty.call(cache2, id)) throw customError("Circular invocation", "CIRCULAR_INVOCATION");
                                cache2[id] = result;
                                if (setListeners) conf.emit("set", id, null, result);
                                return result;
                            };
                            conf = {
                                original,
                                memoized,
                                profileName: options.profileName,
                                get: function(args) {
                                    if (resolve) args = resolve(args);
                                    if (get2) return get2(args);
                                    return String(args[0]);
                                },
                                has: function(id) {
                                    return hasOwnProperty.call(cache2, id);
                                },
                                delete: function(id) {
                                    var result;
                                    if (!hasOwnProperty.call(cache2, id)) return;
                                    if (del) del(id);
                                    result = cache2[id];
                                    delete cache2[id];
                                    if (deleteListeners) conf.emit("delete", id, result);
                                },
                                clear: function() {
                                    var oldCache = cache2;
                                    if (_clear) _clear();
                                    cache2 = create(null);
                                    conf.emit("clear", oldCache);
                                },
                                on: function(type2, listener) {
                                    if ("get" === type2) getListeners = true; else if ("set" === type2) setListeners = true; else if ("delete" === type2) deleteListeners = true;
                                    return _on.call(this, type2, listener);
                                },
                                emit,
                                updateEnv: function() {
                                    original = conf.original;
                                }
                            };
                            if (get2) extDel = defineLength((function(arg) {
                                var id, args = arguments;
                                if (resolve) args = resolve(args);
                                id = get2(args);
                                if (null === id) return;
                                conf["delete"](id);
                            }), memLength); else if (0 === length) extDel = function() {
                                return conf["delete"]("data");
                            }; else extDel = function(arg) {
                                if (resolve) arg = resolve(arguments)[0];
                                return conf["delete"](arg);
                            };
                            extGet = defineLength((function() {
                                var id, args = arguments;
                                if (0 === length) return cache2.data;
                                if (resolve) args = resolve(args);
                                if (get2) id = get2(args); else id = String(args[0]);
                                return cache2[id];
                            }));
                            extHas = defineLength((function() {
                                var id, args = arguments;
                                if (0 === length) return conf.has("data");
                                if (resolve) args = resolve(args);
                                if (get2) id = get2(args); else id = String(args[0]);
                                if (null === id) return false;
                                return conf.has(id);
                            }));
                            defineProperties(memoized, {
                                __memoized__: d2(true),
                                delete: d2(extDel),
                                clear: d2(conf.clear),
                                _get: d2(extGet),
                                _has: d2(extHas)
                            });
                            return conf;
                        };
                    }));
                    var require_plain = __commonJS((function(exports, module) {
                        "use strict";
                        var callable = require_valid_callable();
                        var forEach = require_for_each();
                        var extensions = require_registered_extensions();
                        var configure4 = require_configure_map();
                        var resolveLength = require_resolve_length();
                        module.exports = function self2(fn) {
                            var options, length, conf;
                            callable(fn);
                            options = Object(arguments[1]);
                            if (options.async && options.promise) throw new Error("Options 'async' and 'promise' cannot be used together");
                            if (hasOwnProperty.call(fn, "__memoized__") && !options.force) return fn;
                            length = resolveLength(options.length, fn.length, options.async && extensions.async);
                            conf = configure4(fn, length, options);
                            forEach(extensions, (function(extFn, name) {
                                if (options[name]) extFn(options[name], conf, options);
                            }));
                            if (self2.__profiler__) self2.__profiler__(conf);
                            conf.updateEnv();
                            return conf.memoized;
                        };
                    }));
                    var require_primitive = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = function(args) {
                            var id, i, length = args.length;
                            if (!length) return "";
                            id = String(args[i = 0]);
                            while (--length) id += "" + args[++i];
                            return id;
                        };
                    }));
                    var require_get_primitive_fixed = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = function(length) {
                            if (!length) return function() {
                                return "";
                            };
                            return function(args) {
                                var id = String(args[0]), i = 0, currentLength = length;
                                while (--currentLength) id += "" + args[++i];
                                return id;
                            };
                        };
                    }));
                    var require_is_implemented8 = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = function() {
                            var numberIsNaN = Number.isNaN;
                            if ("function" !== typeof numberIsNaN) return false;
                            return !numberIsNaN({}) && numberIsNaN(NaN) && !numberIsNaN(34);
                        };
                    }));
                    var require_shim6 = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = function(value) {
                            return value !== value;
                        };
                    }));
                    var require_is_nan = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = require_is_implemented8()() ? Number.isNaN : require_shim6();
                    }));
                    var require_e_index_of = __commonJS((function(exports, module) {
                        "use strict";
                        var numberIsNaN = require_is_nan();
                        var toPosInt = require_to_pos_integer();
                        var value = require_valid_value();
                        var indexOf = Array.prototype.indexOf;
                        var objHasOwnProperty = Object.prototype.hasOwnProperty;
                        var abs = Math.abs;
                        var floor = Math.floor;
                        module.exports = function(searchElement) {
                            var i, length, fromIndex, val;
                            if (!numberIsNaN(searchElement)) return indexOf.apply(this, arguments);
                            length = toPosInt(value(this).length);
                            fromIndex = arguments[1];
                            if (isNaN(fromIndex)) fromIndex = 0; else if (fromIndex >= 0) fromIndex = floor(fromIndex); else fromIndex = toPosInt(this.length) - floor(abs(fromIndex));
                            for (i = fromIndex; i < length; ++i) if (objHasOwnProperty.call(this, i)) {
                                val = this[i];
                                if (numberIsNaN(val)) return i;
                            }
                            return -1;
                        };
                    }));
                    var require_get = __commonJS((function(exports, module) {
                        "use strict";
                        var indexOf = require_e_index_of();
                        var create = Object.create;
                        module.exports = function() {
                            var lastId = 0, map = [], cache2 = create(null);
                            return {
                                get: function(args) {
                                    var i, index = 0, set2 = map, length = args.length;
                                    if (0 === length) return set2[length] || null;
                                    if (set2 = set2[length]) {
                                        while (index < length - 1) {
                                            i = indexOf.call(set2[0], args[index]);
                                            if (-1 === i) return null;
                                            set2 = set2[1][i];
                                            ++index;
                                        }
                                        i = indexOf.call(set2[0], args[index]);
                                        if (-1 === i) return null;
                                        return set2[1][i] || null;
                                    }
                                    return null;
                                },
                                set: function(args) {
                                    var i, index = 0, set2 = map, length = args.length;
                                    if (0 === length) set2[length] = ++lastId; else {
                                        if (!set2[length]) set2[length] = [ [], [] ];
                                        set2 = set2[length];
                                        while (index < length - 1) {
                                            i = indexOf.call(set2[0], args[index]);
                                            if (-1 === i) {
                                                i = set2[0].push(args[index]) - 1;
                                                set2[1].push([ [], [] ]);
                                            }
                                            set2 = set2[1][i];
                                            ++index;
                                        }
                                        i = indexOf.call(set2[0], args[index]);
                                        if (-1 === i) i = set2[0].push(args[index]) - 1;
                                        set2[1][i] = ++lastId;
                                    }
                                    cache2[lastId] = args;
                                    return lastId;
                                },
                                delete: function(id) {
                                    var i, index = 0, set2 = map, args = cache2[id], length = args.length, path = [];
                                    if (0 === length) delete set2[length]; else if (set2 = set2[length]) {
                                        while (index < length - 1) {
                                            i = indexOf.call(set2[0], args[index]);
                                            if (-1 === i) return;
                                            path.push(set2, i);
                                            set2 = set2[1][i];
                                            ++index;
                                        }
                                        i = indexOf.call(set2[0], args[index]);
                                        if (-1 === i) return;
                                        id = set2[1][i];
                                        set2[0].splice(i, 1);
                                        set2[1].splice(i, 1);
                                        while (!set2[0].length && path.length) {
                                            i = path.pop();
                                            set2 = path.pop();
                                            set2[0].splice(i, 1);
                                            set2[1].splice(i, 1);
                                        }
                                    }
                                    delete cache2[id];
                                },
                                clear: function() {
                                    map = [];
                                    cache2 = create(null);
                                }
                            };
                        };
                    }));
                    var require_get_1 = __commonJS((function(exports, module) {
                        "use strict";
                        var indexOf = require_e_index_of();
                        module.exports = function() {
                            var lastId = 0, argsMap = [], cache2 = [];
                            return {
                                get: function(args) {
                                    var index = indexOf.call(argsMap, args[0]);
                                    return -1 === index ? null : cache2[index];
                                },
                                set: function(args) {
                                    argsMap.push(args[0]);
                                    cache2.push(++lastId);
                                    return lastId;
                                },
                                delete: function(id) {
                                    var index = indexOf.call(cache2, id);
                                    if (-1 !== index) {
                                        argsMap.splice(index, 1);
                                        cache2.splice(index, 1);
                                    }
                                },
                                clear: function() {
                                    argsMap = [];
                                    cache2 = [];
                                }
                            };
                        };
                    }));
                    var require_get_fixed = __commonJS((function(exports, module) {
                        "use strict";
                        var indexOf = require_e_index_of();
                        var create = Object.create;
                        module.exports = function(length) {
                            var lastId = 0, map = [ [], [] ], cache2 = create(null);
                            return {
                                get: function(args) {
                                    var i, index = 0, set2 = map;
                                    while (index < length - 1) {
                                        i = indexOf.call(set2[0], args[index]);
                                        if (-1 === i) return null;
                                        set2 = set2[1][i];
                                        ++index;
                                    }
                                    i = indexOf.call(set2[0], args[index]);
                                    if (-1 === i) return null;
                                    return set2[1][i] || null;
                                },
                                set: function(args) {
                                    var i, index = 0, set2 = map;
                                    while (index < length - 1) {
                                        i = indexOf.call(set2[0], args[index]);
                                        if (-1 === i) {
                                            i = set2[0].push(args[index]) - 1;
                                            set2[1].push([ [], [] ]);
                                        }
                                        set2 = set2[1][i];
                                        ++index;
                                    }
                                    i = indexOf.call(set2[0], args[index]);
                                    if (-1 === i) i = set2[0].push(args[index]) - 1;
                                    set2[1][i] = ++lastId;
                                    cache2[lastId] = args;
                                    return lastId;
                                },
                                delete: function(id) {
                                    var i, index = 0, set2 = map, path = [], args = cache2[id];
                                    while (index < length - 1) {
                                        i = indexOf.call(set2[0], args[index]);
                                        if (-1 === i) return;
                                        path.push(set2, i);
                                        set2 = set2[1][i];
                                        ++index;
                                    }
                                    i = indexOf.call(set2[0], args[index]);
                                    if (-1 === i) return;
                                    id = set2[1][i];
                                    set2[0].splice(i, 1);
                                    set2[1].splice(i, 1);
                                    while (!set2[0].length && path.length) {
                                        i = path.pop();
                                        set2 = path.pop();
                                        set2[0].splice(i, 1);
                                        set2[1].splice(i, 1);
                                    }
                                    delete cache2[id];
                                },
                                clear: function() {
                                    map = [ [], [] ];
                                    cache2 = create(null);
                                }
                            };
                        };
                    }));
                    var require_map = __commonJS((function(exports, module) {
                        "use strict";
                        var callable = require_valid_callable();
                        var forEach = require_for_each();
                        var call = Function.prototype.call;
                        module.exports = function(obj, cb) {
                            var result = {}, thisArg = arguments[2];
                            callable(cb);
                            forEach(obj, (function(value, key, targetObj, index) {
                                result[key] = call.call(cb, thisArg, value, key, targetObj, index);
                            }));
                            return result;
                        };
                    }));
                    var require_next_tick = __commonJS((function(exports, module) {
                        "use strict";
                        var ensureCallable = function(fn) {
                            if ("function" !== typeof fn) throw new TypeError(fn + " is not a function");
                            return fn;
                        };
                        var byObserver = function(Observer) {
                            var queue2, currentQueue, node = document.createTextNode(""), i = 0;
                            new Observer((function() {
                                var callback;
                                if (!queue2) {
                                    if (!currentQueue) return;
                                    queue2 = currentQueue;
                                } else if (currentQueue) queue2 = currentQueue.concat(queue2);
                                currentQueue = queue2;
                                queue2 = null;
                                if ("function" === typeof currentQueue) {
                                    callback = currentQueue;
                                    currentQueue = null;
                                    callback();
                                    return;
                                }
                                node.data = i = ++i % 2;
                                while (currentQueue) {
                                    callback = currentQueue.shift();
                                    if (!currentQueue.length) currentQueue = null;
                                    callback();
                                }
                            })).observe(node, {
                                characterData: true
                            });
                            return function(fn) {
                                ensureCallable(fn);
                                if (queue2) {
                                    if ("function" === typeof queue2) queue2 = [ queue2, fn ]; else queue2.push(fn);
                                    return;
                                }
                                queue2 = fn;
                                node.data = i = ++i % 2;
                            };
                        };
                        module.exports = function() {
                            if ("object" === (false ? 0 : _typeof({})) && {} && "function" === typeof {}.nextTick) return {}.nextTick;
                            if ("function" === typeof queueMicrotask) return function(cb) {
                                queueMicrotask(ensureCallable(cb));
                            };
                            if ("object" === ("undefined" === typeof document ? "undefined" : _typeof(document)) && document) {
                                if ("function" === typeof MutationObserver) return byObserver(MutationObserver);
                                if ("function" === typeof WebKitMutationObserver) return byObserver(WebKitMutationObserver);
                            }
                            if ("function" === typeof setImmediate) return function(cb) {
                                setImmediate(ensureCallable(cb));
                            };
                            if ("function" === typeof setTimeout || "object" === ("undefined" === typeof setTimeout ? "undefined" : _typeof(setTimeout))) return function(cb) {
                                setTimeout(ensureCallable(cb), 0);
                            };
                            return null;
                        }();
                    }));
                    var require_async = __commonJS((function() {
                        "use strict";
                        var aFrom = require_from();
                        var objectMap = require_map();
                        var mixin = require_mixin();
                        var defineLength = require_define_length();
                        var nextTick = require_next_tick();
                        var slice = Array.prototype.slice;
                        var apply = Function.prototype.apply;
                        var create = Object.create;
                        require_registered_extensions().async = function(tbi, conf) {
                            var currentCallback, currentContext, currentArgs, waiting = create(null), cache2 = create(null), base = conf.memoized, original = conf.original;
                            conf.memoized = defineLength((function(arg) {
                                var args = arguments, last2 = args[args.length - 1];
                                if ("function" === typeof last2) {
                                    currentCallback = last2;
                                    args = slice.call(args, 0, -1);
                                }
                                return base.apply(currentContext = this, currentArgs = args);
                            }), base);
                            try {
                                mixin(conf.memoized, base);
                            } catch (ignore) {}
                            conf.on("get", (function(id) {
                                var cb, context, args;
                                if (!currentCallback) return;
                                if (waiting[id]) {
                                    if ("function" === typeof waiting[id]) waiting[id] = [ waiting[id], currentCallback ]; else waiting[id].push(currentCallback);
                                    currentCallback = null;
                                    return;
                                }
                                cb = currentCallback;
                                context = currentContext;
                                args = currentArgs;
                                currentCallback = currentContext = currentArgs = null;
                                nextTick((function() {
                                    var data;
                                    if (hasOwnProperty.call(cache2, id)) {
                                        data = cache2[id];
                                        conf.emit("getasync", id, args, context);
                                        apply.call(cb, data.context, data.args);
                                    } else {
                                        currentCallback = cb;
                                        currentContext = context;
                                        currentArgs = args;
                                        base.apply(context, args);
                                    }
                                }));
                            }));
                            conf.original = function() {
                                var args, cb, origCb, result;
                                if (!currentCallback) return apply.call(original, this, arguments);
                                args = aFrom(arguments);
                                cb = function self2(err2) {
                                    var cb2, args2, id = self2.id;
                                    if (null == id) {
                                        nextTick(apply.bind(self2, this, arguments));
                                        return;
                                    }
                                    delete self2.id;
                                    cb2 = waiting[id];
                                    delete waiting[id];
                                    if (!cb2) return;
                                    args2 = aFrom(arguments);
                                    if (conf.has(id)) if (err2) conf["delete"](id); else {
                                        cache2[id] = {
                                            context: this,
                                            args: args2
                                        };
                                        conf.emit("setasync", id, "function" === typeof cb2 ? 1 : cb2.length);
                                    }
                                    if ("function" === typeof cb2) result = apply.call(cb2, this, args2); else cb2.forEach((function(cb3) {
                                        result = apply.call(cb3, this, args2);
                                    }), this);
                                    return result;
                                };
                                origCb = currentCallback;
                                currentCallback = currentContext = currentArgs = null;
                                args.push(cb);
                                result = apply.call(original, this, args);
                                cb.cb = origCb;
                                currentCallback = cb;
                                return result;
                            };
                            conf.on("set", (function(id) {
                                if (!currentCallback) {
                                    conf["delete"](id);
                                    return;
                                }
                                if (waiting[id]) if ("function" === typeof waiting[id]) waiting[id] = [ waiting[id], currentCallback.cb ]; else waiting[id].push(currentCallback.cb); else waiting[id] = currentCallback.cb;
                                delete currentCallback.cb;
                                currentCallback.id = id;
                                currentCallback = null;
                            }));
                            conf.on("delete", (function(id) {
                                var result;
                                if (hasOwnProperty.call(waiting, id)) return;
                                if (!cache2[id]) return;
                                result = cache2[id];
                                delete cache2[id];
                                conf.emit("deleteasync", id, slice.call(result.args, 1));
                            }));
                            conf.on("clear", (function() {
                                var oldCache = cache2;
                                cache2 = create(null);
                                conf.emit("clearasync", objectMap(oldCache, (function(data) {
                                    return slice.call(data.args, 1);
                                })));
                            }));
                        };
                    }));
                    var require_primitive_set = __commonJS((function(exports, module) {
                        "use strict";
                        var forEach = Array.prototype.forEach;
                        var create = Object.create;
                        module.exports = function(arg) {
                            var set2 = create(null);
                            forEach.call(arguments, (function(name) {
                                set2[name] = true;
                            }));
                            return set2;
                        };
                    }));
                    var require_is_callable = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = function(obj) {
                            return "function" === typeof obj;
                        };
                    }));
                    var require_validate_stringifiable = __commonJS((function(exports, module) {
                        "use strict";
                        var isCallable = require_is_callable();
                        module.exports = function(stringifiable) {
                            try {
                                if (stringifiable && isCallable(stringifiable.toString)) return stringifiable.toString();
                                return String(stringifiable);
                            } catch (e) {
                                throw new TypeError("Passed argument cannot be stringifed");
                            }
                        };
                    }));
                    var require_validate_stringifiable_value = __commonJS((function(exports, module) {
                        "use strict";
                        var ensureValue = require_valid_value();
                        var stringifiable = require_validate_stringifiable();
                        module.exports = function(value) {
                            return stringifiable(ensureValue(value));
                        };
                    }));
                    var require_safe_to_string = __commonJS((function(exports, module) {
                        "use strict";
                        var isCallable = require_is_callable();
                        module.exports = function(value) {
                            try {
                                if (value && isCallable(value.toString)) return value.toString();
                                return String(value);
                            } catch (e) {
                                return "<Non-coercible to string value>";
                            }
                        };
                    }));
                    var require_to_short_string_representation = __commonJS((function(exports, module) {
                        "use strict";
                        var safeToString = require_safe_to_string();
                        var reNewLine = /[\n\r\u2028\u2029]/g;
                        module.exports = function(value) {
                            var string = safeToString(value);
                            if (string.length > 100) string = string.slice(0, 99) + "…";
                            string = string.replace(reNewLine, (function(_char) {
                                return JSON.stringify(_char).slice(1, -1);
                            }));
                            return string;
                        };
                    }));
                    var require_is_promise = __commonJS((function(exports, module) {
                        module.exports = isPromise;
                        module.exports["default"] = isPromise;
                        function isPromise(obj) {
                            return !!obj && ("object" === _typeof(obj) || "function" === typeof obj) && "function" === typeof obj.then;
                        }
                    }));
                    var require_promise = __commonJS((function() {
                        "use strict";
                        var objectMap = require_map();
                        var primitiveSet = require_primitive_set();
                        var ensureString = require_validate_stringifiable_value();
                        var toShortString = require_to_short_string_representation();
                        var isPromise = require_is_promise();
                        var nextTick = require_next_tick();
                        var create = Object.create;
                        var supportedModes = primitiveSet("then", "then:finally", "done", "done:finally");
                        require_registered_extensions().promise = function(mode, conf) {
                            var waiting = create(null), cache2 = create(null), promises = create(null);
                            if (true === mode) mode = null; else {
                                mode = ensureString(mode);
                                if (!supportedModes[mode]) throw new TypeError("'" + toShortString(mode) + "' is not valid promise mode");
                            }
                            conf.on("set", (function(id, ignore, promise) {
                                var isFailed = false;
                                if (!isPromise(promise)) {
                                    cache2[id] = promise;
                                    conf.emit("setasync", id, 1);
                                    return;
                                }
                                waiting[id] = 1;
                                promises[id] = promise;
                                var onSuccess = function(result) {
                                    var count = waiting[id];
                                    if (isFailed) throw new Error("Memoizee error: Detected unordered then|done & finally resolution, which in turn makes proper detection of success/failure impossible (when in 'done:finally' mode)\nConsider to rely on 'then' or 'done' mode instead.");
                                    if (!count) return;
                                    delete waiting[id];
                                    cache2[id] = result;
                                    conf.emit("setasync", id, count);
                                };
                                var onFailure = function() {
                                    isFailed = true;
                                    if (!waiting[id]) return;
                                    delete waiting[id];
                                    delete promises[id];
                                    conf["delete"](id);
                                };
                                var resolvedMode = mode;
                                if (!resolvedMode) resolvedMode = "then";
                                if ("then" === resolvedMode) {
                                    var nextTickFailure = function() {
                                        nextTick(onFailure);
                                    };
                                    promise = promise.then((function(result) {
                                        nextTick(onSuccess.bind(this, result));
                                    }), nextTickFailure);
                                    if ("function" === typeof promise["finally"]) promise["finally"](nextTickFailure);
                                } else if ("done" === resolvedMode) {
                                    if ("function" !== typeof promise.done) throw new Error("Memoizee error: Retrieved promise does not implement 'done' in 'done' mode");
                                    promise.done(onSuccess, onFailure);
                                } else if ("done:finally" === resolvedMode) {
                                    if ("function" !== typeof promise.done) throw new Error("Memoizee error: Retrieved promise does not implement 'done' in 'done:finally' mode");
                                    if ("function" !== typeof promise["finally"]) throw new Error("Memoizee error: Retrieved promise does not implement 'finally' in 'done:finally' mode");
                                    promise.done(onSuccess);
                                    promise["finally"](onFailure);
                                }
                            }));
                            conf.on("get", (function(id, args, context) {
                                var promise;
                                if (waiting[id]) {
                                    ++waiting[id];
                                    return;
                                }
                                promise = promises[id];
                                var emit = function() {
                                    conf.emit("getasync", id, args, context);
                                };
                                if (isPromise(promise)) if ("function" === typeof promise.done) promise.done(emit); else promise.then((function() {
                                    nextTick(emit);
                                })); else emit();
                            }));
                            conf.on("delete", (function(id) {
                                delete promises[id];
                                if (waiting[id]) {
                                    delete waiting[id];
                                    return;
                                }
                                if (!hasOwnProperty.call(cache2, id)) return;
                                var result = cache2[id];
                                delete cache2[id];
                                conf.emit("deleteasync", id, [ result ]);
                            }));
                            conf.on("clear", (function() {
                                var oldCache = cache2;
                                cache2 = create(null);
                                waiting = create(null);
                                promises = create(null);
                                conf.emit("clearasync", objectMap(oldCache, (function(data) {
                                    return [ data ];
                                })));
                            }));
                        };
                    }));
                    var require_dispose = __commonJS((function() {
                        "use strict";
                        var callable = require_valid_callable();
                        var forEach = require_for_each();
                        var extensions = require_registered_extensions();
                        var apply = Function.prototype.apply;
                        extensions.dispose = function(dispose, conf, options) {
                            var del;
                            callable(dispose);
                            if (options.async && extensions.async || options.promise && extensions.promise) {
                                conf.on("deleteasync", del = function(id, resultArray) {
                                    apply.call(dispose, null, resultArray);
                                });
                                conf.on("clearasync", (function(cache2) {
                                    forEach(cache2, (function(result, id) {
                                        del(id, result);
                                    }));
                                }));
                                return;
                            }
                            conf.on("delete", del = function(id, result) {
                                dispose(result);
                            });
                            conf.on("clear", (function(cache2) {
                                forEach(cache2, (function(result, id) {
                                    del(id, result);
                                }));
                            }));
                        };
                    }));
                    var require_max_timeout = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = 2147483647;
                    }));
                    var require_valid_timeout = __commonJS((function(exports, module) {
                        "use strict";
                        var toPosInt = require_to_pos_integer();
                        var maxTimeout = require_max_timeout();
                        module.exports = function(value) {
                            value = toPosInt(value);
                            if (value > maxTimeout) throw new TypeError(value + " exceeds maximum possible timeout");
                            return value;
                        };
                    }));
                    var require_max_age = __commonJS((function() {
                        "use strict";
                        var aFrom = require_from();
                        var forEach = require_for_each();
                        var nextTick = require_next_tick();
                        var isPromise = require_is_promise();
                        var timeout = require_valid_timeout();
                        var extensions = require_registered_extensions();
                        var noop3 = Function.prototype;
                        var max2 = Math.max;
                        var min = Math.min;
                        var create = Object.create;
                        extensions.maxAge = function(maxAge, conf, options) {
                            var timeouts, postfix, preFetchAge, preFetchTimeouts;
                            maxAge = timeout(maxAge);
                            if (!maxAge) return;
                            timeouts = create(null);
                            postfix = options.async && extensions.async || options.promise && extensions.promise ? "async" : "";
                            conf.on("set" + postfix, (function(id) {
                                timeouts[id] = setTimeout((function() {
                                    conf["delete"](id);
                                }), maxAge);
                                if ("function" === typeof timeouts[id].unref) timeouts[id].unref();
                                if (!preFetchTimeouts) return;
                                if (preFetchTimeouts[id]) if ("nextTick" !== preFetchTimeouts[id]) clearTimeout(preFetchTimeouts[id]);
                                preFetchTimeouts[id] = setTimeout((function() {
                                    delete preFetchTimeouts[id];
                                }), preFetchAge);
                                if ("function" === typeof preFetchTimeouts[id].unref) preFetchTimeouts[id].unref();
                            }));
                            conf.on("delete" + postfix, (function(id) {
                                clearTimeout(timeouts[id]);
                                delete timeouts[id];
                                if (!preFetchTimeouts) return;
                                if ("nextTick" !== preFetchTimeouts[id]) clearTimeout(preFetchTimeouts[id]);
                                delete preFetchTimeouts[id];
                            }));
                            if (options.preFetch) {
                                if (true === options.preFetch || isNaN(options.preFetch)) preFetchAge = .333; else preFetchAge = max2(min(Number(options.preFetch), 1), 0);
                                if (preFetchAge) {
                                    preFetchTimeouts = {};
                                    preFetchAge = (1 - preFetchAge) * maxAge;
                                    conf.on("get" + postfix, (function(id, args, context) {
                                        if (!preFetchTimeouts[id]) {
                                            preFetchTimeouts[id] = "nextTick";
                                            nextTick((function() {
                                                var result;
                                                if ("nextTick" !== preFetchTimeouts[id]) return;
                                                delete preFetchTimeouts[id];
                                                conf["delete"](id);
                                                if (options.async) {
                                                    args = aFrom(args);
                                                    args.push(noop3);
                                                }
                                                result = conf.memoized.apply(context, args);
                                                if (options.promise) if (isPromise(result)) if ("function" === typeof result.done) result.done(noop3, noop3); else result.then(noop3, noop3);
                                            }));
                                        }
                                    }));
                                }
                            }
                            conf.on("clear" + postfix, (function() {
                                forEach(timeouts, (function(id) {
                                    clearTimeout(id);
                                }));
                                timeouts = {};
                                if (preFetchTimeouts) {
                                    forEach(preFetchTimeouts, (function(id) {
                                        if ("nextTick" !== id) clearTimeout(id);
                                    }));
                                    preFetchTimeouts = {};
                                }
                            }));
                        };
                    }));
                    var require_lru_queue = __commonJS((function(exports, module) {
                        "use strict";
                        var toPosInt = require_to_pos_integer();
                        var create = Object.create;
                        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
                        module.exports = function(limit) {
                            var del, size = 0, base = 1, queue2 = create(null), map = create(null), index = 0;
                            limit = toPosInt(limit);
                            return {
                                hit: function(id) {
                                    var oldIndex = map[id], nuIndex = ++index;
                                    queue2[nuIndex] = id;
                                    map[id] = nuIndex;
                                    if (!oldIndex) {
                                        ++size;
                                        if (size <= limit) return;
                                        id = queue2[base];
                                        del(id);
                                        return id;
                                    }
                                    delete queue2[oldIndex];
                                    if (base !== oldIndex) return;
                                    while (!hasOwnProperty2.call(queue2, ++base)) ;
                                },
                                delete: del = function(id) {
                                    var oldIndex = map[id];
                                    if (!oldIndex) return;
                                    delete queue2[oldIndex];
                                    delete map[id];
                                    --size;
                                    if (base !== oldIndex) return;
                                    if (!size) {
                                        index = 0;
                                        base = 1;
                                        return;
                                    }
                                    while (!hasOwnProperty2.call(queue2, ++base)) ;
                                },
                                clear: function() {
                                    size = 0;
                                    base = 1;
                                    queue2 = create(null);
                                    map = create(null);
                                    index = 0;
                                }
                            };
                        };
                    }));
                    var require_max = __commonJS((function() {
                        "use strict";
                        var toPosInteger = require_to_pos_integer();
                        var lruQueue = require_lru_queue();
                        var extensions = require_registered_extensions();
                        extensions.max = function(max2, conf, options) {
                            var postfix, queue2, hit;
                            max2 = toPosInteger(max2);
                            if (!max2) return;
                            queue2 = lruQueue(max2);
                            postfix = options.async && extensions.async || options.promise && extensions.promise ? "async" : "";
                            conf.on("set" + postfix, hit = function(id) {
                                id = queue2.hit(id);
                                if (void 0 === id) return;
                                conf["delete"](id);
                            });
                            conf.on("get" + postfix, hit);
                            conf.on("delete" + postfix, queue2["delete"]);
                            conf.on("clear" + postfix, queue2.clear);
                        };
                    }));
                    var require_ref_counter = __commonJS((function() {
                        "use strict";
                        var d2 = require_d();
                        var extensions = require_registered_extensions();
                        var create = Object.create;
                        var defineProperties = Object.defineProperties;
                        extensions.refCounter = function(ignore, conf, options) {
                            var cache2, postfix;
                            cache2 = create(null);
                            postfix = options.async && extensions.async || options.promise && extensions.promise ? "async" : "";
                            conf.on("set" + postfix, (function(id, length) {
                                cache2[id] = length || 1;
                            }));
                            conf.on("get" + postfix, (function(id) {
                                ++cache2[id];
                            }));
                            conf.on("delete" + postfix, (function(id) {
                                delete cache2[id];
                            }));
                            conf.on("clear" + postfix, (function() {
                                cache2 = {};
                            }));
                            defineProperties(conf.memoized, {
                                deleteRef: d2((function() {
                                    var id = conf.get(arguments);
                                    if (null === id) return null;
                                    if (!cache2[id]) return null;
                                    if (!--cache2[id]) {
                                        conf["delete"](id);
                                        return true;
                                    }
                                    return false;
                                })),
                                getRefCount: d2((function() {
                                    var id = conf.get(arguments);
                                    if (null === id) return 0;
                                    if (!cache2[id]) return 0;
                                    return cache2[id];
                                }))
                            });
                        };
                    }));
                    var require_memoizee = __commonJS((function(exports, module) {
                        "use strict";
                        var normalizeOpts = require_normalize_options();
                        var resolveLength = require_resolve_length();
                        var plain = require_plain();
                        module.exports = function(fn) {
                            var length, options = normalizeOpts(arguments[1]);
                            if (!options.normalizer) {
                                length = options.length = resolveLength(options.length, fn.length, options.async);
                                if (0 !== length) if (options.primitive) {
                                    if (false === length) options.normalizer = require_primitive(); else if (length > 1) options.normalizer = require_get_primitive_fixed()(length);
                                } else if (false === length) options.normalizer = require_get()(); else if (1 === length) options.normalizer = require_get_1()(); else options.normalizer = require_get_fixed()(length);
                            }
                            if (options.async) require_async();
                            if (options.promise) require_promise();
                            if (options.dispose) require_dispose();
                            if (options.maxAge) require_max_age();
                            if (options.max) require_max();
                            if (options.refCounter) require_ref_counter();
                            return plain(fn, options);
                        };
                    }));
                    var require_utils = __commonJS((function(exports) {
                        "use strict";
                        Object.defineProperty(exports, "__esModule", {
                            value: true
                        });
                        function isIdentStart(c4) {
                            return c4 >= "a" && c4 <= "z" || c4 >= "A" && c4 <= "Z" || "-" === c4 || "_" === c4;
                        }
                        exports.isIdentStart = isIdentStart;
                        function isIdent(c4) {
                            return c4 >= "a" && c4 <= "z" || c4 >= "A" && c4 <= "Z" || c4 >= "0" && c4 <= "9" || "-" === c4 || "_" === c4;
                        }
                        exports.isIdent = isIdent;
                        function isHex(c4) {
                            return c4 >= "a" && c4 <= "f" || c4 >= "A" && c4 <= "F" || c4 >= "0" && c4 <= "9";
                        }
                        exports.isHex = isHex;
                        function escapeIdentifier(s) {
                            var len = s.length;
                            var result = "";
                            var i = 0;
                            while (i < len) {
                                var chr = s.charAt(i);
                                if (exports.identSpecialChars[chr]) result += "\\" + chr; else if (!("_" === chr || "-" === chr || chr >= "A" && chr <= "Z" || chr >= "a" && chr <= "z" || 0 !== i && chr >= "0" && chr <= "9")) {
                                    var charCode = chr.charCodeAt(0);
                                    if (55296 === (63488 & charCode)) {
                                        var extraCharCode = s.charCodeAt(i++);
                                        if (55296 !== (64512 & charCode) || 56320 !== (64512 & extraCharCode)) throw Error("UCS-2(decode): illegal sequence");
                                        charCode = ((1023 & charCode) << 10) + (1023 & extraCharCode) + 65536;
                                    }
                                    result += "\\" + charCode.toString(16) + " ";
                                } else result += chr;
                                i++;
                            }
                            return result;
                        }
                        exports.escapeIdentifier = escapeIdentifier;
                        function escapeStr(s) {
                            var len = s.length;
                            var result = "";
                            var i = 0;
                            var replacement;
                            while (i < len) {
                                var chr = s.charAt(i);
                                if ('"' === chr) chr = '\\"'; else if ("\\" === chr) chr = "\\\\"; else if (void 0 !== (replacement = exports.strReplacementsRev[chr])) chr = replacement;
                                result += chr;
                                i++;
                            }
                            return '"' + result + '"';
                        }
                        exports.escapeStr = escapeStr;
                        exports.identSpecialChars = {
                            "!": true,
                            '"': true,
                            "#": true,
                            $: true,
                            "%": true,
                            "&": true,
                            "'": true,
                            "(": true,
                            ")": true,
                            "*": true,
                            "+": true,
                            ",": true,
                            ".": true,
                            "/": true,
                            ";": true,
                            "<": true,
                            "=": true,
                            ">": true,
                            "?": true,
                            "@": true,
                            "[": true,
                            "\\": true,
                            "]": true,
                            "^": true,
                            "`": true,
                            "{": true,
                            "|": true,
                            "}": true,
                            "~": true
                        };
                        exports.strReplacementsRev = {
                            "\n": "\\n",
                            "\r": "\\r",
                            "\t": "\\t",
                            "\f": "\\f",
                            "\v": "\\v"
                        };
                        exports.singleQuoteEscapeChars = {
                            n: "\n",
                            r: "\r",
                            t: "\t",
                            f: "\f",
                            "\\": "\\",
                            "'": "'"
                        };
                        exports.doubleQuotesEscapeChars = {
                            n: "\n",
                            r: "\r",
                            t: "\t",
                            f: "\f",
                            "\\": "\\",
                            '"': '"'
                        };
                    }));
                    var require_parser_context = __commonJS((function(exports) {
                        "use strict";
                        Object.defineProperty(exports, "__esModule", {
                            value: true
                        });
                        var utils_1 = require_utils();
                        function parseCssSelector(str, pos, pseudos, attrEqualityMods, ruleNestingOperators, substitutesEnabled) {
                            var l = str.length;
                            var chr = "";
                            function getStr(quote, escapeTable) {
                                var result = "";
                                pos++;
                                chr = str.charAt(pos);
                                while (pos < l) {
                                    if (chr === quote) {
                                        pos++;
                                        return result;
                                    } else if ("\\" === chr) {
                                        pos++;
                                        chr = str.charAt(pos);
                                        var esc = void 0;
                                        if (chr === quote) result += quote; else if (void 0 !== (esc = escapeTable[chr])) result += esc; else if (utils_1.isHex(chr)) {
                                            var hex = chr;
                                            pos++;
                                            chr = str.charAt(pos);
                                            while (utils_1.isHex(chr)) {
                                                hex += chr;
                                                pos++;
                                                chr = str.charAt(pos);
                                            }
                                            if (" " === chr) {
                                                pos++;
                                                chr = str.charAt(pos);
                                            }
                                            result += String.fromCharCode(parseInt(hex, 16));
                                            continue;
                                        } else result += chr;
                                    } else result += chr;
                                    pos++;
                                    chr = str.charAt(pos);
                                }
                                return result;
                            }
                            function getIdent() {
                                var result = "";
                                chr = str.charAt(pos);
                                while (pos < l) {
                                    if (utils_1.isIdent(chr)) result += chr; else if ("\\" === chr) {
                                        pos++;
                                        if (pos >= l) throw Error("Expected symbol but end of file reached.");
                                        chr = str.charAt(pos);
                                        if (utils_1.identSpecialChars[chr]) result += chr; else if (utils_1.isHex(chr)) {
                                            var hex = chr;
                                            pos++;
                                            chr = str.charAt(pos);
                                            while (utils_1.isHex(chr)) {
                                                hex += chr;
                                                pos++;
                                                chr = str.charAt(pos);
                                            }
                                            if (" " === chr) {
                                                pos++;
                                                chr = str.charAt(pos);
                                            }
                                            result += String.fromCharCode(parseInt(hex, 16));
                                            continue;
                                        } else result += chr;
                                    } else return result;
                                    pos++;
                                    chr = str.charAt(pos);
                                }
                                return result;
                            }
                            function skipWhitespace() {
                                chr = str.charAt(pos);
                                var result = false;
                                while (" " === chr || "\t" === chr || "\n" === chr || "\r" === chr || "\f" === chr) {
                                    result = true;
                                    pos++;
                                    chr = str.charAt(pos);
                                }
                                return result;
                            }
                            function parse3() {
                                var res = parseSelector();
                                if (pos < l) throw Error('Rule expected but "' + str.charAt(pos) + '" found.');
                                return res;
                            }
                            function parseSelector() {
                                var selector = parseSingleSelector();
                                if (!selector) return null;
                                var res = selector;
                                chr = str.charAt(pos);
                                while ("," === chr) {
                                    pos++;
                                    skipWhitespace();
                                    if ("selectors" !== res.type) res = {
                                        type: "selectors",
                                        selectors: [ selector ]
                                    };
                                    selector = parseSingleSelector();
                                    if (!selector) throw Error('Rule expected after ",".');
                                    res.selectors.push(selector);
                                }
                                return res;
                            }
                            function parseSingleSelector() {
                                skipWhitespace();
                                var selector = {
                                    type: "ruleSet"
                                };
                                var rule = parseRule();
                                if (!rule) return null;
                                var currentRule = selector;
                                while (rule) {
                                    rule.type = "rule";
                                    currentRule.rule = rule;
                                    currentRule = rule;
                                    skipWhitespace();
                                    chr = str.charAt(pos);
                                    if (pos >= l || "," === chr || ")" === chr) break;
                                    if (ruleNestingOperators[chr]) {
                                        var op = chr;
                                        pos++;
                                        skipWhitespace();
                                        rule = parseRule();
                                        if (!rule) throw Error('Rule expected after "' + op + '".');
                                        rule.nestingOperator = op;
                                    } else {
                                        rule = parseRule();
                                        if (rule) rule.nestingOperator = null;
                                    }
                                }
                                return selector;
                            }
                            function parseRule() {
                                var rule = null;
                                while (pos < l) {
                                    chr = str.charAt(pos);
                                    if ("*" === chr) {
                                        pos++;
                                        (rule = rule || {}).tagName = "*";
                                    } else if (utils_1.isIdentStart(chr) || "\\" === chr) (rule = rule || {}).tagName = getIdent(); else if ("." === chr) {
                                        pos++;
                                        rule = rule || {};
                                        (rule.classNames = rule.classNames || []).push(getIdent());
                                    } else if ("#" === chr) {
                                        pos++;
                                        (rule = rule || {}).id = getIdent();
                                    } else if ("[" === chr) {
                                        pos++;
                                        skipWhitespace();
                                        var attr = {
                                            name: getIdent()
                                        };
                                        skipWhitespace();
                                        if ("]" === chr) pos++; else {
                                            var operator = "";
                                            if (attrEqualityMods[chr]) {
                                                operator = chr;
                                                pos++;
                                                chr = str.charAt(pos);
                                            }
                                            if (pos >= l) throw Error('Expected "=" but end of file reached.');
                                            if ("=" !== chr) throw Error('Expected "=" but "' + chr + '" found.');
                                            attr.operator = operator + "=";
                                            pos++;
                                            skipWhitespace();
                                            var attrValue = "";
                                            attr.valueType = "string";
                                            if ('"' === chr) attrValue = getStr('"', utils_1.doubleQuotesEscapeChars); else if ("'" === chr) attrValue = getStr("'", utils_1.singleQuoteEscapeChars); else if (substitutesEnabled && "$" === chr) {
                                                pos++;
                                                attrValue = getIdent();
                                                attr.valueType = "substitute";
                                            } else {
                                                while (pos < l) {
                                                    if ("]" === chr) break;
                                                    attrValue += chr;
                                                    pos++;
                                                    chr = str.charAt(pos);
                                                }
                                                attrValue = attrValue.trim();
                                            }
                                            skipWhitespace();
                                            if (pos >= l) throw Error('Expected "]" but end of file reached.');
                                            if ("]" !== chr) throw Error('Expected "]" but "' + chr + '" found.');
                                            pos++;
                                            attr.value = attrValue;
                                        }
                                        rule = rule || {};
                                        (rule.attrs = rule.attrs || []).push(attr);
                                    } else if (":" === chr) {
                                        pos++;
                                        var pseudoName = getIdent();
                                        var pseudo = {
                                            name: pseudoName
                                        };
                                        if ("(" === chr) {
                                            pos++;
                                            var value = "";
                                            skipWhitespace();
                                            if ("selector" === pseudos[pseudoName]) {
                                                pseudo.valueType = "selector";
                                                value = parseSelector();
                                            } else {
                                                pseudo.valueType = pseudos[pseudoName] || "string";
                                                if ('"' === chr) value = getStr('"', utils_1.doubleQuotesEscapeChars); else if ("'" === chr) value = getStr("'", utils_1.singleQuoteEscapeChars); else if (substitutesEnabled && "$" === chr) {
                                                    pos++;
                                                    value = getIdent();
                                                    pseudo.valueType = "substitute";
                                                } else {
                                                    while (pos < l) {
                                                        if (")" === chr) break;
                                                        value += chr;
                                                        pos++;
                                                        chr = str.charAt(pos);
                                                    }
                                                    value = value.trim();
                                                }
                                                skipWhitespace();
                                            }
                                            if (pos >= l) throw Error('Expected ")" but end of file reached.');
                                            if (")" !== chr) throw Error('Expected ")" but "' + chr + '" found.');
                                            pos++;
                                            pseudo.value = value;
                                        }
                                        rule = rule || {};
                                        (rule.pseudos = rule.pseudos || []).push(pseudo);
                                    } else break;
                                }
                                return rule;
                            }
                            return parse3();
                        }
                        exports.parseCssSelector = parseCssSelector;
                    }));
                    var require_render = __commonJS((function(exports) {
                        "use strict";
                        Object.defineProperty(exports, "__esModule", {
                            value: true
                        });
                        var utils_1 = require_utils();
                        function renderEntity(entity) {
                            var res = "";
                            switch (entity.type) {
                              case "ruleSet":
                                var currentEntity = entity.rule;
                                var parts = [];
                                while (currentEntity) {
                                    if (currentEntity.nestingOperator) parts.push(currentEntity.nestingOperator);
                                    parts.push(renderEntity(currentEntity));
                                    currentEntity = currentEntity.rule;
                                }
                                res = parts.join(" ");
                                break;

                              case "selectors":
                                res = entity.selectors.map(renderEntity).join(", ");
                                break;

                              case "rule":
                                if (entity.tagName) if ("*" === entity.tagName) res = "*"; else res = utils_1.escapeIdentifier(entity.tagName);
                                if (entity.id) res += "#" + utils_1.escapeIdentifier(entity.id);
                                if (entity.classNames) res += entity.classNames.map((function(cn) {
                                    return "." + utils_1.escapeIdentifier(cn);
                                })).join("");
                                if (entity.attrs) res += entity.attrs.map((function(attr) {
                                    if ("operator" in attr) if ("substitute" === attr.valueType) return "[" + utils_1.escapeIdentifier(attr.name) + attr.operator + "$" + attr.value + "]"; else return "[" + utils_1.escapeIdentifier(attr.name) + attr.operator + utils_1.escapeStr(attr.value) + "]"; else return "[" + utils_1.escapeIdentifier(attr.name) + "]";
                                })).join("");
                                if (entity.pseudos) res += entity.pseudos.map((function(pseudo) {
                                    if (pseudo.valueType) if ("selector" === pseudo.valueType) return ":" + utils_1.escapeIdentifier(pseudo.name) + "(" + renderEntity(pseudo.value) + ")"; else if ("substitute" === pseudo.valueType) return ":" + utils_1.escapeIdentifier(pseudo.name) + "($" + pseudo.value + ")"; else if ("numeric" === pseudo.valueType) return ":" + utils_1.escapeIdentifier(pseudo.name) + "(" + pseudo.value + ")"; else return ":" + utils_1.escapeIdentifier(pseudo.name) + "(" + utils_1.escapeIdentifier(pseudo.value) + ")"; else return ":" + utils_1.escapeIdentifier(pseudo.name);
                                })).join("");
                                break;

                              default:
                                throw Error('Unknown entity type: "' + entity.type + '".');
                            }
                            return res;
                        }
                        exports.renderEntity = renderEntity;
                    }));
                    var require_lib = __commonJS((function(exports) {
                        "use strict";
                        Object.defineProperty(exports, "__esModule", {
                            value: true
                        });
                        var parser_context_1 = require_parser_context();
                        var render_1 = require_render();
                        var CssSelectorParser3 = function() {
                            function CssSelectorParser4() {
                                this.pseudos = {};
                                this.attrEqualityMods = {};
                                this.ruleNestingOperators = {};
                                this.substitutesEnabled = false;
                            }
                            CssSelectorParser4.prototype.registerSelectorPseudos = function() {
                                var pseudos = [];
                                for (var _i = 0; _i < arguments.length; _i++) pseudos[_i] = arguments[_i];
                                for (var _a = 0, pseudos_1 = pseudos; _a < pseudos_1.length; _a++) {
                                    var pseudo = pseudos_1[_a];
                                    this.pseudos[pseudo] = "selector";
                                }
                                return this;
                            };
                            CssSelectorParser4.prototype.unregisterSelectorPseudos = function() {
                                var pseudos = [];
                                for (var _i = 0; _i < arguments.length; _i++) pseudos[_i] = arguments[_i];
                                for (var _a = 0, pseudos_2 = pseudos; _a < pseudos_2.length; _a++) {
                                    var pseudo = pseudos_2[_a];
                                    delete this.pseudos[pseudo];
                                }
                                return this;
                            };
                            CssSelectorParser4.prototype.registerNumericPseudos = function() {
                                var pseudos = [];
                                for (var _i = 0; _i < arguments.length; _i++) pseudos[_i] = arguments[_i];
                                for (var _a = 0, pseudos_3 = pseudos; _a < pseudos_3.length; _a++) {
                                    var pseudo = pseudos_3[_a];
                                    this.pseudos[pseudo] = "numeric";
                                }
                                return this;
                            };
                            CssSelectorParser4.prototype.unregisterNumericPseudos = function() {
                                var pseudos = [];
                                for (var _i = 0; _i < arguments.length; _i++) pseudos[_i] = arguments[_i];
                                for (var _a = 0, pseudos_4 = pseudos; _a < pseudos_4.length; _a++) {
                                    var pseudo = pseudos_4[_a];
                                    delete this.pseudos[pseudo];
                                }
                                return this;
                            };
                            CssSelectorParser4.prototype.registerNestingOperators = function() {
                                var operators = [];
                                for (var _i = 0; _i < arguments.length; _i++) operators[_i] = arguments[_i];
                                for (var _a = 0, operators_1 = operators; _a < operators_1.length; _a++) {
                                    var operator = operators_1[_a];
                                    this.ruleNestingOperators[operator] = true;
                                }
                                return this;
                            };
                            CssSelectorParser4.prototype.unregisterNestingOperators = function() {
                                var operators = [];
                                for (var _i = 0; _i < arguments.length; _i++) operators[_i] = arguments[_i];
                                for (var _a = 0, operators_2 = operators; _a < operators_2.length; _a++) {
                                    var operator = operators_2[_a];
                                    delete this.ruleNestingOperators[operator];
                                }
                                return this;
                            };
                            CssSelectorParser4.prototype.registerAttrEqualityMods = function() {
                                var mods = [];
                                for (var _i = 0; _i < arguments.length; _i++) mods[_i] = arguments[_i];
                                for (var _a = 0, mods_1 = mods; _a < mods_1.length; _a++) {
                                    var mod = mods_1[_a];
                                    this.attrEqualityMods[mod] = true;
                                }
                                return this;
                            };
                            CssSelectorParser4.prototype.unregisterAttrEqualityMods = function() {
                                var mods = [];
                                for (var _i = 0; _i < arguments.length; _i++) mods[_i] = arguments[_i];
                                for (var _a = 0, mods_2 = mods; _a < mods_2.length; _a++) {
                                    var mod = mods_2[_a];
                                    delete this.attrEqualityMods[mod];
                                }
                                return this;
                            };
                            CssSelectorParser4.prototype.enableSubstitutes = function() {
                                this.substitutesEnabled = true;
                                return this;
                            };
                            CssSelectorParser4.prototype.disableSubstitutes = function() {
                                this.substitutesEnabled = false;
                                return this;
                            };
                            CssSelectorParser4.prototype.parse = function(str) {
                                return parser_context_1.parseCssSelector(str, 0, this.pseudos, this.attrEqualityMods, this.ruleNestingOperators, this.substitutesEnabled);
                            };
                            CssSelectorParser4.prototype.render = function(path) {
                                return render_1.renderEntity(path).trim();
                            };
                            return CssSelectorParser4;
                        }();
                        exports.CssSelectorParser = CssSelectorParser3;
                    }));
                    var require_es6_promise = __commonJS((function(exports, module) {
                        (function(global2, factory) {
                            "object" === _typeof(exports) && "undefined" !== typeof module ? module.exports = factory() : true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = factory, 
                            __WEBPACK_AMD_DEFINE_RESULT__ = "function" === typeof __WEBPACK_AMD_DEFINE_FACTORY__ ? __WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module) : __WEBPACK_AMD_DEFINE_FACTORY__, 
                            void 0 !== __WEBPACK_AMD_DEFINE_RESULT__ && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;
                        })(0, (function() {
                            "use strict";
                            function objectOrFunction(x) {
                                var type2 = _typeof(x);
                                return null !== x && ("object" === type2 || "function" === type2);
                            }
                            function isFunction(x) {
                                return "function" === typeof x;
                            }
                            var _isArray = void 0;
                            if (Array.isArray) _isArray = Array.isArray; else _isArray = function(x) {
                                return "[object Array]" === Object.prototype.toString.call(x);
                            };
                            var isArray = _isArray;
                            var len = 0;
                            var vertxNext = void 0;
                            var customSchedulerFn = void 0;
                            var asap = function(callback, arg) {
                                queue2[len] = callback;
                                queue2[len + 1] = arg;
                                len += 2;
                                if (2 === len) if (customSchedulerFn) customSchedulerFn(flush); else scheduleFlush();
                            };
                            function setScheduler(scheduleFn) {
                                customSchedulerFn = scheduleFn;
                            }
                            function setAsap(asapFn) {
                                asap = asapFn;
                            }
                            var browserWindow = "undefined" !== typeof window ? window : void 0;
                            var browserGlobal = browserWindow || {};
                            var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
                            var isNode2 = "undefined" === typeof self && "object" !== "undefined" && "[object process]" === {}.toString.call({});
                            var isWorker = "undefined" !== typeof Uint8ClampedArray && "undefined" !== typeof importScripts && "undefined" !== typeof MessageChannel;
                            function useNextTick() {
                                return function() {
                                    return {}.nextTick(flush);
                                };
                            }
                            function useVertxTimer() {
                                if ("undefined" !== typeof vertxNext) return function() {
                                    vertxNext(flush);
                                };
                                return useSetTimeout();
                            }
                            function useMutationObserver() {
                                var iterations = 0;
                                var observer = new BrowserMutationObserver(flush);
                                var node = document.createTextNode("");
                                observer.observe(node, {
                                    characterData: true
                                });
                                return function() {
                                    node.data = iterations = ++iterations % 2;
                                };
                            }
                            function useMessageChannel() {
                                var channel = new MessageChannel;
                                channel.port1.onmessage = flush;
                                return function() {
                                    return channel.port2.postMessage(0);
                                };
                            }
                            function useSetTimeout() {
                                var globalSetTimeout = setTimeout;
                                return function() {
                                    return globalSetTimeout(flush, 1);
                                };
                            }
                            var queue2 = new Array(1e3);
                            function flush() {
                                for (var i = 0; i < len; i += 2) {
                                    var callback = queue2[i];
                                    var arg = queue2[i + 1];
                                    callback(arg);
                                    queue2[i] = void 0;
                                    queue2[i + 1] = void 0;
                                }
                                len = 0;
                            }
                            function attemptVertx() {
                                try {
                                    var vertx = Function("return this")().require("vertx");
                                    vertxNext = vertx.runOnLoop || vertx.runOnContext;
                                    return useVertxTimer();
                                } catch (e) {
                                    return useSetTimeout();
                                }
                            }
                            var scheduleFlush = void 0;
                            if (isNode2) scheduleFlush = useNextTick(); else if (BrowserMutationObserver) scheduleFlush = useMutationObserver(); else if (isWorker) scheduleFlush = useMessageChannel(); else if (void 0 === browserWindow && true) scheduleFlush = attemptVertx(); else scheduleFlush = useSetTimeout();
                            function then(onFulfillment, onRejection) {
                                var parent = this;
                                var child = new this.constructor(noop3);
                                if (void 0 === child[PROMISE_ID]) makePromise(child);
                                var _state = parent._state;
                                if (_state) {
                                    var callback = arguments[_state - 1];
                                    asap((function() {
                                        return invokeCallback(_state, child, callback, parent._result);
                                    }));
                                } else subscribe2(parent, child, onFulfillment, onRejection);
                                return child;
                            }
                            function resolve$1(object) {
                                var Constructor = this;
                                if (object && "object" === _typeof(object) && object.constructor === Constructor) return object;
                                var promise = new Constructor(noop3);
                                resolve(promise, object);
                                return promise;
                            }
                            var PROMISE_ID = Math.random().toString(36).substring(2);
                            function noop3() {}
                            var PENDING = void 0;
                            var FULFILLED = 1;
                            var REJECTED = 2;
                            function selfFulfillment() {
                                return new TypeError("You cannot resolve a promise with itself");
                            }
                            function cannotReturnOwn() {
                                return new TypeError("A promises callback cannot return that same promise.");
                            }
                            function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
                                try {
                                    then$$1.call(value, fulfillmentHandler, rejectionHandler);
                                } catch (e) {
                                    return e;
                                }
                            }
                            function handleForeignThenable(promise, thenable, then$$1) {
                                asap((function(promise2) {
                                    var sealed = false;
                                    var error = tryThen(then$$1, thenable, (function(value) {
                                        if (sealed) return;
                                        sealed = true;
                                        if (thenable !== value) resolve(promise2, value); else fulfill(promise2, value);
                                    }), (function(reason) {
                                        if (sealed) return;
                                        sealed = true;
                                        reject(promise2, reason);
                                    }), "Settle: " + (promise2._label || " unknown promise"));
                                    if (!sealed && error) {
                                        sealed = true;
                                        reject(promise2, error);
                                    }
                                }), promise);
                            }
                            function handleOwnThenable(promise, thenable) {
                                if (thenable._state === FULFILLED) fulfill(promise, thenable._result); else if (thenable._state === REJECTED) reject(promise, thenable._result); else subscribe2(thenable, void 0, (function(value) {
                                    return resolve(promise, value);
                                }), (function(reason) {
                                    return reject(promise, reason);
                                }));
                            }
                            function handleMaybeThenable(promise, maybeThenable, then$$1) {
                                if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) handleOwnThenable(promise, maybeThenable); else if (void 0 === then$$1) fulfill(promise, maybeThenable); else if (isFunction(then$$1)) handleForeignThenable(promise, maybeThenable, then$$1); else fulfill(promise, maybeThenable);
                            }
                            function resolve(promise, value) {
                                if (promise === value) reject(promise, selfFulfillment()); else if (objectOrFunction(value)) {
                                    var then$$1 = void 0;
                                    try {
                                        then$$1 = value.then;
                                    } catch (error) {
                                        reject(promise, error);
                                        return;
                                    }
                                    handleMaybeThenable(promise, value, then$$1);
                                } else fulfill(promise, value);
                            }
                            function publishRejection(promise) {
                                if (promise._onerror) promise._onerror(promise._result);
                                publish(promise);
                            }
                            function fulfill(promise, value) {
                                if (promise._state !== PENDING) return;
                                promise._result = value;
                                promise._state = FULFILLED;
                                if (0 !== promise._subscribers.length) asap(publish, promise);
                            }
                            function reject(promise, reason) {
                                if (promise._state !== PENDING) return;
                                promise._state = REJECTED;
                                promise._result = reason;
                                asap(publishRejection, promise);
                            }
                            function subscribe2(parent, child, onFulfillment, onRejection) {
                                var _subscribers = parent._subscribers;
                                var length = _subscribers.length;
                                parent._onerror = null;
                                _subscribers[length] = child;
                                _subscribers[length + FULFILLED] = onFulfillment;
                                _subscribers[length + REJECTED] = onRejection;
                                if (0 === length && parent._state) asap(publish, parent);
                            }
                            function publish(promise) {
                                var subscribers = promise._subscribers;
                                var settled = promise._state;
                                if (0 === subscribers.length) return;
                                var child = void 0, callback = void 0, detail = promise._result;
                                for (var i = 0; i < subscribers.length; i += 3) {
                                    child = subscribers[i];
                                    callback = subscribers[i + settled];
                                    if (child) invokeCallback(settled, child, callback, detail); else callback(detail);
                                }
                                promise._subscribers.length = 0;
                            }
                            function invokeCallback(settled, promise, callback, detail) {
                                var hasCallback = isFunction(callback), value = void 0, error = void 0, succeeded = true;
                                if (hasCallback) {
                                    try {
                                        value = callback(detail);
                                    } catch (e) {
                                        succeeded = false;
                                        error = e;
                                    }
                                    if (promise === value) {
                                        reject(promise, cannotReturnOwn());
                                        return;
                                    }
                                } else value = detail;
                                if (promise._state !== PENDING) ; else if (hasCallback && succeeded) resolve(promise, value); else if (false === succeeded) reject(promise, error); else if (settled === FULFILLED) fulfill(promise, value); else if (settled === REJECTED) reject(promise, value);
                            }
                            function initializePromise(promise, resolver) {
                                try {
                                    resolver((function(value) {
                                        resolve(promise, value);
                                    }), (function(reason) {
                                        reject(promise, reason);
                                    }));
                                } catch (e) {
                                    reject(promise, e);
                                }
                            }
                            var id = 0;
                            function nextId() {
                                return id++;
                            }
                            function makePromise(promise) {
                                promise[PROMISE_ID] = id++;
                                promise._state = void 0;
                                promise._result = void 0;
                                promise._subscribers = [];
                            }
                            function validationError() {
                                return new Error("Array Methods must be provided an Array");
                            }
                            var Enumerator = function() {
                                function Enumerator2(Constructor, input) {
                                    this._instanceConstructor = Constructor;
                                    this.promise = new Constructor(noop3);
                                    if (!this.promise[PROMISE_ID]) makePromise(this.promise);
                                    if (isArray(input)) {
                                        this.length = input.length;
                                        this._remaining = input.length;
                                        this._result = new Array(this.length);
                                        if (0 === this.length) fulfill(this.promise, this._result); else {
                                            this.length = this.length || 0;
                                            this._enumerate(input);
                                            if (0 === this._remaining) fulfill(this.promise, this._result);
                                        }
                                    } else reject(this.promise, validationError());
                                }
                                Enumerator2.prototype._enumerate = function(input) {
                                    for (var i = 0; this._state === PENDING && i < input.length; i++) this._eachEntry(input[i], i);
                                };
                                Enumerator2.prototype._eachEntry = function(entry, i) {
                                    var c4 = this._instanceConstructor;
                                    var resolve$$1 = c4.resolve;
                                    if (resolve$$1 === resolve$1) {
                                        var _then = void 0;
                                        var error = void 0;
                                        var didError = false;
                                        try {
                                            _then = entry.then;
                                        } catch (e) {
                                            didError = true;
                                            error = e;
                                        }
                                        if (_then === then && entry._state !== PENDING) this._settledAt(entry._state, i, entry._result); else if ("function" !== typeof _then) {
                                            this._remaining--;
                                            this._result[i] = entry;
                                        } else if (c4 === Promise$1) {
                                            var promise = new c4(noop3);
                                            if (didError) reject(promise, error); else handleMaybeThenable(promise, entry, _then);
                                            this._willSettleAt(promise, i);
                                        } else this._willSettleAt(new c4((function(resolve$$12) {
                                            return resolve$$12(entry);
                                        })), i);
                                    } else this._willSettleAt(resolve$$1(entry), i);
                                };
                                Enumerator2.prototype._settledAt = function(state, i, value) {
                                    var promise = this.promise;
                                    if (promise._state === PENDING) {
                                        this._remaining--;
                                        if (state === REJECTED) reject(promise, value); else this._result[i] = value;
                                    }
                                    if (0 === this._remaining) fulfill(promise, this._result);
                                };
                                Enumerator2.prototype._willSettleAt = function(promise, i) {
                                    var enumerator = this;
                                    subscribe2(promise, void 0, (function(value) {
                                        return enumerator._settledAt(FULFILLED, i, value);
                                    }), (function(reason) {
                                        return enumerator._settledAt(REJECTED, i, reason);
                                    }));
                                };
                                return Enumerator2;
                            }();
                            function all(entries) {
                                return new Enumerator(this, entries).promise;
                            }
                            function race(entries) {
                                var Constructor = this;
                                if (!isArray(entries)) return new Constructor((function(_, reject2) {
                                    return reject2(new TypeError("You must pass an array to race."));
                                })); else return new Constructor((function(resolve2, reject2) {
                                    var length = entries.length;
                                    for (var i = 0; i < length; i++) Constructor.resolve(entries[i]).then(resolve2, reject2);
                                }));
                            }
                            function reject$1(reason) {
                                var Constructor = this;
                                var promise = new Constructor(noop3);
                                reject(promise, reason);
                                return promise;
                            }
                            function needsResolver() {
                                throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
                            }
                            function needsNew() {
                                throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
                            }
                            var Promise$1 = function() {
                                function Promise2(resolver) {
                                    this[PROMISE_ID] = nextId();
                                    this._result = this._state = void 0;
                                    this._subscribers = [];
                                    if (noop3 !== resolver) {
                                        "function" !== typeof resolver && needsResolver();
                                        this instanceof Promise2 ? initializePromise(this, resolver) : needsNew();
                                    }
                                }
                                Promise2.prototype["catch"] = function(onRejection) {
                                    return this.then(null, onRejection);
                                };
                                Promise2.prototype["finally"] = function(callback) {
                                    var promise = this;
                                    var constructor = promise.constructor;
                                    if (isFunction(callback)) return promise.then((function(value) {
                                        return constructor.resolve(callback()).then((function() {
                                            return value;
                                        }));
                                    }), (function(reason) {
                                        return constructor.resolve(callback()).then((function() {
                                            throw reason;
                                        }));
                                    }));
                                    return promise.then(callback, callback);
                                };
                                return Promise2;
                            }();
                            Promise$1.prototype.then = then;
                            Promise$1.all = all;
                            Promise$1.race = race;
                            Promise$1.resolve = resolve$1;
                            Promise$1.reject = reject$1;
                            Promise$1._setScheduler = setScheduler;
                            Promise$1._setAsap = setAsap;
                            Promise$1._asap = asap;
                            function polyfill() {
                                var local = void 0;
                                if ("undefined" !== typeof global) local = global; else if ("undefined" !== typeof self) local = self; else try {
                                    local = Function("return this")();
                                } catch (e) {
                                    throw new Error("polyfill failed because global object is unavailable in this environment");
                                }
                                var P = local.Promise;
                                if (P) {
                                    var promiseToString = null;
                                    try {
                                        promiseToString = Object.prototype.toString.call(P.resolve());
                                    } catch (e) {}
                                    if ("[object Promise]" === promiseToString && !P.cast) return;
                                }
                                local.Promise = Promise$1;
                            }
                            Promise$1.polyfill = polyfill;
                            Promise$1.Promise = Promise$1;
                            return Promise$1;
                        }));
                    }));
                    var require_typedarray = __commonJS((function(exports) {
                        var MAX_ARRAY_LENGTH = 1e5;
                        var ECMAScript = function() {
                            var opts = Object.prototype.toString;
                            var ophop = Object.prototype.hasOwnProperty;
                            return {
                                Class: function(v) {
                                    return opts.call(v).replace(/^\[object *|\]$/g, "");
                                },
                                HasProperty: function(o, p2) {
                                    return p2 in o;
                                },
                                HasOwnProperty: function(o, p2) {
                                    return ophop.call(o, p2);
                                },
                                IsCallable: function(o) {
                                    return "function" === typeof o;
                                },
                                ToInt32: function(v) {
                                    return v >> 0;
                                },
                                ToUint32: function(v) {
                                    return v >>> 0;
                                }
                            };
                        }();
                        var LN2 = Math.LN2;
                        var abs = Math.abs;
                        var floor = Math.floor;
                        var log2 = Math.log;
                        var min = Math.min;
                        var pow = Math.pow;
                        var round = Math.round;
                        function clamp3(v, minimum, max2) {
                            return v < minimum ? minimum : v > max2 ? max2 : v;
                        }
                        var getOwnPropNames = Object.getOwnPropertyNames || function(o) {
                            if (o !== Object(o)) throw new TypeError("Object.getOwnPropertyNames called on non-object");
                            var p2, props = [];
                            for (p2 in o) if (ECMAScript.HasOwnProperty(o, p2)) props.push(p2);
                            return props;
                        };
                        var defineProp;
                        if (Object.defineProperty && function() {
                            try {
                                Object.defineProperty({}, "x", {});
                                return true;
                            } catch (e) {
                                return false;
                            }
                        }()) defineProp = Object.defineProperty; else defineProp = function(o, p2, desc) {
                            if (!o === Object(o)) throw new TypeError("Object.defineProperty called on non-object");
                            if (ECMAScript.HasProperty(desc, "get") && Object.prototype.__defineGetter__) Object.prototype.__defineGetter__.call(o, p2, desc.get);
                            if (ECMAScript.HasProperty(desc, "set") && Object.prototype.__defineSetter__) Object.prototype.__defineSetter__.call(o, p2, desc.set);
                            if (ECMAScript.HasProperty(desc, "value")) o[p2] = desc.value;
                            return o;
                        };
                        function configureProperties(obj) {
                            if (getOwnPropNames && defineProp) {
                                var i, props = getOwnPropNames(obj);
                                for (i = 0; i < props.length; i += 1) defineProp(obj, props[i], {
                                    value: obj[props[i]],
                                    writable: false,
                                    enumerable: false,
                                    configurable: false
                                });
                            }
                        }
                        function makeArrayAccessors(obj) {
                            if (!defineProp) return;
                            if (obj.length > MAX_ARRAY_LENGTH) throw new RangeError("Array too large for polyfill");
                            function makeArrayAccessor(index) {
                                defineProp(obj, index, {
                                    get: function() {
                                        return obj._getter(index);
                                    },
                                    set: function(v) {
                                        obj._setter(index, v);
                                    },
                                    enumerable: true,
                                    configurable: false
                                });
                            }
                            var i;
                            for (i = 0; i < obj.length; i += 1) makeArrayAccessor(i);
                        }
                        function as_signed(value, bits) {
                            var s = 32 - bits;
                            return value << s >> s;
                        }
                        function as_unsigned(value, bits) {
                            var s = 32 - bits;
                            return value << s >>> s;
                        }
                        function packI8(n2) {
                            return [ 255 & n2 ];
                        }
                        function unpackI8(bytes) {
                            return as_signed(bytes[0], 8);
                        }
                        function packU8(n2) {
                            return [ 255 & n2 ];
                        }
                        function unpackU8(bytes) {
                            return as_unsigned(bytes[0], 8);
                        }
                        function packU8Clamped(n2) {
                            n2 = round(Number(n2));
                            return [ n2 < 0 ? 0 : n2 > 255 ? 255 : 255 & n2 ];
                        }
                        function packI16(n2) {
                            return [ n2 >> 8 & 255, 255 & n2 ];
                        }
                        function unpackI16(bytes) {
                            return as_signed(bytes[0] << 8 | bytes[1], 16);
                        }
                        function packU16(n2) {
                            return [ n2 >> 8 & 255, 255 & n2 ];
                        }
                        function unpackU16(bytes) {
                            return as_unsigned(bytes[0] << 8 | bytes[1], 16);
                        }
                        function packI32(n2) {
                            return [ n2 >> 24 & 255, n2 >> 16 & 255, n2 >> 8 & 255, 255 & n2 ];
                        }
                        function unpackI32(bytes) {
                            return as_signed(bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], 32);
                        }
                        function packU32(n2) {
                            return [ n2 >> 24 & 255, n2 >> 16 & 255, n2 >> 8 & 255, 255 & n2 ];
                        }
                        function unpackU32(bytes) {
                            return as_unsigned(bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], 32);
                        }
                        function packIEEE754(v, ebits, fbits) {
                            var bias = (1 << ebits - 1) - 1;
                            var s, e, f, i, bits, str, bytes;
                            function roundToEven(n2) {
                                var w = floor(n2);
                                var fl = n2 - w;
                                if (fl < .5) return w;
                                if (fl > .5) return w + 1;
                                return w % 2 ? w + 1 : w;
                            }
                            if (v !== v) {
                                e = (1 << ebits) - 1;
                                f = pow(2, fbits - 1);
                                s = 0;
                            } else if (v === 1 / 0 || v === -1 / 0) {
                                e = (1 << ebits) - 1;
                                f = 0;
                                s = v < 0 ? 1 : 0;
                            } else if (0 === v) {
                                e = 0;
                                f = 0;
                                s = 1 / v === -1 / 0 ? 1 : 0;
                            } else {
                                s = v < 0;
                                v = abs(v);
                                if (v >= pow(2, 1 - bias)) {
                                    e = min(floor(log2(v) / LN2), 1023);
                                    f = roundToEven(v / pow(2, e) * pow(2, fbits));
                                    if (f / pow(2, fbits) >= 2) {
                                        e += 1;
                                        f = 1;
                                    }
                                    if (e > bias) {
                                        e = (1 << ebits) - 1;
                                        f = 0;
                                    } else {
                                        e += bias;
                                        f -= pow(2, fbits);
                                    }
                                } else {
                                    e = 0;
                                    f = roundToEven(v / pow(2, 1 - bias - fbits));
                                }
                            }
                            bits = [];
                            for (i = fbits; i; i -= 1) {
                                bits.push(f % 2 ? 1 : 0);
                                f = floor(f / 2);
                            }
                            for (i = ebits; i; i -= 1) {
                                bits.push(e % 2 ? 1 : 0);
                                e = floor(e / 2);
                            }
                            bits.push(s ? 1 : 0);
                            bits.reverse();
                            str = bits.join("");
                            bytes = [];
                            while (str.length) {
                                bytes.push(parseInt(str.substring(0, 8), 2));
                                str = str.substring(8);
                            }
                            return bytes;
                        }
                        function unpackIEEE754(bytes, ebits, fbits) {
                            var i, j, b2, str, bias, s, e, f, bits = [];
                            for (i = bytes.length; i; i -= 1) {
                                b2 = bytes[i - 1];
                                for (j = 8; j; j -= 1) {
                                    bits.push(b2 % 2 ? 1 : 0);
                                    b2 >>= 1;
                                }
                            }
                            bits.reverse();
                            str = bits.join("");
                            bias = (1 << ebits - 1) - 1;
                            s = parseInt(str.substring(0, 1), 2) ? -1 : 1;
                            e = parseInt(str.substring(1, 1 + ebits), 2);
                            f = parseInt(str.substring(1 + ebits), 2);
                            if (e === (1 << ebits) - 1) return 0 === f ? s * (1 / 0) : NaN; else if (e > 0) return s * pow(2, e - bias) * (1 + f / pow(2, fbits)); else if (0 !== f) return s * pow(2, -(bias - 1)) * (f / pow(2, fbits));
                            return s < 0 ? -0 : 0;
                        }
                        function unpackF64(b2) {
                            return unpackIEEE754(b2, 11, 52);
                        }
                        function packF64(v) {
                            return packIEEE754(v, 11, 52);
                        }
                        function unpackF32(b2) {
                            return unpackIEEE754(b2, 8, 23);
                        }
                        function packF32(v) {
                            return packIEEE754(v, 8, 23);
                        }
                        (function() {
                            function ArrayBuffer(length) {
                                length = ECMAScript.ToInt32(length);
                                if (length < 0) throw new RangeError("ArrayBuffer size is not a small enough positive integer");
                                this.byteLength = length;
                                this._bytes = [];
                                this._bytes.length = length;
                                var i;
                                for (i = 0; i < this.byteLength; i += 1) this._bytes[i] = 0;
                                configureProperties(this);
                            }
                            exports.ArrayBuffer = exports.ArrayBuffer || ArrayBuffer;
                            function ArrayBufferView() {}
                            function makeConstructor(bytesPerElement, pack, unpack) {
                                var _ctor;
                                _ctor = function(buffer, byteOffset, length) {
                                    var array, sequence, i, s;
                                    if (!arguments.length || "number" === typeof arguments[0]) {
                                        this.length = ECMAScript.ToInt32(arguments[0]);
                                        if (length < 0) throw new RangeError("ArrayBufferView size is not a small enough positive integer");
                                        this.byteLength = this.length * this.BYTES_PER_ELEMENT;
                                        this.buffer = new ArrayBuffer(this.byteLength);
                                        this.byteOffset = 0;
                                    } else if ("object" === _typeof(arguments[0]) && arguments[0].constructor === _ctor) {
                                        array = arguments[0];
                                        this.length = array.length;
                                        this.byteLength = this.length * this.BYTES_PER_ELEMENT;
                                        this.buffer = new ArrayBuffer(this.byteLength);
                                        this.byteOffset = 0;
                                        for (i = 0; i < this.length; i += 1) this._setter(i, array._getter(i));
                                    } else if ("object" === _typeof(arguments[0]) && !(arguments[0] instanceof ArrayBuffer || "ArrayBuffer" === ECMAScript.Class(arguments[0]))) {
                                        sequence = arguments[0];
                                        this.length = ECMAScript.ToUint32(sequence.length);
                                        this.byteLength = this.length * this.BYTES_PER_ELEMENT;
                                        this.buffer = new ArrayBuffer(this.byteLength);
                                        this.byteOffset = 0;
                                        for (i = 0; i < this.length; i += 1) {
                                            s = sequence[i];
                                            this._setter(i, Number(s));
                                        }
                                    } else if ("object" === _typeof(arguments[0]) && (arguments[0] instanceof ArrayBuffer || "ArrayBuffer" === ECMAScript.Class(arguments[0]))) {
                                        this.buffer = buffer;
                                        this.byteOffset = ECMAScript.ToUint32(byteOffset);
                                        if (this.byteOffset > this.buffer.byteLength) throw new RangeError("byteOffset out of range");
                                        if (this.byteOffset % this.BYTES_PER_ELEMENT) throw new RangeError("ArrayBuffer length minus the byteOffset is not a multiple of the element size.");
                                        if (arguments.length < 3) {
                                            this.byteLength = this.buffer.byteLength - this.byteOffset;
                                            if (this.byteLength % this.BYTES_PER_ELEMENT) throw new RangeError("length of buffer minus byteOffset not a multiple of the element size");
                                            this.length = this.byteLength / this.BYTES_PER_ELEMENT;
                                        } else {
                                            this.length = ECMAScript.ToUint32(length);
                                            this.byteLength = this.length * this.BYTES_PER_ELEMENT;
                                        }
                                        if (this.byteOffset + this.byteLength > this.buffer.byteLength) throw new RangeError("byteOffset and length reference an area beyond the end of the buffer");
                                    } else throw new TypeError("Unexpected argument type(s)");
                                    this.constructor = _ctor;
                                    configureProperties(this);
                                    makeArrayAccessors(this);
                                };
                                _ctor.prototype = new ArrayBufferView;
                                _ctor.prototype.BYTES_PER_ELEMENT = bytesPerElement;
                                _ctor.prototype._pack = pack;
                                _ctor.prototype._unpack = unpack;
                                _ctor.BYTES_PER_ELEMENT = bytesPerElement;
                                _ctor.prototype._getter = function(index) {
                                    if (arguments.length < 1) throw new SyntaxError("Not enough arguments");
                                    index = ECMAScript.ToUint32(index);
                                    if (index >= this.length) return;
                                    var bytes = [];
                                    for (var i = 0, o = this.byteOffset + index * this.BYTES_PER_ELEMENT; i < this.BYTES_PER_ELEMENT; i += 1, 
                                    o += 1) bytes.push(this.buffer._bytes[o]);
                                    return this._unpack(bytes);
                                };
                                _ctor.prototype.get = _ctor.prototype._getter;
                                _ctor.prototype._setter = function(index, value) {
                                    if (arguments.length < 2) throw new SyntaxError("Not enough arguments");
                                    index = ECMAScript.ToUint32(index);
                                    if (index < this.length) {
                                        var bytes = this._pack(value);
                                        var i;
                                        var o;
                                        for (i = 0, o = this.byteOffset + index * this.BYTES_PER_ELEMENT; i < this.BYTES_PER_ELEMENT; i += 1, 
                                        o += 1) this.buffer._bytes[o] = bytes[i];
                                    }
                                };
                                _ctor.prototype.set = function(index, value) {
                                    if (arguments.length < 1) throw new SyntaxError("Not enough arguments");
                                    var array, sequence, offset, len, i, s, d2, byteOffset, byteLength, tmp;
                                    if ("object" === _typeof(arguments[0]) && arguments[0].constructor === this.constructor) {
                                        array = arguments[0];
                                        offset = ECMAScript.ToUint32(arguments[1]);
                                        if (offset + array.length > this.length) throw new RangeError("Offset plus length of array is out of range");
                                        byteOffset = this.byteOffset + offset * this.BYTES_PER_ELEMENT;
                                        byteLength = array.length * this.BYTES_PER_ELEMENT;
                                        if (array.buffer === this.buffer) {
                                            tmp = [];
                                            for (i = 0, s = array.byteOffset; i < byteLength; i += 1, s += 1) tmp[i] = array.buffer._bytes[s];
                                            for (i = 0, d2 = byteOffset; i < byteLength; i += 1, d2 += 1) this.buffer._bytes[d2] = tmp[i];
                                        } else for (i = 0, s = array.byteOffset, d2 = byteOffset; i < byteLength; i += 1, 
                                        s += 1, d2 += 1) this.buffer._bytes[d2] = array.buffer._bytes[s];
                                    } else if ("object" === _typeof(arguments[0]) && "undefined" !== typeof arguments[0].length) {
                                        sequence = arguments[0];
                                        len = ECMAScript.ToUint32(sequence.length);
                                        offset = ECMAScript.ToUint32(arguments[1]);
                                        if (offset + len > this.length) throw new RangeError("Offset plus length of array is out of range");
                                        for (i = 0; i < len; i += 1) {
                                            s = sequence[i];
                                            this._setter(offset + i, Number(s));
                                        }
                                    } else throw new TypeError("Unexpected argument type(s)");
                                };
                                _ctor.prototype.subarray = function(start, end) {
                                    start = ECMAScript.ToInt32(start);
                                    end = ECMAScript.ToInt32(end);
                                    if (arguments.length < 1) start = 0;
                                    if (arguments.length < 2) end = this.length;
                                    if (start < 0) start = this.length + start;
                                    if (end < 0) end = this.length + end;
                                    start = clamp3(start, 0, this.length);
                                    end = clamp3(end, 0, this.length);
                                    var len = end - start;
                                    if (len < 0) len = 0;
                                    return new this.constructor(this.buffer, this.byteOffset + start * this.BYTES_PER_ELEMENT, len);
                                };
                                return _ctor;
                            }
                            var Int8Array = makeConstructor(1, packI8, unpackI8);
                            var Uint8Array2 = makeConstructor(1, packU8, unpackU8);
                            var Uint8ClampedArray2 = makeConstructor(1, packU8Clamped, unpackU8);
                            var Int16Array = makeConstructor(2, packI16, unpackI16);
                            var Uint16Array = makeConstructor(2, packU16, unpackU16);
                            var Int32Array = makeConstructor(4, packI32, unpackI32);
                            var Uint32Array3 = makeConstructor(4, packU32, unpackU32);
                            var Float32Array = makeConstructor(4, packF32, unpackF32);
                            var Float64Array = makeConstructor(8, packF64, unpackF64);
                            exports.Int8Array = exports.Int8Array || Int8Array;
                            exports.Uint8Array = exports.Uint8Array || Uint8Array2;
                            exports.Uint8ClampedArray = exports.Uint8ClampedArray || Uint8ClampedArray2;
                            exports.Int16Array = exports.Int16Array || Int16Array;
                            exports.Uint16Array = exports.Uint16Array || Uint16Array;
                            exports.Int32Array = exports.Int32Array || Int32Array;
                            exports.Uint32Array = exports.Uint32Array || Uint32Array3;
                            exports.Float32Array = exports.Float32Array || Float32Array;
                            exports.Float64Array = exports.Float64Array || Float64Array;
                        })();
                        (function() {
                            function r(array, index) {
                                return ECMAScript.IsCallable(array.get) ? array.get(index) : array[index];
                            }
                            var IS_BIG_ENDIAN = function() {
                                var u16array = new exports.Uint16Array([ 4660 ]), u8array = new exports.Uint8Array(u16array.buffer);
                                return 18 === r(u8array, 0);
                            }();
                            function DataView(buffer, byteOffset, byteLength) {
                                if (0 === arguments.length) buffer = new exports.ArrayBuffer(0); else if (!(buffer instanceof exports.ArrayBuffer || "ArrayBuffer" === ECMAScript.Class(buffer))) throw new TypeError("TypeError");
                                this.buffer = buffer || new exports.ArrayBuffer(0);
                                this.byteOffset = ECMAScript.ToUint32(byteOffset);
                                if (this.byteOffset > this.buffer.byteLength) throw new RangeError("byteOffset out of range");
                                if (arguments.length < 3) this.byteLength = this.buffer.byteLength - this.byteOffset; else this.byteLength = ECMAScript.ToUint32(byteLength);
                                if (this.byteOffset + this.byteLength > this.buffer.byteLength) throw new RangeError("byteOffset and length reference an area beyond the end of the buffer");
                                configureProperties(this);
                            }
                            function makeGetter(arrayType) {
                                return function(byteOffset, littleEndian) {
                                    byteOffset = ECMAScript.ToUint32(byteOffset);
                                    if (byteOffset + arrayType.BYTES_PER_ELEMENT > this.byteLength) throw new RangeError("Array index out of range");
                                    byteOffset += this.byteOffset;
                                    var i, uint8Array = new exports.Uint8Array(this.buffer, byteOffset, arrayType.BYTES_PER_ELEMENT), bytes = [];
                                    for (i = 0; i < arrayType.BYTES_PER_ELEMENT; i += 1) bytes.push(r(uint8Array, i));
                                    if (Boolean(littleEndian) === Boolean(IS_BIG_ENDIAN)) bytes.reverse();
                                    return r(new arrayType(new exports.Uint8Array(bytes).buffer), 0);
                                };
                            }
                            DataView.prototype.getUint8 = makeGetter(exports.Uint8Array);
                            DataView.prototype.getInt8 = makeGetter(exports.Int8Array);
                            DataView.prototype.getUint16 = makeGetter(exports.Uint16Array);
                            DataView.prototype.getInt16 = makeGetter(exports.Int16Array);
                            DataView.prototype.getUint32 = makeGetter(exports.Uint32Array);
                            DataView.prototype.getInt32 = makeGetter(exports.Int32Array);
                            DataView.prototype.getFloat32 = makeGetter(exports.Float32Array);
                            DataView.prototype.getFloat64 = makeGetter(exports.Float64Array);
                            function makeSetter(arrayType) {
                                return function(byteOffset, value, littleEndian) {
                                    byteOffset = ECMAScript.ToUint32(byteOffset);
                                    if (byteOffset + arrayType.BYTES_PER_ELEMENT > this.byteLength) throw new RangeError("Array index out of range");
                                    var i, byteView, typeArray = new arrayType([ value ]), byteArray = new exports.Uint8Array(typeArray.buffer), bytes = [];
                                    for (i = 0; i < arrayType.BYTES_PER_ELEMENT; i += 1) bytes.push(r(byteArray, i));
                                    if (Boolean(littleEndian) === Boolean(IS_BIG_ENDIAN)) bytes.reverse();
                                    byteView = new exports.Uint8Array(this.buffer, byteOffset, arrayType.BYTES_PER_ELEMENT);
                                    byteView.set(bytes);
                                };
                            }
                            DataView.prototype.setUint8 = makeSetter(exports.Uint8Array);
                            DataView.prototype.setInt8 = makeSetter(exports.Int8Array);
                            DataView.prototype.setUint16 = makeSetter(exports.Uint16Array);
                            DataView.prototype.setInt16 = makeSetter(exports.Int16Array);
                            DataView.prototype.setUint32 = makeSetter(exports.Uint32Array);
                            DataView.prototype.setInt32 = makeSetter(exports.Int32Array);
                            DataView.prototype.setFloat32 = makeSetter(exports.Float32Array);
                            DataView.prototype.setFloat64 = makeSetter(exports.Float64Array);
                            exports.DataView = exports.DataView || DataView;
                        })();
                    }));
                    var require_weakmap_polyfill = __commonJS((function(exports) {
                        (function(self2) {
                            "use strict";
                            if (self2.WeakMap) return;
                            var hasOwnProperty2 = Object.prototype.hasOwnProperty;
                            var hasDefine = Object.defineProperty && function() {
                                try {
                                    return 1 === Object.defineProperty({}, "x", {
                                        value: 1
                                    }).x;
                                } catch (e) {}
                            }();
                            var defineProperty = function(object, name, value) {
                                if (hasDefine) Object.defineProperty(object, name, {
                                    configurable: true,
                                    writable: true,
                                    value
                                }); else object[name] = value;
                            };
                            self2.WeakMap = function() {
                                function WeakMap2() {
                                    if (void 0 === this) throw new TypeError("Constructor WeakMap requires 'new'");
                                    defineProperty(this, "_id", genId("_WeakMap"));
                                    if (arguments.length > 0) throw new TypeError("WeakMap iterable is not supported");
                                }
                                defineProperty(WeakMap2.prototype, "delete", (function(key) {
                                    checkInstance(this, "delete");
                                    if (!isObject(key)) return false;
                                    var entry = key[this._id];
                                    if (entry && entry[0] === key) {
                                        delete key[this._id];
                                        return true;
                                    }
                                    return false;
                                }));
                                defineProperty(WeakMap2.prototype, "get", (function(key) {
                                    checkInstance(this, "get");
                                    if (!isObject(key)) return;
                                    var entry = key[this._id];
                                    if (entry && entry[0] === key) return entry[1];
                                    return;
                                }));
                                defineProperty(WeakMap2.prototype, "has", (function(key) {
                                    checkInstance(this, "has");
                                    if (!isObject(key)) return false;
                                    var entry = key[this._id];
                                    if (entry && entry[0] === key) return true;
                                    return false;
                                }));
                                defineProperty(WeakMap2.prototype, "set", (function(key, value) {
                                    checkInstance(this, "set");
                                    if (!isObject(key)) throw new TypeError("Invalid value used as weak map key");
                                    var entry = key[this._id];
                                    if (entry && entry[0] === key) {
                                        entry[1] = value;
                                        return this;
                                    }
                                    defineProperty(key, this._id, [ key, value ]);
                                    return this;
                                }));
                                function checkInstance(x, methodName) {
                                    if (!isObject(x) || !hasOwnProperty2.call(x, "_id")) throw new TypeError(methodName + " method called on incompatible receiver " + _typeof(x));
                                }
                                function genId(prefix) {
                                    return prefix + "_" + rand() + "." + rand();
                                }
                                function rand() {
                                    return Math.random().toString().substring(2);
                                }
                                defineProperty(WeakMap2, "_polyfill", true);
                                return WeakMap2;
                            }();
                            function isObject(x) {
                                return Object(x) === x;
                            }
                        })("undefined" !== typeof globalThis ? globalThis : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : "undefined" !== typeof global ? global : exports);
                    }));
                    var require_global = __commonJS((function(exports, module) {
                        "use strict";
                        var check = function(it) {
                            return it && it.Math === Math && it;
                        };
                        module.exports = check("object" == ("undefined" === typeof globalThis ? "undefined" : _typeof(globalThis)) && globalThis) || check("object" == ("undefined" === typeof window ? "undefined" : _typeof(window)) && window) || check("object" == ("undefined" === typeof self ? "undefined" : _typeof(self)) && self) || check("object" == ("undefined" === typeof global ? "undefined" : _typeof(global)) && global) || function() {
                            return this;
                        }() || exports || Function("return this")();
                    }));
                    var require_fails = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = function(exec) {
                            try {
                                return !!exec();
                            } catch (error) {
                                return true;
                            }
                        };
                    }));
                    var require_function_bind_native = __commonJS((function(exports, module) {
                        "use strict";
                        var fails = require_fails();
                        module.exports = !fails((function() {
                            var test = function() {}.bind();
                            return "function" != typeof test || test.hasOwnProperty("prototype");
                        }));
                    }));
                    var require_function_apply = __commonJS((function(exports, module) {
                        "use strict";
                        var NATIVE_BIND = require_function_bind_native();
                        var FunctionPrototype = Function.prototype;
                        var apply = FunctionPrototype.apply;
                        var call = FunctionPrototype.call;
                        module.exports = "object" == ("undefined" === typeof Reflect ? "undefined" : _typeof(Reflect)) && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function() {
                            return call.apply(apply, arguments);
                        });
                    }));
                    var require_function_uncurry_this = __commonJS((function(exports, module) {
                        "use strict";
                        var NATIVE_BIND = require_function_bind_native();
                        var FunctionPrototype = Function.prototype;
                        var call = FunctionPrototype.call;
                        var uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);
                        module.exports = NATIVE_BIND ? uncurryThisWithBind : function(fn) {
                            return function() {
                                return call.apply(fn, arguments);
                            };
                        };
                    }));
                    var require_classof_raw = __commonJS((function(exports, module) {
                        "use strict";
                        var uncurryThis = require_function_uncurry_this();
                        var toString = uncurryThis({}.toString);
                        var stringSlice = uncurryThis("".slice);
                        module.exports = function(it) {
                            return stringSlice(toString(it), 8, -1);
                        };
                    }));
                    var require_function_uncurry_this_clause = __commonJS((function(exports, module) {
                        "use strict";
                        var classofRaw = require_classof_raw();
                        var uncurryThis = require_function_uncurry_this();
                        module.exports = function(fn) {
                            if ("Function" === classofRaw(fn)) return uncurryThis(fn);
                        };
                    }));
                    var require_document_all = __commonJS((function(exports, module) {
                        "use strict";
                        var documentAll = "object" == ("undefined" === typeof document ? "undefined" : _typeof(document)) && document.all;
                        var IS_HTMLDDA = "undefined" == typeof documentAll && void 0 !== documentAll;
                        module.exports = {
                            all: documentAll,
                            IS_HTMLDDA
                        };
                    }));
                    var require_is_callable2 = __commonJS((function(exports, module) {
                        "use strict";
                        var $documentAll = require_document_all();
                        var documentAll = $documentAll.all;
                        module.exports = $documentAll.IS_HTMLDDA ? function(argument) {
                            return "function" == typeof argument || argument === documentAll;
                        } : function(argument) {
                            return "function" == typeof argument;
                        };
                    }));
                    var require_descriptors = __commonJS((function(exports, module) {
                        "use strict";
                        var fails = require_fails();
                        module.exports = !fails((function() {
                            return 7 !== Object.defineProperty({}, 1, {
                                get: function() {
                                    return 7;
                                }
                            })[1];
                        }));
                    }));
                    var require_function_call = __commonJS((function(exports, module) {
                        "use strict";
                        var NATIVE_BIND = require_function_bind_native();
                        var call = Function.prototype.call;
                        module.exports = NATIVE_BIND ? call.bind(call) : function() {
                            return call.apply(call, arguments);
                        };
                    }));
                    var require_object_property_is_enumerable = __commonJS((function(exports) {
                        "use strict";
                        var $propertyIsEnumerable = {}.propertyIsEnumerable;
                        var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
                        var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({
                            1: 2
                        }, 1);
                        exports.f = NASHORN_BUG ? function(V) {
                            var descriptor = getOwnPropertyDescriptor(this, V);
                            return !!descriptor && descriptor.enumerable;
                        } : $propertyIsEnumerable;
                    }));
                    var require_create_property_descriptor = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = function(bitmap, value) {
                            return {
                                enumerable: !(1 & bitmap),
                                configurable: !(2 & bitmap),
                                writable: !(4 & bitmap),
                                value
                            };
                        };
                    }));
                    var require_indexed_object = __commonJS((function(exports, module) {
                        "use strict";
                        var uncurryThis = require_function_uncurry_this();
                        var fails = require_fails();
                        var classof = require_classof_raw();
                        var $Object = Object;
                        var split = uncurryThis("".split);
                        module.exports = fails((function() {
                            return !$Object("z").propertyIsEnumerable(0);
                        })) ? function(it) {
                            return "String" === classof(it) ? split(it, "") : $Object(it);
                        } : $Object;
                    }));
                    var require_is_null_or_undefined = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = function(it) {
                            return null === it || void 0 === it;
                        };
                    }));
                    var require_require_object_coercible = __commonJS((function(exports, module) {
                        "use strict";
                        var isNullOrUndefined = require_is_null_or_undefined();
                        var $TypeError = TypeError;
                        module.exports = function(it) {
                            if (isNullOrUndefined(it)) throw new $TypeError("Can't call method on " + it);
                            return it;
                        };
                    }));
                    var require_to_indexed_object = __commonJS((function(exports, module) {
                        "use strict";
                        var IndexedObject = require_indexed_object();
                        var requireObjectCoercible = require_require_object_coercible();
                        module.exports = function(it) {
                            return IndexedObject(requireObjectCoercible(it));
                        };
                    }));
                    var require_is_object2 = __commonJS((function(exports, module) {
                        "use strict";
                        var isCallable = require_is_callable2();
                        var $documentAll = require_document_all();
                        var documentAll = $documentAll.all;
                        module.exports = $documentAll.IS_HTMLDDA ? function(it) {
                            return "object" == _typeof(it) ? null !== it : isCallable(it) || it === documentAll;
                        } : function(it) {
                            return "object" == _typeof(it) ? null !== it : isCallable(it);
                        };
                    }));
                    var require_path = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = {};
                    }));
                    var require_get_built_in = __commonJS((function(exports, module) {
                        "use strict";
                        var path = require_path();
                        var global2 = require_global();
                        var isCallable = require_is_callable2();
                        var aFunction = function(variable) {
                            return isCallable(variable) ? variable : void 0;
                        };
                        module.exports = function(namespace, method) {
                            return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global2[namespace]) : path[namespace] && path[namespace][method] || global2[namespace] && global2[namespace][method];
                        };
                    }));
                    var require_object_is_prototype_of = __commonJS((function(exports, module) {
                        "use strict";
                        var uncurryThis = require_function_uncurry_this();
                        module.exports = uncurryThis({}.isPrototypeOf);
                    }));
                    var require_engine_user_agent = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = "undefined" != typeof navigator && String(navigator.userAgent) || "";
                    }));
                    var require_engine_v8_version = __commonJS((function(exports, module) {
                        "use strict";
                        var global2 = require_global();
                        var userAgent = require_engine_user_agent();
                        var process2 = global2.process;
                        var Deno = global2.Deno;
                        var versions = process2 && process2.versions || Deno && Deno.version;
                        var v8 = versions && versions.v8;
                        var match;
                        var version;
                        if (v8) {
                            match = v8.split(".");
                            version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
                        }
                        if (!version && userAgent) {
                            match = userAgent.match(/Edge\/(\d+)/);
                            if (!match || match[1] >= 74) {
                                match = userAgent.match(/Chrome\/(\d+)/);
                                if (match) version = +match[1];
                            }
                        }
                        module.exports = version;
                    }));
                    var require_symbol_constructor_detection = __commonJS((function(exports, module) {
                        "use strict";
                        var V8_VERSION = require_engine_v8_version();
                        var fails = require_fails();
                        var global2 = require_global();
                        var $String = global2.String;
                        module.exports = !!Object.getOwnPropertySymbols && !fails((function() {
                            var symbol = Symbol("symbol detection");
                            return !$String(symbol) || !(Object(symbol) instanceof Symbol) || !Symbol.sham && V8_VERSION && V8_VERSION < 41;
                        }));
                    }));
                    var require_use_symbol_as_uid = __commonJS((function(exports, module) {
                        "use strict";
                        var NATIVE_SYMBOL = require_symbol_constructor_detection();
                        module.exports = NATIVE_SYMBOL && !Symbol.sham && "symbol" == _typeof(Symbol.iterator);
                    }));
                    var require_is_symbol2 = __commonJS((function(exports, module) {
                        "use strict";
                        var getBuiltIn = require_get_built_in();
                        var isCallable = require_is_callable2();
                        var isPrototypeOf = require_object_is_prototype_of();
                        var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
                        var $Object = Object;
                        module.exports = USE_SYMBOL_AS_UID ? function(it) {
                            return "symbol" == _typeof(it);
                        } : function(it) {
                            var $Symbol = getBuiltIn("Symbol");
                            return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
                        };
                    }));
                    var require_try_to_string = __commonJS((function(exports, module) {
                        "use strict";
                        var $String = String;
                        module.exports = function(argument) {
                            try {
                                return $String(argument);
                            } catch (error) {
                                return "Object";
                            }
                        };
                    }));
                    var require_a_callable = __commonJS((function(exports, module) {
                        "use strict";
                        var isCallable = require_is_callable2();
                        var tryToString = require_try_to_string();
                        var $TypeError = TypeError;
                        module.exports = function(argument) {
                            if (isCallable(argument)) return argument;
                            throw new $TypeError(tryToString(argument) + " is not a function");
                        };
                    }));
                    var require_get_method = __commonJS((function(exports, module) {
                        "use strict";
                        var aCallable = require_a_callable();
                        var isNullOrUndefined = require_is_null_or_undefined();
                        module.exports = function(V, P) {
                            var func = V[P];
                            return isNullOrUndefined(func) ? void 0 : aCallable(func);
                        };
                    }));
                    var require_ordinary_to_primitive = __commonJS((function(exports, module) {
                        "use strict";
                        var call = require_function_call();
                        var isCallable = require_is_callable2();
                        var isObject = require_is_object2();
                        var $TypeError = TypeError;
                        module.exports = function(input, pref) {
                            var fn, val;
                            if ("string" === pref && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
                            if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;
                            if ("string" !== pref && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
                            throw new $TypeError("Can't convert object to primitive value");
                        };
                    }));
                    var require_is_pure = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = true;
                    }));
                    var require_define_global_property = __commonJS((function(exports, module) {
                        "use strict";
                        var global2 = require_global();
                        var defineProperty = Object.defineProperty;
                        module.exports = function(key, value) {
                            try {
                                defineProperty(global2, key, {
                                    value,
                                    configurable: true,
                                    writable: true
                                });
                            } catch (error) {
                                global2[key] = value;
                            }
                            return value;
                        };
                    }));
                    var require_shared_store = __commonJS((function(exports, module) {
                        "use strict";
                        var global2 = require_global();
                        var defineGlobalProperty = require_define_global_property();
                        var SHARED = "__core-js_shared__";
                        var store = global2[SHARED] || defineGlobalProperty(SHARED, {});
                        module.exports = store;
                    }));
                    var require_shared = __commonJS((function(exports, module) {
                        "use strict";
                        var IS_PURE = require_is_pure();
                        var store = require_shared_store();
                        (module.exports = function(key, value) {
                            return store[key] || (store[key] = void 0 !== value ? value : {});
                        })("versions", []).push({
                            version: "3.33.0",
                            mode: IS_PURE ? "pure" : "global",
                            copyright: "© 2014-2023 Denis Pushkarev (zloirock.ru)",
                            license: "https://github.com/zloirock/core-js/blob/v3.33.0/LICENSE",
                            source: "https://github.com/zloirock/core-js"
                        });
                    }));
                    var require_to_object = __commonJS((function(exports, module) {
                        "use strict";
                        var requireObjectCoercible = require_require_object_coercible();
                        var $Object = Object;
                        module.exports = function(argument) {
                            return $Object(requireObjectCoercible(argument));
                        };
                    }));
                    var require_has_own_property = __commonJS((function(exports, module) {
                        "use strict";
                        var uncurryThis = require_function_uncurry_this();
                        var toObject = require_to_object();
                        var hasOwnProperty2 = uncurryThis({}.hasOwnProperty);
                        module.exports = Object.hasOwn || function(it, key) {
                            return hasOwnProperty2(toObject(it), key);
                        };
                    }));
                    var require_uid = __commonJS((function(exports, module) {
                        "use strict";
                        var uncurryThis = require_function_uncurry_this();
                        var id = 0;
                        var postfix = Math.random();
                        var toString = uncurryThis(1..toString);
                        module.exports = function(key) {
                            return "Symbol(" + (void 0 === key ? "" : key) + ")_" + toString(++id + postfix, 36);
                        };
                    }));
                    var require_well_known_symbol = __commonJS((function(exports, module) {
                        "use strict";
                        var global2 = require_global();
                        var shared = require_shared();
                        var hasOwn2 = require_has_own_property();
                        var uid = require_uid();
                        var NATIVE_SYMBOL = require_symbol_constructor_detection();
                        var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
                        var Symbol2 = global2.Symbol;
                        var WellKnownSymbolsStore = shared("wks");
                        var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2["for"] || Symbol2 : Symbol2 && Symbol2.withoutSetter || uid;
                        module.exports = function(name) {
                            if (!hasOwn2(WellKnownSymbolsStore, name)) WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn2(Symbol2, name) ? Symbol2[name] : createWellKnownSymbol("Symbol." + name);
                            return WellKnownSymbolsStore[name];
                        };
                    }));
                    var require_to_primitive = __commonJS((function(exports, module) {
                        "use strict";
                        var call = require_function_call();
                        var isObject = require_is_object2();
                        var isSymbol = require_is_symbol2();
                        var getMethod = require_get_method();
                        var ordinaryToPrimitive = require_ordinary_to_primitive();
                        var wellKnownSymbol = require_well_known_symbol();
                        var $TypeError = TypeError;
                        var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
                        module.exports = function(input, pref) {
                            if (!isObject(input) || isSymbol(input)) return input;
                            var exoticToPrim = getMethod(input, TO_PRIMITIVE);
                            var result;
                            if (exoticToPrim) {
                                if (void 0 === pref) pref = "default";
                                result = call(exoticToPrim, input, pref);
                                if (!isObject(result) || isSymbol(result)) return result;
                                throw new $TypeError("Can't convert object to primitive value");
                            }
                            if (void 0 === pref) pref = "number";
                            return ordinaryToPrimitive(input, pref);
                        };
                    }));
                    var require_to_property_key = __commonJS((function(exports, module) {
                        "use strict";
                        var toPrimitive = require_to_primitive();
                        var isSymbol = require_is_symbol2();
                        module.exports = function(argument) {
                            var key = toPrimitive(argument, "string");
                            return isSymbol(key) ? key : key + "";
                        };
                    }));
                    var require_document_create_element = __commonJS((function(exports, module) {
                        "use strict";
                        var global2 = require_global();
                        var isObject = require_is_object2();
                        var document2 = global2.document;
                        var EXISTS = isObject(document2) && isObject(document2.createElement);
                        module.exports = function(it) {
                            return EXISTS ? document2.createElement(it) : {};
                        };
                    }));
                    var require_ie8_dom_define = __commonJS((function(exports, module) {
                        "use strict";
                        var DESCRIPTORS = require_descriptors();
                        var fails = require_fails();
                        var createElement = require_document_create_element();
                        module.exports = !DESCRIPTORS && !fails((function() {
                            return 7 !== Object.defineProperty(createElement("div"), "a", {
                                get: function() {
                                    return 7;
                                }
                            }).a;
                        }));
                    }));
                    var require_object_get_own_property_descriptor = __commonJS((function(exports) {
                        "use strict";
                        var DESCRIPTORS = require_descriptors();
                        var call = require_function_call();
                        var propertyIsEnumerableModule = require_object_property_is_enumerable();
                        var createPropertyDescriptor = require_create_property_descriptor();
                        var toIndexedObject = require_to_indexed_object();
                        var toPropertyKey = require_to_property_key();
                        var hasOwn2 = require_has_own_property();
                        var IE8_DOM_DEFINE = require_ie8_dom_define();
                        var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
                        exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function(O, P) {
                            O = toIndexedObject(O);
                            P = toPropertyKey(P);
                            if (IE8_DOM_DEFINE) try {
                                return $getOwnPropertyDescriptor(O, P);
                            } catch (error) {}
                            if (hasOwn2(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
                        };
                    }));
                    var require_is_forced = __commonJS((function(exports, module) {
                        "use strict";
                        var fails = require_fails();
                        var isCallable = require_is_callable2();
                        var replacement = /#|\.prototype\./;
                        var isForced = function(feature, detection) {
                            var value = data[normalize(feature)];
                            return value === POLYFILL ? true : value === NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
                        };
                        var normalize = isForced.normalize = function(string) {
                            return String(string).replace(replacement, ".").toLowerCase();
                        };
                        var data = isForced.data = {};
                        var NATIVE = isForced.NATIVE = "N";
                        var POLYFILL = isForced.POLYFILL = "P";
                        module.exports = isForced;
                    }));
                    var require_function_bind_context = __commonJS((function(exports, module) {
                        "use strict";
                        var uncurryThis = require_function_uncurry_this_clause();
                        var aCallable = require_a_callable();
                        var NATIVE_BIND = require_function_bind_native();
                        var bind = uncurryThis(uncurryThis.bind);
                        module.exports = function(fn, that) {
                            aCallable(fn);
                            return void 0 === that ? fn : NATIVE_BIND ? bind(fn, that) : function() {
                                return fn.apply(that, arguments);
                            };
                        };
                    }));
                    var require_v8_prototype_define_bug = __commonJS((function(exports, module) {
                        "use strict";
                        var DESCRIPTORS = require_descriptors();
                        var fails = require_fails();
                        module.exports = DESCRIPTORS && fails((function() {
                            return 42 !== Object.defineProperty((function() {}), "prototype", {
                                value: 42,
                                writable: false
                            }).prototype;
                        }));
                    }));
                    var require_an_object = __commonJS((function(exports, module) {
                        "use strict";
                        var isObject = require_is_object2();
                        var $String = String;
                        var $TypeError = TypeError;
                        module.exports = function(argument) {
                            if (isObject(argument)) return argument;
                            throw new $TypeError($String(argument) + " is not an object");
                        };
                    }));
                    var require_object_define_property = __commonJS((function(exports) {
                        "use strict";
                        var DESCRIPTORS = require_descriptors();
                        var IE8_DOM_DEFINE = require_ie8_dom_define();
                        var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
                        var anObject = require_an_object();
                        var toPropertyKey = require_to_property_key();
                        var $TypeError = TypeError;
                        var $defineProperty = Object.defineProperty;
                        var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
                        var ENUMERABLE = "enumerable";
                        var CONFIGURABLE = "configurable";
                        var WRITABLE = "writable";
                        exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function(O, P, Attributes) {
                            anObject(O);
                            P = toPropertyKey(P);
                            anObject(Attributes);
                            if ("function" === typeof O && "prototype" === P && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
                                var current = $getOwnPropertyDescriptor(O, P);
                                if (current && current[WRITABLE]) {
                                    O[P] = Attributes.value;
                                    Attributes = {
                                        configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
                                        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
                                        writable: false
                                    };
                                }
                            }
                            return $defineProperty(O, P, Attributes);
                        } : $defineProperty : function(O, P, Attributes) {
                            anObject(O);
                            P = toPropertyKey(P);
                            anObject(Attributes);
                            if (IE8_DOM_DEFINE) try {
                                return $defineProperty(O, P, Attributes);
                            } catch (error) {}
                            if ("get" in Attributes || "set" in Attributes) throw new $TypeError("Accessors not supported");
                            if ("value" in Attributes) O[P] = Attributes.value;
                            return O;
                        };
                    }));
                    var require_create_non_enumerable_property = __commonJS((function(exports, module) {
                        "use strict";
                        var DESCRIPTORS = require_descriptors();
                        var definePropertyModule = require_object_define_property();
                        var createPropertyDescriptor = require_create_property_descriptor();
                        module.exports = DESCRIPTORS ? function(object, key, value) {
                            return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
                        } : function(object, key, value) {
                            object[key] = value;
                            return object;
                        };
                    }));
                    var require_export = __commonJS((function(exports, module) {
                        "use strict";
                        var global2 = require_global();
                        var apply = require_function_apply();
                        var uncurryThis = require_function_uncurry_this_clause();
                        var isCallable = require_is_callable2();
                        var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
                        var isForced = require_is_forced();
                        var path = require_path();
                        var bind = require_function_bind_context();
                        var createNonEnumerableProperty = require_create_non_enumerable_property();
                        var hasOwn2 = require_has_own_property();
                        var wrapConstructor = function(NativeConstructor) {
                            var Wrapper = function Wrapper(a2, b2, c4) {
                                if (this instanceof Wrapper) {
                                    switch (arguments.length) {
                                      case 0:
                                        return new NativeConstructor;

                                      case 1:
                                        return new NativeConstructor(a2);

                                      case 2:
                                        return new NativeConstructor(a2, b2);
                                    }
                                    return new NativeConstructor(a2, b2, c4);
                                }
                                return apply(NativeConstructor, this, arguments);
                            };
                            Wrapper.prototype = NativeConstructor.prototype;
                            return Wrapper;
                        };
                        module.exports = function(options, source) {
                            var TARGET = options.target;
                            var GLOBAL = options.global;
                            var STATIC = options.stat;
                            var PROTO = options.proto;
                            var nativeSource = GLOBAL ? global2 : STATIC ? global2[TARGET] : (global2[TARGET] || {}).prototype;
                            var target = GLOBAL ? path : path[TARGET] || createNonEnumerableProperty(path, TARGET, {})[TARGET];
                            var targetPrototype = target.prototype;
                            var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;
                            var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;
                            for (key in source) {
                                FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
                                USE_NATIVE = !FORCED && nativeSource && hasOwn2(nativeSource, key);
                                targetProperty = target[key];
                                if (USE_NATIVE) if (options.dontCallGetSet) {
                                    descriptor = getOwnPropertyDescriptor(nativeSource, key);
                                    nativeProperty = descriptor && descriptor.value;
                                } else nativeProperty = nativeSource[key];
                                sourceProperty = USE_NATIVE && nativeProperty ? nativeProperty : source[key];
                                if (USE_NATIVE && _typeof(targetProperty) == _typeof(sourceProperty)) continue;
                                if (options.bind && USE_NATIVE) resultProperty = bind(sourceProperty, global2); else if (options.wrap && USE_NATIVE) resultProperty = wrapConstructor(sourceProperty); else if (PROTO && isCallable(sourceProperty)) resultProperty = uncurryThis(sourceProperty); else resultProperty = sourceProperty;
                                if (options.sham || sourceProperty && sourceProperty.sham || targetProperty && targetProperty.sham) createNonEnumerableProperty(resultProperty, "sham", true);
                                createNonEnumerableProperty(target, key, resultProperty);
                                if (PROTO) {
                                    VIRTUAL_PROTOTYPE = TARGET + "Prototype";
                                    if (!hasOwn2(path, VIRTUAL_PROTOTYPE)) createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {});
                                    createNonEnumerableProperty(path[VIRTUAL_PROTOTYPE], key, sourceProperty);
                                    if (options.real && targetPrototype && (FORCED || !targetPrototype[key])) createNonEnumerableProperty(targetPrototype, key, sourceProperty);
                                }
                            }
                        };
                    }));
                    var require_es_object_has_own = __commonJS((function() {
                        "use strict";
                        var $ = require_export();
                        var hasOwn2 = require_has_own_property();
                        $({
                            target: "Object",
                            stat: true
                        }, {
                            hasOwn: hasOwn2
                        });
                    }));
                    var require_has_own = __commonJS((function(exports, module) {
                        "use strict";
                        require_es_object_has_own();
                        var path = require_path();
                        module.exports = path.Object.hasOwn;
                    }));
                    var require_has_own2 = __commonJS((function(exports, module) {
                        "use strict";
                        var parent = require_has_own();
                        module.exports = parent;
                    }));
                    var require_has_own3 = __commonJS((function(exports, module) {
                        "use strict";
                        var parent = require_has_own2();
                        module.exports = parent;
                    }));
                    var require_shared_key = __commonJS((function(exports, module) {
                        "use strict";
                        var shared = require_shared();
                        var uid = require_uid();
                        var keys = shared("keys");
                        module.exports = function(key) {
                            return keys[key] || (keys[key] = uid(key));
                        };
                    }));
                    var require_correct_prototype_getter = __commonJS((function(exports, module) {
                        "use strict";
                        var fails = require_fails();
                        module.exports = !fails((function() {
                            function F() {}
                            F.prototype.constructor = null;
                            return Object.getPrototypeOf(new F) !== F.prototype;
                        }));
                    }));
                    var require_object_get_prototype_of = __commonJS((function(exports, module) {
                        "use strict";
                        var hasOwn2 = require_has_own_property();
                        var isCallable = require_is_callable2();
                        var toObject = require_to_object();
                        var sharedKey = require_shared_key();
                        var CORRECT_PROTOTYPE_GETTER = require_correct_prototype_getter();
                        var IE_PROTO = sharedKey("IE_PROTO");
                        var $Object = Object;
                        var ObjectPrototype = $Object.prototype;
                        module.exports = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function(O) {
                            var object = toObject(O);
                            if (hasOwn2(object, IE_PROTO)) return object[IE_PROTO];
                            var constructor = object.constructor;
                            if (isCallable(constructor) && object instanceof constructor) return constructor.prototype;
                            return object instanceof $Object ? ObjectPrototype : null;
                        };
                    }));
                    var require_math_trunc = __commonJS((function(exports, module) {
                        "use strict";
                        var ceil = Math.ceil;
                        var floor = Math.floor;
                        module.exports = Math.trunc || function(x) {
                            var n2 = +x;
                            return (n2 > 0 ? floor : ceil)(n2);
                        };
                    }));
                    var require_to_integer_or_infinity = __commonJS((function(exports, module) {
                        "use strict";
                        var trunc = require_math_trunc();
                        module.exports = function(argument) {
                            var number = +argument;
                            return number !== number || 0 === number ? 0 : trunc(number);
                        };
                    }));
                    var require_to_absolute_index = __commonJS((function(exports, module) {
                        "use strict";
                        var toIntegerOrInfinity = require_to_integer_or_infinity();
                        var max2 = Math.max;
                        var min = Math.min;
                        module.exports = function(index, length) {
                            var integer = toIntegerOrInfinity(index);
                            return integer < 0 ? max2(integer + length, 0) : min(integer, length);
                        };
                    }));
                    var require_to_length = __commonJS((function(exports, module) {
                        "use strict";
                        var toIntegerOrInfinity = require_to_integer_or_infinity();
                        var min = Math.min;
                        module.exports = function(argument) {
                            return argument > 0 ? min(toIntegerOrInfinity(argument), 9007199254740991) : 0;
                        };
                    }));
                    var require_length_of_array_like = __commonJS((function(exports, module) {
                        "use strict";
                        var toLength = require_to_length();
                        module.exports = function(obj) {
                            return toLength(obj.length);
                        };
                    }));
                    var require_array_includes = __commonJS((function(exports, module) {
                        "use strict";
                        var toIndexedObject = require_to_indexed_object();
                        var toAbsoluteIndex = require_to_absolute_index();
                        var lengthOfArrayLike = require_length_of_array_like();
                        var createMethod = function(IS_INCLUDES) {
                            return function($this, el, fromIndex) {
                                var O = toIndexedObject($this);
                                var length = lengthOfArrayLike(O);
                                var index = toAbsoluteIndex(fromIndex, length);
                                var value;
                                if (IS_INCLUDES && el !== el) while (length > index) {
                                    value = O[index++];
                                    if (value !== value) return true;
                                } else for (;length > index; index++) if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
                                return !IS_INCLUDES && -1;
                            };
                        };
                        module.exports = {
                            includes: createMethod(true),
                            indexOf: createMethod(false)
                        };
                    }));
                    var require_hidden_keys = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = {};
                    }));
                    var require_object_keys_internal = __commonJS((function(exports, module) {
                        "use strict";
                        var uncurryThis = require_function_uncurry_this();
                        var hasOwn2 = require_has_own_property();
                        var toIndexedObject = require_to_indexed_object();
                        var indexOf = require_array_includes().indexOf;
                        var hiddenKeys = require_hidden_keys();
                        var push = uncurryThis([].push);
                        module.exports = function(object, names) {
                            var O = toIndexedObject(object);
                            var i = 0;
                            var result = [];
                            var key;
                            for (key in O) !hasOwn2(hiddenKeys, key) && hasOwn2(O, key) && push(result, key);
                            while (names.length > i) if (hasOwn2(O, key = names[i++])) ~indexOf(result, key) || push(result, key);
                            return result;
                        };
                    }));
                    var require_enum_bug_keys = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = [ "constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf" ];
                    }));
                    var require_object_keys = __commonJS((function(exports, module) {
                        "use strict";
                        var internalObjectKeys = require_object_keys_internal();
                        var enumBugKeys = require_enum_bug_keys();
                        module.exports = Object.keys || function(O) {
                            return internalObjectKeys(O, enumBugKeys);
                        };
                    }));
                    var require_object_to_array = __commonJS((function(exports, module) {
                        "use strict";
                        var DESCRIPTORS = require_descriptors();
                        var fails = require_fails();
                        var uncurryThis = require_function_uncurry_this();
                        var objectGetPrototypeOf = require_object_get_prototype_of();
                        var objectKeys = require_object_keys();
                        var toIndexedObject = require_to_indexed_object();
                        var $propertyIsEnumerable = require_object_property_is_enumerable().f;
                        var propertyIsEnumerable = uncurryThis($propertyIsEnumerable);
                        var push = uncurryThis([].push);
                        var IE_BUG = DESCRIPTORS && fails((function() {
                            var O = Object.create(null);
                            O[2] = 2;
                            return !propertyIsEnumerable(O, 2);
                        }));
                        var createMethod = function(TO_ENTRIES) {
                            return function(it) {
                                var O = toIndexedObject(it);
                                var keys = objectKeys(O);
                                var IE_WORKAROUND = IE_BUG && null === objectGetPrototypeOf(O);
                                var length = keys.length;
                                var i = 0;
                                var result = [];
                                var key;
                                while (length > i) {
                                    key = keys[i++];
                                    if (!DESCRIPTORS || (IE_WORKAROUND ? key in O : propertyIsEnumerable(O, key))) push(result, TO_ENTRIES ? [ key, O[key] ] : O[key]);
                                }
                                return result;
                            };
                        };
                        module.exports = {
                            entries: createMethod(true),
                            values: createMethod(false)
                        };
                    }));
                    var require_es_object_values = __commonJS((function() {
                        "use strict";
                        var $ = require_export();
                        var $values = require_object_to_array().values;
                        $({
                            target: "Object",
                            stat: true
                        }, {
                            values: function(O) {
                                return $values(O);
                            }
                        });
                    }));
                    var require_values = __commonJS((function(exports, module) {
                        "use strict";
                        require_es_object_values();
                        var path = require_path();
                        module.exports = path.Object.values;
                    }));
                    var require_values2 = __commonJS((function(exports, module) {
                        "use strict";
                        var parent = require_values();
                        module.exports = parent;
                    }));
                    var require_values3 = __commonJS((function(exports, module) {
                        "use strict";
                        var parent = require_values2();
                        module.exports = parent;
                    }));
                    var require_to_string_tag_support = __commonJS((function(exports, module) {
                        "use strict";
                        var wellKnownSymbol = require_well_known_symbol();
                        var TO_STRING_TAG = wellKnownSymbol("toStringTag");
                        var test = {};
                        test[TO_STRING_TAG] = "z";
                        module.exports = "[object z]" === String(test);
                    }));
                    var require_classof = __commonJS((function(exports, module) {
                        "use strict";
                        var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
                        var isCallable = require_is_callable2();
                        var classofRaw = require_classof_raw();
                        var wellKnownSymbol = require_well_known_symbol();
                        var TO_STRING_TAG = wellKnownSymbol("toStringTag");
                        var $Object = Object;
                        var CORRECT_ARGUMENTS = "Arguments" === classofRaw(function() {
                            return arguments;
                        }());
                        var tryGet = function(it, key) {
                            try {
                                return it[key];
                            } catch (error) {}
                        };
                        module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
                            var O, tag, result;
                            return void 0 === it ? "Undefined" : null === it ? "Null" : "string" == typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : "Object" === (result = classofRaw(O)) && isCallable(O.callee) ? "Arguments" : result;
                        };
                    }));
                    var require_to_string = __commonJS((function(exports, module) {
                        "use strict";
                        var classof = require_classof();
                        var $String = String;
                        module.exports = function(argument) {
                            if ("Symbol" === classof(argument)) throw new TypeError("Cannot convert a Symbol value to a string");
                            return $String(argument);
                        };
                    }));
                    var require_string_multibyte = __commonJS((function(exports, module) {
                        "use strict";
                        var uncurryThis = require_function_uncurry_this();
                        var toIntegerOrInfinity = require_to_integer_or_infinity();
                        var toString = require_to_string();
                        var requireObjectCoercible = require_require_object_coercible();
                        var charAt = uncurryThis("".charAt);
                        var charCodeAt = uncurryThis("".charCodeAt);
                        var stringSlice = uncurryThis("".slice);
                        var createMethod = function(CONVERT_TO_STRING) {
                            return function($this, pos) {
                                var S = toString(requireObjectCoercible($this));
                                var position = toIntegerOrInfinity(pos);
                                var size = S.length;
                                var first, second;
                                if (position < 0 || position >= size) return CONVERT_TO_STRING ? "" : void 0;
                                first = charCodeAt(S, position);
                                return first < 55296 || first > 56319 || position + 1 === size || (second = charCodeAt(S, position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? charAt(S, position) : first : CONVERT_TO_STRING ? stringSlice(S, position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
                            };
                        };
                        module.exports = {
                            codeAt: createMethod(false),
                            charAt: createMethod(true)
                        };
                    }));
                    var require_weak_map_basic_detection = __commonJS((function(exports, module) {
                        "use strict";
                        var global2 = require_global();
                        var isCallable = require_is_callable2();
                        var WeakMap2 = global2.WeakMap;
                        module.exports = isCallable(WeakMap2) && /native code/.test(String(WeakMap2));
                    }));
                    var require_internal_state = __commonJS((function(exports, module) {
                        "use strict";
                        var NATIVE_WEAK_MAP = require_weak_map_basic_detection();
                        var global2 = require_global();
                        var isObject = require_is_object2();
                        var createNonEnumerableProperty = require_create_non_enumerable_property();
                        var hasOwn2 = require_has_own_property();
                        var shared = require_shared_store();
                        var sharedKey = require_shared_key();
                        var hiddenKeys = require_hidden_keys();
                        var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
                        var TypeError2 = global2.TypeError;
                        var WeakMap2 = global2.WeakMap;
                        var set2;
                        var get2;
                        var has;
                        var enforce = function(it) {
                            return has(it) ? get2(it) : set2(it, {});
                        };
                        var getterFor = function(TYPE) {
                            return function(it) {
                                var state;
                                if (!isObject(it) || (state = get2(it)).type !== TYPE) throw new TypeError2("Incompatible receiver, " + TYPE + " required");
                                return state;
                            };
                        };
                        if (NATIVE_WEAK_MAP || shared.state) {
                            store = shared.state || (shared.state = new WeakMap2);
                            store.get = store.get;
                            store.has = store.has;
                            store.set = store.set;
                            set2 = function(it, metadata) {
                                if (store.has(it)) throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
                                metadata.facade = it;
                                store.set(it, metadata);
                                return metadata;
                            };
                            get2 = function(it) {
                                return store.get(it) || {};
                            };
                            has = function(it) {
                                return store.has(it);
                            };
                        } else {
                            STATE = sharedKey("state");
                            hiddenKeys[STATE] = true;
                            set2 = function(it, metadata) {
                                if (hasOwn2(it, STATE)) throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
                                metadata.facade = it;
                                createNonEnumerableProperty(it, STATE, metadata);
                                return metadata;
                            };
                            get2 = function(it) {
                                return hasOwn2(it, STATE) ? it[STATE] : {};
                            };
                            has = function(it) {
                                return hasOwn2(it, STATE);
                            };
                        }
                        var store;
                        var STATE;
                        module.exports = {
                            set: set2,
                            get: get2,
                            has,
                            enforce,
                            getterFor
                        };
                    }));
                    var require_function_name = __commonJS((function(exports, module) {
                        "use strict";
                        var DESCRIPTORS = require_descriptors();
                        var hasOwn2 = require_has_own_property();
                        var FunctionPrototype = Function.prototype;
                        var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;
                        var EXISTS = hasOwn2(FunctionPrototype, "name");
                        var PROPER = EXISTS && "something" === function() {}.name;
                        var CONFIGURABLE = EXISTS && (!DESCRIPTORS || DESCRIPTORS && getDescriptor(FunctionPrototype, "name").configurable);
                        module.exports = {
                            EXISTS,
                            PROPER,
                            CONFIGURABLE
                        };
                    }));
                    var require_object_define_properties = __commonJS((function(exports) {
                        "use strict";
                        var DESCRIPTORS = require_descriptors();
                        var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
                        var definePropertyModule = require_object_define_property();
                        var anObject = require_an_object();
                        var toIndexedObject = require_to_indexed_object();
                        var objectKeys = require_object_keys();
                        exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function(O, Properties) {
                            anObject(O);
                            var props = toIndexedObject(Properties);
                            var keys = objectKeys(Properties);
                            var length = keys.length;
                            var index = 0;
                            var key;
                            while (length > index) definePropertyModule.f(O, key = keys[index++], props[key]);
                            return O;
                        };
                    }));
                    var require_html = __commonJS((function(exports, module) {
                        "use strict";
                        var getBuiltIn = require_get_built_in();
                        module.exports = getBuiltIn("document", "documentElement");
                    }));
                    var require_object_create = __commonJS((function(exports, module) {
                        "use strict";
                        var anObject = require_an_object();
                        var definePropertiesModule = require_object_define_properties();
                        var enumBugKeys = require_enum_bug_keys();
                        var hiddenKeys = require_hidden_keys();
                        var html = require_html();
                        var documentCreateElement = require_document_create_element();
                        var sharedKey = require_shared_key();
                        var GT = ">";
                        var LT = "<";
                        var PROTOTYPE = "prototype";
                        var SCRIPT = "script";
                        var IE_PROTO = sharedKey("IE_PROTO");
                        var EmptyConstructor = function() {};
                        var scriptTag = function(content) {
                            return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
                        };
                        var NullProtoObjectViaActiveX = function(activeXDocument2) {
                            activeXDocument2.write(scriptTag(""));
                            activeXDocument2.close();
                            var temp = activeXDocument2.parentWindow.Object;
                            activeXDocument2 = null;
                            return temp;
                        };
                        var NullProtoObjectViaIFrame = function() {
                            var iframe = documentCreateElement("iframe");
                            var JS = "java" + SCRIPT + ":";
                            var iframeDocument;
                            iframe.style.display = "none";
                            html.appendChild(iframe);
                            iframe.src = String(JS);
                            iframeDocument = iframe.contentWindow.document;
                            iframeDocument.open();
                            iframeDocument.write(scriptTag("document.F=Object"));
                            iframeDocument.close();
                            return iframeDocument.F;
                        };
                        var activeXDocument;
                        var _NullProtoObject = function() {
                            try {
                                activeXDocument = new ActiveXObject("htmlfile");
                            } catch (error) {}
                            _NullProtoObject = "undefined" != typeof document ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
                            var length = enumBugKeys.length;
                            while (length--) delete _NullProtoObject[PROTOTYPE][enumBugKeys[length]];
                            return _NullProtoObject();
                        };
                        hiddenKeys[IE_PROTO] = true;
                        module.exports = Object.create || function(O, Properties) {
                            var result;
                            if (null !== O) {
                                EmptyConstructor[PROTOTYPE] = anObject(O);
                                result = new EmptyConstructor;
                                EmptyConstructor[PROTOTYPE] = null;
                                result[IE_PROTO] = O;
                            } else result = _NullProtoObject();
                            return void 0 === Properties ? result : definePropertiesModule.f(result, Properties);
                        };
                    }));
                    var require_define_built_in = __commonJS((function(exports, module) {
                        "use strict";
                        var createNonEnumerableProperty = require_create_non_enumerable_property();
                        module.exports = function(target, key, value, options) {
                            if (options && options.enumerable) target[key] = value; else createNonEnumerableProperty(target, key, value);
                            return target;
                        };
                    }));
                    var require_iterators_core = __commonJS((function(exports, module) {
                        "use strict";
                        var fails = require_fails();
                        var isCallable = require_is_callable2();
                        var isObject = require_is_object2();
                        var create = require_object_create();
                        var getPrototypeOf = require_object_get_prototype_of();
                        var defineBuiltIn = require_define_built_in();
                        var wellKnownSymbol = require_well_known_symbol();
                        var IS_PURE = require_is_pure();
                        var ITERATOR = wellKnownSymbol("iterator");
                        var BUGGY_SAFARI_ITERATORS = false;
                        var IteratorPrototype;
                        var PrototypeOfArrayIteratorPrototype;
                        var arrayIterator;
                        if ([].keys) {
                            arrayIterator = [].keys();
                            if (!("next" in arrayIterator)) BUGGY_SAFARI_ITERATORS = true; else {
                                PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
                                if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
                            }
                        }
                        var NEW_ITERATOR_PROTOTYPE = !isObject(IteratorPrototype) || fails((function() {
                            var test = {};
                            return IteratorPrototype[ITERATOR].call(test) !== test;
                        }));
                        if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {}; else if (IS_PURE) IteratorPrototype = create(IteratorPrototype);
                        if (!isCallable(IteratorPrototype[ITERATOR])) defineBuiltIn(IteratorPrototype, ITERATOR, (function() {
                            return this;
                        }));
                        module.exports = {
                            IteratorPrototype,
                            BUGGY_SAFARI_ITERATORS
                        };
                    }));
                    var require_object_to_string = __commonJS((function(exports, module) {
                        "use strict";
                        var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
                        var classof = require_classof();
                        module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function() {
                            return "[object " + classof(this) + "]";
                        };
                    }));
                    var require_set_to_string_tag = __commonJS((function(exports, module) {
                        "use strict";
                        var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
                        var defineProperty = require_object_define_property().f;
                        var createNonEnumerableProperty = require_create_non_enumerable_property();
                        var hasOwn2 = require_has_own_property();
                        var toString = require_object_to_string();
                        var wellKnownSymbol = require_well_known_symbol();
                        var TO_STRING_TAG = wellKnownSymbol("toStringTag");
                        module.exports = function(it, TAG, STATIC, SET_METHOD) {
                            if (it) {
                                var target = STATIC ? it : it.prototype;
                                if (!hasOwn2(target, TO_STRING_TAG)) defineProperty(target, TO_STRING_TAG, {
                                    configurable: true,
                                    value: TAG
                                });
                                if (SET_METHOD && !TO_STRING_TAG_SUPPORT) createNonEnumerableProperty(target, "toString", toString);
                            }
                        };
                    }));
                    var require_iterators = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = {};
                    }));
                    var require_iterator_create_constructor = __commonJS((function(exports, module) {
                        "use strict";
                        var IteratorPrototype = require_iterators_core().IteratorPrototype;
                        var create = require_object_create();
                        var createPropertyDescriptor = require_create_property_descriptor();
                        var setToStringTag = require_set_to_string_tag();
                        var Iterators = require_iterators();
                        var returnThis = function() {
                            return this;
                        };
                        module.exports = function(IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
                            var TO_STRING_TAG = NAME + " Iterator";
                            IteratorConstructor.prototype = create(IteratorPrototype, {
                                next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next)
                            });
                            setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
                            Iterators[TO_STRING_TAG] = returnThis;
                            return IteratorConstructor;
                        };
                    }));
                    var require_function_uncurry_this_accessor = __commonJS((function(exports, module) {
                        "use strict";
                        var uncurryThis = require_function_uncurry_this();
                        var aCallable = require_a_callable();
                        module.exports = function(object, key, method) {
                            try {
                                return uncurryThis(aCallable(Object.getOwnPropertyDescriptor(object, key)[method]));
                            } catch (error) {}
                        };
                    }));
                    var require_a_possible_prototype = __commonJS((function(exports, module) {
                        "use strict";
                        var isCallable = require_is_callable2();
                        var $String = String;
                        var $TypeError = TypeError;
                        module.exports = function(argument) {
                            if ("object" == _typeof(argument) || isCallable(argument)) return argument;
                            throw new $TypeError("Can't set " + $String(argument) + " as a prototype");
                        };
                    }));
                    var require_object_set_prototype_of = __commonJS((function(exports, module) {
                        "use strict";
                        var uncurryThisAccessor = require_function_uncurry_this_accessor();
                        var anObject = require_an_object();
                        var aPossiblePrototype = require_a_possible_prototype();
                        module.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
                            var CORRECT_SETTER = false;
                            var test = {};
                            var setter;
                            try {
                                setter = uncurryThisAccessor(Object.prototype, "__proto__", "set");
                                setter(test, []);
                                CORRECT_SETTER = test instanceof Array;
                            } catch (error) {}
                            return function(O, proto) {
                                anObject(O);
                                aPossiblePrototype(proto);
                                if (CORRECT_SETTER) setter(O, proto); else O.__proto__ = proto;
                                return O;
                            };
                        }() : void 0);
                    }));
                    var require_iterator_define = __commonJS((function(exports, module) {
                        "use strict";
                        var $ = require_export();
                        var call = require_function_call();
                        var IS_PURE = require_is_pure();
                        var FunctionName = require_function_name();
                        var isCallable = require_is_callable2();
                        var createIteratorConstructor = require_iterator_create_constructor();
                        var getPrototypeOf = require_object_get_prototype_of();
                        var setPrototypeOf = require_object_set_prototype_of();
                        var setToStringTag = require_set_to_string_tag();
                        var createNonEnumerableProperty = require_create_non_enumerable_property();
                        var defineBuiltIn = require_define_built_in();
                        var wellKnownSymbol = require_well_known_symbol();
                        var Iterators = require_iterators();
                        var IteratorsCore = require_iterators_core();
                        var PROPER_FUNCTION_NAME = FunctionName.PROPER;
                        var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
                        var IteratorPrototype = IteratorsCore.IteratorPrototype;
                        var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
                        var ITERATOR = wellKnownSymbol("iterator");
                        var KEYS = "keys";
                        var VALUES = "values";
                        var ENTRIES = "entries";
                        var returnThis = function() {
                            return this;
                        };
                        module.exports = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
                            createIteratorConstructor(IteratorConstructor, NAME, next);
                            var getIterationMethod = function(KIND) {
                                if (KIND === DEFAULT && defaultIterator) return defaultIterator;
                                if (!BUGGY_SAFARI_ITERATORS && KIND && KIND in IterablePrototype) return IterablePrototype[KIND];
                                switch (KIND) {
                                  case KEYS:
                                    return function() {
                                        return new IteratorConstructor(this, KIND);
                                    };

                                  case VALUES:
                                    return function() {
                                        return new IteratorConstructor(this, KIND);
                                    };

                                  case ENTRIES:
                                    return function() {
                                        return new IteratorConstructor(this, KIND);
                                    };
                                }
                                return function() {
                                    return new IteratorConstructor(this);
                                };
                            };
                            var TO_STRING_TAG = NAME + " Iterator";
                            var INCORRECT_VALUES_NAME = false;
                            var IterablePrototype = Iterable.prototype;
                            var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
                            var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
                            var anyNativeIterator = "Array" === NAME ? IterablePrototype.entries || nativeIterator : nativeIterator;
                            var CurrentIteratorPrototype, methods, KEY;
                            if (anyNativeIterator) {
                                CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable));
                                if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
                                    if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) if (setPrototypeOf) setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype); else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) defineBuiltIn(CurrentIteratorPrototype, ITERATOR, returnThis);
                                    setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
                                    if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
                                }
                            }
                            if (PROPER_FUNCTION_NAME && DEFAULT === VALUES && nativeIterator && nativeIterator.name !== VALUES) if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) createNonEnumerableProperty(IterablePrototype, "name", VALUES); else {
                                INCORRECT_VALUES_NAME = true;
                                defaultIterator = function() {
                                    return call(nativeIterator, this);
                                };
                            }
                            if (DEFAULT) {
                                methods = {
                                    values: getIterationMethod(VALUES),
                                    keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
                                    entries: getIterationMethod(ENTRIES)
                                };
                                if (FORCED) {
                                    for (KEY in methods) if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) defineBuiltIn(IterablePrototype, KEY, methods[KEY]);
                                } else $({
                                    target: NAME,
                                    proto: true,
                                    forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME
                                }, methods);
                            }
                            if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) defineBuiltIn(IterablePrototype, ITERATOR, defaultIterator, {
                                name: DEFAULT
                            });
                            Iterators[NAME] = defaultIterator;
                            return methods;
                        };
                    }));
                    var require_create_iter_result_object = __commonJS((function(exports, module) {
                        "use strict";
                        module.exports = function(value, done) {
                            return {
                                value,
                                done
                            };
                        };
                    }));
                    var require_es_string_iterator = __commonJS((function() {
                        "use strict";
                        var charAt = require_string_multibyte().charAt;
                        var toString = require_to_string();
                        var InternalStateModule = require_internal_state();
                        var defineIterator = require_iterator_define();
                        var createIterResultObject = require_create_iter_result_object();
                        var STRING_ITERATOR = "String Iterator";
                        var setInternalState = InternalStateModule.set;
                        var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);
                        defineIterator(String, "String", (function(iterated) {
                            setInternalState(this, {
                                type: STRING_ITERATOR,
                                string: toString(iterated),
                                index: 0
                            });
                        }), (function() {
                            var state = getInternalState(this);
                            var string = state.string;
                            var index = state.index;
                            var point;
                            if (index >= string.length) return createIterResultObject(void 0, true);
                            point = charAt(string, index);
                            state.index += point.length;
                            return createIterResultObject(point, false);
                        }));
                    }));
                    var require_iterator_close = __commonJS((function(exports, module) {
                        "use strict";
                        var call = require_function_call();
                        var anObject = require_an_object();
                        var getMethod = require_get_method();
                        module.exports = function(iterator, kind, value) {
                            var innerResult, innerError;
                            anObject(iterator);
                            try {
                                innerResult = getMethod(iterator, "return");
                                if (!innerResult) {
                                    if ("throw" === kind) throw value;
                                    return value;
                                }
                                innerResult = call(innerResult, iterator);
                            } catch (error) {
                                innerError = true;
                                innerResult = error;
                            }
                            if ("throw" === kind) throw value;
                            if (innerError) throw innerResult;
                            anObject(innerResult);
                            return value;
                        };
                    }));
                    var require_call_with_safe_iteration_closing = __commonJS((function(exports, module) {
                        "use strict";
                        var anObject = require_an_object();
                        var iteratorClose = require_iterator_close();
                        module.exports = function(iterator, fn, value, ENTRIES) {
                            try {
                                return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
                            } catch (error) {
                                iteratorClose(iterator, "throw", error);
                            }
                        };
                    }));
                    var require_is_array_iterator_method = __commonJS((function(exports, module) {
                        "use strict";
                        var wellKnownSymbol = require_well_known_symbol();
                        var Iterators = require_iterators();
                        var ITERATOR = wellKnownSymbol("iterator");
                        var ArrayPrototype = Array.prototype;
                        module.exports = function(it) {
                            return void 0 !== it && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
                        };
                    }));
                    var require_inspect_source = __commonJS((function(exports, module) {
                        "use strict";
                        var uncurryThis = require_function_uncurry_this();
                        var isCallable = require_is_callable2();
                        var store = require_shared_store();
                        var functionToString = uncurryThis(Function.toString);
                        if (!isCallable(store.inspectSource)) store.inspectSource = function(it) {
                            return functionToString(it);
                        };
                        module.exports = store.inspectSource;
                    }));
                    var require_is_constructor = __commonJS((function(exports, module) {
                        "use strict";
                        var uncurryThis = require_function_uncurry_this();
                        var fails = require_fails();
                        var isCallable = require_is_callable2();
                        var classof = require_classof();
                        var getBuiltIn = require_get_built_in();
                        var inspectSource = require_inspect_source();
                        var noop3 = function() {};
                        var empty = [];
                        var construct = getBuiltIn("Reflect", "construct");
                        var constructorRegExp = /^\s*(?:class|function)\b/;
                        var exec = uncurryThis(constructorRegExp.exec);
                        var INCORRECT_TO_STRING = !constructorRegExp.test(noop3);
                        var isConstructorModern = function(argument) {
                            if (!isCallable(argument)) return false;
                            try {
                                construct(noop3, empty, argument);
                                return true;
                            } catch (error) {
                                return false;
                            }
                        };
                        var isConstructorLegacy = function(argument) {
                            if (!isCallable(argument)) return false;
                            switch (classof(argument)) {
                              case "AsyncFunction":
                              case "GeneratorFunction":
                              case "AsyncGeneratorFunction":
                                return false;
                            }
                            try {
                                return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
                            } catch (error) {
                                return true;
                            }
                        };
                        isConstructorLegacy.sham = true;
                        module.exports = !construct || fails((function() {
                            var called;
                            return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern((function() {
                                called = true;
                            })) || called;
                        })) ? isConstructorLegacy : isConstructorModern;
                    }));
                    var require_create_property = __commonJS((function(exports, module) {
                        "use strict";
                        var toPropertyKey = require_to_property_key();
                        var definePropertyModule = require_object_define_property();
                        var createPropertyDescriptor = require_create_property_descriptor();
                        module.exports = function(object, key, value) {
                            var propertyKey = toPropertyKey(key);
                            if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value)); else object[propertyKey] = value;
                        };
                    }));
                    var require_get_iterator_method = __commonJS((function(exports, module) {
                        "use strict";
                        var classof = require_classof();
                        var getMethod = require_get_method();
                        var isNullOrUndefined = require_is_null_or_undefined();
                        var Iterators = require_iterators();
                        var wellKnownSymbol = require_well_known_symbol();
                        var ITERATOR = wellKnownSymbol("iterator");
                        module.exports = function(it) {
                            if (!isNullOrUndefined(it)) return getMethod(it, ITERATOR) || getMethod(it, "@@iterator") || Iterators[classof(it)];
                        };
                    }));
                    var require_get_iterator = __commonJS((function(exports, module) {
                        "use strict";
                        var call = require_function_call();
                        var aCallable = require_a_callable();
                        var anObject = require_an_object();
                        var tryToString = require_try_to_string();
                        var getIteratorMethod = require_get_iterator_method();
                        var $TypeError = TypeError;
                        module.exports = function(argument, usingIterator) {
                            var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
                            if (aCallable(iteratorMethod)) return anObject(call(iteratorMethod, argument));
                            throw new $TypeError(tryToString(argument) + " is not iterable");
                        };
                    }));
                    var require_array_from = __commonJS((function(exports, module) {
                        "use strict";
                        var bind = require_function_bind_context();
                        var call = require_function_call();
                        var toObject = require_to_object();
                        var callWithSafeIterationClosing = require_call_with_safe_iteration_closing();
                        var isArrayIteratorMethod = require_is_array_iterator_method();
                        var isConstructor = require_is_constructor();
                        var lengthOfArrayLike = require_length_of_array_like();
                        var createProperty = require_create_property();
                        var getIterator = require_get_iterator();
                        var getIteratorMethod = require_get_iterator_method();
                        var $Array = Array;
                        module.exports = function(arrayLike) {
                            var O = toObject(arrayLike);
                            var IS_CONSTRUCTOR = isConstructor(this);
                            var argumentsLength = arguments.length;
                            var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
                            var mapping = void 0 !== mapfn;
                            if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : void 0);
                            var iteratorMethod = getIteratorMethod(O);
                            var index = 0;
                            var length, result, step, iterator, next, value;
                            if (iteratorMethod && !(this === $Array && isArrayIteratorMethod(iteratorMethod))) {
                                iterator = getIterator(O, iteratorMethod);
                                next = iterator.next;
                                result = IS_CONSTRUCTOR ? new this : [];
                                for (;!(step = call(next, iterator)).done; index++) {
                                    value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [ step.value, index ], true) : step.value;
                                    createProperty(result, index, value);
                                }
                            } else {
                                length = lengthOfArrayLike(O);
                                result = IS_CONSTRUCTOR ? new this(length) : $Array(length);
                                for (;length > index; index++) {
                                    value = mapping ? mapfn(O[index], index) : O[index];
                                    createProperty(result, index, value);
                                }
                            }
                            result.length = index;
                            return result;
                        };
                    }));
                    var require_check_correctness_of_iteration = __commonJS((function(exports, module) {
                        "use strict";
                        var wellKnownSymbol = require_well_known_symbol();
                        var ITERATOR = wellKnownSymbol("iterator");
                        var SAFE_CLOSING = false;
                        try {
                            called = 0;
                            iteratorWithReturn = {
                                next: function() {
                                    return {
                                        done: !!called++
                                    };
                                },
                                return: function() {
                                    SAFE_CLOSING = true;
                                }
                            };
                            iteratorWithReturn[ITERATOR] = function() {
                                return this;
                            };
                            Array.from(iteratorWithReturn, (function() {
                                throw 2;
                            }));
                        } catch (error) {}
                        var called;
                        var iteratorWithReturn;
                        module.exports = function(exec, SKIP_CLOSING) {
                            try {
                                if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
                            } catch (error) {
                                return false;
                            }
                            var ITERATION_SUPPORT = false;
                            try {
                                var object = {};
                                object[ITERATOR] = function() {
                                    return {
                                        next: function() {
                                            return {
                                                done: ITERATION_SUPPORT = true
                                            };
                                        }
                                    };
                                };
                                exec(object);
                            } catch (error) {}
                            return ITERATION_SUPPORT;
                        };
                    }));
                    var require_es_array_from = __commonJS((function() {
                        "use strict";
                        var $ = require_export();
                        var from = require_array_from();
                        var checkCorrectnessOfIteration = require_check_correctness_of_iteration();
                        var INCORRECT_ITERATION = !checkCorrectnessOfIteration((function(iterable) {
                            Array.from(iterable);
                        }));
                        $({
                            target: "Array",
                            stat: true,
                            forced: INCORRECT_ITERATION
                        }, {
                            from
                        });
                    }));
                    var require_from2 = __commonJS((function(exports, module) {
                        "use strict";
                        require_es_string_iterator();
                        require_es_array_from();
                        var path = require_path();
                        module.exports = path.Array.from;
                    }));
                    var require_from3 = __commonJS((function(exports, module) {
                        "use strict";
                        var parent = require_from2();
                        module.exports = parent;
                    }));
                    var require_from4 = __commonJS((function(exports, module) {
                        "use strict";
                        var parent = require_from3();
                        module.exports = parent;
                    }));
                    var require_doT = __commonJS((function(exports, module) {
                        (function() {
                            "use strict";
                            var doT3 = {
                                name: "doT",
                                version: "1.1.1",
                                templateSettings: {
                                    evaluate: /\{\{([\s\S]+?(\}?)+)\}\}/g,
                                    interpolate: /\{\{=([\s\S]+?)\}\}/g,
                                    encode: /\{\{!([\s\S]+?)\}\}/g,
                                    use: /\{\{#([\s\S]+?)\}\}/g,
                                    useParams: /(^|[^\w$])def(?:\.|\[[\'\"])([\w$\.]+)(?:[\'\"]\])?\s*\:\s*([\w$\.]+|\"[^\"]+\"|\'[^\']+\'|\{[^\}]+\})/g,
                                    define: /\{\{##\s*([\w\.$]+)\s*(\:|=)([\s\S]+?)#\}\}/g,
                                    defineParams: /^\s*([\w$]+):([\s\S]+)/,
                                    conditional: /\{\{\?(\?)?\s*([\s\S]*?)\s*\}\}/g,
                                    iterate: /\{\{~\s*(?:\}\}|([\s\S]+?)\s*\:\s*([\w$]+)\s*(?:\:\s*([\w$]+))?\s*\}\})/g,
                                    varname: "it",
                                    strip: true,
                                    append: true,
                                    selfcontained: false,
                                    doNotSkipEncoded: false
                                },
                                template: void 0,
                                compile: void 0,
                                log: true
                            };
                            (function() {
                                if ("object" === ("undefined" === typeof globalThis ? "undefined" : _typeof(globalThis))) return;
                                try {
                                    Object.defineProperty(Object.prototype, "__magic__", {
                                        get: function() {
                                            return this;
                                        },
                                        configurable: true
                                    });
                                    __magic__.globalThis = __magic__;
                                    delete Object.prototype.__magic__;
                                } catch (e) {
                                    window.globalThis = function() {
                                        if ("undefined" !== typeof self) return self;
                                        if ("undefined" !== typeof window) return window;
                                        if ("undefined" !== typeof global) return global;
                                        if ("undefined" !== typeof this) return this;
                                        throw new Error("Unable to locate global `this`");
                                    }();
                                }
                            })();
                            doT3.encodeHTMLSource = function(doNotSkipEncoded) {
                                var encodeHTMLRules = {
                                    "&": "&#38;",
                                    "<": "&#60;",
                                    ">": "&#62;",
                                    '"': "&#34;",
                                    "'": "&#39;",
                                    "/": "&#47;"
                                }, matchHTML = doNotSkipEncoded ? /[&<>"'\/]/g : /&(?!#?\w+;)|<|>|"|'|\//g;
                                return function(code) {
                                    return code ? code.toString().replace(matchHTML, (function(m3) {
                                        return encodeHTMLRules[m3] || m3;
                                    })) : "";
                                };
                            };
                            if ("undefined" !== typeof module && module.exports) module.exports = doT3; else if (true) !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
                                return doT3;
                            }.call(exports, __webpack_require__, exports, module), void 0 !== __WEBPACK_AMD_DEFINE_RESULT__ && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                            var startend = {
                                append: {
                                    start: "'+(",
                                    end: ")+'",
                                    startencode: "'+encodeHTML("
                                },
                                split: {
                                    start: "';out+=(",
                                    end: ");out+='",
                                    startencode: "';out+=encodeHTML("
                                }
                            }, skip = /$^/;
                            function resolveDefs(c4, block, def) {
                                return ("string" === typeof block ? block : block.toString()).replace(c4.define || skip, (function(m3, code, assign, value) {
                                    if (0 === code.indexOf("def.")) code = code.substring(4);
                                    if (!(code in def)) if (":" === assign) {
                                        if (c4.defineParams) value.replace(c4.defineParams, (function(m4, param, v) {
                                            def[code] = {
                                                arg: param,
                                                text: v
                                            };
                                        }));
                                        if (!(code in def)) def[code] = value;
                                    } else new Function("def", "def['" + code + "']=" + value)(def);
                                    return "";
                                })).replace(c4.use || skip, (function(m3, code) {
                                    if (c4.useParams) code = code.replace(c4.useParams, (function(m4, s, d2, param) {
                                        if (def[d2] && def[d2].arg && param) {
                                            var rw = (d2 + ":" + param).replace(/'|\\/g, "_");
                                            def.__exp = def.__exp || {};
                                            def.__exp[rw] = def[d2].text.replace(new RegExp("(^|[^\\w$])" + def[d2].arg + "([^\\w$])", "g"), "$1" + param + "$2");
                                            return s + "def.__exp['" + rw + "']";
                                        }
                                    }));
                                    var v = new Function("def", "return " + code)(def);
                                    return v ? resolveDefs(c4, v, def) : v;
                                }));
                            }
                            function unescape(code) {
                                return code.replace(/\\('|\\)/g, "$1").replace(/[\r\t\n]/g, " ");
                            }
                            doT3.template = function(tmpl, c4, def) {
                                c4 = c4 || doT3.templateSettings;
                                var needhtmlencode, indv, cse = c4.append ? startend.append : startend.split, sid = 0, str = c4.use || c4.define ? resolveDefs(c4, tmpl, def || {}) : tmpl;
                                str = ("var out='" + (c4.strip ? str.replace(/(^|\r|\n)\t* +| +\t*(\r|\n|$)/g, " ").replace(/\r|\n|\t|\/\*[\s\S]*?\*\//g, "") : str).replace(/'|\\/g, "\\$&").replace(c4.interpolate || skip, (function(m3, code) {
                                    return cse.start + unescape(code) + cse.end;
                                })).replace(c4.encode || skip, (function(m3, code) {
                                    needhtmlencode = true;
                                    return cse.startencode + unescape(code) + cse.end;
                                })).replace(c4.conditional || skip, (function(m3, elsecase, code) {
                                    return elsecase ? code ? "';}else if(" + unescape(code) + "){out+='" : "';}else{out+='" : code ? "';if(" + unescape(code) + "){out+='" : "';}out+='";
                                })).replace(c4.iterate || skip, (function(m3, iterate, vname, iname) {
                                    if (!iterate) return "';} } out+='";
                                    sid += 1;
                                    indv = iname || "i" + sid;
                                    iterate = unescape(iterate);
                                    return "';var arr" + sid + "=" + iterate + ";if(arr" + sid + "){var " + vname + "," + indv + "=-1,l" + sid + "=arr" + sid + ".length-1;while(" + indv + "<l" + sid + "){" + vname + "=arr" + sid + "[" + indv + "+=1];out+='";
                                })).replace(c4.evaluate || skip, (function(m3, code) {
                                    return "';" + unescape(code) + "out+='";
                                })) + "';return out;").replace(/\n/g, "\\n").replace(/\t/g, "\\t").replace(/\r/g, "\\r").replace(/(\s|;|\}|^|\{)out\+='';/g, "$1").replace(/\+''/g, "");
                                if (needhtmlencode) {
                                    if (!c4.selfcontained && globalThis && !globalThis._encodeHTML) globalThis._encodeHTML = doT3.encodeHTMLSource(c4.doNotSkipEncoded);
                                    str = "var encodeHTML = typeof _encodeHTML !== 'undefined' ? _encodeHTML : (" + doT3.encodeHTMLSource.toString() + "(" + (c4.doNotSkipEncoded || "") + "));" + str;
                                }
                                try {
                                    return new Function(c4.varname, str);
                                } catch (e) {
                                    if ("undefined" !== typeof console) console.log("Could not create a template function: " + str);
                                    throw e;
                                }
                            };
                            doT3.compile = function(tmpl, def) {
                                return doT3.template(tmpl, null, def);
                            };
                        })();
                    }));
                    var definitions = [ {
                        name: "NA",
                        value: "inapplicable",
                        priority: 0,
                        group: "inapplicable"
                    }, {
                        name: "PASS",
                        value: "passed",
                        priority: 1,
                        group: "passes"
                    }, {
                        name: "CANTTELL",
                        value: "cantTell",
                        priority: 2,
                        group: "incomplete"
                    }, {
                        name: "FAIL",
                        value: "failed",
                        priority: 3,
                        group: "violations"
                    } ];
                    var constants = {
                        helpUrlBase: "https://dequeuniversity.com/rules/",
                        gridSize: 200,
                        results: [],
                        resultGroups: [],
                        resultGroupMap: {},
                        impact: Object.freeze([ "minor", "moderate", "serious", "critical" ]),
                        preload: Object.freeze({
                            assets: [ "cssom", "media" ],
                            timeout: 1e4
                        }),
                        allOrigins: "<unsafe_all_origins>",
                        sameOrigin: "<same_origin>"
                    };
                    definitions.forEach((function(definition) {
                        var name = definition.name;
                        var value = definition.value;
                        var priority = definition.priority;
                        var group = definition.group;
                        constants[name] = value;
                        constants[name + "_PRIO"] = priority;
                        constants[name + "_GROUP"] = group;
                        constants.results[priority] = value;
                        constants.resultGroups[priority] = group;
                        constants.resultGroupMap[value] = group;
                    }));
                    Object.freeze(constants.results);
                    Object.freeze(constants.resultGroups);
                    Object.freeze(constants.resultGroupMap);
                    Object.freeze(constants);
                    var constants_default = constants;
                    function log() {
                        if ("object" === ("undefined" === typeof console ? "undefined" : _typeof(console)) && console.log) Function.prototype.apply.call(console.log, console, arguments);
                    }
                    var log_default = log;
                    var whitespaceRegex = /[\t\r\n\f]/g;
                    var AbstractVirtualNode = function() {
                        function AbstractVirtualNode() {
                            _classCallCheck(this, AbstractVirtualNode);
                            this.parent = void 0;
                        }
                        return _createClass(AbstractVirtualNode, [ {
                            key: "props",
                            get: function() {
                                throw new Error('VirtualNode class must have a "props" object consisting of "nodeType" and "nodeName" properties');
                            }
                        }, {
                            key: "attrNames",
                            get: function() {
                                throw new Error('VirtualNode class must have an "attrNames" property');
                            }
                        }, {
                            key: "attr",
                            value: function() {
                                throw new Error('VirtualNode class must have an "attr" function');
                            }
                        }, {
                            key: "hasAttr",
                            value: function() {
                                throw new Error('VirtualNode class must have a "hasAttr" function');
                            }
                        }, {
                            key: "hasClass",
                            value: function(className) {
                                var classAttr = this.attr("class");
                                if (!classAttr) return false;
                                var selector = " " + className + " ";
                                return (" " + classAttr + " ").replace(whitespaceRegex, " ").indexOf(selector) >= 0;
                            }
                        } ]);
                    }();
                    var abstract_virtual_node_default = AbstractVirtualNode;
                    var utils_exports = {};
                    __export(utils_exports, {
                        DqElement: function() {
                            return dq_element_default;
                        },
                        aggregate: function() {
                            return aggregate_default;
                        },
                        aggregateChecks: function() {
                            return aggregate_checks_default;
                        },
                        aggregateNodeResults: function() {
                            return aggregate_node_results_default;
                        },
                        aggregateResult: function() {
                            return aggregate_result_default;
                        },
                        areStylesSet: function() {
                            return are_styles_set_default;
                        },
                        assert: function() {
                            return assert_default;
                        },
                        checkHelper: function() {
                            return check_helper_default;
                        },
                        clone: function() {
                            return _clone;
                        },
                        closest: function() {
                            return closest_default;
                        },
                        collectResultsFromFrames: function() {
                            return _collectResultsFromFrames;
                        },
                        contains: function() {
                            return _contains;
                        },
                        convertSelector: function() {
                            return _convertSelector;
                        },
                        cssParser: function() {
                            return css_parser_default;
                        },
                        deepMerge: function() {
                            return deep_merge_default;
                        },
                        escapeSelector: function() {
                            return escape_selector_default;
                        },
                        extendMetaData: function() {
                            return extend_meta_data_default;
                        },
                        filterHtmlAttrs: function() {
                            return _filterHtmlAttrs;
                        },
                        finalizeRuleResult: function() {
                            return _finalizeRuleResult;
                        },
                        findBy: function() {
                            return find_by_default;
                        },
                        getAllChecks: function() {
                            return get_all_checks_default;
                        },
                        getAncestry: function() {
                            return _getAncestry;
                        },
                        getBaseLang: function() {
                            return get_base_lang_default;
                        },
                        getCheckMessage: function() {
                            return get_check_message_default;
                        },
                        getCheckOption: function() {
                            return get_check_option_default;
                        },
                        getEnvironmentData: function() {
                            return _getEnvironmentData;
                        },
                        getFlattenedTree: function() {
                            return _getFlattenedTree;
                        },
                        getFrameContexts: function() {
                            return _getFrameContexts;
                        },
                        getFriendlyUriEnd: function() {
                            return get_friendly_uri_end_default;
                        },
                        getNodeAttributes: function() {
                            return get_node_attributes_default;
                        },
                        getNodeFromTree: function() {
                            return get_node_from_tree_default;
                        },
                        getPreloadConfig: function() {
                            return _getPreloadConfig;
                        },
                        getRootNode: function() {
                            return get_root_node_default;
                        },
                        getRule: function() {
                            return _getRule;
                        },
                        getScroll: function() {
                            return get_scroll_default;
                        },
                        getScrollState: function() {
                            return get_scroll_state_default;
                        },
                        getSelector: function() {
                            return _getSelector;
                        },
                        getSelectorData: function() {
                            return _getSelectorData;
                        },
                        getShadowSelector: function() {
                            return _getShadowSelector;
                        },
                        getStandards: function() {
                            return _getStandards;
                        },
                        getStyleSheetFactory: function() {
                            return get_stylesheet_factory_default;
                        },
                        getXpath: function() {
                            return get_xpath_default;
                        },
                        injectStyle: function() {
                            return inject_style_default;
                        },
                        isArrayLike: function() {
                            return _isArrayLike;
                        },
                        isContextObject: function() {
                            return _isContextObject;
                        },
                        isContextProp: function() {
                            return _isContextProp;
                        },
                        isContextSpec: function() {
                            return _isContextSpec;
                        },
                        isHidden: function() {
                            return is_hidden_default;
                        },
                        isHtmlElement: function() {
                            return is_html_element_default;
                        },
                        isLabelledFramesSelector: function() {
                            return _isLabelledFramesSelector;
                        },
                        isLabelledShadowDomSelector: function() {
                            return _isLabelledShadowDomSelector;
                        },
                        isNodeInContext: function() {
                            return _isNodeInContext;
                        },
                        isShadowRoot: function() {
                            return is_shadow_root_default;
                        },
                        isValidLang: function() {
                            return valid_langs_default;
                        },
                        isXHTML: function() {
                            return is_xhtml_default;
                        },
                        matchAncestry: function() {
                            return _matchAncestry;
                        },
                        matches: function() {
                            return _matches;
                        },
                        matchesExpression: function() {
                            return _matchesExpression;
                        },
                        matchesSelector: function() {
                            return element_matches_default;
                        },
                        memoize: function() {
                            return memoize_default;
                        },
                        mergeResults: function() {
                            return merge_results_default;
                        },
                        nodeLookup: function() {
                            return _nodeLookup;
                        },
                        nodeSerializer: function() {
                            return node_serializer_default;
                        },
                        nodeSorter: function() {
                            return node_sorter_default;
                        },
                        objectHasOwn: function() {
                            return _objectHasOwn;
                        },
                        parseCrossOriginStylesheet: function() {
                            return parse_crossorigin_stylesheet_default;
                        },
                        parseSameOriginStylesheet: function() {
                            return parse_sameorigin_stylesheet_default;
                        },
                        parseStylesheet: function() {
                            return parse_stylesheet_default;
                        },
                        performanceTimer: function() {
                            return performance_timer_default;
                        },
                        pollyfillElementsFromPoint: function() {
                            return _pollyfillElementsFromPoint;
                        },
                        preload: function() {
                            return _preload;
                        },
                        preloadCssom: function() {
                            return preload_cssom_default;
                        },
                        preloadMedia: function() {
                            return preload_media_default;
                        },
                        processMessage: function() {
                            return process_message_default;
                        },
                        publishMetaData: function() {
                            return _publishMetaData;
                        },
                        querySelectorAll: function() {
                            return query_selector_all_default;
                        },
                        querySelectorAllFilter: function() {
                            return query_selector_all_filter_default;
                        },
                        queue: function() {
                            return queue_default;
                        },
                        respondable: function() {
                            return _respondable;
                        },
                        ruleShouldRun: function() {
                            return rule_should_run_default;
                        },
                        select: function() {
                            return _select;
                        },
                        sendCommandToFrame: function() {
                            return _sendCommandToFrame;
                        },
                        setScrollState: function() {
                            return set_scroll_state_default;
                        },
                        shadowSelect: function() {
                            return _shadowSelect;
                        },
                        shadowSelectAll: function() {
                            return _shadowSelectAll;
                        },
                        shouldPreload: function() {
                            return _shouldPreload;
                        },
                        toArray: function() {
                            return to_array_default;
                        },
                        tokenList: function() {
                            return token_list_default;
                        },
                        uniqueArray: function() {
                            return unique_array_default;
                        },
                        uuid: function() {
                            return uuid_default;
                        },
                        validInputTypes: function() {
                            return valid_input_type_default;
                        },
                        validLangs: function() {
                            return _validLangs;
                        }
                    });
                    function aggregate(map, values2, initial) {
                        values2 = values2.slice();
                        if (initial) values2.push(initial);
                        var sorting = values2.map((function(val) {
                            return map.indexOf(val);
                        })).sort();
                        return map[sorting.pop()];
                    }
                    var aggregate_default = aggregate;
                    var CANTTELL_PRIO = constants_default.CANTTELL_PRIO, FAIL_PRIO = constants_default.FAIL_PRIO;
                    var checkMap = [];
                    checkMap[constants_default.PASS_PRIO] = true;
                    checkMap[constants_default.CANTTELL_PRIO] = null;
                    checkMap[constants_default.FAIL_PRIO] = false;
                    var checkTypes = [ "any", "all", "none" ];
                    function anyAllNone(obj, functor) {
                        return checkTypes.reduce((function(out, type2) {
                            out[type2] = (obj[type2] || []).map((function(val) {
                                return functor(val, type2);
                            }));
                            return out;
                        }), {});
                    }
                    function aggregateChecks(nodeResOriginal) {
                        var nodeResult = Object.assign({}, nodeResOriginal);
                        anyAllNone(nodeResult, (function(check, type2) {
                            var i = "undefined" === typeof check.result ? -1 : checkMap.indexOf(check.result);
                            check.priority = -1 !== i ? i : constants_default.CANTTELL_PRIO;
                            if ("none" === type2) if (check.priority === constants_default.PASS_PRIO) check.priority = constants_default.FAIL_PRIO; else if (check.priority === constants_default.FAIL_PRIO) check.priority = constants_default.PASS_PRIO;
                        }));
                        var priorities = {
                            all: nodeResult.all.reduce((function(a2, b2) {
                                return Math.max(a2, b2.priority);
                            }), 0),
                            none: nodeResult.none.reduce((function(a2, b2) {
                                return Math.max(a2, b2.priority);
                            }), 0),
                            any: nodeResult.any.reduce((function(a2, b2) {
                                return Math.min(a2, b2.priority);
                            }), 4) % 4
                        };
                        nodeResult.priority = Math.max(priorities.all, priorities.none, priorities.any);
                        var impacts = [];
                        checkTypes.forEach((function(type2) {
                            nodeResult[type2] = nodeResult[type2].filter((function(check) {
                                return check.priority === nodeResult.priority && check.priority === priorities[type2];
                            }));
                            nodeResult[type2].forEach((function(check) {
                                return impacts.push(check.impact);
                            }));
                        }));
                        if ([ CANTTELL_PRIO, FAIL_PRIO ].includes(nodeResult.priority)) nodeResult.impact = aggregate_default(constants_default.impact, impacts); else nodeResult.impact = null;
                        anyAllNone(nodeResult, (function(c4) {
                            delete c4.result;
                            delete c4.priority;
                        }));
                        nodeResult.result = constants_default.results[nodeResult.priority];
                        delete nodeResult.priority;
                        return nodeResult;
                    }
                    var aggregate_checks_default = aggregateChecks;
                    function _finalizeRuleResult(ruleResult) {
                        var rule = axe._audit.rules.find((function(_ref) {
                            var id = _ref.id;
                            return id === ruleResult.id;
                        }));
                        if (rule && rule.impact) ruleResult.nodes.forEach((function(node) {
                            [ "any", "all", "none" ].forEach((function(checkType) {
                                (node[checkType] || []).forEach((function(checkResult) {
                                    checkResult.impact = rule.impact;
                                }));
                            }));
                        }));
                        Object.assign(ruleResult, aggregate_node_results_default(ruleResult.nodes));
                        delete ruleResult.nodes;
                        return ruleResult;
                    }
                    function aggregateNodeResults(nodeResults) {
                        var ruleResult = {};
                        nodeResults = nodeResults.map((function(nodeResult) {
                            if (nodeResult.any && nodeResult.all && nodeResult.none) return aggregate_checks_default(nodeResult); else if (Array.isArray(nodeResult.node)) return _finalizeRuleResult(nodeResult); else throw new TypeError("Invalid Result type");
                        }));
                        if (nodeResults && nodeResults.length) {
                            var resultList = nodeResults.map((function(node) {
                                return node.result;
                            }));
                            ruleResult.result = aggregate_default(constants_default.results, resultList, ruleResult.result);
                        } else ruleResult.result = "inapplicable";
                        constants_default.resultGroups.forEach((function(group) {
                            return ruleResult[group] = [];
                        }));
                        nodeResults.forEach((function(nodeResult) {
                            var groupName = constants_default.resultGroupMap[nodeResult.result];
                            ruleResult[groupName].push(nodeResult);
                        }));
                        var impactGroup = constants_default.FAIL_GROUP;
                        if (0 === ruleResult[impactGroup].length) impactGroup = constants_default.CANTTELL_GROUP;
                        if (ruleResult[impactGroup].length > 0) {
                            var impactList = ruleResult[impactGroup].map((function(failure) {
                                return failure.impact;
                            }));
                            ruleResult.impact = aggregate_default(constants_default.impact, impactList) || null;
                        } else ruleResult.impact = null;
                        return ruleResult;
                    }
                    var aggregate_node_results_default = aggregateNodeResults;
                    function copyToGroup(resultObject, subResult, group) {
                        var resultCopy = Object.assign({}, subResult);
                        resultCopy.nodes = (resultCopy[group] || []).concat();
                        constants_default.resultGroups.forEach((function(resultGroup) {
                            delete resultCopy[resultGroup];
                        }));
                        resultObject[group].push(resultCopy);
                    }
                    function aggregateResult(results) {
                        var resultObject = {};
                        constants_default.resultGroups.forEach((function(groupName) {
                            return resultObject[groupName] = [];
                        }));
                        results.forEach((function(subResult) {
                            if (subResult.error) copyToGroup(resultObject, subResult, constants_default.CANTTELL_GROUP); else if (subResult.result === constants_default.NA) copyToGroup(resultObject, subResult, constants_default.NA_GROUP); else constants_default.resultGroups.forEach((function(group) {
                                if (Array.isArray(subResult[group]) && subResult[group].length > 0) copyToGroup(resultObject, subResult, group);
                            }));
                        }));
                        return resultObject;
                    }
                    var aggregate_result_default = aggregateResult;
                    function areStylesSet(el, styles, stopAt) {
                        var styl = window.getComputedStyle(el, null);
                        if (!styl) return false;
                        for (var i = 0; i < styles.length; ++i) {
                            var att = styles[i];
                            if (styl.getPropertyValue(att.property) === att.value) return true;
                        }
                        if (!el.parentNode || el.nodeName.toUpperCase() === stopAt.toUpperCase()) return false;
                        return areStylesSet(el.parentNode, styles, stopAt);
                    }
                    var are_styles_set_default = areStylesSet;
                    function assert(bool, message) {
                        if (!bool) throw new Error(message);
                    }
                    var assert_default = assert;
                    function toArray(thing) {
                        return Array.prototype.slice.call(thing);
                    }
                    var to_array_default = toArray;
                    function escapeSelector(value) {
                        var string = String(value);
                        var length = string.length;
                        var index = -1;
                        var codeUnit;
                        var result = "";
                        var firstCodeUnit = string.charCodeAt(0);
                        while (++index < length) {
                            codeUnit = string.charCodeAt(index);
                            if (0 == codeUnit) {
                                result += "�";
                                continue;
                            }
                            if (codeUnit >= 1 && codeUnit <= 31 || 127 == codeUnit || 0 == index && codeUnit >= 48 && codeUnit <= 57 || 1 == index && codeUnit >= 48 && codeUnit <= 57 && 45 == firstCodeUnit) {
                                result += "\\" + codeUnit.toString(16) + " ";
                                continue;
                            }
                            if (0 == index && 1 == length && 45 == codeUnit) {
                                result += "\\" + string.charAt(index);
                                continue;
                            }
                            if (codeUnit >= 128 || 45 == codeUnit || 95 == codeUnit || codeUnit >= 48 && codeUnit <= 57 || codeUnit >= 65 && codeUnit <= 90 || codeUnit >= 97 && codeUnit <= 122) {
                                result += string.charAt(index);
                                continue;
                            }
                            result += "\\" + string.charAt(index);
                        }
                        return result;
                    }
                    var escape_selector_default = escapeSelector;
                    function isMostlyNumbers() {
                        var str = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
                        return 0 !== str.length && (str.match(/[0-9]/g) || "").length >= str.length / 2;
                    }
                    function splitString(str, splitIndex) {
                        return [ str.substring(0, splitIndex), str.substring(splitIndex) ];
                    }
                    function trimRight(str) {
                        return str.replace(/\s+$/, "");
                    }
                    function uriParser(url) {
                        var original = url;
                        var protocol = "", domain = "", port = "", path = "", query = "", hash = "";
                        if (url.includes("#")) {
                            var _splitString = splitString(url, url.indexOf("#"));
                            var _splitString2 = _slicedToArray(_splitString, 2);
                            url = _splitString2[0];
                            hash = _splitString2[1];
                        }
                        if (url.includes("?")) {
                            var _splitString3 = splitString(url, url.indexOf("?"));
                            var _splitString4 = _slicedToArray(_splitString3, 2);
                            url = _splitString4[0];
                            query = _splitString4[1];
                        }
                        if (url.includes("://")) {
                            var _url$split = url.split("://");
                            var _url$split2 = _slicedToArray(_url$split, 2);
                            protocol = _url$split2[0];
                            url = _url$split2[1];
                            var _splitString5 = splitString(url, url.indexOf("/"));
                            var _splitString6 = _slicedToArray(_splitString5, 2);
                            domain = _splitString6[0];
                            url = _splitString6[1];
                        } else if ("//" === url.substr(0, 2)) {
                            url = url.substr(2);
                            var _splitString7 = splitString(url, url.indexOf("/"));
                            var _splitString8 = _slicedToArray(_splitString7, 2);
                            domain = _splitString8[0];
                            url = _splitString8[1];
                        }
                        if ("www." === domain.substr(0, 4)) domain = domain.substr(4);
                        if (domain && domain.includes(":")) {
                            var _splitString9 = splitString(domain, domain.indexOf(":"));
                            var _splitString10 = _slicedToArray(_splitString9, 2);
                            domain = _splitString10[0];
                            port = _splitString10[1];
                        }
                        path = url;
                        return {
                            original,
                            protocol,
                            domain,
                            port,
                            path,
                            query,
                            hash
                        };
                    }
                    function getFriendlyUriEnd() {
                        var uri = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
                        var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                        if (uri.length <= 1 || "data:" === uri.substr(0, 5) || "javascript:" === uri.substr(0, 11) || uri.includes("?")) return;
                        var currentDomain = options.currentDomain, _options$maxLength = options.maxLength, maxLength = void 0 === _options$maxLength ? 25 : _options$maxLength;
                        var _uriParser = uriParser(uri), path = _uriParser.path, domain = _uriParser.domain, hash = _uriParser.hash;
                        var pathEnd = path.substr(path.substr(0, path.length - 2).lastIndexOf("/") + 1);
                        if (hash) if (pathEnd && (pathEnd + hash).length <= maxLength) return trimRight(pathEnd + hash); else if (pathEnd.length < 2 && hash.length > 2 && hash.length <= maxLength) return trimRight(hash); else return; else if (domain && domain.length < maxLength && path.length <= 1) return trimRight(domain + path);
                        if (path === "/" + pathEnd && domain && currentDomain && domain !== currentDomain && (domain + path).length <= maxLength) return trimRight(domain + path);
                        var lastDotIndex = pathEnd.lastIndexOf(".");
                        if ((-1 === lastDotIndex || lastDotIndex > 1) && (-1 !== lastDotIndex || pathEnd.length > 2) && pathEnd.length <= maxLength && !pathEnd.match(/index(\.[a-zA-Z]{2-4})?/) && !isMostlyNumbers(pathEnd)) return trimRight(pathEnd);
                    }
                    var get_friendly_uri_end_default = getFriendlyUriEnd;
                    function getNodeAttributes(node) {
                        if (node.attributes instanceof window.NamedNodeMap) return node.attributes;
                        return node.cloneNode(false).attributes;
                    }
                    var get_node_attributes_default = getNodeAttributes;
                    var matchesSelector = function() {
                        var method;
                        function getMethod(node) {
                            var candidates = [ "matches", "matchesSelector", "mozMatchesSelector", "webkitMatchesSelector", "msMatchesSelector" ];
                            var length = candidates.length;
                            var index, candidate;
                            for (index = 0; index < length; index++) {
                                candidate = candidates[index];
                                if (node[candidate]) return candidate;
                            }
                        }
                        return function(node, selector) {
                            if (!method || !node[method]) method = getMethod(node);
                            if (node[method]) return node[method](selector);
                            return false;
                        };
                    }();
                    var element_matches_default = matchesSelector;
                    var import_memoizee = __toModule(require_memoizee());
                    axe._memoizedFns = [];
                    function memoizeImplementation(fn) {
                        var memoized = (0, import_memoizee["default"])(fn);
                        axe._memoizedFns.push(memoized);
                        return memoized;
                    }
                    var memoize_default = memoizeImplementation;
                    var isXHTML = memoize_default((function(doc) {
                        if (!(null !== doc && void 0 !== doc && doc.createElement)) return false;
                        return "A" === doc.createElement("A").localName;
                    }));
                    var is_xhtml_default = isXHTML;
                    function _getShadowSelector(generateSelector2, elm) {
                        var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                        if (!elm) return "";
                        var doc = elm.getRootNode && elm.getRootNode() || document;
                        if (11 !== doc.nodeType) return generateSelector2(elm, options, doc);
                        var stack = [];
                        while (11 === doc.nodeType) {
                            if (!doc.host) return "";
                            stack.unshift({
                                elm,
                                doc
                            });
                            elm = doc.host;
                            doc = elm.getRootNode();
                        }
                        stack.unshift({
                            elm,
                            doc
                        });
                        return stack.map((function(item) {
                            return generateSelector2(item.elm, options, item.doc);
                        }));
                    }
                    var ignoredAttributes = [ "class", "style", "id", "selected", "checked", "disabled", "tabindex", "aria-checked", "aria-selected", "aria-invalid", "aria-activedescendant", "aria-busy", "aria-disabled", "aria-expanded", "aria-grabbed", "aria-pressed", "aria-valuenow", "xmlns" ];
                    var MAXATTRIBUTELENGTH = 31;
                    var attrCharsRegex = /([\\"])/g;
                    var newlineChars = /(\r\n|\r|\n)/g;
                    function escapeAttribute(str) {
                        return str.replace(attrCharsRegex, "\\$1").replace(newlineChars, "\\a ");
                    }
                    function getAttributeNameValue(node, at) {
                        var name = at.name;
                        var atnv;
                        if (-1 !== name.indexOf("href") || -1 !== name.indexOf("src")) {
                            var friendly = get_friendly_uri_end_default(node.getAttribute(name));
                            if (friendly) atnv = escape_selector_default(at.name) + '$="' + escapeAttribute(friendly) + '"'; else atnv = escape_selector_default(at.name) + '="' + escapeAttribute(node.getAttribute(name)) + '"';
                        } else atnv = escape_selector_default(name) + '="' + escapeAttribute(at.value) + '"';
                        return atnv;
                    }
                    function countSort(a2, b2) {
                        return a2.count < b2.count ? -1 : a2.count === b2.count ? 0 : 1;
                    }
                    function filterAttributes(at) {
                        return !ignoredAttributes.includes(at.name) && -1 === at.name.indexOf(":") && (!at.value || at.value.length < MAXATTRIBUTELENGTH);
                    }
                    function _getSelectorData(domTree) {
                        var data = {
                            classes: {},
                            tags: {},
                            attributes: {}
                        };
                        domTree = Array.isArray(domTree) ? domTree : [ domTree ];
                        var currentLevel = domTree.slice();
                        var stack = [];
                        var _loop2 = function() {
                            var current = currentLevel.pop();
                            var node = current.actualNode;
                            if (!!node.querySelectorAll) {
                                var tag = node.nodeName;
                                if (data.tags[tag]) data.tags[tag]++; else data.tags[tag] = 1;
                                if (node.classList) Array.from(node.classList).forEach((function(cl) {
                                    var ind = escape_selector_default(cl);
                                    if (data.classes[ind]) data.classes[ind]++; else data.classes[ind] = 1;
                                }));
                                if (node.hasAttributes()) Array.from(get_node_attributes_default(node)).filter(filterAttributes).forEach((function(at) {
                                    var atnv = getAttributeNameValue(node, at);
                                    if (atnv) if (data.attributes[atnv]) data.attributes[atnv]++; else data.attributes[atnv] = 1;
                                }));
                            }
                            if (current.children.length) {
                                stack.push(currentLevel);
                                currentLevel = current.children.slice();
                            }
                            while (!currentLevel.length && stack.length) currentLevel = stack.pop();
                        };
                        while (currentLevel.length) _loop2();
                        return data;
                    }
                    function uncommonClasses(node, selectorData) {
                        var retVal = [];
                        var classData = selectorData.classes;
                        var tagData = selectorData.tags;
                        if (node.classList) Array.from(node.classList).forEach((function(cl) {
                            var ind = escape_selector_default(cl);
                            if (classData[ind] < tagData[node.nodeName]) retVal.push({
                                name: ind,
                                count: classData[ind],
                                species: "class"
                            });
                        }));
                        return retVal.sort(countSort);
                    }
                    function getNthChildString(elm, selector) {
                        var siblings = elm.parentNode && Array.from(elm.parentNode.children || "") || [];
                        var hasMatchingSiblings = siblings.find((function(sibling) {
                            return sibling !== elm && element_matches_default(sibling, selector);
                        }));
                        if (hasMatchingSiblings) {
                            var nthChild = 1 + siblings.indexOf(elm);
                            return ":nth-child(" + nthChild + ")";
                        } else return "";
                    }
                    function getElmId(elm) {
                        if (!elm.getAttribute("id")) return;
                        var doc = elm.getRootNode && elm.getRootNode() || document;
                        var id = "#" + escape_selector_default(elm.getAttribute("id") || "");
                        if (!id.match(/player_uid_/) && 1 === doc.querySelectorAll(id).length) return id;
                    }
                    function getBaseSelector(elm) {
                        var xhtml = is_xhtml_default(document);
                        return escape_selector_default(xhtml ? elm.localName : elm.nodeName.toLowerCase());
                    }
                    function uncommonAttributes(node, selectorData) {
                        var retVal = [];
                        var attData = selectorData.attributes;
                        var tagData = selectorData.tags;
                        if (node.hasAttributes()) Array.from(get_node_attributes_default(node)).filter(filterAttributes).forEach((function(at) {
                            var atnv = getAttributeNameValue(node, at);
                            if (atnv && attData[atnv] < tagData[node.nodeName]) retVal.push({
                                name: atnv,
                                count: attData[atnv],
                                species: "attribute"
                            });
                        }));
                        return retVal.sort(countSort);
                    }
                    function getThreeLeastCommonFeatures(elm, selectorData) {
                        var selector = "";
                        var features;
                        var clss = uncommonClasses(elm, selectorData);
                        var atts = uncommonAttributes(elm, selectorData);
                        if (clss.length && 1 === clss[0].count) features = [ clss[0] ]; else if (atts.length && 1 === atts[0].count) {
                            features = [ atts[0] ];
                            selector = getBaseSelector(elm);
                        } else {
                            features = clss.concat(atts);
                            features.sort(countSort);
                            features = features.slice(0, 3);
                            if (!features.some((function(feat) {
                                return "class" === feat.species;
                            }))) selector = getBaseSelector(elm); else features.sort((function(a2, b2) {
                                return a2.species !== b2.species && "class" === a2.species ? -1 : a2.species === b2.species ? 0 : 1;
                            }));
                        }
                        return selector + features.reduce((function(val, feat) {
                            switch (feat.species) {
                              case "class":
                                return val + "." + feat.name;

                              case "attribute":
                                return val + "[" + feat.name + "]";
                            }
                            return val;
                        }), "");
                    }
                    function generateSelector(elm, options, doc) {
                        if (!axe._selectorData) throw new Error("Expect axe._selectorData to be set up");
                        var _options$toRoot = options.toRoot, toRoot = void 0 === _options$toRoot ? false : _options$toRoot;
                        var selector;
                        var similar;
                        do {
                            var features = getElmId(elm);
                            if (!features) {
                                features = getThreeLeastCommonFeatures(elm, axe._selectorData);
                                features += getNthChildString(elm, features);
                            }
                            if (selector) selector = features + " > " + selector; else selector = features;
                            if (!similar) similar = Array.from(doc.querySelectorAll(selector)); else similar = similar.filter((function(item) {
                                return element_matches_default(item, selector);
                            }));
                            elm = elm.parentElement;
                        } while ((similar.length > 1 || toRoot) && elm && 11 !== elm.nodeType);
                        if (1 === similar.length) return selector; else if (-1 !== selector.indexOf(" > ")) return ":root" + selector.substring(selector.indexOf(" > "));
                        return ":root";
                    }
                    function _getSelector(elm, options) {
                        return _getShadowSelector(generateSelector, elm, options);
                    }
                    function generateAncestry(node) {
                        var nodeName2 = node.nodeName.toLowerCase();
                        var parent = node.parentElement;
                        if (!parent) return nodeName2;
                        var nthChild = "";
                        if ("head" !== nodeName2 && "body" !== nodeName2 && parent.children.length > 1) {
                            var index = Array.prototype.indexOf.call(parent.children, node) + 1;
                            nthChild = ":nth-child(".concat(index, ")");
                        }
                        return generateAncestry(parent) + " > " + nodeName2 + nthChild;
                    }
                    function _getAncestry(elm, options) {
                        return _getShadowSelector(generateAncestry, elm, options);
                    }
                    function getXPathArray(node, path) {
                        var sibling, count;
                        if (!node) return [];
                        if (!path && 9 === node.nodeType) {
                            path = [ {
                                str: "html"
                            } ];
                            return path;
                        }
                        path = path || [];
                        if (node.parentNode && node.parentNode !== node) path = getXPathArray(node.parentNode, path);
                        if (node.previousSibling) {
                            count = 1;
                            sibling = node.previousSibling;
                            do {
                                if (1 === sibling.nodeType && sibling.nodeName === node.nodeName) count++;
                                sibling = sibling.previousSibling;
                            } while (sibling);
                            if (1 === count) count = null;
                        } else if (node.nextSibling) {
                            sibling = node.nextSibling;
                            do {
                                if (1 === sibling.nodeType && sibling.nodeName === node.nodeName) {
                                    count = 1;
                                    sibling = null;
                                } else {
                                    count = null;
                                    sibling = sibling.previousSibling;
                                }
                            } while (sibling);
                        }
                        if (1 === node.nodeType) {
                            var element = {};
                            element.str = node.nodeName.toLowerCase();
                            var id = node.getAttribute && escape_selector_default(node.getAttribute("id"));
                            if (id && 1 === node.ownerDocument.querySelectorAll("#" + id).length) element.id = node.getAttribute("id");
                            if (count > 1) element.count = count;
                            path.push(element);
                        }
                        return path;
                    }
                    function xpathToString(xpathArray) {
                        return xpathArray.reduce((function(str, elm) {
                            if (elm.id) return "/".concat(elm.str, "[@id='").concat(elm.id, "']"); else return str + "/".concat(elm.str) + (elm.count > 0 ? "[".concat(elm.count, "]") : "");
                        }), "");
                    }
                    function getXpath(node) {
                        var xpathArray = getXPathArray(node);
                        return xpathToString(xpathArray);
                    }
                    var get_xpath_default = getXpath;
                    var _cache = {};
                    var cache = {
                        set: function(key, value) {
                            validateKey(key);
                            _cache[key] = value;
                        },
                        get: function(key, creator) {
                            validateCreator(creator);
                            if (key in _cache) return _cache[key];
                            if ("function" === typeof creator) {
                                var value = creator();
                                assert_default(void 0 !== value, "Cache creator function should not return undefined");
                                this.set(key, value);
                                return _cache[key];
                            }
                        },
                        clear: function() {
                            _cache = {};
                        }
                    };
                    function validateKey(key) {
                        assert_default("string" === typeof key, "key must be a string, " + _typeof(key) + " given");
                        assert_default("" !== key, "key must not be empty");
                    }
                    function validateCreator(creator) {
                        assert_default("function" === typeof creator || "undefined" === typeof creator, "creator must be a function or undefined, " + _typeof(creator) + " given");
                    }
                    var cache_default = cache;
                    function getNodeFromTree(vNode, node) {
                        var el = node || vNode;
                        return cache_default.get("nodeMap") ? cache_default.get("nodeMap").get(el) : null;
                    }
                    var get_node_from_tree_default = getNodeFromTree;
                    var CACHE_KEY = "DqElm.RunOptions";
                    function truncate(str, maxLength) {
                        maxLength = maxLength || 300;
                        if (str.length > maxLength) {
                            var index = str.indexOf(">");
                            str = str.substring(0, index + 1);
                        }
                        return str;
                    }
                    function getSource(element) {
                        if (!(null !== element && void 0 !== element && element.outerHTML)) return "";
                        var source = element.outerHTML;
                        if (!source && "function" === typeof window.XMLSerializer) source = (new window.XMLSerializer).serializeToString(element);
                        return truncate(source || "");
                    }
                    var DqElement = memoize_default((function(elm, options, spec) {
                        var _options, _spec, _this$spec$selector, _this$_virtualNode;
                        null !== (_options = options) && void 0 !== _options ? _options : options = null;
                        null !== (_spec = spec) && void 0 !== _spec ? _spec : spec = {};
                        if (!options) {
                            var _cache_default$get;
                            options = null !== (_cache_default$get = cache_default.get(CACHE_KEY)) && void 0 !== _cache_default$get ? _cache_default$get : {};
                        }
                        this.spec = spec;
                        if (elm instanceof abstract_virtual_node_default) {
                            this._virtualNode = elm;
                            this._element = elm.actualNode;
                        } else {
                            this._element = elm;
                            this._virtualNode = get_node_from_tree_default(elm);
                        }
                        this.fromFrame = (null === (_this$spec$selector = this.spec.selector) || void 0 === _this$spec$selector ? void 0 : _this$spec$selector.length) > 1;
                        this._includeElementInJson = options.elementRef;
                        if (options.absolutePaths) this._options = {
                            toRoot: true
                        };
                        this.nodeIndexes = [];
                        if (Array.isArray(this.spec.nodeIndexes)) this.nodeIndexes = this.spec.nodeIndexes; else if ("number" === typeof (null === (_this$_virtualNode = this._virtualNode) || void 0 === _this$_virtualNode ? void 0 : _this$_virtualNode.nodeIndex)) this.nodeIndexes = [ this._virtualNode.nodeIndex ];
                        this.source = null;
                        if (!axe._audit.noHtml) {
                            var _this$spec$source;
                            this.source = null !== (_this$spec$source = this.spec.source) && void 0 !== _this$spec$source ? _this$spec$source : getSource(this._element);
                        }
                        return this;
                    }));
                    DqElement.prototype = {
                        get selector() {
                            return this.spec.selector || [ _getSelector(this.element, this._options) ];
                        },
                        get ancestry() {
                            return this.spec.ancestry || [ _getAncestry(this.element) ];
                        },
                        get xpath() {
                            return this.spec.xpath || [ get_xpath_default(this.element) ];
                        },
                        get element() {
                            return this._element;
                        },
                        toJSON: function() {
                            var spec = {
                                selector: this.selector,
                                source: this.source,
                                xpath: this.xpath,
                                ancestry: this.ancestry,
                                nodeIndexes: this.nodeIndexes,
                                fromFrame: this.fromFrame
                            };
                            if (this._includeElementInJson) spec.element = this._element;
                            return spec;
                        }
                    };
                    DqElement.fromFrame = function(node, options, frame) {
                        var spec = DqElement.mergeSpecs(node, frame);
                        return new DqElement(frame.element, options, spec);
                    };
                    DqElement.mergeSpecs = function(child, parentFrame) {
                        return _extends({}, child, {
                            selector: [].concat(_toConsumableArray(parentFrame.selector), _toConsumableArray(child.selector)),
                            ancestry: [].concat(_toConsumableArray(parentFrame.ancestry), _toConsumableArray(child.ancestry)),
                            xpath: [].concat(_toConsumableArray(parentFrame.xpath), _toConsumableArray(child.xpath)),
                            nodeIndexes: [].concat(_toConsumableArray(parentFrame.nodeIndexes), _toConsumableArray(child.nodeIndexes)),
                            fromFrame: true
                        });
                    };
                    DqElement.setRunOptions = function(_ref2) {
                        var elementRef = _ref2.elementRef, absolutePaths = _ref2.absolutePaths;
                        cache_default.set(CACHE_KEY, {
                            elementRef,
                            absolutePaths
                        });
                    };
                    var dq_element_default = DqElement;
                    function checkHelper(checkResult, options, resolve, reject) {
                        return {
                            isAsync: false,
                            async: function() {
                                this.isAsync = true;
                                return function(result) {
                                    if (result instanceof Error === false) {
                                        checkResult.result = result;
                                        resolve(checkResult);
                                    } else reject(result);
                                };
                            },
                            data: function(_data) {
                                checkResult.data = _data;
                            },
                            relatedNodes: function(nodes) {
                                if (!window.Node) return;
                                if (nodes instanceof window.Node || nodes instanceof abstract_virtual_node_default) nodes = [ nodes ]; else nodes = to_array_default(nodes);
                                checkResult.relatedNodes = [];
                                nodes.forEach((function(node) {
                                    if (node instanceof abstract_virtual_node_default) node = node.actualNode;
                                    if (node instanceof window.Node) {
                                        var dqElm = new dq_element_default(node);
                                        checkResult.relatedNodes.push(dqElm);
                                    }
                                }));
                            }
                        };
                    }
                    var check_helper_default = checkHelper;
                    function _clone(obj) {
                        return cloneRecused(obj, new Map);
                    }
                    function cloneRecused(obj, seen) {
                        var _window, _window2;
                        if (null === obj || "object" !== _typeof(obj)) return obj;
                        if (null !== (_window = window) && void 0 !== _window && _window.Node && obj instanceof window.Node || null !== (_window2 = window) && void 0 !== _window2 && _window2.HTMLCollection && obj instanceof window.HTMLCollection || "nodeName" in obj && "nodeType" in obj && "ownerDocument" in obj) return obj;
                        if (seen.has(obj)) return seen.get(obj);
                        if (Array.isArray(obj)) {
                            var out2 = [];
                            seen.set(obj, out2);
                            obj.forEach((function(value) {
                                out2.push(cloneRecused(value, seen));
                            }));
                            return out2;
                        }
                        var out = {};
                        seen.set(obj, out);
                        for (var key in obj) out[key] = cloneRecused(obj[key], seen);
                        return out;
                    }
                    var import_css_selector_parser = __toModule(require_lib());
                    var parser = new import_css_selector_parser.CssSelectorParser;
                    parser.registerSelectorPseudos("not");
                    parser.registerSelectorPseudos("is");
                    parser.registerNestingOperators(">");
                    parser.registerAttrEqualityMods("^", "$", "*", "~");
                    var css_parser_default = parser;
                    function _matches(vNode, selector) {
                        var expressions = _convertSelector(selector);
                        return expressions.some((function(expression) {
                            return _matchesExpression(vNode, expression);
                        }));
                    }
                    function matchesTag(vNode, exp) {
                        return 1 === vNode.props.nodeType && ("*" === exp.tag || vNode.props.nodeName === exp.tag);
                    }
                    function matchesClasses(vNode, exp) {
                        return !exp.classes || exp.classes.every((function(cl) {
                            return vNode.hasClass(cl.value);
                        }));
                    }
                    function matchesAttributes(vNode, exp) {
                        return !exp.attributes || exp.attributes.every((function(att) {
                            var nodeAtt = vNode.attr(att.key);
                            return null !== nodeAtt && att.test(nodeAtt);
                        }));
                    }
                    function matchesId(vNode, exp) {
                        return !exp.id || vNode.props.id === exp.id;
                    }
                    function matchesPseudos(target, exp) {
                        if (!exp.pseudos || exp.pseudos.every((function(pseudo) {
                            if ("not" === pseudo.name) return !pseudo.expressions.some((function(expression) {
                                return _matchesExpression(target, expression);
                            })); else if ("is" === pseudo.name) return pseudo.expressions.some((function(expression) {
                                return _matchesExpression(target, expression);
                            }));
                            throw new Error("the pseudo selector " + pseudo.name + " has not yet been implemented");
                        }))) return true;
                        return false;
                    }
                    function matchExpression(vNode, expression) {
                        return matchesTag(vNode, expression) && matchesClasses(vNode, expression) && matchesAttributes(vNode, expression) && matchesId(vNode, expression) && matchesPseudos(vNode, expression);
                    }
                    var escapeRegExp = function() {
                        var from = /(?=[\-\[\]{}()*+?.\\\^$|,#\s])/g;
                        var to2 = "\\";
                        return function(string) {
                            return string.replace(from, to2);
                        };
                    }();
                    var reUnescape = /\\/g;
                    function convertAttributes(atts) {
                        if (!atts) return;
                        return atts.map((function(att) {
                            var attributeKey = att.name.replace(reUnescape, "");
                            var attributeValue = (att.value || "").replace(reUnescape, "");
                            var test, regexp;
                            switch (att.operator) {
                              case "^=":
                                regexp = new RegExp("^" + escapeRegExp(attributeValue));
                                break;

                              case "$=":
                                regexp = new RegExp(escapeRegExp(attributeValue) + "$");
                                break;

                              case "~=":
                                regexp = new RegExp("(^|\\s)" + escapeRegExp(attributeValue) + "(\\s|$)");
                                break;

                              case "|=":
                                regexp = new RegExp("^" + escapeRegExp(attributeValue) + "(-|$)");
                                break;

                              case "=":
                                test = function(value) {
                                    return attributeValue === value;
                                };
                                break;

                              case "*=":
                                test = function(value) {
                                    return value && value.includes(attributeValue);
                                };
                                break;

                              case "!=":
                                test = function(value) {
                                    return attributeValue !== value;
                                };
                                break;

                              default:
                                test = function(value) {
                                    return null !== value;
                                };
                            }
                            if ("" === attributeValue && /^[*$^]=$/.test(att.operator)) test = function() {
                                return false;
                            };
                            if (!test) test = function(value) {
                                return value && regexp.test(value);
                            };
                            return {
                                key: attributeKey,
                                value: attributeValue,
                                type: "undefined" === typeof att.value ? "attrExist" : "attrValue",
                                test
                            };
                        }));
                    }
                    function convertClasses(classes) {
                        if (!classes) return;
                        return classes.map((function(className) {
                            className = className.replace(reUnescape, "");
                            return {
                                value: className,
                                regexp: new RegExp("(^|\\s)" + escapeRegExp(className) + "(\\s|$)")
                            };
                        }));
                    }
                    function convertPseudos(pseudos) {
                        if (!pseudos) return;
                        return pseudos.map((function(p2) {
                            var expressions;
                            if ([ "is", "not" ].includes(p2.name)) {
                                expressions = p2.value;
                                expressions = expressions.selectors ? expressions.selectors : [ expressions ];
                                expressions = convertExpressions(expressions);
                            }
                            return {
                                name: p2.name,
                                expressions,
                                value: p2.value
                            };
                        }));
                    }
                    function convertExpressions(expressions) {
                        return expressions.map((function(exp) {
                            var newExp = [];
                            var rule = exp.rule;
                            while (rule) {
                                newExp.push({
                                    tag: rule.tagName ? rule.tagName.toLowerCase() : "*",
                                    combinator: rule.nestingOperator ? rule.nestingOperator : " ",
                                    id: rule.id,
                                    attributes: convertAttributes(rule.attrs),
                                    classes: convertClasses(rule.classNames),
                                    pseudos: convertPseudos(rule.pseudos)
                                });
                                rule = rule.rule;
                            }
                            return newExp;
                        }));
                    }
                    function _convertSelector(selector) {
                        var expressions = css_parser_default.parse(selector);
                        expressions = expressions.selectors ? expressions.selectors : [ expressions ];
                        return convertExpressions(expressions);
                    }
                    function optimizedMatchesExpression(vNode, expressions, index, matchAnyParent) {
                        if (!vNode) return false;
                        var isArray = Array.isArray(expressions);
                        var expression = isArray ? expressions[index] : expressions;
                        var machedExpression = matchExpression(vNode, expression);
                        while (!machedExpression && matchAnyParent && vNode.parent) {
                            vNode = vNode.parent;
                            machedExpression = matchExpression(vNode, expression);
                        }
                        if (index > 0) {
                            if (false === [ " ", ">" ].includes(expression.combinator)) throw new Error("axe.utils.matchesExpression does not support the combinator: " + expression.combinator);
                            machedExpression = machedExpression && optimizedMatchesExpression(vNode.parent, expressions, index - 1, " " === expression.combinator);
                        }
                        return machedExpression;
                    }
                    function _matchesExpression(vNode, expressions, matchAnyParent) {
                        return optimizedMatchesExpression(vNode, expressions, expressions.length - 1, matchAnyParent);
                    }
                    function closest(vNode, selector) {
                        while (vNode) {
                            if (_matches(vNode, selector)) return vNode;
                            if ("undefined" === typeof vNode.parent) throw new TypeError("Cannot resolve parent for non-DOM nodes");
                            vNode = vNode.parent;
                        }
                        return null;
                    }
                    var closest_default = closest;
                    function noop() {}
                    function funcGuard(f) {
                        if ("function" !== typeof f) throw new TypeError("Queue methods require functions as arguments");
                    }
                    function queue() {
                        var tasks = [];
                        var started = 0;
                        var remaining = 0;
                        var completeQueue = noop;
                        var complete = false;
                        var err2;
                        var defaultFail = function(e) {
                            err2 = e;
                            setTimeout((function() {
                                if (void 0 !== err2 && null !== err2) log_default("Uncaught error (of queue)", err2);
                            }), 1);
                        };
                        var failed = defaultFail;
                        function createResolve(i) {
                            return function(r) {
                                tasks[i] = r;
                                remaining -= 1;
                                if (!remaining && completeQueue !== noop) {
                                    complete = true;
                                    completeQueue(tasks);
                                }
                            };
                        }
                        function abort(msg) {
                            completeQueue = noop;
                            failed(msg);
                            return tasks;
                        }
                        function pop() {
                            var length = tasks.length;
                            for (;started < length; started++) {
                                var task = tasks[started];
                                try {
                                    task.call(null, createResolve(started), abort);
                                } catch (e) {
                                    abort(e);
                                }
                            }
                        }
                        var q = {
                            defer: function(fn) {
                                if ("object" === _typeof(fn) && fn.then && fn["catch"]) {
                                    var defer = fn;
                                    fn = function(resolve, reject) {
                                        defer.then(resolve)["catch"](reject);
                                    };
                                }
                                funcGuard(fn);
                                if (void 0 !== err2) return; else if (complete) throw new Error("Queue already completed");
                                tasks.push(fn);
                                ++remaining;
                                pop();
                                return q;
                            },
                            then: function(fn) {
                                funcGuard(fn);
                                if (completeQueue !== noop) throw new Error("queue `then` already set");
                                if (!err2) {
                                    completeQueue = fn;
                                    if (!remaining) {
                                        complete = true;
                                        completeQueue(tasks);
                                    }
                                }
                                return q;
                            },
                            catch: function(fn) {
                                funcGuard(fn);
                                if (failed !== defaultFail) throw new Error("queue `catch` already set");
                                if (!err2) failed = fn; else {
                                    fn(err2);
                                    err2 = null;
                                }
                                return q;
                            },
                            abort
                        };
                        return q;
                    }
                    var queue_default = queue;
                    var uuid;
                    var _rng;
                    var _crypto = window.crypto || window.msCrypto;
                    if (!_rng && _crypto && _crypto.getRandomValues) {
                        var _rnds8 = new Uint8Array(16);
                        _rng = function() {
                            _crypto.getRandomValues(_rnds8);
                            return _rnds8;
                        };
                    }
                    if (!_rng) {
                        var _rnds = new Array(16);
                        _rng = function() {
                            for (var r, i = 0; i < 16; i++) {
                                if (0 === (3 & i)) r = 4294967296 * Math.random();
                                _rnds[i] = r >>> ((3 & i) << 3) & 255;
                            }
                            return _rnds;
                        };
                    }
                    var BufferClass = "function" == typeof window.Buffer ? window.Buffer : Array;
                    var _byteToHex = [];
                    var _hexToByte = {};
                    for (var i = 0; i < 256; i++) {
                        _byteToHex[i] = (i + 256).toString(16).substr(1);
                        _hexToByte[_byteToHex[i]] = i;
                    }
                    function parse(s, buf, offset) {
                        var i = buf && offset || 0, ii = 0;
                        buf = buf || [];
                        s.toLowerCase().replace(/[0-9a-f]{2}/g, (function(oct) {
                            if (ii < 16) buf[i + ii++] = _hexToByte[oct];
                        }));
                        while (ii < 16) buf[i + ii++] = 0;
                        return buf;
                    }
                    function unparse(buf, offset) {
                        var i = offset || 0, bth = _byteToHex;
                        return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + "-" + bth[buf[i++]] + bth[buf[i++]] + "-" + bth[buf[i++]] + bth[buf[i++]] + "-" + bth[buf[i++]] + bth[buf[i++]] + "-" + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];
                    }
                    var _seedBytes = _rng();
                    var _nodeId = [ 1 | _seedBytes[0], _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5] ];
                    var _clockseq = 16383 & (_seedBytes[6] << 8 | _seedBytes[7]);
                    var _lastMSecs = 0;
                    var _lastNSecs = 0;
                    function v1(options, buf, offset) {
                        var i = buf && offset || 0;
                        var b2 = buf || [];
                        options = options || {};
                        var clockseq = null != options.clockseq ? options.clockseq : _clockseq;
                        var msecs = null != options.msecs ? options.msecs : (new Date).getTime();
                        var nsecs = null != options.nsecs ? options.nsecs : _lastNSecs + 1;
                        var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
                        if (dt < 0 && null == options.clockseq) clockseq = clockseq + 1 & 16383;
                        if ((dt < 0 || msecs > _lastMSecs) && null == options.nsecs) nsecs = 0;
                        if (nsecs >= 1e4) throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
                        _lastMSecs = msecs;
                        _lastNSecs = nsecs;
                        _clockseq = clockseq;
                        msecs += 122192928e5;
                        var tl = (1e4 * (268435455 & msecs) + nsecs) % 4294967296;
                        b2[i++] = tl >>> 24 & 255;
                        b2[i++] = tl >>> 16 & 255;
                        b2[i++] = tl >>> 8 & 255;
                        b2[i++] = 255 & tl;
                        var tmh = msecs / 4294967296 * 1e4 & 268435455;
                        b2[i++] = tmh >>> 8 & 255;
                        b2[i++] = 255 & tmh;
                        b2[i++] = tmh >>> 24 & 15 | 16;
                        b2[i++] = tmh >>> 16 & 255;
                        b2[i++] = clockseq >>> 8 | 128;
                        b2[i++] = 255 & clockseq;
                        var node = options.node || _nodeId;
                        for (var n2 = 0; n2 < 6; n2++) b2[i + n2] = node[n2];
                        return buf ? buf : unparse(b2);
                    }
                    function v4(options, buf, offset) {
                        var i = buf && offset || 0;
                        if ("string" == typeof options) {
                            buf = "binary" == options ? new BufferClass(16) : null;
                            options = null;
                        }
                        options = options || {};
                        var rnds = options.random || (options.rng || _rng)();
                        rnds[6] = 15 & rnds[6] | 64;
                        rnds[8] = 63 & rnds[8] | 128;
                        if (buf) for (var ii = 0; ii < 16; ii++) buf[i + ii] = rnds[ii];
                        return buf || unparse(rnds);
                    }
                    uuid = v4;
                    uuid.v1 = v1;
                    uuid.v4 = v4;
                    uuid.parse = parse;
                    uuid.unparse = unparse;
                    uuid.BufferClass = BufferClass;
                    axe._uuid = v1();
                    var uuid_default = v4;
                    var errorTypes = Object.freeze([ "EvalError", "RangeError", "ReferenceError", "SyntaxError", "TypeError", "URIError" ]);
                    function stringifyMessage(_ref3) {
                        var topic = _ref3.topic, channelId = _ref3.channelId, message = _ref3.message, messageId = _ref3.messageId, keepalive = _ref3.keepalive;
                        var data = {
                            channelId,
                            topic,
                            messageId,
                            keepalive: !!keepalive,
                            source: getSource2()
                        };
                        if (message instanceof Error) data.error = {
                            name: message.name,
                            message: message.message,
                            stack: message.stack
                        }; else data.payload = message;
                        return JSON.stringify(data);
                    }
                    function parseMessage(dataString) {
                        var data;
                        try {
                            data = JSON.parse(dataString);
                        } catch (_unused) {
                            return;
                        }
                        if (!isRespondableMessage(data)) return;
                        var _data2 = data, topic = _data2.topic, channelId = _data2.channelId, messageId = _data2.messageId, keepalive = _data2.keepalive;
                        var message = "object" === _typeof(data.error) ? buildErrorObject(data.error) : data.payload;
                        return {
                            topic,
                            message,
                            messageId,
                            channelId,
                            keepalive: !!keepalive
                        };
                    }
                    function isRespondableMessage(postedMessage) {
                        return null !== postedMessage && "object" === _typeof(postedMessage) && "string" === typeof postedMessage.channelId && postedMessage.source === getSource2();
                    }
                    function buildErrorObject(error) {
                        var msg = error.message || "Unknown error occurred";
                        var errorName = errorTypes.includes(error.name) ? error.name : "Error";
                        var ErrConstructor = window[errorName] || Error;
                        if (error.stack) msg += "\n" + error.stack.replace(error.message, "");
                        return new ErrConstructor(msg);
                    }
                    function getSource2() {
                        var application = "axeAPI";
                        var version = "";
                        if ("undefined" !== typeof axe && axe._audit && axe._audit.application) application = axe._audit.application;
                        if ("undefined" !== typeof axe) version = axe.version;
                        return application + "." + version;
                    }
                    function assertIsParentWindow(win) {
                        assetNotGlobalWindow(win);
                        assert_default(window.parent === win, "Source of the response must be the parent window.");
                    }
                    function assertIsFrameWindow(win) {
                        assetNotGlobalWindow(win);
                        assert_default(win.parent === window, "Respondable target must be a frame in the current window");
                    }
                    function assetNotGlobalWindow(win) {
                        assert_default(window !== win, "Messages can not be sent to the same window.");
                    }
                    var channels = {};
                    function storeReplyHandler(channelId, replyHandler) {
                        var sendToParent = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : true;
                        assert_default(!channels[channelId], "A replyHandler already exists for this message channel.");
                        channels[channelId] = {
                            replyHandler,
                            sendToParent
                        };
                    }
                    function getReplyHandler(channelId) {
                        return channels[channelId];
                    }
                    function deleteReplyHandler(channelId) {
                        delete channels[channelId];
                    }
                    var messageIds = [];
                    function createMessageId() {
                        var uuid2 = "".concat(v4(), ":").concat(v4());
                        if (messageIds.includes(uuid2)) return createMessageId();
                        messageIds.push(uuid2);
                        return uuid2;
                    }
                    function isNewMessage(uuid2) {
                        if (messageIds.includes(uuid2)) return false;
                        messageIds.push(uuid2);
                        return true;
                    }
                    function postMessage(win, data, sendToParent, replyHandler) {
                        sendToParent ? assertIsParentWindow(win) : assertIsFrameWindow(win);
                        if (data.message instanceof Error && !sendToParent) {
                            axe.log(data.message);
                            return false;
                        }
                        var dataString = stringifyMessage(_extends({
                            messageId: createMessageId()
                        }, data));
                        var allowedOrigins = axe._audit.allowedOrigins;
                        if (!allowedOrigins || !allowedOrigins.length) return false;
                        if ("function" === typeof replyHandler) storeReplyHandler(data.channelId, replyHandler, sendToParent);
                        allowedOrigins.forEach((function(origin) {
                            try {
                                win.postMessage(dataString, origin);
                            } catch (err2) {
                                if (err2 instanceof win.DOMException) throw new Error('allowedOrigins value "'.concat(origin, '" is not a valid origin'));
                                throw err2;
                            }
                        }));
                        return true;
                    }
                    function processError(win, error, channelId) {
                        if (!win.parent !== window) return axe.log(error);
                        try {
                            postMessage(win, {
                                topic: null,
                                channelId,
                                message: error,
                                messageId: createMessageId(),
                                keepalive: true
                            }, true);
                        } catch (err2) {
                            return axe.log(err2);
                        }
                    }
                    function createResponder(win, channelId) {
                        var sendToParent = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : true;
                        return function(message, keepalive, replyHandler) {
                            var data = {
                                channelId,
                                message,
                                keepalive
                            };
                            postMessage(win, data, sendToParent, replyHandler);
                        };
                    }
                    function originIsAllowed(origin) {
                        var allowedOrigins = axe._audit.allowedOrigins;
                        return allowedOrigins && allowedOrigins.includes("*") || allowedOrigins.includes(origin);
                    }
                    function messageHandler(_ref4, topicHandler) {
                        var origin = _ref4.origin, dataString = _ref4.data, win = _ref4.source;
                        try {
                            var data = parseMessage(dataString) || {};
                            var channelId = data.channelId, message = data.message, messageId = data.messageId;
                            if (!originIsAllowed(origin) || !isNewMessage(messageId)) return;
                            if (message instanceof Error && win.parent !== window) {
                                axe.log(message);
                                return false;
                            }
                            try {
                                if (data.topic) {
                                    var responder = createResponder(win, channelId);
                                    assertIsParentWindow(win);
                                    topicHandler(data, responder);
                                } else callReplyHandler(win, data);
                            } catch (error) {
                                processError(win, error, channelId);
                            }
                        } catch (error) {
                            axe.log(error);
                            return false;
                        }
                    }
                    function callReplyHandler(win, data) {
                        var channelId = data.channelId, message = data.message, keepalive = data.keepalive;
                        var _ref5 = getReplyHandler(channelId) || {}, replyHandler = _ref5.replyHandler, sendToParent = _ref5.sendToParent;
                        if (!replyHandler) return;
                        sendToParent ? assertIsParentWindow(win) : assertIsFrameWindow(win);
                        var responder = createResponder(win, channelId, sendToParent);
                        if (!keepalive && channelId) deleteReplyHandler(channelId);
                        try {
                            replyHandler(message, keepalive, responder);
                        } catch (error) {
                            axe.log(error);
                            responder(error, keepalive);
                        }
                    }
                    var frameMessenger = {
                        open: function(topicHandler) {
                            if ("function" !== typeof window.addEventListener) return;
                            var handler = function(messageEvent) {
                                messageHandler(messageEvent, topicHandler);
                            };
                            window.addEventListener("message", handler, false);
                            return function() {
                                window.removeEventListener("message", handler, false);
                            };
                        },
                        post: function(win, data, replyHandler) {
                            if ("function" !== typeof window.addEventListener) return false;
                            return postMessage(win, data, false, replyHandler);
                        }
                    };
                    function setDefaultFrameMessenger(respondable2) {
                        respondable2.updateMessenger(frameMessenger);
                    }
                    var closeHandler;
                    var postMessage2;
                    var topicHandlers = {};
                    function _respondable(win, topic, message, keepalive, replyHandler) {
                        var data = {
                            topic,
                            message,
                            channelId: "".concat(v4(), ":").concat(v4()),
                            keepalive
                        };
                        return postMessage2(win, data, replyHandler);
                    }
                    function messageListener(data, responder) {
                        var topic = data.topic, message = data.message, keepalive = data.keepalive;
                        var topicHandler = topicHandlers[topic];
                        if (!topicHandler) return;
                        try {
                            topicHandler(message, keepalive, responder);
                        } catch (error) {
                            axe.log(error);
                            responder(error, keepalive);
                        }
                    }
                    _respondable.updateMessenger = function(_ref6) {
                        var open = _ref6.open, post = _ref6.post;
                        assert_default("function" === typeof open, "open callback must be a function");
                        assert_default("function" === typeof post, "post callback must be a function");
                        if (closeHandler) closeHandler();
                        var close = open(messageListener);
                        if (close) {
                            assert_default("function" === typeof close, "open callback must return a cleanup function");
                            closeHandler = close;
                        } else closeHandler = null;
                        postMessage2 = post;
                    };
                    _respondable.subscribe = function(topic, topicHandler) {
                        assert_default("function" === typeof topicHandler, "Subscriber callback must be a function");
                        assert_default(!topicHandlers[topic], "Topic ".concat(topic, " is already registered to."));
                        topicHandlers[topic] = topicHandler;
                    };
                    _respondable.isInFrame = function() {
                        var win = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : window;
                        return !!win.frameElement;
                    };
                    setDefaultFrameMessenger(_respondable);
                    function _sendCommandToFrame(node, parameters, resolve, reject) {
                        var _parameters$options$p, _parameters$options;
                        var win = node.contentWindow;
                        var pingWaitTime = null !== (_parameters$options$p = null === (_parameters$options = parameters.options) || void 0 === _parameters$options ? void 0 : _parameters$options.pingWaitTime) && void 0 !== _parameters$options$p ? _parameters$options$p : 500;
                        if (!win) {
                            log_default("Frame does not have a content window", node);
                            resolve(null);
                            return;
                        }
                        if (0 === pingWaitTime) {
                            callAxeStart(node, parameters, resolve, reject);
                            return;
                        }
                        var timeout = setTimeout((function() {
                            timeout = setTimeout((function() {
                                if (!parameters.debug) resolve(null); else reject(err("No response from frame", node));
                            }), 0);
                        }), pingWaitTime);
                        _respondable(win, "axe.ping", null, void 0, (function() {
                            clearTimeout(timeout);
                            callAxeStart(node, parameters, resolve, reject);
                        }));
                    }
                    function callAxeStart(node, parameters, resolve, reject) {
                        var _parameters$options$f, _parameters$options2;
                        var frameWaitTime = null !== (_parameters$options$f = null === (_parameters$options2 = parameters.options) || void 0 === _parameters$options2 ? void 0 : _parameters$options2.frameWaitTime) && void 0 !== _parameters$options$f ? _parameters$options$f : 6e4;
                        var win = node.contentWindow;
                        var timeout = setTimeout((function() {
                            reject(err("Axe in frame timed out", node));
                        }), frameWaitTime);
                        _respondable(win, "axe.start", parameters, void 0, (function(data) {
                            clearTimeout(timeout);
                            if (data instanceof Error === false) resolve(data); else reject(data);
                        }));
                    }
                    function err(message, node) {
                        var selector;
                        if (axe._tree) selector = _getSelector(node);
                        return new Error(message + ": " + (selector || node));
                    }
                    var customSerializer = null;
                    var nodeSerializer = {
                        update: function(serializer) {
                            assert_default("object" === _typeof(serializer), "serializer must be an object");
                            customSerializer = serializer;
                        },
                        toSpec: function(node) {
                            return nodeSerializer.dqElmToSpec(new dq_element_default(node));
                        },
                        dqElmToSpec: function(dqElm, runOptions) {
                            var _customSerializer;
                            if (dqElm instanceof dq_element_default === false) return dqElm;
                            if (runOptions) dqElm = cloneLimitedDqElement(dqElm, runOptions);
                            if ("function" === typeof (null === (_customSerializer = customSerializer) || void 0 === _customSerializer ? void 0 : _customSerializer.toSpec)) return customSerializer.toSpec(dqElm);
                            return dqElm.toJSON();
                        },
                        mergeSpecs: function(nodeSpec, parentFrameSpec) {
                            var _customSerializer2;
                            if ("function" === typeof (null === (_customSerializer2 = customSerializer) || void 0 === _customSerializer2 ? void 0 : _customSerializer2.mergeSpecs)) return customSerializer.mergeSpecs(nodeSpec, parentFrameSpec);
                            return dq_element_default.mergeSpecs(nodeSpec, parentFrameSpec);
                        },
                        mapRawResults: function(rawResults) {
                            return rawResults.map((function(rawResult) {
                                return _extends({}, rawResult, {
                                    nodes: nodeSerializer.mapRawNodeResults(rawResult.nodes)
                                });
                            }));
                        },
                        mapRawNodeResults: function(nodeResults) {
                            return null === nodeResults || void 0 === nodeResults ? void 0 : nodeResults.map((function(_ref7) {
                                var node = _ref7.node, nodeResult = _objectWithoutProperties(_ref7, _excluded);
                                nodeResult.node = nodeSerializer.dqElmToSpec(node);
                                for (var _i2 = 0, _arr = [ "any", "all", "none" ]; _i2 < _arr.length; _i2++) {
                                    var type2 = _arr[_i2];
                                    nodeResult[type2] = nodeResult[type2].map((function(_ref8) {
                                        var relatedNodes = _ref8.relatedNodes, checkResult = _objectWithoutProperties(_ref8, _excluded2);
                                        checkResult.relatedNodes = relatedNodes.map(nodeSerializer.dqElmToSpec);
                                        return checkResult;
                                    }));
                                }
                                return nodeResult;
                            }));
                        }
                    };
                    var node_serializer_default = nodeSerializer;
                    function cloneLimitedDqElement(dqElm, runOptions) {
                        var fromFrame2 = dqElm.fromFrame;
                        var hasAncestry = runOptions.ancestry, hasXpath = runOptions.xpath;
                        var hasSelectors = false !== runOptions.selectors || fromFrame2;
                        dqElm = new dq_element_default(dqElm.element, runOptions, {
                            source: dqElm.source,
                            nodeIndexes: dqElm.nodeIndexes,
                            selector: hasSelectors ? dqElm.selector : [ ":root" ],
                            ancestry: hasAncestry ? dqElm.ancestry : [ ":root" ],
                            xpath: hasXpath ? dqElm.xpath : "/"
                        });
                        dqElm.fromFrame = fromFrame2;
                        return dqElm;
                    }
                    function getAllChecks(object) {
                        var result = [];
                        return result.concat(object.any || []).concat(object.all || []).concat(object.none || []);
                    }
                    var get_all_checks_default = getAllChecks;
                    function findBy(array, key, value) {
                        if (Array.isArray(array)) return array.find((function(obj) {
                            return null !== obj && "object" === _typeof(obj) && Object.hasOwn(obj, key) && obj[key] === value;
                        }));
                    }
                    var find_by_default = findBy;
                    function pushFrame(resultSet, options, frameSpec) {
                        resultSet.forEach((function(res) {
                            res.node = node_serializer_default.mergeSpecs(res.node, frameSpec);
                            var checks = get_all_checks_default(res);
                            checks.forEach((function(check) {
                                check.relatedNodes = check.relatedNodes.map((function(node) {
                                    return node_serializer_default.mergeSpecs(node, frameSpec);
                                }));
                            }));
                        }));
                    }
                    function spliceNodes(target, to2) {
                        var firstFromFrame = to2[0].node;
                        var node;
                        for (var _i3 = 0; _i3 < target.length; _i3++) {
                            node = target[_i3].node;
                            var resultSort = nodeIndexSort(node.nodeIndexes, firstFromFrame.nodeIndexes);
                            if (resultSort > 0 || 0 === resultSort && firstFromFrame.selector.length < node.selector.length) {
                                target.splice.apply(target, [ _i3, 0 ].concat(_toConsumableArray(to2)));
                                return;
                            }
                        }
                        target.push.apply(target, _toConsumableArray(to2));
                    }
                    function normalizeResult(result) {
                        if (!result || !result.results) return null;
                        if (!Array.isArray(result.results)) return [ result.results ];
                        if (!result.results.length) return null;
                        return result.results;
                    }
                    function mergeResults(frameResults, options) {
                        var mergedResult = [];
                        frameResults.forEach((function(frameResult) {
                            var results = normalizeResult(frameResult);
                            if (!results || !results.length) return;
                            var frameSpec = getFrameSpec(frameResult);
                            results.forEach((function(ruleResult) {
                                if (ruleResult.nodes && frameSpec) pushFrame(ruleResult.nodes, options, frameSpec);
                                var res = find_by_default(mergedResult, "id", ruleResult.id);
                                if (!res) mergedResult.push(ruleResult); else if (ruleResult.nodes.length) spliceNodes(res.nodes, ruleResult.nodes);
                            }));
                        }));
                        mergedResult.forEach((function(result) {
                            if (result.nodes) result.nodes.sort((function(nodeA, nodeB) {
                                return nodeIndexSort(nodeA.node.nodeIndexes, nodeB.node.nodeIndexes);
                            }));
                        }));
                        return mergedResult;
                    }
                    function nodeIndexSort() {
                        var nodeIndexesA = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
                        var nodeIndexesB = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
                        var length = Math.max(null === nodeIndexesA || void 0 === nodeIndexesA ? void 0 : nodeIndexesA.length, null === nodeIndexesB || void 0 === nodeIndexesB ? void 0 : nodeIndexesB.length);
                        for (var _i4 = 0; _i4 < length; _i4++) {
                            var indexA = null === nodeIndexesA || void 0 === nodeIndexesA ? void 0 : nodeIndexesA[_i4];
                            var indexB = null === nodeIndexesB || void 0 === nodeIndexesB ? void 0 : nodeIndexesB[_i4];
                            if ("number" !== typeof indexA || isNaN(indexA)) return 0 === _i4 ? 1 : -1;
                            if ("number" !== typeof indexB || isNaN(indexB)) return 0 === _i4 ? -1 : 1;
                            if (indexA !== indexB) return indexA - indexB;
                        }
                        return 0;
                    }
                    var merge_results_default = mergeResults;
                    function getFrameSpec(frameResult) {
                        if (frameResult.frameElement) return node_serializer_default.toSpec(frameResult.frameElement); else if (frameResult.frameSpec) return frameResult.frameSpec;
                        return null;
                    }
                    function _collectResultsFromFrames(parentContent, options, command, parameter, resolve, reject) {
                        options = _extends({}, options, {
                            elementRef: false
                        });
                        var q = queue_default();
                        var frames = parentContent.frames;
                        frames.forEach((function(_ref9) {
                            var frameElement = _ref9.node, context = _objectWithoutProperties(_ref9, _excluded3);
                            q.defer((function(res, rej) {
                                var params = {
                                    options,
                                    command,
                                    parameter,
                                    context
                                };
                                function callback(results) {
                                    if (!results) return res(null);
                                    return res({
                                        results,
                                        frameElement
                                    });
                                }
                                _sendCommandToFrame(frameElement, params, callback, rej);
                            }));
                        }));
                        q.then((function(data) {
                            resolve(merge_results_default(data, options));
                        }))["catch"](reject);
                    }
                    function _contains(vNode, otherVNode) {
                        if (!vNode.shadowId && !otherVNode.shadowId && vNode.actualNode && "function" === typeof vNode.actualNode.contains) return vNode.actualNode.contains(otherVNode.actualNode);
                        do {
                            if (vNode === otherVNode) return true; else if (otherVNode.nodeIndex < vNode.nodeIndex) return false;
                            otherVNode = otherVNode.parent;
                        } while (otherVNode);
                        return false;
                    }
                    function deepMerge() {
                        var target = {};
                        for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) sources[_key] = arguments[_key];
                        sources.forEach((function(source) {
                            if (!source || "object" !== _typeof(source) || Array.isArray(source)) return;
                            for (var _i5 = 0, _Object$keys = Object.keys(source); _i5 < _Object$keys.length; _i5++) {
                                var key = _Object$keys[_i5];
                                if (!target.hasOwnProperty(key) || "object" !== _typeof(source[key]) || Array.isArray(target[key])) target[key] = source[key]; else target[key] = deepMerge(target[key], source[key]);
                            }
                        }));
                        return target;
                    }
                    var deep_merge_default = deepMerge;
                    function extendMetaData(to2, from) {
                        Object.assign(to2, from);
                        Object.keys(from).filter((function(prop) {
                            return "function" === typeof from[prop];
                        })).forEach((function(prop) {
                            to2[prop] = null;
                            try {
                                to2[prop] = from[prop](to2);
                            } catch (_unused2) {}
                        }));
                    }
                    var extend_meta_data_default = extendMetaData;
                    var possibleShadowRoots = [ "article", "aside", "blockquote", "body", "div", "footer", "h1", "h2", "h3", "h4", "h5", "h6", "header", "main", "nav", "p", "section", "span" ];
                    function isShadowRoot(node) {
                        if (node.shadowRoot) {
                            var nodeName2 = node.nodeName.toLowerCase();
                            if (possibleShadowRoots.includes(nodeName2) || /^[a-z][a-z0-9_.-]*-[a-z0-9_.-]*$/.test(nodeName2)) return true;
                        }
                        return false;
                    }
                    var is_shadow_root_default = isShadowRoot;
                    var dom_exports = {};
                    __export(dom_exports, {
                        createGrid: function() {
                            return _createGrid;
                        },
                        findElmsInContext: function() {
                            return find_elms_in_context_default;
                        },
                        findNearbyElms: function() {
                            return _findNearbyElms;
                        },
                        findUp: function() {
                            return find_up_default;
                        },
                        findUpVirtual: function() {
                            return find_up_virtual_default;
                        },
                        focusDisabled: function() {
                            return focus_disabled_default;
                        },
                        getComposedParent: function() {
                            return get_composed_parent_default;
                        },
                        getElementByReference: function() {
                            return get_element_by_reference_default;
                        },
                        getElementCoordinates: function() {
                            return get_element_coordinates_default;
                        },
                        getElementStack: function() {
                            return get_element_stack_default;
                        },
                        getModalDialog: function() {
                            return get_modal_dialog_default;
                        },
                        getOverflowHiddenAncestors: function() {
                            return get_overflow_hidden_ancestors_default;
                        },
                        getRootNode: function() {
                            return get_root_node_default2;
                        },
                        getScrollOffset: function() {
                            return get_scroll_offset_default;
                        },
                        getTabbableElements: function() {
                            return get_tabbable_elements_default;
                        },
                        getTargetRects: function() {
                            return get_target_rects_default;
                        },
                        getTargetSize: function() {
                            return get_target_size_default;
                        },
                        getTextElementStack: function() {
                            return get_text_element_stack_default;
                        },
                        getViewportSize: function() {
                            return get_viewport_size_default;
                        },
                        getVisibleChildTextRects: function() {
                            return get_visible_child_text_rects_default;
                        },
                        hasContent: function() {
                            return has_content_default;
                        },
                        hasContentVirtual: function() {
                            return has_content_virtual_default;
                        },
                        hasLangText: function() {
                            return _hasLangText;
                        },
                        idrefs: function() {
                            return idrefs_default;
                        },
                        insertedIntoFocusOrder: function() {
                            return inserted_into_focus_order_default;
                        },
                        isCurrentPageLink: function() {
                            return _isCurrentPageLink;
                        },
                        isFocusable: function() {
                            return _isFocusable;
                        },
                        isHTML5: function() {
                            return is_html5_default;
                        },
                        isHiddenForEveryone: function() {
                            return _isHiddenForEveryone;
                        },
                        isHiddenWithCSS: function() {
                            return is_hidden_with_css_default;
                        },
                        isInTabOrder: function() {
                            return _isInTabOrder;
                        },
                        isInTextBlock: function() {
                            return is_in_text_block_default;
                        },
                        isInert: function() {
                            return _isInert;
                        },
                        isModalOpen: function() {
                            return is_modal_open_default;
                        },
                        isMultiline: function() {
                            return _isMultiline;
                        },
                        isNativelyFocusable: function() {
                            return is_natively_focusable_default;
                        },
                        isNode: function() {
                            return is_node_default;
                        },
                        isOffscreen: function() {
                            return is_offscreen_default;
                        },
                        isOpaque: function() {
                            return is_opaque_default;
                        },
                        isSkipLink: function() {
                            return _isSkipLink;
                        },
                        isVisible: function() {
                            return is_visible_default;
                        },
                        isVisibleOnScreen: function() {
                            return _isVisibleOnScreen;
                        },
                        isVisibleToScreenReaders: function() {
                            return _isVisibleToScreenReaders;
                        },
                        isVisualContent: function() {
                            return is_visual_content_default;
                        },
                        reduceToElementsBelowFloating: function() {
                            return reduce_to_elements_below_floating_default;
                        },
                        shadowElementsFromPoint: function() {
                            return shadow_elements_from_point_default;
                        },
                        urlPropsFromAttribute: function() {
                            return url_props_from_attribute_default;
                        },
                        visuallyContains: function() {
                            return _visuallyContains;
                        },
                        visuallyOverlaps: function() {
                            return visually_overlaps_default;
                        },
                        visuallySort: function() {
                            return _visuallySort;
                        }
                    });
                    function getRootNode(node) {
                        var doc = node.getRootNode && node.getRootNode() || document;
                        if (doc === node) doc = document;
                        return doc;
                    }
                    var get_root_node_default = getRootNode;
                    var get_root_node_default2 = get_root_node_default;
                    function findElmsInContext(_ref10) {
                        var context = _ref10.context, value = _ref10.value, attr = _ref10.attr, _ref10$elm = _ref10.elm, elm = void 0 === _ref10$elm ? "" : _ref10$elm;
                        var root;
                        var escapedValue = escape_selector_default(value);
                        if (9 === context.nodeType || 11 === context.nodeType) root = context; else root = get_root_node_default2(context);
                        return Array.from(root.querySelectorAll(elm + "[" + attr + "=" + escapedValue + "]"));
                    }
                    var find_elms_in_context_default = findElmsInContext;
                    function findUpVirtual(element, target) {
                        var parent;
                        parent = element.actualNode;
                        if (!element.shadowId && "function" === typeof element.actualNode.closest) {
                            var match = element.actualNode.closest(target);
                            if (match) return match;
                            return null;
                        }
                        do {
                            parent = parent.assignedSlot ? parent.assignedSlot : parent.parentNode;
                            if (parent && 11 === parent.nodeType) parent = parent.host;
                        } while (parent && !element_matches_default(parent, target) && parent !== document.documentElement);
                        if (!parent) return null;
                        if (!element_matches_default(parent, target)) return null;
                        return parent;
                    }
                    var find_up_virtual_default = findUpVirtual;
                    function findUp(element, target) {
                        return find_up_virtual_default(get_node_from_tree_default(element), target);
                    }
                    var find_up_default = findUp;
                    function _rectsOverlap(rect1, rect2) {
                        return (0 | rect1.left) < (0 | rect2.right) && (0 | rect1.right) > (0 | rect2.left) && (0 | rect1.top) < (0 | rect2.bottom) && (0 | rect1.bottom) > (0 | rect2.top);
                    }
                    var getOverflowHiddenAncestors = memoize_default((function(vNode) {
                        var ancestors = [];
                        if (!vNode) return ancestors;
                        var overflow = vNode.getComputedStylePropertyValue("overflow");
                        if ("hidden" === overflow) ancestors.push(vNode);
                        return ancestors.concat(getOverflowHiddenAncestors(vNode.parent));
                    }));
                    var get_overflow_hidden_ancestors_default = getOverflowHiddenAncestors;
                    var clipRegex = /rect\s*\(([0-9]+)px,?\s*([0-9]+)px,?\s*([0-9]+)px,?\s*([0-9]+)px\s*\)/;
                    var clipPathRegex = /(\w+)\((\d+)/;
                    function nativelyHidden(vNode) {
                        return [ "style", "script", "noscript", "template" ].includes(vNode.props.nodeName);
                    }
                    function displayHidden(vNode) {
                        if ("area" === vNode.props.nodeName) return false;
                        return "none" === vNode.getComputedStylePropertyValue("display");
                    }
                    function visibilityHidden(vNode) {
                        var _ref11 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, isAncestor = _ref11.isAncestor;
                        return !isAncestor && [ "hidden", "collapse" ].includes(vNode.getComputedStylePropertyValue("visibility"));
                    }
                    function contentVisibiltyHidden(vNode) {
                        var _ref12 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, isAncestor = _ref12.isAncestor;
                        return !!isAncestor && "hidden" === vNode.getComputedStylePropertyValue("content-visibility");
                    }
                    function ariaHidden(vNode) {
                        return "true" === vNode.attr("aria-hidden");
                    }
                    function opacityHidden(vNode) {
                        return "0" === vNode.getComputedStylePropertyValue("opacity");
                    }
                    function scrollHidden(vNode) {
                        var scroll = get_scroll_default(vNode.actualNode);
                        var elHeight = parseInt(vNode.getComputedStylePropertyValue("height"));
                        var elWidth = parseInt(vNode.getComputedStylePropertyValue("width"));
                        return !!scroll && (0 === elHeight || 0 === elWidth);
                    }
                    function overflowHidden(vNode) {
                        var _ref13 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, isAncestor = _ref13.isAncestor;
                        if (isAncestor) return false;
                        var position = vNode.getComputedStylePropertyValue("position");
                        if ("fixed" === position) return false;
                        var nodes = get_overflow_hidden_ancestors_default(vNode);
                        if (!nodes.length) return false;
                        var rect = vNode.boundingClientRect;
                        return nodes.some((function(node) {
                            if ("absolute" === position && !hasPositionedAncestorBetween(vNode, node) && "static" === node.getComputedStylePropertyValue("position")) return false;
                            var nodeRect = node.boundingClientRect;
                            if (nodeRect.width < 2 || nodeRect.height < 2) return true;
                            return !_rectsOverlap(rect, nodeRect);
                        }));
                    }
                    function clipHidden(vNode) {
                        var matchesClip = vNode.getComputedStylePropertyValue("clip").match(clipRegex);
                        var matchesClipPath = vNode.getComputedStylePropertyValue("clip-path").match(clipPathRegex);
                        if (matchesClip && 5 === matchesClip.length) {
                            var position = vNode.getComputedStylePropertyValue("position");
                            if ([ "fixed", "absolute" ].includes(position)) return matchesClip[3] - matchesClip[1] <= 0 && matchesClip[2] - matchesClip[4] <= 0;
                        }
                        if (matchesClipPath) {
                            var type2 = matchesClipPath[1];
                            var value = parseInt(matchesClipPath[2], 10);
                            switch (type2) {
                              case "inset":
                                return value >= 50;

                              case "circle":
                                return 0 === value;

                              default:
                            }
                        }
                        return false;
                    }
                    function areaHidden(vNode, visibleFunction) {
                        var mapEl = closest_default(vNode, "map");
                        if (!mapEl) return true;
                        var mapElName = mapEl.attr("name");
                        if (!mapElName) return true;
                        var mapElRootNode = get_root_node_default(vNode.actualNode);
                        if (!mapElRootNode || 9 !== mapElRootNode.nodeType) return true;
                        var refs = query_selector_all_default(axe._tree, 'img[usemap="#'.concat(escape_selector_default(mapElName), '"]'));
                        if (!refs || !refs.length) return true;
                        return refs.some((function(ref) {
                            return !visibleFunction(ref);
                        }));
                    }
                    function detailsHidden(vNode) {
                        var _vNode$parent;
                        if ("details" !== (null === (_vNode$parent = vNode.parent) || void 0 === _vNode$parent ? void 0 : _vNode$parent.props.nodeName)) return false;
                        if ("summary" === vNode.props.nodeName) {
                            var firstSummary = vNode.parent.children.find((function(node) {
                                return "summary" === node.props.nodeName;
                            }));
                            if (firstSummary === vNode) return false;
                        }
                        return !vNode.parent.hasAttr("open");
                    }
                    function hasPositionedAncestorBetween(child, ancestor) {
                        var node = child.parent;
                        while (node && node !== ancestor) {
                            if ([ "relative", "sticky" ].includes(node.getComputedStylePropertyValue("position"))) return true;
                            node = node.parent;
                        }
                        return false;
                    }
                    var hiddenMethods = [ displayHidden, visibilityHidden, contentVisibiltyHidden, detailsHidden ];
                    function _isHiddenForEveryone(vNode) {
                        var _ref14 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, skipAncestors = _ref14.skipAncestors, _ref14$isAncestor = _ref14.isAncestor, isAncestor = void 0 === _ref14$isAncestor ? false : _ref14$isAncestor;
                        vNode = _nodeLookup(vNode).vNode;
                        if (skipAncestors) return isHiddenSelf(vNode, isAncestor);
                        return isHiddenAncestors(vNode, isAncestor);
                    }
                    var isHiddenSelf = memoize_default((function(vNode, isAncestor) {
                        if (nativelyHidden(vNode)) return true;
                        if (!vNode.actualNode) return false;
                        if (hiddenMethods.some((function(method) {
                            return method(vNode, {
                                isAncestor
                            });
                        }))) return true;
                        if (!vNode.actualNode.isConnected) return true;
                        return false;
                    }));
                    var isHiddenAncestors = memoize_default((function(vNode, isAncestor) {
                        if (isHiddenSelf(vNode, isAncestor)) return true;
                        if (!vNode.parent) return false;
                        return isHiddenAncestors(vNode.parent, true);
                    }));
                    function getComposedParent(element) {
                        if (element.assignedSlot) return getComposedParent(element.assignedSlot); else if (element.parentNode) {
                            var parentNode = element.parentNode;
                            if (1 === parentNode.nodeType) return parentNode; else if (parentNode.host) return parentNode.host;
                        }
                        return null;
                    }
                    var get_composed_parent_default = getComposedParent;
                    function getScrollOffset(element) {
                        if (!element.nodeType && element.document) element = element.document;
                        if (9 === element.nodeType) {
                            var docElement = element.documentElement, body = element.body;
                            return {
                                left: docElement && docElement.scrollLeft || body && body.scrollLeft || 0,
                                top: docElement && docElement.scrollTop || body && body.scrollTop || 0
                            };
                        }
                        return {
                            left: element.scrollLeft,
                            top: element.scrollTop
                        };
                    }
                    var get_scroll_offset_default = getScrollOffset;
                    function getElementCoordinates(element) {
                        var scrollOffset = get_scroll_offset_default(document), xOffset = scrollOffset.left, yOffset = scrollOffset.top, coords = element.getBoundingClientRect();
                        return {
                            top: coords.top + yOffset,
                            right: coords.right + xOffset,
                            bottom: coords.bottom + yOffset,
                            left: coords.left + xOffset,
                            width: coords.right - coords.left,
                            height: coords.bottom - coords.top
                        };
                    }
                    var get_element_coordinates_default = getElementCoordinates;
                    function getViewportSize(win) {
                        var doc = win.document;
                        var docElement = doc.documentElement;
                        if (win.innerWidth) return {
                            width: win.innerWidth,
                            height: win.innerHeight
                        };
                        if (docElement) return {
                            width: docElement.clientWidth,
                            height: docElement.clientHeight
                        };
                        var body = doc.body;
                        return {
                            width: body.clientWidth,
                            height: body.clientHeight
                        };
                    }
                    var get_viewport_size_default = getViewportSize;
                    function noParentScrolled(element, offset) {
                        element = get_composed_parent_default(element);
                        while (element && "html" !== element.nodeName.toLowerCase()) {
                            if (element.scrollTop) {
                                offset += element.scrollTop;
                                if (offset >= 0) return false;
                            }
                            element = get_composed_parent_default(element);
                        }
                        return true;
                    }
                    function isOffscreen(element) {
                        var _ref15 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, isAncestor = _ref15.isAncestor;
                        if (isAncestor) return false;
                        var _nodeLookup2 = _nodeLookup(element), domNode = _nodeLookup2.domNode;
                        if (!domNode) return;
                        var leftBoundary;
                        var docElement = document.documentElement;
                        var styl = window.getComputedStyle(domNode);
                        var dir = window.getComputedStyle(document.body || docElement).getPropertyValue("direction");
                        var coords = get_element_coordinates_default(domNode);
                        if (coords.bottom < 0 && (noParentScrolled(domNode, coords.bottom) || "absolute" === styl.position)) return true;
                        if (0 === coords.left && 0 === coords.right) return false;
                        if ("ltr" === dir) {
                            if (coords.right <= 0) return true;
                        } else {
                            leftBoundary = Math.max(docElement.scrollWidth, get_viewport_size_default(window).width);
                            if (coords.left >= leftBoundary) return true;
                        }
                        return false;
                    }
                    var is_offscreen_default = isOffscreen;
                    var hiddenMethods2 = [ opacityHidden, scrollHidden, overflowHidden, clipHidden, is_offscreen_default ];
                    function _isVisibleOnScreen(vNode) {
                        vNode = _nodeLookup(vNode).vNode;
                        return isVisibleOnScreenVirtual(vNode);
                    }
                    var isVisibleOnScreenVirtual = memoize_default((function(vNode, isAncestor) {
                        if (vNode.actualNode && "area" === vNode.props.nodeName) return !areaHidden(vNode, isVisibleOnScreenVirtual);
                        if (_isHiddenForEveryone(vNode, {
                            skipAncestors: true,
                            isAncestor
                        })) return false;
                        if (vNode.actualNode && hiddenMethods2.some((function(method) {
                            return method(vNode, {
                                isAncestor
                            });
                        }))) return false;
                        if (!vNode.parent) return true;
                        return isVisibleOnScreenVirtual(vNode.parent, true);
                    }));
                    function _getBoundingRect(rectA, rectB) {
                        var top = Math.min(rectA.top, rectB.top);
                        var right = Math.max(rectA.right, rectB.right);
                        var bottom = Math.max(rectA.bottom, rectB.bottom);
                        var left = Math.min(rectA.left, rectB.left);
                        return new window.DOMRect(left, top, right - left, bottom - top);
                    }
                    function _isPointInRect(_ref16, _ref17) {
                        var x = _ref16.x, y = _ref16.y;
                        var top = _ref17.top, right = _ref17.right, bottom = _ref17.bottom, left = _ref17.left;
                        return y >= top && x <= right && y <= bottom && x >= left;
                    }
                    var math_exports = {};
                    __export(math_exports, {
                        getBoundingRect: function() {
                            return _getBoundingRect;
                        },
                        getIntersectionRect: function() {
                            return _getIntersectionRect;
                        },
                        getOffset: function() {
                            return _getOffset;
                        },
                        getRectCenter: function() {
                            return _getRectCenter;
                        },
                        hasVisualOverlap: function() {
                            return _hasVisualOverlap;
                        },
                        isPointInRect: function() {
                            return _isPointInRect;
                        },
                        rectHasMinimumSize: function() {
                            return _rectHasMinimumSize;
                        },
                        rectsOverlap: function() {
                            return _rectsOverlap;
                        },
                        splitRects: function() {
                            return _splitRects;
                        }
                    });
                    function _getIntersectionRect(rect1, rect2) {
                        var leftX = Math.max(rect1.left, rect2.left);
                        var rightX = Math.min(rect1.right, rect2.right);
                        var topY = Math.max(rect1.top, rect2.top);
                        var bottomY = Math.min(rect1.bottom, rect2.bottom);
                        if (leftX >= rightX || topY >= bottomY) return null;
                        return new window.DOMRect(leftX, topY, rightX - leftX, bottomY - topY);
                    }
                    function _getRectCenter(_ref18) {
                        var left = _ref18.left, top = _ref18.top, width = _ref18.width, height = _ref18.height;
                        return new window.DOMPoint(left + width / 2, top + height / 2);
                    }
                    var roundingMargin = .05;
                    function _rectHasMinimumSize(minSize, _ref19) {
                        var width = _ref19.width, height = _ref19.height;
                        return width + roundingMargin >= minSize && height + roundingMargin >= minSize;
                    }
                    function _getOffset(vTarget, vNeighbor) {
                        var minRadiusNeighbour = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 12;
                        var targetRects = get_target_rects_default(vTarget);
                        var neighborRects = get_target_rects_default(vNeighbor);
                        if (!targetRects.length || !neighborRects.length) return null;
                        var targetBoundingBox = targetRects.reduce(_getBoundingRect);
                        var targetCenter = _getRectCenter(targetBoundingBox);
                        var minDistance = 1 / 0;
                        var _step2, _iterator2 = _createForOfIteratorHelper(neighborRects);
                        try {
                            for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                                var rect = _step2.value;
                                if (_isPointInRect(targetCenter, rect)) return 0;
                                var closestPoint = getClosestPoint(targetCenter, rect);
                                var distance2 = pointDistance(targetCenter, closestPoint);
                                minDistance = Math.min(minDistance, distance2);
                            }
                        } catch (err) {
                            _iterator2.e(err);
                        } finally {
                            _iterator2.f();
                        }
                        var neighborTargetSize = get_target_size_default(vNeighbor);
                        if (_rectHasMinimumSize(2 * minRadiusNeighbour, neighborTargetSize)) return minDistance;
                        var neighborBoundingBox = neighborRects.reduce(_getBoundingRect);
                        var neighborCenter = _getRectCenter(neighborBoundingBox);
                        var centerDistance = pointDistance(targetCenter, neighborCenter) - minRadiusNeighbour;
                        return Math.max(0, Math.min(minDistance, centerDistance));
                    }
                    function getClosestPoint(point, rect) {
                        var x;
                        var y;
                        if (point.x < rect.left) x = rect.left; else if (point.x > rect.right) x = rect.right; else x = point.x;
                        if (point.y < rect.top) y = rect.top; else if (point.y > rect.bottom) y = rect.bottom; else y = point.y;
                        return {
                            x,
                            y
                        };
                    }
                    function pointDistance(pointA, pointB) {
                        return Math.hypot(pointA.x - pointB.x, pointA.y - pointB.y);
                    }
                    function _hasVisualOverlap(vNodeA, vNodeB) {
                        var rectA = vNodeA.boundingClientRect;
                        var rectB = vNodeB.boundingClientRect;
                        if (rectA.left >= rectB.right || rectA.right <= rectB.left || rectA.top >= rectB.bottom || rectA.bottom <= rectB.top) return false;
                        return _visuallySort(vNodeA, vNodeB) > 0;
                    }
                    function _splitRects(outerRect, overlapRects) {
                        var uniqueRects = [ outerRect ];
                        var _step3, _iterator3 = _createForOfIteratorHelper(overlapRects);
                        try {
                            var _loop3 = function() {
                                var overlapRect = _step3.value;
                                uniqueRects = uniqueRects.reduce((function(rects, inputRect) {
                                    return rects.concat(splitRect(inputRect, overlapRect));
                                }), []);
                                if (uniqueRects.length > 4e3) throw new Error("splitRects: Too many rects");
                            };
                            for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) _loop3();
                        } catch (err) {
                            _iterator3.e(err);
                        } finally {
                            _iterator3.f();
                        }
                        return uniqueRects;
                    }
                    function splitRect(inputRect, clipRect) {
                        var top = inputRect.top, left = inputRect.left, bottom = inputRect.bottom, right = inputRect.right;
                        var yAligned = top < clipRect.bottom && bottom > clipRect.top;
                        var xAligned = left < clipRect.right && right > clipRect.left;
                        var rects = [];
                        if (between(clipRect.top, top, bottom) && xAligned) rects.push({
                            top,
                            left,
                            bottom: clipRect.top,
                            right
                        });
                        if (between(clipRect.right, left, right) && yAligned) rects.push({
                            top,
                            left: clipRect.right,
                            bottom,
                            right
                        });
                        if (between(clipRect.bottom, top, bottom) && xAligned) rects.push({
                            top: clipRect.bottom,
                            right,
                            bottom,
                            left
                        });
                        if (between(clipRect.left, left, right) && yAligned) rects.push({
                            top,
                            left,
                            bottom,
                            right: clipRect.left
                        });
                        if (0 === rects.length) {
                            if (isEnclosedRect(inputRect, clipRect)) return [];
                            rects.push(inputRect);
                        }
                        return rects.map(computeRect);
                    }
                    var between = function(num, min, max2) {
                        return num > min && num < max2;
                    };
                    function computeRect(baseRect) {
                        return new window.DOMRect(baseRect.left, baseRect.top, baseRect.right - baseRect.left, baseRect.bottom - baseRect.top);
                    }
                    function isEnclosedRect(rectA, rectB) {
                        return rectA.top >= rectB.top && rectA.left >= rectB.left && rectA.bottom <= rectB.bottom && rectA.right <= rectB.right;
                    }
                    var ROOT_LEVEL = 0;
                    var DEFAULT_LEVEL = .1;
                    var FLOAT_LEVEL = .2;
                    var POSITION_LEVEL = .3;
                    var nodeIndex = 0;
                    function _createGrid() {
                        var root = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : document.body;
                        var rootGrid = arguments.length > 1 ? arguments[1] : void 0;
                        var parentVNode = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                        if (cache_default.get("gridCreated") && !parentVNode) return constants_default.gridSize;
                        cache_default.set("gridCreated", true);
                        if (!parentVNode) {
                            var _rootGrid;
                            var vNode = get_node_from_tree_default(document.documentElement);
                            if (!vNode) vNode = new virtual_node_default(document.documentElement);
                            nodeIndex = 0;
                            vNode._stackingOrder = [ createStackingContext(ROOT_LEVEL, nodeIndex++, null) ];
                            null !== (_rootGrid = rootGrid) && void 0 !== _rootGrid ? _rootGrid : rootGrid = new Grid;
                            addNodeToGrid(rootGrid, vNode);
                            if (get_scroll_default(vNode.actualNode)) {
                                var subGrid = new Grid(vNode);
                                vNode._subGrid = subGrid;
                            }
                        }
                        var treeWalker = document.createTreeWalker(root, window.NodeFilter.SHOW_ELEMENT, null, false);
                        var node = parentVNode ? treeWalker.nextNode() : treeWalker.currentNode;
                        while (node) {
                            var _vNode = get_node_from_tree_default(node);
                            if (_vNode && _vNode.parent) parentVNode = _vNode.parent; else if (node.assignedSlot) parentVNode = get_node_from_tree_default(node.assignedSlot); else if (node.parentElement) parentVNode = get_node_from_tree_default(node.parentElement); else if (node.parentNode && get_node_from_tree_default(node.parentNode)) parentVNode = get_node_from_tree_default(node.parentNode);
                            if (!_vNode) _vNode = new axe.VirtualNode(node, parentVNode);
                            _vNode._stackingOrder = createStackingOrder(_vNode, parentVNode, nodeIndex++);
                            var scrollRegionParent = findScrollRegionParent(_vNode, parentVNode);
                            var grid = scrollRegionParent ? scrollRegionParent._subGrid : rootGrid;
                            if (get_scroll_default(_vNode.actualNode)) {
                                var _subGrid = new Grid(_vNode);
                                _vNode._subGrid = _subGrid;
                            }
                            var rect = _vNode.boundingClientRect;
                            if (0 !== rect.width && 0 !== rect.height && _isVisibleOnScreen(node)) addNodeToGrid(grid, _vNode);
                            if (is_shadow_root_default(node)) _createGrid(node.shadowRoot, grid, _vNode);
                            node = treeWalker.nextNode();
                        }
                        return constants_default.gridSize;
                    }
                    function isStackingContext(vNode, parentVNode) {
                        var position = vNode.getComputedStylePropertyValue("position");
                        var zIndex = vNode.getComputedStylePropertyValue("z-index");
                        if ("fixed" === position || "sticky" === position) return true;
                        if ("auto" !== zIndex && "static" !== position) return true;
                        if ("1" !== vNode.getComputedStylePropertyValue("opacity")) return true;
                        var transform = vNode.getComputedStylePropertyValue("-webkit-transform") || vNode.getComputedStylePropertyValue("-ms-transform") || vNode.getComputedStylePropertyValue("transform") || "none";
                        if ("none" !== transform) return true;
                        var mixBlendMode = vNode.getComputedStylePropertyValue("mix-blend-mode");
                        if (mixBlendMode && "normal" !== mixBlendMode) return true;
                        var filter = vNode.getComputedStylePropertyValue("filter");
                        if (filter && "none" !== filter) return true;
                        var perspective = vNode.getComputedStylePropertyValue("perspective");
                        if (perspective && "none" !== perspective) return true;
                        var clipPath = vNode.getComputedStylePropertyValue("clip-path");
                        if (clipPath && "none" !== clipPath) return true;
                        var mask = vNode.getComputedStylePropertyValue("-webkit-mask") || vNode.getComputedStylePropertyValue("mask") || "none";
                        if ("none" !== mask) return true;
                        var maskImage = vNode.getComputedStylePropertyValue("-webkit-mask-image") || vNode.getComputedStylePropertyValue("mask-image") || "none";
                        if ("none" !== maskImage) return true;
                        var maskBorder = vNode.getComputedStylePropertyValue("-webkit-mask-border") || vNode.getComputedStylePropertyValue("mask-border") || "none";
                        if ("none" !== maskBorder) return true;
                        if ("isolate" === vNode.getComputedStylePropertyValue("isolation")) return true;
                        var willChange = vNode.getComputedStylePropertyValue("will-change");
                        if ("transform" === willChange || "opacity" === willChange) return true;
                        if ("touch" === vNode.getComputedStylePropertyValue("-webkit-overflow-scrolling")) return true;
                        var contain = vNode.getComputedStylePropertyValue("contain");
                        if ([ "layout", "paint", "strict", "content" ].includes(contain)) return true;
                        if ("auto" !== zIndex && isFlexOrGridContainer(parentVNode)) return true;
                        return false;
                    }
                    function isFlexOrGridContainer(vNode) {
                        if (!vNode) return false;
                        var display2 = vNode.getComputedStylePropertyValue("display");
                        return [ "flex", "inline-flex", "grid", "inline-grid" ].includes(display2);
                    }
                    function createStackingOrder(vNode, parentVNode, treeOrder) {
                        var stackingOrder = parentVNode._stackingOrder.slice();
                        if (isStackingContext(vNode, parentVNode)) {
                            var index = stackingOrder.findIndex((function(_ref20) {
                                var stackLevel2 = _ref20.stackLevel;
                                return [ ROOT_LEVEL, FLOAT_LEVEL, POSITION_LEVEL ].includes(stackLevel2);
                            }));
                            if (-1 !== index) stackingOrder.splice(index, stackingOrder.length - index);
                        }
                        var stackLevel = getStackLevel(vNode, parentVNode);
                        if (null !== stackLevel) stackingOrder.push(createStackingContext(stackLevel, treeOrder, vNode));
                        return stackingOrder;
                    }
                    function createStackingContext(stackLevel, treeOrder, vNode) {
                        return {
                            stackLevel,
                            treeOrder,
                            vNode
                        };
                    }
                    function getStackLevel(vNode, parentVNode) {
                        var zIndex = getRealZIndex(vNode, parentVNode);
                        if (![ "auto", "0" ].includes(zIndex)) return parseInt(zIndex);
                        if ("static" !== vNode.getComputedStylePropertyValue("position")) return POSITION_LEVEL;
                        if ("none" !== vNode.getComputedStylePropertyValue("float")) return FLOAT_LEVEL;
                        if (isStackingContext(vNode, parentVNode)) return DEFAULT_LEVEL;
                        return null;
                    }
                    function getRealZIndex(vNode, parentVNode) {
                        var position = vNode.getComputedStylePropertyValue("position");
                        if ("static" === position && !isFlexOrGridContainer(parentVNode)) return "auto";
                        return vNode.getComputedStylePropertyValue("z-index");
                    }
                    function findScrollRegionParent(vNode, parentVNode) {
                        var scrollRegionParent = null;
                        var checkedNodes = [ vNode ];
                        while (parentVNode) {
                            if (get_scroll_default(parentVNode.actualNode)) {
                                scrollRegionParent = parentVNode;
                                break;
                            }
                            if (parentVNode._scrollRegionParent) {
                                scrollRegionParent = parentVNode._scrollRegionParent;
                                break;
                            }
                            checkedNodes.push(parentVNode);
                            parentVNode = get_node_from_tree_default(parentVNode.actualNode.parentElement || parentVNode.actualNode.parentNode);
                        }
                        checkedNodes.forEach((function(virtualNode) {
                            return virtualNode._scrollRegionParent = scrollRegionParent;
                        }));
                        return scrollRegionParent;
                    }
                    function addNodeToGrid(grid, vNode) {
                        var overflowHiddenNodes = get_overflow_hidden_ancestors_default(vNode);
                        vNode.clientRects.forEach((function(clientRect) {
                            var _vNode$_grid;
                            var visibleRect = overflowHiddenNodes.reduce((function(rect, overflowNode) {
                                return rect && _getIntersectionRect(rect, overflowNode.boundingClientRect);
                            }), clientRect);
                            if (!visibleRect) return;
                            null !== (_vNode$_grid = vNode._grid) && void 0 !== _vNode$_grid ? _vNode$_grid : vNode._grid = grid;
                            var gridRect = grid.getGridPositionOfRect(visibleRect);
                            grid.loopGridPosition(gridRect, (function(gridCell) {
                                if (!gridCell.includes(vNode)) gridCell.push(vNode);
                            }));
                        }));
                    }
                    var Grid = function() {
                        function Grid() {
                            var container = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                            _classCallCheck(this, Grid);
                            this.container = container;
                            this.cells = [];
                        }
                        return _createClass(Grid, [ {
                            key: "toGridIndex",
                            value: function(num) {
                                return Math.floor(num / constants_default.gridSize);
                            }
                        }, {
                            key: "getCellFromPoint",
                            value: function(_ref21) {
                                var _this$cells, _row;
                                var x = _ref21.x, y = _ref21.y;
                                assert_default(this.boundaries, "Grid does not have cells added");
                                var rowIndex = this.toGridIndex(y);
                                var colIndex = this.toGridIndex(x);
                                assert_default(_isPointInRect({
                                    y: rowIndex,
                                    x: colIndex
                                }, this.boundaries), "Element midpoint exceeds the grid bounds");
                                var row = null !== (_this$cells = this.cells[rowIndex - this.cells._negativeIndex]) && void 0 !== _this$cells ? _this$cells : [];
                                return null !== (_row = row[colIndex - row._negativeIndex]) && void 0 !== _row ? _row : [];
                            }
                        }, {
                            key: "loopGridPosition",
                            value: function(gridPosition, callback) {
                                var _gridPosition = gridPosition, left = _gridPosition.left, right = _gridPosition.right, top = _gridPosition.top, bottom = _gridPosition.bottom;
                                if (this.boundaries) gridPosition = _getBoundingRect(this.boundaries, gridPosition);
                                this.boundaries = gridPosition;
                                loopNegativeIndexMatrix(this.cells, top, bottom, (function(gridRow, row) {
                                    loopNegativeIndexMatrix(gridRow, left, right, (function(gridCell, col) {
                                        callback(gridCell, {
                                            row,
                                            col
                                        });
                                    }));
                                }));
                            }
                        }, {
                            key: "getGridPositionOfRect",
                            value: function(_ref22) {
                                var top = _ref22.top, right = _ref22.right, bottom = _ref22.bottom, left = _ref22.left;
                                var margin = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                                top = this.toGridIndex(top - margin);
                                right = this.toGridIndex(right + margin - 1);
                                bottom = this.toGridIndex(bottom + margin - 1);
                                left = this.toGridIndex(left - margin);
                                return new window.DOMRect(left, top, right - left, bottom - top);
                            }
                        } ]);
                    }();
                    function loopNegativeIndexMatrix(matrix, start, end, callback) {
                        var _matrix$_negativeInde;
                        null !== (_matrix$_negativeInde = matrix._negativeIndex) && void 0 !== _matrix$_negativeInde ? _matrix$_negativeInde : matrix._negativeIndex = 0;
                        if (start < matrix._negativeIndex) {
                            for (var _i6 = 0; _i6 < matrix._negativeIndex - start; _i6++) matrix.splice(0, 0, []);
                            matrix._negativeIndex = start;
                        }
                        var startOffset = start - matrix._negativeIndex;
                        var endOffset = end - matrix._negativeIndex;
                        for (var index = startOffset; index <= endOffset; index++) {
                            var _index, _matrix$_index;
                            null !== (_matrix$_index = matrix[_index = index]) && void 0 !== _matrix$_index ? _matrix$_index : matrix[_index] = [];
                            callback(matrix[index], index + matrix._negativeIndex);
                        }
                    }
                    function _findNearbyElms(vNode) {
                        var _vNode$_grid2;
                        var margin = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                        _createGrid();
                        if (!(null !== (_vNode$_grid2 = vNode._grid) && void 0 !== _vNode$_grid2 && null !== (_vNode$_grid2 = _vNode$_grid2.cells) && void 0 !== _vNode$_grid2 && _vNode$_grid2.length)) return [];
                        var rect = vNode.boundingClientRect;
                        var grid = vNode._grid;
                        var selfIsFixed = hasFixedPosition(vNode);
                        var gridPosition = grid.getGridPositionOfRect(rect, margin);
                        var neighbors = [];
                        grid.loopGridPosition(gridPosition, (function(vNeighbors) {
                            var _step4, _iterator4 = _createForOfIteratorHelper(vNeighbors);
                            try {
                                for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                                    var vNeighbor = _step4.value;
                                    if (vNeighbor && vNeighbor !== vNode && !neighbors.includes(vNeighbor) && selfIsFixed === hasFixedPosition(vNeighbor)) neighbors.push(vNeighbor);
                                }
                            } catch (err) {
                                _iterator4.e(err);
                            } finally {
                                _iterator4.f();
                            }
                        }));
                        return neighbors;
                    }
                    var hasFixedPosition = memoize_default((function(vNode) {
                        if (!vNode) return false;
                        if ("fixed" === vNode.getComputedStylePropertyValue("position")) return true;
                        return hasFixedPosition(vNode.parent);
                    }));
                    var getModalDialog = memoize_default((function() {
                        var _dialogs$find;
                        if (!axe._tree) return null;
                        var dialogs = query_selector_all_filter_default(axe._tree[0], "dialog[open]", (function(vNode) {
                            var rect = vNode.boundingClientRect;
                            var stack = document.elementsFromPoint(rect.left + 1, rect.top + 1);
                            return stack.includes(vNode.actualNode) && _isVisibleOnScreen(vNode);
                        }));
                        if (!dialogs.length) return null;
                        var modalDialog = dialogs.find((function(dialog) {
                            var rect = dialog.boundingClientRect;
                            var stack = document.elementsFromPoint(rect.left - 10, rect.top - 10);
                            return stack.includes(dialog.actualNode);
                        }));
                        if (modalDialog) return modalDialog;
                        return null !== (_dialogs$find = dialogs.find((function(dialog) {
                            var _getNodeFromGrid;
                            var _ref23 = null !== (_getNodeFromGrid = getNodeFromGrid(dialog)) && void 0 !== _getNodeFromGrid ? _getNodeFromGrid : {}, vNode = _ref23.vNode, rect = _ref23.rect;
                            if (!vNode) return false;
                            var stack = document.elementsFromPoint(rect.left + 1, rect.top + 1);
                            return !stack.includes(vNode.actualNode);
                        }))) && void 0 !== _dialogs$find ? _dialogs$find : null;
                    }));
                    var get_modal_dialog_default = getModalDialog;
                    function getNodeFromGrid(dialog) {
                        _createGrid();
                        var grid = axe._tree[0]._grid;
                        var viewRect = new window.DOMRect(0, 0, window.innerWidth, window.innerHeight);
                        if (!grid) return;
                        for (var row = 0; row < grid.cells.length; row++) {
                            var cols = grid.cells[row];
                            if (!cols) continue;
                            for (var col = 0; col < cols.length; col++) {
                                var cells = cols[col];
                                if (!cells) continue;
                                for (var _i7 = 0; _i7 < cells.length; _i7++) {
                                    var vNode = cells[_i7];
                                    var rect = vNode.boundingClientRect;
                                    var intersection = _getIntersectionRect(rect, viewRect);
                                    if ("html" !== vNode.props.nodeName && vNode !== dialog && "none" !== vNode.getComputedStylePropertyValue("pointer-events") && intersection) return {
                                        vNode,
                                        rect: intersection
                                    };
                                }
                            }
                        }
                    }
                    function _isInert(vNode) {
                        var _ref24 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, skipAncestors = _ref24.skipAncestors, isAncestor = _ref24.isAncestor;
                        if (skipAncestors) return isInertSelf(vNode, isAncestor);
                        return isInertAncestors(vNode, isAncestor);
                    }
                    var isInertSelf = memoize_default((function(vNode, isAncestor) {
                        if (vNode.hasAttr("inert")) return true;
                        if (!isAncestor && vNode.actualNode) {
                            var modalDialog = get_modal_dialog_default();
                            if (modalDialog && !_contains(modalDialog, vNode)) return true;
                        }
                        return false;
                    }));
                    var isInertAncestors = memoize_default((function(vNode, isAncestor) {
                        if (isInertSelf(vNode, isAncestor)) return true;
                        if (!vNode.parent) return false;
                        return isInertAncestors(vNode.parent, true);
                    }));
                    var allowedDisabledNodeNames = [ "button", "command", "fieldset", "keygen", "optgroup", "option", "select", "textarea", "input" ];
                    function isDisabledAttrAllowed(nodeName2) {
                        return allowedDisabledNodeNames.includes(nodeName2);
                    }
                    function focusDisabled(el) {
                        var _nodeLookup3 = _nodeLookup(el), vNode = _nodeLookup3.vNode;
                        if (isDisabledAttrAllowed(vNode.props.nodeName) && vNode.hasAttr("disabled") || _isInert(vNode)) return true;
                        var parentNode = vNode.parent;
                        var ancestors = [];
                        var fieldsetDisabled = false;
                        while (parentNode && parentNode.shadowId === vNode.shadowId && !fieldsetDisabled) {
                            ancestors.push(parentNode);
                            if ("legend" === parentNode.props.nodeName) break;
                            if (void 0 !== parentNode._inDisabledFieldset) {
                                fieldsetDisabled = parentNode._inDisabledFieldset;
                                break;
                            }
                            if ("fieldset" === parentNode.props.nodeName && parentNode.hasAttr("disabled")) fieldsetDisabled = true;
                            parentNode = parentNode.parent;
                        }
                        ancestors.forEach((function(ancestor) {
                            return ancestor._inDisabledFieldset = fieldsetDisabled;
                        }));
                        if (fieldsetDisabled) return true;
                        if ("area" !== vNode.props.nodeName) {
                            if (!vNode.actualNode) return false;
                            return _isHiddenForEveryone(vNode);
                        }
                        return false;
                    }
                    var focus_disabled_default = focusDisabled;
                    var angularSkipLinkRegex = /^\/\#/;
                    var angularRouterLinkRegex = /^#[!/]/;
                    function _isCurrentPageLink(anchor) {
                        var _window$location;
                        var href = anchor.getAttribute("href");
                        if (!href || "#" === href) return false;
                        if (angularSkipLinkRegex.test(href)) return true;
                        var hash = anchor.hash, protocol = anchor.protocol, hostname = anchor.hostname, port = anchor.port, pathname = anchor.pathname;
                        if (angularRouterLinkRegex.test(hash)) return false;
                        if ("#" === href.charAt(0)) return true;
                        if ("string" !== typeof (null === (_window$location = window.location) || void 0 === _window$location ? void 0 : _window$location.origin) || -1 === window.location.origin.indexOf("://")) return null;
                        var currentPageUrl = window.location.origin + window.location.pathname;
                        var url;
                        if (!hostname) url = window.location.origin; else url = "".concat(protocol, "//").concat(hostname).concat(port ? ":".concat(port) : "");
                        if (!pathname) url += window.location.pathname; else url += ("/" !== pathname[0] ? "/" : "") + pathname;
                        return url === currentPageUrl;
                    }
                    function getElementByReference(node, attr) {
                        var fragment = node.getAttribute(attr);
                        if (!fragment) return null;
                        if ("href" === attr && !_isCurrentPageLink(node)) return null;
                        if (-1 !== fragment.indexOf("#")) fragment = decodeURIComponent(fragment.substr(fragment.indexOf("#") + 1));
                        var candidate = document.getElementById(fragment);
                        if (candidate) return candidate;
                        candidate = document.getElementsByName(fragment);
                        if (candidate.length) return candidate[0];
                        return null;
                    }
                    var get_element_by_reference_default = getElementByReference;
                    function _visuallySort(a2, b2) {
                        _createGrid();
                        var length = Math.max(a2._stackingOrder.length, b2._stackingOrder.length);
                        for (var _i8 = 0; _i8 < length; _i8++) {
                            if ("undefined" === typeof b2._stackingOrder[_i8]) return -1; else if ("undefined" === typeof a2._stackingOrder[_i8]) return 1;
                            if (b2._stackingOrder[_i8].stackLevel > a2._stackingOrder[_i8].stackLevel) return 1;
                            if (b2._stackingOrder[_i8].stackLevel < a2._stackingOrder[_i8].stackLevel) return -1;
                            if (b2._stackingOrder[_i8].treeOrder !== a2._stackingOrder[_i8].treeOrder) return b2._stackingOrder[_i8].treeOrder - a2._stackingOrder[_i8].treeOrder;
                        }
                        var aNode = a2.actualNode;
                        var bNode = b2.actualNode;
                        if (aNode.getRootNode && aNode.getRootNode() !== bNode.getRootNode()) {
                            var boundaries = [];
                            while (aNode) {
                                boundaries.push({
                                    root: aNode.getRootNode(),
                                    node: aNode
                                });
                                aNode = aNode.getRootNode().host;
                            }
                            while (bNode && !boundaries.find((function(boundary) {
                                return boundary.root === bNode.getRootNode();
                            }))) bNode = bNode.getRootNode().host;
                            aNode = boundaries.find((function(boundary) {
                                return boundary.root === bNode.getRootNode();
                            })).node;
                            if (aNode === bNode) return a2.actualNode.getRootNode() !== aNode.getRootNode() ? -1 : 1;
                        }
                        var _window$Node = window.Node, DOCUMENT_POSITION_FOLLOWING = _window$Node.DOCUMENT_POSITION_FOLLOWING, DOCUMENT_POSITION_CONTAINS = _window$Node.DOCUMENT_POSITION_CONTAINS, DOCUMENT_POSITION_CONTAINED_BY = _window$Node.DOCUMENT_POSITION_CONTAINED_BY;
                        var docPosition = aNode.compareDocumentPosition(bNode);
                        var DOMOrder = docPosition & DOCUMENT_POSITION_FOLLOWING ? 1 : -1;
                        var isDescendant = docPosition & DOCUMENT_POSITION_CONTAINS || docPosition & DOCUMENT_POSITION_CONTAINED_BY;
                        var aPosition = getPositionOrder(a2);
                        var bPosition = getPositionOrder(b2);
                        if (aPosition === bPosition || isDescendant) return DOMOrder;
                        return bPosition - aPosition;
                    }
                    function getPositionOrder(vNode) {
                        if (-1 !== vNode.getComputedStylePropertyValue("display").indexOf("inline")) return 2;
                        if (isFloated(vNode)) return 1;
                        return 0;
                    }
                    function isFloated(vNode) {
                        if (!vNode) return false;
                        if (void 0 !== vNode._isFloated) return vNode._isFloated;
                        var floatStyle = vNode.getComputedStylePropertyValue("float");
                        if ("none" !== floatStyle) {
                            vNode._isFloated = true;
                            return true;
                        }
                        var floated = isFloated(vNode.parent);
                        vNode._isFloated = floated;
                        return floated;
                    }
                    function getRectStack(grid, rect) {
                        var recursed = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;
                        var center = _getRectCenter(rect);
                        var gridCell = grid.getCellFromPoint(center) || [];
                        var floorX = Math.floor(center.x);
                        var floorY = Math.floor(center.y);
                        var stack = gridCell.filter((function(gridCellNode) {
                            return gridCellNode.clientRects.some((function(clientRect) {
                                var rectX = clientRect.left;
                                var rectY = clientRect.top;
                                return floorX < Math.floor(rectX + clientRect.width) && floorX >= Math.floor(rectX) && floorY < Math.floor(rectY + clientRect.height) && floorY >= Math.floor(rectY);
                            }));
                        }));
                        var gridContainer = grid.container;
                        if (gridContainer) stack = getRectStack(gridContainer._grid, gridContainer.boundingClientRect, true).concat(stack);
                        if (!recursed) stack = stack.sort(_visuallySort).map((function(vNode) {
                            return vNode.actualNode;
                        })).concat(document.documentElement).filter((function(node, index, array) {
                            return array.indexOf(node) === index;
                        }));
                        return stack;
                    }
                    function getElementStack(node) {
                        _createGrid();
                        var vNode = get_node_from_tree_default(node);
                        var grid = vNode._grid;
                        if (!grid) return [];
                        return getRectStack(grid, vNode.boundingClientRect);
                    }
                    var get_element_stack_default = getElementStack;
                    function getTabbableElements(virtualNode) {
                        var nodeAndDescendents = query_selector_all_default(virtualNode, "*");
                        var tabbableElements = nodeAndDescendents.filter((function(vNode) {
                            var isFocusable2 = vNode.isFocusable;
                            var tabIndex = vNode.actualNode.getAttribute("tabindex");
                            tabIndex = tabIndex && !isNaN(parseInt(tabIndex, 10)) ? parseInt(tabIndex) : null;
                            return tabIndex ? isFocusable2 && tabIndex >= 0 : isFocusable2;
                        }));
                        return tabbableElements;
                    }
                    var get_tabbable_elements_default = getTabbableElements;
                    function isNativelyFocusable(el) {
                        var _nodeLookup4 = _nodeLookup(el), vNode = _nodeLookup4.vNode;
                        if (!vNode || focus_disabled_default(vNode)) return false;
                        switch (vNode.props.nodeName) {
                          case "a":
                          case "area":
                            if (vNode.hasAttr("href")) return true;
                            break;

                          case "input":
                            return "hidden" !== vNode.props.type;

                          case "textarea":
                          case "select":
                          case "summary":
                          case "button":
                            return true;

                          case "details":
                            return !query_selector_all_default(vNode, "summary").length;
                        }
                        return false;
                    }
                    var is_natively_focusable_default = isNativelyFocusable;
                    function _isFocusable(el) {
                        var _nodeLookup5 = _nodeLookup(el), vNode = _nodeLookup5.vNode;
                        if (1 !== vNode.props.nodeType) return false;
                        if (focus_disabled_default(vNode)) return false; else if (is_natively_focusable_default(vNode)) return true;
                        var tabindex = vNode.attr("tabindex");
                        if (tabindex && !isNaN(parseInt(tabindex, 10))) return true;
                        return false;
                    }
                    function _isInTabOrder(el) {
                        var _nodeLookup6 = _nodeLookup(el), vNode = _nodeLookup6.vNode;
                        if (1 !== vNode.props.nodeType) return false;
                        var tabindex = parseInt(vNode.attr("tabindex", 10));
                        if (tabindex <= -1) return false;
                        return _isFocusable(vNode);
                    }
                    var get_target_rects_default = memoize_default(getTargetRects);
                    function getTargetRects(vNode) {
                        var nodeRect = vNode.boundingClientRect;
                        var overlappingVNodes = _findNearbyElms(vNode).filter((function(vNeighbor) {
                            return _hasVisualOverlap(vNode, vNeighbor) && "none" !== vNeighbor.getComputedStylePropertyValue("pointer-events") && !isDescendantNotInTabOrder(vNode, vNeighbor);
                        }));
                        if (!overlappingVNodes.length) return [ nodeRect ];
                        var obscuringRects = overlappingVNodes.map((function(_ref25) {
                            var rect = _ref25.boundingClientRect;
                            return rect;
                        }));
                        return _splitRects(nodeRect, obscuringRects);
                    }
                    function isDescendantNotInTabOrder(vAncestor, vNode) {
                        return _contains(vAncestor, vNode) && !_isInTabOrder(vNode);
                    }
                    var get_target_size_default = memoize_default(getTargetSize);
                    function getTargetSize(vNode, minSize) {
                        var rects = get_target_rects_default(vNode);
                        return getLargestRect(rects, minSize);
                    }
                    function getLargestRect(rects, minSize) {
                        return rects.reduce((function(rectA, rectB) {
                            var rectAisMinimum = _rectHasMinimumSize(minSize, rectA);
                            var rectBisMinimum = _rectHasMinimumSize(minSize, rectB);
                            if (rectAisMinimum !== rectBisMinimum) return rectAisMinimum ? rectA : rectB;
                            var areaA = rectA.width * rectA.height;
                            var areaB = rectB.width * rectB.height;
                            return areaA > areaB ? rectA : rectB;
                        }));
                    }
                    var text_exports = {};
                    __export(text_exports, {
                        accessibleText: function() {
                            return accessible_text_default;
                        },
                        accessibleTextVirtual: function() {
                            return _accessibleTextVirtual;
                        },
                        autocomplete: function() {
                            return _autocomplete;
                        },
                        formControlValue: function() {
                            return form_control_value_default;
                        },
                        formControlValueMethods: function() {
                            return _formControlValueMethods;
                        },
                        hasUnicode: function() {
                            return has_unicode_default;
                        },
                        isHumanInterpretable: function() {
                            return is_human_interpretable_default;
                        },
                        isIconLigature: function() {
                            return _isIconLigature;
                        },
                        isValidAutocomplete: function() {
                            return is_valid_autocomplete_default;
                        },
                        label: function() {
                            return label_default;
                        },
                        labelText: function() {
                            return label_text_default;
                        },
                        labelVirtual: function() {
                            return label_virtual_default2;
                        },
                        nativeElementType: function() {
                            return native_element_type_default;
                        },
                        nativeTextAlternative: function() {
                            return _nativeTextAlternative;
                        },
                        nativeTextMethods: function() {
                            return native_text_methods_default;
                        },
                        removeUnicode: function() {
                            return remove_unicode_default;
                        },
                        sanitize: function() {
                            return sanitize_default;
                        },
                        subtreeText: function() {
                            return subtree_text_default;
                        },
                        titleText: function() {
                            return title_text_default;
                        },
                        unsupported: function() {
                            return unsupported_default;
                        },
                        visible: function() {
                            return visible_default;
                        },
                        visibleTextNodes: function() {
                            return visible_text_nodes_default;
                        },
                        visibleVirtual: function() {
                            return visible_virtual_default;
                        }
                    });
                    function idrefs(node, attr) {
                        node = node.actualNode || node;
                        try {
                            var doc = get_root_node_default2(node);
                            var result = [];
                            var attrValue = node.getAttribute(attr);
                            if (attrValue) {
                                attrValue = token_list_default(attrValue);
                                for (var index = 0; index < attrValue.length; index++) result.push(doc.getElementById(attrValue[index]));
                            }
                            return result;
                        } catch (_unused3) {
                            throw new TypeError("Cannot resolve id references for non-DOM nodes");
                        }
                    }
                    var idrefs_default = idrefs;
                    function accessibleText(element, context) {
                        var virtualNode = get_node_from_tree_default(element);
                        return _accessibleTextVirtual(virtualNode, context);
                    }
                    var accessible_text_default = accessibleText;
                    function arialabelledbyText(element) {
                        var context = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                        var _nodeLookup7 = _nodeLookup(element), vNode = _nodeLookup7.vNode;
                        if (1 !== (null === vNode || void 0 === vNode ? void 0 : vNode.props.nodeType)) return "";
                        if (1 !== vNode.props.nodeType || context.inLabelledByContext || context.inControlContext || !vNode.attr("aria-labelledby")) return "";
                        var refs = idrefs_default(vNode, "aria-labelledby").filter((function(elm) {
                            return elm;
                        }));
                        return refs.reduce((function(accessibleName, elm) {
                            var accessibleNameAdd = accessible_text_default(elm, _extends({
                                inLabelledByContext: true,
                                startNode: context.startNode || vNode
                            }, context));
                            if (!accessibleName) return accessibleNameAdd; else return "".concat(accessibleName, " ").concat(accessibleNameAdd);
                        }), "");
                    }
                    var arialabelledby_text_default = arialabelledbyText;
                    function _arialabelText(element) {
                        var _nodeLookup8 = _nodeLookup(element), vNode = _nodeLookup8.vNode;
                        if (1 !== (null === vNode || void 0 === vNode ? void 0 : vNode.props.nodeType)) return "";
                        return vNode.attr("aria-label") || "";
                    }
                    var ariaAttrs = {
                        "aria-activedescendant": {
                            type: "idref",
                            allowEmpty: true
                        },
                        "aria-atomic": {
                            type: "boolean",
                            global: true
                        },
                        "aria-autocomplete": {
                            type: "nmtoken",
                            values: [ "inline", "list", "both", "none" ]
                        },
                        "aria-braillelabel": {
                            type: "string",
                            allowEmpty: true,
                            global: true
                        },
                        "aria-brailleroledescription": {
                            type: "string",
                            allowEmpty: true,
                            global: true
                        },
                        "aria-busy": {
                            type: "boolean",
                            global: true
                        },
                        "aria-checked": {
                            type: "nmtoken",
                            values: [ "false", "mixed", "true", "undefined" ]
                        },
                        "aria-colcount": {
                            type: "int",
                            minValue: -1
                        },
                        "aria-colindex": {
                            type: "int",
                            minValue: 1
                        },
                        "aria-colspan": {
                            type: "int",
                            minValue: 1
                        },
                        "aria-controls": {
                            type: "idrefs",
                            allowEmpty: true,
                            global: true
                        },
                        "aria-current": {
                            type: "nmtoken",
                            allowEmpty: true,
                            values: [ "page", "step", "location", "date", "time", "true", "false" ],
                            global: true
                        },
                        "aria-describedby": {
                            type: "idrefs",
                            allowEmpty: true,
                            global: true
                        },
                        "aria-description": {
                            type: "string",
                            allowEmpty: true,
                            global: true
                        },
                        "aria-details": {
                            type: "idref",
                            allowEmpty: true,
                            global: true
                        },
                        "aria-disabled": {
                            type: "boolean",
                            global: true
                        },
                        "aria-dropeffect": {
                            type: "nmtokens",
                            values: [ "copy", "execute", "link", "move", "none", "popup" ],
                            global: true
                        },
                        "aria-errormessage": {
                            type: "idref",
                            allowEmpty: true,
                            global: true
                        },
                        "aria-expanded": {
                            type: "nmtoken",
                            values: [ "true", "false", "undefined" ]
                        },
                        "aria-flowto": {
                            type: "idrefs",
                            allowEmpty: true,
                            global: true
                        },
                        "aria-grabbed": {
                            type: "nmtoken",
                            values: [ "true", "false", "undefined" ],
                            global: true
                        },
                        "aria-haspopup": {
                            type: "nmtoken",
                            allowEmpty: true,
                            values: [ "true", "false", "menu", "listbox", "tree", "grid", "dialog" ],
                            global: true
                        },
                        "aria-hidden": {
                            type: "nmtoken",
                            values: [ "true", "false", "undefined" ],
                            global: true
                        },
                        "aria-invalid": {
                            type: "nmtoken",
                            values: [ "grammar", "false", "spelling", "true" ],
                            global: true
                        },
                        "aria-keyshortcuts": {
                            type: "string",
                            allowEmpty: true,
                            global: true
                        },
                        "aria-label": {
                            type: "string",
                            allowEmpty: true,
                            global: true
                        },
                        "aria-labelledby": {
                            type: "idrefs",
                            allowEmpty: true,
                            global: true
                        },
                        "aria-level": {
                            type: "int",
                            minValue: 1
                        },
                        "aria-live": {
                            type: "nmtoken",
                            values: [ "assertive", "off", "polite" ],
                            global: true
                        },
                        "aria-modal": {
                            type: "boolean"
                        },
                        "aria-multiline": {
                            type: "boolean"
                        },
                        "aria-multiselectable": {
                            type: "boolean"
                        },
                        "aria-orientation": {
                            type: "nmtoken",
                            values: [ "horizontal", "undefined", "vertical" ]
                        },
                        "aria-owns": {
                            type: "idrefs",
                            allowEmpty: true,
                            global: true
                        },
                        "aria-placeholder": {
                            type: "string",
                            allowEmpty: true
                        },
                        "aria-posinset": {
                            type: "int",
                            minValue: 1
                        },
                        "aria-pressed": {
                            type: "nmtoken",
                            values: [ "false", "mixed", "true", "undefined" ]
                        },
                        "aria-readonly": {
                            type: "boolean"
                        },
                        "aria-relevant": {
                            type: "nmtokens",
                            values: [ "additions", "all", "removals", "text" ],
                            global: true
                        },
                        "aria-required": {
                            type: "boolean"
                        },
                        "aria-roledescription": {
                            type: "string",
                            allowEmpty: true,
                            global: true
                        },
                        "aria-rowcount": {
                            type: "int",
                            minValue: -1
                        },
                        "aria-rowindex": {
                            type: "int",
                            minValue: 1
                        },
                        "aria-rowspan": {
                            type: "int",
                            minValue: 0
                        },
                        "aria-selected": {
                            type: "nmtoken",
                            values: [ "false", "true", "undefined" ]
                        },
                        "aria-setsize": {
                            type: "int",
                            minValue: -1
                        },
                        "aria-sort": {
                            type: "nmtoken",
                            values: [ "ascending", "descending", "none", "other" ]
                        },
                        "aria-valuemax": {
                            type: "decimal"
                        },
                        "aria-valuemin": {
                            type: "decimal"
                        },
                        "aria-valuenow": {
                            type: "decimal"
                        },
                        "aria-valuetext": {
                            type: "string",
                            allowEmpty: true
                        }
                    };
                    var aria_attrs_default = ariaAttrs;
                    var ariaRoles = {
                        alert: {
                            type: "structure",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "section" ]
                        },
                        alertdialog: {
                            type: "window",
                            allowedAttrs: [ "aria-expanded", "aria-modal" ],
                            superclassRole: [ "alert", "dialog" ],
                            accessibleNameRequired: true
                        },
                        application: {
                            type: "landmark",
                            allowedAttrs: [ "aria-activedescendant", "aria-expanded" ],
                            superclassRole: [ "structure" ],
                            accessibleNameRequired: true
                        },
                        article: {
                            type: "structure",
                            allowedAttrs: [ "aria-posinset", "aria-setsize", "aria-expanded" ],
                            superclassRole: [ "document" ]
                        },
                        banner: {
                            type: "landmark",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "landmark" ]
                        },
                        blockquote: {
                            type: "structure",
                            superclassRole: [ "section" ]
                        },
                        button: {
                            type: "widget",
                            allowedAttrs: [ "aria-expanded", "aria-pressed" ],
                            superclassRole: [ "command" ],
                            accessibleNameRequired: true,
                            nameFromContent: true,
                            childrenPresentational: true
                        },
                        caption: {
                            type: "structure",
                            requiredContext: [ "figure", "table", "grid", "treegrid" ],
                            superclassRole: [ "section" ],
                            prohibitedAttrs: [ "aria-label", "aria-labelledby" ]
                        },
                        cell: {
                            type: "structure",
                            requiredContext: [ "row" ],
                            allowedAttrs: [ "aria-colindex", "aria-colspan", "aria-rowindex", "aria-rowspan", "aria-expanded" ],
                            superclassRole: [ "section" ],
                            nameFromContent: true
                        },
                        checkbox: {
                            type: "widget",
                            requiredAttrs: [ "aria-checked" ],
                            allowedAttrs: [ "aria-readonly", "aria-expanded", "aria-required" ],
                            superclassRole: [ "input" ],
                            accessibleNameRequired: true,
                            nameFromContent: true,
                            childrenPresentational: true
                        },
                        code: {
                            type: "structure",
                            superclassRole: [ "section" ],
                            prohibitedAttrs: [ "aria-label", "aria-labelledby" ]
                        },
                        columnheader: {
                            type: "structure",
                            requiredContext: [ "row" ],
                            allowedAttrs: [ "aria-sort", "aria-colindex", "aria-colspan", "aria-expanded", "aria-readonly", "aria-required", "aria-rowindex", "aria-rowspan", "aria-selected" ],
                            superclassRole: [ "cell", "gridcell", "sectionhead" ],
                            accessibleNameRequired: false,
                            nameFromContent: true
                        },
                        combobox: {
                            type: "widget",
                            requiredAttrs: [ "aria-expanded", "aria-controls" ],
                            allowedAttrs: [ "aria-owns", "aria-autocomplete", "aria-readonly", "aria-required", "aria-activedescendant", "aria-orientation" ],
                            superclassRole: [ "select" ],
                            accessibleNameRequired: true
                        },
                        command: {
                            type: "abstract",
                            superclassRole: [ "widget" ]
                        },
                        complementary: {
                            type: "landmark",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "landmark" ]
                        },
                        composite: {
                            type: "abstract",
                            superclassRole: [ "widget" ]
                        },
                        contentinfo: {
                            type: "landmark",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "landmark" ]
                        },
                        comment: {
                            type: "structure",
                            allowedAttrs: [ "aria-level", "aria-posinset", "aria-setsize" ],
                            superclassRole: [ "article" ]
                        },
                        definition: {
                            type: "structure",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "section" ]
                        },
                        deletion: {
                            type: "structure",
                            superclassRole: [ "section" ],
                            prohibitedAttrs: [ "aria-label", "aria-labelledby" ]
                        },
                        dialog: {
                            type: "window",
                            allowedAttrs: [ "aria-expanded", "aria-modal" ],
                            superclassRole: [ "window" ],
                            accessibleNameRequired: true
                        },
                        directory: {
                            type: "structure",
                            deprecated: true,
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "list" ],
                            nameFromContent: true
                        },
                        document: {
                            type: "structure",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "structure" ]
                        },
                        emphasis: {
                            type: "structure",
                            superclassRole: [ "section" ],
                            prohibitedAttrs: [ "aria-label", "aria-labelledby" ]
                        },
                        feed: {
                            type: "structure",
                            requiredOwned: [ "article" ],
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "list" ]
                        },
                        figure: {
                            type: "structure",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "section" ],
                            nameFromContent: true
                        },
                        form: {
                            type: "landmark",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "landmark" ]
                        },
                        grid: {
                            type: "composite",
                            requiredOwned: [ "rowgroup", "row" ],
                            allowedAttrs: [ "aria-level", "aria-multiselectable", "aria-readonly", "aria-activedescendant", "aria-colcount", "aria-expanded", "aria-rowcount" ],
                            superclassRole: [ "composite", "table" ],
                            accessibleNameRequired: false
                        },
                        gridcell: {
                            type: "widget",
                            requiredContext: [ "row" ],
                            allowedAttrs: [ "aria-readonly", "aria-required", "aria-selected", "aria-colindex", "aria-colspan", "aria-expanded", "aria-rowindex", "aria-rowspan" ],
                            superclassRole: [ "cell", "widget" ],
                            nameFromContent: true
                        },
                        group: {
                            type: "structure",
                            allowedAttrs: [ "aria-activedescendant", "aria-expanded" ],
                            superclassRole: [ "section" ]
                        },
                        heading: {
                            type: "structure",
                            requiredAttrs: [ "aria-level" ],
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "sectionhead" ],
                            accessibleNameRequired: false,
                            nameFromContent: true
                        },
                        img: {
                            type: "structure",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "section" ],
                            accessibleNameRequired: true,
                            childrenPresentational: true
                        },
                        input: {
                            type: "abstract",
                            superclassRole: [ "widget" ]
                        },
                        insertion: {
                            type: "structure",
                            superclassRole: [ "section" ],
                            prohibitedAttrs: [ "aria-label", "aria-labelledby" ]
                        },
                        landmark: {
                            type: "abstract",
                            superclassRole: [ "section" ]
                        },
                        link: {
                            type: "widget",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "command" ],
                            accessibleNameRequired: true,
                            nameFromContent: true
                        },
                        list: {
                            type: "structure",
                            requiredOwned: [ "listitem" ],
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "section" ]
                        },
                        listbox: {
                            type: "widget",
                            requiredOwned: [ "group", "option" ],
                            allowedAttrs: [ "aria-multiselectable", "aria-readonly", "aria-required", "aria-activedescendant", "aria-expanded", "aria-orientation" ],
                            superclassRole: [ "select" ],
                            accessibleNameRequired: true
                        },
                        listitem: {
                            type: "structure",
                            requiredContext: [ "list" ],
                            allowedAttrs: [ "aria-level", "aria-posinset", "aria-setsize", "aria-expanded" ],
                            superclassRole: [ "section" ],
                            nameFromContent: true
                        },
                        log: {
                            type: "structure",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "section" ]
                        },
                        main: {
                            type: "landmark",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "landmark" ]
                        },
                        marquee: {
                            type: "structure",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "section" ]
                        },
                        math: {
                            type: "structure",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "section" ],
                            childrenPresentational: true
                        },
                        menu: {
                            type: "composite",
                            requiredOwned: [ "group", "menuitemradio", "menuitem", "menuitemcheckbox", "menu", "separator" ],
                            allowedAttrs: [ "aria-activedescendant", "aria-expanded", "aria-orientation" ],
                            superclassRole: [ "select" ]
                        },
                        menubar: {
                            type: "composite",
                            requiredOwned: [ "group", "menuitemradio", "menuitem", "menuitemcheckbox", "menu", "separator" ],
                            allowedAttrs: [ "aria-activedescendant", "aria-expanded", "aria-orientation" ],
                            superclassRole: [ "menu" ]
                        },
                        menuitem: {
                            type: "widget",
                            requiredContext: [ "menu", "menubar", "group" ],
                            allowedAttrs: [ "aria-posinset", "aria-setsize", "aria-expanded" ],
                            superclassRole: [ "command" ],
                            accessibleNameRequired: true,
                            nameFromContent: true
                        },
                        menuitemcheckbox: {
                            type: "widget",
                            requiredContext: [ "menu", "menubar", "group" ],
                            requiredAttrs: [ "aria-checked" ],
                            allowedAttrs: [ "aria-expanded", "aria-posinset", "aria-readonly", "aria-setsize" ],
                            superclassRole: [ "checkbox", "menuitem" ],
                            accessibleNameRequired: true,
                            nameFromContent: true,
                            childrenPresentational: true
                        },
                        menuitemradio: {
                            type: "widget",
                            requiredContext: [ "menu", "menubar", "group" ],
                            requiredAttrs: [ "aria-checked" ],
                            allowedAttrs: [ "aria-expanded", "aria-posinset", "aria-readonly", "aria-setsize" ],
                            superclassRole: [ "menuitemcheckbox", "radio" ],
                            accessibleNameRequired: true,
                            nameFromContent: true,
                            childrenPresentational: true
                        },
                        meter: {
                            type: "structure",
                            requiredAttrs: [ "aria-valuenow" ],
                            allowedAttrs: [ "aria-valuemax", "aria-valuemin", "aria-valuetext" ],
                            superclassRole: [ "range" ],
                            accessibleNameRequired: true,
                            childrenPresentational: true
                        },
                        mark: {
                            type: "structure",
                            superclassRole: [ "section" ],
                            prohibitedAttrs: [ "aria-label", "aria-labelledby" ]
                        },
                        navigation: {
                            type: "landmark",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "landmark" ]
                        },
                        none: {
                            type: "structure",
                            superclassRole: [ "structure" ],
                            prohibitedAttrs: [ "aria-label", "aria-labelledby" ]
                        },
                        note: {
                            type: "structure",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "section" ]
                        },
                        option: {
                            type: "widget",
                            requiredContext: [ "group", "listbox" ],
                            allowedAttrs: [ "aria-selected", "aria-checked", "aria-posinset", "aria-setsize" ],
                            superclassRole: [ "input" ],
                            accessibleNameRequired: true,
                            nameFromContent: true,
                            childrenPresentational: true
                        },
                        paragraph: {
                            type: "structure",
                            superclassRole: [ "section" ],
                            prohibitedAttrs: [ "aria-label", "aria-labelledby" ]
                        },
                        presentation: {
                            type: "structure",
                            superclassRole: [ "structure" ],
                            prohibitedAttrs: [ "aria-label", "aria-labelledby" ]
                        },
                        progressbar: {
                            type: "widget",
                            allowedAttrs: [ "aria-expanded", "aria-valuemax", "aria-valuemin", "aria-valuenow", "aria-valuetext" ],
                            superclassRole: [ "range" ],
                            accessibleNameRequired: true,
                            childrenPresentational: true
                        },
                        radio: {
                            type: "widget",
                            requiredAttrs: [ "aria-checked" ],
                            allowedAttrs: [ "aria-posinset", "aria-setsize", "aria-required" ],
                            superclassRole: [ "input" ],
                            accessibleNameRequired: true,
                            nameFromContent: true,
                            childrenPresentational: true
                        },
                        radiogroup: {
                            type: "composite",
                            allowedAttrs: [ "aria-readonly", "aria-required", "aria-activedescendant", "aria-expanded", "aria-orientation" ],
                            superclassRole: [ "select" ],
                            accessibleNameRequired: false
                        },
                        range: {
                            type: "abstract",
                            superclassRole: [ "widget" ]
                        },
                        region: {
                            type: "landmark",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "landmark" ],
                            accessibleNameRequired: false
                        },
                        roletype: {
                            type: "abstract",
                            superclassRole: []
                        },
                        row: {
                            type: "structure",
                            requiredContext: [ "grid", "rowgroup", "table", "treegrid" ],
                            requiredOwned: [ "cell", "columnheader", "gridcell", "rowheader" ],
                            allowedAttrs: [ "aria-colindex", "aria-level", "aria-rowindex", "aria-selected", "aria-activedescendant", "aria-expanded", "aria-posinset", "aria-setsize" ],
                            superclassRole: [ "group", "widget" ],
                            nameFromContent: true
                        },
                        rowgroup: {
                            type: "structure",
                            requiredContext: [ "grid", "table", "treegrid" ],
                            requiredOwned: [ "row" ],
                            superclassRole: [ "structure" ],
                            nameFromContent: true
                        },
                        rowheader: {
                            type: "structure",
                            requiredContext: [ "row" ],
                            allowedAttrs: [ "aria-sort", "aria-colindex", "aria-colspan", "aria-expanded", "aria-readonly", "aria-required", "aria-rowindex", "aria-rowspan", "aria-selected" ],
                            superclassRole: [ "cell", "gridcell", "sectionhead" ],
                            accessibleNameRequired: false,
                            nameFromContent: true
                        },
                        scrollbar: {
                            type: "widget",
                            requiredAttrs: [ "aria-valuenow" ],
                            allowedAttrs: [ "aria-controls", "aria-orientation", "aria-valuemax", "aria-valuemin", "aria-valuetext" ],
                            superclassRole: [ "range" ],
                            childrenPresentational: true
                        },
                        search: {
                            type: "landmark",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "landmark" ]
                        },
                        searchbox: {
                            type: "widget",
                            allowedAttrs: [ "aria-activedescendant", "aria-autocomplete", "aria-multiline", "aria-placeholder", "aria-readonly", "aria-required" ],
                            superclassRole: [ "textbox" ],
                            accessibleNameRequired: true
                        },
                        section: {
                            type: "abstract",
                            superclassRole: [ "structure" ],
                            nameFromContent: true
                        },
                        sectionhead: {
                            type: "abstract",
                            superclassRole: [ "structure" ],
                            nameFromContent: true
                        },
                        select: {
                            type: "abstract",
                            superclassRole: [ "composite", "group" ]
                        },
                        separator: {
                            type: "structure",
                            requiredAttrs: [ "aria-valuenow" ],
                            allowedAttrs: [ "aria-valuemax", "aria-valuemin", "aria-orientation", "aria-valuetext" ],
                            superclassRole: [ "structure", "widget" ],
                            childrenPresentational: true
                        },
                        slider: {
                            type: "widget",
                            requiredAttrs: [ "aria-valuenow" ],
                            allowedAttrs: [ "aria-valuemax", "aria-valuemin", "aria-orientation", "aria-readonly", "aria-required", "aria-valuetext" ],
                            superclassRole: [ "input", "range" ],
                            accessibleNameRequired: true,
                            childrenPresentational: true
                        },
                        spinbutton: {
                            type: "widget",
                            allowedAttrs: [ "aria-valuemax", "aria-valuemin", "aria-readonly", "aria-required", "aria-activedescendant", "aria-valuetext", "aria-valuenow" ],
                            superclassRole: [ "composite", "input", "range" ],
                            accessibleNameRequired: true
                        },
                        status: {
                            type: "structure",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "section" ]
                        },
                        strong: {
                            type: "structure",
                            superclassRole: [ "section" ],
                            prohibitedAttrs: [ "aria-label", "aria-labelledby" ]
                        },
                        structure: {
                            type: "abstract",
                            superclassRole: [ "roletype" ]
                        },
                        subscript: {
                            type: "structure",
                            superclassRole: [ "section" ],
                            prohibitedAttrs: [ "aria-label", "aria-labelledby" ]
                        },
                        superscript: {
                            type: "structure",
                            superclassRole: [ "section" ],
                            prohibitedAttrs: [ "aria-label", "aria-labelledby" ]
                        },
                        switch: {
                            type: "widget",
                            requiredAttrs: [ "aria-checked" ],
                            allowedAttrs: [ "aria-expanded", "aria-readonly", "aria-required" ],
                            superclassRole: [ "checkbox" ],
                            accessibleNameRequired: true,
                            nameFromContent: true,
                            childrenPresentational: true
                        },
                        suggestion: {
                            type: "structure",
                            requiredOwned: [ "insertion", "deletion" ],
                            superclassRole: [ "section" ],
                            prohibitedAttrs: [ "aria-label", "aria-labelledby" ]
                        },
                        tab: {
                            type: "widget",
                            requiredContext: [ "tablist" ],
                            allowedAttrs: [ "aria-posinset", "aria-selected", "aria-setsize", "aria-expanded" ],
                            superclassRole: [ "sectionhead", "widget" ],
                            nameFromContent: true,
                            childrenPresentational: true
                        },
                        table: {
                            type: "structure",
                            requiredOwned: [ "rowgroup", "row" ],
                            allowedAttrs: [ "aria-colcount", "aria-rowcount", "aria-expanded" ],
                            superclassRole: [ "section" ],
                            accessibleNameRequired: false,
                            nameFromContent: true
                        },
                        tablist: {
                            type: "composite",
                            requiredOwned: [ "tab" ],
                            allowedAttrs: [ "aria-level", "aria-multiselectable", "aria-orientation", "aria-activedescendant", "aria-expanded" ],
                            superclassRole: [ "composite" ]
                        },
                        tabpanel: {
                            type: "widget",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "section" ],
                            accessibleNameRequired: false
                        },
                        term: {
                            type: "structure",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "section" ],
                            nameFromContent: true
                        },
                        text: {
                            type: "structure",
                            superclassRole: [ "section" ],
                            nameFromContent: true
                        },
                        textbox: {
                            type: "widget",
                            allowedAttrs: [ "aria-activedescendant", "aria-autocomplete", "aria-multiline", "aria-placeholder", "aria-readonly", "aria-required" ],
                            superclassRole: [ "input" ],
                            accessibleNameRequired: true
                        },
                        time: {
                            type: "structure",
                            superclassRole: [ "section" ]
                        },
                        timer: {
                            type: "structure",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "status" ]
                        },
                        toolbar: {
                            type: "structure",
                            allowedAttrs: [ "aria-orientation", "aria-activedescendant", "aria-expanded" ],
                            superclassRole: [ "group" ],
                            accessibleNameRequired: true
                        },
                        tooltip: {
                            type: "structure",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "section" ],
                            nameFromContent: true
                        },
                        tree: {
                            type: "composite",
                            requiredOwned: [ "group", "treeitem" ],
                            allowedAttrs: [ "aria-multiselectable", "aria-required", "aria-activedescendant", "aria-expanded", "aria-orientation" ],
                            superclassRole: [ "select" ],
                            accessibleNameRequired: false
                        },
                        treegrid: {
                            type: "composite",
                            requiredOwned: [ "rowgroup", "row" ],
                            allowedAttrs: [ "aria-activedescendant", "aria-colcount", "aria-expanded", "aria-level", "aria-multiselectable", "aria-orientation", "aria-readonly", "aria-required", "aria-rowcount" ],
                            superclassRole: [ "grid", "tree" ],
                            accessibleNameRequired: false
                        },
                        treeitem: {
                            type: "widget",
                            requiredContext: [ "group", "tree" ],
                            allowedAttrs: [ "aria-checked", "aria-expanded", "aria-level", "aria-posinset", "aria-selected", "aria-setsize" ],
                            superclassRole: [ "listitem", "option" ],
                            accessibleNameRequired: true,
                            nameFromContent: true
                        },
                        widget: {
                            type: "abstract",
                            superclassRole: [ "roletype" ]
                        },
                        window: {
                            type: "abstract",
                            superclassRole: [ "roletype" ]
                        }
                    };
                    var aria_roles_default = ariaRoles;
                    var dpubRoles = {
                        "doc-abstract": {
                            type: "section",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "section" ]
                        },
                        "doc-acknowledgments": {
                            type: "landmark",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "landmark" ]
                        },
                        "doc-afterword": {
                            type: "landmark",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "landmark" ]
                        },
                        "doc-appendix": {
                            type: "landmark",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "landmark" ]
                        },
                        "doc-backlink": {
                            type: "link",
                            allowedAttrs: [ "aria-expanded" ],
                            nameFromContent: true,
                            superclassRole: [ "link" ]
                        },
                        "doc-biblioentry": {
                            type: "listitem",
                            allowedAttrs: [ "aria-expanded", "aria-level", "aria-posinset", "aria-setsize" ],
                            superclassRole: [ "listitem" ],
                            deprecated: true
                        },
                        "doc-bibliography": {
                            type: "landmark",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "landmark" ]
                        },
                        "doc-biblioref": {
                            type: "link",
                            allowedAttrs: [ "aria-expanded" ],
                            nameFromContent: true,
                            superclassRole: [ "link" ]
                        },
                        "doc-chapter": {
                            type: "landmark",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "landmark" ]
                        },
                        "doc-colophon": {
                            type: "section",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "section" ]
                        },
                        "doc-conclusion": {
                            type: "landmark",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "landmark" ]
                        },
                        "doc-cover": {
                            type: "img",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "img" ]
                        },
                        "doc-credit": {
                            type: "section",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "section" ]
                        },
                        "doc-credits": {
                            type: "landmark",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "landmark" ]
                        },
                        "doc-dedication": {
                            type: "section",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "section" ]
                        },
                        "doc-endnote": {
                            type: "listitem",
                            allowedAttrs: [ "aria-expanded", "aria-level", "aria-posinset", "aria-setsize" ],
                            superclassRole: [ "listitem" ],
                            deprecated: true
                        },
                        "doc-endnotes": {
                            type: "landmark",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "landmark" ]
                        },
                        "doc-epigraph": {
                            type: "section",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "section" ]
                        },
                        "doc-epilogue": {
                            type: "landmark",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "landmark" ]
                        },
                        "doc-errata": {
                            type: "landmark",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "landmark" ]
                        },
                        "doc-example": {
                            type: "section",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "section" ]
                        },
                        "doc-footnote": {
                            type: "section",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "section" ]
                        },
                        "doc-foreword": {
                            type: "landmark",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "landmark" ]
                        },
                        "doc-glossary": {
                            type: "landmark",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "landmark" ]
                        },
                        "doc-glossref": {
                            type: "link",
                            allowedAttrs: [ "aria-expanded" ],
                            nameFromContent: true,
                            superclassRole: [ "link" ]
                        },
                        "doc-index": {
                            type: "navigation",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "navigation" ]
                        },
                        "doc-introduction": {
                            type: "landmark",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "landmark" ]
                        },
                        "doc-noteref": {
                            type: "link",
                            allowedAttrs: [ "aria-expanded" ],
                            nameFromContent: true,
                            superclassRole: [ "link" ]
                        },
                        "doc-notice": {
                            type: "note",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "note" ]
                        },
                        "doc-pagebreak": {
                            type: "separator",
                            allowedAttrs: [ "aria-expanded", "aria-orientation" ],
                            superclassRole: [ "separator" ],
                            childrenPresentational: true
                        },
                        "doc-pagelist": {
                            type: "navigation",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "navigation" ]
                        },
                        "doc-part": {
                            type: "landmark",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "landmark" ]
                        },
                        "doc-preface": {
                            type: "landmark",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "landmark" ]
                        },
                        "doc-prologue": {
                            type: "landmark",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "landmark" ]
                        },
                        "doc-pullquote": {
                            type: "none",
                            superclassRole: [ "none" ]
                        },
                        "doc-qna": {
                            type: "section",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "section" ]
                        },
                        "doc-subtitle": {
                            type: "sectionhead",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "sectionhead" ]
                        },
                        "doc-tip": {
                            type: "note",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "note" ]
                        },
                        "doc-toc": {
                            type: "navigation",
                            allowedAttrs: [ "aria-expanded" ],
                            superclassRole: [ "navigation" ]
                        }
                    };
                    var dpub_roles_default = dpubRoles;
                    var graphicsRoles = {
                        "graphics-document": {
                            type: "structure",
                            superclassRole: [ "document" ],
                            accessibleNameRequired: true
                        },
                        "graphics-object": {
                            type: "structure",
                            superclassRole: [ "group" ],
                            nameFromContent: true
                        },
                        "graphics-symbol": {
                            type: "structure",
                            superclassRole: [ "img" ],
                            accessibleNameRequired: true,
                            childrenPresentational: true
                        }
                    };
                    var graphics_roles_default = graphicsRoles;
                    var htmlElms = {
                        a: {
                            variant: {
                                href: {
                                    matches: "[href]",
                                    contentTypes: [ "interactive", "phrasing", "flow" ],
                                    allowedRoles: [ "button", "checkbox", "menuitem", "menuitemcheckbox", "menuitemradio", "option", "radio", "switch", "tab", "treeitem", "doc-backlink", "doc-biblioref", "doc-glossref", "doc-noteref" ],
                                    namingMethods: [ "subtreeText" ]
                                },
                                default: {
                                    contentTypes: [ "phrasing", "flow" ],
                                    allowedRoles: true
                                }
                            }
                        },
                        abbr: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true
                        },
                        address: {
                            contentTypes: [ "flow" ],
                            allowedRoles: true
                        },
                        area: {
                            variant: {
                                href: {
                                    matches: "[href]",
                                    allowedRoles: false
                                },
                                default: {
                                    allowedRoles: [ "button", "link" ]
                                }
                            },
                            contentTypes: [ "phrasing", "flow" ],
                            namingMethods: [ "altText" ]
                        },
                        article: {
                            contentTypes: [ "sectioning", "flow" ],
                            allowedRoles: [ "feed", "presentation", "none", "document", "application", "main", "region" ],
                            shadowRoot: true
                        },
                        aside: {
                            contentTypes: [ "sectioning", "flow" ],
                            allowedRoles: [ "feed", "note", "presentation", "none", "region", "search", "doc-dedication", "doc-example", "doc-footnote", "doc-glossary", "doc-pullquote", "doc-tip" ]
                        },
                        audio: {
                            variant: {
                                controls: {
                                    matches: "[controls]",
                                    contentTypes: [ "interactive", "embedded", "phrasing", "flow" ]
                                },
                                default: {
                                    contentTypes: [ "embedded", "phrasing", "flow" ]
                                }
                            },
                            allowedRoles: [ "application" ],
                            chromiumRole: "Audio"
                        },
                        b: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true
                        },
                        base: {
                            allowedRoles: false,
                            noAriaAttrs: true
                        },
                        bdi: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true
                        },
                        bdo: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true
                        },
                        blockquote: {
                            contentTypes: [ "flow" ],
                            allowedRoles: true,
                            shadowRoot: true
                        },
                        body: {
                            allowedRoles: false,
                            shadowRoot: true
                        },
                        br: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: [ "presentation", "none" ],
                            namingMethods: [ "titleText", "singleSpace" ]
                        },
                        button: {
                            contentTypes: [ "interactive", "phrasing", "flow" ],
                            allowedRoles: [ "checkbox", "combobox", "gridcell", "link", "menuitem", "menuitemcheckbox", "menuitemradio", "option", "radio", "separator", "slider", "switch", "tab", "treeitem" ],
                            namingMethods: [ "subtreeText" ]
                        },
                        canvas: {
                            allowedRoles: true,
                            contentTypes: [ "embedded", "phrasing", "flow" ],
                            chromiumRole: "Canvas"
                        },
                        caption: {
                            allowedRoles: false
                        },
                        cite: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true
                        },
                        code: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true
                        },
                        col: {
                            allowedRoles: false,
                            noAriaAttrs: true
                        },
                        colgroup: {
                            allowedRoles: false,
                            noAriaAttrs: true
                        },
                        data: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true
                        },
                        datalist: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: false,
                            noAriaAttrs: true,
                            implicitAttrs: {
                                "aria-multiselectable": "false"
                            }
                        },
                        dd: {
                            allowedRoles: false
                        },
                        del: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true
                        },
                        dfn: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true
                        },
                        details: {
                            contentTypes: [ "interactive", "flow" ],
                            allowedRoles: false
                        },
                        dialog: {
                            contentTypes: [ "flow" ],
                            allowedRoles: [ "alertdialog" ]
                        },
                        div: {
                            contentTypes: [ "flow" ],
                            allowedRoles: true,
                            shadowRoot: true
                        },
                        dl: {
                            contentTypes: [ "flow" ],
                            allowedRoles: [ "group", "list", "presentation", "none" ],
                            chromiumRole: "DescriptionList"
                        },
                        dt: {
                            allowedRoles: [ "listitem" ]
                        },
                        em: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true
                        },
                        embed: {
                            contentTypes: [ "interactive", "embedded", "phrasing", "flow" ],
                            allowedRoles: [ "application", "document", "img", "presentation", "none" ],
                            chromiumRole: "EmbeddedObject"
                        },
                        fieldset: {
                            contentTypes: [ "flow" ],
                            allowedRoles: [ "none", "presentation", "radiogroup" ],
                            namingMethods: [ "fieldsetLegendText" ]
                        },
                        figcaption: {
                            allowedRoles: [ "group", "none", "presentation" ]
                        },
                        figure: {
                            contentTypes: [ "flow" ],
                            allowedRoles: true,
                            namingMethods: [ "figureText", "titleText" ]
                        },
                        footer: {
                            contentTypes: [ "flow" ],
                            allowedRoles: [ "group", "none", "presentation", "doc-footnote" ],
                            shadowRoot: true
                        },
                        form: {
                            contentTypes: [ "flow" ],
                            allowedRoles: [ "search", "none", "presentation" ]
                        },
                        h1: {
                            contentTypes: [ "heading", "flow" ],
                            allowedRoles: [ "none", "presentation", "tab", "doc-subtitle" ],
                            shadowRoot: true,
                            implicitAttrs: {
                                "aria-level": "1"
                            }
                        },
                        h2: {
                            contentTypes: [ "heading", "flow" ],
                            allowedRoles: [ "none", "presentation", "tab", "doc-subtitle" ],
                            shadowRoot: true,
                            implicitAttrs: {
                                "aria-level": "2"
                            }
                        },
                        h3: {
                            contentTypes: [ "heading", "flow" ],
                            allowedRoles: [ "none", "presentation", "tab", "doc-subtitle" ],
                            shadowRoot: true,
                            implicitAttrs: {
                                "aria-level": "3"
                            }
                        },
                        h4: {
                            contentTypes: [ "heading", "flow" ],
                            allowedRoles: [ "none", "presentation", "tab", "doc-subtitle" ],
                            shadowRoot: true,
                            implicitAttrs: {
                                "aria-level": "4"
                            }
                        },
                        h5: {
                            contentTypes: [ "heading", "flow" ],
                            allowedRoles: [ "none", "presentation", "tab", "doc-subtitle" ],
                            shadowRoot: true,
                            implicitAttrs: {
                                "aria-level": "5"
                            }
                        },
                        h6: {
                            contentTypes: [ "heading", "flow" ],
                            allowedRoles: [ "none", "presentation", "tab", "doc-subtitle" ],
                            shadowRoot: true,
                            implicitAttrs: {
                                "aria-level": "6"
                            }
                        },
                        head: {
                            allowedRoles: false,
                            noAriaAttrs: true
                        },
                        header: {
                            contentTypes: [ "flow" ],
                            allowedRoles: [ "group", "none", "presentation", "doc-footnote" ],
                            shadowRoot: true
                        },
                        hgroup: {
                            contentTypes: [ "heading", "flow" ],
                            allowedRoles: true
                        },
                        hr: {
                            contentTypes: [ "flow" ],
                            allowedRoles: [ "none", "presentation", "doc-pagebreak" ],
                            namingMethods: [ "titleText", "singleSpace" ]
                        },
                        html: {
                            allowedRoles: false,
                            noAriaAttrs: true
                        },
                        i: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true
                        },
                        iframe: {
                            contentTypes: [ "interactive", "embedded", "phrasing", "flow" ],
                            allowedRoles: [ "application", "document", "img", "none", "presentation" ],
                            chromiumRole: "Iframe"
                        },
                        img: {
                            variant: {
                                nonEmptyAlt: {
                                    matches: [ {
                                        attributes: {
                                            alt: "/.+/"
                                        }
                                    }, {
                                        hasAccessibleName: true
                                    } ],
                                    allowedRoles: [ "button", "checkbox", "link", "menuitem", "menuitemcheckbox", "menuitemradio", "meter", "option", "progressbar", "radio", "scrollbar", "separator", "slider", "switch", "tab", "treeitem", "doc-cover" ]
                                },
                                usemap: {
                                    matches: "[usemap]",
                                    contentTypes: [ "interactive", "embedded", "flow" ]
                                },
                                default: {
                                    allowedRoles: [ "presentation", "none" ],
                                    contentTypes: [ "embedded", "flow" ]
                                }
                            },
                            namingMethods: [ "altText" ]
                        },
                        input: {
                            variant: {
                                button: {
                                    matches: {
                                        properties: {
                                            type: "button"
                                        }
                                    },
                                    allowedRoles: [ "checkbox", "combobox", "link", "menuitem", "menuitemcheckbox", "menuitemradio", "option", "radio", "switch", "tab" ]
                                },
                                buttonType: {
                                    matches: {
                                        properties: {
                                            type: [ "button", "submit", "reset" ]
                                        }
                                    },
                                    namingMethods: [ "valueText", "titleText", "buttonDefaultText" ]
                                },
                                checkboxPressed: {
                                    matches: {
                                        properties: {
                                            type: "checkbox"
                                        },
                                        attributes: {
                                            "aria-pressed": "/.*/"
                                        }
                                    },
                                    allowedRoles: [ "button", "menuitemcheckbox", "option", "switch" ],
                                    implicitAttrs: {
                                        "aria-checked": "false"
                                    }
                                },
                                checkbox: {
                                    matches: {
                                        properties: {
                                            type: "checkbox"
                                        },
                                        attributes: {
                                            "aria-pressed": null
                                        }
                                    },
                                    allowedRoles: [ "menuitemcheckbox", "option", "switch" ],
                                    implicitAttrs: {
                                        "aria-checked": "false"
                                    }
                                },
                                noRoles: {
                                    matches: {
                                        properties: {
                                            type: [ "color", "date", "datetime-local", "file", "month", "number", "password", "range", "reset", "submit", "time", "week" ]
                                        }
                                    },
                                    allowedRoles: false
                                },
                                hidden: {
                                    matches: {
                                        properties: {
                                            type: "hidden"
                                        }
                                    },
                                    contentTypes: [ "flow" ],
                                    allowedRoles: false,
                                    noAriaAttrs: true
                                },
                                image: {
                                    matches: {
                                        properties: {
                                            type: "image"
                                        }
                                    },
                                    allowedRoles: [ "link", "menuitem", "menuitemcheckbox", "menuitemradio", "radio", "switch" ],
                                    namingMethods: [ "altText", "valueText", "labelText", "titleText", "buttonDefaultText" ]
                                },
                                radio: {
                                    matches: {
                                        properties: {
                                            type: "radio"
                                        }
                                    },
                                    allowedRoles: [ "menuitemradio" ],
                                    implicitAttrs: {
                                        "aria-checked": "false"
                                    }
                                },
                                textWithList: {
                                    matches: {
                                        properties: {
                                            type: "text"
                                        },
                                        attributes: {
                                            list: "/.*/"
                                        }
                                    },
                                    allowedRoles: false
                                },
                                default: {
                                    contentTypes: [ "interactive", "flow" ],
                                    allowedRoles: [ "combobox", "searchbox", "spinbutton" ],
                                    implicitAttrs: {
                                        "aria-valuenow": ""
                                    },
                                    namingMethods: [ "labelText", "placeholderText" ]
                                }
                            }
                        },
                        ins: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true
                        },
                        kbd: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true
                        },
                        label: {
                            contentTypes: [ "interactive", "phrasing", "flow" ],
                            allowedRoles: false,
                            chromiumRole: "Label"
                        },
                        legend: {
                            allowedRoles: false
                        },
                        li: {
                            allowedRoles: [ "menuitem", "menuitemcheckbox", "menuitemradio", "option", "none", "presentation", "radio", "separator", "tab", "treeitem", "doc-biblioentry", "doc-endnote" ],
                            implicitAttrs: {
                                "aria-setsize": "1",
                                "aria-posinset": "1"
                            }
                        },
                        link: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: false,
                            noAriaAttrs: true
                        },
                        main: {
                            contentTypes: [ "flow" ],
                            allowedRoles: false,
                            shadowRoot: true
                        },
                        map: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: false,
                            noAriaAttrs: true
                        },
                        math: {
                            contentTypes: [ "embedded", "phrasing", "flow" ],
                            allowedRoles: false
                        },
                        mark: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true
                        },
                        menu: {
                            contentTypes: [ "flow" ],
                            allowedRoles: [ "directory", "group", "listbox", "menu", "menubar", "none", "presentation", "radiogroup", "tablist", "toolbar", "tree" ]
                        },
                        meta: {
                            variant: {
                                itemprop: {
                                    matches: "[itemprop]",
                                    contentTypes: [ "phrasing", "flow" ]
                                }
                            },
                            allowedRoles: false,
                            noAriaAttrs: true
                        },
                        meter: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: false,
                            chromiumRole: "progressbar"
                        },
                        nav: {
                            contentTypes: [ "sectioning", "flow" ],
                            allowedRoles: [ "doc-index", "doc-pagelist", "doc-toc", "menu", "menubar", "none", "presentation", "tablist" ],
                            shadowRoot: true
                        },
                        noscript: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: false,
                            noAriaAttrs: true
                        },
                        object: {
                            variant: {
                                usemap: {
                                    matches: "[usemap]",
                                    contentTypes: [ "interactive", "embedded", "phrasing", "flow" ]
                                },
                                default: {
                                    contentTypes: [ "embedded", "phrasing", "flow" ]
                                }
                            },
                            allowedRoles: [ "application", "document", "img" ],
                            chromiumRole: "PluginObject"
                        },
                        ol: {
                            contentTypes: [ "flow" ],
                            allowedRoles: [ "directory", "group", "listbox", "menu", "menubar", "none", "presentation", "radiogroup", "tablist", "toolbar", "tree" ]
                        },
                        optgroup: {
                            allowedRoles: false
                        },
                        option: {
                            allowedRoles: false,
                            implicitAttrs: {
                                "aria-selected": "false"
                            }
                        },
                        output: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true,
                            namingMethods: [ "subtreeText" ]
                        },
                        p: {
                            contentTypes: [ "flow" ],
                            allowedRoles: true,
                            shadowRoot: true
                        },
                        param: {
                            allowedRoles: false,
                            noAriaAttrs: true
                        },
                        picture: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: false,
                            noAriaAttrs: true
                        },
                        pre: {
                            contentTypes: [ "flow" ],
                            allowedRoles: true
                        },
                        progress: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: false,
                            implicitAttrs: {
                                "aria-valuemax": "100",
                                "aria-valuemin": "0",
                                "aria-valuenow": "0"
                            }
                        },
                        q: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true
                        },
                        rp: {
                            allowedRoles: true
                        },
                        rt: {
                            allowedRoles: true
                        },
                        ruby: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true
                        },
                        s: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true
                        },
                        samp: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true
                        },
                        script: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: false,
                            noAriaAttrs: true
                        },
                        search: {
                            contentTypes: [ "flow" ],
                            allowedRoles: [ "form", "group", "none", "presentation", "region", "search" ]
                        },
                        section: {
                            contentTypes: [ "sectioning", "flow" ],
                            allowedRoles: [ "alert", "alertdialog", "application", "banner", "complementary", "contentinfo", "dialog", "document", "feed", "group", "log", "main", "marquee", "navigation", "none", "note", "presentation", "search", "status", "tabpanel", "doc-abstract", "doc-acknowledgments", "doc-afterword", "doc-appendix", "doc-bibliography", "doc-chapter", "doc-colophon", "doc-conclusion", "doc-credit", "doc-credits", "doc-dedication", "doc-endnotes", "doc-epigraph", "doc-epilogue", "doc-errata", "doc-example", "doc-foreword", "doc-glossary", "doc-index", "doc-introduction", "doc-notice", "doc-pagelist", "doc-part", "doc-preface", "doc-prologue", "doc-pullquote", "doc-qna", "doc-toc" ],
                            shadowRoot: true
                        },
                        select: {
                            variant: {
                                combobox: {
                                    matches: {
                                        attributes: {
                                            multiple: null,
                                            size: [ null, "1" ]
                                        }
                                    },
                                    allowedRoles: [ "menu" ]
                                },
                                default: {
                                    allowedRoles: false
                                }
                            },
                            contentTypes: [ "interactive", "phrasing", "flow" ],
                            implicitAttrs: {
                                "aria-valuenow": ""
                            },
                            namingMethods: [ "labelText" ]
                        },
                        slot: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: false,
                            noAriaAttrs: true
                        },
                        small: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true
                        },
                        source: {
                            allowedRoles: false,
                            noAriaAttrs: true
                        },
                        span: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true,
                            shadowRoot: true
                        },
                        strong: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true
                        },
                        style: {
                            allowedRoles: false,
                            noAriaAttrs: true
                        },
                        svg: {
                            contentTypes: [ "embedded", "phrasing", "flow" ],
                            allowedRoles: true,
                            chromiumRole: "SVGRoot",
                            namingMethods: [ "svgTitleText" ]
                        },
                        sub: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true
                        },
                        summary: {
                            allowedRoles: false,
                            namingMethods: [ "subtreeText" ]
                        },
                        sup: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true
                        },
                        table: {
                            contentTypes: [ "flow" ],
                            allowedRoles: true,
                            namingMethods: [ "tableCaptionText", "tableSummaryText" ]
                        },
                        tbody: {
                            allowedRoles: true
                        },
                        template: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: false,
                            noAriaAttrs: true
                        },
                        textarea: {
                            contentTypes: [ "interactive", "phrasing", "flow" ],
                            allowedRoles: false,
                            implicitAttrs: {
                                "aria-valuenow": "",
                                "aria-multiline": "true"
                            },
                            namingMethods: [ "labelText", "placeholderText" ]
                        },
                        tfoot: {
                            allowedRoles: true
                        },
                        thead: {
                            allowedRoles: true
                        },
                        time: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true
                        },
                        title: {
                            allowedRoles: false,
                            noAriaAttrs: true
                        },
                        td: {
                            allowedRoles: true
                        },
                        th: {
                            allowedRoles: true
                        },
                        tr: {
                            allowedRoles: true
                        },
                        track: {
                            allowedRoles: false,
                            noAriaAttrs: true
                        },
                        u: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true
                        },
                        ul: {
                            contentTypes: [ "flow" ],
                            allowedRoles: [ "directory", "group", "listbox", "menu", "menubar", "none", "presentation", "radiogroup", "tablist", "toolbar", "tree" ]
                        },
                        var: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: true
                        },
                        video: {
                            variant: {
                                controls: {
                                    matches: "[controls]",
                                    contentTypes: [ "interactive", "embedded", "phrasing", "flow" ]
                                },
                                default: {
                                    contentTypes: [ "embedded", "phrasing", "flow" ]
                                }
                            },
                            allowedRoles: [ "application" ],
                            chromiumRole: "video"
                        },
                        wbr: {
                            contentTypes: [ "phrasing", "flow" ],
                            allowedRoles: [ "presentation", "none" ]
                        }
                    };
                    var html_elms_default = htmlElms;
                    var cssColors = {
                        aliceblue: [ 240, 248, 255 ],
                        antiquewhite: [ 250, 235, 215 ],
                        aqua: [ 0, 255, 255 ],
                        aquamarine: [ 127, 255, 212 ],
                        azure: [ 240, 255, 255 ],
                        beige: [ 245, 245, 220 ],
                        bisque: [ 255, 228, 196 ],
                        black: [ 0, 0, 0 ],
                        blanchedalmond: [ 255, 235, 205 ],
                        blue: [ 0, 0, 255 ],
                        blueviolet: [ 138, 43, 226 ],
                        brown: [ 165, 42, 42 ],
                        burlywood: [ 222, 184, 135 ],
                        cadetblue: [ 95, 158, 160 ],
                        chartreuse: [ 127, 255, 0 ],
                        chocolate: [ 210, 105, 30 ],
                        coral: [ 255, 127, 80 ],
                        cornflowerblue: [ 100, 149, 237 ],
                        cornsilk: [ 255, 248, 220 ],
                        crimson: [ 220, 20, 60 ],
                        cyan: [ 0, 255, 255 ],
                        darkblue: [ 0, 0, 139 ],
                        darkcyan: [ 0, 139, 139 ],
                        darkgoldenrod: [ 184, 134, 11 ],
                        darkgray: [ 169, 169, 169 ],
                        darkgreen: [ 0, 100, 0 ],
                        darkgrey: [ 169, 169, 169 ],
                        darkkhaki: [ 189, 183, 107 ],
                        darkmagenta: [ 139, 0, 139 ],
                        darkolivegreen: [ 85, 107, 47 ],
                        darkorange: [ 255, 140, 0 ],
                        darkorchid: [ 153, 50, 204 ],
                        darkred: [ 139, 0, 0 ],
                        darksalmon: [ 233, 150, 122 ],
                        darkseagreen: [ 143, 188, 143 ],
                        darkslateblue: [ 72, 61, 139 ],
                        darkslategray: [ 47, 79, 79 ],
                        darkslategrey: [ 47, 79, 79 ],
                        darkturquoise: [ 0, 206, 209 ],
                        darkviolet: [ 148, 0, 211 ],
                        deeppink: [ 255, 20, 147 ],
                        deepskyblue: [ 0, 191, 255 ],
                        dimgray: [ 105, 105, 105 ],
                        dimgrey: [ 105, 105, 105 ],
                        dodgerblue: [ 30, 144, 255 ],
                        firebrick: [ 178, 34, 34 ],
                        floralwhite: [ 255, 250, 240 ],
                        forestgreen: [ 34, 139, 34 ],
                        fuchsia: [ 255, 0, 255 ],
                        gainsboro: [ 220, 220, 220 ],
                        ghostwhite: [ 248, 248, 255 ],
                        gold: [ 255, 215, 0 ],
                        goldenrod: [ 218, 165, 32 ],
                        gray: [ 128, 128, 128 ],
                        green: [ 0, 128, 0 ],
                        greenyellow: [ 173, 255, 47 ],
                        grey: [ 128, 128, 128 ],
                        honeydew: [ 240, 255, 240 ],
                        hotpink: [ 255, 105, 180 ],
                        indianred: [ 205, 92, 92 ],
                        indigo: [ 75, 0, 130 ],
                        ivory: [ 255, 255, 240 ],
                        khaki: [ 240, 230, 140 ],
                        lavender: [ 230, 230, 250 ],
                        lavenderblush: [ 255, 240, 245 ],
                        lawngreen: [ 124, 252, 0 ],
                        lemonchiffon: [ 255, 250, 205 ],
                        lightblue: [ 173, 216, 230 ],
                        lightcoral: [ 240, 128, 128 ],
                        lightcyan: [ 224, 255, 255 ],
                        lightgoldenrodyellow: [ 250, 250, 210 ],
                        lightgray: [ 211, 211, 211 ],
                        lightgreen: [ 144, 238, 144 ],
                        lightgrey: [ 211, 211, 211 ],
                        lightpink: [ 255, 182, 193 ],
                        lightsalmon: [ 255, 160, 122 ],
                        lightseagreen: [ 32, 178, 170 ],
                        lightskyblue: [ 135, 206, 250 ],
                        lightslategray: [ 119, 136, 153 ],
                        lightslategrey: [ 119, 136, 153 ],
                        lightsteelblue: [ 176, 196, 222 ],
                        lightyellow: [ 255, 255, 224 ],
                        lime: [ 0, 255, 0 ],
                        limegreen: [ 50, 205, 50 ],
                        linen: [ 250, 240, 230 ],
                        magenta: [ 255, 0, 255 ],
                        maroon: [ 128, 0, 0 ],
                        mediumaquamarine: [ 102, 205, 170 ],
                        mediumblue: [ 0, 0, 205 ],
                        mediumorchid: [ 186, 85, 211 ],
                        mediumpurple: [ 147, 112, 219 ],
                        mediumseagreen: [ 60, 179, 113 ],
                        mediumslateblue: [ 123, 104, 238 ],
                        mediumspringgreen: [ 0, 250, 154 ],
                        mediumturquoise: [ 72, 209, 204 ],
                        mediumvioletred: [ 199, 21, 133 ],
                        midnightblue: [ 25, 25, 112 ],
                        mintcream: [ 245, 255, 250 ],
                        mistyrose: [ 255, 228, 225 ],
                        moccasin: [ 255, 228, 181 ],
                        navajowhite: [ 255, 222, 173 ],
                        navy: [ 0, 0, 128 ],
                        oldlace: [ 253, 245, 230 ],
                        olive: [ 128, 128, 0 ],
                        olivedrab: [ 107, 142, 35 ],
                        orange: [ 255, 165, 0 ],
                        orangered: [ 255, 69, 0 ],
                        orchid: [ 218, 112, 214 ],
                        palegoldenrod: [ 238, 232, 170 ],
                        palegreen: [ 152, 251, 152 ],
                        paleturquoise: [ 175, 238, 238 ],
                        palevioletred: [ 219, 112, 147 ],
                        papayawhip: [ 255, 239, 213 ],
                        peachpuff: [ 255, 218, 185 ],
                        peru: [ 205, 133, 63 ],
                        pink: [ 255, 192, 203 ],
                        plum: [ 221, 160, 221 ],
                        powderblue: [ 176, 224, 230 ],
                        purple: [ 128, 0, 128 ],
                        rebeccapurple: [ 102, 51, 153 ],
                        red: [ 255, 0, 0 ],
                        rosybrown: [ 188, 143, 143 ],
                        royalblue: [ 65, 105, 225 ],
                        saddlebrown: [ 139, 69, 19 ],
                        salmon: [ 250, 128, 114 ],
                        sandybrown: [ 244, 164, 96 ],
                        seagreen: [ 46, 139, 87 ],
                        seashell: [ 255, 245, 238 ],
                        sienna: [ 160, 82, 45 ],
                        silver: [ 192, 192, 192 ],
                        skyblue: [ 135, 206, 235 ],
                        slateblue: [ 106, 90, 205 ],
                        slategray: [ 112, 128, 144 ],
                        slategrey: [ 112, 128, 144 ],
                        snow: [ 255, 250, 250 ],
                        springgreen: [ 0, 255, 127 ],
                        steelblue: [ 70, 130, 180 ],
                        tan: [ 210, 180, 140 ],
                        teal: [ 0, 128, 128 ],
                        thistle: [ 216, 191, 216 ],
                        tomato: [ 255, 99, 71 ],
                        turquoise: [ 64, 224, 208 ],
                        violet: [ 238, 130, 238 ],
                        wheat: [ 245, 222, 179 ],
                        white: [ 255, 255, 255 ],
                        whitesmoke: [ 245, 245, 245 ],
                        yellow: [ 255, 255, 0 ],
                        yellowgreen: [ 154, 205, 50 ]
                    };
                    var css_colors_default = cssColors;
                    var originals = {
                        ariaAttrs: aria_attrs_default,
                        ariaRoles: _extends({}, aria_roles_default, dpub_roles_default, graphics_roles_default),
                        htmlElms: html_elms_default,
                        cssColors: css_colors_default
                    };
                    var standards = _extends({}, originals);
                    function configureStandards(config) {
                        Object.keys(standards).forEach((function(propName) {
                            if (config[propName]) standards[propName] = deep_merge_default(standards[propName], config[propName]);
                        }));
                    }
                    function resetStandards() {
                        Object.keys(standards).forEach((function(propName) {
                            standards[propName] = originals[propName];
                        }));
                    }
                    var standards_default = standards;
                    function isUnsupportedRole(role) {
                        var roleDefinition = standards_default.ariaRoles[role];
                        return roleDefinition ? !!roleDefinition.unsupported : false;
                    }
                    var is_unsupported_role_default = isUnsupportedRole;
                    function isValidRole(role) {
                        var _ref26 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, allowAbstract = _ref26.allowAbstract, _ref26$flagUnsupporte = _ref26.flagUnsupported, flagUnsupported = void 0 === _ref26$flagUnsupporte ? false : _ref26$flagUnsupporte;
                        var roleDefinition = standards_default.ariaRoles[role];
                        var isRoleUnsupported = is_unsupported_role_default(role);
                        if (!roleDefinition || flagUnsupported && isRoleUnsupported) return false;
                        return allowAbstract ? true : "abstract" !== roleDefinition.type;
                    }
                    var is_valid_role_default = isValidRole;
                    function getExplicitRole(vNode) {
                        var _ref27 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, fallback = _ref27.fallback, abstracts = _ref27.abstracts, dpub = _ref27.dpub;
                        vNode = vNode instanceof abstract_virtual_node_default ? vNode : get_node_from_tree_default(vNode);
                        if (1 !== vNode.props.nodeType) return null;
                        var roleAttr = (vNode.attr("role") || "").trim().toLowerCase();
                        var roleList = fallback ? token_list_default(roleAttr) : [ roleAttr ];
                        var firstValidRole = roleList.find((function(role) {
                            if (!dpub && "doc-" === role.substr(0, 4)) return false;
                            return is_valid_role_default(role, {
                                allowAbstract: abstracts
                            });
                        }));
                        return firstValidRole || null;
                    }
                    var get_explicit_role_default = getExplicitRole;
                    function getElementsByContentType(type2) {
                        return Object.keys(standards_default.htmlElms).filter((function(nodeName2) {
                            var elm = standards_default.htmlElms[nodeName2];
                            if (elm.contentTypes) return elm.contentTypes.includes(type2);
                            if (!elm.variant) return false;
                            if (elm.variant["default"] && elm.variant["default"].contentTypes) return elm.variant["default"].contentTypes.includes(type2);
                            return false;
                        }));
                    }
                    var get_elements_by_content_type_default = getElementsByContentType;
                    function getGlobalAriaAttrs() {
                        return cache_default.get("globalAriaAttrs", (function() {
                            return Object.keys(standards_default.ariaAttrs).filter((function(attrName) {
                                return standards_default.ariaAttrs[attrName].global;
                            }));
                        }));
                    }
                    var get_global_aria_attrs_default = getGlobalAriaAttrs;
                    function toGrid(node) {
                        var table = [];
                        var rows = node.rows;
                        for (var _i9 = 0, rowLength = rows.length; _i9 < rowLength; _i9++) {
                            var cells = rows[_i9].cells;
                            table[_i9] = table[_i9] || [];
                            var columnIndex = 0;
                            for (var j = 0, cellLength = cells.length; j < cellLength; j++) for (var colSpan = 0; colSpan < cells[j].colSpan; colSpan++) {
                                var rowspanAttr = cells[j].getAttribute("rowspan");
                                var rowspanValue = 0 === parseInt(rowspanAttr) || 0 === cells[j].rowspan ? rows.length : cells[j].rowSpan;
                                for (var rowSpan = 0; rowSpan < rowspanValue; rowSpan++) {
                                    table[_i9 + rowSpan] = table[_i9 + rowSpan] || [];
                                    while (table[_i9 + rowSpan][columnIndex]) columnIndex++;
                                    table[_i9 + rowSpan][columnIndex] = cells[j];
                                }
                                columnIndex++;
                            }
                        }
                        return table;
                    }
                    var to_grid_default = memoize_default(toGrid);
                    function getCellPosition(cell, tableGrid) {
                        var rowIndex, index;
                        if (!tableGrid) tableGrid = to_grid_default(find_up_default(cell, "table"));
                        for (rowIndex = 0; rowIndex < tableGrid.length; rowIndex++) if (tableGrid[rowIndex]) {
                            index = tableGrid[rowIndex].indexOf(cell);
                            if (-1 !== index) return {
                                x: index,
                                y: rowIndex
                            };
                        }
                    }
                    var get_cell_position_default = memoize_default(getCellPosition);
                    function _getScope(el) {
                        var _nodeLookup9 = _nodeLookup(el), vNode = _nodeLookup9.vNode, cell = _nodeLookup9.domNode;
                        var scope = vNode.attr("scope");
                        var role = vNode.attr("role");
                        if (![ "td", "th" ].includes(vNode.props.nodeName)) throw new TypeError("Expected TD or TH element");
                        if ("columnheader" === role) return "col"; else if ("rowheader" === role) return "row"; else if ("col" === scope || "row" === scope) return scope; else if ("th" !== vNode.props.nodeName) return false; else if (!vNode.actualNode) return "auto";
                        var tableGrid = to_grid_default(find_up_default(cell, "table"));
                        var pos = get_cell_position_default(cell, tableGrid);
                        var headerRow = tableGrid[pos.y].every((function(node) {
                            return "TH" === node.nodeName.toUpperCase();
                        }));
                        if (headerRow) return "col";
                        var headerCol = tableGrid.map((function(col) {
                            return col[pos.x];
                        })).every((function(node) {
                            return node && "TH" === node.nodeName.toUpperCase();
                        }));
                        if (headerCol) return "row";
                        return "auto";
                    }
                    function isColumnHeader(element) {
                        return -1 !== [ "col", "auto" ].indexOf(_getScope(element));
                    }
                    var is_column_header_default = isColumnHeader;
                    function isRowHeader(cell) {
                        return [ "row", "auto" ].includes(_getScope(cell));
                    }
                    var is_row_header_default = isRowHeader;
                    function sanitize(str) {
                        if (!str) return "";
                        return str.replace(/\r\n/g, "\n").replace(/\u00A0/g, " ").replace(/[\s]{2,}/g, " ").trim();
                    }
                    var sanitize_default = sanitize;
                    var getSectioningContentSelector = function() {
                        return cache_default.get("sectioningContentSelector", (function() {
                            return get_elements_by_content_type_default("sectioning").map((function(nodeName2) {
                                return "".concat(nodeName2, ":not([role])");
                            })).join(", ") + " , [role=article], [role=complementary], [role=navigation], [role=region]";
                        }));
                    };
                    var getSectioningContentPlusMainSelector = function() {
                        return cache_default.get("sectioningContentPlusMainSelector", (function() {
                            return getSectioningContentSelector() + " , main:not([role]), [role=main]";
                        }));
                    };
                    function hasAccessibleName(vNode) {
                        var _ref28 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, _ref28$checkTitle = _ref28.checkTitle, checkTitle = void 0 === _ref28$checkTitle ? false : _ref28$checkTitle;
                        return !!(sanitize_default(arialabelledby_text_default(vNode)) || sanitize_default(_arialabelText(vNode)) || checkTitle && 1 === (null === vNode || void 0 === vNode ? void 0 : vNode.props.nodeType) && sanitize_default(vNode.attr("title")));
                    }
                    var implicitHtmlRoles = {
                        a: function(vNode) {
                            return vNode.hasAttr("href") ? "link" : null;
                        },
                        area: function(vNode) {
                            return vNode.hasAttr("href") ? "link" : null;
                        },
                        article: "article",
                        aside: function(vNode) {
                            if (closest_default(vNode.parent, getSectioningContentSelector()) && !hasAccessibleName(vNode, {
                                checkTitle: true
                            })) return null;
                            return "complementary";
                        },
                        body: "document",
                        button: "button",
                        datalist: "listbox",
                        dd: "definition",
                        dfn: "term",
                        details: "group",
                        dialog: "dialog",
                        dt: "term",
                        fieldset: "group",
                        figure: "figure",
                        footer: function(vNode) {
                            var sectioningElement = closest_default(vNode, getSectioningContentPlusMainSelector());
                            return !sectioningElement ? "contentinfo" : null;
                        },
                        form: function(vNode) {
                            return hasAccessibleName(vNode) ? "form" : null;
                        },
                        h1: "heading",
                        h2: "heading",
                        h3: "heading",
                        h4: "heading",
                        h5: "heading",
                        h6: "heading",
                        header: function(vNode) {
                            var sectioningElement = closest_default(vNode, getSectioningContentPlusMainSelector());
                            return !sectioningElement ? "banner" : null;
                        },
                        hr: "separator",
                        img: function(vNode) {
                            var emptyAlt = vNode.hasAttr("alt") && !vNode.attr("alt");
                            var hasGlobalAria = get_global_aria_attrs_default().find((function(attr) {
                                return vNode.hasAttr(attr);
                            }));
                            return emptyAlt && !hasGlobalAria && !_isFocusable(vNode) ? "presentation" : "img";
                        },
                        input: function(vNode) {
                            var suggestionsSourceElement;
                            if (vNode.hasAttr("list")) {
                                var listElement = idrefs_default(vNode.actualNode, "list").filter((function(node) {
                                    return !!node;
                                }))[0];
                                suggestionsSourceElement = listElement && "datalist" === listElement.nodeName.toLowerCase();
                            }
                            switch (vNode.props.type) {
                              case "checkbox":
                                return "checkbox";

                              case "number":
                                return "spinbutton";

                              case "radio":
                                return "radio";

                              case "range":
                                return "slider";

                              case "search":
                                return !suggestionsSourceElement ? "searchbox" : "combobox";

                              case "button":
                              case "image":
                              case "reset":
                              case "submit":
                                return "button";

                              case "text":
                              case "tel":
                              case "url":
                              case "email":
                              case "":
                                return !suggestionsSourceElement ? "textbox" : "combobox";

                              default:
                                return "textbox";
                            }
                        },
                        li: "listitem",
                        main: "main",
                        math: "math",
                        menu: "list",
                        meter: "meter",
                        nav: "navigation",
                        ol: "list",
                        optgroup: "group",
                        option: "option",
                        output: "status",
                        progress: "progressbar",
                        search: "search",
                        section: function(vNode) {
                            return hasAccessibleName(vNode) ? "region" : null;
                        },
                        select: function(vNode) {
                            return vNode.hasAttr("multiple") || parseInt(vNode.attr("size")) > 1 ? "listbox" : "combobox";
                        },
                        summary: "button",
                        table: "table",
                        tbody: "rowgroup",
                        td: function(vNode) {
                            var table = closest_default(vNode, "table");
                            var role = get_explicit_role_default(table);
                            return [ "grid", "treegrid" ].includes(role) ? "gridcell" : "cell";
                        },
                        textarea: "textbox",
                        tfoot: "rowgroup",
                        th: function(vNode) {
                            if (is_column_header_default(vNode)) return "columnheader";
                            if (is_row_header_default(vNode)) return "rowheader";
                        },
                        thead: "rowgroup",
                        tr: "row",
                        ul: "list"
                    };
                    var implicit_html_roles_default = implicitHtmlRoles;
                    function fromPrimative(someString, matcher) {
                        var matcherType = _typeof(matcher);
                        if (Array.isArray(matcher) && "undefined" !== typeof someString) return matcher.includes(someString);
                        if ("function" === matcherType) return !!matcher(someString);
                        if (null !== someString && void 0 !== someString) {
                            if (matcher instanceof RegExp) return matcher.test(someString);
                            if (/^\/.*\/$/.test(matcher)) {
                                var pattern = matcher.substring(1, matcher.length - 1);
                                return new RegExp(pattern).test(someString);
                            }
                        }
                        return matcher === someString;
                    }
                    var from_primative_default = fromPrimative;
                    function hasAccessibleName2(vNode, matcher) {
                        return from_primative_default(!!_accessibleTextVirtual(vNode), matcher);
                    }
                    var has_accessible_name_default = hasAccessibleName2;
                    function fromFunction(getValue, matcher) {
                        var matcherType = _typeof(matcher);
                        if ("object" !== matcherType || Array.isArray(matcher) || matcher instanceof RegExp) throw new Error("Expect matcher to be an object");
                        return Object.keys(matcher).every((function(propName) {
                            return from_primative_default(getValue(propName), matcher[propName]);
                        }));
                    }
                    var from_function_default = fromFunction;
                    function attributes(vNode, matcher) {
                        vNode = _nodeLookup(vNode).vNode;
                        return from_function_default((function(attrName) {
                            return vNode.attr(attrName);
                        }), matcher);
                    }
                    var attributes_default = attributes;
                    function condition(arg, matcher) {
                        return !!matcher(arg);
                    }
                    function explicitRole(vNode, matcher) {
                        return from_primative_default(get_explicit_role_default(vNode), matcher);
                    }
                    var explicit_role_default = explicitRole;
                    function implicitRole(vNode, matcher) {
                        return from_primative_default(implicit_role_default(vNode), matcher);
                    }
                    var implicit_role_default2 = implicitRole;
                    function nodeName(vNode, matcher) {
                        vNode = _nodeLookup(vNode).vNode;
                        return from_primative_default(vNode.props.nodeName, matcher);
                    }
                    var node_name_default = nodeName;
                    function properties(vNode, matcher) {
                        vNode = _nodeLookup(vNode).vNode;
                        return from_function_default((function(propName) {
                            return vNode.props[propName];
                        }), matcher);
                    }
                    var properties_default = properties;
                    function semanticRole(vNode, matcher) {
                        return from_primative_default(get_role_default(vNode), matcher);
                    }
                    var semantic_role_default = semanticRole;
                    var matchers = {
                        hasAccessibleName: has_accessible_name_default,
                        attributes: attributes_default,
                        condition,
                        explicitRole: explicit_role_default,
                        implicitRole: implicit_role_default2,
                        nodeName: node_name_default,
                        properties: properties_default,
                        semanticRole: semantic_role_default
                    };
                    function fromDefinition(vNode, definition) {
                        vNode = _nodeLookup(vNode).vNode;
                        if (Array.isArray(definition)) return definition.some((function(definitionItem) {
                            return fromDefinition(vNode, definitionItem);
                        }));
                        if ("string" === typeof definition) return _matches(vNode, definition);
                        return Object.keys(definition).every((function(matcherName) {
                            if (!matchers[matcherName]) throw new Error('Unknown matcher type "'.concat(matcherName, '"'));
                            var matchMethod = matchers[matcherName];
                            var matcher = definition[matcherName];
                            return matchMethod(vNode, matcher);
                        }));
                    }
                    var from_definition_default = fromDefinition;
                    function matches2(vNode, definition) {
                        return from_definition_default(vNode, definition);
                    }
                    var matches_default = matches2;
                    matches_default.hasAccessibleName = has_accessible_name_default;
                    matches_default.attributes = attributes_default;
                    matches_default.condition = condition;
                    matches_default.explicitRole = explicit_role_default;
                    matches_default.fromDefinition = from_definition_default;
                    matches_default.fromFunction = from_function_default;
                    matches_default.fromPrimative = from_primative_default;
                    matches_default.implicitRole = implicit_role_default2;
                    matches_default.nodeName = node_name_default;
                    matches_default.properties = properties_default;
                    matches_default.semanticRole = semantic_role_default;
                    var matches_default2 = matches_default;
                    function getElementSpec(vNode) {
                        var _ref29 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, _ref29$noMatchAccessi = _ref29.noMatchAccessibleName, noMatchAccessibleName = void 0 === _ref29$noMatchAccessi ? false : _ref29$noMatchAccessi;
                        var standard = standards_default.htmlElms[vNode.props.nodeName];
                        if (!standard) return {};
                        if (!standard.variant) return standard;
                        var variant = standard.variant, spec = _objectWithoutProperties(standard, _excluded4);
                        for (var variantName in variant) {
                            if (!variant.hasOwnProperty(variantName) || "default" === variantName) continue;
                            var _variant$variantName = variant[variantName], matches4 = _variant$variantName.matches, props = _objectWithoutProperties(_variant$variantName, _excluded5);
                            var matchProperties = Array.isArray(matches4) ? matches4 : [ matches4 ];
                            for (var _i10 = 0; _i10 < matchProperties.length && noMatchAccessibleName; _i10++) if (matchProperties[_i10].hasOwnProperty("hasAccessibleName")) return standard;
                            if (matches_default2(vNode, matches4)) for (var propName in props) if (props.hasOwnProperty(propName)) spec[propName] = props[propName];
                        }
                        for (var _propName in variant["default"]) if (variant["default"].hasOwnProperty(_propName) && "undefined" === typeof spec[_propName]) spec[_propName] = variant["default"][_propName];
                        return spec;
                    }
                    var get_element_spec_default = getElementSpec;
                    function implicitRole2(node) {
                        var _ref30 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, chromium = _ref30.chromium;
                        var vNode = node instanceof abstract_virtual_node_default ? node : get_node_from_tree_default(node);
                        node = vNode.actualNode;
                        if (!vNode) throw new ReferenceError("Cannot get implicit role of a node outside the current scope.");
                        var nodeName2 = vNode.props.nodeName;
                        var role = implicit_html_roles_default[nodeName2];
                        if (!role && chromium) {
                            var _get_element_spec_def = get_element_spec_default(vNode), chromiumRole = _get_element_spec_def.chromiumRole;
                            return chromiumRole || null;
                        }
                        if ("function" === typeof role) return role(vNode);
                        return role || null;
                    }
                    var implicit_role_default = implicitRole2;
                    var inheritsPresentationChain = {
                        td: [ "tr" ],
                        th: [ "tr" ],
                        tr: [ "thead", "tbody", "tfoot", "table" ],
                        thead: [ "table" ],
                        tbody: [ "table" ],
                        tfoot: [ "table" ],
                        li: [ "ol", "ul" ],
                        dt: [ "dl", "div" ],
                        dd: [ "dl", "div" ],
                        div: [ "dl" ]
                    };
                    function getInheritedRole(vNode, explicitRoleOptions) {
                        var parentNodeNames = inheritsPresentationChain[vNode.props.nodeName];
                        if (!parentNodeNames) return null;
                        if (!vNode.parent) {
                            if (!vNode.actualNode) return null;
                            throw new ReferenceError("Cannot determine role presentational inheritance of a required parent outside the current scope.");
                        }
                        if (!parentNodeNames.includes(vNode.parent.props.nodeName)) return null;
                        var parentRole = get_explicit_role_default(vNode.parent, explicitRoleOptions);
                        if ([ "none", "presentation" ].includes(parentRole) && !hasConflictResolution(vNode.parent)) return parentRole;
                        if (parentRole) return null;
                        return getInheritedRole(vNode.parent, explicitRoleOptions);
                    }
                    function resolveImplicitRole(vNode, _ref31) {
                        var chromium = _ref31.chromium, explicitRoleOptions = _objectWithoutProperties(_ref31, _excluded6);
                        var implicitRole3 = implicit_role_default(vNode, {
                            chromium
                        });
                        if (!implicitRole3) return null;
                        var presentationalRole = getInheritedRole(vNode, explicitRoleOptions);
                        if (presentationalRole) return presentationalRole;
                        return implicitRole3;
                    }
                    function hasConflictResolution(vNode) {
                        var hasGlobalAria = get_global_aria_attrs_default().some((function(attr) {
                            return vNode.hasAttr(attr);
                        }));
                        return hasGlobalAria || _isFocusable(vNode);
                    }
                    function resolveRole(node) {
                        var _ref32 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                        var noImplicit = _ref32.noImplicit, roleOptions = _objectWithoutProperties(_ref32, _excluded7);
                        var _nodeLookup10 = _nodeLookup(node), vNode = _nodeLookup10.vNode;
                        if (1 !== vNode.props.nodeType) return null;
                        var explicitRole2 = get_explicit_role_default(vNode, roleOptions);
                        if (!explicitRole2) return noImplicit ? null : resolveImplicitRole(vNode, roleOptions);
                        if (![ "presentation", "none" ].includes(explicitRole2)) return explicitRole2;
                        if (hasConflictResolution(vNode)) return noImplicit ? null : resolveImplicitRole(vNode, roleOptions);
                        return explicitRole2;
                    }
                    function getRole(node) {
                        var _ref33 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                        var noPresentational = _ref33.noPresentational, options = _objectWithoutProperties(_ref33, _excluded8);
                        var role = resolveRole(node, options);
                        if (noPresentational && [ "presentation", "none" ].includes(role)) return null;
                        return role;
                    }
                    var get_role_default = getRole;
                    var alwaysTitleElements = [ "iframe" ];
                    function titleText(node) {
                        var _nodeLookup11 = _nodeLookup(node), vNode = _nodeLookup11.vNode;
                        if (1 !== vNode.props.nodeType || !node.hasAttr("title")) return "";
                        if (!matches_default(vNode, alwaysTitleElements) && [ "none", "presentation" ].includes(get_role_default(vNode))) return "";
                        return vNode.attr("title");
                    }
                    var title_text_default = titleText;
                    function namedFromContents(vNode) {
                        var _ref34 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, strict = _ref34.strict;
                        vNode = vNode instanceof abstract_virtual_node_default ? vNode : get_node_from_tree_default(vNode);
                        if (1 !== vNode.props.nodeType) return false;
                        var role = get_role_default(vNode);
                        var roleDef = standards_default.ariaRoles[role];
                        if (roleDef && roleDef.nameFromContent) return true;
                        if (strict) return false;
                        return !roleDef || [ "presentation", "none" ].includes(role);
                    }
                    var named_from_contents_default = namedFromContents;
                    function getOwnedVirtual(virtualNode) {
                        var actualNode = virtualNode.actualNode, children = virtualNode.children;
                        if (!children) throw new Error("getOwnedVirtual requires a virtual node");
                        if (virtualNode.hasAttr("aria-owns")) {
                            var owns = idrefs_default(actualNode, "aria-owns").filter((function(element) {
                                return !!element;
                            })).map((function(element) {
                                return axe.utils.getNodeFromTree(element);
                            }));
                            return [].concat(_toConsumableArray(children), _toConsumableArray(owns));
                        }
                        return _toConsumableArray(children);
                    }
                    var get_owned_virtual_default = getOwnedVirtual;
                    var unsupported_default = {
                        accessibleNameFromFieldValue: [ "progressbar" ]
                    };
                    function _isVisibleToScreenReaders(vNode) {
                        vNode = _nodeLookup(vNode).vNode;
                        return isVisibleToScreenReadersVirtual(vNode);
                    }
                    var isVisibleToScreenReadersVirtual = memoize_default((function(vNode, isAncestor) {
                        if (ariaHidden(vNode) || _isInert(vNode, {
                            skipAncestors: true,
                            isAncestor
                        })) return false;
                        if (vNode.actualNode && "area" === vNode.props.nodeName) return !areaHidden(vNode, isVisibleToScreenReadersVirtual);
                        if (_isHiddenForEveryone(vNode, {
                            skipAncestors: true,
                            isAncestor
                        })) return false;
                        if (!vNode.parent) return true;
                        return isVisibleToScreenReadersVirtual(vNode.parent, true);
                    }));
                    function visibleVirtual(element, screenReader, noRecursing) {
                        var _nodeLookup12 = _nodeLookup(element), vNode = _nodeLookup12.vNode;
                        var visibleMethod = screenReader ? _isVisibleToScreenReaders : _isVisibleOnScreen;
                        var visible2 = !element.actualNode || element.actualNode && visibleMethod(element);
                        var result = vNode.children.map((function(child) {
                            var _child$props = child.props, nodeType = _child$props.nodeType, nodeValue = _child$props.nodeValue;
                            if (3 === nodeType) {
                                if (nodeValue && visible2) return nodeValue;
                            } else if (!noRecursing) return visibleVirtual(child, screenReader);
                        })).join("");
                        return sanitize_default(result);
                    }
                    var visible_virtual_default = visibleVirtual;
                    var nonTextInputTypes = [ "button", "checkbox", "color", "file", "hidden", "image", "password", "radio", "reset", "submit" ];
                    function isNativeTextbox(node) {
                        node = node instanceof abstract_virtual_node_default ? node : get_node_from_tree_default(node);
                        var nodeName2 = node.props.nodeName;
                        return "textarea" === nodeName2 || "input" === nodeName2 && !nonTextInputTypes.includes((node.attr("type") || "").toLowerCase());
                    }
                    var is_native_textbox_default = isNativeTextbox;
                    function isNativeSelect(node) {
                        node = node instanceof abstract_virtual_node_default ? node : get_node_from_tree_default(node);
                        var nodeName2 = node.props.nodeName;
                        return "select" === nodeName2;
                    }
                    var is_native_select_default = isNativeSelect;
                    function isAriaTextbox(node) {
                        var role = get_explicit_role_default(node);
                        return "textbox" === role;
                    }
                    var is_aria_textbox_default = isAriaTextbox;
                    function isAriaListbox(node) {
                        var role = get_explicit_role_default(node);
                        return "listbox" === role;
                    }
                    var is_aria_listbox_default = isAriaListbox;
                    function isAriaCombobox(node) {
                        var role = get_explicit_role_default(node);
                        return "combobox" === role;
                    }
                    var is_aria_combobox_default = isAriaCombobox;
                    var rangeRoles = [ "progressbar", "scrollbar", "slider", "spinbutton" ];
                    function isAriaRange(node) {
                        var role = get_explicit_role_default(node);
                        return rangeRoles.includes(role);
                    }
                    var is_aria_range_default = isAriaRange;
                    var controlValueRoles = [ "textbox", "progressbar", "scrollbar", "slider", "spinbutton", "combobox", "listbox" ];
                    var _formControlValueMethods = {
                        nativeTextboxValue,
                        nativeSelectValue,
                        ariaTextboxValue,
                        ariaListboxValue,
                        ariaComboboxValue,
                        ariaRangeValue
                    };
                    function formControlValue(virtualNode) {
                        var context = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                        var actualNode = virtualNode.actualNode;
                        var unsupportedRoles = unsupported_default.accessibleNameFromFieldValue || [];
                        var role = get_role_default(virtualNode);
                        if (context.startNode === virtualNode || !controlValueRoles.includes(role) || unsupportedRoles.includes(role)) return "";
                        var valueMethods = Object.keys(_formControlValueMethods).map((function(name) {
                            return _formControlValueMethods[name];
                        }));
                        var valueString = valueMethods.reduce((function(accName, step) {
                            return accName || step(virtualNode, context);
                        }), "");
                        if (context.debug) log_default(valueString || "{empty-value}", actualNode, context);
                        return valueString;
                    }
                    function nativeTextboxValue(node) {
                        var _nodeLookup13 = _nodeLookup(node), vNode = _nodeLookup13.vNode;
                        if (is_native_textbox_default(vNode)) return vNode.props.value || "";
                        return "";
                    }
                    function nativeSelectValue(node) {
                        var _nodeLookup14 = _nodeLookup(node), vNode = _nodeLookup14.vNode;
                        if (!is_native_select_default(vNode)) return "";
                        var options = query_selector_all_default(vNode, "option");
                        var selectedOptions = options.filter((function(option) {
                            return option.props.selected;
                        }));
                        if (!selectedOptions.length) selectedOptions.push(options[0]);
                        return selectedOptions.map((function(option) {
                            return visible_virtual_default(option);
                        })).join(" ") || "";
                    }
                    function ariaTextboxValue(node) {
                        var _nodeLookup15 = _nodeLookup(node), vNode = _nodeLookup15.vNode, domNode = _nodeLookup15.domNode;
                        if (!is_aria_textbox_default(vNode)) return "";
                        if (!domNode || domNode && !_isHiddenForEveryone(domNode)) return visible_virtual_default(vNode, true); else return domNode.textContent;
                    }
                    function ariaListboxValue(node, context) {
                        var _nodeLookup16 = _nodeLookup(node), vNode = _nodeLookup16.vNode;
                        if (!is_aria_listbox_default(vNode)) return "";
                        var selected = get_owned_virtual_default(vNode).filter((function(owned) {
                            return "option" === get_role_default(owned) && "true" === owned.attr("aria-selected");
                        }));
                        if (0 === selected.length) return "";
                        return _accessibleTextVirtual(selected[0], context);
                    }
                    function ariaComboboxValue(node, context) {
                        var _nodeLookup17 = _nodeLookup(node), vNode = _nodeLookup17.vNode;
                        if (!is_aria_combobox_default(vNode)) return "";
                        var listbox = get_owned_virtual_default(vNode).filter((function(elm) {
                            return "listbox" === get_role_default(elm);
                        }))[0];
                        return listbox ? ariaListboxValue(listbox, context) : "";
                    }
                    function ariaRangeValue(node) {
                        var _nodeLookup18 = _nodeLookup(node), vNode = _nodeLookup18.vNode;
                        if (!is_aria_range_default(vNode) || !vNode.hasAttr("aria-valuenow")) return "";
                        var valueNow = +vNode.attr("aria-valuenow");
                        return !isNaN(valueNow) ? String(valueNow) : "0";
                    }
                    var form_control_value_default = formControlValue;
                    function subtreeText(virtualNode) {
                        var context = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                        var alreadyProcessed2 = _accessibleTextVirtual.alreadyProcessed;
                        context.startNode = context.startNode || virtualNode;
                        var _context = context, strict = _context.strict, inControlContext = _context.inControlContext, inLabelledByContext = _context.inLabelledByContext;
                        var role = get_role_default(virtualNode);
                        var _get_element_spec_def2 = get_element_spec_default(virtualNode, {
                            noMatchAccessibleName: true
                        }), contentTypes = _get_element_spec_def2.contentTypes;
                        if (alreadyProcessed2(virtualNode, context) || 1 !== virtualNode.props.nodeType || null !== contentTypes && void 0 !== contentTypes && contentTypes.includes("embedded") || controlValueRoles.includes(role)) return "";
                        if (!context.subtreeDescendant && !context.inLabelledByContext && !named_from_contents_default(virtualNode, {
                            strict
                        })) return "";
                        if (!strict) {
                            var subtreeDescendant = !inControlContext && !inLabelledByContext;
                            context = _extends({
                                subtreeDescendant
                            }, context);
                        }
                        return get_owned_virtual_default(virtualNode).reduce((function(contentText, child) {
                            return appendAccessibleText(contentText, child, context);
                        }), "");
                    }
                    var phrasingElements = get_elements_by_content_type_default("phrasing").concat([ "#text" ]);
                    function appendAccessibleText(contentText, virtualNode, context) {
                        var nodeName2 = virtualNode.props.nodeName;
                        var contentTextAdd = _accessibleTextVirtual(virtualNode, context);
                        if (!contentTextAdd) return contentText;
                        if (!phrasingElements.includes(nodeName2)) {
                            if (" " !== contentTextAdd[0]) contentTextAdd += " ";
                            if (contentText && " " !== contentText[contentText.length - 1]) contentTextAdd = " " + contentTextAdd;
                        }
                        return contentText + contentTextAdd;
                    }
                    var subtree_text_default = subtreeText;
                    function labelText(virtualNode) {
                        var context = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                        var alreadyProcessed2 = _accessibleTextVirtual.alreadyProcessed;
                        if (context.inControlContext || context.inLabelledByContext || alreadyProcessed2(virtualNode, context)) return "";
                        if (!context.startNode) context.startNode = virtualNode;
                        var labelContext = _extends({
                            inControlContext: true
                        }, context);
                        var explicitLabels = getExplicitLabels(virtualNode);
                        var implicitLabel = closest_default(virtualNode, "label");
                        var labels;
                        if (implicitLabel) {
                            labels = [].concat(_toConsumableArray(explicitLabels), [ implicitLabel.actualNode ]);
                            labels.sort(node_sorter_default);
                        } else labels = explicitLabels;
                        return labels.map((function(label3) {
                            return accessible_text_default(label3, labelContext);
                        })).filter((function(text) {
                            return "" !== text;
                        })).join(" ");
                    }
                    function getExplicitLabels(virtualNode) {
                        if (!virtualNode.attr("id")) return [];
                        if (!virtualNode.actualNode) throw new TypeError("Cannot resolve explicit label reference for non-DOM nodes");
                        return find_elms_in_context_default({
                            elm: "label",
                            attr: "for",
                            value: virtualNode.attr("id"),
                            context: virtualNode.actualNode
                        });
                    }
                    var label_text_default = labelText;
                    var defaultButtonValues = {
                        submit: "Submit",
                        image: "Submit",
                        reset: "Reset",
                        button: ""
                    };
                    var nativeTextMethods = {
                        valueText: function(_ref35) {
                            var actualNode = _ref35.actualNode;
                            return actualNode.value || "";
                        },
                        buttonDefaultText: function(_ref36) {
                            var actualNode = _ref36.actualNode;
                            return defaultButtonValues[actualNode.type] || "";
                        },
                        tableCaptionText: descendantText.bind(null, "caption"),
                        figureText: descendantText.bind(null, "figcaption"),
                        svgTitleText: descendantText.bind(null, "title"),
                        fieldsetLegendText: descendantText.bind(null, "legend"),
                        altText: attrText.bind(null, "alt"),
                        tableSummaryText: attrText.bind(null, "summary"),
                        titleText: title_text_default,
                        subtreeText: subtree_text_default,
                        labelText: label_text_default,
                        singleSpace: function() {
                            return " ";
                        },
                        placeholderText: attrText.bind(null, "placeholder")
                    };
                    function attrText(attr, vNode) {
                        return vNode.attr(attr) || "";
                    }
                    function descendantText(nodeName2, _ref37, context) {
                        var actualNode = _ref37.actualNode;
                        nodeName2 = nodeName2.toLowerCase();
                        var nodeNames2 = [ nodeName2, actualNode.nodeName.toLowerCase() ].join(",");
                        var candidate = actualNode.querySelector(nodeNames2);
                        if (!candidate || candidate.nodeName.toLowerCase() !== nodeName2) return "";
                        return accessible_text_default(candidate, context);
                    }
                    var native_text_methods_default = nativeTextMethods;
                    function _nativeTextAlternative(virtualNode) {
                        var context = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                        var actualNode = virtualNode.actualNode;
                        if (1 !== virtualNode.props.nodeType || [ "presentation", "none" ].includes(get_role_default(virtualNode))) return "";
                        var textMethods = findTextMethods(virtualNode);
                        var accessibleName = textMethods.reduce((function(accName, step) {
                            return accName || step(virtualNode, context);
                        }), "");
                        if (context.debug) axe.log(accessibleName || "{empty-value}", actualNode, context);
                        return accessibleName;
                    }
                    function findTextMethods(virtualNode) {
                        var elmSpec = get_element_spec_default(virtualNode, {
                            noMatchAccessibleName: true
                        });
                        var methods = elmSpec.namingMethods || [];
                        return methods.map((function(methodName) {
                            return native_text_methods_default[methodName];
                        }));
                    }
                    function getUnicodeNonBmpRegExp() {
                        return /[\u1D00-\u1D7F\u1D80-\u1DBF\u1DC0-\u1DFF\u20A0-\u20CF\u20D0-\u20FF\u2100-\u214F\u2150-\u218F\u2190-\u21FF\u2200-\u22FF\u2300-\u23FF\u2400-\u243F\u2440-\u245F\u2460-\u24FF\u2500-\u257F\u2580-\u259F\u25A0-\u25FF\u2600-\u26FF\u2700-\u27BF\uE000-\uF8FF]/g;
                    }
                    function getPunctuationRegExp() {
                        return /[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&\xa3\xa2\xa5\xa7\u20ac()*+,\-.\/:;<=>?@\[\]^_`{|}~\xb1]/g;
                    }
                    function getSupplementaryPrivateUseRegExp() {
                        return /[\uDB80-\uDBBF][\uDC00-\uDFFF]/g;
                    }
                    function getCategoryFormatRegExp() {
                        return /[\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD80D[\uDC30-\uDC38]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/g;
                    }
                    var emoji_regex_default = function() {
                        return /[#*0-9]\uFE0F?\u20E3|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26AA\u26B0\u26B1\u26BD\u26BE\u26C4\u26C8\u26CF\u26D1\u26E9\u26F0-\u26F5\u26F7\u26F8\u26FA\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B55\u3030\u303D\u3297\u3299]\uFE0F?|[\u261D\u270C\u270D](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\u270A\u270B](?:\uD83C[\uDFFB-\uDFFF])?|[\u23E9-\u23EC\u23F0\u23F3\u25FD\u2693\u26A1\u26AB\u26C5\u26CE\u26D4\u26EA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2795-\u2797\u27B0\u27BF\u2B50]|\u26D3\uFE0F?(?:\u200D\uD83D\uDCA5)?|\u26F9(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\u2764\uFE0F?(?:\u200D(?:\uD83D\uDD25|\uD83E\uDE79))?|\uD83C(?:[\uDC04\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]\uFE0F?|[\uDF85\uDFC2\uDFC7](?:\uD83C[\uDFFB-\uDFFF])?|[\uDFC4\uDFCA](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDFCB\uDFCC](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF43\uDF45-\uDF4A\uDF4C-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF]|\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF]|\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uDDFC\uD83C[\uDDEB\uDDF8]|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C[\uDDEA\uDDF9]|\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|\uDF44(?:\u200D\uD83D\uDFEB)?|\uDF4B(?:\u200D\uD83D\uDFE9)?|\uDFC3(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDFF3\uFE0F?(?:\u200D(?:\u26A7\uFE0F?|\uD83C\uDF08))?|\uDFF4(?:\u200D\u2620\uFE0F?|\uDB40\uDC67\uDB40\uDC62\uDB40(?:\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDC73\uDB40\uDC63\uDB40\uDC74|\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F)?)|\uD83D(?:[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3]\uFE0F?|[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC](?:\uD83C[\uDFFB-\uDFFF])?|[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4\uDEB5](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD74\uDD90](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC25\uDC27-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE41\uDE43\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEDC-\uDEDF\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB\uDFF0]|\uDC08(?:\u200D\u2B1B)?|\uDC15(?:\u200D\uD83E\uDDBA)?|\uDC26(?:\u200D(?:\u2B1B|\uD83D\uDD25))?|\uDC3B(?:\u200D\u2744\uFE0F?)?|\uDC41\uFE0F?(?:\u200D\uD83D\uDDE8\uFE0F?)?|\uDC68(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDC68\uDC69]\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFE])))?))?|\uDC69(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?[\uDC68\uDC69]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?))|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFE])))?))?|\uDC6F(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDD75(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDE2E(?:\u200D\uD83D\uDCA8)?|\uDE35(?:\u200D\uD83D\uDCAB)?|\uDE36(?:\u200D\uD83C\uDF2B\uFE0F?)?|\uDE42(?:\u200D[\u2194\u2195]\uFE0F?)?|\uDEB6(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?)|\uD83E(?:[\uDD0C\uDD0F\uDD18-\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5\uDEC3-\uDEC5\uDEF0\uDEF2-\uDEF8](?:\uD83C[\uDFFB-\uDFFF])?|[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD\uDDCF\uDDD4\uDDD6-\uDDDD](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDDDE\uDDDF](?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD0D\uDD0E\uDD10-\uDD17\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCC\uDDD0\uDDE0-\uDDFF\uDE70-\uDE7C\uDE80-\uDE88\uDE90-\uDEBD\uDEBF-\uDEC2\uDECE-\uDEDB\uDEE0-\uDEE8]|\uDD3C(?:\u200D[\u2640\u2642]\uFE0F?|\uD83C[\uDFFB-\uDFFF])?|\uDDCE(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDDD1(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1|\uDDD1\u200D\uD83E\uDDD2(?:\u200D\uD83E\uDDD2)?|\uDDD2(?:\u200D\uD83E\uDDD2)?))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFC-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFD-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFD\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFE]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?))?|\uDEF1(?:\uD83C(?:\uDFFB(?:\u200D\uD83E\uDEF2\uD83C[\uDFFC-\uDFFF])?|\uDFFC(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFD-\uDFFF])?|\uDFFD(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])?|\uDFFE(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFD\uDFFF])?|\uDFFF(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFE])?))?)/g;
                    };
                    function hasUnicode(str, options) {
                        var emoji = options.emoji, nonBmp = options.nonBmp, punctuations = options.punctuations;
                        var value = false;
                        if (emoji) value || (value = emoji_regex_default().test(str));
                        if (nonBmp) value || (value = getUnicodeNonBmpRegExp().test(str) || getSupplementaryPrivateUseRegExp().test(str) || getCategoryFormatRegExp().test(str));
                        if (punctuations) value || (value = getPunctuationRegExp().test(str));
                        return value;
                    }
                    var has_unicode_default = hasUnicode;
                    function _isIconLigature(textVNode) {
                        var differenceThreshold = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : .15;
                        var occurrenceThreshold = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 3;
                        var nodeValue = textVNode.actualNode.nodeValue.trim();
                        if (!sanitize_default(nodeValue) || has_unicode_default(nodeValue, {
                            emoji: true,
                            nonBmp: true
                        })) return false;
                        var canvasContext = cache_default.get("canvasContext", (function() {
                            return document.createElement("canvas").getContext("2d", {
                                willReadFrequently: true
                            });
                        }));
                        var canvas = canvasContext.canvas;
                        var fonts = cache_default.get("fonts", (function() {
                            return {};
                        }));
                        var style = window.getComputedStyle(textVNode.parent.actualNode);
                        var fontFamily = style.getPropertyValue("font-family");
                        if (!fonts[fontFamily]) fonts[fontFamily] = {
                            occurrences: 0,
                            numLigatures: 0
                        };
                        var font = fonts[fontFamily];
                        if (font.occurrences >= occurrenceThreshold) if (font.numLigatures / font.occurrences === 1) return true; else if (0 === font.numLigatures) return false;
                        font.occurrences++;
                        var fontSize = 30;
                        var fontStyle = "".concat(fontSize, "px ").concat(fontFamily);
                        canvasContext.font = fontStyle;
                        var firstChar = nodeValue.charAt(0);
                        var width = canvasContext.measureText(firstChar).width;
                        if (0 === width) {
                            font.numLigatures++;
                            return true;
                        }
                        if (width < 30) {
                            var diff = 30 / width;
                            width *= diff;
                            fontSize *= diff;
                            fontStyle = "".concat(fontSize, "px ").concat(fontFamily);
                        }
                        canvas.width = width;
                        canvas.height = fontSize;
                        canvasContext.font = fontStyle;
                        canvasContext.textAlign = "left";
                        canvasContext.textBaseline = "top";
                        canvasContext.fillText(firstChar, 0, 0);
                        var compareData = new Uint32Array(canvasContext.getImageData(0, 0, width, fontSize).data.buffer);
                        if (!compareData.some((function(pixel) {
                            return pixel;
                        }))) {
                            font.numLigatures++;
                            return true;
                        }
                        canvasContext.clearRect(0, 0, width, fontSize);
                        canvasContext.fillText(nodeValue, 0, 0);
                        var compareWith = new Uint32Array(canvasContext.getImageData(0, 0, width, fontSize).data.buffer);
                        var differences = compareData.reduce((function(diff, pixel, i) {
                            if (0 === pixel && 0 === compareWith[i]) return diff;
                            if (0 !== pixel && 0 !== compareWith[i]) return diff;
                            return ++diff;
                        }), 0);
                        var expectedWidth = nodeValue.split("").reduce((function(totalWidth, _char2) {
                            return totalWidth + canvasContext.measureText(_char2).width;
                        }), 0);
                        var actualWidth = canvasContext.measureText(nodeValue).width;
                        var pixelDifference = differences / compareData.length;
                        var sizeDifference = 1 - actualWidth / expectedWidth;
                        if (pixelDifference >= differenceThreshold && sizeDifference >= differenceThreshold) {
                            font.numLigatures++;
                            return true;
                        }
                        return false;
                    }
                    function _accessibleTextVirtual(virtualNode) {
                        var context = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                        context = prepareContext(virtualNode, context);
                        if (shouldIgnoreHidden(virtualNode, context)) return "";
                        if (shouldIgnoreIconLigature(virtualNode, context)) return "";
                        var computationSteps = [ arialabelledby_text_default, _arialabelText, _nativeTextAlternative, form_control_value_default, subtree_text_default, textNodeValue, title_text_default ];
                        var accessibleName = computationSteps.reduce((function(accName, step) {
                            if (context.startNode === virtualNode) accName = sanitize_default(accName);
                            if ("" !== accName) return accName;
                            return step(virtualNode, context);
                        }), "");
                        if (context.debug) axe.log(accessibleName || "{empty-value}", virtualNode.actualNode, context);
                        return accessibleName;
                    }
                    function textNodeValue(virtualNode) {
                        if (3 !== virtualNode.props.nodeType) return "";
                        return virtualNode.props.nodeValue;
                    }
                    function shouldIgnoreHidden(virtualNode, context) {
                        if (!virtualNode) return false;
                        if (1 !== virtualNode.props.nodeType || context.includeHidden) return false;
                        return !_isVisibleToScreenReaders(virtualNode);
                    }
                    function shouldIgnoreIconLigature(virtualNode, context) {
                        var _context$occurrenceTh;
                        var ignoreIconLigature = context.ignoreIconLigature, pixelThreshold = context.pixelThreshold;
                        var occurrenceThreshold = null !== (_context$occurrenceTh = context.occurrenceThreshold) && void 0 !== _context$occurrenceTh ? _context$occurrenceTh : context.occuranceThreshold;
                        if (3 !== virtualNode.props.nodeType || !ignoreIconLigature) return false;
                        return _isIconLigature(virtualNode, pixelThreshold, occurrenceThreshold);
                    }
                    function prepareContext(virtualNode, context) {
                        if (!context.startNode) context = _extends({
                            startNode: virtualNode
                        }, context);
                        if (1 === virtualNode.props.nodeType && context.inLabelledByContext && void 0 === context.includeHidden) context = _extends({
                            includeHidden: !_isVisibleToScreenReaders(virtualNode)
                        }, context);
                        return context;
                    }
                    _accessibleTextVirtual.alreadyProcessed = function(virtualnode, context) {
                        context.processed = context.processed || [];
                        if (context.processed.includes(virtualnode)) return true;
                        context.processed.push(virtualnode);
                        return false;
                    };
                    function removeUnicode(str, options) {
                        var emoji = options.emoji, nonBmp = options.nonBmp, punctuations = options.punctuations;
                        if (emoji) str = str.replace(emoji_regex_default(), "");
                        if (nonBmp) str = str.replace(getUnicodeNonBmpRegExp(), "").replace(getSupplementaryPrivateUseRegExp(), "").replace(getCategoryFormatRegExp(), "");
                        if (punctuations) str = str.replace(getPunctuationRegExp(), "");
                        return str;
                    }
                    var remove_unicode_default = removeUnicode;
                    function isHumanInterpretable(str) {
                        if (isEmpty(str) || isNonDigitCharacter(str) || isSymbolicText(str) || isUnicodeOrPunctuation(str)) return 0;
                        return 1;
                    }
                    function isEmpty(str) {
                        return 0 === sanitize_default(str).length;
                    }
                    function isNonDigitCharacter(str) {
                        return 1 === str.length && str.match(/\D/);
                    }
                    function isSymbolicText(str) {
                        var symbolicText = [ "aa", "abc" ];
                        return symbolicText.includes(str.toLowerCase());
                    }
                    function isUnicodeOrPunctuation(str) {
                        var noUnicodeStr = remove_unicode_default(str, {
                            emoji: true,
                            nonBmp: true,
                            punctuations: true
                        });
                        return !sanitize_default(noUnicodeStr);
                    }
                    var is_human_interpretable_default = isHumanInterpretable;
                    var _autocomplete = {
                        stateTerms: [ "on", "off" ],
                        standaloneTerms: [ "name", "honorific-prefix", "given-name", "additional-name", "family-name", "honorific-suffix", "nickname", "username", "new-password", "current-password", "organization-title", "organization", "street-address", "address-line1", "address-line2", "address-line3", "address-level4", "address-level3", "address-level2", "address-level1", "country", "country-name", "postal-code", "cc-name", "cc-given-name", "cc-additional-name", "cc-family-name", "cc-number", "cc-exp", "cc-exp-month", "cc-exp-year", "cc-csc", "cc-type", "transaction-currency", "transaction-amount", "language", "bday", "bday-day", "bday-month", "bday-year", "sex", "url", "photo", "one-time-code" ],
                        qualifiers: [ "home", "work", "mobile", "fax", "pager" ],
                        qualifiedTerms: [ "tel", "tel-country-code", "tel-national", "tel-area-code", "tel-local", "tel-local-prefix", "tel-local-suffix", "tel-extension", "email", "impp" ],
                        locations: [ "billing", "shipping" ]
                    };
                    function isValidAutocomplete(autocompleteValue) {
                        var _ref38 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, _ref38$looseTyped = _ref38.looseTyped, looseTyped = void 0 === _ref38$looseTyped ? false : _ref38$looseTyped, _ref38$stateTerms = _ref38.stateTerms, stateTerms = void 0 === _ref38$stateTerms ? [] : _ref38$stateTerms, _ref38$locations = _ref38.locations, locations = void 0 === _ref38$locations ? [] : _ref38$locations, _ref38$qualifiers = _ref38.qualifiers, qualifiers = void 0 === _ref38$qualifiers ? [] : _ref38$qualifiers, _ref38$standaloneTerm = _ref38.standaloneTerms, standaloneTerms = void 0 === _ref38$standaloneTerm ? [] : _ref38$standaloneTerm, _ref38$qualifiedTerms = _ref38.qualifiedTerms, qualifiedTerms = void 0 === _ref38$qualifiedTerms ? [] : _ref38$qualifiedTerms, _ref38$ignoredValues = _ref38.ignoredValues, ignoredValues = void 0 === _ref38$ignoredValues ? [] : _ref38$ignoredValues;
                        autocompleteValue = autocompleteValue.toLowerCase().trim();
                        stateTerms = stateTerms.concat(_autocomplete.stateTerms);
                        if (stateTerms.includes(autocompleteValue) || "" === autocompleteValue) return true;
                        qualifiers = qualifiers.concat(_autocomplete.qualifiers);
                        locations = locations.concat(_autocomplete.locations);
                        standaloneTerms = standaloneTerms.concat(_autocomplete.standaloneTerms);
                        qualifiedTerms = qualifiedTerms.concat(_autocomplete.qualifiedTerms);
                        var autocompleteTerms = autocompleteValue.split(/\s+/g);
                        if ("webauthn" === autocompleteTerms[autocompleteTerms.length - 1]) {
                            autocompleteTerms.pop();
                            if (0 === autocompleteTerms.length) return false;
                        }
                        if (!looseTyped) {
                            if (autocompleteTerms[0].length > 8 && "section-" === autocompleteTerms[0].substr(0, 8)) autocompleteTerms.shift();
                            if (locations.includes(autocompleteTerms[0])) autocompleteTerms.shift();
                            if (qualifiers.includes(autocompleteTerms[0])) {
                                autocompleteTerms.shift();
                                standaloneTerms = [];
                            }
                            if (1 !== autocompleteTerms.length) return false;
                        }
                        var purposeTerm = autocompleteTerms[autocompleteTerms.length - 1];
                        if (ignoredValues.includes(purposeTerm)) return;
                        return standaloneTerms.includes(purposeTerm) || qualifiedTerms.includes(purposeTerm);
                    }
                    var is_valid_autocomplete_default = isValidAutocomplete;
                    function labelVirtual(virtualNode) {
                        var ref, candidate;
                        if (virtualNode.attr("aria-labelledby")) {
                            ref = idrefs_default(virtualNode.actualNode, "aria-labelledby");
                            candidate = ref.map((function(thing) {
                                var vNode = get_node_from_tree_default(thing);
                                return vNode ? visible_virtual_default(vNode) : "";
                            })).join(" ").trim();
                            if (candidate) return candidate;
                        }
                        candidate = virtualNode.attr("aria-label");
                        if (candidate) {
                            candidate = sanitize_default(candidate);
                            if (candidate) return candidate;
                        }
                        return null;
                    }
                    var label_virtual_default = labelVirtual;
                    function visible(element, screenReader, noRecursing) {
                        element = get_node_from_tree_default(element);
                        return visible_virtual_default(element, screenReader, noRecursing);
                    }
                    var visible_default = visible;
                    function labelVirtual2(virtualNode) {
                        var ref, candidate, doc;
                        candidate = label_virtual_default(virtualNode);
                        if (candidate) return candidate;
                        if (virtualNode.attr("id")) {
                            if (!virtualNode.actualNode) throw new TypeError("Cannot resolve explicit label reference for non-DOM nodes");
                            var id = escape_selector_default(virtualNode.attr("id"));
                            doc = get_root_node_default2(virtualNode.actualNode);
                            ref = doc.querySelector('label[for="' + id + '"]');
                            candidate = ref && visible_default(ref, true);
                            if (candidate) return candidate;
                        }
                        ref = closest_default(virtualNode, "label");
                        candidate = ref && visible_virtual_default(ref, true);
                        if (candidate) return candidate;
                        return null;
                    }
                    var label_virtual_default2 = labelVirtual2;
                    function label(node) {
                        node = get_node_from_tree_default(node);
                        return label_virtual_default2(node);
                    }
                    var label_default = label;
                    var nativeElementType = [ {
                        matches: [ {
                            nodeName: "textarea"
                        }, {
                            nodeName: "input",
                            properties: {
                                type: [ "text", "password", "search", "tel", "email", "url" ]
                            }
                        } ],
                        namingMethods: "labelText"
                    }, {
                        matches: {
                            nodeName: "input",
                            properties: {
                                type: [ "button", "submit", "reset" ]
                            }
                        },
                        namingMethods: [ "valueText", "titleText", "buttonDefaultText" ]
                    }, {
                        matches: {
                            nodeName: "input",
                            properties: {
                                type: "image"
                            }
                        },
                        namingMethods: [ "altText", "valueText", "labelText", "titleText", "buttonDefaultText" ]
                    }, {
                        matches: "button",
                        namingMethods: "subtreeText"
                    }, {
                        matches: "fieldset",
                        namingMethods: "fieldsetLegendText"
                    }, {
                        matches: "OUTPUT",
                        namingMethods: "subtreeText"
                    }, {
                        matches: [ {
                            nodeName: "select"
                        }, {
                            nodeName: "input",
                            properties: {
                                type: /^(?!text|password|search|tel|email|url|button|submit|reset)/
                            }
                        } ],
                        namingMethods: "labelText"
                    }, {
                        matches: "summary",
                        namingMethods: "subtreeText"
                    }, {
                        matches: "figure",
                        namingMethods: [ "figureText", "titleText" ]
                    }, {
                        matches: "img",
                        namingMethods: "altText"
                    }, {
                        matches: "table",
                        namingMethods: [ "tableCaptionText", "tableSummaryText" ]
                    }, {
                        matches: [ "hr", "br" ],
                        namingMethods: [ "titleText", "singleSpace" ]
                    } ];
                    var native_element_type_default = nativeElementType;
                    function visibleTextNodes(vNode) {
                        var parentVisible = _isVisibleOnScreen(vNode);
                        var nodes = [];
                        vNode.children.forEach((function(child) {
                            if (3 === child.actualNode.nodeType) {
                                if (parentVisible) nodes.push(child);
                            } else nodes = nodes.concat(visibleTextNodes(child));
                        }));
                        return nodes;
                    }
                    var visible_text_nodes_default = visibleTextNodes;
                    var getVisibleChildTextRects = memoize_default((function(node) {
                        var vNode = get_node_from_tree_default(node);
                        var nodeRect = vNode.boundingClientRect;
                        var clientRects = [];
                        var overflowHiddenNodes = get_overflow_hidden_ancestors_default(vNode);
                        node.childNodes.forEach((function(textNode) {
                            if (3 !== textNode.nodeType || "" === sanitize_default(textNode.nodeValue)) return;
                            var contentRects = getContentRects(textNode);
                            if (isOutsideNodeBounds(contentRects, nodeRect)) return;
                            clientRects.push.apply(clientRects, _toConsumableArray(filterHiddenRects(contentRects, overflowHiddenNodes)));
                        }));
                        return clientRects.length ? clientRects : filterHiddenRects([ nodeRect ], overflowHiddenNodes);
                    }));
                    var get_visible_child_text_rects_default = getVisibleChildTextRects;
                    function getContentRects(node) {
                        var range2 = document.createRange();
                        range2.selectNodeContents(node);
                        return Array.from(range2.getClientRects());
                    }
                    function isOutsideNodeBounds(rects, nodeRect) {
                        return rects.some((function(rect) {
                            var centerPoint = _getRectCenter(rect);
                            return !_isPointInRect(centerPoint, nodeRect);
                        }));
                    }
                    function filterHiddenRects(contentRects, overflowHiddenNodes) {
                        var visibleRects = [];
                        contentRects.forEach((function(contentRect) {
                            if (contentRect.width < 1 || contentRect.height < 1) return;
                            var visibleRect = overflowHiddenNodes.reduce((function(rect, overflowNode) {
                                return rect && _getIntersectionRect(rect, overflowNode.boundingClientRect);
                            }), contentRect);
                            if (visibleRect) visibleRects.push(visibleRect);
                        }));
                        return visibleRects;
                    }
                    function getTextElementStack(node) {
                        _createGrid();
                        var vNode = get_node_from_tree_default(node);
                        var grid = vNode._grid;
                        if (!grid) return [];
                        var clientRects = get_visible_child_text_rects_default(node);
                        return clientRects.map((function(rect) {
                            return getRectStack(grid, rect);
                        }));
                    }
                    var get_text_element_stack_default = getTextElementStack;
                    var visualRoles = [ "checkbox", "img", "meter", "progressbar", "scrollbar", "radio", "slider", "spinbutton", "textbox" ];
                    function isVisualContent(el) {
                        var _nodeLookup19 = _nodeLookup(el), vNode = _nodeLookup19.vNode;
                        var role = axe.commons.aria.getExplicitRole(vNode);
                        if (role) return -1 !== visualRoles.indexOf(role);
                        switch (vNode.props.nodeName) {
                          case "img":
                          case "iframe":
                          case "object":
                          case "video":
                          case "audio":
                          case "canvas":
                          case "svg":
                          case "math":
                          case "button":
                          case "select":
                          case "textarea":
                          case "keygen":
                          case "progress":
                          case "meter":
                            return true;

                          case "input":
                            return "hidden" !== vNode.props.type;

                          default:
                            return false;
                        }
                    }
                    var is_visual_content_default = isVisualContent;
                    var hiddenTextElms = [ "head", "title", "template", "script", "style", "iframe", "object", "video", "audio", "noscript" ];
                    function hasChildTextNodes(elm) {
                        if (hiddenTextElms.includes(elm.props.nodeName)) return false;
                        return elm.children.some((function(_ref39) {
                            var props = _ref39.props;
                            return 3 === props.nodeType && props.nodeValue.trim();
                        }));
                    }
                    function hasContentVirtual(elm, noRecursion, ignoreAria) {
                        return hasChildTextNodes(elm) || is_visual_content_default(elm.actualNode) || !ignoreAria && !!label_virtual_default(elm) || !noRecursion && elm.children.some((function(child) {
                            return 1 === child.actualNode.nodeType && hasContentVirtual(child);
                        }));
                    }
                    var has_content_virtual_default = hasContentVirtual;
                    function hasContent(elm, noRecursion, ignoreAria) {
                        elm = get_node_from_tree_default(elm);
                        return has_content_virtual_default(elm, noRecursion, ignoreAria);
                    }
                    var has_content_default = hasContent;
                    function _hasLangText(virtualNode) {
                        if ("undefined" === typeof virtualNode.children || hasChildTextNodes(virtualNode)) return true;
                        if (1 === virtualNode.props.nodeType && is_visual_content_default(virtualNode)) return !!axe.commons.text.accessibleTextVirtual(virtualNode);
                        return virtualNode.children.some((function(child) {
                            return !child.attr("lang") && _hasLangText(child) && !_isHiddenForEveryone(child);
                        }));
                    }
                    function insertedIntoFocusOrder(el) {
                        var tabIndex = parseInt(el.getAttribute("tabindex"), 10);
                        return tabIndex > -1 && _isFocusable(el) && !is_natively_focusable_default(el);
                    }
                    var inserted_into_focus_order_default = insertedIntoFocusOrder;
                    function isHiddenWithCSS(el, descendentVisibilityValue) {
                        var _nodeLookup20 = _nodeLookup(el), vNode = _nodeLookup20.vNode, domNode = _nodeLookup20.domNode;
                        if (!vNode) return _isHiddenWithCSS(domNode, descendentVisibilityValue);
                        if (void 0 === vNode._isHiddenWithCSS) vNode._isHiddenWithCSS = _isHiddenWithCSS(domNode, descendentVisibilityValue);
                        return vNode._isHiddenWithCSS;
                    }
                    function _isHiddenWithCSS(el, descendentVisibilityValue) {
                        if (9 === el.nodeType) return false;
                        if (11 === el.nodeType) el = el.host;
                        if ([ "STYLE", "SCRIPT" ].includes(el.nodeName.toUpperCase())) return false;
                        var style = window.getComputedStyle(el, null);
                        if (!style) throw new Error("Style does not exist for the given element.");
                        var displayValue = style.getPropertyValue("display");
                        if ("none" === displayValue) return true;
                        var HIDDEN_VISIBILITY_VALUES = [ "hidden", "collapse" ];
                        var visibilityValue = style.getPropertyValue("visibility");
                        if (HIDDEN_VISIBILITY_VALUES.includes(visibilityValue) && !descendentVisibilityValue) return true;
                        if (HIDDEN_VISIBILITY_VALUES.includes(visibilityValue) && descendentVisibilityValue && HIDDEN_VISIBILITY_VALUES.includes(descendentVisibilityValue)) return true;
                        var parent = get_composed_parent_default(el);
                        if (parent && !HIDDEN_VISIBILITY_VALUES.includes(visibilityValue)) return isHiddenWithCSS(parent, visibilityValue);
                        return false;
                    }
                    var is_hidden_with_css_default = isHiddenWithCSS;
                    function isHTML5(doc) {
                        var node = doc.doctype;
                        if (null === node) return false;
                        return "html" === node.name && !node.publicId && !node.systemId;
                    }
                    var is_html5_default = isHTML5;
                    function getRoleType(role) {
                        var _window3;
                        if (role instanceof abstract_virtual_node_default || null !== (_window3 = window) && void 0 !== _window3 && _window3.Node && role instanceof window.Node) role = axe.commons.aria.getRole(role);
                        var roleDef = standards_default.ariaRoles[role];
                        return (null === roleDef || void 0 === roleDef ? void 0 : roleDef.type) || null;
                    }
                    var get_role_type_default = getRoleType;
                    function walkDomNode(node, functor) {
                        if (false !== functor(node.actualNode)) node.children.forEach((function(child) {
                            return walkDomNode(child, functor);
                        }));
                    }
                    var blockLike = [ "block", "list-item", "table", "flex", "grid", "inline-block" ];
                    function isBlock(elm) {
                        var display2 = window.getComputedStyle(elm).getPropertyValue("display");
                        return blockLike.includes(display2) || "table-" === display2.substr(0, 6);
                    }
                    function getBlockParent(node) {
                        var parentBlock = get_composed_parent_default(node);
                        while (parentBlock && !isBlock(parentBlock)) parentBlock = get_composed_parent_default(parentBlock);
                        return get_node_from_tree_default(parentBlock);
                    }
                    function isInTextBlock(node, options) {
                        if (isBlock(node)) return false;
                        var virtualParent = getBlockParent(node);
                        var parentText = "";
                        var widgetText = "";
                        var inBrBlock = 0;
                        walkDomNode(virtualParent, (function(currNode) {
                            if (2 === inBrBlock) return false;
                            if (3 === currNode.nodeType) parentText += currNode.nodeValue;
                            if (1 !== currNode.nodeType) return;
                            var nodeName2 = (currNode.nodeName || "").toUpperCase();
                            if (currNode === node) inBrBlock = 1;
                            if ([ "BR", "HR" ].includes(nodeName2)) if (0 === inBrBlock) {
                                parentText = "";
                                widgetText = "";
                            } else inBrBlock = 2; else if ("none" === currNode.style.display || "hidden" === currNode.style.overflow || ![ "", null, "none" ].includes(currNode.style["float"]) || ![ "", null, "relative" ].includes(currNode.style.position)) return false; else if ("widget" === get_role_type_default(currNode)) {
                                widgetText += currNode.textContent;
                                return false;
                            }
                        }));
                        parentText = sanitize_default(parentText);
                        if (null !== options && void 0 !== options && options.noLengthCompare) return 0 !== parentText.length;
                        widgetText = sanitize_default(widgetText);
                        return parentText.length > widgetText.length;
                    }
                    var is_in_text_block_default = isInTextBlock;
                    function isModalOpen(options) {
                        options = options || {};
                        var modalPercent = options.modalPercent || .75;
                        if (cache_default.get("isModalOpen")) return cache_default.get("isModalOpen");
                        var definiteModals = query_selector_all_filter_default(axe._tree[0], "dialog, [role=dialog], [aria-modal=true]", _isVisibleOnScreen);
                        if (definiteModals.length) {
                            cache_default.set("isModalOpen", true);
                            return true;
                        }
                        var viewport = get_viewport_size_default(window);
                        var percentWidth = viewport.width * modalPercent;
                        var percentHeight = viewport.height * modalPercent;
                        var x = (viewport.width - percentWidth) / 2;
                        var y = (viewport.height - percentHeight) / 2;
                        var points = [ {
                            x,
                            y
                        }, {
                            x: viewport.width - x,
                            y
                        }, {
                            x: viewport.width / 2,
                            y: viewport.height / 2
                        }, {
                            x,
                            y: viewport.height - y
                        }, {
                            x: viewport.width - x,
                            y: viewport.height - y
                        } ];
                        var stacks = points.map((function(point) {
                            return Array.from(document.elementsFromPoint(point.x, point.y));
                        }));
                        var _ret, _loop4 = function() {
                            var modalElement = stacks[_i11].find((function(elm) {
                                var style = window.getComputedStyle(elm);
                                return parseInt(style.width, 10) >= percentWidth && parseInt(style.height, 10) >= percentHeight && "none" !== style.getPropertyValue("pointer-events") && ("absolute" === style.position || "fixed" === style.position);
                            }));
                            if (modalElement && stacks.every((function(stack) {
                                return stack.includes(modalElement);
                            }))) {
                                cache_default.set("isModalOpen", true);
                                return {
                                    v: true
                                };
                            }
                        };
                        for (var _i11 = 0; _i11 < stacks.length; _i11++) {
                            _ret = _loop4();
                            if (_ret) return _ret.v;
                        }
                        cache_default.set("isModalOpen", void 0);
                        return;
                    }
                    var is_modal_open_default = isModalOpen;
                    function _isMultiline(domNode) {
                        var margin = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2;
                        var range2 = domNode.ownerDocument.createRange();
                        range2.setStart(domNode, 0);
                        range2.setEnd(domNode, domNode.childNodes.length);
                        var lastLineEnd = 0;
                        var lineCount = 0;
                        var _step5, _iterator5 = _createForOfIteratorHelper(range2.getClientRects());
                        try {
                            for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                                var rect = _step5.value;
                                if (rect.height <= margin) continue;
                                if (lastLineEnd > rect.top + margin) lastLineEnd = Math.max(lastLineEnd, rect.bottom); else if (0 === lineCount) {
                                    lastLineEnd = rect.bottom;
                                    lineCount++;
                                } else return true;
                            }
                        } catch (err) {
                            _iterator5.e(err);
                        } finally {
                            _iterator5.f();
                        }
                        return false;
                    }
                    function isNode(element) {
                        return element instanceof window.Node;
                    }
                    var is_node_default = isNode;
                    var cacheKey = "color.incompleteData";
                    var incompleteData = {
                        set: function(key, reason) {
                            if ("string" !== typeof key) throw new Error("Incomplete data: key must be a string");
                            var data = cache_default.get(cacheKey, (function() {
                                return {};
                            }));
                            if (reason) data[key] = reason;
                            return data[key];
                        },
                        get: function(key) {
                            var data = cache_default.get(cacheKey);
                            return null === data || void 0 === data ? void 0 : data[key];
                        },
                        clear: function() {
                            cache_default.set(cacheKey, {});
                        }
                    };
                    var incomplete_data_default = incompleteData;
                    function elementHasImage(elm, style) {
                        var graphicNodes = [ "IMG", "CANVAS", "OBJECT", "IFRAME", "VIDEO", "SVG" ];
                        var nodeName2 = elm.nodeName.toUpperCase();
                        if (graphicNodes.includes(nodeName2)) {
                            incomplete_data_default.set("bgColor", "imgNode");
                            return true;
                        }
                        style = style || window.getComputedStyle(elm);
                        var bgImageStyle = style.getPropertyValue("background-image");
                        var hasBgImage = "none" !== bgImageStyle;
                        if (hasBgImage) {
                            var hasGradient = /gradient/.test(bgImageStyle);
                            incomplete_data_default.set("bgColor", hasGradient ? "bgGradient" : "bgImage");
                        }
                        return hasBgImage;
                    }
                    var element_has_image_default = elementHasImage;
                    var imports_exports = {};
                    __export(imports_exports, {
                        ArrayFrom: function() {
                            return import_from2["default"];
                        },
                        Colorjs: function() {
                            return Color;
                        },
                        CssSelectorParser: function() {
                            return import_css_selector_parser2.CssSelectorParser;
                        },
                        doT: function() {
                            return import_dot["default"];
                        },
                        emojiRegexText: function() {
                            return emoji_regex_default;
                        },
                        memoize: function() {
                            return import_memoizee2["default"];
                        }
                    });
                    var import_es6_promise = __toModule(require_es6_promise());
                    var import_typedarray = __toModule(require_typedarray());
                    __toModule(require_weakmap_polyfill());
                    var import_has_own = __toModule(require_has_own3());
                    var import_values = __toModule(require_values3());
                    var import_from = __toModule(require_from4());
                    if (!("hasOwn" in Object)) Object.hasOwn = import_has_own["default"];
                    if (!("values" in Object)) Object.values = import_values["default"];
                    if (!("Promise" in window)) import_es6_promise["default"].polyfill();
                    if (!("Uint32Array" in window)) window.Uint32Array = import_typedarray.Uint32Array;
                    if (window.Uint32Array) {
                        if (!("some" in window.Uint32Array.prototype)) Object.defineProperty(window.Uint32Array.prototype, "some", {
                            value: Array.prototype.some
                        });
                        if (!("reduce" in window.Uint32Array.prototype)) Object.defineProperty(window.Uint32Array.prototype, "reduce", {
                            value: Array.prototype.reduce
                        });
                    }
                    if ("function" !== typeof Object.assign) (function() {
                        Object.assign = function(target) {
                            if (void 0 === target || null === target) throw new TypeError("Cannot convert undefined or null to object");
                            var output = Object(target);
                            for (var index = 1; index < arguments.length; index++) {
                                var source = arguments[index];
                                if (void 0 !== source && null !== source) for (var nextKey in source) if (source.hasOwnProperty(nextKey)) output[nextKey] = source[nextKey];
                            }
                            return output;
                        };
                    })();
                    if (!Array.prototype.find) Object.defineProperty(Array.prototype, "find", {
                        value: function(predicate) {
                            if (null === this) throw new TypeError("Array.prototype.find called on null or undefined");
                            if ("function" !== typeof predicate) throw new TypeError("predicate must be a function");
                            var list = Object(this);
                            var length = list.length >>> 0;
                            var thisArg = arguments[1];
                            var value;
                            for (var _i12 = 0; _i12 < length; _i12++) {
                                value = list[_i12];
                                if (predicate.call(thisArg, value, _i12, list)) return value;
                            }
                            return;
                        }
                    });
                    if (!Array.prototype.findIndex) Object.defineProperty(Array.prototype, "findIndex", {
                        value: function(predicate, thisArg) {
                            if (null === this) throw new TypeError("Array.prototype.find called on null or undefined");
                            if ("function" !== typeof predicate) throw new TypeError("predicate must be a function");
                            var list = Object(this);
                            var length = list.length >>> 0;
                            var value;
                            for (var _i13 = 0; _i13 < length; _i13++) {
                                value = list[_i13];
                                if (predicate.call(thisArg, value, _i13, list)) return _i13;
                            }
                            return -1;
                        }
                    });
                    if (!Array.prototype.includes) Object.defineProperty(Array.prototype, "includes", {
                        value: function(searchElement) {
                            var O = Object(this);
                            var len = parseInt(O.length, 10) || 0;
                            if (0 === len) return false;
                            var n2 = parseInt(arguments[1], 10) || 0;
                            var k;
                            if (n2 >= 0) k = n2; else {
                                k = len + n2;
                                if (k < 0) k = 0;
                            }
                            var currentElement;
                            while (k < len) {
                                currentElement = O[k];
                                if (searchElement === currentElement || searchElement !== searchElement && currentElement !== currentElement) return true;
                                k++;
                            }
                            return false;
                        }
                    });
                    if (!Array.prototype.some) Object.defineProperty(Array.prototype, "some", {
                        value: function(fun) {
                            if (null == this) throw new TypeError("Array.prototype.some called on null or undefined");
                            if ("function" !== typeof fun) throw new TypeError;
                            var t = Object(this);
                            var len = t.length >>> 0;
                            var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
                            for (var _i14 = 0; _i14 < len; _i14++) if (_i14 in t && fun.call(thisArg, t[_i14], _i14, t)) return true;
                            return false;
                        }
                    });
                    if (!Array.from) Array.from = import_from["default"];
                    if (!String.prototype.includes) String.prototype.includes = function(search, start) {
                        if ("number" !== typeof start) start = 0;
                        if (start + search.length > this.length) return false; else return -1 !== this.indexOf(search, start);
                    };
                    if (!Array.prototype.flat) Object.defineProperty(Array.prototype, "flat", {
                        configurable: true,
                        value: function flat() {
                            var depth = isNaN(arguments[0]) ? 1 : Number(arguments[0]);
                            return depth ? Array.prototype.reduce.call(this, (function(acc, cur) {
                                if (Array.isArray(cur)) acc.push.apply(acc, flat.call(cur, depth - 1)); else acc.push(cur);
                                return acc;
                            }), []) : Array.prototype.slice.call(this);
                        },
                        writable: true
                    });
                    if (window.Node && !("isConnected" in window.Node.prototype)) Object.defineProperty(window.Node.prototype, "isConnected", {
                        get: function() {
                            return !this.ownerDocument || !(this.ownerDocument.compareDocumentPosition(this) & this.DOCUMENT_POSITION_DISCONNECTED);
                        }
                    });
                    var import_css_selector_parser2 = __toModule(require_lib());
                    var import_dot = __toModule(require_doT());
                    var import_memoizee2 = __toModule(require_memoizee());
                    function multiplyMatrices(A, B) {
                        var m3 = A.length;
                        if (!Array.isArray(A[0])) A = [ A ];
                        if (!Array.isArray(B[0])) B = B.map((function(x) {
                            return [ x ];
                        }));
                        var p2 = B[0].length;
                        var B_cols = B[0].map((function(_, i) {
                            return B.map((function(x) {
                                return x[i];
                            }));
                        }));
                        var product = A.map((function(row) {
                            return B_cols.map((function(col) {
                                var ret = 0;
                                if (!Array.isArray(row)) {
                                    var _step6, _iterator6 = _createForOfIteratorHelper(col);
                                    try {
                                        for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
                                            var c4 = _step6.value;
                                            ret += row * c4;
                                        }
                                    } catch (err) {
                                        _iterator6.e(err);
                                    } finally {
                                        _iterator6.f();
                                    }
                                    return ret;
                                }
                                for (var _i15 = 0; _i15 < row.length; _i15++) ret += row[_i15] * (col[_i15] || 0);
                                return ret;
                            }));
                        }));
                        if (1 === m3) product = product[0];
                        if (1 === p2) return product.map((function(x) {
                            return x[0];
                        }));
                        return product;
                    }
                    function isString(str) {
                        return "string" === type(str);
                    }
                    function type(o) {
                        var str = Object.prototype.toString.call(o);
                        return (str.match(/^\[object\s+(.*?)\]$/)[1] || "").toLowerCase();
                    }
                    function toPrecision(n2, precision) {
                        n2 = +n2;
                        precision = +precision;
                        var integerLength = (Math.floor(n2) + "").length;
                        if (precision > integerLength) return +n2.toFixed(precision - integerLength); else {
                            var p10 = Math.pow(10, integerLength - precision);
                            return Math.round(n2 / p10) * p10;
                        }
                    }
                    function parseFunction(str) {
                        if (!str) return;
                        str = str.trim();
                        var isFunctionRegex = /^([a-z]+)\((.+?)\)$/i;
                        var isNumberRegex = /^-?[\d.]+$/;
                        var parts = str.match(isFunctionRegex);
                        if (parts) {
                            var args = [];
                            parts[2].replace(/\/?\s*([-\w.]+(?:%|deg)?)/g, (function($0, arg) {
                                if (/%$/.test(arg)) {
                                    arg = new Number(arg.slice(0, -1) / 100);
                                    arg.type = "<percentage>";
                                } else if (/deg$/.test(arg)) {
                                    arg = new Number(+arg.slice(0, -3));
                                    arg.type = "<angle>";
                                    arg.unit = "deg";
                                } else if (isNumberRegex.test(arg)) {
                                    arg = new Number(arg);
                                    arg.type = "<number>";
                                }
                                if ($0.startsWith("/")) {
                                    arg = arg instanceof Number ? arg : new Number(arg);
                                    arg.alpha = true;
                                }
                                args.push(arg);
                            }));
                            return {
                                name: parts[1].toLowerCase(),
                                rawName: parts[1],
                                rawArgs: parts[2],
                                args
                            };
                        }
                    }
                    function last(arr) {
                        return arr[arr.length - 1];
                    }
                    function interpolate(start, end, p2) {
                        if (isNaN(start)) return end;
                        if (isNaN(end)) return start;
                        return start + (end - start) * p2;
                    }
                    function interpolateInv(start, end, value) {
                        return (value - start) / (end - start);
                    }
                    function mapRange(from, to2, value) {
                        return interpolate(to2[0], to2[1], interpolateInv(from[0], from[1], value));
                    }
                    function parseCoordGrammar(coordGrammars) {
                        return coordGrammars.map((function(coordGrammar2) {
                            return coordGrammar2.split("|").map((function(type2) {
                                type2 = type2.trim();
                                var range2 = type2.match(/^(<[a-z]+>)\[(-?[.\d]+),\s*(-?[.\d]+)\]?$/);
                                if (range2) {
                                    var ret = new String(range2[1]);
                                    ret.range = [ +range2[2], +range2[3] ];
                                    return ret;
                                }
                                return type2;
                            }));
                        }));
                    }
                    var util = Object.freeze({
                        __proto__: null,
                        isString,
                        type,
                        toPrecision,
                        parseFunction,
                        last,
                        interpolate,
                        interpolateInv,
                        mapRange,
                        parseCoordGrammar,
                        multiplyMatrices
                    });
                    var Hooks = function() {
                        function Hooks() {
                            _classCallCheck(this, Hooks);
                        }
                        return _createClass(Hooks, [ {
                            key: "add",
                            value: function(name, callback, first) {
                                if ("string" != typeof arguments[0]) {
                                    for (var name in arguments[0]) this.add(name, arguments[0][name], arguments[1]);
                                    return;
                                }
                                (Array.isArray(name) ? name : [ name ]).forEach((function(name2) {
                                    this[name2] = this[name2] || [];
                                    if (callback) this[name2][first ? "unshift" : "push"](callback);
                                }), this);
                            }
                        }, {
                            key: "run",
                            value: function(name, env) {
                                this[name] = this[name] || [];
                                this[name].forEach((function(callback) {
                                    callback.call(env && env.context ? env.context : env, env);
                                }));
                            }
                        } ]);
                    }();
                    var hooks = new Hooks;
                    var defaults = {
                        gamut_mapping: "lch.c",
                        precision: 5,
                        deltaE: "76"
                    };
                    var WHITES = {
                        D50: [ .3457 / .3585, 1, (1 - .3457 - .3585) / .3585 ],
                        D65: [ .3127 / .329, 1, (1 - .3127 - .329) / .329 ]
                    };
                    function getWhite(name) {
                        if (Array.isArray(name)) return name;
                        return WHITES[name];
                    }
                    function adapt$1(W1, W2, XYZ) {
                        var options = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
                        W1 = getWhite(W1);
                        W2 = getWhite(W2);
                        if (!W1 || !W2) throw new TypeError("Missing white point to convert ".concat(!W1 ? "from" : "").concat(!W1 && !W2 ? "/" : "").concat(!W2 ? "to" : ""));
                        if (W1 === W2) return XYZ;
                        var env = {
                            W1,
                            W2,
                            XYZ,
                            options
                        };
                        hooks.run("chromatic-adaptation-start", env);
                        if (!env.M) if (env.W1 === WHITES.D65 && env.W2 === WHITES.D50) env.M = [ [ 1.0479298208405488, .022946793341019088, -.05019222954313557 ], [ .029627815688159344, .990434484573249, -.01707382502938514 ], [ -.009243058152591178, .015055144896577895, .7518742899580008 ] ]; else if (env.W1 === WHITES.D50 && env.W2 === WHITES.D65) env.M = [ [ .9554734527042182, -.023098536874261423, .0632593086610217 ], [ -.028369706963208136, 1.0099954580058226, .021041398966943008 ], [ .012314001688319899, -.020507696433477912, 1.3303659366080753 ] ];
                        hooks.run("chromatic-adaptation-end", env);
                        if (env.M) return multiplyMatrices(env.M, env.XYZ); else throw new TypeError("Only Bradford CAT with white points D50 and D65 supported for now.");
                    }
                    var ε$4 = 75e-6;
                    var _ColorSpace = (_Class_brand = new WeakSet, _path = new WeakMap, function() {
                        function _ColorSpace(options) {
                            var _options$coords, _ref40, _options$white, _options$formats, _this$formats$functio, _this$formats, _this$formats2;
                            _classCallCheck(this, _ColorSpace);
                            _classPrivateMethodInitSpec(this, _Class_brand);
                            _classPrivateFieldInitSpec(this, _path, void 0);
                            this.id = options.id;
                            this.name = options.name;
                            this.base = options.base ? _ColorSpace.get(options.base) : null;
                            this.aliases = options.aliases;
                            if (this.base) {
                                this.fromBase = options.fromBase;
                                this.toBase = options.toBase;
                            }
                            var _coords = null !== (_options$coords = options.coords) && void 0 !== _options$coords ? _options$coords : this.base.coords;
                            this.coords = _coords;
                            var white2 = null !== (_ref40 = null !== (_options$white = options.white) && void 0 !== _options$white ? _options$white : this.base.white) && void 0 !== _ref40 ? _ref40 : "D65";
                            this.white = getWhite(white2);
                            this.formats = null !== (_options$formats = options.formats) && void 0 !== _options$formats ? _options$formats : {};
                            for (var name in this.formats) {
                                var format = this.formats[name];
                                format.type || (format.type = "function");
                                format.name || (format.name = name);
                            }
                            if (options.cssId && !(null !== (_this$formats$functio = this.formats.functions) && void 0 !== _this$formats$functio && _this$formats$functio.color)) {
                                this.formats.color = {
                                    id: options.cssId
                                };
                                Object.defineProperty(this, "cssId", {
                                    value: options.cssId
                                });
                            } else if (null !== (_this$formats = this.formats) && void 0 !== _this$formats && _this$formats.color && !(null !== (_this$formats2 = this.formats) && void 0 !== _this$formats2 && _this$formats2.color.id)) this.formats.color.id = this.id;
                            this.referred = options.referred;
                            _classPrivateFieldSet(_path, this, _assertClassBrand(_Class_brand, this, _getPath).call(this).reverse());
                            hooks.run("colorspace-init-end", this);
                        }
                        return _createClass(_ColorSpace, [ {
                            key: "inGamut",
                            value: function(coords) {
                                var _ref41 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, _ref41$epsilon = _ref41.epsilon, epsilon = void 0 === _ref41$epsilon ? ε$4 : _ref41$epsilon;
                                if (this.isPolar) {
                                    coords = this.toBase(coords);
                                    return this.base.inGamut(coords, {
                                        epsilon
                                    });
                                }
                                var coordMeta = Object.values(this.coords);
                                return coords.every((function(c4, i) {
                                    var meta = coordMeta[i];
                                    if ("angle" !== meta.type && meta.range) {
                                        if (Number.isNaN(c4)) return true;
                                        var _meta$range = _slicedToArray(meta.range, 2), min = _meta$range[0], max2 = _meta$range[1];
                                        return (void 0 === min || c4 >= min - epsilon) && (void 0 === max2 || c4 <= max2 + epsilon);
                                    }
                                    return true;
                                }));
                            }
                        }, {
                            key: "cssId",
                            get: function() {
                                var _this$formats$functio2;
                                return (null === (_this$formats$functio2 = this.formats.functions) || void 0 === _this$formats$functio2 || null === (_this$formats$functio2 = _this$formats$functio2.color) || void 0 === _this$formats$functio2 ? void 0 : _this$formats$functio2.id) || this.id;
                            }
                        }, {
                            key: "isPolar",
                            get: function() {
                                for (var id in this.coords) if ("angle" === this.coords[id].type) return true;
                                return false;
                            }
                        }, {
                            key: "getFormat",
                            value: function(format) {
                                if ("object" === _typeof(format)) {
                                    format = _assertClassBrand(_Class_brand, this, _processFormat).call(this, format);
                                    return format;
                                }
                                var ret;
                                if ("default" === format) ret = Object.values(this.formats)[0]; else ret = this.formats[format];
                                if (ret) {
                                    ret = _assertClassBrand(_Class_brand, this, _processFormat).call(this, ret);
                                    return ret;
                                }
                                return null;
                            }
                        }, {
                            key: "to",
                            value: function(space, coords) {
                                if (1 === arguments.length) {
                                    var _ref42 = [ space.space, space.coords ];
                                    space = _ref42[0];
                                    coords = _ref42[1];
                                }
                                space = _ColorSpace.get(space);
                                if (this === space) return coords;
                                coords = coords.map((function(c4) {
                                    return Number.isNaN(c4) ? 0 : c4;
                                }));
                                var myPath = _classPrivateFieldGet(_path, this);
                                var otherPath = _classPrivateFieldGet(_path, space);
                                var connectionSpace, connectionSpaceIndex;
                                for (var _i16 = 0; _i16 < myPath.length; _i16++) if (myPath[_i16] === otherPath[_i16]) {
                                    connectionSpace = myPath[_i16];
                                    connectionSpaceIndex = _i16;
                                } else break;
                                if (!connectionSpace) throw new Error("Cannot convert between color spaces ".concat(this, " and ").concat(space, ": no connection space was found"));
                                for (var _i17 = myPath.length - 1; _i17 > connectionSpaceIndex; _i17--) coords = myPath[_i17].toBase(coords);
                                for (var _i18 = connectionSpaceIndex + 1; _i18 < otherPath.length; _i18++) coords = otherPath[_i18].fromBase(coords);
                                return coords;
                            }
                        }, {
                            key: "from",
                            value: function(space, coords) {
                                if (1 === arguments.length) {
                                    var _ref43 = [ space.space, space.coords ];
                                    space = _ref43[0];
                                    coords = _ref43[1];
                                }
                                space = _ColorSpace.get(space);
                                return space.to(this, coords);
                            }
                        }, {
                            key: "toString",
                            value: function() {
                                return "".concat(this.name, " (").concat(this.id, ")");
                            }
                        }, {
                            key: "getMinCoords",
                            value: function() {
                                var ret = [];
                                for (var id in this.coords) {
                                    var _range2$min;
                                    var meta = this.coords[id];
                                    var range2 = meta.range || meta.refRange;
                                    ret.push(null !== (_range2$min = null === range2 || void 0 === range2 ? void 0 : range2.min) && void 0 !== _range2$min ? _range2$min : 0);
                                }
                                return ret;
                            }
                        } ], [ {
                            key: "all",
                            get: function() {
                                return _toConsumableArray(new Set(Object.values(_ColorSpace.registry)));
                            }
                        }, {
                            key: "register",
                            value: function(id, space) {
                                if (1 === arguments.length) {
                                    space = arguments[0];
                                    id = space.id;
                                }
                                space = this.get(space);
                                if (this.registry[id] && this.registry[id] !== space) throw new Error("Duplicate color space registration: '".concat(id, "'"));
                                this.registry[id] = space;
                                if (1 === arguments.length && space.aliases) {
                                    var _step7, _iterator7 = _createForOfIteratorHelper(space.aliases);
                                    try {
                                        for (_iterator7.s(); !(_step7 = _iterator7.n()).done; ) {
                                            var alias = _step7.value;
                                            this.register(alias, space);
                                        }
                                    } catch (err) {
                                        _iterator7.e(err);
                                    } finally {
                                        _iterator7.f();
                                    }
                                }
                                return space;
                            }
                        }, {
                            key: "get",
                            value: function(space) {
                                if (!space || space instanceof _ColorSpace) return space;
                                var argType = type(space);
                                if ("string" === argType) {
                                    var ret = _ColorSpace.registry[space.toLowerCase()];
                                    if (!ret) throw new TypeError('No color space found with id = "'.concat(space, '"'));
                                    return ret;
                                }
                                for (var _len2 = arguments.length, alternatives = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) alternatives[_key2 - 1] = arguments[_key2];
                                if (alternatives.length) return _ColorSpace.get.apply(_ColorSpace, alternatives);
                                throw new TypeError("".concat(space, " is not a valid color space"));
                            }
                        }, {
                            key: "resolveCoord",
                            value: function(ref, workingSpace) {
                                var coordType = type(ref);
                                var space, coord;
                                if ("string" === coordType) if (ref.includes(".")) {
                                    var _ref$split = ref.split(".");
                                    var _ref$split2 = _slicedToArray(_ref$split, 2);
                                    space = _ref$split2[0];
                                    coord = _ref$split2[1];
                                } else {
                                    space = void 0;
                                    coord = ref;
                                } else if (Array.isArray(ref)) {
                                    var _ref44 = _slicedToArray(ref, 2);
                                    space = _ref44[0];
                                    coord = _ref44[1];
                                } else {
                                    space = ref.space;
                                    coord = ref.coordId;
                                }
                                space = _ColorSpace.get(space);
                                if (!space) space = workingSpace;
                                if (!space) throw new TypeError("Cannot resolve coordinate reference ".concat(ref, ": No color space specified and relative references are not allowed here"));
                                coordType = type(coord);
                                if ("number" === coordType || "string" === coordType && coord >= 0) {
                                    var meta = Object.entries(space.coords)[coord];
                                    if (meta) return _extends({
                                        space,
                                        id: meta[0],
                                        index: coord
                                    }, meta[1]);
                                }
                                space = _ColorSpace.get(space);
                                var normalizedCoord = coord.toLowerCase();
                                var i = 0;
                                for (var id in space.coords) {
                                    var _meta$name;
                                    var _meta = space.coords[id];
                                    if (id.toLowerCase() === normalizedCoord || (null === (_meta$name = _meta.name) || void 0 === _meta$name ? void 0 : _meta$name.toLowerCase()) === normalizedCoord) return _extends({
                                        space,
                                        id,
                                        index: i
                                    }, _meta);
                                    i++;
                                }
                                throw new TypeError('No "'.concat(coord, '" coordinate found in ').concat(space.name, ". Its coordinates are: ").concat(Object.keys(space.coords).join(", ")));
                            }
                        } ]);
                    }());
                    function _processFormat(format) {
                        if (format.coords && !format.coordGrammar) {
                            format.type || (format.type = "function");
                            format.name || (format.name = "color");
                            format.coordGrammar = parseCoordGrammar(format.coords);
                            var coordFormats = Object.entries(this.coords).map((function(_ref152, i) {
                                var _ref153 = _slicedToArray(_ref152, 2), coordMeta = (_ref153[0], _ref153[1]);
                                var outputType = format.coordGrammar[i][0];
                                var fromRange = coordMeta.range || coordMeta.refRange;
                                var toRange = outputType.range, suffix = "";
                                if ("<percentage>" == outputType) {
                                    toRange = [ 0, 100 ];
                                    suffix = "%";
                                } else if ("<angle>" == outputType) suffix = "deg";
                                return {
                                    fromRange,
                                    toRange,
                                    suffix
                                };
                            }));
                            format.serializeCoords = function(coords, precision) {
                                return coords.map((function(c4, i) {
                                    var _coordFormats$i = coordFormats[i], fromRange = _coordFormats$i.fromRange, toRange = _coordFormats$i.toRange, suffix = _coordFormats$i.suffix;
                                    if (fromRange && toRange) c4 = mapRange(fromRange, toRange, c4);
                                    c4 = toPrecision(c4, precision);
                                    if (suffix) c4 += suffix;
                                    return c4;
                                }));
                            };
                        }
                        return format;
                    }
                    function _getPath() {
                        var ret = [ this ];
                        for (var _space2 = this; _space2 = _space2.base; ) ret.push(_space2);
                        return ret;
                    }
                    var ColorSpace = _ColorSpace;
                    __publicField(ColorSpace, "registry", {});
                    __publicField(ColorSpace, "DEFAULT_FORMAT", {
                        type: "functions",
                        name: "color"
                    });
                    var XYZ_D65 = new ColorSpace({
                        id: "xyz-d65",
                        name: "XYZ D65",
                        coords: {
                            x: {
                                name: "X"
                            },
                            y: {
                                name: "Y"
                            },
                            z: {
                                name: "Z"
                            }
                        },
                        white: "D65",
                        formats: {
                            color: {
                                ids: [ "xyz-d65", "xyz" ]
                            }
                        },
                        aliases: [ "xyz" ]
                    });
                    var RGBColorSpace = function(_ColorSpace2) {
                        function RGBColorSpace(options) {
                            var _options$referred;
                            var _this;
                            _classCallCheck(this, RGBColorSpace);
                            if (!options.coords) options.coords = {
                                r: {
                                    range: [ 0, 1 ],
                                    name: "Red"
                                },
                                g: {
                                    range: [ 0, 1 ],
                                    name: "Green"
                                },
                                b: {
                                    range: [ 0, 1 ],
                                    name: "Blue"
                                }
                            };
                            if (!options.base) options.base = XYZ_D65;
                            if (options.toXYZ_M && options.fromXYZ_M) {
                                var _options$toBase, _options$fromBase;
                                null !== (_options$toBase = options.toBase) && void 0 !== _options$toBase ? _options$toBase : options.toBase = function(rgb) {
                                    var xyz = multiplyMatrices(options.toXYZ_M, rgb);
                                    if (_this.white !== _this.base.white) xyz = adapt$1(_this.white, _this.base.white, xyz);
                                    return xyz;
                                };
                                null !== (_options$fromBase = options.fromBase) && void 0 !== _options$fromBase ? _options$fromBase : options.fromBase = function(xyz) {
                                    xyz = adapt$1(_this.base.white, _this.white, xyz);
                                    return multiplyMatrices(options.fromXYZ_M, xyz);
                                };
                            }
                            null !== (_options$referred = options.referred) && void 0 !== _options$referred ? _options$referred : options.referred = "display";
                            return _this = _callSuper(this, RGBColorSpace, [ options ]);
                        }
                        _inherits(RGBColorSpace, _ColorSpace2);
                        return _createClass(RGBColorSpace);
                    }(ColorSpace);
                    function parse2(str) {
                        var _String;
                        var env = {
                            str: null === (_String = String(str)) || void 0 === _String ? void 0 : _String.trim()
                        };
                        hooks.run("parse-start", env);
                        if (env.color) return env.color;
                        env.parsed = parseFunction(env.str);
                        if (env.parsed) {
                            var name = env.parsed.name;
                            if ("color" === name) {
                                var id = env.parsed.args.shift();
                                var alpha = env.parsed.rawArgs.indexOf("/") > 0 ? env.parsed.args.pop() : 1;
                                var _step8, _iterator8 = _createForOfIteratorHelper(ColorSpace.all);
                                try {
                                    var _ret2, _loop5 = function() {
                                        var space = _step8.value;
                                        var colorSpec = space.getFormat("color");
                                        if (colorSpec) {
                                            var _colorSpec$ids;
                                            if (id === colorSpec.id || null !== (_colorSpec$ids = colorSpec.ids) && void 0 !== _colorSpec$ids && _colorSpec$ids.includes(id)) {
                                                var argCount = Object.keys(space.coords).length;
                                                var coords = Array(argCount).fill(0);
                                                coords.forEach((function(_, i) {
                                                    return coords[i] = env.parsed.args[i] || 0;
                                                }));
                                                return {
                                                    v: {
                                                        spaceId: space.id,
                                                        coords,
                                                        alpha
                                                    }
                                                };
                                            }
                                        }
                                    };
                                    for (_iterator8.s(); !(_step8 = _iterator8.n()).done; ) {
                                        _ret2 = _loop5();
                                        if (_ret2) return _ret2.v;
                                    }
                                } catch (err) {
                                    _iterator8.e(err);
                                } finally {
                                    _iterator8.f();
                                }
                                var didYouMean = "";
                                if (id in ColorSpace.registry) {
                                    var _ColorSpace$registry$;
                                    var cssId = null === (_ColorSpace$registry$ = ColorSpace.registry[id].formats) || void 0 === _ColorSpace$registry$ || null === (_ColorSpace$registry$ = _ColorSpace$registry$.functions) || void 0 === _ColorSpace$registry$ || null === (_ColorSpace$registry$ = _ColorSpace$registry$.color) || void 0 === _ColorSpace$registry$ ? void 0 : _ColorSpace$registry$.id;
                                    if (cssId) didYouMean = "Did you mean color(".concat(cssId, ")?");
                                }
                                throw new TypeError("Cannot parse color(".concat(id, "). ") + (didYouMean || "Missing a plugin?"));
                            } else {
                                var _step9, _iterator9 = _createForOfIteratorHelper(ColorSpace.all);
                                try {
                                    var _ret3, _loop6 = function() {
                                        var space = _step9.value;
                                        var format = space.getFormat(name);
                                        if (format && "function" === format.type) {
                                            var _alpha = 1;
                                            if (format.lastAlpha || last(env.parsed.args).alpha) _alpha = env.parsed.args.pop();
                                            var coords = env.parsed.args;
                                            if (format.coordGrammar) Object.entries(space.coords).forEach((function(_ref45, i) {
                                                var _coords$i;
                                                var _ref46 = _slicedToArray(_ref45, 2), id = _ref46[0], coordMeta = _ref46[1];
                                                var coordGrammar2 = format.coordGrammar[i];
                                                var providedType = null === (_coords$i = coords[i]) || void 0 === _coords$i ? void 0 : _coords$i.type;
                                                coordGrammar2 = coordGrammar2.find((function(c4) {
                                                    return c4 == providedType;
                                                }));
                                                if (!coordGrammar2) {
                                                    var coordName = coordMeta.name || id;
                                                    throw new TypeError("".concat(providedType, " not allowed for ").concat(coordName, " in ").concat(name, "()"));
                                                }
                                                var fromRange = coordGrammar2.range;
                                                if ("<percentage>" === providedType) fromRange || (fromRange = [ 0, 1 ]);
                                                var toRange = coordMeta.range || coordMeta.refRange;
                                                if (fromRange && toRange) coords[i] = mapRange(fromRange, toRange, coords[i]);
                                            }));
                                            return {
                                                v: {
                                                    spaceId: space.id,
                                                    coords,
                                                    alpha: _alpha
                                                }
                                            };
                                        }
                                    };
                                    for (_iterator9.s(); !(_step9 = _iterator9.n()).done; ) {
                                        _ret3 = _loop6();
                                        if (_ret3) return _ret3.v;
                                    }
                                } catch (err) {
                                    _iterator9.e(err);
                                } finally {
                                    _iterator9.f();
                                }
                            }
                        } else {
                            var _step10, _iterator10 = _createForOfIteratorHelper(ColorSpace.all);
                            try {
                                for (_iterator10.s(); !(_step10 = _iterator10.n()).done; ) {
                                    var space = _step10.value;
                                    for (var formatId in space.formats) {
                                        var format = space.formats[formatId];
                                        if ("custom" !== format.type) continue;
                                        if (format.test && !format.test(env.str)) continue;
                                        var color = format.parse(env.str);
                                        if (color) {
                                            var _color$alpha;
                                            null !== (_color$alpha = color.alpha) && void 0 !== _color$alpha ? _color$alpha : color.alpha = 1;
                                            return color;
                                        }
                                    }
                                }
                            } catch (err) {
                                _iterator10.e(err);
                            } finally {
                                _iterator10.f();
                            }
                        }
                        throw new TypeError("Could not parse ".concat(str, " as a color. Missing a plugin?"));
                    }
                    function getColor(color) {
                        if (!color) throw new TypeError("Empty color reference");
                        if (isString(color)) color = parse2(color);
                        var space = color.space || color.spaceId;
                        if (!(space instanceof ColorSpace)) color.space = ColorSpace.get(space);
                        if (void 0 === color.alpha) color.alpha = 1;
                        return color;
                    }
                    function getAll(color, space) {
                        space = ColorSpace.get(space);
                        return space.from(color);
                    }
                    function get(color, prop) {
                        var _ColorSpace$resolveCo = ColorSpace.resolveCoord(prop, color.space), space = _ColorSpace$resolveCo.space, index = _ColorSpace$resolveCo.index;
                        var coords = getAll(color, space);
                        return coords[index];
                    }
                    function setAll(color, space, coords) {
                        space = ColorSpace.get(space);
                        color.coords = space.to(color.space, coords);
                        return color;
                    }
                    function set(color, prop, value) {
                        color = getColor(color);
                        if (2 === arguments.length && "object" === type(arguments[1])) {
                            var object = arguments[1];
                            for (var p2 in object) set(color, p2, object[p2]);
                        } else {
                            if ("function" === typeof value) value = value(get(color, prop));
                            var _ColorSpace$resolveCo2 = ColorSpace.resolveCoord(prop, color.space), space = _ColorSpace$resolveCo2.space, index = _ColorSpace$resolveCo2.index;
                            var coords = getAll(color, space);
                            coords[index] = value;
                            setAll(color, space, coords);
                        }
                        return color;
                    }
                    var XYZ_D50 = new ColorSpace({
                        id: "xyz-d50",
                        name: "XYZ D50",
                        white: "D50",
                        base: XYZ_D65,
                        fromBase: function(coords) {
                            return adapt$1(XYZ_D65.white, "D50", coords);
                        },
                        toBase: function(coords) {
                            return adapt$1("D50", XYZ_D65.white, coords);
                        },
                        formats: {
                            color: {}
                        }
                    });
                    var ε$3 = 216 / 24389;
                    var ε3$1 = 24 / 116;
                    var κ$1 = 24389 / 27;
                    var white$1 = WHITES.D50;
                    var lab = new ColorSpace({
                        id: "lab",
                        name: "Lab",
                        coords: {
                            l: {
                                refRange: [ 0, 100 ],
                                name: "L"
                            },
                            a: {
                                refRange: [ -125, 125 ]
                            },
                            b: {
                                refRange: [ -125, 125 ]
                            }
                        },
                        white: white$1,
                        base: XYZ_D50,
                        fromBase: function(XYZ) {
                            var xyz = XYZ.map((function(value, i) {
                                return value / white$1[i];
                            }));
                            var f = xyz.map((function(value) {
                                return value > ε$3 ? Math.cbrt(value) : (κ$1 * value + 16) / 116;
                            }));
                            return [ 116 * f[1] - 16, 500 * (f[0] - f[1]), 200 * (f[1] - f[2]) ];
                        },
                        toBase: function(Lab) {
                            var f = [];
                            f[1] = (Lab[0] + 16) / 116;
                            f[0] = Lab[1] / 500 + f[1];
                            f[2] = f[1] - Lab[2] / 200;
                            var xyz = [ f[0] > ε3$1 ? Math.pow(f[0], 3) : (116 * f[0] - 16) / κ$1, Lab[0] > 8 ? Math.pow((Lab[0] + 16) / 116, 3) : Lab[0] / κ$1, f[2] > ε3$1 ? Math.pow(f[2], 3) : (116 * f[2] - 16) / κ$1 ];
                            return xyz.map((function(value, i) {
                                return value * white$1[i];
                            }));
                        },
                        formats: {
                            lab: {
                                coords: [ "<number> | <percentage>", "<number>", "<number>" ]
                            }
                        }
                    });
                    function constrain(angle) {
                        return (angle % 360 + 360) % 360;
                    }
                    function adjust(arc, angles) {
                        if ("raw" === arc) return angles;
                        var _angles$map = angles.map(constrain), _angles$map2 = _slicedToArray(_angles$map, 2), a1 = _angles$map2[0], a2 = _angles$map2[1];
                        var angleDiff = a2 - a1;
                        if ("increasing" === arc) {
                            if (angleDiff < 0) a2 += 360;
                        } else if ("decreasing" === arc) {
                            if (angleDiff > 0) a1 += 360;
                        } else if ("longer" === arc) {
                            if (-180 < angleDiff && angleDiff < 180) if (angleDiff > 0) a2 += 360; else a1 += 360;
                        } else if ("shorter" === arc) if (angleDiff > 180) a1 += 360; else if (angleDiff < -180) a2 += 360;
                        return [ a1, a2 ];
                    }
                    var lch = new ColorSpace({
                        id: "lch",
                        name: "LCH",
                        coords: {
                            l: {
                                refRange: [ 0, 100 ],
                                name: "Lightness"
                            },
                            c: {
                                refRange: [ 0, 150 ],
                                name: "Chroma"
                            },
                            h: {
                                refRange: [ 0, 360 ],
                                type: "angle",
                                name: "Hue"
                            }
                        },
                        base: lab,
                        fromBase: function(Lab) {
                            var _Lab = _slicedToArray(Lab, 3), L = _Lab[0], a2 = _Lab[1], b2 = _Lab[2];
                            var hue;
                            var ε2 = .02;
                            if (Math.abs(a2) < ε2 && Math.abs(b2) < ε2) hue = NaN; else hue = 180 * Math.atan2(b2, a2) / Math.PI;
                            return [ L, Math.sqrt(Math.pow(a2, 2) + Math.pow(b2, 2)), constrain(hue) ];
                        },
                        toBase: function(LCH) {
                            var _LCH = _slicedToArray(LCH, 3), Lightness = _LCH[0], Chroma = _LCH[1], Hue = _LCH[2];
                            if (Chroma < 0) Chroma = 0;
                            if (isNaN(Hue)) Hue = 0;
                            return [ Lightness, Chroma * Math.cos(Hue * Math.PI / 180), Chroma * Math.sin(Hue * Math.PI / 180) ];
                        },
                        formats: {
                            lch: {
                                coords: [ "<number> | <percentage>", "<number>", "<number> | <angle>" ]
                            }
                        }
                    });
                    var Gfactor = Math.pow(25, 7);
                    var π$1 = Math.PI;
                    var r2d = 180 / π$1;
                    var d2r$1 = π$1 / 180;
                    function deltaE2000(color, sample) {
                        var _ref47 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, _ref47$kL = _ref47.kL, kL = void 0 === _ref47$kL ? 1 : _ref47$kL, _ref47$kC = _ref47.kC, kC = void 0 === _ref47$kC ? 1 : _ref47$kC, _ref47$kH = _ref47.kH, kH = void 0 === _ref47$kH ? 1 : _ref47$kH;
                        var _lab$from = lab.from(color), _lab$from2 = _slicedToArray(_lab$from, 3), L1 = _lab$from2[0], a1 = _lab$from2[1], b1 = _lab$from2[2];
                        var C1 = lch.from(lab, [ L1, a1, b1 ])[1];
                        var _lab$from3 = lab.from(sample), _lab$from4 = _slicedToArray(_lab$from3, 3), L2 = _lab$from4[0], a2 = _lab$from4[1], b2 = _lab$from4[2];
                        var C2 = lch.from(lab, [ L2, a2, b2 ])[1];
                        if (C1 < 0) C1 = 0;
                        if (C2 < 0) C2 = 0;
                        var Cbar = (C1 + C2) / 2;
                        var C7 = Math.pow(Cbar, 7);
                        var G = .5 * (1 - Math.sqrt(C7 / (C7 + Gfactor)));
                        var adash1 = (1 + G) * a1;
                        var adash2 = (1 + G) * a2;
                        var Cdash1 = Math.sqrt(Math.pow(adash1, 2) + Math.pow(b1, 2));
                        var Cdash2 = Math.sqrt(Math.pow(adash2, 2) + Math.pow(b2, 2));
                        var h1 = 0 === adash1 && 0 === b1 ? 0 : Math.atan2(b1, adash1);
                        var h2 = 0 === adash2 && 0 === b2 ? 0 : Math.atan2(b2, adash2);
                        if (h1 < 0) h1 += 2 * π$1;
                        if (h2 < 0) h2 += 2 * π$1;
                        h1 *= r2d;
                        h2 *= r2d;
                        var ΔL = L2 - L1;
                        var ΔC = Cdash2 - Cdash1;
                        var hdiff = h2 - h1;
                        var hsum = h1 + h2;
                        var habs = Math.abs(hdiff);
                        var Δh;
                        if (Cdash1 * Cdash2 === 0) Δh = 0; else if (habs <= 180) Δh = hdiff; else if (hdiff > 180) Δh = hdiff - 360; else if (hdiff < -180) Δh = hdiff + 360; else console.log("the unthinkable has happened");
                        var ΔH = 2 * Math.sqrt(Cdash2 * Cdash1) * Math.sin(Δh * d2r$1 / 2);
                        var Ldash = (L1 + L2) / 2;
                        var Cdash = (Cdash1 + Cdash2) / 2;
                        var Cdash7 = Math.pow(Cdash, 7);
                        var hdash;
                        if (Cdash1 * Cdash2 === 0) hdash = hsum; else if (habs <= 180) hdash = hsum / 2; else if (hsum < 360) hdash = (hsum + 360) / 2; else hdash = (hsum - 360) / 2;
                        var lsq = Math.pow(Ldash - 50, 2);
                        var SL = 1 + .015 * lsq / Math.sqrt(20 + lsq);
                        var SC = 1 + .045 * Cdash;
                        var T = 1;
                        T -= .17 * Math.cos((hdash - 30) * d2r$1);
                        T += .24 * Math.cos(2 * hdash * d2r$1);
                        T += .32 * Math.cos((3 * hdash + 6) * d2r$1);
                        T -= .2 * Math.cos((4 * hdash - 63) * d2r$1);
                        var SH = 1 + .015 * Cdash * T;
                        var Δθ = 30 * Math.exp(-1 * Math.pow((hdash - 275) / 25, 2));
                        var RC = 2 * Math.sqrt(Cdash7 / (Cdash7 + Gfactor));
                        var RT = -1 * Math.sin(2 * Δθ * d2r$1) * RC;
                        var dE = Math.pow(ΔL / (kL * SL), 2);
                        dE += Math.pow(ΔC / (kC * SC), 2);
                        dE += Math.pow(ΔH / (kH * SH), 2);
                        dE += RT * (ΔC / (kC * SC)) * (ΔH / (kH * SH));
                        return Math.sqrt(dE);
                    }
                    var ε$2 = 75e-6;
                    function inGamut(color) {
                        var space = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : color.space;
                        var _ref48 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, _ref48$epsilon = _ref48.epsilon, epsilon = void 0 === _ref48$epsilon ? ε$2 : _ref48$epsilon;
                        color = getColor(color);
                        space = ColorSpace.get(space);
                        var coords = color.coords;
                        if (space !== color.space) coords = space.from(color);
                        return space.inGamut(coords, {
                            epsilon
                        });
                    }
                    function clone2(color) {
                        return {
                            space: color.space,
                            coords: color.coords.slice(),
                            alpha: color.alpha
                        };
                    }
                    function toGamut(color) {
                        var _ref49 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, _ref49$method = _ref49.method, method = void 0 === _ref49$method ? defaults.gamut_mapping : _ref49$method, _ref49$space = _ref49.space, space = void 0 === _ref49$space ? color.space : _ref49$space;
                        if (isString(arguments[1])) space = arguments[1];
                        space = ColorSpace.get(space);
                        if (inGamut(color, space, {
                            epsilon: 0
                        })) return color;
                        var spaceColor = to(color, space);
                        if ("clip" !== method && !inGamut(color, space)) {
                            var clipped = toGamut(clone2(spaceColor), {
                                method: "clip",
                                space
                            });
                            if (deltaE2000(color, clipped) > 2) {
                                var coordMeta = ColorSpace.resolveCoord(method);
                                var mapSpace = coordMeta.space;
                                var coordId = coordMeta.id;
                                var mappedColor = to(spaceColor, mapSpace);
                                var bounds = coordMeta.range || coordMeta.refRange;
                                var min = bounds[0];
                                var ε2 = .01;
                                var low = min;
                                var high = get(mappedColor, coordId);
                                while (high - low > ε2) {
                                    var clipped2 = clone2(mappedColor);
                                    clipped2 = toGamut(clipped2, {
                                        space,
                                        method: "clip"
                                    });
                                    var deltaE2 = deltaE2000(mappedColor, clipped2);
                                    if (deltaE2 - 2 < ε2) low = get(mappedColor, coordId); else high = get(mappedColor, coordId);
                                    set(mappedColor, coordId, (low + high) / 2);
                                }
                                spaceColor = to(mappedColor, space);
                            } else spaceColor = clipped;
                        }
                        if ("clip" === method || !inGamut(spaceColor, space, {
                            epsilon: 0
                        })) {
                            var _bounds = Object.values(space.coords).map((function(c4) {
                                return c4.range || [];
                            }));
                            spaceColor.coords = spaceColor.coords.map((function(c4, i) {
                                var _bounds$i = _slicedToArray(_bounds[i], 2), min = _bounds$i[0], max2 = _bounds$i[1];
                                if (void 0 !== min) c4 = Math.max(min, c4);
                                if (void 0 !== max2) c4 = Math.min(c4, max2);
                                return c4;
                            }));
                        }
                        if (space !== color.space) spaceColor = to(spaceColor, color.space);
                        color.coords = spaceColor.coords;
                        return color;
                    }
                    toGamut.returns = "color";
                    function to(color, space) {
                        var _ref50 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, inGamut2 = _ref50.inGamut;
                        color = getColor(color);
                        space = ColorSpace.get(space);
                        var coords = space.from(color);
                        var ret = {
                            space,
                            coords,
                            alpha: color.alpha
                        };
                        if (inGamut2) ret = toGamut(ret);
                        return ret;
                    }
                    to.returns = "color";
                    function serialize(color) {
                        var _ref52, _color$space$getForma;
                        var _ref51 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                        var _ref51$precision = _ref51.precision, precision = void 0 === _ref51$precision ? defaults.precision : _ref51$precision, _ref51$format = _ref51.format, format = void 0 === _ref51$format ? "default" : _ref51$format, _ref51$inGamut = _ref51.inGamut, inGamut$1 = void 0 === _ref51$inGamut ? true : _ref51$inGamut, customOptions = _objectWithoutProperties(_ref51, _excluded9);
                        var ret;
                        color = getColor(color);
                        var formatId = format;
                        format = null !== (_ref52 = null !== (_color$space$getForma = color.space.getFormat(format)) && void 0 !== _color$space$getForma ? _color$space$getForma : color.space.getFormat("default")) && void 0 !== _ref52 ? _ref52 : ColorSpace.DEFAULT_FORMAT;
                        inGamut$1 || (inGamut$1 = format.toGamut);
                        var coords = color.coords;
                        coords = coords.map((function(c4) {
                            return c4 ? c4 : 0;
                        }));
                        if (inGamut$1 && !inGamut(color)) coords = toGamut(clone2(color), true === inGamut$1 ? void 0 : inGamut$1).coords;
                        if ("custom" === format.type) {
                            customOptions.precision = precision;
                            if (format.serialize) ret = format.serialize(coords, color.alpha, customOptions); else throw new TypeError("format ".concat(formatId, " can only be used to parse colors, not for serialization"));
                        } else {
                            var name = format.name || "color";
                            if (format.serializeCoords) coords = format.serializeCoords(coords, precision); else if (null !== precision) coords = coords.map((function(c4) {
                                return toPrecision(c4, precision);
                            }));
                            var args = _toConsumableArray(coords);
                            if ("color" === name) {
                                var _format$ids;
                                var cssId = format.id || (null === (_format$ids = format.ids) || void 0 === _format$ids ? void 0 : _format$ids[0]) || color.space.id;
                                args.unshift(cssId);
                            }
                            var alpha = color.alpha;
                            if (null !== precision) alpha = toPrecision(alpha, precision);
                            var strAlpha = color.alpha < 1 && !format.noAlpha ? "".concat(format.commas ? "," : " /", " ").concat(alpha) : "";
                            ret = "".concat(name, "(").concat(args.join(format.commas ? ", " : " ")).concat(strAlpha, ")");
                        }
                        return ret;
                    }
                    var toXYZ_M$5 = [ [ .6369580483012914, .14461690358620832, .1688809751641721 ], [ .2627002120112671, .6779980715188708, .05930171646986196 ], [ 0, .028072693049087428, 1.060985057710791 ] ];
                    var fromXYZ_M$5 = [ [ 1.716651187971268, -.355670783776392, -.25336628137366 ], [ -.666684351832489, 1.616481236634939, .0157685458139111 ], [ .017639857445311, -.042770613257809, .942103121235474 ] ];
                    var REC2020Linear = new RGBColorSpace({
                        id: "rec2020-linear",
                        name: "Linear REC.2020",
                        white: "D65",
                        toXYZ_M: toXYZ_M$5,
                        fromXYZ_M: fromXYZ_M$5,
                        formats: {
                            color: {}
                        }
                    });
                    var α = 1.09929682680944;
                    var β = .018053968510807;
                    var REC2020 = new RGBColorSpace({
                        id: "rec2020",
                        name: "REC.2020",
                        base: REC2020Linear,
                        toBase: function(RGB) {
                            return RGB.map((function(val) {
                                if (val < 4.5 * β) return val / 4.5;
                                return Math.pow((val + α - 1) / α, 1 / .45);
                            }));
                        },
                        fromBase: function(RGB) {
                            return RGB.map((function(val) {
                                if (val >= β) return α * Math.pow(val, .45) - (α - 1);
                                return 4.5 * val;
                            }));
                        },
                        formats: {
                            color: {}
                        }
                    });
                    var toXYZ_M$4 = [ [ .4865709486482162, .26566769316909306, .1982172852343625 ], [ .2289745640697488, .6917385218365064, .079286914093745 ], [ 0, .04511338185890264, 1.043944368900976 ] ];
                    var fromXYZ_M$4 = [ [ 2.493496911941425, -.9313836179191239, -.40271078445071684 ], [ -.8294889695615747, 1.7626640603183463, .023624685841943577 ], [ .03584583024378447, -.07617238926804182, .9568845240076872 ] ];
                    var P3Linear = new RGBColorSpace({
                        id: "p3-linear",
                        name: "Linear P3",
                        white: "D65",
                        toXYZ_M: toXYZ_M$4,
                        fromXYZ_M: fromXYZ_M$4
                    });
                    var toXYZ_M$3 = [ [ .41239079926595934, .357584339383878, .1804807884018343 ], [ .21263900587151027, .715168678767756, .07219231536073371 ], [ .01933081871559182, .11919477979462598, .9505321522496607 ] ];
                    var fromXYZ_M$3 = [ [ 3.2409699419045226, -1.537383177570094, -.4986107602930034 ], [ -.9692436362808796, 1.8759675015077202, .04155505740717559 ], [ .05563007969699366, -.20397695888897652, 1.0569715142428786 ] ];
                    var sRGBLinear = new RGBColorSpace({
                        id: "srgb-linear",
                        name: "Linear sRGB",
                        white: "D65",
                        toXYZ_M: toXYZ_M$3,
                        fromXYZ_M: fromXYZ_M$3,
                        formats: {
                            color: {}
                        }
                    });
                    var KEYWORDS = {
                        aliceblue: [ 240 / 255, 248 / 255, 1 ],
                        antiquewhite: [ 250 / 255, 235 / 255, 215 / 255 ],
                        aqua: [ 0, 1, 1 ],
                        aquamarine: [ 127 / 255, 1, 212 / 255 ],
                        azure: [ 240 / 255, 1, 1 ],
                        beige: [ 245 / 255, 245 / 255, 220 / 255 ],
                        bisque: [ 1, 228 / 255, 196 / 255 ],
                        black: [ 0, 0, 0 ],
                        blanchedalmond: [ 1, 235 / 255, 205 / 255 ],
                        blue: [ 0, 0, 1 ],
                        blueviolet: [ 138 / 255, 43 / 255, 226 / 255 ],
                        brown: [ 165 / 255, 42 / 255, 42 / 255 ],
                        burlywood: [ 222 / 255, 184 / 255, 135 / 255 ],
                        cadetblue: [ 95 / 255, 158 / 255, 160 / 255 ],
                        chartreuse: [ 127 / 255, 1, 0 ],
                        chocolate: [ 210 / 255, 105 / 255, 30 / 255 ],
                        coral: [ 1, 127 / 255, 80 / 255 ],
                        cornflowerblue: [ 100 / 255, 149 / 255, 237 / 255 ],
                        cornsilk: [ 1, 248 / 255, 220 / 255 ],
                        crimson: [ 220 / 255, 20 / 255, 60 / 255 ],
                        cyan: [ 0, 1, 1 ],
                        darkblue: [ 0, 0, 139 / 255 ],
                        darkcyan: [ 0, 139 / 255, 139 / 255 ],
                        darkgoldenrod: [ 184 / 255, 134 / 255, 11 / 255 ],
                        darkgray: [ 169 / 255, 169 / 255, 169 / 255 ],
                        darkgreen: [ 0, 100 / 255, 0 ],
                        darkgrey: [ 169 / 255, 169 / 255, 169 / 255 ],
                        darkkhaki: [ 189 / 255, 183 / 255, 107 / 255 ],
                        darkmagenta: [ 139 / 255, 0, 139 / 255 ],
                        darkolivegreen: [ 85 / 255, 107 / 255, 47 / 255 ],
                        darkorange: [ 1, 140 / 255, 0 ],
                        darkorchid: [ 153 / 255, 50 / 255, 204 / 255 ],
                        darkred: [ 139 / 255, 0, 0 ],
                        darksalmon: [ 233 / 255, 150 / 255, 122 / 255 ],
                        darkseagreen: [ 143 / 255, 188 / 255, 143 / 255 ],
                        darkslateblue: [ 72 / 255, 61 / 255, 139 / 255 ],
                        darkslategray: [ 47 / 255, 79 / 255, 79 / 255 ],
                        darkslategrey: [ 47 / 255, 79 / 255, 79 / 255 ],
                        darkturquoise: [ 0, 206 / 255, 209 / 255 ],
                        darkviolet: [ 148 / 255, 0, 211 / 255 ],
                        deeppink: [ 1, 20 / 255, 147 / 255 ],
                        deepskyblue: [ 0, 191 / 255, 1 ],
                        dimgray: [ 105 / 255, 105 / 255, 105 / 255 ],
                        dimgrey: [ 105 / 255, 105 / 255, 105 / 255 ],
                        dodgerblue: [ 30 / 255, 144 / 255, 1 ],
                        firebrick: [ 178 / 255, 34 / 255, 34 / 255 ],
                        floralwhite: [ 1, 250 / 255, 240 / 255 ],
                        forestgreen: [ 34 / 255, 139 / 255, 34 / 255 ],
                        fuchsia: [ 1, 0, 1 ],
                        gainsboro: [ 220 / 255, 220 / 255, 220 / 255 ],
                        ghostwhite: [ 248 / 255, 248 / 255, 1 ],
                        gold: [ 1, 215 / 255, 0 ],
                        goldenrod: [ 218 / 255, 165 / 255, 32 / 255 ],
                        gray: [ 128 / 255, 128 / 255, 128 / 255 ],
                        green: [ 0, 128 / 255, 0 ],
                        greenyellow: [ 173 / 255, 1, 47 / 255 ],
                        grey: [ 128 / 255, 128 / 255, 128 / 255 ],
                        honeydew: [ 240 / 255, 1, 240 / 255 ],
                        hotpink: [ 1, 105 / 255, 180 / 255 ],
                        indianred: [ 205 / 255, 92 / 255, 92 / 255 ],
                        indigo: [ 75 / 255, 0, 130 / 255 ],
                        ivory: [ 1, 1, 240 / 255 ],
                        khaki: [ 240 / 255, 230 / 255, 140 / 255 ],
                        lavender: [ 230 / 255, 230 / 255, 250 / 255 ],
                        lavenderblush: [ 1, 240 / 255, 245 / 255 ],
                        lawngreen: [ 124 / 255, 252 / 255, 0 ],
                        lemonchiffon: [ 1, 250 / 255, 205 / 255 ],
                        lightblue: [ 173 / 255, 216 / 255, 230 / 255 ],
                        lightcoral: [ 240 / 255, 128 / 255, 128 / 255 ],
                        lightcyan: [ 224 / 255, 1, 1 ],
                        lightgoldenrodyellow: [ 250 / 255, 250 / 255, 210 / 255 ],
                        lightgray: [ 211 / 255, 211 / 255, 211 / 255 ],
                        lightgreen: [ 144 / 255, 238 / 255, 144 / 255 ],
                        lightgrey: [ 211 / 255, 211 / 255, 211 / 255 ],
                        lightpink: [ 1, 182 / 255, 193 / 255 ],
                        lightsalmon: [ 1, 160 / 255, 122 / 255 ],
                        lightseagreen: [ 32 / 255, 178 / 255, 170 / 255 ],
                        lightskyblue: [ 135 / 255, 206 / 255, 250 / 255 ],
                        lightslategray: [ 119 / 255, 136 / 255, 153 / 255 ],
                        lightslategrey: [ 119 / 255, 136 / 255, 153 / 255 ],
                        lightsteelblue: [ 176 / 255, 196 / 255, 222 / 255 ],
                        lightyellow: [ 1, 1, 224 / 255 ],
                        lime: [ 0, 1, 0 ],
                        limegreen: [ 50 / 255, 205 / 255, 50 / 255 ],
                        linen: [ 250 / 255, 240 / 255, 230 / 255 ],
                        magenta: [ 1, 0, 1 ],
                        maroon: [ 128 / 255, 0, 0 ],
                        mediumaquamarine: [ 102 / 255, 205 / 255, 170 / 255 ],
                        mediumblue: [ 0, 0, 205 / 255 ],
                        mediumorchid: [ 186 / 255, 85 / 255, 211 / 255 ],
                        mediumpurple: [ 147 / 255, 112 / 255, 219 / 255 ],
                        mediumseagreen: [ 60 / 255, 179 / 255, 113 / 255 ],
                        mediumslateblue: [ 123 / 255, 104 / 255, 238 / 255 ],
                        mediumspringgreen: [ 0, 250 / 255, 154 / 255 ],
                        mediumturquoise: [ 72 / 255, 209 / 255, 204 / 255 ],
                        mediumvioletred: [ 199 / 255, 21 / 255, 133 / 255 ],
                        midnightblue: [ 25 / 255, 25 / 255, 112 / 255 ],
                        mintcream: [ 245 / 255, 1, 250 / 255 ],
                        mistyrose: [ 1, 228 / 255, 225 / 255 ],
                        moccasin: [ 1, 228 / 255, 181 / 255 ],
                        navajowhite: [ 1, 222 / 255, 173 / 255 ],
                        navy: [ 0, 0, 128 / 255 ],
                        oldlace: [ 253 / 255, 245 / 255, 230 / 255 ],
                        olive: [ 128 / 255, 128 / 255, 0 ],
                        olivedrab: [ 107 / 255, 142 / 255, 35 / 255 ],
                        orange: [ 1, 165 / 255, 0 ],
                        orangered: [ 1, 69 / 255, 0 ],
                        orchid: [ 218 / 255, 112 / 255, 214 / 255 ],
                        palegoldenrod: [ 238 / 255, 232 / 255, 170 / 255 ],
                        palegreen: [ 152 / 255, 251 / 255, 152 / 255 ],
                        paleturquoise: [ 175 / 255, 238 / 255, 238 / 255 ],
                        palevioletred: [ 219 / 255, 112 / 255, 147 / 255 ],
                        papayawhip: [ 1, 239 / 255, 213 / 255 ],
                        peachpuff: [ 1, 218 / 255, 185 / 255 ],
                        peru: [ 205 / 255, 133 / 255, 63 / 255 ],
                        pink: [ 1, 192 / 255, 203 / 255 ],
                        plum: [ 221 / 255, 160 / 255, 221 / 255 ],
                        powderblue: [ 176 / 255, 224 / 255, 230 / 255 ],
                        purple: [ 128 / 255, 0, 128 / 255 ],
                        rebeccapurple: [ 102 / 255, 51 / 255, 153 / 255 ],
                        red: [ 1, 0, 0 ],
                        rosybrown: [ 188 / 255, 143 / 255, 143 / 255 ],
                        royalblue: [ 65 / 255, 105 / 255, 225 / 255 ],
                        saddlebrown: [ 139 / 255, 69 / 255, 19 / 255 ],
                        salmon: [ 250 / 255, 128 / 255, 114 / 255 ],
                        sandybrown: [ 244 / 255, 164 / 255, 96 / 255 ],
                        seagreen: [ 46 / 255, 139 / 255, 87 / 255 ],
                        seashell: [ 1, 245 / 255, 238 / 255 ],
                        sienna: [ 160 / 255, 82 / 255, 45 / 255 ],
                        silver: [ 192 / 255, 192 / 255, 192 / 255 ],
                        skyblue: [ 135 / 255, 206 / 255, 235 / 255 ],
                        slateblue: [ 106 / 255, 90 / 255, 205 / 255 ],
                        slategray: [ 112 / 255, 128 / 255, 144 / 255 ],
                        slategrey: [ 112 / 255, 128 / 255, 144 / 255 ],
                        snow: [ 1, 250 / 255, 250 / 255 ],
                        springgreen: [ 0, 1, 127 / 255 ],
                        steelblue: [ 70 / 255, 130 / 255, 180 / 255 ],
                        tan: [ 210 / 255, 180 / 255, 140 / 255 ],
                        teal: [ 0, 128 / 255, 128 / 255 ],
                        thistle: [ 216 / 255, 191 / 255, 216 / 255 ],
                        tomato: [ 1, 99 / 255, 71 / 255 ],
                        turquoise: [ 64 / 255, 224 / 255, 208 / 255 ],
                        violet: [ 238 / 255, 130 / 255, 238 / 255 ],
                        wheat: [ 245 / 255, 222 / 255, 179 / 255 ],
                        white: [ 1, 1, 1 ],
                        whitesmoke: [ 245 / 255, 245 / 255, 245 / 255 ],
                        yellow: [ 1, 1, 0 ],
                        yellowgreen: [ 154 / 255, 205 / 255, 50 / 255 ]
                    };
                    var coordGrammar = Array(3).fill("<percentage> | <number>[0, 255]");
                    var coordGrammarNumber = Array(3).fill("<number>[0, 255]");
                    var sRGB = new RGBColorSpace({
                        id: "srgb",
                        name: "sRGB",
                        base: sRGBLinear,
                        fromBase: function(rgb) {
                            return rgb.map((function(val) {
                                var sign = val < 0 ? -1 : 1;
                                var abs = val * sign;
                                if (abs > .0031308) return sign * (1.055 * Math.pow(abs, 1 / 2.4) - .055);
                                return 12.92 * val;
                            }));
                        },
                        toBase: function(rgb) {
                            return rgb.map((function(val) {
                                var sign = val < 0 ? -1 : 1;
                                var abs = val * sign;
                                if (abs < .04045) return val / 12.92;
                                return sign * Math.pow((abs + .055) / 1.055, 2.4);
                            }));
                        },
                        formats: {
                            rgb: {
                                coords: coordGrammar
                            },
                            rgb_number: {
                                name: "rgb",
                                commas: true,
                                coords: coordGrammarNumber,
                                noAlpha: true
                            },
                            color: {},
                            rgba: {
                                coords: coordGrammar,
                                commas: true,
                                lastAlpha: true
                            },
                            rgba_number: {
                                name: "rgba",
                                commas: true,
                                coords: coordGrammarNumber
                            },
                            hex: {
                                type: "custom",
                                toGamut: true,
                                test: function(str) {
                                    return /^#([a-f0-9]{3,4}){1,2}$/i.test(str);
                                },
                                parse: function(str) {
                                    if (str.length <= 5) str = str.replace(/[a-f0-9]/gi, "$&$&");
                                    var rgba = [];
                                    str.replace(/[a-f0-9]{2}/gi, (function(component) {
                                        rgba.push(parseInt(component, 16) / 255);
                                    }));
                                    return {
                                        spaceId: "srgb",
                                        coords: rgba.slice(0, 3),
                                        alpha: rgba.slice(3)[0]
                                    };
                                },
                                serialize: function(coords, alpha) {
                                    var _ref53 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, _ref53$collapse = _ref53.collapse, collapse = void 0 === _ref53$collapse ? true : _ref53$collapse;
                                    if (alpha < 1) coords.push(alpha);
                                    coords = coords.map((function(c4) {
                                        return Math.round(255 * c4);
                                    }));
                                    var collapsible = collapse && coords.every((function(c4) {
                                        return c4 % 17 === 0;
                                    }));
                                    var hex = coords.map((function(c4) {
                                        if (collapsible) return (c4 / 17).toString(16);
                                        return c4.toString(16).padStart(2, "0");
                                    })).join("");
                                    return "#" + hex;
                                }
                            },
                            keyword: {
                                type: "custom",
                                test: function(str) {
                                    return /^[a-z]+$/i.test(str);
                                },
                                parse: function(str) {
                                    str = str.toLowerCase();
                                    var ret = {
                                        spaceId: "srgb",
                                        coords: null,
                                        alpha: 1
                                    };
                                    if ("transparent" === str) {
                                        ret.coords = KEYWORDS.black;
                                        ret.alpha = 0;
                                    } else ret.coords = KEYWORDS[str];
                                    if (ret.coords) return ret;
                                }
                            }
                        }
                    });
                    var P3 = new RGBColorSpace({
                        id: "p3",
                        name: "P3",
                        base: P3Linear,
                        fromBase: sRGB.fromBase,
                        toBase: sRGB.toBase,
                        formats: {
                            color: {
                                id: "display-p3"
                            }
                        }
                    });
                    defaults.display_space = sRGB;
                    if ("undefined" !== typeof CSS && null !== (_CSS = CSS) && void 0 !== _CSS && _CSS.supports) for (var _i19 = 0, _arr2 = [ lab, REC2020, P3 ]; _i19 < _arr2.length; _i19++) {
                        var space = _arr2[_i19];
                        var coords = space.getMinCoords();
                        var color = {
                            space,
                            coords,
                            alpha: 1
                        };
                        var str = serialize(color);
                        if (CSS.supports("color", str)) {
                            defaults.display_space = space;
                            break;
                        }
                    }
                    function _display(color) {
                        var _CSS2;
                        var _ref54 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                        var _ref54$space = _ref54.space, space = void 0 === _ref54$space ? defaults.display_space : _ref54$space, options = _objectWithoutProperties(_ref54, _excluded10);
                        var ret = serialize(color, options);
                        if ("undefined" === typeof CSS || null !== (_CSS2 = CSS) && void 0 !== _CSS2 && _CSS2.supports("color", ret) || !defaults.display_space) {
                            ret = new String(ret);
                            ret.color = color;
                        } else {
                            var fallbackColor = to(color, space);
                            ret = new String(serialize(fallbackColor, options));
                            ret.color = fallbackColor;
                        }
                        return ret;
                    }
                    function distance(color1, color2) {
                        var space = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "lab";
                        space = ColorSpace.get(space);
                        var coords1 = space.from(color1);
                        var coords2 = space.from(color2);
                        return Math.sqrt(coords1.reduce((function(acc, c12, i) {
                            var c22 = coords2[i];
                            if (isNaN(c12) || isNaN(c22)) return acc;
                            return acc + Math.pow(c22 - c12, 2);
                        }), 0));
                    }
                    function equals(color1, color2) {
                        color1 = getColor(color1);
                        color2 = getColor(color2);
                        return color1.space === color2.space && color1.alpha === color2.alpha && color1.coords.every((function(c4, i) {
                            return c4 === color2.coords[i];
                        }));
                    }
                    function getLuminance(color) {
                        return get(color, [ XYZ_D65, "y" ]);
                    }
                    function setLuminance(color, value) {
                        set(color, [ XYZ_D65, "y" ], value);
                    }
                    function register$2(Color3) {
                        Object.defineProperty(Color3.prototype, "luminance", {
                            get: function() {
                                return getLuminance(this);
                            },
                            set: function(value) {
                                setLuminance(this, value);
                            }
                        });
                    }
                    var luminance = Object.freeze({
                        __proto__: null,
                        getLuminance,
                        setLuminance,
                        register: register$2
                    });
                    function contrastWCAG21(color1, color2) {
                        color1 = getColor(color1);
                        color2 = getColor(color2);
                        var Y1 = Math.max(getLuminance(color1), 0);
                        var Y2 = Math.max(getLuminance(color2), 0);
                        if (Y2 > Y1) {
                            var _ref55 = [ Y2, Y1 ];
                            Y1 = _ref55[0];
                            Y2 = _ref55[1];
                        }
                        return (Y1 + .05) / (Y2 + .05);
                    }
                    var normBG = .56;
                    var normTXT = .57;
                    var revTXT = .62;
                    var revBG = .65;
                    var blkThrs = .022;
                    var blkClmp = 1.414;
                    var loClip = .1;
                    var deltaYmin = 5e-4;
                    var scaleBoW = 1.14;
                    var loBoWoffset = .027;
                    var scaleWoB = 1.14;
                    function fclamp(Y) {
                        if (Y >= blkThrs) return Y;
                        return Y + Math.pow(blkThrs - Y, blkClmp);
                    }
                    function linearize(val) {
                        var sign = val < 0 ? -1 : 1;
                        var abs = Math.abs(val);
                        return sign * Math.pow(abs, 2.4);
                    }
                    function contrastAPCA(background, foreground) {
                        foreground = getColor(foreground);
                        background = getColor(background);
                        var S;
                        var C;
                        var Sapc;
                        var R, G, B;
                        foreground = to(foreground, "srgb");
                        var _foreground$coords = _slicedToArray(foreground.coords, 3);
                        R = _foreground$coords[0];
                        G = _foreground$coords[1];
                        B = _foreground$coords[2];
                        var lumTxt = .2126729 * linearize(R) + .7151522 * linearize(G) + .072175 * linearize(B);
                        background = to(background, "srgb");
                        var _background$coords = _slicedToArray(background.coords, 3);
                        R = _background$coords[0];
                        G = _background$coords[1];
                        B = _background$coords[2];
                        var lumBg = .2126729 * linearize(R) + .7151522 * linearize(G) + .072175 * linearize(B);
                        var Ytxt = fclamp(lumTxt);
                        var Ybg = fclamp(lumBg);
                        var BoW = Ybg > Ytxt;
                        if (Math.abs(Ybg - Ytxt) < deltaYmin) C = 0; else if (BoW) {
                            S = Math.pow(Ybg, normBG) - Math.pow(Ytxt, normTXT);
                            C = S * scaleBoW;
                        } else {
                            S = Math.pow(Ybg, revBG) - Math.pow(Ytxt, revTXT);
                            C = S * scaleWoB;
                        }
                        if (Math.abs(C) < loClip) Sapc = 0; else if (C > 0) Sapc = C - loBoWoffset; else Sapc = C + loBoWoffset;
                        return 100 * Sapc;
                    }
                    function contrastMichelson(color1, color2) {
                        color1 = getColor(color1);
                        color2 = getColor(color2);
                        var Y1 = Math.max(getLuminance(color1), 0);
                        var Y2 = Math.max(getLuminance(color2), 0);
                        if (Y2 > Y1) {
                            var _ref56 = [ Y2, Y1 ];
                            Y1 = _ref56[0];
                            Y2 = _ref56[1];
                        }
                        var denom = Y1 + Y2;
                        return 0 === denom ? 0 : (Y1 - Y2) / denom;
                    }
                    var max = 5e4;
                    function contrastWeber(color1, color2) {
                        color1 = getColor(color1);
                        color2 = getColor(color2);
                        var Y1 = Math.max(getLuminance(color1), 0);
                        var Y2 = Math.max(getLuminance(color2), 0);
                        if (Y2 > Y1) {
                            var _ref57 = [ Y2, Y1 ];
                            Y1 = _ref57[0];
                            Y2 = _ref57[1];
                        }
                        return 0 === Y2 ? max : (Y1 - Y2) / Y2;
                    }
                    function contrastLstar(color1, color2) {
                        color1 = getColor(color1);
                        color2 = getColor(color2);
                        var L1 = get(color1, [ lab, "l" ]);
                        var L2 = get(color2, [ lab, "l" ]);
                        return Math.abs(L1 - L2);
                    }
                    var ε$1 = 216 / 24389;
                    var ε3 = 24 / 116;
                    var κ = 24389 / 27;
                    var white = WHITES.D65;
                    var lab_d65 = new ColorSpace({
                        id: "lab-d65",
                        name: "Lab D65",
                        coords: {
                            l: {
                                refRange: [ 0, 100 ],
                                name: "L"
                            },
                            a: {
                                refRange: [ -125, 125 ]
                            },
                            b: {
                                refRange: [ -125, 125 ]
                            }
                        },
                        white,
                        base: XYZ_D65,
                        fromBase: function(XYZ) {
                            var xyz = XYZ.map((function(value, i) {
                                return value / white[i];
                            }));
                            var f = xyz.map((function(value) {
                                return value > ε$1 ? Math.cbrt(value) : (κ * value + 16) / 116;
                            }));
                            return [ 116 * f[1] - 16, 500 * (f[0] - f[1]), 200 * (f[1] - f[2]) ];
                        },
                        toBase: function(Lab) {
                            var f = [];
                            f[1] = (Lab[0] + 16) / 116;
                            f[0] = Lab[1] / 500 + f[1];
                            f[2] = f[1] - Lab[2] / 200;
                            var xyz = [ f[0] > ε3 ? Math.pow(f[0], 3) : (116 * f[0] - 16) / κ, Lab[0] > 8 ? Math.pow((Lab[0] + 16) / 116, 3) : Lab[0] / κ, f[2] > ε3 ? Math.pow(f[2], 3) : (116 * f[2] - 16) / κ ];
                            return xyz.map((function(value, i) {
                                return value * white[i];
                            }));
                        },
                        formats: {
                            "lab-d65": {
                                coords: [ "<number> | <percentage>", "<number>", "<number>" ]
                            }
                        }
                    });
                    var phi = .5 * Math.pow(5, .5) + .5;
                    function contrastDeltaPhi(color1, color2) {
                        color1 = getColor(color1);
                        color2 = getColor(color2);
                        var Lstr1 = get(color1, [ lab_d65, "l" ]);
                        var Lstr2 = get(color2, [ lab_d65, "l" ]);
                        var deltaPhiStar = Math.abs(Math.pow(Lstr1, phi) - Math.pow(Lstr2, phi));
                        var contrast2 = Math.pow(deltaPhiStar, 1 / phi) * Math.SQRT2 - 40;
                        return contrast2 < 7.5 ? 0 : contrast2;
                    }
                    var contrastMethods = Object.freeze({
                        __proto__: null,
                        contrastWCAG21,
                        contrastAPCA,
                        contrastMichelson,
                        contrastWeber,
                        contrastLstar,
                        contrastDeltaPhi
                    });
                    function contrast(background, foreground) {
                        var o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                        if (isString(o)) o = {
                            algorithm: o
                        };
                        var _o = o, algorithm = _o.algorithm, rest = _objectWithoutProperties(_o, _excluded11);
                        if (!algorithm) {
                            var algorithms = Object.keys(contrastMethods).map((function(a2) {
                                return a2.replace(/^contrast/, "");
                            })).join(", ");
                            throw new TypeError("contrast() function needs a contrast algorithm. Please specify one of: ".concat(algorithms));
                        }
                        background = getColor(background);
                        foreground = getColor(foreground);
                        for (var a2 in contrastMethods) if ("contrast" + algorithm.toLowerCase() === a2.toLowerCase()) return contrastMethods[a2](background, foreground, rest);
                        throw new TypeError("Unknown contrast algorithm: ".concat(algorithm));
                    }
                    function uv(color) {
                        var _getAll = getAll(color, XYZ_D65), _getAll2 = _slicedToArray(_getAll, 3), X = _getAll2[0], Y = _getAll2[1], Z = _getAll2[2];
                        var denom = X + 15 * Y + 3 * Z;
                        return [ 4 * X / denom, 9 * Y / denom ];
                    }
                    function xy(color) {
                        var _getAll3 = getAll(color, XYZ_D65), _getAll4 = _slicedToArray(_getAll3, 3), X = _getAll4[0], Y = _getAll4[1], Z = _getAll4[2];
                        var sum = X + Y + Z;
                        return [ X / sum, Y / sum ];
                    }
                    function register$1(Color3) {
                        Object.defineProperty(Color3.prototype, "uv", {
                            get: function() {
                                return uv(this);
                            }
                        });
                        Object.defineProperty(Color3.prototype, "xy", {
                            get: function() {
                                return xy(this);
                            }
                        });
                    }
                    var chromaticity = Object.freeze({
                        __proto__: null,
                        uv,
                        xy,
                        register: register$1
                    });
                    function deltaE76(color, sample) {
                        return distance(color, sample, "lab");
                    }
                    var π = Math.PI;
                    var d2r = π / 180;
                    function deltaECMC(color, sample) {
                        var _ref58 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, _ref58$l = _ref58.l, l = void 0 === _ref58$l ? 2 : _ref58$l, _ref58$c = _ref58.c, c4 = void 0 === _ref58$c ? 1 : _ref58$c;
                        var _lab$from5 = lab.from(color), _lab$from6 = _slicedToArray(_lab$from5, 3), L1 = _lab$from6[0], a1 = _lab$from6[1], b1 = _lab$from6[2];
                        var _lch$from = lch.from(lab, [ L1, a1, b1 ]), _lch$from2 = _slicedToArray(_lch$from, 3), C1 = _lch$from2[1], H1 = _lch$from2[2];
                        var _lab$from7 = lab.from(sample), _lab$from8 = _slicedToArray(_lab$from7, 3), L2 = _lab$from8[0], a2 = _lab$from8[1], b2 = _lab$from8[2];
                        var C2 = lch.from(lab, [ L2, a2, b2 ])[1];
                        if (C1 < 0) C1 = 0;
                        if (C2 < 0) C2 = 0;
                        var ΔL = L1 - L2;
                        var ΔC = C1 - C2;
                        var Δa = a1 - a2;
                        var Δb = b1 - b2;
                        var H2 = Math.pow(Δa, 2) + Math.pow(Δb, 2) - Math.pow(ΔC, 2);
                        var SL = .511;
                        if (L1 >= 16) SL = .040975 * L1 / (1 + .01765 * L1);
                        var SC = .0638 * C1 / (1 + .0131 * C1) + .638;
                        var T;
                        if (Number.isNaN(H1)) H1 = 0;
                        if (H1 >= 164 && H1 <= 345) T = .56 + Math.abs(.2 * Math.cos((H1 + 168) * d2r)); else T = .36 + Math.abs(.4 * Math.cos((H1 + 35) * d2r));
                        var C4 = Math.pow(C1, 4);
                        var F = Math.sqrt(C4 / (C4 + 1900));
                        var SH = SC * (F * T + 1 - F);
                        var dE = Math.pow(ΔL / (l * SL), 2);
                        dE += Math.pow(ΔC / (c4 * SC), 2);
                        dE += H2 / Math.pow(SH, 2);
                        return Math.sqrt(dE);
                    }
                    var Yw$1 = 203;
                    var XYZ_Abs_D65 = new ColorSpace({
                        id: "xyz-abs-d65",
                        name: "Absolute XYZ D65",
                        coords: {
                            x: {
                                refRange: [ 0, 9504.7 ],
                                name: "Xa"
                            },
                            y: {
                                refRange: [ 0, 1e4 ],
                                name: "Ya"
                            },
                            z: {
                                refRange: [ 0, 10888.3 ],
                                name: "Za"
                            }
                        },
                        base: XYZ_D65,
                        fromBase: function(XYZ) {
                            return XYZ.map((function(v) {
                                return Math.max(v * Yw$1, 0);
                            }));
                        },
                        toBase: function(AbsXYZ) {
                            return AbsXYZ.map((function(v) {
                                return Math.max(v / Yw$1, 0);
                            }));
                        }
                    });
                    var b$1 = 1.15;
                    var g = .66;
                    var n$1 = 2610 / Math.pow(2, 14);
                    var ninv$1 = Math.pow(2, 14) / 2610;
                    var c1$2 = 3424 / Math.pow(2, 12);
                    var c2$2 = 2413 / Math.pow(2, 7);
                    var c3$2 = 2392 / Math.pow(2, 7);
                    var p = 1.7 * 2523 / Math.pow(2, 5);
                    var pinv = Math.pow(2, 5) / (1.7 * 2523);
                    var d = -.56;
                    var d0 = 16295499532821565e-27;
                    var XYZtoCone_M = [ [ .41478972, .579999, .014648 ], [ -.20151, 1.120649, .0531008 ], [ -.0166008, .2648, .6684799 ] ];
                    var ConetoXYZ_M = [ [ 1.9242264357876067, -1.0047923125953657, .037651404030618 ], [ .35031676209499907, .7264811939316552, -.06538442294808501 ], [ -.09098281098284752, -.3127282905230739, 1.5227665613052603 ] ];
                    var ConetoIab_M = [ [ .5, .5, 0 ], [ 3.524, -4.066708, .542708 ], [ .199076, 1.096799, -1.295875 ] ];
                    var IabtoCone_M = [ [ 1, .1386050432715393, .05804731615611886 ], [ .9999999999999999, -.1386050432715393, -.05804731615611886 ], [ .9999999999999998, -.09601924202631895, -.8118918960560388 ] ];
                    var Jzazbz = new ColorSpace({
                        id: "jzazbz",
                        name: "Jzazbz",
                        coords: {
                            jz: {
                                refRange: [ 0, 1 ],
                                name: "Jz"
                            },
                            az: {
                                refRange: [ -.5, .5 ]
                            },
                            bz: {
                                refRange: [ -.5, .5 ]
                            }
                        },
                        base: XYZ_Abs_D65,
                        fromBase: function(XYZ) {
                            var _XYZ = _slicedToArray(XYZ, 3), Xa = _XYZ[0], Ya = _XYZ[1], Za = _XYZ[2];
                            var Xm = b$1 * Xa - (b$1 - 1) * Za;
                            var Ym = g * Ya - (g - 1) * Xa;
                            var LMS = multiplyMatrices(XYZtoCone_M, [ Xm, Ym, Za ]);
                            var PQLMS = LMS.map((function(val) {
                                var num = c1$2 + c2$2 * Math.pow(val / 1e4, n$1);
                                var denom = 1 + c3$2 * Math.pow(val / 1e4, n$1);
                                return Math.pow(num / denom, p);
                            }));
                            var _multiplyMatrices = multiplyMatrices(ConetoIab_M, PQLMS), _multiplyMatrices2 = _slicedToArray(_multiplyMatrices, 3), Iz = _multiplyMatrices2[0], az = _multiplyMatrices2[1], bz = _multiplyMatrices2[2];
                            var Jz = (1 + d) * Iz / (1 + d * Iz) - d0;
                            return [ Jz, az, bz ];
                        },
                        toBase: function(Jzazbz2) {
                            var _Jzazbz = _slicedToArray(Jzazbz2, 3), Jz = _Jzazbz[0], az = _Jzazbz[1], bz = _Jzazbz[2];
                            var Iz = (Jz + d0) / (1 + d - d * (Jz + d0));
                            var PQLMS = multiplyMatrices(IabtoCone_M, [ Iz, az, bz ]);
                            var LMS = PQLMS.map((function(val) {
                                var num = c1$2 - Math.pow(val, pinv);
                                var denom = c3$2 * Math.pow(val, pinv) - c2$2;
                                var x = 1e4 * Math.pow(num / denom, ninv$1);
                                return x;
                            }));
                            var _multiplyMatrices3 = multiplyMatrices(ConetoXYZ_M, LMS), _multiplyMatrices4 = _slicedToArray(_multiplyMatrices3, 3), Xm = _multiplyMatrices4[0], Ym = _multiplyMatrices4[1], Za = _multiplyMatrices4[2];
                            var Xa = (Xm + (b$1 - 1) * Za) / b$1;
                            var Ya = (Ym + (g - 1) * Xa) / g;
                            return [ Xa, Ya, Za ];
                        },
                        formats: {
                            color: {}
                        }
                    });
                    var jzczhz = new ColorSpace({
                        id: "jzczhz",
                        name: "JzCzHz",
                        coords: {
                            jz: {
                                refRange: [ 0, 1 ],
                                name: "Jz"
                            },
                            cz: {
                                refRange: [ 0, 1 ],
                                name: "Chroma"
                            },
                            hz: {
                                refRange: [ 0, 360 ],
                                type: "angle",
                                name: "Hue"
                            }
                        },
                        base: Jzazbz,
                        fromBase: function(jzazbz) {
                            var _jzazbz = _slicedToArray(jzazbz, 3), Jz = _jzazbz[0], az = _jzazbz[1], bz = _jzazbz[2];
                            var hue;
                            var ε2 = 2e-4;
                            if (Math.abs(az) < ε2 && Math.abs(bz) < ε2) hue = NaN; else hue = 180 * Math.atan2(bz, az) / Math.PI;
                            return [ Jz, Math.sqrt(Math.pow(az, 2) + Math.pow(bz, 2)), constrain(hue) ];
                        },
                        toBase: function(jzczhz2) {
                            return [ jzczhz2[0], jzczhz2[1] * Math.cos(jzczhz2[2] * Math.PI / 180), jzczhz2[1] * Math.sin(jzczhz2[2] * Math.PI / 180) ];
                        },
                        formats: {
                            color: {}
                        }
                    });
                    function deltaEJz(color, sample) {
                        var _jzczhz$from = jzczhz.from(color), _jzczhz$from2 = _slicedToArray(_jzczhz$from, 3), Jz1 = _jzczhz$from2[0], Cz1 = _jzczhz$from2[1], Hz1 = _jzczhz$from2[2];
                        var _jzczhz$from3 = jzczhz.from(sample), _jzczhz$from4 = _slicedToArray(_jzczhz$from3, 3), Jz2 = _jzczhz$from4[0], Cz2 = _jzczhz$from4[1], Hz2 = _jzczhz$from4[2];
                        var ΔJ = Jz1 - Jz2;
                        var ΔC = Cz1 - Cz2;
                        if (Number.isNaN(Hz1) && Number.isNaN(Hz2)) {
                            Hz1 = 0;
                            Hz2 = 0;
                        } else if (Number.isNaN(Hz1)) Hz1 = Hz2; else if (Number.isNaN(Hz2)) Hz2 = Hz1;
                        var Δh = Hz1 - Hz2;
                        var ΔH = 2 * Math.sqrt(Cz1 * Cz2) * Math.sin(Δh / 2 * (Math.PI / 180));
                        return Math.sqrt(Math.pow(ΔJ, 2) + Math.pow(ΔC, 2) + Math.pow(ΔH, 2));
                    }
                    var c1$1 = 3424 / 4096;
                    var c2$1 = 2413 / 128;
                    var c3$1 = 2392 / 128;
                    var m1 = 2610 / 16384;
                    var m2 = 2523 / 32;
                    var im1 = 16384 / 2610;
                    var im2 = 32 / 2523;
                    var XYZtoLMS_M$1 = [ [ .3592, .6976, -.0358 ], [ -.1922, 1.1004, .0755 ], [ .007, .0749, .8434 ] ];
                    var LMStoIPT_M = [ [ 2048 / 4096, 2048 / 4096, 0 ], [ 6610 / 4096, -13613 / 4096, 7003 / 4096 ], [ 17933 / 4096, -17390 / 4096, -543 / 4096 ] ];
                    var IPTtoLMS_M = [ [ .9999888965628402, .008605050147287059, .11103437159861648 ], [ 1.00001110343716, -.008605050147287059, -.11103437159861648 ], [ 1.0000320633910054, .56004913547279, -.3206339100541203 ] ];
                    var LMStoXYZ_M$1 = [ [ 2.0701800566956137, -1.326456876103021, .20661600684785517 ], [ .3649882500326575, .6804673628522352, -.04542175307585323 ], [ -.04959554223893211, -.04942116118675749, 1.1879959417328034 ] ];
                    var ictcp = new ColorSpace({
                        id: "ictcp",
                        name: "ICTCP",
                        coords: {
                            i: {
                                refRange: [ 0, 1 ],
                                name: "I"
                            },
                            ct: {
                                refRange: [ -.5, .5 ],
                                name: "CT"
                            },
                            cp: {
                                refRange: [ -.5, .5 ],
                                name: "CP"
                            }
                        },
                        base: XYZ_Abs_D65,
                        fromBase: function(XYZ) {
                            var LMS = multiplyMatrices(XYZtoLMS_M$1, XYZ);
                            return LMStoICtCp(LMS);
                        },
                        toBase: function(ICtCp) {
                            var LMS = ICtCptoLMS(ICtCp);
                            return multiplyMatrices(LMStoXYZ_M$1, LMS);
                        },
                        formats: {
                            color: {}
                        }
                    });
                    function LMStoICtCp(LMS) {
                        var PQLMS = LMS.map((function(val) {
                            var num = c1$1 + c2$1 * Math.pow(val / 1e4, m1);
                            var denom = 1 + c3$1 * Math.pow(val / 1e4, m1);
                            return Math.pow(num / denom, m2);
                        }));
                        return multiplyMatrices(LMStoIPT_M, PQLMS);
                    }
                    function ICtCptoLMS(ICtCp) {
                        var PQLMS = multiplyMatrices(IPTtoLMS_M, ICtCp);
                        var LMS = PQLMS.map((function(val) {
                            var num = Math.max(Math.pow(val, im2) - c1$1, 0);
                            var denom = c2$1 - c3$1 * Math.pow(val, im2);
                            return 1e4 * Math.pow(num / denom, im1);
                        }));
                        return LMS;
                    }
                    function deltaEITP(color, sample) {
                        var _ictcp$from = ictcp.from(color), _ictcp$from2 = _slicedToArray(_ictcp$from, 3), I1 = _ictcp$from2[0], T1 = _ictcp$from2[1], P1 = _ictcp$from2[2];
                        var _ictcp$from3 = ictcp.from(sample), _ictcp$from4 = _slicedToArray(_ictcp$from3, 3), I2 = _ictcp$from4[0], T2 = _ictcp$from4[1], P2 = _ictcp$from4[2];
                        return 720 * Math.sqrt(Math.pow(I1 - I2, 2) + .25 * Math.pow(T1 - T2, 2) + Math.pow(P1 - P2, 2));
                    }
                    var XYZtoLMS_M = [ [ .8190224432164319, .3619062562801221, -.12887378261216414 ], [ .0329836671980271, .9292868468965546, .03614466816999844 ], [ .048177199566046255, .26423952494422764, .6335478258136937 ] ];
                    var LMStoXYZ_M = [ [ 1.2268798733741557, -.5578149965554813, .28139105017721583 ], [ -.04057576262431372, 1.1122868293970594, -.07171106666151701 ], [ -.07637294974672142, -.4214933239627914, 1.5869240244272418 ] ];
                    var LMStoLab_M = [ [ .2104542553, .793617785, -.0040720468 ], [ 1.9779984951, -2.428592205, .4505937099 ], [ .0259040371, .7827717662, -.808675766 ] ];
                    var LabtoLMS_M = [ [ .9999999984505198, .39633779217376786, .2158037580607588 ], [ 1.0000000088817609, -.10556134232365635, -.06385417477170591 ], [ 1.0000000546724108, -.08948418209496575, -1.2914855378640917 ] ];
                    var OKLab = new ColorSpace({
                        id: "oklab",
                        name: "OKLab",
                        coords: {
                            l: {
                                refRange: [ 0, 1 ],
                                name: "L"
                            },
                            a: {
                                refRange: [ -.4, .4 ]
                            },
                            b: {
                                refRange: [ -.4, .4 ]
                            }
                        },
                        white: "D65",
                        base: XYZ_D65,
                        fromBase: function(XYZ) {
                            var LMS = multiplyMatrices(XYZtoLMS_M, XYZ);
                            var LMSg = LMS.map((function(val) {
                                return Math.cbrt(val);
                            }));
                            return multiplyMatrices(LMStoLab_M, LMSg);
                        },
                        toBase: function(OKLab2) {
                            var LMSg = multiplyMatrices(LabtoLMS_M, OKLab2);
                            var LMS = LMSg.map((function(val) {
                                return Math.pow(val, 3);
                            }));
                            return multiplyMatrices(LMStoXYZ_M, LMS);
                        },
                        formats: {
                            oklab: {
                                coords: [ "<number> | <percentage>", "<number>", "<number>" ]
                            }
                        }
                    });
                    function deltaEOK(color, sample) {
                        var _OKLab$from = OKLab.from(color), _OKLab$from2 = _slicedToArray(_OKLab$from, 3), L1 = _OKLab$from2[0], a1 = _OKLab$from2[1], b1 = _OKLab$from2[2];
                        var _OKLab$from3 = OKLab.from(sample), _OKLab$from4 = _slicedToArray(_OKLab$from3, 3), L2 = _OKLab$from4[0], a2 = _OKLab$from4[1], b2 = _OKLab$from4[2];
                        var ΔL = L1 - L2;
                        var Δa = a1 - a2;
                        var Δb = b1 - b2;
                        return Math.sqrt(Math.pow(ΔL, 2) + Math.pow(Δa, 2) + Math.pow(Δb, 2));
                    }
                    var deltaEMethods = Object.freeze({
                        __proto__: null,
                        deltaE76,
                        deltaECMC,
                        deltaE2000,
                        deltaEJz,
                        deltaEITP,
                        deltaEOK
                    });
                    function deltaE(c12, c22) {
                        var o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                        if (isString(o)) o = {
                            method: o
                        };
                        var _o2 = o, _o2$method = _o2.method, method = void 0 === _o2$method ? defaults.deltaE : _o2$method, rest = _objectWithoutProperties(_o2, _excluded12);
                        c12 = getColor(c12);
                        c22 = getColor(c22);
                        for (var m3 in deltaEMethods) if ("deltae" + method.toLowerCase() === m3.toLowerCase()) return deltaEMethods[m3](c12, c22, rest);
                        throw new TypeError("Unknown deltaE method: ".concat(method));
                    }
                    function lighten(color) {
                        var amount = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : .25;
                        var space = ColorSpace.get("oklch", "lch");
                        var lightness = [ space, "l" ];
                        return set(color, lightness, (function(l) {
                            return l * (1 + amount);
                        }));
                    }
                    function darken(color) {
                        var amount = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : .25;
                        var space = ColorSpace.get("oklch", "lch");
                        var lightness = [ space, "l" ];
                        return set(color, lightness, (function(l) {
                            return l * (1 - amount);
                        }));
                    }
                    var variations = Object.freeze({
                        __proto__: null,
                        lighten,
                        darken
                    });
                    function mix(c12, c22) {
                        var p2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : .5;
                        var o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
                        var _ref59 = [ getColor(c12), getColor(c22) ];
                        c12 = _ref59[0];
                        c22 = _ref59[1];
                        if ("object" === type(p2)) {
                            var _ref60 = [ .5, p2 ];
                            p2 = _ref60[0];
                            o = _ref60[1];
                        }
                        var _o3 = o, space = _o3.space, outputSpace = _o3.outputSpace, premultiplied = _o3.premultiplied;
                        var r = range(c12, c22, {
                            space,
                            outputSpace,
                            premultiplied
                        });
                        return r(p2);
                    }
                    function steps(c12, c22) {
                        var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                        var colorRange;
                        if (isRange(c12)) {
                            colorRange = c12;
                            options = c22;
                            var _colorRange$rangeArgs = _slicedToArray(colorRange.rangeArgs.colors, 2);
                            c12 = _colorRange$rangeArgs[0];
                            c22 = _colorRange$rangeArgs[1];
                        }
                        var _options2 = options, maxDeltaE = _options2.maxDeltaE, deltaEMethod = _options2.deltaEMethod, _options2$steps = _options2.steps, steps2 = void 0 === _options2$steps ? 2 : _options2$steps, _options2$maxSteps = _options2.maxSteps, maxSteps = void 0 === _options2$maxSteps ? 1e3 : _options2$maxSteps, rangeOptions = _objectWithoutProperties(_options2, _excluded13);
                        if (!colorRange) {
                            var _ref61 = [ getColor(c12), getColor(c22) ];
                            c12 = _ref61[0];
                            c22 = _ref61[1];
                            colorRange = range(c12, c22, rangeOptions);
                        }
                        var totalDelta = deltaE(c12, c22);
                        var actualSteps = maxDeltaE > 0 ? Math.max(steps2, Math.ceil(totalDelta / maxDeltaE) + 1) : steps2;
                        var ret = [];
                        if (void 0 !== maxSteps) actualSteps = Math.min(actualSteps, maxSteps);
                        if (1 === actualSteps) ret = [ {
                            p: .5,
                            color: colorRange(.5)
                        } ]; else {
                            var step = 1 / (actualSteps - 1);
                            ret = Array.from({
                                length: actualSteps
                            }, (function(_, i) {
                                var p2 = i * step;
                                return {
                                    p: p2,
                                    color: colorRange(p2)
                                };
                            }));
                        }
                        if (maxDeltaE > 0) {
                            var maxDelta = ret.reduce((function(acc, cur, i) {
                                if (0 === i) return 0;
                                var ΔΕ = deltaE(cur.color, ret[i - 1].color, deltaEMethod);
                                return Math.max(acc, ΔΕ);
                            }), 0);
                            while (maxDelta > maxDeltaE) {
                                maxDelta = 0;
                                for (var _i20 = 1; _i20 < ret.length && ret.length < maxSteps; _i20++) {
                                    var prev = ret[_i20 - 1];
                                    var cur = ret[_i20];
                                    var p2 = (cur.p + prev.p) / 2;
                                    var _color = colorRange(p2);
                                    maxDelta = Math.max(maxDelta, deltaE(_color, prev.color), deltaE(_color, cur.color));
                                    ret.splice(_i20, 0, {
                                        p: p2,
                                        color: colorRange(p2)
                                    });
                                    _i20++;
                                }
                            }
                        }
                        ret = ret.map((function(a2) {
                            return a2.color;
                        }));
                        return ret;
                    }
                    function range(color1, color2) {
                        var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                        if (isRange(color1)) {
                            var r = color1, options2 = color2;
                            return range.apply(void 0, _toConsumableArray(r.rangeArgs.colors).concat([ _extends({}, r.rangeArgs.options, options2) ]));
                        }
                        var space = options.space, outputSpace = options.outputSpace, progression = options.progression, premultiplied = options.premultiplied;
                        color1 = getColor(color1);
                        color2 = getColor(color2);
                        color1 = clone2(color1);
                        color2 = clone2(color2);
                        var rangeArgs = {
                            colors: [ color1, color2 ],
                            options
                        };
                        if (space) space = ColorSpace.get(space); else space = ColorSpace.registry[defaults.interpolationSpace] || color1.space;
                        outputSpace = outputSpace ? ColorSpace.get(outputSpace) : space;
                        color1 = to(color1, space);
                        color2 = to(color2, space);
                        color1 = toGamut(color1);
                        color2 = toGamut(color2);
                        if (space.coords.h && "angle" === space.coords.h.type) {
                            var arc = options.hue = options.hue || "shorter";
                            var hue = [ space, "h" ];
                            var _ref62 = [ get(color1, hue), get(color2, hue) ], θ1 = _ref62[0], θ2 = _ref62[1];
                            var _adjust = adjust(arc, [ θ1, θ2 ]);
                            var _adjust2 = _slicedToArray(_adjust, 2);
                            θ1 = _adjust2[0];
                            θ2 = _adjust2[1];
                            set(color1, hue, θ1);
                            set(color2, hue, θ2);
                        }
                        if (premultiplied) {
                            color1.coords = color1.coords.map((function(c4) {
                                return c4 * color1.alpha;
                            }));
                            color2.coords = color2.coords.map((function(c4) {
                                return c4 * color2.alpha;
                            }));
                        }
                        return Object.assign((function(p2) {
                            p2 = progression ? progression(p2) : p2;
                            var coords = color1.coords.map((function(start, i) {
                                var end = color2.coords[i];
                                return interpolate(start, end, p2);
                            }));
                            var alpha = interpolate(color1.alpha, color2.alpha, p2);
                            var ret = {
                                space,
                                coords,
                                alpha
                            };
                            if (premultiplied) ret.coords = ret.coords.map((function(c4) {
                                return c4 / alpha;
                            }));
                            if (outputSpace !== space) ret = to(ret, outputSpace);
                            return ret;
                        }), {
                            rangeArgs
                        });
                    }
                    function isRange(val) {
                        return "function" === type(val) && !!val.rangeArgs;
                    }
                    defaults.interpolationSpace = "lab";
                    function register(Color3) {
                        Color3.defineFunction("mix", mix, {
                            returns: "color"
                        });
                        Color3.defineFunction("range", range, {
                            returns: "function<color>"
                        });
                        Color3.defineFunction("steps", steps, {
                            returns: "array<color>"
                        });
                    }
                    var interpolation = Object.freeze({
                        __proto__: null,
                        mix,
                        steps,
                        range,
                        isRange,
                        register
                    });
                    var HSL = new ColorSpace({
                        id: "hsl",
                        name: "HSL",
                        coords: {
                            h: {
                                refRange: [ 0, 360 ],
                                type: "angle",
                                name: "Hue"
                            },
                            s: {
                                range: [ 0, 100 ],
                                name: "Saturation"
                            },
                            l: {
                                range: [ 0, 100 ],
                                name: "Lightness"
                            }
                        },
                        base: sRGB,
                        fromBase: function(rgb) {
                            var max2 = Math.max.apply(Math, _toConsumableArray(rgb));
                            var min = Math.min.apply(Math, _toConsumableArray(rgb));
                            var _rgb = _slicedToArray(rgb, 3), r = _rgb[0], g2 = _rgb[1], b2 = _rgb[2];
                            var h = NaN, s = 0, l = (min + max2) / 2;
                            var d2 = max2 - min;
                            if (0 !== d2) {
                                s = 0 === l || 1 === l ? 0 : (max2 - l) / Math.min(l, 1 - l);
                                switch (max2) {
                                  case r:
                                    h = (g2 - b2) / d2 + (g2 < b2 ? 6 : 0);
                                    break;

                                  case g2:
                                    h = (b2 - r) / d2 + 2;
                                    break;

                                  case b2:
                                    h = (r - g2) / d2 + 4;
                                }
                                h *= 60;
                            }
                            return [ h, 100 * s, 100 * l ];
                        },
                        toBase: function(hsl) {
                            var _hsl = _slicedToArray(hsl, 3), h = _hsl[0], s = _hsl[1], l = _hsl[2];
                            h %= 360;
                            if (h < 0) h += 360;
                            s /= 100;
                            l /= 100;
                            function f(n2) {
                                var k = (n2 + h / 30) % 12;
                                var a2 = s * Math.min(l, 1 - l);
                                return l - a2 * Math.max(-1, Math.min(k - 3, 9 - k, 1));
                            }
                            return [ f(0), f(8), f(4) ];
                        },
                        formats: {
                            hsl: {
                                toGamut: true,
                                coords: [ "<number> | <angle>", "<percentage>", "<percentage>" ]
                            },
                            hsla: {
                                coords: [ "<number> | <angle>", "<percentage>", "<percentage>" ],
                                commas: true,
                                lastAlpha: true
                            }
                        }
                    });
                    var HSV = new ColorSpace({
                        id: "hsv",
                        name: "HSV",
                        coords: {
                            h: {
                                refRange: [ 0, 360 ],
                                type: "angle",
                                name: "Hue"
                            },
                            s: {
                                range: [ 0, 100 ],
                                name: "Saturation"
                            },
                            v: {
                                range: [ 0, 100 ],
                                name: "Value"
                            }
                        },
                        base: HSL,
                        fromBase: function(hsl) {
                            var _hsl2 = _slicedToArray(hsl, 3), h = _hsl2[0], s = _hsl2[1], l = _hsl2[2];
                            s /= 100;
                            l /= 100;
                            var v = l + s * Math.min(l, 1 - l);
                            return [ h, 0 === v ? 0 : 200 * (1 - l / v), 100 * v ];
                        },
                        toBase: function(hsv) {
                            var _hsv = _slicedToArray(hsv, 3), h = _hsv[0], s = _hsv[1], v = _hsv[2];
                            s /= 100;
                            v /= 100;
                            var l = v * (1 - s / 2);
                            return [ h, 0 === l || 1 === l ? 0 : (v - l) / Math.min(l, 1 - l) * 100, 100 * l ];
                        },
                        formats: {
                            color: {
                                toGamut: true
                            }
                        }
                    });
                    var hwb = new ColorSpace({
                        id: "hwb",
                        name: "HWB",
                        coords: {
                            h: {
                                refRange: [ 0, 360 ],
                                type: "angle",
                                name: "Hue"
                            },
                            w: {
                                range: [ 0, 100 ],
                                name: "Whiteness"
                            },
                            b: {
                                range: [ 0, 100 ],
                                name: "Blackness"
                            }
                        },
                        base: HSV,
                        fromBase: function(hsv) {
                            var _hsv2 = _slicedToArray(hsv, 3), h = _hsv2[0], s = _hsv2[1], v = _hsv2[2];
                            return [ h, v * (100 - s) / 100, 100 - v ];
                        },
                        toBase: function(hwb2) {
                            var _hwb = _slicedToArray(hwb2, 3), h = _hwb[0], w = _hwb[1], b2 = _hwb[2];
                            w /= 100;
                            b2 /= 100;
                            var sum = w + b2;
                            if (sum >= 1) {
                                var gray = w / sum;
                                return [ h, 0, 100 * gray ];
                            }
                            var v = 1 - b2;
                            var s = 0 === v ? 0 : 1 - w / v;
                            return [ h, 100 * s, 100 * v ];
                        },
                        formats: {
                            hwb: {
                                toGamut: true,
                                coords: [ "<number> | <angle>", "<percentage>", "<percentage>" ]
                            }
                        }
                    });
                    var toXYZ_M$2 = [ [ .5766690429101305, .1855582379065463, .1882286462349947 ], [ .29734497525053605, .6273635662554661, .07529145849399788 ], [ .02703136138641234, .07068885253582723, .9913375368376388 ] ];
                    var fromXYZ_M$2 = [ [ 2.0415879038107465, -.5650069742788596, -.34473135077832956 ], [ -.9692436362808795, 1.8759675015077202, .04155505740717557 ], [ .013444280632031142, -.11836239223101838, 1.0151749943912054 ] ];
                    var A98Linear = new RGBColorSpace({
                        id: "a98rgb-linear",
                        name: "Linear Adobe® 98 RGB compatible",
                        white: "D65",
                        toXYZ_M: toXYZ_M$2,
                        fromXYZ_M: fromXYZ_M$2
                    });
                    var a98rgb = new RGBColorSpace({
                        id: "a98rgb",
                        name: "Adobe® 98 RGB compatible",
                        base: A98Linear,
                        toBase: function(RGB) {
                            return RGB.map((function(val) {
                                return Math.pow(Math.abs(val), 563 / 256) * Math.sign(val);
                            }));
                        },
                        fromBase: function(RGB) {
                            return RGB.map((function(val) {
                                return Math.pow(Math.abs(val), 256 / 563) * Math.sign(val);
                            }));
                        },
                        formats: {
                            color: {
                                id: "a98-rgb"
                            }
                        }
                    });
                    var toXYZ_M$1 = [ [ .7977604896723027, .13518583717574031, .0313493495815248 ], [ .2880711282292934, .7118432178101014, 8565396060525902e-20 ], [ 0, 0, .8251046025104601 ] ];
                    var fromXYZ_M$1 = [ [ 1.3457989731028281, -.25558010007997534, -.05110628506753401 ], [ -.5446224939028347, 1.5082327413132781, .02053603239147973 ], [ 0, 0, 1.2119675456389454 ] ];
                    var ProPhotoLinear = new RGBColorSpace({
                        id: "prophoto-linear",
                        name: "Linear ProPhoto",
                        white: "D50",
                        base: XYZ_D50,
                        toXYZ_M: toXYZ_M$1,
                        fromXYZ_M: fromXYZ_M$1
                    });
                    var Et = 1 / 512;
                    var Et2 = 16 / 512;
                    var prophoto = new RGBColorSpace({
                        id: "prophoto",
                        name: "ProPhoto",
                        base: ProPhotoLinear,
                        toBase: function(RGB) {
                            return RGB.map((function(v) {
                                return v < Et2 ? v / 16 : Math.pow(v, 1.8);
                            }));
                        },
                        fromBase: function(RGB) {
                            return RGB.map((function(v) {
                                return v >= Et ? Math.pow(v, 1 / 1.8) : 16 * v;
                            }));
                        },
                        formats: {
                            color: {
                                id: "prophoto-rgb"
                            }
                        }
                    });
                    var oklch = new ColorSpace({
                        id: "oklch",
                        name: "OKLCh",
                        coords: {
                            l: {
                                refRange: [ 0, 1 ],
                                name: "Lightness"
                            },
                            c: {
                                refRange: [ 0, .4 ],
                                name: "Chroma"
                            },
                            h: {
                                refRange: [ 0, 360 ],
                                type: "angle",
                                name: "Hue"
                            }
                        },
                        white: "D65",
                        base: OKLab,
                        fromBase: function(oklab) {
                            var _oklab = _slicedToArray(oklab, 3), L = _oklab[0], a2 = _oklab[1], b2 = _oklab[2];
                            var h;
                            var ε2 = 2e-4;
                            if (Math.abs(a2) < ε2 && Math.abs(b2) < ε2) h = NaN; else h = 180 * Math.atan2(b2, a2) / Math.PI;
                            return [ L, Math.sqrt(Math.pow(a2, 2) + Math.pow(b2, 2)), constrain(h) ];
                        },
                        toBase: function(oklch2) {
                            var _oklch = _slicedToArray(oklch2, 3), L = _oklch[0], C = _oklch[1], h = _oklch[2];
                            var a2, b2;
                            if (isNaN(h)) {
                                a2 = 0;
                                b2 = 0;
                            } else {
                                a2 = C * Math.cos(h * Math.PI / 180);
                                b2 = C * Math.sin(h * Math.PI / 180);
                            }
                            return [ L, a2, b2 ];
                        },
                        formats: {
                            oklch: {
                                coords: [ "<number> | <percentage>", "<number>", "<number> | <angle>" ]
                            }
                        }
                    });
                    var Yw = 203;
                    var n = 2610 / Math.pow(2, 14);
                    var ninv = Math.pow(2, 14) / 2610;
                    var m = 2523 / Math.pow(2, 5);
                    var minv = Math.pow(2, 5) / 2523;
                    var c1 = 3424 / Math.pow(2, 12);
                    var c2 = 2413 / Math.pow(2, 7);
                    var c3 = 2392 / Math.pow(2, 7);
                    var rec2100Pq = new RGBColorSpace({
                        id: "rec2100pq",
                        name: "REC.2100-PQ",
                        base: REC2020Linear,
                        toBase: function(RGB) {
                            return RGB.map((function(val) {
                                var x = Math.pow(Math.max(Math.pow(val, minv) - c1, 0) / (c2 - c3 * Math.pow(val, minv)), ninv);
                                return 1e4 * x / Yw;
                            }));
                        },
                        fromBase: function(RGB) {
                            return RGB.map((function(val) {
                                var x = Math.max(val * Yw / 1e4, 0);
                                var num = c1 + c2 * Math.pow(x, n);
                                var denom = 1 + c3 * Math.pow(x, n);
                                return Math.pow(num / denom, m);
                            }));
                        },
                        formats: {
                            color: {
                                id: "rec2100-pq"
                            }
                        }
                    });
                    var a = .17883277;
                    var b = .28466892;
                    var c = .55991073;
                    var scale = 3.7743;
                    var rec2100Hlg = new RGBColorSpace({
                        id: "rec2100hlg",
                        cssid: "rec2100-hlg",
                        name: "REC.2100-HLG",
                        referred: "scene",
                        base: REC2020Linear,
                        toBase: function(RGB) {
                            return RGB.map((function(val) {
                                if (val <= .5) return Math.pow(val, 2) / 3 * scale;
                                return Math.exp((val - c) / a + b) / 12 * scale;
                            }));
                        },
                        fromBase: function(RGB) {
                            return RGB.map((function(val) {
                                val /= scale;
                                if (val <= 1 / 12) return Math.sqrt(3 * val);
                                return a * Math.log(12 * val - b) + c;
                            }));
                        },
                        formats: {
                            color: {
                                id: "rec2100-hlg"
                            }
                        }
                    });
                    var CATs = {};
                    hooks.add("chromatic-adaptation-start", (function(env) {
                        if (env.options.method) env.M = adapt(env.W1, env.W2, env.options.method);
                    }));
                    hooks.add("chromatic-adaptation-end", (function(env) {
                        if (!env.M) env.M = adapt(env.W1, env.W2, env.options.method);
                    }));
                    function defineCAT(_ref63) {
                        var id = _ref63.id;
                        _ref63.toCone_M, _ref63.fromCone_M;
                        CATs[id] = arguments[0];
                    }
                    function adapt(W1, W2) {
                        var id = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "Bradford";
                        var method = CATs[id];
                        var _multiplyMatrices5 = multiplyMatrices(method.toCone_M, W1), _multiplyMatrices6 = _slicedToArray(_multiplyMatrices5, 3), ρs = _multiplyMatrices6[0], γs = _multiplyMatrices6[1], βs = _multiplyMatrices6[2];
                        var _multiplyMatrices7 = multiplyMatrices(method.toCone_M, W2), _multiplyMatrices8 = _slicedToArray(_multiplyMatrices7, 3), ρd = _multiplyMatrices8[0], γd = _multiplyMatrices8[1], βd = _multiplyMatrices8[2];
                        var scale2 = [ [ ρd / ρs, 0, 0 ], [ 0, γd / γs, 0 ], [ 0, 0, βd / βs ] ];
                        var scaled_cone_M = multiplyMatrices(scale2, method.toCone_M);
                        var adapt_M = multiplyMatrices(method.fromCone_M, scaled_cone_M);
                        return adapt_M;
                    }
                    defineCAT({
                        id: "von Kries",
                        toCone_M: [ [ .40024, .7076, -.08081 ], [ -.2263, 1.16532, .0457 ], [ 0, 0, .91822 ] ],
                        fromCone_M: [ [ 1.8599364, -1.1293816, .2198974 ], [ .3611914, .6388125, -64e-7 ], [ 0, 0, 1.0890636 ] ]
                    });
                    defineCAT({
                        id: "Bradford",
                        toCone_M: [ [ .8951, .2664, -.1614 ], [ -.7502, 1.7135, .0367 ], [ .0389, -.0685, 1.0296 ] ],
                        fromCone_M: [ [ .9869929, -.1470543, .1599627 ], [ .4323053, .5183603, .0492912 ], [ -.0085287, .0400428, .9684867 ] ]
                    });
                    defineCAT({
                        id: "CAT02",
                        toCone_M: [ [ .7328, .4296, -.1624 ], [ -.7036, 1.6975, .0061 ], [ .003, .0136, .9834 ] ],
                        fromCone_M: [ [ 1.0961238, -.278869, .1827452 ], [ .454369, .4735332, .0720978 ], [ -.0096276, -.005698, 1.0153256 ] ]
                    });
                    defineCAT({
                        id: "CAT16",
                        toCone_M: [ [ .401288, .650173, -.051461 ], [ -.250268, 1.204414, .045854 ], [ -.002079, .048952, .953127 ] ],
                        fromCone_M: [ [ 1.862067855087233, -1.011254630531685, .1491867754444518 ], [ .3875265432361372, .6214474419314753, -.008973985167612518 ], [ -.01584149884933386, -.03412293802851557, 1.04996443687785 ] ]
                    });
                    Object.assign(WHITES, {
                        A: [ 1.0985, 1, .35585 ],
                        C: [ .98074, 1, 1.18232 ],
                        D55: [ .95682, 1, .92149 ],
                        D75: [ .94972, 1, 1.22638 ],
                        E: [ 1, 1, 1 ],
                        F2: [ .99186, 1, .67393 ],
                        F7: [ .95041, 1, 1.08747 ],
                        F11: [ 1.00962, 1, .6435 ]
                    });
                    WHITES.ACES = [ .32168 / .33767, 1, (1 - .32168 - .33767) / .33767 ];
                    var toXYZ_M = [ [ .6624541811085053, .13400420645643313, .1561876870049078 ], [ .27222871678091454, .6740817658111484, .05368951740793705 ], [ -.005574649490394108, .004060733528982826, 1.0103391003129971 ] ];
                    var fromXYZ_M = [ [ 1.6410233796943257, -.32480329418479, -.23642469523761225 ], [ -.6636628587229829, 1.6153315916573379, .016756347685530137 ], [ .011721894328375376, -.008284441996237409, .9883948585390215 ] ];
                    var ACEScg = new RGBColorSpace({
                        id: "acescg",
                        name: "ACEScg",
                        coords: {
                            r: {
                                range: [ 0, 65504 ],
                                name: "Red"
                            },
                            g: {
                                range: [ 0, 65504 ],
                                name: "Green"
                            },
                            b: {
                                range: [ 0, 65504 ],
                                name: "Blue"
                            }
                        },
                        referred: "scene",
                        white: WHITES.ACES,
                        toXYZ_M,
                        fromXYZ_M,
                        formats: {
                            color: {}
                        }
                    });
                    var ε = Math.pow(2, -16);
                    var ACES_min_nonzero = -.35828683;
                    var ACES_cc_max = (Math.log2(65504) + 9.72) / 17.52;
                    var acescc = new RGBColorSpace({
                        id: "acescc",
                        name: "ACEScc",
                        coords: {
                            r: {
                                range: [ ACES_min_nonzero, ACES_cc_max ],
                                name: "Red"
                            },
                            g: {
                                range: [ ACES_min_nonzero, ACES_cc_max ],
                                name: "Green"
                            },
                            b: {
                                range: [ ACES_min_nonzero, ACES_cc_max ],
                                name: "Blue"
                            }
                        },
                        referred: "scene",
                        base: ACEScg,
                        toBase: function(RGB) {
                            var low = (9.72 - 15) / 17.52;
                            return RGB.map((function(val) {
                                if (val <= low) return 2 * (Math.pow(2, 17.52 * val - 9.72) - ε); else if (val < ACES_cc_max) return Math.pow(2, 17.52 * val - 9.72); else return 65504;
                            }));
                        },
                        fromBase: function(RGB) {
                            return RGB.map((function(val) {
                                if (val <= 0) return (Math.log2(ε) + 9.72) / 17.52; else if (val < ε) return (Math.log2(ε + .5 * val) + 9.72) / 17.52; else return (Math.log2(val) + 9.72) / 17.52;
                            }));
                        },
                        formats: {
                            color: {}
                        }
                    });
                    var spaces = Object.freeze({
                        __proto__: null,
                        XYZ_D65,
                        XYZ_D50,
                        XYZ_ABS_D65: XYZ_Abs_D65,
                        Lab_D65: lab_d65,
                        Lab: lab,
                        LCH: lch,
                        sRGB_Linear: sRGBLinear,
                        sRGB,
                        HSL,
                        HWB: hwb,
                        HSV,
                        P3_Linear: P3Linear,
                        P3,
                        A98RGB_Linear: A98Linear,
                        A98RGB: a98rgb,
                        ProPhoto_Linear: ProPhotoLinear,
                        ProPhoto: prophoto,
                        REC_2020_Linear: REC2020Linear,
                        REC_2020: REC2020,
                        OKLab,
                        OKLCH: oklch,
                        Jzazbz,
                        JzCzHz: jzczhz,
                        ICTCP: ictcp,
                        REC_2100_PQ: rec2100Pq,
                        REC_2100_HLG: rec2100Hlg,
                        ACEScg,
                        ACEScc: acescc
                    });
                    var Color = (_space = new WeakMap, function() {
                        function Color() {
                            var _this2 = this;
                            _classCallCheck(this, Color);
                            _classPrivateFieldInitSpec(this, _space, void 0);
                            var color;
                            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) args[_key3] = arguments[_key3];
                            if (1 === args.length) color = getColor(args[0]);
                            var space, coords, alpha;
                            if (color) {
                                space = color.space || color.spaceId;
                                coords = color.coords;
                                alpha = color.alpha;
                            } else {
                                space = args[0];
                                coords = args[1];
                                alpha = args[2];
                            }
                            _classPrivateFieldSet(_space, this, ColorSpace.get(space));
                            this.coords = coords ? coords.slice() : [ 0, 0, 0 ];
                            this.alpha = alpha < 1 ? alpha : 1;
                            for (var _i21 = 0; _i21 < this.coords.length; _i21++) if ("NaN" === this.coords[_i21]) this.coords[_i21] = NaN;
                            var _loop7 = function(id) {
                                Object.defineProperty(_this2, id, {
                                    get: function() {
                                        return _this2.get(id);
                                    },
                                    set: function(value) {
                                        return _this2.set(id, value);
                                    }
                                });
                            };
                            for (var id in _classPrivateFieldGet(_space, this).coords) _loop7(id);
                        }
                        return _createClass(Color, [ {
                            key: "space",
                            get: function() {
                                return _classPrivateFieldGet(_space, this);
                            }
                        }, {
                            key: "spaceId",
                            get: function() {
                                return _classPrivateFieldGet(_space, this).id;
                            }
                        }, {
                            key: "clone",
                            value: function() {
                                return new Color(this.space, this.coords, this.alpha);
                            }
                        }, {
                            key: "toJSON",
                            value: function() {
                                return {
                                    spaceId: this.spaceId,
                                    coords: this.coords,
                                    alpha: this.alpha
                                };
                            }
                        }, {
                            key: "display",
                            value: function() {
                                for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) args[_key4] = arguments[_key4];
                                var ret = _display.apply(void 0, [ this ].concat(args));
                                ret.color = new Color(ret.color);
                                return ret;
                            }
                        } ], [ {
                            key: "get",
                            value: function(color) {
                                if (color instanceof Color) return color;
                                for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) args[_key5 - 1] = arguments[_key5];
                                return _construct(Color, [ color ].concat(args));
                            }
                        }, {
                            key: "defineFunction",
                            value: function(name, code) {
                                var o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : code;
                                var _o$instance = o.instance, instance = void 0 === _o$instance ? true : _o$instance, returns = o.returns;
                                var func = function() {
                                    var ret = code.apply(void 0, arguments);
                                    if ("color" === returns) ret = Color.get(ret); else if ("function<color>" === returns) {
                                        var f = ret;
                                        ret = function() {
                                            var ret2 = f.apply(void 0, arguments);
                                            return Color.get(ret2);
                                        };
                                        Object.assign(ret, f);
                                    } else if ("array<color>" === returns) ret = ret.map((function(c4) {
                                        return Color.get(c4);
                                    }));
                                    return ret;
                                };
                                if (!(name in Color)) Color[name] = func;
                                if (instance) Color.prototype[name] = function() {
                                    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) args[_key6] = arguments[_key6];
                                    return func.apply(void 0, [ this ].concat(args));
                                };
                            }
                        }, {
                            key: "defineFunctions",
                            value: function(o) {
                                for (var name in o) Color.defineFunction(name, o[name], o[name]);
                            }
                        }, {
                            key: "extend",
                            value: function(exports) {
                                if (exports.register) exports.register(Color); else for (var name in exports) Color.defineFunction(name, exports[name]);
                            }
                        } ]);
                    }());
                    Color.defineFunctions({
                        get,
                        getAll,
                        set,
                        setAll,
                        to,
                        equals,
                        inGamut,
                        toGamut,
                        distance,
                        toString: serialize
                    });
                    Object.assign(Color, {
                        util,
                        hooks,
                        WHITES,
                        Space: ColorSpace,
                        spaces: ColorSpace.registry,
                        parse: parse2,
                        defaults
                    });
                    for (var _i22 = 0, _Object$keys2 = Object.keys(spaces); _i22 < _Object$keys2.length; _i22++) {
                        var key = _Object$keys2[_i22];
                        ColorSpace.register(spaces[key]);
                    }
                    for (var id in ColorSpace.registry) addSpaceAccessors(id, ColorSpace.registry[id]);
                    hooks.add("colorspace-init-end", (function(space) {
                        var _space$aliases;
                        addSpaceAccessors(space.id, space);
                        null === (_space$aliases = space.aliases) || void 0 === _space$aliases || _space$aliases.forEach((function(alias) {
                            addSpaceAccessors(alias, space);
                        }));
                    }));
                    function addSpaceAccessors(id, space) {
                        Object.keys(space.coords);
                        Object.values(space.coords).map((function(c4) {
                            return c4.name;
                        }));
                        var propId = id.replace(/-/g, "_");
                        Object.defineProperty(Color.prototype, propId, {
                            get: function() {
                                var _this3 = this;
                                var ret = this.getAll(id);
                                if ("undefined" === typeof Proxy) return ret;
                                return new Proxy(ret, {
                                    has: function(obj, property) {
                                        try {
                                            ColorSpace.resolveCoord([ space, property ]);
                                            return true;
                                        } catch (e) {}
                                        return Reflect.has(obj, property);
                                    },
                                    get: function(obj, property, receiver) {
                                        if (property && "symbol" !== _typeof(property) && !(property in obj)) {
                                            var _ColorSpace$resolveCo3 = ColorSpace.resolveCoord([ space, property ]), index = _ColorSpace$resolveCo3.index;
                                            if (index >= 0) return obj[index];
                                        }
                                        return Reflect.get(obj, property, receiver);
                                    },
                                    set: function(obj, property, value, receiver) {
                                        if (property && "symbol" !== _typeof(property) && !(property in obj) || property >= 0) {
                                            var _ColorSpace$resolveCo4 = ColorSpace.resolveCoord([ space, property ]), index = _ColorSpace$resolveCo4.index;
                                            if (index >= 0) {
                                                obj[index] = value;
                                                _this3.setAll(id, obj);
                                                return true;
                                            }
                                        }
                                        return Reflect.set(obj, property, value, receiver);
                                    }
                                });
                            },
                            set: function(coords) {
                                this.setAll(id, coords);
                            },
                            configurable: true,
                            enumerable: true
                        });
                    }
                    Color.extend(deltaEMethods);
                    Color.extend({
                        deltaE
                    });
                    Color.extend(variations);
                    Color.extend({
                        contrast
                    });
                    Color.extend(chromaticity);
                    Color.extend(luminance);
                    Color.extend(interpolation);
                    Color.extend(contrastMethods);
                    var import_from2 = __toModule(require_from4());
                    import_dot["default"].templateSettings.strip = false;
                    var hexRegex = /^#[0-9a-f]{3,8}$/i;
                    var hslRegex = /hsl\(\s*([-\d.]+)(rad|turn)/;
                    var Color2 = (_r = new WeakMap, _g = new WeakMap, _b = new WeakMap, _red = new WeakMap, 
                    _green = new WeakMap, _blue = new WeakMap, _Class3_brand = new WeakSet, function() {
                        function Color2(red, green, blue) {
                            var alpha = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1;
                            _classCallCheck(this, Color2);
                            _classPrivateMethodInitSpec(this, _Class3_brand);
                            _classPrivateFieldInitSpec(this, _r, void 0);
                            _classPrivateFieldInitSpec(this, _g, void 0);
                            _classPrivateFieldInitSpec(this, _b, void 0);
                            _classPrivateFieldInitSpec(this, _red, void 0);
                            _classPrivateFieldInitSpec(this, _green, void 0);
                            _classPrivateFieldInitSpec(this, _blue, void 0);
                            if (red instanceof Color2) {
                                var r = red.r, g2 = red.g, b2 = red.b;
                                this.r = r;
                                this.g = g2;
                                this.b = b2;
                                this.alpha = red.alpha;
                                return;
                            }
                            this.red = red;
                            this.green = green;
                            this.blue = blue;
                            this.alpha = alpha;
                        }
                        return _createClass(Color2, [ {
                            key: "r",
                            get: function() {
                                return _classPrivateFieldGet(_r, this);
                            },
                            set: function(value) {
                                _classPrivateFieldSet(_r, this, value);
                                _classPrivateFieldSet(_red, this, Math.round(255 * clamp(value, 0, 1)));
                            }
                        }, {
                            key: "g",
                            get: function() {
                                return _classPrivateFieldGet(_g, this);
                            },
                            set: function(value) {
                                _classPrivateFieldSet(_g, this, value);
                                _classPrivateFieldSet(_green, this, Math.round(255 * clamp(value, 0, 1)));
                            }
                        }, {
                            key: "b",
                            get: function() {
                                return _classPrivateFieldGet(_b, this);
                            },
                            set: function(value) {
                                _classPrivateFieldSet(_b, this, value);
                                _classPrivateFieldSet(_blue, this, Math.round(255 * clamp(value, 0, 1)));
                            }
                        }, {
                            key: "red",
                            get: function() {
                                return _classPrivateFieldGet(_red, this);
                            },
                            set: function(value) {
                                _classPrivateFieldSet(_r, this, value / 255);
                                _classPrivateFieldSet(_red, this, clamp(value, 0, 255));
                            }
                        }, {
                            key: "green",
                            get: function() {
                                return _classPrivateFieldGet(_green, this);
                            },
                            set: function(value) {
                                _classPrivateFieldSet(_g, this, value / 255);
                                _classPrivateFieldSet(_green, this, clamp(value, 0, 255));
                            }
                        }, {
                            key: "blue",
                            get: function() {
                                return _classPrivateFieldGet(_blue, this);
                            },
                            set: function(value) {
                                _classPrivateFieldSet(_b, this, value / 255);
                                _classPrivateFieldSet(_blue, this, clamp(value, 0, 255));
                            }
                        }, {
                            key: "toHexString",
                            value: function() {
                                var redString = Math.round(this.red).toString(16);
                                var greenString = Math.round(this.green).toString(16);
                                var blueString = Math.round(this.blue).toString(16);
                                return "#" + (this.red > 15.5 ? redString : "0" + redString) + (this.green > 15.5 ? greenString : "0" + greenString) + (this.blue > 15.5 ? blueString : "0" + blueString);
                            }
                        }, {
                            key: "toJSON",
                            value: function() {
                                var red = this.red, green = this.green, blue = this.blue, alpha = this.alpha;
                                return {
                                    red,
                                    green,
                                    blue,
                                    alpha
                                };
                            }
                        }, {
                            key: "parseString",
                            value: function(colorString) {
                                colorString = colorString.replace(hslRegex, (function(match, angle, unit) {
                                    var value = angle + unit;
                                    switch (unit) {
                                      case "rad":
                                        return match.replace(value, radToDeg(angle));

                                      case "turn":
                                        return match.replace(value, turnToDeg(angle));
                                    }
                                }));
                                try {
                                    var prototypeArrayFrom;
                                    if ("Prototype" in window && "Version" in window.Prototype) {
                                        prototypeArrayFrom = Array.from;
                                        Array.from = import_from2["default"];
                                    }
                                    var _color2 = new Color(colorString).to("srgb");
                                    if (prototypeArrayFrom) {
                                        Array.from = prototypeArrayFrom;
                                        prototypeArrayFrom = null;
                                    }
                                    this.r = _color2.r;
                                    this.g = _color2.g;
                                    this.b = _color2.b;
                                    this.alpha = +_color2.alpha;
                                } catch (_unused4) {
                                    throw new Error('Unable to parse color "'.concat(colorString, '"'));
                                }
                                return this;
                            }
                        }, {
                            key: "parseRgbString",
                            value: function(colorString) {
                                this.parseString(colorString);
                            }
                        }, {
                            key: "parseHexString",
                            value: function(colorString) {
                                if (!colorString.match(hexRegex) || [ 6, 8 ].includes(colorString.length)) return;
                                this.parseString(colorString);
                            }
                        }, {
                            key: "parseColorFnString",
                            value: function(colorString) {
                                this.parseString(colorString);
                            }
                        }, {
                            key: "getRelativeLuminance",
                            value: function() {
                                var rSRGB = this.r, gSRGB = this.g, bSRGB = this.b;
                                var r = rSRGB <= .03928 ? rSRGB / 12.92 : Math.pow((rSRGB + .055) / 1.055, 2.4);
                                var g2 = gSRGB <= .03928 ? gSRGB / 12.92 : Math.pow((gSRGB + .055) / 1.055, 2.4);
                                var b2 = bSRGB <= .03928 ? bSRGB / 12.92 : Math.pow((bSRGB + .055) / 1.055, 2.4);
                                return .2126 * r + .7152 * g2 + .0722 * b2;
                            }
                        }, {
                            key: "getLuminosity",
                            value: function() {
                                return .3 * this.r + .59 * this.g + .11 * this.b;
                            }
                        }, {
                            key: "setLuminosity",
                            value: function(L) {
                                var d2 = L - this.getLuminosity();
                                return _assertClassBrand(_Class3_brand, this, _add).call(this, d2).clip();
                            }
                        }, {
                            key: "getSaturation",
                            value: function() {
                                return Math.max(this.r, this.g, this.b) - Math.min(this.r, this.g, this.b);
                            }
                        }, {
                            key: "setSaturation",
                            value: function(s) {
                                var C = new Color2(this);
                                var colorEntires = [ {
                                    name: "r",
                                    value: C.r
                                }, {
                                    name: "g",
                                    value: C.g
                                }, {
                                    name: "b",
                                    value: C.b
                                } ];
                                var _colorEntires$sort = colorEntires.sort((function(a2, b2) {
                                    return a2.value - b2.value;
                                })), _colorEntires$sort2 = _slicedToArray(_colorEntires$sort, 3), Cmin = _colorEntires$sort2[0], Cmid = _colorEntires$sort2[1], Cmax = _colorEntires$sort2[2];
                                if (Cmax.value > Cmin.value) {
                                    Cmid.value = (Cmid.value - Cmin.value) * s / (Cmax.value - Cmin.value);
                                    Cmax.value = s;
                                } else Cmid.value = Cmax.value = 0;
                                Cmin.value = 0;
                                C[Cmax.name] = Cmax.value;
                                C[Cmin.name] = Cmin.value;
                                C[Cmid.name] = Cmid.value;
                                return C;
                            }
                        }, {
                            key: "clip",
                            value: function() {
                                var C = new Color2(this);
                                var L = C.getLuminosity();
                                var n2 = Math.min(C.r, C.g, C.b);
                                var x = Math.max(C.r, C.g, C.b);
                                if (n2 < 0) {
                                    C.r = L + (C.r - L) * L / (L - n2);
                                    C.g = L + (C.g - L) * L / (L - n2);
                                    C.b = L + (C.b - L) * L / (L - n2);
                                }
                                if (x > 1) {
                                    C.r = L + (C.r - L) * (1 - L) / (x - L);
                                    C.g = L + (C.g - L) * (1 - L) / (x - L);
                                    C.b = L + (C.b - L) * (1 - L) / (x - L);
                                }
                                return C;
                            }
                        } ]);
                    }());
                    function _add(value) {
                        var C = new Color2(this);
                        C.r += value;
                        C.g += value;
                        C.b += value;
                        return C;
                    }
                    var color_default = Color2;
                    function clamp(value, min, max2) {
                        return Math.min(Math.max(min, value), max2);
                    }
                    function radToDeg(rad) {
                        return 180 * rad / Math.PI;
                    }
                    function turnToDeg(turn) {
                        return 360 * turn;
                    }
                    function getOwnBackgroundColor(elmStyle) {
                        var bgColor = new color_default;
                        bgColor.parseString(elmStyle.getPropertyValue("background-color"));
                        if (0 !== bgColor.alpha) {
                            var opacity = elmStyle.getPropertyValue("opacity");
                            bgColor.alpha = bgColor.alpha * opacity;
                        }
                        return bgColor;
                    }
                    var get_own_background_color_default = getOwnBackgroundColor;
                    function isOpaque(node) {
                        var style = window.getComputedStyle(node);
                        return element_has_image_default(node, style) || 1 === get_own_background_color_default(style).alpha;
                    }
                    var is_opaque_default = isOpaque;
                    function _isSkipLink(element) {
                        if (!element.href) return false;
                        var firstPageLink = cache_default.get("firstPageLink", generateFirstPageLink);
                        if (!firstPageLink) return true;
                        return element.compareDocumentPosition(firstPageLink.actualNode) === element.DOCUMENT_POSITION_FOLLOWING;
                    }
                    function generateFirstPageLink() {
                        var firstPageLink;
                        if (!window.location.origin) firstPageLink = query_selector_all_default(axe._tree, 'a:not([href^="#"]):not([href^="/#"]):not([href^="javascript:"])')[0]; else firstPageLink = query_selector_all_default(axe._tree, 'a[href]:not([href^="javascript:"])').find((function(link) {
                            return !_isCurrentPageLink(link.actualNode);
                        }));
                        return firstPageLink || null;
                    }
                    var clipRegex2 = /rect\s*\(([0-9]+)px,?\s*([0-9]+)px,?\s*([0-9]+)px,?\s*([0-9]+)px\s*\)/;
                    var clipPathRegex2 = /(\w+)\((\d+)/;
                    function isClipped(style) {
                        var matchesClip = style.getPropertyValue("clip").match(clipRegex2);
                        var matchesClipPath = style.getPropertyValue("clip-path").match(clipPathRegex2);
                        if (matchesClip && 5 === matchesClip.length) {
                            var position = style.getPropertyValue("position");
                            if ([ "fixed", "absolute" ].includes(position)) return matchesClip[3] - matchesClip[1] <= 0 && matchesClip[2] - matchesClip[4] <= 0;
                        }
                        if (matchesClipPath) {
                            var type2 = matchesClipPath[1];
                            var value = parseInt(matchesClipPath[2], 10);
                            switch (type2) {
                              case "inset":
                                return value >= 50;

                              case "circle":
                                return 0 === value;

                              default:
                            }
                        }
                        return false;
                    }
                    function isAreaVisible(el, screenReader, recursed) {
                        var mapEl = find_up_default(el, "map");
                        if (!mapEl) return false;
                        var mapElName = mapEl.getAttribute("name");
                        if (!mapElName) return false;
                        var mapElRootNode = get_root_node_default2(el);
                        if (!mapElRootNode || 9 !== mapElRootNode.nodeType) return false;
                        var refs = query_selector_all_default(axe._tree, 'img[usemap="#'.concat(escape_selector_default(mapElName), '"]'));
                        if (!refs || !refs.length) return false;
                        return refs.some((function(_ref64) {
                            var actualNode = _ref64.actualNode;
                            return isVisible(actualNode, screenReader, recursed);
                        }));
                    }
                    function isVisible(el, screenReader, recursed) {
                        var _window$Node2;
                        if (!el) throw new TypeError("Cannot determine if element is visible for non-DOM nodes");
                        var vNode = el instanceof abstract_virtual_node_default ? el : get_node_from_tree_default(el);
                        el = vNode ? vNode.actualNode : el;
                        var cacheName = "_isVisible" + (screenReader ? "ScreenReader" : "");
                        var _ref65 = null !== (_window$Node2 = window.Node) && void 0 !== _window$Node2 ? _window$Node2 : {}, DOCUMENT_NODE = _ref65.DOCUMENT_NODE, DOCUMENT_FRAGMENT_NODE = _ref65.DOCUMENT_FRAGMENT_NODE;
                        var nodeType = vNode ? vNode.props.nodeType : el.nodeType;
                        var nodeName2 = vNode ? vNode.props.nodeName : el.nodeName.toLowerCase();
                        if (vNode && "undefined" !== typeof vNode[cacheName]) return vNode[cacheName];
                        if (nodeType === DOCUMENT_NODE) return true;
                        if ([ "style", "script", "noscript", "template" ].includes(nodeName2)) return false;
                        if (el && nodeType === DOCUMENT_FRAGMENT_NODE) el = el.host;
                        if (screenReader) {
                            var ariaHiddenValue = vNode ? vNode.attr("aria-hidden") : el.getAttribute("aria-hidden");
                            if ("true" === ariaHiddenValue) return false;
                        }
                        if (!el) {
                            var parent2 = vNode.parent;
                            var visible3 = true;
                            if (parent2) visible3 = isVisible(parent2, screenReader, true);
                            if (vNode) vNode[cacheName] = visible3;
                            return visible3;
                        }
                        var style = window.getComputedStyle(el, null);
                        if (null === style) return false;
                        if ("area" === nodeName2) return isAreaVisible(el, screenReader, recursed);
                        if ("none" === style.getPropertyValue("display")) return false;
                        var elHeight = parseInt(style.getPropertyValue("height"));
                        var elWidth = parseInt(style.getPropertyValue("width"));
                        var scroll = get_scroll_default(el);
                        var scrollableWithZeroHeight = scroll && 0 === elHeight;
                        var scrollableWithZeroWidth = scroll && 0 === elWidth;
                        var posAbsoluteOverflowHiddenAndSmall = "absolute" === style.getPropertyValue("position") && (elHeight < 2 || elWidth < 2) && "hidden" === style.getPropertyValue("overflow");
                        if (!screenReader && (isClipped(style) || "0" === style.getPropertyValue("opacity") || scrollableWithZeroHeight || scrollableWithZeroWidth || posAbsoluteOverflowHiddenAndSmall)) return false;
                        if (!recursed && ("hidden" === style.getPropertyValue("visibility") || !screenReader && is_offscreen_default(el))) return false;
                        var parent = el.assignedSlot ? el.assignedSlot : el.parentNode;
                        var visible2 = false;
                        if (parent) visible2 = isVisible(parent, screenReader, true);
                        if (vNode) vNode[cacheName] = visible2;
                        return visible2;
                    }
                    var is_visible_default = isVisible;
                    function reduceToElementsBelowFloating(elements, targetNode) {
                        var floatingPositions = [ "fixed", "sticky" ];
                        var finalElements = [];
                        var targetFound = false;
                        for (var index = 0; index < elements.length; ++index) {
                            var currentNode = elements[index];
                            if (currentNode === targetNode) targetFound = true;
                            var style = window.getComputedStyle(currentNode);
                            if (!targetFound && -1 !== floatingPositions.indexOf(style.position)) {
                                finalElements = [];
                                continue;
                            }
                            finalElements.push(currentNode);
                        }
                        return finalElements;
                    }
                    var reduce_to_elements_below_floating_default = reduceToElementsBelowFloating;
                    function _visuallyContains(node, parent) {
                        var parentScrollAncestor = getScrollAncestor(parent);
                        do {
                            var nextScrollAncestor = getScrollAncestor(node);
                            if (nextScrollAncestor === parentScrollAncestor || nextScrollAncestor === parent) return contains2(node, parent);
                            node = nextScrollAncestor;
                        } while (node);
                        return false;
                    }
                    function getScrollAncestor(node) {
                        var vNode = get_node_from_tree_default(node);
                        var ancestor = vNode.parent;
                        while (ancestor) {
                            if (get_scroll_default(ancestor.actualNode)) return ancestor.actualNode;
                            ancestor = ancestor.parent;
                        }
                    }
                    function contains2(node, parent) {
                        var style = window.getComputedStyle(parent);
                        var overflow = style.getPropertyValue("overflow");
                        if ("inline" === style.getPropertyValue("display")) return true;
                        var clientRects = Array.from(node.getClientRects());
                        var boundingRect = parent.getBoundingClientRect();
                        var rect = {
                            left: boundingRect.left,
                            top: boundingRect.top,
                            width: boundingRect.width,
                            height: boundingRect.height
                        };
                        if ([ "scroll", "auto" ].includes(overflow) || parent instanceof window.HTMLHtmlElement) {
                            rect.width = parent.scrollWidth;
                            rect.height = parent.scrollHeight;
                        }
                        if (1 === clientRects.length && "hidden" === overflow && "nowrap" === style.getPropertyValue("white-space")) clientRects[0] = rect;
                        return clientRects.some((function(clientRect) {
                            return !(Math.ceil(clientRect.left) < Math.floor(rect.left) || Math.ceil(clientRect.top) < Math.floor(rect.top) || Math.floor(clientRect.left + clientRect.width) > Math.ceil(rect.left + rect.width) || Math.floor(clientRect.top + clientRect.height) > Math.ceil(rect.top + rect.height));
                        }));
                    }
                    function shadowElementsFromPoint(nodeX, nodeY) {
                        var root = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : document;
                        var i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0;
                        if (i > 999) throw new Error("Infinite loop detected");
                        return Array.from(root.elementsFromPoint(nodeX, nodeY) || []).filter((function(nodes) {
                            return get_root_node_default2(nodes) === root;
                        })).reduce((function(stack, elm) {
                            if (is_shadow_root_default(elm)) {
                                var shadowStack = shadowElementsFromPoint(nodeX, nodeY, elm.shadowRoot, i + 1);
                                stack = stack.concat(shadowStack);
                                if (stack.length && _visuallyContains(stack[0], elm)) stack.push(elm);
                            } else stack.push(elm);
                            return stack;
                        }), []);
                    }
                    var shadow_elements_from_point_default = shadowElementsFromPoint;
                    function urlPropsFromAttribute(node, attribute) {
                        if (!node.hasAttribute(attribute)) return;
                        var nodeName2 = node.nodeName.toUpperCase();
                        var parser2 = node;
                        if (![ "A", "AREA" ].includes(nodeName2) || node.ownerSVGElement) {
                            parser2 = document.createElement("a");
                            parser2.href = node.getAttribute(attribute);
                        }
                        var protocol = [ "https:", "ftps:" ].includes(parser2.protocol) ? parser2.protocol.replace(/s:$/, ":") : parser2.protocol;
                        var parserPathname = /^\//.test(parser2.pathname) ? parser2.pathname : "/".concat(parser2.pathname);
                        var _getPathnameOrFilenam = getPathnameOrFilename(parserPathname), pathname = _getPathnameOrFilenam.pathname, filename = _getPathnameOrFilenam.filename;
                        return {
                            protocol,
                            hostname: parser2.hostname,
                            port: getPort(parser2.port),
                            pathname: /\/$/.test(pathname) ? pathname : "".concat(pathname, "/"),
                            search: getSearchPairs(parser2.search),
                            hash: getHashRoute(parser2.hash),
                            filename
                        };
                    }
                    function getPort(port) {
                        var excludePorts = [ "443", "80" ];
                        return !excludePorts.includes(port) ? port : "";
                    }
                    function getPathnameOrFilename(pathname) {
                        var filename = pathname.split("/").pop();
                        if (!filename || -1 === filename.indexOf(".")) return {
                            pathname,
                            filename: ""
                        };
                        return {
                            pathname: pathname.replace(filename, ""),
                            filename: /index./.test(filename) ? "" : filename
                        };
                    }
                    function getSearchPairs(searchStr) {
                        var query = {};
                        if (!searchStr || !searchStr.length) return query;
                        var pairs = searchStr.substring(1).split("&");
                        if (!pairs || !pairs.length) return query;
                        for (var index = 0; index < pairs.length; index++) {
                            var pair = pairs[index];
                            var _pair$split = pair.split("="), _pair$split2 = _slicedToArray(_pair$split, 2), _key7 = _pair$split2[0], _pair$split2$ = _pair$split2[1], value = void 0 === _pair$split2$ ? "" : _pair$split2$;
                            query[decodeURIComponent(_key7)] = decodeURIComponent(value);
                        }
                        return query;
                    }
                    function getHashRoute(hash) {
                        if (!hash) return "";
                        var hashRegex = /#!?\/?/g;
                        var hasMatch = hash.match(hashRegex);
                        if (!hasMatch) return "";
                        var _hasMatch = _slicedToArray(hasMatch, 1), matchedStr = _hasMatch[0];
                        if ("#" === matchedStr) return "";
                        return hash;
                    }
                    var url_props_from_attribute_default = urlPropsFromAttribute;
                    function visuallyOverlaps(rect, parent) {
                        var parentRect = parent.getBoundingClientRect();
                        var parentTop = parentRect.top;
                        var parentLeft = parentRect.left;
                        var parentScrollArea = {
                            top: parentTop - parent.scrollTop,
                            bottom: parentTop - parent.scrollTop + parent.scrollHeight,
                            left: parentLeft - parent.scrollLeft,
                            right: parentLeft - parent.scrollLeft + parent.scrollWidth
                        };
                        if (rect.left > parentScrollArea.right && rect.left > parentRect.right || rect.top > parentScrollArea.bottom && rect.top > parentRect.bottom || rect.right < parentScrollArea.left && rect.right < parentRect.left || rect.bottom < parentScrollArea.top && rect.bottom < parentRect.top) return false;
                        var style = window.getComputedStyle(parent);
                        if (rect.left > parentRect.right || rect.top > parentRect.bottom) return "scroll" === style.overflow || "auto" === style.overflow || parent instanceof window.HTMLBodyElement || parent instanceof window.HTMLHtmlElement;
                        return true;
                    }
                    var visually_overlaps_default = visuallyOverlaps;
                    var nodeIndex2 = 0;
                    var VirtualNode = function(_abstract_virtual_nod) {
                        function VirtualNode(node, parent, shadowId) {
                            var _this4;
                            _classCallCheck(this, VirtualNode);
                            _this4 = _callSuper(this, VirtualNode);
                            _this4.shadowId = shadowId;
                            _this4.children = [];
                            _this4.actualNode = node;
                            _this4.parent = parent;
                            if (!parent) nodeIndex2 = 0;
                            _this4.nodeIndex = nodeIndex2++;
                            _this4._isHidden = null;
                            _this4._cache = {};
                            _this4._isXHTML = is_xhtml_default(node.ownerDocument);
                            if ("input" === node.nodeName.toLowerCase()) {
                                var type2 = node.getAttribute("type");
                                type2 = _this4._isXHTML ? type2 : (type2 || "").toLowerCase();
                                if (!valid_input_type_default().includes(type2)) type2 = "text";
                                _this4._type = type2;
                            }
                            if (cache_default.get("nodeMap")) cache_default.get("nodeMap").set(node, _this4);
                            return _this4;
                        }
                        _inherits(VirtualNode, _abstract_virtual_nod);
                        return _createClass(VirtualNode, [ {
                            key: "props",
                            get: function() {
                                if (!this._cache.hasOwnProperty("props")) {
                                    var _this$actualNode = this.actualNode, nodeType = _this$actualNode.nodeType, nodeName2 = _this$actualNode.nodeName, _id = _this$actualNode.id, nodeValue = _this$actualNode.nodeValue;
                                    this._cache.props = {
                                        nodeType,
                                        nodeName: this._isXHTML ? nodeName2 : nodeName2.toLowerCase(),
                                        id: _id,
                                        type: this._type,
                                        nodeValue
                                    };
                                    if (1 === nodeType) {
                                        this._cache.props.multiple = this.actualNode.multiple;
                                        this._cache.props.value = this.actualNode.value;
                                        this._cache.props.selected = this.actualNode.selected;
                                        this._cache.props.checked = this.actualNode.checked;
                                        this._cache.props.indeterminate = this.actualNode.indeterminate;
                                    }
                                }
                                return this._cache.props;
                            }
                        }, {
                            key: "attr",
                            value: function(attrName) {
                                if ("function" !== typeof this.actualNode.getAttribute) return null;
                                return this.actualNode.getAttribute(attrName);
                            }
                        }, {
                            key: "hasAttr",
                            value: function(attrName) {
                                if ("function" !== typeof this.actualNode.hasAttribute) return false;
                                return this.actualNode.hasAttribute(attrName);
                            }
                        }, {
                            key: "attrNames",
                            get: function() {
                                if (!this._cache.hasOwnProperty("attrNames")) {
                                    var attrs;
                                    if (this.actualNode.attributes instanceof window.NamedNodeMap) attrs = this.actualNode.attributes; else attrs = this.actualNode.cloneNode(false).attributes;
                                    this._cache.attrNames = Array.from(attrs).map((function(attr) {
                                        return attr.name;
                                    }));
                                }
                                return this._cache.attrNames;
                            }
                        }, {
                            key: "getComputedStylePropertyValue",
                            value: function(property) {
                                var key = "computedStyle_" + property;
                                if (!this._cache.hasOwnProperty(key)) {
                                    if (!this._cache.hasOwnProperty("computedStyle")) this._cache.computedStyle = window.getComputedStyle(this.actualNode);
                                    this._cache[key] = this._cache.computedStyle.getPropertyValue(property);
                                }
                                return this._cache[key];
                            }
                        }, {
                            key: "isFocusable",
                            get: function() {
                                if (!this._cache.hasOwnProperty("isFocusable")) this._cache.isFocusable = _isFocusable(this.actualNode);
                                return this._cache.isFocusable;
                            }
                        }, {
                            key: "tabbableElements",
                            get: function() {
                                if (!this._cache.hasOwnProperty("tabbableElements")) this._cache.tabbableElements = get_tabbable_elements_default(this);
                                return this._cache.tabbableElements;
                            }
                        }, {
                            key: "clientRects",
                            get: function() {
                                if (!this._cache.hasOwnProperty("clientRects")) this._cache.clientRects = Array.from(this.actualNode.getClientRects()).filter((function(rect) {
                                    return rect.width > 0;
                                }));
                                return this._cache.clientRects;
                            }
                        }, {
                            key: "boundingClientRect",
                            get: function() {
                                if (!this._cache.hasOwnProperty("boundingClientRect")) this._cache.boundingClientRect = this.actualNode.getBoundingClientRect();
                                return this._cache.boundingClientRect;
                            }
                        } ]);
                    }(abstract_virtual_node_default);
                    var virtual_node_default = VirtualNode;
                    function tokenList(str) {
                        return (str || "").trim().replace(/\s{2,}/g, " ").split(" ");
                    }
                    var token_list_default = tokenList;
                    var idsKey = " [idsMap]";
                    function getNodesMatchingExpression(domTree, expressions, filter) {
                        var selectorMap = domTree[0]._selectorMap;
                        if (!selectorMap) return;
                        var shadowId = domTree[0].shadowId;
                        for (var _i23 = 0; _i23 < expressions.length; _i23++) if (expressions[_i23].length > 1 && expressions[_i23].some((function(expression) {
                            return isGlobalSelector(expression);
                        }))) return;
                        var nodeSet = new Set;
                        expressions.forEach((function(expression) {
                            var _matchingNodes$nodes;
                            var matchingNodes = findMatchingNodes(expression, selectorMap, shadowId);
                            null === matchingNodes || void 0 === matchingNodes || null === (_matchingNodes$nodes = matchingNodes.nodes) || void 0 === _matchingNodes$nodes || _matchingNodes$nodes.forEach((function(node) {
                                if (matchingNodes.isComplexSelector && !_matchesExpression(node, expression)) return;
                                nodeSet.add(node);
                            }));
                        }));
                        var matchedNodes = [];
                        nodeSet.forEach((function(node) {
                            return matchedNodes.push(node);
                        }));
                        if (filter) matchedNodes = matchedNodes.filter(filter);
                        return matchedNodes.sort((function(a2, b2) {
                            return a2.nodeIndex - b2.nodeIndex;
                        }));
                    }
                    function findMatchingNodes(expression, selectorMap, shadowId) {
                        var exp = expression[expression.length - 1];
                        var nodes = null;
                        var isComplexSelector = expression.length > 1 || !!exp.pseudos || !!exp.classes;
                        if (isGlobalSelector(exp)) nodes = selectorMap["*"]; else {
                            if (exp.id) {
                                var _selectorMap$idsKey$e;
                                if (!selectorMap[idsKey] || !Object.hasOwn(selectorMap[idsKey], exp.id) || !(null !== (_selectorMap$idsKey$e = selectorMap[idsKey][exp.id]) && void 0 !== _selectorMap$idsKey$e && _selectorMap$idsKey$e.length)) return;
                                nodes = selectorMap[idsKey][exp.id].filter((function(node) {
                                    return node.shadowId === shadowId;
                                }));
                            }
                            if (exp.tag && "*" !== exp.tag) {
                                var _selectorMap$exp$tag;
                                if (!(null !== (_selectorMap$exp$tag = selectorMap[exp.tag]) && void 0 !== _selectorMap$exp$tag && _selectorMap$exp$tag.length)) return;
                                var cachedNodes = selectorMap[exp.tag];
                                nodes = nodes ? getSharedValues(cachedNodes, nodes) : cachedNodes;
                            }
                            if (exp.classes) {
                                var _selectorMap$Class;
                                if (!(null !== (_selectorMap$Class = selectorMap["[class]"]) && void 0 !== _selectorMap$Class && _selectorMap$Class.length)) return;
                                var _cachedNodes = selectorMap["[class]"];
                                nodes = nodes ? getSharedValues(_cachedNodes, nodes) : _cachedNodes;
                            }
                            if (exp.attributes) for (var _i24 = 0; _i24 < exp.attributes.length; _i24++) {
                                var _selectorMap;
                                var attr = exp.attributes[_i24];
                                if ("attrValue" === attr.type) isComplexSelector = true;
                                if (!(null !== (_selectorMap = selectorMap["[".concat(attr.key, "]")]) && void 0 !== _selectorMap && _selectorMap.length)) return;
                                var _cachedNodes2 = selectorMap["[".concat(attr.key, "]")];
                                nodes = nodes ? getSharedValues(_cachedNodes2, nodes) : _cachedNodes2;
                            }
                        }
                        return {
                            nodes,
                            isComplexSelector
                        };
                    }
                    function isGlobalSelector(expression) {
                        return "*" === expression.tag && !expression.attributes && !expression.id && !expression.classes;
                    }
                    function getSharedValues(a2, b2) {
                        return a2.filter((function(node) {
                            return b2.includes(node);
                        }));
                    }
                    function cacheSelector(key, vNode, map) {
                        if (!Object.hasOwn(map, key)) map[key] = [];
                        map[key].push(vNode);
                    }
                    function cacheNodeSelectors(vNode, selectorMap) {
                        if (1 !== vNode.props.nodeType) return;
                        cacheSelector(vNode.props.nodeName, vNode, selectorMap);
                        cacheSelector("*", vNode, selectorMap);
                        vNode.attrNames.forEach((function(attrName) {
                            if ("id" === attrName) {
                                selectorMap[idsKey] = selectorMap[idsKey] || {};
                                token_list_default(vNode.attr(attrName)).forEach((function(value) {
                                    cacheSelector(value, vNode, selectorMap[idsKey]);
                                }));
                            }
                            cacheSelector("[".concat(attrName, "]"), vNode, selectorMap);
                        }));
                    }
                    var hasShadowRoot;
                    function _getFlattenedTree() {
                        var node = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : document.documentElement;
                        var shadowId = arguments.length > 1 ? arguments[1] : void 0;
                        hasShadowRoot = false;
                        var selectorMap = {};
                        cache_default.set("nodeMap", new WeakMap);
                        cache_default.set("selectorMap", selectorMap);
                        var tree = flattenTree(node, shadowId, null);
                        tree[0]._selectorMap = selectorMap;
                        tree[0]._hasShadowRoot = hasShadowRoot;
                        return tree;
                    }
                    function getSlotChildren(node) {
                        var retVal = [];
                        node = node.firstChild;
                        while (node) {
                            retVal.push(node);
                            node = node.nextSibling;
                        }
                        return retVal;
                    }
                    function createNode(node, parent, shadowId) {
                        var vNode = new virtual_node_default(node, parent, shadowId);
                        cacheNodeSelectors(vNode, cache_default.get("selectorMap"));
                        return vNode;
                    }
                    function flattenTree(node, shadowId, parent) {
                        var retVal, realArray;
                        function reduceShadowDOM(res, child, parentVNode) {
                            var replacements = flattenTree(child, shadowId, parentVNode);
                            if (replacements) res = res.concat(replacements);
                            return res;
                        }
                        if (node.documentElement) node = node.documentElement;
                        var nodeName2 = node.nodeName.toLowerCase();
                        if (is_shadow_root_default(node)) {
                            hasShadowRoot = true;
                            retVal = createNode(node, parent, shadowId);
                            shadowId = "a" + Math.random().toString().substring(2);
                            realArray = Array.from(node.shadowRoot.childNodes);
                            retVal.children = realArray.reduce((function(res, child) {
                                return reduceShadowDOM(res, child, retVal);
                            }), []);
                            return [ retVal ];
                        } else if ("content" === nodeName2 && "function" === typeof node.getDistributedNodes) {
                            realArray = Array.from(node.getDistributedNodes());
                            return realArray.reduce((function(res, child) {
                                return reduceShadowDOM(res, child, parent);
                            }), []);
                        } else if ("slot" === nodeName2 && "function" === typeof node.assignedNodes) {
                            realArray = Array.from(node.assignedNodes());
                            if (!realArray.length) realArray = getSlotChildren(node);
                            window.getComputedStyle(node);
                            if (false) ; else return realArray.reduce((function(res, child) {
                                return reduceShadowDOM(res, child, parent);
                            }), []);
                        } else {
                            if (1 === node.nodeType) {
                                retVal = createNode(node, parent, shadowId);
                                realArray = Array.from(node.childNodes);
                                retVal.children = realArray.reduce((function(res, child) {
                                    return reduceShadowDOM(res, child, retVal);
                                }), []);
                                return [ retVal ];
                            } else if (3 === node.nodeType) return [ createNode(node, parent) ];
                            return;
                        }
                    }
                    function getBaseLang(lang) {
                        if (!lang) return "";
                        return lang.trim().split("-")[0].toLowerCase();
                    }
                    var get_base_lang_default = getBaseLang;
                    function failureSummary(nodeData) {
                        var failingChecks = {};
                        failingChecks.none = nodeData.none.concat(nodeData.all);
                        failingChecks.any = nodeData.any;
                        return Object.keys(failingChecks).map((function(key) {
                            if (!failingChecks[key].length) return;
                            var sum = axe._audit.data.failureSummaries[key];
                            if (sum && "function" === typeof sum.failureMessage) return sum.failureMessage(failingChecks[key].map((function(check) {
                                return check.message || "";
                            })));
                        })).filter((function(i) {
                            return void 0 !== i;
                        })).join("\n\n");
                    }
                    var failure_summary_default = failureSummary;
                    function incompleteFallbackMessage() {
                        var message = axe._audit.data.incompleteFallbackMessage;
                        if ("function" === typeof message) message = message();
                        if ("string" !== typeof message) return "";
                        return message;
                    }
                    var resultKeys = constants_default.resultGroups;
                    function processAggregate(results, options) {
                        var resultObject = axe.utils.aggregateResult(results);
                        resultKeys.forEach((function(key) {
                            if (options.resultTypes && !options.resultTypes.includes(key)) (resultObject[key] || []).forEach((function(ruleResult) {
                                if (Array.isArray(ruleResult.nodes) && ruleResult.nodes.length > 0) ruleResult.nodes = [ ruleResult.nodes[0] ];
                            }));
                            resultObject[key] = (resultObject[key] || []).map((function(ruleResult) {
                                ruleResult = Object.assign({}, ruleResult);
                                if (Array.isArray(ruleResult.nodes) && ruleResult.nodes.length > 0) ruleResult.nodes = ruleResult.nodes.map((function(subResult) {
                                    if ("object" === _typeof(subResult.node)) {
                                        var serialElm = trimElementSpec(subResult.node, options);
                                        Object.assign(subResult, serialElm);
                                    }
                                    delete subResult.result;
                                    delete subResult.node;
                                    normalizeRelatedNodes(subResult, options);
                                    return subResult;
                                }));
                                resultKeys.forEach((function(resultKey) {
                                    return delete ruleResult[resultKey];
                                }));
                                delete ruleResult.pageLevel;
                                delete ruleResult.result;
                                return ruleResult;
                            }));
                        }));
                        return resultObject;
                    }
                    function normalizeRelatedNodes(node, options) {
                        [ "any", "all", "none" ].forEach((function(type2) {
                            if (!Array.isArray(node[type2])) return;
                            node[type2].filter((function(checkRes) {
                                return Array.isArray(checkRes.relatedNodes);
                            })).forEach((function(checkRes) {
                                checkRes.relatedNodes = checkRes.relatedNodes.map((function(relatedNode) {
                                    return trimElementSpec(relatedNode, options);
                                }));
                            }));
                        }));
                    }
                    function trimElementSpec() {
                        var elmSpec = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                        var runOptions = arguments.length > 1 ? arguments[1] : void 0;
                        elmSpec = node_serializer_default.dqElmToSpec(elmSpec, runOptions);
                        var serialElm = {};
                        if (axe._audit.noHtml) serialElm.html = null; else {
                            var _elmSpec$source;
                            serialElm.html = null !== (_elmSpec$source = elmSpec.source) && void 0 !== _elmSpec$source ? _elmSpec$source : "Undefined";
                        }
                        if (runOptions.elementRef && !elmSpec.fromFrame) {
                            var _elmSpec$element;
                            serialElm.element = null !== (_elmSpec$element = elmSpec.element) && void 0 !== _elmSpec$element ? _elmSpec$element : null;
                        }
                        if (false !== runOptions.selectors || elmSpec.fromFrame) {
                            var _elmSpec$selector;
                            serialElm.target = null !== (_elmSpec$selector = elmSpec.selector) && void 0 !== _elmSpec$selector ? _elmSpec$selector : [ ":root" ];
                        }
                        if (runOptions.ancestry) {
                            var _elmSpec$ancestry;
                            serialElm.ancestry = null !== (_elmSpec$ancestry = elmSpec.ancestry) && void 0 !== _elmSpec$ancestry ? _elmSpec$ancestry : [ ":root" ];
                        }
                        if (runOptions.xpath) {
                            var _elmSpec$xpath;
                            serialElm.xpath = null !== (_elmSpec$xpath = elmSpec.xpath) && void 0 !== _elmSpec$xpath ? _elmSpec$xpath : [ "/" ];
                        }
                        return serialElm;
                    }
                    var dataRegex = /\$\{\s?data\s?\}/g;
                    function substitute(str, data) {
                        if ("string" === typeof data) return str.replace(dataRegex, data);
                        for (var prop in data) if (data.hasOwnProperty(prop)) {
                            var regex = new RegExp("\\${\\s?data\\." + prop + "\\s?}", "g");
                            var replace = "undefined" === typeof data[prop] ? "" : String(data[prop]);
                            str = str.replace(regex, replace);
                        }
                        return str;
                    }
                    function processMessage(message, data) {
                        if (!message) return;
                        if (Array.isArray(data)) {
                            data.values = data.join(", ");
                            if ("string" === typeof message.singular && "string" === typeof message.plural) {
                                var str2 = 1 === data.length ? message.singular : message.plural;
                                return substitute(str2, data);
                            }
                            return substitute(message, data);
                        }
                        if ("string" === typeof message) return substitute(message, data);
                        if ("string" === typeof data) {
                            var _str = message[data];
                            return substitute(_str, data);
                        }
                        var str = message["default"] || incompleteFallbackMessage();
                        if (data && data.messageKey && message[data.messageKey]) str = message[data.messageKey];
                        return processMessage(str, data);
                    }
                    var process_message_default = processMessage;
                    function getCheckMessage(checkId, type2, data) {
                        var check = axe._audit.data.checks[checkId];
                        if (!check) throw new Error("Cannot get message for unknown check: ".concat(checkId, "."));
                        if (!check.messages[type2]) throw new Error('Check "'.concat(checkId, '"" does not have a "').concat(type2, '" message.'));
                        return process_message_default(check.messages[type2], data);
                    }
                    var get_check_message_default = getCheckMessage;
                    function getCheckOption(check, ruleID, options) {
                        var ruleCheckOption = ((options.rules && options.rules[ruleID] || {}).checks || {})[check.id];
                        var checkOption = (options.checks || {})[check.id];
                        var enabled = check.enabled;
                        var opts = check.options;
                        if (checkOption) {
                            if (checkOption.hasOwnProperty("enabled")) enabled = checkOption.enabled;
                            if (checkOption.hasOwnProperty("options")) opts = checkOption.options;
                        }
                        if (ruleCheckOption) {
                            if (ruleCheckOption.hasOwnProperty("enabled")) enabled = ruleCheckOption.enabled;
                            if (ruleCheckOption.hasOwnProperty("options")) opts = ruleCheckOption.options;
                        }
                        return {
                            enabled,
                            options: opts,
                            absolutePaths: options.absolutePaths
                        };
                    }
                    var get_check_option_default = getCheckOption;
                    function _getEnvironmentData() {
                        var _win$location;
                        var metadata = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                        var win = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : window;
                        if (metadata && "object" === _typeof(metadata)) return metadata; else if ("object" !== _typeof(win)) return {};
                        return {
                            testEngine: {
                                name: "axe-core",
                                version: axe.version
                            },
                            testRunner: {
                                name: axe._audit.brand
                            },
                            testEnvironment: getTestEnvironment(win),
                            timestamp: (new Date).toISOString(),
                            url: null === (_win$location = win.location) || void 0 === _win$location ? void 0 : _win$location.href
                        };
                    }
                    function getTestEnvironment(win) {
                        if (!win.navigator || "object" !== _typeof(win.navigator)) return {};
                        var navigator2 = win.navigator, innerHeight = win.innerHeight, innerWidth = win.innerWidth;
                        var _ref66 = getOrientation(win) || {}, angle = _ref66.angle, type2 = _ref66.type;
                        return {
                            userAgent: navigator2.userAgent,
                            windowWidth: innerWidth,
                            windowHeight: innerHeight,
                            orientationAngle: angle,
                            orientationType: type2
                        };
                    }
                    function getOrientation(_ref67) {
                        var screen = _ref67.screen;
                        return screen.orientation || screen.msOrientation || screen.mozOrientation;
                    }
                    function createFrameContext(frame, _ref68) {
                        var focusable = _ref68.focusable, page = _ref68.page;
                        return {
                            node: frame,
                            include: [],
                            exclude: [],
                            initiator: false,
                            focusable: focusable && frameFocusable(frame),
                            size: getBoundingSize(frame),
                            page
                        };
                    }
                    function frameFocusable(frame) {
                        var tabIndex = frame.getAttribute("tabindex");
                        if (!tabIndex) return true;
                        var _int = parseInt(tabIndex, 10);
                        return isNaN(_int) || _int >= 0;
                    }
                    function getBoundingSize(domNode) {
                        var width = parseInt(domNode.getAttribute("width"), 10);
                        var height = parseInt(domNode.getAttribute("height"), 10);
                        if (isNaN(width) || isNaN(height)) {
                            var rect = domNode.getBoundingClientRect();
                            width = isNaN(width) ? rect.width : width;
                            height = isNaN(height) ? rect.height : height;
                        }
                        return {
                            width,
                            height
                        };
                    }
                    function normalizeContext(contextSpec) {
                        if (_isContextObject(contextSpec)) {
                            var msg = " must be used inside include or exclude. It should not be on the same object.";
                            assert2(!_objectHasOwn(contextSpec, "fromFrames"), "fromFrames" + msg);
                            assert2(!_objectHasOwn(contextSpec, "fromShadowDom"), "fromShadowDom" + msg);
                        } else if (_isContextProp(contextSpec)) contextSpec = {
                            include: contextSpec,
                            exclude: []
                        }; else return {
                            include: [ document ],
                            exclude: []
                        };
                        var include = normalizeContextList(contextSpec.include);
                        if (0 === include.length) include.push(document);
                        var exclude = normalizeContextList(contextSpec.exclude);
                        return {
                            include,
                            exclude
                        };
                    }
                    function normalizeContextList() {
                        var selectorList = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
                        var normalizedList = [];
                        if (!_isArrayLike(selectorList)) selectorList = [ selectorList ];
                        for (var _i25 = 0; _i25 < selectorList.length; _i25++) {
                            var normalizedSelector = normalizeContextSelector(selectorList[_i25]);
                            if (normalizedSelector) normalizedList.push(normalizedSelector);
                        }
                        return normalizedList;
                    }
                    function normalizeContextSelector(selector) {
                        if (selector instanceof window.Node) return selector;
                        if ("string" === typeof selector) return [ selector ];
                        if (_isLabelledFramesSelector(selector)) {
                            assertLabelledFrameSelector(selector);
                            selector = selector.fromFrames;
                        } else if (_isLabelledShadowDomSelector(selector)) selector = [ selector ];
                        return normalizeFrameSelectors(selector);
                    }
                    function normalizeFrameSelectors(frameSelectors) {
                        if (!Array.isArray(frameSelectors)) return;
                        var normalizedSelectors = [];
                        var _step11, _iterator11 = _createForOfIteratorHelper(frameSelectors);
                        try {
                            for (_iterator11.s(); !(_step11 = _iterator11.n()).done; ) {
                                var selector = _step11.value;
                                if (_isLabelledShadowDomSelector(selector)) {
                                    assertLabelledShadowDomSelector(selector);
                                    selector = selector.fromShadowDom;
                                }
                                if ("string" !== typeof selector && !isShadowSelector(selector)) return;
                                normalizedSelectors.push(selector);
                            }
                        } catch (err) {
                            _iterator11.e(err);
                        } finally {
                            _iterator11.f();
                        }
                        return normalizedSelectors;
                    }
                    function assertLabelledFrameSelector(selector) {
                        assert2(Array.isArray(selector.fromFrames), "fromFrames property must be an array");
                        assert2(selector.fromFrames.every((function(fromFrameSelector) {
                            return !_objectHasOwn(fromFrameSelector, "fromFrames");
                        })), "Invalid context; fromFrames selector must be appended, rather than nested");
                        assert2(!_objectHasOwn(selector, "fromShadowDom"), "fromFrames and fromShadowDom cannot be used on the same object");
                    }
                    function assertLabelledShadowDomSelector(selector) {
                        assert2(Array.isArray(selector.fromShadowDom), "fromShadowDom property must be an array");
                        assert2(selector.fromShadowDom.every((function(fromShadowDomSelector) {
                            return !_objectHasOwn(fromShadowDomSelector, "fromFrames");
                        })), "shadow selector must be inside fromFrame instead");
                        assert2(selector.fromShadowDom.every((function(fromShadowDomSelector) {
                            return !_objectHasOwn(fromShadowDomSelector, "fromShadowDom");
                        })), "fromShadowDom selector must be appended, rather than nested");
                    }
                    function isShadowSelector(selector) {
                        return Array.isArray(selector) && selector.every((function(str) {
                            return "string" === typeof str;
                        }));
                    }
                    function assert2(bool, str) {
                        assert_default(bool, "Invalid context; ".concat(str, "\nSee: https://github.com/dequelabs/axe-core/blob/master/doc/context.md"));
                    }
                    function parseSelectorArray(context, type2) {
                        var result = [];
                        for (var _i26 = 0, l = context[type2].length; _i26 < l; _i26++) {
                            var item = context[type2][_i26];
                            if (item instanceof window.Node) if (item.documentElement instanceof window.Node) result.push(context.flatTree[0]); else result.push(get_node_from_tree_default(item)); else if (item && item.length) if (item.length > 1) pushUniqueFrameSelector(context, type2, item); else {
                                var nodeList = _shadowSelectAll(item[0]);
                                result.push.apply(result, _toConsumableArray(nodeList.map((function(node) {
                                    return get_node_from_tree_default(node);
                                }))));
                            }
                        }
                        return result.filter((function(r) {
                            return r;
                        }));
                    }
                    function pushUniqueFrameSelector(context, type2, selectorArray) {
                        context.frames = context.frames || [];
                        var frameSelector = selectorArray.shift();
                        var frames = _shadowSelectAll(frameSelector);
                        frames.forEach((function(frame) {
                            var frameContext = context.frames.find((function(result) {
                                return result.node === frame;
                            }));
                            if (!frameContext) {
                                frameContext = createFrameContext(frame, context);
                                context.frames.push(frameContext);
                            }
                            frameContext[type2].push(selectorArray);
                        }));
                    }
                    function Context(spec, flatTree) {
                        var _spec2, _spec3, _spec4, _spec5, _this5 = this;
                        spec = _clone(spec);
                        this.frames = [];
                        this.page = "boolean" === typeof (null === (_spec2 = spec) || void 0 === _spec2 ? void 0 : _spec2.page) ? spec.page : void 0;
                        this.initiator = "boolean" === typeof (null === (_spec3 = spec) || void 0 === _spec3 ? void 0 : _spec3.initiator) ? spec.initiator : true;
                        this.focusable = "boolean" === typeof (null === (_spec4 = spec) || void 0 === _spec4 ? void 0 : _spec4.focusable) ? spec.focusable : true;
                        this.size = "object" === _typeof(null === (_spec5 = spec) || void 0 === _spec5 ? void 0 : _spec5.size) ? spec.size : {};
                        spec = normalizeContext(spec);
                        this.flatTree = null !== flatTree && void 0 !== flatTree ? flatTree : _getFlattenedTree(getRootNode2(spec));
                        this.exclude = spec.exclude;
                        this.include = spec.include;
                        this.include = parseSelectorArray(this, "include");
                        this.exclude = parseSelectorArray(this, "exclude");
                        _select("frame, iframe", this).forEach((function(frame) {
                            if (_isNodeInContext(frame, _this5)) pushUniqueFrame(_this5, frame.actualNode);
                        }));
                        if ("undefined" === typeof this.page) {
                            this.page = isPageContext(this);
                            this.frames.forEach((function(frame) {
                                frame.page = _this5.page;
                            }));
                        }
                        validateContext(this);
                        if (!Array.isArray(this.include)) this.include = Array.from(this.include);
                        this.include.sort(node_sorter_default);
                    }
                    function pushUniqueFrame(context, frame) {
                        if (!_isVisibleToScreenReaders(frame) || find_by_default(context.frames, "node", frame)) return;
                        context.frames.push(createFrameContext(frame, context));
                    }
                    function isPageContext(_ref69) {
                        var include = _ref69.include;
                        return 1 === include.length && include[0].actualNode === document.documentElement;
                    }
                    function validateContext(context) {
                        if (0 === context.include.length && 0 === context.frames.length) {
                            var env = _respondable.isInFrame() ? "frame" : "page";
                            throw new Error("No elements found for include in " + env + " Context");
                        }
                    }
                    function getRootNode2(_ref70) {
                        var include = _ref70.include, exclude = _ref70.exclude;
                        var selectors = Array.from(include).concat(Array.from(exclude));
                        for (var _i27 = 0; _i27 < selectors.length; _i27++) {
                            var item = selectors[_i27];
                            if (item instanceof window.Element) return item.ownerDocument.documentElement;
                            if (item instanceof window.Document) return item.documentElement;
                        }
                        return document.documentElement;
                    }
                    function _getFrameContexts(context) {
                        var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                        if (false === options.iframes) return [];
                        var _Context = new Context(context), frames = _Context.frames;
                        return frames.map((function(_ref71) {
                            var node = _ref71.node, frameContext = _objectWithoutProperties(_ref71, _excluded14);
                            frameContext.initiator = false;
                            var frameSelector = _getAncestry(node);
                            return {
                                frameSelector,
                                frameContext
                            };
                        }));
                    }
                    function _getRule(ruleId) {
                        var rule = axe._audit.rules.find((function(_ref72) {
                            var id = _ref72.id;
                            return id === ruleId;
                        }));
                        if (!rule) throw new Error("Cannot find rule by id: ".concat(ruleId));
                        return rule;
                    }
                    function getScroll(elm) {
                        var buffer = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                        var overflowX = elm.scrollWidth > elm.clientWidth + buffer;
                        var overflowY = elm.scrollHeight > elm.clientHeight + buffer;
                        if (!(overflowX || overflowY)) return;
                        var style = window.getComputedStyle(elm);
                        var scrollableX = isScrollable(style, "overflow-x");
                        var scrollableY = isScrollable(style, "overflow-y");
                        if (overflowX && scrollableX || overflowY && scrollableY) return {
                            elm,
                            top: elm.scrollTop,
                            left: elm.scrollLeft
                        };
                    }
                    function isScrollable(style, prop) {
                        var overflowProp = style.getPropertyValue(prop);
                        return [ "scroll", "auto" ].includes(overflowProp);
                    }
                    var get_scroll_default = memoize_default(getScroll);
                    function getElmScrollRecursive(root) {
                        return Array.from(root.children || root.childNodes || []).reduce((function(scrolls, elm) {
                            var scroll = get_scroll_default(elm);
                            if (scroll) scrolls.push(scroll);
                            return scrolls.concat(getElmScrollRecursive(elm));
                        }), []);
                    }
                    function getScrollState() {
                        var win = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : window;
                        var root = win.document.documentElement;
                        var windowScroll = [ void 0 !== win.pageXOffset ? {
                            elm: win,
                            top: win.pageYOffset,
                            left: win.pageXOffset
                        } : {
                            elm: root,
                            top: root.scrollTop,
                            left: root.scrollLeft
                        } ];
                        return windowScroll.concat(getElmScrollRecursive(document.body));
                    }
                    var get_scroll_state_default = getScrollState;
                    function _getStandards() {
                        return _clone(standards_default);
                    }
                    function getStyleSheetFactory(dynamicDoc) {
                        if (!dynamicDoc) throw new Error("axe.utils.getStyleSheetFactory should be invoked with an argument");
                        return function(options) {
                            var data = options.data, _options$isCrossOrigi = options.isCrossOrigin, isCrossOrigin = void 0 === _options$isCrossOrigi ? false : _options$isCrossOrigi, shadowId = options.shadowId, root = options.root, priority = options.priority, _options$isLink = options.isLink, isLink = void 0 === _options$isLink ? false : _options$isLink;
                            var style = dynamicDoc.createElement("style");
                            if (isLink) {
                                var text = dynamicDoc.createTextNode('@import "'.concat(data.href, '"'));
                                style.appendChild(text);
                            } else style.appendChild(dynamicDoc.createTextNode(data));
                            dynamicDoc.head.appendChild(style);
                            return {
                                sheet: style.sheet,
                                isCrossOrigin,
                                shadowId,
                                root,
                                priority
                            };
                        };
                    }
                    var get_stylesheet_factory_default = getStyleSheetFactory;
                    var styleSheet;
                    function injectStyle(style) {
                        if (styleSheet && styleSheet.parentNode) {
                            if (void 0 === styleSheet.styleSheet) styleSheet.appendChild(document.createTextNode(style)); else styleSheet.styleSheet.cssText += style;
                            return styleSheet;
                        }
                        if (!style) return;
                        var head = document.head || document.getElementsByTagName("head")[0];
                        styleSheet = document.createElement("style");
                        styleSheet.type = "text/css";
                        if (void 0 === styleSheet.styleSheet) styleSheet.appendChild(document.createTextNode(style)); else styleSheet.styleSheet.cssText = style;
                        head.appendChild(styleSheet);
                        return styleSheet;
                    }
                    var inject_style_default = injectStyle;
                    function _isArrayLike(arr) {
                        return !!arr && "object" === _typeof(arr) && "number" === typeof arr.length && arr instanceof window.Node === false;
                    }
                    function _objectHasOwn(obj, prop) {
                        if (!obj || "object" !== _typeof(obj)) return false;
                        return Object.prototype.hasOwnProperty.call(obj, prop);
                    }
                    function _isContextSpec(contextSpec) {
                        return _isContextObject(contextSpec) || _isContextProp(contextSpec);
                    }
                    function _isContextObject(contextSpec) {
                        return [ "include", "exclude" ].some((function(prop) {
                            return _objectHasOwn(contextSpec, prop) && _isContextProp(contextSpec[prop]);
                        }));
                    }
                    function _isContextProp(contextList) {
                        return "string" === typeof contextList || contextList instanceof window.Node || _isLabelledFramesSelector(contextList) || _isLabelledShadowDomSelector(contextList) || _isArrayLike(contextList);
                    }
                    function _isLabelledFramesSelector(selector) {
                        return _objectHasOwn(selector, "fromFrames");
                    }
                    function _isLabelledShadowDomSelector(selector) {
                        return _objectHasOwn(selector, "fromShadowDom");
                    }
                    function isHidden(el, recursed) {
                        var node = get_node_from_tree_default(el);
                        if (9 === el.nodeType) return false;
                        if (11 === el.nodeType) el = el.host;
                        if (node && null !== node._isHidden) return node._isHidden;
                        var style = window.getComputedStyle(el, null);
                        if (!style || !el.parentNode || "none" === style.getPropertyValue("display") || !recursed && "hidden" === style.getPropertyValue("visibility") || "true" === el.getAttribute("aria-hidden")) return true;
                        var parent = el.assignedSlot ? el.assignedSlot : el.parentNode;
                        var hidden = isHidden(parent, true);
                        if (node) node._isHidden = hidden;
                        return hidden;
                    }
                    var is_hidden_default = isHidden;
                    function isHtmlElement(node) {
                        var _node$props$nodeName, _node$props;
                        var nodeName2 = null !== (_node$props$nodeName = null === (_node$props = node.props) || void 0 === _node$props ? void 0 : _node$props.nodeName) && void 0 !== _node$props$nodeName ? _node$props$nodeName : node.nodeName.toLowerCase();
                        if ("http://www.w3.org/2000/svg" === node.namespaceURI) return false;
                        return !!standards_default.htmlElms[nodeName2];
                    }
                    var is_html_element_default = isHtmlElement;
                    function _isNodeInContext(node, _ref73) {
                        var _ref73$include = _ref73.include, include = void 0 === _ref73$include ? [] : _ref73$include, _ref73$exclude = _ref73.exclude, exclude = void 0 === _ref73$exclude ? [] : _ref73$exclude;
                        var filterInclude = include.filter((function(candidate) {
                            return _contains(candidate, node);
                        }));
                        if (0 === filterInclude.length) return false;
                        var filterExcluded = exclude.filter((function(candidate) {
                            return _contains(candidate, node);
                        }));
                        if (0 === filterExcluded.length) return true;
                        var deepestInclude = getDeepest(filterInclude);
                        var deepestExclude = getDeepest(filterExcluded);
                        return _contains(deepestExclude, deepestInclude);
                    }
                    function getDeepest(collection) {
                        var deepest;
                        var _step12, _iterator12 = _createForOfIteratorHelper(collection);
                        try {
                            for (_iterator12.s(); !(_step12 = _iterator12.n()).done; ) {
                                var node = _step12.value;
                                if (!deepest || !_contains(node, deepest)) deepest = node;
                            }
                        } catch (err) {
                            _iterator12.e(err);
                        } finally {
                            _iterator12.f();
                        }
                        return deepest;
                    }
                    function _matchAncestry(ancestryA, ancestryB) {
                        if (ancestryA.length !== ancestryB.length) return false;
                        return ancestryA.every((function(selectorA, ancestorIndex) {
                            var selectorB = ancestryB[ancestorIndex];
                            if (!Array.isArray(selectorA)) return selectorA === selectorB;
                            if (selectorA.length !== selectorB.length) return false;
                            return selectorA.every((function(str, selectorIndex) {
                                return selectorB[selectorIndex] === str;
                            }));
                        }));
                    }
                    function nodeSorter(nodeA, nodeB) {
                        nodeA = nodeA.actualNode || nodeA;
                        nodeB = nodeB.actualNode || nodeB;
                        if (nodeA === nodeB) return 0;
                        if (4 & nodeA.compareDocumentPosition(nodeB)) return -1; else return 1;
                    }
                    var node_sorter_default = nodeSorter;
                    function _nodeLookup(node) {
                        if (node instanceof abstract_virtual_node_default) return {
                            vNode: node,
                            domNode: node.actualNode
                        };
                        return {
                            vNode: get_node_from_tree_default(node),
                            domNode: node
                        };
                    }
                    function parseSameOriginStylesheet(sheet, options, priority, importedUrls) {
                        var isCrossOrigin = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : false;
                        var rules = Array.from(sheet.cssRules);
                        if (!rules) return Promise.resolve();
                        var cssImportRules = rules.filter((function(r) {
                            return 3 === r.type;
                        }));
                        if (!cssImportRules.length) return Promise.resolve({
                            isCrossOrigin,
                            priority,
                            root: options.rootNode,
                            shadowId: options.shadowId,
                            sheet
                        });
                        var cssImportUrlsNotAlreadyImported = cssImportRules.filter((function(rule) {
                            return rule.href;
                        })).map((function(rule) {
                            return rule.href;
                        })).filter((function(url) {
                            return !importedUrls.includes(url);
                        }));
                        var promises = cssImportUrlsNotAlreadyImported.map((function(importUrl, cssRuleIndex) {
                            var newPriority = [].concat(_toConsumableArray(priority), [ cssRuleIndex ]);
                            var isCrossOriginRequest = /^https?:\/\/|^\/\//i.test(importUrl);
                            return parse_crossorigin_stylesheet_default(importUrl, options, newPriority, importedUrls, isCrossOriginRequest);
                        }));
                        var nonImportCSSRules = rules.filter((function(r) {
                            return 3 !== r.type;
                        }));
                        if (!nonImportCSSRules.length) return Promise.all(promises);
                        promises.push(Promise.resolve(options.convertDataToStylesheet({
                            data: nonImportCSSRules.map((function(rule) {
                                return rule.cssText;
                            })).join(),
                            isCrossOrigin,
                            priority,
                            root: options.rootNode,
                            shadowId: options.shadowId
                        })));
                        return Promise.all(promises);
                    }
                    var parse_sameorigin_stylesheet_default = parseSameOriginStylesheet;
                    function parseStylesheet(sheet, options, priority, importedUrls) {
                        var isCrossOrigin = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : false;
                        var isSameOrigin = isSameOriginStylesheet(sheet);
                        if (isSameOrigin) return parse_sameorigin_stylesheet_default(sheet, options, priority, importedUrls, isCrossOrigin);
                        return parse_crossorigin_stylesheet_default(sheet.href, options, priority, importedUrls, true);
                    }
                    function isSameOriginStylesheet(sheet) {
                        try {
                            var rules = sheet.cssRules;
                            if (!rules && sheet.href) return false;
                            return true;
                        } catch (e) {
                            return false;
                        }
                    }
                    var parse_stylesheet_default = parseStylesheet;
                    function parseCrossOriginStylesheet(url, options, priority, importedUrls, isCrossOrigin) {
                        importedUrls.push(url);
                        return new Promise((function(resolve, reject) {
                            var request = new window.XMLHttpRequest;
                            request.open("GET", url);
                            request.timeout = constants_default.preload.timeout;
                            request.addEventListener("error", reject);
                            request.addEventListener("timeout", reject);
                            request.addEventListener("loadend", (function(event) {
                                if (event.loaded && request.responseText) return resolve(request.responseText);
                                reject(request.responseText);
                            }));
                            request.send();
                        })).then((function(data) {
                            var result = options.convertDataToStylesheet({
                                data,
                                isCrossOrigin,
                                priority,
                                root: options.rootNode,
                                shadowId: options.shadowId
                            });
                            return parse_stylesheet_default(result.sheet, options, priority, importedUrls, result.isCrossOrigin);
                        }));
                    }
                    var parse_crossorigin_stylesheet_default = parseCrossOriginStylesheet;
                    var performanceTimer = function() {
                        function now() {
                            if (window.performance && window.performance) return window.performance.now();
                        }
                        var originalTime = null;
                        var lastRecordedTime = now();
                        return {
                            start: function() {
                                this.mark("mark_axe_start");
                            },
                            end: function() {
                                this.mark("mark_axe_end");
                                this.measure("axe", "mark_axe_start", "mark_axe_end");
                                this.logMeasures("axe");
                            },
                            auditStart: function() {
                                this.mark("mark_audit_start");
                            },
                            auditEnd: function() {
                                this.mark("mark_audit_end");
                                this.measure("audit_start_to_end", "mark_audit_start", "mark_audit_end");
                                this.logMeasures();
                            },
                            mark: function(markName) {
                                if (window.performance && void 0 !== window.performance.mark) window.performance.mark(markName);
                            },
                            measure: function(measureName, startMark, endMark) {
                                if (window.performance && void 0 !== window.performance.measure) window.performance.measure(measureName, startMark, endMark);
                            },
                            logMeasures: function(measureName) {
                                function logMeasure(req) {
                                    log_default("Measure " + req.name + " took " + req.duration + "ms");
                                }
                                if (window.performance && void 0 !== window.performance.getEntriesByType) {
                                    var axeStart = window.performance.getEntriesByName("mark_axe_start")[0];
                                    var measures = window.performance.getEntriesByType("measure").filter((function(measure) {
                                        return measure.startTime >= axeStart.startTime;
                                    }));
                                    for (var _i28 = 0; _i28 < measures.length; ++_i28) {
                                        var req = measures[_i28];
                                        if (req.name === measureName) {
                                            logMeasure(req);
                                            return;
                                        }
                                        logMeasure(req);
                                    }
                                }
                            },
                            timeElapsed: function() {
                                return now() - lastRecordedTime;
                            },
                            reset: function() {
                                if (!originalTime) originalTime = now();
                                lastRecordedTime = now();
                            }
                        };
                    }();
                    var performance_timer_default = performanceTimer;
                    function _pollyfillElementsFromPoint() {
                        if (document.elementsFromPoint) return document.elementsFromPoint;
                        if (document.msElementsFromPoint) return document.msElementsFromPoint;
                        var usePointer = function() {
                            var element = document.createElement("x");
                            element.style.cssText = "pointer-events:auto";
                            return "auto" === element.style.pointerEvents;
                        }();
                        var cssProp = usePointer ? "pointer-events" : "visibility";
                        var cssDisableVal = usePointer ? "none" : "hidden";
                        var style = document.createElement("style");
                        style.innerHTML = usePointer ? "* { pointer-events: all }" : "* { visibility: visible }";
                        return function(x, y) {
                            var current, i, d2;
                            var elements = [];
                            var previousPointerEvents = [];
                            document.head.appendChild(style);
                            while ((current = document.elementFromPoint(x, y)) && -1 === elements.indexOf(current)) {
                                elements.push(current);
                                previousPointerEvents.push({
                                    value: current.style.getPropertyValue(cssProp),
                                    priority: current.style.getPropertyPriority(cssProp)
                                });
                                current.style.setProperty(cssProp, cssDisableVal, "important");
                            }
                            if (elements.indexOf(document.documentElement) < elements.length - 1) {
                                elements.splice(elements.indexOf(document.documentElement), 1);
                                elements.push(document.documentElement);
                            }
                            for (i = previousPointerEvents.length; !!(d2 = previousPointerEvents[--i]); ) elements[i].style.setProperty(cssProp, d2.value ? d2.value : "", d2.priority);
                            document.head.removeChild(style);
                            return elements;
                        };
                    }
                    if ("function" === typeof window.addEventListener) document.elementsFromPoint = _pollyfillElementsFromPoint();
                    function uniqueArray(arr1, arr2) {
                        return arr1.concat(arr2).filter((function(elem, pos, arr) {
                            return arr.indexOf(elem) === pos;
                        }));
                    }
                    var unique_array_default = uniqueArray;
                    function createLocalVariables(vNodes, anyLevel, thisLevel, parentShadowId, recycledLocalVariable) {
                        var retVal = recycledLocalVariable || {};
                        retVal.vNodes = vNodes;
                        retVal.vNodesIndex = 0;
                        retVal.anyLevel = anyLevel;
                        retVal.thisLevel = thisLevel;
                        retVal.parentShadowId = parentShadowId;
                        return retVal;
                    }
                    function matchExpressions(domTree, expressions, filter) {
                        var recycledLocalVariables = cache_default.get("qsa.recycledLocalVariables", (function() {
                            return [];
                        }));
                        var stack = [];
                        var vNodes = Array.isArray(domTree) ? domTree : [ domTree ];
                        var currentLevel = createLocalVariables(vNodes, expressions, null, domTree[0].shadowId, recycledLocalVariables.pop());
                        var result = [];
                        while (currentLevel.vNodesIndex < currentLevel.vNodes.length) {
                            var _currentLevel$anyLeve, _currentLevel$thisLev;
                            var vNode = currentLevel.vNodes[currentLevel.vNodesIndex++];
                            var childOnly = null;
                            var childAny = null;
                            var combinedLength = ((null === (_currentLevel$anyLeve = currentLevel.anyLevel) || void 0 === _currentLevel$anyLeve ? void 0 : _currentLevel$anyLeve.length) || 0) + ((null === (_currentLevel$thisLev = currentLevel.thisLevel) || void 0 === _currentLevel$thisLev ? void 0 : _currentLevel$thisLev.length) || 0);
                            var added = false;
                            for (var _i29 = 0; _i29 < combinedLength; _i29++) {
                                var _currentLevel$anyLeve2, _currentLevel$anyLeve3, _currentLevel$anyLeve4;
                                var exp = _i29 < ((null === (_currentLevel$anyLeve2 = currentLevel.anyLevel) || void 0 === _currentLevel$anyLeve2 ? void 0 : _currentLevel$anyLeve2.length) || 0) ? currentLevel.anyLevel[_i29] : currentLevel.thisLevel[_i29 - ((null === (_currentLevel$anyLeve3 = currentLevel.anyLevel) || void 0 === _currentLevel$anyLeve3 ? void 0 : _currentLevel$anyLeve3.length) || 0)];
                                if ((!exp[0].id || vNode.shadowId === currentLevel.parentShadowId) && _matchesExpression(vNode, exp[0])) if (1 === exp.length) {
                                    if (!added && (!filter || filter(vNode))) {
                                        result.push(vNode);
                                        added = true;
                                    }
                                } else {
                                    var rest = exp.slice(1);
                                    if (false === [ " ", ">" ].includes(rest[0].combinator)) throw new Error("axe.utils.querySelectorAll does not support the combinator: " + exp[1].combinator);
                                    if (">" === rest[0].combinator) (childOnly = childOnly || []).push(rest); else (childAny = childAny || []).push(rest);
                                }
                                if ((!exp[0].id || vNode.shadowId === currentLevel.parentShadowId) && null !== (_currentLevel$anyLeve4 = currentLevel.anyLevel) && void 0 !== _currentLevel$anyLeve4 && _currentLevel$anyLeve4.includes(exp)) (childAny = childAny || []).push(exp);
                            }
                            if (vNode.children && vNode.children.length) {
                                stack.push(currentLevel);
                                currentLevel = createLocalVariables(vNode.children, childAny, childOnly, vNode.shadowId, recycledLocalVariables.pop());
                            }
                            while (currentLevel.vNodesIndex === currentLevel.vNodes.length && stack.length) {
                                recycledLocalVariables.push(currentLevel);
                                currentLevel = stack.pop();
                            }
                        }
                        return result;
                    }
                    function querySelectorAllFilter(domTree, selector, filter) {
                        domTree = Array.isArray(domTree) ? domTree : [ domTree ];
                        var expressions = _convertSelector(selector);
                        var nodes = getNodesMatchingExpression(domTree, expressions, filter);
                        if (nodes) return nodes;
                        return matchExpressions(domTree, expressions, filter);
                    }
                    var query_selector_all_filter_default = querySelectorAllFilter;
                    function preloadCssom(_ref74) {
                        var _ref74$treeRoot = _ref74.treeRoot, treeRoot = void 0 === _ref74$treeRoot ? axe._tree[0] : _ref74$treeRoot;
                        var rootNodes = getAllRootNodesInTree(treeRoot);
                        if (!rootNodes.length) return Promise.resolve();
                        var dynamicDoc = document.implementation.createHTMLDocument("Dynamic document for loading cssom");
                        var convertDataToStylesheet = get_stylesheet_factory_default(dynamicDoc);
                        return getCssomForAllRootNodes(rootNodes, convertDataToStylesheet).then((function(assets) {
                            return flattenAssets(assets);
                        }));
                    }
                    var preload_cssom_default = preloadCssom;
                    function getAllRootNodesInTree(tree) {
                        var ids = [];
                        var rootNodes = query_selector_all_filter_default(tree, "*", (function(node) {
                            if (ids.includes(node.shadowId)) return false;
                            ids.push(node.shadowId);
                            return true;
                        })).map((function(node) {
                            return {
                                shadowId: node.shadowId,
                                rootNode: get_root_node_default(node.actualNode)
                            };
                        }));
                        return unique_array_default(rootNodes, []);
                    }
                    function getCssomForAllRootNodes(rootNodes, convertDataToStylesheet) {
                        var promises = [];
                        rootNodes.forEach((function(_ref75, index) {
                            var rootNode = _ref75.rootNode, shadowId = _ref75.shadowId;
                            var sheets = getStylesheetsOfRootNode(rootNode, shadowId, convertDataToStylesheet);
                            if (!sheets) return Promise.all(promises);
                            var rootIndex = index + 1;
                            var parseOptions = {
                                rootNode,
                                shadowId,
                                convertDataToStylesheet,
                                rootIndex
                            };
                            var importedUrls = [];
                            var p2 = Promise.all(sheets.map((function(sheet, sheetIndex) {
                                var priority = [ rootIndex, sheetIndex ];
                                return parse_stylesheet_default(sheet, parseOptions, priority, importedUrls);
                            })));
                            promises.push(p2);
                        }));
                        return Promise.all(promises);
                    }
                    function flattenAssets(assets) {
                        return assets.reduce((function(acc, val) {
                            return Array.isArray(val) ? acc.concat(flattenAssets(val)) : acc.concat(val);
                        }), []);
                    }
                    function getStylesheetsOfRootNode(rootNode, shadowId, convertDataToStylesheet) {
                        var sheets;
                        if (11 === rootNode.nodeType && shadowId) sheets = getStylesheetsFromDocumentFragment(rootNode, convertDataToStylesheet); else sheets = getStylesheetsFromDocument(rootNode);
                        return filterStylesheetsWithSameHref(sheets);
                    }
                    function getStylesheetsFromDocumentFragment(rootNode, convertDataToStylesheet) {
                        return Array.from(rootNode.children).filter(filerStyleAndLinkAttributesInDocumentFragment).reduce((function(out, node) {
                            var nodeName2 = node.nodeName.toUpperCase();
                            var data = "STYLE" === nodeName2 ? node.textContent : node;
                            var isLink = "LINK" === nodeName2;
                            var stylesheet = convertDataToStylesheet({
                                data,
                                isLink,
                                root: rootNode
                            });
                            if (stylesheet.sheet) out.push(stylesheet.sheet);
                            return out;
                        }), []);
                    }
                    function getStylesheetsFromDocument(rootNode) {
                        return Array.from(rootNode.styleSheets).filter((function(sheet) {
                            if (!sheet.media) return false;
                            return filterMediaIsPrint(sheet.media.mediaText);
                        }));
                    }
                    function filerStyleAndLinkAttributesInDocumentFragment(node) {
                        var nodeName2 = node.nodeName.toUpperCase();
                        var linkHref = node.getAttribute("href");
                        var linkRel = node.getAttribute("rel");
                        var isLink = "LINK" === nodeName2 && linkHref && linkRel && node.rel.toUpperCase().includes("STYLESHEET");
                        var isStyle = "STYLE" === nodeName2;
                        return isStyle || isLink && filterMediaIsPrint(node.media);
                    }
                    function filterMediaIsPrint(media) {
                        if (!media) return true;
                        return !media.toUpperCase().includes("PRINT");
                    }
                    function filterStylesheetsWithSameHref(sheets) {
                        var hrefs = [];
                        return sheets.filter((function(sheet) {
                            if (!sheet.href) return true;
                            if (hrefs.includes(sheet.href)) return false;
                            hrefs.push(sheet.href);
                            return true;
                        }));
                    }
                    function preloadMedia(_ref76) {
                        var _ref76$treeRoot = _ref76.treeRoot, treeRoot = void 0 === _ref76$treeRoot ? axe._tree[0] : _ref76$treeRoot;
                        var mediaVirtualNodes = query_selector_all_filter_default(treeRoot, "video, audio", (function(_ref77) {
                            var actualNode = _ref77.actualNode;
                            if (actualNode.hasAttribute("src")) return !!actualNode.getAttribute("src");
                            var sourceWithSrc = Array.from(actualNode.getElementsByTagName("source")).filter((function(source) {
                                return !!source.getAttribute("src");
                            }));
                            if (sourceWithSrc.length <= 0) return false;
                            return true;
                        }));
                        return Promise.all(mediaVirtualNodes.map((function(_ref78) {
                            var actualNode = _ref78.actualNode;
                            return isMediaElementReady(actualNode);
                        })));
                    }
                    var preload_media_default = preloadMedia;
                    function isMediaElementReady(elm) {
                        return new Promise((function(resolve) {
                            if (elm.readyState > 0) resolve(elm);
                            function onMediaReady() {
                                elm.removeEventListener("loadedmetadata", onMediaReady);
                                resolve(elm);
                            }
                            elm.addEventListener("loadedmetadata", onMediaReady);
                        }));
                    }
                    function _preload(options) {
                        var preloadFunctionsMap = {
                            cssom: preload_cssom_default,
                            media: preload_media_default
                        };
                        if (!_shouldPreload(options)) return Promise.resolve();
                        return new Promise((function(resolve, reject) {
                            var _getPreloadConfig2 = _getPreloadConfig(options), assets = _getPreloadConfig2.assets, timeout = _getPreloadConfig2.timeout;
                            var preloadTimeout = setTimeout((function() {
                                return reject(new Error("Preload assets timed out."));
                            }), timeout);
                            Promise.all(assets.map((function(asset) {
                                return preloadFunctionsMap[asset](options).then((function(results) {
                                    return _defineProperty({}, asset, results);
                                }));
                            }))).then((function(results) {
                                var preloadAssets = results.reduce((function(out, result) {
                                    return _extends({}, out, result);
                                }), {});
                                clearTimeout(preloadTimeout);
                                resolve(preloadAssets);
                            }))["catch"]((function(err2) {
                                clearTimeout(preloadTimeout);
                                reject(err2);
                            }));
                        }));
                    }
                    function isValidPreloadObject(preloadObj) {
                        return "object" === _typeof(preloadObj) && Array.isArray(preloadObj.assets);
                    }
                    function _shouldPreload(options) {
                        if (!options || void 0 === options.preload || null === options.preload) return true;
                        if ("boolean" === typeof options.preload) return options.preload;
                        return isValidPreloadObject(options.preload);
                    }
                    function _getPreloadConfig(options) {
                        var _constants_default$pr = constants_default.preload, assets = _constants_default$pr.assets, timeout = _constants_default$pr.timeout;
                        var config = {
                            assets,
                            timeout
                        };
                        if (!options.preload) return config;
                        if ("boolean" === typeof options.preload) return config;
                        var areRequestedAssetsValid = options.preload.assets.every((function(a2) {
                            return assets.includes(a2.toLowerCase());
                        }));
                        if (!areRequestedAssetsValid) throw new Error("Requested assets, not supported. Supported assets are: ".concat(assets.join(", "), "."));
                        config.assets = unique_array_default(options.preload.assets.map((function(a2) {
                            return a2.toLowerCase();
                        })), []);
                        if (options.preload.timeout && "number" === typeof options.preload.timeout && !isNaN(options.preload.timeout)) config.timeout = options.preload.timeout;
                        return config;
                    }
                    function _publishMetaData(ruleResult) {
                        var checksData = axe._audit.data.checks || {};
                        var rulesData = axe._audit.data.rules || {};
                        var rule = find_by_default(axe._audit.rules, "id", ruleResult.id) || {};
                        ruleResult.tags = _clone(rule.tags || []);
                        var shouldBeTrue = extender(checksData, true, rule);
                        var shouldBeFalse = extender(checksData, false, rule);
                        ruleResult.nodes.forEach((function(detail) {
                            detail.any.forEach(shouldBeTrue);
                            detail.all.forEach(shouldBeTrue);
                            detail.none.forEach(shouldBeFalse);
                        }));
                        extend_meta_data_default(ruleResult, _clone(rulesData[ruleResult.id] || {}));
                    }
                    function getIncompleteReason(checkData, messages) {
                        function getDefaultMsg(message) {
                            if (message.incomplete && message.incomplete["default"]) return message.incomplete["default"]; else return incompleteFallbackMessage();
                        }
                        if (checkData && checkData.missingData) try {
                            var msg = messages.incomplete[checkData.missingData[0].reason];
                            if (!msg) throw new Error;
                            return msg;
                        } catch (_unused5) {
                            if ("string" === typeof checkData.missingData) return messages.incomplete[checkData.missingData]; else return getDefaultMsg(messages);
                        } else if (checkData && checkData.messageKey) return messages.incomplete[checkData.messageKey]; else return getDefaultMsg(messages);
                    }
                    function extender(checksData, shouldBeTrue, rule) {
                        return function(check) {
                            var sourceData = checksData[check.id] || {};
                            var messages = sourceData.messages || {};
                            var data = Object.assign({}, sourceData);
                            delete data.messages;
                            if (!rule.reviewOnFail && void 0 === check.result) {
                                if ("object" === _typeof(messages.incomplete) && !Array.isArray(check.data)) data.message = getIncompleteReason(check.data, messages);
                                if (!data.message) data.message = messages.incomplete;
                            } else data.message = check.result === shouldBeTrue ? messages.pass : messages.fail;
                            if ("function" !== typeof data.message) data.message = process_message_default(data.message, check.data);
                            extend_meta_data_default(check, data);
                        };
                    }
                    function querySelectorAll(domTree, selector) {
                        return query_selector_all_filter_default(domTree, selector);
                    }
                    var query_selector_all_default = querySelectorAll;
                    function matchTags(rule, runOnly) {
                        var include, exclude;
                        var defaultExclude = axe._audit && axe._audit.tagExclude ? axe._audit.tagExclude : [];
                        if (runOnly.hasOwnProperty("include") || runOnly.hasOwnProperty("exclude")) {
                            include = runOnly.include || [];
                            include = Array.isArray(include) ? include : [ include ];
                            exclude = runOnly.exclude || [];
                            exclude = Array.isArray(exclude) ? exclude : [ exclude ];
                            exclude = exclude.concat(defaultExclude.filter((function(tag) {
                                return -1 === include.indexOf(tag);
                            })));
                        } else {
                            include = Array.isArray(runOnly) ? runOnly : [ runOnly ];
                            exclude = defaultExclude.filter((function(tag) {
                                return -1 === include.indexOf(tag);
                            }));
                        }
                        var matching = include.some((function(tag) {
                            return -1 !== rule.tags.indexOf(tag);
                        }));
                        if (matching || 0 === include.length && false !== rule.enabled) return exclude.every((function(tag) {
                            return -1 === rule.tags.indexOf(tag);
                        })); else return false;
                    }
                    function ruleShouldRun(rule, context, options) {
                        var runOnly = options.runOnly || {};
                        var ruleOptions = (options.rules || {})[rule.id];
                        if (rule.pageLevel && !context.page) return false; else if ("rule" === runOnly.type) return -1 !== runOnly.values.indexOf(rule.id); else if (ruleOptions && "boolean" === typeof ruleOptions.enabled) return ruleOptions.enabled; else if ("tag" === runOnly.type && runOnly.values) return matchTags(rule, runOnly.values); else return matchTags(rule, []);
                    }
                    var rule_should_run_default = ruleShouldRun;
                    function _filterHtmlAttrs(element, filterAttrs) {
                        if (!filterAttrs) return element;
                        var node = element.cloneNode(false);
                        var attributes2 = get_node_attributes_default(node);
                        if (1 === node.nodeType) {
                            var outerHTML = node.outerHTML;
                            node = cache_default.get(outerHTML, (function() {
                                return setNodeAttributes(node, attributes2, element, filterAttrs);
                            }));
                        } else node = setNodeAttributes(node, attributes2, element, filterAttrs);
                        Array.from(element.childNodes).forEach((function(child) {
                            node.appendChild(_filterHtmlAttrs(child, filterAttrs));
                        }));
                        return node;
                    }
                    function setNodeAttributes(node, attributes2, element, filterAttrs) {
                        if (!attributes2) return node;
                        node = document.createElement(node.nodeName);
                        Array.from(attributes2).forEach((function(attr) {
                            if (!attributeMatches(element, attr.name, filterAttrs)) node.setAttribute(attr.name, attr.value);
                        }));
                        return node;
                    }
                    function attributeMatches(node, attrName, filterAttrs) {
                        if ("undefined" === typeof filterAttrs[attrName]) return false;
                        if (true === filterAttrs[attrName]) return true;
                        return element_matches_default(node, filterAttrs[attrName]);
                    }
                    function _select(selector, context) {
                        var result = [];
                        var candidate;
                        if (axe._selectCache) for (var j = 0, l = axe._selectCache.length; j < l; j++) {
                            var item = axe._selectCache[j];
                            if (item.selector === selector) return item.result;
                        }
                        var outerIncludes = getOuterIncludes(context.include);
                        var isInContext = getContextFilter(context);
                        for (var _i30 = 0; _i30 < outerIncludes.length; _i30++) {
                            candidate = outerIncludes[_i30];
                            var nodes = query_selector_all_filter_default(candidate, selector, isInContext);
                            result = mergeArrayUniques(result, nodes);
                        }
                        if (axe._selectCache) axe._selectCache.push({
                            selector,
                            result
                        });
                        return result;
                    }
                    function getOuterIncludes(includes) {
                        return includes.reduce((function(res, el) {
                            if (!res.length || !_contains(res[res.length - 1], el)) res.push(el);
                            return res;
                        }), []);
                    }
                    function getContextFilter(context) {
                        if (!context.exclude || 0 === context.exclude.length) return null;
                        return function(node) {
                            return _isNodeInContext(node, context);
                        };
                    }
                    function mergeArrayUniques(arr1, arr2) {
                        if (0 === arr1.length) return arr2;
                        if (arr1.length < arr2.length) {
                            var temp = arr1;
                            arr1 = arr2;
                            arr2 = temp;
                        }
                        for (var _i31 = 0, l = arr2.length; _i31 < l; _i31++) if (!arr1.includes(arr2[_i31])) arr1.push(arr2[_i31]);
                        return arr1;
                    }
                    function setScroll(elm, top, left) {
                        if (elm === window) return elm.scroll(left, top); else {
                            elm.scrollTop = top;
                            elm.scrollLeft = left;
                        }
                    }
                    function setScrollState(scrollState) {
                        scrollState.forEach((function(_ref80) {
                            var elm = _ref80.elm, top = _ref80.top, left = _ref80.left;
                            return setScroll(elm, top, left);
                        }));
                    }
                    var set_scroll_state_default = setScrollState;
                    function _shadowSelect(selectors) {
                        var selectorArr = Array.isArray(selectors) ? _toConsumableArray(selectors) : [ selectors ];
                        return selectRecursive(selectorArr, document);
                    }
                    function selectRecursive(selectors, doc) {
                        var selectorStr = selectors.shift();
                        var elm = selectorStr ? doc.querySelector(selectorStr) : null;
                        if (0 === selectors.length) return elm;
                        if (!(null !== elm && void 0 !== elm && elm.shadowRoot)) return null;
                        return selectRecursive(selectors, elm.shadowRoot);
                    }
                    function _shadowSelectAll(selectors) {
                        var doc = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : document;
                        var selectorArr = Array.isArray(selectors) ? _toConsumableArray(selectors) : [ selectors ];
                        if (0 === selectors.length) return [];
                        return selectAllRecursive(selectorArr, doc);
                    }
                    function selectAllRecursive(_ref81, doc) {
                        var _ref82 = _toArray(_ref81), selectorStr = _ref82[0], restSelector = _ref82.slice(1);
                        var elms = doc.querySelectorAll(selectorStr);
                        if (0 === restSelector.length) return Array.from(elms);
                        var selected = [];
                        var _step13, _iterator13 = _createForOfIteratorHelper(elms);
                        try {
                            for (_iterator13.s(); !(_step13 = _iterator13.n()).done; ) {
                                var elm = _step13.value;
                                if (null !== elm && void 0 !== elm && elm.shadowRoot) selected.push.apply(selected, _toConsumableArray(selectAllRecursive(restSelector, elm.shadowRoot)));
                            }
                        } catch (err) {
                            _iterator13.e(err);
                        } finally {
                            _iterator13.f();
                        }
                        return selected;
                    }
                    function validInputTypes() {
                        return [ "hidden", "text", "search", "tel", "url", "email", "password", "date", "month", "week", "time", "datetime-local", "number", "range", "color", "checkbox", "radio", "file", "submit", "image", "reset", "button" ];
                    }
                    var valid_input_type_default = validInputTypes;
                    var langs = [ , [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, 1, 1, , 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, , , , , , 1, 1, 1, 1, , , 1, 1, 1, , 1, , 1, , 1, 1 ], [ 1, 1, 1, , 1, 1, , 1, 1, 1, , 1, , , 1, 1, 1, , , 1, 1, 1, , , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , , , , 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1 ], [ , 1, , , , , , 1, , 1, , , , , 1, , 1, , , , 1, 1, , 1, , , 1 ], [ 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , , 1, 1, 1, 1, , , 1, , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , 1, 1, , , 1, , , , , 1, 1, 1, , 1, , 1, , 1, , , , , , 1 ], [ 1, , 1, 1, 1, 1, , , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ 1, , 1, , 1, , , , , 1, , 1, 1, 1, 1, 1, , , , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, , 1, , 1, 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , 1, , , 1, , 1, , , , 1, 1, 1, , , , , , , , , , , 1 ], [ 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1 ], [ 1, 1, 1, 1, 1, , , 1, , , 1, , , 1, 1, 1, , , , , 1, , , , , , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1, 1, 1, 1, , 1 ], [ , 1, , 1, 1, 1, , 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, , , 1, 1, , , , , , 1, 1 ], [ 1, 1, 1, , , , , 1, , , , 1, 1, , 1, , , , , , 1, , , , , 1 ], [ , 1, , , 1, , , 1, , , , , , 1 ], [ , 1, , 1, , , , 1, , , , 1 ], [ 1, , 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , , 1, , , 1, , 1, 1, , 1, , 1, , , , , 1, , 1 ], [ , 1, , , , 1, , , 1, 1, , 1, , 1, 1, 1, 1, , 1, 1, , , 1, , , 1 ], [ , 1, 1, , , , , , 1, , , , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1 ], [ , 1, , 1, 1, 1, , , 1, 1, 1, 1, 1, 1, , 1, , , , , 1, 1, , 1, , 1 ], [ , 1, , 1, , 1, , 1, , 1, , 1, 1, 1, 1, 1, , , 1, 1, 1 ], [ , 1, 1, 1, , , , 1, 1, 1, , 1, 1, , , 1, 1, , 1, 1, 1, 1, , 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, , 1, 1, 1, , 1, , , , , 1, 1, 1, , , 1, , 1, , , 1, 1 ], [ , , , , 1, , , , , , , , , , , , , , , , , 1 ], [ 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ , 1, , 1, 1, 1, , 1, 1, , , , 1, 1, 1, 1, 1, , , 1, 1, 1, , , , , 1 ], [ 1, 1, 1, 1, , , , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, , , , , , , 1, , , , , , , 1 ], [ , 1, 1, , 1, 1, , 1, , , , , , , , , , , , , 1 ], , [ 1, 1, 1, , , , , , , , , , , , , 1 ], [ , , , , , , , , 1, , , 1, , , 1, 1, , , , , 1 ] ], [ , [ 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1 ], [ , , , 1, , , , , , , , , , , , , , , 1 ], [ , 1, , , 1, 1, , 1, , 1, 1, , , , 1, 1, , , 1, 1, , , , 1 ], [ 1, , , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, , , 1, , , , 1 ], , [ , 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, , 1, 1, , , 1, 1, 1, 1, , 1, 1, , 1 ], [ , 1, , , 1, , , 1, , 1, , , 1, 1, 1, 1, , , 1, 1, , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, 1, 1, , , 1, , , 1, , 1 ], [ , 1, , , , , , , , , , 1, 1, , , , , , 1, 1, , , , , 1 ], [ , , , , , , , 1, , , , 1, , 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, , , , 1, 1, 1, 1, 1, , , 1, 1, , 1, 1, 1, 1, 1 ], [ , 1, , , 1, 1, , 1, , 1, 1, 1, , , 1, 1, , , 1, , 1, 1, 1, 1, , 1 ], [ , 1, 1, 1, , 1, 1, , 1, 1, , 1, 1, , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1 ], [ , , , , , , , , , , , , , , , , 1 ], , [ , 1, 1, 1, 1, 1, , 1, 1, 1, , , 1, , 1, 1, , 1, 1, 1, 1, 1, , 1, , 1 ], [ , , 1, , , 1, , , 1, 1, , , 1, , 1, 1, , 1 ], [ , 1, 1, , 1, , , , 1, 1, , 1, , 1, 1, 1, 1, , 1, 1, 1, 1, , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ 1, 1 ], [ , 1, , , , , , , , , , 1, 1, , , , , , 1, 1, , 1, , 1, , 1, 1 ], , [ , 1, 1, , 1, , , 1, , 1, , , , 1, 1, 1, , , , , , 1, , , , 1 ], [ 1, 1, , , 1, 1, , 1, , , , , 1, , 1 ] ], [ , [ , 1 ], [ , , , 1, , , , 1, , , , 1, , , , 1, , , 1, , , 1 ], [ , , , , , , , , , , , , , , , , , , 1, 1, , , , , , 1 ], , [ 1, , , , , 1 ], [ , 1, , , , 1, , , , 1 ], [ , 1, , , , , , , , , , , 1, , , 1, , , , , , , , , 1, 1 ], [ , , , , , , , , , , , , , , , , , , , , , 1 ], [ , , , , , , , , , , , , , , , , 1, , , , 1, , 1 ], [ , 1 ], [ , 1, , 1, , 1, , 1, , 1, , 1, 1, 1, , 1, 1, , 1, , , , , , , 1 ], [ 1, , , , , 1, , , 1, 1, , 1, , 1, , 1, 1, , , , , 1, , , 1 ], [ , 1, 1, , , 1, , 1, , 1, , 1, , 1, 1, 1, 1, , , 1, , 1, , 1, 1, 1 ], [ 1, 1, 1, 1, 1, , 1, , 1, , , , 1, 1, 1, 1, , 1, 1, , , 1, 1, 1, 1 ], [ 1, , , , , , , , , , , , , , , , , , , , 1 ], [ , , , , , , , , , 1 ], , [ , 1, , , , , , 1, 1, 1, , 1, , , , 1, , , 1, 1, 1, , , 1 ], [ 1, , , , , 1, , 1, 1, 1, , 1, 1, 1, 1, 1, , 1, , 1, , 1, , , 1, 1 ], [ 1, , 1, 1, , , , , 1, , , , , , 1, 1, , , 1, 1, 1, 1, , , 1, , 1 ], [ 1, , , , , , , , , , , , , , , , , 1 ], [ , , , , , 1, , , 1, , , , , , 1 ], [ , , , , , , , , , , , , , , , 1 ], [ , , , , , , , , , , , , , , , , , , , , 1 ], [ , 1, , , , , , , , , , , , , , 1 ], [ , 1, , , , 1 ] ], [ , [ 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, , 1, 1, , , 1, 1, 1 ], [ , , , , , , , , , , , , 1 ], [ , , , , , , , , , , , , , , , , , , , 1 ], , [ , , , , , , , , , , , , , , , , , , 1 ], [ 1, , , , , , , , , 1, , , , 1 ], [ , , , , , , , , , , , , , , , , , , 1 ], , [ 1, 1, , , , 1, 1, , , , , , 1, , , , 1, , 1, , 1, 1, , 1 ], [ 1 ], [ , , , , , , , , , , , 1, , , , , , , , , , , 1 ], [ , 1, , , , , , , 1, 1, , , 1, , 1, , , , 1, , , , , , , 1 ], [ , , , , , , , , , , , , , , , , 1, , , , , 1 ], [ , , 1, , , , , 1, , 1 ], [ 1, , , , 1, , , , , 1, , , , 1, 1, , , , 1, 1, , , , , 1 ], [ , , , , , 1 ], [ , , , , , , , , , , , , , , , , , , , 1 ], [ 1, , , 1, 1, , , , , , , 1, , 1, , 1, 1, 1, 1, 1, 1 ], [ , , , , , 1, , , , , , , 1, , , , , , , 1 ], , [ , , 1, 1, 1, 1, 1, , 1, 1, 1, , , 1, 1, , , 1, 1, , 1, 1, 1, , , 1 ], [ , , , , , , , , , , , , , , , , , , 1 ], [ , 1, , , , 1 ], , [ 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , , , 1, 1, 1, 1, , , , , , 1, , 1, , , , 1, , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , , 1 ], [ , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, , , , 1, , 1, , , 1, 1, 1, 1, 1 ], [ , , , , , , , , , , , 1, , , , , , , , , 1, , , , 1 ], [ , 1, 1, , 1, 1, , 1, , , , 1, 1, , 1, 1, , , 1, , 1, 1, , 1 ], [ , 1, , 1, , 1, , , 1, , , 1, 1, , 1, 1, , , 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, , , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ , , , , , , , , , 1, , 1, , 1, 1, , , , 1, , , 1 ], [ , 1, , , 1, 1, , , , , , , , , 1, 1, 1, , , , , 1 ], [ 1, , , 1, 1, , , , 1, 1, 1, 1, 1, , , 1, , , 1, , , 1, , 1, , 1 ], [ , 1, 1, , 1, 1, , 1, 1, , , , 1, 1, 1, , , 1, 1, , , 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, , 1, 1, , 1, , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ , 1, , , , 1, , , , , , , , , 1 ], [ , 1, , , , , , , , 1, , , , , 1, , , , 1, , , 1 ], [ , 1, 1, 1, 1, , , 1, 1, 1, 1, 1, , 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , , , , 1, , 1, , , , , 1, 1, 1, 1, 1, , , 1, , , , 1 ], [ , 1, , , , , , , , 1, , , , , , , , , , , , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1 ], [ 1, 1, , 1, , 1, 1, , , , 1, , 1, 1, 1, 1, 1, , 1, 1, , , , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, , 1, 1, , , 1, 1, , , , 1, , 1, 1, , 1, 1 ], [ , , , , , , , , , , , , , , , , , , , , , , , , 1 ], [ , 1, 1, , 1, 1, 1, 1, , 1, , , 1, 1, 1, 1, , , 1, , , , , , , 1 ], [ , 1, , , , , , , , 1, , , , , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1 ], [ , 1, 1, , , , , , , , , , , , 1, 1, , , , , , 1 ], [ , 1, , , , , , , 1 ], [ , , , , , , , , , , , , , , 1, , , , , 1, , , , , , 1 ], [ 1, 1, , , 1, , , 1, 1, 1, , , , 1 ], , [ , , , , , , , , , , , , , 1, , , , , , , , , , 1 ], [ , , , , , , , , , 1, , , , , , , , , 1, , , , , , , 1 ], [ 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, , 1, , , 1, , 1, , , 1, 1 ], [ , , , , , , , , , 1 ], [ , 1, , , , 1, , , , , , 1, , , 1, , , , , 1 ], [ , 1, 1, , 1, 1, , , , , , , , , , , , , , , 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , 1, 1, , 1, 1, 1, 1, , , , 1, 1, , , , 1, , 1 ], [ 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1, , 1, 1, , 1, 1 ], [ , , , , , , , , , , , , , , , 1, , , , 1 ], , [ 1, 1, , 1, , 1, , , , , , 1, , 1, , 1, 1, , 1, , 1, 1, , 1, 1, , 1 ], [ , , 1, , , , , , 1, , , , 1, , 1, , , , , 1 ], [ 1, , , , , , , , , 1, , , , , , 1, , , , 1, , 1, , , 1 ], [ 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , , 1, , 1, , , , , , 1, , , 1, , , , , , , , 1 ], [ , 1, , 1, , , , , , , , , , , , 1 ], , [ 1, 1, , , , , , , , , , , , , , , , , , , , , , 1, 1 ], [ 1 ] ], [ , [ 1, , , , , , , , , 1, , , , , 1, , 1, , 1 ], [ , 1, 1, , 1, 1, , 1, 1, 1, , , 1, 1, 1, , , , 1, , , 1, , , , 1 ], [ , 1, , , , , , , 1, , , , 1, , , , , , 1 ], [ 1, 1, 1, 1, 1, 1, , , , 1, , , , , , , , , 1, 1, 1, 1 ], [ 1 ], [ , 1, 1, , , 1, 1, , , , , 1, , 1, , , , , , , , 1, , , , 1 ], [ 1, , 1, , , 1, , 1, , , , , 1, 1, 1, 1, , , , 1, , , , 1 ], [ , , 1, , , , , , , 1, , , , , , , 1, , , , , , , 1 ], [ 1, , , , , , , , , , , , , , 1, , , , 1 ], [ , , , 1, , 1, , , , , 1, , , , 1, 1, , , , 1 ], [ 1, , , , , 1, , , , 1, , 1, 1, , , 1, 1, , 1, 1, 1, , 1, 1, 1, , 1 ], [ , 1, 1, , , , , 1, , 1, , 1, 1, 1, , 1, 1, , , 1, , 1, 1, 1 ], [ , 1, , , , 1, , , , 1, , , 1, , 1, 1, , , 1, 1, , , , , , 1 ], [ 1, , 1, 1, , 1, , 1, 1, , 1, , 1, 1, 1, 1, 1, , , 1, 1, , , , , , 1 ], [ 1, , , , , , , , , , , , , , , , , , 1, , , 1, , 1 ], [ , , , , , , , , , 1, , , , , , 1 ], [ , , , , , , , , , , , , , , , , , , , , , 1, , 1 ], [ , 1, , , , 1, , , 1, 1, , 1, , , 1, 1, , , 1, , , 1, , , 1, 1 ], [ 1, 1, , 1, 1, 1, , 1, 1, 1, , 1, , 1, 1, 1, , , 1, , 1, 1 ], [ 1, , 1, 1, 1, 1, , , , 1, , 1, 1, 1, , 1, , , 1, 1, 1, , 1, 1, 1, 1, 1 ], [ 1, , , , , , , , , , , , , 1 ], [ , , 1, , , , , , , , , , , , , , , , , , , , 1 ], [ 1, , , , , , , , , , , 1, , 1, , 1, , , , 1 ], [ , , , 1, , , , , , , , , 1 ], [ , 1, , , , , , , , , , , , , , 1, , , , , , , , , 1 ], [ , , , , , , , , 1, 1, , , , , , , , , 1, , , , , , , , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , , 1, 1, 1 ], [ , , , , , 1, , , , 1, 1, 1, , , 1, 1, , , 1, , 1, 1, , 1 ], [ , , , , , , , , , , , , , , , , , , , 1, 1 ], [ , 1, , , , , , 1, , , , , , , , , , , , , 1 ], [ , , 1, , , 1, , 1, 1, 1, , 1, 1, , 1, , , , 1, , 1, 1 ], , [ , , 1, , , 1, , , , , , 1, , , , 1 ], [ , , , , , , , , , 1, , , , , , , , , , 1 ], [ 1, 1, 1, 1, 1, 1, , 1, 1, 1, , , 1, 1, , 1, , 1, , , 1, 1, 1, , , 1 ], [ , , , , , 1, , , , , , , , , , , , , 1 ], [ , 1, , , , , , , , , , , , 1, , 1, 1, , 1, , , 1 ], [ , , , , , 1, , , , , , , , , , , , , , 1 ], [ , 1, 1, 1, 1, , , , , 1, , , 1, , 1, , , , 1, 1, , , , 1, 1 ], [ , 1, , , 1, , , 1, , 1, 1, , 1, , , , , , , 1 ], [ , , 1, , 1, , , 1, , , , , , , , , , , 1, 1, , , , 1 ], [ , 1, , , , , , , , , , , , , , , , , 1, , , , , , 1 ], [ , , , , , , , , , , , , , , , , , , 1 ], [ , 1, 1, , , , , , , , , , , , , , , , 1, , 1, 1 ], [ , , , , , , , , , , , , 1 ], , [ , 1, 1, 1, 1, , , , 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1, , 1 ], [ 1, , , , 1, , , , , , , , , , 1 ], [ 1, , , , , , , , , 1 ], , [ , 1, , , , 1, , , , , , , , , , , , , , , , , , , , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, , , , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1, , 1, 1, 1, 1 ], [ 1, 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , , 1, 1, 1, 1, , 1, , , , 1, 1, , , 1, 1, , 1 ], [ , 1, 1, , 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , , , , , , , , , , , 1 ], [ 1, 1, 1, , , , , 1, 1, 1, , 1, 1, 1, 1, , , 1, 1, , 1, 1, , , , , 1 ], [ , 1, , , , , , , 1, 1, , , 1, 1, 1, , 1, , , 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , 1, , , , 1, , , , 1, , , 1, , , , 1, , , , , , , 1, 1 ], [ , 1, 1, 1, 1, 1, , , 1, 1, 1, , 1, 1, 1, 1, , , 1, 1, 1, 1, , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, , 1, , , 1, 1, 1, 1, , 1, 1, 1, 1, , , , 1, , 1, , 1, , , 1 ], [ 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , , 1, , , , , , , , , 1, 1, , , , , , , , , 1 ], , [ , 1, , 1, , 1, , 1, , 1, , 1, 1, 1, 1, 1, , , 1, , 1, , 1, , , , 1 ], [ , 1, , , 1, 1, , 1, 1, 1, , , 1, 1, 1, 1, 1, , 1, 1, 1, , 1, , , 1 ], [ 1, , , 1, , , , 1, 1, 1, , , , , 1, 1, , , , 1, , 1 ], [ 1, 1, , 1, 1, 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ 1, 1, , , , , , , , 1, , 1, , , , , , , , 1, , 1 ], [ , 1, , , , 1, , 1, 1, , , , 1, 1, , 1, , , , 1, 1, 1, , 1 ], , [ , 1, , , , , , 1, , , , , , , 1 ], [ , , , , , , , , 1, , , , 1, , 1, , , , , , , , , , , , 1 ] ], [ , [ , 1, 1, , 1, 1, 1, 1, , 1, 1, 1, , 1, 1, , 1, 1, , 1, 1, 1, 1, 1, 1, , 1 ], [ , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1 ], [ , 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, , 1 ], [ 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , 1, , , , , , , , 1, , , , , , 1, , , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, , , , 1, 1, 1, , 1, 1, 1, 1, , , 1, 1, 1, 1, , , 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1 ], [ 1, 1, , 1, , 1, , 1, , 1, 1, 1, 1, 1, 1, 1, , 1, 1, , , 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1 ], [ , 1, 1, , , , , 1, 1, 1, , , 1, , 1, 1, , , , 1, , 1, , , 1, 1 ], [ , , , , , , , 1, , , , 1, 1, 1, 1, 1, , 1, , , , , , , , 1 ], [ 1, 1, 1, 1, , 1, 1, 1, , 1, , 1, 1, 1, 1, , 1, , 1, , 1, 1, , , 1, , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , , , 1, 1, , 1, , 1, 1, 1, , 1, , 1, 1, , 1, 1, , 1, , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, , , , , , , , 1, , , , , 1, , 1 ], [ , 1, 1, 1, , 1, , 1, , 1, , , , 1, , 1, , , 1, , , , , , 1, 1 ], [ , 1, , , 1, 1, , 1, , 1, , 1, 1, 1, 1, 1, , 1, 1, , , 1, , , 1 ], [ 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, , , , , 1, , 1, , 1, , , , , , 1, , 1, , , , 1, 1 ] ], [ , [ , 1, , 1, , , , , , , , , , , , , , , 1, , , , 1 ], [ , , , , , , , , , 1, , 1, 1, 1, , 1, , , 1, , 1, 1 ], [ 1, 1, , , , , , , 1, , , , , , , 1, , , , , , 1 ], [ , 1, , , , , , , , , , 1, , , , , , , , , 1, 1 ], , [ , , , , , , , , , , , , , , , 1, , , , 1, , 1 ], [ , , 1, 1, , 1, , 1, , , , , , , , 1, , , , , , 1 ], [ , , , , , , , , , , , , , , , , , , , , 1, 1 ], [ , 1, , , , , , , , , , , , , 1 ], [ 1, , 1, 1, , , , 1, , , , , , , , , 1, , , 1, , , 1, 1 ], [ , 1, 1, , 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, , 1, 1, , 1 ], [ , 1, , , 1, 1, , , , , , 1, , 1, , 1, , , 1, , 1, 1 ], [ 1, 1, 1, 1, , 1, , 1, , 1, , 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1 ], [ , 1, 1, , , 1, , 1, , 1, 1, 1, , , 1, 1, 1, , 1, 1, 1, 1, , 1, 1 ], [ , , , , 1, , , 1, , , , , , , 1, , , , 1, 1 ], [ , 1, , , , , , , , , , 1, , 1, , 1, , , , , 1, , , , , 1 ], , [ 1, 1, , 1, , 1, , 1, 1, , , , , , 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, , 1, , , , , , 1, , , , , , 1, 1, , , , 1, 1, , , 1 ], [ , 1, 1, , 1, 1, , , , 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ , 1, 1, , , 1, , , , 1, , , , 1, 1 ], [ , , , , 1 ], [ , , , , , , , , , 1, , , 1 ], , [ , , 1, , 1, , , , , , , , , 1, , , , , , , , , , , , 1 ], [ , , , , , , , , , , , , , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , 1, 1, , 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , , 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, , , , , 1 ], [ , 1, , 1, , , , , , 1, , , , , 1, 1, , , , , 1, 1 ], [ , 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, , , 1, , 1, 1, 1 ], [ , 1, , , , 1, , , , , , , 1 ], [ , 1, , , 1, , , 1, , 1, , 1, 1, , 1, , , , , 1, , 1, , , , 1, 1 ], [ , 1, , , 1, , , 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , , , , , , , , , , , , , , , , , , , 1 ], [ , 1, 1, 1, , , , 1, 1, , , , , , 1, 1, 1, , 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , , 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1, 1 ], [ , 1, , , , 1, , , , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , , 1, , , , , , , , 1, , , , , , , , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ 1, 1, , 1, 1, 1, , 1, 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1 ], [ 1, 1, , , , , , , 1, 1, , , , , 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, , 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1 ], , [ , 1, 1, , , , , 1, , 1, , , , 1, 1, 1, , , 1, , , , , 1 ], [ , , , , , , , , , , , , , 1 ], [ , , , , , 1, , , , , , , , 1, 1, , , , , 1, , 1, , , 1, 1 ], [ , , , , , , , , , , , , , , 1 ] ], [ , [ , 1 ], , , , , , , , , , , , , , , , , , , , [ 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, , , 1, 1, 1, 1, 1 ], [ , 1, , 1, , 1, , , 1, 1, 1, , 1, 1, 1, 1, 1, , , 1, , , , 1, , 1, 1 ], [ , 1, , 1, , 1, , , 1, , , , , 1, , , , , , 1, 1 ], [ , 1, , 1, , , , , 1, , , , 1, , 1, 1, 1, 1, 1, 1, 1, 1, , 1 ], [ , 1, , , , , , , , , , , , , , , 1 ] ], [ , [ , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , 1, , , , , , , , , 1, 1, , , , 1 ], [ , , , , , , 1 ], [ , , 1 ], [ , 1, 1, , , 1, , 1, , 1, 1, , 1, 1, 1, , , , 1, 1, 1, , , , , 1 ], , [ , 1, , , , 1, , , , , , 1, , , 1, , , , 1, 1, , 1 ], [ , , , , , , , 1, , , , , , , , , 1 ], [ , 1, , , , 1, 1, , , , , , 1, 1, 1, , , , 1, , 1, 1 ], [ , , , , , , , 1, , 1, , , , , , , , , , 1 ], [ , 1, 1, , , , , , 1, 1, , , , 1, , , , , , , 1, , , 1 ], , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, , , 1, , , 1, , , , , 1, , 1, , 1, , 1, , , , , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, , , , , 1, 1, , 1, 1, , 1, , , 1, , 1 ], [ , , , , , , , , , , , , , , 1, , , , , , 1 ], , [ , , , , , , , , , 1, , , , , , 1, , , , , 1 ], [ , , 1, , , , , , , 1, , , 1, 1 ], [ , , , 1, , , , , 1, , , , , 1, , , , , , 1, , , , 1 ], [ 1, , 1, 1, , 1, 1, 1, 1, 1, , 1, , , , 1, 1, 1, , , 1, 1, , , , 1, 1 ], , [ 1, 1, , , , , , , , , , 1, , 1, , 1, , , 1 ], [ , , , , 1, , , , , , , , , , , , , , , , , , , 1 ], [ , , , , , , , , , , , , , , 1, , , , , 1, , 1 ], [ , , , , , , , , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, , , 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ , , 1, , , 1, , , , , , , , 1, , , , , , 1, , , , 1 ], [ 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, 1, , 1, , , , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, , 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , , 1, 1, 1, 1, , 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ 1, 1, , , , , , , 1, , 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1 ], [ 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1 ], [ 1, 1, 1, 1, , 1, , 1, , 1, 1, 1, 1, 1, , , , 1, 1, 1, 1, , 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, , 1, , , , , , 1, , 1, , , , , 1, 1, , , , , 1 ], [ 1, , 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , 1, 1, , 1, , 1, , , , 1, 1, 1, 1, 1, , , 1, 1, , 1, , 1 ], [ , 1, 1, 1, 1, , , , , 1, , 1, 1, 1, 1, 1, , , 1, 1, , , , 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, , , , , 1, , 1, , 1, , , 1, , , 1, 1, , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , , , , , , , , 1, , , , , 1, 1, , , 1, , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, , , 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , , , , 1, , 1, 1, , 1, 1, 1, 1, 1, , , 1, , 1, , 1 ], [ 1, 1, 1, , 1, 1, 1, 1, , , , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1 ], [ 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , 1, , 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1 ], [ , , 1, , , , , , , , , , 1, 1, 1, 1, 1, 1, 1, , 1, 1, , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , 1, 1, , , , , , 1, 1, 1, 1, 1, , , , 1, 1, 1, , 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, , , , 1, 1, 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1 ], [ , 1, 1, 1, , 1, , 1, 1, 1, 1, , , 1, 1, 1, , 1, 1, 1, 1, 1, , , 1, 1 ], [ 1, 1, , , , 1, , , 1, 1, 1, , 1, , 1, , 1, , 1, 1, 1, 1, 1, , 1, , 1 ], [ , 1, , , , , , , 1, , 1, , 1, 1, 1, 1, , , , , , , , , 1 ] ], [ , [ , , , , , , , , , , , , , 1, 1, , , , 1 ], [ , 1, , , , , , , , 1, , , 1, , , , , , 1, , , 1, , , , 1 ], , [ , 1, , , , 1, , 1, , 1, 1, , 1, 1, , , , , , , , 1 ], [ , , , , , , , , , , , , , , , , , , , 1 ], [ , , , , , , , , , 1 ], [ 1, 1, 1, , , 1, , , , , , , , , 1, 1, , , , , , , , , , 1 ], [ , 1, , , , , , , , , , , , , 1 ], [ , , , , , , , , , , , , , , , , , , , 1, , , 1 ], [ , , , , , , , , , 1 ], [ 1, 1, , , , , , 1, 1, 1, , 1, 1, , , , 1, 1, , 1, , 1, 1, 1, , 1 ], [ , 1, 1, 1, , 1, 1, , , 1, , 1, 1, 1, 1, , , , , , , 1, , 1 ], [ , 1, 1, 1, 1, , , 1, , 1, , , , 1, 1, 1, 1, , 1, 1, , 1 ], [ , 1, , , 1, 1, , 1, , , , 1, , 1, 1, , 1, , 1, , , 1, , , 1, , 1 ], [ , , , , , , , , , , , 1 ], [ , , , , , , , , , 1, , , , , , , , , , , , , 1 ], , [ 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , , , , , 1, 1, , 1, , , , , 1, , , 1, , 1 ], [ , 1, , , , 1, , , 1, , , , , , , , 1, , 1, , , 1 ], [ , , , , , , , , , , , , , 1, 1, , , , 1, , , 1 ], [ , , , , , 1, , , 1, , , , 1 ], [ , 1 ], , [ , 1 ], [ 1, , , , , , , , , , , , , , 1, , , , , 1 ] ], [ , [ , 1, , , , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, , 1, 1, , , 1 ], [ , , 1, , , , , , , , , 1 ], , , [ 1, , , 1, 1, , , , , , , , 1, 1, , 1, 1, , 1 ], , [ , , , , , , , , , , , , , , , , , , 1, , 1 ], , [ 1, , , 1, 1, , 1, 1, , , , , 1, , 1, , , , , 1, 1, , 1 ], , [ , 1, , , , , , , , 1, 1, 1, 1, 1, , 1, 1, , , , 1, 1 ], [ , , , , , , , , , , , , , , , , 1, , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , , , , , , , , , , , 1, , 1, , , 1 ], [ 1, , , , , , , , , , , , , , , , , , 1, , 1 ], , , [ , 1, , , , , , , , , , , , , , 1, , , , 1, 1 ], [ , , , , , , , , , 1, , , 1, , , , , , , , , , 1 ], [ , , , , , , , , , , , , , , , 1 ], [ , , , , , , , , , , , , , 1, 1, , , , , , 1 ], , [ , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , , 1, 1, , 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, , 1, 1 ], [ , 1, , , , , , , , 1 ], [ , , , , 1, , , 1, , , 1, 1, , , , , , , , , , 1, , , , 1 ], [ , 1, , 1, 1, , , 1, 1, 1, , , , 1, 1, 1, 1, , 1, 1, 1, 1, , 1 ], [ , , , , , , , 1 ], [ , 1, 1, , , , , 1, , 1, , , , , , 1, , , , , , 1, , 1, , 1 ], [ , 1, , , , , , 1, , , , 1, , , , , , , , , , 1 ], [ , , 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , , 1, , 1, 1, 1, 1, , 1 ], [ , 1, , , , , , , , 1 ], [ , 1, 1, , 1, , , , , , , , 1, , , , , , 1, , , 1, , 1, , 1 ], [ , 1, , 1, , 1, , 1, 1, 1, , 1, 1, 1, , 1, , , 1, 1, , 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , , 1, 1, , , , 1, 1, 1, , , , 1, 1, , , 1, 1 ], [ , , 1, 1, 1, 1, , 1, , 1, , 1, , 1, 1, 1, 1, , , , , 1, , 1, , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, , 1, 1, 1, , , 1, 1, , , , 1, , 1 ], [ , , , 1 ], , [ , 1, 1, , 1, , , 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , 1, , , , , , 1, , 1, , 1, , , , , , , 1, 1, , 1, 1 ], [ , , , , , , 1, , 1, 1, , 1, , 1, , , , , , , , , , 1 ], [ , 1, 1, , 1, , , , 1, , , , 1, 1, 1, , , , 1, , 1, 1, 1, , 1, 1 ], , [ , 1, 1, , , , , , , , , , , , , 1, , , 1, , , , , 1 ], [ , 1, , , , , , , , , , , , , , , , , , , , , , 1 ], [ , 1, 1, , , , , , , 1, , , , 1, , , , , 1, , , , , , , 1 ] ], [ , [ , 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1 ], [ , 1, 1, 1, 1, 1, , 1, , 1, 1, , , 1, 1, 1, 1, , 1, , , , , 1, 1, 1 ], [ , , 1, 1, , 1, , 1, 1, , , , 1, 1, 1, 1, , , 1, , 1, 1, 1, 1, , 1 ], [ , 1, , 1, , , , , , , , 1, , 1, , 1, , , , , , , , , , 1 ], [ , , 1, , 1, , , 1, , , , , 1, 1, , , 1, , 1, 1, 1, 1 ], [ , 1 ], [ , 1, 1, , 1, , 1, 1, , 1, , , 1, 1, 1, , , , 1, , , 1, , 1 ], [ 1, 1, , 1, 1, 1, , , , , , , , , , , , , 1, , 1, 1, 1 ], [ , 1, 1, , , , , , , 1, , , 1, , 1, , 1, , 1, 1, , , 1, , , 1 ], [ , , 1, , , , , , , , , , , , , , , , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, , 1, , , , , 1, 1, 1, , , 1, , 1, , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, , , 1, 1, 1, , 1, , 1, 1, 1, , , 1, 1, 1, 1, , , , 1, 1 ], [ , , , 1, 1, , , 1, , 1, , 1, , 1, 1, 1, 1, , 1, , , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , , , , , , , , , , , , , , , , , 1 ], [ , 1, 1, , 1, 1, , 1, , 1, , , , 1, 1, , , 1, 1, , 1, 1, , 1 ], [ , 1, 1, 1, 1, 1, , , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, , , 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ , 1, 1, , 1, , , 1, , , 1, , 1, 1, 1, 1, 1, , 1, , 1, 1 ], [ , , , , , 1, , , , 1, , , , , 1, 1, , , , 1 ], [ , 1, , 1, 1, 1, , 1, , , 1, 1, 1, , , 1, , , 1, , 1, , , 1 ], [ , , 1, , , , , , , , , 1, , 1, , , , , 1, , 1 ], [ , 1, 1, , , , , , , , 1, 1, 1, , , , , , , , 1, , , , , 1 ], [ , , , , , , , , 1, , , , , 1, , , 1 ] ], [ , [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1, , , , , , , , , 1, 1 ], [ , , , , , , , , 1, , , , 1, , 1, , 1 ], [ , 1, , , 1, 1, , 1, , , , 1, , , , , , , , 1 ], [ , 1, , 1, , 1, , , , 1, 1, , 1, , 1, , , , 1, 1, 1, 1, 1, , , 1 ], , [ , 1, , , , , , , , 1, , , 1, 1, , , 1, , 1, 1, , 1, , 1 ], [ , 1, , , 1, , , , , , , , 1, , , , , , , 1 ], [ 1, 1, , , , , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1 ], , [ , 1, , , , , , 1, , 1, , 1, 1, 1, 1, 1, , , 1, , 1, 1, , , , 1 ], [ , 1, 1, , , 1, , 1, , 1, , , 1, 1, 1, 1, , , 1, , , 1, , , , 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , , 1, , 1 ], [ , 1, , , 1, 1, , 1, 1, , , 1, 1, , 1, 1, , 1, , 1, , 1 ], [ 1, , 1, , , , , 1, , 1, , 1, 1, 1, 1, , , , , 1, 1, , , , 1, 1 ], [ , 1, 1, , , , , 1, 1, , , 1, , 1, 1, 1, 1, , , , , , , , , , 1 ], , [ , 1, 1, , , 1, , , , 1, , 1, 1, 1, 1, 1, , , , 1, , , , 1, , 1 ], [ , , , 1, 1, , , 1, , , , , 1, , 1, 1, 1, , 1, 1, , , , , , 1 ], [ , 1, , , , , , , , , , , 1, , , , 1, , , , , , , 1, , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, , 1, 1, 1, 1 ], [ , 1, , , , , , , , , , , , , , , , , , , 1 ], [ , 1, , , , , , 1, , , , , 1, , 1, , , 1, 1, , 1, 1, , 1 ], [ , 1, , , , , , 1, , , , , 1, 1, , , , , , , , 1, , , , 1 ], [ , , , , , , , , , , , , , , , , , , 1, , , 1, , , , , 1 ], [ , , , , , , , 1, , , , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , 1, , 1, , , , , , , 1, , , , , , , , 1, , , 1 ], [ , 1, , , , , , , 1 ], [ , , , , , , , , , , 1 ], [ , 1, , , , , , 1, 1, , , , , , 1 ], , [ , 1, 1, , , , , , 1, , , , , 1, 1, , , , 1 ], [ 1, , 1, , 1, , , , , 1, , , , , 1, , , , , , , , , 1, 1 ], [ , 1, 1, , , , , , , , , 1, 1, 1, 1, , , , 1, , , , , 1, , , 1 ], , [ , 1, 1, , 1, , , 1, 1, , , 1, , , 1, 1, 1, , 1, , 1, 1, 1, , , , 1 ], [ , , , , , 1, , , , , 1, , , 1, 1, , , 1, , 1, , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , 1, 1, , 1, , , , 1, , , , , , , , 1 ], [ , , , 1, , , , , 1, , , , , 1, , 1, , 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , , , , 1 ], [ , 1, , , , , , 1, , , , , , , 1, 1, 1, , , 1 ], [ , 1, , , , , , , , , , 1, 1, 1, , , , , 1, , , 1 ], [ , , , , , 1, , 1, , , , , 1, 1, 1, , 1, 1, , 1, 1, 1, , , 1, 1 ], [ 1, 1, , , , , , , 1, , , , , 1, 1, , , , , , , , , , , 1 ], , [ , 1 ], [ , , , , , , , , , , , , , , , , , , , , , , , , 1 ], [ , , 1, , , , , 1, , , 1, , , , 1, , 1 ], [ , 1, , , , , , , , , 1 ] ] ];
                    function isValidLang(lang) {
                        var array = langs;
                        while (lang.length < 3) lang += "`";
                        for (var _i32 = 0; _i32 <= lang.length - 1; _i32++) {
                            var index = lang.charCodeAt(_i32) - 96;
                            array = array[index];
                            if (!array) return false;
                        }
                        return true;
                    }
                    function _validLangs(langArray) {
                        langArray = Array.isArray(langArray) ? langArray : langs;
                        var codes = [];
                        langArray.forEach((function(lang, index) {
                            var _char3 = String.fromCharCode(index + 96).replace("`", "");
                            if (Array.isArray(lang)) codes = codes.concat(_validLangs(lang).map((function(newLang) {
                                return _char3 + newLang;
                            }))); else codes.push(_char3);
                        }));
                        return codes;
                    }
                    var valid_langs_default = isValidLang;
                    var SerialVirtualNode = function(_abstract_virtual_nod2) {
                        function SerialVirtualNode(serialNode) {
                            var _this6;
                            _classCallCheck(this, SerialVirtualNode);
                            _this6 = _callSuper(this, SerialVirtualNode);
                            _this6._props = normaliseProps(serialNode);
                            _this6._attrs = normaliseAttrs(serialNode);
                            return _this6;
                        }
                        _inherits(SerialVirtualNode, _abstract_virtual_nod2);
                        return _createClass(SerialVirtualNode, [ {
                            key: "props",
                            get: function() {
                                return this._props;
                            }
                        }, {
                            key: "attr",
                            value: function(attrName) {
                                var _this$_attrs$attrName;
                                return null !== (_this$_attrs$attrName = this._attrs[attrName]) && void 0 !== _this$_attrs$attrName ? _this$_attrs$attrName : null;
                            }
                        }, {
                            key: "hasAttr",
                            value: function(attrName) {
                                return void 0 !== this._attrs[attrName];
                            }
                        }, {
                            key: "attrNames",
                            get: function() {
                                return Object.keys(this._attrs);
                            }
                        } ]);
                    }(abstract_virtual_node_default);
                    var nodeNamesToTypes = {
                        "#cdata-section": 2,
                        "#text": 3,
                        "#comment": 8,
                        "#document": 9,
                        "#document-fragment": 11
                    };
                    var nodeTypeToName = {};
                    var nodeNames = Object.keys(nodeNamesToTypes);
                    nodeNames.forEach((function(nodeName2) {
                        nodeTypeToName[nodeNamesToTypes[nodeName2]] = nodeName2;
                    }));
                    function normaliseProps(serialNode) {
                        var _serialNode$nodeName, _ref83, _serialNode$nodeType;
                        var nodeName2 = null !== (_serialNode$nodeName = serialNode.nodeName) && void 0 !== _serialNode$nodeName ? _serialNode$nodeName : nodeTypeToName[serialNode.nodeType];
                        var nodeType = null !== (_ref83 = null !== (_serialNode$nodeType = serialNode.nodeType) && void 0 !== _serialNode$nodeType ? _serialNode$nodeType : nodeNamesToTypes[serialNode.nodeName]) && void 0 !== _ref83 ? _ref83 : 1;
                        assert_default("number" === typeof nodeType, "nodeType has to be a number, got '".concat(nodeType, "'"));
                        assert_default("string" === typeof nodeName2, "nodeName has to be a string, got '".concat(nodeName2, "'"));
                        nodeName2 = nodeName2.toLowerCase();
                        var type2 = null;
                        if ("input" === nodeName2) {
                            type2 = (serialNode.type || serialNode.attributes && serialNode.attributes.type || "").toLowerCase();
                            if (!valid_input_type_default().includes(type2)) type2 = "text";
                        }
                        var props = _extends({}, serialNode, {
                            nodeType,
                            nodeName: nodeName2
                        });
                        if (type2) props.type = type2;
                        delete props.attributes;
                        return Object.freeze(props);
                    }
                    function normaliseAttrs(_ref84) {
                        var _ref84$attributes = _ref84.attributes, attributes2 = void 0 === _ref84$attributes ? {} : _ref84$attributes;
                        var attrMap = {
                            htmlFor: "for",
                            className: "class"
                        };
                        return Object.keys(attributes2).reduce((function(attrs, attrName) {
                            var value = attributes2[attrName];
                            assert_default("object" !== _typeof(value) || null === value, "expects attributes not to be an object, '".concat(attrName, "' was"));
                            if (void 0 !== value) {
                                var mappedName = attrMap[attrName] || attrName;
                                attrs[mappedName] = null !== value ? String(value) : null;
                            }
                            return attrs;
                        }), {});
                    }
                    var serial_virtual_node_default = SerialVirtualNode;
                    function cleanup(resolve, reject) {
                        resolve = resolve || function() {};
                        reject = reject || axe.log;
                        if (!axe._audit) throw new Error("No audit configured");
                        var q = axe.utils.queue();
                        var cleanupErrors = [];
                        Object.keys(axe.plugins).forEach((function(key) {
                            q.defer((function(res) {
                                var rej = function(err2) {
                                    cleanupErrors.push(err2);
                                    res();
                                };
                                try {
                                    axe.plugins[key].cleanup(res, rej);
                                } catch (err2) {
                                    rej(err2);
                                }
                            }));
                        }));
                        var flattenedTree = axe.utils.getFlattenedTree(document.body);
                        axe.utils.querySelectorAll(flattenedTree, "iframe, frame").forEach((function(node) {
                            q.defer((function(res, rej) {
                                return axe.utils.sendCommandToFrame(node.actualNode, {
                                    command: "cleanup-plugin"
                                }, res, rej);
                            }));
                        }));
                        q.then((function(results) {
                            if (0 === cleanupErrors.length) resolve(results); else reject(cleanupErrors);
                        }))["catch"](reject);
                    }
                    var cleanup_default = cleanup;
                    var reporters = {};
                    var defaultReporter;
                    function hasReporter(reporterName) {
                        return reporters.hasOwnProperty(reporterName);
                    }
                    function getReporter(reporter) {
                        if ("string" === typeof reporter && reporters[reporter]) return reporters[reporter];
                        if ("function" === typeof reporter) return reporter;
                        return defaultReporter;
                    }
                    function addReporter(name, cb, isDefault) {
                        reporters[name] = cb;
                        if (isDefault) defaultReporter = cb;
                    }
                    function configure(spec) {
                        var audit = axe._audit;
                        if (!audit) throw new Error("No audit configured");
                        if (spec.axeVersion || spec.ver) {
                            var specVersion = spec.axeVersion || spec.ver;
                            if (!/^\d+\.\d+\.\d+(-canary)?/.test(specVersion)) throw new Error("Invalid configured version ".concat(specVersion));
                            var _specVersion$split = specVersion.split("-"), _specVersion$split2 = _slicedToArray(_specVersion$split, 2), version = _specVersion$split2[0], canary = _specVersion$split2[1];
                            var _version$split$map = version.split(".").map(Number), _version$split$map2 = _slicedToArray(_version$split$map, 3), major = _version$split$map2[0], minor = _version$split$map2[1], patch = _version$split$map2[2];
                            var _axe$version$split = axe.version.split("-"), _axe$version$split2 = _slicedToArray(_axe$version$split, 2), axeVersion = _axe$version$split2[0], axeCanary = _axe$version$split2[1];
                            var _axeVersion$split$map = axeVersion.split(".").map(Number), _axeVersion$split$map2 = _slicedToArray(_axeVersion$split$map, 3), axeMajor = _axeVersion$split$map2[0], axeMinor = _axeVersion$split$map2[1], axePatch = _axeVersion$split$map2[2];
                            if (major !== axeMajor || axeMinor < minor || axeMinor === minor && axePatch < patch || major === axeMajor && minor === axeMinor && patch === axePatch && canary && canary !== axeCanary) throw new Error("Configured version ".concat(specVersion, " is not compatible with current axe version ").concat(axe.version));
                        }
                        if (spec.reporter && ("function" === typeof spec.reporter || hasReporter(spec.reporter))) audit.reporter = spec.reporter;
                        if (spec.checks) {
                            if (!Array.isArray(spec.checks)) throw new TypeError("Checks property must be an array");
                            spec.checks.forEach((function(check) {
                                if (!check.id) throw new TypeError("Configured check ".concat(JSON.stringify(check), " is invalid. Checks must be an object with at least an id property"));
                                audit.addCheck(check);
                            }));
                        }
                        var modifiedRules = [];
                        if (spec.rules) {
                            if (!Array.isArray(spec.rules)) throw new TypeError("Rules property must be an array");
                            spec.rules.forEach((function(rule) {
                                if (!rule.id) throw new TypeError("Configured rule ".concat(JSON.stringify(rule), " is invalid. Rules must be an object with at least an id property"));
                                modifiedRules.push(rule.id);
                                audit.addRule(rule);
                            }));
                        }
                        if (spec.disableOtherRules) audit.rules.forEach((function(rule) {
                            if (false === modifiedRules.includes(rule.id)) rule.enabled = false;
                        }));
                        if ("undefined" !== typeof spec.branding) audit.setBranding(spec.branding); else audit._constructHelpUrls();
                        if (spec.tagExclude) audit.tagExclude = spec.tagExclude;
                        if (spec.locale) audit.applyLocale(spec.locale);
                        if (spec.standards) configureStandards(spec.standards);
                        if (spec.noHtml) audit.noHtml = true;
                        if (spec.allowedOrigins) {
                            if (!Array.isArray(spec.allowedOrigins)) throw new TypeError("Allowed origins property must be an array");
                            if (spec.allowedOrigins.includes("*")) throw new Error('"*" is not allowed. Use "'.concat(constants_default.allOrigins, '" instead'));
                            audit.setAllowedOrigins(spec.allowedOrigins);
                        }
                    }
                    var configure_default = configure;
                    function frameMessenger2(frameHandler) {
                        _respondable.updateMessenger(frameHandler);
                    }
                    function getRules(tags) {
                        tags = tags || [];
                        var matchingRules = !tags.length ? axe._audit.rules : axe._audit.rules.filter((function(item) {
                            return !!tags.filter((function(tag) {
                                return -1 !== item.tags.indexOf(tag);
                            })).length;
                        }));
                        var ruleData = axe._audit.data.rules || {};
                        return matchingRules.map((function(matchingRule) {
                            var rd = ruleData[matchingRule.id] || {};
                            return {
                                ruleId: matchingRule.id,
                                description: rd.description,
                                help: rd.help,
                                helpUrl: rd.helpUrl,
                                tags: matchingRule.tags,
                                actIds: matchingRule.actIds
                            };
                        }));
                    }
                    var get_rules_default = getRules;
                    function hiddenContentEvaluate(node, options, virtualNode) {
                        var allowlist = [ "SCRIPT", "HEAD", "TITLE", "NOSCRIPT", "STYLE", "TEMPLATE" ];
                        if (!allowlist.includes(node.nodeName.toUpperCase()) && has_content_virtual_default(virtualNode)) {
                            var styles = window.getComputedStyle(node);
                            if ("none" === styles.getPropertyValue("display")) return; else if ("hidden" === styles.getPropertyValue("visibility")) {
                                var parent = get_composed_parent_default(node);
                                var parentStyle = parent && window.getComputedStyle(parent);
                                if (!parentStyle || "hidden" !== parentStyle.getPropertyValue("visibility")) return;
                            }
                        }
                        return true;
                    }
                    var hidden_content_evaluate_default = hiddenContentEvaluate;
                    var table_exports = {};
                    __export(table_exports, {
                        getAllCells: function() {
                            return get_all_cells_default;
                        },
                        getCellPosition: function() {
                            return get_cell_position_default;
                        },
                        getHeaders: function() {
                            return get_headers_default;
                        },
                        getScope: function() {
                            return _getScope;
                        },
                        isColumnHeader: function() {
                            return is_column_header_default;
                        },
                        isDataCell: function() {
                            return is_data_cell_default;
                        },
                        isDataTable: function() {
                            return is_data_table_default;
                        },
                        isHeader: function() {
                            return is_header_default;
                        },
                        isRowHeader: function() {
                            return is_row_header_default;
                        },
                        toArray: function() {
                            return to_grid_default;
                        },
                        toGrid: function() {
                            return to_grid_default;
                        },
                        traverse: function() {
                            return traverse_default;
                        }
                    });
                    function getAllCells(tableElm) {
                        var rowIndex, cellIndex, rowLength, cellLength;
                        var cells = [];
                        for (rowIndex = 0, rowLength = tableElm.rows.length; rowIndex < rowLength; rowIndex++) for (cellIndex = 0, 
                        cellLength = tableElm.rows[rowIndex].cells.length; cellIndex < cellLength; cellIndex++) cells.push(tableElm.rows[rowIndex].cells[cellIndex]);
                        return cells;
                    }
                    var get_all_cells_default = getAllCells;
                    function traverseForHeaders(headerType, position, tableGrid) {
                        var property = "row" === headerType ? "_rowHeaders" : "_colHeaders";
                        var predicate = "row" === headerType ? is_row_header_default : is_column_header_default;
                        var startCell = tableGrid[position.y][position.x];
                        var colspan = startCell.colSpan - 1;
                        var rowspanAttr = startCell.getAttribute("rowspan");
                        var rowspanValue = 0 === parseInt(rowspanAttr) || 0 === startCell.rowspan ? tableGrid.length : startCell.rowSpan;
                        var rowspan = rowspanValue - 1;
                        var rowStart = position.y + rowspan;
                        var colStart = position.x + colspan;
                        var rowEnd = "row" === headerType ? position.y : 0;
                        var colEnd = "row" === headerType ? 0 : position.x;
                        var headers;
                        var cells = [];
                        for (var row = rowStart; row >= rowEnd && !headers; row--) for (var col = colStart; col >= colEnd; col--) {
                            var cell = tableGrid[row] ? tableGrid[row][col] : void 0;
                            if (!cell) continue;
                            var vNode = axe.utils.getNodeFromTree(cell);
                            if (vNode[property]) {
                                headers = vNode[property];
                                break;
                            }
                            cells.push(cell);
                        }
                        headers = (headers || []).concat(cells.filter(predicate));
                        cells.forEach((function(tableCell) {
                            var vNode = axe.utils.getNodeFromTree(tableCell);
                            vNode[property] = headers;
                        }));
                        return headers;
                    }
                    function getHeaders(cell, tableGrid) {
                        if (cell.getAttribute("headers")) {
                            var headers = idrefs_default(cell, "headers");
                            if (headers.filter((function(header) {
                                return header;
                            })).length) return headers;
                        }
                        if (!tableGrid) tableGrid = to_grid_default(find_up_default(cell, "table"));
                        var position = get_cell_position_default(cell, tableGrid);
                        var rowHeaders = traverseForHeaders("row", position, tableGrid);
                        var colHeaders = traverseForHeaders("col", position, tableGrid);
                        return [].concat(rowHeaders, colHeaders).reverse();
                    }
                    var get_headers_default = getHeaders;
                    function isDataCell(cell) {
                        if (!cell.children.length && !cell.textContent.trim()) return false;
                        var role = cell.getAttribute("role");
                        if (is_valid_role_default(role)) return [ "cell", "gridcell" ].includes(role); else return "TD" === cell.nodeName.toUpperCase();
                    }
                    var is_data_cell_default = isDataCell;
                    function isDataTable(node) {
                        var role = (node.getAttribute("role") || "").toLowerCase();
                        if (("presentation" === role || "none" === role) && !_isFocusable(node)) return false;
                        if ("true" === node.getAttribute("contenteditable") || find_up_default(node, '[contenteditable="true"]')) return true;
                        if ("grid" === role || "treegrid" === role || "table" === role) return true;
                        if ("landmark" === get_role_type_default(role)) return true;
                        if ("0" === node.getAttribute("datatable")) return false;
                        if (node.getAttribute("summary")) return true;
                        if (node.tHead || node.tFoot || node.caption) return true;
                        for (var childIndex = 0, childLength = node.children.length; childIndex < childLength; childIndex++) if ("COLGROUP" === node.children[childIndex].nodeName.toUpperCase()) return true;
                        var cells = 0;
                        var rowLength = node.rows.length;
                        var row, cell;
                        var hasBorder = false;
                        for (var rowIndex = 0; rowIndex < rowLength; rowIndex++) {
                            row = node.rows[rowIndex];
                            for (var cellIndex = 0, cellLength = row.cells.length; cellIndex < cellLength; cellIndex++) {
                                cell = row.cells[cellIndex];
                                if ("TH" === cell.nodeName.toUpperCase()) return true;
                                if (!hasBorder && (cell.offsetWidth !== cell.clientWidth || cell.offsetHeight !== cell.clientHeight)) hasBorder = true;
                                if (cell.getAttribute("scope") || cell.getAttribute("headers") || cell.getAttribute("abbr")) return true;
                                if ([ "columnheader", "rowheader" ].includes((cell.getAttribute("role") || "").toLowerCase())) return true;
                                if (1 === cell.children.length && "ABBR" === cell.children[0].nodeName.toUpperCase()) return true;
                                cells++;
                            }
                        }
                        if (node.getElementsByTagName("table").length) return false;
                        if (rowLength < 2) return false;
                        var sampleRow = node.rows[Math.ceil(rowLength / 2)];
                        if (1 === sampleRow.cells.length && 1 === sampleRow.cells[0].colSpan) return false;
                        if (sampleRow.cells.length >= 5) return true;
                        if (hasBorder) return true;
                        var bgColor, bgImage;
                        for (var _rowIndex = 0; _rowIndex < rowLength; _rowIndex++) {
                            row = node.rows[_rowIndex];
                            if (bgColor && bgColor !== window.getComputedStyle(row).getPropertyValue("background-color")) return true; else bgColor = window.getComputedStyle(row).getPropertyValue("background-color");
                            if (bgImage && bgImage !== window.getComputedStyle(row).getPropertyValue("background-image")) return true; else bgImage = window.getComputedStyle(row).getPropertyValue("background-image");
                        }
                        if (rowLength >= 20) return true;
                        if (get_element_coordinates_default(node).width > .95 * get_viewport_size_default(window).width) return false;
                        if (cells < 10) return false;
                        if (node.querySelector("object, embed, iframe, applet")) return false;
                        return true;
                    }
                    var is_data_table_default = isDataTable;
                    function isHeader(cell) {
                        if (is_column_header_default(cell) || is_row_header_default(cell)) return true;
                        if (cell.getAttribute("id")) {
                            var _id2 = escape_selector_default(cell.getAttribute("id"));
                            return !!document.querySelector('[headers~="'.concat(_id2, '"]'));
                        }
                        return false;
                    }
                    var is_header_default = isHeader;
                    function traverseTable(dir, position, tableGrid, callback) {
                        var result;
                        var cell = tableGrid[position.y] ? tableGrid[position.y][position.x] : void 0;
                        if (!cell) return [];
                        if ("function" === typeof callback) {
                            result = callback(cell, position, tableGrid);
                            if (true === result) return [ cell ];
                        }
                        result = traverseTable(dir, {
                            x: position.x + dir.x,
                            y: position.y + dir.y
                        }, tableGrid, callback);
                        result.unshift(cell);
                        return result;
                    }
                    function traverse(dir, startPos, tableGrid, callback) {
                        if (Array.isArray(startPos)) {
                            callback = tableGrid;
                            tableGrid = startPos;
                            startPos = {
                                x: 0,
                                y: 0
                            };
                        }
                        if ("string" === typeof dir) switch (dir) {
                          case "left":
                            dir = {
                                x: -1,
                                y: 0
                            };
                            break;

                          case "up":
                            dir = {
                                x: 0,
                                y: -1
                            };
                            break;

                          case "right":
                            dir = {
                                x: 1,
                                y: 0
                            };
                            break;

                          case "down":
                            dir = {
                                x: 0,
                                y: 1
                            };
                            break;
                        }
                        return traverseTable(dir, {
                            x: startPos.x + dir.x,
                            y: startPos.y + dir.y
                        }, tableGrid, callback);
                    }
                    var traverse_default = traverse;
                    function thHasDataCellsEvaluate(node) {
                        var cells = get_all_cells_default(node);
                        var checkResult = this;
                        var reffedHeaders = [];
                        cells.forEach((function(cell) {
                            var headers2 = cell.getAttribute("headers");
                            if (headers2) reffedHeaders = reffedHeaders.concat(headers2.split(/\s+/));
                            var ariaLabel = cell.getAttribute("aria-labelledby");
                            if (ariaLabel) reffedHeaders = reffedHeaders.concat(ariaLabel.split(/\s+/));
                        }));
                        var headers = cells.filter((function(cell) {
                            if ("" === sanitize_default(cell.textContent)) return false;
                            return "TH" === cell.nodeName.toUpperCase() || -1 !== [ "rowheader", "columnheader" ].indexOf(cell.getAttribute("role"));
                        }));
                        var tableGrid = to_grid_default(node);
                        var out = true;
                        headers.forEach((function(header) {
                            if (header.getAttribute("id") && reffedHeaders.includes(header.getAttribute("id"))) return;
                            var pos = get_cell_position_default(header, tableGrid);
                            var hasCell = false;
                            if (is_column_header_default(header)) hasCell = traverse_default("down", pos, tableGrid).find((function(cell) {
                                return !is_column_header_default(cell) && get_headers_default(cell, tableGrid).includes(header);
                            }));
                            if (!hasCell && is_row_header_default(header)) hasCell = traverse_default("right", pos, tableGrid).find((function(cell) {
                                return !is_row_header_default(cell) && get_headers_default(cell, tableGrid).includes(header);
                            }));
                            if (!hasCell) checkResult.relatedNodes(header);
                            out = out && hasCell;
                        }));
                        return out ? true : void 0;
                    }
                    var th_has_data_cells_evaluate_default = thHasDataCellsEvaluate;
                    function tdHeadersAttrEvaluate(node) {
                        var cells = [];
                        var reviewCells = [];
                        var badCells = [];
                        for (var rowIndex = 0; rowIndex < node.rows.length; rowIndex++) {
                            var row = node.rows[rowIndex];
                            for (var cellIndex = 0; cellIndex < row.cells.length; cellIndex++) cells.push(row.cells[cellIndex]);
                        }
                        var ids = cells.filter((function(cell) {
                            return cell.getAttribute("id");
                        })).map((function(cell) {
                            return cell.getAttribute("id");
                        }));
                        cells.forEach((function(cell) {
                            var isSelf = false;
                            var notOfTable = false;
                            if (!cell.hasAttribute("headers") || !_isVisibleToScreenReaders(cell)) return;
                            var headersAttr = cell.getAttribute("headers").trim();
                            if (!headersAttr) return reviewCells.push(cell);
                            var headers = token_list_default(headersAttr);
                            if (0 !== headers.length) {
                                if (cell.getAttribute("id")) isSelf = -1 !== headers.indexOf(cell.getAttribute("id").trim());
                                notOfTable = headers.some((function(header) {
                                    return !ids.includes(header);
                                }));
                                if (isSelf || notOfTable) badCells.push(cell);
                            }
                        }));
                        if (badCells.length > 0) {
                            this.relatedNodes(badCells);
                            return false;
                        }
                        if (reviewCells.length) {
                            this.relatedNodes(reviewCells);
                            return;
                        }
                        return true;
                    }
                    var aria_exports = {};
                    __export(aria_exports, {
                        allowedAttr: function() {
                            return allowed_attr_default;
                        },
                        arialabelText: function() {
                            return _arialabelText;
                        },
                        arialabelledbyText: function() {
                            return arialabelledby_text_default;
                        },
                        getAccessibleRefs: function() {
                            return get_accessible_refs_default;
                        },
                        getElementUnallowedRoles: function() {
                            return get_element_unallowed_roles_default;
                        },
                        getExplicitRole: function() {
                            return get_explicit_role_default;
                        },
                        getImplicitRole: function() {
                            return implicit_role_default;
                        },
                        getOwnedVirtual: function() {
                            return get_owned_virtual_default;
                        },
                        getRole: function() {
                            return get_role_default;
                        },
                        getRoleType: function() {
                            return get_role_type_default;
                        },
                        getRolesByType: function() {
                            return get_roles_by_type_default;
                        },
                        getRolesWithNameFromContents: function() {
                            return get_roles_with_name_from_contents_default;
                        },
                        implicitNodes: function() {
                            return implicit_nodes_default;
                        },
                        implicitRole: function() {
                            return implicit_role_default;
                        },
                        isAccessibleRef: function() {
                            return is_accessible_ref_default;
                        },
                        isAriaRoleAllowedOnElement: function() {
                            return is_aria_role_allowed_on_element_default;
                        },
                        isComboboxPopup: function() {
                            return _isComboboxPopup;
                        },
                        isUnsupportedRole: function() {
                            return is_unsupported_role_default;
                        },
                        isValidRole: function() {
                            return is_valid_role_default;
                        },
                        label: function() {
                            return label_default2;
                        },
                        labelVirtual: function() {
                            return label_virtual_default;
                        },
                        lookupTable: function() {
                            return lookup_table_default;
                        },
                        namedFromContents: function() {
                            return named_from_contents_default;
                        },
                        requiredAttr: function() {
                            return required_attr_default;
                        },
                        requiredContext: function() {
                            return required_context_default;
                        },
                        requiredOwned: function() {
                            return required_owned_default;
                        },
                        validateAttr: function() {
                            return validate_attr_default;
                        },
                        validateAttrValue: function() {
                            return validate_attr_value_default;
                        }
                    });
                    function allowedAttr(role) {
                        var roleDef = standards_default.ariaRoles[role];
                        var attrs = _toConsumableArray(get_global_aria_attrs_default());
                        if (!roleDef) return attrs;
                        if (roleDef.allowedAttrs) attrs.push.apply(attrs, _toConsumableArray(roleDef.allowedAttrs));
                        if (roleDef.requiredAttrs) attrs.push.apply(attrs, _toConsumableArray(roleDef.requiredAttrs));
                        return attrs;
                    }
                    var allowed_attr_default = allowedAttr;
                    var idRefsRegex = /^idrefs?$/;
                    function cacheIdRefs(node, idRefs, refAttrs) {
                        if (node.hasAttribute) {
                            if ("LABEL" === node.nodeName.toUpperCase() && node.hasAttribute("for")) {
                                var _id3 = node.getAttribute("for");
                                if (!idRefs.has(_id3)) idRefs.set(_id3, [ node ]); else idRefs.get(_id3).push(node);
                            }
                            for (var _i33 = 0; _i33 < refAttrs.length; ++_i33) {
                                var attr = refAttrs[_i33];
                                var attrValue = sanitize_default(node.getAttribute(attr) || "");
                                if (!attrValue) continue;
                                var _step14, _iterator14 = _createForOfIteratorHelper(token_list_default(attrValue));
                                try {
                                    for (_iterator14.s(); !(_step14 = _iterator14.n()).done; ) {
                                        var token = _step14.value;
                                        if (!idRefs.has(token)) idRefs.set(token, [ node ]); else idRefs.get(token).push(node);
                                    }
                                } catch (err) {
                                    _iterator14.e(err);
                                } finally {
                                    _iterator14.f();
                                }
                            }
                        }
                        for (var _i34 = 0; _i34 < node.childNodes.length; _i34++) if (1 === node.childNodes[_i34].nodeType) cacheIdRefs(node.childNodes[_i34], idRefs, refAttrs);
                    }
                    function getAccessibleRefs(node) {
                        var _idRefs$get;
                        node = node.actualNode || node;
                        var root = get_root_node_default2(node);
                        root = root.documentElement || root;
                        var idRefsByRoot = cache_default.get("idRefsByRoot", (function() {
                            return new Map;
                        }));
                        var idRefs = idRefsByRoot.get(root);
                        if (!idRefs) {
                            idRefs = new Map;
                            idRefsByRoot.set(root, idRefs);
                            var refAttrs = Object.keys(standards_default.ariaAttrs).filter((function(attr) {
                                var type2 = standards_default.ariaAttrs[attr].type;
                                return idRefsRegex.test(type2);
                            }));
                            cacheIdRefs(root, idRefs, refAttrs);
                        }
                        return null !== (_idRefs$get = idRefs.get(node.id)) && void 0 !== _idRefs$get ? _idRefs$get : [];
                    }
                    var get_accessible_refs_default = getAccessibleRefs;
                    function isAriaRoleAllowedOnElement(node, role) {
                        var vNode = node instanceof abstract_virtual_node_default ? node : get_node_from_tree_default(node);
                        var implicitRole3 = implicit_role_default(vNode);
                        var spec = get_element_spec_default(vNode);
                        if (Array.isArray(spec.allowedRoles)) return spec.allowedRoles.includes(role);
                        if (role === implicitRole3) return false;
                        return !!spec.allowedRoles;
                    }
                    var is_aria_role_allowed_on_element_default = isAriaRoleAllowedOnElement;
                    var dpubRoles2 = [ "doc-backlink", "doc-biblioentry", "doc-biblioref", "doc-cover", "doc-endnote", "doc-glossref", "doc-noteref" ];
                    var landmarkRoles = {
                        header: "banner",
                        footer: "contentinfo"
                    };
                    function getRoleSegments(vNode) {
                        var roles = [];
                        if (!vNode) return roles;
                        if (vNode.hasAttr("role")) {
                            var nodeRoles = token_list_default(vNode.attr("role").toLowerCase());
                            roles = roles.concat(nodeRoles);
                        }
                        return roles.filter((function(role) {
                            return is_valid_role_default(role);
                        }));
                    }
                    function getElementUnallowedRoles(node) {
                        var allowImplicit = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : true;
                        var _nodeLookup21 = _nodeLookup(node), vNode = _nodeLookup21.vNode;
                        if (!is_html_element_default(vNode)) return [];
                        var nodeName2 = vNode.props.nodeName;
                        var implicitRole3 = implicit_role_default(vNode) || landmarkRoles[nodeName2];
                        var roleSegments = getRoleSegments(vNode);
                        return roleSegments.filter((function(role) {
                            return !roleIsAllowed(role, vNode, allowImplicit, implicitRole3);
                        }));
                    }
                    function roleIsAllowed(role, vNode, allowImplicit, implicitRole3) {
                        if (allowImplicit && role === implicitRole3) return true;
                        if (dpubRoles2.includes(role) && get_role_type_default(role) !== implicitRole3) return false;
                        return is_aria_role_allowed_on_element_default(vNode, role);
                    }
                    var get_element_unallowed_roles_default = getElementUnallowedRoles;
                    function getAriaRolesByType(type2) {
                        return Object.keys(standards_default.ariaRoles).filter((function(roleName) {
                            return standards_default.ariaRoles[roleName].type === type2;
                        }));
                    }
                    var get_aria_roles_by_type_default = getAriaRolesByType;
                    function getRolesByType(roleType) {
                        return get_aria_roles_by_type_default(roleType);
                    }
                    var get_roles_by_type_default = getRolesByType;
                    function getAriaRolesSupportingNameFromContent() {
                        return cache_default.get("ariaRolesNameFromContent", (function() {
                            return Object.keys(standards_default.ariaRoles).filter((function(roleName) {
                                return standards_default.ariaRoles[roleName].nameFromContent;
                            }));
                        }));
                    }
                    var get_aria_roles_supporting_name_from_content_default = getAriaRolesSupportingNameFromContent;
                    function getRolesWithNameFromContents() {
                        return get_aria_roles_supporting_name_from_content_default();
                    }
                    var get_roles_with_name_from_contents_default = getRolesWithNameFromContents;
                    var isNull = function(value) {
                        return null === value;
                    };
                    var isNotNull = function(value) {
                        return null !== value;
                    };
                    var lookupTable = {};
                    lookupTable.attributes = {
                        "aria-activedescendant": {
                            type: "idref",
                            allowEmpty: true,
                            unsupported: false
                        },
                        "aria-atomic": {
                            type: "boolean",
                            values: [ "true", "false" ],
                            unsupported: false
                        },
                        "aria-autocomplete": {
                            type: "nmtoken",
                            values: [ "inline", "list", "both", "none" ],
                            unsupported: false
                        },
                        "aria-busy": {
                            type: "boolean",
                            values: [ "true", "false" ],
                            unsupported: false
                        },
                        "aria-checked": {
                            type: "nmtoken",
                            values: [ "true", "false", "mixed", "undefined" ],
                            unsupported: false
                        },
                        "aria-colcount": {
                            type: "int",
                            unsupported: false
                        },
                        "aria-colindex": {
                            type: "int",
                            unsupported: false
                        },
                        "aria-colspan": {
                            type: "int",
                            unsupported: false
                        },
                        "aria-controls": {
                            type: "idrefs",
                            allowEmpty: true,
                            unsupported: false
                        },
                        "aria-current": {
                            type: "nmtoken",
                            allowEmpty: true,
                            values: [ "page", "step", "location", "date", "time", "true", "false" ],
                            unsupported: false
                        },
                        "aria-describedby": {
                            type: "idrefs",
                            allowEmpty: true,
                            unsupported: false
                        },
                        "aria-describedat": {
                            unsupported: true,
                            unstandardized: true
                        },
                        "aria-details": {
                            type: "idref",
                            allowEmpty: true,
                            unsupported: false
                        },
                        "aria-disabled": {
                            type: "boolean",
                            values: [ "true", "false" ],
                            unsupported: false
                        },
                        "aria-dropeffect": {
                            type: "nmtokens",
                            values: [ "copy", "move", "reference", "execute", "popup", "none" ],
                            unsupported: false
                        },
                        "aria-errormessage": {
                            type: "idref",
                            allowEmpty: true,
                            unsupported: false
                        },
                        "aria-expanded": {
                            type: "nmtoken",
                            values: [ "true", "false", "undefined" ],
                            unsupported: false
                        },
                        "aria-flowto": {
                            type: "idrefs",
                            allowEmpty: true,
                            unsupported: false
                        },
                        "aria-grabbed": {
                            type: "nmtoken",
                            values: [ "true", "false", "undefined" ],
                            unsupported: false
                        },
                        "aria-haspopup": {
                            type: "nmtoken",
                            allowEmpty: true,
                            values: [ "true", "false", "menu", "listbox", "tree", "grid", "dialog" ],
                            unsupported: false
                        },
                        "aria-hidden": {
                            type: "boolean",
                            values: [ "true", "false" ],
                            unsupported: false
                        },
                        "aria-invalid": {
                            type: "nmtoken",
                            allowEmpty: true,
                            values: [ "true", "false", "spelling", "grammar" ],
                            unsupported: false
                        },
                        "aria-keyshortcuts": {
                            type: "string",
                            allowEmpty: true,
                            unsupported: false
                        },
                        "aria-label": {
                            type: "string",
                            allowEmpty: true,
                            unsupported: false
                        },
                        "aria-labelledby": {
                            type: "idrefs",
                            allowEmpty: true,
                            unsupported: false
                        },
                        "aria-level": {
                            type: "int",
                            unsupported: false
                        },
                        "aria-live": {
                            type: "nmtoken",
                            values: [ "off", "polite", "assertive" ],
                            unsupported: false
                        },
                        "aria-modal": {
                            type: "boolean",
                            values: [ "true", "false" ],
                            unsupported: false
                        },
                        "aria-multiline": {
                            type: "boolean",
                            values: [ "true", "false" ],
                            unsupported: false
                        },
                        "aria-multiselectable": {
                            type: "boolean",
                            values: [ "true", "false" ],
                            unsupported: false
                        },
                        "aria-orientation": {
                            type: "nmtoken",
                            values: [ "horizontal", "vertical" ],
                            unsupported: false
                        },
                        "aria-owns": {
                            type: "idrefs",
                            allowEmpty: true,
                            unsupported: false
                        },
                        "aria-placeholder": {
                            type: "string",
                            allowEmpty: true,
                            unsupported: false
                        },
                        "aria-posinset": {
                            type: "int",
                            unsupported: false
                        },
                        "aria-pressed": {
                            type: "nmtoken",
                            values: [ "true", "false", "mixed", "undefined" ],
                            unsupported: false
                        },
                        "aria-readonly": {
                            type: "boolean",
                            values: [ "true", "false" ],
                            unsupported: false
                        },
                        "aria-relevant": {
                            type: "nmtokens",
                            values: [ "additions", "removals", "text", "all" ],
                            unsupported: false
                        },
                        "aria-required": {
                            type: "boolean",
                            values: [ "true", "false" ],
                            unsupported: false
                        },
                        "aria-roledescription": {
                            type: "string",
                            allowEmpty: true,
                            unsupported: false
                        },
                        "aria-rowcount": {
                            type: "int",
                            unsupported: false
                        },
                        "aria-rowindex": {
                            type: "int",
                            unsupported: false
                        },
                        "aria-rowspan": {
                            type: "int",
                            unsupported: false
                        },
                        "aria-selected": {
                            type: "nmtoken",
                            values: [ "true", "false", "undefined" ],
                            unsupported: false
                        },
                        "aria-setsize": {
                            type: "int",
                            unsupported: false
                        },
                        "aria-sort": {
                            type: "nmtoken",
                            values: [ "ascending", "descending", "other", "none" ],
                            unsupported: false
                        },
                        "aria-valuemax": {
                            type: "decimal",
                            unsupported: false
                        },
                        "aria-valuemin": {
                            type: "decimal",
                            unsupported: false
                        },
                        "aria-valuenow": {
                            type: "decimal",
                            unsupported: false
                        },
                        "aria-valuetext": {
                            type: "string",
                            unsupported: false
                        }
                    };
                    lookupTable.globalAttributes = [ "aria-atomic", "aria-busy", "aria-controls", "aria-current", "aria-describedby", "aria-details", "aria-disabled", "aria-dropeffect", "aria-flowto", "aria-grabbed", "aria-haspopup", "aria-hidden", "aria-invalid", "aria-keyshortcuts", "aria-label", "aria-labelledby", "aria-live", "aria-owns", "aria-relevant", "aria-roledescription" ];
                    lookupTable.role = {
                        alert: {
                            type: "widget",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        alertdialog: {
                            type: "widget",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-modal", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "dialog", "section" ]
                        },
                        application: {
                            type: "landmark",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage", "aria-activedescendant" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "article", "audio", "embed", "iframe", "object", "section", "svg", "video" ]
                        },
                        article: {
                            type: "structure",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-posinset", "aria-setsize", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ "article" ],
                            unsupported: false
                        },
                        banner: {
                            type: "landmark",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ "header" ],
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        button: {
                            type: "widget",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-pressed", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author", "contents" ],
                            context: null,
                            implicit: [ "button", 'input[type="button"]', 'input[type="image"]', 'input[type="reset"]', 'input[type="submit"]', "summary" ],
                            unsupported: false,
                            allowedElements: [ {
                                nodeName: "a",
                                attributes: {
                                    href: isNotNull
                                }
                            } ]
                        },
                        cell: {
                            type: "structure",
                            attributes: {
                                allowed: [ "aria-colindex", "aria-colspan", "aria-rowindex", "aria-rowspan", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author", "contents" ],
                            context: [ "row" ],
                            implicit: [ "td", "th" ],
                            unsupported: false
                        },
                        checkbox: {
                            type: "widget",
                            attributes: {
                                allowed: [ "aria-checked", "aria-required", "aria-readonly", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author", "contents" ],
                            context: null,
                            implicit: [ 'input[type="checkbox"]' ],
                            unsupported: false,
                            allowedElements: [ "button" ]
                        },
                        columnheader: {
                            type: "structure",
                            attributes: {
                                allowed: [ "aria-colindex", "aria-colspan", "aria-expanded", "aria-rowindex", "aria-rowspan", "aria-required", "aria-readonly", "aria-selected", "aria-sort", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author", "contents" ],
                            context: [ "row" ],
                            implicit: [ "th" ],
                            unsupported: false
                        },
                        combobox: {
                            type: "composite",
                            attributes: {
                                allowed: [ "aria-autocomplete", "aria-required", "aria-activedescendant", "aria-orientation", "aria-errormessage" ],
                                required: [ "aria-expanded" ]
                            },
                            owned: {
                                all: [ "listbox", "tree", "grid", "dialog", "textbox" ]
                            },
                            nameFrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ {
                                nodeName: "input",
                                properties: {
                                    type: [ "text", "search", "tel", "url", "email" ]
                                }
                            } ]
                        },
                        command: {
                            nameFrom: [ "author" ],
                            type: "abstract",
                            unsupported: false
                        },
                        complementary: {
                            type: "landmark",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ "aside" ],
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        composite: {
                            nameFrom: [ "author" ],
                            type: "abstract",
                            unsupported: false
                        },
                        contentinfo: {
                            type: "landmark",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ "footer" ],
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        definition: {
                            type: "structure",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ "dd", "dfn" ],
                            unsupported: false
                        },
                        dialog: {
                            type: "widget",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-modal", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ "dialog" ],
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        directory: {
                            type: "structure",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author", "contents" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "ol", "ul" ]
                        },
                        document: {
                            type: "structure",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ "body" ],
                            unsupported: false,
                            allowedElements: [ "article", "embed", "iframe", "object", "section", "svg" ]
                        },
                        "doc-abstract": {
                            type: "section",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        "doc-acknowledgments": {
                            type: "landmark",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        "doc-afterword": {
                            type: "landmark",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        "doc-appendix": {
                            type: "landmark",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        "doc-backlink": {
                            type: "link",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author", "contents" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ {
                                nodeName: "a",
                                attributes: {
                                    href: isNotNull
                                }
                            } ]
                        },
                        "doc-biblioentry": {
                            type: "listitem",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-level", "aria-posinset", "aria-setsize", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: [ "doc-bibliography" ],
                            unsupported: false,
                            allowedElements: [ "li" ]
                        },
                        "doc-bibliography": {
                            type: "landmark",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: {
                                one: [ "doc-biblioentry" ]
                            },
                            nameFrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        "doc-biblioref": {
                            type: "link",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author", "contents" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ {
                                nodeName: "a",
                                attributes: {
                                    href: isNotNull
                                }
                            } ]
                        },
                        "doc-chapter": {
                            type: "landmark",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        "doc-colophon": {
                            type: "section",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        "doc-conclusion": {
                            type: "landmark",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        "doc-cover": {
                            type: "img",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false
                        },
                        "doc-credit": {
                            type: "section",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        "doc-credits": {
                            type: "landmark",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        "doc-dedication": {
                            type: "section",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        "doc-endnote": {
                            type: "listitem",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-level", "aria-posinset", "aria-setsize", "aria-errormessage" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: [ "doc-endnotes" ],
                            unsupported: false,
                            allowedElements: [ "li" ]
                        },
                        "doc-endnotes": {
                            type: "landmark",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: {
                                one: [ "doc-endnote" ]
                            },
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        "doc-epigraph": {
                            type: "section",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false
                        },
                        "doc-epilogue": {
                            type: "landmark",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        "doc-errata": {
                            type: "landmark",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        "doc-example": {
                            type: "section",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "aside", "section" ]
                        },
                        "doc-footnote": {
                            type: "section",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "aside", "footer", "header" ]
                        },
                        "doc-foreword": {
                            type: "landmark",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        "doc-glossary": {
                            type: "landmark",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: [ "term", "definition" ],
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "dl" ]
                        },
                        "doc-glossref": {
                            type: "link",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            namefrom: [ "author", "contents" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ {
                                nodeName: "a",
                                attributes: {
                                    href: isNotNull
                                }
                            } ]
                        },
                        "doc-index": {
                            type: "navigation",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "nav", "section" ]
                        },
                        "doc-introduction": {
                            type: "landmark",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        "doc-noteref": {
                            type: "link",
                            attributes: {
                                allowed: [ "aria-expanded" ]
                            },
                            owned: null,
                            namefrom: [ "author", "contents" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ {
                                nodeName: "a",
                                attributes: {
                                    href: isNotNull
                                }
                            } ]
                        },
                        "doc-notice": {
                            type: "note",
                            attributes: {
                                allowed: [ "aria-expanded" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        "doc-pagebreak": {
                            type: "separator",
                            attributes: {
                                allowed: [ "aria-expanded" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "hr" ]
                        },
                        "doc-pagelist": {
                            type: "navigation",
                            attributes: {
                                allowed: [ "aria-expanded" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "nav", "section" ]
                        },
                        "doc-part": {
                            type: "landmark",
                            attributes: {
                                allowed: [ "aria-expanded" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        "doc-preface": {
                            type: "landmark",
                            attributes: {
                                allowed: [ "aria-expanded" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        "doc-prologue": {
                            type: "landmark",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        "doc-pullquote": {
                            type: "none",
                            attributes: {
                                allowed: [ "aria-expanded" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "aside", "section" ]
                        },
                        "doc-qna": {
                            type: "section",
                            attributes: {
                                allowed: [ "aria-expanded" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        "doc-subtitle": {
                            type: "sectionhead",
                            attributes: {
                                allowed: [ "aria-expanded" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: {
                                nodeName: [ "h1", "h2", "h3", "h4", "h5", "h6" ]
                            }
                        },
                        "doc-tip": {
                            type: "note",
                            attributes: {
                                allowed: [ "aria-expanded" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "aside" ]
                        },
                        "doc-toc": {
                            type: "navigation",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            namefrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "nav", "section" ]
                        },
                        feed: {
                            type: "structure",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: {
                                one: [ "article" ]
                            },
                            nameFrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "article", "aside", "section" ]
                        },
                        figure: {
                            type: "structure",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author", "contents" ],
                            context: null,
                            implicit: [ "figure" ],
                            unsupported: false
                        },
                        form: {
                            type: "landmark",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ "form" ],
                            unsupported: false
                        },
                        grid: {
                            type: "composite",
                            attributes: {
                                allowed: [ "aria-activedescendant", "aria-expanded", "aria-colcount", "aria-level", "aria-multiselectable", "aria-readonly", "aria-rowcount", "aria-errormessage" ]
                            },
                            owned: {
                                one: [ "rowgroup", "row" ]
                            },
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ "table" ],
                            unsupported: false
                        },
                        gridcell: {
                            type: "widget",
                            attributes: {
                                allowed: [ "aria-colindex", "aria-colspan", "aria-expanded", "aria-rowindex", "aria-rowspan", "aria-selected", "aria-readonly", "aria-required", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author", "contents" ],
                            context: [ "row" ],
                            implicit: [ "td", "th" ],
                            unsupported: false
                        },
                        group: {
                            type: "structure",
                            attributes: {
                                allowed: [ "aria-activedescendant", "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ "details", "optgroup" ],
                            unsupported: false,
                            allowedElements: [ "dl", "figcaption", "fieldset", "figure", "footer", "header", "ol", "ul" ]
                        },
                        heading: {
                            type: "structure",
                            attributes: {
                                required: [ "aria-level" ],
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author", "contents" ],
                            context: null,
                            implicit: [ "h1", "h2", "h3", "h4", "h5", "h6" ],
                            unsupported: false
                        },
                        img: {
                            type: "structure",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ "img" ],
                            unsupported: false,
                            allowedElements: [ "embed", "iframe", "object", "svg" ]
                        },
                        input: {
                            nameFrom: [ "author" ],
                            type: "abstract",
                            unsupported: false
                        },
                        landmark: {
                            nameFrom: [ "author" ],
                            type: "abstract",
                            unsupported: false
                        },
                        link: {
                            type: "widget",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author", "contents" ],
                            context: null,
                            implicit: [ "a[href]", "area[href]" ],
                            unsupported: false,
                            allowedElements: [ "button", {
                                nodeName: "input",
                                properties: {
                                    type: [ "image", "button" ]
                                }
                            } ]
                        },
                        list: {
                            type: "structure",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: {
                                all: [ "listitem" ]
                            },
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ "ol", "ul", "dl" ],
                            unsupported: false
                        },
                        listbox: {
                            type: "composite",
                            attributes: {
                                allowed: [ "aria-activedescendant", "aria-multiselectable", "aria-readonly", "aria-required", "aria-expanded", "aria-orientation", "aria-errormessage" ]
                            },
                            owned: {
                                all: [ "option" ]
                            },
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ "select" ],
                            unsupported: false,
                            allowedElements: [ "ol", "ul" ]
                        },
                        listitem: {
                            type: "structure",
                            attributes: {
                                allowed: [ "aria-level", "aria-posinset", "aria-setsize", "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author", "contents" ],
                            context: [ "list" ],
                            implicit: [ "li", "dt" ],
                            unsupported: false
                        },
                        log: {
                            type: "widget",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        main: {
                            type: "landmark",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ "main" ],
                            unsupported: false,
                            allowedElements: [ "article", "section" ]
                        },
                        marquee: {
                            type: "widget",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        math: {
                            type: "structure",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ "math" ],
                            unsupported: false
                        },
                        menu: {
                            type: "composite",
                            attributes: {
                                allowed: [ "aria-activedescendant", "aria-expanded", "aria-orientation", "aria-errormessage" ]
                            },
                            owned: {
                                one: [ "menuitem", "menuitemradio", "menuitemcheckbox" ]
                            },
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ 'menu[type="context"]' ],
                            unsupported: false,
                            allowedElements: [ "ol", "ul" ]
                        },
                        menubar: {
                            type: "composite",
                            attributes: {
                                allowed: [ "aria-activedescendant", "aria-expanded", "aria-orientation", "aria-errormessage" ]
                            },
                            owned: {
                                one: [ "menuitem", "menuitemradio", "menuitemcheckbox" ]
                            },
                            nameFrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "ol", "ul" ]
                        },
                        menuitem: {
                            type: "widget",
                            attributes: {
                                allowed: [ "aria-posinset", "aria-setsize", "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author", "contents" ],
                            context: [ "menu", "menubar" ],
                            implicit: [ 'menuitem[type="command"]' ],
                            unsupported: false,
                            allowedElements: [ "button", "li", {
                                nodeName: "iput",
                                properties: {
                                    type: [ "image", "button" ]
                                }
                            }, {
                                nodeName: "a",
                                attributes: {
                                    href: isNotNull
                                }
                            } ]
                        },
                        menuitemcheckbox: {
                            type: "widget",
                            attributes: {
                                allowed: [ "aria-checked", "aria-posinset", "aria-setsize", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author", "contents" ],
                            context: [ "menu", "menubar" ],
                            implicit: [ 'menuitem[type="checkbox"]' ],
                            unsupported: false,
                            allowedElements: [ {
                                nodeName: [ "button", "li" ]
                            }, {
                                nodeName: "input",
                                properties: {
                                    type: [ "checkbox", "image", "button" ]
                                }
                            }, {
                                nodeName: "a",
                                attributes: {
                                    href: isNotNull
                                }
                            } ]
                        },
                        menuitemradio: {
                            type: "widget",
                            attributes: {
                                allowed: [ "aria-checked", "aria-selected", "aria-posinset", "aria-setsize", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author", "contents" ],
                            context: [ "menu", "menubar" ],
                            implicit: [ 'menuitem[type="radio"]' ],
                            unsupported: false,
                            allowedElements: [ {
                                nodeName: [ "button", "li" ]
                            }, {
                                nodeName: "input",
                                properties: {
                                    type: [ "image", "button", "radio" ]
                                }
                            }, {
                                nodeName: "a",
                                attributes: {
                                    href: isNotNull
                                }
                            } ]
                        },
                        navigation: {
                            type: "landmark",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ "nav" ],
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        none: {
                            type: "structure",
                            attributes: null,
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ {
                                nodeName: [ "article", "aside", "dl", "embed", "figcaption", "fieldset", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hr", "iframe", "li", "ol", "section", "ul" ]
                            }, {
                                nodeName: "img",
                                attributes: {
                                    alt: isNotNull
                                }
                            } ]
                        },
                        note: {
                            type: "structure",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "aside" ]
                        },
                        option: {
                            type: "widget",
                            attributes: {
                                allowed: [ "aria-selected", "aria-posinset", "aria-setsize", "aria-checked", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author", "contents" ],
                            context: [ "listbox" ],
                            implicit: [ "option" ],
                            unsupported: false,
                            allowedElements: [ {
                                nodeName: [ "button", "li" ]
                            }, {
                                nodeName: "input",
                                properties: {
                                    type: [ "checkbox", "button" ]
                                }
                            }, {
                                nodeName: "a",
                                attributes: {
                                    href: isNotNull
                                }
                            } ]
                        },
                        presentation: {
                            type: "structure",
                            attributes: null,
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ {
                                nodeName: [ "article", "aside", "dl", "embed", "figcaption", "fieldset", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hr", "iframe", "li", "ol", "section", "ul" ]
                            }, {
                                nodeName: "img",
                                attributes: {
                                    alt: isNotNull
                                }
                            } ]
                        },
                        progressbar: {
                            type: "widget",
                            attributes: {
                                allowed: [ "aria-valuetext", "aria-valuenow", "aria-valuemax", "aria-valuemin", "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ "progress" ],
                            unsupported: false
                        },
                        radio: {
                            type: "widget",
                            attributes: {
                                allowed: [ "aria-selected", "aria-posinset", "aria-setsize", "aria-required", "aria-errormessage", "aria-checked" ]
                            },
                            owned: null,
                            nameFrom: [ "author", "contents" ],
                            context: null,
                            implicit: [ 'input[type="radio"]' ],
                            unsupported: false,
                            allowedElements: [ {
                                nodeName: [ "button", "li" ]
                            }, {
                                nodeName: "input",
                                properties: {
                                    type: [ "image", "button" ]
                                }
                            } ]
                        },
                        radiogroup: {
                            type: "composite",
                            attributes: {
                                allowed: [ "aria-activedescendant", "aria-required", "aria-expanded", "aria-readonly", "aria-errormessage", "aria-orientation" ]
                            },
                            owned: {
                                all: [ "radio" ]
                            },
                            nameFrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: {
                                nodeName: [ "ol", "ul", "fieldset" ]
                            }
                        },
                        range: {
                            nameFrom: [ "author" ],
                            type: "abstract",
                            unsupported: false
                        },
                        region: {
                            type: "landmark",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ "section[aria-label]", "section[aria-labelledby]", "section[title]" ],
                            unsupported: false,
                            allowedElements: {
                                nodeName: [ "article", "aside" ]
                            }
                        },
                        roletype: {
                            type: "abstract",
                            unsupported: false
                        },
                        row: {
                            type: "structure",
                            attributes: {
                                allowed: [ "aria-activedescendant", "aria-colindex", "aria-expanded", "aria-level", "aria-selected", "aria-rowindex", "aria-errormessage" ]
                            },
                            owned: {
                                one: [ "cell", "columnheader", "rowheader", "gridcell" ]
                            },
                            nameFrom: [ "author", "contents" ],
                            context: [ "rowgroup", "grid", "treegrid", "table" ],
                            implicit: [ "tr" ],
                            unsupported: false
                        },
                        rowgroup: {
                            type: "structure",
                            attributes: {
                                allowed: [ "aria-activedescendant", "aria-expanded", "aria-errormessage" ]
                            },
                            owned: {
                                all: [ "row" ]
                            },
                            nameFrom: [ "author", "contents" ],
                            context: [ "grid", "table", "treegrid" ],
                            implicit: [ "tbody", "thead", "tfoot" ],
                            unsupported: false
                        },
                        rowheader: {
                            type: "structure",
                            attributes: {
                                allowed: [ "aria-colindex", "aria-colspan", "aria-expanded", "aria-rowindex", "aria-rowspan", "aria-required", "aria-readonly", "aria-selected", "aria-sort", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author", "contents" ],
                            context: [ "row" ],
                            implicit: [ "th" ],
                            unsupported: false
                        },
                        scrollbar: {
                            type: "widget",
                            attributes: {
                                required: [ "aria-controls", "aria-valuenow" ],
                                allowed: [ "aria-valuetext", "aria-orientation", "aria-errormessage", "aria-valuemax", "aria-valuemin" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            unsupported: false
                        },
                        search: {
                            type: "landmark",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: {
                                nodeName: [ "aside", "form", "section" ]
                            }
                        },
                        searchbox: {
                            type: "widget",
                            attributes: {
                                allowed: [ "aria-activedescendant", "aria-autocomplete", "aria-multiline", "aria-readonly", "aria-required", "aria-placeholder", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ 'input[type="search"]' ],
                            unsupported: false,
                            allowedElements: {
                                nodeName: "input",
                                properties: {
                                    type: "text"
                                }
                            }
                        },
                        section: {
                            nameFrom: [ "author", "contents" ],
                            type: "abstract",
                            unsupported: false
                        },
                        sectionhead: {
                            nameFrom: [ "author", "contents" ],
                            type: "abstract",
                            unsupported: false
                        },
                        select: {
                            nameFrom: [ "author" ],
                            type: "abstract",
                            unsupported: false
                        },
                        separator: {
                            type: "structure",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-orientation", "aria-valuenow", "aria-valuemax", "aria-valuemin", "aria-valuetext", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ "hr" ],
                            unsupported: false,
                            allowedElements: [ "li" ]
                        },
                        slider: {
                            type: "widget",
                            attributes: {
                                allowed: [ "aria-valuetext", "aria-orientation", "aria-readonly", "aria-errormessage", "aria-valuemax", "aria-valuemin" ],
                                required: [ "aria-valuenow" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ 'input[type="range"]' ],
                            unsupported: false
                        },
                        spinbutton: {
                            type: "widget",
                            attributes: {
                                allowed: [ "aria-valuetext", "aria-required", "aria-readonly", "aria-errormessage", "aria-valuemax", "aria-valuemin" ],
                                required: [ "aria-valuenow" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ 'input[type="number"]' ],
                            unsupported: false,
                            allowedElements: {
                                nodeName: "input",
                                properties: {
                                    type: [ "text", "tel" ]
                                }
                            }
                        },
                        status: {
                            type: "widget",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ "output" ],
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        structure: {
                            type: "abstract",
                            unsupported: false
                        },
                        switch: {
                            type: "widget",
                            attributes: {
                                allowed: [ "aria-errormessage" ],
                                required: [ "aria-checked" ]
                            },
                            owned: null,
                            nameFrom: [ "author", "contents" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "button", {
                                nodeName: "input",
                                properties: {
                                    type: [ "checkbox", "image", "button" ]
                                }
                            }, {
                                nodeName: "a",
                                attributes: {
                                    href: isNotNull
                                }
                            } ]
                        },
                        tab: {
                            type: "widget",
                            attributes: {
                                allowed: [ "aria-selected", "aria-expanded", "aria-setsize", "aria-posinset", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author", "contents" ],
                            context: [ "tablist" ],
                            unsupported: false,
                            allowedElements: [ {
                                nodeName: [ "button", "h1", "h2", "h3", "h4", "h5", "h6", "li" ]
                            }, {
                                nodeName: "input",
                                properties: {
                                    type: "button"
                                }
                            }, {
                                nodeName: "a",
                                attributes: {
                                    href: isNotNull
                                }
                            } ]
                        },
                        table: {
                            type: "structure",
                            attributes: {
                                allowed: [ "aria-colcount", "aria-rowcount", "aria-errormessage" ]
                            },
                            owned: {
                                one: [ "rowgroup", "row" ]
                            },
                            nameFrom: [ "author", "contents" ],
                            context: null,
                            implicit: [ "table" ],
                            unsupported: false
                        },
                        tablist: {
                            type: "composite",
                            attributes: {
                                allowed: [ "aria-activedescendant", "aria-expanded", "aria-level", "aria-multiselectable", "aria-orientation", "aria-errormessage" ]
                            },
                            owned: {
                                all: [ "tab" ]
                            },
                            nameFrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "ol", "ul" ]
                        },
                        tabpanel: {
                            type: "widget",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "section" ]
                        },
                        term: {
                            type: "structure",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author", "contents" ],
                            context: null,
                            implicit: [ "dt" ],
                            unsupported: false
                        },
                        textbox: {
                            type: "widget",
                            attributes: {
                                allowed: [ "aria-activedescendant", "aria-autocomplete", "aria-multiline", "aria-readonly", "aria-required", "aria-placeholder", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ 'input[type="text"]', 'input[type="email"]', 'input[type="password"]', 'input[type="tel"]', 'input[type="url"]', "input:not([type])", "textarea" ],
                            unsupported: false
                        },
                        timer: {
                            type: "widget",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            unsupported: false
                        },
                        toolbar: {
                            type: "structure",
                            attributes: {
                                allowed: [ "aria-activedescendant", "aria-expanded", "aria-orientation", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author" ],
                            context: null,
                            implicit: [ 'menu[type="toolbar"]' ],
                            unsupported: false,
                            allowedElements: [ "ol", "ul" ]
                        },
                        tooltip: {
                            type: "structure",
                            attributes: {
                                allowed: [ "aria-expanded", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author", "contents" ],
                            context: null,
                            unsupported: false
                        },
                        tree: {
                            type: "composite",
                            attributes: {
                                allowed: [ "aria-activedescendant", "aria-multiselectable", "aria-required", "aria-expanded", "aria-orientation", "aria-errormessage" ]
                            },
                            owned: {
                                all: [ "treeitem" ]
                            },
                            nameFrom: [ "author" ],
                            context: null,
                            unsupported: false,
                            allowedElements: [ "ol", "ul" ]
                        },
                        treegrid: {
                            type: "composite",
                            attributes: {
                                allowed: [ "aria-activedescendant", "aria-colcount", "aria-expanded", "aria-level", "aria-multiselectable", "aria-readonly", "aria-required", "aria-rowcount", "aria-orientation", "aria-errormessage" ]
                            },
                            owned: {
                                one: [ "rowgroup", "row" ]
                            },
                            nameFrom: [ "author" ],
                            context: null,
                            unsupported: false
                        },
                        treeitem: {
                            type: "widget",
                            attributes: {
                                allowed: [ "aria-checked", "aria-selected", "aria-expanded", "aria-level", "aria-posinset", "aria-setsize", "aria-errormessage" ]
                            },
                            owned: null,
                            nameFrom: [ "author", "contents" ],
                            context: [ "group", "tree" ],
                            unsupported: false,
                            allowedElements: [ "li", {
                                nodeName: "a",
                                attributes: {
                                    href: isNotNull
                                }
                            } ]
                        },
                        widget: {
                            type: "abstract",
                            unsupported: false
                        },
                        window: {
                            nameFrom: [ "author" ],
                            type: "abstract",
                            unsupported: false
                        }
                    };
                    lookupTable.implicitHtmlRole = implicit_html_roles_default;
                    lookupTable.elementsAllowedNoRole = [ {
                        nodeName: [ "base", "body", "caption", "col", "colgroup", "datalist", "dd", "details", "dt", "head", "html", "keygen", "label", "legend", "main", "map", "math", "meta", "meter", "noscript", "optgroup", "param", "picture", "progress", "script", "source", "style", "template", "textarea", "title", "track" ]
                    }, {
                        nodeName: "area",
                        attributes: {
                            href: isNotNull
                        }
                    }, {
                        nodeName: "input",
                        properties: {
                            type: [ "color", "data", "datatime", "file", "hidden", "month", "number", "password", "range", "reset", "submit", "time", "week" ]
                        }
                    }, {
                        nodeName: "link",
                        attributes: {
                            href: isNotNull
                        }
                    }, {
                        nodeName: "menu",
                        attributes: {
                            type: "context"
                        }
                    }, {
                        nodeName: "menuitem",
                        attributes: {
                            type: [ "command", "checkbox", "radio" ]
                        }
                    }, {
                        nodeName: "select",
                        condition: function(vNode) {
                            if (!(vNode instanceof axe.AbstractVirtualNode)) vNode = axe.utils.getNodeFromTree(vNode);
                            return Number(vNode.attr("size")) > 1;
                        },
                        properties: {
                            multiple: true
                        }
                    }, {
                        nodeName: [ "clippath", "cursor", "defs", "desc", "feblend", "fecolormatrix", "fecomponenttransfer", "fecomposite", "feconvolvematrix", "fediffuselighting", "fedisplacementmap", "fedistantlight", "fedropshadow", "feflood", "fefunca", "fefuncb", "fefuncg", "fefuncr", "fegaussianblur", "feimage", "femerge", "femergenode", "femorphology", "feoffset", "fepointlight", "fespecularlighting", "fespotlight", "fetile", "feturbulence", "filter", "hatch", "hatchpath", "lineargradient", "marker", "mask", "meshgradient", "meshpatch", "meshrow", "metadata", "mpath", "pattern", "radialgradient", "solidcolor", "stop", "switch", "view" ]
                    } ];
                    lookupTable.elementsAllowedAnyRole = [ {
                        nodeName: "a",
                        attributes: {
                            href: isNull
                        }
                    }, {
                        nodeName: "img",
                        attributes: {
                            alt: isNull
                        }
                    }, {
                        nodeName: [ "abbr", "address", "canvas", "div", "p", "pre", "blockquote", "ins", "del", "output", "span", "table", "tbody", "thead", "tfoot", "td", "em", "strong", "small", "s", "cite", "q", "dfn", "abbr", "time", "code", "var", "samp", "kbd", "sub", "sup", "i", "b", "u", "mark", "ruby", "rt", "rp", "bdi", "bdo", "br", "wbr", "th", "tr" ]
                    } ];
                    lookupTable.evaluateRoleForElement = {
                        A: function(_ref85) {
                            var node = _ref85.node, out = _ref85.out;
                            if ("http://www.w3.org/2000/svg" === node.namespaceURI) return true;
                            if (node.href.length) return out;
                            return true;
                        },
                        AREA: function(_ref86) {
                            var node = _ref86.node;
                            return !node.href;
                        },
                        BUTTON: function(_ref87) {
                            var node = _ref87.node, role = _ref87.role, out = _ref87.out;
                            if ("menu" === node.getAttribute("type")) return "menuitem" === role;
                            return out;
                        },
                        IMG: function(_ref88) {
                            var node = _ref88.node, role = _ref88.role, out = _ref88.out;
                            switch (node.alt) {
                              case null:
                                return out;

                              case "":
                                return "presentation" === role || "none" === role;

                              default:
                                return "presentation" !== role && "none" !== role;
                            }
                        },
                        INPUT: function(_ref89) {
                            var node = _ref89.node, role = _ref89.role, out = _ref89.out;
                            switch (node.type) {
                              case "button":
                              case "image":
                                return out;

                              case "checkbox":
                                if ("button" === role && node.hasAttribute("aria-pressed")) return true;
                                return out;

                              case "radio":
                                return "menuitemradio" === role;

                              case "text":
                                return "combobox" === role || "searchbox" === role || "spinbutton" === role;

                              case "tel":
                                return "combobox" === role || "spinbutton" === role;

                              case "url":
                              case "search":
                              case "email":
                                return "combobox" === role;

                              default:
                                return false;
                            }
                        },
                        LI: function(_ref90) {
                            var node = _ref90.node, out = _ref90.out;
                            var hasImplicitListitemRole = axe.utils.matchesSelector(node, "ol li, ul li");
                            if (hasImplicitListitemRole) return out;
                            return true;
                        },
                        MENU: function(_ref91) {
                            var node = _ref91.node;
                            if ("context" === node.getAttribute("type")) return false;
                            return true;
                        },
                        OPTION: function(_ref92) {
                            var node = _ref92.node;
                            var withinOptionList = axe.utils.matchesSelector(node, "select > option, datalist > option, optgroup > option");
                            return !withinOptionList;
                        },
                        SELECT: function(_ref93) {
                            var node = _ref93.node, role = _ref93.role;
                            return !node.multiple && node.size <= 1 && "menu" === role;
                        },
                        SVG: function(_ref94) {
                            var node = _ref94.node, out = _ref94.out;
                            if (node.parentNode && "http://www.w3.org/2000/svg" === node.parentNode.namespaceURI) return true;
                            return out;
                        }
                    };
                    lookupTable.rolesOfType = {
                        widget: [ "button", "checkbox", "dialog", "gridcell", "link", "log", "marquee", "menuitem", "menuitemcheckbox", "menuitemradio", "option", "progressbar", "radio", "scrollbar", "searchbox", "slider", "spinbutton", "status", "switch", "tab", "tabpanel", "textbox", "timer", "tooltip", "tree", "treeitem" ]
                    };
                    var lookup_table_default = lookupTable;
                    function implicitNodes(role) {
                        var implicit = null;
                        var roles = lookup_table_default.role[role];
                        if (roles && roles.implicit) implicit = _clone(roles.implicit);
                        return implicit;
                    }
                    var implicit_nodes_default = implicitNodes;
                    function isAccessibleRef(node) {
                        return !!get_accessible_refs_default(node).length;
                    }
                    var is_accessible_ref_default = isAccessibleRef;
                    function _isComboboxPopup(virtualNode) {
                        var _popupRoles;
                        var _ref95 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, popupRoles = _ref95.popupRoles;
                        var role = get_role_default(virtualNode);
                        null !== (_popupRoles = popupRoles) && void 0 !== _popupRoles ? _popupRoles : popupRoles = aria_attrs_default["aria-haspopup"].values;
                        if (!popupRoles.includes(role)) return false;
                        var vParent = nearestParentWithRole(virtualNode);
                        if (isCombobox(vParent)) return true;
                        var id = virtualNode.props.id;
                        if (!id) return false;
                        if (!virtualNode.actualNode) throw new Error("Unable to determine combobox popup without an actualNode");
                        var root = get_root_node_default(virtualNode.actualNode);
                        var ownedCombobox = root.querySelectorAll('[aria-owns~="'.concat(id, '"][role~="combobox"]:not(select),\n     [aria-controls~="').concat(id, '"][role~="combobox"]:not(select)'));
                        return Array.from(ownedCombobox).some(isCombobox);
                    }
                    var isCombobox = function(node) {
                        return node && "combobox" === get_role_default(node);
                    };
                    function nearestParentWithRole(vNode) {
                        while (vNode = vNode.parent) if (null !== get_role_default(vNode, {
                            noPresentational: true
                        })) return vNode;
                        return null;
                    }
                    function label2(node) {
                        node = get_node_from_tree_default(node);
                        return label_virtual_default(node);
                    }
                    var label_default2 = label2;
                    function requiredAttr(role) {
                        var roleDef = standards_default.ariaRoles[role];
                        if (!roleDef || !Array.isArray(roleDef.requiredAttrs)) return [];
                        return _toConsumableArray(roleDef.requiredAttrs);
                    }
                    var required_attr_default = requiredAttr;
                    function requiredContext(role) {
                        var roleDef = standards_default.ariaRoles[role];
                        if (!roleDef || !Array.isArray(roleDef.requiredContext)) return null;
                        return _toConsumableArray(roleDef.requiredContext);
                    }
                    var required_context_default = requiredContext;
                    function requiredOwned(role) {
                        var roleDef = standards_default.ariaRoles[role];
                        if (!roleDef || !Array.isArray(roleDef.requiredOwned)) return null;
                        return _toConsumableArray(roleDef.requiredOwned);
                    }
                    var required_owned_default = requiredOwned;
                    function validateAttrValue(vNode, attr) {
                        vNode = vNode instanceof abstract_virtual_node_default ? vNode : get_node_from_tree_default(vNode);
                        var matches4;
                        var list;
                        var value = vNode.attr(attr);
                        var attrInfo = standards_default.ariaAttrs[attr];
                        if (!attrInfo) return true;
                        if (attrInfo.allowEmpty && (!value || "" === value.trim())) return true;
                        switch (attrInfo.type) {
                          case "boolean":
                            return [ "true", "false" ].includes(value.toLowerCase());

                          case "nmtoken":
                            return "string" === typeof value && attrInfo.values.includes(value.toLowerCase());

                          case "nmtokens":
                            list = token_list_default(value);
                            return list.reduce((function(result, token) {
                                return result && attrInfo.values.includes(token);
                            }), 0 !== list.length);

                          case "idref":
                            try {
                                var doc = get_root_node_default2(vNode.actualNode);
                                return !!(value && doc.getElementById(value));
                            } catch (_unused6) {
                                throw new TypeError("Cannot resolve id references for partial DOM");
                            }

                          case "idrefs":
                            return idrefs_default(vNode, attr).some((function(node) {
                                return !!node;
                            }));

                          case "string":
                            return "" !== value.trim();

                          case "decimal":
                            matches4 = value.match(/^[-+]?([0-9]*)\.?([0-9]*)$/);
                            return !!(matches4 && (matches4[1] || matches4[2]));

                          case "int":
                            var minValue = "undefined" !== typeof attrInfo.minValue ? attrInfo.minValue : -1 / 0;
                            return /^[-+]?[0-9]+$/.test(value) && parseInt(value) >= minValue;
                        }
                    }
                    var validate_attr_value_default = validateAttrValue;
                    function validateAttr(att) {
                        var attrDefinition = standards_default.ariaAttrs[att];
                        return !!attrDefinition;
                    }
                    var validate_attr_default = validateAttr;
                    function tdHasHeaderEvaluate(node) {
                        var badCells = [];
                        var cells = get_all_cells_default(node);
                        var tableGrid = to_grid_default(node);
                        cells.forEach((function(cell) {
                            if (has_content_default(cell) && is_data_cell_default(cell) && !label_default2(cell)) {
                                var hasHeaders = get_headers_default(cell, tableGrid).some((function(header) {
                                    return null !== header && !!has_content_default(header);
                                }));
                                if (!hasHeaders) badCells.push(cell);
                            }
                        }));
                        if (badCells.length) {
                            this.relatedNodes(badCells);
                            return false;
                        }
                        return true;
                    }
                    var td_has_header_evaluate_default = tdHasHeaderEvaluate;
                    function scopeValueEvaluate(node, options) {
                        var value = node.getAttribute("scope").toLowerCase();
                        return -1 !== options.values.indexOf(value);
                    }
                    var scope_value_evaluate_default = scopeValueEvaluate;
                    var same_caption_summary_evaluate_default = sameCaptionSummaryEvaluate;
                    function sameCaptionSummaryEvaluate(node, options, virtualNode) {
                        if (void 0 === virtualNode.children) return;
                        var summary = virtualNode.attr("summary");
                        var captionNode = virtualNode.children.find(isCaptionNode);
                        var caption = captionNode ? sanitize_default(subtree_text_default(captionNode)) : false;
                        if (!caption || !summary) return false;
                        return sanitize_default(summary).toLowerCase() === sanitize_default(caption).toLowerCase();
                    }
                    function isCaptionNode(virtualNode) {
                        return "caption" === virtualNode.props.nodeName;
                    }
                    function html5ScopeEvaluate(node) {
                        if (!is_html5_default(document)) return true;
                        return "TH" === node.nodeName.toUpperCase();
                    }
                    var html5_scope_evaluate_default = html5ScopeEvaluate;
                    function captionFakedEvaluate(node) {
                        var table = to_grid_default(node);
                        var firstRow = table[0];
                        if (table.length <= 1 || firstRow.length <= 1 || node.rows.length <= 1) return true;
                        return firstRow.reduce((function(out, curr, i) {
                            return out || curr !== firstRow[i + 1] && void 0 !== firstRow[i + 1];
                        }), false);
                    }
                    var caption_faked_evaluate_default = captionFakedEvaluate;
                    function svgNonEmptyTitleEvaluate(node, options, virtualNode) {
                        if (!virtualNode.children) return;
                        var titleNode = virtualNode.children.find((function(_ref96) {
                            var props = _ref96.props;
                            return "title" === props.nodeName;
                        }));
                        if (!titleNode) {
                            this.data({
                                messageKey: "noTitle"
                            });
                            return false;
                        }
                        try {
                            var titleText2 = subtree_text_default(titleNode, {
                                includeHidden: true
                            }).trim();
                            if ("" === titleText2) {
                                this.data({
                                    messageKey: "emptyTitle"
                                });
                                return false;
                            }
                        } catch (_unused7) {
                            return;
                        }
                        return true;
                    }
                    var svg_non_empty_title_evaluate_default = svgNonEmptyTitleEvaluate;
                    var standards_exports = {};
                    __export(standards_exports, {
                        getAriaRolesByType: function() {
                            return get_aria_roles_by_type_default;
                        },
                        getAriaRolesSupportingNameFromContent: function() {
                            return get_aria_roles_supporting_name_from_content_default;
                        },
                        getElementSpec: function() {
                            return get_element_spec_default;
                        },
                        getElementsByContentType: function() {
                            return get_elements_by_content_type_default;
                        },
                        getGlobalAriaAttrs: function() {
                            return get_global_aria_attrs_default;
                        },
                        implicitHtmlRoles: function() {
                            return implicit_html_roles_default;
                        }
                    });
                    function presentationalRoleEvaluate(node, options, virtualNode) {
                        var explicitRole2 = get_explicit_role_default(virtualNode);
                        if ([ "presentation", "none" ].includes(explicitRole2) && [ "iframe", "frame" ].includes(virtualNode.props.nodeName) && virtualNode.hasAttr("title")) {
                            this.data({
                                messageKey: "iframe",
                                nodeName: virtualNode.props.nodeName
                            });
                            return false;
                        }
                        var role = get_role_default(virtualNode);
                        if ([ "presentation", "none" ].includes(role)) {
                            this.data({
                                role
                            });
                            return true;
                        }
                        if (![ "presentation", "none" ].includes(explicitRole2)) return false;
                        var hasGlobalAria = get_global_aria_attrs_default().some((function(attr) {
                            return virtualNode.hasAttr(attr);
                        }));
                        var focusable = _isFocusable(virtualNode);
                        var messageKey;
                        if (hasGlobalAria && !focusable) messageKey = "globalAria"; else if (!hasGlobalAria && focusable) messageKey = "focusable"; else messageKey = "both";
                        this.data({
                            messageKey,
                            role
                        });
                        return false;
                    }
                    function nonEmptyIfPresentEvaluate(node, options, virtualNode) {
                        var nodeName2 = virtualNode.props.nodeName;
                        var type2 = (virtualNode.attr("type") || "").toLowerCase();
                        var label3 = virtualNode.attr("value");
                        if (label3) this.data({
                            messageKey: "has-label"
                        });
                        if ("input" === nodeName2 && [ "submit", "reset" ].includes(type2)) return null === label3;
                        return false;
                    }
                    var non_empty_if_present_evaluate_default = nonEmptyIfPresentEvaluate;
                    function isOnScreenEvaluate(node) {
                        return _isVisibleOnScreen(node);
                    }
                    var is_on_screen_evaluate_default = isOnScreenEvaluate;
                    function inlineStyleProperty(node, options) {
                        var cssProperty = options.cssProperty, absoluteValues = options.absoluteValues, minValue = options.minValue, maxValue = options.maxValue, _options$normalValue = options.normalValue, normalValue = void 0 === _options$normalValue ? 0 : _options$normalValue, noImportant = options.noImportant, multiLineOnly = options.multiLineOnly;
                        if (!noImportant && "important" !== node.style.getPropertyPriority(cssProperty) || multiLineOnly && !_isMultiline(node)) return true;
                        var data = {};
                        if ("number" === typeof minValue) data.minValue = minValue;
                        if ("number" === typeof maxValue) data.maxValue = maxValue;
                        var declaredPropValue = node.style.getPropertyValue(cssProperty);
                        if ([ "inherit", "unset", "revert", "revert-layer" ].includes(declaredPropValue)) {
                            this.data(_extends({
                                value: declaredPropValue
                            }, data));
                            return true;
                        }
                        var value = getNumberValue(node, {
                            absoluteValues,
                            cssProperty,
                            normalValue
                        });
                        this.data(_extends({
                            value
                        }, data));
                        if ("number" !== typeof value) return;
                        if (("number" !== typeof minValue || value >= minValue) && ("number" !== typeof maxValue || value <= maxValue)) return true;
                        return false;
                    }
                    function getNumberValue(domNode, _ref97) {
                        var cssProperty = _ref97.cssProperty, absoluteValues = _ref97.absoluteValues, normalValue = _ref97.normalValue;
                        var computedStyle = window.getComputedStyle(domNode);
                        var cssPropValue = computedStyle.getPropertyValue(cssProperty);
                        if ("normal" === cssPropValue) return normalValue;
                        var parsedValue = parseFloat(cssPropValue);
                        if (absoluteValues) return parsedValue;
                        var fontSize = parseFloat(computedStyle.getPropertyValue("font-size"));
                        var value = Math.round(parsedValue / fontSize * 100) / 100;
                        if (isNaN(value)) return cssPropValue;
                        return value;
                    }
                    function hasAltEvaluate(node, options, virtualNode) {
                        var nodeName2 = virtualNode.props.nodeName;
                        if (![ "img", "input", "area" ].includes(nodeName2)) return false;
                        return virtualNode.hasAttr("alt");
                    }
                    var has_alt_evaluate_default = hasAltEvaluate;
                    function existsEvaluate() {
                        return;
                    }
                    var exists_evaluate_default = existsEvaluate;
                    function docHasTitleEvaluate() {
                        var title = document.title;
                        return !!sanitize_default(title);
                    }
                    var doc_has_title_evaluate_default = docHasTitleEvaluate;
                    function avoidInlineSpacingEvaluate(node, options) {
                        var overriddenProperties = options.cssProperties.filter((function(property) {
                            if ("important" === node.style.getPropertyPriority(property)) return property;
                        }));
                        if (overriddenProperties.length > 0) {
                            this.data(overriddenProperties);
                            return false;
                        }
                        return true;
                    }
                    var avoid_inline_spacing_evaluate_default = avoidInlineSpacingEvaluate;
                    function ariaLabelledbyEvaluate(node, options, virtualNode) {
                        try {
                            return !!sanitize_default(arialabelledby_text_default(virtualNode));
                        } catch (_unused8) {
                            return;
                        }
                    }
                    var aria_labelledby_evaluate_default = ariaLabelledbyEvaluate;
                    function ariaLabelEvaluate(node, options, virtualNode) {
                        return !!sanitize_default(_arialabelText(virtualNode));
                    }
                    var aria_label_evaluate_default = ariaLabelEvaluate;
                    function duplicateIdEvaluate(node) {
                        var id = node.getAttribute("id").trim();
                        if (!id) return true;
                        var root = get_root_node_default2(node);
                        var matchingNodes = Array.from(root.querySelectorAll('[id="'.concat(escape_selector_default(id), '"]'))).filter((function(foundNode) {
                            return foundNode !== node;
                        }));
                        if (matchingNodes.length) this.relatedNodes(matchingNodes);
                        this.data(id);
                        return 0 === matchingNodes.length;
                    }
                    var duplicate_id_evaluate_default = duplicateIdEvaluate;
                    function duplicateIdAfter(results) {
                        var uniqueIds = [];
                        return results.filter((function(r) {
                            if (-1 === uniqueIds.indexOf(r.data)) {
                                uniqueIds.push(r.data);
                                return true;
                            }
                            return false;
                        }));
                    }
                    var duplicate_id_after_default = duplicateIdAfter;
                    function uniqueFrameTitleEvaluate(node, options, vNode) {
                        var title = sanitize_default(vNode.attr("title")).toLowerCase();
                        this.data(title);
                        return true;
                    }
                    var unique_frame_title_evaluate_default = uniqueFrameTitleEvaluate;
                    function uniqueFrameTitleAfter(results) {
                        var titles = {};
                        results.forEach((function(r) {
                            titles[r.data] = void 0 !== titles[r.data] ? ++titles[r.data] : 0;
                        }));
                        results.forEach((function(r) {
                            r.result = !!titles[r.data];
                        }));
                        return results;
                    }
                    var unique_frame_title_after_default = uniqueFrameTitleAfter;
                    function skipLinkEvaluate(node) {
                        var target = get_element_by_reference_default(node, "href");
                        if (target) return _isVisibleToScreenReaders(target) || void 0;
                        return false;
                    }
                    var skip_link_evaluate_default = skipLinkEvaluate;
                    var implicitAriaLiveRoles = [ "alert", "log", "status" ];
                    function regionEvaluate(node, options, virtualNode) {
                        this.data({
                            isIframe: [ "iframe", "frame" ].includes(virtualNode.props.nodeName)
                        });
                        var regionlessNodes = cache_default.get("regionlessNodes", (function() {
                            return getRegionlessNodes(options);
                        }));
                        return !regionlessNodes.includes(virtualNode);
                    }
                    function getRegionlessNodes(options) {
                        var regionlessNodes = findRegionlessElms(axe._tree[0], options).map((function(vNode) {
                            while (vNode.parent && !vNode.parent._hasRegionDescendant && vNode.parent.actualNode !== document.body) vNode = vNode.parent;
                            return vNode;
                        })).filter((function(vNode, index, array) {
                            return array.indexOf(vNode) === index;
                        }));
                        return regionlessNodes;
                    }
                    function findRegionlessElms(virtualNode, options) {
                        var node = virtualNode.actualNode;
                        if ("button" === get_role_default(virtualNode) || isRegion(virtualNode, options) || [ "iframe", "frame" ].includes(virtualNode.props.nodeName) || _isSkipLink(virtualNode.actualNode) && get_element_by_reference_default(virtualNode.actualNode, "href") || !_isVisibleToScreenReaders(node)) {
                            var vNode = virtualNode;
                            while (vNode) {
                                vNode._hasRegionDescendant = true;
                                vNode = vNode.parent;
                            }
                            if ([ "iframe", "frame" ].includes(virtualNode.props.nodeName)) return [ virtualNode ];
                            return [];
                        } else if (node !== document.body && has_content_default(node, true) && !isShallowlyHidden(virtualNode)) return [ virtualNode ]; else return virtualNode.children.filter((function(_ref98) {
                            var actualNode = _ref98.actualNode;
                            return 1 === actualNode.nodeType;
                        })).map((function(vNode) {
                            return findRegionlessElms(vNode, options);
                        })).reduce((function(a2, b2) {
                            return a2.concat(b2);
                        }), []);
                    }
                    function isShallowlyHidden(virtualNode) {
                        return [ "none", "presentation" ].includes(get_role_default(virtualNode)) && !hasChildTextNodes(virtualNode);
                    }
                    function isRegion(virtualNode, options) {
                        var node = virtualNode.actualNode;
                        var role = get_role_default(virtualNode);
                        var ariaLive = (node.getAttribute("aria-live") || "").toLowerCase().trim();
                        var landmarkRoles2 = get_aria_roles_by_type_default("landmark");
                        if ([ "assertive", "polite" ].includes(ariaLive) || implicitAriaLiveRoles.includes(role)) return true;
                        if (landmarkRoles2.includes(role)) return true;
                        if (options.regionMatcher && matches_default2(virtualNode, options.regionMatcher)) return true;
                        return false;
                    }
                    function regionAfter(results) {
                        var iframeResults = results.filter((function(r) {
                            return r.data.isIframe;
                        }));
                        results.forEach((function(r) {
                            if (r.result || 1 === r.node.ancestry.length) return;
                            var frameAncestry = r.node.ancestry.slice(0, -1);
                            var _step15, _iterator15 = _createForOfIteratorHelper(iframeResults);
                            try {
                                for (_iterator15.s(); !(_step15 = _iterator15.n()).done; ) {
                                    var iframeResult = _step15.value;
                                    if (_matchAncestry(frameAncestry, iframeResult.node.ancestry)) {
                                        r.result = iframeResult.result;
                                        break;
                                    }
                                }
                            } catch (err) {
                                _iterator15.e(err);
                            } finally {
                                _iterator15.f();
                            }
                        }));
                        iframeResults.forEach((function(r) {
                            if (!r.result) r.result = true;
                        }));
                        return results;
                    }
                    var region_after_default = regionAfter;
                    function normalizeFontWeight(weight) {
                        switch (weight) {
                          case "lighter":
                            return 100;

                          case "normal":
                            return 400;

                          case "bold":
                            return 700;

                          case "bolder":
                            return 900;
                        }
                        weight = parseInt(weight);
                        return !isNaN(weight) ? weight : 400;
                    }
                    function getTextContainer(elm) {
                        var nextNode = elm;
                        var outerText = elm.textContent.trim();
                        var innerText = outerText;
                        while (innerText === outerText && void 0 !== nextNode) {
                            var _i35 = -1;
                            elm = nextNode;
                            if (0 === elm.children.length) return elm;
                            do {
                                _i35++;
                                innerText = elm.children[_i35].textContent.trim();
                            } while ("" === innerText && _i35 + 1 < elm.children.length);
                            nextNode = elm.children[_i35];
                        }
                        return elm;
                    }
                    function getStyleValues(node) {
                        var style = window.getComputedStyle(getTextContainer(node));
                        return {
                            fontWeight: normalizeFontWeight(style.getPropertyValue("font-weight")),
                            fontSize: parseInt(style.getPropertyValue("font-size")),
                            isItalic: "italic" === style.getPropertyValue("font-style")
                        };
                    }
                    function isHeaderStyle(styleA, styleB, margins) {
                        return margins.reduce((function(out, margin) {
                            return out || (!margin.size || styleA.fontSize / margin.size > styleB.fontSize) && (!margin.weight || styleA.fontWeight - margin.weight > styleB.fontWeight) && (!margin.italic || styleA.isItalic && !styleB.isItalic);
                        }), false);
                    }
                    function pAsHeadingEvaluate(node, options, virtualNode) {
                        var siblings = Array.from(node.parentNode.children);
                        var currentIndex = siblings.indexOf(node);
                        options = options || {};
                        var margins = options.margins || [];
                        var nextSibling = siblings.slice(currentIndex + 1).find((function(elm) {
                            return "P" === elm.nodeName.toUpperCase();
                        }));
                        var prevSibling = siblings.slice(0, currentIndex).reverse().find((function(elm) {
                            return "P" === elm.nodeName.toUpperCase();
                        }));
                        var currStyle = getStyleValues(node);
                        var nextStyle = nextSibling ? getStyleValues(nextSibling) : null;
                        var prevStyle = prevSibling ? getStyleValues(prevSibling) : null;
                        var optionsPassLength = options.passLength;
                        var optionsFailLength = options.failLength;
                        var headingLength = node.textContent.trim().length;
                        var paragraphLength = null === nextSibling || void 0 === nextSibling ? void 0 : nextSibling.textContent.trim().length;
                        if (headingLength > paragraphLength * optionsPassLength) return true;
                        if (!nextStyle || !isHeaderStyle(currStyle, nextStyle, margins)) return true;
                        var blockquote = find_up_virtual_default(virtualNode, "blockquote");
                        if (blockquote && "BLOCKQUOTE" === blockquote.nodeName.toUpperCase()) return;
                        if (prevStyle && !isHeaderStyle(currStyle, prevStyle, margins)) return;
                        if (headingLength > paragraphLength * optionsFailLength) return;
                        return false;
                    }
                    var p_as_heading_evaluate_default = pAsHeadingEvaluate;
                    var separatorRegex = /[;,\s]/;
                    var validRedirectNumRegex = /^[0-9.]+$/;
                    function metaRefreshEvaluate(node, options, virtualNode) {
                        var _ref99 = options || {}, minDelay = _ref99.minDelay, maxDelay = _ref99.maxDelay;
                        var content = (virtualNode.attr("content") || "").trim();
                        var _content$split = content.split(separatorRegex), _content$split2 = _slicedToArray(_content$split, 1), redirectStr = _content$split2[0];
                        if (!redirectStr.match(validRedirectNumRegex)) return true;
                        var redirectDelay = parseFloat(redirectStr);
                        this.data({
                            redirectDelay
                        });
                        if ("number" === typeof minDelay && redirectDelay <= options.minDelay) return true;
                        if ("number" === typeof maxDelay && redirectDelay > options.maxDelay) return true;
                        return false;
                    }
                    function internalLinkPresentEvaluate(node, options, virtualNode) {
                        var links = query_selector_all_default(virtualNode, "a[href]");
                        return links.some((function(vLink) {
                            return /^#[^/!]/.test(vLink.attr("href"));
                        }));
                    }
                    var internal_link_present_evaluate_default = internalLinkPresentEvaluate;
                    var commons_exports = {};
                    __export(commons_exports, {
                        aria: function() {
                            return aria_exports;
                        },
                        color: function() {
                            return color_exports;
                        },
                        dom: function() {
                            return dom_exports;
                        },
                        forms: function() {
                            return forms_exports;
                        },
                        matches: function() {
                            return matches_default2;
                        },
                        math: function() {
                            return math_exports;
                        },
                        standards: function() {
                            return standards_exports;
                        },
                        table: function() {
                            return table_exports;
                        },
                        text: function() {
                            return text_exports;
                        },
                        utils: function() {
                            return utils_exports;
                        }
                    });
                    var color_exports = {};
                    __export(color_exports, {
                        Color: function() {
                            return color_default;
                        },
                        centerPointOfRect: function() {
                            return center_point_of_rect_default;
                        },
                        elementHasImage: function() {
                            return element_has_image_default;
                        },
                        elementIsDistinct: function() {
                            return element_is_distinct_default;
                        },
                        filteredRectStack: function() {
                            return filtered_rect_stack_default;
                        },
                        flattenColors: function() {
                            return _flattenColors;
                        },
                        flattenShadowColors: function() {
                            return _flattenShadowColors;
                        },
                        getBackgroundColor: function() {
                            return _getBackgroundColor2;
                        },
                        getBackgroundStack: function() {
                            return _getBackgroundStack;
                        },
                        getContrast: function() {
                            return get_contrast_default;
                        },
                        getForegroundColor: function() {
                            return _getForegroundColor;
                        },
                        getOwnBackgroundColor: function() {
                            return get_own_background_color_default;
                        },
                        getRectStack: function() {
                            return get_rect_stack_default;
                        },
                        getStackingContext: function() {
                            return _getStackingContext;
                        },
                        getStrokeColorsFromShadows: function() {
                            return _getStrokeColorsFromShadows;
                        },
                        getTextShadowColors: function() {
                            return _getTextShadowColors;
                        },
                        hasValidContrastRatio: function() {
                            return has_valid_contrast_ratio_default;
                        },
                        incompleteData: function() {
                            return incomplete_data_default;
                        },
                        parseTextShadows: function() {
                            return _parseTextShadows;
                        },
                        stackingContextToColor: function() {
                            return _stackingContextToColor;
                        }
                    });
                    function centerPointOfRect(rect) {
                        if (rect.left > window.innerWidth) return;
                        if (rect.top > window.innerHeight) return;
                        var x = Math.min(Math.ceil(rect.left + rect.width / 2), window.innerWidth - 1);
                        var y = Math.min(Math.ceil(rect.top + rect.height / 2), window.innerHeight - 1);
                        return {
                            x,
                            y
                        };
                    }
                    var center_point_of_rect_default = centerPointOfRect;
                    function _getFonts(style) {
                        return style.getPropertyValue("font-family").split(/[,;]/g).map((function(font) {
                            return font.trim().toLowerCase();
                        }));
                    }
                    function elementIsDistinct(node, ancestorNode) {
                        var nodeStyle = window.getComputedStyle(node);
                        if ("none" !== nodeStyle.getPropertyValue("background-image")) return true;
                        var hasBorder = [ "border-bottom", "border-top", "outline" ].reduce((function(result, edge) {
                            var borderClr = new color_default;
                            borderClr.parseString(nodeStyle.getPropertyValue(edge + "-color"));
                            return result || "none" !== nodeStyle.getPropertyValue(edge + "-style") && parseFloat(nodeStyle.getPropertyValue(edge + "-width")) > 0 && 0 !== borderClr.alpha;
                        }), false);
                        if (hasBorder) return true;
                        var parentStyle = window.getComputedStyle(ancestorNode);
                        if (_getFonts(nodeStyle)[0] !== _getFonts(parentStyle)[0]) return true;
                        var hasStyle = [ "text-decoration-line", "text-decoration-style", "font-weight", "font-style", "font-size" ].reduce((function(result, cssProp) {
                            return result || nodeStyle.getPropertyValue(cssProp) !== parentStyle.getPropertyValue(cssProp);
                        }), false);
                        var tDec = nodeStyle.getPropertyValue("text-decoration");
                        if (tDec.split(" ").length < 3) hasStyle = hasStyle || tDec !== parentStyle.getPropertyValue("text-decoration");
                        return hasStyle;
                    }
                    var element_is_distinct_default = elementIsDistinct;
                    function getRectStack2(elm) {
                        var boundingStack = get_element_stack_default(elm);
                        var filteredArr = get_text_element_stack_default(elm);
                        if (!filteredArr || filteredArr.length <= 1) return [ boundingStack ];
                        if (filteredArr.some((function(stack) {
                            return void 0 === stack;
                        }))) return null;
                        filteredArr.splice(0, 0, boundingStack);
                        return filteredArr;
                    }
                    var get_rect_stack_default = getRectStack2;
                    function filteredRectStack(elm) {
                        var rectStack = get_rect_stack_default(elm);
                        if (rectStack && 1 === rectStack.length) return rectStack[0];
                        if (rectStack && rectStack.length > 1) {
                            var boundingStack = rectStack.shift();
                            var isSame;
                            rectStack.forEach((function(rectList, index) {
                                if (0 === index) return;
                                var rectA = rectStack[index - 1], rectB = rectStack[index];
                                isSame = rectA.every((function(element, elementIndex) {
                                    return element === rectB[elementIndex];
                                })) || boundingStack.includes(elm);
                            }));
                            if (!isSame) {
                                incomplete_data_default.set("bgColor", "elmPartiallyObscuring");
                                return null;
                            }
                            return rectStack[0];
                        }
                        incomplete_data_default.set("bgColor", "outsideViewport");
                        return null;
                    }
                    var filtered_rect_stack_default = filteredRectStack;
                    var nonSeparableBlendModes = [ "hue", "saturation", "color", "luminosity" ];
                    var blendFunctions = {
                        normal: function(Cb, Cs) {
                            return Cs;
                        },
                        multiply: function(Cb, Cs) {
                            return Cs * Cb;
                        },
                        screen: function(Cb, Cs) {
                            return Cb + Cs - Cb * Cs;
                        },
                        overlay: function(Cb, Cs) {
                            return this["hard-light"](Cs, Cb);
                        },
                        darken: function(Cb, Cs) {
                            return Math.min(Cb, Cs);
                        },
                        lighten: function(Cb, Cs) {
                            return Math.max(Cb, Cs);
                        },
                        "color-dodge": function(Cb, Cs) {
                            return 0 === Cb ? 0 : 1 === Cs ? 1 : Math.min(1, Cb / (1 - Cs));
                        },
                        "color-burn": function(Cb, Cs) {
                            return 1 === Cb ? 1 : 0 === Cs ? 0 : 1 - Math.min(1, (1 - Cb) / Cs);
                        },
                        "hard-light": function(Cb, Cs) {
                            return Cs <= .5 ? this.multiply(Cb, 2 * Cs) : this.screen(Cb, 2 * Cs - 1);
                        },
                        "soft-light": function(Cb, Cs) {
                            if (Cs <= .5) return Cb - (1 - 2 * Cs) * Cb * (1 - Cb); else {
                                var D = Cb <= .25 ? ((16 * Cb - 12) * Cb + 4) * Cb : Math.sqrt(Cb);
                                return Cb + (2 * Cs - 1) * (D - Cb);
                            }
                        },
                        difference: function(Cb, Cs) {
                            return Math.abs(Cb - Cs);
                        },
                        exclusion: function(Cb, Cs) {
                            return Cb + Cs - 2 * Cb * Cs;
                        },
                        hue: function(Cb, Cs) {
                            return Cs.setSaturation(Cb.getSaturation()).setLuminosity(Cb.getLuminosity());
                        },
                        saturation: function(Cb, Cs) {
                            return Cb.setSaturation(Cs.getSaturation()).setLuminosity(Cb.getLuminosity());
                        },
                        color: function(Cb, Cs) {
                            return Cs.setLuminosity(Cb.getLuminosity());
                        },
                        luminosity: function(Cb, Cs) {
                            return Cb.setLuminosity(Cs.getLuminosity());
                        }
                    };
                    function _flattenColors(sourceColor, backdrop) {
                        var blendMode = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "normal";
                        var blendingResult = blend(backdrop, sourceColor, blendMode);
                        var r = simpleAlphaCompositing(sourceColor.red, sourceColor.alpha, backdrop.red, backdrop.alpha, 255 * blendingResult.r);
                        var g2 = simpleAlphaCompositing(sourceColor.green, sourceColor.alpha, backdrop.green, backdrop.alpha, 255 * blendingResult.g);
                        var b2 = simpleAlphaCompositing(sourceColor.blue, sourceColor.alpha, backdrop.blue, backdrop.alpha, 255 * blendingResult.b);
                        var αo = clamp2(sourceColor.alpha + backdrop.alpha * (1 - sourceColor.alpha), 0, 1);
                        if (0 === αo) return new color_default(r, g2, b2, αo);
                        var Cr = Math.round(r / αo);
                        var Cg = Math.round(g2 / αo);
                        var Cb = Math.round(b2 / αo);
                        return new color_default(Cr, Cg, Cb, αo);
                    }
                    function simpleAlphaCompositing(Cs, αs, Cb, αb, blendingResult) {
                        return αs * (1 - αb) * Cs + αs * αb * blendingResult + (1 - αs) * αb * Cb;
                    }
                    function clamp2(value, min, max2) {
                        return Math.min(Math.max(min, value), max2);
                    }
                    function blend(Cb, Cs, blendMode) {
                        if (nonSeparableBlendModes.includes(blendMode)) return blendFunctions[blendMode](Cb, Cs);
                        var C = new color_default;
                        [ "r", "g", "b" ].forEach((function(channel) {
                            C[channel] = blendFunctions[blendMode](Cb[channel], Cs[channel]);
                        }));
                        return C;
                    }
                    function _flattenShadowColors(fgColor, bgColor) {
                        var alpha = fgColor.alpha;
                        var r = (1 - alpha) * bgColor.red + alpha * fgColor.red;
                        var g2 = (1 - alpha) * bgColor.green + alpha * fgColor.green;
                        var b2 = (1 - alpha) * bgColor.blue + alpha * fgColor.blue;
                        var a2 = fgColor.alpha + bgColor.alpha * (1 - fgColor.alpha);
                        return new color_default(r, g2, b2, a2);
                    }
                    function _getBackgroundStack(node) {
                        var stacks = get_text_element_stack_default(node).map((function(stack) {
                            stack = reduce_to_elements_below_floating_default(stack, node);
                            stack = sortPageBackground(stack);
                            return stack;
                        }));
                        for (var index = 0; index < stacks.length; index++) {
                            var stack = stacks[index];
                            if (stack[0] !== node) {
                                incomplete_data_default.set("bgColor", "bgOverlap");
                                return null;
                            }
                            if (0 !== index && !shallowArraysEqual(stack, stacks[0])) {
                                incomplete_data_default.set("bgColor", "elmPartiallyObscuring");
                                return null;
                            }
                        }
                        return stacks[0] || null;
                    }
                    function sortPageBackground(elmStack) {
                        var bodyIndex = elmStack.indexOf(document.body);
                        var bgNodes = elmStack;
                        var htmlBgColor = get_own_background_color_default(window.getComputedStyle(document.documentElement));
                        if (bodyIndex > 1 && 0 === htmlBgColor.alpha && !element_has_image_default(document.documentElement)) {
                            if (bodyIndex > 1) {
                                bgNodes.splice(bodyIndex, 1);
                                bgNodes.push(document.body);
                            }
                            var htmlIndex = bgNodes.indexOf(document.documentElement);
                            if (htmlIndex > 0) {
                                bgNodes.splice(htmlIndex, 1);
                                bgNodes.push(document.documentElement);
                            }
                        }
                        return bgNodes;
                    }
                    function shallowArraysEqual(a2, b2) {
                        if (a2 === b2) return true;
                        if (null === a2 || null === b2) return false;
                        if (a2.length !== b2.length) return false;
                        for (var _i36 = 0; _i36 < a2.length; ++_i36) if (a2[_i36] !== b2[_i36]) return false;
                        return true;
                    }
                    var SHADOW_STROKE_ALPHA = .54;
                    var VISIBLE_SHADOW_MIN_PX = .5;
                    var OPAQUE_STROKE_OFFSET_MIN_PX = 1.5;
                    var edges = [ "top", "right", "bottom", "left" ];
                    function _getStrokeColorsFromShadows(parsedShadows) {
                        var _ref100 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, _ref100$ignoreEdgeCou = _ref100.ignoreEdgeCount, ignoreEdgeCount = void 0 === _ref100$ignoreEdgeCou ? false : _ref100$ignoreEdgeCou;
                        var shadowMap = getShadowColorsMap(parsedShadows);
                        var shadowsByColor = Object.entries(shadowMap).map((function(_ref101) {
                            var _ref102 = _slicedToArray(_ref101, 2), colorStr = _ref102[0], sides = _ref102[1];
                            var edgeCount = edges.filter((function(side) {
                                return 0 !== sides[side].length;
                            })).length;
                            return {
                                colorStr,
                                sides,
                                edgeCount
                            };
                        }));
                        if (!ignoreEdgeCount && shadowsByColor.some((function(_ref103) {
                            var edgeCount = _ref103.edgeCount;
                            return edgeCount > 1 && edgeCount < 4;
                        }))) return null;
                        return shadowsByColor.map(shadowGroupToColor).filter((function(shadow) {
                            return null !== shadow;
                        }));
                    }
                    function getShadowColorsMap(parsedShadows) {
                        var colorMap = {};
                        var _step16, _iterator16 = _createForOfIteratorHelper(parsedShadows);
                        try {
                            for (_iterator16.s(); !(_step16 = _iterator16.n()).done; ) {
                                var _colorMap$colorStr;
                                var _step16$value = _step16.value, colorStr = _step16$value.colorStr, pixels = _step16$value.pixels;
                                null !== (_colorMap$colorStr = colorMap[colorStr]) && void 0 !== _colorMap$colorStr ? _colorMap$colorStr : colorMap[colorStr] = {
                                    top: [],
                                    right: [],
                                    bottom: [],
                                    left: []
                                };
                                var borders = colorMap[colorStr];
                                var _pixels = _slicedToArray(pixels, 2), offsetX = _pixels[0], offsetY = _pixels[1];
                                if (offsetX > VISIBLE_SHADOW_MIN_PX) borders.right.push(offsetX); else if (-offsetX > VISIBLE_SHADOW_MIN_PX) borders.left.push(-offsetX);
                                if (offsetY > VISIBLE_SHADOW_MIN_PX) borders.bottom.push(offsetY); else if (-offsetY > VISIBLE_SHADOW_MIN_PX) borders.top.push(-offsetY);
                            }
                        } catch (err) {
                            _iterator16.e(err);
                        } finally {
                            _iterator16.f();
                        }
                        return colorMap;
                    }
                    function shadowGroupToColor(_ref104) {
                        var colorStr = _ref104.colorStr, sides = _ref104.sides, edgeCount = _ref104.edgeCount;
                        if (4 !== edgeCount) return null;
                        var strokeColor = new color_default;
                        strokeColor.parseString(colorStr);
                        var density = 0;
                        var isSolid = true;
                        edges.forEach((function(edge) {
                            density += sides[edge].length / 4;
                            isSolid && (isSolid = sides[edge].every((function(offset) {
                                return offset > OPAQUE_STROKE_OFFSET_MIN_PX;
                            })));
                        }));
                        if (!isSolid) strokeColor.alpha = 1 - Math.pow(SHADOW_STROKE_ALPHA, density);
                        return strokeColor;
                    }
                    function _parseTextShadows(textShadow) {
                        var current = {
                            pixels: []
                        };
                        var str = textShadow.trim();
                        var shadows = [ current ];
                        if (!str) return [];
                        while (str) {
                            var colorMatch = str.match(/^[a-z]+(\([^)]+\))?/i) || str.match(/^#[0-9a-f]+/i);
                            var pixelMatch = str.match(/^([0-9.-]+)px/i) || str.match(/^(0)/);
                            if (colorMatch) {
                                assert_default(!current.colorStr, "Multiple colors identified in text-shadow: ".concat(textShadow));
                                str = str.replace(colorMatch[0], "").trim();
                                current.colorStr = colorMatch[0];
                            } else if (pixelMatch) {
                                assert_default(current.pixels.length < 3, "Too many pixel units in text-shadow: ".concat(textShadow));
                                str = str.replace(pixelMatch[0], "").trim();
                                var pixelUnit = parseFloat(("." === pixelMatch[1][0] ? "0" : "") + pixelMatch[1]);
                                current.pixels.push(pixelUnit);
                            } else if ("," === str[0]) {
                                assert_default(current.pixels.length >= 2, "Missing pixel value in text-shadow: ".concat(textShadow));
                                current = {
                                    pixels: []
                                };
                                shadows.push(current);
                                str = str.substr(1).trim();
                            } else throw new Error("Unable to process text-shadows: ".concat(str));
                        }
                        shadows.forEach((function(_ref105) {
                            var pixels = _ref105.pixels;
                            if (2 === pixels.length) pixels.push(0);
                        }));
                        return shadows;
                    }
                    function _getTextShadowColors(node) {
                        var _ref106 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, minRatio = _ref106.minRatio, maxRatio = _ref106.maxRatio, ignoreEdgeCount = _ref106.ignoreEdgeCount;
                        var shadowColors = [];
                        var style = window.getComputedStyle(node);
                        var textShadow = style.getPropertyValue("text-shadow");
                        if ("none" === textShadow) return shadowColors;
                        var fontSizeStr = style.getPropertyValue("font-size");
                        var fontSize = parseInt(fontSizeStr);
                        assert_default(false === isNaN(fontSize), "Unable to determine font-size value ".concat(fontSizeStr));
                        var thinShadows = [];
                        var shadows = _parseTextShadows(textShadow);
                        var _step17, _iterator17 = _createForOfIteratorHelper(shadows);
                        try {
                            for (_iterator17.s(); !(_step17 = _iterator17.n()).done; ) {
                                var shadow = _step17.value;
                                var colorStr = shadow.colorStr || style.getPropertyValue("color");
                                var _shadow$pixels = _slicedToArray(shadow.pixels, 3), offsetX = _shadow$pixels[0], offsetY = _shadow$pixels[1], _shadow$pixels$ = _shadow$pixels[2], blurRadius = void 0 === _shadow$pixels$ ? 0 : _shadow$pixels$;
                                if (maxRatio && blurRadius >= fontSize * maxRatio) continue;
                                if (minRatio && blurRadius < fontSize * minRatio) {
                                    thinShadows.push({
                                        colorStr,
                                        pixels: shadow.pixels
                                    });
                                    continue;
                                }
                                if (thinShadows.length > 0) {
                                    var _strokeColors = _getStrokeColorsFromShadows(thinShadows, {
                                        ignoreEdgeCount
                                    });
                                    if (null === _strokeColors) return null;
                                    shadowColors.push.apply(shadowColors, _toConsumableArray(_strokeColors));
                                    thinShadows.splice(0, thinShadows.length);
                                }
                                var _color3 = textShadowColor({
                                    colorStr,
                                    offsetX,
                                    offsetY,
                                    blurRadius,
                                    fontSize
                                });
                                shadowColors.push(_color3);
                            }
                        } catch (err) {
                            _iterator17.e(err);
                        } finally {
                            _iterator17.f();
                        }
                        if (thinShadows.length > 0) {
                            var strokeColors = _getStrokeColorsFromShadows(thinShadows, {
                                ignoreEdgeCount
                            });
                            if (null === strokeColors) return null;
                            shadowColors.push.apply(shadowColors, _toConsumableArray(strokeColors));
                        }
                        return shadowColors;
                    }
                    function textShadowColor(_ref107) {
                        var colorStr = _ref107.colorStr, offsetX = _ref107.offsetX, offsetY = _ref107.offsetY, blurRadius = _ref107.blurRadius, fontSize = _ref107.fontSize;
                        if (offsetX > blurRadius || offsetY > blurRadius) return new color_default(0, 0, 0, 0);
                        var shadowColor = new color_default;
                        shadowColor.parseString(colorStr);
                        shadowColor.alpha *= blurRadiusToAlpha(blurRadius, fontSize);
                        return shadowColor;
                    }
                    function blurRadiusToAlpha(blurRadius, fontSize) {
                        if (0 === blurRadius) return 1;
                        var relativeBlur = blurRadius / fontSize;
                        return .185 / (relativeBlur + .4);
                    }
                    function _getStackingContext(elm, elmStack) {
                        var _elmStack;
                        var virtualNode = get_node_from_tree_default(elm);
                        if (virtualNode._stackingContext) return virtualNode._stackingContext;
                        var stackingContext = [];
                        var contextMap = new Map;
                        elmStack = null !== (_elmStack = elmStack) && void 0 !== _elmStack ? _elmStack : _getBackgroundStack(elm);
                        elmStack.forEach((function(bgElm) {
                            var _stackingOrder2;
                            var bgVNode = get_node_from_tree_default(bgElm);
                            var bgColor = getOwnBackgroundColor2(bgVNode);
                            var stackingOrder = bgVNode._stackingOrder.filter((function(_ref108) {
                                var vNode = _ref108.vNode;
                                return !!vNode;
                            }));
                            stackingOrder.forEach((function(_ref109, index) {
                                var _stackingOrder;
                                var vNode = _ref109.vNode;
                                var ancestorVNode2 = null === (_stackingOrder = stackingOrder[index - 1]) || void 0 === _stackingOrder ? void 0 : _stackingOrder.vNode;
                                var context2 = addToStackingContext(contextMap, vNode, ancestorVNode2);
                                if (0 === index && !contextMap.get(vNode)) stackingContext.unshift(context2);
                                contextMap.set(vNode, context2);
                            }));
                            var ancestorVNode = null === (_stackingOrder2 = stackingOrder[stackingOrder.length - 1]) || void 0 === _stackingOrder2 ? void 0 : _stackingOrder2.vNode;
                            var context = addToStackingContext(contextMap, bgVNode, ancestorVNode);
                            if (!stackingOrder.length) stackingContext.unshift(context);
                            context.bgColor = bgColor;
                        }));
                        virtualNode._stackingContext = stackingContext;
                        return stackingContext;
                    }
                    function _stackingContextToColor(context) {
                        var _context$descendants;
                        if (!(null !== (_context$descendants = context.descendants) && void 0 !== _context$descendants && _context$descendants.length)) {
                            var color2 = context.bgColor;
                            color2.alpha *= context.opacity;
                            return {
                                color: color2,
                                blendMode: context.blendMode
                            };
                        }
                        var sourceColor = context.descendants.reduce(reduceToColor, createStackingContext2());
                        var color = _flattenColors(sourceColor, context.bgColor, context.descendants[0].blendMode);
                        color.alpha *= context.opacity;
                        return {
                            color,
                            blendMode: context.blendMode
                        };
                    }
                    function reduceToColor(backdropContext, sourceContext) {
                        var backdrop;
                        if (backdropContext instanceof color_default) backdrop = backdropContext; else backdrop = _stackingContextToColor(backdropContext).color;
                        var sourceColor = _stackingContextToColor(sourceContext).color;
                        return _flattenColors(sourceColor, backdrop, sourceContext.blendMode);
                    }
                    function createStackingContext2(vNode, ancestorContext) {
                        var _vNode$getComputedSty;
                        return {
                            vNode,
                            ancestor: ancestorContext,
                            opacity: parseFloat(null !== (_vNode$getComputedSty = null === vNode || void 0 === vNode ? void 0 : vNode.getComputedStylePropertyValue("opacity")) && void 0 !== _vNode$getComputedSty ? _vNode$getComputedSty : 1),
                            bgColor: new color_default(0, 0, 0, 0),
                            blendMode: normalizeBlendMode(null === vNode || void 0 === vNode ? void 0 : vNode.getComputedStylePropertyValue("mix-blend-mode")),
                            descendants: []
                        };
                    }
                    function normalizeBlendMode(blendmode) {
                        return !!blendmode ? blendmode : void 0;
                    }
                    function addToStackingContext(contextMap, vNode, ancestorVNode) {
                        var _contextMap$get;
                        var ancestorContext = contextMap.get(ancestorVNode);
                        var context = null !== (_contextMap$get = contextMap.get(vNode)) && void 0 !== _contextMap$get ? _contextMap$get : createStackingContext2(vNode, ancestorContext);
                        if (ancestorContext && ancestorVNode !== vNode && !ancestorContext.descendants.includes(context)) ancestorContext.descendants.unshift(context);
                        return context;
                    }
                    function getOwnBackgroundColor2(vNode) {
                        var bgColor = new color_default;
                        bgColor.parseString(vNode.getComputedStylePropertyValue("background-color"));
                        return bgColor;
                    }
                    function _getBackgroundColor2(elm) {
                        var bgElms = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
                        var shadowOutlineEmMax = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : .1;
                        var vNode = get_node_from_tree_default(elm);
                        var bgColorCache = vNode._cache.getBackgroundColor;
                        if (bgColorCache) {
                            bgElms.push.apply(bgElms, _toConsumableArray(bgColorCache.bgElms));
                            incomplete_data_default.set("bgColor", bgColorCache.incompleteData);
                            return bgColorCache.bgColor;
                        }
                        var bgColor = _getBackgroundColor(elm, bgElms, shadowOutlineEmMax);
                        vNode._cache.getBackgroundColor = {
                            bgColor,
                            bgElms,
                            incompleteData: incomplete_data_default.get("bgColor")
                        };
                        return bgColor;
                    }
                    function _getBackgroundColor(elm, bgElms, shadowOutlineEmMax) {
                        var _getTextShadowColors2, _bgColors;
                        var elmStack = _getBackgroundStack(elm);
                        if (!elmStack) return null;
                        var textRects = get_visible_child_text_rects_default(elm);
                        var bgColors = null !== (_getTextShadowColors2 = _getTextShadowColors(elm, {
                            minRatio: shadowOutlineEmMax,
                            ignoreEdgeCount: true
                        })) && void 0 !== _getTextShadowColors2 ? _getTextShadowColors2 : [];
                        if (bgColors.length) bgColors = [ {
                            color: bgColors.reduce(_flattenShadowColors)
                        } ];
                        for (var _i37 = 0; _i37 < elmStack.length; _i37++) {
                            var bgElm = elmStack[_i37];
                            var bgElmStyle = window.getComputedStyle(bgElm);
                            if (element_has_image_default(bgElm, bgElmStyle)) {
                                bgElms.push(bgElm);
                                return null;
                            }
                            var bgColor = get_own_background_color_default(bgElmStyle);
                            if (0 === bgColor.alpha) continue;
                            if ("inline" !== bgElmStyle.getPropertyValue("display") && !fullyEncompasses(bgElm, textRects)) {
                                bgElms.push(bgElm);
                                incomplete_data_default.set("bgColor", "elmPartiallyObscured");
                                return null;
                            }
                            bgElms.push(bgElm);
                            if (1 === bgColor.alpha) break;
                        }
                        var stackingContext = _getStackingContext(elm, elmStack);
                        bgColors = stackingContext.map(_stackingContextToColor).concat(bgColors);
                        var pageBgs = getPageBackgroundColors(elm, elmStack.includes(document.body));
                        (_bgColors = bgColors).unshift.apply(_bgColors, _toConsumableArray(pageBgs));
                        if (0 === bgColors.length) return new color_default(255, 255, 255, 1);
                        var blendedColor = bgColors.reduce((function(bgColor, fgColor) {
                            return _flattenColors(fgColor.color, bgColor.color instanceof color_default ? bgColor.color : bgColor, fgColor.blendMode);
                        }));
                        return _flattenColors(blendedColor.color instanceof color_default ? blendedColor.color : blendedColor, new color_default(255, 255, 255, 1));
                    }
                    function fullyEncompasses(node, rects) {
                        rects = Array.isArray(rects) ? rects : [ rects ];
                        var nodeRect = node.getBoundingClientRect();
                        var right = nodeRect.right, bottom = nodeRect.bottom;
                        var style = window.getComputedStyle(node);
                        var overflow = style.getPropertyValue("overflow");
                        if ([ "scroll", "auto" ].includes(overflow) || node instanceof window.HTMLHtmlElement) {
                            right = nodeRect.left + node.scrollWidth;
                            bottom = nodeRect.top + node.scrollHeight;
                        }
                        return rects.every((function(rect) {
                            return rect.top >= nodeRect.top && rect.bottom <= bottom && rect.left >= nodeRect.left && rect.right <= right;
                        }));
                    }
                    function normalizeBlendMode2(blendmode) {
                        return !!blendmode ? blendmode : void 0;
                    }
                    function getPageBackgroundColors(elm, stackContainsBody) {
                        var pageColors = [];
                        if (!stackContainsBody) {
                            var html = document.documentElement;
                            var body = document.body;
                            var htmlStyle = window.getComputedStyle(html);
                            var bodyStyle = window.getComputedStyle(body);
                            var htmlBgColor = get_own_background_color_default(htmlStyle);
                            var bodyBgColor = get_own_background_color_default(bodyStyle);
                            var bodyBgColorApplies = 0 !== bodyBgColor.alpha && fullyEncompasses(body, elm.getBoundingClientRect());
                            if (0 !== bodyBgColor.alpha && 0 === htmlBgColor.alpha || bodyBgColorApplies && 1 !== bodyBgColor.alpha) pageColors.unshift({
                                color: bodyBgColor,
                                blendMode: normalizeBlendMode2(bodyStyle.getPropertyValue("mix-blend-mode"))
                            });
                            if (0 !== htmlBgColor.alpha && (!bodyBgColorApplies || bodyBgColorApplies && 1 !== bodyBgColor.alpha)) pageColors.unshift({
                                color: htmlBgColor,
                                blendMode: normalizeBlendMode2(htmlStyle.getPropertyValue("mix-blend-mode"))
                            });
                        }
                        return pageColors;
                    }
                    function getContrast(bgColor, fgColor) {
                        if (!fgColor || !bgColor) return null;
                        if (fgColor.alpha < 1) fgColor = _flattenColors(fgColor, bgColor);
                        var bL = bgColor.getRelativeLuminance();
                        var fL = fgColor.getRelativeLuminance();
                        return (Math.max(fL, bL) + .05) / (Math.min(fL, bL) + .05);
                    }
                    var get_contrast_default = getContrast;
                    function _getForegroundColor(node, _, bgColor) {
                        var _bgColor;
                        var options = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
                        var nodeStyle = window.getComputedStyle(node);
                        var colorStack = [ function() {
                            return getStrokeColor(nodeStyle, options);
                        }, function() {
                            return getTextColor(nodeStyle);
                        }, function() {
                            return _getTextShadowColors(node, {
                                minRatio: 0
                            });
                        } ];
                        var fgColors = [];
                        for (var _i38 = 0, _colorStack = colorStack; _i38 < _colorStack.length; _i38++) {
                            var colorFn = _colorStack[_i38];
                            var _color4 = colorFn();
                            if (!_color4) continue;
                            fgColors = fgColors.concat(_color4);
                            if (1 === _color4.alpha) break;
                        }
                        var fgColor = fgColors.reduce((function(source, backdrop) {
                            return _flattenColors(source, backdrop);
                        }));
                        null !== (_bgColor = bgColor) && void 0 !== _bgColor ? _bgColor : bgColor = _getBackgroundColor2(node, []);
                        if (null === bgColor) {
                            var reason = incomplete_data_default.get("bgColor");
                            incomplete_data_default.set("fgColor", reason);
                            return null;
                        }
                        var stackingContexts = _getStackingContext(node);
                        var context = findNodeInContexts(stackingContexts, node);
                        return _flattenColors(calculateBlendedForegroundColor(fgColor, context, stackingContexts), new color_default(255, 255, 255, 1));
                    }
                    function getTextColor(nodeStyle) {
                        return (new color_default).parseString(nodeStyle.getPropertyValue("-webkit-text-fill-color") || nodeStyle.getPropertyValue("color"));
                    }
                    function getStrokeColor(nodeStyle, _ref110) {
                        var _ref110$textStrokeEmM = _ref110.textStrokeEmMin, textStrokeEmMin = void 0 === _ref110$textStrokeEmM ? 0 : _ref110$textStrokeEmM;
                        var strokeWidth = parseFloat(nodeStyle.getPropertyValue("-webkit-text-stroke-width"));
                        if (0 === strokeWidth) return null;
                        var fontSize = nodeStyle.getPropertyValue("font-size");
                        var relativeStrokeWidth = strokeWidth / parseFloat(fontSize);
                        if (isNaN(relativeStrokeWidth) || relativeStrokeWidth < textStrokeEmMin) return null;
                        var strokeColor = nodeStyle.getPropertyValue("-webkit-text-stroke-color");
                        return (new color_default).parseString(strokeColor);
                    }
                    function calculateBlendedForegroundColor(fgColor, context, stackingContexts) {
                        while (context) {
                            var _context$ancestor;
                            if (1 === context.opacity && context.ancestor) {
                                context = context.ancestor;
                                continue;
                            }
                            fgColor.alpha *= context.opacity;
                            var stack = (null === (_context$ancestor = context.ancestor) || void 0 === _context$ancestor ? void 0 : _context$ancestor.descendants) || stackingContexts;
                            if (1 !== context.opacity) stack = stack.slice(0, stack.indexOf(context));
                            var bgColors = stack.map(_stackingContextToColor);
                            if (!bgColors.length) {
                                context = context.ancestor;
                                continue;
                            }
                            var bgColor = bgColors.reduce((function(backdrop, source) {
                                return _flattenColors(source.color, backdrop.color instanceof color_default ? backdrop.color : backdrop);
                            }), {
                                color: new color_default(0, 0, 0, 0),
                                blendMode: "normal"
                            });
                            fgColor = _flattenColors(fgColor, bgColor);
                            context = context.ancestor;
                        }
                        return fgColor;
                    }
                    function findNodeInContexts(contexts, node) {
                        var _step18, _iterator18 = _createForOfIteratorHelper(contexts);
                        try {
                            for (_iterator18.s(); !(_step18 = _iterator18.n()).done; ) {
                                var _context$vNode;
                                var context = _step18.value;
                                if ((null === (_context$vNode = context.vNode) || void 0 === _context$vNode ? void 0 : _context$vNode.actualNode) === node) return context;
                                var found = findNodeInContexts(context.descendants, node);
                                if (found) return found;
                            }
                        } catch (err) {
                            _iterator18.e(err);
                        } finally {
                            _iterator18.f();
                        }
                    }
                    function hasValidContrastRatio(bg, fg, fontSize, isBold) {
                        var contrast2 = get_contrast_default(bg, fg);
                        var isSmallFont = isBold && Math.ceil(72 * fontSize) / 96 < 14 || !isBold && Math.ceil(72 * fontSize) / 96 < 18;
                        var expectedContrastRatio = isSmallFont ? 4.5 : 3;
                        return {
                            isValid: contrast2 > expectedContrastRatio,
                            contrastRatio: contrast2,
                            expectedContrastRatio
                        };
                    }
                    var has_valid_contrast_ratio_default = hasValidContrastRatio;
                    var forms_exports = {};
                    __export(forms_exports, {
                        isAriaCombobox: function() {
                            return is_aria_combobox_default;
                        },
                        isAriaListbox: function() {
                            return is_aria_listbox_default;
                        },
                        isAriaRange: function() {
                            return is_aria_range_default;
                        },
                        isAriaTextbox: function() {
                            return is_aria_textbox_default;
                        },
                        isDisabled: function() {
                            return is_disabled_default;
                        },
                        isNativeSelect: function() {
                            return is_native_select_default;
                        },
                        isNativeTextbox: function() {
                            return is_native_textbox_default;
                        }
                    });
                    var disabledNodeNames = [ "fieldset", "button", "select", "input", "textarea" ];
                    function isDisabled(virtualNode) {
                        var disabledState = virtualNode._isDisabled;
                        if ("boolean" === typeof disabledState) return disabledState;
                        var nodeName2 = virtualNode.props.nodeName;
                        var ariaDisabled = virtualNode.attr("aria-disabled");
                        if (disabledNodeNames.includes(nodeName2) && virtualNode.hasAttr("disabled")) disabledState = true; else if (ariaDisabled) disabledState = "true" === ariaDisabled.toLowerCase(); else if (virtualNode.parent) disabledState = isDisabled(virtualNode.parent); else disabledState = false;
                        virtualNode._isDisabled = disabledState;
                        return disabledState;
                    }
                    var is_disabled_default = isDisabled;
                    function identicalLinksSamePurposeEvaluate(node, options, virtualNode) {
                        var accText = text_exports.accessibleTextVirtual(virtualNode);
                        var name = text_exports.sanitize(text_exports.removeUnicode(accText, {
                            emoji: true,
                            nonBmp: true,
                            punctuations: true
                        })).toLowerCase();
                        if (!name) return;
                        var afterData = {
                            name,
                            urlProps: dom_exports.urlPropsFromAttribute(node, "href")
                        };
                        this.data(afterData);
                        this.relatedNodes([ node ]);
                        return true;
                    }
                    var identical_links_same_purpose_evaluate_default = identicalLinksSamePurposeEvaluate;
                    function isIdenticalObject(a2, b2) {
                        if (!a2 || !b2) return false;
                        var aProps = Object.getOwnPropertyNames(a2);
                        var bProps = Object.getOwnPropertyNames(b2);
                        if (aProps.length !== bProps.length) return false;
                        var result = aProps.every((function(propName) {
                            var aValue = a2[propName];
                            var bValue = b2[propName];
                            if (_typeof(aValue) !== _typeof(bValue)) return false;
                            if ("object" === _typeof(aValue) || "object" === _typeof(bValue)) return isIdenticalObject(aValue, bValue);
                            return aValue === bValue;
                        }));
                        return result;
                    }
                    function identicalLinksSamePurposeAfter(results) {
                        if (results.length < 2) return results;
                        var incompleteResults = results.filter((function(_ref111) {
                            var result = _ref111.result;
                            return void 0 !== result;
                        }));
                        var uniqueResults = [];
                        var nameMap = {};
                        var _loop8 = function(index) {
                            var _currentResult$relate;
                            var currentResult = incompleteResults[index];
                            var _currentResult$data = currentResult.data, name = _currentResult$data.name, urlProps = _currentResult$data.urlProps;
                            if (nameMap[name]) return 1;
                            var sameNameResults = incompleteResults.filter((function(_ref112, resultNum) {
                                var data = _ref112.data;
                                return data.name === name && resultNum !== index;
                            }));
                            var isSameUrl = sameNameResults.every((function(_ref113) {
                                var data = _ref113.data;
                                return isIdenticalObject(data.urlProps, urlProps);
                            }));
                            if (sameNameResults.length && !isSameUrl) currentResult.result = void 0;
                            currentResult.relatedNodes = [];
                            (_currentResult$relate = currentResult.relatedNodes).push.apply(_currentResult$relate, _toConsumableArray(sameNameResults.map((function(node) {
                                return node.relatedNodes[0];
                            }))));
                            nameMap[name] = sameNameResults;
                            uniqueResults.push(currentResult);
                        };
                        for (var index = 0; index < incompleteResults.length; index++) if (_loop8(index)) continue;
                        return uniqueResults;
                    }
                    var identical_links_same_purpose_after_default = identicalLinksSamePurposeAfter;
                    function getLevel(vNode) {
                        var role = get_role_default(vNode);
                        var headingRole = role && role.includes("heading");
                        var ariaHeadingLevel = vNode.attr("aria-level");
                        var ariaLevel = parseInt(ariaHeadingLevel, 10);
                        var _ref114 = vNode.props.nodeName.match(/h(\d)/) || [], _ref115 = _slicedToArray(_ref114, 2), headingLevel = _ref115[1];
                        if (!headingRole) return -1;
                        if (headingLevel && !ariaHeadingLevel) return parseInt(headingLevel, 10);
                        if (isNaN(ariaLevel) || ariaLevel < 1) {
                            if (headingLevel) return parseInt(headingLevel, 10);
                            return 2;
                        }
                        if (ariaLevel) return ariaLevel;
                        return -1;
                    }
                    function headingOrderEvaluate() {
                        var headingOrder = cache_default.get("headingOrder");
                        if (headingOrder) return true;
                        var selector = "h1, h2, h3, h4, h5, h6, [role=heading], iframe, frame";
                        var vNodes = query_selector_all_filter_default(axe._tree[0], selector, _isVisibleToScreenReaders);
                        headingOrder = vNodes.map((function(vNode) {
                            return {
                                ancestry: [ _getAncestry(vNode.actualNode) ],
                                level: getLevel(vNode)
                            };
                        }));
                        this.data({
                            headingOrder
                        });
                        cache_default.set("headingOrder", vNodes);
                        return true;
                    }
                    var heading_order_evaluate_default = headingOrderEvaluate;
                    function headingOrderAfter(results) {
                        var headingOrder = getHeadingOrder(results);
                        results.forEach((function(result) {
                            result.result = getHeadingOrderOutcome(result, headingOrder);
                        }));
                        return results;
                    }
                    function getHeadingOrderOutcome(result, headingOrder) {
                        var _headingOrder$index$l, _headingOrder$index, _headingOrder$level, _headingOrder;
                        var index = findHeadingOrderIndex(headingOrder, result.node.ancestry);
                        var currLevel = null !== (_headingOrder$index$l = null === (_headingOrder$index = headingOrder[index]) || void 0 === _headingOrder$index ? void 0 : _headingOrder$index.level) && void 0 !== _headingOrder$index$l ? _headingOrder$index$l : -1;
                        var prevLevel = null !== (_headingOrder$level = null === (_headingOrder = headingOrder[index - 1]) || void 0 === _headingOrder ? void 0 : _headingOrder.level) && void 0 !== _headingOrder$level ? _headingOrder$level : -1;
                        if (0 === index) return true;
                        if (-1 === currLevel) return;
                        return currLevel - prevLevel <= 1;
                    }
                    function getHeadingOrder(results) {
                        results = _toConsumableArray(results);
                        results.sort((function(_ref116, _ref117) {
                            var nodeA = _ref116.node;
                            var nodeB = _ref117.node;
                            return nodeA.ancestry.length - nodeB.ancestry.length;
                        }));
                        var headingOrder = results.reduce(mergeHeadingOrder, []);
                        return headingOrder.filter((function(_ref118) {
                            var level = _ref118.level;
                            return -1 !== level;
                        }));
                    }
                    function mergeHeadingOrder(mergedHeadingOrder, result) {
                        var _result$data;
                        var frameHeadingOrder = null === (_result$data = result.data) || void 0 === _result$data ? void 0 : _result$data.headingOrder;
                        var frameAncestry = shortenArray(result.node.ancestry, 1);
                        if (!frameHeadingOrder) return mergedHeadingOrder;
                        var normalizedHeadingOrder = frameHeadingOrder.map((function(heading) {
                            return addFrameToHeadingAncestry(heading, frameAncestry);
                        }));
                        var index = getFrameIndex(mergedHeadingOrder, frameAncestry);
                        if (-1 === index) mergedHeadingOrder.push.apply(mergedHeadingOrder, _toConsumableArray(normalizedHeadingOrder)); else mergedHeadingOrder.splice.apply(mergedHeadingOrder, [ index, 0 ].concat(_toConsumableArray(normalizedHeadingOrder)));
                        return mergedHeadingOrder;
                    }
                    function getFrameIndex(headingOrder, frameAncestry) {
                        while (frameAncestry.length) {
                            var index = findHeadingOrderIndex(headingOrder, frameAncestry);
                            if (-1 !== index) return index;
                            frameAncestry = shortenArray(frameAncestry, 1);
                        }
                        return -1;
                    }
                    function findHeadingOrderIndex(headingOrder, ancestry) {
                        return headingOrder.findIndex((function(heading) {
                            return _matchAncestry(heading.ancestry, ancestry);
                        }));
                    }
                    function addFrameToHeadingAncestry(heading, frameAncestry) {
                        var ancestry = frameAncestry.concat(heading.ancestry);
                        return _extends({}, heading, {
                            ancestry
                        });
                    }
                    function shortenArray(arr, spliceLength) {
                        return arr.slice(0, arr.length - spliceLength);
                    }
                    function targetSizeEvaluate(node, options, vNode) {
                        var minSize = (null === options || void 0 === options ? void 0 : options.minSize) || 24;
                        var nodeRect = vNode.boundingClientRect;
                        if (_rectHasMinimumSize(10 * minSize, nodeRect)) {
                            this.data({
                                messageKey: "large",
                                minSize
                            });
                            return true;
                        }
                        var hasMinimumSize = _rectHasMinimumSize.bind(null, minSize);
                        var nearbyElms = _findNearbyElms(vNode);
                        var overflowingContent = filterOverflowingContent(vNode, nearbyElms);
                        var _filterByElmsOverlap = filterByElmsOverlap(vNode, nearbyElms), fullyObscuringElms = _filterByElmsOverlap.fullyObscuringElms, partialObscuringElms = _filterByElmsOverlap.partialObscuringElms;
                        if (overflowingContent.length && (fullyObscuringElms.length || !hasMinimumSize(nodeRect))) {
                            this.data({
                                minSize,
                                messageKey: "contentOverflow"
                            });
                            this.relatedNodes(mapActualNodes(overflowingContent));
                            return;
                        }
                        if (fullyObscuringElms.length) {
                            this.relatedNodes(mapActualNodes(fullyObscuringElms));
                            this.data({
                                messageKey: "obscured"
                            });
                            return true;
                        }
                        var negativeOutcome = _isInTabOrder(vNode) ? false : void 0;
                        if (!hasMinimumSize(nodeRect)) {
                            this.data(_extends({
                                minSize
                            }, toDecimalSize(nodeRect)));
                            return negativeOutcome;
                        }
                        var obscuredWidgets = filterFocusableWidgets(partialObscuringElms);
                        if (!obscuredWidgets.length) {
                            this.data(_extends({
                                minSize
                            }, toDecimalSize(nodeRect)));
                            return true;
                        }
                        var largestInnerRect = getLargestUnobscuredArea(vNode, obscuredWidgets);
                        if (!largestInnerRect) {
                            this.data({
                                minSize,
                                messageKey: "tooManyRects"
                            });
                            return;
                        }
                        if (!hasMinimumSize(largestInnerRect)) {
                            if (overflowingContent.length) {
                                this.data({
                                    minSize,
                                    messageKey: "contentOverflow"
                                });
                                this.relatedNodes(mapActualNodes(overflowingContent));
                                return;
                            }
                            var allTabbable = obscuredWidgets.every(_isInTabOrder);
                            var messageKey = "partiallyObscured".concat(allTabbable ? "" : "NonTabbable");
                            this.data(_extends({
                                messageKey,
                                minSize
                            }, toDecimalSize(largestInnerRect)));
                            this.relatedNodes(mapActualNodes(obscuredWidgets));
                            return allTabbable ? negativeOutcome : void 0;
                        }
                        this.data(_extends({
                            minSize
                        }, toDecimalSize(largestInnerRect || nodeRect)));
                        this.relatedNodes(mapActualNodes(obscuredWidgets));
                        return true;
                    }
                    function filterOverflowingContent(vNode, nearbyElms) {
                        return nearbyElms.filter((function(nearbyElm) {
                            return !isEnclosedRect2(nearbyElm, vNode) && isDescendantNotInTabOrder2(vNode, nearbyElm);
                        }));
                    }
                    function filterByElmsOverlap(vNode, nearbyElms) {
                        var fullyObscuringElms = [];
                        var partialObscuringElms = [];
                        var _step19, _iterator19 = _createForOfIteratorHelper(nearbyElms);
                        try {
                            for (_iterator19.s(); !(_step19 = _iterator19.n()).done; ) {
                                var vNeighbor = _step19.value;
                                if (!isDescendantNotInTabOrder2(vNode, vNeighbor) && _hasVisualOverlap(vNode, vNeighbor) && "none" !== getCssPointerEvents(vNeighbor)) if (isEnclosedRect2(vNode, vNeighbor)) fullyObscuringElms.push(vNeighbor); else partialObscuringElms.push(vNeighbor);
                            }
                        } catch (err) {
                            _iterator19.e(err);
                        } finally {
                            _iterator19.f();
                        }
                        return {
                            fullyObscuringElms,
                            partialObscuringElms
                        };
                    }
                    function getLargestUnobscuredArea(vNode, obscuredNodes) {
                        var nodeRect = vNode.boundingClientRect;
                        var obscuringRects = obscuredNodes.map((function(_ref119) {
                            var rect = _ref119.boundingClientRect;
                            return rect;
                        }));
                        var unobscuredRects;
                        try {
                            unobscuredRects = _splitRects(nodeRect, obscuringRects);
                        } catch (_unused9) {
                            return null;
                        }
                        return getLargestRect2(unobscuredRects);
                    }
                    function getLargestRect2(rects, minSize) {
                        return rects.reduce((function(rectA, rectB) {
                            var rectAisMinimum = _rectHasMinimumSize(minSize, rectA);
                            var rectBisMinimum = _rectHasMinimumSize(minSize, rectB);
                            if (rectAisMinimum !== rectBisMinimum) return rectAisMinimum ? rectA : rectB;
                            var areaA = rectA.width * rectA.height;
                            var areaB = rectB.width * rectB.height;
                            return areaA > areaB ? rectA : rectB;
                        }));
                    }
                    function filterFocusableWidgets(vNodes) {
                        return vNodes.filter((function(vNode) {
                            return "widget" === get_role_type_default(vNode) && _isFocusable(vNode);
                        }));
                    }
                    function isEnclosedRect2(vNodeA, vNodeB) {
                        var rectA = vNodeA.boundingClientRect;
                        var rectB = vNodeB.boundingClientRect;
                        return rectA.top >= rectB.top && rectA.left >= rectB.left && rectA.bottom <= rectB.bottom && rectA.right <= rectB.right;
                    }
                    function getCssPointerEvents(vNode) {
                        return vNode.getComputedStylePropertyValue("pointer-events");
                    }
                    function toDecimalSize(rect) {
                        return {
                            width: Math.round(10 * rect.width) / 10,
                            height: Math.round(10 * rect.height) / 10
                        };
                    }
                    function isDescendantNotInTabOrder2(vAncestor, vNode) {
                        return _contains(vAncestor, vNode) && !_isInTabOrder(vNode);
                    }
                    function mapActualNodes(vNodes) {
                        return vNodes.map((function(_ref120) {
                            var actualNode = _ref120.actualNode;
                            return actualNode;
                        }));
                    }
                    var roundingMargin2 = .05;
                    function targetOffsetEvaluate(node, options, vNode) {
                        var minOffset = (null === options || void 0 === options ? void 0 : options.minOffset) || 24;
                        if (_rectHasMinimumSize(10 * minOffset, vNode.boundingClientRect)) {
                            this.data({
                                messageKey: "large",
                                minOffset
                            });
                            return true;
                        }
                        var closeNeighbors = [];
                        var closestOffset = minOffset;
                        var _step20, _iterator20 = _createForOfIteratorHelper(_findNearbyElms(vNode, minOffset));
                        try {
                            for (_iterator20.s(); !(_step20 = _iterator20.n()).done; ) {
                                var vNeighbor = _step20.value;
                                if ("widget" !== get_role_type_default(vNeighbor) || !_isFocusable(vNeighbor)) continue;
                                var offset = null;
                                try {
                                    offset = _getOffset(vNode, vNeighbor, minOffset / 2);
                                } catch (err2) {
                                    if (err2.message.startsWith("splitRects")) {
                                        this.data({
                                            messageKey: "tooManyRects",
                                            closestOffset: 0,
                                            minOffset
                                        });
                                        return;
                                    }
                                    throw err2;
                                }
                                if (null === offset) continue;
                                offset = 2 * roundToSingleDecimal(offset);
                                if (offset + roundingMargin2 >= minOffset) continue;
                                closestOffset = Math.min(closestOffset, offset);
                                closeNeighbors.push(vNeighbor);
                            }
                        } catch (err) {
                            _iterator20.e(err);
                        } finally {
                            _iterator20.f();
                        }
                        if (0 === closeNeighbors.length) {
                            this.data({
                                closestOffset,
                                minOffset
                            });
                            return true;
                        }
                        this.relatedNodes(closeNeighbors.map((function(_ref121) {
                            var actualNode = _ref121.actualNode;
                            return actualNode;
                        })));
                        if (!closeNeighbors.some(_isInTabOrder)) {
                            this.data({
                                messageKey: "nonTabbableNeighbor",
                                closestOffset,
                                minOffset
                            });
                            return;
                        }
                        this.data({
                            closestOffset,
                            minOffset
                        });
                        return _isInTabOrder(vNode) ? false : void 0;
                    }
                    function roundToSingleDecimal(num) {
                        return Math.round(10 * num) / 10;
                    }
                    function metaViewportScaleEvaluate(node, options, virtualNode) {
                        var _ref122 = options || {}, _ref122$scaleMinimum = _ref122.scaleMinimum, scaleMinimum = void 0 === _ref122$scaleMinimum ? 2 : _ref122$scaleMinimum, _ref122$lowerBound = _ref122.lowerBound, lowerBound = void 0 === _ref122$lowerBound ? false : _ref122$lowerBound;
                        var content = virtualNode.attr("content") || "";
                        if (!content) return true;
                        var result = content.split(/[;,]/).reduce((function(out, item) {
                            var contentValue = item.trim();
                            if (!contentValue) return out;
                            var _contentValue$split = contentValue.split("="), _contentValue$split2 = _slicedToArray(_contentValue$split, 2), key = _contentValue$split2[0], value = _contentValue$split2[1];
                            if (!key || !value) return out;
                            var curatedKey = key.toLowerCase().trim();
                            var curatedValue = value.toLowerCase().trim();
                            if ("maximum-scale" === curatedKey && "yes" === curatedValue) curatedValue = 1;
                            if ("maximum-scale" === curatedKey && parseFloat(curatedValue) < 0) return out;
                            out[curatedKey] = curatedValue;
                            return out;
                        }), {});
                        if (lowerBound && result["maximum-scale"] && parseFloat(result["maximum-scale"]) < lowerBound) return true;
                        if (!lowerBound && "no" === result["user-scalable"]) {
                            this.data("user-scalable=no");
                            return false;
                        }
                        var userScalableAsFloat = parseFloat(result["user-scalable"]);
                        if (!lowerBound && result["user-scalable"] && (userScalableAsFloat || 0 === userScalableAsFloat) && userScalableAsFloat > -1 && userScalableAsFloat < 1) {
                            this.data("user-scalable");
                            return false;
                        }
                        if (result["maximum-scale"] && parseFloat(result["maximum-scale"]) < scaleMinimum) {
                            this.data("maximum-scale");
                            return false;
                        }
                        return true;
                    }
                    var meta_viewport_scale_evaluate_default = metaViewportScaleEvaluate;
                    function cssOrientationLockEvaluate(node, options, virtualNode, context) {
                        var _ref123 = context || {}, _ref123$cssom = _ref123.cssom, cssom = void 0 === _ref123$cssom ? void 0 : _ref123$cssom;
                        var _ref124 = options || {}, _ref124$degreeThresho = _ref124.degreeThreshold, degreeThreshold = void 0 === _ref124$degreeThresho ? 0 : _ref124$degreeThresho;
                        if (!cssom || !cssom.length) return;
                        var isLocked = false;
                        var relatedElements = [];
                        var rulesGroupByDocumentFragment = groupCssomByDocument(cssom);
                        var _loop9 = function() {
                            var key = _Object$keys3[_i39];
                            var _rulesGroupByDocument = rulesGroupByDocumentFragment[key], root = _rulesGroupByDocument.root, rules = _rulesGroupByDocument.rules;
                            var orientationRules = rules.filter(isMediaRuleWithOrientation);
                            if (!orientationRules.length) return 1;
                            orientationRules.forEach((function(_ref125) {
                                var cssRules = _ref125.cssRules;
                                Array.from(cssRules).forEach((function(cssRule) {
                                    var locked = getIsOrientationLocked(cssRule);
                                    if (locked && "HTML" !== cssRule.selectorText.toUpperCase()) {
                                        var elms = Array.from(root.querySelectorAll(cssRule.selectorText)) || [];
                                        relatedElements = relatedElements.concat(elms);
                                    }
                                    isLocked = isLocked || locked;
                                }));
                            }));
                        };
                        for (var _i39 = 0, _Object$keys3 = Object.keys(rulesGroupByDocumentFragment); _i39 < _Object$keys3.length; _i39++) if (_loop9()) continue;
                        if (!isLocked) return true;
                        if (relatedElements.length) this.relatedNodes(relatedElements);
                        return false;
                        function groupCssomByDocument(cssObjectModel) {
                            return cssObjectModel.reduce((function(out, _ref126) {
                                var sheet = _ref126.sheet, root = _ref126.root, shadowId = _ref126.shadowId;
                                var key = shadowId ? shadowId : "topDocument";
                                if (!out[key]) out[key] = {
                                    root,
                                    rules: []
                                };
                                if (!sheet || !sheet.cssRules) return out;
                                var rules = Array.from(sheet.cssRules);
                                out[key].rules = out[key].rules.concat(rules);
                                return out;
                            }), {});
                        }
                        function isMediaRuleWithOrientation(_ref127) {
                            var type2 = _ref127.type, cssText = _ref127.cssText;
                            if (4 !== type2) return false;
                            return /orientation:\s*landscape/i.test(cssText) || /orientation:\s*portrait/i.test(cssText);
                        }
                        function getIsOrientationLocked(_ref128) {
                            var selectorText = _ref128.selectorText, style = _ref128.style;
                            if (!selectorText || style.length <= 0) return false;
                            var transformStyle = style.transform || style.webkitTransform || style.msTransform || false;
                            if (!transformStyle && !style.rotate) return false;
                            var transformDegrees = getTransformDegrees(transformStyle);
                            var rotateDegrees = getRotationInDegrees("rotate", style.rotate);
                            var degrees = transformDegrees + rotateDegrees;
                            if (!degrees) return false;
                            degrees = Math.abs(degrees);
                            if (Math.abs(degrees - 180) % 180 <= degreeThreshold) return false;
                            return Math.abs(degrees - 90) % 90 <= degreeThreshold;
                        }
                        function getTransformDegrees(transformStyle) {
                            if (!transformStyle) return 0;
                            var matches4 = transformStyle.match(/(rotate|rotateZ|rotate3d|matrix|matrix3d)\(([^)]+)\)(?!.*(rotate|rotateZ|rotate3d|matrix|matrix3d))/);
                            if (!matches4) return 0;
                            var _matches2 = _slicedToArray(matches4, 3), transformFn = _matches2[1], transformFnValue = _matches2[2];
                            return getRotationInDegrees(transformFn, transformFnValue);
                        }
                        function getRotationInDegrees(transformFunction, transformFnValue) {
                            switch (transformFunction) {
                              case "rotate":
                              case "rotateZ":
                                return getAngleInDegrees(transformFnValue);

                              case "rotate3d":
                                var _transformFnValue$spl = transformFnValue.split(",").map((function(value) {
                                    return value.trim();
                                })), _transformFnValue$spl2 = _slicedToArray(_transformFnValue$spl, 4), z = _transformFnValue$spl2[2], angleWithUnit = _transformFnValue$spl2[3];
                                if (0 === parseInt(z)) return;
                                return getAngleInDegrees(angleWithUnit);

                              case "matrix":
                              case "matrix3d":
                                return getAngleInDegreesFromMatrixTransform(transformFnValue);

                              default:
                                return 0;
                            }
                        }
                        function getAngleInDegrees(angleWithUnit) {
                            var _ref129 = angleWithUnit.match(/(deg|grad|rad|turn)/) || [], _ref130 = _slicedToArray(_ref129, 1), unit = _ref130[0];
                            if (!unit) return 0;
                            var angle = parseFloat(angleWithUnit.replace(unit, ""));
                            switch (unit) {
                              case "rad":
                                return convertRadToDeg(angle);

                              case "grad":
                                return convertGradToDeg(angle);

                              case "turn":
                                return convertTurnToDeg(angle);

                              case "deg":
                              default:
                                return parseInt(angle);
                            }
                        }
                        function getAngleInDegreesFromMatrixTransform(transformFnValue) {
                            var values2 = transformFnValue.split(",");
                            if (values2.length <= 6) {
                                var _values = _slicedToArray(values2, 2), a2 = _values[0], b3 = _values[1];
                                var radians = Math.atan2(parseFloat(b3), parseFloat(a2));
                                return convertRadToDeg(radians);
                            }
                            var sinB = parseFloat(values2[8]);
                            var b2 = Math.asin(sinB);
                            var cosB = Math.cos(b2);
                            var rotateZRadians = Math.acos(parseFloat(values2[0]) / cosB);
                            return convertRadToDeg(rotateZRadians);
                        }
                        function convertRadToDeg(radians) {
                            return Math.round(radians * (180 / Math.PI));
                        }
                        function convertGradToDeg(grad) {
                            grad %= 400;
                            if (grad < 0) grad += 400;
                            return Math.round(grad / 400 * 360);
                        }
                        function convertTurnToDeg(turn) {
                            return Math.round(360 / (1 / turn));
                        }
                    }
                    var css_orientation_lock_evaluate_default = cssOrientationLockEvaluate;
                    function noAutoplayAudioEvaluate(node, options) {
                        if (!node.duration) {
                            console.warn("axe.utils.preloadMedia did not load metadata");
                            return;
                        }
                        var _options$allowedDurat = options.allowedDuration, allowedDuration = void 0 === _options$allowedDurat ? 3 : _options$allowedDurat;
                        var playableDuration = getPlayableDuration(node);
                        if (playableDuration <= allowedDuration && !node.hasAttribute("loop")) return true;
                        if (!node.hasAttribute("controls")) return false;
                        return true;
                        function getPlayableDuration(elm) {
                            if (!elm.currentSrc) return 0;
                            var playbackRange = getPlaybackRange(elm.currentSrc);
                            if (!playbackRange) return Math.abs(elm.duration - (elm.currentTime || 0));
                            if (1 === playbackRange.length) return Math.abs(elm.duration - playbackRange[0]);
                            return Math.abs(playbackRange[1] - playbackRange[0]);
                        }
                        function getPlaybackRange(src) {
                            var match = src.match(/#t=(.*)/);
                            if (!match) return;
                            var _match = _slicedToArray(match, 2), value = _match[1];
                            var ranges = value.split(",");
                            return ranges.map((function(range2) {
                                if (/:/.test(range2)) return convertHourMinSecToSeconds(range2);
                                return parseFloat(range2);
                            }));
                        }
                        function convertHourMinSecToSeconds(hhMmSs) {
                            var parts = hhMmSs.split(":");
                            var secs = 0;
                            var mins = 1;
                            while (parts.length > 0) {
                                secs += mins * parseInt(parts.pop(), 10);
                                mins *= 60;
                            }
                            return parseFloat(secs);
                        }
                    }
                    var no_autoplay_audio_evaluate_default = noAutoplayAudioEvaluate;
                    function frameTestedEvaluate(node, options) {
                        return options.isViolation ? false : void 0;
                    }
                    var frame_tested_evaluate_default = frameTestedEvaluate;
                    var joinStr = " > ";
                    function frameTestedAfter(results) {
                        var iframes = {};
                        return results.filter((function(result) {
                            var frameResult = "html" !== result.node.ancestry[result.node.ancestry.length - 1];
                            if (frameResult) {
                                var ancestry2 = result.node.ancestry.flat(1 / 0).join(joinStr);
                                iframes[ancestry2] = result;
                                return true;
                            }
                            var ancestry = result.node.ancestry.slice(0, result.node.ancestry.length - 1).flat(1 / 0).join(joinStr);
                            if (iframes[ancestry]) iframes[ancestry].result = true;
                            return false;
                        }));
                    }
                    var frame_tested_after_default = frameTestedAfter;
                    function captionEvaluate(node, options, virtualNode) {
                        var tracks = query_selector_all_default(virtualNode, "track");
                        var hasCaptions = tracks.some((function(vNode) {
                            return "captions" === (vNode.attr("kind") || "").toLowerCase();
                        }));
                        return hasCaptions ? false : void 0;
                    }
                    var caption_evaluate_default = captionEvaluate;
                    function structuredDlitemsEvaluate(node, options, virtualNode) {
                        var children = virtualNode.children;
                        if (!children || !children.length) return false;
                        var nodeName2, hasDt = false, hasDd = false;
                        for (var _i40 = 0; _i40 < children.length; _i40++) {
                            nodeName2 = children[_i40].props.nodeName.toUpperCase();
                            if ("DT" === nodeName2) hasDt = true;
                            if (hasDt && "DD" === nodeName2) return false;
                            if ("DD" === nodeName2) hasDd = true;
                        }
                        return hasDt || hasDd;
                    }
                    var structured_dlitems_evaluate_default = structuredDlitemsEvaluate;
                    function onlyListitemsEvaluate(node, options, virtualNode) {
                        var hasNonEmptyTextNode = false;
                        var atLeastOneListitem = false;
                        var isEmpty2 = true;
                        var badNodes = [];
                        var badRoleNodes = [];
                        var badRoles = [];
                        virtualNode.children.forEach((function(vNode) {
                            var actualNode = vNode.actualNode;
                            if (3 === actualNode.nodeType && "" !== actualNode.nodeValue.trim()) {
                                hasNonEmptyTextNode = true;
                                return;
                            }
                            if (1 !== actualNode.nodeType || !_isVisibleToScreenReaders(actualNode)) return;
                            isEmpty2 = false;
                            var isLi = "LI" === actualNode.nodeName.toUpperCase();
                            var role = get_role_default(vNode);
                            var isListItemRole = "listitem" === role;
                            if (!isLi && !isListItemRole) badNodes.push(actualNode);
                            if (isLi && !isListItemRole) {
                                badRoleNodes.push(actualNode);
                                if (!badRoles.includes(role)) badRoles.push(role);
                            }
                            if (isListItemRole) atLeastOneListitem = true;
                        }));
                        if (hasNonEmptyTextNode || badNodes.length) {
                            this.relatedNodes(badNodes);
                            return true;
                        }
                        if (isEmpty2 || atLeastOneListitem) return false;
                        this.relatedNodes(badRoleNodes);
                        this.data({
                            messageKey: "roleNotValid",
                            roles: badRoles.join(", ")
                        });
                        return true;
                    }
                    var only_listitems_evaluate_default = onlyListitemsEvaluate;
                    function onlyDlitemsEvaluate(node, options, virtualNode) {
                        var ALLOWED_ROLES = [ "definition", "term", "list" ];
                        var base = {
                            badNodes: [],
                            hasNonEmptyTextNode: false
                        };
                        var content = virtualNode.children.reduce((function(vNodes, child) {
                            var actualNode = child.actualNode;
                            if ("DIV" === actualNode.nodeName.toUpperCase() && null === get_role_default(actualNode)) return vNodes.concat(child.children);
                            return vNodes.concat(child);
                        }), []);
                        var result = content.reduce((function(out, childNode) {
                            var actualNode = childNode.actualNode;
                            var tagName = actualNode.nodeName.toUpperCase();
                            if (1 === actualNode.nodeType && _isVisibleToScreenReaders(actualNode)) {
                                var explicitRole2 = get_explicit_role_default(actualNode);
                                if ("DT" !== tagName && "DD" !== tagName || explicitRole2) if (!ALLOWED_ROLES.includes(explicitRole2)) out.badNodes.push(actualNode);
                            } else if (3 === actualNode.nodeType && "" !== actualNode.nodeValue.trim()) out.hasNonEmptyTextNode = true;
                            return out;
                        }), base);
                        if (result.badNodes.length) this.relatedNodes(result.badNodes);
                        return !!result.badNodes.length || result.hasNonEmptyTextNode;
                    }
                    function listitemEvaluate(node, options, virtualNode) {
                        var parent = virtualNode.parent;
                        if (!parent) return;
                        var parentNodeName = parent.props.nodeName;
                        var parentRole = get_explicit_role_default(parent);
                        if ([ "presentation", "none", "list" ].includes(parentRole)) return true;
                        if (parentRole && is_valid_role_default(parentRole)) {
                            this.data({
                                messageKey: "roleNotValid"
                            });
                            return false;
                        }
                        return [ "ul", "ol", "menu" ].includes(parentNodeName);
                    }
                    function invalidChildrenEvaluate(node) {
                        var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                        var virtualNode = arguments.length > 2 ? arguments[2] : void 0;
                        var relatedNodes = [];
                        var issues = [];
                        if (!virtualNode.children) return;
                        var vChildren = mapWithNested(virtualNode.children);
                        while (vChildren.length) {
                            var _vChild$actualNode;
                            var _vChildren$shift = vChildren.shift(), vChild = _vChildren$shift.vChild, nested = _vChildren$shift.nested;
                            if (options.divGroups && !nested && isDivGroup(vChild)) {
                                if (!vChild.children) return;
                                var vGrandChildren = mapWithNested(vChild.children, true);
                                vChildren.push.apply(vChildren, _toConsumableArray(vGrandChildren));
                                continue;
                            }
                            var issue = getInvalidSelector(vChild, nested, options);
                            if (!issue) continue;
                            if (!issues.includes(issue)) issues.push(issue);
                            if (1 === (null === vChild || void 0 === vChild || null === (_vChild$actualNode = vChild.actualNode) || void 0 === _vChild$actualNode ? void 0 : _vChild$actualNode.nodeType)) relatedNodes.push(vChild.actualNode);
                        }
                        if (0 === issues.length) return false;
                        this.data({
                            values: issues.join(", ")
                        });
                        this.relatedNodes(relatedNodes);
                        return true;
                    }
                    function getInvalidSelector(vChild, nested, _ref131) {
                        var _ref131$validRoles = _ref131.validRoles, validRoles = void 0 === _ref131$validRoles ? [] : _ref131$validRoles, _ref131$validNodeName = _ref131.validNodeNames, validNodeNames = void 0 === _ref131$validNodeName ? [] : _ref131$validNodeName;
                        var _vChild$props = vChild.props, nodeName2 = _vChild$props.nodeName, nodeType = _vChild$props.nodeType, nodeValue = _vChild$props.nodeValue;
                        var selector = nested ? "div > " : "";
                        if (3 === nodeType && "" !== nodeValue.trim()) return selector + "#text";
                        if (1 !== nodeType || !_isVisibleToScreenReaders(vChild)) return false;
                        var role = get_explicit_role_default(vChild);
                        if (role) return validRoles.includes(role) ? false : selector + "[role=".concat(role, "]"); else return validNodeNames.includes(nodeName2) ? false : selector + nodeName2;
                    }
                    function isDivGroup(vNode) {
                        return "div" === vNode.props.nodeName && null === get_explicit_role_default(vNode);
                    }
                    function mapWithNested(vNodes) {
                        var nested = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;
                        return vNodes.map((function(vChild) {
                            return {
                                vChild,
                                nested
                            };
                        }));
                    }
                    function dlitemEvaluate(node) {
                        var parent = get_composed_parent_default(node);
                        var parentTagName = parent.nodeName.toUpperCase();
                        var parentRole = get_explicit_role_default(parent);
                        if ("DIV" === parentTagName && [ "presentation", "none", null ].includes(parentRole)) {
                            parent = get_composed_parent_default(parent);
                            parentTagName = parent.nodeName.toUpperCase();
                            parentRole = get_explicit_role_default(parent);
                        }
                        if ("DL" !== parentTagName) return false;
                        if (!parentRole || [ "presentation", "none", "list" ].includes(parentRole)) return true;
                        return false;
                    }
                    var dlitem_evaluate_default = dlitemEvaluate;
                    function xmlLangMismatchEvaluate(node, options, vNode) {
                        var primaryLangValue = get_base_lang_default(vNode.attr("lang"));
                        var primaryXmlLangValue = get_base_lang_default(vNode.attr("xml:lang"));
                        return primaryLangValue === primaryXmlLangValue;
                    }
                    var xml_lang_mismatch_evaluate_default = xmlLangMismatchEvaluate;
                    function validLangEvaluate(node, options, virtualNode) {
                        var invalid = [];
                        options.attributes.forEach((function(langAttr) {
                            var langVal = virtualNode.attr(langAttr);
                            if ("string" !== typeof langVal) return;
                            var baselangVal = get_base_lang_default(langVal);
                            var invalidLang = options.value ? !options.value.map(get_base_lang_default).includes(baselangVal) : !valid_langs_default(baselangVal);
                            if ("" !== baselangVal && invalidLang || "" !== langVal && !sanitize_default(langVal)) invalid.push(langAttr + '="' + virtualNode.attr(langAttr) + '"');
                        }));
                        if (!invalid.length) return false;
                        if ("html" !== virtualNode.props.nodeName && !_hasLangText(virtualNode)) return false;
                        this.data(invalid);
                        return true;
                    }
                    var valid_lang_evaluate_default = validLangEvaluate;
                    function hasValue(value) {
                        return "" !== (value || "").trim();
                    }
                    function hasLangEvaluate(node, options, virtualNode) {
                        var xhtml = "undefined" !== typeof document ? is_xhtml_default(document) : false;
                        if (options.attributes.includes("xml:lang") && options.attributes.includes("lang") && hasValue(virtualNode.attr("xml:lang")) && !hasValue(virtualNode.attr("lang")) && !xhtml) {
                            this.data({
                                messageKey: "noXHTML"
                            });
                            return false;
                        }
                        var hasLang = options.attributes.some((function(name) {
                            return hasValue(virtualNode.attr(name));
                        }));
                        if (!hasLang) {
                            this.data({
                                messageKey: "noLang"
                            });
                            return false;
                        }
                        return true;
                    }
                    var has_lang_evaluate_default = hasLangEvaluate;
                    function landmarkIsUniqueEvaluate(node, options, virtualNode) {
                        var role = get_role_default(node);
                        var accessibleText2 = _accessibleTextVirtual(virtualNode);
                        accessibleText2 = accessibleText2 ? accessibleText2.toLowerCase() : null;
                        this.data({
                            role,
                            accessibleText: accessibleText2
                        });
                        this.relatedNodes([ node ]);
                        return true;
                    }
                    var landmark_is_unique_evaluate_default = landmarkIsUniqueEvaluate;
                    function landmarkIsUniqueAfter(results) {
                        var uniqueLandmarks = [];
                        return results.filter((function(currentResult) {
                            var findMatch = function(someResult) {
                                return currentResult.data.role === someResult.data.role && currentResult.data.accessibleText === someResult.data.accessibleText;
                            };
                            var matchedResult = uniqueLandmarks.find(findMatch);
                            if (matchedResult) {
                                matchedResult.result = false;
                                matchedResult.relatedNodes.push(currentResult.relatedNodes[0]);
                                return false;
                            }
                            uniqueLandmarks.push(currentResult);
                            currentResult.relatedNodes = [];
                            return true;
                        }));
                    }
                    var landmark_is_unique_after_default = landmarkIsUniqueAfter;
                    function titleOnlyEvaluate(node, options, virtualNode) {
                        var labelText2 = label_virtual_default2(virtualNode);
                        var title = title_text_default(virtualNode);
                        var ariaDescribedBy = virtualNode.attr("aria-describedby");
                        return !labelText2 && !!(title || ariaDescribedBy);
                    }
                    var title_only_evaluate_default = titleOnlyEvaluate;
                    function multipleLabelEvaluate(node) {
                        var id = escape_selector_default(node.getAttribute("id"));
                        var parent = node.parentNode;
                        var root = get_root_node_default2(node);
                        root = root.documentElement || root;
                        var labels = Array.from(root.querySelectorAll('label[for="'.concat(id, '"]')));
                        if (labels.length) labels = labels.filter((function(label3) {
                            return !_isHiddenForEveryone(label3);
                        }));
                        while (parent) {
                            if ("LABEL" === parent.nodeName.toUpperCase() && -1 === labels.indexOf(parent)) labels.push(parent);
                            parent = parent.parentNode;
                        }
                        this.relatedNodes(labels);
                        if (labels.length > 1) {
                            var ATVisibleLabels = labels.filter((function(label3) {
                                return _isVisibleToScreenReaders(label3);
                            }));
                            if (ATVisibleLabels.length > 1) return;
                            var labelledby = idrefs_default(node, "aria-labelledby");
                            return !labelledby.includes(ATVisibleLabels[0]) ? void 0 : false;
                        }
                        return false;
                    }
                    var multiple_label_evaluate_default = multipleLabelEvaluate;
                    function isStringContained(compare, compareWith) {
                        var curatedCompareWith = curateString(compareWith);
                        var curatedCompare = curateString(compare);
                        if (!curatedCompareWith || !curatedCompare) return false;
                        return curatedCompareWith.includes(curatedCompare);
                    }
                    function curateString(str) {
                        var noUnicodeStr = remove_unicode_default(str, {
                            emoji: true,
                            nonBmp: true,
                            punctuations: true
                        });
                        return sanitize_default(noUnicodeStr);
                    }
                    function labelContentNameMismatchEvaluate(node, options, virtualNode) {
                        var _options$occurrenceTh;
                        var pixelThreshold = null === options || void 0 === options ? void 0 : options.pixelThreshold;
                        var occurrenceThreshold = null !== (_options$occurrenceTh = null === options || void 0 === options ? void 0 : options.occurrenceThreshold) && void 0 !== _options$occurrenceTh ? _options$occurrenceTh : null === options || void 0 === options ? void 0 : options.occuranceThreshold;
                        var accText = accessible_text_default(node).toLowerCase();
                        var visibleText = sanitize_default(subtree_text_default(virtualNode, {
                            subtreeDescendant: true,
                            ignoreIconLigature: true,
                            pixelThreshold,
                            occurrenceThreshold
                        })).toLowerCase();
                        if (!visibleText) return true;
                        if (is_human_interpretable_default(accText) < 1 || is_human_interpretable_default(visibleText) < 1) return;
                        return isStringContained(visibleText, accText);
                    }
                    var label_content_name_mismatch_evaluate_default = labelContentNameMismatchEvaluate;
                    function implicitEvaluate(node, options, virtualNode) {
                        try {
                            var label3 = closest_default(virtualNode, "label");
                            if (label3) {
                                var implicitLabel = sanitize_default(_accessibleTextVirtual(label3, {
                                    inControlContext: true,
                                    startNode: virtualNode
                                }));
                                if (label3.actualNode) this.relatedNodes([ label3.actualNode ]);
                                this.data({
                                    implicitLabel
                                });
                                return !!implicitLabel;
                            }
                            return false;
                        } catch (_unused10) {
                            return;
                        }
                    }
                    var implicit_evaluate_default = implicitEvaluate;
                    function hiddenExplicitLabelEvaluate(node, options, virtualNode) {
                        if (virtualNode.hasAttr("id")) {
                            if (!virtualNode.actualNode) return;
                            var root = get_root_node_default2(node);
                            var _id4 = escape_selector_default(node.getAttribute("id"));
                            var label3 = root.querySelector('label[for="'.concat(_id4, '"]'));
                            if (label3 && !_isVisibleToScreenReaders(label3)) {
                                var name;
                                try {
                                    name = _accessibleTextVirtual(virtualNode).trim();
                                } catch (_unused11) {
                                    return;
                                }
                                var isNameEmpty = "" === name;
                                return isNameEmpty;
                            }
                        }
                        return false;
                    }
                    var hidden_explicit_label_evaluate_default = hiddenExplicitLabelEvaluate;
                    function helpSameAsLabelEvaluate(node, options, virtualNode) {
                        var labelText2 = label_virtual_default2(virtualNode);
                        var check = node.getAttribute("title");
                        if (!labelText2) return false;
                        if (!check) {
                            check = "";
                            if (node.getAttribute("aria-describedby")) {
                                var ref = idrefs_default(node, "aria-describedby");
                                check = ref.map((function(thing) {
                                    return thing ? accessible_text_default(thing) : "";
                                })).join("");
                            }
                        }
                        return sanitize_default(check) === sanitize_default(labelText2);
                    }
                    var help_same_as_label_evaluate_default = helpSameAsLabelEvaluate;
                    function explicitEvaluate(node, options, virtualNode) {
                        var _this7 = this;
                        if (!virtualNode.attr("id")) return false;
                        if (!virtualNode.actualNode) return;
                        var root = get_root_node_default2(virtualNode.actualNode);
                        var id = escape_selector_default(virtualNode.attr("id"));
                        var labels = Array.from(root.querySelectorAll('label[for="'.concat(id, '"]')));
                        this.relatedNodes(labels);
                        if (!labels.length) return false;
                        try {
                            return labels.some((function(label3) {
                                if (!_isVisibleOnScreen(label3)) return true; else {
                                    var explicitLabel = sanitize_default(accessible_text_default(label3, {
                                        inControlContext: true,
                                        startNode: virtualNode
                                    }));
                                    _this7.data({
                                        explicitLabel
                                    });
                                    return !!explicitLabel;
                                }
                            }));
                        } catch (_unused12) {
                            return;
                        }
                    }
                    var explicit_evaluate_default = explicitEvaluate;
                    function duplicateImgLabelEvaluate(node, options, virtualNode) {
                        if ([ "none", "presentation" ].includes(get_role_default(virtualNode))) return false;
                        var parentVNode = closest_default(virtualNode, options.parentSelector);
                        if (!parentVNode) return false;
                        var visibleText = visible_virtual_default(parentVNode, true).toLowerCase();
                        if ("" === visibleText) return false;
                        return visibleText === _accessibleTextVirtual(virtualNode).toLowerCase();
                    }
                    var duplicate_img_label_evaluate_default = duplicateImgLabelEvaluate;
                    function altSpaceValueEvaluate(node, options, virtualNode) {
                        var alt = virtualNode.attr("alt");
                        var isOnlySpace = /^\s+$/;
                        return "string" === typeof alt && isOnlySpace.test(alt);
                    }
                    var alt_space_value_evaluate_default = altSpaceValueEvaluate;
                    function tabindexEvaluate(node, options, virtualNode) {
                        var tabIndex = parseInt(virtualNode.attr("tabindex"), 10);
                        return isNaN(tabIndex) ? true : tabIndex <= 0;
                    }
                    var tabindex_evaluate_default = tabindexEvaluate;
                    function noFocusableContentEvaluate(node, options, virtualNode) {
                        if (!virtualNode.children) return;
                        try {
                            var focusableDescendants2 = getFocusableDescendants(virtualNode);
                            if (!focusableDescendants2.length) return true;
                            var notHiddenElements = focusableDescendants2.filter(usesUnreliableHidingStrategy);
                            if (notHiddenElements.length > 0) {
                                this.data({
                                    messageKey: "notHidden"
                                });
                                this.relatedNodes(notHiddenElements);
                            } else this.relatedNodes(focusableDescendants2);
                            return false;
                        } catch (_unused13) {
                            return;
                        }
                    }
                    function getFocusableDescendants(vNode) {
                        if (!vNode.children) {
                            if (1 === vNode.props.nodeType) throw new Error("Cannot determine children");
                            return [];
                        }
                        var retVal = [];
                        vNode.children.forEach((function(child) {
                            if ("widget" === get_role_type_default(child) && _isFocusable(child)) retVal.push(child); else retVal.push.apply(retVal, _toConsumableArray(getFocusableDescendants(child)));
                        }));
                        return retVal;
                    }
                    function usesUnreliableHidingStrategy(vNode) {
                        var tabIndex = parseInt(vNode.attr("tabindex"), 10);
                        return !isNaN(tabIndex) && tabIndex < 0;
                    }
                    function landmarkIsTopLevelEvaluate(node) {
                        var landmarks = get_aria_roles_by_type_default("landmark");
                        var parent = get_composed_parent_default(node);
                        var nodeRole = get_role_default(node);
                        this.data({
                            role: nodeRole
                        });
                        while (parent) {
                            var role = parent.getAttribute("role");
                            if (!role && "FORM" !== parent.nodeName.toUpperCase()) role = implicit_role_default(parent);
                            if (role && landmarks.includes(role) && !("main" === role && "complementary" === nodeRole)) return false;
                            parent = get_composed_parent_default(parent);
                        }
                        return true;
                    }
                    var landmark_is_top_level_evaluate_default = landmarkIsTopLevelEvaluate;
                    function frameFocusableContentEvaluate(node, options, virtualNode) {
                        if (!virtualNode.children) return;
                        try {
                            return !virtualNode.children.some((function(child) {
                                return focusableDescendants(child);
                            }));
                        } catch (_unused14) {
                            return;
                        }
                    }
                    function focusableDescendants(vNode) {
                        if (_isInTabOrder(vNode)) return true;
                        if (!vNode.children) {
                            if (1 === vNode.props.nodeType) throw new Error("Cannot determine children");
                            return false;
                        }
                        return vNode.children.some((function(child) {
                            return focusableDescendants(child);
                        }));
                    }
                    function focusableNotTabbableEvaluate(node, options, virtualNode) {
                        var elementsThatCanBeDisabled = [ "button", "fieldset", "input", "select", "textarea" ];
                        var tabbableElements = virtualNode.tabbableElements;
                        if (!tabbableElements || !tabbableElements.length) return true;
                        var relatedNodes = tabbableElements.filter((function(vNode) {
                            return !elementsThatCanBeDisabled.includes(vNode.props.nodeName);
                        }));
                        this.relatedNodes(relatedNodes.map((function(vNode) {
                            return vNode.actualNode;
                        })));
                        if (0 === relatedNodes.length || is_modal_open_default()) return true;
                        return relatedNodes.every((function(vNode) {
                            var pointerEvents = vNode.getComputedStylePropertyValue("pointer-events");
                            var width = parseInt(vNode.getComputedStylePropertyValue("width"));
                            var height = parseInt(vNode.getComputedStylePropertyValue("height"));
                            return vNode.actualNode.onfocus || (0 === width || 0 === height) && "none" === pointerEvents;
                        })) ? void 0 : false;
                    }
                    var focusable_not_tabbable_evaluate_default = focusableNotTabbableEvaluate;
                    function focusableNoNameEvaluate(node, options, virtualNode) {
                        var tabIndex = virtualNode.attr("tabindex");
                        var inFocusOrder = _isFocusable(virtualNode) && tabIndex > -1;
                        if (!inFocusOrder) return false;
                        try {
                            return !_accessibleTextVirtual(virtualNode);
                        } catch (_unused15) {
                            return;
                        }
                    }
                    var focusable_no_name_evaluate_default = focusableNoNameEvaluate;
                    function focusableModalOpenEvaluate(node, options, virtualNode) {
                        var tabbableElements = virtualNode.tabbableElements.map((function(_ref132) {
                            var actualNode = _ref132.actualNode;
                            return actualNode;
                        }));
                        if (!tabbableElements || !tabbableElements.length) return true;
                        if (is_modal_open_default()) {
                            this.relatedNodes(tabbableElements);
                            return;
                        }
                        return true;
                    }
                    var focusable_modal_open_evaluate_default = focusableModalOpenEvaluate;
                    function focusableElementEvaluate(node, options, virtualNode) {
                        if (virtualNode.hasAttr("contenteditable") && isContenteditable(virtualNode)) return true;
                        return _isInTabOrder(virtualNode);
                        function isContenteditable(vNode) {
                            var contenteditable = vNode.attr("contenteditable");
                            if ("true" === contenteditable || "" === contenteditable) return true;
                            if ("false" === contenteditable) return false;
                            var ancestor = closest_default(virtualNode.parent, "[contenteditable]");
                            if (!ancestor) return false;
                            return isContenteditable(ancestor);
                        }
                    }
                    var focusable_element_evaluate_default = focusableElementEvaluate;
                    function focusableDisabledEvaluate(node, options, virtualNode) {
                        var elementsThatCanBeDisabled = [ "button", "fieldset", "input", "select", "textarea" ];
                        var tabbableElements = virtualNode.tabbableElements;
                        if (!tabbableElements || !tabbableElements.length) return true;
                        var relatedNodes = tabbableElements.filter((function(vNode) {
                            return elementsThatCanBeDisabled.includes(vNode.props.nodeName);
                        }));
                        this.relatedNodes(relatedNodes.map((function(vNode) {
                            return vNode.actualNode;
                        })));
                        if (0 === relatedNodes.length || is_modal_open_default()) return true;
                        return relatedNodes.every((function(vNode) {
                            var pointerEvents = vNode.getComputedStylePropertyValue("pointer-events");
                            var width = parseInt(vNode.getComputedStylePropertyValue("width"));
                            var height = parseInt(vNode.getComputedStylePropertyValue("height"));
                            return vNode.actualNode.onfocus || (0 === width || 0 === height) && "none" === pointerEvents;
                        })) ? void 0 : false;
                    }
                    var focusable_disabled_evaluate_default = focusableDisabledEvaluate;
                    function focusableContentEvaluate(node, options, virtualNode) {
                        var tabbableElements = virtualNode.tabbableElements;
                        if (!tabbableElements) return false;
                        var tabbableContentElements = tabbableElements.filter((function(el) {
                            return el !== virtualNode;
                        }));
                        return tabbableContentElements.length > 0;
                    }
                    var focusable_content_evaluate_default = focusableContentEvaluate;
                    function accesskeysEvaluate(node, options, vNode) {
                        if (!_isHiddenForEveryone(vNode)) {
                            this.data(vNode.attr("accesskey"));
                            this.relatedNodes([ node ]);
                        }
                        return true;
                    }
                    var accesskeys_evaluate_default = accesskeysEvaluate;
                    function accesskeysAfter(results) {
                        var seen = {};
                        return results.filter((function(r) {
                            if (!r.data) return false;
                            var key = r.data.toUpperCase();
                            if (!seen[key]) {
                                seen[key] = r;
                                r.relatedNodes = [];
                                return true;
                            }
                            seen[key].relatedNodes.push(r.relatedNodes[0]);
                            return false;
                        })).map((function(r) {
                            r.result = !!r.relatedNodes.length;
                            return r;
                        }));
                    }
                    var accesskeys_after_default = accesskeysAfter;
                    function pageNoDuplicateEvaluate(node, options, virtualNode) {
                        if (!options || !options.selector || "string" !== typeof options.selector) throw new TypeError("page-no-duplicate requires options.selector to be a string");
                        var key = "page-no-duplicate;" + options.selector;
                        if (cache_default.get(key)) {
                            this.data("ignored");
                            return;
                        }
                        cache_default.set(key, true);
                        var elms = query_selector_all_filter_default(axe._tree[0], options.selector, (function(elm) {
                            return _isVisibleToScreenReaders(elm);
                        }));
                        if ("string" === typeof options.nativeScopeFilter) elms = elms.filter((function(elm) {
                            return elm.actualNode.hasAttribute("role") || !find_up_virtual_default(elm, options.nativeScopeFilter);
                        }));
                        if ("string" === typeof options.role) elms = elms.filter((function(elm) {
                            return get_role_default(elm) === options.role;
                        }));
                        this.relatedNodes(elms.filter((function(elm) {
                            return elm !== virtualNode;
                        })).map((function(elm) {
                            return elm.actualNode;
                        })));
                        return elms.length <= 1;
                    }
                    var page_no_duplicate_evaluate_default = pageNoDuplicateEvaluate;
                    function pageNoDuplicateAfter(results) {
                        return results.filter((function(checkResult) {
                            return "ignored" !== checkResult.data;
                        }));
                    }
                    var page_no_duplicate_after_default = pageNoDuplicateAfter;
                    function matchesDefinitionEvaluate(_, options, virtualNode) {
                        return matches_default2(virtualNode, options.matcher);
                    }
                    var matches_definition_evaluate_default = matchesDefinitionEvaluate;
                    function hasTextContentEvaluate(node, options, virtualNode) {
                        try {
                            return "" !== sanitize_default(subtree_text_default(virtualNode));
                        } catch (_unused16) {
                            return;
                        }
                    }
                    function hasDescendant(node, options, virtualNode) {
                        if (!options || !options.selector || "string" !== typeof options.selector) throw new TypeError("has-descendant requires options.selector to be a string");
                        if (options.passForModal && is_modal_open_default()) return true;
                        var matchingElms = query_selector_all_filter_default(virtualNode, options.selector, (function(vNode) {
                            return _isVisibleToScreenReaders(vNode);
                        }));
                        this.relatedNodes(matchingElms.map((function(vNode) {
                            return vNode.actualNode;
                        })));
                        return matchingElms.length > 0;
                    }
                    var has_descendant_evaluate_default = hasDescendant;
                    function pageHasElmAfter(results) {
                        var elmUsedAnywhere = results.some((function(frameResult) {
                            return true === frameResult.result;
                        }));
                        if (elmUsedAnywhere) results.forEach((function(result) {
                            result.result = true;
                        }));
                        return results;
                    }
                    var has_descendant_after_default = pageHasElmAfter;
                    function attrNonSpaceContentEvaluate(node) {
                        var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                        var vNode = arguments.length > 2 ? arguments[2] : void 0;
                        if (!options.attribute || "string" !== typeof options.attribute) throw new TypeError("attr-non-space-content requires options.attribute to be a string");
                        if (!vNode.hasAttr(options.attribute)) {
                            this.data({
                                messageKey: "noAttr"
                            });
                            return false;
                        }
                        var attribute = vNode.attr(options.attribute);
                        var attributeIsEmpty = !sanitize_default(attribute);
                        if (attributeIsEmpty) {
                            this.data({
                                messageKey: "emptyAttr"
                            });
                            return false;
                        }
                        return true;
                    }
                    var attr_non_space_content_evaluate_default = attrNonSpaceContentEvaluate;
                    function autocompleteValidEvaluate(_node, options, virtualNode) {
                        var autocomplete2 = virtualNode.attr("autocomplete") || "";
                        return is_valid_autocomplete_default(autocomplete2, options);
                    }
                    var autocomplete_valid_evaluate_default = autocompleteValidEvaluate;
                    function autocompleteAppropriateEvaluate(node, options, virtualNode) {
                        if ("input" !== virtualNode.props.nodeName) return true;
                        var number = [ "text", "search", "number", "tel" ];
                        var url = [ "text", "search", "url" ];
                        var allowedTypesMap = {
                            bday: [ "text", "search", "date" ],
                            email: [ "text", "search", "email" ],
                            username: [ "text", "search", "email" ],
                            "street-address": [ "text" ],
                            tel: [ "text", "search", "tel" ],
                            "tel-country-code": [ "text", "search", "tel" ],
                            "tel-national": [ "text", "search", "tel" ],
                            "tel-area-code": [ "text", "search", "tel" ],
                            "tel-local": [ "text", "search", "tel" ],
                            "tel-local-prefix": [ "text", "search", "tel" ],
                            "tel-local-suffix": [ "text", "search", "tel" ],
                            "tel-extension": [ "text", "search", "tel" ],
                            "cc-number": number,
                            "cc-exp": [ "text", "search", "month", "tel" ],
                            "cc-exp-month": number,
                            "cc-exp-year": number,
                            "cc-csc": number,
                            "transaction-amount": number,
                            "bday-day": number,
                            "bday-month": number,
                            "bday-year": number,
                            "new-password": [ "text", "search", "password" ],
                            "current-password": [ "text", "search", "password" ],
                            url,
                            photo: url,
                            impp: url
                        };
                        if ("object" === _typeof(options)) Object.keys(options).forEach((function(key) {
                            if (!allowedTypesMap[key]) allowedTypesMap[key] = [];
                            allowedTypesMap[key] = allowedTypesMap[key].concat(options[key]);
                        }));
                        var autocompleteAttr = virtualNode.attr("autocomplete");
                        var autocompleteTerms = autocompleteAttr.split(/\s+/g).map((function(term) {
                            return term.toLowerCase();
                        }));
                        var purposeTerm = autocompleteTerms[autocompleteTerms.length - 1];
                        if (_autocomplete.stateTerms.includes(purposeTerm)) return true;
                        var allowedTypes = allowedTypesMap[purposeTerm];
                        var type2 = virtualNode.hasAttr("type") ? sanitize_default(virtualNode.attr("type")).toLowerCase() : "text";
                        type2 = valid_input_type_default().includes(type2) ? type2 : "text";
                        if ("undefined" === typeof allowedTypes) return "text" === type2;
                        return allowedTypes.includes(type2);
                    }
                    var autocomplete_appropriate_evaluate_default = autocompleteAppropriateEvaluate;
                    var blockLike2 = [ "block", "list-item", "table", "flex", "grid", "inline-block" ];
                    function linkInTextBlockStyleEvaluate(node) {
                        if (isBlock2(node)) return false;
                        var parentBlock = get_composed_parent_default(node);
                        while (parentBlock && 1 === parentBlock.nodeType && !isBlock2(parentBlock)) parentBlock = get_composed_parent_default(parentBlock);
                        if (!parentBlock) return;
                        this.relatedNodes([ parentBlock ]);
                        if (element_is_distinct_default(node, parentBlock)) return true;
                        if (hasPseudoContent(node)) {
                            this.data({
                                messageKey: "pseudoContent"
                            });
                            return;
                        }
                        return false;
                    }
                    function isBlock2(elm) {
                        var display2 = window.getComputedStyle(elm).getPropertyValue("display");
                        return -1 !== blockLike2.indexOf(display2) || "table-" === display2.substr(0, 6);
                    }
                    function hasPseudoContent(node) {
                        for (var _i41 = 0, _arr3 = [ "before", "after" ]; _i41 < _arr3.length; _i41++) {
                            var pseudo = _arr3[_i41];
                            var style = window.getComputedStyle(node, ":".concat(pseudo));
                            var content = style.getPropertyValue("content");
                            if ("none" !== content) return true;
                        }
                        return false;
                    }
                    function getContrast2(color1, color2) {
                        var c1lum = color1.getRelativeLuminance();
                        var c2lum = color2.getRelativeLuminance();
                        return (Math.max(c1lum, c2lum) + .05) / (Math.min(c1lum, c2lum) + .05);
                    }
                    var blockLike3 = [ "block", "list-item", "table", "flex", "grid", "inline-block" ];
                    function isBlock3(elm) {
                        var display2 = window.getComputedStyle(elm).getPropertyValue("display");
                        return -1 !== blockLike3.indexOf(display2) || "table-" === display2.substr(0, 6);
                    }
                    function linkInTextBlockEvaluate(node, options) {
                        var requiredContrastRatio = options.requiredContrastRatio, allowSameColor = options.allowSameColor;
                        if (isBlock3(node)) return false;
                        var parentBlock = get_composed_parent_default(node);
                        while (parentBlock && 1 === parentBlock.nodeType && !isBlock3(parentBlock)) parentBlock = get_composed_parent_default(parentBlock);
                        if (!parentBlock) return;
                        this.relatedNodes([ parentBlock ]);
                        var nodeColor = _getForegroundColor(node);
                        var parentColor = _getForegroundColor(parentBlock);
                        var nodeBackgroundColor = _getBackgroundColor2(node);
                        var parentBackgroundColor = _getBackgroundColor2(parentBlock);
                        var textContrast = nodeColor && parentColor ? getContrast2(nodeColor, parentColor) : void 0;
                        if (textContrast) textContrast = Math.floor(100 * textContrast) / 100;
                        if (textContrast && textContrast >= requiredContrastRatio) return true;
                        var backgroundContrast = nodeBackgroundColor && parentBackgroundColor ? getContrast2(nodeBackgroundColor, parentBackgroundColor) : void 0;
                        if (backgroundContrast) backgroundContrast = Math.floor(100 * backgroundContrast) / 100;
                        if (backgroundContrast && backgroundContrast >= requiredContrastRatio) return true;
                        if (!backgroundContrast) {
                            var _incomplete_data_defa;
                            var reason = null !== (_incomplete_data_defa = incomplete_data_default.get("bgColor")) && void 0 !== _incomplete_data_defa ? _incomplete_data_defa : "bgContrast";
                            this.data({
                                messageKey: reason
                            });
                            incomplete_data_default.clear();
                            return;
                        }
                        if (!textContrast) return;
                        if (allowSameColor && 1 === textContrast && 1 === backgroundContrast) return true;
                        if (1 === textContrast && backgroundContrast > 1) {
                            this.data({
                                messageKey: "bgContrast",
                                contrastRatio: backgroundContrast,
                                requiredContrastRatio,
                                nodeBackgroundColor: nodeBackgroundColor ? nodeBackgroundColor.toHexString() : void 0,
                                parentBackgroundColor: parentBackgroundColor ? parentBackgroundColor.toHexString() : void 0
                            });
                            return false;
                        }
                        this.data({
                            messageKey: "fgContrast",
                            contrastRatio: textContrast,
                            requiredContrastRatio,
                            nodeColor: nodeColor ? nodeColor.toHexString() : void 0,
                            parentColor: parentColor ? parentColor.toHexString() : void 0
                        });
                        return false;
                    }
                    var link_in_text_block_evaluate_default = linkInTextBlockEvaluate;
                    function colorContrastEvaluate(node, options, virtualNode) {
                        var ignoreUnicode = options.ignoreUnicode, ignoreLength = options.ignoreLength, ignorePseudo = options.ignorePseudo, boldValue = options.boldValue, boldTextPt = options.boldTextPt, largeTextPt = options.largeTextPt, contrastRatio = options.contrastRatio, shadowOutlineEmMax = options.shadowOutlineEmMax, pseudoSizeThreshold = options.pseudoSizeThreshold;
                        if (!_isVisibleOnScreen(node)) {
                            this.data({
                                messageKey: "hidden"
                            });
                            return true;
                        }
                        var visibleText = visible_virtual_default(virtualNode, false, true);
                        if (ignoreUnicode && textIsEmojis(visibleText)) {
                            this.data({
                                messageKey: "nonBmp"
                            });
                            return;
                        }
                        var nodeStyle = window.getComputedStyle(node);
                        var fontSize = parseFloat(nodeStyle.getPropertyValue("font-size"));
                        var fontWeight = nodeStyle.getPropertyValue("font-weight");
                        var bold = parseFloat(fontWeight) >= boldValue || "bold" === fontWeight;
                        var ptSize = Math.ceil(72 * fontSize) / 96;
                        var isSmallFont = bold && ptSize < boldTextPt || !bold && ptSize < largeTextPt;
                        var _ref133 = isSmallFont ? contrastRatio.normal : contrastRatio.large, expected = _ref133.expected, minThreshold = _ref133.minThreshold, maxThreshold = _ref133.maxThreshold;
                        var pseudoElm = findPseudoElement(virtualNode, {
                            ignorePseudo,
                            pseudoSizeThreshold
                        });
                        if (pseudoElm) {
                            this.data({
                                fontSize: "".concat((72 * fontSize / 96).toFixed(1), "pt (").concat(fontSize, "px)"),
                                fontWeight: bold ? "bold" : "normal",
                                messageKey: "pseudoContent",
                                expectedContrastRatio: expected + ":1"
                            });
                            this.relatedNodes(pseudoElm.actualNode);
                            return;
                        }
                        var shadowColors = _getTextShadowColors(node, {
                            minRatio: .001,
                            maxRatio: shadowOutlineEmMax
                        });
                        if (null === shadowColors) {
                            this.data({
                                messageKey: "complexTextShadows"
                            });
                            return;
                        }
                        var bgNodes = [];
                        var bgColor = _getBackgroundColor2(node, bgNodes, shadowOutlineEmMax);
                        var fgColor = _getForegroundColor(node, false, bgColor, options);
                        var contrast2 = null;
                        var contrastContributor = null;
                        var shadowColor = null;
                        if (0 === shadowColors.length) contrast2 = get_contrast_default(bgColor, fgColor); else if (fgColor && bgColor) {
                            shadowColor = [].concat(_toConsumableArray(shadowColors), [ bgColor ]).reduce(_flattenShadowColors);
                            var fgBgContrast = get_contrast_default(bgColor, fgColor);
                            var bgShContrast = get_contrast_default(bgColor, shadowColor);
                            var fgShContrast = get_contrast_default(shadowColor, fgColor);
                            contrast2 = Math.max(fgBgContrast, bgShContrast, fgShContrast);
                            if (contrast2 !== fgBgContrast) contrastContributor = bgShContrast > fgShContrast ? "shadowOnBgColor" : "fgOnShadowColor";
                        }
                        var isValid = contrast2 > expected;
                        if ("number" === typeof minThreshold && ("number" !== typeof contrast2 || contrast2 < minThreshold) || "number" === typeof maxThreshold && ("number" !== typeof contrast2 || contrast2 > maxThreshold)) {
                            this.data({
                                contrastRatio: contrast2
                            });
                            return true;
                        }
                        var truncatedResult = Math.floor(100 * contrast2) / 100;
                        var missing;
                        if (null === bgColor) missing = incomplete_data_default.get("bgColor"); else if (!isValid) missing = contrastContributor;
                        var equalRatio = 1 === truncatedResult;
                        var shortTextContent = 1 === visibleText.length;
                        if (equalRatio) missing = incomplete_data_default.set("bgColor", "equalRatio"); else if (!isValid && shortTextContent && !ignoreLength) missing = "shortTextContent";
                        this.data({
                            fgColor: fgColor ? fgColor.toHexString() : void 0,
                            bgColor: bgColor ? bgColor.toHexString() : void 0,
                            contrastRatio: truncatedResult,
                            fontSize: "".concat((72 * fontSize / 96).toFixed(1), "pt (").concat(fontSize, "px)"),
                            fontWeight: bold ? "bold" : "normal",
                            messageKey: missing,
                            expectedContrastRatio: expected + ":1",
                            shadowColor: shadowColor ? shadowColor.toHexString() : void 0
                        });
                        if (null === fgColor || null === bgColor || equalRatio || shortTextContent && !ignoreLength && !isValid) {
                            missing = null;
                            incomplete_data_default.clear();
                            this.relatedNodes(bgNodes);
                            return;
                        }
                        if (!isValid) this.relatedNodes(bgNodes);
                        return isValid;
                    }
                    function findPseudoElement(vNode, _ref134) {
                        var _ref134$pseudoSizeThr = _ref134.pseudoSizeThreshold, pseudoSizeThreshold = void 0 === _ref134$pseudoSizeThr ? .25 : _ref134$pseudoSizeThr, _ref134$ignorePseudo = _ref134.ignorePseudo, ignorePseudo = void 0 === _ref134$ignorePseudo ? false : _ref134$ignorePseudo;
                        if (ignorePseudo) return;
                        var rect = vNode.boundingClientRect;
                        var minimumSize = rect.width * rect.height * pseudoSizeThreshold;
                        do {
                            var beforeSize = getPseudoElementArea(vNode.actualNode, ":before");
                            var afterSize = getPseudoElementArea(vNode.actualNode, ":after");
                            if (beforeSize + afterSize > minimumSize) return vNode;
                        } while (vNode = vNode.parent);
                    }
                    var getPseudoElementArea = memoize_default((function(node, pseudo) {
                        var style = window.getComputedStyle(node, pseudo);
                        var matchPseudoStyle = function(prop, value) {
                            return style.getPropertyValue(prop) === value;
                        };
                        if (matchPseudoStyle("content", "none") || matchPseudoStyle("display", "none") || matchPseudoStyle("visibility", "hidden") || false === matchPseudoStyle("position", "absolute")) return 0;
                        if (0 === get_own_background_color_default(style).alpha && matchPseudoStyle("background-image", "none")) return 0;
                        var pseudoWidth = parseUnit(style.getPropertyValue("width"));
                        var pseudoHeight = parseUnit(style.getPropertyValue("height"));
                        if ("px" !== pseudoWidth.unit || "px" !== pseudoHeight.unit) return 0 === pseudoWidth.value || 0 === pseudoHeight.value ? 0 : 1 / 0;
                        return pseudoWidth.value * pseudoHeight.value;
                    }));
                    function textIsEmojis(visibleText) {
                        var options = {
                            nonBmp: true
                        };
                        var hasUnicodeChars = has_unicode_default(visibleText, options);
                        var hasNonUnicodeChars = "" === sanitize_default(remove_unicode_default(visibleText, options));
                        return hasUnicodeChars && hasNonUnicodeChars;
                    }
                    function parseUnit(str) {
                        var unitRegex = /^([0-9.]+)([a-z]+)$/i;
                        var _ref135 = str.match(unitRegex) || [], _ref136 = _slicedToArray(_ref135, 3), _ref136$ = _ref136[1], value = void 0 === _ref136$ ? "" : _ref136$, _ref136$2 = _ref136[2], unit = void 0 === _ref136$2 ? "" : _ref136$2;
                        return {
                            value: parseFloat(value),
                            unit: unit.toLowerCase()
                        };
                    }
                    var VALID_TAG_NAMES_FOR_SCROLLABLE_REGIONS = {
                        ARTICLE: true,
                        ASIDE: true,
                        NAV: true,
                        SECTION: true
                    };
                    var VALID_ROLES_FOR_SCROLLABLE_REGIONS = {
                        alert: true,
                        alertdialog: true,
                        application: true,
                        article: true,
                        banner: false,
                        complementary: true,
                        contentinfo: true,
                        dialog: true,
                        form: true,
                        log: true,
                        main: true,
                        navigation: true,
                        region: true,
                        search: false,
                        status: true
                    };
                    function validScrollableTagName(node) {
                        var nodeName2 = node.nodeName.toUpperCase();
                        return VALID_TAG_NAMES_FOR_SCROLLABLE_REGIONS[nodeName2] || false;
                    }
                    function validScrollableRole(node, options) {
                        var role = get_explicit_role_default(node);
                        if (!role) return false;
                        return VALID_ROLES_FOR_SCROLLABLE_REGIONS[role] || options.roles.includes(role) || false;
                    }
                    function validScrollableSemanticsEvaluate(node, options) {
                        return validScrollableRole(node, options) || validScrollableTagName(node);
                    }
                    var valid_scrollable_semantics_evaluate_default = validScrollableSemanticsEvaluate;
                    function unsupportedroleEvaluate(node, options, virtualNode) {
                        var role = get_role_default(virtualNode, {
                            dpub: true,
                            fallback: true
                        });
                        var isUnsupported = is_unsupported_role_default(role);
                        if (isUnsupported) this.data(role);
                        return isUnsupported;
                    }
                    var unsupportedrole_evaluate_default = unsupportedroleEvaluate;
                    function noImplicitExplicitLabelEvaluate(node, options, virtualNode) {
                        var role = get_role_default(virtualNode, {
                            noImplicit: true
                        });
                        this.data(role);
                        var label3;
                        var accText;
                        try {
                            label3 = sanitize_default(label_text_default(virtualNode)).toLowerCase();
                            accText = sanitize_default(_accessibleTextVirtual(virtualNode)).toLowerCase();
                        } catch (_unused17) {
                            return;
                        }
                        if (!accText && !label3) return false;
                        if (!accText && label3) return;
                        if (!accText.includes(label3)) return;
                        return false;
                    }
                    var no_implicit_explicit_label_evaluate_default = noImplicitExplicitLabelEvaluate;
                    function isElementFocusableEvaluate(node, options, virtualNode) {
                        return _isFocusable(virtualNode);
                    }
                    var is_element_focusable_evaluate_default = isElementFocusableEvaluate;
                    function invalidroleEvaluate(node, options, virtualNode) {
                        var allRoles = token_list_default(virtualNode.attr("role"));
                        var allInvalid = allRoles.every((function(role) {
                            return !is_valid_role_default(role.toLowerCase(), {
                                allowAbstract: true
                            });
                        }));
                        if (allInvalid) {
                            this.data(allRoles);
                            return true;
                        }
                        return false;
                    }
                    var invalidrole_evaluate_default = invalidroleEvaluate;
                    function hasWidgetRoleEvaluate(node) {
                        var role = node.getAttribute("role");
                        if (null === role) return false;
                        var roleType = get_role_type_default(role);
                        return "widget" === roleType || "composite" === roleType;
                    }
                    var has_widget_role_evaluate_default = hasWidgetRoleEvaluate;
                    function hasGlobalAriaAttributeEvaluate(node, options, virtualNode) {
                        var globalAttrs = get_global_aria_attrs_default().filter((function(attr) {
                            return virtualNode.hasAttr(attr);
                        }));
                        this.data(globalAttrs);
                        return globalAttrs.length > 0;
                    }
                    var has_global_aria_attribute_evaluate_default = hasGlobalAriaAttributeEvaluate;
                    function nonePresentationOnElementWithNoImplicitRole(virtualNode, explicitRoles) {
                        var hasImplicitRole = implicit_role_default(virtualNode);
                        return !hasImplicitRole && 2 === explicitRoles.length && explicitRoles.includes("none") && explicitRoles.includes("presentation");
                    }
                    function fallbackroleEvaluate(node, options, virtualNode) {
                        var explicitRoles = token_list_default(virtualNode.attr("role"));
                        if (explicitRoles.length <= 1) return false;
                        return nonePresentationOnElementWithNoImplicitRole(virtualNode, explicitRoles) ? void 0 : true;
                    }
                    var fallbackrole_evaluate_default = fallbackroleEvaluate;
                    function deprecatedroleEvaluate(node, options, virtualNode) {
                        var role = get_role_default(virtualNode, {
                            dpub: true,
                            fallback: true
                        });
                        var roleDefinition = standards_default.ariaRoles[role];
                        if (!(null !== roleDefinition && void 0 !== roleDefinition && roleDefinition.deprecated)) return false;
                        this.data(role);
                        return true;
                    }
                    function brailleRoleDescriptionEquivalentEvaluate(node, options, virtualNode) {
                        var _virtualNode$attr;
                        var brailleRoleDesc = null !== (_virtualNode$attr = virtualNode.attr("aria-brailleroledescription")) && void 0 !== _virtualNode$attr ? _virtualNode$attr : "";
                        if ("" === sanitize_default(brailleRoleDesc)) return true;
                        var roleDesc = virtualNode.attr("aria-roledescription");
                        if ("string" !== typeof roleDesc) {
                            this.data({
                                messageKey: "noRoleDescription"
                            });
                            return false;
                        }
                        if ("" === sanitize_default(roleDesc)) {
                            this.data({
                                messageKey: "emptyRoleDescription"
                            });
                            return false;
                        }
                        return true;
                    }
                    function brailleLabelEquivalentEvaluate(node, options, virtualNode) {
                        var _virtualNode$attr2;
                        var brailleLabel = null !== (_virtualNode$attr2 = virtualNode.attr("aria-braillelabel")) && void 0 !== _virtualNode$attr2 ? _virtualNode$attr2 : "";
                        if (!brailleLabel.trim()) return true;
                        try {
                            return "" !== sanitize_default(_accessibleTextVirtual(virtualNode));
                        } catch (_unused18) {
                            return;
                        }
                    }
                    function ariaValidAttrValueEvaluate(node, options, virtualNode) {
                        options = Array.isArray(options.value) ? options.value : [];
                        var needsReview = "";
                        var messageKey = "";
                        var invalid = [];
                        var aria = /^aria-/;
                        var skipAttrs = [ "aria-errormessage" ];
                        var preChecks = {
                            "aria-controls": function() {
                                var hasPopup = false === [ "false", null ].includes(virtualNode.attr("aria-haspopup"));
                                if (hasPopup) {
                                    needsReview = 'aria-controls="'.concat(virtualNode.attr("aria-controls"), '"');
                                    messageKey = "controlsWithinPopup";
                                }
                                return "false" !== virtualNode.attr("aria-expanded") && "false" !== virtualNode.attr("aria-selected") && false === hasPopup;
                            },
                            "aria-current": function(validValue) {
                                if (!validValue) {
                                    needsReview = 'aria-current="'.concat(virtualNode.attr("aria-current"), '"');
                                    messageKey = "ariaCurrent";
                                }
                                return;
                            },
                            "aria-owns": function() {
                                return "false" !== virtualNode.attr("aria-expanded");
                            },
                            "aria-describedby": function(validValue) {
                                if (!validValue) {
                                    needsReview = 'aria-describedby="'.concat(virtualNode.attr("aria-describedby"), '"');
                                    messageKey = axe._tree && axe._tree[0]._hasShadowRoot ? "noIdShadow" : "noId";
                                }
                                return;
                            },
                            "aria-labelledby": function(validValue) {
                                if (!validValue) {
                                    needsReview = 'aria-labelledby="'.concat(virtualNode.attr("aria-labelledby"), '"');
                                    messageKey = axe._tree && axe._tree[0]._hasShadowRoot ? "noIdShadow" : "noId";
                                }
                            }
                        };
                        virtualNode.attrNames.forEach((function(attrName) {
                            if (skipAttrs.includes(attrName) || options.includes(attrName) || !aria.test(attrName)) return;
                            var validValue;
                            var attrValue = virtualNode.attr(attrName);
                            try {
                                validValue = validate_attr_value_default(virtualNode, attrName);
                            } catch (_unused19) {
                                needsReview = "".concat(attrName, '="').concat(attrValue, '"');
                                messageKey = "idrefs";
                                return;
                            }
                            if ((preChecks[attrName] ? preChecks[attrName](validValue) : true) && !validValue) if ("" === attrValue && !isStringType(attrName)) {
                                needsReview = attrName;
                                messageKey = "empty";
                            } else invalid.push("".concat(attrName, '="').concat(attrValue, '"'));
                        }));
                        if (invalid.length) {
                            this.data(invalid);
                            return false;
                        }
                        if (needsReview) {
                            this.data({
                                messageKey,
                                needsReview
                            });
                            return;
                        }
                        return true;
                    }
                    function isStringType(attrName) {
                        var _standards_default$ar;
                        return "string" === (null === (_standards_default$ar = standards_default.ariaAttrs[attrName]) || void 0 === _standards_default$ar ? void 0 : _standards_default$ar.type);
                    }
                    function ariaValidAttrEvaluate(node, options, virtualNode) {
                        options = Array.isArray(options.value) ? options.value : [];
                        var invalid = [];
                        var aria = /^aria-/;
                        virtualNode.attrNames.forEach((function(attr) {
                            if (-1 === options.indexOf(attr) && aria.test(attr) && !validate_attr_default(attr)) invalid.push(attr);
                        }));
                        if (invalid.length) {
                            this.data(invalid);
                            return false;
                        }
                        return true;
                    }
                    var aria_valid_attr_evaluate_default = ariaValidAttrEvaluate;
                    function ariaUnsupportedAttrEvaluate(node, options, virtualNode) {
                        var unsupportedAttrs = virtualNode.attrNames.filter((function(name) {
                            var attribute = standards_default.ariaAttrs[name];
                            if (!validate_attr_default(name)) return false;
                            var unsupported = attribute.unsupported;
                            if ("object" !== _typeof(unsupported)) return !!unsupported;
                            return !matches_default2(node, unsupported.exceptions);
                        }));
                        if (unsupportedAttrs.length) {
                            this.data(unsupportedAttrs);
                            return true;
                        }
                        return false;
                    }
                    var aria_unsupported_attr_evaluate_default = ariaUnsupportedAttrEvaluate;
                    function ariaRoledescriptionEvaluate(node) {
                        var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                        var virtualNode = arguments.length > 2 ? arguments[2] : void 0;
                        var role = get_role_default(virtualNode);
                        var supportedRoles = options.supportedRoles || [];
                        if (supportedRoles.includes(role)) return true;
                        if (role && "presentation" !== role && "none" !== role) return;
                        return false;
                    }
                    var aria_roledescription_evaluate_default = ariaRoledescriptionEvaluate;
                    function getMissingContext(virtualNode, ownGroupRoles, reqContext, includeElement) {
                        var explicitRole2 = get_explicit_role_default(virtualNode);
                        if (!reqContext) reqContext = required_context_default(explicitRole2);
                        if (!reqContext) return null;
                        var allowsGroup = reqContext.includes("group");
                        var vNode = includeElement ? virtualNode : virtualNode.parent;
                        while (vNode) {
                            var role = get_role_default(vNode, {
                                noPresentational: true
                            });
                            if (!role) vNode = vNode.parent; else if ("group" === role && allowsGroup) {
                                if (ownGroupRoles.includes(explicitRole2)) reqContext.push(explicitRole2);
                                reqContext = reqContext.filter((function(r) {
                                    return "group" !== r;
                                }));
                                vNode = vNode.parent;
                            } else if (reqContext.includes(role)) return null; else return reqContext;
                        }
                        return reqContext;
                    }
                    function getAriaOwners(element) {
                        var owners = [];
                        var o = null;
                        while (element) {
                            if (element.getAttribute("id")) {
                                var _id5 = escape_selector_default(element.getAttribute("id"));
                                var doc = get_root_node_default2(element);
                                o = doc.querySelector("[aria-owns~=".concat(_id5, "]"));
                                if (o) owners.push(o);
                            }
                            element = element.parentElement;
                        }
                        return owners.length ? owners : null;
                    }
                    function ariaRequiredParentEvaluate(node, options, virtualNode) {
                        var ownGroupRoles = options && Array.isArray(options.ownGroupRoles) ? options.ownGroupRoles : [];
                        var missingParents = getMissingContext(virtualNode, ownGroupRoles);
                        if (!missingParents) return true;
                        var owners = getAriaOwners(node);
                        if (owners) for (var _i42 = 0, l = owners.length; _i42 < l; _i42++) {
                            missingParents = getMissingContext(get_node_from_tree_default(owners[_i42]), ownGroupRoles, missingParents, true);
                            if (!missingParents) return true;
                        }
                        this.data(missingParents);
                        return false;
                    }
                    var aria_required_parent_evaluate_default = ariaRequiredParentEvaluate;
                    function ariaRequiredChildrenEvaluate(node, options, virtualNode) {
                        var reviewEmpty = options && Array.isArray(options.reviewEmpty) ? options.reviewEmpty : [];
                        var explicitRole2 = get_explicit_role_default(virtualNode, {
                            dpub: true
                        });
                        var required = required_owned_default(explicitRole2);
                        if (null === required) return true;
                        var ownedRoles = getOwnedRoles(virtualNode, required);
                        var unallowed = ownedRoles.filter((function(_ref137) {
                            var role = _ref137.role, vNode = _ref137.vNode;
                            return 1 === vNode.props.nodeType && !required.includes(role);
                        }));
                        if (unallowed.length) {
                            this.relatedNodes(unallowed.map((function(_ref138) {
                                var vNode = _ref138.vNode;
                                return vNode;
                            })));
                            this.data({
                                messageKey: "unallowed",
                                values: unallowed.map((function(_ref139) {
                                    var vNode = _ref139.vNode, attr = _ref139.attr;
                                    return getUnallowedSelector(vNode, attr);
                                })).filter((function(selector, index, array) {
                                    return array.indexOf(selector) === index;
                                })).join(", ")
                            });
                            return false;
                        }
                        if (hasRequiredChildren(required, ownedRoles)) return true;
                        if ("true" === virtualNode.attr("aria-busy")) {
                            this.data({
                                messageKey: "aria-busy"
                            });
                            return true;
                        }
                        this.data(required);
                        if (reviewEmpty.includes(explicitRole2) && !ownedRoles.some(isContent)) return;
                        return false;
                    }
                    function getOwnedRoles(virtualNode, required) {
                        var vNode;
                        var ownedRoles = [];
                        var ownedVirtual = get_owned_virtual_default(virtualNode);
                        var _loop10 = function() {
                            if (3 === vNode.props.nodeType) ownedRoles.push({
                                vNode,
                                role: null
                            });
                            if (1 !== vNode.props.nodeType || !_isVisibleToScreenReaders(vNode)) return 1;
                            var role = get_role_default(vNode, {
                                noPresentational: true
                            });
                            var globalAriaAttr = getGlobalAriaAttr(vNode);
                            var hasGlobalAriaOrFocusable = !!globalAriaAttr || _isFocusable(vNode);
                            if (!role && !hasGlobalAriaOrFocusable || [ "group", "rowgroup" ].includes(role) && required.some((function(requiredRole) {
                                return requiredRole === role;
                            }))) ownedVirtual.push.apply(ownedVirtual, _toConsumableArray(vNode.children)); else if (role || hasGlobalAriaOrFocusable) {
                                var attr = globalAriaAttr || "tabindex";
                                ownedRoles.push({
                                    role,
                                    attr,
                                    vNode
                                });
                            }
                        };
                        while (vNode = ownedVirtual.shift()) if (_loop10()) continue;
                        return ownedRoles;
                    }
                    function hasRequiredChildren(required, ownedRoles) {
                        return ownedRoles.some((function(_ref140) {
                            var role = _ref140.role;
                            return role && required.includes(role);
                        }));
                    }
                    function getGlobalAriaAttr(vNode) {
                        return get_global_aria_attrs_default().find((function(attr) {
                            return vNode.hasAttr(attr);
                        }));
                    }
                    function getUnallowedSelector(vNode, attr) {
                        var _vNode$props = vNode.props, nodeName2 = _vNode$props.nodeName, nodeType = _vNode$props.nodeType;
                        if (3 === nodeType) return "#text";
                        var role = get_explicit_role_default(vNode, {
                            dpub: true
                        });
                        if (role) return "[role=".concat(role, "]");
                        if (attr) return nodeName2 + "[".concat(attr, "]");
                        return nodeName2;
                    }
                    function isContent(_ref141) {
                        var vNode = _ref141.vNode;
                        if (3 === vNode.props.nodeType) return vNode.props.nodeValue.trim().length > 0;
                        return has_content_virtual_default(vNode, false, true);
                    }
                    function ariaRequiredAttrEvaluate(node) {
                        var _virtualNode$attr3;
                        var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                        var virtualNode = arguments.length > 2 ? arguments[2] : void 0;
                        var role = get_explicit_role_default(virtualNode);
                        var attrs = virtualNode.attrNames;
                        var requiredAttrs = required_attr_default(role);
                        if (Array.isArray(options[role])) requiredAttrs = unique_array_default(options[role], requiredAttrs);
                        if (!role || !attrs.length || !requiredAttrs.length) return true;
                        if (isStaticSeparator(virtualNode, role) || isClosedCombobox(virtualNode, role)) return true;
                        if ("slider" === role && null !== (_virtualNode$attr3 = virtualNode.attr("aria-valuetext")) && void 0 !== _virtualNode$attr3 && _virtualNode$attr3.trim()) return true;
                        var elmSpec = get_element_spec_default(virtualNode);
                        var missingAttrs = requiredAttrs.filter((function(requiredAttr2) {
                            return !virtualNode.attr(requiredAttr2) && !hasImplicitAttr(elmSpec, requiredAttr2);
                        }));
                        if (missingAttrs.length) {
                            this.data(missingAttrs);
                            return false;
                        }
                        return true;
                    }
                    function isStaticSeparator(vNode, role) {
                        return "separator" === role && !_isFocusable(vNode);
                    }
                    function hasImplicitAttr(elmSpec, attr) {
                        var _elmSpec$implicitAttr;
                        return void 0 !== (null === (_elmSpec$implicitAttr = elmSpec.implicitAttrs) || void 0 === _elmSpec$implicitAttr ? void 0 : _elmSpec$implicitAttr[attr]);
                    }
                    function isClosedCombobox(vNode, role) {
                        return "combobox" === role && "false" === vNode.attr("aria-expanded");
                    }
                    function ariaProhibitedAttrEvaluate(node) {
                        var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                        var virtualNode = arguments.length > 2 ? arguments[2] : void 0;
                        var elementsAllowedAriaLabel = (null === options || void 0 === options ? void 0 : options.elementsAllowedAriaLabel) || [];
                        var nodeName2 = virtualNode.props.nodeName;
                        var role = get_role_default(virtualNode, {
                            chromium: true
                        });
                        var prohibitedList = listProhibitedAttrs(virtualNode, role, nodeName2, elementsAllowedAriaLabel);
                        var prohibited = prohibitedList.filter((function(attrName) {
                            if (!virtualNode.attrNames.includes(attrName)) return false;
                            return "" !== sanitize_default(virtualNode.attr(attrName));
                        }));
                        if (0 === prohibited.length) return false;
                        var messageKey = virtualNode.hasAttr("role") ? "hasRole" : "noRole";
                        messageKey += prohibited.length > 1 ? "Plural" : "Singular";
                        this.data({
                            role,
                            nodeName: nodeName2,
                            messageKey,
                            prohibited
                        });
                        var textContent = subtree_text_default(virtualNode, {
                            subtreeDescendant: true
                        });
                        if ("" !== sanitize_default(textContent)) return;
                        return true;
                    }
                    function listProhibitedAttrs(vNode, role, nodeName2, elementsAllowedAriaLabel) {
                        var roleSpec = standards_default.ariaRoles[role];
                        if (roleSpec) return roleSpec.prohibitedAttrs || [];
                        if (!!role || elementsAllowedAriaLabel.includes(nodeName2) || "widget" === getClosestAncestorRoleType(vNode)) return [];
                        return [ "aria-label", "aria-labelledby" ];
                    }
                    var getClosestAncestorRoleType = memoize_default((function(vNode) {
                        if (!vNode) return;
                        var role = get_role_default(vNode, {
                            noPresentational: true,
                            chromium: true
                        });
                        if (role) return get_role_type_default(role);
                        return getClosestAncestorRoleType(vNode.parent);
                    }));
                    function ariaLevelEvaluate(node, options, virtualNode) {
                        var ariaHeadingLevel = virtualNode.attr("aria-level");
                        var ariaLevel = parseInt(ariaHeadingLevel, 10);
                        if (ariaLevel > 6) return;
                        return true;
                    }
                    var aria_level_evaluate_default = ariaLevelEvaluate;
                    function ariaHiddenBodyEvaluate(node, options, virtualNode) {
                        return "true" !== virtualNode.attr("aria-hidden");
                    }
                    var aria_hidden_body_evaluate_default = ariaHiddenBodyEvaluate;
                    function ariaErrormessageEvaluate(node, options, virtualNode) {
                        options = Array.isArray(options) ? options : [];
                        var errorMessageAttr = virtualNode.attr("aria-errormessage");
                        var hasAttr = virtualNode.hasAttr("aria-errormessage");
                        var invaid = virtualNode.attr("aria-invalid");
                        var hasInvallid = virtualNode.hasAttr("aria-invalid");
                        if (!hasInvallid || "false" === invaid) return true;
                        function validateAttrValue2(attr) {
                            if ("" === attr.trim()) return standards_default.ariaAttrs["aria-errormessage"].allowEmpty;
                            var idref;
                            try {
                                idref = attr && idrefs_default(virtualNode, "aria-errormessage")[0];
                            } catch (_unused20) {
                                this.data({
                                    messageKey: "idrefs",
                                    values: token_list_default(attr)
                                });
                                return;
                            }
                            if (idref) {
                                if (!_isVisibleToScreenReaders(idref)) {
                                    this.data({
                                        messageKey: "hidden",
                                        values: token_list_default(attr)
                                    });
                                    return false;
                                }
                                return "alert" === idref.getAttribute("role") || "assertive" === idref.getAttribute("aria-live") || "polite" === idref.getAttribute("aria-live") || token_list_default(virtualNode.attr("aria-describedby")).indexOf(attr) > -1;
                            }
                            return;
                        }
                        if (-1 === options.indexOf(errorMessageAttr) && hasAttr) {
                            this.data(token_list_default(errorMessageAttr));
                            return validateAttrValue2.call(this, errorMessageAttr);
                        }
                        return true;
                    }
                    function ariaConditionalRowAttr(node) {
                        var _invalidTableRowAttrs, _invalidTableRowAttrs2;
                        var _ref142 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, invalidTableRowAttrs = _ref142.invalidTableRowAttrs;
                        var virtualNode = arguments.length > 2 ? arguments[2] : void 0;
                        var invalidAttrs = null !== (_invalidTableRowAttrs = null === invalidTableRowAttrs || void 0 === invalidTableRowAttrs || null === (_invalidTableRowAttrs2 = invalidTableRowAttrs.filter) || void 0 === _invalidTableRowAttrs2 ? void 0 : _invalidTableRowAttrs2.call(invalidTableRowAttrs, (function(invalidAttr) {
                            return virtualNode.hasAttr(invalidAttr);
                        }))) && void 0 !== _invalidTableRowAttrs ? _invalidTableRowAttrs : [];
                        if (0 === invalidAttrs.length) return true;
                        var owner = getRowOwner(virtualNode);
                        var ownerRole = owner && get_role_default(owner);
                        if (!ownerRole || "treegrid" === ownerRole) return true;
                        var messageKey = "row".concat(invalidAttrs.length > 1 ? "Plural" : "Singular");
                        this.data({
                            messageKey,
                            invalidAttrs,
                            ownerRole
                        });
                        return false;
                    }
                    function getRowOwner(virtualNode) {
                        if (!virtualNode.parent) return;
                        var rowOwnerQuery = 'table:not([role]), [role~="treegrid"], [role~="table"], [role~="grid"]';
                        return closest_default(virtualNode, rowOwnerQuery);
                    }
                    function ariaConditionalCheckboxAttr(node, options, virtualNode) {
                        var _virtualNode$props = virtualNode.props, nodeName2 = _virtualNode$props.nodeName, type2 = _virtualNode$props.type;
                        var ariaChecked = normalizeAriaChecked(virtualNode.attr("aria-checked"));
                        if ("input" !== nodeName2 || "checkbox" !== type2 || !ariaChecked) return true;
                        var checkState = getCheckState(virtualNode);
                        if (ariaChecked === checkState) return true;
                        this.data({
                            messageKey: "checkbox",
                            checkState
                        });
                        return false;
                    }
                    function getCheckState(vNode) {
                        if (vNode.props.indeterminate) return "mixed";
                        return vNode.props.checked ? "true" : "false";
                    }
                    function normalizeAriaChecked(ariaCheckedVal) {
                        if (!ariaCheckedVal) return "";
                        ariaCheckedVal = ariaCheckedVal.toLowerCase();
                        if ([ "mixed", "true" ].includes(ariaCheckedVal)) return ariaCheckedVal;
                        return "false";
                    }
                    var conditionalRoleMap = {
                        row: ariaConditionalRowAttr,
                        checkbox: ariaConditionalCheckboxAttr
                    };
                    function ariaConditionalAttrEvaluate(node, options, virtualNode) {
                        var role = get_role_default(virtualNode);
                        if (!conditionalRoleMap[role]) return true;
                        return conditionalRoleMap[role].call(this, node, options, virtualNode);
                    }
                    function ariaBusyEvaluate(node, options, virtualNode) {
                        return "true" === virtualNode.attr("aria-busy");
                    }
                    function ariaAllowedRoleEvaluate(node) {
                        var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                        var virtualNode = arguments.length > 2 ? arguments[2] : void 0;
                        var _options$allowImplici = options.allowImplicit, allowImplicit = void 0 === _options$allowImplici ? true : _options$allowImplici, _options$ignoredTags = options.ignoredTags, ignoredTags = void 0 === _options$ignoredTags ? [] : _options$ignoredTags;
                        var nodeName2 = virtualNode.props.nodeName;
                        if (ignoredTags.map((function(tag) {
                            return tag.toLowerCase();
                        })).includes(nodeName2)) return true;
                        var unallowedRoles = get_element_unallowed_roles_default(virtualNode, allowImplicit);
                        if (unallowedRoles.length) {
                            this.data(unallowedRoles);
                            if (!_isVisibleToScreenReaders(virtualNode)) return;
                            return false;
                        }
                        return true;
                    }
                    var aria_allowed_role_evaluate_default = ariaAllowedRoleEvaluate;
                    function ariaAllowedAttrEvaluate(node, options, virtualNode) {
                        var invalid = [];
                        var role = get_role_default(virtualNode);
                        var allowed = allowed_attr_default(role);
                        if (Array.isArray(options[role])) allowed = unique_array_default(options[role].concat(allowed));
                        var _step21, _iterator21 = _createForOfIteratorHelper(virtualNode.attrNames);
                        try {
                            for (_iterator21.s(); !(_step21 = _iterator21.n()).done; ) {
                                var attrName = _step21.value;
                                if (validate_attr_default(attrName) && !allowed.includes(attrName) && !ignoredAttrs(attrName, virtualNode.attr(attrName), virtualNode)) invalid.push(attrName);
                            }
                        } catch (err) {
                            _iterator21.e(err);
                        } finally {
                            _iterator21.f();
                        }
                        if (!invalid.length) return true;
                        this.data(invalid.map((function(attrName) {
                            return attrName + '="' + virtualNode.attr(attrName) + '"';
                        })));
                        if (!role && !is_html_element_default(virtualNode) && !_isFocusable(virtualNode)) return;
                        return false;
                    }
                    function ignoredAttrs(attrName, attrValue, vNode) {
                        if ("aria-required" === attrName && "false" === attrValue) return true;
                        if ("aria-multiline" === attrName && "false" === attrValue && vNode.hasAttr("contenteditable")) return true;
                        return false;
                    }
                    function abstractroleEvaluate(node, options, virtualNode) {
                        var abstractRoles = token_list_default(virtualNode.attr("role")).filter((function(role) {
                            return "abstract" === get_role_type_default(role);
                        }));
                        if (abstractRoles.length > 0) {
                            this.data(abstractRoles);
                            return true;
                        }
                        return false;
                    }
                    var abstractrole_evaluate_default = abstractroleEvaluate;
                    function xmlLangMismatchMatches(node) {
                        var primaryLangValue = get_base_lang_default(node.getAttribute("lang"));
                        var primaryXmlLangValue = get_base_lang_default(node.getAttribute("xml:lang"));
                        return valid_langs_default(primaryLangValue) && valid_langs_default(primaryXmlLangValue);
                    }
                    var xml_lang_mismatch_matches_default = xmlLangMismatchMatches;
                    function windowIsTopMatches(node) {
                        return node.ownerDocument.defaultView.self === node.ownerDocument.defaultView.top;
                    }
                    var window_is_top_matches_default = windowIsTopMatches;
                    function svgNamespaceMatches(node, virtualNode) {
                        try {
                            var nodeName2 = virtualNode.props.nodeName;
                            if ("svg" === nodeName2) return true;
                            return !!closest_default(virtualNode, "svg");
                        } catch (_unused21) {
                            return false;
                        }
                    }
                    var svg_namespace_matches_default = svgNamespaceMatches;
                    function widgetNotInline(node, vNode) {
                        return matchesFns.every((function(fn) {
                            return fn(node, vNode);
                        }));
                    }
                    var matchesFns = [ function(node, vNode) {
                        return isWidgetType(vNode);
                    }, function(node, vNode) {
                        return isNotAreaElement(vNode);
                    }, function(node, vNode) {
                        return !svg_namespace_matches_default(node, vNode);
                    }, function(node, vNode) {
                        return _isFocusable(vNode);
                    }, function(node, vNode) {
                        return _isInTabOrder(vNode) || !hasWidgetAncestorInTabOrder(vNode);
                    }, function(node) {
                        return !is_in_text_block_default(node, {
                            noLengthCompare: true
                        });
                    } ];
                    function isWidgetType(vNode) {
                        return "widget" === get_role_type_default(vNode);
                    }
                    function isNotAreaElement(vNode) {
                        return "area" !== vNode.props.nodeName;
                    }
                    var hasWidgetAncestorInTabOrder = memoize_default((function hasWidgetAncestorInTabOrderMemoized(vNode) {
                        if (!(null !== vNode && void 0 !== vNode && vNode.parent)) return false;
                        if (isWidgetType(vNode.parent) && _isInTabOrder(vNode.parent)) return true;
                        return hasWidgetAncestorInTabOrderMemoized(vNode.parent);
                    }));
                    function tableOrGridRoleMatches(_, vNode) {
                        var role = get_role_default(vNode);
                        return [ "treegrid", "grid", "table" ].includes(role);
                    }
                    function summaryIsInteractiveMatches(_, virtualNode) {
                        var parent = virtualNode.parent;
                        if ("details" !== parent.props.nodeName || isSlottedElm(virtualNode)) return false;
                        var firstSummary = parent.children.find((function(child) {
                            return "summary" === child.props.nodeName;
                        }));
                        if (firstSummary !== virtualNode) return false;
                        return true;
                    }
                    function isSlottedElm(vNode) {
                        var _vNode$actualNode;
                        var domParent = null === (_vNode$actualNode = vNode.actualNode) || void 0 === _vNode$actualNode ? void 0 : _vNode$actualNode.parentElement;
                        return domParent && domParent !== vNode.parent.actualNode;
                    }
                    function skipLinkMatches(node) {
                        return _isSkipLink(node) && is_offscreen_default(node);
                    }
                    var skip_link_matches_default = skipLinkMatches;
                    function scrollableRegionFocusableMatches(node, virtualNode) {
                        return void 0 !== get_scroll_default(node, 13) && false === _isComboboxPopup(virtualNode) && isNoneEmptyElement(virtualNode);
                    }
                    function isNoneEmptyElement(vNode) {
                        return query_selector_all_default(vNode, "*").some((function(elm) {
                            return has_content_virtual_default(elm, true, true);
                        }));
                    }
                    function presentationRoleConflictMatches(node, virtualNode) {
                        return null !== implicit_role_default(virtualNode, {
                            chromiumRoles: true
                        });
                    }
                    var presentation_role_conflict_matches_default = presentationRoleConflictMatches;
                    function pAsHeadingMatches(node) {
                        var children = Array.from(node.parentNode.childNodes);
                        var nodeText = node.textContent.trim();
                        var isSentence = /[.!?:;](?![.!?:;])/g;
                        if (0 === nodeText.length || (nodeText.match(isSentence) || []).length >= 2) return false;
                        var siblingsAfter = children.slice(children.indexOf(node) + 1).filter((function(elm) {
                            return "P" === elm.nodeName.toUpperCase() && "" !== elm.textContent.trim();
                        }));
                        return 0 !== siblingsAfter.length;
                    }
                    var p_as_heading_matches_default = pAsHeadingMatches;
                    function noExplicitNameRequired(node, virtualNode) {
                        var role = get_explicit_role_default(virtualNode);
                        if (!role || [ "none", "presentation" ].includes(role)) return true;
                        var _ref143 = aria_roles_default[role] || {}, accessibleNameRequired = _ref143.accessibleNameRequired;
                        if (accessibleNameRequired || _isFocusable(virtualNode)) return true;
                        return false;
                    }
                    var no_explicit_name_required_matches_default = noExplicitNameRequired;
                    var object_is_loaded_matches_default = function(node, vNode) {
                        return [ no_explicit_name_required_matches_default, objectHasLoaded ].every((function(fn) {
                            return fn(node, vNode);
                        }));
                    };
                    function objectHasLoaded(node) {
                        var _node$ownerDocument;
                        if (!(null !== node && void 0 !== node && null !== (_node$ownerDocument = node.ownerDocument) && void 0 !== _node$ownerDocument && _node$ownerDocument.createRange)) return true;
                        var range2 = node.ownerDocument.createRange();
                        range2.setStart(node, 0);
                        range2.setEnd(node, node.childNodes.length);
                        return 0 === range2.getClientRects().length;
                    }
                    function notHtmlMatches(node, virtualNode) {
                        return "html" !== virtualNode.props.nodeName;
                    }
                    var not_html_matches_default = notHtmlMatches;
                    function noRoleMatches(node, vNode) {
                        return !vNode.attr("role");
                    }
                    var no_role_matches_default = noRoleMatches;
                    function noNegativeTabindexMatches(node, virtualNode) {
                        var tabindex = parseInt(virtualNode.attr("tabindex"), 10);
                        return isNaN(tabindex) || tabindex >= 0;
                    }
                    var no_negative_tabindex_matches_default = noNegativeTabindexMatches;
                    function noNamingMethodMatches(node, virtualNode) {
                        var _get_element_spec_def3 = get_element_spec_default(virtualNode), namingMethods = _get_element_spec_def3.namingMethods;
                        if (namingMethods && 0 !== namingMethods.length) return false;
                        if ("combobox" === get_explicit_role_default(virtualNode) && query_selector_all_default(virtualNode, 'input:not([type="hidden"])').length) return false;
                        if (_isComboboxPopup(virtualNode, {
                            popupRoles: [ "listbox" ]
                        })) return false;
                        return true;
                    }
                    var no_naming_method_matches_default = noNamingMethodMatches;
                    function noEmptyRoleMatches(node, virtualNode) {
                        if (!virtualNode.hasAttr("role")) return false;
                        if (!virtualNode.attr("role").trim()) return false;
                        return true;
                    }
                    var no_empty_role_matches_default = noEmptyRoleMatches;
                    function noAutoplayAudioMatches(node) {
                        if (!node.currentSrc) return false;
                        if (node.hasAttribute("paused") || node.hasAttribute("muted")) return false;
                        return true;
                    }
                    var no_autoplay_audio_matches_default = noAutoplayAudioMatches;
                    function nestedInteractiveMatches(node, virtualNode) {
                        var role = get_role_default(virtualNode);
                        if (!role) return false;
                        return !!standards_default.ariaRoles[role].childrenPresentational;
                    }
                    var nested_interactive_matches_default = nestedInteractiveMatches;
                    function linkInTextBlockMatches(node) {
                        var text = sanitize_default(node.innerText);
                        var role = node.getAttribute("role");
                        if (role && "link" !== role) return false;
                        if (!text) return false;
                        if (!_isVisibleOnScreen(node)) return false;
                        return is_in_text_block_default(node);
                    }
                    var link_in_text_block_matches_default = linkInTextBlockMatches;
                    function dataTableMatches(node) {
                        return !is_data_table_default(node) && !_isFocusable(node);
                    }
                    var layout_table_matches_default = dataTableMatches;
                    function landmarkUniqueMatches(node, virtualNode) {
                        return isLandmarkVirtual(virtualNode) && _isVisibleToScreenReaders(virtualNode);
                    }
                    function isLandmarkVirtual(vNode) {
                        var landmarkRoles2 = get_aria_roles_by_type_default("landmark");
                        var role = get_role_default(vNode);
                        if (!role) return false;
                        var nodeName2 = vNode.props.nodeName;
                        if ("section" === nodeName2 || "form" === nodeName2) {
                            var accessibleText2 = _accessibleTextVirtual(vNode);
                            return !!accessibleText2;
                        }
                        return landmarkRoles2.indexOf(role) >= 0 || "region" === role;
                    }
                    function landmarkHasBodyContextMatches(node, virtualNode) {
                        var nativeScopeFilter = "article, aside, main, nav, section";
                        return node.hasAttribute("role") || !find_up_virtual_default(virtualNode, nativeScopeFilter);
                    }
                    var landmark_has_body_context_matches_default = landmarkHasBodyContextMatches;
                    function labelMatches(node, virtualNode) {
                        if ("input" !== virtualNode.props.nodeName || false === virtualNode.hasAttr("type")) return true;
                        var type2 = virtualNode.attr("type").toLowerCase();
                        return false === [ "hidden", "image", "button", "submit", "reset" ].includes(type2);
                    }
                    var label_matches_default = labelMatches;
                    function labelContentNameMismatchMatches(node, virtualNode) {
                        var role = get_role_default(node);
                        if (!role) return false;
                        var widgetRoles = get_aria_roles_by_type_default("widget");
                        var isWidgetType2 = widgetRoles.includes(role);
                        if (!isWidgetType2) return false;
                        var rolesWithNameFromContents = get_aria_roles_supporting_name_from_content_default();
                        if (!rolesWithNameFromContents.includes(role)) return false;
                        if (!sanitize_default(_arialabelText(virtualNode)) && !sanitize_default(arialabelledby_text_default(node))) return false;
                        if (!sanitize_default(visible_virtual_default(virtualNode))) return false;
                        return true;
                    }
                    var label_content_name_mismatch_matches_default = labelContentNameMismatchMatches;
                    function isVisibleOnScreenMatches(node, virtualNode) {
                        return _isVisibleOnScreen(virtualNode);
                    }
                    function hasVisibleTextMatches(node) {
                        return _isVisibleOnScreen(node);
                    }
                    function isInitiatorMatches(node, virtualNode, context) {
                        return context.initiator;
                    }
                    var is_initiator_matches_default = isInitiatorMatches;
                    function insertedIntoFocusOrderMatches(node) {
                        return inserted_into_focus_order_default(node);
                    }
                    var inserted_into_focus_order_matches_default = insertedIntoFocusOrderMatches;
                    function identicalLinksSamePurposeMatches(node, virtualNode) {
                        var hasAccName = !!_accessibleTextVirtual(virtualNode);
                        if (!hasAccName) return false;
                        var role = get_role_default(node);
                        if (role && "link" !== role) return false;
                        return true;
                    }
                    var identical_links_same_purpose_matches_default = identicalLinksSamePurposeMatches;
                    function htmlNamespaceMatches(node, virtualNode) {
                        return !svg_namespace_matches_default(node, virtualNode);
                    }
                    var html_namespace_matches_default = htmlNamespaceMatches;
                    function headingMatches(node, virtualNode) {
                        return "heading" === get_role_default(virtualNode);
                    }
                    function hasImplicitChromiumRoleMatches(node, virtualNode) {
                        return null !== implicit_role_default(virtualNode, {
                            chromium: true
                        });
                    }
                    var has_implicit_chromium_role_matches_default = hasImplicitChromiumRoleMatches;
                    function frameTitleHasTextMatches(node) {
                        var title = node.getAttribute("title");
                        return !!sanitize_default(title);
                    }
                    var frame_title_has_text_matches_default = frameTitleHasTextMatches;
                    function frameFocusableContentMatches(node, virtualNode, context) {
                        var _context$size, _context$size2;
                        return !context.initiator && !context.focusable && (null === (_context$size = context.size) || void 0 === _context$size ? void 0 : _context$size.width) * (null === (_context$size2 = context.size) || void 0 === _context$size2 ? void 0 : _context$size2.height) > 1;
                    }
                    var frame_focusable_content_matches_default = frameFocusableContentMatches;
                    function duplicateIdMiscMatches(node) {
                        var id = node.getAttribute("id").trim();
                        var idSelector = '*[id="'.concat(escape_selector_default(id), '"]');
                        var idMatchingElms = Array.from(get_root_node_default2(node).querySelectorAll(idSelector));
                        return !is_accessible_ref_default(node) && idMatchingElms.every((function(elm) {
                            return !_isFocusable(elm);
                        }));
                    }
                    var duplicate_id_misc_matches_default = duplicateIdMiscMatches;
                    function duplicateIdAriaMatches(node) {
                        return is_accessible_ref_default(node);
                    }
                    var duplicate_id_aria_matches_default = duplicateIdAriaMatches;
                    function duplicateIdActiveMatches(node) {
                        var id = node.getAttribute("id").trim();
                        var idSelector = '*[id="'.concat(escape_selector_default(id), '"]');
                        var idMatchingElms = Array.from(get_root_node_default2(node).querySelectorAll(idSelector));
                        return !is_accessible_ref_default(node) && idMatchingElms.some(_isFocusable);
                    }
                    var duplicate_id_active_matches_default = duplicateIdActiveMatches;
                    function dataTableMatches2(node) {
                        return is_data_table_default(node);
                    }
                    var data_table_matches_default = dataTableMatches2;
                    function dataTableLargeMatches(node) {
                        if (is_data_table_default(node)) {
                            var tableArray = to_grid_default(node);
                            return tableArray.length >= 3 && tableArray[0].length >= 3 && tableArray[1].length >= 3 && tableArray[2].length >= 3;
                        }
                        return false;
                    }
                    var data_table_large_matches_default = dataTableLargeMatches;
                    function colorContrastMatches(node, virtualNode) {
                        var _virtualNode$props2 = virtualNode.props, nodeName2 = _virtualNode$props2.nodeName, inputType = _virtualNode$props2.type;
                        if ("option" === nodeName2) return false;
                        if ("select" === nodeName2 && !node.options.length) return false;
                        var nonTextInput = [ "hidden", "range", "color", "checkbox", "radio", "image" ];
                        if ("input" === nodeName2 && nonTextInput.includes(inputType)) return false;
                        if (is_disabled_default(virtualNode) || _isInert(virtualNode)) return false;
                        var formElements = [ "input", "select", "textarea" ];
                        if (formElements.includes(nodeName2)) {
                            var style = window.getComputedStyle(node);
                            var textIndent = parseInt(style.getPropertyValue("text-indent"), 10);
                            if (textIndent) {
                                var rect = node.getBoundingClientRect();
                                rect = {
                                    top: rect.top,
                                    bottom: rect.bottom,
                                    left: rect.left + textIndent,
                                    right: rect.right + textIndent
                                };
                                if (!visually_overlaps_default(rect, node)) return false;
                            }
                            return true;
                        }
                        var nodeParentLabel = find_up_virtual_default(virtualNode, "label");
                        if ("label" === nodeName2 || nodeParentLabel) {
                            var labelNode = nodeParentLabel || node;
                            var labelVirtual3 = nodeParentLabel ? get_node_from_tree_default(nodeParentLabel) : virtualNode;
                            if (labelNode.htmlFor) {
                                var doc = get_root_node_default2(labelNode);
                                var explicitControl = doc.getElementById(labelNode.htmlFor);
                                var explicitControlVirtual = explicitControl && get_node_from_tree_default(explicitControl);
                                if (explicitControlVirtual && is_disabled_default(explicitControlVirtual)) return false;
                            }
                            var query = 'input:not([type="hidden"],[type="image"],[type="button"],[type="submit"],[type="reset"]), select, textarea';
                            var implicitControl = query_selector_all_default(labelVirtual3, query)[0];
                            if (implicitControl && is_disabled_default(implicitControl)) return false;
                        }
                        var ariaLabelledbyControls = [];
                        var ancestorNode = virtualNode;
                        while (ancestorNode) {
                            if (ancestorNode.props.id) {
                                var virtualControls = get_accessible_refs_default(ancestorNode).filter((function(control) {
                                    return token_list_default(control.getAttribute("aria-labelledby") || "").includes(ancestorNode.props.id);
                                })).map((function(control) {
                                    return get_node_from_tree_default(control);
                                }));
                                ariaLabelledbyControls.push.apply(ariaLabelledbyControls, _toConsumableArray(virtualControls));
                            }
                            ancestorNode = ancestorNode.parent;
                        }
                        if (ariaLabelledbyControls.length > 0 && ariaLabelledbyControls.every(is_disabled_default)) return false;
                        if (!hasRealTextChildren(virtualNode)) return false;
                        var range2 = document.createRange();
                        var childNodes = virtualNode.children;
                        for (var index = 0; index < childNodes.length; index++) {
                            var child = childNodes[index];
                            if (3 === child.actualNode.nodeType && "" !== sanitize_default(child.actualNode.nodeValue)) range2.selectNodeContents(child.actualNode);
                        }
                        var rects = Array.from(range2.getClientRects());
                        var clippingAncestors = get_overflow_hidden_ancestors_default(virtualNode);
                        return rects.some((function(rect) {
                            var overlaps = visually_overlaps_default(rect, node);
                            if (!clippingAncestors.length) return overlaps;
                            var withinOverflow = clippingAncestors.some((function(overflowNode) {
                                return _rectsOverlap(rect, overflowNode.boundingClientRect);
                            }));
                            return overlaps && withinOverflow;
                        }));
                    }
                    var color_contrast_matches_default = colorContrastMatches;
                    var removeUnicodeOptions = {
                        emoji: true,
                        nonBmp: false,
                        punctuations: true
                    };
                    function hasRealTextChildren(virtualNode) {
                        var visibleText = visible_virtual_default(virtualNode, false, true);
                        if ("" === visibleText || "" === remove_unicode_default(visibleText, removeUnicodeOptions)) return false;
                        return virtualNode.children.some((function(vChild) {
                            return "#text" === vChild.props.nodeName && !_isIconLigature(vChild);
                        }));
                    }
                    function bypassMatches(node, virtualNode, context) {
                        if (is_initiator_matches_default(node, virtualNode, context)) return !!node.querySelector("a[href]");
                        return true;
                    }
                    var bypass_matches_default = bypassMatches;
                    function autocompleteMatches(node, virtualNode) {
                        var autocomplete2 = virtualNode.attr("autocomplete");
                        if (!autocomplete2 || "" === sanitize_default(autocomplete2)) return false;
                        var nodeName2 = virtualNode.props.nodeName;
                        if (false === [ "textarea", "input", "select" ].includes(nodeName2)) return false;
                        var excludedInputTypes = [ "submit", "reset", "button", "hidden" ];
                        if ("input" === nodeName2 && excludedInputTypes.includes(virtualNode.props.type)) return false;
                        var ariaDisabled = virtualNode.attr("aria-disabled") || "false";
                        if (virtualNode.hasAttr("disabled") || "true" === ariaDisabled.toLowerCase()) return false;
                        var role = virtualNode.attr("role");
                        var tabIndex = virtualNode.attr("tabindex");
                        if ("-1" === tabIndex && role) {
                            var roleDef = standards_default.ariaRoles[role];
                            if (void 0 === roleDef || "widget" !== roleDef.type) return false;
                        }
                        if ("-1" === tabIndex && virtualNode.actualNode && !_isVisibleOnScreen(virtualNode) && !_isVisibleToScreenReaders(virtualNode)) return false;
                        return true;
                    }
                    var autocomplete_matches_default = autocompleteMatches;
                    function ariaRequiredParentMatches(node, virtualNode) {
                        var role = get_explicit_role_default(virtualNode);
                        return !!required_context_default(role);
                    }
                    var aria_required_parent_matches_default = ariaRequiredParentMatches;
                    function ariaRequiredChildrenMatches(node, virtualNode) {
                        var role = get_explicit_role_default(virtualNode, {
                            dpub: true
                        });
                        return !!required_owned_default(role);
                    }
                    var aria_required_children_matches_default = ariaRequiredChildrenMatches;
                    function shouldMatchElement(el) {
                        if (!el) return true;
                        if ("true" === el.getAttribute("aria-hidden")) return false;
                        return shouldMatchElement(get_composed_parent_default(el));
                    }
                    function ariaHiddenFocusMatches(node) {
                        return shouldMatchElement(get_composed_parent_default(node));
                    }
                    var aria_hidden_focus_matches_default = ariaHiddenFocusMatches;
                    function ariaHasAttrMatches(node, virtualNode) {
                        var aria = /^aria-/;
                        return virtualNode.attrNames.some((function(attr) {
                            return aria.test(attr);
                        }));
                    }
                    var aria_has_attr_matches_default = ariaHasAttrMatches;
                    function ariaAllowedRoleMatches(node, virtualNode) {
                        return null !== get_explicit_role_default(virtualNode, {
                            dpub: true,
                            fallback: true
                        });
                    }
                    var aria_allowed_role_matches_default = ariaAllowedRoleMatches;
                    function ariaAllowedAttrMatches(node, virtualNode) {
                        var aria = /^aria-/;
                        var attrs = virtualNode.attrNames;
                        if (attrs.length) for (var _i43 = 0, l = attrs.length; _i43 < l; _i43++) if (aria.test(attrs[_i43])) return true;
                        return false;
                    }
                    var aria_allowed_attr_matches_default = ariaAllowedAttrMatches;
                    var metadataFunctionMap = {
                        "abstractrole-evaluate": abstractrole_evaluate_default,
                        "accesskeys-after": accesskeys_after_default,
                        "accesskeys-evaluate": accesskeys_evaluate_default,
                        "alt-space-value-evaluate": alt_space_value_evaluate_default,
                        "aria-allowed-attr-evaluate": ariaAllowedAttrEvaluate,
                        "aria-allowed-attr-matches": aria_allowed_attr_matches_default,
                        "aria-allowed-role-evaluate": aria_allowed_role_evaluate_default,
                        "aria-allowed-role-matches": aria_allowed_role_matches_default,
                        "aria-busy-evaluate": ariaBusyEvaluate,
                        "aria-conditional-attr-evaluate": ariaConditionalAttrEvaluate,
                        "aria-conditional-checkbox-attr-evaluate": ariaConditionalCheckboxAttr,
                        "aria-conditional-row-attr-evaluate": ariaConditionalRowAttr,
                        "aria-errormessage-evaluate": ariaErrormessageEvaluate,
                        "aria-has-attr-matches": aria_has_attr_matches_default,
                        "aria-hidden-body-evaluate": aria_hidden_body_evaluate_default,
                        "aria-hidden-focus-matches": aria_hidden_focus_matches_default,
                        "aria-label-evaluate": aria_label_evaluate_default,
                        "aria-labelledby-evaluate": aria_labelledby_evaluate_default,
                        "aria-level-evaluate": aria_level_evaluate_default,
                        "aria-prohibited-attr-evaluate": ariaProhibitedAttrEvaluate,
                        "aria-required-attr-evaluate": ariaRequiredAttrEvaluate,
                        "aria-required-children-evaluate": ariaRequiredChildrenEvaluate,
                        "aria-required-children-matches": aria_required_children_matches_default,
                        "aria-required-parent-evaluate": aria_required_parent_evaluate_default,
                        "aria-required-parent-matches": aria_required_parent_matches_default,
                        "aria-roledescription-evaluate": aria_roledescription_evaluate_default,
                        "aria-unsupported-attr-evaluate": aria_unsupported_attr_evaluate_default,
                        "aria-valid-attr-evaluate": aria_valid_attr_evaluate_default,
                        "aria-valid-attr-value-evaluate": ariaValidAttrValueEvaluate,
                        "attr-non-space-content-evaluate": attr_non_space_content_evaluate_default,
                        "autocomplete-appropriate-evaluate": autocomplete_appropriate_evaluate_default,
                        "autocomplete-matches": autocomplete_matches_default,
                        "autocomplete-valid-evaluate": autocomplete_valid_evaluate_default,
                        "avoid-inline-spacing-evaluate": avoid_inline_spacing_evaluate_default,
                        "braille-label-equivalent-evaluate": brailleLabelEquivalentEvaluate,
                        "braille-roledescription-equivalent-evaluate": brailleRoleDescriptionEquivalentEvaluate,
                        "bypass-matches": bypass_matches_default,
                        "caption-evaluate": caption_evaluate_default,
                        "caption-faked-evaluate": caption_faked_evaluate_default,
                        "color-contrast-evaluate": colorContrastEvaluate,
                        "color-contrast-matches": color_contrast_matches_default,
                        "css-orientation-lock-evaluate": css_orientation_lock_evaluate_default,
                        "data-table-large-matches": data_table_large_matches_default,
                        "data-table-matches": data_table_matches_default,
                        "deprecatedrole-evaluate": deprecatedroleEvaluate,
                        "dlitem-evaluate": dlitem_evaluate_default,
                        "doc-has-title-evaluate": doc_has_title_evaluate_default,
                        "duplicate-id-active-matches": duplicate_id_active_matches_default,
                        "duplicate-id-after": duplicate_id_after_default,
                        "duplicate-id-aria-matches": duplicate_id_aria_matches_default,
                        "duplicate-id-evaluate": duplicate_id_evaluate_default,
                        "duplicate-id-misc-matches": duplicate_id_misc_matches_default,
                        "duplicate-img-label-evaluate": duplicate_img_label_evaluate_default,
                        "exists-evaluate": exists_evaluate_default,
                        "explicit-evaluate": explicit_evaluate_default,
                        "fallbackrole-evaluate": fallbackrole_evaluate_default,
                        "focusable-content-evaluate": focusable_content_evaluate_default,
                        "focusable-disabled-evaluate": focusable_disabled_evaluate_default,
                        "focusable-element-evaluate": focusable_element_evaluate_default,
                        "focusable-modal-open-evaluate": focusable_modal_open_evaluate_default,
                        "focusable-no-name-evaluate": focusable_no_name_evaluate_default,
                        "focusable-not-tabbable-evaluate": focusable_not_tabbable_evaluate_default,
                        "frame-focusable-content-evaluate": frameFocusableContentEvaluate,
                        "frame-focusable-content-matches": frame_focusable_content_matches_default,
                        "frame-tested-after": frame_tested_after_default,
                        "frame-tested-evaluate": frame_tested_evaluate_default,
                        "frame-title-has-text-matches": frame_title_has_text_matches_default,
                        "has-alt-evaluate": has_alt_evaluate_default,
                        "has-descendant-after": has_descendant_after_default,
                        "has-descendant-evaluate": has_descendant_evaluate_default,
                        "has-global-aria-attribute-evaluate": has_global_aria_attribute_evaluate_default,
                        "has-implicit-chromium-role-matches": has_implicit_chromium_role_matches_default,
                        "has-lang-evaluate": has_lang_evaluate_default,
                        "has-text-content-evaluate": hasTextContentEvaluate,
                        "has-widget-role-evaluate": has_widget_role_evaluate_default,
                        "heading-matches": headingMatches,
                        "heading-order-after": headingOrderAfter,
                        "heading-order-evaluate": heading_order_evaluate_default,
                        "help-same-as-label-evaluate": help_same_as_label_evaluate_default,
                        "hidden-content-evaluate": hidden_content_evaluate_default,
                        "hidden-explicit-label-evaluate": hidden_explicit_label_evaluate_default,
                        "html-namespace-matches": html_namespace_matches_default,
                        "html5-scope-evaluate": html5_scope_evaluate_default,
                        "identical-links-same-purpose-after": identical_links_same_purpose_after_default,
                        "identical-links-same-purpose-evaluate": identical_links_same_purpose_evaluate_default,
                        "identical-links-same-purpose-matches": identical_links_same_purpose_matches_default,
                        "implicit-evaluate": implicit_evaluate_default,
                        "inline-style-property-evaluate": inlineStyleProperty,
                        "inserted-into-focus-order-matches": inserted_into_focus_order_matches_default,
                        "internal-link-present-evaluate": internal_link_present_evaluate_default,
                        "invalid-children-evaluate": invalidChildrenEvaluate,
                        "invalidrole-evaluate": invalidrole_evaluate_default,
                        "is-element-focusable-evaluate": is_element_focusable_evaluate_default,
                        "is-initiator-matches": is_initiator_matches_default,
                        "is-on-screen-evaluate": is_on_screen_evaluate_default,
                        "is-visible-matches": hasVisibleTextMatches,
                        "is-visible-on-screen-matches": isVisibleOnScreenMatches,
                        "label-content-name-mismatch-evaluate": label_content_name_mismatch_evaluate_default,
                        "label-content-name-mismatch-matches": label_content_name_mismatch_matches_default,
                        "label-matches": label_matches_default,
                        "landmark-has-body-context-matches": landmark_has_body_context_matches_default,
                        "landmark-is-top-level-evaluate": landmark_is_top_level_evaluate_default,
                        "landmark-is-unique-after": landmark_is_unique_after_default,
                        "landmark-is-unique-evaluate": landmark_is_unique_evaluate_default,
                        "landmark-unique-matches": landmarkUniqueMatches,
                        "layout-table-matches": layout_table_matches_default,
                        "link-in-text-block-evaluate": link_in_text_block_evaluate_default,
                        "link-in-text-block-matches": link_in_text_block_matches_default,
                        "link-in-text-block-style-evaluate": linkInTextBlockStyleEvaluate,
                        "listitem-evaluate": listitemEvaluate,
                        "matches-definition-evaluate": matches_definition_evaluate_default,
                        "meta-refresh-evaluate": metaRefreshEvaluate,
                        "meta-viewport-scale-evaluate": meta_viewport_scale_evaluate_default,
                        "multiple-label-evaluate": multiple_label_evaluate_default,
                        "nested-interactive-matches": nested_interactive_matches_default,
                        "no-autoplay-audio-evaluate": no_autoplay_audio_evaluate_default,
                        "no-autoplay-audio-matches": no_autoplay_audio_matches_default,
                        "no-empty-role-matches": no_empty_role_matches_default,
                        "no-explicit-name-required-matches": no_explicit_name_required_matches_default,
                        "no-focusable-content-evaluate": noFocusableContentEvaluate,
                        "no-implicit-explicit-label-evaluate": no_implicit_explicit_label_evaluate_default,
                        "no-naming-method-matches": no_naming_method_matches_default,
                        "no-negative-tabindex-matches": no_negative_tabindex_matches_default,
                        "no-role-matches": no_role_matches_default,
                        "non-empty-if-present-evaluate": non_empty_if_present_evaluate_default,
                        "not-html-matches": not_html_matches_default,
                        "object-is-loaded-matches": object_is_loaded_matches_default,
                        "only-dlitems-evaluate": onlyDlitemsEvaluate,
                        "only-listitems-evaluate": only_listitems_evaluate_default,
                        "p-as-heading-evaluate": p_as_heading_evaluate_default,
                        "p-as-heading-matches": p_as_heading_matches_default,
                        "page-no-duplicate-after": page_no_duplicate_after_default,
                        "page-no-duplicate-evaluate": page_no_duplicate_evaluate_default,
                        "presentation-role-conflict-matches": presentation_role_conflict_matches_default,
                        "presentational-role-evaluate": presentationalRoleEvaluate,
                        "region-after": region_after_default,
                        "region-evaluate": regionEvaluate,
                        "same-caption-summary-evaluate": same_caption_summary_evaluate_default,
                        "scope-value-evaluate": scope_value_evaluate_default,
                        "scrollable-region-focusable-matches": scrollableRegionFocusableMatches,
                        "skip-link-evaluate": skip_link_evaluate_default,
                        "skip-link-matches": skip_link_matches_default,
                        "structured-dlitems-evaluate": structured_dlitems_evaluate_default,
                        "summary-interactive-matches": summaryIsInteractiveMatches,
                        "svg-namespace-matches": svg_namespace_matches_default,
                        "svg-non-empty-title-evaluate": svg_non_empty_title_evaluate_default,
                        "tabindex-evaluate": tabindex_evaluate_default,
                        "table-or-grid-role-matches": tableOrGridRoleMatches,
                        "target-offset-evaluate": targetOffsetEvaluate,
                        "target-size-evaluate": targetSizeEvaluate,
                        "td-has-header-evaluate": td_has_header_evaluate_default,
                        "td-headers-attr-evaluate": tdHeadersAttrEvaluate,
                        "th-has-data-cells-evaluate": th_has_data_cells_evaluate_default,
                        "title-only-evaluate": title_only_evaluate_default,
                        "unique-frame-title-after": unique_frame_title_after_default,
                        "unique-frame-title-evaluate": unique_frame_title_evaluate_default,
                        "unsupportedrole-evaluate": unsupportedrole_evaluate_default,
                        "valid-lang-evaluate": valid_lang_evaluate_default,
                        "valid-scrollable-semantics-evaluate": valid_scrollable_semantics_evaluate_default,
                        "widget-not-inline-matches": widgetNotInline,
                        "window-is-top-matches": window_is_top_matches_default,
                        "xml-lang-mismatch-evaluate": xml_lang_mismatch_evaluate_default,
                        "xml-lang-mismatch-matches": xml_lang_mismatch_matches_default
                    };
                    var metadata_function_map_default = metadataFunctionMap;
                    function CheckResult(check) {
                        this.id = check.id;
                        this.data = null;
                        this.relatedNodes = [];
                        this.result = null;
                    }
                    var check_result_default = CheckResult;
                    function createExecutionContext(spec) {
                        if ("string" === typeof spec) {
                            if (metadata_function_map_default[spec]) return metadata_function_map_default[spec];
                            if (/^\s*function[\s\w]*\(/.test(spec)) return new Function("return " + spec + ";")();
                            throw new ReferenceError("Function ID does not exist in the metadata-function-map: ".concat(spec));
                        }
                        return spec;
                    }
                    function normalizeOptions() {
                        var options = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                        if (Array.isArray(options) || "object" !== _typeof(options)) options = {
                            value: options
                        };
                        return options;
                    }
                    function Check(spec) {
                        if (spec) {
                            this.id = spec.id;
                            this.configure(spec);
                        }
                    }
                    Check.prototype.enabled = true;
                    Check.prototype.run = function(node, options, context, resolve, reject) {
                        options = options || {};
                        var enabled = options.hasOwnProperty("enabled") ? options.enabled : this.enabled;
                        var checkOptions = this.getOptions(options.options);
                        if (enabled) {
                            var checkResult = new check_result_default(this);
                            var helper = check_helper_default(checkResult, options, resolve, reject);
                            var result;
                            try {
                                result = this.evaluate.call(helper, node.actualNode, checkOptions, node, context);
                            } catch (e) {
                                if (node && node.actualNode) e.errorNode = node_serializer_default.toSpec(node);
                                reject(e);
                                return;
                            }
                            if (!helper.isAsync) {
                                checkResult.result = result;
                                resolve(checkResult);
                            }
                        } else resolve(null);
                    };
                    Check.prototype.runSync = function(node, options, context) {
                        options = options || {};
                        var _options3 = options, _options3$enabled = _options3.enabled, enabled = void 0 === _options3$enabled ? this.enabled : _options3$enabled;
                        if (!enabled) return null;
                        var checkOptions = this.getOptions(options.options);
                        var checkResult = new check_result_default(this);
                        var helper = check_helper_default(checkResult, options);
                        helper.async = function() {
                            throw new Error("Cannot run async check while in a synchronous run");
                        };
                        var result;
                        try {
                            result = this.evaluate.call(helper, node.actualNode, checkOptions, node, context);
                        } catch (e) {
                            if (node && node.actualNode) e.errorNode = node_serializer_default.toSpec(node);
                            throw e;
                        }
                        checkResult.result = result;
                        return checkResult;
                    };
                    Check.prototype.configure = function(spec) {
                        var _this8 = this;
                        if (!spec.evaluate || metadata_function_map_default[spec.evaluate]) this._internalCheck = true;
                        if (spec.hasOwnProperty("enabled")) this.enabled = spec.enabled;
                        if (spec.hasOwnProperty("options")) if (this._internalCheck) this.options = normalizeOptions(spec.options); else this.options = spec.options;
                        [ "evaluate", "after" ].filter((function(prop) {
                            return spec.hasOwnProperty(prop);
                        })).forEach((function(prop) {
                            return _this8[prop] = createExecutionContext(spec[prop]);
                        }));
                    };
                    Check.prototype.getOptions = function(options) {
                        if (this._internalCheck) return deep_merge_default(this.options, normalizeOptions(options || {})); else return options || this.options;
                    };
                    var check_default = Check;
                    function RuleResult(rule) {
                        this.id = rule.id;
                        this.result = constants_default.NA;
                        this.pageLevel = rule.pageLevel;
                        this.impact = null;
                        this.nodes = [];
                    }
                    var rule_result_default = RuleResult;
                    function Rule(spec, parentAudit) {
                        this._audit = parentAudit;
                        this.id = spec.id;
                        this.selector = spec.selector || "*";
                        if (spec.impact) {
                            assert_default(constants_default.impact.includes(spec.impact), "Impact ".concat(spec.impact, " is not a valid impact"));
                            this.impact = spec.impact;
                        }
                        this.excludeHidden = "boolean" === typeof spec.excludeHidden ? spec.excludeHidden : true;
                        this.enabled = "boolean" === typeof spec.enabled ? spec.enabled : true;
                        this.pageLevel = "boolean" === typeof spec.pageLevel ? spec.pageLevel : false;
                        this.reviewOnFail = "boolean" === typeof spec.reviewOnFail ? spec.reviewOnFail : false;
                        this.any = spec.any || [];
                        this.all = spec.all || [];
                        this.none = spec.none || [];
                        this.tags = spec.tags || [];
                        this.preload = spec.preload ? true : false;
                        this.actIds = spec.actIds;
                        if (spec.matches) this.matches = createExecutionContext(spec.matches);
                    }
                    Rule.prototype.matches = function() {
                        return true;
                    };
                    Rule.prototype.gather = function(context) {
                        var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                        var markStart = "mark_gather_start_" + this.id;
                        var markEnd = "mark_gather_end_" + this.id;
                        var markHiddenStart = "mark_isVisibleToScreenReaders_start_" + this.id;
                        var markHiddenEnd = "mark_isVisibleToScreenReaders_end_" + this.id;
                        if (options.performanceTimer) performance_timer_default.mark(markStart);
                        var elements = _select(this.selector, context);
                        if (this.excludeHidden) {
                            if (options.performanceTimer) performance_timer_default.mark(markHiddenStart);
                            elements = elements.filter((function(element) {
                                return _isVisibleToScreenReaders(element);
                            }));
                            if (options.performanceTimer) {
                                performance_timer_default.mark(markHiddenEnd);
                                performance_timer_default.measure("rule_" + this.id + "#gather_axe.utils.isVisibleToScreenReaders", markHiddenStart, markHiddenEnd);
                            }
                        }
                        if (options.performanceTimer) {
                            performance_timer_default.mark(markEnd);
                            performance_timer_default.measure("rule_" + this.id + "#gather", markStart, markEnd);
                        }
                        return elements;
                    };
                    Rule.prototype.runChecks = function(type2, node, options, context, resolve, reject) {
                        var self2 = this;
                        var checkQueue = queue_default();
                        this[type2].forEach((function(c4) {
                            var check = self2._audit.checks[c4.id || c4];
                            var option = get_check_option_default(check, self2.id, options);
                            checkQueue.defer((function(res, rej) {
                                check.run(node, option, context, res, rej);
                            }));
                        }));
                        checkQueue.then((function(results) {
                            results = results.filter((function(check) {
                                return check;
                            }));
                            resolve({
                                type: type2,
                                results
                            });
                        }))["catch"](reject);
                    };
                    Rule.prototype.runChecksSync = function(type2, node, options, context) {
                        var self2 = this;
                        var results = [];
                        this[type2].forEach((function(c4) {
                            var check = self2._audit.checks[c4.id || c4];
                            var option = get_check_option_default(check, self2.id, options);
                            results.push(check.runSync(node, option, context));
                        }));
                        results = results.filter((function(check) {
                            return check;
                        }));
                        return {
                            type: type2,
                            results
                        };
                    };
                    Rule.prototype.run = function(context) {
                        var _this9 = this;
                        var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                        var resolve = arguments.length > 2 ? arguments[2] : void 0;
                        var reject = arguments.length > 3 ? arguments[3] : void 0;
                        if (options.performanceTimer) this._trackPerformance();
                        var q = queue_default();
                        var ruleResult = new rule_result_default(this);
                        var nodes;
                        try {
                            nodes = this.gatherAndMatchNodes(context, options);
                        } catch (error) {
                            reject(new SupportError({
                                cause: error,
                                ruleId: this.id
                            }));
                            return;
                        }
                        if (options.performanceTimer) this._logGatherPerformance(nodes);
                        nodes.forEach((function(node) {
                            q.defer((function(resolveNode, rejectNode) {
                                var checkQueue = queue_default();
                                [ "any", "all", "none" ].forEach((function(type2) {
                                    checkQueue.defer((function(res, rej) {
                                        _this9.runChecks(type2, node, options, context, res, rej);
                                    }));
                                }));
                                checkQueue.then((function(results) {
                                    var result = getResult(results);
                                    if (result) {
                                        result.node = new dq_element_default(node);
                                        ruleResult.nodes.push(result);
                                        if (_this9.reviewOnFail) {
                                            [ "any", "all" ].forEach((function(type2) {
                                                result[type2].forEach((function(checkResult) {
                                                    if (false === checkResult.result) checkResult.result = void 0;
                                                }));
                                            }));
                                            result.none.forEach((function(checkResult) {
                                                if (true === checkResult.result) checkResult.result = void 0;
                                            }));
                                        }
                                    }
                                    resolveNode();
                                }))["catch"]((function(err2) {
                                    return rejectNode(err2);
                                }));
                            }));
                        }));
                        q.defer((function(res) {
                            return setTimeout(res, 0);
                        }));
                        if (options.performanceTimer) this._logRulePerformance();
                        q.then((function() {
                            return resolve(ruleResult);
                        }))["catch"]((function(error) {
                            return reject(error);
                        }));
                    };
                    Rule.prototype.runSync = function(context) {
                        var _this10 = this;
                        var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                        if (options.performanceTimer) this._trackPerformance();
                        var ruleResult = new rule_result_default(this);
                        var nodes;
                        try {
                            nodes = this.gatherAndMatchNodes(context, options);
                        } catch (error) {
                            throw new SupportError({
                                cause: error,
                                ruleId: this.id
                            });
                        }
                        if (options.performanceTimer) this._logGatherPerformance(nodes);
                        nodes.forEach((function(node) {
                            var results = [];
                            [ "any", "all", "none" ].forEach((function(type2) {
                                results.push(_this10.runChecksSync(type2, node, options, context));
                            }));
                            var result = getResult(results);
                            if (result) {
                                result.node = node.actualNode ? new dq_element_default(node) : null;
                                ruleResult.nodes.push(result);
                                if (_this10.reviewOnFail) {
                                    [ "any", "all" ].forEach((function(type2) {
                                        result[type2].forEach((function(checkResult) {
                                            if (false === checkResult.result) checkResult.result = void 0;
                                        }));
                                    }));
                                    result.none.forEach((function(checkResult) {
                                        if (true === checkResult.result) checkResult.result = void 0;
                                    }));
                                }
                            }
                        }));
                        if (options.performanceTimer) this._logRulePerformance();
                        return ruleResult;
                    };
                    Rule.prototype._trackPerformance = function() {
                        this._markStart = "mark_rule_start_" + this.id;
                        this._markEnd = "mark_rule_end_" + this.id;
                        this._markChecksStart = "mark_runchecks_start_" + this.id;
                        this._markChecksEnd = "mark_runchecks_end_" + this.id;
                    };
                    Rule.prototype._logGatherPerformance = function(nodes) {
                        log_default("gather (", nodes.length, "):", performance_timer_default.timeElapsed() + "ms");
                        performance_timer_default.mark(this._markChecksStart);
                    };
                    Rule.prototype._logRulePerformance = function() {
                        performance_timer_default.mark(this._markChecksEnd);
                        performance_timer_default.mark(this._markEnd);
                        performance_timer_default.measure("runchecks_" + this.id, this._markChecksStart, this._markChecksEnd);
                        performance_timer_default.measure("rule_" + this.id, this._markStart, this._markEnd);
                    };
                    function getResult(results) {
                        if (results.length) {
                            var hasResults = false;
                            var result = {};
                            results.forEach((function(r) {
                                var res = r.results.filter((function(_result) {
                                    return _result;
                                }));
                                result[r.type] = res;
                                if (res.length) hasResults = true;
                            }));
                            if (hasResults) return result;
                            return null;
                        }
                    }
                    Rule.prototype.gatherAndMatchNodes = function(context, options) {
                        var _this11 = this;
                        var markMatchesStart = "mark_matches_start_" + this.id;
                        var markMatchesEnd = "mark_matches_end_" + this.id;
                        var nodes = this.gather(context, options);
                        if (options.performanceTimer) performance_timer_default.mark(markMatchesStart);
                        nodes = nodes.filter((function(node) {
                            return _this11.matches(node.actualNode, node, context);
                        }));
                        if (options.performanceTimer) {
                            performance_timer_default.mark(markMatchesEnd);
                            performance_timer_default.measure("rule_" + this.id + "#matches", markMatchesStart, markMatchesEnd);
                        }
                        return nodes;
                    };
                    function findAfterChecks(rule) {
                        return get_all_checks_default(rule).map((function(c4) {
                            var check = rule._audit.checks[c4.id || c4];
                            return check && "function" === typeof check.after ? check : null;
                        })).filter(Boolean);
                    }
                    function findCheckResults(nodes, checkID) {
                        var checkResults = [];
                        nodes.forEach((function(nodeResult) {
                            var checks = get_all_checks_default(nodeResult);
                            checks.forEach((function(checkResult) {
                                if (checkResult.id === checkID) {
                                    checkResult.node = nodeResult.node;
                                    checkResults.push(checkResult);
                                }
                            }));
                        }));
                        return checkResults;
                    }
                    function filterChecks(checks) {
                        return checks.filter((function(check) {
                            return true !== check.filtered;
                        }));
                    }
                    function sanitizeNodes(result) {
                        var checkTypes2 = [ "any", "all", "none" ];
                        var nodes = result.nodes.filter((function(detail) {
                            var length = 0;
                            checkTypes2.forEach((function(type2) {
                                detail[type2] = filterChecks(detail[type2]);
                                length += detail[type2].length;
                            }));
                            return length > 0;
                        }));
                        if (result.pageLevel && nodes.length) nodes = [ nodes.reduce((function(a2, b2) {
                            if (a2) {
                                checkTypes2.forEach((function(type2) {
                                    a2[type2].push.apply(a2[type2], b2[type2]);
                                }));
                                return a2;
                            }
                        })) ];
                        return nodes;
                    }
                    Rule.prototype.after = function(result, options) {
                        var _this12 = this;
                        var afterChecks = findAfterChecks(this);
                        var ruleID = this.id;
                        afterChecks.forEach((function(check) {
                            var beforeResults = findCheckResults(result.nodes, check.id);
                            var checkOption = get_check_option_default(check, ruleID, options);
                            var afterResults = check.after(beforeResults, checkOption.options);
                            if (_this12.reviewOnFail) afterResults.forEach((function(checkResult) {
                                var changeAnyAllResults = (_this12.any.includes(checkResult.id) || _this12.all.includes(checkResult.id)) && false === checkResult.result;
                                var changeNoneResult = _this12.none.includes(checkResult.id) && true === checkResult.result;
                                if (changeAnyAllResults || changeNoneResult) checkResult.result = void 0;
                            }));
                            beforeResults.forEach((function(item) {
                                delete item.node;
                                if (-1 === afterResults.indexOf(item)) item.filtered = true;
                            }));
                        }));
                        result.nodes = sanitizeNodes(result);
                        return result;
                    };
                    Rule.prototype.configure = function(spec) {
                        if (spec.hasOwnProperty("selector")) this.selector = spec.selector;
                        if (spec.hasOwnProperty("excludeHidden")) this.excludeHidden = "boolean" === typeof spec.excludeHidden ? spec.excludeHidden : true;
                        if (spec.hasOwnProperty("enabled")) this.enabled = "boolean" === typeof spec.enabled ? spec.enabled : true;
                        if (spec.hasOwnProperty("pageLevel")) this.pageLevel = "boolean" === typeof spec.pageLevel ? spec.pageLevel : false;
                        if (spec.hasOwnProperty("reviewOnFail")) this.reviewOnFail = "boolean" === typeof spec.reviewOnFail ? spec.reviewOnFail : false;
                        if (spec.hasOwnProperty("any")) this.any = spec.any;
                        if (spec.hasOwnProperty("all")) this.all = spec.all;
                        if (spec.hasOwnProperty("none")) this.none = spec.none;
                        if (spec.hasOwnProperty("tags")) this.tags = spec.tags;
                        if (spec.hasOwnProperty("actIds")) this.actIds = spec.actIds;
                        if (spec.hasOwnProperty("matches")) this.matches = createExecutionContext(spec.matches);
                        if (spec.impact) {
                            assert_default(constants_default.impact.includes(spec.impact), "Impact ".concat(spec.impact, " is not a valid impact"));
                            this.impact = spec.impact;
                        }
                    };
                    var import_dot2 = __toModule(require_doT());
                    var dotRegex = /\{\{.+?\}\}/g;
                    var Audit = function() {
                        function Audit(audit) {
                            _classCallCheck(this, Audit);
                            this.lang = "en";
                            this.defaultConfig = audit;
                            this.standards = standards_default;
                            this._init();
                            this._defaultLocale = null;
                        }
                        return _createClass(Audit, [ {
                            key: "_setDefaultLocale",
                            value: function() {
                                if (this._defaultLocale) return;
                                var locale = {
                                    checks: {},
                                    rules: {},
                                    failureSummaries: {},
                                    incompleteFallbackMessage: "",
                                    lang: this.lang
                                };
                                var checkIDs = Object.keys(this.data.checks);
                                for (var _i44 = 0; _i44 < checkIDs.length; _i44++) {
                                    var _id6 = checkIDs[_i44];
                                    var check = this.data.checks[_id6];
                                    var _check$messages = check.messages, pass = _check$messages.pass, fail = _check$messages.fail, incomplete = _check$messages.incomplete;
                                    locale.checks[_id6] = {
                                        pass,
                                        fail,
                                        incomplete
                                    };
                                }
                                var ruleIDs = Object.keys(this.data.rules);
                                for (var _i45 = 0; _i45 < ruleIDs.length; _i45++) {
                                    var _id7 = ruleIDs[_i45];
                                    var rule = this.data.rules[_id7];
                                    var description = rule.description, help = rule.help;
                                    locale.rules[_id7] = {
                                        description,
                                        help
                                    };
                                }
                                var failureSummaries = Object.keys(this.data.failureSummaries);
                                for (var _i46 = 0; _i46 < failureSummaries.length; _i46++) {
                                    var type2 = failureSummaries[_i46];
                                    var failureSummary2 = this.data.failureSummaries[type2];
                                    var failureMessage = failureSummary2.failureMessage;
                                    locale.failureSummaries[type2] = {
                                        failureMessage
                                    };
                                }
                                locale.incompleteFallbackMessage = this.data.incompleteFallbackMessage;
                                this._defaultLocale = locale;
                            }
                        }, {
                            key: "_resetLocale",
                            value: function() {
                                var defaultLocale = this._defaultLocale;
                                if (!defaultLocale) return;
                                this.applyLocale(defaultLocale);
                            }
                        }, {
                            key: "_applyCheckLocale",
                            value: function(checks) {
                                var keys = Object.keys(checks);
                                for (var _i47 = 0; _i47 < keys.length; _i47++) {
                                    var _id8 = keys[_i47];
                                    if (!this.data.checks[_id8]) throw new Error('Locale provided for unknown check: "'.concat(_id8, '"'));
                                    this.data.checks[_id8] = mergeCheckLocale(this.data.checks[_id8], checks[_id8]);
                                }
                            }
                        }, {
                            key: "_applyRuleLocale",
                            value: function(rules) {
                                var keys = Object.keys(rules);
                                for (var _i48 = 0; _i48 < keys.length; _i48++) {
                                    var _id9 = keys[_i48];
                                    if (!this.data.rules[_id9]) throw new Error('Locale provided for unknown rule: "'.concat(_id9, '"'));
                                    this.data.rules[_id9] = mergeRuleLocale(this.data.rules[_id9], rules[_id9]);
                                }
                            }
                        }, {
                            key: "_applyFailureSummaries",
                            value: function(messages) {
                                var keys = Object.keys(messages);
                                for (var _i49 = 0; _i49 < keys.length; _i49++) {
                                    var _key8 = keys[_i49];
                                    if (!this.data.failureSummaries[_key8]) throw new Error('Locale provided for unknown failureMessage: "'.concat(_key8, '"'));
                                    this.data.failureSummaries[_key8] = mergeFailureMessage(this.data.failureSummaries[_key8], messages[_key8]);
                                }
                            }
                        }, {
                            key: "applyLocale",
                            value: function(locale) {
                                this._setDefaultLocale();
                                if (locale.checks) this._applyCheckLocale(locale.checks);
                                if (locale.rules) this._applyRuleLocale(locale.rules);
                                if (locale.failureSummaries) this._applyFailureSummaries(locale.failureSummaries, "failureSummaries");
                                if (locale.incompleteFallbackMessage) this.data.incompleteFallbackMessage = mergeFallbackMessage(this.data.incompleteFallbackMessage, locale.incompleteFallbackMessage);
                                if (locale.lang) this.lang = locale.lang;
                            }
                        }, {
                            key: "setAllowedOrigins",
                            value: function(allowedOrigins) {
                                var defaultOrigin = getDefaultOrigin();
                                this.allowedOrigins = [];
                                var _step22, _iterator22 = _createForOfIteratorHelper(allowedOrigins);
                                try {
                                    for (_iterator22.s(); !(_step22 = _iterator22.n()).done; ) {
                                        var origin = _step22.value;
                                        if (origin === constants_default.allOrigins) {
                                            this.allowedOrigins = [ "*" ];
                                            return;
                                        } else if (origin !== constants_default.sameOrigin) this.allowedOrigins.push(origin); else if (defaultOrigin) this.allowedOrigins.push(defaultOrigin);
                                    }
                                } catch (err) {
                                    _iterator22.e(err);
                                } finally {
                                    _iterator22.f();
                                }
                            }
                        }, {
                            key: "_init",
                            value: function() {
                                var audit = getDefaultConfiguration(this.defaultConfig);
                                this.lang = audit.lang || "en";
                                this.reporter = audit.reporter;
                                this.commands = {};
                                this.rules = [];
                                this.checks = {};
                                this.brand = "axe";
                                this.application = "axeAPI";
                                this.tagExclude = [ "experimental", "deprecated" ];
                                this.noHtml = audit.noHtml;
                                this.allowedOrigins = audit.allowedOrigins;
                                unpackToObject(audit.rules, this, "addRule");
                                unpackToObject(audit.checks, this, "addCheck");
                                this.data = {};
                                this.data.checks = audit.data && audit.data.checks || {};
                                this.data.rules = audit.data && audit.data.rules || {};
                                this.data.failureSummaries = audit.data && audit.data.failureSummaries || {};
                                this.data.incompleteFallbackMessage = audit.data && audit.data.incompleteFallbackMessage || "";
                                this._constructHelpUrls();
                            }
                        }, {
                            key: "registerCommand",
                            value: function(command) {
                                this.commands[command.id] = command.callback;
                            }
                        }, {
                            key: "addRule",
                            value: function(spec) {
                                if (spec.metadata) this.data.rules[spec.id] = spec.metadata;
                                var rule = this.getRule(spec.id);
                                if (rule) rule.configure(spec); else this.rules.push(new Rule(spec, this));
                            }
                        }, {
                            key: "addCheck",
                            value: function(spec) {
                                var metadata = spec.metadata;
                                if ("object" === _typeof(metadata)) {
                                    this.data.checks[spec.id] = metadata;
                                    if ("object" === _typeof(metadata.messages)) Object.keys(metadata.messages).filter((function(prop) {
                                        return metadata.messages.hasOwnProperty(prop) && "string" === typeof metadata.messages[prop];
                                    })).forEach((function(prop) {
                                        if (0 === metadata.messages[prop].indexOf("function")) metadata.messages[prop] = new Function("return " + metadata.messages[prop] + ";")();
                                    }));
                                }
                                if (this.checks[spec.id]) this.checks[spec.id].configure(spec); else this.checks[spec.id] = new check_default(spec);
                            }
                        }, {
                            key: "run",
                            value: function(context, options, resolve, reject) {
                                this.normalizeOptions(options);
                                dq_element_default.setRunOptions(options);
                                axe._selectCache = [];
                                var allRulesToRun = getRulesToRun(this.rules, context, options);
                                var runNowRules = allRulesToRun.now;
                                var runLaterRules = allRulesToRun.later;
                                var nowRulesQueue = queue_default();
                                runNowRules.forEach((function(rule) {
                                    nowRulesQueue.defer(getDefferedRule(rule, context, options));
                                }));
                                var preloaderQueue = queue_default();
                                if (runLaterRules.length) preloaderQueue.defer((function(res) {
                                    _preload(options).then((function(assets) {
                                        return res(assets);
                                    }))["catch"]((function(err2) {
                                        console.warn("Couldn't load preload assets: ", err2);
                                        res(void 0);
                                    }));
                                }));
                                var queueForNowRulesAndPreloader = queue_default();
                                queueForNowRulesAndPreloader.defer(nowRulesQueue);
                                queueForNowRulesAndPreloader.defer(preloaderQueue);
                                queueForNowRulesAndPreloader.then((function(nowRulesAndPreloaderResults) {
                                    var assetsFromQueue = nowRulesAndPreloaderResults.pop();
                                    if (assetsFromQueue && assetsFromQueue.length) {
                                        var assets = assetsFromQueue[0];
                                        if (assets) context = _extends({}, context, assets);
                                    }
                                    var nowRulesResults = nowRulesAndPreloaderResults[0];
                                    if (!runLaterRules.length) {
                                        axe._selectCache = void 0;
                                        resolve(nowRulesResults.filter((function(result) {
                                            return !!result;
                                        })));
                                        return;
                                    }
                                    var laterRulesQueue = queue_default();
                                    runLaterRules.forEach((function(rule) {
                                        var deferredRule = getDefferedRule(rule, context, options);
                                        laterRulesQueue.defer(deferredRule);
                                    }));
                                    laterRulesQueue.then((function(laterRuleResults) {
                                        axe._selectCache = void 0;
                                        resolve(nowRulesResults.concat(laterRuleResults).filter((function(result) {
                                            return !!result;
                                        })));
                                    }))["catch"](reject);
                                }))["catch"](reject);
                            }
                        }, {
                            key: "after",
                            value: function(results, options) {
                                var rules = this.rules;
                                return results.map((function(ruleResult) {
                                    var rule = find_by_default(rules, "id", ruleResult.id);
                                    if (!rule) throw new Error("Result for unknown rule. You may be running mismatch axe-core versions");
                                    return rule.after(ruleResult, options);
                                }));
                            }
                        }, {
                            key: "getRule",
                            value: function(ruleId) {
                                return this.rules.find((function(rule) {
                                    return rule.id === ruleId;
                                }));
                            }
                        }, {
                            key: "normalizeOptions",
                            value: function(options) {
                                var audit = this;
                                var tags = [];
                                var ruleIds = [];
                                audit.rules.forEach((function(rule) {
                                    ruleIds.push(rule.id);
                                    rule.tags.forEach((function(tag) {
                                        if (!tags.includes(tag)) tags.push(tag);
                                    }));
                                }));
                                if ([ "object", "string" ].includes(_typeof(options.runOnly))) {
                                    if ("string" === typeof options.runOnly) options.runOnly = [ options.runOnly ];
                                    if (Array.isArray(options.runOnly)) {
                                        var hasTag = options.runOnly.find((function(value) {
                                            return tags.includes(value);
                                        }));
                                        var hasRule = options.runOnly.find((function(value) {
                                            return ruleIds.includes(value);
                                        }));
                                        if (hasTag && hasRule) throw new Error("runOnly cannot be both rules and tags");
                                        if (hasRule) options.runOnly = {
                                            type: "rule",
                                            values: options.runOnly
                                        }; else options.runOnly = {
                                            type: "tag",
                                            values: options.runOnly
                                        };
                                    }
                                    var only = options.runOnly;
                                    if (only.value && !only.values) {
                                        only.values = only.value;
                                        delete only.value;
                                    }
                                    if (!Array.isArray(only.values) || 0 === only.values.length) throw new Error("runOnly.values must be a non-empty array");
                                    if ([ "rule", "rules" ].includes(only.type)) {
                                        only.type = "rule";
                                        only.values.forEach((function(ruleId) {
                                            if (!ruleIds.includes(ruleId)) throw new Error("unknown rule `" + ruleId + "` in options.runOnly");
                                        }));
                                    } else if ([ "tag", "tags", void 0 ].includes(only.type)) {
                                        only.type = "tag";
                                        var unmatchedTags = only.values.filter((function(tag) {
                                            return !tags.includes(tag) && !/wcag2[1-3]a{1,3}/.test(tag);
                                        }));
                                        if (0 !== unmatchedTags.length) axe.log("Could not find tags `" + unmatchedTags.join("`, `") + "`");
                                    } else throw new Error("Unknown runOnly type '".concat(only.type, "'"));
                                }
                                if ("object" === _typeof(options.rules)) Object.keys(options.rules).forEach((function(ruleId) {
                                    if (!ruleIds.includes(ruleId)) throw new Error("unknown rule `" + ruleId + "` in options.rules");
                                }));
                                return options;
                            }
                        }, {
                            key: "setBranding",
                            value: function(branding) {
                                var previous = {
                                    brand: this.brand,
                                    application: this.application
                                };
                                if ("string" === typeof branding) this.application = branding;
                                if (branding && branding.hasOwnProperty("brand") && branding.brand && "string" === typeof branding.brand) this.brand = branding.brand;
                                if (branding && branding.hasOwnProperty("application") && branding.application && "string" === typeof branding.application) this.application = branding.application;
                                this._constructHelpUrls(previous);
                            }
                        }, {
                            key: "_constructHelpUrls",
                            value: function() {
                                var _this13 = this;
                                var previous = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                                var version = (axe.version.match(/^[1-9][0-9]*\.[0-9]+/) || [ "x.y" ])[0];
                                this.rules.forEach((function(rule) {
                                    if (!_this13.data.rules[rule.id]) _this13.data.rules[rule.id] = {};
                                    var metaData = _this13.data.rules[rule.id];
                                    if ("string" !== typeof metaData.helpUrl || previous && metaData.helpUrl === getHelpUrl(previous, rule.id, version)) metaData.helpUrl = getHelpUrl(_this13, rule.id, version);
                                }));
                            }
                        }, {
                            key: "resetRulesAndChecks",
                            value: function() {
                                this._init();
                                this._resetLocale();
                            }
                        } ]);
                    }();
                    var audit_default = Audit;
                    function getDefaultOrigin() {
                        if (window.origin && "null" !== window.origin) return window.origin;
                        if (window.location && window.location.origin && "null" !== window.location.origin) return window.location.origin;
                    }
                    function getDefaultConfiguration(audit) {
                        var config;
                        if (audit) {
                            config = _clone(audit);
                            config.commons = audit.commons;
                        } else config = {};
                        config.reporter = config.reporter || null;
                        config.noHtml = config.noHtml || false;
                        if (!config.allowedOrigins) {
                            var defaultOrigin = getDefaultOrigin();
                            config.allowedOrigins = defaultOrigin ? [ defaultOrigin ] : [];
                        }
                        config.rules = config.rules || [];
                        config.checks = config.checks || [];
                        config.data = _extends({
                            checks: {},
                            rules: {}
                        }, config.data);
                        return config;
                    }
                    function unpackToObject(collection, audit, method) {
                        var i, l;
                        for (i = 0, l = collection.length; i < l; i++) audit[method](collection[i]);
                    }
                    var mergeCheckLocale = function(a2, b2) {
                        var pass = b2.pass, fail = b2.fail;
                        if ("string" === typeof pass && dotRegex.test(pass)) pass = import_dot2["default"].compile(pass);
                        if ("string" === typeof fail && dotRegex.test(fail)) fail = import_dot2["default"].compile(fail);
                        return _extends({}, a2, {
                            messages: {
                                pass: pass || a2.messages.pass,
                                fail: fail || a2.messages.fail,
                                incomplete: "object" === _typeof(a2.messages.incomplete) ? _extends({}, a2.messages.incomplete, b2.incomplete) : b2.incomplete
                            }
                        });
                    };
                    var mergeRuleLocale = function(a2, b2) {
                        var help = b2.help, description = b2.description;
                        if ("string" === typeof help && dotRegex.test(help)) help = import_dot2["default"].compile(help);
                        if ("string" === typeof description && dotRegex.test(description)) description = import_dot2["default"].compile(description);
                        return _extends({}, a2, {
                            help: help || a2.help,
                            description: description || a2.description
                        });
                    };
                    var mergeFailureMessage = function(a2, b2) {
                        var failureMessage = b2.failureMessage;
                        if ("string" === typeof failureMessage && dotRegex.test(failureMessage)) failureMessage = import_dot2["default"].compile(failureMessage);
                        return _extends({}, a2, {
                            failureMessage: failureMessage || a2.failureMessage
                        });
                    };
                    var mergeFallbackMessage = function(a2, b2) {
                        if ("string" === typeof b2 && dotRegex.test(b2)) b2 = import_dot2["default"].compile(b2);
                        return b2 || a2;
                    };
                    function getRulesToRun(rules, context, options) {
                        var base = {
                            now: [],
                            later: []
                        };
                        var splitRules = rules.reduce((function(out, rule) {
                            if (!rule_should_run_default(rule, context, options)) return out;
                            if (rule.preload) {
                                out.later.push(rule);
                                return out;
                            }
                            out.now.push(rule);
                            return out;
                        }), base);
                        return splitRules;
                    }
                    function getDefferedRule(rule, context, options) {
                        if (options.performanceTimer) performance_timer_default.mark("mark_rule_start_" + rule.id);
                        return function(resolve, reject) {
                            rule.run(context, options, (function(ruleResult) {
                                resolve(ruleResult);
                            }), (function(err2) {
                                if (!options.debug) {
                                    var errResult = Object.assign(new rule_result_default(rule), {
                                        result: constants_default.CANTTELL,
                                        description: "An error occured while running this rule",
                                        message: err2.message,
                                        stack: err2.stack,
                                        error: err2,
                                        errorNode: err2.errorNode
                                    });
                                    resolve(errResult);
                                } else reject(err2);
                            }));
                        };
                    }
                    function getHelpUrl(_ref144, ruleId, version) {
                        var brand = _ref144.brand, application = _ref144.application, lang = _ref144.lang;
                        return constants_default.helpUrlBase + brand + "/" + (version || axe.version.substring(0, axe.version.lastIndexOf("."))) + "/" + ruleId + "?application=" + encodeURIComponent(application) + (lang && "en" !== lang ? "&lang=" + encodeURIComponent(lang) : "");
                    }
                    function setupGlobals(context) {
                        var hasWindow = window && "Node" in window && "NodeList" in window;
                        var hasDoc = !!document;
                        if (hasWindow && hasDoc) return;
                        if (!context || !context.ownerDocument) throw new Error('Required "window" or "document" globals not defined and cannot be deduced from the context. Either set the globals before running or pass in a valid Element.');
                        if (!hasDoc) {
                            cache_default.set("globalDocumentSet", true);
                            document = context.ownerDocument;
                        }
                        if (!hasWindow) {
                            cache_default.set("globalWindowSet", true);
                            window = document.defaultView;
                        }
                    }
                    function resetGlobals() {
                        if (cache_default.get("globalDocumentSet")) {
                            cache_default.set("globalDocumentSet", false);
                            document = null;
                        }
                        if (cache_default.get("globalWindowSet")) {
                            cache_default.set("globalWindowSet", false);
                            window = null;
                        }
                    }
                    function teardown() {
                        resetGlobals();
                        axe._memoizedFns.forEach((function(fn) {
                            return fn.clear();
                        }));
                        cache_default.clear();
                        axe._tree = void 0;
                        axe._selectorData = void 0;
                        axe._selectCache = void 0;
                    }
                    var teardown_default = teardown;
                    function runRules(context, options, resolve, reject) {
                        try {
                            context = new Context(context);
                            axe._tree = context.flatTree;
                            axe._selectorData = _getSelectorData(context.flatTree);
                        } catch (e) {
                            teardown_default();
                            return reject(e);
                        }
                        var q = queue_default();
                        var audit = axe._audit;
                        if (options.performanceTimer) performance_timer_default.auditStart();
                        if (context.frames.length && false !== options.iframes) q.defer((function(res, rej) {
                            _collectResultsFromFrames(context, options, "rules", null, res, rej);
                        }));
                        q.defer((function(res, rej) {
                            audit.run(context, options, res, rej);
                        }));
                        q.then((function(data) {
                            try {
                                if (options.performanceTimer) performance_timer_default.auditEnd();
                                var results = merge_results_default(data.map((function(res) {
                                    return {
                                        results: res
                                    };
                                })));
                                if (context.initiator) {
                                    results = audit.after(results, options);
                                    results.forEach(_publishMetaData);
                                    results = results.map(_finalizeRuleResult);
                                }
                                try {
                                    resolve(results, teardown_default);
                                } catch (e) {
                                    teardown_default();
                                    log_default(e);
                                }
                            } catch (e) {
                                teardown_default();
                                reject(e);
                            }
                        }))["catch"]((function(e) {
                            teardown_default();
                            reject(e);
                        }));
                    }
                    function load(audit) {
                        axe._audit = new audit_default(audit);
                    }
                    function runCommand(data, keepalive, callback) {
                        var resolve = callback;
                        var reject = function(err2) {
                            if (err2 instanceof Error === false) err2 = new Error(err2);
                            callback(err2);
                        };
                        var context = data && data.context || {};
                        if (context.hasOwnProperty("include") && !context.include.length) context.include = [ document ];
                        var options = data && data.options || {};
                        switch (data.command) {
                          case "rules":
                            return runRules(context, options, (function(results, cleanupFn) {
                                results = node_serializer_default.mapRawResults(results);
                                resolve(results);
                                cleanupFn();
                            }), reject);

                          case "cleanup-plugin":
                            return cleanup_default(resolve, reject);

                          default:
                            if (axe._audit && axe._audit.commands && axe._audit.commands[data.command]) return axe._audit.commands[data.command](data, callback);
                        }
                    }
                    if (window.top !== window) {
                        _respondable.subscribe("axe.start", runCommand);
                        _respondable.subscribe("axe.ping", (function(data, keepalive, respond) {
                            respond({
                                axe: true
                            });
                        }));
                    }
                    function Plugin(spec) {
                        this._run = spec.run;
                        this._collect = spec.collect;
                        this._registry = {};
                        spec.commands.forEach((function(command) {
                            axe._audit.registerCommand(command);
                        }));
                    }
                    Plugin.prototype.run = function() {
                        return this._run.apply(this, arguments);
                    };
                    Plugin.prototype.collect = function() {
                        return this._collect.apply(this, arguments);
                    };
                    Plugin.prototype.cleanup = function(done) {
                        var q = axe.utils.queue();
                        var that = this;
                        Object.keys(this._registry).forEach((function(key) {
                            q.defer((function(_done) {
                                that._registry[key].cleanup(_done);
                            }));
                        }));
                        q.then(done);
                    };
                    Plugin.prototype.add = function(impl) {
                        this._registry[impl.id] = impl;
                    };
                    function registerPlugin(plugin) {
                        axe.plugins[plugin.id] = new Plugin(plugin);
                    }
                    var plugins_default = registerPlugin;
                    function reset() {
                        var audit = axe._audit;
                        if (!audit) throw new Error("No audit configured");
                        audit.resetRulesAndChecks();
                        resetStandards();
                    }
                    var reset_default = reset;
                    function runVirtualRule(ruleId, vNode) {
                        var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                        options.reporter = options.reporter || axe._audit.reporter || "v1";
                        axe._selectorData = {};
                        if (!(vNode instanceof abstract_virtual_node_default)) vNode = new serial_virtual_node_default(vNode);
                        var rule = _getRule(ruleId);
                        if (!rule) throw new Error("unknown rule `" + ruleId + "`");
                        rule = Object.create(rule, {
                            excludeHidden: {
                                value: false
                            }
                        });
                        var context = {
                            initiator: true,
                            include: [ vNode ],
                            exclude: [],
                            frames: [],
                            page: false,
                            focusable: true,
                            size: {},
                            flatTree: []
                        };
                        var rawResults = rule.runSync(context, options);
                        _publishMetaData(rawResults);
                        _finalizeRuleResult(rawResults);
                        var results = aggregate_result_default([ rawResults ]);
                        results.violations.forEach((function(result) {
                            return result.nodes.forEach((function(nodeResult) {
                                nodeResult.failureSummary = failure_summary_default(nodeResult);
                            }));
                        }));
                        return _extends({}, _getEnvironmentData(), results, {
                            toolOptions: options
                        });
                    }
                    function normalizeRunParams(_ref145) {
                        var _ref147, _options$reporter, _axe$_audit;
                        var _ref146 = _slicedToArray(_ref145, 3), context = _ref146[0], options = _ref146[1], callback = _ref146[2];
                        var typeErr = new TypeError("axe.run arguments are invalid");
                        if (!_isContextSpec(context)) {
                            if (void 0 !== callback) throw typeErr;
                            callback = options;
                            options = context;
                            context = document;
                        }
                        if ("object" !== _typeof(options)) {
                            if (void 0 !== callback) throw typeErr;
                            callback = options;
                            options = {};
                        }
                        if ("function" !== typeof callback && void 0 !== callback) throw typeErr;
                        options = _clone(options);
                        options.reporter = null !== (_ref147 = null !== (_options$reporter = options.reporter) && void 0 !== _options$reporter ? _options$reporter : null === (_axe$_audit = axe._audit) || void 0 === _axe$_audit ? void 0 : _axe$_audit.reporter) && void 0 !== _ref147 ? _ref147 : "v1";
                        return {
                            context,
                            options,
                            callback
                        };
                    }
                    var noop2 = function() {};
                    function run4() {
                        for (var _len7 = arguments.length, args = new Array(_len7), _key9 = 0; _key9 < _len7; _key9++) args[_key9] = arguments[_key9];
                        setupGlobals(args[0]);
                        var _normalizeRunParams = normalizeRunParams(args), context = _normalizeRunParams.context, options = _normalizeRunParams.options, _normalizeRunParams$c = _normalizeRunParams.callback, callback = void 0 === _normalizeRunParams$c ? noop2 : _normalizeRunParams$c;
                        var _getPromiseHandlers = getPromiseHandlers(callback), thenable = _getPromiseHandlers.thenable, resolve = _getPromiseHandlers.resolve, reject = _getPromiseHandlers.reject;
                        try {
                            assert_default(axe._audit, "No audit configured");
                            assert_default(!axe._running, "Axe is already running. Use `await axe.run()` to wait for the previous run to finish before starting a new run.");
                        } catch (e) {
                            return handleError(e, callback);
                        }
                        axe._running = true;
                        if (options.performanceTimer) axe.utils.performanceTimer.start();
                        function handleRunRules(rawResults, teardown2) {
                            var respond = function(results) {
                                axe._running = false;
                                teardown2();
                                try {
                                    resolve(results);
                                } catch (e) {
                                    axe.log(e);
                                }
                            };
                            var wrappedReject = function(err2) {
                                axe._running = false;
                                teardown2();
                                try {
                                    reject(err2);
                                } catch (e) {
                                    axe.log(e);
                                }
                            };
                            if (options.performanceTimer) axe.utils.performanceTimer.end();
                            try {
                                createReport(rawResults, options, respond, wrappedReject);
                            } catch (err2) {
                                wrappedReject(err2);
                            }
                        }
                        function errorRunRules(err2) {
                            if (options.performanceTimer) axe.utils.performanceTimer.end();
                            axe._running = false;
                            callback(err2);
                            reject(err2);
                        }
                        axe._runRules(context, options, handleRunRules, errorRunRules);
                        return thenable;
                    }
                    function getPromiseHandlers(callback) {
                        var thenable, reject, resolve;
                        if ("function" === typeof Promise && callback === noop2) thenable = new Promise((function(_resolve, _reject) {
                            reject = _reject;
                            resolve = _resolve;
                        })); else {
                            resolve = function(result) {
                                return callback(null, result);
                            };
                            reject = function(err2) {
                                return callback(err2);
                            };
                        }
                        return {
                            thenable,
                            reject,
                            resolve
                        };
                    }
                    function createReport(rawResults, options, respond, reject) {
                        var reporter = getReporter(options.reporter);
                        var results = reporter(rawResults, options, respond, reject);
                        if (void 0 !== results) respond(results);
                    }
                    function handleError(err2, callback) {
                        if ("function" === typeof callback && callback !== noop2) {
                            callback(err2.message);
                            return;
                        }
                        throw err2;
                    }
                    function runPartial() {
                        for (var _len8 = arguments.length, args = new Array(_len8), _key10 = 0; _key10 < _len8; _key10++) args[_key10] = arguments[_key10];
                        var _normalizeRunParams2 = normalizeRunParams(args), options = _normalizeRunParams2.options, context = _normalizeRunParams2.context;
                        assert_default(axe._audit, "Axe is not configured. Audit is missing.");
                        assert_default(!axe._running, "Axe is already running. Use `await axe.run()` to wait for the previous run to finish before starting a new run.");
                        var contextObj = new Context(context, axe._tree);
                        axe._tree = contextObj.flatTree;
                        axe._selectorData = _getSelectorData(contextObj.flatTree);
                        axe._running = true;
                        options.elementRef = false;
                        return new Promise((function(res, rej) {
                            axe._audit.run(contextObj, options, res, rej);
                        })).then((function(results) {
                            results = node_serializer_default.mapRawResults(results);
                            var frames = contextObj.frames.map((function(_ref148) {
                                var node = _ref148.node;
                                return node_serializer_default.toSpec(node);
                            }));
                            var environmentData;
                            if (contextObj.initiator) environmentData = _getEnvironmentData();
                            axe._running = false;
                            teardown_default();
                            return {
                                results,
                                frames,
                                environmentData
                            };
                        }))["catch"]((function(err2) {
                            axe._running = false;
                            teardown_default();
                            return Promise.reject(err2);
                        }));
                    }
                    function finishRun(partialResults) {
                        var _ref150, _options$reporter2, _axe$_audit2;
                        var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                        options = _clone(options);
                        var _ref149 = partialResults.find((function(r) {
                            return r.environmentData;
                        })) || {}, environmentData = _ref149.environmentData;
                        axe._audit.normalizeOptions(options);
                        options.reporter = null !== (_ref150 = null !== (_options$reporter2 = options.reporter) && void 0 !== _options$reporter2 ? _options$reporter2 : null === (_axe$_audit2 = axe._audit) || void 0 === _axe$_audit2 ? void 0 : _axe$_audit2.reporter) && void 0 !== _ref150 ? _ref150 : "v1";
                        setFrameSpec(partialResults);
                        var results = merge_results_default(partialResults);
                        results = axe._audit.after(results, options);
                        results.forEach(_publishMetaData);
                        results = results.map(_finalizeRuleResult);
                        return createReport2(results, _extends({
                            environmentData
                        }, options));
                    }
                    function setFrameSpec(partialResults) {
                        var frameStack = [];
                        var _step23, _iterator23 = _createForOfIteratorHelper(partialResults);
                        try {
                            for (_iterator23.s(); !(_step23 = _iterator23.n()).done; ) {
                                var partialResult = _step23.value;
                                var frameSpec = frameStack.shift();
                                if (!partialResult) continue;
                                partialResult.frameSpec = null !== frameSpec && void 0 !== frameSpec ? frameSpec : null;
                                var frameSpecs = getMergedFrameSpecs(partialResult);
                                frameStack.unshift.apply(frameStack, _toConsumableArray(frameSpecs));
                            }
                        } catch (err) {
                            _iterator23.e(err);
                        } finally {
                            _iterator23.f();
                        }
                    }
                    function getMergedFrameSpecs(_ref151) {
                        var childFrameSpecs = _ref151.frames, parentFrameSpec = _ref151.frameSpec;
                        if (!parentFrameSpec) return childFrameSpecs;
                        return childFrameSpecs.map((function(childFrameSpec) {
                            return node_serializer_default.mergeSpecs(childFrameSpec, parentFrameSpec);
                        }));
                    }
                    function createReport2(results, options) {
                        return new Promise((function(resolve, reject) {
                            var reporter = getReporter(options.reporter);
                            reporter(results, options, resolve, reject);
                        }));
                    }
                    function setup(node) {
                        if (axe._tree) throw new Error("Axe is already setup. Call `axe.teardown()` before calling `axe.setup` again.");
                        if (node && "object" === _typeof(node.documentElement) && "object" === _typeof(node.defaultView)) node = node.documentElement;
                        setupGlobals(node);
                        axe._tree = _getFlattenedTree(node);
                        axe._selectorData = _getSelectorData(axe._tree);
                        return axe._tree[0];
                    }
                    var setup_default = setup;
                    var naReporter = function(results, options, callback) {
                        console.warn('"na" reporter will be deprecated in axe v4.0. Use the "v2" reporter instead.');
                        if ("function" === typeof options) {
                            callback = options;
                            options = {};
                        }
                        var _options4 = options, environmentData = _options4.environmentData, toolOptions = _objectWithoutProperties(_options4, _excluded15);
                        callback(_extends({}, _getEnvironmentData(environmentData), {
                            toolOptions
                        }, processAggregate(results, options)));
                    };
                    var na_default = naReporter;
                    var noPassesReporter = function(results, options, callback) {
                        if ("function" === typeof options) {
                            callback = options;
                            options = {};
                        }
                        var _options5 = options, environmentData = _options5.environmentData, toolOptions = _objectWithoutProperties(_options5, _excluded16);
                        options.resultTypes = [ "violations" ];
                        var _processAggregate = processAggregate(results, options), violations = _processAggregate.violations;
                        callback(_extends({}, _getEnvironmentData(environmentData), {
                            toolOptions,
                            violations
                        }));
                    };
                    var no_passes_default = noPassesReporter;
                    var rawReporter = function(results, options, callback) {
                        if ("function" === typeof options) {
                            callback = options;
                            options = {};
                        }
                        if (!results || !Array.isArray(results)) return callback(results);
                        var transformedResults = results.map((function(result) {
                            var transformedResult = _extends({}, result);
                            var types = [ "passes", "violations", "incomplete", "inapplicable" ];
                            for (var _i50 = 0, _types = types; _i50 < _types.length; _i50++) {
                                var type2 = _types[_i50];
                                transformedResult[type2] = node_serializer_default.mapRawNodeResults(transformedResult[type2]);
                            }
                            return transformedResult;
                        }));
                        callback(transformedResults);
                    };
                    var raw_default = rawReporter;
                    var rawEnvReporter = function(results, options, callback) {
                        if ("function" === typeof options) {
                            callback = options;
                            options = {};
                        }
                        var _options6 = options, environmentData = _options6.environmentData, toolOptions = _objectWithoutProperties(_options6, _excluded17);
                        raw_default(results, toolOptions, (function(raw) {
                            var env = _getEnvironmentData(environmentData);
                            callback({
                                raw,
                                env
                            });
                        }));
                    };
                    var raw_env_default = rawEnvReporter;
                    var v1Reporter = function(results, options, callback) {
                        if ("function" === typeof options) {
                            callback = options;
                            options = {};
                        }
                        var _options7 = options, environmentData = _options7.environmentData, toolOptions = _objectWithoutProperties(_options7, _excluded18);
                        var out = processAggregate(results, options);
                        var addFailureSummaries = function(result) {
                            result.nodes.forEach((function(nodeResult) {
                                nodeResult.failureSummary = failure_summary_default(nodeResult);
                            }));
                        };
                        out.incomplete.forEach(addFailureSummaries);
                        out.violations.forEach(addFailureSummaries);
                        callback(_extends({}, _getEnvironmentData(environmentData), {
                            toolOptions
                        }, out));
                    };
                    var v1_default = v1Reporter;
                    var v2Reporter = function(results, options, callback) {
                        if ("function" === typeof options) {
                            callback = options;
                            options = {};
                        }
                        var _options8 = options, environmentData = _options8.environmentData, toolOptions = _objectWithoutProperties(_options8, _excluded19);
                        var out = processAggregate(results, options);
                        callback(_extends({}, _getEnvironmentData(environmentData), {
                            toolOptions
                        }, out));
                    };
                    var v2_default = v2Reporter;
                    var _thisWillBeDeletedDoNotUse = {
                        base: {
                            Audit: audit_default,
                            CheckResult: check_result_default,
                            Check: check_default,
                            Context,
                            RuleResult: rule_result_default,
                            Rule,
                            metadataFunctionMap: metadata_function_map_default
                        },
                        public: {
                            reporters
                        },
                        helpers: {
                            failureSummary: failure_summary_default,
                            incompleteFallbackMessage,
                            processAggregate
                        },
                        utils: {
                            setDefaultFrameMessenger,
                            cacheNodeSelectors,
                            getNodesMatchingExpression,
                            convertSelector: _convertSelector
                        },
                        commons: {
                            dom: {
                                nativelyHidden,
                                displayHidden,
                                visibilityHidden,
                                contentVisibiltyHidden,
                                ariaHidden,
                                opacityHidden,
                                scrollHidden,
                                overflowHidden,
                                clipHidden,
                                areaHidden,
                                detailsHidden
                            }
                        }
                    };
                    var exposed_for_testing_default = _thisWillBeDeletedDoNotUse;
                    axe._thisWillBeDeletedDoNotUse = exposed_for_testing_default;
                    axe.constants = constants_default;
                    axe.log = log_default;
                    axe.AbstractVirtualNode = abstract_virtual_node_default;
                    axe.SerialVirtualNode = serial_virtual_node_default;
                    axe.VirtualNode = virtual_node_default;
                    axe._cache = cache_default;
                    axe.imports = imports_exports;
                    axe.cleanup = cleanup_default;
                    axe.configure = configure_default;
                    axe.frameMessenger = frameMessenger2;
                    axe.getRules = get_rules_default;
                    axe._load = load;
                    axe.plugins = {};
                    axe.registerPlugin = plugins_default;
                    axe.hasReporter = hasReporter;
                    axe.getReporter = getReporter;
                    axe.addReporter = addReporter;
                    axe.reset = reset_default;
                    axe._runRules = runRules;
                    axe.runVirtualRule = runVirtualRule;
                    axe.run = run4;
                    axe.setup = setup_default;
                    axe.teardown = teardown_default;
                    axe.runPartial = runPartial;
                    axe.finishRun = finishRun;
                    axe.commons = commons_exports;
                    axe.utils = utils_exports;
                    axe.addReporter("na", na_default);
                    axe.addReporter("no-passes", no_passes_default);
                    axe.addReporter("rawEnv", raw_env_default);
                    axe.addReporter("raw", raw_default);
                    axe.addReporter("v1", v1_default);
                    axe.addReporter("v2", v2_default, true);
                })();
                "use strict";
                axe._load({
                    lang: "en",
                    data: {
                        rules: {
                            accesskeys: {
                                description: "Ensure every accesskey attribute value is unique",
                                help: "accesskey attribute value should be unique"
                            },
                            "area-alt": {
                                description: "Ensure <area> elements of image maps have alternate text",
                                help: "Active <area> elements must have alternate text"
                            },
                            "aria-allowed-attr": {
                                description: "Ensure an element's role supports its ARIA attributes",
                                help: "Elements must only use supported ARIA attributes"
                            },
                            "aria-allowed-role": {
                                description: "Ensure role attribute has an appropriate value for the element",
                                help: "ARIA role should be appropriate for the element"
                            },
                            "aria-braille-equivalent": {
                                description: "Ensure aria-braillelabel and aria-brailleroledescription have a non-braille equivalent",
                                help: "aria-braille attributes must have a non-braille equivalent"
                            },
                            "aria-command-name": {
                                description: "Ensure every ARIA button, link and menuitem has an accessible name",
                                help: "ARIA commands must have an accessible name"
                            },
                            "aria-conditional-attr": {
                                description: "Ensure ARIA attributes are used as described in the specification of the element's role",
                                help: "ARIA attributes must be used as specified for the element's role"
                            },
                            "aria-deprecated-role": {
                                description: "Ensure elements do not use deprecated roles",
                                help: "Deprecated ARIA roles must not be used"
                            },
                            "aria-dialog-name": {
                                description: "Ensure every ARIA dialog and alertdialog node has an accessible name",
                                help: "ARIA dialog and alertdialog nodes should have an accessible name"
                            },
                            "aria-hidden-body": {
                                description: 'Ensure aria-hidden="true" is not present on the document body.',
                                help: 'aria-hidden="true" must not be present on the document body'
                            },
                            "aria-hidden-focus": {
                                description: "Ensure aria-hidden elements are not focusable nor contain focusable elements",
                                help: "ARIA hidden element must not be focusable or contain focusable elements"
                            },
                            "aria-input-field-name": {
                                description: "Ensure every ARIA input field has an accessible name",
                                help: "ARIA input fields must have an accessible name"
                            },
                            "aria-meter-name": {
                                description: "Ensure every ARIA meter node has an accessible name",
                                help: "ARIA meter nodes must have an accessible name"
                            },
                            "aria-progressbar-name": {
                                description: "Ensure every ARIA progressbar node has an accessible name",
                                help: "ARIA progressbar nodes must have an accessible name"
                            },
                            "aria-prohibited-attr": {
                                description: "Ensure ARIA attributes are not prohibited for an element's role",
                                help: "Elements must only use permitted ARIA attributes"
                            },
                            "aria-required-attr": {
                                description: "Ensure elements with ARIA roles have all required ARIA attributes",
                                help: "Required ARIA attributes must be provided"
                            },
                            "aria-required-children": {
                                description: "Ensure elements with an ARIA role that require child roles contain them",
                                help: "Certain ARIA roles must contain particular children"
                            },
                            "aria-required-parent": {
                                description: "Ensure elements with an ARIA role that require parent roles are contained by them",
                                help: "Certain ARIA roles must be contained by particular parents"
                            },
                            "aria-roledescription": {
                                description: "Ensure aria-roledescription is only used on elements with an implicit or explicit role",
                                help: "aria-roledescription must be on elements with a semantic role"
                            },
                            "aria-roles": {
                                description: "Ensure all elements with a role attribute use a valid value",
                                help: "ARIA roles used must conform to valid values"
                            },
                            "aria-text": {
                                description: 'Ensure role="text" is used on elements with no focusable descendants',
                                help: '"role=text" should have no focusable descendants'
                            },
                            "aria-toggle-field-name": {
                                description: "Ensure every ARIA toggle field has an accessible name",
                                help: "ARIA toggle fields must have an accessible name"
                            },
                            "aria-tooltip-name": {
                                description: "Ensure every ARIA tooltip node has an accessible name",
                                help: "ARIA tooltip nodes must have an accessible name"
                            },
                            "aria-treeitem-name": {
                                description: "Ensure every ARIA treeitem node has an accessible name",
                                help: "ARIA treeitem nodes should have an accessible name"
                            },
                            "aria-valid-attr-value": {
                                description: "Ensure all ARIA attributes have valid values",
                                help: "ARIA attributes must conform to valid values"
                            },
                            "aria-valid-attr": {
                                description: "Ensure attributes that begin with aria- are valid ARIA attributes",
                                help: "ARIA attributes must conform to valid names"
                            },
                            "audio-caption": {
                                description: "Ensure <audio> elements have captions",
                                help: "<audio> elements must have a captions track"
                            },
                            "autocomplete-valid": {
                                description: "Ensure the autocomplete attribute is correct and suitable for the form field",
                                help: "autocomplete attribute must be used correctly"
                            },
                            "avoid-inline-spacing": {
                                description: "Ensure that text spacing set through style attributes can be adjusted with custom stylesheets",
                                help: "Inline text spacing must be adjustable with custom stylesheets"
                            },
                            blink: {
                                description: "Ensure <blink> elements are not used",
                                help: "<blink> elements are deprecated and must not be used"
                            },
                            "button-name": {
                                description: "Ensure buttons have discernible text",
                                help: "Buttons must have discernible text"
                            },
                            bypass: {
                                description: "Ensure each page has at least one mechanism for a user to bypass navigation and jump straight to the content",
                                help: "Page must have means to bypass repeated blocks"
                            },
                            "color-contrast-enhanced": {
                                description: "Ensure the contrast between foreground and background colors meets WCAG 2 AAA enhanced contrast ratio thresholds",
                                help: "Elements must meet enhanced color contrast ratio thresholds"
                            },
                            "color-contrast": {
                                description: "Ensure the contrast between foreground and background colors meets WCAG 2 AA minimum contrast ratio thresholds",
                                help: "Elements must meet minimum color contrast ratio thresholds"
                            },
                            "css-orientation-lock": {
                                description: "Ensure content is not locked to any specific display orientation, and the content is operable in all display orientations",
                                help: "CSS Media queries must not lock display orientation"
                            },
                            "definition-list": {
                                description: "Ensure <dl> elements are structured correctly",
                                help: "<dl> elements must only directly contain properly-ordered <dt> and <dd> groups, <script>, <template> or <div> elements"
                            },
                            dlitem: {
                                description: "Ensure <dt> and <dd> elements are contained by a <dl>",
                                help: "<dt> and <dd> elements must be contained by a <dl>"
                            },
                            "document-title": {
                                description: "Ensure each HTML document contains a non-empty <title> element",
                                help: "Documents must have <title> element to aid in navigation"
                            },
                            "duplicate-id-active": {
                                description: "Ensure every id attribute value of active elements is unique",
                                help: "IDs of active elements must be unique"
                            },
                            "duplicate-id-aria": {
                                description: "Ensure every id attribute value used in ARIA and in labels is unique",
                                help: "IDs used in ARIA and labels must be unique"
                            },
                            "duplicate-id": {
                                description: "Ensure every id attribute value is unique",
                                help: "id attribute value must be unique"
                            },
                            "empty-heading": {
                                description: "Ensure headings have discernible text",
                                help: "Headings should not be empty"
                            },
                            "empty-table-header": {
                                description: "Ensure table headers have discernible text",
                                help: "Table header text should not be empty"
                            },
                            "focus-order-semantics": {
                                description: "Ensure elements in the focus order have a role appropriate for interactive content",
                                help: "Elements in the focus order should have an appropriate role"
                            },
                            "form-field-multiple-labels": {
                                description: "Ensure form field does not have multiple label elements",
                                help: "Form field must not have multiple label elements"
                            },
                            "frame-focusable-content": {
                                description: "Ensure <frame> and <iframe> elements with focusable content do not have tabindex=-1",
                                help: "Frames with focusable content must not have tabindex=-1"
                            },
                            "frame-tested": {
                                description: "Ensure <iframe> and <frame> elements contain the axe-core script",
                                help: "Frames should be tested with axe-core"
                            },
                            "frame-title-unique": {
                                description: "Ensure <iframe> and <frame> elements contain a unique title attribute",
                                help: "Frames must have a unique title attribute"
                            },
                            "frame-title": {
                                description: "Ensure <iframe> and <frame> elements have an accessible name",
                                help: "Frames must have an accessible name"
                            },
                            "heading-order": {
                                description: "Ensure the order of headings is semantically correct",
                                help: "Heading levels should only increase by one"
                            },
                            "hidden-content": {
                                description: "Informs users about hidden content.",
                                help: "Hidden content on the page should be analyzed"
                            },
                            "html-has-lang": {
                                description: "Ensure every HTML document has a lang attribute",
                                help: "<html> element must have a lang attribute"
                            },
                            "html-lang-valid": {
                                description: "Ensure the lang attribute of the <html> element has a valid value",
                                help: "<html> element must have a valid value for the lang attribute"
                            },
                            "html-xml-lang-mismatch": {
                                description: "Ensure that HTML elements with both valid lang and xml:lang attributes agree on the base language of the page",
                                help: "HTML elements with lang and xml:lang must have the same base language"
                            },
                            "identical-links-same-purpose": {
                                description: "Ensure that links with the same accessible name serve a similar purpose",
                                help: "Links with the same name must have a similar purpose"
                            },
                            "image-alt": {
                                description: "Ensure <img> elements have alternate text or a role of none or presentation",
                                help: "Images must have alternate text"
                            },
                            "image-redundant-alt": {
                                description: "Ensure image alternative is not repeated as text",
                                help: "Alternative text of images should not be repeated as text"
                            },
                            "input-button-name": {
                                description: "Ensure input buttons have discernible text",
                                help: "Input buttons must have discernible text"
                            },
                            "input-image-alt": {
                                description: 'Ensure <input type="image"> elements have alternate text',
                                help: "Image buttons must have alternate text"
                            },
                            "label-content-name-mismatch": {
                                description: "Ensure that elements labelled through their content must have their visible text as part of their accessible name",
                                help: "Elements must have their visible text as part of their accessible name"
                            },
                            "label-title-only": {
                                description: "Ensure that every form element has a visible label and is not solely labeled using hidden labels, or the title or aria-describedby attributes",
                                help: "Form elements should have a visible label"
                            },
                            label: {
                                description: "Ensure every form element has a label",
                                help: "Form elements must have labels"
                            },
                            "landmark-banner-is-top-level": {
                                description: "Ensure the banner landmark is at top level",
                                help: "Banner landmark should not be contained in another landmark"
                            },
                            "landmark-complementary-is-top-level": {
                                description: "Ensure the complementary landmark or aside is at top level",
                                help: "Aside should not be contained in another landmark"
                            },
                            "landmark-contentinfo-is-top-level": {
                                description: "Ensure the contentinfo landmark is at top level",
                                help: "Contentinfo landmark should not be contained in another landmark"
                            },
                            "landmark-main-is-top-level": {
                                description: "Ensure the main landmark is at top level",
                                help: "Main landmark should not be contained in another landmark"
                            },
                            "landmark-no-duplicate-banner": {
                                description: "Ensure the document has at most one banner landmark",
                                help: "Document should not have more than one banner landmark"
                            },
                            "landmark-no-duplicate-contentinfo": {
                                description: "Ensure the document has at most one contentinfo landmark",
                                help: "Document should not have more than one contentinfo landmark"
                            },
                            "landmark-no-duplicate-main": {
                                description: "Ensure the document has at most one main landmark",
                                help: "Document should not have more than one main landmark"
                            },
                            "landmark-one-main": {
                                description: "Ensure the document has a main landmark",
                                help: "Document should have one main landmark"
                            },
                            "landmark-unique": {
                                description: "Ensure landmarks are unique",
                                help: "Landmarks should have a unique role or role/label/title (i.e. accessible name) combination"
                            },
                            "link-in-text-block": {
                                description: "Ensure links are distinguished from surrounding text in a way that does not rely on color",
                                help: "Links must be distinguishable without relying on color"
                            },
                            "link-name": {
                                description: "Ensure links have discernible text",
                                help: "Links must have discernible text"
                            },
                            list: {
                                description: "Ensure that lists are structured correctly",
                                help: "<ul> and <ol> must only directly contain <li>, <script> or <template> elements"
                            },
                            listitem: {
                                description: "Ensure <li> elements are used semantically",
                                help: "<li> elements must be contained in a <ul> or <ol>"
                            },
                            marquee: {
                                description: "Ensure <marquee> elements are not used",
                                help: "<marquee> elements are deprecated and must not be used"
                            },
                            "meta-refresh-no-exceptions": {
                                description: 'Ensure <meta http-equiv="refresh"> is not used for delayed refresh',
                                help: "Delayed refresh must not be used"
                            },
                            "meta-refresh": {
                                description: 'Ensure <meta http-equiv="refresh"> is not used for delayed refresh',
                                help: "Delayed refresh under 20 hours must not be used"
                            },
                            "meta-viewport-large": {
                                description: 'Ensure <meta name="viewport"> can scale a significant amount',
                                help: "Users should be able to zoom and scale the text up to 500%"
                            },
                            "meta-viewport": {
                                description: 'Ensure <meta name="viewport"> does not disable text scaling and zooming',
                                help: "Zooming and scaling must not be disabled"
                            },
                            "nested-interactive": {
                                description: "Ensure interactive controls are not nested as they are not always announced by screen readers or can cause focus problems for assistive technologies",
                                help: "Interactive controls must not be nested"
                            },
                            "no-autoplay-audio": {
                                description: "Ensure <video> or <audio> elements do not autoplay audio for more than 3 seconds without a control mechanism to stop or mute the audio",
                                help: "<video> or <audio> elements must not play automatically"
                            },
                            "object-alt": {
                                description: "Ensure <object> elements have alternate text",
                                help: "<object> elements must have alternate text"
                            },
                            "p-as-heading": {
                                description: "Ensure bold, italic text and font-size is not used to style <p> elements as a heading",
                                help: "Styled <p> elements must not be used as headings"
                            },
                            "page-has-heading-one": {
                                description: "Ensure that the page, or at least one of its frames contains a level-one heading",
                                help: "Page should contain a level-one heading"
                            },
                            "presentation-role-conflict": {
                                description: "Elements marked as presentational should not have global ARIA or tabindex to ensure all screen readers ignore them",
                                help: "Ensure elements marked as presentational are consistently ignored"
                            },
                            region: {
                                description: "Ensure all page content is contained by landmarks",
                                help: "All page content should be contained by landmarks"
                            },
                            "role-img-alt": {
                                description: 'Ensure [role="img"] elements have alternate text',
                                help: '[role="img"] elements must have an alternative text'
                            },
                            "scope-attr-valid": {
                                description: "Ensure the scope attribute is used correctly on tables",
                                help: "scope attribute should be used correctly"
                            },
                            "scrollable-region-focusable": {
                                description: "Ensure elements that have scrollable content are accessible by keyboard",
                                help: "Scrollable region must have keyboard access"
                            },
                            "select-name": {
                                description: "Ensure select element has an accessible name",
                                help: "Select element must have an accessible name"
                            },
                            "server-side-image-map": {
                                description: "Ensure that server-side image maps are not used",
                                help: "Server-side image maps must not be used"
                            },
                            "skip-link": {
                                description: "Ensure all skip links have a focusable target",
                                help: "The skip-link target should exist and be focusable"
                            },
                            "summary-name": {
                                description: "Ensure summary elements have discernible text",
                                help: "Summary elements must have discernible text"
                            },
                            "svg-img-alt": {
                                description: "Ensure <svg> elements with an img, graphics-document or graphics-symbol role have an accessible text",
                                help: "<svg> elements with an img role must have an alternative text"
                            },
                            tabindex: {
                                description: "Ensure tabindex attribute values are not greater than 0",
                                help: "Elements should not have tabindex greater than zero"
                            },
                            "table-duplicate-name": {
                                description: "Ensure the <caption> element does not contain the same text as the summary attribute",
                                help: "Tables should not have the same summary and caption"
                            },
                            "table-fake-caption": {
                                description: "Ensure that tables with a caption use the <caption> element.",
                                help: "Data or header cells must not be used to give caption to a data table."
                            },
                            "target-size": {
                                description: "Ensure touch targets have sufficient size and space",
                                help: "All touch targets must be 24px large, or leave sufficient space"
                            },
                            "td-has-header": {
                                description: "Ensure that each non-empty data cell in a <table> larger than 3 by 3  has one or more table headers",
                                help: "Non-empty <td> elements in larger <table> must have an associated table header"
                            },
                            "td-headers-attr": {
                                description: "Ensure that each cell in a table that uses the headers attribute refers only to other cells in that table",
                                help: "Table cells that use the headers attribute must only refer to cells in the same table"
                            },
                            "th-has-data-cells": {
                                description: "Ensure that <th> elements and elements with role=columnheader/rowheader have data cells they describe",
                                help: "Table headers in a data table must refer to data cells"
                            },
                            "valid-lang": {
                                description: "Ensure lang attributes have valid values",
                                help: "lang attribute must have a valid value"
                            },
                            "video-caption": {
                                description: "Ensure <video> elements have captions",
                                help: "<video> elements must have captions"
                            }
                        },
                        checks: {
                            abstractrole: {
                                impact: "serious",
                                messages: {
                                    pass: "Abstract roles are not used",
                                    fail: {
                                        singular: "Abstract role cannot be directly used: ${data.values}",
                                        plural: "Abstract roles cannot be directly used: ${data.values}"
                                    }
                                }
                            },
                            "aria-allowed-attr": {
                                impact: "critical",
                                messages: {
                                    pass: "ARIA attributes are used correctly for the defined role",
                                    fail: {
                                        singular: "ARIA attribute is not allowed: ${data.values}",
                                        plural: "ARIA attributes are not allowed: ${data.values}"
                                    },
                                    incomplete: "Check that there is no problem if the ARIA attribute is ignored on this element: ${data.values}"
                                }
                            },
                            "aria-allowed-role": {
                                impact: "minor",
                                messages: {
                                    pass: "ARIA role is allowed for given element",
                                    fail: {
                                        singular: "ARIA role ${data.values} is not allowed for given element",
                                        plural: "ARIA roles ${data.values} are not allowed for given element"
                                    },
                                    incomplete: {
                                        singular: "ARIA role ${data.values} must be removed when the element is made visible, as it is not allowed for the element",
                                        plural: "ARIA roles ${data.values} must be removed when the element is made visible, as they are not allowed for the element"
                                    }
                                }
                            },
                            "aria-busy": {
                                impact: "serious",
                                messages: {
                                    pass: "Element has an aria-busy attribute",
                                    fail: 'Element uses aria-busy="true" while showing a loader'
                                }
                            },
                            "aria-conditional-attr": {
                                impact: "serious",
                                messages: {
                                    pass: "ARIA attribute is allowed",
                                    fail: {
                                        checkbox: 'Remove aria-checked, or set it to "${data.checkState}" to match the real checkbox state',
                                        rowSingular: "This attribute is supported with treegrid rows, but not ${data.ownerRole}: ${data.invalidAttrs}",
                                        rowPlural: "These attributes are supported with treegrid rows, but not ${data.ownerRole}: ${data.invalidAttrs}"
                                    }
                                }
                            },
                            "aria-errormessage": {
                                impact: "critical",
                                messages: {
                                    pass: "aria-errormessage exists and references elements visible to screen readers that use a supported aria-errormessage technique",
                                    fail: {
                                        singular: "aria-errormessage value `${data.values}` must use a technique to announce the message (e.g., aria-live, aria-describedby, role=alert, etc.)",
                                        plural: "aria-errormessage values `${data.values}` must use a technique to announce the message (e.g., aria-live, aria-describedby, role=alert, etc.)",
                                        hidden: "aria-errormessage value `${data.values}` cannot reference a hidden element"
                                    },
                                    incomplete: {
                                        singular: "Ensure aria-errormessage value `${data.values}` references an existing element",
                                        plural: "Ensure aria-errormessage values `${data.values}` reference existing elements",
                                        idrefs: "Unable to determine if aria-errormessage element exists on the page: ${data.values}"
                                    }
                                }
                            },
                            "aria-hidden-body": {
                                impact: "critical",
                                messages: {
                                    pass: "No aria-hidden attribute is present on document body",
                                    fail: "aria-hidden=true should not be present on the document body"
                                }
                            },
                            "aria-level": {
                                impact: "serious",
                                messages: {
                                    pass: "aria-level values are valid",
                                    incomplete: "aria-level values greater than 6 are not supported in all screenreader and browser combinations"
                                }
                            },
                            "aria-prohibited-attr": {
                                impact: "serious",
                                messages: {
                                    pass: "ARIA attribute is allowed",
                                    fail: {
                                        hasRolePlural: '${data.prohibited} attributes cannot be used with role "${data.role}".',
                                        hasRoleSingular: '${data.prohibited} attribute cannot be used with role "${data.role}".',
                                        noRolePlural: "${data.prohibited} attributes cannot be used on a ${data.nodeName} with no valid role attribute.",
                                        noRoleSingular: "${data.prohibited} attribute cannot be used on a ${data.nodeName} with no valid role attribute."
                                    },
                                    incomplete: {
                                        hasRoleSingular: '${data.prohibited} attribute is not well supported with role "${data.role}".',
                                        hasRolePlural: '${data.prohibited} attributes are not well supported with role "${data.role}".',
                                        noRoleSingular: "${data.prohibited} attribute is not well supported on a ${data.nodeName} with no valid role attribute.",
                                        noRolePlural: "${data.prohibited} attributes are not well supported on a ${data.nodeName} with no valid role attribute."
                                    }
                                }
                            },
                            "aria-required-attr": {
                                impact: "critical",
                                messages: {
                                    pass: "All required ARIA attributes are present",
                                    fail: {
                                        singular: "Required ARIA attribute not present: ${data.values}",
                                        plural: "Required ARIA attributes not present: ${data.values}"
                                    }
                                }
                            },
                            "aria-required-children": {
                                impact: "critical",
                                messages: {
                                    pass: {
                                        default: "Required ARIA children are present",
                                        "aria-busy": "Element has an aria-busy attribute, so it is allowed to omit required children"
                                    },
                                    fail: {
                                        singular: "Required ARIA child role not present: ${data.values}",
                                        plural: "Required ARIA children role not present: ${data.values}",
                                        unallowed: "Element has children which are not allowed: ${data.values}"
                                    },
                                    incomplete: {
                                        singular: "Expecting ARIA child role to be added: ${data.values}",
                                        plural: "Expecting ARIA children role to be added: ${data.values}"
                                    }
                                }
                            },
                            "aria-required-parent": {
                                impact: "critical",
                                messages: {
                                    pass: "Required ARIA parent role present",
                                    fail: {
                                        singular: "Required ARIA parent role not present: ${data.values}",
                                        plural: "Required ARIA parents role not present: ${data.values}"
                                    }
                                }
                            },
                            "aria-roledescription": {
                                impact: "serious",
                                messages: {
                                    pass: "aria-roledescription used on a supported semantic role",
                                    incomplete: "Check that the aria-roledescription is announced by supported screen readers",
                                    fail: "Give the element a role that supports aria-roledescription"
                                }
                            },
                            "aria-unsupported-attr": {
                                impact: "critical",
                                messages: {
                                    pass: "ARIA attribute is supported",
                                    fail: "ARIA attribute is not widely supported in screen readers and assistive technologies: ${data.values}"
                                }
                            },
                            "aria-valid-attr-value": {
                                impact: "critical",
                                messages: {
                                    pass: "ARIA attribute values are valid",
                                    fail: {
                                        singular: "Invalid ARIA attribute value: ${data.values}",
                                        plural: "Invalid ARIA attribute values: ${data.values}"
                                    },
                                    incomplete: {
                                        noId: "ARIA attribute element ID does not exist on the page: ${data.needsReview}",
                                        noIdShadow: "ARIA attribute element ID does not exist on the page or is a descendant of a different shadow DOM tree: ${data.needsReview}",
                                        ariaCurrent: 'ARIA attribute value is invalid and will be treated as "aria-current=true": ${data.needsReview}',
                                        idrefs: "Unable to determine if ARIA attribute element ID exists on the page: ${data.needsReview}",
                                        empty: "ARIA attribute value is ignored while empty: ${data.needsReview}",
                                        controlsWithinPopup: "Unable to determine if aria-controls referenced ID exists on the page while using aria-haspopup: ${data.needsReview}"
                                    }
                                }
                            },
                            "aria-valid-attr": {
                                impact: "critical",
                                messages: {
                                    pass: "ARIA attribute name is valid",
                                    fail: {
                                        singular: "Invalid ARIA attribute name: ${data.values}",
                                        plural: "Invalid ARIA attribute names: ${data.values}"
                                    }
                                }
                            },
                            "braille-label-equivalent": {
                                impact: "serious",
                                messages: {
                                    pass: "aria-braillelabel is used on an element with accessible text",
                                    fail: "aria-braillelabel is used on an element with no accessible text",
                                    incomplete: "Unable to compute accessible text"
                                }
                            },
                            "braille-roledescription-equivalent": {
                                impact: "serious",
                                messages: {
                                    pass: "aria-brailleroledescription is used on an element with aria-roledescription",
                                    fail: {
                                        noRoleDescription: "aria-brailleroledescription is used on an element with no aria-roledescription",
                                        emptyRoleDescription: "aria-brailleroledescription is used on an element with an empty aria-roledescription"
                                    }
                                }
                            },
                            deprecatedrole: {
                                impact: "minor",
                                messages: {
                                    pass: "ARIA role is not deprecated",
                                    fail: "The role used is deprecated: ${data}"
                                }
                            },
                            fallbackrole: {
                                impact: "serious",
                                messages: {
                                    pass: "Only one role value used",
                                    fail: "Use only one role value, since fallback roles are not supported in older browsers",
                                    incomplete: "Use only role 'presentation' or 'none' since they are synonymous."
                                }
                            },
                            "has-global-aria-attribute": {
                                impact: "minor",
                                messages: {
                                    pass: {
                                        singular: "Element has global ARIA attribute: ${data.values}",
                                        plural: "Element has global ARIA attributes: ${data.values}"
                                    },
                                    fail: "Element does not have global ARIA attribute"
                                }
                            },
                            "has-widget-role": {
                                impact: "minor",
                                messages: {
                                    pass: "Element has a widget role.",
                                    fail: "Element does not have a widget role."
                                }
                            },
                            invalidrole: {
                                impact: "critical",
                                messages: {
                                    pass: "ARIA role is valid",
                                    fail: {
                                        singular: "Role must be one of the valid ARIA roles: ${data.values}",
                                        plural: "Roles must be one of the valid ARIA roles: ${data.values}"
                                    }
                                }
                            },
                            "is-element-focusable": {
                                impact: "minor",
                                messages: {
                                    pass: "Element is focusable.",
                                    fail: "Element is not focusable."
                                }
                            },
                            "no-implicit-explicit-label": {
                                impact: "serious",
                                messages: {
                                    pass: "There is no mismatch between a <label> and accessible name",
                                    incomplete: "Check that the <label> does not need be part of the ARIA ${data} field's name"
                                }
                            },
                            unsupportedrole: {
                                impact: "critical",
                                messages: {
                                    pass: "ARIA role is supported",
                                    fail: "The role used is not widely supported in screen readers and assistive technologies: ${data}"
                                }
                            },
                            "valid-scrollable-semantics": {
                                impact: "minor",
                                messages: {
                                    pass: "Element has valid semantics for an element in the focus order.",
                                    fail: "Element has invalid semantics for an element in the focus order."
                                }
                            },
                            "color-contrast-enhanced": {
                                impact: "serious",
                                messages: {
                                    pass: "Element has sufficient color contrast of ${data.contrastRatio}",
                                    fail: {
                                        default: "Element has insufficient color contrast of ${data.contrastRatio} (foreground color: ${data.fgColor}, background color: ${data.bgColor}, font size: ${data.fontSize}, font weight: ${data.fontWeight}). Expected contrast ratio of ${data.expectedContrastRatio}",
                                        fgOnShadowColor: "Element has insufficient color contrast of ${data.contrastRatio} between the foreground and shadow color (foreground color: ${data.fgColor}, text-shadow color: ${data.shadowColor}, font size: ${data.fontSize}, font weight: ${data.fontWeight}). Expected contrast ratio of ${data.expectedContrastRatio}",
                                        shadowOnBgColor: "Element has insufficient color contrast of ${data.contrastRatio} between the shadow color and background color (text-shadow color: ${data.shadowColor}, background color: ${data.bgColor}, font size: ${data.fontSize}, font weight: ${data.fontWeight}). Expected contrast ratio of ${data.expectedContrastRatio}"
                                    },
                                    incomplete: {
                                        default: "Unable to determine contrast ratio",
                                        bgImage: "Element's background color could not be determined due to a background image",
                                        bgGradient: "Element's background color could not be determined due to a background gradient",
                                        imgNode: "Element's background color could not be determined because element contains an image node",
                                        bgOverlap: "Element's background color could not be determined because it is overlapped by another element",
                                        fgAlpha: "Element's foreground color could not be determined because of alpha transparency",
                                        elmPartiallyObscured: "Element's background color could not be determined because it's partially obscured by another element",
                                        elmPartiallyObscuring: "Element's background color could not be determined because it partially overlaps other elements",
                                        outsideViewport: "Element's background color could not be determined because it's outside the viewport",
                                        equalRatio: "Element has a 1:1 contrast ratio with the background",
                                        shortTextContent: "Element content is too short to determine if it is actual text content",
                                        nonBmp: "Element content contains only non-text characters",
                                        pseudoContent: "Element's background color could not be determined due to a pseudo element"
                                    }
                                }
                            },
                            "color-contrast": {
                                impact: "serious",
                                messages: {
                                    pass: {
                                        default: "Element has sufficient color contrast of ${data.contrastRatio}",
                                        hidden: "Element is hidden"
                                    },
                                    fail: {
                                        default: "Element has insufficient color contrast of ${data.contrastRatio} (foreground color: ${data.fgColor}, background color: ${data.bgColor}, font size: ${data.fontSize}, font weight: ${data.fontWeight}). Expected contrast ratio of ${data.expectedContrastRatio}",
                                        fgOnShadowColor: "Element has insufficient color contrast of ${data.contrastRatio} between the foreground and shadow color (foreground color: ${data.fgColor}, text-shadow color: ${data.shadowColor}, font size: ${data.fontSize}, font weight: ${data.fontWeight}). Expected contrast ratio of ${data.expectedContrastRatio}",
                                        shadowOnBgColor: "Element has insufficient color contrast of ${data.contrastRatio} between the shadow color and background color (text-shadow color: ${data.shadowColor}, background color: ${data.bgColor}, font size: ${data.fontSize}, font weight: ${data.fontWeight}). Expected contrast ratio of ${data.expectedContrastRatio}"
                                    },
                                    incomplete: {
                                        default: "Unable to determine contrast ratio",
                                        bgImage: "Element's background color could not be determined due to a background image",
                                        bgGradient: "Element's background color could not be determined due to a background gradient",
                                        imgNode: "Element's background color could not be determined because element contains an image node",
                                        bgOverlap: "Element's background color could not be determined because it is overlapped by another element",
                                        complexTextShadows: "Element's contrast could not be determined because it uses complex text shadows",
                                        fgAlpha: "Element's foreground color could not be determined because of alpha transparency",
                                        elmPartiallyObscured: "Element's background color could not be determined because it's partially obscured by another element",
                                        elmPartiallyObscuring: "Element's background color could not be determined because it partially overlaps other elements",
                                        outsideViewport: "Element's background color could not be determined because it's outside the viewport",
                                        equalRatio: "Element has a 1:1 contrast ratio with the background",
                                        shortTextContent: "Element content is too short to determine if it is actual text content",
                                        nonBmp: "Element content contains only non-text characters",
                                        pseudoContent: "Element's background color could not be determined due to a pseudo element"
                                    }
                                }
                            },
                            "link-in-text-block-style": {
                                impact: "serious",
                                messages: {
                                    pass: "Links can be distinguished from surrounding text by visual styling",
                                    incomplete: {
                                        default: "Check if the link needs styling to distinguish it from nearby text",
                                        pseudoContent: "Check if the link's pseudo style is sufficient to distinguish it from the surrounding text"
                                    },
                                    fail: "The link has no styling (such as underline) to distinguish it from the surrounding text"
                                }
                            },
                            "link-in-text-block": {
                                impact: "serious",
                                messages: {
                                    pass: "Links can be distinguished from surrounding text in some way other than by color",
                                    fail: {
                                        fgContrast: "The link has insufficient color contrast of ${data.contrastRatio}:1 with the surrounding text. (Minimum contrast is ${data.requiredContrastRatio}:1, link text: ${data.nodeColor}, surrounding text: ${data.parentColor})",
                                        bgContrast: "The link background has insufficient color contrast of ${data.contrastRatio} (Minimum contrast is ${data.requiredContrastRatio}:1, link background color: ${data.nodeBackgroundColor}, surrounding background color: ${data.parentBackgroundColor})"
                                    },
                                    incomplete: {
                                        default: "Element's foreground contrast ratio could not be determined",
                                        bgContrast: "Element's background contrast ratio could not be determined",
                                        bgImage: "Element's contrast ratio could not be determined due to a background image",
                                        bgGradient: "Element's contrast ratio could not be determined due to a background gradient",
                                        imgNode: "Element's contrast ratio could not be determined because element contains an image node",
                                        bgOverlap: "Element's contrast ratio could not be determined because of element overlap"
                                    }
                                }
                            },
                            "autocomplete-appropriate": {
                                impact: "serious",
                                messages: {
                                    pass: "The autocomplete value is on an appropriate element",
                                    fail: "The autocomplete value is inappropriate for this type of input"
                                }
                            },
                            "autocomplete-valid": {
                                impact: "serious",
                                messages: {
                                    pass: "the autocomplete attribute is correctly formatted",
                                    fail: "the autocomplete attribute is incorrectly formatted",
                                    incomplete: "the autocomplete attribute has a non-standard value. Check whether any standard value could be used instead."
                                }
                            },
                            accesskeys: {
                                impact: "serious",
                                messages: {
                                    pass: "Accesskey attribute value is unique",
                                    fail: "Document has multiple elements with the same accesskey"
                                }
                            },
                            "focusable-content": {
                                impact: "serious",
                                messages: {
                                    pass: "Element contains focusable elements",
                                    fail: "Element should have focusable content"
                                }
                            },
                            "focusable-disabled": {
                                impact: "serious",
                                messages: {
                                    pass: "No focusable elements contained within element",
                                    incomplete: "Check if the focusable elements immediately move the focus indicator",
                                    fail: "Focusable content should be disabled or be removed from the DOM"
                                }
                            },
                            "focusable-element": {
                                impact: "serious",
                                messages: {
                                    pass: "Element is focusable",
                                    fail: "Element should be focusable"
                                }
                            },
                            "focusable-modal-open": {
                                impact: "serious",
                                messages: {
                                    pass: "No focusable elements while a modal is open",
                                    incomplete: "Check that focusable elements are not tabbable in the current state"
                                }
                            },
                            "focusable-no-name": {
                                impact: "serious",
                                messages: {
                                    pass: "Element is not in tab order or has accessible text",
                                    fail: "Element is in tab order and does not have accessible text",
                                    incomplete: "Unable to determine if element has an accessible name"
                                }
                            },
                            "focusable-not-tabbable": {
                                impact: "serious",
                                messages: {
                                    pass: "No focusable elements contained within element",
                                    incomplete: "Check if the focusable elements immediately move the focus indicator",
                                    fail: 'Focusable content should have tabindex="-1" or be removed from the DOM'
                                }
                            },
                            "frame-focusable-content": {
                                impact: "serious",
                                messages: {
                                    pass: "Element does not have focusable descendants",
                                    fail: "Element has focusable descendants",
                                    incomplete: "Could not determine if element has descendants"
                                }
                            },
                            "landmark-is-top-level": {
                                impact: "moderate",
                                messages: {
                                    pass: "The ${data.role} landmark is at the top level.",
                                    fail: "The ${data.role} landmark is contained in another landmark."
                                }
                            },
                            "no-focusable-content": {
                                impact: "serious",
                                messages: {
                                    pass: "Element does not have focusable descendants",
                                    fail: {
                                        default: "Element has focusable descendants",
                                        notHidden: 'Using a negative tabindex on an element inside an interactive control does not prevent assistive technologies from focusing the element (even with aria-hidden="true")'
                                    },
                                    incomplete: "Could not determine if element has descendants"
                                }
                            },
                            "page-has-heading-one": {
                                impact: "moderate",
                                messages: {
                                    pass: "Page has at least one level-one heading",
                                    fail: "Page must have a level-one heading"
                                }
                            },
                            "page-has-main": {
                                impact: "moderate",
                                messages: {
                                    pass: "Document has at least one main landmark",
                                    fail: "Document does not have a main landmark"
                                }
                            },
                            "page-no-duplicate-banner": {
                                impact: "moderate",
                                messages: {
                                    pass: "Document does not have more than one banner landmark",
                                    fail: "Document has more than one banner landmark"
                                }
                            },
                            "page-no-duplicate-contentinfo": {
                                impact: "moderate",
                                messages: {
                                    pass: "Document does not have more than one contentinfo landmark",
                                    fail: "Document has more than one contentinfo landmark"
                                }
                            },
                            "page-no-duplicate-main": {
                                impact: "moderate",
                                messages: {
                                    pass: "Document does not have more than one main landmark",
                                    fail: "Document has more than one main landmark"
                                }
                            },
                            tabindex: {
                                impact: "serious",
                                messages: {
                                    pass: "Element does not have a tabindex greater than 0",
                                    fail: "Element has a tabindex greater than 0"
                                }
                            },
                            "alt-space-value": {
                                impact: "critical",
                                messages: {
                                    pass: "Element has a valid alt attribute value",
                                    fail: "Element has an alt attribute containing only a space character, which is not ignored by all screen readers"
                                }
                            },
                            "duplicate-img-label": {
                                impact: "minor",
                                messages: {
                                    pass: "Element does not duplicate existing text in <img> alt text",
                                    fail: "Element contains <img> element with alt text that duplicates existing text"
                                }
                            },
                            "explicit-label": {
                                impact: "critical",
                                messages: {
                                    pass: "Form element has an explicit <label>",
                                    fail: "Form element does not have an explicit <label>",
                                    incomplete: "Unable to determine if form element has an explicit <label>"
                                }
                            },
                            "help-same-as-label": {
                                impact: "minor",
                                messages: {
                                    pass: "Help text (title or aria-describedby) does not duplicate label text",
                                    fail: "Help text (title or aria-describedby) text is the same as the label text"
                                }
                            },
                            "hidden-explicit-label": {
                                impact: "critical",
                                messages: {
                                    pass: "Form element has a visible explicit <label>",
                                    fail: "Form element has explicit <label> that is hidden",
                                    incomplete: "Unable to determine if form element has explicit <label> that is hidden"
                                }
                            },
                            "implicit-label": {
                                impact: "critical",
                                messages: {
                                    pass: "Form element has an implicit (wrapped) <label>",
                                    fail: "Form element does not have an implicit (wrapped) <label>",
                                    incomplete: "Unable to determine if form element has an implicit (wrapped} <label>"
                                }
                            },
                            "label-content-name-mismatch": {
                                impact: "serious",
                                messages: {
                                    pass: "Element contains visible text as part of it's accessible name",
                                    fail: "Text inside the element is not included in the accessible name"
                                }
                            },
                            "multiple-label": {
                                impact: "moderate",
                                messages: {
                                    pass: "Form field does not have multiple label elements",
                                    incomplete: "Multiple label elements is not widely supported in assistive technologies. Ensure the first label contains all necessary information."
                                }
                            },
                            "title-only": {
                                impact: "serious",
                                messages: {
                                    pass: "Form element does not solely use title attribute for its label",
                                    fail: "Only title used to generate label for form element"
                                }
                            },
                            "landmark-is-unique": {
                                impact: "moderate",
                                messages: {
                                    pass: "Landmarks must have a unique role or role/label/title (i.e. accessible name) combination",
                                    fail: "The landmark must have a unique aria-label, aria-labelledby, or title to make landmarks distinguishable"
                                }
                            },
                            "has-lang": {
                                impact: "serious",
                                messages: {
                                    pass: "The <html> element has a lang attribute",
                                    fail: {
                                        noXHTML: "The xml:lang attribute is not valid on HTML pages, use the lang attribute.",
                                        noLang: "The <html> element does not have a lang attribute"
                                    }
                                }
                            },
                            "valid-lang": {
                                impact: "serious",
                                messages: {
                                    pass: "Value of lang attribute is included in the list of valid languages",
                                    fail: "Value of lang attribute not included in the list of valid languages"
                                }
                            },
                            "xml-lang-mismatch": {
                                impact: "moderate",
                                messages: {
                                    pass: "Lang and xml:lang attributes have the same base language",
                                    fail: "Lang and xml:lang attributes do not have the same base language"
                                }
                            },
                            dlitem: {
                                impact: "serious",
                                messages: {
                                    pass: "Description list item has a <dl> parent element",
                                    fail: "Description list item does not have a <dl> parent element"
                                }
                            },
                            listitem: {
                                impact: "serious",
                                messages: {
                                    pass: 'List item has a <ul>, <ol> or role="list" parent element',
                                    fail: {
                                        default: "List item does not have a <ul>, <ol> parent element",
                                        roleNotValid: 'List item parent element has a role that is not role="list"'
                                    }
                                }
                            },
                            "only-dlitems": {
                                impact: "serious",
                                messages: {
                                    pass: "dl element only has direct children that are allowed inside; <dt>, <dd>, or <div> elements",
                                    fail: "dl element has direct children that are not allowed: ${data.values}"
                                }
                            },
                            "only-listitems": {
                                impact: "serious",
                                messages: {
                                    pass: "List element only has direct children that are allowed inside <li> elements",
                                    fail: "List element has direct children that are not allowed: ${data.values}"
                                }
                            },
                            "structured-dlitems": {
                                impact: "serious",
                                messages: {
                                    pass: "When not empty, element has both <dt> and <dd> elements",
                                    fail: "When not empty, element does not have at least one <dt> element followed by at least one <dd> element"
                                }
                            },
                            caption: {
                                impact: "critical",
                                messages: {
                                    pass: "The multimedia element has a captions track",
                                    incomplete: "Check that captions is available for the element"
                                }
                            },
                            "frame-tested": {
                                impact: "critical",
                                messages: {
                                    pass: "The iframe was tested with axe-core",
                                    fail: "The iframe could not be tested with axe-core",
                                    incomplete: "The iframe still has to be tested with axe-core"
                                }
                            },
                            "no-autoplay-audio": {
                                impact: "moderate",
                                messages: {
                                    pass: "<video> or <audio> does not output audio for more than allowed duration or has controls mechanism",
                                    fail: "<video> or <audio> outputs audio for more than allowed duration and does not have a controls mechanism",
                                    incomplete: "Check that the <video> or <audio> does not output audio for more than allowed duration or provides a controls mechanism"
                                }
                            },
                            "css-orientation-lock": {
                                impact: "serious",
                                messages: {
                                    pass: "Display is operable, and orientation lock does not exist",
                                    fail: "CSS Orientation lock is applied, and makes display inoperable",
                                    incomplete: "CSS Orientation lock cannot be determined"
                                }
                            },
                            "meta-viewport-large": {
                                impact: "minor",
                                messages: {
                                    pass: "<meta> tag does not prevent significant zooming on mobile devices",
                                    fail: "<meta> tag limits zooming on mobile devices"
                                }
                            },
                            "meta-viewport": {
                                impact: "critical",
                                messages: {
                                    pass: "<meta> tag does not disable zooming on mobile devices",
                                    fail: "${data} on <meta> tag disables zooming on mobile devices"
                                }
                            },
                            "target-offset": {
                                impact: "serious",
                                messages: {
                                    pass: {
                                        default: "Target has sufficient space from its closest neighbors. Safe clickable space has a diameter of ${data.closestOffset}px which is at least ${data.minOffset}px.",
                                        large: "Target far exceeds the minimum size of ${data.minOffset}px."
                                    },
                                    fail: "Target has insufficient space to its closest neighbors. Safe clickable space has a diameter of ${data.closestOffset}px instead of at least ${data.minOffset}px.",
                                    incomplete: {
                                        default: "Element with negative tabindex has insufficient space to its closest neighbors. Safe clickable space has a diameter of ${data.closestOffset}px instead of at least ${data.minOffset}px. Is this a target?",
                                        nonTabbableNeighbor: "Target has insufficient space to its closest neighbors. Safe clickable space has a diameter of ${data.closestOffset}px instead of at least ${data.minOffset}px. Is the neighbor a target?",
                                        tooManyRects: "Could not get the target size because there are too many overlapping elements"
                                    }
                                }
                            },
                            "target-size": {
                                impact: "serious",
                                messages: {
                                    pass: {
                                        default: "Control has sufficient size (${data.width}px by ${data.height}px, should be at least ${data.minSize}px by ${data.minSize}px)",
                                        obscured: "Control is ignored because it is fully obscured and thus not clickable",
                                        large: "Target far exceeds the minimum size of ${data.minSize}px."
                                    },
                                    fail: {
                                        default: "Target has insufficient size (${data.width}px by ${data.height}px, should be at least ${data.minSize}px by ${data.minSize}px)",
                                        partiallyObscured: "Target has insufficient size because it is partially obscured (smallest space is ${data.width}px by ${data.height}px, should be at least ${data.minSize}px by ${data.minSize}px)"
                                    },
                                    incomplete: {
                                        default: "Element with negative tabindex has insufficient size (${data.width}px by ${data.height}px, should be at least ${data.minSize}px by ${data.minSize}px). Is this a target?",
                                        contentOverflow: "Element size could not be accurately determined due to overflow content",
                                        partiallyObscured: "Element with negative tabindex has insufficient size because it is partially obscured (smallest space is ${data.width}px by ${data.height}px, should be at least ${data.minSize}px by ${data.minSize}px). Is this a target?",
                                        partiallyObscuredNonTabbable: "Target has insufficient size because it is partially obscured by a neighbor with negative tabindex (smallest space is ${data.width}px by ${data.height}px, should be at least ${data.minSize}px by ${data.minSize}px). Is the neighbor a target?",
                                        tooManyRects: "Could not get the target size because there are too many overlapping elements"
                                    }
                                }
                            },
                            "header-present": {
                                impact: "serious",
                                messages: {
                                    pass: "Page has a heading",
                                    fail: "Page does not have a heading"
                                }
                            },
                            "heading-order": {
                                impact: "moderate",
                                messages: {
                                    pass: "Heading order valid",
                                    fail: "Heading order invalid",
                                    incomplete: "Unable to determine previous heading"
                                }
                            },
                            "identical-links-same-purpose": {
                                impact: "minor",
                                messages: {
                                    pass: "There are no other links with the same name, that go to a different URL",
                                    incomplete: "Check that links have the same purpose, or are intentionally ambiguous."
                                }
                            },
                            "internal-link-present": {
                                impact: "serious",
                                messages: {
                                    pass: "Valid skip link found",
                                    fail: "No valid skip link found"
                                }
                            },
                            landmark: {
                                impact: "serious",
                                messages: {
                                    pass: "Page has a landmark region",
                                    fail: "Page does not have a landmark region"
                                }
                            },
                            "meta-refresh-no-exceptions": {
                                impact: "minor",
                                messages: {
                                    pass: "<meta> tag does not immediately refresh the page",
                                    fail: "<meta> tag forces timed refresh of page"
                                }
                            },
                            "meta-refresh": {
                                impact: "critical",
                                messages: {
                                    pass: "<meta> tag does not immediately refresh the page",
                                    fail: "<meta> tag forces timed refresh of page (less than 20 hours)"
                                }
                            },
                            "p-as-heading": {
                                impact: "serious",
                                messages: {
                                    pass: "<p> elements are not styled as headings",
                                    fail: "Heading elements should be used instead of styled <p> elements",
                                    incomplete: "Unable to determine if <p> elements are styled as headings"
                                }
                            },
                            region: {
                                impact: "moderate",
                                messages: {
                                    pass: "All page content is contained by landmarks",
                                    fail: "Some page content is not contained by landmarks"
                                }
                            },
                            "skip-link": {
                                impact: "moderate",
                                messages: {
                                    pass: "Skip link target exists",
                                    incomplete: "Skip link target should become visible on activation",
                                    fail: "No skip link target"
                                }
                            },
                            "unique-frame-title": {
                                impact: "serious",
                                messages: {
                                    pass: "Element's title attribute is unique",
                                    fail: "Element's title attribute is not unique"
                                }
                            },
                            "duplicate-id-active": {
                                impact: "serious",
                                messages: {
                                    pass: "Document has no active elements that share the same id attribute",
                                    fail: "Document has active elements with the same id attribute: ${data}"
                                }
                            },
                            "duplicate-id-aria": {
                                impact: "critical",
                                messages: {
                                    pass: "Document has no elements referenced with ARIA or labels that share the same id attribute",
                                    fail: "Document has multiple elements referenced with ARIA with the same id attribute: ${data}"
                                }
                            },
                            "duplicate-id": {
                                impact: "minor",
                                messages: {
                                    pass: "Document has no static elements that share the same id attribute",
                                    fail: "Document has multiple static elements with the same id attribute: ${data}"
                                }
                            },
                            "aria-label": {
                                impact: "serious",
                                messages: {
                                    pass: "aria-label attribute exists and is not empty",
                                    fail: "aria-label attribute does not exist or is empty"
                                }
                            },
                            "aria-labelledby": {
                                impact: "serious",
                                messages: {
                                    pass: "aria-labelledby attribute exists and references elements that are visible to screen readers",
                                    fail: "aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty",
                                    incomplete: "Ensure aria-labelledby references an existing element"
                                }
                            },
                            "avoid-inline-spacing": {
                                impact: "serious",
                                messages: {
                                    pass: "No inline styles with '!important' that affect text spacing has been specified",
                                    fail: {
                                        singular: "Remove '!important' from inline style ${data.values}, as overriding this is not supported by most browsers",
                                        plural: "Remove '!important' from inline styles ${data.values}, as overriding this is not supported by most browsers"
                                    }
                                }
                            },
                            "button-has-visible-text": {
                                impact: "critical",
                                messages: {
                                    pass: "Element has inner text that is visible to screen readers",
                                    fail: "Element does not have inner text that is visible to screen readers",
                                    incomplete: "Unable to determine if element has children"
                                }
                            },
                            "doc-has-title": {
                                impact: "serious",
                                messages: {
                                    pass: "Document has a non-empty <title> element",
                                    fail: "Document does not have a non-empty <title> element"
                                }
                            },
                            exists: {
                                impact: "minor",
                                messages: {
                                    pass: "Element does not exist",
                                    incomplete: "Element exists"
                                }
                            },
                            "has-alt": {
                                impact: "critical",
                                messages: {
                                    pass: "Element has an alt attribute",
                                    fail: "Element does not have an alt attribute"
                                }
                            },
                            "has-visible-text": {
                                impact: "minor",
                                messages: {
                                    pass: "Element has text that is visible to screen readers",
                                    fail: "Element does not have text that is visible to screen readers",
                                    incomplete: "Unable to determine if element has children"
                                }
                            },
                            "important-letter-spacing": {
                                impact: "serious",
                                messages: {
                                    pass: "Letter-spacing in the style attribute is not set to !important, or meets the minimum",
                                    fail: "letter-spacing in the style attribute must not use !important, or be at ${data.minValue}em (current ${data.value}em)"
                                }
                            },
                            "important-line-height": {
                                impact: "serious",
                                messages: {
                                    pass: "line-height in the style attribute is not set to !important, or meets the minimum",
                                    fail: "line-height in the style attribute must not use !important, or be at ${data.minValue}em (current ${data.value}em)"
                                }
                            },
                            "important-word-spacing": {
                                impact: "serious",
                                messages: {
                                    pass: "word-spacing in the style attribute is not set to !important, or meets the minimum",
                                    fail: "word-spacing in the style attribute must not use !important, or be at ${data.minValue}em (current ${data.value}em)"
                                }
                            },
                            "is-on-screen": {
                                impact: "serious",
                                messages: {
                                    pass: "Element is not visible",
                                    fail: "Element is visible"
                                }
                            },
                            "non-empty-alt": {
                                impact: "critical",
                                messages: {
                                    pass: "Element has a non-empty alt attribute",
                                    fail: {
                                        noAttr: "Element has no alt attribute",
                                        emptyAttr: "Element has an empty alt attribute"
                                    }
                                }
                            },
                            "non-empty-if-present": {
                                impact: "critical",
                                messages: {
                                    pass: {
                                        default: "Element does not have a value attribute",
                                        "has-label": "Element has a non-empty value attribute"
                                    },
                                    fail: "Element has a value attribute and the value attribute is empty"
                                }
                            },
                            "non-empty-placeholder": {
                                impact: "serious",
                                messages: {
                                    pass: "Element has a placeholder attribute",
                                    fail: {
                                        noAttr: "Element has no placeholder attribute",
                                        emptyAttr: "Element has an empty placeholder attribute"
                                    }
                                }
                            },
                            "non-empty-title": {
                                impact: "serious",
                                messages: {
                                    pass: "Element has a title attribute",
                                    fail: {
                                        noAttr: "Element has no title attribute",
                                        emptyAttr: "Element has an empty title attribute"
                                    }
                                }
                            },
                            "non-empty-value": {
                                impact: "critical",
                                messages: {
                                    pass: "Element has a non-empty value attribute",
                                    fail: {
                                        noAttr: "Element has no value attribute",
                                        emptyAttr: "Element has an empty value attribute"
                                    }
                                }
                            },
                            "presentational-role": {
                                impact: "minor",
                                messages: {
                                    pass: 'Element\'s default semantics were overridden with role="${data.role}"',
                                    fail: {
                                        default: 'Element\'s default semantics were not overridden with role="none" or role="presentation"',
                                        globalAria: "Element's role is not presentational because it has a global ARIA attribute",
                                        focusable: "Element's role is not presentational because it is focusable",
                                        both: "Element's role is not presentational because it has a global ARIA attribute and is focusable",
                                        iframe: 'Using the "title" attribute on an ${data.nodeName} element with a presentational role behaves inconsistently between screen readers'
                                    }
                                }
                            },
                            "role-none": {
                                impact: "minor",
                                messages: {
                                    pass: 'Element\'s default semantics were overridden with role="none"',
                                    fail: 'Element\'s default semantics were not overridden with role="none"'
                                }
                            },
                            "role-presentation": {
                                impact: "minor",
                                messages: {
                                    pass: 'Element\'s default semantics were overridden with role="presentation"',
                                    fail: 'Element\'s default semantics were not overridden with role="presentation"'
                                }
                            },
                            "svg-non-empty-title": {
                                impact: "serious",
                                messages: {
                                    pass: "Element has a child that is a title",
                                    fail: {
                                        noTitle: "Element has no child that is a title",
                                        emptyTitle: "Element child title is empty"
                                    },
                                    incomplete: "Unable to determine element has a child that is a title"
                                }
                            },
                            "caption-faked": {
                                impact: "serious",
                                messages: {
                                    pass: "The first row of a table is not used as a caption",
                                    fail: "The first child of the table should be a caption instead of a table cell"
                                }
                            },
                            "html5-scope": {
                                impact: "moderate",
                                messages: {
                                    pass: "Scope attribute is only used on table header elements (<th>)",
                                    fail: "In HTML 5, scope attributes may only be used on table header elements (<th>)"
                                }
                            },
                            "same-caption-summary": {
                                impact: "minor",
                                messages: {
                                    pass: "Content of summary attribute and <caption> are not duplicated",
                                    fail: "Content of summary attribute and <caption> element are identical",
                                    incomplete: "Unable to determine if <table> element has a caption"
                                }
                            },
                            "scope-value": {
                                impact: "critical",
                                messages: {
                                    pass: "Scope attribute is used correctly",
                                    fail: "The value of the scope attribute may only be 'row' or 'col'"
                                }
                            },
                            "td-has-header": {
                                impact: "critical",
                                messages: {
                                    pass: "All non-empty data cells have table headers",
                                    fail: "Some non-empty data cells do not have table headers"
                                }
                            },
                            "td-headers-attr": {
                                impact: "serious",
                                messages: {
                                    pass: "The headers attribute is exclusively used to refer to other cells in the table",
                                    incomplete: "The headers attribute is empty",
                                    fail: "The headers attribute is not exclusively used to refer to other cells in the table"
                                }
                            },
                            "th-has-data-cells": {
                                impact: "serious",
                                messages: {
                                    pass: "All table header cells refer to data cells",
                                    fail: "Not all table header cells refer to data cells",
                                    incomplete: "Table data cells are missing or empty"
                                }
                            },
                            "hidden-content": {
                                impact: "minor",
                                messages: {
                                    pass: "All content on the page has been analyzed.",
                                    fail: "There were problems analyzing the content on this page.",
                                    incomplete: "There is hidden content on the page that was not analyzed. You will need to trigger the display of this content in order to analyze it."
                                }
                            }
                        },
                        failureSummaries: {
                            any: {
                                failureMessage: function(it) {
                                    var out = "Fix any of the following:";
                                    var arr1 = it;
                                    if (arr1) {
                                        var value, i1 = -1, l1 = arr1.length - 1;
                                        while (i1 < l1) {
                                            value = arr1[i1 += 1];
                                            out += "\n  " + value.split("\n").join("\n  ");
                                        }
                                    }
                                    return out;
                                }
                            },
                            none: {
                                failureMessage: function(it) {
                                    var out = "Fix all of the following:";
                                    var arr1 = it;
                                    if (arr1) {
                                        var value, i1 = -1, l1 = arr1.length - 1;
                                        while (i1 < l1) {
                                            value = arr1[i1 += 1];
                                            out += "\n  " + value.split("\n").join("\n  ");
                                        }
                                    }
                                    return out;
                                }
                            }
                        },
                        incompleteFallbackMessage: "axe couldn't tell the reason. Time to break out the element inspector!"
                    },
                    rules: [ {
                        id: "accesskeys",
                        impact: "serious",
                        selector: "[accesskey]",
                        excludeHidden: false,
                        tags: [ "cat.keyboard", "best-practice" ],
                        all: [],
                        any: [],
                        none: [ "accesskeys" ]
                    }, {
                        id: "area-alt",
                        impact: "critical",
                        selector: "map area[href]",
                        excludeHidden: false,
                        tags: [ "cat.text-alternatives", "wcag2a", "wcag244", "wcag412", "section508", "section508.22.a", "TTv5", "TT6.a", "EN-301-549", "EN-9.2.4.4", "EN-9.4.1.2", "ACT" ],
                        actIds: [ "c487ae" ],
                        all: [],
                        any: [ {
                            options: {
                                attribute: "alt"
                            },
                            id: "non-empty-alt"
                        }, "aria-label", "aria-labelledby", {
                            options: {
                                attribute: "title"
                            },
                            id: "non-empty-title"
                        } ],
                        none: []
                    }, {
                        id: "aria-allowed-attr",
                        impact: "critical",
                        matches: "aria-allowed-attr-matches",
                        tags: [ "cat.aria", "wcag2a", "wcag412", "EN-301-549", "EN-9.4.1.2" ],
                        actIds: [ "5c01ea" ],
                        all: [ {
                            options: {
                                validTreeRowAttrs: [ "aria-posinset", "aria-setsize", "aria-expanded", "aria-level" ]
                            },
                            id: "aria-allowed-attr"
                        } ],
                        any: [],
                        none: [ "aria-unsupported-attr" ]
                    }, {
                        id: "aria-allowed-role",
                        impact: "minor",
                        excludeHidden: false,
                        selector: "[role]",
                        matches: "aria-allowed-role-matches",
                        tags: [ "cat.aria", "best-practice" ],
                        all: [],
                        any: [ {
                            options: {
                                allowImplicit: true,
                                ignoredTags: []
                            },
                            id: "aria-allowed-role"
                        } ],
                        none: []
                    }, {
                        id: "aria-braille-equivalent",
                        reviewOnFail: true,
                        impact: "serious",
                        selector: "[aria-brailleroledescription], [aria-braillelabel]",
                        tags: [ "cat.aria", "wcag2a", "wcag412", "EN-301-549", "EN-9.4.1.2" ],
                        all: [ "braille-roledescription-equivalent", "braille-label-equivalent" ],
                        any: [],
                        none: []
                    }, {
                        id: "aria-command-name",
                        impact: "serious",
                        selector: '[role="link"], [role="button"], [role="menuitem"]',
                        matches: "no-naming-method-matches",
                        tags: [ "cat.aria", "wcag2a", "wcag412", "TTv5", "TT6.a", "EN-301-549", "EN-9.4.1.2", "ACT" ],
                        actIds: [ "97a4e1" ],
                        all: [],
                        any: [ "has-visible-text", "aria-label", "aria-labelledby", {
                            options: {
                                attribute: "title"
                            },
                            id: "non-empty-title"
                        } ],
                        none: []
                    }, {
                        id: "aria-conditional-attr",
                        impact: "serious",
                        matches: "aria-allowed-attr-matches",
                        tags: [ "cat.aria", "wcag2a", "wcag412", "EN-301-549", "EN-9.4.1.2" ],
                        actIds: [ "5c01ea" ],
                        all: [ {
                            options: {
                                invalidTableRowAttrs: [ "aria-posinset", "aria-setsize", "aria-expanded", "aria-level" ]
                            },
                            id: "aria-conditional-attr"
                        } ],
                        any: [],
                        none: []
                    }, {
                        id: "aria-deprecated-role",
                        impact: "minor",
                        selector: "[role]",
                        matches: "no-empty-role-matches",
                        tags: [ "cat.aria", "wcag2a", "wcag412", "EN-301-549", "EN-9.4.1.2" ],
                        actIds: [ "674b10" ],
                        all: [],
                        any: [],
                        none: [ "deprecatedrole" ]
                    }, {
                        id: "aria-dialog-name",
                        impact: "serious",
                        selector: '[role="dialog"], [role="alertdialog"]',
                        matches: "no-naming-method-matches",
                        tags: [ "cat.aria", "best-practice" ],
                        all: [],
                        any: [ "aria-label", "aria-labelledby", {
                            options: {
                                attribute: "title"
                            },
                            id: "non-empty-title"
                        } ],
                        none: []
                    }, {
                        id: "aria-hidden-body",
                        impact: "critical",
                        selector: "body",
                        excludeHidden: false,
                        matches: "is-initiator-matches",
                        tags: [ "cat.aria", "wcag2a", "wcag131", "wcag412", "EN-301-549", "EN-9.1.3.1", "EN-9.4.1.2" ],
                        all: [],
                        any: [ "aria-hidden-body" ],
                        none: []
                    }, {
                        id: "aria-hidden-focus",
                        impact: "serious",
                        selector: '[aria-hidden="true"]',
                        matches: "aria-hidden-focus-matches",
                        excludeHidden: false,
                        tags: [ "cat.name-role-value", "wcag2a", "wcag412", "TTv5", "TT6.a", "EN-301-549", "EN-9.4.1.2" ],
                        actIds: [ "6cfa84" ],
                        all: [ "focusable-modal-open", "focusable-disabled", "focusable-not-tabbable" ],
                        any: [],
                        none: []
                    }, {
                        id: "aria-input-field-name",
                        impact: "serious",
                        selector: '[role="combobox"], [role="listbox"], [role="searchbox"], [role="slider"], [role="spinbutton"], [role="textbox"]',
                        matches: "no-naming-method-matches",
                        tags: [ "cat.aria", "wcag2a", "wcag412", "TTv5", "TT5.c", "EN-301-549", "EN-9.4.1.2", "ACT" ],
                        actIds: [ "e086e5" ],
                        all: [],
                        any: [ "aria-label", "aria-labelledby", {
                            options: {
                                attribute: "title"
                            },
                            id: "non-empty-title"
                        } ],
                        none: [ "no-implicit-explicit-label" ]
                    }, {
                        id: "aria-meter-name",
                        impact: "serious",
                        selector: '[role="meter"]',
                        matches: "no-naming-method-matches",
                        tags: [ "cat.aria", "wcag2a", "wcag111", "EN-301-549", "EN-9.1.1.1" ],
                        all: [],
                        any: [ "aria-label", "aria-labelledby", {
                            options: {
                                attribute: "title"
                            },
                            id: "non-empty-title"
                        } ],
                        none: []
                    }, {
                        id: "aria-progressbar-name",
                        impact: "serious",
                        selector: '[role="progressbar"]',
                        matches: "no-naming-method-matches",
                        tags: [ "cat.aria", "wcag2a", "wcag111", "EN-301-549", "EN-9.1.1.1" ],
                        all: [],
                        any: [ "aria-label", "aria-labelledby", {
                            options: {
                                attribute: "title"
                            },
                            id: "non-empty-title"
                        } ],
                        none: []
                    }, {
                        id: "aria-prohibited-attr",
                        impact: "serious",
                        matches: "aria-allowed-attr-matches",
                        tags: [ "cat.aria", "wcag2a", "wcag412", "EN-301-549", "EN-9.4.1.2" ],
                        actIds: [ "5c01ea" ],
                        all: [],
                        any: [],
                        none: [ {
                            options: {
                                elementsAllowedAriaLabel: [ "applet", "input" ]
                            },
                            id: "aria-prohibited-attr"
                        } ]
                    }, {
                        id: "aria-required-attr",
                        impact: "critical",
                        selector: "[role]",
                        tags: [ "cat.aria", "wcag2a", "wcag412", "EN-301-549", "EN-9.4.1.2" ],
                        actIds: [ "4e8ab6" ],
                        all: [],
                        any: [ "aria-required-attr" ],
                        none: []
                    }, {
                        id: "aria-required-children",
                        impact: "critical",
                        selector: "[role]",
                        matches: "aria-required-children-matches",
                        tags: [ "cat.aria", "wcag2a", "wcag131", "EN-301-549", "EN-9.1.3.1" ],
                        actIds: [ "bc4a75", "ff89c9" ],
                        all: [],
                        any: [ {
                            options: {
                                reviewEmpty: [ "doc-bibliography", "doc-endnotes", "grid", "list", "listbox", "menu", "menubar", "table", "tablist", "tree", "treegrid", "rowgroup" ]
                            },
                            id: "aria-required-children"
                        } ],
                        none: []
                    }, {
                        id: "aria-required-parent",
                        impact: "critical",
                        selector: "[role]",
                        matches: "aria-required-parent-matches",
                        tags: [ "cat.aria", "wcag2a", "wcag131", "EN-301-549", "EN-9.1.3.1" ],
                        actIds: [ "ff89c9" ],
                        all: [],
                        any: [ {
                            options: {
                                ownGroupRoles: [ "listitem", "treeitem" ]
                            },
                            id: "aria-required-parent"
                        } ],
                        none: []
                    }, {
                        id: "aria-roledescription",
                        impact: "serious",
                        selector: "[aria-roledescription]",
                        tags: [ "cat.aria", "wcag2a", "wcag412", "EN-301-549", "EN-9.4.1.2", "deprecated" ],
                        enabled: false,
                        all: [],
                        any: [ {
                            options: {
                                supportedRoles: [ "button", "img", "checkbox", "radio", "combobox", "menuitemcheckbox", "menuitemradio" ]
                            },
                            id: "aria-roledescription"
                        } ],
                        none: []
                    }, {
                        id: "aria-roles",
                        impact: "critical",
                        selector: "[role]",
                        matches: "no-empty-role-matches",
                        tags: [ "cat.aria", "wcag2a", "wcag412", "EN-301-549", "EN-9.4.1.2" ],
                        actIds: [ "674b10" ],
                        all: [],
                        any: [],
                        none: [ "invalidrole", "abstractrole", "unsupportedrole" ]
                    }, {
                        id: "aria-text",
                        impact: "serious",
                        selector: "[role=text]",
                        tags: [ "cat.aria", "best-practice" ],
                        all: [],
                        any: [ "no-focusable-content" ],
                        none: []
                    }, {
                        id: "aria-toggle-field-name",
                        impact: "serious",
                        selector: '[role="checkbox"], [role="menuitemcheckbox"], [role="menuitemradio"], [role="radio"], [role="switch"], [role="option"]',
                        matches: "no-naming-method-matches",
                        tags: [ "cat.aria", "wcag2a", "wcag412", "TTv5", "TT5.c", "EN-301-549", "EN-9.4.1.2", "ACT" ],
                        actIds: [ "e086e5" ],
                        all: [],
                        any: [ "has-visible-text", "aria-label", "aria-labelledby", {
                            options: {
                                attribute: "title"
                            },
                            id: "non-empty-title"
                        } ],
                        none: [ "no-implicit-explicit-label" ]
                    }, {
                        id: "aria-tooltip-name",
                        impact: "serious",
                        selector: '[role="tooltip"]',
                        matches: "no-naming-method-matches",
                        tags: [ "cat.aria", "wcag2a", "wcag412", "EN-301-549", "EN-9.4.1.2" ],
                        all: [],
                        any: [ "has-visible-text", "aria-label", "aria-labelledby", {
                            options: {
                                attribute: "title"
                            },
                            id: "non-empty-title"
                        } ],
                        none: []
                    }, {
                        id: "aria-treeitem-name",
                        impact: "serious",
                        selector: '[role="treeitem"]',
                        matches: "no-naming-method-matches",
                        tags: [ "cat.aria", "best-practice" ],
                        all: [],
                        any: [ "has-visible-text", "aria-label", "aria-labelledby", {
                            options: {
                                attribute: "title"
                            },
                            id: "non-empty-title"
                        } ],
                        none: []
                    }, {
                        id: "aria-valid-attr-value",
                        impact: "critical",
                        matches: "aria-has-attr-matches",
                        tags: [ "cat.aria", "wcag2a", "wcag412", "EN-301-549", "EN-9.4.1.2" ],
                        actIds: [ "6a7281" ],
                        all: [ {
                            options: [],
                            id: "aria-valid-attr-value"
                        }, "aria-errormessage", "aria-level" ],
                        any: [],
                        none: []
                    }, {
                        id: "aria-valid-attr",
                        impact: "critical",
                        matches: "aria-has-attr-matches",
                        tags: [ "cat.aria", "wcag2a", "wcag412", "EN-301-549", "EN-9.4.1.2" ],
                        actIds: [ "5f99a7" ],
                        all: [],
                        any: [ {
                            options: [],
                            id: "aria-valid-attr"
                        } ],
                        none: []
                    }, {
                        id: "audio-caption",
                        impact: "critical",
                        selector: "audio",
                        enabled: false,
                        excludeHidden: false,
                        tags: [ "cat.time-and-media", "wcag2a", "wcag121", "EN-301-549", "EN-9.1.2.1", "section508", "section508.22.a", "deprecated" ],
                        actIds: [ "2eb176", "afb423" ],
                        all: [],
                        any: [],
                        none: [ "caption" ]
                    }, {
                        id: "autocomplete-valid",
                        impact: "serious",
                        matches: "autocomplete-matches",
                        tags: [ "cat.forms", "wcag21aa", "wcag135", "EN-301-549", "EN-9.1.3.5", "ACT" ],
                        actIds: [ "73f2c2" ],
                        all: [ {
                            options: {
                                stateTerms: [ "none", "false", "true", "disabled", "enabled", "undefined", "null" ],
                                ignoredValues: [ "text", "pronouns", "gender", "message", "content" ]
                            },
                            id: "autocomplete-valid"
                        } ],
                        any: [],
                        none: []
                    }, {
                        id: "avoid-inline-spacing",
                        impact: "serious",
                        selector: "[style]",
                        matches: "is-visible-on-screen-matches",
                        tags: [ "cat.structure", "wcag21aa", "wcag1412", "EN-301-549", "EN-9.1.4.12", "ACT" ],
                        actIds: [ "24afc2", "9e45ec", "78fd32" ],
                        all: [ {
                            options: {
                                cssProperty: "letter-spacing",
                                minValue: .12
                            },
                            id: "important-letter-spacing"
                        }, {
                            options: {
                                cssProperty: "word-spacing",
                                minValue: .16
                            },
                            id: "important-word-spacing"
                        }, {
                            options: {
                                multiLineOnly: true,
                                cssProperty: "line-height",
                                minValue: 1.5,
                                normalValue: 1
                            },
                            id: "important-line-height"
                        } ],
                        any: [],
                        none: []
                    }, {
                        id: "blink",
                        impact: "serious",
                        selector: "blink",
                        excludeHidden: false,
                        tags: [ "cat.time-and-media", "wcag2a", "wcag222", "section508", "section508.22.j", "TTv5", "TT2.b", "EN-301-549", "EN-9.2.2.2" ],
                        all: [],
                        any: [],
                        none: [ "is-on-screen" ]
                    }, {
                        id: "button-name",
                        impact: "critical",
                        selector: "button",
                        matches: "no-explicit-name-required-matches",
                        tags: [ "cat.name-role-value", "wcag2a", "wcag412", "section508", "section508.22.a", "TTv5", "TT6.a", "EN-301-549", "EN-9.4.1.2", "ACT" ],
                        actIds: [ "97a4e1", "m6b1q3" ],
                        all: [],
                        any: [ "button-has-visible-text", "aria-label", "aria-labelledby", {
                            options: {
                                attribute: "title"
                            },
                            id: "non-empty-title"
                        }, "presentational-role" ],
                        none: []
                    }, {
                        id: "bypass",
                        impact: "serious",
                        selector: "html",
                        pageLevel: true,
                        matches: "bypass-matches",
                        reviewOnFail: true,
                        tags: [ "cat.keyboard", "wcag2a", "wcag241", "section508", "section508.22.o", "TTv5", "TT9.a", "EN-301-549", "EN-9.2.4.1" ],
                        actIds: [ "cf77f2", "047fe0", "b40fd1", "3e12e1", "ye5d6e" ],
                        all: [],
                        any: [ "internal-link-present", {
                            options: {
                                selector: ":is(h1, h2, h3, h4, h5, h6):not([role]), [role=heading]"
                            },
                            id: "header-present"
                        }, {
                            options: {
                                selector: "main, [role=main]"
                            },
                            id: "landmark"
                        } ],
                        none: []
                    }, {
                        id: "color-contrast-enhanced",
                        impact: "serious",
                        matches: "color-contrast-matches",
                        excludeHidden: false,
                        enabled: false,
                        tags: [ "cat.color", "wcag2aaa", "wcag146", "ACT" ],
                        actIds: [ "09o5cg" ],
                        all: [],
                        any: [ {
                            options: {
                                ignoreUnicode: true,
                                ignoreLength: false,
                                ignorePseudo: false,
                                boldValue: 700,
                                boldTextPt: 14,
                                largeTextPt: 18,
                                contrastRatio: {
                                    normal: {
                                        expected: 7,
                                        minThreshold: 4.5
                                    },
                                    large: {
                                        expected: 4.5,
                                        minThreshold: 3
                                    }
                                },
                                pseudoSizeThreshold: .25,
                                shadowOutlineEmMax: .1,
                                textStrokeEmMin: .03
                            },
                            id: "color-contrast-enhanced"
                        } ],
                        none: []
                    }, {
                        id: "color-contrast",
                        impact: "serious",
                        matches: "color-contrast-matches",
                        excludeHidden: false,
                        tags: [ "cat.color", "wcag2aa", "wcag143", "TTv5", "TT13.c", "EN-301-549", "EN-9.1.4.3", "ACT" ],
                        actIds: [ "afw4f7", "09o5cg" ],
                        all: [],
                        any: [ {
                            options: {
                                ignoreUnicode: true,
                                ignoreLength: false,
                                ignorePseudo: false,
                                boldValue: 700,
                                boldTextPt: 14,
                                largeTextPt: 18,
                                contrastRatio: {
                                    normal: {
                                        expected: 4.5
                                    },
                                    large: {
                                        expected: 3
                                    }
                                },
                                pseudoSizeThreshold: .25,
                                shadowOutlineEmMax: .2,
                                textStrokeEmMin: .03
                            },
                            id: "color-contrast"
                        } ],
                        none: []
                    }, {
                        id: "css-orientation-lock",
                        impact: "serious",
                        selector: "html",
                        tags: [ "cat.structure", "wcag134", "wcag21aa", "EN-301-549", "EN-9.1.3.4", "experimental" ],
                        actIds: [ "b33eff" ],
                        all: [ {
                            options: {
                                degreeThreshold: 2
                            },
                            id: "css-orientation-lock"
                        } ],
                        any: [],
                        none: [],
                        preload: true
                    }, {
                        id: "definition-list",
                        impact: "serious",
                        selector: "dl",
                        matches: "no-role-matches",
                        tags: [ "cat.structure", "wcag2a", "wcag131", "EN-301-549", "EN-9.1.3.1" ],
                        all: [],
                        any: [],
                        none: [ "structured-dlitems", {
                            options: {
                                validRoles: [ "definition", "term", "listitem" ],
                                validNodeNames: [ "dt", "dd" ],
                                divGroups: true
                            },
                            id: "only-dlitems"
                        } ]
                    }, {
                        id: "dlitem",
                        impact: "serious",
                        selector: "dd, dt",
                        matches: "no-role-matches",
                        tags: [ "cat.structure", "wcag2a", "wcag131", "EN-301-549", "EN-9.1.3.1" ],
                        all: [],
                        any: [ "dlitem" ],
                        none: []
                    }, {
                        id: "document-title",
                        impact: "serious",
                        selector: "html",
                        matches: "is-initiator-matches",
                        tags: [ "cat.text-alternatives", "wcag2a", "wcag242", "TTv5", "TT12.a", "EN-301-549", "EN-9.2.4.2", "ACT" ],
                        actIds: [ "2779a5" ],
                        all: [],
                        any: [ "doc-has-title" ],
                        none: []
                    }, {
                        id: "duplicate-id-active",
                        impact: "serious",
                        selector: "[id]",
                        matches: "duplicate-id-active-matches",
                        excludeHidden: false,
                        tags: [ "cat.parsing", "wcag2a-obsolete", "wcag411", "deprecated" ],
                        enabled: false,
                        actIds: [ "3ea0c8" ],
                        all: [],
                        any: [ "duplicate-id-active" ],
                        none: []
                    }, {
                        id: "duplicate-id-aria",
                        impact: "critical",
                        selector: "[id]",
                        matches: "duplicate-id-aria-matches",
                        excludeHidden: false,
                        tags: [ "cat.parsing", "wcag2a", "wcag412", "EN-301-549", "EN-9.4.1.2" ],
                        reviewOnFail: true,
                        actIds: [ "3ea0c8" ],
                        all: [],
                        any: [ "duplicate-id-aria" ],
                        none: []
                    }, {
                        id: "duplicate-id",
                        impact: "minor",
                        selector: "[id]",
                        matches: "duplicate-id-misc-matches",
                        excludeHidden: false,
                        tags: [ "cat.parsing", "wcag2a-obsolete", "wcag411", "deprecated" ],
                        enabled: false,
                        actIds: [ "3ea0c8" ],
                        all: [],
                        any: [ "duplicate-id" ],
                        none: []
                    }, {
                        id: "empty-heading",
                        impact: "minor",
                        selector: 'h1, h2, h3, h4, h5, h6, [role="heading"]',
                        matches: "heading-matches",
                        tags: [ "cat.name-role-value", "best-practice" ],
                        actIds: [ "ffd0e9" ],
                        all: [],
                        any: [ "has-visible-text", "aria-label", "aria-labelledby", {
                            options: {
                                attribute: "title"
                            },
                            id: "non-empty-title"
                        } ],
                        none: []
                    }, {
                        id: "empty-table-header",
                        impact: "minor",
                        selector: 'th:not([role]), [role="rowheader"], [role="columnheader"]',
                        tags: [ "cat.name-role-value", "best-practice" ],
                        all: [],
                        any: [ "has-visible-text" ],
                        none: []
                    }, {
                        id: "focus-order-semantics",
                        impact: "minor",
                        selector: "div, h1, h2, h3, h4, h5, h6, [role=heading], p, span",
                        matches: "inserted-into-focus-order-matches",
                        tags: [ "cat.keyboard", "best-practice", "experimental" ],
                        all: [],
                        any: [ {
                            options: [],
                            id: "has-widget-role"
                        }, {
                            options: {
                                roles: [ "tooltip" ]
                            },
                            id: "valid-scrollable-semantics"
                        } ],
                        none: []
                    }, {
                        id: "form-field-multiple-labels",
                        impact: "moderate",
                        selector: "input, select, textarea",
                        matches: "label-matches",
                        tags: [ "cat.forms", "wcag2a", "wcag332", "TTv5", "TT5.c", "EN-301-549", "EN-9.3.3.2" ],
                        all: [],
                        any: [],
                        none: [ "multiple-label" ]
                    }, {
                        id: "frame-focusable-content",
                        impact: "serious",
                        selector: "html",
                        matches: "frame-focusable-content-matches",
                        tags: [ "cat.keyboard", "wcag2a", "wcag211", "TTv5", "TT4.a", "EN-301-549", "EN-9.2.1.1" ],
                        actIds: [ "akn7bn" ],
                        all: [],
                        any: [ "frame-focusable-content" ],
                        none: []
                    }, {
                        id: "frame-tested",
                        impact: "critical",
                        selector: "html, frame, iframe",
                        tags: [ "cat.structure", "best-practice", "review-item" ],
                        all: [ {
                            options: {
                                isViolation: false
                            },
                            id: "frame-tested"
                        } ],
                        any: [],
                        none: []
                    }, {
                        id: "frame-title-unique",
                        impact: "serious",
                        selector: "frame[title], iframe[title]",
                        matches: "frame-title-has-text-matches",
                        tags: [ "cat.text-alternatives", "wcag2a", "wcag412", "TTv5", "TT12.d", "EN-301-549", "EN-9.4.1.2" ],
                        actIds: [ "4b1c6c" ],
                        all: [],
                        any: [],
                        none: [ "unique-frame-title" ],
                        reviewOnFail: true
                    }, {
                        id: "frame-title",
                        impact: "serious",
                        selector: "frame, iframe",
                        matches: "no-negative-tabindex-matches",
                        tags: [ "cat.text-alternatives", "wcag2a", "wcag412", "section508", "section508.22.i", "TTv5", "TT12.d", "EN-301-549", "EN-9.4.1.2" ],
                        actIds: [ "cae760" ],
                        all: [],
                        any: [ {
                            options: {
                                attribute: "title"
                            },
                            id: "non-empty-title"
                        }, "aria-label", "aria-labelledby", "presentational-role" ],
                        none: []
                    }, {
                        id: "heading-order",
                        impact: "moderate",
                        selector: "h1, h2, h3, h4, h5, h6, [role=heading]",
                        matches: "heading-matches",
                        tags: [ "cat.semantics", "best-practice" ],
                        all: [],
                        any: [ "heading-order" ],
                        none: []
                    }, {
                        id: "hidden-content",
                        impact: "minor",
                        selector: "*",
                        excludeHidden: false,
                        tags: [ "cat.structure", "best-practice", "experimental", "review-item" ],
                        all: [],
                        any: [ "hidden-content" ],
                        none: []
                    }, {
                        id: "html-has-lang",
                        impact: "serious",
                        selector: "html",
                        matches: "is-initiator-matches",
                        tags: [ "cat.language", "wcag2a", "wcag311", "TTv5", "TT11.a", "EN-301-549", "EN-9.3.1.1", "ACT" ],
                        actIds: [ "b5c3f8" ],
                        all: [],
                        any: [ {
                            options: {
                                attributes: [ "lang", "xml:lang" ]
                            },
                            id: "has-lang"
                        } ],
                        none: []
                    }, {
                        id: "html-lang-valid",
                        impact: "serious",
                        selector: 'html[lang]:not([lang=""]), html[xml\\:lang]:not([xml\\:lang=""])',
                        tags: [ "cat.language", "wcag2a", "wcag311", "TTv5", "TT11.a", "EN-301-549", "EN-9.3.1.1", "ACT" ],
                        actIds: [ "bf051a" ],
                        all: [],
                        any: [],
                        none: [ {
                            options: {
                                attributes: [ "lang", "xml:lang" ]
                            },
                            id: "valid-lang"
                        } ]
                    }, {
                        id: "html-xml-lang-mismatch",
                        impact: "moderate",
                        selector: "html[lang][xml\\:lang]",
                        matches: "xml-lang-mismatch-matches",
                        tags: [ "cat.language", "wcag2a", "wcag311", "EN-301-549", "EN-9.3.1.1", "ACT" ],
                        actIds: [ "5b7ae0" ],
                        all: [ "xml-lang-mismatch" ],
                        any: [],
                        none: []
                    }, {
                        id: "identical-links-same-purpose",
                        impact: "minor",
                        selector: 'a[href], area[href], [role="link"]',
                        excludeHidden: false,
                        enabled: false,
                        matches: "identical-links-same-purpose-matches",
                        tags: [ "cat.semantics", "wcag2aaa", "wcag249" ],
                        actIds: [ "b20e66" ],
                        all: [ "identical-links-same-purpose" ],
                        any: [],
                        none: []
                    }, {
                        id: "image-alt",
                        impact: "critical",
                        selector: "img",
                        matches: "no-explicit-name-required-matches",
                        tags: [ "cat.text-alternatives", "wcag2a", "wcag111", "section508", "section508.22.a", "TTv5", "TT7.a", "TT7.b", "EN-301-549", "EN-9.1.1.1", "ACT" ],
                        actIds: [ "23a2a8" ],
                        all: [],
                        any: [ "has-alt", "aria-label", "aria-labelledby", {
                            options: {
                                attribute: "title"
                            },
                            id: "non-empty-title"
                        }, "presentational-role" ],
                        none: [ "alt-space-value" ]
                    }, {
                        id: "image-redundant-alt",
                        impact: "minor",
                        selector: "img",
                        tags: [ "cat.text-alternatives", "best-practice" ],
                        all: [],
                        any: [],
                        none: [ {
                            options: {
                                parentSelector: "button, [role=button], a[href], p, li, td, th"
                            },
                            id: "duplicate-img-label"
                        } ]
                    }, {
                        id: "input-button-name",
                        impact: "critical",
                        selector: 'input[type="button"], input[type="submit"], input[type="reset"]',
                        matches: "no-explicit-name-required-matches",
                        tags: [ "cat.name-role-value", "wcag2a", "wcag412", "section508", "section508.22.a", "TTv5", "TT5.c", "EN-301-549", "EN-9.4.1.2", "ACT" ],
                        actIds: [ "97a4e1" ],
                        all: [],
                        any: [ "non-empty-if-present", {
                            options: {
                                attribute: "value"
                            },
                            id: "non-empty-value"
                        }, "aria-label", "aria-labelledby", {
                            options: {
                                attribute: "title"
                            },
                            id: "non-empty-title"
                        }, "presentational-role" ],
                        none: []
                    }, {
                        id: "input-image-alt",
                        impact: "critical",
                        selector: 'input[type="image"]',
                        matches: "no-explicit-name-required-matches",
                        tags: [ "cat.text-alternatives", "wcag2a", "wcag111", "wcag412", "section508", "section508.22.a", "TTv5", "TT7.a", "EN-301-549", "EN-9.1.1.1", "EN-9.4.1.2", "ACT" ],
                        actIds: [ "59796f" ],
                        all: [],
                        any: [ {
                            options: {
                                attribute: "alt"
                            },
                            id: "non-empty-alt"
                        }, "aria-label", "aria-labelledby", {
                            options: {
                                attribute: "title"
                            },
                            id: "non-empty-title"
                        } ],
                        none: []
                    }, {
                        id: "label-content-name-mismatch",
                        impact: "serious",
                        matches: "label-content-name-mismatch-matches",
                        tags: [ "cat.semantics", "wcag21a", "wcag253", "EN-301-549", "EN-9.2.5.3", "experimental" ],
                        actIds: [ "2ee8b8" ],
                        all: [],
                        any: [ {
                            options: {
                                pixelThreshold: .1,
                                occurrenceThreshold: 3
                            },
                            id: "label-content-name-mismatch"
                        } ],
                        none: []
                    }, {
                        id: "label-title-only",
                        impact: "serious",
                        selector: "input, select, textarea",
                        matches: "label-matches",
                        tags: [ "cat.forms", "best-practice" ],
                        all: [],
                        any: [],
                        none: [ "title-only" ]
                    }, {
                        id: "label",
                        impact: "critical",
                        selector: "input, textarea",
                        matches: "label-matches",
                        tags: [ "cat.forms", "wcag2a", "wcag412", "section508", "section508.22.n", "TTv5", "TT5.c", "EN-301-549", "EN-9.4.1.2", "ACT" ],
                        actIds: [ "e086e5" ],
                        all: [],
                        any: [ "implicit-label", "explicit-label", "aria-label", "aria-labelledby", {
                            options: {
                                attribute: "title"
                            },
                            id: "non-empty-title"
                        }, {
                            options: {
                                attribute: "placeholder"
                            },
                            id: "non-empty-placeholder"
                        }, "presentational-role" ],
                        none: [ "hidden-explicit-label" ]
                    }, {
                        id: "landmark-banner-is-top-level",
                        impact: "moderate",
                        selector: "header:not([role]), [role=banner]",
                        matches: "landmark-has-body-context-matches",
                        tags: [ "cat.semantics", "best-practice" ],
                        all: [],
                        any: [ "landmark-is-top-level" ],
                        none: []
                    }, {
                        id: "landmark-complementary-is-top-level",
                        impact: "moderate",
                        selector: "aside:not([role]), [role=complementary]",
                        tags: [ "cat.semantics", "best-practice" ],
                        all: [],
                        any: [ "landmark-is-top-level" ],
                        none: []
                    }, {
                        id: "landmark-contentinfo-is-top-level",
                        impact: "moderate",
                        selector: "footer:not([role]), [role=contentinfo]",
                        matches: "landmark-has-body-context-matches",
                        tags: [ "cat.semantics", "best-practice" ],
                        all: [],
                        any: [ "landmark-is-top-level" ],
                        none: []
                    }, {
                        id: "landmark-main-is-top-level",
                        impact: "moderate",
                        selector: "main:not([role]), [role=main]",
                        tags: [ "cat.semantics", "best-practice" ],
                        all: [],
                        any: [ "landmark-is-top-level" ],
                        none: []
                    }, {
                        id: "landmark-no-duplicate-banner",
                        impact: "moderate",
                        selector: "header:not([role]), [role=banner]",
                        tags: [ "cat.semantics", "best-practice" ],
                        all: [],
                        any: [ {
                            options: {
                                selector: "header:not([role]), [role=banner]",
                                role: "banner"
                            },
                            id: "page-no-duplicate-banner"
                        } ],
                        none: []
                    }, {
                        id: "landmark-no-duplicate-contentinfo",
                        impact: "moderate",
                        selector: "footer:not([role]), [role=contentinfo]",
                        tags: [ "cat.semantics", "best-practice" ],
                        all: [],
                        any: [ {
                            options: {
                                selector: "footer:not([role]), [role=contentinfo]",
                                role: "contentinfo"
                            },
                            id: "page-no-duplicate-contentinfo"
                        } ],
                        none: []
                    }, {
                        id: "landmark-no-duplicate-main",
                        impact: "moderate",
                        selector: "main:not([role]), [role=main]",
                        tags: [ "cat.semantics", "best-practice" ],
                        all: [],
                        any: [ {
                            options: {
                                selector: "main:not([role]), [role='main']"
                            },
                            id: "page-no-duplicate-main"
                        } ],
                        none: []
                    }, {
                        id: "landmark-one-main",
                        impact: "moderate",
                        selector: "html",
                        tags: [ "cat.semantics", "best-practice" ],
                        all: [ {
                            options: {
                                selector: "main:not([role]), [role='main']",
                                passForModal: true
                            },
                            id: "page-has-main"
                        } ],
                        any: [],
                        none: []
                    }, {
                        id: "landmark-unique",
                        impact: "moderate",
                        selector: "[role=banner], [role=complementary], [role=contentinfo], [role=main], [role=navigation], [role=region], [role=search], [role=form], form, footer, header, aside, main, nav, section",
                        tags: [ "cat.semantics", "best-practice" ],
                        matches: "landmark-unique-matches",
                        all: [],
                        any: [ "landmark-is-unique" ],
                        none: []
                    }, {
                        id: "link-in-text-block",
                        impact: "serious",
                        selector: "a[href], [role=link]",
                        matches: "link-in-text-block-matches",
                        excludeHidden: false,
                        tags: [ "cat.color", "wcag2a", "wcag141", "TTv5", "TT13.a", "EN-301-549", "EN-9.1.4.1" ],
                        all: [],
                        any: [ {
                            options: {
                                requiredContrastRatio: 3,
                                allowSameColor: true
                            },
                            id: "link-in-text-block"
                        }, "link-in-text-block-style" ],
                        none: []
                    }, {
                        id: "link-name",
                        impact: "serious",
                        selector: "a[href]",
                        tags: [ "cat.name-role-value", "wcag2a", "wcag244", "wcag412", "section508", "section508.22.a", "TTv5", "TT6.a", "EN-301-549", "EN-9.2.4.4", "EN-9.4.1.2", "ACT" ],
                        actIds: [ "c487ae" ],
                        all: [],
                        any: [ "has-visible-text", "aria-label", "aria-labelledby", {
                            options: {
                                attribute: "title"
                            },
                            id: "non-empty-title"
                        } ],
                        none: [ "focusable-no-name" ]
                    }, {
                        id: "list",
                        impact: "serious",
                        selector: "ul, ol",
                        matches: "no-role-matches",
                        tags: [ "cat.structure", "wcag2a", "wcag131", "EN-301-549", "EN-9.1.3.1" ],
                        all: [],
                        any: [],
                        none: [ {
                            options: {
                                validRoles: [ "listitem" ],
                                validNodeNames: [ "li" ]
                            },
                            id: "only-listitems"
                        } ]
                    }, {
                        id: "listitem",
                        impact: "serious",
                        selector: "li",
                        matches: "no-role-matches",
                        tags: [ "cat.structure", "wcag2a", "wcag131", "EN-301-549", "EN-9.1.3.1" ],
                        all: [],
                        any: [ "listitem" ],
                        none: []
                    }, {
                        id: "marquee",
                        impact: "serious",
                        selector: "marquee",
                        excludeHidden: false,
                        tags: [ "cat.parsing", "wcag2a", "wcag222", "TTv5", "TT2.b", "EN-301-549", "EN-9.2.2.2" ],
                        all: [],
                        any: [],
                        none: [ "is-on-screen" ]
                    }, {
                        id: "meta-refresh-no-exceptions",
                        impact: "minor",
                        selector: 'meta[http-equiv="refresh"][content]',
                        excludeHidden: false,
                        enabled: false,
                        tags: [ "cat.time-and-media", "wcag2aaa", "wcag224", "wcag325" ],
                        actIds: [ "bisz58" ],
                        all: [],
                        any: [ {
                            options: {
                                minDelay: 72e3,
                                maxDelay: false
                            },
                            id: "meta-refresh-no-exceptions"
                        } ],
                        none: []
                    }, {
                        id: "meta-refresh",
                        impact: "critical",
                        selector: 'meta[http-equiv="refresh"][content]',
                        excludeHidden: false,
                        tags: [ "cat.time-and-media", "wcag2a", "wcag221", "TTv5", "TT8.a", "EN-301-549", "EN-9.2.2.1" ],
                        actIds: [ "bc659a", "bisz58" ],
                        all: [],
                        any: [ {
                            options: {
                                minDelay: 0,
                                maxDelay: 72e3
                            },
                            id: "meta-refresh"
                        } ],
                        none: []
                    }, {
                        id: "meta-viewport-large",
                        impact: "minor",
                        selector: 'meta[name="viewport"]',
                        matches: "is-initiator-matches",
                        excludeHidden: false,
                        tags: [ "cat.sensory-and-visual-cues", "best-practice" ],
                        all: [],
                        any: [ {
                            options: {
                                scaleMinimum: 5,
                                lowerBound: 2
                            },
                            id: "meta-viewport-large"
                        } ],
                        none: []
                    }, {
                        id: "meta-viewport",
                        impact: "critical",
                        selector: 'meta[name="viewport"]',
                        matches: "is-initiator-matches",
                        excludeHidden: false,
                        tags: [ "cat.sensory-and-visual-cues", "wcag2aa", "wcag144", "EN-301-549", "EN-9.1.4.4", "ACT" ],
                        actIds: [ "b4f0c3" ],
                        all: [],
                        any: [ {
                            options: {
                                scaleMinimum: 2
                            },
                            id: "meta-viewport"
                        } ],
                        none: []
                    }, {
                        id: "nested-interactive",
                        impact: "serious",
                        matches: "nested-interactive-matches",
                        tags: [ "cat.keyboard", "wcag2a", "wcag412", "TTv5", "TT6.a", "EN-301-549", "EN-9.4.1.2" ],
                        actIds: [ "307n5z" ],
                        all: [],
                        any: [ "no-focusable-content" ],
                        none: []
                    }, {
                        id: "no-autoplay-audio",
                        impact: "moderate",
                        excludeHidden: false,
                        selector: "audio[autoplay], video[autoplay]",
                        matches: "no-autoplay-audio-matches",
                        reviewOnFail: true,
                        tags: [ "cat.time-and-media", "wcag2a", "wcag142", "TTv5", "TT2.a", "EN-301-549", "EN-9.1.4.2", "ACT" ],
                        actIds: [ "80f0bf" ],
                        preload: true,
                        all: [ {
                            options: {
                                allowedDuration: 3
                            },
                            id: "no-autoplay-audio"
                        } ],
                        any: [],
                        none: []
                    }, {
                        id: "object-alt",
                        impact: "serious",
                        selector: "object[data]",
                        matches: "object-is-loaded-matches",
                        tags: [ "cat.text-alternatives", "wcag2a", "wcag111", "section508", "section508.22.a", "EN-301-549", "EN-9.1.1.1" ],
                        actIds: [ "8fc3b6" ],
                        all: [],
                        any: [ "aria-label", "aria-labelledby", {
                            options: {
                                attribute: "title"
                            },
                            id: "non-empty-title"
                        }, "presentational-role" ],
                        none: []
                    }, {
                        id: "p-as-heading",
                        impact: "serious",
                        selector: "p",
                        matches: "p-as-heading-matches",
                        tags: [ "cat.semantics", "wcag2a", "wcag131", "EN-301-549", "EN-9.1.3.1", "experimental" ],
                        all: [ {
                            options: {
                                margins: [ {
                                    weight: 150,
                                    italic: true
                                }, {
                                    weight: 150,
                                    size: 1.15
                                }, {
                                    italic: true,
                                    size: 1.15
                                }, {
                                    size: 1.4
                                } ],
                                passLength: 1,
                                failLength: .5
                            },
                            id: "p-as-heading"
                        } ],
                        any: [],
                        none: []
                    }, {
                        id: "page-has-heading-one",
                        impact: "moderate",
                        selector: "html",
                        tags: [ "cat.semantics", "best-practice" ],
                        all: [ {
                            options: {
                                selector: "h1:not([role], [aria-level]), :is(h1, h2, h3, h4, h5, h6):not([role])[aria-level=1], [role=heading][aria-level=1]",
                                passForModal: true
                            },
                            id: "page-has-heading-one"
                        } ],
                        any: [],
                        none: []
                    }, {
                        id: "presentation-role-conflict",
                        impact: "minor",
                        selector: 'img[alt=\'\'], [role="none"], [role="presentation"]',
                        matches: "has-implicit-chromium-role-matches",
                        tags: [ "cat.aria", "best-practice", "ACT" ],
                        actIds: [ "46ca7f" ],
                        all: [],
                        any: [],
                        none: [ "is-element-focusable", "has-global-aria-attribute" ]
                    }, {
                        id: "region",
                        impact: "moderate",
                        selector: "body *",
                        tags: [ "cat.keyboard", "best-practice" ],
                        all: [],
                        any: [ {
                            options: {
                                regionMatcher: "dialog, [role=dialog], [role=alertdialog], svg"
                            },
                            id: "region"
                        } ],
                        none: []
                    }, {
                        id: "role-img-alt",
                        impact: "serious",
                        selector: "[role='img']:not(img, area, input, object)",
                        matches: "html-namespace-matches",
                        tags: [ "cat.text-alternatives", "wcag2a", "wcag111", "section508", "section508.22.a", "TTv5", "TT7.a", "EN-301-549", "EN-9.1.1.1", "ACT" ],
                        actIds: [ "23a2a8" ],
                        all: [],
                        any: [ "aria-label", "aria-labelledby", {
                            options: {
                                attribute: "title"
                            },
                            id: "non-empty-title"
                        } ],
                        none: []
                    }, {
                        id: "scope-attr-valid",
                        impact: "moderate",
                        selector: "td[scope], th[scope]",
                        tags: [ "cat.tables", "best-practice" ],
                        all: [ "html5-scope", {
                            options: {
                                values: [ "row", "col", "rowgroup", "colgroup" ]
                            },
                            id: "scope-value"
                        } ],
                        any: [],
                        none: []
                    }, {
                        id: "scrollable-region-focusable",
                        impact: "serious",
                        selector: "*:not(select,textarea)",
                        matches: "scrollable-region-focusable-matches",
                        tags: [ "cat.keyboard", "wcag2a", "wcag211", "wcag213", "TTv5", "TT4.a", "EN-301-549", "EN-9.2.1.1", "EN-9.2.1.3" ],
                        actIds: [ "0ssw9k" ],
                        all: [],
                        any: [ "focusable-content", "focusable-element" ],
                        none: []
                    }, {
                        id: "select-name",
                        impact: "critical",
                        selector: "select",
                        tags: [ "cat.forms", "wcag2a", "wcag412", "section508", "section508.22.n", "TTv5", "TT5.c", "EN-301-549", "EN-9.4.1.2", "ACT" ],
                        actIds: [ "e086e5" ],
                        all: [],
                        any: [ "implicit-label", "explicit-label", "aria-label", "aria-labelledby", {
                            options: {
                                attribute: "title"
                            },
                            id: "non-empty-title"
                        }, "presentational-role" ],
                        none: [ "hidden-explicit-label" ]
                    }, {
                        id: "server-side-image-map",
                        impact: "minor",
                        selector: "img[ismap]",
                        tags: [ "cat.text-alternatives", "wcag2a", "wcag211", "section508", "section508.22.f", "TTv5", "TT4.a", "EN-301-549", "EN-9.2.1.1" ],
                        all: [],
                        any: [],
                        none: [ "exists" ]
                    }, {
                        id: "skip-link",
                        impact: "moderate",
                        selector: 'a[href^="#"], a[href^="/#"]',
                        matches: "skip-link-matches",
                        tags: [ "cat.keyboard", "best-practice" ],
                        all: [],
                        any: [ "skip-link" ],
                        none: []
                    }, {
                        id: "summary-name",
                        impact: "serious",
                        selector: "summary",
                        matches: "summary-interactive-matches",
                        tags: [ "cat.name-role-value", "wcag2a", "wcag412", "section508", "section508.22.a", "TTv5", "TT6.a", "EN-301-549", "EN-9.4.1.2" ],
                        all: [],
                        any: [ "has-visible-text", "aria-label", "aria-labelledby", {
                            options: {
                                attribute: "title"
                            },
                            id: "non-empty-title"
                        } ],
                        none: []
                    }, {
                        id: "svg-img-alt",
                        impact: "serious",
                        selector: '[role="img"], [role="graphics-symbol"], svg[role="graphics-document"]',
                        matches: "svg-namespace-matches",
                        tags: [ "cat.text-alternatives", "wcag2a", "wcag111", "section508", "section508.22.a", "TTv5", "TT7.a", "EN-301-549", "EN-9.1.1.1", "ACT" ],
                        actIds: [ "7d6734" ],
                        all: [],
                        any: [ "svg-non-empty-title", "aria-label", "aria-labelledby", {
                            options: {
                                attribute: "title"
                            },
                            id: "non-empty-title"
                        } ],
                        none: []
                    }, {
                        id: "tabindex",
                        impact: "serious",
                        selector: "[tabindex]",
                        tags: [ "cat.keyboard", "best-practice" ],
                        all: [],
                        any: [ "tabindex" ],
                        none: []
                    }, {
                        id: "table-duplicate-name",
                        impact: "minor",
                        selector: "table",
                        tags: [ "cat.tables", "best-practice" ],
                        all: [],
                        any: [],
                        none: [ "same-caption-summary" ]
                    }, {
                        id: "table-fake-caption",
                        impact: "serious",
                        selector: "table",
                        matches: "data-table-matches",
                        tags: [ "cat.tables", "experimental", "wcag2a", "wcag131", "section508", "section508.22.g", "EN-301-549", "EN-9.1.3.1" ],
                        all: [ "caption-faked" ],
                        any: [],
                        none: []
                    }, {
                        id: "target-size",
                        impact: "serious",
                        selector: "*",
                        enabled: false,
                        matches: "widget-not-inline-matches",
                        tags: [ "cat.sensory-and-visual-cues", "wcag22aa", "wcag258" ],
                        all: [],
                        any: [ {
                            options: {
                                minSize: 24
                            },
                            id: "target-size"
                        }, {
                            options: {
                                minOffset: 24
                            },
                            id: "target-offset"
                        } ],
                        none: []
                    }, {
                        id: "td-has-header",
                        impact: "critical",
                        selector: "table",
                        matches: "data-table-large-matches",
                        tags: [ "cat.tables", "experimental", "wcag2a", "wcag131", "section508", "section508.22.g", "TTv5", "TT14.b", "EN-301-549", "EN-9.1.3.1" ],
                        all: [ "td-has-header" ],
                        any: [],
                        none: []
                    }, {
                        id: "td-headers-attr",
                        impact: "serious",
                        selector: "table",
                        matches: "table-or-grid-role-matches",
                        tags: [ "cat.tables", "wcag2a", "wcag131", "section508", "section508.22.g", "TTv5", "TT14.b", "EN-301-549", "EN-9.1.3.1" ],
                        actIds: [ "a25f45" ],
                        all: [ "td-headers-attr" ],
                        any: [],
                        none: []
                    }, {
                        id: "th-has-data-cells",
                        impact: "serious",
                        selector: "table",
                        matches: "data-table-matches",
                        tags: [ "cat.tables", "wcag2a", "wcag131", "section508", "section508.22.g", "TTv5", "TT14.b", "EN-301-549", "EN-9.1.3.1" ],
                        actIds: [ "d0f69e" ],
                        all: [ "th-has-data-cells" ],
                        any: [],
                        none: []
                    }, {
                        id: "valid-lang",
                        impact: "serious",
                        selector: "[lang]:not(html), [xml\\:lang]:not(html)",
                        tags: [ "cat.language", "wcag2aa", "wcag312", "TTv5", "TT11.b", "EN-301-549", "EN-9.3.1.2", "ACT" ],
                        actIds: [ "de46e4" ],
                        all: [],
                        any: [],
                        none: [ {
                            options: {
                                attributes: [ "lang", "xml:lang" ]
                            },
                            id: "valid-lang"
                        } ]
                    }, {
                        id: "video-caption",
                        impact: "critical",
                        selector: "video",
                        tags: [ "cat.text-alternatives", "wcag2a", "wcag122", "section508", "section508.22.a", "TTv5", "TT17.a", "EN-301-549", "EN-9.1.2.2" ],
                        actIds: [ "eac66b" ],
                        all: [],
                        any: [],
                        none: [ "caption" ]
                    } ],
                    checks: [ {
                        id: "abstractrole",
                        evaluate: "abstractrole-evaluate"
                    }, {
                        id: "aria-allowed-attr",
                        evaluate: "aria-allowed-attr-evaluate",
                        options: {
                            validTreeRowAttrs: [ "aria-posinset", "aria-setsize", "aria-expanded", "aria-level" ]
                        }
                    }, {
                        id: "aria-allowed-role",
                        evaluate: "aria-allowed-role-evaluate",
                        options: {
                            allowImplicit: true,
                            ignoredTags: []
                        }
                    }, {
                        id: "aria-busy",
                        evaluate: "aria-busy-evaluate",
                        deprecated: true
                    }, {
                        id: "aria-conditional-attr",
                        evaluate: "aria-conditional-attr-evaluate",
                        options: {
                            invalidTableRowAttrs: [ "aria-posinset", "aria-setsize", "aria-expanded", "aria-level" ]
                        }
                    }, {
                        id: "aria-errormessage",
                        evaluate: "aria-errormessage-evaluate"
                    }, {
                        id: "aria-hidden-body",
                        evaluate: "aria-hidden-body-evaluate"
                    }, {
                        id: "aria-level",
                        evaluate: "aria-level-evaluate"
                    }, {
                        id: "aria-prohibited-attr",
                        evaluate: "aria-prohibited-attr-evaluate",
                        options: {
                            elementsAllowedAriaLabel: [ "applet", "input" ]
                        }
                    }, {
                        id: "aria-required-attr",
                        evaluate: "aria-required-attr-evaluate"
                    }, {
                        id: "aria-required-children",
                        evaluate: "aria-required-children-evaluate",
                        options: {
                            reviewEmpty: [ "doc-bibliography", "doc-endnotes", "grid", "list", "listbox", "menu", "menubar", "table", "tablist", "tree", "treegrid", "rowgroup" ]
                        }
                    }, {
                        id: "aria-required-parent",
                        evaluate: "aria-required-parent-evaluate",
                        options: {
                            ownGroupRoles: [ "listitem", "treeitem" ]
                        }
                    }, {
                        id: "aria-roledescription",
                        evaluate: "aria-roledescription-evaluate",
                        options: {
                            supportedRoles: [ "button", "img", "checkbox", "radio", "combobox", "menuitemcheckbox", "menuitemradio" ]
                        }
                    }, {
                        id: "aria-unsupported-attr",
                        evaluate: "aria-unsupported-attr-evaluate"
                    }, {
                        id: "aria-valid-attr-value",
                        evaluate: "aria-valid-attr-value-evaluate",
                        options: []
                    }, {
                        id: "aria-valid-attr",
                        evaluate: "aria-valid-attr-evaluate",
                        options: []
                    }, {
                        id: "braille-label-equivalent",
                        evaluate: "braille-label-equivalent-evaluate"
                    }, {
                        id: "braille-roledescription-equivalent",
                        evaluate: "braille-roledescription-equivalent-evaluate"
                    }, {
                        id: "deprecatedrole",
                        evaluate: "deprecatedrole-evaluate"
                    }, {
                        id: "fallbackrole",
                        evaluate: "fallbackrole-evaluate"
                    }, {
                        id: "has-global-aria-attribute",
                        evaluate: "has-global-aria-attribute-evaluate"
                    }, {
                        id: "has-widget-role",
                        evaluate: "has-widget-role-evaluate",
                        options: []
                    }, {
                        id: "invalidrole",
                        evaluate: "invalidrole-evaluate"
                    }, {
                        id: "is-element-focusable",
                        evaluate: "is-element-focusable-evaluate"
                    }, {
                        id: "no-implicit-explicit-label",
                        evaluate: "no-implicit-explicit-label-evaluate"
                    }, {
                        id: "unsupportedrole",
                        evaluate: "unsupportedrole-evaluate"
                    }, {
                        id: "valid-scrollable-semantics",
                        evaluate: "valid-scrollable-semantics-evaluate",
                        options: {
                            roles: [ "tooltip" ]
                        }
                    }, {
                        id: "color-contrast-enhanced",
                        evaluate: "color-contrast-evaluate",
                        options: {
                            ignoreUnicode: true,
                            ignoreLength: false,
                            ignorePseudo: false,
                            boldValue: 700,
                            boldTextPt: 14,
                            largeTextPt: 18,
                            contrastRatio: {
                                normal: {
                                    expected: 7,
                                    minThreshold: 4.5
                                },
                                large: {
                                    expected: 4.5,
                                    minThreshold: 3
                                }
                            },
                            pseudoSizeThreshold: .25,
                            shadowOutlineEmMax: .1,
                            textStrokeEmMin: .03
                        }
                    }, {
                        id: "color-contrast",
                        evaluate: "color-contrast-evaluate",
                        options: {
                            ignoreUnicode: true,
                            ignoreLength: false,
                            ignorePseudo: false,
                            boldValue: 700,
                            boldTextPt: 14,
                            largeTextPt: 18,
                            contrastRatio: {
                                normal: {
                                    expected: 4.5
                                },
                                large: {
                                    expected: 3
                                }
                            },
                            pseudoSizeThreshold: .25,
                            shadowOutlineEmMax: .2,
                            textStrokeEmMin: .03
                        }
                    }, {
                        id: "link-in-text-block-style",
                        evaluate: "link-in-text-block-style-evaluate"
                    }, {
                        id: "link-in-text-block",
                        evaluate: "link-in-text-block-evaluate",
                        options: {
                            requiredContrastRatio: 3,
                            allowSameColor: true
                        }
                    }, {
                        id: "autocomplete-appropriate",
                        evaluate: "autocomplete-appropriate-evaluate",
                        deprecated: true
                    }, {
                        id: "autocomplete-valid",
                        evaluate: "autocomplete-valid-evaluate",
                        options: {
                            stateTerms: [ "none", "false", "true", "disabled", "enabled", "undefined", "null" ],
                            ignoredValues: [ "text", "pronouns", "gender", "message", "content" ]
                        }
                    }, {
                        id: "accesskeys",
                        evaluate: "accesskeys-evaluate",
                        after: "accesskeys-after"
                    }, {
                        id: "focusable-content",
                        evaluate: "focusable-content-evaluate"
                    }, {
                        id: "focusable-disabled",
                        evaluate: "focusable-disabled-evaluate"
                    }, {
                        id: "focusable-element",
                        evaluate: "focusable-element-evaluate"
                    }, {
                        id: "focusable-modal-open",
                        evaluate: "focusable-modal-open-evaluate"
                    }, {
                        id: "focusable-no-name",
                        evaluate: "focusable-no-name-evaluate"
                    }, {
                        id: "focusable-not-tabbable",
                        evaluate: "focusable-not-tabbable-evaluate"
                    }, {
                        id: "frame-focusable-content",
                        evaluate: "frame-focusable-content-evaluate"
                    }, {
                        id: "landmark-is-top-level",
                        evaluate: "landmark-is-top-level-evaluate"
                    }, {
                        id: "no-focusable-content",
                        evaluate: "no-focusable-content-evaluate"
                    }, {
                        id: "page-has-heading-one",
                        evaluate: "has-descendant-evaluate",
                        after: "has-descendant-after",
                        options: {
                            selector: "h1:not([role], [aria-level]), :is(h1, h2, h3, h4, h5, h6):not([role])[aria-level=1], [role=heading][aria-level=1]",
                            passForModal: true
                        }
                    }, {
                        id: "page-has-main",
                        evaluate: "has-descendant-evaluate",
                        after: "has-descendant-after",
                        options: {
                            selector: "main:not([role]), [role='main']",
                            passForModal: true
                        }
                    }, {
                        id: "page-no-duplicate-banner",
                        evaluate: "page-no-duplicate-evaluate",
                        after: "page-no-duplicate-after",
                        options: {
                            selector: "header:not([role]), [role=banner]",
                            role: "banner"
                        }
                    }, {
                        id: "page-no-duplicate-contentinfo",
                        evaluate: "page-no-duplicate-evaluate",
                        after: "page-no-duplicate-after",
                        options: {
                            selector: "footer:not([role]), [role=contentinfo]",
                            role: "contentinfo"
                        }
                    }, {
                        id: "page-no-duplicate-main",
                        evaluate: "page-no-duplicate-evaluate",
                        after: "page-no-duplicate-after",
                        options: {
                            selector: "main:not([role]), [role='main']"
                        }
                    }, {
                        id: "tabindex",
                        evaluate: "tabindex-evaluate"
                    }, {
                        id: "alt-space-value",
                        evaluate: "alt-space-value-evaluate"
                    }, {
                        id: "duplicate-img-label",
                        evaluate: "duplicate-img-label-evaluate",
                        options: {
                            parentSelector: "button, [role=button], a[href], p, li, td, th"
                        }
                    }, {
                        id: "explicit-label",
                        evaluate: "explicit-evaluate"
                    }, {
                        id: "help-same-as-label",
                        evaluate: "help-same-as-label-evaluate"
                    }, {
                        id: "hidden-explicit-label",
                        evaluate: "hidden-explicit-label-evaluate"
                    }, {
                        id: "implicit-label",
                        evaluate: "implicit-evaluate"
                    }, {
                        id: "label-content-name-mismatch",
                        evaluate: "label-content-name-mismatch-evaluate",
                        options: {
                            pixelThreshold: .1,
                            occurrenceThreshold: 3
                        }
                    }, {
                        id: "multiple-label",
                        evaluate: "multiple-label-evaluate"
                    }, {
                        id: "title-only",
                        evaluate: "title-only-evaluate"
                    }, {
                        id: "landmark-is-unique",
                        evaluate: "landmark-is-unique-evaluate",
                        after: "landmark-is-unique-after"
                    }, {
                        id: "has-lang",
                        evaluate: "has-lang-evaluate",
                        options: {
                            attributes: [ "lang", "xml:lang" ]
                        }
                    }, {
                        id: "valid-lang",
                        evaluate: "valid-lang-evaluate",
                        options: {
                            attributes: [ "lang", "xml:lang" ]
                        }
                    }, {
                        id: "xml-lang-mismatch",
                        evaluate: "xml-lang-mismatch-evaluate"
                    }, {
                        id: "dlitem",
                        evaluate: "dlitem-evaluate"
                    }, {
                        id: "listitem",
                        evaluate: "listitem-evaluate"
                    }, {
                        id: "only-dlitems",
                        evaluate: "invalid-children-evaluate",
                        options: {
                            validRoles: [ "definition", "term", "listitem" ],
                            validNodeNames: [ "dt", "dd" ],
                            divGroups: true
                        }
                    }, {
                        id: "only-listitems",
                        evaluate: "invalid-children-evaluate",
                        options: {
                            validRoles: [ "listitem" ],
                            validNodeNames: [ "li" ]
                        }
                    }, {
                        id: "structured-dlitems",
                        evaluate: "structured-dlitems-evaluate"
                    }, {
                        id: "caption",
                        evaluate: "caption-evaluate"
                    }, {
                        id: "frame-tested",
                        evaluate: "frame-tested-evaluate",
                        after: "frame-tested-after",
                        options: {
                            isViolation: false
                        }
                    }, {
                        id: "no-autoplay-audio",
                        evaluate: "no-autoplay-audio-evaluate",
                        options: {
                            allowedDuration: 3
                        }
                    }, {
                        id: "css-orientation-lock",
                        evaluate: "css-orientation-lock-evaluate",
                        options: {
                            degreeThreshold: 2
                        }
                    }, {
                        id: "meta-viewport-large",
                        evaluate: "meta-viewport-scale-evaluate",
                        options: {
                            scaleMinimum: 5,
                            lowerBound: 2
                        }
                    }, {
                        id: "meta-viewport",
                        evaluate: "meta-viewport-scale-evaluate",
                        options: {
                            scaleMinimum: 2
                        }
                    }, {
                        id: "target-offset",
                        evaluate: "target-offset-evaluate",
                        options: {
                            minOffset: 24
                        }
                    }, {
                        id: "target-size",
                        evaluate: "target-size-evaluate",
                        options: {
                            minSize: 24
                        }
                    }, {
                        id: "header-present",
                        evaluate: "has-descendant-evaluate",
                        after: "has-descendant-after",
                        options: {
                            selector: ":is(h1, h2, h3, h4, h5, h6):not([role]), [role=heading]"
                        }
                    }, {
                        id: "heading-order",
                        evaluate: "heading-order-evaluate",
                        after: "heading-order-after"
                    }, {
                        id: "identical-links-same-purpose",
                        evaluate: "identical-links-same-purpose-evaluate",
                        after: "identical-links-same-purpose-after"
                    }, {
                        id: "internal-link-present",
                        evaluate: "internal-link-present-evaluate"
                    }, {
                        id: "landmark",
                        evaluate: "has-descendant-evaluate",
                        options: {
                            selector: "main, [role=main]"
                        }
                    }, {
                        id: "meta-refresh-no-exceptions",
                        evaluate: "meta-refresh-evaluate",
                        options: {
                            minDelay: 72e3,
                            maxDelay: false
                        }
                    }, {
                        id: "meta-refresh",
                        evaluate: "meta-refresh-evaluate",
                        options: {
                            minDelay: 0,
                            maxDelay: 72e3
                        }
                    }, {
                        id: "p-as-heading",
                        evaluate: "p-as-heading-evaluate",
                        options: {
                            margins: [ {
                                weight: 150,
                                italic: true
                            }, {
                                weight: 150,
                                size: 1.15
                            }, {
                                italic: true,
                                size: 1.15
                            }, {
                                size: 1.4
                            } ],
                            passLength: 1,
                            failLength: .5
                        }
                    }, {
                        id: "region",
                        evaluate: "region-evaluate",
                        after: "region-after",
                        options: {
                            regionMatcher: "dialog, [role=dialog], [role=alertdialog], svg"
                        }
                    }, {
                        id: "skip-link",
                        evaluate: "skip-link-evaluate"
                    }, {
                        id: "unique-frame-title",
                        evaluate: "unique-frame-title-evaluate",
                        after: "unique-frame-title-after"
                    }, {
                        id: "duplicate-id-active",
                        evaluate: "duplicate-id-evaluate",
                        after: "duplicate-id-after"
                    }, {
                        id: "duplicate-id-aria",
                        evaluate: "duplicate-id-evaluate",
                        after: "duplicate-id-after"
                    }, {
                        id: "duplicate-id",
                        evaluate: "duplicate-id-evaluate",
                        after: "duplicate-id-after"
                    }, {
                        id: "aria-label",
                        evaluate: "aria-label-evaluate"
                    }, {
                        id: "aria-labelledby",
                        evaluate: "aria-labelledby-evaluate"
                    }, {
                        id: "avoid-inline-spacing",
                        evaluate: "avoid-inline-spacing-evaluate",
                        options: {
                            cssProperties: [ "line-height", "letter-spacing", "word-spacing" ]
                        }
                    }, {
                        id: "button-has-visible-text",
                        evaluate: "has-text-content-evaluate"
                    }, {
                        id: "doc-has-title",
                        evaluate: "doc-has-title-evaluate"
                    }, {
                        id: "exists",
                        evaluate: "exists-evaluate"
                    }, {
                        id: "has-alt",
                        evaluate: "has-alt-evaluate"
                    }, {
                        id: "has-visible-text",
                        evaluate: "has-text-content-evaluate"
                    }, {
                        id: "important-letter-spacing",
                        evaluate: "inline-style-property-evaluate",
                        options: {
                            cssProperty: "letter-spacing",
                            minValue: .12
                        }
                    }, {
                        id: "important-line-height",
                        evaluate: "inline-style-property-evaluate",
                        options: {
                            multiLineOnly: true,
                            cssProperty: "line-height",
                            minValue: 1.5,
                            normalValue: 1
                        }
                    }, {
                        id: "important-word-spacing",
                        evaluate: "inline-style-property-evaluate",
                        options: {
                            cssProperty: "word-spacing",
                            minValue: .16
                        }
                    }, {
                        id: "is-on-screen",
                        evaluate: "is-on-screen-evaluate"
                    }, {
                        id: "non-empty-alt",
                        evaluate: "attr-non-space-content-evaluate",
                        options: {
                            attribute: "alt"
                        }
                    }, {
                        id: "non-empty-if-present",
                        evaluate: "non-empty-if-present-evaluate"
                    }, {
                        id: "non-empty-placeholder",
                        evaluate: "attr-non-space-content-evaluate",
                        options: {
                            attribute: "placeholder"
                        }
                    }, {
                        id: "non-empty-title",
                        evaluate: "attr-non-space-content-evaluate",
                        options: {
                            attribute: "title"
                        }
                    }, {
                        id: "non-empty-value",
                        evaluate: "attr-non-space-content-evaluate",
                        options: {
                            attribute: "value"
                        }
                    }, {
                        id: "presentational-role",
                        evaluate: "presentational-role-evaluate"
                    }, {
                        id: "role-none",
                        evaluate: "matches-definition-evaluate",
                        deprecated: true,
                        options: {
                            matcher: {
                                attributes: {
                                    role: "none"
                                }
                            }
                        }
                    }, {
                        id: "role-presentation",
                        evaluate: "matches-definition-evaluate",
                        deprecated: true,
                        options: {
                            matcher: {
                                attributes: {
                                    role: "presentation"
                                }
                            }
                        }
                    }, {
                        id: "svg-non-empty-title",
                        evaluate: "svg-non-empty-title-evaluate"
                    }, {
                        id: "caption-faked",
                        evaluate: "caption-faked-evaluate"
                    }, {
                        id: "html5-scope",
                        evaluate: "html5-scope-evaluate"
                    }, {
                        id: "same-caption-summary",
                        evaluate: "same-caption-summary-evaluate"
                    }, {
                        id: "scope-value",
                        evaluate: "scope-value-evaluate",
                        options: {
                            values: [ "row", "col", "rowgroup", "colgroup" ]
                        }
                    }, {
                        id: "td-has-header",
                        evaluate: "td-has-header-evaluate"
                    }, {
                        id: "td-headers-attr",
                        evaluate: "td-headers-attr-evaluate"
                    }, {
                        id: "th-has-data-cells",
                        evaluate: "th-has-data-cells-evaluate"
                    }, {
                        id: "hidden-content",
                        evaluate: "hidden-content-evaluate"
                    } ]
                });
            })(true ? window : 0);
        },
        3529: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
            "use strict";
            __webpack_require__.d(__webpack_exports__, {
                d: () => convertDateToSeconds
            });
            const convertDateToSeconds = date => Math.floor(new Date(date).getTime() / 1e3);
        },
        4787: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
            "use strict";
            __webpack_require__(9906);
        },
        9490: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
            "use strict";
            __webpack_require__(8412);
            var _deque_billing_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7968);
            const defaultExtensionInfo = {
                ufaStateLimit: 100
            };
            _deque_billing_utils__WEBPACK_IMPORTED_MODULE_1__.ProductSlugs.axeDevToolsExtension;
        },
        6825: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
            "use strict";
            __webpack_require__.d(__webpack_exports__, {
                Z: () => getAxeServerUrl
            });
            async function getAxeServerUrl() {
                const {axeServerURL} = await browser.storage.local.get("axeServerURL");
                return !axeServerURL || "default" === axeServerURL ? "https://axe.deque.com" : axeServerURL;
            }
        },
        7426: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
            "use strict";
            __webpack_require__.d(__webpack_exports__, {
                Z: () => __WEBPACK_DEFAULT_EXPORT__
            });
            var _dates_and_times__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3529);
            const isLoggedOutAndWithinExpiration = (session, proExpiry) => {
                const now = (0, _dates_and_times__WEBPACK_IMPORTED_MODULE_0__.d)(new Date);
                if (!proExpiry) return false;
                const loggedOut = !(null !== session && void 0 !== session && session.expires_at) || (null === session || void 0 === session ? void 0 : session.expires_at) < now;
                const result = loggedOut && proExpiry > now;
                return result;
            };
            const __WEBPACK_DEFAULT_EXPORT__ = isLoggedOutAndWithinExpiration;
        },
        467: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
            "use strict";
            __webpack_require__.d(__webpack_exports__, {
                Sj: () => updateAllExtensions,
                Wp: () => getAuthCode,
                aA: () => getSSOConfig,
                xJ: () => extendSession
            });
            __webpack_require__(7968);
            var _shared_bridge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2257);
            __webpack_require__(2833);
            __webpack_require__(8176);
            __webpack_require__(7322);
            var _shared_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(7426);
            var _shared_utils_get_axe_server_url__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(6825);
            __webpack_require__(9490);
            function ownKeys(e, r) {
                var t = Object.keys(e);
                if (Object.getOwnPropertySymbols) {
                    var o = Object.getOwnPropertySymbols(e);
                    r && (o = o.filter((function(r) {
                        return Object.getOwnPropertyDescriptor(e, r).enumerable;
                    }))), t.push.apply(t, o);
                }
                return t;
            }
            function _objectSpread(e) {
                for (var r = 1; r < arguments.length; r++) {
                    var t = null != arguments[r] ? arguments[r] : {};
                    r % 2 ? ownKeys(Object(t), !0).forEach((function(r) {
                        _defineProperty(e, r, t[r]);
                    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach((function(r) {
                        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
                    }));
                }
                return e;
            }
            function _defineProperty(e, r, t) {
                return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
                    value: t,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : e[r] = t, e;
            }
            function _toPropertyKey(t) {
                var i = _toPrimitive(t, "string");
                return "symbol" == typeof i ? i : i + "";
            }
            function _toPrimitive(t, r) {
                if ("object" != typeof t || !t) return t;
                var e = t[Symbol.toPrimitive];
                if (void 0 !== e) {
                    var i = e.call(t, r || "default");
                    if ("object" != typeof i) return i;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === r ? String : Number)(t);
            }
            const now = () => Math.floor(Date.now() / 1e3);
            let broadcastChannel;
            function getAuthBroadcastChannel() {
                if (!broadcastChannel) broadcastChannel = new BroadcastChannel("auth");
                return broadcastChannel;
            }
            const updateAllExtensions = (topic, message) => {
                getAuthBroadcastChannel();
                if (broadcastChannel.postMessage) broadcastChannel.postMessage({
                    topic,
                    message
                });
                _shared_bridge__WEBPACK_IMPORTED_MODULE_1__.J.send(_shared_bridge__WEBPACK_IMPORTED_MODULE_1__.D.background, topic, message);
            };
            let warningTimer = null;
            let logoutTimer = null;
            const TWO_MINUTES = 120;
            const updateTimeoutTimer = session => {
                if (warningTimer || logoutTimer) clearTimers();
                if (!session) return;
                const timeLeft = 1e3 * (session.refresh_expires_at - now() - TWO_MINUTES);
                warningTimer = setTimeout((() => {
                    updateAllExtensions("auth:session", _objectSpread(_objectSpread({}, session), {}, {
                        expires_in: session.expires_at - now(),
                        refresh_expires_in: session.refresh_expires_at - now()
                    }));
                }), timeLeft);
                logoutTimer = setTimeout((() => {
                    logout();
                }), 1e3 * (session.refresh_expires_at - now()));
            };
            const handleUpdatedSession = updatedSession => {
                const session = _objectSpread(_objectSpread({}, updatedSession), {}, {
                    expires_at: now() + updatedSession.expires_in,
                    refresh_expires_at: now() + updatedSession.refresh_expires_in
                });
                updateAllExtensions("auth:session", session);
                updateTimeoutTimer(session);
                browser.storage.local.set({
                    session
                });
            };
            const logout = async () => {
                const logoutProperties = [ "sso-config", "session", "user" ];
                try {
                    const [{"sso-config": ssoConfig, session, user}, {proExpiry}] = await Promise.all([ browser.storage.local.get(logoutProperties), browser.storage.sync.get("proExpiry") ]);
                    await fetch(ssoConfig.logoutUrl, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        body: encodeURI(`client_id=${ssoConfig.publicClientId}&refresh_token=${session.refresh_token}`)
                    });
                    const isLoggedOutAndAuthorized = (0, _shared_utils__WEBPACK_IMPORTED_MODULE_6__.Z)(null, proExpiry);
                    if (!isLoggedOutAndAuthorized) logoutProperties.push("cachedUserEmail");
                    await browser.storage.local.remove(logoutProperties);
                    const cachedUserInfo = {};
                    if (null !== user && void 0 !== user && user.company) cachedUserInfo.cachedUserCompany = user.company;
                    if (null !== user && void 0 !== user && user.email && isLoggedOutAndAuthorized) cachedUserInfo.cachedUserEmail = user.email;
                    if (Object.keys(cachedUserInfo).length) await browser.storage.local.set(cachedUserInfo);
                    updateAllExtensions("auth:logout");
                    clearTimers();
                    _shared_bridge__WEBPACK_IMPORTED_MODULE_1__.J.send(_shared_bridge__WEBPACK_IMPORTED_MODULE_1__.D.background, "extension:logout");
                } catch (error) {
                    const {message} = error;
                    updateAllExtensions("auth:error", message);
                }
            };
            const clearTimers = () => {
                clearTimeout(warningTimer);
                clearTimeout(logoutTimer);
            };
            const getAuthCode = url => {
                if (!(url instanceof URL)) url = new URL(url);
                const queryCode = url.searchParams.get("code");
                const fragmentCode = url.hash ? new URLSearchParams(url.hash.substr(1)).get("code") : null;
                return queryCode || fragmentCode || null;
            };
            const getSSOConfig = async () => {
                const axeUrl = await (0, _shared_utils_get_axe_server_url__WEBPACK_IMPORTED_MODULE_7__.Z)();
                const res = await fetch(`${axeUrl}/api/sso-config`);
                if (!res.ok) throw new Error(`Unable to get SSO config (${res.statusCode})`);
                const {url, realm, publicClientId} = await res.json();
                return {
                    url,
                    realm,
                    publicClientId,
                    openIdConnectUrl: `${url}/auth/realms/${realm}/protocol/openid-connect`
                };
            };
            const extendSession = async () => {
                const {session, "sso-config": ssoConfig} = await browser.storage.local.get();
                if (!session) return;
                const params = {
                    grant_type: "refresh_token",
                    refresh_token: session.refresh_token,
                    client_id: ssoConfig.publicClientId
                };
                const res = await fetch(ssoConfig.tokenUrl, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded"
                    },
                    body: encodeURI(Object.entries(params).map((([key, value]) => `${key}=${value}`)).join("&"))
                });
                if (401 === res.status || 400 === res.status) {
                    logout();
                    return;
                }
                if (200 !== res.status) updateAllExtensions("auth:error", "Unexpected error");
                const updatedSession = await res.json();
                handleUpdatedSession(updatedSession);
                return updatedSession;
            };
            _shared_bridge__WEBPACK_IMPORTED_MODULE_1__.J.listen("app:logout", logout);
        },
        5974: (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) => {
            "use strict";
            var assert = __webpack_require__(9619);
            var assert_default = __webpack_require__.n(assert);
            var remove_trailing_slash = __webpack_require__(7160);
            var remove_trailing_slash_default = __webpack_require__.n(remove_trailing_slash);
            var bridge = __webpack_require__(2257);
            var analytics = __webpack_require__(2833);
            var user_roles = __webpack_require__(8176);
            const parsedUrlWithoutHash = url => {
                try {
                    const parsedUrl = new URL(url);
                    return url.replace(parsedUrl.hash, "");
                } catch (ex) {
                    return url;
                }
            };
            var auth = __webpack_require__(467);
            function isValidTabId(tabId) {
                return "number" === typeof tabId && tabId >= 0;
            }
            var distinct_id = __webpack_require__(6507);
            var get_axe_server_url = __webpack_require__(6825);
            __webpack_require__(7378);
            var main = __webpack_require__(5981);
            const featuresCache = new Map;
            let featuresRequest = null;
            const fetchFeatures = async axeServerUrl => {
                if (!featuresRequest) featuresRequest = fetch(`${axeServerUrl}/api/internal/features`).then((res => {
                    assert_default()(res.ok, `Feature flag API responded with ${res.status}`);
                    return res.json();
                })).catch((ex => {
                    featuresRequest = null;
                    if (!(ex instanceof TypeError && "Failed to fetch" === ex.message)) throw ex;
                }));
                const {features} = await featuresRequest;
                featuresCache.set(axeServerUrl, features);
                featuresRequest = null;
                return features;
            };
            async function flushLocalStorage() {
                try {
                    const storage = await browser.storage.local.get();
                    await Promise.all(Object.keys(storage).filter((key => key.startsWith("feature:"))).map((key => browser.storage.local.remove(key))));
                } catch (e) {
                    main.fy.logger.error("Failed to clear feature flags from local storage", {
                        error: e.message,
                        stack: e.stack
                    });
                }
            }
            async function getClient() {
                return {
                    async variation(featureId, defaultValue = false) {
                        const featureKey = `feature:${featureId}`;
                        try {
                            const axeServerUrl = await (0, get_axe_server_url.Z)();
                            let features = featuresCache.get(axeServerUrl);
                            if (!features) {
                                featuresCache.clear();
                                features = await fetchFeatures(axeServerUrl);
                                if (null !== features) await flushLocalStorage();
                            }
                            const feature = features.find((({id}) => id === featureId));
                            const {[featureKey]: storageValue} = await browser.storage.local.get(featureKey);
                            const value = feature ? feature.state : "boolean" !== typeof storageValue ? defaultValue : storageValue;
                            await browser.storage.local.set({
                                [featureKey]: value
                            });
                            return value;
                        } catch (ex) {}
                        const storage = await browser.storage.local.get(featureKey);
                        return (storage || {}).hasOwnProperty(featureKey) ? !!storage[featureKey] : defaultValue;
                    },
                    clearCache() {
                        featuresCache.clear();
                        flushLocalStorage();
                        featuresRequest = null;
                    }
                };
            }
            async function getFeature(featureId, defaultValue = false) {
                const client = await getClient();
                return client.variation(featureId, defaultValue);
            }
            var axe_api = __webpack_require__(5581);
            var request_error_handler = __webpack_require__(4295);
            var lib = __webpack_require__(2607);
            const saveErrorMessage = lib.ZP`There was a problem saving your results. Please try again.`;
            const fetchErrorMessage = lib.ZP`There was a problem fetching your results. Please try again.`;
            const deleteErrorMessage = lib.ZP`Failed to delete user flow. Please try again.`;
            function attachUserFlowAnalysisListeners() {
                bridge.J.listen("user-flow-analysis:save-results", (async ({message: {id, results, extensionVersion}, tabId}) => {
                    try {
                        return await axe_api.Z.put(`/api/axe-devtools-pro/user-flows/${id}/results`, {
                            results,
                            axe_extension_version: extensionVersion
                        }, {
                            jsonResponse: false
                        });
                    } catch (e) {
                        (0, request_error_handler.Z)(tabId, e, saveErrorMessage);
                        return null;
                    }
                }));
                bridge.J.listen("user-flow-analysis:create", (async ({message, tabId}) => {
                    try {
                        return await axe_api.Z.post("/api/axe-devtools-pro/user-flows", message);
                    } catch (e) {
                        (0, request_error_handler.Z)(tabId, e, saveErrorMessage);
                        return null;
                    }
                }));
                bridge.J.listen("user-flow-analysis:get", (async ({message: {id}, tabId}) => {
                    try {
                        return await axe_api.Z.get(`/api/axe-devtools-pro/user-flows/${id}`);
                    } catch (e) {
                        (0, request_error_handler.Z)(tabId, e, fetchErrorMessage);
                        return null;
                    }
                }));
                bridge.J.listen("user-flow-analysis:get-results", (async ({message: {id}, tabId}) => {
                    try {
                        return await axe_api.Z.get(`/api/axe-devtools-pro/user-flows/${id}/results`);
                    } catch (e) {
                        (0, request_error_handler.Z)(tabId, e, fetchErrorMessage);
                        return null;
                    }
                }));
                bridge.J.listen("user-flow-analysis:update", (async ({message, tabId}) => {
                    try {
                        return await axe_api.Z.put(`/api/axe-devtools-pro/user-flows/${message.id}`, message);
                    } catch (e) {
                        (0, request_error_handler.Z)(tabId, e, saveErrorMessage);
                        return null;
                    }
                }));
                bridge.J.listen("user-flow-analysis:delete", (async ({message: {id}, tabId}) => {
                    try {
                        await axe_api.Z["delete"](`/api/axe-devtools-pro/user-flows/${id}`);
                        return true;
                    } catch (e) {
                        (0, request_error_handler.Z)(tabId, e, deleteErrorMessage);
                        return null;
                    }
                }));
            }
            const {NODE_ENV, IS_AXE_PRO, AXE_PRO_URL} = {
                NODE_ENV: "production",
                COCONUT: "false",
                EDGE: "false",
                FIREFOX: "true",
                IS_AXE_PRO: "false",
                MANIFEST_VERSION: 2,
                E2E: false,
                DOCS_SITE_URL: "https://docs.deque.com/devtools-html",
                ISSUES_URL: "https://docs.deque.com/issue-help/1.0.0/en",
                AXE_CONFIG_URL: "https://docs.deque.com/devtools-server/4.0.0/en/axe-configuration",
                MANUAL_ISSUE_URL: "https://docs.deque.com/devtools-html/4.0.0/en/devtools-manual-issue",
                WHATS_LEFT_TO_TEST_URL: "https://docs.deque.com/devtools-html/4.0.0/en/devtools-whatslefttotest",
                USER_FLOW_URL: "https://docs.deque.com/devtools-html/4.0.0/en/user-flow-analysis",
                AXE_PRO_TRIAL_PATH: "/axe-devtools-pro/trial",
                ENV: "production",
                AXE_PRO_URL: "https://axe.deque.com",
                USAGE_SERVICE_URL: "https://usage.deque.com",
                AMPLITUDE_API_KEY: "a1ce09d0b14ddcc12ab7b508b6606a2f",
                DATADOG_CLIENT_TOKEN: "puba2eb4ed47c6eb69ce20ef237db754ff8"
            };
            const isAxePro = "true" === IS_AXE_PRO;
            bridge.J.listen("identify-content-frame", (({frameId}) => frameId));
            if ("undefined" !== typeof globalThis.document && "undefined" !== typeof globalThis.XMLHttpRequest) (0, 
            analytics.L5)();
            browser.tabs.onUpdated.addListener(((tabId, changeInfo, {url, title}) => {
                if (changeInfo.url || changeInfo.title) bridge.J.send(bridge.D.devtools, "page-info:change", {
                    url: parsedUrlWithoutHash(url),
                    title
                }, {
                    tabId
                });
            }));
            bridge.J.listen("get-distinct-id", (async () => await (0, distinct_id.Z)()));
            const onLoginStateChange = () => browser.storage.local.remove("cachedDistinctId");
            bridge.J.listen("auth:login", onLoginStateChange);
            bridge.J.listen("devtools:open", (async ({tabId}) => {
                if (!isValidTabId(tabId)) return;
                const {url, title} = await browser.tabs.get(tabId);
                bridge.J.send(bridge.D.devtools, "page-info:init", {
                    url,
                    title
                }, {
                    tabId
                });
            }));
            if ("production" === NODE_ENV || "test" === NODE_ENV) {
                const axeServerURL = remove_trailing_slash_default()(AXE_PRO_URL);
                browser.runtime.onInstalled.addListener((async ({reason}) => {
                    if ("install" === reason) {
                        if ("ChromePuppeteerE2E" !== navigator.userAgent) {
                            const {name, installType, version} = await browser.management.getSelf();
                            console.log('[%s @ %s] installed with "%s".', name, version, installType);
                            (0, analytics.N9)({
                                enterpriseInstall: [ "admin", "other" ].includes(installType)
                            });
                            if (isAxePro) browser.tabs.create({
                                active: true,
                                url: `${axeServerURL}/install-success`
                            });
                        }
                    } else if ("update" === reason) bridge.J.send(bridge.D.devtools, "extension:update");
                }));
                if (isAxePro) browser.runtime.setUninstallURL(`${axeServerURL}/uninstalled`);
            }
            bridge.J.listen("get-send-metrics", (async () => {
                const storageTTL = 60 * 60;
                const now = Date.now();
                let {shouldSendMetrics, shouldSendMetricsDeadline = 0} = await browser.storage.local.get([ "shouldSendMetrics", "shouldSendMetricsDeadline" ]);
                if (void 0 !== shouldSendMetrics || now < shouldSendMetricsDeadline) return shouldSendMetrics;
                try {
                    let {axeServerURL} = await browser.storage.local.get("axeServerURL");
                    const sendMetrics = await fetch(`${"default" === axeServerURL ? AXE_PRO_URL : axeServerURL}/api/extension/collect-user-data`, {
                        redirect: "follow"
                    });
                    shouldSendMetrics = await sendMetrics.json();
                    browser.storage.local.set({
                        shouldSendMetrics,
                        shouldSendMetricsDeadline: now + storageTTL
                    });
                    (0, analytics.Cu)(shouldSendMetrics);
                    return shouldSendMetrics;
                } catch (ex) {
                    return false;
                }
            }));
            if (isAxePro) {
                attachUserFlowAnalysisListeners();
                __webpack_require__(5917);
                bridge.J.listen("navigate", (async ({tabId, message: url}) => browser.tabs.update(tabId, {
                    url
                })));
                bridge.J.listen("get-auth-code", (async ({message: {loginUrl}}) => {
                    try {
                        const res = await fetch(loginUrl);
                        assert_default()(res.ok);
                        return (0, auth.Wp)(res.url);
                    } catch (ex) {
                        (0, analytics.w1)("Unable to fetch auth code", {
                            exception: ex
                        });
                    }
                    return;
                }));
                bridge.J.listen("get-sso-config", (async ({message}) => {
                    const axeServerURL = await (0, get_axe_server_url.Z)();
                    const {socialProvider, redirectPath} = message;
                    try {
                        const {url, realm, publicClientId, openIdConnectUrl} = await (0, auth.aA)();
                        const redirectUrl = new URL(`${axeServerURL}${redirectPath || ""}`);
                        const authURL = new URL(`${openIdConnectUrl}/auth`);
                        redirectUrl.searchParams.set("fromextension", "true");
                        if (socialProvider) redirectUrl.searchParams.set("socialProvider", socialProvider);
                        authURL.searchParams.set("redirect_uri", redirectUrl.href);
                        authURL.searchParams.set("client_id", publicClientId);
                        authURL.searchParams.set("response_type", "code");
                        authURL.searchParams.set("response_mode", "query");
                        authURL.searchParams.set("scope", "openid");
                        const ssoConfig = {
                            authUrl: url,
                            realm,
                            publicClientId,
                            redirectUrl: redirectUrl.href,
                            loginUrl: authURL.href,
                            logoutUrl: `${openIdConnectUrl}/logout`,
                            tokenUrl: `${openIdConnectUrl}/token`
                        };
                        await browser.storage.local.set({
                            "sso-config": ssoConfig
                        });
                        return ssoConfig;
                    } catch (ex) {
                        return {
                            error: true
                        };
                    }
                }));
                bridge.J.listen("get-session", (async ({message}) => {
                    const {tokenUrl, code, publicClientId, redirectUri} = message;
                    const formData = new FormData;
                    formData.append("code", code);
                    formData.append("grant_type", "authorization_code");
                    formData.append("client_id", publicClientId);
                    formData.append("redirect_uri", redirectUri);
                    const searchParams = new URLSearchParams(formData).toString();
                    const tokenResponse = await fetch(tokenUrl, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        body: searchParams
                    });
                    return tokenResponse.json();
                }));
                bridge.J.listen("get-session-user", (async ({message}) => {
                    const {access_token} = message;
                    const {axeServerURL} = await browser.storage.local.get("axeServerURL");
                    const userResponse = await fetch(`${"default" === axeServerURL ? AXE_PRO_URL : axeServerURL}/api/logged-in`, {
                        headers: {
                            Authorization: `Bearer ${access_token}`
                        }
                    });
                    const user = await userResponse.json();
                    const userJobRole = user && user.roles && user.roles.find((r => user_roles.Z.map((role => role.name)).includes(r)));
                    if (userJobRole) browser.storage.local.set({
                        userJobRole
                    });
                    return user;
                }));
                bridge.J.listen("app:logout", (async () => {
                    const tabs = await browser.tabs.query({});
                    tabs.forEach((({id: tabId}) => {
                        bridge.J.send(bridge.D.devtools, "app:logout", null, {
                            tabId
                        });
                    }));
                }));
                bridge.J.listen("extension:logout", (async () => {
                    const tabs = await browser.tabs.query({});
                    tabs.forEach((({id: tabId}) => {
                        bridge.J.send(bridge.D.content, "extension:logout", null, {
                            tabId
                        });
                    }));
                }));
                bridge.J.listen("guided:cross-origin-feature", (async () => getFeature("cross_origin_partial_page_scan")));
            }
            bridge.J.listen("analyze:scoped", (async () => {
                const {enableOffline, sentAnalyticsScoped, axeServerURL, session = {}} = await browser.storage.local.get([ "enableOffline", "sentAnalyticsScoped", "axeServerURL", "session" ]);
                if (sentAnalyticsScoped || enableOffline) return;
                const axeUrl = "default" === axeServerURL ? AXE_PRO_URL : axeServerURL;
                try {
                    const res = await fetch(`${axeUrl}/api/analytics`, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            Authorization: `Bearer ${session.access_token}`
                        },
                        body: JSON.stringify({
                            event_name: "axe_first_scoped_test_date"
                        })
                    });
                    if (res.ok) browser.storage.local.set({
                        sentAnalyticsScoped: true
                    });
                } catch (err) {}
            }));
            bridge.J.listen("app:plan:change", (() => {
                (0, auth.Sj)("app:plan:get");
            }));
            bridge.J.listen("run-advanced-rules", (async ({message: {advancedRuleInput, screenshotId}, tabId}) => {
                try {
                    return await axe_api.Z.post(`/api/axe-devtools-pro/advanced-rules`, {
                        advancedRuleInput,
                        screenshotId
                    });
                } catch (e) {
                    (0, request_error_handler.Z)(tabId, e, lib.ZP`There was a problem running advanced rules. Please try again.`);
                }
            }));
        },
        2249: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
            "use strict";
            __webpack_require__.d(__webpack_exports__, {
                q_: () => getBrowserType
            });
            const isEdge = "false" === "true";
            const isFirefox = "true" === "true";
            const isCoconut = "false" === "true";
            const getBrowserType = () => {
                if (isEdge) return "edge";
                if (isFirefox) return "firefox";
                if (isCoconut) return "coconut";
                return "chrome";
            };
            let application;
            if (isCoconut) application = "coconut"; else application = isFirefox ? "AxeFirefox" : isEdge ? "AxeEdge" : "AxeChrome";
        },
        5581: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
            "use strict";
            __webpack_require__.d(__webpack_exports__, {
                Z: () => axe_api
            });
            var assert = __webpack_require__(9619);
            var assert_default = __webpack_require__.n(assert);
            var lib = __webpack_require__(2607);
            var uuid = __webpack_require__(1719);
            var dist = __webpack_require__(1274);
            var auth = __webpack_require__(467);
            var src_browser = __webpack_require__(6292);
            var browser_default = __webpack_require__.n(src_browser);
            const debug = browser_default()("request-interception");
            const methods = [ "get", "post", "put", "delete" ];
            const RequestInterception = function() {
                const handlers = new Map(methods.map((method => [ method, [] ])));
                const intercept = (method, path, data) => {
                    const normalizedMethod = method.toLowerCase();
                    if (!methods.includes(normalizedMethod)) return false;
                    for (const {pattern, handler} of handlers.get(normalizedMethod)) {
                        const urlPattern = new URLPattern({
                            pathname: pattern
                        });
                        const [endpoint, queryString] = path.split("?");
                        const matching = urlPattern.exec(endpoint, "https://axe.deque.com");
                        if (matching) {
                            const params = matching.pathname.groups;
                            const query = Object.fromEntries(new URLSearchParams(queryString));
                            debug(`${normalizedMethod} ${pattern}`, {
                                endpoint,
                                params,
                                query,
                                body: data
                            });
                            return handler(data, {
                                endpoint,
                                params,
                                query
                            });
                        }
                    }
                };
                for (const method of methods) this[method] = (pattern, handler) => {
                    if (methods.includes(method)) {
                        const methodHandlers = handlers.get(method);
                        handlers.set(method, [ ...methodHandlers, {
                            pattern,
                            handler
                        } ]);
                    }
                    return this;
                };
                this.intercept = intercept;
                return this;
            };
            const request_interception = RequestInterception;
            new Error("timeout while waiting for mutex to become available");
            new Error("mutex already locked");
            const E_CANCELED = new Error("request for lock canceled");
            var __awaiter$2 = false || function(thisArg, _arguments, P, generator) {
                function adopt(value) {
                    return value instanceof P ? value : new P((function(resolve) {
                        resolve(value);
                    }));
                }
                return new (P || (P = Promise))((function(resolve, reject) {
                    function fulfilled(value) {
                        try {
                            step(generator.next(value));
                        } catch (e) {
                            reject(e);
                        }
                    }
                    function rejected(value) {
                        try {
                            step(generator["throw"](value));
                        } catch (e) {
                            reject(e);
                        }
                    }
                    function step(result) {
                        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
                    }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                }));
            };
            class Semaphore {
                constructor(_value, _cancelError = E_CANCELED) {
                    this._value = _value;
                    this._cancelError = _cancelError;
                    this._weightedQueues = [];
                    this._weightedWaiters = [];
                }
                acquire(weight = 1) {
                    if (weight <= 0) throw new Error(`invalid weight ${weight}: must be positive`);
                    return new Promise(((resolve, reject) => {
                        if (!this._weightedQueues[weight - 1]) this._weightedQueues[weight - 1] = [];
                        this._weightedQueues[weight - 1].push({
                            resolve,
                            reject
                        });
                        this._dispatch();
                    }));
                }
                runExclusive(callback, weight = 1) {
                    return __awaiter$2(this, void 0, void 0, (function*() {
                        const [value, release] = yield this.acquire(weight);
                        try {
                            return yield callback(value);
                        } finally {
                            release();
                        }
                    }));
                }
                waitForUnlock(weight = 1) {
                    if (weight <= 0) throw new Error(`invalid weight ${weight}: must be positive`);
                    return new Promise((resolve => {
                        if (!this._weightedWaiters[weight - 1]) this._weightedWaiters[weight - 1] = [];
                        this._weightedWaiters[weight - 1].push(resolve);
                        this._dispatch();
                    }));
                }
                isLocked() {
                    return this._value <= 0;
                }
                getValue() {
                    return this._value;
                }
                setValue(value) {
                    this._value = value;
                    this._dispatch();
                }
                release(weight = 1) {
                    if (weight <= 0) throw new Error(`invalid weight ${weight}: must be positive`);
                    this._value += weight;
                    this._dispatch();
                }
                cancel() {
                    this._weightedQueues.forEach((queue => queue.forEach((entry => entry.reject(this._cancelError)))));
                    this._weightedQueues = [];
                }
                _dispatch() {
                    var _a;
                    for (let weight = this._value; weight > 0; weight--) {
                        const queueEntry = null === (_a = this._weightedQueues[weight - 1]) || void 0 === _a ? void 0 : _a.shift();
                        if (!queueEntry) continue;
                        const previousValue = this._value;
                        const previousWeight = weight;
                        this._value -= weight;
                        weight = this._value + 1;
                        queueEntry.resolve([ previousValue, this._newReleaser(previousWeight) ]);
                    }
                    this._drainUnlockWaiters();
                }
                _newReleaser(weight) {
                    let called = false;
                    return () => {
                        if (called) return;
                        called = true;
                        this.release(weight);
                    };
                }
                _drainUnlockWaiters() {
                    for (let weight = this._value; weight > 0; weight--) {
                        if (!this._weightedWaiters[weight - 1]) continue;
                        this._weightedWaiters[weight - 1].forEach((waiter => waiter()));
                        this._weightedWaiters[weight - 1] = [];
                    }
                }
            }
            var __awaiter$1 = false || function(thisArg, _arguments, P, generator) {
                function adopt(value) {
                    return value instanceof P ? value : new P((function(resolve) {
                        resolve(value);
                    }));
                }
                return new (P || (P = Promise))((function(resolve, reject) {
                    function fulfilled(value) {
                        try {
                            step(generator.next(value));
                        } catch (e) {
                            reject(e);
                        }
                    }
                    function rejected(value) {
                        try {
                            step(generator["throw"](value));
                        } catch (e) {
                            reject(e);
                        }
                    }
                    function step(result) {
                        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
                    }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                }));
            };
            class Mutex {
                constructor(cancelError) {
                    this._semaphore = new Semaphore(1, cancelError);
                }
                acquire() {
                    return __awaiter$1(this, void 0, void 0, (function*() {
                        const [, releaser] = yield this._semaphore.acquire();
                        return releaser;
                    }));
                }
                runExclusive(callback) {
                    return this._semaphore.runExclusive((() => callback()));
                }
                isLocked() {
                    return this._semaphore.isLocked();
                }
                waitForUnlock() {
                    return this._semaphore.waitForUnlock();
                }
                release() {
                    if (this._semaphore.isLocked()) this._semaphore.release();
                }
                cancel() {
                    return this._semaphore.cancel();
                }
            }
            function ownKeys(e, r) {
                var t = Object.keys(e);
                if (Object.getOwnPropertySymbols) {
                    var o = Object.getOwnPropertySymbols(e);
                    r && (o = o.filter((function(r) {
                        return Object.getOwnPropertyDescriptor(e, r).enumerable;
                    }))), t.push.apply(t, o);
                }
                return t;
            }
            function _objectSpread(e) {
                for (var r = 1; r < arguments.length; r++) {
                    var t = null != arguments[r] ? arguments[r] : {};
                    r % 2 ? ownKeys(Object(t), !0).forEach((function(r) {
                        _defineProperty(e, r, t[r]);
                    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach((function(r) {
                        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
                    }));
                }
                return e;
            }
            function _defineProperty(e, r, t) {
                return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
                    value: t,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : e[r] = t, e;
            }
            function _toPropertyKey(t) {
                var i = _toPrimitive(t, "string");
                return "symbol" == typeof i ? i : i + "";
            }
            function _toPrimitive(t, r) {
                if ("object" != typeof t || !t) return t;
                var e = t[Symbol.toPrimitive];
                if (void 0 !== e) {
                    var i = e.call(t, r || "default");
                    if ("object" != typeof i) return i;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === r ? String : Number)(t);
            }
            const APP_DATA_KEY = "appData";
            const mutex = new Mutex;
            class AppData {
                constructor() {
                    this.set = async (data, key) => this.setAppData(data, key, false);
                    this.update = async (data, key) => this.setAppData(data, key, true);
                }
                async setAppData(data, key, update) {
                    return await mutex.runExclusive((async () => {
                        let {[APP_DATA_KEY]: appData = {}} = await browser.storage.local.get(APP_DATA_KEY);
                        if (key) appData[key] = update ? _objectSpread(_objectSpread({}, appData[key]), data) : data; else appData = data;
                        await browser.storage.local.set({
                            [APP_DATA_KEY]: appData
                        });
                        return key ? appData[key] : appData;
                    }));
                }
                async get(key) {
                    return await mutex.runExclusive((async () => {
                        const {[APP_DATA_KEY]: appData = {}} = await browser.storage.local.get(APP_DATA_KEY);
                        return key ? appData[key] : appData;
                    }));
                }
                async clear() {
                    await browser.storage.local.remove(APP_DATA_KEY);
                }
            }
            const app_data = AppData;
            function _objectWithoutProperties(e, t) {
                if (null == e) return {};
                var o, r, i = _objectWithoutPropertiesLoose(e, t);
                if (Object.getOwnPropertySymbols) {
                    var s = Object.getOwnPropertySymbols(e);
                    for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
                }
                return i;
            }
            function _objectWithoutPropertiesLoose(r, e) {
                if (null == r) return {};
                var t = {};
                for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
                    if (e.includes(n)) continue;
                    t[n] = r[n];
                }
                return t;
            }
            function axe_api_ownKeys(e, r) {
                var t = Object.keys(e);
                if (Object.getOwnPropertySymbols) {
                    var o = Object.getOwnPropertySymbols(e);
                    r && (o = o.filter((function(r) {
                        return Object.getOwnPropertyDescriptor(e, r).enumerable;
                    }))), t.push.apply(t, o);
                }
                return t;
            }
            function axe_api_objectSpread(e) {
                for (var r = 1; r < arguments.length; r++) {
                    var t = null != arguments[r] ? arguments[r] : {};
                    r % 2 ? axe_api_ownKeys(Object(t), !0).forEach((function(r) {
                        axe_api_defineProperty(e, r, t[r]);
                    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : axe_api_ownKeys(Object(t)).forEach((function(r) {
                        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
                    }));
                }
                return e;
            }
            function axe_api_defineProperty(e, r, t) {
                return (r = axe_api_toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
                    value: t,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : e[r] = t, e;
            }
            function axe_api_toPropertyKey(t) {
                var i = axe_api_toPrimitive(t, "string");
                return "symbol" == typeof i ? i : i + "";
            }
            function axe_api_toPrimitive(t, r) {
                if ("object" != typeof t || !t) return t;
                var e = t[Symbol.toPrimitive];
                if (void 0 !== e) {
                    var i = e.call(t, r || "default");
                    if ("object" != typeof i) return i;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === r ? String : Number)(t);
            }
            const axe_api_mutex = new Mutex;
            const MINUTE_BUFFER = 60 * 1e3;
            const appData = new app_data;
            const getUserTests = async (_, {query}) => {
                var _query$tags;
                const userTestsPattern = new URLPattern({
                    pathname: "/api/tests/:testId"
                });
                const data = await appData.get();
                const userTests = [];
                const tags = (null === (_query$tags = query.tags) || void 0 === _query$tags ? void 0 : _query$tags.split(",")) || [];
                for (const [key, value] of Object.entries(data)) if (userTestsPattern.test(key, "https://axe.deque.com")) {
                    const currentManifestIds = dist.manifestUtils.getCurrentManifestIds(dist.manifestUtils.getManifestRerunGroups(value.manifests || []));
                    const currentIssues = value.issues.filter((issue => !issue.manifest_id || currentManifestIds.has(issue.manifest_id)));
                    const filteredIssues = tags.length ? currentIssues.filter((issue => !!issue.tags.find((tag => tags.includes(tag))))) : currentIssues;
                    userTests.push(axe_api_objectSpread({
                        best_practice_count: currentIssues.filter((issue => {
                            var _issue$tags;
                            return null === (_issue$tags = issue.tags) || void 0 === _issue$tags ? void 0 : _issue$tags.includes("best-practice");
                        })).length,
                        needs_review_count: filteredIssues.filter((issue => !!issue.needs_review)).length,
                        violation_count: filteredIssues.filter((issue => "violation" === issue.variant)).length
                    }, value));
                }
                return userTests.sort(((a, b) => -a.updated_at.localeCompare(b.updated_at)));
            };
            const interception = new request_interception;
            interception.post("/api/tests", (async data => {
                const id = (0, uuid.v4)();
                return await appData.set(axe_api_objectSpread({
                    id,
                    updated_at: (new Date).toISOString(),
                    created_at: (new Date).toISOString(),
                    issues: [],
                    manifests: []
                }, data), `/api/tests/${id}`);
            })).put("/api/tests/:testId", (async (data, {params}) => {
                const key = `/api/tests/${params.testId}`;
                const _await$appData$update = await appData.update(axe_api_objectSpread(axe_api_objectSpread({}, data), {}, {
                    updated_at: (new Date).toISOString()
                }), key), {issues, manifests} = _await$appData$update, test = _objectWithoutProperties(_await$appData$update, [ "issues", "manifests" ]);
                return test;
            })).post("/api/tests/:testId/issues", (async (body, {params}) => {
                const {manifestGuideName, manifestId, test_name, violations} = body;
                const key = `/api/tests/${params.testId}`;
                const test = await appData.get(key);
                const created_at = new Date;
                const validIssues = [];
                for (const issue of violations) {
                    var _issue$stepScope, _issue$stepScope2;
                    validIssues.push(axe_api_objectSpread(axe_api_objectSpread({}, issue), {}, {
                        id: (0, uuid.v4)(),
                        created_at: created_at.toISOString(),
                        test_id: params.testId,
                        test_name: test_name || test.name,
                        test_url: issue.test_url || test.url,
                        manifest_id: manifestId,
                        manifest_scope: (null === (_issue$stepScope = issue.stepScope) || void 0 === _issue$stepScope ? void 0 : _issue$stepScope.name) || null,
                        manifest_index: (null === (_issue$stepScope2 = issue.stepScope) || void 0 === _issue$stepScope2 ? void 0 : _issue$stepScope2.index) || null,
                        manifest_key: issue.stepName,
                        manifest_guide: manifestGuideName
                    }));
                }
                test.issues = [ ...validIssues, ...null === test || void 0 === test ? void 0 : test.issues ];
                await appData.update(test, key);
                return test.issues;
            })).put("/api/tests/:testId/issues/:issueId", (async (data, {params}) => {
                const key = `/api/tests/${params.testId}`;
                const test = await appData.get(key);
                let updatedIssue = {};
                const updatedIssues = null === test || void 0 === test ? void 0 : test.issues.map((issue => {
                    if (issue.id !== params.issueId) return issue;
                    updatedIssue = axe_api_objectSpread(axe_api_objectSpread({}, issue), data);
                    return updatedIssue;
                }));
                await appData.set(axe_api_objectSpread(axe_api_objectSpread({}, test), {}, {
                    issues: updatedIssues
                }), key);
                return updatedIssue;
            })).delete("/api/tests/:testId/issues", (async (data, {params, query}) => {
                const key = `/api/tests/${params.testId}`;
                const test = await appData.get(key);
                const updatedIssues = (null === test || void 0 === test ? void 0 : test.issues.filter((issue => Object.entries(query).every((([queryKey, queryValue]) => {
                    const value = "true" === queryValue || "false" === queryValue ? JSON.parse(queryValue) : queryValue;
                    return issue[queryKey] !== value;
                }))))) || [];
                await appData.set(axe_api_objectSpread(axe_api_objectSpread({}, test), {}, {
                    issues: updatedIssues
                }), key);
            })).post("/api/tests/:testId/manifests", (async (data, {params}) => {
                const key = `/api/tests/${params.testId}`;
                const test = await appData.get(key);
                const manifest = {
                    id: (0, uuid.v4)(),
                    test_id: params.testId,
                    guide: data.guide || data.name,
                    created_at: (new Date).toISOString()
                };
                (test.manifests || []).push(manifest);
                await appData.set(test, key);
                return manifest;
            })).get("/api/tests/:testId/manifests/:manifestId", (async (data, {params}) => {
                const test = await appData.get(`/api/tests/${params.testId}`);
                const manifest = null === test || void 0 === test ? void 0 : test.manifests.find((testManifest => testManifest.id === params.manifestId));
                return manifest || {};
            })).get("/api/tests/:testId/issues", (async (data, {params}) => {
                const test = await appData.get(`/api/tests/${params.testId}`);
                return (null === test || void 0 === test ? void 0 : test.issues) || [];
            })).get("/api/tests/:testId/manifests", (async (data, {params}) => {
                var _test$manifests;
                const test = await appData.get(`/api/tests/${params.testId}`);
                return (null === test || void 0 === test ? void 0 : null === (_test$manifests = test.manifests) || void 0 === _test$manifests ? void 0 : _test$manifests.reduce(((manifests, manifest) => {
                    if (manifest.guide) {
                        const currentManifests = manifests[manifest.guide] || [];
                        const updatedManifests = [ ...currentManifests, manifest ];
                        manifests[manifest.guide] = updatedManifests;
                    }
                    return manifests;
                }), {})) || {};
            })).put("/api/tests/:testId/manifests/:manifestId", (async (data, {params}) => {
                const key = `/api/tests/${params.testId}`;
                const test = await appData.get(key);
                let updatedManifest = {};
                const updatedManifests = null === test || void 0 === test ? void 0 : test.manifests.map((manifest => {
                    if (manifest.id !== params.manifestId) return manifest;
                    updatedManifest = axe_api_objectSpread(axe_api_objectSpread(axe_api_objectSpread({}, manifest), {}, {
                        updated_at: (new Date).toISOString()
                    }, "data" in data && data.data ? {
                        body: data.data
                    } : {}), "name" in data && data.name ? {
                        name: data.name
                    } : {});
                    return updatedManifest;
                }));
                await appData.set(axe_api_objectSpread(axe_api_objectSpread({}, test), {}, {
                    manifests: updatedManifests
                }), key);
                return updatedManifest;
            })).delete("/api/tests/:testId/manifests/:manifestId", (async (_, {params}) => await axe_api_mutex.runExclusive((async () => {
                const key = `/api/tests/${params.testId}`;
                const test = await appData.get(key);
                const manifests = (null === test || void 0 === test ? void 0 : test.manifests) || [];
                const manifest = manifests.find((({id}) => id === params.manifestId));
                let manifestIdsToDelete = new Set([ params.manifestId ]);
                if (manifest) {
                    const manifestRerunGroups = dist.manifestUtils.getManifestRerunGroups(manifests);
                    const manifestsToDelete = dist.manifestUtils.getManifestsToDelete(manifest, manifestRerunGroups);
                    manifestIdsToDelete = new Set(manifestsToDelete.map((manifestToDelete => manifestToDelete.id)));
                }
                const updatedIssues = null === test || void 0 === test ? void 0 : test.issues.filter((issue => !issue.manifest_id || !manifestIdsToDelete.has(issue.manifest_id)));
                const updatedManifests = null === test || void 0 === test ? void 0 : test.manifests.filter((({id}) => !manifestIdsToDelete.has(id)));
                await appData.set(axe_api_objectSpread(axe_api_objectSpread({}, test), {}, {
                    issues: updatedIssues || [],
                    manifests: updatedManifests || []
                }), key);
            })))).get("/api/users/:id/tests", getUserTests).get("/api/axe-devtools-pro/scans", getUserTests).post("/api/analytics", (() => {})).put("*", (async (data, {endpoint}) => appData.set(data, endpoint))).post("*", (async (data, {endpoint}) => appData.update(data, endpoint))).get("*", (async (data, {endpoint}) => appData.get(endpoint))).delete("*", (async (_, {endpoint}) => {
                const data = await appData.get();
                delete data[endpoint];
                await appData.set(data);
            }));
            const isTokenStale = expiresAt => expiresAt < Math.floor(Date.now() / 1e3) - MINUTE_BUFFER;
            const rawRequest = async (method, endpoint, headers, body) => {
                const {axeServerURL, session} = await browser.storage.local.get();
                if (!(null !== session && void 0 !== session && session.access_token)) throw new Error(lib.ZP`You are not logged in and you need to be logged in to perform this action`);
                let updatedAccessToken;
                if (isTokenStale(session.expires_at)) try {
                    const updatedSession = await (0, auth.xJ)();
                    updatedAccessToken = updatedSession.access_token;
                } catch (err) {}
                const response = await fetch(`${"default" === axeServerURL ? "https://axe.deque.com" : axeServerURL}${endpoint}`, {
                    method,
                    headers: axe_api_objectSpread(axe_api_objectSpread({}, headers), {}, {
                        Authorization: `Bearer ${updatedAccessToken || session.access_token}`
                    }),
                    body
                });
                if (401 === response.status) throw new Error("access denied");
                return response;
            };
            const request = async (method, endpoint, data, {jsonResponse = true} = {}) => {
                const {enableOffline} = await browser.storage.local.get("enableOffline");
                if (enableOffline) try {
                    return await interception.intercept(method, endpoint, data);
                } catch (ex) {
                    console.error(ex);
                    throw ex;
                }
                const response = await rawRequest(method, endpoint, axe_api_objectSpread({
                    "Content-Type": "application/json"
                }, jsonResponse ? {
                    Accept: "application/json"
                } : {}), JSON.stringify(data));
                if (204 === response.status) return;
                assert_default()(response.ok);
                if (jsonResponse) return response.json();
                return response.text();
            };
            function get(endpoint, options) {
                return request("GET", endpoint, void 0, options);
            }
            function post(endpoint, data, options) {
                return request("POST", endpoint, data, options);
            }
            function put(endpoint, data, options) {
                return request("PUT", endpoint, data, options);
            }
            function del(endpoint, data, options) {
                return request("DELETE", endpoint, data, options);
            }
            function streamPost(endpoint, headers, body) {
                return rawRequest("POST", endpoint, headers, body);
            }
            function streamGet(endpoint, headers, body) {
                return rawRequest("GET", endpoint, headers, body);
            }
            const axeApi = {
                delete: del,
                get,
                post,
                put,
                stream: {
                    post: streamPost,
                    get: streamGet
                }
            };
            const axe_api = axeApi;
        },
        5917: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, {
                TAB_TIMEOUT: () => TAB_TIMEOUT
            });
            var src_browser = __webpack_require__(6292);
            var browser_default = __webpack_require__.n(src_browser);
            var lib = __webpack_require__(2607);
            const failedToAttach = () => chrome.runtime.lastError && chrome.runtime.lastError.message && "Cannot attach to this target." === chrome.runtime.lastError.message;
            const failed_to_attach = failedToAttach;
            function ownKeys(e, r) {
                var t = Object.keys(e);
                if (Object.getOwnPropertySymbols) {
                    var o = Object.getOwnPropertySymbols(e);
                    r && (o = o.filter((function(r) {
                        return Object.getOwnPropertyDescriptor(e, r).enumerable;
                    }))), t.push.apply(t, o);
                }
                return t;
            }
            function _objectSpread(e) {
                for (var r = 1; r < arguments.length; r++) {
                    var t = null != arguments[r] ? arguments[r] : {};
                    r % 2 ? ownKeys(Object(t), !0).forEach((function(r) {
                        _defineProperty(e, r, t[r]);
                    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach((function(r) {
                        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
                    }));
                }
                return e;
            }
            function _defineProperty(e, r, t) {
                return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
                    value: t,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : e[r] = t, e;
            }
            function _toPropertyKey(t) {
                var i = _toPrimitive(t, "string");
                return "symbol" == typeof i ? i : i + "";
            }
            function _toPrimitive(t, r) {
                if ("object" != typeof t || !t) return t;
                var e = t[Symbol.toPrimitive];
                if (void 0 !== e) {
                    var i = e.call(t, r || "default");
                    if ("object" != typeof i) return i;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === r ? String : Number)(t);
            }
            const debug = browser_default()("debugger:command");
            const debugResponse = browser_default()("debugger:response");
            const CHROME_DEBUGGER_VERSION = "1.3";
            const attach = (tabId = browser.devtools.inspectedWindow.tabId) => new Promise(((resolve, reject) => {
                try {
                    chrome.debugger.attach({
                        tabId
                    }, CHROME_DEBUGGER_VERSION, (() => {
                        try {
                            if (chrome.runtime.lastError) debug(chrome.runtime.lastError.message); else debug(`attach:${tabId}`);
                        } finally {
                            resolve(true);
                        }
                    }));
                } catch {
                    reject();
                }
            }));
            const sendCommand = async (target, command, options) => new Promise((resolve => {
                debug(`[${command}] command:${target.tabId}`, options);
                chrome.debugger.sendCommand(target, command, options, (result => {
                    try {
                        if (chrome.runtime.lastError) debug(chrome.runtime.lastError.message);
                    } finally {
                        debugResponse(`[${command}] command:${target.tabId}`, _objectSpread({}, result));
                        resolve(result);
                    }
                }));
            }));
            const detach = (tabId = browser.devtools.inspectedWindow.tabId) => new Promise(((resolve, reject) => {
                try {
                    chrome.debugger.detach({
                        tabId
                    }, (() => {
                        debug(`detach:${tabId}`);
                        resolve(true);
                    }));
                } catch {
                    reject();
                }
            }));
            async function Tabber_debug(command, opts = {}) {
                return sendCommand(this, command, opts);
            }
            const Tabber_attach = async tabId => {
                await attach(tabId);
                return Promise.resolve(Tabber_debug.bind({
                    tabId
                }));
            };
            class Tabber {
                constructor(tabId) {
                    this.tabId = tabId;
                }
                async start() {
                    this.command = await Tabber_attach(this.tabId);
                    if (failed_to_attach()) throw new Error(browser.runtime.lastError.message);
                    await this.command("Input.enable");
                    await this.fireTab();
                }
                stop() {
                    detach(this.tabId);
                }
                async fireKey(windowsVirtualKeyCode, key) {
                    await this.command("Input.dispatchKeyEvent", {
                        type: "keyDown",
                        windowsVirtualKeyCode,
                        code: key,
                        key
                    });
                    await this.command("Input.dispatchKeyEvent", {
                        type: "keyUp",
                        windowsVirtualKeyCode,
                        code: key,
                        key
                    });
                }
                async fireTab() {
                    await this.fireKey(9, "Tab");
                }
                async fireEscape() {
                    this.command = await Tabber_attach(this.tabId);
                    await this.command("Input.enable");
                    await this.fireKey(27, "Escape");
                    this.stop();
                }
            }
            var bridge = __webpack_require__(2257);
            var axe_api = __webpack_require__(5581);
            var request_error_handler = __webpack_require__(4295);
            function attachRecordListeners() {
                bridge.J.listen("record:get", (async ({message: testId, tabId}) => {
                    if (!testId) return {};
                    try {
                        const [record, issues] = await Promise.all([ axe_api.Z.get(`/api/tests/${testId}`), axe_api.Z.get(`/api/tests/${testId}/issues`) ]);
                        return {
                            record,
                            issues
                        };
                    } catch (ex) {
                        (0, request_error_handler.Z)(tabId, ex, lib.ZP`There was a problem loading your test.`);
                        return {
                            record: {},
                            issues: [],
                            error: true
                        };
                    }
                }));
                bridge.J.listen("records:get", (async ({message, tabId}) => {
                    const {userId, tags, limit, offset, includeNeedsReview = true, includeBestPractice = true, serverAllowsUfa = false} = message;
                    try {
                        const params = new URLSearchParams({
                            limit,
                            offset,
                            needs_review: includeNeedsReview,
                            best_practice: includeBestPractice
                        });
                        if (Array.isArray(tags) && tags.length) params.set("tags", tags.join(","));
                        return await axe_api.Z.get(serverAllowsUfa ? `/api/axe-devtools-pro/scans?${params}` : `/api/users/${userId}/tests?${params}`);
                    } catch (ex) {
                        (0, request_error_handler.Z)(tabId, ex, lib.ZP`There was a problem loading your tests.`);
                        return [];
                    }
                }));
                bridge.J.listen("record:update", (async ({message: record, tabId}) => {
                    try {
                        return await axe_api.Z.put(`/api/tests/${record.id}`, record);
                    } catch (ex) {
                        (0, request_error_handler.Z)(tabId, ex, lib.ZP`There was a problem updating your test.`);
                        return {};
                    }
                }));
                bridge.J.listen("record-issue:update", (async ({message: issue, tabId}) => {
                    try {
                        return await axe_api.Z.put(`/api/tests/${issue.testId}/issues/${issue.id}`, issue);
                    } catch (ex) {
                        (0, request_error_handler.Z)(tabId, ex, lib.ZP`There was a problem updating your issue.`);
                        return {};
                    }
                }));
                bridge.J.listen("record-issue:new", (async ({message: issue, tabId}) => {
                    try {
                        return await axe_api.Z.post(`/api/tests/${issue.test_id}/issues`, {
                            violations: [ issue ]
                        });
                    } catch (ex) {
                        (0, request_error_handler.Z)(tabId, ex, lib.ZP`There was a problem creating your issue.`);
                        return {};
                    }
                }));
                bridge.J.listen("record:delete", (async ({message: {testId, hideNotification = false}, tabId}) => {
                    try {
                        await axe_api.Z["delete"](`/api/tests/${testId}`);
                        if (!hideNotification) bridge.J.send(bridge.D.devtools, "app:notification", {
                            text: lib.ZP`Your test was successfully deleted.`
                        }, {
                            tabId
                        });
                    } catch (ex) {
                        (0, request_error_handler.Z)(tabId, ex, lib.ZP`There was a problem deleting your test.`);
                    }
                }));
            }
            var dlv_umd = __webpack_require__(3152);
            var dlv_umd_default = __webpack_require__.n(dlv_umd);
            const dedupe = (vitals, newVitals) => newVitals.reduce(((noDupes, vital) => {
                if (noDupes.find((v => v.vnodeId === vital.vnodeId))) return noDupes;
                return [ ...noDupes, vital ];
            }), [ ...vitals ]);
            const handleVnodeArray = data => data.reduce(((vitals, vital) => {
                if (vital.vnodes) return [ ...vitals, ...vital.vnodes ];
                return [ ...vitals, vital ];
            }), data);
            function getVitals(vitalKeys = [], manifest) {
                const scope = dlv_umd_default()(manifest, "metadata.scope", {});
                return vitalKeys.reduce(((vitals, vitalKey) => {
                    const data = manifest[vitalKey];
                    if (!data) return vitals;
                    if (data.hasOwnProperty("vnodeId")) return dedupe(vitals, [ data ]);
                    if (Array.isArray(data)) return dedupe(vitals, handleVnodeArray(data));
                    return vitals;
                }), scope ? [ scope ] : []).filter((vnode => "number" === typeof vnode.vnodeId));
            }
            const issueDescriptions = [ {
                id: "alt-text-area-missing",
                descriptions: {
                    en: {
                        shortText: "AREA alt text is missing",
                        description: "An AREA element has no text alternative."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "alt-text-complex-missing",
                descriptions: {
                    en: {
                        shortText: "Short and detailed text alternatives missing for complex image",
                        description: "The complex image is missing both short and detailed text alternatives."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.c",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.1.1.c",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "alt-text-decorative-inappropriate",
                descriptions: {
                    en: {
                        shortText: "The decorative image is not hidden from screen readers",
                        description: "The decorative image is not hidden from screen readers."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.d",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.1.1.d",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "alt-text-different",
                descriptions: {
                    en: {
                        shortText: "Text alternative does not present same info as image",
                        description: "The text alternative does not present the same information as the image."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.1.1.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "alt-text-dynamic-image-inconsistent",
                descriptions: {
                    en: {
                        shortText: "Text alternative does not match dynamically changing informative image",
                        description: "The image is changing dynamically but the text alternative doesn't correspond to the informative image displayed."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.1.1.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "alt-text-dynamic-image-inconsistent-active",
                descriptions: {
                    en: {
                        shortText: "Text alternative does not match dynamically changing active image",
                        description: "The image is changing dynamically but the text alternative doesn't correspond to the active image displayed."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.1.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "alt-text-essential-image-text",
                descriptions: {
                    en: {
                        shortText: "Text alternative does not include essential text in the informative image",
                        description: "The text alternative does not contain the essential text in the informative image, and therefore does not present the same information as the image."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.1.1.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "alt-text-essential-image-text-active",
                descriptions: {
                    en: {
                        shortText: "Text alternative does not include essential text in the active image",
                        description: "The text alternative does not contain the essential text in the active image, and therefore does not present the same information as the image."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.1.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "alt-text-image-map-nonunique",
                descriptions: {
                    en: {
                        shortText: "Non-unique text alternative for image map areas",
                        description: "The text alternative for each area of the image map is not unique."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.4.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.4.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "alt-text-image-text-mismatch",
                descriptions: {
                    en: {
                        shortText: "Alt text does not match text in image",
                        description: "The text alternative does not exactly match text that is embedded in the image."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "1.1.1.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "1.1.1.h",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.1.1.h",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.1.1.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.1.1.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "alt-text-inappropriate",
                descriptions: {
                    en: {
                        shortText: "Text alternative is not appropriate",
                        description: "The text alternative is not appropriate."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.h",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.1.1.h",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "alt-text-inappropriate-captcha",
                descriptions: {
                    en: {
                        shortText: "Text alternative for CAPTCHA is not appropriate",
                        description: "The text alternative for the CAPTCHA image does not describe its purpose."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.g",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.1.1.g",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "alt-text-inconsistent",
                descriptions: {
                    en: {
                        shortText: "Text alternative does not serve same purpose as image",
                        description: "The text alternative does not serve the same purpose as the image."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.1.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "alt-text-longdesc-inadequate",
                descriptions: {
                    en: {
                        shortText: "Detailed alternative description not adequate",
                        description: "The detailed textual description of the complex image is not adequate to convey its full meaning."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.c",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.1.1.c",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "alt-text-longdesc-missing",
                descriptions: {
                    en: {
                        shortText: "Detailed alternative description is missing",
                        description: "The detailed textual description of the complex image is missing."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.c",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.1.1.c",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "alt-text-missing",
                descriptions: {
                    en: {
                        shortText: "Text alternative for the informative image is missing",
                        description: "The text alternative for the informative image is missing."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.1.1.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "alt-text-missing-active",
                descriptions: {
                    en: {
                        shortText: "Text alternative for the active image missing",
                        description: "The text alternative for the active image is missing."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.1.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "alt-text-missing-captcha",
                descriptions: {
                    en: {
                        shortText: "CAPTCHA is missing text alternative",
                        description: "The text alternative for the CAPTCHA image is missing."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.g",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.1.1.g",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "alt-text-missing-media-file",
                descriptions: {
                    en: {
                        shortText: "Media file is missing text alternative",
                        description: "There is no text alternative to describe the media file."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.h",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.1.1.h",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "alt-text-redundancy",
                descriptions: {
                    en: {
                        shortText: "Alt text duplicates adjacent text",
                        description: "The text alternative duplicates the adjacent text."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.d",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.1.1.d",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "alt-text-redundancy-adjacent-link",
                descriptions: {
                    en: {
                        shortText: "Alt text duplicates adjacent link text",
                        description: "The text alternative duplicates the adjacent link text for the same resource/destination."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "1.1.1.d",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.1.1.d",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.1.1.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "alt-text-redundancy-link-text",
                descriptions: {
                    en: {
                        shortText: "Alt text duplicates text of link or button",
                        description: "The text alternative duplicates the text content of the link or button it is inside, and therefore should be null."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "1.1.1.d",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.1.1.d",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.1.1.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "alt-text-short-text-missing",
                descriptions: {
                    en: {
                        shortText: "Short text alternative is missing",
                        description: "A short text alternative for a complex image is missing."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.c",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.1.1.c",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "alt-text-short-text-not-meaningful",
                descriptions: {
                    en: {
                        shortText: "Short text alternative is not appropriate",
                        description: "The short text alternative for the complex image is not appropriate or meaningful."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.c",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.1.1.c",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "alt-text-too-long",
                descriptions: {
                    en: {
                        shortText: "Alt text is greater than 150 chars",
                        description: "The text alternative is greater than 150 characters."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "1.1.1.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "1.1.1.c",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "1.1.1.g",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "1.1.1.h",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.1.1.h",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.1.1.g",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.1.1.c",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.1.1.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.1.1.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "alt-text-trademark",
                descriptions: {
                    en: {
                        shortText: "Alt text does not reference trademark",
                        description: "The text alternative does not include text to represent the trademark, service mark, registered trademark or copyright symbol that is embedded in the image."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "1.1.1.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "1.1.1.c",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "1.1.1.g",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "1.1.1.h",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.1.1.h",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.1.1.g",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.1.1.c",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.1.1.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.1.1.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "alt-text-verbose",
                descriptions: {
                    en: {
                        shortText: "Alt text is too verbose",
                        description: "The text alternative should succinctly describe the content without being too verbose."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "1.1.1.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "1.1.1.c",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "1.1.1.g",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "1.1.1.h",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.1.1.h",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.1.1.g",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.1.1.c",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.1.1.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.1.1.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "aria-attribute-invalid",
                descriptions: {
                    en: {
                        shortText: "States/Properties: Invalid ARIA attribute",
                        description: "The element has an invalid ARIA attribute (a misspelled attribute or one that does not exist)."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "aria-attribute-missing",
                descriptions: {
                    en: {
                        shortText: "States/Properties: Required ARIA attribute missing",
                        description: "The element is missing an ARIA attribute that is required for its role."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "aria-attribute-value-invalid",
                descriptions: {
                    en: {
                        shortText: "States/Properties: Invalid ARIA attribute value",
                        description: "The element's ARIA attribute has an invalid value (a misspelled value or one that is not valid for the attribute)."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "aria-custom-button-spacebar",
                descriptions: {
                    en: {
                        shortText: "Custom ARIA button does not activate with spacebar",
                        description: "An element that visually appears like a button and has an ARIA role of button does not function the same as a native button because only the enter key activates it, not the spacebar."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 3
                } ]
            }, {
                id: "aria-invalid-missing",
                descriptions: {
                    en: {
                        shortText: "Field with data entry error missing aria-invalid",
                        description: 'The field has a data entry error but is missing aria-invalid="true"'
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-3.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "aria-landmark-not-used",
                descriptions: {
                    en: {
                        shortText: "Missing ARIA landmarks",
                        description: "ARIA landmarks are not used to define the sections of the page."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.1.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.4.1.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "aria-landmark-outside",
                descriptions: {
                    en: {
                        shortText: "Element not within ARIA landmark",
                        description: "ARIA landmarks are not used to define every section of the page. The element is not within an ARIA landmark."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.1.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.4.1.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "aria-name-missing-incorrect",
                descriptions: {
                    en: {
                        shortText: "Name: The element's name is missing or incorrect",
                        description: "The element's accessible name is missing or is not appropriate for the element's purpose."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "aria-not-used",
                descriptions: {
                    en: {
                        shortText: "Missing ARIA on dynamic widget",
                        description: "ARIA is not used to indicate Name, Role, Value and State on a dynamic widget. (It does work with keyboard alone, and screen readers. Name, Role, State and Value are provided via HTML.)"
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "aria-region-not-labeled",
                descriptions: {
                    en: {
                        shortText: "Missing label on region landmark",
                        description: 'The section with generic role="region" is not labelled.'
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "aria-required-child-missing",
                descriptions: {
                    en: {
                        shortText: "Role: Required ARIA child role missing",
                        description: "The element's ARIA role requires that other elements with specific roles be contained within it. At least one child role is missing."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "aria-required-missing",
                descriptions: {
                    en: {
                        shortText: "Required field missing aria-required",
                        description: 'The field is required but is missing aria-required="true"'
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.2.c",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-3.3.2.c",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "aria-required-parent-missing",
                descriptions: {
                    en: {
                        shortText: "Role: Required ARIA parent role missing",
                        description: "The element's ARIA role requires that it be contained inside a parent element with a specific role. The parent role is missing."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "aria-role-invalid",
                descriptions: {
                    en: {
                        shortText: "Role: Invalid ARIA role value",
                        description: "The element's role attribute has an invalid value (a misspelled value or one that does not exist)."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "aria-role-missing",
                descriptions: {
                    en: {
                        shortText: "Role: The element's role is missing or incorrect",
                        description: "The element's role is missing or is not appropriate for the element's function."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "aria-state-property-missing",
                descriptions: {
                    en: {
                        shortText: "States/Properties: The element has missing or incorrect states or properties",
                        description: "The element has missing or incorrect states or properties that are necessary for screen reader users to interact with or understand the content conveyed by the element."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "asterisk-instruction-missing",
                descriptions: {
                    en: {
                        shortText: "Instruction to describe meaning of * is missing",
                        description: 'Asterisks are used to indicate required form fields, but an instruction like "Fields marked with * are required." is missing.'
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.2.c",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-3.3.2.c",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "audio-autoplay",
                descriptions: {
                    en: {
                        shortText: "Missing stop/pause mechanism for auto-playing audio",
                        description: "Audio starts playing automatically, lasts more than 3 seconds, and does not have an accessible mechanism to stop, pause, mute or adjust the volume of the audio."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.4.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "audio-description-hard-to-find",
                descriptions: {
                    en: {
                        shortText: "Audio description is hard to find",
                        description: "An audio described version of the video is provided but it is difficult to locate."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.3.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "1.2.5.a",
                    standards: [ "wcag2aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.2.5.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.2.3.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "audio-description-inadequate",
                descriptions: {
                    en: {
                        shortText: "Audio description is incorrect or inadequate",
                        description: "The audio description provided is not correct or is inadequate."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.3.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.2.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "audio-description-inadequate-aa",
                descriptions: {
                    en: {
                        shortText: "Audio description is incorrect or inadequate",
                        description: "The audio description provided is not correct or is inadequate."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.5.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.2.5.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "audio-description-missing",
                descriptions: {
                    en: {
                        shortText: "Audio description is not available",
                        description: "An audio description is not provided."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.5.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.2.5.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "auth-requires-cognitive-function",
                descriptions: {
                    en: {
                        shortText: "Authentication requires a non-exempted cognitive function test",
                        description: "Authentication process requires the completion of a non-exempted cognitive function test and no mechanism is available to assist the user in completing the cognitive function test."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.8.a",
                    standards: [ "wcag22aa" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-3.3.8.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "auth-show-password",
                descriptions: {
                    en: {
                        shortText: "Unable to show/hide password",
                        description: "User is unable to show/hide password typed into a password field."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.7.a",
                    standards: [ "wcag22aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-3.3.7.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "button-acts-like-link",
                descriptions: {
                    en: {
                        shortText: "Button acts like link",
                        description: "Button acts like a link, Activating this button only changes browser focus or URL. Buttons should activate scripted functionality."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "button-link-nested",
                descriptions: {
                    en: {
                        shortText: "Anchor or button nested inside other anchor or button",
                        description: "Nesting an anchor or button inside another anchor or button fails validation and may cause troubles for keyboard and screen reader users."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "button-looks-like-link",
                descriptions: {
                    en: {
                        shortText: "Button looks like link",
                        description: "Button looks like a link, but activating this element triggers scripted functionality without changing browser focus or URL."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "button-missing-role",
                descriptions: {
                    en: {
                        shortText: "Button: Button does not have a role",
                        description: "The button does not have a role."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "button-name-inaccessible",
                descriptions: {
                    en: {
                        shortText: "Button: Button does not have a name",
                        description: "The button is missing an accessible name/label. As a result its functionality or purpose is not conveyed to screen reader users."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "button-role-name-missing",
                descriptions: {
                    en: {
                        shortText: "Button: Button is missing both a role and a name",
                        description: "The button is missing both a role and an accessible name/label."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "button-state-disabled",
                descriptions: {
                    en: {
                        shortText: "State: The disabled state of an element is not conveyed",
                        description: "The disabled state of an element is not conveyed to screen reader users."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "button-state-pressed",
                descriptions: {
                    en: {
                        shortText: "Button: Button pressed state is not conveyed",
                        description: "The pressed state of a button is not conveyed to screen reader users."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "button-value-text-mismatch",
                descriptions: {
                    en: {
                        shortText: "Button's programmatic name and visible text label not identical",
                        description: "The button has a very minor mismatch between its programmatic name and the visual text label. While not identical, the programmatic name does convey the purpose of the button."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.6.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-2.4.6.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "buttons-confusing",
                descriptions: {
                    en: {
                        shortText: "Controls have same name but different actions",
                        description: "Multiple controls have the same labels/names but perform different actions. This is not conveyed via text associated with individual controls."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.6.b",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.4.6.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "captcha-requires-vision",
                descriptions: {
                    en: {
                        shortText: "CAPTCHA task has only one option",
                        description: "There is only one option for the CAPTCHA task and it requires vision to complete it successfully."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.g",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.1.1.g",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "captions-inadequate",
                descriptions: {
                    en: {
                        shortText: "Captions for recorded media are incorrect or inadequate",
                        description: "Captions are provided for recorded media, but they are incorrect or inadequate."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.2.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "captions-inadequate-live",
                descriptions: {
                    en: {
                        shortText: "Captions for live media are incorrect or inadequate",
                        description: "Captions are provided for live media, but they are incorrect or inadequate."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.4.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.2.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "captions-incomplete",
                descriptions: {
                    en: {
                        shortText: "Captions for recorded media do not contain all dialogue",
                        description: "Captions are provided for recorded media, but some of the dialogue is missing."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.2.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "captions-incomplete-live",
                descriptions: {
                    en: {
                        shortText: "Captions for live media do not contain all dialogue",
                        description: "Captions are provided for live media, but some of the dialogue is missing."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.4.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.2.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "captions-missing",
                descriptions: {
                    en: {
                        shortText: "Captions are not available for recorded multimedia",
                        description: "Captions are not provided for the recorded multimedia content."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.2.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "captions-missing-live",
                descriptions: {
                    en: {
                        shortText: "Captions are not available for live multimedia",
                        description: "Captions are not provided for the live multimedia content."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.4.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.2.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "captions-not-clearly-visible",
                descriptions: {
                    en: {
                        shortText: "Caption text for recorded multimedia has inadequate contrast",
                        description: "Captions are provided for recorded multimedia, but they are difficult to read due to poor contrast between the captions and their background."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.2.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "captions-not-clearly-visible-live",
                descriptions: {
                    en: {
                        shortText: "Caption text for live multimedia has inadequate contrast",
                        description: "Captions are provided for live multimedia, but they are difficult to read due to poor contrast between the captions and their background."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.4.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.2.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "captions-not-synchronized",
                descriptions: {
                    en: {
                        shortText: "Captions for recorded multimedia are not synchronized",
                        description: "Captions are provided for recorded multimedia, but they are not synchronized with the multimedia."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.2.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "captions-not-synchronized-live",
                descriptions: {
                    en: {
                        shortText: "Captions for live multimedia are not synchronized",
                        description: "Captions are provided for live multimedia, but they are not synchronized with the multimedia."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.4.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.2.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "captions-undescribed-effects",
                descriptions: {
                    en: {
                        shortText: "Captions for recorded multimedia do not describe important sounds",
                        description: "Captions are provided for recorded multimedia, but they do not describe all important sound effects."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.2.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "captions-undescribed-effects-live",
                descriptions: {
                    en: {
                        shortText: "Captions for live multimedia do not describe important sounds",
                        description: "Captions are provided for live multimedia, but they do not describe all important sound effects."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.4.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.2.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "captions-unidentified-speakers",
                descriptions: {
                    en: {
                        shortText: "Captions for recorded multimedia do not identify all speakers",
                        description: "Captions are provided for recorded multimedia, but they do not identify all the speakers."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.2.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "captions-unidentified-speakers-live",
                descriptions: {
                    en: {
                        shortText: "Captions for live multimedia do not identify all speakers",
                        description: "Captions are provided for live multimedia, but they do not identify all the speakers."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.4.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.2.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "change-of-context-not-requested",
                descriptions: {
                    en: {
                        shortText: "A change of context not requested",
                        description: "A change of context occurs without the user initiating it."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.2.5.a",
                    standards: [ "wcag2aaa", "aenb-77" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-3.2.5.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "checkbox-missing-role-state",
                descriptions: {
                    en: {
                        shortText: "Checkbox: Custom checkbox does not have a role and/or state",
                        description: "The custom checkbox element is missing a role and/or checked state."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "content-auto-play",
                descriptions: {
                    en: {
                        shortText: "Auto-playing media or animation has no mechanism to pause, stop, or hide",
                        description: "Auto-playing media or animation has no mechanism to pause, stop, or hide the content."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.2.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.2.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "content-blink",
                descriptions: {
                    en: {
                        shortText: "Blinking content is present",
                        description: "The element uses a BLINK element or text-decoration: blink."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.2.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.2.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "content-carousel-unstoppable",
                descriptions: {
                    en: {
                        shortText: "Carousel has no stop/pause mechanism",
                        description: "The carousel does not have a mechanism to pause, stop, or control the changing content."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.2.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.2.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "content-disappears",
                descriptions: {
                    en: {
                        shortText: "Content visually appears and disappears with no ability to adjust timing",
                        description: "Content visually appears for a short time and then disappears. The user has no way to adjust when the content visually appears or disappears. Examples of content include error messages, success messages, and updating headlines."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.2.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.2.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "content-does-not-remain-visible",
                descriptions: {
                    en: {
                        shortText: "Content does not remain visible",
                        description: "Additional content does not remain visible until dismissed or invalid."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.13.a",
                    standards: [ "wcag21aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.13.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "content-flashing",
                descriptions: {
                    en: {
                        shortText: "Flashing content is present",
                        description: "The element flashes more than 3 times per second, but is small enough or dim enough that it probably will not cause seizures."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.3.1.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.3.1.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 3
                } ]
            }, {
                id: "content-flashing-big",
                descriptions: {
                    en: {
                        shortText: "Large flashing content is present",
                        description: "Content flashes more than 3 times per second and exceeds 25% of 10 degrees of visual field in area."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.3.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 5
                }, {
                    checkpoint: "en301549-9-2.3.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 5
                } ]
            }, {
                id: "content-flashing-no-exception",
                descriptions: {
                    en: {
                        shortText: "Content flashes more than 3 times per second below threshold",
                        description: "Content flashes more than 3 times per second but is below threshold."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.3.2.a",
                    standards: [ "wcag2aaa", "aenb-77" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "content-horizontal-scroll",
                descriptions: {
                    en: {
                        shortText: "Content does not reflow to fit 320px width equivalent",
                        description: "Content does not reflow to fit horizontally within the viewport when the page is adjusted to an equivalent width of 320px."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.10.a",
                    standards: [ "wcag21aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.10.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "content-hover-disappears",
                descriptions: {
                    en: {
                        shortText: "Hover content disappearing",
                        description: "Additional content that becomes available on hover does not allow the user to move the pointer over that same additional content without the additional content disappearing."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.13.a",
                    standards: [ "wcag21aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.13.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "content-marquee",
                descriptions: {
                    en: {
                        shortText: "Marquee element is present",
                        description: "A MARQUEE element is present."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.2.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.2.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "content-motion-uninterruptible",
                descriptions: {
                    en: {
                        shortText: "Moving/blinking content has no pause/stop mechanism",
                        description: "Moving or blinking content that lasts more than 5 seconds does not have a mechanism to pause, stop or hide it."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.2.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.2.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "content-not-dismissible",
                descriptions: {
                    en: {
                        shortText: "Additional content not dismissible",
                        description: "Failure to make additional content dismissible without moving pointer hover or keyboard focus."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.13.a",
                    standards: [ "wcag21aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.13.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "content-reflow-content-lost",
                descriptions: {
                    en: {
                        shortText: "Info or functionality is lost due to overlapping content at 320px equivalent",
                        description: "Information or functionality is lost due to overlapping content when the page is adjusted to an equivalent width of 320px."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.10.a",
                    standards: [ "wcag21aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.10.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "content-reflow-content-missing",
                descriptions: {
                    en: {
                        shortText: "Info or functionality is unavailable at 320px width equivalent",
                        description: "Information or functionality is unavailable when the page is adjusted to an equivalent width of 320px."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.10.a",
                    standards: [ "wcag21aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.10.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "content-restricts-input-mechanisms",
                descriptions: {
                    en: {
                        shortText: "Content restricts input modalities.",
                        description: "Content restricts input modalities."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.5.6.a",
                    standards: [ "wcag21aaa", "aenb-77" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.5.6.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "content-too-wide",
                descriptions: {
                    en: {
                        shortText: "Content requires excessive horizontal scrolling when enlarged",
                        description: "Viewing all the content requires horizontal scrolling when the page content is resized to 200%."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.4.a",
                    standards: [ "wcag2aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.4.4.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "content-updates-uninterruptible",
                descriptions: {
                    en: {
                        shortText: "No control mechanism provided for automatically updating content",
                        description: "Automatically updating content does not have a mechanism to pause, stop, hide, or control the timing of the updates."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.2.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.2.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "contextual-help-not-present",
                descriptions: {
                    en: {
                        shortText: "Input is missing context-sensitive help",
                        description: "Input is missing context-sensitive help."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.5.a",
                    standards: [ "wcag2aaa", "aenb-77" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-3.3.5.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "contrast-focus-3-1",
                descriptions: {
                    en: {
                        shortText: "Visual focus lacks 3 to 1 contrast ratio",
                        description: "The visual focus indicator does not have a color contrast ratio of at least 3 to 1."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.3.b",
                    standards: [ "wcag2aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "2.4.7.a",
                    standards: [ "wcag2aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.4.7.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.4.3.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "contrast-focus-4.5-1",
                descriptions: {
                    en: {
                        shortText: "Visual focus lacks 4.5 to 1 contrast ratio",
                        description: "The visual focus indicator does not have a color contrast ratio of at least 4.5 to 1."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.3.a",
                    standards: [ "wcag2aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "2.4.7.a",
                    standards: [ "wcag2aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "1.4.11.b",
                    standards: [ "wcag2aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.4.11.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.4.7.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.4.3.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "contrast-focus-indicator",
                descriptions: {
                    en: {
                        shortText: "Focus indicator lacks 3 to 1 contrast ratio",
                        description: "Focus indicator lacks 3 to 1 contrast ratio."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.11.b",
                    standards: [ "wcag21aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.11.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "contrast-graphical-objects-3-1",
                descriptions: {
                    en: {
                        shortText: "Graphical object lacks 3 to 1 contrast ratio",
                        description: "Parts of graphics (required to understand the content) do not have a contrast ratio of 3 to 1 against adjacent color(s)."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.11.c",
                    standards: [ "wcag21aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.11.c",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "contrast-graphical-objects-3-1-plus-text",
                descriptions: {
                    en: {
                        shortText: "Graphical object with text lacks 3 to 1 contrast ratio",
                        description: "A graphical object has visible text that conveys the same information as the graphical object. The graphical object (non-text) does not have at least a 3 to 1 color contrast ratio."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.11.c",
                    standards: [ "wcag21aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.4.11.c",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "contrast-graphical-objects-anti-aliasing",
                descriptions: {
                    en: {
                        shortText: "Graphical object contrast anti-aliasing",
                        description: "A graphical object does not have a 3 to 1 luminosity contrast ratio with an adjacent background color due to browser rendering, smoothing or anti-aliasing."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.11.c",
                    standards: [ "wcag21aa" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.4.11.c",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "contrast-graphical-objects-both-3-1",
                descriptions: {
                    en: {
                        shortText: "Graphical object lacks 3 to 1 contrast with both",
                        description: "A graphical object does not have at least a 3 to 1 luminosity contrast ratio with both the inner and outer adjacent background colors."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.11.c",
                    standards: [ "wcag21aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.4.11.c",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "contrast-graphical-objects-flag",
                descriptions: {
                    en: {
                        shortText: "Flag graphical object lacks 3 to 1 contrast",
                        description: "A flag (like for state, country, or organization) that is part of a graphical object does not have a 3 to 1 luminosity contrast ratio."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.11.c",
                    standards: [ "wcag21aa" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.4.11.c",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "contrast-graphical-objects-icon-3-1",
                descriptions: {
                    en: {
                        shortText: "An icon lacks 3 to 1 contrast ratio",
                        description: "Parts of an icon (with no text) do not have a contrast ratio of 3 to 1 against adjacent color(s). These icon parts are required for understanding."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.11.c",
                    standards: [ "wcag21aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.11.c",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "contrast-graphical-objects-line-cross",
                descriptions: {
                    en: {
                        shortText: "Crossing data lines lack 3 to 1 contrast",
                        description: "A line chart has different color data lines. Each data line has a symbol at each data point so it does not rely on color alone. When two of the data lines cross, that intersection does not have a 3 to 1 luminosity contrast ratio."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.11.c",
                    standards: [ "wcag21aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.4.11.c",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "contrast-graphical-objects-logo",
                descriptions: {
                    en: {
                        shortText: "Logo graphical object lacks 3 to 1 contrast",
                        description: "A graphical object that is part of a logo does not have a 3 to 1 luminosity contrast ratio."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.11.c",
                    standards: [ "wcag21aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.4.11.c",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "contrast-icon-3-1",
                descriptions: {
                    en: {
                        shortText: "Active icon lacks 3 to 1 contrast ratio",
                        description: "The non-text visual information in the meaningful or active icon does not have a color contrast ratio of at least 3 to 1."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.3.b",
                    standards: [ "wcag2aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "1.4.3.a",
                    standards: [ "wcag2aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.4.3.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.4.3.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "contrast-icon-4.5-1",
                descriptions: {
                    en: {
                        shortText: "Active icon lacks 4.5 to 1 contrast ratio",
                        description: "The non-text visual information in the meaningful or active icon does not have a color contrast ratio of at least 4.5 to 1."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.3.a",
                    standards: [ "wcag2aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "1.4.11.a",
                    standards: [ "wcag2aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "1.4.11.c",
                    standards: [ "wcag2aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.4.11.c",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.4.11.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.4.3.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "contrast-link-infocus-3-1",
                descriptions: {
                    en: {
                        shortText: "Large control text lacks 3:1 contrast ratio on hover or focus",
                        description: "The contrast ratio between a control's large text and its background is not at least 3:1 on hover and/or on focus."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.3.b",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.3.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "contrast-link-infocus-4.5-1",
                descriptions: {
                    en: {
                        shortText: "Control text lacks 4.5:1 contrast ratio on hover or focus",
                        description: "The contrast ratio between a control's text and its background is not at least 4.5:1 on hover and/or on focus"
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.3.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "contrast-optional-disabled-controls",
                descriptions: {
                    en: {
                        shortText: "Not an issue: Disabled/Inactive contrast",
                        description: "Text or images of text that are part of an inactive user interface component have no contrast requirement."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.3.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 0
                }, {
                    checkpoint: "1.4.3.b",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 0
                }, {
                    checkpoint: "en301549-9-1.4.3.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 0
                }, {
                    checkpoint: "en301549-9-1.4.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 0
                } ]
            }, {
                id: "contrast-optional-logotype",
                descriptions: {
                    en: {
                        shortText: "Not an issue: Logotype contrast",
                        description: "Text that is part of a logo or brand name has no minimum contrast requirement."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.3.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 0
                }, {
                    checkpoint: "1.4.3.b",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 0
                }, {
                    checkpoint: "en301549-9-1.4.3.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 0
                }, {
                    checkpoint: "en301549-9-1.4.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 0
                } ]
            }, {
                id: "contrast-text-3-1",
                descriptions: {
                    en: {
                        shortText: "Large text content lacks 3:1 contrast ratio",
                        description: "The contrast ratio between large text and its background is not at least 3:1."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.3.b",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.3.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "contrast-text-3-1-over-image",
                descriptions: {
                    en: {
                        shortText: "Large text over an image lacks 3:1 contrast ratio",
                        description: "All or portions of large text over an image do not meet the minimum 3:1 contrast requirement."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.3.b",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.3.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "contrast-text-4.5-1",
                descriptions: {
                    en: {
                        shortText: "Text content lacks 4.5:1 contrast ratio",
                        description: "The contrast ratio between text and its background is not at least 4.5:1."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.3.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "contrast-text-4.5-1-over-image",
                descriptions: {
                    en: {
                        shortText: "Text over an image lacks 4.5:1 contrast ratio",
                        description: "All or portions of text over an image do not meet the minimum 4.5:1 contrast requirement."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.3.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "contrast-text-4.5-1-placeholder",
                descriptions: {
                    en: {
                        shortText: "Placeholder text lacks 4.5:1 contrast ratio",
                        description: "The contrast ratio between placeholder text and its background is not at least 4.5:1."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.3.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "contrast-uic-active-3-1",
                descriptions: {
                    en: {
                        shortText: "Active user interface component lacks 3 to 1 contrast ratio",
                        description: "The visual boundary of an active user interface component lacks 3 to 1 contrast ratio."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.11.a",
                    standards: [ "wcag21aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.11.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "contrast-uic-active-3-1-state",
                descriptions: {
                    en: {
                        shortText: "State of active component lacks 3 to 1 contrast ratio",
                        description: "The state of an active component lacks 3 to 1 contrast ratio."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.11.b",
                    standards: [ "wcag21aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.11.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "contrast-uic-active-both-3-1",
                descriptions: {
                    en: {
                        shortText: "Active user interface component lacks 3 to 1 contrast with both",
                        description: "The visual boundary of an active user interface component does not have at least a 3 to 1 luminosity contrast ratio with both the inner and outer adjacent background colors."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.11.a",
                    standards: [ "wcag21aa" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.4.11.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "contrast-uic-active-both-3-1-state",
                descriptions: {
                    en: {
                        shortText: "State of active component lacks 3 to 1 contrast with both",
                        description: "The visual state of an active user interface component does not have at least a 3 to 1 luminosity contrast ratio with both the inner and outer adjacent background colors."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.11.b",
                    standards: [ "wcag21aa" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.4.11.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "contrast-uic-active-browser-default",
                descriptions: {
                    en: {
                        shortText: "Active user interface component contrast browser default",
                        description: "An active user interface component is rendered using the browser default. The default browser rendering of this user interface component does not meet the 3 to 1 luminosity contrast ratio."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.11.a",
                    standards: [ "wcag21aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.4.11.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "contrast-uic-active-browser-default-back",
                descriptions: {
                    en: {
                        shortText: "Default color of component and author background contrast",
                        description: "An active user interface component is rendered using the browser default. The background color has been changed (is not the browser default). The color contrast between the default color of the user interface component and the author chosen background does not meet the 3 to 1 luminosity contrast ratio."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.11.a",
                    standards: [ "wcag21aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.4.11.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "contrast-uic-active-browser-default-back-state",
                descriptions: {
                    en: {
                        shortText: "Default color of component state and author background contrast",
                        description: "The visual state of an active user interface component is rendered using the browser default. The background color has been changed (is not the browser default). The color contrast between the default color of the visual state and the author chosen background does not meet the 3 to 1 luminosity contrast ratio."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.11.b",
                    standards: [ "wcag21aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.4.11.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "contrast-uic-active-browser-default-state",
                descriptions: {
                    en: {
                        shortText: "State of active component contrast browser default",
                        description: "The visual state of an active user interface component is rendered using the browser default. The default browser rendering of this visual state does not meet the 3 to 1 luminosity contrast ratio."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.11.b",
                    standards: [ "wcag21aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.4.11.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "contrast-uic-active-inactive",
                descriptions: {
                    en: {
                        shortText: "Contrast between active and inactive components not 3 to 1",
                        description: "The contrast between active components and inactive components is not at least 3 to 1."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.11.a",
                    standards: [ "wcag21aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.4.11.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "contrast-uic-active-no-visual",
                descriptions: {
                    en: {
                        shortText: "Active user interface component no visual boundary",
                        description: "An active user interface component does not have a visual boundary."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.11.a",
                    standards: [ "wcag21aa" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.4.11.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "contrast-uic-inactive-3-1",
                descriptions: {
                    en: {
                        shortText: "Inactive user interface component lacks 3 to 1 contrast ratio",
                        description: "The visual boundary of an INACTIVE user interface component does not have at least a 3 to 1 luminosity contrast ratio with an adjacent background."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.11.a",
                    standards: [ "wcag21aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.4.11.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "contrast-uic-state-anti-aliasing",
                descriptions: {
                    en: {
                        shortText: "State of active component contrast anti-aliasing",
                        description: "The visual state of an active user interface component does not have a 3 to 1 luminosity contrast ratio with an adjacent background color due to browser rendering, smoothing or anti-aliasing."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.11.b",
                    standards: [ "wcag21aa" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.4.11.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "contrast-uic-states",
                descriptions: {
                    en: {
                        shortText: "Contrast between the states of a component is not 3 to 1",
                        description: "The contrast between the visual states of the user interface component is not at least 3 to 1."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.11.b",
                    standards: [ "wcag21aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.4.11.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "custom-accordion",
                descriptions: {
                    en: {
                        shortText: "Accordion/Toggle: Accordion (toggle) is missing appropriate roles and/or attributes",
                        description: "The element appears and functions like an accordion (show/hide toggles) but is missing required ARIA role(s) and/or attribute(s)."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "custom-breadcrumb",
                descriptions: {
                    en: {
                        shortText: "Breadcrumb: Breadcrumb region is missing appropriate roles and/or attributes",
                        description: "The breadcrumb region is missing required ARIA role(s) and/or attribute(s)."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "custom-carousel-current",
                descriptions: {
                    en: {
                        shortText: "Carousel: State of current carousel slide is not conveyed",
                        description: "The state of the currently displayed carousel slide is indicated visually, but this is not conveyed to screen reader users."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "custom-carousel-number",
                descriptions: {
                    en: {
                        shortText: "Carousel: Number of carousel slides is apparent visually but not programmatically",
                        description: "The total number of slides in the carousel is indicated visually, but this is not conveyed to screen readers users."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "custom-combobox",
                descriptions: {
                    en: {
                        shortText: "Combobox: Combobox is missing appropriate roles and/or attributes",
                        description: "The element appears and functions like a combobox but is missing required ARIA role(s) and/or attribute(s)."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "custom-date-picker",
                descriptions: {
                    en: {
                        shortText: "Date Picker: Date picker is missing appropriate roles and/or attributes",
                        description: "The element appears and functions like a date picker but is missing required ARIA role(s) and/or attribute(s)."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "custom-dialog",
                descriptions: {
                    en: {
                        shortText: "Dialog / Alert Dialog: Dialog is missing appropriate role and/or attributes",
                        description: "The element appears and functions like a modal dialog but is missing required ARIA role(s) and/or attribute(s)."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "custom-grid",
                descriptions: {
                    en: {
                        shortText: "Grid: Grid is missing appropriate roles and/or attributes",
                        description: "The element appears and functions like a grid widget but is missing required ARIA role(s) and/or attribute(s)."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "custom-listbox",
                descriptions: {
                    en: {
                        shortText: "Listbox: Listbox is missing appropriate roles and/or attributes - WARNING: VERY RARE",
                        description: "The element appears and functions like a listbox but is missing required ARIA role(s) and/or attribute(s)."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "custom-navigation",
                descriptions: {
                    en: {
                        shortText: "Navigation / Menu: Site navigation or application-style menu is missing appropriate roles and/or attributes",
                        description: "Site navigation or application-style menu is missing required roles and/or attributes."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "custom-not-compatible",
                descriptions: {
                    en: {
                        shortText: "Custom user interface component is not compatible with AT",
                        description: "Custom user interface component is not compatible with AT (see issue Details for more info)."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.c",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.c",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "custom-progressbar",
                descriptions: {
                    en: {
                        shortText: "Progress bar: Progress bar is missing appropriate role and/or attributes",
                        description: "The element appears and functions like a progressbar but is missing required ARIA role(s) and/or attribute(s)."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "custom-role-application",
                descriptions: {
                    en: {
                        shortText: 'Application: role="application" is used inappropriately',
                        description: 'role="application" is used inappropriately.'
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "custom-slider",
                descriptions: {
                    en: {
                        shortText: "Slider: Slider is missing appropriate role and/or attributes",
                        description: "The element appears and functions like a slider but is missing required ARIA role(s) and/or attribute(s)."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "custom-switch",
                descriptions: {
                    en: {
                        shortText: "Switch: Switch is missing appropriate roles and/or attributes",
                        description: "The element appears and functions like a switch but is missing required ARIA role(s) and/or attribute(s)."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "custom-tabs",
                descriptions: {
                    en: {
                        shortText: "Tabs: Tab widget is missing appropriate roles and/or attributes",
                        description: "The element appears and functions like a tab/tabpanel interface but is missing required ARIA role(s) and/or attribute(s)."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "custom-toolbar",
                descriptions: {
                    en: {
                        shortText: "Toolbar: Toolbar is missing appropriate role and/or attributes",
                        description: "The element appears and functions like a toolbar but is missing required ARIA role(s) and/or attribute(s)."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "custom-tooltip",
                descriptions: {
                    en: {
                        shortText: "Tooltip: Tooltip content is not accessible to screen readers",
                        description: "Tooltip content is not accessible to screen readers."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "custom-treeview",
                descriptions: {
                    en: {
                        shortText: "Treeview: File system navigator missing appropriate roles and/or attributes - WARNING: VERY RARE",
                        description: "The element appears and functions like a treeview but is missing required ARIA role(s) and/or attribute(s)."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "dragging-no-alternative",
                descriptions: {
                    en: {
                        shortText: "Functionality requires a dragging movement with no alternative",
                        description: "Functionality requires a dragging movement and does not have a single-pointer, single-touch alternative."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.5.7.a",
                    standards: [ "wcag22aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.5.7.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "dual-role",
                descriptions: {
                    en: {
                        shortText: "The element functions as if it has two roles.",
                        description: "The element functions as if it has two roles. Elements are allowed to have only one functioning role."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-4.1.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "focus-different-device",
                descriptions: {
                    en: {
                        shortText: "Hover indicator different than focus indicator",
                        description: "The mouse hover indicator is different than the keyboard focus indicator."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.7.a",
                    standards: [ "wcag2aa" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-2.4.7.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "focus-errors-elsewhere",
                descriptions: {
                    en: {
                        shortText: "Focus is not moved to error message or field",
                        description: "When a form error message is returned, focus is moved somewhere other than the error message or the first field with an error."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.3.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.4.3.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 3
                } ]
            }, {
                id: "focus-errors-none",
                descriptions: {
                    en: {
                        shortText: "Focus does not move to error message",
                        description: "When a form error message is returned, focus is not moved to the error message."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.3.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.4.3.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 3
                } ]
            }, {
                id: "focus-fully-obscured",
                descriptions: {
                    en: {
                        shortText: "Focused element is completely covered by other content",
                        description: "The focused element is completely covered by other author-created content."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.11.a",
                    standards: [ "wcag22aa" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.4.11.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "focus-fully-visible",
                descriptions: {
                    en: {
                        shortText: "Part of a focus indicator is hidden",
                        description: "Part of an element's focus indicator is hidden by author-created content."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.11.a",
                    standards: [ "wcag22aa" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-2.4.11.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "focus-indicator-missing",
                descriptions: {
                    en: {
                        shortText: "Focus indicator is missing",
                        description: "The visual focus indicator is missing altogether."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.7.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-2.4.7.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "focus-lost",
                descriptions: {
                    en: {
                        shortText: "Keyboard focus is lost or misplaced due to user interaction or content update",
                        description: "Keyboard focus is lost or placed on the wrong element during user interaction, content refresh or update, or other reason."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.3.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.4.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "focus-lost-screen-reader",
                descriptions: {
                    en: {
                        shortText: "Screen reader focus is lost or misplaced due to user interaction or content update",
                        description: "Screen reader focus is lost or placed on the wrong element during user interaction, content refresh or update, or other reason."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "focus-modal-moves-outside",
                descriptions: {
                    en: {
                        shortText: "Keyboard focus is not maintained in modal",
                        description: "Keyboard focus is not maintained within the modal. It is possible to tab out of the modal."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.3.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.4.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "focus-modal-none",
                descriptions: {
                    en: {
                        shortText: "Keyboard focus is not placed on opened modal",
                        description: "When the modal dialog is activated, keyboard focus is not placed on/in it."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.3.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.4.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "focus-modal-none-screen-reader",
                descriptions: {
                    en: {
                        shortText: "Screen reader focus is not placed on opened modal",
                        description: "When the modal dialog is activated, screen reader focus is not placed on/in it."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "focus-modal-not-returned",
                descriptions: {
                    en: {
                        shortText: "Modal is closed, focus is not returned to trigger",
                        description: "When the modal dialog or similar element is closed, keyboard focus is not returned to the triggering element."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.3.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.4.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "focus-modal-not-returned-screen-reader",
                descriptions: {
                    en: {
                        shortText: "Modal is closed, screen reader focus is not returned to trigger",
                        description: "When the modal dialog or similar element is closed, screen reader focus is not returned to the triggering element."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "focus-moves-on-load",
                descriptions: {
                    en: {
                        shortText: "New window opens on page load",
                        description: "Loading the page causes another window to open up unexpectedly and gain focus."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.2.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.2.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "focus-not-clearly-visible",
                descriptions: {
                    en: {
                        shortText: "Focus indicator is not visible",
                        description: "The focus indicator (e.g. border or dotted underline / background etc.) is not visible as one tabs through the page."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.7.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.4.7.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "focus-not-moved",
                descriptions: {
                    en: {
                        shortText: "Keyboard focus does not move to intended target",
                        description: 'Keyboard focus does not follow visual focus or move to the intended target, such as with a "return to top" link.'
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.3.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.4.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "focus-not-moved-screen-reader",
                descriptions: {
                    en: {
                        shortText: "Screen reader focus does not move to intended target",
                        description: 'Screen reader focus does not follow visual focus or move to the intended target, such as with a "return to top" control.'
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "focus-not-obscured-by-user",
                descriptions: {
                    en: {
                        shortText: "Focused element is covered by user-controlled content",
                        description: "The focused element is covered by content the user has opened or expanded."
                    }
                },
                checkpoints: [ {
                    checkpoint: "",
                    standards: [ "wcag22aa" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "focus-not-strong",
                descriptions: {
                    en: {
                        shortText: "Focus indicator does not meet visual requirements",
                        description: "Focus indicator does not meet minimum area, contrast, or thickness requirements."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.13.a",
                    standards: [ "wcag22aaa" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.4.13.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "focus-on-hidden-item",
                descriptions: {
                    en: {
                        shortText: "Hidden or empty element receives focus",
                        description: "Keyboard focus or touch screen swiping falls on an element that is hidden or empty."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.3.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.4.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "focus-on-hidden-item-screen-reader",
                descriptions: {
                    en: {
                        shortText: "Hidden or empty interactive element receives screen reader focus",
                        description: "Screen reader focus falls on an interactive element that is hidden or empty."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "focus-order-first",
                descriptions: {
                    en: {
                        shortText: "Focus does not begin on the first element",
                        description: "On load, programmatic focus is set to something other than the first interactive element."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.3.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.4.3.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "focus-submits-form",
                descriptions: {
                    en: {
                        shortText: "Form is automatically submitted when component receives focus",
                        description: "Form is automatically submitted when a component receives focus."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.2.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-3.2.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "focus-visual-affects-keyboard",
                descriptions: {
                    en: {
                        shortText: "Keyboard focus is unexpectedly removed or redirected",
                        description: "When a component receives keyboard focus, focus is automatically removed or redirected."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.2.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-3.2.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "focus-visual-affects-screen-reader",
                descriptions: {
                    en: {
                        shortText: "Screen reader focus is unexpectedly removed or redirected",
                        description: "When screen reader focus falls on a component, focus is automatically removed or redirected."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.2.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-3.2.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "focus-window-launches",
                descriptions: {
                    en: {
                        shortText: "New window launched when component receives focus",
                        description: "New window launched when a component receives focus."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.2.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.2.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "form-accidental-submission-recovery",
                descriptions: {
                    en: {
                        shortText: "User cannot confirm or reverse a deletion",
                        description: 'The "Delete"/"Cancel" button immediately triggers the deletion of the legal, financial, or data transaction on the database. Users do not have the ability to recover from an accidental deletion.'
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.4.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.3.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "form-error-field-not-identified",
                descriptions: {
                    en: {
                        shortText: "Form field with error not identified",
                        description: "The form field with an error is not identified in text, or text alternative, or via programmatic association."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-3.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "form-error-format",
                descriptions: {
                    en: {
                        shortText: "Error message does not convey required format",
                        description: "The error message does not indicate expected data format."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.3.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.3.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "form-error-not-associated",
                descriptions: {
                    en: {
                        shortText: "Error message not associated with form control",
                        description: "Error messages are not programmatically associated with the corresponding form field."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 3
                }, {
                    checkpoint: "3.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.1.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 3
                } ]
            }, {
                id: "form-error-not-auto-announced",
                descriptions: {
                    en: {
                        shortText: "Error message not automatically announced",
                        description: "Error message is available in text but is not automatically announced by the screen reader."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 3
                } ]
            }, {
                id: "form-error-not-descriptive",
                descriptions: {
                    en: {
                        shortText: "Error message does not describe error",
                        description: "The error message does not describe precisely what the error is or why the element failed validation."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 3
                } ]
            }, {
                id: "form-error-positioned-improperly",
                descriptions: {
                    en: {
                        shortText: "Error message not near corresponding field",
                        description: "Error message not near the corresponding field. As a result, it is difficult to visually associate it with the field, especially if zooming or magnifying the screen."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 3
                } ]
            }, {
                id: "form-error-range",
                descriptions: {
                    en: {
                        shortText: "Error message does not convey required values",
                        description: "The error message does not indicate expected range of data values."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.3.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.3.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "form-error-required-unclear",
                descriptions: {
                    en: {
                        shortText: "Required field not identified by label, instructions or error message",
                        description: "The required field is not identified by any of the following means: its label or form-level instructions or an error message."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.2.c",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.3.2.c",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "form-error-unhelpful",
                descriptions: {
                    en: {
                        shortText: "Error message does not suggest fix",
                        description: "There is no suggestion for how to fix a validation failure."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.3.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.3.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "form-error-unreadable",
                descriptions: {
                    en: {
                        shortText: "Error message cannot be read by screen readers",
                        description: "Error message cannot be read by screen readers."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-3.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "form-error-validation-not-described",
                descriptions: {
                    en: {
                        shortText: "Input error is not described in text",
                        description: "Input validation failures are not described in text or a text alternative."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-3.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "form-errors-color-only",
                descriptions: {
                    en: {
                        shortText: "Color alone is used to identify error(s)",
                        description: "Color is used as the sole method to identify error(s) on form field(s)."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "form-group-not-labeled",
                descriptions: {
                    en: {
                        shortText: 'Form Group: Section with role="group" or "radiogroup" does not have a label',
                        description: 'The group of form elements grouped using ARIA role="group" or "radiogroup" has no group-level label (similar to an HTML legend).'
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "form-implicit-submit",
                descriptions: {
                    en: {
                        shortText: "Submit button missing on form",
                        description: "Submit button missing on a form and this makes it less obvious how to submit this form. This form can be implicitly submitted. Example of implicit submission is a search form with no submit button that can be submitted when the user types text in the search text field and then presses the enter key while focus is still on the search text field."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.2.2.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-3.2.2.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "form-label-missing",
                descriptions: {
                    en: {
                        shortText: "Form field: Form field is missing an accessible name",
                        description: "The form field does not have an explicit or implicit LABEL relationship, nor a title, aria-labelledby, aria-label, or placeholder attribute."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "form-parts-unnamed",
                descriptions: {
                    en: {
                        shortText: "DO NOT USE - USE checkpoint 4.1.2.a: Multi-part form field is not labeled",
                        description: "Individual segments of the multi-part form field are not named/labeled."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.c",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.1.c",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "form-review",
                descriptions: {
                    en: {
                        shortText: "User cannot review input before submission",
                        description: "Users are not given the opportunity to review and edit information before the data is submitted."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.4.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.3.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "form-review-recovery",
                descriptions: {
                    en: {
                        shortText: "User cannot review or reverse a transaction",
                        description: "User does not get an opportunity to review and confirm the transaction before committing it. Nor is the action reversible."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.4.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.3.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "form-submission-not-checked",
                descriptions: {
                    en: {
                        shortText: "User cannot reverse, check, or confirm a form submission",
                        description: "Users are not given to ability to reverse, check, or confirm a form submission."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.6.a",
                    standards: [ "wcag2aaa", "aenb-77" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.3.6.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "form-title-duplicates-label",
                descriptions: {
                    en: {
                        shortText: "Title duplicates field label",
                        description: "The title attribute duplicates the label for this form field."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "heading-empty",
                descriptions: {
                    en: {
                        shortText: "Heading tag found with no content",
                        description: "Heading tag found with no content."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.e",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.3.1.e",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "heading-level-increase",
                descriptions: {
                    en: {
                        shortText: "Heading levels increase by more than 1",
                        description: "Heading levels increase by more than one level per heading."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.e",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.3.1.e",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "heading-level-order",
                descriptions: {
                    en: {
                        shortText: "Heading levels are out of order",
                        description: "Heading levels are out of order in such a way that the structure of the content is not properly conveyed."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.e",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.1.e",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "heading-missing",
                descriptions: {
                    en: {
                        shortText: "Content is missing a section heading",
                        description: "Content is missing a section heading."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.10.a",
                    standards: [ "wcag2aaa", "aenb-77" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.4.10.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "heading-multiple-h1s",
                descriptions: {
                    en: {
                        shortText: "The page has more than one H1",
                        description: "The page has more than one H1."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.e",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.3.1.e",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "heading-no-h1",
                descriptions: {
                    en: {
                        shortText: "The page has no H1",
                        description: "The page has no H1."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.e",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.3.1.e",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "heading-none",
                descriptions: {
                    en: {
                        shortText: "The page has no headings",
                        description: "The page has no headings."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.e",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.1.e",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 3
                } ]
            }, {
                id: "heading-not-descriptive",
                descriptions: {
                    en: {
                        shortText: "Heading does not describe content",
                        description: "The heading does not describe the topic or purpose of the content that follows it."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.6.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.4.6.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "help-all-always-available",
                descriptions: {
                    en: {
                        shortText: "Not all pages in the set have all the same help mechanisms",
                        description: "Some pages in the set are missing a help mechanism that is available on other pages in the set."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.2.6.a",
                    standards: [ "wcag22aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-3.2.6.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "help-always-available",
                descriptions: {
                    en: {
                        shortText: "Some pages in the set do not contain any help mechanism",
                        description: "Some pages in the set do not contain any help mechanism."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.2.6.a",
                    standards: [ "wcag22aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-3.2.6.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "help-consistent-every-page",
                descriptions: {
                    en: {
                        shortText: "Pages outside the set have different help location",
                        description: "The set of pages has consistently located help, but on other pages outside the set the help location is different."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.2.6.a",
                    standards: [ "wcag22aa" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-3.2.6.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "help-not-consistent",
                descriptions: {
                    en: {
                        shortText: "Help mechanism is not in a consistent location",
                        description: "Help mechanism is not in a programmatically consistent location."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.2.6.a",
                    standards: [ "wcag22aa" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-3.2.6.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "help-time-described",
                descriptions: {
                    en: {
                        shortText: "Help availability information not provided",
                        description: "Help is not always available and information on when help is available is not provided."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.2.6.a",
                    standards: [ "wcag22aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-3.2.6.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "help-visually-consistent",
                descriptions: {
                    en: {
                        shortText: "Help programmatically same but visually different",
                        description: "Help mechanism is in the same programmatic location, but the visual location varies from page to page."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.2.6.a",
                    standards: [ "wcag22aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-3.2.6.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "html-invalid",
                descriptions: {
                    en: {
                        shortText: "HTML validation errors exist",
                        description: "HTML validation errors exist."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.1.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-4.1.1.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "id-input-purpose-inaccurate",
                descriptions: {
                    en: {
                        shortText: "Identify input purpose not accurate",
                        description: "Autocomplete attribute to identify the purpose of this form element is not accurate."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.5.a",
                    standards: [ "wcag21aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.5.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "id-input-purpose-missing",
                descriptions: {
                    en: {
                        shortText: "Identify input purpose missing",
                        description: "Autocomplete attribute to identify the purpose of this form element is missing."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.5.a",
                    standards: [ "wcag21aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.5.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "image-map-equivalent",
                descriptions: {
                    en: {
                        shortText: "Image map is missing links and/or alt text",
                        description: "A server-side image map is missing an equivalent set of text links and/or text alternative to alert the user that these links are available."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.1.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.1.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "image-of-text",
                descriptions: {
                    en: {
                        shortText: "Image of text is used instead of real text",
                        description: "The image contains embedded text."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.5.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.5.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "inconsistent-component-id",
                descriptions: {
                    en: {
                        shortText: "Component labeling is inconsistent",
                        description: "Components are labeled differently on different pages or screens, though they have the same function."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.2.4.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.2.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "inconsistent-form-id",
                descriptions: {
                    en: {
                        shortText: "Form control identification is inconsistent",
                        description: "The form control is identified differently on different pages or screens, though it has the same function."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.2.4.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.2.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "inconsistent-link",
                descriptions: {
                    en: {
                        shortText: "Link identification is inconsistent",
                        description: "The link/image link is identified differently on different pages, though it has the same target."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.2.4.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.2.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "inconsistent-nav",
                descriptions: {
                    en: {
                        shortText: "Navigation element order is inconsistent",
                        description: "Navigational elements that occur across multiple pages or screens are not presented in the same relative order."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.2.3.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.2.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "info-relationship-visual-only",
                descriptions: {
                    en: {
                        shortText: "Information or relationship only presented visually",
                        description: "Information, structure, or relationship is presented visually but is not conveyed programmatically or in text."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.3.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "information-color",
                descriptions: {
                    en: {
                        shortText: "Color alone is used to convey info",
                        description: "Color is used to convey information that is not conveyed in any other way."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "information-requires-hearing",
                descriptions: {
                    en: {
                        shortText: "Instructions rely on ability to hear",
                        description: "Instructions are presented in a way that requires the ability to hear sound, and there is no alternate method to convey the information."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.3.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.3.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "information-requires-vision",
                descriptions: {
                    en: {
                        shortText: "Instructions rely on ability to see",
                        description: "Instructions are presented in a way that requires the ability to see shape, color, size, visual location, or orientation."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.3.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "input-format-clarification",
                descriptions: {
                    en: {
                        shortText: "Label does not convey required format",
                        description: "The input requires a specific format but the label or instruction does not specify this."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.2.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-3.3.2.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "input-range-clarification",
                descriptions: {
                    en: {
                        shortText: "Label does not convey required values",
                        description: "The input is limited to a range of values but the label or instruction does not specify this."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.2.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-3.3.2.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "instructions-not-accurate",
                descriptions: {
                    en: {
                        shortText: "Instructions are inaccurate or incomplete for assistive technology users",
                        description: "Additional instructions are only provided for the input field to people who do not have disabilities. For a person with disabilities, the instructions are incomplete, inaccurate, or misleading."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.3.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "instructions-not-associated",
                descriptions: {
                    en: {
                        shortText: "Instructions/descriptions not assoc w control",
                        description: "Additional instructions/descriptions are provided for the control, but they are not programmatically associated with the control."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 3
                }, {
                    checkpoint: "3.3.2.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.3.2.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.1.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 3
                } ]
            }, {
                id: "instructions-not-descriptive",
                descriptions: {
                    en: {
                        shortText: "Instructions not descriptive",
                        description: "Additional instructions are provided for the control, but they are unclear or insufficiently descriptive."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.2.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-3.3.2.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "instructions-not-included",
                descriptions: {
                    en: {
                        shortText: "Instructions missing for assistive technology users",
                        description: "Additional instructions are needed for the input field but are not provided for people with disabilities. People without disabilities have access to additional instructions."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.2.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.3.2.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "instructions-positioned-improperly",
                descriptions: {
                    en: {
                        shortText: "Label or instruction is not near related element",
                        description: "The label or instruction is not near its related element. As a result, it is difficult to visually associate it with the element, especially if zooming or magnifying the screen."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.2.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.3.2.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 3
                } ]
            }, {
                id: "keyboard-accesskey-nonunique",
                descriptions: {
                    en: {
                        shortText: "Non-unique accesskey attribute",
                        description: "The accesskey attribute value is not unique - it is repeated elsewhere on the same page."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.1.1.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.1.1.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "keyboard-cannot-extend-session",
                descriptions: {
                    en: {
                        shortText: "Timeout mechanism is not keyboard accessible",
                        description: "The mechanism to extend the session is not accessible by keyboard alone."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.2.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-2.2.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "keyboard-character-key-shortcuts",
                descriptions: {
                    en: {
                        shortText: "Character key shortcuts exist and cannot be modified or turned off",
                        description: "Single character key shortcuts exist and do not have at least one of these required options: ability to turn off single character key shortcuts, ability to remap to a non-singular key shortcut, OR are only active when the appropriate user interface component has focus."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.1.4.a",
                    standards: [ "wcag21a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.1.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "keyboard-inaccessible",
                descriptions: {
                    en: {
                        shortText: "Function cannot be performed by keyboard alone",
                        description: "There is no way to perform the function using only the keyboard on the same screen or on a qualifying conforming alternate version."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.1.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-2.1.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "keyboard-inaccessible-aaa",
                descriptions: {
                    en: {
                        shortText: "Function cannot be performed by keyboard alone - no exception",
                        description: "There is no way to perform the function using only the keyboard on the same screen or on a qualifying conforming alternate version - no exceptions."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.1.3.a",
                    standards: [ "wcag2aaa", "aenb-77" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-2.1.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "keyboard-inpage-link-not-accessible",
                descriptions: {
                    en: {
                        shortText: "In page links are not keyboard operable",
                        description: "In page links are not keyboard operable."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.1.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.1.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "keyboard-nonstandard-no-instructions",
                descriptions: {
                    en: {
                        shortText: "No instructions for non-standard key interactions",
                        description: "Instructions are not provided to explain the non-standard keyboard interaction used to access an element."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.1.1.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-2.1.1.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 4
                } ]
            }, {
                id: "keyboard-not-touch-accessible",
                descriptions: {
                    en: {
                        shortText: "Action cannot be performed with a screen reader turned on",
                        description: "Action cannot be performed with a screen reader turned on."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.1.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-2.1.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "keyboard-shortcut-conflict",
                descriptions: {
                    en: {
                        shortText: "Conflict with existing browser/screen reader shortcut(s)",
                        description: "Page-specified shortcut key or accesskey conflicts with existing browser or screen reader shortcut(s)."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.1.1.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.1.1.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "keyboard-trap",
                descriptions: {
                    en: {
                        shortText: "Keyboard trap",
                        description: "There is a keyboard trap."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-2.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "label-group-checkboxes-not-associated",
                descriptions: {
                    en: {
                        shortText: "Group of checkboxes not associated with group label",
                        description: "The group label is not programmatically associated with its checkboxes. The purpose of individual checkboxes in the group cannot be understood without the group label."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.d",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.1.d",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "label-group-not-associated",
                descriptions: {
                    en: {
                        shortText: "Group of form controls not associated with group label",
                        description: "The group of form controls is not associated with its group label. The purpose of individual controls in the group cannot be understood without the group label."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.d",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.1.d",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "label-group-not-present",
                descriptions: {
                    en: {
                        shortText: "Visible group label missing",
                        description: "No visual group label is present and the purpose of this group is not clear without a visual label."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "label-group-radio-not-associated",
                descriptions: {
                    en: {
                        shortText: "Group of radio buttons not associated with group label",
                        description: "The group label is not associated with its group of radio buttons. The purpose of individual radio buttons in the group cannot be understood without the group label."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.d",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.1.d",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "label-header-not-associated",
                descriptions: {
                    en: {
                        shortText: "DO NOT USE - USE checkpoint 4.1.2.a: Label in TH element not associated with form control",
                        description: "The row and column header cells visually serve as labels for the form controls contained in the table. The form controls are not marked up in a manner that exposes this relationship."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.c",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.3.1.c",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "label-implicit",
                descriptions: {
                    en: {
                        shortText: "Form label is implicit",
                        description: "There is an implicit form label. The label is not explicitly attached to a specific form control through the use of the for attribute."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "label-is-missing-select",
                descriptions: {
                    en: {
                        shortText: "Select or dropdown control missing a visible label",
                        description: "No persistent visual label is present for a select or dropdown control and the purpose of this field is not clear without a visual label."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-3.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "label-is-placeholder",
                descriptions: {
                    en: {
                        shortText: "Label is not persistent",
                        description: "Label is not persistent. For example: placeholder is being used as the only visual label for a text field."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "label-is-placeholder-chat",
                descriptions: {
                    en: {
                        shortText: "Chat or IM input label is not persistent",
                        description: "Chat or IM input label is not persistent."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-3.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 1
                } ]
            }, {
                id: "label-missing",
                descriptions: {
                    en: {
                        shortText: "DO NOT USE - USE checkpoint 4.1.2.a: Form field is not labeled",
                        description: "The form field does not have an explicit or implicit LABEL relationship, nor a title, aria-labelledby, aria-label, or placeholder attribute."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.c",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.3.1.c",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "label-multiple-associated",
                descriptions: {
                    en: {
                        shortText: "DO NOT USE - USE checkpoint 4.1.2.a: Form field has multiple LABEL elements associated",
                        description: "The form field has multiple LABEL elements associated with it using the for/id technique."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.c",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.3.1.c",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "label-not-associated",
                descriptions: {
                    en: {
                        shortText: "DO NOT USE - USE checkpoint 4.1.2.a: Visible label/form field are not associated",
                        description: "The form control is not correctly associated with its visible label either explicitly or implicitly."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.c",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.3.1.c",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "label-not-descriptive",
                descriptions: {
                    en: {
                        shortText: "Label does not convey purpose of control",
                        description: "The label does not convey the purpose of the control."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.6.b",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.4.6.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "label-not-present",
                descriptions: {
                    en: {
                        shortText: "Visible label missing",
                        description: "No visual label is present and the purpose of this field is not clear without a visual label."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "label-orphaned",
                descriptions: {
                    en: {
                        shortText: "Form label is orphaned",
                        description: "There is an orphaned form label. All form labels should be associated with a form element, such as INPUT, SELECT or TEXTAREA elements."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "label-position-bad",
                descriptions: {
                    en: {
                        shortText: "Text label is not properly positioned",
                        description: "The label is not positioned properly. As a result, it is difficult to visually determine the purpose of the control, especially if zooming or magnifying the screen."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 3
                } ]
            }, {
                id: "label-programmatic-not-descriptive",
                descriptions: {
                    en: {
                        shortText: "Programmatic label does not convey purpose of control",
                        description: "The programmatic label does not convey the purpose of the control. The programmatic label and visual label do not convey consistent information."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.6.b",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.4.6.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "label-redundant-button",
                descriptions: {
                    en: {
                        shortText: "Button has a duplicate label",
                        description: "The button should not have a duplicate label, because the button's accessible name is already defined."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "label-select-placeholder",
                descriptions: {
                    en: {
                        shortText: "Placeholder used as label in single select",
                        description: "Persistent placeholder label option used as label for a single select element. Label not easy to see once a selection has been made."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-3.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "label-title-only",
                descriptions: {
                    en: {
                        shortText: "Input field programmatically labeled by title or aria-describedby",
                        description: "An input field is programmatically labeled only by a title or aria-describedby attribute."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "label-visible-not-descriptive",
                descriptions: {
                    en: {
                        shortText: "Visible label does not convey purpose of control",
                        description: "The visible label does not convey the purpose of the control. The programmatic label and visual label do not convey consistent information."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.6.b",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.4.6.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "landmark-missing",
                descriptions: {
                    en: {
                        shortText: "Not all page content is contained within a landmark",
                        description: "Not all page content is contained within a landmark."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.6.a",
                    standards: [ "wcag21aaa", "aenb-77" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.3.6.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "lang-change-not-marked",
                descriptions: {
                    en: {
                        shortText: "Change in language is not marked",
                        description: "The change in language for a portion of content is not coded."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.1.2.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "lang-change-not-valid",
                descriptions: {
                    en: {
                        shortText: "The change in language for a portion of content is not correct",
                        description: "The change in language for a portion of content is not correct."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.1.2.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "lang-invalid",
                descriptions: {
                    en: {
                        shortText: "Value of the lang attribute is not valid",
                        description: "The value of the lang attribute used to indicate the primary language of the page is not a valid language code."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.1.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.1.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "lang-not-accurate",
                descriptions: {
                    en: {
                        shortText: "Lang attribute for page is not primary page language",
                        description: "The value of the lang attribute used to indicate the primary language of the page is for the wrong language."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.1.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.1.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "lang-not-defined",
                descriptions: {
                    en: {
                        shortText: "Primary language of the page is not defined",
                        description: "The lang attribute used to indicate the primary language of the page is missing from the HTML element."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.1.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.1.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "legend-missing",
                descriptions: {
                    en: {
                        shortText: "FIELDSET has empty or missing LEGEND",
                        description: "The FIELDSET has an empty or missing LEGEND."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.d",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.3.1.d",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "link-acts-like-button",
                descriptions: {
                    en: {
                        shortText: "Link acts like button",
                        description: "Link acts like a button, Activating this link triggers scripted functionality but does not change browser focus or URL."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "link-insufficient-contrast",
                descriptions: {
                    en: {
                        shortText: "Link contrast is not at least 3:1 with surrounding text",
                        description: "Link text and static text are differentiated only by color. The contrast ratio between default link text and surrounding text is not at least 3:1."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.1.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.1.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "link-looks-like-button",
                descriptions: {
                    en: {
                        shortText: "Link looks like button",
                        description: "Link looks like a button, but acts like a link (activating it only changes browser focus or URL)."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "link-missing-role",
                descriptions: {
                    en: {
                        shortText: "Link: Link does not have a role",
                        description: "The link does not have a role."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "link-missing-text",
                descriptions: {
                    en: {
                        shortText: "Link: Link does not have discernible link text",
                        description: "The link is missing accessible link text. As a result its destination or purpose is not conveyed to screen reader users."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "link-no-mark",
                descriptions: {
                    en: {
                        shortText: "Added link indicator on hover is missing",
                        description: "Link text lacks an additional differentiator on hover. (The contrast ratio between default link text and surrounding text is sufficient.)"
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.1.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.4.1.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "link-purpose-unclear",
                descriptions: {
                    en: {
                        shortText: "Purpose of link is not clear in context",
                        description: "The purpose of the link is not clear within its programmatically determined link context."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.4.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.4.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "link-purpose-unclear-alone",
                descriptions: {
                    en: {
                        shortText: "Purpose of link is not clear from link text alone",
                        description: "The purpose of the link is not clear from its programmatic link text alone."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.9.a",
                    standards: [ "wcag2aaa", "aenb-77" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.4.9.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "link-purpose-unclear-multiple",
                descriptions: {
                    en: {
                        shortText: "Multiple links have the same programmatic link text but different destinations",
                        description: "Multiple links with identical link text but different destinations are present, and the purpose of each link is not clear within its programmatically determined link context."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.4.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.4.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "link-purpose-unidentifiable-from-text",
                descriptions: {
                    en: {
                        shortText: "Link purpose not clear from link text alone",
                        description: "The purpose of the element is not identifiable from link text alone. (AAA requirement 2.4.9)"
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.4.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.4.4.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "link-target-not-indicated",
                descriptions: {
                    en: {
                        shortText: "Links opens new window without warning",
                        description: "The link text does not indicate that the link opens in a new window. (AAA requirement 3.2.5)"
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.2.2.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-3.2.2.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "modal-forces-submission",
                descriptions: {
                    en: {
                        shortText: "Method to dismiss modal without submitting data is not accessible",
                        description: "The method to dismiss/close the modal/alert without submitting data is not keyboard accessible."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.1.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-2.1.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "modal-no-esc",
                descriptions: {
                    en: {
                        shortText: "ESC key does not close modal",
                        description: "The modal should enable an ESC Key to dismiss/close the modal."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.1.1.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-2.1.1.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "modal-only-esc",
                descriptions: {
                    en: {
                        shortText: "ESC key is only way to close modal or layer",
                        description: "The ESC key is the only way to dismiss/close the modal or layer."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.1.1.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-2.1.1.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "modal-unclosable",
                descriptions: {
                    en: {
                        shortText: "The modal dialog is missing a close button",
                        description: "The modal dialog is missing a close button and there is no way to close the modal with a keyboard."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.1.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-2.1.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "motion-actuation-cannot-disable",
                descriptions: {
                    en: {
                        shortText: "Motion actuation cannot be disabled.",
                        description: "Motion actuation cannot be disabled."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.5.4.a",
                    standards: [ "wcag21a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.5.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "motion-actuation-disrupts-system",
                descriptions: {
                    en: {
                        shortText: "Motion actuation disrupts or disables system features",
                        description: "Motion actuation disrupts or disables system level features."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.5.4.a",
                    standards: [ "wcag21a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.5.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "motion-actuation-required",
                descriptions: {
                    en: {
                        shortText: "Motion actuation required",
                        description: "Functionality can only be activated via motion actuation (such as shaking or tilting the device)."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.5.4.a",
                    standards: [ "wcag21a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.5.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "motion-animation",
                descriptions: {
                    en: {
                        shortText: "Motion animation cannot be disabled",
                        description: "Motion animation cannot be disabled."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.3.3.a",
                    standards: [ "wcag21aaa", "aenb-77" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.3.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "name-section",
                descriptions: {
                    en: {
                        shortText: "Accessible name not provided for content section",
                        description: "The content section (that is controlled by an active element) does not have an accessible name."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "nav-sections-not-identified",
                descriptions: {
                    en: {
                        shortText: "Multiple ARIA navigation regions need labels",
                        description: 'Multiple sections with role="navigation" are present but they lack their individual identity / label.'
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.1.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "1.3.1.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.3.1.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.4.1.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "new-content-bad-location",
                descriptions: {
                    en: {
                        shortText: "Correct reading order of dynamic content not determinable",
                        description: "The correct reading order of dynamically changed content is not programmatically determinable by screen readers."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "new-content-modal-not-announced",
                descriptions: {
                    en: {
                        shortText: "Newly opened modal is not announced",
                        description: "When the modal is opened, the new content within it is not announced."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 3
                } ]
            }, {
                id: "new-content-not-announced",
                descriptions: {
                    en: {
                        shortText: "New content is not announced",
                        description: "When new content is inserted into the document, the new content is not announced."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 3
                } ]
            }, {
                id: "nonvisual-description-hard-to-find",
                descriptions: {
                    en: {
                        shortText: "Text/audio description is hard to find",
                        description: "A text or audio description is provided, but it is difficult for a screen reader user to find."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.1.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.2.1.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "nonvisual-description-inadequate",
                descriptions: {
                    en: {
                        shortText: "Text/audio description is inadequate",
                        description: "A text or audio description is provided, but it does not adequately describe the video content."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.1.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.2.1.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "nonvisual-description-missing",
                descriptions: {
                    en: {
                        shortText: "No text or audio description available for video-only content",
                        description: "Neither a text description nor audio description is available for video-only content."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.1.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.2.1.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "nonvisual-description-missing-multimedia",
                descriptions: {
                    en: {
                        shortText: "No text or audio description available for multimedia content",
                        description: "Neither a text description nor audio description is available for multimedia content."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.3.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.2.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "optional-marked-required",
                descriptions: {
                    en: {
                        shortText: "Optional field marked as required",
                        description: "The field is marked as required, but this is misleading because the field is in fact optional."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.2.c",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-3.3.2.c",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "orientation-content-missing",
                descriptions: {
                    en: {
                        shortText: "Content or functionality missing due to orientation",
                        description: "The presentation of the content adjusts when the device's display orientation changes, but some functionality or content is inaccessible."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.4.a",
                    standards: [ "wcag21aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "orientation-current",
                descriptions: {
                    en: {
                        shortText: "Not presented in current display orientation",
                        description: "When the page/app is opened, it is not presented in the device's current display orientation."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.4.a",
                    standards: [ "wcag21aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "orientation-identical-content",
                descriptions: {
                    en: {
                        shortText: "Different Content Design Based on Orientation",
                        description: "When viewed in different orientations, the content design is different."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.4.a",
                    standards: [ "wcag21aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.3.4.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "orientation-identical-size",
                descriptions: {
                    en: {
                        shortText: "Different Content Design Based on Display Size",
                        description: "When viewed on different sized devices, the content design is different."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.4.a",
                    standards: [ "wcag21aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.3.4.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "orientation-rotate",
                descriptions: {
                    en: {
                        shortText: "Does not rotate to new orientation",
                        description: "When the device is rotated, the content does not adjust to the new display orientation."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.4.a",
                    standards: [ "wcag21aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "quotation-not-indicated",
                descriptions: {
                    en: {
                        shortText: "Quotation is missing semantics",
                        description: "The element is a quotation, but is not marked as such."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.3.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "radio-missing-role-state",
                descriptions: {
                    en: {
                        shortText: "Radio button: Custom radio button does not have a role and/or state",
                        description: "The custom radio button element is missing a role and/or selected state."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "reading-order-browse-outside-modal",
                descriptions: {
                    en: {
                        shortText: "Able to browse outside modal with screen reader",
                        description: "Screen readers can read content outside the modal dialog."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "reading-order-content-mismatch",
                descriptions: {
                    en: {
                        shortText: "Static text displayed and screen reader announcement do not match",
                        description: "Static text displayed and screen reader announcement do not match and the intended meaning of the content is changed."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "reading-order-content-skipped",
                descriptions: {
                    en: {
                        shortText: "Informative (static) content is not readable by a screen reader",
                        description: "Informative (static) content is not readable by a screen reader."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "reading-order-css-dependent",
                descriptions: {
                    en: {
                        shortText: "DON'T USE: DEPRECATED ISSUE - Disabled CSS reading order is not logical",
                        description: "The reading order does not make sense when CSS is disabled."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "reading-order-footnote",
                descriptions: {
                    en: {
                        shortText: "Footnote reference is missing a link to the footnote content",
                        description: "Footnote reference is missing a link to the footnote content."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "reading-order-footnote-return",
                descriptions: {
                    en: {
                        shortText: "Footnote link missing return-to-trigger link",
                        description: "The footnote link takes you to the footnote at the bottom of the page but is missing a return-to-trigger link."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "reading-order-hidden-content",
                descriptions: {
                    en: {
                        shortText: "Hidden content is readable with a screen reader",
                        description: "Content that is intended to be hidden from all users is readable with a screen reader."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "reading-order-layout-table-non-linear",
                descriptions: {
                    en: {
                        shortText: "Layout table reading order is not logical",
                        description: "The reading order of the layout table does not make sense when linearized."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "reading-order-not-logical",
                descriptions: {
                    en: {
                        shortText: "Reading order of static content changes meaning",
                        description: "The screen reader reading order of the content changes the intended meaning of the content."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "reading-order-visual-order-mismatch",
                descriptions: {
                    en: {
                        shortText: "Reading and visual order are not identical",
                        description: "The reading order is not identical to the visual order."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 3
                } ]
            }, {
                id: "redundant-entry-required",
                descriptions: {
                    en: {
                        shortText: "Process requires a user to re-enter information",
                        description: "Process requires a user to re-enter information."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.3.7.a",
                    standards: [ "wcag22aa" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-3.3.7.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "resize-pinch-to-zoom-disabled",
                descriptions: {
                    en: {
                        shortText: "Pinch to zoom disabled",
                        description: "The ability to pinch the screen to zoom has been disabled."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.4.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "resize-text-content-lost",
                descriptions: {
                    en: {
                        shortText: "Content is lost at 200% zoom",
                        description: "Content is lost, clipped, or obscured when the page is zoomed to 200%."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.4.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "resize-text-does-not-respond",
                descriptions: {
                    en: {
                        shortText: "Text cannot be resized by 200%",
                        description: "Text cannot be resized by 200% by browser zoom or increasing default font size."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.4.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "resize-text-function-lost",
                descriptions: {
                    en: {
                        shortText: "Functionality is lost at 200% zoom",
                        description: "Functionality is lost when the page is zoomed to 200%."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.4.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.4.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "resize-text-only",
                descriptions: {
                    en: {
                        shortText: "Content is lost when only the text is zoomed",
                        description: "Content is lost, clipped, or obscured when only the text is zoomed to 200%."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.4.a",
                    standards: [ "wcag2aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.4.4.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "select-missing-role-state",
                descriptions: {
                    en: {
                        shortText: "Select: Custom select does not have a role and/or state",
                        description: "The custom select element is missing required roles and/or states or properties."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "semantic-data-table",
                descriptions: {
                    en: {
                        shortText: "Content should be in a data table but is not",
                        description: "The content visually appears to be a data table but is not marked up as one."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "semantic-data-table-headers",
                descriptions: {
                    en: {
                        shortText: "Data table has missing or incomplete header cell markup",
                        description: "The data table has missing or incomplete header cell markup."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "semantic-del-ins-missing",
                descriptions: {
                    en: {
                        shortText: "Deleted or inserted text is not identified for screen readers",
                        description: "Text that is shown visually as being deleted or inserted is not identified for screen readers either programmatically or in text."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "semantic-del-ins-plus-text",
                descriptions: {
                    en: {
                        shortText: "Use of DEL or INS elements is not supported by all screen readers",
                        description: "Use of DEL or INS elements is not supported by all screen readers."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.3.1.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "semantic-description-list",
                descriptions: {
                    en: {
                        shortText: "Description list not marked up properly",
                        description: "The description list is not marked up properly."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.f",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.1.f",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "semantic-heading",
                descriptions: {
                    en: {
                        shortText: "Visual heading text is not marked as heading",
                        description: "Text appears and functions like a section heading but is not marked up as such."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.e",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.1.e",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "semantic-heading-misused",
                descriptions: {
                    en: {
                        shortText: "Text should not be marked as a heading",
                        description: "Text that does not serve as a section heading is inappropriately coded as a heading."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.e",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.1.e",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "semantic-hidden",
                descriptions: {
                    en: {
                        shortText: 'aria-hidden="true" is used incorrectly',
                        description: 'aria-hidden="true" is used on informative content making it inaccessible to assistive technology.'
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.3.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "semantic-incorrect",
                descriptions: {
                    en: {
                        shortText: "Incorrect semantic markup",
                        description: "Incorrect semantic markup is used."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "semantic-list",
                descriptions: {
                    en: {
                        shortText: "Visual list is not marked up as list",
                        description: "Content appears like a list but is not marked up as such."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.f",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.1.f",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "semantic-list-nested",
                descriptions: {
                    en: {
                        shortText: "Nested list is not marked properly",
                        description: "The nested list is not marked properly."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.f",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.1.f",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "semantic-list-or-item",
                descriptions: {
                    en: {
                        shortText: "List or list item is not marked up properly",
                        description: "The list or list item is not marked up properly."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.f",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.1.f",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "semantic-list-unallowed-children",
                descriptions: {
                    en: {
                        shortText: "List element has direct children that are not allowed inside UL or OL elements",
                        description: "List element has direct children that are not allowed inside UL or OL elements. Lists must only directly contain LI, SCRIPT, or TEMPLATE elements."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.f",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.3.1.f",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "semantic-list-used-for-presentation",
                descriptions: {
                    en: {
                        shortText: "Content is not a list but is marked as such",
                        description: "Content is not a list but it is marked as such."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.f",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.3.1.f",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "semantic-markup-used-for-presentation",
                descriptions: {
                    en: {
                        shortText: "Element inappropriately uses semantic markup",
                        description: "Semantic markup has been used inappropriately and misrepresents the meaning, structure, or relationships of the content."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "semantic-nav",
                descriptions: {
                    en: {
                        shortText: "Group of navigation links missing semantics",
                        description: "A visual group of navigation links is not marked up semantically to convey their relationship. Some possible solutions include using list(s), role of navigation, nav element, headings, menu or menubar."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.3.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "semantic-role-presentation",
                descriptions: {
                    en: {
                        shortText: 'Role="presentation" or "none" is used incorrectly',
                        description: 'role="presentation" or "none" is used on content that conveys semantic information, so the semantic information is not conveyed.'
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.3.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "semantic-strong-or-emphasis-not-used",
                descriptions: {
                    en: {
                        shortText: "B or I used instead of STRONG or EM",
                        description: "B or I used instead of STRONG or EM."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.3.1.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "speech-accessible-name-interspersed",
                descriptions: {
                    en: {
                        shortText: "Accessible name has interspersed words",
                        description: "Accessible name contains the visible label text, but one or more other words is interspersed in the label."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.5.3.a",
                    standards: [ "wcag21a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.5.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "speech-accessible-name-mismatch",
                descriptions: {
                    en: {
                        shortText: "Accessible name does not contain visible label",
                        description: "Accessible name does not contain the visible label text."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.5.3.a",
                    standards: [ "wcag21a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.5.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "speech-accessible-name-missing",
                descriptions: {
                    en: {
                        shortText: "Accessible name missing",
                        description: "The visible label is not in the accessible name because the label is not associated with the control."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.5.3.a",
                    standards: [ "wcag21a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.5.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "speech-accessible-name-order",
                descriptions: {
                    en: {
                        shortText: "Accessible name not same order as visible label",
                        description: "Accessible name contains the visible label text, but the words of the visible label are not in the same order as they are in the accessible name."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.5.3.a",
                    standards: [ "wcag21a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.5.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "speech-accessible-name-other-words-before",
                descriptions: {
                    en: {
                        shortText: "Accessible name other words before",
                        description: "Accessible name contains the visible label text, but one or more other words comes before the visible label text."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.5.3.a",
                    standards: [ "wcag21a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.5.3.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "state-aria-expanded-missing-incorrect",
                descriptions: {
                    en: {
                        shortText: "State: Expand/collapse state of the element is missing or incorrect",
                        description: "The expand/collapse state of a toggle-type element is missing or is used incorrectly."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "state-color-only",
                descriptions: {
                    en: {
                        shortText: "Color alone is used to visually convey the state of a control",
                        description: "A change in color is used to visually convey the state of a control, and the contrast difference between the states is less than 3:1."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "state-selected-missing-incorrect",
                descriptions: {
                    en: {
                        shortText: "State: Selected state of the element is missing or incorrect",
                        description: "The selected state of an element is not conveyed to screen reader users."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "state-table-sort",
                descriptions: {
                    en: {
                        shortText: "State: Table sort state is missing or incorrect",
                        description: "The sorted state (ascending/descending) of table columns is missing or incorrect."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "static-focus",
                descriptions: {
                    en: {
                        shortText: "Static element receives focus",
                        description: "A static (non-interactive) element receives tab focus. This may cause confusion and/or too many keystrokes to navigate the page."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.3.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.4.3.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "status-msg-not-auto-announced",
                descriptions: {
                    en: {
                        shortText: "Status message not automatically announced",
                        description: "Status message is not automatically announced by the screen reader."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.3.a",
                    standards: [ "wcag21aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-4.1.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "structure-confusing-skiplink",
                descriptions: {
                    en: {
                        shortText: "Skip link is not appropriate",
                        description: "There is no repetitive block of content/links on this page. The presence of the skip link is therefore confusing."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.1.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-2.4.1.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "structure-dom-visual-mismatch",
                descriptions: {
                    en: {
                        shortText: "DOM order does not match visual order",
                        description: "The DOM order does not match the visual order."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.3.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.4.3.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "structure-duplicate-ids",
                descriptions: {
                    en: {
                        shortText: "Page contains duplicate IDs",
                        description: "The page contains duplicate id values."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.1.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-4.1.1.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "structure-finding-pages-difficult",
                descriptions: {
                    en: {
                        shortText: "Fewer than two ways provided to find other pages",
                        description: "Fewer than two ways to find other pages on the site are provided."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.5.a",
                    standards: [ "wcag2aa" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.4.5.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "structure-major-problems",
                descriptions: {
                    en: {
                        shortText: "Page is missing skip link, headings or landmarks",
                        description: "The page does not have at least one of: a skip link, proper heading structure, HTML5 sectioning elements, or ARIA landmarks."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.4.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "structure-no-nav-bypass-skiplink",
                descriptions: {
                    en: {
                        shortText: "User cannot skip navigation links",
                        description: "There is no skip link to bypass the navigation links and there are at least 4 links in the top navigation."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.1.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.4.1.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "structure-skiplink-broken",
                descriptions: {
                    en: {
                        shortText: "Skip link is broken",
                        description: "The skip link provided does not function as expected / is broken."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.4.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "structure-skiplink-invisible",
                descriptions: {
                    en: {
                        shortText: "Skip link is not visible on focus",
                        description: "The skip link does not become visible when it receives focus. Sighted keyboard-only users are unable to use the link."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.4.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "structure-skiplink-not-first",
                descriptions: {
                    en: {
                        shortText: "Skip link is not first link",
                        description: "The skip link to the main content is not the first link on the page."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.1.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-2.4.1.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "structure-skiplink-webkit-incompatible",
                descriptions: {
                    en: {
                        shortText: "Skip link does not work in webkit",
                        description: "The skip nav link does not work in webkit browsers."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.1.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-2.4.1.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "tab-order-bad-index",
                descriptions: {
                    en: {
                        shortText: "Use of positive tabindex value is not logical",
                        description: "The use of positive tabindex value(s) is not logical and has created a tab order that does not preserve the meaning of the content."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.3.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.4.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "tab-order-illogical",
                descriptions: {
                    en: {
                        shortText: "Keyboard focus order is not logical",
                        description: "Keyboard focus order is not logical in such a way that it affects the meaning or operability of the content."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.3.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.4.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "table-caption-not-associated",
                descriptions: {
                    en: {
                        shortText: "Visual caption is not marked with CAPTION",
                        description: "The visual caption above the table is not programmatically associated with the table."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "table-complex-association-incorrect",
                descriptions: {
                    en: {
                        shortText: "Complex table headers-id association is incorrect",
                        description: "The headers + id association is not correct."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "table-complex-multiple-associations",
                descriptions: {
                    en: {
                        shortText: "Both TH/SCOPE and HEADERS-ID are used",
                        description: "Both TH with SCOPE attributes and HEADERS + ID association are used. Choose one method to associate the header cells with the data cells."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "table-complex-no-header-associations",
                descriptions: {
                    en: {
                        shortText: "Complex table is missing headers-id association",
                        description: "A table is complex and does not use the headers + id method to mark up column and row header cells."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "table-complex-simplify",
                descriptions: {
                    en: {
                        shortText: "Simplify complex table",
                        description: "The table is complex and should be broken into separate simple tables."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "table-data-headers-blank",
                descriptions: {
                    en: {
                        shortText: "Not an issue: TH cell is blank",
                        description: "A table is permitted to have blank TH cells."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 0
                }, {
                    checkpoint: "en301549-9-1.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 0
                } ]
            }, {
                id: "table-data-headers-captiony",
                descriptions: {
                    en: {
                        shortText: "First row of data table is really a caption",
                        description: "The first row of the table acts more like a caption for the table than an actual header row."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "table-data-multiple-combined",
                descriptions: {
                    en: {
                        shortText: "More than one table element used to create a single table",
                        description: "More than one table element is used to create a single table so header and data cell association is not correct and table navigation is broken."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "table-data-nested",
                descriptions: {
                    en: {
                        shortText: "Data tables are nested",
                        description: "There are nested data tables."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "table-data-not-header",
                descriptions: {
                    en: {
                        shortText: "Data cell is marked as a header cell",
                        description: "A data cell is inappropriately marked as a table header cell."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "table-data-summary-caption",
                descriptions: {
                    en: {
                        shortText: "SUMMARY and CAPTION are identical",
                        description: "The SUMMARY attribute and CAPTION element should not be identical."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "table-layout-header-markup",
                descriptions: {
                    en: {
                        shortText: "Layout table uses data table structural markup",
                        description: "Layout table uses data table markup: TH or CAPTION elements or SUMMARY, HEADERS, or SCOPE attributes."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "table-layout-improper-role",
                descriptions: {
                    en: {
                        shortText: "Layout table conveys table semantics",
                        description: 'A layout table is missing role="presentation" or "none" on the table element.'
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "table-layout-use-css",
                descriptions: {
                    en: {
                        shortText: "Layout table is used instead of CSS",
                        description: "A layout table is used to arrange content on the page rather than CSS."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "table-name-value-pairs",
                descriptions: {
                    en: {
                        shortText: "Data table for name value pairs",
                        description: "Name value pairs are present and are not inside a data table."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "table-simple-headers-unscoped",
                descriptions: {
                    en: {
                        shortText: "SCOPE attribute is missing",
                        description: "The table has both row and column headers but is missing the SCOPE attribute."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-1.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "table-simple-scope-incorrect",
                descriptions: {
                    en: {
                        shortText: "Scope attribute is incorrect",
                        description: "The table uses the scope attribute incorrectly."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "table-simple-scope-invalid",
                descriptions: {
                    en: {
                        shortText: "Scope attribute is invalid",
                        description: "The scope attribute value is not a valid value. Valid values are row, col, rowgroup, or colgroup."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "table-simple-scope-on-td",
                descriptions: {
                    en: {
                        shortText: "Scope is used on TD element",
                        description: "The scope attribute is used on TD elements. This is obsolete. Use a TH element instead."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.3.1.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "target-size-enhanced",
                descriptions: {
                    en: {
                        shortText: "Target is not 44x44 px in size or spacing",
                        description: "Target is not at least 44x44 px in size or spacing."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.5.8.a",
                    standards: [ "wcag22aa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.5.8.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "target-size-small",
                descriptions: {
                    en: {
                        shortText: "Target does not meet minimum size or spacing",
                        description: "Target does not meet minimum 24 by 24 px size or spacing."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.5.8.a",
                    standards: [ "wcag22aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.5.8.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "text-alternative-inadequate",
                descriptions: {
                    en: {
                        shortText: "Text description is incorrect or inadequate",
                        description: "The text description provided is not correct or is inadequate."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.3.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.2.3.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "text-spacing-cut-off",
                descriptions: {
                    en: {
                        shortText: "Text spacing content cut off",
                        description: "When text spacing is adjusted, some content cannot be seen because it is cut off."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.12.a",
                    standards: [ "wcag21aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.12.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "text-spacing-not-adjusted",
                descriptions: {
                    en: {
                        shortText: "Text spacing not adjusted",
                        description: "The spacing between letters, words, lines of text and/or paragraphs cannot be adjusted."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.12.a",
                    standards: [ "wcag21aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.12.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "text-spacing-overlap",
                descriptions: {
                    en: {
                        shortText: "Text spacing content overlaps",
                        description: "When text spacing is adjusted, some content is unclear because it overlaps with other content."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.4.12.a",
                    standards: [ "wcag21aa" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.4.12.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "text-transcript-hard-to-find",
                descriptions: {
                    en: {
                        shortText: "Transcript is hard to find",
                        description: "A text transcript is provided but it is difficult to locate."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.1.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "1.2.3.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.2.3.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.2.1.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "text-transcript-inadequate",
                descriptions: {
                    en: {
                        shortText: "Transcript is incorrect or inadequate",
                        description: "A text transcript is provided, but it is incorrect or inadequate."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.2.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "text-transcript-incomplete",
                descriptions: {
                    en: {
                        shortText: "Transcript does not contain all dialogue",
                        description: "A text transcript is provided but some of the dialogue is missing."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.2.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "text-transcript-missing",
                descriptions: {
                    en: {
                        shortText: "Transcript is not provided",
                        description: "No text transcript is provided."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-1.2.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "text-transcript-undescribed-effects",
                descriptions: {
                    en: {
                        shortText: "Transcript does not describe important sounds",
                        description: "A text transcript is provided but it doesn't describe all important sound effects."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.2.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "text-transcript-unidentified-speakers",
                descriptions: {
                    en: {
                        shortText: "Transcript does not identify all speakers",
                        description: "A text transcript is provided but it doesn't identify all the speakers."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-1.2.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "timeout-extension-grace",
                descriptions: {
                    en: {
                        shortText: "User is not given 20 secs to extend timeout",
                        description: 'The content time out warning does not give the user at least 20 seconds to extend the session with a simple action (for example, "press the spacebar").'
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.2.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.2.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "timeout-no-warning",
                descriptions: {
                    en: {
                        shortText: "User is not warned of timeout",
                        description: "Content times out without providing any warning to the user."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.2.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-2.2.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "timeout-not-announced",
                descriptions: {
                    en: {
                        shortText: "Screen reader user is not warned of timeout",
                        description: "Screen reader users are not made aware of the presence of the time out warning."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.2.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-2.2.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "timeout-not-extensible",
                descriptions: {
                    en: {
                        shortText: "User cannot turn off, adjust or extend time",
                        description: "The timeout warning does not provide a way to turn off the time limit or to adjust or extend the limit at least 10 times."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.2.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-2.2.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "timeout-screenreader",
                descriptions: {
                    en: {
                        shortText: "Timeout mechanism is not screen reader accessible",
                        description: "The mechanism to extend the session is not accessible by a screen reader."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.2.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-2.2.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "title-empty",
                descriptions: {
                    en: {
                        shortText: "Page TITLE element is empty",
                        description: "The TITLE element on this page is empty."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.4.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "title-iframe-duplicate",
                descriptions: {
                    en: {
                        shortText: "iframe title is not unique",
                        description: "The iframe's title is not unique - another iframe on the same page has the same title."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.6.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.4.6.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "title-iframe-missing",
                descriptions: {
                    en: {
                        shortText: "iframe: iframe does not have a title",
                        description: "The iframe is missing a title."
                    }
                },
                checkpoints: [ {
                    checkpoint: "4.1.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-4.1.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "title-iframe-not-meaningful",
                descriptions: {
                    en: {
                        shortText: "title for iframe is not meaningful",
                        description: "The title for the iframe is not meaningful."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.6.b",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.4.6.b",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "title-missing",
                descriptions: {
                    en: {
                        shortText: "Page is missing a TITLE element",
                        description: "This page is missing a TITLE element."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.4.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "title-not-meaningful",
                descriptions: {
                    en: {
                        shortText: "Page TITLE element does not identify purpose of page",
                        description: "The TITLE element on this page does not identify the contents or purpose of the page."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.4.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "title-not-unique",
                descriptions: {
                    en: {
                        shortText: "Page TITLE is not unique",
                        description: "The TITLE element on this page is not unique within the website or cohesive context of a website."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.4.2.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.4.2.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "touch-area-spacing",
                descriptions: {
                    en: {
                        shortText: "Inactive space between elements too small",
                        description: "There are less than six pixels between a touch target area and an adjacent touch target."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.5.5.a",
                    standards: [ "wcag21aaa" ],
                    type: "best-practice",
                    impact: 1
                }, {
                    checkpoint: "en301549-9-2.5.5.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 1
                } ]
            }, {
                id: "touch-down-event",
                descriptions: {
                    en: {
                        shortText: "Irreversible action occurs on down event",
                        description: "Control submits an irreversible action on the down event."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.5.2.a",
                    standards: [ "wcag21a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.5.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "touch-element-grouped",
                descriptions: {
                    en: {
                        shortText: "Adjacent touch elements are redundant",
                        description: "Adjacent actionable touch elements that go to the same screen or have the same action are not grouped into one touch zone."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.5.5.a",
                    standards: [ "wcag21aaa" ],
                    type: "best-practice",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.5.5.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 2
                } ]
            }, {
                id: "touch-path-based-gesture-required",
                descriptions: {
                    en: {
                        shortText: "Path-based gesture required",
                        description: "Functionality (excluding operating system, user agent or assistive technology functions) relies on path-based gestures."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.5.1.a",
                    standards: [ "wcag21a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.5.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "touch-single-point-action-not-avail",
                descriptions: {
                    en: {
                        shortText: "Single-pointer action not available ",
                        description: "Functionality (excluding operating system, user agent or assistive technology functions) requires multi-point gestures."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.5.1.a",
                    standards: [ "wcag21a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-2.5.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "touch-size-small",
                descriptions: {
                    en: {
                        shortText: "Touch target size less than 44px",
                        description: "The touch target size of an actionable element is less than 44px in width and/or height."
                    }
                },
                checkpoints: [ {
                    checkpoint: "2.5.5.a",
                    standards: [ "wcag21aaa", "aenb-77" ],
                    type: "issue",
                    impact: 2
                }, {
                    checkpoint: "en301549-9-2.5.5.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 2
                } ]
            }, {
                id: "unexpected-change-on-focus",
                descriptions: {
                    en: {
                        shortText: "There is a substantial, unannounced context change on focus",
                        description: "When a component receives keyboard focus there is a significant change of content in the page (above the user's point of regard) that changes the meaning of the page."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.2.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-3.2.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "unexpected-change-on-focus-screen-reader",
                descriptions: {
                    en: {
                        shortText: "There is a substantial, unannounced context change on screen reader focus",
                        description: "When a component receives screen reader focus there is a significant change of content in the page (above the user's point of regard) that changes the meaning of the page."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.2.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-3.2.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "unexpected-change-on-interaction",
                descriptions: {
                    en: {
                        shortText: "Form field causes unexpected change",
                        description: "A change of context occurs without warning when the user changes the setting of a user interface control."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.2.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-3.2.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "unexpected-change-select",
                descriptions: {
                    en: {
                        shortText: "Arrow keys activate dropdown menu options",
                        description: "A change of context occurs without warning while a user is using the keyboard to navigate a dropdown control, before actually selecting an option."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.2.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 4
                }, {
                    checkpoint: "en301549-9-3.2.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 4
                } ]
            }, {
                id: "unexpected-window-launch",
                descriptions: {
                    en: {
                        shortText: "New window opens automatically without warning",
                        description: "A window is automatically launched without warning when the user inputs a value in a text field or selects a checkbox or radio button."
                    }
                },
                checkpoints: [ {
                    checkpoint: "3.2.2.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-3.2.2.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "user-agent-semantic-del-ins",
                descriptions: {
                    en: {
                        shortText: "USER AGENT: Use of DEL or INS element is not supported by all screen readers",
                        description: "USER AGENT: Use of DEL or INS element is not supported by all screen readers."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.3.1.a",
                    standards: [ "wcag2a" ],
                    type: "issue",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.3.1.a",
                    standards: [ "EN-301-549" ],
                    type: "issue",
                    impact: 3
                } ]
            }, {
                id: "video-transcript-missing",
                descriptions: {
                    en: {
                        shortText: "Video transcript missing",
                        description: "The video is missing a full text transcript."
                    }
                },
                checkpoints: [ {
                    checkpoint: "1.2.2.a",
                    standards: [ "wcag2a" ],
                    type: "best-practice",
                    impact: 3
                }, {
                    checkpoint: "en301549-9-1.2.2.a",
                    standards: [ "EN-301-549" ],
                    type: "best-practice",
                    impact: 3
                } ]
            } ];
            const WCAG_REGEX = /^wcag\d{1,2}a{1,3}$/;
            const checkpointToWcagTag = checkpoint => checkpoint ? `wcag${checkpoint.replace(/\./g, "")}` : "";
            const checkpointToEN301Tag = checkpoint => {
                const version = checkpoint.replace("en301549-9-", "").replace(/\.[a-z]$/, "");
                return checkpoint ? `EN-9.${version}` : "";
            };
            const findTags = (data, filterFunc) => {
                var _data$checkpoints$fin;
                return null === (_data$checkpoints$fin = data.checkpoints.find((d => d.standards.find(filterFunc)))) || void 0 === _data$checkpoints$fin ? void 0 : _data$checkpoints$fin.standards;
            };
            const allowedRuleTags = {
                "keyboard-inaccessible": "wcag211a",
                "alt-text-essential-image-text": "wcag111b",
                "alt-text-missing": "wcag111b"
            };
            const getCheckpointTags = (data, rule) => data.checkpoints.map((d => {
                if (!d.checkpoint) return "";
                return d.standards.find((t => WCAG_REGEX.test(t))) ? checkpointToWcagTag(d.checkpoint) : d.standards.find((t => "EN-301-549" === t)) ? checkpointToEN301Tag(d.checkpoint) : "";
            })).filter((tag => !allowedRuleTags[rule] || allowedRuleTags[rule] === tag));
            const getTags = (id, issues = issueDescriptions) => {
                var _issue$checkpoints;
                const issue = Array.isArray(issues) ? issues.find((d => d.id === id)) : issues;
                if (!(null !== issue && void 0 !== issue && null !== (_issue$checkpoints = issue.checkpoints) && void 0 !== _issue$checkpoints && _issue$checkpoints.length)) return [];
                if (issue.checkpoints.some((data => "best-practice" === data.type))) return [ "best-practice" ];
                const wcagTags = findTags(issue, (t => WCAG_REGEX.test(t)));
                const en301Tags = findTags(issue, (t => "EN-301-549" === t));
                return [ null === wcagTags || void 0 === wcagTags ? void 0 : wcagTags[0], null === en301Tags || void 0 === en301Tags ? void 0 : en301Tags[0], ...getCheckpointTags(issue, id) ].filter(Boolean);
            };
            const getIssueDescription = (id, issues = issueDescriptions) => issues.find((d => d.id === id));
            function create(measurementName) {
                const startName = `${measurementName}-start`;
                const endName = `${measurementName}-end`;
                const clear = () => {
                    performance.clearMarks(startName);
                    performance.clearMarks(endName);
                    performance.clearMeasures(measurementName);
                };
                const start = () => {
                    clear();
                    performance.mark(startName);
                };
                const end = () => performance.mark(endName);
                return {
                    start,
                    end,
                    clear,
                    measure: () => {
                        performance.measure(measurementName, startName, endName);
                        return performance.getEntriesByName(measurementName, "measure")[0];
                    }
                };
            }
            var analytics = __webpack_require__(2833);
            const deprecatedTool = [ {
                config: {
                    deprecated: true
                }
            } ];
            const guides = {
                "buttons-and-links": deprecatedTool,
                headings: deprecatedTool,
                lists: deprecatedTool,
                "page-info": deprecatedTool
            };
            const guided_test_logic = guides;
            const buttons_and_links_en_namespaceObject = JSON.parse('{"buttons-and-links":{"name":"Buttons and links","deprecation":"This guided test has been replaced by the \'Interactive Elements\' test.","description":"The buttons and links tests will walk you through testing buttons and links.","action":{"test":"Test buttons and links"},"progress":{"missing":"Missing","accuracy":"Accuracy"}}}');
            const headings_en_namespaceObject = JSON.parse('{"headings":{"name":"Headings","deprecation":"This guided test has been replaced by the \'Structure\' test.","description":"The headings tests will walk you through testing headings (h1-h6 and the \'heading\' role).","action":{"test":"Test Headings"}}}');
            const lists_en_namespaceObject = JSON.parse('{"lists":{"name":"Lists","deprecation":"This guided test has been replaced by the \'Structure\' test.","description":"The lists tests will walk you through testing lists (ul, ol, and dl).","action":{"test":"Test lists"},"progress":{"missing":"Missing","accuracy":"Accuracy"}}}');
            const page_info_en_namespaceObject = JSON.parse('{"page-info":{"name":"Page information","deprecation":"This guided test has been replaced by the \'Structure\' test.","description":"The page info tests will walk you through testing the page\'s title and primary language.","action":{"test":"Test Page information"}}}');
            const locales = {
                "buttons-and-links.en": buttons_and_links_en_namespaceObject,
                "headings.en": headings_en_namespaceObject,
                "lists.en": lists_en_namespaceObject,
                "page-info.en": page_info_en_namespaceObject
            };
            const guided_test_logic_locales = locales;
            function guide_ownKeys(e, r) {
                var t = Object.keys(e);
                if (Object.getOwnPropertySymbols) {
                    var o = Object.getOwnPropertySymbols(e);
                    r && (o = o.filter((function(r) {
                        return Object.getOwnPropertyDescriptor(e, r).enumerable;
                    }))), t.push.apply(t, o);
                }
                return t;
            }
            function guide_objectSpread(e) {
                for (var r = 1; r < arguments.length; r++) {
                    var t = null != arguments[r] ? arguments[r] : {};
                    r % 2 ? guide_ownKeys(Object(t), !0).forEach((function(r) {
                        guide_defineProperty(e, r, t[r]);
                    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : guide_ownKeys(Object(t)).forEach((function(r) {
                        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
                    }));
                }
                return e;
            }
            function guide_defineProperty(e, r, t) {
                return (r = guide_toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
                    value: t,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : e[r] = t, e;
            }
            function guide_toPropertyKey(t) {
                var i = guide_toPrimitive(t, "string");
                return "symbol" == typeof i ? i : i + "";
            }
            function guide_toPrimitive(t, r) {
                if ("object" != typeof t || !t) return t;
                var e = t[Symbol.toPrimitive];
                if (void 0 !== e) {
                    var i = e.call(t, r || "default");
                    if ("object" != typeof i) return i;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === r ? String : Number)(t);
            }
            function _objectWithoutProperties(e, t) {
                if (null == e) return {};
                var o, r, i = _objectWithoutPropertiesLoose(e, t);
                if (Object.getOwnPropertySymbols) {
                    var s = Object.getOwnPropertySymbols(e);
                    for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
                }
                return i;
            }
            function _objectWithoutPropertiesLoose(r, e) {
                if (null == r) return {};
                var t = {};
                for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
                    if (e.includes(n)) continue;
                    t[n] = r[n];
                }
                return t;
            }
            const processedLocales = Object.keys(guided_test_logic_locales).reduce(((localeObj, locale) => {
                const tokens = locale.split(".");
                if (!localeObj.hasOwnProperty(tokens[0])) localeObj[tokens[0]] = {};
                localeObj[tokens[0]][tokens[1]] = guided_test_logic_locales[locale];
                return localeObj;
            }), {});
            const impacts = issueDescriptions.reduce(((obj, val) => {
                const {id, descriptions: _descriptions} = val, other = _objectWithoutProperties(val, [ "id", "descriptions" ]);
                obj[id] = guide_objectSpread({}, other);
                return obj;
            }), {});
            const guide = Object.keys(guided_test_logic).reduce(((guideObj, guide) => {
                guideObj[guide] = {};
                guideObj[guide].steps = guided_test_logic[guide];
                guideObj[guide].locale = processedLocales[guide];
                guideObj[guide].config = guided_test_logic[guide][0].config;
                return guideObj;
            }), {
                impacts
            });
            const interactiveElements = {
                name: "interactive-elements",
                displayName: lib.ZP`Interactive Elements`,
                description: lib.ZP`The Interactive Elements tool will guide you through testing interactive elements' accessible names, roles, and states.`,
                config: {
                    vitals: [ "interactives" ],
                    elementSelector: true,
                    "takes-screenshots": true
                }
            };
            const config_images = {
                name: "images",
                displayName: lib.ZP`Images`,
                description: lib.ZP`The images tests will walk you through testing images (img tags, the 'img' role, css background images, icons and more!).`,
                config: {
                    vitals: [ "images" ],
                    elementSelector: true,
                    "takes-screenshots": true,
                    tips: [ {
                        id: "images-sight-required",
                        text: lib.ZP`Vision is needed to perform the entirety of this test accurately.`
                    } ]
                }
            };
            const structure = {
                name: "structure",
                displayName: lib.ZP`Structure`,
                description: lib.ZP`The structure tool will guide you through testing the page's structure.`,
                config: {
                    vitals: [ "headings" ],
                    elementSelector: true,
                    "takes-screenshots": true
                }
            };
            const modalDialog = {
                name: "aria-modal",
                displayName: lib.ZP`Modal Dialog`,
                description: lib.ZP`The Modal Dialog tool will guide you through testing a single modal or alert dialog.`,
                config: {
                    vitals: [],
                    elementSelector: true,
                    "takes-screenshots": true,
                    rerun: true
                }
            };
            const table = {
                name: "table",
                displayName: lib.ZP`Table`,
                description: lib.ZP`The table tool will guide you through testing a table.`,
                config: {
                    vitals: [ "tables", "table", "data-cells" ],
                    elementSelector: true,
                    "takes-screenshots": true,
                    maintainDebuggerSession: true
                }
            };
            const keyboard = {
                name: "keyboard",
                displayName: lib.ZP`Keyboard`,
                description: lib.ZP`The keyboard tests will perform a series of tab order and focus indication checks.`,
                config: {
                    vitals: [ "focused-element", "missing", "select-missing", "skipped", "tabStops" ],
                    elementSelector: true,
                    "takes-screenshots": true
                }
            };
            const config_forms = {
                name: "forms",
                displayName: lib.ZP`Forms`,
                description: lib.ZP`Test forms to ensure users can fill them out accurately and submit them.`,
                config: {
                    vitals: [ "forms", "inputs", "groups" ],
                    elementSelector: true,
                    "takes-screenshots": true,
                    tips: [ {
                        id: "images-sight-required",
                        text: lib.ZP`Vision is needed to perform the entirety of this test accurately.`
                    } ]
                }
            };
            const v2Tools = [ interactiveElements, structure, modalDialog, table, config_images, keyboard, config_forms ];
            const translateTips = ({tips = []}, locale) => {
                tips.forEach((tip => {
                    tip.text = locale.tips[tip.id];
                }));
            };
            const GUIDED_TILE_ORDER = [ "table", "keyboard", "aria-modal", "interactive-elements", "structure", "page-info", "buttons-and-links", "lists", "images", "headings", "forms" ];
            const sortTiles = (a, b) => {
                const indexA = GUIDED_TILE_ORDER.indexOf(a.name);
                const indexB = GUIDED_TILE_ORDER.indexOf(b.name);
                return indexA - indexB;
            };
            const getGuides = (lang = "en") => {
                const deprecatedTools = Object.entries(guide).filter((entry => !!entry[1].steps)).map((([name, guide]) => {
                    const locale = guide.locale[lang][name];
                    const deprecationNotice = null === locale || void 0 === locale ? void 0 : locale.deprecation;
                    const config = guide.config || {};
                    translateTips(config, locale);
                    return {
                        name,
                        heading: locale.name,
                        description: deprecationNotice || locale.description,
                        config,
                        version: 1
                    };
                }));
                return [ ...deprecatedTools, ...v2Tools.map((({name, displayName, description, config}) => ({
                    name,
                    heading: displayName,
                    description,
                    config,
                    version: 2
                }))) ].sort(sortTiles);
            };
            const get_guides = getGuides;
            function manifests_objectWithoutProperties(e, t) {
                if (null == e) return {};
                var o, r, i = manifests_objectWithoutPropertiesLoose(e, t);
                if (Object.getOwnPropertySymbols) {
                    var s = Object.getOwnPropertySymbols(e);
                    for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
                }
                return i;
            }
            function manifests_objectWithoutPropertiesLoose(r, e) {
                if (null == r) return {};
                var t = {};
                for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
                    if (e.includes(n)) continue;
                    t[n] = r[n];
                }
                return t;
            }
            function manifests_ownKeys(e, r) {
                var t = Object.keys(e);
                if (Object.getOwnPropertySymbols) {
                    var o = Object.getOwnPropertySymbols(e);
                    r && (o = o.filter((function(r) {
                        return Object.getOwnPropertyDescriptor(e, r).enumerable;
                    }))), t.push.apply(t, o);
                }
                return t;
            }
            function manifests_objectSpread(e) {
                for (var r = 1; r < arguments.length; r++) {
                    var t = null != arguments[r] ? arguments[r] : {};
                    r % 2 ? manifests_ownKeys(Object(t), !0).forEach((function(r) {
                        manifests_defineProperty(e, r, t[r]);
                    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : manifests_ownKeys(Object(t)).forEach((function(r) {
                        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
                    }));
                }
                return e;
            }
            function manifests_defineProperty(e, r, t) {
                return (r = manifests_toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
                    value: t,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : e[r] = t, e;
            }
            function manifests_toPropertyKey(t) {
                var i = manifests_toPrimitive(t, "string");
                return "symbol" == typeof i ? i : i + "";
            }
            function manifests_toPrimitive(t, r) {
                if ("object" != typeof t || !t) return t;
                var e = t[Symbol.toPrimitive];
                if (void 0 !== e) {
                    var i = e.call(t, r || "default");
                    if ("object" != typeof i) return i;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === r ? String : Number)(t);
            }
            const manifests_guides = get_guides();
            const formattedIssue = (issue, isBestPractice = false) => {
                const {ISSUES_URL} = {
                    NODE_ENV: "production",
                    COCONUT: "false",
                    EDGE: "false",
                    FIREFOX: "true",
                    IS_AXE_PRO: "false",
                    MANIFEST_VERSION: 2,
                    E2E: false,
                    DOCS_SITE_URL: "https://docs.deque.com/devtools-html",
                    ISSUES_URL: "https://docs.deque.com/issue-help/1.0.0/en",
                    AXE_CONFIG_URL: "https://docs.deque.com/devtools-server/4.0.0/en/axe-configuration",
                    MANUAL_ISSUE_URL: "https://docs.deque.com/devtools-html/4.0.0/en/devtools-manual-issue",
                    WHATS_LEFT_TO_TEST_URL: "https://docs.deque.com/devtools-html/4.0.0/en/devtools-whatslefttotest",
                    USER_FLOW_URL: "https://docs.deque.com/devtools-html/4.0.0/en/user-flow-analysis",
                    AXE_PRO_TRIAL_PATH: "/axe-devtools-pro/trial",
                    ENV: "production",
                    AXE_PRO_URL: "https://axe.deque.com",
                    USAGE_SERVICE_URL: "https://usage.deque.com",
                    AMPLITUDE_API_KEY: "a1ce09d0b14ddcc12ab7b508b6606a2f",
                    DATADOG_CLIENT_TOKEN: "puba2eb4ed47c6eb69ce20ef237db754ff8"
                };
                return manifests_objectSpread(manifests_objectSpread({}, issue), {}, {
                    help_url: `${ISSUES_URL}/${issue.rule}`,
                    description: issue.description || issue.summary,
                    variant: isBestPractice ? "best-practice" : "violation",
                    tags: issue.tags || getTags(issue.id)
                });
            };
            function attachManifestsListeners() {
                bridge.J.listen("manifest:new", (async ({message: {testId, tool}}) => {
                    if (!testId || !tool) return {};
                    try {
                        return await axe_api.Z.post(`/api/tests/${testId}/manifests`, {
                            name: tool
                        });
                    } catch (ex) {
                        return {};
                    }
                }));
                bridge.J.listen("manifest:update", (async ({message = {}, tabId}) => {
                    const {id, testId, testName, name, showNotificationOnFailure = false, createIssuesOnManifestComplete = true} = message, manifest = manifests_objectWithoutProperties(message, [ "id", "testId", "testName", "name", "showNotificationOnFailure", "createIssuesOnManifestComplete" ]);
                    if (!testId) return {};
                    let manifestPayload = manifest;
                    const {metadata = {}} = manifest;
                    const type = metadata.type || metadata.tool;
                    try {
                        const guide = manifests_guides.find((({name: guideName}) => guideName === type));
                        if (type && guide) {
                            const {vitals} = dlv_umd_default()(guide, "config", []);
                            manifestPayload = manifests_objectSpread(manifests_objectSpread({}, manifest), {}, {
                                metadata: manifests_objectSpread(manifests_objectSpread({}, metadata), {}, {
                                    tree: getVitals(vitals, manifest)
                                })
                            });
                        }
                        const saveManifestPerf = create("saveIGT");
                        saveManifestPerf.start();
                        const updateManifest = await axe_api.Z.put(`/api/tests/${testId}/manifests/${id}`, {
                            data: manifestPayload,
                            name
                        });
                        saveManifestPerf.end();
                        analytics.Kl(saveManifestPerf.measure().duration, type);
                        let updateIssues;
                        if (createIssuesOnManifestComplete && manifest.metadata.complete && manifest.metadata.issues) updateIssues = axe_api.Z.post(`/api/tests/${testId}/issues`, {
                            manifestId: id,
                            manifestGuideName: type,
                            test_name: testName,
                            violations: manifest.metadata.issues.map((issue => {
                                const issueDescription = getIssueDescription(issue.id);
                                if (!issueDescription) return formattedIssue(issue);
                                const isBestPractice = Array.isArray(issueDescription.checkpoints) && !!issueDescription.checkpoints.find((checkpoint => "best-practice" === checkpoint.type));
                                return formattedIssue(issue, isBestPractice);
                            }))
                        });
                        const [updatedManifest] = await Promise.all([ updateManifest, updateIssues ]);
                        return updatedManifest;
                    } catch (ex) {
                        if (showNotificationOnFailure) bridge.J.send(bridge.D.devtools, "app:notification", {
                            type: "caution",
                            text: lib.ZP`There was an issue updating your test. Please try again.`
                        }, {
                            tabId
                        });
                    }
                }));
                bridge.J.listen("manifests:get", (async ({message: testId}) => {
                    if (!testId) return [];
                    try {
                        return await axe_api.Z.get(`/api/tests/${testId}/manifests`);
                    } catch (ex) {
                        return [];
                    }
                }));
                bridge.J.listen("manifest:delete", (async ({message, tabId}) => {
                    const {testId} = message, manifest = manifests_objectWithoutProperties(message, [ "testId" ]);
                    if (!testId) return;
                    try {
                        await axe_api.Z["delete"](`/api/tests/${testId}/manifests/${manifest.id}`);
                    } catch (ex) {
                        bridge.J.send(bridge.D.devtools, "app:notification", {
                            type: "caution",
                            text: lib.ZP`Unable to delete`
                        }, {
                            tabId
                        });
                        return;
                    }
                }));
            }
            function guided_ownKeys(e, r) {
                var t = Object.keys(e);
                if (Object.getOwnPropertySymbols) {
                    var o = Object.getOwnPropertySymbols(e);
                    r && (o = o.filter((function(r) {
                        return Object.getOwnPropertyDescriptor(e, r).enumerable;
                    }))), t.push.apply(t, o);
                }
                return t;
            }
            function guided_objectSpread(e) {
                for (var r = 1; r < arguments.length; r++) {
                    var t = null != arguments[r] ? arguments[r] : {};
                    r % 2 ? guided_ownKeys(Object(t), !0).forEach((function(r) {
                        guided_defineProperty(e, r, t[r]);
                    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : guided_ownKeys(Object(t)).forEach((function(r) {
                        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
                    }));
                }
                return e;
            }
            function guided_defineProperty(e, r, t) {
                return (r = guided_toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
                    value: t,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : e[r] = t, e;
            }
            function guided_toPropertyKey(t) {
                var i = guided_toPrimitive(t, "string");
                return "symbol" == typeof i ? i : i + "";
            }
            function guided_toPrimitive(t, r) {
                if ("object" != typeof t || !t) return t;
                var e = t[Symbol.toPrimitive];
                if (void 0 !== e) {
                    var i = e.call(t, r || "default");
                    if ("object" != typeof i) return i;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === r ? String : Number)(t);
            }
            function guided_objectWithoutProperties(e, t) {
                if (null == e) return {};
                var o, r, i = guided_objectWithoutPropertiesLoose(e, t);
                if (Object.getOwnPropertySymbols) {
                    var s = Object.getOwnPropertySymbols(e);
                    for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
                }
                return i;
            }
            function guided_objectWithoutPropertiesLoose(r, e) {
                if (null == r) return {};
                var t = {};
                for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
                    if (e.includes(n)) continue;
                    t[n] = r[n];
                }
                return t;
            }
            function attachGuidedListeners() {
                bridge.J.listen("guided:start", (async ({message}) => {
                    const {tabId} = message, body = guided_objectWithoutProperties(message, [ "tabId" ]);
                    try {
                        const {tool, username, startedFrom = "record"} = body, manifest = guided_objectWithoutProperties(body, [ "tool", "username", "startedFrom" ]);
                        const {testUrl} = manifest;
                        bridge.J.send(bridge.D.devtools, "guide:start-guided", {
                            tool,
                            testUrl,
                            username,
                            resume: false,
                            startedFrom,
                            manifest
                        }, {
                            tabId
                        });
                    } catch (error) {
                        (0, request_error_handler.Z)(tabId, error, lib.ZP`There was a problem starting your ${"Intelligent Guided Test"}.`);
                    }
                }));
                bridge.J.listen("guided:resume", (async ({message: manifest}) => {
                    if (!manifest.test_id) return;
                    bridge.J.send(bridge.D.devtools, "guide:start-guided", {
                        tool: manifest.guide,
                        ensureTestTab: true,
                        testUrl: manifest.body.metadata.url,
                        username: manifest.body.metadata.username,
                        resume: true,
                        rerun: !!manifest.body.__rerunFromManifestId,
                        manifest: guided_objectSpread({
                            id: manifest.id,
                            testId: manifest.test_id,
                            testName: manifest.testName,
                            testUrl: manifest.testUrl
                        }, manifest.body)
                    }, {
                        tabId: manifest.tabId
                    });
                }));
                bridge.J.listen("guided:rerun", (async ({message: manifest}) => {
                    if (!manifest.test_id) return;
                    bridge.J.send(bridge.D.devtools, "guide:start-guided", {
                        tool: manifest.guide,
                        ensureTestTab: true,
                        testUrl: manifest.body.metadata.url,
                        username: manifest.body.metadata.username,
                        rerun: true,
                        manifest: guided_objectSpread({
                            id: manifest.id,
                            testId: manifest.test_id,
                            testName: manifest.testName,
                            testUrl: manifest.testUrl
                        }, manifest.body)
                    }, {
                        tabId: manifest.tabId
                    });
                }));
                bridge.J.listen("guided:save-and-quit", (({message}) => {
                    bridge.J.send(bridge.D.devtools, "guided:save-and-quit", {}, {
                        tabId: message.tabId
                    });
                }));
            }
            const attachModalListeners = () => {
                let tabber;
                bridge.J.listen("modal:tabber-init", (async ({tabId}) => {
                    if (tabber) tabber.stop();
                    tabber = new Tabber(tabId);
                    try {
                        await tabber.start();
                    } catch {
                        bridge.J.send(bridge.D.content, "attach:failed", {}, {
                            tabId
                        });
                    }
                }));
                bridge.J.listen("modal:fire-tab", (() => {
                    if (!tabber) return;
                    tabber.fireTab();
                }));
                bridge.J.listen("modal:tabber-stop", (() => {
                    if (!tabber) return;
                    tabber.stop();
                    tabber = null;
                }));
                bridge.J.listen("modal:fire-escape", (async ({tabId}) => {
                    if (tabber) tabber.stop();
                    tabber = new Tabber(tabId);
                    await tabber.fireEscape();
                    return true;
                }));
            };
            const dom_debug = browser_default()("background:dom");
            function attachDOMListeners() {
                bridge.J.listen("dom:get-active-element-shadow-root-type", (async ({shouldDetachAfterProcess = false, tabId}) => {
                    let attached;
                    try {
                        attached = await attach(tabId);
                    } catch {
                        if (!attached || failed_to_attach()) return null;
                    }
                    let shadowRootType = null;
                    try {
                        const {result: {objectId: activeElementRemoteObjectId}} = await sendCommand({
                            tabId
                        }, "Runtime.evaluate", {
                            expression: `\n          /**\n           * From: https://stackoverflow.com/a/61167135\n           * \n           * Return the active element of a page, regardless of shadow root or iframe window.\n           * @returns {HTMLElement}\n           */\n          (function getActiveElement(element = document.activeElement) {\n            const shadowRoot = element.shadowRoot\n            const contentDocument = element.contentDocument\n          \n            if (shadowRoot && shadowRoot.activeElement) {\n              return getActiveElement(shadowRoot.activeElement)\n            }\n          \n            if (contentDocument && contentDocument.activeElement) {\n              return getActiveElement(contentDocument.activeElement)\n            }\n          \n            return element\n          })()\n          `
                        });
                        if (activeElementRemoteObjectId) {
                            var _activeElementNode$sh;
                            const {node: activeElementNode} = await sendCommand({
                                tabId
                            }, "DOM.describeNode", {
                                objectId: activeElementRemoteObjectId,
                                pierce: true
                            });
                            if (null !== activeElementNode && void 0 !== activeElementNode && null !== (_activeElementNode$sh = activeElementNode.shadowRoots) && void 0 !== _activeElementNode$sh && _activeElementNode$sh.length) shadowRootType = activeElementNode.shadowRoots[0].shadowRootType; else dom_debug("Active element does not have a shadow root");
                        } else dom_debug("Unable to retrieve the active element RemoteObjectId");
                    } catch (e) {
                        dom_debug(`An error ocurred while trying to retrieve the active element shadow type: ${e}`);
                    } finally {
                        if (shouldDetachAfterProcess) await detach(tabId);
                    }
                    dom_debug(`Active element shadowRootType: ${shadowRootType}`);
                    return shadowRootType;
                }));
            }
            function listenForNewWindow() {
                const attach = ({tabId}) => {
                    const detach = () => {
                        browser.tabs.onCreated.removeListener(onCreated);
                        bridge.J.unlisten("tab-record:new-window-listener:detach", detach);
                    };
                    const onCreated = () => {
                        bridge.J.send(bridge.D.content, "tab-record:new-window:launched", null, {
                            tabId
                        });
                    };
                    detach();
                    browser.tabs.onCreated.addListener(onCreated);
                    bridge.J.listen("tab-record:new-window-listener:detach", detach);
                };
                bridge.J.listen("tab-record:new-window-listener:attach", attach);
            }
            function issues_ownKeys(e, r) {
                var t = Object.keys(e);
                if (Object.getOwnPropertySymbols) {
                    var o = Object.getOwnPropertySymbols(e);
                    r && (o = o.filter((function(r) {
                        return Object.getOwnPropertyDescriptor(e, r).enumerable;
                    }))), t.push.apply(t, o);
                }
                return t;
            }
            function issues_objectSpread(e) {
                for (var r = 1; r < arguments.length; r++) {
                    var t = null != arguments[r] ? arguments[r] : {};
                    r % 2 ? issues_ownKeys(Object(t), !0).forEach((function(r) {
                        issues_defineProperty(e, r, t[r]);
                    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : issues_ownKeys(Object(t)).forEach((function(r) {
                        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
                    }));
                }
                return e;
            }
            function issues_defineProperty(e, r, t) {
                return (r = issues_toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
                    value: t,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : e[r] = t, e;
            }
            function issues_toPropertyKey(t) {
                var i = issues_toPrimitive(t, "string");
                return "symbol" == typeof i ? i : i + "";
            }
            function issues_toPrimitive(t, r) {
                if ("object" != typeof t || !t) return t;
                var e = t[Symbol.toPrimitive];
                if (void 0 !== e) {
                    var i = e.call(t, r || "default");
                    if ("object" != typeof i) return i;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === r ? String : Number)(t);
            }
            function mapAxeIssueToDatabaseIssue(issue, node, additionalProperties) {
                var _issue$tags;
                return issues_objectSpread({
                    description: issue.description,
                    help: issue.help,
                    help_url: issue.helpUrl,
                    impact: issue.impact,
                    rule: issue.id,
                    summary: node.failureSummary || "",
                    source: node.html,
                    selector: node.target || [],
                    is_manual: false,
                    variant: null !== (_issue$tags = issue.tags) && void 0 !== _issue$tags && _issue$tags.includes("best-practice") ? "best-practice" : "violation",
                    needs_review: false,
                    tags: issue.tags,
                    remediation: {
                        any: node.any,
                        all: node.all,
                        none: node.none
                    }
                }, additionalProperties);
            }
            function background_issues_ownKeys(e, r) {
                var t = Object.keys(e);
                if (Object.getOwnPropertySymbols) {
                    var o = Object.getOwnPropertySymbols(e);
                    r && (o = o.filter((function(r) {
                        return Object.getOwnPropertyDescriptor(e, r).enumerable;
                    }))), t.push.apply(t, o);
                }
                return t;
            }
            function background_issues_objectSpread(e) {
                for (var r = 1; r < arguments.length; r++) {
                    var t = null != arguments[r] ? arguments[r] : {};
                    r % 2 ? background_issues_ownKeys(Object(t), !0).forEach((function(r) {
                        background_issues_defineProperty(e, r, t[r]);
                    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : background_issues_ownKeys(Object(t)).forEach((function(r) {
                        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
                    }));
                }
                return e;
            }
            function background_issues_defineProperty(e, r, t) {
                return (r = background_issues_toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
                    value: t,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : e[r] = t, e;
            }
            function background_issues_toPropertyKey(t) {
                var i = background_issues_toPrimitive(t, "string");
                return "symbol" == typeof i ? i : i + "";
            }
            function background_issues_toPrimitive(t, r) {
                if ("object" != typeof t || !t) return t;
                var e = t[Symbol.toPrimitive];
                if (void 0 !== e) {
                    var i = e.call(t, r || "default");
                    if ("object" != typeof i) return i;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === r ? String : Number)(t);
            }
            const nodesMapper = (issues, additionalData) => {
                const filteredIssues = issues.filter((issue => !!issue.impact));
                const mappedIssues = [];
                const selectorMap = additionalData.selectorMap;
                for (const issue of filteredIssues) mappedIssues.push(...issue.nodes.map((node => {
                    var _node$advanced;
                    const nodeAdditionalData = background_issues_objectSpread(background_issues_objectSpread({}, additionalData), {}, {
                        boundingBox: selectorMap[JSON.stringify(node.target)] || (null === (_node$advanced = node.advanced) || void 0 === _node$advanced ? void 0 : _node$advanced.visibleBoundingRect)
                    });
                    delete nodeAdditionalData.selectorMap;
                    return mapAxeIssueToDatabaseIssue(issue, node, nodeAdditionalData);
                })));
                return mappedIssues;
            };
            const issueMapper = ({violations = [], bestPractices = [], incomplete: needsReview = [], selectorMap = {}, screenshotId}) => {
                const additionalData = {
                    selectorMap,
                    screenshotId
                };
                return [ ...nodesMapper(violations, additionalData), ...nodesMapper(bestPractices, background_issues_objectSpread(background_issues_objectSpread({}, additionalData), {}, {
                    variant: "best-practice"
                })), ...nodesMapper(needsReview, background_issues_objectSpread(background_issues_objectSpread({}, additionalData), {}, {
                    needs_review: true
                })) ];
            };
            var package_0 = __webpack_require__(9876);
            function background_ownKeys(e, r) {
                var t = Object.keys(e);
                if (Object.getOwnPropertySymbols) {
                    var o = Object.getOwnPropertySymbols(e);
                    r && (o = o.filter((function(r) {
                        return Object.getOwnPropertyDescriptor(e, r).enumerable;
                    }))), t.push.apply(t, o);
                }
                return t;
            }
            function background_objectSpread(e) {
                for (var r = 1; r < arguments.length; r++) {
                    var t = null != arguments[r] ? arguments[r] : {};
                    r % 2 ? background_ownKeys(Object(t), !0).forEach((function(r) {
                        background_defineProperty(e, r, t[r]);
                    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : background_ownKeys(Object(t)).forEach((function(r) {
                        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
                    }));
                }
                return e;
            }
            function background_defineProperty(e, r, t) {
                return (r = background_toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
                    value: t,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : e[r] = t, e;
            }
            function background_toPropertyKey(t) {
                var i = background_toPrimitive(t, "string");
                return "symbol" == typeof i ? i : i + "";
            }
            function background_toPrimitive(t, r) {
                if ("object" != typeof t || !t) return t;
                var e = t[Symbol.toPrimitive];
                if (void 0 !== e) {
                    var i = e.call(t, r || "default");
                    if ("object" != typeof i) return i;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === r ? String : Number)(t);
            }
            function background_objectWithoutProperties(e, t) {
                if (null == e) return {};
                var o, r, i = background_objectWithoutPropertiesLoose(e, t);
                if (Object.getOwnPropertySymbols) {
                    var s = Object.getOwnPropertySymbols(e);
                    for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
                }
                return i;
            }
            function background_objectWithoutPropertiesLoose(r, e) {
                if (null == r) return {};
                var t = {};
                for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
                    if (e.includes(n)) continue;
                    t[n] = r[n];
                }
                return t;
            }
            const RESPONSE_TIMEOUT = 4e3;
            const screenshotsDebug = browser_default()("screenshots");
            const TAB_TIMEOUT = 200;
            bridge.J.listen("needs-review:yes", (async ({message, tabId}) => {
                try {
                    await axe_api.Z.put(`/api/tests/${message.testId}/issues/${message.issueId}`, {
                        needs_review: false
                    });
                } catch (ex) {
                    (0, request_error_handler.Z)(tabId, ex, lib.ZP`There was a problem updating your reviewed issue.`);
                }
            }));
            bridge.J.listen("needs-review:no", (async ({message, tabId}) => {
                try {
                    await axe_api.Z["delete"](`/api/tests/${message.testId}/issues?id=${message.issueId}`);
                } catch (ex) {
                    (0, request_error_handler.Z)(tabId, ex, lib.ZP`There was a problem removing your reviewed your issue.`);
                }
            }));
            bridge.J.listen("hubspot-user-analytics", (({message}) => {
                const {event, value, update_behavior} = message;
                axe_api.Z.post("/api/analytics", {
                    event_name: event,
                    event_value: value,
                    update_behavior
                });
            }));
            bridge.J.listen("auth:session", (async ({message}) => {
                await browser.storage.local.set({
                    session: message
                });
            }));
            bridge.J.listen("auth:logout", (async () => {
                await browser.storage.local.remove("session");
            }));
            bridge.J.listen("save-screenshot", (async ({tabId, message}) => {
                let {screenshot, isFullPage = false} = message;
                if (!screenshot) return;
                try {
                    if (/data:image\/\w+;base64,/.test(screenshot)) {
                        const [, base64string] = screenshot.split(",");
                        screenshot = base64string;
                    }
                    const {url} = await browser.tabs.get(tabId);
                    const q = new URLSearchParams({
                        url,
                        browser_version: navigator.userAgent,
                        extension_version: package_0.i8,
                        is_full_page: isFullPage
                    });
                    const response = await axe_api.Z.stream.post(`/api/screenshots?${q}`, {
                        Accept: "application/json",
                        "Content-Type": "image/png"
                    }, screenshot);
                    const json = await response.json();
                    return json.key;
                } catch (ex) {
                    bridge.J.send(bridge.D.devtools, "app:notification", {
                        type: "caution",
                        text: lib.ZP`There was a problem saving your screenshot. Please try again.`
                    }, {
                        tabId
                    });
                    return;
                }
            }));
            bridge.J.listen("get-screenshot-features", (async ({message}) => {
                const {screenshotId, vnodes, zoom, category, coordinateOffset} = message;
                try {
                    return axe_api.Z.post(`/api/screenshots/${screenshotId}/features?category=${category}`, {
                        vnodes: vnodes.map((({vnodeId, role, box, tightBox, tagName, states}) => ({
                            vnodeId,
                            role,
                            box,
                            tightBox,
                            tagName,
                            states
                        }))),
                        zoom,
                        coordinateOffset
                    });
                } catch {
                    return {
                        features: []
                    };
                }
            }));
            bridge.J.listen("save-results", (async ({tabId, message}) => {
                const {testName, hideNotification} = message, axeResults = background_objectWithoutProperties(message, [ "testName", "hideNotification" ]);
                try {
                    const data = await bridge.J.send(bridge.D.content, "request-axe-results", axeResults, {
                        tabId
                    });
                    if (data.error) throw new Error(`request-axe-results error: ${data.error.message}`);
                    const {results, pageTitle, stars, metadata} = data;
                    const {url} = results;
                    const {id} = await axe_api.Z.post("/api/tests", {
                        url
                    });
                    const [record, issues] = await Promise.all([ axe_api.Z.put(`/api/tests/${id}`, {
                        name: testName || pageTitle || url,
                        metadata: background_objectSpread(background_objectSpread({}, metadata), {}, {
                            axeVersion: axeResults.axeVersion
                        }),
                        stars
                    }), axe_api.Z.post(`/api/tests/${id}/issues`, {
                        test_name: testName,
                        violations: issueMapper(results),
                        event: "auto"
                    }) ]);
                    if (!hideNotification) bridge.J.send(bridge.D.devtools, "app:notification", {
                        type: "confirmation",
                        text: lib.ZP`Your test has been saved.`
                    }, {
                        tabId
                    });
                    return {
                        record,
                        issues,
                        manifests: {}
                    };
                } catch (ex) {
                    bridge.J.send(bridge.D.devtools, "app:notification", {
                        type: "caution",
                        text: lib.ZP`There was a problem saving your test. Please try again.`
                    }, {
                        tabId
                    });
                    return {
                        record: {},
                        issues: [],
                        manifests: {}
                    };
                }
            }));
            attachDOMListeners();
            attachRecordListeners();
            attachManifestsListeners();
            attachGuidedListeners();
            attachModalListeners();
            listenForNewWindow();
            bridge.J.listen("resave-automatic-tests", (async ({tabId, message}) => {
                const {testId, axeResults, metadata} = message;
                try {
                    await axe_api.Z["delete"](`/api/tests/${testId}/issues?is_manual=false`);
                    await axe_api.Z.post(`/api/tests/${testId}/issues`, {
                        violations: issueMapper(axeResults),
                        event: "auto"
                    });
                    const updatedRecord = await axe_api.Z.put(`/api/tests/${testId}`, {
                        metadata: background_objectSpread(background_objectSpread({}, metadata), {}, {
                            axeVersion: axeResults.axeVersion
                        })
                    });
                    return {
                        updatedIssues: await axe_api.Z.get(`/api/tests/${testId}/issues`),
                        auto_tests_at: (new Date).toISOString(),
                        updated_at: updatedRecord.updated_at
                    };
                } catch (ex) {
                    bridge.J.send(bridge.D.devtools, "app:notification", {
                        type: "caution",
                        text: lib.ZP`There was a problem saving your automated results. Your test record was not updated, please try again.`
                    }, {
                        tabId
                    });
                    return {};
                }
            }));
            const requestWithTimeout = async (requestPromise, onTimeout) => {
                const timedOut = Symbol("Timed out");
                const value = await Promise.race([ requestPromise, new Promise((resolve => setTimeout((() => resolve(timedOut)), RESPONSE_TIMEOUT))) ]);
                if (value === timedOut) {
                    onTimeout();
                    return null;
                }
                return value;
            };
            bridge.J.listen("forms:ml", (async ({tabId, message}) => {
                const {url, form, screenshot} = message;
                const {session, axeSettings, policySettings} = await browser.storage.local.get([ "session", "axeSettings", "policySettings" ]);
                const mlEnabled = !policySettings.DisableAllScreenshots && "boolean" === typeof policySettings.EnableMachineLearning ? policySettings.EnableMachineLearning : true && axeSettings.enableMachineLearning;
                if (!mlEnabled || !session || !screenshot) return [];
                const elements = await bridge.J.send(bridge.D.content, "forms:get-descendant-elements", {
                    vnodeId: form.vnodeId
                }, {
                    tabId
                });
                const [, image] = screenshot.split("base64,");
                const formsMLPerf = create("formsML");
                formsMLPerf.start();
                const fields = await requestWithTimeout(new Promise((async resolve => {
                    try {
                        const result = await axe_api.Z.post(`/api/ml/form-fields`, {
                            url,
                            image,
                            vdom: elements
                        });
                        resolve(result.fields);
                    } catch (ex) {
                        resolve([]);
                    }
                })), (() => analytics.pk()));
                formsMLPerf.end();
                analytics.h9(formsMLPerf.measure().duration);
                return fields || [];
            }));
            bridge.J.listen("automatic-color-contrast", (async ({message}) => {
                const {imageWithText, imageWithoutText, expectedTextColor} = message;
                if (imageWithText && screenshotsDebug.enabled) {
                    const image = new Image;
                    image.src = `data:image/png;base64,${imageWithText}`;
                }
                if (imageWithoutText && screenshotsDebug.enabled) {
                    const image = new Image;
                    image.src = `data:image/png;base64,${imageWithoutText}`;
                }
                return await axe_api.Z.post("/api/automatic-color-contrast", {
                    imageWithText,
                    imageWithoutText,
                    expectedTextColor
                });
            }));
            const getTabberByTabId = tabId => {
                const tabbers = globalThis.__tabbers || (globalThis.__tabbers = {});
                if (!tabbers[tabId]) {
                    const tabber = new Tabber(tabId);
                    tabbers[tabId] = tabber;
                }
                return tabbers[tabId];
            };
            bridge.J.listen("tab-record:start", (async ({tabId}) => {
                await bridge.J.send(bridge.D.content, "tab-record:initial-focus", null, {
                    tabId
                });
                const tabber = getTabberByTabId(tabId);
                try {
                    await tabber.start();
                } catch {
                    bridge.J.send(bridge.D.content, "attach:failed", {}, {
                        tabId
                    });
                }
            }));
            bridge.J.listen("tab-record:fire-tab", (async ({tabId}) => new Promise((resolve => {
                setTimeout((() => {
                    var _getTabberByTabId;
                    null === (_getTabberByTabId = getTabberByTabId(tabId)) || void 0 === _getTabberByTabId ? void 0 : _getTabberByTabId.fireTab();
                    resolve();
                }), TAB_TIMEOUT);
            }))));
            bridge.J.listen("tab-record:stop", (({tabId}) => {
                var _getTabberByTabId2;
                null === (_getTabberByTabId2 = getTabberByTabId(tabId)) || void 0 === _getTabberByTabId2 ? void 0 : _getTabberByTabId2.stop();
                delete globalThis.__tabbers[tabId];
            }));
            browser.tabs.onUpdated.addListener(((tabId, info) => {
                const {status} = info;
                if ("complete" !== status) return;
                bridge.J.send(bridge.D.devtools, "page:navigation", info, {
                    tabId
                });
            }));
        },
        7551: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
            "use strict";
            __webpack_require__.d(__webpack_exports__, {
                ZK: () => warn
            });
            let logger = console;
            const isLoggingEnabled = () => {
                const val = {
                    NODE_ENV: "production",
                    COCONUT: "false",
                    EDGE: "false",
                    FIREFOX: "true",
                    IS_AXE_PRO: "false",
                    MANIFEST_VERSION: 2,
                    E2E: false,
                    DOCS_SITE_URL: "https://docs.deque.com/devtools-html",
                    ISSUES_URL: "https://docs.deque.com/issue-help/1.0.0/en",
                    AXE_CONFIG_URL: "https://docs.deque.com/devtools-server/4.0.0/en/axe-configuration",
                    MANUAL_ISSUE_URL: "https://docs.deque.com/devtools-html/4.0.0/en/devtools-manual-issue",
                    WHATS_LEFT_TO_TEST_URL: "https://docs.deque.com/devtools-html/4.0.0/en/devtools-whatslefttotest",
                    USER_FLOW_URL: "https://docs.deque.com/devtools-html/4.0.0/en/user-flow-analysis",
                    AXE_PRO_TRIAL_PATH: "/axe-devtools-pro/trial",
                    ENV: "production",
                    AXE_PRO_URL: "https://axe.deque.com",
                    USAGE_SERVICE_URL: "https://usage.deque.com",
                    AMPLITUDE_API_KEY: "a1ce09d0b14ddcc12ab7b508b6606a2f",
                    DATADOG_CLIENT_TOKEN: "puba2eb4ed47c6eb69ce20ef237db754ff8"
                }.LOGGING_ENABLED;
                return "1" === val || "true" === val;
            };
            const warn = (...args) => {
                if (!isLoggingEnabled()) return;
                logger.warn(...args);
            };
        },
        2833: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
            "use strict";
            __webpack_require__.d(__webpack_exports__, {
                Cu: () => sendUsageMetrics,
                Kl: () => saveIGT,
                L5: () => initializeDatadog,
                N9: () => install,
                h9: () => formsML,
                pk: () => formsMLTimeout,
                w1: () => exception
            });
            var amplitude_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7793);
            var _datadog_browser_logs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5981);
            var axe_core_package_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2715);
            var _package_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9876);
            var _bridge__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(2257);
            var _usage_service_client__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8188);
            var _logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(7551);
            var _user_plans__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(4303);
            var _utils_distinct_id__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(6507);
            __webpack_require__(4787);
            function _objectWithoutProperties(e, t) {
                if (null == e) return {};
                var o, r, i = _objectWithoutPropertiesLoose(e, t);
                if (Object.getOwnPropertySymbols) {
                    var s = Object.getOwnPropertySymbols(e);
                    for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
                }
                return i;
            }
            function _objectWithoutPropertiesLoose(r, e) {
                if (null == r) return {};
                var t = {};
                for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
                    if (e.includes(n)) continue;
                    t[n] = r[n];
                }
                return t;
            }
            function ownKeys(e, r) {
                var t = Object.keys(e);
                if (Object.getOwnPropertySymbols) {
                    var o = Object.getOwnPropertySymbols(e);
                    r && (o = o.filter((function(r) {
                        return Object.getOwnPropertyDescriptor(e, r).enumerable;
                    }))), t.push.apply(t, o);
                }
                return t;
            }
            function _objectSpread(e) {
                for (var r = 1; r < arguments.length; r++) {
                    var t = null != arguments[r] ? arguments[r] : {};
                    r % 2 ? ownKeys(Object(t), !0).forEach((function(r) {
                        _defineProperty(e, r, t[r]);
                    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach((function(r) {
                        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
                    }));
                }
                return e;
            }
            function _defineProperty(e, r, t) {
                return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
                    value: t,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : e[r] = t, e;
            }
            function _toPropertyKey(t) {
                var i = _toPrimitive(t, "string");
                return "symbol" == typeof i ? i : i + "";
            }
            function _toPrimitive(t, r) {
                if ("object" != typeof t || !t) return t;
                var e = t[Symbol.toPrimitive];
                if (void 0 !== e) {
                    var i = e.call(t, r || "default");
                    if ("object" != typeof i) return i;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === r ? String : Number)(t);
            }
            const {AMPLITUDE_API_KEY, DATADOG_CLIENT_TOKEN, NODE_ENV} = {
                NODE_ENV: "production",
                COCONUT: "false",
                EDGE: "false",
                FIREFOX: "true",
                IS_AXE_PRO: "false",
                MANIFEST_VERSION: 2,
                E2E: false,
                DOCS_SITE_URL: "https://docs.deque.com/devtools-html",
                ISSUES_URL: "https://docs.deque.com/issue-help/1.0.0/en",
                AXE_CONFIG_URL: "https://docs.deque.com/devtools-server/4.0.0/en/axe-configuration",
                MANUAL_ISSUE_URL: "https://docs.deque.com/devtools-html/4.0.0/en/devtools-manual-issue",
                WHATS_LEFT_TO_TEST_URL: "https://docs.deque.com/devtools-html/4.0.0/en/devtools-whatslefttotest",
                USER_FLOW_URL: "https://docs.deque.com/devtools-html/4.0.0/en/user-flow-analysis",
                AXE_PRO_TRIAL_PATH: "/axe-devtools-pro/trial",
                ENV: "production",
                AXE_PRO_URL: "https://axe.deque.com",
                USAGE_SERVICE_URL: "https://usage.deque.com",
                AMPLITUDE_API_KEY: "a1ce09d0b14ddcc12ab7b508b6606a2f",
                DATADOG_CLIENT_TOKEN: "puba2eb4ed47c6eb69ce20ef237db754ff8"
            };
            const amplitude = amplitude_js__WEBPACK_IMPORTED_MODULE_0__.Z.getInstance();
            const isAnalyticsEnabled = () => "true" !== "true";
            const USER_ROLE = "role";
            const USER_STATUS = "userStatus";
            const USER_GROUP = "organization";
            const LOGGED_IN = "loggedIn";
            const AXE_SETTINGS = "axeSettings";
            const POLICY_SETTINGS = "policySettings";
            const FIRST_VIEW = "firstView";
            const EXPORT_SCHEMA = "exportSchema";
            const events = {
                INSTALL: "conversion:install",
                UNINSTALL: "conversion:uninstall",
                LOGIN: "user:login",
                OPEN_EXTENSION: "user:open",
                ANALYZE: "analysis:analyze",
                RECORD_SAVE: "record:save",
                RECORD_DELETE: "record:delete",
                RECORD_RENAME: "record:rename",
                RECORD_SHARE: "record:share",
                GUIDE_START: "analysis:startGuide",
                GUIDE_SKIP: "analysis:skipGuide",
                GUIDE_CLEAR: "analysis:clearGuide",
                GUIDE_RESUME: "analysis:resumeGuide",
                GUIDE_FINISH: "analysis:complete",
                GUIDE_SAVE: "analysis:save",
                ISSUES_EXPORT: "issues:export",
                ISSUE_SHARE: "issue:share",
                ISSUE_VIEWED: "issue:viewed",
                ISSUE_INSPECTED: "issue:inspected",
                ISSUE_RELATED_INSPECTED: "issue:relatedInspected",
                ISSUE_TOGGLE_HIGHLIGHT: "issue:toggleHighlight",
                ISSUE_MORE_INFO: "issue:moreInfo",
                OUTBOUND_CLICK: "user:outboundClick",
                MOUSE_SELECTION: "usability:selectionMouse",
                SELECT_SELECTION: "usability:selectionSelect",
                SPACEBAR_SELECTION: "usability:selectionSpacebar",
                SPACEBAR_DELETION: "usability:deletionSpacebar",
                REMOVE_DELETION: "usability:deletionRemove",
                TRASH_DELETION: "usability:deletionTrash",
                ML_SUGGESTED_INTERACTIVE_ELEMENT: "ml:suggestedInteractiveElement",
                ML_SUGGESTED_INTERACTIVE_ELEMENT_REJECTED: "ml:suggestedInteractiveElementRejected",
                ML_MISSED_INTERACTIVE_ELEMENT: "ml:missedInteractiveElement",
                ML_SUGGESTED_ROLE: "ml:suggestedRole",
                ML_SUGGESTED_ROLE_ACCEPTED: "ml:suggestedRoleAccepted",
                ML_SUGGESTED_ROLE_REJECTED: "ml:suggestedRoleRejected",
                ML_SUGGESTED_TABLE_HEADER: "ml:suggestedTableHeader",
                ML_SUGGESTED_TABLE_HEADER_REJECTED: "ml:suggestedTableHeaderRejected",
                ML_SUGGESTED_NOT_DATA_CELL: "ml:suggestedNotDataCell",
                ML_SUGGESTED_NOT_DATA_CELL_ACCEPTED: "ml:suggestedNotDataCellAccepted",
                AUTO_COLOR_CONTRAST_START: "analysis:autoColorContrast:start",
                AUTO_COLOR_CONTRAST_COMPLETE: "analysis:autoColorContrast:complete",
                AUTO_COLOR_CONTRAST_ABORT: "analysis:autoColorContrast:abort",
                IGT_ELEMENT_SCOPE: "analysis:igtElementScope",
                TRIAL_EXPIRED_DIALOG: "conversion:trial_expired_dialog",
                TRIAL_EXPIRED_UPGRADE: "conversion:trial_expired_upgrade",
                TRIAL_EXPIRED_UPGRADE_IGNORED: "conversion:trial_expired_upgrade_ignored",
                AXE_CLEAN_UPGRADE: "conversion:axe_clean_upgrade",
                PERFORMANCE_SCAN_DURATION: "performance:scanDuration",
                PERFORMANCE_KEYBOARD_AUTO_TAB_DURATION: "performance:keyboardAutoTabDuration",
                PERFORMANCE_KEYBOARD_FOCUSED_SCREENSHOTTING: "performance:keyboardFocusedScreenshotting",
                PERFORMANCE_KEYBOARD_UNFOCUSED_SCREENSHOTTING: "performance:keyboardUnfocusedScreenshotting",
                PERFORMANCE_INTERACTIVE_ELEMENTS_ML: "performance:interactiveElementsML",
                PERFORMANCE_TABLE_ML: "performance:tableML",
                PERFORMANCE_FORMS_ML: "performance:formsML",
                PERFORMANCE_FORMS_TIMEOUT_ML: "performance:formsTimeoutML",
                PERFORMANCE_LOAD_SAVED_TESTS: "performance:loadSavedTests",
                PERFORMANCE_LOAD_SAVED_TEST: "performance:loadSavedTest",
                PERFORMANCE_SAVE_IGT: "performance:saveIGT",
                IGT_KEYBOARD_TAB_STOP_REPLAY: "igt:keyboardTabStopReplay",
                CONVERSION_CLICK_SCAN_PART: "conversion:click:scanPart",
                CONVERSION_CLICK_IGT_SPLASH: "conversion:click:igt:splash",
                CONVERSION_CLICK_SAVE_TEST: "conversion:click:saveTest",
                CONVERSION_CLICK_EXPORT: "conversion:click:export",
                CONVERSION_CLICK_SHARE_ISSUE: "conversion:click:shareIssue",
                MANUAL_ISSUE_CREATE_CLICK: "manualIssue:create:click",
                MANUAL_ISSUE_CREATE_SUBMIT: "manualIssue:create:submit",
                MANUAL_ISSUE_CREATE_CANCEL: "manualIssue:create:cancel",
                MANUAL_ISSUE_INVALID_DESCRIPTION_SUBMIT: "manualIssue:invalidDescription:submit",
                MANUAL_ISSUE_DESCRIPTION_SELECTION: "manualIssue:description:selection",
                MANUAL_ISSUE_ELEMENT_SELECTION: "manualIssue:element:selection",
                UFA_START: "analysis:startUFA",
                UFA_STOP: "analysis:stopUFA",
                UFA_CANCEL: "analysis:cancelUFA"
            };
            const getImpactCount = (violations = [], impactType) => violations.filter((({impact}) => impact === impactType)).reduce(((count, {nodes}) => count + ((null === nodes || void 0 === nodes ? void 0 : nodes.length) || 1)), 0);
            const isDevURL = u => {
                try {
                    const url = new URL(u);
                    return "localhost" === url.hostname || !!url.port || "file://" === url.origin;
                } catch (e) {
                    return false;
                }
            };
            const getIssueProperties = issues => {
                if ("undefined" === typeof issues) return;
                const failedRules = Array.from(new Set(issues.map((r => r.rule || r.id))));
                const issueData = {
                    failedRuleCount: failedRules.length,
                    failedRuleNames: failedRules,
                    criticalIssueCount: getImpactCount(issues, "critical"),
                    seriousIssueCount: getImpactCount(issues, "serious"),
                    moderateIssueCount: getImpactCount(issues, "moderate"),
                    minorIssueCount: getImpactCount(issues, "minor")
                };
                if (issues.length && Array.isArray(issues[0].nodes)) {
                    const sum = issues.reduce(((count, issue) => count + issue.nodes.length), 0);
                    issueData.failedItemCount = sum;
                }
                return issueData;
            };
            const postEvent = async value => {
                if (!isAnalyticsEnabled()) return;
                const usageClient = await (0, _usage_service_client__WEBPACK_IMPORTED_MODULE_5__.V)();
                const {productName, productComponent} = usageClient;
                const data = _objectSpread(_objectSpread({}, value), {}, {
                    productName,
                    productComponent
                });
                try {
                    let {event: name} = data, eventData = _objectWithoutProperties(data, [ "event" ]);
                    event(name, eventData);
                } catch (error) {
                    _logger__WEBPACK_IMPORTED_MODULE_6__.ZK("Analytics Data Error", {
                        error: error.message,
                        stack: error.stack
                    });
                }
                try {
                    usageClient.postEvent(data);
                } catch (error) {
                    _logger__WEBPACK_IMPORTED_MODULE_6__.ZK("Usage Data Error", {
                        error: error.message,
                        stack: error.stack
                    });
                }
            };
            const getUserStatus = user => {
                let userStatus = "anonymous";
                switch (null === user || void 0 === user ? void 0 : user.status) {
                  case _user_plans__WEBPACK_IMPORTED_MODULE_9__.nf:
                    userStatus = "trial";
                    break;

                  case _user_plans__WEBPACK_IMPORTED_MODULE_9__.N2:
                  case _user_plans__WEBPACK_IMPORTED_MODULE_9__.Ph:
                  case _user_plans__WEBPACK_IMPORTED_MODULE_9__.iI:
                  case _user_plans__WEBPACK_IMPORTED_MODULE_9__.gi:
                  case _user_plans__WEBPACK_IMPORTED_MODULE_9__.v8:
                  case _user_plans__WEBPACK_IMPORTED_MODULE_9__.DP:
                    userStatus = user.status;
                    break;
                }
                return userStatus;
            };
            const getDefaultUsageData = async (issues = []) => {
                let contentType, title, url, scoped;
                const isDevtools = "devtools" in browser;
                if (isDevtools) try {
                    ({contentType, title, url, scoped} = await _bridge__WEBPACK_IMPORTED_MODULE_4__.J.send(_bridge__WEBPACK_IMPORTED_MODULE_4__.D.content, "get-document-metadata"));
                } catch (ex) {
                    _datadog_browser_logs__WEBPACK_IMPORTED_MODULE_1__.fy.logger.error("Unable to get document metadata", {
                        error: ex.message,
                        stack: ex.stack
                    });
                }
                const {usageOrganization, usageDepartment, usageApplication, user, cachedUserCompany, axeSettings, userJobRole, cachedUserEmail} = await browser.storage.local.get([ "usageOrganization", "usageDepartment", "usageApplication", "user", "cachedUserCompany", "axeSettings", "userJobRole", "cachedUserEmail" ]);
                const isAuthenticated = !!(user && user.id);
                return {
                    distinctId: await (0, _utils_distinct_id__WEBPACK_IMPORTED_MODULE_7__.Z)(),
                    organization: usageOrganization ? usageOrganization : (null === user || void 0 === user ? void 0 : user.company) || cachedUserCompany || "",
                    department: usageDepartment || "",
                    application: usageApplication || "",
                    userStatus: getUserStatus(user),
                    loggedIn: isAuthenticated,
                    devInstance: isDevURL(url),
                    keycloakId: user && user.id,
                    userId: user && user.username || cachedUserEmail,
                    userJobRole: userJobRole || "Anonymous",
                    productName: "axe-pro",
                    productComponent: "extension",
                    productComponentVersion: _package_json__WEBPACK_IMPORTED_MODULE_3__.i8,
                    applicationProperties: _objectSpread({
                        engineVersion: axe_core_package_json__WEBPACK_IMPORTED_MODULE_2__.i8,
                        scoped,
                        target: url,
                        targetMedium: contentType,
                        targetState: title,
                        experimental: false,
                        rulesetName: (null === axeSettings || void 0 === axeSettings ? void 0 : axeSettings.ruleset) || "all",
                        bestPractices: !!axeSettings && !!axeSettings.enableBestPractices
                    }, getIssueProperties(issues))
                };
            };
            const sendUsageMetrics = async shouldSendMetrics => {
                const usageClient = await (0, _usage_service_client__WEBPACK_IMPORTED_MODULE_5__.V)();
                usageClient.enableTracking(shouldSendMetrics && isAnalyticsEnabled());
            };
            const identify = async (identifyProperties = {}) => {
                if (!isAnalyticsEnabled()) return;
                const {user, userJobRole = "", usageOrganization = "", cachedUserCompany, axeSettings, highlightTheme, theme, locale, policySettings, axeServerURL, firstView, exportFormat} = await browser.storage.local.get([ "user", "userJobRole", "usageOrganization", "cachedUserCompany", "axeSettings", "highlightTheme", "theme", "locale", "policySettings", "axeServerURL", "firstView", "exportFormat" ]);
                amplitude.setUserId(user && user.id);
                const isAuthenticated = user && user.id;
                const amplitudeIdentify = (new amplitude.Identify).set(USER_ROLE, userJobRole).set(USER_STATUS, getUserStatus(user)).set(LOGGED_IN, isAuthenticated).set(AXE_SETTINGS, _objectSpread(_objectSpread({
                    highlightTheme,
                    theme,
                    locale,
                    axeServerURL
                }, axeSettings), {}, {
                    ruleset: (null === axeSettings || void 0 === axeSettings ? void 0 : axeSettings.ruleset) || "all"
                })).set(POLICY_SETTINGS, policySettings).set(FIRST_VIEW, firstView).set(EXPORT_SCHEMA, exportFormat || "devtools");
                for (const [key, value] of Object.entries(identifyProperties)) isNaN(value) ? amplitudeIdentify.set(key, value) : amplitudeIdentify.add(key, value);
                amplitude.identify(amplitudeIdentify);
                amplitude.setGroup(USER_GROUP, usageOrganization ? usageOrganization : (null === user || void 0 === user ? void 0 : user.company) || cachedUserCompany);
            };
            const saveIGT = (duration, eventTool) => sendEvent(events.PERFORMANCE_SAVE_IGT, {
                duration,
                eventTool
            });
            const formsML = duration => sendEvent(events.PERFORMANCE_FORMS_ML, {
                duration
            });
            const formsMLTimeout = () => sendEvent(events.PERFORMANCE_FORMS_TIMEOUT_ML);
            const eventFactory = event => async function(issues, additionalApplicationProperties) {
                if (!isAnalyticsEnabled()) return;
                const defaultData = await getDefaultUsageData(issues);
                if (!additionalApplicationProperties) return postEvent(_objectSpread(_objectSpread({}, defaultData), {}, {
                    event
                }));
                postEvent(_objectSpread(_objectSpread({}, defaultData), {}, {
                    event,
                    applicationProperties: _objectSpread(_objectSpread({}, defaultData.applicationProperties), additionalApplicationProperties)
                }));
            };
            const issueEventFactory = eventName => additionalData => eventFactory(eventName)(void 0, additionalData);
            eventFactory(events.ISSUE_VIEWED);
            issueEventFactory(events.ISSUE_INSPECTED);
            issueEventFactory(events.ISSUE_RELATED_INSPECTED);
            issueEventFactory(events.ISSUE_TOGGLE_HIGHLIGHT);
            issueEventFactory(events.ISSUE_MORE_INFO);
            eventFactory(events.RECORD_DELETE);
            eventFactory(events.RECORD_RENAME);
            const sendInstall = eventFactory(events.INSTALL);
            const install = async additionalData => {
                var _await$distinctIdCook;
                const {hasSentInstallEvent} = await browser.storage.sync.get([ "hasSentInstallEvent" ]);
                if (hasSentInstallEvent) return;
                await browser.storage.sync.set({
                    hasSentInstallEvent: true
                });
                const cookieData = null === (_await$distinctIdCook = await (0, _utils_distinct_id__WEBPACK_IMPORTED_MODULE_7__.J)()) || void 0 === _await$distinctIdCook ? void 0 : _await$distinctIdCook.data;
                const installData = cookieData ? {
                    original_landing_page: cookieData.original_landing_page,
                    original_utm_source: cookieData.original_utm_source
                } : null;
                if (installData) amplitude.setUserProperties(installData);
                sendInstall([], _objectSpread(_objectSpread({}, additionalData), installData));
            };
            eventFactory(events.UNINSTALL);
            eventFactory(events.LOGIN);
            eventFactory(events.OPEN_EXTENSION);
            const sendEvent = async (event, applicationProperties = {}) => {
                if (!isAnalyticsEnabled()) return;
                const defaultData = await getDefaultUsageData();
                postEvent(_objectSpread(_objectSpread({}, defaultData), {}, {
                    event,
                    applicationProperties
                }));
            };
            const mlEventFactory = (eventName, eventTool = "interactive-elements") => additionalData => eventFactory(eventName)(void 0, _objectSpread({
                eventTool
            }, additionalData));
            mlEventFactory(events.ML_SUGGESTED_INTERACTIVE_ELEMENT);
            mlEventFactory(events.ML_SUGGESTED_INTERACTIVE_ELEMENT_REJECTED);
            mlEventFactory(events.ML_MISSED_INTERACTIVE_ELEMENT);
            mlEventFactory(events.ML_SUGGESTED_ROLE);
            mlEventFactory(events.ML_SUGGESTED_ROLE_ACCEPTED);
            mlEventFactory(events.ML_SUGGESTED_ROLE_REJECTED);
            mlEventFactory(events.ML_SUGGESTED_TABLE_HEADER, "table");
            mlEventFactory(events.ML_SUGGESTED_TABLE_HEADER_REJECTED, "table");
            mlEventFactory(events.ML_SUGGESTED_NOT_DATA_CELL, "table");
            mlEventFactory(events.ML_SUGGESTED_NOT_DATA_CELL_ACCEPTED, "table");
            eventFactory(events.CONVERSION_CLICK_SCAN_PART);
            eventFactory(events.CONVERSION_CLICK_SAVE_TEST);
            eventFactory(events.CONVERSION_CLICK_EXPORT);
            eventFactory(events.CONVERSION_CLICK_SHARE_ISSUE);
            eventFactory(events.UFA_START);
            let amplitudeInitialized = false;
            let datadogInitialized = false;
            const initializeAmplitude = async () => {
                if (amplitudeInitialized || !isAnalyticsEnabled()) return;
                const distinctId = await (0, _utils_distinct_id__WEBPACK_IMPORTED_MODULE_7__.Z)();
                amplitude.init(AMPLITUDE_API_KEY, void 0, {
                    deviceId: distinctId,
                    includeUtm: true,
                    saveParamsReferrerOncePerSession: false,
                    includeGclid: true,
                    includeReferrer: true,
                    secureCookie: true,
                    sameSiteCookie: "Lax"
                });
                amplitudeInitialized = true;
            };
            const initializeDatadog = async () => {
                const enableDatadog = "undefined" !== typeof globalThis.document && "undefined" !== typeof globalThis.XMLHttpRequest;
                if (!enableDatadog) return;
                if (datadogInitialized || !isAnalyticsEnabled()) return true;
                _datadog_browser_logs__WEBPACK_IMPORTED_MODULE_1__.fy.init({
                    clientToken: DATADOG_CLIENT_TOKEN,
                    site: "datadoghq.com",
                    service: "axe-extension",
                    env: NODE_ENV,
                    version: _package_json__WEBPACK_IMPORTED_MODULE_3__.i8,
                    beforeSend: log => {
                        var _log$http;
                        if (0 === (null === log || void 0 === log ? void 0 : null === (_log$http = log.http) || void 0 === _log$http ? void 0 : _log$http.status_code)) return false;
                    }
                });
                datadogInitialized = true;
            };
            const initialize = async () => {
                await Promise.all([ initializeAmplitude(), initializeDatadog() ]);
            };
            const event = async (eventType, eventProperties = {}) => {
                if (!isAnalyticsEnabled()) return;
                await initialize();
                let identifyProperties = {};
                switch (eventType) {
                  case events.ANALYZE:
                    identifyProperties = {
                        analyze: 1
                    };
                    break;

                  case events.GUIDE_FINISH:
                    identifyProperties = {
                        complete: 1
                    };
                    break;

                  case events.ISSUES_EXPORT:
                    identifyProperties = {
                        export: 1
                    };
                    break;
                }
                await identify(identifyProperties);
                const {devInstance, productName, productComponent, productComponentVersion, engineVersion, applicationProperties} = eventProperties;
                const metadaata = _objectSpread({
                    devInstance,
                    productName,
                    productComponent,
                    productComponentVersion,
                    engineVersion
                }, applicationProperties);
                amplitude.logEvent(eventType, metadaata);
            };
            const exception = (message, properties = {}) => {
                if (!isAnalyticsEnabled() || !datadogInitialized) return;
                if (!message) {
                    _datadog_browser_logs__WEBPACK_IMPORTED_MODULE_1__.fy.logger.error("Unknown exception");
                    return;
                }
                _datadog_browser_logs__WEBPACK_IMPORTED_MODULE_1__.fy.logger.error(message, properties);
            };
        },
        2257: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
            "use strict";
            __webpack_require__.d(__webpack_exports__, {
                D: () => context,
                J: () => bridge
            });
            var debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6292);
            var debug__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(debug__WEBPACK_IMPORTED_MODULE_0__);
            function ownKeys(e, r) {
                var t = Object.keys(e);
                if (Object.getOwnPropertySymbols) {
                    var o = Object.getOwnPropertySymbols(e);
                    r && (o = o.filter((function(r) {
                        return Object.getOwnPropertyDescriptor(e, r).enumerable;
                    }))), t.push.apply(t, o);
                }
                return t;
            }
            function _objectSpread(e) {
                for (var r = 1; r < arguments.length; r++) {
                    var t = null != arguments[r] ? arguments[r] : {};
                    r % 2 ? ownKeys(Object(t), !0).forEach((function(r) {
                        _defineProperty(e, r, t[r]);
                    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach((function(r) {
                        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
                    }));
                }
                return e;
            }
            function _defineProperty(e, r, t) {
                return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
                    value: t,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : e[r] = t, e;
            }
            function _toPropertyKey(t) {
                var i = _toPrimitive(t, "string");
                return "symbol" == typeof i ? i : i + "";
            }
            function _toPrimitive(t, r) {
                if ("object" != typeof t || !t) return t;
                var e = t[Symbol.toPrimitive];
                if (void 0 !== e) {
                    var i = e.call(t, r || "default");
                    if ("object" != typeof i) return i;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return ("string" === r ? String : Number)(t);
            }
            const debug = debug__WEBPACK_IMPORTED_MODULE_0___default()("bridge");
            const debugMessage = debug__WEBPACK_IMPORTED_MODULE_0___default()("bridge:message");
            const debugResponse = debug__WEBPACK_IMPORTED_MODULE_0___default()("bridge:response");
            const BridgeContext = {
                devtools: "devtools",
                content: "content-script",
                background: "background",
                unknown: "unknown"
            };
            const ERR_COULD_NOT_ESTABLISH_CONNECTION = "Could not establish connection. Receiving end does not exist.";
            class Bridge {
                constructor() {
                    _defineProperty(this, "listener", ((msg, sender) => {
                        const {origin, context, topic, message, options} = msg;
                        const {tab, frameId} = sender;
                        const tabId = tab && -1 !== tab.id ? tab.id : null === options || void 0 === options ? void 0 : options.tabId;
                        if (!origin) return;
                        if (this.context === BridgeContext.background && context === BridgeContext.content) return this.send(context, topic, message, {
                            tabId: options.tabId || tabId,
                            frameId: options.frameId,
                            allFrames: options.allFrames
                        });
                        const devtoolsContextMatchesTabId = this.context !== BridgeContext.devtools || browser.devtools.inspectedWindow.tabId === tabId;
                        if (context !== this.context || !devtoolsContextMatchesTabId) return;
                        debugMessage(`[${topic}] ${origin} → ${this.context}: %O`, "undefined" !== typeof message ? message : "");
                        const listeners = this.getListeners(topic);
                        const onError = ex => {
                            console.error(ex);
                        };
                        try {
                            for (var listener of listeners) {
                                const response = listener({
                                    context,
                                    topic,
                                    message,
                                    origin,
                                    tabId,
                                    frameId
                                });
                                if (!listener.isGlobal && "undefined" !== typeof response) return Promise.resolve(response).catch(onError);
                            }
                        } catch (ex) {
                            onError(ex);
                        }
                    }));
                    const {context: _context} = this;
                    this.messageListeners = new Map;
                    if (_context === BridgeContext.unknown) return;
                    if (!_context) throw new Error(`Unsupported bridge context: ${_context}`);
                    this.attachListener();
                }
                attachListener() {
                    const {context, listener} = this;
                    const hasListener = browser.runtime.onMessage.hasListener(listener);
                    if (!hasListener) {
                        debug("bridge initialized with context %s", context);
                        browser.runtime.onMessage.addListener(listener);
                    }
                    if (true) {
                        window.addEventListener("pageshow", (event => {
                            if (event.persisted && !browser.runtime.onMessage.hasListener(listener)) {
                                debug("bridge initialized with context %s (cached page)", context);
                                browser.runtime.onMessage.addListener(listener);
                            }
                        }));
                        window.addEventListener("beforeunload", (() => {
                            browser.runtime.onMessage.removeListener(listener);
                        }));
                    }
                }
                get context() {
                    if ("undefined" === typeof browser) return BridgeContext.unknown;
                    if (browser && browser.devtools) return BridgeContext.devtools;
                    if (browser && browser.tabs) return BridgeContext.background;
                    if (browser && browser.storage) return BridgeContext.content;
                }
                async send(context, topic, message, {tabId, frameId = 0, allFrames = false} = {}) {
                    if ("undefined" === typeof browser) return;
                    if (!tabId && this.context === BridgeContext.devtools) tabId = browser.devtools.inspectedWindow.tabId;
                    let sendMessage = browser.runtime.sendMessage;
                    if (context === BridgeContext.content && "undefined" !== typeof browser.tabs) {
                        const tabOptions = {
                            frameId: allFrames ? null : frameId
                        };
                        sendMessage = messageToSend => browser.tabs.sendMessage(tabId, _objectSpread(_objectSpread({}, messageToSend), {}, {
                            options: _objectSpread(_objectSpread({}, messageToSend.options), tabOptions)
                        }), tabOptions);
                    }
                    const origin = `${this.context}${this.context === BridgeContext.devtools ? `:${tabId}` : ""}`;
                    const destination = `${context}${[ context, this.context ].includes(BridgeContext.content) && tabId ? `:${tabId}` : ""}`;
                    debugMessage(`[${topic}] ${origin} → ${destination}: %O`, "undefined" !== typeof message ? message : "");
                    const args = {
                        origin,
                        context,
                        topic,
                        message,
                        options: context === BridgeContext.content ? {
                            tabId,
                            frameId,
                            allFrames
                        } : {
                            tabId
                        }
                    };
                    let response = null;
                    try {
                        response = await sendMessage(args);
                    } catch (ex) {
                        if (ex.message !== ERR_COULD_NOT_ESTABLISH_CONNECTION) throw ex;
                    }
                    if (null !== response) debugResponse(`[${topic}] ${destination} → ${origin}: %O`, response);
                    return response;
                }
                getListeners(topic) {
                    const {messageListeners} = this;
                    if (!topic || "*" === topic) return messageListeners.get("*") || [];
                    return [ ...messageListeners.get(topic) || [], ...messageListeners.get("*") || [] ];
                }
                listen(topic, handler) {
                    const {messageListeners} = this;
                    const listeners = messageListeners.get(topic) || [];
                    if ("function" === typeof topic) {
                        handler = topic;
                        topic = "*";
                    }
                    if ("*" === topic) handler.isGlobal = true;
                    if ("function" !== typeof handler) return;
                    if (!listeners.length) messageListeners.set(topic, [ handler ]); else messageListeners.set(topic, [ ...listeners, handler ]);
                }
                unlisten(topic, handler) {
                    const {messageListeners} = this;
                    if ("function" === typeof topic) {
                        handler = topic;
                        topic = "*";
                    }
                    if ("function" !== typeof handler) return;
                    const listeners = messageListeners.get(topic) || [];
                    const handlers = listeners.filter((fn => fn !== handler));
                    if (handlers.length) messageListeners.set(topic, handlers); else messageListeners.delete(topic);
                }
            }
            const bridge = new Bridge;
            const context = BridgeContext;
        },
        8188: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
            "use strict";
            __webpack_require__.d(__webpack_exports__, {
                V: () => getUsageServiceClient
            });
            var _deque_metrics_library__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5741);
            var _deque_metrics_library__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_deque_metrics_library__WEBPACK_IMPORTED_MODULE_0__);
            var _branding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2249);
            const PRODUCT_NAME = "axe-devtools-html";
            const PRODUCT_COMPONENTS = {
                coconut: "extension-coconut",
                chrome: "extension-chrome",
                firefox: "extension-firefox",
                edge: "extension-edge"
            };
            let usageClient, cachedUsageServerURL;
            const getUsageServiceClient = async (fresh = false, browserType) => {
                let {usageServerURL} = await browser.storage.local.get("usageServerURL");
                if (fresh || !usageClient || usageServerURL !== cachedUsageServerURL) {
                    cachedUsageServerURL = usageServerURL;
                    if ("default" === usageServerURL) usageServerURL = "https://usage.deque.com";
                    usageClient = new (_deque_metrics_library__WEBPACK_IMPORTED_MODULE_0___default())(PRODUCT_NAME, PRODUCT_COMPONENTS[browserType || (0, 
                    _branding__WEBPACK_IMPORTED_MODULE_1__.q_)()]);
                    usageClient.url(usageServerURL);
                }
                return usageClient;
            };
        },
        4303: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
            "use strict";
            __webpack_require__.d(__webpack_exports__, {
                DP: () => FREE_PAYMENT_FAILED,
                N2: () => PAID,
                Ph: () => PAID_PAYMENT_FAILED,
                gi: () => TRIAL_PAYMENT_FAILED,
                iI: () => TRIAL_ENDED,
                nf: () => TRIALING,
                v8: () => FREE
            });
            const FREE = "free";
            const TRIALING = "trialing";
            const TRIAL_ENDED = "trial_ended";
            const TRIAL_PAYMENT_FAILED = "trial_payment_failed";
            const PAID = "paid";
            const PAID_PAYMENT_FAILED = "paid_payment_failed";
            const FREE_PAYMENT_FAILED = "free_payment_failed";
        },
        8176: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
            "use strict";
            __webpack_require__.d(__webpack_exports__, {
                Z: () => __WEBPACK_DEFAULT_EXPORT__
            });
            var es2015_i18n_tag__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2607);
            const __WEBPACK_DEFAULT_EXPORT__ = [ {
                name: "Developer",
                label: es2015_i18n_tag__WEBPACK_IMPORTED_MODULE_0__.ZP`Developer`
            }, {
                name: "Tester",
                label: es2015_i18n_tag__WEBPACK_IMPORTED_MODULE_0__.ZP`Tester`
            }, {
                name: "Designer",
                label: es2015_i18n_tag__WEBPACK_IMPORTED_MODULE_0__.ZP`Designer`
            }, {
                name: "Accessibility Specialist",
                label: es2015_i18n_tag__WEBPACK_IMPORTED_MODULE_0__.ZP`Accessibility Specialist`
            }, {
                name: "Manager",
                label: es2015_i18n_tag__WEBPACK_IMPORTED_MODULE_0__.ZP`Manager`
            }, {
                name: "Other",
                label: es2015_i18n_tag__WEBPACK_IMPORTED_MODULE_0__.ZP`Other`
            } ];
        },
        6507: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
            "use strict";
            __webpack_require__.d(__webpack_exports__, {
                J: () => distinctIdCookie,
                Z: () => distinctId
            });
            var _deque_distinct_id_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8020);
            let cachedDistinctIdCookie;
            async function distinctId() {
                var _await$distinctIdCook;
                return null === (_await$distinctIdCook = await distinctIdCookie()) || void 0 === _await$distinctIdCook ? void 0 : _await$distinctIdCook.distinct_id;
            }
            const distinctIdCookie = async () => {
                if (cachedDistinctIdCookie) return cachedDistinctIdCookie;
                const {axeServerURL, session} = await browser.storage.local.get([ "axeServerURL", "session" ]);
                cachedDistinctIdCookie = await (0, _deque_distinct_id_client__WEBPACK_IMPORTED_MODULE_0__.getDistinctIdCookie)({
                    host: "default" === axeServerURL ? "https://axe.deque.com" : axeServerURL,
                    origin: globalThis.location.origin,
                    token: session && session.access_token
                });
                return cachedDistinctIdCookie;
            };
        },
        4295: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
            "use strict";
            __webpack_require__.d(__webpack_exports__, {
                Z: () => requestErrorHandler
            });
            var es2015_i18n_tag__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2607);
            var _bridge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2257);
            const sessionExpiredMessage = es2015_i18n_tag__WEBPACK_IMPORTED_MODULE_0__.ZP`Your session has expired. Please log back in.`;
            function requestErrorHandler(tabId, error, genericMessage = sessionExpiredMessage) {
                const isSessionExpiredError = error && "access denied" === error.message;
                _bridge__WEBPACK_IMPORTED_MODULE_1__.J.send(_bridge__WEBPACK_IMPORTED_MODULE_1__.D.devtools, "app:notification", {
                    type: "caution",
                    text: isSessionExpiredError ? sessionExpiredMessage : genericMessage
                }, {
                    tabId
                });
                if (!isSessionExpiredError) return;
                _bridge__WEBPACK_IMPORTED_MODULE_1__.J.send(_bridge__WEBPACK_IMPORTED_MODULE_1__.D.devtools, "app:logout", null, {
                    tabId
                });
            }
        },
        7322: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
            "use strict";
            __webpack_require__(2249);
        },
        1137: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, {
                TemplateTag: () => TemplateTag_TemplateTag,
                codeBlock: () => html_html,
                commaLists: () => commaLists_commaLists,
                commaListsAnd: () => commaListsAnd_commaListsAnd,
                commaListsOr: () => commaListsOr_commaListsOr,
                html: () => html_html,
                inlineArrayTransformer: () => inlineArrayTransformer_inlineArrayTransformer,
                inlineLists: () => inlineLists_inlineLists,
                oneLine: () => oneLine_oneLine,
                oneLineCommaLists: () => oneLineCommaLists_oneLineCommaLists,
                oneLineCommaListsAnd: () => oneLineCommaListsAnd_oneLineCommaListsAnd,
                oneLineCommaListsOr: () => oneLineCommaListsOr_oneLineCommaListsOr,
                oneLineInlineLists: () => oneLineInlineLists_oneLineInlineLists,
                oneLineTrim: () => oneLineTrim_oneLineTrim,
                removeNonPrintingValuesTransformer: () => removeNonPrintingValuesTransformer_removeNonPrintingValuesTransformer,
                replaceResultTransformer: () => replaceResultTransformer_replaceResultTransformer,
                replaceStringTransformer: () => replaceStringTransformer_replaceStringTransformer,
                replaceSubstitutionTransformer: () => replaceSubstitutionTransformer_replaceSubstitutionTransformer,
                safeHtml: () => safeHtml_safeHtml,
                source: () => html_html,
                splitStringTransformer: () => splitStringTransformer_splitStringTransformer,
                stripIndent: () => stripIndent_stripIndent,
                stripIndentTransformer: () => stripIndentTransformer_stripIndentTransformer,
                stripIndents: () => stripIndents_stripIndents,
                trimResultTransformer: () => trimResultTransformer_trimResultTransformer
            });
            var _createClass = function() {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _templateObject = _taggedTemplateLiteral([ "", "" ], [ "", "" ]);
            function _taggedTemplateLiteral(strings, raw) {
                return Object.freeze(Object.defineProperties(strings, {
                    raw: {
                        value: Object.freeze(raw)
                    }
                }));
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            var TemplateTag = function() {
                function TemplateTag() {
                    var _this = this;
                    for (var _len = arguments.length, transformers = Array(_len), _key = 0; _key < _len; _key++) transformers[_key] = arguments[_key];
                    _classCallCheck(this, TemplateTag);
                    this.tag = function(strings) {
                        for (var _len2 = arguments.length, expressions = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) expressions[_key2 - 1] = arguments[_key2];
                        if ("function" === typeof strings) return _this.interimTag.bind(_this, strings);
                        if ("string" === typeof strings) return _this.transformEndResult(strings);
                        strings = strings.map(_this.transformString.bind(_this));
                        return _this.transformEndResult(strings.reduce(_this.processSubstitutions.bind(_this, expressions)));
                    };
                    if (transformers.length > 0 && Array.isArray(transformers[0])) transformers = transformers[0];
                    this.transformers = transformers.map((function(transformer) {
                        return "function" === typeof transformer ? transformer() : transformer;
                    }));
                    return this.tag;
                }
                _createClass(TemplateTag, [ {
                    key: "interimTag",
                    value: function(previousTag, template) {
                        for (var _len3 = arguments.length, substitutions = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) substitutions[_key3 - 2] = arguments[_key3];
                        return this.tag(_templateObject, previousTag.apply(void 0, [ template ].concat(substitutions)));
                    }
                }, {
                    key: "processSubstitutions",
                    value: function(substitutions, resultSoFar, remainingPart) {
                        var substitution = this.transformSubstitution(substitutions.shift(), resultSoFar);
                        return "".concat(resultSoFar, substitution, remainingPart);
                    }
                }, {
                    key: "transformString",
                    value: function(str) {
                        var cb = function(res, transform) {
                            return transform.onString ? transform.onString(res) : res;
                        };
                        return this.transformers.reduce(cb, str);
                    }
                }, {
                    key: "transformSubstitution",
                    value: function(substitution, resultSoFar) {
                        var cb = function(res, transform) {
                            return transform.onSubstitution ? transform.onSubstitution(res, resultSoFar) : res;
                        };
                        return this.transformers.reduce(cb, substitution);
                    }
                }, {
                    key: "transformEndResult",
                    value: function(endResult) {
                        var cb = function(res, transform) {
                            return transform.onEndResult ? transform.onEndResult(res) : res;
                        };
                        return this.transformers.reduce(cb, endResult);
                    }
                } ]);
                return TemplateTag;
            }();
            const TemplateTag_TemplateTag = TemplateTag;
            var trimResultTransformer = function() {
                var side = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
                return {
                    onEndResult: function(endResult) {
                        if ("" === side) return endResult.trim();
                        side = side.toLowerCase();
                        if ("start" === side || "left" === side) return endResult.replace(/^\s*/, "");
                        if ("end" === side || "right" === side) return endResult.replace(/\s*$/, "");
                        throw new Error("Side not supported: " + side);
                    }
                };
            };
            const trimResultTransformer_trimResultTransformer = trimResultTransformer;
            function _toConsumableArray(arr) {
                if (Array.isArray(arr)) {
                    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];
                    return arr2;
                } else return Array.from(arr);
            }
            var stripIndentTransformer = function() {
                var type = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "initial";
                return {
                    onEndResult: function(endResult) {
                        if ("initial" === type) {
                            var match = endResult.match(/^[^\S\n]*(?=\S)/gm);
                            var indent = match && Math.min.apply(Math, _toConsumableArray(match.map((function(el) {
                                return el.length;
                            }))));
                            if (indent) {
                                var regexp = new RegExp("^.{" + indent + "}", "gm");
                                return endResult.replace(regexp, "");
                            }
                            return endResult;
                        }
                        if ("all" === type) return endResult.replace(/^[^\S\n]+/gm, "");
                        throw new Error("Unknown type: " + type);
                    }
                };
            };
            const stripIndentTransformer_stripIndentTransformer = stripIndentTransformer;
            var replaceResultTransformer = function(replaceWhat, replaceWith) {
                return {
                    onEndResult: function(endResult) {
                        if (null == replaceWhat || null == replaceWith) throw new Error("replaceResultTransformer requires at least 2 arguments.");
                        return endResult.replace(replaceWhat, replaceWith);
                    }
                };
            };
            const replaceResultTransformer_replaceResultTransformer = replaceResultTransformer;
            var replaceSubstitutionTransformer = function(replaceWhat, replaceWith) {
                return {
                    onSubstitution: function(substitution, resultSoFar) {
                        if (null == replaceWhat || null == replaceWith) throw new Error("replaceSubstitutionTransformer requires at least 2 arguments.");
                        if (null == substitution) return substitution; else return substitution.toString().replace(replaceWhat, replaceWith);
                    }
                };
            };
            const replaceSubstitutionTransformer_replaceSubstitutionTransformer = replaceSubstitutionTransformer;
            var replaceStringTransformer = function(replaceWhat, replaceWith) {
                return {
                    onString: function(str) {
                        if (null == replaceWhat || null == replaceWith) throw new Error("replaceStringTransformer requires at least 2 arguments.");
                        return str.replace(replaceWhat, replaceWith);
                    }
                };
            };
            const replaceStringTransformer_replaceStringTransformer = replaceStringTransformer;
            var defaults = {
                separator: "",
                conjunction: "",
                serial: false
            };
            var inlineArrayTransformer = function() {
                var opts = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : defaults;
                return {
                    onSubstitution: function(substitution, resultSoFar) {
                        if (Array.isArray(substitution)) {
                            var arrayLength = substitution.length;
                            var separator = opts.separator;
                            var conjunction = opts.conjunction;
                            var serial = opts.serial;
                            var indent = resultSoFar.match(/(\n?[^\S\n]+)$/);
                            if (indent) substitution = substitution.join(separator + indent[1]); else substitution = substitution.join(separator + " ");
                            if (conjunction && arrayLength > 1) {
                                var separatorIndex = substitution.lastIndexOf(separator);
                                substitution = substitution.slice(0, separatorIndex) + (serial ? separator : "") + " " + conjunction + substitution.slice(separatorIndex + 1);
                            }
                        }
                        return substitution;
                    }
                };
            };
            const inlineArrayTransformer_inlineArrayTransformer = inlineArrayTransformer;
            var splitStringTransformer = function(splitBy) {
                return {
                    onSubstitution: function(substitution, resultSoFar) {
                        if (null != splitBy && "string" === typeof splitBy) {
                            if ("string" === typeof substitution && substitution.includes(splitBy)) substitution = substitution.split(splitBy);
                        } else throw new Error("You need to specify a string character to split by.");
                        return substitution;
                    }
                };
            };
            const splitStringTransformer_splitStringTransformer = splitStringTransformer;
            var isValidValue = function(x) {
                return null != x && !Number.isNaN(x) && "boolean" !== typeof x;
            };
            var removeNonPrintingValuesTransformer = function() {
                return {
                    onSubstitution: function(substitution) {
                        if (Array.isArray(substitution)) return substitution.filter(isValidValue);
                        if (isValidValue(substitution)) return substitution;
                        return "";
                    }
                };
            };
            const removeNonPrintingValuesTransformer_removeNonPrintingValuesTransformer = removeNonPrintingValuesTransformer;
            var commaLists = new TemplateTag_TemplateTag(inlineArrayTransformer_inlineArrayTransformer({
                separator: ","
            }), stripIndentTransformer_stripIndentTransformer, trimResultTransformer_trimResultTransformer);
            const commaLists_commaLists = commaLists;
            var commaListsAnd = new TemplateTag_TemplateTag(inlineArrayTransformer_inlineArrayTransformer({
                separator: ",",
                conjunction: "and"
            }), stripIndentTransformer_stripIndentTransformer, trimResultTransformer_trimResultTransformer);
            const commaListsAnd_commaListsAnd = commaListsAnd;
            var commaListsOr = new TemplateTag_TemplateTag(inlineArrayTransformer_inlineArrayTransformer({
                separator: ",",
                conjunction: "or"
            }), stripIndentTransformer_stripIndentTransformer, trimResultTransformer_trimResultTransformer);
            const commaListsOr_commaListsOr = commaListsOr;
            var html = new TemplateTag_TemplateTag(splitStringTransformer_splitStringTransformer("\n"), removeNonPrintingValuesTransformer_removeNonPrintingValuesTransformer, inlineArrayTransformer_inlineArrayTransformer, stripIndentTransformer_stripIndentTransformer, trimResultTransformer_trimResultTransformer);
            const html_html = html;
            var safeHtml = new TemplateTag_TemplateTag(splitStringTransformer_splitStringTransformer("\n"), inlineArrayTransformer_inlineArrayTransformer, stripIndentTransformer_stripIndentTransformer, trimResultTransformer_trimResultTransformer, replaceSubstitutionTransformer_replaceSubstitutionTransformer(/&/g, "&amp;"), replaceSubstitutionTransformer_replaceSubstitutionTransformer(/</g, "&lt;"), replaceSubstitutionTransformer_replaceSubstitutionTransformer(/>/g, "&gt;"), replaceSubstitutionTransformer_replaceSubstitutionTransformer(/"/g, "&quot;"), replaceSubstitutionTransformer_replaceSubstitutionTransformer(/'/g, "&#x27;"), replaceSubstitutionTransformer_replaceSubstitutionTransformer(/`/g, "&#x60;"));
            const safeHtml_safeHtml = safeHtml;
            var oneLine = new TemplateTag_TemplateTag(replaceResultTransformer_replaceResultTransformer(/(?:\n(?:\s*))+/g, " "), trimResultTransformer_trimResultTransformer);
            const oneLine_oneLine = oneLine;
            var oneLineTrim = new TemplateTag_TemplateTag(replaceResultTransformer_replaceResultTransformer(/(?:\n\s*)/g, ""), trimResultTransformer_trimResultTransformer);
            const oneLineTrim_oneLineTrim = oneLineTrim;
            var oneLineCommaLists = new TemplateTag_TemplateTag(inlineArrayTransformer_inlineArrayTransformer({
                separator: ","
            }), replaceResultTransformer_replaceResultTransformer(/(?:\s+)/g, " "), trimResultTransformer_trimResultTransformer);
            const oneLineCommaLists_oneLineCommaLists = oneLineCommaLists;
            var oneLineCommaListsOr = new TemplateTag_TemplateTag(inlineArrayTransformer_inlineArrayTransformer({
                separator: ",",
                conjunction: "or"
            }), replaceResultTransformer_replaceResultTransformer(/(?:\s+)/g, " "), trimResultTransformer_trimResultTransformer);
            const oneLineCommaListsOr_oneLineCommaListsOr = oneLineCommaListsOr;
            var oneLineCommaListsAnd = new TemplateTag_TemplateTag(inlineArrayTransformer_inlineArrayTransformer({
                separator: ",",
                conjunction: "and"
            }), replaceResultTransformer_replaceResultTransformer(/(?:\s+)/g, " "), trimResultTransformer_trimResultTransformer);
            const oneLineCommaListsAnd_oneLineCommaListsAnd = oneLineCommaListsAnd;
            var inlineLists = new TemplateTag_TemplateTag(inlineArrayTransformer_inlineArrayTransformer, stripIndentTransformer_stripIndentTransformer, trimResultTransformer_trimResultTransformer);
            const inlineLists_inlineLists = inlineLists;
            var oneLineInlineLists = new TemplateTag_TemplateTag(inlineArrayTransformer_inlineArrayTransformer, replaceResultTransformer_replaceResultTransformer(/(?:\s+)/g, " "), trimResultTransformer_trimResultTransformer);
            const oneLineInlineLists_oneLineInlineLists = oneLineInlineLists;
            var stripIndent = new TemplateTag_TemplateTag(stripIndentTransformer_stripIndentTransformer, trimResultTransformer_trimResultTransformer);
            const stripIndent_stripIndent = stripIndent;
            var stripIndents = new TemplateTag_TemplateTag(stripIndentTransformer_stripIndentTransformer("all"), trimResultTransformer_trimResultTransformer);
            const stripIndents_stripIndents = stripIndents;
        },
        3152: function(module) {
            !function(t, n) {
                true ? module.exports = function(t, n, e, i, o) {
                    for (n = n.split ? n.split(".") : n, i = 0; i < n.length; i++) t = t ? t[n[i]] : o;
                    return t === o ? e : t;
                } : 0;
            }();
        },
        1331: function(__unused_webpack_module, exports, __webpack_require__) {
            (function(global, factory) {
                true ? factory(exports) : 0;
            })(0, (function(exports) {
                "use strict";
                var domain;
                function EventHandlers() {}
                EventHandlers.prototype = Object.create(null);
                function EventEmitter() {
                    EventEmitter.init.call(this);
                }
                EventEmitter.EventEmitter = EventEmitter;
                EventEmitter.usingDomains = false;
                EventEmitter.prototype.domain = void 0;
                EventEmitter.prototype._events = void 0;
                EventEmitter.prototype._maxListeners = void 0;
                EventEmitter.defaultMaxListeners = 10;
                EventEmitter.init = function() {
                    this.domain = null;
                    if (EventEmitter.usingDomains) if (domain.active && !(this instanceof domain.Domain)) ;
                    if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
                        this._events = new EventHandlers;
                        this._eventsCount = 0;
                    }
                    this._maxListeners = this._maxListeners || void 0;
                };
                EventEmitter.prototype.setMaxListeners = function(n) {
                    if ("number" !== typeof n || n < 0 || isNaN(n)) throw new TypeError('"n" argument must be a positive number');
                    this._maxListeners = n;
                    return this;
                };
                function $getMaxListeners(that) {
                    if (void 0 === that._maxListeners) return EventEmitter.defaultMaxListeners;
                    return that._maxListeners;
                }
                EventEmitter.prototype.getMaxListeners = function() {
                    return $getMaxListeners(this);
                };
                function emitNone(handler, isFn, self) {
                    if (isFn) handler.call(self); else {
                        var len = handler.length;
                        var listeners = arrayClone(handler, len);
                        for (var i = 0; i < len; ++i) listeners[i].call(self);
                    }
                }
                function emitOne(handler, isFn, self, arg1) {
                    if (isFn) handler.call(self, arg1); else {
                        var len = handler.length;
                        var listeners = arrayClone(handler, len);
                        for (var i = 0; i < len; ++i) listeners[i].call(self, arg1);
                    }
                }
                function emitTwo(handler, isFn, self, arg1, arg2) {
                    if (isFn) handler.call(self, arg1, arg2); else {
                        var len = handler.length;
                        var listeners = arrayClone(handler, len);
                        for (var i = 0; i < len; ++i) listeners[i].call(self, arg1, arg2);
                    }
                }
                function emitThree(handler, isFn, self, arg1, arg2, arg3) {
                    if (isFn) handler.call(self, arg1, arg2, arg3); else {
                        var len = handler.length;
                        var listeners = arrayClone(handler, len);
                        for (var i = 0; i < len; ++i) listeners[i].call(self, arg1, arg2, arg3);
                    }
                }
                function emitMany(handler, isFn, self, args) {
                    if (isFn) handler.apply(self, args); else {
                        var len = handler.length;
                        var listeners = arrayClone(handler, len);
                        for (var i = 0; i < len; ++i) listeners[i].apply(self, args);
                    }
                }
                EventEmitter.prototype.emit = function(type) {
                    var er, handler, len, args, i, events, domain;
                    var doError = "error" === type;
                    events = this._events;
                    if (events) doError = doError && null == events.error; else if (!doError) return false;
                    domain = this.domain;
                    if (doError) {
                        er = arguments[1];
                        if (domain) {
                            if (!er) er = new Error('Uncaught, unspecified "error" event');
                            er.domainEmitter = this;
                            er.domain = domain;
                            er.domainThrown = false;
                            domain.emit("error", er);
                        } else if (er instanceof Error) throw er; else {
                            var err = new Error('Uncaught, unspecified "error" event. (' + er + ")");
                            err.context = er;
                            throw err;
                        }
                        return false;
                    }
                    handler = events[type];
                    if (!handler) return false;
                    var isFn = "function" === typeof handler;
                    len = arguments.length;
                    switch (len) {
                      case 1:
                        emitNone(handler, isFn, this);
                        break;

                      case 2:
                        emitOne(handler, isFn, this, arguments[1]);
                        break;

                      case 3:
                        emitTwo(handler, isFn, this, arguments[1], arguments[2]);
                        break;

                      case 4:
                        emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
                        break;

                      default:
                        args = new Array(len - 1);
                        for (i = 1; i < len; i++) args[i - 1] = arguments[i];
                        emitMany(handler, isFn, this, args);
                    }
                    return true;
                };
                function _addListener(target, type, listener, prepend) {
                    var m;
                    var events;
                    var existing;
                    if ("function" !== typeof listener) throw new TypeError('"listener" argument must be a function');
                    events = target._events;
                    if (!events) {
                        events = target._events = new EventHandlers;
                        target._eventsCount = 0;
                    } else {
                        if (events.newListener) {
                            target.emit("newListener", type, listener.listener ? listener.listener : listener);
                            events = target._events;
                        }
                        existing = events[type];
                    }
                    if (!existing) {
                        existing = events[type] = listener;
                        ++target._eventsCount;
                    } else {
                        if ("function" === typeof existing) existing = events[type] = prepend ? [ listener, existing ] : [ existing, listener ]; else if (prepend) existing.unshift(listener); else existing.push(listener);
                        if (!existing.warned) {
                            m = $getMaxListeners(target);
                            if (m && m > 0 && existing.length > m) {
                                existing.warned = true;
                                var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + type + " listeners added. " + "Use emitter.setMaxListeners() to increase limit");
                                w.name = "MaxListenersExceededWarning";
                                w.emitter = target;
                                w.type = type;
                                w.count = existing.length;
                                emitWarning(w);
                            }
                        }
                    }
                    return target;
                }
                function emitWarning(e) {
                    "function" === typeof console.warn ? console.warn(e) : console.log(e);
                }
                EventEmitter.prototype.addListener = function(type, listener) {
                    return _addListener(this, type, listener, false);
                };
                EventEmitter.prototype.on = EventEmitter.prototype.addListener;
                EventEmitter.prototype.prependListener = function(type, listener) {
                    return _addListener(this, type, listener, true);
                };
                function _onceWrap(target, type, listener) {
                    var fired = false;
                    function g() {
                        target.removeListener(type, g);
                        if (!fired) {
                            fired = true;
                            listener.apply(target, arguments);
                        }
                    }
                    g.listener = listener;
                    return g;
                }
                EventEmitter.prototype.once = function(type, listener) {
                    if ("function" !== typeof listener) throw new TypeError('"listener" argument must be a function');
                    this.on(type, _onceWrap(this, type, listener));
                    return this;
                };
                EventEmitter.prototype.prependOnceListener = function(type, listener) {
                    if ("function" !== typeof listener) throw new TypeError('"listener" argument must be a function');
                    this.prependListener(type, _onceWrap(this, type, listener));
                    return this;
                };
                EventEmitter.prototype.removeListener = function(type, listener) {
                    var list, events, position, i, originalListener;
                    if ("function" !== typeof listener) throw new TypeError('"listener" argument must be a function');
                    events = this._events;
                    if (!events) return this;
                    list = events[type];
                    if (!list) return this;
                    if (list === listener || list.listener && list.listener === listener) if (0 === --this._eventsCount) this._events = new EventHandlers; else {
                        delete events[type];
                        if (events.removeListener) this.emit("removeListener", type, list.listener || listener);
                    } else if ("function" !== typeof list) {
                        position = -1;
                        for (i = list.length; i-- > 0; ) if (list[i] === listener || list[i].listener && list[i].listener === listener) {
                            originalListener = list[i].listener;
                            position = i;
                            break;
                        }
                        if (position < 0) return this;
                        if (1 === list.length) {
                            list[0] = void 0;
                            if (0 === --this._eventsCount) {
                                this._events = new EventHandlers;
                                return this;
                            } else delete events[type];
                        } else spliceOne(list, position);
                        if (events.removeListener) this.emit("removeListener", type, originalListener || listener);
                    }
                    return this;
                };
                EventEmitter.prototype.removeAllListeners = function(type) {
                    var listeners, events;
                    events = this._events;
                    if (!events) return this;
                    if (!events.removeListener) {
                        if (0 === arguments.length) {
                            this._events = new EventHandlers;
                            this._eventsCount = 0;
                        } else if (events[type]) if (0 === --this._eventsCount) this._events = new EventHandlers; else delete events[type];
                        return this;
                    }
                    if (0 === arguments.length) {
                        var keys = Object.keys(events);
                        for (var key, i = 0; i < keys.length; ++i) {
                            key = keys[i];
                            if ("removeListener" === key) continue;
                            this.removeAllListeners(key);
                        }
                        this.removeAllListeners("removeListener");
                        this._events = new EventHandlers;
                        this._eventsCount = 0;
                        return this;
                    }
                    listeners = events[type];
                    if ("function" === typeof listeners) this.removeListener(type, listeners); else if (listeners) do {
                        this.removeListener(type, listeners[listeners.length - 1]);
                    } while (listeners[0]);
                    return this;
                };
                EventEmitter.prototype.listeners = function(type) {
                    var evlistener;
                    var ret;
                    var events = this._events;
                    if (!events) ret = []; else {
                        evlistener = events[type];
                        if (!evlistener) ret = []; else if ("function" === typeof evlistener) ret = [ evlistener.listener || evlistener ]; else ret = unwrapListeners(evlistener);
                    }
                    return ret;
                };
                EventEmitter.listenerCount = function(emitter, type) {
                    if ("function" === typeof emitter.listenerCount) return emitter.listenerCount(type); else return listenerCount.call(emitter, type);
                };
                EventEmitter.prototype.listenerCount = listenerCount;
                function listenerCount(type) {
                    var events = this._events;
                    if (events) {
                        var evlistener = events[type];
                        if ("function" === typeof evlistener) return 1; else if (evlistener) return evlistener.length;
                    }
                    return 0;
                }
                EventEmitter.prototype.eventNames = function() {
                    return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
                };
                function spliceOne(list, index) {
                    for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) list[i] = list[k];
                    list.pop();
                }
                function arrayClone(arr, i) {
                    var copy = new Array(i);
                    while (i--) copy[i] = arr[i];
                    return copy;
                }
                function unwrapListeners(arr) {
                    var ret = new Array(arr.length);
                    for (var i = 0; i < ret.length; ++i) ret[i] = arr[i].listener || arr[i];
                    return ret;
                }
                var global$1 = "undefined" !== typeof __webpack_require__.g ? __webpack_require__.g : "undefined" !== typeof self ? self : true ? window : 0;
                var lookup = [];
                var revLookup = [];
                var Arr = "undefined" !== typeof Uint8Array ? Uint8Array : Array;
                var inited = false;
                function init() {
                    inited = true;
                    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                    for (var i = 0, len = code.length; i < len; ++i) {
                        lookup[i] = code[i];
                        revLookup[code.charCodeAt(i)] = i;
                    }
                    revLookup["-".charCodeAt(0)] = 62;
                    revLookup["_".charCodeAt(0)] = 63;
                }
                function toByteArray(b64) {
                    if (!inited) init();
                    var i, j, l, tmp, placeHolders, arr;
                    var len = b64.length;
                    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
                    placeHolders = "=" === b64[len - 2] ? 2 : "=" === b64[len - 1] ? 1 : 0;
                    arr = new Arr(3 * len / 4 - placeHolders);
                    l = placeHolders > 0 ? len - 4 : len;
                    var L = 0;
                    for (i = 0, j = 0; i < l; i += 4, j += 3) {
                        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
                        arr[L++] = tmp >> 16 & 255;
                        arr[L++] = tmp >> 8 & 255;
                        arr[L++] = 255 & tmp;
                    }
                    if (2 === placeHolders) {
                        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
                        arr[L++] = 255 & tmp;
                    } else if (1 === placeHolders) {
                        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
                        arr[L++] = tmp >> 8 & 255;
                        arr[L++] = 255 & tmp;
                    }
                    return arr;
                }
                function tripletToBase64(num) {
                    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[63 & num];
                }
                function encodeChunk(uint8, start, end) {
                    var tmp;
                    var output = [];
                    for (var i = start; i < end; i += 3) {
                        tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
                        output.push(tripletToBase64(tmp));
                    }
                    return output.join("");
                }
                function fromByteArray(uint8) {
                    if (!inited) init();
                    var tmp;
                    var len = uint8.length;
                    var extraBytes = len % 3;
                    var output = "";
                    var parts = [];
                    var maxChunkLength = 16383;
                    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
                    if (1 === extraBytes) {
                        tmp = uint8[len - 1];
                        output += lookup[tmp >> 2];
                        output += lookup[tmp << 4 & 63];
                        output += "==";
                    } else if (2 === extraBytes) {
                        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
                        output += lookup[tmp >> 10];
                        output += lookup[tmp >> 4 & 63];
                        output += lookup[tmp << 2 & 63];
                        output += "=";
                    }
                    parts.push(output);
                    return parts.join("");
                }
                function read(buffer, offset, isLE, mLen, nBytes) {
                    var e, m;
                    var eLen = 8 * nBytes - mLen - 1;
                    var eMax = (1 << eLen) - 1;
                    var eBias = eMax >> 1;
                    var nBits = -7;
                    var i = isLE ? nBytes - 1 : 0;
                    var d = isLE ? -1 : 1;
                    var s = buffer[offset + i];
                    i += d;
                    e = s & (1 << -nBits) - 1;
                    s >>= -nBits;
                    nBits += eLen;
                    for (;nBits > 0; e = 256 * e + buffer[offset + i], i += d, nBits -= 8) ;
                    m = e & (1 << -nBits) - 1;
                    e >>= -nBits;
                    nBits += mLen;
                    for (;nBits > 0; m = 256 * m + buffer[offset + i], i += d, nBits -= 8) ;
                    if (0 === e) e = 1 - eBias; else if (e === eMax) return m ? NaN : (s ? -1 : 1) * (1 / 0); else {
                        m += Math.pow(2, mLen);
                        e -= eBias;
                    }
                    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
                }
                function write(buffer, value, offset, isLE, mLen, nBytes) {
                    var e, m, c;
                    var eLen = 8 * nBytes - mLen - 1;
                    var eMax = (1 << eLen) - 1;
                    var eBias = eMax >> 1;
                    var rt = 23 === mLen ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
                    var i = isLE ? 0 : nBytes - 1;
                    var d = isLE ? 1 : -1;
                    var s = value < 0 || 0 === value && 1 / value < 0 ? 1 : 0;
                    value = Math.abs(value);
                    if (isNaN(value) || value === 1 / 0) {
                        m = isNaN(value) ? 1 : 0;
                        e = eMax;
                    } else {
                        e = Math.floor(Math.log(value) / Math.LN2);
                        if (value * (c = Math.pow(2, -e)) < 1) {
                            e--;
                            c *= 2;
                        }
                        if (e + eBias >= 1) value += rt / c; else value += rt * Math.pow(2, 1 - eBias);
                        if (value * c >= 2) {
                            e++;
                            c /= 2;
                        }
                        if (e + eBias >= eMax) {
                            m = 0;
                            e = eMax;
                        } else if (e + eBias >= 1) {
                            m = (value * c - 1) * Math.pow(2, mLen);
                            e += eBias;
                        } else {
                            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                            e = 0;
                        }
                    }
                    for (;mLen >= 8; buffer[offset + i] = 255 & m, i += d, m /= 256, mLen -= 8) ;
                    e = e << mLen | m;
                    eLen += mLen;
                    for (;eLen > 0; buffer[offset + i] = 255 & e, i += d, e /= 256, eLen -= 8) ;
                    buffer[offset + i - d] |= 128 * s;
                }
                var toString = {}.toString;
                var isArray = Array.isArray || function(arr) {
                    return "[object Array]" == toString.call(arr);
                };
                var INSPECT_MAX_BYTES = 50;
                Buffer.TYPED_ARRAY_SUPPORT = void 0 !== global$1.TYPED_ARRAY_SUPPORT ? global$1.TYPED_ARRAY_SUPPORT : true;
                function kMaxLength() {
                    return Buffer.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
                }
                function createBuffer(that, length) {
                    if (kMaxLength() < length) throw new RangeError("Invalid typed array length");
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        that = new Uint8Array(length);
                        that.__proto__ = Buffer.prototype;
                    } else {
                        if (null === that) that = new Buffer(length);
                        that.length = length;
                    }
                    return that;
                }
                function Buffer(arg, encodingOrOffset, length) {
                    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) return new Buffer(arg, encodingOrOffset, length);
                    if ("number" === typeof arg) {
                        if ("string" === typeof encodingOrOffset) throw new Error("If encoding is specified then the first argument must be a string");
                        return allocUnsafe(this, arg);
                    }
                    return from(this, arg, encodingOrOffset, length);
                }
                Buffer.poolSize = 8192;
                Buffer._augment = function(arr) {
                    arr.__proto__ = Buffer.prototype;
                    return arr;
                };
                function from(that, value, encodingOrOffset, length) {
                    if ("number" === typeof value) throw new TypeError('"value" argument must not be a number');
                    if ("undefined" !== typeof ArrayBuffer && value instanceof ArrayBuffer) return fromArrayBuffer(that, value, encodingOrOffset, length);
                    if ("string" === typeof value) return fromString(that, value, encodingOrOffset);
                    return fromObject(that, value);
                }
                Buffer.from = function(value, encodingOrOffset, length) {
                    return from(null, value, encodingOrOffset, length);
                };
                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    Buffer.prototype.__proto__ = Uint8Array.prototype;
                    Buffer.__proto__ = Uint8Array;
                }
                function assertSize(size) {
                    if ("number" !== typeof size) throw new TypeError('"size" argument must be a number'); else if (size < 0) throw new RangeError('"size" argument must not be negative');
                }
                function alloc(that, size, fill, encoding) {
                    assertSize(size);
                    if (size <= 0) return createBuffer(that, size);
                    if (void 0 !== fill) return "string" === typeof encoding ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
                    return createBuffer(that, size);
                }
                Buffer.alloc = function(size, fill, encoding) {
                    return alloc(null, size, fill, encoding);
                };
                function allocUnsafe(that, size) {
                    assertSize(size);
                    that = createBuffer(that, size < 0 ? 0 : 0 | checked(size));
                    if (!Buffer.TYPED_ARRAY_SUPPORT) for (var i = 0; i < size; ++i) that[i] = 0;
                    return that;
                }
                Buffer.allocUnsafe = function(size) {
                    return allocUnsafe(null, size);
                };
                Buffer.allocUnsafeSlow = function(size) {
                    return allocUnsafe(null, size);
                };
                function fromString(that, string, encoding) {
                    if ("string" !== typeof encoding || "" === encoding) encoding = "utf8";
                    if (!Buffer.isEncoding(encoding)) throw new TypeError('"encoding" must be a valid string encoding');
                    var length = 0 | byteLength(string, encoding);
                    that = createBuffer(that, length);
                    var actual = that.write(string, encoding);
                    if (actual !== length) that = that.slice(0, actual);
                    return that;
                }
                function fromArrayLike(that, array) {
                    var length = array.length < 0 ? 0 : 0 | checked(array.length);
                    that = createBuffer(that, length);
                    for (var i = 0; i < length; i += 1) that[i] = 255 & array[i];
                    return that;
                }
                function fromArrayBuffer(that, array, byteOffset, length) {
                    array.byteLength;
                    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError("'offset' is out of bounds");
                    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError("'length' is out of bounds");
                    if (void 0 === byteOffset && void 0 === length) array = new Uint8Array(array); else if (void 0 === length) array = new Uint8Array(array, byteOffset); else array = new Uint8Array(array, byteOffset, length);
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        that = array;
                        that.__proto__ = Buffer.prototype;
                    } else that = fromArrayLike(that, array);
                    return that;
                }
                function fromObject(that, obj) {
                    if (internalIsBuffer(obj)) {
                        var len = 0 | checked(obj.length);
                        that = createBuffer(that, len);
                        if (0 === that.length) return that;
                        obj.copy(that, 0, 0, len);
                        return that;
                    }
                    if (obj) {
                        if ("undefined" !== typeof ArrayBuffer && obj.buffer instanceof ArrayBuffer || "length" in obj) {
                            if ("number" !== typeof obj.length || isnan(obj.length)) return createBuffer(that, 0);
                            return fromArrayLike(that, obj);
                        }
                        if ("Buffer" === obj.type && isArray(obj.data)) return fromArrayLike(that, obj.data);
                    }
                    throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
                }
                function checked(length) {
                    if (length >= kMaxLength()) throw new RangeError("Attempt to allocate Buffer larger than maximum " + "size: 0x" + kMaxLength().toString(16) + " bytes");
                    return 0 | length;
                }
                Buffer.isBuffer = isBuffer;
                function internalIsBuffer(b) {
                    return !!(null != b && b._isBuffer);
                }
                Buffer.compare = function(a, b) {
                    if (!internalIsBuffer(a) || !internalIsBuffer(b)) throw new TypeError("Arguments must be Buffers");
                    if (a === b) return 0;
                    var x = a.length;
                    var y = b.length;
                    for (var i = 0, len = Math.min(x, y); i < len; ++i) if (a[i] !== b[i]) {
                        x = a[i];
                        y = b[i];
                        break;
                    }
                    if (x < y) return -1;
                    if (y < x) return 1;
                    return 0;
                };
                Buffer.isEncoding = function(encoding) {
                    switch (String(encoding).toLowerCase()) {
                      case "hex":
                      case "utf8":
                      case "utf-8":
                      case "ascii":
                      case "latin1":
                      case "binary":
                      case "base64":
                      case "ucs2":
                      case "ucs-2":
                      case "utf16le":
                      case "utf-16le":
                        return true;

                      default:
                        return false;
                    }
                };
                Buffer.concat = function(list, length) {
                    if (!isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
                    if (0 === list.length) return Buffer.alloc(0);
                    var i;
                    if (void 0 === length) {
                        length = 0;
                        for (i = 0; i < list.length; ++i) length += list[i].length;
                    }
                    var buffer = Buffer.allocUnsafe(length);
                    var pos = 0;
                    for (i = 0; i < list.length; ++i) {
                        var buf = list[i];
                        if (!internalIsBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
                        buf.copy(buffer, pos);
                        pos += buf.length;
                    }
                    return buffer;
                };
                function byteLength(string, encoding) {
                    if (internalIsBuffer(string)) return string.length;
                    if ("undefined" !== typeof ArrayBuffer && "function" === typeof ArrayBuffer.isView && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) return string.byteLength;
                    if ("string" !== typeof string) string = "" + string;
                    var len = string.length;
                    if (0 === len) return 0;
                    var loweredCase = false;
                    for (;;) switch (encoding) {
                      case "ascii":
                      case "latin1":
                      case "binary":
                        return len;

                      case "utf8":
                      case "utf-8":
                      case void 0:
                        return utf8ToBytes(string).length;

                      case "ucs2":
                      case "ucs-2":
                      case "utf16le":
                      case "utf-16le":
                        return 2 * len;

                      case "hex":
                        return len >>> 1;

                      case "base64":
                        return base64ToBytes(string).length;

                      default:
                        if (loweredCase) return utf8ToBytes(string).length;
                        encoding = ("" + encoding).toLowerCase();
                        loweredCase = true;
                    }
                }
                Buffer.byteLength = byteLength;
                function slowToString(encoding, start, end) {
                    var loweredCase = false;
                    if (void 0 === start || start < 0) start = 0;
                    if (start > this.length) return "";
                    if (void 0 === end || end > this.length) end = this.length;
                    if (end <= 0) return "";
                    end >>>= 0;
                    start >>>= 0;
                    if (end <= start) return "";
                    if (!encoding) encoding = "utf8";
                    while (true) switch (encoding) {
                      case "hex":
                        return hexSlice(this, start, end);

                      case "utf8":
                      case "utf-8":
                        return utf8Slice(this, start, end);

                      case "ascii":
                        return asciiSlice(this, start, end);

                      case "latin1":
                      case "binary":
                        return latin1Slice(this, start, end);

                      case "base64":
                        return base64Slice(this, start, end);

                      case "ucs2":
                      case "ucs-2":
                      case "utf16le":
                      case "utf-16le":
                        return utf16leSlice(this, start, end);

                      default:
                        if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
                        encoding = (encoding + "").toLowerCase();
                        loweredCase = true;
                    }
                }
                Buffer.prototype._isBuffer = true;
                function swap(b, n, m) {
                    var i = b[n];
                    b[n] = b[m];
                    b[m] = i;
                }
                Buffer.prototype.swap16 = function() {
                    var len = this.length;
                    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
                    for (var i = 0; i < len; i += 2) swap(this, i, i + 1);
                    return this;
                };
                Buffer.prototype.swap32 = function() {
                    var len = this.length;
                    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
                    for (var i = 0; i < len; i += 4) {
                        swap(this, i, i + 3);
                        swap(this, i + 1, i + 2);
                    }
                    return this;
                };
                Buffer.prototype.swap64 = function() {
                    var len = this.length;
                    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
                    for (var i = 0; i < len; i += 8) {
                        swap(this, i, i + 7);
                        swap(this, i + 1, i + 6);
                        swap(this, i + 2, i + 5);
                        swap(this, i + 3, i + 4);
                    }
                    return this;
                };
                Buffer.prototype.toString = function() {
                    var length = 0 | this.length;
                    if (0 === length) return "";
                    if (0 === arguments.length) return utf8Slice(this, 0, length);
                    return slowToString.apply(this, arguments);
                };
                Buffer.prototype.equals = function(b) {
                    if (!internalIsBuffer(b)) throw new TypeError("Argument must be a Buffer");
                    if (this === b) return true;
                    return 0 === Buffer.compare(this, b);
                };
                Buffer.prototype.inspect = function() {
                    var str = "";
                    var max = INSPECT_MAX_BYTES;
                    if (this.length > 0) {
                        str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
                        if (this.length > max) str += " ... ";
                    }
                    return "<Buffer " + str + ">";
                };
                Buffer.prototype.compare = function(target, start, end, thisStart, thisEnd) {
                    if (!internalIsBuffer(target)) throw new TypeError("Argument must be a Buffer");
                    if (void 0 === start) start = 0;
                    if (void 0 === end) end = target ? target.length : 0;
                    if (void 0 === thisStart) thisStart = 0;
                    if (void 0 === thisEnd) thisEnd = this.length;
                    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
                    if (thisStart >= thisEnd && start >= end) return 0;
                    if (thisStart >= thisEnd) return -1;
                    if (start >= end) return 1;
                    start >>>= 0;
                    end >>>= 0;
                    thisStart >>>= 0;
                    thisEnd >>>= 0;
                    if (this === target) return 0;
                    var x = thisEnd - thisStart;
                    var y = end - start;
                    var len = Math.min(x, y);
                    var thisCopy = this.slice(thisStart, thisEnd);
                    var targetCopy = target.slice(start, end);
                    for (var i = 0; i < len; ++i) if (thisCopy[i] !== targetCopy[i]) {
                        x = thisCopy[i];
                        y = targetCopy[i];
                        break;
                    }
                    if (x < y) return -1;
                    if (y < x) return 1;
                    return 0;
                };
                function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
                    if (0 === buffer.length) return -1;
                    if ("string" === typeof byteOffset) {
                        encoding = byteOffset;
                        byteOffset = 0;
                    } else if (byteOffset > 2147483647) byteOffset = 2147483647; else if (byteOffset < -2147483648) byteOffset = -2147483648;
                    byteOffset = +byteOffset;
                    if (isNaN(byteOffset)) byteOffset = dir ? 0 : buffer.length - 1;
                    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
                    if (byteOffset >= buffer.length) if (dir) return -1; else byteOffset = buffer.length - 1; else if (byteOffset < 0) if (dir) byteOffset = 0; else return -1;
                    if ("string" === typeof val) val = Buffer.from(val, encoding);
                    if (internalIsBuffer(val)) {
                        if (0 === val.length) return -1;
                        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
                    } else if ("number" === typeof val) {
                        val &= 255;
                        if (Buffer.TYPED_ARRAY_SUPPORT && "function" === typeof Uint8Array.prototype.indexOf) if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset); else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
                        return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir);
                    }
                    throw new TypeError("val must be string, number or Buffer");
                }
                function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
                    var indexSize = 1;
                    var arrLength = arr.length;
                    var valLength = val.length;
                    if (void 0 !== encoding) {
                        encoding = String(encoding).toLowerCase();
                        if ("ucs2" === encoding || "ucs-2" === encoding || "utf16le" === encoding || "utf-16le" === encoding) {
                            if (arr.length < 2 || val.length < 2) return -1;
                            indexSize = 2;
                            arrLength /= 2;
                            valLength /= 2;
                            byteOffset /= 2;
                        }
                    }
                    function read(buf, i) {
                        if (1 === indexSize) return buf[i]; else return buf.readUInt16BE(i * indexSize);
                    }
                    var i;
                    if (dir) {
                        var foundIndex = -1;
                        for (i = byteOffset; i < arrLength; i++) if (read(arr, i) === read(val, -1 === foundIndex ? 0 : i - foundIndex)) {
                            if (-1 === foundIndex) foundIndex = i;
                            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
                        } else {
                            if (-1 !== foundIndex) i -= i - foundIndex;
                            foundIndex = -1;
                        }
                    } else {
                        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
                        for (i = byteOffset; i >= 0; i--) {
                            var found = true;
                            for (var j = 0; j < valLength; j++) if (read(arr, i + j) !== read(val, j)) {
                                found = false;
                                break;
                            }
                            if (found) return i;
                        }
                    }
                    return -1;
                }
                Buffer.prototype.includes = function(val, byteOffset, encoding) {
                    return -1 !== this.indexOf(val, byteOffset, encoding);
                };
                Buffer.prototype.indexOf = function(val, byteOffset, encoding) {
                    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
                };
                Buffer.prototype.lastIndexOf = function(val, byteOffset, encoding) {
                    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
                };
                function hexWrite(buf, string, offset, length) {
                    offset = Number(offset) || 0;
                    var remaining = buf.length - offset;
                    if (!length) length = remaining; else {
                        length = Number(length);
                        if (length > remaining) length = remaining;
                    }
                    var strLen = string.length;
                    if (strLen % 2 !== 0) throw new TypeError("Invalid hex string");
                    if (length > strLen / 2) length = strLen / 2;
                    for (var i = 0; i < length; ++i) {
                        var parsed = parseInt(string.substr(2 * i, 2), 16);
                        if (isNaN(parsed)) return i;
                        buf[offset + i] = parsed;
                    }
                    return i;
                }
                function utf8Write(buf, string, offset, length) {
                    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
                }
                function asciiWrite(buf, string, offset, length) {
                    return blitBuffer(asciiToBytes(string), buf, offset, length);
                }
                function latin1Write(buf, string, offset, length) {
                    return asciiWrite(buf, string, offset, length);
                }
                function base64Write(buf, string, offset, length) {
                    return blitBuffer(base64ToBytes(string), buf, offset, length);
                }
                function ucs2Write(buf, string, offset, length) {
                    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
                }
                Buffer.prototype.write = function(string, offset, length, encoding) {
                    if (void 0 === offset) {
                        encoding = "utf8";
                        length = this.length;
                        offset = 0;
                    } else if (void 0 === length && "string" === typeof offset) {
                        encoding = offset;
                        length = this.length;
                        offset = 0;
                    } else if (isFinite(offset)) {
                        offset |= 0;
                        if (isFinite(length)) {
                            length |= 0;
                            if (void 0 === encoding) encoding = "utf8";
                        } else {
                            encoding = length;
                            length = void 0;
                        }
                    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
                    var remaining = this.length - offset;
                    if (void 0 === length || length > remaining) length = remaining;
                    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
                    if (!encoding) encoding = "utf8";
                    var loweredCase = false;
                    for (;;) switch (encoding) {
                      case "hex":
                        return hexWrite(this, string, offset, length);

                      case "utf8":
                      case "utf-8":
                        return utf8Write(this, string, offset, length);

                      case "ascii":
                        return asciiWrite(this, string, offset, length);

                      case "latin1":
                      case "binary":
                        return latin1Write(this, string, offset, length);

                      case "base64":
                        return base64Write(this, string, offset, length);

                      case "ucs2":
                      case "ucs-2":
                      case "utf16le":
                      case "utf-16le":
                        return ucs2Write(this, string, offset, length);

                      default:
                        if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
                        encoding = ("" + encoding).toLowerCase();
                        loweredCase = true;
                    }
                };
                Buffer.prototype.toJSON = function() {
                    return {
                        type: "Buffer",
                        data: Array.prototype.slice.call(this._arr || this, 0)
                    };
                };
                function base64Slice(buf, start, end) {
                    if (0 === start && end === buf.length) return fromByteArray(buf); else return fromByteArray(buf.slice(start, end));
                }
                function utf8Slice(buf, start, end) {
                    end = Math.min(buf.length, end);
                    var res = [];
                    var i = start;
                    while (i < end) {
                        var firstByte = buf[i];
                        var codePoint = null;
                        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
                        if (i + bytesPerSequence <= end) {
                            var secondByte, thirdByte, fourthByte, tempCodePoint;
                            switch (bytesPerSequence) {
                              case 1:
                                if (firstByte < 128) codePoint = firstByte;
                                break;

                              case 2:
                                secondByte = buf[i + 1];
                                if (128 === (192 & secondByte)) {
                                    tempCodePoint = (31 & firstByte) << 6 | 63 & secondByte;
                                    if (tempCodePoint > 127) codePoint = tempCodePoint;
                                }
                                break;

                              case 3:
                                secondByte = buf[i + 1];
                                thirdByte = buf[i + 2];
                                if (128 === (192 & secondByte) && 128 === (192 & thirdByte)) {
                                    tempCodePoint = (15 & firstByte) << 12 | (63 & secondByte) << 6 | 63 & thirdByte;
                                    if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) codePoint = tempCodePoint;
                                }
                                break;

                              case 4:
                                secondByte = buf[i + 1];
                                thirdByte = buf[i + 2];
                                fourthByte = buf[i + 3];
                                if (128 === (192 & secondByte) && 128 === (192 & thirdByte) && 128 === (192 & fourthByte)) {
                                    tempCodePoint = (15 & firstByte) << 18 | (63 & secondByte) << 12 | (63 & thirdByte) << 6 | 63 & fourthByte;
                                    if (tempCodePoint > 65535 && tempCodePoint < 1114112) codePoint = tempCodePoint;
                                }
                            }
                        }
                        if (null === codePoint) {
                            codePoint = 65533;
                            bytesPerSequence = 1;
                        } else if (codePoint > 65535) {
                            codePoint -= 65536;
                            res.push(codePoint >>> 10 & 1023 | 55296);
                            codePoint = 56320 | 1023 & codePoint;
                        }
                        res.push(codePoint);
                        i += bytesPerSequence;
                    }
                    return decodeCodePointsArray(res);
                }
                var MAX_ARGUMENTS_LENGTH = 4096;
                function decodeCodePointsArray(codePoints) {
                    var len = codePoints.length;
                    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints);
                    var res = "";
                    var i = 0;
                    while (i < len) res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
                    return res;
                }
                function asciiSlice(buf, start, end) {
                    var ret = "";
                    end = Math.min(buf.length, end);
                    for (var i = start; i < end; ++i) ret += String.fromCharCode(127 & buf[i]);
                    return ret;
                }
                function latin1Slice(buf, start, end) {
                    var ret = "";
                    end = Math.min(buf.length, end);
                    for (var i = start; i < end; ++i) ret += String.fromCharCode(buf[i]);
                    return ret;
                }
                function hexSlice(buf, start, end) {
                    var len = buf.length;
                    if (!start || start < 0) start = 0;
                    if (!end || end < 0 || end > len) end = len;
                    var out = "";
                    for (var i = start; i < end; ++i) out += toHex(buf[i]);
                    return out;
                }
                function utf16leSlice(buf, start, end) {
                    var bytes = buf.slice(start, end);
                    var res = "";
                    for (var i = 0; i < bytes.length; i += 2) res += String.fromCharCode(bytes[i] + 256 * bytes[i + 1]);
                    return res;
                }
                Buffer.prototype.slice = function(start, end) {
                    var len = this.length;
                    start = ~~start;
                    end = void 0 === end ? len : ~~end;
                    if (start < 0) {
                        start += len;
                        if (start < 0) start = 0;
                    } else if (start > len) start = len;
                    if (end < 0) {
                        end += len;
                        if (end < 0) end = 0;
                    } else if (end > len) end = len;
                    if (end < start) end = start;
                    var newBuf;
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        newBuf = this.subarray(start, end);
                        newBuf.__proto__ = Buffer.prototype;
                    } else {
                        var sliceLen = end - start;
                        newBuf = new Buffer(sliceLen, void 0);
                        for (var i = 0; i < sliceLen; ++i) newBuf[i] = this[i + start];
                    }
                    return newBuf;
                };
                function checkOffset(offset, ext, length) {
                    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
                    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
                }
                Buffer.prototype.readUIntLE = function(offset, byteLength, noAssert) {
                    offset |= 0;
                    byteLength |= 0;
                    if (!noAssert) checkOffset(offset, byteLength, this.length);
                    var val = this[offset];
                    var mul = 1;
                    var i = 0;
                    while (++i < byteLength && (mul *= 256)) val += this[offset + i] * mul;
                    return val;
                };
                Buffer.prototype.readUIntBE = function(offset, byteLength, noAssert) {
                    offset |= 0;
                    byteLength |= 0;
                    if (!noAssert) checkOffset(offset, byteLength, this.length);
                    var val = this[offset + --byteLength];
                    var mul = 1;
                    while (byteLength > 0 && (mul *= 256)) val += this[offset + --byteLength] * mul;
                    return val;
                };
                Buffer.prototype.readUInt8 = function(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 1, this.length);
                    return this[offset];
                };
                Buffer.prototype.readUInt16LE = function(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 2, this.length);
                    return this[offset] | this[offset + 1] << 8;
                };
                Buffer.prototype.readUInt16BE = function(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 2, this.length);
                    return this[offset] << 8 | this[offset + 1];
                };
                Buffer.prototype.readUInt32LE = function(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 4, this.length);
                    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + 16777216 * this[offset + 3];
                };
                Buffer.prototype.readUInt32BE = function(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 4, this.length);
                    return 16777216 * this[offset] + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
                };
                Buffer.prototype.readIntLE = function(offset, byteLength, noAssert) {
                    offset |= 0;
                    byteLength |= 0;
                    if (!noAssert) checkOffset(offset, byteLength, this.length);
                    var val = this[offset];
                    var mul = 1;
                    var i = 0;
                    while (++i < byteLength && (mul *= 256)) val += this[offset + i] * mul;
                    mul *= 128;
                    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
                    return val;
                };
                Buffer.prototype.readIntBE = function(offset, byteLength, noAssert) {
                    offset |= 0;
                    byteLength |= 0;
                    if (!noAssert) checkOffset(offset, byteLength, this.length);
                    var i = byteLength;
                    var mul = 1;
                    var val = this[offset + --i];
                    while (i > 0 && (mul *= 256)) val += this[offset + --i] * mul;
                    mul *= 128;
                    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
                    return val;
                };
                Buffer.prototype.readInt8 = function(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 1, this.length);
                    if (!(128 & this[offset])) return this[offset];
                    return -1 * (255 - this[offset] + 1);
                };
                Buffer.prototype.readInt16LE = function(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 2, this.length);
                    var val = this[offset] | this[offset + 1] << 8;
                    return 32768 & val ? 4294901760 | val : val;
                };
                Buffer.prototype.readInt16BE = function(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 2, this.length);
                    var val = this[offset + 1] | this[offset] << 8;
                    return 32768 & val ? 4294901760 | val : val;
                };
                Buffer.prototype.readInt32LE = function(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 4, this.length);
                    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
                };
                Buffer.prototype.readInt32BE = function(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 4, this.length);
                    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
                };
                Buffer.prototype.readFloatLE = function(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 4, this.length);
                    return read(this, offset, true, 23, 4);
                };
                Buffer.prototype.readFloatBE = function(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 4, this.length);
                    return read(this, offset, false, 23, 4);
                };
                Buffer.prototype.readDoubleLE = function(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 8, this.length);
                    return read(this, offset, true, 52, 8);
                };
                Buffer.prototype.readDoubleBE = function(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 8, this.length);
                    return read(this, offset, false, 52, 8);
                };
                function checkInt(buf, value, offset, ext, max, min) {
                    if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
                    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
                    if (offset + ext > buf.length) throw new RangeError("Index out of range");
                }
                Buffer.prototype.writeUIntLE = function(value, offset, byteLength, noAssert) {
                    value = +value;
                    offset |= 0;
                    byteLength |= 0;
                    if (!noAssert) {
                        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                        checkInt(this, value, offset, byteLength, maxBytes, 0);
                    }
                    var mul = 1;
                    var i = 0;
                    this[offset] = 255 & value;
                    while (++i < byteLength && (mul *= 256)) this[offset + i] = value / mul & 255;
                    return offset + byteLength;
                };
                Buffer.prototype.writeUIntBE = function(value, offset, byteLength, noAssert) {
                    value = +value;
                    offset |= 0;
                    byteLength |= 0;
                    if (!noAssert) {
                        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                        checkInt(this, value, offset, byteLength, maxBytes, 0);
                    }
                    var i = byteLength - 1;
                    var mul = 1;
                    this[offset + i] = 255 & value;
                    while (--i >= 0 && (mul *= 256)) this[offset + i] = value / mul & 255;
                    return offset + byteLength;
                };
                Buffer.prototype.writeUInt8 = function(value, offset, noAssert) {
                    value = +value;
                    offset |= 0;
                    if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
                    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
                    this[offset] = 255 & value;
                    return offset + 1;
                };
                function objectWriteUInt16(buf, value, offset, littleEndian) {
                    if (value < 0) value = 65535 + value + 1;
                    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) buf[offset + i] = (value & 255 << 8 * (littleEndian ? i : 1 - i)) >>> 8 * (littleEndian ? i : 1 - i);
                }
                Buffer.prototype.writeUInt16LE = function(value, offset, noAssert) {
                    value = +value;
                    offset |= 0;
                    if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        this[offset] = 255 & value;
                        this[offset + 1] = value >>> 8;
                    } else objectWriteUInt16(this, value, offset, true);
                    return offset + 2;
                };
                Buffer.prototype.writeUInt16BE = function(value, offset, noAssert) {
                    value = +value;
                    offset |= 0;
                    if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        this[offset] = value >>> 8;
                        this[offset + 1] = 255 & value;
                    } else objectWriteUInt16(this, value, offset, false);
                    return offset + 2;
                };
                function objectWriteUInt32(buf, value, offset, littleEndian) {
                    if (value < 0) value = 4294967295 + value + 1;
                    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) buf[offset + i] = value >>> 8 * (littleEndian ? i : 3 - i) & 255;
                }
                Buffer.prototype.writeUInt32LE = function(value, offset, noAssert) {
                    value = +value;
                    offset |= 0;
                    if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        this[offset + 3] = value >>> 24;
                        this[offset + 2] = value >>> 16;
                        this[offset + 1] = value >>> 8;
                        this[offset] = 255 & value;
                    } else objectWriteUInt32(this, value, offset, true);
                    return offset + 4;
                };
                Buffer.prototype.writeUInt32BE = function(value, offset, noAssert) {
                    value = +value;
                    offset |= 0;
                    if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        this[offset] = value >>> 24;
                        this[offset + 1] = value >>> 16;
                        this[offset + 2] = value >>> 8;
                        this[offset + 3] = 255 & value;
                    } else objectWriteUInt32(this, value, offset, false);
                    return offset + 4;
                };
                Buffer.prototype.writeIntLE = function(value, offset, byteLength, noAssert) {
                    value = +value;
                    offset |= 0;
                    if (!noAssert) {
                        var limit = Math.pow(2, 8 * byteLength - 1);
                        checkInt(this, value, offset, byteLength, limit - 1, -limit);
                    }
                    var i = 0;
                    var mul = 1;
                    var sub = 0;
                    this[offset] = 255 & value;
                    while (++i < byteLength && (mul *= 256)) {
                        if (value < 0 && 0 === sub && 0 !== this[offset + i - 1]) sub = 1;
                        this[offset + i] = (value / mul >> 0) - sub & 255;
                    }
                    return offset + byteLength;
                };
                Buffer.prototype.writeIntBE = function(value, offset, byteLength, noAssert) {
                    value = +value;
                    offset |= 0;
                    if (!noAssert) {
                        var limit = Math.pow(2, 8 * byteLength - 1);
                        checkInt(this, value, offset, byteLength, limit - 1, -limit);
                    }
                    var i = byteLength - 1;
                    var mul = 1;
                    var sub = 0;
                    this[offset + i] = 255 & value;
                    while (--i >= 0 && (mul *= 256)) {
                        if (value < 0 && 0 === sub && 0 !== this[offset + i + 1]) sub = 1;
                        this[offset + i] = (value / mul >> 0) - sub & 255;
                    }
                    return offset + byteLength;
                };
                Buffer.prototype.writeInt8 = function(value, offset, noAssert) {
                    value = +value;
                    offset |= 0;
                    if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
                    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
                    if (value < 0) value = 255 + value + 1;
                    this[offset] = 255 & value;
                    return offset + 1;
                };
                Buffer.prototype.writeInt16LE = function(value, offset, noAssert) {
                    value = +value;
                    offset |= 0;
                    if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        this[offset] = 255 & value;
                        this[offset + 1] = value >>> 8;
                    } else objectWriteUInt16(this, value, offset, true);
                    return offset + 2;
                };
                Buffer.prototype.writeInt16BE = function(value, offset, noAssert) {
                    value = +value;
                    offset |= 0;
                    if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        this[offset] = value >>> 8;
                        this[offset + 1] = 255 & value;
                    } else objectWriteUInt16(this, value, offset, false);
                    return offset + 2;
                };
                Buffer.prototype.writeInt32LE = function(value, offset, noAssert) {
                    value = +value;
                    offset |= 0;
                    if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        this[offset] = 255 & value;
                        this[offset + 1] = value >>> 8;
                        this[offset + 2] = value >>> 16;
                        this[offset + 3] = value >>> 24;
                    } else objectWriteUInt32(this, value, offset, true);
                    return offset + 4;
                };
                Buffer.prototype.writeInt32BE = function(value, offset, noAssert) {
                    value = +value;
                    offset |= 0;
                    if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
                    if (value < 0) value = 4294967295 + value + 1;
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        this[offset] = value >>> 24;
                        this[offset + 1] = value >>> 16;
                        this[offset + 2] = value >>> 8;
                        this[offset + 3] = 255 & value;
                    } else objectWriteUInt32(this, value, offset, false);
                    return offset + 4;
                };
                function checkIEEE754(buf, value, offset, ext, max, min) {
                    if (offset + ext > buf.length) throw new RangeError("Index out of range");
                    if (offset < 0) throw new RangeError("Index out of range");
                }
                function writeFloat(buf, value, offset, littleEndian, noAssert) {
                    if (!noAssert) checkIEEE754(buf, value, offset, 4);
                    write(buf, value, offset, littleEndian, 23, 4);
                    return offset + 4;
                }
                Buffer.prototype.writeFloatLE = function(value, offset, noAssert) {
                    return writeFloat(this, value, offset, true, noAssert);
                };
                Buffer.prototype.writeFloatBE = function(value, offset, noAssert) {
                    return writeFloat(this, value, offset, false, noAssert);
                };
                function writeDouble(buf, value, offset, littleEndian, noAssert) {
                    if (!noAssert) checkIEEE754(buf, value, offset, 8);
                    write(buf, value, offset, littleEndian, 52, 8);
                    return offset + 8;
                }
                Buffer.prototype.writeDoubleLE = function(value, offset, noAssert) {
                    return writeDouble(this, value, offset, true, noAssert);
                };
                Buffer.prototype.writeDoubleBE = function(value, offset, noAssert) {
                    return writeDouble(this, value, offset, false, noAssert);
                };
                Buffer.prototype.copy = function(target, targetStart, start, end) {
                    if (!start) start = 0;
                    if (!end && 0 !== end) end = this.length;
                    if (targetStart >= target.length) targetStart = target.length;
                    if (!targetStart) targetStart = 0;
                    if (end > 0 && end < start) end = start;
                    if (end === start) return 0;
                    if (0 === target.length || 0 === this.length) return 0;
                    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
                    if (start < 0 || start >= this.length) throw new RangeError("sourceStart out of bounds");
                    if (end < 0) throw new RangeError("sourceEnd out of bounds");
                    if (end > this.length) end = this.length;
                    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
                    var len = end - start;
                    var i;
                    if (this === target && start < targetStart && targetStart < end) for (i = len - 1; i >= 0; --i) target[i + targetStart] = this[i + start]; else if (len < 1e3 || !Buffer.TYPED_ARRAY_SUPPORT) for (i = 0; i < len; ++i) target[i + targetStart] = this[i + start]; else Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
                    return len;
                };
                Buffer.prototype.fill = function(val, start, end, encoding) {
                    if ("string" === typeof val) {
                        if ("string" === typeof start) {
                            encoding = start;
                            start = 0;
                            end = this.length;
                        } else if ("string" === typeof end) {
                            encoding = end;
                            end = this.length;
                        }
                        if (1 === val.length) {
                            var code = val.charCodeAt(0);
                            if (code < 256) val = code;
                        }
                        if (void 0 !== encoding && "string" !== typeof encoding) throw new TypeError("encoding must be a string");
                        if ("string" === typeof encoding && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
                    } else if ("number" === typeof val) val &= 255;
                    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
                    if (end <= start) return this;
                    start >>>= 0;
                    end = void 0 === end ? this.length : end >>> 0;
                    if (!val) val = 0;
                    var i;
                    if ("number" === typeof val) for (i = start; i < end; ++i) this[i] = val; else {
                        var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
                        var len = bytes.length;
                        for (i = 0; i < end - start; ++i) this[i + start] = bytes[i % len];
                    }
                    return this;
                };
                var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
                function base64clean(str) {
                    str = stringtrim(str).replace(INVALID_BASE64_RE, "");
                    if (str.length < 2) return "";
                    while (str.length % 4 !== 0) str += "=";
                    return str;
                }
                function stringtrim(str) {
                    if (str.trim) return str.trim();
                    return str.replace(/^\s+|\s+$/g, "");
                }
                function toHex(n) {
                    if (n < 16) return "0" + n.toString(16);
                    return n.toString(16);
                }
                function utf8ToBytes(string, units) {
                    units = units || 1 / 0;
                    var codePoint;
                    var length = string.length;
                    var leadSurrogate = null;
                    var bytes = [];
                    for (var i = 0; i < length; ++i) {
                        codePoint = string.charCodeAt(i);
                        if (codePoint > 55295 && codePoint < 57344) {
                            if (!leadSurrogate) {
                                if (codePoint > 56319) {
                                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                                    continue;
                                } else if (i + 1 === length) {
                                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                                    continue;
                                }
                                leadSurrogate = codePoint;
                                continue;
                            }
                            if (codePoint < 56320) {
                                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                                leadSurrogate = codePoint;
                                continue;
                            }
                            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
                        } else if (leadSurrogate) if ((units -= 3) > -1) bytes.push(239, 191, 189);
                        leadSurrogate = null;
                        if (codePoint < 128) {
                            if ((units -= 1) < 0) break;
                            bytes.push(codePoint);
                        } else if (codePoint < 2048) {
                            if ((units -= 2) < 0) break;
                            bytes.push(codePoint >> 6 | 192, 63 & codePoint | 128);
                        } else if (codePoint < 65536) {
                            if ((units -= 3) < 0) break;
                            bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, 63 & codePoint | 128);
                        } else if (codePoint < 1114112) {
                            if ((units -= 4) < 0) break;
                            bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, 63 & codePoint | 128);
                        } else throw new Error("Invalid code point");
                    }
                    return bytes;
                }
                function asciiToBytes(str) {
                    var byteArray = [];
                    for (var i = 0; i < str.length; ++i) byteArray.push(255 & str.charCodeAt(i));
                    return byteArray;
                }
                function utf16leToBytes(str, units) {
                    var c, hi, lo;
                    var byteArray = [];
                    for (var i = 0; i < str.length; ++i) {
                        if ((units -= 2) < 0) break;
                        c = str.charCodeAt(i);
                        hi = c >> 8;
                        lo = c % 256;
                        byteArray.push(lo);
                        byteArray.push(hi);
                    }
                    return byteArray;
                }
                function base64ToBytes(str) {
                    return toByteArray(base64clean(str));
                }
                function blitBuffer(src, dst, offset, length) {
                    for (var i = 0; i < length; ++i) {
                        if (i + offset >= dst.length || i >= src.length) break;
                        dst[i + offset] = src[i];
                    }
                    return i;
                }
                function isnan(val) {
                    return val !== val;
                }
                function isBuffer(obj) {
                    return null != obj && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
                }
                function isFastBuffer(obj) {
                    return !!obj.constructor && "function" === typeof obj.constructor.isBuffer && obj.constructor.isBuffer(obj);
                }
                function isSlowBuffer(obj) {
                    return "function" === typeof obj.readFloatLE && "function" === typeof obj.slice && isFastBuffer(obj.slice(0, 0));
                }
                function defaultSetTimout() {
                    throw new Error("setTimeout has not been defined");
                }
                function defaultClearTimeout() {
                    throw new Error("clearTimeout has not been defined");
                }
                var cachedSetTimeout = defaultSetTimout;
                var cachedClearTimeout = defaultClearTimeout;
                if ("function" === typeof global$1.setTimeout) cachedSetTimeout = setTimeout;
                if ("function" === typeof global$1.clearTimeout) cachedClearTimeout = clearTimeout;
                function runTimeout(fun) {
                    if (cachedSetTimeout === setTimeout) return setTimeout(fun, 0);
                    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                        cachedSetTimeout = setTimeout;
                        return setTimeout(fun, 0);
                    }
                    try {
                        return cachedSetTimeout(fun, 0);
                    } catch (e) {
                        try {
                            return cachedSetTimeout.call(null, fun, 0);
                        } catch (e) {
                            return cachedSetTimeout.call(this, fun, 0);
                        }
                    }
                }
                function runClearTimeout(marker) {
                    if (cachedClearTimeout === clearTimeout) return clearTimeout(marker);
                    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                        cachedClearTimeout = clearTimeout;
                        return clearTimeout(marker);
                    }
                    try {
                        return cachedClearTimeout(marker);
                    } catch (e) {
                        try {
                            return cachedClearTimeout.call(null, marker);
                        } catch (e) {
                            return cachedClearTimeout.call(this, marker);
                        }
                    }
                }
                var queue = [];
                var draining = false;
                var currentQueue;
                var queueIndex = -1;
                function cleanUpNextTick() {
                    if (!draining || !currentQueue) return;
                    draining = false;
                    if (currentQueue.length) queue = currentQueue.concat(queue); else queueIndex = -1;
                    if (queue.length) drainQueue();
                }
                function drainQueue() {
                    if (draining) return;
                    var timeout = runTimeout(cleanUpNextTick);
                    draining = true;
                    var len = queue.length;
                    while (len) {
                        currentQueue = queue;
                        queue = [];
                        while (++queueIndex < len) if (currentQueue) currentQueue[queueIndex].run();
                        queueIndex = -1;
                        len = queue.length;
                    }
                    currentQueue = null;
                    draining = false;
                    runClearTimeout(timeout);
                }
                function nextTick(fun) {
                    var args = new Array(arguments.length - 1);
                    if (arguments.length > 1) for (var i = 1; i < arguments.length; i++) args[i - 1] = arguments[i];
                    queue.push(new Item(fun, args));
                    if (1 === queue.length && !draining) runTimeout(drainQueue);
                }
                function Item(fun, array) {
                    this.fun = fun;
                    this.array = array;
                }
                Item.prototype.run = function() {
                    this.fun.apply(null, this.array);
                };
                var performance = global$1.performance || {};
                performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow;
                var inherits;
                if ("function" === typeof Object.create) inherits = function(ctor, superCtor) {
                    ctor.super_ = superCtor;
                    ctor.prototype = Object.create(superCtor.prototype, {
                        constructor: {
                            value: ctor,
                            enumerable: false,
                            writable: true,
                            configurable: true
                        }
                    });
                }; else inherits = function(ctor, superCtor) {
                    ctor.super_ = superCtor;
                    var TempCtor = function() {};
                    TempCtor.prototype = superCtor.prototype;
                    ctor.prototype = new TempCtor;
                    ctor.prototype.constructor = ctor;
                };
                var inherits$1 = inherits;
                var formatRegExp = /%[sdj%]/g;
                function format(f) {
                    if (!isString(f)) {
                        var objects = [];
                        for (var i = 0; i < arguments.length; i++) objects.push(inspect(arguments[i]));
                        return objects.join(" ");
                    }
                    i = 1;
                    var args = arguments;
                    var len = args.length;
                    var str = String(f).replace(formatRegExp, (function(x) {
                        if ("%%" === x) return "%";
                        if (i >= len) return x;
                        switch (x) {
                          case "%s":
                            return String(args[i++]);

                          case "%d":
                            return Number(args[i++]);

                          case "%j":
                            try {
                                return JSON.stringify(args[i++]);
                            } catch (_) {
                                return "[Circular]";
                            }

                          default:
                            return x;
                        }
                    }));
                    for (var x = args[i]; i < len; x = args[++i]) if (isNull(x) || !isObject(x)) str += " " + x; else str += " " + inspect(x);
                    return str;
                }
                function deprecate(fn, msg) {
                    if (isUndefined(global$1.process)) return function() {
                        return deprecate(fn, msg).apply(this, arguments);
                    };
                    var warned = false;
                    function deprecated() {
                        if (!warned) {
                            console.error(msg);
                            warned = true;
                        }
                        return fn.apply(this, arguments);
                    }
                    return deprecated;
                }
                var debugs = {};
                var debugEnviron;
                function debuglog(set) {
                    if (isUndefined(debugEnviron)) debugEnviron = "";
                    set = set.toUpperCase();
                    if (!debugs[set]) if (new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)) {
                        var pid = 0;
                        debugs[set] = function() {
                            var msg = format.apply(null, arguments);
                            console.error("%s %d: %s", set, pid, msg);
                        };
                    } else debugs[set] = function() {};
                    return debugs[set];
                }
                function inspect(obj, opts) {
                    var ctx = {
                        seen: [],
                        stylize: stylizeNoColor
                    };
                    if (arguments.length >= 3) ctx.depth = arguments[2];
                    if (arguments.length >= 4) ctx.colors = arguments[3];
                    if (isBoolean(opts)) ctx.showHidden = opts; else if (opts) _extend(ctx, opts);
                    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
                    if (isUndefined(ctx.depth)) ctx.depth = 2;
                    if (isUndefined(ctx.colors)) ctx.colors = false;
                    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
                    if (ctx.colors) ctx.stylize = stylizeWithColor;
                    return formatValue(ctx, obj, ctx.depth);
                }
                inspect.colors = {
                    bold: [ 1, 22 ],
                    italic: [ 3, 23 ],
                    underline: [ 4, 24 ],
                    inverse: [ 7, 27 ],
                    white: [ 37, 39 ],
                    grey: [ 90, 39 ],
                    black: [ 30, 39 ],
                    blue: [ 34, 39 ],
                    cyan: [ 36, 39 ],
                    green: [ 32, 39 ],
                    magenta: [ 35, 39 ],
                    red: [ 31, 39 ],
                    yellow: [ 33, 39 ]
                };
                inspect.styles = {
                    special: "cyan",
                    number: "yellow",
                    boolean: "yellow",
                    undefined: "grey",
                    null: "bold",
                    string: "green",
                    date: "magenta",
                    regexp: "red"
                };
                function stylizeWithColor(str, styleType) {
                    var style = inspect.styles[styleType];
                    if (style) return "[" + inspect.colors[style][0] + "m" + str + "[" + inspect.colors[style][1] + "m"; else return str;
                }
                function stylizeNoColor(str, styleType) {
                    return str;
                }
                function arrayToHash(array) {
                    var hash = {};
                    array.forEach((function(val, idx) {
                        hash[val] = true;
                    }));
                    return hash;
                }
                function formatValue(ctx, value, recurseTimes) {
                    if (ctx.customInspect && value && isFunction(value.inspect) && value.inspect !== inspect && !(value.constructor && value.constructor.prototype === value)) {
                        var ret = value.inspect(recurseTimes, ctx);
                        if (!isString(ret)) ret = formatValue(ctx, ret, recurseTimes);
                        return ret;
                    }
                    var primitive = formatPrimitive(ctx, value);
                    if (primitive) return primitive;
                    var keys = Object.keys(value);
                    var visibleKeys = arrayToHash(keys);
                    if (ctx.showHidden) keys = Object.getOwnPropertyNames(value);
                    if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) return formatError(value);
                    if (0 === keys.length) {
                        if (isFunction(value)) {
                            var name = value.name ? ": " + value.name : "";
                            return ctx.stylize("[Function" + name + "]", "special");
                        }
                        if (isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
                        if (isDate(value)) return ctx.stylize(Date.prototype.toString.call(value), "date");
                        if (isError(value)) return formatError(value);
                    }
                    var base = "", array = false, braces = [ "{", "}" ];
                    if (isArray$1(value)) {
                        array = true;
                        braces = [ "[", "]" ];
                    }
                    if (isFunction(value)) {
                        var n = value.name ? ": " + value.name : "";
                        base = " [Function" + n + "]";
                    }
                    if (isRegExp(value)) base = " " + RegExp.prototype.toString.call(value);
                    if (isDate(value)) base = " " + Date.prototype.toUTCString.call(value);
                    if (isError(value)) base = " " + formatError(value);
                    if (0 === keys.length && (!array || 0 == value.length)) return braces[0] + base + braces[1];
                    if (recurseTimes < 0) if (isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), "regexp"); else return ctx.stylize("[Object]", "special");
                    ctx.seen.push(value);
                    var output;
                    if (array) output = formatArray(ctx, value, recurseTimes, visibleKeys, keys); else output = keys.map((function(key) {
                        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                    }));
                    ctx.seen.pop();
                    return reduceToSingleString(output, base, braces);
                }
                function formatPrimitive(ctx, value) {
                    if (isUndefined(value)) return ctx.stylize("undefined", "undefined");
                    if (isString(value)) {
                        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
                        return ctx.stylize(simple, "string");
                    }
                    if (isNumber(value)) return ctx.stylize("" + value, "number");
                    if (isBoolean(value)) return ctx.stylize("" + value, "boolean");
                    if (isNull(value)) return ctx.stylize("null", "null");
                }
                function formatError(value) {
                    return "[" + Error.prototype.toString.call(value) + "]";
                }
                function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
                    var output = [];
                    for (var i = 0, l = value.length; i < l; ++i) if (hasOwnProperty(value, String(i))) output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true)); else output.push("");
                    keys.forEach((function(key) {
                        if (!key.match(/^\d+$/)) output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
                    }));
                    return output;
                }
                function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
                    var name, str, desc;
                    desc = Object.getOwnPropertyDescriptor(value, key) || {
                        value: value[key]
                    };
                    if (desc.get) if (desc.set) str = ctx.stylize("[Getter/Setter]", "special"); else str = ctx.stylize("[Getter]", "special"); else if (desc.set) str = ctx.stylize("[Setter]", "special");
                    if (!hasOwnProperty(visibleKeys, key)) name = "[" + key + "]";
                    if (!str) if (ctx.seen.indexOf(desc.value) < 0) {
                        if (isNull(recurseTimes)) str = formatValue(ctx, desc.value, null); else str = formatValue(ctx, desc.value, recurseTimes - 1);
                        if (str.indexOf("\n") > -1) if (array) str = str.split("\n").map((function(line) {
                            return "  " + line;
                        })).join("\n").substr(2); else str = "\n" + str.split("\n").map((function(line) {
                            return "   " + line;
                        })).join("\n");
                    } else str = ctx.stylize("[Circular]", "special");
                    if (isUndefined(name)) {
                        if (array && key.match(/^\d+$/)) return str;
                        name = JSON.stringify("" + key);
                        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                            name = name.substr(1, name.length - 2);
                            name = ctx.stylize(name, "name");
                        } else {
                            name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
                            name = ctx.stylize(name, "string");
                        }
                    }
                    return name + ": " + str;
                }
                function reduceToSingleString(output, base, braces) {
                    var length = output.reduce((function(prev, cur) {
                        if (cur.indexOf("\n") >= 0) ;
                        return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
                    }), 0);
                    if (length > 60) return braces[0] + ("" === base ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
                    return braces[0] + base + " " + output.join(", ") + " " + braces[1];
                }
                function isArray$1(ar) {
                    return Array.isArray(ar);
                }
                function isBoolean(arg) {
                    return "boolean" === typeof arg;
                }
                function isNull(arg) {
                    return null === arg;
                }
                function isNumber(arg) {
                    return "number" === typeof arg;
                }
                function isString(arg) {
                    return "string" === typeof arg;
                }
                function isUndefined(arg) {
                    return void 0 === arg;
                }
                function isRegExp(re) {
                    return isObject(re) && "[object RegExp]" === objectToString(re);
                }
                function isObject(arg) {
                    return "object" === typeof arg && null !== arg;
                }
                function isDate(d) {
                    return isObject(d) && "[object Date]" === objectToString(d);
                }
                function isError(e) {
                    return isObject(e) && ("[object Error]" === objectToString(e) || e instanceof Error);
                }
                function isFunction(arg) {
                    return "function" === typeof arg;
                }
                function objectToString(o) {
                    return Object.prototype.toString.call(o);
                }
                function _extend(origin, add) {
                    if (!add || !isObject(add)) return origin;
                    var keys = Object.keys(add);
                    var i = keys.length;
                    while (i--) origin[keys[i]] = add[keys[i]];
                    return origin;
                }
                function hasOwnProperty(obj, prop) {
                    return Object.prototype.hasOwnProperty.call(obj, prop);
                }
                function BufferList() {
                    this.head = null;
                    this.tail = null;
                    this.length = 0;
                }
                BufferList.prototype.push = function(v) {
                    var entry = {
                        data: v,
                        next: null
                    };
                    if (this.length > 0) this.tail.next = entry; else this.head = entry;
                    this.tail = entry;
                    ++this.length;
                };
                BufferList.prototype.unshift = function(v) {
                    var entry = {
                        data: v,
                        next: this.head
                    };
                    if (0 === this.length) this.tail = entry;
                    this.head = entry;
                    ++this.length;
                };
                BufferList.prototype.shift = function() {
                    if (0 === this.length) return;
                    var ret = this.head.data;
                    if (1 === this.length) this.head = this.tail = null; else this.head = this.head.next;
                    --this.length;
                    return ret;
                };
                BufferList.prototype.clear = function() {
                    this.head = this.tail = null;
                    this.length = 0;
                };
                BufferList.prototype.join = function(s) {
                    if (0 === this.length) return "";
                    var p = this.head;
                    var ret = "" + p.data;
                    while (p = p.next) ret += s + p.data;
                    return ret;
                };
                BufferList.prototype.concat = function(n) {
                    if (0 === this.length) return Buffer.alloc(0);
                    if (1 === this.length) return this.head.data;
                    var ret = Buffer.allocUnsafe(n >>> 0);
                    var p = this.head;
                    var i = 0;
                    while (p) {
                        p.data.copy(ret, i);
                        i += p.data.length;
                        p = p.next;
                    }
                    return ret;
                };
                var isBufferEncoding = Buffer.isEncoding || function(encoding) {
                    switch (encoding && encoding.toLowerCase()) {
                      case "hex":
                      case "utf8":
                      case "utf-8":
                      case "ascii":
                      case "binary":
                      case "base64":
                      case "ucs2":
                      case "ucs-2":
                      case "utf16le":
                      case "utf-16le":
                      case "raw":
                        return true;

                      default:
                        return false;
                    }
                };
                function assertEncoding(encoding) {
                    if (encoding && !isBufferEncoding(encoding)) throw new Error("Unknown encoding: " + encoding);
                }
                function StringDecoder(encoding) {
                    this.encoding = (encoding || "utf8").toLowerCase().replace(/[-_]/, "");
                    assertEncoding(encoding);
                    switch (this.encoding) {
                      case "utf8":
                        this.surrogateSize = 3;
                        break;

                      case "ucs2":
                      case "utf16le":
                        this.surrogateSize = 2;
                        this.detectIncompleteChar = utf16DetectIncompleteChar;
                        break;

                      case "base64":
                        this.surrogateSize = 3;
                        this.detectIncompleteChar = base64DetectIncompleteChar;
                        break;

                      default:
                        this.write = passThroughWrite;
                        return;
                    }
                    this.charBuffer = new Buffer(6);
                    this.charReceived = 0;
                    this.charLength = 0;
                }
                StringDecoder.prototype.write = function(buffer) {
                    var charStr = "";
                    while (this.charLength) {
                        var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length;
                        buffer.copy(this.charBuffer, this.charReceived, 0, available);
                        this.charReceived += available;
                        if (this.charReceived < this.charLength) return "";
                        buffer = buffer.slice(available, buffer.length);
                        charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
                        var charCode = charStr.charCodeAt(charStr.length - 1);
                        if (charCode >= 55296 && charCode <= 56319) {
                            this.charLength += this.surrogateSize;
                            charStr = "";
                            continue;
                        }
                        this.charReceived = this.charLength = 0;
                        if (0 === buffer.length) return charStr;
                        break;
                    }
                    this.detectIncompleteChar(buffer);
                    var end = buffer.length;
                    if (this.charLength) {
                        buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
                        end -= this.charReceived;
                    }
                    charStr += buffer.toString(this.encoding, 0, end);
                    end = charStr.length - 1;
                    charCode = charStr.charCodeAt(end);
                    if (charCode >= 55296 && charCode <= 56319) {
                        var size = this.surrogateSize;
                        this.charLength += size;
                        this.charReceived += size;
                        this.charBuffer.copy(this.charBuffer, size, 0, size);
                        buffer.copy(this.charBuffer, 0, 0, size);
                        return charStr.substring(0, end);
                    }
                    return charStr;
                };
                StringDecoder.prototype.detectIncompleteChar = function(buffer) {
                    var i = buffer.length >= 3 ? 3 : buffer.length;
                    for (;i > 0; i--) {
                        var c = buffer[buffer.length - i];
                        if (1 == i && c >> 5 == 6) {
                            this.charLength = 2;
                            break;
                        }
                        if (i <= 2 && c >> 4 == 14) {
                            this.charLength = 3;
                            break;
                        }
                        if (i <= 3 && c >> 3 == 30) {
                            this.charLength = 4;
                            break;
                        }
                    }
                    this.charReceived = i;
                };
                StringDecoder.prototype.end = function(buffer) {
                    var res = "";
                    if (buffer && buffer.length) res = this.write(buffer);
                    if (this.charReceived) {
                        var cr = this.charReceived;
                        var buf = this.charBuffer;
                        var enc = this.encoding;
                        res += buf.slice(0, cr).toString(enc);
                    }
                    return res;
                };
                function passThroughWrite(buffer) {
                    return buffer.toString(this.encoding);
                }
                function utf16DetectIncompleteChar(buffer) {
                    this.charReceived = buffer.length % 2;
                    this.charLength = this.charReceived ? 2 : 0;
                }
                function base64DetectIncompleteChar(buffer) {
                    this.charReceived = buffer.length % 3;
                    this.charLength = this.charReceived ? 3 : 0;
                }
                Readable.ReadableState = ReadableState;
                var debug = debuglog("stream");
                inherits$1(Readable, EventEmitter);
                function prependListener(emitter, event, fn) {
                    if ("function" === typeof emitter.prependListener) return emitter.prependListener(event, fn); else if (!emitter._events || !emitter._events[event]) emitter.on(event, fn); else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn); else emitter._events[event] = [ fn, emitter._events[event] ];
                }
                function listenerCount$1(emitter, type) {
                    return emitter.listeners(type).length;
                }
                function ReadableState(options, stream) {
                    options = options || {};
                    this.objectMode = !!options.objectMode;
                    if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
                    var hwm = options.highWaterMark;
                    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
                    this.highWaterMark = hwm || 0 === hwm ? hwm : defaultHwm;
                    this.highWaterMark = ~~this.highWaterMark;
                    this.buffer = new BufferList;
                    this.length = 0;
                    this.pipes = null;
                    this.pipesCount = 0;
                    this.flowing = null;
                    this.ended = false;
                    this.endEmitted = false;
                    this.reading = false;
                    this.sync = true;
                    this.needReadable = false;
                    this.emittedReadable = false;
                    this.readableListening = false;
                    this.resumeScheduled = false;
                    this.defaultEncoding = options.defaultEncoding || "utf8";
                    this.ranOut = false;
                    this.awaitDrain = 0;
                    this.readingMore = false;
                    this.decoder = null;
                    this.encoding = null;
                    if (options.encoding) {
                        this.decoder = new StringDecoder(options.encoding);
                        this.encoding = options.encoding;
                    }
                }
                function Readable(options) {
                    if (!(this instanceof Readable)) return new Readable(options);
                    this._readableState = new ReadableState(options, this);
                    this.readable = true;
                    if (options && "function" === typeof options.read) this._read = options.read;
                    EventEmitter.call(this);
                }
                Readable.prototype.push = function(chunk, encoding) {
                    var state = this._readableState;
                    if (!state.objectMode && "string" === typeof chunk) {
                        encoding = encoding || state.defaultEncoding;
                        if (encoding !== state.encoding) {
                            chunk = Buffer.from(chunk, encoding);
                            encoding = "";
                        }
                    }
                    return readableAddChunk(this, state, chunk, encoding, false);
                };
                Readable.prototype.unshift = function(chunk) {
                    var state = this._readableState;
                    return readableAddChunk(this, state, chunk, "", true);
                };
                Readable.prototype.isPaused = function() {
                    return false === this._readableState.flowing;
                };
                function readableAddChunk(stream, state, chunk, encoding, addToFront) {
                    var er = chunkInvalid(state, chunk);
                    if (er) stream.emit("error", er); else if (null === chunk) {
                        state.reading = false;
                        onEofChunk(stream, state);
                    } else if (state.objectMode || chunk && chunk.length > 0) if (state.ended && !addToFront) {
                        var e = new Error("stream.push() after EOF");
                        stream.emit("error", e);
                    } else if (state.endEmitted && addToFront) {
                        var _e = new Error("stream.unshift() after end event");
                        stream.emit("error", _e);
                    } else {
                        var skipAdd;
                        if (state.decoder && !addToFront && !encoding) {
                            chunk = state.decoder.write(chunk);
                            skipAdd = !state.objectMode && 0 === chunk.length;
                        }
                        if (!addToFront) state.reading = false;
                        if (!skipAdd) if (state.flowing && 0 === state.length && !state.sync) {
                            stream.emit("data", chunk);
                            stream.read(0);
                        } else {
                            state.length += state.objectMode ? 1 : chunk.length;
                            if (addToFront) state.buffer.unshift(chunk); else state.buffer.push(chunk);
                            if (state.needReadable) emitReadable(stream);
                        }
                        maybeReadMore(stream, state);
                    } else if (!addToFront) state.reading = false;
                    return needMoreData(state);
                }
                function needMoreData(state) {
                    return !state.ended && (state.needReadable || state.length < state.highWaterMark || 0 === state.length);
                }
                Readable.prototype.setEncoding = function(enc) {
                    this._readableState.decoder = new StringDecoder(enc);
                    this._readableState.encoding = enc;
                    return this;
                };
                var MAX_HWM = 8388608;
                function computeNewHighWaterMark(n) {
                    if (n >= MAX_HWM) n = MAX_HWM; else {
                        n--;
                        n |= n >>> 1;
                        n |= n >>> 2;
                        n |= n >>> 4;
                        n |= n >>> 8;
                        n |= n >>> 16;
                        n++;
                    }
                    return n;
                }
                function howMuchToRead(n, state) {
                    if (n <= 0 || 0 === state.length && state.ended) return 0;
                    if (state.objectMode) return 1;
                    if (n !== n) if (state.flowing && state.length) return state.buffer.head.data.length; else return state.length;
                    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
                    if (n <= state.length) return n;
                    if (!state.ended) {
                        state.needReadable = true;
                        return 0;
                    }
                    return state.length;
                }
                Readable.prototype.read = function(n) {
                    debug("read", n);
                    n = parseInt(n, 10);
                    var state = this._readableState;
                    var nOrig = n;
                    if (0 !== n) state.emittedReadable = false;
                    if (0 === n && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
                        debug("read: emitReadable", state.length, state.ended);
                        if (0 === state.length && state.ended) endReadable(this); else emitReadable(this);
                        return null;
                    }
                    n = howMuchToRead(n, state);
                    if (0 === n && state.ended) {
                        if (0 === state.length) endReadable(this);
                        return null;
                    }
                    var doRead = state.needReadable;
                    debug("need readable", doRead);
                    if (0 === state.length || state.length - n < state.highWaterMark) {
                        doRead = true;
                        debug("length less than watermark", doRead);
                    }
                    if (state.ended || state.reading) {
                        doRead = false;
                        debug("reading or ended", doRead);
                    } else if (doRead) {
                        debug("do read");
                        state.reading = true;
                        state.sync = true;
                        if (0 === state.length) state.needReadable = true;
                        this._read(state.highWaterMark);
                        state.sync = false;
                        if (!state.reading) n = howMuchToRead(nOrig, state);
                    }
                    var ret;
                    if (n > 0) ret = fromList(n, state); else ret = null;
                    if (null === ret) {
                        state.needReadable = true;
                        n = 0;
                    } else state.length -= n;
                    if (0 === state.length) {
                        if (!state.ended) state.needReadable = true;
                        if (nOrig !== n && state.ended) endReadable(this);
                    }
                    if (null !== ret) this.emit("data", ret);
                    return ret;
                };
                function chunkInvalid(state, chunk) {
                    var er = null;
                    if (!isBuffer(chunk) && "string" !== typeof chunk && null !== chunk && void 0 !== chunk && !state.objectMode) er = new TypeError("Invalid non-string/buffer chunk");
                    return er;
                }
                function onEofChunk(stream, state) {
                    if (state.ended) return;
                    if (state.decoder) {
                        var chunk = state.decoder.end();
                        if (chunk && chunk.length) {
                            state.buffer.push(chunk);
                            state.length += state.objectMode ? 1 : chunk.length;
                        }
                    }
                    state.ended = true;
                    emitReadable(stream);
                }
                function emitReadable(stream) {
                    var state = stream._readableState;
                    state.needReadable = false;
                    if (!state.emittedReadable) {
                        debug("emitReadable", state.flowing);
                        state.emittedReadable = true;
                        if (state.sync) nextTick(emitReadable_, stream); else emitReadable_(stream);
                    }
                }
                function emitReadable_(stream) {
                    debug("emit readable");
                    stream.emit("readable");
                    flow(stream);
                }
                function maybeReadMore(stream, state) {
                    if (!state.readingMore) {
                        state.readingMore = true;
                        nextTick(maybeReadMore_, stream, state);
                    }
                }
                function maybeReadMore_(stream, state) {
                    var len = state.length;
                    while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
                        debug("maybeReadMore read 0");
                        stream.read(0);
                        if (len === state.length) break; else len = state.length;
                    }
                    state.readingMore = false;
                }
                Readable.prototype._read = function(n) {
                    this.emit("error", new Error("not implemented"));
                };
                Readable.prototype.pipe = function(dest, pipeOpts) {
                    var src = this;
                    var state = this._readableState;
                    switch (state.pipesCount) {
                      case 0:
                        state.pipes = dest;
                        break;

                      case 1:
                        state.pipes = [ state.pipes, dest ];
                        break;

                      default:
                        state.pipes.push(dest);
                        break;
                    }
                    state.pipesCount += 1;
                    debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
                    var doEnd = !pipeOpts || false !== pipeOpts.end;
                    var endFn = doEnd ? onend : cleanup;
                    if (state.endEmitted) nextTick(endFn); else src.once("end", endFn);
                    dest.on("unpipe", onunpipe);
                    function onunpipe(readable) {
                        debug("onunpipe");
                        if (readable === src) cleanup();
                    }
                    function onend() {
                        debug("onend");
                        dest.end();
                    }
                    var ondrain = pipeOnDrain(src);
                    dest.on("drain", ondrain);
                    var cleanedUp = false;
                    function cleanup() {
                        debug("cleanup");
                        dest.removeListener("close", onclose);
                        dest.removeListener("finish", onfinish);
                        dest.removeListener("drain", ondrain);
                        dest.removeListener("error", onerror);
                        dest.removeListener("unpipe", onunpipe);
                        src.removeListener("end", onend);
                        src.removeListener("end", cleanup);
                        src.removeListener("data", ondata);
                        cleanedUp = true;
                        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
                    }
                    var increasedAwaitDrain = false;
                    src.on("data", ondata);
                    function ondata(chunk) {
                        debug("ondata");
                        increasedAwaitDrain = false;
                        var ret = dest.write(chunk);
                        if (false === ret && !increasedAwaitDrain) {
                            if ((1 === state.pipesCount && state.pipes === dest || state.pipesCount > 1 && -1 !== indexOf(state.pipes, dest)) && !cleanedUp) {
                                debug("false write response, pause", src._readableState.awaitDrain);
                                src._readableState.awaitDrain++;
                                increasedAwaitDrain = true;
                            }
                            src.pause();
                        }
                    }
                    function onerror(er) {
                        debug("onerror", er);
                        unpipe();
                        dest.removeListener("error", onerror);
                        if (0 === listenerCount$1(dest, "error")) dest.emit("error", er);
                    }
                    prependListener(dest, "error", onerror);
                    function onclose() {
                        dest.removeListener("finish", onfinish);
                        unpipe();
                    }
                    dest.once("close", onclose);
                    function onfinish() {
                        debug("onfinish");
                        dest.removeListener("close", onclose);
                        unpipe();
                    }
                    dest.once("finish", onfinish);
                    function unpipe() {
                        debug("unpipe");
                        src.unpipe(dest);
                    }
                    dest.emit("pipe", src);
                    if (!state.flowing) {
                        debug("pipe resume");
                        src.resume();
                    }
                    return dest;
                };
                function pipeOnDrain(src) {
                    return function() {
                        var state = src._readableState;
                        debug("pipeOnDrain", state.awaitDrain);
                        if (state.awaitDrain) state.awaitDrain--;
                        if (0 === state.awaitDrain && src.listeners("data").length) {
                            state.flowing = true;
                            flow(src);
                        }
                    };
                }
                Readable.prototype.unpipe = function(dest) {
                    var state = this._readableState;
                    if (0 === state.pipesCount) return this;
                    if (1 === state.pipesCount) {
                        if (dest && dest !== state.pipes) return this;
                        if (!dest) dest = state.pipes;
                        state.pipes = null;
                        state.pipesCount = 0;
                        state.flowing = false;
                        if (dest) dest.emit("unpipe", this);
                        return this;
                    }
                    if (!dest) {
                        var dests = state.pipes;
                        var len = state.pipesCount;
                        state.pipes = null;
                        state.pipesCount = 0;
                        state.flowing = false;
                        for (var _i = 0; _i < len; _i++) dests[_i].emit("unpipe", this);
                        return this;
                    }
                    var i = indexOf(state.pipes, dest);
                    if (-1 === i) return this;
                    state.pipes.splice(i, 1);
                    state.pipesCount -= 1;
                    if (1 === state.pipesCount) state.pipes = state.pipes[0];
                    dest.emit("unpipe", this);
                    return this;
                };
                Readable.prototype.on = function(ev, fn) {
                    var res = EventEmitter.prototype.on.call(this, ev, fn);
                    if ("data" === ev) {
                        if (false !== this._readableState.flowing) this.resume();
                    } else if ("readable" === ev) {
                        var state = this._readableState;
                        if (!state.endEmitted && !state.readableListening) {
                            state.readableListening = state.needReadable = true;
                            state.emittedReadable = false;
                            if (!state.reading) nextTick(nReadingNextTick, this); else if (state.length) emitReadable(this);
                        }
                    }
                    return res;
                };
                Readable.prototype.addListener = Readable.prototype.on;
                function nReadingNextTick(self) {
                    debug("readable nexttick read 0");
                    self.read(0);
                }
                Readable.prototype.resume = function() {
                    var state = this._readableState;
                    if (!state.flowing) {
                        debug("resume");
                        state.flowing = true;
                        resume(this, state);
                    }
                    return this;
                };
                function resume(stream, state) {
                    if (!state.resumeScheduled) {
                        state.resumeScheduled = true;
                        nextTick(resume_, stream, state);
                    }
                }
                function resume_(stream, state) {
                    if (!state.reading) {
                        debug("resume read 0");
                        stream.read(0);
                    }
                    state.resumeScheduled = false;
                    state.awaitDrain = 0;
                    stream.emit("resume");
                    flow(stream);
                    if (state.flowing && !state.reading) stream.read(0);
                }
                Readable.prototype.pause = function() {
                    debug("call pause flowing=%j", this._readableState.flowing);
                    if (false !== this._readableState.flowing) {
                        debug("pause");
                        this._readableState.flowing = false;
                        this.emit("pause");
                    }
                    return this;
                };
                function flow(stream) {
                    var state = stream._readableState;
                    debug("flow", state.flowing);
                    while (state.flowing && null !== stream.read()) ;
                }
                Readable.prototype.wrap = function(stream) {
                    var state = this._readableState;
                    var paused = false;
                    var self = this;
                    stream.on("end", (function() {
                        debug("wrapped end");
                        if (state.decoder && !state.ended) {
                            var chunk = state.decoder.end();
                            if (chunk && chunk.length) self.push(chunk);
                        }
                        self.push(null);
                    }));
                    stream.on("data", (function(chunk) {
                        debug("wrapped data");
                        if (state.decoder) chunk = state.decoder.write(chunk);
                        if (state.objectMode && (null === chunk || void 0 === chunk)) return; else if (!state.objectMode && (!chunk || !chunk.length)) return;
                        var ret = self.push(chunk);
                        if (!ret) {
                            paused = true;
                            stream.pause();
                        }
                    }));
                    for (var i in stream) if (void 0 === this[i] && "function" === typeof stream[i]) this[i] = function(method) {
                        return function() {
                            return stream[method].apply(stream, arguments);
                        };
                    }(i);
                    var events = [ "error", "close", "destroy", "pause", "resume" ];
                    forEach(events, (function(ev) {
                        stream.on(ev, self.emit.bind(self, ev));
                    }));
                    self._read = function(n) {
                        debug("wrapped _read", n);
                        if (paused) {
                            paused = false;
                            stream.resume();
                        }
                    };
                    return self;
                };
                Readable._fromList = fromList;
                function fromList(n, state) {
                    if (0 === state.length) return null;
                    var ret;
                    if (state.objectMode) ret = state.buffer.shift(); else if (!n || n >= state.length) {
                        if (state.decoder) ret = state.buffer.join(""); else if (1 === state.buffer.length) ret = state.buffer.head.data; else ret = state.buffer.concat(state.length);
                        state.buffer.clear();
                    } else ret = fromListPartial(n, state.buffer, state.decoder);
                    return ret;
                }
                function fromListPartial(n, list, hasStrings) {
                    var ret;
                    if (n < list.head.data.length) {
                        ret = list.head.data.slice(0, n);
                        list.head.data = list.head.data.slice(n);
                    } else if (n === list.head.data.length) ret = list.shift(); else ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
                    return ret;
                }
                function copyFromBufferString(n, list) {
                    var p = list.head;
                    var c = 1;
                    var ret = p.data;
                    n -= ret.length;
                    while (p = p.next) {
                        var str = p.data;
                        var nb = n > str.length ? str.length : n;
                        if (nb === str.length) ret += str; else ret += str.slice(0, n);
                        n -= nb;
                        if (0 === n) {
                            if (nb === str.length) {
                                ++c;
                                if (p.next) list.head = p.next; else list.head = list.tail = null;
                            } else {
                                list.head = p;
                                p.data = str.slice(nb);
                            }
                            break;
                        }
                        ++c;
                    }
                    list.length -= c;
                    return ret;
                }
                function copyFromBuffer(n, list) {
                    var ret = Buffer.allocUnsafe(n);
                    var p = list.head;
                    var c = 1;
                    p.data.copy(ret);
                    n -= p.data.length;
                    while (p = p.next) {
                        var buf = p.data;
                        var nb = n > buf.length ? buf.length : n;
                        buf.copy(ret, ret.length - n, 0, nb);
                        n -= nb;
                        if (0 === n) {
                            if (nb === buf.length) {
                                ++c;
                                if (p.next) list.head = p.next; else list.head = list.tail = null;
                            } else {
                                list.head = p;
                                p.data = buf.slice(nb);
                            }
                            break;
                        }
                        ++c;
                    }
                    list.length -= c;
                    return ret;
                }
                function endReadable(stream) {
                    var state = stream._readableState;
                    if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');
                    if (!state.endEmitted) {
                        state.ended = true;
                        nextTick(endReadableNT, state, stream);
                    }
                }
                function endReadableNT(state, stream) {
                    if (!state.endEmitted && 0 === state.length) {
                        state.endEmitted = true;
                        stream.readable = false;
                        stream.emit("end");
                    }
                }
                function forEach(xs, f) {
                    for (var i = 0, l = xs.length; i < l; i++) f(xs[i], i);
                }
                function indexOf(xs, x) {
                    for (var i = 0, l = xs.length; i < l; i++) if (xs[i] === x) return i;
                    return -1;
                }
                Writable.WritableState = WritableState;
                inherits$1(Writable, EventEmitter);
                function nop() {}
                function WriteReq(chunk, encoding, cb) {
                    this.chunk = chunk;
                    this.encoding = encoding;
                    this.callback = cb;
                    this.next = null;
                }
                function WritableState(options, stream) {
                    Object.defineProperty(this, "buffer", {
                        get: deprecate((function() {
                            return this.getBuffer();
                        }), "_writableState.buffer is deprecated. Use _writableState.getBuffer " + "instead.")
                    });
                    options = options || {};
                    this.objectMode = !!options.objectMode;
                    if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
                    var hwm = options.highWaterMark;
                    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
                    this.highWaterMark = hwm || 0 === hwm ? hwm : defaultHwm;
                    this.highWaterMark = ~~this.highWaterMark;
                    this.needDrain = false;
                    this.ending = false;
                    this.ended = false;
                    this.finished = false;
                    var noDecode = false === options.decodeStrings;
                    this.decodeStrings = !noDecode;
                    this.defaultEncoding = options.defaultEncoding || "utf8";
                    this.length = 0;
                    this.writing = false;
                    this.corked = 0;
                    this.sync = true;
                    this.bufferProcessing = false;
                    this.onwrite = function(er) {
                        onwrite(stream, er);
                    };
                    this.writecb = null;
                    this.writelen = 0;
                    this.bufferedRequest = null;
                    this.lastBufferedRequest = null;
                    this.pendingcb = 0;
                    this.prefinished = false;
                    this.errorEmitted = false;
                    this.bufferedRequestCount = 0;
                    this.corkedRequestsFree = new CorkedRequest(this);
                }
                WritableState.prototype.getBuffer = function() {
                    var current = this.bufferedRequest;
                    var out = [];
                    while (current) {
                        out.push(current);
                        current = current.next;
                    }
                    return out;
                };
                function Writable(options) {
                    if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);
                    this._writableState = new WritableState(options, this);
                    this.writable = true;
                    if (options) {
                        if ("function" === typeof options.write) this._write = options.write;
                        if ("function" === typeof options.writev) this._writev = options.writev;
                    }
                    EventEmitter.call(this);
                }
                Writable.prototype.pipe = function() {
                    this.emit("error", new Error("Cannot pipe, not readable"));
                };
                function writeAfterEnd(stream, cb) {
                    var er = new Error("write after end");
                    stream.emit("error", er);
                    nextTick(cb, er);
                }
                function validChunk(stream, state, chunk, cb) {
                    var valid = true;
                    var er = false;
                    if (null === chunk) er = new TypeError("May not write null values to stream"); else if (!Buffer.isBuffer(chunk) && "string" !== typeof chunk && void 0 !== chunk && !state.objectMode) er = new TypeError("Invalid non-string/buffer chunk");
                    if (er) {
                        stream.emit("error", er);
                        nextTick(cb, er);
                        valid = false;
                    }
                    return valid;
                }
                Writable.prototype.write = function(chunk, encoding, cb) {
                    var state = this._writableState;
                    var ret = false;
                    if ("function" === typeof encoding) {
                        cb = encoding;
                        encoding = null;
                    }
                    if (Buffer.isBuffer(chunk)) encoding = "buffer"; else if (!encoding) encoding = state.defaultEncoding;
                    if ("function" !== typeof cb) cb = nop;
                    if (state.ended) writeAfterEnd(this, cb); else if (validChunk(this, state, chunk, cb)) {
                        state.pendingcb++;
                        ret = writeOrBuffer(this, state, chunk, encoding, cb);
                    }
                    return ret;
                };
                Writable.prototype.cork = function() {
                    var state = this._writableState;
                    state.corked++;
                };
                Writable.prototype.uncork = function() {
                    var state = this._writableState;
                    if (state.corked) {
                        state.corked--;
                        if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
                    }
                };
                Writable.prototype.setDefaultEncoding = function(encoding) {
                    if ("string" === typeof encoding) encoding = encoding.toLowerCase();
                    if (!([ "hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw" ].indexOf((encoding + "").toLowerCase()) > -1)) throw new TypeError("Unknown encoding: " + encoding);
                    this._writableState.defaultEncoding = encoding;
                    return this;
                };
                function decodeChunk(state, chunk, encoding) {
                    if (!state.objectMode && false !== state.decodeStrings && "string" === typeof chunk) chunk = Buffer.from(chunk, encoding);
                    return chunk;
                }
                function writeOrBuffer(stream, state, chunk, encoding, cb) {
                    chunk = decodeChunk(state, chunk, encoding);
                    if (Buffer.isBuffer(chunk)) encoding = "buffer";
                    var len = state.objectMode ? 1 : chunk.length;
                    state.length += len;
                    var ret = state.length < state.highWaterMark;
                    if (!ret) state.needDrain = true;
                    if (state.writing || state.corked) {
                        var last = state.lastBufferedRequest;
                        state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
                        if (last) last.next = state.lastBufferedRequest; else state.bufferedRequest = state.lastBufferedRequest;
                        state.bufferedRequestCount += 1;
                    } else doWrite(stream, state, false, len, chunk, encoding, cb);
                    return ret;
                }
                function doWrite(stream, state, writev, len, chunk, encoding, cb) {
                    state.writelen = len;
                    state.writecb = cb;
                    state.writing = true;
                    state.sync = true;
                    if (writev) stream._writev(chunk, state.onwrite); else stream._write(chunk, encoding, state.onwrite);
                    state.sync = false;
                }
                function onwriteError(stream, state, sync, er, cb) {
                    --state.pendingcb;
                    if (sync) nextTick(cb, er); else cb(er);
                    stream._writableState.errorEmitted = true;
                    stream.emit("error", er);
                }
                function onwriteStateUpdate(state) {
                    state.writing = false;
                    state.writecb = null;
                    state.length -= state.writelen;
                    state.writelen = 0;
                }
                function onwrite(stream, er) {
                    var state = stream._writableState;
                    var sync = state.sync;
                    var cb = state.writecb;
                    onwriteStateUpdate(state);
                    if (er) onwriteError(stream, state, sync, er, cb); else {
                        var finished = needFinish(state);
                        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(stream, state);
                        if (sync) nextTick(afterWrite, stream, state, finished, cb); else afterWrite(stream, state, finished, cb);
                    }
                }
                function afterWrite(stream, state, finished, cb) {
                    if (!finished) onwriteDrain(stream, state);
                    state.pendingcb--;
                    cb();
                    finishMaybe(stream, state);
                }
                function onwriteDrain(stream, state) {
                    if (0 === state.length && state.needDrain) {
                        state.needDrain = false;
                        stream.emit("drain");
                    }
                }
                function clearBuffer(stream, state) {
                    state.bufferProcessing = true;
                    var entry = state.bufferedRequest;
                    if (stream._writev && entry && entry.next) {
                        var l = state.bufferedRequestCount;
                        var buffer = new Array(l);
                        var holder = state.corkedRequestsFree;
                        holder.entry = entry;
                        var count = 0;
                        while (entry) {
                            buffer[count] = entry;
                            entry = entry.next;
                            count += 1;
                        }
                        doWrite(stream, state, true, state.length, buffer, "", holder.finish);
                        state.pendingcb++;
                        state.lastBufferedRequest = null;
                        if (holder.next) {
                            state.corkedRequestsFree = holder.next;
                            holder.next = null;
                        } else state.corkedRequestsFree = new CorkedRequest(state);
                    } else {
                        while (entry) {
                            var chunk = entry.chunk;
                            var encoding = entry.encoding;
                            var cb = entry.callback;
                            var len = state.objectMode ? 1 : chunk.length;
                            doWrite(stream, state, false, len, chunk, encoding, cb);
                            entry = entry.next;
                            if (state.writing) break;
                        }
                        if (null === entry) state.lastBufferedRequest = null;
                    }
                    state.bufferedRequestCount = 0;
                    state.bufferedRequest = entry;
                    state.bufferProcessing = false;
                }
                Writable.prototype._write = function(chunk, encoding, cb) {
                    cb(new Error("not implemented"));
                };
                Writable.prototype._writev = null;
                Writable.prototype.end = function(chunk, encoding, cb) {
                    var state = this._writableState;
                    if ("function" === typeof chunk) {
                        cb = chunk;
                        chunk = null;
                        encoding = null;
                    } else if ("function" === typeof encoding) {
                        cb = encoding;
                        encoding = null;
                    }
                    if (null !== chunk && void 0 !== chunk) this.write(chunk, encoding);
                    if (state.corked) {
                        state.corked = 1;
                        this.uncork();
                    }
                    if (!state.ending && !state.finished) endWritable(this, state, cb);
                };
                function needFinish(state) {
                    return state.ending && 0 === state.length && null === state.bufferedRequest && !state.finished && !state.writing;
                }
                function prefinish(stream, state) {
                    if (!state.prefinished) {
                        state.prefinished = true;
                        stream.emit("prefinish");
                    }
                }
                function finishMaybe(stream, state) {
                    var need = needFinish(state);
                    if (need) if (0 === state.pendingcb) {
                        prefinish(stream, state);
                        state.finished = true;
                        stream.emit("finish");
                    } else prefinish(stream, state);
                    return need;
                }
                function endWritable(stream, state, cb) {
                    state.ending = true;
                    finishMaybe(stream, state);
                    if (cb) if (state.finished) nextTick(cb); else stream.once("finish", cb);
                    state.ended = true;
                    stream.writable = false;
                }
                function CorkedRequest(state) {
                    var _this = this;
                    this.next = null;
                    this.entry = null;
                    this.finish = function(err) {
                        var entry = _this.entry;
                        _this.entry = null;
                        while (entry) {
                            var cb = entry.callback;
                            state.pendingcb--;
                            cb(err);
                            entry = entry.next;
                        }
                        if (state.corkedRequestsFree) state.corkedRequestsFree.next = _this; else state.corkedRequestsFree = _this;
                    };
                }
                inherits$1(Duplex, Readable);
                var keys = Object.keys(Writable.prototype);
                for (var v = 0; v < keys.length; v++) {
                    var method = keys[v];
                    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
                }
                function Duplex(options) {
                    if (!(this instanceof Duplex)) return new Duplex(options);
                    Readable.call(this, options);
                    Writable.call(this, options);
                    if (options && false === options.readable) this.readable = false;
                    if (options && false === options.writable) this.writable = false;
                    this.allowHalfOpen = true;
                    if (options && false === options.allowHalfOpen) this.allowHalfOpen = false;
                    this.once("end", onend);
                }
                function onend() {
                    if (this.allowHalfOpen || this._writableState.ended) return;
                    nextTick(onEndNT, this);
                }
                function onEndNT(self) {
                    self.end();
                }
                inherits$1(Transform, Duplex);
                function TransformState(stream) {
                    this.afterTransform = function(er, data) {
                        return afterTransform(stream, er, data);
                    };
                    this.needTransform = false;
                    this.transforming = false;
                    this.writecb = null;
                    this.writechunk = null;
                    this.writeencoding = null;
                }
                function afterTransform(stream, er, data) {
                    var ts = stream._transformState;
                    ts.transforming = false;
                    var cb = ts.writecb;
                    if (!cb) return stream.emit("error", new Error("no writecb in Transform class"));
                    ts.writechunk = null;
                    ts.writecb = null;
                    if (null !== data && void 0 !== data) stream.push(data);
                    cb(er);
                    var rs = stream._readableState;
                    rs.reading = false;
                    if (rs.needReadable || rs.length < rs.highWaterMark) stream._read(rs.highWaterMark);
                }
                function Transform(options) {
                    if (!(this instanceof Transform)) return new Transform(options);
                    Duplex.call(this, options);
                    this._transformState = new TransformState(this);
                    var stream = this;
                    this._readableState.needReadable = true;
                    this._readableState.sync = false;
                    if (options) {
                        if ("function" === typeof options.transform) this._transform = options.transform;
                        if ("function" === typeof options.flush) this._flush = options.flush;
                    }
                    this.once("prefinish", (function() {
                        if ("function" === typeof this._flush) this._flush((function(er) {
                            done(stream, er);
                        })); else done(stream);
                    }));
                }
                Transform.prototype.push = function(chunk, encoding) {
                    this._transformState.needTransform = false;
                    return Duplex.prototype.push.call(this, chunk, encoding);
                };
                Transform.prototype._transform = function(chunk, encoding, cb) {
                    throw new Error("Not implemented");
                };
                Transform.prototype._write = function(chunk, encoding, cb) {
                    var ts = this._transformState;
                    ts.writecb = cb;
                    ts.writechunk = chunk;
                    ts.writeencoding = encoding;
                    if (!ts.transforming) {
                        var rs = this._readableState;
                        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
                    }
                };
                Transform.prototype._read = function(n) {
                    var ts = this._transformState;
                    if (null !== ts.writechunk && ts.writecb && !ts.transforming) {
                        ts.transforming = true;
                        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
                    } else ts.needTransform = true;
                };
                function done(stream, er) {
                    if (er) return stream.emit("error", er);
                    var ws = stream._writableState;
                    var ts = stream._transformState;
                    if (ws.length) throw new Error("Calling transform done when ws.length != 0");
                    if (ts.transforming) throw new Error("Calling transform done when still transforming");
                    return stream.push(null);
                }
                inherits$1(PassThrough, Transform);
                function PassThrough(options) {
                    if (!(this instanceof PassThrough)) return new PassThrough(options);
                    Transform.call(this, options);
                }
                PassThrough.prototype._transform = function(chunk, encoding, cb) {
                    cb(null, chunk);
                };
                inherits$1(Stream, EventEmitter);
                Stream.Readable = Readable;
                Stream.Writable = Writable;
                Stream.Duplex = Duplex;
                Stream.Transform = Transform;
                Stream.PassThrough = PassThrough;
                Stream.Stream = Stream;
                function Stream() {
                    EventEmitter.call(this);
                }
                Stream.prototype.pipe = function(dest, options) {
                    var source = this;
                    function ondata(chunk) {
                        if (dest.writable) if (false === dest.write(chunk) && source.pause) source.pause();
                    }
                    source.on("data", ondata);
                    function ondrain() {
                        if (source.readable && source.resume) source.resume();
                    }
                    dest.on("drain", ondrain);
                    if (!dest._isStdio && (!options || false !== options.end)) {
                        source.on("end", onend);
                        source.on("close", onclose);
                    }
                    var didOnEnd = false;
                    function onend() {
                        if (didOnEnd) return;
                        didOnEnd = true;
                        dest.end();
                    }
                    function onclose() {
                        if (didOnEnd) return;
                        didOnEnd = true;
                        if ("function" === typeof dest.destroy) dest.destroy();
                    }
                    function onerror(er) {
                        cleanup();
                        if (0 === EventEmitter.listenerCount(this, "error")) throw er;
                    }
                    source.on("error", onerror);
                    dest.on("error", onerror);
                    function cleanup() {
                        source.removeListener("data", ondata);
                        dest.removeListener("drain", ondrain);
                        source.removeListener("end", onend);
                        source.removeListener("close", onclose);
                        source.removeListener("error", onerror);
                        dest.removeListener("error", onerror);
                        source.removeListener("end", cleanup);
                        source.removeListener("close", cleanup);
                        dest.removeListener("close", cleanup);
                    }
                    source.on("end", cleanup);
                    source.on("close", cleanup);
                    dest.on("close", cleanup);
                    dest.emit("pipe", source);
                    return dest;
                };
                function _typeof(obj) {
                    if ("function" === typeof Symbol && "symbol" === typeof Symbol.iterator) _typeof = function(obj) {
                        return typeof obj;
                    }; else _typeof = function(obj) {
                        return obj && "function" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                    return _typeof(obj);
                }
                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
                }
                function _defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                function _createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) _defineProperties(Constructor, staticProps);
                    return Constructor;
                }
                function _defineProperty(obj, key, value) {
                    if (key in obj) Object.defineProperty(obj, key, {
                        value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    }); else obj[key] = value;
                    return obj;
                }
                function _inherits(subClass, superClass) {
                    if ("function" !== typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function");
                    subClass.prototype = Object.create(superClass && superClass.prototype, {
                        constructor: {
                            value: subClass,
                            writable: true,
                            configurable: true
                        }
                    });
                    if (superClass) _setPrototypeOf(subClass, superClass);
                }
                function _getPrototypeOf(o) {
                    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function(o) {
                        return o.__proto__ || Object.getPrototypeOf(o);
                    };
                    return _getPrototypeOf(o);
                }
                function _setPrototypeOf(o, p) {
                    _setPrototypeOf = Object.setPrototypeOf || function(o, p) {
                        o.__proto__ = p;
                        return o;
                    };
                    return _setPrototypeOf(o, p);
                }
                function _assertThisInitialized(self) {
                    if (void 0 === self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return self;
                }
                function _possibleConstructorReturn(self, call) {
                    if (call && ("object" === typeof call || "function" === typeof call)) return call;
                    return _assertThisInitialized(self);
                }
                function _toArray(arr) {
                    return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest();
                }
                function _toConsumableArray(arr) {
                    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
                }
                function _arrayWithoutHoles(arr) {
                    if (Array.isArray(arr)) {
                        for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];
                        return arr2;
                    }
                }
                function _arrayWithHoles(arr) {
                    if (Array.isArray(arr)) return arr;
                }
                function _iterableToArray(iter) {
                    if (Symbol.iterator in Object(iter) || "[object Arguments]" === Object.prototype.toString.call(iter)) return Array.from(iter);
                }
                function _nonIterableSpread() {
                    throw new TypeError("Invalid attempt to spread non-iterable instance");
                }
                function _nonIterableRest() {
                    throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
                var _endianness;
                function endianness() {
                    if ("undefined" === typeof _endianness) {
                        var a = new ArrayBuffer(2);
                        var b = new Uint8Array(a);
                        var c = new Uint16Array(a);
                        b[0] = 1;
                        b[1] = 2;
                        if (258 === c[0]) _endianness = "BE"; else if (513 === c[0]) _endianness = "LE"; else throw new Error("unable to figure out endianess");
                    }
                    return _endianness;
                }
                function hostname() {
                    if ("undefined" !== typeof global$1.location) return global$1.location.hostname; else return "";
                }
                function loadavg() {
                    return [];
                }
                function uptime() {
                    return 0;
                }
                function freemem() {
                    return Number.MAX_VALUE;
                }
                function totalmem() {
                    return Number.MAX_VALUE;
                }
                function cpus() {
                    return [];
                }
                function type() {
                    return "Browser";
                }
                function release() {
                    if ("undefined" !== typeof global$1.navigator) return global$1.navigator.appVersion;
                    return "";
                }
                function networkInterfaces() {}
                function getNetworkInterfaces() {}
                function tmpDir() {
                    return "/tmp";
                }
                var tmpdir = tmpDir;
                var EOL = "\n";
                var os = {
                    EOL,
                    tmpdir,
                    tmpDir,
                    networkInterfaces,
                    getNetworkInterfaces,
                    release,
                    type,
                    cpus,
                    totalmem,
                    freemem,
                    uptime,
                    loadavg,
                    hostname,
                    endianness
                };
                var commonjsGlobal = "undefined" !== typeof globalThis ? globalThis : true ? window : 0;
                var FUNC_ERROR_TEXT = "Expected a function";
                var HASH_UNDEFINED = "__lodash_hash_undefined__";
                var INFINITY = 1 / 0;
                var funcTag = "[object Function]", genTag = "[object GeneratorFunction]", symbolTag = "[object Symbol]";
                var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, reLeadingDot = /^\./, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
                var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
                var reEscapeChar = /\\(\\)?/g;
                var reIsHostCtor = /^\[object .+?Constructor\]$/;
                var freeGlobal = "object" == typeof commonjsGlobal && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
                var freeSelf = "object" == typeof self && self && self.Object === Object && self;
                var root = freeGlobal || freeSelf || Function("return this")();
                function getValue(object, key) {
                    return null == object ? void 0 : object[key];
                }
                function isHostObject(value) {
                    var result = false;
                    if (null != value && "function" != typeof value.toString) try {
                        result = !!(value + "");
                    } catch (e) {}
                    return result;
                }
                var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
                var coreJsData = root["__core-js_shared__"];
                var maskSrcKey = function() {
                    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
                    return uid ? "Symbol(src)_1." + uid : "";
                }();
                var funcToString = funcProto.toString;
                var hasOwnProperty$1 = objectProto.hasOwnProperty;
                var objectToString$1 = objectProto.toString;
                var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty$1).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
                var Symbol$1 = root.Symbol, splice = arrayProto.splice;
                var Map = getNative(root, "Map"), nativeCreate = getNative(Object, "create");
                var symbolProto = Symbol$1 ? Symbol$1.prototype : void 0, symbolToString = symbolProto ? symbolProto.toString : void 0;
                function Hash(entries) {
                    var index = -1, length = entries ? entries.length : 0;
                    this.clear();
                    while (++index < length) {
                        var entry = entries[index];
                        this.set(entry[0], entry[1]);
                    }
                }
                function hashClear() {
                    this.__data__ = nativeCreate ? nativeCreate(null) : {};
                }
                function hashDelete(key) {
                    return this.has(key) && delete this.__data__[key];
                }
                function hashGet(key) {
                    var data = this.__data__;
                    if (nativeCreate) {
                        var result = data[key];
                        return result === HASH_UNDEFINED ? void 0 : result;
                    }
                    return hasOwnProperty$1.call(data, key) ? data[key] : void 0;
                }
                function hashHas(key) {
                    var data = this.__data__;
                    return nativeCreate ? void 0 !== data[key] : hasOwnProperty$1.call(data, key);
                }
                function hashSet(key, value) {
                    var data = this.__data__;
                    data[key] = nativeCreate && void 0 === value ? HASH_UNDEFINED : value;
                    return this;
                }
                Hash.prototype.clear = hashClear;
                Hash.prototype["delete"] = hashDelete;
                Hash.prototype.get = hashGet;
                Hash.prototype.has = hashHas;
                Hash.prototype.set = hashSet;
                function ListCache(entries) {
                    var index = -1, length = entries ? entries.length : 0;
                    this.clear();
                    while (++index < length) {
                        var entry = entries[index];
                        this.set(entry[0], entry[1]);
                    }
                }
                function listCacheClear() {
                    this.__data__ = [];
                }
                function listCacheDelete(key) {
                    var data = this.__data__, index = assocIndexOf(data, key);
                    if (index < 0) return false;
                    var lastIndex = data.length - 1;
                    if (index == lastIndex) data.pop(); else splice.call(data, index, 1);
                    return true;
                }
                function listCacheGet(key) {
                    var data = this.__data__, index = assocIndexOf(data, key);
                    return index < 0 ? void 0 : data[index][1];
                }
                function listCacheHas(key) {
                    return assocIndexOf(this.__data__, key) > -1;
                }
                function listCacheSet(key, value) {
                    var data = this.__data__, index = assocIndexOf(data, key);
                    if (index < 0) data.push([ key, value ]); else data[index][1] = value;
                    return this;
                }
                ListCache.prototype.clear = listCacheClear;
                ListCache.prototype["delete"] = listCacheDelete;
                ListCache.prototype.get = listCacheGet;
                ListCache.prototype.has = listCacheHas;
                ListCache.prototype.set = listCacheSet;
                function MapCache(entries) {
                    var index = -1, length = entries ? entries.length : 0;
                    this.clear();
                    while (++index < length) {
                        var entry = entries[index];
                        this.set(entry[0], entry[1]);
                    }
                }
                function mapCacheClear() {
                    this.__data__ = {
                        hash: new Hash,
                        map: new (Map || ListCache),
                        string: new Hash
                    };
                }
                function mapCacheDelete(key) {
                    return getMapData(this, key)["delete"](key);
                }
                function mapCacheGet(key) {
                    return getMapData(this, key).get(key);
                }
                function mapCacheHas(key) {
                    return getMapData(this, key).has(key);
                }
                function mapCacheSet(key, value) {
                    getMapData(this, key).set(key, value);
                    return this;
                }
                MapCache.prototype.clear = mapCacheClear;
                MapCache.prototype["delete"] = mapCacheDelete;
                MapCache.prototype.get = mapCacheGet;
                MapCache.prototype.has = mapCacheHas;
                MapCache.prototype.set = mapCacheSet;
                function assocIndexOf(array, key) {
                    var length = array.length;
                    while (length--) if (eq(array[length][0], key)) return length;
                    return -1;
                }
                function baseGet(object, path) {
                    path = isKey(path, object) ? [ path ] : castPath(path);
                    var index = 0, length = path.length;
                    while (null != object && index < length) object = object[toKey(path[index++])];
                    return index && index == length ? object : void 0;
                }
                function baseIsNative(value) {
                    if (!isObject$1(value) || isMasked(value)) return false;
                    var pattern = isFunction$1(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
                    return pattern.test(toSource(value));
                }
                function baseToString(value) {
                    if ("string" == typeof value) return value;
                    if (isSymbol(value)) return symbolToString ? symbolToString.call(value) : "";
                    var result = value + "";
                    return "0" == result && 1 / value == -INFINITY ? "-0" : result;
                }
                function castPath(value) {
                    return isArray$2(value) ? value : stringToPath(value);
                }
                function getMapData(map, key) {
                    var data = map.__data__;
                    return isKeyable(key) ? data["string" == typeof key ? "string" : "hash"] : data.map;
                }
                function getNative(object, key) {
                    var value = getValue(object, key);
                    return baseIsNative(value) ? value : void 0;
                }
                function isKey(value, object) {
                    if (isArray$2(value)) return false;
                    var type = typeof value;
                    if ("number" == type || "symbol" == type || "boolean" == type || null == value || isSymbol(value)) return true;
                    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || null != object && value in Object(object);
                }
                function isKeyable(value) {
                    var type = typeof value;
                    return "string" == type || "number" == type || "symbol" == type || "boolean" == type ? "__proto__" !== value : null === value;
                }
                function isMasked(func) {
                    return !!maskSrcKey && maskSrcKey in func;
                }
                var stringToPath = memoize((function(string) {
                    string = toString$1(string);
                    var result = [];
                    if (reLeadingDot.test(string)) result.push("");
                    string.replace(rePropName, (function(match, number, quote, string) {
                        result.push(quote ? string.replace(reEscapeChar, "$1") : number || match);
                    }));
                    return result;
                }));
                function toKey(value) {
                    if ("string" == typeof value || isSymbol(value)) return value;
                    var result = value + "";
                    return "0" == result && 1 / value == -INFINITY ? "-0" : result;
                }
                function toSource(func) {
                    if (null != func) {
                        try {
                            return funcToString.call(func);
                        } catch (e) {}
                        try {
                            return func + "";
                        } catch (e) {}
                    }
                    return "";
                }
                function memoize(func, resolver) {
                    if ("function" != typeof func || resolver && "function" != typeof resolver) throw new TypeError(FUNC_ERROR_TEXT);
                    var memoized = function() {
                        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
                        if (cache.has(key)) return cache.get(key);
                        var result = func.apply(this, args);
                        memoized.cache = cache.set(key, result);
                        return result;
                    };
                    memoized.cache = new (memoize.Cache || MapCache);
                    return memoized;
                }
                memoize.Cache = MapCache;
                function eq(value, other) {
                    return value === other || value !== value && other !== other;
                }
                var isArray$2 = Array.isArray;
                function isFunction$1(value) {
                    var tag = isObject$1(value) ? objectToString$1.call(value) : "";
                    return tag == funcTag || tag == genTag;
                }
                function isObject$1(value) {
                    var type = typeof value;
                    return !!value && ("object" == type || "function" == type);
                }
                function isObjectLike(value) {
                    return !!value && "object" == typeof value;
                }
                function isSymbol(value) {
                    return "symbol" == typeof value || isObjectLike(value) && objectToString$1.call(value) == symbolTag;
                }
                function toString$1(value) {
                    return null == value ? "" : baseToString(value);
                }
                function get(object, path, defaultValue) {
                    var result = null == object ? void 0 : baseGet(object, path);
                    return void 0 === result ? defaultValue : result;
                }
                var lodash_get = get;
                function getProp(obj, path, defaultValue) {
                    return void 0 === obj[path] ? defaultValue : obj[path];
                }
                function setProp(obj, path, value) {
                    var pathArray = Array.isArray(path) ? path : path.split(".");
                    var _pathArray = _toArray(pathArray), key = _pathArray[0], restPath = _pathArray.slice(1);
                    var newValue = pathArray.length > 1 ? setProp(obj[key] || {}, restPath, value) : value;
                    return Object.assign({}, obj, _defineProperty({}, key, newValue));
                }
                function unsetProp(obj, path) {
                    var pathArray = Array.isArray(path) ? path : path.split(".");
                    var _pathArray2 = _toArray(pathArray), key = _pathArray2[0], restPath = _pathArray2.slice(1);
                    if ("object" !== _typeof(obj[key])) return obj;
                    if (1 === pathArray.length) return Object.keys(obj).filter((function(prop) {
                        return prop !== key;
                    })).reduce((function(acc, prop) {
                        return Object.assign(acc, _defineProperty({}, prop, obj[prop]));
                    }), {});
                    return unsetProp(obj[key], restPath);
                }
                function flattenReducer(acc, arr) {
                    try {
                        acc.push.apply(acc, _toConsumableArray(arr));
                        return acc;
                    } catch (err) {
                        return acc.concat(arr);
                    }
                }
                function fastJoin(arr, separator) {
                    var isFirst = true;
                    return arr.reduce((function(acc, elem) {
                        if (null === elem || void 0 === elem) elem = "";
                        if (isFirst) {
                            isFirst = false;
                            return "".concat(elem);
                        }
                        return "".concat(acc).concat(separator).concat(elem);
                    }), "");
                }
                var utils = {
                    getProp,
                    setProp,
                    unsetProp,
                    fastJoin,
                    flattenReducer
                };
                var getProp$1 = utils.getProp, fastJoin$1 = utils.fastJoin, flattenReducer$1 = utils.flattenReducer;
                var JSON2CSVBase = function() {
                    function JSON2CSVBase(opts) {
                        _classCallCheck(this, JSON2CSVBase);
                        this.opts = this.preprocessOpts(opts);
                    }
                    _createClass(JSON2CSVBase, [ {
                        key: "preprocessOpts",
                        value: function(opts) {
                            var processedOpts = Object.assign({}, opts);
                            processedOpts.transforms = !Array.isArray(processedOpts.transforms) ? processedOpts.transforms ? [ processedOpts.transforms ] : [] : processedOpts.transforms;
                            processedOpts.delimiter = processedOpts.delimiter || ",";
                            processedOpts.eol = processedOpts.eol || os.EOL;
                            processedOpts.quote = "string" === typeof processedOpts.quote ? processedOpts.quote : '"';
                            processedOpts.escapedQuote = "string" === typeof processedOpts.escapedQuote ? processedOpts.escapedQuote : "".concat(processedOpts.quote).concat(processedOpts.quote);
                            processedOpts.header = false !== processedOpts.header;
                            processedOpts.includeEmptyRows = processedOpts.includeEmptyRows || false;
                            processedOpts.withBOM = processedOpts.withBOM || false;
                            return processedOpts;
                        }
                    }, {
                        key: "preprocessFieldsInfo",
                        value: function(fields) {
                            var _this = this;
                            return fields.map((function(fieldInfo) {
                                if ("string" === typeof fieldInfo) return {
                                    label: fieldInfo,
                                    value: fieldInfo.includes(".") || fieldInfo.includes("[") ? function(row) {
                                        return lodash_get(row, fieldInfo, _this.opts.defaultValue);
                                    } : function(row) {
                                        return getProp$1(row, fieldInfo, _this.opts.defaultValue);
                                    }
                                };
                                if ("object" === _typeof(fieldInfo)) {
                                    var defaultValue = "default" in fieldInfo ? fieldInfo.default : _this.opts.defaultValue;
                                    if ("string" === typeof fieldInfo.value) return {
                                        label: fieldInfo.label || fieldInfo.value,
                                        value: fieldInfo.value.includes(".") || fieldInfo.value.includes("[") ? function(row) {
                                            return lodash_get(row, fieldInfo.value, defaultValue);
                                        } : function(row) {
                                            return getProp$1(row, fieldInfo.value, defaultValue);
                                        }
                                    };
                                    if ("function" === typeof fieldInfo.value) {
                                        var label = fieldInfo.label || fieldInfo.value.name || "";
                                        var field = {
                                            label,
                                            default: defaultValue
                                        };
                                        return {
                                            label,
                                            value: function(row) {
                                                var value = fieldInfo.value(row, field);
                                                return null === value || void 0 === value ? defaultValue : value;
                                            }
                                        };
                                    }
                                }
                                throw new Error("Invalid field info option. " + JSON.stringify(fieldInfo));
                            }));
                        }
                    }, {
                        key: "getHeader",
                        value: function() {
                            var _this2 = this;
                            return fastJoin$1(this.opts.fields.map((function(fieldInfo) {
                                return _this2.processValue(fieldInfo.label);
                            })), this.opts.delimiter);
                        }
                    }, {
                        key: "preprocessRow",
                        value: function(row) {
                            return this.opts.transforms.reduce((function(rows, transform) {
                                return rows.map((function(row) {
                                    return transform(row);
                                })).reduce(flattenReducer$1, []);
                            }), [ row ]);
                        }
                    }, {
                        key: "processRow",
                        value: function(row) {
                            var _this3 = this;
                            if (!row) return;
                            var processedRow = this.opts.fields.map((function(fieldInfo) {
                                return _this3.processCell(row, fieldInfo);
                            }));
                            if (!this.opts.includeEmptyRows && processedRow.every((function(field) {
                                return void 0 === field;
                            }))) return;
                            return fastJoin$1(processedRow, this.opts.delimiter);
                        }
                    }, {
                        key: "processCell",
                        value: function(row, fieldInfo) {
                            return this.processValue(fieldInfo.value(row));
                        }
                    }, {
                        key: "processValue",
                        value: function(value) {
                            if (null === value || void 0 === value) return;
                            var valueType = _typeof(value);
                            if ("boolean" !== valueType && "number" !== valueType && "string" !== valueType) {
                                value = JSON.stringify(value);
                                if (void 0 === value) return;
                                if ('"' === value[0]) value = value.replace(/^"(.+)"$/, "$1");
                            }
                            if ("string" === typeof value) if (this.opts.excelStrings) {
                                if (value.includes(this.opts.quote)) value = value.replace(new RegExp(this.opts.quote, "g"), "".concat(this.opts.escapedQuote).concat(this.opts.escapedQuote));
                                value = '"=""'.concat(value, '"""');
                            } else {
                                if (value.includes(this.opts.quote)) value = value.replace(new RegExp(this.opts.quote, "g"), this.opts.escapedQuote);
                                value = "".concat(this.opts.quote).concat(value).concat(this.opts.quote);
                            }
                            return value;
                        }
                    } ]);
                    return JSON2CSVBase;
                }();
                var JSON2CSVBase_1 = JSON2CSVBase;
                var fastJoin$2 = utils.fastJoin, flattenReducer$2 = utils.flattenReducer;
                var JSON2CSVParser = function(_JSON2CSVBase) {
                    _inherits(JSON2CSVParser, _JSON2CSVBase);
                    function JSON2CSVParser(opts) {
                        var _this;
                        _classCallCheck(this, JSON2CSVParser);
                        _this = _possibleConstructorReturn(this, _getPrototypeOf(JSON2CSVParser).call(this, opts));
                        if (_this.opts.fields) _this.opts.fields = _this.preprocessFieldsInfo(_this.opts.fields);
                        return _this;
                    }
                    _createClass(JSON2CSVParser, [ {
                        key: "parse",
                        value: function(data) {
                            var processedData = this.preprocessData(data);
                            if (!this.opts.fields) {
                                this.opts.fields = processedData.reduce((function(fields, item) {
                                    Object.keys(item).forEach((function(field) {
                                        if (!fields.includes(field)) fields.push(field);
                                    }));
                                    return fields;
                                }), []);
                                this.opts.fields = this.preprocessFieldsInfo(this.opts.fields);
                            }
                            var header = this.opts.header ? this.getHeader() : "";
                            var rows = this.processData(processedData);
                            var csv = (this.opts.withBOM ? "\ufeff" : "") + header + (header && rows ? this.opts.eol : "") + rows;
                            return csv;
                        }
                    }, {
                        key: "preprocessData",
                        value: function(data) {
                            var _this2 = this;
                            var processedData = Array.isArray(data) ? data : [ data ];
                            if (!this.opts.fields && (0 === processedData.length || "object" !== _typeof(processedData[0]))) throw new Error('Data should not be empty or the "fields" option should be included');
                            if (0 === this.opts.transforms.length) return processedData;
                            return processedData.map((function(row) {
                                return _this2.preprocessRow(row);
                            })).reduce(flattenReducer$2, []);
                        }
                    }, {
                        key: "processData",
                        value: function(data) {
                            var _this3 = this;
                            return fastJoin$2(data.map((function(row) {
                                return _this3.processRow(row);
                            })).filter((function(row) {
                                return row;
                            })), this.opts.eol);
                        }
                    } ]);
                    return JSON2CSVParser;
                }(JSON2CSVBase_1);
                var JSON2CSVParser_1 = JSON2CSVParser;
                var C = {};
                var LEFT_BRACE = C.LEFT_BRACE = 1;
                var RIGHT_BRACE = C.RIGHT_BRACE = 2;
                var LEFT_BRACKET = C.LEFT_BRACKET = 3;
                var RIGHT_BRACKET = C.RIGHT_BRACKET = 4;
                var COLON = C.COLON = 5;
                var COMMA = C.COMMA = 6;
                var TRUE = C.TRUE = 7;
                var FALSE = C.FALSE = 8;
                var NULL = C.NULL = 9;
                var STRING = C.STRING = 10;
                var NUMBER = C.NUMBER = 11;
                var START = C.START = 17;
                var STOP = C.STOP = 18;
                var TRUE1 = C.TRUE1 = 33;
                var TRUE2 = C.TRUE2 = 34;
                var TRUE3 = C.TRUE3 = 35;
                var FALSE1 = C.FALSE1 = 49;
                var FALSE2 = C.FALSE2 = 50;
                var FALSE3 = C.FALSE3 = 51;
                var FALSE4 = C.FALSE4 = 52;
                var NULL1 = C.NULL1 = 65;
                var NULL2 = C.NULL2 = 66;
                var NULL3 = C.NULL3 = 67;
                var NUMBER1 = C.NUMBER1 = 81;
                var NUMBER3 = C.NUMBER3 = 83;
                var STRING1 = C.STRING1 = 97;
                var STRING2 = C.STRING2 = 98;
                var STRING3 = C.STRING3 = 99;
                var STRING4 = C.STRING4 = 100;
                var STRING5 = C.STRING5 = 101;
                var STRING6 = C.STRING6 = 102;
                var VALUE = C.VALUE = 113;
                var KEY = C.KEY = 114;
                var OBJECT = C.OBJECT = 129;
                var ARRAY = C.ARRAY = 130;
                var BACK_SLASH = "\\".charCodeAt(0);
                var FORWARD_SLASH = "/".charCodeAt(0);
                var BACKSPACE = "\b".charCodeAt(0);
                var FORM_FEED = "\f".charCodeAt(0);
                var NEWLINE = "\n".charCodeAt(0);
                var CARRIAGE_RETURN = "\r".charCodeAt(0);
                var TAB = "\t".charCodeAt(0);
                var STRING_BUFFER_SIZE = 64 * 1024;
                function Parser() {
                    this.tState = START;
                    this.value = void 0;
                    this.string = void 0;
                    this.stringBuffer = Buffer.alloc ? Buffer.alloc(STRING_BUFFER_SIZE) : new Buffer(STRING_BUFFER_SIZE);
                    this.stringBufferOffset = 0;
                    this.unicode = void 0;
                    this.highSurrogate = void 0;
                    this.key = void 0;
                    this.mode = void 0;
                    this.stack = [];
                    this.state = VALUE;
                    this.bytes_remaining = 0;
                    this.bytes_in_sequence = 0;
                    this.temp_buffs = {
                        2: new Buffer(2),
                        3: new Buffer(3),
                        4: new Buffer(4)
                    };
                    this.offset = -1;
                }
                Parser.toknam = function(code) {
                    var keys = Object.keys(C);
                    for (var i = 0, l = keys.length; i < l; i++) {
                        var key = keys[i];
                        if (C[key] === code) return key;
                    }
                    return code && "0x" + code.toString(16);
                };
                var proto = Parser.prototype;
                proto.onError = function(err) {
                    throw err;
                };
                proto.charError = function(buffer, i) {
                    this.tState = STOP;
                    this.onError(new Error("Unexpected " + JSON.stringify(String.fromCharCode(buffer[i])) + " at position " + i + " in state " + Parser.toknam(this.tState)));
                };
                proto.appendStringChar = function(char) {
                    if (this.stringBufferOffset >= STRING_BUFFER_SIZE) {
                        this.string += this.stringBuffer.toString("utf8");
                        this.stringBufferOffset = 0;
                    }
                    this.stringBuffer[this.stringBufferOffset++] = char;
                };
                proto.appendStringBuf = function(buf, start, end) {
                    var size = buf.length;
                    if ("number" === typeof start) if ("number" === typeof end) if (end < 0) size = buf.length - start + end; else size = end - start; else size = buf.length - start;
                    if (size < 0) size = 0;
                    if (this.stringBufferOffset + size > STRING_BUFFER_SIZE) {
                        this.string += this.stringBuffer.toString("utf8", 0, this.stringBufferOffset);
                        this.stringBufferOffset = 0;
                    }
                    buf.copy(this.stringBuffer, this.stringBufferOffset, start, end);
                    this.stringBufferOffset += size;
                };
                proto.write = function(buffer) {
                    if ("string" === typeof buffer) buffer = new Buffer(buffer);
                    var n;
                    for (var i = 0, l = buffer.length; i < l; i++) if (this.tState === START) {
                        n = buffer[i];
                        this.offset++;
                        if (123 === n) this.onToken(LEFT_BRACE, "{"); else if (125 === n) this.onToken(RIGHT_BRACE, "}"); else if (91 === n) this.onToken(LEFT_BRACKET, "["); else if (93 === n) this.onToken(RIGHT_BRACKET, "]"); else if (58 === n) this.onToken(COLON, ":"); else if (44 === n) this.onToken(COMMA, ","); else if (116 === n) this.tState = TRUE1; else if (102 === n) this.tState = FALSE1; else if (110 === n) this.tState = NULL1; else if (34 === n) {
                            this.string = "";
                            this.stringBufferOffset = 0;
                            this.tState = STRING1;
                        } else if (45 === n) {
                            this.string = "-";
                            this.tState = NUMBER1;
                        } else if (n >= 48 && n < 64) {
                            this.string = String.fromCharCode(n);
                            this.tState = NUMBER3;
                        } else if (32 === n || 9 === n || 10 === n || 13 === n) ; else return this.charError(buffer, i);
                    } else if (this.tState === STRING1) {
                        n = buffer[i];
                        if (this.bytes_remaining > 0) {
                            for (var j = 0; j < this.bytes_remaining; j++) this.temp_buffs[this.bytes_in_sequence][this.bytes_in_sequence - this.bytes_remaining + j] = buffer[j];
                            this.appendStringBuf(this.temp_buffs[this.bytes_in_sequence]);
                            this.bytes_in_sequence = this.bytes_remaining = 0;
                            i = i + j - 1;
                        } else if (0 === this.bytes_remaining && n >= 128) {
                            if (n <= 193 || n > 244) return this.onError(new Error("Invalid UTF-8 character at position " + i + " in state " + Parser.toknam(this.tState)));
                            if (n >= 194 && n <= 223) this.bytes_in_sequence = 2;
                            if (n >= 224 && n <= 239) this.bytes_in_sequence = 3;
                            if (n >= 240 && n <= 244) this.bytes_in_sequence = 4;
                            if (this.bytes_in_sequence + i > buffer.length) {
                                for (var k = 0; k <= buffer.length - 1 - i; k++) this.temp_buffs[this.bytes_in_sequence][k] = buffer[i + k];
                                this.bytes_remaining = i + this.bytes_in_sequence - buffer.length;
                                i = buffer.length - 1;
                            } else {
                                this.appendStringBuf(buffer, i, i + this.bytes_in_sequence);
                                i = i + this.bytes_in_sequence - 1;
                            }
                        } else if (34 === n) {
                            this.tState = START;
                            this.string += this.stringBuffer.toString("utf8", 0, this.stringBufferOffset);
                            this.stringBufferOffset = 0;
                            this.onToken(STRING, this.string);
                            this.offset += Buffer.byteLength(this.string, "utf8") + 1;
                            this.string = void 0;
                        } else if (92 === n) this.tState = STRING2; else if (n >= 32) this.appendStringChar(n); else return this.charError(buffer, i);
                    } else if (this.tState === STRING2) {
                        n = buffer[i];
                        if (34 === n) {
                            this.appendStringChar(n);
                            this.tState = STRING1;
                        } else if (92 === n) {
                            this.appendStringChar(BACK_SLASH);
                            this.tState = STRING1;
                        } else if (47 === n) {
                            this.appendStringChar(FORWARD_SLASH);
                            this.tState = STRING1;
                        } else if (98 === n) {
                            this.appendStringChar(BACKSPACE);
                            this.tState = STRING1;
                        } else if (102 === n) {
                            this.appendStringChar(FORM_FEED);
                            this.tState = STRING1;
                        } else if (110 === n) {
                            this.appendStringChar(NEWLINE);
                            this.tState = STRING1;
                        } else if (114 === n) {
                            this.appendStringChar(CARRIAGE_RETURN);
                            this.tState = STRING1;
                        } else if (116 === n) {
                            this.appendStringChar(TAB);
                            this.tState = STRING1;
                        } else if (117 === n) {
                            this.unicode = "";
                            this.tState = STRING3;
                        } else return this.charError(buffer, i);
                    } else if (this.tState === STRING3 || this.tState === STRING4 || this.tState === STRING5 || this.tState === STRING6) {
                        n = buffer[i];
                        if (n >= 48 && n < 64 || n > 64 && n <= 70 || n > 96 && n <= 102) {
                            this.unicode += String.fromCharCode(n);
                            if (this.tState++ === STRING6) {
                                var intVal = parseInt(this.unicode, 16);
                                this.unicode = void 0;
                                if (void 0 !== this.highSurrogate && intVal >= 56320 && intVal < 57343 + 1) {
                                    this.appendStringBuf(new Buffer(String.fromCharCode(this.highSurrogate, intVal)));
                                    this.highSurrogate = void 0;
                                } else if (void 0 === this.highSurrogate && intVal >= 55296 && intVal < 56319 + 1) this.highSurrogate = intVal; else {
                                    if (void 0 !== this.highSurrogate) {
                                        this.appendStringBuf(new Buffer(String.fromCharCode(this.highSurrogate)));
                                        this.highSurrogate = void 0;
                                    }
                                    this.appendStringBuf(new Buffer(String.fromCharCode(intVal)));
                                }
                                this.tState = STRING1;
                            }
                        } else return this.charError(buffer, i);
                    } else if (this.tState === NUMBER1 || this.tState === NUMBER3) {
                        n = buffer[i];
                        switch (n) {
                          case 48:
                          case 49:
                          case 50:
                          case 51:
                          case 52:
                          case 53:
                          case 54:
                          case 55:
                          case 56:
                          case 57:
                          case 46:
                          case 101:
                          case 69:
                          case 43:
                          case 45:
                            this.string += String.fromCharCode(n);
                            this.tState = NUMBER3;
                            break;

                          default:
                            this.tState = START;
                            var result = Number(this.string);
                            if (isNaN(result)) return this.charError(buffer, i);
                            if (this.string.match(/[0-9]+/) == this.string && result.toString() != this.string) this.onToken(STRING, this.string); else this.onToken(NUMBER, result);
                            this.offset += this.string.length - 1;
                            this.string = void 0;
                            i--;
                            break;
                        }
                    } else if (this.tState === TRUE1) if (114 === buffer[i]) this.tState = TRUE2; else return this.charError(buffer, i); else if (this.tState === TRUE2) if (117 === buffer[i]) this.tState = TRUE3; else return this.charError(buffer, i); else if (this.tState === TRUE3) if (101 === buffer[i]) {
                        this.tState = START;
                        this.onToken(TRUE, true);
                        this.offset += 3;
                    } else return this.charError(buffer, i); else if (this.tState === FALSE1) if (97 === buffer[i]) this.tState = FALSE2; else return this.charError(buffer, i); else if (this.tState === FALSE2) if (108 === buffer[i]) this.tState = FALSE3; else return this.charError(buffer, i); else if (this.tState === FALSE3) if (115 === buffer[i]) this.tState = FALSE4; else return this.charError(buffer, i); else if (this.tState === FALSE4) if (101 === buffer[i]) {
                        this.tState = START;
                        this.onToken(FALSE, false);
                        this.offset += 4;
                    } else return this.charError(buffer, i); else if (this.tState === NULL1) if (117 === buffer[i]) this.tState = NULL2; else return this.charError(buffer, i); else if (this.tState === NULL2) if (108 === buffer[i]) this.tState = NULL3; else return this.charError(buffer, i); else if (this.tState === NULL3) if (108 === buffer[i]) {
                        this.tState = START;
                        this.onToken(NULL, null);
                        this.offset += 3;
                    } else return this.charError(buffer, i);
                };
                proto.onToken = function(token, value) {};
                proto.parseError = function(token, value) {
                    this.tState = STOP;
                    this.onError(new Error("Unexpected " + Parser.toknam(token) + (value ? "(" + JSON.stringify(value) + ")" : "") + " in state " + Parser.toknam(this.state)));
                };
                proto.push = function() {
                    this.stack.push({
                        value: this.value,
                        key: this.key,
                        mode: this.mode
                    });
                };
                proto.pop = function() {
                    var value = this.value;
                    var parent = this.stack.pop();
                    this.value = parent.value;
                    this.key = parent.key;
                    this.mode = parent.mode;
                    this.emit(value);
                    if (!this.mode) this.state = VALUE;
                };
                proto.emit = function(value) {
                    if (this.mode) this.state = COMMA;
                    this.onValue(value);
                };
                proto.onValue = function(value) {};
                proto.onToken = function(token, value) {
                    if (this.state === VALUE) if (token === STRING || token === NUMBER || token === TRUE || token === FALSE || token === NULL) {
                        if (this.value) this.value[this.key] = value;
                        this.emit(value);
                    } else if (token === LEFT_BRACE) {
                        this.push();
                        if (this.value) this.value = this.value[this.key] = {}; else this.value = {};
                        this.key = void 0;
                        this.state = KEY;
                        this.mode = OBJECT;
                    } else if (token === LEFT_BRACKET) {
                        this.push();
                        if (this.value) this.value = this.value[this.key] = []; else this.value = [];
                        this.key = 0;
                        this.mode = ARRAY;
                        this.state = VALUE;
                    } else if (token === RIGHT_BRACE) if (this.mode === OBJECT) this.pop(); else return this.parseError(token, value); else if (token === RIGHT_BRACKET) if (this.mode === ARRAY) this.pop(); else return this.parseError(token, value); else return this.parseError(token, value); else if (this.state === KEY) if (token === STRING) {
                        this.key = value;
                        this.state = COLON;
                    } else if (token === RIGHT_BRACE) this.pop(); else return this.parseError(token, value); else if (this.state === COLON) if (token === COLON) this.state = VALUE; else return this.parseError(token, value); else if (this.state === COMMA) if (token === COMMA) {
                        if (this.mode === ARRAY) {
                            this.key++;
                            this.state = VALUE;
                        } else if (this.mode === OBJECT) this.state = KEY;
                    } else if (token === RIGHT_BRACKET && this.mode === ARRAY || token === RIGHT_BRACE && this.mode === OBJECT) this.pop(); else return this.parseError(token, value); else return this.parseError(token, value);
                };
                Parser.C = C;
                var jsonparse = Parser;
                var Transform$1 = Stream.Transform;
                var JSON2CSVTransform = function(_Transform) {
                    _inherits(JSON2CSVTransform, _Transform);
                    function JSON2CSVTransform(opts, transformOpts) {
                        var _this;
                        _classCallCheck(this, JSON2CSVTransform);
                        _this = _possibleConstructorReturn(this, _getPrototypeOf(JSON2CSVTransform).call(this, transformOpts));
                        Object.getOwnPropertyNames(JSON2CSVBase_1.prototype).forEach((function(key) {
                            return _this[key] = JSON2CSVBase_1.prototype[key];
                        }));
                        _this.opts = _this.preprocessOpts(opts);
                        _this._data = "";
                        _this._hasWritten = false;
                        if (_this._readableState.objectMode) _this.initObjectModeParse(); else if (_this.opts.ndjson) _this.initNDJSONParse(); else _this.initJSONParser();
                        if (_this.opts.withBOM) _this.push("\ufeff");
                        if (_this.opts.fields) {
                            _this.opts.fields = _this.preprocessFieldsInfo(_this.opts.fields);
                            _this.pushHeader();
                        }
                        return _this;
                    }
                    _createClass(JSON2CSVTransform, [ {
                        key: "initObjectModeParse",
                        value: function() {
                            var transform = this;
                            this.parser = {
                                write: function(line) {
                                    transform.pushLine(line);
                                },
                                getPendingData: function() {
                                    return;
                                }
                            };
                        }
                    }, {
                        key: "initNDJSONParse",
                        value: function() {
                            var transform = this;
                            this.parser = {
                                _data: "",
                                write: function(chunk) {
                                    this._data += chunk.toString();
                                    var lines = this._data.split("\n").map((function(line) {
                                        return line.trim();
                                    })).filter((function(line) {
                                        return "" !== line;
                                    }));
                                    var pendingData = false;
                                    lines.forEach((function(line, i) {
                                        try {
                                            transform.pushLine(JSON.parse(line));
                                        } catch (e) {
                                            if (i === lines.length - 1) pendingData = true; else {
                                                e.message = "Invalid JSON (".concat(line, ")");
                                                transform.emit("error", e);
                                            }
                                        }
                                    }));
                                    this._data = pendingData ? this._data.slice(this._data.lastIndexOf("\n")) : "";
                                },
                                getPendingData: function() {
                                    return this._data;
                                }
                            };
                        }
                    }, {
                        key: "initJSONParser",
                        value: function() {
                            var transform = this;
                            this.parser = new jsonparse;
                            this.parser.onValue = function(value) {
                                if (this.stack.length !== this.depthToEmit) return;
                                transform.pushLine(value);
                            };
                            this.parser._onToken = this.parser.onToken;
                            this.parser.onToken = function(token, value) {
                                transform.parser._onToken(token, value);
                                if (0 === this.stack.length && !transform.opts.fields && this.mode !== jsonparse.C.ARRAY && this.mode !== jsonparse.C.OBJECT) this.onError(new Error('Data should not be empty or the "fields" option should be included'));
                                if (1 === this.stack.length) {
                                    if (void 0 === this.depthToEmit) this.depthToEmit = this.mode === jsonparse.C.ARRAY ? 1 : 0;
                                    if (0 !== this.depthToEmit && 1 === this.stack.length) this.value = void 0;
                                }
                            };
                            this.parser.getPendingData = function() {
                                return this.value;
                            };
                            this.parser.onError = function(err) {
                                if (err.message.includes("Unexpected")) err.message = "Invalid JSON (".concat(err.message, ")");
                                transform.emit("error", err);
                            };
                        }
                    }, {
                        key: "_transform",
                        value: function(chunk, encoding, done) {
                            this.parser.write(chunk);
                            done();
                        }
                    }, {
                        key: "_flush",
                        value: function(done) {
                            if (this.parser.getPendingData()) done(new Error("Invalid data received from stdin", this.parser.getPendingData()));
                            done();
                        }
                    }, {
                        key: "pushHeader",
                        value: function() {
                            if (this.opts.header) {
                                var header = this.getHeader();
                                this.emit("header", header);
                                this.push(header);
                                this._hasWritten = true;
                            }
                        }
                    }, {
                        key: "pushLine",
                        value: function(data) {
                            var _this2 = this;
                            var processedData = this.preprocessRow(data);
                            if (!this._hasWritten) {
                                this.opts.fields = this.opts.fields || this.preprocessFieldsInfo(Object.keys(processedData[0]));
                                this.pushHeader();
                            }
                            processedData.forEach((function(row) {
                                var line = _this2.processRow(row, _this2.opts);
                                if (void 0 === line) return;
                                _this2.emit("line", line);
                                _this2.push(_this2._hasWritten ? _this2.opts.eol + line : line);
                                _this2._hasWritten = true;
                            }));
                        }
                    } ]);
                    return JSON2CSVTransform;
                }(Transform$1);
                var JSON2CSVTransform_1 = JSON2CSVTransform;
                var Transform$2 = Stream.Transform;
                var fastJoin$3 = utils.fastJoin;
                var JSON2CSVAsyncParser = function() {
                    function JSON2CSVAsyncParser(opts, transformOpts) {
                        _classCallCheck(this, JSON2CSVAsyncParser);
                        this.input = new Transform$2(transformOpts);
                        this.input._read = function() {};
                        this.transform = new JSON2CSVTransform_1(opts, transformOpts);
                        this.processor = this.input.pipe(this.transform);
                    }
                    _createClass(JSON2CSVAsyncParser, [ {
                        key: "fromInput",
                        value: function(input) {
                            if (this._input) throw new Error("Async parser already has an input.");
                            this._input = input;
                            this.input = this._input.pipe(this.processor);
                            return this;
                        }
                    }, {
                        key: "throughTransform",
                        value: function(transform) {
                            if (this._output) throw new Error("Can't add transforms once an output has been added.");
                            this.processor = this.processor.pipe(transform);
                            return this;
                        }
                    }, {
                        key: "toOutput",
                        value: function(output) {
                            if (this._output) throw new Error("Async parser already has an output.");
                            this._output = output;
                            this.processor = this.processor.pipe(output);
                            return this;
                        }
                    }, {
                        key: "promise",
                        value: function() {
                            var _this = this;
                            var returnCSV = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : true;
                            return new Promise((function(resolve, reject) {
                                if (!returnCSV) {
                                    _this.processor.on("finish", (function() {
                                        return resolve();
                                    })).on("error", (function(err) {
                                        return reject(err);
                                    }));
                                    return;
                                }
                                var csvBuffer = [];
                                _this.processor.on("data", (function(chunk) {
                                    return csvBuffer.push(chunk.toString());
                                })).on("finish", (function() {
                                    return resolve(fastJoin$3(csvBuffer, ""));
                                })).on("error", (function(err) {
                                    return reject(err);
                                }));
                            }));
                        }
                    } ]);
                    return JSON2CSVAsyncParser;
                }();
                var JSON2CSVAsyncParser_1 = JSON2CSVAsyncParser;
                function flatten() {
                    var _ref = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, _ref$objects = _ref.objects, objects = void 0 === _ref$objects ? true : _ref$objects, _ref$arrays = _ref.arrays, arrays = void 0 === _ref$arrays ? false : _ref$arrays, _ref$separator = _ref.separator, separator = void 0 === _ref$separator ? "." : _ref$separator;
                    function step(obj, flatDataRow, currentPath) {
                        Object.keys(obj).forEach((function(key) {
                            var newPath = currentPath ? "".concat(currentPath).concat(separator).concat(key) : key;
                            var value = obj[key];
                            if (objects && "object" === _typeof(value) && null !== value && !Array.isArray(value) && "[object Function]" !== Object.prototype.toString.call(value.toJSON) && Object.keys(value).length) {
                                step(value, flatDataRow, newPath);
                                return;
                            }
                            if (arrays && Array.isArray(value)) {
                                step(value, flatDataRow, newPath);
                                return;
                            }
                            flatDataRow[newPath] = value;
                        }));
                        return flatDataRow;
                    }
                    return function(dataRow) {
                        return step(dataRow, {});
                    };
                }
                var flatten_1 = flatten;
                var setProp$1 = utils.setProp, unsetProp$1 = utils.unsetProp, flattenReducer$3 = utils.flattenReducer;
                function getUnwindablePaths(obj, currentPath) {
                    return Object.keys(obj).reduce((function(unwindablePaths, key) {
                        var newPath = currentPath ? "".concat(currentPath, ".").concat(key) : key;
                        var value = obj[key];
                        if ("object" === _typeof(value) && null !== value && !Array.isArray(value) && "[object Function]" !== Object.prototype.toString.call(value.toJSON) && Object.keys(value).length) unwindablePaths = unwindablePaths.concat(getUnwindablePaths(value, newPath)); else if (Array.isArray(value)) {
                            unwindablePaths.push(newPath);
                            unwindablePaths = unwindablePaths.concat(value.map((function(arrObj) {
                                return getUnwindablePaths(arrObj, newPath);
                            })).reduce(flattenReducer$3, []).filter((function(item, index, arr) {
                                return arr.indexOf(item) !== index;
                            })));
                        }
                        return unwindablePaths;
                    }), []);
                }
                function unwind() {
                    var _ref = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, _ref$paths = _ref.paths, paths = void 0 === _ref$paths ? void 0 : _ref$paths, _ref$blankOut = _ref.blankOut, blankOut = void 0 === _ref$blankOut ? false : _ref$blankOut;
                    function unwindReducer(rows, unwindPath) {
                        return rows.map((function(row) {
                            var unwindArray = lodash_get(row, unwindPath);
                            if (!Array.isArray(unwindArray)) return row;
                            if (!unwindArray.length) return unsetProp$1(row, unwindPath);
                            return unwindArray.map((function(unwindRow, index) {
                                var clonedRow = blankOut && index > 0 ? {} : row;
                                return setProp$1(clonedRow, unwindPath, unwindRow);
                            }));
                        })).reduce(flattenReducer$3, []);
                    }
                    paths = Array.isArray(paths) ? paths : paths ? [ paths ] : void 0;
                    return function(dataRow) {
                        return (paths || getUnwindablePaths(dataRow)).reduce(unwindReducer, [ dataRow ]);
                    };
                }
                var unwind_1 = unwind;
                var Readable$1 = Stream.Readable;
                var Parser$1 = JSON2CSVParser_1;
                var AsyncParser = JSON2CSVAsyncParser_1;
                var Transform$3 = JSON2CSVTransform_1;
                var parse = function(data, opts) {
                    return new JSON2CSVParser_1(opts).parse(data);
                };
                var parseAsync = function(data, opts, transformOpts) {
                    try {
                        if (!(data instanceof Readable$1)) transformOpts = Object.assign({}, transformOpts, {
                            objectMode: true
                        });
                        var asyncParser = new JSON2CSVAsyncParser_1(opts, transformOpts);
                        var promise = asyncParser.promise();
                        if (Array.isArray(data)) {
                            data.forEach((function(item) {
                                return asyncParser.input.push(item);
                            }));
                            asyncParser.input.push(null);
                        } else if (data instanceof Readable$1) asyncParser.fromInput(data); else {
                            asyncParser.input.push(data);
                            asyncParser.input.push(null);
                        }
                        return promise;
                    } catch (err) {
                        return Promise.reject(err);
                    }
                };
                var transforms = {
                    flatten: flatten_1,
                    unwind: unwind_1
                };
                var json2csv = {
                    Parser: Parser$1,
                    AsyncParser,
                    Transform: Transform$3,
                    parse,
                    parseAsync,
                    transforms
                };
                exports.AsyncParser = AsyncParser;
                exports.Parser = Parser$1;
                exports.Transform = Transform$3;
                exports.default = json2csv;
                exports.parse = parse;
                exports.parseAsync = parseAsync;
                exports.transforms = transforms;
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
            }));
        },
        1535: (__unused_webpack_module, exports, __webpack_require__) => {
            "use strict";
            var l = __webpack_require__(2525), n = "function" === typeof Symbol && Symbol.for, p = n ? Symbol.for("react.element") : 60103, q = n ? Symbol.for("react.portal") : 60106, r = n ? Symbol.for("react.fragment") : 60107, t = n ? Symbol.for("react.strict_mode") : 60108, u = n ? Symbol.for("react.profiler") : 60114, v = n ? Symbol.for("react.provider") : 60109, w = n ? Symbol.for("react.context") : 60110, x = n ? Symbol.for("react.forward_ref") : 60112, y = n ? Symbol.for("react.suspense") : 60113, z = n ? Symbol.for("react.memo") : 60115, A = n ? Symbol.for("react.lazy") : 60116, B = "function" === typeof Symbol && Symbol.iterator;
            function C(a) {
                for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) b += "&args[]=" + encodeURIComponent(arguments[c]);
                return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
            }
            var D = {
                isMounted: function() {
                    return !1;
                },
                enqueueForceUpdate: function() {},
                enqueueReplaceState: function() {},
                enqueueSetState: function() {}
            }, E = {};
            function F(a, b, c) {
                this.props = a;
                this.context = b;
                this.refs = E;
                this.updater = c || D;
            }
            F.prototype.isReactComponent = {};
            F.prototype.setState = function(a, b) {
                if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error(C(85));
                this.updater.enqueueSetState(this, a, b, "setState");
            };
            F.prototype.forceUpdate = function(a) {
                this.updater.enqueueForceUpdate(this, a, "forceUpdate");
            };
            function G() {}
            G.prototype = F.prototype;
            function H(a, b, c) {
                this.props = a;
                this.context = b;
                this.refs = E;
                this.updater = c || D;
            }
            var I = H.prototype = new G;
            I.constructor = H;
            l(I, F.prototype);
            I.isPureReactComponent = !0;
            var J = {
                current: null
            }, K = Object.prototype.hasOwnProperty, L = {
                key: !0,
                ref: !0,
                __self: !0,
                __source: !0
            };
            function M(a, b, c) {
                var e, d = {}, g = null, k = null;
                if (null != b) for (e in void 0 !== b.ref && (k = b.ref), void 0 !== b.key && (g = "" + b.key), 
                b) K.call(b, e) && !L.hasOwnProperty(e) && (d[e] = b[e]);
                var f = arguments.length - 2;
                if (1 === f) d.children = c; else if (1 < f) {
                    for (var h = Array(f), m = 0; m < f; m++) h[m] = arguments[m + 2];
                    d.children = h;
                }
                if (a && a.defaultProps) for (e in f = a.defaultProps, f) void 0 === d[e] && (d[e] = f[e]);
                return {
                    $$typeof: p,
                    type: a,
                    key: g,
                    ref: k,
                    props: d,
                    _owner: J.current
                };
            }
            function N(a, b) {
                return {
                    $$typeof: p,
                    type: a.type,
                    key: b,
                    ref: a.ref,
                    props: a.props,
                    _owner: a._owner
                };
            }
            function O(a) {
                return "object" === typeof a && null !== a && a.$$typeof === p;
            }
            function escape(a) {
                var b = {
                    "=": "=0",
                    ":": "=2"
                };
                return "$" + ("" + a).replace(/[=:]/g, (function(a) {
                    return b[a];
                }));
            }
            var P = /\/+/g, Q = [];
            function R(a, b, c, e) {
                if (Q.length) {
                    var d = Q.pop();
                    d.result = a;
                    d.keyPrefix = b;
                    d.func = c;
                    d.context = e;
                    d.count = 0;
                    return d;
                }
                return {
                    result: a,
                    keyPrefix: b,
                    func: c,
                    context: e,
                    count: 0
                };
            }
            function S(a) {
                a.result = null;
                a.keyPrefix = null;
                a.func = null;
                a.context = null;
                a.count = 0;
                10 > Q.length && Q.push(a);
            }
            function T(a, b, c, e) {
                var d = typeof a;
                if ("undefined" === d || "boolean" === d) a = null;
                var g = !1;
                if (null === a) g = !0; else switch (d) {
                  case "string":
                  case "number":
                    g = !0;
                    break;

                  case "object":
                    switch (a.$$typeof) {
                      case p:
                      case q:
                        g = !0;
                    }
                }
                if (g) return c(e, a, "" === b ? "." + U(a, 0) : b), 1;
                g = 0;
                b = "" === b ? "." : b + ":";
                if (Array.isArray(a)) for (var k = 0; k < a.length; k++) {
                    d = a[k];
                    var f = b + U(d, k);
                    g += T(d, f, c, e);
                } else if (null === a || "object" !== typeof a ? f = null : (f = B && a[B] || a["@@iterator"], 
                f = "function" === typeof f ? f : null), "function" === typeof f) for (a = f.call(a), 
                k = 0; !(d = a.next()).done; ) d = d.value, f = b + U(d, k++), g += T(d, f, c, e); else if ("object" === d) throw c = "" + a, 
                Error(C(31, "[object Object]" === c ? "object with keys {" + Object.keys(a).join(", ") + "}" : c, ""));
                return g;
            }
            function V(a, b, c) {
                return null == a ? 0 : T(a, "", b, c);
            }
            function U(a, b) {
                return "object" === typeof a && null !== a && null != a.key ? escape(a.key) : b.toString(36);
            }
            function W(a, b) {
                a.func.call(a.context, b, a.count++);
            }
            function aa(a, b, c) {
                var e = a.result, d = a.keyPrefix;
                a = a.func.call(a.context, b, a.count++);
                Array.isArray(a) ? X(a, e, c, (function(a) {
                    return a;
                })) : null != a && (O(a) && (a = N(a, d + (!a.key || b && b.key === a.key ? "" : ("" + a.key).replace(P, "$&/") + "/") + c)), 
                e.push(a));
            }
            function X(a, b, c, e, d) {
                var g = "";
                null != c && (g = ("" + c).replace(P, "$&/") + "/");
                b = R(b, g, e, d);
                V(a, aa, b);
                S(b);
            }
            var Y = {
                current: null
            };
            function Z() {
                var a = Y.current;
                if (null === a) throw Error(C(321));
                return a;
            }
            var ba = {
                ReactCurrentDispatcher: Y,
                ReactCurrentBatchConfig: {
                    suspense: null
                },
                ReactCurrentOwner: J,
                IsSomeRendererActing: {
                    current: !1
                },
                assign: l
            };
            ({
                map: function(a, b, c) {
                    if (null == a) return a;
                    var e = [];
                    X(a, e, null, b, c);
                    return e;
                },
                forEach: function(a, b, c) {
                    if (null == a) return a;
                    b = R(null, null, b, c);
                    V(a, W, b);
                    S(b);
                },
                count: function(a) {
                    return V(a, (function() {
                        return null;
                    }), null);
                },
                toArray: function(a) {
                    var b = [];
                    X(a, b, null, (function(a) {
                        return a;
                    }));
                    return b;
                },
                only: function(a) {
                    if (!O(a)) throw Error(C(143));
                    return a;
                }
            });
            F;
            r;
            u;
            H;
            t;
            y;
            ba;
            (function(a, b, c) {
                if (null === a || void 0 === a) throw Error(C(267, a));
                var e = l({}, a.props), d = a.key, g = a.ref, k = a._owner;
                if (null != b) {
                    void 0 !== b.ref && (g = b.ref, k = J.current);
                    void 0 !== b.key && (d = "" + b.key);
                    if (a.type && a.type.defaultProps) var f = a.type.defaultProps;
                    for (h in b) K.call(b, h) && !L.hasOwnProperty(h) && (e[h] = void 0 === b[h] && void 0 !== f ? f[h] : b[h]);
                }
                var h = arguments.length - 2;
                if (1 === h) e.children = c; else if (1 < h) {
                    f = Array(h);
                    for (var m = 0; m < h; m++) f[m] = arguments[m + 2];
                    e.children = f;
                }
                return {
                    $$typeof: p,
                    type: a.type,
                    key: d,
                    ref: g,
                    props: e,
                    _owner: k
                };
            });
            (function(a, b) {
                void 0 === b && (b = null);
                a = {
                    $$typeof: w,
                    _calculateChangedBits: b,
                    _currentValue: a,
                    _currentValue2: a,
                    _threadCount: 0,
                    Provider: null,
                    Consumer: null
                };
                a.Provider = {
                    $$typeof: v,
                    _context: a
                };
                return a.Consumer = a;
            });
            M;
            (function(a) {
                var b = M.bind(null, a);
                b.type = a;
                return b;
            });
            (function() {
                return {
                    current: null
                };
            });
            (function(a) {
                return {
                    $$typeof: x,
                    render: a
                };
            });
            O;
            (function(a) {
                return {
                    $$typeof: A,
                    _ctor: a,
                    _status: -1,
                    _result: null
                };
            });
            (function(a, b) {
                return {
                    $$typeof: z,
                    type: a,
                    compare: void 0 === b ? null : b
                };
            });
            (function(a, b) {
                return Z().useCallback(a, b);
            });
            (function(a, b) {
                return Z().useContext(a, b);
            });
            (function() {});
            (function(a, b) {
                return Z().useEffect(a, b);
            });
            (function(a, b, c) {
                return Z().useImperativeHandle(a, b, c);
            });
            (function(a, b) {
                return Z().useLayoutEffect(a, b);
            });
            (function(a, b) {
                return Z().useMemo(a, b);
            });
            (function(a, b, c) {
                return Z().useReducer(a, b, c);
            });
            (function(a) {
                return Z().useRef(a);
            });
            (function(a) {
                return Z().useState(a);
            });
            "16.14.0";
        },
        7378: (module, __unused_webpack_exports, __webpack_require__) => {
            "use strict";
            if (true) __webpack_require__(1535);
        },
        1485: function(module) {
            (function(name, root, factory) {
                if (true) {
                    module.exports = factory();
                    module.exports["default"] = factory();
                }
            })(0, 0, (function() {
                var charMap = JSON.parse('{"$":"dollar","%":"percent","&":"and","<":"less",">":"greater","|":"or","¢":"cent","£":"pound","¤":"currency","¥":"yen","©":"(c)","ª":"a","®":"(r)","º":"o","À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","Æ":"AE","Ç":"C","È":"E","É":"E","Ê":"E","Ë":"E","Ì":"I","Í":"I","Î":"I","Ï":"I","Ð":"D","Ñ":"N","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","Ù":"U","Ú":"U","Û":"U","Ü":"U","Ý":"Y","Þ":"TH","ß":"ss","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","æ":"ae","ç":"c","è":"e","é":"e","ê":"e","ë":"e","ì":"i","í":"i","î":"i","ï":"i","ð":"d","ñ":"n","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","ù":"u","ú":"u","û":"u","ü":"u","ý":"y","þ":"th","ÿ":"y","Ā":"A","ā":"a","Ă":"A","ă":"a","Ą":"A","ą":"a","Ć":"C","ć":"c","Č":"C","č":"c","Ď":"D","ď":"d","Đ":"DJ","đ":"dj","Ē":"E","ē":"e","Ė":"E","ė":"e","Ę":"e","ę":"e","Ě":"E","ě":"e","Ğ":"G","ğ":"g","Ģ":"G","ģ":"g","Ĩ":"I","ĩ":"i","Ī":"i","ī":"i","Į":"I","į":"i","İ":"I","ı":"i","Ķ":"k","ķ":"k","Ļ":"L","ļ":"l","Ľ":"L","ľ":"l","Ł":"L","ł":"l","Ń":"N","ń":"n","Ņ":"N","ņ":"n","Ň":"N","ň":"n","Ō":"O","ō":"o","Ő":"O","ő":"o","Œ":"OE","œ":"oe","Ŕ":"R","ŕ":"r","Ř":"R","ř":"r","Ś":"S","ś":"s","Ş":"S","ş":"s","Š":"S","š":"s","Ţ":"T","ţ":"t","Ť":"T","ť":"t","Ũ":"U","ũ":"u","Ū":"u","ū":"u","Ů":"U","ů":"u","Ű":"U","ű":"u","Ų":"U","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","ź":"z","Ż":"Z","ż":"z","Ž":"Z","ž":"z","Ə":"E","ƒ":"f","Ơ":"O","ơ":"o","Ư":"U","ư":"u","ǈ":"LJ","ǉ":"lj","ǋ":"NJ","ǌ":"nj","Ș":"S","ș":"s","Ț":"T","ț":"t","ə":"e","˚":"o","Ά":"A","Έ":"E","Ή":"H","Ί":"I","Ό":"O","Ύ":"Y","Ώ":"W","ΐ":"i","Α":"A","Β":"B","Γ":"G","Δ":"D","Ε":"E","Ζ":"Z","Η":"H","Θ":"8","Ι":"I","Κ":"K","Λ":"L","Μ":"M","Ν":"N","Ξ":"3","Ο":"O","Π":"P","Ρ":"R","Σ":"S","Τ":"T","Υ":"Y","Φ":"F","Χ":"X","Ψ":"PS","Ω":"W","Ϊ":"I","Ϋ":"Y","ά":"a","έ":"e","ή":"h","ί":"i","ΰ":"y","α":"a","β":"b","γ":"g","δ":"d","ε":"e","ζ":"z","η":"h","θ":"8","ι":"i","κ":"k","λ":"l","μ":"m","ν":"n","ξ":"3","ο":"o","π":"p","ρ":"r","ς":"s","σ":"s","τ":"t","υ":"y","φ":"f","χ":"x","ψ":"ps","ω":"w","ϊ":"i","ϋ":"y","ό":"o","ύ":"y","ώ":"w","Ё":"Yo","Ђ":"DJ","Є":"Ye","І":"I","Ї":"Yi","Ј":"J","Љ":"LJ","Њ":"NJ","Ћ":"C","Џ":"DZ","А":"A","Б":"B","В":"V","Г":"G","Д":"D","Е":"E","Ж":"Zh","З":"Z","И":"I","Й":"J","К":"K","Л":"L","М":"M","Н":"N","О":"O","П":"P","Р":"R","С":"S","Т":"T","У":"U","Ф":"F","Х":"H","Ц":"C","Ч":"Ch","Ш":"Sh","Щ":"Sh","Ъ":"U","Ы":"Y","Ь":"","Э":"E","Ю":"Yu","Я":"Ya","а":"a","б":"b","в":"v","г":"g","д":"d","е":"e","ж":"zh","з":"z","и":"i","й":"j","к":"k","л":"l","м":"m","н":"n","о":"o","п":"p","р":"r","с":"s","т":"t","у":"u","ф":"f","х":"h","ц":"c","ч":"ch","ш":"sh","щ":"sh","ъ":"u","ы":"y","ь":"","э":"e","ю":"yu","я":"ya","ё":"yo","ђ":"dj","є":"ye","і":"i","ї":"yi","ј":"j","љ":"lj","њ":"nj","ћ":"c","ѝ":"u","џ":"dz","Ґ":"G","ґ":"g","Ғ":"GH","ғ":"gh","Қ":"KH","қ":"kh","Ң":"NG","ң":"ng","Ү":"UE","ү":"ue","Ұ":"U","ұ":"u","Һ":"H","һ":"h","Ә":"AE","ә":"ae","Ө":"OE","ө":"oe","Ա":"A","Բ":"B","Գ":"G","Դ":"D","Ե":"E","Զ":"Z","Է":"E\'","Ը":"Y\'","Թ":"T\'","Ժ":"JH","Ի":"I","Լ":"L","Խ":"X","Ծ":"C\'","Կ":"K","Հ":"H","Ձ":"D\'","Ղ":"GH","Ճ":"TW","Մ":"M","Յ":"Y","Ն":"N","Շ":"SH","Չ":"CH","Պ":"P","Ջ":"J","Ռ":"R\'","Ս":"S","Վ":"V","Տ":"T","Ր":"R","Ց":"C","Փ":"P\'","Ք":"Q\'","Օ":"O\'\'","Ֆ":"F","և":"EV","ء":"a","آ":"aa","أ":"a","ؤ":"u","إ":"i","ئ":"e","ا":"a","ب":"b","ة":"h","ت":"t","ث":"th","ج":"j","ح":"h","خ":"kh","د":"d","ذ":"th","ر":"r","ز":"z","س":"s","ش":"sh","ص":"s","ض":"dh","ط":"t","ظ":"z","ع":"a","غ":"gh","ف":"f","ق":"q","ك":"k","ل":"l","م":"m","ن":"n","ه":"h","و":"w","ى":"a","ي":"y","ً":"an","ٌ":"on","ٍ":"en","َ":"a","ُ":"u","ِ":"e","ْ":"","٠":"0","١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","پ":"p","چ":"ch","ژ":"zh","ک":"k","گ":"g","ی":"y","۰":"0","۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","฿":"baht","ა":"a","ბ":"b","გ":"g","დ":"d","ე":"e","ვ":"v","ზ":"z","თ":"t","ი":"i","კ":"k","ლ":"l","მ":"m","ნ":"n","ო":"o","პ":"p","ჟ":"zh","რ":"r","ს":"s","ტ":"t","უ":"u","ფ":"f","ქ":"k","ღ":"gh","ყ":"q","შ":"sh","ჩ":"ch","ც":"ts","ძ":"dz","წ":"ts","ჭ":"ch","ხ":"kh","ჯ":"j","ჰ":"h","Ṣ":"S","ṣ":"s","Ẁ":"W","ẁ":"w","Ẃ":"W","ẃ":"w","Ẅ":"W","ẅ":"w","ẞ":"SS","Ạ":"A","ạ":"a","Ả":"A","ả":"a","Ấ":"A","ấ":"a","Ầ":"A","ầ":"a","Ẩ":"A","ẩ":"a","Ẫ":"A","ẫ":"a","Ậ":"A","ậ":"a","Ắ":"A","ắ":"a","Ằ":"A","ằ":"a","Ẳ":"A","ẳ":"a","Ẵ":"A","ẵ":"a","Ặ":"A","ặ":"a","Ẹ":"E","ẹ":"e","Ẻ":"E","ẻ":"e","Ẽ":"E","ẽ":"e","Ế":"E","ế":"e","Ề":"E","ề":"e","Ể":"E","ể":"e","Ễ":"E","ễ":"e","Ệ":"E","ệ":"e","Ỉ":"I","ỉ":"i","Ị":"I","ị":"i","Ọ":"O","ọ":"o","Ỏ":"O","ỏ":"o","Ố":"O","ố":"o","Ồ":"O","ồ":"o","Ổ":"O","ổ":"o","Ỗ":"O","ỗ":"o","Ộ":"O","ộ":"o","Ớ":"O","ớ":"o","Ờ":"O","ờ":"o","Ở":"O","ở":"o","Ỡ":"O","ỡ":"o","Ợ":"O","ợ":"o","Ụ":"U","ụ":"u","Ủ":"U","ủ":"u","Ứ":"U","ứ":"u","Ừ":"U","ừ":"u","Ử":"U","ử":"u","Ữ":"U","ữ":"u","Ự":"U","ự":"u","Ỳ":"Y","ỳ":"y","Ỵ":"Y","ỵ":"y","Ỷ":"Y","ỷ":"y","Ỹ":"Y","ỹ":"y","–":"-","‘":"\'","’":"\'","“":"\\"","”":"\\"","„":"\\"","†":"+","•":"*","…":"...","₠":"ecu","₢":"cruzeiro","₣":"french franc","₤":"lira","₥":"mill","₦":"naira","₧":"peseta","₨":"rupee","₩":"won","₪":"new shequel","₫":"dong","€":"euro","₭":"kip","₮":"tugrik","₯":"drachma","₰":"penny","₱":"peso","₲":"guarani","₳":"austral","₴":"hryvnia","₵":"cedi","₸":"kazakhstani tenge","₹":"indian rupee","₺":"turkish lira","₽":"russian ruble","₿":"bitcoin","℠":"sm","™":"tm","∂":"d","∆":"delta","∑":"sum","∞":"infinity","♥":"love","元":"yuan","円":"yen","﷼":"rial","ﻵ":"laa","ﻷ":"laa","ﻹ":"lai","ﻻ":"la"}');
                var locales = JSON.parse('{"bg":{"Й":"Y","Ц":"Ts","Щ":"Sht","Ъ":"A","Ь":"Y","й":"y","ц":"ts","щ":"sht","ъ":"a","ь":"y"},"de":{"Ä":"AE","ä":"ae","Ö":"OE","ö":"oe","Ü":"UE","ü":"ue","ß":"ss","%":"prozent","&":"und","|":"oder","∑":"summe","∞":"unendlich","♥":"liebe"},"es":{"%":"por ciento","&":"y","<":"menor que",">":"mayor que","|":"o","¢":"centavos","£":"libras","¤":"moneda","₣":"francos","∑":"suma","∞":"infinito","♥":"amor"},"fr":{"%":"pourcent","&":"et","<":"plus petit",">":"plus grand","|":"ou","¢":"centime","£":"livre","¤":"devise","₣":"franc","∑":"somme","∞":"infini","♥":"amour"},"pt":{"%":"porcento","&":"e","<":"menor",">":"maior","|":"ou","¢":"centavo","∑":"soma","£":"libra","∞":"infinito","♥":"amor"},"uk":{"И":"Y","и":"y","Й":"Y","й":"y","Ц":"Ts","ц":"ts","Х":"Kh","х":"kh","Щ":"Shch","щ":"shch","Г":"H","г":"h"},"vi":{"Đ":"D","đ":"d"},"da":{"Ø":"OE","ø":"oe","Å":"AA","å":"aa","%":"procent","&":"og","|":"eller","$":"dollar","<":"mindre end",">":"større end"},"nb":{"&":"og","Å":"AA","Æ":"AE","Ø":"OE","å":"aa","æ":"ae","ø":"oe"},"it":{"&":"e"},"nl":{"&":"en"},"sv":{"&":"och","Å":"AA","Ä":"AE","Ö":"OE","å":"aa","ä":"ae","ö":"oe"}}');
                function replace(string, options) {
                    if ("string" !== typeof string) throw new Error("slugify: string argument expected");
                    options = "string" === typeof options ? {
                        replacement: options
                    } : options || {};
                    var locale = locales[options.locale] || {};
                    var replacement = void 0 === options.replacement ? "-" : options.replacement;
                    var trim = void 0 === options.trim ? true : options.trim;
                    var slug = string.normalize().split("").reduce((function(result, ch) {
                        var appendChar = locale[ch];
                        if (void 0 === appendChar) appendChar = charMap[ch];
                        if (void 0 === appendChar) appendChar = ch;
                        if (appendChar === replacement) appendChar = " ";
                        return result + appendChar.replace(options.remove || /[^\w\s$*_+~.()'"!\-:@]+/g, "");
                    }), "");
                    if (options.strict) slug = slug.replace(/[^A-Za-z0-9\s]/g, "");
                    if (trim) slug = slug.trim();
                    slug = slug.replace(/\s+/g, replacement);
                    if (options.lower) slug = slug.toLowerCase();
                    return slug;
                }
                replace.extend = function(customMap) {
                    Object.assign(charMap, customMap);
                };
                return replace;
            }));
        },
        1719: (module, __unused_webpack_exports, __webpack_require__) => {
            var v1 = __webpack_require__(2998);
            var v4 = __webpack_require__(6541);
            var uuid = v4;
            uuid.v1 = v1;
            uuid.v4 = v4;
            module.exports = uuid;
        },
        6553: () => {},
        4379: module => {
            "use strict";
            module.exports = JSON.parse('[{"id":"alt-text-area-missing","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["desktop","mobile"]},{"type":"issue","impact":4,"checkpoint":"s.1.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"alt-text-complex-missing","data":[{"type":"issue","impact":4,"checkpoint":"1.1.1.c","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.c"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.c","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"alt-text-decorative","data":[{"type":"issue","impact":2,"checkpoint":"1.1.1.d","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.d"}],"testingMethodologies":["native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.d","type":"issue","impact":2,"testingMethodologies":["native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"alt-text-decorative-inappropriate","data":[{"type":"issue","impact":2,"checkpoint":"1.1.1.d","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.d"}],"testingMethodologies":["desktop","mobile"]},{"type":"issue","impact":2,"checkpoint":"s.1.2","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.d","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"alt-text-different","data":[{"type":"issue","impact":3,"checkpoint":"1.1.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.b"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.1.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"alt-text-dynamic-image-inconsistent","data":[{"type":"issue","impact":3,"checkpoint":"1.1.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.b"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"alt-text-dynamic-image-inconsistent-active","data":[{"type":"issue","impact":3,"checkpoint":"1.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"alt-text-essential-image-text","data":[{"type":"issue","impact":3,"checkpoint":"1.1.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.b"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"alt-text-essential-image-text-active","data":[{"type":"issue","impact":3,"checkpoint":"1.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"alt-text-image-map-nonunique","data":[{"type":"issue","impact":3,"checkpoint":"2.4.4.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.4.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.4.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"alt-text-image-text-mismatch","data":[{"type":"best-practice","impact":1,"checkpoint":"1.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.a"}],"decisionDate":"20130716","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":1,"checkpoint":"1.1.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.b"}],"decisionDate":"20130716","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":1,"checkpoint":"1.1.1.h","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.h"}],"decisionDate":"20130716","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.h","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.b","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.a","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"alt-text-inappropriate","data":[{"type":"issue","impact":3,"checkpoint":"1.1.1.h","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.h"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.h","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"alt-text-inappropriate-captcha","data":[{"type":"issue","impact":3,"checkpoint":"1.1.1.g","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.g"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.g","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"alt-text-inconsistent","data":[{"type":"issue","impact":3,"checkpoint":"1.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.1.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"alt-text-longdesc-inadequate","data":[{"type":"issue","impact":3,"checkpoint":"1.1.1.c","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.c"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.c","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"alt-text-longdesc-missing","data":[{"type":"issue","impact":4,"checkpoint":"1.1.1.c","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.c"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.c","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"alt-text-missing","data":[{"type":"issue","impact":4,"checkpoint":"1.1.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.b"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"alt-text-missing-active","data":[{"type":"issue","impact":4,"checkpoint":"1.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"alt-text-missing-captcha","data":[{"type":"issue","impact":3,"checkpoint":"1.1.1.g","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.g"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.g","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"alt-text-missing-media-file","data":[{"type":"issue","impact":3,"checkpoint":"1.1.1.h","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.h"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.h","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"alt-text-redundancy","data":[{"type":"best-practice","impact":1,"checkpoint":"1.1.1.d","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.d"}],"decisionDate":"20231211","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.d","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"alt-text-redundancy-adjacent-link","data":[{"type":"best-practice","impact":1,"checkpoint":"1.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.a"}],"decisionDate":"20150319","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":1,"checkpoint":"1.1.1.d","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.d"}],"decisionDate":"20150319","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.d","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.a","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"alt-text-redundancy-link-text","data":[{"type":"best-practice","impact":1,"checkpoint":"1.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.a"}],"decisionDate":"20150319","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":1,"checkpoint":"1.1.1.d","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.d"}],"decisionDate":"20150319","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.d","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.a","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"alt-text-short-text-missing","data":[{"type":"issue","impact":3,"checkpoint":"1.1.1.c","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.c"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.c","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"alt-text-short-text-not-meaningful","data":[{"type":"issue","impact":3,"checkpoint":"1.1.1.c","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.c"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.c","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"alt-text-too-long","data":[{"type":"best-practice","impact":1,"checkpoint":"1.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.a"}],"decisionDate":"20130319","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":1,"checkpoint":"1.1.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.b"}],"decisionDate":"20130319","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":1,"checkpoint":"1.1.1.c","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.c"}],"decisionDate":"20130319","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":1,"checkpoint":"1.1.1.g","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.g"}],"decisionDate":"20130319","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":1,"checkpoint":"1.1.1.h","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.h"}],"decisionDate":"20130319","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.h","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.g","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.c","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.b","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.a","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"alt-text-trademark","data":[{"type":"best-practice","impact":1,"checkpoint":"1.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.a"}],"decisionDate":"20130716","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":1,"checkpoint":"1.1.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.b"}],"decisionDate":"20130716","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":1,"checkpoint":"1.1.1.c","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.c"}],"decisionDate":"20141231","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":1,"checkpoint":"1.1.1.g","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.g"}],"decisionDate":"20141231","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":1,"checkpoint":"1.1.1.h","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.h"}],"decisionDate":"20141231","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.h","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.g","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.c","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.b","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.a","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"alt-text-verbose","data":[{"type":"best-practice","impact":1,"checkpoint":"1.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.a"}],"decisionDate":"20150319","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":1,"checkpoint":"1.1.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.b"}],"decisionDate":"20150319","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":1,"checkpoint":"1.1.1.c","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.c"}],"decisionDate":"20150319","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":1,"checkpoint":"1.1.1.g","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.g"}],"decisionDate":"20150319","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":1,"checkpoint":"1.1.1.h","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.h"}],"decisionDate":"20150319","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.h","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.g","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.c","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.b","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.a","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"android-active-role-inappropriate","data":[{"type":"issue","impact":2,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":2,"testingMethodologies":["native-mobile-android"]}]},{"id":"android-control-alert","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android"]}]},{"id":"android-control-badge","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android"]}]},{"id":"android-control-bottom-nav","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android"]}]},{"id":"android-control-checkbox","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android"]}]},{"id":"android-control-compound-button","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android"]}]},{"id":"android-control-edit-text","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android"]}]},{"id":"android-control-expandable-list","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android"]}]},{"id":"android-control-link","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android"]}]},{"id":"android-control-menu","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android"]}]},{"id":"android-control-popup-menu","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android"]}]},{"id":"android-control-progress-bar","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android"]}]},{"id":"android-control-radio-button","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android"]}]},{"id":"android-control-rating-bar","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android"]}]},{"id":"android-control-seek-bar","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android"]}]},{"id":"android-control-snack-bar","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android"]}]},{"id":"android-control-spinner","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android"]}]},{"id":"android-control-switch","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android"]}]},{"id":"android-control-tab-host","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android"]}]},{"id":"android-control-toast","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android"]}]},{"id":"android-control-toggle-button","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android"]}]},{"id":"aria-attribute-invalid","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"aria-attribute-missing","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"aria-attribute-value-invalid","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"aria-custom-button-spacebar","data":[{"type":"best-practice","impact":3,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"decisionDate":"20160826","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"best-practice","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"aria-invalid-missing","data":[{"type":"best-practice","impact":2,"checkpoint":"3.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.1.b"}],"decisionDate":"20170109","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.1.b","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"aria-landmark-not-used","data":[{"type":"best-practice","impact":2,"checkpoint":"2.4.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.1.a"}],"decisionDate":"20130319","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.1.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"aria-landmark-outside","data":[{"type":"best-practice","impact":2,"checkpoint":"2.4.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.1.a"}],"decisionDate":"20150319","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.1.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"aria-name-missing-incorrect","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"aria-not-used","data":[{"type":"best-practice","impact":2,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"decisionDate":"20130528","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":2,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"decisionDate":"20130528","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"aria-region-not-labeled","data":[{"type":"best-practice","impact":2,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"decisionDate":"20190228","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"aria-required-child-missing","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"aria-required-missing","data":[{"type":"best-practice","impact":2,"checkpoint":"3.3.2.c","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.2.c"}],"decisionDate":"20170109","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.2.c","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"aria-required-parent-missing","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"aria-role-invalid","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"aria-role-missing","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"aria-state-property-missing","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"asterisk-instruction-missing","data":[{"type":"best-practice","impact":2,"checkpoint":"3.3.2.c","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.2.c"}],"decisionDate":"20220114","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.2.c","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"audio-autoplay","data":[{"type":"issue","impact":4,"checkpoint":"1.4.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.4.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.2.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"audio-description-hard-to-find","data":[{"type":"best-practice","impact":2,"checkpoint":"1.2.3.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.3.a"}],"decisionDate":"20191023","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":2,"checkpoint":"1.2.5.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.2.5.a"}],"decisionDate":"20191023","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.5.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.3.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"audio-description-inadequate","data":[{"type":"issue","impact":3,"checkpoint":"1.2.3.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.3.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.3.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"audio-description-inadequate-aa","data":[{"type":"issue","impact":3,"checkpoint":"1.2.5.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.2.5.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.5.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"audio-description-missing","data":[{"type":"issue","impact":4,"checkpoint":"1.2.5.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.2.5.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.5.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"auth-requires-cognitive-function","data":[{"type":"issue","impact":4,"checkpoint":"3.3.8.a","standards":["wcag22aa"],"references":[{"standards":["wcag22aa"],"checkpoint":"3.3.8.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.8.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"auth-show-password","data":[{"type":"best-practice","impact":2,"checkpoint":"3.3.7.a","standards":["wcag22aa"],"references":[{"standards":["wcag22aa"],"checkpoint":"3.3.7.a"}],"decisionDate":"20221103","testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.7.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]}]},{"id":"button-acts-like-link","data":[{"type":"best-practice","impact":2,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"decisionDate":"20170626","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"button-link-nested","data":[{"type":"issue","impact":2,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"button-looks-like-link","data":[{"type":"best-practice","impact":2,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"decisionDate":"20170626","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"button-missing-role","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]}]},{"id":"button-name-inaccessible","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]}]},{"id":"button-role-name-missing","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]}]},{"id":"button-state-disabled","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"button-state-pressed","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android"]}]},{"id":"button-state-selected","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android","native-mobile-ios"]}]},{"id":"button-value-text-mismatch","data":[{"type":"best-practice","impact":1,"checkpoint":"2.4.6.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.6.b"}],"decisionDate":"20180523","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.6.b","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"buttons-confusing","data":[{"type":"issue","impact":3,"checkpoint":"2.4.6.b","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"2.4.6.b"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.11.2","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.6.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"captcha-requires-vision","data":[{"type":"issue","impact":4,"checkpoint":"1.1.1.g","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.g"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.g","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"captions-inadequate","data":[{"type":"issue","impact":3,"checkpoint":"1.2.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"captions-inadequate-live","data":[{"type":"issue","impact":3,"checkpoint":"1.2.4.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.4.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.4.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"captions-incomplete","data":[{"type":"issue","impact":3,"checkpoint":"1.2.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"captions-incomplete-live","data":[{"type":"issue","impact":3,"checkpoint":"1.2.4.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.4.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.4.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"captions-missing","data":[{"type":"issue","impact":4,"checkpoint":"1.2.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.2.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"captions-missing-live","data":[{"type":"issue","impact":4,"checkpoint":"1.2.4.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.4.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.4.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"captions-not-clearly-visible","data":[{"type":"issue","impact":3,"checkpoint":"1.2.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"captions-not-clearly-visible-live","data":[{"type":"issue","impact":3,"checkpoint":"1.2.4.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.4.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.4.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"captions-not-synchronized","data":[{"type":"issue","impact":3,"checkpoint":"1.2.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"captions-not-synchronized-live","data":[{"type":"issue","impact":3,"checkpoint":"1.2.4.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.4.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.4.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"captions-undescribed-effects","data":[{"type":"issue","impact":3,"checkpoint":"1.2.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"captions-undescribed-effects-live","data":[{"type":"issue","impact":3,"checkpoint":"1.2.4.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.4.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.4.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"captions-unidentified-speakers","data":[{"type":"issue","impact":2,"checkpoint":"1.2.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.2.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"captions-unidentified-speakers-live","data":[{"type":"issue","impact":2,"checkpoint":"1.2.4.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.4.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.4.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"change-of-context-not-requested","data":[{"type":"issue","impact":2,"checkpoint":"3.2.5.a","standards":["wcag2aaa","aenb-77"],"references":[{"standards":["wcag2aaa","aenb-77"],"checkpoint":"3.2.5.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.2.5.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"checkbox-missing-role-state","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"content-auto-play","data":[{"type":"issue","impact":3,"checkpoint":"2.2.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.2.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.7.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.2.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"content-blink","data":[{"type":"issue","impact":3,"checkpoint":"2.2.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.2.2.a"}],"testingMethodologies":["desktop","mobile"]},{"type":"issue","impact":3,"checkpoint":"s.7.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.2.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"content-carousel-unstoppable","data":[{"type":"issue","impact":3,"checkpoint":"2.2.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.2.2.b"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]},{"type":"issue","impact":3,"checkpoint":"s.7.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.2.2.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]}]},{"id":"content-disappears","data":[{"type":"issue","impact":3,"checkpoint":"2.2.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.2.1.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.2.1.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"content-does-not-remain-visible","data":[{"type":"issue","impact":3,"checkpoint":"1.4.13.a","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.13.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.13.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"content-flashing","data":[{"type":"best-practice","impact":3,"checkpoint":"2.3.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.3.1.a"}],"decisionDate":"20130409","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":3,"checkpoint":"s.8.1","standards":["smoke"],"references":[],"decisionDate":"20130409","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.3.1.a","type":"best-practice","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"content-flashing-big","data":[{"type":"issue","impact":5,"checkpoint":"2.3.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.3.1.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":5,"checkpoint":"s.8.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.3.1.a","type":"issue","impact":5,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"content-flashing-no-exception","data":[{"type":"issue","impact":2,"checkpoint":"2.3.2.a","standards":["wcag2aaa","aenb-77"],"references":[{"standards":["wcag2aaa","aenb-77"],"checkpoint":"2.3.2.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.3.2.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"content-horizontal-scroll","data":[{"type":"issue","impact":3,"checkpoint":"1.4.10.a","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.10.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.10.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"content-hover-disappears","data":[{"type":"issue","impact":3,"checkpoint":"1.4.13.a","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.13.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.13.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"content-marquee","data":[{"type":"issue","impact":3,"checkpoint":"2.2.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.2.2.a"}],"testingMethodologies":["desktop","mobile"]},{"type":"issue","impact":3,"checkpoint":"s.7.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.2.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"content-motion-uninterruptible","data":[{"type":"issue","impact":3,"checkpoint":"2.2.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.2.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]},{"type":"issue","impact":3,"checkpoint":"s.7.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.2.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]}]},{"id":"content-not-dismissible","data":[{"type":"issue","impact":3,"checkpoint":"1.4.13.a","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.13.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.13.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"content-reflow-content-lost","data":[{"type":"issue","impact":3,"checkpoint":"1.4.10.a","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.10.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.10.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"content-reflow-content-missing","data":[{"type":"issue","impact":3,"checkpoint":"1.4.10.a","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.10.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.10.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"content-restricts-input-mechanisms","data":[{"type":"issue","impact":2,"checkpoint":"2.5.6.a","standards":["wcag21aaa","aenb-77"],"references":[{"standards":["wcag21aaa","aenb-77"],"checkpoint":"2.5.6.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.5.6.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"content-too-wide","data":[{"type":"best-practice","impact":2,"checkpoint":"1.4.4.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.4.a"}],"decisionDate":"20160524","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.4.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"content-updates-uninterruptible","data":[{"type":"issue","impact":3,"checkpoint":"2.2.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.2.2.b"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.7.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.2.2.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"contextual-help-not-present","data":[{"type":"issue","impact":2,"checkpoint":"3.3.5.a","standards":["wcag2aaa","aenb-77"],"references":[{"standards":["wcag2aaa","aenb-77"],"checkpoint":"3.3.5.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.5.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"contrast-focus-3-1","data":[{"type":"best-practice","impact":2,"checkpoint":"1.4.3.b","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.3.b"}],"decisionDate":"20130416","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":2,"checkpoint":"2.4.7.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"2.4.7.a"}],"decisionDate":"20130416","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.7.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.3.b","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"contrast-focus-4.5-1","data":[{"type":"best-practice","impact":2,"checkpoint":"1.4.3.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.3.a"}],"decisionDate":"20130416","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":2,"checkpoint":"2.4.7.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"2.4.7.a"}],"decisionDate":"20130416","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":2,"checkpoint":"1.4.11.b","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.11.b"}],"decisionDate":"20130416","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.11.b","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.7.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.3.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"contrast-focus-indicator","data":[{"type":"issue","impact":3,"checkpoint":"1.4.11.b","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.11.b"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.11.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"contrast-graphical-objects-3-1","data":[{"type":"issue","impact":3,"checkpoint":"1.4.11.c","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.11.c"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.11.c","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"contrast-graphical-objects-3-1-plus-text","data":[{"type":"best-practice","impact":2,"checkpoint":"1.4.11.c","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.11.c"}],"decisionDate":"20180605","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.11.c","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"contrast-graphical-objects-anti-aliasing","data":[{"type":"best-practice","impact":1,"checkpoint":"1.4.11.c","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.11.c"}],"decisionDate":"20180605","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.11.c","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"contrast-graphical-objects-both-3-1","data":[{"type":"best-practice","impact":2,"checkpoint":"1.4.11.c","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.11.c"}],"decisionDate":"20180605","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.11.c","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"contrast-graphical-objects-flag","data":[{"type":"best-practice","impact":1,"checkpoint":"1.4.11.c","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.11.c"}],"decisionDate":"20180605","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.11.c","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"contrast-graphical-objects-icon-3-1","data":[{"type":"issue","impact":3,"checkpoint":"1.4.11.c","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.11.c"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.11.c","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"contrast-graphical-objects-line-cross","data":[{"type":"best-practice","impact":2,"checkpoint":"1.4.11.c","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.11.c"}],"decisionDate":"20180605","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.11.c","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"contrast-graphical-objects-logo","data":[{"type":"best-practice","impact":2,"checkpoint":"1.4.11.c","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.11.c"}],"decisionDate":"20180605","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.11.c","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"contrast-icon-3-1","data":[{"type":"best-practice","impact":2,"checkpoint":"1.4.3.b","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.3.b"}],"decisionDate":"20160201","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":2,"checkpoint":"1.4.3.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.3.a"}],"decisionDate":"20160201","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.3.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.3.b","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"contrast-icon-4.5-1","data":[{"type":"best-practice","impact":2,"checkpoint":"1.4.3.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.3.a"}],"decisionDate":"20160201","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":2,"checkpoint":"1.4.11.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.11.a"}],"decisionDate":"20160201","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":2,"checkpoint":"1.4.11.c","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.11.c"}],"decisionDate":"20160201","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.11.c","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.11.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.3.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"contrast-link-infocus-3-1","data":[{"type":"issue","impact":3,"checkpoint":"1.4.3.b","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.3.b"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.3.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"contrast-link-infocus-4.5-1","data":[{"type":"issue","impact":3,"checkpoint":"1.4.3.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.3.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.3.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"contrast-optional-disabled-controls","data":[{"type":"issue","impact":0,"checkpoint":"1.4.3.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.3.a"}],"testingMethodologies":["desktop","mobile"]},{"type":"issue","impact":0,"checkpoint":"1.4.3.b","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.3.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.3.b","type":"issue","impact":0,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.3.a","type":"issue","impact":0,"testingMethodologies":["desktop","mobile"]}]},{"id":"contrast-optional-logotype","data":[{"type":"issue","impact":0,"checkpoint":"1.4.3.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.3.a"}],"testingMethodologies":["desktop","mobile"]},{"type":"issue","impact":0,"checkpoint":"1.4.3.b","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.3.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.3.b","type":"issue","impact":0,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.3.a","type":"issue","impact":0,"testingMethodologies":["desktop","mobile"]}]},{"id":"contrast-text-3-1","data":[{"type":"issue","impact":3,"checkpoint":"1.4.3.b","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.3.b"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.3.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"contrast-text-3-1-over-image","data":[{"type":"issue","impact":3,"checkpoint":"1.4.3.b","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.3.b"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.3.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"contrast-text-4.5-1","data":[{"type":"issue","impact":3,"checkpoint":"1.4.3.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.3.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.3.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"contrast-text-4.5-1-over-image","data":[{"type":"issue","impact":3,"checkpoint":"1.4.3.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.3.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.3.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"contrast-text-4.5-1-placeholder","data":[{"type":"issue","impact":3,"checkpoint":"1.4.3.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.3.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.3.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"contrast-uic-active-3-1","data":[{"type":"issue","impact":3,"checkpoint":"1.4.11.a","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.11.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.11.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"contrast-uic-active-3-1-state","data":[{"type":"issue","impact":3,"checkpoint":"1.4.11.b","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.11.b"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.11.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"contrast-uic-active-both-3-1","data":[{"type":"best-practice","impact":1,"checkpoint":"1.4.11.a","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.11.a"}],"decisionDate":"20180605","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.11.a","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"contrast-uic-active-both-3-1-state","data":[{"type":"best-practice","impact":1,"checkpoint":"1.4.11.b","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.11.b"}],"decisionDate":"20180605","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.11.b","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"contrast-uic-active-browser-default","data":[{"type":"best-practice","impact":2,"checkpoint":"1.4.11.a","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.11.a"}],"decisionDate":"20180605","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.11.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"contrast-uic-active-browser-default-back","data":[{"type":"best-practice","impact":2,"checkpoint":"1.4.11.a","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.11.a"}],"decisionDate":"20180605","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.11.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"contrast-uic-active-browser-default-back-state","data":[{"type":"best-practice","impact":2,"checkpoint":"1.4.11.b","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.11.b"}],"decisionDate":"20180605","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.11.b","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"contrast-uic-active-browser-default-state","data":[{"type":"best-practice","impact":2,"checkpoint":"1.4.11.b","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.11.b"}],"decisionDate":"20180605","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.11.b","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"contrast-uic-active-inactive","data":[{"type":"best-practice","impact":2,"checkpoint":"1.4.11.a","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.11.a"}],"decisionDate":"20180605","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.11.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"contrast-uic-active-no-visual","data":[{"type":"best-practice","impact":1,"checkpoint":"1.4.11.a","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.11.a"}],"decisionDate":"20180605","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.11.a","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"contrast-uic-inactive-3-1","data":[{"type":"best-practice","impact":2,"checkpoint":"1.4.11.a","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.11.a"}],"decisionDate":"20180605","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.11.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"contrast-uic-state-anti-aliasing","data":[{"type":"best-practice","impact":1,"checkpoint":"1.4.11.b","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.11.b"}],"decisionDate":"20180605","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.11.b","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"contrast-uic-states","data":[{"type":"best-practice","impact":2,"checkpoint":"1.4.11.b","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.11.b"}],"decisionDate":"20180605","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.11.b","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"control-incorrect-role","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"control-incorrect-state","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"control-missing-role","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":4,"testingMethodologies":["native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"control-missing-state","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"control-name-inaccessible","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":4,"testingMethodologies":["native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"control-role-name-missing","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":4,"testingMethodologies":["native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"control-state-disabled","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"custom-accordion","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"custom-breadcrumb","data":[{"type":"issue","impact":2,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"custom-carousel-current","data":[{"type":"issue","impact":2,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"custom-carousel-number","data":[{"type":"issue","impact":2,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"custom-combobox","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"custom-date-picker","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"custom-dialog","data":[{"type":"issue","impact":2,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"custom-grid","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"custom-listbox","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"custom-navigation","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"custom-not-compatible","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.c","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.c"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.c","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"custom-progressbar","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"custom-role-application","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"custom-slider","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"custom-switch","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"custom-tabs","data":[{"type":"issue","impact":2,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"custom-toolbar","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"custom-tooltip","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"custom-treeview","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"data-table-headers","data":[{"type":"issue","impact":4,"checkpoint":"1.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.b"}],"testingMethodologies":["native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.b","type":"issue","impact":4,"testingMethodologies":["native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"dragging-no-alternative","data":[{"type":"issue","impact":3,"checkpoint":"2.5.7.a","standards":["wcag22aa"],"references":[{"standards":["wcag22aa"],"checkpoint":"2.5.7.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.5.7.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"dual-role","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.b"}],"decisionDate":"20170925","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"en301549-accessibility-feature-not-accessible","data":[{"type":"issue","impact":3,"checkpoint":"en301549-5.2","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"en301549-5.2"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","pdf","kiosk","ms-excel","ms-powerpoint","ms-word","windows-desktop"]}]},{"id":"en301549-accessibility-info-not-preserved","data":[{"type":"issue","impact":4,"checkpoint":"en301549-5.4","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"en301549-5.4"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","pdf","kiosk","ms-excel","ms-powerpoint","ms-word","windows-desktop"]}]},{"id":"en301549-auth-tool-info-not-preserved","data":[{"type":"issue","impact":4,"checkpoint":"en301549-11.8.3","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"en301549-11.8.3"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","pdf","kiosk","ms-excel","ms-powerpoint","ms-word","windows-desktop"]}]},{"id":"en301549-auth-tool-no-accessible-template","data":[{"type":"issue","impact":3,"checkpoint":"en301549-11.8.5","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"en301549-11.8.5"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","pdf","kiosk","ms-excel","ms-powerpoint","ms-word","windows-desktop"]}]},{"id":"en301549-auth-tool-no-repair-assist","data":[{"type":"issue","impact":3,"checkpoint":"en301549-11.8.4","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"en301549-11.8.4"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","pdf","kiosk","ms-excel","ms-powerpoint","ms-word","windows-desktop"]}]},{"id":"en301549-product-doc-fails-wcag","data":[{"type":"issue","impact":3,"checkpoint":"en301549-12.1.2","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"en301549-12.1.2"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","pdf","kiosk","ms-excel","ms-powerpoint","ms-word","windows-desktop"]}]},{"id":"en301549-product-doc-missing-accessibility-features","data":[{"type":"issue","impact":3,"checkpoint":"en301549-12.1.1","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"en301549-12.1.1"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","pdf","kiosk","ms-excel","ms-powerpoint","ms-word","windows-desktop"]}]},{"id":"en301549-single-biometric","data":[{"type":"issue","impact":4,"checkpoint":"en301549-5.3","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"en301549-5.3"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","pdf","kiosk","ms-excel","ms-powerpoint","ms-word","windows-desktop"]}]},{"id":"en301549-support-services-do-not-support-disabilities","data":[{"type":"issue","impact":4,"checkpoint":"en301549-12.2.3","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"en301549-12.2.3"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","pdf","kiosk","ms-excel","ms-powerpoint","ms-word","windows-desktop"]}]},{"id":"en301549-support-services-no-accessibility-documentation","data":[{"type":"issue","impact":3,"checkpoint":"en301549-12.2.2","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"en301549-12.2.2"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","pdf","kiosk","ms-excel","ms-powerpoint","ms-word","windows-desktop"]}]},{"id":"en301549-support-services-product-docs-fail-wcag","data":[{"type":"issue","impact":3,"checkpoint":"en301549-12.2.4","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"en301549-12.2.4"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","pdf","kiosk","ms-excel","ms-powerpoint","ms-word","windows-desktop"]}]},{"id":"en301549-user-preferences-not-supported","data":[{"type":"issue","impact":3,"checkpoint":"en301549-11.7","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"en301549-11.7"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","pdf","kiosk","ms-excel","ms-powerpoint","ms-word","windows-desktop"]}]},{"id":"en301549-video-app-ad-track-not-preserved","data":[{"type":"issue","impact":4,"checkpoint":"en301549-7.2.3","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"en301549-7.2.3"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","pdf","kiosk","ms-excel","ms-powerpoint","ms-word","windows-desktop"]}]},{"id":"en301549-video-app-captions-not-preserved","data":[{"type":"issue","impact":4,"checkpoint":"en301549-7.1.3","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"en301549-7.1.3"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","pdf","kiosk","ms-excel","ms-powerpoint","ms-word","windows-desktop"]}]},{"id":"en301549-video-player-ad-control-missing","data":[{"type":"issue","impact":3,"checkpoint":"en301549-7.3","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"en301549-7.3"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","pdf","kiosk","ms-excel","ms-powerpoint","ms-word","windows-desktop"]}]},{"id":"en301549-video-player-ad-track-not-sync","data":[{"type":"issue","impact":3,"checkpoint":"en301549-7.2.2","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"en301549-7.2.2"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","pdf","kiosk","ms-excel","ms-powerpoint","ms-word","windows-desktop"]}]},{"id":"en301549-video-player-captions-not-adaptable","data":[{"type":"issue","impact":3,"checkpoint":"en301549-7.1.4","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"en301549-7.1.4"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","pdf","kiosk","ms-excel","ms-powerpoint","ms-word","windows-desktop"]}]},{"id":"en301549-video-player-captions-not-sync","data":[{"type":"issue","impact":4,"checkpoint":"en301549-7.1.2","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"en301549-7.1.2"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","pdf","kiosk","ms-excel","ms-powerpoint","ms-word","windows-desktop"]}]},{"id":"en301549-video-player-cc-ad-wrong-level","data":[{"type":"issue","impact":3,"checkpoint":"en301549-7.3","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"en301549-7.3"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","pdf","kiosk","ms-excel","ms-powerpoint","ms-word","windows-desktop"]}]},{"id":"en301549-video-player-cc-wrong-level","data":[{"type":"issue","impact":3,"checkpoint":"en301549-7.3","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"en301549-7.3"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","pdf","kiosk","ms-excel","ms-powerpoint","ms-word","windows-desktop"]}]},{"id":"en301549-video-player-no-ad-track","data":[{"type":"issue","impact":2,"checkpoint":"en301549-7.2.1","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"en301549-7.2.1"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","pdf","kiosk","ms-excel","ms-powerpoint","ms-word","windows-desktop"]}]},{"id":"en301549-video-player-no-captions","data":[{"type":"issue","impact":4,"checkpoint":"en301549-7.1.1","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"en301549-7.1.1"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","pdf","kiosk","ms-excel","ms-powerpoint","ms-word","windows-desktop"]}]},{"id":"en301549-video-player-subtitles-not-spoken","data":[{"type":"issue","impact":2,"checkpoint":"en301549-7.1.5","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"en301549-7.1.5"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","pdf","kiosk","ms-excel","ms-powerpoint","ms-word","windows-desktop"]}]},{"id":"eu-wad-feedback-missing","data":[{"type":"issue","impact":4,"checkpoint":"eu-wad-2","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"eu-wad-2"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]}]},{"id":"eu-wad-statement-missing","data":[{"type":"issue","impact":4,"checkpoint":"eu-wad-1","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"eu-wad-1"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]}]},{"id":"eu-wad-statement-missing-enforcement-content","data":[{"type":"issue","impact":4,"checkpoint":"eu-wad-1","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"eu-wad-1"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]}]},{"id":"eu-wad-statement-missing-feedback-content","data":[{"type":"issue","impact":4,"checkpoint":"eu-wad-1","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"eu-wad-1"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]}]},{"id":"eu-wad-statement-missing-general-content","data":[{"type":"issue","impact":3,"checkpoint":"eu-wad-1","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"eu-wad-1"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]}]},{"id":"eu-wad-statement-not-accessible","data":[{"type":"issue","impact":3,"checkpoint":"eu-wad-1","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"eu-wad-1"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]}]},{"id":"eu-wad-statement-wrong-place-mobile","data":[{"type":"issue","impact":4,"checkpoint":"eu-wad-1","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"eu-wad-1"}],"testingMethodologies":["native-mobile-android","native-mobile-ios"]}]},{"id":"eu-wad-statement-wrong-place-web","data":[{"type":"issue","impact":4,"checkpoint":"eu-wad-1","standards":["en301549-wad"],"references":[{"standards":["en301549-wad"],"checkpoint":"eu-wad-1"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]}]},{"id":"expand-collapse-state","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"focus-different-device","data":[{"type":"best-practice","impact":1,"checkpoint":"2.4.7.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"2.4.7.a"}],"decisionDate":"20130409","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":1,"checkpoint":"s.5.2","standards":["smoke"],"references":[],"decisionDate":"20130409","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.7.a","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"focus-errors-elsewhere","data":[{"type":"best-practice","impact":3,"checkpoint":"2.4.3.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.3.a"}],"decisionDate":"20180205","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.3.a","type":"best-practice","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"focus-errors-none","data":[{"type":"best-practice","impact":3,"checkpoint":"2.4.3.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.3.a"}],"decisionDate":"20180205","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.3.a","type":"best-practice","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"focus-fully-obscured","data":[{"type":"issue","impact":2,"checkpoint":"2.4.11.a","standards":["wcag22aa"],"references":[{"standards":["wcag22aa"],"checkpoint":"2.4.11.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.11.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"focus-fully-visible","data":[{"type":"best-practice","impact":1,"checkpoint":"2.4.11.a","standards":["wcag22aa"],"references":[{"standards":["wcag22aa"],"checkpoint":"2.4.11.a"}],"decisionDate":"20221103","testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.11.a","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]}]},{"id":"focus-indicator-missing","data":[{"type":"issue","impact":4,"checkpoint":"2.4.7.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"2.4.7.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"type":"issue","impact":4,"checkpoint":"s.5.2","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.7.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"focus-lost","data":[{"type":"issue","impact":3,"checkpoint":"2.4.3.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.3.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.5.2","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.3.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"focus-lost-screen-reader","data":[{"type":"issue","impact":3,"checkpoint":"1.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"focus-modal-moves-outside","data":[{"type":"issue","impact":3,"checkpoint":"2.4.3.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.3.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.5.2","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.3.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"focus-modal-moves-outside-switch","data":[{"type":"issue","impact":3,"checkpoint":"2.4.3.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.3.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.3.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android","native-mobile-ios"]}]},{"id":"focus-modal-none","data":[{"type":"issue","impact":3,"checkpoint":"2.4.3.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.3.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.5.2","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.3.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"focus-modal-none-screen-reader","data":[{"type":"issue","impact":3,"checkpoint":"1.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"focus-modal-not-returned","data":[{"type":"issue","impact":3,"checkpoint":"2.4.3.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.3.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.3.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"focus-modal-not-returned-screen-reader","data":[{"type":"issue","impact":3,"checkpoint":"1.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"focus-moves-on-load","data":[{"type":"issue","impact":3,"checkpoint":"3.2.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.2.1.a"}],"testingMethodologies":["desktop","mobile"]},{"type":"issue","impact":3,"checkpoint":"s.10.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.2.1.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"focus-not-clearly-visible","data":[{"type":"issue","impact":3,"checkpoint":"2.4.7.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"2.4.7.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.5.2","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.7.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"focus-not-moved","data":[{"type":"issue","impact":2,"checkpoint":"2.4.3.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.3.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.3.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"focus-not-moved-screen-reader","data":[{"type":"issue","impact":2,"checkpoint":"1.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.2.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"focus-not-obscured-by-user","data":[{"type":"best-practice","impact":1,"checkpoint":"","standards":["wcag22aa"],"references":[{"standards":["wcag22aa"],"checkpoint":""}],"decisionDate":"20221103","testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]}]},{"id":"focus-not-strong","data":[{"type":"issue","impact":2,"checkpoint":"2.4.13.a","standards":["wcag22aaa"],"references":[{"standards":["wcag22aaa"],"checkpoint":"2.4.13.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.13.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"focus-on-hidden-item","data":[{"type":"issue","impact":3,"checkpoint":"2.4.3.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.3.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.3.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"focus-on-hidden-item-screen-reader","data":[{"type":"issue","impact":3,"checkpoint":"1.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.2.a"}],"testingMethodologies":["mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.2.a","type":"issue","impact":3,"testingMethodologies":["mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"focus-on-hidden-item-switch","data":[{"type":"issue","impact":3,"checkpoint":"2.4.3.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.3.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.3.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android","native-mobile-ios"]}]},{"id":"focus-order-first","data":[{"type":"best-practice","impact":2,"checkpoint":"2.4.3.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.3.a"}],"decisionDate":"20180519","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.3.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"focus-submits-form","data":[{"type":"issue","impact":4,"checkpoint":"3.2.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.2.1.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"type":"issue","impact":4,"checkpoint":"s.10.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.2.1.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"focus-visual-affects-keyboard","data":[{"type":"issue","impact":4,"checkpoint":"3.2.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.2.1.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"type":"issue","impact":4,"checkpoint":"s.10.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.2.1.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"focus-visual-affects-screen-reader","data":[{"type":"issue","impact":4,"checkpoint":"3.2.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.2.1.a"}],"testingMethodologies":["mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.2.1.a","type":"issue","impact":4,"testingMethodologies":["mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"focus-visual-affects-switch","data":[{"type":"issue","impact":4,"checkpoint":"3.2.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.2.1.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.2.1.a","type":"issue","impact":4,"testingMethodologies":["native-mobile-android","native-mobile-ios"]}]},{"id":"focus-window-launches","data":[{"type":"issue","impact":3,"checkpoint":"3.2.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.2.1.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.10.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.2.1.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"form-accidental-submission-recovery","data":[{"type":"issue","impact":3,"checkpoint":"3.3.4.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"3.3.4.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.11.3","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.4.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"form-error-field-not-identified","data":[{"type":"issue","impact":4,"checkpoint":"3.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.1.b"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":4,"checkpoint":"s.11.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.1.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"form-error-format","data":[{"type":"issue","impact":3,"checkpoint":"3.3.3.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"3.3.3.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.3.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"form-error-not-associated","data":[{"type":"best-practice","impact":3,"checkpoint":"1.3.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.a"}],"decisionDate":"20160203","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":3,"checkpoint":"3.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.1.b"}],"decisionDate":"20160203","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":3,"checkpoint":"s.11.1","standards":["smoke"],"references":[],"decisionDate":"20160203","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.1.b","type":"best-practice","impact":3,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.a","type":"best-practice","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"form-error-not-auto-announced","data":[{"type":"best-practice","impact":3,"checkpoint":"3.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.1.b"}],"decisionDate":"20180416","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.1.b","type":"best-practice","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"form-error-not-descriptive","data":[{"type":"best-practice","impact":3,"checkpoint":"3.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.1.b"}],"decisionDate":"20160203","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.1.b","type":"best-practice","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"form-error-positioned-improperly","data":[{"type":"best-practice","impact":3,"checkpoint":"3.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.1.b"}],"decisionDate":"20161104","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.1.b","type":"best-practice","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"form-error-range","data":[{"type":"issue","impact":3,"checkpoint":"3.3.3.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"3.3.3.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.3.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"form-error-required-unclear","data":[{"type":"issue","impact":3,"checkpoint":"3.3.2.c","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.2.c"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.2.c","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"form-error-unhelpful","data":[{"type":"issue","impact":3,"checkpoint":"3.3.3.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"3.3.3.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.3.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"form-error-unreadable","data":[{"type":"issue","impact":4,"checkpoint":"3.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.1.b"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":4,"checkpoint":"s.11.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.1.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"form-error-validation-not-described","data":[{"type":"issue","impact":4,"checkpoint":"3.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.1.b"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":4,"checkpoint":"s.11.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.1.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"form-errors-color-only","data":[{"type":"issue","impact":3,"checkpoint":"1.4.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.4.1.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.4.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.1.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"form-field-missing-label","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":4,"testingMethodologies":["native-mobile-android","native-mobile-ios"]}]},{"id":"form-group-not-labeled","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"form-implicit-submit","data":[{"type":"best-practice","impact":2,"checkpoint":"3.2.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.2.2.a"}],"decisionDate":"20170828","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.2.2.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"form-label-missing","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"form-parts-unnamed","data":[{"type":"issue","impact":3,"checkpoint":"1.3.1.c","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.c"}],"testingMethodologies":["desktop","mobile"],"deprecated":true},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.c","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"form-review","data":[{"type":"issue","impact":3,"checkpoint":"3.3.4.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"3.3.4.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.11.3","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.4.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"form-review-recovery","data":[{"type":"issue","impact":3,"checkpoint":"3.3.4.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"3.3.4.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.11.3","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.4.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"form-submission-not-checked","data":[{"type":"issue","impact":3,"checkpoint":"3.3.6.a","standards":["wcag2aaa","aenb-77"],"references":[{"standards":["wcag2aaa","aenb-77"],"checkpoint":"3.3.6.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.6.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"form-title-duplicates-label","data":[{"type":"best-practice","impact":1,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"decisionDate":"20130319","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"heading-empty","data":[{"type":"best-practice","impact":1,"checkpoint":"1.3.1.e","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.e"}],"decisionDate":"20150319","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.e","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"heading-level-increase","data":[{"type":"best-practice","impact":2,"checkpoint":"1.3.1.e","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.e"}],"decisionDate":"20130423","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.e","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"heading-level-order","data":[{"type":"issue","impact":3,"checkpoint":"1.3.1.e","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.e"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.e","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"heading-missing","data":[{"type":"issue","impact":2,"checkpoint":"2.4.10.a","standards":["wcag2aaa","aenb-77"],"references":[{"standards":["wcag2aaa","aenb-77"],"checkpoint":"2.4.10.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.10.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"heading-multiple-h1s","data":[{"type":"best-practice","impact":1,"checkpoint":"1.3.1.e","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.e"}],"decisionDate":"20130319","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.e","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"heading-no-h1","data":[{"type":"best-practice","impact":2,"checkpoint":"1.3.1.e","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.e"}],"decisionDate":"20130423","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.e","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"heading-none","data":[{"type":"best-practice","impact":3,"checkpoint":"1.3.1.e","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.e"}],"decisionDate":"20130423","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.e","type":"best-practice","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"heading-not-descriptive","data":[{"type":"issue","impact":2,"checkpoint":"2.4.6.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"2.4.6.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":2,"checkpoint":"s.9.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.6.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"help-all-always-available","data":[{"type":"best-practice","impact":2,"checkpoint":"3.2.6.a","standards":["wcag22aa"],"references":[{"standards":["wcag22aa"],"checkpoint":"3.2.6.a"}],"decisionDate":"20221103","testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.2.6.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]}]},{"id":"help-always-available","data":[{"type":"best-practice","impact":2,"checkpoint":"3.2.6.a","standards":["wcag22aa"],"references":[{"standards":["wcag22aa"],"checkpoint":"3.2.6.a"}],"decisionDate":"20221103","testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.2.6.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]}]},{"id":"help-consistent-every-page","data":[{"type":"best-practice","impact":1,"checkpoint":"3.2.6.a","standards":["wcag22aa"],"references":[{"standards":["wcag22aa"],"checkpoint":"3.2.6.a"}],"decisionDate":"20221103","testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.2.6.a","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]}]},{"id":"help-not-consistent","data":[{"type":"issue","impact":2,"checkpoint":"3.2.6.a","standards":["wcag22aa"],"references":[{"standards":["wcag22aa"],"checkpoint":"3.2.6.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.2.6.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"help-time-described","data":[{"type":"best-practice","impact":2,"checkpoint":"3.2.6.a","standards":["wcag22aa"],"references":[{"standards":["wcag22aa"],"checkpoint":"3.2.6.a"}],"decisionDate":"20221103","testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.2.6.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]}]},{"id":"help-visually-consistent","data":[{"type":"best-practice","impact":2,"checkpoint":"3.2.6.a","standards":["wcag22aa"],"references":[{"standards":["wcag22aa"],"checkpoint":"3.2.6.a"}],"decisionDate":"20221103","testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.2.6.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]}]},{"id":"html-invalid","data":[{"type":"best-practice","impact":2,"checkpoint":"4.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.1.a"}],"decisionDate":"20130429","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.1.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"id-input-purpose-inaccurate","data":[{"type":"issue","impact":3,"checkpoint":"1.3.5.a","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.3.5.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.5.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"id-input-purpose-missing","data":[{"type":"issue","impact":3,"checkpoint":"1.3.5.a","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.3.5.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.5.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"image-map-equivalent","data":[{"type":"issue","impact":4,"checkpoint":"1.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.1.1.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.1.1.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"image-of-text","data":[{"type":"issue","impact":3,"checkpoint":"1.4.5.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.5.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.1.3","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.5.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"inconsistent-component-id","data":[{"type":"issue","impact":3,"checkpoint":"3.2.4.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"3.2.4.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.2.4.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"inconsistent-form-id","data":[{"type":"issue","impact":3,"checkpoint":"3.2.4.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"3.2.4.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.2.4.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"inconsistent-link","data":[{"type":"issue","impact":3,"checkpoint":"3.2.4.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"3.2.4.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.2.4.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"inconsistent-nav","data":[{"type":"issue","impact":3,"checkpoint":"3.2.3.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"3.2.3.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.2.3.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"info-relationship-visual-only","data":[{"type":"issue","impact":4,"checkpoint":"1.3.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"information-color","data":[{"type":"issue","impact":3,"checkpoint":"1.4.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.4.1.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.4.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.1.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"information-requires-hearing","data":[{"type":"issue","impact":3,"checkpoint":"1.3.3.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.3.b"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.3.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"information-requires-vision","data":[{"type":"issue","impact":3,"checkpoint":"1.3.3.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.3.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.3.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.3.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"input-format-clarification","data":[{"type":"best-practice","impact":2,"checkpoint":"3.3.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.2.b"}],"decisionDate":"20160829","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.2.b","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"input-range-clarification","data":[{"type":"best-practice","impact":2,"checkpoint":"3.3.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.2.b"}],"decisionDate":"20170327","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.2.b","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"instructions-not-accurate","data":[{"type":"issue","impact":3,"checkpoint":"3.3.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.2.b"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.2.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"instructions-not-associated","data":[{"type":"best-practice","impact":3,"checkpoint":"1.3.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.a"}],"decisionDate":"20170327","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":3,"checkpoint":"3.3.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.2.b"}],"decisionDate":"20170327","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.2.b","type":"best-practice","impact":3,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.a","type":"best-practice","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"instructions-not-descriptive","data":[{"type":"best-practice","impact":2,"checkpoint":"3.3.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.2.b"}],"decisionDate":"20160627","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.2.b","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"instructions-not-included","data":[{"type":"issue","impact":3,"checkpoint":"3.3.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.2.b"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.2.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"instructions-positioned-improperly","data":[{"type":"best-practice","impact":3,"checkpoint":"3.3.2.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.2.b"}],"decisionDate":"20161104","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.2.b","type":"best-practice","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"ios-active-role-inappropriate","data":[{"type":"issue","impact":2,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":2,"testingMethodologies":["native-mobile-ios"]}]},{"id":"ios-control-actionable","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-ios"]}]},{"id":"ios-control-alert","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-ios"]}]},{"id":"ios-control-custom","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-ios"]}]},{"id":"ios-control-custom-checkbox","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-ios"]}]},{"id":"ios-control-custom-radio-button","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-ios"]}]},{"id":"ios-control-date-picker","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-ios"]}]},{"id":"ios-control-editable-textview","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-ios"]}]},{"id":"ios-control-link","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-ios"]}]},{"id":"ios-control-page-control","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-ios"]}]},{"id":"ios-control-picker","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-ios"]}]},{"id":"ios-control-popover","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-ios"]}]},{"id":"ios-control-progress","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-ios"]}]},{"id":"ios-control-search","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-ios"]}]},{"id":"ios-control-segmented-control","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-ios"]}]},{"id":"ios-control-slider","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-ios"]}]},{"id":"ios-control-stepper","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-ios"]}]},{"id":"ios-control-switch","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-ios"]}]},{"id":"ios-control-tab-bar","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-ios"]}]},{"id":"ios-control-text-field","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-ios"]}]},{"id":"keyboard-accesskey-nonunique","data":[{"type":"issue","impact":2,"checkpoint":"2.1.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.1.1.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.1.1.b","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"keyboard-cannot-extend-session","data":[{"type":"issue","impact":4,"checkpoint":"2.2.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.2.1.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"type":"issue","impact":4,"checkpoint":"s.6.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.2.1.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"keyboard-character-key-shortcuts","data":[{"type":"issue","impact":3,"checkpoint":"2.1.4.a","standards":["wcag21a"],"references":[{"standards":["wcag21a"],"checkpoint":"2.1.4.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.1.4.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"keyboard-custom-gestures-not-accessible","data":[{"type":"issue","impact":4,"checkpoint":"2.1.1.c","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.1.1.c"}],"testingMethodologies":["native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.1.1.c","type":"issue","impact":4,"testingMethodologies":["native-mobile-android","native-mobile-ios"]}]},{"id":"keyboard-inaccessible","data":[{"type":"issue","impact":4,"checkpoint":"2.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.1.1.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.1.1.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"keyboard-inaccessible-aaa","data":[{"type":"issue","impact":4,"checkpoint":"2.1.3.a","standards":["wcag2aaa","aenb-77"],"references":[{"standards":["wcag2aaa","aenb-77"],"checkpoint":"2.1.3.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.1.3.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"keyboard-inpage-link-not-accessible","data":[{"type":"issue","impact":2,"checkpoint":"2.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.1.1.a"}],"testingMethodologies":["desktop","mobile"]},{"type":"issue","impact":2,"checkpoint":"s.5.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.1.1.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"keyboard-nonstandard-no-instructions","data":[{"type":"best-practice","impact":4,"checkpoint":"2.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.1.1.a"}],"decisionDate":"20190108","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.1.1.a","type":"best-practice","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"keyboard-not-switch-accessible","data":[{"type":"issue","impact":4,"checkpoint":"2.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.1.1.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.1.1.a","type":"issue","impact":4,"testingMethodologies":["native-mobile-android","native-mobile-ios"]}]},{"id":"keyboard-not-touch-accessible","data":[{"type":"issue","impact":4,"checkpoint":"2.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.1.1.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":4,"checkpoint":"s.5.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.1.1.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"keyboard-not-voice-control-accessible","data":[{"type":"issue","impact":4,"checkpoint":"2.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.1.1.a"}],"testingMethodologies":["native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.1.1.a","type":"issue","impact":4,"testingMethodologies":["native-mobile-ios"]}]},{"id":"keyboard-shortcut-conflict","data":[{"type":"issue","impact":3,"checkpoint":"2.1.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.1.1.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.1.1.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"keyboard-trap","data":[{"type":"issue","impact":4,"checkpoint":"2.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.1.2.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"type":"issue","impact":4,"checkpoint":"s.5.2","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.1.2.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"keyboard-trap-screen-reader","data":[{"type":"issue","impact":4,"checkpoint":"2.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.1.2.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.1.2.a","type":"issue","impact":4,"testingMethodologies":["native-mobile-android","native-mobile-ios"]}]},{"id":"keyboard-trap-screen-reader-dialog","data":[{"type":"issue","impact":4,"checkpoint":"2.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.1.2.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.1.2.a","type":"issue","impact":4,"testingMethodologies":["native-mobile-android","native-mobile-ios"]}]},{"id":"keyboard-trap-switch","data":[{"type":"issue","impact":4,"checkpoint":"2.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.1.2.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.1.2.a","type":"issue","impact":4,"testingMethodologies":["native-mobile-android","native-mobile-ios"]}]},{"id":"keyboard-trap-switch-dialog","data":[{"type":"issue","impact":4,"checkpoint":"2.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.1.2.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.1.2.a","type":"issue","impact":4,"testingMethodologies":["native-mobile-android","native-mobile-ios"]}]},{"id":"label-group-checkboxes-not-associated","data":[{"type":"issue","impact":3,"checkpoint":"1.3.1.d","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.d"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.d","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"label-group-not-associated","data":[{"type":"issue","impact":3,"checkpoint":"1.3.1.d","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.d"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.d","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"label-group-not-present","data":[{"type":"issue","impact":3,"checkpoint":"3.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"label-group-radio-not-associated","data":[{"type":"issue","impact":3,"checkpoint":"1.3.1.d","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.d"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.d","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"label-header-not-associated","data":[{"type":"issue","impact":4,"checkpoint":"1.3.1.c","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.c"}],"testingMethodologies":["desktop","mobile"],"deprecated":true},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.c","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"label-implicit","data":[{"type":"best-practice","impact":1,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"decisionDate":"20170424","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"label-is-missing-select","data":[{"type":"issue","impact":2,"checkpoint":"3.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.2.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"label-is-placeholder","data":[{"type":"issue","impact":3,"checkpoint":"3.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"label-is-placeholder-chat","data":[{"type":"issue","impact":1,"checkpoint":"3.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.2.a","type":"issue","impact":1,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"label-missing","data":[{"type":"issue","impact":4,"checkpoint":"1.3.1.c","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.c"}],"testingMethodologies":["desktop","mobile"],"deprecated":true},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.c","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"label-multiple-associated","data":[{"type":"issue","impact":4,"checkpoint":"1.3.1.c","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.c"}],"testingMethodologies":["desktop","mobile"],"deprecated":true},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.c","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"label-not-associated","data":[{"type":"issue","impact":4,"checkpoint":"1.3.1.c","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.c"}],"testingMethodologies":["desktop","mobile"],"deprecated":true},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.c","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"label-not-descriptive","data":[{"type":"issue","impact":3,"checkpoint":"2.4.6.b","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"2.4.6.b"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.11.2","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.6.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"label-not-present","data":[{"type":"issue","impact":3,"checkpoint":"3.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.11.2","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"label-orphaned","data":[{"type":"best-practice","impact":1,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"decisionDate":"20130319","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"label-position-bad","data":[{"type":"best-practice","impact":3,"checkpoint":"3.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.2.a"}],"decisionDate":"20180305","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":3,"checkpoint":"s.11.2","standards":["smoke"],"references":[],"decisionDate":"20180305","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.2.a","type":"best-practice","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"label-programmatic-not-descriptive","data":[{"type":"issue","impact":3,"checkpoint":"2.4.6.b","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"2.4.6.b"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.11.2","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.6.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"label-redundant-button","data":[{"type":"best-practice","impact":1,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"decisionDate":"20180509","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"label-select-placeholder","data":[{"type":"best-practice","impact":2,"checkpoint":"3.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.2.a"}],"decisionDate":"20170612","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.2.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"label-title-only","data":[{"type":"best-practice","impact":1,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"decisionDate":"20170516","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"label-visible-not-descriptive","data":[{"type":"issue","impact":3,"checkpoint":"2.4.6.b","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"2.4.6.b"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.11.2","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.6.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"landmark-missing","data":[{"type":"issue","impact":2,"checkpoint":"1.3.6.a","standards":["wcag21aaa","aenb-77"],"references":[{"standards":["wcag21aaa","aenb-77"],"checkpoint":"1.3.6.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.6.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"lang-change-not-marked","data":[{"type":"issue","impact":3,"checkpoint":"3.1.2.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"3.1.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.1.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-ios"]}]},{"id":"lang-change-not-valid","data":[{"type":"issue","impact":3,"checkpoint":"3.1.2.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"3.1.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.1.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-ios","windows-desktop"]}]},{"id":"lang-invalid","data":[{"type":"issue","impact":3,"checkpoint":"3.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.1.1.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.1.1.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"lang-not-accurate","data":[{"type":"issue","impact":3,"checkpoint":"3.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.1.1.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.1.1.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"lang-not-defined","data":[{"type":"issue","impact":3,"checkpoint":"3.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.1.1.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.1.1.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"lang-not-defined-non-web","data":[{"type":"issue","impact":3,"checkpoint":"3.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.1.1.a"}],"testingMethodologies":["windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.1.1.a","type":"issue","impact":3,"testingMethodologies":["windows-desktop"]}]},{"id":"legend-missing","data":[{"type":"best-practice","impact":1,"checkpoint":"1.3.1.d","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.d"}],"decisionDate":"20130409","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.d","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"link-acts-like-button","data":[{"type":"best-practice","impact":2,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"decisionDate":"20170626","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"link-disclaimer","data":[{"type":"issue","impact":3,"checkpoint":"382.43.e","standards":["acaa"],"references":[{"standards":["acaa"],"checkpoint":"382.43.e"}],"testingMethodologies":["desktop","mobile"]}]},{"id":"link-insufficient-contrast","data":[{"type":"issue","impact":3,"checkpoint":"1.4.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.4.1.b"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.4.2","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.1.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"link-looks-like-button","data":[{"type":"best-practice","impact":2,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"decisionDate":"20170626","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"link-missing-role","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"link-missing-text","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"link-no-mark","data":[{"type":"best-practice","impact":2,"checkpoint":"1.4.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.4.1.b"}],"testingMethodologies":["desktop"]},{"type":"best-practice","impact":2,"checkpoint":"s.4.2","standards":["smoke"],"references":[],"decisionDate":"20210104","testingMethodologies":["desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.1.b","type":"best-practice","impact":2,"testingMethodologies":["desktop"]}]},{"id":"link-purpose-unclear","data":[{"type":"issue","impact":3,"checkpoint":"2.4.4.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.4.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.4.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"link-purpose-unclear-alone","data":[{"type":"issue","impact":2,"checkpoint":"2.4.9.a","standards":["wcag2aaa","aenb-77"],"references":[{"standards":["wcag2aaa","aenb-77"],"checkpoint":"2.4.9.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.9.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"link-purpose-unclear-multiple","data":[{"type":"issue","impact":3,"checkpoint":"2.4.4.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.4.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.4.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"link-purpose-unidentifiable-from-text","data":[{"type":"best-practice","impact":2,"checkpoint":"2.4.4.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.4.a"}],"decisionDate":"20130326","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.4.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"link-target-not-indicated","data":[{"type":"best-practice","impact":2,"checkpoint":"3.2.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.2.2.a"}],"decisionDate":"20130416","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":2,"checkpoint":"s.10.2","standards":["smoke"],"references":[],"decisionDate":"20130416","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.2.2.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"modal-forces-submission","data":[{"type":"issue","impact":4,"checkpoint":"2.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.1.1.a"}],"testingMethodologies":["desktop","mobile"]},{"type":"issue","impact":4,"checkpoint":"s.5.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.1.1.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"modal-no-esc","data":[{"type":"best-practice","impact":1,"checkpoint":"2.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.1.1.a"}],"decisionDate":"20130326","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":1,"checkpoint":"s.5.1","standards":["smoke"],"references":[],"decisionDate":"20130326","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.1.1.a","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"modal-only-esc","data":[{"type":"best-practice","impact":1,"checkpoint":"2.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.1.1.a"}],"decisionDate":"20200213","testingMethodologies":["desktop"]},{"type":"best-practice","impact":1,"checkpoint":"s.5.1","standards":["smoke"],"references":[],"decisionDate":"20130326","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.1.1.a","type":"best-practice","impact":1,"testingMethodologies":["desktop"]}]},{"id":"modal-unclosable","data":[{"type":"issue","impact":4,"checkpoint":"2.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.1.1.a"}],"testingMethodologies":["desktop","mobile"]},{"type":"issue","impact":4,"checkpoint":"s.5.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.1.1.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"motion-actuation-cannot-disable","data":[{"type":"issue","impact":3,"checkpoint":"2.5.4.a","standards":["wcag21a"],"references":[{"standards":["wcag21a"],"checkpoint":"2.5.4.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.5.4.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"motion-actuation-disrupts-system","data":[{"type":"issue","impact":3,"checkpoint":"2.5.4.a","standards":["wcag21a"],"references":[{"standards":["wcag21a"],"checkpoint":"2.5.4.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.5.4.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"motion-actuation-required","data":[{"type":"issue","impact":3,"checkpoint":"2.5.4.a","standards":["wcag21a"],"references":[{"standards":["wcag21a"],"checkpoint":"2.5.4.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.5.4.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"motion-animation","data":[{"type":"issue","impact":2,"checkpoint":"2.3.3.a","standards":["wcag21aaa","aenb-77"],"references":[{"standards":["wcag21aaa","aenb-77"],"checkpoint":"2.3.3.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.3.3.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"name-section","data":[{"type":"best-practice","impact":2,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"decisionDate":"20171009","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"nav-sections-not-identified","data":[{"type":"best-practice","impact":2,"checkpoint":"2.4.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.1.a"}],"decisionDate":"20190228","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":2,"checkpoint":"1.3.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.a"}],"decisionDate":"20190228","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.1.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"new-content-bad-location","data":[{"type":"issue","impact":3,"checkpoint":"1.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.2.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"new-content-modal-not-announced","data":[{"type":"best-practice","impact":3,"checkpoint":"1.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.2.a"}],"decisionDate":"20180502","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.2.a","type":"best-practice","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"new-content-not-announced","data":[{"type":"best-practice","impact":3,"checkpoint":"1.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.2.a"}],"decisionDate":"20180502","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.2.a","type":"best-practice","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"nonvisual-description-hard-to-find","data":[{"type":"best-practice","impact":2,"checkpoint":"1.2.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.1.b"}],"decisionDate":"20191023","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.1.b","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"nonvisual-description-inadequate","data":[{"type":"issue","impact":3,"checkpoint":"1.2.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.1.b"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.1.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"nonvisual-description-missing","data":[{"type":"issue","impact":3,"checkpoint":"1.2.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.1.b"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.1.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"nonvisual-description-missing-multimedia","data":[{"type":"issue","impact":3,"checkpoint":"1.2.3.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.3.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.3.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"optional-marked-required","data":[{"type":"best-practice","impact":2,"checkpoint":"3.3.2.c","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.3.2.c"}],"decisionDate":"20160822","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.2.c","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"orientation-content-missing","data":[{"type":"issue","impact":3,"checkpoint":"1.3.4.a","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.3.4.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.4.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"orientation-current","data":[{"type":"issue","impact":3,"checkpoint":"1.3.4.a","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.3.4.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.4.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"orientation-identical-content","data":[{"type":"best-practice","impact":2,"checkpoint":"1.3.4.a","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.3.4.a"}],"decisionDate":"20180703","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.4.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"orientation-identical-size","data":[{"type":"best-practice","impact":2,"checkpoint":"1.3.4.a","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.3.4.a"}],"decisionDate":"20180703","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.4.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"orientation-rotate","data":[{"type":"issue","impact":3,"checkpoint":"1.3.4.a","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.3.4.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.4.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"orientation-rotate-mobile","data":[{"type":"issue","impact":1,"checkpoint":"1.3.4.a","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.3.4.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.4.a","type":"issue","impact":1,"testingMethodologies":["native-mobile-android","native-mobile-ios"]}]},{"id":"quotation-not-indicated","data":[{"type":"issue","impact":2,"checkpoint":"1.3.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"radio-missing-role-state","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"reading-order-browse-outside-modal","data":[{"type":"issue","impact":3,"checkpoint":"1.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.2.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"reading-order-content-mismatch","data":[{"type":"issue","impact":4,"checkpoint":"1.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.2.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"reading-order-content-skipped","data":[{"type":"issue","impact":4,"checkpoint":"1.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":4,"checkpoint":"s.2.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.2.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"reading-order-css-dependent","data":[{"type":"issue","impact":4,"checkpoint":"1.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.2.a"}],"testingMethodologies":["desktop","mobile"],"deprecated":true},{"type":"issue","impact":4,"checkpoint":"s.2.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"],"deprecated":true},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.2.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"reading-order-footnote","data":[{"type":"best-practice","impact":2,"checkpoint":"1.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.2.a"}],"decisionDate":"20180426","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.2.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"reading-order-footnote-return","data":[{"type":"best-practice","impact":1,"checkpoint":"1.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.2.a"}],"decisionDate":"20170111","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.2.a","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"reading-order-hidden-content","data":[{"type":"issue","impact":3,"checkpoint":"1.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.2.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"reading-order-layout-table-non-linear","data":[{"type":"issue","impact":4,"checkpoint":"1.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.2.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"type":"issue","impact":4,"checkpoint":"s.2.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.2.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"reading-order-not-logical","data":[{"type":"issue","impact":4,"checkpoint":"1.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":4,"checkpoint":"s.2.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.2.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"reading-order-visual-order-mismatch","data":[{"type":"best-practice","impact":3,"checkpoint":"1.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.2.a"}],"decisionDate":"20130326","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.2.a","type":"best-practice","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"redundant-entry-required","data":[{"type":"issue","impact":2,"checkpoint":"3.3.7.a","standards":["wcag22aa"],"references":[{"standards":["wcag22aa"],"checkpoint":"3.3.7.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.3.7.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"resize-pinch-to-zoom-disabled","data":[{"type":"issue","impact":3,"checkpoint":"1.4.4.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.4.a"}],"testingMethodologies":["mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.4.a","type":"issue","impact":3,"testingMethodologies":["mobile"]}]},{"id":"resize-text-content-lost","data":[{"type":"issue","impact":3,"checkpoint":"1.4.4.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.4.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.4.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"resize-text-content-lost-mobile","data":[{"type":"issue","impact":3,"checkpoint":"1.4.4.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.4.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.4.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android","native-mobile-ios"]}]},{"id":"resize-text-does-not-respond","data":[{"type":"issue","impact":3,"checkpoint":"1.4.4.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.4.a"}],"testingMethodologies":["desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.4.a","type":"issue","impact":3,"testingMethodologies":["desktop"]}]},{"id":"resize-text-does-not-respond-mobile","data":[{"type":"issue","impact":3,"checkpoint":"1.4.4.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.4.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.4.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android","native-mobile-ios"]}]},{"id":"resize-text-function-lost","data":[{"type":"issue","impact":3,"checkpoint":"1.4.4.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.4.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.4.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"resize-text-function-lost-mobile","data":[{"type":"issue","impact":3,"checkpoint":"1.4.4.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.4.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.4.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android","native-mobile-ios"]}]},{"id":"resize-text-only","data":[{"type":"best-practice","impact":2,"checkpoint":"1.4.4.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"1.4.4.a"}],"decisionDate":"20220114","testingMethodologies":["desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.4.a","type":"best-practice","impact":2,"testingMethodologies":["desktop"]}]},{"id":"s508-auth-tool-info-not-preserved","data":[{"type":"issue","impact":4,"checkpoint":"508-2017-504.2.1","standards":["508-2017-wcag2","508-2017-wcag21"],"references":[{"standards":["508-2017-wcag2","508-2017-wcag21"],"checkpoint":"508-2017-504.2.1"}],"testingMethodologies":["desktop","kiosk","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"s508-auth-tool-no-accessibility-prompts","data":[{"type":"issue","impact":3,"checkpoint":"508-2017-504.3","standards":["508-2017-wcag2","508-2017-wcag21"],"references":[{"standards":["508-2017-wcag2","508-2017-wcag21"],"checkpoint":"508-2017-504.3"}],"testingMethodologies":["desktop","kiosk","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"s508-auth-tool-no-accessible-template","data":[{"type":"issue","impact":3,"checkpoint":"508-2017-504.4","standards":["508-2017-wcag2","508-2017-wcag21"],"references":[{"standards":["508-2017-wcag2","508-2017-wcag21"],"checkpoint":"508-2017-504.4"}],"testingMethodologies":["desktop","kiosk","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"s508-pdf-export-missing-accessibility-info","data":[{"type":"issue","impact":4,"checkpoint":"508-2017-504.2.2","standards":["508-2017-wcag2","508-2017-wcag21"],"references":[{"standards":["508-2017-wcag2","508-2017-wcag21"],"checkpoint":"508-2017-504.2.2"}],"testingMethodologies":["desktop","kiosk","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"s508-product-doc-fails-wcag","data":[{"type":"issue","impact":3,"checkpoint":"508-2017-602.3","standards":["508-2017-wcag2","508-2017-wcag21"],"references":[{"standards":["508-2017-wcag2","508-2017-wcag21"],"checkpoint":"508-2017-602.3"}],"testingMethodologies":["desktop","kiosk","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"s508-product-doc-missing-accessibility-features","data":[{"type":"issue","impact":3,"checkpoint":"508-2017-602.2","standards":["508-2017-wcag2","508-2017-wcag21"],"references":[{"standards":["508-2017-wcag2","508-2017-wcag21"],"checkpoint":"508-2017-602.2"}],"testingMethodologies":["desktop","kiosk","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"s508-product-doc-no-alternative","data":[{"type":"issue","impact":4,"checkpoint":"508-2017-602.4","standards":["508-2017-wcag2","508-2017-wcag21"],"references":[{"standards":["508-2017-wcag2","508-2017-wcag21"],"checkpoint":"508-2017-602.4"}],"testingMethodologies":["desktop","kiosk","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"s508-support-services-do-not-support-disabilities","data":[{"type":"issue","impact":4,"checkpoint":"508-2017-603.3","standards":["508-2017-wcag2","508-2017-wcag21"],"references":[{"standards":["508-2017-wcag2","508-2017-wcag21"],"checkpoint":"508-2017-603.3"}],"testingMethodologies":["desktop","kiosk","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"s508-support-services-no-accessibility-documentation","data":[{"type":"issue","impact":3,"checkpoint":"508-2017-603.2","standards":["508-2017-wcag2","508-2017-wcag21"],"references":[{"standards":["508-2017-wcag2","508-2017-wcag21"],"checkpoint":"508-2017-603.2"}],"testingMethodologies":["desktop","kiosk","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"s508-user-preferences-not-supported","data":[{"type":"issue","impact":3,"checkpoint":"508-2017-503.2","standards":["508-2017-wcag2","508-2017-wcag21"],"references":[{"standards":["508-2017-wcag2","508-2017-wcag21"],"checkpoint":"508-2017-503.2"}],"testingMethodologies":["native-mobile-android","native-mobile-ios","kiosk","windows-desktop"]}]},{"id":"s508-video-player-ad-wrong-level","data":[{"type":"issue","impact":3,"checkpoint":"508-2017-503.4.2","standards":["508-2017-wcag2","508-2017-wcag21"],"references":[{"standards":["508-2017-wcag2","508-2017-wcag21"],"checkpoint":"508-2017-503.4.2"}],"testingMethodologies":["desktop","kiosk","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"s508-video-player-cc-wrong-level","data":[{"type":"issue","impact":3,"checkpoint":"508-2017-503.4.1","standards":["508-2017-wcag2","508-2017-wcag21"],"references":[{"standards":["508-2017-wcag2","508-2017-wcag21"],"checkpoint":"508-2017-503.4.1"}],"testingMethodologies":["desktop","kiosk","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"s508-video-player-no-ad-track","data":[{"type":"issue","impact":4,"checkpoint":"508-2017-503.4","standards":["508-2017-wcag2","508-2017-wcag21"],"references":[{"standards":["508-2017-wcag2","508-2017-wcag21"],"checkpoint":"508-2017-503.4"}],"testingMethodologies":["desktop","kiosk","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"s508-video-player-no-captions","data":[{"type":"issue","impact":4,"checkpoint":"508-2017-503.4","standards":["508-2017-wcag2","508-2017-wcag21"],"references":[{"standards":["508-2017-wcag2","508-2017-wcag21"],"checkpoint":"508-2017-503.4"}],"testingMethodologies":["desktop","kiosk","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"select-missing-role-state","data":[{"type":"issue","impact":4,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"semantic-data-table","data":[{"type":"issue","impact":4,"checkpoint":"1.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.b"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"semantic-data-table-headers","data":[{"type":"issue","impact":4,"checkpoint":"1.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.b"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"semantic-del-ins-missing","data":[{"type":"issue","impact":3,"checkpoint":"1.3.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"semantic-del-ins-plus-text","data":[{"type":"best-practice","impact":2,"checkpoint":"1.3.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.a"}],"decisionDate":"20220207","testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]}]},{"id":"semantic-description-list","data":[{"type":"issue","impact":3,"checkpoint":"1.3.1.f","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.f"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.f","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"semantic-heading","data":[{"type":"issue","impact":3,"checkpoint":"1.3.1.e","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.e"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.e","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"semantic-heading-misused","data":[{"type":"issue","impact":3,"checkpoint":"1.3.1.e","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.e"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.e","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"semantic-heading-mobile","data":[{"type":"issue","impact":2,"checkpoint":"1.3.1.e","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.e"}],"testingMethodologies":["native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.e","type":"issue","impact":2,"testingMethodologies":["native-mobile-android","native-mobile-ios"]}]},{"id":"semantic-hidden","data":[{"type":"issue","impact":4,"checkpoint":"1.3.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.2.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.2.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"semantic-incorrect","data":[{"type":"issue","impact":3,"checkpoint":"1.3.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"semantic-list","data":[{"type":"issue","impact":3,"checkpoint":"1.3.1.f","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.f"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.f","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"semantic-list-nested","data":[{"type":"issue","impact":3,"checkpoint":"1.3.1.f","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.f"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.f","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"semantic-list-or-item","data":[{"type":"issue","impact":3,"checkpoint":"1.3.1.f","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.f"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.f","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"semantic-list-unallowed-children","data":[{"type":"issue","impact":2,"checkpoint":"1.3.1.f","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.f"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.f","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"semantic-list-used-for-presentation","data":[{"type":"issue","impact":2,"checkpoint":"1.3.1.f","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.f"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.f","type":"issue","impact":2,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"semantic-markup-used-for-presentation","data":[{"type":"issue","impact":3,"checkpoint":"1.3.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"semantic-nav","data":[{"type":"issue","impact":2,"checkpoint":"1.3.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"semantic-role-presentation","data":[{"type":"issue","impact":4,"checkpoint":"1.3.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"semantic-strong-or-emphasis-not-used","data":[{"type":"best-practice","impact":1,"checkpoint":"1.3.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.a"}],"decisionDate":"20170424","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.a","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"speech-accessible-name-interspersed","data":[{"type":"issue","impact":3,"checkpoint":"2.5.3.a","standards":["wcag21a"],"references":[{"standards":["wcag21a"],"checkpoint":"2.5.3.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.5.3.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"speech-accessible-name-mismatch","data":[{"type":"issue","impact":3,"checkpoint":"2.5.3.a","standards":["wcag21a"],"references":[{"standards":["wcag21a"],"checkpoint":"2.5.3.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.5.3.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"speech-accessible-name-missing","data":[{"type":"issue","impact":3,"checkpoint":"2.5.3.a","standards":["wcag21a"],"references":[{"standards":["wcag21a"],"checkpoint":"2.5.3.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.5.3.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"speech-accessible-name-order","data":[{"type":"issue","impact":3,"checkpoint":"2.5.3.a","standards":["wcag21a"],"references":[{"standards":["wcag21a"],"checkpoint":"2.5.3.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.5.3.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"speech-accessible-name-other-words-before","data":[{"type":"best-practice","impact":2,"checkpoint":"2.5.3.a","standards":["wcag21a"],"references":[{"standards":["wcag21a"],"checkpoint":"2.5.3.a"}],"decisionDate":"20180703","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.5.3.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"state-aria-expanded-missing-incorrect","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"state-color-only","data":[{"type":"issue","impact":3,"checkpoint":"1.4.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.4.1.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.1.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"state-selected-missing-incorrect","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"state-table-sort","data":[{"type":"issue","impact":3,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"static-focus","data":[{"type":"best-practice","impact":2,"checkpoint":"2.4.3.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.3.a"}],"decisionDate":"20170925","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.3.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"status-msg-not-auto-announced","data":[{"type":"issue","impact":3,"checkpoint":"4.1.3.a","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"4.1.3.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.3.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"structure-confusing-skiplink","data":[{"type":"best-practice","impact":1,"checkpoint":"2.4.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.1.a"}],"decisionDate":"20150319","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.1.a","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"structure-dom-visual-mismatch","data":[{"type":"best-practice","impact":2,"checkpoint":"2.4.3.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.3.a"}],"decisionDate":"20130326","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.3.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"structure-duplicate-ids","data":[{"type":"best-practice","impact":2,"checkpoint":"4.1.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.1.a"}],"decisionDate":"20230707","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.1.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"structure-finding-pages-difficult","data":[{"type":"issue","impact":2,"checkpoint":"2.4.5.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"2.4.5.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.5.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"structure-finding-screens-difficult","data":[{"type":"issue","impact":2,"checkpoint":"2.4.5.a","standards":["wcag2aa"],"references":[{"standards":["wcag2aa"],"checkpoint":"2.4.5.a"}],"testingMethodologies":["windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.5.a","type":"issue","impact":2,"testingMethodologies":["windows-desktop"]}]},{"id":"structure-major-problems","data":[{"type":"issue","impact":3,"checkpoint":"2.4.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.1.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.1.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"structure-no-bypass-software","data":[{"type":"issue","impact":3,"checkpoint":"2.4.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.1.a"}],"testingMethodologies":["windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.1.a","type":"issue","impact":3,"testingMethodologies":["windows-desktop"]}]},{"id":"structure-no-nav-bypass-skiplink","data":[{"type":"best-practice","impact":2,"checkpoint":"2.4.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.1.a"}],"decisionDate":"20130402","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.1.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"structure-skiplink-broken","data":[{"type":"issue","impact":3,"checkpoint":"2.4.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.1.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.1.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"structure-skiplink-invisible","data":[{"type":"issue","impact":3,"checkpoint":"2.4.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.1.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.1.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"structure-skiplink-not-first","data":[{"type":"best-practice","impact":1,"checkpoint":"2.4.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.1.a"}],"decisionDate":"20130416","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.1.a","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"structure-skiplink-webkit-incompatible","data":[{"type":"best-practice","impact":1,"checkpoint":"2.4.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.1.a"}],"decisionDate":"20130416","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.1.a","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"tab-order-bad-index","data":[{"type":"issue","impact":3,"checkpoint":"2.4.3.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.3.a"}],"testingMethodologies":["desktop","mobile"]},{"type":"issue","impact":3,"checkpoint":"s.5.2","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.3.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"tab-order-illogical","data":[{"type":"issue","impact":3,"checkpoint":"2.4.3.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.3.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.5.2","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.3.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"table-caption-not-associated","data":[{"type":"best-practice","impact":1,"checkpoint":"1.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.b"}],"decisionDate":"20150212","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.b","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"table-complex-association-incorrect","data":[{"type":"issue","impact":3,"checkpoint":"1.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"table-complex-multiple-associations","data":[{"type":"best-practice","impact":1,"checkpoint":"1.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.b"}],"decisionDate":"20150212","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.b","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"table-complex-no-header-associations","data":[{"type":"issue","impact":4,"checkpoint":"1.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"table-complex-simplify","data":[{"type":"best-practice","impact":2,"checkpoint":"1.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.b"}],"decisionDate":"20150319","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.b","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"table-data-headers-blank","data":[{"type":"issue","impact":0,"checkpoint":"1.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.b","type":"issue","impact":0,"testingMethodologies":["desktop","mobile"]}]},{"id":"table-data-headers-captiony","data":[{"type":"issue","impact":3,"checkpoint":"1.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.b"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"table-data-multiple-combined","data":[{"type":"issue","impact":4,"checkpoint":"1.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"table-data-nested","data":[{"type":"best-practice","impact":2,"checkpoint":"1.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.b"}],"decisionDate":"20150319","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.b","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"table-data-not-header","data":[{"type":"issue","impact":3,"checkpoint":"1.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.b"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"table-data-summary-caption","data":[{"type":"best-practice","impact":1,"checkpoint":"1.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.b"}],"decisionDate":"20150212","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.b","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"table-layout-header-markup","data":[{"type":"issue","impact":3,"checkpoint":"1.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.b","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"table-layout-improper-role","data":[{"type":"best-practice","impact":2,"checkpoint":"1.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.b"}],"decisionDate":"20150319","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.b","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"table-layout-use-css","data":[{"type":"best-practice","impact":1,"checkpoint":"1.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.b"}],"decisionDate":"20130319","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.b","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"table-name-value-pairs","data":[{"type":"best-practice","impact":2,"checkpoint":"1.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.b"}],"decisionDate":"20150319","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.b","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"table-simple-headers-unscoped","data":[{"type":"best-practice","impact":1,"checkpoint":"1.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.b"}],"decisionDate":"20150319","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.b","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"table-simple-scope-incorrect","data":[{"type":"issue","impact":4,"checkpoint":"1.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"table-simple-scope-invalid","data":[{"type":"issue","impact":4,"checkpoint":"1.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.b","type":"issue","impact":4,"testingMethodologies":["desktop","mobile"]}]},{"id":"table-simple-scope-on-td","data":[{"type":"issue","impact":2,"checkpoint":"1.3.1.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.b","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"target-size-enhanced","data":[{"type":"best-practice","impact":2,"checkpoint":"2.5.8.a","standards":["wcag22aa"],"references":[{"standards":["wcag22aa"],"checkpoint":"2.5.8.a"}],"decisionDate":"20221103","testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.5.8.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]}]},{"id":"target-size-non-web","data":[{"type":"issue","impact":3,"checkpoint":"2.5.8.a","standards":["wcag22aa"],"references":[{"standards":["wcag22aa"],"checkpoint":"2.5.8.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.5.8.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"target-size-small","data":[{"type":"issue","impact":3,"checkpoint":"2.5.8.a","standards":["wcag22aa"],"references":[{"standards":["wcag22aa"],"checkpoint":"2.5.8.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.5.8.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]}]},{"id":"text-alternative-inadequate","data":[{"type":"issue","impact":3,"checkpoint":"1.2.3.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.3.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.3.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"text-spacing-cut-off","data":[{"type":"issue","impact":3,"checkpoint":"1.4.12.a","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.12.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.12.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"text-spacing-not-adjusted","data":[{"type":"issue","impact":3,"checkpoint":"1.4.12.a","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.12.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.12.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"text-spacing-overlap","data":[{"type":"issue","impact":3,"checkpoint":"1.4.12.a","standards":["wcag21aa"],"references":[{"standards":["wcag21aa"],"checkpoint":"1.4.12.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.4.12.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"text-transcript-hard-to-find","data":[{"type":"best-practice","impact":2,"checkpoint":"1.2.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.1.a"}],"decisionDate":"20191023","testingMethodologies":["desktop","mobile"]},{"type":"best-practice","impact":2,"checkpoint":"1.2.3.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.3.a"}],"decisionDate":"20191023","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.3.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.1.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"text-transcript-inadequate","data":[{"type":"issue","impact":3,"checkpoint":"1.2.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.1.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.1.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"text-transcript-incomplete","data":[{"type":"issue","impact":3,"checkpoint":"1.2.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.1.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.1.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"text-transcript-missing","data":[{"type":"issue","impact":4,"checkpoint":"1.2.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.1.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.1.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"text-transcript-undescribed-effects","data":[{"type":"issue","impact":3,"checkpoint":"1.2.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.1.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.1.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"text-transcript-unidentified-speakers","data":[{"type":"issue","impact":2,"checkpoint":"1.2.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.1.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.1.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"timeout-extension-grace","data":[{"type":"issue","impact":3,"checkpoint":"2.2.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.2.1.a"}],"testingMethodologies":["desktop","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.6.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.2.1.a","type":"issue","impact":3,"testingMethodologies":["desktop","windows-desktop"]}]},{"id":"timeout-no-warning","data":[{"type":"issue","impact":4,"checkpoint":"2.2.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.2.1.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":4,"checkpoint":"s.6.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.2.1.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"timeout-not-announced","data":[{"type":"issue","impact":4,"checkpoint":"2.2.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.2.1.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":4,"checkpoint":"s.6.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.2.1.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"timeout-not-extensible","data":[{"type":"issue","impact":4,"checkpoint":"2.2.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.2.1.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]},{"type":"issue","impact":4,"checkpoint":"s.6.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.2.1.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios"]}]},{"id":"timeout-screenreader","data":[{"type":"issue","impact":4,"checkpoint":"2.2.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.2.1.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":4,"checkpoint":"s.6.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.2.1.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"timeout-switch","data":[{"type":"issue","impact":4,"checkpoint":"2.2.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.2.1.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.2.1.a","type":"issue","impact":4,"testingMethodologies":["native-mobile-android","native-mobile-ios"]}]},{"id":"title-empty","data":[{"type":"issue","impact":3,"checkpoint":"2.4.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.2.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"title-iframe-duplicate","data":[{"type":"issue","impact":2,"checkpoint":"2.4.6.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.6.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.6.b","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"title-iframe-missing","data":[{"type":"issue","impact":2,"checkpoint":"4.1.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"4.1.2.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-4.1.2.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"title-iframe-not-meaningful","data":[{"type":"issue","impact":2,"checkpoint":"2.4.6.b","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.6.b"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.6.b","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"title-missing","data":[{"type":"issue","impact":3,"checkpoint":"2.4.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.2.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"title-missing-native-mobile","data":[{"type":"issue","impact":3,"checkpoint":"2.4.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.2.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"title-not-meaningful","data":[{"type":"issue","impact":3,"checkpoint":"2.4.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.2.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"title-not-meaningful-native-mobile","data":[{"type":"issue","impact":3,"checkpoint":"2.4.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.2.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.2.a","type":"issue","impact":3,"testingMethodologies":["native-mobile-android","native-mobile-ios"]}]},{"id":"title-not-unique","data":[{"type":"best-practice","impact":2,"checkpoint":"2.4.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"2.4.2.a"}],"decisionDate":"20150903","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.4.2.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"touch-area-spacing","data":[{"type":"best-practice","impact":1,"checkpoint":"2.5.5.a","standards":["wcag21aaa"],"references":[{"standards":["wcag21aaa"],"checkpoint":"2.5.5.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.5.5.a","type":"best-practice","impact":1,"testingMethodologies":["desktop","mobile"]}]},{"id":"touch-down-event","data":[{"type":"issue","impact":3,"checkpoint":"2.5.2.a","standards":["wcag21a"],"references":[{"standards":["wcag21a"],"checkpoint":"2.5.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.5.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"touch-element-grouped","data":[{"type":"best-practice","impact":2,"checkpoint":"2.5.5.a","standards":["wcag21aaa"],"references":[{"standards":["wcag21aaa"],"checkpoint":"2.5.5.a"}],"decisionDate":"20180703","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.5.5.a","type":"best-practice","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"touch-path-based-gesture-required","data":[{"type":"issue","impact":3,"checkpoint":"2.5.1.a","standards":["wcag21a"],"references":[{"standards":["wcag21a"],"checkpoint":"2.5.1.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.5.1.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"touch-single-point-action-not-avail","data":[{"type":"issue","impact":3,"checkpoint":"2.5.1.a","standards":["wcag21a"],"references":[{"standards":["wcag21a"],"checkpoint":"2.5.1.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.5.1.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"touch-size-small","data":[{"type":"issue","impact":2,"checkpoint":"2.5.5.a","standards":["wcag21aaa","aenb-77"],"references":[{"standards":["wcag21aaa","aenb-77"],"checkpoint":"2.5.5.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-2.5.5.a","type":"issue","impact":2,"testingMethodologies":["desktop","mobile"]}]},{"id":"unexpected-change-on-focus","data":[{"type":"issue","impact":4,"checkpoint":"3.2.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.2.1.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"type":"issue","impact":4,"checkpoint":"s.10.1","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.2.1.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"unexpected-change-on-focus-screen-reader","data":[{"type":"issue","impact":4,"checkpoint":"3.2.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.2.1.a"}],"testingMethodologies":["mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.2.1.a","type":"issue","impact":4,"testingMethodologies":["mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"unexpected-change-on-focus-switch","data":[{"type":"issue","impact":4,"checkpoint":"3.2.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.2.1.a"}],"testingMethodologies":["native-mobile-android","native-mobile-ios"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.2.1.a","type":"issue","impact":4,"testingMethodologies":["native-mobile-android","native-mobile-ios"]}]},{"id":"unexpected-change-on-interaction","data":[{"type":"issue","impact":4,"checkpoint":"3.2.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.2.2.a"}],"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]},{"type":"issue","impact":4,"checkpoint":"s.10.2","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.2.2.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","native-mobile-android","native-mobile-ios","windows-desktop"]}]},{"id":"unexpected-change-select","data":[{"type":"issue","impact":4,"checkpoint":"3.2.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.2.2.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"type":"issue","impact":4,"checkpoint":"s.10.2","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.2.2.a","type":"issue","impact":4,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"unexpected-window-launch","data":[{"type":"issue","impact":3,"checkpoint":"3.2.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"3.2.2.a"}],"testingMethodologies":["desktop","mobile","windows-desktop"]},{"type":"issue","impact":3,"checkpoint":"s.10.2","standards":["smoke"],"references":[],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-3.2.2.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile","windows-desktop"]}]},{"id":"user-agent-semantic-del-ins","data":[{"type":"issue","impact":3,"checkpoint":"1.3.1.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.3.1.a"}],"testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.3.1.a","type":"issue","impact":3,"testingMethodologies":["desktop","mobile"]}]},{"id":"video-transcript-missing","data":[{"type":"best-practice","impact":3,"checkpoint":"1.2.2.a","standards":["wcag2a"],"references":[{"standards":["wcag2a"],"checkpoint":"1.2.2.a"}],"decisionDate":"20160602","testingMethodologies":["desktop","mobile"]},{"standards":["EN-301-549"],"checkpoint":"en301549-9-1.2.2.a","type":"best-practice","impact":3,"testingMethodologies":["desktop","mobile"]}]}]');
        },
        2715: module => {
            "use strict";
            module.exports = {
                i8: "4.10.0"
            };
        },
        9876: module => {
            "use strict";
            module.exports = {
                i8: "4.94.1"
            };
        }
    };
    var __webpack_module_cache__ = {};
    function __webpack_require__(moduleId) {
        var cachedModule = __webpack_module_cache__[moduleId];
        if (void 0 !== cachedModule) return cachedModule.exports;
        var module = __webpack_module_cache__[moduleId] = {
            id: moduleId,
            loaded: false,
            exports: {}
        };
        __webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        module.loaded = true;
        return module.exports;
    }
    __webpack_require__.m = __webpack_modules__;
    (() => {
        __webpack_require__.amdO = {};
    })();
    (() => {
        var deferred = [];
        __webpack_require__.O = (result, chunkIds, fn, priority) => {
            if (chunkIds) {
                priority = priority || 0;
                for (var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
                deferred[i] = [ chunkIds, fn, priority ];
                return;
            }
            var notFulfilled = 1 / 0;
            for (i = 0; i < deferred.length; i++) {
                var [chunkIds, fn, priority] = deferred[i];
                var fulfilled = true;
                for (var j = 0; j < chunkIds.length; j++) if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key => __webpack_require__.O[key](chunkIds[j])))) chunkIds.splice(j--, 1); else {
                    fulfilled = false;
                    if (priority < notFulfilled) notFulfilled = priority;
                }
                if (fulfilled) {
                    deferred.splice(i--, 1);
                    var r = fn();
                    if (void 0 !== r) result = r;
                }
            }
            return result;
        };
    })();
    (() => {
        __webpack_require__.n = module => {
            var getter = module && module.__esModule ? () => module["default"] : () => module;
            __webpack_require__.d(getter, {
                a: getter
            });
            return getter;
        };
    })();
    (() => {
        __webpack_require__.d = (exports, definition) => {
            for (var key in definition) if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) Object.defineProperty(exports, key, {
                enumerable: true,
                get: definition[key]
            });
        };
    })();
    (() => {
        __webpack_require__.g = function() {
            if ("object" === typeof globalThis) return globalThis;
            try {
                return this || new Function("return this")();
            } catch (e) {
                if ("object" === typeof window) return window;
            }
        }();
    })();
    (() => {
        __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
    })();
    (() => {
        __webpack_require__.r = exports => {
            if ("undefined" !== typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports, Symbol.toStringTag, {
                value: "Module"
            });
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
        };
    })();
    (() => {
        __webpack_require__.nmd = module => {
            module.paths = [];
            if (!module.children) module.children = [];
            return module;
        };
    })();
    (() => {
        __webpack_require__.j = 352;
    })();
    (() => {
        var installedChunks = {
            352: 0
        };
        __webpack_require__.O.j = chunkId => 0 === installedChunks[chunkId];
        var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
            var [chunkIds, moreModules, runtime] = data;
            var moduleId, chunkId, i = 0;
            if (chunkIds.some((id => 0 !== installedChunks[id]))) {
                for (moduleId in moreModules) if (__webpack_require__.o(moreModules, moduleId)) __webpack_require__.m[moduleId] = moreModules[moduleId];
                if (runtime) var result = runtime(__webpack_require__);
            }
            if (parentChunkLoadingFunction) parentChunkLoadingFunction(data);
            for (;i < chunkIds.length; i++) {
                chunkId = chunkIds[i];
                if (__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) installedChunks[chunkId][0]();
                installedChunks[chunkId] = 0;
            }
            return __webpack_require__.O(result);
        };
        var chunkLoadingGlobal = this["webpackChunk"] = this["webpackChunk"] || [];
        chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
        chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
    })();
    var __webpack_exports__ = __webpack_require__.O(void 0, [ 736 ], (() => __webpack_require__(5974)));
    __webpack_exports__ = __webpack_require__.O(__webpack_exports__);
})();