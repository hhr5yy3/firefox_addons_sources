/*
    This js file requires jquery (jquery.js) to work properly.
*/

/*
    This class adds custom scrollbars to the given element and hides those generated by the browser.
     - since I could not find a generic way how to detect size changes of the element content
     I export the 'resizeScrollbars' private method through the 'update' method and leave it up
     to the user of this class to invoke it (it can be bound to an event, for example).
    */
var CustomScrollbars = function(divElementId) {
    if (divElementId === 'undefined') {
        throw "Need an id of a div to which the scrollbars should be added";
    }

    /* query for the div, for convenience */
    var divElement = $('#' + divElementId)[0];

    /* create a wrapping div to hide the default scrollbars (append after the div to be hidden)*/
    var wrapperId = divElementId + "_scrollbarWrapper";
    var scrollWrapper = $('<div id = "' + wrapperId + '" class="scrollbarWrapper"></div>');
    $('#' + divElementId).after(scrollWrapper);
    /* and move the original div inside the wrapper */
    $('#' + divElementId).appendTo("#" + wrapperId);

    /* create scrollbars and insert them after the newly-created wrapper div */
    var scrollXElement = $('<div id = "' + divElementId + "_scrollbarX" + '" class="scrollbarX"></div>');
    var scrollYElement = $('<div id = "' + divElementId + "_scrollbarY" + '" class="scrollbarY"></div>');
    scrollWrapper.after(scrollYElement);
    scrollWrapper.after(scrollXElement);

    /* method to hide native scrollbars */
    var hideNativeScrollbars = function() {
        // compute the margins ( does not include the element border )
        var right_margin = divElement.offsetWidth - divElement.clientWidth;
        var bottom_margin = divElement.offsetHeight - divElement.clientHeight;

        // update margins of the wrapped element to hide the original scrollbar
        $('#' + divElementId).css('margin-bottom', -bottom_margin + 'px');
        $('#' + divElementId).css('margin-right', -right_margin + 'px');

        if (bottom_margin > parseInt(scrollWrapper.css('margin-bottom'))) {
            scrollWrapper.css('margin-bottom', bottom_margin + 'px');
        }
        if (right_margin > parseInt(scrollWrapper.css('margin-right'))) {
            scrollWrapper.css('margin-right', right_margin + 'px');
        }
    };

    // using closure to pass information (scrollXElement, etc.) into the following methods

    /* method that updates the scrollbars' position */
    var updateScrollbarPosition = function() {
        // find the origin for absolutely positioning the scrollbars
        var parentDivRect = scrollWrapper.offsetParent()[0].getBoundingClientRect();

        // horizontal scrollbar
        var ratioH = divElement.scrollWidth / divElement.clientWidth;
        scrollXElement.css('top', scrollWrapper[0].getBoundingClientRect().bottom - parentDivRect.top + "px");
        scrollXElement.css('left', (scrollWrapper[0].getBoundingClientRect().left - 1 - parentDivRect.left + divElement.scrollLeft / ratioH) + "px");

        // vertical scrollbar
        var ratioV = divElement.scrollHeight / divElement.clientHeight;
        scrollYElement.css('top', (scrollWrapper[0].getBoundingClientRect().top - 1 - parentDivRect.top + divElement.scrollTop / ratioV) + "px");
        scrollYElement.css('left', scrollWrapper[0].getBoundingClientRect().right - parentDivRect.left + "px");
    };

    /* method that resizes the wrapper and scrollbars */
    var resizeScrollbars = function() {
        // horizontal scrollbar
        var width = Math.floor(divElement.clientWidth * divElement.clientWidth / divElement.scrollWidth);
        if (width < divElement.clientWidth) {
            scrollXElement.css('width', width + 2 + 'px');
            scrollXElement.css('display', 'inline');
        } else {
            scrollXElement.css('display', 'none');
        }

        // vertical scrollbar
        var height = Math.floor(divElement.clientHeight * divElement.clientHeight / divElement.scrollHeight);
        if (height < divElement.clientHeight) {
            scrollYElement.css('height', height + 2 + 'px');
            scrollYElement.css('display', 'inline');
        } else {
            scrollYElement.css('display', 'none');
        }

        // update scrollbar position
        updateScrollbarPosition();
    };

    /* public access to scrollbar resize (and update) */
    this.update = function() {
        scrollWrapper.css('height',getRenderingArea().height);
        resizeScrollbars();
        console.log("CustomScrollbar resized");
    };

    // public access to HTML element, useful for IntersectionObserver
    this.element = scrollWrapper.get(0);

    /* add scroll event listeners */
    $('#' + divElementId).on("scroll", updateScrollbarPosition);

    /* add drag event listener for the horizontal scrollbar */
    $('#' + divElementId + '_scrollbarX').on("mousedown", function(e) {
        var last = e['pageX'];
        $(document).on("mousemove", function(e) {
            var move = e['pageX'] - last;
            var ratioH = divElement.scrollWidth / divElement.clientWidth;
            $('#' + divElementId).scrollLeft($('#' + divElementId).scrollLeft() + move * ratioH);
            last = e['pageX'];
        });
        $(document).on("mouseup", function(e) {
            $(document).off("mousemove");
        });
    });

    /* add drag event listener for the vertical scrollbar */
    $('#' + divElementId + '_scrollbarY').on("mousedown", function(e) {
        var last = e['pageY'];
        $(document).on("mousemove", function(e) {
            var move = e['pageY'] - last;
            var ratioV = divElement.scrollHeight / divElement.clientHeight;

            $('#' + divElementId).scrollTop($('#' + divElementId).scrollTop() + move * ratioV);
            last = e['pageY'];
        });
        $(document).on("mouseup", function(e) {
            $(document).off("mousemove");
        });
    });

    // part of the constructor is resizing the scrollbars according to the content
    resizeScrollbars();
};

/*
    OLD TEMPLATE SCROLLBAR DEFINITION:
    <div id="renderDivScrollY">
        <img id="renderDivScrollYHandle" src="assets/img/handle_vertical.png"  />
    </div>
    <div id="renderDivScrollX">
        <img id="renderDivScrollXHandle" src="assets/img/handle_horizontal.png" />
    </div>
*/
