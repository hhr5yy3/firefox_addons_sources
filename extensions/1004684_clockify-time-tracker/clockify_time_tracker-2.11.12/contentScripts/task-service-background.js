class TaskService extends ClockifyService{constructor(){}static async getUrlProjects(){return`${await this.apiEndpoint}/workspaces/${await this.workspaceId}/projects`}static async getTask(t){const a=`${await this.getUrlProjects()}/taskIds`,s={ids:[t]},{data:e,error:r,status:i}=await this.apiCall(a,"POST",s);return 200===i&&e.length>0?e[0]:null}static async getOrCreateTask(t,a){let s=null,e=(t.tasks||[]).find((t=>t.name===a));if(!e){const{data:r,error:i}=await this.getTaskOfProject({projectId:t.id,taskName:encodeURIComponent(a)});e=r&&r.length>0?r[0]:null,s=i}const r=await this.getCreateObjects(),i=await this.getCanCreateTasks();if(!e&&r&&i){const{data:r,error:i,status:c}=await this.createTask(t.id,a);e=r,i&&(i.status,s=i)}return{task:e,error:s}}static async getTaskOfProject({projectId:t,taskName:a}){const s=`${await this.apiEndpoint}/v1/workspaces/${await this.workspaceId}/projects/${t}/tasks?name=${a}&strict-name-search=true`;return await this.apiCall(s)}static async createTask(t,a){const s=`${await this.getUrlProjects()}/${t}/tasks/`,e={name:a,projectId:t};return await this.apiCall(s,"POST",e)}}