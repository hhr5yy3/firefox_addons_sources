var w=Object.create;var u=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var C=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var S=(s,e)=>()=>(e||s((e={exports:{}}).exports,e),e.exports);var E=(s,e,t,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of x(e))!y.call(s,n)&&n!==t&&u(s,n,{get:()=>e[n],enumerable:!(o=f(e,n))||o.enumerable});return s};var M=(s,e,t)=>(t=s!=null?w(C(s)):{},E(e||!s||!s.__esModule?u(t,"default",{value:s,enumerable:!0}):t,s));var r=class extends HTMLDialogElement{constructor(e){super(),this.error=e,this.gmailUrl="https://mail.google.com/mail/u/0/",this.mailTo="noterailhelp@gmail.com"}async reportBug(){let{version:e,short_name:t}=chrome.runtime.getManifest(),o=this.error.stack?.replaceAll(`
`,"%0A"),n=navigator.userAgentData.brands[0];n.brand.startsWith("Not")&&(n=navigator.userAgentData.brands[1]);let i=`${this.gmailUrl}?to=${this.mailTo}&su=${this.error.message}&body=Error:%20${this.error.message}%0AStack:%20${o}%0AExtensionId:%20${chrome.runtime.id}%0AExtension%20Name:%20${t}%0AExtension%20Version:%20${e}%0ALanguage:%20${navigator.language}%0ABrowser%20Brand:%20${n.brand}%20${n.version}%0ABrowser%20Info:%20${navigator.userAgent}&fs=1&tf=cm`;await chrome.tabs.create({url:i})}render(){return`<h2>\u{1F62A} ${chrome.i18n.getMessage("sorry_something_went_wrong")} \u{1F41B}</h2>
			<p style="max-width: 50ch;overflow-wrap: break-word;">\u274C ${this.error.message?.replaceAll("<","&lt;")?.replaceAll(">","&gt;")}</p>
			<button style="font-size: 1rem;margin-inline: auto;display: block;"> 
				\u{1F41E} <span>${chrome.i18n.getMessage("report_bug")}</span>
			</button>
			<div style="text-align:center;font-size:x-small;">${chrome.i18n.getMessage("just_one_click")}</div>`}connectedCallback(){this.id="report-bug",this.innerHTML=this.render(),this.showModal(),this.lastElementChild.previousElementSibling.addEventListener("click",this.reportBug.bind(this))}};customElements.define("report-bug",r,{extends:"dialog"});var H=chrome.tabs.query.bind(chrome.tabs),T=chrome.storage.sync.get.bind(chrome.storage.sync),N=chrome.storage.sync.set.bind(chrome.storage.sync),L=chrome.storage.session.get.bind(chrome.storage.session),B=chrome.storage.session.set.bind(chrome.storage.session);var b={0:"red",1:"lime",2:"orchid",3:"orange",4:"cyan",5:"yellow",6:"blue",7:"salmon",8:"green",9:"magenta",10:"",11:"purple",12:"pumpkin",13:"blueviolet"};var c=class extends HTMLElement{constructor(e){super(),this.notebookId=e}render(e){let t=(o,n)=>`<li id="${o.id}"  title="${o.name}">
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" >
				<path 
					fill="${b[n]}" 
					d="M16 0H8C6.9 0 6 .9 6 2V18C6 19.1 6.9 20 8 20H20C21.1 20 22 19.1 22 18V6L16 0M20 18H8V2H15V7H20V18M4 4V22H20V24H4C2.9 24 2 23.1 2 22V4H4Z" />
				<text x="8.5" y="17" style="font-size: 15px;">${o.name[0].toUpperCase()}</text>
			</svg>
			<span>${o.name.slice(0,15)}</span>
		</li>`;return e.map(t).join("")}async connectedCallback(){this.tabIndex=0;let e=await this.getSections();this.innerHTML=this.render(e)}async getSections(){let{[this.notebookId]:e}=await getStore([this.notebookId]);return e??=await chrome.runtime.sendMessage({msg:"getNoteBookSections",notebookId:this.notebookId}),e}async onSwitchNotebook(e){this.notebookId=e;try{let t=await this.getSections();this.innerHTML=this.render(t)}catch(t){console.error(t),document.body.appendChild(new r(t))}}};customElements.define("note-sections",c);var m=new Map;function v(s,...e){let t=e.length,o=[s[0]];for(let i=0;i<t;i++){let h=e[i];if(typeof h=="function"){let g=String(Math.random()).slice(9);m.set(g,h),o.push(g,s[i+1])}else o.push(h,s[i+1])}return"".concat(...o)}var k={"@":(s,e,t)=>(s.addEventListener(e.name.slice(1),m.get(e.value)),t.removeNamedItem(e.name),!0),parseNodeAttr(s){let e=s.attributes,t=e.length;for(;t--;)this[e[t].name.at(0)]?.(s,e[t],e)}};function d(s,...e){let t=v(s,...e),o=document.createRange().createContextualFragment(t);for(let n of o.querySelectorAll("*"))n.hasAttributes()&&k.parseNodeAttr(n);return m.clear(),o}var l=class extends HTMLElement{constructor(){super()}selectPage({target:e}){let t=e.closest("li");if(!t)return;let n={id:e.closest("li").id,title:t.textContent,path:this.sectionName};document.body.dispatchEvent(new CustomEvent("openpage",{detail:n})),setStore({lastPage:n})}pageItem=e=>`<li id="${e.id}"><clip-icon ico="page"></clip-icon> <span>${e.title.slice(0,20)}</span></li>`;render(e){return d`${e.map(this.pageItem).join("")}`}connectedCallback(){let e=[];this.replaceChildren(this.render(e)),$on(this,"click",this.selectPage.bind(this)),$on(this,"addpage",({detail:t})=>this.insertAdjacentHTML("beforeend",this.pageItem(t)))}async onSwitchSection(e,t){this.sectionName=t;try{let o=(await getStore(e))[e]??await chrome.runtime.sendMessage({msg:"getSectionPages",sectionId:e});this.replaceChildren(this.render(o)),chrome.runtime.sendMessage({msg:"replacePageCxtMenu",pages:o})}catch(o){console.error(o),document.body.appendChild(new r(o))}}};customElements.define("note-pages",l);var a=class extends HTMLElement{constructor(e){super(),this.notebookId=e}async createPage(e){try{toast("page creating...");let t=await chrome.runtime.sendMessage({htmlContent:" ",sectionId:this.sectionId,pageTitle:e});if(t.errCaused)return toast(t.errCaused,"error");let o=t;o.path=$("li.open",this).lastElementChild.textContent??"",document.body.dispatchEvent(new CustomEvent("openpage",{detail:o})),this.lastElementChild.dispatchEvent(new CustomEvent("addpage",{detail:o}))}catch(t){console.error(t),document.body.appendChild(new r(t))}}switchSection({target:e}){$("li.open",this)?.classList.remove("open");let t=e.closest("li");if(!t)return;t.className="open",this.sectionId=t?.id;let o=t?.lastElementChild.textContent;this.lastElementChild.onSwitchSection(this.sectionId,o),setStore({lastSectionId:this.sectionId})}render(){return[new c(this.notebookId),new l]}connectedCallback(){this.replaceChildren(...this.render()),$on(this.firstElementChild,"click",this.switchSection.bind(this))}};customElements.define("notebook-content",a);var p=class extends HTMLElement{constructor(){super()}async switchNoteBook({target:e}){let t=e.value;this.lastElementChild.replaceWith(new a(t));let o=await chrome.runtime.sendMessage({msg:"switchNotebook",notebookId:t});if(o.errCaused)return toast(o.errCaused,"error");setStore({openNotebook:t})}createPage({target:e}){let t=e.value;e.value="",this.lastElementChild.createPage(t),e.closest("details").open=!1}render(e){return d`<header>
			<clip-icon ico="notebook"></clip-icon>
			<select @change=${this.switchNoteBook.bind(this)}>
				${e.map(t=>`<option value="${t.id}">${t.name}</option>`).join("")}
			</select>
			<details>
				<summary><clip-icon ico="note-plus"></clip-icon></summary>
				<div><input type="text" placeholder="${i18n("page_title")}" @change=${this.createPage.bind(this)} /></div>
			</details>
		</header> `}async connectedCallback(){this.id="note-drawer",this.setAttribute("popover",""),this.showPopover();try{let e=(await getStore("notebooks")).notebooks??await chrome.runtime.sendMessage({msg:"getNoteBookList"}),t=e[0]?.id;this.replaceChildren(this.render(e)),this.appendChild(new a(t)),setStore({openNotebook:t})}catch(e){console.error(e),document.body.appendChild(new r(e))}}};customElements.define("note-drawer",p);export{S as a,M as b,H as c,T as d,N as e,d as f,r as g,p as h};
