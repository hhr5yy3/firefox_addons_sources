{"version":3,"file":"mutation-types-BIvNkZ3d.js","sources":["../../../src/common/port.ts","../../../src/common/SaveState.ts","../../../src/store/KeeState.ts","../../../src/store/Mutation.ts","../../../src/store/mutation-types.ts"],"sourcesContent":["import type { AddonMessage } from \"./AddonMessage\";\nimport { KeeLog } from \"./Logger\";\nimport type { VaultMessage } from \"./VaultMessage\";\n\nclass ContentPortManager {\n    private port: chrome.runtime.Port;\n\n    // public mixin = {\n    //     methods: {\n    //         postMessage: msg => {\n    //             this.port.postMessage(msg);\n    //         }\n    //     }\n    // };\n\n    public postMessage(msg: AddonMessage | VaultMessage) {\n        try {\n            this.port.postMessage(msg);\n        } catch (e) {\n            if (KeeLog && KeeLog.warn) KeeLog.warn(\"Failed to post a message. If the addon has just auto-updated this is expected.\");\n        }\n    }\n\n    public startup(name: string) {\n        this.port = chrome.runtime.connect({ name });\n    }\n\n    public shutdown() {\n        this.port = null;\n    }\n\n    public get raw(): chrome.runtime.Port {\n        return this.port;\n    }\n}\n\nexport const Port = new ContentPortManager();\n","import type { SubmittedData } from \"./SubmittedData\";\nimport { Entry } from \"./model/Entry\";\n\nexport class SaveState {\n    originalEntry?: Entry;\n    newEntry: Entry = new Entry({});\n    titleResetValue: string;\n    submittedData?: SubmittedData;\n    lastActiveAt?: Date;\n    showURLMismatchWarning: boolean;\n    favicon?: string;\n}\n","import { Database } from \"../common/model/Database\";\nimport { PasswordProfile } from \"../common/model/PasswordProfile\";\nimport { KeeNotification } from \"../common/KeeNotification\";\nimport { EntrySummary } from \"../common/model/EntrySummary\";\nimport { SaveState } from \"../common/SaveState\";\nimport { SaveEntryResult } from \"../common/SaveEntryResult\";\n\n// This is broadly the list of state that is needed to render UI\n// It can be optionally stored in a reactive environment like Vue3/Pinia.\n// Changes to the state must be made via methods which can optionally\n// distribute those changes to multiple webextension context scopes.\nexport interface KeeState {\n    latestConnectionError: string;\n    lastKeePassRPCRefresh: number;\n    ActiveKeePassDatabaseIndex: number;\n    KeePassDatabases: Database[];\n    PasswordProfiles: PasswordProfile[];\n    notifications: KeeNotification[];\n    connected: boolean;\n    connectedWebsocket: boolean;\n    currentSearchTerm: string;\n    loginsFound: boolean;\n    searchResults: EntrySummary[];\n    saveState: SaveState;\n    generatedPassword: string;\n    saveEntryResult: SaveEntryResult;\n    entryUpdateStartedAtTimestamp: number;\n}\n\nexport const defaults = {\n    latestConnectionError: \"\",\n    lastKeePassRPCRefresh: 0,\n    ActiveKeePassDatabaseIndex: -1,\n    KeePassDatabases: [],\n    PasswordProfiles: [],\n    notifications: [],\n    connected: false,\n    connectedWebsocket: false,\n    currentSearchTerm: null,\n    loginsFound: false,\n    searchResults: null,\n    saveState: new SaveState(),\n    generatedPassword: \"\",\n    saveEntryResult: {\n        result: null,\n        receivedAt: new Date(),\n        fileName: null,\n        uuid: null\n    },\n    entryUpdateStartedAtTimestamp: 0\n};\n","export class Mutation {\n    constructor(public type: string, public payload: any) {}\n}\n","export const updateActiveKeePassDatabaseIndex = \"updateActiveKeePassDatabaseIndex\";\nexport const updateConnected = \"updateConnected\";\nexport const updateConnectedWebsocket = \"updateConnectedWebsocket\";\nexport const updateCurrentSearchTerm = \"updateCurrentSearchTerm\";\nexport const updateLatestConnectionError = \"updateLatestConnectionError\";\nexport const updateLastKeePassRPCRefresh = \"updateLastKeePassRPCRefresh\";\nexport const updateKeePassDatabases = \"updateKeePassDatabases\";\nexport const updatePasswordProfiles = \"updatePasswordProfiles\";\nexport const updateGeneratedPassword = \"updateGeneratedPassword\";\nexport const updateNotifications = \"updateNotifications\";\nexport const updateSubmittedData = \"updateSubmittedData\";\nexport const updateLoginsFound = \"updateLoginsFound\";\nexport const updateSearchResultWithFullDetails = \"updateSearchResultWithFullDetails\";\nexport const updateSearchResults = \"updateSearchResults\";\nexport const addNotification = \"addNotification\";\nexport const updateSaveState = \"updateSaveState\";\nexport const updateSaveEntryResult = \"updateSaveEntryResult\";\nexport const removeFieldFromActiveEntry = \"removeFieldFromActiveEntry\";\nexport const updateEntryUpdateStartedAtTimestamp = \"updateEntryUpdateStartedAtTimestamp\";\n"],"names":[],"mappings":";;AAIA,MAAM,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWd,YAAY,KAAkC;AAC7C,QAAA;AACK,WAAA,KAAK,YAAY,GAAG;AAAA,aACpB,GAAG;AACR,UAAI,UAAU,OAAO;AAAM,eAAO,KAAK,gFAAgF;AAAA,IAC3H;AAAA,EACJ;AAAA,EAEO,QAAQ,MAAc;AACzB,SAAK,OAAO,OAAO,QAAQ,QAAQ,EAAE,MAAM;AAAA,EAC/C;AAAA,EAEO,WAAW;AACd,SAAK,OAAO;AAAA,EAChB;AAAA,EAEA,IAAW,MAA2B;AAClC,WAAO,KAAK;AAAA,EAChB;AACJ;AAEa,MAAA,OAAO,IAAI,mBAAmB;ACjCpC,MAAM,UAAU;AAAA,EAAhB,cAAA;AAEe,SAAA,WAAA,IAAI,MAAM,CAAE,CAAA;AAAA,EAAA;AAMlC;ACkBO,MAAM,WAAW;AAAA,EACpB,uBAAuB;AAAA,EACvB,uBAAuB;AAAA,EACvB,4BAA4B;AAAA,EAC5B,kBAAkB,CAAC;AAAA,EACnB,kBAAkB,CAAC;AAAA,EACnB,eAAe,CAAC;AAAA,EAChB,WAAW;AAAA,EACX,oBAAoB;AAAA,EACpB,mBAAmB;AAAA,EACnB,aAAa;AAAA,EACb,eAAe;AAAA,EACf,WAAW,IAAI,UAAU;AAAA,EACzB,mBAAmB;AAAA,EACnB,iBAAiB;AAAA,IACb,QAAQ;AAAA,IACR,gCAAgB,KAAK;AAAA,IACrB,UAAU;AAAA,IACV,MAAM;AAAA,EACV;AAAA,EACA,+BAA+B;AACnC;AClDO,MAAM,SAAS;AAAA,EAClB,YAAmB,MAAqB,SAAc;AAAnC,SAAA,OAAA;AAAqB,SAAA,UAAA;AAAA,EAAe;AAC3D;ACFO,MAAM,mCAAmC;AACzC,MAAM,kBAAkB;AACxB,MAAM,2BAA2B;AACjC,MAAM,0BAA0B;AAChC,MAAM,8BAA8B;AACpC,MAAM,8BAA8B;AACpC,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,0BAA0B;AAChC,MAAM,sBAAsB;AAC5B,MAAM,sBAAsB;AAC5B,MAAM,oBAAoB;AAC1B,MAAM,oCAAoC;AAC1C,MAAM,sBAAsB;AAC5B,MAAM,kBAAkB;AACxB,MAAM,kBAAkB;AACxB,MAAM,wBAAwB;AAC9B,MAAM,6BAA6B;AACnC,MAAM,sCAAsC;"}