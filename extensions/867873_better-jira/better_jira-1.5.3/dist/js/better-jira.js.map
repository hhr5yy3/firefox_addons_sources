{"version":3,"sources":["better-jira.js"],"names":[],"mappingsfile":"better-jira.js","sourcesContent":["(function()\n{\n  'use strict';\n\n  let Standup = require('./components/standup');\n\n  class BetterJira\n  {\n    constructor() {\n      this.data = {};\n      this.Storage = chrome.storage.sync;\n    }\n\n    initiate() {\n      window.removeEventListener('load', this.initiate);\n      console.log('Page loaded, running Better JIRA now.');\n\n      setTimeout(this._resizeColumns.bind(this), 700);\n    }\n\n    updateColumnWidths(detail) {\n      if(!detail.enabled) {\n        document.documentElement.style.setProperty('--viewport-width', 'inherit');\n        return;\n      }\n      this._getPreferredWidth(detail)\n    }\n\n    handleStandup(state) {\n      let cssClass = 'standup';\n      if(state) {\n        document.getElementsByTagName('body')[0].classList.add(cssClass);\n        window.addEventListener('keydown', this.doStandup.bind(this), false);\n        this.initializeStandup();\n      } else {\n        document.getElementsByTagName('body')[0].classList.remove(cssClass);\n        window.removeEventListener('keydown', this.doStandup, false);\n        this.cleanupStandup();\n      }\n\n    }\n\n    initializeStandup() {\n      this.data.swimlanes = [];\n      Array.from(document.querySelectorAll('.ghx-swimlane')).forEach((el) => {\n        let columns = el.querySelectorAll('.ghx-columns > .ghx-column');\n\n        this.data.columnCount = columns.length;\n        this.data.pointer = this.data.columnCount - 1;\n        columns[this.data.pointer].classList.add('ghx-label-5');\n        columns[this.data.pointer].classList.add('large-column');\n        this.data.swimlanes.push(columns);\n      });\n\n      let headerColumns = document.getElementById('ghx-column-header-group').querySelectorAll('.ghx-column');\n      headerColumns[this.data.pointer].classList.add('ghx-label-5');\n      headerColumns[this.data.pointer].classList.add('large-column');\n      this.data.swimlanes.push(headerColumns);\n    }\n\n    cleanupStandup() {\n      if(this.data.pointer === undefined || this.data.swimlanes === undefined) {\n        return;\n      }\n\n      this._clearColumnBackground();\n    }\n\n    doStandup(event) {\n      console.log(event);\n      console.log(this.data.pointer, this.data.swimlanes);\n      //-- Advance down the board\n      if(event.key === '<') {\n        if((this.data.pointer - 1) < 0) {\n          return;\n        }\n\n        this._clearColumnBackground();\n        this.data.pointer = this.data.pointer - 1;\n        this._setColumnBackground();\n      }\n\n      //-- Advance up the board\n      if(event.key === '>') {\n        if((this.data.pointer + 1) === this.data.columnCount) {\n          return;\n        }\n\n        this._clearColumnBackground();\n        this.data.pointer = this.data.pointer + 1;\n        this._setColumnBackground();\n      }\n    }\n\n    _clearColumnBackground() {\n      this.data.swimlanes.forEach((columns) => {\n        columns[this.data.pointer].classList.remove('ghx-label-5');\n        columns[this.data.pointer].classList.remove('large-column');\n      });\n    }\n\n    _setColumnBackground() {\n      this.data.swimlanes.forEach((columns) => {\n        columns[this.data.pointer].classList.add('ghx-label-5');\n        columns[this.data.pointer].classList.add('large-column');\n      });\n    }\n\n    _resizeColumns() {\n      if(document.querySelector('.ghx-swimlane') === null) {\n        return;\n      }\n\n      //-- Disallow setting columns if the plugin is not enabled\n      this.Storage.get('enabled', (storage) => {\n        if(!storage.enabled) {\n          return;\n        }\n        document.getElementsByTagName('body')[0].classList.add('better-jira');\n\n        this.Storage.get('columnWidth', this._getPreferredWidth.bind(this));\n      });\n\n      this.Storage.get('standup', (storage) => {\n        this.handleStandup(storage.standup);\n      });\n    }\n\n    _getPreferredWidth(storage) {\n      this.data.columnWidth = storage.columnWidth;\n\n      if(isNaN(this.data.columnWidth)) {\n        this.data.columnWidth = 200;\n      }\n\n      this._setPreferredWidth();\n    }\n\n\n    _setPreferredWidth() {\n      let preferredWidth, columnCount, padding, width;\n\n      preferredWidth = this.data.columnWidth;\n\n      columnCount = document.querySelector('.ghx-swimlane > .ghx-columns')\n        .querySelectorAll('.ghx-column')\n        .length;\n\n      padding = columnCount * 12;\n      width = (columnCount * preferredWidth) + padding;\n\n      if(width < 10) {\n        return;\n      }\n\n      document.documentElement.style.setProperty('--viewport-width', `${width}px`);\n    }\n  }\n\n  let app = new BetterJira();\n  window.addEventListener('load', app.initiate.bind(app));\n\n  document.addEventListener('better-jira:updated', (event) => {\n    console.log('woohoo!', event.detail);\n    app.updateColumnWidths(event.detail);\n\n    app.handleStandup(event.detail.standup);\n  });\n})();\n"]}