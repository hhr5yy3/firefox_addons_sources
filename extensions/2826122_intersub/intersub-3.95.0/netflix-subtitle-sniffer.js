(()=>{"use strict";class e{constructor(){this.logDebugMessage=(...e)=>{this.logMessage(t.DEBUG,...e)},this.logInfo=(...e)=>{this.logMessage(t.INFO,...e)},this.logWarn=(...e)=>{this.logMessage(t.WARN,...e)},this.logError=(...e)=>{this.logMessage(t.ERROR,...e)}}}var t;!function(e){e[e.DEBUG=0]="DEBUG",e[e.INFO=1]="INFO",e[e.WARN=2]="WARN",e[e.ERROR=3]="ERROR"}(t||(t={}));const s="x-session";function n(e,t){if(function(){const e=globalThis;if(void 0!==e.cloneInto)return e}()){const s=globalThis.content,n=s?.fetch;if("function"==typeof n)return n(e,t)}return fetch(e,t)}class o extends e{constructor(e,t,s,n,o){super(),this.logServerUrl=e,this.publicTokenProvider=t,this.urlProvider=s,this.pluginDataProvider=n,this.logLevel=o,this.batchSize=50,this.batch=[],this.maxSendTimeout=1e4,this.sendTimeoutId=0,this.messageId=1e3*globalThis.crypto.getRandomValues(new Uint8Array(1))[0],window&&window.addEventListener("beforeunload",(()=>{this.sendBatch()}))}logMessage(e,...s){if(e<this.logLevel)return;const n=t[e],o=[];for(const e of s)e instanceof Error?o.push(JSON.parse(JSON.stringify(e,Object.getOwnPropertyNames(e)))):o.push(e);this.batch.push({eventType:n,timestamp:Date.now(),url:this.urlProvider(),pluginData:this.pluginDataProvider(),messageId:++this.messageId,data:JSON.stringify(o)}),this.sendBatchIfNeeded()}clearSendBatchTimeout(){this.sendTimeoutId&&(clearTimeout(this.sendTimeoutId),this.sendTimeoutId=0)}sendBatchIfNeeded(){this.batch.length<this.batchSize?this.sendTimeoutId||(this.sendTimeoutId=Number(setTimeout((()=>{this.sendBatch()}),this.maxSendTimeout))):this.sendBatch()}sendBatch(){if(this.clearSendBatchTimeout(),!this.batch.length)return;const e=function(e,t,n,o,i,r,a="text/plain"){const c=new URL(n,e);let l=new Headers({"Content-Type":a});i?(l.set("Accept",i),t&&(l=function(e,t){if(!t)return e;const n="Accept",o=e.get(n);if(!o)throw new Error(`Invalid headers object: it doesn't have ${n} header!`);return e.set(n,`${o};${s}=${t}`)||e}(l,t))):t&&t&&l.set(s,t);const d={credentials:"omit",method:o,headers:l};return void 0!==r&&(d.body=JSON.stringify(r)),{url:c.toString(),options:d}}(this.logServerUrl,this.publicTokenProvider(),this.logServerUrl,"POST","application/vnd.intersub.log.response.v1+json",[...this.batch]);this.batch.length=0,n(e.url,e.options)}}class i{get resolved(){return this._resolved}get rejected(){return this._rejected}get settled(){return this.resolved||this.rejected}constructor(){this._resolved=!1,this._rejected=!1,this.promise=new Promise(((e,t)=>{this.resolveFn=e,this.rejectFn=t}))}reject(e){this._rejected=!0,this._rejectedVal=e,this.rejectFn(e)}resolve(e){this._resolved=!0,this._resolvedVal=e,this.resolveFn(e)}get resolvedValue(){return this._resolvedVal}get rejectedValue(){return this._rejectedVal}}function r(e){const t=e.toLowerCase();switch(!0){case["zh-cn","zh-sg","yue","nan","hak","zh","zh-hans"].includes(t):case["zh-tw","zh-hk","yue-hk","nan-tw","hak-tw","zh-hant"].includes(t):return"zh";case["en-gb","en-us","en-ie","en-ca","en-in"].includes(t):return"en";case["es-419","es-us","es-mx","es-es"].includes(t):return"es";case["pt-br","pt-pt"].includes(t):return"pt";case["hi-latn"].includes(t):return"hi";case["sr-latn","sr-cyrl"].includes(t):return"sr";case["mo"].includes(t):return"ro";case["nl-be","nl-nl"].includes(t):return"nl";case["fr-be","fr-fr","fr-ca","fr-ch"].includes(t):return"fr";case["ru-latn"].includes(t):return"ru";case["de-at","de-de","de-ch"].includes(t):return"de";case["fa-af","fa-ir"].includes(t):return"fa";case["he"].includes(t):return"iw";case["nb","nn"].includes(t):return"no";default:return t.split("-").shift()||t}}const a="is_netflix_subtitles",c="webvtt-lssdh-ios8",l=[c,"dfxp-ls-sdh","simplesdh"];var d,u,h;function I(){return window.location.pathname.split("/").pop()}function T(){const e=window?.netflix?.appContext?.state?.playerApp;if(!e)return;const t=e.getAPI()?.videoPlayer;if(!t)return;const s=t.getAllPlayerSessionIds();if(!s||!s[0])return;const n=I();let o;if(n&&!isNaN(parseInt(n,10)))for(const e of s){const s=t.getVideoPlayerBySessionId(e);if(s&&s.getMovieId().toString()===n){o=e;break}}o||(o=s[0]);return t.getVideoPlayerBySessionId(o)||void 0}!function(e){e.SUBS="SUBS",e.ID_OVERRIDE="ID_OVERRIDE",e.METADATA="METADATA",e.NO_SUBTITLES="NO_SUBTITLES",e.FAILED_TO_LOAD_SUBTITLES="FAILED_TO_LOAD_SUBTITLES",e.AUDIO_TRACK_LANGUAGE="AUDIO_TRACK_LANGUAGE"}(d||(d={})),function(e){e.SEND_ALL_SUBS="SEND_ALL_SUBS",e.SET_SUBTITLES_LANGUAGE="SET_SUBTITLES_LANGUAGE",e.REWIND_PLAYER="REWIND_PLAYER",e.INIT="INIT",e.GET_AUDIO_LANGUAGE="GET_AUDIO_LANGUAGE"}(u||(u={})),function(e){e.ALL="ALL",e.YOUTUBE="YOUTUBE",e.COURSERA="COURSERA",e.NETFLIX="NETFLIX",e.HDREZKA="HDREZKA",e.TED="TED",e.KINOPUB="KINOPUB",e.LORD_FILM="LORD_FILM",e.OTHER="OTHER",e.INTERSUB_LANDING="INTERSUB_LANDING",e.INTERSUB_DEV="INTERSUB_DEV",e.SOAP4ME="SOAP4ME",e.TWO_SUB_MOVIE="TWO_SUB_MOVIE",e.INORIGINAL="INORIGINAL",e.AMAZON_PRIME="AMAZON_PRIME",e.LINKEDIN_LEARNING="LINKEDIN_LEARNING",e.UDEMY="UDEMY",e.CRUNCHYROLL="CRUNCHYROLL",e.ORORO="ORORO"}(h||(h={})),function(e){e.getTypeName=function(){return"ExternalVideoServiceType"},e.values=[e.ALL,e.YOUTUBE,e.COURSERA,e.NETFLIX,e.HDREZKA,e.TED,e.KINOPUB,e.LORD_FILM,e.OTHER,e.INTERSUB_LANDING,e.INTERSUB_DEV,e.SOAP4ME,e.TWO_SUB_MOVIE,e.INORIGINAL,e.AMAZON_PRIME,e.LINKEDIN_LEARNING,e.UDEMY,e.CRUNCHYROLL,e.ORORO]}(h||(h={})),function(){const t=new class extends e{logMessage(e,...t){this.sentryLogger&&this.sentryLogger.logMessage(e,t)}setSentryLogger(e){this.sentryLogger=e}};((e,s,n)=>{const E=new Map,g=new Map,f=[new i];JSON.parse=function(s){const n=e(s);if(n&&n.result&&n.result.timedtexttracks&&n.result.movieId){t.logDebugMessage(`NETFLIX_SUBTITLE: Found descriptor for ${n.result.movieId}`);const e=n.result;f.shift()?.resolve();const s=function(e,t){const s=new Map;let n=e.timedtexttracks.filter((e=>!e.isNoneTrack&&!e.isForcedNarrative));const o=new Map;for(const e of n){const t=o.get(e.language);(!t||"ASSISTIVE"===t.trackType&&"PRIMARY"===e.trackType)&&o.set(e.language,e)}n=[...o.values()];for(const e of n){const n=new Map;for(const s of l){const o=e.ttDownloadables[s];if(void 0!==o){let i;if(void 0!==o.downloadUrls)i=Object.values(o.downloadUrls);else{if(void 0===o.urls){t(`NETFLIX_SUBTITLE: Failed to process language track: ${e.language}, track: ${JSON.stringify(o)}`);continue}i=o.urls.map((({url:e})=>e))}n.set(s,i)}}n.size>0&&s.set(e.language,n)}const i=new Map;for(const[e,t]of s){const s=r(e).split("-").shift();let n=i.get(s);n||(n=new Map,i.set(s,n));for(const[e,s]of t){let t=n.get(e);t||(t=[],n.set(e,t)),t.push(...s)}}const a={};for(const[e,t]of i)a[e]=Object.fromEntries(t);return{videoId:e.movieId.toString(),subtitleMap:a}}(e,((...e)=>{t?.logError(...e)}));E.set(n.result.movieId.toString(),{descriptor:e,languageToFormatToUrlList:s}),t?.logInfo(`NETFLIX_SUBTITLE: Received URLs of video ${n.result.movieId} subtitles in ${Object.keys(s.subtitleMap).length} languages: [${Object.keys(s.subtitleMap).join(", ")}]`);const o=s;window.dispatchEvent(new CustomEvent(a,{detail:{type:d.SUBS,data:o}}))}return n};const p=new RegExp("manifest|licensedManifest");JSON.stringify=function(e){if(e&&"string"==typeof e.url&&e.url.search(p)>-1)for(const s of Object.values(e)){const e=s;try{e?.profiles&&e.profiles.unshift(c)}catch(e){if(e instanceof TypeError)continue;throw t?.logError("NETFLIX_SUBTITLE: Failed to process Netflix player init structure",e),e}}if(e&&"number"==typeof e.movieId)try{let s=e.params.sessionParams.uiplaycontext.video_id;"number"==typeof s&&s!==e.movieId&&(t?.logInfo(`NETFLIX_SUBTITLE: Video ID override ${s} to ${e.movieId}, clearing pending subtitle switching requests`),f.length=0,window.dispatchEvent(new CustomEvent(a,{detail:{type:d.ID_OVERRIDE,data:[s,e.movieId]}})))}catch(e){}return s(e)},XMLHttpRequest.prototype.open=function(e,t,s,o,i){"string"==typeof t&&t.includes("/metadata?")&&this.addEventListener("load",(()=>{window.dispatchEvent(new CustomEvent(a,{detail:{type:d.METADATA,data:this.response}}))}),!1);const r=void 0===s||s;n.apply(this,[e,t,r,o,i])},window.addEventListener("is_netflix_command",(e=>{const s=e.detail;switch(t.logDebugMessage(`NETFLIX_SUBTITLE: Received command ${s.type}`),s.type){case u.SEND_ALL_SUBS:{const e=function(e){const t=I();if(!t)return;if(e.has(t))return e.get(t);let s;try{s=window.netflix.falcorCache.videos[t].current.value[1]}catch(e){}return void 0!==s&&e.has(s)?e.get(s):(s=g.get(t),void 0!==s&&e.has(s)?e.get(s):void 0)}(E);if(!e){t?.logInfo(`NETFLIX_SUBTITLE: ${u.SEND_ALL_SUBS}: no subtitles in cache were found.`);break}const s=e.languageToFormatToUrlList;t?.logInfo(`NETFLIX_SUBTITLE: Sending subtitles for video ${s.videoId} in ${Object.keys(s.subtitleMap).length} languages: ${Object.keys(s.subtitleMap).join(", ")}`),window.dispatchEvent(new CustomEvent(a,{detail:{type:d.SUBS,data:s}}));break}case u.SET_SUBTITLES_LANGUAGE:{const e=I();let n;if(t?.logInfo(`NETFLIX_SUBTITLE: \n              Attempting to switch subtitles of video ${e} to ${s.data}.\n              Pending requests: ${f.length}.\n              Request registered.\n              `),f.length){const o=f[f.length-1];n=o?.promise,t?.logInfo(`NETFLIX_SUBTITLE: \n                Attempting to switch subtitles of video ${e} to ${s.data}.\n                There are already ${f.length} pending \n                subtitle switch requests.\n                `)}n||(n=Promise.resolve());const o=new i;f.push(o),n.then((()=>{t?.logInfo(`NETFLIX_SUBTITLE: \n                Attempting to switch subtitles of video ${e} to ${s.data}.\n                Execution started.\n                `);const n=r(s.data),i=T();let c=!1;if(i){const a=i.getTimedTextTrackList();let l;t?.logInfo(`NETFLIX_SUBTITLE: \n                  Attempting to switch subtitles of video ${e} to ${s.data}.\n                  Player has ${a.length} subtitle tracks.\n                  `),c=!!a?.length;for(const e of a)e.isNoneTrack||!e.bcp47||e.isForcedNarrative||r(e.bcp47)===n&&(!l||"ASSISTIVE"===l.trackType&&"PRIMARY"===e.trackType)&&(l=e);if(l)return i.getTimedTextTrack()===l?t?.logInfo(`NETFLIX_SUBTITLE: \n                      Attempting to switch subtitles of video ${e} to ${s.data}.\n                      Already on desired subtitles track: ${l.bcp47}.\n                      Track type: ${l.trackType}.\n                      Track ID: ${l.trackId}.\n                      Track is image based: ${l.isImageBased}.\n                      `):(i.setTimedTextTrack(l),t?.logInfo(`NETFLIX_SUBTITLE: \n                    Attempting to switch subtitles of video ${e} to ${s.data}.\n                    Found track ${l.bcp47}.\n                    Track type: ${l.trackType}.\n                    Track ID: ${l.trackId}.\n                    Track is image based: ${l.isImageBased}.\n                    `)),void o.resolve()}else t?.logInfo(`NETFLIX_SUBTITLE: \n                  Attempting to switch subtitles of video ${e} to ${s.data}.\n                  No player was found.\n                  `);t?.logInfo(`NETFLIX_SUBTITLE: \n                Attempting to switch subtitles of video ${e} to ${s.data}.\n                No suitable track was found.\n                `),c&&(t?.logInfo(`NETFLIX_SUBTITLE: \n                  Attempting to switch subtitles of video ${e} to ${s.data}.\n                  Player has subtitle tracks, but not in ${s.data}.\n                  `),window.dispatchEvent(new CustomEvent(a,{detail:{type:d.NO_SUBTITLES,data:n}}))),o.resolve()}));break}case u.REWIND_PLAYER:{const e=T();e?e.seek(1e3*s.data):t.logError(`NETFLIX_SUBTITLE: No player to rewind to ${s.data}`);break}case u.INIT:{const e=s.data;h.NETFLIX,I(),t.setSentryLogger(new o(e.logServerUrl,(()=>e.publicToken),(()=>window.location.href),(()=>e.pluginData),e.logLevel));break}case u.GET_AUDIO_LANGUAGE:{const e=T();if(e){const t=e.getAudioTrack();t?.bcp47&&window.dispatchEvent(new CustomEvent(a,{detail:{type:d.AUDIO_TRACK_LANGUAGE,data:t.bcp47}}))}}}}))})(JSON.parse,JSON.stringify,XMLHttpRequest.prototype.open)}()})();