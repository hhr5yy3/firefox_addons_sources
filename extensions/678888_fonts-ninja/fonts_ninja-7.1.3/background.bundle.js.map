{"version":3,"file":"background.bundle.js","mappings":"mBAAA,MCEaA,EAAqB,qBCFlC,IAAIC,EAAwC,SAAUC,EAASC,EAAYC,EAAGC,GAE1E,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,IAAW,MAAOG,GAAKL,EAAOK,IACpF,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAiB,MAAEK,IAAW,MAAOG,GAAKL,EAAOK,IACvF,SAASF,EAAKI,GAJlB,IAAeL,EAIaK,EAAOC,KAAOT,EAAQQ,EAAOL,QAJ1CA,EAIyDK,EAAOL,MAJhDA,aAAiBN,EAAIM,EAAQ,IAAIN,GAAE,SAAUG,GAAWA,EAAQG,OAITO,KAAKR,EAAWK,GAClGH,GAAMN,EAAYA,EAAUa,MAAMhB,EAASC,GAAc,KAAKS,YAKtEO,OAAOC,OAAOC,UAAUC,aAAaC,IACjC,IAAIC,EAAIC,GACiB,QAAlBD,EAAKD,EAAIG,WAAwB,IAAPF,OAAgB,EAASA,EAAGG,SAAS,eAClER,OAAOS,KAAKC,YAA8B,QAAjBJ,EAAKF,EAAIO,UAAuB,IAAPL,EAAgBA,GAAM,EAAG,CAAEM,QAAS/B,IAAuBgC,IACpGA,GACDC,YAAW,KACP,IAAIT,EACJL,OAAOS,KAAKC,YAA8B,QAAjBL,EAAKD,EAAIO,UAAuB,IAAPN,EAAgBA,GAAM,EAAG,CAAEO,QAAS/B,MACvF,WAKnBmB,OAAOe,QAAQC,YAAYb,aAAY,EAAGc,aAClCA,IAAWjB,OAAOe,QAAQG,kBAAkBC,UAC5CnB,OAAOS,KAAKW,OAAO,CACfb,ICMY,+BDLZc,QAAQ,IAEZrB,OAAOe,QAAQO,gBAAgB,mDAGvCtB,OAAOe,QAAQQ,UAAUpB,aAAY,CAACqB,EAASC,EAAQC,KACnD,GDtBmC,4BCsB3BF,EAAQZ,QACZ,CACI,MAAMe,EAAYH,EAAQI,QAAQD,UAElC,OADAE,EAAQF,IACD,MAGnB3B,OAAO8B,cAAcC,sBAAsB5B,aAAa6B,IACpD,IAAI3B,EACA2B,GAAWA,EAAQC,OAASD,EAAQzB,KACpCP,OAAOS,KAAKC,YAAqC,QAAxBL,EAAK2B,EAAQC,aAA0B,IAAP5B,EAAgBA,GAAM,EAAG,CAAEO,QDvClE,aCuCuFL,IAAKyB,EAAQzB,MAAQM,KACrHA,GAAOb,OAAOe,QAAQmB,gBAMvC,MAAML,EAAWF,IACb,MAAMQ,EAAOnC,OAAOe,QAAQqB,OAAO,cAAcT,SACjD3B,OAAOC,OAAO4B,QAAQ,CAAEM,UAqB5BnC,OAAOe,QAAQQ,UAAUpB,aAAY,CAACS,EAASa,EAAQY,KACnD,GAAqB,SAAjBzB,EAAQ0B,KACRD,EAAS,CAAEC,KAAM,cAEhB,GAAqB,cAAjB1B,EAAQ0B,KAIb,OA3BR,UAA0B,IAAE/B,EAAG,aAAEgC,EAAY,QAAEX,EAAO,QAAEY,IACpD,OAAO1D,EAAU2D,UAAM,OAAQ,GAAQ,YACnC,MAAMC,QAAiBC,MAAMpC,EAAKqB,GAClC,GAAIc,EAASE,GAAI,CACb,GAAIL,EAAc,CACd,MAAMM,QAAoBH,EAASG,cAInC,OAHeC,KAAK,IAAIC,WAAWF,GAAaG,QAAO,SAAUC,EAAMC,GACnE,OAAOD,EAAOE,OAAOC,aAAaF,KACnC,KAKH,aADmBR,EAASW,OAIpC,MAAM,IAAIC,MAAM,aAQhBC,CAAiB3C,GACZd,MAAM0D,GAAYnB,EAAS,CAAEC,KAAM,mBAAoBkB,cACvDC,OAAOC,GAAUrB,EAAS,CAAEC,KAAM,mBAAoBoB,aACpD,M","sources":["webpack://fonts-ninja-extension-v7/./src/common/data/FontsNinja.ts","webpack://fonts-ninja-extension-v7/./src/common/data/Events.ts","webpack://fonts-ninja-extension-v7/./src/pages/Background/background-manifest-firefox-v3.ts","webpack://fonts-ninja-extension-v7/./src/common/utils/fontsNinja.ts"],"sourcesContent":["const PROD_FONTS_NINJA_URL = 'https://fonts.ninja';\nconst PREPROD_FONTS_NINJA_URL = 'https://v2-preprod.fonts.ninja';\nconst DEV_FONTS_NINJA_URL = 'http://localhost:3000';\nexport const getFontsNinjaUrlByEnvironment = () => {\n    switch (process.env.NODE_ENV) {\n        case 'development':\n            return DEV_FONTS_NINJA_URL;\n        case 'preprod':\n            return PREPROD_FONTS_NINJA_URL;\n        default:\n            return PROD_FONTS_NINJA_URL;\n    }\n};\n","export const INJECT_FONTS_NINJA_HELPERS = 'inject_fonts_ninja_helpers';\nexport const IDENTIFY_FONTS_NINJA_HELPERS = 'identify';\nexport const TOGGLE_FONTS_NINJA = 'toggle_fonts_ninja';\nexport const TOGGLE_FONTS_NINJA_RESPONSE = 'toggle_fonts_ninja_reponse';\nexport const CLOSE_FONTS_NINJA = 'close_fonts_ninja';\nexport const CHANGE_URL = 'change_url';\nexport const CHANGE_URL_RESPONSE = 'change_url_response';\nexport const GET_MACHINE_ID = 'get_machine_id';\nexport const SEND_MACHINE_ID = 'send_machine_id';\nexport const GET_STORAGE = 'get_storage';\nexport const SEND_STORAGE = 'send_storage';\nexport const SAVE_STORAGE = 'save_storage';\nexport const CHANGE_FONTS_NINJA_ICON = 'change_fonts_ninja_icon';\nexport const GET_EXTENSION_PATH = 'get_extension_path';\nexport const SEND_EXTENSION_PATH = 'send_extension_path';\nexport const NINJA_PROCESS_RESULTS = 'ninjaProcessResults';\nexport const NINJA_ROLL_OVER = 'ninjaRollover';\nexport const NINJA_ROLL_OVER_RESULTS = 'ninjaRolloverResults';\nexport const PING_FONTS_NINJA_EXTENSION = 'ping_from_fonts_ninja_extension';\nexport const PONG_FONTS_NINJA_EXTENSION = 'pong_from_fonts_ninja_extension';\n// Messages received by fonts.ninja website\nexport const FONTS_NINJA_PAGE_LOADED = 'fontsNinjaPageLoaded';\nexport const FONTS_NINJA_PAGE_HEIGHT = 'fontsNinjaPageHeight';\nexport const FONTS_NINJA_DARK_MODE = 'fontsNinjaDarkMode';\nexport const FONTS_NINJA_ACCESS_TOKEN = 'fontsNinjaAccessToken';\nexport const FONTS_NINJA_REFRESH_TOKEN = 'fontsNinjaRefreshToken';\nexport const FONTS_NINJA_IFRAME_SCROLL_Y = 'fontsNinjaIframeScrollY';\nexport const FONTS_NINJA_IFRAME_WINDOW_HEIGHT = 'fontsNinjaIframeWindowHeight';\nexport const FONTS_NINJA_GET_GPDR_VALIDATION = 'fontsNinjaGetGpdrValidation';\nexport const FONTS_NINJA_SAVE_GPDR_VALIDATION = 'fontsNinjaSaveGpdrValidation';\n// Messages sent/received to/from Iframe page\nexport const IFRAME_READY = 'iframeReady';\nexport const IFRAME_DATA = 'iframeData';\nexport const IFRAME_ACCESS_TOKEN = 'iframeAccessToken';\nexport const IFRAME_REFRESH_TOKEN = 'iframeRefreshToken';\nexport const IFRAME_GDPR_VALIDATION = 'iframeGdprValidation';\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { buildOverviewUrl } from 'src/common/utils';\nimport { CHANGE_FONTS_NINJA_ICON, CHANGE_URL, TOGGLE_FONTS_NINJA } from 'src/common/data';\nchrome.action.onClicked.addListener((tab) => {\n    var _a, _b;\n    if (!((_a = tab.url) === null || _a === void 0 ? void 0 : _a.includes('chrome://'))) {\n        chrome.tabs.sendMessage((_b = tab.id) !== null && _b !== void 0 ? _b : -1, { message: TOGGLE_FONTS_NINJA }, (res) => {\n            if (!res) {\n                setTimeout(() => {\n                    var _a;\n                    chrome.tabs.sendMessage((_a = tab.id) !== null && _a !== void 0 ? _a : -1, { message: TOGGLE_FONTS_NINJA });\n                }, 300);\n            }\n        });\n    }\n});\nchrome.runtime.onInstalled.addListener(({ reason }) => {\n    if (reason === chrome.runtime.OnInstalledReason.INSTALL) {\n        chrome.tabs.create({\n            url: buildOverviewUrl(),\n            active: true,\n        });\n        chrome.runtime.setUninstallURL('https://fontsninja.typeform.com/to/cHr9TWwD');\n    }\n});\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    switch (request.message) {\n        case CHANGE_FONTS_NINJA_ICON:\n            const iconIndex = request.options.iconIndex;\n            setIcon(iconIndex);\n            return true;\n    }\n});\nchrome.webNavigation.onHistoryStateUpdated.addListener((details) => {\n    var _a;\n    if (details && details.tabId && details.url) {\n        chrome.tabs.sendMessage((_a = details.tabId) !== null && _a !== void 0 ? _a : -1, { message: CHANGE_URL, url: details.url }, (res) => {\n            if (!res && chrome.runtime.lastError) {\n                // Catch error if content script does not exist for non SPA websites\n            }\n        });\n    }\n});\nconst setIcon = (iconIndex) => {\n    const path = chrome.runtime.getURL(`icons/icon-${iconIndex}.png`);\n    chrome.action.setIcon({ path });\n};\nfunction safeFetchHandler({ url, returnBase64, options, pageUrl }) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const response = yield fetch(url, options);\n        if (response.ok) {\n            if (returnBase64) {\n                const arrayBuffer = yield response.arrayBuffer();\n                const base64 = btoa(new Uint8Array(arrayBuffer).reduce(function (data, byte) {\n                    return data + String.fromCharCode(byte);\n                }, ''));\n                return base64;\n            }\n            else {\n                const text = yield response.text();\n                return text;\n            }\n        }\n        throw new Error('failed');\n    });\n}\nchrome.runtime.onMessage.addListener((message, sender, callback) => {\n    if (message.type === 'ping') {\n        callback({ type: 'pong' });\n    }\n    else if (message.type === 'safeFetch') {\n        safeFetchHandler(message)\n            .then((results) => callback({ type: 'safeFetchResults', results }))\n            .catch((error) => callback({ type: 'safeFetchResults', error }));\n        return true;\n    }\n});\n","import { getFontsNinjaUrlByEnvironment } from '../data/FontsNinja';\nexport const buildFontsNinjaUrl = (machineId) => {\n    let url = getFontsNinjaUrlByEnvironment();\n    if (machineId) {\n        url += `?machineId=${machineId}`;\n    }\n    return url;\n};\nexport const buildSinglePageFontUrl = (data, idRequest, machineId, currentColor) => {\n    let singlePageFontUrl = `${getFontsNinjaUrlByEnvironment()}${data.url}?extension`;\n    if (idRequest) {\n        singlePageFontUrl += `&idRequest=${idRequest}`;\n    }\n    if (machineId) {\n        singlePageFontUrl += `&machineId=${machineId}`;\n    }\n    if (data.idFontVersion) {\n        singlePageFontUrl += `&idFontVersion=${data.idFontVersion}`;\n    }\n    if (currentColor) {\n        const color = encodeURIComponent(JSON.stringify(currentColor));\n        singlePageFontUrl += `&color=${color}`;\n    }\n    return singlePageFontUrl;\n};\nexport const buildBookmarksUrl = (machineId) => {\n    let bookmarksUrl = `${getFontsNinjaUrlByEnvironment()}/bookmarks`;\n    if (machineId) {\n        bookmarksUrl += `?machineId=${machineId}`;\n    }\n    return bookmarksUrl;\n};\nexport const buildOverviewUrl = () => {\n    const overviewUrl = `${getFontsNinjaUrlByEnvironment()}/overview`;\n    return overviewUrl;\n};\n"],"names":["TOGGLE_FONTS_NINJA","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","chrome","action","onClicked","addListener","tab","_a","_b","url","includes","tabs","sendMessage","id","message","res","setTimeout","runtime","onInstalled","reason","OnInstalledReason","INSTALL","create","active","setUninstallURL","onMessage","request","sender","sendResponse","iconIndex","options","setIcon","webNavigation","onHistoryStateUpdated","details","tabId","lastError","path","getURL","callback","type","returnBase64","pageUrl","this","response","fetch","ok","arrayBuffer","btoa","Uint8Array","reduce","data","byte","String","fromCharCode","text","Error","safeFetchHandler","results","catch","error"],"sourceRoot":""}