{"version":3,"file":"funnel.js","sources":["../src/scripts/browser-api.js","../src/scripts/constants.js","../src/scripts/storage.js","../src/scripts/funnel.js"],"sourcesContent":["const browserApi = window.chrome || browser;\n// default\nexport default browserApi;\n","import browserApi from './browser-api.js';\n\nconst TARGET = 'firefox';\nconst { runtime } = browserApi;\nconst BASE_URL = APP_ENV.BASE_URL;\nconst SEARCH_URL = APP_ENV.SEARCH_URL;\nconst STORAGE_KEY = 'ecosiaExtensionActive';\n\nexport { BASE_URL, SEARCH_URL, TARGET, STORAGE_KEY };\nexport const { version: VERSION } = runtime.getManifest();\n","import browserApi from './browser-api.js';\n\nexport const getStorage = (key) => new Promise((resolve, reject) => {\n  browserApi.storage.sync.get(key, (items) => {\n    if (browserApi.runtime.lastError) {\n      reject(browserApi.runtime.lastError);\n    } else {\n      resolve(items);\n    }\n  });\n});\n\nexport const setStorage = (items) => new Promise((resolve, reject) => {\n  browserApi.storage.sync.set(items, (response) => {\n    if (browserApi.runtime.lastError) {\n      reject(browserApi.runtime.lastError);\n    } else {\n      resolve(response);\n    }\n  });\n});\n","/* Manage funnel messages and widgets visibility in the context of installed extension. */\nimport { TARGET, VERSION, STORAGE_KEY } from './constants.js';\nimport { getStorage, setStorage } from './storage.js';\n\nconst defaultMessage = {\n  addon: TARGET,\n  version: VERSION,\n};\n\n// Set the storage key early to help the applications detect if the user is using the extension\nsessionStorage.setItem(STORAGE_KEY, '1');\n\nconst sendMessage = (event) => {\n  window.postMessage(JSON.stringify({ ...defaultMessage, event }), '*');\n};\n\nconst updateSearchSite = () => {\n  const stylesheetElement = document.createElement('style');\n  stylesheetElement.type = 'text/css';\n  stylesheetElement.innerHTML = `\n    .addon-hide {\n        display: none;\n    }\n\n    .addon-show {\n        display: initial;\n    }`;\n  document.head.appendChild(stylesheetElement);\n};\n\nconst firstSearch = () => {\n  getStorage('isConsecutiveSearch')\n    .then(({ isConsecutiveSearch }) => {\n      if (!isConsecutiveSearch) {\n        sendMessage('firstSearch');\n        setStorage({ isConsecutiveSearch: true });\n      }\n    })\n    .catch((error) => {\n      // eslint-disable-next-line no-console\n      console.log(error);\n    });\n};\n\nwindow.addEventListener('load', () => {\n  updateSearchSite();\n  firstSearch();\n});\n"],"names":["browserApi","TARGET","runtime","STORAGE_KEY","VERSION","getStorage","key","resolve","reject","items","setStorage","response","defaultMessage","sendMessage","event","updateSearchSite","stylesheetElement","firstSearch","isConsecutiveSearch","error"],"mappings":"yBAAA,MAAMA,EAAa,OAAO,QAAU,QCE9BC,EAAS,UACT,CAAE,QAAAC,CAAS,EAAGF,EAGdG,EAAc,wBAGP,CAAE,QAASC,GAAYF,EAAQ,YAAa,ECP5CG,EAAcC,GAAQ,IAAI,QAAQ,CAACC,EAASC,IAAW,CAClER,EAAW,QAAQ,KAAK,IAAIM,EAAMG,GAAU,CACtCT,EAAW,QAAQ,UACrBQ,EAAOR,EAAW,QAAQ,SAAS,EAEnCO,EAAQE,CAAK,CAEnB,CAAG,CACH,CAAC,EAEYC,EAAcD,GAAU,IAAI,QAAQ,CAACF,EAASC,IAAW,CACpER,EAAW,QAAQ,KAAK,IAAIS,EAAQE,GAAa,CAC3CX,EAAW,QAAQ,UACrBQ,EAAOR,EAAW,QAAQ,SAAS,EAEnCO,EAAQI,CAAQ,CAEtB,CAAG,CACH,CAAC,EChBKC,EAAiB,CACrB,MAAOX,EACP,QAASG,CACX,EAGA,eAAe,QAAQD,EAAa,GAAG,EAEvC,MAAMU,EAAeC,GAAU,CAC7B,OAAO,YAAY,KAAK,UAAU,CAAE,GAAGF,EAAgB,MAAAE,CAAK,CAAE,EAAG,GAAG,CACtE,EAEMC,EAAmB,IAAM,CAC7B,MAAMC,EAAoB,SAAS,cAAc,OAAO,EACxDA,EAAkB,KAAO,WACzBA,EAAkB,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQ9B,SAAS,KAAK,YAAYA,CAAiB,CAC7C,EAEMC,EAAc,IAAM,CACxBZ,EAAW,qBAAqB,EAC7B,KAAK,CAAC,CAAE,oBAAAa,KAA0B,CAC5BA,IACHL,EAAY,aAAa,EACzBH,EAAW,CAAE,oBAAqB,EAAI,CAAE,EAEhD,CAAK,EACA,MAAOS,GAAU,CAEhB,QAAQ,IAAIA,CAAK,CACvB,CAAK,CACL,EAEA,OAAO,iBAAiB,OAAQ,IAAM,CACpCJ,IACAE,GACF,CAAC"}