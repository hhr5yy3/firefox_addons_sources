{"version":3,"file":"background.bundle.js","mappings":"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","sources":["webpack://history-cleaner/./src/we.ts","webpack://history-cleaner/./src/OptionsInterface.ts","webpack://history-cleaner/./src/DeleteHistory.ts","webpack://history-cleaner/./src/MessageInterface.ts","webpack://history-cleaner/./src/ff_background.ts"],"sourcesContent":["export default \"browser\" in self ? browser : chrome;\n","import browser from \"./we\";\n/** Creates Options object */\nexport class Options {\n    /**\n     * Creates default options object, with overrides from optionsObj\n     * @param optionsObj Initial options object, likely from storage\n     */\n    constructor(optionsObj) {\n        this.behavior = \"disable\";\n        this.days = 0;\n        this.idleLength = 60;\n        this.timerInterval = 1440;\n        this.deleteMode = \"timer\";\n        this.notifications = false;\n        this.downloads = false;\n        this.icon = \"theme\";\n        // filterHistory = false\n        // filterList = [\"example.com\", \"example.org\"]\n        this.lastRun = browser.i18n.getMessage(\"lastRunNever\");\n        this.deleteCount = 0;\n        if (optionsObj === undefined) {\n            return;\n        }\n        const manifest_version = browser.runtime.getManifest().manifest_version;\n        if (typeof optionsObj.behavior === \"string\" && [\"disable\", \"days\", \"all\"].includes(optionsObj.behavior)) {\n            this.behavior = optionsObj.behavior;\n        }\n        else {\n            if (typeof optionsObj.days === \"number\" && optionsObj.days > 0) {\n                this.behavior = \"days\";\n            }\n        }\n        if (typeof optionsObj.days === \"number\" && optionsObj.days >= 0) {\n            this.days = optionsObj.days;\n        }\n        if (typeof optionsObj.idleLength === \"number\" && optionsObj.idleLength >= 15) {\n            this.idleLength = optionsObj.idleLength;\n        }\n        if (typeof optionsObj.timerInterval === \"number\" && optionsObj.timerInterval >= 1) {\n            this.timerInterval = optionsObj.timerInterval;\n        }\n        if (typeof optionsObj.deleteMode === \"string\" && [\"idle\", \"startup\", \"timer\"].includes(optionsObj.deleteMode)) {\n            this.deleteMode = optionsObj.deleteMode;\n        }\n        // if set to idle on manifest v3, switch to timer\n        if (manifest_version === 3 && this.deleteMode === \"idle\") {\n            this.deleteMode = \"timer\";\n        }\n        if (typeof optionsObj.notifications === \"boolean\") {\n            this.notifications = optionsObj.notifications;\n        }\n        if (typeof optionsObj.downloads === \"boolean\") {\n            this.downloads = optionsObj.downloads;\n        }\n        // if (typeof optionsObj.filterHistory === \"boolean\") {\n        //     this.filterHistory = optionsObj.filterHistory;\n        // }\n        // if (Array.isArray(optionsObj.filterList) && optionsObj.filterList.every(item => typeof item === \"string\")) {\n        //     this.filterList = optionsObj.filterList;\n        // }\n        if (typeof optionsObj.lastRun === \"string\") {\n            this.lastRun = optionsObj.lastRun;\n        }\n        if (typeof optionsObj.icon === \"string\") {\n            this.icon = optionsObj.icon;\n        }\n        if (manifest_version === 3 && this.icon === \"theme\") {\n            this.icon = \"icon_circle_gradient\";\n        }\n    }\n}\n","import browser from \"./we\";\nimport { Options } from \"./OptionsInterface\";\n/**\n * Deletes history older than specified days\n *  * Takes no action if behavior is set to disable\n *  * Deletes older than days if behavior is set to days\n *  * Deletes all history if behavior is set to all\n *  * Creates notification if notifications are enabled\n */\nexport async function deleteHistory(opts) {\n    const res = opts ?? new Options(await browser.storage.local.get());\n    if (res.behavior === \"days\") {\n        const end = new Date();\n        end.setHours(0);\n        end.setMinutes(0);\n        end.setSeconds(0);\n        end.setMilliseconds(0);\n        end.setDate(end.getDate() - res.days);\n        await browser.history.deleteRange({\n            startTime: 0,\n            endTime: end.getTime()\n        });\n        if (res.downloads) {\n            await browser.downloads.erase({ endedBefore: end.toISOString() });\n        }\n        const notificationBody = browser.i18n.getMessage(\"historyDeletedNotificationBody\", [\n            end.toLocaleString(),\n            new Date().toLocaleString()\n        ]);\n        console.log(notificationBody);\n        if (res.notifications) {\n            browser.notifications.create({\n                type: \"basic\",\n                iconUrl: \"icons/icon-96.png\",\n                title: browser.i18n.getMessage(\"historyDeletedNotification\"),\n                message: notificationBody\n            });\n        }\n        browser.storage.local.set({ lastRun: notificationBody });\n    }\n    else if (res.behavior === \"all\") {\n        const notificationBody = browser.i18n.getMessage(\"historyAllDeleted\", [new Date().toLocaleString()]);\n        await browser.history.deleteAll();\n        if (res.downloads) {\n            await browser.downloads.erase({ endedBefore: new Date().toISOString() });\n        }\n        console.log(notificationBody);\n        if (res.notifications) {\n            browser.notifications.create({\n                type: \"basic\",\n                iconUrl: \"icons/icon-96.png\",\n                title: browser.i18n.getMessage(\"historyDeletedNotification\"),\n                message: notificationBody\n            });\n        }\n        browser.storage.local.set({ lastRun: notificationBody });\n    }\n}\n","/** Possible states for a message */\nexport var MessageState;\n(function (MessageState) {\n    MessageState[MessageState[\"INVALID\"] = -1] = \"INVALID\";\n    MessageState[MessageState[\"DELETE\"] = 0] = \"DELETE\";\n    MessageState[MessageState[\"SET_IDLE\"] = 1] = \"SET_IDLE\";\n    MessageState[MessageState[\"SET_STARTUP\"] = 2] = \"SET_STARTUP\";\n    MessageState[MessageState[\"SET_TIMER\"] = 3] = \"SET_TIMER\";\n    MessageState[MessageState[\"SET_ICON\"] = 4] = \"SET_ICON\";\n})(MessageState || (MessageState = {}));\n/** Creates Message object */\nexport class Message {\n    constructor(msgObj) {\n        this.state = msgObj?.state ?? -1;\n        this.idleLength = msgObj?.idleLength ?? -1;\n        this.timerInterval = msgObj?.timerInterval ?? -1;\n        this.icon = msgObj?.icon ?? \"theme\";\n    }\n}\n","import { deleteHistory } from \"./DeleteHistory\";\nimport { Options } from \"./OptionsInterface\";\nimport { MessageState, Message } from \"./MessageInterface\";\nimport browser from \"./we\";\nfunction IconLookup(icon) {\n    switch (icon) {\n        case \"theme\":\n            return \"icons/icon.svg\";\n        case \"icon_circle\":\n            return \"icons/icon_red_circle.png\";\n        case \"icon_circle_gradient\":\n            return \"icons/icon_red_circle_gradient.png\";\n        case \"icon_square\":\n            return \"icons/icon_red_square.png\";\n        case \"icon_square_gradient\":\n            return \"icons/icon_red_square_gradient.png\";\n        default:\n            return \"icons/icon.svg\";\n    }\n}\n/**\n * Message listener\n *\n * Listens for messages from options page\n *  * Deletes message when Manual delete button is pressed\n *  * Sets delete mode to idle (updates detection interval and adds event listener)\n *  * Sets delete mode to startup (removes event listener)\n * @param msg The message from the options page\n */\nasync function onMessage(msg) {\n    const message = new Message(msg);\n    switch (message.state) {\n        // manual delete button\n        case MessageState.DELETE:\n            deleteHistory();\n            break;\n        // set idle mode\n        case MessageState.SET_IDLE:\n            // remove idle listener if one exists\n            if (browser.idle.onStateChanged.hasListener(idleListener)) {\n                browser.idle.onStateChanged.removeListener(idleListener);\n            }\n            // set idle length\n            browser.idle.setDetectionInterval(message.idleLength);\n            // add idle listener\n            browser.idle.onStateChanged.addListener(idleListener);\n            browser.alarms.clear(\"DeleteHistoryAlarm\");\n            break;\n        // set startup mode\n        case MessageState.SET_STARTUP:\n            // remove idle listener\n            if (browser.idle.onStateChanged.hasListener(idleListener)) {\n                browser.idle.onStateChanged.removeListener(idleListener);\n            }\n            browser.alarms.clear(\"DeleteHistoryAlarm\");\n            break;\n        case MessageState.SET_TIMER:\n            if (browser.idle.onStateChanged.hasListener(idleListener)) {\n                browser.idle.onStateChanged.removeListener(idleListener);\n            }\n            // delete old alarm\n            browser.alarms.clear(\"DeleteHistoryAlarm\");\n            // create a new one with new period\n            browser.alarms.create(\"DeleteHistoryAlarm\", { delayInMinutes: 1, periodInMinutes: message.timerInterval });\n            break;\n        case MessageState.SET_ICON:\n            browser.browserAction.setIcon({ path: IconLookup(message.icon) });\n            break;\n    }\n}\nasync function onAlarm(alarm) {\n    if (alarm.name === \"DeleteHistoryAlarm\") {\n        deleteHistory();\n    }\n}\n/**\n * Attached to idle onStateChanged listener\n *\n * Deletes history if new state is \"idle\"\n * @param state New state on idle change\n */\nfunction idleListener(state) {\n    // delete history if state is idle\n    if (state === \"idle\") {\n        deleteHistory();\n    }\n}\n/**\n * Runs at browser startup\n *  * Sets event listener and detection length if delete mode set to idle\n *  * Deletes history if set delete mode set to startup\n */\nasync function startup() {\n    const res = new Options(await browser.storage.local.get());\n    switch (res.deleteMode) {\n        // if delete mode is idle, set interval and add listener\n        case \"idle\":\n            browser.idle.setDetectionInterval(res.idleLength);\n            browser.idle.onStateChanged.addListener(idleListener);\n            break;\n        // if delete mode is startup, delete history right now\n        case \"startup\":\n            deleteHistory();\n            break;\n        // if delete mode is timer, set alarm to run at timer interval\n        case \"timer\":\n            browser.alarms.create(\"DeleteHistoryAlarm\", { delayInMinutes: 1, periodInMinutes: res.timerInterval });\n            break;\n    }\n    browser.browserAction.setIcon({ path: IconLookup(res.icon) });\n}\n/**\n * Runs on extension install or update (not browser update)\n *  * Initializes local and sync storage\n *  * Opens options page on first install\n * @param installed Reason for install\n */\nasync function setup(installed) {\n    if (installed.reason === \"install\" || installed.reason === \"update\") {\n        // apply default values to storage\n        const res = new Options(await browser.storage.local.get());\n        await browser.storage.local.set(res);\n        // initialize sync object\n        const syncRes = new Options(await browser.storage.sync.get());\n        await browser.storage.sync.set(syncRes);\n        startup();\n        // open options page on first install\n        if (installed.reason === \"install\") {\n            browser.runtime.openOptionsPage();\n        }\n    }\n}\nbrowser.alarms.onAlarm.addListener(onAlarm);\nbrowser.runtime.onMessage.addListener(onMessage);\nbrowser.runtime.onInstalled.addListener(setup);\nbrowser.runtime.onStartup.addListener(startup);\n"],"names":["self","browser","chrome","Options","constructor","optionsObj","this","behavior","days","idleLength","timerInterval","deleteMode","notifications","downloads","icon","lastRun","i18n","getMessage","deleteCount","undefined","manifest_version","runtime","getManifest","includes","async","deleteHistory","opts","res","storage","local","get","end","Date","setHours","setMinutes","setSeconds","setMilliseconds","setDate","getDate","history","deleteRange","startTime","endTime","getTime","erase","endedBefore","toISOString","notificationBody","toLocaleString","console","log","create","type","iconUrl","title","message","set","deleteAll","MessageState","Message","msgObj","state","IconLookup","idleListener","startup","idle","setDetectionInterval","onStateChanged","addListener","alarms","delayInMinutes","periodInMinutes","browserAction","setIcon","path","onAlarm","alarm","name","onMessage","msg","DELETE","SET_IDLE","hasListener","removeListener","clear","SET_STARTUP","SET_TIMER","SET_ICON","onInstalled","installed","reason","syncRes","sync","openOptionsPage","onStartup"],"sourceRoot":""}