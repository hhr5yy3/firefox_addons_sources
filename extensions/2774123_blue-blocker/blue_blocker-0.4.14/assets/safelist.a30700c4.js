import"./chunk-1ebdbb1b.js";import{a as p,l as g}from"./chunk-70aa1672.js";import{c as y}from"./chunk-4da8f9f7.js";/* empty css              */function v(l){var f;if(!((f=l.files)!=null&&f.length))return;const o=new FileReader;let c=0,a;o.addEventListener("load",i=>{const E=i.target.result;p.storage.sync.get({unblocked:{}}).then(s=>{try{JSON.parse(E).forEach(e=>{var d,r,m,u;const n=(d=e==null?void 0:e.user_id)!=null?d:e.id;if(!n)throw new Error("failed to read user, expected at least one of: {user_id, id}.");a=!0,s.unblocked[n]=(u=(m=(r=e==null?void 0:e.screen_name)!=null?r:e==null?void 0:e.name)!=null?m:s.unblocked[n])!=null?u:null,c++})}catch(t){console.debug(g,"json failed",t,"trying csv...")}try{console.debug(g,"attempting to read file using csv scheme");let t;E.split(`
`).map(e=>e.trim()).forEach(e=>{var m,u,b;if(e.match(/"'/))throw new Error("failed to read file, csv must not include quotes.");if(t===void 0){if(t=e.split(",").map(h=>h.trim()),!t.includes("user_id")&&!t.includes("id"))throw new Error("failed to read file, expected at least one of: {user_id, id}.");console.debug(g,"headers:",t);return}const n={};e.split(",").map(h=>h.trim()).forEach((h,k)=>n[t[k]]=h);const d=(m=n==null?void 0:n.user_id)!=null?m:n.id;a=!0;const r=(u=n==null?void 0:n.screen_name)!=null?u:n==null?void 0:n.name;switch(r){default:if(!r.match(/\s"'/)){s.unblocked[d]=r;break}case null:case void 0:case"":case"null":case"undefined":s.unblocked[d]=(b=s.unblocked[d])!=null?b:null}c++})}catch(t){console.debug(g,"csv failed.",t)}if(!a)throw new Error("failed to read file. make sure file is csv or json and contains at least user_id or id for each user.");return p.storage.sync.set(s)}).then(()=>{const s=`loaded ${y(c)} users into safelist`;console.log(g,s),document.getElementsByName("safelist-status").forEach(t=>{t.innerText=s})}).catch(s=>document.getElementsByName("safelist-status").forEach(t=>t.innerText=s.message))});for(const i of l.files)o.readAsText(i)}function _(){p.storage.sync.get({unblocked:{}}).then(l=>{const o=l.unblocked,c=`user_id,screen_name
`+Object.entries(o).map(f=>{var i;return f[0]+","+((i=f[1])!=null?i:"this user's @ is not stored")}).join(`
`),a=document.createElement("a");a.href="data:text/csv;charset=utf-8,"+encodeURIComponent(c),a.target="_blank",a.download="BlueBlockerSafelist.csv",a.click()})}document.addEventListener("DOMContentLoaded",()=>{document.getElementById("import-safelist").addEventListener("input",o=>v(o.target)),document.getElementsByName("export-safelist").forEach(o=>o.addEventListener("click",_)),document.getElementsByName("clear-safelist").forEach(o=>{o.addEventListener("click",()=>p.storage.sync.set({unblocked:{}}).then(()=>document.getElementsByName("safelist-status").forEach(c=>c.innerText="cleared safelist.")))})});
