{"version":3,"file":"worker-3nePXDJu.js","sources":["../node_modules/@ffmpeg/ffmpeg/dist/esm/const.js","../node_modules/@ffmpeg/ffmpeg/dist/esm/errors.js","../node_modules/@ffmpeg/ffmpeg/dist/esm/worker.js"],"sourcesContent":["export const MIME_TYPE_JAVASCRIPT = \"text/javascript\";\nexport const MIME_TYPE_WASM = \"application/wasm\";\nexport const CORE_VERSION = \"0.12.6\";\nexport const CORE_URL = `https://unpkg.com/@ffmpeg/core@${CORE_VERSION}/dist/umd/ffmpeg-core.js`;\nexport var FFMessageType;\n(function (FFMessageType) {\n    FFMessageType[\"LOAD\"] = \"LOAD\";\n    FFMessageType[\"EXEC\"] = \"EXEC\";\n    FFMessageType[\"WRITE_FILE\"] = \"WRITE_FILE\";\n    FFMessageType[\"READ_FILE\"] = \"READ_FILE\";\n    FFMessageType[\"DELETE_FILE\"] = \"DELETE_FILE\";\n    FFMessageType[\"RENAME\"] = \"RENAME\";\n    FFMessageType[\"CREATE_DIR\"] = \"CREATE_DIR\";\n    FFMessageType[\"LIST_DIR\"] = \"LIST_DIR\";\n    FFMessageType[\"DELETE_DIR\"] = \"DELETE_DIR\";\n    FFMessageType[\"ERROR\"] = \"ERROR\";\n    FFMessageType[\"DOWNLOAD\"] = \"DOWNLOAD\";\n    FFMessageType[\"PROGRESS\"] = \"PROGRESS\";\n    FFMessageType[\"LOG\"] = \"LOG\";\n    FFMessageType[\"MOUNT\"] = \"MOUNT\";\n    FFMessageType[\"UNMOUNT\"] = \"UNMOUNT\";\n})(FFMessageType || (FFMessageType = {}));\n","export const ERROR_UNKNOWN_MESSAGE_TYPE = new Error(\"unknown message type\");\nexport const ERROR_NOT_LOADED = new Error(\"ffmpeg is not loaded, call `await ffmpeg.load()` first\");\nexport const ERROR_TERMINATED = new Error(\"called FFmpeg.terminate()\");\nexport const ERROR_IMPORT_FAILURE = new Error(\"failed to import ffmpeg-core.js\");\n","/// <reference no-default-lib=\"true\" />\n/// <reference lib=\"esnext\" />\n/// <reference lib=\"webworker\" />\nimport { CORE_URL, FFMessageType } from \"./const.js\";\nimport { ERROR_UNKNOWN_MESSAGE_TYPE, ERROR_NOT_LOADED, ERROR_IMPORT_FAILURE, } from \"./errors.js\";\nlet ffmpeg;\nconst load = async ({ coreURL: _coreURL, wasmURL: _wasmURL, workerURL: _workerURL, }) => {\n    const first = !ffmpeg;\n    try {\n        if (!_coreURL)\n            _coreURL = CORE_URL;\n        // when web worker type is `classic`.\n        importScripts(_coreURL);\n    }\n    catch {\n        if (!_coreURL)\n            _coreURL = CORE_URL.replace('/umd/', '/esm/');\n        // when web worker type is `module`.\n        self.createFFmpegCore = (await import(\n        /* webpackIgnore: true */ /* @vite-ignore */ _coreURL)).default;\n        if (!self.createFFmpegCore) {\n            throw ERROR_IMPORT_FAILURE;\n        }\n    }\n    const coreURL = _coreURL;\n    const wasmURL = _wasmURL ? _wasmURL : _coreURL.replace(/.js$/g, \".wasm\");\n    const workerURL = _workerURL\n        ? _workerURL\n        : _coreURL.replace(/.js$/g, \".worker.js\");\n    ffmpeg = await self.createFFmpegCore({\n        // Fix `Overload resolution failed.` when using multi-threaded ffmpeg-core.\n        // Encoded wasmURL and workerURL in the URL as a hack to fix locateFile issue.\n        mainScriptUrlOrBlob: `${coreURL}#${btoa(JSON.stringify({ wasmURL, workerURL }))}`,\n    });\n    ffmpeg.setLogger((data) => self.postMessage({ type: FFMessageType.LOG, data }));\n    ffmpeg.setProgress((data) => self.postMessage({\n        type: FFMessageType.PROGRESS,\n        data,\n    }));\n    return first;\n};\nconst exec = ({ args, timeout = -1 }) => {\n    ffmpeg.setTimeout(timeout);\n    ffmpeg.exec(...args);\n    const ret = ffmpeg.ret;\n    ffmpeg.reset();\n    return ret;\n};\nconst writeFile = ({ path, data }) => {\n    ffmpeg.FS.writeFile(path, data);\n    return true;\n};\nconst readFile = ({ path, encoding }) => ffmpeg.FS.readFile(path, { encoding });\n// TODO: check if deletion works.\nconst deleteFile = ({ path }) => {\n    ffmpeg.FS.unlink(path);\n    return true;\n};\nconst rename = ({ oldPath, newPath }) => {\n    ffmpeg.FS.rename(oldPath, newPath);\n    return true;\n};\n// TODO: check if creation works.\nconst createDir = ({ path }) => {\n    ffmpeg.FS.mkdir(path);\n    return true;\n};\nconst listDir = ({ path }) => {\n    const names = ffmpeg.FS.readdir(path);\n    const nodes = [];\n    for (const name of names) {\n        const stat = ffmpeg.FS.stat(`${path}/${name}`);\n        const isDir = ffmpeg.FS.isDir(stat.mode);\n        nodes.push({ name, isDir });\n    }\n    return nodes;\n};\n// TODO: check if deletion works.\nconst deleteDir = ({ path }) => {\n    ffmpeg.FS.rmdir(path);\n    return true;\n};\nconst mount = ({ fsType, options, mountPoint }) => {\n    const str = fsType;\n    const fs = ffmpeg.FS.filesystems[str];\n    if (!fs)\n        return false;\n    ffmpeg.FS.mount(fs, options, mountPoint);\n    return true;\n};\nconst unmount = ({ mountPoint }) => {\n    ffmpeg.FS.unmount(mountPoint);\n    return true;\n};\nself.onmessage = async ({ data: { id, type, data: _data }, }) => {\n    const trans = [];\n    let data;\n    try {\n        if (type !== FFMessageType.LOAD && !ffmpeg)\n            throw ERROR_NOT_LOADED; // eslint-disable-line\n        switch (type) {\n            case FFMessageType.LOAD:\n                data = await load(_data);\n                break;\n            case FFMessageType.EXEC:\n                data = exec(_data);\n                break;\n            case FFMessageType.WRITE_FILE:\n                data = writeFile(_data);\n                break;\n            case FFMessageType.READ_FILE:\n                data = readFile(_data);\n                break;\n            case FFMessageType.DELETE_FILE:\n                data = deleteFile(_data);\n                break;\n            case FFMessageType.RENAME:\n                data = rename(_data);\n                break;\n            case FFMessageType.CREATE_DIR:\n                data = createDir(_data);\n                break;\n            case FFMessageType.LIST_DIR:\n                data = listDir(_data);\n                break;\n            case FFMessageType.DELETE_DIR:\n                data = deleteDir(_data);\n                break;\n            case FFMessageType.MOUNT:\n                data = mount(_data);\n                break;\n            case FFMessageType.UNMOUNT:\n                data = unmount(_data);\n                break;\n            default:\n                throw ERROR_UNKNOWN_MESSAGE_TYPE;\n        }\n    }\n    catch (e) {\n        self.postMessage({\n            id,\n            type: FFMessageType.ERROR,\n            data: e.toString(),\n        });\n        return;\n    }\n    if (data instanceof Uint8Array) {\n        trans.push(data.buffer);\n    }\n    self.postMessage({ id, type, data }, trans);\n};\n"],"names":["FFMessageType"],"mappings":"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","x_google_ignoreList":[0,1,2]}