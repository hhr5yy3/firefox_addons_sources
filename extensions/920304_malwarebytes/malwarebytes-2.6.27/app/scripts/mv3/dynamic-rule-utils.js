import{chrome}from"../../../utils/polyfill";import{isMV3,urlHost}from"../../../utils/utils";export const DYNAMIC_RULE_ADS_PRIORITY=21;export const DYNAMIC_RULE_MALWARE_PRIORITY=22;export const DYNAMIC_RULE_SCAMS_PRIORITY=23;export const DYNAMIC_RULE_TEMPORARY_PRIORITY=29;export const DYNAMIC_RULE_ALL_PRIORITY=30;export const RISKY_TLDS_PRIORITY=10;export const RULESET_OVERRIDE_PRIORITY=20;export const getExistingDynamicRules=async e=>{if(!isMV3())return[];const t=await chrome.declarativeNetRequest.getDynamicRules();return e?Array.isArray(e)?t.filter((t=>e.includes(t.priority))):t.filter((t=>t.priority===e)):t};export const getExistingDynamicRulesByActionTypes=async(e,t)=>{if(!isMV3())return[];const s=await getExistingDynamicRules(t);return console.debug("ALL DYNAMIC RULES: ",s),s.filter((t=>e.includes(t.action.type)))};export const getLastDynamicRuleId=async()=>{if(!isMV3())return[];let e=1;const t=await getExistingDynamicRules();return console.debug("EXISTING_DYNAMIC_RULES",t),t.length>0&&(e=t.at(-1).id),e};export const clearAllDynamicRules=async e=>{if(!isMV3())return;const t=(await getExistingDynamicRules(e)).map((e=>e.id));await chrome.declarativeNetRequest.updateDynamicRules({addRules:[],removeRuleIds:[...t]})};export const getExistingSessionRules=()=>isMV3()?chrome.declarativeNetRequest.getSessionRules():[];export const addSessionRule=async(e,t)=>{if(!isMV3())return;let s=[],i=await getLastSessionRuleId()+1;const o=await getExistingSessionRules();e=e.filter((e=>o.every((t=>t.condition.urlFilter!==e))));for(const o of e){const e={id:i,priority:21,action:{type:t},condition:{urlFilter:o,resourceTypes:allResourceTypes}};s.push(e),i+=1}await chrome.declarativeNetRequest.updateSessionRules({addRules:s,removeRuleIds:[]},(()=>{let e=chrome.runtime.lastError;e&&console.error("Error adding session rules",e)})),console.log("Added session rules",await getExistingSessionRules())};export const getLastSessionRuleId=async()=>{let e=1;const t=await getExistingSessionRules();return console.debug("EXISTING_SESSION_RULES",t),t.length>0&&(e=t.at(-1).id),e};const overrideToRules=(e,t)=>{const s=[];return"block"===e.type?(s.push({id:t,priority:20,action:{type:"block"},condition:{urlFilter:e.url,resourceTypes:subFrameResourceType}}),s.push({id:t+1,priority:20,action:{type:"redirect",redirect:{extensionPath:`/app/eventpages/block-mv3.html?type=malware&url=${e.url}`}},condition:{urlFilter:e.url,resourceTypes:mainFrameResourceType}})):(s.push({id:t,priority:20,action:{type:"allow"},condition:{urlFilter:urlHost(e.url),resourceTypes:allResourceTypes}}),s.push({id:t+1,priority:20,action:{type:"allow"},condition:{urlFilter:"*",initiatorDomains:[urlHost(e.url)],resourceTypes:allResourceTypes}})),s};export const toggleGtldDomains=async(e,t)=>{if(isMV3())if(e){let e=await getLastDynamicRuleId()+1;const s=[];for(const i of t)s.push({id:e,priority:10,action:{type:"block"},condition:{urlFilter:`||.${i}`,resourceTypes:allResourceTypes}}),e+=1;await chrome.declarativeNetRequest.updateDynamicRules({addRules:s,removeRuleIds:[]})}else await clearAllDynamicRules(10)};export const updateRulesetOverrides=async e=>{if(!isMV3())return;console.debug("UPDATE_OVERRIDES: overrides",{overrides:e});let t=await getExistingDynamicRules(20);t=t.filter((e=>["allow","block"].includes(e.action.type)));const s={};for(const e of t){const t=e.action.type,i=e.condition.urlFilter;s[i]?s[i].includes(t)||s[i].push(t):s[i]=[t]}console.debug("UPDATE_OVERRIDES: urlToTypes",{urlToTypes:s});let i=[],o=[],r=await getLastDynamicRuleId();for(const t of e){console.debug("UPDATE_OVERRIDES: processing",{override:t});const{type:e,url:n}=t;if(s[n]&&s[n].includes(e)){console.debug("UPDATE_OVERRIDES: skipping",{override:t});continue}if(s[n]){const e=await getExistingDynamicRules(20);console.debug("UPDATE_OVERRIDES: existingRules",{existingRules:e});const t=e.filter((e=>e.condition.urlFilter===urlHost(n)||(e.condition.initiatorDomains||[]).includes(urlHost(n)))).map((e=>e.id));o=[...o,...t]}const l=overrideToRules(t,r+1);i=[...i,...l],r+=l.length}console.debug("UPDATE_OVERRIDES: newRules",{newAddRules:i,newRemoveRuleIds:o}),await chrome.declarativeNetRequest.updateDynamicRules({addRules:i,removeRuleIds:o});const n=e.map((e=>e.url));rulesetOverrideCache.addToCache(n)};export class RulesetOverrideCache{constructor(){this.CACHE={},this.loadCache()}async loadCache(){const e=(await getExistingDynamicRules(20)).filter((e=>"allow"===e.action&&e.condition.urlFilter&&"*"!==e.condition.urlFilter));for(const t of e)this.CACHE[t.condition.urlFilter]=!0}addToCache(e){for(const t of e)this.CACHE[t]=!0}isOverriden(e){return!!this.CACHE[e]}}export const rulesetOverrideCache=new RulesetOverrideCache;export const mainFrameResourceType=["main_frame"];export const subFrameResourceType=["sub_frame","stylesheet","script","image","font","object","xmlhttprequest","ping","csp_report","media","websocket"];export const allResourceTypes=[...mainFrameResourceType,...subFrameResourceType];