{
  "version": 3,
  "sources": ["../../../src/common/browser/runtime.ts", "../../../src/content/util/getCsrfFromPage.ts", "../../../src/common/mappers/switchForm.ts", "../../../src/content/util/createSigninForm.ts", "../../../src/content/handlers/switchListener.ts", "../../../src/content/aws-console.ts"],
  "sourcesContent": ["export const openOptions = async (cb: () => void = () => {}) => {\n  return chrome.runtime.openOptionsPage(cb);\n};\n\n// Chrome does not understand promises here\n// use sendResponse and return=true in listener callback\n// use callback style in sendMessage\n// https://github.com/mozilla/webextension-polyfill/issues/130#issuecomment-996926374\n\nexport const addMessageListener = (cb: (\n  msg: Message, \n  sender: chrome.runtime.MessageSender,\n  sendResponse: (res: unknown) => void\n) => void) => {\n  chrome.runtime.onMessage.addListener(cb);\n};\n\nexport const sendMessage = async <T>(msg: Message) => {\n  return new Promise<T>((res) => {\n    chrome.runtime.sendMessage(msg, res);\n  });\n};\n", "\nexport const getCsrfFromPage = () => {\n  const csrfFromAWSC = window.wrappedJSObject?.AWSC?.Auth.getMbtc();\n  if (csrfFromAWSC) {\n    return String(csrfFromAWSC);\n  }\n  const csrfElem = document.querySelector('input[name=csrf]') as HTMLInputElement;\n  if (csrfElem) {\n    return csrfElem.value;\n  }\n  throw new Error('csrf not found');\n};\n", "type Args = Pick<SwitchRoleForm, 'csrf' | 'redirect_uri' | '_fromAWSRoleSwitchExtension'>\n\nconst createRedirectUrl = (redirectUrl: string, region?: string) => {\n  try {\n    const url = new URL(redirectUrl);\n    const actualRegion = url.searchParams.get('region') || 'us-east-1';\n    url.searchParams.set('region', region || actualRegion as string);\n    return url.toString();\n  } catch(_) {\n    return redirectUrl;\n  }\n};\n\nexport const mapToSwitchForm = (\n  configItem: AWSConfigItem, \n  args: Args,\n): SwitchRoleForm => ({\n  account: configItem.aws_account_id,\n  roleName: configItem.role_name,\n  color: configItem.color?.replace('#', ''),\n  displayName: `${configItem.title} | ${configItem.aws_account_id}`.slice(0, 64),\n  action: 'switchFromBasis',\n  mfaNeeded: '0',\n  ...args,\n  redirect_uri: createRedirectUrl(args.redirect_uri, configItem.region),\n});\n", "import { mapToSwitchForm } from \"../../common/mappers\";\n\nexport const createSigninForm = (configItem: AWSConfigItem, csrf: string) => {\n  const redirect_uri = location.href;\n  const params = mapToSwitchForm(configItem, { csrf, redirect_uri });\n\n  // create switch role form\n  const form = document.createElement('form');\n  form.style.display = 'none';\n  form.setAttribute('method', 'POST');\n  form.setAttribute('action', 'https://signin.aws.amazon.com/switchrole');\n  for (const key in params) {\n    const value = params[key as keyof SwitchRoleForm];\n    if (value) {\n      const input = document.createElement('input');\n      input.setAttribute('name', key);\n      input.setAttribute('value', value);\n      form.appendChild(input);\n    }\n  }\n  return form;\n};\n", "import { sendMessage } from '../../common/browser/runtime';\nimport { getCsrfFromPage } from '../util/getCsrfFromPage';\nimport { createSigninForm } from '../util/createSigninForm';\n\nexport const switchListener = (msg: Message) => {\n  if (msg.type === 'switch') {\n    const { type, ...configItem } = msg;\n    try {\n      // try to get csrf and create a form\n      const csrf = getCsrfFromPage();\n      const form = createSigninForm(configItem, csrf);\n      \n      // append to body and submit it directly\n      document.body.appendChild(form);\n      form.submit();\n    } catch(err) {\n      console.warn(err);\n\n      // if above fails, we send a tab redirect request\n      // to background js, from there we redirect the active\n      // tab the aws's switch role form, and submit that\n      sendMessage({ type: 'redirect', ...configItem});\n    }\n  }\n};\n", "import { addMessageListener } from '../common/browser';\nimport { switchListener } from './handlers/switchListener';\n\naddMessageListener(switchListener);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASO,IAAM,qBAAqB,CAAC,OAIrB;AACZ,SAAO,QAAQ,UAAU,YAAY,EAAE;AACzC;AAEO,IAAM,cAAc,OAAU,QAAiB;AACpD,SAAO,IAAI,QAAW,CAAC,QAAQ;AAC7B,WAAO,QAAQ,YAAY,KAAK,GAAG;AAAA,EACrC,CAAC;AACH;;;ACpBO,IAAM,kBAAkB,MAAM;AADrC;AAEE,QAAM,gBAAe,kBAAO,oBAAP,mBAAwB,SAAxB,mBAA8B,KAAK;AACxD,MAAI,cAAc;AAChB,WAAO,OAAO,YAAY;AAAA,EAC5B;AACA,QAAM,WAAW,SAAS,cAAc,kBAAkB;AAC1D,MAAI,UAAU;AACZ,WAAO,SAAS;AAAA,EAClB;AACA,QAAM,IAAI,MAAM,gBAAgB;AAClC;;;ACTA,IAAM,oBAAoB,CAAC,aAAqB,WAAoB;AAClE,MAAI;AACF,UAAM,MAAM,IAAI,IAAI,WAAW;AAC/B,UAAM,eAAe,IAAI,aAAa,IAAI,QAAQ,KAAK;AACvD,QAAI,aAAa,IAAI,UAAU,UAAU,YAAsB;AAC/D,WAAO,IAAI,SAAS;AAAA,EACtB,SAAQ,GAAG;AACT,WAAO;AAAA,EACT;AACF;AAEO,IAAM,kBAAkB,CAC7B,YACA,SACgB;AAhBlB;AAgBsB;AAAA,IACpB,SAAS,WAAW;AAAA,IACpB,UAAU,WAAW;AAAA,IACrB,QAAO,gBAAW,UAAX,mBAAkB,QAAQ,KAAK;AAAA,IACtC,aAAa,GAAG,WAAW,KAAK,MAAM,WAAW,cAAc,GAAG,MAAM,GAAG,EAAE;AAAA,IAC7E,QAAQ;AAAA,IACR,WAAW;AAAA,KACR,OAPiB;AAAA,IAQpB,cAAc,kBAAkB,KAAK,cAAc,WAAW,MAAM;AAAA,EACtE;AAAA;;;ACvBO,IAAM,mBAAmB,CAAC,YAA2B,SAAiB;AAC3E,QAAM,eAAe,SAAS;AAC9B,QAAM,SAAS,gBAAgB,YAAY,EAAE,MAAM,aAAa,CAAC;AAGjE,QAAM,OAAO,SAAS,cAAc,MAAM;AAC1C,OAAK,MAAM,UAAU;AACrB,OAAK,aAAa,UAAU,MAAM;AAClC,OAAK,aAAa,UAAU,0CAA0C;AACtE,aAAW,OAAO,QAAQ;AACxB,UAAM,QAAQ,OAAO,GAA2B;AAChD,QAAI,OAAO;AACT,YAAM,QAAQ,SAAS,cAAc,OAAO;AAC5C,YAAM,aAAa,QAAQ,GAAG;AAC9B,YAAM,aAAa,SAAS,KAAK;AACjC,WAAK,YAAY,KAAK;AAAA,IACxB;AAAA,EACF;AACA,SAAO;AACT;;;ACjBO,IAAM,iBAAiB,CAAC,QAAiB;AAC9C,MAAI,IAAI,SAAS,UAAU;AACzB,UAAgC,UAAxB,OANZ,IAMoC,IAAf,uBAAe,IAAf,CAAT;AACR,QAAI;AAEF,YAAM,OAAO,gBAAgB;AAC7B,YAAM,OAAO,iBAAiB,YAAY,IAAI;AAG9C,eAAS,KAAK,YAAY,IAAI;AAC9B,WAAK,OAAO;AAAA,IACd,SAAQ,KAAK;AACX,cAAQ,KAAK,GAAG;AAKhB,kBAAY,iBAAE,MAAM,cAAe,WAAW;AAAA,IAChD;AAAA,EACF;AACF;;;ACrBA,mBAAmB,cAAc;",
  "names": []
}
