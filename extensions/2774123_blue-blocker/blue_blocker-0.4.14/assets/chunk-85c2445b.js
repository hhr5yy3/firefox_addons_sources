import{a as o,D as A,l as c,u as b,O as L,S as l,C as V,P as I,b as M,R as P,A as B,I as U,h as x,j as T,g as O}from"./chunk-70aa1672.js";import{f as D,R as C}from"./chunk-4da8f9f7.js";import{P as R,C as F,a as v,A as h,R as j,b as Q,c as H}from"./chunk-e6f612bb.js";const N="/assets/consent.ts-loader.4787bdf7.js",q="/assets/index.ts-loader.8ec3abde.js";o.action.setBadgeBackgroundColor({color:"#666"});o.action.hasOwnProperty("setBadgeTextColor")&&o.action.setBadgeTextColor({color:"#fff"});o.storage.local.onChanged.addListener(n=>{n.hasOwnProperty("BlockCounter")&&o.action.setBadgeText({text:D(n.BlockCounter.newValue)})});o.storage.sync.get(A).then(async n=>{o.action.setIcon({path:n.suspendedBlockCollection?"/icon/icon-128-greyscale.png":"/icon/icon-128.png"}),n.skipVerified&&await R()});o.storage.sync.onChanged.addListener(async n=>{n.hasOwnProperty("skipVerified")&&n.skipVerified.oldValue===!1&&n.skipVerified.newValue===!0&&await R()});F();let w;async function y(){const n=new URL(o.runtime.getURL(N)).pathname,a={matches:["*://*.twitter.com/*","*://twitter.com/*","*://*.x.com/*","*://x.com/*"],js:[{file:n}]};o.contentScripts.register(a).then(r=>{w=r})}async function S(){const n=new URL(o.runtime.getURL(q)).pathname,a={matches:["*://*.twitter.com/*","*://twitter.com/*","*://*.x.com/*","*://x.com/*"],js:[{file:n}]};o.contentScripts.register(a).then(r=>{w=r,o.storage.local.set({canLoad:!0})})}o.runtime.onStartup.addListener(()=>{var n;try{(n=o.runtime)==null||n.getBrowserInfo().then(a=>{a.name=="Firefox"?o.storage.local.get({canLoad:!1}).then(r=>{r?S():y()}):y()})}catch{console.debug(c,"not running on Firefox!")}});const E="0.4.14";function X(n,a){const[r,t,e]=String(n).split(".").map(Number),[d,s,f]=String(a).split(".").map(Number);return r!==d?r<d:t!==s?t<s:e<f}o.runtime.onInstalled.addListener(({reason:n,previousVersion:a})=>{var r;try{(r=o.runtime)==null||r.getBrowserInfo().then(t=>{if(t.name=="Firefox"){if(n=="install"||n=="update"&&X(a,E)){y();const e=o.runtime.getURL("src/pages/consent/index.html");o.tabs.create({url:e})}}else y()})}catch{console.debug(c,"not running on Firefox!")}});o.runtime.onMessage.addListener((n,a,r)=>{let t;return(async(e,d)=>{var f;const s=C();console.debug(c,s,"recv:",e,d);try{switch(e==null?void 0:e.action){case U:const u=e.data,g=await H(u.user_id,u.handle);t={status:l,result:g};break;case B:const m=e.data;await Q(m),t={status:l,result:null};break;case P:const i=e.data;await j(i.user_id),t={status:l,result:null};break;case M:const p=e.data;await h(p),t={status:l,result:null};break;case I:const k=await v();t={status:l,result:k};break;case V:w==null||w.unregister(),S(),t={status:l};break;case L:const _=o.runtime.getURL("src/pages/consent/index.html");o.tabs.create({url:_}),t={status:l};break;default:console.error(c,s,"got a message that couldn't be handled from sender:",d,e),t={status:b,message:"unknown action"}}}catch(u){const g=u;console.error(c,s,"unexpected error caught during",e==null?void 0:e.action,"action",g),t={status:b,message:(f=g.message)!=null?f:"unknown error"}}console.debug(c,s,"respond:",t)})(n,a).finally(()=>r(t)),!0});const[Y,$,G]=["BLOCK","block_user","register"];o.runtime.onMessageExternal.addListener((n,a,r)=>{let t;return(async(e,d)=>{var g,m;const s=C();console.debug(c,s,"ext recv:",e,d);const f=(await o.storage.local.get({integrations:{}})).integrations,u=(g=d.id)!=null?g:"";if(!f.hasOwnProperty(u)){if((e==null?void 0:e.action)===G){const i=e;f[u]={name:i.name,state:x},t={status:l,result:"integration registered"},console.debug(c,s,`registered a new extention: ${i.name} ${u}. ext resp:`,t);return}t={status:b,message:"extension not allowed"};return}if(f[u].state===x||f[u].state===T){t={status:b,message:"extension disabled or not allowed to send messages"};return}try{switch(e==null?void 0:e.action){case Y:const i=e,p={user_id:i.user_id,user:{name:i.name,screen_name:i.screen_name},reason:O,external_reason:i.reason};await h(p).catch(()=>h(p)),t={status:l,result:"user queued for blocking"};break;case $:const k=e.data;await h(k).catch(()=>h(k)),t={status:l,result:"user queued for blocking"};break;default:console.error(c,s,"got a message that couldn't be handled from sender:",d,e),t={status:b,message:"unknown action"}}}catch(i){const p=i;console.error(c,s,"unexpected error caught during",e==null?void 0:e.action,"action",p),t={status:b,message:(m=p.message)!=null?m:"unknown error"}}console.debug(c,s,"ext respond:",t)})(n,a).finally(()=>r(t)),!0});
