{"version":3,"file":"421.js","mappings":"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","sources":["webpack://floccus/./node_modules/assertion-error/index.js","webpack://floccus/./node_modules/chai-as-promised/lib/chai-as-promised.js","webpack://floccus/./node_modules/chai/index.js","webpack://floccus/./node_modules/chai/lib/chai.js","webpack://floccus/./node_modules/chai/lib/chai/assertion.js","webpack://floccus/./node_modules/chai/lib/chai/config.js","webpack://floccus/./node_modules/chai/lib/chai/core/assertions.js","webpack://floccus/./node_modules/chai/lib/chai/interface/assert.js","webpack://floccus/./node_modules/chai/lib/chai/interface/expect.js","webpack://floccus/./node_modules/chai/lib/chai/interface/should.js","webpack://floccus/./node_modules/chai/lib/chai/utils/addChainableMethod.js","webpack://floccus/./node_modules/chai/lib/chai/utils/addLengthGuard.js","webpack://floccus/./node_modules/chai/lib/chai/utils/addMethod.js","webpack://floccus/./node_modules/chai/lib/chai/utils/addProperty.js","webpack://floccus/./node_modules/chai/lib/chai/utils/compareByInspect.js","webpack://floccus/./node_modules/chai/lib/chai/utils/expectTypes.js","webpack://floccus/./node_modules/chai/lib/chai/utils/flag.js","webpack://floccus/./node_modules/chai/lib/chai/utils/getActual.js","webpack://floccus/./node_modules/chai/lib/chai/utils/getMessage.js","webpack://floccus/./node_modules/chai/lib/chai/utils/getOperator.js","webpack://floccus/./node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js","webpack://floccus/./node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js","webpack://floccus/./node_modules/chai/lib/chai/utils/getProperties.js","webpack://floccus/./node_modules/chai/lib/chai/utils/index.js","webpack://floccus/./node_modules/chai/lib/chai/utils/inspect.js","webpack://floccus/./node_modules/chai/lib/chai/utils/isNaN.js","webpack://floccus/./node_modules/chai/lib/chai/utils/isProxyEnabled.js","webpack://floccus/./node_modules/chai/lib/chai/utils/objDisplay.js","webpack://floccus/./node_modules/chai/lib/chai/utils/overwriteChainableMethod.js","webpack://floccus/./node_modules/chai/lib/chai/utils/overwriteMethod.js","webpack://floccus/./node_modules/chai/lib/chai/utils/overwriteProperty.js","webpack://floccus/./node_modules/chai/lib/chai/utils/proxify.js","webpack://floccus/./node_modules/chai/lib/chai/utils/test.js","webpack://floccus/./node_modules/chai/lib/chai/utils/transferFlags.js","webpack://floccus/./node_modules/check-error/index.js","webpack://floccus/./node_modules/deep-eql/index.js","webpack://floccus/./node_modules/get-func-name/index.js","webpack://floccus/./node_modules/loupe/loupe.js","webpack://floccus/./node_modules/pathval/index.js","webpack://floccus/./node_modules/type-detect/type-detect.js","webpack://floccus/./node_modules/core-js/internals/async-from-sync-iterator.js","webpack://floccus/./node_modules/core-js/internals/delete-property-or-throw.js","webpack://floccus/./node_modules/core-js/internals/flatten-into-array.js","webpack://floccus/./node_modules/core-js/internals/get-async-iterator-flattenable.js","webpack://floccus/./node_modules/core-js/internals/get-iterator-flattenable.js","webpack://floccus/./node_modules/core-js/internals/object-prototype-accessors-forced.js","webpack://floccus/./node_modules/core-js/modules/es.array.flat-map.js","webpack://floccus/./node_modules/core-js/modules/es.array.sort.js","webpack://floccus/./node_modules/core-js/modules/es.array.unscopables.flat-map.js","webpack://floccus/./node_modules/core-js/modules/es.object.define-getter.js","webpack://floccus/./node_modules/core-js/modules/es.object.define-setter.js","webpack://floccus/./node_modules/core-js/modules/esnext.async-iterator.find.js","webpack://floccus/./node_modules/core-js/modules/esnext.async-iterator.flat-map.js","webpack://floccus/./node_modules/core-js/modules/esnext.async-iterator.some.js","webpack://floccus/./node_modules/core-js/modules/esnext.iterator.find.js","webpack://floccus/./node_modules/core-js/modules/esnext.iterator.flat-map.js","webpack://floccus/./node_modules/core-js/modules/esnext.iterator.some.js","webpack://floccus/./node_modules/chai/index.mjs"],"sourcesContent":["/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\n\nfunction exclude () {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps (res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude () {\n    var args = [].slice.call(arguments)\n      , i = 0\n      , res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n};\n\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError (message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n    , props = extend(_props || {});\n\n  // default values\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false;\n\n  // copy from properties\n  for (var key in props) {\n    this[key] = props[key];\n  }\n\n  // capture stack trace\n  ssf = ssf || AssertionError;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  } else {\n    try {\n      throw new Error();\n    } catch(e) {\n      this.stack = e.stack;\n    }\n  }\n}\n\n/*!\n * Inherit from Error.prototype\n */\n\nAssertionError.prototype = Object.create(Error.prototype);\n\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack')\n    , props = extend({ name: this.name }, this);\n\n  // include stack if exists and not turned off\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};\n","\"use strict\";\n/* eslint-disable no-invalid-this */\nlet checkError = require(\"check-error\");\n\nmodule.exports = (chai, utils) => {\n    const Assertion = chai.Assertion;\n    const assert = chai.assert;\n    const proxify = utils.proxify;\n\n    // If we are using a version of Chai that has checkError on it,\n    // we want to use that version to be consistent. Otherwise, we use\n    // what was passed to the factory.\n    if (utils.checkError) {\n        checkError = utils.checkError;\n    }\n\n    function isLegacyJQueryPromise(thenable) {\n        // jQuery promises are Promises/A+-compatible since 3.0.0. jQuery 3.0.0 is also the first version\n        // to define the catch method.\n        return typeof thenable.catch !== \"function\" &&\n               typeof thenable.always === \"function\" &&\n               typeof thenable.done === \"function\" &&\n               typeof thenable.fail === \"function\" &&\n               typeof thenable.pipe === \"function\" &&\n               typeof thenable.progress === \"function\" &&\n               typeof thenable.state === \"function\";\n    }\n\n    function assertIsAboutPromise(assertion) {\n        if (typeof assertion._obj.then !== \"function\") {\n            throw new TypeError(utils.inspect(assertion._obj) + \" is not a thenable.\");\n        }\n        if (isLegacyJQueryPromise(assertion._obj)) {\n            throw new TypeError(\"Chai as Promised is incompatible with thenables of jQuery<3.0.0, sorry! Please \" +\n                                \"upgrade jQuery or use another Promises/A+ compatible library (see \" +\n                                \"http://promisesaplus.com/).\");\n        }\n    }\n\n    function proxifyIfSupported(assertion) {\n        return proxify === undefined ? assertion : proxify(assertion);\n    }\n\n    function method(name, asserter) {\n        utils.addMethod(Assertion.prototype, name, function () {\n            assertIsAboutPromise(this);\n            return asserter.apply(this, arguments);\n        });\n    }\n\n    function property(name, asserter) {\n        utils.addProperty(Assertion.prototype, name, function () {\n            assertIsAboutPromise(this);\n            return proxifyIfSupported(asserter.apply(this, arguments));\n        });\n    }\n\n    function doNotify(promise, done) {\n        promise.then(() => done(), done);\n    }\n\n    // These are for clarity and to bypass Chai refusing to allow `undefined` as actual when used with `assert`.\n    function assertIfNegated(assertion, message, extra) {\n        assertion.assert(true, null, message, extra.expected, extra.actual);\n    }\n\n    function assertIfNotNegated(assertion, message, extra) {\n        assertion.assert(false, message, null, extra.expected, extra.actual);\n    }\n\n    function getBasePromise(assertion) {\n        // We need to chain subsequent asserters on top of ones in the chain already (consider\n        // `eventually.have.property(\"foo\").that.equals(\"bar\")`), only running them after the existing ones pass.\n        // So the first base-promise is `assertion._obj`, but after that we use the assertions themselves, i.e.\n        // previously derived promises, to chain off of.\n        return typeof assertion.then === \"function\" ? assertion : assertion._obj;\n    }\n\n    function getReasonName(reason) {\n        return reason instanceof Error ? reason.toString() : checkError.getConstructorName(reason);\n    }\n\n    // Grab these first, before we modify `Assertion.prototype`.\n\n    const propertyNames = Object.getOwnPropertyNames(Assertion.prototype);\n\n    const propertyDescs = {};\n    for (const name of propertyNames) {\n        propertyDescs[name] = Object.getOwnPropertyDescriptor(Assertion.prototype, name);\n    }\n\n    property(\"fulfilled\", function () {\n        const derivedPromise = getBasePromise(this).then(\n            value => {\n                assertIfNegated(this,\n                                \"expected promise not to be fulfilled but it was fulfilled with #{act}\",\n                                { actual: value });\n                return value;\n            },\n            reason => {\n                assertIfNotNegated(this,\n                                   \"expected promise to be fulfilled but it was rejected with #{act}\",\n                                   { actual: getReasonName(reason) });\n                return reason;\n            }\n        );\n\n        module.exports.transferPromiseness(this, derivedPromise);\n        return this;\n    });\n\n    property(\"rejected\", function () {\n        const derivedPromise = getBasePromise(this).then(\n            value => {\n                assertIfNotNegated(this,\n                                   \"expected promise to be rejected but it was fulfilled with #{act}\",\n                                   { actual: value });\n                return value;\n            },\n            reason => {\n                assertIfNegated(this,\n                                \"expected promise not to be rejected but it was rejected with #{act}\",\n                                { actual: getReasonName(reason) });\n\n                // Return the reason, transforming this into a fulfillment, to allow further assertions, e.g.\n                // `promise.should.be.rejected.and.eventually.equal(\"reason\")`.\n                return reason;\n            }\n        );\n\n        module.exports.transferPromiseness(this, derivedPromise);\n        return this;\n    });\n\n    method(\"rejectedWith\", function (errorLike, errMsgMatcher, message) {\n        let errorLikeName = null;\n        const negate = utils.flag(this, \"negate\") || false;\n\n        // rejectedWith with that is called without arguments is\n        // the same as a plain \".rejected\" use.\n        if (errorLike === undefined && errMsgMatcher === undefined &&\n            message === undefined) {\n            /* eslint-disable no-unused-expressions */\n            return this.rejected;\n            /* eslint-enable no-unused-expressions */\n        }\n\n        if (message !== undefined) {\n            utils.flag(this, \"message\", message);\n        }\n\n        if (errorLike instanceof RegExp || typeof errorLike === \"string\") {\n            errMsgMatcher = errorLike;\n            errorLike = null;\n        } else if (errorLike && errorLike instanceof Error) {\n            errorLikeName = errorLike.toString();\n        } else if (typeof errorLike === \"function\") {\n            errorLikeName = checkError.getConstructorName(errorLike);\n        } else {\n            errorLike = null;\n        }\n        const everyArgIsDefined = Boolean(errorLike && errMsgMatcher);\n\n        let matcherRelation = \"including\";\n        if (errMsgMatcher instanceof RegExp) {\n            matcherRelation = \"matching\";\n        }\n\n        const derivedPromise = getBasePromise(this).then(\n            value => {\n                let assertionMessage = null;\n                let expected = null;\n\n                if (errorLike) {\n                    assertionMessage = \"expected promise to be rejected with #{exp} but it was fulfilled with #{act}\";\n                    expected = errorLikeName;\n                } else if (errMsgMatcher) {\n                    assertionMessage = `expected promise to be rejected with an error ${matcherRelation} #{exp} but ` +\n                                       `it was fulfilled with #{act}`;\n                    expected = errMsgMatcher;\n                }\n\n                assertIfNotNegated(this, assertionMessage, { expected, actual: value });\n                return value;\n            },\n            reason => {\n                const errorLikeCompatible = errorLike && (errorLike instanceof Error ?\n                                                        checkError.compatibleInstance(reason, errorLike) :\n                                                        checkError.compatibleConstructor(reason, errorLike));\n\n                const errMsgMatcherCompatible = errMsgMatcher && checkError.compatibleMessage(reason, errMsgMatcher);\n\n                const reasonName = getReasonName(reason);\n\n                if (negate && everyArgIsDefined) {\n                    if (errorLikeCompatible && errMsgMatcherCompatible) {\n                        this.assert(true,\n                                    null,\n                                    \"expected promise not to be rejected with #{exp} but it was rejected \" +\n                                    \"with #{act}\",\n                                    errorLikeName,\n                                    reasonName);\n                    }\n                } else {\n                    if (errorLike) {\n                        this.assert(errorLikeCompatible,\n                                    \"expected promise to be rejected with #{exp} but it was rejected with #{act}\",\n                                    \"expected promise not to be rejected with #{exp} but it was rejected \" +\n                                    \"with #{act}\",\n                                    errorLikeName,\n                                    reasonName);\n                    }\n\n                    if (errMsgMatcher) {\n                        this.assert(errMsgMatcherCompatible,\n                                    `expected promise to be rejected with an error ${matcherRelation} #{exp} but got ` +\n                                    `#{act}`,\n                                    `expected promise not to be rejected with an error ${matcherRelation} #{exp}`,\n                                    errMsgMatcher,\n                                    checkError.getMessage(reason));\n                    }\n                }\n\n                return reason;\n            }\n        );\n\n        module.exports.transferPromiseness(this, derivedPromise);\n        return this;\n    });\n\n    property(\"eventually\", function () {\n        utils.flag(this, \"eventually\", true);\n        return this;\n    });\n\n    method(\"notify\", function (done) {\n        doNotify(getBasePromise(this), done);\n        return this;\n    });\n\n    method(\"become\", function (value, message) {\n        return this.eventually.deep.equal(value, message);\n    });\n\n    // ### `eventually`\n\n    // We need to be careful not to trigger any getters, thus `Object.getOwnPropertyDescriptor` usage.\n    const methodNames = propertyNames.filter(name => {\n        return name !== \"assert\" && typeof propertyDescs[name].value === \"function\";\n    });\n\n    methodNames.forEach(methodName => {\n        Assertion.overwriteMethod(methodName, originalMethod => function () {\n            return doAsserterAsyncAndAddThen(originalMethod, this, arguments);\n        });\n    });\n\n    const getterNames = propertyNames.filter(name => {\n        return name !== \"_obj\" && typeof propertyDescs[name].get === \"function\";\n    });\n\n    getterNames.forEach(getterName => {\n        // Chainable methods are things like `an`, which can work both for `.should.be.an.instanceOf` and as\n        // `should.be.an(\"object\")`. We need to handle those specially.\n        const isChainableMethod = Assertion.prototype.__methods.hasOwnProperty(getterName);\n\n        if (isChainableMethod) {\n            Assertion.overwriteChainableMethod(\n                getterName,\n                originalMethod => function () {\n                    return doAsserterAsyncAndAddThen(originalMethod, this, arguments);\n                },\n                originalGetter => function () {\n                    return doAsserterAsyncAndAddThen(originalGetter, this);\n                }\n            );\n        } else {\n            Assertion.overwriteProperty(getterName, originalGetter => function () {\n                return proxifyIfSupported(doAsserterAsyncAndAddThen(originalGetter, this));\n            });\n        }\n    });\n\n    function doAsserterAsyncAndAddThen(asserter, assertion, args) {\n        // Since we're intercepting all methods/properties, we need to just pass through if they don't want\n        // `eventually`, or if we've already fulfilled the promise (see below).\n        if (!utils.flag(assertion, \"eventually\")) {\n            asserter.apply(assertion, args);\n            return assertion;\n        }\n\n        const derivedPromise = getBasePromise(assertion).then(value => {\n            // Set up the environment for the asserter to actually run: `_obj` should be the fulfillment value, and\n            // now that we have the value, we're no longer in \"eventually\" mode, so we won't run any of this code,\n            // just the base Chai code that we get to via the short-circuit above.\n            assertion._obj = value;\n            utils.flag(assertion, \"eventually\", false);\n\n            return args ? module.exports.transformAsserterArgs(args) : args;\n        }).then(newArgs => {\n            asserter.apply(assertion, newArgs);\n\n            // Because asserters, for example `property`, can change the value of `_obj` (i.e. change the \"object\"\n            // flag), we need to communicate this value change to subsequent chained asserters. Since we build a\n            // promise chain paralleling the asserter chain, we can use it to communicate such changes.\n            return assertion._obj;\n        });\n\n        module.exports.transferPromiseness(assertion, derivedPromise);\n        return assertion;\n    }\n\n    // ### Now use the `Assertion` framework to build an `assert` interface.\n    const originalAssertMethods = Object.getOwnPropertyNames(assert).filter(propName => {\n        return typeof assert[propName] === \"function\";\n    });\n\n    assert.isFulfilled = (promise, message) => (new Assertion(promise, message)).to.be.fulfilled;\n\n    assert.isRejected = (promise, errorLike, errMsgMatcher, message) => {\n        const assertion = new Assertion(promise, message);\n        return assertion.to.be.rejectedWith(errorLike, errMsgMatcher, message);\n    };\n\n    assert.becomes = (promise, value, message) => assert.eventually.deepEqual(promise, value, message);\n\n    assert.doesNotBecome = (promise, value, message) => assert.eventually.notDeepEqual(promise, value, message);\n\n    assert.eventually = {};\n    originalAssertMethods.forEach(assertMethodName => {\n        assert.eventually[assertMethodName] = function (promise) {\n            const otherArgs = Array.prototype.slice.call(arguments, 1);\n\n            let customRejectionHandler;\n            const message = arguments[assert[assertMethodName].length - 1];\n            if (typeof message === \"string\") {\n                customRejectionHandler = reason => {\n                    throw new chai.AssertionError(`${message}\\n\\nOriginal reason: ${utils.inspect(reason)}`);\n                };\n            }\n\n            const returnedPromise = promise.then(\n                fulfillmentValue => assert[assertMethodName].apply(assert, [fulfillmentValue].concat(otherArgs)),\n                customRejectionHandler\n            );\n\n            returnedPromise.notify = done => {\n                doNotify(returnedPromise, done);\n            };\n\n            return returnedPromise;\n        };\n    });\n};\n\nmodule.exports.transferPromiseness = (assertion, promise) => {\n    assertion.then = promise.then.bind(promise);\n};\n\nmodule.exports.transformAsserterArgs = values => values;\n","module.exports = require('./lib/chai');\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = [];\n\n/*!\n * Chai version\n */\n\nexports.version = '4.3.8';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = require('assertion-error');\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = require('./chai/utils');\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai.\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(exports, util);\n    used.push(fn);\n  }\n\n  return exports;\n};\n\n/*!\n * Utility Functions\n */\n\nexports.util = util;\n\n/*!\n * Configuration\n */\n\nvar config = require('./chai/config');\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = require('./chai/assertion');\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = require('./chai/core/assertions');\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = require('./chai/interface/expect');\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = require('./chai/interface/should');\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = require('./chai/interface/assert');\nexports.use(assert);\n","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('./config');\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * `Assertion` objects contain metadata in the form of flags. Three flags can\n   * be assigned during instantiation by passing arguments to this constructor:\n   *\n   * - `object`: This flag contains the target of the assertion. For example, in\n   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will\n   *   contain `numKittens` so that the `equal` assertion can reference it when\n   *   needed.\n   *\n   * - `message`: This flag contains an optional custom error message to be\n   *   prepended to the error message that's generated by the assertion when it\n   *   fails.\n   *\n   * - `ssfi`: This flag stands for \"start stack function indicator\". It\n   *   contains a function reference that serves as the starting point for\n   *   removing frames from the stack trace of the error that's created by the\n   *   assertion when it fails. The goal is to provide a cleaner stack trace to\n   *   end users by removing Chai's internal functions. Note that it only works\n   *   in environments that support `Error.captureStackTrace`, and only when\n   *   `Chai.config.includeStack` hasn't been set to `false`.\n   *\n   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag\n   *   should retain its current value, even as assertions are chained off of\n   *   this object. This is usually set to `true` when creating a new assertion\n   *   from within another assertion. It's also temporarily set to `true` before\n   *   an overwritten assertion gets called by the overwriting assertion.\n   *\n   * - `eql`: This flag contains the deepEqual function to be used by the assertion.\n   *\n   * @param {Mixed} obj target of the assertion\n   * @param {String} msg (optional) custom error message\n   * @param {Function} ssfi (optional) starting point for removing stack frames\n   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked\n   * @api private\n   */\n\n  function Assertion (obj, msg, ssfi, lockSsfi) {\n    flag(this, 'ssfi', ssfi || Assertion);\n    flag(this, 'lockSsfi', lockSsfi);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n    flag(this, 'eql', config.deepEqual || util.eql);\n\n    return util.proxify(this);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (false !== showDiff) showDiff = true;\n    if (undefined === expected && undefined === _actual) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      msg = util.getMessage(this, arguments);\n      var actual = util.getActual(this, arguments);\n      var assertionErrorObjectProperties = {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      };\n\n      var operator = util.getOperator(this, arguments);\n      if (operator) {\n        assertionErrorObjectProperties.operator = operator;\n      }\n\n      throw new AssertionError(\n        msg,\n        assertionErrorObjectProperties,\n        (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n","module.exports = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  truncateThreshold: 40,\n\n  /**\n   * ### config.useProxy\n   *\n   * User configurable property, defines if chai will use a Proxy to throw\n   * an error when a non-existent property is read, which protects users\n   * from typos when using property-based assertions.\n   *\n   * Set it to false if you want to disable this feature.\n   *\n   *     chai.config.useProxy = false;  // disable use of Proxy\n   *\n   * This feature is automatically disabled regardless of this config value\n   * in environments that don't support proxies.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  useProxy: true,\n\n  /**\n   * ### config.proxyExcludedKeys\n   *\n   * User configurable property, defines which properties should be ignored\n   * instead of throwing an error if they do not exist on the assertion.\n   * This is only applied if the environment Chai is running in supports proxies and\n   * if the `useProxy` configuration setting is enabled.\n   * By default, `then` and `inspect` will not throw an error if they do not exist on the\n   * assertion object because the `.inspect` property is read by `util.inspect` (for example, when\n   * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.\n   *\n   *     // By default these keys will not throw an error if they do not exist on the assertion object\n   *     chai.config.proxyExcludedKeys = ['then', 'inspect'];\n   *\n   * @param {Array}\n   * @api public\n   */\n\n  proxyExcludedKeys: ['then', 'catch', 'inspect', 'toJSON'],\n\n  /**\n   * ### config.deepEqual\n   *\n   * User configurable property, defines which a custom function to use for deepEqual\n   * comparisons.\n   * By default, the function used is the one from the `deep-eql` package without custom comparator.\n   *\n   *     // use a custom comparator\n   *     chai.config.deepEqual = (expected, actual) => {\n   *        return chai.util.eql(expected, actual, {\n   *           comparator: (expected, actual) => {\n   *              // for non number comparison, use the default behavior\n   *              if(typeof expected !== 'number') return null;\n   *              // allow a difference of 10 between compared numbers\n   *              return typeof actual === 'number' && Math.abs(actual - expected) < 10\n   *           }\n   *        })\n   *     };\n   *\n   * @param {Function}\n   * @api public\n   */\n\n  deepEqual: null\n\n};\n","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , AssertionError = chai.AssertionError\n    , flag = _.flag;\n\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to improve the readability\n   * of your assertions.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - which\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   * - but\n   * - does\n   * - still\n   * - also\n   *\n   * @name language chains\n   * @namespace BDD\n   * @api public\n   */\n\n  [ 'to', 'be', 'been', 'is'\n  , 'and', 'has', 'have', 'with'\n  , 'that', 'which', 'at', 'of'\n  , 'same', 'but', 'does', 'still', \"also\" ].forEach(function (chain) {\n    Assertion.addProperty(chain);\n  });\n\n  /**\n   * ### .not\n   *\n   * Negates all assertions that follow in the chain.\n   *\n   *     expect(function () {}).to.not.throw();\n   *     expect({a: 1}).to.not.have.property('b');\n   *     expect([1, 2]).to.be.an('array').that.does.not.include(3);\n   *\n   * Just because you can negate any assertion with `.not` doesn't mean you\n   * should. With great power comes great responsibility. It's often best to\n   * assert that the one expected output was produced, rather than asserting\n   * that one of countless unexpected outputs wasn't produced. See individual\n   * assertions for specific guidance.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.equal(1); // Not recommended\n   *\n   * @name not\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n\n  /**\n   * ### .deep\n   *\n   * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`\n   * assertions that follow in the chain to use deep equality instead of strict\n   * (`===`) equality. See the `deep-eql` project page for info on the deep\n   * equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * @name deep\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n\n  /**\n   * ### .nested\n   *\n   * Enables dot- and bracket-notation in all `.property` and `.include`\n   * assertions that follow in the chain.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 'x'});\n   *\n   * `.nested` cannot be combined with `.own`.\n   *\n   * @name nested\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('nested', function () {\n    flag(this, 'nested', true);\n  });\n\n  /**\n   * ### .own\n   *\n   * Causes all `.property` and `.include` assertions that follow in the chain\n   * to ignore inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * `.own` cannot be combined with `.nested`.\n   *\n   * @name own\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('own', function () {\n    flag(this, 'own', true);\n  });\n\n  /**\n   * ### .ordered\n   *\n   * Causes all `.members` assertions that follow in the chain to require that\n   * members be in the same order.\n   *\n   *     expect([1, 2]).to.have.ordered.members([1, 2])\n   *       .but.not.have.ordered.members([2, 1]);\n   *\n   * When `.include` and `.ordered` are combined, the ordering begins at the\n   * start of both arrays.\n   *\n   *     expect([1, 2, 3]).to.include.ordered.members([1, 2])\n   *       .but.not.include.ordered.members([2, 3]);\n   *\n   * @name ordered\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ordered', function () {\n    flag(this, 'ordered', true);\n  });\n\n  /**\n   * ### .any\n   *\n   * Causes all `.keys` assertions that follow in the chain to only require that\n   * the target have at least one of the given keys. This is the opposite of\n   * `.all`, which requires that the target have all of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name any\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('any', function () {\n    flag(this, 'any', true);\n    flag(this, 'all', false);\n  });\n\n  /**\n   * ### .all\n   *\n   * Causes all `.keys` assertions that follow in the chain to require that the\n   * target have all of the given keys. This is the opposite of `.any`, which\n   * only requires that the target have at least one of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` are\n   * added earlier in the chain. However, it's often best to add `.all` anyway\n   * because it improves readability.\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name all\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('all', function () {\n    flag(this, 'all', true);\n    flag(this, 'any', false);\n  });\n\n  /**\n   * ### .a(type[, msg])\n   *\n   * Asserts that the target's type is equal to the given string `type`. Types\n   * are case insensitive. See the `type-detect` project page for info on the\n   * type detection algorithm: https://github.com/chaijs/type-detect.\n   *\n   *     expect('foo').to.be.a('string');\n   *     expect({a: 1}).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *     expect(new Error).to.be.an('error');\n   *     expect(Promise.resolve()).to.be.a('promise');\n   *     expect(new Float32Array).to.be.a('float32array');\n   *     expect(Symbol()).to.be.a('symbol');\n   *\n   * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.\n   *\n   *     var myObj = {\n   *       [Symbol.toStringTag]: 'myCustomType'\n   *     };\n   *\n   *     expect(myObj).to.be.a('myCustomType').but.not.an('object');\n   *\n   * It's often best to use `.a` to check a target's type before making more\n   * assertions on the same target. That way, you avoid unexpected behavior from\n   * any assertion that does different things based on the target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.a`. However, it's often best to\n   * assert that the target is the expected type, rather than asserting that it\n   * isn't one of many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.an('array'); // Not recommended\n   *\n   * `.a` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     expect(1).to.be.a('string', 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.a('string');\n   *\n   * `.a` can also be used as a language chain to improve the readability of\n   * your assertions.\n   *\n   *     expect({b: 2}).to.have.a.property('b');\n   *\n   * The alias `.an` can be used interchangeably with `.a`.\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function an (type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object')\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n    this.assert(\n        type === _.type(obj).toLowerCase()\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n\n  /**\n   * ### .include(val[, msg])\n   *\n   * When the target is a string, `.include` asserts that the given string `val`\n   * is a substring of the target.\n   *\n   *     expect('foobar').to.include('foo');\n   *\n   * When the target is an array, `.include` asserts that the given `val` is a\n   * member of the target.\n   *\n   *     expect([1, 2, 3]).to.include(2);\n   *\n   * When the target is an object, `.include` asserts that the given object\n   * `val`'s properties are a subset of the target's properties.\n   *\n   *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});\n   *\n   * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a\n   * member of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Set([1, 2])).to.include(2);\n   *\n   * When the target is a Map, `.include` asserts that the given `val` is one of\n   * the values of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);\n   *\n   * Because `.include` does different things based on the target's type, it's\n   * important to check the target's type before using `.include`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *\n   * By default, strict (`===`) equality is used to compare array members and\n   * object properties. Add `.deep` earlier in the chain to use deep equality\n   * instead (WeakSet targets are not supported). See the `deep-eql` project\n   * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   * By default, all of the target's properties are searched when working with\n   * objects. This includes properties that are inherited and/or non-enumerable.\n   * Add `.own` earlier in the chain to exclude the target's inherited\n   * properties from the search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * Note that a target object is always only searched for `val`'s own\n   * enumerable properties.\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 2});\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.include`.\n   *\n   *     expect('foobar').to.not.include('taco');\n   *     expect([1, 2, 3]).to.not.include(4);\n   *\n   * However, it's dangerous to negate `.include` when the target is an object.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target object doesn't have all of `val`'s key/value pairs but may or may\n   * not have some of them. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target object isn't even expected to have `val`'s keys, it's\n   * often best to assert exactly that.\n   *\n   *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended\n   *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * When the target object is expected to have `val`'s keys, it's often best to\n   * assert that each of the properties has its expected value, rather than\n   * asserting that each property doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended\n   *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * `.include` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.include(4);\n   *\n   * `.include` can also be used as a language chain, causing all `.members` and\n   * `.keys` assertions that follow in the chain to require the target to be a\n   * superset of the expected set, rather than an identical set. Note that\n   * `.members` ignores duplicates in the subset when `.include` is added.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * Note that adding `.any` earlier in the chain causes the `.keys` assertion\n   * to ignore `.include`.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *\n   * The aliases `.includes`, `.contain`, and `.contains` can be used\n   * interchangeably with `.include`.\n   *\n   * @name include\n   * @alias contain\n   * @alias includes\n   * @alias contains\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function SameValueZero(a, b) {\n    return (_.isNaN(a) && _.isNaN(b)) || a === b;\n  }\n\n  function includeChainingBehavior () {\n    flag(this, 'contains', true);\n  }\n\n  function include (val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate')\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , descriptor = isDeep ? 'deep ' : ''\n      , isEql = isDeep ? flag(this, 'eql') : SameValueZero;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    var included = false;\n\n    switch (objType) {\n      case 'string':\n        included = obj.indexOf(val) !== -1;\n        break;\n\n      case 'weakset':\n        if (isDeep) {\n          throw new AssertionError(\n            flagMsg + 'unable to use .deep.include with WeakSet',\n            undefined,\n            ssfi\n          );\n        }\n\n        included = obj.has(val);\n        break;\n\n      case 'map':\n        obj.forEach(function (item) {\n          included = included || isEql(item, val);\n        });\n        break;\n\n      case 'set':\n        if (isDeep) {\n          obj.forEach(function (item) {\n            included = included || isEql(item, val);\n          });\n        } else {\n          included = obj.has(val);\n        }\n        break;\n\n      case 'array':\n        if (isDeep) {\n          included = obj.some(function (item) {\n            return isEql(item, val);\n          })\n        } else {\n          included = obj.indexOf(val) !== -1;\n        }\n        break;\n\n      default:\n        // This block is for asserting a subset of properties in an object.\n        // `_.expectTypes` isn't used here because `.include` should work with\n        // objects with a custom `@@toStringTag`.\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + 'the given combination of arguments ('\n            + objType + ' and '\n            + _.type(val).toLowerCase() + ')'\n            + ' is invalid for this assertion. '\n            + 'You can use an array, a map, an object, a set, a string, '\n            + 'or a weakset instead of a '\n            + _.type(val).toLowerCase(),\n            undefined,\n            ssfi\n          );\n        }\n\n        var props = Object.keys(val)\n          , firstErr = null\n          , numErrs = 0;\n\n        props.forEach(function (prop) {\n          var propAssertion = new Assertion(obj);\n          _.transferFlags(this, propAssertion, true);\n          flag(propAssertion, 'lockSsfi', true);\n\n          if (!negate || props.length === 1) {\n            propAssertion.property(prop, val[prop]);\n            return;\n          }\n\n          try {\n            propAssertion.property(prop, val[prop]);\n          } catch (err) {\n            if (!_.checkError.compatibleConstructor(err, AssertionError)) {\n              throw err;\n            }\n            if (firstErr === null) firstErr = err;\n            numErrs++;\n          }\n        }, this);\n\n        // When validating .not.include with multiple properties, we only want\n        // to throw an assertion error if all of the properties are included,\n        // in which case we throw the first property assertion error that we\n        // encountered.\n        if (negate && props.length > 1 && numErrs === props.length) {\n          throw firstErr;\n        }\n        return;\n    }\n\n    // Assert inclusion in collection or substring in a string.\n    this.assert(\n      included\n      , 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val)\n      , 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is a truthy value (considered `true` in boolean context).\n   * However, it's often best to assert that the target is strictly (`===`) or\n   * deeply equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.ok; // Not recommended\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.be.ok; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.ok`.\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.not.be.ok; // Not recommended\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.ok; // Not recommended\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.be.ok; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.be.ok; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.ok;\n   *\n   * @name ok\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ok', function () {\n    this.assert(\n        flag(this, 'object')\n      , 'expected #{this} to be truthy'\n      , 'expected #{this} to be falsy');\n  });\n\n  /**\n   * ### .true\n   *\n   * Asserts that the target is strictly (`===`) equal to `true`.\n   *\n   *     expect(true).to.be.true;\n   *\n   * Add `.not` earlier in the chain to negate `.true`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `true`.\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.true; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.true; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.true;\n   *\n   * @name true\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('true', function () {\n    this.assert(\n        true === flag(this, 'object')\n      , 'expected #{this} to be true'\n      , 'expected #{this} to be false'\n      , flag(this, 'negate') ? false : true\n    );\n  });\n\n  /**\n   * ### .false\n   *\n   * Asserts that the target is strictly (`===`) equal to `false`.\n   *\n   *     expect(false).to.be.false;\n   *\n   * Add `.not` earlier in the chain to negate `.false`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `false`.\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.not.be.false; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.false; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(true, 'nooo why fail??').to.be.false;\n   *\n   * @name false\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('false', function () {\n    this.assert(\n        false === flag(this, 'object')\n      , 'expected #{this} to be false'\n      , 'expected #{this} to be true'\n      , flag(this, 'negate') ? true : false\n    );\n  });\n\n  /**\n   * ### .null\n   *\n   * Asserts that the target is strictly (`===`) equal to `null`.\n   *\n   *     expect(null).to.be.null;\n   *\n   * Add `.not` earlier in the chain to negate `.null`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `null`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.null; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.null;\n   *\n   * @name null\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('null', function () {\n    this.assert(\n        null === flag(this, 'object')\n      , 'expected #{this} to be null'\n      , 'expected #{this} not to be null'\n    );\n  });\n\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is strictly (`===`) equal to `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *\n   * Add `.not` earlier in the chain to negate `.undefined`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `undefined`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.undefined; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.undefined;\n   *\n   * @name undefined\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('undefined', function () {\n    this.assert(\n        undefined === flag(this, 'object')\n      , 'expected #{this} to be undefined'\n      , 'expected #{this} not to be undefined'\n    );\n  });\n\n  /**\n   * ### .NaN\n   *\n   * Asserts that the target is exactly `NaN`.\n   *\n   *     expect(NaN).to.be.NaN;\n   *\n   * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `NaN`.\n   *\n   *     expect('foo').to.equal('foo'); // Recommended\n   *     expect('foo').to.not.be.NaN; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.NaN;\n   *\n   * @name NaN\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('NaN', function () {\n    this.assert(\n        _.isNaN(flag(this, 'object'))\n        , 'expected #{this} to be NaN'\n        , 'expected #{this} not to be NaN'\n    );\n  });\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is not strictly (`===`) equal to either `null` or\n   * `undefined`. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.exist; // Not recommended\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.exist; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.exist`.\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.exist; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.exist; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(null, 'nooo why fail??').to.exist;\n   *\n   * The alias `.exists` can be used interchangeably with `.exist`.\n   *\n   * @name exist\n   * @alias exists\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertExist () {\n    var val = flag(this, 'object');\n    this.assert(\n        val !== null && val !== undefined\n      , 'expected #{this} to exist'\n      , 'expected #{this} to not exist'\n    );\n  }\n\n  Assertion.addProperty('exist', assertExist);\n  Assertion.addProperty('exists', assertExist);\n\n  /**\n   * ### .empty\n   *\n   * When the target is a string or array, `.empty` asserts that the target's\n   * `length` property is strictly (`===`) equal to `0`.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *\n   * When the target is a map or set, `.empty` asserts that the target's `size`\n   * property is strictly equal to `0`.\n   *\n   *     expect(new Set()).to.be.empty;\n   *     expect(new Map()).to.be.empty;\n   *\n   * When the target is a non-function object, `.empty` asserts that the target\n   * doesn't have any own enumerable properties. Properties with Symbol-based\n   * keys are excluded from the count.\n   *\n   *     expect({}).to.be.empty;\n   *\n   * Because `.empty` does different things based on the target's type, it's\n   * important to check the target's type before using `.empty`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.empty`. However, it's often\n   * best to assert that the target contains its expected number of values,\n   * rather than asserting that it's not empty.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.not.be.empty; // Not recommended\n   *\n   *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended\n   *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended\n   *\n   *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended\n   *     expect({a: 1}).to.not.be.empty; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;\n   *\n   * @name empty\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('empty', function () {\n    var val = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , itemsCount;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    switch (_.type(val).toLowerCase()) {\n      case 'array':\n      case 'string':\n        itemsCount = val.length;\n        break;\n      case 'map':\n      case 'set':\n        itemsCount = val.size;\n        break;\n      case 'weakmap':\n      case 'weakset':\n        throw new AssertionError(\n          flagMsg + '.empty was passed a weak collection',\n          undefined,\n          ssfi\n        );\n      case 'function':\n        var msg = flagMsg + '.empty was passed a function ' + _.getName(val);\n        throw new AssertionError(msg.trim(), undefined, ssfi);\n      default:\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + '.empty was passed non-string primitive ' + _.inspect(val),\n            undefined,\n            ssfi\n          );\n        }\n        itemsCount = Object.keys(val).length;\n    }\n\n    this.assert(\n        0 === itemsCount\n      , 'expected #{this} to be empty'\n      , 'expected #{this} not to be empty'\n    );\n  });\n\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an `arguments` object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   *     test();\n   *\n   * Add `.not` earlier in the chain to negate `.arguments`. However, it's often\n   * best to assert which type the target is expected to be, rather than\n   * asserting that it’s not an `arguments` object.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.arguments; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({}, 'nooo why fail??').to.be.arguments;\n   *\n   * The alias `.Arguments` can be used interchangeably with `.arguments`.\n   *\n   * @name arguments\n   * @alias Arguments\n   * @namespace BDD\n   * @api public\n   */\n\n  function checkArguments () {\n    var obj = flag(this, 'object')\n      , type = _.type(obj);\n    this.assert(\n        'Arguments' === type\n      , 'expected #{this} to be arguments but got ' + type\n      , 'expected #{this} to not be arguments'\n    );\n  }\n\n  Assertion.addProperty('arguments', checkArguments);\n  Assertion.addProperty('Arguments', checkArguments);\n\n  /**\n   * ### .equal(val[, msg])\n   *\n   * Asserts that the target is strictly (`===`) equal to the given `val`.\n   *\n   *     expect(1).to.equal(1);\n   *     expect('foo').to.equal('foo');\n   *\n   * Add `.deep` earlier in the chain to use deep equality instead. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) equals `[1, 2]`\n   *     expect([1, 2]).to.deep.equal([1, 2]);\n   *     expect([1, 2]).to.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.equal`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to one of countless unexpected values.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.equal(2); // Not recommended\n   *\n   * `.equal` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.equal(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.equal(2);\n   *\n   * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEqual (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'deep')) {\n      var prevLockSsfi = flag(this, 'lockSsfi');\n      flag(this, 'lockSsfi', true);\n      this.eql(val);\n      flag(this, 'lockSsfi', prevLockSsfi);\n    } else {\n      this.assert(\n          val === obj\n        , 'expected #{this} to equal #{exp}'\n        , 'expected #{this} to not equal #{exp}'\n        , val\n        , this._obj\n        , true\n      );\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n\n  /**\n   * ### .eql(obj[, msg])\n   *\n   * Asserts that the target is deeply equal to the given `obj`. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object is deeply (but not strictly) equal to {a: 1}\n   *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});\n   *\n   *     // Target array is deeply (but not strictly) equal to [1, 2]\n   *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.eql`. However, it's often best\n   * to assert that the target is deeply equal to its expected value, rather\n   * than not deeply equal to one of countless unexpected values.\n   *\n   *     expect({a: 1}).to.eql({a: 1}); // Recommended\n   *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended\n   *\n   * `.eql` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});\n   *\n   * The alias `.eqls` can be used interchangeably with `.eql`.\n   *\n   * The `.deep.equal` assertion is almost identical to `.eql` but with one\n   * difference: `.deep.equal` causes deep equality comparisons to also be used\n   * for any other assertions that follow in the chain.\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} obj\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    var eql = flag(this, 'eql');\n    this.assert(\n        eql(obj, flag(this, 'object'))\n      , 'expected #{this} to deeply equal #{exp}'\n      , 'expected #{this} to not deeply equal #{exp}'\n      , obj\n      , this._obj\n      , true\n    );\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n\n  /**\n   * ### .above(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.above(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.above(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.above`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(1).to.not.be.above(2); // Not recommended\n   *\n   * `.above` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.above(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.above(2);\n   *\n   * The aliases `.gt` and `.greaterThan` can be used interchangeably with\n   * `.above`.\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertAbove (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to above must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to above must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount > n\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj > n\n        , 'expected #{this} to be above #{exp}'\n        , 'expected #{this} to be at most #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n\n  /**\n   * ### .least(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `n` respectively. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.at.least(1); // Not recommended\n   *     expect(2).to.be.at.least(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.least`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.at.least(2); // Not recommended\n   *\n   * `.least` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.at.least(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.at.least(2);\n   *\n   * The aliases `.gte` and `.greaterThanOrEqual` can be used interchangeably with\n   * `.least`.\n   *\n   * @name least\n   * @alias gte\n   * @alias greaterThanOrEqual\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLeast (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to least must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to least must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= n\n        , 'expected #{this} to have a ' + descriptor + ' at least #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj >= n\n        , 'expected #{this} to be at least #{exp}'\n        , 'expected #{this} to be below #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n  Assertion.addMethod('greaterThanOrEqual', assertLeast);\n\n  /**\n   * ### .below(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.below(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.below(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.length(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.below`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.below(1); // Not recommended\n   *\n   * `.below` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.below(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.below(1);\n   *\n   * The aliases `.lt` and `.lessThan` can be used interchangeably with\n   * `.below`.\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertBelow (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to below must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to below must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount < n\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj < n\n        , 'expected #{this} to be below #{exp}'\n        , 'expected #{this} to be at least #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n\n  /**\n   * ### .most(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than or equal to the given number\n   * or date `n` respectively. However, it's often best to assert that the target is equal to its\n   * expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.at.most(2); // Not recommended\n   *     expect(1).to.be.at.most(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.most`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.at.most(1); // Not recommended\n   *\n   * `.most` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.at.most(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.at.most(1);\n   *\n   * The aliases `.lte` and `.lessThanOrEqual` can be used interchangeably with\n   * `.most`.\n   *\n   * @name most\n   * @alias lte\n   * @alias lessThanOrEqual\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMost (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to most must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to most must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount <= n\n        , 'expected #{this} to have a ' + descriptor + ' at most #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj <= n\n        , 'expected #{this} to be at most #{exp}'\n        , 'expected #{this} to be above #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n  Assertion.addMethod('lessThanOrEqual', assertMost);\n\n  /**\n   * ### .within(start, finish[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `start`, and less than or equal to the given number or date `finish` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.within(1, 3); // Not recommended\n   *     expect(2).to.be.within(2, 3); // Not recommended\n   *     expect(2).to.be.within(1, 2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `start`, and less\n   * than or equal to the given number `finish`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.within`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.within(2, 4); // Not recommended\n   *\n   * `.within` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(4).to.be.within(1, 3, 'nooo why fail??');\n   *     expect(4, 'nooo why fail??').to.be.within(1, 3);\n   *\n   * @name within\n   * @param {Number} start lower bound inclusive\n   * @param {Number} finish upper bound inclusive\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , startType = _.type(start).toLowerCase()\n      , finishType = _.type(finish).toLowerCase()\n      , errorMessage\n      , shouldThrow = true\n      , range = (startType === 'date' && finishType === 'date')\n          ? start.toISOString() + '..' + finish.toISOString()\n          : start + '..' + finish;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && (startType !== 'date' || finishType !== 'date'))) {\n      errorMessage = msgPrefix + 'the arguments to within must be dates';\n    } else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the arguments to within must be numbers';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= start && itemsCount <= finish\n        , 'expected #{this} to have a ' + descriptor + ' within ' + range\n        , 'expected #{this} to not have a ' + descriptor + ' within ' + range\n      );\n    } else {\n      this.assert(\n          obj >= start && obj <= finish\n        , 'expected #{this} to be within ' + range\n        , 'expected #{this} to not be within ' + range\n      );\n    }\n  });\n\n  /**\n   * ### .instanceof(constructor[, msg])\n   *\n   * Asserts that the target is an instance of the given `constructor`.\n   *\n   *     function Cat () { }\n   *\n   *     expect(new Cat()).to.be.an.instanceof(Cat);\n   *     expect([1, 2]).to.be.an.instanceof(Array);\n   *\n   * Add `.not` earlier in the chain to negate `.instanceof`.\n   *\n   *     expect({a: 1}).to.not.be.an.instanceof(Array);\n   *\n   * `.instanceof` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);\n   *\n   * Due to limitations in ES5, `.instanceof` may not always work as expected\n   * when using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing built-in object such as\n   * `Array`, `Error`, and `Map`. See your transpiler's docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * The alias `.instanceOf` can be used interchangeably with `.instanceof`.\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} msg _optional_\n   * @alias instanceOf\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertInstanceOf (constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var target = flag(this, 'object')\n    var ssfi = flag(this, 'ssfi');\n    var flagMsg = flag(this, 'message');\n\n    try {\n      var isInstanceOf = target instanceof constructor;\n    } catch (err) {\n      if (err instanceof TypeError) {\n        flagMsg = flagMsg ? flagMsg + ': ' : '';\n        throw new AssertionError(\n          flagMsg + 'The instanceof assertion needs a constructor but '\n            + _.type(constructor) + ' was given.',\n          undefined,\n          ssfi\n        );\n      }\n      throw err;\n    }\n\n    var name = _.getName(constructor);\n    if (name === null) {\n      name = 'an unnamed constructor';\n    }\n\n    this.assert(\n        isInstanceOf\n      , 'expected #{this} to be an instance of ' + name\n      , 'expected #{this} to not be an instance of ' + name\n    );\n  };\n\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n\n  /**\n   * ### .property(name[, val[, msg]])\n   *\n   * Asserts that the target has a property with the given key `name`.\n   *\n   *     expect({a: 1}).to.have.property('a');\n   *\n   * When `val` is provided, `.property` also asserts that the property's value\n   * is equal to the given `val`.\n   *\n   *     expect({a: 1}).to.have.property('a', 1);\n   *\n   * By default, strict (`===`) equality is used. Add `.deep` earlier in the\n   * chain to use deep equality instead. See the `deep-eql` project page for\n   * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * The target's enumerable and non-enumerable properties are always included\n   * in the search. By default, both own and inherited properties are included.\n   * Add `.own` earlier in the chain to exclude inherited properties from the\n   * search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.own.property('a', 1);\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}})\n   *       .to.have.deep.nested.property('a.b[0]', {c: 3});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.property`.\n   *\n   *     expect({a: 1}).to.not.have.property('b');\n   *\n   * However, it's dangerous to negate `.property` when providing `val`. The\n   * problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't have a property with the given key `name`, or that it\n   * does have a property with the given key `name` but its value isn't equal to\n   * the given `val`. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property with the given key\n   * `name`, it's often best to assert exactly that.\n   *\n   *     expect({b: 2}).to.not.have.property('a'); // Recommended\n   *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended\n   *\n   * When the target is expected to have a property with the given key `name`,\n   * it's often best to assert that the property has its expected value, rather\n   * than asserting that it doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3}).to.have.property('a', 3); // Recommended\n   *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended\n   *\n   * `.property` changes the target of any assertions that follow in the chain\n   * to be the value of the property from the original target object.\n   *\n   *     expect({a: 1}).to.have.property('a').that.is.a('number');\n   *\n   * `.property` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing `val`, only use the\n   * second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `val`. Instead,\n   * it's asserting that the target object has a `b` property that's equal to\n   * `undefined`.\n   *\n   * The assertions `.ownProperty` and `.haveOwnProperty` can be used\n   * interchangeably with `.own.property`.\n   *\n   * @name property\n   * @param {String} name\n   * @param {Mixed} val (optional)\n   * @param {String} msg _optional_\n   * @returns value of property for chaining\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertProperty (name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var isNested = flag(this, 'nested')\n      , isOwn = flag(this, 'own')\n      , flagMsg = flag(this, 'message')\n      , obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , nameType = typeof name;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    if (isNested) {\n      if (nameType !== 'string') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string when using nested syntax',\n          undefined,\n          ssfi\n        );\n      }\n    } else {\n      if (nameType !== 'string' && nameType !== 'number' && nameType !== 'symbol') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string, number, or symbol',\n          undefined,\n          ssfi\n        );\n      }\n    }\n\n    if (isNested && isOwn) {\n      throw new AssertionError(\n        flagMsg + 'The \"nested\" and \"own\" flags cannot be combined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    if (obj === null || obj === undefined) {\n      throw new AssertionError(\n        flagMsg + 'Target cannot be null or undefined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    var isDeep = flag(this, 'deep')\n      , negate = flag(this, 'negate')\n      , pathInfo = isNested ? _.getPathInfo(obj, name) : null\n      , value = isNested ? pathInfo.value : obj[name]\n      , isEql = isDeep ? flag(this, 'eql') : (val1, val2) => val1 === val2;;\n\n    var descriptor = '';\n    if (isDeep) descriptor += 'deep ';\n    if (isOwn) descriptor += 'own ';\n    if (isNested) descriptor += 'nested ';\n    descriptor += 'property ';\n\n    var hasProperty;\n    if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name);\n    else if (isNested) hasProperty = pathInfo.exists;\n    else hasProperty = _.hasProperty(obj, name);\n\n    // When performing a negated assertion for both name and val, merely having\n    // a property with the given name isn't enough to cause the assertion to\n    // fail. It must both have a property with the given name, and the value of\n    // that property must equal the given val. Therefore, skip this assertion in\n    // favor of the next.\n    if (!negate || arguments.length === 1) {\n      this.assert(\n          hasProperty\n        , 'expected #{this} to have ' + descriptor + _.inspect(name)\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (arguments.length > 1) {\n      this.assert(\n          hasProperty && isEql(val, value)\n        , 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}'\n        , val\n        , value\n      );\n    }\n\n    flag(this, 'object', value);\n  }\n\n  Assertion.addMethod('property', assertProperty);\n\n  function assertOwnProperty (name, value, msg) {\n    flag(this, 'own', true);\n    assertProperty.apply(this, arguments);\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n  /**\n   * ### .ownPropertyDescriptor(name[, descriptor[, msg]])\n   *\n   * Asserts that the target has its own property descriptor with the given key\n   * `name`. Enumerable and non-enumerable properties are included in the\n   * search.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a');\n   *\n   * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that\n   * the property's descriptor is deeply equal to the given `descriptor`. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.\n   *\n   *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');\n   *\n   * However, it's dangerous to negate `.ownPropertyDescriptor` when providing\n   * a `descriptor`. The problem is that it creates uncertain expectations by\n   * asserting that the target either doesn't have a property descriptor with\n   * the given key `name`, or that it does have a property descriptor with the\n   * given key `name` but it’s not deeply equal to the given `descriptor`. It's\n   * often best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property descriptor with the given\n   * key `name`, it's often best to assert exactly that.\n   *\n   *     // Recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');\n   *\n   *     // Not recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * When the target is expected to have a property descriptor with the given\n   * key `name`, it's often best to assert that the property has its expected\n   * descriptor, rather than asserting that it doesn't have one of many\n   * unexpected descriptors.\n   *\n   *     // Recommended\n   *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 3,\n   *     });\n   *\n   *     // Not recommended\n   *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * `.ownPropertyDescriptor` changes the target of any assertions that follow\n   * in the chain to be the value of the property descriptor from the original\n   * target object.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a')\n   *       .that.has.property('enumerable', true);\n   *\n   * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a\n   * custom error message to show when the assertion fails. The message can also\n   * be given as the second argument to `expect`. When not providing\n   * `descriptor`, only use the second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     }, 'nooo why fail??');\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     });\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1})\n   *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `descriptor`.\n   * Instead, it's asserting that the target object has a `b` property\n   * descriptor that's deeply equal to `undefined`.\n   *\n   * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with\n   * `.ownPropertyDescriptor`.\n   *\n   * @name ownPropertyDescriptor\n   * @alias haveOwnPropertyDescriptor\n   * @param {String} name\n   * @param {Object} descriptor _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnPropertyDescriptor (name, descriptor, msg) {\n    if (typeof descriptor === 'string') {\n      msg = descriptor;\n      descriptor = null;\n    }\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n    var eql = flag(this, 'eql');\n    if (actualDescriptor && descriptor) {\n      this.assert(\n          eql(descriptor, actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n        , descriptor\n        , actualDescriptor\n        , true\n      );\n    } else {\n      this.assert(\n          actualDescriptor\n        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n      );\n    }\n    flag(this, 'object', actualDescriptor);\n  }\n\n  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n  /**\n   * ### .lengthOf(n[, msg])\n   *\n   * Asserts that the target's `length` or `size` is equal to the given number\n   * `n`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *     expect('foo').to.have.lengthOf(3);\n   *     expect(new Set([1, 2, 3])).to.have.lengthOf(3);\n   *     expect(new Map([['a', 1], ['b', 2], ['c', 3]])).to.have.lengthOf(3);\n   *\n   * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often\n   * best to assert that the target's `length` property is equal to its expected\n   * value, rather than not equal to one of many unexpected values.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.not.have.lengthOf(4); // Not recommended\n   *\n   * `.lengthOf` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);\n   *\n   * `.lengthOf` can also be used as a language chain, causing all `.above`,\n   * `.below`, `.least`, `.most`, and `.within` assertions that follow in the\n   * chain to use the target's `length` property as the target. However, it's\n   * often best to assert that the target's `length` property is equal to its\n   * expected length, rather than asserting that its `length` property falls\n   * within some range of values.\n   *\n   *     // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *\n   *     // Not recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2);\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);\n   *\n   * Due to a compatibility issue, the alias `.length` can't be chained directly\n   * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used\n   * interchangeably with `.lengthOf` in every situation. It's recommended to\n   * always use `.lengthOf` instead of `.length`.\n   *\n   *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error\n   *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected\n   *\n   * @name lengthOf\n   * @alias length\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLengthChain () {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi')\n      , descriptor = 'length'\n      , itemsCount;\n\n    switch (objType) {\n      case 'map':\n      case 'set':\n        descriptor = 'size';\n        itemsCount = obj.size;\n        break;\n      default:\n        new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n        itemsCount = obj.length;\n    }\n\n    this.assert(\n        itemsCount == n\n      , 'expected #{this} to have a ' + descriptor + ' of #{exp} but got #{act}'\n      , 'expected #{this} to not have a ' + descriptor + ' of #{act}'\n      , n\n      , itemsCount\n    );\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);\n\n  /**\n   * ### .match(re[, msg])\n   *\n   * Asserts that the target matches the given regular expression `re`.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * Add `.not` earlier in the chain to negate `.match`.\n   *\n   *     expect('foobar').to.not.match(/taco/);\n   *\n   * `.match` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect('foobar').to.match(/taco/, 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.match(/taco/);\n   *\n   * The alias `.matches` can be used interchangeably with `.match`.\n   *\n   * @name match\n   * @alias matches\n   * @param {RegExp} re\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n  function assertMatch(re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        re.exec(obj)\n      , 'expected #{this} to match ' + re\n      , 'expected #{this} not to match ' + re\n    );\n  }\n\n  Assertion.addMethod('match', assertMatch);\n  Assertion.addMethod('matches', assertMatch);\n\n  /**\n   * ### .string(str[, msg])\n   *\n   * Asserts that the target string contains the given substring `str`.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * Add `.not` earlier in the chain to negate `.string`.\n   *\n   *     expect('foobar').to.not.have.string('taco');\n   *\n   * `.string` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect('foobar').to.have.string('taco', 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.have.string('taco');\n   *\n   * @name string\n   * @param {String} str\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(obj, flagMsg, ssfi, true).is.a('string');\n\n    this.assert(\n        ~obj.indexOf(str)\n      , 'expected #{this} to contain ' + _.inspect(str)\n      , 'expected #{this} to not contain ' + _.inspect(str)\n    );\n  });\n\n  /**\n   * ### .keys(key1[, key2[, ...]])\n   *\n   * Asserts that the target object, array, map, or set has the given keys. Only\n   * the target's own inherited properties are included in the search.\n   *\n   * When the target is an object or array, keys can be provided as one or more\n   * string arguments, a single array argument, or a single object argument. In\n   * the latter case, only the keys in the given object matter; the values are\n   * ignored.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *     expect(['x', 'y']).to.have.all.keys(0, 1);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);\n   *     expect(['x', 'y']).to.have.all.keys([0, 1]);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5\n   *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5\n   *\n   * When the target is a map or set, each key must be provided as a separate\n   * argument.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');\n   *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');\n   *\n   * Because `.keys` does different things based on the target's type, it's\n   * important to check the target's type before using `.keys`. See the `.a` doc\n   * for info on testing a target's type.\n   *\n   *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');\n   *\n   * By default, strict (`===`) equality is used to compare keys of maps and\n   * sets. Add `.deep` earlier in the chain to use deep equality instead. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);\n   *\n   * By default, the target must have all of the given keys and no more. Add\n   * `.any` earlier in the chain to only require that the target have at least\n   * one of the given keys. Also, add `.not` earlier in the chain to negate\n   * `.keys`. It's often best to add `.any` when negating `.keys`, and to use\n   * `.all` when asserting `.keys` without negation.\n   *\n   * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts\n   * exactly what's expected of the output, whereas `.not.all.keys` creates\n   * uncertain expectations.\n   *\n   *     // Recommended; asserts that target doesn't have any of the given keys\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   *     // Not recommended; asserts that target doesn't have all of the given\n   *     // keys but may or may not have some of them\n   *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');\n   *\n   * When asserting `.keys` without negation, `.all` is preferred because\n   * `.all.keys` asserts exactly what's expected of the output, whereas\n   * `.any.keys` creates uncertain expectations.\n   *\n   *     // Recommended; asserts that target has all the given keys\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   *     // Not recommended; asserts that target has at least one of the given\n   *     // keys but may or may not have more of them\n   *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` appear\n   * earlier in the chain. However, it's often best to add `.all` anyway because\n   * it improves readability.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended\n   *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended\n   *\n   * Add `.include` earlier in the chain to require that the target's keys be a\n   * superset of the expected keys, rather than identical sets.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   * However, if `.any` and `.include` are combined, only the `.any` takes\n   * effect. The `.include` is ignored in this case.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.have.key('b');\n   *\n   * The alias `.key` can be used interchangeably with `.keys`.\n   *\n   * @name keys\n   * @alias key\n   * @param {...String|Array|Object} keys\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertKeys (keys) {\n    var obj = flag(this, 'object')\n      , objType = _.type(obj)\n      , keysType = _.type(keys)\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , str\n      , deepStr = ''\n      , actual\n      , ok = true\n      , flagMsg = flag(this, 'message');\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n    var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';\n\n    if (objType === 'Map' || objType === 'Set') {\n      deepStr = isDeep ? 'deeply ' : '';\n      actual = [];\n\n      // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.\n      obj.forEach(function (val, key) { actual.push(key) });\n\n      if (keysType !== 'Array') {\n        keys = Array.prototype.slice.call(arguments);\n      }\n    } else {\n      actual = _.getOwnEnumerableProperties(obj);\n\n      switch (keysType) {\n        case 'Array':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          break;\n        case 'Object':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          keys = Object.keys(keys);\n          break;\n        default:\n          keys = Array.prototype.slice.call(arguments);\n      }\n\n      // Only stringify non-Symbols because Symbols would become \"Symbol()\"\n      keys = keys.map(function (val) {\n        return typeof val === 'symbol' ? val : String(val);\n      });\n    }\n\n    if (!keys.length) {\n      throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);\n    }\n\n    var len = keys.length\n      , any = flag(this, 'any')\n      , all = flag(this, 'all')\n      , expected = keys\n      , isEql = isDeep ? flag(this, 'eql') : (val1, val2) => val1 === val2;\n\n    if (!any && !all) {\n      all = true;\n    }\n\n    // Has any\n    if (any) {\n      ok = expected.some(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          return isEql(expectedKey, actualKey);\n        });\n      });\n    }\n\n    // Has all\n    if (all) {\n      ok = expected.every(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          return isEql(expectedKey, actualKey);\n        });\n      });\n\n      if (!flag(this, 'contains')) {\n        ok = ok && keys.length == actual.length;\n      }\n    }\n\n    // Key string\n    if (len > 1) {\n      keys = keys.map(function(key) {\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n      if (all) {\n        str = keys.join(', ') + ', and ' + last;\n      }\n      if (any) {\n        str = keys.join(', ') + ', or ' + last;\n      }\n    } else {\n      str = _.inspect(keys[0]);\n    }\n\n    // Form\n    str = (len > 1 ? 'keys ' : 'key ') + str;\n\n    // Have / include\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n    // Assertion\n    this.assert(\n        ok\n      , 'expected #{this} to ' + deepStr + str\n      , 'expected #{this} to not ' + deepStr + str\n      , expected.slice(0).sort(_.compareByInspect)\n      , actual.sort(_.compareByInspect)\n      , true\n    );\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n\n  /**\n   * ### .throw([errorLike], [errMsgMatcher], [msg])\n   *\n   * When no arguments are provided, `.throw` invokes the target function and\n   * asserts that an error is thrown.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw();\n   *\n   * When one argument is provided, and it's an error constructor, `.throw`\n   * invokes the target function and asserts that an error is thrown that's an\n   * instance of that error constructor.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError);\n   *\n   * When one argument is provided, and it's an error instance, `.throw` invokes\n   * the target function and asserts that an error is thrown that's strictly\n   * (`===`) equal to that error instance.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(err);\n   *\n   * When one argument is provided, and it's a string, `.throw` invokes the\n   * target function and asserts that an error is thrown with a message that\n   * contains that string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw('salmon');\n   *\n   * When one argument is provided, and it's a regular expression, `.throw`\n   * invokes the target function and asserts that an error is thrown with a\n   * message that matches that regular expression.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(/salmon/);\n   *\n   * When two arguments are provided, and the first is an error instance or\n   * constructor, and the second is a string or regular expression, `.throw`\n   * invokes the function and asserts that an error is thrown that fulfills both\n   * conditions as described above.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon');\n   *     expect(badFn).to.throw(TypeError, /salmon/);\n   *     expect(badFn).to.throw(err, 'salmon');\n   *     expect(badFn).to.throw(err, /salmon/);\n   *\n   * Add `.not` earlier in the chain to negate `.throw`.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw();\n   *\n   * However, it's dangerous to negate `.throw` when providing any arguments.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't throw an error, or that it throws an error but of a\n   * different type than the given type, or that it throws an error of the given\n   * type but with a message that doesn't include the given string. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to throw an error, it's often best to assert\n   * exactly that.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw(); // Recommended\n   *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * When the target is expected to throw an error, it's often best to assert\n   * that the error is of its expected type, and has a message that includes an\n   * expected string, rather than asserting that it doesn't have one of many\n   * unexpected types, and doesn't have a message that includes some string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended\n   *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * `.throw` changes the target of any assertions that follow in the chain to\n   * be the error object that's thrown.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     err.code = 42;\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError).with.property('code', 42);\n   *\n   * `.throw` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`. When not providing two arguments, always use\n   * the second form.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');\n   *     expect(goodFn, 'nooo why fail??').to.throw();\n   *\n   * Due to limitations in ES5, `.throw` may not always work as expected when\n   * using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing the built-in `Error` object and\n   * then passing the subclassed constructor to `.throw`. See your transpiler's\n   * docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * Beware of some common mistakes when using the `throw` assertion. One common\n   * mistake is to accidentally invoke the function yourself instead of letting\n   * the `throw` assertion invoke the function for you. For example, when\n   * testing if a function named `fn` throws, provide `fn` instead of `fn()` as\n   * the target for the assertion.\n   *\n   *     expect(fn).to.throw();     // Good! Tests `fn` as desired\n   *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`\n   *\n   * If you need to assert that your function `fn` throws when passed certain\n   * arguments, then wrap a call to `fn` inside of another function.\n   *\n   *     expect(function () { fn(42); }).to.throw();  // Function expression\n   *     expect(() => fn(42)).to.throw();             // ES6 arrow function\n   *\n   * Another common mistake is to provide an object method (or any stand-alone\n   * function that relies on `this`) as the target of the assertion. Doing so is\n   * problematic because the `this` context will be lost when the function is\n   * invoked by `.throw`; there's no way for it to know what `this` is supposed\n   * to be. There are two ways around this problem. One solution is to wrap the\n   * method or function call inside of another function. Another solution is to\n   * use `bind`.\n   *\n   *     expect(function () { cat.meow(); }).to.throw();  // Function expression\n   *     expect(() => cat.meow()).to.throw();             // ES6 arrow function\n   *     expect(cat.meow.bind(cat)).to.throw();           // Bind\n   *\n   * Finally, it's worth mentioning that it's a best practice in JavaScript to\n   * only throw `Error` and derivatives of `Error` such as `ReferenceError`,\n   * `TypeError`, and user-defined objects that extend `Error`. No other type of\n   * value will generate a stack trace when initialized. With that said, the\n   * `throw` assertion does technically support any type of value being thrown,\n   * not just `Error` and its derivatives.\n   *\n   * The aliases `.throws` and `.Throw` can be used interchangeably with\n   * `.throw`.\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {Error|ErrorConstructor} errorLike\n   * @param {String|RegExp} errMsgMatcher error message\n   * @param {String} msg _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertThrows (errorLike, errMsgMatcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate') || false;\n    new Assertion(obj, flagMsg, ssfi, true).is.a('function');\n\n    if (errorLike instanceof RegExp || typeof errorLike === 'string') {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var caughtErr;\n    try {\n      obj();\n    } catch (err) {\n      caughtErr = err;\n    }\n\n    // If we have the negate flag enabled and at least one valid argument it means we do expect an error\n    // but we want it to match a given set of criteria\n    var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;\n\n    // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible\n    // See Issue #551 and PR #683@GitHub\n    var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);\n    var errorLikeFail = false;\n    var errMsgMatcherFail = false;\n\n    // Checking if error was thrown\n    if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {\n      // We need this to display results correctly according to their types\n      var errorLikeString = 'an error';\n      if (errorLike instanceof Error) {\n        errorLikeString = '#{exp}';\n      } else if (errorLike) {\n        errorLikeString = _.checkError.getConstructorName(errorLike);\n      }\n\n      this.assert(\n          caughtErr\n        , 'expected #{this} to throw ' + errorLikeString\n        , 'expected #{this} to not throw an error but #{act} was thrown'\n        , errorLike && errorLike.toString()\n        , (caughtErr instanceof Error ?\n            caughtErr.toString() : (typeof caughtErr === 'string' ? caughtErr : caughtErr &&\n                                    _.checkError.getConstructorName(caughtErr)))\n      );\n    }\n\n    if (errorLike && caughtErr) {\n      // We should compare instances only if `errorLike` is an instance of `Error`\n      if (errorLike instanceof Error) {\n        var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);\n\n        if (isCompatibleInstance === negate) {\n          // These checks were created to ensure we won't fail too soon when we've got both args and a negate\n          // See Issue #551 and PR #683@GitHub\n          if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n          } else {\n            this.assert(\n                negate\n              , 'expected #{this} to throw #{exp} but #{act} was thrown'\n              , 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : '')\n              , errorLike.toString()\n              , caughtErr.toString()\n            );\n          }\n        }\n      }\n\n      var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);\n      if (isCompatibleConstructor === negate) {\n        if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n        } else {\n          this.assert(\n              negate\n            , 'expected #{this} to throw #{exp} but #{act} was thrown'\n            , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n            , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n            , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n          );\n        }\n      }\n    }\n\n    if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {\n      // Here we check compatible messages\n      var placeholder = 'including';\n      if (errMsgMatcher instanceof RegExp) {\n        placeholder = 'matching'\n      }\n\n      var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);\n      if (isCompatibleMessage === negate) {\n        if (everyArgIsDefined && negate) {\n            errMsgMatcherFail = true;\n        } else {\n          this.assert(\n            negate\n            , 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}'\n            , 'expected #{this} to throw error not ' + placeholder + ' #{exp}'\n            ,  errMsgMatcher\n            ,  _.checkError.getMessage(caughtErr)\n          );\n        }\n      }\n    }\n\n    // If both assertions failed and both should've matched we throw an error\n    if (errorLikeFail && errMsgMatcherFail) {\n      this.assert(\n        negate\n        , 'expected #{this} to throw #{exp} but #{act} was thrown'\n        , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n        , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n        , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n      );\n    }\n\n    flag(this, 'object', caughtErr);\n  };\n\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n\n  /**\n   * ### .respondTo(method[, msg])\n   *\n   * When the target is a non-function object, `.respondTo` asserts that the\n   * target has a method with the given name `method`. The method can be own or\n   * inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.respondTo('meow');\n   *\n   * When the target is a function, `.respondTo` asserts that the target's\n   * `prototype` property has a method with the given name `method`. Again, the\n   * method can be own or inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(Cat).to.respondTo('meow');\n   *\n   * Add `.itself` earlier in the chain to force `.respondTo` to treat the\n   * target as a non-function object, even if it's a function. Thus, it asserts\n   * that the target has a method with the given name `method`, rather than\n   * asserting that the target's `prototype` property has a method with the\n   * given name `method`.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * When not adding `.itself`, it's important to check the target's type before\n   * using `.respondTo`. See the `.a` doc for info on checking a target's type.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');\n   *\n   * Add `.not` earlier in the chain to negate `.respondTo`.\n   *\n   *     function Dog () {}\n   *     Dog.prototype.bark = function () {};\n   *\n   *     expect(new Dog()).to.not.respondTo('meow');\n   *\n   * `.respondTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect({}).to.respondTo('meow', 'nooo why fail??');\n   *     expect({}, 'nooo why fail??').to.respondTo('meow');\n   *\n   * The alias `.respondsTo` can be used interchangeably with `.respondTo`.\n   *\n   * @name respondTo\n   * @alias respondsTo\n   * @param {String} method\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function respondTo (method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , itself = flag(this, 'itself')\n      , context = ('function' === typeof obj && !itself)\n        ? obj.prototype[method]\n        : obj[method];\n\n    this.assert(\n        'function' === typeof context\n      , 'expected #{this} to respond to ' + _.inspect(method)\n      , 'expected #{this} to not respond to ' + _.inspect(method)\n    );\n  }\n\n  Assertion.addMethod('respondTo', respondTo);\n  Assertion.addMethod('respondsTo', respondTo);\n\n  /**\n   * ### .itself\n   *\n   * Forces all `.respondTo` assertions that follow in the chain to behave as if\n   * the target is a non-function object, even if it's a function. Thus, it\n   * causes `.respondTo` to assert that the target has a method with the given\n   * name, rather than asserting that the target's `prototype` property has a\n   * method with the given name.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * @name itself\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n\n  /**\n   * ### .satisfy(matcher[, msg])\n   *\n   * Invokes the given `matcher` function with the target being passed as the\n   * first argument, and asserts that the value returned is truthy.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 0;\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.satisfy`.\n   *\n   *     expect(1).to.not.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * `.satisfy` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 2;\n   *     }, 'nooo why fail??');\n   *\n   *     expect(1, 'nooo why fail??').to.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * The alias `.satisfies` can be used interchangeably with `.satisfy`.\n   *\n   * @name satisfy\n   * @alias satisfies\n   * @param {Function} matcher\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function satisfy (matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(\n        result\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n      , flag(this, 'negate') ? false : true\n      , result\n    );\n  }\n\n  Assertion.addMethod('satisfy', satisfy);\n  Assertion.addMethod('satisfies', satisfy);\n\n  /**\n   * ### .closeTo(expected, delta[, msg])\n   *\n   * Asserts that the target is a number that's within a given +/- `delta` range\n   * of the given number `expected`. However, it's often best to assert that the\n   * target is equal to its expected value.\n   *\n   *     // Recommended\n   *     expect(1.5).to.equal(1.5);\n   *\n   *     // Not recommended\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *     expect(1.5).to.be.closeTo(2, 0.5);\n   *     expect(1.5).to.be.closeTo(1, 1);\n   *\n   * Add `.not` earlier in the chain to negate `.closeTo`.\n   *\n   *     expect(1.5).to.equal(1.5); // Recommended\n   *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended\n   *\n   * `.closeTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');\n   *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);\n   *\n   * The alias `.approximately` can be used interchangeably with `.closeTo`.\n   *\n   * @name closeTo\n   * @alias approximately\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function closeTo(expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).is.a('number');\n    if (typeof expected !== 'number' || typeof delta !== 'number') {\n      flagMsg = flagMsg ? flagMsg + ': ' : '';\n      var deltaMessage = delta === undefined ? \", and a delta is required\" : \"\";\n      throw new AssertionError(\n          flagMsg + 'the arguments to closeTo or approximately must be numbers' + deltaMessage,\n          undefined,\n          ssfi\n      );\n    }\n\n    this.assert(\n        Math.abs(obj - expected) <= delta\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n    );\n  }\n\n  Assertion.addMethod('closeTo', closeTo);\n  Assertion.addMethod('approximately', closeTo);\n\n  // Note: Duplicates are ignored if testing for inclusion instead of sameness.\n  function isSubsetOf(subset, superset, cmp, contains, ordered) {\n    if (!contains) {\n      if (subset.length !== superset.length) return false;\n      superset = superset.slice();\n    }\n\n    return subset.every(function(elem, idx) {\n      if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];\n\n      if (!cmp) {\n        var matchIdx = superset.indexOf(elem);\n        if (matchIdx === -1) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      }\n\n      return superset.some(function(elem2, matchIdx) {\n        if (!cmp(elem, elem2)) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      });\n    });\n  }\n\n  /**\n   * ### .members(set[, msg])\n   *\n   * Asserts that the target array has the same members as the given array\n   * `set`.\n   *\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3]);\n   *     expect([1, 2, 2]).to.have.members([2, 1, 2]);\n   *\n   * By default, members are compared using strict (`===`) equality. Add `.deep`\n   * earlier in the chain to use deep equality instead. See the `deep-eql`\n   * project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   * By default, order doesn't matter. Add `.ordered` earlier in the chain to\n   * require that members appear in the same order.\n   *\n   *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3])\n   *       .but.not.ordered.members([2, 1, 3]);\n   *\n   * By default, both arrays must be the same size. Add `.include` earlier in\n   * the chain to require that the target's members be a superset of the\n   * expected members. Note that duplicates are ignored in the subset when\n   * `.include` is added.\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * `.deep`, `.ordered`, and `.include` can all be combined. However, if\n   * `.include` and `.ordered` are combined, the ordering begins at the start of\n   * both arrays.\n   *\n   *     expect([{a: 1}, {b: 2}, {c: 3}])\n   *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])\n   *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);\n   *\n   * Add `.not` earlier in the chain to negate `.members`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the target array doesn't have all of the same members as\n   * the given array `set` but may or may not have some of them. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended\n   *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended\n   *\n   * `.members` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');\n   *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');\n    new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');\n\n    var contains = flag(this, 'contains');\n    var ordered = flag(this, 'ordered');\n\n    var subject, failMsg, failNegateMsg;\n\n    if (contains) {\n      subject = ordered ? 'an ordered superset' : 'a superset';\n      failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';\n      failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';\n    } else {\n      subject = ordered ? 'ordered members' : 'members';\n      failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';\n      failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';\n    }\n\n    var cmp = flag(this, 'deep') ? flag(this, 'eql') : undefined;\n\n    this.assert(\n        isSubsetOf(subset, obj, cmp, contains, ordered)\n      , failMsg\n      , failNegateMsg\n      , subset\n      , obj\n      , true\n    );\n  });\n\n  /**\n   * ### .oneOf(list[, msg])\n   *\n   * Asserts that the target is a member of the given array `list`. However,\n   * it's often best to assert that the target is equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended\n   *\n   * Comparisons are performed using strict (`===`) equality.\n   *\n   * Add `.not` earlier in the chain to negate `.oneOf`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended\n   *\n   * It can also be chained with `.contain` or `.include`, which will work with\n   * both arrays and strings:\n   *\n   *     expect('Today is sunny').to.contain.oneOf(['sunny', 'cloudy'])\n   *     expect('Today is rainy').to.not.contain.oneOf(['sunny', 'cloudy'])\n   *     expect([1,2,3]).to.contain.oneOf([3,4,5])\n   *     expect([1,2,3]).to.not.contain.oneOf([4,5,6])\n   *\n   * `.oneOf` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);\n   *\n   * @name oneOf\n   * @param {Array<*>} list\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function oneOf (list, msg) {\n    if (msg) flag(this, 'message', msg);\n    var expected = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi')\n      , contains = flag(this, 'contains')\n      , isDeep = flag(this, 'deep')\n      , eql = flag(this, 'eql');\n    new Assertion(list, flagMsg, ssfi, true).to.be.an('array');\n\n    if (contains) {\n      this.assert(\n        list.some(function(possibility) { return expected.indexOf(possibility) > -1 })\n        , 'expected #{this} to contain one of #{exp}'\n        , 'expected #{this} to not contain one of #{exp}'\n        , list\n        , expected\n      );\n    } else {\n      if (isDeep) {\n        this.assert(\n          list.some(function(possibility) { return eql(expected, possibility) })\n          , 'expected #{this} to deeply equal one of #{exp}'\n          , 'expected #{this} to deeply equal one of #{exp}'\n          , list\n          , expected\n        );\n      } else {\n        this.assert(\n          list.indexOf(expected) > -1\n          , 'expected #{this} to be one of #{exp}'\n          , 'expected #{this} to not be one of #{exp}'\n          , list\n          , expected\n        );\n      }\n    }\n  }\n\n  Assertion.addMethod('oneOf', oneOf);\n\n  /**\n   * ### .change(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.change` asserts that the given function\n   * `subject` returns a different value when it's invoked before the target\n   * function compared to when it's invoked afterward. However, it's often best\n   * to assert that `subject` is equal to its expected value.\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     // Recommended\n   *     expect(getDots()).to.equal('');\n   *     addDot();\n   *     expect(getDots()).to.equal('.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(getDots);\n   *\n   * When two arguments are provided, `.change` asserts that the value of the\n   * given object `subject`'s `prop` property is different before invoking the\n   * target function compared to afterward.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     // Recommended\n   *     expect(myObj).to.have.property('dots', '');\n   *     addDot();\n   *     expect(myObj).to.have.property('dots', '.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(myObj, 'dots');\n   *\n   * Strict (`===`) equality is used to compare before and after values.\n   *\n   * Add `.not` earlier in the chain to negate `.change`.\n   *\n   *     var dots = ''\n   *       , noop = function () {}\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(noop).to.not.change(getDots);\n   *\n   *     var myObj = {dots: ''}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'dots');\n   *\n   * `.change` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(addDot, 'nooo why fail??').to.not.change(getDots);\n   *\n   * `.change` also causes all `.by` assertions that follow in the chain to\n   * assert how much a numeric subject was increased or decreased by. However,\n   * it's dangerous to use `.change.by`. The problem is that it creates\n   * uncertain expectations by asserting that the subject either increases by\n   * the given delta, or that it decreases by the given delta. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * The alias `.changes` can be used interchangeably with `.change`.\n   *\n   * @name change\n   * @alias changes\n   * @param {String} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertChanges (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    // This gets flagged because of the .by(delta) assertion\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'change');\n    flag(this, 'realDelta', final !== initial);\n\n    this.assert(\n      initial !== final\n      , 'expected ' + msgObj + ' to change'\n      , 'expected ' + msgObj + ' to not change'\n    );\n  }\n\n  Assertion.addMethod('change', assertChanges);\n  Assertion.addMethod('changes', assertChanges);\n\n  /**\n   * ### .increase(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.increase` asserts that the given function\n   * `subject` returns a greater number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.increase` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * greater of a number is returned. It's often best to assert that the return\n   * value increased by the expected amount, rather than asserting it increased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , addTwo = function () { val += 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(addTwo).to.increase(getVal).by(2); // Recommended\n   *     expect(addTwo).to.increase(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.increase` asserts that the value of the\n   * given object `subject`'s `prop` property is greater after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.increase`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either decreases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to decrease, it's often best to assert that it\n   * decreased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * `.increase` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.increase(getVal);\n   *\n   * The alias `.increases` can be used interchangeably with `.increase`.\n   *\n   * @name increase\n   * @alias increases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertIncreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'increase');\n    flag(this, 'realDelta', final - initial);\n\n    this.assert(\n      final - initial > 0\n      , 'expected ' + msgObj + ' to increase'\n      , 'expected ' + msgObj + ' to not increase'\n    );\n  }\n\n  Assertion.addMethod('increase', assertIncreases);\n  Assertion.addMethod('increases', assertIncreases);\n\n  /**\n   * ### .decrease(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.decrease` asserts that the given function\n   * `subject` returns a lesser number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.decrease` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * lesser of a number is returned. It's often best to assert that the return\n   * value decreased by the expected amount, rather than asserting it decreased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , subtractTwo = function () { val -= 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.decrease` asserts that the value of the\n   * given object `subject`'s `prop` property is lesser after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.decrease`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either increases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to increase, it's often best to assert that it\n   * increased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * `.decrease` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.decrease(getVal);\n   *\n   * The alias `.decreases` can be used interchangeably with `.decrease`.\n   *\n   * @name decrease\n   * @alias decreases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDecreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'decrease');\n    flag(this, 'realDelta', initial - final);\n\n    this.assert(\n      final - initial < 0\n      , 'expected ' + msgObj + ' to decrease'\n      , 'expected ' + msgObj + ' to not decrease'\n    );\n  }\n\n  Assertion.addMethod('decrease', assertDecreases);\n  Assertion.addMethod('decreases', assertDecreases);\n\n  /**\n   * ### .by(delta[, msg])\n   *\n   * When following an `.increase` assertion in the chain, `.by` asserts that\n   * the subject of the `.increase` assertion increased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   * When following a `.decrease` assertion in the chain, `.by` asserts that the\n   * subject of the `.decrease` assertion decreased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);\n   *\n   * When following a `.change` assertion in the chain, `.by` asserts that the\n   * subject of the `.change` assertion either increased or decreased by the\n   * given `delta`. However, it's dangerous to use `.change.by`. The problem is\n   * that it creates uncertain expectations. It's often best to identify the\n   * exact output that's expected, and then write an assertion that only accepts\n   * that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.by`. However, it's often best\n   * to assert that the subject changed by its expected delta, rather than\n   * asserting that it didn't change by one of countless unexpected deltas.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   *     // Not recommended\n   *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);\n   *\n   * `.by` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');\n   *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);\n   *\n   * @name by\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDelta(delta, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var msgObj = flag(this, 'deltaMsgObj');\n    var initial = flag(this, 'initialDeltaValue');\n    var final = flag(this, 'finalDeltaValue');\n    var behavior = flag(this, 'deltaBehavior');\n    var realDelta = flag(this, 'realDelta');\n\n    var expression;\n    if (behavior === 'change') {\n      expression = Math.abs(final - initial) === Math.abs(delta);\n    } else {\n      expression = realDelta === Math.abs(delta);\n    }\n\n    this.assert(\n      expression\n      , 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta\n      , 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta\n    );\n  }\n\n  Assertion.addMethod('by', assertDelta);\n\n  /**\n   * ### .extensible\n   *\n   * Asserts that the target is extensible, which means that new properties can\n   * be added to it. Primitives are never extensible.\n   *\n   *     expect({a: 1}).to.be.extensible;\n   *\n   * Add `.not` earlier in the chain to negate `.extensible`.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({})\n   *       , sealedObject = Object.seal({})\n   *       , frozenObject = Object.freeze({});\n   *\n   *     expect(nonExtensibleObject).to.not.be.extensible;\n   *     expect(sealedObject).to.not.be.extensible;\n   *     expect(frozenObject).to.not.be.extensible;\n   *     expect(1).to.not.be.extensible;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(1, 'nooo why fail??').to.be.extensible;\n   *\n   * @name extensible\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('extensible', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isExtensible = obj === Object(obj) && Object.isExtensible(obj);\n\n    this.assert(\n      isExtensible\n      , 'expected #{this} to be extensible'\n      , 'expected #{this} to not be extensible'\n    );\n  });\n\n  /**\n   * ### .sealed\n   *\n   * Asserts that the target is sealed, which means that new properties can't be\n   * added to it, and its existing properties can't be reconfigured or deleted.\n   * However, it's possible that its existing properties can still be reassigned\n   * to different values. Primitives are always sealed.\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(sealedObject).to.be.sealed;\n   *     expect(frozenObject).to.be.sealed;\n   *     expect(1).to.be.sealed;\n   *\n   * Add `.not` earlier in the chain to negate `.sealed`.\n   *\n   *     expect({a: 1}).to.not.be.sealed;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.sealed;\n   *\n   * @name sealed\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('sealed', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;\n\n    this.assert(\n      isSealed\n      , 'expected #{this} to be sealed'\n      , 'expected #{this} to not be sealed'\n    );\n  });\n\n  /**\n   * ### .frozen\n   *\n   * Asserts that the target is frozen, which means that new properties can't be\n   * added to it, and its existing properties can't be reassigned to different\n   * values, reconfigured, or deleted. Primitives are always frozen.\n   *\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(frozenObject).to.be.frozen;\n   *     expect(1).to.be.frozen;\n   *\n   * Add `.not` earlier in the chain to negate `.frozen`.\n   *\n   *     expect({a: 1}).to.not.be.frozen;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.frozen;\n   *\n   * @name frozen\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('frozen', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;\n\n    this.assert(\n      isFrozen\n      , 'expected #{this} to be frozen'\n      , 'expected #{this} to not be frozen'\n    );\n  });\n\n  /**\n   * ### .finite\n   *\n   * Asserts that the target is a number, and isn't `NaN` or positive/negative\n   * `Infinity`.\n   *\n   *     expect(1).to.be.finite;\n   *\n   * Add `.not` earlier in the chain to negate `.finite`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either isn't a number, or that it's `NaN`, or\n   * that it's positive `Infinity`, or that it's negative `Infinity`. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to be a number, it's often best to assert\n   * that it's the expected type, rather than asserting that it isn't one of\n   * many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be `NaN`, it's often best to assert exactly\n   * that.\n   *\n   *     expect(NaN).to.be.NaN; // Recommended\n   *     expect(NaN).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be positive infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(Infinity).to.equal(Infinity); // Recommended\n   *     expect(Infinity).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be negative infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(-Infinity).to.equal(-Infinity); // Recommended\n   *     expect(-Infinity).to.not.be.finite; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect('foo', 'nooo why fail??').to.be.finite;\n   *\n   * @name finite\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('finite', function(msg) {\n    var obj = flag(this, 'object');\n\n    this.assert(\n        typeof obj === 'number' && isFinite(obj)\n      , 'expected #{this} to be a finite number'\n      , 'expected #{this} to not be a finite number'\n    );\n  });\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  /*!\n   * Chai dependencies.\n   */\n\n  var Assertion = chai.Assertion\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @namespace Assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert, true);\n    test.assert(\n        express\n      , errmsg\n      , '[ negation message unavailable ]'\n    );\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   *     assert.fail();\n   *     assert.fail(\"custom error message\");\n   *     assert.fail(1, 2);\n   *     assert.fail(1, 2, \"custom error message\");\n   *     assert.fail(1, 2, \"custom error message\", \">\");\n   *     assert.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        // Comply with Node's fail([message]) interface\n\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, assert.fail);\n  };\n\n  /**\n   * ### .isOk(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.isOk('everything', 'everything is ok');\n   *     assert.isOk(false, 'this will fail');\n   *\n   * @name isOk\n   * @alias ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isOk = function (val, msg) {\n    new Assertion(val, msg, assert.isOk, true).is.ok;\n  };\n\n  /**\n   * ### .isNotOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.isNotOk('everything', 'this will fail');\n   *     assert.isNotOk(false, 'this will pass');\n   *\n   * @name isNotOk\n   * @alias notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotOk = function (val, msg) {\n    new Assertion(val, msg, assert.isNotOk, true).is.not.ok;\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal, true);\n\n    test.assert(\n        exp == flag(test, 'object')\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual, true);\n\n    test.assert(\n        exp != flag(test, 'object')\n      , 'expected #{this} to not equal #{exp}'\n      , 'expected #{this} to equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);\n  };\n\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);\n  };\n\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @alias deepStrictEqual\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);\n  };\n\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);\n  };\n\n   /**\n   * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n   *\n   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.\n   *\n   *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n   *\n   * @name isAbove\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAbove\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAbove = function (val, abv, msg) {\n    new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);\n  };\n\n   /**\n   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n   *\n   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.\n   *\n   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n   *\n   * @name isAtLeast\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtLeast\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtLeast = function (val, atlst, msg) {\n    new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);\n  };\n\n   /**\n   * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n   *\n   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.\n   *\n   *     assert.isBelow(3, 6, '3 is strictly less than 6');\n   *\n   * @name isBelow\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeBelow\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBelow = function (val, blw, msg) {\n    new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);\n  };\n\n   /**\n   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n   *\n   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.\n   *\n   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n   *\n   * @name isAtMost\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtMost\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtMost = function (val, atmst, msg) {\n    new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);\n  };\n\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isTrue, true).is['true'];\n  };\n\n  /**\n   * ### .isNotTrue(value, [message])\n   *\n   * Asserts that `value` is not true.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotTrue(tea, 'great, time for tea!');\n   *\n   * @name isNotTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);\n  };\n\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isFalse, true).is['false'];\n  };\n\n  /**\n   * ### .isNotFalse(value, [message])\n   *\n   * Asserts that `value` is not false.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotFalse(tea, 'great, time for tea!');\n   *\n   * @name isNotFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);\n  };\n\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNull, true).to.equal(null);\n  };\n\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);\n  };\n\n  /**\n   * ### .isNaN\n   *\n   * Asserts that value is NaN.\n   *\n   *     assert.isNaN(NaN, 'NaN is NaN');\n   *\n   * @name isNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNaN, true).to.be.NaN;\n  };\n\n  /**\n   * ### .isNotNaN\n   *\n   * Asserts that value is not NaN.\n   *\n   *     assert.isNotNaN(4, '4 is not NaN');\n   *\n   * @name isNotNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n  assert.isNotNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;\n  };\n\n  /**\n   * ### .exists\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi';\n   *\n   *     assert.exists(foo, 'foo is neither `null` nor `undefined`');\n   *\n   * @name exists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.exists = function (val, msg) {\n    new Assertion(val, msg, assert.exists, true).to.exist;\n  };\n\n  /**\n   * ### .notExists\n   *\n   * Asserts that the target is either `null` or `undefined`.\n   *\n   *     var bar = null\n   *       , baz;\n   *\n   *     assert.notExists(bar);\n   *     assert.notExists(baz, 'baz is either null or undefined');\n   *\n   * @name notExists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notExists = function (val, msg) {\n    new Assertion(val, msg, assert.notExists, true).to.not.exist;\n  };\n\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);\n  };\n\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);\n  };\n\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isFunction, true).to.be.a('function');\n  };\n\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');\n  };\n\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   * _The assertion does not match subclassed objects._\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg, assert.isObject, true).to.be.a('object');\n  };\n\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');\n  };\n\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg, assert.isArray, true).to.be.an('array');\n  };\n\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');\n  };\n\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg, assert.isString, true).to.be.a('string');\n  };\n\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');\n  };\n\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNumber, true).to.be.a('number');\n  };\n\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');\n  };\n\n   /**\n   * ### .isFinite(value, [message])\n   *\n   * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.\n   *\n   *     var cups = 2;\n   *     assert.isFinite(cups, 'how many cups');\n   *\n   *     assert.isFinite(NaN); // throws\n   *\n   * @name isFinite\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFinite = function (val, msg) {\n    new Assertion(val, msg, assert.isFinite, true).to.be.finite;\n  };\n\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');\n  };\n\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');\n  };\n\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.typeOf, true).to.be.a(type);\n  };\n\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);\n  };\n\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);\n  };\n\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notInstanceOf, true)\n      .to.not.be.instanceOf(type);\n  };\n\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.include([1,2,3], 2, 'array contains value');\n   *     assert.include('foobar', 'foo', 'string contains substring');\n   *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');\n   *\n   * Strict equality (===) is used. When asserting the inclusion of a value in\n   * an array, the array is searched for an element that's strictly equal to the\n   * given value. When asserting a subset of properties in an object, the object\n   * is searched for the given property keys, checking that each one is present\n   * and strictly equal to the given property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.include([obj1, obj2], obj1);\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include, true).include(inc);\n  };\n\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.notInclude([1,2,3], 4, \"array doesn't contain value\");\n   *     assert.notInclude('foobar', 'baz', \"string doesn't contain substring\");\n   *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');\n   *\n   * Strict equality (===) is used. When asserting the absence of a value in an\n   * array, the array is searched to confirm the absence of an element that's\n   * strictly equal to the given value. When asserting a subset of properties in\n   * an object, the object is searched to confirm that at least one of the given\n   * property keys is either not present or not strictly equal to the given\n   * property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notInclude([obj1, obj2], {a: 1});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude, true).not.include(inc);\n  };\n\n  /**\n   * ### .deepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.deepInclude([obj1, obj2], {a: 1});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});\n   *\n   * @name deepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);\n  };\n\n  /**\n   * ### .notDeepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notDeepInclude([obj1, obj2], {a: 9});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});\n   *\n   * @name notDeepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);\n  };\n\n  /**\n   * ### .nestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.[b]': 'x'});\n   *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'x'});\n   *\n   * @name nestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);\n  };\n\n  /**\n   * ### .notNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.b': 'y'});\n   *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'y'});\n   *\n   * @name notNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notNestedInclude, true)\n      .not.nested.include(inc);\n  };\n\n  /**\n   * ### .deepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});\n   *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {x: 1}});\n   *\n   * @name deepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepNestedInclude, true)\n      .deep.nested.include(inc);\n  };\n\n  /**\n   * ### .notDeepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})\n   *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {y: 2}});\n   *\n   * @name notDeepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepNestedInclude, true)\n      .not.deep.nested.include(inc);\n  };\n\n  /**\n   * ### .ownInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     assert.ownInclude({ a: 1 }, { a: 1 });\n   *\n   * @name ownInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ownInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);\n  };\n\n  /**\n   * ### .notOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     assert.notOwnInclude({ a: 1 }, { b: 2 });\n   *\n   * @name notOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);\n  };\n\n  /**\n   * ### .deepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});\n   *\n   * @name deepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepOwnInclude, true)\n      .deep.own.include(inc);\n  };\n\n   /**\n   * ### .notDeepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});\n   *\n   * @name notDeepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepOwnInclude, true)\n      .not.deep.own.include(inc);\n  };\n\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.match, true).to.match(re);\n  };\n\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);\n  };\n\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *     assert.property({ tea: { green: 'matcha' }}, 'toString');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.property, true).to.have.property(prop);\n  };\n\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notProperty, true)\n      .to.not.have.property(prop);\n  };\n\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.propertyVal, true)\n      .to.have.property(prop, val);\n  };\n\n  /**\n   * ### .notPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');\n   *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');\n   *\n   * @name notPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notPropertyVal, true)\n      .to.not.have.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a deep equality check.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepPropertyVal, true)\n      .to.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a deep equality check.\n   *\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *\n   * @name notDeepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepPropertyVal, true)\n      .to.not.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .ownProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct property named by `property`. Inherited\n   * properties aren't checked.\n   *\n   *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name ownProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.ownProperty, true)\n      .to.have.own.property(prop);\n  };\n\n  /**\n   * ### .notOwnProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by\n   * `property`. Inherited properties aren't checked.\n   *\n   *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *     assert.notOwnProperty({}, 'toString');\n   *\n   * @name notOwnProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notOwnProperty, true)\n      .to.not.have.own.property(prop);\n  };\n\n  /**\n   * ### .ownPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a strict equality check (===).\n   * Inherited properties aren't checked.\n   *\n   *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');\n   *\n   * @name ownPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.ownPropertyVal, true)\n      .to.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .notOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a strict equality check\n   * (===). Inherited properties aren't checked.\n   *\n   *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');\n   *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notOwnPropertyVal, true)\n      .to.not.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .deepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a deep equality check. Inherited\n   * properties aren't checked.\n   *\n   *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.deepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.deepOwnPropertyVal, true)\n      .to.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .notDeepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a deep equality check.\n   * Inherited properties aren't checked.\n   *\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notDeepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true)\n      .to.not.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .nestedProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`, which can be a string using dot- and bracket-notation for\n   * nested reference.\n   *\n   *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name nestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.nestedProperty, true)\n      .to.have.nested.property(prop);\n  };\n\n  /**\n   * ### .notNestedProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for nested reference. The\n   * property cannot exist on the object nor anywhere in its prototype chain.\n   *\n   *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notNestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notNestedProperty, true)\n      .to.not.have.nested.property(prop);\n  };\n\n  /**\n   * ### .nestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a strict equality check (===).\n   *\n   *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name nestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.nestedPropertyVal, true)\n      .to.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a strict equality check (===).\n   *\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');\n   *\n   * @name notNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notNestedPropertyVal, true)\n      .to.not.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .deepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with a value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a deep equality check.\n   *\n   *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });\n   *\n   * @name deepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepNestedPropertyVal, true)\n      .to.have.deep.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a deep equality check.\n   *\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });\n   *\n   * @name notDeepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true)\n      .to.not.have.deep.nested.property(prop, val);\n  }\n\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` or `size` with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n   *     assert.lengthOf(new Set([1,2,3]), 3, 'set has size of 3');\n   *     assert.lengthOf(new Map([['a',1],['b',2],['c',3]]), 3, 'map has size of 3');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);\n  };\n\n  /**\n   * ### .hasAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});\n   *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAnyKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);\n  }\n\n  /**\n   * ### .hasAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);\n   *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);\n  }\n\n  /**\n   * ### .containsAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all of the `keys` provided but may have more keys not listed.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}]);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name containsAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllKeys, true)\n      .to.contain.all.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAnyKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true)\n      .to.not.have.any.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllKeys, true)\n      .to.not.have.all.keys(keys);\n  }\n\n  /**\n   * ### .hasAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyDeepKeys, true)\n      .to.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .hasAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllDeepKeys, true)\n      .to.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .containsAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` contains all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name containsAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllDeepKeys, true)\n      .to.contain.all.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true)\n      .to.not.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true)\n      .to.not.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.throws(fn, 'Error thrown must have this msg');\n   *     assert.throws(fn, /Error thrown must have a msg that matches this/);\n   *     assert.throws(fn, ReferenceError);\n   *     assert.throws(fn, errorInstance);\n   *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');\n   *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');\n   *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);\n   *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);\n   *\n   * @name throws\n   * @alias throw\n   * @alias Throw\n   * @param {Function} fn\n   * @param {ErrorConstructor|Error} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.throws = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var assertErr = new Assertion(fn, msg, assert.throws, true)\n      .to.throw(errorLike, errMsgMatcher);\n    return flag(assertErr, 'object');\n  };\n\n  /**\n   * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');\n   *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);\n   *     assert.doesNotThrow(fn, Error);\n   *     assert.doesNotThrow(fn, errorInstance);\n   *     assert.doesNotThrow(fn, Error, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, Error, /Error must not match this/);\n   *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);\n   *\n   * @name doesNotThrow\n   * @param {Function} fn\n   * @param {ErrorConstructor} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    new Assertion(fn, msg, assert.doesNotThrow, true)\n      .to.not.throw(errorLike, errMsgMatcher);\n  };\n\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.operator = function (val, operator, val2, msg) {\n    var ok;\n    switch(operator) {\n      case '==':\n        ok = val == val2;\n        break;\n      case '===':\n        ok = val === val2;\n        break;\n      case '>':\n        ok = val > val2;\n        break;\n      case '>=':\n        ok = val >= val2;\n        break;\n      case '<':\n        ok = val < val2;\n        break;\n      case '<=':\n        ok = val <= val2;\n        break;\n      case '!=':\n        ok = val != val2;\n        break;\n      case '!==':\n        ok = val !== val2;\n        break;\n      default:\n        msg = msg ? msg + ': ' : msg;\n        throw new chai.AssertionError(\n          msg + 'Invalid operator \"' + operator + '\"',\n          undefined,\n          assert.operator\n        );\n    }\n    var test = new Assertion(ok, msg, assert.operator, true);\n    test.assert(\n        true === flag(test, 'object')\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n  };\n\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);\n  };\n\n  /**\n   * ### .approximately(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name approximately\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.approximately = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.approximately, true)\n      .to.be.approximately(exp, delta);\n  };\n\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * strict equality check (===).\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameMembers, true)\n      .to.have.same.members(set2);\n  }\n\n  /**\n   * ### .notSameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');\n   *\n   * @name notSameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameMembers, true)\n      .to.not.have.same.members(set2);\n  }\n\n  /**\n   * ### .sameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * deep equality check.\n   *\n   *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');\n   *\n   * @name sameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepMembers, true)\n      .to.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a deep equality check.\n   *\n   *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');\n   *\n   * @name notSameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepMembers, true)\n      .to.not.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .sameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');\n   *\n   * @name sameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameOrderedMembers, true)\n      .to.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a strict equality check (===).\n   *\n   *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');\n   *\n   * @name notSameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameOrderedMembers, true)\n      .to.not.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .sameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a deep equality check.\n   *\n   *     assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');\n   *\n   * @name sameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepOrderedMembers, true)\n      .to.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a deep equality check.\n   *\n   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');\n   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');\n   *\n   * @name notSameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true)\n      .to.not.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeMembers, true)\n      .to.include.members(subset);\n  }\n\n  /**\n   * ### .notIncludeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');\n   *\n   * @name notIncludeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeMembers, true)\n      .to.not.include.members(subset);\n  }\n\n  /**\n   * ### .includeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a deep\n   * equality check. Duplicates are ignored.\n   *\n   *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');\n   *\n   * @name includeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepMembers, true)\n      .to.include.deep.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * deep equality check. Duplicates are ignored.\n   *\n   *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');\n   *\n   * @name notIncludeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepMembers, true)\n      .to.not.include.deep.members(subset);\n  }\n\n  /**\n   * ### .includeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');\n   *\n   * @name includeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeOrderedMembers, true)\n      .to.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');\n   *\n   * @name notIncludeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeOrderedMembers, true)\n      .to.not.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .includeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');\n   *\n   * @name includeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepOrderedMembers, true)\n      .to.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');\n   *\n   * @name notIncludeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true)\n      .to.not.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .oneOf(inList, list, [message])\n   *\n   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n   *\n   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n   *\n   * @name oneOf\n   * @param {*} inList\n   * @param {Array<*>} list\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.oneOf = function (inList, list, msg) {\n    new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);\n  }\n\n  /**\n   * ### .changes(function, object, property, [message])\n   *\n   * Asserts that a function changes the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 22 };\n   *     assert.changes(fn, obj, 'val');\n   *\n   * @name changes\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changes = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);\n  }\n\n   /**\n   * ### .changesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function changes the value of a property by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 2 };\n   *     assert.changesBy(fn, obj, 'val', 2);\n   *\n   * @name changesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesBy, true)\n      .to.change(obj, prop).by(delta);\n  }\n\n   /**\n   * ### .doesNotChange(function, object, property, [message])\n   *\n   * Asserts that a function does not change the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { console.log('foo'); };\n   *     assert.doesNotChange(fn, obj, 'val');\n   *\n   * @name doesNotChange\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotChange = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotChange, true)\n      .to.not.change(obj, prop);\n  }\n\n  /**\n   * ### .changesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.changesButNotBy(fn, obj, 'val', 5);\n   *\n   * @name changesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesButNotBy, true)\n      .to.change(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .increases(function, object, property, [message])\n   *\n   * Asserts that a function increases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 13 };\n   *     assert.increases(fn, obj, 'val');\n   *\n   * @name increases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.increases, true)\n      .to.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.increasesBy(fn, obj, 'val', 10);\n   *\n   * @name increasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesBy, true)\n      .to.increase(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotIncrease(function, object, property, [message])\n   *\n   * Asserts that a function does not increase a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 8 };\n   *     assert.doesNotIncrease(fn, obj, 'val');\n   *\n   * @name doesNotIncrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotIncrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotIncrease, true)\n      .to.not.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.increasesButNotBy(fn, obj, 'val', 10);\n   *\n   * @name increasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesButNotBy, true)\n      .to.increase(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .decreases(function, object, property, [message])\n   *\n   * Asserts that a function decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreases(fn, obj, 'val');\n   *\n   * @name decreases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.decreases, true)\n      .to.decrease(obj, prop);\n  }\n\n  /**\n   * ### .decreasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val -= 5 };\n   *     assert.decreasesBy(fn, obj, 'val', 5);\n   *\n   * @name decreasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesBy, true)\n      .to.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotDecrease(function, object, property, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.doesNotDecrease(fn, obj, 'val');\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecrease, true)\n      .to.not.decrease(obj, prop);\n  }\n\n  /**\n   * ### .doesNotDecreaseBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);\n   *\n   * @name doesNotDecreaseBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecreaseBy, true)\n      .to.not.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .decreasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreasesButNotBy(fn, obj, 'val', 1);\n   *\n   * @name decreasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesButNotBy, true)\n      .to.decrease(obj, prop).but.not.by(delta);\n  }\n\n  /*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ifError = function (val) {\n    if (val) {\n      throw(val);\n    }\n  };\n\n  /**\n   * ### .isExtensible(object)\n   *\n   * Asserts that `object` is extensible (can have new properties added to it).\n   *\n   *     assert.isExtensible({});\n   *\n   * @name isExtensible\n   * @alias extensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;\n  };\n\n  /**\n   * ### .isNotExtensible(object)\n   *\n   * Asserts that `object` is _not_ extensible.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     assert.isNotExtensible(nonExtensibleObject);\n   *     assert.isNotExtensible(sealedObject);\n   *     assert.isNotExtensible(frozenObject);\n   *\n   * @name isNotExtensible\n   * @alias notExtensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;\n  };\n\n  /**\n   * ### .isSealed(object)\n   *\n   * Asserts that `object` is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.seal({});\n   *\n   *     assert.isSealed(sealedObject);\n   *     assert.isSealed(frozenObject);\n   *\n   * @name isSealed\n   * @alias sealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;\n  };\n\n  /**\n   * ### .isNotSealed(object)\n   *\n   * Asserts that `object` is _not_ sealed.\n   *\n   *     assert.isNotSealed({});\n   *\n   * @name isNotSealed\n   * @alias notSealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;\n  };\n\n  /**\n   * ### .isFrozen(object)\n   *\n   * Asserts that `object` is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *     assert.frozen(frozenObject);\n   *\n   * @name isFrozen\n   * @alias frozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;\n  };\n\n  /**\n   * ### .isNotFrozen(object)\n   *\n   * Asserts that `object` is _not_ frozen.\n   *\n   *     assert.isNotFrozen({});\n   *\n   * @name isNotFrozen\n   * @alias notFrozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;\n  };\n\n  /**\n   * ### .isEmpty(target)\n   *\n   * Asserts that the target does not contain any values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isEmpty([]);\n   *     assert.isEmpty('');\n   *     assert.isEmpty(new Map);\n   *     assert.isEmpty({});\n   *\n   * @name isEmpty\n   * @alias empty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isEmpty, true).to.be.empty;\n  };\n\n  /**\n   * ### .isNotEmpty(target)\n   *\n   * Asserts that the target contains values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isNotEmpty([1, 2]);\n   *     assert.isNotEmpty('34');\n   *     assert.isNotEmpty(new Set([5, 6]));\n   *     assert.isNotEmpty({ key: 7 });\n   *\n   * @name isNotEmpty\n   * @alias notEmpty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;\n  };\n\n  /*!\n   * Aliases.\n   */\n\n  (function alias(name, as){\n    assert[as] = assert[name];\n    return alias;\n  })\n  ('isOk', 'ok')\n  ('isNotOk', 'notOk')\n  ('throws', 'throw')\n  ('throws', 'Throw')\n  ('isExtensible', 'extensible')\n  ('isNotExtensible', 'notExtensible')\n  ('isSealed', 'sealed')\n  ('isNotSealed', 'notSealed')\n  ('isFrozen', 'frozen')\n  ('isNotFrozen', 'notFrozen')\n  ('isEmpty', 'empty')\n  ('isNotEmpty', 'notEmpty');\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   *     expect.fail();\n   *     expect.fail(\"custom error message\");\n   *     expect.fail(1, 2);\n   *     expect.fail(1, 2, \"custom error message\");\n   *     expect.fail(1, 2, \"custom error message\", \">\");\n   *     expect.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace BDD\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String\n          || this instanceof Number\n          || this instanceof Boolean\n          || typeof Symbol === 'function' && this instanceof Symbol\n          || typeof BigInt === 'function' && this instanceof BigInt) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail([message])\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     *     should.fail();\n     *     should.fail(\"custom error message\");\n     *     should.fail(1, 2);\n     *     should.fail(1, 2, \"custom error message\");\n     *     should.fail(1, 2, \"custom error message\", \">\");\n     *     should.fail(1, 2, undefined, \">\");\n     *\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace BDD\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      if (arguments.length < 2) {\n          message = actual;\n          actual = undefined;\n      }\n\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n","/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/*!\n * Module variables\n */\n\n// Check whether `Object.setPrototypeOf` is supported\nvar canSetPrototype = typeof Object.setPrototypeOf === 'function';\n\n// Without `Object.setPrototypeOf` support, this module will need to add properties to a function.\n// However, some of functions' own props are not configurable and should be skipped.\nvar testFn = function() {};\nvar excludeNames = Object.getOwnPropertyNames(testFn).filter(function(name) {\n  var propDesc = Object.getOwnPropertyDescriptor(testFn, name);\n\n  // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,\n  // but then returns `undefined` as the property descriptor for `callee`. As a\n  // workaround, we perform an otherwise unnecessary type-check for `propDesc`,\n  // and then filter it out if it's not an object as it should be.\n  if (typeof propDesc !== 'object')\n    return true;\n\n  return !propDesc.configurable;\n});\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### .addChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function chainableMethodGetter() {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var chainableMethodWrapper = function () {\n          // Setting the `ssfi` flag to `chainableMethodWrapper` causes this\n          // function to be the starting point for removing implementation\n          // frames from the stack trace of a failed assertion.\n          //\n          // However, we only want to use this function as the starting point if\n          // the `lockSsfi` flag isn't set.\n          //\n          // If the `lockSsfi` flag is set, then this assertion is being\n          // invoked from inside of another assertion. In this case, the `ssfi`\n          // flag has already been set by the outer assertion.\n          //\n          // Note that overwriting a chainable method merely replaces the saved\n          // methods in `ctx.__methods` instead of completely replacing the\n          // overwritten assertion. Therefore, an overwriting assertion won't\n          // set the `ssfi` or `lockSsfi` flags.\n          if (!flag(this, 'lockSsfi')) {\n            flag(this, 'ssfi', chainableMethodWrapper);\n          }\n\n          var result = chainableBehavior.method.apply(this, arguments);\n          if (result !== undefined) {\n            return result;\n          }\n\n          var newAssertion = new chai.Assertion();\n          transferFlags(this, newAssertion);\n          return newAssertion;\n        };\n\n        addLengthGuard(chainableMethodWrapper, name, true);\n\n        // Use `Object.setPrototypeOf` if available\n        if (canSetPrototype) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n          Object.setPrototypeOf(chainableMethodWrapper, prototype);\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (excludeNames.indexOf(asserterName) !== -1) {\n              return;\n            }\n\n            var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n            Object.defineProperty(chainableMethodWrapper, asserterName, pd);\n          });\n        }\n\n        transferFlags(this, chainableMethodWrapper);\n        return proxify(chainableMethodWrapper);\n      }\n    , configurable: true\n  });\n};\n","var fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');\n\n/*!\n * Chai - addLengthGuard utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .addLengthGuard(fn, assertionName, isChainable)\n *\n * Define `length` as a getter on the given uninvoked method assertion. The\n * getter acts as a guard against chaining `length` directly off of an uninvoked\n * method assertion, which is a problem because it references `function`'s\n * built-in `length` property instead of Chai's `length` assertion. When the\n * getter catches the user making this mistake, it throws an error with a\n * helpful message.\n *\n * There are two ways in which this mistake can be made. The first way is by\n * chaining the `length` assertion directly off of an uninvoked chainable\n * method. In this case, Chai suggests that the user use `lengthOf` instead. The\n * second way is by chaining the `length` assertion directly off of an uninvoked\n * non-chainable method. Non-chainable methods must be invoked prior to\n * chaining. In this case, Chai suggests that the user consult the docs for the\n * given assertion.\n *\n * If the `length` property of functions is unconfigurable, then return `fn`\n * without modification.\n *\n * Note that in ES6, the function's `length` property is configurable, so once\n * support for legacy environments is dropped, Chai's `length` property can\n * replace the built-in function's `length` property, and this length guard will\n * no longer be necessary. In the mean time, maintaining consistency across all\n * environments is the priority.\n *\n * @param {Function} fn\n * @param {String} assertionName\n * @param {Boolean} isChainable\n * @namespace Utils\n * @name addLengthGuard\n */\n\nmodule.exports = function addLengthGuard (fn, assertionName, isChainable) {\n  if (!fnLengthDesc.configurable) return fn;\n\n  Object.defineProperty(fn, 'length', {\n    get: function () {\n      if (isChainable) {\n        throw Error('Invalid Chai property: ' + assertionName + '.length. Due' +\n          ' to a compatibility issue, \"length\" cannot directly follow \"' +\n          assertionName + '\". Use \"' + assertionName + '.lengthOf\" instead.');\n      }\n\n      throw Error('Invalid Chai property: ' + assertionName + '.length. See' +\n        ' docs for proper usage of \"' + assertionName + '\".');\n    }\n  });\n\n  return fn;\n};\n","/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addMethod(ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @api public\n */\n\nmodule.exports = function addMethod(ctx, name, method) {\n  var methodWrapper = function () {\n    // Setting the `ssfi` flag to `methodWrapper` causes this function to be the\n    // starting point for removing implementation frames from the stack trace of\n    // a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', methodWrapper);\n    }\n\n    var result = method.apply(this, arguments);\n    if (result !== undefined)\n      return result;\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  addLengthGuard(methodWrapper, name, false);\n  ctx[name] = proxify(methodWrapper, name);\n};\n","/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addProperty(ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\nmodule.exports = function addProperty(ctx, name, getter) {\n  getter = getter === undefined ? function () {} : getter;\n\n  Object.defineProperty(ctx, name,\n    { get: function propertyGetter() {\n        // Setting the `ssfi` flag to `propertyGetter` causes this function to\n        // be the starting point for removing implementation frames from the\n        // stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', propertyGetter);\n        }\n\n        var result = getter.call(this);\n        if (result !== undefined)\n          return result;\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n","/*!\n * Chai - compareByInspect utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\n\n/**\n * ### .compareByInspect(mixed, mixed)\n *\n * To be used as a compareFunction with Array.prototype.sort. Compares elements\n * using inspect instead of default behavior of using toString so that Symbols\n * and objects with irregular/missing toString can still be sorted without a\n * TypeError.\n *\n * @param {Mixed} first element to compare\n * @param {Mixed} second element to compare\n * @returns {Number} -1 if 'a' should come before 'b'; otherwise 1\n * @name compareByInspect\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function compareByInspect(a, b) {\n  return inspect(a) < inspect(b) ? -1 : 1;\n};\n","/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {Mixed} obj constructed Assertion\n * @param {Array} type A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @api public\n */\n\nvar AssertionError = require('assertion-error');\nvar flag = require('./flag');\nvar type = require('type-detect');\n\nmodule.exports = function expectTypes(obj, types) {\n  var flagMsg = flag(obj, 'message');\n  var ssfi = flag(obj, 'ssfi');\n\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n  obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  var objType = type(obj).toLowerCase();\n\n  if (!types.some(function (expected) { return objType === expected; })) {\n    throw new AssertionError(\n      flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given',\n      undefined,\n      ssfi\n    );\n  }\n};\n","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @namespace Utils\n * @name flag\n * @api private\n */\n\nmodule.exports = function flag(obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n","/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getActual\n */\n\nmodule.exports = function getActual(obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n","/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag')\n  , getActual = require('./getActual')\n  , objDisplay = require('./objDisplay');\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function getMessage(obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n","var type = require('type-detect');\n\nvar flag = require('./flag');\n\nfunction isObjectType(obj) {\n  var objectType = type(obj);\n  var objectTypes = ['Array', 'Object', 'function'];\n\n  return objectTypes.indexOf(objectType) !== -1;\n}\n\n/**\n * ### .getOperator(message)\n *\n * Extract the operator from error message.\n * Operator defined is based on below link\n * https://nodejs.org/api/assert.html#assert_assert.\n *\n * Returns the `operator` or `undefined` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getOperator\n * @api public\n */\n\nmodule.exports = function getOperator(obj, args) {\n  var operator = flag(obj, 'operator');\n  var negate = flag(obj, 'negate');\n  var expected = args[3];\n  var msg = negate ? args[2] : args[1];\n\n  if (operator) {\n    return operator;\n  }\n\n  if (typeof msg === 'function') msg = msg();\n\n  msg = msg || '';\n  if (!msg) {\n    return undefined;\n  }\n\n  if (/\\shave\\s/.test(msg)) {\n    return undefined;\n  }\n\n  var isObject = isObjectType(expected);\n  if (/\\snot\\s/.test(msg)) {\n    return isObject ? 'notDeepStrictEqual' : 'notStrictEqual';\n  }\n\n  return isObject ? 'deepStrictEqual' : 'strictEqual';\n};\n","/*!\n * Chai - getOwnEnumerableProperties utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/**\n * ### .getOwnEnumerableProperties(object)\n *\n * This allows the retrieval of directly-owned enumerable property names and\n * symbols of an object. This function is necessary because Object.keys only\n * returns enumerable property names, not enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getOwnEnumerableProperties(obj) {\n  return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));\n};\n","/*!\n * Chai - getOwnEnumerablePropertySymbols utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getOwnEnumerablePropertySymbols(object)\n *\n * This allows the retrieval of directly-owned enumerable property symbols of an\n * object. This function is necessary because Object.getOwnPropertySymbols\n * returns both enumerable and non-enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerablePropertySymbols\n * @api public\n */\n\nmodule.exports = function getOwnEnumerablePropertySymbols(obj) {\n  if (typeof Object.getOwnPropertySymbols !== 'function') return [];\n\n  return Object.getOwnPropertySymbols(obj).filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(obj, sym).enumerable;\n  });\n};\n","/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @api public\n */\n\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n","/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Dependencies that are used for multiple exports are required here only once\n */\n\nvar pathval = require('pathval');\n\n/*!\n * test utility\n */\n\nexports.test = require('./test');\n\n/*!\n * type utility\n */\n\nexports.type = require('type-detect');\n\n/*!\n * expectTypes utility\n */\nexports.expectTypes = require('./expectTypes');\n\n/*!\n * message utility\n */\n\nexports.getMessage = require('./getMessage');\n\n/*!\n * actual utility\n */\n\nexports.getActual = require('./getActual');\n\n/*!\n * Inspect util\n */\n\nexports.inspect = require('./inspect');\n\n/*!\n * Object Display util\n */\n\nexports.objDisplay = require('./objDisplay');\n\n/*!\n * Flag utility\n */\n\nexports.flag = require('./flag');\n\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = require('./transferFlags');\n\n/*!\n * Deep equal utility\n */\n\nexports.eql = require('deep-eql');\n\n/*!\n * Deep path info\n */\n\nexports.getPathInfo = pathval.getPathInfo;\n\n/*!\n * Check if a property exists\n */\n\nexports.hasProperty = pathval.hasProperty;\n\n/*!\n * Function name\n */\n\nexports.getName = require('get-func-name');\n\n/*!\n * add Property\n */\n\nexports.addProperty = require('./addProperty');\n\n/*!\n * add Method\n */\n\nexports.addMethod = require('./addMethod');\n\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = require('./overwriteProperty');\n\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = require('./overwriteMethod');\n\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = require('./addChainableMethod');\n\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = require('./overwriteChainableMethod');\n\n/*!\n * Compare by inspect method\n */\n\nexports.compareByInspect = require('./compareByInspect');\n\n/*!\n * Get own enumerable property symbols method\n */\n\nexports.getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/*!\n * Get own enumerable properties method\n */\n\nexports.getOwnEnumerableProperties = require('./getOwnEnumerableProperties');\n\n/*!\n * Checks error against a given set of criteria\n */\n\nexports.checkError = require('check-error');\n\n/*!\n * Proxify util\n */\n\nexports.proxify = require('./proxify');\n\n/*!\n * addLengthGuard util\n */\n\nexports.addLengthGuard = require('./addLengthGuard');\n\n/*!\n * isProxyEnabled helper\n */\n\nexports.isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * isNaN method\n */\n\nexports.isNaN = require('./isNaN');\n\n/*!\n * getOperator method\n */\n\nexports.getOperator = require('./getOperator');","// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = require('get-func-name');\nvar loupe = require('loupe');\nvar config = require('../config');\n\nmodule.exports = inspect;\n\n/**\n * ### .inspect(obj, [showHidden], [depth], [colors])\n *\n * Echoes the value of a value. Tries to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects. Default is false.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @namespace Utils\n * @name inspect\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var options = {\n    colors: colors,\n    depth: (typeof depth === 'undefined' ? 2 : depth),\n    showHidden: showHidden,\n    truncate: config.truncateThreshold ? config.truncateThreshold : Infinity,\n  };\n  return loupe.inspect(obj, options);\n}\n","/*!\n * Chai - isNaN utility\n * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>\n * MIT Licensed\n */\n\n/**\n * ### .isNaN(value)\n *\n * Checks if the given value is NaN or not.\n *\n *     utils.isNaN(NaN); // true\n *\n * @param {Value} The value which has to be checked if it is NaN\n * @name isNaN\n * @api private\n */\n\nfunction isNaN(value) {\n  // Refer http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number\n  // section's NOTE.\n  return value !== value;\n}\n\n// If ECMAScript 6's Number.isNaN is present, prefer that.\nmodule.exports = Number.isNaN || isNaN;\n","var config = require('../config');\n\n/*!\n * Chai - isProxyEnabled helper\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .isProxyEnabled()\n *\n * Helper function to check if Chai's proxy protection feature is enabled. If\n * proxies are unsupported or disabled via the user's Chai config, then return\n * false. Otherwise, return true.\n *\n * @namespace Utils\n * @name isProxyEnabled\n */\n\nmodule.exports = function isProxyEnabled() {\n  return config.useProxy &&\n    typeof Proxy !== 'undefined' &&\n    typeof Reflect !== 'undefined';\n};\n","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\nvar config = require('../config');\n\n/**\n * ### .objDisplay(object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @returns {string} stringified object\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function objDisplay(obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n","/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Overwrites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.lengthOf(3);\n *     expect(myFoo).to.have.lengthOf.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function overwritingChainableMethodWrapper() {\n    var result = method(_method).apply(this, arguments);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n};\n","/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteMethod(ctx, name, fn)\n *\n * Overwrites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function overwriteMethod(ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () {\n      throw new Error(name + ' is not a function');\n    };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  var overwritingMethodWrapper = function () {\n    // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this\n    // function to be the starting point for removing implementation frames from\n    // the stack trace of a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', overwritingMethodWrapper);\n    }\n\n    // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion\n    // from changing the `ssfi` flag. By this point, the `ssfi` flag is already\n    // set to the correct starting point for this assertion.\n    var origLockSsfi = flag(this, 'lockSsfi');\n    flag(this, 'lockSsfi', true);\n    var result = method(_super).apply(this, arguments);\n    flag(this, 'lockSsfi', origLockSsfi);\n\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  }\n\n  addLengthGuard(overwritingMethodWrapper, name, false);\n  ctx[name] = proxify(overwritingMethodWrapper, name);\n};\n","/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteProperty(ctx, name, fn)\n *\n * Overwrites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function overwriteProperty(ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function overwritingPropertyGetter() {\n        // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this\n        // function to be the starting point for removing implementation frames\n        // from the stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', overwritingPropertyGetter);\n        }\n\n        // Setting the `lockSsfi` flag to `true` prevents the overwritten\n        // assertion from changing the `ssfi` flag. By this point, the `ssfi`\n        // flag is already set to the correct starting point for this assertion.\n        var origLockSsfi = flag(this, 'lockSsfi');\n        flag(this, 'lockSsfi', true);\n        var result = getter(_super).call(this);\n        flag(this, 'lockSsfi', origLockSsfi);\n\n        if (result !== undefined) {\n          return result;\n        }\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n","var config = require('../config');\nvar flag = require('./flag');\nvar getProperties = require('./getProperties');\nvar isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * Chai - proxify utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .proxify(object)\n *\n * Return a proxy of given object that throws an error when a non-existent\n * property is read. By default, the root cause is assumed to be a misspelled\n * property, and thus an attempt is made to offer a reasonable suggestion from\n * the list of existing properties. However, if a nonChainableMethodName is\n * provided, then the root cause is instead a failure to invoke a non-chainable\n * method prior to reading the non-existent property.\n *\n * If proxies are unsupported or disabled via the user's Chai config, then\n * return object without modification.\n *\n * @param {Object} obj\n * @param {String} nonChainableMethodName\n * @namespace Utils\n * @name proxify\n */\n\nvar builtins = ['__flags', '__methods', '_obj', 'assert'];\n\nmodule.exports = function proxify(obj, nonChainableMethodName) {\n  if (!isProxyEnabled()) return obj;\n\n  return new Proxy(obj, {\n    get: function proxyGetter(target, property) {\n      // This check is here because we should not throw errors on Symbol properties\n      // such as `Symbol.toStringTag`.\n      // The values for which an error should be thrown can be configured using\n      // the `config.proxyExcludedKeys` setting.\n      if (typeof property === 'string' &&\n          config.proxyExcludedKeys.indexOf(property) === -1 &&\n          !Reflect.has(target, property)) {\n        // Special message for invalid property access of non-chainable methods.\n        if (nonChainableMethodName) {\n          throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' +\n            property + '. See docs for proper usage of \"' +\n            nonChainableMethodName + '\".');\n        }\n\n        // If the property is reasonably close to an existing Chai property,\n        // suggest that property to the user. Only suggest properties with a\n        // distance less than 4.\n        var suggestion = null;\n        var suggestionDistance = 4;\n        getProperties(target).forEach(function(prop) {\n          if (\n            !Object.prototype.hasOwnProperty(prop) &&\n            builtins.indexOf(prop) === -1\n          ) {\n            var dist = stringDistanceCapped(\n              property,\n              prop,\n              suggestionDistance\n            );\n            if (dist < suggestionDistance) {\n              suggestion = prop;\n              suggestionDistance = dist;\n            }\n          }\n        });\n\n        if (suggestion !== null) {\n          throw Error('Invalid Chai property: ' + property +\n            '. Did you mean \"' + suggestion + '\"?');\n        } else {\n          throw Error('Invalid Chai property: ' + property);\n        }\n      }\n\n      // Use this proxy getter as the starting point for removing implementation\n      // frames from the stack trace of a failed assertion. For property\n      // assertions, this prevents the proxy getter from showing up in the stack\n      // trace since it's invoked before the property getter. For method and\n      // chainable method assertions, this flag will end up getting changed to\n      // the method wrapper, which is good since this frame will no longer be in\n      // the stack once the method is invoked. Note that Chai builtin assertion\n      // properties such as `__flags` are skipped since this is only meant to\n      // capture the starting point of an assertion. This step is also skipped\n      // if the `lockSsfi` flag is set, thus indicating that this assertion is\n      // being called from within another assertion. In that case, the `ssfi`\n      // flag is already set to the outer assertion's starting point.\n      if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {\n        flag(target, 'ssfi', proxyGetter);\n      }\n\n      return Reflect.get(target, property);\n    }\n  });\n};\n\n/**\n * # stringDistanceCapped(strA, strB, cap)\n * Return the Levenshtein distance between two strings, but no more than cap.\n * @param {string} strA\n * @param {string} strB\n * @param {number} number\n * @return {number} min(string distance between strA and strB, cap)\n * @api private\n */\n\nfunction stringDistanceCapped(strA, strB, cap) {\n  if (Math.abs(strA.length - strB.length) >= cap) {\n    return cap;\n  }\n\n  var memo = [];\n  // `memo` is a two-dimensional array containing distances.\n  // memo[i][j] is the distance between strA.slice(0, i) and\n  // strB.slice(0, j).\n  for (var i = 0; i <= strA.length; i++) {\n    memo[i] = Array(strB.length + 1).fill(0);\n    memo[i][0] = i;\n  }\n  for (var j = 0; j < strB.length; j++) {\n    memo[0][j] = j;\n  }\n\n  for (var i = 1; i <= strA.length; i++) {\n    var ch = strA.charCodeAt(i - 1);\n    for (var j = 1; j <= strB.length; j++) {\n      if (Math.abs(i - j) >= cap) {\n        memo[i][j] = cap;\n        continue;\n      }\n      memo[i][j] = Math.min(\n        memo[i - 1][j] + 1,\n        memo[i][j - 1] + 1,\n        memo[i - 1][j - 1] +\n          (ch === strB.charCodeAt(j - 1) ? 0 : 1)\n      );\n    }\n  }\n\n  return memo[strA.length][strB.length];\n}\n","/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag');\n\n/**\n * ### .test(object, expression)\n *\n * Test an object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\nmodule.exports = function test(obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n","/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, `lockSsfi`,\n * and `message`) will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAssertion = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function transferFlags(assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n","'use strict';\n\n/* !\n * Chai - checkError utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar getFunctionName = require('get-func-name');\n/**\n * ### .checkError\n *\n * Checks that an error conforms to a given set of criteria and/or retrieves information about it.\n *\n * @api public\n */\n\n/**\n * ### .compatibleInstance(thrown, errorLike)\n *\n * Checks if two instances are compatible (strict equal).\n * Returns false if errorLike is not an instance of Error, because instances\n * can only be compatible if they're both error instances.\n *\n * @name compatibleInstance\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleInstance(thrown, errorLike) {\n  return errorLike instanceof Error && thrown === errorLike;\n}\n\n/**\n * ### .compatibleConstructor(thrown, errorLike)\n *\n * Checks if two constructors are compatible.\n * This function can receive either an error constructor or\n * an error instance as the `errorLike` argument.\n * Constructors are compatible if they're the same or if one is\n * an instance of another.\n *\n * @name compatibleConstructor\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleConstructor(thrown, errorLike) {\n  if (errorLike instanceof Error) {\n    // If `errorLike` is an instance of any error we compare their constructors\n    return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;\n  } else if (errorLike.prototype instanceof Error || errorLike === Error) {\n    // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly\n    return thrown.constructor === errorLike || thrown instanceof errorLike;\n  }\n\n  return false;\n}\n\n/**\n * ### .compatibleMessage(thrown, errMatcher)\n *\n * Checks if an error's message is compatible with a matcher (String or RegExp).\n * If the message contains the String or passes the RegExp test,\n * it is considered compatible.\n *\n * @name compatibleMessage\n * @param {Error} thrown error\n * @param {String|RegExp} errMatcher to look for into the message\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleMessage(thrown, errMatcher) {\n  var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;\n  if (errMatcher instanceof RegExp) {\n    return errMatcher.test(comparisonString);\n  } else if (typeof errMatcher === 'string') {\n    return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers\n  }\n\n  return false;\n}\n\n/**\n * ### .getConstructorName(errorLike)\n *\n * Gets the constructor name for an Error instance or constructor itself.\n *\n * @name getConstructorName\n * @param {Error|ErrorConstructor} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getConstructorName(errorLike) {\n  var constructorName = errorLike;\n  if (errorLike instanceof Error) {\n    constructorName = getFunctionName(errorLike.constructor);\n  } else if (typeof errorLike === 'function') {\n    // If `err` is not an instance of Error it is an error constructor itself or another function.\n    // If we've got a common function we get its name, otherwise we may need to create a new instance\n    // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.\n    constructorName = getFunctionName(errorLike);\n    if (constructorName === '') {\n      var newConstructorName = getFunctionName(new errorLike()); // eslint-disable-line new-cap\n      constructorName = newConstructorName || constructorName;\n    }\n  }\n\n  return constructorName;\n}\n\n/**\n * ### .getMessage(errorLike)\n *\n * Gets the error message from an error.\n * If `err` is a String itself, we return it.\n * If the error has no message, we return an empty string.\n *\n * @name getMessage\n * @param {Error|String} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getMessage(errorLike) {\n  var msg = '';\n  if (errorLike && errorLike.message) {\n    msg = errorLike.message;\n  } else if (typeof errorLike === 'string') {\n    msg = errorLike;\n  }\n\n  return msg;\n}\n\nmodule.exports = {\n  compatibleInstance: compatibleInstance,\n  compatibleConstructor: compatibleConstructor,\n  compatibleMessage: compatibleMessage,\n  getMessage: getMessage,\n  getConstructorName: getConstructorName,\n};\n","'use strict';\n/* globals Symbol: false, Uint8Array: false, WeakMap: false */\n/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar type = require('type-detect');\nfunction FakeMap() {\n  this._key = 'chai/deep-eql__' + Math.random() + Date.now();\n}\n\nFakeMap.prototype = {\n  get: function get(key) {\n    return key[this._key];\n  },\n  set: function set(key, value) {\n    if (Object.isExtensible(key)) {\n      Object.defineProperty(key, this._key, {\n        value: value,\n        configurable: true,\n      });\n    }\n  },\n};\n\nvar MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;\n/*!\n * Check to see if the MemoizeMap has recorded a result of the two operands\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @returns {Boolean|null} result\n*/\nfunction memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return null;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    var result = leftHandMap.get(rightHandOperand);\n    if (typeof result === 'boolean') {\n      return result;\n    }\n  }\n  return null;\n}\n\n/*!\n * Set the result of the equality into the MemoizeMap\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @param {Boolean} result\n*/\nfunction memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    leftHandMap.set(rightHandOperand, result);\n  } else {\n    leftHandMap = new MemoizeMap();\n    leftHandMap.set(rightHandOperand, result);\n    memoizeMap.set(leftHandOperand, leftHandMap);\n  }\n}\n\n/*!\n * Primary Export\n */\n\nmodule.exports = deepEqual;\nmodule.exports.MemoizeMap = MemoizeMap;\n\n/**\n * Assert deeply nested sameValue equality between two objects of any type.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n */\nfunction deepEqual(leftHandOperand, rightHandOperand, options) {\n  // If we have a comparator, we can't assume anything; so bail to its check first.\n  if (options && options.comparator) {\n    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n  }\n\n  var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n  if (simpleResult !== null) {\n    return simpleResult;\n  }\n\n  // Deeper comparisons are pushed through to a larger function\n  return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n}\n\n/**\n * Many comparisons can be canceled out early via simple equality or primitive checks.\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @return {Boolean|null} equal match\n */\nfunction simpleEqual(leftHandOperand, rightHandOperand) {\n  // Equal references (except for Numbers) can be returned early\n  if (leftHandOperand === rightHandOperand) {\n    // Handle +-0 cases\n    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;\n  }\n\n  // handle NaN cases\n  if (\n    leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare\n    rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare\n  ) {\n    return true;\n  }\n\n  // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,\n  // strings, and undefined, can be compared by reference.\n  if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    // Easy out b/c it would have passed the first equality check\n    return false;\n  }\n  return null;\n}\n\n/*!\n * The main logic of the `deepEqual` function.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n*/\nfunction extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {\n  options = options || {};\n  options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();\n  var comparator = options && options.comparator;\n\n  // Check if a memoized result exists.\n  var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);\n  if (memoizeResultLeft !== null) {\n    return memoizeResultLeft;\n  }\n  var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);\n  if (memoizeResultRight !== null) {\n    return memoizeResultRight;\n  }\n\n  // If a comparator is present, use it.\n  if (comparator) {\n    var comparatorResult = comparator(leftHandOperand, rightHandOperand);\n    // Comparators may return null, in which case we want to go back to default behavior.\n    if (comparatorResult === false || comparatorResult === true) {\n      memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);\n      return comparatorResult;\n    }\n    // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide\n    // what to do, we need to make sure to return the basic tests first before we move on.\n    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n    if (simpleResult !== null) {\n      // Don't memoize this, it takes longer to set/retrieve than to just compare.\n      return simpleResult;\n    }\n  }\n\n  var leftHandType = type(leftHandOperand);\n  if (leftHandType !== type(rightHandOperand)) {\n    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);\n    return false;\n  }\n\n  // Temporarily set the operands in the memoize object to prevent blowing the stack\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);\n\n  var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);\n  return result;\n}\n\nfunction extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {\n  switch (leftHandType) {\n    case 'String':\n    case 'Number':\n    case 'Boolean':\n    case 'Date':\n      // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values\n      return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());\n    case 'Promise':\n    case 'Symbol':\n    case 'function':\n    case 'WeakMap':\n    case 'WeakSet':\n      return leftHandOperand === rightHandOperand;\n    case 'Error':\n      return keysEqual(leftHandOperand, rightHandOperand, [ 'name', 'message', 'code' ], options);\n    case 'Arguments':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'Array':\n      return iterableEqual(leftHandOperand, rightHandOperand, options);\n    case 'RegExp':\n      return regexpEqual(leftHandOperand, rightHandOperand);\n    case 'Generator':\n      return generatorEqual(leftHandOperand, rightHandOperand, options);\n    case 'DataView':\n      return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);\n    case 'ArrayBuffer':\n      return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);\n    case 'Set':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    case 'Map':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    case 'Temporal.PlainDate':\n    case 'Temporal.PlainTime':\n    case 'Temporal.PlainDateTime':\n    case 'Temporal.Instant':\n    case 'Temporal.ZonedDateTime':\n    case 'Temporal.PlainYearMonth':\n    case 'Temporal.PlainMonthDay':\n      return leftHandOperand.equals(rightHandOperand);\n    case 'Temporal.Duration':\n      return leftHandOperand.total('nanoseconds') === rightHandOperand.total('nanoseconds');\n    case 'Temporal.TimeZone':\n    case 'Temporal.Calendar':\n      return leftHandOperand.toString() === rightHandOperand.toString();\n    default:\n      return objectEqual(leftHandOperand, rightHandOperand, options);\n  }\n}\n\n/*!\n * Compare two Regular Expressions for equality.\n *\n * @param {RegExp} leftHandOperand\n * @param {RegExp} rightHandOperand\n * @return {Boolean} result\n */\n\nfunction regexpEqual(leftHandOperand, rightHandOperand) {\n  return leftHandOperand.toString() === rightHandOperand.toString();\n}\n\n/*!\n * Compare two Sets/Maps for equality. Faster than other equality functions.\n *\n * @param {Set} leftHandOperand\n * @param {Set} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction entriesEqual(leftHandOperand, rightHandOperand, options) {\n  try {\n    // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach\n    if (leftHandOperand.size !== rightHandOperand.size) {\n      return false;\n    }\n    if (leftHandOperand.size === 0) {\n      return true;\n    }\n  } catch (sizeError) {\n    // things that aren't actual Maps or Sets will throw here\n    return false;\n  }\n  var leftHandItems = [];\n  var rightHandItems = [];\n  leftHandOperand.forEach(function gatherEntries(key, value) {\n    leftHandItems.push([ key, value ]);\n  });\n  rightHandOperand.forEach(function gatherEntries(key, value) {\n    rightHandItems.push([ key, value ]);\n  });\n  return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);\n}\n\n/*!\n * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction iterableEqual(leftHandOperand, rightHandOperand, options) {\n  var length = leftHandOperand.length;\n  if (length !== rightHandOperand.length) {\n    return false;\n  }\n  if (length === 0) {\n    return true;\n  }\n  var index = -1;\n  while (++index < length) {\n    if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Simple equality for generator objects such as those returned by generator functions.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction generatorEqual(leftHandOperand, rightHandOperand, options) {\n  return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);\n}\n\n/*!\n * Determine if the given object has an @@iterator function.\n *\n * @param {Object} target\n * @return {Boolean} `true` if the object has an @@iterator function.\n */\nfunction hasIteratorFunction(target) {\n  return typeof Symbol !== 'undefined' &&\n    typeof target === 'object' &&\n    typeof Symbol.iterator !== 'undefined' &&\n    typeof target[Symbol.iterator] === 'function';\n}\n\n/*!\n * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.\n * This will consume the iterator - which could have side effects depending on the @@iterator implementation.\n *\n * @param {Object} target\n * @returns {Array} an array of entries from the @@iterator function\n */\nfunction getIteratorEntries(target) {\n  if (hasIteratorFunction(target)) {\n    try {\n      return getGeneratorEntries(target[Symbol.iterator]());\n    } catch (iteratorError) {\n      return [];\n    }\n  }\n  return [];\n}\n\n/*!\n * Gets all entries from a Generator. This will consume the generator - which could have side effects.\n *\n * @param {Generator} target\n * @returns {Array} an array of entries from the Generator.\n */\nfunction getGeneratorEntries(generator) {\n  var generatorResult = generator.next();\n  var accumulator = [ generatorResult.value ];\n  while (generatorResult.done === false) {\n    generatorResult = generator.next();\n    accumulator.push(generatorResult.value);\n  }\n  return accumulator;\n}\n\n/*!\n * Gets all own and inherited enumerable keys from a target.\n *\n * @param {Object} target\n * @returns {Array} an array of own and inherited enumerable keys from the target.\n */\nfunction getEnumerableKeys(target) {\n  var keys = [];\n  for (var key in target) {\n    keys.push(key);\n  }\n  return keys;\n}\n\nfunction getEnumerableSymbols(target) {\n  var keys = [];\n  var allKeys = Object.getOwnPropertySymbols(target);\n  for (var i = 0; i < allKeys.length; i += 1) {\n    var key = allKeys[i];\n    if (Object.getOwnPropertyDescriptor(target, key).enumerable) {\n      keys.push(key);\n    }\n  }\n  return keys;\n}\n\n/*!\n * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of\n * each key. If any value of the given key is not equal, the function will return false (early).\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\nfunction keysEqual(leftHandOperand, rightHandOperand, keys, options) {\n  var length = keys.length;\n  if (length === 0) {\n    return true;\n  }\n  for (var i = 0; i < length; i += 1) {\n    if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`\n * for each enumerable key in the object.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\nfunction objectEqual(leftHandOperand, rightHandOperand, options) {\n  var leftHandKeys = getEnumerableKeys(leftHandOperand);\n  var rightHandKeys = getEnumerableKeys(rightHandOperand);\n  var leftHandSymbols = getEnumerableSymbols(leftHandOperand);\n  var rightHandSymbols = getEnumerableSymbols(rightHandOperand);\n  leftHandKeys = leftHandKeys.concat(leftHandSymbols);\n  rightHandKeys = rightHandKeys.concat(rightHandSymbols);\n\n  if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {\n    if (iterableEqual(mapSymbols(leftHandKeys).sort(), mapSymbols(rightHandKeys).sort()) === false) {\n      return false;\n    }\n    return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);\n  }\n\n  var leftHandEntries = getIteratorEntries(leftHandOperand);\n  var rightHandEntries = getIteratorEntries(rightHandOperand);\n  if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {\n    leftHandEntries.sort();\n    rightHandEntries.sort();\n    return iterableEqual(leftHandEntries, rightHandEntries, options);\n  }\n\n  if (leftHandKeys.length === 0 &&\n      leftHandEntries.length === 0 &&\n      rightHandKeys.length === 0 &&\n      rightHandEntries.length === 0) {\n    return true;\n  }\n\n  return false;\n}\n\n/*!\n * Returns true if the argument is a primitive.\n *\n * This intentionally returns true for all objects that can be compared by reference,\n * including functions and symbols.\n *\n * @param {Mixed} value\n * @return {Boolean} result\n */\nfunction isPrimitive(value) {\n  return value === null || typeof value !== 'object';\n}\n\nfunction mapSymbols(arr) {\n  return arr.map(function mapSymbol(entry) {\n    if (typeof entry === 'symbol') {\n      return entry.toString();\n    }\n\n    return entry;\n  });\n}\n","'use strict';\n\n/* !\n * Chai - getFuncName utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getFuncName(constructorFn)\n *\n * Returns the name of a function.\n * When a non-function instance is passed, returns `null`.\n * This also includes a polyfill function if `aFunc.name` is not defined.\n *\n * @name getFuncName\n * @param {Function} funct\n * @namespace Utils\n * @api public\n */\n\nvar toString = Function.prototype.toString;\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;\nvar maxFunctionSourceLength = 512;\nfunction getFuncName(aFunc) {\n  if (typeof aFunc !== 'function') {\n    return null;\n  }\n\n  var name = '';\n  if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {\n    // eslint-disable-next-line prefer-reflect\n    var functionSource = toString.call(aFunc);\n    // To avoid unconstrained resource consumption due to pathalogically large function names,\n    // we limit the available return value to be less than 512 characters.\n    if (functionSource.indexOf('(') > maxFunctionSourceLength) {\n      return name;\n    }\n    // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined\n    var match = functionSource.match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    // If we've got a `name` property we just use it\n    name = aFunc.name;\n  }\n\n  return name;\n}\n\nmodule.exports = getFuncName;\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.loupe = {}));\n}(this, (function (exports) { 'use strict';\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n  }\n\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n\n  function _iterableToArrayLimit(arr, i) {\n    if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n\n  function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var ansiColors = {\n    bold: ['1', '22'],\n    dim: ['2', '22'],\n    italic: ['3', '23'],\n    underline: ['4', '24'],\n    // 5 & 6 are blinking\n    inverse: ['7', '27'],\n    hidden: ['8', '28'],\n    strike: ['9', '29'],\n    // 10-20 are fonts\n    // 21-29 are resets for 1-9\n    black: ['30', '39'],\n    red: ['31', '39'],\n    green: ['32', '39'],\n    yellow: ['33', '39'],\n    blue: ['34', '39'],\n    magenta: ['35', '39'],\n    cyan: ['36', '39'],\n    white: ['37', '39'],\n    brightblack: ['30;1', '39'],\n    brightred: ['31;1', '39'],\n    brightgreen: ['32;1', '39'],\n    brightyellow: ['33;1', '39'],\n    brightblue: ['34;1', '39'],\n    brightmagenta: ['35;1', '39'],\n    brightcyan: ['36;1', '39'],\n    brightwhite: ['37;1', '39'],\n    grey: ['90', '39']\n  };\n  var styles = {\n    special: 'cyan',\n    number: 'yellow',\n    bigint: 'yellow',\n    boolean: 'yellow',\n    undefined: 'grey',\n    null: 'bold',\n    string: 'green',\n    symbol: 'green',\n    date: 'magenta',\n    regexp: 'red'\n  };\n  var truncator = '…';\n\n  function colorise(value, styleType) {\n    var color = ansiColors[styles[styleType]] || ansiColors[styleType];\n\n    if (!color) {\n      return String(value);\n    }\n\n    return \"\\x1B[\".concat(color[0], \"m\").concat(String(value), \"\\x1B[\").concat(color[1], \"m\");\n  }\n\n  function normaliseOptions() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$showHidden = _ref.showHidden,\n        showHidden = _ref$showHidden === void 0 ? false : _ref$showHidden,\n        _ref$depth = _ref.depth,\n        depth = _ref$depth === void 0 ? 2 : _ref$depth,\n        _ref$colors = _ref.colors,\n        colors = _ref$colors === void 0 ? false : _ref$colors,\n        _ref$customInspect = _ref.customInspect,\n        customInspect = _ref$customInspect === void 0 ? true : _ref$customInspect,\n        _ref$showProxy = _ref.showProxy,\n        showProxy = _ref$showProxy === void 0 ? false : _ref$showProxy,\n        _ref$maxArrayLength = _ref.maxArrayLength,\n        maxArrayLength = _ref$maxArrayLength === void 0 ? Infinity : _ref$maxArrayLength,\n        _ref$breakLength = _ref.breakLength,\n        breakLength = _ref$breakLength === void 0 ? Infinity : _ref$breakLength,\n        _ref$seen = _ref.seen,\n        seen = _ref$seen === void 0 ? [] : _ref$seen,\n        _ref$truncate = _ref.truncate,\n        truncate = _ref$truncate === void 0 ? Infinity : _ref$truncate,\n        _ref$stylize = _ref.stylize,\n        stylize = _ref$stylize === void 0 ? String : _ref$stylize;\n\n    var options = {\n      showHidden: Boolean(showHidden),\n      depth: Number(depth),\n      colors: Boolean(colors),\n      customInspect: Boolean(customInspect),\n      showProxy: Boolean(showProxy),\n      maxArrayLength: Number(maxArrayLength),\n      breakLength: Number(breakLength),\n      truncate: Number(truncate),\n      seen: seen,\n      stylize: stylize\n    };\n\n    if (options.colors) {\n      options.stylize = colorise;\n    }\n\n    return options;\n  }\n  function truncate(string, length) {\n    var tail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : truncator;\n    string = String(string);\n    var tailLength = tail.length;\n    var stringLength = string.length;\n\n    if (tailLength > length && stringLength > tailLength) {\n      return tail;\n    }\n\n    if (stringLength > length && stringLength > tailLength) {\n      return \"\".concat(string.slice(0, length - tailLength)).concat(tail);\n    }\n\n    return string;\n  } // eslint-disable-next-line complexity\n\n  function inspectList(list, options, inspectItem) {\n    var separator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ', ';\n    inspectItem = inspectItem || options.inspect;\n    var size = list.length;\n    if (size === 0) return '';\n    var originalLength = options.truncate;\n    var output = '';\n    var peek = '';\n    var truncated = '';\n\n    for (var i = 0; i < size; i += 1) {\n      var last = i + 1 === list.length;\n      var secondToLast = i + 2 === list.length;\n      truncated = \"\".concat(truncator, \"(\").concat(list.length - i, \")\");\n      var value = list[i]; // If there is more than one remaining we need to account for a separator of `, `\n\n      options.truncate = originalLength - output.length - (last ? 0 : separator.length);\n      var string = peek || inspectItem(value, options) + (last ? '' : separator);\n      var nextLength = output.length + string.length;\n      var truncatedLength = nextLength + truncated.length; // If this is the last element, and adding it would\n      // take us over length, but adding the truncator wouldn't - then break now\n\n      if (last && nextLength > originalLength && output.length + truncated.length <= originalLength) {\n        break;\n      } // If this isn't the last or second to last element to scan,\n      // but the string is already over length then break here\n\n\n      if (!last && !secondToLast && truncatedLength > originalLength) {\n        break;\n      } // Peek at the next string to determine if we should\n      // break early before adding this item to the output\n\n\n      peek = last ? '' : inspectItem(list[i + 1], options) + (secondToLast ? '' : separator); // If we have one element left, but this element and\n      // the next takes over length, the break early\n\n      if (!last && secondToLast && truncatedLength > originalLength && nextLength + peek.length > originalLength) {\n        break;\n      }\n\n      output += string; // If the next element takes us to length -\n      // but there are more after that, then we should truncate now\n\n      if (!last && !secondToLast && nextLength + peek.length >= originalLength) {\n        truncated = \"\".concat(truncator, \"(\").concat(list.length - i - 1, \")\");\n        break;\n      }\n\n      truncated = '';\n    }\n\n    return \"\".concat(output).concat(truncated);\n  }\n\n  function quoteComplexKey(key) {\n    if (key.match(/^[a-zA-Z_][a-zA-Z_0-9]*$/)) {\n      return key;\n    }\n\n    return JSON.stringify(key).replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"').replace(/(^\"|\"$)/g, \"'\");\n  }\n\n  function inspectProperty(_ref2, options) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        value = _ref3[1];\n\n    options.truncate -= 2;\n\n    if (typeof key === 'string') {\n      key = quoteComplexKey(key);\n    } else if (typeof key !== 'number') {\n      key = \"[\".concat(options.inspect(key, options), \"]\");\n    }\n\n    options.truncate -= key.length;\n    value = options.inspect(value, options);\n    return \"\".concat(key, \": \").concat(value);\n  }\n\n  function inspectArray(array, options) {\n    // Object.keys will always output the Array indices first, so we can slice by\n    // `array.length` to get non-index properties\n    var nonIndexProperties = Object.keys(array).slice(array.length);\n    if (!array.length && !nonIndexProperties.length) return '[]';\n    options.truncate -= 4;\n    var listContents = inspectList(array, options);\n    options.truncate -= listContents.length;\n    var propertyContents = '';\n\n    if (nonIndexProperties.length) {\n      propertyContents = inspectList(nonIndexProperties.map(function (key) {\n        return [key, array[key]];\n      }), options, inspectProperty);\n    }\n\n    return \"[ \".concat(listContents).concat(propertyContents ? \", \".concat(propertyContents) : '', \" ]\");\n  }\n\n  /* !\n   * Chai - getFuncName utility\n   * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n   * MIT Licensed\n   */\n\n  /**\n   * ### .getFuncName(constructorFn)\n   *\n   * Returns the name of a function.\n   * When a non-function instance is passed, returns `null`.\n   * This also includes a polyfill function if `aFunc.name` is not defined.\n   *\n   * @name getFuncName\n   * @param {Function} funct\n   * @namespace Utils\n   * @api public\n   */\n\n  var toString = Function.prototype.toString;\n  var functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;\n  var maxFunctionSourceLength = 512;\n  function getFuncName(aFunc) {\n    if (typeof aFunc !== 'function') {\n      return null;\n    }\n\n    var name = '';\n    if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {\n      // eslint-disable-next-line prefer-reflect\n      var functionSource = toString.call(aFunc);\n      // To avoid unconstrained resource consumption due to pathalogically large function names,\n      // we limit the available return value to be less than 512 characters.\n      if (functionSource.indexOf('(') > maxFunctionSourceLength) {\n        return name;\n      }\n      // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined\n      var match = functionSource.match(functionNameMatch);\n      if (match) {\n        name = match[1];\n      }\n    } else {\n      // If we've got a `name` property we just use it\n      name = aFunc.name;\n    }\n\n    return name;\n  }\n\n  var getFuncName_1 = getFuncName;\n\n  var getArrayName = function getArrayName(array) {\n    // We need to special case Node.js' Buffers, which report to be Uint8Array\n    if (typeof Buffer === 'function' && array instanceof Buffer) {\n      return 'Buffer';\n    }\n\n    if (array[Symbol.toStringTag]) {\n      return array[Symbol.toStringTag];\n    }\n\n    return getFuncName_1(array.constructor);\n  };\n\n  function inspectTypedArray(array, options) {\n    var name = getArrayName(array);\n    options.truncate -= name.length + 4; // Object.keys will always output the Array indices first, so we can slice by\n    // `array.length` to get non-index properties\n\n    var nonIndexProperties = Object.keys(array).slice(array.length);\n    if (!array.length && !nonIndexProperties.length) return \"\".concat(name, \"[]\"); // As we know TypedArrays only contain Unsigned Integers, we can skip inspecting each one and simply\n    // stylise the toString() value of them\n\n    var output = '';\n\n    for (var i = 0; i < array.length; i++) {\n      var string = \"\".concat(options.stylize(truncate(array[i], options.truncate), 'number')).concat(i === array.length - 1 ? '' : ', ');\n      options.truncate -= string.length;\n\n      if (array[i] !== array.length && options.truncate <= 3) {\n        output += \"\".concat(truncator, \"(\").concat(array.length - array[i] + 1, \")\");\n        break;\n      }\n\n      output += string;\n    }\n\n    var propertyContents = '';\n\n    if (nonIndexProperties.length) {\n      propertyContents = inspectList(nonIndexProperties.map(function (key) {\n        return [key, array[key]];\n      }), options, inspectProperty);\n    }\n\n    return \"\".concat(name, \"[ \").concat(output).concat(propertyContents ? \", \".concat(propertyContents) : '', \" ]\");\n  }\n\n  function inspectDate(dateObject, options) {\n    var stringRepresentation = dateObject.toJSON();\n\n    if (stringRepresentation === null) {\n      return 'Invalid Date';\n    }\n\n    var split = stringRepresentation.split('T');\n    var date = split[0]; // If we need to - truncate the time portion, but never the date\n\n    return options.stylize(\"\".concat(date, \"T\").concat(truncate(split[1], options.truncate - date.length - 1)), 'date');\n  }\n\n  function inspectFunction(func, options) {\n    var name = getFuncName_1(func);\n\n    if (!name) {\n      return options.stylize('[Function]', 'special');\n    }\n\n    return options.stylize(\"[Function \".concat(truncate(name, options.truncate - 11), \"]\"), 'special');\n  }\n\n  function inspectMapEntry(_ref, options) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    options.truncate -= 4;\n    key = options.inspect(key, options);\n    options.truncate -= key.length;\n    value = options.inspect(value, options);\n    return \"\".concat(key, \" => \").concat(value);\n  } // IE11 doesn't support `map.entries()`\n\n\n  function mapToEntries(map) {\n    var entries = [];\n    map.forEach(function (value, key) {\n      entries.push([key, value]);\n    });\n    return entries;\n  }\n\n  function inspectMap(map, options) {\n    var size = map.size - 1;\n\n    if (size <= 0) {\n      return 'Map{}';\n    }\n\n    options.truncate -= 7;\n    return \"Map{ \".concat(inspectList(mapToEntries(map), options, inspectMapEntry), \" }\");\n  }\n\n  var isNaN = Number.isNaN || function (i) {\n    return i !== i;\n  }; // eslint-disable-line no-self-compare\n\n\n  function inspectNumber(number, options) {\n    if (isNaN(number)) {\n      return options.stylize('NaN', 'number');\n    }\n\n    if (number === Infinity) {\n      return options.stylize('Infinity', 'number');\n    }\n\n    if (number === -Infinity) {\n      return options.stylize('-Infinity', 'number');\n    }\n\n    if (number === 0) {\n      return options.stylize(1 / number === Infinity ? '+0' : '-0', 'number');\n    }\n\n    return options.stylize(truncate(number, options.truncate), 'number');\n  }\n\n  function inspectBigInt(number, options) {\n    var nums = truncate(number.toString(), options.truncate - 1);\n    if (nums !== truncator) nums += 'n';\n    return options.stylize(nums, 'bigint');\n  }\n\n  function inspectRegExp(value, options) {\n    var flags = value.toString().split('/')[2];\n    var sourceLength = options.truncate - (2 + flags.length);\n    var source = value.source;\n    return options.stylize(\"/\".concat(truncate(source, sourceLength), \"/\").concat(flags), 'regexp');\n  }\n\n  function arrayFromSet(set) {\n    var values = [];\n    set.forEach(function (value) {\n      values.push(value);\n    });\n    return values;\n  }\n\n  function inspectSet(set, options) {\n    if (set.size === 0) return 'Set{}';\n    options.truncate -= 7;\n    return \"Set{ \".concat(inspectList(arrayFromSet(set), options), \" }\");\n  }\n\n  var stringEscapeChars = new RegExp(\"['\\\\u0000-\\\\u001f\\\\u007f-\\\\u009f\\\\u00ad\\\\u0600-\\\\u0604\\\\u070f\\\\u17b4\\\\u17b5\" + \"\\\\u200c-\\\\u200f\\\\u2028-\\\\u202f\\\\u2060-\\\\u206f\\\\ufeff\\\\ufff0-\\\\uffff]\", 'g');\n  var escapeCharacters = {\n    '\\b': '\\\\b',\n    '\\t': '\\\\t',\n    '\\n': '\\\\n',\n    '\\f': '\\\\f',\n    '\\r': '\\\\r',\n    \"'\": \"\\\\'\",\n    '\\\\': '\\\\\\\\'\n  };\n  var hex = 16;\n  var unicodeLength = 4;\n\n  function escape(char) {\n    return escapeCharacters[char] || \"\\\\u\".concat(\"0000\".concat(char.charCodeAt(0).toString(hex)).slice(-unicodeLength));\n  }\n\n  function inspectString(string, options) {\n    if (stringEscapeChars.test(string)) {\n      string = string.replace(stringEscapeChars, escape);\n    }\n\n    return options.stylize(\"'\".concat(truncate(string, options.truncate - 2), \"'\"), 'string');\n  }\n\n  function inspectSymbol(value) {\n    if ('description' in Symbol.prototype) {\n      return value.description ? \"Symbol(\".concat(value.description, \")\") : 'Symbol()';\n    }\n\n    return value.toString();\n  }\n\n  var getPromiseValue = function getPromiseValue() {\n    return 'Promise{…}';\n  };\n\n  try {\n    var _process$binding = process.binding('util'),\n        getPromiseDetails = _process$binding.getPromiseDetails,\n        kPending = _process$binding.kPending,\n        kRejected = _process$binding.kRejected;\n\n    if (Array.isArray(getPromiseDetails(Promise.resolve()))) {\n      getPromiseValue = function getPromiseValue(value, options) {\n        var _getPromiseDetails = getPromiseDetails(value),\n            _getPromiseDetails2 = _slicedToArray(_getPromiseDetails, 2),\n            state = _getPromiseDetails2[0],\n            innerValue = _getPromiseDetails2[1];\n\n        if (state === kPending) {\n          return 'Promise{<pending>}';\n        }\n\n        return \"Promise\".concat(state === kRejected ? '!' : '', \"{\").concat(options.inspect(innerValue, options), \"}\");\n      };\n    }\n  } catch (notNode) {\n    /* ignore */\n  }\n\n  var inspectPromise = getPromiseValue;\n\n  function inspectObject(object, options) {\n    var properties = Object.getOwnPropertyNames(object);\n    var symbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(object) : [];\n\n    if (properties.length === 0 && symbols.length === 0) {\n      return '{}';\n    }\n\n    options.truncate -= 4;\n    options.seen = options.seen || [];\n\n    if (options.seen.indexOf(object) >= 0) {\n      return '[Circular]';\n    }\n\n    options.seen.push(object);\n    var propertyContents = inspectList(properties.map(function (key) {\n      return [key, object[key]];\n    }), options, inspectProperty);\n    var symbolContents = inspectList(symbols.map(function (key) {\n      return [key, object[key]];\n    }), options, inspectProperty);\n    options.seen.pop();\n    var sep = '';\n\n    if (propertyContents && symbolContents) {\n      sep = ', ';\n    }\n\n    return \"{ \".concat(propertyContents).concat(sep).concat(symbolContents, \" }\");\n  }\n\n  var toStringTag = typeof Symbol !== 'undefined' && Symbol.toStringTag ? Symbol.toStringTag : false;\n  function inspectClass(value, options) {\n    var name = '';\n\n    if (toStringTag && toStringTag in value) {\n      name = value[toStringTag];\n    }\n\n    name = name || getFuncName_1(value.constructor); // Babel transforms anonymous classes to the name `_class`\n\n    if (!name || name === '_class') {\n      name = '<Anonymous Class>';\n    }\n\n    options.truncate -= name.length;\n    return \"\".concat(name).concat(inspectObject(value, options));\n  }\n\n  function inspectArguments(args, options) {\n    if (args.length === 0) return 'Arguments[]';\n    options.truncate -= 13;\n    return \"Arguments[ \".concat(inspectList(args, options), \" ]\");\n  }\n\n  var errorKeys = ['stack', 'line', 'column', 'name', 'message', 'fileName', 'lineNumber', 'columnNumber', 'number', 'description'];\n  function inspectObject$1(error, options) {\n    var properties = Object.getOwnPropertyNames(error).filter(function (key) {\n      return errorKeys.indexOf(key) === -1;\n    });\n    var name = error.name;\n    options.truncate -= name.length;\n    var message = '';\n\n    if (typeof error.message === 'string') {\n      message = truncate(error.message, options.truncate);\n    } else {\n      properties.unshift('message');\n    }\n\n    message = message ? \": \".concat(message) : '';\n    options.truncate -= message.length + 5;\n    var propertyContents = inspectList(properties.map(function (key) {\n      return [key, error[key]];\n    }), options, inspectProperty);\n    return \"\".concat(name).concat(message).concat(propertyContents ? \" { \".concat(propertyContents, \" }\") : '');\n  }\n\n  function inspectAttribute(_ref, options) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    options.truncate -= 3;\n\n    if (!value) {\n      return \"\".concat(options.stylize(key, 'yellow'));\n    }\n\n    return \"\".concat(options.stylize(key, 'yellow'), \"=\").concat(options.stylize(\"\\\"\".concat(value, \"\\\"\"), 'string'));\n  }\n  function inspectHTMLCollection(collection, options) {\n    // eslint-disable-next-line no-use-before-define\n    return inspectList(collection, options, inspectHTML, '\\n');\n  }\n  function inspectHTML(element, options) {\n    var properties = element.getAttributeNames();\n    var name = element.tagName.toLowerCase();\n    var head = options.stylize(\"<\".concat(name), 'special');\n    var headClose = options.stylize(\">\", 'special');\n    var tail = options.stylize(\"</\".concat(name, \">\"), 'special');\n    options.truncate -= name.length * 2 + 5;\n    var propertyContents = '';\n\n    if (properties.length > 0) {\n      propertyContents += ' ';\n      propertyContents += inspectList(properties.map(function (key) {\n        return [key, element.getAttribute(key)];\n      }), options, inspectAttribute, ' ');\n    }\n\n    options.truncate -= propertyContents.length;\n    var truncate = options.truncate;\n    var children = inspectHTMLCollection(element.children, options);\n\n    if (children && children.length > truncate) {\n      children = \"\".concat(truncator, \"(\").concat(element.children.length, \")\");\n    }\n\n    return \"\".concat(head).concat(propertyContents).concat(headClose).concat(children).concat(tail);\n  }\n\n  var symbolsSupported = typeof Symbol === 'function' && typeof Symbol.for === 'function';\n  var chaiInspect = symbolsSupported ? Symbol.for('chai/inspect') : '@@chai/inspect';\n  var nodeInspect = false;\n\n  try {\n    // eslint-disable-next-line global-require\n    var nodeUtil = require('util');\n\n    nodeInspect = nodeUtil.inspect ? nodeUtil.inspect.custom : false;\n  } catch (noNodeInspect) {\n    nodeInspect = false;\n  }\n\n  function FakeMap() {\n    // eslint-disable-next-line prefer-template\n    this.key = 'chai/loupe__' + Math.random() + Date.now();\n  }\n\n  FakeMap.prototype = {\n    // eslint-disable-next-line object-shorthand\n    get: function get(key) {\n      return key[this.key];\n    },\n    // eslint-disable-next-line object-shorthand\n    has: function has(key) {\n      return this.key in key;\n    },\n    // eslint-disable-next-line object-shorthand\n    set: function set(key, value) {\n      if (Object.isExtensible(key)) {\n        Object.defineProperty(key, this.key, {\n          // eslint-disable-next-line object-shorthand\n          value: value,\n          configurable: true\n        });\n      }\n    }\n  };\n  var constructorMap = new (typeof WeakMap === 'function' ? WeakMap : FakeMap)();\n  var stringTagMap = {};\n  var baseTypesMap = {\n    undefined: function undefined$1(value, options) {\n      return options.stylize('undefined', 'undefined');\n    },\n    null: function _null(value, options) {\n      return options.stylize(null, 'null');\n    },\n    boolean: function boolean(value, options) {\n      return options.stylize(value, 'boolean');\n    },\n    Boolean: function Boolean(value, options) {\n      return options.stylize(value, 'boolean');\n    },\n    number: inspectNumber,\n    Number: inspectNumber,\n    bigint: inspectBigInt,\n    BigInt: inspectBigInt,\n    string: inspectString,\n    String: inspectString,\n    function: inspectFunction,\n    Function: inspectFunction,\n    symbol: inspectSymbol,\n    // A Symbol polyfill will return `Symbol` not `symbol` from typedetect\n    Symbol: inspectSymbol,\n    Array: inspectArray,\n    Date: inspectDate,\n    Map: inspectMap,\n    Set: inspectSet,\n    RegExp: inspectRegExp,\n    Promise: inspectPromise,\n    // WeakSet, WeakMap are totally opaque to us\n    WeakSet: function WeakSet(value, options) {\n      return options.stylize('WeakSet{…}', 'special');\n    },\n    WeakMap: function WeakMap(value, options) {\n      return options.stylize('WeakMap{…}', 'special');\n    },\n    Arguments: inspectArguments,\n    Int8Array: inspectTypedArray,\n    Uint8Array: inspectTypedArray,\n    Uint8ClampedArray: inspectTypedArray,\n    Int16Array: inspectTypedArray,\n    Uint16Array: inspectTypedArray,\n    Int32Array: inspectTypedArray,\n    Uint32Array: inspectTypedArray,\n    Float32Array: inspectTypedArray,\n    Float64Array: inspectTypedArray,\n    Generator: function Generator() {\n      return '';\n    },\n    DataView: function DataView() {\n      return '';\n    },\n    ArrayBuffer: function ArrayBuffer() {\n      return '';\n    },\n    Error: inspectObject$1,\n    HTMLCollection: inspectHTMLCollection,\n    NodeList: inspectHTMLCollection\n  }; // eslint-disable-next-line complexity\n\n  var inspectCustom = function inspectCustom(value, options, type) {\n    if (chaiInspect in value && typeof value[chaiInspect] === 'function') {\n      return value[chaiInspect](options);\n    }\n\n    if (nodeInspect && nodeInspect in value && typeof value[nodeInspect] === 'function') {\n      return value[nodeInspect](options.depth, options);\n    }\n\n    if ('inspect' in value && typeof value.inspect === 'function') {\n      return value.inspect(options.depth, options);\n    }\n\n    if ('constructor' in value && constructorMap.has(value.constructor)) {\n      return constructorMap.get(value.constructor)(value, options);\n    }\n\n    if (stringTagMap[type]) {\n      return stringTagMap[type](value, options);\n    }\n\n    return '';\n  };\n\n  var toString$1 = Object.prototype.toString; // eslint-disable-next-line complexity\n\n  function inspect(value, options) {\n    options = normaliseOptions(options);\n    options.inspect = inspect;\n    var _options = options,\n        customInspect = _options.customInspect;\n    var type = value === null ? 'null' : _typeof(value);\n\n    if (type === 'object') {\n      type = toString$1.call(value).slice(8, -1);\n    } // If it is a base value that we already support, then use Loupe's inspector\n\n\n    if (baseTypesMap[type]) {\n      return baseTypesMap[type](value, options);\n    } // If `options.customInspect` is set to true then try to use the custom inspector\n\n\n    if (customInspect && value) {\n      var output = inspectCustom(value, options, type);\n\n      if (output) {\n        if (typeof output === 'string') return output;\n        return inspect(output, options);\n      }\n    }\n\n    var proto = value ? Object.getPrototypeOf(value) : false; // If it's a plain Object then use Loupe's inspector\n\n    if (proto === Object.prototype || proto === null) {\n      return inspectObject(value, options);\n    } // Specifically account for HTMLElements\n    // eslint-disable-next-line no-undef\n\n\n    if (value && typeof HTMLElement === 'function' && value instanceof HTMLElement) {\n      return inspectHTML(value, options);\n    }\n\n    if ('constructor' in value) {\n      // If it is a class, inspect it like an object but add the constructor name\n      if (value.constructor !== Object) {\n        return inspectClass(value, options);\n      } // If it is an object with an anonymous prototype, display it as an object.\n\n\n      return inspectObject(value, options);\n    } // last chance to check if it's an object\n\n\n    if (value === Object(value)) {\n      return inspectObject(value, options);\n    } // We have run out of options! Just stringify the value\n\n\n    return options.stylize(String(value), type);\n  }\n  function registerConstructor(constructor, inspector) {\n    if (constructorMap.has(constructor)) {\n      return false;\n    }\n\n    constructorMap.set(constructor, inspector);\n    return true;\n  }\n  function registerStringTag(stringTag, inspector) {\n    if (stringTag in stringTagMap) {\n      return false;\n    }\n\n    stringTagMap[stringTag] = inspector;\n    return true;\n  }\n  var custom = chaiInspect;\n\n  exports.custom = custom;\n  exports.default = inspect;\n  exports.inspect = inspect;\n  exports.registerConstructor = registerConstructor;\n  exports.registerStringTag = registerStringTag;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","'use strict';\n\n/* !\n * Chai - pathval utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has own\n * or inherited from prototype chain named property.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with null/undefined values\n * and other primitives.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty(obj, 'str');  // true\n *     hasProperty(obj, 'constructor');  // true\n *     hasProperty(obj, 'bar');  // false\n *\n *     hasProperty(obj.str, 'length'); // true\n *     hasProperty(obj.str, 1);  // true\n *     hasProperty(obj.str, 5);  // false\n *\n *     hasProperty(obj.arr, 'length');  // true\n *     hasProperty(obj.arr, 2);  // true\n *     hasProperty(obj.arr, 3);  // false\n *\n * @param {Object} object\n * @param {String|Symbol} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name hasProperty\n * @api public\n */\n\nfunction hasProperty(obj, name) {\n  if (typeof obj === 'undefined' || obj === null) {\n    return false;\n  }\n\n  // The `in` operator does not work with primitives.\n  return name in Object(obj);\n}\n\n/* !\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `internalGetPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be infinitely deep and nested.\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath(path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[');\n  var parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function mapMatches(value) {\n    if (\n      value === 'constructor' ||\n      value === '__proto__' ||\n      value === 'prototype'\n    ) {\n      return {};\n    }\n    var regexp = /^\\[(\\d+)\\]$/;\n    var mArr = regexp.exec(value);\n    var parsed = null;\n    if (mArr) {\n      parsed = { i: parseFloat(mArr[1]) };\n    } else {\n      parsed = { p: value.replace(/\\\\([.[\\]])/g, '$1') };\n    }\n\n    return parsed;\n  });\n}\n\n/* !\n * ## internalGetPathValue(obj, parsed[, pathDepth])\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(obj, parsed);\n *\n * @param {Object} object to search against\n * @param {Object} parsed definition from `parsePath`.\n * @param {Number} depth (nesting level) of the property we want to retrieve\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction internalGetPathValue(obj, parsed, pathDepth) {\n  var temporaryValue = obj;\n  var res = null;\n  pathDepth = typeof pathDepth === 'undefined' ? parsed.length : pathDepth;\n\n  for (var i = 0; i < pathDepth; i++) {\n    var part = parsed[i];\n    if (temporaryValue) {\n      if (typeof part.p === 'undefined') {\n        temporaryValue = temporaryValue[part.i];\n      } else {\n        temporaryValue = temporaryValue[part.p];\n      }\n\n      if (i === pathDepth - 1) {\n        res = temporaryValue;\n      }\n    }\n  }\n\n  return res;\n}\n\n/* !\n * ## internalSetPathValue(obj, value, parsed)\n *\n * Companion function for `parsePath` that sets\n * the value located at a parsed address.\n *\n *  internalSetPathValue(obj, 'value', parsed);\n *\n * @param {Object} object to search and define on\n * @param {*} value to use upon set\n * @param {Object} parsed definition from `parsePath`\n * @api private\n */\n\nfunction internalSetPathValue(obj, val, parsed) {\n  var tempObj = obj;\n  var pathDepth = parsed.length;\n  var part = null;\n  // Here we iterate through every part of the path\n  for (var i = 0; i < pathDepth; i++) {\n    var propName = null;\n    var propVal = null;\n    part = parsed[i];\n\n    // If it's the last part of the path, we set the 'propName' value with the property name\n    if (i === pathDepth - 1) {\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Now we set the property with the name held by 'propName' on object with the desired val\n      tempObj[propName] = val;\n    } else if (typeof part.p !== 'undefined' && tempObj[part.p]) {\n      tempObj = tempObj[part.p];\n    } else if (typeof part.i !== 'undefined' && tempObj[part.i]) {\n      tempObj = tempObj[part.i];\n    } else {\n      // If the obj doesn't have the property we create one with that name to define it\n      var next = parsed[i + 1];\n      // Here we set the name of the property which will be defined\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Here we decide if this property will be an array or a new object\n      propVal = typeof next.p === 'undefined' ? [] : {};\n      tempObj[propName] = propVal;\n      tempObj = tempObj[propName];\n    }\n  }\n}\n\n/**\n * ### .getPathInfo(object, path)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nfunction getPathInfo(obj, path) {\n  var parsed = parsePath(path);\n  var last = parsed[parsed.length - 1];\n  var info = {\n    parent:\n      parsed.length > 1 ?\n        internalGetPathValue(obj, parsed, parsed.length - 1) :\n        obj,\n    name: last.p || last.i,\n    value: internalGetPathValue(obj, parsed),\n  };\n  info.exists = hasProperty(info.parent, info.name);\n\n  return info;\n}\n\n/**\n * ### .getPathValue(object, path)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue(obj, 'prop1.str'); // Hello\n *     getPathValue(obj, 'prop1.att[2]'); // b\n *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\n\nfunction getPathValue(obj, path) {\n  var info = getPathInfo(obj, path);\n  return info.value;\n}\n\n/**\n * ### .setPathValue(object, path, value)\n *\n * Define the value in an object at a given string path.\n *\n * ```js\n * var obj = {\n *     prop1: {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *   , prop2: {\n *         arr: [ { nested: 'Universe' } ]\n *       , str: 'Hello again!'\n *     }\n * };\n * ```\n *\n * The following would be acceptable.\n *\n * ```js\n * var properties = require('tea-properties');\n * properties.set(obj, 'prop1.str', 'Hello Universe!');\n * properties.set(obj, 'prop1.arr[2]', 'B');\n * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });\n * ```\n *\n * @param {Object} object\n * @param {String} path\n * @param {Mixed} value\n * @api private\n */\n\nfunction setPathValue(obj, path, val) {\n  var parsed = parsePath(path);\n  internalSetPathValue(obj, val, parsed);\n  return obj;\n}\n\nmodule.exports = {\n  hasProperty: hasProperty,\n  getPathInfo: getPathInfo,\n  getPathValue: getPathValue,\n  setPathValue: setPathValue,\n};\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.typeDetect = factory());\n}(this, (function () { 'use strict';\n\n/* !\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar promiseExists = typeof Promise === 'function';\n\n/* eslint-disable no-undef */\nvar globalObject = typeof self === 'object' ? self : global; // eslint-disable-line id-blacklist\n\nvar symbolExists = typeof Symbol !== 'undefined';\nvar mapExists = typeof Map !== 'undefined';\nvar setExists = typeof Set !== 'undefined';\nvar weakMapExists = typeof WeakMap !== 'undefined';\nvar weakSetExists = typeof WeakSet !== 'undefined';\nvar dataViewExists = typeof DataView !== 'undefined';\nvar symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';\nvar symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';\nvar setEntriesExists = setExists && typeof Set.prototype.entries === 'function';\nvar mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';\nvar setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());\nvar mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());\nvar arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';\nvar arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());\nvar stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';\nvar stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());\nvar toStringLeftSliceLength = 8;\nvar toStringRightSliceLength = -1;\n/**\n * ### typeOf (obj)\n *\n * Uses `Object.prototype.toString` to determine the type of an object,\n * normalising behaviour across engine versions & well optimised.\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\nfunction typeDetect(obj) {\n  /* ! Speed optimisation\n   * Pre:\n   *   string literal     x 3,039,035 ops/sec ±1.62% (78 runs sampled)\n   *   boolean literal    x 1,424,138 ops/sec ±4.54% (75 runs sampled)\n   *   number literal     x 1,653,153 ops/sec ±1.91% (82 runs sampled)\n   *   undefined          x 9,978,660 ops/sec ±1.92% (75 runs sampled)\n   *   function           x 2,556,769 ops/sec ±1.73% (77 runs sampled)\n   * Post:\n   *   string literal     x 38,564,796 ops/sec ±1.15% (79 runs sampled)\n   *   boolean literal    x 31,148,940 ops/sec ±1.10% (79 runs sampled)\n   *   number literal     x 32,679,330 ops/sec ±1.90% (78 runs sampled)\n   *   undefined          x 32,363,368 ops/sec ±1.07% (82 runs sampled)\n   *   function           x 31,296,870 ops/sec ±0.96% (83 runs sampled)\n   */\n  var typeofObj = typeof obj;\n  if (typeofObj !== 'object') {\n    return typeofObj;\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   null               x 28,645,765 ops/sec ±1.17% (82 runs sampled)\n   * Post:\n   *   null               x 36,428,962 ops/sec ±1.37% (84 runs sampled)\n   */\n  if (obj === null) {\n    return 'null';\n  }\n\n  /* ! Spec Conformance\n   * Test: `Object.prototype.toString.call(window)``\n   *  - Node === \"[object global]\"\n   *  - Chrome === \"[object global]\"\n   *  - Firefox === \"[object Window]\"\n   *  - PhantomJS === \"[object Window]\"\n   *  - Safari === \"[object Window]\"\n   *  - IE 11 === \"[object Window]\"\n   *  - IE Edge === \"[object Window]\"\n   * Test: `Object.prototype.toString.call(this)``\n   *  - Chrome Worker === \"[object global]\"\n   *  - Firefox Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - Safari Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - IE 11 Worker === \"[object WorkerGlobalScope]\"\n   *  - IE Edge Worker === \"[object WorkerGlobalScope]\"\n   */\n  if (obj === globalObject) {\n    return 'global';\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   array literal      x 2,888,352 ops/sec ±0.67% (82 runs sampled)\n   * Post:\n   *   array literal      x 22,479,650 ops/sec ±0.96% (81 runs sampled)\n   */\n  if (\n    Array.isArray(obj) &&\n    (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))\n  ) {\n    return 'Array';\n  }\n\n  // Not caching existence of `window` and related properties due to potential\n  // for `window` to be unset before tests in quasi-browser environments.\n  if (typeof window === 'object' && window !== null) {\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/multipage/browsers.html#location)\n     * WhatWG HTML$7.7.3 - The `Location` interface\n     * Test: `Object.prototype.toString.call(window.location)``\n     *  - IE <=11 === \"[object Object]\"\n     *  - IE Edge <=13 === \"[object Object]\"\n     */\n    if (typeof window.location === 'object' && obj === window.location) {\n      return 'Location';\n    }\n\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/#document)\n     * WhatWG HTML$3.1.1 - The `Document` object\n     * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n     *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)\n     *       which suggests that browsers should use HTMLTableCellElement for\n     *       both TD and TH elements. WhatWG separates these.\n     *       WhatWG HTML states:\n     *         > For historical reasons, Window objects must also have a\n     *         > writable, configurable, non-enumerable property named\n     *         > HTMLDocument whose value is the Document interface object.\n     * Test: `Object.prototype.toString.call(document)``\n     *  - Chrome === \"[object HTMLDocument]\"\n     *  - Firefox === \"[object HTMLDocument]\"\n     *  - Safari === \"[object HTMLDocument]\"\n     *  - IE <=10 === \"[object Document]\"\n     *  - IE 11 === \"[object HTMLDocument]\"\n     *  - IE Edge <=13 === \"[object HTMLDocument]\"\n     */\n    if (typeof window.document === 'object' && obj === window.document) {\n      return 'Document';\n    }\n\n    if (typeof window.navigator === 'object') {\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)\n       * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray\n       * Test: `Object.prototype.toString.call(navigator.mimeTypes)``\n       *  - IE <=10 === \"[object MSMimeTypesCollection]\"\n       */\n      if (typeof window.navigator.mimeTypes === 'object' &&\n          obj === window.navigator.mimeTypes) {\n        return 'MimeTypeArray';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n       * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray\n       * Test: `Object.prototype.toString.call(navigator.plugins)``\n       *  - IE <=10 === \"[object MSPluginsCollection]\"\n       */\n      if (typeof window.navigator.plugins === 'object' &&\n          obj === window.navigator.plugins) {\n        return 'PluginArray';\n      }\n    }\n\n    if ((typeof window.HTMLElement === 'function' ||\n        typeof window.HTMLElement === 'object') &&\n        obj instanceof window.HTMLElement) {\n      /* ! Spec Conformance\n      * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n      * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`\n      * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``\n      *  - IE <=10 === \"[object HTMLBlockElement]\"\n      */\n      if (obj.tagName === 'BLOCKQUOTE') {\n        return 'HTMLQuoteElement';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/#htmltabledatacellelement)\n       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`\n       * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n       *       which suggests that browsers should use HTMLTableCellElement for\n       *       both TD and TH elements. WhatWG separates these.\n       * Test: Object.prototype.toString.call(document.createElement('td'))\n       *  - Chrome === \"[object HTMLTableCellElement]\"\n       *  - Firefox === \"[object HTMLTableCellElement]\"\n       *  - Safari === \"[object HTMLTableCellElement]\"\n       */\n      if (obj.tagName === 'TD') {\n        return 'HTMLTableDataCellElement';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/#htmltableheadercellelement)\n       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`\n       * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n       *       which suggests that browsers should use HTMLTableCellElement for\n       *       both TD and TH elements. WhatWG separates these.\n       * Test: Object.prototype.toString.call(document.createElement('th'))\n       *  - Chrome === \"[object HTMLTableCellElement]\"\n       *  - Firefox === \"[object HTMLTableCellElement]\"\n       *  - Safari === \"[object HTMLTableCellElement]\"\n       */\n      if (obj.tagName === 'TH') {\n        return 'HTMLTableHeaderCellElement';\n      }\n    }\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   Float64Array       x 625,644 ops/sec ±1.58% (80 runs sampled)\n  *   Float32Array       x 1,279,852 ops/sec ±2.91% (77 runs sampled)\n  *   Uint32Array        x 1,178,185 ops/sec ±1.95% (83 runs sampled)\n  *   Uint16Array        x 1,008,380 ops/sec ±2.25% (80 runs sampled)\n  *   Uint8Array         x 1,128,040 ops/sec ±2.11% (81 runs sampled)\n  *   Int32Array         x 1,170,119 ops/sec ±2.88% (80 runs sampled)\n  *   Int16Array         x 1,176,348 ops/sec ±5.79% (86 runs sampled)\n  *   Int8Array          x 1,058,707 ops/sec ±4.94% (77 runs sampled)\n  *   Uint8ClampedArray  x 1,110,633 ops/sec ±4.20% (80 runs sampled)\n  * Post:\n  *   Float64Array       x 7,105,671 ops/sec ±13.47% (64 runs sampled)\n  *   Float32Array       x 5,887,912 ops/sec ±1.46% (82 runs sampled)\n  *   Uint32Array        x 6,491,661 ops/sec ±1.76% (79 runs sampled)\n  *   Uint16Array        x 6,559,795 ops/sec ±1.67% (82 runs sampled)\n  *   Uint8Array         x 6,463,966 ops/sec ±1.43% (85 runs sampled)\n  *   Int32Array         x 5,641,841 ops/sec ±3.49% (81 runs sampled)\n  *   Int16Array         x 6,583,511 ops/sec ±1.98% (80 runs sampled)\n  *   Int8Array          x 6,606,078 ops/sec ±1.74% (81 runs sampled)\n  *   Uint8ClampedArray  x 6,602,224 ops/sec ±1.77% (83 runs sampled)\n  */\n  var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);\n  if (typeof stringTag === 'string') {\n    return stringTag;\n  }\n\n  var objPrototype = Object.getPrototypeOf(obj);\n  /* ! Speed optimisation\n  * Pre:\n  *   regex literal      x 1,772,385 ops/sec ±1.85% (77 runs sampled)\n  *   regex constructor  x 2,143,634 ops/sec ±2.46% (78 runs sampled)\n  * Post:\n  *   regex literal      x 3,928,009 ops/sec ±0.65% (78 runs sampled)\n  *   regex constructor  x 3,931,108 ops/sec ±0.58% (84 runs sampled)\n  */\n  if (objPrototype === RegExp.prototype) {\n    return 'RegExp';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   date               x 2,130,074 ops/sec ±4.42% (68 runs sampled)\n  * Post:\n  *   date               x 3,953,779 ops/sec ±1.35% (77 runs sampled)\n  */\n  if (objPrototype === Date.prototype) {\n    return 'Date';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)\n   * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be \"Promise\":\n   * Test: `Object.prototype.toString.call(Promise.resolve())``\n   *  - Chrome <=47 === \"[object Object]\"\n   *  - Edge <=20 === \"[object Object]\"\n   *  - Firefox 29-Latest === \"[object Promise]\"\n   *  - Safari 7.1-Latest === \"[object Promise]\"\n   */\n  if (promiseExists && objPrototype === Promise.prototype) {\n    return 'Promise';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   set                x 2,222,186 ops/sec ±1.31% (82 runs sampled)\n  * Post:\n  *   set                x 4,545,879 ops/sec ±1.13% (83 runs sampled)\n  */\n  if (setExists && objPrototype === Set.prototype) {\n    return 'Set';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   map                x 2,396,842 ops/sec ±1.59% (81 runs sampled)\n  * Post:\n  *   map                x 4,183,945 ops/sec ±6.59% (82 runs sampled)\n  */\n  if (mapExists && objPrototype === Map.prototype) {\n    return 'Map';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   weakset            x 1,323,220 ops/sec ±2.17% (76 runs sampled)\n  * Post:\n  *   weakset            x 4,237,510 ops/sec ±2.01% (77 runs sampled)\n  */\n  if (weakSetExists && objPrototype === WeakSet.prototype) {\n    return 'WeakSet';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   weakmap            x 1,500,260 ops/sec ±2.02% (78 runs sampled)\n  * Post:\n  *   weakmap            x 3,881,384 ops/sec ±1.45% (82 runs sampled)\n  */\n  if (weakMapExists && objPrototype === WeakMap.prototype) {\n    return 'WeakMap';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)\n   * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be \"DataView\":\n   * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (dataViewExists && objPrototype === DataView.prototype) {\n    return 'DataView';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)\n   * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be \"Map Iterator\":\n   * Test: `Object.prototype.toString.call(new Map().entries())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (mapExists && objPrototype === mapIteratorPrototype) {\n    return 'Map Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)\n   * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be \"Set Iterator\":\n   * Test: `Object.prototype.toString.call(new Set().entries())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (setExists && objPrototype === setIteratorPrototype) {\n    return 'Set Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)\n   * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be \"Array Iterator\":\n   * Test: `Object.prototype.toString.call([][Symbol.iterator]())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {\n    return 'Array Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)\n   * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be \"String Iterator\":\n   * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (stringIteratorExists && objPrototype === stringIteratorPrototype) {\n    return 'String Iterator';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   object from null   x 2,424,320 ops/sec ±1.67% (76 runs sampled)\n  * Post:\n  *   object from null   x 5,838,000 ops/sec ±0.99% (84 runs sampled)\n  */\n  if (objPrototype === null) {\n    return 'Object';\n  }\n\n  return Object\n    .prototype\n    .toString\n    .call(obj)\n    .slice(toStringLeftSliceLength, toStringRightSliceLength);\n}\n\nreturn typeDetect;\n\n})));\n","'use strict';\nvar call = require('../internals/function-call');\nvar anObject = require('../internals/an-object');\nvar create = require('../internals/object-create');\nvar getMethod = require('../internals/get-method');\nvar defineBuiltIns = require('../internals/define-built-ins');\nvar InternalStateModule = require('../internals/internal-state');\nvar getBuiltIn = require('../internals/get-built-in');\nvar AsyncIteratorPrototype = require('../internals/async-iterator-prototype');\nvar createIterResultObject = require('../internals/create-iter-result-object');\n\nvar Promise = getBuiltIn('Promise');\n\nvar ASYNC_FROM_SYNC_ITERATOR = 'AsyncFromSyncIterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(ASYNC_FROM_SYNC_ITERATOR);\n\nvar asyncFromSyncIteratorContinuation = function (result, resolve, reject) {\n  var done = result.done;\n  Promise.resolve(result.value).then(function (value) {\n    resolve(createIterResultObject(value, done));\n  }, reject);\n};\n\nvar AsyncFromSyncIterator = function AsyncIterator(iteratorRecord) {\n  iteratorRecord.type = ASYNC_FROM_SYNC_ITERATOR;\n  setInternalState(this, iteratorRecord);\n};\n\nAsyncFromSyncIterator.prototype = defineBuiltIns(create(AsyncIteratorPrototype), {\n  next: function next() {\n    var state = getInternalState(this);\n    return new Promise(function (resolve, reject) {\n      var result = anObject(call(state.next, state.iterator));\n      asyncFromSyncIteratorContinuation(result, resolve, reject);\n    });\n  },\n  'return': function () {\n    var iterator = getInternalState(this).iterator;\n    return new Promise(function (resolve, reject) {\n      var $return = getMethod(iterator, 'return');\n      if ($return === undefined) return resolve(createIterResultObject(undefined, true));\n      var result = anObject(call($return, iterator));\n      asyncFromSyncIteratorContinuation(result, resolve, reject);\n    });\n  }\n});\n\nmodule.exports = AsyncFromSyncIterator;\n","'use strict';\nvar tryToString = require('../internals/try-to-string');\n\nvar $TypeError = TypeError;\n\nmodule.exports = function (O, P) {\n  if (!delete O[P]) throw new $TypeError('Cannot delete property ' + tryToString(P) + ' of ' + tryToString(O));\n};\n","'use strict';\nvar isArray = require('../internals/is-array');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar doesNotExceedSafeInteger = require('../internals/does-not-exceed-safe-integer');\nvar bind = require('../internals/function-bind-context');\n\n// `FlattenIntoArray` abstract operation\n// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray\nvar flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {\n  var targetIndex = start;\n  var sourceIndex = 0;\n  var mapFn = mapper ? bind(mapper, thisArg) : false;\n  var element, elementLen;\n\n  while (sourceIndex < sourceLen) {\n    if (sourceIndex in source) {\n      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];\n\n      if (depth > 0 && isArray(element)) {\n        elementLen = lengthOfArrayLike(element);\n        targetIndex = flattenIntoArray(target, original, element, elementLen, targetIndex, depth - 1) - 1;\n      } else {\n        doesNotExceedSafeInteger(targetIndex + 1);\n        target[targetIndex] = element;\n      }\n\n      targetIndex++;\n    }\n    sourceIndex++;\n  }\n  return targetIndex;\n};\n\nmodule.exports = flattenIntoArray;\n","'use strict';\nvar call = require('../internals/function-call');\nvar isCallable = require('../internals/is-callable');\nvar anObject = require('../internals/an-object');\nvar getIteratorDirect = require('../internals/get-iterator-direct');\nvar getIteratorMethod = require('../internals/get-iterator-method');\nvar getMethod = require('../internals/get-method');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar AsyncFromSyncIterator = require('../internals/async-from-sync-iterator');\n\nvar ASYNC_ITERATOR = wellKnownSymbol('asyncIterator');\n\nmodule.exports = function (obj) {\n  var object = anObject(obj);\n  var alreadyAsync = true;\n  var method = getMethod(object, ASYNC_ITERATOR);\n  var iterator;\n  if (!isCallable(method)) {\n    method = getIteratorMethod(object);\n    alreadyAsync = false;\n  }\n  if (method !== undefined) {\n    iterator = call(method, object);\n  } else {\n    iterator = object;\n    alreadyAsync = true;\n  }\n  anObject(iterator);\n  return getIteratorDirect(alreadyAsync ? iterator : new AsyncFromSyncIterator(getIteratorDirect(iterator)));\n};\n","'use strict';\nvar call = require('../internals/function-call');\nvar anObject = require('../internals/an-object');\nvar getIteratorDirect = require('../internals/get-iterator-direct');\nvar getIteratorMethod = require('../internals/get-iterator-method');\n\nmodule.exports = function (obj, stringHandling) {\n  if (!stringHandling || typeof obj !== 'string') anObject(obj);\n  var method = getIteratorMethod(obj);\n  return getIteratorDirect(anObject(method !== undefined ? call(method, obj) : obj));\n};\n","'use strict';\nvar IS_PURE = require('../internals/is-pure');\nvar global = require('../internals/global');\nvar fails = require('../internals/fails');\nvar WEBKIT = require('../internals/engine-webkit-version');\n\n// Forced replacement object prototype accessors methods\nmodule.exports = IS_PURE || !fails(function () {\n  // This feature detection crashes old WebKit\n  // https://github.com/zloirock/core-js/issues/232\n  if (WEBKIT && WEBKIT < 535) return;\n  var key = Math.random();\n  // In FF throws only define methods\n  // eslint-disable-next-line no-undef, no-useless-call, es/no-legacy-object-prototype-accessor-methods -- required for testing\n  __defineSetter__.call(null, key, function () { /* empty */ });\n  delete global[key];\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar flattenIntoArray = require('../internals/flatten-into-array');\nvar aCallable = require('../internals/a-callable');\nvar toObject = require('../internals/to-object');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\n// `Array.prototype.flatMap` method\n// https://tc39.es/ecma262/#sec-array.prototype.flatmap\n$({ target: 'Array', proto: true }, {\n  flatMap: function flatMap(callbackfn /* , thisArg */) {\n    var O = toObject(this);\n    var sourceLen = lengthOfArrayLike(O);\n    var A;\n    aCallable(callbackfn);\n    A = arraySpeciesCreate(O, 0);\n    A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    return A;\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar aCallable = require('../internals/a-callable');\nvar toObject = require('../internals/to-object');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar deletePropertyOrThrow = require('../internals/delete-property-or-throw');\nvar toString = require('../internals/to-string');\nvar fails = require('../internals/fails');\nvar internalSort = require('../internals/array-sort');\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar FF = require('../internals/engine-ff-version');\nvar IE_OR_EDGE = require('../internals/engine-is-ie-or-edge');\nvar V8 = require('../internals/engine-v8-version');\nvar WEBKIT = require('../internals/engine-webkit-version');\n\nvar test = [];\nvar nativeSort = uncurryThis(test.sort);\nvar push = uncurryThis(test.push);\n\n// IE8-\nvar FAILS_ON_UNDEFINED = fails(function () {\n  test.sort(undefined);\n});\n// V8 bug\nvar FAILS_ON_NULL = fails(function () {\n  test.sort(null);\n});\n// Old WebKit\nvar STRICT_METHOD = arrayMethodIsStrict('sort');\n\nvar STABLE_SORT = !fails(function () {\n  // feature detection can be too slow, so check engines versions\n  if (V8) return V8 < 70;\n  if (FF && FF > 3) return;\n  if (IE_OR_EDGE) return true;\n  if (WEBKIT) return WEBKIT < 603;\n\n  var result = '';\n  var code, chr, value, index;\n\n  // generate an array with more 512 elements (Chakra and old V8 fails only in this case)\n  for (code = 65; code < 76; code++) {\n    chr = String.fromCharCode(code);\n\n    switch (code) {\n      case 66: case 69: case 70: case 72: value = 3; break;\n      case 68: case 71: value = 4; break;\n      default: value = 2;\n    }\n\n    for (index = 0; index < 47; index++) {\n      test.push({ k: chr + index, v: value });\n    }\n  }\n\n  test.sort(function (a, b) { return b.v - a.v; });\n\n  for (index = 0; index < test.length; index++) {\n    chr = test[index].k.charAt(0);\n    if (result.charAt(result.length - 1) !== chr) result += chr;\n  }\n\n  return result !== 'DGBEFHACIJK';\n});\n\nvar FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;\n\nvar getSortCompare = function (comparefn) {\n  return function (x, y) {\n    if (y === undefined) return -1;\n    if (x === undefined) return 1;\n    if (comparefn !== undefined) return +comparefn(x, y) || 0;\n    return toString(x) > toString(y) ? 1 : -1;\n  };\n};\n\n// `Array.prototype.sort` method\n// https://tc39.es/ecma262/#sec-array.prototype.sort\n$({ target: 'Array', proto: true, forced: FORCED }, {\n  sort: function sort(comparefn) {\n    if (comparefn !== undefined) aCallable(comparefn);\n\n    var array = toObject(this);\n\n    if (STABLE_SORT) return comparefn === undefined ? nativeSort(array) : nativeSort(array, comparefn);\n\n    var items = [];\n    var arrayLength = lengthOfArrayLike(array);\n    var itemsLength, index;\n\n    for (index = 0; index < arrayLength; index++) {\n      if (index in array) push(items, array[index]);\n    }\n\n    internalSort(items, getSortCompare(comparefn));\n\n    itemsLength = lengthOfArrayLike(items);\n    index = 0;\n\n    while (index < itemsLength) array[index] = items[index++];\n    while (index < arrayLength) deletePropertyOrThrow(array, index++);\n\n    return array;\n  }\n});\n","'use strict';\n// this method was added to unscopables after implementation\n// in popular engines, so it's moved to a separate module\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('flatMap');\n","'use strict';\nvar $ = require('../internals/export');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar FORCED = require('../internals/object-prototype-accessors-forced');\nvar aCallable = require('../internals/a-callable');\nvar toObject = require('../internals/to-object');\nvar definePropertyModule = require('../internals/object-define-property');\n\n// `Object.prototype.__defineGetter__` method\n// https://tc39.es/ecma262/#sec-object.prototype.__defineGetter__\nif (DESCRIPTORS) {\n  $({ target: 'Object', proto: true, forced: FORCED }, {\n    __defineGetter__: function __defineGetter__(P, getter) {\n      definePropertyModule.f(toObject(this), P, { get: aCallable(getter), enumerable: true, configurable: true });\n    }\n  });\n}\n","'use strict';\nvar $ = require('../internals/export');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar FORCED = require('../internals/object-prototype-accessors-forced');\nvar aCallable = require('../internals/a-callable');\nvar toObject = require('../internals/to-object');\nvar definePropertyModule = require('../internals/object-define-property');\n\n// `Object.prototype.__defineSetter__` method\n// https://tc39.es/ecma262/#sec-object.prototype.__defineSetter__\nif (DESCRIPTORS) {\n  $({ target: 'Object', proto: true, forced: FORCED }, {\n    __defineSetter__: function __defineSetter__(P, setter) {\n      definePropertyModule.f(toObject(this), P, { set: aCallable(setter), enumerable: true, configurable: true });\n    }\n  });\n}\n","'use strict';\nvar $ = require('../internals/export');\nvar $find = require('../internals/async-iterator-iteration').find;\n\n// `AsyncIterator.prototype.find` method\n// https://github.com/tc39/proposal-async-iterator-helpers\n$({ target: 'AsyncIterator', proto: true, real: true }, {\n  find: function find(predicate) {\n    return $find(this, predicate);\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar call = require('../internals/function-call');\nvar aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar isObject = require('../internals/is-object');\nvar getIteratorDirect = require('../internals/get-iterator-direct');\nvar createAsyncIteratorProxy = require('../internals/async-iterator-create-proxy');\nvar createIterResultObject = require('../internals/create-iter-result-object');\nvar getAsyncIteratorFlattenable = require('../internals/get-async-iterator-flattenable');\nvar closeAsyncIteration = require('../internals/async-iterator-close');\nvar IS_PURE = require('../internals/is-pure');\n\nvar AsyncIteratorProxy = createAsyncIteratorProxy(function (Promise) {\n  var state = this;\n  var iterator = state.iterator;\n  var mapper = state.mapper;\n\n  return new Promise(function (resolve, reject) {\n    var doneAndReject = function (error) {\n      state.done = true;\n      reject(error);\n    };\n\n    var ifAbruptCloseAsyncIterator = function (error) {\n      closeAsyncIteration(iterator, doneAndReject, error, doneAndReject);\n    };\n\n    var outerLoop = function () {\n      try {\n        Promise.resolve(anObject(call(state.next, iterator))).then(function (step) {\n          try {\n            if (anObject(step).done) {\n              state.done = true;\n              resolve(createIterResultObject(undefined, true));\n            } else {\n              var value = step.value;\n              try {\n                var result = mapper(value, state.counter++);\n\n                var handler = function (mapped) {\n                  try {\n                    state.inner = getAsyncIteratorFlattenable(mapped);\n                    innerLoop();\n                  } catch (error4) { ifAbruptCloseAsyncIterator(error4); }\n                };\n\n                if (isObject(result)) Promise.resolve(result).then(handler, ifAbruptCloseAsyncIterator);\n                else handler(result);\n              } catch (error3) { ifAbruptCloseAsyncIterator(error3); }\n            }\n          } catch (error2) { doneAndReject(error2); }\n        }, doneAndReject);\n      } catch (error) { doneAndReject(error); }\n    };\n\n    var innerLoop = function () {\n      var inner = state.inner;\n      if (inner) {\n        try {\n          Promise.resolve(anObject(call(inner.next, inner.iterator))).then(function (result) {\n            try {\n              if (anObject(result).done) {\n                state.inner = null;\n                outerLoop();\n              } else resolve(createIterResultObject(result.value, false));\n            } catch (error1) { ifAbruptCloseAsyncIterator(error1); }\n          }, ifAbruptCloseAsyncIterator);\n        } catch (error) { ifAbruptCloseAsyncIterator(error); }\n      } else outerLoop();\n    };\n\n    innerLoop();\n  });\n});\n\n// `AsyncIterator.prototype.flaMap` method\n// https://github.com/tc39/proposal-async-iterator-helpers\n$({ target: 'AsyncIterator', proto: true, real: true, forced: IS_PURE }, {\n  flatMap: function flatMap(mapper) {\n    anObject(this);\n    aCallable(mapper);\n    return new AsyncIteratorProxy(getIteratorDirect(this), {\n      mapper: mapper,\n      inner: null\n    });\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar $some = require('../internals/async-iterator-iteration').some;\n\n// `AsyncIterator.prototype.some` method\n// https://github.com/tc39/proposal-async-iterator-helpers\n$({ target: 'AsyncIterator', proto: true, real: true }, {\n  some: function some(predicate) {\n    return $some(this, predicate);\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar iterate = require('../internals/iterate');\nvar aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar getIteratorDirect = require('../internals/get-iterator-direct');\n\n// `Iterator.prototype.find` method\n// https://github.com/tc39/proposal-iterator-helpers\n$({ target: 'Iterator', proto: true, real: true }, {\n  find: function find(predicate) {\n    anObject(this);\n    aCallable(predicate);\n    var record = getIteratorDirect(this);\n    var counter = 0;\n    return iterate(record, function (value, stop) {\n      if (predicate(value, counter++)) return stop(value);\n    }, { IS_RECORD: true, INTERRUPTED: true }).result;\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar call = require('../internals/function-call');\nvar aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar getIteratorDirect = require('../internals/get-iterator-direct');\nvar getIteratorFlattenable = require('../internals/get-iterator-flattenable');\nvar createIteratorProxy = require('../internals/iterator-create-proxy');\nvar iteratorClose = require('../internals/iterator-close');\nvar IS_PURE = require('../internals/is-pure');\n\nvar IteratorProxy = createIteratorProxy(function () {\n  var iterator = this.iterator;\n  var mapper = this.mapper;\n  var result, inner;\n\n  while (true) {\n    if (inner = this.inner) try {\n      result = anObject(call(inner.next, inner.iterator));\n      if (!result.done) return result.value;\n      this.inner = null;\n    } catch (error) { iteratorClose(iterator, 'throw', error); }\n\n    result = anObject(call(this.next, iterator));\n\n    if (this.done = !!result.done) return;\n\n    try {\n      this.inner = getIteratorFlattenable(mapper(result.value, this.counter++), false);\n    } catch (error) { iteratorClose(iterator, 'throw', error); }\n  }\n});\n\n// `Iterator.prototype.flatMap` method\n// https://github.com/tc39/proposal-iterator-helpers\n$({ target: 'Iterator', proto: true, real: true, forced: IS_PURE }, {\n  flatMap: function flatMap(mapper) {\n    anObject(this);\n    aCallable(mapper);\n    return new IteratorProxy(getIteratorDirect(this), {\n      mapper: mapper,\n      inner: null\n    });\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar iterate = require('../internals/iterate');\nvar aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar getIteratorDirect = require('../internals/get-iterator-direct');\n\n// `Iterator.prototype.some` method\n// https://github.com/tc39/proposal-iterator-helpers\n$({ target: 'Iterator', proto: true, real: true }, {\n  some: function some(predicate) {\n    anObject(this);\n    aCallable(predicate);\n    var record = getIteratorDirect(this);\n    var counter = 0;\n    return iterate(record, function (value, stop) {\n      if (predicate(value, counter++)) return stop();\n    }, { IS_RECORD: true, INTERRUPTED: true }).stopped;\n  }\n});\n","import chai from './index.js';\n\nexport const expect = chai.expect;\nexport const version = chai.version;\nexport const Assertion = chai.Assertion;\nexport const AssertionError = chai.AssertionError;\nexport const util = chai.util;\nexport const config = chai.config;\nexport const use = chai.use;\nexport const should = chai.should;\nexport const assert = chai.assert;\nexport const core = chai.core;\n\nexport default chai;\n"],"names":["exclude","excludes","slice","call","arguments","excludeProps","res","obj","Object","keys","forEach","key","indexOf","args","i","length","AssertionError","message","_props","ssf","props","extend","this","showDiff","Error","captureStackTrace","e","stack","module","exports","prototype","create","name","constructor","toJSON","checkError","chai","utils","Assertion","assert","proxify","assertIsAboutPromise","assertion","_obj","then","TypeError","inspect","thenable","catch","always","done","fail","pipe","progress","state","proxifyIfSupported","undefined","method","asserter","addMethod","apply","property","addProperty","doNotify","promise","assertIfNegated","extra","expected","actual","assertIfNotNegated","getBasePromise","getReasonName","reason","toString","getConstructorName","propertyNames","getOwnPropertyNames","propertyDescs","getOwnPropertyDescriptor","doAsserterAsyncAndAddThen","flag","derivedPromise","value","transformAsserterArgs","newArgs","transferPromiseness","errorLike","errMsgMatcher","errorLikeName","negate","rejected","RegExp","everyArgIsDefined","Boolean","matcherRelation","assertionMessage","errorLikeCompatible","compatibleInstance","compatibleConstructor","errMsgMatcherCompatible","compatibleMessage","reasonName","getMessage","eventually","deep","equal","filter","methodName","overwriteMethod","originalMethod","get","getterName","__methods","hasOwnProperty","overwriteChainableMethod","originalGetter","overwriteProperty","originalAssertMethods","propName","isFulfilled","to","be","fulfilled","isRejected","rejectedWith","becomes","deepEqual","doesNotBecome","notDeepEqual","assertMethodName","otherArgs","Array","customRejectionHandler","returnedPromise","fulfillmentValue","concat","notify","bind","values","used","version","util","use","fn","push","config","core","expect","should","_chai","msg","ssfi","lockSsfi","eql","defineProperty","console","warn","includeStack","set","addChainableMethod","chainingBehavior","expr","negateMsg","_actual","ok","test","assertionErrorObjectProperties","getActual","operator","getOperator","val","truncateThreshold","useProxy","proxyExcludedKeys","_","an","type","toLowerCase","article","charAt","SameValueZero","a","b","isNaN","includeChainingBehavior","include","objType","flagMsg","isDeep","descriptor","isEql","included","has","item","some","firstErr","numErrs","prop","propAssertion","transferFlags","err","assertExist","checkArguments","assertEqual","prevLockSsfi","assertEql","assertAbove","n","errorMessage","doLength","msgPrefix","nType","shouldThrow","have","itemsCount","size","assertLeast","assertBelow","assertMost","assertInstanceOf","target","isInstanceOf","getName","assertProperty","isNested","isOwn","nameType","hasProperty","pathInfo","getPathInfo","val1","val2","exists","assertOwnProperty","assertOwnPropertyDescriptor","actualDescriptor","assertLengthChain","assertLength","assertMatch","re","exec","assertKeys","str","keysType","deepStr","mixedArgsMsg","getOwnEnumerableProperties","map","String","len","any","all","expectedKey","actualKey","every","last","pop","join","sort","compareByInspect","assertThrows","caughtErr","is","everyArgIsUndefined","errorLikeFail","errMsgMatcherFail","errorLikeString","placeholder","respondTo","itself","context","satisfy","matcher","result","objDisplay","closeTo","delta","Math","abs","assertChanges","subject","initial","final","msgObj","assertIncreases","assertDecreases","chain","trim","start","finish","startType","finishType","range","toISOString","subset","failMsg","failNegateMsg","contains","ordered","cmp","superset","elem","idx","matchIdx","splice","elem2","isSubsetOf","list","possibility","expression","behavior","realDelta","isExtensible","isSealed","isFrozen","isFinite","express","errmsg","isOk","isNotOk","not","act","exp","notEqual","strictEqual","notStrictEqual","deepStrictEqual","isAbove","abv","above","isAtLeast","atlst","least","isBelow","blw","below","isAtMost","atmst","most","isTrue","isNotTrue","isFalse","isNotFalse","isNull","isNotNull","NaN","isNotNaN","exist","notExists","isUndefined","isDefined","isFunction","isNotFunction","isObject","isNotObject","isArray","isNotArray","isString","isNotString","isNumber","isNotNumber","finite","isBoolean","isNotBoolean","typeOf","notTypeOf","instanceOf","notInstanceOf","inc","notInclude","deepInclude","notDeepInclude","nestedInclude","nested","notNestedInclude","deepNestedInclude","notDeepNestedInclude","ownInclude","own","notOwnInclude","deepOwnInclude","notDeepOwnInclude","match","notMatch","notProperty","propertyVal","notPropertyVal","deepPropertyVal","notDeepPropertyVal","ownProperty","notOwnProperty","ownPropertyVal","notOwnPropertyVal","deepOwnPropertyVal","notDeepOwnPropertyVal","nestedProperty","notNestedProperty","nestedPropertyVal","notNestedPropertyVal","deepNestedPropertyVal","notDeepNestedPropertyVal","lengthOf","hasAnyKeys","hasAllKeys","containsAllKeys","contain","doesNotHaveAnyKeys","doesNotHaveAllKeys","hasAnyDeepKeys","hasAllDeepKeys","containsAllDeepKeys","doesNotHaveAnyDeepKeys","doesNotHaveAllDeepKeys","throws","assertErr","throw","doesNotThrow","approximately","sameMembers","set1","set2","same","members","notSameMembers","sameDeepMembers","notSameDeepMembers","sameOrderedMembers","notSameOrderedMembers","sameDeepOrderedMembers","notSameDeepOrderedMembers","includeMembers","notIncludeMembers","includeDeepMembers","notIncludeDeepMembers","includeOrderedMembers","notIncludeOrderedMembers","includeDeepOrderedMembers","notIncludeDeepOrderedMembers","oneOf","inList","changes","change","changesBy","tmpMsg","by","doesNotChange","changesButNotBy","but","increases","increase","increasesBy","doesNotIncrease","increasesButNotBy","decreases","decrease","decreasesBy","doesNotDecrease","doesNotDecreaseBy","decreasesButNotBy","ifError","extensible","isNotExtensible","sealed","isNotSealed","frozen","isNotFrozen","isEmpty","empty","isNotEmpty","alias","as","loadShould","enumerable","configurable","writable","shouldGetter","Number","Symbol","BigInt","valueOf","errt","errs","Throw","Should","addLengthGuard","canSetPrototype","setPrototypeOf","testFn","excludeNames","propDesc","Function","ctx","chainableBehavior","chainableMethodWrapper","newAssertion","asserterName","pd","fnLengthDesc","assertionName","isChainable","methodWrapper","isProxyEnabled","getter","propertyGetter","types","t","index","art","flags","__flags","replace","objectType","isObjectType","getOwnEnumerablePropertySymbols","getOwnPropertySymbols","sym","object","proto","getPrototypeOf","pathval","expectTypes","loupe","showHidden","depth","colors","options","truncate","Infinity","Proxy","Reflect","_chainingBehavior","_method","_super","overwritingMethodWrapper","origLockSsfi","_get","overwritingPropertyGetter","getProperties","builtins","nonChainableMethodName","proxyGetter","suggestion","suggestionDistance","dist","strA","strB","cap","memo","fill","j","ch","charCodeAt","min","stringDistanceCapped","includeAll","getFunctionName","thrown","errMatcher","comparisonString","constructorName","FakeMap","_key","random","Date","now","MemoizeMap","WeakMap","memoizeCompare","leftHandOperand","rightHandOperand","memoizeMap","isPrimitive","leftHandMap","memoizeSet","comparator","extensiveDeepEqual","simpleResult","simpleEqual","memoize","memoizeResultLeft","memoizeResultRight","comparatorResult","leftHandType","keysEqual","iterableEqual","regexpEqual","getGeneratorEntries","generatorEqual","Uint8Array","buffer","sizeError","leftHandItems","rightHandItems","entriesEqual","equals","total","leftHandKeys","getEnumerableKeys","rightHandKeys","leftHandSymbols","getEnumerableSymbols","rightHandSymbols","mapSymbols","leftHandEntries","getIteratorEntries","rightHandEntries","objectEqual","extensiveDeepEqualByType","iterator","hasIteratorFunction","iteratorError","generator","generatorResult","next","accumulator","allKeys","arr","entry","functionNameMatch","aFunc","functionSource","_typeof","_slicedToArray","_arrayWithHoles","_arr","_n","_d","_e","_s","_i","_iterableToArrayLimit","o","minLen","_arrayLikeToArray","from","_unsupportedIterableToArray","_nonIterableRest","arr2","ansiColors","bold","dim","italic","underline","inverse","hidden","strike","black","red","green","yellow","blue","magenta","cyan","white","brightblack","brightred","brightgreen","brightyellow","brightblue","brightmagenta","brightcyan","brightwhite","grey","styles","special","number","bigint","boolean","null","string","symbol","date","regexp","truncator","colorise","styleType","color","tail","tailLength","stringLength","inspectList","inspectItem","separator","originalLength","output","peek","truncated","secondToLast","nextLength","truncatedLength","inspectProperty","_ref2","_ref3","JSON","stringify","quoteComplexKey","getFuncName_1","inspectTypedArray","array","Buffer","toStringTag","getArrayName","nonIndexProperties","stylize","propertyContents","inspectFunction","func","inspectMapEntry","_ref","inspectNumber","inspectBigInt","nums","stringEscapeChars","escapeCharacters","hex","unicodeLength","escape","char","inspectString","inspectSymbol","description","getPromiseValue","_process$binding","process","binding","getPromiseDetails","kPending","kRejected","Promise","resolve","_getPromiseDetails2","innerValue","notNode","inspectPromise","inspectObject","properties","symbols","seen","symbolContents","sep","errorKeys","inspectAttribute","inspectHTMLCollection","collection","inspectHTML","element","getAttributeNames","tagName","head","headClose","getAttribute","children","chaiInspect","for","nodeInspect","nodeUtil","custom","noNodeInspect","constructorMap","stringTagMap","baseTypesMap","function","listContents","dateObject","stringRepresentation","split","Map","entries","mapToEntries","Set","arrayFromSet","sourceLength","source","WeakSet","Arguments","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","Generator","DataView","ArrayBuffer","error","unshift","HTMLCollection","NodeList","toString$1","_ref$showHidden","_ref$depth","_ref$colors","_ref$customInspect","customInspect","_ref$showProxy","showProxy","_ref$maxArrayLength","maxArrayLength","_ref$breakLength","breakLength","_ref$seen","_ref$truncate","_ref$stylize","normaliseOptions","inspectCustom","HTMLElement","inspectClass","default","registerConstructor","inspector","registerStringTag","stringTag","factory","parsePath","path","mArr","parseFloat","p","internalGetPathValue","parsed","pathDepth","temporaryValue","part","info","parent","getPathValue","setPathValue","tempObj","propVal","internalSetPathValue","promiseExists","globalObject","self","g","symbolExists","mapExists","setExists","weakMapExists","weakSetExists","dataViewExists","symbolIteratorExists","symbolToStringTagExists","setEntriesExists","mapEntriesExists","setIteratorPrototype","mapIteratorPrototype","arrayIteratorExists","arrayIteratorPrototype","stringIteratorExists","stringIteratorPrototype","typeofObj","window","location","document","navigator","mimeTypes","plugins","objPrototype","anObject","getMethod","defineBuiltIns","InternalStateModule","getBuiltIn","AsyncIteratorPrototype","createIterResultObject","ASYNC_FROM_SYNC_ITERATOR","setInternalState","getInternalState","getterFor","asyncFromSyncIteratorContinuation","reject","AsyncFromSyncIterator","iteratorRecord","$return","tryToString","$TypeError","O","P","lengthOfArrayLike","doesNotExceedSafeInteger","flattenIntoArray","original","sourceLen","mapper","thisArg","elementLen","targetIndex","sourceIndex","mapFn","isCallable","getIteratorDirect","getIteratorMethod","wellKnownSymbol","ASYNC_ITERATOR","alreadyAsync","stringHandling","IS_PURE","global","fails","WEBKIT","__defineSetter__","$","aCallable","toObject","arraySpeciesCreate","flatMap","callbackfn","A","uncurryThis","deletePropertyOrThrow","internalSort","arrayMethodIsStrict","FF","IE_OR_EDGE","V8","nativeSort","FAILS_ON_UNDEFINED","FAILS_ON_NULL","STRICT_METHOD","STABLE_SORT","code","chr","fromCharCode","k","v","forced","comparefn","itemsLength","items","arrayLength","x","y","getSortCompare","addToUnscopables","DESCRIPTORS","FORCED","definePropertyModule","__defineGetter__","f","setter","$find","real","find","predicate","createAsyncIteratorProxy","getAsyncIteratorFlattenable","closeAsyncIteration","AsyncIteratorProxy","doneAndReject","ifAbruptCloseAsyncIterator","outerLoop","step","counter","handler","mapped","inner","innerLoop","error4","error3","error2","error1","$some","iterate","record","stop","IS_RECORD","INTERRUPTED","getIteratorFlattenable","createIteratorProxy","iteratorClose","IteratorProxy","stopped"],"sourceRoot":""}