function ToBase64(str){return forge.util.encode64(str)}function FromBase64(str){return forge.util.decode64(str)}function PsrAesEncryption(aesKey,aesIv){this.aesKey=aesKey,this.aesIv=aesIv;var _self=this;this.decrypt=function(encrypted,decode){if(null!=encrypted)return decoded=decode?forge.util.decode64(encrypted):encrypted,decode=forge.aes.startDecrypting(_self.aesKey,_self.aesIv),encrypted=forge.util.createBuffer(decoded),decode.update(encrypted),decode.finish(),decode.output.data},this.encrypt=function(text){var cipher=forge.cipher.createCipher("AES-CBC",_self.aesKey);return cipher.start({iv:_self.aesIv}),cipher.update(forge.util.createBuffer(text)),cipher.finish(),cipher.output}}function PsrRsaEncryption(privateKeyPemBase64){var rsa=forge.pki.rsa,_self=(this.privateKey,this.publicKey,this);null!=privateKeyPemBase64&&(_self.privateKey=forge.pki.privateKeyFromPem(forge.util.decode64(privateKeyPemBase64)),_self.publicKey=forge.pki.privateKeyFromPem(forge.util.decode64(privateKeyPemBase64))),this.generateKeyPair=function(){var keypair=rsa.generateKeyPair({bits:2048,e:65537});_self.privateKey=keypair.privateKey,_self.publicKey=keypair.publicKey},this.getPrivateKeyPemBase64=function(){return forge.util.encode64(forge.pki.privateKeyToPem(_self.privateKey))},this.decrypt=function(encrypted){encrypted=forge.util.decode64(encrypted);return _self.privateKey.decrypt(encrypted)},this.publicKeyToXml=function(window){var doc=window.document.implementation.createDocument("","",null),rsaXml=doc.createElement("RSAKeyValue"),modulus=doc.createElement("Modulus"),modulus=(modulus.textContent=forge.util.encode64(forge.util.hexToBytes(_self.publicKey.n.toString(16))),rsaXml.appendChild(modulus),doc.createElement("Exponent"));return modulus.textContent=forge.util.encode64(forge.util.hexToBytes(_self.publicKey.e.toString(16))),rsaXml.appendChild(modulus),doc.appendChild(rsaXml),(new window.XMLSerializer).serializeToString(doc)},null==this.privateKey&&this.generateKeyPair()}