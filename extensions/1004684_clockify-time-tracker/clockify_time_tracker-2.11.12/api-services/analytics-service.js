class AnalyticsService extends ClockifyService{static events={trackerStarted:{event:"Time Tracker > Start",moduleName:"Time Tracker",featureName:"Start The Tracker"},trackerStopped:{event:"Time Tracker > Stop",moduleName:"Time Tracker",featureName:"Stop The Tracker"},entryDiscard:{event:"Time Tracker > Discard",moduleName:"Time Tracker",featureName:"Discard Time Entry"},entryContinued:{event:"Time Entry > Continue",moduleName:"Time Tracker",featureName:"Continue Time Entry"},entryAdded:{event:"Time Tracker > Manual Add > Add",moduleName:"Time Tracker",featureName:"Add Time Entry Manual"},projectAdded:{event:"Time Entry > Projects > Add",moduleName:"Time Entry",featureName:"Add New Project"}};static async sendAnalyticsEvents({forceClearEvents:e}={}){const t=Boolean((await UserService.checkInternetConnection()).data),a="undefined"!=typeof browser,r="update_url"in chrome.runtime.getManifest();if(a)return;if(!r)return;const n=JSON.parse(await localStorage.getItem("AnalyticsEvents"))||[];if(0===n.length)return;if(!t)return void(e&&this.clearAnalyticsEvents());await localStorage.setItem("AnalyticsEvents","[]");const s=await this.userId,i=await localStorage.getItem("token"),o=await localStorage.getItem("osName"),c=await localStorage.getItem("osVersion"),l=await localStorage.getItem("browserName"),m=await localStorage.getItem("browserVersion"),d=chrome.runtime.getManifest().version,p=await localStorage.getItem("permanent_homeUrl"),y=p.includes("app.dev.ops."),u=p.includes("app.stage.ops.");if(y||u)return;const g=y?"https://app.dev.ops.clockify.me/analytics/events/apps":u?"https://app.stage.ops.clockify.me/analytics/events/apps":"https://api.clockify.me/porcos/events/apps",v=n.map((e=>({...e,sessionId:i,platform:"Extension",userId:s,osType:o,osVersion:c,browserType:l,browserVersion:m,extensionVersion:d})));try{return await this.apiCall(g,"POST",v)}catch(e){throw console.error("Error sending analytics event:",e),e}}static async clearAnalyticsEvents(){await localStorage.setItem("AnalyticsEvents","[]")}static async sendAnalyticsEvent(e={}){const t="undefined"!=typeof browser,a="update_url"in chrome.runtime.getManifest();if(t)return;if(!a)return;const r=await this.userId,n=await this.getClientId(),s=await this.apiEndpoint,i=await localStorage.getItem("activeWorkspaceId"),o=`${s}/workspaces/${i}/google-analytics`,{analyticsEventName:c,eventParameters:l}=e,m={event_name:c,event_parameters:l,user_properties:{user_id:r,workspace_id:i,client_id:n}};try{return await this.apiCall(o,"POST",AnalyticsService.convertKeysToSnakeNotation(m))}catch(e){throw console.error("Error sending analytics event:",e),e}}static convertKeysToSnakeNotation(e){if("object"!=typeof e)return e;for(const t in e){const a=t.replace(/([A-Z])/g,(e=>"_"+e.toLowerCase()));a!=t&&e.hasOwnProperty(t)&&(e[a]=e[t],delete e[t]),"object"==typeof e[a]&&(e[a]=AnalyticsService.convertKeysToSnakeNotation(e[a]))}return e}static async getClientId(){const e=await chrome.storage.local.get("clientId");return e?.clientId?e.clientId:await this.createAndSetClientId()}static async createAndSetClientId(){const e=self.crypto.randomUUID();return await chrome.storage.local.set({clientId:e}),e}static async storeAnalyticsEvents(e=[]){const t=await localStorage.getItem("activeWorkspaceId");e=e.map((e=>({...e,workspaceId:t})));const a=JSON.parse(await localStorage.getItem("AnalyticsEvents")),r=Array.isArray(a)?JSON.stringify([...a,...e]):JSON.stringify([...e]);await localStorage.setItem("AnalyticsEvents",r)}}