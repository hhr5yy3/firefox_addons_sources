{"version":3,"file":"CodeEditor-BhJr0HvQ.js","sources":["../../src/components/shared/CodeEditor.vue"],"sourcesContent":["<template>\n  <div class=\"border-2 code-editor\">\n    <div ref=\"editor\" class=\"full-width full-height\" />\n\n    <div class=\"code-editor__actions\">\n      <div class=\"inline-block\">\n        <copy-button round flat dense :custom-handler=\"copyContent\" />\n      </div>\n\n      <div class=\"inline-block\">\n        <q-btn icon=\"settings\" round flat dense>\n          <q-menu style=\"white-space: nowrap\" dense anchor=\"bottom right\" self=\"top end\">\n            <q-item>\n              <q-btn :disable=\"!validJson\"\n                     :title=\"t('shared.code_editor.actions.beautify.title')\"\n                     color=\"dark-grey\"\n                     class=\"full-width\"\n                     @click=\"beautifyEditorValue\">\n                <q-icon dense name=\"auto_fix_normal\" />\n                {{ t('shared.code_editor.actions.beautify.text') }}\n              </q-btn>\n            </q-item>\n\n            <q-separator />\n\n            <q-item dense class=\"q-py-sm\">\n              <q-checkbox v-model=\"codeEditorStore.wrapLines\" size=\"32px\"\n                          dense\n                          :label=\"t('shared.code_editor.actions.wrap_lines.label')\"\n                          :title=\"t('shared.code_editor.actions.wrap_lines.title')\" />\n            </q-item>\n          </q-menu>\n        </q-btn>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { computed, Ref, ref, toRef } from 'vue'\n  import { useCodeEditor } from '../../composables/CodeEditor'\n  import { useCodeEditorStore } from '../../store/codeEditor.ts'\n  import CopyButton from './CopyButton.vue'\n  import { useTranslation } from '../../composables/i18n'\n  import { KeyBinding } from '@codemirror/view'\n\n  const props = defineProps<{ modelValue: string, commands?: KeyBinding[], onPaste?: (data: string) => void }>()\n  const emit = defineEmits(['update:modelValue'])\n  const t = useTranslation()\n  const codeEditorStore = useCodeEditorStore()\n\n  const editor: Ref<HTMLElement | null> = ref(null)\n  const { copyContent, beautifyEditorValue } = useCodeEditor(editor, {\n    initialValue: toRef(props, 'modelValue'),\n    commands: props.commands,\n    emit,\n    onPaste: props.onPaste\n  })\n\n  const validJson = computed(() => {\n    if (props.modelValue === '') return true\n    try {\n      JSON.parse(props.modelValue)\n      return true\n    } catch (_e) {\n      return false\n    }\n  })\n</script>\n"],"names":["props","__props","emit","__emit","t","useTranslation","codeEditorStore","useCodeEditorStore","editor","ref","copyContent","beautifyEditorValue","useCodeEditor","toRef","validJson","computed"],"mappings":"4dA8CE,MAAMA,EAAQC,EACRC,EAAOC,EACPC,EAAIC,EAAe,EACnBC,EAAkBC,EAAmB,EAErCC,EAAkCC,EAAI,IAAI,EAC1C,CAAE,YAAAC,EAAa,oBAAAC,GAAwBC,EAAcJ,EAAQ,CACjE,aAAcK,EAAMb,EAAO,YAAY,EACvC,SAAUA,EAAM,SAChB,KAAAE,EACA,QAASF,EAAM,OAAA,CAChB,EAEKc,EAAYC,EAAS,IAAM,CAC3B,GAAAf,EAAM,aAAe,GAAW,MAAA,GAChC,GAAA,CACG,YAAA,MAAMA,EAAM,UAAU,EACpB,QACI,CACJ,MAAA,EAAA,CACT,CACD"}