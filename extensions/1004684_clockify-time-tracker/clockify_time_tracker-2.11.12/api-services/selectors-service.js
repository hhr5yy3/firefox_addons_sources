class IntegrationSelectors{static externalResource="https://clockify.me/downloads/selectors.json";static internalResource="../integrations/selectors.json";static fetchAndStore=async({onlyIfPassedFollowingMinutesSinceLastFetch:t}={})=>{try{const e=t??0;if(!await this.isExpired({minimumMinutesBetweenFetches:e})){const t=await this.getExpirationMinutes(e),s=60*t,o=`Fetching remote selectors is blocked, it will be available in ${Number(t).toFixed(2)} minutes (${Math.round(s)} seconds).`;return void console.warn(o)}const s=await this.fetch(this.externalResource,{cache:"no-store","cache-control":"no-cache"});await this.store(s)}catch(t){console.error("Fetching selectors remotely failed:",t);try{const t=await this.fetch(this.internalResource);await this.store(t)}catch(t){console.error("Fetching selectors locally failed:",t)}}};static isExpired=async({minimumMinutesBetweenFetches:t})=>{try{const e=Date.now();return e-await this.getLastFetchTime()>6e4*t}catch(t){throw t}};static getLastFetchTime=async()=>{try{const t=await localStorage.getItem("integrationSelectorsLastFetchTime");return t?parseInt(t):0}catch(t){throw console.error("Error getting last fetch time:",t),t}};static getExpirationMinutes=async t=>t-(Date.now()-await this.getLastFetchTime())/6e4;static fetch=async(t,e={})=>{try{const s=await ClockifyService.apiCall(t,"GET",null,!0,e),o=s.data;if(!Boolean(o)||Boolean(s.error))throw new Error(s?.error?.message||"Response is null");return o}catch(t){throw t}};static store=async t=>{try{const e=Date.now().toString();await localStorage.setItem("integrationSelectors",t),await localStorage.setItem("integrationSelectorsLastFetchTime",e)}catch(t){throw console.error("Error storing selectors:",t),t}}}