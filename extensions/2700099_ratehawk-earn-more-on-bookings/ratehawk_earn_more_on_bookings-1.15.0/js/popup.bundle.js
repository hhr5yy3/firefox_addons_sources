!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=544)}([function(e,t,n){"use strict";e.exports=n(126)},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return a})),n.d(t,"e",(function(){return i})),n.d(t,"c",(function(){return s})),n.d(t,"d",(function(){return u}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function o(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var a=function(){return(a=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function i(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function s(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,a=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i}function u(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(s(arguments[t]));return e}},function(e,t,n){e.exports=n(125)},function(e,t,n){e.exports=function(e){return function(t){return function(n,r){var o=[t];return n&&Object.getOwnPropertyNames(n).forEach((function(e){var r=n[e];!0===r?o.push([t,e].join("_")):r&&o.push([t,e,r].join("_"))})),o.map((function(t){return"string"==typeof e[t]?e[t]:""})).filter(Boolean).concat(r||[]).join(" ")}}}},function(e,t,n){"use strict";var r;n.d(t,"a",(function(){return r})),function(e){e.PARTNERS_AUTH_KEY="PARTNERS_AUTH_KEY",e.UID="UID",e.USER_ID="USER_ID",e.PINGER_PERIOD="PINGER_PERIOD",e.WAS_ONBOARDING_SHOWN="WAS_ONBOARDING_SHOWN",e.ONBOARDING_TAB_ID="ONBOARDING_TAB_ID",e.BOOKING_SCROLL_TO_TABLE_ON_FIRST_OFFER="BOOKING_SCROLL_TO_TABLE_ON_FIRST_OFFER",e.IS_FIRST_BOOKING="IS_FIRST_BOOKING",e.WAS_FIRST_BOOKING_SHOWN="WAS_FIRST_BOOKING_SHOWN",e.NO_RATE_DATA="NO_RATE_DATA",e.RATE="RATE",e.RATES="RATES",e.PROMOCODE="PROMOCODE",e.LANGUAGE="LANGUAGE",e.LIVE_SETTINGS="LIVE_SETTINGS",e.NOTIFICATIONS_SETTINGS="NOTIFICATIONS_SETTINGS",e.PRICE_SETTINGS="PRICE_SETTINGS",e.PROMO_CAMPAIGN="PROMO_CAMPAIGN",e.INFORMATION_STEP="INFORMATION_STEP",e.LAST_TIME_INFORMATION_WAS_SHOWN="LAST_TIME_INFORMATION_WAS_SHOWN"}(r||(r={}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"c",(function(){return l})),n.d(t,"b",(function(){return f}));var r=n(2),o=n.n(r),a=n(8);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t,n,r,o,a,i){try{var s=e[a](i),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function u(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){s(a,r,o,i,u,"next",e)}function u(e){s(a,r,o,i,u,"throw",e)}i(void 0)}))}}var c=function(){var e=u(o.a.mark((function e(t){var n;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,a.browser.storage.local.get([t]);case 2:return n=e.sent,e.abrupt("return",n[t]);case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),l=function(){var e=u(o.a.mark((function e(t,n){return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,a.browser.storage.local.set(i({},t,n));case 2:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),f=function(){var e=u(o.a.mark((function e(t){return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,a.browser.storage.local.remove(t);case 2:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()},function(e,t,n){"use strict";n.d(t,"e",(function(){return c})),n.d(t,"f",(function(){return l})),n.d(t,"h",(function(){return f})),n.d(t,"b",(function(){return d})),n.d(t,"a",(function(){return p})),n.d(t,"d",(function(){return m})),n.d(t,"c",(function(){return h})),n.d(t,"g",(function(){return g}));var r=n(0),o=n(53),a=n(20),i=n(151);const s={38:"&amp;",62:"&gt;",60:"&lt;",34:"&quot;",39:"&#x27;"},u=/[&><"']/g;function c(e){return(""+e).replace(u,e=>s[e.charCodeAt(0)])}function l(e,t,n={}){return t.reduce((t,r)=>(r in e?t[r]=e[r]:r in n&&(t[r]=n[r]),t),{})}function f(e){Object(i.a)(e,"[React Intl] Could not find required `intl` object. <IntlProvider> needs to exist in the component ancestry.")}function d(e,t){return`[React Intl] ${e}${t?"\n"+t.stack:""}`}const p={formats:{},messages:{},timeZone:void 0,textComponent:r.Fragment,defaultLocale:"en",defaultFormats:{},onError:function(e){0}};function m(){return{dateTime:{},number:{},message:{},relativeTime:{},pluralRules:{},list:{},displayNames:{}}}function h(e={dateTime:{},number:{},message:{},relativeTime:{},pluralRules:{},list:{},displayNames:{}}){const t=Intl.RelativeTimeFormat,n=Intl.ListFormat,r=Intl.DisplayNames;return{getDateTimeFormat:Object(a.a)(Intl.DateTimeFormat,e.dateTime),getNumberFormat:Object(a.a)(Intl.NumberFormat,e.number),getMessageFormat:Object(a.a)(o.a,e.message),getRelativeTimeFormat:Object(a.a)(t,e.relativeTime),getPluralRules:Object(a.a)(Intl.PluralRules,e.pluralRules),getListFormat:Object(a.a)(n,e.list),getDisplayNames:Object(a.a)(r,e.displayNames)}}function g(e,t,n,r){const o=e&&e[t];let a;if(o&&(a=o[n]),a)return a;r(d(`No ${t} format named: ${n}`))}},function(e,t,n){"use strict";var r,o;function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return i})),n.d(t,"c",(function(){return s})),function(e){e.EN="en",e.RU="ru",e.DE="de",e.ES="es",e.IT="it",e.FR="fr",e.PL="pl",e.TK="tk",e.BG="bg",e.RO="ro",e.PT="pt"}(o||(o={}));var i=(a(r={},o.EN,"English"),a(r,o.RU,"Русский"),r),s={gb:o.EN,de:o.DE,es:o.ES,it:o.IT,fr:o.FR,pl:o.PL,tk:o.TK,ru:o.RU,bg:o.BG,hu:o.EN,gr:o.EN,ro:o.RO,ae:o.EN,rs:o.EN,al:o.EN,pt:o.PT}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.browser=n(132)},function(e,t,n){"use strict";var r,o,a,i;function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return u})),n.d(t,"c",(function(){return c})),n.d(t,"d",(function(){return l})),function(e){e.ACS="ACS",e.AGD="AGD",e.ALN="ALN",e.BDO="BDO",e.BOO="BOO",e.BVK="BVK",e.ERA="ERA",e.GGB="GGB",e.HST="HST",e.HTB="HTB",e.HTP="HTP",e.ITC="ITC",e.SXT="SXT",e.TBO="TBO",e.TLD="TLD",e.VTR="VTR",e.W2M="W2M"}(i||(i={}));var u=(s(r={},i.ACS,!1),s(r,i.AGD,!1),s(r,i.ALN,!1),s(r,i.BDO,!0),s(r,i.BOO,!1),s(r,i.BVK,!1),s(r,i.ERA,!0),s(r,i.GGB,!0),s(r,i.HST,!0),s(r,i.HTB,!0),s(r,i.HTP,!0),s(r,i.ITC,!0),s(r,i.SXT,!0),s(r,i.TBO,!0),s(r,i.TLD,!0),s(r,i.VTR,!0),s(r,i.W2M,!0),r),c=(s(o={},i.ACS,21),s(o,i.AGD,38),s(o,i.ALN,82),s(o,i.BDO,47),s(o,i.BOO,92),s(o,i.BVK,20),s(o,i.ERA,72),s(o,i.GGB,82),s(o,i.HST,82),s(o,i.HTB,82),s(o,i.HTP,82),s(o,i.ITC,44),s(o,i.SXT,82),s(o,i.TBO,82),s(o,i.TLD,82),s(o,i.VTR,49),s(o,i.W2M,43),o),l=(s(a={},i.ACS,"Acase"),s(a,i.AGD,"Agoda"),s(a,i.ALN,"Alean"),s(a,i.BDO,"Bedsonline"),s(a,i.BOO,"Booking"),s(a,i.BVK,"Bronevik"),s(a,i.ERA,"Expedia"),s(a,i.GGB,"GoGlobal"),s(a,i.HTP,"Hotelspro"),s(a,i.HST,"Hotelston"),s(a,i.HTB,"Hotelbook"),s(a,i.ITC,"Italcamel"),s(a,i.SXT,"6tour"),s(a,i.TBO,"TBOholidays"),s(a,i.TLD,"TeldarTravel"),s(a,i.VTR,"Veturis"),s(a,i.W2M,"W2M"),a)},function(e,t,n){"use strict";function r(e){switch(Object.prototype.toString.call(e)){case"[object Error]":case"[object Exception]":case"[object DOMException]":return!0;default:return h(e,Error)}}function o(e){return"[object ErrorEvent]"===Object.prototype.toString.call(e)}function a(e){return"[object DOMError]"===Object.prototype.toString.call(e)}function i(e){return"[object DOMException]"===Object.prototype.toString.call(e)}function s(e){return"[object String]"===Object.prototype.toString.call(e)}function u(e){return null===e||"object"!=typeof e&&"function"!=typeof e}function c(e){return"[object Object]"===Object.prototype.toString.call(e)}function l(e){return"undefined"!=typeof Event&&h(e,Event)}function f(e){return"undefined"!=typeof Element&&h(e,Element)}function d(e){return"[object RegExp]"===Object.prototype.toString.call(e)}function p(e){return Boolean(e&&e.then&&"function"==typeof e.then)}function m(e){return c(e)&&"nativeEvent"in e&&"preventDefault"in e&&"stopPropagation"in e}function h(e,t){try{return e instanceof t}catch(e){return!1}}n.d(t,"d",(function(){return r})),n.d(t,"e",(function(){return o})),n.d(t,"a",(function(){return a})),n.d(t,"b",(function(){return i})),n.d(t,"k",(function(){return s})),n.d(t,"i",(function(){return u})),n.d(t,"h",(function(){return c})),n.d(t,"f",(function(){return l})),n.d(t,"c",(function(){return f})),n.d(t,"j",(function(){return d})),n.d(t,"m",(function(){return p})),n.d(t,"l",(function(){return m})),n.d(t,"g",(function(){return h}))},,function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return o})),n.d(t,"c",(function(){return a})),n.d(t,"d",(function(){return i})),n.d(t,"e",(function(){return s})),n.d(t,"f",(function(){return u}));var r="Mzg6ZDUxODQxYmQtYTNlNi00YzkxLTgwYTktYzJmMmNjMGFlOGM5",o="ratehawk",a=.02,i="ru",s="ratehawk-extension",u="ratehawk"},function(e,t,n){"use strict";n.d(t,"g",(function(){return u})),n.d(t,"b",(function(){return c})),n.d(t,"f",(function(){return l})),n.d(t,"e",(function(){return f})),n.d(t,"c",(function(){return d})),n.d(t,"h",(function(){return p})),n.d(t,"a",(function(){return m})),n.d(t,"d",(function(){return h}));var r=n(2),o=n.n(r),a=n(8),i=n(7);function s(e,t,n,r,o,a,i){try{var s=e[a](i),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}var u=function(){},c=function(){var e,t=(e=o.a.mark((function e(t,n){var r,i;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r={url:t,name:n},e.next=3,a.browser.cookies.get(r);case 3:return i=e.sent,e.abrupt("return",null==i?void 0:i.value);case 5:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){s(a,r,o,i,u,"next",e)}function u(e){s(a,r,o,i,u,"throw",e)}i(void 0)}))});return function(e,n){return t.apply(this,arguments)}}(),l=function(){return a.browser.runtime.getManifest().version},f=function(e){var t=document.querySelector("#".concat(e));return t&&t.remove(),(t=document.createElement("div")).id=e,document.body.appendChild(t),t},d=function(e){var t=document.createElement("link");return t.rel="stylesheet",t.href=e,t},p=function(e){var t=e.toString();return t.length>4?t.replace(/\B(?=(\d{3})+(?!\d))/g," "):t},m=function(){var e=window.navigator.userAgent.toLowerCase();return e.includes("edg")?"edge":e.includes("opr")?"opera":e.includes("firefox")?"firefox":e.includes("safari")&&!e.includes("chrome")?"safari":"chrome"},h=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"gb";return Object.keys(i.c).find((function(t){return t===e}))||(t===i.a.EN?"gb":t)}},function(e,t,n){"use strict";function r(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";(function(e){n.d(t,"e",(function(){return a})),n.d(t,"i",(function(){return i})),n.d(t,"h",(function(){return s})),n.d(t,"d",(function(){return u})),n.d(t,"c",(function(){return c})),n.d(t,"b",(function(){return l})),n.d(t,"a",(function(){return f})),n.d(t,"f",(function(){return d})),n.d(t,"g",(function(){return p}));var r=n(41),o=(n(32),{});function a(){return Object(r.b)()?e:"undefined"!=typeof window?window:"undefined"!=typeof self?self:o}function i(){var e=a(),t=e.crypto||e.msCrypto;if(void 0!==t&&t.getRandomValues){var n=new Uint16Array(8);t.getRandomValues(n),n[3]=4095&n[3]|16384,n[4]=16383&n[4]|32768;var r=function(e){for(var t=e.toString(16);t.length<4;)t="0"+t;return t};return r(n[0])+r(n[1])+r(n[2])+r(n[3])+r(n[4])+r(n[5])+r(n[6])+r(n[7])}return"xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)}))}function s(e){if(!e)return{};var t=e.match(/^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);if(!t)return{};var n=t[6]||"",r=t[8]||"";return{host:t[4],path:t[5],protocol:t[2],relative:t[5]+n+r}}function u(e){if(e.message)return e.message;if(e.exception&&e.exception.values&&e.exception.values[0]){var t=e.exception.values[0];return t.type&&t.value?t.type+": "+t.value:t.type||t.value||e.event_id||"<unknown>"}return e.event_id||"<unknown>"}function c(e){var t=a();if(!("console"in t))return e();var n=t.console,r={};["debug","info","warn","error","log","assert"].forEach((function(e){e in t.console&&n[e].__sentry_original__&&(r[e]=n[e],n[e]=n[e].__sentry_original__)}));var o=e();return Object.keys(r).forEach((function(e){n[e]=r[e]})),o}function l(e,t,n){e.exception=e.exception||{},e.exception.values=e.exception.values||[],e.exception.values[0]=e.exception.values[0]||{},e.exception.values[0].value=e.exception.values[0].value||t||"",e.exception.values[0].type=e.exception.values[0].type||n||"Error"}function f(e,t){void 0===t&&(t={});try{e.exception.values[0].mechanism=e.exception.values[0].mechanism||{},Object.keys(t).forEach((function(n){e.exception.values[0].mechanism[n]=t[n]}))}catch(e){}}function d(){try{return document.location.href}catch(e){return""}}function p(e,t){if(!t)return 6e4;var n=parseInt(""+t,10);if(!isNaN(n))return 1e3*n;var r=Date.parse(""+t);return isNaN(r)?6e4:r-e}}).call(this,n(40))},function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"c",(function(){return o})),n.d(t,"b",(function(){return a}));var r,o,a,i=n(0),s=n.n(i),u=n(3),c=n.n(u),l=n(54),f=n(86),d=n.n(f);!function(e){e.XL="xl",e.L="l",e.M="m",e.S="s"}(r||(r={})),function(e){e.LIGHT="light",e.GHOST="ghost",e.FLAT="flat"}(o||(o={})),function(e){e.BUTTON="button",e.SUBMIT="submit",e.RESET="reset"}(a||(a={}));var p=c()(d.a);t.d=function(e){var t=e.children,n=e.size,o=void 0===n?r.M:n,a=e.view,i=e.type,u=e.href,c=e.openInNewTab,f=e.wide,d=e.disabled,m=e.focused,h=e.loading,g=e.onClick,v=e.className,b=e.style,y=e.testid,w=d||h,_=p("button")({size:o,view:a,wide:f,focused:m},v),O=h?s.a.createElement(l.a,{view:a}):t;return u?s.a.createElement("a",{className:_,tabIndex:w?-1:0,"data-disabled":w,style:b,href:w?void 0:u,target:c?"_blank":void 0,"data-testid":y},O):s.a.createElement("button",{className:_,onClick:g,tabIndex:w?-1:0,style:b,disabled:w,type:i,"data-testid":y},O)}},function(e,t,n){"use strict";(function(e){n.d(t,"c",(function(){return c})),n.d(t,"f",(function(){return l})),n.d(t,"e",(function(){return p})),n.d(t,"d",(function(){return g})),n.d(t,"b",(function(){return v})),n.d(t,"a",(function(){return b}));var r=n(1),o=n(59),a=n(10),i=n(88),s=n(47),u=n(32);function c(e,t,n){if(t in e){var r=e[t],o=n(r);if("function"==typeof o)try{o.prototype=o.prototype||{},Object.defineProperties(o,{__sentry_original__:{enumerable:!1,value:r}})}catch(e){}e[t]=o}}function l(e){return Object.keys(e).map((function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])})).join("&")}function f(e){if(Object(a.d)(e)){var t=e,n={message:t.message,name:t.name,stack:t.stack};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}if(Object(a.f)(e)){var i=e,s={};s.type=i.type;try{s.target=Object(a.c)(i.target)?Object(o.a)(i.target):Object.prototype.toString.call(i.target)}catch(e){s.target="<unknown>"}try{s.currentTarget=Object(a.c)(i.currentTarget)?Object(o.a)(i.currentTarget):Object.prototype.toString.call(i.currentTarget)}catch(e){s.currentTarget="<unknown>"}for(var r in"undefined"!=typeof CustomEvent&&Object(a.g)(e,CustomEvent)&&(s.detail=i.detail),i)Object.prototype.hasOwnProperty.call(i,r)&&(s[r]=i);return s}return e}function d(e){return function(e){return~-encodeURI(e).split(/%..|./).length}(JSON.stringify(e))}function p(e,t,n){void 0===t&&(t=3),void 0===n&&(n=102400);var r=g(e,t);return d(r)>n?p(e,t-1,n):r}function m(t,n){return"domain"===n&&t&&"object"==typeof t&&t._events?"[Domain]":"domainEmitter"===n?"[DomainEmitter]":void 0!==e&&t===e?"[Global]":"undefined"!=typeof window&&t===window?"[Window]":"undefined"!=typeof document&&t===document?"[Document]":Object(a.l)(t)?"[SyntheticEvent]":"number"==typeof t&&t!=t?"[NaN]":void 0===t?"[undefined]":"function"==typeof t?"[Function: "+Object(s.a)(t)+"]":t}function h(e,t,n,r){if(void 0===n&&(n=1/0),void 0===r&&(r=new i.a),0===n)return function(e){var t=Object.prototype.toString.call(e);if("string"==typeof e)return e;if("[object Object]"===t)return"[Object]";if("[object Array]"===t)return"[Array]";var n=m(e);return Object(a.i)(n)?n:t}(t);if(null!=t&&"function"==typeof t.toJSON)return t.toJSON();var o=m(t,e);if(Object(a.i)(o))return o;var s=f(t),u=Array.isArray(t)?[]:{};if(r.memoize(t))return"[Circular ~]";for(var c in s)Object.prototype.hasOwnProperty.call(s,c)&&(u[c]=h(c,s[c],n-1,r));return r.unmemoize(t),u}function g(e,t){try{return JSON.parse(JSON.stringify(e,(function(e,n){return h(e,n,t)})))}catch(e){return"**non-serializable**"}}function v(e,t){void 0===t&&(t=40);var n=Object.keys(f(e));if(n.sort(),!n.length)return"[object has no keys]";if(n[0].length>=t)return Object(u.d)(n[0],t);for(var r=n.length;r>0;r--){var o=n.slice(0,r).join(", ");if(!(o.length>t))return r===n.length?o:Object(u.d)(o,t)}return""}function b(e){var t,n;if(Object(a.h)(e)){var o=e,i={};try{for(var s=Object(r.e)(Object.keys(o)),u=s.next();!u.done;u=s.next()){var c=u.value;void 0!==o[c]&&(i[c]=b(o[c]))}}catch(e){t={error:e}}finally{try{u&&!u.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}return i}return Array.isArray(e)?e.map(b):e}}).call(this,n(40))},function(e,t,n){"use strict";var r=n(76),o=Object.prototype.toString;function a(e){return"[object Array]"===o.call(e)}function i(e){return void 0===e}function s(e){return null!==e&&"object"==typeof e}function u(e){if("[object Object]"!==o.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function c(e){return"[object Function]"===o.call(e)}function l(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isPlainObject:u,isUndefined:i,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:c,isStream:function(e){return s(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:l,merge:function e(){var t={};function n(n,r){u(t[r])&&u(n)?t[r]=e(t[r],n):u(n)?t[r]=e({},n):a(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)l(arguments[r],n);return t},extend:function(e,t,n){return l(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(8),o={B2B:"https://www.ratehawk.com",OSTROVOK:"https://ostrovok.ru",PARTNERS:"https://partner.ostrovok.ru",API:"https://api.worldota.net"};t.b={B2B:o.B2B,B2B_HOTELS:"".concat(o.B2B,"/hotels/"),B2B_ROOMS:"".concat(o.B2B,"/rooms/"),HOTELS:"".concat(o.PARTNERS,"/api/extension/v1/hotel_static/"),REGISTRATION:"".concat(o.B2B,"/registration"),SEARCH_HP:"".concat(o.API,"/api/b2b/v3/search/hp/ext"),SEARCH_SERP:"".concat(o.API,"/api/b2b/v3/search/serp/ext"),GET_PARTNERS_AUTH_KEY:"".concat(o.B2B,"/partners/frontend/v3/proxy/extension/auth/"),RESTORE_PASSWORD:"".concat(o.B2B,"/partners/frontend/v4/proxy/password/recovery/"),SIGN_IN:"".concat(o.B2B,"/api/v3/site/accounts/login/"),SIGN_OUT:"".concat(o.B2B,"/accounts/logout/"),FUNNEL:"https://cnt.worldota.net/funnel.js",HC_CHROME_FORM_PINGER:"".concat(o.B2B,"/hc/chromeform/pinger"),HC_CHROME_FORM_TAB:"".concat(o.OSTROVOK,"/hc/chromeform/tab"),HC_EXTENSION_SERP:"".concat(o.B2B,"/hc/extension/serp"),HC_RUM:"".concat(o.B2B,"/hc/rum.gif"),FIRST_EXAMPLE:"https://www.booking.com/hotel/fr/timquartierlatinpantheo",LIVE_SETTINGS:"".concat(o.B2B,"/api/v1/growth/ext/conf/"),PROMOCODE:"".concat(o.B2B,"/api/v1/growth/ext/promocode/"),PROMOCODES:"".concat(o.B2B,"/api/v1/growth/ext/promocodes/"),CHROME_STORE_REVIEWS:"https://chrome.google.com/webstore/detail/".concat(r.browser.runtime.id,"/reviews"),CHROME_EXTENSIONS:"chrome://extensions/",CHROME_NEW_TAB:"chrome://newtab/",EXTENSION_EMAIL:"extension@ratehawk.com",LANDING:"https://www.ratehawk.com/travel/extension_r/",PRIVACY_POLICY:"https://ostrovok.ru/legal/site/privacy-policy/"}},function(e,t,n){"use strict";var r=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var a=arguments[t],i=0,s=a.length;i<s;i++,o++)r[o]=a[i];return r};function o(e){return JSON.stringify(e.map((function(e){return e&&"object"==typeof e?(t=e,Object.keys(t).sort().map((function(e){var n;return(n={})[e]=t[e],n}))):e;var t})))}t.a=function(e,t){return void 0===t&&(t={}),function(){for(var n,a=[],i=0;i<arguments.length;i++)a[i]=arguments[i];var s=o(a),u=s&&t[s];return u||(u=new((n=e).bind.apply(n,r([void 0],a))),s&&(t[s]=u)),u}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(14);function o(e){Object(r.a)(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}},function(e,t,n){"use strict";n.d(t,"b",(function(){return p})),n.d(t,"a",(function(){return h}));var r=n(0),o=n.n(r),a=n(3),i=n.n(a),s=n(62),u=n(26),c=n(122),l=n.n(c);function f(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return d(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return d(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var p,m=i()(l.a);!function(e){e.OFF="OFF",e.GROSS="GROSS",e.NET="NET"}(p||(p={}));var h=0;t.c=function(e){var t=e.name,n=e.setting,a=e.percent,i=e.updateSettings,c=e.competitorId,l=e.sendError,d=e.hasError,g=e.userBasicMarkup,v=f(Object(r.useState)("".concat(a)),2),b=v[0],y=v[1],w=f(Object(r.useState)(n),2),_=w[0],O=w[1],E=o.a.createElement("div",{className:m("percentIcon")()},"%"),S=function(e){i(c,{setting:e}),O(e),e!==p.GROSS&&x()&&l(c,!1),e===p.GROSS&&(y("".concat(g)),i(c,{percent:g}))},x=function(){return _===p.GROSS&&d};return o.a.createElement("div",{className:m("row")()},o.a.createElement("h5",{className:m("rowTitle")()},t),o.a.createElement("div",{className:m("controlls")()},o.a.createElement("div",{className:m("radioGroup")()},o.a.createElement(s.a,{className:m("ButtonRadio")(),text:p.OFF,value:p.OFF,checked:_===p.OFF,onChange:function(){return S(p.OFF)}}),o.a.createElement(s.a,{className:m("ButtonRadio")(),text:p.NET,value:p.NET,checked:_===p.NET,onChange:function(){return S(p.NET)}}),o.a.createElement(s.a,{className:m("ButtonRadio")(),text:p.GROSS,value:p.GROSS,checked:_===p.GROSS,onChange:function(){return S(p.GROSS)}})),o.a.createElement("div",{className:m("inputWrapper")()},o.a.createElement(u.b,{className:"".concat(m("input")()," ").concat(_===p.OFF?m("inputDisabled")():""),disabled:_!==p.GROSS,hasError:x(),onChange:function(e){y(e.target.value)},onBlur:function(){var e;e=b,!Number.isNaN(+e)&&e.trim()&&+e>=0&&+e<100?(l(c,!1),i(c,{percent:+b})):l(c,!0)},value:_===p.GROSS?b:h,icon:E,size:u.a.S,placeholder:"".concat(h),wide:!0}))))}},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=n(94),a=Object.prototype.toString;function i(e){return"[object Array]"===a.call(e)}function s(e){return void 0===e}function u(e){return null!==e&&"object"===r(e)}function c(e){return"[object Function]"===a.call(e)}function l(e,t){if(null!=e)if("object"!==r(e)&&(e=[e]),i(e))for(var n=0,o=e.length;n<o;n++)t.call(null,e[n],n,e);else for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.call(null,e[a],a,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===a.call(e)},isBuffer:function(e){return null!==e&&!s(e)&&null!==e.constructor&&!s(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:u,isUndefined:s,isDate:function(e){return"[object Date]"===a.call(e)},isFile:function(e){return"[object File]"===a.call(e)},isBlob:function(e){return"[object Blob]"===a.call(e)},isFunction:c,isStream:function(e){return u(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:l,merge:function e(){var t={};function n(n,o){"object"===r(t[o])&&"object"===r(n)?t[o]=e(t[o],n):t[o]=n}for(var o=0,a=arguments.length;o<a;o++)l(arguments[o],n);return t},deepMerge:function e(){var t={};function n(n,o){"object"===r(t[o])&&"object"===r(n)?t[o]=e(t[o],n):"object"===r(n)?t[o]=e({},n):t[o]=n}for(var o=0,a=arguments.length;o<a;o++)l(arguments[o],n);return t},extend:function(e,t,n){return l(t,(function(t,r){e[r]=n&&"function"==typeof t?o(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(127)},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r,o,a=n(0),i=n(6),s=n(42),u=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};!function(e){e.formatDate="FormattedDate",e.formatTime="FormattedTime",e.formatNumber="FormattedNumber",e.formatList="FormattedList",e.formatDisplayName="FormattedDisplayName"}(r||(r={})),function(e){e.formatDate="FormattedDateParts",e.formatTime="FormattedTimeParts",e.formatNumber="FormattedNumberParts",e.formatList="FormattedListParts"}(o||(o={}));function c(e){const t=t=>a.createElement(s.a.Consumer,null,n=>{Object(i.h)(n);const{value:r,children:o}=t,a=u(t,["value","children"]),s="string"==typeof r?new Date(r||0):r;return o("formatDate"===e?n.formatDateToParts(s,a):n.formatTimeToParts(s,a))});return t.displayName=o[e],t}function l(e){const t=t=>a.createElement(s.a.Consumer,null,n=>{Object(i.h)(n);const{value:r,children:o}=t,s=u(t,["value","children"]),c=n[e](r,s);if("function"==typeof o)return o(c);const l=n.textComponent||a.Fragment;return a.createElement(l,null,c)});return t.displayName=r[e],t}function f(e){return e}l("formatDate"),l("formatTime"),l("formatNumber"),l("formatList"),l("formatDisplayName"),c("formatDate"),c("formatTime")},function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var r=n(0),o=n.n(r),a=n(3),i=n.n(a),s=n(61),u=function(e){var t=o.a.useRef();return o.a.useEffect((function(){t.current=e})),t.current},c=n(106),l=n.n(c);function f(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return d(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return d(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var p,m=i()(l.a),h=o.a.forwardRef((function(e,t){var n=e.className,r=e.value,a=e.placeholder,i=e.disabled,s=e.testid,u=e.onFocus,c=e.onBlur,l=e.onKeyDown,f=null!=r&&""!==r;return o.a.createElement("div",{className:m("control")({hasPlaceholder:!f&&!!a,disabled:i},n),tabIndex:0,onFocus:u,onBlur:c,onKeyDown:l,"data-testid":s,ref:t,role:"textbox"},f?r:a)})),g=Object(r.forwardRef)((function(e,t){var n=e.className,r=e.onFocus,a=e.onChange,i=e.onBlur,s=e.onKeyDown,u=e.value,c=e.placeholder,l=e.name,f=e.type,d=e.required,p=e.disabled,m=e.testid,h=e.autoComplete,g=e.maxLength,v=e.readOnly;return o.a.createElement("input",{className:n,onFocus:r,onChange:a,onBlur:i,onKeyDown:s,value:u,placeholder:c,name:l,"data-testid":m,type:f,required:d,disabled:p,autoComplete:h,autoCorrect:"off",autoCapitalize:"off",spellCheck:!1,ref:t,maxLength:g,readOnly:v})}));!function(e){e.XS="xs",e.L="l",e.M="m",e.S="s"}(p||(p={}));t.b=function(e){var t=e.className,n=e.style,r=e.size,a=e.label,i=e.tooltipContent,c=e.placeholder,l=e.inputRef,d=e.onFocus,p=e.onChange,v=e.onClick,b=e.onBlur,y=e.onKeyDown,w=e.onIconClick,_=e.value,O=e.pseudo,E=e.focused,S=e.wide,x=e.children,j=e.startAdornment,k=e.icon,T=e.reserveIconPlace,C=e.hasError,A=e.error,N=void 0===A?null:A,P=e.name,R=e.type,D=e.autoComplete,I=e.readOnly,M=e.required,L=e.disabled,B=e.testid,F=e.validators,U=e.maxLength,z=e.tooltipCallback,H=O?h:g,G=f(o.a.useState(N),2),W=G[0],q=G[1],V=f(o.a.useState(null),2),Y=V[0],$=V[1],X=f(o.a.useState(_),2),K=X[0],Q=X[1],Z=u(K);o.a.useEffect((function(){q(N)}),[N]),o.a.useEffect((function(){$(null)}),[_]);var J=W||Y;return o.a.createElement("div",{className:m("wrapper")({wide:S},t)},o.a.createElement("label",{className:m("label")({size:r,focused:E,hasError:C||!!J,disabled:L,required:M,readOnly:I}),style:n,onClick:v},x,o.a.createElement("div",{className:m("controlLine")({reserveIconPlace:!k&&T})},j,o.a.createElement(H,{className:m("control")(),ref:l,onChange:p,onFocus:function(e){q(null),$(null),d&&d(e)},onBlur:function(e){if(b){Q(e.target.value);var t=e.target.value===Z;if(F){var n=null;F.every((function(t){return n=t(e.target.value),$(n),!n})),b(e,n,t)}else b(e,null,t)}},onKeyDown:y,value:_,placeholder:c,name:P,type:R,required:M,disabled:L,testid:B,autoComplete:D||"input-off",maxLength:U,readOnly:I}),k&&o.a.createElement("div",{tabIndex:0,role:"button",onClick:w,className:m("icon")({clickable:!!w})},k)),o.a.createElement("div",{className:m("titleWrapper")()},o.a.createElement("div",{className:m("title")()},a),!!i&&o.a.createElement(s.b,{className:m("hint")(),tooltipContent:i,position:s.a.TOP,tooltipCallback:z}))),!!J&&o.a.createElement("p",{className:m("error")()},J.message))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r,o,a=n(50);function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}!function(e){e.DESKTOP="desktop",e.MOBILE="mobile",e.TABLET="tablet"}(o||(o={}));var c={sizes:(r={},u(r,o.DESKTOP,1450),u(r,o.MOBILE,680),u(r,o.TABLET,1074),r)};t.b=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:c,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case a.a.SET_THEME:return s({sizes:e.sizes},t.theme);default:return e}}},function(e,t,n){e.exports=n(130)()},function(e,t,n){"use strict";function r(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return g})),n.d(t,"b",(function(){return f})),n.d(t,"c",(function(){return c})),n.d(t,"d",(function(){return h})),n.d(t,"e",(function(){return s}));var r=n(58),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},a={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function i(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function s(e,t,n){var o;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(s)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var u=e,c=t,l=[],f=l,d=!1;function p(){f===l&&(f=l.slice())}function m(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return c}function h(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return p(),f.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,p();var n=f.indexOf(e);f.splice(n,1),l=null}}}function g(e){if(!i(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,c=u(c,e)}finally{d=!1}for(var t=l=f,n=0;n<t.length;n++){(0,t[n])()}return e}function v(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");u=e,g({type:a.REPLACE})}function b(){var e,t=h;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(m())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e}return g({type:a.INIT}),(o={dispatch:g,subscribe:h,getState:m,replaceReducer:v})[r.a]=b,o}function u(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function c(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var i,s=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:a.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:a.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+a.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},a=0;a<s.length;a++){var c=s[a],l=n[c],f=e[c],d=l(f,t);if(void 0===d){var p=u(c,t);throw new Error(p)}o[c]=d,r=r||d!==f}return(r=r||s.length!==Object.keys(e).length)?o:e}}function l(e,t){return function(){return t(e.apply(this,arguments))}}function f(e,t){if("function"==typeof e)return l(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=l(o,t))}return n}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(n,!0).forEach((function(t){d(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function h(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function g(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=t.map((function(e){return e(o)}));return m({},n,{dispatch:r=h.apply(void 0,a)(n.dispatch)})}}}},,function(e,t,n){"use strict";n.d(t,"d",(function(){return o})),n.d(t,"c",(function(){return a})),n.d(t,"b",(function(){return i})),n.d(t,"a",(function(){return s}));var r=n(10);function o(e,t){return void 0===t&&(t=0),"string"!=typeof e||0===t||e.length<=t?e:e.substr(0,t)+"..."}function a(e,t){var n=e,r=n.length;if(r<=150)return n;t>r&&(t=r);var o=Math.max(t-60,0);o<5&&(o=0);var a=Math.min(o+140,r);return a>r-5&&(a=r),a===r&&(o=Math.max(a-140,0)),n=n.slice(o,a),o>0&&(n="'{snip} "+n),a<r&&(n+=" {snip}"),n}function i(e,t){if(!Array.isArray(e))return"";for(var n=[],r=0;r<e.length;r++){var o=e[r];try{n.push(String(o))}catch(e){n.push("[value cannot be serialized]")}}return n.join(t)}function s(e,t){return!!Object(r.k)(e)&&(Object(r.j)(t)?t.test(e):"string"==typeof t&&-1!==e.indexOf(t))}},function(e,t,n){"use strict";t.a={RESTORE_PASSWORD:"RESTORE_PASSWORD",SIGN_IN:"SIGN_IN",SIGN_OUT:"SIGN_OUT",CLOSE_ONBOARDING:"CLOSE_ONBOARDING",OPEN_RATE:"OPEN_RATE",SHOW_OFFER:"SHOW_OFFER",SHOW_TBO_BF_OFFER:"SHOW_TBO_BF_OFFER",CHANGE_NOTIFICATIONS_SETTINGS:"CHANGE_NOTIFICATIONS_SETTINGS",GET_COMPETITOR_SERP_DATA:"GET_COMPETITOR_SERP_DATA",GET_COMPETITOR_ALL_SERP_DATA:"GET_COMPETITOR_ALL_SERP_DATA",GET_COMPETITOR_ORDER_DATA:"GET_COMPETITOR_ORDER_DATA",GET_TBO_ORDER_DATA:"GET_TBO_ORDER_DATA",UPDATE_LIVE_SETTINGS:"UPDATE_LIVE_SETTINGS",OPEN_NEW_WINDOW:"OPEN_NEW_WINDOW"}},function(e,t,n){"use strict";var r=n(2),o=n.n(r),a=n(0),i=n(8),s=n(44),u=n(45);function c(e,t,n,r,o,a,i){try{var s=e[a](i),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function l(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){c(a,r,o,i,s,"next",e)}function s(e){c(a,r,o,i,s,"throw",e)}i(void 0)}))}}t.a=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=Object(a.useCallback)(function(){var t=l(o.a.mark((function t(n){var r;return o.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!e){t.next=7;break}return t.next=3,Object(u.a)();case 3:if(!(r=t.sent).id){t.next=7;break}return t.next=7,Object(s.b)(r.id,n);case 7:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),[e]),n=Object(a.useCallback)(function(){var t=l(o.a.mark((function t(n,r,a){var s;return o.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!e){t.next=14;break}return t.next=3,Object(u.a)();case 3:return s=t.sent,t.prev=4,t.next=7,i.browser.tabs.executeScript(s.id,{code:"hcfunnel('event', 'chrome_extension', '".concat(n,"', '").concat(r,"', ").concat(JSON.stringify(a),");")});case 7:t.next=12;break;case 9:t.prev=9,t.t0=t.catch(4),console.log("sendEvent error: ",t.t0);case 12:t.next=15;break;case 14:hcfunnel("event","chrome_extension",n,r,a);case 15:case"end":return t.stop()}}),t,null,[[4,9]])})));return function(e,n,r){return t.apply(this,arguments)}}(),[e]);return{inject:t,sendEvent:n}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r={html:{SEARCH_FORM:"/popup.html"},js:{FIRST_BOOKING:"/js/firstBooking.bundle.js",OFFER:"/js/offer.bundle.js",ONBOARDING:"/js/onBoarding.bundle.js",PROMOCODE:"/js/promoCode.bundle.js",INFORMATION:"/js/information.bundle.js"},css:{FIRST_BOOKING:"css/firstBooking.css",FONTS:"/css/fonts.css",OFFER:"css/offer.css",ONBOARDING:"css/onBoarding.css",PROMOCODE:"css/promoCode.css",INFORMATION:"css/information.css"},images:{BG_ECONOMY_STEP:"/assets/img/background-economy-step.png",BG_FIRST_BOOKING:"/assets/img/background-first-booking.png",BG_INSTRUCTIONS_STEP:"/assets/img/background-instructions-step.png",BG_WELCOME_STEP:"/assets/img/background-welcome-step.png",FAVICON_DEFAULT:"/assets/icons/icon-128.png",FAVICON_SUCCESS:"/assets/icons/icon-success.png",ICON_HEART:"/assets/icons/icon-heart.svg",ICON_NEW:"/assets/icons/icon-new.svg",ICON_PIN:"/assets/icons/icon-pin.svg",LOGO:"/assets/icons/logo.svg"}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(84),o=n.n(r).a.create({withCredentials:!0})},function(e,t,n){"use strict";(function(e){var r=n(30),o=n(73),a=n(90);function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var s,u=[Object(r.a)(o.a),e&&e.__REDUX_DEVTOOLS_EXTENSION__&&e.__REDUX_DEVTOOLS_EXTENSION__()].filter((function(e){return e}));t.a=Object(r.e)(a.a,r.d.apply(void 0,function(e){if(Array.isArray(e))return i(e)}(s=u)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(s)||function(e,t){if(e){if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(e,t):void 0}}(s)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()))}).call(this,n(40))},function(e,t,n){"use strict";var r;function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,"a",(function(){return a})),n.d(t,"b",(function(){return i}));var a={OFF:"off",ON:"on"},i=(o(r={},a.OFF,[{duration:"perm",label:"settings.notificationsEnableForever"},{duration:15,label:"settings.notificationsEnable15Minutes"},{duration:60,label:"settings.notificationsEnable1Hour"},{duration:720,label:"settings.notificationsEnable12Hours"}]),o(r,a.ON,[{duration:15,label:"settings.notificationsDisable15Minutes"},{duration:60,label:"settings.notificationsDisable1Hour"},{duration:720,label:"settings.notificationsDisable12Hours"},{duration:"manual",label:"settings.notificationsDisableForever"}]),r)},,function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";(function(e,r){n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return a}));n(10),n(17);function o(){return"[object process]"===Object.prototype.toString.call(void 0!==e?e:0)}function a(e,t){return e.require(t)}}).call(this,n(60),n(57)(e))},function(e,t,n){"use strict";n.d(t,"b",(function(){return c})),n.d(t,"a",(function(){return l}));var r=n(0),o=n(55),a=n.n(o);n(6);a.a;const i=r.createContext(null),{Consumer:s,Provider:u}=i,c=u,l=i},function(e,t,n){"use strict";var r=n(0),o=n.n(r);t.a=function(e){var t=e.className,n=e.fill,r=void 0===n?"#868686":n,a=e.height,i=void 0===a?18:a,s=e.width,u=void 0===s?18:s;return o.a.createElement("svg",{className:t,fill:r,height:i,viewBox:"0 0 20 21",width:u},o.a.createElement("path",{d:"M11.59 10l5.159-5.16a1.126 1.126 0 0 0-1.59-1.59L10 8.41 4.84 3.25a1.128 1.128 0 0 0-1.59 0 1.128 1.128 0 0 0 0 1.59L8.408 10 3.25 15.16a1.128 1.128 0 0 0 0 1.59 1.128 1.128 0 0 0 1.59 0L10 11.59l5.158 5.16a1.126 1.126 0 0 0 1.59-1.59L11.592 10z",fillRule:"nonzero"}))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return y})),n.d(t,"b",(function(){return E})),n.d(t,"e",(function(){return x})),n.d(t,"d",(function(){return j})),n.d(t,"f",(function(){return k})),n.d(t,"c",(function(){return T}));var r=n(2),o=n.n(r),a=n(8),i=n(12),s=n(4),u=n(19),c=n(36),l=n(5),f=n(13);function d(e){return function(e){if(Array.isArray(e))return p(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return p(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return p(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function p(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function m(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(Object(n),!0).forEach((function(t){g(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function v(e,t,n,r,o,a,i){try{var s=e[a](i),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function b(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){v(a,r,o,i,s,"next",e)}function s(e){v(a,r,o,i,s,"throw",e)}i(void 0)}))}}var y,w;!function(e){e.CONGRATULATIONS="congratulations",e.HISTORY="history",e.OFFER="offer",e.ORDER="order",e.PRICE_SETTINGS="price_settings",e.PROMOCODE="promocode",e.SERP="serp",e.WELCOME="welcome",e.INFORMATION="information"}(y||(y={})),function(e){e.PAGETYPE="pagetype",e.USER_ID="user_id"}(w||(w={}));var _;!function(e){e.ADDRESS="address",e.BAR_PRICE="bar_price",e.BATHROOM_TYPE="bathroom_type",e.BED_TYPE="bed_type",e.CANCELLATION_BEFORE="cancellation_before",e.CHECKIN="checkin",e.CHECKOUT="checkout",e.CITY="city",e.COMPETITOR_CURRENCY="competitor_currency",e.COMPETITOR_ID="competitor_id",e.COMPETITOR_NET_PRICE="competitor_net_price",e.COMPETITOR_PRICE="competitor_price",e.DATETIME="datetime",e.EXTENSION_BRAND="extension_brand",e.EXTENSION_LANG="extension_lang",e.EXTENSION_VERSION="extension_version",e.EXTERNAL_CURRENCY="external_currency",e.EXTERNAL_HOTEL_ID="external_hotel_id",e.EXTERNAL_HOTEL_NAME="external_hotel_name",e.FUNNEL_STEP="funnel_step",e.GEO="geo",e.GUESTS="guests",e.GUESTS_DETAILED="guests_detailed",e.HAS_BALCONY="has_balcony",e.HAS_MEAL="has_meal",e.HOTEL_KIND="hotel_kind",e.HOTEL_NAME="hotel_name",e.IS_ETG="is_etg",e.LANGUAGE="language",e.LATITUDE="latitude",e.LONGITUDE="longitude",e.MAIN_COMPETITOR_PRICE="main_competitor_price",e.MEAL_TYPE="meal_type",e.MIN_OSTROVOK_LOYALTY="min_ostrovok_loyalty",e.MIN_OSTROVOK_PRICE="min_ostrovok_price",e.MIN_OSTROVOK_PRICE_WITH_TAXES="min_ostrovok_price_with_taxes",e.NET_PRICE="net_price",e.NUM_IN_PAGE="num_in_page",e.OSTROVOK_CURRENCY="ostrovok_currency",e.OTAHOTEL_ID="otahotel_id",e.PHONE="phone",e.PRICE="price",e.PRICE_WITH_TAXES="price_with_taxes",e.PROMO_AMOUNT="promo_amount",e.REGION="region",e.RESIDENCY="residency",e.ROOM_NAME="room_name",e.STAR_RATING="star_rating",e.SUP_NAME="sup_name",e.SUP_PRICE="sup_price",e.TAXES="taxes"}(_||(_={}));var O,E=function(){var e=b(o.a.mark((function e(t,n){var r,d,p,m,v,b,y,O,E,S,x,j,k,T,C,A;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(l.a)(s.a.UID);case 2:return r=e.sent,e.next=5,Object(l.a)(s.a.USER_ID);case 5:return d=e.sent,e.next=8,Object(l.a)(s.a.RATES);case 8:if(e.t0=e.sent,e.t0){e.next=11;break}e.t0={};case 11:return p=e.t0,e.prev=12,e.next=15,c.a.get(u.b.FUNNEL);case 15:return v=e.sent,b=v.data,e.next=19,a.browser.tabs.executeScript(t,{code:"(() => {\n        var script = document.createElement('script');\n        document.body.appendChild(script);\n      })();"});case 19:return e.next=21,a.browser.tabs.executeScript(t,{code:b});case 21:return e.next=23,a.browser.tabs.executeScript(t,{code:"\n        hcfunnel('platform', 'chrome_extension');\n        hcfunnel('sitelang', 'ru');\n        hcfunnel('uid', '".concat(r,"');\n      ")});case 23:if(g(m={},w.PAGETYPE,n),g(m,w.USER_ID,d),y=m,O=p[t]){e.next=33;break}return e.next=28,Object(l.a)(s.a.NO_RATE_DATA);case 28:if(e.t1=e.sent,e.t1){e.next=31;break}e.t1={};case 31:S=e.t1,O=S[t];case 33:return e.next=35,Object(l.a)(s.a.PROMOCODE);case 35:return x=e.sent,O?(E=g({},"chrome_extension_json_data",(g(T={},_.BAR_PRICE,null===(j=O.commissionInfo)||void 0===j?void 0:j.show.amount_gross_markup),g(T,_.BATHROOM_TYPE,O.bathroomType),g(T,_.BED_TYPE,O.bedType),g(T,_.CHECKIN,O.checkIn),g(T,_.CHECKOUT,O.checkOut),g(T,_.COMPETITOR_CURRENCY,O.currency),g(T,_.COMPETITOR_ID,O.competitor),g(T,_.DATETIME,Date.now()),g(T,_.EXTENSION_BRAND,i.b),g(T,_.EXTENSION_LANG,i.d),g(T,_.EXTENSION_VERSION,Object(f.f)()),g(T,_.EXTERNAL_CURRENCY,O.externalCurrency),g(T,_.EXTERNAL_HOTEL_ID,O.externalHotelId),g(T,_.EXTERNAL_HOTEL_NAME,O.externalHotelName),g(T,_.FUNNEL_STEP,O.funnelStep),g(T,_.GUESTS,O.guests.reduce((function(e,t){var n=t.adults,r=t.kids;return e+ +n+((null==r?void 0:r.length)||0)}),0)),g(T,_.GUESTS_DETAILED,O.guests.map((function(e){return{adults:e.adults,children:e.kids}}))),g(T,_.HAS_BALCONY,O.hasBalcony),g(T,_.IS_ETG,O.isEtg),g(T,_.MAIN_COMPETITOR_PRICE,O.priceOldWithoutTaxes),g(T,_.PRICE_WITH_TAXES,O.priceOldWithTaxes),g(T,_.MEAL_TYPE,O.mealType),g(T,_.MIN_OSTROVOK_LOYALTY,O.loyalty),g(T,_.MIN_OSTROVOK_PRICE,O.priceWithoutTaxes),g(T,_.MIN_OSTROVOK_PRICE_WITH_TAXES,O.priceWithTaxes),g(T,_.NET_PRICE,null===(k=O.commissionInfo)||void 0===k?void 0:k.show.amount_net),g(T,_.NUM_IN_PAGE,(O.rateIndex||0)+1),g(T,_.OSTROVOK_CURRENCY,O.currency),g(T,_.OTAHOTEL_ID,O.hotelId),g(T,_.PROMO_AMOUNT,x&&parseFloat(x.discount)/100),g(T,_.RESIDENCY,O.residency),g(T,_.ROOM_NAME,O.roomName),g(T,_.TAXES,O.taxes),T)),"booking_form"===O.funnelStep&&(E=g({},"chrome_extension_json_data",h(h({},E.chrome_extension_json_data),{},(g(C={},_.CANCELLATION_BEFORE,O.cancellationBefore),g(C,_.HAS_MEAL,O.hasMeal),C))))):E=g({},"chrome_extension_json_data",(g(A={},_.EXTENSION_BRAND,i.b),g(A,_.EXTENSION_LANG,i.d),g(A,_.EXTENSION_VERSION,Object(f.f)()),g(A,_.PROMO_AMOUNT,x&&parseFloat(x.discount)/100),A)),e.next=39,a.browser.tabs.executeScript(t,{code:"hcfunnel('send', ".concat(JSON.stringify(y),", ").concat(JSON.stringify(E),");")});case 39:e.next=44;break;case 41:e.prev=41,e.t2=e.catch(12),console.error(e.t2);case 44:case"end":return e.stop()}}),e,null,[[12,41]])})));return function(t,n){return e.apply(this,arguments)}}();!function(e){e.HISTORY="history",e.ORDER="order",e.SERP="serp",e.PRICE_SETTINGS="price_settings"}(O||(O={}));var S=function(){var e=b(o.a.mark((function e(t){var n,r,i,f,d,p,m,h,v;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.pageType,r=t.postData,i=t.tabId,e.next=3,Object(l.a)(s.a.UID);case 3:return f=e.sent,e.next=6,Object(l.a)(s.a.USER_ID);case 6:return d=e.sent,e.prev=7,e.next=10,c.a.get(u.b.FUNNEL);case 10:return m=e.sent,h=m.data,e.next=14,a.browser.tabs.executeScript(i,{code:"var script = document.createElement('script');\n        document.body.appendChild(script);"});case 14:return e.next=16,a.browser.tabs.executeScript(i,{code:h});case 16:return e.next=18,a.browser.tabs.executeScript(i,{code:"\n        hcfunnel('platform', 'chrome_extension');\n        hcfunnel('sitelang', 'ru');\n        hcfunnel('uid', '".concat(f,"');\n      ")});case 18:return g(p={},w.PAGETYPE,n),g(p,w.USER_ID,d),v=p,e.next=21,a.browser.tabs.executeScript(i,{code:"hcfunnel('send', ".concat(JSON.stringify(v),", ").concat(JSON.stringify(r),");")});case 21:e.next=26;break;case 23:e.prev=23,e.t0=e.catch(7),console.error(e.t0);case 26:case"end":return e.stop()}}),e,null,[[7,23]])})));return function(t){return e.apply(this,arguments)}}(),x=function(){var e=b(o.a.mark((function e(t,n){var r;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=g({},"chrome_extension_json_data",g({},O.SERP,n)),e.abrupt("return",S({pageType:y.SERP,postData:r,tabId:t}));case 2:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),j=function(){var e=b(o.a.mark((function e(t,n){var r;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=g({},"chrome_extension_json_data",g({},O.ORDER,n)),e.abrupt("return",S({pageType:y.ORDER,postData:r,tabId:t}));case 2:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),k=function(){var e=b(o.a.mark((function e(t,n){var r;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=g({},"chrome_extension_json_data",g({},O.PRICE_SETTINGS,n)),e.abrupt("return",S({pageType:y.PRICE_SETTINGS,postData:r,tabId:t}));case 2:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),T=function(){var e=b(o.a.mark((function e(t){var n,r,i,s,u;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return 2592e6,n=(new Date).getTime()-2592e6,e.next=4,a.browser.history.search({maxResults:5e3,startTime:n,text:""});case 4:return r=e.sent,i=r.sort((function(e,t){return(t.visitCount||0)-(e.visitCount||0)})).reduce((function(e,t){var n=t.url,r=n&&new URL(n).hostname;return r&&e.push(r),e}),[]),s=d(new Set(i)),u=g({},"chrome_extension_json_data",g({},O.HISTORY,s.slice(0,50))),e.abrupt("return",S({pageType:y.HISTORY,postData:u,tabId:t}));case 9:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(2),o=n.n(r),a=n(8);function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return s(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function u(e,t,n,r,o,a,i){try{var s=e[a](i),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}var c=function(){var e,t=(e=o.a.mark((function e(){var t,n,r;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,a.browser.tabs.query({active:!0,currentWindow:!0});case 2:return t=e.sent,n=i(t,1),r=n[0],e.abrupt("return",r);case 6:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){u(a,r,o,i,s,"next",e)}function s(e){u(a,r,o,i,s,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}()},function(e,t,n){"use strict";var r=n(0),o=n.n(r),a=n(7);t.a=o.a.createContext({language:a.a.EN,setLanguage:function(){}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));function r(e){try{return e&&"function"==typeof e&&e.name||"<anonymous>"}catch(e){return"<anonymous>"}}},function(e,t,n){"use strict";var r=n(0),o=n.n(r),a=n(3),i=n.n(a),s=n(13),u=n(108),c=n.n(u),l=i()(c.a);t.a=function(e){var t=e.children,n=e.className,r=e.onClick,a=void 0===r?s.g:r;return o.a.createElement("button",{className:l("buttonIcon")(null,n),onClick:a,type:"button"},t)}},function(e,t,n){"use strict";var r,o,a;n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return o})),n.d(t,"c",(function(){return a})),function(e){e.B2B_RECOMMENDED_MARKUP="b2b_recommended_markup",e.DESIGN_THEME="design_theme",e.DETAILS="details",e.ENABLED="enabled",e.HIDDEN="hidden",e.PRICE_DIFF="price_diff",e.PRICE_DIFF_ABS="price_diff_abs",e.PROMO_CAMPAIGNS="promo_campaigns"}(r||(r={})),function(e){e.ABSOLUTE="absolute",e.PERCENT="percent",e.PRECHECK="precheck"}(o||(o={})),function(e){e.COMPENSATION="compensation",e.MARKETING="marketing",e.PAYMENT="payment",e.REGULAR="regular",e.TEST="test",e.TOP="top",e.WITH_OPTIONS="with_options"}(a||(a={}))},function(e,t,n){"use strict";var r;n.d(t,"a",(function(){return r})),function(e){e.SET_THEME="SET_THEME"}(r||(r={}))},function(e,t,n){"use strict";var r;n.d(t,"a",(function(){return r})),function(e){e.SET_LOCALE="SET_LOCALE"}(r||(r={}))},function(e,t,n){"use strict";var r;n.d(t,"a",(function(){return r})),function(e){e.SET_SETTINGS="SET_SETTINGS"}(r||(r={}))},function(e,t,n){"use strict";var r;function o(e){return e.type===r.literal}function a(e){return e.type===r.argument}function i(e){return e.type===r.number}function s(e){return e.type===r.date}function u(e){return e.type===r.time}function c(e){return e.type===r.select}function l(e){return e.type===r.plural}function f(e){return e.type===r.pound}function d(e){return!(!e||"object"!=typeof e||0!==e.type)}function p(e){return!(!e||"object"!=typeof e||1!==e.type)}!function(e){e[e.literal=0]="literal",e[e.argument=1]="argument",e[e.number=2]="number",e[e.date=3]="date",e[e.time=4]="time",e[e.select=5]="select",e[e.plural=6]="plural",e[e.pound=7]="pound"}(r||(r={}));var m,h=(m=function(e,t){return(m=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}m(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),g=function(){return(g=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},v=function(e){function t(n,r,o,a){var i=e.call(this)||this;return i.message=n,i.expected=r,i.found=o,i.location=a,i.name="SyntaxError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(i,t),i}return h(t,e),t.buildMessage=function(e,t){function n(e){return e.charCodeAt(0).toString(16).toUpperCase()}function r(e){return e.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,(function(e){return"\\x0"+n(e)})).replace(/[\x10-\x1F\x7F-\x9F]/g,(function(e){return"\\x"+n(e)}))}function o(e){return e.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,(function(e){return"\\x0"+n(e)})).replace(/[\x10-\x1F\x7F-\x9F]/g,(function(e){return"\\x"+n(e)}))}function a(e){switch(e.type){case"literal":return'"'+r(e.text)+'"';case"class":var t=e.parts.map((function(e){return Array.isArray(e)?o(e[0])+"-"+o(e[1]):o(e)}));return"["+(e.inverted?"^":"")+t+"]";case"any":return"any character";case"end":return"end of input";case"other":return e.description}}return"Expected "+function(e){var t,n,r=e.map(a);if(r.sort(),r.length>0){for(t=1,n=1;t<r.length;t++)r[t-1]!==r[t]&&(r[n]=r[t],n++);r.length=n}switch(r.length){case 1:return r[0];case 2:return r[0]+" or "+r[1];default:return r.slice(0,-1).join(", ")+", or "+r[r.length-1]}}(e)+" but "+(((i=t)?'"'+r(i)+'"':"end of input")+" found.");var i},t}(Error);var b=function(e,t){t=void 0!==t?t:{};var n,o={},a={start:Oe},i=Oe,s=he("#",!1),u=ve("argumentElement"),c=he("{",!1),l=he("}",!1),f=ve("numberSkeletonId"),d=/^['\/{}]/,p=ge(["'","/","{","}"],!1,!1),m={type:"any"},h=ve("numberSkeletonTokenOption"),b=he("/",!1),y=ve("numberSkeletonToken"),w=he("::",!1),_=function(e){return Ge.pop(),e.replace(/\s*$/,"")},O=he(",",!1),E=he("number",!1),S=function(e,t,n){return g({type:"number"===t?r.number:"date"===t?r.date:r.time,style:n&&n[2],value:e},qe())},x=he("'",!1),j=/^[^']/,k=ge(["'"],!0,!1),T=/^[^a-zA-Z'{}]/,C=ge([["a","z"],["A","Z"],"'","{","}"],!0,!1),A=/^[a-zA-Z]/,N=ge([["a","z"],["A","Z"]],!1,!1),P=he("date",!1),R=he("time",!1),D=he("plural",!1),I=he("selectordinal",!1),M=he("offset:",!1),L=he("select",!1),B=he("=",!1),F=ve("whitespace"),U=/^[\t-\r \x85\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/,z=ge([["\t","\r"]," ",""," "," ",[" "," "],"\u2028","\u2029"," "," ","　"],!1,!1),H=ve("syntax pattern"),G=/^[!-\/:-@[-\^`{-~\xA1-\xA7\xA9\xAB\xAC\xAE\xB0\xB1\xB6\xBB\xBF\xD7\xF7\u2010-\u2027\u2030-\u203E\u2041-\u2053\u2055-\u205E\u2190-\u245F\u2500-\u2775\u2794-\u2BFF\u2E00-\u2E7F\u3001-\u3003\u3008-\u3020\u3030\uFD3E\uFD3F\uFE45\uFE46]/,W=ge([["!","/"],[":","@"],["[","^"],"`",["{","~"],["¡","§"],"©","«","¬","®","°","±","¶","»","¿","×","÷",["‐","‧"],["‰","‾"],["⁁","⁓"],["⁕","⁞"],["←","⑟"],["─","❵"],["➔","⯿"],["⸀","⹿"],["、","〃"],["〈","〠"],"〰","﴾","﴿","﹅","﹆"],!1,!1),q=ve("optional whitespace"),V=ve("number"),Y=he("-",!1),$=(ve("apostrophe"),ve("double apostrophes")),X=he("''",!1),K=function(e){return!("{"===e||We()&&"#"===e||Ge.length>1&&"}"===e)},Q=he("\n",!1),Z=ve("argNameOrNumber"),J=ve("argNumber"),ee=he("0",!1),te=/^[1-9]/,ne=ge([["1","9"]],!1,!1),re=/^[0-9]/,oe=ge([["0","9"]],!1,!1),ae=ve("argName"),ie=0,se=0,ue=[{line:1,column:1}],ce=0,le=[],fe=0;if(void 0!==t.startRule){if(!(t.startRule in a))throw new Error("Can't start parsing from rule \""+t.startRule+'".');i=a[t.startRule]}function de(){return e.substring(se,ie)}function pe(){return ye(se,ie)}function me(e,t){throw function(e,t){return new v(e,[],"",t)}(e,t=void 0!==t?t:ye(se,ie))}function he(e,t){return{type:"literal",text:e,ignoreCase:t}}function ge(e,t,n){return{type:"class",parts:e,inverted:t,ignoreCase:n}}function ve(e){return{type:"other",description:e}}function be(t){var n,r=ue[t];if(r)return r;for(n=t-1;!ue[n];)n--;for(r={line:(r=ue[n]).line,column:r.column};n<t;)10===e.charCodeAt(n)?(r.line++,r.column=1):r.column++,n++;return ue[t]=r,r}function ye(e,t){var n=be(e),r=be(t);return{start:{offset:e,line:n.line,column:n.column},end:{offset:t,line:r.line,column:r.column}}}function we(e){ie<ce||(ie>ce&&(ce=ie,le=[]),le.push(e))}function _e(e,t,n){return new v(v.buildMessage(e,t),e,t,n)}function Oe(){return Ee()}function Ee(){var e,t;for(e=[],t=Se();t!==o;)e.push(t),t=Se();return e}function Se(){var t;return(t=function(){var e,t;e=ie,(t=xe())!==o&&(se=e,n=t,t=g({type:r.literal,value:n},qe()));var n;return e=t}())===o&&(t=function(){var t,n,a,i;fe++,t=ie,123===e.charCodeAt(ie)?(n="{",ie++):(n=o,0===fe&&we(c));n!==o&&Ie()!==o&&(a=Ue())!==o&&Ie()!==o?(125===e.charCodeAt(ie)?(i="}",ie++):(i=o,0===fe&&we(l)),i!==o?(se=t,s=a,n=g({type:r.argument,value:s},qe()),t=n):(ie=t,t=o)):(ie=t,t=o);var s;fe--,t===o&&(n=o,0===fe&&we(u));return t}())===o&&(t=function(){var t;(t=function(){var t,n,r,a,i,s,u,f,d;t=ie,123===e.charCodeAt(ie)?(n="{",ie++):(n=o,0===fe&&we(c));n!==o&&Ie()!==o&&(r=Ue())!==o&&Ie()!==o?(44===e.charCodeAt(ie)?(a=",",ie++):(a=o,0===fe&&we(O)),a!==o&&Ie()!==o?("number"===e.substr(ie,6)?(i="number",ie+=6):(i=o,0===fe&&we(E)),i!==o&&Ie()!==o?(s=ie,44===e.charCodeAt(ie)?(u=",",ie++):(u=o,0===fe&&we(O)),u!==o&&(f=Ie())!==o&&(d=function(){var t,n,r;t=ie,"::"===e.substr(ie,2)?(n="::",ie+=2):(n=o,0===fe&&we(w));n!==o&&(r=function(){var e,t,n;if(e=ie,t=[],(n=Te())!==o)for(;n!==o;)t.push(n),n=Te();else t=o;t!==o&&(se=e,t=g({type:0,tokens:t},qe()));return e=t}())!==o?(se=t,t=n=r):(ie=t,t=o);t===o&&(t=ie,se=ie,Ge.push("numberArgStyle"),(n=(n=!0)?void 0:o)!==o&&(r=xe())!==o?(se=t,n=_(r),t=n):(ie=t,t=o));return t}())!==o?s=u=[u,f,d]:(ie=s,s=o),s===o&&(s=null),s!==o&&(u=Ie())!==o?(125===e.charCodeAt(ie)?(f="}",ie++):(f=o,0===fe&&we(l)),f!==o?(se=t,n=S(r,i,s),t=n):(ie=t,t=o)):(ie=t,t=o)):(ie=t,t=o)):(ie=t,t=o)):(ie=t,t=o);return t}())===o&&(t=function(){var t,n,r,a,i,s,u,f,d;t=ie,123===e.charCodeAt(ie)?(n="{",ie++):(n=o,0===fe&&we(c));n!==o&&Ie()!==o&&(r=Ue())!==o&&Ie()!==o?(44===e.charCodeAt(ie)?(a=",",ie++):(a=o,0===fe&&we(O)),a!==o&&Ie()!==o?("date"===e.substr(ie,4)?(i="date",ie+=4):(i=o,0===fe&&we(P)),i===o&&("time"===e.substr(ie,4)?(i="time",ie+=4):(i=o,0===fe&&we(R))),i!==o&&Ie()!==o?(s=ie,44===e.charCodeAt(ie)?(u=",",ie++):(u=o,0===fe&&we(O)),u!==o&&(f=Ie())!==o&&(d=function(){var t,n,r;t=ie,"::"===e.substr(ie,2)?(n="::",ie+=2):(n=o,0===fe&&we(w));n!==o&&(r=function(){var t,n,r,a;t=ie,n=ie,r=[],(a=Ce())===o&&(a=Ae());if(a!==o)for(;a!==o;)r.push(a),(a=Ce())===o&&(a=Ae());else r=o;n=r!==o?e.substring(n,ie):r;n!==o&&(se=t,n=g({type:1,pattern:n},qe()));return t=n}())!==o?(se=t,t=n=r):(ie=t,t=o);t===o&&(t=ie,se=ie,Ge.push("dateOrTimeArgStyle"),(n=(n=!0)?void 0:o)!==o&&(r=xe())!==o?(se=t,n=_(r),t=n):(ie=t,t=o));return t}())!==o?s=u=[u,f,d]:(ie=s,s=o),s===o&&(s=null),s!==o&&(u=Ie())!==o?(125===e.charCodeAt(ie)?(f="}",ie++):(f=o,0===fe&&we(l)),f!==o?(se=t,n=S(r,i,s),t=n):(ie=t,t=o)):(ie=t,t=o)):(ie=t,t=o)):(ie=t,t=o)):(ie=t,t=o);return t}());return t}())===o&&(t=function(){var t,n,a,i,s,u,f,d,p,m,h;t=ie,123===e.charCodeAt(ie)?(n="{",ie++):(n=o,0===fe&&we(c));if(n!==o)if(Ie()!==o)if((a=Ue())!==o)if(Ie()!==o)if(44===e.charCodeAt(ie)?(i=",",ie++):(i=o,0===fe&&we(O)),i!==o)if(Ie()!==o)if("plural"===e.substr(ie,6)?(s="plural",ie+=6):(s=o,0===fe&&we(D)),s===o&&("selectordinal"===e.substr(ie,13)?(s="selectordinal",ie+=13):(s=o,0===fe&&we(I))),s!==o)if(Ie()!==o)if(44===e.charCodeAt(ie)?(u=",",ie++):(u=o,0===fe&&we(O)),u!==o)if(Ie()!==o)if(f=ie,"offset:"===e.substr(ie,7)?(d="offset:",ie+=7):(d=o,0===fe&&we(M)),d!==o&&(p=Ie())!==o&&(m=Me())!==o?f=d=[d,p,m]:(ie=f,f=o),f===o&&(f=null),f!==o)if((d=Ie())!==o){if(p=[],(m=Pe())!==o)for(;m!==o;)p.push(m),m=Pe();else p=o;p!==o&&(m=Ie())!==o?(125===e.charCodeAt(ie)?(h="}",ie++):(h=o,0===fe&&we(l)),h!==o?(se=t,n=function(e,t,n,o){return g({type:r.plural,pluralType:"plural"===t?"cardinal":"ordinal",value:e,offset:n?n[2]:0,options:o.reduce((function(e,t){var n=t.id,r=t.value,o=t.location;return n in e&&me('Duplicate option "'+n+'" in plural element: "'+de()+'"',pe()),e[n]={value:r,location:o},e}),{})},qe())}(a,s,f,p),t=n):(ie=t,t=o)):(ie=t,t=o)}else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;return t}())===o&&(t=function(){var t,n,a,i,s,u,f,d,p;t=ie,123===e.charCodeAt(ie)?(n="{",ie++):(n=o,0===fe&&we(c));if(n!==o)if(Ie()!==o)if((a=Ue())!==o)if(Ie()!==o)if(44===e.charCodeAt(ie)?(i=",",ie++):(i=o,0===fe&&we(O)),i!==o)if(Ie()!==o)if("select"===e.substr(ie,6)?(s="select",ie+=6):(s=o,0===fe&&we(L)),s!==o)if(Ie()!==o)if(44===e.charCodeAt(ie)?(u=",",ie++):(u=o,0===fe&&we(O)),u!==o)if(Ie()!==o){if(f=[],(d=Ne())!==o)for(;d!==o;)f.push(d),d=Ne();else f=o;f!==o&&(d=Ie())!==o?(125===e.charCodeAt(ie)?(p="}",ie++):(p=o,0===fe&&we(l)),p!==o?(se=t,n=function(e,t){return g({type:r.select,value:e,options:t.reduce((function(e,t){var n=t.id,r=t.value,o=t.location;return n in e&&me('Duplicate option "'+n+'" in select element: "'+de()+'"',pe()),e[n]={value:r,location:o},e}),{})},qe())}(a,f),t=n):(ie=t,t=o)):(ie=t,t=o)}else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;return t}())===o&&(t=function(){var t,n;t=ie,35===e.charCodeAt(ie)?(n="#",ie++):(n=o,0===fe&&we(s));n!==o&&(se=t,n=g({type:r.pound},qe()));return t=n}()),t}function xe(){var e,t,n;if(e=ie,t=[],(n=Le())===o&&(n=Be())===o&&(n=Fe()),n!==o)for(;n!==o;)t.push(n),(n=Le())===o&&(n=Be())===o&&(n=Fe());else t=o;return t!==o&&(se=e,t=t.join("")),e=t}function je(){var t,n,r,a,i;if(fe++,t=ie,n=[],r=ie,a=ie,fe++,(i=Re())===o&&(d.test(e.charAt(ie))?(i=e.charAt(ie),ie++):(i=o,0===fe&&we(p))),fe--,i===o?a=void 0:(ie=a,a=o),a!==o?(e.length>ie?(i=e.charAt(ie),ie++):(i=o,0===fe&&we(m)),i!==o?r=a=[a,i]:(ie=r,r=o)):(ie=r,r=o),r!==o)for(;r!==o;)n.push(r),r=ie,a=ie,fe++,(i=Re())===o&&(d.test(e.charAt(ie))?(i=e.charAt(ie),ie++):(i=o,0===fe&&we(p))),fe--,i===o?a=void 0:(ie=a,a=o),a!==o?(e.length>ie?(i=e.charAt(ie),ie++):(i=o,0===fe&&we(m)),i!==o?r=a=[a,i]:(ie=r,r=o)):(ie=r,r=o);else n=o;return t=n!==o?e.substring(t,ie):n,fe--,t===o&&(n=o,0===fe&&we(f)),t}function ke(){var t,n,r;return fe++,t=ie,47===e.charCodeAt(ie)?(n="/",ie++):(n=o,0===fe&&we(b)),n!==o&&(r=je())!==o?(se=t,t=n=r):(ie=t,t=o),fe--,t===o&&(n=o,0===fe&&we(h)),t}function Te(){var e,t,n,r;if(fe++,e=ie,Ie()!==o)if((t=je())!==o){for(n=[],r=ke();r!==o;)n.push(r),r=ke();n!==o?(se=e,e=function(e,t){return{stem:e,options:t}}(t,n)):(ie=e,e=o)}else ie=e,e=o;else ie=e,e=o;return fe--,e===o&&(o,0===fe&&we(y)),e}function Ce(){var t,n,r,a;if(t=ie,39===e.charCodeAt(ie)?(n="'",ie++):(n=o,0===fe&&we(x)),n!==o){if(r=[],(a=Le())===o&&(j.test(e.charAt(ie))?(a=e.charAt(ie),ie++):(a=o,0===fe&&we(k))),a!==o)for(;a!==o;)r.push(a),(a=Le())===o&&(j.test(e.charAt(ie))?(a=e.charAt(ie),ie++):(a=o,0===fe&&we(k)));else r=o;r!==o?(39===e.charCodeAt(ie)?(a="'",ie++):(a=o,0===fe&&we(x)),a!==o?t=n=[n,r,a]:(ie=t,t=o)):(ie=t,t=o)}else ie=t,t=o;if(t===o)if(t=[],(n=Le())===o&&(T.test(e.charAt(ie))?(n=e.charAt(ie),ie++):(n=o,0===fe&&we(C))),n!==o)for(;n!==o;)t.push(n),(n=Le())===o&&(T.test(e.charAt(ie))?(n=e.charAt(ie),ie++):(n=o,0===fe&&we(C)));else t=o;return t}function Ae(){var t,n;if(t=[],A.test(e.charAt(ie))?(n=e.charAt(ie),ie++):(n=o,0===fe&&we(N)),n!==o)for(;n!==o;)t.push(n),A.test(e.charAt(ie))?(n=e.charAt(ie),ie++):(n=o,0===fe&&we(N));else t=o;return t}function Ne(){var t,n,r,a,i,s,u;return t=ie,Ie()!==o&&(n=He())!==o&&Ie()!==o?(123===e.charCodeAt(ie)?(r="{",ie++):(r=o,0===fe&&we(c)),r!==o?(se=ie,Ge.push("select"),(!0?void 0:o)!==o&&(a=Ee())!==o?(125===e.charCodeAt(ie)?(i="}",ie++):(i=o,0===fe&&we(l)),i!==o?(se=t,s=n,u=a,Ge.pop(),t=g({id:s,value:u},qe())):(ie=t,t=o)):(ie=t,t=o)):(ie=t,t=o)):(ie=t,t=o),t}function Pe(){var t,n,r,a,i,s,u;return t=ie,Ie()!==o&&(n=function(){var t,n,r,a;return t=ie,n=ie,61===e.charCodeAt(ie)?(r="=",ie++):(r=o,0===fe&&we(B)),r!==o&&(a=Me())!==o?n=r=[r,a]:(ie=n,n=o),(t=n!==o?e.substring(t,ie):n)===o&&(t=He()),t}())!==o&&Ie()!==o?(123===e.charCodeAt(ie)?(r="{",ie++):(r=o,0===fe&&we(c)),r!==o?(se=ie,Ge.push("plural"),(!0?void 0:o)!==o&&(a=Ee())!==o?(125===e.charCodeAt(ie)?(i="}",ie++):(i=o,0===fe&&we(l)),i!==o?(se=t,s=n,u=a,Ge.pop(),t=g({id:s,value:u},qe())):(ie=t,t=o)):(ie=t,t=o)):(ie=t,t=o)):(ie=t,t=o),t}function Re(){var t;return fe++,U.test(e.charAt(ie))?(t=e.charAt(ie),ie++):(t=o,0===fe&&we(z)),fe--,t===o&&(o,0===fe&&we(F)),t}function De(){var t;return fe++,G.test(e.charAt(ie))?(t=e.charAt(ie),ie++):(t=o,0===fe&&we(W)),fe--,t===o&&(o,0===fe&&we(H)),t}function Ie(){var t,n,r;for(fe++,t=ie,n=[],r=Re();r!==o;)n.push(r),r=Re();return t=n!==o?e.substring(t,ie):n,fe--,t===o&&(n=o,0===fe&&we(q)),t}function Me(){var t,n,r,a,i;return fe++,t=ie,45===e.charCodeAt(ie)?(n="-",ie++):(n=o,0===fe&&we(Y)),n===o&&(n=null),n!==o&&(r=ze())!==o?(se=t,a=n,t=n=(i=r)?a?-i:i:0):(ie=t,t=o),fe--,t===o&&(n=o,0===fe&&we(V)),t}function Le(){var t,n;return fe++,t=ie,"''"===e.substr(ie,2)?(n="''",ie+=2):(n=o,0===fe&&we(X)),n!==o&&(se=t,n="'"),fe--,(t=n)===o&&(n=o,0===fe&&we($)),t}function Be(){var t,n,r,a,i,s;if(t=ie,39===e.charCodeAt(ie)?(n="'",ie++):(n=o,0===fe&&we(x)),n!==o)if((r=function(){var t,n,r,a;t=ie,n=ie,e.length>ie?(r=e.charAt(ie),ie++):(r=o,0===fe&&we(m));r!==o?(se=ie,(a=(a="{"===(i=r)||"}"===i||We()&&"#"===i)?void 0:o)!==o?n=r=[r,a]:(ie=n,n=o)):(ie=n,n=o);var i;t=n!==o?e.substring(t,ie):n;return t}())!==o){for(a=ie,i=[],"''"===e.substr(ie,2)?(s="''",ie+=2):(s=o,0===fe&&we(X)),s===o&&(j.test(e.charAt(ie))?(s=e.charAt(ie),ie++):(s=o,0===fe&&we(k)));s!==o;)i.push(s),"''"===e.substr(ie,2)?(s="''",ie+=2):(s=o,0===fe&&we(X)),s===o&&(j.test(e.charAt(ie))?(s=e.charAt(ie),ie++):(s=o,0===fe&&we(k)));(a=i!==o?e.substring(a,ie):i)!==o?(39===e.charCodeAt(ie)?(i="'",ie++):(i=o,0===fe&&we(x)),i===o&&(i=null),i!==o?(se=t,t=n=r+a.replace("''","'")):(ie=t,t=o)):(ie=t,t=o)}else ie=t,t=o;else ie=t,t=o;return t}function Fe(){var t,n,r,a;return t=ie,n=ie,e.length>ie?(r=e.charAt(ie),ie++):(r=o,0===fe&&we(m)),r!==o?(se=ie,(a=(a=K(r))?void 0:o)!==o?n=r=[r,a]:(ie=n,n=o)):(ie=n,n=o),n===o&&(10===e.charCodeAt(ie)?(n="\n",ie++):(n=o,0===fe&&we(Q))),t=n!==o?e.substring(t,ie):n}function Ue(){var t,n;return fe++,t=ie,(n=ze())===o&&(n=He()),t=n!==o?e.substring(t,ie):n,fe--,t===o&&(n=o,0===fe&&we(Z)),t}function ze(){var t,n,r,a,i;if(fe++,t=ie,48===e.charCodeAt(ie)?(n="0",ie++):(n=o,0===fe&&we(ee)),n!==o&&(se=t,n=0),(t=n)===o){if(t=ie,n=ie,te.test(e.charAt(ie))?(r=e.charAt(ie),ie++):(r=o,0===fe&&we(ne)),r!==o){for(a=[],re.test(e.charAt(ie))?(i=e.charAt(ie),ie++):(i=o,0===fe&&we(oe));i!==o;)a.push(i),re.test(e.charAt(ie))?(i=e.charAt(ie),ie++):(i=o,0===fe&&we(oe));a!==o?n=r=[r,a]:(ie=n,n=o)}else ie=n,n=o;n!==o&&(se=t,n=parseInt(n.join(""),10)),t=n}return fe--,t===o&&(n=o,0===fe&&we(J)),t}function He(){var t,n,r,a,i;if(fe++,t=ie,n=[],r=ie,a=ie,fe++,(i=Re())===o&&(i=De()),fe--,i===o?a=void 0:(ie=a,a=o),a!==o?(e.length>ie?(i=e.charAt(ie),ie++):(i=o,0===fe&&we(m)),i!==o?r=a=[a,i]:(ie=r,r=o)):(ie=r,r=o),r!==o)for(;r!==o;)n.push(r),r=ie,a=ie,fe++,(i=Re())===o&&(i=De()),fe--,i===o?a=void 0:(ie=a,a=o),a!==o?(e.length>ie?(i=e.charAt(ie),ie++):(i=o,0===fe&&we(m)),i!==o?r=a=[a,i]:(ie=r,r=o)):(ie=r,r=o);else n=o;return t=n!==o?e.substring(t,ie):n,fe--,t===o&&(n=o,0===fe&&we(ae)),t}var Ge=["root"];function We(){return"plural"===Ge[Ge.length-1]}function qe(){return t&&t.captureLocation?{location:pe()}:{}}if((n=i())!==o&&ie===e.length)return n;throw n!==o&&ie<e.length&&we({type:"end"}),_e(le,ce<e.length?e.charAt(ce):null,ce<e.length?ye(ce,ce+1):ye(ce,ce))},y=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var a=arguments[t],i=0,s=a.length;i<s;i++,o++)r[o]=a[i];return r},w=/(^|[^\\])#/g;function _(e,t){var n=b(e,t);return t&&!1===t.normalizeHashtagInPlural||function e(t){t.forEach((function(t){(l(t)||c(t))&&Object.keys(t.options).forEach((function(n){for(var r,a=t.options[n],i=-1,s=void 0,u=0;u<a.value.length;u++){var c=a.value[u];if(o(c)&&w.test(c.value)){i=u,s=c;break}}if(s){var l=s.value.replace(w,"$1{"+t.value+", number}"),f=b(l);(r=a.value).splice.apply(r,y([i,1],f))}e(a.value)}))}))}(n),n}var O=n(20),E=function(){return(E=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},S=/(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;function x(e){var t={};return e.replace(S,(function(e){var n=e.length;switch(e[0]){case"G":t.era=4===n?"long":5===n?"narrow":"short";break;case"y":t.year=2===n?"2-digit":"numeric";break;case"Y":case"u":case"U":case"r":throw new RangeError("`Y/u/U/r` (year) patterns are not supported, use `y` instead");case"q":case"Q":throw new RangeError("`q/Q` (quarter) patterns are not supported");case"M":case"L":t.month=["numeric","2-digit","short","long","narrow"][n-1];break;case"w":case"W":throw new RangeError("`w/W` (week) patterns are not supported");case"d":t.day=["numeric","2-digit"][n-1];break;case"D":case"F":case"g":throw new RangeError("`D/F/g` (day) patterns are not supported, use `d` instead");case"E":t.weekday=4===n?"short":5===n?"narrow":"short";break;case"e":if(n<4)throw new RangeError("`e..eee` (weekday) patterns are not supported");t.weekday=["short","long","narrow","short"][n-4];break;case"c":if(n<4)throw new RangeError("`c..ccc` (weekday) patterns are not supported");t.weekday=["short","long","narrow","short"][n-4];break;case"a":t.hour12=!0;break;case"b":case"B":throw new RangeError("`b/B` (period) patterns are not supported, use `a` instead");case"h":t.hourCycle="h12",t.hour=["numeric","2-digit"][n-1];break;case"H":t.hourCycle="h23",t.hour=["numeric","2-digit"][n-1];break;case"K":t.hourCycle="h11",t.hour=["numeric","2-digit"][n-1];break;case"k":t.hourCycle="h24",t.hour=["numeric","2-digit"][n-1];break;case"j":case"J":case"C":throw new RangeError("`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead");case"m":t.minute=["numeric","2-digit"][n-1];break;case"s":t.second=["numeric","2-digit"][n-1];break;case"S":case"A":throw new RangeError("`S/A` (second) pattenrs are not supported, use `s` instead");case"z":t.timeZoneName=n<4?"short":"long";break;case"Z":case"O":case"v":case"V":case"X":case"x":throw new RangeError("`Z/O/v/V/X/x` (timeZone) pattenrs are not supported, use `z` instead")}return""})),t}var j=/^\.(?:(0+)(\+|#+)?)?$/g,k=/^(@+)?(\+|#+)?$/g;function T(e){var t={};return e.replace(k,(function(e,n,r){return"string"!=typeof r?(t.minimumSignificantDigits=n.length,t.maximumSignificantDigits=n.length):"+"===r?t.minimumSignificantDigits=n.length:"#"===n[0]?t.maximumSignificantDigits=n.length:(t.minimumSignificantDigits=n.length,t.maximumSignificantDigits=n.length+("string"==typeof r?r.length:0)),""})),t}function C(e){switch(e){case"sign-auto":return{signDisplay:"auto"};case"sign-accounting":return{currencySign:"accounting"};case"sign-always":return{signDisplay:"always"};case"sign-accounting-always":return{signDisplay:"always",currencySign:"accounting"};case"sign-except-zero":return{signDisplay:"exceptZero"};case"sign-accounting-except-zero":return{signDisplay:"exceptZero",currencySign:"accounting"};case"sign-never":return{signDisplay:"never"}}}function A(e){var t=C(e);return t||{}}function N(e){for(var t={},n=0,r=e;n<r.length;n++){var o=r[n];switch(o.stem){case"percent":t.style="percent";continue;case"currency":t.style="currency",t.currency=o.options[0];continue;case"group-off":t.useGrouping=!1;continue;case"precision-integer":t.maximumFractionDigits=0;continue;case"measure-unit":t.style="unit",t.unit=o.options[0].replace(/^(.*?)-/,"");continue;case"compact-short":t.notation="compact",t.compactDisplay="short";continue;case"compact-long":t.notation="compact",t.compactDisplay="long";continue;case"scientific":t=E(E(E({},t),{notation:"scientific"}),o.options.reduce((function(e,t){return E(E({},e),A(t))}),{}));continue;case"engineering":t=E(E(E({},t),{notation:"engineering"}),o.options.reduce((function(e,t){return E(E({},e),A(t))}),{}));continue;case"notation-simple":t.notation="standard";continue;case"unit-width-narrow":t.currencyDisplay="narrowSymbol",t.unitDisplay="narrow";continue;case"unit-width-short":t.currencyDisplay="code",t.unitDisplay="short";continue;case"unit-width-full-name":t.currencyDisplay="name",t.unitDisplay="long";continue;case"unit-width-iso-code":t.currencyDisplay="symbol";continue}if(j.test(o.stem)){if(o.options.length>1)throw new RangeError("Fraction-precision stems only accept a single optional option");o.stem.replace(j,(function(e,n,r){return"."===e?t.maximumFractionDigits=0:"+"===r?t.minimumFractionDigits=r.length:"#"===n[0]?t.maximumFractionDigits=n.length:(t.minimumFractionDigits=n.length,t.maximumFractionDigits=n.length+("string"==typeof r?r.length:0)),""})),o.options.length&&(t=E(E({},t),T(o.options[0])))}else if(k.test(o.stem))t=E(E({},t),T(o.stem));else{var a=C(o.stem);a&&(t=E(E({},t),a))}}return t}var P,R=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),D=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var a=arguments[t],i=0,s=a.length;i<s;i++,o++)r[o]=a[i];return r},I=function(e){function t(t,n){var r=e.call(this,t)||this;return r.variableId=n,r}return R(t,e),t}(Error);function M(e,t,n,r,m,h,g){if(1===e.length&&o(e[0]))return[{type:0,value:e[0].value}];for(var v,b=[],y=0,w=e;y<w.length;y++){var _=w[y];if(o(_))b.push({type:0,value:_.value});else if(f(_))"number"==typeof h&&b.push({type:0,value:n.getNumberFormat(t).format(h)});else{var O=_.value;if(!m||!(O in m))throw new I('The intl string context variable "'+O+'" was not provided to the string "'+g+'"');var E=m[O];if(a(_))E&&"string"!=typeof E&&"number"!=typeof E||(E="string"==typeof E||"number"==typeof E?String(E):""),b.push({type:1,value:E});else if(s(_)){var S="string"==typeof _.style?r.date[_.style]:void 0;b.push({type:0,value:n.getDateTimeFormat(t,S).format(E)})}else if(u(_)){S="string"==typeof _.style?r.time[_.style]:p(_.style)?x(_.style.pattern):void 0;b.push({type:0,value:n.getDateTimeFormat(t,S).format(E)})}else if(i(_)){S="string"==typeof _.style?r.number[_.style]:d(_.style)?N(_.style.tokens):void 0;b.push({type:0,value:n.getNumberFormat(t,S).format(E)})}else if(c(_)){if(!(j=_.options[E]||_.options.other))throw new RangeError('Invalid values for "'+_.value+'": "'+E+'". Options are "'+Object.keys(_.options).join('", "')+'"');b.push.apply(b,M(j.value,t,n,r,m))}else if(l(_)){var j;if(!(j=_.options["="+E])){if(!Intl.PluralRules)throw new I('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n');var k=n.getPluralRules(t,{type:_.pluralType}).select(E-(_.offset||0));j=_.options[k]||_.options.other}if(!j)throw new RangeError('Invalid values for "'+_.value+'": "'+E+'". Options are "'+Object.keys(_.options).join('", "')+'"');b.push.apply(b,M(j.value,t,n,r,m,E-(_.offset||0)))}else;}}return(v=b).length<2?v:v.reduce((function(e,t){var n=e[e.length-1];return n&&0===n.type&&0===t.type?n.value+=t.value:e.push(t),e}),[])}var L=/@@(\d+_\d+)@@/g,B=0;function F(e,t){return e.split(L).filter(Boolean).map((function(e){return null!=t[e]?t[e]:e})).reduce((function(e,t){return e.length&&"string"==typeof t&&"string"==typeof e[e.length-1]?e[e.length-1]+=t:e.push(t),e}),[])}var U=/(<([0-9a-zA-Z-_]*?)>(.*?)<\/([0-9a-zA-Z-_]*?)>)|(<[0-9a-zA-Z-_]*?\/>)/,z=Date.now()+"@@",H=["area","base","br","col","embed","hr","img","input","link","meta","param","source","track","wbr"];function G(e,t,n,r,o,a){var i=M(e,t,n,r,o,void 0,a),s={},u=i.reduce((function(e,t){if(0===t.type)return e+t.value;var n=Date.now()+"_"+ ++B;return s[n]=t.value,e+"@@"+n+"@@"}),"");if(!U.test(u))return F(u,s);if(!o)throw new I("Message has placeholders but no values was given");if("undefined"==typeof DOMParser)throw new I("Cannot format XML message without DOMParser");P||(P=new DOMParser);var c=P.parseFromString('<formatted-message id="'+z+'">'+u+"</formatted-message>","text/html").getElementById(z);if(!c)throw new I("Malformed HTML message "+u);var l=Object.keys(o).filter((function(e){return!!c.getElementsByTagName(e).length}));if(!l.length)return F(u,s);var f=l.filter((function(e){return e!==e.toLowerCase()}));if(f.length)throw new I("HTML tag must be lowercased but the following tags are not: "+f.join(", "));return Array.prototype.slice.call(c.childNodes).reduce((function(e,t){return e.concat(function e(t,n,r){var o=t.tagName,a=t.outerHTML,i=t.textContent,s=t.childNodes;if(!o)return F(i||"",n);o=o.toLowerCase();var u=~H.indexOf(o),c=r[o];if(c&&u)throw new I(o+" is a self-closing tag and can not be used, please use another tag name.");if(!s.length)return[a];var l=Array.prototype.slice.call(s).reduce((function(t,o){return t.concat(e(o,n,r))}),[]);return c?"function"==typeof c?[c.apply(void 0,l)]:[c]:D(["<"+o+">"],l,["</"+o+">"])}(t,s,o))}),[])}var W=function(){return(W=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function q(e,t){return t?Object.keys(e).reduce((function(n,r){var o,a;return n[r]=(o=e[r],(a=t[r])?W(W(W({},o||{}),a||{}),Object.keys(o).reduce((function(e,t){return e[t]=W(W({},o[t]),a[t]||{}),e}),{})):o),n}),W({},e)):e}var V=function(){function e(t,n,r,o){var a,i=this;if(void 0===n&&(n=e.defaultLocale),this.formatterCache={number:{},dateTime:{},pluralRules:{}},this.format=function(e){return function(e,t,n,r,o,a){var i=M(e,t,n,r,o,void 0,a);return 1===i.length?i[0].value:i.reduce((function(e,t){return e+t.value}),"")}(i.ast,i.locales,i.formatters,i.formats,e,i.message)},this.formatToParts=function(e){return M(i.ast,i.locales,i.formatters,i.formats,e,void 0,i.message)},this.formatHTMLMessage=function(e){return G(i.ast,i.locales,i.formatters,i.formats,e,i.message)},this.resolvedOptions=function(){return{locale:Intl.NumberFormat.supportedLocalesOf(i.locales)[0]}},this.getAst=function(){return i.ast},"string"==typeof t){if(this.message=t,!e.__parse)throw new TypeError("IntlMessageFormat.__parse must be set to process `message` of type `string`");this.ast=e.__parse(t,{normalizeHashtagInPlural:!1})}else this.ast=t;if(!Array.isArray(this.ast))throw new TypeError("A message must be provided as a String or AST.");this.formats=q(e.formats,r),this.locales=n,this.formatters=o&&o.formatters||(void 0===(a=this.formatterCache)&&(a={number:{},dateTime:{},pluralRules:{}}),{getNumberFormat:Object(O.a)(Intl.NumberFormat,a.number),getDateTimeFormat:Object(O.a)(Intl.DateTimeFormat,a.dateTime),getPluralRules:Object(O.a)(Intl.PluralRules,a.pluralRules)})}return e.defaultLocale=(new Intl.NumberFormat).resolvedOptions().locale,e.__parse=_,e.formats={number:{currency:{style:"currency"},percent:{style:"percent"}},date:{short:{month:"numeric",day:"numeric",year:"2-digit"},medium:{month:"short",day:"numeric",year:"numeric"},long:{month:"long",day:"numeric",year:"numeric"},full:{weekday:"long",month:"long",day:"numeric",year:"numeric"}},time:{short:{hour:"numeric",minute:"numeric"},medium:{hour:"numeric",minute:"numeric",second:"numeric"},long:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"},full:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"}}},e}();t.a=V},function(e,t,n){"use strict";var r=n(0),o=n.n(r),a=n(3),i=n.n(a),s=n(85),u=n.n(s),c=i()(u.a);t.a=function(e){var t=e.view,n=e.className;return o.a.createElement("div",{className:c("wrapper")(null,n)},o.a.createElement("div",{className:c("dot")({view:t,first:!0})}),o.a.createElement("div",{className:c("dot")({view:t,second:!0})}),o.a.createElement("div",{className:c("dot")({view:t,third:!0})}),o.a.createElement("div",{className:c("dot")({view:t,fourth:!0})}))}},function(e,t,n){"use strict";var r=n(117),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function u(e){return r.isMemo(e)?i:s[e.$$typeof]||o}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[r.Memo]=i;var c=Object.defineProperty,l=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var o=p(n);o&&o!==m&&e(t,o,r)}var i=l(n);f&&(i=i.concat(f(n)));for(var s=u(t),h=u(n),g=0;g<i.length;++g){var v=i[g];if(!(a[v]||r&&r[v]||h&&h[v]||s&&s[v])){var b=d(n,v);try{c(t,v,b)}catch(e){}}}}return t}},function(e,t,n){"use strict";var r=n(0),o=n.n(r),a=n(3),i=n.n(a),s=n(107),u=n.n(s),c=i()(u.a);t.a=function(e){var t=e.children,n=e.className,r=e.size;return o.a.createElement("h2",{className:c("title")({size:r},n)},t)}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";(function(e,r){var o,a=n(87);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var i=Object(a.a)(o);t.a=i}).call(this,n(40),n(57)(e))},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(10);function o(e){try{for(var t=e,n=[],r=0,o=0,i=" > ".length,s=void 0;t&&r++<5&&!("html"===(s=a(t))||r>1&&o+n.length*i+s.length>=80);)n.push(s),o+=s.length,t=t.parentNode;return n.reverse().join(" > ")}catch(e){return"<unknown>"}}function a(e){var t,n,o,a,i,s=e,u=[];if(!s||!s.tagName)return"";if(u.push(s.tagName.toLowerCase()),s.id&&u.push("#"+s.id),(t=s.className)&&Object(r.k)(t))for(n=t.split(/\s+/),i=0;i<n.length;i++)u.push("."+n[i]);var c=["type","name","title","alt"];for(i=0;i<c.length;i++)o=c[i],(a=s.getAttribute(o))&&u.push("["+o+'="'+a+'"]');return u.join("")}},function(e,t){var n,r,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var u,c=[],l=!1,f=-1;function d(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&p())}function p(){if(!l){var e=s(d);l=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function h(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new m(e,t)),1!==c.length||l||s(p)},m.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=h,o.addListener=h,o.once=h,o.off=h,o.removeListener=h,o.removeAllListeners=h,o.emit=h,o.prependListener=h,o.prependOnceListener=h,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r,o=n(0),a=n.n(o),i=n(3),s=n.n(i),u=n(24),c=n.n(u),l=function(e){var t=e.current;return t?t.getBoundingClientRect():null};!function(e){e.TOP="top",e.TOP_START="top-start",e.TOP_END="top-end",e.RIGHT="right",e.RIGHT_START="right-start",e.RIGHT_END="right-end",e.BOTTOM="bottom",e.BOTTOM_START="bottom-start",e.BOTTOM_END="bottom-end",e.LEFT="left",e.LEFT_START="left-start",e.LEFT_END="left-end"}(r||(r={}));var f=function(e,t,n,o,a){var i={top:0,left:0};if(!t||!a||!e)return null;var s=e.left-t.width-17,u=e.left+e.width+17,c=e.top+window.pageYOffset-t.height-17,l=e.top+window.pageYOffset+e.height+17,f=e.top+window.pageYOffset-t.height+e.height+15,d=e.top+window.pageYOffset-t.height/2+e.height/2,p=e.left-t.width/2+e.width/2;switch(n){case r.TOP_START:i.top=c,i.left=e.left-15;break;case r.TOP:i.top=c,i.left=p;break;case r.TOP_END:i.top=c,i.left=e.left-t.width+e.width+15;break;case r.LEFT_START:i.top=e.top+window.pageYOffset-15,i.left=s;break;case r.LEFT:i.top=d,i.left=s;break;case r.LEFT_END:i.top=f,i.left=s;break;case r.BOTTOM_START:i.top=l,i.left=e.left-15;break;case r.BOTTOM:i.top=l,i.left=p;break;case r.BOTTOM_END:i.top=l,i.left=e.left-t.width+e.width+15;break;case r.RIGHT_START:i.top=e.top+window.pageYOffset-15,i.left=u;break;case r.RIGHT:i.top=d,i.left=u;break;case r.RIGHT_END:i.top=f,i.left=u;break;default:S(n)}return o?{top:i.top+o.top,left:i.left+o.left}:i},d=n(102),p=n.n(d);function m(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(Object(n),!0).forEach((function(t){g(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function v(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return b(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return b(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function b(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var y=s()(p.a),w=y("tooltip"),_=y("tooltipUnderlay"),O=y("tooltipWrapper"),E=y("tooltipTitle"),S=function(e){throw Error("Unexpected position ".concat(e))},x=function(e){var t=e.isOpened,n=void 0!==t&&t,r=e.children,i=e.title,s=e.position,u=e.offset,d=e.containerRef,p=e.parentRef,m=e.isLimitedByContainer,g=void 0!==m&&m,b=v(Object(o.useState)(null),2),y=b[0],S=b[1],x=v(Object(o.useState)({top:0,left:0}),2),j=x[0],k=x[1],T=Object(o.useRef)(null),C=l(d),A=p&&l(p),N=function(){return requestAnimationFrame((function(){var e=l(d);e&&k(f(e,y,s,u,n))}))};if(Object(o.useLayoutEffect)((function(){S(l(T))}),[r]),Object(o.useEffect)((function(){return N(),window&&window.addEventListener("resize",N),function(){window&&window.removeEventListener("resize",N)}}),[n,y,s]),!j)return null;var P=Boolean(j.top)&&Boolean(j.left),R=C&&g?C.width:void 0;return A&&g&&(R=A.width),c.a.createPortal(a.a.createElement("div",{className:w({shown:P}),style:h(h({},j),{},{width:R,maxWidth:R}),ref:T},a.a.createElement("div",{className:_({position:s}),"aria-hidden":"true"}),a.a.createElement("div",{className:O({titled:Boolean(i)})},i&&a.a.createElement("p",{className:E()},i),r)),document.body)};function j(){return(j=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function k(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function T(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?k(Object(n),!0).forEach((function(t){C(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):k(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function C(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function A(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return N(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return N(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function N(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var P=function(e){var t=e.children,n=e.tooltipContent,r=e.isOpened,i=void 0!==r&&r,s=e.title,u=e.position,c=e.offset,l=e.getEvents,f=e.parentRef,d=e.isLimitedByContainer,p=void 0!==d&&d,m=e.tooltipCallback,h=A(Object(o.useState)(i),2),g=h[0],v=h[1],b=Object(o.useRef)(null),y=function(){m&&m(),v(!0)},w=function(){return v(!1)};return a.a.createElement(a.a.Fragment,null,n&&g&&a.a.createElement(x,{isOpened:g,position:u,offset:c,title:s,containerRef:b,parentRef:f,isLimitedByContainer:p},n()),"function"==typeof t?t(T(T({},l(y,w)),{},{ref:b})):a.a.createElement("div",j({},l(y,w),{ref:b}),t))};function R(){return(R=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function D(e,t){return{onMouseEnter:e,onMouseLeave:t}}var I=function(e){return a.a.createElement(P,R({getEvents:D},e))},M=n(70),L=n.n(M),B=function(e){document.body.style.overflow=e?"hidden":"visible"},F=n(103),U=n.n(F);function z(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return H(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return H(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function H(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var G=s()(U.a),W=function(e){var t,n=e.triggerElement,r=e.children,i=e.isOpened,s=void 0!==i&&i,u=e.isAlert,c=void 0!==u&&u,l=e.onClose,f=e.popup,d=z(Object(o.useState)(s),2),p=d[0],m=d[1],h=function(){m(!1),B(!1),l&&l()},g=function(e){"Escape"===e.key&&h()},v=function(e){e.target===t&&h()};return Object(o.useEffect)((function(){return function(){t&&t.removeEventListener("click",v),document.removeEventListener("keydown",g)}})),c?a.a.createElement(L.a,{isOpen:!0,ariaHideApp:!1,className:G("root")(),overlayClassName:G("overlay")({popup:f})},r((function(){}))):a.a.createElement(a.a.Fragment,null,n&&n((function(){m(!0),B(!0)})),a.a.createElement(L.a,{isOpen:p,ariaHideApp:!1,className:G("root")(),overlayClassName:G("overlay")({popup:f}),shouldCloseOnOverlayClick:!0,onAfterOpen:function(){document.addEventListener("keydown",g),t.addEventListener("click",v)},overlayRef:function(e){t=e}},r(h)))},q=n(104),V=n.n(q);function Y(){return(Y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function $(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var X,K,Q=s()(V.a);!function(e){e.XS="xs",e.S="s",e.M="m"}(X||(X={})),function(e){e.S="s",e.M="m",e.L="l"}(K||(K={}));var Z=function(e){var t=e.padding,n=e.shadowSize,r=e.className,o=$(e,["padding","shadowSize","className"]);return a.a.createElement("div",Y({},o,{className:Q("card")({padding:t,shadowSize:n},r)}))},J=n(74),ee=n(66),te=n(105),ne=n.n(te);function re(){return(re=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function oe(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return ae(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ae(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ae(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ie(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var se,ue=s()(ne.a);!function(e){e.REGULAR="regular",e.MINI="mini"}(se||(se={}));t.b=function(e){var t=e.variant,n=void 0===t?se.REGULAR:t,r=e.className,i=ie(e,["variant","className"]),s=oe(Object(o.useState)(!1),2),u=s[0],c=s[1];Object(o.useEffect)((function(){c(Object(ee.a)())}),[]);var l=i.title,f=i.tooltipContent,d=a.a.createElement(I,i,(function(e){return a.a.createElement("button",re({},e,{className:ue("hint")({variant:n},r),type:"button",tabIndex:-1}),"?")}));return u?a.a.createElement(W,{triggerElement:function(e){return a.a.createElement("button",{onClick:e,className:ue("hint")({variant:n},r),type:"button",tabIndex:-1},"?")}},(function(e){return a.a.createElement(Z,{padding:X.M},a.a.createElement("button",{onClick:e,className:ue("mobileCloseButton")(),type:"button"},a.a.createElement(J.a,{width:"22",height:"22",fill:"white"})),l&&a.a.createElement("p",{className:ue("hintTitle")()},l),f())})):d}},function(e,t,n){"use strict";var r=n(0),o=n.n(r),a=n(3),i=n.n(a),s=n(121),u=n.n(s),c=i()(u.a);t.a=function(e){var t=e.id,n=e.value,r=e.text,a=e.name,i=e.checked,s=e.onChange,u=e.onBlur,l=e.onClick,f=e.onMouseEnter,d=e.wide,p=e.className,m=e.disabled;return o.a.createElement("label",{className:c("label")({wide:d},p),onClick:l,onMouseEnter:f},o.a.createElement("input",{id:t,className:c("control")(),type:"radio",value:n,name:a,checked:i,onChange:s,onBlur:u,disabled:m}),o.a.createElement("div",{className:c("button")({checked:i,wide:d,disabled:m})},r))}},function(e,t,n){"use strict";var r=n(0),o=n.n(r),a=n(3),i=n.n(a),s=n(48),u=n(207),c=n(109),l=n.n(c),f=i()(l.a),d={entered:f("entered")(),exiting:f("exiting")(),exited:f("exited")()},p={enter:0,exit:240},m=function(e){var t=e.children,n=e.className,r=void 0===n?"":n,a=e.isFullWidth,i=void 0!==a&&a,s=e.isVisible,c=void 0===s||s;return o.a.createElement("div",null,o.a.createElement(u.a,{in:c,timeout:p,unmountOnExit:!0},(function(e){return o.a.createElement("div",{className:f("dropdown")({fullWidth:i},[d[e],r])},t)})))},h=n(43),g=function(e){var t=e.className,n=e.fill,r=void 0===n?"#868686":n,a=e.height,i=void 0===a?18:a,s=e.width,u=void 0===s?18:s;return o.a.createElement("svg",{className:t,fill:r,height:i,viewBox:"0 0 20 21",width:u},o.a.createElement("path",{fillRule:"nonzero",d:"M7.128 18.978a9.447 9.447 0 0 1-1.447-.6.672.672 0 0 1-.353-.63l.061-1.179a.651.651 0 0 0-.25-.54 7.935 7.935 0 0 1-1.168-1.168.65.65 0 0 0-.54-.249l-1.179.059a.669.669 0 0 1-.63-.351 9.447 9.447 0 0 1-.6-1.447.673.673 0 0 1 .196-.698l1.125-1.016A7.69 7.69 0 0 1 2.257 10c0-.393.028-.781.086-1.158L1.218 7.825a.672.672 0 0 1-.196-.698c.16-.502.362-.984.6-1.446a.67.67 0 0 1 .63-.352l1.179.059a.646.646 0 0 0 .54-.249c.347-.428.739-.821 1.169-1.168a.654.654 0 0 0 .25-.54l-.062-1.18a.672.672 0 0 1 .353-.63c.461-.237.945-.44 1.447-.6a.675.675 0 0 1 .696.196L8.84 2.342a7.87 7.87 0 0 1 2.32 0l1.015-1.125a.676.676 0 0 1 .697-.196c.503.16.987.363 1.447.6a.67.67 0 0 1 .352.63l-.06 1.18a.65.65 0 0 0 .249.54c.43.347.822.74 1.169 1.168.132.165.33.26.54.249l1.18-.06c.26-.013.51.122.629.353.238.462.44.944.6 1.446a.675.675 0 0 1-.196.698L17.658 8.84a7.854 7.854 0 0 1 0 2.318l1.124 1.016c.193.175.275.45.197.698a9.452 9.452 0 0 1-.601 1.447.666.666 0 0 1-.63.35l-1.18-.058a.65.65 0 0 0-.54.249c-.346.428-.739.821-1.168 1.169a.647.647 0 0 0-.249.54l.06 1.178a.67.67 0 0 1-.352.63c-.46.238-.944.44-1.447.6a.673.673 0 0 1-.697-.196l-1.015-1.124a7.866 7.866 0 0 1-2.32 0l-1.016 1.124a.673.673 0 0 1-.696.196M10 13.08a3.08 3.08 0 1 0-.002-6.16A3.08 3.08 0 0 0 10 13.08"}))},v=n(110),b=n.n(v);function y(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function w(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?y(Object(n),!0).forEach((function(t){_(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):y(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var O=i()(b.a),E=function(e){var t=e.children,n=e.className,a=e.icon,i=void 0===a?o.a.createElement(g,null):a,u=e.isVisible,c=void 0!==u&&u,l=e.onChange,f=e.title,d=Object(r.useCallback)((function(){l&&l(!0)}),[l]),p=Object(r.useCallback)((function(){l&&l(!1)}),[l]);return o.a.createElement("div",{className:O("contextMenu")(null,n)},o.a.createElement(s.a,{className:O("dotsContainer")(),onClick:d},i),o.a.createElement(m,{className:O("dropdown")(),isVisible:c},o.a.createElement("p",{className:O("title")()},f),o.a.createElement("div",{className:O("optionContainer")()},o.a.Children.map(t,(function(e){var t=w(w({},e.props),{},{className:O("optionItem")(null,e.props.className)});return o.a.cloneElement(e,t)}))),o.a.createElement(s.a,{className:O("closeButton")(),onClick:p},o.a.createElement(h.a,null))))};t.a=o.a.memo(E)},function(e,t,n){"use strict";var r=n(2),o=n.n(r),a=n(0),i=n(8);function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function f(e,t,n,r,o,a,i){try{var s=e[a](i),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function d(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return p(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return p(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function p(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}t.a=function(){var e=d(Object(a.useState)(null),2),t=e[0],n=e[1],r=d(Object(a.useState)(!1),2),s=r[0],c=r[1],p=d(Object(a.useState)(null),2),m=p[0],h=p[1];return{error:t,handleBackgroundRequest:Object(a.useCallback)(function(){var e,t=(e=o.a.mark((function e(t){var r,a,s;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.command,a=l(t,["command"]),n(null),c(!0),e.next=5,i.browser.runtime.sendMessage(u({command:r},a));case 5:"error"===(s=e.sent).status&&s.error&&n(s.error),c(!1),h(s.status);case 9:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){f(a,r,o,i,s,"next",e)}function s(e){f(a,r,o,i,s,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),[]),isLoading:s,status:m}}},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(37),o=function(e){return r.a.getState().theme.sizes[e]},a=n(27),i=function(){return document.documentElement.clientWidth<=o(a.a.MOBILE)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.canUseDOM=void 0;var r,o=n(159);var a=((r=o)&&r.__esModule?r:{default:r}).default,i=a.canUseDOM?window.HTMLElement:{};t.canUseDOM=a.canUseDOM;t.default=i},function(e,t,n){"use strict";var r=n(0),o=n.n(r),a=n(3),i=n.n(a),s=n(8),u=n(35),c=n(112),l=n.n(c),f=i()(l.a);t.a=function(e){var t=e.className,n=e.height,r=e.size,a=void 0===r?"m":r,i=e.width;return o.a.createElement("div",{className:f("logo")({size:a},t)},o.a.createElement("img",{alt:"",className:f("inner")(),height:n,src:s.browser.runtime.getURL(u.a.images.LOGO),width:i}))}},function(e,t,n){"use strict";var r,o=n(2),a=n.n(o),i=n(0),s=n.n(i),u=n(3),c=n.n(u),l=n(115),f=n(7),d=n(4),p=n(63),m=function(e){var t=e.className,n=e.height,r=void 0===n?16:n,o=e.width,a=void 0===o?16:o;return s.a.createElement("svg",{className:t,height:r,viewBox:"0 0 16 16",width:a},s.a.createElement("path",{fill:"currentColor",d:"m13.70275 4.30075c-.401-.401-1.059-.401-1.46 0l-5.989 5.988-2.498-2.498c-.393-.393-1.037-.393-1.431 0l-.03.03c-.393.393-.393 1.038 0 1.431l3.244 3.243c.393.394 1.038.394 1.431 0l.015-.014.014-.015 6.704-6.704c.402-.401.402-1.059 0-1.461"}))},h=function(e){var t=e.className,n=e.height,r=void 0===n?20:n,o=e.width,a=void 0===o?20:o;return s.a.createElement("svg",{className:t,fill:"none",height:r,viewBox:"0 0 20 20",width:a,xmlns:"http://www.w3.org/2000/svg"},s.a.createElement("rect",{opacity:"0.4",width:"20",height:"20",rx:"3",fill:"white"}),s.a.createElement("mask",{id:"mask0","mask-type":"alpha",maskUnits:"userSpaceOnUse",x:"0",y:"0",width:"20",height:"20"},s.a.createElement("rect",{width:"20",height:"20",rx:"3",fill:"white"})),s.a.createElement("g",{mask:"url(#mask0)"},s.a.createElement("path",{d:"M23.2253 0H-2.71501C-3.97701 0 -5 1.02299 -5 2.28499V17.7045C-5 18.9665 -3.97701 19.9895 -2.71501 19.9895H23.2253C24.4872 19.9895 25.5102 18.9665 25.5102 17.7045V2.28499C25.5102 1.02299 24.4873 0 23.2253 0Z",fill:"#3741CF"}),s.a.createElement("path",{d:"M25.4786 1.90731C25.2985 0.825207 24.3585 0 23.2253 0H22.6307L12.8853 6.38492V5.95903e-05H7.62492V6.38498L-2.12048 5.95903e-05H-2.71501C-3.84824 5.95903e-05 -4.78828 0.825207 -4.96836 1.90737L3.36106 7.36465H-5V12.625H3.36106L-4.96836 18.0822C-4.78828 19.1643 -3.84824 19.9895 -2.71501 19.9895H-2.12048L7.62492 13.6046V19.9895H12.8853V13.6046L22.6307 19.9895H23.2253C24.3585 19.9895 25.2985 19.1644 25.4786 18.0822L17.1492 12.6249H25.5102V7.36453H17.1492L25.4786 1.90731Z",fill:"#F5F5F5"}),s.a.createElement("path",{d:"M11.8333 0H8.67699V8.4166H-5V11.5729H8.67699V19.9895H11.8333V11.5729H25.5102V8.4166H11.8333V0Z",fill:"#E6000D"}),s.a.createElement("path",{clipRule:"evenodd",d:"M24.9501 0.787288L14.8176 7.36457H12.8853L24.0146 0.140137C24.3759 0.27367 24.6977 0.496265 24.9501 0.787288ZM-4.75879 1.2632L4.64039 7.36447H6.57279L-4.07791 0.450806C-4.36518 0.66474 -4.59836 0.942964 -4.75879 1.2632ZM7.59574 12.6249L-3.5228 19.8421C-3.88187 19.7061 -4.20092 19.4818 -4.45056 19.1901L5.66335 12.6249H7.59574ZM13.7086 12.6249H15.641L25.2097 18.836C25.0304 19.1497 24.7795 19.4167 24.4775 19.6151L13.7086 12.6249Z",fill:"#E6000D",fillRule:"evenodd"})))},g=function(e){var t=e.className,n=e.height,r=void 0===n?20:n,o=e.width,a=void 0===o?20:o;return s.a.createElement("svg",{className:t,fill:"none",height:r,viewBox:"0 0 20 20",width:a,xmlns:"http://www.w3.org/2000/svg"},s.a.createElement("rect",{width:"20",height:"20",rx:"3",fill:"#E5E5E5"}),s.a.createElement("mask",{id:"mask0","mask-type":"alpha",maskUnits:"userSpaceOnUse",x:"0",y:"0",width:"20",height:"20"},s.a.createElement("rect",{width:"20",height:"20",rx:"3",fill:"white"})),s.a.createElement("g",{mask:"url(#mask0)"},s.a.createElement("rect",{x:"1.25",y:"1.11084",width:"17.5",height:"7.77778",rx:"2",fill:"white"}),s.a.createElement("rect",{y:"6.52734",width:"20",height:"6.66667",fill:"#4086E4"}),s.a.createElement("rect",{y:"13.1943",width:"20",height:"6.66667",fill:"#E04242"})))},v=n(46),b=n(5),y=n(13),w=n(111),_=n.n(w);function O(e,t,n,r,o,a,i){try{var s=e[a](i),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function E(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return S(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return S(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function S(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function x(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var j=c()(_.a),k=(x(r={},f.a.EN,s.a.createElement(h,null)),x(r,f.a.RU,s.a.createElement(g,null)),r);t.a=function(e){var t=e.onChange,n=void 0===t?y.g:t,r=Object(l.a)(),o=E(Object(i.useState)(!1),2),u=o[0],c=o[1],h=Object(i.useContext)(v.a),g=h.language,w=h.setLanguage,_=Object(i.useCallback)(function(){var e,t=(e=a.a.mark((function e(t){var r;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.currentTarget.dataset.language,e.next=3,Object(b.c)(d.a.LANGUAGE,r);case 3:n(r),w(r);case 5:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){O(a,r,o,i,s,"next",e)}function s(e){O(a,r,o,i,s,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),[n,w]);return s.a.createElement(p.a,{icon:k[g],isVisible:u,onChange:c,title:r.formatMessage({id:"language.title"})},Object.entries(f.b).map((function(e){var t=E(e,2),n=t[0],r=t[1];return s.a.createElement("button",{className:j("button")(),"data-language":n,key:n,onClick:_},k[n],s.a.createElement("span",{className:j("label")()},r),n===g&&s.a.createElement(m,null))})))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(154),a=(r=o)&&r.__esModule?r:{default:r};t.default=a.default,e.exports=t.default},function(e,t,n){"use strict";var r,o=n(7);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var i=(a(r={},o.a.EN,{lang:o.a.EN,messages:{"language.title":"Choose language"}}),a(r,o.a.RU,{lang:o.a.RU,messages:{"language.title":"Выберите язык"}}),r);t.a=i},function(e,t,n){"use strict";e.exports=function(e,t){if(e===t)return!0;if(!e||!t)return!1;var n=Object.keys(e),r=Object.keys(t),o=n.length;if(r.length!==o)return!1;for(var a=0;a<o;a++){var i=n[a];if(e[i]!==t[i]||!Object.prototype.hasOwnProperty.call(t,i))return!1}return!0}},function(e,t,n){"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var o=r();o.withExtraArgument=r,t.a=o},function(e,t,n){"use strict";var r=n(0),o=n.n(r);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}t.a=function(e){var t=e.fill,n=void 0===t?"currentColor":t,r=e.width,s=void 0===r?18:r,u=e.height,c=void 0===u?18:u,l=i(e,["fill","width","height"]);return o.a.createElement("svg",a({width:s,height:c,viewBox:"0 0 20 20"},l),o.a.createElement("path",{fill:n,fillRule:"nonzero",d:"M11.6 10l5.1-5.2a1.1 1.1 0 00-1.5-1.6L10 8.4 4.8 3.2a1.1 1.1 0 00-1.6 0 1.1 1.1 0 000 1.6L8.4 10l-5.2 5.2a1.1 1.1 0 000 1.6 1.1 1.1 0 001.6 0l5.2-5.2 5.2 5.2a1.1 1.1 0 001.5-1.6L11.6 10z"}))}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,s,u=i(e),c=1;c<arguments.length;c++){for(var l in n=Object(arguments[c]))o.call(n,l)&&(u[l]=n[l]);if(r){s=r(n);for(var f=0;f<s.length;f++)a.call(n,s[f])&&(u[s[f]]=n[s[f]])}}return u}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(18);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var a;if(n)a=n(t);else if(r.isURLSearchParams(t))a=t.toString();else{var i=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))})))})),a=i.join("&")}if(a){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(18),o=n(138),a={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,u={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(s=n(80)),s),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){u.headers[e]=r.merge(a)})),e.exports=u}).call(this,n(60))},function(e,t,n){"use strict";var r=n(18),o=n(139),a=n(141),i=n(77),s=n(142),u=n(145),c=n(146),l=n(81);e.exports=function(e){return new Promise((function(t,n){var f=e.data,d=e.headers;r.isFormData(f)&&delete d["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var m=e.auth.username||"",h=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";d.Authorization="Basic "+btoa(m+":"+h)}var g=s(e.baseURL,e.url);if(p.open(e.method.toUpperCase(),i(g,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in p?u(p.getAllResponseHeaders()):null,a={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:r,config:e,request:p};o(t,n,a),p=null}},p.onabort=function(){p&&(n(l("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){n(l("Network Error",e,null,p)),p=null},p.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(l(t,e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var v=(e.withCredentials||c(g))&&e.xsrfCookieName?a.read(e.xsrfCookieName):void 0;v&&(d[e.xsrfHeaderName]=v)}if("setRequestHeader"in p&&r.forEach(d,(function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete d[t]:p.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(p.withCredentials=!!e.withCredentials),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),n(e),p=null)})),f||(f=null),p.send(f)}))}},function(e,t,n){"use strict";var r=n(140);e.exports=function(e,t,n,o,a){var i=new Error(e);return r(i,t,n,o,a)}},function(e,t,n){"use strict";var r=n(18);e.exports=function(e,t){t=t||{};var n={},o=["url","method","data"],a=["headers","auth","proxy","params"],i=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],s=["validateStatus"];function u(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function c(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=u(void 0,e[o])):n[o]=u(e[o],t[o])}r.forEach(o,(function(e){r.isUndefined(t[e])||(n[e]=u(void 0,t[e]))})),r.forEach(a,c),r.forEach(i,(function(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=u(void 0,e[o])):n[o]=u(void 0,t[o])})),r.forEach(s,(function(r){r in t?n[r]=u(e[r],t[r]):r in e&&(n[r]=u(void 0,e[r]))}));var l=o.concat(a).concat(i).concat(s),f=Object.keys(e).concat(Object.keys(t)).filter((function(e){return-1===l.indexOf(e)}));return r.forEach(f,c),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){e.exports=n(133)},function(e,t,n){e.exports={wrapper:"DotsLoader__wrapper--SMhdO",dot:"DotsLoader__dot--3lIC8",pending:"DotsLoader__pending--2xSFI",dot_view_light:"DotsLoader__dot_view_light--2gjOc",dot_first:"DotsLoader__dot_first--22qib",dot_second:"DotsLoader__dot_second--1oFkf",dot_third:"DotsLoader__dot_third--3eNEs",dot_fourth:"DotsLoader__dot_fourth--1MsUs"}},function(e,t,n){e.exports={button:"Button__button--1FT6h",child_loading:"Button__child_loading--2wCwV",spinner:"Button__spinner--Ere4M",button_size_s:"Button__button_size_s--2FpX4",button_size_m:"Button__button_size_m--3MidA",button_size_l:"Button__button_size_l--2gWHL",button_size_xl:"Button__button_size_xl--3gpEv",button_wide:"Button__button_wide--yy2xb",button_view_light:"Button__button_view_light--aMelT",button_view_ghost:"Button__button_view_ghost--3Au50",button_view_flat:"Button__button_view_flat--_0qZL",button_focused:"Button__button_focused--2JUhE"}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r=function(){function e(){this._hasWeakSet="function"==typeof WeakSet,this._inner=this._hasWeakSet?new WeakSet:[]}return e.prototype.memoize=function(e){if(this._hasWeakSet)return!!this._inner.has(e)||(this._inner.add(e),!1);for(var t=0;t<this._inner.length;t++){if(this._inner[t]===e)return!0}return this._inner.push(e),!1},e.prototype.unmemoize=function(e){if(this._hasWeakSet)this._inner.delete(e);else for(var t=0;t<this._inner.length;t++)if(this._inner[t]===e){this._inner.splice(t,1);break}},e}()},function(e,t,n){"use strict";n.d(t,"a",(function(){return Ze}));var r,o={};n.r(o),n.d(o,"FunctionToString",(function(){return i})),n.d(o,"InboundFilters",(function(){return P}));var a,i=function(){function e(){this.name=e.id}return e.prototype.setupOnce=function(){r=Function.prototype.toString,Function.prototype.toString=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this.__sentry_original__||this;return r.apply(n,e)}},e.id="FunctionToString",e}(),s=n(1),u=n(10),c=n(202);!function(e){e.PENDING="PENDING",e.RESOLVED="RESOLVED",e.REJECTED="REJECTED"}(a||(a={}));var l=function(){function e(e){var t=this;this._state=a.PENDING,this._handlers=[],this._resolve=function(e){t._setResult(a.RESOLVED,e)},this._reject=function(e){t._setResult(a.REJECTED,e)},this._setResult=function(e,n){t._state===a.PENDING&&(Object(u.m)(n)?n.then(t._resolve,t._reject):(t._state=e,t._value=n,t._executeHandlers()))},this._attachHandler=function(e){t._handlers=t._handlers.concat(e),t._executeHandlers()},this._executeHandlers=function(){if(t._state!==a.PENDING){var e=t._handlers.slice();t._handlers=[],e.forEach((function(e){e.done||(t._state===a.RESOLVED&&e.onfulfilled&&e.onfulfilled(t._value),t._state===a.REJECTED&&e.onrejected&&e.onrejected(t._value),e.done=!0)}))}};try{e(this._resolve,this._reject)}catch(e){this._reject(e)}}return e.resolve=function(t){return new e((function(e){e(t)}))},e.reject=function(t){return new e((function(e,n){n(t)}))},e.all=function(t){return new e((function(n,r){if(Array.isArray(t))if(0!==t.length){var o=t.length,a=[];t.forEach((function(t,i){e.resolve(t).then((function(e){a[i]=e,0===(o-=1)&&n(a)})).then(null,r)}))}else n([]);else r(new TypeError("Promise.all requires an array as input."))}))},e.prototype.then=function(t,n){var r=this;return new e((function(e,o){r._attachHandler({done:!1,onfulfilled:function(n){if(t)try{return void e(t(n))}catch(e){return void o(e)}else e(n)},onrejected:function(t){if(n)try{return void e(n(t))}catch(e){return void o(e)}else o(t)}})}))},e.prototype.catch=function(e){return this.then((function(e){return e}),e)},e.prototype.finally=function(t){var n=this;return new e((function(e,r){var o,a;return n.then((function(e){a=!1,o=e,t&&t()}),(function(e){a=!0,o=e,t&&t()})).then((function(){a?r(o):e(o)}))}))},e.prototype.toString=function(){return"[object SyncPromise]"},e}(),f=n(15),d=function(){function e(){this._notifyingListeners=!1,this._scopeListeners=[],this._eventProcessors=[],this._breadcrumbs=[],this._user={},this._tags={},this._extra={},this._contexts={}}return e.clone=function(t){var n=new e;return t&&(n._breadcrumbs=Object(s.d)(t._breadcrumbs),n._tags=Object(s.a)({},t._tags),n._extra=Object(s.a)({},t._extra),n._contexts=Object(s.a)({},t._contexts),n._user=t._user,n._level=t._level,n._span=t._span,n._session=t._session,n._transactionName=t._transactionName,n._fingerprint=t._fingerprint,n._eventProcessors=Object(s.d)(t._eventProcessors)),n},e.prototype.addScopeListener=function(e){this._scopeListeners.push(e)},e.prototype.addEventProcessor=function(e){return this._eventProcessors.push(e),this},e.prototype.setUser=function(e){return this._user=e||{},this._session&&this._session.update({user:e}),this._notifyScopeListeners(),this},e.prototype.getUser=function(){return this._user},e.prototype.setTags=function(e){return this._tags=Object(s.a)(Object(s.a)({},this._tags),e),this._notifyScopeListeners(),this},e.prototype.setTag=function(e,t){var n;return this._tags=Object(s.a)(Object(s.a)({},this._tags),((n={})[e]=t,n)),this._notifyScopeListeners(),this},e.prototype.setExtras=function(e){return this._extra=Object(s.a)(Object(s.a)({},this._extra),e),this._notifyScopeListeners(),this},e.prototype.setExtra=function(e,t){var n;return this._extra=Object(s.a)(Object(s.a)({},this._extra),((n={})[e]=t,n)),this._notifyScopeListeners(),this},e.prototype.setFingerprint=function(e){return this._fingerprint=e,this._notifyScopeListeners(),this},e.prototype.setLevel=function(e){return this._level=e,this._notifyScopeListeners(),this},e.prototype.setTransactionName=function(e){return this._transactionName=e,this._notifyScopeListeners(),this},e.prototype.setTransaction=function(e){return this.setTransactionName(e)},e.prototype.setContext=function(e,t){var n;return null===t?delete this._contexts[e]:this._contexts=Object(s.a)(Object(s.a)({},this._contexts),((n={})[e]=t,n)),this._notifyScopeListeners(),this},e.prototype.setSpan=function(e){return this._span=e,this._notifyScopeListeners(),this},e.prototype.getSpan=function(){return this._span},e.prototype.getTransaction=function(){var e,t,n,r,o=this.getSpan();return(null===(e=o)||void 0===e?void 0:e.transaction)?null===(t=o)||void 0===t?void 0:t.transaction:(null===(r=null===(n=o)||void 0===n?void 0:n.spanRecorder)||void 0===r?void 0:r.spans[0])?o.spanRecorder.spans[0]:void 0},e.prototype.setSession=function(e){return e?this._session=e:delete this._session,this._notifyScopeListeners(),this},e.prototype.getSession=function(){return this._session},e.prototype.update=function(t){if(!t)return this;if("function"==typeof t){var n=t(this);return n instanceof e?n:this}return t instanceof e?(this._tags=Object(s.a)(Object(s.a)({},this._tags),t._tags),this._extra=Object(s.a)(Object(s.a)({},this._extra),t._extra),this._contexts=Object(s.a)(Object(s.a)({},this._contexts),t._contexts),t._user&&Object.keys(t._user).length&&(this._user=t._user),t._level&&(this._level=t._level),t._fingerprint&&(this._fingerprint=t._fingerprint)):Object(u.h)(t)&&(t=t,this._tags=Object(s.a)(Object(s.a)({},this._tags),t.tags),this._extra=Object(s.a)(Object(s.a)({},this._extra),t.extra),this._contexts=Object(s.a)(Object(s.a)({},this._contexts),t.contexts),t.user&&(this._user=t.user),t.level&&(this._level=t.level),t.fingerprint&&(this._fingerprint=t.fingerprint)),this},e.prototype.clear=function(){return this._breadcrumbs=[],this._tags={},this._extra={},this._user={},this._contexts={},this._level=void 0,this._transactionName=void 0,this._fingerprint=void 0,this._span=void 0,this._session=void 0,this._notifyScopeListeners(),this},e.prototype.addBreadcrumb=function(e,t){var n=Object(s.a)({timestamp:Object(c.a)()},e);return this._breadcrumbs=void 0!==t&&t>=0?Object(s.d)(this._breadcrumbs,[n]).slice(-t):Object(s.d)(this._breadcrumbs,[n]),this._notifyScopeListeners(),this},e.prototype.clearBreadcrumbs=function(){return this._breadcrumbs=[],this._notifyScopeListeners(),this},e.prototype.applyToEvent=function(e,t){var n;if(this._extra&&Object.keys(this._extra).length&&(e.extra=Object(s.a)(Object(s.a)({},this._extra),e.extra)),this._tags&&Object.keys(this._tags).length&&(e.tags=Object(s.a)(Object(s.a)({},this._tags),e.tags)),this._user&&Object.keys(this._user).length&&(e.user=Object(s.a)(Object(s.a)({},this._user),e.user)),this._contexts&&Object.keys(this._contexts).length&&(e.contexts=Object(s.a)(Object(s.a)({},this._contexts),e.contexts)),this._level&&(e.level=this._level),this._transactionName&&(e.transaction=this._transactionName),this._span){e.contexts=Object(s.a)({trace:this._span.getTraceContext()},e.contexts);var r=null===(n=this._span.transaction)||void 0===n?void 0:n.name;r&&(e.tags=Object(s.a)({transaction:r},e.tags))}return this._applyFingerprint(e),e.breadcrumbs=Object(s.d)(e.breadcrumbs||[],this._breadcrumbs),e.breadcrumbs=e.breadcrumbs.length>0?e.breadcrumbs:void 0,this._notifyEventProcessors(Object(s.d)(p(),this._eventProcessors),e,t)},e.prototype._notifyEventProcessors=function(e,t,n,r){var o=this;return void 0===r&&(r=0),new l((function(a,i){var c=e[r];if(null===t||"function"!=typeof c)a(t);else{var l=c(Object(s.a)({},t),n);Object(u.m)(l)?l.then((function(t){return o._notifyEventProcessors(e,t,n,r+1).then(a)})).then(null,i):o._notifyEventProcessors(e,l,n,r+1).then(a).then(null,i)}}))},e.prototype._notifyScopeListeners=function(){var e=this;this._notifyingListeners||(this._notifyingListeners=!0,setTimeout((function(){e._scopeListeners.forEach((function(t){t(e)})),e._notifyingListeners=!1})))},e.prototype._applyFingerprint=function(e){e.fingerprint=e.fingerprint?Array.isArray(e.fingerprint)?e.fingerprint:[e.fingerprint]:[],this._fingerprint&&(e.fingerprint=e.fingerprint.concat(this._fingerprint)),e.fingerprint&&!e.fingerprint.length&&delete e.fingerprint},e}();function p(){var e=Object(f.e)();return e.__SENTRY__=e.__SENTRY__||{},e.__SENTRY__.globalEventProcessors=e.__SENTRY__.globalEventProcessors||[],e.__SENTRY__.globalEventProcessors}function m(e){p().push(e)}var h=Object(f.e)(),g="Sentry Logger ",v=function(){function e(){this._enabled=!1}return e.prototype.disable=function(){this._enabled=!1},e.prototype.enable=function(){this._enabled=!0},e.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._enabled&&Object(f.c)((function(){h.console.log(g+"[Log]: "+e.join(" "))}))},e.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._enabled&&Object(f.c)((function(){h.console.warn(g+"[Warn]: "+e.join(" "))}))},e.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._enabled&&Object(f.c)((function(){h.console.error(g+"[Error]: "+e.join(" "))}))},e}();h.__SENTRY__=h.__SENTRY__||{};var b,y=h.__SENTRY__.logger||(h.__SENTRY__.logger=new v),w=n(41);!function(e){e.Ok="ok",e.Exited="exited",e.Crashed="crashed",e.Abnormal="abnormal"}(b||(b={}));var _=n(17),O=function(){function e(e){this.errors=0,this.sid=Object(f.i)(),this.timestamp=Date.now(),this.started=Date.now(),this.duration=0,this.status=b.Ok,e&&this.update(e)}return e.prototype.update=function(e){void 0===e&&(e={}),e.user&&(e.user.ip_address&&(this.ipAddress=e.user.ip_address),e.did||(this.did=e.user.id||e.user.email||e.user.username)),this.timestamp=e.timestamp||Date.now(),e.sid&&(this.sid=32===e.sid.length?e.sid:Object(f.i)()),e.did&&(this.did=""+e.did),"number"==typeof e.started&&(this.started=e.started),"number"==typeof e.duration?this.duration=e.duration:this.duration=this.timestamp-this.started,e.release&&(this.release=e.release),e.environment&&(this.environment=e.environment),e.ipAddress&&(this.ipAddress=e.ipAddress),e.userAgent&&(this.userAgent=e.userAgent),"number"==typeof e.errors&&(this.errors=e.errors),e.status&&(this.status=e.status)},e.prototype.close=function(e){e?this.update({status:e}):this.status===b.Ok?this.update({status:b.Exited}):this.update()},e.prototype.toJSON=function(){return Object(_.a)({sid:""+this.sid,init:!0,started:new Date(this.started).toISOString(),timestamp:new Date(this.timestamp).toISOString(),status:this.status,errors:this.errors,did:"number"==typeof this.did||"string"==typeof this.did?""+this.did:void 0,duration:this.duration,attrs:Object(_.a)({release:this.release,environment:this.environment,ip_address:this.ipAddress,user_agent:this.userAgent})})},e}(),E=function(){function e(e,t,n){void 0===t&&(t=new d),void 0===n&&(n=3),this._version=n,this._stack=[{}],this.getStackTop().scope=t,this.bindClient(e)}return e.prototype.isOlderThan=function(e){return this._version<e},e.prototype.bindClient=function(e){this.getStackTop().client=e,e&&e.setupIntegrations&&e.setupIntegrations()},e.prototype.pushScope=function(){var e=d.clone(this.getScope());return this.getStack().push({client:this.getClient(),scope:e}),e},e.prototype.popScope=function(){return!(this.getStack().length<=1)&&!!this.getStack().pop()},e.prototype.withScope=function(e){var t=this.pushScope();try{e(t)}finally{this.popScope()}},e.prototype.getClient=function(){return this.getStackTop().client},e.prototype.getScope=function(){return this.getStackTop().scope},e.prototype.getStack=function(){return this._stack},e.prototype.getStackTop=function(){return this._stack[this._stack.length-1]},e.prototype.captureException=function(e,t){var n=this._lastEventId=Object(f.i)(),r=t;if(!t){var o=void 0;try{throw new Error("Sentry syntheticException")}catch(e){o=e}r={originalException:e,syntheticException:o}}return this._invokeClient("captureException",e,Object(s.a)(Object(s.a)({},r),{event_id:n})),n},e.prototype.captureMessage=function(e,t,n){var r=this._lastEventId=Object(f.i)(),o=n;if(!n){var a=void 0;try{throw new Error(e)}catch(e){a=e}o={originalException:e,syntheticException:a}}return this._invokeClient("captureMessage",e,t,Object(s.a)(Object(s.a)({},o),{event_id:r})),r},e.prototype.captureEvent=function(e,t){var n=this._lastEventId=Object(f.i)();return this._invokeClient("captureEvent",e,Object(s.a)(Object(s.a)({},t),{event_id:n})),n},e.prototype.lastEventId=function(){return this._lastEventId},e.prototype.addBreadcrumb=function(e,t){var n=this.getStackTop(),r=n.scope,o=n.client;if(r&&o){var a=o.getOptions&&o.getOptions()||{},i=a.beforeBreadcrumb,u=void 0===i?null:i,l=a.maxBreadcrumbs,d=void 0===l?100:l;if(!(d<=0)){var p=Object(c.a)(),m=Object(s.a)({timestamp:p},e),h=u?Object(f.c)((function(){return u(m,t)})):m;null!==h&&r.addBreadcrumb(h,Math.min(d,100))}}},e.prototype.setUser=function(e){var t=this.getScope();t&&t.setUser(e)},e.prototype.setTags=function(e){var t=this.getScope();t&&t.setTags(e)},e.prototype.setExtras=function(e){var t=this.getScope();t&&t.setExtras(e)},e.prototype.setTag=function(e,t){var n=this.getScope();n&&n.setTag(e,t)},e.prototype.setExtra=function(e,t){var n=this.getScope();n&&n.setExtra(e,t)},e.prototype.setContext=function(e,t){var n=this.getScope();n&&n.setContext(e,t)},e.prototype.configureScope=function(e){var t=this.getStackTop(),n=t.scope,r=t.client;n&&r&&e(n)},e.prototype.run=function(e){var t=x(this);try{e(this)}finally{x(t)}},e.prototype.getIntegration=function(e){var t=this.getClient();if(!t)return null;try{return t.getIntegration(e)}catch(t){return y.warn("Cannot retrieve integration "+e.id+" from the current Hub"),null}},e.prototype.startSpan=function(e){return this._callExtensionMethod("startSpan",e)},e.prototype.startTransaction=function(e,t){return this._callExtensionMethod("startTransaction",e,t)},e.prototype.traceHeaders=function(){return this._callExtensionMethod("traceHeaders")},e.prototype.startSession=function(e){this.endSession();var t=this.getStackTop(),n=t.scope,r=t.client,o=r&&r.getOptions()||{},a=o.release,i=o.environment,u=new O(Object(s.a)(Object(s.a)({release:a,environment:i},n&&{user:n.getUser()}),e));return n&&n.setSession(u),u},e.prototype.endSession=function(){var e=this.getStackTop(),t=e.scope,n=e.client;if(t){var r=t.getSession&&t.getSession();r&&(r.close(),n&&n.captureSession&&n.captureSession(r),t.setSession())}},e.prototype._invokeClient=function(e){for(var t,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var o=this.getStackTop(),a=o.scope,i=o.client;i&&i[e]&&(t=i)[e].apply(t,Object(s.d)(n,[a]))},e.prototype._callExtensionMethod=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=S(),o=r.__SENTRY__;if(o&&o.extensions&&"function"==typeof o.extensions[e])return o.extensions[e].apply(this,t);y.warn("Extension method "+e+" couldn't be found, doing nothing.")},e}();function S(){var e=Object(f.e)();return e.__SENTRY__=e.__SENTRY__||{extensions:{},hub:void 0},e}function x(e){var t=S(),n=T(t);return C(t,e),n}function j(){var e=S();return k(e)&&!T(e).isOlderThan(3)||C(e,new E),Object(w.b)()?function(e){try{var t=(r=S().__SENTRY__)&&r.extensions&&r.extensions.domain&&r.extensions.domain.active;if(!t)return T(e);if(!k(t)||T(t).isOlderThan(3)){var n=T(e).getStackTop();C(t,new E(n.client,d.clone(n.scope)))}return T(t)}catch(t){return T(e)}var r}(e):T(e)}function k(e){return!!(e&&e.__SENTRY__&&e.__SENTRY__.hub)}function T(e){return e&&e.__SENTRY__&&e.__SENTRY__.hub||(e.__SENTRY__=e.__SENTRY__||{},e.__SENTRY__.hub=new E),e.__SENTRY__.hub}function C(e,t){return!!e&&(e.__SENTRY__=e.__SENTRY__||{},e.__SENTRY__.hub=t,!0)}var A=n(32),N=[/^Script error\.?$/,/^Javascript error: Script error\.? on line 0$/],P=function(){function e(t){void 0===t&&(t={}),this._options=t,this.name=e.id}return e.prototype.setupOnce=function(){m((function(t){var n=j();if(!n)return t;var r=n.getIntegration(e);if(r){var o=n.getClient(),a=o?o.getOptions():{},i=r._mergeOptions(a);if(r._shouldDropEvent(t,i))return null}return t}))},e.prototype._shouldDropEvent=function(e,t){return this._isSentryError(e,t)?(y.warn("Event dropped due to being internal Sentry Error.\nEvent: "+Object(f.d)(e)),!0):this._isIgnoredError(e,t)?(y.warn("Event dropped due to being matched by `ignoreErrors` option.\nEvent: "+Object(f.d)(e)),!0):this._isDeniedUrl(e,t)?(y.warn("Event dropped due to being matched by `denyUrls` option.\nEvent: "+Object(f.d)(e)+".\nUrl: "+this._getEventFilterUrl(e)),!0):!this._isAllowedUrl(e,t)&&(y.warn("Event dropped due to not being matched by `allowUrls` option.\nEvent: "+Object(f.d)(e)+".\nUrl: "+this._getEventFilterUrl(e)),!0)},e.prototype._isSentryError=function(e,t){if(!t.ignoreInternal)return!1;try{return e&&e.exception&&e.exception.values&&e.exception.values[0]&&"SentryError"===e.exception.values[0].type||!1}catch(e){return!1}},e.prototype._isIgnoredError=function(e,t){return!(!t.ignoreErrors||!t.ignoreErrors.length)&&this._getPossibleEventMessages(e).some((function(e){return t.ignoreErrors.some((function(t){return Object(A.a)(e,t)}))}))},e.prototype._isDeniedUrl=function(e,t){if(!t.denyUrls||!t.denyUrls.length)return!1;var n=this._getEventFilterUrl(e);return!!n&&t.denyUrls.some((function(e){return Object(A.a)(n,e)}))},e.prototype._isAllowedUrl=function(e,t){if(!t.allowUrls||!t.allowUrls.length)return!0;var n=this._getEventFilterUrl(e);return!n||t.allowUrls.some((function(e){return Object(A.a)(n,e)}))},e.prototype._mergeOptions=function(e){return void 0===e&&(e={}),{allowUrls:Object(s.d)(this._options.whitelistUrls||[],this._options.allowUrls||[],e.whitelistUrls||[],e.allowUrls||[]),denyUrls:Object(s.d)(this._options.blacklistUrls||[],this._options.denyUrls||[],e.blacklistUrls||[],e.denyUrls||[]),ignoreErrors:Object(s.d)(this._options.ignoreErrors||[],e.ignoreErrors||[],N),ignoreInternal:void 0===this._options.ignoreInternal||this._options.ignoreInternal}},e.prototype._getPossibleEventMessages=function(e){if(e.message)return[e.message];if(e.exception)try{var t=e.exception.values&&e.exception.values[0]||{},n=t.type,r=void 0===n?"":n,o=t.value,a=void 0===o?"":o;return[""+a,r+": "+a]}catch(t){return y.error("Cannot extract message for event "+Object(f.d)(e)),[]}return[]},e.prototype._getEventFilterUrl=function(e){try{if(e.stacktrace){var t=e.stacktrace.frames;return t&&t[t.length-1].filename||null}if(e.exception){var n=e.exception.values&&e.exception.values[0].stacktrace&&e.exception.values[0].stacktrace.frames;return n&&n[n.length-1].filename||null}return null}catch(t){return y.error("Cannot extract url for event "+Object(f.d)(e)),null}},e.id="InboundFilters",e}();var R=Object.setPrototypeOf||({__proto__:[]}instanceof Array?function(e,t){return e.__proto__=t,e}:function(e,t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n]);return e});var D=function(e){function t(t){var n=this.constructor,r=e.call(this,t)||this;return r.message=t,r.name=n.prototype.constructor.name,R(r,n.prototype),r}return Object(s.b)(t,e),t}(Error),I=/^(?:(\w+):)\/\/(?:(\w+)(?::(\w+))?@)([\w.-]+)(?::(\d+))?\/(.+)/,M=function(){function e(e){"string"==typeof e?this._fromString(e):this._fromComponents(e),this._validate()}return e.prototype.toString=function(e){void 0===e&&(e=!1);var t=this,n=t.host,r=t.path,o=t.pass,a=t.port,i=t.projectId;return t.protocol+"://"+t.user+(e&&o?":"+o:"")+"@"+n+(a?":"+a:"")+"/"+(r?r+"/":r)+i},e.prototype._fromString=function(e){var t=I.exec(e);if(!t)throw new D("Invalid Dsn");var n=Object(s.c)(t.slice(1),6),r=n[0],o=n[1],a=n[2],i=void 0===a?"":a,u=n[3],c=n[4],l=void 0===c?"":c,f="",d=n[5],p=d.split("/");if(p.length>1&&(f=p.slice(0,-1).join("/"),d=p.pop()),d){var m=d.match(/^\d+/);m&&(d=m[0])}this._fromComponents({host:u,pass:i,path:f,projectId:d,port:l,protocol:r,user:o})},e.prototype._fromComponents=function(e){this.protocol=e.protocol,this.user=e.user,this.pass=e.pass||"",this.host=e.host,this.port=e.port||"",this.path=e.path||"",this.projectId=e.projectId},e.prototype._validate=function(){var e=this;if(["protocol","user","host","projectId"].forEach((function(t){if(!e[t])throw new D("Invalid Dsn: "+t+" missing")})),!this.projectId.match(/^\d+$/))throw new D("Invalid Dsn: Invalid projectId "+this.projectId);if("http"!==this.protocol&&"https"!==this.protocol)throw new D("Invalid Dsn: Invalid protocol "+this.protocol);if(this.port&&isNaN(parseInt(this.port,10)))throw new D("Invalid Dsn: Invalid port "+this.port)},e}(),L=[];function B(e){var t={};return function(e){var t=e.defaultIntegrations&&Object(s.d)(e.defaultIntegrations)||[],n=e.integrations,r=[];if(Array.isArray(n)){var o=n.map((function(e){return e.name})),a=[];t.forEach((function(e){-1===o.indexOf(e.name)&&-1===a.indexOf(e.name)&&(r.push(e),a.push(e.name))})),n.forEach((function(e){-1===a.indexOf(e.name)&&(r.push(e),a.push(e.name))}))}else"function"==typeof n?(r=n(t),r=Array.isArray(r)?r:[r]):r=Object(s.d)(t);var i=r.map((function(e){return e.name}));return-1!==i.indexOf("Debug")&&r.push.apply(r,Object(s.d)(r.splice(i.indexOf("Debug"),1))),r}(e).forEach((function(e){t[e.name]=e,function(e){-1===L.indexOf(e.name)&&(e.setupOnce(m,j),L.push(e.name),y.log("Integration installed: "+e.name))}(e)})),t}var F,U=function(){function e(e,t){this._integrations={},this._processing=0,this._backend=new e(t),this._options=t,t.dsn&&(this._dsn=new M(t.dsn))}return e.prototype.captureException=function(e,t,n){var r=this,o=t&&t.event_id;return this._process(this._getBackend().eventFromException(e,t).then((function(e){return r._captureEvent(e,t,n)})).then((function(e){o=e}))),o},e.prototype.captureMessage=function(e,t,n,r){var o=this,a=n&&n.event_id,i=Object(u.i)(e)?this._getBackend().eventFromMessage(""+e,t,n):this._getBackend().eventFromException(e,n);return this._process(i.then((function(e){return o._captureEvent(e,n,r)})).then((function(e){a=e}))),a},e.prototype.captureEvent=function(e,t,n){var r=t&&t.event_id;return this._process(this._captureEvent(e,t,n).then((function(e){r=e}))),r},e.prototype.captureSession=function(e){e.release?this._sendSession(e):y.warn("Discarded session because of missing release")},e.prototype.getDsn=function(){return this._dsn},e.prototype.getOptions=function(){return this._options},e.prototype.flush=function(e){var t=this;return this._isClientProcessing(e).then((function(n){return t._getBackend().getTransport().close(e).then((function(e){return n&&e}))}))},e.prototype.close=function(e){var t=this;return this.flush(e).then((function(e){return t.getOptions().enabled=!1,e}))},e.prototype.setupIntegrations=function(){this._isEnabled()&&(this._integrations=B(this._options))},e.prototype.getIntegration=function(e){try{return this._integrations[e.id]||null}catch(t){return y.warn("Cannot retrieve integration "+e.id+" from the current Client"),null}},e.prototype._updateSessionFromEvent=function(e,t){var n,r,o,a=!1,i=!1,u=t.exception&&t.exception.values;if(u){i=!0;try{for(var c=Object(s.e)(u),l=c.next();!l.done;l=c.next()){var f=l.value.mechanism;if(f&&!1===f.handled){a=!0;break}}}catch(e){n={error:e}}finally{try{l&&!l.done&&(r=c.return)&&r.call(c)}finally{if(n)throw n.error}}}var d=t.user;if(!e.userAgent){var p=t.request?t.request.headers:{};for(var m in p)if("user-agent"===m.toLowerCase()){o=p[m];break}}e.update(Object(s.a)(Object(s.a)({},a&&{status:b.Crashed}),{user:d,userAgent:o,errors:e.errors+Number(i||a)}))},e.prototype._sendSession=function(e){this._getBackend().sendSession(e)},e.prototype._isClientProcessing=function(e){var t=this;return new l((function(n){var r=0,o=setInterval((function(){0==t._processing?(clearInterval(o),n(!0)):(r+=1,e&&r>=e&&(clearInterval(o),n(!1)))}),1)}))},e.prototype._getBackend=function(){return this._backend},e.prototype._isEnabled=function(){return!1!==this.getOptions().enabled&&void 0!==this._dsn},e.prototype._prepareEvent=function(e,t,n){var r=this,o=this.getOptions().normalizeDepth,a=void 0===o?3:o,i=Object(s.a)(Object(s.a)({},e),{event_id:e.event_id||(n&&n.event_id?n.event_id:Object(f.i)()),timestamp:e.timestamp||Object(c.a)()});this._applyClientOptions(i),this._applyIntegrationsMetadata(i);var u=t;n&&n.captureContext&&(u=d.clone(u).update(n.captureContext));var p=l.resolve(i);return u&&(p=u.applyToEvent(i,n)),p.then((function(e){return"number"==typeof a&&a>0?r._normalizeEvent(e,a):e}))},e.prototype._normalizeEvent=function(e,t){if(!e)return null;var n=Object(s.a)(Object(s.a)(Object(s.a)(Object(s.a)(Object(s.a)({},e),e.breadcrumbs&&{breadcrumbs:e.breadcrumbs.map((function(e){return Object(s.a)(Object(s.a)({},e),e.data&&{data:Object(_.d)(e.data,t)})}))}),e.user&&{user:Object(_.d)(e.user,t)}),e.contexts&&{contexts:Object(_.d)(e.contexts,t)}),e.extra&&{extra:Object(_.d)(e.extra,t)});return e.contexts&&e.contexts.trace&&(n.contexts.trace=e.contexts.trace),n},e.prototype._applyClientOptions=function(e){var t=this.getOptions(),n=t.environment,r=t.release,o=t.dist,a=t.maxValueLength,i=void 0===a?250:a;"environment"in e||(e.environment="environment"in t?n:"production"),void 0===e.release&&void 0!==r&&(e.release=r),void 0===e.dist&&void 0!==o&&(e.dist=o),e.message&&(e.message=Object(A.d)(e.message,i));var s=e.exception&&e.exception.values&&e.exception.values[0];s&&s.value&&(s.value=Object(A.d)(s.value,i));var u=e.request;u&&u.url&&(u.url=Object(A.d)(u.url,i))},e.prototype._applyIntegrationsMetadata=function(e){var t=e.sdk,n=Object.keys(this._integrations);t&&n.length>0&&(t.integrations=n)},e.prototype._sendEvent=function(e){this._getBackend().sendEvent(e)},e.prototype._captureEvent=function(e,t,n){return this._processEvent(e,t,n).then((function(e){return e.event_id}),(function(e){y.error(e)}))},e.prototype._processEvent=function(e,t,n){var r=this,o=this.getOptions(),a=o.beforeSend,i=o.sampleRate;if(!this._isEnabled())return l.reject(new D("SDK not enabled, will not send event."));var s="transaction"===e.type;return!s&&"number"==typeof i&&Math.random()>i?l.reject(new D("This event has been sampled, will not send event.")):this._prepareEvent(e,n,t).then((function(e){if(null===e)throw new D("An event processor returned null, will not send event.");if(t&&t.data&&!0===t.data.__sentry__||s||!a)return e;var n=a(e,t);if(void 0===n)throw new D("`beforeSend` method has to return `null` or a valid event.");return Object(u.m)(n)?n.then((function(e){return e}),(function(e){throw new D("beforeSend rejected with "+e)})):n})).then((function(e){if(null===e)throw new D("`beforeSend` returned `null`, will not send event.");var t=n&&n.getSession&&n.getSession();return!s&&t&&r._updateSessionFromEvent(t,e),r._sendEvent(e),e})).then(null,(function(e){if(e instanceof D)throw e;throw r.captureException(e,{data:{__sentry__:!0},originalException:e}),new D("Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\nReason: "+e)}))},e.prototype._process=function(e){var t=this;this._processing+=1,e.then((function(e){return t._processing-=1,e}),(function(e){return t._processing-=1,e}))},e}();!function(e){e.Unknown="unknown",e.Skipped="skipped",e.Success="success",e.RateLimit="rate_limit",e.Invalid="invalid",e.Failed="failed"}(F||(F={})),function(e){e.fromHttpCode=function(t){return t>=200&&t<300?e.Success:429===t?e.RateLimit:t>=400&&t<500?e.Invalid:t>=500?e.Failed:e.Unknown}}(F||(F={}));var z,H=function(){function e(){}return e.prototype.sendEvent=function(e){return l.resolve({reason:"NoopTransport: Event has been skipped because no Dsn is configured.",status:F.Skipped})},e.prototype.close=function(e){return l.resolve(!0)},e}(),G=function(){function e(e){this._options=e,this._options.dsn||y.warn("No DSN provided, backend will not do anything."),this._transport=this._setupTransport()}return e.prototype.eventFromException=function(e,t){throw new D("Backend has to implement `eventFromException` method")},e.prototype.eventFromMessage=function(e,t,n){throw new D("Backend has to implement `eventFromMessage` method")},e.prototype.sendEvent=function(e){this._transport.sendEvent(e).then(null,(function(e){y.error("Error while sending event: "+e)}))},e.prototype.sendSession=function(e){this._transport.sendSession?this._transport.sendSession(e).then(null,(function(e){y.error("Error while sending session: "+e)})):y.warn("Dropping session because custom transport doesn't implement sendSession")},e.prototype.getTransport=function(){return this._transport},e.prototype._setupTransport=function(){return new H},e}();function W(){if(!("fetch"in Object(f.e)()))return!1;try{return new Headers,new Request(""),new Response,!0}catch(e){return!1}}function q(e){return e&&/^function fetch\(\)\s+\{\s+\[native code\]\s+\}$/.test(e.toString())}function V(){if(!W())return!1;try{return new Request("_",{referrerPolicy:"origin"}),!0}catch(e){return!1}}!function(e){e.Fatal="fatal",e.Error="error",e.Warning="warning",e.Log="log",e.Info="info",e.Debug="debug",e.Critical="critical"}(z||(z={})),function(e){e.fromString=function(t){switch(t){case"debug":return e.Debug;case"info":return e.Info;case"warn":case"warning":return e.Warning;case"error":return e.Error;case"fatal":return e.Fatal;case"critical":return e.Critical;case"log":default:return e.Log}}}(z||(z={}));var Y=/^\s*at (?:(.*?) ?\()?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\/).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i,$=/^\s*(.*?)(?:\((.*?)\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\/.*?|\[native code\]|[^@]*(?:bundle|\d+\.js))(?::(\d+))?(?::(\d+))?\s*$/i,X=/^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i,K=/(\S+) line (\d+)(?: > eval line \d+)* > eval/i,Q=/\((\S*)(?::(\d+))(?::(\d+))\)/,Z=/Minified React error #\d+;/i;function J(e){var t=null,n=0;e&&("number"==typeof e.framesToPop?n=e.framesToPop:Z.test(e.message)&&(n=1));try{if(t=function(e){if(!e||!e.stacktrace)return null;for(var t,n=e.stacktrace,r=/ line (\d+).*script (?:in )?(\S+)(?:: in function (\S+))?$/i,o=/ line (\d+), column (\d+)\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\((.*)\))? in (.*):\s*$/i,a=n.split("\n"),i=[],s=0;s<a.length;s+=2){var u=null;(t=r.exec(a[s]))?u={url:t[2],func:t[3],args:[],line:+t[1],column:null}:(t=o.exec(a[s]))&&(u={url:t[6],func:t[3]||t[4],args:t[5]?t[5].split(","):[],line:+t[1],column:+t[2]}),u&&(!u.func&&u.line&&(u.func="?"),i.push(u))}if(!i.length)return null;return{message:te(e),name:e.name,stack:i}}(e))return ee(t,n)}catch(e){}try{if(t=function(e){if(!e||!e.stack)return null;for(var t,n,r,o=[],a=e.stack.split("\n"),i=0;i<a.length;++i){if(n=Y.exec(a[i])){var s=n[2]&&0===n[2].indexOf("native");n[2]&&0===n[2].indexOf("eval")&&(t=Q.exec(n[2]))&&(n[2]=t[1],n[3]=t[2],n[4]=t[3]),r={url:n[2]&&0===n[2].indexOf("address at ")?n[2].substr("address at ".length):n[2],func:n[1]||"?",args:s?[n[2]]:[],line:n[3]?+n[3]:null,column:n[4]?+n[4]:null}}else if(n=X.exec(a[i]))r={url:n[2],func:n[1]||"?",args:[],line:+n[3],column:n[4]?+n[4]:null};else{if(!(n=$.exec(a[i])))continue;n[3]&&n[3].indexOf(" > eval")>-1&&(t=K.exec(n[3]))?(n[1]=n[1]||"eval",n[3]=t[1],n[4]=t[2],n[5]=""):0!==i||n[5]||void 0===e.columnNumber||(o[0].column=e.columnNumber+1),r={url:n[3],func:n[1]||"?",args:n[2]?n[2].split(","):[],line:n[4]?+n[4]:null,column:n[5]?+n[5]:null}}!r.func&&r.line&&(r.func="?"),o.push(r)}if(!o.length)return null;return{message:te(e),name:e.name,stack:o}}(e))return ee(t,n)}catch(e){}return{message:te(e),name:e&&e.name,stack:[],failed:!0}}function ee(e,t){try{return Object(s.a)(Object(s.a)({},e),{stack:e.stack.slice(t)})}catch(t){return e}}function te(e){var t=e&&e.message;return t?t.error&&"string"==typeof t.error.message?t.error.message:t:"No error message"}function ne(e){var t=oe(e.stack),n={type:e.name,value:e.message};return t&&t.length&&(n.stacktrace={frames:t}),void 0===n.type&&""===n.value&&(n.value="Unrecoverable error caught"),n}function re(e){return{exception:{values:[ne(e)]}}}function oe(e){if(!e||!e.length)return[];var t=e,n=t[0].func||"",r=t[t.length-1].func||"";return-1===n.indexOf("captureMessage")&&-1===n.indexOf("captureException")||(t=t.slice(1)),-1!==r.indexOf("sentryWrapped")&&(t=t.slice(0,-1)),t.slice(0,50).map((function(e){return{colno:null===e.column?void 0:e.column,filename:e.url||t[0].url,function:e.func||"?",in_app:!0,lineno:null===e.line?void 0:e.line}})).reverse()}function ae(e,t,n){var r;if(void 0===n&&(n={}),Object(u.e)(e)&&e.error)return r=re(J(e=e.error));if(Object(u.a)(e)||Object(u.b)(e)){var o=e,a=o.name||(Object(u.a)(o)?"DOMError":"DOMException"),i=o.message?a+": "+o.message:a;return r=ie(i,t,n),Object(f.b)(r,i),"code"in o&&(r.tags=Object(s.a)(Object(s.a)({},r.tags),{"DOMException.code":""+o.code})),r}return Object(u.d)(e)?r=re(J(e)):Object(u.h)(e)||Object(u.f)(e)?(r=function(e,t,n){var r={exception:{values:[{type:Object(u.f)(e)?e.constructor.name:n?"UnhandledRejection":"Error",value:"Non-Error "+(n?"promise rejection":"exception")+" captured with keys: "+Object(_.b)(e)}]},extra:{__serialized__:Object(_.e)(e)}};if(t){var o=oe(J(t).stack);r.stacktrace={frames:o}}return r}(e,t,n.rejection),Object(f.a)(r,{synthetic:!0}),r):(r=ie(e,t,n),Object(f.b)(r,""+e,void 0),Object(f.a)(r,{synthetic:!0}),r)}function ie(e,t,n){void 0===n&&(n={});var r={message:e};if(n.attachStacktrace&&t){var o=oe(J(t).stack);r.stacktrace={frames:o}}return r}function se(e,t){return{body:JSON.stringify({sent_at:(new Date).toISOString()})+"\n"+JSON.stringify({type:"session"})+"\n"+JSON.stringify(e),type:"session",url:t.getEnvelopeEndpointWithUrlEncodedAuth()}}function ue(e,t){var n="transaction"===e.type,r={body:JSON.stringify(e),type:e.type||"event",url:n?t.getEnvelopeEndpointWithUrlEncodedAuth():t.getStoreEndpointWithUrlEncodedAuth()};if(n){var o=JSON.stringify({event_id:e.event_id,sent_at:(new Date).toISOString()})+"\n"+JSON.stringify({type:e.type})+"\n"+r.body;r.body=o}return r}var ce=function(){function e(e){this.dsn=e,this._dsnObject=new M(e)}return e.prototype.getDsn=function(){return this._dsnObject},e.prototype.getBaseApiEndpoint=function(){var e=this._dsnObject,t=e.protocol?e.protocol+":":"",n=e.port?":"+e.port:"";return t+"//"+e.host+n+(e.path?"/"+e.path:"")+"/api/"},e.prototype.getStoreEndpoint=function(){return this._getIngestEndpoint("store")},e.prototype.getStoreEndpointWithUrlEncodedAuth=function(){return this.getStoreEndpoint()+"?"+this._encodedAuth()},e.prototype.getEnvelopeEndpointWithUrlEncodedAuth=function(){return this._getEnvelopeEndpoint()+"?"+this._encodedAuth()},e.prototype.getStoreEndpointPath=function(){var e=this._dsnObject;return(e.path?"/"+e.path:"")+"/api/"+e.projectId+"/store/"},e.prototype.getRequestHeaders=function(e,t){var n=this._dsnObject,r=["Sentry sentry_version=7"];return r.push("sentry_client="+e+"/"+t),r.push("sentry_key="+n.user),n.pass&&r.push("sentry_secret="+n.pass),{"Content-Type":"application/json","X-Sentry-Auth":r.join(", ")}},e.prototype.getReportDialogEndpoint=function(e){void 0===e&&(e={});var t=this._dsnObject,n=this.getBaseApiEndpoint()+"embed/error-page/",r=[];for(var o in r.push("dsn="+t.toString()),e)if("user"===o){if(!e.user)continue;e.user.name&&r.push("name="+encodeURIComponent(e.user.name)),e.user.email&&r.push("email="+encodeURIComponent(e.user.email))}else r.push(encodeURIComponent(o)+"="+encodeURIComponent(e[o]));return r.length?n+"?"+r.join("&"):n},e.prototype._getEnvelopeEndpoint=function(){return this._getIngestEndpoint("envelope")},e.prototype._getIngestEndpoint=function(e){return""+this.getBaseApiEndpoint()+this._dsnObject.projectId+"/"+e+"/"},e.prototype._encodedAuth=function(){var e={sentry_key:this._dsnObject.user,sentry_version:"7"};return Object(_.f)(e)},e}(),le=function(){function e(e){this._limit=e,this._buffer=[]}return e.prototype.isReady=function(){return void 0===this._limit||this.length()<this._limit},e.prototype.add=function(e){var t=this;return this.isReady()?(-1===this._buffer.indexOf(e)&&this._buffer.push(e),e.then((function(){return t.remove(e)})).then(null,(function(){return t.remove(e).then(null,(function(){}))})),e):l.reject(new D("Not adding Promise due to buffer limit reached."))},e.prototype.remove=function(e){return this._buffer.splice(this._buffer.indexOf(e),1)[0]},e.prototype.length=function(){return this._buffer.length},e.prototype.drain=function(e){var t=this;return new l((function(n){var r=setTimeout((function(){e&&e>0&&n(!1)}),e);l.all(t._buffer).then((function(){clearTimeout(r),n(!0)})).then(null,(function(){n(!0)}))}))},e}(),fe=function(){function e(e){this.options=e,this._buffer=new le(30),this._rateLimits={},this._api=new ce(this.options.dsn),this.url=this._api.getStoreEndpointWithUrlEncodedAuth()}return e.prototype.sendEvent=function(e){throw new D("Transport Class has to implement `sendEvent` method")},e.prototype.close=function(e){return this._buffer.drain(e)},e.prototype._handleResponse=function(e){var t=e.requestType,n=e.response,r=e.headers,o=e.resolve,a=e.reject,i=F.fromHttpCode(n.status);this._handleRateLimit(r)&&y.warn("Too many requests, backing off till: "+this._disabledUntil(t)),i!==F.Success?a(n):o({status:i})},e.prototype._disabledUntil=function(e){return this._rateLimits[e]||this._rateLimits.all},e.prototype._isRateLimited=function(e){return this._disabledUntil(e)>new Date(Date.now())},e.prototype._handleRateLimit=function(e){var t,n,r,o,a=Date.now(),i=e["x-sentry-rate-limits"],u=e["retry-after"];if(i){try{for(var c=Object(s.e)(i.trim().split(",")),l=c.next();!l.done;l=c.next()){var d=l.value.split(":",2),p=parseInt(d[0],10),m=1e3*(isNaN(p)?60:p);try{for(var h=(r=void 0,Object(s.e)(d[1].split(";"))),g=h.next();!g.done;g=h.next()){var v=g.value;this._rateLimits[v||"all"]=new Date(a+m)}}catch(e){r={error:e}}finally{try{g&&!g.done&&(o=h.return)&&o.call(h)}finally{if(r)throw r.error}}}}catch(e){t={error:e}}finally{try{l&&!l.done&&(n=c.return)&&n.call(c)}finally{if(t)throw t.error}}return!0}return!!u&&(this._rateLimits.all=new Date(a+Object(f.g)(a,u)),!0)},e}(),de=Object(f.e)(),pe=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Object(s.b)(t,e),t.prototype.sendEvent=function(e){return this._sendRequest(ue(e,this._api),e)},t.prototype.sendSession=function(e){return this._sendRequest(se(e,this._api),e)},t.prototype._sendRequest=function(e,t){var n=this;if(this._isRateLimited(e.type))return Promise.reject({event:t,type:e.type,reason:"Transport locked till "+this._disabledUntil(e.type)+" due to too many requests.",status:429});var r={body:e.body,method:"POST",referrerPolicy:V()?"origin":""};return void 0!==this.options.fetchParameters&&Object.assign(r,this.options.fetchParameters),void 0!==this.options.headers&&(r.headers=this.options.headers),this._buffer.add(new l((function(t,o){de.fetch(e.url,r).then((function(r){var a={"x-sentry-rate-limits":r.headers.get("X-Sentry-Rate-Limits"),"retry-after":r.headers.get("Retry-After")};n._handleResponse({requestType:e.type,response:r,headers:a,resolve:t,reject:o})})).catch(o)})))},t}(fe),me=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Object(s.b)(t,e),t.prototype.sendEvent=function(e){return this._sendRequest(ue(e,this._api),e)},t.prototype.sendSession=function(e){return this._sendRequest(se(e,this._api),e)},t.prototype._sendRequest=function(e,t){var n=this;return this._isRateLimited(e.type)?Promise.reject({event:t,type:e.type,reason:"Transport locked till "+this._disabledUntil(e.type)+" due to too many requests.",status:429}):this._buffer.add(new l((function(t,r){var o=new XMLHttpRequest;for(var a in o.onreadystatechange=function(){if(4===o.readyState){var a={"x-sentry-rate-limits":o.getResponseHeader("X-Sentry-Rate-Limits"),"retry-after":o.getResponseHeader("Retry-After")};n._handleResponse({requestType:e.type,response:o,headers:a,resolve:t,reject:r})}},o.open("POST",e.url),n.options.headers)n.options.headers.hasOwnProperty(a)&&o.setRequestHeader(a,n.options.headers[a]);o.send(e.body)})))},t}(fe),he=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Object(s.b)(t,e),t.prototype.eventFromException=function(e,t){return function(e,t,n){var r=ae(t,n&&n.syntheticException||void 0,{attachStacktrace:e.attachStacktrace});return Object(f.a)(r,{handled:!0,type:"generic"}),r.level=z.Error,n&&n.event_id&&(r.event_id=n.event_id),l.resolve(r)}(this._options,e,t)},t.prototype.eventFromMessage=function(e,t,n){return void 0===t&&(t=z.Info),function(e,t,n,r){void 0===n&&(n=z.Info);var o=ie(t,r&&r.syntheticException||void 0,{attachStacktrace:e.attachStacktrace});return o.level=n,r&&r.event_id&&(o.event_id=r.event_id),l.resolve(o)}(this._options,e,t,n)},t.prototype._setupTransport=function(){if(!this._options.dsn)return e.prototype._setupTransport.call(this);var t=Object(s.a)(Object(s.a)({},this._options.transportOptions),{dsn:this._options.dsn});return this._options.transport?new this._options.transport(t):W()?new pe(t):new me(t)},t}(G);function ge(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=j();if(r&&r[e])return r[e].apply(r,Object(s.d)(t));throw new Error("No hub defined or "+e+" was not found on the hub, please open a bug report.")}function ve(e,t){var n;try{throw new Error("Sentry syntheticException")}catch(e){n=e}return ge("captureException",e,{captureContext:t,originalException:e,syntheticException:n})}function be(e){ge("withScope",e)}var ye=0;function we(){return ye>0}function _e(){ye+=1,setTimeout((function(){ye-=1}))}function Oe(e,t,n){if(void 0===t&&(t={}),"function"!=typeof e)return e;try{if(e.__sentry__)return e;if(e.__sentry_wrapped__)return e.__sentry_wrapped__}catch(t){return e}var r=function(){var r=Array.prototype.slice.call(arguments);try{n&&"function"==typeof n&&n.apply(this,arguments);var o=r.map((function(e){return Oe(e,t)}));return e.handleEvent?e.handleEvent.apply(this,o):e.apply(this,o)}catch(e){throw _e(),be((function(n){n.addEventProcessor((function(e){var n=Object(s.a)({},e);return t.mechanism&&(Object(f.b)(n,void 0,void 0),Object(f.a)(n,t.mechanism)),n.extra=Object(s.a)(Object(s.a)({},n.extra),{arguments:r}),n})),ve(e)})),e}};try{for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(r[o]=e[o])}catch(e){}e.prototype=e.prototype||{},r.prototype=e.prototype,Object.defineProperty(e,"__sentry_wrapped__",{enumerable:!1,value:r}),Object.defineProperties(r,{__sentry__:{enumerable:!1,value:!0},__sentry_original__:{enumerable:!1,value:e}});try{Object.getOwnPropertyDescriptor(r,"name").configurable&&Object.defineProperty(r,"name",{get:function(){return e.name}})}catch(e){}return r}function Ee(e){if(void 0===e&&(e={}),e.eventId)if(e.dsn){var t=document.createElement("script");t.async=!0,t.src=new ce(e.dsn).getReportDialogEndpoint(e),e.onLoad&&(t.onload=e.onLoad),(document.head||document.body).appendChild(t)}else y.error("Missing dsn option in showReportDialog call");else y.error("Missing eventId option in showReportDialog call")}var Se,xe=n(47),je=Object(f.e)(),ke={},Te={};function Ce(e){if(!Te[e])switch(Te[e]=!0,e){case"console":!function(){if(!("console"in je))return;["debug","info","warn","error","log","assert"].forEach((function(e){e in je.console&&Object(_.c)(je.console,e,(function(t){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];Ne("console",{args:n,level:e}),t&&Function.prototype.apply.call(t,je.console,n)}}))}))}();break;case"dom":!function(){if(!("document"in je))return;je.document.addEventListener("click",Le("click",Ne.bind(null,"dom")),!1),je.document.addEventListener("keypress",Be(Ne.bind(null,"dom")),!1),["EventTarget","Node"].forEach((function(e){var t=je[e]&&je[e].prototype;t&&t.hasOwnProperty&&t.hasOwnProperty("addEventListener")&&(Object(_.c)(t,"addEventListener",(function(e){return function(t,n,r){return n&&n.handleEvent?("click"===t&&Object(_.c)(n,"handleEvent",(function(e){return function(t){return Le("click",Ne.bind(null,"dom"))(t),e.call(this,t)}})),"keypress"===t&&Object(_.c)(n,"handleEvent",(function(e){return function(t){return Be(Ne.bind(null,"dom"))(t),e.call(this,t)}}))):("click"===t&&Le("click",Ne.bind(null,"dom"),!0)(this),"keypress"===t&&Be(Ne.bind(null,"dom"))(this)),e.call(this,t,n,r)}})),Object(_.c)(t,"removeEventListener",(function(e){return function(t,n,r){try{e.call(this,t,n.__sentry_wrapped__,r)}catch(e){}return e.call(this,t,n,r)}})))}))}();break;case"xhr":!function(){if(!("XMLHttpRequest"in je))return;var e=[],t=[],n=XMLHttpRequest.prototype;Object(_.c)(n,"open",(function(n){return function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];var a=this,i=r[1];a.__sentry_xhr__={method:Object(u.k)(r[0])?r[0].toUpperCase():r[0],url:r[1]},Object(u.k)(i)&&"POST"===a.__sentry_xhr__.method&&i.match(/sentry_key/)&&(a.__sentry_own_request__=!0);var s=function(){if(4===a.readyState){try{a.__sentry_xhr__&&(a.__sentry_xhr__.status_code=a.status)}catch(e){}try{var n=e.indexOf(a);if(-1!==n){e.splice(n);var o=t.splice(n)[0];a.__sentry_xhr__&&void 0!==o[0]&&(a.__sentry_xhr__.body=o[0])}}catch(e){}Ne("xhr",{args:r,endTimestamp:Date.now(),startTimestamp:Date.now(),xhr:a})}};return"onreadystatechange"in a&&"function"==typeof a.onreadystatechange?Object(_.c)(a,"onreadystatechange",(function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return s(),e.apply(a,t)}})):a.addEventListener("readystatechange",s),n.apply(a,r)}})),Object(_.c)(n,"send",(function(n){return function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];return e.push(this),t.push(r),Ne("xhr",{args:r,startTimestamp:Date.now(),xhr:this}),n.apply(this,r)}}))}();break;case"fetch":!function(){if(!function(){if(!W())return!1;var e=Object(f.e)();if(q(e.fetch))return!0;var t=!1,n=e.document;if(n&&"function"==typeof n.createElement)try{var r=n.createElement("iframe");r.hidden=!0,n.head.appendChild(r),r.contentWindow&&r.contentWindow.fetch&&(t=q(r.contentWindow.fetch)),n.head.removeChild(r)}catch(e){y.warn("Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ",e)}return t}())return;Object(_.c)(je,"fetch",(function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r={args:t,fetchData:{method:Pe(t),url:Re(t)},startTimestamp:Date.now()};return Ne("fetch",Object(s.a)({},r)),e.apply(je,t).then((function(e){return Ne("fetch",Object(s.a)(Object(s.a)({},r),{endTimestamp:Date.now(),response:e})),e}),(function(e){throw Ne("fetch",Object(s.a)(Object(s.a)({},r),{endTimestamp:Date.now(),error:e})),e}))}}))}();break;case"history":!function(){if(!function(){var e=Object(f.e)(),t=e.chrome,n=t&&t.app&&t.app.runtime,r="history"in e&&!!e.history.pushState&&!!e.history.replaceState;return!n&&r}())return;var e=je.onpopstate;function t(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.length>2?t[2]:void 0;if(r){var o=Se,a=String(r);Se=a,Ne("history",{from:o,to:a})}return e.apply(this,t)}}je.onpopstate=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=je.location.href,o=Se;if(Se=r,Ne("history",{from:o,to:r}),e)return e.apply(this,t)},Object(_.c)(je.history,"pushState",t),Object(_.c)(je.history,"replaceState",t)}();break;case"error":Fe=je.onerror,je.onerror=function(e,t,n,r,o){return Ne("error",{column:r,error:o,line:n,msg:e,url:t}),!!Fe&&Fe.apply(this,arguments)};break;case"unhandledrejection":Ue=je.onunhandledrejection,je.onunhandledrejection=function(e){return Ne("unhandledrejection",e),!Ue||Ue.apply(this,arguments)};break;default:y.warn("unknown instrumentation type:",e)}}function Ae(e){e&&"string"==typeof e.type&&"function"==typeof e.callback&&(ke[e.type]=ke[e.type]||[],ke[e.type].push(e.callback),Ce(e.type))}function Ne(e,t){var n,r;if(e&&ke[e])try{for(var o=Object(s.e)(ke[e]||[]),a=o.next();!a.done;a=o.next()){var i=a.value;try{i(t)}catch(t){y.error("Error while triggering instrumentation handler.\nType: "+e+"\nName: "+Object(xe.a)(i)+"\nError: "+t)}}}catch(e){n={error:e}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}}function Pe(e){return void 0===e&&(e=[]),"Request"in je&&Object(u.g)(e[0],Request)&&e[0].method?String(e[0].method).toUpperCase():e[1]&&e[1].method?String(e[1].method).toUpperCase():"GET"}function Re(e){return void 0===e&&(e=[]),"string"==typeof e[0]?e[0]:"Request"in je&&Object(u.g)(e[0],Request)?e[0].url:String(e[0])}var De,Ie,Me=0;function Le(e,t,n){return void 0===n&&(n=!1),function(r){De=void 0,r&&Ie!==r&&(Ie=r,Me&&clearTimeout(Me),n?Me=setTimeout((function(){t({event:r,name:e})})):t({event:r,name:e}))}}function Be(e){return function(t){var n;try{n=t.target}catch(e){return}var r=n&&n.tagName;r&&("INPUT"===r||"TEXTAREA"===r||n.isContentEditable)&&(De||Le("input",e)(t),clearTimeout(De),De=setTimeout((function(){De=void 0}),1e3))}}var Fe=null;var Ue=null;var ze=n(59),He=function(){function e(t){this.name=e.id,this._options=Object(s.a)({console:!0,dom:!0,fetch:!0,history:!0,sentry:!0,xhr:!0},t)}return e.prototype.addSentryBreadcrumb=function(e){this._options.sentry&&j().addBreadcrumb({category:"sentry."+("transaction"===e.type?"transaction":"event"),event_id:e.event_id,level:e.level,message:Object(f.d)(e)},{event:e})},e.prototype.setupOnce=function(){var e=this;this._options.console&&Ae({callback:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];e._consoleBreadcrumb.apply(e,Object(s.d)(t))},type:"console"}),this._options.dom&&Ae({callback:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];e._domBreadcrumb.apply(e,Object(s.d)(t))},type:"dom"}),this._options.xhr&&Ae({callback:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];e._xhrBreadcrumb.apply(e,Object(s.d)(t))},type:"xhr"}),this._options.fetch&&Ae({callback:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];e._fetchBreadcrumb.apply(e,Object(s.d)(t))},type:"fetch"}),this._options.history&&Ae({callback:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];e._historyBreadcrumb.apply(e,Object(s.d)(t))},type:"history"})},e.prototype._consoleBreadcrumb=function(e){var t={category:"console",data:{arguments:e.args,logger:"console"},level:z.fromString(e.level),message:Object(A.b)(e.args," ")};if("assert"===e.level){if(!1!==e.args[0])return;t.message="Assertion failed: "+(Object(A.b)(e.args.slice(1)," ")||"console.assert"),t.data.arguments=e.args.slice(1)}j().addBreadcrumb(t,{input:e.args,level:e.level})},e.prototype._domBreadcrumb=function(e){var t;try{t=e.event.target?Object(ze.a)(e.event.target):Object(ze.a)(e.event)}catch(e){t="<unknown>"}0!==t.length&&j().addBreadcrumb({category:"ui."+e.name,message:t},{event:e.event,name:e.name})},e.prototype._xhrBreadcrumb=function(e){if(e.endTimestamp){if(e.xhr.__sentry_own_request__)return;var t=e.xhr.__sentry_xhr__||{},n=t.method,r=t.url,o=t.status_code,a=t.body;j().addBreadcrumb({category:"xhr",data:{method:n,url:r,status_code:o},type:"http"},{xhr:e.xhr,input:a})}else;},e.prototype._fetchBreadcrumb=function(e){e.endTimestamp&&(e.fetchData.url.match(/sentry_key/)&&"POST"===e.fetchData.method||(e.error?j().addBreadcrumb({category:"fetch",data:e.fetchData,level:z.Error,type:"http"},{data:e.error,input:e.args}):j().addBreadcrumb({category:"fetch",data:Object(s.a)(Object(s.a)({},e.fetchData),{status_code:e.response.status}),type:"http"},{input:e.args,response:e.response})))},e.prototype._historyBreadcrumb=function(e){var t=Object(f.e)(),n=e.from,r=e.to,o=Object(f.h)(t.location.href),a=Object(f.h)(n),i=Object(f.h)(r);a.path||(a=o),o.protocol===i.protocol&&o.host===i.host&&(r=i.relative),o.protocol===a.protocol&&o.host===a.host&&(n=a.relative),j().addBreadcrumb({category:"navigation",data:{from:n,to:r}})},e.id="Breadcrumbs",e}(),Ge=function(e){function t(t){return void 0===t&&(t={}),e.call(this,he,t)||this}return Object(s.b)(t,e),t.prototype.showReportDialog=function(e){void 0===e&&(e={}),Object(f.e)().document&&(this._isEnabled()?Ee(Object(s.a)(Object(s.a)({},e),{dsn:e.dsn||this.getDsn()})):y.error("Trying to call showReportDialog with Sentry Client disabled"))},t.prototype._prepareEvent=function(t,n,r){return t.platform=t.platform||"javascript",t.sdk=Object(s.a)(Object(s.a)({},t.sdk),{name:"sentry.javascript.browser",packages:Object(s.d)(t.sdk&&t.sdk.packages||[],[{name:"npm:@sentry/browser",version:"5.27.4"}]),version:"5.27.4"}),e.prototype._prepareEvent.call(this,t,n,r)},t.prototype._sendEvent=function(t){var n=this.getIntegration(He);n&&n.addSentryBreadcrumb(t),e.prototype._sendEvent.call(this,t)},t}(U),We=["EventTarget","Window","Node","ApplicationCache","AudioTrackList","ChannelMergerNode","CryptoOperation","EventSource","FileReader","HTMLUnknownElement","IDBDatabase","IDBRequest","IDBTransaction","KeyOperation","MediaController","MessagePort","ModalWindow","Notification","SVGElementInstance","Screen","TextTrack","TextTrackCue","TextTrackList","WebSocket","WebSocketWorker","Worker","XMLHttpRequest","XMLHttpRequestEventTarget","XMLHttpRequestUpload"],qe=function(){function e(t){this.name=e.id,this._options=Object(s.a)({XMLHttpRequest:!0,eventTarget:!0,requestAnimationFrame:!0,setInterval:!0,setTimeout:!0},t)}return e.prototype.setupOnce=function(){var e=Object(f.e)();(this._options.setTimeout&&Object(_.c)(e,"setTimeout",this._wrapTimeFunction.bind(this)),this._options.setInterval&&Object(_.c)(e,"setInterval",this._wrapTimeFunction.bind(this)),this._options.requestAnimationFrame&&Object(_.c)(e,"requestAnimationFrame",this._wrapRAF.bind(this)),this._options.XMLHttpRequest&&"XMLHttpRequest"in e&&Object(_.c)(XMLHttpRequest.prototype,"send",this._wrapXHR.bind(this)),this._options.eventTarget)&&(Array.isArray(this._options.eventTarget)?this._options.eventTarget:We).forEach(this._wrapEventTarget.bind(this))},e.prototype._wrapTimeFunction=function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t[0];return t[0]=Oe(r,{mechanism:{data:{function:Object(xe.a)(e)},handled:!0,type:"instrument"}}),e.apply(this,t)}},e.prototype._wrapRAF=function(e){return function(t){return e.call(this,Oe(t,{mechanism:{data:{function:"requestAnimationFrame",handler:Object(xe.a)(e)},handled:!0,type:"instrument"}}))}},e.prototype._wrapEventTarget=function(e){var t=Object(f.e)(),n=t[e]&&t[e].prototype;n&&n.hasOwnProperty&&n.hasOwnProperty("addEventListener")&&(Object(_.c)(n,"addEventListener",(function(t){return function(n,r,o){try{"function"==typeof r.handleEvent&&(r.handleEvent=Oe(r.handleEvent.bind(r),{mechanism:{data:{function:"handleEvent",handler:Object(xe.a)(r),target:e},handled:!0,type:"instrument"}}))}catch(e){}return t.call(this,n,Oe(r,{mechanism:{data:{function:"addEventListener",handler:Object(xe.a)(r),target:e},handled:!0,type:"instrument"}}),o)}})),Object(_.c)(n,"removeEventListener",(function(e){return function(t,n,r){var o,a=n;try{var i=null===(o=a)||void 0===o?void 0:o.__sentry_wrapped__;i&&e.call(this,t,i,r)}catch(e){}return e.call(this,t,a,r)}})))},e.prototype._wrapXHR=function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=this,o=["onload","onerror","onprogress","onreadystatechange"];return o.forEach((function(e){e in r&&"function"==typeof r[e]&&Object(_.c)(r,e,(function(t){var n={mechanism:{data:{function:e,handler:Object(xe.a)(t)},handled:!0,type:"instrument"}};return t.__sentry_original__&&(n.mechanism.data.handler=Object(xe.a)(t.__sentry_original__)),Oe(t,n)}))})),e.apply(this,t)}},e.id="TryCatch",e}(),Ve=function(){function e(t){this.name=e.id,this._onErrorHandlerInstalled=!1,this._onUnhandledRejectionHandlerInstalled=!1,this._options=Object(s.a)({onerror:!0,onunhandledrejection:!0},t)}return e.prototype.setupOnce=function(){Error.stackTraceLimit=50,this._options.onerror&&(y.log("Global Handler attached: onerror"),this._installGlobalOnErrorHandler()),this._options.onunhandledrejection&&(y.log("Global Handler attached: onunhandledrejection"),this._installGlobalOnUnhandledRejectionHandler())},e.prototype._installGlobalOnErrorHandler=function(){var t=this;this._onErrorHandlerInstalled||(Ae({callback:function(n){var r=n.error,o=j(),a=o.getIntegration(e),i=r&&!0===r.__sentry_own_request__;if(a&&!we()&&!i){var s=o.getClient(),c=Object(u.i)(r)?t._eventFromIncompleteOnError(n.msg,n.url,n.line,n.column):t._enhanceEventWithInitialFrame(ae(r,void 0,{attachStacktrace:s&&s.getOptions().attachStacktrace,rejection:!1}),n.url,n.line,n.column);Object(f.a)(c,{handled:!1,type:"onerror"}),o.captureEvent(c,{originalException:r})}},type:"error"}),this._onErrorHandlerInstalled=!0)},e.prototype._installGlobalOnUnhandledRejectionHandler=function(){var t=this;this._onUnhandledRejectionHandlerInstalled||(Ae({callback:function(n){var r=n;try{"reason"in n?r=n.reason:"detail"in n&&"reason"in n.detail&&(r=n.detail.reason)}catch(e){}var o=j(),a=o.getIntegration(e),i=r&&!0===r.__sentry_own_request__;if(!a||we()||i)return!0;var s=o.getClient(),c=Object(u.i)(r)?t._eventFromIncompleteRejection(r):ae(r,void 0,{attachStacktrace:s&&s.getOptions().attachStacktrace,rejection:!0});c.level=z.Error,Object(f.a)(c,{handled:!1,type:"onunhandledrejection"}),o.captureEvent(c,{originalException:r})},type:"unhandledrejection"}),this._onUnhandledRejectionHandlerInstalled=!0)},e.prototype._eventFromIncompleteOnError=function(e,t,n,r){var o,a=Object(u.e)(e)?e.message:e;if(Object(u.k)(a)){var i=a.match(/^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i);i&&(o=i[1],a=i[2])}var s={exception:{values:[{type:o||"Error",value:a}]}};return this._enhanceEventWithInitialFrame(s,t,n,r)},e.prototype._eventFromIncompleteRejection=function(e){return{exception:{values:[{type:"UnhandledRejection",value:"Non-Error promise rejection captured with value: "+e}]}}},e.prototype._enhanceEventWithInitialFrame=function(e,t,n,r){e.exception=e.exception||{},e.exception.values=e.exception.values||[],e.exception.values[0]=e.exception.values[0]||{},e.exception.values[0].stacktrace=e.exception.values[0].stacktrace||{},e.exception.values[0].stacktrace.frames=e.exception.values[0].stacktrace.frames||[];var o=isNaN(parseInt(r,10))?void 0:r,a=isNaN(parseInt(n,10))?void 0:n,i=Object(u.k)(t)&&t.length>0?t:Object(f.f)();return 0===e.exception.values[0].stacktrace.frames.length&&e.exception.values[0].stacktrace.frames.push({colno:o,filename:i,function:"?",in_app:!0,lineno:a}),e},e.id="GlobalHandlers",e}(),Ye=function(){function e(t){void 0===t&&(t={}),this.name=e.id,this._key=t.key||"cause",this._limit=t.limit||5}return e.prototype.setupOnce=function(){m((function(t,n){var r=j().getIntegration(e);return r?r._handler(t,n):t}))},e.prototype._handler=function(e,t){if(!(e.exception&&e.exception.values&&t&&Object(u.g)(t.originalException,Error)))return e;var n=this._walkErrorTree(t.originalException,this._key);return e.exception.values=Object(s.d)(n,e.exception.values),e},e.prototype._walkErrorTree=function(e,t,n){if(void 0===n&&(n=[]),!Object(u.g)(e[t],Error)||n.length+1>=this._limit)return n;var r=ne(J(e[t]));return this._walkErrorTree(e[t],t,Object(s.d)([r],n))},e.id="LinkedErrors",e}(),$e=Object(f.e)(),Xe=function(){function e(){this.name=e.id}return e.prototype.setupOnce=function(){m((function(t){var n,r,o;if(j().getIntegration(e)){if(!$e.navigator&&!$e.location&&!$e.document)return t;var a=(null===(n=t.request)||void 0===n?void 0:n.url)||(null===(r=$e.location)||void 0===r?void 0:r.href),i=($e.document||{}).referrer,u=($e.navigator||{}).userAgent,c=Object(s.a)(Object(s.a)(Object(s.a)({},null===(o=t.request)||void 0===o?void 0:o.headers),i&&{Referer:i}),u&&{"User-Agent":u}),l=Object(s.a)(Object(s.a)({},a&&{url:a}),{headers:c});return Object(s.a)(Object(s.a)({},t),{request:l})}return t}))},e.id="UserAgent",e}(),Ke=[new o.InboundFilters,new o.FunctionToString,new qe,new He,new Ve,new Ye,new Xe];function Qe(e){if(void 0===e&&(e={}),void 0===e.defaultIntegrations&&(e.defaultIntegrations=Ke),void 0===e.release){var t=Object(f.e)();t.SENTRY_RELEASE&&t.SENTRY_RELEASE.id&&(e.release=t.SENTRY_RELEASE.id)}void 0===e.autoSessionTracking&&(e.autoSessionTracking=!1),function(e,t){!0===t.debug&&y.enable();var n=j(),r=new e(t);n.bindClient(r)}(Ge,e),e.autoSessionTracking&&function(){var e=Object(f.e)(),t=j(),n="complete"===document.readyState,r=!1,o=function(){r&&n&&t.endSession()},a=function(){n=!0,o(),e.removeEventListener("load",a)};t.startSession(),n||e.addEventListener("load",a);try{var i=new PerformanceObserver((function(e,t){e.getEntries().forEach((function(e){"first-contentful-paint"===e.name&&e.startTime<s&&(t.disconnect(),r=!0,o())}))})),s="hidden"===document.visibilityState?0:1/0;document.addEventListener("visibilitychange",(function(e){s=Math.min(s,e.timeStamp)}),{once:!0}),i.observe({type:"paint",buffered:!0})}catch(e){r=!0,o()}}()}var Ze=function(){return Qe({dsn:"https://0aafb2216ca24114a9dd7450f4fcca7a@sentry.ostrovok.in/102",release:"1.15.0"})}},function(e,t,n){"use strict";var r=n(30),o=n(27),a=n(51);function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var c,l=["en"];!function(e){e[e.Sun=0]="Sun",e[e.Mon=1]="Mon"}(c||(c={}));var f,d={locale:"ru",weekStartsOn:1},p=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:d,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case a.a.SET_LOCALE:return s(s({},e),{},{locale:"sr"===t.locale?"sr-Latn":t.locale,weekStartsOn:l.includes(t.locale)?c.Sun:c.Mon});default:return e}};function m(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(Object(n),!0).forEach((function(t){g(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}!function(e){e.SET_AVIA_SUGGEST="SET_AVIA_SUGGEST"}(f||(f={}));var v,b={suggests:{}},y=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:b,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case f.SET_AVIA_SUGGEST:return{suggests:h(h({},e.suggests),{},g({},t.query,t.suggest))};default:return e}};function w(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?w(Object(n),!0).forEach((function(t){O(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):w(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function O(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}!function(e){e.SET_TRANSFER_SUGGEST="SET_TRANSFER_SUGGEST"}(v||(v={}));var E,S={suggests:{}},x=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:S,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case v.SET_TRANSFER_SUGGEST:return{suggests:_(_({},e.suggests),{},O({},t.query,t.suggest))};default:return e}};function j(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function k(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?j(Object(n),!0).forEach((function(t){T(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):j(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function T(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}!function(e){e.SET_SUGGEST="SET_SUGGEST"}(E||(E={}));var C,A={suggests:{}},N=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:A,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case E.SET_SUGGEST:return{suggests:k(k({},e.suggests),{},T({},t.query,t.suggest))};default:return e}};function P(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function R(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?P(Object(n),!0).forEach((function(t){D(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):P(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function D(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}!function(e){e.SET_HOLIDAYS="SET_HOLIDAYS",e.SET_HOLIDAYS_LOADING="SET_HOLIDAYS_LOADING"}(C||(C={}));var I,M={list:null,loading:!1},L=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:M,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case C.SET_HOLIDAYS:return{list:t.list||e.list,loading:!1};case C.SET_HOLIDAYS_LOADING:return R(R({},e),{},{loading:t.loading});default:return e}};!function(e){e.SET_COUNTRIES="SET_COUNTRIES",e.SET_LOADING="SET_LOADING",e.INC_TRY_COUNT="INC_TRY_COUNT"}(I||(I={}));function B(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function F(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?B(Object(n),!0).forEach((function(t){U(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):B(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function U(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var z,H={list:[],loading:!1,tryCount:0},G=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:H,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case I.SET_COUNTRIES:return F(F({},e),{},{list:t.countries,loading:!1});case I.SET_LOADING:return F(F({},e),{},{loading:t.loading});case I.INC_TRY_COUNT:return F(F({},e),{},{tryCount:e.tryCount+1});default:return e}};!function(e){e.SET_CITIZENSHIP="SET_CITIZENSHIP"}(z||(z={}));function W(e){return function(e){if(Array.isArray(e))return q(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return q(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return q(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function q(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var V=function(){var e={popular:[],value:null};try{return JSON.parse(localStorage.getItem("citizenship")||"")||e}catch(t){return e}},Y=function(e,t){return t?e.popular.some((function(e){return e.code===t.code}))?{popular:e.popular,value:t}:{popular:[].concat(W(e.popular),[t]).slice(-3),value:t}:{popular:e.popular,value:null}},$=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:V(),t=arguments.length>1?arguments[1]:void 0;switch(t.type){case z.SET_CITIZENSHIP:return Y(e,t.country);default:return e}},X=n(52),K={},Q=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:K,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case X.a.SET_SETTINGS:return t.settings;default:return e}};t.a=Object(r.c)({theme:o.b,l10n:p,aviaDestination:y,transferDestination:x,destination:N,holidays:L,countries:G,citizenship:$,settings:Q})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return[].slice.call(e.querySelectorAll("*"),0).filter(i)};
/*!
 * Adapted from jQuery UI core
 *
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/ui-core/
 */
var r=/input|select|textarea|button|object/;function o(e){var t=e.offsetWidth<=0&&e.offsetHeight<=0;if(t&&!e.innerHTML)return!0;var n=window.getComputedStyle(e);return t?"visible"!==n.getPropertyValue("overflow")||e.scrollWidth<=0&&e.scrollHeight<=0:"none"==n.getPropertyValue("display")}function a(e,t){var n=e.nodeName.toLowerCase();return(r.test(n)&&!e.disabled||"a"===n&&e.href||t)&&function(e){for(var t=e;t&&t!==document.body;){if(o(t))return!1;t=t.parentNode}return!0}(e)}function i(e){var t=e.getAttribute("tabindex");null===t&&(t=void 0);var n=isNaN(t);return(n||t>=0)&&a(e,!n)}e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.assertNodeList=u,t.setElement=function(e){var t=e;if("string"==typeof t&&i.canUseDOM){var n=document.querySelectorAll(t);u(n,t),t="length"in n?n[0]:n}return s=t||s},t.validateElement=c,t.hide=function(e){c(e)&&(e||s).setAttribute("aria-hidden","true")},t.show=function(e){c(e)&&(e||s).removeAttribute("aria-hidden")},t.documentNotReadyOrSSRTesting=function(){s=null},t.resetForTesting=function(){s=null};var r,o=n(158),a=(r=o)&&r.__esModule?r:{default:r},i=n(67);var s=null;function u(e,t){if(!e||!e.length)throw new Error("react-modal: No elements were found for selector "+t+".")}function c(e){return!(!e&&!s)||((0,a.default)(!1,["react-modal: App element is not defined.","Please use `Modal.setAppElement(el)` or set `appElement={el}`.","This is needed so screen readers don't see main content","when modal is opened. It is not recommended, but you can opt-out","by setting `ariaHideApp={false}`."].join(" ")),!1)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=new function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.register=function(e){-1===t.openInstances.indexOf(e)&&(t.openInstances.push(e),t.emit("register"))},this.deregister=function(e){var n=t.openInstances.indexOf(e);-1!==n&&(t.openInstances.splice(n,1),t.emit("deregister"))},this.subscribe=function(e){t.subscribers.push(e)},this.emit=function(e){t.subscribers.forEach((function(n){return n(e,t.openInstances.slice())}))},this.openInstances=[],this.subscribers=[]};t.default=r,e.exports=t.default},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(23);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var a;if(n)a=n(t);else if(r.isURLSearchParams(t))a=t.toString();else{var i=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))})))})),a=i.join("&")}if(a){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(23),o=n(168),a={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,u={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(s=n(98)),s),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){u.headers[e]=r.merge(a)})),e.exports=u}).call(this,n(60))},function(e,t,n){"use strict";var r=n(23),o=n(169),a=n(95),i=n(171),s=n(174),u=n(175),c=n(99);e.exports=function(e){return new Promise((function(t,l){var f=e.data,d=e.headers;r.isFormData(f)&&delete d["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var m=e.auth.username||"",h=e.auth.password||"";d.Authorization="Basic "+btoa(m+":"+h)}var g=i(e.baseURL,e.url);if(p.open(e.method.toUpperCase(),a(g,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?s(p.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:n,config:e,request:p};o(t,l,r),p=null}},p.onabort=function(){p&&(l(c("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){l(c("Network Error",e,null,p)),p=null},p.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),l(c(t,e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var v=n(176),b=(e.withCredentials||u(g))&&e.xsrfCookieName?v.read(e.xsrfCookieName):void 0;b&&(d[e.xsrfHeaderName]=b)}if("setRequestHeader"in p&&r.forEach(d,(function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete d[t]:p.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(p.withCredentials=!!e.withCredentials),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),l(e),p=null)})),void 0===f&&(f=null),p.send(f)}))}},function(e,t,n){"use strict";var r=n(170);e.exports=function(e,t,n,o,a){var i=new Error(e);return r(i,t,n,o,a)}},function(e,t,n){"use strict";var r=n(23);e.exports=function(e,t){t=t||{};var n={},o=["url","method","params","data"],a=["headers","auth","proxy"],i=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];r.forEach(o,(function(e){void 0!==t[e]&&(n[e]=t[e])})),r.forEach(a,(function(o){r.isObject(t[o])?n[o]=r.deepMerge(e[o],t[o]):void 0!==t[o]?n[o]=t[o]:r.isObject(e[o])?n[o]=r.deepMerge(e[o]):void 0!==e[o]&&(n[o]=e[o])})),r.forEach(i,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])}));var s=o.concat(a).concat(i),u=Object.keys(t).filter((function(e){return-1===s.indexOf(e)}));return r.forEach(u,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])})),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){e.exports={tooltip:"TooltipContent__tooltip--3ckme",tooltip_shown:"TooltipContent__tooltip_shown--3dzm8",tooltipWrapper:"TooltipContent__tooltipWrapper--2T5U1",tooltipWrapper_titled:"TooltipContent__tooltipWrapper_titled--2D7VL",tooltipUnderlay:"TooltipContent__tooltipUnderlay--2SYri","tooltipUnderlay_position_top-start":"TooltipContent__tooltipUnderlay_position_top-start--2fCbe",tooltipUnderlay_position_top:"TooltipContent__tooltipUnderlay_position_top--JG4Cz","tooltipUnderlay_position_top-end":"TooltipContent__tooltipUnderlay_position_top-end--2oIeE","tooltipUnderlay_position_right-start":"TooltipContent__tooltipUnderlay_position_right-start--21cqn",tooltipUnderlay_position_right:"TooltipContent__tooltipUnderlay_position_right--3lic4","tooltipUnderlay_position_right-end":"TooltipContent__tooltipUnderlay_position_right-end--hgSGf","tooltipUnderlay_position_left-start":"TooltipContent__tooltipUnderlay_position_left-start--37wZl",tooltipUnderlay_position_left:"TooltipContent__tooltipUnderlay_position_left--pUTSg","tooltipUnderlay_position_left-end":"TooltipContent__tooltipUnderlay_position_left-end--9NuCG","tooltipUnderlay_position_bottom-start":"TooltipContent__tooltipUnderlay_position_bottom-start--RAgxt",tooltipUnderlay_position_bottom:"TooltipContent__tooltipUnderlay_position_bottom--1jrmm","tooltipUnderlay_position_bottom-end":"TooltipContent__tooltipUnderlay_position_bottom-end--2xowZ",tooltipTitle:"TooltipContent__tooltipTitle--1jS5Y"}},function(e,t,n){e.exports={root:"Modal__root--5gHPo",overlay:"Modal__overlay--3hVK6",overlay_popup:"Modal__overlay_popup--cLjZ3"}},function(e,t,n){e.exports={card:"Card__card--tyU4C",card_padding_xs:"Card__card_padding_xs--2Ukcx",card_padding_s:"Card__card_padding_s--QcdhH",card_padding_m:"Card__card_padding_m--1zd6i",card_shadowSize_s:"Card__card_shadowSize_s--3U0_5",card_shadowSize_m:"Card__card_shadowSize_m--12HVH",card_shadowSize_l:"Card__card_shadowSize_l--1gx5i"}},function(e,t,n){e.exports={hint:"Hint__hint--1I03c",hint_variant_regular:"Hint__hint_variant_regular--1bInb",hint_variant_mini:"Hint__hint_variant_mini--Z1kyu",hintTitle:"Hint__hintTitle--1KN4L",mobileCloseButton:"Hint__mobileCloseButton--2cqoG"}},function(e,t,n){e.exports={titleWrapper:"Input__titleWrapper--29PGx",title:"Input__title--Q_FYk",wrapper:"Input__wrapper--3R5L6",wrapper_wide:"Input__wrapper_wide--acKPg",label:"Input__label--35kjM",label_size_xs:"Input__label_size_xs--3OmMG",label_size_s:"Input__label_size_s--Cu6Tr",label_size_m:"Input__label_size_m--2-scr",label_size_l:"Input__label_size_l--9pbcw",label_hasError:"Input__label_hasError--3HvBj",control:"Input__control--qjCAR",label_disabled:"Input__label_disabled--3LSa0",label_required:"Input__label_required--30mpz",label_readOnly:"Input__label_readOnly--23mGu",label_focused:"Input__label_focused--2Qitf",control_hasPlaceholder:"Input__control_hasPlaceholder--3Nnv1",controlLine:"Input__controlLine--2RtYN",controlLine_reserveIconPlace:"Input__controlLine_reserveIconPlace--3w3-_",hint:"Input__hint--1pZ3R",icon:"Input__icon--23fwM",icon_clickable:"Input__icon_clickable--8yIJx",error:"Input__error--7YH6-"}},function(e,t,n){e.exports={title:"Title__title--27B0c",title_size_s:"Title__title_size_s--wkjwg",title_size_m:"Title__title_size_m--2iEW7",title_size_l:"Title__title_size_l--2Q3d1"}},function(e,t,n){e.exports={buttonIcon:"ButtonIcon__buttonIcon--sBrNd"}},function(e,t,n){e.exports={dropdown:"Dropdown__dropdown--2VJKr",dropdown_fullWidth:"Dropdown__dropdown_fullWidth--2iBCg",exiting:"Dropdown__exiting--2kHv2",exited:"Dropdown__exited--1CSIQ",entered:"Dropdown__entered--3R_0A"}},function(e,t,n){e.exports={contextMenu:"ContextMenu__contextMenu--1N4QR",dropdown:"ContextMenu__dropdown--2EB19",title:"ContextMenu__title--ujdNC",optionContainer:"ContextMenu__optionContainer--YUX9S",optionItem:"ContextMenu__optionItem--1FO6Z",dotsContainer:"ContextMenu__dotsContainer--1_mFM",closeButton:"ContextMenu__closeButton--3_FVK"}},function(e,t,n){e.exports={button:"LanguageSwitcher__button--1YFit",label:"LanguageSwitcher__label--684ur"}},function(e,t,n){e.exports={inner:"Logo__inner--2pdZD",logo:"Logo__logo--3ytBm",logo_size_s:"Logo__logo_size_s--7h4On",logo_size_m:"Logo__logo_size_m--1O88e",logo_size_l:"Logo__logo_size_l--1ZL2A"}},function(e,t,n){e.exports=n(163)},function(e,t,n){"use strict";var r=n(0),o=n.n(r),a=(n(113),n(50)),i=function(e){return{theme:e,type:a.a.SET_THEME}},s=(n(52),n(51),n(37)),u={"palette-black":"#2d3137","palette-dark":"#868686","palette-gray":"#c8c8c8","palette-light":"#e5e5e5","palette-ulight":"#f4f4f4","palette-white":"#ffffff","palette-disabled":"#afafaf","palette-main":"#ffdc82","palette-sec":"#e5e5e5",border:"rgba(45, 49, 55, 0.12)","disabled-overlay":"rgba(246, 246, 246, 0.8)","disabled-filter":"grayscale(0.5) opacity(0.4)","header-bg":"#ffffff","header-bg-secondary":"#f9f9f9","header-main":"#868686","header-secondary":"#c8c8c8","header-menu-typo":"#868686","header-active":"#2d3137","button-primary-bg":"#ffdc82","button-primary-typo":"#2d3137","button-primary-hover-bg":"#ffd26d","button-primary-active-bg":"#ffcb5e","button-secondary-bg":"#e5e5e5","button-secondary-typo":"#2d3137","button-secondary-hover-bg":"#c8c8c8","button-secondary-active-bg":"#b0b0b0","button-outline-border":"rgba(45, 49, 55, 0.15)","button-outline-typo":"#2d3137","button-outline-hover-border":"#ffd26d","button-outline-active-border":"#ffcb5e","multibutton-border":"rgba(45, 49, 55, 0.12)","multibutton-on-bg":"#ffffff","multibutton-on-typo":"#2d3137","multibutton-off-bg":"#f4f4f4","multibutton-off-typo":"#868686","field-bg":"#ffffff","field-typo":"#2d3137","field-placeholder":"#afafaf","field-label":"#2d3137","field-border":"rgba(45, 49, 55, 0.12)","field-hover-border":"rgba(45, 49, 55, 0.4)","field-active-border":"rgba(45, 49, 55, 0.15)","dropdown-selected-bg":"rgba(255, 220, 130, 0.4)","box-border":"rgba(45, 49, 55, 0.12)","box-bg":"#ffffff","box-on-bg":"#ffdc82","box-on-typo":"#2d3137","box-hover-border":"#ffd26d","box-active-bg":"#2d3137","brand-logo-partner":"","calendar-holiday-color-edge":"#be0000","calendar-holiday-color":"#be0000",link:"#4086e4","link-hover":"#ce2121","link-active":"#ce2121",text:"#2d3137","text-secondary":"#868686","text-alt":"#ffffff","block-bg":"#ffffff","block-bg-secondary":"#f4f4f4","block-bg-alt":"#2d3137",shadow:"rgba(45, 49, 55, 0.3)",alert:"#ce2121","alert-bg":"rgba(206, 33, 33, 0.1)","alert-outline":"rgba(206, 33, 33, 0.4)",success:"#53b124","success-bg":"rgba(83, 175, 36, 0.1)","highlight-bg":"#fff8e6","focus-outline":"rgba(255, 220, 130, 0.4)","fidelity-dreams":"#ff6464","fidelity-ratehawk-points":"#4086e4","fidelity-zen-points":"#5c77cc","fidelity-segment-black":"#464a50","fidelity-segment-gold":"#ffc937","fidelity-segment-platinum":"#d6cdc0","fidelity-segment-silver":"#b3c6d8","social-facebook-color":"#1382ff","social-telegram-color":"#23a2e3","social-viber-color":"#675bac","social-apple-color":"#2d3137","z-index-start":"1","z-index-tip":"2","z-index-popup":"12","z-index-popup-important":"22"};function c(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return l(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}t.a=function(e){var t,n=e.children;t=u,s.a.dispatch(i(t));var r=Object.entries(u);return o.a.createElement(o.a.Fragment,null,o.a.createElement("style",null,"\n        :root,\n        :host {\n          ".concat(r.reduce((function(e,t){var n=c(t,2),r=n[0],o=n[1];return"".concat(e," --").concat(r,": ").concat(o,";\n")}),"").trim(),"\n        }\n      ")),n)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(0),o=n(42),a=n(6);function i(){const e=Object(r.useContext)(o.a);return Object(a.h)(e),e}},function(e,t,n){"use strict";n.d(t,"a",(function(){return C})),n.d(t,"c",(function(){return N}));var r=n(2),o=n.n(r),a=n(0),i=n.n(a),s=n(3),u=n.n(s),c=n(115),l=n(49),f=n(9),d=n(4),p=n(34),m=n(16),h=n(54),g=n(26),v=n(43),b=n(5),y=n(22),w=n(123),_=n.n(w);function O(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function E(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?O(Object(n),!0).forEach((function(t){T(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):O(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function S(e,t,n,r,o,a,i){try{var s=e[a](i),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function x(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){S(a,r,o,i,s,"next",e)}function s(e){S(a,r,o,i,s,"throw",e)}i(void 0)}))}}function j(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return k(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return k(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function k(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function T(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var C,A=u()(_.a);!function(e){e.LARGE="large",e.MEDIUM="medium",e.SMALL="small"}(C||(C={}));var N=function(e){var t;return T(t={},f.a.AGD,{name:f.d.AGD,setting:y.b.NET,percent:y.a}),T(t,f.a.BDO,{name:f.d.BDO,setting:y.b.GROSS,percent:e}),T(t,f.a.BOO,{name:f.d.BOO,setting:y.b.NET,percent:y.a}),T(t,f.a.ERA,{name:f.d.ERA,setting:y.b.GROSS,percent:e}),T(t,f.a.GGB,{name:f.d.GGB,setting:y.b.GROSS,percent:e}),T(t,f.a.HTP,{name:f.d.HTP,setting:y.b.GROSS,percent:e}),T(t,f.a.HST,{name:f.d.HST,setting:y.b.GROSS,percent:e}),T(t,f.a.ITC,{name:f.d.ITC,setting:y.b.GROSS,percent:e}),T(t,f.a.SXT,{name:f.d.SXT,setting:y.b.GROSS,percent:e}),T(t,f.a.TBO,{name:f.d.TBO,setting:y.b.GROSS,percent:e}),T(t,f.a.W2M,{name:f.d.W2M,setting:y.b.GROSS,percent:e}),t};t.b=function(e){var t,n=e.onClose,r=e.size,s=void 0===r?C.LARGE:r,u=j(Object(a.useState)(null),2),w=u[0],_=u[1],O=j(Object(a.useState)(!1),2),S=O[0],k=O[1],P=j(Object(a.useState)(!0),2),R=P[0],D=P[1],I=j(Object(a.useState)(""),2),M=I[0],L=I[1],B=j(Object(a.useState)(!1),2),F=B[0],U=B[1],z=Object(a.useRef)(null),H=Object(a.useRef)(y.a),G=Object(c.a)(),W=Object(p.a)(!1).sendEvent,q=j(Object(a.useState)((T(t={},f.a.AGD,!1),T(t,f.a.BDO,!1),T(t,f.a.BOO,!1),T(t,f.a.ERA,!1),T(t,f.a.GGB,!1),T(t,f.a.HTP,!1),T(t,f.a.HST,!1),T(t,f.a.ITC,!1),T(t,f.a.SXT,!1),T(t,f.a.TBO,!1),T(t,f.a.W2M,!1),t)),2),V=q[0],Y=q[1],$=function(){var e=x(o.a.mark((function e(t){var n;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(b.a)(d.a.PRICE_SETTINGS);case 2:n=e.sent,_(n||N(t));case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),X=function(){var e=x(o.a.mark((function e(){return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!Object.keys(V).every((function(e){return!V[e]}))){e.next=4;break}return e.next=3,Object(b.c)(d.a.PRICE_SETTINGS,w);case 3:n();case 4:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),K=function(e,t){_((function(n){return E(E({},n),{},T({},e,E(E({},n[e]),t)))}))},Q=function(e,t){Y((function(n){return E(E({},n),{},T({},e,t))}))};return Object(a.useEffect)((function(){x(o.a.mark((function e(){var t,n;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(b.a)(d.a.LIVE_SETTINGS);case 2:return t=e.sent,n=(null==t?void 0:t[l.b.B2B_RECOMMENDED_MARKUP])||0,H.current=n,e.next=7,$(n);case 7:D(!1);case 8:case"end":return e.stop()}}),e)})))()}),[]),i.a.createElement("div",{className:A("priceSettings")()},i.a.createElement("div",{className:A("header")()},i.a.createElement("div",{onClick:n,className:A("iconCrossWrapper")()},i.a.createElement(v.a,{width:16,height:16})),i.a.createElement("h1",{className:A("title")()},G.formatMessage({id:"priceSettings.title"})),s!==C.SMALL&&i.a.createElement("p",{className:A("titleDescription")()},G.formatMessage({id:"priceSettings.titleDescription"})),i.a.createElement("p",{className:A("infoItem")()},i.a.createElement("b",null,"Net")," —"," ",G.formatMessage({id:"priceSettings.netDescription"})),i.a.createElement("p",{className:A("infoItem")()},i.a.createElement("b",null,"Gross")," —"," ",G.formatMessage({id:"priceSettings.grossDescription"}))),i.a.createElement("div",null,R?i.a.createElement("div",{className:A("loaderBlock")()},i.a.createElement(h.a,{view:m.c.LIGHT,className:A("loader")()})):i.a.createElement("div",{className:"".concat(A("rowsBlockWrapper")()," ").concat(s===C.MEDIUM?A("rowsBlockWrapperShortened")():"")},w&&i.a.createElement("div",{className:A("rowsBlock")()},Object.keys(w).map((function(e){var t=w[e];return t&&i.a.createElement(y.c,{key:e,competitorId:e,name:t.name,percent:t.percent,setting:t.setting,updateSettings:K,sendError:Q,hasError:V[e],userBasicMarkup:H.current})})))),s!==C.SMALL&&i.a.createElement("div",{className:A("suggestCompetitorBlock")()},i.a.createElement("p",{className:A("description")()},G.formatMessage({id:"priceSettings.suggestCompetitorDescription"})),i.a.createElement("form",{className:A("form")(),ref:z,onSubmit:function(e){return function(e){e.preventDefault(),!F&&M.trim()?(W("suggest_competitor",M.trim(),null),k(!0),z.current&&(z.current.style.display="none"),setTimeout((function(){k(!1),z.current&&(z.current.style.display="grid")}),5e3),L("")):U(!0)}(e)}},i.a.createElement(g.b,{className:A("input")(),hasError:F,value:M,onChange:function(e){var t;(t=e.target.value).trim()&&F&&U(!1),L(t)},size:g.a.XS,wide:!0}),i.a.createElement(m.d,{className:A("sendFormButton")(),view:m.c.LIGHT,wide:!0,size:m.a.S},G.formatMessage({id:"priceSettings.suggestCompetitorAddButton"}))),S&&i.a.createElement("p",{className:A("successMessage")()},G.formatMessage({id:"priceSettings.suggestCompetitorSuccess"}))),i.a.createElement(m.d,{onClick:X,wide:!0,size:m.a.S},G.formatMessage({id:"priceSettings.saveButton"}))))}},function(e,t,n){"use strict";e.exports=n(150)},function(e,t,n){"use strict";var r,o=n(7);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var i=(a(r={},o.a.EN,{lang:o.a.EN,messages:{"priceSettings.title":"Price comparison settings","priceSettings.titleDescription":"The types of prices on each site are different. Choose which one you want to compare and enter a percentage of the markup.","priceSettings.netDescription":"price without markup","priceSettings.grossDescription":"price with basic or custom markup","priceSettings.suggestCompetitorDescription":"Didn't find your supplier? Tell us and we will add it.","priceSettings.suggestCompetitorSuccess":"Thank you! We will integrate the supplier when we receive a sufficient number of requests.","priceSettings.suggestCompetitorAddButton":"Suggest supplier","priceSettings.saveButton":"Save and close"}}),a(r,o.a.RU,{lang:o.a.RU,messages:{"priceSettings.title":"Настройки сравнения цен","priceSettings.titleDescription":"Виды цен на каждом сайте отличаются. Выберите, какую именно вы хотите сравнить, и укажите процент наценки.","priceSettings.netDescription":"стоимость без наценки","priceSettings.grossDescription":"стоимость отеля с наценкой","priceSettings.suggestCompetitorDescription":"Не нашли нужного поставщика? Напишите нам, и мы его добавим.","priceSettings.suggestCompetitorSuccess":"Спасибо! Мы интегрируем поставщика, когда получим достаточное количество запросов.","priceSettings.suggestCompetitorAddButton":"Добавить поставщика","priceSettings.saveButton":"Сохранить и закрыть"}}),r);t.a=i},function(e,t,n){"use strict";var r,o=n(7);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var i=(a(r={},o.a.EN,{lang:o.a.EN,messages:{"settings.notificationsEnable":"Turn on notifications","settings.notificationsEnableForever":"forever","settings.notificationsEnable15Minutes":"for 15 minutes","settings.notificationsEnable1Hour":"for 1 hour","settings.notificationsEnable12Hours":"for 12 hours","settings.notificationsDisable":"Turn off notifications","settings.notificationsDisable15Minutes":"for 15 minutes","settings.notificationsDisable1Hour":"for 1 hour","settings.notificationsDisable12Hours":"for 12 hours","settings.notificationsDisableForever":"forever","settings.logOut":"Log out","settings.priceSettings":"Set up price comparison"}}),a(r,o.a.RU,{lang:o.a.RU,messages:{"settings.notificationsEnable":"Включить уведомления","settings.notificationsEnableForever":"навсегда","settings.notificationsEnable15Minutes":"на 15 минут","settings.notificationsEnable1Hour":"на 1 час","settings.notificationsEnable12Hours":"на 12 часов","settings.notificationsDisable":"Выключить уведомления","settings.notificationsDisable15Minutes":"на 15 минут","settings.notificationsDisable1Hour":"на 1 час","settings.notificationsDisable12Hours":"на 12 часов","settings.notificationsDisableForever":"я включу сам","settings.logOut":"Выйти из аккаунта","settings.priceSettings":"Настроить сравнение цен"}}),r);t.a=i},,function(e,t,n){e.exports={label:"ButtonRadio__label--12jtc",label_wide:"ButtonRadio__label_wide--3aNc3",control:"ButtonRadio__control--3Hv2F",button:"ButtonRadio__button--RBOG7",button_disabled:"ButtonRadio__button_disabled--1g8FV",button_checked:"ButtonRadio__button_checked--5wETx",button_wide:"ButtonRadio__button_wide--121pT"}},function(e,t,n){e.exports={row:"Row__row--1pUc2",controlls:"Row__controlls--XLnn-",rowTitle:"Row__rowTitle--mMPzo",radioGroup:"Row__radioGroup--2hYcg",ButtonRadio:"Row__ButtonRadio--mrXRK",inputWrapper:"Row__inputWrapper--3taUw",percentIcon:"Row__percentIcon--d_JYy",input:"Row__input--Mha-6",inputDisabled:"Row__inputDisabled--3zBbj"}},function(e,t,n){e.exports={priceSettings:"PriceSettings__priceSettings--2xGl1",title:"PriceSettings__title--3X_V7",titleDescription:"PriceSettings__titleDescription--goGJ8",header:"PriceSettings__header--2zqjH",iconCrossWrapper:"PriceSettings__iconCrossWrapper--1Tk8F",infoItem:"PriceSettings__infoItem--2pH0I",rowsBlock:"PriceSettings__rowsBlock--397qM",rowsBlockWrapper:"PriceSettings__rowsBlockWrapper--26CaE",rowsBlockWrapperShortened:"PriceSettings__rowsBlockWrapperShortened--1GxAI",form:"PriceSettings__form--rxhgT",sendFormButton:"PriceSettings__sendFormButton--3A9Om",description:"PriceSettings__description--2H4u_",successMessage:"PriceSettings__successMessage--2CA7u",suggestCompetitorBlock:"PriceSettings__suggestCompetitorBlock--3ywGB",input:"PriceSettings__input--vhKmV",loaderBlock:"PriceSettings__loaderBlock--1vPcu",loader:"PriceSettings__loader--3VC36"}},,function(e,t,n){var r=function(e){"use strict";var t=Object.prototype,n=t.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",a=r.asyncIterator||"@@asyncIterator",i=r.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof f?t:f,a=Object.create(o.prototype),i=new E(r||[]);return a._invoke=function(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return x()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var s=w(i,n);if(s){if(s===l)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=c(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===l)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}(e,n,i),a}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var l={};function f(){}function d(){}function p(){}var m={};m[o]=function(){return this};var h=Object.getPrototypeOf,g=h&&h(h(S([])));g&&g!==t&&n.call(g,o)&&(m=g);var v=p.prototype=f.prototype=Object.create(m);function b(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function y(e,t){var r;this._invoke=function(o,a){function i(){return new t((function(r,i){!function r(o,a,i,s){var u=c(e[o],e,a);if("throw"!==u.type){var l=u.arg,f=l.value;return f&&"object"==typeof f&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){r("next",e,i,s)}),(function(e){r("throw",e,i,s)})):t.resolve(f).then((function(e){l.value=e,i(l)}),(function(e){return r("throw",e,i,s)}))}s(u.arg)}(o,a,r,i)}))}return r=r?r.then(i,i):i()}}function w(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,w(e,t),"throw"===t.method))return l;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return l}var r=c(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,l;var o=r.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,l):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,l)}function _(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(_,this),this.reset(!0)}function S(e){if(e){var t=e[o];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,a=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return a.next=a}}return{next:x}}function x(){return{value:void 0,done:!0}}return d.prototype=v.constructor=p,p.constructor=d,d.displayName=s(p,i,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===d||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,p):(e.__proto__=p,s(e,i,"GeneratorFunction")),e.prototype=Object.create(v),e},e.awrap=function(e){return{__await:e}},b(y.prototype),y.prototype[a]=function(){return this},e.AsyncIterator=y,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new y(u(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},b(v),s(v,i,"Generator"),v[o]=function(){return this},v.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=S,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(O),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var s=n.call(a,"catchLoc"),u=n.call(a,"finallyLoc");if(s&&u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,l):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),l},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),l}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:S(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),l}},e}(e.exports);try{regeneratorRuntime=r}catch(e){Function("r","regeneratorRuntime = r")(r)}},function(e,t,n){"use strict";
/** @license React v17.0.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(75),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,s=60110,u=60112;t.Suspense=60113;var c=60115,l=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),s=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),c=f("react.memo"),l=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h={};function g(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||m}function v(){}function b(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||m}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=g.prototype;var y=b.prototype=new v;y.constructor=b,r(y,g.prototype),y.isPureReactComponent=!0;var w={current:null},_=Object.prototype.hasOwnProperty,O={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,n){var r,a={},i=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(i=""+t.key),t)_.call(t,r)&&!O.hasOwnProperty(r)&&(a[r]=t[r]);var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){for(var c=Array(u),l=0;l<u;l++)c[l]=arguments[l+2];a.children=c}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===a[r]&&(a[r]=u[r]);return{$$typeof:o,type:e,key:i,ref:s,props:a,_owner:w.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var x=/\/+/g;function j(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function k(e,t,n,r,i){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var u=!1;if(null===e)u=!0;else switch(s){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case a:u=!0}}if(u)return i=i(u=e),e=""===r?"."+j(u,0):r,Array.isArray(i)?(n="",null!=e&&(n=e.replace(x,"$&/")+"/"),k(i,t,n,"",(function(e){return e}))):null!=i&&(S(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(x,"$&/")+"/")+e)),t.push(i)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var c=0;c<e.length;c++){var l=r+j(s=e[c],c);u+=k(s,t,n,l,i)}else if("function"==typeof(l=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=l.call(e),c=0;!(s=e.next()).done;)u+=k(s=s.value,t,n,l=r+j(s,c++),i);else if("object"===s)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function T(e,t,n){if(null==e)return e;var r=[],o=0;return k(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function C(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var A={current:null};function N(){var e=A.current;if(null===e)throw Error(p(321));return e}var P={ReactCurrentDispatcher:A,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:T,forEach:function(e,t,n){T(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return T(e,(function(){t++})),t},toArray:function(e){return T(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error(p(143));return e}},t.Component=g,t.PureComponent=b,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=P,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var a=r({},e.props),i=e.key,s=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,u=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(l in t)_.call(t,l)&&!O.hasOwnProperty(l)&&(a[l]=void 0===t[l]&&void 0!==c?c[l]:t[l])}var l=arguments.length-2;if(1===l)a.children=n;else if(1<l){c=Array(l);for(var f=0;f<l;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:o,type:e.type,key:i,ref:s,props:a,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:s,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:l,_payload:{_status:-1,_result:e},_init:C}},t.memo=function(e,t){return{$$typeof:c,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return N().useCallback(e,t)},t.useContext=function(e,t){return N().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return N().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return N().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return N().useLayoutEffect(e,t)},t.useMemo=function(e,t){return N().useMemo(e,t)},t.useReducer=function(e,t,n){return N().useReducer(e,t,n)},t.useRef=function(e){return N().useRef(e)},t.useState=function(e){return N().useState(e)},t.version="17.0.1"},function(e,t,n){"use strict";
/** @license React v17.0.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(75),a=n(128);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var s=new Set,u={};function c(e,t){l(e,t),l(e+"Capture",t)}function l(e,t){for(u[e]=t,e=0;e<t.length;e++)s.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,m={},h={};function g(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var b=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=v.hasOwnProperty(t)?v[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(h,e)||!p.call(m,e)&&(d.test(e)?h[e]=!0:(m[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(b,y);v[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(b,y);v[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(b,y);v[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var _=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,O=60103,E=60106,S=60107,x=60108,j=60114,k=60109,T=60110,C=60112,A=60113,N=60120,P=60115,R=60116,D=60121,I=60128,M=60129,L=60130,B=60131;if("function"==typeof Symbol&&Symbol.for){var F=Symbol.for;O=F("react.element"),E=F("react.portal"),S=F("react.fragment"),x=F("react.strict_mode"),j=F("react.profiler"),k=F("react.provider"),T=F("react.context"),C=F("react.forward_ref"),A=F("react.suspense"),N=F("react.suspense_list"),P=F("react.memo"),R=F("react.lazy"),D=F("react.block"),F("react.scope"),I=F("react.opaque.id"),M=F("react.debug_trace_mode"),L=F("react.offscreen"),B=F("react.legacy_hidden")}var U,z="function"==typeof Symbol&&Symbol.iterator;function H(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=z&&e[z]||e["@@iterator"])?e:null}function G(e){if(void 0===U)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);U=t&&t[1]||""}return"\n"+U+e}var W=!1;function q(e,t){if(!e||W)return"";W=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,s=a.length-1;1<=i&&0<=s&&o[i]!==a[s];)s--;for(;1<=i&&0<=s;i--,s--)if(o[i]!==a[s]){if(1!==i||1!==s)do{if(i--,0>--s||o[i]!==a[s])return"\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=s);break}}}finally{W=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?G(e):""}function V(e){switch(e.tag){case 5:return G(e.type);case 16:return G("Lazy");case 13:return G("Suspense");case 19:return G("SuspenseList");case 0:case 2:case 15:return e=q(e.type,!1);case 11:return e=q(e.type.render,!1);case 22:return e=q(e.type._render,!1);case 1:return e=q(e.type,!0);default:return""}}function Y(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case E:return"Portal";case j:return"Profiler";case x:return"StrictMode";case A:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case T:return(e.displayName||"Context")+".Consumer";case k:return(e._context.displayName||"Context")+".Provider";case C:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case P:return Y(e.type);case D:return Y(e._render);case R:t=e._payload,e=e._init;try{return Y(e(t))}catch(e){}}return null}function $(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function X(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function K(e){e._valueTracker||(e._valueTracker=function(e){var t=X(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=X(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Z(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=$(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=$(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,$(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&Z(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+$(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function se(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:$(n)}}function ce(e,t){var n=$(t.value),r=$(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function le(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml",de="http://www.w3.org/2000/svg";function pe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function me(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?pe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,ge=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==de||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function ve(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var be={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ye=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||be.hasOwnProperty(e)&&be[e]?(""+t).trim():t+"px"}function _e(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(be).forEach((function(e){ye.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),be[t]=be[e]}))}));var Oe=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Ee(e,t){if(t){if(Oe[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function Se(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var je=null,ke=null,Te=null;function Ce(e){if(e=Zr(e)){if("function"!=typeof je)throw Error(i(280));var t=e.stateNode;t&&(t=eo(t),je(e.stateNode,e.type,t))}}function Ae(e){ke?Te?Te.push(e):Te=[e]:ke=e}function Ne(){if(ke){var e=ke,t=Te;if(Te=ke=null,Ce(e),t)for(e=0;e<t.length;e++)Ce(t[e])}}function Pe(e,t){return e(t)}function Re(e,t,n,r,o){return e(t,n,r,o)}function De(){}var Ie=Pe,Me=!1,Le=!1;function Be(){null===ke&&null===Te||(De(),Ne())}function Fe(e,t){var n=e.stateNode;if(null===n)return null;var r=eo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Ue=!1;if(f)try{var ze={};Object.defineProperty(ze,"passive",{get:function(){Ue=!0}}),window.addEventListener("test",ze,ze),window.removeEventListener("test",ze,ze)}catch(e){Ue=!1}function He(e,t,n,r,o,a,i,s,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var Ge=!1,We=null,qe=!1,Ve=null,Ye={onError:function(e){Ge=!0,We=e}};function $e(e,t,n,r,o,a,i,s,u){Ge=!1,We=null,He.apply(Ye,arguments)}function Xe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ke(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function Qe(e){if(Xe(e)!==e)throw Error(i(188))}function Ze(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Xe(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return Qe(o),e;if(a===r)return Qe(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var s=!1,u=o.child;u;){if(u===n){s=!0,n=o,r=a;break}if(u===r){s=!0,r=o,n=a;break}u=u.sibling}if(!s){for(u=a.child;u;){if(u===n){s=!0,n=a,r=o;break}if(u===r){s=!0,r=a,n=o;break}u=u.sibling}if(!s)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,at=[],it=null,st=null,ut=null,ct=new Map,lt=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function mt(e,t){switch(e){case"focusin":case"focusout":it=null;break;case"dragenter":case"dragleave":st=null;break;case"mouseover":case"mouseout":ut=null;break;case"pointerover":case"pointerout":ct.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":lt.delete(t.pointerId)}}function ht(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=pt(t,n,r,o,a),null!==t&&(null!==(t=Zr(t))&&tt(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function gt(e){var t=Qr(e.target);if(null!==t){var n=Xe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ke(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function vt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Zr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function bt(e,t,n){vt(e)&&n.delete(t)}function yt(){for(ot=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=Zr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==it&&vt(it)&&(it=null),null!==st&&vt(st)&&(st=null),null!==ut&&vt(ut)&&(ut=null),ct.forEach(bt),lt.forEach(bt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,yt)))}function _t(e){function t(t){return wt(t,e)}if(0<at.length){wt(at[0],e);for(var n=1;n<at.length;n++){var r=at[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==it&&wt(it,e),null!==st&&wt(st,e),null!==ut&&wt(ut,e),ct.forEach(t),lt.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)gt(n),null===n.blockedOn&&ft.shift()}function Ot(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Et={animationend:Ot("Animation","AnimationEnd"),animationiteration:Ot("Animation","AnimationIteration"),animationstart:Ot("Animation","AnimationStart"),transitionend:Ot("Transition","TransitionEnd")},St={},xt={};function jt(e){if(St[e])return St[e];if(!Et[e])return e;var t,n=Et[e];for(t in n)if(n.hasOwnProperty(t)&&t in xt)return St[e]=n[t];return e}f&&(xt=document.createElement("div").style,"AnimationEvent"in window||(delete Et.animationend.animation,delete Et.animationiteration.animation,delete Et.animationstart.animation),"TransitionEvent"in window||delete Et.transitionend.transition);var kt=jt("animationend"),Tt=jt("animationiteration"),Ct=jt("animationstart"),At=jt("transitionend"),Nt=new Map,Pt=new Map,Rt=["abort","abort",kt,"animationEnd",Tt,"animationIteration",Ct,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",At,"transitionEnd","waiting","waiting"];function Dt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Pt.set(r,t),Nt.set(r,o),c(o,[r])}}(0,a.unstable_now)();var It=8;function Mt(e){if(0!=(1&e))return It=15,1;if(0!=(2&e))return It=14,2;if(0!=(4&e))return It=13,4;var t=24&e;return 0!==t?(It=12,t):0!=(32&e)?(It=11,32):0!==(t=192&e)?(It=10,t):0!=(256&e)?(It=9,256):0!==(t=3584&e)?(It=8,t):0!=(4096&e)?(It=7,4096):0!==(t=4186112&e)?(It=6,t):0!==(t=62914560&e)?(It=5,t):67108864&e?(It=4,67108864):0!=(134217728&e)?(It=3,134217728):0!==(t=805306368&e)?(It=2,t):0!=(1073741824&e)?(It=1,1073741824):(It=8,e)}function Lt(e,t){var n=e.pendingLanes;if(0===n)return It=0;var r=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,s=e.pingedLanes;if(0!==a)r=a,o=It=15;else if(0!==(a=134217727&n)){var u=a&~i;0!==u?(r=Mt(u),o=It):0!==(s&=a)&&(r=Mt(s),o=It)}else 0!==(a=n&~i)?(r=Mt(a),o=It):0!==s&&(r=Mt(s),o=It);if(0===r)return 0;if(r=n&((0>(r=31-Gt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&i)){if(Mt(t),o<=It)return t;It=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Gt(t)),r|=e[n],t&=~o;return r}function Bt(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Ft(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ut(24&~t))?Ft(10,t):e;case 10:return 0===(e=Ut(192&~t))?Ft(8,t):e;case 8:return 0===(e=Ut(3584&~t))&&(0===(e=Ut(4186112&~t))&&(e=512)),e;case 2:return 0===(t=Ut(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function Ut(e){return e&-e}function zt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ht(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Gt(t)]=n}var Gt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/qt|0)|0},Wt=Math.log,qt=Math.LN2;var Vt=a.unstable_UserBlockingPriority,Yt=a.unstable_runWithPriority,$t=!0;function Xt(e,t,n,r){Me||De();var o=Qt,a=Me;Me=!0;try{Re(o,e,t,n,r)}finally{(Me=a)||Be()}}function Kt(e,t,n,r){Yt(Vt,Qt.bind(null,e,t,n,r))}function Qt(e,t,n,r){var o;if($t)if((o=0==(4&t))&&0<at.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),at.push(e);else{var a=Zt(e,t,n,r);if(null===a)o&&mt(e,r);else{if(o){if(-1<dt.indexOf(e))return e=pt(a,e,t,n,r),void at.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return it=ht(it,e,t,n,r,o),!0;case"dragenter":return st=ht(st,e,t,n,r,o),!0;case"mouseover":return ut=ht(ut,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return ct.set(a,ht(ct.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,lt.set(a,ht(lt.get(a)||null,e,t,n,r,o)),!0}return!1}(a,e,t,n,r))return;mt(e,r)}Ar(e,t,r,null,n)}}}function Zt(e,t,n,r){var o=xe(r);if(null!==(o=Qr(o))){var a=Xe(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Ke(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Ar(e,t,r,o,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Jt?Jt.value:Jt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function sn(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var un,cn,ln,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=sn(fn),pn=o({},fn,{view:0,detail:0}),mn=sn(pn),hn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:jn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(un=e.screenX-ln.screenX,cn=e.screenY-ln.screenY):cn=un=0,ln=e),un)},movementY:function(e){return"movementY"in e?e.movementY:cn}}),gn=sn(hn),vn=sn(o({},hn,{dataTransfer:0})),bn=sn(o({},pn,{relatedTarget:0})),yn=sn(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=sn(o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),_n=sn(o({},fn,{data:0})),On={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},En={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sn[e])&&!!t[e]}function jn(){return xn}var kn=sn(o({},pn,{key:function(e){if(e.key){var t=On[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?En[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:jn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Tn=sn(o({},hn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Cn=sn(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:jn})),An=sn(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nn=sn(o({},hn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Pn=[9,13,27,32],Rn=f&&"CompositionEvent"in window,Dn=null;f&&"documentMode"in document&&(Dn=document.documentMode);var In=f&&"TextEvent"in window&&!Dn,Mn=f&&(!Rn||Dn&&8<Dn&&11>=Dn),Ln=String.fromCharCode(32),Bn=!1;function Fn(e,t){switch(e){case"keyup":return-1!==Pn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var zn=!1;var Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Gn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Wn(e,t,n,r){Ae(r),0<(t=Pr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var qn=null,Vn=null;function Yn(e){Sr(e,0)}function $n(e){if(Q(Jr(e)))return e}function Xn(e,t){if("change"===e)return t}var Kn=!1;if(f){var Qn;if(f){var Zn="oninput"in document;if(!Zn){var Jn=document.createElement("div");Jn.setAttribute("oninput","return;"),Zn="function"==typeof Jn.oninput}Qn=Zn}else Qn=!1;Kn=Qn&&(!document.documentMode||9<document.documentMode)}function er(){qn&&(qn.detachEvent("onpropertychange",tr),Vn=qn=null)}function tr(e){if("value"===e.propertyName&&$n(Vn)){var t=[];if(Wn(t,Vn,e,xe(e)),e=Yn,Me)e(t);else{Me=!0;try{Pe(e,t)}finally{Me=!1,Be()}}}}function nr(e,t,n){"focusin"===e?(er(),Vn=n,(qn=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return $n(Vn)}function or(e,t){if("click"===e)return $n(t)}function ar(e,t){if("input"===e||"change"===e)return $n(t)}var ir="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},sr=Object.prototype.hasOwnProperty;function ur(e,t){if(ir(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!sr.call(t,n[r])||!ir(e[n[r]],t[n[r]]))return!1;return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function lr(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function fr(){for(var e=window,t=Z();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Z((e=t.contentWindow).document)}return t}function dr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var pr=f&&"documentMode"in document&&11>=document.documentMode,mr=null,hr=null,gr=null,vr=!1;function br(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;vr||null==mr||mr!==Z(r)||("selectionStart"in(r=mr)&&dr(r)?r={start:r.selectionStart,end:r.selectionEnd}:r={anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&ur(gr,r)||(gr=r,0<(r=Pr(hr,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}Dt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Dt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Dt(Rt,2);for(var yr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),wr=0;wr<yr.length;wr++)Pt.set(yr[wr],0);l("onMouseEnter",["mouseout","mouseover"]),l("onMouseLeave",["mouseout","mouseover"]),l("onPointerEnter",["pointerout","pointerover"]),l("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var _r="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Or=new Set("cancel close invalid load scroll toggle".split(" ").concat(_r));function Er(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,s,u,c){if($e.apply(this,arguments),Ge){if(!Ge)throw Error(i(198));var l=We;Ge=!1,We=null,qe||(qe=!0,Ve=l)}}(r,t,void 0,e),e.currentTarget=null}function Sr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var s=r[i],u=s.instance,c=s.currentTarget;if(s=s.listener,u!==a&&o.isPropagationStopped())break e;Er(o,s,c),a=u}else for(i=0;i<r.length;i++){if(u=(s=r[i]).instance,c=s.currentTarget,s=s.listener,u!==a&&o.isPropagationStopped())break e;Er(o,s,c),a=u}}}if(qe)throw e=Ve,qe=!1,Ve=null,e}function xr(e,t){var n=to(t),r=e+"__bubble";n.has(r)||(Cr(t,e,2,!1),n.add(r))}var jr="_reactListening"+Math.random().toString(36).slice(2);function kr(e){e[jr]||(e[jr]=!0,s.forEach((function(t){Or.has(t)||Tr(t,!1,e,null),Tr(t,!0,e,null)})))}function Tr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=n;if("selectionchange"===e&&9!==n.nodeType&&(a=n.ownerDocument),null!==r&&!t&&Or.has(e)){if("scroll"!==e)return;o|=2,a=r}var i=to(a),s=e+"__"+(t?"capture":"bubble");i.has(s)||(t&&(o|=4),Cr(a,e,o,t),i.add(s))}function Cr(e,t,n,r){var o=Pt.get(t);switch(void 0===o?2:o){case 0:o=Xt;break;case 1:o=Kt;break;default:o=Qt}n=o.bind(null,t,n,e),o=void 0,!Ue||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Ar(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var s=r.stateNode.containerInfo;if(s===o||8===s.nodeType&&s.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==s;){if(null===(i=Qr(s)))return;if(5===(u=i.tag)||6===u){r=a=i;continue e}s=s.parentNode}}r=r.return}!function(e,t,n){if(Le)return e(t,n);Le=!0;try{Ie(e,t,n)}finally{Le=!1,Be()}}((function(){var r=a,o=xe(n),i=[];e:{var s=Nt.get(e);if(void 0!==s){var u=dn,c=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":u=kn;break;case"focusin":c="focus",u=bn;break;case"focusout":c="blur",u=bn;break;case"beforeblur":case"afterblur":u=bn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=gn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Cn;break;case kt:case Tt:case Ct:u=yn;break;case At:u=An;break;case"scroll":u=mn;break;case"wheel":u=Nn;break;case"copy":case"cut":case"paste":u=wn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Tn}var l=0!=(4&t),f=!l&&"scroll"===e,d=l?null!==s?s+"Capture":null:s;l=[];for(var p,m=r;null!==m;){var h=(p=m).stateNode;if(5===p.tag&&null!==h&&(p=h,null!==d&&(null!=(h=Fe(m,d))&&l.push(Nr(m,h,p)))),f)break;m=m.return}0<l.length&&(s=new u(s,c,null,n,o),i.push({event:s,listeners:l}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(c=n.relatedTarget||n.fromElement)||!Qr(c)&&!c[Xr])&&(u||s)&&(s=o.window===o?o:(s=o.ownerDocument)?s.defaultView||s.parentWindow:window,u?(u=r,null!==(c=(c=n.relatedTarget||n.toElement)?Qr(c):null)&&(c!==(f=Xe(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(u=null,c=r),u!==c)){if(l=gn,h="onMouseLeave",d="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(l=Tn,h="onPointerLeave",d="onPointerEnter",m="pointer"),f=null==u?s:Jr(u),p=null==c?s:Jr(c),(s=new l(h,m+"leave",u,n,o)).target=f,s.relatedTarget=p,h=null,Qr(o)===r&&((l=new l(d,m+"enter",c,n,o)).target=p,l.relatedTarget=f,h=l),f=h,u&&c)e:{for(d=c,m=0,p=l=u;p;p=Rr(p))m++;for(p=0,h=d;h;h=Rr(h))p++;for(;0<m-p;)l=Rr(l),m--;for(;0<p-m;)d=Rr(d),p--;for(;m--;){if(l===d||null!==d&&l===d.alternate)break e;l=Rr(l),d=Rr(d)}l=null}else l=null;null!==u&&Dr(i,s,u,l,!1),null!==c&&null!==f&&Dr(i,f,c,l,!0)}if("select"===(u=(s=r?Jr(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===u&&"file"===s.type)var g=Xn;else if(Gn(s))if(Kn)g=ar;else{g=rr;var v=nr}else(u=s.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(g=or);switch(g&&(g=g(e,r))?Wn(i,g,n,o):(v&&v(e,s,r),"focusout"===e&&(v=s._wrapperState)&&v.controlled&&"number"===s.type&&oe(s,"number",s.value)),v=r?Jr(r):window,e){case"focusin":(Gn(v)||"true"===v.contentEditable)&&(mr=v,hr=r,gr=null);break;case"focusout":gr=hr=mr=null;break;case"mousedown":vr=!0;break;case"contextmenu":case"mouseup":case"dragend":vr=!1,br(i,n,o);break;case"selectionchange":if(pr)break;case"keydown":case"keyup":br(i,n,o)}var b;if(Rn)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else zn?Fn(e,n)&&(y="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(y="onCompositionStart");y&&(Mn&&"ko"!==n.locale&&(zn||"onCompositionStart"!==y?"onCompositionEnd"===y&&zn&&(b=nn()):(en="value"in(Jt=o)?Jt.value:Jt.textContent,zn=!0)),0<(v=Pr(r,y)).length&&(y=new _n(y,e,null,n,o),i.push({event:y,listeners:v}),b?y.data=b:null!==(b=Un(n))&&(y.data=b))),(b=In?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(Bn=!0,Ln);case"textInput":return(e=t.data)===Ln&&Bn?null:e;default:return null}}(e,n):function(e,t){if(zn)return"compositionend"===e||!Rn&&Fn(e,t)?(e=nn(),tn=en=Jt=null,zn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Mn&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&(0<(r=Pr(r,"onBeforeInput")).length&&(o=new _n("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=b))}Sr(i,t)}))}function Nr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Pr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Fe(e,n))&&r.unshift(Nr(e,a,o)),null!=(a=Fe(e,t))&&r.push(Nr(e,a,o))),e=e.return}return r}function Rr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Dr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var s=n,u=s.alternate,c=s.stateNode;if(null!==u&&u===r)break;5===s.tag&&null!==c&&(s=c,o?null!=(u=Fe(n,a))&&i.unshift(Nr(n,u,s)):o||null!=(u=Fe(n,a))&&i.push(Nr(n,u,s))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function Ir(){}var Mr=null,Lr=null;function Br(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Fr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Ur="function"==typeof setTimeout?setTimeout:void 0,zr="function"==typeof clearTimeout?clearTimeout:void 0;function Hr(e){1===e.nodeType?e.textContent="":9===e.nodeType&&(null!=(e=e.body)&&(e.textContent=""))}function Gr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Wr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var qr=0;var Vr=Math.random().toString(36).slice(2),Yr="__reactFiber$"+Vr,$r="__reactProps$"+Vr,Xr="__reactContainer$"+Vr,Kr="__reactEvents$"+Vr;function Qr(e){var t=e[Yr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Xr]||n[Yr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Wr(e);null!==e;){if(n=e[Yr])return n;e=Wr(e)}return t}n=(e=n).parentNode}return null}function Zr(e){return!(e=e[Yr]||e[Xr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Jr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function eo(e){return e[$r]||null}function to(e){var t=e[Kr];return void 0===t&&(t=e[Kr]=new Set),t}var no=[],ro=-1;function oo(e){return{current:e}}function ao(e){0>ro||(e.current=no[ro],no[ro]=null,ro--)}function io(e,t){ro++,no[ro]=e.current,e.current=t}var so={},uo=oo(so),co=oo(!1),lo=so;function fo(e,t){var n=e.type.contextTypes;if(!n)return so;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function po(e){return null!=(e=e.childContextTypes)}function mo(){ao(co),ao(uo)}function ho(e,t,n){if(uo.current!==so)throw Error(i(168));io(uo,t),io(co,n)}function go(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,Y(t)||"Unknown",a));return o({},n,r)}function vo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||so,lo=uo.current,io(uo,e),io(co,co.current),!0}function bo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=go(e,t,lo),r.__reactInternalMemoizedMergedChildContext=e,ao(co),ao(uo),io(uo,e)):ao(co),io(co,n)}var yo=null,wo=null,_o=a.unstable_runWithPriority,Oo=a.unstable_scheduleCallback,Eo=a.unstable_cancelCallback,So=a.unstable_shouldYield,xo=a.unstable_requestPaint,jo=a.unstable_now,ko=a.unstable_getCurrentPriorityLevel,To=a.unstable_ImmediatePriority,Co=a.unstable_UserBlockingPriority,Ao=a.unstable_NormalPriority,No=a.unstable_LowPriority,Po=a.unstable_IdlePriority,Ro={},Do=void 0!==xo?xo:function(){},Io=null,Mo=null,Lo=!1,Bo=jo(),Fo=1e4>Bo?jo:function(){return jo()-Bo};function Uo(){switch(ko()){case To:return 99;case Co:return 98;case Ao:return 97;case No:return 96;case Po:return 95;default:throw Error(i(332))}}function zo(e){switch(e){case 99:return To;case 98:return Co;case 97:return Ao;case 96:return No;case 95:return Po;default:throw Error(i(332))}}function Ho(e,t){return e=zo(e),_o(e,t)}function Go(e,t,n){return e=zo(e),Oo(e,t,n)}function Wo(){if(null!==Mo){var e=Mo;Mo=null,Eo(e)}qo()}function qo(){if(!Lo&&null!==Io){Lo=!0;var e=0;try{var t=Io;Ho(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Io=null}catch(t){throw null!==Io&&(Io=Io.slice(e+1)),Oo(To,Wo),t}finally{Lo=!1}}}var Vo=_.ReactCurrentBatchConfig;function Yo(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var $o=oo(null),Xo=null,Ko=null,Qo=null;function Zo(){Qo=Ko=Xo=null}function Jo(e){var t=$o.current;ao($o),e.type._context._currentValue=t}function ea(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ta(e,t){Xo=e,Qo=Ko=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Pi=!0),e.firstContext=null)}function na(e,t){if(Qo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Qo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Ko){if(null===Xo)throw Error(i(308));Ko=t,Xo.dependencies={lanes:0,firstContext:t,responders:null}}else Ko=Ko.next=t;return e._currentValue}var ra=!1;function oa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function aa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ia(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function sa(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function ua(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ca(e,t,n,r){var a=e.updateQueue;ra=!1;var i=a.firstBaseUpdate,s=a.lastBaseUpdate,u=a.shared.pending;if(null!==u){a.shared.pending=null;var c=u,l=c.next;c.next=null,null===s?i=l:s.next=l,s=c;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==s&&(null===d?f.firstBaseUpdate=l:d.next=l,f.lastBaseUpdate=c)}}if(null!==i){for(d=a.baseState,s=0,f=l=c=null;;){u=i.lane;var p=i.eventTime;if((r&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var m=e,h=i;switch(u=t,p=n,h.tag){case 1:if("function"==typeof(m=h.payload)){d=m.call(p,d,u);break e}d=m;break e;case 3:m.flags=-4097&m.flags|64;case 0:if(null==(u="function"==typeof(m=h.payload)?m.call(p,d,u):m))break e;d=o({},d,u);break e;case 2:ra=!0}}null!==i.callback&&(e.flags|=32,null===(u=a.effects)?a.effects=[i]:u.push(i))}else p={eventTime:p,lane:u,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(l=f=p,c=d):f=f.next=p,s|=u;if(null===(i=i.next)){if(null===(u=a.shared.pending))break;i=u.next,u.next=null,a.lastBaseUpdate=u,a.shared.pending=null}}null===f&&(c=d),a.baseState=c,a.firstBaseUpdate=l,a.lastBaseUpdate=f,Ds|=s,e.lanes=s,e.memoizedState=d}}function la(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var fa=(new r.Component).refs;function da(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var pa={isMounted:function(e){return!!(e=e._reactInternals)&&Xe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=au(),o=iu(e),a=ia(r,o);a.payload=t,null!=n&&(a.callback=n),sa(e,a),su(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=au(),o=iu(e),a=ia(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),sa(e,a),su(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=au(),r=iu(e),o=ia(n,r);o.tag=2,null!=t&&(o.callback=t),sa(e,o),su(e,r,n)}};function ma(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!t.prototype||!t.prototype.isPureReactComponent||(!ur(n,r)||!ur(o,a))}function ha(e,t,n){var r=!1,o=so,a=t.contextType;return"object"==typeof a&&null!==a?a=na(a):(o=po(t)?lo:uo.current,a=(r=null!=(r=t.contextTypes))?fo(e,o):so),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=pa,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function ga(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&pa.enqueueReplaceState(t,t.state,null)}function va(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=fa,oa(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=na(a):(a=po(t)?lo:uo.current,o.context=fo(e,a)),ca(e,n,o,r),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(da(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&pa.enqueueReplaceState(o,o.state,null),ca(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var ba=Array.isArray;function ya(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===fa&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function wa(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function _a(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Fu(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function s(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Gu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=ya(e,t,n),r.return=e,r):((r=Uu(n.type,n.key,n.props,null,e.mode,r)).ref=ya(e,t,n),r.return=e,r)}function l(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Wu(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=zu(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Gu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case O:return(n=Uu(t.type,t.key,t.props,null,e.mode,n)).ref=ya(e,null,t),n.return=e,n;case E:return(t=Wu(t,e.mode,n)).return=e,t}if(ba(t)||H(t))return(t=zu(t,e.mode,n,null)).return=e,t;wa(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case O:return n.key===o?n.type===S?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case E:return n.key===o?l(e,t,n,r):null}if(ba(n)||H(n))return null!==o?null:f(e,t,n,r,null);wa(e,n)}return null}function m(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case O:return e=e.get(null===r.key?n:r.key)||null,r.type===S?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case E:return l(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(ba(r)||H(r))return f(t,e=e.get(n)||null,r,o,null);wa(t,r)}return null}function h(o,i,s,u){for(var c=null,l=null,f=i,h=i=0,g=null;null!==f&&h<s.length;h++){f.index>h?(g=f,f=null):g=f.sibling;var v=p(o,f,s[h],u);if(null===v){null===f&&(f=g);break}e&&f&&null===v.alternate&&t(o,f),i=a(v,i,h),null===l?c=v:l.sibling=v,l=v,f=g}if(h===s.length)return n(o,f),c;if(null===f){for(;h<s.length;h++)null!==(f=d(o,s[h],u))&&(i=a(f,i,h),null===l?c=f:l.sibling=f,l=f);return c}for(f=r(o,f);h<s.length;h++)null!==(g=m(f,o,h,s[h],u))&&(e&&null!==g.alternate&&f.delete(null===g.key?h:g.key),i=a(g,i,h),null===l?c=g:l.sibling=g,l=g);return e&&f.forEach((function(e){return t(o,e)})),c}function g(o,s,u,c){var l=H(u);if("function"!=typeof l)throw Error(i(150));if(null==(u=l.call(u)))throw Error(i(151));for(var f=l=null,h=s,g=s=0,v=null,b=u.next();null!==h&&!b.done;g++,b=u.next()){h.index>g?(v=h,h=null):v=h.sibling;var y=p(o,h,b.value,c);if(null===y){null===h&&(h=v);break}e&&h&&null===y.alternate&&t(o,h),s=a(y,s,g),null===f?l=y:f.sibling=y,f=y,h=v}if(b.done)return n(o,h),l;if(null===h){for(;!b.done;g++,b=u.next())null!==(b=d(o,b.value,c))&&(s=a(b,s,g),null===f?l=b:f.sibling=b,f=b);return l}for(h=r(o,h);!b.done;g++,b=u.next())null!==(b=m(h,o,g,b.value,c))&&(e&&null!==b.alternate&&h.delete(null===b.key?g:b.key),s=a(b,s,g),null===f?l=b:f.sibling=b,f=b);return e&&h.forEach((function(e){return t(o,e)})),l}return function(e,r,a,u){var c="object"==typeof a&&null!==a&&a.type===S&&null===a.key;c&&(a=a.props.children);var l="object"==typeof a&&null!==a;if(l)switch(a.$$typeof){case O:e:{for(l=a.key,c=r;null!==c;){if(c.key===l){switch(c.tag){case 7:if(a.type===S){n(e,c.sibling),(r=o(c,a.props.children)).return=e,e=r;break e}break;default:if(c.elementType===a.type){n(e,c.sibling),(r=o(c,a.props)).ref=ya(e,c,a),r.return=e,e=r;break e}}n(e,c);break}t(e,c),c=c.sibling}a.type===S?((r=zu(a.props.children,e.mode,u,a.key)).return=e,e=r):((u=Uu(a.type,a.key,a.props,null,e.mode,u)).ref=ya(e,r,a),u.return=e,e=u)}return s(e);case E:e:{for(c=a.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Wu(a,e.mode,u)).return=e,e=r}return s(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Gu(a,e.mode,u)).return=e,e=r),s(e);if(ba(a))return h(e,r,a,u);if(H(a))return g(e,r,a,u);if(l&&wa(e,a),void 0===a&&!c)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,Y(e.type)||"Component"))}return n(e,r)}}var Oa=_a(!0),Ea=_a(!1),Sa={},xa=oo(Sa),ja=oo(Sa),ka=oo(Sa);function Ta(e){if(e===Sa)throw Error(i(174));return e}function Ca(e,t){switch(io(ka,t),io(ja,e),io(xa,Sa),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:me(null,"");break;default:t=me(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ao(xa),io(xa,t)}function Aa(){ao(xa),ao(ja),ao(ka)}function Na(e){Ta(ka.current);var t=Ta(xa.current),n=me(t,e.type);t!==n&&(io(ja,e),io(xa,n))}function Pa(e){ja.current===e&&(ao(xa),ao(ja))}var Ra=oo(0);function Da(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Ia=null,Ma=null,La=!1;function Ba(e,t){var n=Lu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Fa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ua(e){if(La){var t=Ma;if(t){var n=t;if(!Fa(e,t)){if(!(t=Gr(n.nextSibling))||!Fa(e,t))return e.flags=-1025&e.flags|2,La=!1,void(Ia=e);Ba(Ia,n)}Ia=e,Ma=Gr(t.firstChild)}else e.flags=-1025&e.flags|2,La=!1,Ia=e}}function za(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Ia=e}function Ha(e){if(e!==Ia)return!1;if(!La)return za(e),La=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Fr(t,e.memoizedProps))for(t=Ma;t;)Ba(e,t),t=Gr(t.nextSibling);if(za(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Ma=Gr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Ma=null}}else Ma=Ia?Gr(e.stateNode.nextSibling):null;return!0}function Ga(){Ma=Ia=null,La=!1}var Wa=[];function qa(){for(var e=0;e<Wa.length;e++)Wa[e]._workInProgressVersionPrimary=null;Wa.length=0}var Va=_.ReactCurrentDispatcher,Ya=_.ReactCurrentBatchConfig,$a=0,Xa=null,Ka=null,Qa=null,Za=!1,Ja=!1;function ei(){throw Error(i(321))}function ti(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ir(e[n],t[n]))return!1;return!0}function ni(e,t,n,r,o,a){if($a=a,Xa=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Va.current=null===e||null===e.memoizedState?Ti:Ci,e=n(r,o),Ja){a=0;do{if(Ja=!1,!(25>a))throw Error(i(301));a+=1,Qa=Ka=null,t.updateQueue=null,Va.current=Ai,e=n(r,o)}while(Ja)}if(Va.current=ki,t=null!==Ka&&null!==Ka.next,$a=0,Qa=Ka=Xa=null,Za=!1,t)throw Error(i(300));return e}function ri(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Qa?Xa.memoizedState=Qa=e:Qa=Qa.next=e,Qa}function oi(){if(null===Ka){var e=Xa.alternate;e=null!==e?e.memoizedState:null}else e=Ka.next;var t=null===Qa?Xa.memoizedState:Qa.next;if(null!==t)Qa=t,Ka=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Ka=e).memoizedState,baseState:Ka.baseState,baseQueue:Ka.baseQueue,queue:Ka.queue,next:null},null===Qa?Xa.memoizedState=Qa=e:Qa=Qa.next=e}return Qa}function ai(e,t){return"function"==typeof t?t(e):t}function ii(e){var t=oi(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=Ka,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var s=o.next;o.next=a.next,a.next=s}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=s=a=null,c=o;do{var l=c.lane;if(($a&l)===l)null!==u&&(u=u.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),r=c.eagerReducer===e?c.eagerState:e(r,c.action);else{var f={lane:l,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===u?(s=u=f,a=r):u=u.next=f,Xa.lanes|=l,Ds|=l}c=c.next}while(null!==c&&c!==o);null===u?a=r:u.next=s,ir(r,t.memoizedState)||(Pi=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function si(e){var t=oi(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var s=o=o.next;do{a=e(a,s.action),s=s.next}while(s!==o);ir(a,t.memoizedState)||(Pi=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function ui(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=($a&e)===e)&&(t._workInProgressVersionPrimary=r,Wa.push(t))),e)return n(t._source);throw Wa.push(t),Error(i(350))}function ci(e,t,n,r){var o=js;if(null===o)throw Error(i(349));var a=t._getVersion,s=a(t._source),u=Va.current,c=u.useState((function(){return ui(o,t,n)})),l=c[1],f=c[0];c=Qa;var d=e.memoizedState,p=d.refs,m=p.getSnapshot,h=d.source;d=d.subscribe;var g=Xa;return e.memoizedState={refs:p,source:t,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=l;var e=a(t._source);if(!ir(s,e)){e=n(t._source),ir(f,e)||(l(e),e=iu(g),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,i=e;0<i;){var u=31-Gt(i),c=1<<u;r[u]|=e,i&=~c}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=iu(g);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ir(m,n)&&ir(h,t)&&ir(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ai,lastRenderedState:f}).dispatch=l=ji.bind(null,Xa,e),c.queue=e,c.baseQueue=null,f=ui(o,t,n),c.memoizedState=c.baseState=f),f}function li(e,t,n){return ci(oi(),e,t,n)}function fi(e){var t=ri();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ai,lastRenderedState:e}).dispatch=ji.bind(null,Xa,e),[t.memoizedState,e]}function di(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Xa.updateQueue)?(t={lastEffect:null},Xa.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function pi(e){return e={current:e},ri().memoizedState=e}function mi(){return oi().memoizedState}function hi(e,t,n,r){var o=ri();Xa.flags|=e,o.memoizedState=di(1|t,n,void 0,void 0===r?null:r)}function gi(e,t,n,r){var o=oi();r=void 0===r?null:r;var a=void 0;if(null!==Ka){var i=Ka.memoizedState;if(a=i.destroy,null!==r&&ti(r,i.deps))return void di(t,n,a,r)}Xa.flags|=e,o.memoizedState=di(1|t,n,a,r)}function vi(e,t){return hi(516,4,e,t)}function bi(e,t){return gi(516,4,e,t)}function yi(e,t){return gi(4,2,e,t)}function wi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function _i(e,t,n){return n=null!=n?n.concat([e]):null,gi(4,2,wi.bind(null,t,e),n)}function Oi(){}function Ei(e,t){var n=oi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ti(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Si(e,t){var n=oi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ti(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function xi(e,t){var n=Uo();Ho(98>n?98:n,(function(){e(!0)})),Ho(97<n?97:n,(function(){var n=Ya.transition;Ya.transition=1;try{e(!1),t()}finally{Ya.transition=n}}))}function ji(e,t,n){var r=au(),o=iu(e),a={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Xa||null!==i&&i===Xa)Ja=Za=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var s=t.lastRenderedState,u=i(s,n);if(a.eagerReducer=i,a.eagerState=u,ir(u,s))return}catch(e){}su(e,o,r)}}var ki={readContext:na,useCallback:ei,useContext:ei,useEffect:ei,useImperativeHandle:ei,useLayoutEffect:ei,useMemo:ei,useReducer:ei,useRef:ei,useState:ei,useDebugValue:ei,useDeferredValue:ei,useTransition:ei,useMutableSource:ei,useOpaqueIdentifier:ei,unstable_isNewReconciler:!1},Ti={readContext:na,useCallback:function(e,t){return ri().memoizedState=[e,void 0===t?null:t],e},useContext:na,useEffect:vi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,hi(4,2,wi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return hi(4,2,e,t)},useMemo:function(e,t){var n=ri();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ri();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ji.bind(null,Xa,e),[r.memoizedState,e]},useRef:pi,useState:fi,useDebugValue:Oi,useDeferredValue:function(e){var t=fi(e),n=t[0],r=t[1];return vi((function(){var t=Ya.transition;Ya.transition=1;try{r(e)}finally{Ya.transition=t}}),[e]),n},useTransition:function(){var e=fi(!1),t=e[0];return pi(e=xi.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=ri();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},ci(r,e,t,n)},useOpaqueIdentifier:function(){if(La){var e=!1,t=function(e){return{$$typeof:I,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(qr++).toString(36))),Error(i(355))})),n=fi(t)[1];return 0==(2&Xa.mode)&&(Xa.flags|=516,di(5,(function(){n("r:"+(qr++).toString(36))}),void 0,null)),t}return fi(t="r:"+(qr++).toString(36)),t},unstable_isNewReconciler:!1},Ci={readContext:na,useCallback:Ei,useContext:na,useEffect:bi,useImperativeHandle:_i,useLayoutEffect:yi,useMemo:Si,useReducer:ii,useRef:mi,useState:function(){return ii(ai)},useDebugValue:Oi,useDeferredValue:function(e){var t=ii(ai),n=t[0],r=t[1];return bi((function(){var t=Ya.transition;Ya.transition=1;try{r(e)}finally{Ya.transition=t}}),[e]),n},useTransition:function(){var e=ii(ai)[0];return[mi().current,e]},useMutableSource:li,useOpaqueIdentifier:function(){return ii(ai)[0]},unstable_isNewReconciler:!1},Ai={readContext:na,useCallback:Ei,useContext:na,useEffect:bi,useImperativeHandle:_i,useLayoutEffect:yi,useMemo:Si,useReducer:si,useRef:mi,useState:function(){return si(ai)},useDebugValue:Oi,useDeferredValue:function(e){var t=si(ai),n=t[0],r=t[1];return bi((function(){var t=Ya.transition;Ya.transition=1;try{r(e)}finally{Ya.transition=t}}),[e]),n},useTransition:function(){var e=si(ai)[0];return[mi().current,e]},useMutableSource:li,useOpaqueIdentifier:function(){return si(ai)[0]},unstable_isNewReconciler:!1},Ni=_.ReactCurrentOwner,Pi=!1;function Ri(e,t,n,r){t.child=null===e?Ea(t,null,n,r):Oa(t,e.child,n,r)}function Di(e,t,n,r,o){n=n.render;var a=t.ref;return ta(t,o),r=ni(e,t,n,r,a,o),null===e||Pi?(t.flags|=1,Ri(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,es(e,t,o))}function Ii(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||Bu(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Uu(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Mi(e,t,i,r,o,a))}return i=e.child,0==(o&a)&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:ur)(o,r)&&e.ref===t.ref)?es(e,t,a):(t.flags|=1,(e=Fu(i,r)).ref=t.ref,e.return=t,t.child=e)}function Mi(e,t,n,r,o,a){if(null!==e&&ur(e.memoizedProps,r)&&e.ref===t.ref){if(Pi=!1,0==(a&o))return t.lanes=e.lanes,es(e,t,a);0!=(16384&e.flags)&&(Pi=!0)}return Fi(e,t,n,r,a)}function Li(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},hu(t,n);else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},hu(t,e),null;t.memoizedState={baseLanes:0},hu(t,null!==a?a.baseLanes:n)}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,hu(t,r);return Ri(e,t,o,n),t.child}function Bi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Fi(e,t,n,r,o){var a=po(n)?lo:uo.current;return a=fo(t,a),ta(t,o),n=ni(e,t,n,r,a,o),null===e||Pi?(t.flags|=1,Ri(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,es(e,t,o))}function Ui(e,t,n,r,o){if(po(n)){var a=!0;vo(t)}else a=!1;if(ta(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ha(t,n,r),va(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,s=t.memoizedProps;i.props=s;var u=i.context,c=n.contextType;"object"==typeof c&&null!==c?c=na(c):c=fo(t,c=po(n)?lo:uo.current);var l=n.getDerivedStateFromProps,f="function"==typeof l||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==r||u!==c)&&ga(t,i,r,c),ra=!1;var d=t.memoizedState;i.state=d,ca(t,r,i,o),u=t.memoizedState,s!==r||d!==u||co.current||ra?("function"==typeof l&&(da(t,n,l,r),u=t.memoizedState),(s=ra||ma(t,n,s,r,d,u,c))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=c,r=s):("function"==typeof i.componentDidMount&&(t.flags|=4),r=!1)}else{i=t.stateNode,aa(e,t),s=t.memoizedProps,c=t.type===t.elementType?s:Yo(t.type,s),i.props=c,f=t.pendingProps,d=i.context,"object"==typeof(u=n.contextType)&&null!==u?u=na(u):u=fo(t,u=po(n)?lo:uo.current);var p=n.getDerivedStateFromProps;(l="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==f||d!==u)&&ga(t,i,r,u),ra=!1,d=t.memoizedState,i.state=d,ca(t,r,i,o);var m=t.memoizedState;s!==f||d!==m||co.current||ra?("function"==typeof p&&(da(t,n,p,r),m=t.memoizedState),(c=ra||ma(t,n,c,r,d,m,u))?(l||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,m,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,m,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=m),i.props=r,i.state=m,i.context=u,r=c):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return zi(e,t,n,r,a,o)}function zi(e,t,n,r,o,a){Bi(e,t);var i=0!=(64&t.flags);if(!r&&!i)return o&&bo(t,n,!1),es(e,t,a);r=t.stateNode,Ni.current=t;var s=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Oa(t,e.child,null,a),t.child=Oa(t,null,s,a)):Ri(e,t,s,a),t.memoizedState=r.state,o&&bo(t,n,!0),t.child}function Hi(e){var t=e.stateNode;t.pendingContext?ho(0,t.pendingContext,t.pendingContext!==t.context):t.context&&ho(0,t.context,!1),Ca(e,t.containerInfo)}var Gi,Wi,qi,Vi={dehydrated:null,retryLane:0};function Yi(e,t,n){var r,o=t.pendingProps,a=Ra.current,i=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),io(Ra,1&a),null===e?(void 0!==o.fallback&&Ua(t),e=o.children,a=o.fallback,i?(e=$i(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Vi,e):"number"==typeof o.unstable_expectedLoadTime?(e=$i(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Vi,t.lanes=33554432,e):((n=Hu({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(o=Ki(e,t,o.children,o.fallback,n),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:n}:{baseLanes:a.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=Vi,o):(n=Xi(e,t,o.children,n),t.memoizedState=null,n))}function $i(e,t,n,r){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=Hu(t,o,0,null),n=zu(n,o,r,null),a.return=e,n.return=e,a.sibling=n,e.child=a,n}function Xi(e,t,n,r){var o=e.child;return e=o.sibling,n=Fu(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}function Ki(e,t,n,r,o){var a=t.mode,i=e.child;e=i.sibling;var s={mode:"hidden",children:n};return 0==(2&a)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=s,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Fu(i,s),null!==e?r=Fu(e,r):(r=zu(r,a,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function Qi(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ea(e.return,t)}function Zi(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o,i.lastEffect=a)}function Ji(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Ri(e,t,r.children,n),0!=(2&(r=Ra.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Qi(e,n);else if(19===e.tag)Qi(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(io(Ra,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Da(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Zi(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Da(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Zi(t,!0,n,null,a,t.lastEffect);break;case"together":Zi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function es(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ds|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Fu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Fu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function ts(e,t){if(!La)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ns(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return po(t.type)&&mo(),null;case 3:return Aa(),ao(co),ao(uo),qa(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Ha(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Pa(t);var a=Ta(ka.current);if(n=t.type,null!==e&&null!=t.stateNode)Wi(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=Ta(xa.current),Ha(t)){r=t.stateNode,n=t.type;var s=t.memoizedProps;switch(r[Yr]=t,r[$r]=s,n){case"dialog":xr("cancel",r),xr("close",r);break;case"iframe":case"object":case"embed":xr("load",r);break;case"video":case"audio":for(e=0;e<_r.length;e++)xr(_r[e],r);break;case"source":xr("error",r);break;case"img":case"image":case"link":xr("error",r),xr("load",r);break;case"details":xr("toggle",r);break;case"input":ee(r,s),xr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!s.multiple},xr("invalid",r);break;case"textarea":ue(r,s),xr("invalid",r)}for(var c in Ee(n,s),e=null,s)s.hasOwnProperty(c)&&(a=s[c],"children"===c?"string"==typeof a?r.textContent!==a&&(e=["children",a]):"number"==typeof a&&r.textContent!==""+a&&(e=["children",""+a]):u.hasOwnProperty(c)&&null!=a&&"onScroll"===c&&xr("scroll",r));switch(n){case"input":K(r),re(r,s,!0);break;case"textarea":K(r),le(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=Ir)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(c=9===a.nodeType?a:a.ownerDocument,e===fe&&(e=pe(n)),e===fe?"script"===n?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=c.createElement(n,{is:r.is}):(e=c.createElement(n),"select"===n&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,n),e[Yr]=t,e[$r]=r,Gi(e,t),t.stateNode=e,c=Se(n,r),n){case"dialog":xr("cancel",e),xr("close",e),a=r;break;case"iframe":case"object":case"embed":xr("load",e),a=r;break;case"video":case"audio":for(a=0;a<_r.length;a++)xr(_r[a],e);a=r;break;case"source":xr("error",e),a=r;break;case"img":case"image":case"link":xr("error",e),xr("load",e),a=r;break;case"details":xr("toggle",e),a=r;break;case"input":ee(e,r),a=J(e,r),xr("invalid",e);break;case"option":a=ae(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=o({},r,{value:void 0}),xr("invalid",e);break;case"textarea":ue(e,r),a=se(e,r),xr("invalid",e);break;default:a=r}Ee(n,a);var l=a;for(s in l)if(l.hasOwnProperty(s)){var f=l[s];"style"===s?_e(e,f):"dangerouslySetInnerHTML"===s?null!=(f=f?f.__html:void 0)&&ge(e,f):"children"===s?"string"==typeof f?("textarea"!==n||""!==f)&&ve(e,f):"number"==typeof f&&ve(e,""+f):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(u.hasOwnProperty(s)?null!=f&&"onScroll"===s&&xr("scroll",e):null!=f&&w(e,s,f,c))}switch(n){case"input":K(e),re(e,r,!1);break;case"textarea":K(e),le(e);break;case"option":null!=r.value&&e.setAttribute("value",""+$(r.value));break;case"select":e.multiple=!!r.multiple,null!=(s=r.value)?ie(e,!!r.multiple,s,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Ir)}Br(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)qi(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=Ta(ka.current),Ta(xa.current),Ha(t)?(r=t.stateNode,n=t.memoizedProps,r[Yr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Yr]=t,t.stateNode=r)}return null;case 13:return ao(Ra),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Ha(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ra.current)?0===Ns&&(Ns=3):(0!==Ns&&3!==Ns||(Ns=4),null===js||0==(134217727&Ds)&&0==(134217727&Is)||fu(js,Ts))),(r||n)&&(t.flags|=4),null);case 4:return Aa(),null===e&&kr(t.stateNode.containerInfo),null;case 10:return Jo(t),null;case 17:return po(t.type)&&mo(),null;case 19:if(ao(Ra),null===(r=t.memoizedState))return null;if(s=0!=(64&t.flags),null===(c=r.rendering))if(s)ts(r,!1);else{if(0!==Ns||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(c=Da(e))){for(t.flags|=64,ts(r,!1),null!==(s=c.updateQueue)&&(t.updateQueue=s,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(s=n).flags&=2,s.nextEffect=null,s.firstEffect=null,s.lastEffect=null,null===(c=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=c.childLanes,s.lanes=c.lanes,s.child=c.child,s.memoizedProps=c.memoizedProps,s.memoizedState=c.memoizedState,s.updateQueue=c.updateQueue,s.type=c.type,e=c.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return io(Ra,1&Ra.current|2),t.child}e=e.sibling}null!==r.tail&&Fo()>Fs&&(t.flags|=64,s=!0,ts(r,!1),t.lanes=33554432)}else{if(!s)if(null!==(e=Da(c))){if(t.flags|=64,s=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),ts(r,!0),null===r.tail&&"hidden"===r.tailMode&&!c.alternate&&!La)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Fo()-r.renderingStartTime>Fs&&1073741824!==n&&(t.flags|=64,s=!0,ts(r,!1),t.lanes=33554432);r.isBackwards?(c.sibling=t.child,t.child=c):(null!==(n=r.last)?n.sibling=c:t.child=c,r.last=c)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Fo(),n.sibling=null,t=Ra.current,io(Ra,s?1&t|2:1&t),n):null;case 23:case 24:return gu(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function rs(e){switch(e.tag){case 1:po(e.type)&&mo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Aa(),ao(co),ao(uo),qa(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Pa(e),null;case 13:return ao(Ra),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return ao(Ra),null;case 4:return Aa(),null;case 10:return Jo(e),null;case 23:case 24:return gu(),null;default:return null}}function os(e,t){try{var n="",r=t;do{n+=V(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function as(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Gi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Wi=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Ta(xa.current);var i,s=null;switch(n){case"input":a=J(e,a),r=J(e,r),s=[];break;case"option":a=ae(e,a),r=ae(e,r),s=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),s=[];break;case"textarea":a=se(e,a),r=se(e,r),s=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Ir)}for(f in Ee(n,r),n=null,a)if(!r.hasOwnProperty(f)&&a.hasOwnProperty(f)&&null!=a[f])if("style"===f){var c=a[f];for(i in c)c.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?s||(s=[]):(s=s||[]).push(f,null));for(f in r){var l=r[f];if(c=null!=a?a[f]:void 0,r.hasOwnProperty(f)&&l!==c&&(null!=l||null!=c))if("style"===f)if(c){for(i in c)!c.hasOwnProperty(i)||l&&l.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in l)l.hasOwnProperty(i)&&c[i]!==l[i]&&(n||(n={}),n[i]=l[i])}else n||(s||(s=[]),s.push(f,n)),n=l;else"dangerouslySetInnerHTML"===f?(l=l?l.__html:void 0,c=c?c.__html:void 0,null!=l&&c!==l&&(s=s||[]).push(f,l)):"children"===f?"string"!=typeof l&&"number"!=typeof l||(s=s||[]).push(f,""+l):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=l&&"onScroll"===f&&xr("scroll",e),s||c===l||(s=[])):"object"==typeof l&&null!==l&&l.$$typeof===I?l.toString():(s=s||[]).push(f,l))}n&&(s=s||[]).push("style",n);var f=s;(t.updateQueue=f)&&(t.flags|=4)}},qi=function(e,t,n,r){n!==r&&(t.flags|=4)};var is="function"==typeof WeakMap?WeakMap:Map;function ss(e,t,n){(n=ia(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Gs||(Gs=!0,Ws=r),as(0,t)},n}function us(e,t,n){(n=ia(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return as(0,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===qs?qs=new Set([this]):qs.add(this),as(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var cs="function"==typeof WeakSet?WeakSet:Set;function ls(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ru(e,t)}else t.current=null}function fs(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Yo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Hr(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(i(163))}function ds(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Au(n,e),Cu(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Yo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&la(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}la(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Br(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&_t(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(i(163))}function ps(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=we("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function ms(e,t){if(wo&&"function"==typeof wo.onCommitFiberUnmount)try{wo.onCommitFiberUnmount(yo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Au(t,n);else{r=t;try{o()}catch(e){Ru(r,e)}}n=n.next}while(n!==e)}break;case 1:if(ls(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Ru(t,e)}break;case 5:ls(t);break;case 4:bs(e,t)}}function hs(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function gs(e){return 5===e.tag||3===e.tag||4===e.tag}function vs(e){e:{for(var t=e.return;null!==t;){if(gs(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.flags&&(ve(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||gs(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?function e(t,n,r){var o=t.tag,a=5===o||6===o;if(a)t=a?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=Ir));else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var o=t.tag,a=5===o||6===o;if(a)t=a?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function bs(e,t){for(var n,r,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(n=a.stateNode,a.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var s=e,u=o,c=u;;)if(ms(s,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===u)break e;for(;null===c.sibling;){if(null===c.return||c.return===u)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}r?(s=n,u=o.stateNode,8===s.nodeType?s.parentNode.removeChild(u):s.removeChild(u)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(ms(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function ys(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[$r]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Se(e,o),t=Se(e,r),o=0;o<a.length;o+=2){var s=a[o],u=a[o+1];"style"===s?_e(n,u):"dangerouslySetInnerHTML"===s?ge(n,u):"children"===s?ve(n,u):w(n,s,u,t)}switch(e){case"input":ne(n,r);break;case"textarea":ce(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(a=r.value)?ie(n,!!r.multiple,a,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(n,!!r.multiple,r.defaultValue,!0):ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,_t(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Bs=Fo(),ps(t.child,!0)),void ws(t);case 19:return void ws(t);case 17:return;case 23:case 24:return void ps(t,null!==t.memoizedState)}throw Error(i(163))}function ws(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new cs),t.forEach((function(t){var r=Iu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function _s(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&(null!==(t=t.memoizedState)&&null===t.dehydrated)}var Os=Math.ceil,Es=_.ReactCurrentDispatcher,Ss=_.ReactCurrentOwner,xs=0,js=null,ks=null,Ts=0,Cs=0,As=oo(0),Ns=0,Ps=null,Rs=0,Ds=0,Is=0,Ms=0,Ls=null,Bs=0,Fs=1/0;function Us(){Fs=Fo()+500}var zs,Hs=null,Gs=!1,Ws=null,qs=null,Vs=!1,Ys=null,$s=90,Xs=[],Ks=[],Qs=null,Zs=0,Js=null,eu=-1,tu=0,nu=0,ru=null,ou=!1;function au(){return 0!=(48&xs)?Fo():-1!==eu?eu:eu=Fo()}function iu(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Uo()?1:2;if(0===tu&&(tu=Rs),0!==Vo.transition){0!==nu&&(nu=null!==Ls?Ls.pendingLanes:0),e=tu;var t=4186112&~nu;return 0===(t&=-t)&&(0===(t=(e=4186112&~e)&-e)&&(t=8192)),t}return e=Uo(),0!=(4&xs)&&98===e?e=Ft(12,tu):e=Ft(e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),tu),e}function su(e,t,n){if(50<Zs)throw Zs=0,Js=null,Error(i(185));if(null===(e=uu(e,t)))return null;Ht(e,t,n),e===js&&(Is|=t,4===Ns&&fu(e,Ts));var r=Uo();1===t?0!=(8&xs)&&0==(48&xs)?du(e):(cu(e,n),0===xs&&(Us(),Wo())):(0==(4&xs)||98!==r&&99!==r||(null===Qs?Qs=new Set([e]):Qs.add(e)),cu(e,n)),Ls=e}function uu(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function cu(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,s=e.pendingLanes;0<s;){var u=31-Gt(s),c=1<<u,l=a[u];if(-1===l){if(0==(c&r)||0!=(c&o)){l=t,Mt(c);var f=It;a[u]=10<=f?l+250:6<=f?l+5e3:-1}}else l<=t&&(e.expiredLanes|=c);s&=~c}if(r=Lt(e,e===js?Ts:0),t=It,0===r)null!==n&&(n!==Ro&&Eo(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Ro&&Eo(n)}15===t?(n=du.bind(null,e),null===Io?(Io=[n],Mo=Oo(To,qo)):Io.push(n),n=Ro):14===t?n=Go(99,du.bind(null,e)):n=Go(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),lu.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function lu(e){if(eu=-1,nu=tu=0,0!=(48&xs))throw Error(i(327));var t=e.callbackNode;if(Tu()&&e.callbackNode!==t)return null;var n=Lt(e,e===js?Ts:0);if(0===n)return null;var r=n,o=xs;xs|=16;var a=yu();for(js===e&&Ts===r||(Us(),vu(e,r));;)try{Ou();break}catch(t){bu(e,t)}if(Zo(),Es.current=a,xs=o,null!==ks?r=0:(js=null,Ts=0,r=Ns),0!=(Rs&Is))vu(e,0);else if(0!==r){if(2===r&&(xs|=64,e.hydrate&&(e.hydrate=!1,Hr(e.containerInfo)),0!==(n=Bt(e))&&(r=wu(e,n))),1===r)throw t=Ps,vu(e,0),fu(e,n),cu(e,Fo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(i(345));case 2:xu(e);break;case 3:if(fu(e,n),(62914560&n)===n&&10<(r=Bs+500-Fo())){if(0!==Lt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){au(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Ur(xu.bind(null,e),r);break}xu(e);break;case 4:if(fu(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var s=31-Gt(n);a=1<<s,(s=r[s])>o&&(o=s),n&=~a}if(n=o,10<(n=(120>(n=Fo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Os(n/1960))-n)){e.timeoutHandle=Ur(xu.bind(null,e),n);break}xu(e);break;case 5:xu(e);break;default:throw Error(i(329))}}return cu(e,Fo()),e.callbackNode===t?lu.bind(null,e):null}function fu(e,t){for(t&=~Ms,t&=~Is,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Gt(t),r=1<<n;e[n]=-1,t&=~r}}function du(e){if(0!=(48&xs))throw Error(i(327));if(Tu(),e===js&&0!=(e.expiredLanes&Ts)){var t=Ts,n=wu(e,t);0!=(Rs&Is)&&(n=wu(e,t=Lt(e,t)))}else n=wu(e,t=Lt(e,0));if(0!==e.tag&&2===n&&(xs|=64,e.hydrate&&(e.hydrate=!1,Hr(e.containerInfo)),0!==(t=Bt(e))&&(n=wu(e,t))),1===n)throw n=Ps,vu(e,0),fu(e,t),cu(e,Fo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,xu(e),cu(e,Fo()),null}function pu(e,t){var n=xs;xs|=1;try{return e(t)}finally{0===(xs=n)&&(Us(),Wo())}}function mu(e,t){var n=xs;xs&=-2,xs|=8;try{return e(t)}finally{0===(xs=n)&&(Us(),Wo())}}function hu(e,t){io(As,Cs),Cs|=t,Rs|=t}function gu(){Cs=As.current,ao(As)}function vu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,zr(n)),null!==ks)for(n=ks.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&mo();break;case 3:Aa(),ao(co),ao(uo),qa();break;case 5:Pa(r);break;case 4:Aa();break;case 13:case 19:ao(Ra);break;case 10:Jo(r);break;case 23:case 24:gu()}n=n.return}js=e,ks=Fu(e.current,null),Ts=Cs=Rs=t,Ns=0,Ps=null,Ms=Is=Ds=0}function bu(e,t){for(;;){var n=ks;try{if(Zo(),Va.current=ki,Za){for(var r=Xa.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Za=!1}if($a=0,Qa=Ka=Xa=null,Ja=!1,Ss.current=null,null===n||null===n.return){Ns=1,Ps=t,ks=null;break}e:{var a=e,i=n.return,s=n,u=t;if(t=Ts,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u;if(0==(2&s.mode)){var l=s.alternate;l?(s.updateQueue=l.updateQueue,s.memoizedState=l.memoizedState,s.lanes=l.lanes):(s.updateQueue=null,s.memoizedState=null)}var f=0!=(1&Ra.current),d=i;do{var p;if(p=13===d.tag){var m=d.memoizedState;if(null!==m)p=null!==m.dehydrated;else{var h=d.memoizedProps;p=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!f)}}if(p){var g=d.updateQueue;if(null===g){var v=new Set;v.add(c),d.updateQueue=v}else g.add(c);if(0==(2&d.mode)){if(d.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var b=ia(-1,1);b.tag=2,sa(s,b)}s.lanes|=1;break e}u=void 0,s=t;var y=a.pingCache;if(null===y?(y=a.pingCache=new is,u=new Set,y.set(c,u)):void 0===(u=y.get(c))&&(u=new Set,y.set(c,u)),!u.has(s)){u.add(s);var w=Du.bind(null,a,c,s);c.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);u=Error((Y(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Ns&&(Ns=2),u=os(u,s),d=i;do{switch(d.tag){case 3:a=u,d.flags|=4096,t&=-t,d.lanes|=t,ua(d,ss(0,a,t));break e;case 1:a=u;var _=d.type,O=d.stateNode;if(0==(64&d.flags)&&("function"==typeof _.getDerivedStateFromError||null!==O&&"function"==typeof O.componentDidCatch&&(null===qs||!qs.has(O)))){d.flags|=4096,t&=-t,d.lanes|=t,ua(d,us(d,a,t));break e}}d=d.return}while(null!==d)}Su(n)}catch(e){t=e,ks===n&&null!==n&&(ks=n=n.return);continue}break}}function yu(){var e=Es.current;return Es.current=ki,null===e?ki:e}function wu(e,t){var n=xs;xs|=16;var r=yu();for(js===e&&Ts===t||vu(e,t);;)try{_u();break}catch(t){bu(e,t)}if(Zo(),xs=n,Es.current=r,null!==ks)throw Error(i(261));return js=null,Ts=0,Ns}function _u(){for(;null!==ks;)Eu(ks)}function Ou(){for(;null!==ks&&!So();)Eu(ks)}function Eu(e){var t=zs(e.alternate,e,Cs);e.memoizedProps=e.pendingProps,null===t?Su(e):ks=t,Ss.current=null}function Su(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=ns(n,t,Cs)))return void(ks=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Cs)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=rs(t)))return n.flags&=2047,void(ks=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(ks=t);ks=t=e}while(null!==t);0===Ns&&(Ns=5)}function xu(e){var t=Uo();return Ho(99,ju.bind(null,e,t)),null}function ju(e,t){do{Tu()}while(null!==Ys);if(0!=(48&xs))throw Error(i(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var s=e.eventTimes,u=e.expirationTimes;0<a;){var c=31-Gt(a),l=1<<c;o[c]=0,s[c]=-1,u[c]=-1,a&=~l}if(null!==Qs&&0==(24&r)&&Qs.has(e)&&Qs.delete(e),e===js&&(ks=js=null,Ts=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=xs,xs|=32,Ss.current=null,Mr=$t,dr(s=fr())){if("selectionStart"in s)u={start:s.selectionStart,end:s.selectionEnd};else e:if(u=(u=s.ownerDocument)&&u.defaultView||window,(l=u.getSelection&&u.getSelection())&&0!==l.rangeCount){u=l.anchorNode,a=l.anchorOffset,c=l.focusNode,l=l.focusOffset;try{u.nodeType,c.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,m=0,h=0,g=s,v=null;t:for(;;){for(var b;g!==u||0!==a&&3!==g.nodeType||(d=f+a),g!==c||0!==l&&3!==g.nodeType||(p=f+l),3===g.nodeType&&(f+=g.nodeValue.length),null!==(b=g.firstChild);)v=g,g=b;for(;;){if(g===s)break t;if(v===u&&++m===a&&(d=f),v===c&&++h===l&&(p=f),null!==(b=g.nextSibling))break;v=(g=v).parentNode}g=b}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;Lr={focusedElem:s,selectionRange:u},$t=!1,ru=null,ou=!1,Hs=r;do{try{ku()}catch(e){if(null===Hs)throw Error(i(330));Ru(Hs,e),Hs=Hs.nextEffect}}while(null!==Hs);ru=null,Hs=r;do{try{for(s=e;null!==Hs;){var y=Hs.flags;if(16&y&&ve(Hs.stateNode,""),128&y){var w=Hs.alternate;if(null!==w){var _=w.ref;null!==_&&("function"==typeof _?_(null):_.current=null)}}switch(1038&y){case 2:vs(Hs),Hs.flags&=-3;break;case 6:vs(Hs),Hs.flags&=-3,ys(Hs.alternate,Hs);break;case 1024:Hs.flags&=-1025;break;case 1028:Hs.flags&=-1025,ys(Hs.alternate,Hs);break;case 4:ys(Hs.alternate,Hs);break;case 8:bs(s,u=Hs);var O=u.alternate;hs(u),null!==O&&hs(O)}Hs=Hs.nextEffect}}catch(e){if(null===Hs)throw Error(i(330));Ru(Hs,e),Hs=Hs.nextEffect}}while(null!==Hs);if(_=Lr,w=fr(),y=_.focusedElem,s=_.selectionRange,w!==y&&y&&y.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(y.ownerDocument.documentElement,y)){null!==s&&dr(y)&&(w=s.start,void 0===(_=s.end)&&(_=w),"selectionStart"in y?(y.selectionStart=w,y.selectionEnd=Math.min(_,y.value.length)):(_=(w=y.ownerDocument||document)&&w.defaultView||window).getSelection&&(_=_.getSelection(),u=y.textContent.length,O=Math.min(s.start,u),s=void 0===s.end?O:Math.min(s.end,u),!_.extend&&O>s&&(u=s,s=O,O=u),u=lr(y,O),a=lr(y,s),u&&a&&(1!==_.rangeCount||_.anchorNode!==u.node||_.anchorOffset!==u.offset||_.focusNode!==a.node||_.focusOffset!==a.offset)&&((w=w.createRange()).setStart(u.node,u.offset),_.removeAllRanges(),O>s?(_.addRange(w),_.extend(a.node,a.offset)):(w.setEnd(a.node,a.offset),_.addRange(w))))),w=[];for(_=y;_=_.parentNode;)1===_.nodeType&&w.push({element:_,left:_.scrollLeft,top:_.scrollTop});for("function"==typeof y.focus&&y.focus(),y=0;y<w.length;y++)(_=w[y]).element.scrollLeft=_.left,_.element.scrollTop=_.top}$t=!!Mr,Lr=Mr=null,e.current=n,Hs=r;do{try{for(y=e;null!==Hs;){var E=Hs.flags;if(36&E&&ds(y,Hs.alternate,Hs),128&E){w=void 0;var S=Hs.ref;if(null!==S){var x=Hs.stateNode;switch(Hs.tag){case 5:w=x;break;default:w=x}"function"==typeof S?S(w):S.current=w}}Hs=Hs.nextEffect}}catch(e){if(null===Hs)throw Error(i(330));Ru(Hs,e),Hs=Hs.nextEffect}}while(null!==Hs);Hs=null,Do(),xs=o}else e.current=n;if(Vs)Vs=!1,Ys=e,$s=t;else for(Hs=r;null!==Hs;)t=Hs.nextEffect,Hs.nextEffect=null,8&Hs.flags&&((E=Hs).sibling=null,E.stateNode=null),Hs=t;if(0===(r=e.pendingLanes)&&(qs=null),1===r?e===Js?Zs++:(Zs=0,Js=e):Zs=0,n=n.stateNode,wo&&"function"==typeof wo.onCommitFiberRoot)try{wo.onCommitFiberRoot(yo,n,void 0,64==(64&n.current.flags))}catch(e){}if(cu(e,Fo()),Gs)throw Gs=!1,e=Ws,Ws=null,e;return 0!=(8&xs)||Wo(),null}function ku(){for(;null!==Hs;){var e=Hs.alternate;ou||null===ru||(0!=(8&Hs.flags)?Je(Hs,ru)&&(ou=!0):13===Hs.tag&&_s(e,Hs)&&Je(Hs,ru)&&(ou=!0));var t=Hs.flags;0!=(256&t)&&fs(e,Hs),0==(512&t)||Vs||(Vs=!0,Go(97,(function(){return Tu(),null}))),Hs=Hs.nextEffect}}function Tu(){if(90!==$s){var e=97<$s?97:$s;return $s=90,Ho(e,Nu)}return!1}function Cu(e,t){Xs.push(t,e),Vs||(Vs=!0,Go(97,(function(){return Tu(),null})))}function Au(e,t){Ks.push(t,e),Vs||(Vs=!0,Go(97,(function(){return Tu(),null})))}function Nu(){if(null===Ys)return!1;var e=Ys;if(Ys=null,0!=(48&xs))throw Error(i(331));var t=xs;xs|=32;var n=Ks;Ks=[];for(var r=0;r<n.length;r+=2){var o=n[r],a=n[r+1],s=o.destroy;if(o.destroy=void 0,"function"==typeof s)try{s()}catch(e){if(null===a)throw Error(i(330));Ru(a,e)}}for(n=Xs,Xs=[],r=0;r<n.length;r+=2){o=n[r],a=n[r+1];try{var u=o.create;o.destroy=u()}catch(e){if(null===a)throw Error(i(330));Ru(a,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return xs=t,Wo(),!0}function Pu(e,t,n){sa(e,t=ss(0,t=os(n,t),1)),t=au(),null!==(e=uu(e,1))&&(Ht(e,1,t),cu(e,t))}function Ru(e,t){if(3===e.tag)Pu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Pu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===qs||!qs.has(r))){var o=us(n,e=os(t,e),1);if(sa(n,o),o=au(),null!==(n=uu(n,1)))Ht(n,1,o),cu(n,o);else if("function"==typeof r.componentDidCatch&&(null===qs||!qs.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Du(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=au(),e.pingedLanes|=e.suspendedLanes&n,js===e&&(Ts&n)===n&&(4===Ns||3===Ns&&(62914560&Ts)===Ts&&500>Fo()-Bs?vu(e,0):Ms|=n),cu(e,t)}function Iu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Uo()?1:2:(0===tu&&(tu=Rs),0===(t=Ut(62914560&~tu))&&(t=4194304))),n=au(),null!==(e=uu(e,t))&&(Ht(e,t,n),cu(e,n))}function Mu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Lu(e,t,n,r){return new Mu(e,t,n,r)}function Bu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Fu(e,t){var n=e.alternate;return null===n?((n=Lu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Uu(e,t,n,r,o,a){var s=2;if(r=e,"function"==typeof e)Bu(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case S:return zu(n.children,o,a,t);case M:s=8,o|=16;break;case x:s=8,o|=1;break;case j:return(e=Lu(12,n,t,8|o)).elementType=j,e.type=j,e.lanes=a,e;case A:return(e=Lu(13,n,t,o)).type=A,e.elementType=A,e.lanes=a,e;case N:return(e=Lu(19,n,t,o)).elementType=N,e.lanes=a,e;case L:return Hu(n,o,a,t);case B:return(e=Lu(24,n,t,o)).elementType=B,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case k:s=10;break e;case T:s=9;break e;case C:s=11;break e;case P:s=14;break e;case R:s=16,r=null;break e;case D:s=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Lu(s,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function zu(e,t,n,r){return(e=Lu(7,e,r,t)).lanes=n,e}function Hu(e,t,n,r){return(e=Lu(23,e,r,t)).elementType=L,e.lanes=n,e}function Gu(e,t,n){return(e=Lu(6,e,null,t)).lanes=n,e}function Wu(e,t,n){return(t=Lu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function qu(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=zt(0),this.expirationTimes=zt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=zt(0),this.mutableSourceEagerHydrationData=null}function Vu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Yu(e,t,n,r){var o=t.current,a=au(),s=iu(o);e:if(n){t:{if(Xe(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(po(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===n.tag){var c=n.type;if(po(c)){n=go(n,c,u);break e}}n=u}else n=so;return null===t.context?t.context=n:t.pendingContext=n,(t=ia(a,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),sa(o,t),su(o,s,a),s}function $u(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Xu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ku(e,t){Xu(e,t),(e=e.alternate)&&Xu(e,t)}function Qu(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new qu(e,t,null!=n&&!0===n.hydrate),t=Lu(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,oa(t),e[Xr]=n.current,kr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function Zu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ju(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var s=o;o=function(){var e=$u(i);s.call(e)}}Yu(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Qu(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var u=o;o=function(){var e=$u(i);u.call(e)}}mu((function(){Yu(t,i,e,o)}))}return $u(i)}function ec(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Zu(t))throw Error(i(200));return Vu(e,t,null,n)}zs=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||co.current)Pi=!0;else{if(0==(n&r)){switch(Pi=!1,t.tag){case 3:Hi(t),Ga();break;case 5:Na(t);break;case 1:po(t.type)&&vo(t);break;case 4:Ca(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;io($o,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Yi(e,t,n):(io(Ra,1&Ra.current),null!==(t=es(e,t,n))?t.sibling:null);io(Ra,1&Ra.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Ji(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),io(Ra,Ra.current),r)break;return null;case 23:case 24:return t.lanes=0,Li(e,t,n)}return es(e,t,n)}Pi=0!=(16384&e.flags)}else Pi=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=fo(t,uo.current),ta(t,n),o=ni(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,po(r)){var a=!0;vo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,oa(t);var s=r.getDerivedStateFromProps;"function"==typeof s&&da(t,r,s,e),o.updater=pa,t.stateNode=o,o._reactInternals=t,va(t,r,e,n),t=zi(null,t,r,!0,a,n)}else t.tag=0,Ri(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"==typeof e)return Bu(e)?1:0;if(null!=e){if((e=e.$$typeof)===C)return 11;if(e===P)return 14}return 2}(o),e=Yo(o,e),a){case 0:t=Fi(null,t,o,e,n);break e;case 1:t=Ui(null,t,o,e,n);break e;case 11:t=Di(null,t,o,e,n);break e;case 14:t=Ii(null,t,o,Yo(o.type,e),r,n);break e}throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Fi(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ui(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 3:if(Hi(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,aa(e,t),ca(t,r,null,n),(r=t.memoizedState.element)===o)Ga(),t=es(e,t,n);else{if((a=(o=t.stateNode).hydrate)&&(Ma=Gr(t.stateNode.containerInfo.firstChild),Ia=t,a=La=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],Wa.push(a);for(n=Ea(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ri(e,t,r,n),Ga();t=t.child}return t;case 5:return Na(t),null===e&&Ua(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,s=o.children,Fr(r,o)?s=null:null!==a&&Fr(r,a)&&(t.flags|=16),Bi(e,t),Ri(e,t,s,n),t.child;case 6:return null===e&&Ua(t),null;case 13:return Yi(e,t,n);case 4:return Ca(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Oa(t,null,r,n):Ri(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Di(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 7:return Ri(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ri(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,s=t.memoizedProps,a=o.value;var u=t.type._context;if(io($o,u._currentValue),u._currentValue=a,null!==s)if(u=s.value,0===(a=ir(u,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823))){if(s.children===o.children&&!co.current){t=es(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var c=u.dependencies;if(null!==c){s=u.child;for(var l=c.firstContext;null!==l;){if(l.context===r&&0!=(l.observedBits&a)){1===u.tag&&((l=ia(-1,n&-n)).tag=2,sa(u,l)),u.lanes|=n,null!==(l=u.alternate)&&(l.lanes|=n),ea(u.return,n),c.lanes|=n;break}l=l.next}}else s=10===u.tag&&u.type===t.type?null:u.child;if(null!==s)s.return=u;else for(s=u;null!==s;){if(s===t){s=null;break}if(null!==(u=s.sibling)){u.return=s.return,s=u;break}s=s.return}u=s}Ri(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,ta(t,n),r=r(o=na(o,a.unstable_observedBits)),t.flags|=1,Ri(e,t,r,n),t.child;case 14:return a=Yo(o=t.type,t.pendingProps),Ii(e,t,o,a=Yo(o.type,a),r,n);case 15:return Mi(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Yo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,po(r)?(e=!0,vo(t)):e=!1,ta(t,n),ha(t,r,o),va(t,r,o,n),zi(null,t,r,!0,e,n);case 19:return Ji(e,t,n);case 23:case 24:return Li(e,t,n)}throw Error(i(156,t.tag))},Qu.prototype.render=function(e){Yu(e,this._internalRoot,null,null)},Qu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Yu(null,e,null,(function(){t[Xr]=null}))},et=function(e){13===e.tag&&(su(e,4,au()),Ku(e,4))},tt=function(e){13===e.tag&&(su(e,67108864,au()),Ku(e,67108864))},nt=function(e){if(13===e.tag){var t=au(),n=iu(e);su(e,n,t),Ku(e,n)}},rt=function(e,t){return t()},je=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=eo(r);if(!o)throw Error(i(90));Q(r),ne(r,o)}}}break;case"textarea":ce(e,n);break;case"select":null!=(t=n.value)&&ie(e,!!n.multiple,t,!1)}},Pe=pu,Re=function(e,t,n,r,o){var a=xs;xs|=4;try{return Ho(98,e.bind(null,t,n,r,o))}finally{0===(xs=a)&&(Us(),Wo())}},De=function(){0==(49&xs)&&(function(){if(null!==Qs){var e=Qs;Qs=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,cu(e,Fo())}))}Wo()}(),Tu())},Ie=function(e,t){var n=xs;xs|=2;try{return e(t)}finally{0===(xs=n)&&(Us(),Wo())}};var tc={Events:[Zr,Jr,eo,Ae,Ne,Tu,{current:!1}]},nc={findFiberByHostInstance:Qr,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:_.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ze(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var oc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!oc.isDisabled&&oc.supportsFiber)try{yo=oc.inject(rc),wo=oc}catch(e){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=ec,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return e=null===(e=Ze(t))?null:e.stateNode},t.flushSync=function(e,t){var n=xs;if(0!=(48&n))return e(t);xs|=1;try{if(e)return Ho(99,e.bind(null,t))}finally{xs=n,Wo()}},t.hydrate=function(e,t,n){if(!Zu(t))throw Error(i(200));return Ju(null,e,t,!0,n)},t.render=function(e,t,n){if(!Zu(t))throw Error(i(200));return Ju(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zu(e))throw Error(i(40));return!!e._reactRootContainer&&(mu((function(){Ju(null,null,e,!1,(function(){e._reactRootContainer=null,e[Xr]=null}))})),!0)},t.unstable_batchedUpdates=pu,t.unstable_createPortal=function(e,t){return ec(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Zu(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return Ju(e,t,n,!1,r)},t.version="17.0.1"},function(e,t,n){"use strict";e.exports=n(129)},function(e,t,n){"use strict";
/** @license React v0.20.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,a,i;if("object"==typeof performance&&"function"==typeof performance.now){var s=performance;t.unstable_now=function(){return s.now()}}else{var u=Date,c=u.now();t.unstable_now=function(){return u.now()-c}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,f=null,d=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(d,0),e}};r=function(e){null!==l?setTimeout(r,0,e):(l=e,setTimeout(d,0))},o=function(e,t){f=setTimeout(e,t)},a=function(){clearTimeout(f)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var p=window.setTimeout,m=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var g=!1,v=null,b=-1,y=5,w=0;t.unstable_shouldYield=function(){return t.unstable_now()>=w},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var _=new MessageChannel,O=_.port2;_.port1.onmessage=function(){if(null!==v){var e=t.unstable_now();w=e+y;try{v(!0,e)?O.postMessage(null):(g=!1,v=null)}catch(e){throw O.postMessage(null),e}}else g=!1},r=function(e){v=e,g||(g=!0,O.postMessage(null))},o=function(e,n){b=p((function(){e(t.unstable_now())}),n)},a=function(){m(b),b=-1}}function E(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<j(o,t)))break e;e[r]=t,e[n]=o,n=r}}function S(e){return void 0===(e=e[0])?null:e}function x(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],s=a+1,u=e[s];if(void 0!==i&&0>j(i,n))void 0!==u&&0>j(u,i)?(e[r]=u,e[s]=n,r=s):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==u&&0>j(u,n)))break e;e[r]=u,e[s]=n,r=s}}}return t}return null}function j(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var k=[],T=[],C=1,A=null,N=3,P=!1,R=!1,D=!1;function I(e){for(var t=S(T);null!==t;){if(null===t.callback)x(T);else{if(!(t.startTime<=e))break;x(T),t.sortIndex=t.expirationTime,E(k,t)}t=S(T)}}function M(e){if(D=!1,I(e),!R)if(null!==S(k))R=!0,r(L);else{var t=S(T);null!==t&&o(M,t.startTime-e)}}function L(e,n){R=!1,D&&(D=!1,a()),P=!0;var r=N;try{for(I(n),A=S(k);null!==A&&(!(A.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=A.callback;if("function"==typeof i){A.callback=null,N=A.priorityLevel;var s=i(A.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?A.callback=s:A===S(k)&&x(k),I(n)}else x(k);A=S(k)}if(null!==A)var u=!0;else{var c=S(T);null!==c&&o(M,c.startTime-n),u=!1}return u}finally{A=null,N=r,P=!1}}var B=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){R||P||(R=!0,r(L))},t.unstable_getCurrentPriorityLevel=function(){return N},t.unstable_getFirstCallbackNode=function(){return S(k)},t.unstable_next=function(e){switch(N){case 1:case 2:case 3:var t=3;break;default:t=N}var n=N;N=t;try{return e()}finally{N=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=B,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=N;N=e;try{return t()}finally{N=n}},t.unstable_scheduleCallback=function(e,n,i){var s=t.unstable_now();switch("object"==typeof i&&null!==i?i="number"==typeof(i=i.delay)&&0<i?s+i:s:i=s,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:C++,callback:n,priorityLevel:e,startTime:i,expirationTime:u=i+u,sortIndex:-1},i>s?(e.sortIndex=i,E(T,e),null===S(k)&&e===S(T)&&(D?a():D=!0,o(M,i-s))):(e.sortIndex=u,E(k,e),R||P||(R=!0,r(L))),e},t.unstable_wrapCallback=function(e){var t=N;return function(){var n=N;N=t;try{return e.apply(this,arguments)}finally{N=n}}}},function(e,t,n){"use strict";var r=n(131);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){var r,o,a;"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self&&self,o=[e],void 0===(a="function"==typeof(r=function(e){"use strict";if("undefined"==typeof browser||Object.getPrototypeOf(browser)!==Object.prototype){const t="The message port closed before a response was received.",n="Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)",r=e=>{const r={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0},elements:{createSidebarPane:{minArgs:1,maxArgs:1}}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},goBack:{minArgs:0,maxArgs:1},goForward:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(0===Object.keys(r).length)throw new Error("api-metadata.json has not been included in browser-polyfill");class o extends WeakMap{constructor(e,t){super(t),this.createItem=e}get(e){return this.has(e)||this.set(e,this.createItem(e)),super.get(e)}}const a=(t,n)=>(...r)=>{e.runtime.lastError?t.reject(e.runtime.lastError):n.singleCallbackArg||r.length<=1&&!1!==n.singleCallbackArg?t.resolve(r[0]):t.resolve(r)},i=e=>1==e?"argument":"arguments",s=(e,t,n)=>new Proxy(t,{apply:(t,r,o)=>n.call(r,e,...o)});let u=Function.call.bind(Object.prototype.hasOwnProperty);const c=(e,t={},n={})=>{let r=Object.create(null),o={has:(t,n)=>n in e||n in r,get(o,l,f){if(l in r)return r[l];if(!(l in e))return;let d=e[l];if("function"==typeof d)if("function"==typeof t[l])d=s(e,e[l],t[l]);else if(u(n,l)){let t=((e,t)=>function(n,...r){if(r.length<t.minArgs)throw new Error(`Expected at least ${t.minArgs} ${i(t.minArgs)} for ${e}(), got ${r.length}`);if(r.length>t.maxArgs)throw new Error(`Expected at most ${t.maxArgs} ${i(t.maxArgs)} for ${e}(), got ${r.length}`);return new Promise((o,i)=>{if(t.fallbackToNoCallback)try{n[e](...r,a({resolve:o,reject:i},t))}catch(a){console.warn(e+" API method doesn't seem to support the callback parameter, falling back to call it without a callback: ",a),n[e](...r),t.fallbackToNoCallback=!1,t.noCallback=!0,o()}else t.noCallback?(n[e](...r),o()):n[e](...r,a({resolve:o,reject:i},t))})})(l,n[l]);d=s(e,e[l],t)}else d=d.bind(e);else if("object"==typeof d&&null!==d&&(u(t,l)||u(n,l)))d=c(d,t[l],n[l]);else{if(!u(n,"*"))return Object.defineProperty(r,l,{configurable:!0,enumerable:!0,get:()=>e[l],set(t){e[l]=t}}),d;d=c(d,t[l],n["*"])}return r[l]=d,d},set:(t,n,o,a)=>(n in r?r[n]=o:e[n]=o,!0),defineProperty:(e,t,n)=>Reflect.defineProperty(r,t,n),deleteProperty:(e,t)=>Reflect.deleteProperty(r,t)},l=Object.create(e);return new Proxy(l,o)},l=e=>({addListener(t,n,...r){t.addListener(e.get(n),...r)},hasListener:(t,n)=>t.hasListener(e.get(n)),removeListener(t,n){t.removeListener(e.get(n))}});let f=!1;const d=new o(e=>"function"!=typeof e?e:function(t,r,o){let a,i,s=!1,u=new Promise(e=>{a=function(t){f||(console.warn(n,(new Error).stack),f=!0),s=!0,e(t)}});try{i=e(t,r,a)}catch(e){i=Promise.reject(e)}const c=!0!==i&&(l=i)&&"object"==typeof l&&"function"==typeof l.then;var l;if(!0!==i&&!c&&!s)return!1;const d=e=>{e.then(e=>{o(e)},e=>{let t;t=e&&(e instanceof Error||"string"==typeof e.message)?e.message:"An unexpected error occurred",o({__mozWebExtensionPolyfillReject__:!0,message:t})}).catch(e=>{console.error("Failed to send onMessage rejected reply",e)})};return d(c?i:u),!0}),p=({reject:n,resolve:r},o)=>{e.runtime.lastError?e.runtime.lastError.message===t?r():n(e.runtime.lastError):o&&o.__mozWebExtensionPolyfillReject__?n(new Error(o.message)):r(o)},m=(e,t,n,...r)=>{if(r.length<t.minArgs)throw new Error(`Expected at least ${t.minArgs} ${i(t.minArgs)} for ${e}(), got ${r.length}`);if(r.length>t.maxArgs)throw new Error(`Expected at most ${t.maxArgs} ${i(t.maxArgs)} for ${e}(), got ${r.length}`);return new Promise((e,t)=>{const o=p.bind(null,{resolve:e,reject:t});r.push(o),n.sendMessage(...r)})},h={runtime:{onMessage:l(d),onMessageExternal:l(d),sendMessage:m.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:m.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},g={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return r.privacy={network:{"*":g},services:{"*":g},websites:{"*":g}},c(e,h,r)};if("object"!=typeof chrome||!chrome||!chrome.runtime||!chrome.runtime.id)throw new Error("This script should only be loaded in a browser extension.");e.exports=r(chrome)}else e.exports=browser})?r.apply(t,o):r)||(e.exports=a)},function(e,t,n){"use strict";var r=n(18),o=n(76),a=n(134),i=n(82);function s(e){var t=new a(e),n=o(a.prototype.request,t);return r.extend(n,a.prototype,t),r.extend(n,t),n}var u=s(n(79));u.Axios=a,u.create=function(e){return s(i(u.defaults,e))},u.Cancel=n(83),u.CancelToken=n(147),u.isCancel=n(78),u.all=function(e){return Promise.all(e)},u.spread=n(148),u.isAxiosError=n(149),e.exports=u,e.exports.default=u},function(e,t,n){"use strict";var r=n(18),o=n(77),a=n(135),i=n(136),s=n(82);function u(e){this.defaults=e,this.interceptors={request:new a,response:new a}}u.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[i,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},u.prototype.getUri=function(e){return e=s(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(t,n){return this.request(s(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(t,n,r){return this.request(s(r||{},{method:e,url:t,data:n}))}})),e.exports=u},function(e,t,n){"use strict";var r=n(18);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,n){"use strict";var r=n(18),o=n(137),a=n(78),i=n(79);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return s(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return a(t)||(s(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(18);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t,n){"use strict";var r=n(18);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(81);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(18);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,a,i){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(a)&&s.push("domain="+a),!0===i&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(143),o=n(144);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(18),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,a,i={};return e?(r.forEach(e.split("\n"),(function(e){if(a=e.indexOf(":"),t=r.trim(e.substr(0,a)).toLowerCase(),n=r.trim(e.substr(a+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}})),i):i}},function(e,t,n){"use strict";var r=n(18);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(83);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";e.exports=function(e){return"object"==typeof e&&!0===e.isAxiosError}},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,s=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,l=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,m=r?Symbol.for("react.suspense"):60113,h=r?Symbol.for("react.suspense_list"):60120,g=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116,b=r?Symbol.for("react.block"):60121,y=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,_=r?Symbol.for("react.scope"):60119;function O(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case i:case u:case s:case m:return e;default:switch(e=e&&e.$$typeof){case l:case p:case v:case g:case c:return e;default:return t}}case a:return t}}}function E(e){return O(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=l,t.ContextProvider=c,t.Element=o,t.ForwardRef=p,t.Fragment=i,t.Lazy=v,t.Memo=g,t.Portal=a,t.Profiler=u,t.StrictMode=s,t.Suspense=m,t.isAsyncMode=function(e){return E(e)||O(e)===f},t.isConcurrentMode=E,t.isContextConsumer=function(e){return O(e)===l},t.isContextProvider=function(e){return O(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return O(e)===p},t.isFragment=function(e){return O(e)===i},t.isLazy=function(e){return O(e)===v},t.isMemo=function(e){return O(e)===g},t.isPortal=function(e){return O(e)===a},t.isProfiler=function(e){return O(e)===u},t.isStrictMode=function(e){return O(e)===s},t.isSuspense=function(e){return O(e)===m},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===d||e===u||e===s||e===m||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===g||e.$$typeof===c||e.$$typeof===l||e.$$typeof===p||e.$$typeof===y||e.$$typeof===w||e.$$typeof===_||e.$$typeof===b)},t.typeOf=O},function(e,t,n){"use strict";function r(e,t,n){if(void 0===n&&(n=Error),!e)throw new n(t)}n.d(t,"a",(function(){return r}))},,,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bodyOpenClassName=t.portalClassName=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(0),i=m(a),s=m(n(24)),u=m(n(28)),c=m(n(155)),l=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(92)),f=n(67),d=m(f),p=n(162);function m(e){return e&&e.__esModule?e:{default:e}}function h(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function g(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var v=t.portalClassName="ReactModalPortal",b=t.bodyOpenClassName="ReactModal__Body--open",y=f.canUseDOM&&void 0!==s.default.createPortal,w=function(){return y?s.default.createPortal:s.default.unstable_renderSubtreeIntoContainer};function _(e){return e()}var O=function(e){function t(){var e,n,o;h(this,t);for(var a=arguments.length,u=Array(a),l=0;l<a;l++)u[l]=arguments[l];return n=o=g(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(u))),o.removePortal=function(){!y&&s.default.unmountComponentAtNode(o.node);var e=_(o.props.parentSelector);e&&e.contains(o.node)?e.removeChild(o.node):console.warn('React-Modal: "parentSelector" prop did not returned any DOM element. Make sure that the parent element is unmounted to avoid any memory leaks.')},o.portalRef=function(e){o.portal=e},o.renderPortal=function(e){var n=w()(o,i.default.createElement(c.default,r({defaultStyles:t.defaultStyles},e)),o.node);o.portalRef(n)},g(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"componentDidMount",value:function(){f.canUseDOM&&(y||(this.node=document.createElement("div")),this.node.className=this.props.portalClassName,_(this.props.parentSelector).appendChild(this.node),!y&&this.renderPortal(this.props))}},{key:"getSnapshotBeforeUpdate",value:function(e){return{prevParent:_(e.parentSelector),nextParent:_(this.props.parentSelector)}}},{key:"componentDidUpdate",value:function(e,t,n){if(f.canUseDOM){var r=this.props,o=r.isOpen,a=r.portalClassName;e.portalClassName!==a&&(this.node.className=a);var i=n.prevParent,s=n.nextParent;s!==i&&(i.removeChild(this.node),s.appendChild(this.node)),(e.isOpen||o)&&!y&&this.renderPortal(this.props)}}},{key:"componentWillUnmount",value:function(){if(f.canUseDOM&&this.node&&this.portal){var e=this.portal.state,t=Date.now(),n=e.isOpen&&this.props.closeTimeoutMS&&(e.closesAt||t+this.props.closeTimeoutMS);n?(e.beforeClose||this.portal.closeWithTimeout(),setTimeout(this.removePortal,n-t)):this.removePortal()}}},{key:"render",value:function(){return f.canUseDOM&&y?(!this.node&&y&&(this.node=document.createElement("div")),w()(i.default.createElement(c.default,r({ref:this.portalRef,defaultStyles:t.defaultStyles},this.props)),this.node)):null}}],[{key:"setAppElement",value:function(e){l.setElement(e)}}]),t}(a.Component);O.propTypes={isOpen:u.default.bool.isRequired,style:u.default.shape({content:u.default.object,overlay:u.default.object}),portalClassName:u.default.string,bodyOpenClassName:u.default.string,htmlOpenClassName:u.default.string,className:u.default.oneOfType([u.default.string,u.default.shape({base:u.default.string.isRequired,afterOpen:u.default.string.isRequired,beforeClose:u.default.string.isRequired})]),overlayClassName:u.default.oneOfType([u.default.string,u.default.shape({base:u.default.string.isRequired,afterOpen:u.default.string.isRequired,beforeClose:u.default.string.isRequired})]),appElement:u.default.instanceOf(d.default),onAfterOpen:u.default.func,onRequestClose:u.default.func,closeTimeoutMS:u.default.number,ariaHideApp:u.default.bool,shouldFocusAfterRender:u.default.bool,shouldCloseOnOverlayClick:u.default.bool,shouldReturnFocusAfterClose:u.default.bool,preventScroll:u.default.bool,parentSelector:u.default.func,aria:u.default.object,data:u.default.object,role:u.default.string,contentLabel:u.default.string,shouldCloseOnEsc:u.default.bool,overlayRef:u.default.func,contentRef:u.default.func,id:u.default.string,overlayElement:u.default.func,contentElement:u.default.func},O.defaultProps={isOpen:!1,portalClassName:v,bodyOpenClassName:b,role:"dialog",ariaHideApp:!0,closeTimeoutMS:0,shouldFocusAfterRender:!0,shouldCloseOnEsc:!0,shouldCloseOnOverlayClick:!0,shouldReturnFocusAfterClose:!0,preventScroll:!1,parentSelector:function(){return document.body},overlayElement:function(e,t){return i.default.createElement("div",e,t)},contentElement:function(e,t){return i.default.createElement("div",e,t)}},O.defaultStyles={overlay:{position:"fixed",top:0,left:0,right:0,bottom:0,backgroundColor:"rgba(255, 255, 255, 0.75)"},content:{position:"absolute",top:"40px",left:"40px",right:"40px",bottom:"40px",border:"1px solid #ccc",background:"#fff",overflow:"auto",WebkitOverflowScrolling:"touch",borderRadius:"4px",outline:"none",padding:"20px"}},(0,p.polyfill)(O),t.default=O},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),s=h(n(28)),u=m(n(156)),c=h(n(157)),l=m(n(92)),f=m(n(160)),d=h(n(67)),p=h(n(93));function m(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function h(e){return e&&e.__esModule?e:{default:e}}n(161);var g={overlay:"ReactModal__Overlay",content:"ReactModal__Content"},v=0,b=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.setOverlayRef=function(e){n.overlay=e,n.props.overlayRef&&n.props.overlayRef(e)},n.setContentRef=function(e){n.content=e,n.props.contentRef&&n.props.contentRef(e)},n.afterClose=function(){var e=n.props,t=e.appElement,r=e.ariaHideApp,o=e.htmlOpenClassName,a=e.bodyOpenClassName;a&&f.remove(document.body,a),o&&f.remove(document.getElementsByTagName("html")[0],o),r&&v>0&&0===(v-=1)&&l.show(t),n.props.shouldFocusAfterRender&&(n.props.shouldReturnFocusAfterClose?(u.returnFocus(n.props.preventScroll),u.teardownScopedFocus()):u.popWithoutFocus()),n.props.onAfterClose&&n.props.onAfterClose(),p.default.deregister(n)},n.open=function(){n.beforeOpen(),n.state.afterOpen&&n.state.beforeClose?(clearTimeout(n.closeTimer),n.setState({beforeClose:!1})):(n.props.shouldFocusAfterRender&&(u.setupScopedFocus(n.node),u.markForFocusLater()),n.setState({isOpen:!0},(function(){n.setState({afterOpen:!0}),n.props.isOpen&&n.props.onAfterOpen&&n.props.onAfterOpen({overlayEl:n.overlay,contentEl:n.content})})))},n.close=function(){n.props.closeTimeoutMS>0?n.closeWithTimeout():n.closeWithoutTimeout()},n.focusContent=function(){return n.content&&!n.contentHasFocus()&&n.content.focus({preventScroll:!0})},n.closeWithTimeout=function(){var e=Date.now()+n.props.closeTimeoutMS;n.setState({beforeClose:!0,closesAt:e},(function(){n.closeTimer=setTimeout(n.closeWithoutTimeout,n.state.closesAt-Date.now())}))},n.closeWithoutTimeout=function(){n.setState({beforeClose:!1,isOpen:!1,afterOpen:!1,closesAt:null},n.afterClose)},n.handleKeyDown=function(e){9===e.keyCode&&(0,c.default)(n.content,e),n.props.shouldCloseOnEsc&&27===e.keyCode&&(e.stopPropagation(),n.requestClose(e))},n.handleOverlayOnClick=function(e){null===n.shouldClose&&(n.shouldClose=!0),n.shouldClose&&n.props.shouldCloseOnOverlayClick&&(n.ownerHandlesClose()?n.requestClose(e):n.focusContent()),n.shouldClose=null},n.handleContentOnMouseUp=function(){n.shouldClose=!1},n.handleOverlayOnMouseDown=function(e){n.props.shouldCloseOnOverlayClick||e.target!=n.overlay||e.preventDefault()},n.handleContentOnClick=function(){n.shouldClose=!1},n.handleContentOnMouseDown=function(){n.shouldClose=!1},n.requestClose=function(e){return n.ownerHandlesClose()&&n.props.onRequestClose(e)},n.ownerHandlesClose=function(){return n.props.onRequestClose},n.shouldBeClosed=function(){return!n.state.isOpen&&!n.state.beforeClose},n.contentHasFocus=function(){return document.activeElement===n.content||n.content.contains(document.activeElement)},n.buildClassName=function(e,t){var r="object"===(void 0===t?"undefined":o(t))?t:{base:g[e],afterOpen:g[e]+"--after-open",beforeClose:g[e]+"--before-close"},a=r.base;return n.state.afterOpen&&(a=a+" "+r.afterOpen),n.state.beforeClose&&(a=a+" "+r.beforeClose),"string"==typeof t&&t?a+" "+t:a},n.attributesFromObject=function(e,t){return Object.keys(t).reduce((function(n,r){return n[e+"-"+r]=t[r],n}),{})},n.state={afterOpen:!1,beforeClose:!1},n.shouldClose=null,n.moveFromContentToOverlay=null,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"componentDidMount",value:function(){this.props.isOpen&&this.open()}},{key:"componentDidUpdate",value:function(e,t){this.props.isOpen&&!e.isOpen?this.open():!this.props.isOpen&&e.isOpen&&this.close(),this.props.shouldFocusAfterRender&&this.state.isOpen&&!t.isOpen&&this.focusContent()}},{key:"componentWillUnmount",value:function(){this.state.isOpen&&this.afterClose(),clearTimeout(this.closeTimer)}},{key:"beforeOpen",value:function(){var e=this.props,t=e.appElement,n=e.ariaHideApp,r=e.htmlOpenClassName,o=e.bodyOpenClassName;o&&f.add(document.body,o),r&&f.add(document.getElementsByTagName("html")[0],r),n&&(v+=1,l.hide(t)),p.default.register(this)}},{key:"render",value:function(){var e=this.props,t=e.id,n=e.className,o=e.overlayClassName,a=e.defaultStyles,i=e.children,s=n?{}:a.content,u=o?{}:a.overlay;if(this.shouldBeClosed())return null;var c={ref:this.setOverlayRef,className:this.buildClassName("overlay",o),style:r({},u,this.props.style.overlay),onClick:this.handleOverlayOnClick,onMouseDown:this.handleOverlayOnMouseDown},l=r({id:t,ref:this.setContentRef,style:r({},s,this.props.style.content),className:this.buildClassName("content",n),tabIndex:"-1",onKeyDown:this.handleKeyDown,onMouseDown:this.handleContentOnMouseDown,onMouseUp:this.handleContentOnMouseUp,onClick:this.handleContentOnClick,role:this.props.role,"aria-label":this.props.contentLabel},this.attributesFromObject("aria",r({modal:!0},this.props.aria)),this.attributesFromObject("data",this.props.data||{}),{"data-testid":this.props.testId}),f=this.props.contentElement(l,i);return this.props.overlayElement(c,f)}}]),t}(i.Component);b.defaultProps={style:{overlay:{},content:{}},defaultStyles:{}},b.propTypes={isOpen:s.default.bool.isRequired,defaultStyles:s.default.shape({content:s.default.object,overlay:s.default.object}),style:s.default.shape({content:s.default.object,overlay:s.default.object}),className:s.default.oneOfType([s.default.string,s.default.object]),overlayClassName:s.default.oneOfType([s.default.string,s.default.object]),bodyOpenClassName:s.default.string,htmlOpenClassName:s.default.string,ariaHideApp:s.default.bool,appElement:s.default.instanceOf(d.default),onAfterOpen:s.default.func,onAfterClose:s.default.func,onRequestClose:s.default.func,closeTimeoutMS:s.default.number,shouldFocusAfterRender:s.default.bool,shouldCloseOnOverlayClick:s.default.bool,shouldReturnFocusAfterClose:s.default.bool,preventScroll:s.default.bool,role:s.default.string,contentLabel:s.default.string,aria:s.default.object,data:s.default.object,children:s.default.node,shouldCloseOnEsc:s.default.bool,overlayRef:s.default.func,contentRef:s.default.func,id:s.default.string,overlayElement:s.default.func,contentElement:s.default.func,testId:s.default.string},t.default=b,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.handleBlur=c,t.handleFocus=l,t.markForFocusLater=function(){i.push(document.activeElement)},t.returnFocus=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=null;try{return void(0!==i.length&&(t=i.pop()).focus({preventScroll:e}))}catch(e){console.warn(["You tried to return focus to",t,"but it is not in the DOM anymore"].join(" "))}},t.popWithoutFocus=function(){i.length>0&&i.pop()},t.setupScopedFocus=function(e){s=e,window.addEventListener?(window.addEventListener("blur",c,!1),document.addEventListener("focus",l,!0)):(window.attachEvent("onBlur",c),document.attachEvent("onFocus",l))},t.teardownScopedFocus=function(){s=null,window.addEventListener?(window.removeEventListener("blur",c),document.removeEventListener("focus",l)):(window.detachEvent("onBlur",c),document.detachEvent("onFocus",l))};var r,o=n(91),a=(r=o)&&r.__esModule?r:{default:r};var i=[],s=null,u=!1;function c(){u=!0}function l(){if(u){if(u=!1,!s)return;setTimeout((function(){s.contains(document.activeElement)||((0,a.default)(s)[0]||s).focus()}),0)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=(0,a.default)(e);if(!n.length)return void t.preventDefault();var r=void 0,o=t.shiftKey,i=n[0],s=n[n.length-1];if(e===document.activeElement){if(!o)return;r=s}s!==document.activeElement||o||(r=i);i===document.activeElement&&o&&(r=s);if(r)return t.preventDefault(),void r.focus();var u=/(\bChrome\b|\bSafari\b)\//.exec(navigator.userAgent);if(null==u||"Chrome"==u[1]||null!=/\biPod\b|\biPad\b/g.exec(navigator.userAgent))return;var c=n.indexOf(document.activeElement);c>-1&&(c+=o?-1:1);if(void 0===(r=n[c]))return t.preventDefault(),void(r=o?s:i).focus();t.preventDefault(),r.focus()};var r,o=n(91),a=(r=o)&&r.__esModule?r:{default:r};e.exports=t.default},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){var r;
/*!
  Copyright (c) 2015 Jed Watson.
  Based on code that is Copyright 2013-2015, Facebook, Inc.
  All rights reserved.
*/!function(){"use strict";var o=!("undefined"==typeof window||!window.document||!window.document.createElement),a={canUseDOM:o,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:o&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:o&&!!window.screen};void 0===(r=function(){return a}.call(t,n,t,e))||(e.exports=r)}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dumpClassLists=function(){0};var r={},o={};t.add=function(e,t){return n=e.classList,a="html"==e.nodeName.toLowerCase()?r:o,void t.split(" ").forEach((function(e){!function(e,t){e[t]||(e[t]=0),e[t]+=1}(a,e),n.add(e)}));var n,a},t.remove=function(e,t){return n=e.classList,a="html"==e.nodeName.toLowerCase()?r:o,void t.split(" ").forEach((function(e){!function(e,t){e[t]&&(e[t]-=1)}(a,e),0===a[e]&&n.remove(e)}));var n,a}},function(e,t,n){"use strict";var r,o=n(93),a=(r=o)&&r.__esModule?r:{default:r};var i=void 0,s=void 0,u=[];function c(){0!==u.length&&u[u.length-1].focusContent()}a.default.subscribe((function(e,t){i&&s||((i=document.createElement("div")).setAttribute("data-react-modal-body-trap",""),i.style.position="absolute",i.style.opacity="0",i.setAttribute("tabindex","0"),i.addEventListener("focus",c),(s=i.cloneNode()).addEventListener("focus",c)),(u=t).length>0?(document.body.firstChild!==i&&document.body.insertBefore(i,document.body.firstChild),document.body.lastChild!==s&&document.body.appendChild(s)):(i.parentElement&&i.parentElement.removeChild(i),s.parentElement&&s.parentElement.removeChild(s))}))},function(e,t,n){"use strict";function r(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=e&&this.setState(e)}function o(e){this.setState(function(t){var n=this.constructor.getDerivedStateFromProps(e,t);return null!=n?n:null}.bind(this))}function a(e,t){try{var n=this.props,r=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}function i(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var n=null,i=null,s=null;if("function"==typeof t.componentWillMount?n="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?i="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(i="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?s="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(s="UNSAFE_componentWillUpdate"),null!==n||null!==i||null!==s){var u=e.displayName||e.name,c="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+u+" uses "+c+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==i?"\n  "+i:"")+(null!==s?"\n  "+s:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=r,t.componentWillReceiveProps=o),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=a;var l=t.componentDidUpdate;t.componentDidUpdate=function(e,t,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;l.call(this,e,t,r)}}return e}n.r(t),n.d(t,"polyfill",(function(){return i})),r.__suppressDeprecationWarning=!0,o.__suppressDeprecationWarning=!0,a.__suppressDeprecationWarning=!0},function(e,t,n){"use strict";var r=n(23),o=n(94),a=n(164),i=n(100);function s(e){var t=new a(e),n=o(a.prototype.request,t);return r.extend(n,a.prototype,t),r.extend(n,t),n}var u=s(n(97));u.Axios=a,u.create=function(e){return s(i(u.defaults,e))},u.Cancel=n(101),u.CancelToken=n(177),u.isCancel=n(96),u.all=function(e){return Promise.all(e)},u.spread=n(178),e.exports=u,e.exports.default=u},function(e,t,n){"use strict";var r=n(23),o=n(95),a=n(165),i=n(166),s=n(100);function u(e){this.defaults=e,this.interceptors={request:new a,response:new a}}u.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[i,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},u.prototype.getUri=function(e){return e=s(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(t,n){return this.request(r.merge(n||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(t,n,o){return this.request(r.merge(o||{},{method:e,url:t,data:n}))}})),e.exports=u},function(e,t,n){"use strict";var r=n(23);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,n){"use strict";var r=n(23),o=n(167),a=n(96),i=n(97);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return s(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return a(t)||(s(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(23);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t,n){"use strict";var r=n(23);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(99);e.exports=function(e,t,n){var o=n.config.validateStatus;!o||o(n.status)?e(n):t(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(172),o=n(173);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(23),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,a,i={};return e?(r.forEach(e.split("\n"),(function(e){if(a=e.indexOf(":"),t=r.trim(e.substr(0,a)).toLowerCase(),n=r.trim(e.substr(a+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}})),i):i}},function(e,t,n){"use strict";var r=n(23);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(23);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,a,i){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(a)&&s.push("domain="+a),!0===i&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(101);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";var r=n(2),o=n.n(r),a=n(0),i=n.n(a),s=n(3),u=n.n(s),c=n(115),l=n(8),f=n(33),d=n(12),p=n(38),m=n(4),h=n(64),g=n(34),v=n(63),b=n(5),y=n(13),w=n(180),_=n.n(w);function O(e,t,n,r,o,a,i){try{var s=e[a](i),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function E(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){O(a,r,o,i,s,"next",e)}function s(e){O(a,r,o,i,s,"throw",e)}i(void 0)}))}}function S(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return x(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return x(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function x(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var j=u()(_.a);t.a=function(e){var t=e.inPopup,n=e.onLogout,r=e.onPriceSettingsClick,s=Object(c.a)(),u=S(Object(a.useState)(!1),2),w=u[0],_=u[1],O=S(Object(a.useState)(p.a.ON),2),x=O[0],k=O[1],T=Object(g.a)(t).sendEvent,C=Object(h.a)(),A=C.error,N=C.handleBackgroundRequest,P=C.isLoading,R=C.status;Object(a.useEffect)((function(){E(o.a.mark((function e(){var t;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(b.a)(m.a.NOTIFICATIONS_SETTINGS);case 2:(t=e.sent)&&k(t.state);case 4:case"end":return e.stop()}}),e)})))()}),[]),Object(a.useEffect)((function(){"ok"===R&&(n&&n(),_(!1))}),[n,R]),Object(a.useEffect)((function(){A&&console.error(A)}),[A]);var D=Object(a.useCallback)(function(){var e=E(o.a.mark((function e(t){var n,r,a,i,s,u;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.target,r=n.dataset,a=r.duration,i=r.targetState,e.next=4,Object(b.a)(m.a.UID);case 4:return s=e.sent,e.next=7,Object(b.a)(m.a.USER_ID);case 7:return u=e.sent,e.next=10,T("click","".concat("notification","_").concat(i,"_").concat(a),{datetime:Date.now(),extension_brand:d.b,extension_version:Object(y.f)(),uid:s,url:window.location.href,user_id:u,version:d.f});case 10:return e.next=12,l.browser.runtime.sendMessage({command:f.a.CHANGE_NOTIFICATIONS_SETTINGS,duration:a,state:i});case 12:_(!1),setTimeout((function(){k((function(e){return e===p.a.OFF?p.a.ON:p.a.OFF}))}),250);case 14:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),[T]),I=Object(a.useCallback)(E(o.a.mark((function e(){var t,n;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(b.a)(m.a.UID);case 2:return t=e.sent,e.next=5,Object(b.a)(m.a.USER_ID);case 5:return n=e.sent,e.next=8,T("click","logout",{datetime:Date.now(),extension_brand:d.b,extension_version:Object(y.f)(),uid:t,url:window.location.href,user_id:n,version:d.f});case 8:return e.next=10,N({command:f.a.SIGN_OUT});case 10:case"end":return e.stop()}}),e)}))),[N,T]);return i.a.createElement(v.a,{className:j("settings")(),isVisible:w,onChange:_,title:x===p.a.OFF?s.formatMessage({id:"settings.notificationsEnable"}):s.formatMessage({id:"settings.notificationsDisable"})},p.b[x].map((function(e){var t=e.duration,n=e.label;return i.a.createElement("button",{"data-duration":t,"data-target-state":x===p.a.OFF?p.a.ON:p.a.OFF,key:"".concat(x,"-").concat(t),onClick:D},s.formatMessage({id:n}))})),i.a.createElement("span",{className:j("separator")()}),i.a.createElement("button",{onClick:r},s.formatMessage({id:"settings.priceSettings"})),i.a.createElement("button",{disabled:P,onClick:I},s.formatMessage({id:"settings.logOut"})))}},function(e,t,n){e.exports={settings:"Settings__settings--1jdSg",separator:"Settings__separator--1KuWh"}},,function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));function r(e){return e.getTime()%6e4}function o(e){var t=new Date(e.getTime()),n=Math.ceil(t.getTimezoneOffset());return t.setSeconds(0,0),6e4*n+(n>0?(6e4+r(t))%6e4:r(t))}},function(e,t,n){"use strict";var r,o=n(7);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var i=(a(r={},o.a.EN,{lang:o.a.EN,messages:{"auth.securityPolicy":'By using this extension, you agree to the <a href="{policyHref}" rel="noopener noreferrer" target="_blank">security policy</a>.',"auth.rememberPassword":"I remember password","auth.remindPassword":"If you have forgotten your password, click here","auth.remindPasswordSuccessMessage":"We have sent you a password recovery link in the mail.","auth.resetPassword":"Reset password","auth.reset":"Reset password","auth.loginLater":"Log in later","auth.errorBusy":"Server error. Reload the page and try once again.","auth.errorIncorrectPasswordOrUsername":"Wrong password or e-mail address.","auth.errorProfileNotFound":"The e-mail address that you entered was not found.","auth.errorTooManyAttempts":"Too many attempts. Please try again later.","auth.errorAuthData":"Can not verify the authorization data.","auth.errorAuthCookie":"Please log in to https://www.ratehawk.com first.","auth.authOr":"Log in or ","auth.signUp":"sign up","auth.authReason":" to earn more"}}),a(r,o.a.RU,{lang:o.a.RU,messages:{"auth.securityPolicy":'Используя данное расширение, вы соглашаетесь с <a href="{policyHref}" rel="noopener noreferrer" target="_blank">политикой конфиденциальности</a>.',"auth.rememberPassword":"Я помню пароль","auth.remindPassword":"Если вы забыли пароль, нажмите сюда","auth.remindPasswordSuccessMessage":"Мы отправили вам на почту ссылку для восстановления пароля.","auth.resetPassword":"Восстановить","auth.reset":"Восстановление пароля","auth.loginLater":"Авторизоваться позже","auth.errorBusy":"Ошибка сервера. Попробуйте еще раз позже.","auth.errorIncorrectPasswordOrUsername":"Указан неправильный пароль или электронный адрес.","auth.errorProfileNotFound":"Мы не нашли введенный вами адрес электронной почты.","auth.errorTooManyAttempts":"Слишком много попыток. Попробуйте еще раз позже.","auth.errorAuthData":"Не могу проверить авторизационные данные.","auth.errorAuthCookie":"Пожалуйста, сначала авторизуйтесь на https://www.ratehawk.com.","auth.authOr":"Авторизуйтесь или<br>","auth.signUp":"зарегистрируйтесь","auth.authReason":", чтобы заработать больше"}}),r);t.a=i},function(e,t,n){"use strict";var r,o=n(7);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var i=(a(r={},o.a.EN,{lang:o.a.EN,messages:{"signin.email":"Email","signin.password":"Password","signin.submitButton":"Enter"}}),a(r,o.a.RU,{lang:o.a.RU,messages:{"signin.email":"Email","signin.password":"Пароль","signin.submitButton":"Войти"}}),r);t.a=i},,,,,function(e,t,n){"use strict";n.d(t,"a",(function(){return L}));var r=n(0),o=n(42),a=n(6);const i=["localeMatcher","style","currency","currencyDisplay","unit","unitDisplay","useGrouping","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","compactDisplay","currencyDisplay","currencySign","notation","signDisplay","unit","unitDisplay"];function s({locale:e,formats:t,onError:n},r,o={}){const{format:s}=o,u=s&&Object(a.g)(t,"number",s,n)||{};return r(e,Object(a.f)(o,i,u))}function u(e,t,n,r={}){try{return s(e,t,r).format(n)}catch(t){e.onError(Object(a.b)("Error formatting number.",t))}return String(n)}function c(e,t,n,r={}){try{return s(e,t,r).formatToParts(n)}catch(t){e.onError(Object(a.b)("Error formatting number.",t))}return[]}const l=["numeric","style"];function f(e,t,n,r,o={}){r||(r="second");Intl.RelativeTimeFormat||e.onError(Object(a.b)('Intl.RelativeTimeFormat is not available in this environment.\nTry polyfilling it using "@formatjs/intl-relativetimeformat"\n'));try{return function({locale:e,formats:t,onError:n},r,o={}){const{format:i}=o,s=!!i&&Object(a.g)(t,"relative",i,n)||{};return r(e,Object(a.f)(o,l,s))}(e,t,o).format(n,r)}catch(t){e.onError(Object(a.b)("Error formatting relative time.",t))}return String(n)}const d=["localeMatcher","formatMatcher","timeZone","hour12","weekday","era","year","month","day","hour","minute","second","timeZoneName"];function p({locale:e,formats:t,onError:n,timeZone:r},o,i,s={}){const{format:u}=s,c=Object.assign(Object.assign({},r&&{timeZone:r}),u&&Object(a.g)(t,o,u,n));let l=Object(a.f)(s,d,c);return"time"!==o||l.hour||l.minute||l.second||(l=Object.assign(Object.assign({},l),{hour:"numeric",minute:"numeric"})),i(e,l)}function m(e,t,n,r={}){const o="string"==typeof n?new Date(n||0):n;try{return p(e,"date",t,r).format(o)}catch(t){e.onError(Object(a.b)("Error formatting date.",t))}return String(o)}function h(e,t,n,r={}){const o="string"==typeof n?new Date(n||0):n;try{return p(e,"time",t,r).format(o)}catch(t){e.onError(Object(a.b)("Error formatting time.",t))}return String(o)}function g(e,t,n,r={}){const o="string"==typeof n?new Date(n||0):n;try{return p(e,"date",t,r).formatToParts(o)}catch(t){e.onError(Object(a.b)("Error formatting date.",t))}return[]}function v(e,t,n,r={}){const o="string"==typeof n?new Date(n||0):n;try{return p(e,"time",t,r).formatToParts(o)}catch(t){e.onError(Object(a.b)("Error formatting time.",t))}return[]}const b=["localeMatcher","type"];function y({locale:e,onError:t},n,r,o={}){Intl.PluralRules||t(Object(a.b)('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n'));const i=Object(a.f)(o,b);try{return n(e,i).select(r)}catch(e){t(Object(a.b)("Error formatting plural.",e))}return"other"}var w=n(151),_=n(53);function O(e,t){return Object.keys(e).reduce((n,r)=>(n[r]=Object.assign({timeZone:t},e[r]),n),{})}function E(e,t){return Object.keys(Object.assign(Object.assign({},e),t)).reduce((n,r)=>(n[r]=Object.assign(Object.assign({},e[r]||{}),t[r]||{}),n),{})}function S(e,t){if(!t)return e;const n=_.a.formats;return Object.assign(Object.assign(Object.assign({},n),e),{date:E(O(n.date,t),O(e.date||{},t)),time:E(O(n.time,t),O(e.time||{},t))})}function x({locale:e,formats:t,messages:n,defaultLocale:o,defaultFormats:i,onError:s,timeZone:u},c,l={id:""},f={}){const{id:d,defaultMessage:p}=l;Object(w.a)(!!d,"[React Intl] An `id` must be provided to format a message.");const m=n&&n[String(d)];t=S(t,u),i=S(i,u);let h=[];if(m)try{h=c.getMessageFormat(m,e,t,{formatters:c}).formatHTMLMessage(f)}catch(t){s(Object(a.b)(`Error formatting message: "${d}" for locale: "${e}"`+(p?", using default message as fallback.":""),t))}else(!p||e&&e.toLowerCase()!==o.toLowerCase())&&s(Object(a.b)(`Missing message: "${d}" for locale: "${e}"`+(p?", using default message as fallback.":"")));if(!h.length&&p)try{h=c.getMessageFormat(p,o,i).formatHTMLMessage(f)}catch(e){s(Object(a.b)(`Error formatting the default message for: "${d}"`,e))}return h.length?1===h.length&&"string"==typeof h[0]?h[0]||p||String(d):(g=h,r.createElement(r.Fragment,null,...g)):(s(Object(a.b)(`Cannot format message: "${d}", using message ${m||p?"source":"id"} as fallback.`)),"string"==typeof m?m||p||String(d):p||String(d));var g}function j(e,t,n={id:""},r={}){return x(e,t,n,Object.keys(r).reduce((e,t)=>{const n=r[t];return e[t]="string"==typeof n?Object(a.e)(n):n,e},{}))}var k=n(72),T=n.n(k);const C=["localeMatcher","type","style"],A=Date.now();function N({locale:e,onError:t},n,r,o={}){Intl.ListFormat||t(Object(a.b)('Intl.ListFormat is not available in this environment.\nTry polyfilling it using "@formatjs/intl-listformat"\n'));const i=Object(a.f)(o,C);try{const t={},o=r.map((e,n)=>{if("object"==typeof e){const r=function(e){return`${A}_${e}_${A}`}(n);return t[r]=e,r}return String(e)});if(!Object.keys(t).length)return n(e,i).format(o);return n(e,i).formatToParts(o).reduce((e,n)=>{const r=n.value;return t[r]?e.push(t[r]):"string"==typeof e[e.length-1]?e[e.length-1]+=r:e.push(r),e},[])}catch(e){t(Object(a.b)("Error formatting list.",e))}return r}const P=["localeMatcher","style","type","fallback"];function R({locale:e,onError:t},n,r,o={}){Intl.DisplayNames||t(Object(a.b)('Intl.DisplayNames is not available in this environment.\nTry polyfilling it using "@formatjs/intl-displaynames"\n'));const i=Object(a.f)(o,P);try{return n(e,i).of(r)}catch(e){t(Object(a.b)("Error formatting display name.",e))}}const D=T.a||k;function I(e){return{locale:e.locale,timeZone:e.timeZone,formats:e.formats,textComponent:e.textComponent,messages:e.messages,defaultLocale:e.defaultLocale,defaultFormats:e.defaultFormats,onError:e.onError}}function M(e,t){const n=Object(a.c)(t),r=Object.assign(Object.assign({},a.a),e),{locale:o,defaultLocale:i,onError:s}=r;return o?!Intl.NumberFormat.supportedLocalesOf(o).length&&s?s(Object(a.b)(`Missing locale data for locale: "${o}" in Intl.NumberFormat. Using default locale: "${i}" as fallback. See https://github.com/formatjs/react-intl/blob/master/docs/Getting-Started.md#runtime-requirements for more details`)):!Intl.DateTimeFormat.supportedLocalesOf(o).length&&s&&s(Object(a.b)(`Missing locale data for locale: "${o}" in Intl.DateTimeFormat. Using default locale: "${i}" as fallback. See https://github.com/formatjs/react-intl/blob/master/docs/Getting-Started.md#runtime-requirements for more details`)):(s&&s(Object(a.b)(`"locale" was not configured, using "${i}" as fallback. See https://github.com/formatjs/react-intl/blob/master/docs/API.md#intlshape for more details`)),r.locale=r.defaultLocale||"en"),Object.assign(Object.assign({},r),{formatters:n,formatNumber:u.bind(null,r,n.getNumberFormat),formatNumberToParts:c.bind(null,r,n.getNumberFormat),formatRelativeTime:f.bind(null,r,n.getRelativeTimeFormat),formatDate:m.bind(null,r,n.getDateTimeFormat),formatDateToParts:g.bind(null,r,n.getDateTimeFormat),formatTime:h.bind(null,r,n.getDateTimeFormat),formatTimeToParts:v.bind(null,r,n.getDateTimeFormat),formatPlural:y.bind(null,r,n.getPluralRules),formatMessage:x.bind(null,r,n),formatHTMLMessage:j.bind(null,r,n),formatList:N.bind(null,r,n.getListFormat),formatDisplayName:R.bind(null,r,n.getDisplayNames)})}class L extends r.PureComponent{constructor(){super(...arguments),this.cache=Object(a.d)(),this.state={cache:this.cache,intl:M(I(this.props),this.cache),prevConfig:I(this.props)}}static getDerivedStateFromProps(e,{prevConfig:t,cache:n}){const r=I(e);return D(t,r)?null:{intl:M(r,n),prevConfig:r}}render(){return Object(a.h)(this.state.intl),r.createElement(o.b,{value:this.state.intl},this.props.children)}}L.displayName="IntlProvider",L.defaultProps=a.a},function(e,t,n){e.exports={errorMessage:"ErrorMessage__errorMessage--2LCmn"}},function(e,t,n){e.exports={input:"RestorePassword__input--24ywR",message:"RestorePassword__message--2dapk"}},function(e,t,n){e.exports={input:"SignIn__input--1mQvr"}},function(e,t,n){e.exports={textButton:"TextButton__textButton--2jcii",textButton_view_light:"TextButton__textButton_view_light--j66PQ"}},function(e,t,n){e.exports={title:"Auth__title--1e5PJ",link:"Auth__link--39ZRq",privacyPolicy:"Auth__privacyPolicy--3V9Vo"}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(29),o=n(21),a=n(14);function i(e,t){Object(a.a)(2,arguments);var n=Object(o.a)(e).getTime(),i=Object(r.a)(t);return new Date(n+i)}},,function(e,t,n){"use strict";var r=n(2),o=n.n(r),a=n(0),i=n.n(a),s=n(3),u=n.n(s),c=n(115),l=n(12),f=n(4),d=n(19),p=n(34),m=n(33),h=n(64),g=n(16),v=n(26),b=n(190),y=n.n(b),w=u()(y.a),_=function(e){var t=e.children;return i.a.createElement("div",{className:w("errorMessage")()},t)},O=n(191),E=n.n(O);function S(e,t,n,r,o,a,i){try{var s=e[a](i),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function x(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return j(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return j(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function j(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var k=u()(E.a),T=function(e){var t=e.onSubmit,n=e.submitLabel,r=Object(c.a)(),s=x(Object(a.useState)(""),2),u=s[0],l=s[1],f=x(Object(a.useState)(null),2),d=f[0],p=f[1],b=Object(a.useRef)(null),y=Object(h.a)(),w=y.error,O=y.handleBackgroundRequest,E=y.isLoading,j=y.status;Object(a.useEffect)((function(){b.current&&b.current.focus()}),[]),Object(a.useEffect)((function(){"ok"===j&&(t&&t(),p(r.formatMessage({id:"auth.remindPasswordSuccessMessage"})))}),[j,t,r]),Object(a.useEffect)((function(){b.current&&(b.current.disabled=E)}),[E]);var T=Object(a.useCallback)((function(e){var t=e.target;return l(t.value)}),[]),C=Object(a.useCallback)(function(){var e,t=(e=o.a.mark((function e(t){return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),p(null),e.next=4,O({command:m.a.RESTORE_PASSWORD,username:u});case 4:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){S(a,r,o,i,s,"next",e)}function s(e){S(a,r,o,i,s,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),[O,u]);return i.a.createElement("div",null,i.a.createElement("form",{onSubmit:C},w&&i.a.createElement(_,null,r.formatMessage({id:w})),d?i.a.createElement("p",{className:k("message")()},d):i.a.createElement(i.a.Fragment,null,i.a.createElement(v.b,{className:k("input")(),inputRef:b,label:r.formatMessage({id:"signin.email"}),name:"username",onChange:T,placeholder:"example@mail.ru",required:!0,size:v.a.M,type:"email",value:u,wide:!0}),i.a.createElement(g.d,{disabled:E,size:g.a.M,type:g.b.SUBMIT,wide:!0},n))))},C=n(192),A=n.n(C);function N(e,t,n,r,o,a,i){try{var s=e[a](i),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function P(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return R(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return R(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function R(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var D,I=u()(A.a),M=function(e){var t=e.isActive,n=e.onSubmit,r=Object(c.a)(),s=P(Object(a.useState)(""),2),u=s[0],l=s[1],f=P(Object(a.useState)(""),2),d=f[0],p=f[1],b=Object(a.useRef)(null),y=Object(a.useRef)(null),w=Object(h.a)(),O=w.error,E=w.handleBackgroundRequest,S=w.isLoading,x=w.status;Object(a.useEffect)((function(){t&&b.current&&b.current.focus()}),[t]),Object(a.useEffect)((function(){"ok"===x&&n()}),[x,n]),Object(a.useEffect)((function(){b.current&&(b.current.disabled=S),y.current&&(y.current.disabled=S)}),[S]);var j=Object(a.useCallback)((function(e){var t=e.target;return l(t.value)}),[]),k=Object(a.useCallback)((function(e){var t=e.target;return p(t.value)}),[]),T=Object(a.useCallback)(function(){var e,t=(e=o.a.mark((function e(t){return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),e.next=3,E({command:m.a.SIGN_IN,username:u,password:d});case 3:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){N(a,r,o,i,s,"next",e)}function s(e){N(a,r,o,i,s,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),[E,u,d]);return i.a.createElement("div",null,i.a.createElement("form",{onSubmit:T},O&&i.a.createElement(_,null,r.formatMessage({id:O})),i.a.createElement(v.b,{className:I("input")(),inputRef:b,label:r.formatMessage({id:"signin.email"}),name:"username",onChange:j,placeholder:"example@mail.ru",required:!0,size:v.a.M,type:"email",value:u,wide:!0}),i.a.createElement(v.b,{className:I("input")(),inputRef:y,label:r.formatMessage({id:"signin.password"}),name:"password",onChange:k,placeholder:"••••••",required:!0,size:v.a.M,type:"password",value:d,wide:!0}),i.a.createElement(g.d,{disabled:S,size:g.a.M,type:g.b.SUBMIT,wide:!0},r.formatMessage({id:"signin.submitButton"}))))},L=n(193),B=n.n(L),F=u()(B.a);!function(e){e.LIGHT="light"}(D||(D={}));var U=function(e){var t=e.children,n=e.className,r=e.href,o=e.onClick,a=e.target,s=void 0===a?"_blank":a,u=e.view;return r?i.a.createElement("a",{className:F("textButton")({view:u},n),href:r,onClick:o,target:s},t):i.a.createElement("button",{className:F("textButton")({view:u},n),onClick:o,type:"button"},t)},z=n(56),H=n(5),G=n(13),W=n(194),q=n.n(W);function V(e,t,n,r,o,a,i){try{var s=e[a](i),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function Y(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){V(a,r,o,i,s,"next",e)}function s(e){V(a,r,o,i,s,"throw",e)}i(void 0)}))}}function $(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return X(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return X(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function X(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var K=u()(q.a);t.a=function(e){var t=e.className,n=e.inPopup,r=e.isActive,s=e.name,u=e.onSkip,m=e.onSubmit,h=Object(c.a)(),g=$(Object(a.useState)(!1),2),v=g[0],b=g[1],y=Object(p.a)(n).sendEvent,w=Object(a.useCallback)(Y(o.a.mark((function e(){var t,n;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(H.a)(f.a.UID);case 2:return t=e.sent,e.next=5,Object(H.a)(f.a.USER_ID);case 5:return n=e.sent,e.next=8,y("click","".concat(s,"_signup"),{datetime:Date.now(),extension_brand:l.b,extension_version:Object(G.f)(),uid:t,url:window.location.href,user_id:n,version:l.f});case 8:case"end":return e.stop()}}),e)}))),[s,y]),_=Object(a.useCallback)(Y(o.a.mark((function e(){var t,n;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(H.a)(f.a.UID);case 2:return t=e.sent,e.next=5,Object(H.a)(f.a.USER_ID);case 5:return n=e.sent,e.next=8,y("click","".concat(s,"_login"),{datetime:Date.now(),extension_brand:l.b,extension_version:Object(G.f)(),uid:t,url:window.location.href,user_id:n,version:l.f});case 8:m();case 9:case"end":return e.stop()}}),e)}))),[s,m,y]),O=Object(a.useCallback)(Y(o.a.mark((function e(){var t,n;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(H.a)(f.a.UID);case 2:return t=e.sent,e.next=5,Object(H.a)(f.a.USER_ID);case 5:return n=e.sent,e.next=8,y("click","".concat(s,"_forget"),{datetime:Date.now(),extension_brand:l.b,extension_version:Object(G.f)(),uid:t,url:window.location.href,user_id:n,version:l.f});case 8:b((function(e){return!e}));case 9:case"end":return e.stop()}}),e)}))),[s,y]),E=Object(a.useCallback)(Y(o.a.mark((function e(){var t,n;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(H.a)(f.a.UID);case 2:return t=e.sent,e.next=5,Object(H.a)(f.a.USER_ID);case 5:return n=e.sent,e.next=8,y("click","".concat(s,"_later"),{datetime:Date.now(),extension_brand:l.b,extension_version:Object(G.f)(),uid:t,url:window.location.href,user_id:n,version:l.f});case 8:u();case 9:case"end":return e.stop()}}),e)}))),[s,u,y]);return i.a.createElement("div",{className:t},i.a.createElement(z.a,{className:K("title")(),size:"m"},v?h.formatMessage({id:"auth.reset"}):i.a.createElement(i.a.Fragment,null,i.a.createElement("span",{dangerouslySetInnerHTML:{__html:h.formatMessage({id:"auth.authOr"})}}),i.a.createElement(U,{href:d.b.REGISTRATION,onClick:w},h.formatMessage({id:"auth.signUp"})),h.formatMessage({id:"auth.authReason"}))),v?i.a.createElement(T,{submitLabel:h.formatMessage({id:"auth.resetPassword"})}):i.a.createElement(M,{isActive:r,onSubmit:_}),i.a.createElement("div",null,i.a.createElement(U,{className:K("link")(),onClick:O},v?h.formatMessage({id:"auth.rememberPassword"}):h.formatMessage({id:"auth.remindPassword"}))),i.a.createElement("div",null,i.a.createElement(U,{className:K("link")(),onClick:E,view:D.LIGHT},h.formatMessage({id:"auth.loginLater"}))),i.a.createElement("div",null,i.a.createElement("p",{className:K("privacyPolicy")(),dangerouslySetInnerHTML:{__html:h.formatMessage({id:"auth.securityPolicy"},{policyHref:d.b.PRIVACY_POLICY})}})))}},,function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var r=n(21),o=n(14);function a(e){Object(o.a)(1,arguments);var t=Object(r.a)(e);return t.setHours(0,0,0,0),t}},,,function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return u}));var r=n(15),o=n(41),a={nowSeconds:function(){return Date.now()/1e3}};var i=Object(o.b)()?function(){try{return Object(o.a)(e,"perf_hooks").performance}catch(e){return}}():function(){var e=Object(r.e)().performance;if(e&&e.now)return{now:function(){return e.now()},timeOrigin:Date.now()-e.now()}}(),s=void 0===i?a:{nowSeconds:function(){return(i.timeOrigin+i.now())/1e3}},u=a.nowSeconds.bind(a);s.nowSeconds.bind(s),function(){var e=Object(r.e)().performance;if(e)e.timeOrigin?e.timeOrigin:e.timing&&e.timing.navigationStart||Date.now()}()}).call(this,n(57)(e))},function(e,t,n){"use strict";var r;n.d(t,"a",(function(){return r})),function(e){e.CHROME="chrome",e.EDGE="edge",e.FIREFOX="firefox",e.OPERA="opera"}(r||(r={}))},,function(e,t,n){},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t,n){"use strict";var r=n(65);n(28);var o=n(0),a=n.n(o),i=n(24),s=n.n(i),u=!1,c=a.a.createContext(null),l=function(e){var t,n;function o(t,n){var r;r=e.call(this,t,n)||this;var o,a=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?a?(o="exited",r.appearStatus="entering"):o="entered":o=t.unmountOnExit||t.mountOnEnter?"unmounted":"exited",r.state={status:o},r.nextCallback=null,r}n=e,(t=o).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,o.getDerivedStateFromProps=function(e,t){return e.in&&"unmounted"===t.status?{status:"exited"}:null};var i=o.prototype;return i.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},i.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?"entering"!==n&&"entered"!==n&&(t="entering"):"entering"!==n&&"entered"!==n||(t="exiting")}this.updateStatus(!1,t)},i.componentWillUnmount=function(){this.cancelNextCallback()},i.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},i.updateStatus=function(e,t){void 0===e&&(e=!1),null!==t?(this.cancelNextCallback(),"entering"===t?this.performEnter(e):this.performExit()):this.props.unmountOnExit&&"exited"===this.state.status&&this.setState({status:"unmounted"})},i.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,o=this.props.nodeRef?[r]:[s.a.findDOMNode(this),r],a=o[0],i=o[1],c=this.getTimeouts(),l=r?c.appear:c.enter;!e&&!n||u?this.safeSetState({status:"entered"},(function(){t.props.onEntered(a)})):(this.props.onEnter(a,i),this.safeSetState({status:"entering"},(function(){t.props.onEntering(a,i),t.onTransitionEnd(l,(function(){t.safeSetState({status:"entered"},(function(){t.props.onEntered(a,i)}))}))})))},i.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:s.a.findDOMNode(this);t&&!u?(this.props.onExit(r),this.safeSetState({status:"exiting"},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))},i.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},i.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},i.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},i.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:s.a.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var o=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],a=o[0],i=o[1];this.props.addEndListener(a,i)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},i.render=function(){var e=this.state.status;if("unmounted"===e)return null;var t=this.props,n=t.children,o=(t.in,t.mountOnEnter,t.unmountOnExit,t.appear,t.enter,t.exit,t.timeout,t.addEndListener,t.onEnter,t.onEntering,t.onEntered,t.onExit,t.onExiting,t.onExited,t.nodeRef,Object(r.a)(t,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return a.a.createElement(c.Provider,{value:null},"function"==typeof n?n(e,o):a.a.cloneElement(a.a.Children.only(n),o))},o}(a.a.Component);function f(){}l.contextType=c,l.propTypes={},l.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:f,onEntering:f,onEntered:f,onExit:f,onExiting:f,onExited:f},l.UNMOUNTED="unmounted",l.EXITED="exited",l.ENTERING="entering",l.ENTERED="entered",l.EXITING="exiting";t.a=l},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=u(n(0)),o=u(n(28)),a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(541)),i=u(n(542)),s=n(212);function u(e){return e&&e.__esModule?e:{default:e}}function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function f(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){v(e,t,n[t])}))}return e}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function h(e,t,n){return t&&m(e.prototype,t),n&&m(e,n),e}function g(e,t){return(g=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function v(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var b=function(e){return e.stopPropagation()},y=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),e=function(e,t){return!t||"object"!==c(t)&&"function"!=typeof t?p(e):t}(this,d(t).call(this)),v(p(e),"debounceTimeout",!1),v(p(e),"hoverTimeout",!1),e.state={showTip:!1,hasHover:!1,ignoreShow:!1,hasBeenShown:!1},e.showTip=e.showTip.bind(p(e)),e.hideTip=e.hideTip.bind(p(e)),e.checkHover=e.checkHover.bind(p(e)),e.toggleTip=e.toggleTip.bind(p(e)),e.startHover=e.startHover.bind(p(e)),e.endHover=e.endHover.bind(p(e)),e.listenResizeScroll=e.listenResizeScroll.bind(p(e)),e.handleResizeScroll=e.handleResizeScroll.bind(p(e)),e.bodyTouchStart=e.bodyTouchStart.bind(p(e)),e.bodyTouchEnd=e.bodyTouchEnd.bind(p(e)),e.targetTouchStart=e.targetTouchStart.bind(p(e)),e.targetTouchEnd=e.targetTouchEnd.bind(p(e)),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&g(e,t)}(t,e),h(t,null,[{key:"getDerivedStateFromProps",value:function(e){return a.isBrowser&&e.isOpen?{hasBeenShown:!0}:null}}]),h(t,[{key:"componentDidMount",value:function(){this.props.isOpen&&this.setState({isOpen:!0}),this.scrollParent=(0,s.getScrollParent)(this.target),window.addEventListener("resize",this.listenResizeScroll),this.scrollParent.addEventListener("scroll",this.listenResizeScroll),window.addEventListener("touchstart",this.bodyTouchStart),window.addEventListener("touchEnd",this.bodyTouchEnd)}},{key:"componentDidUpdate",value:function(e,t){if(!this.state.hasBeenShown&&this.props.isOpen)return this.setState({hasBeenShown:!0}),setTimeout(this.showTip,0);!t.hasBeenShown&&this.state.hasBeenShown&&this.showTip()}},{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this.listenResizeScroll),this.scrollParent.removeEventListener("scroll",this.listenResizeScroll),window.removeEventListener("touchstart",this.bodyTouchStart),window.removeEventListener("touchEnd",this.bodyTouchEnd),clearTimeout(this.debounceTimeout),clearTimeout(this.hoverTimeout)}},{key:"listenResizeScroll",value:function(){clearTimeout(this.debounceTimeout),this.debounceTimeout=setTimeout(this.handleResizeScroll,100),this.state.targetTouch&&this.setState({targetTouch:void 0})}},{key:"handleResizeScroll",value:function(){if(this.state.showTip){var e=5*Math.round(document.documentElement.clientWidth/5);this.setState({clientWidth:e})}}},{key:"targetTouchStart",value:function(){this.setState({targetTouch:!0})}},{key:"targetTouchEnd",value:function(){this.state.targetTouch&&this.toggleTip()}},{key:"bodyTouchEnd",value:function(){this.state.targetTouch&&this.setState({targetTouch:void 0})}},{key:"bodyTouchStart",value:function(e){this.target&&this.target.contains(e.target)||this.tip&&this.tip.contains(e.target)||this.props.isOpen||this.hideTip()}},{key:"toggleTip",value:function(){this.state.showTip?this.hideTip():this.showTip()}},{key:"showTip",value:function(){var e=this;if(!this.state.hasBeenShown)return this.setState({hasBeenShown:!0});this.state.showTip||this.setState({showTip:!0},(function(){"function"==typeof e.props.onToggle&&e.props.onToggle(e.state.showTip)}))}},{key:"hideTip",value:function(){var e=this;this.setState({hasHover:!1}),this.state.showTip&&this.setState({showTip:!1},(function(){"function"==typeof e.props.onToggle&&e.props.onToggle(e.state.showTip)}))}},{key:"startHover",value:function(){this.state.ignoreShow||(this.setState({hasHover:!0}),clearTimeout(this.hoverTimeout),this.hoverTimeout=setTimeout(this.checkHover,this.props.hoverDelay))}},{key:"endHover",value:function(){this.setState({hasHover:!1}),clearTimeout(this.hoverTimeout),this.hoverTimeout=setTimeout(this.checkHover,this.props.mouseOutDelay||this.props.hoverDelay)}},{key:"checkHover",value:function(){this.state.hasHover?this.showTip():this.hideTip()}},{key:"render",value:function(){var e,t=this,n=this.props,o=n.arrow,s=n.arrowSize,u=n.background,c=n.className,d=n.children,p=n.color,m=n.content,h=n.direction,g=n.distance,v=n.eventOff,y=n.eventOn,w=n.eventToggle,_=n.forceDirection,O=n.isOpen,E=n.mouseOutDelay,S=n.padding,x=n.styles,j=n.tagName,k=n.tipContentHover,T=n.tipContentClassName,C=n.useDefaultStyles,A=n.useHover,N=n.arrowContent,P=null!=O,R=P?O:this.state.showTip,D={style:f({position:"relative"},x),ref:function(e){t.target=e},className:c},I={onClick:b};if(v&&(D[v]=this.hideTip),y&&(D[y]=this.showTip),w?D[w]=this.toggleTip:A&&!P&&(D.onMouseEnter=this.startHover,D.onMouseLeave=k||E?this.endHover:this.hideTip,D.onTouchStart=this.targetTouchStart,D.onTouchEnd=this.targetTouchEnd,k&&(I.onMouseEnter=this.startHover,I.onMouseLeave=this.endHover,I.onTouchStart=b)),this.state.hasBeenShown){var M=(0,i.default)(h,_,this.tip,this.target,f({},this.state,{showTip:R}),{background:C?"#333":u,arrow:o,arrowSize:s,distance:g}),L=f({},M.tip,{background:C?"#333":u,color:C?"#fff":p,padding:S,boxSizing:"border-box",zIndex:this.props.zIndex,position:"absolute",display:"inline-block"}),B=f({},M.arrow.positionStyles,N?{}:M.arrow.borderStyles,{position:"absolute",width:"0px",height:"0px",zIndex:this.props.zIndex+1});e=r.default.createElement(a.default,null,r.default.createElement("div",l({},I,{className:void 0!==T?T:c}),r.default.createElement("span",{className:"react-tooltip-lite",style:L,ref:function(e){t.tip=e}},m),r.default.createElement("span",{className:"react-tooltip-lite-arrow react-tooltip-lite-".concat(M.realDirection,"-arrow"),style:B},N)))}return r.default.createElement(j,D,d,e)}}]),t}(r.default.Component);v(y,"propTypes",{arrow:o.default.bool,arrowSize:o.default.number,background:o.default.string,children:o.default.node.isRequired,className:o.default.string,color:o.default.string,content:o.default.node.isRequired,direction:o.default.string,distance:o.default.number,eventOff:o.default.string,eventOn:o.default.string,eventToggle:o.default.string,forceDirection:o.default.bool,hoverDelay:o.default.number,isOpen:o.default.bool,mouseOutDelay:o.default.number,padding:o.default.oneOfType([o.default.string,o.default.number]),styles:o.default.object,tagName:o.default.string,tipContentHover:o.default.bool,tipContentClassName:o.default.string,useDefaultStyles:o.default.bool,useHover:o.default.bool,zIndex:o.default.number,onToggle:o.default.func,arrowContent:o.default.node}),v(y,"defaultProps",{arrow:!0,arrowSize:10,background:"",className:"",color:"",direction:"up",distance:void 0,eventOff:void 0,eventOn:void 0,eventToggle:void 0,forceDirection:!1,hoverDelay:200,isOpen:void 0,mouseOutDelay:void 0,padding:"10px",styles:{},tagName:"div",tipContentHover:!1,tipContentClassName:void 0,useDefaultStyles:!1,useHover:!0,zIndex:1e3,onToggle:void 0,arrowContent:null});var w=y;t.default=w},function(e,t,n){e.exports={popup:"Popup__popup--2jRhz"}},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getScrollTop=function(){return window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0},t.getScrollLeft=function(){return window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft||0},t.getArrowSpacing=function(e){var t=e.arrow?e.arrowSize:3;return"number"==typeof e.distance?e.distance:t},t.getScrollParent=function(e){var t=getComputedStyle(e),n=window;if("fixed"!==t.position)for(var r=e.parentElement;r;){var o=getComputedStyle(r);/(auto|scroll)/.test(o.overflow+o.overflowY+o.overflowX)?(n=r,r=void 0):r=r.parentElement}return n},t.noArrowDistance=t.bodyPadding=t.minArrowPadding=void 0;t.minArrowPadding=5;t.bodyPadding=10;t.noArrowDistance=3},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(29),o=n(21),a=n(14);function i(e,t){Object(a.a)(2,arguments);var n=Object(o.a)(e),i=Object(r.a)(t);return isNaN(i)?new Date(NaN):i?(n.setDate(n.getDate()+i),n):n}},function(e,t,n){var r=n(278),o=n(206);e.exports=function(e,t,n){var a=!0,i=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return o(n)&&(a="leading"in n?!!n.leading:a,i="trailing"in n?!!n.trailing:i),r(e,t,{leading:a,maxWait:t,trailing:i})}},function(e,t,n){var r=n(280),o="object"==typeof self&&self&&self.Object===Object&&self,a=r||o||Function("return this")();e.exports=a},function(e,t,n){var r=n(206),o=n(281),a=/^\s+|\s+$/g,i=/^[-+]0x[0-9a-f]+$/i,s=/^0b[01]+$/i,u=/^0o[0-7]+$/i,c=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(o(e))return NaN;if(r(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=r(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(a,"");var n=s.test(e);return n||u.test(e)?c(e.slice(2),n?2:8):i.test(e)?NaN:+e}},function(e,t,n){var r=n(218),o=n(282),a=n(283),i=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":i&&i in Object(e)?o(e):a(e)}},function(e,t,n){var r=n(215).Symbol;e.exports=r},function(e,t,n){var r=n(220);e.exports=function(e){var t=r(e),n=t%1;return t==t?n?t-n:t:0}},function(e,t,n){var r=n(216);e.exports=function(e){return e?(e=r(e))===1/0||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}},function(e,t,n){var r=n(534),o=n(535),a=n(538),i=n(206);e.exports=function(e,t,n){if(!i(n))return!1;var s=typeof t;return!!("number"==s?o(n)&&a(t,n.length):"string"==s&&t in n)&&r(n[t],e)}},,,,,,,,,,,,,,,,function(e,t,n){e.exports={wrapper:"Month__wrapper--yKr7V",title:"Month__title--3t803",year:"Month__year--1flJe"}},function(e,t,n){e.exports={wrapper:"MonthsList__wrapper--18WDj",scroller:"MonthsList__scroller--28gKo",underlay:"MonthsList__underlay--eHXcm"}},function(e,t,n){e.exports={wrapper:"Day__wrapper--13qjK",wrapper_hidden:"Day__wrapper_hidden--XDHAr",inner:"Day__inner--3hkJg",inner_selected:"Day__inner_selected--Xp9ju",inner_withLeftRadius:"Day__inner_withLeftRadius--320Ei",inner_withRightRadius:"Day__inner_withRightRadius--2tIaB",inner_locked:"Day__inner_locked--29Dzn",inner_edgeDay:"Day__inner_edgeDay--2Vgll",inner_holiday:"Day__inner_holiday--kYv96"}},function(e,t,n){e.exports={week:"Week__week--3t__V"}},function(e,t,n){e.exports={wrapper:"Month__wrapper--2CvuL",fakeWeek:"Month__fakeWeek--2_awq",title:"Month__title--x17Br",loader:"Month__loader--3M_vX",loaderDot:"Month__loaderDot--3MxX7",pending:"Month__pending--2JPu1",loaderDotFirst:"Month__loaderDotFirst--1v291 Month__loaderDot--3MxX7",loaderDotSecond:"Month__loaderDotSecond--2igxV Month__loaderDot--3MxX7",loaderDotThird:"Month__loaderDotThird--3589Q Month__loaderDot--3MxX7",loaderDotFourth:"Month__loaderDotFourth--Nqo0P Month__loaderDot--3MxX7"}},function(e,t,n){e.exports={wrapper:"DaysOfTheWeek__wrapper--rjfNA",day:"DaysOfTheWeek__day--RGo67"}},function(e,t,n){e.exports={wrapper:"Grid__wrapper--3QQQS",monthsScrolling:"Grid__monthsScrolling--YVjLd",months:"Grid__months--22r-y",year:"Grid__year--3EX2Z",separator:"Grid__separator--16zG4",validation:"Grid__validation--1XqcZ",bottomGradient:"Grid__bottomGradient--3Z6yK"}},function(e,t,n){e.exports={controlGroup:"ControlGroup__controlGroup--qwfJ3",controlGroup_wide:"ControlGroup__controlGroup_wide--3aV1A",controlGroup_vertical:"ControlGroup__controlGroup_vertical--cbEh8"}},function(e,t,n){e.exports={wrapper:"MobileSuggest__wrapper--3R1KD",wrapper_hidden:"MobileSuggest__wrapper_hidden--3xOAA",controls:"MobileSuggest__controls--1iwkM",backButton:"MobileSuggest__backButton--14X_t",arrowLeft:"MobileSuggest__arrowLeft--3LTLS"}},function(e,t,n){e.exports={input:"Datepicker__input--no7FR",group:"Datepicker__group--1ieTl",popup:"Datepicker__popup--1fvGT",popup_hidden:"Datepicker__popup_hidden--2ChtH",popupInPopup:"Datepicker__popupInPopup--3ezST",popupInPopup_hidden:"Datepicker__popupInPopup_hidden--2ysRW"}},function(e,t,n){e.exports={title:"Suggest__title--LLaKC",region:"Suggest__region--Tf3d0",region_active:"Suggest__region_active--EBSc7",hotel:"Suggest__hotel--1HvbP Suggest__region--Tf3d0",icon:"Suggest__icon--1EBQa",destination:"Suggest__destination--2hdh8",destinationTitle:"Suggest__destinationTitle--3GTFT",note:"Suggest__note--BAUrC",flag:"Suggest__flag--2h1y_"}},function(e,t,n){e.exports={wrapper:"MobileSuggest__wrapper--Qa2jD",controls:"MobileSuggest__controls--jABZ2",backButton:"MobileSuggest__backButton--3mP5a",arrowLeft:"MobileSuggest__arrowLeft--3kHxu",suggest:"MobileSuggest__suggest--IdIJ8"}},function(e,t,n){var r=n(531),o=n(221);e.exports=function(e,t,n,a){var i=null==e?0:e.length;return i?(n&&"number"!=typeof n&&o(e,t,n)&&(n=0,a=i),r(e,t,n,a)):[]}},function(e,t,n){e.exports={wrapper:"Form__wrapper--3NpTJ",rooms:"Form__rooms--cgiKx",separator:"Form__separator--3JiWJ",button:"Form__button--3sWmo",footer:"Form__footer--51GLz",bottomGradient:"Form__bottomGradient--14VNE",buttons:"Form__buttons--coxV5",somethingLikeButtonButNotButton:"Form__somethingLikeButtonButNotButton--3d-Z_",bookMoreBtn:"Form__bookMoreBtn--2qp2T Form__somethingLikeButtonButNotButton--3d-Z_",addRoomBtn:"Form__addRoomBtn--14NaF Form__somethingLikeButtonButNotButton--3d-Z_",addRoomBtnIcon:"Form__addRoomBtnIcon--1O2lx"}},function(e,t,n){var r=n(539)();e.exports=r},function(e,t,n){e.exports={control:"Select__control--2PzCD",arrowDown:"Select__arrowDown--2HUf5",clearIcon:"Select__clearIcon--2Ag08"}},function(e,t,n){e.exports={wrapper:"Counter__wrapper--2DdvP",value:"Counter__value--3pZXU",countButton:"Counter__countButton--2FPAb",countButton_disabled:"Counter__countButton_disabled--2sBoG"}},function(e,t,n){e.exports={wrapper:"Room__wrapper--3GwUJ",leftColumn:"Room__leftColumn--1vw1O",rightColumn:"Room__rightColumn--27NUU",title:"Room__title--3-Pvo",label:"Room__label--1oiQ0",label_age:"Room__label_age--23KFz",line:"Room__line--bdsBP",controlBox:"Room__controlBox--3NL1P",removeBtn:"Room__removeBtn--32cJC"}},function(e,t,n){e.exports={popup:"MobileSuggest__popup--3XVVX",controls:"MobileSuggest__controls--3thHX",backButton:"MobileSuggest__backButton--1e4Vf",arrowLeft:"MobileSuggest__arrowLeft--1oJv2"}},function(e,t,n){e.exports={input:"Guests__input--1L7Ns",popup:"Guests__popup--1O89W",arrowDown:"Guests__arrowDown--3PRO3",arrowTop:"Guests__arrowTop--1nu9d Guests__arrowDown--3PRO3"}},function(e,t,n){"use strict";(function(e){var n={event:function(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return e.hcfunnel&&(t=e).hcfunnel.apply(t,["event"].concat(r))}};t.a=n}).call(this,n(40))},function(e,t,n){e.exports={label:"Default__label--1-mkZ",control:"Default__control--wu-zN",fakeCheckbox:"Default__fakeCheckbox--3v04d",fakeCheckbox_checked:"Default__fakeCheckbox_checked--L3zXs",text:"Default__text--1N4Ob"}},function(e,t,n){e.exports={label:"Button__label--1K50g",label_wide:"Button__label_wide--jcNgd",control:"Button__control--2bdEx",button:"Button__button--2Ylc_",button_checked:"Button__button_checked--2ZpN5",button_wide:"Button__button_wide--2Py37"}},function(e,t,n){e.exports={label:"InputRadio__label--2I3G9",text:"InputRadio__text--3pefM",icon:"InputRadio__icon--2CScU",container:"InputRadio__container--17xu3",container_disabled:"InputRadio__container_disabled--1QlNM",container_error:"InputRadio__container_error--31VH5",input:"InputRadio__input--u9Mmi",input_error:"InputRadio__input_error--ktf7E",hint:"InputRadio__hint--1_JLX",note:"InputRadio__note--1Zrgf"}},function(e,t,n){e.exports={group:"RadioGroup__group--fng55",group_wide:"RadioGroup__group_wide--8ZLB9",group_column:"RadioGroup__group_column--3GDHx",radio:"RadioGroup__radio--1ES-q",group_wrapped:"RadioGroup__group_wrapped--1Facv",radio_view_button:"RadioGroup__radio_view_button--2mYc8"}},function(e,t,n){e.exports={line:"B2CExtra__line--JyzSz",tripType:"B2CExtra__tripType--16uzA",tripType_inPopup:"B2CExtra__tripType_inPopup--BWsc7",compareto:"B2CExtra__compareto--1eK1E"}},function(e,t,n){e.exports={item:"Suggest__item--3a-LB",item_active:"Suggest__item_active--NW2TW",country:"Suggest__country--z81xm",separator:"Suggest__separator--aT4bO"}},function(e,t,n){e.exports={wrapper:"MobileSuggest__wrapper--fQSD5",controls:"MobileSuggest__controls--3NEBL",backButton:"MobileSuggest__backButton--2q4WH",arrowLeft:"MobileSuggest__arrowLeft--2pFPD",suggest:"MobileSuggest__suggest--1JoKr"}},function(e,t,n){e.exports={wrapper:"Citizenship__wrapper--2CaBl",popup:"Citizenship__popup--1wvDP",arrowDown:"Citizenship__arrowDown--RvHAc",arrowTop:"Citizenship__arrowTop--3r9C3 Citizenship__arrowDown--RvHAc",clearIcon:"Citizenship__clearIcon--ajXZk"}},function(e,t,n){e.exports={group:"CheckboxGroup__group--1Phqk",group_wide:"CheckboxGroup__group_wide--1cZNB",group_wrap:"CheckboxGroup__group_wrap--3cT1u",control:"CheckboxGroup__control--seOEr",control_view_button:"CheckboxGroup__control_view_button--2Me_1"}},function(e,t,n){e.exports={control:"ECLC__control--3UnZE"}},function(e,t,n){e.exports={line:"B2BExtra__line--1Bq3N",control:"B2BExtra__control--1H2OV",meals:"B2BExtra__meals--1Qw7d B2BExtra__control--1H2OV",meals_inPopup:"B2BExtra__meals_inPopup--2PrxI",citizenship:"B2BExtra__citizenship--2goPj B2BExtra__control--1H2OV",citizenship_inPopup:"B2BExtra__citizenship_inPopup--1xBdp",freeCancellation:"B2BExtra__freeCancellation--1pVyx B2BExtra__control--1H2OV",freeCancellation_inPopup:"B2BExtra__freeCancellation_inPopup--mbu4h",eclc:"B2BExtra__eclc--bJJW3 B2BExtra__control--1H2OV",eclc_inPopup:"B2BExtra__eclc_inPopup--3ESdD"}},function(e,t,n){e.exports={wrapper:"ExtraParamsSwitcher__wrapper--1pAeQ",wrapper_inPopup:"ExtraParamsSwitcher__wrapper_inPopup--1XAtm",wrapper_mobileOnly:"ExtraParamsSwitcher__wrapper_mobileOnly--2xCGe",arrow:"ExtraParamsSwitcher__arrow--k64Xu",arrow_reverse:"ExtraParamsSwitcher__arrow_reverse--32GU5"}},function(e,t,n){e.exports={wrapper:"SearchForm__wrapper--2hyIe",control:"SearchForm__control--10mLR",destination:"SearchForm__destination--ZAJBg SearchForm__control--10mLR",destination_inPopup:"SearchForm__destination_inPopup--3q4fG",destination_narrow:"SearchForm__destination_narrow--2s1LM",destination_hidden:"SearchForm__destination_hidden--1g8pd",dates:"SearchForm__dates--amaqu SearchForm__control--10mLR",guests:"SearchForm__guests--1zWUJ SearchForm__control--10mLR",guests_isDemo:"SearchForm__guests_isDemo--26Ozz",extraParamsSwitcher:"SearchForm__extraParamsSwitcher--2dDYo SearchForm__control--10mLR",submit:"SearchForm__submit--7rmaK SearchForm__control--10mLR",submit_inPopup:"SearchForm__submit_inPopup--3339f",submit_isB2B:"SearchForm__submit_isB2B--2n-z_"}},function(e,t,n){e.exports={popup:"popup__popup--1rV6x",logo:"popup__logo--22kuu",header:"popup__header--3leZW",buttons:"popup__buttons--2xFq5",buttonClose:"popup__buttonClose--3r9s2",title:"popup__title--xOisO",text:"popup__text--B59i2",auth:"popup__auth--3APkH"}},,,,,,,function(e,t,n){var r=n(206),o=n(279),a=n(216),i=Math.max,s=Math.min;e.exports=function(e,t,n){var u,c,l,f,d,p,m=0,h=!1,g=!1,v=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function b(t){var n=u,r=c;return u=c=void 0,m=t,f=e.apply(r,n)}function y(e){return m=e,d=setTimeout(_,t),h?b(e):f}function w(e){var n=e-p;return void 0===p||n>=t||n<0||g&&e-m>=l}function _(){var e=o();if(w(e))return O(e);d=setTimeout(_,function(e){var n=t-(e-p);return g?s(n,l-(e-m)):n}(e))}function O(e){return d=void 0,v&&u?b(e):(u=c=void 0,f)}function E(){var e=o(),n=w(e);if(u=arguments,c=this,p=e,n){if(void 0===d)return y(p);if(g)return clearTimeout(d),d=setTimeout(_,t),b(p)}return void 0===d&&(d=setTimeout(_,t)),f}return t=a(t)||0,r(n)&&(h=!!n.leading,l=(g="maxWait"in n)?i(a(n.maxWait)||0,t):l,v="trailing"in n?!!n.trailing:v),E.cancel=function(){void 0!==d&&clearTimeout(d),m=0,u=p=c=d=void 0},E.flush=function(){return void 0===d?f:O(o())},E}},function(e,t,n){var r=n(215);e.exports=function(){return r.Date.now()}},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(40))},function(e,t,n){var r=n(217),o=n(284);e.exports=function(e){return"symbol"==typeof e||o(e)&&"[object Symbol]"==r(e)}},function(e,t,n){var r=n(218),o=Object.prototype,a=o.hasOwnProperty,i=o.toString,s=r?r.toStringTag:void 0;e.exports=function(e){var t=a.call(e,s),n=e[s];try{e[s]=void 0;var r=!0}catch(e){}var o=i.call(e);return r&&(t?e[s]=n:delete e[s]),o}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){var r={"./ab.svg":286,"./ad.svg":287,"./ae.svg":288,"./af.svg":289,"./ag.svg":290,"./ai.svg":291,"./al.svg":292,"./am.svg":293,"./ao.svg":294,"./ar.svg":295,"./as.svg":296,"./at.svg":297,"./au.svg":298,"./aw.svg":299,"./ax.svg":300,"./az.svg":301,"./ba.svg":302,"./bb.svg":303,"./bd.svg":304,"./be.svg":305,"./bf.svg":306,"./bg.svg":307,"./bh.svg":308,"./bi.svg":309,"./bj.svg":310,"./bl.svg":311,"./bm.svg":312,"./bn.svg":313,"./bo.svg":314,"./bq.svg":315,"./br.svg":316,"./bs.svg":317,"./bt.svg":318,"./bw.svg":319,"./by.svg":320,"./bz.svg":321,"./ca.svg":322,"./cc.svg":323,"./cd.svg":324,"./cf.svg":325,"./cg.svg":326,"./ch.svg":327,"./ci.svg":328,"./ck.svg":329,"./cl.svg":330,"./cm.svg":331,"./cn.svg":332,"./co.svg":333,"./cr.svg":334,"./cu.svg":335,"./cv.svg":336,"./cw.svg":337,"./cx.svg":338,"./cy.svg":339,"./cz.svg":340,"./de.svg":341,"./dj.svg":342,"./dk.svg":343,"./dm.svg":344,"./do.svg":345,"./dz.svg":346,"./ec.svg":347,"./ee.svg":348,"./eg.svg":349,"./er.svg":350,"./es.svg":351,"./et.svg":352,"./fi.svg":353,"./fj.svg":354,"./fk.svg":355,"./fm.svg":356,"./fo.svg":357,"./fr.svg":358,"./ga.svg":359,"./gb.svg":360,"./gd.svg":361,"./ge.svg":362,"./gf.svg":363,"./gg.svg":364,"./gh.svg":365,"./gi.svg":366,"./gl.svg":367,"./gm.svg":368,"./gn.svg":369,"./gp.svg":370,"./gq.svg":371,"./gr.svg":372,"./gt.svg":373,"./gu.svg":374,"./gw.svg":375,"./gy.svg":376,"./hk.svg":377,"./hn.svg":378,"./hr.svg":379,"./ht.svg":380,"./hu.svg":381,"./id.svg":382,"./ie.svg":383,"./il.svg":384,"./im.svg":385,"./in.svg":386,"./io.svg":387,"./iq.svg":388,"./ir.svg":389,"./is.svg":390,"./it.svg":391,"./je.svg":392,"./jm.svg":393,"./jo.svg":394,"./jp.svg":395,"./ke.svg":396,"./kg.svg":397,"./kh.svg":398,"./ki.svg":399,"./km.svg":400,"./kn.svg":401,"./kp.svg":402,"./kr.svg":403,"./kw.svg":404,"./ky.svg":405,"./kz.svg":406,"./la.svg":407,"./lb.svg":408,"./lc.svg":409,"./li.svg":410,"./lk.svg":411,"./lr.svg":412,"./ls.svg":413,"./lt.svg":414,"./lu.svg":415,"./lv.svg":416,"./ly.svg":417,"./ma.svg":418,"./mc.svg":419,"./md.svg":420,"./me.svg":421,"./mf.svg":422,"./mg.svg":423,"./mh.svg":424,"./mk.svg":425,"./ml.svg":426,"./mm.svg":427,"./mn.svg":428,"./mo.svg":429,"./mp.svg":430,"./mq.svg":431,"./mr.svg":432,"./ms.svg":433,"./mt.svg":434,"./mu.svg":435,"./mv.svg":436,"./mw.svg":437,"./mx.svg":438,"./my.svg":439,"./mz.svg":440,"./na.svg":441,"./nc.svg":442,"./ne.svg":443,"./nf.svg":444,"./ng.svg":445,"./ni.svg":446,"./nl.svg":447,"./no.svg":448,"./np.svg":449,"./nr.svg":450,"./nu.svg":451,"./nz.svg":452,"./om.svg":453,"./pa.svg":454,"./pe.svg":455,"./pf.svg":456,"./pg.svg":457,"./ph.svg":458,"./pk.svg":459,"./pl.svg":460,"./pm.svg":461,"./pn.svg":462,"./pr.svg":463,"./ps.svg":464,"./pt.svg":465,"./pw.svg":466,"./py.svg":467,"./qa.svg":468,"./re.svg":469,"./ro.svg":470,"./rs.svg":471,"./ru.svg":472,"./rw.svg":473,"./sa.svg":474,"./sb.svg":475,"./sc.svg":476,"./sd.svg":477,"./se.svg":478,"./sg.svg":479,"./sh.svg":480,"./si.svg":481,"./sj.svg":482,"./sk.svg":483,"./sl.svg":484,"./sm.svg":485,"./sn.svg":486,"./so.svg":487,"./sr.svg":488,"./ss.svg":489,"./st.svg":490,"./sv.svg":491,"./sx.svg":492,"./sy.svg":493,"./sz.svg":494,"./tc.svg":495,"./td.svg":496,"./tg.svg":497,"./th.svg":498,"./tj.svg":499,"./tk.svg":500,"./tl.svg":501,"./tm.svg":502,"./tn.svg":503,"./to.svg":504,"./tr.svg":505,"./tt.svg":506,"./tv.svg":507,"./tw.svg":508,"./tz.svg":509,"./ua.svg":510,"./ug.svg":511,"./um.svg":512,"./us.svg":513,"./uy.svg":514,"./uz.svg":515,"./va.svg":516,"./vc.svg":517,"./ve.svg":518,"./vg.svg":519,"./vi.svg":520,"./vn.svg":521,"./vu.svg":522,"./wf.svg":523,"./ws.svg":524,"./xk.svg":525,"./ye.svg":526,"./yt.svg":527,"./za.svg":528,"./zm.svg":529,"./zw.svg":530};function o(e){var t=a(e);return n(t)}function a(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}o.keys=function(){return Object.keys(r)},o.resolve=a,e.exports=o,o.id=285},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ab.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ad.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ae.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/af.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ag.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ai.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/al.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/am.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ao.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ar.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/as.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/at.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/au.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/aw.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ax.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/az.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ba.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/bb.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/bd.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/be.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/bf.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/bg.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/bh.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/bi.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/bj.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/bl.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/bm.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/bn.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/bo.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/bq.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/br.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/bs.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/bt.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/bw.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/by.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/bz.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ca.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/cc.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/cd.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/cf.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/cg.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ch.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ci.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ck.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/cl.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/cm.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/cn.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/co.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/cr.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/cu.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/cv.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/cw.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/cx.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/cy.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/cz.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/de.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/dj.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/dk.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/dm.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/do.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/dz.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ec.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ee.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/eg.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/er.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/es.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/et.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/fi.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/fj.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/fk.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/fm.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/fo.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/fr.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ga.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/gb.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/gd.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ge.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/gf.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/gg.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/gh.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/gi.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/gl.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/gm.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/gn.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/gp.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/gq.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/gr.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/gt.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/gu.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/gw.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/gy.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/hk.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/hn.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/hr.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ht.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/hu.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/id.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ie.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/il.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/im.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/in.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/io.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/iq.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ir.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/is.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/it.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/je.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/jm.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/jo.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/jp.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ke.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/kg.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/kh.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ki.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/km.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/kn.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/kp.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/kr.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/kw.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ky.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/kz.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/la.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/lb.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/lc.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/li.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/lk.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/lr.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ls.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/lt.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/lu.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/lv.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ly.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ma.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/mc.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/md.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/me.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/mf.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/mg.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/mh.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/mk.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ml.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/mm.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/mn.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/mo.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/mp.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/mq.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/mr.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ms.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/mt.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/mu.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/mv.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/mw.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/mx.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/my.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/mz.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/na.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/nc.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ne.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/nf.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ng.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ni.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/nl.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/no.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/np.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/nr.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/nu.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/nz.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/om.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/pa.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/pe.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/pf.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/pg.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ph.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/pk.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/pl.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/pm.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/pn.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/pr.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ps.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/pt.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/pw.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/py.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/qa.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/re.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ro.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/rs.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ru.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/rw.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/sa.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/sb.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/sc.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/sd.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/se.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/sg.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/sh.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/si.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/sj.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/sk.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/sl.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/sm.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/sn.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/so.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/sr.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ss.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/st.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/sv.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/sx.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/sy.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/sz.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/tc.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/td.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/tg.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/th.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/tj.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/tk.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/tl.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/tm.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/tn.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/to.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/tr.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/tt.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/tv.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/tw.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/tz.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ua.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ug.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/um.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/us.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/uy.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/uz.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/va.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/vc.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ve.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/vg.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/vi.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/vn.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/vu.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/wf.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ws.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/xk.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/ye.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/yt.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/za.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/zm.svg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"/assets/icons/zw.svg"},function(e,t,n){var r=n(219),o=n(532);e.exports=function(e,t,n,a){var i=e.length;for((n=r(n))<0&&(n=-n>i?0:i+n),(a=void 0===a||a>i?i:r(a))<0&&(a+=i),a=n>a?0:o(a);n<a;)e[n++]=t;return e}},function(e,t,n){var r=n(533),o=n(219);e.exports=function(e){return e?r(o(e),0,4294967295):0}},function(e,t){e.exports=function(e,t,n){return e==e&&(void 0!==n&&(e=e<=n?e:n),void 0!==t&&(e=e>=t?e:t)),e}},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){var r=n(536),o=n(537);e.exports=function(e){return null!=e&&o(e.length)&&!r(e)}},function(e,t,n){var r=n(217),o=n(206);e.exports=function(e){if(!o(e))return!1;var t=r(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},function(e,t){e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},function(e,t){var n=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var r=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==r||"symbol"!=r&&n.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t,n){var r=n(540),o=n(221),a=n(220);e.exports=function(e){return function(t,n,i){return i&&"number"!=typeof i&&o(t,n,i)&&(n=i=void 0),t=a(t),void 0===n?(n=t,t=0):n=a(n),i=void 0===i?t<n?1:-1:a(i),r(t,n,i,e)}}},function(e,t){var n=Math.ceil,r=Math.max;e.exports=function(e,t,o,a){for(var i=-1,s=r(n((t-e)/(o||1)),0),u=Array(s);s--;)u[a?s:++i]=e,e+=o;return u}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.isBrowser=void 0;var r=i(n(0)),o=i(n(28)),a=i(n(24));function i(e){return e&&e.__esModule?e:{default:e}}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var d="function"==typeof a.default.createPortal,p="undefined"!=typeof window;t.isBrowser=p;var m=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=c(this,l(t).call(this,e)),p&&(n.container=document.createElement("div"),document.body.appendChild(n.container),n.renderLayer()),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(t,e),n=t,(r=[{key:"componentDidUpdate",value:function(){this.renderLayer()}},{key:"componentWillUnmount",value:function(){d||a.default.unmountComponentAtNode(this.container),document.body.removeChild(this.container)}},{key:"renderLayer",value:function(){d||a.default.unstable_renderSubtreeIntoContainer(this,this.props.children,this.container)}},{key:"render",value:function(){return d?a.default.createPortal(this.props.children,this.container):null}}])&&u(n.prototype,r),o&&u(n,o),t}(r.default.Component);m.propTypes={children:o.default.node.isRequired};var h=m;t.default=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r,s,d){var p=function(e){var t=e.split("-");if(t.length>1)return t[1];return"middle"}(e),m=e.split("-")[0],h=m;if(!t&&n){var g=d.arrow&&f(r,n,m,s,d);h=(0,o.default)(m,n,r,d,a.bodyPadding,g)}var v,b=u();if(n){var y=n.style.width?0:1;v=Math.min(n.offsetWidth,b)+y}return{tip:i({},"up"===h||"down"===h?c(n,r,s,h,p,d):l(n,r,s,h,p,d),{maxWidth:b,width:v}),arrow:f(r,n,h,s,d),realDirection:h}};var r,o=(r=n(543))&&r.__esModule?r:{default:r},a=n(212);function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){s(e,t,n[t])}))}return e}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(){return"undefined"!=typeof document?document.documentElement.clientWidth-2*a.bodyPadding:1e3}function c(e,t,n,r,o,i){var s,c=-1e7,l=n.showTip?void 0:"translateX(-10000000px)",f=(0,a.getArrowSpacing)(i);if(e){var d=(0,a.getScrollLeft)(),p=t.getBoundingClientRect(),m=p.left+d,h=Math.round(t.offsetWidth/2),g=Math.min(u(),e.offsetWidth),v=m+h,b=v-i.arrowSize,y=v+i.arrowSize;if("start"===o)c=i.arrow?Math.min(b,m):m;else if("end"===o){var w=Math.max(y,m+t.offsetWidth),_=i.arrow?w:m+t.offsetWidth;c=Math.max(_-g,a.bodyPadding+d)}else{var O=m+h-Math.round(g/2),E=a.bodyPadding+d;c=Math.max(O,E)}var S=c+g-(d+document.documentElement.clientWidth-a.bodyPadding);S>0&&(c-=S),s="up"===r?p.top+(0,a.getScrollTop)()-(e.offsetHeight+f):p.bottom+(0,a.getScrollTop)()+f}return{left:c,top:s,transform:l}}function l(e,t,n,r,o,i){var s=-1e7,u=0,c=n.showTip?void 0:"translateX(-10000000px)",l=(0,a.getArrowSpacing)(i),f=i.arrow?a.minArrowPadding:0;if(e){var d=(0,a.getScrollTop)(),p=(0,a.getScrollLeft)(),m=t.getBoundingClientRect(),h=m.top+d,g=Math.round(t.offsetHeight/2),v=h+g-i.arrowSize,b=m.top+d+g+i.arrowSize;if("start"===o)u=i.arrow?Math.min(h,v):h;else if("end"===o){var y=m.bottom+d-e.offsetHeight;u=i.arrow?Math.max(y,b-e.offsetHeight):y}else{var w=Math.max(h+g-Math.round(e.offsetHeight/2),a.bodyPadding+d);u=Math.min(w,v-f)}var _=u-d+e.offsetHeight+a.bodyPadding-window.innerHeight;_>0&&(u=Math.max(u-_,b+f-e.offsetHeight)),s="right"===r?m.right+l+p:m.left-l-e.offsetWidth+p}return{left:s,top:u,transform:c}}function f(e,t,n,r,o){if(!e||!o.arrow)return{positionStyles:{top:"0",left:"-10000000px"}};var i=e.getBoundingClientRect(),s=Math.round(e.offsetHeight/2),u=Math.round(e.offsetWidth/2),c=(0,a.getScrollTop)(),l=(0,a.getScrollLeft)(),f=(0,a.getArrowSpacing)(o),d={},p={};switch(n){case"right":d.borderTop="".concat(o.arrowSize,"px solid transparent"),d.borderBottom="".concat(o.arrowSize,"px solid transparent"),o.background?d.borderRight="".concat(o.arrowSize,"px solid ").concat(o.background):(d.borderRightWidth="".concat(o.arrowSize,"px"),d.borderRightStyle="solid"),p.top=r.showTip&&t?i.top+c+s-o.arrowSize:"-10000000px",p.left=i.right+l+f-o.arrowSize;break;case"left":d.borderTop="".concat(o.arrowSize,"px solid transparent"),d.borderBottom="".concat(o.arrowSize,"px solid transparent"),o.background?d.borderLeft="".concat(o.arrowSize,"px solid ").concat(o.background):(d.borderLeftWidth="".concat(o.arrowSize,"px"),d.borderLeftStyle="solid"),p.top=r.showTip&&t?i.top+c+s-o.arrowSize:"-10000000px",p.left=i.left+l-f-1;break;case"up":d.borderLeft="".concat(o.arrowSize,"px solid transparent"),d.borderRight="".concat(o.arrowSize,"px solid transparent"),o.background?d.borderTop="".concat(o.arrowSize,"px solid ").concat(o.background):(d.borderTopWidth="".concat(o.arrowSize,"px"),d.borderTopStyle="solid"),p.left=r.showTip&&t?i.left+l+u-o.arrowSize:"-10000000px",p.top=i.top+c-f;break;case"down":default:d.borderLeft="".concat(o.arrowSize,"px solid transparent"),d.borderRight="".concat(o.arrowSize,"px solid transparent"),o.background?d.borderBottom="10px solid ".concat(o.background):(d.borderBottomWidth="".concat(o.arrowSize,"px"),d.borderBottomStyle="solid"),p.left=r.showTip&&t?i.left+l+u-o.arrowSize:"-10000000px",p.top=i.bottom+c+f-o.arrowSize}return{borderStyles:d,positionStyles:p}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function e(t,n,s,u,c,l,f){if(!s)return t;var d=s.getBoundingClientRect(),p=(0,r.getArrowSpacing)(u),m=n.offsetHeight+p+c,h=window.innerHeight-d.bottom,g=d.top,v=h>=m,b=g>=m;switch(t){case"right":return o(n,s,p,c)&&a(s,n,u)?document.documentElement.clientWidth-d.right<n.offsetWidth+p+c?"left":"right":e("up",n,s,p,c,l,!0);case"left":return o(n,s,p,c)&&a(s,n,u)?d.left<n.offsetWidth+p+c?"right":"left":e("up",n,s,p,c,l,!0);case"up":if(!f&&l&&i(u,l,c))return e("left",n,s,p,c,l,!0);if(!b){if(v)return"down";if(!f&&o(n,s,p,c))return e("right",n,s,p,c,l,!0)}return"up";case"down":default:if(!f&&l&&i(u,l,c))return e("right",n,s,p,c,l,!0);if(!v){if(b)return"up";if(!f&&o(n,s,p,c))return e("right",n,s,p,c,l,!0)}return"down"}};var r=n(212);function o(e,t,n,r){var o=t.getBoundingClientRect(),a=Math.min(o.left,document.documentElement.clientWidth-o.right);return e.offsetWidth+t.offsetWidth+n+r+a<document.documentElement.clientWidth}function a(e,t,n){var o=e.getBoundingClientRect(),a=o.bottom>window.innerHeight,i=o.top<0;if(i&&a)return!0;if(e.offsetHeight>t.offsetHeight){var s=e.offsetHeight/2,u=n.arrowSize+r.minArrowPadding,c=o.bottom-window.innerHeight,l=-o.top;return s-c>=u&&s-l>=u}return!a&&!i}function i(e,t,n){var o=(0,r.getScrollLeft)(),a=t.positionStyles.left-o>n,i=t.positionStyles.left+2*e.arrowSize<o+document.documentElement.clientWidth-n;return!a||!i}},function(e,t,n){"use strict";n.r(t);var r=n(2),o=n.n(r),a=n(0),i=n.n(a),s=n(3),u=n.n(s),c=n(545),l=n(199),f=n(213),d=n(24),p=n.n(d),m=n(115),h=n(189),g=n(8),v=n(203),b=n(33),y=n(12),w=n(7),_=n(4),O=n(19),E=n(34),S=n(197),x=n(48),j=n(43),k=n(69),T=n(68),C=n(116);function A(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function N(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?A(Object(n),!0).forEach((function(t){P(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):A(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function P(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var R={locale:"ru"},D={setLocale:function(e){return{type:"SET_LOCALE",locale:e}}},I=(n(28),i.a.createContext(null));var M=function(e){e()},L={notify:function(){}};function B(){var e=M,t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}var F=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=L,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=B())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=L)},e}();var U=function(e){var t=e.store,n=e.context,r=e.children,o=Object(a.useMemo)((function(){var e=new F(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),s=Object(a.useMemo)((function(){return t.getState()}),[t]);Object(a.useEffect)((function(){var e=o.subscription;return e.trySubscribe(),s!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[o,s]);var u=n||I;return i.a.createElement(u.Provider,{value:o},r)};function z(){return(z=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var H=n(65),G=n(55),W=n.n(G),q=n(117),V="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?a.useLayoutEffect:a.useEffect,Y=[],$=[null,null];function X(e,t){var n=e[1];return[t.payload,n+1]}function K(e,t,n){V((function(){return e.apply(void 0,t)}),n)}function Q(e,t,n,r,o,a,i){e.current=r,t.current=o,n.current=!1,a.current&&(a.current=null,i())}function Z(e,t,n,r,o,a,i,s,u,c){if(e){var l=!1,f=null,d=function(){if(!l){var e,n,d=t.getState();try{e=r(d,o.current)}catch(e){n=e,f=e}n||(f=null),e===a.current?i.current||u():(a.current=e,s.current=e,i.current=!0,c({type:"STORE_UPDATED",payload:{error:n}}))}};n.onStateChange=d,n.trySubscribe(),d();return function(){if(l=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var J=function(){return[null,0]};function ee(e,t){void 0===t&&(t={});var n=t,r=n.getDisplayName,o=void 0===r?function(e){return"ConnectAdvanced("+e+")"}:r,s=n.methodName,u=void 0===s?"connectAdvanced":s,c=n.renderCountProp,l=void 0===c?void 0:c,f=n.shouldHandleStateChanges,d=void 0===f||f,p=n.storeKey,m=void 0===p?"store":p,h=(n.withRef,n.forwardRef),g=void 0!==h&&h,v=n.context,b=void 0===v?I:v,y=Object(H.a)(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),w=b;return function(t){var n=t.displayName||t.name||"Component",r=o(n),s=z({},y,{getDisplayName:o,methodName:u,renderCountProp:l,shouldHandleStateChanges:d,storeKey:m,displayName:r,wrappedComponentName:n,WrappedComponent:t}),c=y.pure;var f=c?a.useMemo:function(e){return e()};function p(n){var r=Object(a.useMemo)((function(){var e=n.reactReduxForwardedRef,t=Object(H.a)(n,["reactReduxForwardedRef"]);return[n.context,e,t]}),[n]),o=r[0],u=r[1],c=r[2],l=Object(a.useMemo)((function(){return o&&o.Consumer&&Object(q.isContextConsumer)(i.a.createElement(o.Consumer,null))?o:w}),[o,w]),p=Object(a.useContext)(l),m=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(p)&&Boolean(p.store);var h=m?n.store:p.store,g=Object(a.useMemo)((function(){return function(t){return e(t.dispatch,s)}(h)}),[h]),v=Object(a.useMemo)((function(){if(!d)return $;var e=new F(h,m?null:p.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[h,m,p]),b=v[0],y=v[1],_=Object(a.useMemo)((function(){return m?p:z({},p,{subscription:b})}),[m,p,b]),O=Object(a.useReducer)(X,Y,J),E=O[0][0],S=O[1];if(E&&E.error)throw E.error;var x=Object(a.useRef)(),j=Object(a.useRef)(c),k=Object(a.useRef)(),T=Object(a.useRef)(!1),C=f((function(){return k.current&&c===j.current?k.current:g(h.getState(),c)}),[h,E,c]);K(Q,[j,x,T,c,C,k,y]),K(Z,[d,h,b,g,j,x,T,k,y,S],[h,b,g]);var A=Object(a.useMemo)((function(){return i.a.createElement(t,z({},C,{ref:u}))}),[u,t,C]);return Object(a.useMemo)((function(){return d?i.a.createElement(l.Provider,{value:_},A):A}),[l,A,_])}var h=c?i.a.memo(p):p;if(h.WrappedComponent=t,h.displayName=r,g){var v=i.a.forwardRef((function(e,t){return i.a.createElement(h,z({},e,{reactReduxForwardedRef:t}))}));return v.displayName=r,v.WrappedComponent=t,W()(v,t)}return W()(h,t)}}function te(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function ne(e,t){if(te(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!te(e[n[o]],t[n[o]]))return!1;return!0}var re=n(30);function oe(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function ae(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function ie(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=ae(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=ae(o),o=r(t,n)),o},r}}var se=[function(e){return"function"==typeof e?ie(e):void 0},function(e){return e?void 0:oe((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?oe((function(t){return Object(re.b)(e,t)})):void 0}];var ue=[function(e){return"function"==typeof e?ie(e):void 0},function(e){return e?void 0:oe((function(){return{}}))}];function ce(e,t,n){return z({},n,{},e,{},t)}var le=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,a=n.areMergedPropsEqual,i=!1;return function(t,n,s){var u=e(t,n,s);return i?o&&a(u,r)||(r=u):(i=!0,r=u),r}}}(e):void 0},function(e){return e?void 0:function(){return ce}}];function fe(e,t,n,r){return function(o,a){return n(e(o,a),t(r,a),a)}}function de(e,t,n,r,o){var a,i,s,u,c,l=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;function m(o,p){var m,h,g=!f(p,i),v=!l(o,a);return a=o,i=p,g&&v?(s=e(a,i),t.dependsOnOwnProps&&(u=t(r,i)),c=n(s,u,i)):g?(e.dependsOnOwnProps&&(s=e(a,i)),t.dependsOnOwnProps&&(u=t(r,i)),c=n(s,u,i)):v?(m=e(a,i),h=!d(m,s),s=m,h&&(c=n(s,u,i)),c):c}return function(o,l){return p?m(o,l):(s=e(a=o,i=l),u=t(r,i),c=n(s,u,i),p=!0,c)}}function pe(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,a=Object(H.a)(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),i=n(e,a),s=r(e,a),u=o(e,a);return(a.pure?de:fe)(i,s,u,e,a)}function me(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function he(e,t){return e===t}function ge(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?ee:n,o=t.mapStateToPropsFactories,a=void 0===o?ue:o,i=t.mapDispatchToPropsFactories,s=void 0===i?se:i,u=t.mergePropsFactories,c=void 0===u?le:u,l=t.selectorFactory,f=void 0===l?pe:l;return function(e,t,n,o){void 0===o&&(o={});var i=o,u=i.pure,l=void 0===u||u,d=i.areStatesEqual,p=void 0===d?he:d,m=i.areOwnPropsEqual,h=void 0===m?ne:m,g=i.areStatePropsEqual,v=void 0===g?ne:g,b=i.areMergedPropsEqual,y=void 0===b?ne:b,w=Object(H.a)(i,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),_=me(e,a,"mapStateToProps"),O=me(t,s,"mapDispatchToProps"),E=me(n,c,"mergeProps");return r(f,z({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:_,initMapDispatchToProps:O,initMergeProps:E,pure:l,areStatesEqual:p,areOwnPropsEqual:h,areStatePropsEqual:v,areMergedPropsEqual:y},w))}}var ve=ge();function be(){return Object(a.useContext)(I)}function ye(e){void 0===e&&(e=I);var t=e===I?be:function(){return Object(a.useContext)(e)};return function(){return t().store}}var we=ye();var _e;function Oe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ee(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Oe(Object(n),!0).forEach((function(t){Se(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Oe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Se(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}_e=d.unstable_batchedUpdates,M=_e;var xe={sizes:{mobile:680,tablet:1074,desktop:1450}},je=n(5);function ke(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Te(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Ce=function(e,t){return fetch(e,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ke(Object(n),!0).forEach((function(t){Te(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ke(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({credentials:"same-origin"},t))};function Ae(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ne(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ae(Object(n),!0).forEach((function(t){Pe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ae(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Pe(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Re={suggests:{}};function De(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Ie(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Ie(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ie(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Me(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Le(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Me(Object(n),!0).forEach((function(t){Be(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Me(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Be(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Fe(e,t,n,r,o,a,i){try{var s=e[a](i),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function Ue(e,t){return{type:"SET_SUGGEST",query:e,suggest:t}}var ze={suggests:{}},He={loadSuggest:function(e){return function(){var t,n=(t=o.a.mark((function t(n,r){var a,i,s;return o.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(a=r(),!(e in a.destination.suggests)){t.next=3;break}return t.abrupt("return",Promise.resolve());case 3:return i="https://www.ratehawk.com/api/site/multicomplete.json",t.next=6,Object(je.a)(_.a.LANGUAGE);case 6:return s=t.sent,t.abrupt("return",Ce("".concat(i,"?query=").concat(encodeURIComponent(e)||"","&locale=").concat(s)).then((function(e){return e.json()})).then((function(t){return Ge(e,t)})).then((function(t){return n(Ue(e,t))})).catch((function(){})));case 8:case"end":return t.stop()}}),t)})),function(){var e=this,n=arguments;return new Promise((function(r,o){var a=t.apply(e,n);function i(e){Fe(a,r,o,i,s,"next",e)}function s(e){Fe(a,r,o,i,s,"throw",e)}i(void 0)}))});return function(e,t){return n.apply(this,arguments)}}()}};function Ge(e,t){var n=(t.regions||[]).map(qe).map((function(e,t){return Le({index:t},e)})),r=(t.hotels||[]).map(We).map((function(e,t){return Le({index:t+n.length},e)}));return{query:e,regions:n,hotels:r}}function We(e){return{countryCode:e.country_code,countryName:e.country_name,hotelAddress:e.hotel_address||"",hotelKind:e.hotel_kind||"",id:e.otahotel_id,isNatdisCritical:!!e.is_natdis_critical,masterId:String(e.master_id||0)||"",name:e.hotel_name,regionId:e.region_id,regionName:e.region_name,slug:Ve(e.slug),multicompleteType:"hotel"}}function qe(e){return{country:e.country||"",countryCode:e.country_code||"",iata:e.iata||"",id:e.id,isNatdisCritical:!!e.is_natdis_critical,name:e.name,slug:Ve(e.slug),type:e.type,multicompleteType:"region"}}function Ve(e){if(!e)return null;var t=De(e.split("/"),3);return{country:t[0],region:t[1],subregion:t[2]}}var Ye=n(29),$e=n(14),Xe={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},Ke=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,Qe=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,Ze=/^([+-])(\d{2})(?::?(\d{2}))?$/;function Je(e,t){Object($e.a)(1,arguments);var n=t||{},r=null==n.additionalDigits?2:Object(Ye.a)(n.additionalDigits);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var o,a=et(e);if(a.date){var i=tt(a.date,r);o=nt(i.restDateString,i.year)}if(isNaN(o)||!o)return new Date(NaN);var s,u=o.getTime(),c=0;if(a.time&&(c=ot(a.time),isNaN(c)||null===c))return new Date(NaN);if(!a.timezone){var l=new Date(u+c),f=new Date(l.getUTCFullYear(),l.getUTCMonth(),l.getUTCDate(),l.getUTCHours(),l.getUTCMinutes(),l.getUTCSeconds(),l.getUTCMilliseconds());return f.setFullYear(l.getUTCFullYear()),f}return s=it(a.timezone),isNaN(s)?new Date(NaN):new Date(u+c+s)}function et(e){var t,n={},r=e.split(Xe.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?(n.date=null,t=r[0]):(n.date=r[0],t=r[1],Xe.timeZoneDelimiter.test(n.date)&&(n.date=e.split(Xe.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var o=Xe.timezone.exec(t);o?(n.time=t.replace(o[1],""),n.timezone=o[1]):n.time=t}return n}function tt(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:null};var o=r[1]&&parseInt(r[1]),a=r[2]&&parseInt(r[2]);return{year:null==a?o:100*a,restDateString:e.slice((r[1]||r[2]).length)}}function nt(e,t){if(null===t)return null;var n=e.match(Ke);if(!n)return null;var r=!!n[4],o=rt(n[1]),a=rt(n[2])-1,i=rt(n[3]),s=rt(n[4]),u=rt(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,s,u)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var o=r.getUTCDay()||7,a=7*(t-1)+n+1-o;return r.setUTCDate(r.getUTCDate()+a),r}(t,s,u):new Date(NaN);var c=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(st[t]||(ut(e)?29:28))}(t,a,i)&&function(e,t){return t>=1&&t<=(ut(e)?366:365)}(t,o)?(c.setUTCFullYear(t,a,Math.max(o,i)),c):new Date(NaN)}function rt(e){return e?parseInt(e):1}function ot(e){var t=e.match(Qe);if(!t)return null;var n=at(t[1]),r=at(t[2]),o=at(t[3]);return function(e,t,n){if(24===e)return 0===t&&0===n;return n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,o)?36e5*n+6e4*r+1e3*o:NaN}function at(e){return e&&parseFloat(e.replace(",","."))||0}function it(e){if("Z"===e)return 0;var t=e.match(Ze);if(!t)return 0;var n="+"===t[1]?-1:1,r=parseInt(t[2]),o=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,o)?n*(36e5*r+6e4*o):NaN}var st=[31,null,31,30,31,30,31,31,30,31,30,31];function ut(e){return e%400==0||e%4==0&&e%100}function ct(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function lt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ct(Object(n),!0).forEach((function(t){ft(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ct(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ft(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function dt(e){return{type:"SET_HOLIDAYS_LOADING",loading:e}}var pt={list:null,loading:!1},mt={loadHolidays:function(e){return function(e,t){var n=t().holidays;if(n.list||n.loading)return Promise.resolve();e(dt(!0));return Ce("https://www.ratehawk.com/api/v1/holidays").then((function(e){return e.json()})).then(ht).then((function(t){return e(function(e){return window.l=e,{type:"SET_HOLIDAYS",list:e}}(t))})).catch((function(){return e(dt(!1))}))}},setLoading:dt};function ht(e){return e&&"OK"===e.status&&Array.isArray(e.holidays)?e.holidays.map(Je).reduce((function(e,t){return lt(lt({},e),{},ft({},t,t))})):null}function gt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function vt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?gt(Object(n),!0).forEach((function(t){bt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):gt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function bt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var yt={list:[],loading:!1,tryCount:0},wt={load:function e(){return function(t,n){var r=n();if(r.countries.list.length>0||r.countries.loading)return Promise.resolve();t({type:"SET_LOADING",loading:!0}),t({type:"INC_TRY_COUNT"});return Ce("https://www.ratehawk.com/api/v3/site/accounts/countries/").then((function(e){return e.json()})).then((function(e){return function(e){if(!e||!e.body)return[];return e.body}(e)})).then((function(e){return t(function(e){return{type:"SET_COUNTRIES",countries:e}}(e))})).catch((function(){r.countries.tryCount<=10&&t(e())}))}}};function _t(e){return function(e){if(Array.isArray(e))return Ot(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return Ot(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Ot(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ot(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Et(){var e={popular:[],value:null};try{return JSON.parse(localStorage.getItem("citizenship"))||e}catch(t){return e}}var St={setCitizenship:function(e){return function(t,n){t({type:"SET_CITIZENSHIP",country:e});var r=n().citizenship;localStorage.setItem("citizenship",JSON.stringify(r))}}};function xt(e,t){return t?e.popular.some((function(e){return e.code===t.code}))?{popular:e.popular,value:t}:{popular:[].concat(_t(e.popular),[t]).slice(-3),value:t}:{popular:e.popular,value:null}}var jt={},kt=Object(re.c)({theme:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:xe,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"SET_THEME":return Ee({sizes:e.sizes},t.theme);default:return e}},l10n:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:R,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"SET_LOCALE":return N(N({},e),{},{locale:t.locale});default:return e}},aviaDestination:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Re,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"SET_AVIA_SUGGEST":return{suggests:Ne(Ne({},e.suggests),{},Pe({},t.query,t.suggest))};default:return e}},destination:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:ze,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"SET_SUGGEST":return{suggests:Le(Le({},e.suggests),{},Be({},t.query,t.suggest))};default:return e}},holidays:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:pt,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"SET_HOLIDAYS":return{list:t.list||e.list,loading:!1};case"SET_HOLIDAYS_LOADING":return lt(lt({},e),{},{loading:t.loading});default:return e}},countries:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:yt,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"SET_COUNTRIES":return vt(vt({},e),{},{list:t.countries,loading:!1});case"SET_LOADING":return vt(vt({},e),{},{loading:t.loading});case"INC_TRY_COUNT":return vt(vt({},e),{},{tryCount:e.tryCount+1});default:return e}},citizenship:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Et(),t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"SET_CITIZENSHIP":return xt(e,t.country);default:return e}},settings:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:jt,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"SET_SETTINGS":return t.settings;default:return e}}}),Tt=n(73),Ct=[Object(re.a)(Tt.a),window&&window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__()].filter((function(e){return e})),At=Object(re.e)(kt,re.d.apply(null,Ct));function Nt(e){var t=e.children;return i.a.createElement(U,{store:At},t)}var Pt=n(25),Rt=n(21);function Dt(e,t){Object($e.a)(2,arguments);var n=Object(Rt.a)(e),r=Object(Ye.a)(t);if(isNaN(r))return new Date(NaN);if(!r)return n;var o=n.getDate(),a=new Date(n.getTime());a.setMonth(n.getMonth()+r+1,0);var i=a.getDate();return o>=i?a:(n.setFullYear(a.getFullYear(),a.getMonth(),o),n)}function It(e){return function(e){if(Array.isArray(e))return Bt(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||Lt(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Mt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||Lt(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Lt(e,t){if(e){if("string"==typeof e)return Bt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Bt(e,t):void 0}}function Bt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ft(e,t){if(!e)return null;var n=e.getBoundingClientRect();return{top:n.top,bottom:n.bottom,left:n.left,right:n.right,width:n.width,height:n.height,absoluteTop:t.scrollTop+n.top,absoluteBottom:t.scrollTop+n.bottom,absoluteLeft:t.scrollLeft+n.left,absoluteRight:t.scrollLeft+n.right}}function Ut(e,t){var n=e?Ft(e,t):{};return["top","bottom","left","right","width","height","absoluteTop","absoluteBottom","absoluteLeft","absoluteRight"].map((function(e){return n[e]}))}var zt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document.scrollingElement||document.documentElement,t=Object(a.useRef)(null),n=Object(a.useState)({}),r=Mt(n,2),o=r[0],i=r[1];return Object(a.useEffect)((function(){i(Ft(t.current,e))}),[t.current].concat(It(Ut(t.current,e)))),[t,o]},Ht=function(e){return At.getState().theme.sizes[e]},Gt=function(){return document.documentElement.clientWidth<=Ht("mobile")},Wt=function(){return document.documentElement.clientWidth>Ht("tablet")};function qt(){return(qt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Vt(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var Yt=function(e){var t=e.fill,n=void 0===t?"currentColor":t,r=e.width,o=void 0===r?16:r,a=e.height,s=void 0===a?16:a,u=Vt(e,["fill","width","height"]);return i.a.createElement("svg",qt({width:o,height:s,viewBox:"0 0 20 20",fill:n},u),i.a.createElement("path",{fillRule:"nonzero",d:"M10.908 14.623l6.139-6.14c.5-.499.5-1.315 0-1.815l-.172-.174a1.29 1.29 0 0 0-1.817 0L10 11.553l-5.06-5.06a1.288 1.288 0 0 0-1.814 0l-.173.175c-.5.5-.5 1.316 0 1.816l6.14 6.139a1.288 1.288 0 0 0 1.815 0"}))};function $t(){return($t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Xt(e,t){var n,r,o,s=e.onClickOutside,u=e.className,c=e.children,l="ontouchstart"in window?"touchstart":"mousedown",f="ontouchstart"in window?"onTouchStartCapture":"onMouseDownCapture",d=Object(a.useRef)(!1);return Object(a.useLayoutEffect)((function(){function e(){d.current?d.current=!1:s()}return document.addEventListener(l,e),function(){return document.removeEventListener(l,e)}}),[s]),i.a.createElement("div",$t({ref:t,className:u},(o=function(){return d.current=!0},(r=f)in(n={})?Object.defineProperty(n,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[r]=o,n)),c)}var Kt=Object(a.forwardRef)(Xt);function Qt(e,t){Object($e.a)(2,arguments);var n=Object(Rt.a)(e),r=Object(Rt.a)(t);return n.getFullYear()===r.getFullYear()&&n.getMonth()===r.getMonth()}var Zt=n(66);function Jt(e){Object($e.a)(1,arguments);var t=Object(Rt.a)(e);return t.setDate(1),t.setHours(0,0,0,0),t}var en=function(e,t){return Object(a.useMemo)((function(){for(var n=[],r=Jt(e),o=function(e,t){Object($e.a)(2,arguments);var n=Object(Rt.a)(e),r=Object(Rt.a)(t),o=n.getFullYear()-r.getFullYear(),a=n.getMonth()-r.getMonth();return 12*o+a}(t,e),a=0;a<=o;a++)n.push(Dt(r,a));return n}),[e,t])};function tn(e){Object($e.a)(1,arguments);var t=Object(Rt.a)(e),n=t.getMonth();return n}var nn=Object(Pt.a)({january:{id:"january",defaultMessage:"Январь"},february:{id:"february",defaultMessage:"Февраль"},march:{id:"march",defaultMessage:"Март"},april:{id:"april",defaultMessage:"Апрель"},may:{id:"may",defaultMessage:"Май"},june:{id:"june",defaultMessage:"Июнь"},july:{id:"july",defaultMessage:"Июль"},august:{id:"august",defaultMessage:"Август"},september:{id:"september",defaultMessage:"Сентябрь"},october:{id:"october",defaultMessage:"Октябрь"},november:{id:"november",defaultMessage:"Ноябрь"},december:{id:"december",defaultMessage:"Декабрь"}}),rn=[nn.january,nn.february,nn.march,nn.april,nn.may,nn.june,nn.july,nn.august,nn.september,nn.october,nn.november,nn.december],on=function(e){return rn[tn(e)]},an=n(237),sn=n.n(an),un=u()(sn.a),cn=ve((function(e){return{locale:e.l10n.locale}}))((function(e){var t=e.month,n=e.monthIndex,r=e.locale,o=e.shouldShowYear,a=e.scrollToMonth,s=Object(m.a)().formatMessage(on(t)),u=new Intl.DateTimeFormat(r,{year:"numeric"}).format(t);return i.a.createElement("div",{className:un("wrapper")(),role:"button",tabIndex:0,onClick:function(){a(n)}},i.a.createElement("div",{className:un("title")()},s),o&&i.a.createElement("div",{className:un("year")()},u))}));var ln=n(238),fn=n.n(ln),dn=u()(fn.a),pn=function(e){var t=e.from,n=e.to,r=e.scrollView,o=e.scrollToMonth,s=e.shouldScrollRef,u=en(t,n),c={top:"".concat(r.top,"%"),height:"".concat(r.height,"%")},l=Object(a.useRef)(null),f=Object(a.useRef)(null);return Object(a.useLayoutEffect)((function(){if(s.current&&l.current&&f.current){var e=l.current,t=e.offsetTop,n=t+e.clientHeight,r=f.current,o=r.scrollTop,a=t<o;n>o+r.clientHeight?f.current.scrollTop=n-r.clientHeight:a&&(f.current.scrollTop=t)}}),[c.top,c.height]),i.a.createElement("div",{className:dn("wrapper")(),ref:f},i.a.createElement("div",{className:dn("scroller")()},i.a.createElement("div",{className:dn("underlay")(),style:c,ref:l}),u.map((function(e,t){var n=0===tn(e),r=0===t||n;return i.a.createElement(cn,{month:e,monthIndex:t,shouldShowYear:r,scrollToMonth:o,key:e.toString()})}))))};function mn(e){Object($e.a)(1,arguments);var t=Object(Rt.a)(e);return t.setHours(23,59,59,999),t}var hn=n(182);function gn(e,t){Object($e.a)(2,arguments);var n=t||{},r=Object(Rt.a)(e).getTime(),o=Object(Rt.a)(n.start).getTime(),a=Object(Rt.a)(n.end).getTime();if(!(o<=a))throw new RangeError("Invalid interval");return r>=o&&r<=a}function vn(e,t){Object($e.a)(1,arguments);var n=t||{},r=n.locale,o=r&&r.options&&r.options.weekStartsOn,a=null==o?0:Object(Ye.a)(o),i=null==n.weekStartsOn?a:Object(Ye.a)(n.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=Object(Rt.a)(e),u=s.getDay(),c=(u<i?7:0)+u-i;return s.setDate(s.getDate()-c),s.setHours(0,0,0,0),s}function bn(e,t){Object($e.a)(2,arguments);var n=Object(Ye.a)(t),r=7*n;return Object(f.a)(e,r)}function yn(e,t){Object($e.a)(2,arguments);var n=Object(l.a)(e),r=Object(l.a)(t);return n.getTime()===r.getTime()}function wn(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object($e.a)(2,arguments);var r=e||{},o=t||{},a=Object(Rt.a)(r.start).getTime(),i=Object(Rt.a)(r.end).getTime(),s=Object(Rt.a)(o.start).getTime(),u=Object(Rt.a)(o.end).getTime();if(!(a<=i&&s<=u))throw new RangeError("Invalid interval");return n.inclusive?a<=u&&s<=i:a<u&&s<i}var _n,On=n(239),En=n.n(On),Sn=u()(En.a);!function(e){e.HIDDEN="hidden",e.LOCKED="locked",e.HOLIDAY="holiday",e.SELECTED="selected",e.EDGE_DAY="edgeDay",e.WITH_LEFT_RADIUS="withLeftRadius",e.WITH_RIGHT_RADIUS="withRightRadius"}(_n||(_n={}));var xn=function(e){var t=e.day,n=e.date,r=e.hidden,o=e.locked,a=e.holiday,s=e.selected,u=e.edgeDay,c=e.withLeftRadius,l=e.withRightRadius,f=e.onMouseEnter,d=e.onMouseLeave;return r?i.a.createElement("div",{className:Sn("wrapper")({hidden:!0})}):i.a.createElement("div",{className:Sn("wrapper")(),onMouseEnter:Object(Zt.a)()||!f?void 0:function(){return f(n)},onMouseLeave:Object(Zt.a)()||!d?void 0:function(){return d()},"data-day":n},i.a.createElement("div",{className:Sn("inner")({locked:o,selected:s,holiday:a,edgeDay:u,withLeftRadius:c,withRightRadius:l}),"data-day":n},t))},jn=Object(a.memo)(xn,Tn),kn=Object.values(_n);function Tn(e,t){return kn.every((function(n){return e[n]===t[n]}))}var Cn=n(240),An=n.n(Cn),Nn=u()(An.a),Pn=function(e){for(var t=e.week,n=e.month,r=e.from,o=e.to,a=e.rangeStart,s=e.rangeEnd,u=e.onMouseEnter,c=e.onMouseLeave,d=e.holidays,p=[],m=vn(t,{weekStartsOn:e.weekStartsOn}),h=0;h<7;h++)p.push(Object(f.a)(m,h));return i.a.createElement("div",{className:Nn("week")()},p.map((function(e,t){var f=function(e){Object($e.a)(1,arguments);var t=Object(Rt.a)(e),n=t.getDate();return n}(e),p=!Qt(e,n);if(p)return i.a.createElement(jn,{day:f,date:e,hidden:p,key:f});var m=Object(l.a)(e),h=e<r||e>o,g=!!d&&!!d[m.toString()],v=yn(e,a),b=yn(e,s),y=v||b,w=0===t,_=6===t,O=1===f,E=f===function(e){Object($e.a)(1,arguments);var t=Object(Rt.a)(e),n=t.getFullYear(),r=t.getMonth(),o=new Date(0);return o.setFullYear(n,r+1,0),o.setHours(0,0,0,0),o.getDate()}(n),S=v||w||O,x=b||_||E,j=gn(e,{start:a,end:s});return i.a.createElement(jn,{day:f,date:e,hidden:p,locked:h,holiday:g,selected:j,edgeDay:y,withLeftRadius:S,withRightRadius:x,onMouseEnter:u,onMouseLeave:c,key:f})})))},Rn=ve((function(e){return{holidays:e.holidays.list}}))(Object(a.memo)(Pn,Dn));function Dn(e,t){if(e.from.valueOf()!==t.from.valueOf())return!1;if(e.to.valueOf()!==t.to.valueOf())return!1;if(e.isStartSelection!==t.isStartSelection)return!1;if(e.isEndSelection!==t.isEndSelection)return!1;var n=vn(t.week,{weekStartsOn:t.weekStartsOn}),r=function(e,t){Object($e.a)(1,arguments);var n=t||{},r=n.locale,o=r&&r.options&&r.options.weekStartsOn,a=null==o?0:Object(Ye.a)(o),i=null==n.weekStartsOn?a:Object(Ye.a)(n.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=Object(Rt.a)(e),u=s.getDay(),c=6+(u<i?-7:0)-(u-i);return s.setDate(s.getDate()+c),s.setHours(23,59,59,999),s}(t.week,{weekStartsOn:t.weekStartsOn}),o=wn({start:e.rangeStart,end:e.rangeEnd},{start:n,end:r}),a=wn({start:t.rangeStart,end:t.rangeEnd},{start:n,end:r});return!o&&!a||e.rangeStart.valueOf()===t.rangeStart.valueOf()&&e.rangeEnd.valueOf()===t.rangeEnd.valueOf()}var In=n(241),Mn=n.n(In),Ln=u()(Mn.a),Bn=ve((function(e){var t=e.l10n;return{locale:t.locale,weekStartsOn:t.weekStartsOn}}))((function(e){var t=e.month,n=e.from,r=e.to,o=e.rangeStart,s=e.rangeEnd,u=e.isStartSelection,c=e.isEndSelection,l=e.weekStartsOn,f=e.onMouseEnter,d=e.onMouseLeave,p=e.setMonthOffset,h=e.isFake,g=Object(m.a)(),v=[],b=function(e){Object($e.a)(1,arguments);var t=Object(Rt.a)(e),n=t.getMonth();return t.setFullYear(t.getFullYear(),n+1,0),t.setHours(0,0,0,0),t}(t),y=Jt(t),w=function(e,t,n){Object($e.a)(2,arguments);var r=vn(e,n),o=vn(t,n),a=r.getTime()-Object(hn.a)(r),i=o.getTime()-Object(hn.a)(o);return Math.round((a-i)/6048e5)}(vn(b,{weekStartsOn:l}),y,{weekStartsOn:l}),_=g.formatMessage(on(t)),O=Object(a.useRef)(null);Object(a.useLayoutEffect)((function(){p(S())}),[S(),u,c]);for(var E=0;E<=w;E+=1)v.push(bn(y,E));return h?i.a.createElement("div",{className:Ln("wrapper")(),ref:O},i.a.createElement("div",{className:Ln("title")()},_),v.map((function(e){return i.a.createElement("div",{className:Ln("fakeWeek")(),key:e.toString()},i.a.createElement("div",{className:Ln("loader")()},i.a.createElement("div",{className:Ln("loaderDotFirst")()}),i.a.createElement("div",{className:Ln("loaderDotSecond")()}),i.a.createElement("div",{className:Ln("loaderDotThird")()}),i.a.createElement("div",{className:Ln("loaderDotFourth")()})))}))):i.a.createElement("div",{className:Ln("wrapper")(),ref:O},i.a.createElement("div",{className:Ln("title")()},_),v.map((function(e){return i.a.createElement(Rn,{week:e,month:t,from:n,to:r,rangeStart:o,rangeEnd:s,isStartSelection:u,isEndSelection:c,onMouseEnter:f,onMouseLeave:d,key:e.toString(),weekStartsOn:l})})));function S(){return O.current?O.current.offsetTop:0}}));var Fn=n(242),Un=n.n(Fn),zn=u()(Un.a),Hn=ve((function(e){var t=e.l10n;return{locale:t.locale,weekStartsOn:t.weekStartsOn}}))((function(e){for(var t=e.locale,n=e.weekStartsOn,r=[],o=vn(new Date,{weekStartsOn:n}),a=0;a<7;a++)r.push(Object(f.a)(o,a));return i.a.createElement("div",{className:zn("wrapper")()},r.map((function(e,n){return i.a.createElement("div",{className:zn("day")(),key:n},function(e,t){var n="ar"===e?"narrow":"short";return new Intl.DateTimeFormat(e,{weekday:n}).format(t).slice(0,2)}(t,e))})))}));var Gn=n(243),Wn=n.n(Gn);function qn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Vn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Vn(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Vn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Yn=u()(Wn.a),$n=Object(Pt.a)({dateInPast:{id:"Calendar.Grid.dateInPast",defaultMessage:"Нельзя выбрать даты в прошлом"},dateBeforeCheckin:{id:"Calendar.Grid.dateBeforeCheckin",defaultMessage:"Нельзя выбрать дату раньше заезда"},dateBeforeDeparture:{id:"Calendar.Grid.dateBeforeDeparture",defaultMessage:"Нельзя выбрать дату раньше вылета"},dateIsOutOfRange:{id:"Calendar.Grid.dateIsOutOfRange",defaultMessage:"Нельзя выбрать период более 30 дней"}}),Xn=function(e){var t=e.from,n=e.to,r=e.limitFrom,o=e.limitTo,s=e.maxRange,u=e.allowOneDayRange,c=e.rangeStart,d=e.rangeEnd,p=e.isStartSelection,h=e.isEndSelection,g=e.selectRangeEnd,v=e.stopSelect,b=e.onRangeChange,y=e.setScrollView,w=e.monthsOffsets,_=e.setMonthOffset,O=e.isAvia,E=e.scrollRef,S=qn(Object(a.useState)(null),2),x=S[0],j=S[1],k=qn(Object(a.useState)(null),2),T=k[0],C=k[1],A=Object(a.useMemo)((function(){return h?u?c:Object(f.a)(c,1):r||t}),[h,u,c,r,t]),N=Object(a.useMemo)((function(){var e=o||n;return s?h?function(e){var t,n;if(Object($e.a)(1,arguments),e&&"function"==typeof e.forEach)t=e;else{if("object"!=typeof e||null===e)return new Date(NaN);t=Array.prototype.slice.call(e)}return t.forEach((function(e){var t=Object(Rt.a)(e);(void 0===n||n>t||isNaN(t))&&(n=t)})),n||new Date(NaN)}([Object(f.a)(c,s),e]):Object(f.a)(e,-1):e}),[o,n,s,h,c]),P=Object(a.useMemo)((function(){return p&&x?Object(l.a)(x):c}),[p,x,c]),R=Object(a.useMemo)((function(){var e=!!x;x&&(e=(u?x>=c:x>c)&&x<=N);return p&&x||h&&x&&e?mn(x):d}),[u,x,c,N,p,h,d]),D=en(t,n),I=qn(Object(a.useState)(0),2),M=I[0],L=I[1],B=Object(a.useCallback)(z,[p,h,r,o]),F=Object(a.useCallback)((function(){return z(null)}),[]);Object(a.useEffect)(H);var U=Object(m.a)();return i.a.createElement("div",{className:Yn("wrapper")(),role:"button",tabIndex:-1,onClick:function(e){var t=e.target.dataset.day;if(!t)return;!function(e){if(function(e){if(!gn(e,{start:A,end:N}))return"date_is_out_of_range";return null}(e))return;var t=c,n=d;if(p){var r=e>=d,o=function(e,t){Object($e.a)(2,arguments);var n=Object(l.a)(e),r=Object(l.a)(t),o=n.getTime()-Object(hn.a)(n),a=r.getTime()-Object(hn.a)(r);return Math.round((o-a)/864e5)}(n,t=e),a=!!s&&o>s;(r||a)&&(n=Object(f.a)(e,1)),g(!1)}else h&&(n=e,v());b({rangeStart:t,rangeEnd:n,isEndSelection:h})}(new Date(t))}},i.a.createElement(Hn,null),i.a.createElement("div",{className:Yn("separator")()}),i.a.createElement("div",{className:Yn("monthsScrolling")(),ref:E,onScroll:H},i.a.createElement("div",{className:Yn("months")()},D.map((function(e,t){var n=0===tn(e);return i.a.createElement(i.a.Fragment,{key:t},n?i.a.createElement("div",{className:Yn("year")()},function(e){Object($e.a)(1,arguments);var t=Object(Rt.a)(e),n=t.getFullYear();return n}(e)):null,i.a.createElement(Bn,{month:e,from:A,to:N,rangeStart:P,rangeEnd:R,isStartSelection:p,isEndSelection:h,onMouseEnter:B,onMouseLeave:F,setMonthOffset:function(e){return _(t,e)},isFake:t<M||t>=M+3,key:e.toString()}))})))),i.a.createElement("div",{className:Yn("bottomGradient")()}),i.a.createElement("div",{className:Yn("validation")()},T));function z(e){if(e&&mn(e)<t)C(U.formatMessage($n.dateInPast));else if(e&&mn(e)<A){var r=O?U.formatMessage($n.dateBeforeDeparture):U.formatMessage($n.dateBeforeCheckin);C(r)}else e&&Object(l.a)(e)>n?C(null):e&&Object(l.a)(e)>N?C(U.formatMessage($n.dateIsOutOfRange)):(C(null),j(e))}function H(){if(E.current){var e=E.current,t=e.clientHeight,n=e.scrollHeight,r=e.scrollTop;y({height:t/(n/100),top:r/(n/100)}),Object.keys(w.current).some((function(e){return w.current[Number(e)]>r&&(L(e?Number(e)-1:0),!0)}))}}},Kn=Object(a.memo)(Xn);function Qn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Zn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Zn(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Zn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Jn=function(e){var t=e.from,n=e.to,r=e.limitFrom,o=e.limitTo,s=e.maxRange,u=e.allowOneDayRange,c=e.rangeStart,l=e.rangeEnd,f=e.isStartSelection,d=e.isEndSelection,p=e.selectRangeEnd,m=e.stopSelect,h=e.onRangeChange,g=e.isAvia,v=Qn(Object(a.useState)({top:0,height:0}),2),b=v[0],y=v[1],w=Object(a.useRef)({}),_=Object(a.useRef)(null),O=Object(a.useRef)(!0),E=Object(a.useCallback)(k,[]),S=Object(a.useCallback)((function(e,t){if(w.current[e]&&w.current[e]>0)return;w.current[e]=t}),[]),x=Object(a.useCallback)((function(e){b.top===e.top&&b.height===e.height||y(e)}),[b]),j=en(t,n);return Object(a.useLayoutEffect)((function(){k(j.findIndex((function(e){return Qt(c,e)})))}),[]),i.a.createElement(i.a.Fragment,null,!Object(Zt.a)()&&i.a.createElement(pn,{from:t,to:n,scrollView:b,scrollToMonth:E,shouldScrollRef:O}),i.a.createElement(Kn,{from:t,to:n,limitFrom:r,limitTo:o,maxRange:s,allowOneDayRange:u,rangeStart:c,rangeEnd:l,isStartSelection:f,isEndSelection:d,selectRangeEnd:p,stopSelect:m,onRangeChange:h,setScrollView:x,monthsOffsets:w,setMonthOffset:S,isAvia:g,scrollRef:_}));function k(e){var t=w.current[e];_.current&&(O.current=!1,setTimeout((function(){O.current=!0}),1e3),_.current.scrollTo?_.current.scrollTo({top:t,behavior:"smooth"}):_.current.scrollTop=t)}},er=Object(a.memo)(Jn),tr=n(210),nr=n.n(tr),rr=u()(nr.a),or=function(e,t){var n=e.top,r=e.left,o=e.right,a=e.width,s=e.className,u=e.children,c=e.rootElement,l=void 0===c?document.body:c,f=e.onMouseDown,d=e.onTouchStart;return i.a.createElement(i.a.Fragment,null,document.documentElement.contains(l)&&p.a.createPortal(i.a.createElement("div",{className:rr("popup")(void 0,s),onMouseDown:f,onTouchStart:d,style:{top:"number"==typeof n?"".concat(n,"px"):"",left:"number"==typeof r?"".concat(r,"px"):"",right:"number"==typeof o?"".concat(o,"px"):"",width:"number"==typeof a?"".concat(a,"px"):""},ref:t},u),l))},ar=Object(a.forwardRef)(or),ir=n(26),sr=n(244),ur=n.n(sr),cr=u()(ur.a),lr=function(e){var t=e.wide,n=e.vertical,r=e.className,o=void 0===r?"":r,a=e.children,s=e.style,u=n?"controlGroupVertical":"";return i.a.createElement("div",{className:cr("controlGroup")({wide:t,vertical:n},[o,"controlGroup",u]),style:s},a)},fr=n(245),dr=n.n(fr),pr=u()(dr.a),mr=function(e){var t=e.control,n=e.content,r=e.onClose,o=e.hidden;return i.a.createElement(ar,{className:pr("wrapper")({hidden:o})},i.a.createElement("div",{className:pr("controls")()},i.a.createElement("div",{className:pr("backButton")(),onClick:r},i.a.createElement(Yt,{className:pr("arrowLeft")()})),t),n)},hr=n(246),gr=n.n(hr);function vr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return br(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return br(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function br(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var yr=u()(gr.a),wr=ve((function(e){return{locale:e.l10n.locale}}),(function(e){return{loadHolidays:function(){return e(mt.loadHolidays())}}}))((function(e){var t=e.from,n=e.to,r=e.limitFrom,o=void 0===r?null:r,s=e.limitTo,c=void 0===s?null:s,l=e.labelFrom,f=e.labelTo,d=e.isRangeSelect,p=e.allowOneDayRange,m=e.maxRange,h=e.rangeStart,g=e.rangeEnd,v=e.onRangeChange,b=e.locale,y=e.loadHolidays,w=e.inPopup,_=e.isDemo,O=e.isAvia,E=e.searchFormRef,S=e.rootElement,x="overlaypopup-noscroll",j=vr(Object(a.useState)(!1),2),k=j[0],T=j[1],C=vr(Object(a.useState)(!1),2),A=C[0],N=C[1],P=vr(zt(S),2),R=P[0],D=P[1];Object(a.useEffect)((function(){y()}),[]);var I=k||A,M=Object(a.useCallback)((function(){Wt()||_?w&&S&&S.scrollTo({top:120,left:0,behavior:"smooth"}):E.current.scrollIntoView({behavior:"smooth"})}),[]),L=Object(a.useCallback)((function(){Gt()&&document.body.classList.add(x),T(!0),N(!1),M()}),[Gt()]),B=Object(a.useCallback)((function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];Gt()&&document.body.classList.add(x),T(!1),N(!!d),e&&M()}),[d,Gt()]),F=Object(a.useCallback)((function(){Gt()&&document.body.classList.remove(x),T(!1),N(!1)}),[Gt()]),U=Object(a.useCallback)((function(){k?F():L()}),[k,Gt()]),z=Object(a.useCallback)((function(){A?F():B()}),[d,A,Gt()]),H=i.a.createElement(lr,{className:yr("group")()},i.a.createElement(ir.b,{className:yr("input")(),onClick:U,pseudo:!0,focused:k,size:"m",label:l,value:_r(h,b)}),d&&i.a.createElement(ir.b,{className:yr("input")(),onClick:z,focused:A,pseudo:!0,size:"m",label:f,value:_r(g,b)})),G=i.a.createElement(er,{from:t,to:n,limitFrom:o,limitTo:c,maxRange:m,allowOneDayRange:p,rangeStart:h,rangeEnd:d?g:h,isStartSelection:k,isEndSelection:A,selectRangeStart:L,selectRangeEnd:B,stopSelect:F,onRangeChange:v,isAvia:O});return i.a.createElement(Kt,{ref:R,onClickOutside:F},H,!Gt()&&!w&&i.a.createElement(ar,{className:yr("popup")({hidden:!I}),top:D.absoluteBottom+1||0,left:D.absoluteLeft||0,rootElement:S},G),!Gt()&&w&&i.a.createElement("div",{className:yr("popupInPopup")({hidden:!I},u()(nr.a)("popup")()),top:47,left:0},G),Gt()&&I&&i.a.createElement(mr,{onClose:F,content:G,control:H}))}));function _r(e,t){var n=new Intl.DateTimeFormat(t,{day:"numeric",month:"short"}).format(e),r=new Intl.DateTimeFormat(t,{weekday:"short"}).format(e);return"".concat(n,", ").concat(r)}var Or=n(214),Er=n.n(Or),Sr={};["ab","ad","ae","af","ag","ai","al","am","ao","ar","as","at","au","aw","ax","az","ba","bb","bd","be","bf","bg","bh","bi","bj","bl","bm","bn","bo","bq","br","bs","bt","bw","by","bz","ca","cc","cd","cf","cg","ch","ci","ck","cl","cm","cn","co","cr","cu","cv","cw","cx","cy","cz","de","dj","dk","dm","do","dz","ec","ee","eg","er","es","et","fi","fj","fk","fm","fo","fr","ga","gb","gd","ge","gf","gg","gh","gi","gl","gm","gn","gp","gq","gr","gt","gu","gw","gy","hk","hn","hr","ht","hu","id","ie","il","im","in","io","iq","ir","is","it","je","jm","jo","jp","ke","kg","kh","ki","km","kn","kp","kr","kw","ky","kz","la","lb","lc","li","lk","lr","ls","lt","lu","lv","ly","ma","mc","md","me","mf","mg","mh","mk","ml","mm","mn","mo","mp","mq","mr","ms","mt","mu","mv","mw","mx","my","mz","na","nc","ne","nf","ng","ni","nl","no","np","nr","nu","nz","om","pa","pe","pf","pg","ph","pk","pl","pm","pn","pr","ps","pt","pw","py","qa","re","ro","rs","ru","rw","sa","sb","sc","sd","se","sg","sh","si","sj","sk","sl","sm","sn","so","sr","ss","st","sv","sx","sy","sz","tc","td","tg","th","tj","tk","tl","tm","tn","to","tr","tt","tv","tw","tz","ua","ug","um","us","uy","uz","va","vc","ve","vg","vi","vn","vu","wf","ws","xk","ye","yt","za","zm","zw"].forEach((function(e){Sr[e]=n(285)("./".concat(e,".svg"))}));var xr,jr=Sr,kr=n.p+"/assets/icons/hotel.svg",Tr=n.p+"/assets/icons/cottage.svg",Cr=n.p+"/assets/icons/camping.svg",Ar=n.p+"/assets/icons/castle.svg",Nr=n.p+"/assets/icons/airport.svg",Pr=n.p+"/assets/icons/bus-station.svg",Rr=n.p+"/assets/icons/city.svg",Dr=n.p+"/assets/icons/district.svg",Ir=n.p+"/assets/icons/metro.svg",Mr=n.p+"/assets/icons/railway-station.svg",Lr=n.p+"/assets/icons/state.svg",Br=n.p+"/assets/icons/street.svg",Fr=n.p+"/assets/icons/universal-poi.svg";function Ur(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var zr="Apartment",Hr="Bed_and_Breakfast",Gr="BNB",Wr="Boutique_and_Design",qr="Camping",Vr="Castle",Yr="Cottages_and_Houses",$r="Farm",Xr="Guesthouse",Kr="Hostel",Qr="Hotel",Zr="Mini-hotel",Jr="Resort",eo="Sanatorium",to="Villas_and_Bungalows",no="Airport",ro="Bus Station",oo="City",ao="Country",io="Multi-City (Vicinity)",so="Multi-Region (within a country)",uo="Neighbourhood",co="Neighborhood",lo="Point of Interest",fo="Province (State)",po="Railway Station",mo="Street",ho="Subway (Entrace)",go=(Ur(xr={},"Aparthotel",kr),Ur(xr,zr,kr),Ur(xr,Hr,kr),Ur(xr,Gr,kr),Ur(xr,Wr,kr),Ur(xr,qr,Cr),Ur(xr,Vr,Ar),Ur(xr,Yr,Tr),Ur(xr,$r,Cr),Ur(xr,Xr,kr),Ur(xr,Kr,kr),Ur(xr,Qr,kr),Ur(xr,Zr,kr),Ur(xr,Jr,kr),Ur(xr,eo,kr),Ur(xr,to,Tr),Ur(xr,no,Nr),Ur(xr,ro,Pr),Ur(xr,oo,Rr),Ur(xr,ao,Lr),Ur(xr,io,Rr),Ur(xr,so,Lr),Ur(xr,uo,Dr),Ur(xr,co,Dr),Ur(xr,lo,Fr),Ur(xr,fo,Lr),Ur(xr,po,Mr),Ur(xr,mo,Br),Ur(xr,ho,Ir),xr),vo=function(e){return e in go?go[e]:""},bo=n(247),yo=n.n(bo),wo=u()(yo.a),_o=Object(Pt.a)({regions:{id:"Destination.Suggest.regions",defaultMessage:"Регионы"},hotels:{id:"Destination.Suggest.hotels",defaultMessage:"Отели"}}),Oo=function(e){var t=e.region,n=e.isActive,r=e.onClick,o=e.onMouseEnter,a=[t.name];t.country&&a.push(t.country);var s=vo(t.type),u=a.join(", ");return i.a.createElement("div",{className:wo("region")({active:n}),onClick:r,onMouseEnter:o},i.a.createElement("div",{className:wo("icon")(),style:{backgroundImage:"url('".concat(s,"')")}}),i.a.createElement("div",{className:wo("destination")(),title:u},i.a.createElement("div",{className:wo("destinationTitle")()},u)))},Eo=function(e){var t=e.hotel,n=e.isActive,r=e.onClick,o=e.onMouseEnter,a=vo(t.hotelKind);return i.a.createElement("div",{className:wo("hotel")({active:n}),onClick:r,onMouseEnter:o},i.a.createElement("div",{className:wo("icon")(),style:{backgroundImage:"url('".concat(a,"')")}}),i.a.createElement("div",{className:wo("destination")(),title:t.name},i.a.createElement("div",{className:wo("destinationTitle")()},t.name),i.a.createElement("span",{className:wo("note")(),title:"".concat(t.regionName,", ").concat(t.hotelAddress)},i.a.createElement("img",{className:wo("flag")(),title:t.countryName,alt:t.countryName,src:jr[t.countryCode.toLowerCase()].default}),t.regionName,", ",t.hotelAddress)))},So=function(e){var t=e.regions,n=e.hotels,r=e.setValue,o=e.activeItem,a=void 0===o?0:o,s=e.setActiveItem,u=Object(m.a)();return i.a.createElement(i.a.Fragment,null,t.length>0&&i.a.createElement("div",{className:wo("title")()},u.formatMessage(_o.regions)),t.map((function(e){return i.a.createElement(Oo,{region:e,key:e.id,onClick:function(){return r(e)},isActive:e.index===a,onMouseEnter:function(){return s(e.index)}})})),n.length>0&&i.a.createElement("div",{className:wo("title")()},u.formatMessage(_o.hotels)),n.map((function(e){return i.a.createElement(Eo,{hotel:e,key:e.id,onClick:function(){return r(e)},isActive:e.index===a,onMouseEnter:function(){return s(e.index)}})})))},xo=Object(Pt.a)({label:{id:"destination.label",defaultMessage:"Направление"},placeholder:{id:"destination.placeholder",defaultMessage:"Город, отель или аэропорт"}}),jo=n(248),ko=n.n(jo),To=u()(ko.a),Co=function(e){var t=e.closeSuggest,n=e.onInputChange,r=e.query,o=e.regions,s=e.hotels,u=e.setValueFromSuggest,c=e.activeSuggestItem,l=e.setActiveSuggestItem,f=Object(a.useRef)(null),d=Object(m.a)(),p=Object(a.useRef)(!1);return Object(a.useLayoutEffect)((function(){f.current.focus(),f.current.setSelectionRange(0,r.length)}),[]),i.a.createElement(ar,{className:To("wrapper")(),onMouseDown:h,onTouchStart:h},i.a.createElement("div",{className:To("controls")()},i.a.createElement("div",{className:To("backButton")(),onClick:t},i.a.createElement(Yt,{className:To("arrowLeft")()})),i.a.createElement(ir.b,{inputRef:f,onChange:n,onBlur:function(){p.current?p.current=!1:t()},onFocus:function(){p.current=!1},value:r,size:"m",wide:!0,label:d.formatMessage(xo.label),placeholder:d.formatMessage(xo.placeholder)})),i.a.createElement("div",{className:To("suggest")()},i.a.createElement(So,{regions:o,hotels:s,setValue:u,activeItem:c,setActiveItem:l})));function h(){p.current=!0}};function Ao(e){return function(e){if(Array.isArray(e))return Ro(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||Po(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function No(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||Po(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Po(e,t){if(e){if("string"==typeof e)return Ro(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ro(e,t):void 0}}function Ro(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Do=ve((function(e){return{suggests:e.destination.suggests}}),(function(e){return{loadSuggest:Er()((function(t){return e(He.loadSuggest(t))}),1e3)}}))((function(e){var t=e.suggests,n=e.loadSuggest,r=e.value,o=e.onChange,s=e.inPopup,u=e.isDemo,c=e.setInputRef,l=e.searchFormRef,f=e.rootElement,d=No(zt(f),2),p=d[0],h=d[1],g=Object(a.useRef)(null),v=No(Object(a.useState)(!1),2),b=v[0],y=v[1],w=No(Object(a.useState)(z(r)),2),_=w[0],O=w[1],E=No(Object(a.useState)(r),2),S=E[0],x=E[1],j=No(Object(a.useState)({hotels:[],regions:[]}),2),k=j[0],T=j[1],C=No(Object(a.useState)(0),2),A=C[0],N=C[1],P=k.hotels.length+k.regions.length,R=k.regions,D=k.hotels,I=b&&R.length+D.length>0;_ in t&&k.query!==_?(T(t[_]),N(0)):n(_),Object(a.useEffect)((function(){return c(g)}),[]);var M=Object(m.a)(),L=Object(a.useCallback)(F,[R,D,I,b]);return i.a.createElement(Kt,{ref:p,onClickOutside:L},i.a.createElement(ir.b,{inputRef:g,onFocus:function(e){Gt()&&document.body.classList.add("overlaypopup-noscroll");document.documentElement.clientWidth>Ht("mobile")&&document.documentElement.clientWidth<=Ht("tablet")&&!u?l.current.scrollIntoView({behavior:"smooth"}):Wt()&&s&&f&&f.scrollTo({top:120,left:0,behavior:"smooth"});y(!0),g.current.setSelectionRange(0,e.target.value.length)},onChange:B,onKeyDown:function(e){switch(e.keyCode){case 9:return void F();case 13:return function(){var e=[].concat(Ao(D),Ao(R)).find((function(e){return e.index===A}));if(!e)return;U(e)}();case 38:return void N((A+P-1)%P);case 40:return void N((A+P+1)%P)}},value:_,size:"m",wide:!0,label:M.formatMessage(xo.label),placeholder:M.formatMessage(xo.placeholder)}),I&&!Gt()&&i.a.createElement(ar,{top:h.absoluteBottom+1,left:h.absoluteLeft,width:h.width,rootElement:f},i.a.createElement(So,{regions:R,hotels:D,setValue:U,activeItem:A,setActiveItem:N})),b&&Gt()&&i.a.createElement(Co,{closeSuggest:L,onInputChange:B,query:_,regions:R,hotels:D,setValueFromSuggest:U,activeSuggestItem:A,setActiveSuggestItem:N}));function B(e){O(e.target.value)}function F(){if(b)if(S)U(S);else{var e=[].concat(Ao(R),Ao(D)).find((function(e){return e.index===A}));e&&U(e)}}function U(e){Gt()&&document.body.classList.remove("overlaypopup-noscroll"),x(e),o(e),g.current&&g.current.blur(),O(z(e)),y(!1)}function z(e){if(!e)return"";var t=[e.name];return"hotel"===e.multicompleteType?e.countryName&&t.push(e.countryName):e.country&&t.push(e.country),t.join(", ")}}));var Io=n(249),Mo=n.n(Io);function Lo(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Bo(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Lo(Object(n),!0).forEach((function(t){Fo(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Lo(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Fo(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Uo(e){return function(e){if(Array.isArray(e))return zo(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return zo(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return zo(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function zo(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ho(e,t,n){return[].concat(Uo(e.slice(0,t)),[n],Uo(e.slice(t+1)))}var Go=function(e,t){switch(t.type){case"ADD_ROOM":return function(e){return[].concat(Uo(e),[{adults:2,kids:[]}])}(e);case"REMOVE_ROOM":return function(e,t){return[].concat(Uo(e.slice(0,t)),Uo(e.slice(t+1)))}(e,t.roomIndex);case"SET_ADULTS":return function(e,t,n){var r=Bo(Bo({},e[t]),{},{adults:n});return Ho(e,t,r)}(e,t.roomIndex,t.count);case"SET_KIDS":return function(e,t,n){var r=e[t],o=r.kids,a=o.length>=n?o.slice(0,n):[].concat(Uo(o),Uo(Mo()(Array(n-o.length),0))),i=Bo(Bo({},r),{},{kids:a});return Ho(e,t,i)}(e,t.roomIndex,t.count);case"SET_KID_AGE":return function(e,t,n,r){var o=e[t],a=Ho(o.kids,n,Number(r)),i=Bo(Bo({},o),{},{kids:a});return Ho(e,t,i)}(e,t.roomIndex,t.kidIndex,t.age)}},Wo=n(16);function qo(){return(qo=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Vo(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var Yo=function(e){var t=e.fill,n=void 0===t?"currentColor":t,r=e.width,o=void 0===r?18:r,a=e.height,s=void 0===a?18:a,u=Vo(e,["fill","width","height"]);return i.a.createElement("svg",qo({width:o,height:s,viewBox:"0 0 18 18"},u),i.a.createElement("path",{fill:n,fillRule:"nonzero",d:"M15.517 7.642h-5.16v-5.16a1.358 1.358 0 0 0-2.715 0v5.16h-5.16a1.358 1.358 0 0 0 0 2.716h5.16v5.16a1.358 1.358 0 0 0 2.716 0v-5.16h5.16a1.358 1.358 0 0 0 0-2.716"}))},$o=n(250),Xo=n.n($o);var Ko=n(251),Qo=n.n(Ko),Zo=function(e){if("function"==typeof Event)return new Event(e,{bubbles:!0,cancelable:!0});var t=document.createEvent("HTMLEvents");return t.initEvent(e,!0,!0),t},Jo=n(74),ea=n(252),ta=n.n(ea),na=u()(ta.a),ra=function(e){var t=e.className,n=e.style,r=e.size,o=e.label,s=e.tooltipContent,u=e.selectRef,c=e.onFocus,l=e.onChange,f=e.onBlur,d=e.onKeyDown,p=e.icon,m=e.defaultValue,h=e.value,g=e.options,v=e.placeholder,b=e.disabled,y=e.cleaned,w=e.formatValue,_=e.cancellable,O=e.wide,E=e.required,S=e.isArrowDisabled,x=we().getState().theme.link,j=""!==C(h||m),k=S||_&&j?void 0:i.a.createElement(Yt,{className:na("arrowDown")(),width:20,height:20,fill:x});p&&(k=p);var T=u||Object(a.useRef)(null);return i.a.createElement(ir.b,{className:t,style:n,pseudo:!0,size:r,label:o,tooltipContent:s,value:w?w(h||m):C(h||m),wide:O,placeholder:v,disabled:b,required:E,icon:k},i.a.createElement("select",{className:na("control")(),ref:T,onFocus:c,onChange:l,onBlur:f,onKeyDown:d,disabled:b,defaultValue:m,value:y?"":h},y&&i.a.createElement("option",{value:"",disabled:!0,hidden:!0}),g.map((function(e){var t=e.value,n=e.text,r=e.disabled,o=e.hidden;return i.a.createElement("option",{value:t,key:t,disabled:r,hidden:o},n)}))),_&&j&&i.a.createElement("div",{className:na("clearIcon")(),onClick:function(){if(!T.current)return;var e=Zo("change");T.current.value="",T.current.dispatchEvent(e)},role:"button",tabIndex:0},i.a.createElement(Jo.a,{width:20,height:20})));function C(e){if(_&&!e)return"";for(var t=0;t<g.length;t+=1)if(g[t].value===e)return g[t].text;return""}},oa=n(253),aa=n.n(oa),ia=u()(aa.a),sa=function(e){var t=e.value,n=e.max,r=e.min,o=e.onChange;return i.a.createElement("div",{className:ia("wrapper")()},i.a.createElement("button",{className:ia("countButton")({disabled:t<=r}),disabled:t<=r,onClick:function(){return o(t-1)}},"−"),i.a.createElement("div",{className:ia("value")()},t),i.a.createElement("button",{className:ia("countButton")({disabled:t>=n}),disabled:t>=n,onClick:function(){return o(t+1)}},"+"))},ua=n(254),ca=n.n(ua),la=u()(ca.a),fa=Object(Pt.a)({roomNumber:{id:"guests.roomNumber",defaultMessage:"{roomNumber} номер"},adultsLabel:{id:"guests.adultsLabel",defaultMessage:"Взрослые"},kidsLabel:{id:"guests.kidsLabel",defaultMessage:"Дети"},kidAge:{id:"guests.kidAge",defaultMessage:"Возраст ребёнка"},remove:{id:"guests.remove",defaultMessage:"Удалить"}}),da=Qo()(18),pa=function(e){var t=e.room,n=e.index,r=e.removeRoom,o=e.setAdultsCount,a=e.setKidsCount,s=e.setKidAge,u=0!==n,c=Object(m.a)();return i.a.createElement("div",{className:la("wrapper")()},i.a.createElement("div",{className:la("line")()},i.a.createElement("div",{className:la("leftColumn")()},i.a.createElement("div",{className:la("title")()},c.formatMessage(fa.roomNumber,{roomNumber:n+1})),u&&i.a.createElement("button",{className:la("removeBtn")(),onClick:r},c.formatMessage(fa.remove))),i.a.createElement("div",{className:la("rightColumn")()},i.a.createElement("div",{className:la("controlBox")()},i.a.createElement("div",{className:la("label")()},c.formatMessage(fa.adultsLabel)),i.a.createElement(sa,{value:t.adults,min:1,max:6,onChange:o})),i.a.createElement("div",{className:la("controlBox")()},i.a.createElement("div",{className:la("label")()},c.formatMessage(fa.kidsLabel)),i.a.createElement(sa,{value:t.kids.length,min:0,max:4,onChange:a})),t.kids.length>0&&i.a.createElement("div",{className:la("label")({age:!0})},c.formatMessage(fa.kidAge)),t.kids.map((function(e,t){return i.a.createElement("div",{className:la("controlBox")(),key:t},i.a.createElement(ra,{wide:!0,value:e,onChange:function(e){return s(t,e.target.value)},size:"xs",options:da.map((function(e){return{value:e,text:e}}))}))})))))};function ma(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return ha(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ha(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ha(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ga=u()(Xo.a),va=Object(Pt.a)({plusRoomBtn:{id:"guests.plusRoomBtn",defaultMessage:"Номер"},bookMoreBtn:{id:"guests.bookMoreBtn",defaultMessage:"Забронировать больше номеров"},doneBtn:{id:"guests.doneBtn",defaultMessage:"Готово"}}),ba=function(e){e.top,e.right;var t=e.rooms,n=e.dispatch,r=e.closeForm,o=e.scrollRef,s=e.isB2B,u=!e.isMultiroom||t.length>=6,c=ma(Object(a.useState)(!1),2),l=c[0],f=c[1],d=Object(m.a)(),p=Object(a.useCallback)((function(){n({type:"ADD_ROOM"}),f(!0)}),[]);return Object(a.useLayoutEffect)((function(){l&&o.current&&(o.current.scrollTop=o.current.scrollHeight,f(!1))}),[l]),i.a.createElement("div",{className:ga("wrapper")()},i.a.createElement("div",{className:ga("rooms")()},t.map((function(e,t){return i.a.createElement(pa,{room:e,index:t,removeRoom:function(){return n({type:"REMOVE_ROOM",roomIndex:t})},setAdultsCount:function(e){return n(function(e,t){return{type:"SET_ADULTS",roomIndex:e,count:t}}(t,e))},setKidsCount:function(e){return n(function(e,t){return{type:"SET_KIDS",roomIndex:e,count:t}}(t,e))},setKidAge:function(e,r){return n(function(e,t,n){return{type:"SET_KID_AGE",roomIndex:e,kidIndex:t,age:n}}(t,e,r))},key:t})}))),i.a.createElement("div",{className:ga("bottomGradient")()}),i.a.createElement("div",{className:ga("footer")()},i.a.createElement("div",{className:ga("separator")()}),i.a.createElement("div",{className:ga("buttons")()},u?i.a.createElement("div",{className:ga("bookMoreBtn")(),onClick:function(){var e="".concat(O.b.B2B,s?"/my/groupbook/":"/feedback/?ref=many-peoples");window.open(e)}},d.formatMessage(va.bookMoreBtn)):i.a.createElement("div",{className:ga("addRoomBtn")(),onClick:p},i.a.createElement(Yo,{className:ga("addRoomBtnIcon")(),width:"18",height:"18"}),d.formatMessage(va.plusRoomBtn)),i.a.createElement(Wo.d,{className:ga("button")(),size:"m",wide:!0,onClick:r},d.formatMessage(va.doneBtn)))))},ya=Object(Pt.a)({roomsCount:{id:"guests.roomsCount",defaultMessage:"\n      {roomsCount} {roomsCount, plural,\n        one {номер}\n        few {номера}\n        other {номеров}\n      } для\n    "},guestsCount:{id:"guests.guestsCount",defaultMessage:"\n      {guestsCount} {guestsCount, plural,\n        one {гостя}\n        other {гостей}\n      }\n    "}}),wa=n(255),_a=n.n(wa),Oa=u()(_a.a),Ea=function(e){var t=e.needShowForm,n=e.closeForm,r=e.roomsCount,o=e.guestsCount,s=e.rooms,u=e.dispatch,c=e.isB2B,l=e.isMultiroom,f=Object(a.useRef)(null),d=Object(m.a)();return i.a.createElement(ar,{className:Oa("popup")(),ref:f},i.a.createElement("div",{className:Oa("controls")()},i.a.createElement("div",{className:Oa("backButton")(),onClick:n},i.a.createElement(Yt,{className:Oa("arrowLeft")()})),i.a.createElement(ir.b,{pseudo:!0,focused:t,size:"m",wide:!0,label:d.formatMessage(ya.roomsCount,{roomsCount:r}),value:d.formatMessage(ya.guestsCount,{guestsCount:o})})),i.a.createElement(ba,{rooms:s,dispatch:u,closeForm:n,scrollRef:f,isB2B:c,isMultiroom:l}))},Sa=n(256),xa=n.n(Sa);function ja(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return ka(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ka(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ka(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Ta,Ca=u()(xa.a),Aa=function(e){var t=e.value,n=e.onChange,r=e.inPopup,o=e.isDemo,s=e.searchFormRef,u=e.rootElement,c=e.isB2B,l=e.isMultiroom,f=Object(a.useRef)(null),d=ja(Object(a.useState)(!1),2),p=d[0],h=d[1],g=ja(Object(a.useReducer)(Go,t),2),v=g[0],b=g[1];Object(a.useEffect)((function(){n(v)}),[v]);var y=v.length,w=v.reduce((function(e,t){return e+t.adults+t.kids.length}),0),_=ja(zt(u),2),O=_[0],E=_[1],S=p?i.a.createElement(Yt,{className:Ca("arrowTop")(),width:"20",height:"20"}):i.a.createElement(Yt,{className:Ca("arrowDown")(),width:"20",height:"20"}),x=Object(m.a)(),j=Object(a.useCallback)(k,[]);return i.a.createElement(Kt,{ref:O,onClickOutside:j},i.a.createElement(ir.b,{className:Ca("input")(),onClick:function(){p?k():function(){Gt()&&document.body.classList.add("overlaypopup-noscroll");Wt()||o?r&&u&&u.scrollTo({top:120,left:0,behavior:"smooth"}):s.current.scrollIntoView({behavior:"smooth"});h(!0)}()},pseudo:!0,focused:p,size:"m",wide:!0,label:x.formatMessage(ya.roomsCount,{roomsCount:y}),value:x.formatMessage(ya.guestsCount,{guestsCount:w}),icon:S}),p&&!Gt()&&i.a.createElement(ar,{className:Ca("popup")(),top:E.absoluteBottom+1,left:E.absoluteRight-360,width:360,rootElement:u,ref:f},i.a.createElement(ba,{top:E.absoluteBottom+1,right:E.absoluteRight,rooms:v,dispatch:b,closeForm:j,scrollRef:f,isB2B:c,isMultiroom:l})),p&&Gt()&&i.a.createElement(Ea,{needShowForm:p,closeForm:j,roomsCount:y,guestsCount:w,rooms:v,dispatch:b,isB2B:c,isMultiroom:l}));function k(){Gt()&&document.body.classList.remove("overlaypopup-noscroll"),h(!1)}},Na=n(257),Pa=n(209),Ra=n.n(Pa),Da=n(258),Ia=n.n(Da),Ma=u()(Ia.a),La=function(e){var t=e.id,n=e.name,r=e.val,o=e.text,a=e.tooltip,s=e.checked,u=e.onChange,c=e.onFocus,l=e.onBlur,f=e.className,d=e.disabled,p=i.a.createElement(i.a.Fragment,null,i.a.createElement("input",{className:Ma("control")(),type:"checkbox",id:t,name:n,value:r,checked:s,onChange:u,onFocus:c,onBlur:l,disabled:d}),i.a.createElement("div",{className:Ma("fakeCheckbox")({checked:s}),"data-popunder":"ignore"}),i.a.createElement("span",{className:Ma("text")()},o)),m=a?i.a.createElement(Ra.a,{content:a},p):p;return i.a.createElement("label",{className:Ma("label")(void 0,f)},m)},Ba=n(259),Fa=n.n(Ba),Ua=u()(Fa.a),za=function(e){var t=e.id,n=e.name,r=e.val,o=e.text,a=e.tooltip,s=e.checked,u=e.onChange,c=e.onFocus,l=e.onBlur,f=e.wide,d=e.className,p=e.disabled,m=i.a.createElement(i.a.Fragment,null,i.a.createElement("input",{className:Ua("control")(),type:"checkbox",id:t,name:n,value:r,checked:s,onChange:u,onFocus:c,onBlur:l,disabled:p}),i.a.createElement("div",{className:Ua("button")({checked:s,wide:f}),"data-popunder":"ignore"},o)),h=a&&!Object(Zt.a)()?i.a.createElement(Ra.a,{content:a,styles:{width:"100%"}},m):m;return i.a.createElement("label",{className:Ua("label")({wide:f},d)},h)};!function(e){e.BUTTON="button"}(Ta||(Ta={}));var Ha=function(e){var t=e.id,n=e.name,r=e.val,o=e.text,a=e.tooltip,s=e.checked,u=e.onChange,c=e.onFocus,l=e.onBlur,f=e.view,d=e.wide,p=e.className,m=e.disabled,h=f===Ta.BUTTON?za:La;return i.a.createElement(h,{id:t,name:n,val:r,checked:s,onChange:u,onFocus:c,onBlur:l,text:o,tooltip:a,wide:d,className:p,disabled:m})},Ga=n(61),Wa=n(260),qa=n.n(Wa);function Va(){return(Va=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Ya(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var $a,Xa=u()(qa.a),Ka=function(e){var t=e.checked,n=e.children,r=e.className,o=e.disabled,a=e.error,s=e.id,u=e.name,c=e.note,l=e.onBlur,f=e.onChange,d=e.onClick,p=e.onMouseEnter,m=e.style,h=e.text,g=e.tooltipContent,v=e.tooltipPosition,b=void 0===v?Ga.a.TOP:v,y=e.value,w=Ya(e,["checked","children","className","disabled","error","id","name","note","onBlur","onChange","onClick","onMouseEnter","style","text","tooltipContent","tooltipPosition","value"]);return i.a.createElement("label",{className:Xa("label")(void 0,r),htmlFor:s,style:m,onClick:d,onMouseEnter:p},i.a.createElement("div",{className:Xa("container")({disabled:o,error:!!a})},i.a.createElement("input",Va({type:"radio",id:s,value:y,name:u,className:Xa("input")({error:!!a}),checked:t,disabled:o,onChange:f,onBlur:l},w)),i.a.createElement("span",{className:Xa("icon")()}),!n&&h&&i.a.createElement("span",{className:Xa("text")()},h),!h&&n&&i.a.createElement("span",{className:Xa("text")()},n),!!g&&i.a.createElement(Ga.b,{className:Xa("hint")(),tooltipContent:g,position:b})),!!c&&i.a.createElement("p",{className:Xa("note")()},c))},Qa=n(62);!function(e){e.BUTTON="button"}($a||($a={}));var Za=function(e){var t=e.id,n=e.value,r=e.text,o=e.note,a=e.name,s=e.checked,u=e.tooltipContent,c=e.onChange,l=e.onBlur,f=e.onClick,d=e.onMouseEnter,p=e.view,m=e.wide,h=e.className,g=e.disabled,v="button"===p?Qa.a:Ka;return i.a.createElement(v,{id:t,value:n,checked:s,tooltipContent:u,onChange:c,onBlur:l,onClick:f,onMouseEnter:d,text:r,note:o,name:a,wide:m,className:h,disabled:g})},Ja=n(261),ei=n.n(Ja),ti=u()(ei.a),ni=function(e){var t=e.val,n=e.options,r=e.onChange,o=e.onBlur,a=e.view,s=e.column,u=e.wide,c=e.wrapped,l=e.className,f=e.disabled;return i.a.createElement("div",{className:ti("group")({wide:u,column:s,wrapped:c},l)},n.map((function(e){return i.a.createElement(Za,{className:ti("radio")({view:a},e.className),id:e.id,value:e.val,text:e.text,note:e.note,name:e.name,checked:t===e.val,tooltipContent:e.tooltipContent,onChange:function(e){return r(e.target.value)},onBlur:o,onClick:e.onClick,onMouseEnter:e.onMouseEnter,view:a,wide:u,key:e.val,disabled:f})})))},ri=n(262),oi=n.n(ri);function ai(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return ii(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ii(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ii(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var si=u()(oi.a),ui=Object(Pt.a)({tourism:{id:"searchForm.b2cExtra.tourism",defaultMessage:"Отдых"},business:{id:"searchForm.b2cExtra.business",defaultMessage:"Работа"},comparePrices:{id:"searchForm.b2cExtra.comparePrices",defaultMessage:"Показать цены на других сайтах в новом окне?"}}),ci=function(e){var t=e.inPopup,n=e.shouldShowCompareto,r=e.onComparetoChange,o=e.comparetoValue,s=ai(Object(a.useState)(null),2),u=s[0],c=s[1],l=ai(Object(a.useState)(o),2),f=l[0],d=l[1],p=Object(m.a)();return i.a.createElement("div",{className:si("line")()},i.a.createElement("div",{className:si("tripType")({inPopup:t})},i.a.createElement(ni,{val:u,options:[{val:"tourism",text:p.formatMessage(ui.tourism)},{val:"business",text:p.formatMessage(ui.business)}],onChange:function(e){Na.a.event("searchform","click","trip_type",{type:e}),c(e)}})),n&&i.a.createElement("div",{className:si("compareto")()},i.a.createElement(Ha,{text:p.formatMessage(ui.comparePrices),checked:f,onChange:function(e){d(e.target.checked),r(e)}})))},li=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2?arguments[2]:void 0,r=function(e){var n=e.name.toLowerCase(),r=t.toLowerCase();return-1!==n.indexOf(r)},o=Object(a.useMemo)((function(){return e.filter(r)}),[e,t]);return n?e:o},fi=n(263),di=n.n(fi),pi=u()(di.a),mi=function(e){var t=e.country,n=e.isActive,r=e.onClick,o=e.onMouseEnter;return i.a.createElement("div",{className:pi("item")({active:n}),onClick:r,onMouseEnter:o},i.a.createElement("div",{className:pi("country")()},t.name))},hi=Object(a.memo)(mi,gi);function gi(e,t){return e.isActive===t.isActive&&e.country===t.country}var vi=function(e){var t=e.suggestList,n=e.setValue,r=e.activeItem,o=void 0===r?0:r,a=e.setActiveItem;return i.a.createElement(i.a.Fragment,null,t.map((function(e){return e.isSeparator?i.a.createElement("div",{className:pi("separator")(),key:"separator"}):i.a.createElement(hi,{country:e,key:e.index,onClick:function(){return n(e.code)},isActive:e.index===o,onMouseEnter:function(){return a(e.index)}})})))},bi=Object(Pt.a)({label:{id:"citizenship.label",defaultMessage:"Гражданство гостей"},placeholder:{id:"citizenship.placeholder",defaultMessage:"Выберите гражданство"},labelRequired:{id:"citizenship.labelRequired",defaultMessage:"Гражданство гостей (обязательно для этого направления)"}}),yi=n(264),wi=n.n(yi),_i=u()(wi.a),Oi=function(e){var t=e.closeSuggest,n=e.onInputChange,r=e.query,o=e.suggestList,s=e.setValueFromSuggest,u=e.activeSuggestItem,c=e.setActiveSuggestItem,l=Object(a.useRef)(null),f=Object(m.a)(),d=Object(a.useRef)(!1);return Object(a.useLayoutEffect)((function(){l.current.focus()}),[]),i.a.createElement(ar,{className:_i("wrapper")(),onMouseDown:p,onTouchStart:p},i.a.createElement("div",{className:_i("controls")()},i.a.createElement("div",{className:_i("backButton")(),onClick:t},i.a.createElement(Yt,{className:_i("arrowLeft")()})),i.a.createElement(ir.b,{inputRef:l,onChange:n,onBlur:function(){d.current?d.current=!1:t()},onFocus:function(){d.current=!1},value:r,size:"m",wide:!0,label:f.formatMessage(bi.label),placeholder:f.formatMessage(bi.placeholder)})),i.a.createElement("div",{className:_i("suggest")()},i.a.createElement(vi,{suggestList:o,setValue:s,activeItem:u,setActiveItem:c})));function p(){d.current=!0}},Ei=n(265),Si=n.n(Ei);function xi(e){return function(e){if(Array.isArray(e))return Ni(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||Ai(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ji(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ki(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ji(Object(n),!0).forEach((function(t){Ti(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ji(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ti(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ci(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||Ai(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ai(e,t){if(e){if("string"==typeof e)return Ni(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ni(e,t):void 0}}function Ni(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Pi=u()(Si.a),Ri=ve((function(e){var t=e.countries,n=e.citizenship;return{countries:t.list,popularCountries:n.popular}}),(function(e){return{loadSuggest:function(){return e(wt.load())},setCitizenship:function(t){return e(St.setCitizenship(t))}}}))((function(e){var t=e.countries,n=e.popularCountries,r=e.loadSuggest,o=e.setCitizenship,s=e.value,u=e.onChange,c=e.isCitizenshipRequired,l=e.isNatdisCritical,f=e.needShowErrors,d=e.searchFormRef,p=e.rootElement,h=c||l,g=!s&&h&&f,v=Ci(zt(p),2),b=v[0],y=v[1],w=Object(a.useRef)(null),_=Ci(Object(a.useState)(!1),2),O=_[0],E=_[1],S=Ci(Object(a.useState)(X(s)),2),x=S[0],j=S[1],k=Ci(Object(a.useState)(s),2),T=k[0],C=k[1],A=Ci(Object(a.useState)(0),2),N=A[0],P=A[1],R=Ci(Object(a.useState)(!0),2),D=R[0],I=R[1],M=li(t,x,D),L=li(n,x,D),B=function(e){return function(t,n){return ki(ki({},t),{},{index:n+e})}},F=Object(a.useMemo)((function(){return[].concat(xi(L.map(B(0))),[L.length>0&&{isSeparator:!0}],xi(M.map(B(L.length)))).filter((function(e){return e}))}),[M,L]),U=M.length+L.length;r(),Object(a.useEffect)((function(){return j(X(s))}),[t]);var z=Object(m.a)(),H=Object(a.useCallback)(V,[F,O]),G=Pi(O?"arrowTop":"arrowDown")(),W=T?null:i.a.createElement(Yt,{className:G,width:"20",height:"20"});return i.a.createElement(Kt,{ref:b,onClickOutside:H},i.a.createElement("div",{className:Pi("wrapper")()},i.a.createElement(ir.b,{inputRef:w,onFocus:function(e){Gt()&&document.body.classList.add("overlaypopup-noscroll");Wt()||d.current.scrollIntoView({behavior:"smooth"});E(!0)},onChange:q,onKeyDown:function(e){switch(e.keyCode){case 9:return void V();case 13:return function(){var e=F.find((function(e){return e.index===N}));if(!e)return;Y(e.code)}();case 38:return void P((N+U-1)%U);case 40:return void P((N+U+1)%U)}},value:x,size:"m",wide:!0,label:h?z.formatMessage(bi.labelRequired):z.formatMessage(bi.label),placeholder:z.formatMessage(bi.placeholder),icon:W,reserveIconPlace:!0,hasError:g}),T&&i.a.createElement("div",{className:Pi("clearIcon")(),onClick:function(){return Y(null)}},i.a.createElement(Jo.a,{width:"20",height:"20"})),O&&!Gt()&&i.a.createElement(ar,{className:Pi("popup")(),top:y.absoluteBottom+1,left:y.absoluteLeft,width:y.width,rootElement:p},i.a.createElement(vi,{suggestList:F,setValue:Y,activeItem:N,setActiveItem:P})),O&&Gt()&&i.a.createElement(Oi,{closeSuggest:H,onInputChange:q,query:x,suggestList:F,setValueFromSuggest:Y,activeSuggestItem:N,setActiveSuggestItem:P})));function q(e){I(!1),j(e.target.value)}function V(){O&&(I(!0),T?Y(T):E(!1))}function Y(e){Gt()&&document.body.classList.remove("overlaypopup-noscroll"),C(e),u(e),w.current&&w.current.blur(),j(X(e)),o($(e)),E(!1)}function $(e){for(var n=0;n<t.length;n+=1)if(t[n].code===e)return t[n];return null}function X(e){var t=$(e);return t?t.name:""}}));var Di=n(266),Ii=n.n(Di),Mi=u()(Ii.a),Li=function(e){var t=e.val,n=e.options,r=e.onChange,o=e.view,a=e.wide,s=e.wrap;return i.a.createElement("div",{className:Mi("group")({wide:a,wrap:s})},n.map((function(e){return i.a.createElement(Ha,{className:Mi("control")({view:o}),val:e.val,text:e.text,tooltip:e.tooltip,checked:-1!==t.indexOf(e.val),onChange:u,view:o,key:e.val,wide:a})})));function u(e){var o=e.target.checked,a=n.filter((function(n){return n.val===e.target.value?o:-1!==t.indexOf(n.val)})).map((function(e){return e.val}));r(a)}},Bi=n(267),Fi=n.n(Bi);function Ui(e){return function(e){if(Array.isArray(e))return zi(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return zi(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return zi(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function zi(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Hi=u()(Fi.a),Gi=Object(Pt.a)({earlyCheckin:{id:"ECLC.earlyCheckin",defaultMessage:"Ранний заезд"},lateCheckout:{id:"ECLC.lateCheckout",defaultMessage:"Поздний выезд"},selectTime:{id:"ECLC.selectTime",defaultMessage:"Выберите время"}}),Wi=function(e){var t=e.earlyCheckin,n=e.setEarlyCheckin,r=e.lateCheckout,o=e.setLateCheckout,a=e.eclcTimesList;if(!a)return null;var s=a.early_checkin,u=a.late_checkout,c=Object(m.a)();return i.a.createElement(i.a.Fragment,null,i.a.createElement("div",{className:Hi("control")()},i.a.createElement(ra,{label:c.formatMessage(Gi.earlyCheckin),placeholder:c.formatMessage(Gi.selectTime),cancellable:!0,value:t,onChange:function(e){return n(e.target.value)},size:"m",wide:!0,options:[{value:"",text:c.formatMessage(Gi.selectTime),disabled:!0}].concat(Ui(s.map((function(e){return{value:e.substring(0,2),text:e}}))))})),i.a.createElement("div",{className:Hi("control")()},i.a.createElement(ra,{label:c.formatMessage(Gi.lateCheckout),placeholder:c.formatMessage(Gi.selectTime),cancellable:!0,value:r,onChange:function(e){return o(e.target.value)},size:"m",wide:!0,options:[{value:"",text:c.formatMessage(Gi.selectTime),disabled:!0}].concat(Ui(u.map((function(e){return{value:e.substring(0,2),text:e}}))))})))},qi=n(268),Vi=n.n(qi),Yi=u()(Vi.a),$i=Object(Pt.a)({roomOnly:{id:"B2BExtra.meals.roomOnly",defaultMessage:"Без питания"},breakfast:{id:"B2BExtra.meals.breakfast",defaultMessage:"Завтрак"},halfBoard:{id:"B2BExtra.meals.halfBoard",defaultMessage:"Полупансион (завтрак и ужин)"},fullBoard:{id:"B2BExtra.meals.fullBoard",defaultMessage:"Полный пансион (завтрак, обед и ужин с безалкогольными напитками)"},allInclusive:{id:"B2BExtra.meals.allInclusive",defaultMessage:"Всё включено"},freeCancellation:{id:"B2BExtra.freeCancellation",defaultMessage:"Бесплатная отмена"}}),Xi=function(e){var t=e.citizenship,n=e.setCitizenship,r=e.freeCancellation,o=e.setFreeCancellation,a=e.earlyCheckin,s=e.setEarlyCheckin,u=e.lateCheckout,c=e.setLateCheckout,l=e.meals,f=e.setMeals,d=e.isCitizenshipRequired,p=e.isNatdisCritical,h=e.isEclcSearchEnabled,g=e.inPopup,v=e.eclcTimesList,b=e.needShowErrors,y=e.searchFormRef,w=e.rootElement,_=Object(m.a)();return i.a.createElement("div",{className:Yi("line")()},i.a.createElement("div",{className:Yi("citizenship")({inPopup:g})},i.a.createElement(Ri,{value:t,onChange:n,searchFormRef:y,rootElement:w,isCitizenshipRequired:d,isNatdisCritical:p,needShowErrors:b})),i.a.createElement("div",{className:Yi("meals")({inPopup:g})},i.a.createElement(Li,{view:"button",val:l,options:[{val:"nomeal",text:"RO",tooltip:_.formatMessage($i.roomOnly)},{val:"breakfast",text:"BB",tooltip:_.formatMessage($i.breakfast)},{val:"halfBoard",text:"HB",tooltip:_.formatMessage($i.halfBoard)},{val:"fullBoard",text:"FB",tooltip:_.formatMessage($i.fullBoard)},{val:"allInclusive",text:"AI",tooltip:_.formatMessage($i.allInclusive)}],onChange:f,wide:!0})),h&&i.a.createElement("div",{className:Yi("eclc")({inPopup:g})},i.a.createElement(Wi,{earlyCheckin:a,setEarlyCheckin:s,lateCheckout:u,setLateCheckout:c,eclcTimesList:v})),i.a.createElement("div",{className:Yi("freeCancellation")({inPopup:g})},i.a.createElement(Ha,{text:_.formatMessage($i.freeCancellation),checked:r,onChange:function(e){o(e.target.checked)}})))},Ki=n(269),Qi=n.n(Ki),Zi=u()(Qi.a),Ji=Object(Pt.a)({extraParams:{id:"searchForm.extraParams",defaultMessage:"Дополнительные параметры"}}),es=function(e){var t=e.showExtraParams,n=e.setShowExtraParams,r=e.inPopup,o=Object(m.a)();return i.a.createElement("div",{className:Zi("wrapper")({inPopup:r}),onClick:function(){return n(!t)}},i.a.createElement(Yt,{className:Zi("arrow")({reverse:t})}),o.formatMessage(Ji.extraParams))},ts=n(270),ns=n.n(ts);function rs(){return(rs=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function os(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return as(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return as(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function as(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var is=u()(ns.a),ss=Object(Pt.a)({search:{id:"searchForm.search",defaultMessage:"Найти"},demoSearch:{id:"searchForm.demoSearch",defaultMessage:"Найти на RateHawk"},checkin:{id:"searchForm.checkin",defaultMessage:"Заезд"},checkout:{id:"searchForm.checkout",defaultMessage:"Выезд"}});var us,cs=ve((function(e,t){var n=e.citizenship;return{citizenshipValue:t.citizenshipValue||n.value&&n.value.code}}),(function(e){return{loadCitizenships:function(){e(wt.load())}}}))((function(e){var t=e.className,n=e.onChange,r=e.onSubmit,o=e.onComparetoChange,s=e.shouldShowCompareto,u=e.comparetoValue,c=e.regionValue,d=e.roomsValue,p=e.fromValue,h=e.toValue,g=e.citizenshipValue,v=e.loadCitizenships,b=e.earlyCheckinValue,y=void 0===b?null:b,w=e.lateCheckoutValue,_=void 0===w?null:w,O=e.freeCancellationValue,E=void 0!==O&&O,S=e.mealsValue,x=void 0===S?[]:S,j=e.inPopup,k=e.isDemo,T=e.hideDestination,C=e.isB2B,A=e.isCitizenshipRequired,N=e.isEclcSearchEnabled,P=e.rootElement,R=e.isNarrow,D=e.isMultiroom,I=e.eclcTimesList,M=e.isExtension,L=Object(a.useRef)(null),B=os(Object(a.useState)(!1),2),F=B[0],U=B[1],z=os(Object(a.useState)(Object(l.a)(new Date)),1)[0],H=os(Object(a.useState)(Object(f.a)(function(e,t){Object($e.a)(2,arguments);var n=Object(Ye.a)(t);return Dt(e,12*n)}(z,1),-1)),1)[0],G=os(Object(a.useState)(p),2),W=G[0],q=G[1],V=os(Object(a.useState)(h),2),Y=V[0],$=V[1],X=os(Object(a.useState)(c),2),K=X[0],Q=X[1],Z=os(Object(a.useState)(d||[{adults:2,kids:[]}]),2),J=Z[0],ee=Z[1],te=os(Object(a.useState)(g),2),ne=te[0],re=te[1],oe=os(Object(a.useState)(E),2),ae=oe[0],ie=oe[1],se=os(Object(a.useState)(y),2),ue=se[0],ce=se[1],le=os(Object(a.useState)(_),2),fe=le[0],de=le[1],pe=os(Object(a.useState)(x||[]),2),me=pe[0],he=pe[1],ge=os(Object(a.useState)(null),2),ve=ge[0],be=ge[1],ye=os(Object(a.useState)(!!ne),2),we=ye[0],_e=ye[1];Object(a.useEffect)((function(){return n(Se())}),[W,Y,K,J,ne,ae,ue,fe,me]),Object(a.useEffect)((function(){C&&v()}),[]);var Oe=Object(a.useCallback)((function(e){var t=e.rangeStart,n=e.rangeEnd;q(t),$(n)}),[W,Y]),Ee=Object(m.a)();return i.a.createElement("div",{className:is("wrapper")({inPopup:j,isB2B:C},t),ref:L},i.a.createElement("div",{className:is("destination")({inPopup:j,hidden:T,narrow:R})},i.a.createElement(Do,{value:K,onChange:Q,inPopup:j,isDemo:k,setInputRef:be,rootElement:P,searchFormRef:L})),i.a.createElement("div",{className:is("dates")({inPopup:j})},i.a.createElement(wr,rs({from:z,to:H,maxRange:30,rangeStart:W,rangeEnd:Y,onRangeChange:Oe,rootElement:P,inPopup:j},{isRangeSelect:!0,labelFrom:Ee.formatMessage(ss.checkin),labelTo:Ee.formatMessage(ss.checkout),isDemo:k,searchFormRef:L}))),i.a.createElement("div",{className:is("guests")({inPopup:j,isDemo:k})},i.a.createElement(Aa,{value:J,onChange:ee,inPopup:j,isDemo:k,rootElement:P,searchFormRef:L,isB2B:C,isMultiroom:D})),i.a.createElement("div",{className:is("submit")({inPopup:j,isB2B:C})},i.a.createElement(Wo.d,{onClick:function(){if(U(!1),!K)return void ve.current.focus();if(function(){if(!C)return!1;var e=K&&K.isNatdisCritical;return!ne&&(A||e)}())return _e(!0),void U(!0);r&&r(Se())},size:"m",wide:!0},k?Ee.formatMessage(ss.demoSearch):Ee.formatMessage(ss.search))),!C&&i.a.createElement(ci,{inPopup:j,shouldShowCompareto:s,onComparetoChange:o,comparetoValue:u}),!M&&C&&!k&&i.a.createElement("div",{className:is("extraParamsSwitcher")()},i.a.createElement(es,{showExtraParams:we,setShowExtraParams:_e,inPopup:j})),(M||C&&we&&!k)&&i.a.createElement(Xi,{inPopup:j,isCitizenshipRequired:A,isNatdisCritical:K&&K.isNatdisCritical,isEclcSearchEnabled:N,citizenship:ne,setCitizenship:re,freeCancellation:ae,setFreeCancellation:ie,earlyCheckin:ue,setEarlyCheckin:ce,lateCheckout:fe,setLateCheckout:de,meals:me,setMeals:he,eclcTimesList:I,needShowErrors:F,rootElement:P,searchFormRef:L}));function Se(){return{guests:J,region:K,freeCancellation:ae,earlyCheckin:ue,lateCheckout:fe,meals:me,citizenship:ne,from:W,to:Y}}})),ls=function(e){return i.a.createElement(Nt,null,i.a.createElement(cs,e))},fs=n(179),ds=n(114),ps=n(56),ms=n(271),hs=n.n(ms),gs=(n(205),n(46)),vs=n(89),bs=n(45),ys=n(13),ws=n(183),_s=n(71),Os=n(118),Es=n(119),Ss=n(184);function xs(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function js(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?xs(Object(n),!0).forEach((function(t){ks(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):xs(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ks(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Ts=(ks(us={},w.a.EN,{lang:w.a.EN,messages:js(js(js(js(js({"B2BExtra.freeCancellation":"Free cancellation","B2BExtra.meals.allInclusive":"All Inclusive","B2BExtra.meals.breakfast":"Breakfast","B2BExtra.meals.fullBoard":"Full Board (breakfast, lunch, and dinner with soft drinks)","B2BExtra.meals.halfBoard":"Half Board (breakfast and dinner)","B2BExtra.meals.roomOnly":"Room only","citizenship.label":"Guests' citizenship","citizenship.labelRequired":"Guests' citizenship (required for this direction)","citizenship.placeholder":"Choose your citizenship","datepicker.checkin":"Check-in","datepicker.checkout":"Check-out","destination.label":"Destination","destination.placeholder":"City, hotel or airport","Destination.Suggest.hotels":"Hotels","Destination.Suggest.regions":"Regions","guests.guestsCount":"\n        {guestsCount} {guestsCount,\n         plural,\n         one {guest}\n         other {guests}\n       }","guests.adultsLabel":"Adults","guests.bookMoreBtn":"Book more rooms","guests.doneBtn":"Done","guests.kidAge":"Child's age","guests.kidsLabel":"Children","guests.plusRoomBtn":"Room","guests.remove":"Remove","guests.roomNumber":"\n        {roomNumber, selectordinal,\n          one {#st}\n          two {#nd}\n          few {#rd}\n          other {#th}\n        } room","guests.roomsCount":"\n        {roomsCount} {roomsCount, plural,\n         one {room}\n         few {rooms}\n         other {rooms}\n       } for","searchForm.checkin":"Check-in","searchForm.checkout":"Check-out","searchForm.demoSearch":"Search on RateHawk","searchForm.search":"Search","offer.titleFailure":"Alas, we cannot offer you a lower price for this hotel","offer.descriptionFailure":"But you can take a look at other hotels in this district on RateHawk!"},ws.a[w.a.EN].messages),_s.a[w.a.EN].messages),Es.a[w.a.EN].messages),Ss.a[w.a.EN].messages),Os.a[w.a.EN].messages)}),ks(us,w.a.RU,{lang:w.a.RU,messages:js(js(js(js(js({"B2BExtra.freeCancellation":"Бесплатная отмена","B2BExtra.meals.allInclusive":"Всё включено","B2BExtra.meals.breakfast":"Завтрак","B2BExtra.meals.fullBoard":"Полный пансион (завтрак, обед и ужин с безалкогольными напитками)","B2BExtra.meals.halfBoard":"Полупансион (завтрак и ужин)","B2BExtra.meals.roomOnly":"Без питания","citizenship.label":"Гражданство гостей","citizenship.labelRequired":"Гражданство гостей (обязательно для этого направления)","citizenship.placeholder":"Выберите гражданство","datepicker.checkin":"Заезд","datepicker.checkout":"Выезд","destination.label":"Направление","destination.placeholder":"Город, отель или аэропорт","Destination.Suggest.hotels":"Отели","Destination.Suggest.regions":"Регионы","guests.guestsCount":"\n        {guestsCount} {guestsCount, plural,\n          one {гостя}\n          other {гостей}\n        }","guests.adultsLabel":"Взрослые","guests.bookMoreBtn":"Забронировать больше номеров","guests.doneBtn":"Готово","guests.kidAge":"Возраст ребёнка","guests.kidsLabel":"Дети","guests.plusRoomBtn":"Номер","guests.remove":"Удалить","guests.roomNumber":"{roomNumber} номер","guests.roomsCount":"\n        {roomsCount} {roomsCount, plural,\n          one {номер}\n          few {номера}\n          other {номеров}\n        } для","searchForm.checkin":"Заезд","searchForm.checkout":"Выезд","searchForm.demoSearch":"Найти на RateHawk","searchForm.search":"Найти","offer.titleFailure":"Увы, на этот отель мы не можем предложить цены ниже","offer.descriptionFailure":"Но вы можете посмотреть на RateHawk другие отели в этом регионе!"},ws.a[w.a.RU].messages),_s.a[w.a.RU].messages),Es.a[w.a.RU].messages),Ss.a[w.a.RU].messages),Os.a[w.a.RU].messages)}),us);function Cs(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return As(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return As(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function As(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ns(e,t,n,r,o,a,i){try{var s=e[a](i),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function Ps(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Ns(a,r,o,i,s,"next",e)}function s(e){Ns(a,r,o,i,s,"throw",e)}i(void 0)}))}}document.addEventListener("DOMContentLoaded",(function(){Object(vs.a)()}));var Rs=u()(hs.a),Ds="firefox"===v.a.FIREFOX;Ps(o.a.mark((function e(){var t,n,r,s,u,d,v,A;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(je.a)(_.a.LANGUAGE);case 2:if(e.t0=e.sent,e.t0){e.next=5;break}e.t0=w.a.EN;case 5:return t=e.t0,e.next=8,Object(je.a)(_.a.PARTNERS_AUTH_KEY);case 8:return n=e.sent,e.next=11,Object(je.a)(_.a.USER_ID);case 11:return r=e.sent,e.next=14,Object(je.a)(_.a.NO_RATE_DATA);case 14:if(e.t1=e.sent,e.t1){e.next=17;break}e.t1={};case 17:return s=e.t1,e.next=20,Object(bs.a)();case 20:(u=e.sent).id&&(d=s[u.id]),v=function(){var e=Object(m.a)();return i.a.createElement("div",{className:Rs("header")()},i.a.createElement(ps.a,{className:Rs("title")(),size:"m"},e.formatMessage({id:"offer.titleFailure"})),i.a.createElement("p",{className:Rs("text")()},e.formatMessage({id:"offer.descriptionFailure"})))},A=function(){var e,s,u,p,m,A,N,P=Cs(Object(a.useState)(t),2),R=P[0],I=P[1],M=Cs(Object(a.useState)(Boolean(n)),2),L=M[0],B=M[1],F=Cs(Object(a.useState)(!1),2),U=F[0],z=F[1],H=Object(E.a)(!0),G=H.inject,W=H.sendEvent;Object(a.useEffect)((function(){At.dispatch(D.setLocale(R))}),[R]),Object(a.useEffect)((function(){Ps(o.a.mark((function e(){var t,n,a,i,s;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,G("searchform");case 2:return e.next=4,Object(bs.a)();case 4:return t=e.sent,e.next=7,Object(je.a)(_.a.UID);case 7:if(n=e.sent,!d){e.next=19;break}if(s={competitor_price:d.priceOld,extension_brand:y.b,extension_version:Object(ys.f)(),ostrovok_bar_price:null===(a=d.commissionInfo)||void 0===a?void 0:a.show.amount_gross_markup,ostrovok_cur:d.currency,ostrovok_net_price:null===(i=d.commissionInfo)||void 0===i?void 0:i.show.amount_net,otahotel_id:d.hotelId,uid:n,url:t.url,user_id:r,version:y.f},!L){e.next=15;break}return e.next=13,W("show","no_offers",s);case 13:e.next=17;break;case 15:return e.next=17,W("show","no_offers_auth",s);case 17:e.next=26;break;case 19:if(!L){e.next=24;break}return e.next=22,W("show","searchform",{extension_brand:y.b,extension_version:Object(ys.f)(),uid:n,url:t.url,user_id:r,version:y.f});case 22:e.next=26;break;case 24:return e.next=26,W("show","popup_auth",{extension_brand:y.b,extension_version:Object(ys.f)(),uid:n,url:t.url,user_id:r,version:y.f});case 26:case"end":return e.stop()}}),e)})))()}),[G,L,W]);var q,V=function(){var e=Ps(o.a.mark((function e(t){var n,a,i,s,u,l,f,p,m,h,v,w,E,S,x,j;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(bs.a)();case 2:return n=e.sent,e.next=5,Object(je.a)(_.a.UID);case 5:if(a=e.sent,!d){e.next=11;break}return e.next=9,W("click","".concat("no_offers","_search"),{extension_brand:y.b,extension_version:Object(ys.f)(),uid:a,url:n.url,user_id:r,version:y.f});case 9:e.next=13;break;case 11:return e.next=13,W("click","".concat("searchform","_search"),{extension_brand:y.b,extension_version:Object(ys.f)(),uid:a,url:n.url,user_id:r,version:y.f});case 13:if(i=t.from,s=t.guests,u=t.region,l=u.id,f=u.multicompleteType,p=u.regionId,m=t.to,h=t.citizenship,"region"===f?(v=new URL(O.b.B2B_HOTELS),w=l):"hotel"===f&&(v=new URL("".concat(O.b.B2B_ROOMS).concat(l,"/")),w=p),E=Object(c.a)(i,"dd.MM.yyyy"),S=Object(c.a)(m,"dd.MM.yyyy"),x=s.map((function(e){var t=e.adults,n=e.kids;return null!=n&&n.length?"".concat(t,"and").concat(n.join(".")):t})).join("-"),!v){e.next=31;break}return w&&v.searchParams.set("q",w),v.searchParams.set("dates","".concat(E,"-").concat(S)),v.searchParams.set("guests",x),v.searchParams.set("residency","".concat(R,"-").concat(h)),v.searchParams.set("utm_source","".concat(y.f,"-").concat(Object(ys.a)())),v.searchParams.set("utm_medium","extension"),j=window.location.hostname.replace("www.",""),v.searchParams.set("utm_campaign",j),v.searchParams.set("utm_content","search"),v.searchParams.set("utm_term",r),e.next=31,g.browser.runtime.sendMessage({command:b.a.OPEN_NEW_WINDOW,url:v.toString()});case 31:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();return Ds&&(q=d?C.a.MEDIUM:C.a.SMALL),i.a.createElement(ds.a,null,i.a.createElement(h.a,{locale:R,messages:null!==(e=null===(s=Ts[R])||void 0===s?void 0:s.messages)&&void 0!==e?e:Ts[w.a.EN].messages},i.a.createElement(gs.a.Provider,{value:{language:R,setLanguage:I}},i.a.createElement("div",{className:Rs("popup")()},i.a.createElement(T.a,{className:Rs("logo")(),height:46,size:"m"}),L?i.a.createElement(i.a.Fragment,null,d&&i.a.createElement(v,null),i.a.createElement(ls,{citizenshipValue:null!==(u=null===(p=d)||void 0===p?void 0:p.residency)&&void 0!==u?u:"ru",fromValue:null!==(m=d)&&void 0!==m&&m.checkin?new Date(d.checkin):Object(l.a)(new Date),inPopup:!0,isB2B:!0,isCitizenshipRequired:!0,isExtension:!0,isMultiroom:!0,onChange:console.log,onSubmit:V,roomsValue:null===(A=d)||void 0===A?void 0:A.guests,toValue:null!==(N=d)&&void 0!==N&&N.checkin?new Date(d.checkout):Object(f.a)(Object(l.a)(new Date),1)})):i.a.createElement(S.a,{className:Rs("auth")(),inPopup:!0,isActive:!0,name:"popup_auth",onSkip:function(){return window.close()},onSubmit:function(){return B(!0)}}),i.a.createElement("div",{className:Rs("buttons")()},i.a.createElement(k.a,{onChange:function(e){At.dispatch(D.setLocale(e))}}),L&&i.a.createElement(fs.a,{inPopup:!0,onLogout:function(){return B(!1)},onPriceSettingsClick:function(){return z(!0)}}),i.a.createElement(x.a,{className:Rs("buttonClose")(),onClick:function(){return window.close()}},i.a.createElement(j.a,null))),U&&i.a.createElement(C.b,{size:q,onClose:function(){return z(!1)}})))))},p.a.render(i.a.createElement(A,null),document.querySelector("#root"));case 25:case"end":return e.stop()}}),e)})))()},function(e,t,n){"use strict";n.d(t,"a",(function(){return X}));var r=n(21),o=n(14);function a(e){Object(o.a)(1,arguments);var t=Object(r.a)(e);return!isNaN(t)}var i={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function s(e){return function(t){var n=t||{},r=n.width?String(n.width):e.defaultWidth;return e.formats[r]||e.formats[e.defaultWidth]}}var u={date:s({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:s({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:s({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},c={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function l(e){return function(t,n){var r,o=n||{};if("formatting"===(o.context?String(o.context):"standalone")&&e.formattingValues){var a=e.defaultFormattingWidth||e.defaultWidth,i=o.width?String(o.width):a;r=e.formattingValues[i]||e.formattingValues[a]}else{var s=e.defaultWidth,u=o.width?String(o.width):e.defaultWidth;r=e.values[u]||e.values[s]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function f(e){return function(t,n){var r=String(t),o=n||{},a=o.width,i=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],s=r.match(i);if(!s)return null;var u,c=s[0],l=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth];return u="[object Array]"===Object.prototype.toString.call(l)?function(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}(l,(function(e){return e.test(c)})):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}(l,(function(e){return e.test(c)})),u=e.valueCallback?e.valueCallback(u):u,{value:u=o.valueCallback?o.valueCallback(u):u,rest:r.slice(c.length)}}}var d,p={code:"en-US",formatDistance:function(e,t,n){var r;return n=n||{},r="string"==typeof i[e]?i[e]:1===t?i[e].one:i[e].other.replace("{{count}}",t),n.addSuffix?n.comparison>0?"in "+r:r+" ago":r},formatLong:u,formatRelative:function(e,t,n,r){return c[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:l({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:l({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:l({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:l({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:l({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(d={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e,t){var n=String(e),r=t||{},o=n.match(d.matchPattern);if(!o)return null;var a=o[0],i=n.match(d.parsePattern);if(!i)return null;var s=d.valueCallback?d.valueCallback(i[0]):i[0];return{value:s=r.valueCallback?r.valueCallback(s):s,rest:n.slice(a.length)}}),era:f({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:f({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:f({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:f({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:f({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}},m=n(29),h=n(195);function g(e,t){Object(o.a)(2,arguments);var n=Object(m.a)(t);return Object(h.a)(e,-n)}function v(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}var b={y:function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return v("yy"===t?r%100:r,t.length)},M:function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):v(n+1,2)},d:function(e,t){return v(e.getUTCDate(),t.length)},a:function(e,t){var n=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":case"aaa":return n.toUpperCase();case"aaaaa":return n[0];case"aaaa":default:return"am"===n?"a.m.":"p.m."}},h:function(e,t){return v(e.getUTCHours()%12||12,t.length)},H:function(e,t){return v(e.getUTCHours(),t.length)},m:function(e,t){return v(e.getUTCMinutes(),t.length)},s:function(e,t){return v(e.getUTCSeconds(),t.length)},S:function(e,t){var n=t.length,r=e.getUTCMilliseconds();return v(Math.floor(r*Math.pow(10,n-3)),t.length)}};function y(e){Object(o.a)(1,arguments);var t=1,n=Object(r.a)(e),a=n.getUTCDay(),i=(a<t?7:0)+a-t;return n.setUTCDate(n.getUTCDate()-i),n.setUTCHours(0,0,0,0),n}function w(e){Object(o.a)(1,arguments);var t=Object(r.a)(e),n=t.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(n+1,0,4),a.setUTCHours(0,0,0,0);var i=y(a),s=new Date(0);s.setUTCFullYear(n,0,4),s.setUTCHours(0,0,0,0);var u=y(s);return t.getTime()>=i.getTime()?n+1:t.getTime()>=u.getTime()?n:n-1}function _(e){Object(o.a)(1,arguments);var t=w(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var r=y(n);return r}function O(e,t){Object(o.a)(1,arguments);var n=t||{},a=n.locale,i=a&&a.options&&a.options.weekStartsOn,s=null==i?0:Object(m.a)(i),u=null==n.weekStartsOn?s:Object(m.a)(n.weekStartsOn);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=Object(r.a)(e),l=c.getUTCDay(),f=(l<u?7:0)+l-u;return c.setUTCDate(c.getUTCDate()-f),c.setUTCHours(0,0,0,0),c}function E(e,t){Object(o.a)(1,arguments);var n=Object(r.a)(e,t),a=n.getUTCFullYear(),i=t||{},s=i.locale,u=s&&s.options&&s.options.firstWeekContainsDate,c=null==u?1:Object(m.a)(u),l=null==i.firstWeekContainsDate?c:Object(m.a)(i.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=new Date(0);f.setUTCFullYear(a+1,0,l),f.setUTCHours(0,0,0,0);var d=O(f,t),p=new Date(0);p.setUTCFullYear(a,0,l),p.setUTCHours(0,0,0,0);var h=O(p,t);return n.getTime()>=d.getTime()?a+1:n.getTime()>=h.getTime()?a:a-1}function S(e,t){Object(o.a)(1,arguments);var n=t||{},r=n.locale,a=r&&r.options&&r.options.firstWeekContainsDate,i=null==a?1:Object(m.a)(a),s=null==n.firstWeekContainsDate?i:Object(m.a)(n.firstWeekContainsDate),u=E(e,t),c=new Date(0);c.setUTCFullYear(u,0,s),c.setUTCHours(0,0,0,0);var l=O(c,t);return l}var x="midnight",j="noon",k="morning",T="afternoon",C="evening",A="night";function N(e,t){var n=e>0?"-":"+",r=Math.abs(e),o=Math.floor(r/60),a=r%60;if(0===a)return n+String(o);var i=t||"";return n+String(o)+i+v(a,2)}function P(e,t){return e%60==0?(e>0?"-":"+")+v(Math.abs(e)/60,2):R(e,t)}function R(e,t){var n=t||"",r=e>0?"-":"+",o=Math.abs(e);return r+v(Math.floor(o/60),2)+n+v(o%60,2)}var D={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});case"GGGG":default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),o=r>0?r:1-r;return n.ordinalNumber(o,{unit:"year"})}return b.y(e,t)},Y:function(e,t,n,r){var o=E(e,r),a=o>0?o:1-o;return"YY"===t?v(a%100,2):"Yo"===t?n.ordinalNumber(a,{unit:"year"}):v(a,t.length)},R:function(e,t){return v(w(e),t.length)},u:function(e,t){return v(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return v(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return v(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return b.M(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return v(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,a){var i=function(e,t){Object(o.a)(1,arguments);var n=Object(r.a)(e),a=O(n,t).getTime()-S(n,t).getTime();return Math.round(a/6048e5)+1}(e,a);return"wo"===t?n.ordinalNumber(i,{unit:"week"}):v(i,t.length)},I:function(e,t,n){var a=function(e){Object(o.a)(1,arguments);var t=Object(r.a)(e),n=y(t).getTime()-_(t).getTime();return Math.round(n/6048e5)+1}(e);return"Io"===t?n.ordinalNumber(a,{unit:"week"}):v(a,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):b.d(e,t)},D:function(e,t,n){var a=function(e){Object(o.a)(1,arguments);var t=Object(r.a)(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var a=t.getTime(),i=n-a;return Math.floor(i/864e5)+1}(e);return"Do"===t?n.ordinalNumber(a,{unit:"dayOfYear"}):v(a,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});case"EEEE":default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(a);case"ee":return v(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});case"eeee":default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(a);case"cc":return v(a,t.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});case"cccc":default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),o=0===r?7:r;switch(t){case"i":return String(o);case"ii":return v(o,t.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});case"iiii":default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,o=e.getUTCHours();switch(r=12===o?j:0===o?x:o/12>=1?"pm":"am",t){case"b":case"bb":case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,o=e.getUTCHours();switch(r=o>=17?C:o>=12?T:o>=4?k:A,t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return b.h(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):b.H(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):v(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):v(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):b.m(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):b.s(e,t)},S:function(e,t){return b.S(e,t)},X:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();if(0===o)return"Z";switch(t){case"X":return P(o);case"XXXX":case"XX":return R(o);case"XXXXX":case"XXX":default:return R(o,":")}},x:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return P(o);case"xxxx":case"xx":return R(o);case"xxxxx":case"xxx":default:return R(o,":")}},O:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+N(o,":");case"OOOO":default:return"GMT"+R(o,":")}},z:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+N(o,":");case"zzzz":default:return"GMT"+R(o,":")}},t:function(e,t,n,r){var o=r._originalDate||e;return v(Math.floor(o.getTime()/1e3),t.length)},T:function(e,t,n,r){return v((r._originalDate||e).getTime(),t.length)}};function I(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});case"PPPP":default:return t.date({width:"full"})}}function M(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});case"pppp":default:return t.time({width:"full"})}}var L={p:M,P:function(e,t){var n,r=e.match(/(P+)(p+)?/),o=r[1],a=r[2];if(!a)return I(e,t);switch(o){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;case"PPPP":default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",I(o,t)).replace("{{time}}",M(a,t))}},B=n(182),F=["D","DD"],U=["YY","YYYY"];function z(e){return-1!==F.indexOf(e)}function H(e){return-1!==U.indexOf(e)}function G(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var W=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,q=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,V=/^'([^]*?)'?$/,Y=/''/g,$=/[a-zA-Z]/;function X(e,t,n){Object(o.a)(2,arguments);var i=String(t),s=n||{},u=s.locale||p,c=u.options&&u.options.firstWeekContainsDate,l=null==c?1:Object(m.a)(c),f=null==s.firstWeekContainsDate?l:Object(m.a)(s.firstWeekContainsDate);if(!(f>=1&&f<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=u.options&&u.options.weekStartsOn,h=null==d?0:Object(m.a)(d),v=null==s.weekStartsOn?h:Object(m.a)(s.weekStartsOn);if(!(v>=0&&v<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!u.localize)throw new RangeError("locale must contain localize property");if(!u.formatLong)throw new RangeError("locale must contain formatLong property");var b=Object(r.a)(e);if(!a(b))throw new RangeError("Invalid time value");var y=Object(B.a)(b),w=g(b,y),_={firstWeekContainsDate:f,weekStartsOn:v,locale:u,_originalDate:b},O=i.match(q).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,L[t])(e,u.formatLong,_):e})).join("").match(W).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return K(n);var o=D[r];if(o)return!s.useAdditionalWeekYearTokens&&H(n)&&G(n,t,e),!s.useAdditionalDayOfYearTokens&&z(n)&&G(n,t,e),o(w,n,u.localize,_);if(r.match($))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("");return O}function K(e){return e.match(V)[1].replace(Y,"'")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3NtZW0vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnN0YW50cy9zdG9yYWdlLnRzIiwid2VicGFjazovLy8uL3NyYy9oZWxwZXJzL3N0b3JhZ2UudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWludGwvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb25zdGFudHMvbGFuZ3VhZ2VzLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93ZWJleHRlbnNpb24tcG9seWZpbGwtdHMvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb25zdGFudHMvY29tcGV0aXRvcnMudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2lzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb25zdGFudHMvY29uc3RhbnRzLnRzIiwid2VicGFjazovLy8uL3NyYy9oZWxwZXJzL3V0aWxzLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL21pc2MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvQnV0dG9uL2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnN0YW50cy91cmxzLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnRsLWZvcm1hdC1jYWNoZS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS90b0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUHJpY2VTZXR0aW5ncy9jb21wb25lbnRzL1Jvdy9Sb3cudHN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaW50bC9saWIvY29tcG9uZW50cy9jcmVhdGVGb3JtYXR0ZWRDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWludGwvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL2hvb2tzL3VzZVByZXZpb3VzLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL0lucHV0L2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9yZWR1Y2Vycy90aGVtZS9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC9lcy9yZWR1eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vc3RyaW5nLmpzIiwid2VicGFjazovLy8uL3NyYy9jb25zdGFudHMvY29tbWFuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hvb2tzL3VzZUZ1bm5lbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uc3RhbnRzL2ZpbGVzLnRzIiwid2VicGFjazovLy8uL3NyYy9oZWxwZXJzL2FwaS50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9zdG9yZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uc3RhbnRzL25vdGlmaWNhdGlvbnMudHMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vbm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaW50bC9saWIvY29tcG9uZW50cy9pbmplY3RJbnRsLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0ljb24vSWNvbkNyb3NzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvanMvQmFja2dyb3VuZC9mdW5uZWwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hlbHBlcnMvdGFicy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy9MYW5ndWFnZUNvbnRleHQudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3N0YWNrdHJhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQnV0dG9uSWNvbi9CdXR0b25JY29uLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvaW50ZXJmYWNlcy9pbnRlcmZhY2VzLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL3JlZHVjZXJzL3RoZW1lL2NvbnN0YW50cy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9yZWR1Y2Vycy9sMTBuL2NvbnN0YW50cy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9yZWR1Y2Vycy9zZXR0aW5ncy9jb25zdGFudHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludGwtbWVzc2FnZWZvcm1hdC1wYXJzZXIvbGliL3R5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnRsLW1lc3NhZ2Vmb3JtYXQtcGFyc2VyL2xpYi9wYXJzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludGwtbWVzc2FnZWZvcm1hdC1wYXJzZXIvbGliL25vcm1hbGl6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW50bC1tZXNzYWdlZm9ybWF0LXBhcnNlci9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludGwtbWVzc2FnZWZvcm1hdC1wYXJzZXIvbGliL3NrZWxldG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnRsLW1lc3NhZ2Vmb3JtYXQvbGliL2Zvcm1hdHRlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludGwtbWVzc2FnZWZvcm1hdC9saWIvY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW50bC1tZXNzYWdlZm9ybWF0L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9Eb3RzTG9hZGVyL2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVGl0bGUvVGl0bGUudHN4Iiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9Ub29sdGlwZWQvVG9vbHRpcGVkQ29tcG9uZW50L2ludGVyZmFjZXMudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvaGVscGVycy9nZXRSZWZCb3VuZGluZy50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9Ub29sdGlwZWQvVG9vbHRpcENvbnRlbnQvZ2V0VXBkYXRlZENvb3JkaW5hdGVzLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL1Rvb2x0aXBlZC9Ub29sdGlwQ29udGVudC9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvVG9vbHRpcGVkL1Rvb2x0aXBlZENvbXBvbmVudC9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvVG9vbHRpcGVkL2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9oZWxwZXJzL3RvZ2dsZVBhZ2VTY3JvbGwudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvTW9kYWwvaW5kZXgudHN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL0NhcmQvaW5kZXgudHN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL0hpbnQvaW5kZXgudHN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL0J1dHRvblJhZGlvL2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ecm9wZG93bi9Ecm9wZG93bi50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSWNvbi9JY29uR2Vhci50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ29udGV4dE1lbnUvQ29udGV4dE1lbnUudHN4Iiwid2VicGFjazovLy8uL3NyYy9ob29rcy91c2VCYWNrZ3JvdW5kUmVxdWVzdEhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvaGVscGVycy90aGVtZS50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9oZWxwZXJzL2FkYXB0aXZlLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tb2RhbC9saWIvaGVscGVycy9zYWZlSFRNTEVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTG9nby9Mb2dvLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9JY29uL0ljb25DaGVjay50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSWNvbi9JY29uRmxhZ0VuLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9JY29uL0ljb25GbGFnUnVzc2lhLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9MYW5ndWFnZVN3aXRjaGVyL0xhbmd1YWdlU3dpdGNoZXIudHN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tb2RhbC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTGFuZ3VhZ2VTd2l0Y2hlci9tZXNzYWdlcy50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhbGxvdy1lcXVhbC9vYmplY3RzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC10aHVuay9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0Nyb3NzLnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvRG90c0xvYWRlci9Eb3RzTG9hZGVyLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9CdXR0b24vQnV0dG9uLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvcG9ueWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL21lbW8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vaW50ZWdyYXRpb25zL2Z1bmN0aW9udG9zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3N5bmNwcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2h1Yi9lc20vc2NvcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2xvZ2dlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS90eXBlcy9lc20vc2Vzc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9odWIvZXNtL3Nlc3Npb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvaHViL2VzbS9odWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vaW50ZWdyYXRpb25zL2luYm91bmRmaWx0ZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vZXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2Rzbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9pbnRlZ3JhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9iYXNlY2xpZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3R5cGVzL2VzbS9zdGF0dXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vdHJhbnNwb3J0cy9ub29wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3R5cGVzL2VzbS9zZXZlcml0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9iYXNlYmFja2VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vc3VwcG9ydHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vdHJhY2VraXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vcGFyc2Vycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2VzbS9ldmVudGJ1aWxkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vcmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3Byb21pc2VidWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vdHJhbnNwb3J0cy9iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2Jyb3dzZXIvZXNtL3RyYW5zcG9ydHMvZmV0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vdHJhbnNwb3J0cy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vYmFja2VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9taW5pbWFsL2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2VzbS9oZWxwZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9pbnN0cnVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2Jyb3dzZXIvZXNtL2ludGVncmF0aW9ucy9icmVhZGNydW1icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2VzbS9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2VzbS9pbnRlZ3JhdGlvbnMvdHJ5Y2F0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vaW50ZWdyYXRpb25zL2dsb2JhbGhhbmRsZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2Jyb3dzZXIvZXNtL2ludGVncmF0aW9ucy9saW5rZWRlcnJvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vaW50ZWdyYXRpb25zL3VzZXJhZ2VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2VzbS9zZGsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vc2RrLmpzIiwid2VicGFjazovLy8uL3NyYy9oZWxwZXJzL3NlbnRyeS50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9yZWR1Y2Vycy9sMTBuL2luZGV4LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL3JlZHVjZXJzL2F2aWFEZXN0aW5hdGlvbi9jb25zdGFudHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvcmVkdWNlcnMvYXZpYURlc3RpbmF0aW9uL2luZGV4LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL3JlZHVjZXJzL3RyYW5zZmVyRGVzdGluYXRpb24vY29uc3RhbnRzL2luZGV4LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL3JlZHVjZXJzL3RyYW5zZmVyRGVzdGluYXRpb24vaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvcmVkdWNlcnMvZGVzdGluYXRpb24vY29uc3RhbnRzL2luZGV4LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL3JlZHVjZXJzL2Rlc3RpbmF0aW9uL2luZGV4LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL3JlZHVjZXJzL2hvbGlkYXlzL2NvbnN0YW50cy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9yZWR1Y2Vycy9ob2xpZGF5cy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9yZWR1Y2Vycy9jb3VudHJpZXMvY29uc3RhbnRzL2luZGV4LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL3JlZHVjZXJzL2NvdW50cmllcy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9yZWR1Y2Vycy9jaXRpemVuc2hpcC9jb25zdGFudHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvcmVkdWNlcnMvY2l0aXplbnNoaXAvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvcmVkdWNlcnMvc2V0dGluZ3MvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvcmVkdWNlcnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vZGFsL2xpYi9oZWxwZXJzL3RhYmJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tb2RhbC9saWIvaGVscGVycy9hcmlhQXBwSGlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vZGFsL2xpYi9oZWxwZXJzL3BvcnRhbE9wZW5JbnN0YW5jZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvVG9vbHRpcGVkL1Rvb2x0aXBDb250ZW50L1Rvb2x0aXBDb250ZW50LmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9Nb2RhbC9Nb2RhbC5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvQ2FyZC9DYXJkLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9IaW50L0hpbnQuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL0lucHV0L0lucHV0LmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9UaXRsZS9UaXRsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQnV0dG9uSWNvbi9CdXR0b25JY29uLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ecm9wZG93bi9Ecm9wZG93bi5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ29udGV4dE1lbnUvQ29udGV4dE1lbnUuY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0xhbmd1YWdlU3dpdGNoZXIvTGFuZ3VhZ2VTd2l0Y2hlci5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTG9nby9Mb2dvLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvcmVkdWNlcnMvdGhlbWUvYWN0aW9ucy9zZXRUaGVtZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uc3RhbnRzL3RoZW1lLnRzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1RoZW1lL1RoZW1lLnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaW50bC9saWIvY29tcG9uZW50cy91c2VJbnRsLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1ByaWNlU2V0dGluZ3MvUHJpY2VTZXR0aW5ncy50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1ByaWNlU2V0dGluZ3MvbWVzc2FnZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2V0dGluZ3MvbWVzc2FnZXMudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvQnV0dG9uUmFkaW8vQnV0dG9uUmFkaW8uY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1ByaWNlU2V0dGluZ3MvY29tcG9uZW50cy9Sb3cvUm93LmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9QcmljZVNldHRpbmdzL1ByaWNlU2V0dGluZ3MuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2ViZXh0ZW5zaW9uLXBvbHlmaWxsL2Rpc3QvYnJvd3Nlci1wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pbnRsLXV0aWxzL2xpYi9pbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vZGFsL2xpYi9jb21wb25lbnRzL01vZGFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tb2RhbC9saWIvY29tcG9uZW50cy9Nb2RhbFBvcnRhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9kYWwvbGliL2hlbHBlcnMvZm9jdXNNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tb2RhbC9saWIvaGVscGVycy9zY29wZVRhYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2FybmluZy93YXJuaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9leGVudi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9kYWwvbGliL2hlbHBlcnMvY2xhc3NMaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tb2RhbC9saWIvaGVscGVycy9ib2R5VHJhcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQvcmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQuZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2V0dGluZ3MvU2V0dGluZ3MudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NldHRpbmdzL1NldHRpbmdzLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BdXRoL21lc3NhZ2VzLnRzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NpZ25Jbi9tZXNzYWdlcy50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaW50bC9saWIvZm9ybWF0dGVycy9udW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWludGwvbGliL2Zvcm1hdHRlcnMvcmVsYXRpdmVUaW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pbnRsL2xpYi9mb3JtYXR0ZXJzL2RhdGVUaW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pbnRsL2xpYi9mb3JtYXR0ZXJzL3BsdXJhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaW50bC9saWIvZm9ybWF0dGVycy9tZXNzYWdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pbnRsL2xpYi9mb3JtYXR0ZXJzL2xpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWludGwvbGliL2Zvcm1hdHRlcnMvZGlzcGxheU5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWludGwvbGliL2NvbXBvbmVudHMvcHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRXJyb3JNZXNzYWdlL0Vycm9yTWVzc2FnZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUmVzdG9yZVBhc3N3b3JkL1Jlc3RvcmVQYXNzd29yZC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2lnbkluL1NpZ25Jbi5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVGV4dEJ1dHRvbi9UZXh0QnV0dG9uLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BdXRoL0F1dGguY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0Vycm9yTWVzc2FnZS9FcnJvck1lc3NhZ2UudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1Jlc3RvcmVQYXNzd29yZC9SZXN0b3JlUGFzc3dvcmQudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NpZ25Jbi9TaWduSW4udHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1RleHRCdXR0b24vVGV4dEJ1dHRvbi50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQXV0aC9BdXRoLnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3N0YXJ0T2ZEYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3RpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnN0YW50cy9icm93c2VyLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdG9vbHRpcC1saXRlL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvUG9wdXAvUG9wdXAuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10b29sdGlwLWxpdGUvZGlzdC9mdW5jdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9hZGREYXlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdGhyb3R0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fcm9vdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvTnVtYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9JbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9GaW5pdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJdGVyYXRlZUNhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvQ2FsZW5kYXIvTW9udGhzTGlzdC9Nb250aC5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvQ2FsZW5kYXIvTW9udGhzTGlzdC9Nb250aHNMaXN0LmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9DYWxlbmRhci9EYXkuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL0NhbGVuZGFyL1dlZWsuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL0NhbGVuZGFyL01vbnRoLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9DYWxlbmRhci9EYXlzT2ZUaGVXZWVrLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9DYWxlbmRhci9HcmlkLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9Db250cm9sR3JvdXAvQ29udHJvbEdyb3VwLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL0RhdGVwaWNrZXIvTW9iaWxlU3VnZ2VzdC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9EYXRlcGlja2VyL0RhdGVwaWNrZXIuY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlYXJjaEZvcm0vRGVzdGluYXRpb24vU3VnZ2VzdC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9EZXN0aW5hdGlvbi9Nb2JpbGVTdWdnZXN0LmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2ZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9HdWVzdHMvRm9ybS5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9yYW5nZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9TZWxlY3QvU2VsZWN0LmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL0d1ZXN0cy9Db3VudGVyLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL0d1ZXN0cy9Sb29tLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL0d1ZXN0cy9Nb2JpbGVTdWdnZXN0LmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL0d1ZXN0cy9HdWVzdHMuY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlYXJjaEZvcm0vaGVscGVycy9mdW5uZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvQ2hlY2tib3gvRGVmYXVsdC5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvQ2hlY2tib3gvQnV0dG9uLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JbnB1dFJhZGlvL0lucHV0UmFkaW8uY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL1JhZGlvR3JvdXAvUmFkaW9Hcm91cC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9TZWFyY2hGb3JtL0IyQ0V4dHJhLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL0NpdGl6ZW5zaGlwL1N1Z2dlc3QuY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlYXJjaEZvcm0vQ2l0aXplbnNoaXAvTW9iaWxlU3VnZ2VzdC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9DaXRpemVuc2hpcC9DaXRpemVuc2hpcC5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvQ2hlY2tib3hHcm91cC9DaGVja2JveEdyb3VwLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL1NlYXJjaEZvcm0vRUNMQy5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9TZWFyY2hGb3JtL0IyQkV4dHJhLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL1NlYXJjaEZvcm0vRXh0cmFQYXJhbXNTd2l0Y2hlci5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9TZWFyY2hGb3JtL1NlYXJjaEZvcm0uY3NzIiwid2VicGFjazovLy8uL3NyYy9jc3MvcG9wdXAuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9ub3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFJhd1RhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nIHN5bmMgXlxcLlxcLy4qXFwuc3ZnJCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2FiLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2FkLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2FlLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2FmLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2FnLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2FpLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2FsLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2FtLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2FvLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2FyLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2FzLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2F0LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2F1LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2F3LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2F4LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2F6LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2JhLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2JiLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2JkLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2JlLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2JmLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2JnLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2JoLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2JpLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2JqLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2JsLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2JtLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2JuLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2JvLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2JxLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2JyLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2JzLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2J0LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2J3LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2J5LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2J6LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2NhLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2NjLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2NkLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2NmLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2NnLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2NoLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2NpLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2NrLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2NsLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2NtLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2NuLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2NvLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2NyLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2N1LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2N2LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2N3LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2N4LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2N5LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2N6LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2RlLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2RqLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2RrLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2RtLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2RvLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2R6LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2VjLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2VlLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2VnLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2VyLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2VzLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2V0LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2ZpLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2ZqLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2ZrLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2ZtLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2ZvLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2ZyLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2dhLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2diLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2dkLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2dlLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2dmLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2dnLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2doLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2dpLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2dsLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2dtLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2duLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2dwLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2dxLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2dyLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2d0LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2d1LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2d3LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2d5LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2hrLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2huLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2hyLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2h0LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2h1LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2lkLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2llLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2lsLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2ltLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2luLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2lvLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2lxLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2lyLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2lzLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2l0LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2plLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2ptLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2pvLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2pwLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2tlLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2tnLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2toLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2tpLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2ttLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2tuLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2twLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2tyLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2t3LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2t5LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2t6LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2xhLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2xiLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2xjLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2xpLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2xrLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2xyLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2xzLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2x0LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2x1LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2x2LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL2x5LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL21hLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL21jLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL21kLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL21lLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL21mLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL21nLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL21oLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL21rLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL21sLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL21tLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL21uLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL21vLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL21wLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL21xLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL21yLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL21zLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL210LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL211LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL212LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL213LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL214LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL215LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL216LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL25hLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL25jLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL25lLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL25mLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL25nLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL25pLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL25sLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL25vLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL25wLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL25yLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL251LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL256LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL29tLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3BhLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3BlLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3BmLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3BnLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3BoLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3BrLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3BsLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3BtLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3BuLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3ByLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3BzLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3B0LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3B3LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3B5LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3FhLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3JlLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3JvLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3JzLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3J1LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3J3LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3NhLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3NiLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3NjLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3NkLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3NlLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3NnLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3NoLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3NpLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3NqLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3NrLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3NsLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3NtLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3NuLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3NvLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3NyLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3NzLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3N0LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3N2LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3N4LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3N5LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3N6LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3RjLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3RkLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3RnLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3RoLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3RqLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3RrLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3RsLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3RtLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3RuLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3RvLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3RyLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3R0LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3R2LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3R3LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3R6LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3VhLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3VnLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3VtLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3VzLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3V5LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3V6LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3ZhLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3ZjLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3ZlLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3ZnLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3ZpLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3ZuLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3Z1LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3dmLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3dzLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3hrLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3llLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3l0LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3phLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3ptLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0ZsYWcvaW1nL3p3LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvTGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VDbGFtcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2VxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNMZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jcmVhdGVSYW5nZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUmFuZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRvb2x0aXAtbGl0ZS9kaXN0L1BvcnRhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdG9vbHRpcC1saXRlL2Rpc3QvcG9zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRvb2x0aXAtbGl0ZS9kaXN0L2dldERpcmVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL3JlZHVjZXJzL2wxMG4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvYmF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Qcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC93cmFwTWFwVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBEaXNwYXRjaFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwU3RhdGVUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21lcmdlUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvc2VsZWN0b3JGYWN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L2Nvbm5lY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVJlZHV4Q29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVNlbGVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL3JlZHVjZXJzL3RoZW1lL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlYXJjaEZvcm0vaGVscGVycy9mZXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL3JlZHVjZXJzL2F2aWEtZGVzdGluYXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9yZWR1Y2Vycy9kZXN0aW5hdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3BhcnNlSVNPL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlYXJjaEZvcm0vcmVkdWNlcnMvaG9saWRheXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9yZWR1Y2Vycy9jb3VudHJpZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9yZWR1Y2Vycy9jaXRpemVuc2hpcC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL3JlZHVjZXJzL3NldHRpbmdzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlYXJjaEZvcm0vcmVkdWNlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9zdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL1JlZHV4ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9hZGRNb250aHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9ob29rcy91c2VCb3VuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9oZWxwZXJzL3RoZW1lLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlYXJjaEZvcm0vaGVscGVycy9hZGFwdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0Fycm93RG93bi50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9DbGlja091dHNpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1NhbWVNb250aC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3N0YXJ0T2ZNb250aC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9DYWxlbmRhci9oZWxwZXJzLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZGlmZmVyZW5jZUluQ2FsZW5kYXJNb250aHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9nZXRNb250aC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9oZWxwZXJzL2dldE1vbnRoTmFtZU1lc3NhZ2UudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvQ2FsZW5kYXIvTW9udGhzTGlzdC9Nb250aC50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvQ2FsZW5kYXIvTW9udGhzTGlzdC9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9lbmRPZkRheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzV2l0aGluSW50ZXJ2YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdGFydE9mV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2FkZFdlZWtzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNTYW1lRGF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vYXJlSW50ZXJ2YWxzT3ZlcmxhcHBpbmcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvQ2FsZW5kYXIvRGF5LnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9DYWxlbmRhci9XZWVrLnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2dldERhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9nZXREYXlzSW5Nb250aC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2VuZE9mV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9DYWxlbmRhci9Nb250aC50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sYXN0RGF5T2ZNb250aC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2RpZmZlcmVuY2VJbkNhbGVuZGFyV2Vla3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvQ2FsZW5kYXIvRGF5c09mVGhlV2Vlay50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvQ2FsZW5kYXIvR3JpZC50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9taW4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9kaWZmZXJlbmNlSW5DYWxlbmRhckRheXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9nZXRZZWFyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL0NhbGVuZGFyL2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9Qb3B1cC9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvQ29udHJvbEdyb3VwL2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL0RhdGVwaWNrZXIvTW9iaWxlU3VnZ2VzdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL0RhdGVwaWNrZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvSWNvbi9GbGFnL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlYXJjaEZvcm0vRGVzdGluYXRpb24vaW1nL2hvdGVsLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL0Rlc3RpbmF0aW9uL2ltZy9jb3R0YWdlLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL0Rlc3RpbmF0aW9uL2ltZy9jYW1waW5nLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL0Rlc3RpbmF0aW9uL2ltZy9jYXN0bGUuc3ZnIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlYXJjaEZvcm0vRGVzdGluYXRpb24vaW1nL2FpcnBvcnQuc3ZnIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlYXJjaEZvcm0vRGVzdGluYXRpb24vaW1nL2J1cy1zdGF0aW9uLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL0Rlc3RpbmF0aW9uL2ltZy9jaXR5LnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL0Rlc3RpbmF0aW9uL2ltZy9kaXN0cmljdC5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9EZXN0aW5hdGlvbi9pbWcvbWV0cm8uc3ZnIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlYXJjaEZvcm0vRGVzdGluYXRpb24vaW1nL3JhaWx3YXktc3RhdGlvbi5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9EZXN0aW5hdGlvbi9pbWcvc3RhdGUuc3ZnIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlYXJjaEZvcm0vRGVzdGluYXRpb24vaW1nL3N0cmVldC5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9EZXN0aW5hdGlvbi9pbWcvdW5pdmVyc2FsLXBvaS5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9EZXN0aW5hdGlvbi90eXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL0Rlc3RpbmF0aW9uL1N1Z2dlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9EZXN0aW5hdGlvbi9tZXNzYWdlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL0Rlc3RpbmF0aW9uL01vYmlsZVN1Z2dlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9EZXN0aW5hdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL0d1ZXN0cy9hY3Rpb25UeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL0d1ZXN0cy9yZWR1Y2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL0ljb24vUGx1cy50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvaGVscGVycy9ldmVudC50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9TZWxlY3QvaW5kZXgudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlYXJjaEZvcm0vR3Vlc3RzL0NvdW50ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9HdWVzdHMvUm9vbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL0d1ZXN0cy9Gb3JtLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlYXJjaEZvcm0vR3Vlc3RzL2FjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9HdWVzdHMvbWVzc2FnZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9HdWVzdHMvTW9iaWxlU3VnZ2VzdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL0d1ZXN0cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9DaGVja2JveC9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvQ2hlY2tib3gvRGVmYXVsdC50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvQ2hlY2tib3gvQnV0dG9uLnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JbnB1dFJhZGlvL2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9SYWRpb0dyb3VwL1JhZGlvLnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9SYWRpb0dyb3VwL2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL1NlYXJjaEZvcm0vQjJDRXh0cmEuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9DaXRpemVuc2hpcC91c2VGaWx0ZXJlZExpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9DaXRpemVuc2hpcC9TdWdnZXN0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlYXJjaEZvcm0vQ2l0aXplbnNoaXAvbWVzc2FnZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9DaXRpemVuc2hpcC9Nb2JpbGVTdWdnZXN0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlYXJjaEZvcm0vQ2l0aXplbnNoaXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvQ2hlY2tib3hHcm91cC9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9TZWFyY2hGb3JtL0VDTEMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9TZWFyY2hGb3JtL0IyQkV4dHJhLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlYXJjaEZvcm0vU2VhcmNoRm9ybS9FeHRyYVBhcmFtc1N3aXRjaGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlYXJjaEZvcm0vU2VhcmNoRm9ybS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2FkZFllYXJzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1BvcHVwL21lc3NhZ2VzLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9Qb3B1cC9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1ZhbGlkL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL21hdGNoL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2xvY2FsaXplL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9saWdodEZvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZm9ybWF0L2Zvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0RheU9mWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9mb3JtYXQvaW5kZXguanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJleHRlbmRTdGF0aWNzIiwiYiIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJfX2V4dGVuZHMiLCJfXyIsInRoaXMiLCJjb25zdHJ1Y3RvciIsIl9fYXNzaWduIiwiYXNzaWduIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXBwbHkiLCJfX3ZhbHVlcyIsIml0ZXJhdG9yIiwibmV4dCIsImRvbmUiLCJUeXBlRXJyb3IiLCJfX3JlYWQiLCJlIiwiYXIiLCJwdXNoIiwiZXJyb3IiLCJfX3NwcmVhZCIsImNvbmNhdCIsInN0eWxlcyIsImVsZW0iLCJtb2RzIiwibWl4IiwiY2xhc3NlcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJmb3JFYWNoIiwibW9kTmFtZSIsIm1vZFZhbCIsImpvaW4iLCJtYXAiLCJjbGFzc05hbWUiLCJmaWx0ZXIiLCJCb29sZWFuIiwiU3RvcmFnZSIsImdldEZyb21TdG9yYWdlIiwicGFyYW0iLCJhIiwiYnJvd3NlciIsInN0b3JhZ2UiLCJsb2NhbCIsInNhdmVUb1N0b3JhZ2UiLCJzZXQiLCJyZW1vdmVGcm9tU3RvcmFnZSIsInJlbW92ZSIsIkVTQ0FQRURfQ0hBUlMiLCIzOCIsIjYyIiwiNjAiLCIzNCIsIjM5IiwiVU5TQUZFX0NIQVJTX1JFR0VYIiwiZXNjYXBlIiwic3RyIiwicmVwbGFjZSIsIm1hdGNoIiwiY2hhckNvZGVBdCIsImZpbHRlclByb3BzIiwicHJvcHMiLCJ3aGl0ZWxpc3QiLCJkZWZhdWx0cyIsInJlZHVjZSIsImZpbHRlcmVkIiwiaW52YXJpYW50SW50bENvbnRleHQiLCJpbnRsIiwiY3JlYXRlRXJyb3IiLCJtZXNzYWdlIiwiZXhjZXB0aW9uIiwic3RhY2siLCJERUZBVUxUX0lOVExfQ09ORklHIiwiZm9ybWF0cyIsIm1lc3NhZ2VzIiwidGltZVpvbmUiLCJ1bmRlZmluZWQiLCJ0ZXh0Q29tcG9uZW50IiwiZGVmYXVsdExvY2FsZSIsImRlZmF1bHRGb3JtYXRzIiwib25FcnJvciIsImNyZWF0ZUludGxDYWNoZSIsImRhdGVUaW1lIiwibnVtYmVyIiwicmVsYXRpdmVUaW1lIiwicGx1cmFsUnVsZXMiLCJsaXN0IiwiZGlzcGxheU5hbWVzIiwiY3JlYXRlRm9ybWF0dGVycyIsImNhY2hlIiwiUmVsYXRpdmVUaW1lRm9ybWF0IiwiSW50bCIsIkxpc3RGb3JtYXQiLCJEaXNwbGF5TmFtZXMiLCJnZXREYXRlVGltZUZvcm1hdCIsIkRhdGVUaW1lRm9ybWF0IiwiZ2V0TnVtYmVyRm9ybWF0IiwiTnVtYmVyRm9ybWF0IiwiZ2V0TWVzc2FnZUZvcm1hdCIsImdldFJlbGF0aXZlVGltZUZvcm1hdCIsImdldFBsdXJhbFJ1bGVzIiwiUGx1cmFsUnVsZXMiLCJnZXRMaXN0Rm9ybWF0IiwiZ2V0RGlzcGxheU5hbWVzIiwiZ2V0TmFtZWRGb3JtYXQiLCJ0eXBlIiwiZm9ybWF0VHlwZSIsImZvcm1hdCIsIkxhbmd1YWdlIiwiTGFuZ3VhZ2VMYWJlbCIsIkVOIiwiUlUiLCJuYXRpb25hbGl0aWVzVG9MYW5ndWFnZXMiLCJnYiIsImRlIiwiREUiLCJlcyIsIkVTIiwiaXQiLCJJVCIsImZyIiwiRlIiLCJwbCIsIlBMIiwidGsiLCJUSyIsInJ1IiwiYmciLCJCRyIsImh1IiwiZ3IiLCJybyIsIlJPIiwiYWUiLCJycyIsImFsIiwicHQiLCJQVCIsIkNvbXBldGl0b3IiLCJjb21wZXRpdG9yR3Jvc3MiLCJBQ1MiLCJBR0QiLCJBTE4iLCJCRE8iLCJCT08iLCJCVksiLCJFUkEiLCJHR0IiLCJIU1QiLCJIVEIiLCJIVFAiLCJJVEMiLCJTWFQiLCJUQk8iLCJUTEQiLCJWVFIiLCJXMk0iLCJjb21wZXRpdG9ySWRzIiwiY29tcGV0aXRvcnNOYW1lcyIsImlzRXJyb3IiLCJ3YXQiLCJ0b1N0cmluZyIsImlzSW5zdGFuY2VPZiIsIkVycm9yIiwiaXNFcnJvckV2ZW50IiwiaXNET01FcnJvciIsImlzRE9NRXhjZXB0aW9uIiwiaXNTdHJpbmciLCJpc1ByaW1pdGl2ZSIsImlzUGxhaW5PYmplY3QiLCJpc0V2ZW50IiwiRXZlbnQiLCJpc0VsZW1lbnQiLCJFbGVtZW50IiwiaXNSZWdFeHAiLCJpc1RoZW5hYmxlIiwidGhlbiIsImlzU3ludGhldGljRXZlbnQiLCJiYXNlIiwiX2UiLCJCQVNJQ19QUklDSU5HX0FVVEhfSUQiLCJCUkFORCIsIkRFRkFVTFRfVEhSRVNIT0xEIiwiTEFORyIsIlJPT1RfSUQiLCJWRVJTSU9OIiwibm9vcCIsImdldENvb2tpZXMiLCJ1cmwiLCJkZXRhaWxzIiwiY29va2llcyIsImNvb2tpZSIsImdldFZlcnNpb24iLCJydW50aW1lIiwiZ2V0TWFuaWZlc3QiLCJ2ZXJzaW9uIiwiZ2V0Um9vdCIsImlkIiwicm9vdCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNyZWF0ZUVsZW1lbnQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJnZXRMaW5rIiwiaHJlZiIsImxpbmsiLCJyZWwiLCJudW1iZXJXaXRoU2VwYXJhdG9ycyIsInN0cmluZyIsImdldEJyb3dzZXJOYW1lIiwidXNlckFnZW50Iiwid2luZG93IiwibmF2aWdhdG9yIiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsImdldE5hdGlvbmFsaXR5IiwibmF0aW9uYWxpdHkiLCJmYWxsYmFja05hdGlvbmFsaXR5Iiwia2V5cyIsImZpbmQiLCJyaE5hdGlvbmFsaXR5IiwicmVxdWlyZWRBcmdzIiwicmVxdWlyZWQiLCJhcmdzIiwiZmFsbGJhY2tHbG9iYWxPYmplY3QiLCJnZXRHbG9iYWxPYmplY3QiLCJnbG9iYWwiLCJzZWxmIiwidXVpZDQiLCJjcnlwdG8iLCJtc0NyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsImFyciIsIlVpbnQxNkFycmF5IiwicGFkIiwibnVtIiwidiIsIk1hdGgiLCJyYW5kb20iLCJwYXJzZVVybCIsInF1ZXJ5IiwiZnJhZ21lbnQiLCJob3N0IiwicGF0aCIsInByb3RvY29sIiwicmVsYXRpdmUiLCJnZXRFdmVudERlc2NyaXB0aW9uIiwiZXZlbnQiLCJ2YWx1ZXMiLCJldmVudF9pZCIsImNvbnNvbGVTYW5kYm94IiwiY2FsbGJhY2siLCJvcmlnaW5hbENvbnNvbGUiLCJjb25zb2xlIiwid3JhcHBlZExldmVscyIsImxldmVsIiwiX19zZW50cnlfb3JpZ2luYWxfXyIsInJlc3VsdCIsImFkZEV4Y2VwdGlvblR5cGVWYWx1ZSIsImFkZEV4Y2VwdGlvbk1lY2hhbmlzbSIsIm1lY2hhbmlzbSIsIl9vTyIsImdldExvY2F0aW9uSHJlZiIsImxvY2F0aW9uIiwib08iLCJwYXJzZVJldHJ5QWZ0ZXJIZWFkZXIiLCJub3ciLCJoZWFkZXIiLCJoZWFkZXJEZWxheSIsInBhcnNlSW50IiwiaXNOYU4iLCJoZWFkZXJEYXRlIiwiRGF0ZSIsInBhcnNlIiwiU0laRSIsIlZJRVciLCJUWVBFIiwiZW0iLCJjc3NtZW0iLCJCdXR0b24iLCJjaGlsZHJlbiIsInNpemUiLCJNIiwidmlldyIsIm9wZW5Jbk5ld1RhYiIsIndpZGUiLCJkaXNhYmxlZCIsImZvY3VzZWQiLCJsb2FkaW5nIiwib25DbGljayIsInN0eWxlIiwidGVzdGlkIiwidHJ1ZURpc2FibGVkIiwiY2xhc3NOYW1lcyIsImNvbnRlbnQiLCJ0YWJJbmRleCIsImRhdGEtZGlzYWJsZWQiLCJ0YXJnZXQiLCJkYXRhLXRlc3RpZCIsImZpbGwiLCJzb3VyY2UiLCJyZXBsYWNlbWVudCIsIm9yaWdpbmFsIiwid3JhcHBlZCIsImRlZmluZVByb3BlcnRpZXMiLCJfT28iLCJ1cmxFbmNvZGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJnZXRXYWxrU291cmNlIiwiZXJyIiwiZXZlbnRfMSIsImN1cnJlbnRUYXJnZXQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImpzb25TaXplIiwiZW5jb2RlVVJJIiwic3BsaXQiLCJ1dGY4TGVuZ3RoIiwiSlNPTiIsInN0cmluZ2lmeSIsIm5vcm1hbGl6ZVRvU2l6ZSIsImRlcHRoIiwibWF4U2l6ZSIsInNlcmlhbGl6ZWQiLCJub3JtYWxpemUiLCJub3JtYWxpemVWYWx1ZSIsIl9ldmVudHMiLCJ3YWxrIiwibWVtbyIsIkluZmluaXR5Iiwibm9ybWFsaXplZCIsInNlcmlhbGl6ZVZhbHVlIiwidG9KU09OIiwiYWNjIiwiaXNBcnJheSIsIm1lbW9pemUiLCJpbm5lcktleSIsInVubWVtb2l6ZSIsImlucHV0IiwiZXh0cmFjdEV4Y2VwdGlvbktleXNGb3JNZXNzYWdlIiwibWF4TGVuZ3RoIiwic29ydCIsImluY2x1ZGVkS2V5cyIsInNsaWNlIiwiZHJvcFVuZGVmaW5lZEtleXMiLCJ2YWwiLCJlXzEiLCJfYSIsIm9iaiIsInJ2IiwiX2IiLCJfYyIsImVfMV8xIiwicmV0dXJuIiwiaXNVbmRlZmluZWQiLCJpc09iamVjdCIsImdldFByb3RvdHlwZU9mIiwiaXNGdW5jdGlvbiIsImZuIiwiaXNBcnJheUJ1ZmZlciIsImlzQnVmZmVyIiwiaXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImlzTnVtYmVyIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNTdHJlYW0iLCJwaXBlIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsInByb2R1Y3QiLCJtZXJnZSIsImFzc2lnblZhbHVlIiwiZXh0ZW5kIiwidGhpc0FyZyIsInRyaW0iLCJzdHJpcEJPTSIsImJhc2VVUkwiLCJCMkIiLCJPU1RST1ZPSyIsIlBBUlRORVJTIiwiQVBJIiwiQjJCX0hPVEVMUyIsIkIyQl9ST09NUyIsIkhPVEVMUyIsIlJFR0lTVFJBVElPTiIsIlNFQVJDSF9IUCIsIlNFQVJDSF9TRVJQIiwiR0VUX1BBUlRORVJTX0FVVEhfS0VZIiwiUkVTVE9SRV9QQVNTV09SRCIsIlNJR05fSU4iLCJTSUdOX09VVCIsIkZVTk5FTCIsIkhDX0NIUk9NRV9GT1JNX1BJTkdFUiIsIkhDX0NIUk9NRV9GT1JNX1RBQiIsIkhDX0VYVEVOU0lPTl9TRVJQIiwiSENfUlVNIiwiRklSU1RfRVhBTVBMRSIsIkxJVkVfU0VUVElOR1MiLCJQUk9NT0NPREUiLCJQUk9NT0NPREVTIiwiQ0hST01FX1NUT1JFX1JFVklFV1MiLCJDSFJPTUVfRVhURU5TSU9OUyIsIkNIUk9NRV9ORVdfVEFCIiwiRVhURU5TSU9OX0VNQUlMIiwiTEFORElORyIsIlBSSVZBQ1lfUE9MSUNZIiwiX19zcHJlYWRBcnJheXMiLCJpbCIsImsiLCJqIiwiamwiLCJnZXRDYWNoZUlkIiwiaW5wdXRzIiwiRm9ybWF0Q29uc3RydWN0b3IiLCJfaSIsImNhY2hlSWQiLCJ0b0RhdGUiLCJhcmd1bWVudCIsImFyZ1N0ciIsImdldFRpbWUiLCJ3YXJuIiwiTmFOIiwiUHJpY2VTZXR0aW5nIiwiTkVUX1BFUkNFTlQiLCJSb3ciLCJzZXR0aW5nIiwicGVyY2VudCIsInVwZGF0ZVNldHRpbmdzIiwiY29tcGV0aXRvcklkIiwic2VuZEVycm9yIiwiaGFzRXJyb3IiLCJ1c2VyQmFzaWNNYXJrdXAiLCJ1c2VTdGF0ZSIsImlucHV0VmFsdWUiLCJzZXRJbnB1dFZhbHVlIiwiY2hlY2tlZFNldHRpbmciLCJzZXRDaGVja2VkU2V0dGluZyIsInBlcmNlbnRJY29uIiwib25CdXR0b25SYWRpb0NoYW5nZSIsImNoZWNrZWRCdG4iLCJHUk9TUyIsImdldElucHV0SGFzRXJyb3IiLCJ0ZXh0IiwiT0ZGIiwiY2hlY2tlZCIsIm9uQ2hhbmdlIiwiTkVUIiwib25CbHVyIiwiTnVtYmVyIiwiaWNvbiIsIlMiLCJwbGFjZWhvbGRlciIsInJlcXVpcmUiLCJkZWVwTWVyZ2UiLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsIkRpc3BsYXlOYW1lIiwiRGlzcGxheU5hbWVQYXJ0cyIsIl9fcmVzdCIsImluZGV4T2YiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImNyZWF0ZUZvcm1hdHRlZERhdGVUaW1lUGFydHNDb21wb25lbnQiLCJDb21wb25lbnRQYXJ0cyIsIkNvbnN1bWVyIiwiZm9ybWF0UHJvcHMiLCJkYXRlIiwiZm9ybWF0RGF0ZVRvUGFydHMiLCJmb3JtYXRUaW1lVG9QYXJ0cyIsImRpc3BsYXlOYW1lIiwiY3JlYXRlRm9ybWF0dGVkQ29tcG9uZW50IiwiQ29tcG9uZW50IiwiZm9ybWF0dGVkVmFsdWUiLCJUZXh0IiwiZGVmaW5lTWVzc2FnZXMiLCJtc2dzIiwidXNlUHJldmlvdXMiLCJyZWYiLCJSZWFjdCIsInVzZVJlZiIsInVzZUVmZmVjdCIsImN1cnJlbnQiLCJQc2V1ZG9Db250cm9sIiwiZm9yd2FyZFJlZiIsIm9uRm9jdXMiLCJvbktleURvd24iLCJoYXNWYWx1ZSIsImhhc1BsYWNlaG9sZGVyIiwicm9sZSIsIkNvbnRyb2wiLCJhdXRvQ29tcGxldGUiLCJyZWFkT25seSIsImF1dG9Db3JyZWN0IiwiYXV0b0NhcGl0YWxpemUiLCJzcGVsbENoZWNrIiwiSW5wdXQiLCJsYWJlbCIsInRvb2x0aXBDb250ZW50IiwiaW5wdXRSZWYiLCJvbkljb25DbGljayIsInBzZXVkbyIsInN0YXJ0QWRvcm5tZW50IiwicmVzZXJ2ZUljb25QbGFjZSIsInZhbGlkYXRvcnMiLCJ0b29sdGlwQ2FsbGJhY2siLCJDb250cm9sQ29tcG9uZW50IiwiZXh0ZXJuYWxFcnJvciIsInNldEV4dGVybmFsRXJyb3IiLCJpbnRlcm5hbEVycm9yIiwic2V0SW50ZXJuYWxFcnJvciIsInZhbGlkYXRlVmFsdWUiLCJzZXRWYWxpZGF0ZVZhbHVlIiwicHJldmlvdXNWYWxpZGF0ZVZhbHVlIiwidG90YWxFcnJvciIsImlzUHJldmlvdXMiLCJjdXJyZW50RXJyb3IiLCJldmVyeSIsInZhbGlkYXRlIiwiY2xpY2thYmxlIiwiSGludCIsInBvc2l0aW9uIiwiUG9zaXRpb24iLCJUT1AiLCJpbml0aWFsU3RhdGUiLCJzaXplcyIsIkRFU0tUT1AiLCJNT0JJTEUiLCJUQUJMRVQiLCJTdGF0ZSIsInN0YXRlIiwiYWN0aW9uIiwiQUNUSU9OX1RZUEUiLCJTRVRfVEhFTUUiLCJ0aGVtZSIsInRvSW50ZWdlciIsImRpcnR5TnVtYmVyIiwiY2VpbCIsImZsb29yIiwicmFuZG9tU3RyaW5nIiwic3Vic3RyaW5nIiwiQWN0aW9uVHlwZXMiLCJJTklUIiwiUkVQTEFDRSIsIlBST0JFX1VOS05PV05fQUNUSU9OIiwicHJvdG8iLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiX3JlZjIiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJnZXRTdGF0ZSIsInN1YnNjcmliZSIsImxpc3RlbmVyIiwiaXNTdWJzY3JpYmVkIiwiaW5kZXgiLCJzcGxpY2UiLCJkaXNwYXRjaCIsImxpc3RlbmVycyIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJvYnNlcnZhYmxlIiwiX3JlZiIsIm91dGVyU3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJvYnNlcnZlU3RhdGUiLCJ1bnN1YnNjcmliZSIsImdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlIiwiYWN0aW9uVHlwZSIsIlN0cmluZyIsImNvbWJpbmVSZWR1Y2VycyIsInJlZHVjZXJzIiwicmVkdWNlcktleXMiLCJmaW5hbFJlZHVjZXJzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsImZpbmFsUmVkdWNlcktleXMiLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJoYXNDaGFuZ2VkIiwibmV4dFN0YXRlIiwiX2tleSIsInByZXZpb3VzU3RhdGVGb3JLZXkiLCJuZXh0U3RhdGVGb3JLZXkiLCJlcnJvck1lc3NhZ2UiLCJiaW5kQWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3IiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJfZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIm93bktleXMiLCJlbnVtZXJhYmxlT25seSIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9vYmplY3RTcHJlYWQyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImNvbXBvc2UiLCJfbGVuIiwiZnVuY3MiLCJhcmciLCJhcHBseU1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsInN0b3JlIiwiX2Rpc3BhdGNoIiwibWlkZGxld2FyZUFQSSIsImNoYWluIiwibWlkZGxld2FyZSIsInRydW5jYXRlIiwibWF4Iiwic3Vic3RyIiwic25pcExpbmUiLCJsaW5lIiwiY29sbm8iLCJuZXdMaW5lIiwibGwiLCJzdGFydCIsImVuZCIsIm1pbiIsInNhZmVKb2luIiwiZGVsaW1pdGVyIiwib3V0cHV0IiwiaXNNYXRjaGluZ1BhdHRlcm4iLCJwYXR0ZXJuIiwidGVzdCIsIkNMT1NFX09OQk9BUkRJTkciLCJPUEVOX1JBVEUiLCJTSE9XX09GRkVSIiwiU0hPV19UQk9fQkZfT0ZGRVIiLCJDSEFOR0VfTk9USUZJQ0FUSU9OU19TRVRUSU5HUyIsIkdFVF9DT01QRVRJVE9SX1NFUlBfREFUQSIsIkdFVF9DT01QRVRJVE9SX0FMTF9TRVJQX0RBVEEiLCJHRVRfQ09NUEVUSVRPUl9PUkRFUl9EQVRBIiwiR0VUX1RCT19PUkRFUl9EQVRBIiwiVVBEQVRFX0xJVkVfU0VUVElOR1MiLCJPUEVOX05FV19XSU5ET1ciLCJpblBvcHVwIiwiaW5qZWN0IiwidXNlQ2FsbGJhY2siLCJwYWdlVHlwZSIsImdldEN1cnJlbnRUYWIiLCJ0YWIiLCJpbmplY3RGdW5uZWwiLCJzZW5kRXZlbnQiLCJkYXRhIiwidGFicyIsImV4ZWN1dGVTY3JpcHQiLCJjb2RlIiwibG9nIiwiaGNmdW5uZWwiLCJmaWxlcyIsImh0bWwiLCJTRUFSQ0hfRk9STSIsImpzIiwiRklSU1RfQk9PS0lORyIsIk9GRkVSIiwiT05CT0FSRElORyIsIklORk9STUFUSU9OIiwiY3NzIiwiRk9OVFMiLCJpbWFnZXMiLCJCR19FQ09OT01ZX1NURVAiLCJCR19GSVJTVF9CT09LSU5HIiwiQkdfSU5TVFJVQ1RJT05TX1NURVAiLCJCR19XRUxDT01FX1NURVAiLCJGQVZJQ09OX0RFRkFVTFQiLCJGQVZJQ09OX1NVQ0NFU1MiLCJJQ09OX0hFQVJUIiwiSUNPTl9ORVciLCJJQ09OX1BJTiIsIkxPR08iLCJhcGkiLCJheGlvcyIsIndpdGhDcmVkZW50aWFscyIsImVuaGFuY2VycyIsInRodW5rIiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyIsIngiLCJyb290UmVkdWNlciIsIk9OIiwicGFyYW1zIiwiZHVyYXRpb24iLCJnIiwiRnVuY3Rpb24iLCJpc05vZGVFbnYiLCJwcm9jZXNzIiwiZHluYW1pY1JlcXVpcmUiLCJtb2QiLCJyZXF1ZXN0IiwiSW50bENvbnRleHQiLCJJbnRsQ29uc3VtZXIiLCJQcm92aWRlciIsIkludGxQcm92aWRlciIsIkNvbnRleHQiLCJJY29uQ3Jvc3MiLCJoZWlnaHQiLCJ3aWR0aCIsInZpZXdCb3giLCJmaWxsUnVsZSIsIlBhZ2VUeXBlIiwiR2V0RGF0YUtleSIsIlBvc3REYXRhS2V5IiwiRGF0YUtleSIsInRhYklkIiwiVUlEIiwidWlkIiwiVVNFUl9JRCIsInVzZXJJZCIsIlJBVEVTIiwicmF0ZXMiLCJ1cmxzIiwiZnVubmVsQ29kZSIsIlBBR0VUWVBFIiwiZ2V0RGF0YSIsInJhdGUiLCJOT19SQVRFX0RBVEEiLCJub1JhdGVEYXRhIiwicHJvbW9Db2RlIiwicG9zdERhdGEiLCJCQVJfUFJJQ0UiLCJjb21taXNzaW9uSW5mbyIsInNob3ciLCJhbW91bnRfZ3Jvc3NfbWFya3VwIiwiQkFUSFJPT01fVFlQRSIsImJhdGhyb29tVHlwZSIsIkJFRF9UWVBFIiwiYmVkVHlwZSIsIkNIRUNLSU4iLCJjaGVja0luIiwiQ0hFQ0tPVVQiLCJjaGVja091dCIsIkNPTVBFVElUT1JfQ1VSUkVOQ1kiLCJjdXJyZW5jeSIsIkNPTVBFVElUT1JfSUQiLCJjb21wZXRpdG9yIiwiREFURVRJTUUiLCJFWFRFTlNJT05fQlJBTkQiLCJFWFRFTlNJT05fTEFORyIsIkVYVEVOU0lPTl9WRVJTSU9OIiwiRVhURVJOQUxfQ1VSUkVOQ1kiLCJleHRlcm5hbEN1cnJlbmN5IiwiRVhURVJOQUxfSE9URUxfSUQiLCJleHRlcm5hbEhvdGVsSWQiLCJFWFRFUk5BTF9IT1RFTF9OQU1FIiwiZXh0ZXJuYWxIb3RlbE5hbWUiLCJGVU5ORUxfU1RFUCIsImZ1bm5lbFN0ZXAiLCJHVUVTVFMiLCJndWVzdHMiLCJhY2N1bSIsImFkdWx0cyIsImtpZHMiLCJHVUVTVFNfREVUQUlMRUQiLCJndWVzdCIsIkhBU19CQUxDT05ZIiwiaGFzQmFsY29ueSIsIklTX0VURyIsImlzRXRnIiwiTUFJTl9DT01QRVRJVE9SX1BSSUNFIiwicHJpY2VPbGRXaXRob3V0VGF4ZXMiLCJQUklDRV9XSVRIX1RBWEVTIiwicHJpY2VPbGRXaXRoVGF4ZXMiLCJNRUFMX1RZUEUiLCJtZWFsVHlwZSIsIk1JTl9PU1RST1ZPS19MT1lBTFRZIiwibG95YWx0eSIsIk1JTl9PU1RST1ZPS19QUklDRSIsInByaWNlV2l0aG91dFRheGVzIiwiTUlOX09TVFJPVk9LX1BSSUNFX1dJVEhfVEFYRVMiLCJwcmljZVdpdGhUYXhlcyIsIk5FVF9QUklDRSIsImFtb3VudF9uZXQiLCJOVU1fSU5fUEFHRSIsInJhdGVJbmRleCIsIk9TVFJPVk9LX0NVUlJFTkNZIiwiT1RBSE9URUxfSUQiLCJob3RlbElkIiwiUFJPTU9fQU1PVU5UIiwicGFyc2VGbG9hdCIsImRpc2NvdW50IiwiUkVTSURFTkNZIiwicmVzaWRlbmN5IiwiUk9PTV9OQU1FIiwicm9vbU5hbWUiLCJUQVhFUyIsInRheGVzIiwiQ0FOQ0VMTEFUSU9OX0JFRk9SRSIsImNhbmNlbGxhdGlvbkJlZm9yZSIsIkhBU19NRUFMIiwiaGFzTWVhbCIsInNlbmRGdW5uZWwiLCJzZW5kQ29tcGV0aXRvclNlcnBEYXRhIiwiU0VSUCIsInNlbmRDb21wZXRpdG9yT3JkZXJEYXRhIiwiT1JERVIiLCJzZW5kUHJpY2VTZXR0aW5ncyIsIlBSSUNFX1NFVFRJTkdTIiwic2VuZEJyb3dzZXJIaXN0b3J5Iiwib25lTW9udGhBZ28iLCJoaXN0b3J5Iiwic2VhcmNoIiwibWF4UmVzdWx0cyIsInN0YXJ0VGltZSIsImhpc3RvcnlVcmxzIiwiaGlzdG9yeUl0ZW1BIiwiaGlzdG9yeUl0ZW1CIiwidmlzaXRDb3VudCIsImhvc3RuYW1lIiwiVVJMIiwidW5pcXVlSGlzdG9yeVVybHMiLCJTZXQiLCJISVNUT1JZIiwiYWN0aXZlIiwiY3VycmVudFdpbmRvdyIsImNyZWF0ZUNvbnRleHQiLCJsYW5ndWFnZSIsInNldExhbmd1YWdlIiwiZ2V0RnVuY3Rpb25OYW1lIiwiQnV0dG9uSWNvbiIsIkxpdmVTZXR0aW5nIiwiRGlzY291bnRUeXBlIiwiUHJvbW9DYW1wYWlnbiIsImlzTGl0ZXJhbEVsZW1lbnQiLCJlbCIsImxpdGVyYWwiLCJpc0FyZ3VtZW50RWxlbWVudCIsImlzTnVtYmVyRWxlbWVudCIsImlzRGF0ZUVsZW1lbnQiLCJpc1RpbWVFbGVtZW50IiwidGltZSIsImlzU2VsZWN0RWxlbWVudCIsInNlbGVjdCIsImlzUGx1cmFsRWxlbWVudCIsInBsdXJhbCIsImlzUG91bmRFbGVtZW50IiwicG91bmQiLCJpc051bWJlclNrZWxldG9uIiwiaXNEYXRlVGltZVNrZWxldG9uIiwiU3ludGF4RXJyb3IiLCJfc3VwZXIiLCJleHBlY3RlZCIsImZvdW5kIiwiX3RoaXMiLCJjYXB0dXJlU3RhY2tUcmFjZSIsImJ1aWxkTWVzc2FnZSIsImhleCIsImNoIiwidG9VcHBlckNhc2UiLCJsaXRlcmFsRXNjYXBlIiwiY2xhc3NFc2NhcGUiLCJkZXNjcmliZUV4cGVjdGF0aW9uIiwiZXhwZWN0YXRpb24iLCJlc2NhcGVkUGFydHMiLCJwYXJ0cyIsInBhcnQiLCJpbnZlcnRlZCIsImRlc2NyaXB0aW9uIiwiZXhwZWN0ZWQxIiwiZGVzY3JpcHRpb25zIiwiZGVzY3JpYmVFeHBlY3RlZCIsImZvdW5kMSIsInBlZ1BhcnNlIiwib3B0aW9ucyIsInBlZyRyZXN1bHQiLCJwZWckRkFJTEVEIiwicGVnJHN0YXJ0UnVsZUZ1bmN0aW9ucyIsInBlZyRwYXJzZXN0YXJ0IiwicGVnJHN0YXJ0UnVsZUZ1bmN0aW9uIiwicGVnJGMzIiwicGVnJGxpdGVyYWxFeHBlY3RhdGlvbiIsInBlZyRjNSIsInBlZyRvdGhlckV4cGVjdGF0aW9uIiwicGVnJGM3IiwicGVnJGM5IiwicGVnJGMxMSIsInBlZyRjMTIiLCJwZWckYzEzIiwicGVnJGNsYXNzRXhwZWN0YXRpb24iLCJwZWckYzE0IiwicGVnJGMxNSIsInBlZyRjMTciLCJwZWckYzE5IiwicGVnJGMyMyIsInBlZyRjMjYiLCJtZXNzYWdlQ3R4IiwicG9wIiwicGVnJGMyOCIsInBlZyRjMzAiLCJwZWckYzMxIiwiaW5zZXJ0TG9jYXRpb24iLCJwZWckYzMzIiwicGVnJGMzNCIsInBlZyRjMzUiLCJwZWckYzM2IiwicGVnJGMzNyIsInBlZyRjMzgiLCJwZWckYzM5IiwicGVnJGM0MyIsInBlZyRjNDUiLCJwZWckYzQ3IiwicGVnJGM0OSIsInBlZyRjNTEiLCJwZWckYzU0IiwicGVnJGM1NyIsInBlZyRjNjIiLCJwZWckYzYzIiwicGVnJGM2NCIsInBlZyRjNjUiLCJwZWckYzY2IiwicGVnJGM2NyIsInBlZyRjNjgiLCJwZWckYzY5IiwicGVnJGM3MSIsInBlZyRjNzQiLCJwZWckYzc2IiwicGVnJGM3OSIsImlzSW5QbHVyYWxPcHRpb24iLCJwZWckYzgxIiwicGVnJGM4MyIsInBlZyRjODQiLCJwZWckYzg2IiwicGVnJGM4OCIsInBlZyRjODkiLCJwZWckYzkwIiwicGVnJGM5MSIsInBlZyRjOTMiLCJwZWckY3VyclBvcyIsInBlZyRzYXZlZFBvcyIsInBlZyRwb3NEZXRhaWxzQ2FjaGUiLCJjb2x1bW4iLCJwZWckbWF4RmFpbFBvcyIsInBlZyRtYXhGYWlsRXhwZWN0ZWQiLCJwZWckc2lsZW50RmFpbHMiLCJzdGFydFJ1bGUiLCJwZWckY29tcHV0ZUxvY2F0aW9uIiwibG9jYXRpb24xIiwicGVnJGJ1aWxkU2ltcGxlRXJyb3IiLCJ0ZXh0MSIsImlnbm9yZUNhc2UiLCJwZWckY29tcHV0ZVBvc0RldGFpbHMiLCJwb3MiLCJzdGFydFBvcyIsImVuZFBvcyIsInN0YXJ0UG9zRGV0YWlscyIsImVuZFBvc0RldGFpbHMiLCJvZmZzZXQiLCJwZWckZmFpbCIsInBlZyRidWlsZFN0cnVjdHVyZWRFcnJvciIsInBlZyRwYXJzZW1lc3NhZ2UiLCJzMCIsInMxIiwicGVnJHBhcnNlbWVzc2FnZUVsZW1lbnQiLCJwZWckcGFyc2VtZXNzYWdlVGV4dCIsIm1lc3NhZ2VUZXh0IiwicGVnJHBhcnNlbGl0ZXJhbEVsZW1lbnQiLCJzMyIsInM1IiwicGVnJHBhcnNlXyIsInBlZyRwYXJzZWFyZ05hbWVPck51bWJlciIsInBlZyRwYXJzZWFyZ3VtZW50RWxlbWVudCIsInM3IiwiczkiLCJzMTAiLCJzMTEiLCJzMTIiLCJzMiIsInBlZyRwYXJzZW51bWJlclNrZWxldG9uVG9rZW4iLCJ0b2tlbnMiLCJwZWckcGFyc2VudW1iZXJTa2VsZXRvbiIsInBlZyRwYXJzZW51bWJlckFyZ1N0eWxlIiwicGVnJHBhcnNlbnVtYmVyRm9ybWF0RWxlbWVudCIsInBlZyRwYXJzZWRhdGVUaW1lU2tlbGV0b25MaXRlcmFsIiwicGVnJHBhcnNlZGF0ZVRpbWVTa2VsZXRvblBhdHRlcm4iLCJwZWckcGFyc2VkYXRlVGltZVNrZWxldG9uIiwicGVnJHBhcnNlZGF0ZU9yVGltZUFyZ1N0eWxlIiwicGVnJHBhcnNlZGF0ZU9yVGltZUZvcm1hdEVsZW1lbnQiLCJwZWckcGFyc2VzaW1wbGVGb3JtYXRFbGVtZW50IiwiczEzIiwiczE0IiwiczE1IiwicGVnJHBhcnNlbnVtYmVyIiwicGVnJHBhcnNlcGx1cmFsT3B0aW9uIiwicGx1cmFsVHlwZSIsImFsbCIsIm9wdGlvbkxvY2F0aW9uIiwicGVnJGM1MiIsInBlZyRwYXJzZXBsdXJhbEVsZW1lbnQiLCJwZWckcGFyc2VzZWxlY3RPcHRpb24iLCJwZWckYzU1IiwicGVnJHBhcnNlc2VsZWN0RWxlbWVudCIsInBlZyRwYXJzZXBvdW5kRWxlbWVudCIsInBlZyRwYXJzZWRvdWJsZUFwb3N0cm9waGVzIiwicGVnJHBhcnNlcXVvdGVkU3RyaW5nIiwicGVnJHBhcnNldW5xdW90ZWRTdHJpbmciLCJwZWckcGFyc2VudW1iZXJTa2VsZXRvbklkIiwiczQiLCJwZWckcGFyc2V3aGl0ZVNwYWNlIiwiY2hhckF0IiwicGVnJHBhcnNlbnVtYmVyU2tlbGV0b25Ub2tlbk9wdGlvbiIsInN0ZW0iLCJwZWckYzIwIiwiczYiLCJwZWckcGFyc2VhcmdOYW1lIiwicGVnJHBhcnNlcGx1cmFsUnVsZVNlbGVjdFZhbHVlIiwicGVnJHBhcnNlcGF0dGVyblN5bnRheCIsIm5lZ2F0aXZlIiwicGVnJHBhcnNlYXJnTnVtYmVyIiwicGVnJHBhcnNlZXNjYXBlZENoYXIiLCJjYXB0dXJlTG9jYXRpb24iLCJQTFVSQUxfSEFTSFRBR19SRUdFWCIsIm9wdHMiLCJlbHMiLCJub3JtYWxpemVIYXNodGFnSW5QbHVyYWwiLCJvcHQiLCJtYXRjaGluZ0xpdGVyYWxFbEluZGV4IiwibGl0ZXJhbEVsIiwiZWxfMSIsIm5ld1ZhbHVlIiwibmV3RWxzIiwiREFURV9USU1FX1JFR0VYIiwicGFyc2VEYXRlVGltZVNrZWxldG9uIiwic2tlbGV0b24iLCJsZW4iLCJlcmEiLCJ5ZWFyIiwiUmFuZ2VFcnJvciIsIm1vbnRoIiwiZGF5Iiwid2Vla2RheSIsImhvdXIxMiIsImhvdXJDeWNsZSIsImhvdXIiLCJtaW51dGUiLCJzZWNvbmQiLCJ0aW1lWm9uZU5hbWUiLCJGUkFDVElPTl9QUkVDSVNJT05fUkVHRVgiLCJTSUdOSUZJQ0FOVF9QUkVDSVNJT05fUkVHRVgiLCJwYXJzZVNpZ25pZmljYW50UHJlY2lzaW9uIiwiXyIsImcxIiwiZzIiLCJtaW5pbXVtU2lnbmlmaWNhbnREaWdpdHMiLCJtYXhpbXVtU2lnbmlmaWNhbnREaWdpdHMiLCJwYXJzZVNpZ24iLCJzaWduRGlzcGxheSIsImN1cnJlbmN5U2lnbiIsInBhcnNlTm90YXRpb25PcHRpb25zIiwic2lnbk9wdHMiLCJjb252ZXJ0TnVtYmVyU2tlbGV0b25Ub051bWJlckZvcm1hdE9wdGlvbnMiLCJ0b2tlbnNfMSIsInRva2VuIiwidXNlR3JvdXBpbmciLCJtYXhpbXVtRnJhY3Rpb25EaWdpdHMiLCJ1bml0Iiwibm90YXRpb24iLCJjb21wYWN0RGlzcGxheSIsImN1cnJlbmN5RGlzcGxheSIsInVuaXREaXNwbGF5IiwibWluaW11bUZyYWN0aW9uRGlnaXRzIiwiZG9tUGFyc2VyIiwiRm9ybWF0RXJyb3IiLCJtc2ciLCJ2YXJpYWJsZUlkIiwiZm9ybWF0VG9QYXJ0cyIsImxvY2FsZXMiLCJmb3JtYXR0ZXJzIiwiY3VycmVudFBsdXJhbFZhbHVlIiwib3JpZ2luYWxNZXNzYWdlIiwiZWxzXzEiLCJ2YXJOYW1lIiwib3RoZXIiLCJydWxlIiwibGFzdFBhcnQiLCJUT0tFTl9SRUdFWCIsImNvdW50ZXIiLCJyZXN0b3JlUmljaFBsYWNlaG9sZGVyTWVzc2FnZSIsIm9iamVjdFBhcnRzIiwiU0lNUExFX1hNTF9SRUdFWCIsIlRFTVBMQVRFX0lEIiwiVk9JRF9FTEVNRU5UUyIsImZvcm1hdEhUTUxNZXNzYWdlIiwiZm9ybWF0dGVkTWVzc2FnZSIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsImdldEVsZW1lbnRCeUlkIiwidGFnc1RvRm9ybWF0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjYXNlU2Vuc2l0aXZlVGFncyIsInRhZ05hbWUiLCJjaGlsZE5vZGVzIiwiY2hpbGQiLCJmb3JtYXRIVE1MRWxlbWVudCIsIm91dGVySFRNTCIsInRleHRDb250ZW50IiwiaXNWb2lkRWxlbWVudCIsImZvcm1hdEZuT3JWYWx1ZSIsImNodW5rcyIsIm1lcmdlQ29uZmlncyIsImRlZmF1bHRDb25maWciLCJjb25maWdzIiwiYzEiLCJjMiIsIkludGxNZXNzYWdlRm9ybWF0Iiwib3ZlcnJpZGVGb3JtYXRzIiwiZm9ybWF0dGVyQ2FjaGUiLCJmb3JtYXRUb1N0cmluZyIsImFzdCIsInJlc29sdmVkT3B0aW9ucyIsImxvY2FsZSIsInN1cHBvcnRlZExvY2FsZXNPZiIsImdldEFzdCIsIl9fcGFyc2UiLCJzaG9ydCIsIm1lZGl1bSIsImxvbmciLCJmdWxsIiwiRG90c0xvYWRlciIsImZpcnN0IiwidGhpcmQiLCJmb3VydGgiLCJyZWFjdElzIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGUiLCJjb250ZXh0VHlwZXMiLCJkZWZhdWx0UHJvcHMiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJNZW1vIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImRlc2NyaXB0b3IiLCJUaXRsZSIsIm9yaWdpbmFsTW9kdWxlIiwid2VicGFja1BvbHlmaWxsIiwiaHRtbFRyZWVBc1N0cmluZyIsImN1cnJlbnRFbGVtIiwib3V0Iiwic2VwTGVuZ3RoIiwibmV4dFN0ciIsIl9odG1sRWxlbWVudEFzU3RyaW5nIiwicGFyZW50Tm9kZSIsInJldmVyc2UiLCJhdHRyIiwiYWxsb3dlZEF0dHJzIiwiZ2V0QXR0cmlidXRlIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5IiwibmV4dFRpY2siLCJ0aXRsZSIsImVudiIsImFyZ3YiLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiZ2V0UmVmQm91bmRpbmciLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJnZXRVcGRhdGVkQ29vcmRpbmF0ZXMiLCJuZXdDb250YWluZXJSZWN0IiwidG9vbHRpcFBhcmFtcyIsImlzT3BlbmVkIiwidG9vbHRpcENvb3JkaW5hdGVzIiwidG9wIiwibGVmdCIsImxlZnRDb3JlTGVmdENvb3JkaW5hdGUiLCJUT09MVElQX0FSUk9XX0hFSUdIVCIsInJpZ2h0Q29yZUNvb3JkaW5hdGUiLCJ0b3BDb3JlQ29vcmRpbmF0ZSIsInBhZ2VZT2Zmc2V0IiwiYm90dG9tQ29yZUNvb3JkaW5hdGUiLCJzaWRlc1RvcENvb3JkaW5hdGVPZkVuZFBvc2l0aW9uIiwic2lkZXNUb3BDb29yZGluYXRlT2ZDZW50ZXJQb3NpdGlvbiIsInRvcEFuZEJvdHRvbUNvb3JkaW5hdGVPZkNlbnRlclBvc2l0aW9uIiwiVE9QX1NUQVJUIiwiVE9QX0VORCIsIkxFRlRfU1RBUlQiLCJMRUZUIiwiTEVGVF9FTkQiLCJCT1RUT01fU1RBUlQiLCJCT1RUT00iLCJCT1RUT01fRU5EIiwiUklHSFRfU1RBUlQiLCJSSUdIVCIsIlJJR0hUX0VORCIsImFzc2VydE5ldmVyIiwiZW1Ub29sdGlwIiwiZW1Ub29sdGlwVW5kZXJsYXkiLCJlbVRvb2x0aXBXcmFwcGVyIiwiZW1Ub29sdGlwVGl0bGUiLCJUb29sdGlwQ29udGVudCIsImNvbnRhaW5lclJlZiIsInBhcmVudFJlZiIsImlzTGltaXRlZEJ5Q29udGFpbmVyIiwic2V0VG9vbHRpcFBhcmFtcyIsImNvb3JkaW5hdGVzIiwic2V0VG9vbHRpcENvb3JkaW5hdGVzIiwidG9vbHRpcFJlZiIsImNvbnRhaW5lclJlY3QiLCJwYXJlbnRSZWN0IiwidXBkYXRlVG9vbHRpcENvb3JkaW5hdGVzIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicmVjdCIsInVzZUxheW91dEVmZmVjdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYXJlQ29vcmRpbmF0ZXNDYWxjdWxhdGVkIiwidG9vbHRpcFdpZHRoIiwiUmVhY3RET00iLCJjcmVhdGVQb3J0YWwiLCJzaG93biIsIm1heFdpZHRoIiwiYXJpYS1oaWRkZW4iLCJ0aXRsZWQiLCJUb29sdGlwZWRDb21wb25lbnQiLCJpc09wZW5lZEJ5RGVmYXVsdCIsImdldEV2ZW50cyIsInNldElzT3BlbmVkIiwib3BlblRvb2x0aXAiLCJjbG9zZVRvb2x0aXAiLCJnZXRIb3ZlckV2ZW50cyIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VMZWF2ZSIsIlRvb2x0aXBlZCIsInRvZ2dsZVBhZ2VTY3JvbGwiLCJzaG91bGRMb2NrV2luZG93Iiwib3ZlcmZsb3ciLCJNb2RhbCIsIm92ZXJsYXlFbGVtZW50IiwidHJpZ2dlckVsZW1lbnQiLCJpc0FsZXJ0Iiwib25DbG9zZSIsInBvcHVwIiwiaXNPcGVuIiwic2V0T3BlbiIsImNsb3NlIiwiY2xvc2VPbkVzYyIsImNsb3NlT25DbGlja091dHNpZGUiLCJhcmlhSGlkZUFwcCIsIm92ZXJsYXlDbGFzc05hbWUiLCJzaG91bGRDbG9zZU9uT3ZlcmxheUNsaWNrIiwib25BZnRlck9wZW4iLCJvdmVybGF5UmVmIiwibm9kZSIsIlBhZGRpbmciLCJTaGFkb3dTaXplIiwiQ2FyZCIsInBhZGRpbmciLCJzaGFkb3dTaXplIiwiVmFyaWFudCIsInZhcmlhbnQiLCJSRUdVTEFSIiwiaXNNb2JpbGVSZXN1bHQiLCJzZXRJc01vYmlsZVJlc3VsdCIsImlzTW9iaWxlIiwiZGVza3RvcEhpbnQiLCJ0b29sdGlwUHJvcHMiLCJCdXR0b25SYWRpbyIsInRyYW5zaXRpb25DbGFzc01hcCIsImVudGVyZWQiLCJleGl0aW5nIiwiZXhpdGVkIiwiQU5JTUFUSU9OX1RJTUVPVVQiLCJlbnRlciIsImV4aXQiLCJEcm9wZG93biIsImlzRnVsbFdpZHRoIiwiaXNWaXNpYmxlIiwiVHJhbnNpdGlvbiIsImluIiwidW5tb3VudE9uRXhpdCIsImZ1bGxXaWR0aCIsIkljb25HZWFyIiwiQ29udGV4dE1lbnUiLCJoYW5kbGVUcmlnZ2VyQ2xpY2siLCJoYW5kbGVCdXR0b25DbG9zZUNsaWNrIiwiQ2hpbGRyZW4iLCJjaGlsZFByb3BzIiwiY2xvbmVFbGVtZW50Iiwic2V0RXJyb3IiLCJpc0xvYWRpbmciLCJzZXRMb2FkaW5nU3RhdGUiLCJzdGF0dXMiLCJzZXRTdGF0dXMiLCJoYW5kbGVCYWNrZ3JvdW5kUmVxdWVzdCIsImNvbW1hbmQiLCJyZXN0Iiwic2VuZE1lc3NhZ2UiLCJyZXNwb25zZSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiZ2V0U2l6ZSIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudFdpZHRoIiwiY2FuVXNlRE9NIiwiX2V4ZW52IiwiRUUiLCJkZWZhdWx0IiwiU2FmZUhUTUxFbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJMb2dvIiwiYWx0Iiwic3JjIiwiZ2V0VVJMIiwiSWNvbkNoZWNrIiwiSWNvbkZsYWdFbiIsInhtbG5zIiwib3BhY2l0eSIsInJ4IiwibWFzay10eXBlIiwibWFza1VuaXRzIiwieSIsIm1hc2siLCJjbGlwUnVsZSIsIkljb25GbGFnUnVzc2lhIiwiRmxhZyIsIkxhbmd1YWdlU3dpdGNoZXIiLCJ1c2VJbnRsIiwiaXNDb250ZXh0TWVudVZpc2libGUiLCJzZXRDb250ZXh0TWVudVZpc2libGVTdGF0ZSIsInVzZUNvbnRleHQiLCJMYW5ndWFnZUNvbnRleHQiLCJoYW5kbGVMYW5ndWFnZUNsaWNrIiwiZXZ0IiwibGFuZyIsImRhdGFzZXQiLCJMQU5HVUFHRSIsImZvcm1hdE1lc3NhZ2UiLCJlbnRyaWVzIiwiZGF0YS1sYW5ndWFnZSIsIl9Nb2RhbCIsIl9Nb2RhbDIiLCJvYmpBIiwib2JqQiIsImFLZXlzIiwiYktleXMiLCJjcmVhdGVUaHVua01pZGRsZXdhcmUiLCJleHRyYUFyZ3VtZW50Iiwid2l0aEV4dHJhQXJndW1lbnQiLCJDcm9zcyIsInByb3BJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInRlc3QxIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsImZyb20iLCJzeW1ib2xzIiwidG8iLCJ1dGlscyIsImVuY29kZSIsInBhcmFtc1NlcmlhbGl6ZXIiLCJzZXJpYWxpemVkUGFyYW1zIiwidG9JU09TdHJpbmciLCJoYXNobWFya0luZGV4IiwiX19DQU5DRUxfXyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsImhlYWRlcnMiLCJhZGFwdGVyIiwiWE1MSHR0cFJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsIm1heEJvZHlMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsImNvbW1vbiIsIm1ldGhvZCIsInNldHRsZSIsImJ1aWxkVVJMIiwiYnVpbGRGdWxsUGF0aCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNvbmZpZyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsImF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidW5lc2NhcGUiLCJBdXRob3JpemF0aW9uIiwiYnRvYSIsImZ1bGxQYXRoIiwib3BlbiIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJvbmFib3J0Iiwib25lcnJvciIsIm9udGltZW91dCIsInRpbWVvdXRFcnJvck1lc3NhZ2UiLCJ4c3JmVmFsdWUiLCJyZWFkIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWxUb2tlbiIsInByb21pc2UiLCJjYW5jZWwiLCJhYm9ydCIsInNlbmQiLCJlbmhhbmNlRXJyb3IiLCJjb25maWcxIiwiY29uZmlnMiIsInZhbHVlRnJvbUNvbmZpZzJLZXlzIiwibWVyZ2VEZWVwUHJvcGVydGllc0tleXMiLCJkZWZhdWx0VG9Db25maWcyS2V5cyIsImRpcmVjdE1lcmdlS2V5cyIsImdldE1lcmdlZFZhbHVlIiwibWVyZ2VEZWVwUHJvcGVydGllcyIsInByb3AiLCJheGlvc0tleXMiLCJvdGhlcktleXMiLCJDYW5jZWwiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJfaGFzV2Vha1NldCIsIldlYWtTZXQiLCJfaW5uZXIiLCJoYXMiLCJhZGQiLCJkZWxldGUiLCJvcmlnaW5hbEZ1bmN0aW9uVG9TdHJpbmciLCJTdGF0ZXMiLCJGdW5jdGlvblRvU3RyaW5nIiwic2V0dXBPbmNlIiwiY29udGV4dCIsIlN5bmNQcm9taXNlIiwiZXhlY3V0b3IiLCJfc3RhdGUiLCJQRU5ESU5HIiwiX2hhbmRsZXJzIiwiX3Jlc29sdmUiLCJfc2V0UmVzdWx0IiwiUkVTT0xWRUQiLCJfcmVqZWN0IiwicmVhc29uIiwiUkVKRUNURUQiLCJpcyIsIl92YWx1ZSIsIl9leGVjdXRlSGFuZGxlcnMiLCJfYXR0YWNoSGFuZGxlciIsImhhbmRsZXIiLCJjYWNoZWRIYW5kbGVycyIsIm9uZnVsZmlsbGVkIiwib25yZWplY3RlZCIsImNvbGxlY3Rpb24iLCJyZXNvbHZlZENvbGxlY3Rpb24iLCJpdGVtIiwiY2F0Y2giLCJmaW5hbGx5Iiwib25maW5hbGx5IiwiaXNSZWplY3RlZCIsIlNjb3BlIiwiX25vdGlmeWluZ0xpc3RlbmVycyIsIl9zY29wZUxpc3RlbmVycyIsIl9ldmVudFByb2Nlc3NvcnMiLCJfYnJlYWRjcnVtYnMiLCJfdXNlciIsIl90YWdzIiwiX2V4dHJhIiwiX2NvbnRleHRzIiwiY2xvbmUiLCJzY29wZSIsIm5ld1Njb3BlIiwiX2xldmVsIiwiX3NwYW4iLCJfc2Vzc2lvbiIsIl90cmFuc2FjdGlvbk5hbWUiLCJfZmluZ2VycHJpbnQiLCJhZGRTY29wZUxpc3RlbmVyIiwiYWRkRXZlbnRQcm9jZXNzb3IiLCJzZXRVc2VyIiwidXNlciIsInVwZGF0ZSIsIl9ub3RpZnlTY29wZUxpc3RlbmVycyIsImdldFVzZXIiLCJzZXRUYWdzIiwidGFncyIsInNldFRhZyIsInNldEV4dHJhcyIsImV4dHJhcyIsInNldEV4dHJhIiwiZXh0cmEiLCJzZXRGaW5nZXJwcmludCIsImZpbmdlcnByaW50Iiwic2V0TGV2ZWwiLCJzZXRUcmFuc2FjdGlvbk5hbWUiLCJzZXRUcmFuc2FjdGlvbiIsInNldENvbnRleHQiLCJzZXRTcGFuIiwic3BhbiIsImdldFNwYW4iLCJnZXRUcmFuc2FjdGlvbiIsIl9kIiwidHJhbnNhY3Rpb24iLCJzcGFuUmVjb3JkZXIiLCJzcGFucyIsInNldFNlc3Npb24iLCJzZXNzaW9uIiwiZ2V0U2Vzc2lvbiIsImNhcHR1cmVDb250ZXh0IiwidXBkYXRlZFNjb3BlIiwiY29udGV4dHMiLCJjbGVhciIsImFkZEJyZWFkY3J1bWIiLCJicmVhZGNydW1iIiwibWF4QnJlYWRjcnVtYnMiLCJtZXJnZWRCcmVhZGNydW1iIiwidGltZXN0YW1wIiwiY2xlYXJCcmVhZGNydW1icyIsImFwcGx5VG9FdmVudCIsImhpbnQiLCJ0cmFjZSIsImdldFRyYWNlQ29udGV4dCIsInRyYW5zYWN0aW9uTmFtZSIsIl9hcHBseUZpbmdlcnByaW50IiwiYnJlYWRjcnVtYnMiLCJfbm90aWZ5RXZlbnRQcm9jZXNzb3JzIiwiZ2V0R2xvYmFsRXZlbnRQcm9jZXNzb3JzIiwicHJvY2Vzc29ycyIsInByb2Nlc3NvciIsImZpbmFsIiwiX19TRU5UUllfXyIsImdsb2JhbEV2ZW50UHJvY2Vzc29ycyIsImFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yIiwiUFJFRklYIiwiTG9nZ2VyIiwiX2VuYWJsZWQiLCJkaXNhYmxlIiwiZW5hYmxlIiwiU2Vzc2lvblN0YXR1cyIsImxvZ2dlciIsIlNlc3Npb24iLCJlcnJvcnMiLCJzaWQiLCJzdGFydGVkIiwiT2siLCJpcF9hZGRyZXNzIiwiaXBBZGRyZXNzIiwiZGlkIiwiZW1haWwiLCJyZWxlYXNlIiwiZW52aXJvbm1lbnQiLCJFeGl0ZWQiLCJpbml0IiwiYXR0cnMiLCJ1c2VyX2FnZW50IiwiSHViIiwiY2xpZW50IiwiX3ZlcnNpb24iLCJfc3RhY2siLCJnZXRTdGFja1RvcCIsImJpbmRDbGllbnQiLCJpc09sZGVyVGhhbiIsInNldHVwSW50ZWdyYXRpb25zIiwicHVzaFNjb3BlIiwiZ2V0U2NvcGUiLCJnZXRTdGFjayIsImdldENsaWVudCIsInBvcFNjb3BlIiwid2l0aFNjb3BlIiwiY2FwdHVyZUV4Y2VwdGlvbiIsImV2ZW50SWQiLCJfbGFzdEV2ZW50SWQiLCJmaW5hbEhpbnQiLCJzeW50aGV0aWNFeGNlcHRpb24iLCJvcmlnaW5hbEV4Y2VwdGlvbiIsIl9pbnZva2VDbGllbnQiLCJjYXB0dXJlTWVzc2FnZSIsImNhcHR1cmVFdmVudCIsImxhc3RFdmVudElkIiwiZ2V0T3B0aW9ucyIsImJlZm9yZUJyZWFkY3J1bWIiLCJmaW5hbEJyZWFkY3J1bWIiLCJjb25maWd1cmVTY29wZSIsIm9sZEh1YiIsIm1ha2VNYWluIiwiZ2V0SW50ZWdyYXRpb24iLCJpbnRlZ3JhdGlvbiIsInN0YXJ0U3BhbiIsIl9jYWxsRXh0ZW5zaW9uTWV0aG9kIiwic3RhcnRUcmFuc2FjdGlvbiIsImN1c3RvbVNhbXBsaW5nQ29udGV4dCIsInRyYWNlSGVhZGVycyIsInN0YXJ0U2Vzc2lvbiIsImVuZFNlc3Npb24iLCJjYXB0dXJlU2Vzc2lvbiIsImNhcnJpZXIiLCJnZXRNYWluQ2FycmllciIsInNlbnRyeSIsImV4dGVuc2lvbnMiLCJodWIiLCJyZWdpc3RyeSIsImdldEh1YkZyb21DYXJyaWVyIiwic2V0SHViT25DYXJyaWVyIiwiZ2V0Q3VycmVudEh1YiIsImhhc0h1Yk9uQ2FycmllciIsImFjdGl2ZURvbWFpbiIsImRvbWFpbiIsInJlZ2lzdHJ5SHViVG9wU3RhY2siLCJnZXRIdWJGcm9tQWN0aXZlRG9tYWluIiwiREVGQVVMVF9JR05PUkVfRVJST1JTIiwiSW5ib3VuZEZpbHRlcnMiLCJfb3B0aW9ucyIsImNsaWVudE9wdGlvbnMiLCJfbWVyZ2VPcHRpb25zIiwiX3Nob3VsZERyb3BFdmVudCIsIl9pc1NlbnRyeUVycm9yIiwiX2lzSWdub3JlZEVycm9yIiwiX2lzRGVuaWVkVXJsIiwiX2dldEV2ZW50RmlsdGVyVXJsIiwiX2lzQWxsb3dlZFVybCIsImlnbm9yZUludGVybmFsIiwiaWdub3JlRXJyb3JzIiwiX2dldFBvc3NpYmxlRXZlbnRNZXNzYWdlcyIsInNvbWUiLCJkZW55VXJscyIsImFsbG93VXJscyIsIndoaXRlbGlzdFVybHMiLCJibGFja2xpc3RVcmxzIiwic3RhY2t0cmFjZSIsImZyYW1lc18xIiwiZnJhbWVzIiwiZmlsZW5hbWUiLCJmcmFtZXNfMiIsIlNlbnRyeUVycm9yIiwiX25ld1RhcmdldCIsIkRTTl9SRUdFWCIsIkRzbiIsIl9mcm9tU3RyaW5nIiwiX2Zyb21Db21wb25lbnRzIiwiX3ZhbGlkYXRlIiwid2l0aFBhc3N3b3JkIiwicGFzcyIsInBvcnQiLCJwcm9qZWN0SWQiLCJleGVjIiwicHJvamVjdE1hdGNoIiwiY29tcG9uZW50cyIsIkVSUk9SX01FU1NBR0UiLCJpbnN0YWxsZWRJbnRlZ3JhdGlvbnMiLCJpbnRlZ3JhdGlvbnMiLCJkZWZhdWx0SW50ZWdyYXRpb25zIiwidXNlckludGVncmF0aW9ucyIsInVzZXJJbnRlZ3JhdGlvbnNOYW1lc18xIiwicGlja2VkSW50ZWdyYXRpb25zTmFtZXNfMSIsImRlZmF1bHRJbnRlZ3JhdGlvbiIsInVzZXJJbnRlZ3JhdGlvbiIsImludGVncmF0aW9uc05hbWVzIiwiZ2V0SW50ZWdyYXRpb25zVG9TZXR1cCIsInNldHVwSW50ZWdyYXRpb24iLCJTdGF0dXMiLCJCYXNlQ2xpZW50IiwiYmFja2VuZENsYXNzIiwiX2ludGVncmF0aW9ucyIsIl9wcm9jZXNzaW5nIiwiX2JhY2tlbmQiLCJkc24iLCJfZHNuIiwiX3Byb2Nlc3MiLCJfZ2V0QmFja2VuZCIsImV2ZW50RnJvbUV4Y2VwdGlvbiIsIl9jYXB0dXJlRXZlbnQiLCJwcm9taXNlZEV2ZW50IiwiZXZlbnRGcm9tTWVzc2FnZSIsIl9zZW5kU2Vzc2lvbiIsImdldERzbiIsImZsdXNoIiwiX2lzQ2xpZW50UHJvY2Vzc2luZyIsInJlYWR5IiwiZ2V0VHJhbnNwb3J0IiwidHJhbnNwb3J0Rmx1c2hlZCIsImVuYWJsZWQiLCJfaXNFbmFibGVkIiwiX3VwZGF0ZVNlc3Npb25Gcm9tRXZlbnQiLCJjcmFzaGVkIiwiZXJyb3JlZCIsImV4Y2VwdGlvbnMiLCJleGNlcHRpb25zXzEiLCJleGNlcHRpb25zXzFfMSIsImhhbmRsZWQiLCJDcmFzaGVkIiwic2VuZFNlc3Npb24iLCJ0aWNrZWQiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsIl9wcmVwYXJlRXZlbnQiLCJub3JtYWxpemVEZXB0aCIsInByZXBhcmVkIiwiX2FwcGx5Q2xpZW50T3B0aW9ucyIsIl9hcHBseUludGVncmF0aW9uc01ldGFkYXRhIiwiZmluYWxTY29wZSIsIl9ub3JtYWxpemVFdmVudCIsImRpc3QiLCJtYXhWYWx1ZUxlbmd0aCIsInNka0luZm8iLCJzZGsiLCJpbnRlZ3JhdGlvbnNBcnJheSIsIl9zZW5kRXZlbnQiLCJfcHJvY2Vzc0V2ZW50IiwiZmluYWxFdmVudCIsImJlZm9yZVNlbmQiLCJzYW1wbGVSYXRlIiwiaXNUcmFuc2FjdGlvbiIsIl9fc2VudHJ5X18iLCJiZWZvcmVTZW5kUmVzdWx0IiwicHJvY2Vzc2VkRXZlbnQiLCJmcm9tSHR0cENvZGUiLCJTdWNjZXNzIiwiUmF0ZUxpbWl0IiwiSW52YWxpZCIsIkZhaWxlZCIsIlVua25vd24iLCJTZXZlcml0eSIsIk5vb3BUcmFuc3BvcnQiLCJTa2lwcGVkIiwiQmFzZUJhY2tlbmQiLCJfdHJhbnNwb3J0IiwiX3NldHVwVHJhbnNwb3J0IiwiX2V4Y2VwdGlvbiIsIl9oaW50IiwiX21lc3NhZ2UiLCJzdXBwb3J0c0ZldGNoIiwiSGVhZGVycyIsIlJlcXVlc3QiLCJSZXNwb25zZSIsImlzTmF0aXZlRmV0Y2giLCJmdW5jIiwic3VwcG9ydHNSZWZlcnJlclBvbGljeSIsInJlZmVycmVyUG9saWN5IiwiZnJvbVN0cmluZyIsIkRlYnVnIiwiSW5mbyIsIldhcm5pbmciLCJGYXRhbCIsIkNyaXRpY2FsIiwiTG9nIiwiZ2Vja28iLCJ3aW5qcyIsImdlY2tvRXZhbCIsImNocm9tZUV2YWwiLCJyZWFjdE1pbmlmaWVkUmVnZXhwIiwiY29tcHV0ZVN0YWNrVHJhY2UiLCJleCIsInBvcFNpemUiLCJmcmFtZXNUb1BvcCIsIm9wZXJhMTBSZWdleCIsIm9wZXJhMTFSZWdleCIsImxpbmVzIiwiZWxlbWVudCIsImV4dHJhY3RNZXNzYWdlIiwiY29tcHV0ZVN0YWNrVHJhY2VGcm9tU3RhY2t0cmFjZVByb3AiLCJwb3BGcmFtZXMiLCJzdWJtYXRjaCIsImlzTmF0aXZlIiwiY29sdW1uTnVtYmVyIiwiY29tcHV0ZVN0YWNrVHJhY2VGcm9tU3RhY2tQcm9wIiwiZmFpbGVkIiwiZXhjZXB0aW9uRnJvbVN0YWNrdHJhY2UiLCJwcmVwYXJlRnJhbWVzRm9yRXZlbnQiLCJldmVudEZyb21TdGFja3RyYWNlIiwibG9jYWxTdGFjayIsImZpcnN0RnJhbWVGdW5jdGlvbiIsImxhc3RGcmFtZUZ1bmN0aW9uIiwiZnJhbWUiLCJmdW5jdGlvbiIsImluX2FwcCIsImxpbmVubyIsImV2ZW50RnJvbVVua25vd25JbnB1dCIsImRvbUV4Y2VwdGlvbiIsIm5hbWVfMSIsImV2ZW50RnJvbVN0cmluZyIsInJlamVjdGlvbiIsIl9fc2VyaWFsaXplZF9fIiwiZXZlbnRGcm9tUGxhaW5PYmplY3QiLCJzeW50aGV0aWMiLCJhdHRhY2hTdGFja3RyYWNlIiwic2Vzc2lvblRvU2VudHJ5UmVxdWVzdCIsInNlbnRfYXQiLCJnZXRFbnZlbG9wZUVuZHBvaW50V2l0aFVybEVuY29kZWRBdXRoIiwiZXZlbnRUb1NlbnRyeVJlcXVlc3QiLCJ1c2VFbnZlbG9wZSIsInJlcSIsImdldFN0b3JlRW5kcG9pbnRXaXRoVXJsRW5jb2RlZEF1dGgiLCJlbnZlbG9wZSIsIl9kc25PYmplY3QiLCJnZXRCYXNlQXBpRW5kcG9pbnQiLCJnZXRTdG9yZUVuZHBvaW50IiwiX2dldEluZ2VzdEVuZHBvaW50IiwiX2VuY29kZWRBdXRoIiwiX2dldEVudmVsb3BlRW5kcG9pbnQiLCJnZXRTdG9yZUVuZHBvaW50UGF0aCIsImdldFJlcXVlc3RIZWFkZXJzIiwiY2xpZW50TmFtZSIsImNsaWVudFZlcnNpb24iLCJnZXRSZXBvcnREaWFsb2dFbmRwb2ludCIsImRpYWxvZ09wdGlvbnMiLCJlbmRwb2ludCIsImVuY29kZWRPcHRpb25zIiwic2VudHJ5X2tleSIsInNlbnRyeV92ZXJzaW9uIiwiUHJvbWlzZUJ1ZmZlciIsIl9saW1pdCIsIl9idWZmZXIiLCJpc1JlYWR5IiwidGFzayIsImRyYWluIiwiY2FwdHVyZWRTZXRUaW1lb3V0IiwiQmFzZVRyYW5zcG9ydCIsIl9yYXRlTGltaXRzIiwiX2FwaSIsIl9oYW5kbGVSZXNwb25zZSIsInJlcXVlc3RUeXBlIiwiX2hhbmRsZVJhdGVMaW1pdCIsIl9kaXNhYmxlZFVudGlsIiwiY2F0ZWdvcnkiLCJfaXNSYXRlTGltaXRlZCIsImVfMiIsInJsSGVhZGVyIiwicmFIZWFkZXIiLCJwYXJhbWV0ZXJzIiwiZGVsYXkiLCJfZiIsImVfMl8xIiwiRmV0Y2hUcmFuc3BvcnQiLCJfc2VuZFJlcXVlc3QiLCJzZW50cnlSZXF1ZXN0Iiwib3JpZ2luYWxQYXlsb2FkIiwiZmV0Y2hQYXJhbWV0ZXJzIiwiZmV0Y2giLCJYSFJUcmFuc3BvcnQiLCJnZXRSZXNwb25zZUhlYWRlciIsIkJyb3dzZXJCYWNrZW5kIiwidHJhbnNwb3J0T3B0aW9ucyIsInRyYW5zcG9ydCIsImNhbGxPbkh1YiIsImlnbm9yZU9uRXJyb3IiLCJzaG91bGRJZ25vcmVPbkVycm9yIiwiaWdub3JlTmV4dE9uRXJyb3IiLCJ3cmFwIiwiYmVmb3JlIiwiX19zZW50cnlfd3JhcHBlZF9fIiwic2VudHJ5V3JhcHBlZCIsIndyYXBwZWRBcmd1bWVudHMiLCJoYW5kbGVFdmVudCIsImluamVjdFJlcG9ydERpYWxvZyIsInNjcmlwdCIsImFzeW5jIiwib25Mb2FkIiwib25sb2FkIiwiaGVhZCIsImxhc3RIcmVmIiwiaGFuZGxlcnMiLCJpbnN0cnVtZW50ZWQiLCJpbnN0cnVtZW50Iiwib3JpZ2luYWxDb25zb2xlTGV2ZWwiLCJ0cmlnZ2VySGFuZGxlcnMiLCJpbnN0cnVtZW50Q29uc29sZSIsImRvbUV2ZW50SGFuZGxlciIsImtleXByZXNzRXZlbnRIYW5kbGVyIiwiZXZlbnROYW1lIiwiaW5uZXJPcmlnaW5hbCIsImluc3RydW1lbnRET00iLCJyZXF1ZXN0S2V5cyIsInJlcXVlc3RWYWx1ZXMiLCJ4aHJwcm90byIsIm9yaWdpbmFsT3BlbiIsInhociIsIl9fc2VudHJ5X3hocl9fIiwiX19zZW50cnlfb3duX3JlcXVlc3RfXyIsIm9ucmVhZHlzdGF0ZWNoYW5nZUhhbmRsZXIiLCJzdGF0dXNfY29kZSIsInJlcXVlc3RQb3MiLCJhcmdzXzEiLCJlbmRUaW1lc3RhbXAiLCJzdGFydFRpbWVzdGFtcCIsInJlYWR5U3RhdGVBcmdzIiwib3JpZ2luYWxTZW5kIiwiaW5zdHJ1bWVudFhIUiIsImRvYyIsInNhbmRib3giLCJoaWRkZW4iLCJjb250ZW50V2luZG93IiwicmVtb3ZlQ2hpbGQiLCJzdXBwb3J0c05hdGl2ZUZldGNoIiwib3JpZ2luYWxGZXRjaCIsImhhbmRsZXJEYXRhIiwiZmV0Y2hEYXRhIiwiZ2V0RmV0Y2hNZXRob2QiLCJnZXRGZXRjaFVybCIsImluc3RydW1lbnRGZXRjaCIsImNocm9tZSIsImlzQ2hyb21lUGFja2FnZWRBcHAiLCJhcHAiLCJoYXNIaXN0b3J5QXBpIiwicHVzaFN0YXRlIiwicmVwbGFjZVN0YXRlIiwic3VwcG9ydHNIaXN0b3J5Iiwib2xkT25Qb3BTdGF0ZSIsIm9ucG9wc3RhdGUiLCJoaXN0b3J5UmVwbGFjZW1lbnRGdW5jdGlvbiIsIm9yaWdpbmFsSGlzdG9yeUZ1bmN0aW9uIiwiaW5zdHJ1bWVudEhpc3RvcnkiLCJfb2xkT25FcnJvckhhbmRsZXIiLCJfb2xkT25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVyIiwib251bmhhbmRsZWRyZWplY3Rpb24iLCJhZGRJbnN0cnVtZW50YXRpb25IYW5kbGVyIiwiZmV0Y2hBcmdzIiwia2V5cHJlc3NUaW1lb3V0IiwibGFzdENhcHR1cmVkRXZlbnQiLCJkZWJvdW5jZVRpbWVyIiwiZGVib3VuY2UiLCJpc0NvbnRlbnRFZGl0YWJsZSIsIkJyZWFkY3J1bWJzIiwiZG9tIiwiYWRkU2VudHJ5QnJlYWRjcnVtYiIsIl9jb25zb2xlQnJlYWRjcnVtYiIsIl9kb21CcmVhZGNydW1iIiwiX3hockJyZWFkY3J1bWIiLCJfZmV0Y2hCcmVhZGNydW1iIiwiX2hpc3RvcnlCcmVhZGNydW1iIiwicGFyc2VkTG9jIiwicGFyc2VkRnJvbSIsInBhcnNlZFRvIiwiQnJvd3NlckNsaWVudCIsInNob3dSZXBvcnREaWFsb2ciLCJwbGF0Zm9ybSIsInBhY2thZ2VzIiwiREVGQVVMVF9FVkVOVF9UQVJHRVQiLCJUcnlDYXRjaCIsImV2ZW50VGFyZ2V0IiwiX3dyYXBUaW1lRnVuY3Rpb24iLCJfd3JhcFJBRiIsIl93cmFwWEhSIiwiX3dyYXBFdmVudFRhcmdldCIsIm9yaWdpbmFsQ2FsbGJhY2siLCJvcmlnaW5hbFJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ3cmFwcGVkRXZlbnRIYW5kbGVyIiwib3JpZ2luYWxFdmVudEhhbmRsZXIiLCJ4bWxIdHRwUmVxdWVzdFByb3BzIiwid3JhcE9wdGlvbnMiLCJHbG9iYWxIYW5kbGVycyIsIl9vbkVycm9ySGFuZGxlckluc3RhbGxlZCIsIl9vblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXJJbnN0YWxsZWQiLCJzdGFja1RyYWNlTGltaXQiLCJfaW5zdGFsbEdsb2JhbE9uRXJyb3JIYW5kbGVyIiwiX2luc3RhbGxHbG9iYWxPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIiLCJjdXJyZW50SHViIiwiaGFzSW50ZWdyYXRpb24iLCJpc0ZhaWxlZE93bkRlbGl2ZXJ5IiwiX2V2ZW50RnJvbUluY29tcGxldGVPbkVycm9yIiwiX2VuaGFuY2VFdmVudFdpdGhJbml0aWFsRnJhbWUiLCJfZXZlbnRGcm9tSW5jb21wbGV0ZVJlamVjdGlvbiIsImdyb3VwcyIsIkxpbmtlZEVycm9ycyIsImxpbWl0IiwiX2hhbmRsZXIiLCJsaW5rZWRFcnJvcnMiLCJfd2Fsa0Vycm9yVHJlZSIsIlVzZXJBZ2VudCIsInJlZmVycmVyIiwiUmVmZXJlciIsIndpbmRvd18xIiwiU0VOVFJZX1JFTEVBU0UiLCJhdXRvU2Vzc2lvblRyYWNraW5nIiwiY2xpZW50Q2xhc3MiLCJkZWJ1ZyIsImluaXRBbmRCaW5kIiwibG9hZFJlc29sdmVkIiwiZmNwUmVzb2x2ZWQiLCJwb3NzaWJseUVuZFNlc3Npb24iLCJyZXNvbHZlV2luZG93TG9hZGVkIiwicG8iLCJQZXJmb3JtYW5jZU9ic2VydmVyIiwiZW50cnlMaXN0IiwiZ2V0RW50cmllcyIsImVudHJ5IiwiZmlyc3RIaWRkZW5UaW1lXzEiLCJkaXNjb25uZWN0IiwidmlzaWJpbGl0eVN0YXRlIiwidGltZVN0YW1wIiwib2JzZXJ2ZSIsImJ1ZmZlcmVkIiwic3RhcnRTZXNzaW9uVHJhY2tpbmciLCJpbml0U2VudHJ5IiwiU2VudHJ5IiwiU0VOVFJZX0RTTiIsIkFQUF9WRVJTSU9OIiwiV2Vla1N0YXJ0c09uVHlwZSIsImxvY2FsZXNTdGFydHNXaXRoU3VuZGF5Iiwid2Vla1N0YXJ0c09uIiwibDEwbiIsIlNFVF9MT0NBTEUiLCJTdW4iLCJNb24iLCJzdWdnZXN0cyIsImF2aWFEZXN0aW5hdGlvbiIsIlNFVF9BVklBX1NVR0dFU1QiLCJzdWdnZXN0IiwidHJhbnNmZXJEZXN0aW5hdGlvbiIsIlNFVF9UUkFOU0ZFUl9TVUdHRVNUIiwiZGVzdGluYXRpb24iLCJTRVRfU1VHR0VTVCIsImhvbGlkYXlzIiwiU0VUX0hPTElEQVlTIiwiU0VUX0hPTElEQVlTX0xPQURJTkciLCJ0cnlDb3VudCIsImNvdW50cmllcyIsIlNFVF9DT1VOVFJJRVMiLCJTRVRfTE9BRElORyIsIklOQ19UUllfQ09VTlQiLCJnZXRTdG9yZWRWYWx1ZSIsImRlZmF1bHRWYWx1ZSIsInBvcHVsYXIiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwic2V0Q2l0aXplbnNoaXBIYW5kbGVyIiwiY291bnRyeSIsImNpdGl6ZW5zaGlwIiwiU0VUX0NJVElaRU5TSElQIiwic2V0dGluZ3MiLCJTRVRfU0VUVElOR1MiLCJxdWVyeVNlbGVjdG9yQWxsIiwidGFiYmFibGUiLCJ0YWJiYWJsZU5vZGUiLCJoaWRlc0NvbnRlbnRzIiwiemVyb1NpemUiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsImlubmVySFRNTCIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwic2Nyb2xsV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJmb2N1c2FibGUiLCJpc1RhYkluZGV4Tm90TmFOIiwibm9kZU5hbWUiLCJwYXJlbnRFbGVtZW50IiwidmlzaWJsZSIsImlzVGFiSW5kZXhOYU4iLCJhc3NlcnROb2RlTGlzdCIsInNldEVsZW1lbnQiLCJ1c2VFbGVtZW50IiwiX3NhZmVIVE1MRWxlbWVudCIsImdsb2JhbEVsZW1lbnQiLCJ2YWxpZGF0ZUVsZW1lbnQiLCJoaWRlIiwiYXBwRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImRvY3VtZW50Tm90UmVhZHlPclNTUlRlc3RpbmciLCJyZXNldEZvclRlc3RpbmciLCJfd2FybmluZyIsIl93YXJuaW5nMiIsIm5vZGVMaXN0Iiwic2VsZWN0b3IiLCJwb3J0YWxPcGVuSW5zdGFuY2VzIiwiUG9ydGFsT3Blbkluc3RhbmNlcyIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJyZWdpc3RlciIsIm9wZW5JbnN0YW5jZSIsIm9wZW5JbnN0YW5jZXMiLCJkZXJlZ2lzdGVyIiwic3Vic2NyaWJlcnMiLCJldmVudFR5cGUiLCJzdWJzY3JpYmVyIiwic2V0VGhlbWUiLCJib3JkZXIiLCJzaGFkb3ciLCJhbGVydCIsInN1Y2Nlc3MiLCJUaGVtZSIsIlRIRU1FIiwic2V0VGhlbWVBY3Rpb24iLCJ0aGVtZUFyciIsIlNpemUiLCJnZXREZWZhdWx0U2V0dGluZ3MiLCJtYXJrdXAiLCJQcmljZVNldHRpbmdzT3B0aW9uIiwiUHJpY2VTZXR0aW5ncyIsIkxBUkdFIiwic2V0U2V0dGluZ3MiLCJpc1N1Z2dlc3RlZENvbXBldGl0b3JTZW50Iiwic2V0SXNTdWdnZXN0ZWRDb21wZXRpdG9yU2VudCIsInNldElzTG9hZGluZyIsInN1Z2dlc3RJbnB1dFZhbHVlIiwic2V0U3VnZ2VzdElucHV0VmFsdWUiLCJzdWdnZXN0SW5wdXRIYXNFcnJvciIsInNldFN1Z2dlc3RJbnB1dEhhc0Vycm9yIiwiZm9ybVJlZiIsInVzZUZ1bm5lbCIsInNldEVycm9ycyIsInNldFByaWNlU2V0dGluZ3MiLCJzYXZlZFNldHRpbmdzIiwib25TYWZlU2V0dGluZ3NCdXR0b25DbGljayIsIm5ld1NldHRpbmciLCJwcmV2U2V0dGluZ3MiLCJyZWNlaXZlRXJyb3IiLCJwcmV2RXJyb3JzIiwibGl2ZVNldHRpbmdzIiwiQjJCX1JFQ09NTUVOREVEX01BUktVUCIsIlNNQUxMIiwiTElHSFQiLCJNRURJVU0iLCJjb21wZXRpdG9yU2V0dGluZ3MiLCJvblN1Ym1pdCIsInByZXZlbnREZWZhdWx0IiwiZGlzcGxheSIsIm9uU3VnZ2VzdENvbXBldGl0b3JGb3JtU3VibWl0IiwiSU5QVVRfU0laRSIsIlhTIiwiQlVUVE9OX1NJWkUiLCJPcCIsImhhc093biIsIiRTeW1ib2wiLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJkZWZpbmUiLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJfaW52b2tlIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJtYWtlSW52b2tlTWV0aG9kIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJpbnZva2UiLCJfX2F3YWl0IiwidW53cmFwcGVkIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYWJsZSIsIml0ZXJhdG9yTWV0aG9kIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwiYXdyYXAiLCJpdGVyIiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsIlByb2ZpbGVyIiwicSIsIlN1c3BlbnNlIiwidSIsImZvciIsInciLCJ6IiwiQSIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJCIiwiQyIsInJlZnMiLCJ1cGRhdGVyIiwiRCIsIkUiLCJpc1JlYWN0Q29tcG9uZW50Iiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsIkYiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIkciLCJIIiwiSSIsIl9fc2VsZiIsIl9fc291cmNlIiwiSiIsImgiLCJmIiwiJCR0eXBlb2YiLCJfb3duZXIiLCJMIiwiTiIsIk8iLCJLIiwiUCIsIlEiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsIlIiLCJUIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwidHJhbnNpdGlvbiIsIlJlYWN0Q3VycmVudE93bmVyIiwiSXNTb21lUmVuZGVyZXJBY3RpbmciLCJjb3VudCIsInRvQXJyYXkiLCJvbmx5IiwiUHVyZUNvbXBvbmVudCIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiX2NvbnRleHQiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5IiwiX3BheWxvYWQiLCJfaW5pdCIsInVzZURlYnVnVmFsdWUiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJhYSIsImJhIiwiY2EiLCJkYSIsImVhIiwiZmEiLCJoYSIsImlhIiwiamEiLCJrYSIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwib2EiLCJwYSIsInFhIiwibWEiLCJuYSIsImxhIiwic2V0QXR0cmlidXRlTlMiLCJ4bGlua0hyZWYiLCJyYSIsInNhIiwidGEiLCJ1YSIsIndhIiwieGEiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJNYSIsIkthIiwiTGEiLCJOYSIsIk9hIiwiUGEiLCJwcmVwYXJlU3RhY2tUcmFjZSIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJRYSIsInRhZyIsIl9yZW5kZXIiLCJSYSIsIlNhIiwiVGEiLCJWYSIsIl92YWx1ZVRyYWNrZXIiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVWEiLCJXYSIsIlhhIiwiYWN0aXZlRWxlbWVudCIsIllhIiwiZGVmYXVsdENoZWNrZWQiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJaYSIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCIkYSIsImFiIiwiYmIiLCJjYiIsIm93bmVyRG9jdW1lbnQiLCJlYiIsImRiIiwiZmIiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiaGIiLCJpYiIsImpiIiwia2IiLCJsYiIsIm1iIiwibmIiLCJvYiIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJuYW1lc3BhY2VVUkkiLCJ2YWx1ZU9mIiwiZmlyc3RDaGlsZCIsInBiIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJxYiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJyYiIsInNiIiwidGIiLCJzZXRQcm9wZXJ0eSIsInViIiwibWVudWl0ZW0iLCJhcmVhIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwia2V5Z2VuIiwibWV0YSIsInRyYWNrIiwid2JyIiwidmIiLCJ3YiIsInhiIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwieWIiLCJ6YiIsIkFiIiwiQmIiLCJDYiIsInN0YXRlTm9kZSIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiT2IiLCJQYiIsIlFiIiwiUmIiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJaYiIsImFsdGVybmF0ZSIsImZsYWdzIiwiJGIiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsImFjIiwiY2MiLCJzaWJsaW5nIiwiYmMiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJtYyIsIm5jIiwiTWFwIiwib2MiLCJwYyIsInFjIiwicmMiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwibmF0aXZlRXZlbnQiLCJ0YXJnZXRDb250YWluZXJzIiwic2MiLCJwb2ludGVySWQiLCJ0YyIsInZjIiwid2MiLCJsYW5lUHJpb3JpdHkiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJwcmlvcml0eSIsImh5ZHJhdGUiLCJjb250YWluZXJJbmZvIiwieGMiLCJ5YyIsInNoaWZ0IiwiemMiLCJBYyIsIkJjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiQ2MiLCJEYyIsIkVjIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiRmMiLCJHYyIsIkhjIiwiYW5pbWF0aW9uIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIlFjIiwidW5zdGFibGVfbm93IiwiUmMiLCJVYyIsInBlbmRpbmdMYW5lcyIsImV4cGlyZWRMYW5lcyIsInN1c3BlbmRlZExhbmVzIiwicGluZ2VkTGFuZXMiLCJWYyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsIldjIiwiWGMiLCJZYyIsIlpjIiwiJGMiLCJldmVudFRpbWVzIiwiY2x6MzIiLCJiZCIsImNkIiwiTE4yIiwiZGQiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsImVkIiwiZmQiLCJnZCIsImhkIiwidWMiLCJqZCIsImtkIiwibGQiLCJtZCIsIm5kIiwib2QiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJwZCIsInFkIiwicmQiLCJfcmVhY3ROYW1lIiwiX3RhcmdldEluc3QiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJpc1BlcnNpc3RlbnQiLCJ3ZCIsInhkIiwieWQiLCJzZCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImlzVHJ1c3RlZCIsInRkIiwidWQiLCJ2ZCIsIkFkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInpkIiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIkJkIiwiRGQiLCJkYXRhVHJhbnNmZXIiLCJGZCIsIkhkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIkpkIiwiY2xpcGJvYXJkRGF0YSIsIkxkIiwiTWQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiTmQiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzUiLCIzNiIsIjM3IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwiT2QiLCJBbHQiLCJNZXRhIiwiU2hpZnQiLCJQZCIsIlJkIiwicmVwZWF0Iiwid2hpY2giLCJUZCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJWZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJYZCIsIlpkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCIkZCIsImJlIiwiZG9jdW1lbnRNb2RlIiwiY2UiLCJlZSIsImZlIiwiZ2UiLCJoZSIsImllIiwibGUiLCJjb2xvciIsImRhdGV0aW1lIiwicmFuZ2UiLCJ0ZWwiLCJ3ZWVrIiwibWUiLCJuZSIsIm9lIiwicGUiLCJxZSIsInJlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJ6ZSIsIm9uaW5wdXQiLCJBZSIsImRldGFjaEV2ZW50IiwiQmUiLCJDZSIsImF0dGFjaEV2ZW50IiwiRGUiLCJFZSIsIkZlIiwiSGUiLCJJZSIsIkplIiwiS2UiLCJMZSIsIm5leHRTaWJsaW5nIiwiTmUiLCJIVE1MSUZyYW1lRWxlbWVudCIsIk9lIiwiY29udGVudEVkaXRhYmxlIiwiUGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsIlZlIiwiV2UiLCJYZSIsIlllIiwiWmUiLCJZYiIsIiRlIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJjYXB0dXJlIiwicGFzc2l2ZSIsIk5iIiwiZWYiLCJmZiIsInBhcmVudFdpbmRvdyIsImdmIiwiaGYiLCJqZSIsImNoYXIiLCJrZSIsInVuc2hpZnQiLCJqZiIsImtmIiwibGYiLCJtZiIsImF1dG9Gb2N1cyIsIm5mIiwiX19odG1sIiwib2YiLCJwZiIsInFmIiwicmYiLCJzZiIsInByZXZpb3VzU2libGluZyIsInRmIiwidmYiLCJ3ZiIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIkRmIiwiRWYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJGZiIsIkdmIiwiSGYiLCJJZiIsImdldENoaWxkQ29udGV4dCIsIkpmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsIlFmIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJSZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIlNmIiwiVGYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIlVmIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJWZiIsIldmIiwiWGYiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIllmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiWmYiLCIkZiIsImFnIiwiY2ciLCJkZyIsImVnIiwiZmciLCJnZyIsImhnIiwiaWciLCJqZyIsImtnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJzZyIsImNoaWxkTGFuZXMiLCJ0ZyIsImRlcGVuZGVuY2llcyIsImZpcnN0Q29udGV4dCIsImxhbmVzIiwidWciLCJ2ZyIsIm9ic2VydmVkQml0cyIsInJlc3BvbmRlcnMiLCJ3ZyIsInhnIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInNoYXJlZCIsInBlbmRpbmciLCJlZmZlY3RzIiwieWciLCJ6ZyIsImV2ZW50VGltZSIsImxhbmUiLCJwYXlsb2FkIiwiQWciLCJCZyIsIkNnIiwiRGciLCJFZyIsIkZnIiwiR2ciLCJLZyIsIl9yZWFjdEludGVybmFscyIsIkhnIiwiSWciLCJKZyIsIkxnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiTWciLCJOZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIk9nIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJQZyIsIlFnIiwiX3N0cmluZ1JlZiIsIlJnIiwiU2ciLCJsYXN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0IiwiVGciLCJVZyIsImVsZW1lbnRUeXBlIiwiVmciLCJpbXBsZW1lbnRhdGlvbiIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiZGgiLCJlaCIsImZoIiwiZ2giLCJoaCIsImloIiwibWVtb2l6ZWRQcm9wcyIsInJldmVhbE9yZGVyIiwiamgiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwicGVuZGluZ1Byb3BzIiwicGgiLCJxaCIsInJoIiwic2giLCJ0aCIsInVoIiwiX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnkiLCJ2aCIsIndoIiwieGgiLCJ5aCIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsImJhc2VRdWV1ZSIsIkloIiwiSmgiLCJLaCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJMaCIsIk1oIiwiX2dldFZlcnNpb24iLCJfc291cmNlIiwibXV0YWJsZVJlYWRMYW5lcyIsIk5oIiwiVSIsImdldFNuYXBzaG90Iiwic2V0U25hcHNob3QiLCJPaCIsIlBoIiwiUWgiLCJSaCIsImRlc3Ryb3kiLCJkZXBzIiwiU2giLCJUaCIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiZGkiLCJyZWFkQ29udGV4dCIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZU9wYXF1ZUlkZW50aWZpZXIiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJ1ZiIsImVpIiwiZmkiLCJnaSIsImhpIiwiaWkiLCJqaSIsImtpIiwibGkiLCJtaSIsImJhc2VMYW5lcyIsIm5pIiwib2kiLCJwaSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsInFpIiwicmkiLCJwZW5kaW5nQ29udGV4dCIsIkJpIiwiRGkiLCJFaSIsInNpIiwicmV0cnlMYW5lIiwidGkiLCJmYWxsYmFjayIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwidWkiLCJ1bnN0YWJsZV9leHBlY3RlZExvYWRUaW1lIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwibGFzdCIsInRhaWwiLCJ0YWlsTW9kZSIsIkFpIiwiRmkiLCJHaSIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJvbmNsaWNrIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlVGV4dE5vZGUiLCJWIiwiSGkiLCJJaSIsIlciLCJKaSIsIktpIiwiTGkiLCJNaSIsIk5pIiwiT2kiLCJXZWFrTWFwIiwiUGkiLCJRaSIsIlJpIiwiU2kiLCJjb21wb25lbnREaWRDYXRjaCIsIlRpIiwiY29tcG9uZW50U3RhY2siLCJVaSIsIlZpIiwiV2kiLCJYaSIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiWWkiLCJaaSIsIiRpIiwiZm9jdXMiLCJhaiIsImJqIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImNqIiwiZGoiLCJlaiIsImZqIiwiZ2oiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiaGoiLCJpaiIsImpqIiwia2oiLCJsaiIsIm1qIiwibmoiLCJvaiIsInBqIiwiWCIsIlkiLCJxaiIsInJqIiwic2oiLCJ0aiIsInVqIiwidmoiLCJ3aiIsImNrIiwiWiIsInhqIiwieWoiLCJ6aiIsIkFqIiwiQmoiLCJDaiIsIkRqIiwiRWoiLCJGaiIsIkdqIiwiSGoiLCJJaiIsIkpqIiwiU2MiLCJLaiIsIkxqIiwiTWoiLCJjYWxsYmFja05vZGUiLCJleHBpcmF0aW9uVGltZXMiLCJjYWxsYmFja1ByaW9yaXR5IiwiVGMiLCJOaiIsIk9qIiwiUGoiLCJRaiIsIlJqIiwiU2oiLCJUaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkTGFuZXMiLCJVaiIsInRpbWVvdXRIYW5kbGUiLCJXaiIsIlhqIiwicGluZ0NhY2hlIiwiWWoiLCJaaiIsInZhIiwiYWsiLCJiayIsImRrIiwicmFuZ2VDb3VudCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJlayIsIk1lIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJvbkNvbW1pdEZpYmVyUm9vdCIsImZrIiwiZ2siLCJpayIsInBlbmRpbmdDaGlsZHJlbiIsImprIiwibXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YSIsImtrIiwibGsiLCJtayIsIm5rIiwib2siLCJxayIsImh5ZHJhdGlvbk9wdGlvbnMiLCJtdXRhYmxlU291cmNlcyIsIl9pbnRlcm5hbFJvb3QiLCJyayIsImhhc0F0dHJpYnV0ZSIsInNrIiwidWsiLCJoayIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsInVubW91bnQiLCJmb3JtIiwiVmoiLCJ2ayIsIkV2ZW50cyIsIndrIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInhrIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJ5ayIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsInBlcmZvcm1hbmNlIiwiTWVzc2FnZUNoYW5uZWwiLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwic29ydEluZGV4IiwiZXhwaXJhdGlvblRpbWUiLCJwcmlvcml0eUxldmVsIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiaXNSZXF1aXJlZCIsIlJlYWN0UHJvcFR5cGVzIiwiYm9vbCIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsInNoYXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsImdsb2JhbFRoaXMiLCJDSFJPTUVfU0VORF9NRVNTQUdFX0NBTExCQUNLX05PX1JFU1BPTlNFX01FU1NBR0UiLCJTRU5EX1JFU1BPTlNFX0RFUFJFQ0FUSU9OX1dBUk5JTkciLCJ3cmFwQVBJcyIsImV4dGVuc2lvbkFQSXMiLCJhcGlNZXRhZGF0YSIsIkRlZmF1bHRXZWFrTWFwIiwiY3JlYXRlSXRlbSIsIml0ZW1zIiwic3VwZXIiLCJtYWtlQ2FsbGJhY2siLCJtZXRhZGF0YSIsImNhbGxiYWNrQXJncyIsImxhc3RFcnJvciIsInNpbmdsZUNhbGxiYWNrQXJnIiwicGx1cmFsaXplQXJndW1lbnRzIiwibnVtQXJncyIsIndyYXBNZXRob2QiLCJ3cmFwcGVyIiwiUHJveHkiLCJ0YXJnZXRNZXRob2QiLCJ0aGlzT2JqIiwid3JhcE9iamVjdCIsIndyYXBwZXJzIiwicHJveHlUYXJnZXQiLCJyZWNlaXZlciIsIm1pbkFyZ3MiLCJtYXhBcmdzIiwiZmFsbGJhY2tUb05vQ2FsbGJhY2siLCJjYkVycm9yIiwibm9DYWxsYmFjayIsIndyYXBBc3luY0Z1bmN0aW9uIiwiZGVzYyIsImRlbGV0ZVByb3BlcnR5Iiwid3JhcEV2ZW50Iiwid3JhcHBlck1hcCIsImhhc0xpc3RlbmVyIiwibG9nZ2VkU2VuZFJlc3BvbnNlRGVwcmVjYXRpb25XYXJuaW5nIiwib25NZXNzYWdlV3JhcHBlcnMiLCJzZW5kZXIiLCJzZW5kUmVzcG9uc2UiLCJ3cmFwcGVkU2VuZFJlc3BvbnNlIiwiZGlkQ2FsbFNlbmRSZXNwb25zZSIsInNlbmRSZXNwb25zZVByb21pc2UiLCJpc1Jlc3VsdFRoZW5hYmxlIiwic2VuZFByb21pc2VkUmVzdWx0IiwiX19tb3pXZWJFeHRlbnNpb25Qb2x5ZmlsbFJlamVjdF9fIiwid3JhcHBlZFNlbmRNZXNzYWdlQ2FsbGJhY2siLCJyZXBseSIsIndyYXBwZWRTZW5kTWVzc2FnZSIsImFwaU5hbWVzcGFjZU9iaiIsIndyYXBwZWRDYiIsInN0YXRpY1dyYXBwZXJzIiwib25NZXNzYWdlIiwib25NZXNzYWdlRXh0ZXJuYWwiLCJzZXR0aW5nTWV0YWRhdGEiLCJwcml2YWN5IiwibmV0d29yayIsInNlcnZpY2VzIiwid2Vic2l0ZXMiLCJBeGlvcyIsIm1lcmdlQ29uZmlnIiwiY3JlYXRlSW5zdGFuY2UiLCJpbnN0YW5jZUNvbmZpZyIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJwcm9taXNlcyIsInNwcmVhZCIsImlzQXhpb3NFcnJvciIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImludGVyY2VwdG9ycyIsImludGVyY2VwdG9yIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJnZXRVcmkiLCJ1c2UiLCJlamVjdCIsInRyYW5zZm9ybURhdGEiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidGhyb3dJZlJlcXVlc3RlZCIsImZucyIsIm5vcm1hbGl6ZWROYW1lIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwid3JpdGUiLCJleHBpcmVzIiwic2VjdXJlIiwidG9HTVRTdHJpbmciLCJSZWdFeHAiLCJkZWNvZGVVUklDb21wb25lbnQiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJyZXF1ZXN0ZWRVUkwiLCJyZWxhdGl2ZVVSTCIsImlnbm9yZUR1cGxpY2F0ZU9mIiwicGFyc2VkIiwib3JpZ2luVVJMIiwibXNpZSIsInVybFBhcnNpbmdOb2RlIiwicmVzb2x2ZVVSTCIsImhhc2giLCJwYXRobmFtZSIsInJlcXVlc3RVUkwiLCJyZXNvbHZlUHJvbWlzZSIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiTGF6eSIsIlBvcnRhbCIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImlzVmFsaWRFbGVtZW50VHlwZSIsInR5cGVPZiIsImludmFyaWFudCIsImNvbmRpdGlvbiIsIkVyciIsImJvZHlPcGVuQ2xhc3NOYW1lIiwicG9ydGFsQ2xhc3NOYW1lIiwiX2V4dGVuZHMiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfcmVhY3QiLCJfcmVhY3QyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9yZWFjdERvbTIiLCJfcHJvcFR5cGVzMiIsIl9Nb2RhbFBvcnRhbDIiLCJhcmlhQXBwSGlkZXIiLCJuZXdPYmoiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9zYWZlSFRNTEVsZW1lbnQyIiwiX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdCIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUmVmZXJlbmNlRXJyb3IiLCJpc1JlYWN0MTYiLCJnZXRDcmVhdGVQb3J0YWwiLCJnZXRQYXJlbnRFbGVtZW50IiwicGFyZW50U2VsZWN0b3IiLCJfQ29tcG9uZW50IiwiX3RlbXAiLCJyZW1vdmVQb3J0YWwiLCJwYXJlbnQiLCJwb3J0YWxSZWYiLCJwb3J0YWwiLCJyZW5kZXJQb3J0YWwiLCJkZWZhdWx0U3R5bGVzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX2luaGVyaXRzIiwicHJldlByb3BzIiwicHJldlBhcmVudCIsIm5leHRQYXJlbnQiLCJzbmFwc2hvdCIsIl9wcm9wcyIsImNsb3Nlc0F0IiwiY2xvc2VUaW1lb3V0TVMiLCJiZWZvcmVDbG9zZSIsImNsb3NlV2l0aFRpbWVvdXQiLCJvdmVybGF5IiwiaHRtbE9wZW5DbGFzc05hbWUiLCJhZnRlck9wZW4iLCJvblJlcXVlc3RDbG9zZSIsInNob3VsZEZvY3VzQWZ0ZXJSZW5kZXIiLCJzaG91bGRSZXR1cm5Gb2N1c0FmdGVyQ2xvc2UiLCJwcmV2ZW50U2Nyb2xsIiwiYXJpYSIsImNvbnRlbnRMYWJlbCIsInNob3VsZENsb3NlT25Fc2MiLCJjb250ZW50UmVmIiwiY29udGVudEVsZW1lbnQiLCJjb250ZW50RWwiLCJyaWdodCIsImJvdHRvbSIsImJhY2tncm91bmRDb2xvciIsImJhY2tncm91bmQiLCJXZWJraXRPdmVyZmxvd1Njcm9sbGluZyIsImJvcmRlclJhZGl1cyIsIm91dGxpbmUiLCJwb2x5ZmlsbCIsIl90eXBlb2YiLCJmb2N1c01hbmFnZXIiLCJfc2NvcGVUYWIyIiwiY2xhc3NMaXN0IiwiX3BvcnRhbE9wZW5JbnN0YW5jZXMyIiwiQ0xBU1NfTkFNRVMiLCJhcmlhSGlkZGVuSW5zdGFuY2VzIiwiTW9kYWxQb3J0YWwiLCJzZXRPdmVybGF5UmVmIiwic2V0Q29udGVudFJlZiIsImFmdGVyQ2xvc2UiLCJfdGhpcyRwcm9wcyIsInJldHVybkZvY3VzIiwidGVhcmRvd25TY29wZWRGb2N1cyIsInBvcFdpdGhvdXRGb2N1cyIsIm9uQWZ0ZXJDbG9zZSIsImJlZm9yZU9wZW4iLCJjbG9zZVRpbWVyIiwic2V0dXBTY29wZWRGb2N1cyIsIm1hcmtGb3JGb2N1c0xhdGVyIiwib3ZlcmxheUVsIiwiY2xvc2VXaXRob3V0VGltZW91dCIsImZvY3VzQ29udGVudCIsImNvbnRlbnRIYXNGb2N1cyIsImhhbmRsZUtleURvd24iLCJyZXF1ZXN0Q2xvc2UiLCJoYW5kbGVPdmVybGF5T25DbGljayIsInNob3VsZENsb3NlIiwib3duZXJIYW5kbGVzQ2xvc2UiLCJoYW5kbGVDb250ZW50T25Nb3VzZVVwIiwiaGFuZGxlT3ZlcmxheU9uTW91c2VEb3duIiwiaGFuZGxlQ29udGVudE9uQ2xpY2siLCJoYW5kbGVDb250ZW50T25Nb3VzZURvd24iLCJzaG91bGRCZUNsb3NlZCIsImJ1aWxkQ2xhc3NOYW1lIiwiYWRkaXRpb25hbCIsImF0dHJpYnV0ZXNGcm9tT2JqZWN0IiwicHJlZml4IiwibW92ZUZyb21Db250ZW50VG9PdmVybGF5IiwicHJldlN0YXRlIiwiX3Byb3BzMiIsImNvbnRlbnRTdHlsZXMiLCJvdmVybGF5U3R5bGVzIiwib3ZlcmxheVByb3BzIiwib25Nb3VzZURvd24iLCJjb250ZW50UHJvcHMiLCJvbk1vdXNlVXAiLCJtb2RhbCIsInRlc3RJZCIsImhhbmRsZUJsdXIiLCJoYW5kbGVGb2N1cyIsImZvY3VzTGF0ZXJFbGVtZW50cyIsInRvRm9jdXMiLCJtb2RhbEVsZW1lbnQiLCJfdGFiYmFibGUiLCJfdGFiYmFibGUyIiwibmVlZFRvRm9jdXMiLCJjaGVja1NhZmFyaSIsIndhcm5pbmciLCJFeGVjdXRpb25FbnZpcm9ubWVudCIsImNhblVzZVdvcmtlcnMiLCJXb3JrZXIiLCJjYW5Vc2VFdmVudExpc3RlbmVycyIsImNhblVzZVZpZXdwb3J0Iiwic2NyZWVuIiwiZHVtcENsYXNzTGlzdHMiLCJodG1sQ2xhc3NMaXN0IiwiZG9jQm9keUNsYXNzTGlzdCIsImNsYXNzU3RyaW5nIiwiY2xhc3NMaXN0UmVmIiwicG9sbCIsImluY3JlbWVudFJlZmVyZW5jZSIsImRlY3JlbWVudFJlZmVyZW5jZSIsIl9wb3J0YWxPcGVuSW5zdGFuY2VzIiwiYWZ0ZXIiLCJpbnN0YW5jZXMiLCJjbG9uZU5vZGUiLCJuZXh0UHJvcHMiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWciLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdCIsImZvdW5kV2lsbE1vdW50TmFtZSIsImZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUiLCJmb3VuZFdpbGxVcGRhdGVOYW1lIiwibmV3QXBpTmFtZSIsIm1heWJlU25hcHNob3QiLCJfX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nIiwiU2V0dGluZ3MiLCJvbkxvZ291dCIsIm9uUHJpY2VTZXR0aW5nc0NsaWNrIiwidXNlQmFja2dyb3VuZFJlcXVlc3RIYW5kbGVyIiwiTk9USUZJQ0FUSU9OU19TRVRUSU5HUyIsIm5vdGlmaWNhdGlvbnNTZXR0aW5ncyIsImhhbmRsZU5vdGlmaWNhdGlvbk9wdGlvbkNsaWNrIiwidGFyZ2V0U3RhdGUiLCJleHRlbnNpb25fYnJhbmQiLCJleHRlbnNpb25fdmVyc2lvbiIsInVzZXJfaWQiLCJjb21tYW5kcyIsImhhbmRsZUxvZ291dEJ1dHRvbkNsaWNrIiwiZGF0YS1kdXJhdGlvbiIsImRhdGEtdGFyZ2V0LXN0YXRlIiwiZ2V0RGF0ZU1pbGxpc2Vjb25kc1BhcnQiLCJnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIiwiZGlydHlEYXRlIiwiYmFzZVRpbWV6b25lT2Zmc2V0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJzZXRTZWNvbmRzIiwiTlVNQkVSX0ZPUk1BVF9PUFRJT05TIiwiZ2V0Rm9ybWF0dGVyIiwiZm9ybWF0TnVtYmVyIiwiZm9ybWF0TnVtYmVyVG9QYXJ0cyIsIlJFTEFUSVZFX1RJTUVfRk9STUFUX09QVElPTlMiLCJmb3JtYXRSZWxhdGl2ZVRpbWUiLCJEQVRFX1RJTUVfRk9STUFUX09QVElPTlMiLCJmaWx0ZXJlZE9wdGlvbnMiLCJmb3JtYXREYXRlIiwiZm9ybWF0VGltZSIsIlBMVVJBTF9GT1JNQVRfT1BUSU9OUyIsImZvcm1hdFBsdXJhbCIsInNldFRpbWVab25lSW5PcHRpb25zIiwiZGVlcE1lcmdlT3B0aW9ucyIsIm9wdHMxIiwib3B0czIiLCJkZWVwTWVyZ2VGb3JtYXRzQW5kU2V0VGltZVpvbmUiLCJmMSIsIm1mRm9ybWF0cyIsIm1lc3NhZ2VEZXNjcmlwdG9yIiwiZGVmYXVsdE1lc3NhZ2UiLCJmb3JtYXR0ZWRNZXNzYWdlUGFydHMiLCJyYXdWYWx1ZXMiLCJlc2NhcGVkIiwiTElTVF9GT1JNQVRfT1BUSU9OUyIsImZvcm1hdExpc3QiLCJyaWNoVmFsdWVzIiwic2VyaWFsaXplZFZhbHVlcyIsImdlbmVyYXRlVG9rZW4iLCJESVNQTEFZX05BTUVTX09QVE9OUyIsImZvcm1hdERpc3BsYXlOYW1lIiwic2hhbGxvd0VxdWFscyIsInByb2Nlc3NJbnRsQ29uZmlnIiwiY3JlYXRlSW50bCIsInJlc29sdmVkQ29uZmlnIiwicHJldkNvbmZpZyIsImFkZE1pbGxpc2Vjb25kcyIsImRpcnR5QW1vdW50IiwiYW1vdW50IiwiRXJyb3JNZXNzYWdlIiwiUmVzdG9yZVBhc3N3b3JkIiwic3VibWl0TGFiZWwiLCJzZXRVc2VybmFtZSIsInNldE1lc3NhZ2UiLCJpbnB1dEVtYWlsUmVmIiwiaGFuZGxlVXNlcm5hbWVDaGFuZ2UiLCJoYW5kbGVGb3JtU3VibWl0IiwiQlVUVE9OX1RZUEUiLCJTVUJNSVQiLCJWaWV3IiwiU2lnbkluIiwiaXNBY3RpdmUiLCJzZXRQYXNzd29yZCIsImlucHV0UGFzc3dvcmRSZWYiLCJoYW5kbGVQYXNzd29yZENoYW5nZSIsIlRleHRCdXR0b24iLCJBdXRoIiwib25Ta2lwIiwiaXNSZXN0b3JpbmdQYXNzd29yZCIsInNldFJlc3RvcmluZ1Bhc3N3b3JkU3RhdGUiLCJoYW5kbGVCdXR0b25TaWduVXBDbGljayIsImhhbmRsZVNpZ25JblN1Ym1pdCIsImhhbmRsZUJ1dHRvblJlc3RvcmluZ1Bhc3N3b3JkQ2xpY2siLCJoYW5kbGVCdXR0b25Ta2lwQ2xpY2siLCJwb2xpY3lIcmVmIiwic3RhcnRPZkRheSIsInNldEhvdXJzIiwiZGF0ZVRpbWVzdGFtcFNvdXJjZSIsIm5vd1NlY29uZHMiLCJwbGF0Zm9ybVBlcmZvcm1hbmNlIiwiZ2V0Tm9kZVBlcmZvcm1hbmNlIiwidGltZU9yaWdpbiIsImdldEJyb3dzZXJQZXJmb3JtYW5jZSIsInRpbWVzdGFtcFNvdXJjZSIsImRhdGVUaW1lc3RhbXBJblNlY29uZHMiLCJ0aW1pbmciLCJuYXZpZ2F0aW9uU3RhcnQiLCJCcm93c2VyIiwiX1JlYWN0JENvbXBvbmVudCIsImluaXRpYWxTdGF0dXMiLCJhcHBlYXIiLCJpc01vdW50aW5nIiwiYXBwZWFyU3RhdHVzIiwibW91bnRPbkVudGVyIiwibmV4dENhbGxiYWNrIiwiX3Byb3RvIiwidXBkYXRlU3RhdHVzIiwibmV4dFN0YXR1cyIsImNhbmNlbE5leHRDYWxsYmFjayIsImdldFRpbWVvdXRzIiwibW91bnRpbmciLCJwZXJmb3JtRW50ZXIiLCJwZXJmb3JtRXhpdCIsIl90aGlzMiIsImFwcGVhcmluZyIsIm5vZGVSZWYiLCJtYXliZU5vZGUiLCJtYXliZUFwcGVhcmluZyIsInRpbWVvdXRzIiwiZW50ZXJUaW1lb3V0Iiwic2FmZVNldFN0YXRlIiwib25FbnRlcmVkIiwib25FbnRlciIsIm9uRW50ZXJpbmciLCJvblRyYW5zaXRpb25FbmQiLCJfdGhpczMiLCJvbkV4aXQiLCJvbkV4aXRpbmciLCJvbkV4aXRlZCIsInNldE5leHRDYWxsYmFjayIsIl90aGlzNCIsImRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIiLCJhZGRFbmRMaXN0ZW5lciIsIl9yZWYzIiwibWF5YmVOZXh0Q2FsbGJhY2siLCJUcmFuc2l0aW9uR3JvdXBDb250ZXh0IiwiVU5NT1VOVEVEIiwiRVhJVEVEIiwiRU5URVJJTkciLCJFTlRFUkVEIiwiRVhJVElORyIsIl9wcm9wVHlwZXMiLCJfUG9ydGFsIiwiX3Bvc2l0aW9uIiwiX2Z1bmN0aW9ucyIsIl9vYmplY3RTcHJlYWQiLCJfZ2V0UHJvdG90eXBlT2YiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiX2RlZmluZVByb3BlcnRpZXMiLCJfc2V0UHJvdG90eXBlT2YiLCJzdG9wUHJvcCIsIlRvb2x0aXAiLCJzaG93VGlwIiwiaGFzSG92ZXIiLCJpZ25vcmVTaG93IiwiaGFzQmVlblNob3duIiwiaGlkZVRpcCIsImNoZWNrSG92ZXIiLCJ0b2dnbGVUaXAiLCJzdGFydEhvdmVyIiwiZW5kSG92ZXIiLCJsaXN0ZW5SZXNpemVTY3JvbGwiLCJoYW5kbGVSZXNpemVTY3JvbGwiLCJib2R5VG91Y2hTdGFydCIsImJvZHlUb3VjaEVuZCIsInRhcmdldFRvdWNoU3RhcnQiLCJ0YXJnZXRUb3VjaEVuZCIsImlzQnJvd3NlciIsInNjcm9sbFBhcmVudCIsImdldFNjcm9sbFBhcmVudCIsImRlYm91bmNlVGltZW91dCIsImhvdmVyVGltZW91dCIsInRhcmdldFRvdWNoIiwicm91bmQiLCJ0aXAiLCJvblRvZ2dsZSIsImhvdmVyRGVsYXkiLCJtb3VzZU91dERlbGF5IiwidGlwUG9ydGFsIiwiYXJyb3ciLCJhcnJvd1NpemUiLCJkaXJlY3Rpb24iLCJkaXN0YW5jZSIsImV2ZW50T2ZmIiwiZXZlbnRPbiIsImV2ZW50VG9nZ2xlIiwiZm9yY2VEaXJlY3Rpb24iLCJUYWdOYW1lIiwidGlwQ29udGVudEhvdmVyIiwidGlwQ29udGVudENsYXNzTmFtZSIsInVzZURlZmF1bHRTdHlsZXMiLCJ1c2VIb3ZlciIsImFycm93Q29udGVudCIsImlzQ29udHJvbGxlZEJ5UHJvcHMiLCJwb3J0YWxQcm9wcyIsIm9uVG91Y2hTdGFydCIsIm9uVG91Y2hFbmQiLCJjdXJyZW50UG9zaXRpb25zIiwidGlwU3R5bGVzIiwiYm94U2l6aW5nIiwiYXJyb3dTdHlsZXMiLCJwb3NpdGlvblN0eWxlcyIsImJvcmRlclN0eWxlcyIsInJlYWxEaXJlY3Rpb24iLCJfZGVmYXVsdCIsImdldFNjcm9sbFRvcCIsImdldFNjcm9sbExlZnQiLCJwYWdlWE9mZnNldCIsImdldEFycm93U3BhY2luZyIsImRlZmF1bHRBcnJvd1NwYWNpbmciLCJwYXJlbnRTdHlsZSIsIm92ZXJmbG93WSIsIm92ZXJmbG93WCIsIm5vQXJyb3dEaXN0YW5jZSIsImJvZHlQYWRkaW5nIiwibWluQXJyb3dQYWRkaW5nIiwiYWRkRGF5cyIsInNldERhdGUiLCJnZXREYXRlIiwid2FpdCIsImxlYWRpbmciLCJ0cmFpbGluZyIsImZyZWVHbG9iYWwiLCJmcmVlU2VsZiIsImlzU3ltYm9sIiwicmVUcmltIiwicmVJc0JhZEhleCIsInJlSXNCaW5hcnkiLCJyZUlzT2N0YWwiLCJmcmVlUGFyc2VJbnQiLCJpc0JpbmFyeSIsImdldFJhd1RhZyIsIm9iamVjdFRvU3RyaW5nIiwic3ltVG9TdHJpbmdUYWciLCJ0b0Zpbml0ZSIsInJlbWFpbmRlciIsInRvTnVtYmVyIiwiZXEiLCJpc0FycmF5TGlrZSIsImlzSW5kZXgiLCJiYXNlRmlsbCIsImlzSXRlcmF0ZWVDYWxsIiwiZnVubmVsIiwibmF0aXZlTWF4IiwibmF0aXZlTWluIiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJtYXhpbmciLCJpbnZva2VGdW5jIiwibGVhZGluZ0VkZ2UiLCJ0aW1lckV4cGlyZWQiLCJzaG91bGRJbnZva2UiLCJ0aW1lU2luY2VMYXN0Q2FsbCIsInRyYWlsaW5nRWRnZSIsInRpbWVXYWl0aW5nIiwicmVtYWluaW5nV2FpdCIsImRlYm91bmNlZCIsImlzSW52b2tpbmciLCJiYXNlR2V0VGFnIiwiaXNPYmplY3RMaWtlIiwib2JqZWN0UHJvdG8iLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsImlzT3duIiwidW5tYXNrZWQiLCJ3ZWJwYWNrQ29udGV4dCIsIndlYnBhY2tDb250ZXh0UmVzb2x2ZSIsInRvTGVuZ3RoIiwiYmFzZUNsYW1wIiwibG93ZXIiLCJ1cHBlciIsImlzTGVuZ3RoIiwicmVJc1VpbnQiLCJiYXNlUmFuZ2UiLCJmcm9tUmlnaHQiLCJzdGVwIiwibmF0aXZlQ2VpbCIsIl9yZWFjdERvbSIsInVzZUNyZWF0ZVBvcnRhbCIsImNvbnRhaW5lciIsInJlbmRlckxheWVyIiwiYWxpZ25Nb2RlIiwiZGlyZWN0aW9uQXJyYXkiLCJwYXJzZUFsaWduTW9kZSIsInRyaW1tZWREaXJlY3Rpb24iLCJ0ZXN0QXJyb3dTdHlsZXMiLCJnZXRBcnJvd1N0eWxlcyIsIl9nZXREaXJlY3Rpb24iLCJnZXRUaXBNYXhXaWR0aCIsInNwYWNlciIsImdldFVwRG93blBvc2l0aW9uIiwiZ2V0TGVmdFJpZ2h0UG9zaXRpb24iLCJ0cmFuc2Zvcm0iLCJhcnJvd1NwYWNpbmciLCJ0YXJnZXRSZWN0IiwidGFyZ2V0TGVmdCIsImhhbGZUYXJnZXRXaWR0aCIsInRpcFdpZHRoIiwiYXJyb3dDZW50ZXIiLCJhcnJvd0xlZnQiLCJhcnJvd1JpZ2h0IiwicmlnaHRXaXRoQXJyb3ciLCJyaWdodEVkZ2UiLCJjZW50ZXJlZExlZnQiLCJhdmFpbGFibGVTcGFjZU9uTGVmdCIsInJpZ2h0T3ZlcmhhbmciLCJhcnJvd1BhZGRpbmciLCJ0YXJnZXRUb3AiLCJoYWxmVGFyZ2V0SGVpZ2h0IiwiYXJyb3dUb3AiLCJhcnJvd0JvdHRvbSIsInRvcEZvckJvdHRvbUFsaWduIiwiY2VudGVyZWRUb3AiLCJib3R0b21PdmVyaGFuZyIsImlubmVySGVpZ2h0IiwiYm9yZGVyVG9wIiwiYm9yZGVyQm90dG9tIiwiYm9yZGVyUmlnaHQiLCJib3JkZXJSaWdodFdpZHRoIiwiYm9yZGVyUmlnaHRTdHlsZSIsImJvcmRlckxlZnQiLCJib3JkZXJMZWZ0V2lkdGgiLCJib3JkZXJMZWZ0U3R5bGUiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlclRvcFN0eWxlIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJib3JkZXJCb3R0b21TdHlsZSIsImdldERpcmVjdGlvbiIsImN1cnJlbnREaXJlY3Rpb24iLCJyZWN1cnNpdmUiLCJoZWlnaHRPZlRpcFdpdGhBcnJvdyIsInNwYWNlQmVsb3dUYXJnZXQiLCJzcGFjZUFib3ZlVGFyZ2V0IiwiaGFzU3BhY2VCZWxvdyIsImhhc1NwYWNlQWJvdmUiLCJjaGVja0xlZnRSaWdodFdpZHRoU3VmZmljaWVudCIsImNoZWNrVGFyZ2V0U3VmZmljaWVudGx5VmlzaWJsZSIsImNoZWNrRm9yQXJyb3dPdmVyaGFuZyIsImRlYWRTcGFjZSIsInRvcE92ZXJoYW5nIiwiYXJyb3dDbGVhcmFuY2UiLCJib3R0b21PdmVyaGFuZ0Ftb3VudCIsInRvcE92ZXJoYW5nQW1vdW50IiwiaGFzTGVmdENsZWFyYW5jZSIsImhhc1JpZ2h0Q2xlYXJhbmNlIiwiYWN0aW9ucyIsInNldExvY2FsZSIsIlJlYWN0UmVkdXhDb250ZXh0IiwibnVsbExpc3RlbmVycyIsIm5vdGlmeSIsImNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbiIsImJhdGNoIiwiU3Vic2NyaXB0aW9uIiwicGFyZW50U3ViIiwiaGFuZGxlQ2hhbmdlV3JhcHBlciIsImFkZE5lc3RlZFN1YiIsInRyeVN1YnNjcmliZSIsIm5vdGlmeU5lc3RlZFN1YnMiLCJvblN0YXRlQ2hhbmdlIiwidHJ5VW5zdWJzY3JpYmUiLCJjb250ZXh0VmFsdWUiLCJzdWJzY3JpcHRpb24iLCJwcmV2aW91c1N0YXRlIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsIkVNUFRZX0FSUkFZIiwiTk9fU1VCU0NSSVBUSU9OX0FSUkFZIiwic3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyIiwidXBkYXRlQ291bnQiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3MiLCJlZmZlY3RGdW5jIiwiZWZmZWN0QXJncyIsImNhcHR1cmVXcmFwcGVyUHJvcHMiLCJsYXN0V3JhcHBlclByb3BzIiwibGFzdENoaWxkUHJvcHMiLCJyZW5kZXJJc1NjaGVkdWxlZCIsIndyYXBwZXJQcm9wcyIsImFjdHVhbENoaWxkUHJvcHMiLCJjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlIiwic3Vic2NyaWJlVXBkYXRlcyIsInNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyIsImNoaWxkUHJvcHNTZWxlY3RvciIsImZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2giLCJkaWRVbnN1YnNjcmliZSIsImxhc3RUaHJvd25FcnJvciIsImNoZWNrRm9yVXBkYXRlcyIsIm5ld0NoaWxkUHJvcHMiLCJsYXRlc3RTdG9yZVN0YXRlIiwiaW5pdFN0YXRlVXBkYXRlcyIsImNvbm5lY3RBZHZhbmNlZCIsInNlbGVjdG9yRmFjdG9yeSIsIl9yZWYyJGdldERpc3BsYXlOYW1lIiwiZ2V0RGlzcGxheU5hbWUiLCJfcmVmMiRtZXRob2ROYW1lIiwibWV0aG9kTmFtZSIsIl9yZWYyJHJlbmRlckNvdW50UHJvcCIsInJlbmRlckNvdW50UHJvcCIsIl9yZWYyJHNob3VsZEhhbmRsZVN0YSIsIl9yZWYyJHN0b3JlS2V5Iiwic3RvcmVLZXkiLCJfcmVmMiRmb3J3YXJkUmVmIiwid2l0aFJlZiIsIl9yZWYyJGNvbnRleHQiLCJjb25uZWN0T3B0aW9ucyIsIldyYXBwZWRDb21wb25lbnQiLCJ3cmFwcGVkQ29tcG9uZW50TmFtZSIsInNlbGVjdG9yRmFjdG9yeU9wdGlvbnMiLCJwdXJlIiwidXNlUHVyZU9ubHlNZW1vIiwiQ29ubmVjdEZ1bmN0aW9uIiwiX3VzZU1lbW8iLCJyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmIiwicHJvcHNDb250ZXh0IiwiQ29udGV4dFRvVXNlIiwiZGlkU3RvcmVDb21lRnJvbVByb3BzIiwiY3JlYXRlQ2hpbGRTZWxlY3RvciIsIl91c2VNZW1vMiIsIm92ZXJyaWRkZW5Db250ZXh0VmFsdWUiLCJfdXNlUmVkdWNlciIsInByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQiLCJyZW5kZXJlZFdyYXBwZWRDb21wb25lbnQiLCJDb25uZWN0IiwiZm9yd2FyZGVkIiwic2hhbGxvd0VxdWFsIiwia2V5c0EiLCJrZXlzQiIsIndyYXBNYXBUb1Byb3BzQ29uc3RhbnQiLCJnZXRDb25zdGFudCIsImNvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwid3JhcE1hcFRvUHJvcHNGdW5jIiwicHJveHkiLCJzdGF0ZU9yRGlzcGF0Y2giLCJvd25Qcm9wcyIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsIm1hcFN0YXRlVG9Qcm9wcyIsImRlZmF1bHRNZXJnZVByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJtZXJnZVByb3BzIiwibWVyZ2VkUHJvcHMiLCJhcmVNZXJnZWRQcm9wc0VxdWFsIiwiaGFzUnVuT25jZSIsIm5leHRNZXJnZWRQcm9wcyIsIndyYXBNZXJnZVByb3BzRnVuYyIsImltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImFyZVN0YXRlc0VxdWFsIiwiYXJlT3duUHJvcHNFcXVhbCIsImFyZVN0YXRlUHJvcHNFcXVhbCIsImhhc1J1bkF0TGVhc3RPbmNlIiwiaGFuZGxlU3Vic2VxdWVudENhbGxzIiwibmV4dE93blByb3BzIiwibmV4dFN0YXRlUHJvcHMiLCJzdGF0ZVByb3BzQ2hhbmdlZCIsInByb3BzQ2hhbmdlZCIsInN0YXRlQ2hhbmdlZCIsImZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJpbml0TWFwU3RhdGVUb1Byb3BzIiwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyIsImluaXRNZXJnZVByb3BzIiwiZmFjdG9yaWVzIiwic3RyaWN0RXF1YWwiLCJjcmVhdGVDb25uZWN0IiwiX3JlZiRjb25uZWN0SE9DIiwiY29ubmVjdEhPQyIsIl9yZWYkbWFwU3RhdGVUb1Byb3BzRiIsIm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWFwRGlzcGF0Y2hUb1BybyIsIm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWVyZ2VQcm9wc0ZhY3RvciIsIm1lcmdlUHJvcHNGYWN0b3JpZXMiLCJfcmVmJHNlbGVjdG9yRmFjdG9yeSIsIl9yZWYzJHB1cmUiLCJfcmVmMyRhcmVTdGF0ZXNFcXVhbCIsIl9yZWYzJGFyZU93blByb3BzRXF1YSIsIl9yZWYzJGFyZVN0YXRlUHJvcHNFcSIsIl9yZWYzJGFyZU1lcmdlZFByb3BzRSIsImV4dHJhT3B0aW9ucyIsImNyZWF0ZVN0b3JlSG9vayIsInVzZVJlZHV4Q29udGV4dCIsIm5ld0JhdGNoIiwibW9iaWxlIiwidGFibGV0IiwiZGVza3RvcCIsImludGVybmFsRmV0Y2giLCJjcmVkZW50aWFscyIsInNldFN1Z2dlc3QiLCJsb2FkU3VnZ2VzdCIsImdldFN0b3JlIiwianNvbiIsInBhcnNlU3VnZ2VzdCIsInJlZ2lvbnMiLCJwYXJzZVJlZ2lvbiIsInJlZ2lvbiIsImhvdGVscyIsInBhcnNlSG90ZWwiLCJob3RlbCIsImNvdW50cnlDb2RlIiwiY291bnRyeU5hbWUiLCJob3RlbEFkZHJlc3MiLCJob3RlbEtpbmQiLCJpc05hdGRpc0NyaXRpY2FsIiwibWFzdGVySWQiLCJyZWdpb25JZCIsInJlZ2lvbk5hbWUiLCJzbHVnIiwicGFyc2VTbHVnIiwibXVsdGljb21wbGV0ZVR5cGUiLCJpYXRhIiwic3VicmVnaW9uIiwicGF0dGVybnMiLCJkYXRlVGltZURlbGltaXRlciIsInRpbWVab25lRGVsaW1pdGVyIiwidGltZXpvbmUiLCJkYXRlUmVnZXgiLCJ0aW1lUmVnZXgiLCJ0aW1lem9uZVJlZ2V4IiwicGFyc2VJU08iLCJkaXJ0eU9wdGlvbnMiLCJhZGRpdGlvbmFsRGlnaXRzIiwiZGF0ZVN0cmluZ3MiLCJzcGxpdERhdGVTdHJpbmciLCJwYXJzZVllYXJSZXN1bHQiLCJwYXJzZVllYXIiLCJwYXJzZURhdGUiLCJyZXN0RGF0ZVN0cmluZyIsInBhcnNlVGltZSIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsInNldEZ1bGxZZWFyIiwicGFyc2VUaW1lem9uZSIsImRhdGVTdHJpbmciLCJ0aW1lU3RyaW5nIiwicmVnZXgiLCJjYXB0dXJlcyIsImNlbnR1cnkiLCJpc1dlZWtEYXRlIiwiZGF5T2ZZZWFyIiwicGFyc2VEYXRlVW5pdCIsImRheU9mV2VlayIsIl95ZWFyIiwidmFsaWRhdGVXZWVrRGF0ZSIsImlzb1dlZWtZZWFyIiwic2V0VVRDRnVsbFllYXIiLCJmb3VydGhPZkphbnVhcnlEYXkiLCJnZXRVVENEYXkiLCJkaWZmIiwic2V0VVRDRGF0ZSIsImRheU9mSVNPV2Vla1llYXIiLCJkYXlzSW5Nb250aHMiLCJpc0xlYXBZZWFySW5kZXgiLCJ2YWxpZGF0ZURhdGUiLCJ2YWxpZGF0ZURheU9mWWVhckRhdGUiLCJob3VycyIsInBhcnNlVGltZVVuaXQiLCJtaW51dGVzIiwic2Vjb25kcyIsInZhbGlkYXRlVGltZSIsInRpbWV6b25lU3RyaW5nIiwic2lnbiIsIl9ob3VycyIsInZhbGlkYXRlVGltZXpvbmUiLCJzZXRMb2FkaW5nIiwibG9hZEhvbGlkYXlzIiwicGFyc2VIb2xpZGF5cyIsInNldEhvbGlkYXlzIiwibG9hZCIsInBhcnNlQ291bnRyaWVzIiwic2V0Q291bnRyaWVzIiwic2V0Q2l0aXplbnNoaXAiLCJzZXRJdGVtIiwiUmVkdXhlZCIsImFkZE1vbnRocyIsImRheU9mTW9udGgiLCJlbmRPZkRlc2lyZWRNb250aCIsInNldE1vbnRoIiwiZ2V0TW9udGgiLCJkYXlzSW5Nb250aCIsImdldEZ1bGxZZWFyIiwiZ2V0Qm91bmRzIiwicm9vdEVsZW1lbnQiLCJhYnNvbHV0ZVRvcCIsImFic29sdXRlQm90dG9tIiwiYWJzb2x1dGVMZWZ0IiwiYWJzb2x1dGVSaWdodCIsImdldEJvdW5kc0FycmF5IiwiYm91bmRzIiwidXNlQm91bmRzIiwic2Nyb2xsaW5nRWxlbWVudCIsInNldEJvdW5kcyIsImlzRGVza3RvcFVwIiwiQXJyb3dEb3duIiwiQ2xpY2tPdXRzaWRlIiwib25DbGlja091dHNpZGUiLCJ0b3VjaEV2ZW50IiwidG91Y2hDYXB0dXJlUHJvcCIsImlzQ2xpY2tlZEluc2lkZSIsImhhbmRsZURvY3VtZW50Q2xpY2siLCJpc1NhbWVNb250aCIsImRpcnR5RGF0ZUxlZnQiLCJkaXJ0eURhdGVSaWdodCIsImRhdGVMZWZ0IiwiZGF0ZVJpZ2h0Iiwic3RhcnRPZk1vbnRoIiwiZ2V0TW9udGhzIiwibW9udGhzIiwiZmlyc3RNb250aCIsIm1vbnRoc0NvdW50IiwieWVhckRpZmYiLCJtb250aERpZmYiLCJkaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRocyIsIm1vbnRoTmFtZU1lc3NhZ2UiLCJqYW51YXJ5IiwiZmVicnVhcnkiLCJtYXJjaCIsImFwcmlsIiwibWF5IiwianVuZSIsImp1bHkiLCJhdWd1c3QiLCJzZXB0ZW1iZXIiLCJvY3RvYmVyIiwibm92ZW1iZXIiLCJkZWNlbWJlciIsIk1PTlRIX05BTUVfTUVTU0FHRVMiLCJnZXRNb250aE5hbWVNZXNzYWdlIiwiY29ubmVjdCIsIm1vbnRoSW5kZXgiLCJzaG91bGRTaG93WWVhciIsInNjcm9sbFRvTW9udGgiLCJNb250aHNMaXN0Iiwic2Nyb2xsVmlldyIsInNob3VsZFNjcm9sbFJlZiIsInVuZGVybGF5U3R5bGUiLCJ1bmRlcmxheVJlZiIsIndyYXBwZXJSZWYiLCJ1bmRlcmxheSIsInVuZGVybGF5VG9wIiwib2Zmc2V0VG9wIiwidW5kZXJsYXlCb3R0b20iLCJjbGllbnRIZWlnaHQiLCJ3cmFwcGVyVG9wIiwiaXNVbmRlcmxheUFib3ZlIiwiaXNKYW51YXJ5IiwiZW5kT2ZEYXkiLCJpc1dpdGhpbkludGVydmFsIiwiZGlydHlJbnRlcnZhbCIsImVuZFRpbWUiLCJzdGFydE9mV2VlayIsImxvY2FsZVdlZWtTdGFydHNPbiIsImRlZmF1bHRXZWVrU3RhcnRzT24iLCJnZXREYXkiLCJhZGRXZWVrcyIsImRheXMiLCJpc1NhbWVEYXkiLCJkYXRlTGVmdFN0YXJ0T2ZEYXkiLCJkYXRlUmlnaHRTdGFydE9mRGF5IiwiYXJlSW50ZXJ2YWxzT3ZlcmxhcHBpbmciLCJkaXJ0eUludGVydmFsTGVmdCIsImRpcnR5SW50ZXJ2YWxSaWdodCIsImludGVydmFsTGVmdCIsImludGVydmFsUmlnaHQiLCJsZWZ0U3RhcnRUaW1lIiwibGVmdEVuZFRpbWUiLCJyaWdodFN0YXJ0VGltZSIsInJpZ2h0RW5kVGltZSIsImluY2x1c2l2ZSIsIk1FTU9fUEFSQU1FVEVSIiwiRGF5IiwibG9ja2VkIiwiaG9saWRheSIsImVkZ2VEYXkiLCJ3aXRoTGVmdFJhZGl1cyIsIndpdGhSaWdodFJhZGl1cyIsImRhdGEtZGF5IiwiYXJlRXF1YWwiLCJwcm9wc0xpc3QiLCJXZWVrIiwicmFuZ2VTdGFydCIsInJhbmdlRW5kIiwiZmlyc3REYXkiLCJkYXlTdGFydCIsImlzUmFuZ2VGaXJzdERheSIsImlzUmFuZ2VMYXN0RGF5IiwiaXNSYW5nZUVkZ2VEYXkiLCJpc1dlZWtGaXJzdERheSIsImlzV2Vla0xhc3REYXkiLCJpc01vbnRoRmlyc3REYXkiLCJpc01vbnRoTGFzdERheSIsImxhc3REYXlPZk1vbnRoIiwiZ2V0RGF5c0luTW9udGgiLCJpc1NlbGVjdGVkIiwiaXNFcXVhbCIsIm9sZFByb3BzIiwibmV3UHJvcHMiLCJpc1N0YXJ0U2VsZWN0aW9uIiwiaXNFbmRTZWxlY3Rpb24iLCJ3ZWVrU3RhcnQiLCJ3ZWVrRW5kIiwiZW5kT2ZXZWVrIiwiaXNPbGRSYW5nZU92ZXJsYXAiLCJpc05ld1JhbmdlT3ZlcmxhcCIsInNldE1vbnRoT2Zmc2V0IiwiaXNGYWtlIiwid2Vla3MiLCJsYXN0RGF5IiwiZmlyc3RXZWVrIiwid2Vla3NDb3VudCIsInN0YXJ0T2ZXZWVrTGVmdCIsInN0YXJ0T2ZXZWVrUmlnaHQiLCJ0aW1lc3RhbXBMZWZ0IiwidGltZXN0YW1wUmlnaHQiLCJkaWZmZXJlbmNlSW5DYWxlbmRhcldlZWtzIiwibW9udGhSZWYiLCJnZXRNb250aE9mZnNldCIsImdldFdlZWtkYXkiLCJkYXRlSW5QYXN0IiwiZGF0ZUJlZm9yZUNoZWNraW4iLCJkYXRlQmVmb3JlRGVwYXJ0dXJlIiwiZGF0ZUlzT3V0T2ZSYW5nZSIsIkdyaWQiLCJsaW1pdEZyb20iLCJsaW1pdFRvIiwibWF4UmFuZ2UiLCJhbGxvd09uZURheVJhbmdlIiwic2VsZWN0UmFuZ2VFbmQiLCJzdG9wU2VsZWN0Iiwib25SYW5nZUNoYW5nZSIsInNldFNjcm9sbFZpZXciLCJtb250aHNPZmZzZXRzIiwiaXNBdmlhIiwic2Nyb2xsUmVmIiwiaG92ZXJlZERheSIsInNldEhvdmVyZWREYXkiLCJzaG93ZWRGcm9tIiwic2hvd2VkVG8iLCJyZWFsVG8iLCJkaXJ0eURhdGVzQXJyYXkiLCJkYXRlc0FycmF5IiwiY3VycmVudERhdGUiLCJzaG93ZWRSYW5nZVN0YXJ0Iiwic2hvd2VkUmFuZ2VFbmQiLCJpc0luQXZhaWxhYmxlUmFuZ2UiLCJmaXJzdFJlbmRlcmVkTW9udGgiLCJzZXRGaXJzdFJlbmRlcmVkTW9udGgiLCJvbkRheU1vdXNlRW50ZXIiLCJ1cGRhdGVIb3ZlcmVkRGF5Iiwib25EYXlNb3VzZUxlYXZlIiwidXBkYXRlU2Nyb2xsVmlldyIsInZhbGlkYXRlRGF5U2V0IiwibmV3UmFuZ2VTdGFydCIsIm5ld1JhbmdlRW5kIiwiaXNTdGFydEFmdGVyRW5kIiwibmV3UmFuZ2UiLCJzdGFydE9mRGF5TGVmdCIsInN0YXJ0T2ZEYXlSaWdodCIsImRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyIsImlzTW9yZVRoZW5NYXhSYW5nZSIsIm9uRGF5Q2xpY2siLCJvblNjcm9sbCIsImdldFllYXIiLCJDYWxlbmRhciIsInNob3VsZFNjcm9sbE1vbnRoc0xpc3RSZWYiLCJfc2Nyb2xsVG9Nb250aCIsIl9zZXRNb250aE9mZnNldCIsIl9zZXRTY3JvbGxWaWV3IiwibmV3U2Nyb2xsVmlldyIsImZpbmRJbmRleCIsInNjcm9sbFRvIiwiYmVoYXZpb3IiLCJQb3B1cCIsIkNvbnRyb2xHcm91cCIsInZlcnRpY2FsIiwidmVydGljYWxHbG9iYWxDbGFzcyIsIk1vYmlsZVN1Z2dlc3QiLCJjb250cm9sIiwiaG9saWRheXNBY3Rpb25zIiwibGFiZWxGcm9tIiwibGFiZWxUbyIsImlzUmFuZ2VTZWxlY3QiLCJpc0RlbW8iLCJzZWFyY2hGb3JtUmVmIiwibm9TY3JvbGxDbGFzcyIsInNldFN0YXJ0U2VsZWN0aW9uIiwic2V0RW5kU2VsZWN0aW9uIiwiaXNDYWxlbmRhclZpc2libGUiLCJzY3JvbGxGb3JtIiwic2Nyb2xsSW50b1ZpZXciLCJzZWxlY3RSYW5nZVN0YXJ0Iiwic2hvdWxkU2Nyb2xsIiwidG9nZ2xlUmFuZ2VTdGFydCIsInRvZ2dsZVJhbmdlRW5kIiwiY2FsZW5kYXIiLCJwb3B1cFN0eWxlcyIsImRheUFuZE1vbnRoIiwiSE9URUxfVFlQRSIsIlJFR0lPTl9UWVBFIiwidHlwZTJpY29uTWFwIiwiaG90ZWxJY29uIiwiY2FtcGluZ0ljb24iLCJjYXN0bGVJY29uIiwiY290dGFnZUljb24iLCJhaXJwb3J0SWNvbiIsImJ1c1N0YXRpb25JY29uIiwiY2l0eUljb24iLCJzdGF0ZUljb24iLCJkaXN0cmljdEljb24iLCJ1bml2ZXJzYWxQb2lJY29uIiwicmFpbHdheVN0YXRpb25JY29uIiwic3RyZWV0SWNvbiIsIm1ldHJvSWNvbiIsImdldEljb24iLCJkZXN0aW5hdGlvblR5cGUiLCJSZWdpb24iLCJiYWNrZ3JvdW5kSW1hZ2UiLCJIb3RlbCIsIlN1Z2dlc3QiLCJhY3RpdmVJdGVtIiwic2V0QWN0aXZlSXRlbSIsImNsb3NlU3VnZ2VzdCIsIm9uSW5wdXRDaGFuZ2UiLCJzZXRWYWx1ZUZyb21TdWdnZXN0IiwiYWN0aXZlU3VnZ2VzdEl0ZW0iLCJzZXRBY3RpdmVTdWdnZXN0SXRlbSIsInNldFNlbGVjdGlvblJhbmdlIiwiY2xpY2tJbnNpZGVIYW5kbGVyIiwidGhyb3R0bGUiLCJkZXN0aW5hdGlvbkFjdGlvbnMiLCJzZXRJbnB1dFJlZiIsImlucHV0RWwiLCJuZWVkU2hvd1N1Z2dlc3QiLCJzZXRTaG93U3VnZ2VzdCIsImdldFZhbHVlTGFiZWwiLCJzZXRRdWVyeSIsInNlbGVjdGVkVmFsdWUiLCJzZXRTZWxlY3RlZFZhbHVlIiwic3VnZ2VzdEl0ZW1zQ291bnQiLCJpc1N1Z2dlc3RWaXNpYmxlIiwiaGlkZVN1Z2dlc3QiLCJibHVyIiwidXBkYXRlQXJyYXlJdGVtIiwibmV3SXRlbSIsImd1ZXN0c1JlZHVjZXIiLCJhZGRSb29tIiwicm9vbUluZGV4IiwicmVtb3ZlUm9vbSIsInVwZGF0ZWRSb29tIiwic2V0QWR1bHRzIiwib2xkUm9vbSIsIm9sZEtpZHMiLCJ1cGRhdGVkS2lkcyIsInNldEtpZHMiLCJraWRJbmRleCIsImFnZSIsInNldEtpZEFnZSIsIlBsdXMiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsIlNlbGVjdCIsInNlbGVjdFJlZiIsImNsZWFuZWQiLCJmb3JtYXRWYWx1ZSIsImNhbmNlbGxhYmxlIiwiaXNBcnJvd0Rpc2FibGVkIiwidXNlU3RvcmUiLCJnZXRUZXh0IiwiaW5wdXRJY29uIiwiZGlzcGF0Y2hFdmVudCIsInJhd1ZhbHVlIiwiQ291bnRlciIsInJvb21OdW1iZXIiLCJhZHVsdHNMYWJlbCIsImtpZHNMYWJlbCIsImtpZEFnZSIsImtpZHNBZ2VzIiwiUm9vbSIsInJvb20iLCJzZXRBZHVsdHNDb3VudCIsInNldEtpZHNDb3VudCIsImNhblJlbW92ZVJvb20iLCJwbHVzUm9vbUJ0biIsImJvb2tNb3JlQnRuIiwiZG9uZUJ0biIsIkZvcm0iLCJyb29tcyIsImNsb3NlRm9ybSIsImlzQjJCIiwiaXNNYXhpbXVtUm9vbXMiLCJpc011bHRpcm9vbSIsInNob3VsZFNjcm9sbFRvQm90dG9tIiwic2V0U2hvdWxkU2Nyb2xsVG9Cb3R0b20iLCJhZGRSb29tSGFuZGxlciIsInJvb21zQ291bnQiLCJndWVzdHNDb3VudCIsIm5lZWRTaG93Rm9ybSIsIkd1ZXN0cyIsInBvcHVwUmVmIiwic2V0U2hvd0Zvcm0iLCJfY2xvc2VGb3JtIiwic2hvd0Zvcm0iLCJEZWZhdWx0Q2hlY2tib3giLCJ0b29sdGlwIiwiZGF0YS1wb3B1bmRlciIsIkJ1dHRvbkNoZWNrYm94IiwiQ2hlY2tib3giLCJCVVRUT04iLCJJbnB1dFJhZGlvIiwibm90ZSIsInRvb2x0aXBQb3NpdGlvbiIsImh0bWxGb3IiLCJSYWRpbyIsIlJhZGlvR3JvdXAiLCJvcHRpb24iLCJ0b3VyaXNtIiwiYnVzaW5lc3MiLCJjb21wYXJlUHJpY2VzIiwiQjJDRXh0cmEiLCJzaG91bGRTaG93Q29tcGFyZXRvIiwib25Db21wYXJldG9DaGFuZ2UiLCJjb21wYXJldG9WYWx1ZSIsInRyaXBUeXBlIiwic2V0VHJpcFR5cGUiLCJjb21wYXJldG8iLCJzZXRDb21wYXJldG8iLCJ1c2VGaWx0ZXJlZExpc3QiLCJzaG93RnVsbExpc3QiLCJmaWx0ZXJGbiIsInByZXBhcmVkUXVlcnkiLCJmaWx0ZXJlZENvdW50cmllcyIsIkNvdW50cnkiLCJDb3VudHJ5TWVtb2l6ZWQiLCJpc0VxdWFsQ291bnRyeSIsInN1Z2dlc3RMaXN0IiwiaXNTZXBhcmF0b3IiLCJsYWJlbFJlcXVpcmVkIiwicG9wdWxhckNvdW50cmllcyIsImNvdW50cmllc0FjdGlvbnMiLCJjaXRpemVuc2hpcEFjdGlvbnMiLCJpc0NpdGl6ZW5zaGlwUmVxdWlyZWQiLCJuZWVkU2hvd0Vycm9ycyIsInNldFNob3dGdWxsTGlzdCIsImZpbHRlcmVkUG9wdWxhckNvdW50cmllcyIsInByZXBhcmVDb3VudHJ5IiwiYXJyb3dDbGFzc05hbWUiLCJnZXRWYWx1ZUJ5Q29kZSIsIkNoZWNrYm94R3JvdXAiLCJvbkNoZWNrYm94Q2hhbmdlIiwiaXNDaGVja2VkIiwibmV3VmFsIiwiZWFybHlDaGVja2luIiwibGF0ZUNoZWNrb3V0Iiwic2VsZWN0VGltZSIsIkVDTEMiLCJzZXRFYXJseUNoZWNraW4iLCJzZXRMYXRlQ2hlY2tvdXQiLCJ0aW1lcyIsImVjbGNUaW1lc0xpc3QiLCJjaGVja2luVGltZXMiLCJjaGVja291dFRpbWVzIiwicm9vbU9ubHkiLCJicmVha2Zhc3QiLCJoYWxmQm9hcmQiLCJmdWxsQm9hcmQiLCJhbGxJbmNsdXNpdmUiLCJmcmVlQ2FuY2VsbGF0aW9uIiwiQjJCRXh0cmEiLCJzZXRGcmVlQ2FuY2VsbGF0aW9uIiwibWVhbHMiLCJzZXRNZWFscyIsImlzRWNsY1NlYXJjaEVuYWJsZWQiLCJleHRyYVBhcmFtcyIsIkV4dHJhUGFyYW1zU3dpdGNoZXIiLCJzaG93RXh0cmFQYXJhbXMiLCJzZXRTaG93RXh0cmFQYXJhbXMiLCJkZW1vU2VhcmNoIiwiY2hlY2tpbiIsImNoZWNrb3V0IiwiQ29ubmVjdGVkU2VhcmNoRm9ybSIsImNpdGl6ZW5zaGlwVmFsdWUiLCJsb2FkQ2l0aXplbnNoaXBzIiwicmVnaW9uVmFsdWUiLCJyb29tc1ZhbHVlIiwiZnJvbVZhbHVlIiwidG9WYWx1ZSIsImVhcmx5Q2hlY2tpblZhbHVlIiwibGF0ZUNoZWNrb3V0VmFsdWUiLCJmcmVlQ2FuY2VsbGF0aW9uVmFsdWUiLCJtZWFsc1ZhbHVlIiwiaGlkZURlc3RpbmF0aW9uIiwiaXNOYXJyb3ciLCJpc0V4dGVuc2lvbiIsInNldE5lZWRTaG93RXJyb3JzIiwiYWRkWWVhcnMiLCJzZXRSYW5nZVN0YXJ0Iiwic2V0UmFuZ2VFbmQiLCJzZXRSZWdpb24iLCJzZXRHdWVzdHMiLCJkZXN0aW5hdGlvbklucHV0UmVmIiwic2V0RGVzdGluYXRpb25JbnB1dFJlZiIsIm5hcnJvdyIsImlzTmVlZENpdGl6ZW5zaGlwIiwiV3JhcHBlZFNlYXJjaEZvcm0iLCJBdXRoTWVzc2FnZXMiLCJMYW5ndWFnZU1lc3NhZ2VzIiwiU2V0dGluZ3NNZXNzYWdlcyIsIlNpZ25Jbk1lc3NhZ2VzIiwiUHJpY2VTZXR0aW5nc01lc3NhZ2VzIiwiaXNGaXJlZm94IiwiRklSRUZPWCIsInBlcnNpc3RlZExhbmd1YWdlIiwiUEFSVE5FUlNfQVVUSF9LRVkiLCJwYXJ0bmVyc0F1dGhLZXkiLCJub1JhdGUiLCJGYWlsdXJlTWVzc2FnZSIsImlzTG9nZ2VkIiwic2V0TG9nZ2VkU3RhdGUiLCJpc1ByaWNlU2V0dGluZ3NWaXNpYmxlIiwic2V0SXNQcmljZVNldHRpbmdzVmlzaWJsZSIsImwxMG5BY3Rpb25zIiwiY3VycmVudFRhYiIsImNvbXBldGl0b3JfcHJpY2UiLCJwcmljZU9sZCIsIm9zdHJvdm9rX2Jhcl9wcmljZSIsIm9zdHJvdm9rX2N1ciIsIm9zdHJvdm9rX25ldF9wcmljZSIsIm90YWhvdGVsX2lkIiwicHJpY2VTZXR0aW5nc1NpemUiLCJoYW5kbGVTZWFyY2hGb3JtU3VibWl0IiwicVBhcmFtIiwiZnJvbVBhcmFtIiwidG9QYXJhbSIsImd1ZXN0c1BhcmFtIiwic2VhcmNoUGFyYW1zIiwibW9kaWZpZWRIb3N0TmFtZSIsImlzVmFsaWQiLCJmb3JtYXREaXN0YW5jZUxvY2FsZSIsImxlc3NUaGFuWFNlY29uZHMiLCJvbmUiLCJ4U2Vjb25kcyIsImhhbGZBTWludXRlIiwibGVzc1RoYW5YTWludXRlcyIsInhNaW51dGVzIiwiYWJvdXRYSG91cnMiLCJ4SG91cnMiLCJ4RGF5cyIsImFib3V0WFdlZWtzIiwieFdlZWtzIiwiYWJvdXRYTW9udGhzIiwieE1vbnRocyIsImFib3V0WFllYXJzIiwieFllYXJzIiwib3ZlclhZZWFycyIsImFsbW9zdFhZZWFycyIsImJ1aWxkRm9ybWF0TG9uZ0ZuIiwiZGVmYXVsdFdpZHRoIiwiZm9ybWF0TG9uZyIsImZvcm1hdFJlbGF0aXZlTG9jYWxlIiwibGFzdFdlZWsiLCJ5ZXN0ZXJkYXkiLCJ0b2RheSIsInRvbW9ycm93IiwibmV4dFdlZWsiLCJidWlsZExvY2FsaXplRm4iLCJkaXJ0eUluZGV4IiwidmFsdWVzQXJyYXkiLCJmb3JtYXR0aW5nVmFsdWVzIiwiZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCIsIl9kZWZhdWx0V2lkdGgiLCJfd2lkdGgiLCJhcmd1bWVudENhbGxiYWNrIiwiYnVpbGRNYXRjaEZuIiwiZGlydHlTdHJpbmciLCJtYXRjaFBhdHRlcm4iLCJtYXRjaFBhdHRlcm5zIiwiZGVmYXVsdE1hdGNoV2lkdGgiLCJtYXRjaFJlc3VsdCIsIm1hdGNoZWRTdHJpbmciLCJwYXJzZVBhdHRlcm5zIiwiZGVmYXVsdFBhcnNlV2lkdGgiLCJwcmVkaWNhdGUiLCJmaW5kS2V5IiwidmFsdWVDYWxsYmFjayIsImZvcm1hdERpc3RhbmNlIiwiYWRkU3VmZml4IiwiY29tcGFyaXNvbiIsImZvcm1hdFJlbGF0aXZlIiwiX2RhdGUiLCJfYmFzZURhdGUiLCJsb2NhbGl6ZSIsIm9yZGluYWxOdW1iZXIiLCJfZGlydHlPcHRpb25zIiwicmVtMTAwIiwiYWJicmV2aWF0ZWQiLCJxdWFydGVyIiwiZGF5UGVyaW9kIiwiYW0iLCJwbSIsIm1pZG5pZ2h0Iiwibm9vbiIsIm1vcm5pbmciLCJhZnRlcm5vb24iLCJldmVuaW5nIiwibmlnaHQiLCJwYXJzZVBhdHRlcm4iLCJwYXJzZVJlc3VsdCIsImZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsInN1Yk1pbGxpc2Vjb25kcyIsImFkZExlYWRpbmdaZXJvcyIsInRhcmdldExlbmd0aCIsImFicyIsInNpZ25lZFllYXIiLCJkYXlQZXJpb2RFbnVtVmFsdWUiLCJudW1iZXJPZkRpZ2l0cyIsIm1pbGxpc2Vjb25kcyIsInBvdyIsInN0YXJ0T2ZVVENJU09XZWVrIiwic2V0VVRDSG91cnMiLCJnZXRVVENJU09XZWVrWWVhciIsImZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIiLCJzdGFydE9mTmV4dFllYXIiLCJmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyIiwic3RhcnRPZlRoaXNZZWFyIiwic3RhcnRPZlVUQ0lTT1dlZWtZZWFyIiwiZm91cnRoT2ZKYW51YXJ5Iiwic3RhcnRPZlVUQ1dlZWsiLCJnZXRVVENXZWVrWWVhciIsImxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsImRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUiLCJmaXJzdFdlZWtPZk5leHRZZWFyIiwiZmlyc3RXZWVrT2ZUaGlzWWVhciIsInN0YXJ0T2ZVVENXZWVrWWVhciIsImRheVBlcmlvZEVudW0iLCJmb3JtYXRUaW1lem9uZVNob3J0IiwiZGlydHlEZWxpbWl0ZXIiLCJhYnNPZmZzZXQiLCJmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXMiLCJmb3JtYXRUaW1lem9uZSIsImxpZ2h0Rm9ybWF0dGVycyIsInNpZ25lZFdlZWtZZWFyIiwid2Vla1llYXIiLCJnZXRVVENXZWVrIiwiaXNvV2VlayIsImdldFVUQ0lTT1dlZWsiLCJzZXRVVENNb250aCIsInN0YXJ0T2ZZZWFyVGltZXN0YW1wIiwiZGlmZmVyZW5jZSIsImdldFVUQ0RheU9mWWVhciIsImxvY2FsRGF5T2ZXZWVrIiwiaXNvRGF5T2ZXZWVrIiwiX2xvY2FsaXplIiwidGltZXpvbmVPZmZzZXQiLCJfb3JpZ2luYWxEYXRlIiwib3JpZ2luYWxEYXRlIiwiZGF0ZUxvbmdGb3JtYXR0ZXIiLCJ0aW1lTG9uZ0Zvcm1hdHRlciIsImRhdGVUaW1lRm9ybWF0IiwiZGF0ZVBhdHRlcm4iLCJ0aW1lUGF0dGVybiIsInByb3RlY3RlZERheU9mWWVhclRva2VucyIsInByb3RlY3RlZFdlZWtZZWFyVG9rZW5zIiwiaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbiIsImlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbiIsInRocm93UHJvdGVjdGVkRXJyb3IiLCJmb3JtYXR0aW5nVG9rZW5zUmVnRXhwIiwibG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJlc2NhcGVkU3RyaW5nUmVnRXhwIiwiZG91YmxlUXVvdGVSZWdFeHAiLCJ1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCIsImRpcnR5Rm9ybWF0U3RyIiwiZm9ybWF0U3RyIiwidXRjRGF0ZSIsImZvcm1hdHRlck9wdGlvbnMiLCJmaXJzdENoYXJhY3RlciIsImxvbmdGb3JtYXR0ZXIiLCJjbGVhbkVzY2FwZWRTdHJpbmciLCJmb3JtYXR0ZXIiLCJ1c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnMiLCJ1c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFF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Q1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLEtBSWIsU0FBU293SCxFQUFlaCtELEdBQ3ZCLElBQUlob0QsRUFBS2ltSCxFQUFzQmorRCxHQUMvQixPQUFPNTJELEVBQW9CNE8sR0FFNUIsU0FBU2ltSCxFQUFzQmorRCxHQUM5QixJQUFJNTJELEVBQW9CYSxFQUFFMkQsRUFBS295RCxHQUFNLENBQ3BDLElBQUlwekQsRUFBSSxJQUFJa0osTUFBTSx1QkFBeUJrcUQsRUFBTSxLQUVqRCxNQURBcHpELEVBQUVtb0IsS0FBTyxtQkFDSG5vQixFQUVQLE9BQU9nQixFQUFJb3lELEdBRVpnK0QsRUFBZTFrSCxLQUFPLFdBQ3JCLE9BQU9wUCxPQUFPb1AsS0FBSzFMLElBRXBCb3dILEVBQWVqNEUsUUFBVWs0RSxFQUN6QjEwSCxFQUFPRCxRQUFVMDBILEVBQ2pCQSxFQUFlaG1ILEdBQUssSyw2QkMxUXBCLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJDQXpDLE9BQWUsY0FBMEIsd0IsNkJD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Q0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtB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RXJCQyxFQURhLEVBQWVELElBQ2RycEksRUFBVzhqQixFQUFPaytHLFdBQVlvSCxHQUc5Q3BwSSxLQUNObmdCLEtBQUssSUFBSTBCLE1BQU1xbkosR0FBd0I5b0osS0FBSSxTQUFVa2dCLEdBRXRELEdBQWtCLE9BQWRBLEVBQ0YsTUFBTyxJQUdULElBQUlxcEksRUFBaUJycEksRUFBVSxHQUUvQixHQUF1QixNQUFuQnFwSSxFQUNGLE9BQU9FLEVBQW1CdnBJLEdBRzVCLElBQUl3cEksRUFBWSxFQUFXSCxHQUUzQixHQUFJRyxFQVNGLE9BUktoMUgsRUFBUWkxSCw2QkFBK0JmLEVBQXlCMW9JLElBQ25FMm9JLEVBQW9CM29JLEVBQVdpcEksRUFBZ0Izb0MsSUFHNUM5ckYsRUFBUWsxSCw4QkFBZ0NqQixFQUEwQnpvSSxJQUNyRTJvSSxFQUFvQjNvSSxFQUFXaXBJLEVBQWdCM29DLEdBRzFDa3BDLEVBQVVMLEVBQVNucEksRUFBVzhqQixFQUFPbWdILFNBQVVtRixHQUd4RCxHQUFJQyxFQUFlOW5KLE1BQU15bkosR0FDdkIsTUFBTSxJQUFJcnFILFdBQVcsaUVBQW1FMHFILEVBQWlCLEtBRzNHLE9BQU9ycEksS0FDTm5nQixLQUFLLElBQ1IsT0FBT2tPLEVBR1QsU0FBU3c3SSxFQUFtQnYySSxHQUMxQixPQUFPQSxFQUFNelIsTUFBTXVuSixHQUFxQixHQUFHeG5KLFFBQVF5bkosRUFBbUIiLCJmaWxlIjoianMvcG9wdXAuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDU0NCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NyZWF0ZUJpbmRpbmcobywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgZXhwb3J0cykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0LmRlZmF1bHQgPSBtb2Q7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHByaXZhdGVNYXApIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBnZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJpdmF0ZU1hcC5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgcHJpdmF0ZU1hcCwgdmFsdWUpIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlTWFwLnNldChyZWNlaXZlciwgdmFsdWUpO1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iLCJ2YXIgY3NzbWVtID0gZnVuY3Rpb24gKHN0eWxlcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGVsZW0pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1vZHMsIG1peCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKCFzdHlsZXMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZXJlIGlzIG5vIHN0eWxlcycpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFlbGVtKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGVyZSBpcyBubyBlbGVtZW50IG5hbWUnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgY2xhc3NlcyA9IFtlbGVtXTtcblxuICAgICAgaWYgKG1vZHMpIHtcbiAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMobW9kcykuZm9yRWFjaChmdW5jdGlvbiAobW9kTmFtZSkge1xuICAgICAgICAgIHZhciBtb2RWYWwgPSBtb2RzW21vZE5hbWVdO1xuXG4gICAgICAgICAgaWYgKG1vZFZhbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKFtlbGVtLCBtb2ROYW1lXS5qb2luKCdfJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAobW9kVmFsKSB7XG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goW2VsZW0sIG1vZE5hbWUsIG1vZFZhbF0uam9pbignXycpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2xhc3Nlc1xuICAgICAgICAubWFwKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHN0eWxlc1tjbGFzc05hbWVdID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gc3R5bGVzW2NsYXNzTmFtZV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybihjbGFzc05hbWUsICdwcm9wZXJ0eSBub3QgZm91bmQgaW4gc3R5bGVzJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgLmNvbmNhdChtaXggfHwgW10pXG4gICAgICAgIC5qb2luKCcgJyk7XG4gICAgfTtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY3NzbWVtO1xuIiwiZXhwb3J0IGVudW0gU3RvcmFnZSB7XG4gIC8vIEF1dGhcbiAgUEFSVE5FUlNfQVVUSF9LRVkgPSAnUEFSVE5FUlNfQVVUSF9LRVknLFxuICBVSUQgPSAnVUlEJyxcbiAgVVNFUl9JRCA9ICdVU0VSX0lEJyxcblxuICAvLyBBbmFseXRpY3NcbiAgUElOR0VSX1BFUklPRCA9ICdQSU5HRVJfUEVSSU9EJyxcblxuICAvLyBPbkJvYXJkaW5nXG4gIFdBU19PTkJPQVJESU5HX1NIT1dOID0gJ1dBU19PTkJPQVJESU5HX1NIT1dOJyxcbiAgT05CT0FSRElOR19UQUJfSUQgPSAnT05CT0FSRElOR19UQUJfSUQnLFxuICBCT09LSU5HX1NDUk9MTF9UT19UQUJMRV9PTl9GSVJTVF9PRkZFUiA9ICdCT09LSU5HX1NDUk9MTF9UT19UQUJMRV9PTl9GSVJTVF9PRkZFUicsXG5cbiAgLy8gRmlyc3RCb29raW5nXG4gIElTX0ZJUlNUX0JPT0tJTkcgPSAnSVNfRklSU1RfQk9PS0lORycsXG4gIFdBU19GSVJTVF9CT09LSU5HX1NIT1dOID0gJ1dBU19GSVJTVF9CT09LSU5HX1NIT1dOJyxcblxuICAvLyBPZmZlclxuICBOT19SQVRFX0RBVEEgPSAnTk9fUkFURV9EQVRBJyxcbiAgUkFURSA9ICdSQVRFJyxcbiAgUkFURVMgPSAnUkFURVMnLFxuXG4gIC8vIFByb21vY29kZXNcbiAgUFJPTU9DT0RFID0gJ1BST01PQ09ERScsXG5cbiAgLy8gRXRjXG4gIExBTkdVQUdFID0gJ0xBTkdVQUdFJyxcbiAgTElWRV9TRVRUSU5HUyA9ICdMSVZFX1NFVFRJTkdTJyxcbiAgTk9USUZJQ0FUSU9OU19TRVRUSU5HUyA9ICdOT1RJRklDQVRJT05TX1NFVFRJTkdTJyxcbiAgUFJJQ0VfU0VUVElOR1MgPSAnUFJJQ0VfU0VUVElOR1MnLFxuICBQUk9NT19DQU1QQUlHTiA9ICdQUk9NT19DQU1QQUlHTicsXG5cbiAgLy8gSW5mb3JtYXRpb24gd2luZG93c1xuICBJTkZPUk1BVElPTl9TVEVQID0gJ0lORk9STUFUSU9OX1NURVAnLFxuICBMQVNUX1RJTUVfSU5GT1JNQVRJT05fV0FTX1NIT1dOID0gJ0xBU1RfVElNRV9JTkZPUk1BVElPTl9XQVNfU0hPV04nLFxufVxuIiwiaW1wb3J0IHsgYnJvd3NlciB9IGZyb20gJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbC10cyc7XG5cbmltcG9ydCB7IFN0b3JhZ2UgfSBmcm9tICdAY29uc3RhbnRzL3N0b3JhZ2UnO1xuXG5leHBvcnQgY29uc3QgZ2V0RnJvbVN0b3JhZ2UgPSBhc3luYyAocGFyYW06IFN0b3JhZ2UpOiBQcm9taXNlPGFueT4gPT4ge1xuICBjb25zdCBzdG9yYWdlID0gYXdhaXQgYnJvd3Nlci5zdG9yYWdlLmxvY2FsLmdldChbcGFyYW1dKTtcbiAgcmV0dXJuIHN0b3JhZ2VbcGFyYW1dO1xufTtcblxuZXhwb3J0IGNvbnN0IHNhdmVUb1N0b3JhZ2UgPSBhc3luYyAoXG4gIHBhcmFtOiBTdG9yYWdlLFxuICB2YWx1ZTogYW55XG4pOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgYXdhaXQgYnJvd3Nlci5zdG9yYWdlLmxvY2FsLnNldCh7IFtwYXJhbV06IHZhbHVlIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IHJlbW92ZUZyb21TdG9yYWdlID0gYXN5bmMgKHBhcmFtOiBTdG9yYWdlKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGF3YWl0IGJyb3dzZXIuc3RvcmFnZS5sb2NhbC5yZW1vdmUocGFyYW0pO1xufTtcbiIsIi8qXG5IVE1MIGVzY2FwaW5nIGlzIHRoZSBzYW1lIGFzIFJlYWN0J3NcbihvbiBwdXJwb3NlLikgVGhlcmVmb3JlLCBpdCBoYXMgdGhlIGZvbGxvd2luZyBDb3B5cmlnaHQgYW5kIExpY2Vuc2luZzpcblxuQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbkFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cblRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFXG5maWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiBSZWFjdCdzIHNvdXJjZSB0cmVlLlxuKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbnRsTWVzc2FnZUZvcm1hdCBmcm9tICdpbnRsLW1lc3NhZ2Vmb3JtYXQnO1xuaW1wb3J0IG1lbW9pemVJbnRsQ29uc3RydWN0b3IgZnJvbSAnaW50bC1mb3JtYXQtY2FjaGUnO1xuaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnQGZvcm1hdGpzL2ludGwtdXRpbHMnO1xuY29uc3QgRVNDQVBFRF9DSEFSUyA9IHtcbiAgICAzODogJyZhbXA7JyxcbiAgICA2MjogJyZndDsnLFxuICAgIDYwOiAnJmx0OycsXG4gICAgMzQ6ICcmcXVvdDsnLFxuICAgIDM5OiAnJiN4Mjc7Jyxcbn07XG5jb25zdCBVTlNBRkVfQ0hBUlNfUkVHRVggPSAvWyY+PFwiJ10vZztcbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGUoc3RyKSB7XG4gICAgcmV0dXJuICgnJyArIHN0cikucmVwbGFjZShVTlNBRkVfQ0hBUlNfUkVHRVgsIG1hdGNoID0+IEVTQ0FQRURfQ0hBUlNbbWF0Y2guY2hhckNvZGVBdCgwKV0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlclByb3BzKHByb3BzLCB3aGl0ZWxpc3QsIGRlZmF1bHRzID0ge30pIHtcbiAgICByZXR1cm4gd2hpdGVsaXN0LnJlZHVjZSgoZmlsdGVyZWQsIG5hbWUpID0+IHtcbiAgICAgICAgaWYgKG5hbWUgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgIGZpbHRlcmVkW25hbWVdID0gcHJvcHNbbmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobmFtZSBpbiBkZWZhdWx0cykge1xuICAgICAgICAgICAgZmlsdGVyZWRbbmFtZV0gPSBkZWZhdWx0c1tuYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsdGVyZWQ7XG4gICAgfSwge30pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGludmFyaWFudEludGxDb250ZXh0KGludGwpIHtcbiAgICBpbnZhcmlhbnQoaW50bCwgJ1tSZWFjdCBJbnRsXSBDb3VsZCBub3QgZmluZCByZXF1aXJlZCBgaW50bGAgb2JqZWN0LiAnICtcbiAgICAgICAgJzxJbnRsUHJvdmlkZXI+IG5lZWRzIHRvIGV4aXN0IGluIHRoZSBjb21wb25lbnQgYW5jZXN0cnkuJyk7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgZXhjZXB0aW9uKSB7XG4gICAgY29uc3QgZU1zZyA9IGV4Y2VwdGlvbiA/IGBcXG4ke2V4Y2VwdGlvbi5zdGFja31gIDogJyc7XG4gICAgcmV0dXJuIGBbUmVhY3QgSW50bF0gJHttZXNzYWdlfSR7ZU1zZ31gO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRFcnJvckhhbmRsZXIoZXJyb3IpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgREVGQVVMVF9JTlRMX0NPTkZJRyA9IHtcbiAgICBmb3JtYXRzOiB7fSxcbiAgICBtZXNzYWdlczoge30sXG4gICAgdGltZVpvbmU6IHVuZGVmaW5lZCxcbiAgICB0ZXh0Q29tcG9uZW50OiBSZWFjdC5GcmFnbWVudCxcbiAgICBkZWZhdWx0TG9jYWxlOiAnZW4nLFxuICAgIGRlZmF1bHRGb3JtYXRzOiB7fSxcbiAgICBvbkVycm9yOiBkZWZhdWx0RXJyb3JIYW5kbGVyLFxufTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbnRsQ2FjaGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0ZVRpbWU6IHt9LFxuICAgICAgICBudW1iZXI6IHt9LFxuICAgICAgICBtZXNzYWdlOiB7fSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7fSxcbiAgICAgICAgcGx1cmFsUnVsZXM6IHt9LFxuICAgICAgICBsaXN0OiB7fSxcbiAgICAgICAgZGlzcGxheU5hbWVzOiB7fSxcbiAgICB9O1xufVxuLyoqXG4gKiBDcmVhdGUgaW50bCBmb3JtYXR0ZXJzIGFuZCBwb3B1bGF0ZSBjYWNoZVxuICogQHBhcmFtIGNhY2hlIGV4cGxpY2l0IGNhY2hlIHRvIHByZXZlbnQgbGVha2luZyBtZW1vcnlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZvcm1hdHRlcnMoY2FjaGUgPSBjcmVhdGVJbnRsQ2FjaGUoKSkge1xuICAgIGNvbnN0IFJlbGF0aXZlVGltZUZvcm1hdCA9IEludGwuUmVsYXRpdmVUaW1lRm9ybWF0O1xuICAgIGNvbnN0IExpc3RGb3JtYXQgPSBJbnRsLkxpc3RGb3JtYXQ7XG4gICAgY29uc3QgRGlzcGxheU5hbWVzID0gSW50bC5EaXNwbGF5TmFtZXM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0RGF0ZVRpbWVGb3JtYXQ6IG1lbW9pemVJbnRsQ29uc3RydWN0b3IoSW50bC5EYXRlVGltZUZvcm1hdCwgY2FjaGUuZGF0ZVRpbWUpLFxuICAgICAgICBnZXROdW1iZXJGb3JtYXQ6IG1lbW9pemVJbnRsQ29uc3RydWN0b3IoSW50bC5OdW1iZXJGb3JtYXQsIGNhY2hlLm51bWJlciksXG4gICAgICAgIGdldE1lc3NhZ2VGb3JtYXQ6IG1lbW9pemVJbnRsQ29uc3RydWN0b3IoSW50bE1lc3NhZ2VGb3JtYXQsIGNhY2hlLm1lc3NhZ2UpLFxuICAgICAgICBnZXRSZWxhdGl2ZVRpbWVGb3JtYXQ6IG1lbW9pemVJbnRsQ29uc3RydWN0b3IoUmVsYXRpdmVUaW1lRm9ybWF0LCBjYWNoZS5yZWxhdGl2ZVRpbWUpLFxuICAgICAgICBnZXRQbHVyYWxSdWxlczogbWVtb2l6ZUludGxDb25zdHJ1Y3RvcihJbnRsLlBsdXJhbFJ1bGVzLCBjYWNoZS5wbHVyYWxSdWxlcyksXG4gICAgICAgIGdldExpc3RGb3JtYXQ6IG1lbW9pemVJbnRsQ29uc3RydWN0b3IoTGlzdEZvcm1hdCwgY2FjaGUubGlzdCksXG4gICAgICAgIGdldERpc3BsYXlOYW1lczogbWVtb2l6ZUludGxDb25zdHJ1Y3RvcihEaXNwbGF5TmFtZXMsIGNhY2hlLmRpc3BsYXlOYW1lcyksXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXROYW1lZEZvcm1hdChmb3JtYXRzLCB0eXBlLCBuYW1lLCBvbkVycm9yKSB7XG4gICAgY29uc3QgZm9ybWF0VHlwZSA9IGZvcm1hdHMgJiYgZm9ybWF0c1t0eXBlXTtcbiAgICBsZXQgZm9ybWF0O1xuICAgIGlmIChmb3JtYXRUeXBlKSB7XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdFR5cGVbbmFtZV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICB9XG4gICAgb25FcnJvcihjcmVhdGVFcnJvcihgTm8gJHt0eXBlfSBmb3JtYXQgbmFtZWQ6ICR7bmFtZX1gKSk7XG59XG4iLCJleHBvcnQgZW51bSBMYW5ndWFnZSB7XG4gIEVOID0gJ2VuJyxcbiAgUlUgPSAncnUnLFxuICBERSA9ICdkZScsXG4gIEVTID0gJ2VzJyxcbiAgSVQgPSAnaXQnLFxuICBGUiA9ICdmcicsXG4gIFBMID0gJ3BsJyxcbiAgVEsgPSAndGsnLFxuICBCRyA9ICdiZycsXG4gIFJPID0gJ3JvJyxcbiAgUFQgPSAncHQnLFxufVxuXG5leHBvcnQgY29uc3QgTGFuZ3VhZ2VMYWJlbDogUGFydGlhbDxSZWNvcmQ8TGFuZ3VhZ2UsIHN0cmluZz4+ID0ge1xuICBbTGFuZ3VhZ2UuRU5dOiAnRW5nbGlzaCcsXG4gIFtMYW5ndWFnZS5SVV06ICfQoNGD0YHRgdC60LjQuScsXG59O1xuXG5leHBvcnQgY29uc3QgbmF0aW9uYWxpdGllc1RvTGFuZ3VhZ2VzOiBSZWNvcmQ8c3RyaW5nLCBMYW5ndWFnZT4gPSB7XG4gIGdiOiBMYW5ndWFnZS5FTixcbiAgZGU6IExhbmd1YWdlLkRFLFxuICBlczogTGFuZ3VhZ2UuRVMsXG4gIGl0OiBMYW5ndWFnZS5JVCxcbiAgZnI6IExhbmd1YWdlLkZSLFxuICBwbDogTGFuZ3VhZ2UuUEwsXG4gIHRrOiBMYW5ndWFnZS5USyxcbiAgcnU6IExhbmd1YWdlLlJVLFxuICBiZzogTGFuZ3VhZ2UuQkcsXG4gIGh1OiBMYW5ndWFnZS5FTixcbiAgZ3I6IExhbmd1YWdlLkVOLFxuICBybzogTGFuZ3VhZ2UuUk8sXG4gIGFlOiBMYW5ndWFnZS5FTixcbiAgcnM6IExhbmd1YWdlLkVOLFxuICBhbDogTGFuZ3VhZ2UuRU4sXG4gIHB0OiBMYW5ndWFnZS5QVCxcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuZXhwb3J0cy5icm93c2VyID0gcmVxdWlyZShcIndlYmV4dGVuc2lvbi1wb2x5ZmlsbFwiKTtcbiIsImV4cG9ydCBlbnVtIENvbXBldGl0b3Ige1xuICBBQ1MgPSAnQUNTJyxcbiAgQUdEID0gJ0FHRCcsXG4gIEFMTiA9ICdBTE4nLFxuICBCRE8gPSAnQkRPJyxcbiAgQk9PID0gJ0JPTycsXG4gIEJWSyA9ICdCVksnLFxuICBFUkEgPSAnRVJBJyxcbiAgR0dCID0gJ0dHQicsXG4gIEhTVCA9ICdIU1QnLFxuICBIVEIgPSAnSFRCJyxcbiAgSFRQID0gJ0hUUCcsXG4gIElUQyA9ICdJVEMnLFxuICBTWFQgPSAnU1hUJyxcbiAgVEJPID0gJ1RCTycsXG4gIFRMRCA9ICdUTEQnLFxuICBWVFIgPSAnVlRSJyxcbiAgVzJNID0gJ1cyTScsXG59XG5cbmV4cG9ydCBjb25zdCBjb21wZXRpdG9yR3Jvc3M6IFJlY29yZDxDb21wZXRpdG9yLCBib29sZWFuPiA9IHtcbiAgW0NvbXBldGl0b3IuQUNTXTogZmFsc2UsXG4gIFtDb21wZXRpdG9yLkFHRF06IGZhbHNlLFxuICBbQ29tcGV0aXRvci5BTE5dOiBmYWxzZSxcbiAgW0NvbXBldGl0b3IuQkRPXTogdHJ1ZSxcbiAgW0NvbXBldGl0b3IuQk9PXTogZmFsc2UsXG4gIFtDb21wZXRpdG9yLkJWS106IGZhbHNlLFxuICBbQ29tcGV0aXRvci5FUkFdOiB0cnVlLFxuICBbQ29tcGV0aXRvci5HR0JdOiB0cnVlLFxuICBbQ29tcGV0aXRvci5IU1RdOiB0cnVlLFxuICBbQ29tcGV0aXRvci5IVEJdOiB0cnVlLFxuICBbQ29tcGV0aXRvci5IVFBdOiB0cnVlLFxuICBbQ29tcGV0aXRvci5JVENdOiB0cnVlLFxuICBbQ29tcGV0aXRvci5TWFRdOiB0cnVlLFxuICBbQ29tcGV0aXRvci5UQk9dOiB0cnVlLFxuICBbQ29tcGV0aXRvci5UTERdOiB0cnVlLFxuICBbQ29tcGV0aXRvci5WVFJdOiB0cnVlLFxuICBbQ29tcGV0aXRvci5XMk1dOiB0cnVlLFxufTtcblxuZXhwb3J0IGNvbnN0IGNvbXBldGl0b3JJZHM6IFJlY29yZDxDb21wZXRpdG9yLCBudW1iZXI+ID0ge1xuICBbQ29tcGV0aXRvci5BQ1NdOiAyMSxcbiAgW0NvbXBldGl0b3IuQUdEXTogMzgsXG4gIFtDb21wZXRpdG9yLkFMTl06IDgyLFxuICBbQ29tcGV0aXRvci5CRE9dOiA0NyxcbiAgW0NvbXBldGl0b3IuQk9PXTogOTIsXG4gIFtDb21wZXRpdG9yLkJWS106IDIwLFxuICBbQ29tcGV0aXRvci5FUkFdOiA3MixcbiAgW0NvbXBldGl0b3IuR0dCXTogODIsXG4gIFtDb21wZXRpdG9yLkhTVF06IDgyLFxuICBbQ29tcGV0aXRvci5IVEJdOiA4MixcbiAgW0NvbXBldGl0b3IuSFRQXTogODIsXG4gIFtDb21wZXRpdG9yLklUQ106IDQ0LFxuICBbQ29tcGV0aXRvci5TWFRdOiA4MixcbiAgW0NvbXBldGl0b3IuVEJPXTogODIsXG4gIFtDb21wZXRpdG9yLlRMRF06IDgyLFxuICBbQ29tcGV0aXRvci5WVFJdOiA0OSxcbiAgW0NvbXBldGl0b3IuVzJNXTogNDMsXG59O1xuXG5leHBvcnQgY29uc3QgY29tcGV0aXRvcnNOYW1lczogUmVjb3JkPENvbXBldGl0b3IsIHN0cmluZz4gPSB7XG4gIFtDb21wZXRpdG9yLkFDU106ICdBY2FzZScsXG4gIFtDb21wZXRpdG9yLkFHRF06ICdBZ29kYScsXG4gIFtDb21wZXRpdG9yLkFMTl06ICdBbGVhbicsXG4gIFtDb21wZXRpdG9yLkJET106ICdCZWRzb25saW5lJyxcbiAgW0NvbXBldGl0b3IuQk9PXTogJ0Jvb2tpbmcnLFxuICBbQ29tcGV0aXRvci5CVktdOiAnQnJvbmV2aWsnLFxuICBbQ29tcGV0aXRvci5FUkFdOiAnRXhwZWRpYScsXG4gIFtDb21wZXRpdG9yLkdHQl06ICdHb0dsb2JhbCcsXG4gIFtDb21wZXRpdG9yLkhUUF06ICdIb3RlbHNwcm8nLFxuICBbQ29tcGV0aXRvci5IU1RdOiAnSG90ZWxzdG9uJyxcbiAgW0NvbXBldGl0b3IuSFRCXTogJ0hvdGVsYm9vaycsXG4gIFtDb21wZXRpdG9yLklUQ106ICdJdGFsY2FtZWwnLFxuICBbQ29tcGV0aXRvci5TWFRdOiAnNnRvdXInLFxuICBbQ29tcGV0aXRvci5UQk9dOiAnVEJPaG9saWRheXMnLFxuICBbQ29tcGV0aXRvci5UTERdOiAnVGVsZGFyVHJhdmVsJyxcbiAgW0NvbXBldGl0b3IuVlRSXTogJ1ZldHVyaXMnLFxuICBbQ29tcGV0aXRvci5XMk1dOiAnVzJNJyxcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzICovXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBvbmUgb2YgYSBmZXcgRXJyb3Igb3IgRXJyb3ItbGlrZVxuICoge0BsaW5rIGlzRXJyb3J9LlxuICpcbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHJldHVybnMgQSBib29sZWFuIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNFcnJvcih3YXQpIHtcbiAgICBzd2l0Y2ggKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh3YXQpKSB7XG4gICAgICAgIGNhc2UgJ1tvYmplY3QgRXJyb3JdJzpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBjYXNlICdbb2JqZWN0IEV4Y2VwdGlvbl0nOlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGNhc2UgJ1tvYmplY3QgRE9NRXhjZXB0aW9uXSc6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBpc0luc3RhbmNlT2Yod2F0LCBFcnJvcik7XG4gICAgfVxufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIHR5cGUgaXMgRXJyb3JFdmVudFxuICoge0BsaW5rIGlzRXJyb3JFdmVudH0uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Vycm9yRXZlbnQod2F0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh3YXQpID09PSAnW29iamVjdCBFcnJvckV2ZW50XSc7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBET01FcnJvclxuICoge0BsaW5rIGlzRE9NRXJyb3J9LlxuICpcbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHJldHVybnMgQSBib29sZWFuIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNET01FcnJvcih3YXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdhdCkgPT09ICdbb2JqZWN0IERPTUVycm9yXSc7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBET01FeGNlcHRpb25cbiAqIHtAbGluayBpc0RPTUV4Y2VwdGlvbn0uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0RPTUV4Y2VwdGlvbih3YXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdhdCkgPT09ICdbb2JqZWN0IERPTUV4Y2VwdGlvbl0nO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIHR5cGUgaXMgYSBzdHJpbmdcbiAqIHtAbGluayBpc1N0cmluZ30uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZyh3YXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdhdCkgPT09ICdbb2JqZWN0IFN0cmluZ10nO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIGlzIGEgcHJpbWl0aXZlICh1bmRlZmluZWQsIG51bGwsIG51bWJlciwgYm9vbGVhbiwgc3RyaW5nKVxuICoge0BsaW5rIGlzUHJpbWl0aXZlfS5cbiAqXG4gKiBAcGFyYW0gd2F0IEEgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJpbWl0aXZlKHdhdCkge1xuICAgIHJldHVybiB3YXQgPT09IG51bGwgfHwgKHR5cGVvZiB3YXQgIT09ICdvYmplY3QnICYmIHR5cGVvZiB3YXQgIT09ICdmdW5jdGlvbicpO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIHR5cGUgaXMgYW4gb2JqZWN0IGxpdGVyYWxcbiAqIHtAbGluayBpc1BsYWluT2JqZWN0fS5cbiAqXG4gKiBAcGFyYW0gd2F0IEEgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qod2F0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh3YXQpID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUncyB0eXBlIGlzIGFuIEV2ZW50IGluc3RhbmNlXG4gKiB7QGxpbmsgaXNFdmVudH0uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0V2ZW50KHdhdCkge1xuICAgIHJldHVybiB0eXBlb2YgRXZlbnQgIT09ICd1bmRlZmluZWQnICYmIGlzSW5zdGFuY2VPZih3YXQsIEV2ZW50KTtcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUncyB0eXBlIGlzIGFuIEVsZW1lbnQgaW5zdGFuY2VcbiAqIHtAbGluayBpc0VsZW1lbnR9LlxuICpcbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHJldHVybnMgQSBib29sZWFuIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNFbGVtZW50KHdhdCkge1xuICAgIHJldHVybiB0eXBlb2YgRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNJbnN0YW5jZU9mKHdhdCwgRWxlbWVudCk7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBhbiByZWdleHBcbiAqIHtAbGluayBpc1JlZ0V4cH0uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1JlZ0V4cCh3YXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdhdCkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSBoYXMgYSB0aGVuIGZ1bmN0aW9uLlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1RoZW5hYmxlKHdhdCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICByZXR1cm4gQm9vbGVhbih3YXQgJiYgd2F0LnRoZW4gJiYgdHlwZW9mIHdhdC50aGVuID09PSAnZnVuY3Rpb24nKTtcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUncyB0eXBlIGlzIGEgU3ludGhldGljRXZlbnRcbiAqIHtAbGluayBpc1N5bnRoZXRpY0V2ZW50fS5cbiAqXG4gKiBAcGFyYW0gd2F0IEEgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3ludGhldGljRXZlbnQod2F0KSB7XG4gICAgcmV0dXJuIGlzUGxhaW5PYmplY3Qod2F0KSAmJiAnbmF0aXZlRXZlbnQnIGluIHdhdCAmJiAncHJldmVudERlZmF1bHQnIGluIHdhdCAmJiAnc3RvcFByb3BhZ2F0aW9uJyBpbiB3YXQ7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBhbiBpbnN0YW5jZSBvZiBwcm92aWRlZCBjb25zdHJ1Y3Rvci5cbiAqIHtAbGluayBpc0luc3RhbmNlT2Z9LlxuICpcbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHBhcmFtIGJhc2UgQSBjb25zdHJ1Y3RvciB0byBiZSB1c2VkIGluIGEgY2hlY2suXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0luc3RhbmNlT2Yod2F0LCBiYXNlKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHdhdCBpbnN0YW5jZW9mIGJhc2U7XG4gICAgfVxuICAgIGNhdGNoIChfZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXMuanMubWFwIiwiZXhwb3J0IGNvbnN0IEJBU0lDX1BSSUNJTkdfQVVUSF9JRCA9XG4gICdNemc2WkRVeE9EUXhZbVF0WVRObE5pMDBZemt4TFRnd1lUa3RZekptTW1Oak1HRmxPR001JztcbmV4cG9ydCBjb25zdCBCUkFORCA9ICdyYXRlaGF3ayc7XG5leHBvcnQgY29uc3QgREVGQVVMVF9USFJFU0hPTEQgPSAwLjAyO1xuZXhwb3J0IGNvbnN0IExBTkcgPSAncnUnO1xuZXhwb3J0IGNvbnN0IFJPT1RfSUQgPSAncmF0ZWhhd2stZXh0ZW5zaW9uJztcbmV4cG9ydCBjb25zdCBWRVJTSU9OID0gJ3JhdGVoYXdrJztcbiIsImltcG9ydCB7IGJyb3dzZXIgfSBmcm9tICd3ZWJleHRlbnNpb24tcG9seWZpbGwtdHMnO1xuXG5pbXBvcnQgeyBMYW5ndWFnZSwgbmF0aW9uYWxpdGllc1RvTGFuZ3VhZ2VzIH0gZnJvbSAnQGNvbnN0YW50cy9sYW5ndWFnZXMnO1xuXG5leHBvcnQgY29uc3Qgbm9vcCA9ICgpOiB2b2lkID0+IHt9O1xuXG5leHBvcnQgY29uc3QgZ2V0Q29va2llcyA9IGFzeW5jIChcbiAgdXJsOiBzdHJpbmcsXG4gIG5hbWU6IHN0cmluZ1xuKTogUHJvbWlzZTxzdHJpbmcgfCB1bmRlZmluZWQ+ID0+IHtcbiAgY29uc3QgZGV0YWlscyA9IHsgdXJsLCBuYW1lIH07XG4gIGNvbnN0IGNvb2tpZSA9IGF3YWl0IGJyb3dzZXIuY29va2llcy5nZXQoZGV0YWlscyk7XG4gIHJldHVybiBjb29raWU/LnZhbHVlO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFZlcnNpb24gPSAoKTogc3RyaW5nID0+IGJyb3dzZXIucnVudGltZS5nZXRNYW5pZmVzdCgpLnZlcnNpb247XG5cbmV4cG9ydCBjb25zdCBnZXRSb290ID0gKGlkOiBzdHJpbmcpOiBFbGVtZW50ID0+IHtcbiAgbGV0IHJvb3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHtpZH1gKTtcblxuICBpZiAocm9vdCkge1xuICAgIHJvb3QucmVtb3ZlKCk7XG4gIH1cblxuICByb290ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHJvb3QuaWQgPSBpZDtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChyb290KTtcblxuICByZXR1cm4gcm9vdDtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRMaW5rID0gKGhyZWY6IHN0cmluZyk6IEhUTUxMaW5rRWxlbWVudCA9PiB7XG4gIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG4gIGxpbmsucmVsID0gJ3N0eWxlc2hlZXQnO1xuICBsaW5rLmhyZWYgPSBocmVmO1xuICByZXR1cm4gbGluaztcbn07XG5cbmV4cG9ydCBjb25zdCBudW1iZXJXaXRoU2VwYXJhdG9ycyA9IChudW1iZXI6IG51bWJlcik6IHN0cmluZyA9PiB7XG4gIGNvbnN0IHN0cmluZyA9IG51bWJlci50b1N0cmluZygpO1xuICByZXR1cm4gc3RyaW5nLmxlbmd0aCA+IDRcbiAgICA/IHN0cmluZy5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCAnICcpXG4gICAgOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0QnJvd3Nlck5hbWUgPSAoKTogc3RyaW5nID0+IHtcbiAgY29uc3QgdXNlckFnZW50ID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcblxuICBpZiAodXNlckFnZW50LmluY2x1ZGVzKCdlZGcnKSkge1xuICAgIHJldHVybiAnZWRnZSc7XG4gIH1cblxuICBpZiAodXNlckFnZW50LmluY2x1ZGVzKCdvcHInKSkge1xuICAgIHJldHVybiAnb3BlcmEnO1xuICB9XG5cbiAgaWYgKHVzZXJBZ2VudC5pbmNsdWRlcygnZmlyZWZveCcpKSB7XG4gICAgcmV0dXJuICdmaXJlZm94JztcbiAgfVxuXG4gIGlmICh1c2VyQWdlbnQuaW5jbHVkZXMoJ3NhZmFyaScpICYmICF1c2VyQWdlbnQuaW5jbHVkZXMoJ2Nocm9tZScpKSB7XG4gICAgcmV0dXJuICdzYWZhcmknO1xuICB9XG5cbiAgcmV0dXJuICdjaHJvbWUnO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldE5hdGlvbmFsaXR5ID0gKFxuICBuYXRpb25hbGl0eTogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICBmYWxsYmFja05hdGlvbmFsaXR5ID0gJ2diJ1xuKTogc3RyaW5nID0+XG4gIE9iamVjdC5rZXlzKG5hdGlvbmFsaXRpZXNUb0xhbmd1YWdlcykuZmluZChcbiAgICAocmhOYXRpb25hbGl0eSkgPT4gcmhOYXRpb25hbGl0eSA9PT0gbmF0aW9uYWxpdHlcbiAgKSB8fCAoZmFsbGJhY2tOYXRpb25hbGl0eSA9PT0gTGFuZ3VhZ2UuRU4gPyAnZ2InIDogZmFsbGJhY2tOYXRpb25hbGl0eSk7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXF1aXJlZEFyZ3MocmVxdWlyZWQsIGFyZ3MpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoIDwgcmVxdWlyZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHJlcXVpcmVkICsgJyBhcmd1bWVudCcgKyAocmVxdWlyZWQgPiAxID8gJ3MnIDogJycpICsgJyByZXF1aXJlZCwgYnV0IG9ubHkgJyArIGFyZ3MubGVuZ3RoICsgJyBwcmVzZW50Jyk7XG4gIH1cbn0iLCJpbXBvcnQgeyBpc05vZGVFbnYgfSBmcm9tICcuL25vZGUnO1xuaW1wb3J0IHsgc25pcExpbmUgfSBmcm9tICcuL3N0cmluZyc7XG52YXIgZmFsbGJhY2tHbG9iYWxPYmplY3QgPSB7fTtcbi8qKlxuICogU2FmZWx5IGdldCBnbG9iYWwgc2NvcGUgb2JqZWN0XG4gKlxuICogQHJldHVybnMgR2xvYmFsIHNjb3BlIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0R2xvYmFsT2JqZWN0KCkge1xuICAgIHJldHVybiAoaXNOb2RlRW52KClcbiAgICAgICAgPyBnbG9iYWxcbiAgICAgICAgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgPyB3aW5kb3dcbiAgICAgICAgICAgIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgPyBzZWxmXG4gICAgICAgICAgICAgICAgOiBmYWxsYmFja0dsb2JhbE9iamVjdCk7XG59XG4vKipcbiAqIFVVSUQ0IGdlbmVyYXRvclxuICpcbiAqIEByZXR1cm5zIHN0cmluZyBHZW5lcmF0ZWQgVVVJRDQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1dWlkNCgpIHtcbiAgICB2YXIgZ2xvYmFsID0gZ2V0R2xvYmFsT2JqZWN0KCk7XG4gICAgdmFyIGNyeXB0byA9IGdsb2JhbC5jcnlwdG8gfHwgZ2xvYmFsLm1zQ3J5cHRvO1xuICAgIGlmICghKGNyeXB0byA9PT0gdm9pZCAwKSAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICAgIC8vIFVzZSB3aW5kb3cuY3J5cHRvIEFQSSBpZiBhdmFpbGFibGVcbiAgICAgICAgdmFyIGFyciA9IG5ldyBVaW50MTZBcnJheSg4KTtcbiAgICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnIpO1xuICAgICAgICAvLyBzZXQgNCBpbiBieXRlIDdcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgICAgICAgYXJyWzNdID0gKGFyclszXSAmIDB4ZmZmKSB8IDB4NDAwMDtcbiAgICAgICAgLy8gc2V0IDIgbW9zdCBzaWduaWZpY2FudCBiaXRzIG9mIGJ5dGUgOSB0byAnMTAnXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgICAgIGFycls0XSA9IChhcnJbNF0gJiAweDNmZmYpIHwgMHg4MDAwO1xuICAgICAgICB2YXIgcGFkID0gZnVuY3Rpb24gKG51bSkge1xuICAgICAgICAgICAgdmFyIHYgPSBudW0udG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgd2hpbGUgKHYubGVuZ3RoIDwgNCkge1xuICAgICAgICAgICAgICAgIHYgPSBcIjBcIiArIHY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIChwYWQoYXJyWzBdKSArIHBhZChhcnJbMV0pICsgcGFkKGFyclsyXSkgKyBwYWQoYXJyWzNdKSArIHBhZChhcnJbNF0pICsgcGFkKGFycls1XSkgKyBwYWQoYXJyWzZdKSArIHBhZChhcnJbN10pKTtcbiAgICB9XG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDUwMzQvaG93LXRvLWNyZWF0ZS1hLWd1aWQtdXVpZC1pbi1qYXZhc2NyaXB0LzIxMTc1MjMjMjExNzUyM1xuICAgIHJldHVybiAneHh4eHh4eHh4eHh4NHh4eHl4eHh4eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgICAgICAgdmFyIHIgPSAoTWF0aC5yYW5kb20oKSAqIDE2KSB8IDA7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgICAgIHZhciB2ID0gYyA9PT0gJ3gnID8gciA6IChyICYgMHgzKSB8IDB4ODtcbiAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICAgIH0pO1xufVxuLyoqXG4gKiBQYXJzZXMgc3RyaW5nIGZvcm0gb2YgVVJMIGludG8gYW4gb2JqZWN0XG4gKiAvLyBib3Jyb3dlZCBmcm9tIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I2FwcGVuZGl4LUJcbiAqIC8vIGludGVudGlvbmFsbHkgdXNpbmcgcmVnZXggYW5kIG5vdCA8YS8+IGhyZWYgcGFyc2luZyB0cmljayBiZWNhdXNlIFJlYWN0IE5hdGl2ZSBhbmQgb3RoZXJcbiAqIC8vIGVudmlyb25tZW50cyB3aGVyZSBET00gbWlnaHQgbm90IGJlIGF2YWlsYWJsZVxuICogQHJldHVybnMgcGFyc2VkIFVSTCBvYmplY3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVXJsKHVybCkge1xuICAgIGlmICghdXJsKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgdmFyIG1hdGNoID0gdXJsLm1hdGNoKC9eKChbXjovPyNdKyk6KT8oXFwvXFwvKFteLz8jXSopKT8oW14/I10qKShcXD8oW14jXSopKT8oIyguKikpPyQvKTtcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgLy8gY29lcmNlIHRvIHVuZGVmaW5lZCB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5nIHNvIHdlIGRvbid0IGdldCAndW5kZWZpbmVkJ1xuICAgIHZhciBxdWVyeSA9IG1hdGNoWzZdIHx8ICcnO1xuICAgIHZhciBmcmFnbWVudCA9IG1hdGNoWzhdIHx8ICcnO1xuICAgIHJldHVybiB7XG4gICAgICAgIGhvc3Q6IG1hdGNoWzRdLFxuICAgICAgICBwYXRoOiBtYXRjaFs1XSxcbiAgICAgICAgcHJvdG9jb2w6IG1hdGNoWzJdLFxuICAgICAgICByZWxhdGl2ZTogbWF0Y2hbNV0gKyBxdWVyeSArIGZyYWdtZW50LFxuICAgIH07XG59XG4vKipcbiAqIEV4dHJhY3RzIGVpdGhlciBtZXNzYWdlIG9yIHR5cGUrdmFsdWUgZnJvbSBhbiBldmVudCB0aGF0IGNhbiBiZSB1c2VkIGZvciB1c2VyLWZhY2luZyBsb2dzXG4gKiBAcmV0dXJucyBldmVudCdzIGRlc2NyaXB0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRFdmVudERlc2NyaXB0aW9uKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50Lm1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50Lm1lc3NhZ2U7XG4gICAgfVxuICAgIGlmIChldmVudC5leGNlcHRpb24gJiYgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyAmJiBldmVudC5leGNlcHRpb24udmFsdWVzWzBdKSB7XG4gICAgICAgIHZhciBleGNlcHRpb24gPSBldmVudC5leGNlcHRpb24udmFsdWVzWzBdO1xuICAgICAgICBpZiAoZXhjZXB0aW9uLnR5cGUgJiYgZXhjZXB0aW9uLnZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhjZXB0aW9uLnR5cGUgKyBcIjogXCIgKyBleGNlcHRpb24udmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV4Y2VwdGlvbi50eXBlIHx8IGV4Y2VwdGlvbi52YWx1ZSB8fCBldmVudC5ldmVudF9pZCB8fCAnPHVua25vd24+JztcbiAgICB9XG4gICAgcmV0dXJuIGV2ZW50LmV2ZW50X2lkIHx8ICc8dW5rbm93bj4nO1xufVxuLyoqIEpTRG9jICovXG5leHBvcnQgZnVuY3Rpb24gY29uc29sZVNhbmRib3goY2FsbGJhY2spIHtcbiAgICB2YXIgZ2xvYmFsID0gZ2V0R2xvYmFsT2JqZWN0KCk7XG4gICAgdmFyIGxldmVscyA9IFsnZGVidWcnLCAnaW5mbycsICd3YXJuJywgJ2Vycm9yJywgJ2xvZycsICdhc3NlcnQnXTtcbiAgICBpZiAoISgnY29uc29sZScgaW4gZ2xvYmFsKSkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgIHZhciBvcmlnaW5hbENvbnNvbGUgPSBnbG9iYWwuY29uc29sZTtcbiAgICB2YXIgd3JhcHBlZExldmVscyA9IHt9O1xuICAgIC8vIFJlc3RvcmUgYWxsIHdyYXBwZWQgY29uc29sZSBtZXRob2RzXG4gICAgbGV2ZWxzLmZvckVhY2goZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgaWYgKGxldmVsIGluIGdsb2JhbC5jb25zb2xlICYmIG9yaWdpbmFsQ29uc29sZVtsZXZlbF0uX19zZW50cnlfb3JpZ2luYWxfXykge1xuICAgICAgICAgICAgd3JhcHBlZExldmVsc1tsZXZlbF0gPSBvcmlnaW5hbENvbnNvbGVbbGV2ZWxdO1xuICAgICAgICAgICAgb3JpZ2luYWxDb25zb2xlW2xldmVsXSA9IG9yaWdpbmFsQ29uc29sZVtsZXZlbF0uX19zZW50cnlfb3JpZ2luYWxfXztcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIFBlcmZvcm0gY2FsbGJhY2sgbWFuaXB1bGF0aW9uc1xuICAgIHZhciByZXN1bHQgPSBjYWxsYmFjaygpO1xuICAgIC8vIFJldmVydCByZXN0b3JhdGlvbiB0byB3cmFwcGVkIHN0YXRlXG4gICAgT2JqZWN0LmtleXMod3JhcHBlZExldmVscykuZm9yRWFjaChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgICAgb3JpZ2luYWxDb25zb2xlW2xldmVsXSA9IHdyYXBwZWRMZXZlbHNbbGV2ZWxdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIEFkZHMgZXhjZXB0aW9uIHZhbHVlcywgdHlwZSBhbmQgdmFsdWUgdG8gYW4gc3ludGhldGljIEV4Y2VwdGlvbi5cbiAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHZhbHVlIFZhbHVlIG9mIHRoZSBleGNlcHRpb24uXG4gKiBAcGFyYW0gdHlwZSBUeXBlIG9mIHRoZSBleGNlcHRpb24uXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRFeGNlcHRpb25UeXBlVmFsdWUoZXZlbnQsIHZhbHVlLCB0eXBlKSB7XG4gICAgZXZlbnQuZXhjZXB0aW9uID0gZXZlbnQuZXhjZXB0aW9uIHx8IHt9O1xuICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMgPSBldmVudC5leGNlcHRpb24udmFsdWVzIHx8IFtdO1xuICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0gPSBldmVudC5leGNlcHRpb24udmFsdWVzWzBdIHx8IHt9O1xuICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0udmFsdWUgPSBldmVudC5leGNlcHRpb24udmFsdWVzWzBdLnZhbHVlIHx8IHZhbHVlIHx8ICcnO1xuICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0udHlwZSA9IGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0udHlwZSB8fCB0eXBlIHx8ICdFcnJvcic7XG59XG4vKipcbiAqIEFkZHMgZXhjZXB0aW9uIG1lY2hhbmlzbSB0byBhIGdpdmVuIGV2ZW50LlxuICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCB0byBtb2RpZnkuXG4gKiBAcGFyYW0gbWVjaGFuaXNtIE1lY2hhbmlzbSBvZiB0aGUgbWVjaGFuaXNtLlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkRXhjZXB0aW9uTWVjaGFuaXNtKGV2ZW50LCBtZWNoYW5pc20pIHtcbiAgICBpZiAobWVjaGFuaXNtID09PSB2b2lkIDApIHsgbWVjaGFuaXNtID0ge307IH1cbiAgICAvLyBUT0RPOiBVc2UgcmVhbCB0eXBlIHdpdGggYGtleW9mIE1lY2hhbmlzbWAgdGhpbmd5IGFuZCBtYXliZSBtYWtlIGl0IGJldHRlcj9cbiAgICB0cnkge1xuICAgICAgICAvLyBAdHMtaWdub3JlIFR5cGUgJ01lY2hhbmlzbSB8IHt9JyBpcyBub3QgYXNzaWduYWJsZSB0byB0eXBlICdNZWNoYW5pc20gfCB1bmRlZmluZWQnXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0ubWVjaGFuaXNtID0gZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS5tZWNoYW5pc20gfHwge307XG4gICAgICAgIE9iamVjdC5rZXlzKG1lY2hhbmlzbSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIE1lY2hhbmlzbSBoYXMgbm8gaW5kZXggc2lnbmF0dXJlXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS5tZWNoYW5pc21ba2V5XSA9IG1lY2hhbmlzbVtrZXldO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY2F0Y2ggKF9vTykge1xuICAgICAgICAvLyBuby1lbXB0eVxuICAgIH1cbn1cbi8qKlxuICogQSBzYWZlIGZvcm0gb2YgbG9jYXRpb24uaHJlZlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9jYXRpb25IcmVmKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuICAgIH1cbiAgICBjYXRjaCAob08pIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbn1cbi8vIGh0dHBzOi8vc2VtdmVyLm9yZy8jaXMtdGhlcmUtYS1zdWdnZXN0ZWQtcmVndWxhci1leHByZXNzaW9uLXJlZ2V4LXRvLWNoZWNrLWEtc2VtdmVyLXN0cmluZ1xudmFyIFNFTVZFUl9SRUdFWFAgPSAvXigwfFsxLTldXFxkKilcXC4oMHxbMS05XVxcZCopXFwuKDB8WzEtOV1cXGQqKSg/Oi0oKD86MHxbMS05XVxcZCp8XFxkKlthLXpBLVotXVswLTlhLXpBLVotXSopKD86XFwuKD86MHxbMS05XVxcZCp8XFxkKlthLXpBLVotXVswLTlhLXpBLVotXSopKSopKT8oPzpcXCsoWzAtOWEtekEtWi1dKyg/OlxcLlswLTlhLXpBLVotXSspKikpPyQvO1xuLyoqXG4gKiBQYXJzZXMgaW5wdXQgaW50byBhIFNlbVZlciBpbnRlcmZhY2VcbiAqIEBwYXJhbSBpbnB1dCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBzZW12ZXIgdmVyc2lvblxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTZW12ZXIoaW5wdXQpIHtcbiAgICB2YXIgbWF0Y2ggPSBpbnB1dC5tYXRjaChTRU1WRVJfUkVHRVhQKSB8fCBbXTtcbiAgICB2YXIgbWFqb3IgPSBwYXJzZUludChtYXRjaFsxXSwgMTApO1xuICAgIHZhciBtaW5vciA9IHBhcnNlSW50KG1hdGNoWzJdLCAxMCk7XG4gICAgdmFyIHBhdGNoID0gcGFyc2VJbnQobWF0Y2hbM10sIDEwKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBidWlsZG1ldGFkYXRhOiBtYXRjaFs1XSxcbiAgICAgICAgbWFqb3I6IGlzTmFOKG1ham9yKSA/IHVuZGVmaW5lZCA6IG1ham9yLFxuICAgICAgICBtaW5vcjogaXNOYU4obWlub3IpID8gdW5kZWZpbmVkIDogbWlub3IsXG4gICAgICAgIHBhdGNoOiBpc05hTihwYXRjaCkgPyB1bmRlZmluZWQgOiBwYXRjaCxcbiAgICAgICAgcHJlcmVsZWFzZTogbWF0Y2hbNF0sXG4gICAgfTtcbn1cbnZhciBkZWZhdWx0UmV0cnlBZnRlciA9IDYwICogMTAwMDsgLy8gNjAgc2Vjb25kc1xuLyoqXG4gKiBFeHRyYWN0cyBSZXRyeS1BZnRlciB2YWx1ZSBmcm9tIHRoZSByZXF1ZXN0IGhlYWRlciBvciByZXR1cm5zIGRlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSBub3cgY3VycmVudCB1bml4IHRpbWVzdGFtcFxuICogQHBhcmFtIGhlYWRlciBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgJ1JldHJ5LUFmdGVyJyBoZWFkZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUmV0cnlBZnRlckhlYWRlcihub3csIGhlYWRlcikge1xuICAgIGlmICghaGVhZGVyKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0UmV0cnlBZnRlcjtcbiAgICB9XG4gICAgdmFyIGhlYWRlckRlbGF5ID0gcGFyc2VJbnQoXCJcIiArIGhlYWRlciwgMTApO1xuICAgIGlmICghaXNOYU4oaGVhZGVyRGVsYXkpKSB7XG4gICAgICAgIHJldHVybiBoZWFkZXJEZWxheSAqIDEwMDA7XG4gICAgfVxuICAgIHZhciBoZWFkZXJEYXRlID0gRGF0ZS5wYXJzZShcIlwiICsgaGVhZGVyKTtcbiAgICBpZiAoIWlzTmFOKGhlYWRlckRhdGUpKSB7XG4gICAgICAgIHJldHVybiBoZWFkZXJEYXRlIC0gbm93O1xuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdFJldHJ5QWZ0ZXI7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWRkcyBjb250ZXh0IChwcmUvcG9zdC9saW5lKSBsaW5lcyB0byB0aGUgcHJvdmlkZWQgZnJhbWVcbiAqXG4gKiBAcGFyYW0gbGluZXMgc3RyaW5nW10gY29udGFpbmluZyBhbGwgbGluZXNcbiAqIEBwYXJhbSBmcmFtZSBTdGFja0ZyYW1lIHRoYXQgd2lsbCBiZSBtdXRhdGVkXG4gKiBAcGFyYW0gbGluZXNPZkNvbnRleHQgbnVtYmVyIG9mIGNvbnRleHQgbGluZXMgd2Ugd2FudCB0byBhZGQgcHJlL3Bvc3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZENvbnRleHRUb0ZyYW1lKGxpbmVzLCBmcmFtZSwgbGluZXNPZkNvbnRleHQpIHtcbiAgICBpZiAobGluZXNPZkNvbnRleHQgPT09IHZvaWQgMCkgeyBsaW5lc09mQ29udGV4dCA9IDU7IH1cbiAgICB2YXIgbGluZW5vID0gZnJhbWUubGluZW5vIHx8IDA7XG4gICAgdmFyIG1heExpbmVzID0gbGluZXMubGVuZ3RoO1xuICAgIHZhciBzb3VyY2VMaW5lID0gTWF0aC5tYXgoTWF0aC5taW4obWF4TGluZXMsIGxpbmVubyAtIDEpLCAwKTtcbiAgICBmcmFtZS5wcmVfY29udGV4dCA9IGxpbmVzXG4gICAgICAgIC5zbGljZShNYXRoLm1heCgwLCBzb3VyY2VMaW5lIC0gbGluZXNPZkNvbnRleHQpLCBzb3VyY2VMaW5lKVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChsaW5lKSB7IHJldHVybiBzbmlwTGluZShsaW5lLCAwKTsgfSk7XG4gICAgZnJhbWUuY29udGV4dF9saW5lID0gc25pcExpbmUobGluZXNbTWF0aC5taW4obWF4TGluZXMgLSAxLCBzb3VyY2VMaW5lKV0sIGZyYW1lLmNvbG5vIHx8IDApO1xuICAgIGZyYW1lLnBvc3RfY29udGV4dCA9IGxpbmVzXG4gICAgICAgIC5zbGljZShNYXRoLm1pbihzb3VyY2VMaW5lICsgMSwgbWF4TGluZXMpLCBzb3VyY2VMaW5lICsgMSArIGxpbmVzT2ZDb250ZXh0KVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChsaW5lKSB7IHJldHVybiBzbmlwTGluZShsaW5lLCAwKTsgfSk7XG59XG4vKipcbiAqIFN0cmlwIHRoZSBxdWVyeSBzdHJpbmcgYW5kIGZyYWdtZW50IG9mZiBvZiBhIGdpdmVuIFVSTCBvciBwYXRoIChpZiBwcmVzZW50KVxuICpcbiAqIEBwYXJhbSB1cmxQYXRoIEZ1bGwgVVJMIG9yIHBhdGgsIGluY2x1ZGluZyBwb3NzaWJsZSBxdWVyeSBzdHJpbmcgYW5kL29yIGZyYWdtZW50XG4gKiBAcmV0dXJucyBVUkwgb3IgcGF0aCB3aXRob3V0IHF1ZXJ5IHN0cmluZyBvciBmcmFnbWVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaXBVcmxRdWVyeUFuZEZyYWdtZW50KHVybFBhdGgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1lc2NhcGVcbiAgICByZXR1cm4gdXJsUGF0aC5zcGxpdCgvW1xcPyNdLywgMSlbMF07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1taXNjLmpzLm1hcCIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3NzbWVtIGZyb20gJ2Nzc21lbSc7XG5cbmltcG9ydCBEb3RzTG9hZGVyIGZyb20gJy4uL0RvdHNMb2FkZXInO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vQnV0dG9uLmNzcyc7XG5cbmV4cG9ydCBlbnVtIFNJWkUge1xuICBYTCA9ICd4bCcsXG4gIEwgPSAnbCcsXG4gIE0gPSAnbScsXG4gIFMgPSAncycsXG59XG5cbmV4cG9ydCBlbnVtIFZJRVcge1xuICBMSUdIVCA9ICdsaWdodCcsXG4gIEdIT1NUID0gJ2dob3N0JyxcbiAgRkxBVCA9ICdmbGF0Jyxcbn1cblxuZXhwb3J0IGVudW0gVFlQRSB7XG4gIEJVVFRPTiA9ICdidXR0b24nLFxuICBTVUJNSVQgPSAnc3VibWl0JyxcbiAgUkVTRVQgPSAncmVzZXQnLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgc2l6ZT86IFNJWkU7XG4gIHZpZXc/OiBWSUVXO1xuICB0eXBlPzogVFlQRTtcbiAgLyoqINCV0YHQu9C4INC/0LXRgNC10LTQsNC9LCDQutC90L7Qv9C60LAg0YHRgtCw0L3QvtCy0LjRgtGB0Y8g0YHRgdGL0LvQutC+0LkgKi9cbiAgaHJlZj86IHN0cmluZztcbiAgLyogdGFyZ2V0PVwiX2JsYW5rXCIgKi9cbiAgb3BlbkluTmV3VGFiPzogYm9vbGVhbjtcbiAgd2lkZT86IGJvb2xlYW47XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgZm9jdXNlZD86IGJvb2xlYW47XG4gIGxvYWRpbmc/OiBib29sZWFuO1xuICBvbkNsaWNrPzogKCkgPT4gdm9pZDtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBzdHlsZT86IFJlYWN0LkNTU1Byb3BlcnRpZXM7XG4gIHRlc3RpZD86IHN0cmluZztcbn1cblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuY29uc3QgQnV0dG9uOiBSZWFjdC5GQzxQcm9wcz4gPSAoe1xuICBjaGlsZHJlbixcbiAgc2l6ZSA9IFNJWkUuTSxcbiAgdmlldyxcbiAgdHlwZSxcbiAgaHJlZixcbiAgb3BlbkluTmV3VGFiLFxuICB3aWRlLFxuICBkaXNhYmxlZCxcbiAgZm9jdXNlZCxcbiAgbG9hZGluZyxcbiAgb25DbGljayxcbiAgY2xhc3NOYW1lLFxuICBzdHlsZSxcbiAgdGVzdGlkLFxufSkgPT4ge1xuICBjb25zdCB0cnVlRGlzYWJsZWQgPSBkaXNhYmxlZCB8fCBsb2FkaW5nO1xuICBjb25zdCBjbGFzc05hbWVzID0gZW0oJ2J1dHRvbicpKHsgc2l6ZSwgdmlldywgd2lkZSwgZm9jdXNlZCB9LCBjbGFzc05hbWUpO1xuICBjb25zdCBjb250ZW50ID0gbG9hZGluZyA/IDxEb3RzTG9hZGVyIHZpZXc9e3ZpZXd9IC8+IDogY2hpbGRyZW47XG4gIHJldHVybiBocmVmID8gKFxuICAgIDxhXG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXN9XG4gICAgICB0YWJJbmRleD17dHJ1ZURpc2FibGVkID8gLTEgOiAwfVxuICAgICAgZGF0YS1kaXNhYmxlZD17dHJ1ZURpc2FibGVkfVxuICAgICAgc3R5bGU9e3N0eWxlfVxuICAgICAgaHJlZj17dHJ1ZURpc2FibGVkID8gdW5kZWZpbmVkIDogaHJlZn1cbiAgICAgIHRhcmdldD17b3BlbkluTmV3VGFiID8gJ19ibGFuaycgOiB1bmRlZmluZWR9XG4gICAgICBkYXRhLXRlc3RpZD17dGVzdGlkfVxuICAgID5cbiAgICAgIHtjb250ZW50fVxuICAgIDwvYT5cbiAgKSA6IChcbiAgICA8YnV0dG9uXG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXN9XG4gICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgdGFiSW5kZXg9e3RydWVEaXNhYmxlZCA/IC0xIDogMH1cbiAgICAgIHN0eWxlPXtzdHlsZX1cbiAgICAgIGRpc2FibGVkPXt0cnVlRGlzYWJsZWR9XG4gICAgICB0eXBlPXt0eXBlfVxuICAgICAgZGF0YS10ZXN0aWQ9e3Rlc3RpZH1cbiAgICA+XG4gICAgICB7Y29udGVudH1cbiAgICA8L2J1dHRvbj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbjtcbiIsImltcG9ydCB7IF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBodG1sVHJlZUFzU3RyaW5nIH0gZnJvbSAnLi9icm93c2VyJztcbmltcG9ydCB7IGlzRWxlbWVudCwgaXNFcnJvciwgaXNFdmVudCwgaXNJbnN0YW5jZU9mLCBpc1BsYWluT2JqZWN0LCBpc1ByaW1pdGl2ZSwgaXNTeW50aGV0aWNFdmVudCB9IGZyb20gJy4vaXMnO1xuaW1wb3J0IHsgTWVtbyB9IGZyb20gJy4vbWVtbyc7XG5pbXBvcnQgeyBnZXRGdW5jdGlvbk5hbWUgfSBmcm9tICcuL3N0YWNrdHJhY2UnO1xuaW1wb3J0IHsgdHJ1bmNhdGUgfSBmcm9tICcuL3N0cmluZyc7XG4vKipcbiAqIFdyYXAgYSBnaXZlbiBvYmplY3QgbWV0aG9kIHdpdGggYSBoaWdoZXItb3JkZXIgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0gc291cmNlIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbWV0aG9kIHRvIGJlIHdyYXBwZWQuXG4gKiBAcGFyYW0gbmFtZSBBIG5hbWUgb2YgbWV0aG9kIHRvIGJlIHdyYXBwZWQuXG4gKiBAcGFyYW0gcmVwbGFjZW1lbnQgQSBmdW5jdGlvbiB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIHdyYXAgYSBnaXZlbiBtZXRob2QuXG4gKiBAcmV0dXJucyB2b2lkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaWxsKHNvdXJjZSwgbmFtZSwgcmVwbGFjZW1lbnQpIHtcbiAgICBpZiAoIShuYW1lIGluIHNvdXJjZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgb3JpZ2luYWwgPSBzb3VyY2VbbmFtZV07XG4gICAgdmFyIHdyYXBwZWQgPSByZXBsYWNlbWVudChvcmlnaW5hbCk7XG4gICAgLy8gTWFrZSBzdXJlIGl0J3MgYSBmdW5jdGlvbiBmaXJzdCwgYXMgd2UgbmVlZCB0byBhdHRhY2ggYW4gZW1wdHkgcHJvdG90eXBlIGZvciBgZGVmaW5lUHJvcGVydGllc2AgdG8gd29ya1xuICAgIC8vIG90aGVyd2lzZSBpdCdsbCB0aHJvdyBcIlR5cGVFcnJvcjogT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgY2FsbGVkIG9uIG5vbi1vYmplY3RcIlxuICAgIGlmICh0eXBlb2Ygd3JhcHBlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgd3JhcHBlZC5wcm90b3R5cGUgPSB3cmFwcGVkLnByb3RvdHlwZSB8fCB7fTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHdyYXBwZWQsIHtcbiAgICAgICAgICAgICAgICBfX3NlbnRyeV9vcmlnaW5hbF9fOiB7XG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogb3JpZ2luYWwsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChfT28pIHtcbiAgICAgICAgICAgIC8vIFRoaXMgY2FuIHRocm93IGlmIG11bHRpcGxlIGZpbGwgaGFwcGVucyBvbiBhIGdsb2JhbCBvYmplY3QgbGlrZSBYTUxIdHRwUmVxdWVzdFxuICAgICAgICAgICAgLy8gRml4ZXMgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvMjA0M1xuICAgICAgICB9XG4gICAgfVxuICAgIHNvdXJjZVtuYW1lXSA9IHdyYXBwZWQ7XG59XG4vKipcbiAqIEVuY29kZXMgZ2l2ZW4gb2JqZWN0IGludG8gdXJsLWZyaWVuZGx5IGZvcm1hdFxuICpcbiAqIEBwYXJhbSBvYmplY3QgQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgc2VyaWFsaXphYmxlIHZhbHVlc1xuICogQHJldHVybnMgc3RyaW5nIEVuY29kZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVybEVuY29kZShvYmplY3QpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqZWN0KVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQob2JqZWN0W2tleV0pOyB9KVxuICAgICAgICAuam9pbignJicpO1xufVxuLyoqXG4gKiBUcmFuc2Zvcm1zIGFueSBvYmplY3QgaW50byBhbiBvYmplY3QgbGl0ZXJhbCB3aXRoIGFsbCBpdCdzIGF0dHJpYnV0ZXNcbiAqIGF0dGFjaGVkIHRvIGl0LlxuICpcbiAqIEBwYXJhbSB2YWx1ZSBJbml0aWFsIHNvdXJjZSB0aGF0IHdlIGhhdmUgdG8gdHJhbnNmb3JtIGluIG9yZGVyIHRvIGJlIHVzYWJsZSBieSB0aGUgc2VyaWFsaXplclxuICovXG5mdW5jdGlvbiBnZXRXYWxrU291cmNlKHZhbHVlKSB7XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICAgIHZhciBlcnJvciA9IHZhbHVlO1xuICAgICAgICB2YXIgZXJyID0ge1xuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICAgIG5hbWU6IGVycm9yLm5hbWUsXG4gICAgICAgICAgICBzdGFjazogZXJyb3Iuc3RhY2ssXG4gICAgICAgIH07XG4gICAgICAgIGZvciAodmFyIGkgaW4gZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXJyb3IsIGkpKSB7XG4gICAgICAgICAgICAgICAgZXJyW2ldID0gZXJyb3JbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVycjtcbiAgICB9XG4gICAgaWYgKGlzRXZlbnQodmFsdWUpKSB7XG4gICAgICAgIHZhciBldmVudF8xID0gdmFsdWU7XG4gICAgICAgIHZhciBzb3VyY2UgPSB7fTtcbiAgICAgICAgc291cmNlLnR5cGUgPSBldmVudF8xLnR5cGU7XG4gICAgICAgIC8vIEFjY2Vzc2luZyBldmVudC50YXJnZXQgY2FuIHRocm93IChzZWUgZ2V0c2VudHJ5L3JhdmVuLWpzIzgzOCwgIzc2OClcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNvdXJjZS50YXJnZXQgPSBpc0VsZW1lbnQoZXZlbnRfMS50YXJnZXQpXG4gICAgICAgICAgICAgICAgPyBodG1sVHJlZUFzU3RyaW5nKGV2ZW50XzEudGFyZ2V0KVxuICAgICAgICAgICAgICAgIDogT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGV2ZW50XzEudGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoX29PKSB7XG4gICAgICAgICAgICBzb3VyY2UudGFyZ2V0ID0gJzx1bmtub3duPic7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNvdXJjZS5jdXJyZW50VGFyZ2V0ID0gaXNFbGVtZW50KGV2ZW50XzEuY3VycmVudFRhcmdldClcbiAgICAgICAgICAgICAgICA/IGh0bWxUcmVlQXNTdHJpbmcoZXZlbnRfMS5jdXJyZW50VGFyZ2V0KVxuICAgICAgICAgICAgICAgIDogT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGV2ZW50XzEuY3VycmVudFRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKF9vTykge1xuICAgICAgICAgICAgc291cmNlLmN1cnJlbnRUYXJnZXQgPSAnPHVua25vd24+JztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIEN1c3RvbUV2ZW50ICE9PSAndW5kZWZpbmVkJyAmJiBpc0luc3RhbmNlT2YodmFsdWUsIEN1c3RvbUV2ZW50KSkge1xuICAgICAgICAgICAgc291cmNlLmRldGFpbCA9IGV2ZW50XzEuZGV0YWlsO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgaW4gZXZlbnRfMSkge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChldmVudF8xLCBpKSkge1xuICAgICAgICAgICAgICAgIHNvdXJjZVtpXSA9IGV2ZW50XzE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuLyoqIENhbGN1bGF0ZXMgYnl0ZXMgc2l6ZSBvZiBpbnB1dCBzdHJpbmcgKi9cbmZ1bmN0aW9uIHV0ZjhMZW5ndGgodmFsdWUpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICAgIHJldHVybiB+LWVuY29kZVVSSSh2YWx1ZSkuc3BsaXQoLyUuLnwuLykubGVuZ3RoO1xufVxuLyoqIENhbGN1bGF0ZXMgYnl0ZXMgc2l6ZSBvZiBpbnB1dCBvYmplY3QgKi9cbmZ1bmN0aW9uIGpzb25TaXplKHZhbHVlKSB7XG4gICAgcmV0dXJuIHV0ZjhMZW5ndGgoSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbn1cbi8qKiBKU0RvYyAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZVRvU2l6ZShvYmplY3QsIFxuLy8gRGVmYXVsdCBOb2RlLmpzIFJFUEwgZGVwdGhcbmRlcHRoLCBcbi8vIDEwMGtCLCBhcyAyMDBrQiBpcyBtYXggcGF5bG9hZCBzaXplLCBzbyBoYWxmIHNvdW5kcyByZWFzb25hYmxlXG5tYXhTaXplKSB7XG4gICAgaWYgKGRlcHRoID09PSB2b2lkIDApIHsgZGVwdGggPSAzOyB9XG4gICAgaWYgKG1heFNpemUgPT09IHZvaWQgMCkgeyBtYXhTaXplID0gMTAwICogMTAyNDsgfVxuICAgIHZhciBzZXJpYWxpemVkID0gbm9ybWFsaXplKG9iamVjdCwgZGVwdGgpO1xuICAgIGlmIChqc29uU2l6ZShzZXJpYWxpemVkKSA+IG1heFNpemUpIHtcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZVRvU2l6ZShvYmplY3QsIGRlcHRoIC0gMSwgbWF4U2l6ZSk7XG4gICAgfVxuICAgIHJldHVybiBzZXJpYWxpemVkO1xufVxuLyoqIFRyYW5zZm9ybXMgYW55IGlucHV0IHZhbHVlIGludG8gYSBzdHJpbmcgZm9ybSwgZWl0aGVyIHByaW1pdGl2ZSB2YWx1ZSBvciBhIHR5cGUgb2YgdGhlIGlucHV0ICovXG5mdW5jdGlvbiBzZXJpYWxpemVWYWx1ZSh2YWx1ZSkge1xuICAgIHZhciB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAvLyBOb2RlLmpzIFJFUEwgbm90YXRpb25cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgICAgICByZXR1cm4gJ1tPYmplY3RdJztcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgICAgcmV0dXJuICdbQXJyYXldJztcbiAgICB9XG4gICAgdmFyIG5vcm1hbGl6ZWQgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgcmV0dXJuIGlzUHJpbWl0aXZlKG5vcm1hbGl6ZWQpID8gbm9ybWFsaXplZCA6IHR5cGU7XG59XG4vKipcbiAqIG5vcm1hbGl6ZVZhbHVlKClcbiAqXG4gKiBUYWtlcyB1bnNlcmlhbGl6YWJsZSBpbnB1dCBhbmQgbWFrZSBpdCBzZXJpYWxpemFibGUgZnJpZW5kbHlcbiAqXG4gKiAtIHRyYW5zbGF0ZXMgdW5kZWZpbmVkL05hTiB2YWx1ZXMgdG8gXCJbdW5kZWZpbmVkXVwiL1wiW05hTl1cIiByZXNwZWN0aXZlbHksXG4gKiAtIHNlcmlhbGl6ZXMgRXJyb3Igb2JqZWN0c1xuICogLSBmaWx0ZXIgZ2xvYmFsIG9iamVjdHNcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUsIGtleSkge1xuICAgIGlmIChrZXkgPT09ICdkb21haW4nICYmIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUuX2V2ZW50cykge1xuICAgICAgICByZXR1cm4gJ1tEb21haW5dJztcbiAgICB9XG4gICAgaWYgKGtleSA9PT0gJ2RvbWFpbkVtaXR0ZXInKSB7XG4gICAgICAgIHJldHVybiAnW0RvbWFpbkVtaXR0ZXJdJztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlID09PSBnbG9iYWwpIHtcbiAgICAgICAgcmV0dXJuICdbR2xvYmFsXSc7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSA9PT0gd2luZG93KSB7XG4gICAgICAgIHJldHVybiAnW1dpbmRvd10nO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSA9PT0gZG9jdW1lbnQpIHtcbiAgICAgICAgcmV0dXJuICdbRG9jdW1lbnRdJztcbiAgICB9XG4gICAgLy8gUmVhY3QncyBTeW50aGV0aWNFdmVudCB0aGluZ3lcbiAgICBpZiAoaXNTeW50aGV0aWNFdmVudCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICdbU3ludGhldGljRXZlbnRdJztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAnW05hTl0nO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gJ1t1bmRlZmluZWRdJztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gXCJbRnVuY3Rpb246IFwiICsgZ2V0RnVuY3Rpb25OYW1lKHZhbHVlKSArIFwiXVwiO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG4vKipcbiAqIFdhbGtzIGFuIG9iamVjdCB0byBwZXJmb3JtIGEgbm9ybWFsaXphdGlvbiBvbiBpdFxuICpcbiAqIEBwYXJhbSBrZXkgb2Ygb2JqZWN0IHRoYXQncyB3YWxrZWQgaW4gY3VycmVudCBpdGVyYXRpb25cbiAqIEBwYXJhbSB2YWx1ZSBvYmplY3QgdG8gYmUgd2Fsa2VkXG4gKiBAcGFyYW0gZGVwdGggT3B0aW9uYWwgbnVtYmVyIGluZGljYXRpbmcgaG93IGRlZXAgc2hvdWxkIHdhbGtpbmcgYmUgcGVyZm9ybWVkXG4gKiBAcGFyYW0gbWVtbyBPcHRpb25hbCBNZW1vIGNsYXNzIGhhbmRsaW5nIGRlY3ljbGluZ1xuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlc1xuZXhwb3J0IGZ1bmN0aW9uIHdhbGsoa2V5LCB2YWx1ZSwgZGVwdGgsIG1lbW8pIHtcbiAgICBpZiAoZGVwdGggPT09IHZvaWQgMCkgeyBkZXB0aCA9ICtJbmZpbml0eTsgfVxuICAgIGlmIChtZW1vID09PSB2b2lkIDApIHsgbWVtbyA9IG5ldyBNZW1vKCk7IH1cbiAgICAvLyBJZiB3ZSByZWFjaCB0aGUgbWF4aW11bSBkZXB0aCwgc2VyaWFsaXplIHdoYXRldmVyIGhhcyBsZWZ0XG4gICAgaWYgKGRlcHRoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBzZXJpYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuICAgIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcyAqL1xuICAgIC8vIElmIHZhbHVlIGltcGxlbWVudHMgYHRvSlNPTmAgbWV0aG9kLCBjYWxsIGl0IGFuZCByZXR1cm4gZWFybHlcbiAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgdmFsdWUudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS50b0pTT04oKTtcbiAgICB9XG4gICAgLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MgKi9cbiAgICAvLyBJZiBub3JtYWxpemVkIHZhbHVlIGlzIGEgcHJpbWl0aXZlLCB0aGVyZSBhcmUgbm8gYnJhbmNoZXMgbGVmdCB0byB3YWxrLCBzbyB3ZSBjYW4ganVzdCBiYWlsIG91dCwgYXMgdGhlcmVzIG5vIHBvaW50IGluIGdvaW5nIGRvd24gdGhhdCBicmFuY2ggYW55IGZ1cnRoZXJcbiAgICB2YXIgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlLCBrZXkpO1xuICAgIGlmIChpc1ByaW1pdGl2ZShub3JtYWxpemVkKSkge1xuICAgICAgICByZXR1cm4gbm9ybWFsaXplZDtcbiAgICB9XG4gICAgLy8gQ3JlYXRlIHNvdXJjZSB0aGF0IHdlIHdpbGwgdXNlIGZvciBuZXh0IGl0dGVyYXRpb25zLCBlaXRoZXIgb2JqZWN0aWZpZWQgZXJyb3Igb2JqZWN0IChFcnJvciB0eXBlIHdpdGggZXh0cmFjdGVkIGtleXM6dmFsdWUgcGFpcnMpIG9yIHRoZSBpbnB1dCBpdHNlbGZcbiAgICB2YXIgc291cmNlID0gZ2V0V2Fsa1NvdXJjZSh2YWx1ZSk7XG4gICAgLy8gQ3JlYXRlIGFuIGFjY3VtdWxhdG9yIHRoYXQgd2lsbCBhY3QgYXMgYSBwYXJlbnQgZm9yIGFsbCBmdXR1cmUgaXR0ZXJhdGlvbnMgb2YgdGhhdCBicmFuY2hcbiAgICB2YXIgYWNjID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBbXSA6IHt9O1xuICAgIC8vIElmIHdlIGFscmVhZHkgd2Fsa2VkIHRoYXQgYnJhbmNoLCBiYWlsIG91dCwgYXMgaXQncyBjaXJjdWxhciByZWZlcmVuY2VcbiAgICBpZiAobWVtby5tZW1vaXplKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gJ1tDaXJjdWxhciB+XSc7XG4gICAgfVxuICAgIC8vIFdhbGsgYWxsIGtleXMgb2YgdGhlIHNvdXJjZVxuICAgIGZvciAodmFyIGlubmVyS2V5IGluIHNvdXJjZSkge1xuICAgICAgICAvLyBBdm9pZCBpdGVyYXRpbmcgb3ZlciBmaWVsZHMgaW4gdGhlIHByb3RvdHlwZSBpZiB0aGV5J3ZlIHNvbWVob3cgYmVlbiBleHBvc2VkIHRvIGVudW1lcmF0aW9uLlxuICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGlubmVyS2V5KSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgd2FsayB0aHJvdWdoIGFsbCB0aGUgY2hpbGQgbm9kZXNcbiAgICAgICAgYWNjW2lubmVyS2V5XSA9IHdhbGsoaW5uZXJLZXksIHNvdXJjZVtpbm5lcktleV0sIGRlcHRoIC0gMSwgbWVtbyk7XG4gICAgfVxuICAgIC8vIE9uY2Ugd2Fsa2VkIHRocm91Z2ggYWxsIHRoZSBicmFuY2hlcywgcmVtb3ZlIHRoZSBwYXJlbnQgZnJvbSBtZW1vIHN0b3JhZ2VcbiAgICBtZW1vLnVubWVtb2l6ZSh2YWx1ZSk7XG4gICAgLy8gUmV0dXJuIGFjY3VtdWxhdGVkIHZhbHVlc1xuICAgIHJldHVybiBhY2M7XG59XG4vKipcbiAqIG5vcm1hbGl6ZSgpXG4gKlxuICogLSBDcmVhdGVzIGEgY29weSB0byBwcmV2ZW50IG9yaWdpbmFsIGlucHV0IG11dGF0aW9uXG4gKiAtIFNraXAgbm9uLWVudW1lcmFibGVyc1xuICogLSBDYWxscyBgdG9KU09OYCBpZiBpbXBsZW1lbnRlZFxuICogLSBSZW1vdmVzIGNpcmN1bGFyIHJlZmVyZW5jZXNcbiAqIC0gVHJhbnNsYXRlcyBub24tc2VyaWFsaXplYWJsZSB2YWx1ZXMgKHVuZGVmaW5lZC9OYU4vRnVuY3Rpb25zKSB0byBzZXJpYWxpemFibGUgZm9ybWF0XG4gKiAtIFRyYW5zbGF0ZXMga25vd24gZ2xvYmFsIG9iamVjdHMvQ2xhc3NlcyB0byBhIHN0cmluZyByZXByZXNlbnRhdGlvbnNcbiAqIC0gVGFrZXMgY2FyZSBvZiBFcnJvciBvYmplY3RzIHNlcmlhbGl6YXRpb25cbiAqIC0gT3B0aW9uYWxseSBsaW1pdCBkZXB0aCBvZiBmaW5hbCBvdXRwdXRcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemUoaW5wdXQsIGRlcHRoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoaW5wdXQsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7IHJldHVybiB3YWxrKGtleSwgdmFsdWUsIGRlcHRoKTsgfSkpO1xuICAgIH1cbiAgICBjYXRjaCAoX29PKSB7XG4gICAgICAgIHJldHVybiAnKipub24tc2VyaWFsaXphYmxlKionO1xuICAgIH1cbn1cbi8qKlxuICogR2l2ZW4gYW55IGNhcHR1cmVkIGV4Y2VwdGlvbiwgZXh0cmFjdCBpdHMga2V5cyBhbmQgY3JlYXRlIGEgc29ydGVkXG4gKiBhbmQgdHJ1bmNhdGVkIGxpc3QgdGhhdCB3aWxsIGJlIHVzZWQgaW5zaWRlIHRoZSBldmVudCBtZXNzYWdlLlxuICogZWcuIGBOb24tZXJyb3IgZXhjZXB0aW9uIGNhcHR1cmVkIHdpdGgga2V5czogZm9vLCBiYXIsIGJhemBcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0RXhjZXB0aW9uS2V5c0Zvck1lc3NhZ2UoZXhjZXB0aW9uLCBtYXhMZW5ndGgpIHtcbiAgICBpZiAobWF4TGVuZ3RoID09PSB2b2lkIDApIHsgbWF4TGVuZ3RoID0gNDA7IH1cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGdldFdhbGtTb3VyY2UoZXhjZXB0aW9uKSk7XG4gICAga2V5cy5zb3J0KCk7XG4gICAgaWYgKCFrZXlzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gJ1tvYmplY3QgaGFzIG5vIGtleXNdJztcbiAgICB9XG4gICAgaWYgKGtleXNbMF0ubGVuZ3RoID49IG1heExlbmd0aCkge1xuICAgICAgICByZXR1cm4gdHJ1bmNhdGUoa2V5c1swXSwgbWF4TGVuZ3RoKTtcbiAgICB9XG4gICAgZm9yICh2YXIgaW5jbHVkZWRLZXlzID0ga2V5cy5sZW5ndGg7IGluY2x1ZGVkS2V5cyA+IDA7IGluY2x1ZGVkS2V5cy0tKSB7XG4gICAgICAgIHZhciBzZXJpYWxpemVkID0ga2V5cy5zbGljZSgwLCBpbmNsdWRlZEtleXMpLmpvaW4oJywgJyk7XG4gICAgICAgIGlmIChzZXJpYWxpemVkLmxlbmd0aCA+IG1heExlbmd0aCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2x1ZGVkS2V5cyA9PT0ga2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBzZXJpYWxpemVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVuY2F0ZShzZXJpYWxpemVkLCBtYXhMZW5ndGgpO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG59XG4vKipcbiAqIEdpdmVuIGFueSBvYmplY3QsIHJldHVybiB0aGUgbmV3IG9iamVjdCB3aXRoIHJlbW92ZWQga2V5cyB0aGF0IHZhbHVlIHdhcyBgdW5kZWZpbmVkYC5cbiAqIFdvcmtzIHJlY3Vyc2l2ZWx5IG9uIG9iamVjdHMgYW5kIGFycmF5cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRyb3BVbmRlZmluZWRLZXlzKHZhbCkge1xuICAgIHZhciBlXzEsIF9hO1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgICAgdmFyIG9iaiA9IHZhbDtcbiAgICAgICAgdmFyIHJ2ID0ge307XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKE9iamVjdC5rZXlzKG9iaikpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IF9jLnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqW2tleV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJ2W2tleV0gPSBkcm9wVW5kZWZpbmVkS2V5cyhvYmpba2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJ2O1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIHJldHVybiB2YWwubWFwKGRyb3BVbmRlZmluZWRLZXlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9iamVjdC5qcy5tYXAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcblxuLypnbG9iYWwgdG9TdHJpbmc6dHJ1ZSovXG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWwpIHtcbiAgaWYgKHRvU3RyaW5nLmNhbGwodmFsKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiBwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFtrZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICogQHJldHVybiB7c3RyaW5nfSBjb250ZW50IHZhbHVlIHdpdGhvdXQgQk9NXG4gKi9cbmZ1bmN0aW9uIHN0cmlwQk9NKGNvbnRlbnQpIHtcbiAgaWYgKGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdDogaXNQbGFpbk9iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltLFxuICBzdHJpcEJPTTogc3RyaXBCT01cbn07XG4iLCJpbXBvcnQgeyBicm93c2VyIH0gZnJvbSAnd2ViZXh0ZW5zaW9uLXBvbHlmaWxsLXRzJztcblxuZXhwb3J0IGNvbnN0IGJhc2VVUkw6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gIEIyQjpcbiAgICBwcm9jZXNzLmVudi5BUElfRU5WID09PSAncHJvZHVjdGlvbidcbiAgICAgID8gJ2h0dHBzOi8vd3d3LnJhdGVoYXdrLmNvbSdcbiAgICAgIDogJ2h0dHBzOi8vcmF0ZWhhd2sucC5vc3Ryb3Zvay5ydScsXG4gIE9TVFJPVk9LOiAnaHR0cHM6Ly9vc3Ryb3Zvay5ydScsXG4gIFBBUlRORVJTOlxuICAgIHByb2Nlc3MuZW52LkFQSV9FTlYgPT09ICdwcm9kdWN0aW9uJ1xuICAgICAgPyAnaHR0cHM6Ly9wYXJ0bmVyLm9zdHJvdm9rLnJ1J1xuICAgICAgOiAnaHR0cHM6Ly9wYXJ0bmVyLnAub3N0cm92b2sucnUnLFxuICBBUEk6XG4gICAgcHJvY2Vzcy5lbnYuQVBJX0VOViA9PT0gJ3Byb2R1Y3Rpb24nXG4gICAgICA/ICdodHRwczovL2FwaS53b3JsZG90YS5uZXQnXG4gICAgICA6ICdodHRwOi8vZGFwaS5wLm9zdHJvdm9rLnJ1Jyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgLy8gQjJCXG4gIEIyQjogYmFzZVVSTC5CMkIsXG4gIEIyQl9IT1RFTFM6IGAke2Jhc2VVUkwuQjJCfS9ob3RlbHMvYCxcbiAgQjJCX1JPT01TOiBgJHtiYXNlVVJMLkIyQn0vcm9vbXMvYCxcbiAgSE9URUxTOiBgJHtiYXNlVVJMLlBBUlRORVJTfS9hcGkvZXh0ZW5zaW9uL3YxL2hvdGVsX3N0YXRpYy9gLFxuICBSRUdJU1RSQVRJT046IGAke2Jhc2VVUkwuQjJCfS9yZWdpc3RyYXRpb25gLFxuICBTRUFSQ0hfSFA6IGAke2Jhc2VVUkwuQVBJfS9hcGkvYjJiL3YzL3NlYXJjaC9ocC9leHRgLFxuICBTRUFSQ0hfU0VSUDogYCR7YmFzZVVSTC5BUEl9L2FwaS9iMmIvdjMvc2VhcmNoL3NlcnAvZXh0YCxcblxuICAvLyBBdXRoXG4gIEdFVF9QQVJUTkVSU19BVVRIX0tFWTogYCR7YmFzZVVSTC5CMkJ9L3BhcnRuZXJzL2Zyb250ZW5kL3YzL3Byb3h5L2V4dGVuc2lvbi9hdXRoL2AsXG4gIFJFU1RPUkVfUEFTU1dPUkQ6IGAke2Jhc2VVUkwuQjJCfS9wYXJ0bmVycy9mcm9udGVuZC92NC9wcm94eS9wYXNzd29yZC9yZWNvdmVyeS9gLFxuICBTSUdOX0lOOiBgJHtiYXNlVVJMLkIyQn0vYXBpL3YzL3NpdGUvYWNjb3VudHMvbG9naW4vYCxcbiAgU0lHTl9PVVQ6IGAke2Jhc2VVUkwuQjJCfS9hY2NvdW50cy9sb2dvdXQvYCxcblxuICAvLyBBbmFseXRpY3NcbiAgRlVOTkVMOiAnaHR0cHM6Ly9jbnQud29ybGRvdGEubmV0L2Z1bm5lbC5qcycsXG4gIEhDX0NIUk9NRV9GT1JNX1BJTkdFUjogYCR7YmFzZVVSTC5CMkJ9L2hjL2Nocm9tZWZvcm0vcGluZ2VyYCxcbiAgSENfQ0hST01FX0ZPUk1fVEFCOiBgJHtiYXNlVVJMLk9TVFJPVk9LfS9oYy9jaHJvbWVmb3JtL3RhYmAsXG4gIEhDX0VYVEVOU0lPTl9TRVJQOiBgJHtiYXNlVVJMLkIyQn0vaGMvZXh0ZW5zaW9uL3NlcnBgLFxuICBIQ19SVU06IGAke2Jhc2VVUkwuQjJCfS9oYy9ydW0uZ2lmYCxcblxuICAvLyBFeGFtcGxlc1xuICBGSVJTVF9FWEFNUExFOiAnaHR0cHM6Ly93d3cuYm9va2luZy5jb20vaG90ZWwvZnIvdGltcXVhcnRpZXJsYXRpbnBhbnRoZW8nLFxuXG4gIC8vIFNldHRpbmdzXG4gIExJVkVfU0VUVElOR1M6IGAke2Jhc2VVUkwuQjJCfS9hcGkvdjEvZ3Jvd3RoL2V4dC9jb25mL2AsXG5cbiAgLy8gUHJvbW9jb2Rlc1xuICBQUk9NT0NPREU6IGAke2Jhc2VVUkwuQjJCfS9hcGkvdjEvZ3Jvd3RoL2V4dC9wcm9tb2NvZGUvYCxcbiAgUFJPTU9DT0RFUzogYCR7YmFzZVVSTC5CMkJ9L2FwaS92MS9ncm93dGgvZXh0L3Byb21vY29kZXMvYCxcblxuICAvLyBDaHJvbWUgc3RvcmUgcmV2aWV3c1xuICBDSFJPTUVfU1RPUkVfUkVWSUVXUzogYGh0dHBzOi8vY2hyb21lLmdvb2dsZS5jb20vd2Vic3RvcmUvZGV0YWlsLyR7YnJvd3Nlci5ydW50aW1lLmlkfS9yZXZpZXdzYCxcblxuICAvLyBFdGNcbiAgQ0hST01FX0VYVEVOU0lPTlM6ICdjaHJvbWU6Ly9leHRlbnNpb25zLycsXG4gIENIUk9NRV9ORVdfVEFCOiAnY2hyb21lOi8vbmV3dGFiLycsXG4gIEVYVEVOU0lPTl9FTUFJTDogJ2V4dGVuc2lvbkByYXRlaGF3ay5jb20nLFxuICBMQU5ESU5HOiAnaHR0cHM6Ly93d3cucmF0ZWhhd2suY29tL3RyYXZlbC9leHRlbnNpb25fci8nLFxuICBQUklWQUNZX1BPTElDWTogJ2h0dHBzOi8vb3N0cm92b2sucnUvbGVnYWwvc2l0ZS9wcml2YWN5LXBvbGljeS8nLFxufTtcbiIsIi8qXG5Db3B5cmlnaHQgKGMpIDIwMTQsIFlhaG9vISBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5Db3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuXG5TZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuKi9cbnZhciBfX3NwcmVhZEFycmF5cyA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheXMpIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxuICAgICAgICAgICAgcltrXSA9IGFbal07XG4gICAgcmV0dXJuIHI7XG59O1xuLy8gLS0gVXRpbGl0aWVzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIGdldENhY2hlSWQoaW5wdXRzKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGlucHV0cy5tYXAoZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCAmJiB0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnID8gb3JkZXJlZFByb3BzKGlucHV0KSA6IGlucHV0O1xuICAgIH0pKTtcbn1cbmZ1bmN0aW9uIG9yZGVyZWRQcm9wcyhvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKVxuICAgICAgICAuc29ydCgpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGspIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0ge30sIF9hW2tdID0gb2JqW2tdLCBfYSk7XG4gICAgfSk7XG59XG52YXIgbWVtb2l6ZUZvcm1hdENvbnN0cnVjdG9yID0gZnVuY3Rpb24gKEZvcm1hdENvbnN0cnVjdG9yLCBjYWNoZSkge1xuICAgIGlmIChjYWNoZSA9PT0gdm9pZCAwKSB7IGNhY2hlID0ge307IH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhY2hlSWQgPSBnZXRDYWNoZUlkKGFyZ3MpO1xuICAgICAgICB2YXIgZm9ybWF0ID0gY2FjaGVJZCAmJiBjYWNoZVtjYWNoZUlkXTtcbiAgICAgICAgaWYgKCFmb3JtYXQpIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IG5ldyAoKF9hID0gRm9ybWF0Q29uc3RydWN0b3IpLmJpbmQuYXBwbHkoX2EsIF9fc3ByZWFkQXJyYXlzKFt2b2lkIDBdLCBhcmdzKSkpKCk7XG4gICAgICAgICAgICBpZiAoY2FjaGVJZCkge1xuICAgICAgICAgICAgICAgIGNhY2hlW2NhY2hlSWRdID0gZm9ybWF0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfTtcbn07XG5leHBvcnQgZGVmYXVsdCBtZW1vaXplRm9ybWF0Q29uc3RydWN0b3I7XG4iLCJpbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbi8qKlxuICogQG5hbWUgdG9EYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICoqTm90ZSoqOiAqYWxsKiBEYXRlIGFyZ3VtZW50cyBwYXNzZWQgdG8gYW55ICpkYXRlLWZucyogZnVuY3Rpb24gaXMgcHJvY2Vzc2VkIGJ5IGB0b0RhdGVgLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENsb25lIHRoZSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKG5ldyBEYXRlKDIwMTQsIDEsIDExLCAxMSwgMzAsIDMwKSlcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgdGhlIHRpbWVzdGFtcCB0byBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKDEzOTIwOTg0MzAwMDApXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvRGF0ZShhcmd1bWVudCkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGFyZ1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCk7IC8vIENsb25lIHRoZSBkYXRlXG5cbiAgaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZSB8fCB0eXBlb2YgYXJndW1lbnQgPT09ICdvYmplY3QnICYmIGFyZ1N0ciA9PT0gJ1tvYmplY3QgRGF0ZV0nKSB7XG4gICAgLy8gUHJldmVudCB0aGUgZGF0ZSB0byBsb3NlIHRoZSBtaWxsaXNlY29uZHMgd2hlbiBwYXNzZWQgdG8gbmV3IERhdGUoKSBpbiBJRTEwXG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50LmdldFRpbWUoKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnbnVtYmVyJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IE51bWJlcl0nKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoKHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N0cmluZycgfHwgYXJnU3RyID09PSAnW29iamVjdCBTdHJpbmddJykgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFwiU3RhcnRpbmcgd2l0aCB2Mi4wLjAtYmV0YS4xIGRhdGUtZm5zIGRvZXNuJ3QgYWNjZXB0IHN0cmluZ3MgYXMgYXJndW1lbnRzLiBQbGVhc2UgdXNlIGBwYXJzZUlTT2AgdG8gcGFyc2Ugc3RyaW5ncy4gU2VlOiBodHRwczovL2dpdC5pby9manVsZVwiKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcblxuICAgICAgY29uc29sZS53YXJuKG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxufSIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IGNzc21lbSBmcm9tICdjc3NtZW0nO1xuXG5pbXBvcnQgQnV0dG9uUmFkaW8gZnJvbSAnY29tcG9uZW50cy9CdXR0b25SYWRpbyc7XG5pbXBvcnQgSW5wdXQsIHsgU0laRSB9IGZyb20gJ2NvbXBvbmVudHMvSW5wdXQnO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vUm93LmNzcyc7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmV4cG9ydCBlbnVtIFByaWNlU2V0dGluZyB7XG4gIE9GRiA9ICdPRkYnLFxuICBHUk9TUyA9ICdHUk9TUycsXG4gIE5FVCA9ICdORVQnLFxufVxuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBuYW1lOiBzdHJpbmc7XG4gIHNldHRpbmc6IFByaWNlU2V0dGluZztcbiAgcGVyY2VudDogbnVtYmVyO1xuICBjb21wZXRpdG9ySWQ6IHN0cmluZztcbiAgaGFzRXJyb3I6IGJvb2xlYW47XG4gIHVwZGF0ZVNldHRpbmdzKG5hbWU6IHN0cmluZywgY29tcGV0aXRvckRhdGE6IGFueSk6IHZvaWQ7XG4gIHNlbmRFcnJvcihjb21wZXRpdG9ySWQ6IHN0cmluZywgaXNFcnJvcjogYm9vbGVhbik6IHZvaWQ7XG4gIHVzZXJCYXNpY01hcmt1cDogbnVtYmVyO1xufVxuXG5leHBvcnQgY29uc3QgTkVUX1BFUkNFTlQgPSAwO1xuXG5jb25zdCBSb3c6IFJlYWN0LkZDPFByb3BzPiA9ICh7XG4gIG5hbWUsXG4gIHNldHRpbmcsXG4gIHBlcmNlbnQsXG4gIHVwZGF0ZVNldHRpbmdzLFxuICBjb21wZXRpdG9ySWQsXG4gIHNlbmRFcnJvcixcbiAgaGFzRXJyb3IsXG4gIHVzZXJCYXNpY01hcmt1cCxcbn0pID0+IHtcbiAgY29uc3QgW2lucHV0VmFsdWUsIHNldElucHV0VmFsdWVdID0gdXNlU3RhdGUoYCR7cGVyY2VudH1gKTtcbiAgY29uc3QgW2NoZWNrZWRTZXR0aW5nLCBzZXRDaGVja2VkU2V0dGluZ10gPSB1c2VTdGF0ZTxQcmljZVNldHRpbmc+KHNldHRpbmcpO1xuXG4gIGNvbnN0IHBlcmNlbnRJY29uID0gPGRpdiBjbGFzc05hbWU9e2VtKCdwZXJjZW50SWNvbicpKCl9PiU8L2Rpdj47XG5cbiAgY29uc3QgZ2V0SW5wdXRWYWx1ZSA9ICgpID0+XG4gICAgY2hlY2tlZFNldHRpbmcgPT09IFByaWNlU2V0dGluZy5HUk9TUyA/IGlucHV0VmFsdWUgOiBORVRfUEVSQ0VOVDtcblxuICBjb25zdCBpc0lucHV0VmFsaWQgPSAodmFsdWU6IHN0cmluZykgPT5cbiAgICAhISghTnVtYmVyLmlzTmFOKCt2YWx1ZSkgJiYgdmFsdWUudHJpbSgpICYmICt2YWx1ZSA+PSAwICYmICt2YWx1ZSA8IDEwMCk7XG5cbiAgY29uc3Qgb25JbnB1dEJsdXIgPSAoKSA9PiB7XG4gICAgaWYgKCFpc0lucHV0VmFsaWQoaW5wdXRWYWx1ZSkpIHtcbiAgICAgIHNlbmRFcnJvcihjb21wZXRpdG9ySWQsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZW5kRXJyb3IoY29tcGV0aXRvcklkLCBmYWxzZSk7XG4gICAgICB1cGRhdGVTZXR0aW5ncyhjb21wZXRpdG9ySWQsIHsgcGVyY2VudDogK2lucHV0VmFsdWUgfSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IG9uQnV0dG9uUmFkaW9DaGFuZ2UgPSAoY2hlY2tlZEJ0bjogUHJpY2VTZXR0aW5nKSA9PiB7XG4gICAgdXBkYXRlU2V0dGluZ3MoY29tcGV0aXRvcklkLCB7IHNldHRpbmc6IGNoZWNrZWRCdG4gfSk7XG4gICAgc2V0Q2hlY2tlZFNldHRpbmcoY2hlY2tlZEJ0bik7XG5cbiAgICBpZiAoY2hlY2tlZEJ0biAhPT0gUHJpY2VTZXR0aW5nLkdST1NTICYmIGdldElucHV0SGFzRXJyb3IoKSkge1xuICAgICAgc2VuZEVycm9yKGNvbXBldGl0b3JJZCwgZmFsc2UpO1xuICAgIH1cblxuICAgIGlmIChjaGVja2VkQnRuID09PSBQcmljZVNldHRpbmcuR1JPU1MpIHtcbiAgICAgIHNldElucHV0VmFsdWUoYCR7dXNlckJhc2ljTWFya3VwfWApO1xuICAgICAgdXBkYXRlU2V0dGluZ3MoY29tcGV0aXRvcklkLCB7IHBlcmNlbnQ6IHVzZXJCYXNpY01hcmt1cCB9KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgZ2V0SW5wdXRIYXNFcnJvciA9ICgpID0+XG4gICAgY2hlY2tlZFNldHRpbmcgPT09IFByaWNlU2V0dGluZy5HUk9TUyA/IGhhc0Vycm9yIDogZmFsc2U7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ3JvdycpKCl9PlxuICAgICAgPGg1IGNsYXNzTmFtZT17ZW0oJ3Jvd1RpdGxlJykoKX0+e25hbWV9PC9oNT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnY29udHJvbGxzJykoKX0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgncmFkaW9Hcm91cCcpKCl9PlxuICAgICAgICAgIDxCdXR0b25SYWRpb1xuICAgICAgICAgICAgY2xhc3NOYW1lPXtlbSgnQnV0dG9uUmFkaW8nKSgpfVxuICAgICAgICAgICAgdGV4dD17UHJpY2VTZXR0aW5nLk9GRn1cbiAgICAgICAgICAgIHZhbHVlPXtQcmljZVNldHRpbmcuT0ZGfVxuICAgICAgICAgICAgY2hlY2tlZD17Y2hlY2tlZFNldHRpbmcgPT09IFByaWNlU2V0dGluZy5PRkZ9XG4gICAgICAgICAgICBvbkNoYW5nZT17KCkgPT4gb25CdXR0b25SYWRpb0NoYW5nZShQcmljZVNldHRpbmcuT0ZGKX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxCdXR0b25SYWRpb1xuICAgICAgICAgICAgY2xhc3NOYW1lPXtlbSgnQnV0dG9uUmFkaW8nKSgpfVxuICAgICAgICAgICAgdGV4dD17UHJpY2VTZXR0aW5nLk5FVH1cbiAgICAgICAgICAgIHZhbHVlPXtQcmljZVNldHRpbmcuTkVUfVxuICAgICAgICAgICAgY2hlY2tlZD17Y2hlY2tlZFNldHRpbmcgPT09IFByaWNlU2V0dGluZy5ORVR9XG4gICAgICAgICAgICBvbkNoYW5nZT17KCkgPT4gb25CdXR0b25SYWRpb0NoYW5nZShQcmljZVNldHRpbmcuTkVUKX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxCdXR0b25SYWRpb1xuICAgICAgICAgICAgY2xhc3NOYW1lPXtlbSgnQnV0dG9uUmFkaW8nKSgpfVxuICAgICAgICAgICAgdGV4dD17UHJpY2VTZXR0aW5nLkdST1NTfVxuICAgICAgICAgICAgdmFsdWU9e1ByaWNlU2V0dGluZy5HUk9TU31cbiAgICAgICAgICAgIGNoZWNrZWQ9e2NoZWNrZWRTZXR0aW5nID09PSBQcmljZVNldHRpbmcuR1JPU1N9XG4gICAgICAgICAgICBvbkNoYW5nZT17KCkgPT4gb25CdXR0b25SYWRpb0NoYW5nZShQcmljZVNldHRpbmcuR1JPU1MpfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2lucHV0V3JhcHBlcicpKCl9PlxuICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgY2xhc3NOYW1lPXtgJHtlbSgnaW5wdXQnKSgpfSAke1xuICAgICAgICAgICAgICBjaGVja2VkU2V0dGluZyA9PT0gUHJpY2VTZXR0aW5nLk9GRiA/IGVtKCdpbnB1dERpc2FibGVkJykoKSA6ICcnXG4gICAgICAgICAgICB9YH1cbiAgICAgICAgICAgIGRpc2FibGVkPXtjaGVja2VkU2V0dGluZyAhPT0gUHJpY2VTZXR0aW5nLkdST1NTfVxuICAgICAgICAgICAgaGFzRXJyb3I9e2dldElucHV0SGFzRXJyb3IoKX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoZTogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcbiAgICAgICAgICAgICAgc2V0SW5wdXRWYWx1ZShlLnRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgb25CbHVyPXtvbklucHV0Qmx1cn1cbiAgICAgICAgICAgIHZhbHVlPXtnZXRJbnB1dFZhbHVlKCl9XG4gICAgICAgICAgICBpY29uPXtwZXJjZW50SWNvbn1cbiAgICAgICAgICAgIHNpemU9e1NJWkUuU31cbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtgJHtORVRfUEVSQ0VOVH1gfVxuICAgICAgICAgICAgd2lkZVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSb3c7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcblxuLypnbG9iYWwgdG9TdHJpbmc6dHJ1ZSovXG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOYXRpdmVTY3JpcHQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOUycpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBGdW5jdGlvbiBlcXVhbCB0byBtZXJnZSB3aXRoIHRoZSBkaWZmZXJlbmNlIGJlaW5nIHRoYXQgbm8gcmVmZXJlbmNlXG4gKiB0byBvcmlnaW5hbCBvYmplY3RzIGlzIGtlcHQuXG4gKlxuICogQHNlZSBtZXJnZVxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gZGVlcE1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gZGVlcE1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gZGVlcE1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGRlZXBNZXJnZTogZGVlcE1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGludmFyaWFudEludGxDb250ZXh0IH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgQ29udGV4dCB9IGZyb20gJy4vaW5qZWN0SW50bCc7XG52YXIgRGlzcGxheU5hbWU7XG4oZnVuY3Rpb24gKERpc3BsYXlOYW1lKSB7XG4gICAgRGlzcGxheU5hbWVbXCJmb3JtYXREYXRlXCJdID0gXCJGb3JtYXR0ZWREYXRlXCI7XG4gICAgRGlzcGxheU5hbWVbXCJmb3JtYXRUaW1lXCJdID0gXCJGb3JtYXR0ZWRUaW1lXCI7XG4gICAgRGlzcGxheU5hbWVbXCJmb3JtYXROdW1iZXJcIl0gPSBcIkZvcm1hdHRlZE51bWJlclwiO1xuICAgIERpc3BsYXlOYW1lW1wiZm9ybWF0TGlzdFwiXSA9IFwiRm9ybWF0dGVkTGlzdFwiO1xuICAgIC8vIE5vdGUgdGhhdCB0aGlzIERpc3BsYXlOYW1lIGlzIHRoZSBsb2NhbGUgZGlzcGxheSBuYW1lLCBub3QgdG8gYmUgY29uZnVzZWQgd2l0aFxuICAgIC8vIHRoZSBuYW1lIG9mIHRoZSBlbnVtLCB3aGljaCBpcyBmb3IgUmVhY3QgY29tcG9uZW50IGRpc3BsYXkgbmFtZSBpbiBkZXYgdG9vbHMuXG4gICAgRGlzcGxheU5hbWVbXCJmb3JtYXREaXNwbGF5TmFtZVwiXSA9IFwiRm9ybWF0dGVkRGlzcGxheU5hbWVcIjtcbn0pKERpc3BsYXlOYW1lIHx8IChEaXNwbGF5TmFtZSA9IHt9KSk7XG52YXIgRGlzcGxheU5hbWVQYXJ0cztcbihmdW5jdGlvbiAoRGlzcGxheU5hbWVQYXJ0cykge1xuICAgIERpc3BsYXlOYW1lUGFydHNbXCJmb3JtYXREYXRlXCJdID0gXCJGb3JtYXR0ZWREYXRlUGFydHNcIjtcbiAgICBEaXNwbGF5TmFtZVBhcnRzW1wiZm9ybWF0VGltZVwiXSA9IFwiRm9ybWF0dGVkVGltZVBhcnRzXCI7XG4gICAgRGlzcGxheU5hbWVQYXJ0c1tcImZvcm1hdE51bWJlclwiXSA9IFwiRm9ybWF0dGVkTnVtYmVyUGFydHNcIjtcbiAgICBEaXNwbGF5TmFtZVBhcnRzW1wiZm9ybWF0TGlzdFwiXSA9IFwiRm9ybWF0dGVkTGlzdFBhcnRzXCI7XG59KShEaXNwbGF5TmFtZVBhcnRzIHx8IChEaXNwbGF5TmFtZVBhcnRzID0ge30pKTtcbmV4cG9ydCBjb25zdCBGb3JtYXR0ZWROdW1iZXJQYXJ0cyA9IHByb3BzID0+IChSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHQuQ29uc3VtZXIsIG51bGwsIChpbnRsKSA9PiB7XG4gICAgaW52YXJpYW50SW50bENvbnRleHQoaW50bCk7XG4gICAgY29uc3QgeyB2YWx1ZSwgY2hpbGRyZW4gfSA9IHByb3BzLCBmb3JtYXRQcm9wcyA9IF9fcmVzdChwcm9wcywgW1widmFsdWVcIiwgXCJjaGlsZHJlblwiXSk7XG4gICAgcmV0dXJuIGNoaWxkcmVuKGludGwuZm9ybWF0TnVtYmVyVG9QYXJ0cyh2YWx1ZSwgZm9ybWF0UHJvcHMpKTtcbn0pKTtcbkZvcm1hdHRlZE51bWJlclBhcnRzLmRpc3BsYXlOYW1lID0gJ0Zvcm1hdHRlZE51bWJlclBhcnRzJztcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGb3JtYXR0ZWREYXRlVGltZVBhcnRzQ29tcG9uZW50KG5hbWUpIHtcbiAgICBjb25zdCBDb21wb25lbnRQYXJ0cyA9IHByb3BzID0+IChSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHQuQ29uc3VtZXIsIG51bGwsIChpbnRsKSA9PiB7XG4gICAgICAgIGludmFyaWFudEludGxDb250ZXh0KGludGwpO1xuICAgICAgICBjb25zdCB7IHZhbHVlLCBjaGlsZHJlbiB9ID0gcHJvcHMsIGZvcm1hdFByb3BzID0gX19yZXN0KHByb3BzLCBbXCJ2YWx1ZVwiLCBcImNoaWxkcmVuXCJdKTtcbiAgICAgICAgY29uc3QgZGF0ZSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBuZXcgRGF0ZSh2YWx1ZSB8fCAwKSA6IHZhbHVlO1xuICAgICAgICBjb25zdCBmb3JtYXR0ZWRQYXJ0cyA9IG5hbWUgPT09ICdmb3JtYXREYXRlJ1xuICAgICAgICAgICAgPyBpbnRsLmZvcm1hdERhdGVUb1BhcnRzKGRhdGUsIGZvcm1hdFByb3BzKVxuICAgICAgICAgICAgOiBpbnRsLmZvcm1hdFRpbWVUb1BhcnRzKGRhdGUsIGZvcm1hdFByb3BzKTtcbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuKGZvcm1hdHRlZFBhcnRzKTtcbiAgICB9KSk7XG4gICAgQ29tcG9uZW50UGFydHMuZGlzcGxheU5hbWUgPSBEaXNwbGF5TmFtZVBhcnRzW25hbWVdO1xuICAgIHJldHVybiBDb21wb25lbnRQYXJ0cztcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGb3JtYXR0ZWRDb21wb25lbnQobmFtZSkge1xuICAgIGNvbnN0IENvbXBvbmVudCA9IHByb3BzID0+IChSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHQuQ29uc3VtZXIsIG51bGwsIChpbnRsKSA9PiB7XG4gICAgICAgIGludmFyaWFudEludGxDb250ZXh0KGludGwpO1xuICAgICAgICBjb25zdCB7IHZhbHVlLCBjaGlsZHJlbiB9ID0gcHJvcHMsIGZvcm1hdFByb3BzID0gX19yZXN0KHByb3BzLCBbXCJ2YWx1ZVwiLCBcImNoaWxkcmVuXCJdKTtcbiAgICAgICAgLy8gVE9ETzogZml4IFRTIHR5cGUgZGVmaW5pdGlvbiBmb3IgbG9jYWxlTWF0Y2hlciB1cHN0cmVhbVxuICAgICAgICBjb25zdCBmb3JtYXR0ZWRWYWx1ZSA9IGludGxbbmFtZV0odmFsdWUsIGZvcm1hdFByb3BzKTtcbiAgICAgICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuKGZvcm1hdHRlZFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBUZXh0ID0gaW50bC50ZXh0Q29tcG9uZW50IHx8IFJlYWN0LkZyYWdtZW50O1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUZXh0LCBudWxsLCBmb3JtYXR0ZWRWYWx1ZSk7XG4gICAgfSkpO1xuICAgIENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IERpc3BsYXlOYW1lW25hbWVdO1xuICAgIHJldHVybiBDb21wb25lbnQ7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gZGVmaW5lTWVzc2FnZXMobXNncykge1xuICAgIHJldHVybiBtc2dzO1xufVxuaW1wb3J0IHsgY3JlYXRlRm9ybWF0dGVkQ29tcG9uZW50LCBjcmVhdGVGb3JtYXR0ZWREYXRlVGltZVBhcnRzQ29tcG9uZW50LCB9IGZyb20gJy4vY29tcG9uZW50cy9jcmVhdGVGb3JtYXR0ZWRDb21wb25lbnQnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpbmplY3RJbnRsLCBQcm92aWRlciBhcyBSYXdJbnRsUHJvdmlkZXIsIENvbnRleHQgYXMgSW50bENvbnRleHQsIH0gZnJvbSAnLi9jb21wb25lbnRzL2luamVjdEludGwnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1c2VJbnRsIH0gZnJvbSAnLi9jb21wb25lbnRzL3VzZUludGwnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBJbnRsUHJvdmlkZXIsIGNyZWF0ZUludGwgfSBmcm9tICcuL2NvbXBvbmVudHMvcHJvdmlkZXInO1xuLy8gSU1QT1JUQU5UOiBFeHBsaWNpdCBoZXJlIHRvIHByZXZlbnQgYXBpLWV4dHJhY3RvciBmcm9tIG91dHB1dGluZyBgaW1wb3J0KCcuL3R5cGVzJykuQ3VzdG9tRm9ybWF0Q29uZmlnYFxuZXhwb3J0IGNvbnN0IEZvcm1hdHRlZERhdGUgPSBjcmVhdGVGb3JtYXR0ZWRDb21wb25lbnQoJ2Zvcm1hdERhdGUnKTtcbmV4cG9ydCBjb25zdCBGb3JtYXR0ZWRUaW1lID0gY3JlYXRlRm9ybWF0dGVkQ29tcG9uZW50KCdmb3JtYXRUaW1lJyk7XG5leHBvcnQgY29uc3QgRm9ybWF0dGVkTnVtYmVyID0gY3JlYXRlRm9ybWF0dGVkQ29tcG9uZW50KCdmb3JtYXROdW1iZXInKTtcbmV4cG9ydCBjb25zdCBGb3JtYXR0ZWRMaXN0ID0gY3JlYXRlRm9ybWF0dGVkQ29tcG9uZW50KCdmb3JtYXRMaXN0Jyk7XG5leHBvcnQgY29uc3QgRm9ybWF0dGVkRGlzcGxheU5hbWUgPSBjcmVhdGVGb3JtYXR0ZWRDb21wb25lbnQoJ2Zvcm1hdERpc3BsYXlOYW1lJyk7XG5leHBvcnQgY29uc3QgRm9ybWF0dGVkRGF0ZVBhcnRzID0gY3JlYXRlRm9ybWF0dGVkRGF0ZVRpbWVQYXJ0c0NvbXBvbmVudCgnZm9ybWF0RGF0ZScpO1xuZXhwb3J0IGNvbnN0IEZvcm1hdHRlZFRpbWVQYXJ0cyA9IGNyZWF0ZUZvcm1hdHRlZERhdGVUaW1lUGFydHNDb21wb25lbnQoJ2Zvcm1hdFRpbWUnKTtcbmV4cG9ydCB7IEZvcm1hdHRlZE51bWJlclBhcnRzIH0gZnJvbSAnLi9jb21wb25lbnRzL2NyZWF0ZUZvcm1hdHRlZENvbXBvbmVudCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEZvcm1hdHRlZFJlbGF0aXZlVGltZSB9IGZyb20gJy4vY29tcG9uZW50cy9yZWxhdGl2ZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEZvcm1hdHRlZFBsdXJhbCB9IGZyb20gJy4vY29tcG9uZW50cy9wbHVyYWwnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBGb3JtYXR0ZWRNZXNzYWdlIH0gZnJvbSAnLi9jb21wb25lbnRzL21lc3NhZ2UnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBGb3JtYXR0ZWRIVE1MTWVzc2FnZSB9IGZyb20gJy4vY29tcG9uZW50cy9odG1sLW1lc3NhZ2UnO1xuZXhwb3J0IHsgY3JlYXRlSW50bENhY2hlIH0gZnJvbSAnLi91dGlscyc7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jb25zdCB1c2VQcmV2aW91cyA9IDxUIGV4dGVuZHMgdW5rbm93bj4odmFsdWU6IFQpID0+IHtcbiAgY29uc3QgcmVmID0gUmVhY3QudXNlUmVmPFQ+KCk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZWYuY3VycmVudCA9IHZhbHVlO1xuICB9KTtcblxuICByZXR1cm4gcmVmLmN1cnJlbnQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VQcmV2aW91cztcbiIsIi8qIGVzbGludC1kaXNhYmxlIGpzeC1hMTF5L25vLW5vbmludGVyYWN0aXZlLWVsZW1lbnQtaW50ZXJhY3Rpb25zICovXG4vKiBlc2xpbnQtZGlzYWJsZSBqc3gtYTExeS9sYWJlbC1oYXMtYXNzb2NpYXRlZC1jb250cm9sICovXG5pbXBvcnQgUmVhY3QsIHsgZm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcblxuaW1wb3J0IEhpbnQsIHsgUG9zaXRpb24gfSBmcm9tICcuLi9IaW50JztcblxuaW1wb3J0IHVzZVByZXZpb3VzIGZyb20gJy4uL2hvb2tzL3VzZVByZXZpb3VzJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0lucHV0LmNzcyc7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmludGVyZmFjZSBQc2V1ZG9Qcm9wcyB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgdmFsdWU/OiBzdHJpbmcgfCBudW1iZXI7XG4gIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG4gIHRlc3RpZD86IHN0cmluZztcbiAgb25Gb2N1cz86IChldmVudDogUmVhY3QuRm9jdXNFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbiAgb25CbHVyPzogKGV2ZW50OiBSZWFjdC5Gb2N1c0V2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB2b2lkO1xuICBvbktleURvd24/OiAoZXZlbnQ6IFJlYWN0LktleWJvYXJkRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHZvaWQ7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5jb25zdCBQc2V1ZG9Db250cm9sID0gUmVhY3QuZm9yd2FyZFJlZjxhbnksIFBzZXVkb1Byb3BzPihcbiAgKFxuICAgIHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIHZhbHVlLFxuICAgICAgcGxhY2Vob2xkZXIsXG4gICAgICBkaXNhYmxlZCxcbiAgICAgIHRlc3RpZCxcbiAgICAgIG9uRm9jdXMsXG4gICAgICBvbkJsdXIsXG4gICAgICBvbktleURvd24sXG4gICAgfSxcbiAgICByZWZcbiAgKSA9PiB7XG4gICAgY29uc3QgaGFzVmFsdWUgPSB2YWx1ZSAhPSBudWxsICYmIHZhbHVlICE9PSAnJzsgLy8gQ2hlY2tzICcnLCBudWxsIGFuZCB1bmRlZmluZWRcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17ZW0oJ2NvbnRyb2wnKShcbiAgICAgICAgICB7XG4gICAgICAgICAgICBoYXNQbGFjZWhvbGRlcjogIWhhc1ZhbHVlICYmICEhcGxhY2Vob2xkZXIsXG4gICAgICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNsYXNzTmFtZVxuICAgICAgICApfVxuICAgICAgICB0YWJJbmRleD17MH1cbiAgICAgICAgb25Gb2N1cz17b25Gb2N1c31cbiAgICAgICAgb25CbHVyPXtvbkJsdXJ9XG4gICAgICAgIG9uS2V5RG93bj17b25LZXlEb3dufVxuICAgICAgICBkYXRhLXRlc3RpZD17dGVzdGlkfVxuICAgICAgICByZWY9e3JlZn1cbiAgICAgICAgcm9sZT1cInRleHRib3hcIlxuICAgICAgPlxuICAgICAgICB7aGFzVmFsdWUgPyB2YWx1ZSA6IHBsYWNlaG9sZGVyfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuKTtcblxudHlwZSBJbnB1dFByb3BzID0ge1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIHZhbHVlPzogc3RyaW5nIHwgbnVtYmVyO1xuICBwbGFjZWhvbGRlcj86IHN0cmluZztcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICB0ZXN0aWQ/OiBzdHJpbmc7XG4gIG9uRm9jdXM/OiAoZXZlbnQ6IFJlYWN0LkZvY3VzRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHZvaWQ7XG4gIG9uQmx1cj86IChldmVudDogUmVhY3QuRm9jdXNFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbiAgb25LZXlEb3duPzogKGV2ZW50OiBSZWFjdC5LZXlib2FyZEV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB2b2lkO1xuICBvbkNoYW5nZT86IChldmVudDogUmVhY3QuRm9jdXNFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbiAgbmFtZT86IHN0cmluZztcbiAgdHlwZT86IHN0cmluZztcbiAgcmVxdWlyZWQ/OiBib29sZWFuO1xuICBhdXRvQ29tcGxldGU/OiBzdHJpbmc7XG4gIG1heExlbmd0aD86IG51bWJlcjtcbiAgcmVhZE9ubHk/OiBib29sZWFuO1xufTtcblxuY29uc3QgQ29udHJvbCA9IGZvcndhcmRSZWY8SFRNTElucHV0RWxlbWVudCwgSW5wdXRQcm9wcz4oXG4gIChcbiAgICB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBvbkZvY3VzLFxuICAgICAgb25DaGFuZ2UsXG4gICAgICBvbkJsdXIsXG4gICAgICBvbktleURvd24sXG4gICAgICB2YWx1ZSxcbiAgICAgIHBsYWNlaG9sZGVyLFxuICAgICAgbmFtZSxcbiAgICAgIHR5cGUsXG4gICAgICByZXF1aXJlZCxcbiAgICAgIGRpc2FibGVkLFxuICAgICAgdGVzdGlkLFxuICAgICAgYXV0b0NvbXBsZXRlLFxuICAgICAgbWF4TGVuZ3RoLFxuICAgICAgcmVhZE9ubHksXG4gICAgfSxcbiAgICByZWZcbiAgKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxpbnB1dFxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICAgICAgb25Gb2N1cz17b25Gb2N1c31cbiAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgICBvbkJsdXI9e29uQmx1cn1cbiAgICAgICAgb25LZXlEb3duPXtvbktleURvd259XG4gICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgcGxhY2Vob2xkZXI9e3BsYWNlaG9sZGVyfVxuICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICBkYXRhLXRlc3RpZD17dGVzdGlkfVxuICAgICAgICB0eXBlPXt0eXBlfVxuICAgICAgICByZXF1aXJlZD17cmVxdWlyZWR9XG4gICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgYXV0b0NvbXBsZXRlPXthdXRvQ29tcGxldGV9XG4gICAgICAgIGF1dG9Db3JyZWN0PVwib2ZmXCJcbiAgICAgICAgYXV0b0NhcGl0YWxpemU9XCJvZmZcIlxuICAgICAgICBzcGVsbENoZWNrPXtmYWxzZX1cbiAgICAgICAgcmVmPXtyZWZ9XG4gICAgICAgIG1heExlbmd0aD17bWF4TGVuZ3RofVxuICAgICAgICByZWFkT25seT17cmVhZE9ubHl9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbik7XG5cbmV4cG9ydCBlbnVtIFNJWkUge1xuICBYUyA9ICd4cycsXG4gIEwgPSAnbCcsXG4gIE0gPSAnbScsXG4gIFMgPSAncycsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXJyb3Ige1xuICBjb2RlOiBzdHJpbmc7XG4gIG1lc3NhZ2U6IHN0cmluZyB8IFJlYWN0LlJlYWN0Tm9kZUFycmF5O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBzdHlsZT86IFJlYWN0LkNTU1Byb3BlcnRpZXM7XG4gIHNpemU/OiBTSVpFO1xuICBsYWJlbD86IHN0cmluZztcbiAgdG9vbHRpcENvbnRlbnQ/OiAoKSA9PiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIG1heExlbmd0aD86IG51bWJlcjtcbiAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XG4gIGlucHV0UmVmPzpcbiAgICB8IFJlYWN0LlJlZk9iamVjdDxIVE1MSW5wdXRFbGVtZW50PlxuICAgIHwgKChyZWZOb2RlOiBIVE1MSW5wdXRFbGVtZW50IHwgbnVsbCkgPT4gdm9pZCk7XG4gIG9uRm9jdXM/OiAoZXZlbnQ6IFJlYWN0LkZvY3VzRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHZvaWQ7XG4gIG9uQ2hhbmdlPzogKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbiAgb25DbGljaz86IChldmVudDogUmVhY3QuTW91c2VFdmVudDxIVE1MTGFiZWxFbGVtZW50LCBNb3VzZUV2ZW50PikgPT4gdm9pZDtcbiAgb25CbHVyPzogKFxuICAgIGV2ZW50OiBSZWFjdC5Gb2N1c0V2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+LFxuICAgIGVycm9yOiBFcnJvciB8IG51bGwsXG4gICAgaXNQcmV2aW91czogYm9vbGVhblxuICApID0+IHZvaWQ7XG4gIG9uS2V5RG93bj86IChldmVudDogUmVhY3QuS2V5Ym9hcmRFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbiAgb25JY29uQ2xpY2s/OiAoZXZlbnQ6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTERpdkVsZW1lbnQsIE1vdXNlRXZlbnQ+KSA9PiB2b2lkO1xuICB2YWx1ZT86IHN0cmluZyB8IG51bWJlcjtcbiAgcHNldWRvPzogYm9vbGVhbjtcbiAgZm9jdXNlZD86IGJvb2xlYW47XG4gIHdpZGU/OiBib29sZWFuO1xuICBzdGFydEFkb3JubWVudD86IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgaWNvbj86IFJlYWN0LlJlYWN0RWxlbWVudCB8IG51bGw7XG4gIHJlc2VydmVJY29uUGxhY2U/OiBib29sZWFuO1xuICBoYXNFcnJvcj86IGJvb2xlYW47XG4gIGVycm9yPzogRXJyb3IgfCBudWxsO1xuICBuYW1lPzogc3RyaW5nO1xuICB0eXBlPzogc3RyaW5nO1xuICBhdXRvQ29tcGxldGU/OiBzdHJpbmc7XG4gIHJlYWRPbmx5PzogYm9vbGVhbjtcbiAgcmVxdWlyZWQ/OiBib29sZWFuO1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG4gIHRlc3RpZD86IHN0cmluZztcbiAgdmFsaWRhdG9ycz86ICgodmFsdWU6IHN0cmluZykgPT4gRXJyb3IgfCBudWxsKVtdO1xuICB0b29sdGlwQ2FsbGJhY2s/OiAoKSA9PiB2b2lkO1xufVxuXG5jb25zdCBJbnB1dDogUmVhY3QuRkM8UHJvcHM+ID0gKHtcbiAgY2xhc3NOYW1lLFxuICBzdHlsZSxcbiAgc2l6ZSxcbiAgbGFiZWwsXG4gIHRvb2x0aXBDb250ZW50LFxuICBwbGFjZWhvbGRlcixcbiAgaW5wdXRSZWYsXG4gIG9uRm9jdXMsXG4gIG9uQ2hhbmdlLFxuICBvbkNsaWNrLFxuICBvbkJsdXIsXG4gIG9uS2V5RG93bixcbiAgb25JY29uQ2xpY2ssXG4gIHZhbHVlLFxuICBwc2V1ZG8sXG4gIGZvY3VzZWQsXG4gIHdpZGUsXG4gIGNoaWxkcmVuLFxuICBzdGFydEFkb3JubWVudCxcbiAgaWNvbixcbiAgcmVzZXJ2ZUljb25QbGFjZSxcbiAgaGFzRXJyb3IsXG4gIGVycm9yID0gbnVsbCxcbiAgbmFtZSxcbiAgdHlwZSxcbiAgYXV0b0NvbXBsZXRlLFxuICByZWFkT25seSxcbiAgcmVxdWlyZWQsXG4gIGRpc2FibGVkLFxuICB0ZXN0aWQsXG4gIHZhbGlkYXRvcnMsXG4gIG1heExlbmd0aCxcbiAgdG9vbHRpcENhbGxiYWNrLFxufSkgPT4ge1xuICBjb25zdCBDb250cm9sQ29tcG9uZW50ID0gcHNldWRvID8gUHNldWRvQ29udHJvbCA6IENvbnRyb2w7XG5cbiAgY29uc3QgW2V4dGVybmFsRXJyb3IsIHNldEV4dGVybmFsRXJyb3JdID0gUmVhY3QudXNlU3RhdGU8RXJyb3IgfCBudWxsPihlcnJvcik7XG4gIGNvbnN0IFtpbnRlcm5hbEVycm9yLCBzZXRJbnRlcm5hbEVycm9yXSA9IFJlYWN0LnVzZVN0YXRlPEVycm9yIHwgbnVsbD4obnVsbCk7XG5cbiAgY29uc3Qgb25WYWxpZGF0ZUZvY3VzID0gKGV2ZW50OiBSZWFjdC5Gb2N1c0V2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XG4gICAgc2V0RXh0ZXJuYWxFcnJvcihudWxsKTtcbiAgICBzZXRJbnRlcm5hbEVycm9yKG51bGwpO1xuXG4gICAgaWYgKCFvbkZvY3VzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgb25Gb2N1cyhldmVudCk7XG4gIH07XG5cbiAgY29uc3QgW3ZhbGlkYXRlVmFsdWUsIHNldFZhbGlkYXRlVmFsdWVdID0gUmVhY3QudXNlU3RhdGUodmFsdWUpO1xuICBjb25zdCBwcmV2aW91c1ZhbGlkYXRlVmFsdWUgPSB1c2VQcmV2aW91cyh2YWxpZGF0ZVZhbHVlKTtcblxuICBjb25zdCBvblZhbGlkYXRlQmx1ciA9IChldmVudDogUmVhY3QuRm9jdXNFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgIGlmICghb25CbHVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2V0VmFsaWRhdGVWYWx1ZShldmVudC50YXJnZXQudmFsdWUpO1xuXG4gICAgY29uc3QgaXNQcmV2aW91cyA9IGV2ZW50LnRhcmdldC52YWx1ZSA9PT0gcHJldmlvdXNWYWxpZGF0ZVZhbHVlO1xuXG4gICAgaWYgKCF2YWxpZGF0b3JzKSB7XG4gICAgICBvbkJsdXIoZXZlbnQsIG51bGwsIGlzUHJldmlvdXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBjdXJyZW50RXJyb3IgPSBudWxsO1xuICAgIHZhbGlkYXRvcnMuZXZlcnkoKHZhbGlkYXRlKSA9PiB7XG4gICAgICBjdXJyZW50RXJyb3IgPSB2YWxpZGF0ZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgICAgc2V0SW50ZXJuYWxFcnJvcihjdXJyZW50RXJyb3IpO1xuICAgICAgcmV0dXJuICFjdXJyZW50RXJyb3I7XG4gICAgfSk7XG4gICAgb25CbHVyKGV2ZW50LCBjdXJyZW50RXJyb3IsIGlzUHJldmlvdXMpO1xuICB9O1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0RXh0ZXJuYWxFcnJvcihlcnJvcik7XG4gIH0sIFtlcnJvcl0pO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0SW50ZXJuYWxFcnJvcihudWxsKTtcbiAgfSwgW3ZhbHVlXSk7XG5cbiAgY29uc3QgdG90YWxFcnJvciA9IGV4dGVybmFsRXJyb3IgfHwgaW50ZXJuYWxFcnJvcjtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnd3JhcHBlcicpKHsgd2lkZSB9LCBjbGFzc05hbWUpfT5cbiAgICAgIHsvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvbGFiZWwtaGFzLWFzc29jaWF0ZWQtY29udHJvbCwganN4LWExMXkvbm8tbm9uaW50ZXJhY3RpdmUtZWxlbWVudC1pbnRlcmFjdGlvbnMgKi99XG4gICAgICA8bGFiZWxcbiAgICAgICAgY2xhc3NOYW1lPXtlbSgnbGFiZWwnKSh7XG4gICAgICAgICAgc2l6ZSxcbiAgICAgICAgICBmb2N1c2VkLFxuICAgICAgICAgIGhhc0Vycm9yOiBoYXNFcnJvciB8fCAhIXRvdGFsRXJyb3IsXG4gICAgICAgICAgZGlzYWJsZWQsXG4gICAgICAgICAgcmVxdWlyZWQsXG4gICAgICAgICAgcmVhZE9ubHksXG4gICAgICAgIH0pfVxuICAgICAgICBzdHlsZT17c3R5bGV9XG4gICAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICA+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ2NvbnRyb2xMaW5lJykoe1xuICAgICAgICAgICAgcmVzZXJ2ZUljb25QbGFjZTogIWljb24gJiYgcmVzZXJ2ZUljb25QbGFjZSxcbiAgICAgICAgICB9KX1cbiAgICAgICAgPlxuICAgICAgICAgIHtzdGFydEFkb3JubWVudH1cbiAgICAgICAgICA8Q29udHJvbENvbXBvbmVudFxuICAgICAgICAgICAgY2xhc3NOYW1lPXtlbSgnY29udHJvbCcpKCl9XG4gICAgICAgICAgICByZWY9e2lucHV0UmVmfVxuICAgICAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgICAgICAgb25Gb2N1cz17b25WYWxpZGF0ZUZvY3VzfVxuICAgICAgICAgICAgb25CbHVyPXtvblZhbGlkYXRlQmx1cn1cbiAgICAgICAgICAgIG9uS2V5RG93bj17b25LZXlEb3dufVxuICAgICAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3BsYWNlaG9sZGVyfVxuICAgICAgICAgICAgbmFtZT17bmFtZX1cbiAgICAgICAgICAgIHR5cGU9e3R5cGV9XG4gICAgICAgICAgICByZXF1aXJlZD17cmVxdWlyZWR9XG4gICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICB0ZXN0aWQ9e3Rlc3RpZH1cbiAgICAgICAgICAgIGF1dG9Db21wbGV0ZT17YXV0b0NvbXBsZXRlIHx8ICdpbnB1dC1vZmYnfVxuICAgICAgICAgICAgbWF4TGVuZ3RoPXttYXhMZW5ndGh9XG4gICAgICAgICAgICByZWFkT25seT17cmVhZE9ubHl9XG4gICAgICAgICAgLz5cbiAgICAgICAgICB7aWNvbiAmJiAoXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIHRhYkluZGV4PXswfVxuICAgICAgICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgb25DbGljaz17b25JY29uQ2xpY2t9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ2ljb24nKSh7IGNsaWNrYWJsZTogISFvbkljb25DbGljayB9KX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge2ljb259XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCd0aXRsZVdyYXBwZXInKSgpfT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ3RpdGxlJykoKX0+e2xhYmVsfTwvZGl2PlxuICAgICAgICAgIHshIXRvb2x0aXBDb250ZW50ICYmIChcbiAgICAgICAgICAgIDxIaW50XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ2hpbnQnKSgpfVxuICAgICAgICAgICAgICB0b29sdGlwQ29udGVudD17dG9vbHRpcENvbnRlbnR9XG4gICAgICAgICAgICAgIHBvc2l0aW9uPXtQb3NpdGlvbi5UT1B9XG4gICAgICAgICAgICAgIHRvb2x0aXBDYWxsYmFjaz17dG9vbHRpcENhbGxiYWNrfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvbGFiZWw+XG4gICAgICB7ISF0b3RhbEVycm9yICYmIDxwIGNsYXNzTmFtZT17ZW0oJ2Vycm9yJykoKX0+e3RvdGFsRXJyb3IubWVzc2FnZX08L3A+fVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSW5wdXQ7XG4iLCJpbXBvcnQgeyBBQ1RJT05fVFlQRSB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IFRoZW1lLCBUaGVtZUFjdGlvbiB9IGZyb20gJy4vYWN0aW9ucy9zZXRUaGVtZSc7XG5cbmV4cG9ydCBlbnVtIFNJWkUge1xuICBERVNLVE9QID0gJ2Rlc2t0b3AnLFxuICBNT0JJTEUgPSAnbW9iaWxlJyxcbiAgVEFCTEVUID0gJ3RhYmxldCcsXG59XG5cbmludGVyZmFjZSBUaGVtZVN0YXRlIGV4dGVuZHMgVGhlbWUge1xuICBzaXplczogUmVjb3JkPFNJWkUsIG51bWJlcj47XG59XG5cbmNvbnN0IGluaXRpYWxTdGF0ZTogVGhlbWVTdGF0ZSA9IHtcbiAgc2l6ZXM6IHtcbiAgICBbU0laRS5ERVNLVE9QXTogMTQ1MCxcbiAgICBbU0laRS5NT0JJTEVdOiA2ODAsXG4gICAgW1NJWkUuVEFCTEVUXTogMTA3NCxcbiAgfSxcbn07XG5cbmNvbnN0IFN0YXRlID0gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb246IFRoZW1lQWN0aW9uKTogVGhlbWVTdGF0ZSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIEFDVElPTl9UWVBFLlNFVF9USEVNRTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNpemVzOiBzdGF0ZS5zaXplcyxcbiAgICAgICAgLi4uYWN0aW9uLnRoZW1lLFxuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTdGF0ZTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvSW50ZWdlcihkaXJ0eU51bWJlcikge1xuICBpZiAoZGlydHlOdW1iZXIgPT09IG51bGwgfHwgZGlydHlOdW1iZXIgPT09IHRydWUgfHwgZGlydHlOdW1iZXIgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuXG4gIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuXG4gIHJldHVybiBudW1iZXIgPCAwID8gTWF0aC5jZWlsKG51bWJlcikgOiBNYXRoLmZsb29yKG51bWJlcik7XG59IiwiaW1wb3J0ICQkb2JzZXJ2YWJsZSBmcm9tICdzeW1ib2wtb2JzZXJ2YWJsZSc7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgcmFuZG9tU3RyaW5nID0gZnVuY3Rpb24gcmFuZG9tU3RyaW5nKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG59O1xuXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6IFwiQEByZWR1eC9JTklUXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUkVQTEFDRTogXCJAQHJlZHV4L1JFUExBQ0VcIiArIHJhbmRvbVN0cmluZygpLFxuICBQUk9CRV9VTktOT1dOX0FDVElPTjogZnVuY3Rpb24gUFJPQkVfVU5LTk9XTl9BQ1RJT04oKSB7XG4gICAgcmV0dXJuIFwiQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTlwiICsgcmFuZG9tU3RyaW5nKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IG9iaiBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYXJndW1lbnQgYXBwZWFycyB0byBiZSBhIHBsYWluIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcHJvdG8gPSBvYmo7XG5cbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0IGxvb2tzIGxpa2UgeW91IGFyZSBwYXNzaW5nIHNldmVyYWwgc3RvcmUgZW5oYW5jZXJzIHRvICcgKyAnY3JlYXRlU3RvcmUoKS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkLCBjb21wb3NlIHRoZW0gJyArICd0b2dldGhlciB0byBhIHNpbmdsZSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoaXMgbWFrZXMgYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudExpc3RlbmVycyBzbyB3ZSBjYW4gdXNlXG4gICAqIG5leHRMaXN0ZW5lcnMgYXMgYSB0ZW1wb3JhcnkgbGlzdCB3aGlsZSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogVGhpcyBwcmV2ZW50cyBhbnkgYnVncyBhcm91bmQgY29uc3VtZXJzIGNhbGxpbmdcbiAgICogc3Vic2NyaWJlL3Vuc3Vic2NyaWJlIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG5cblxuICBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgbmV4dExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICBpZiAoIWlzU3Vic2NyaWJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgdW5zdWJzY3JpYmUgZnJvbSBhIHN0b3JlIGxpc3RlbmVyIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgfVxuXG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgIHZhciBpbmRleCA9IG5leHRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBuZXh0TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICBjdXJyZW50TGlzdGVuZXJzID0gbnVsbDtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGFjdGlvbi4gSXQgaXMgdGhlIG9ubHkgd2F5IHRvIHRyaWdnZXIgYSBzdGF0ZSBjaGFuZ2UuXG4gICAqXG4gICAqIFRoZSBgcmVkdWNlcmAgZnVuY3Rpb24sIHVzZWQgdG8gY3JlYXRlIHRoZSBzdG9yZSwgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGVcbiAgICogY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgZ2l2ZW4gYGFjdGlvbmAuIEl0cyByZXR1cm4gdmFsdWUgd2lsbFxuICAgKiBiZSBjb25zaWRlcmVkIHRoZSAqKm5leHQqKiBzdGF0ZSBvZiB0aGUgdHJlZSwgYW5kIHRoZSBjaGFuZ2UgbGlzdGVuZXJzXG4gICAqIHdpbGwgYmUgbm90aWZpZWQuXG4gICAqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9ubHkgc3VwcG9ydHMgcGxhaW4gb2JqZWN0IGFjdGlvbnMuIElmIHlvdSB3YW50IHRvXG4gICAqIGRpc3BhdGNoIGEgUHJvbWlzZSwgYW4gT2JzZXJ2YWJsZSwgYSB0aHVuaywgb3Igc29tZXRoaW5nIGVsc2UsIHlvdSBuZWVkIHRvXG4gICAqIHdyYXAgeW91ciBzdG9yZSBjcmVhdGluZyBmdW5jdGlvbiBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIG1pZGRsZXdhcmUuIEZvclxuICAgKiBleGFtcGxlLCBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UuIEV2ZW4gdGhlXG4gICAqIG1pZGRsZXdhcmUgd2lsbCBldmVudHVhbGx5IGRpc3BhdGNoIHBsYWluIG9iamVjdCBhY3Rpb25zIHVzaW5nIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWN0aW9uIEEgcGxhaW4gb2JqZWN0IHJlcHJlc2VudGluZyDigJx3aGF0IGNoYW5nZWTigJ0uIEl0IGlzXG4gICAqIGEgZ29vZCBpZGVhIHRvIGtlZXAgYWN0aW9ucyBzZXJpYWxpemFibGUgc28geW91IGNhbiByZWNvcmQgYW5kIHJlcGxheSB1c2VyXG4gICAqIHNlc3Npb25zLCBvciB1c2UgdGhlIHRpbWUgdHJhdmVsbGluZyBgcmVkdXgtZGV2dG9vbHNgLiBBbiBhY3Rpb24gbXVzdCBoYXZlXG4gICAqIGEgYHR5cGVgIHByb3BlcnR5IHdoaWNoIG1heSBub3QgYmUgYHVuZGVmaW5lZGAuIEl0IGlzIGEgZ29vZCBpZGVhIHRvIHVzZVxuICAgKiBzdHJpbmcgY29uc3RhbnRzIGZvciBhY3Rpb24gdHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEZvciBjb252ZW5pZW5jZSwgdGhlIHNhbWUgYWN0aW9uIG9iamVjdCB5b3UgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogTm90ZSB0aGF0LCBpZiB5b3UgdXNlIGEgY3VzdG9tIG1pZGRsZXdhcmUsIGl0IG1heSB3cmFwIGBkaXNwYXRjaCgpYCB0b1xuICAgKiByZXR1cm4gc29tZXRoaW5nIGVsc2UgKGZvciBleGFtcGxlLCBhIFByb21pc2UgeW91IGNhbiBhd2FpdCkuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGFjdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuICcgKyAnVXNlIGN1c3RvbSBtaWRkbGV3YXJlIGZvciBhc3luYyBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gJyArICdIYXZlIHlvdSBtaXNzcGVsbGVkIGEgY29uc3RhbnQ/Jyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnRSZWR1Y2VyKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzID0gbmV4dExpc3RlbmVycztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoZSByZWR1Y2VyIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBzdG9yZSB0byBjYWxjdWxhdGUgdGhlIHN0YXRlLlxuICAgKlxuICAgKiBZb3UgbWlnaHQgbmVlZCB0aGlzIGlmIHlvdXIgYXBwIGltcGxlbWVudHMgY29kZSBzcGxpdHRpbmcgYW5kIHlvdSB3YW50IHRvXG4gICAqIGxvYWQgc29tZSBvZiB0aGUgcmVkdWNlcnMgZHluYW1pY2FsbHkuIFlvdSBtaWdodCBhbHNvIG5lZWQgdGhpcyBpZiB5b3VcbiAgICogaW1wbGVtZW50IGEgaG90IHJlbG9hZGluZyBtZWNoYW5pc20gZm9yIFJlZHV4LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0UmVkdWNlciBUaGUgcmVkdWNlciBmb3IgdGhlIHN0b3JlIHRvIHVzZSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cblxuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjsgLy8gVGhpcyBhY3Rpb24gaGFzIGEgc2ltaWxpYXIgZWZmZWN0IHRvIEFjdGlvblR5cGVzLklOSVQuXG4gICAgLy8gQW55IHJlZHVjZXJzIHRoYXQgZXhpc3RlZCBpbiBib3RoIHRoZSBuZXcgYW5kIG9sZCByb290UmVkdWNlclxuICAgIC8vIHdpbGwgcmVjZWl2ZSB0aGUgcHJldmlvdXMgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gICAgLy8gdGhlIG5ldyBzdGF0ZSB0cmVlIHdpdGggYW55IHJlbGV2YW50IGRhdGEgZnJvbSB0aGUgb2xkIG9uZS5cblxuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0VcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICByZXR1cm4gX3JlZiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMge3N1YnNjcmlwdGlvbn0gQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAodHlwZW9mIG9ic2VydmVyICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwgX3JlZlskJG9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgX3JlZjtcbiAgfSAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cblxuXG4gIGRpc3BhdGNoKHtcbiAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gIH0pO1xuICByZXR1cm4gX3JlZjIgPSB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgfSwgX3JlZjJbJCRvYnNlcnZhYmxlXSA9IG9ic2VydmFibGUsIF9yZWYyO1xufVxuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cblxuICB0cnkge1xuICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgaWYgeW91IGVuYWJsZVxuICAgIC8vIFwiYnJlYWsgb24gYWxsIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIGNvbnNvbGUsXG4gICAgLy8gaXQgd291bGQgcGF1c2UgdGhlIGV4ZWN1dGlvbiBhdCB0aGlzIGxpbmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9IGNhdGNoIChlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG5cbn1cblxuZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gIHZhciBhY3Rpb25EZXNjcmlwdGlvbiA9IGFjdGlvblR5cGUgJiYgXCJhY3Rpb24gXFxcIlwiICsgU3RyaW5nKGFjdGlvblR5cGUpICsgXCJcXFwiXCIgfHwgJ2FuIGFjdGlvbic7XG4gIHJldHVybiBcIkdpdmVuIFwiICsgYWN0aW9uRGVzY3JpcHRpb24gKyBcIiwgcmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiBcIiArIFwiVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiBcIiArIFwiSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCI7XG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiBcIlRoZSBcIiArIGFyZ3VtZW50TmFtZSArIFwiIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXFxcIlwiICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyBcIlxcXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgXCIgKyAoXCJrZXlzOiBcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG4gIGlmIChhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLlJFUExBQ0UpIHJldHVybjtcblxuICBpZiAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBcIlVuZXhwZWN0ZWQgXCIgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArIFwiIFwiICsgKFwiXFxcIlwiICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIgZm91bmQgaW4gXCIgKyBhcmd1bWVudE5hbWUgKyBcIi4gXCIpICsgXCJFeHBlY3RlZCB0byBmaW5kIG9uZSBvZiB0aGUga25vd24gcmVkdWNlciBrZXlzIGluc3RlYWQ6IFwiICsgKFwiXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFJlZHVjZXJTaGFwZShyZWR1Y2Vycykge1xuICBPYmplY3Qua2V5cyhyZWR1Y2VycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHJlZHVjZXIgPSByZWR1Y2Vyc1trZXldO1xuICAgIHZhciBpbml0aWFsU3RhdGUgPSByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiBcIiArIFwiSWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGUgcmVkdWNlciBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IFwiICsgXCJleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IFwiICsgXCJub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCBcIiArIFwieW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUFJPQkVfVU5LTk9XTl9BQ1RJT04oKVxuICAgIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlIFwiICsgQWN0aW9uVHlwZXMuSU5JVCArIFwiIG9yIG90aGVyIGFjdGlvbnMgaW4gXFxcInJlZHV4LypcXFwiIFwiKSArIFwibmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgXCIgKyBcImN1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsIFwiICsgXCJpbiB3aGljaCBjYXNlIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZSwgcmVnYXJkbGVzcyBvZiB0aGUgXCIgKyBcImFjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLlwiKTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5cblxuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZyhcIk5vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmaW5hbFJlZHVjZXJzW2tleV0gPSByZWR1Y2Vyc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7IC8vIFRoaXMgaXMgdXNlZCB0byBtYWtlIHN1cmUgd2UgZG9uJ3Qgd2FybiBhYm91dCB0aGUgc2FtZVxuICAvLyBrZXlzIG11bHRpcGxlIHRpbWVzLlxuXG4gIHZhciB1bmV4cGVjdGVkS2V5Q2FjaGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yO1xuXG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG5cbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9rZXkgPSBmaW5hbFJlZHVjZXJLZXlzW19pXTtcbiAgICAgIHZhciByZWR1Y2VyID0gZmluYWxSZWR1Y2Vyc1tfa2V5XTtcbiAgICAgIHZhciBwcmV2aW91c1N0YXRlRm9yS2V5ID0gc3RhdGVbX2tleV07XG4gICAgICB2YXIgbmV4dFN0YXRlRm9yS2V5ID0gcmVkdWNlcihwcmV2aW91c1N0YXRlRm9yS2V5LCBhY3Rpb24pO1xuXG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKF9rZXksIGFjdGlvbik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuXG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuXG4gICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKHN0YXRlKS5sZW5ndGg7XG4gICAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXh0U3RhdGUgOiBzdGF0ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYW4gYWN0aW9uIGNyZWF0b3IgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGRpc3BhdGNoIHdyYXBwZWQgZnVuY3Rpb24gaW4gcmV0dXJuLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBhY3Rpb25DcmVhdG9ycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb25cbiAqIGNyZWF0b3IgZnVuY3Rpb25zLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpbiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhc2BcbiAqIHN5bnRheC4gWW91IG1heSBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzcGF0Y2ggVGhlIGBkaXNwYXRjaGAgZnVuY3Rpb24gYXZhaWxhYmxlIG9uIHlvdXIgUmVkdXhcbiAqIHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFRoZSBvYmplY3QgbWltaWNraW5nIHRoZSBvcmlnaW5hbCBvYmplY3QsIGJ1dCB3aXRoXG4gKiBldmVyeSBhY3Rpb24gY3JlYXRvciB3cmFwcGVkIGludG8gdGhlIGBkaXNwYXRjaGAgY2FsbC4gSWYgeW91IHBhc3NlZCBhXG4gKiBmdW5jdGlvbiBhcyBgYWN0aW9uQ3JlYXRvcnNgLCB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYWxzbyBiZSBhIHNpbmdsZVxuICogZnVuY3Rpb24uXG4gKi9cblxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgIT09ICdvYmplY3QnIHx8IGFjdGlvbkNyZWF0b3JzID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBpbnN0ZWFkIHJlY2VpdmVkIFwiICsgKGFjdGlvbkNyZWF0b3JzID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGFjdGlvbkNyZWF0b3JzKSArIFwiLiBcIiArIFwiRGlkIHlvdSB3cml0ZSBcXFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiIGluc3RlYWQgb2YgXFxcImltcG9ydCAqIGFzIEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiP1wiKTtcbiAgfVxuXG4gIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIGFjdGlvbkNyZWF0b3JzKSB7XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KSk7XG4gIH1cblxuICBpZiAoZW51bWVyYWJsZU9ubHkpIGtleXMgPSBrZXlzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gIH0pO1xuICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZ1bmNzWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYShiLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0b3JlIGVuaGFuY2VyIHRoYXQgYXBwbGllcyBtaWRkbGV3YXJlIHRvIHRoZSBkaXNwYXRjaCBtZXRob2RcbiAqIG9mIHRoZSBSZWR1eCBzdG9yZS4gVGhpcyBpcyBoYW5keSBmb3IgYSB2YXJpZXR5IG9mIHRhc2tzLCBzdWNoIGFzIGV4cHJlc3NpbmdcbiAqIGFzeW5jaHJvbm91cyBhY3Rpb25zIGluIGEgY29uY2lzZSBtYW5uZXIsIG9yIGxvZ2dpbmcgZXZlcnkgYWN0aW9uIHBheWxvYWQuXG4gKlxuICogU2VlIGByZWR1eC10aHVua2AgcGFja2FnZSBhcyBhbiBleGFtcGxlIG9mIHRoZSBSZWR1eCBtaWRkbGV3YXJlLlxuICpcbiAqIEJlY2F1c2UgbWlkZGxld2FyZSBpcyBwb3RlbnRpYWxseSBhc3luY2hyb25vdXMsIHRoaXMgc2hvdWxkIGJlIHRoZSBmaXJzdFxuICogc3RvcmUgZW5oYW5jZXIgaW4gdGhlIGNvbXBvc2l0aW9uIGNoYWluLlxuICpcbiAqIE5vdGUgdGhhdCBlYWNoIG1pZGRsZXdhcmUgd2lsbCBiZSBnaXZlbiB0aGUgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBmdW5jdGlvbnNcbiAqIGFzIG5hbWVkIGFyZ3VtZW50cy5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBtaWRkbGV3YXJlcyBUaGUgbWlkZGxld2FyZSBjaGFpbiB0byBiZSBhcHBsaWVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHN0b3JlIGVuaGFuY2VyIGFwcGx5aW5nIHRoZSBtaWRkbGV3YXJlLlxuICovXG5cbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1pZGRsZXdhcmVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1pZGRsZXdhcmVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjcmVhdGVTdG9yZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG5cbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiAnICsgJ090aGVyIG1pZGRsZXdhcmUgd291bGQgbm90IGJlIGFwcGxpZWQgdG8gdGhpcyBkaXNwYXRjaC4nKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh2b2lkIDAsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZDIoe30sIHN0b3JlLCB7XG4gICAgICAgIGRpc3BhdGNoOiBfZGlzcGF0Y2hcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59XG5cbi8qXG4gKiBUaGlzIGlzIGEgZHVtbXkgZnVuY3Rpb24gdG8gY2hlY2sgaWYgdGhlIGZ1bmN0aW9uIG5hbWUgaGFzIGJlZW4gYWx0ZXJlZCBieSBtaW5pZmljYXRpb24uXG4gKiBJZiB0aGUgZnVuY3Rpb24gaGFzIGJlZW4gbWluaWZpZWQgYW5kIE5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsIHdhcm4gdGhlIHVzZXIuXG4gKi9cblxuZnVuY3Rpb24gaXNDcnVzaGVkKCkge31cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgd2FybmluZygnWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIi4gJyArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIHNldHRpbmcgbW9kZSB0byBwcm9kdWN0aW9uIGluIHdlYnBhY2sgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uY2VwdHMvbW9kZS8pICcgKyAndG8gZW5zdXJlIHlvdSBoYXZlIHRoZSBjb3JyZWN0IGNvZGUgZm9yIHlvdXIgcHJvZHVjdGlvbiBidWlsZC4nKTtcbn1cblxuZXhwb3J0IHsgQWN0aW9uVHlwZXMgYXMgX19ET19OT1RfVVNFX19BY3Rpb25UeXBlcywgYXBwbHlNaWRkbGV3YXJlLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGNvbWJpbmVSZWR1Y2VycywgY29tcG9zZSwgY3JlYXRlU3RvcmUgfTtcbiIsImltcG9ydCB7IGlzUmVnRXhwLCBpc1N0cmluZyB9IGZyb20gJy4vaXMnO1xuLyoqXG4gKiBUcnVuY2F0ZXMgZ2l2ZW4gc3RyaW5nIHRvIHRoZSBtYXhpbXVtIGNoYXJhY3RlcnMgY291bnRcbiAqXG4gKiBAcGFyYW0gc3RyIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHNlcmlhbGl6YWJsZSB2YWx1ZXNcbiAqIEBwYXJhbSBtYXggTWF4aW11bSBudW1iZXIgb2YgY2hhcmFjdGVycyBpbiB0cnVuY2F0ZWQgc3RyaW5nXG4gKiBAcmV0dXJucyBzdHJpbmcgRW5jb2RlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJ1bmNhdGUoc3RyLCBtYXgpIHtcbiAgICBpZiAobWF4ID09PSB2b2lkIDApIHsgbWF4ID0gMDsgfVxuICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJyB8fCBtYXggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgcmV0dXJuIHN0ci5sZW5ndGggPD0gbWF4ID8gc3RyIDogc3RyLnN1YnN0cigwLCBtYXgpICsgXCIuLi5cIjtcbn1cbi8qKlxuICogVGhpcyBpcyBiYXNpY2FsbHkganVzdCBgdHJpbV9saW5lYCBmcm9tXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS9ibG9iL21hc3Rlci9zcmMvc2VudHJ5L2xhbmcvamF2YXNjcmlwdC9wcm9jZXNzb3IucHkjTDY3XG4gKlxuICogQHBhcmFtIHN0ciBBbiBvYmplY3QgdGhhdCBjb250YWlucyBzZXJpYWxpemFibGUgdmFsdWVzXG4gKiBAcGFyYW0gbWF4IE1heGltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnMgaW4gdHJ1bmNhdGVkIHN0cmluZ1xuICogQHJldHVybnMgc3RyaW5nIEVuY29kZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNuaXBMaW5lKGxpbmUsIGNvbG5vKSB7XG4gICAgdmFyIG5ld0xpbmUgPSBsaW5lO1xuICAgIHZhciBsbCA9IG5ld0xpbmUubGVuZ3RoO1xuICAgIGlmIChsbCA8PSAxNTApIHtcbiAgICAgICAgcmV0dXJuIG5ld0xpbmU7XG4gICAgfVxuICAgIGlmIChjb2xubyA+IGxsKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBjb2xubyA9IGxsO1xuICAgIH1cbiAgICB2YXIgc3RhcnQgPSBNYXRoLm1heChjb2xubyAtIDYwLCAwKTtcbiAgICBpZiAoc3RhcnQgPCA1KSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICB9XG4gICAgdmFyIGVuZCA9IE1hdGgubWluKHN0YXJ0ICsgMTQwLCBsbCk7XG4gICAgaWYgKGVuZCA+IGxsIC0gNSkge1xuICAgICAgICBlbmQgPSBsbDtcbiAgICB9XG4gICAgaWYgKGVuZCA9PT0gbGwpIHtcbiAgICAgICAgc3RhcnQgPSBNYXRoLm1heChlbmQgLSAxNDAsIDApO1xuICAgIH1cbiAgICBuZXdMaW5lID0gbmV3TGluZS5zbGljZShzdGFydCwgZW5kKTtcbiAgICBpZiAoc3RhcnQgPiAwKSB7XG4gICAgICAgIG5ld0xpbmUgPSBcIid7c25pcH0gXCIgKyBuZXdMaW5lO1xuICAgIH1cbiAgICBpZiAoZW5kIDwgbGwpIHtcbiAgICAgICAgbmV3TGluZSArPSAnIHtzbmlwfSc7XG4gICAgfVxuICAgIHJldHVybiBuZXdMaW5lO1xufVxuLyoqXG4gKiBKb2luIHZhbHVlcyBpbiBhcnJheVxuICogQHBhcmFtIGlucHV0IGFycmF5IG9mIHZhbHVlcyB0byBiZSBqb2luZWQgdG9nZXRoZXJcbiAqIEBwYXJhbSBkZWxpbWl0ZXIgc3RyaW5nIHRvIGJlIHBsYWNlZCBpbi1iZXR3ZWVuIHZhbHVlc1xuICogQHJldHVybnMgSm9pbmVkIHZhbHVlc1xuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGZ1bmN0aW9uIHNhZmVKb2luKGlucHV0LCBkZWxpbWl0ZXIpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgdmFyIG91dHB1dCA9IFtdO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLWZvci1vZlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaW5wdXRbaV07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBvdXRwdXQucHVzaChTdHJpbmcodmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgb3V0cHV0LnB1c2goJ1t2YWx1ZSBjYW5ub3QgYmUgc2VyaWFsaXplZF0nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0LmpvaW4oZGVsaW1pdGVyKTtcbn1cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSB2YWx1ZSBtYXRjaGVzIGEgcmVnZXggb3IgaW5jbHVkZXMgdGhlIHN0cmluZ1xuICogQHBhcmFtIHZhbHVlIFRoZSBzdHJpbmcgdmFsdWUgdG8gYmUgY2hlY2tlZCBhZ2FpbnN0XG4gKiBAcGFyYW0gcGF0dGVybiBFaXRoZXIgYSByZWdleCBvciBhIHN0cmluZyB0aGF0IG11c3QgYmUgY29udGFpbmVkIGluIHZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc01hdGNoaW5nUGF0dGVybih2YWx1ZSwgcGF0dGVybikge1xuICAgIGlmICghaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHBhdHRlcm4pKSB7XG4gICAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QodmFsdWUpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5pbmRleE9mKHBhdHRlcm4pICE9PSAtMTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyaW5nLmpzLm1hcCIsImV4cG9ydCBkZWZhdWx0IHtcbiAgLy8gQXV0aFxuICBSRVNUT1JFX1BBU1NXT1JEOiAnUkVTVE9SRV9QQVNTV09SRCcsXG4gIFNJR05fSU46ICdTSUdOX0lOJyxcbiAgU0lHTl9PVVQ6ICdTSUdOX09VVCcsXG5cbiAgLy8gUG9wdXBzXG4gIENMT1NFX09OQk9BUkRJTkc6ICdDTE9TRV9PTkJPQVJESU5HJyxcbiAgT1BFTl9SQVRFOiAnT1BFTl9SQVRFJyxcbiAgU0hPV19PRkZFUjogJ1NIT1dfT0ZGRVInLFxuICBTSE9XX1RCT19CRl9PRkZFUjogJ1NIT1dfVEJPX0JGX09GRkVSJyxcbiAgLy8gTm90aWZpY2F0aW9uc1xuICBDSEFOR0VfTk9USUZJQ0FUSU9OU19TRVRUSU5HUzogJ0NIQU5HRV9OT1RJRklDQVRJT05TX1NFVFRJTkdTJyxcblxuICAvLyBDT01QRVRJVE9SX1NFUlBcbiAgR0VUX0NPTVBFVElUT1JfU0VSUF9EQVRBOiAnR0VUX0NPTVBFVElUT1JfU0VSUF9EQVRBJyxcbiAgR0VUX0NPTVBFVElUT1JfQUxMX1NFUlBfREFUQTogJ0dFVF9DT01QRVRJVE9SX0FMTF9TRVJQX0RBVEEnLFxuXG4gIC8vIEdldCBvcmRlciBkYXRhXG4gIEdFVF9DT01QRVRJVE9SX09SREVSX0RBVEE6ICdHRVRfQ09NUEVUSVRPUl9PUkRFUl9EQVRBJyxcbiAgR0VUX1RCT19PUkRFUl9EQVRBOiAnR0VUX1RCT19PUkRFUl9EQVRBJyxcblxuICAvLyBMaXZlU2V0dGluZ3NcbiAgVVBEQVRFX0xJVkVfU0VUVElOR1M6ICdVUERBVEVfTElWRV9TRVRUSU5HUycsXG5cbiAgT1BFTl9ORVdfV0lORE9XOiAnT1BFTl9ORVdfV0lORE9XJyxcbn07XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgYnJvd3NlciB9IGZyb20gJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbC10cyc7XG5cbmltcG9ydCB7IGluamVjdEZ1bm5lbCB9IGZyb20gJ0Bqcy9CYWNrZ3JvdW5kL2Z1bm5lbCc7XG5cbmltcG9ydCB7IGdldEN1cnJlbnRUYWIgfSBmcm9tICdAaGVscGVycy90YWJzJztcblxudHlwZSBVc2VGdW5uZWxSZXR1cm5UeXBlID0ge1xuICBpbmplY3Q6IChwYWdlVHlwZTogc3RyaW5nKSA9PiBQcm9taXNlPHZvaWQ+O1xuICBzZW5kRXZlbnQ6IChhY3Rpb246IHN0cmluZywgbGFiZWw6IHN0cmluZywgZGF0YTogYW55KSA9PiBQcm9taXNlPHZvaWQ+O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgKGluUG9wdXAgPSBmYWxzZSk6IFVzZUZ1bm5lbFJldHVyblR5cGUgPT4ge1xuICBjb25zdCBpbmplY3QgPSB1c2VDYWxsYmFjayhcbiAgICBhc3luYyAocGFnZVR5cGUpID0+IHtcbiAgICAgIGlmIChpblBvcHVwKSB7XG4gICAgICAgIGNvbnN0IHRhYiA9IGF3YWl0IGdldEN1cnJlbnRUYWIoKTtcbiAgICAgICAgaWYgKHRhYi5pZCkge1xuICAgICAgICAgIGF3YWl0IGluamVjdEZ1bm5lbCh0YWIuaWQsIHBhZ2VUeXBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgW2luUG9wdXBdXG4gICk7XG5cbiAgY29uc3Qgc2VuZEV2ZW50ID0gdXNlQ2FsbGJhY2soXG4gICAgYXN5bmMgKGFjdGlvbiwgbGFiZWwsIGRhdGEpID0+IHtcbiAgICAgIGlmIChpblBvcHVwKSB7XG4gICAgICAgIGNvbnN0IHRhYiA9IGF3YWl0IGdldEN1cnJlbnRUYWIoKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IGJyb3dzZXIudGFicy5leGVjdXRlU2NyaXB0KHRhYi5pZCwge1xuICAgICAgICAgICAgY29kZTogYGhjZnVubmVsKCdldmVudCcsICdjaHJvbWVfZXh0ZW5zaW9uJywgJyR7YWN0aW9ufScsICcke2xhYmVsfScsICR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgICAgIGRhdGFcbiAgICAgICAgICAgICl9KTtgLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnc2VuZEV2ZW50IGVycm9yOiAnLCBlcnIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoY2Z1bm5lbCgnZXZlbnQnLCAnY2hyb21lX2V4dGVuc2lvbicsIGFjdGlvbiwgbGFiZWwsIGRhdGEpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW2luUG9wdXBdXG4gICk7XG5cbiAgcmV0dXJuIHsgaW5qZWN0LCBzZW5kRXZlbnQgfTtcbn07XG4iLCJleHBvcnQgY29uc3QgZmlsZXMgPSB7XG4gIGh0bWw6IHtcbiAgICBTRUFSQ0hfRk9STTogJy9wb3B1cC5odG1sJyxcbiAgfSxcbiAganM6IHtcbiAgICBGSVJTVF9CT09LSU5HOiAnL2pzL2ZpcnN0Qm9va2luZy5idW5kbGUuanMnLFxuICAgIE9GRkVSOiAnL2pzL29mZmVyLmJ1bmRsZS5qcycsXG4gICAgT05CT0FSRElORzogJy9qcy9vbkJvYXJkaW5nLmJ1bmRsZS5qcycsXG4gICAgUFJPTU9DT0RFOiAnL2pzL3Byb21vQ29kZS5idW5kbGUuanMnLFxuICAgIElORk9STUFUSU9OOiAnL2pzL2luZm9ybWF0aW9uLmJ1bmRsZS5qcycsXG4gIH0sXG4gIGNzczoge1xuICAgIEZJUlNUX0JPT0tJTkc6ICdjc3MvZmlyc3RCb29raW5nLmNzcycsXG4gICAgRk9OVFM6ICcvY3NzL2ZvbnRzLmNzcycsXG4gICAgT0ZGRVI6ICdjc3Mvb2ZmZXIuY3NzJyxcbiAgICBPTkJPQVJESU5HOiAnY3NzL29uQm9hcmRpbmcuY3NzJyxcbiAgICBQUk9NT0NPREU6ICdjc3MvcHJvbW9Db2RlLmNzcycsXG4gICAgSU5GT1JNQVRJT046ICdjc3MvaW5mb3JtYXRpb24uY3NzJyxcbiAgfSxcbiAgaW1hZ2VzOiB7XG4gICAgQkdfRUNPTk9NWV9TVEVQOiAnL2Fzc2V0cy9pbWcvYmFja2dyb3VuZC1lY29ub215LXN0ZXAucG5nJyxcbiAgICBCR19GSVJTVF9CT09LSU5HOiAnL2Fzc2V0cy9pbWcvYmFja2dyb3VuZC1maXJzdC1ib29raW5nLnBuZycsXG4gICAgQkdfSU5TVFJVQ1RJT05TX1NURVA6ICcvYXNzZXRzL2ltZy9iYWNrZ3JvdW5kLWluc3RydWN0aW9ucy1zdGVwLnBuZycsXG4gICAgQkdfV0VMQ09NRV9TVEVQOiAnL2Fzc2V0cy9pbWcvYmFja2dyb3VuZC13ZWxjb21lLXN0ZXAucG5nJyxcbiAgICBGQVZJQ09OX0RFRkFVTFQ6ICcvYXNzZXRzL2ljb25zL2ljb24tMTI4LnBuZycsXG4gICAgRkFWSUNPTl9TVUNDRVNTOiAnL2Fzc2V0cy9pY29ucy9pY29uLXN1Y2Nlc3MucG5nJyxcbiAgICBJQ09OX0hFQVJUOiAnL2Fzc2V0cy9pY29ucy9pY29uLWhlYXJ0LnN2ZycsXG4gICAgSUNPTl9ORVc6ICcvYXNzZXRzL2ljb25zL2ljb24tbmV3LnN2ZycsXG4gICAgSUNPTl9QSU46ICcvYXNzZXRzL2ljb25zL2ljb24tcGluLnN2ZycsXG4gICAgTE9HTzogJy9hc3NldHMvaWNvbnMvbG9nby5zdmcnLFxuICB9LFxufTtcbiIsImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5cbmV4cG9ydCBjb25zdCBhcGkgPSBheGlvcy5jcmVhdGUoe1xuICB3aXRoQ3JlZGVudGlhbHM6IHRydWUsXG59KTtcbiIsImltcG9ydCB7IGNyZWF0ZVN0b3JlLCBjb21wb3NlLCBhcHBseU1pZGRsZXdhcmUgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgdGh1bmsgZnJvbSAncmVkdXgtdGh1bmsnO1xuXG5pbXBvcnQgcm9vdFJlZHVjZXIgZnJvbSAnLi9yZWR1Y2Vycyc7XG5cbmludGVyZmFjZSBSZWR1eFdpbmRvdyBleHRlbmRzIFdpbmRvdyB7XG4gIF9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX186IHR5cGVvZiBjb21wb3NlO1xufVxuZGVjbGFyZSBsZXQgZ2xvYmFsOiBSZWR1eFdpbmRvdztcblxuY29uc3QgZW5oYW5jZXJzID0gW1xuICBhcHBseU1pZGRsZXdhcmUodGh1bmspLFxuICBnbG9iYWwgJiZcbiAgICBnbG9iYWwuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyAmJlxuICAgIGdsb2JhbC5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fKCksXG5dLmZpbHRlcigoeCkgPT4geCk7XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN0b3JlKHJvb3RSZWR1Y2VyLCBjb21wb3NlKC4uLmVuaGFuY2VycykpO1xuIiwiZXhwb3J0IGNvbnN0IFN0YXRlID0ge1xuICBPRkY6ICdvZmYnLFxuICBPTjogJ29uJyxcbn07XG5cbmV4cG9ydCBjb25zdCBwYXJhbXMgPSB7XG4gIFtTdGF0ZS5PRkZdOiBbXG4gICAge1xuICAgICAgZHVyYXRpb246ICdwZXJtJyxcbiAgICAgIGxhYmVsOiAnc2V0dGluZ3Mubm90aWZpY2F0aW9uc0VuYWJsZUZvcmV2ZXInLFxuICAgIH0sXG4gICAge1xuICAgICAgZHVyYXRpb246IDE1LFxuICAgICAgbGFiZWw6ICdzZXR0aW5ncy5ub3RpZmljYXRpb25zRW5hYmxlMTVNaW51dGVzJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIGR1cmF0aW9uOiA2MCxcbiAgICAgIGxhYmVsOiAnc2V0dGluZ3Mubm90aWZpY2F0aW9uc0VuYWJsZTFIb3VyJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIGR1cmF0aW9uOiA3MjAsXG4gICAgICBsYWJlbDogJ3NldHRpbmdzLm5vdGlmaWNhdGlvbnNFbmFibGUxMkhvdXJzJyxcbiAgICB9LFxuICBdLFxuICBbU3RhdGUuT05dOiBbXG4gICAge1xuICAgICAgZHVyYXRpb246IDE1LFxuICAgICAgbGFiZWw6ICdzZXR0aW5ncy5ub3RpZmljYXRpb25zRGlzYWJsZTE1TWludXRlcycsXG4gICAgfSxcbiAgICB7XG4gICAgICBkdXJhdGlvbjogNjAsXG4gICAgICBsYWJlbDogJ3NldHRpbmdzLm5vdGlmaWNhdGlvbnNEaXNhYmxlMUhvdXInLFxuICAgIH0sXG4gICAge1xuICAgICAgZHVyYXRpb246IDcyMCxcbiAgICAgIGxhYmVsOiAnc2V0dGluZ3Mubm90aWZpY2F0aW9uc0Rpc2FibGUxMkhvdXJzJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIGR1cmF0aW9uOiAnbWFudWFsJyxcbiAgICAgIGxhYmVsOiAnc2V0dGluZ3Mubm90aWZpY2F0aW9uc0Rpc2FibGVGb3JldmVyJyxcbiAgICB9LFxuICBdLFxufTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsImltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSAnLi9pcyc7XG5pbXBvcnQgeyBub3JtYWxpemUgfSBmcm9tICcuL29iamVjdCc7XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHdlJ3JlIGluIHRoZSBOb2RlLmpzIG9yIEJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBAcmV0dXJucyBBbnN3ZXIgdG8gZ2l2ZW4gcXVlc3Rpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZUVudigpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyA/IHByb2Nlc3MgOiAwKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nO1xufVxuLyoqXG4gKiBSZXF1aXJlcyBhIG1vZHVsZSB3aGljaCBpcyBwcm90ZWN0ZWQgYWdhaW5zdCBidW5kbGVyIG1pbmlmaWNhdGlvbi5cbiAqXG4gKiBAcGFyYW0gcmVxdWVzdCBUaGUgbW9kdWxlIHBhdGggdG8gcmVzb2x2ZVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlc1xuZXhwb3J0IGZ1bmN0aW9uIGR5bmFtaWNSZXF1aXJlKG1vZCwgcmVxdWVzdCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICByZXR1cm4gbW9kLnJlcXVpcmUocmVxdWVzdCk7XG59XG4vKiogRGVmYXVsdCByZXF1ZXN0IGtleXMgdGhhdCdsbCBiZSB1c2VkIHRvIGV4dHJhY3QgZGF0YSBmcm9tIHRoZSByZXF1ZXN0ICovXG52YXIgREVGQVVMVF9SRVFVRVNUX0tFWVMgPSBbJ2Nvb2tpZXMnLCAnZGF0YScsICdoZWFkZXJzJywgJ21ldGhvZCcsICdxdWVyeV9zdHJpbmcnLCAndXJsJ107XG4vKipcbiAqIE5vcm1hbGl6ZXMgZGF0YSBmcm9tIHRoZSByZXF1ZXN0IG9iamVjdCwgYWNjb3VudGluZyBmb3IgZnJhbWV3b3JrIGRpZmZlcmVuY2VzLlxuICpcbiAqIEBwYXJhbSByZXEgVGhlIHJlcXVlc3Qgb2JqZWN0IGZyb20gd2hpY2ggdG8gZXh0cmFjdCBkYXRhXG4gKiBAcGFyYW0ga2V5cyBBbiBvcHRpb25hbCBhcnJheSBvZiBrZXlzIHRvIGluY2x1ZGUgaW4gdGhlIG5vcm1hbGl6ZWQgZGF0YS4gRGVmYXVsdHMgdG8gREVGQVVMVF9SRVFVRVNUX0tFWVMgaWYgbm90XG4gKiBwcm92aWRlZC5cbiAqIEByZXR1cm5zIEFuIG9iamVjdCBjb250YWluaW5nIG5vcm1hbGl6ZWQgcmVxdWVzdCBkYXRhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0Tm9kZVJlcXVlc3REYXRhKHJlcSwga2V5cykge1xuICAgIGlmIChrZXlzID09PSB2b2lkIDApIHsga2V5cyA9IERFRkFVTFRfUkVRVUVTVF9LRVlTOyB9XG4gICAgLy8gbWFrZSBzdXJlIHdlIGNhbiBzYWZlbHkgdXNlIGR5bmFtaWNSZXF1aXJlIGJlbG93XG4gICAgaWYgKCFpc05vZGVFbnYoKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBnZXQgbm9kZSByZXF1ZXN0IGRhdGEgb3V0c2lkZSBvZiBhIG5vZGUgZW52aXJvbm1lbnRcIik7XG4gICAgfVxuICAgIHZhciByZXF1ZXN0RGF0YSA9IHt9O1xuICAgIC8vIGhlYWRlcnM6XG4gICAgLy8gICBub2RlLCBleHByZXNzOiByZXEuaGVhZGVyc1xuICAgIC8vICAga29hOiByZXEuaGVhZGVyXG4gICAgdmFyIGhlYWRlcnMgPSAocmVxLmhlYWRlcnMgfHwgcmVxLmhlYWRlciB8fCB7fSk7XG4gICAgLy8gbWV0aG9kOlxuICAgIC8vICAgbm9kZSwgZXhwcmVzcywga29hOiByZXEubWV0aG9kXG4gICAgdmFyIG1ldGhvZCA9IHJlcS5tZXRob2Q7XG4gICAgLy8gaG9zdDpcbiAgICAvLyAgIGV4cHJlc3M6IHJlcS5ob3N0bmFtZSBpbiA+IDQgYW5kIHJlcS5ob3N0IGluIDwgNFxuICAgIC8vICAga29hOiByZXEuaG9zdFxuICAgIC8vICAgbm9kZTogcmVxLmhlYWRlcnMuaG9zdFxuICAgIHZhciBob3N0ID0gcmVxLmhvc3RuYW1lIHx8IHJlcS5ob3N0IHx8IGhlYWRlcnMuaG9zdCB8fCAnPG5vIGhvc3Q+JztcbiAgICAvLyBwcm90b2NvbDpcbiAgICAvLyAgIG5vZGU6IDxuL2E+XG4gICAgLy8gICBleHByZXNzLCBrb2E6IHJlcS5wcm90b2NvbFxuICAgIHZhciBwcm90b2NvbCA9IHJlcS5wcm90b2NvbCA9PT0gJ2h0dHBzJyB8fCByZXEuc2VjdXJlIHx8IChyZXEuc29ja2V0IHx8IHt9KS5lbmNyeXB0ZWRcbiAgICAgICAgPyAnaHR0cHMnXG4gICAgICAgIDogJ2h0dHAnO1xuICAgIC8vIHVybCAoaW5jbHVkaW5nIHBhdGggYW5kIHF1ZXJ5IHN0cmluZyk6XG4gICAgLy8gICBub2RlLCBleHByZXNzOiByZXEub3JpZ2luYWxVcmxcbiAgICAvLyAgIGtvYTogcmVxLnVybFxuICAgIHZhciBvcmlnaW5hbFVybCA9IChyZXEub3JpZ2luYWxVcmwgfHwgcmVxLnVybCB8fCAnJyk7XG4gICAgLy8gYWJzb2x1dGUgdXJsXG4gICAgdmFyIGFic29sdXRlVXJsID0gcHJvdG9jb2wgKyBcIjovL1wiICsgaG9zdCArIG9yaWdpbmFsVXJsO1xuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdoZWFkZXJzJzpcbiAgICAgICAgICAgICAgICByZXF1ZXN0RGF0YS5oZWFkZXJzID0gaGVhZGVycztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21ldGhvZCc6XG4gICAgICAgICAgICAgICAgcmVxdWVzdERhdGEubWV0aG9kID0gbWV0aG9kO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndXJsJzpcbiAgICAgICAgICAgICAgICByZXF1ZXN0RGF0YS51cmwgPSBhYnNvbHV0ZVVybDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Nvb2tpZXMnOlxuICAgICAgICAgICAgICAgIC8vIGNvb2tpZXM6XG4gICAgICAgICAgICAgICAgLy8gICBub2RlLCBleHByZXNzLCBrb2E6IHJlcS5oZWFkZXJzLmNvb2tpZVxuICAgICAgICAgICAgICAgIC8vICAgdmVyY2VsLCBzYWlscy5qcywgZXhwcmVzcyAody8gY29va2llIG1pZGRsZXdhcmUpOiByZXEuY29va2llc1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgICAgICAgICByZXF1ZXN0RGF0YS5jb29raWVzID0gcmVxLmNvb2tpZXMgfHwgZHluYW1pY1JlcXVpcmUobW9kdWxlLCAnY29va2llJykucGFyc2UoaGVhZGVycy5jb29raWUgfHwgJycpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncXVlcnlfc3RyaW5nJzpcbiAgICAgICAgICAgICAgICAvLyBxdWVyeSBzdHJpbmc6XG4gICAgICAgICAgICAgICAgLy8gICBub2RlOiByZXEudXJsIChyYXcpXG4gICAgICAgICAgICAgICAgLy8gICBleHByZXNzLCBrb2E6IHJlcS5xdWVyeVxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgICAgICAgICByZXF1ZXN0RGF0YS5xdWVyeV9zdHJpbmcgPSBkeW5hbWljUmVxdWlyZShtb2R1bGUsICd1cmwnKS5wYXJzZShvcmlnaW5hbFVybCB8fCAnJywgZmFsc2UpLnF1ZXJ5O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZGF0YSc6XG4gICAgICAgICAgICAgICAgaWYgKG1ldGhvZCA9PT0gJ0dFVCcgfHwgbWV0aG9kID09PSAnSEVBRCcpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGJvZHkgZGF0YTpcbiAgICAgICAgICAgICAgICAvLyAgIG5vZGUsIGV4cHJlc3MsIGtvYTogcmVxLmJvZHlcbiAgICAgICAgICAgICAgICBpZiAocmVxLmJvZHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0RGF0YS5kYXRhID0gaXNTdHJpbmcocmVxLmJvZHkpID8gcmVxLmJvZHkgOiBKU09OLnN0cmluZ2lmeShub3JtYWxpemUocmVxLmJvZHkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGlmICh7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlcSwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0RGF0YVtrZXldID0gcmVxW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlcXVlc3REYXRhO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9kZS5qcy5tYXAiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBob2lzdE5vblJlYWN0U3RhdGljc18gZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuLy8gU2luY2Ugcm9sbHVwIGNhbm5vdCBkZWFsIHdpdGggbmFtZXNwYWNlIGJlaW5nIGEgZnVuY3Rpb24sXG4vLyB0aGlzIGlzIHRvIGludGVyb3Agd2l0aCBUeXBlU2NyaXB0IHNpbmNlIGBpbnZhcmlhbnRgXG4vLyBkb2VzIG5vdCBleHBvcnQgYSBkZWZhdWx0XG4vLyBodHRwczovL2dpdGh1Yi5jb20vcm9sbHVwL3JvbGx1cC9pc3N1ZXMvMTI2N1xuY29uc3QgaG9pc3ROb25SZWFjdFN0YXRpY3MgPSBob2lzdE5vblJlYWN0U3RhdGljc18uZGVmYXVsdCB8fCBob2lzdE5vblJlYWN0U3RhdGljc187XG5pbXBvcnQgeyBpbnZhcmlhbnRJbnRsQ29udGV4dCB9IGZyb20gJy4uL3V0aWxzJztcbmZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKENvbXBvbmVudCkge1xuICAgIHJldHVybiBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG59XG4vLyBUT0RPOiBXZSBzaG91bGQgcHJvdmlkZSBpbml0aWFsIHZhbHVlIGhlcmVcbmNvbnN0IEludGxDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmNvbnN0IHsgQ29uc3VtZXI6IEludGxDb25zdW1lciwgUHJvdmlkZXI6IEludGxQcm92aWRlciB9ID0gSW50bENvbnRleHQ7XG5leHBvcnQgY29uc3QgUHJvdmlkZXIgPSBJbnRsUHJvdmlkZXI7XG5leHBvcnQgY29uc3QgQ29udGV4dCA9IEludGxDb250ZXh0O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5qZWN0SW50bChXcmFwcGVkQ29tcG9uZW50LCBvcHRpb25zKSB7XG4gICAgY29uc3QgeyBpbnRsUHJvcE5hbWUgPSAnaW50bCcsIGZvcndhcmRSZWYgPSBmYWxzZSwgZW5mb3JjZUNvbnRleHQgPSB0cnVlIH0gPSBvcHRpb25zIHx8IHt9O1xuICAgIGNvbnN0IFdpdGhJbnRsID0gcHJvcHMgPT4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW50bENvbnN1bWVyLCBudWxsLCAoaW50bCkgPT4ge1xuICAgICAgICBpZiAoZW5mb3JjZUNvbnRleHQpIHtcbiAgICAgICAgICAgIGludmFyaWFudEludGxDb250ZXh0KGludGwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBPYmplY3QuYXNzaWduKHt9LCBwcm9wcywge1xuICAgICAgICAgICAgW2ludGxQcm9wTmFtZV06IGludGwsXG4gICAgICAgIH0sIHsgcmVmOiBmb3J3YXJkUmVmID8gcHJvcHMuZm9yd2FyZGVkUmVmIDogbnVsbCB9KSkpO1xuICAgIH0pKTtcbiAgICBXaXRoSW50bC5kaXNwbGF5TmFtZSA9IGBpbmplY3RJbnRsKCR7Z2V0RGlzcGxheU5hbWUoV3JhcHBlZENvbXBvbmVudCl9KWA7XG4gICAgV2l0aEludGwuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgaWYgKGZvcndhcmRSZWYpIHtcbiAgICAgICAgcmV0dXJuIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFJlYWN0LmZvcndhcmRSZWYoKHByb3BzLCByZWYpID0+IChSZWFjdC5jcmVhdGVFbGVtZW50KFdpdGhJbnRsLCBPYmplY3QuYXNzaWduKHt9LCBwcm9wcywgeyBmb3J3YXJkZWRSZWY6IHJlZiB9KSkpKSwgV3JhcHBlZENvbXBvbmVudCk7XG4gICAgfVxuICAgIHJldHVybiBob2lzdE5vblJlYWN0U3RhdGljcyhXaXRoSW50bCwgV3JhcHBlZENvbXBvbmVudCk7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBJY29uIGFzIEljb25UeXBlIH0gZnJvbSAnQGludGVyZmFjZXMvaW50ZXJmYWNlcyc7XG5cbmNvbnN0IEljb25Dcm9zczogUmVhY3QuRkM8SWNvblR5cGU+ID0gKHtcbiAgY2xhc3NOYW1lLFxuICBmaWxsID0gJyM4Njg2ODYnLFxuICBoZWlnaHQgPSAxOCxcbiAgd2lkdGggPSAxOCxcbn0pID0+IChcbiAgPHN2Z1xuICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgIGZpbGw9e2ZpbGx9XG4gICAgaGVpZ2h0PXtoZWlnaHR9XG4gICAgdmlld0JveD1cIjAgMCAyMCAyMVwiXG4gICAgd2lkdGg9e3dpZHRofVxuICA+XG4gICAgPHBhdGhcbiAgICAgIGQ9XCJNMTEuNTkgMTBsNS4xNTktNS4xNmExLjEyNiAxLjEyNiAwIDAgMC0xLjU5LTEuNTlMMTAgOC40MSA0Ljg0IDMuMjVhMS4xMjggMS4xMjggMCAwIDAtMS41OSAwIDEuMTI4IDEuMTI4IDAgMCAwIDAgMS41OUw4LjQwOCAxMCAzLjI1IDE1LjE2YTEuMTI4IDEuMTI4IDAgMCAwIDAgMS41OSAxLjEyOCAxLjEyOCAwIDAgMCAxLjU5IDBMMTAgMTEuNTlsNS4xNTggNS4xNmExLjEyNiAxLjEyNiAwIDAgMCAxLjU5LTEuNTlMMTEuNTkyIDEwelwiXG4gICAgICBmaWxsUnVsZT1cIm5vbnplcm9cIlxuICAgIC8+XG4gIDwvc3ZnPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgSWNvbkNyb3NzO1xuIiwiaW1wb3J0IHsgYnJvd3NlciB9IGZyb20gJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbC10cyc7XG5cbmltcG9ydCB7IFByb21vQ29kZSB9IGZyb20gJ0BpbnRlcmZhY2VzL2ludGVyZmFjZXMnO1xuXG5pbXBvcnQgeyBDb21wZXRpdG9yIH0gZnJvbSAnQGNvbnN0YW50cy9jb21wZXRpdG9ycyc7XG5pbXBvcnQgeyBCUkFORCwgTEFORyB9IGZyb20gJ0Bjb25zdGFudHMvY29uc3RhbnRzJztcbmltcG9ydCB7IFN0b3JhZ2UgfSBmcm9tICdAY29uc3RhbnRzL3N0b3JhZ2UnO1xuaW1wb3J0IHVybHMgZnJvbSAnQGNvbnN0YW50cy91cmxzJztcblxuaW1wb3J0IHsgUHJpY2VTZXR0aW5nIH0gZnJvbSAnQGNvbXBvbmVudHMvUHJpY2VTZXR0aW5ncy9jb21wb25lbnRzL1Jvdy9Sb3cnO1xuXG5pbXBvcnQgeyBhcGkgfSBmcm9tICdAaGVscGVycy9hcGknO1xuaW1wb3J0IHsgZ2V0RnJvbVN0b3JhZ2UgfSBmcm9tICdAaGVscGVycy9zdG9yYWdlJztcbmltcG9ydCB7IGdldFZlcnNpb24gfSBmcm9tICdAaGVscGVycy91dGlscyc7XG5cbmNvbnN0IE1PU1RfVklTSVRFRF9TSVRFU19BTU9VTlQgPSA1MDtcbmNvbnN0IE1BWF9TRUFSQ0hfUkVTVUxUUyA9IDUwMDA7XG5cbmV4cG9ydCBlbnVtIFBhZ2VUeXBlIHtcbiAgQ09OR1JBVFVMQVRJT05TID0gJ2NvbmdyYXR1bGF0aW9ucycsXG4gIEhJU1RPUlkgPSAnaGlzdG9yeScsXG4gIE9GRkVSID0gJ29mZmVyJyxcbiAgT1JERVIgPSAnb3JkZXInLFxuICBQUklDRV9TRVRUSU5HUyA9ICdwcmljZV9zZXR0aW5ncycsXG4gIFBST01PQ09ERSA9ICdwcm9tb2NvZGUnLFxuICBTRVJQID0gJ3NlcnAnLFxuICBXRUxDT01FID0gJ3dlbGNvbWUnLFxuICBJTkZPUk1BVElPTiA9ICdpbmZvcm1hdGlvbicsXG59XG5cbmVudW0gR2V0RGF0YUtleSB7XG4gIFBBR0VUWVBFID0gJ3BhZ2V0eXBlJyxcbiAgVVNFUl9JRCA9ICd1c2VyX2lkJyxcbn1cblxuaW50ZXJmYWNlIEdldERhdGEge1xuICBbR2V0RGF0YUtleS5QQUdFVFlQRV06IFBhZ2VUeXBlO1xuICBbR2V0RGF0YUtleS5VU0VSX0lEXTogbnVtYmVyO1xufVxuXG5jb25zdCBDSFJPTUVfRVhURU5TSU9OX0pTT05fREFUQV9LRVkgPSAnY2hyb21lX2V4dGVuc2lvbl9qc29uX2RhdGEnO1xuXG5lbnVtIFBvc3REYXRhS2V5IHtcbiAgQUREUkVTUyA9ICdhZGRyZXNzJyxcbiAgQkFSX1BSSUNFID0gJ2Jhcl9wcmljZScsXG4gIEJBVEhST09NX1RZUEUgPSAnYmF0aHJvb21fdHlwZScsXG4gIEJFRF9UWVBFID0gJ2JlZF90eXBlJyxcbiAgQ0FOQ0VMTEFUSU9OX0JFRk9SRSA9ICdjYW5jZWxsYXRpb25fYmVmb3JlJyxcbiAgQ0hFQ0tJTiA9ICdjaGVja2luJyxcbiAgQ0hFQ0tPVVQgPSAnY2hlY2tvdXQnLFxuICBDSVRZID0gJ2NpdHknLFxuICBDT01QRVRJVE9SX0NVUlJFTkNZID0gJ2NvbXBldGl0b3JfY3VycmVuY3knLFxuICBDT01QRVRJVE9SX0lEID0gJ2NvbXBldGl0b3JfaWQnLFxuICBDT01QRVRJVE9SX05FVF9QUklDRSA9ICdjb21wZXRpdG9yX25ldF9wcmljZScsXG4gIENPTVBFVElUT1JfUFJJQ0UgPSAnY29tcGV0aXRvcl9wcmljZScsXG4gIERBVEVUSU1FID0gJ2RhdGV0aW1lJyxcbiAgRVhURU5TSU9OX0JSQU5EID0gJ2V4dGVuc2lvbl9icmFuZCcsXG4gIEVYVEVOU0lPTl9MQU5HID0gJ2V4dGVuc2lvbl9sYW5nJyxcbiAgRVhURU5TSU9OX1ZFUlNJT04gPSAnZXh0ZW5zaW9uX3ZlcnNpb24nLFxuICBFWFRFUk5BTF9DVVJSRU5DWSA9ICdleHRlcm5hbF9jdXJyZW5jeScsXG4gIEVYVEVSTkFMX0hPVEVMX0lEID0gJ2V4dGVybmFsX2hvdGVsX2lkJyxcbiAgRVhURVJOQUxfSE9URUxfTkFNRSA9ICdleHRlcm5hbF9ob3RlbF9uYW1lJyxcbiAgRlVOTkVMX1NURVAgPSAnZnVubmVsX3N0ZXAnLFxuICBHRU8gPSAnZ2VvJyxcbiAgR1VFU1RTID0gJ2d1ZXN0cycsXG4gIEdVRVNUU19ERVRBSUxFRCA9ICdndWVzdHNfZGV0YWlsZWQnLFxuICBIQVNfQkFMQ09OWSA9ICdoYXNfYmFsY29ueScsXG4gIEhBU19NRUFMID0gJ2hhc19tZWFsJyxcbiAgSE9URUxfS0lORCA9ICdob3RlbF9raW5kJyxcbiAgSE9URUxfTkFNRSA9ICdob3RlbF9uYW1lJyxcbiAgSVNfRVRHID0gJ2lzX2V0ZycsXG4gIExBTkdVQUdFID0gJ2xhbmd1YWdlJyxcbiAgTEFUSVRVREUgPSAnbGF0aXR1ZGUnLFxuICBMT05HSVRVREUgPSAnbG9uZ2l0dWRlJyxcbiAgTUFJTl9DT01QRVRJVE9SX1BSSUNFID0gJ21haW5fY29tcGV0aXRvcl9wcmljZScsXG4gIE1FQUxfVFlQRSA9ICdtZWFsX3R5cGUnLFxuICBNSU5fT1NUUk9WT0tfTE9ZQUxUWSA9ICdtaW5fb3N0cm92b2tfbG95YWx0eScsXG4gIE1JTl9PU1RST1ZPS19QUklDRSA9ICdtaW5fb3N0cm92b2tfcHJpY2UnLFxuICBNSU5fT1NUUk9WT0tfUFJJQ0VfV0lUSF9UQVhFUyA9ICdtaW5fb3N0cm92b2tfcHJpY2Vfd2l0aF90YXhlcycsXG4gIE5FVF9QUklDRSA9ICduZXRfcHJpY2UnLFxuICBOVU1fSU5fUEFHRSA9ICdudW1faW5fcGFnZScsXG4gIE9TVFJPVk9LX0NVUlJFTkNZID0gJ29zdHJvdm9rX2N1cnJlbmN5JyxcbiAgT1RBSE9URUxfSUQgPSAnb3RhaG90ZWxfaWQnLFxuICBQSE9ORSA9ICdwaG9uZScsXG4gIFBSSUNFID0gJ3ByaWNlJyxcbiAgUFJJQ0VfV0lUSF9UQVhFUyA9ICdwcmljZV93aXRoX3RheGVzJyxcbiAgUFJPTU9fQU1PVU5UID0gJ3Byb21vX2Ftb3VudCcsXG4gIFJFR0lPTiA9ICdyZWdpb24nLFxuICBSRVNJREVOQ1kgPSAncmVzaWRlbmN5JyxcbiAgUk9PTV9OQU1FID0gJ3Jvb21fbmFtZScsXG4gIFNUQVJfUkFUSU5HID0gJ3N0YXJfcmF0aW5nJyxcbiAgU1VQX05BTUUgPSAnc3VwX25hbWUnLFxuICBTVVBfUFJJQ0UgPSAnc3VwX3ByaWNlJyxcbiAgVEFYRVMgPSAndGF4ZXMnLFxufVxuXG50eXBlIEd1ZXN0ID0ge1xuICBhZHVsdHM6IG51bWJlcjtcbiAgY2hpbGRyZW46IG51bWJlcltdO1xufTtcblxudHlwZSBQb3N0RGF0YSA9XG4gIHwge1xuICAgICAgW1Bvc3REYXRhS2V5LkJBUl9QUklDRV06IHN0cmluZztcbiAgICAgIFtQb3N0RGF0YUtleS5CQVRIUk9PTV9UWVBFXTogKHN0cmluZyB8IG51bGwpW10gfCBudWxsO1xuICAgICAgW1Bvc3REYXRhS2V5LkJFRF9UWVBFXTogc3RyaW5nIHwgbnVsbDtcbiAgICAgIFtQb3N0RGF0YUtleS5DQU5DRUxMQVRJT05fQkVGT1JFXTogKHN0cmluZyB8IG51bGwpW10gfCBudWxsO1xuICAgICAgW1Bvc3REYXRhS2V5LkNIRUNLSU5dOiBzdHJpbmc7XG4gICAgICBbUG9zdERhdGFLZXkuQ0hFQ0tPVVRdOiBzdHJpbmc7XG4gICAgICBbUG9zdERhdGFLZXkuQ09NUEVUSVRPUl9DVVJSRU5DWV06IHN0cmluZztcbiAgICAgIFtQb3N0RGF0YUtleS5DT01QRVRJVE9SX0lEXTogc3RyaW5nO1xuICAgICAgW1Bvc3REYXRhS2V5LkRBVEVUSU1FXTogbnVtYmVyO1xuICAgICAgW1Bvc3REYXRhS2V5LkVYVEVOU0lPTl9CUkFORF06IHN0cmluZztcbiAgICAgIFtQb3N0RGF0YUtleS5FWFRFTlNJT05fTEFOR106IHN0cmluZztcbiAgICAgIFtQb3N0RGF0YUtleS5FWFRFTlNJT05fVkVSU0lPTl06IHN0cmluZztcbiAgICAgIFtQb3N0RGF0YUtleS5FWFRFUk5BTF9DVVJSRU5DWV06IHN0cmluZztcbiAgICAgIFtQb3N0RGF0YUtleS5FWFRFUk5BTF9IT1RFTF9JRF06IHN0cmluZyB8IG51bWJlcjtcbiAgICAgIFtQb3N0RGF0YUtleS5FWFRFUk5BTF9IT1RFTF9OQU1FXTogc3RyaW5nO1xuICAgICAgW1Bvc3REYXRhS2V5LkZVTk5FTF9TVEVQXTogc3RyaW5nO1xuICAgICAgW1Bvc3REYXRhS2V5LkdVRVNUU106IG51bWJlcjtcbiAgICAgIFtQb3N0RGF0YUtleS5HVUVTVFNfREVUQUlMRURdOiBHdWVzdFtdO1xuICAgICAgW1Bvc3REYXRhS2V5LkhBU19CQUxDT05ZXTogYm9vbGVhbltdIHwgYm9vbGVhbjtcbiAgICAgIFtQb3N0RGF0YUtleS5IQVNfTUVBTF06IGJvb2xlYW5bXSB8IGJvb2xlYW47XG4gICAgICBbUG9zdERhdGFLZXkuSVNfRVRHXTogYm9vbGVhbjtcbiAgICAgIFtQb3N0RGF0YUtleS5NQUlOX0NPTVBFVElUT1JfUFJJQ0VdOiBzdHJpbmcgfCBudW1iZXI7XG4gICAgICBbUG9zdERhdGFLZXkuTUVBTF9UWVBFXTogKHN0cmluZyB8IG51bGwpW10gfCBudWxsO1xuICAgICAgW1Bvc3REYXRhS2V5Lk1JTl9PU1RST1ZPS19MT1lBTFRZXTogbnVtYmVyO1xuICAgICAgW1Bvc3REYXRhS2V5Lk1JTl9PU1RST1ZPS19QUklDRV06IHN0cmluZztcbiAgICAgIFtQb3N0RGF0YUtleS5NSU5fT1NUUk9WT0tfUFJJQ0VfV0lUSF9UQVhFU106IHN0cmluZztcbiAgICAgIFtQb3N0RGF0YUtleS5QUklDRV9XSVRIX1RBWEVTXTogc3RyaW5nO1xuICAgICAgW1Bvc3REYXRhS2V5Lk5FVF9QUklDRV06IHN0cmluZztcbiAgICAgIFtQb3N0RGF0YUtleS5OVU1fSU5fUEFHRV06IG51bWJlcjtcbiAgICAgIFtQb3N0RGF0YUtleS5PU1RST1ZPS19DVVJSRU5DWV06IHN0cmluZztcbiAgICAgIFtQb3N0RGF0YUtleS5PVEFIT1RFTF9JRF06IHN0cmluZztcbiAgICAgIFtQb3N0RGF0YUtleS5QUk9NT19BTU9VTlRdOiBudW1iZXI7XG4gICAgICBbUG9zdERhdGFLZXkuUkVTSURFTkNZXTogc3RyaW5nO1xuICAgICAgW1Bvc3REYXRhS2V5LlJPT01fTkFNRV06IChzdHJpbmcgfCBudWxsKVtdIHwgbnVsbDtcbiAgICAgIFtQb3N0RGF0YUtleS5UQVhFU106IG51bWJlciB8IG51bWJlcltdIHwgbnVsbDtcbiAgICB9XG4gIHwge1xuICAgICAgW1Bvc3REYXRhS2V5LkVYVEVOU0lPTl9CUkFORF06IHN0cmluZztcbiAgICAgIFtQb3N0RGF0YUtleS5FWFRFTlNJT05fTEFOR106IHN0cmluZztcbiAgICAgIFtQb3N0RGF0YUtleS5FWFRFTlNJT05fVkVSU0lPTl06IHN0cmluZztcbiAgICAgIFtQb3N0RGF0YUtleS5QUk9NT19BTU9VTlRdOiBudW1iZXI7XG4gICAgfTtcblxuZXhwb3J0IGludGVyZmFjZSBDb21wZXRpdG9yU2VycFBvc3REYXRhIHtcbiAgW1Bvc3REYXRhS2V5LkFERFJFU1NdOiBzdHJpbmc7XG4gIFtQb3N0RGF0YUtleS5DQU5DRUxMQVRJT05fQkVGT1JFXTogc3RyaW5nIHwgbnVsbDtcbiAgW1Bvc3REYXRhS2V5LkNIRUNLSU5dOiBzdHJpbmc7XG4gIFtQb3N0RGF0YUtleS5DSEVDS09VVF06IHN0cmluZztcbiAgW1Bvc3REYXRhS2V5LkNJVFldOiBzdHJpbmc7XG4gIFtQb3N0RGF0YUtleS5DT01QRVRJVE9SX0NVUlJFTkNZXTogc3RyaW5nO1xuICBbUG9zdERhdGFLZXkuQ09NUEVUSVRPUl9JRF06IHN0cmluZztcbiAgW1Bvc3REYXRhS2V5LkNPTVBFVElUT1JfTkVUX1BSSUNFXTogbnVtYmVyO1xuICBbUG9zdERhdGFLZXkuQ09NUEVUSVRPUl9QUklDRV06IG51bWJlcjtcbiAgW1Bvc3REYXRhS2V5LkVYVEVSTkFMX0hPVEVMX0lEXTogc3RyaW5nIHwgbnVtYmVyO1xuICBbUG9zdERhdGFLZXkuR0VPXTogc3RyaW5nIHwgbnVsbDtcbiAgW1Bvc3REYXRhS2V5LkdVRVNUU106IEd1ZXN0W107XG4gIFtQb3N0RGF0YUtleS5IQVNfTUVBTF06IGJvb2xlYW5bXTtcbiAgW1Bvc3REYXRhS2V5LkhPVEVMX0tJTkRdOiBzdHJpbmc7XG4gIFtQb3N0RGF0YUtleS5IT1RFTF9OQU1FXTogc3RyaW5nO1xuICBbUG9zdERhdGFLZXkuTEFOR1VBR0VdOiBzdHJpbmc7XG4gIFtQb3N0RGF0YUtleS5MQVRJVFVERV06IHN0cmluZztcbiAgW1Bvc3REYXRhS2V5LkxPTkdJVFVERV06IHN0cmluZztcbiAgW1Bvc3REYXRhS2V5Lk1FQUxfVFlQRV06IHN0cmluZ1tdO1xuICBbUG9zdERhdGFLZXkuTlVNX0lOX1BBR0VdOiBudW1iZXI7XG4gIFtQb3N0RGF0YUtleS5QSE9ORV06IHN0cmluZztcbiAgW1Bvc3REYXRhS2V5LlJFR0lPTl06IHN0cmluZztcbiAgW1Bvc3REYXRhS2V5LlJFU0lERU5DWV06IHN0cmluZztcbiAgW1Bvc3REYXRhS2V5LlJPT01fTkFNRV06IHN0cmluZ1tdO1xuICBbUG9zdERhdGFLZXkuU1RBUl9SQVRJTkddOiBudW1iZXI7XG4gIFtQb3N0RGF0YUtleS5TVVBfTkFNRV06IHN0cmluZyB8IHN0cmluZ1tdO1xuICBbUG9zdERhdGFLZXkuU1VQX1BSSUNFXTogbnVtYmVyO1xufVxuXG5leHBvcnQgY29uc3QgaW5qZWN0RnVubmVsID0gYXN5bmMgKFxuICB0YWJJZDogbnVtYmVyLFxuICBwYWdlVHlwZTogUGFnZVR5cGVcbik6IFByb21pc2U8YW55PiA9PiB7XG4gIGNvbnN0IHVpZCA9IGF3YWl0IGdldEZyb21TdG9yYWdlKFN0b3JhZ2UuVUlEKTtcbiAgY29uc3QgdXNlcklkID0gYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoU3RvcmFnZS5VU0VSX0lEKTtcbiAgY29uc3QgcmF0ZXMgPSAoYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoU3RvcmFnZS5SQVRFUykpIHx8IHt9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBkYXRhOiBmdW5uZWxDb2RlIH0gPSBhd2FpdCBhcGkuZ2V0KHVybHMuRlVOTkVMKTtcblxuICAgIGF3YWl0IGJyb3dzZXIudGFicy5leGVjdXRlU2NyaXB0KHRhYklkLCB7XG4gICAgICBjb2RlOiBgKCgpID0+IHtcbiAgICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICB9KSgpO2AsXG4gICAgfSk7XG4gICAgYXdhaXQgYnJvd3Nlci50YWJzLmV4ZWN1dGVTY3JpcHQodGFiSWQsIHsgY29kZTogZnVubmVsQ29kZSB9KTtcbiAgICBhd2FpdCBicm93c2VyLnRhYnMuZXhlY3V0ZVNjcmlwdCh0YWJJZCwge1xuICAgICAgY29kZTogYFxuICAgICAgICBoY2Z1bm5lbCgncGxhdGZvcm0nLCAnY2hyb21lX2V4dGVuc2lvbicpO1xuICAgICAgICBoY2Z1bm5lbCgnc2l0ZWxhbmcnLCAncnUnKTtcbiAgICAgICAgaGNmdW5uZWwoJ3VpZCcsICcke3VpZH0nKTtcbiAgICAgIGAsXG4gICAgfSk7XG5cbiAgICBjb25zdCBnZXREYXRhOiBHZXREYXRhID0ge1xuICAgICAgW0dldERhdGFLZXkuUEFHRVRZUEVdOiBwYWdlVHlwZSxcbiAgICAgIFtHZXREYXRhS2V5LlVTRVJfSURdOiB1c2VySWQsXG4gICAgfTtcblxuICAgIGxldCByYXRlID0gcmF0ZXNbdGFiSWRdO1xuICAgIGxldCBwb3N0RGF0YToge1xuICAgICAgW0NIUk9NRV9FWFRFTlNJT05fSlNPTl9EQVRBX0tFWV06IFBvc3REYXRhO1xuICAgIH07XG5cbiAgICBpZiAoIXJhdGUpIHtcbiAgICAgIGNvbnN0IG5vUmF0ZURhdGEgPSAoYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoU3RvcmFnZS5OT19SQVRFX0RBVEEpKSB8fCB7fTtcbiAgICAgIHJhdGUgPSBub1JhdGVEYXRhW3RhYklkXTtcbiAgICB9XG5cbiAgICBjb25zdCBwcm9tb0NvZGUgPSAoYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoU3RvcmFnZS5QUk9NT0NPREUpKSBhcyBQcm9tb0NvZGU7XG5cbiAgICBpZiAocmF0ZSkge1xuICAgICAgcG9zdERhdGEgPSB7XG4gICAgICAgIFtDSFJPTUVfRVhURU5TSU9OX0pTT05fREFUQV9LRVldOiB7XG4gICAgICAgICAgW1Bvc3REYXRhS2V5LkJBUl9QUklDRV06XG4gICAgICAgICAgICByYXRlLmNvbW1pc3Npb25JbmZvPy5zaG93LmFtb3VudF9ncm9zc19tYXJrdXAsXG4gICAgICAgICAgW1Bvc3REYXRhS2V5LkJBVEhST09NX1RZUEVdOiByYXRlLmJhdGhyb29tVHlwZSxcbiAgICAgICAgICBbUG9zdERhdGFLZXkuQkVEX1RZUEVdOiByYXRlLmJlZFR5cGUsXG4gICAgICAgICAgW1Bvc3REYXRhS2V5LkNIRUNLSU5dOiByYXRlLmNoZWNrSW4sXG4gICAgICAgICAgW1Bvc3REYXRhS2V5LkNIRUNLT1VUXTogcmF0ZS5jaGVja091dCxcbiAgICAgICAgICBbUG9zdERhdGFLZXkuQ09NUEVUSVRPUl9DVVJSRU5DWV06IHJhdGUuY3VycmVuY3ksXG4gICAgICAgICAgW1Bvc3REYXRhS2V5LkNPTVBFVElUT1JfSURdOiByYXRlLmNvbXBldGl0b3IsXG4gICAgICAgICAgW1Bvc3REYXRhS2V5LkRBVEVUSU1FXTogRGF0ZS5ub3coKSxcbiAgICAgICAgICBbUG9zdERhdGFLZXkuRVhURU5TSU9OX0JSQU5EXTogQlJBTkQsXG4gICAgICAgICAgW1Bvc3REYXRhS2V5LkVYVEVOU0lPTl9MQU5HXTogTEFORyxcbiAgICAgICAgICBbUG9zdERhdGFLZXkuRVhURU5TSU9OX1ZFUlNJT05dOiBnZXRWZXJzaW9uKCksXG4gICAgICAgICAgW1Bvc3REYXRhS2V5LkVYVEVSTkFMX0NVUlJFTkNZXTogcmF0ZS5leHRlcm5hbEN1cnJlbmN5LFxuICAgICAgICAgIFtQb3N0RGF0YUtleS5FWFRFUk5BTF9IT1RFTF9JRF06IHJhdGUuZXh0ZXJuYWxIb3RlbElkLFxuICAgICAgICAgIFtQb3N0RGF0YUtleS5FWFRFUk5BTF9IT1RFTF9OQU1FXTogcmF0ZS5leHRlcm5hbEhvdGVsTmFtZSxcbiAgICAgICAgICBbUG9zdERhdGFLZXkuRlVOTkVMX1NURVBdOiByYXRlLmZ1bm5lbFN0ZXAsXG4gICAgICAgICAgW1Bvc3REYXRhS2V5LkdVRVNUU106IHJhdGUuZ3Vlc3RzLnJlZHVjZShcbiAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgYWNjdW06IG51bWJlcixcbiAgICAgICAgICAgICAgeyBhZHVsdHMsIGtpZHMgfTogeyBhZHVsdHM6IG51bWJlcjsga2lkczogbnVtYmVyW10gfVxuICAgICAgICAgICAgKSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiBhY2N1bSArICthZHVsdHMgKyAoa2lkcz8ubGVuZ3RoIHx8IDApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIDBcbiAgICAgICAgICApLFxuICAgICAgICAgIFtQb3N0RGF0YUtleS5HVUVTVFNfREVUQUlMRURdOiByYXRlLmd1ZXN0cy5tYXAoXG4gICAgICAgICAgICAoZ3Vlc3Q6IHsgYWR1bHRzOiBudW1iZXI7IGtpZHM/OiBudW1iZXJbXSB9KSA9PiAoe1xuICAgICAgICAgICAgICBhZHVsdHM6IGd1ZXN0LmFkdWx0cyxcbiAgICAgICAgICAgICAgY2hpbGRyZW46IGd1ZXN0LmtpZHMsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICksXG4gICAgICAgICAgW1Bvc3REYXRhS2V5LkhBU19CQUxDT05ZXTogcmF0ZS5oYXNCYWxjb255LFxuICAgICAgICAgIFtQb3N0RGF0YUtleS5JU19FVEddOiByYXRlLmlzRXRnLFxuICAgICAgICAgIFtQb3N0RGF0YUtleS5NQUlOX0NPTVBFVElUT1JfUFJJQ0VdOiByYXRlLnByaWNlT2xkV2l0aG91dFRheGVzLFxuICAgICAgICAgIFtQb3N0RGF0YUtleS5QUklDRV9XSVRIX1RBWEVTXTogcmF0ZS5wcmljZU9sZFdpdGhUYXhlcyxcbiAgICAgICAgICBbUG9zdERhdGFLZXkuTUVBTF9UWVBFXTogcmF0ZS5tZWFsVHlwZSxcbiAgICAgICAgICBbUG9zdERhdGFLZXkuTUlOX09TVFJPVk9LX0xPWUFMVFldOiByYXRlLmxveWFsdHksXG4gICAgICAgICAgW1Bvc3REYXRhS2V5Lk1JTl9PU1RST1ZPS19QUklDRV06IHJhdGUucHJpY2VXaXRob3V0VGF4ZXMsXG4gICAgICAgICAgW1Bvc3REYXRhS2V5Lk1JTl9PU1RST1ZPS19QUklDRV9XSVRIX1RBWEVTXTogcmF0ZS5wcmljZVdpdGhUYXhlcyxcbiAgICAgICAgICBbUG9zdERhdGFLZXkuTkVUX1BSSUNFXTogcmF0ZS5jb21taXNzaW9uSW5mbz8uc2hvdy5hbW91bnRfbmV0LFxuICAgICAgICAgIFtQb3N0RGF0YUtleS5OVU1fSU5fUEFHRV06IChyYXRlLnJhdGVJbmRleCB8fCAwKSArIDEsXG4gICAgICAgICAgW1Bvc3REYXRhS2V5Lk9TVFJPVk9LX0NVUlJFTkNZXTogcmF0ZS5jdXJyZW5jeSxcbiAgICAgICAgICBbUG9zdERhdGFLZXkuT1RBSE9URUxfSURdOiByYXRlLmhvdGVsSWQsXG4gICAgICAgICAgW1Bvc3REYXRhS2V5LlBST01PX0FNT1VOVF06XG4gICAgICAgICAgICBwcm9tb0NvZGUgJiYgcGFyc2VGbG9hdChwcm9tb0NvZGUuZGlzY291bnQpIC8gMTAwLFxuICAgICAgICAgIFtQb3N0RGF0YUtleS5SRVNJREVOQ1ldOiByYXRlLnJlc2lkZW5jeSxcbiAgICAgICAgICBbUG9zdERhdGFLZXkuUk9PTV9OQU1FXTogcmF0ZS5yb29tTmFtZSxcbiAgICAgICAgICBbUG9zdERhdGFLZXkuVEFYRVNdOiByYXRlLnRheGVzLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgaWYgKHJhdGUuZnVubmVsU3RlcCA9PT0gJ2Jvb2tpbmdfZm9ybScpIHtcbiAgICAgICAgcG9zdERhdGEgPSB7XG4gICAgICAgICAgW0NIUk9NRV9FWFRFTlNJT05fSlNPTl9EQVRBX0tFWV06IHtcbiAgICAgICAgICAgIC4uLnBvc3REYXRhW0NIUk9NRV9FWFRFTlNJT05fSlNPTl9EQVRBX0tFWV0sXG4gICAgICAgICAgICBbUG9zdERhdGFLZXkuQ0FOQ0VMTEFUSU9OX0JFRk9SRV06IHJhdGUuY2FuY2VsbGF0aW9uQmVmb3JlLFxuICAgICAgICAgICAgW1Bvc3REYXRhS2V5LkhBU19NRUFMXTogcmF0ZS5oYXNNZWFsLFxuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBvc3REYXRhID0ge1xuICAgICAgICBbQ0hST01FX0VYVEVOU0lPTl9KU09OX0RBVEFfS0VZXToge1xuICAgICAgICAgIFtQb3N0RGF0YUtleS5FWFRFTlNJT05fQlJBTkRdOiBCUkFORCxcbiAgICAgICAgICBbUG9zdERhdGFLZXkuRVhURU5TSU9OX0xBTkddOiBMQU5HLFxuICAgICAgICAgIFtQb3N0RGF0YUtleS5FWFRFTlNJT05fVkVSU0lPTl06IGdldFZlcnNpb24oKSxcbiAgICAgICAgICBbUG9zdERhdGFLZXkuUFJPTU9fQU1PVU5UXTpcbiAgICAgICAgICAgIHByb21vQ29kZSAmJiBwYXJzZUZsb2F0KHByb21vQ29kZS5kaXNjb3VudCkgLyAxMDAsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH1cblxuICAgIGF3YWl0IGJyb3dzZXIudGFicy5leGVjdXRlU2NyaXB0KHRhYklkLCB7XG4gICAgICBjb2RlOiBgaGNmdW5uZWwoJ3NlbmQnLCAke0pTT04uc3RyaW5naWZ5KGdldERhdGEpfSwgJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgcG9zdERhdGFcbiAgICAgICl9KTtgLFxuICAgIH0pO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn07XG5cbmVudW0gRGF0YUtleSB7XG4gIEhJU1RPUlkgPSAnaGlzdG9yeScsXG4gIE9SREVSID0gJ29yZGVyJyxcbiAgU0VSUCA9ICdzZXJwJyxcbiAgUFJJQ0VfU0VUVElOR1MgPSAncHJpY2Vfc2V0dGluZ3MnLFxufVxuXG5pbnRlcmZhY2UgQ29tcGV0aXRvclNlcnBEYXRhIHtcbiAgW0NIUk9NRV9FWFRFTlNJT05fSlNPTl9EQVRBX0tFWV06IHtcbiAgICBbRGF0YUtleS5TRVJQXTogQ29tcGV0aXRvclNlcnBQb3N0RGF0YVtdO1xuICB9O1xufVxuXG5pbnRlcmZhY2UgQ29tcGV0aXRvck9yZGVyRGF0YSB7XG4gIFtDSFJPTUVfRVhURU5TSU9OX0pTT05fREFUQV9LRVldOiB7XG4gICAgW0RhdGFLZXkuT1JERVJdOiBQb3N0RGF0YTtcbiAgfTtcbn1cblxuaW50ZXJmYWNlIEhpc3RvcnlEYXRhIHtcbiAgW0NIUk9NRV9FWFRFTlNJT05fSlNPTl9EQVRBX0tFWV06IHtcbiAgICBbRGF0YUtleS5ISVNUT1JZXTogc3RyaW5nW107XG4gIH07XG59XG5cbnR5cGUgUHJpY2VTZXR0aW5nc1Bvc3REYXRhID0ge1xuICBba2V5IGluIENvbXBldGl0b3JdOiB7XG4gICAgdHlwZTogUHJpY2VTZXR0aW5nO1xuICAgIG1hcmt1cDogbnVtYmVyO1xuICB9O1xufTtcblxuaW50ZXJmYWNlIFByaWNlU2V0dGluZ3NEYXRhIHtcbiAgW0NIUk9NRV9FWFRFTlNJT05fSlNPTl9EQVRBX0tFWV06IHtcbiAgICBbRGF0YUtleS5QUklDRV9TRVRUSU5HU106IFByaWNlU2V0dGluZ3NQb3N0RGF0YTtcbiAgfTtcbn1cblxuaW50ZXJmYWNlIFNlbmRGdW5uZWxQcm9wczxUPiB7XG4gIHRhYklkOiBudW1iZXI7XG4gIHBhZ2VUeXBlOiBQYWdlVHlwZTtcbiAgcG9zdERhdGE6IFQ7XG59XG5cbmV4cG9ydCBjb25zdCBzZW5kRnVubmVsID0gYXN5bmMgPFQ+KHtcbiAgcGFnZVR5cGUsXG4gIHBvc3REYXRhLFxuICB0YWJJZCxcbn06IFNlbmRGdW5uZWxQcm9wczxUPik6IFByb21pc2U8dm9pZD4gPT4ge1xuICBjb25zdCB1aWQgPSBhd2FpdCBnZXRGcm9tU3RvcmFnZShTdG9yYWdlLlVJRCk7XG4gIGNvbnN0IHVzZXJJZCA9IGF3YWl0IGdldEZyb21TdG9yYWdlKFN0b3JhZ2UuVVNFUl9JRCk7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBkYXRhOiBmdW5uZWxDb2RlIH0gPSBhd2FpdCBhcGkuZ2V0KHVybHMuRlVOTkVMKTtcbiAgICBhd2FpdCBicm93c2VyLnRhYnMuZXhlY3V0ZVNjcmlwdCh0YWJJZCwge1xuICAgICAgY29kZTogYHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO2AsXG4gICAgfSk7XG4gICAgYXdhaXQgYnJvd3Nlci50YWJzLmV4ZWN1dGVTY3JpcHQodGFiSWQsIHsgY29kZTogZnVubmVsQ29kZSB9KTtcbiAgICBhd2FpdCBicm93c2VyLnRhYnMuZXhlY3V0ZVNjcmlwdCh0YWJJZCwge1xuICAgICAgY29kZTogYFxuICAgICAgICBoY2Z1bm5lbCgncGxhdGZvcm0nLCAnY2hyb21lX2V4dGVuc2lvbicpO1xuICAgICAgICBoY2Z1bm5lbCgnc2l0ZWxhbmcnLCAncnUnKTtcbiAgICAgICAgaGNmdW5uZWwoJ3VpZCcsICcke3VpZH0nKTtcbiAgICAgIGAsXG4gICAgfSk7XG4gICAgY29uc3QgZ2V0RGF0YTogR2V0RGF0YSA9IHtcbiAgICAgIFtHZXREYXRhS2V5LlBBR0VUWVBFXTogcGFnZVR5cGUsXG4gICAgICBbR2V0RGF0YUtleS5VU0VSX0lEXTogdXNlcklkLFxuICAgIH07XG4gICAgYXdhaXQgYnJvd3Nlci50YWJzLmV4ZWN1dGVTY3JpcHQodGFiSWQsIHtcbiAgICAgIGNvZGU6IGBoY2Z1bm5lbCgnc2VuZCcsICR7SlNPTi5zdHJpbmdpZnkoZ2V0RGF0YSl9LCAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICBwb3N0RGF0YVxuICAgICAgKX0pO2AsXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHNlbmRDb21wZXRpdG9yU2VycERhdGEgPSBhc3luYyAoXG4gIHRhYklkOiBudW1iZXIsXG4gIGRhdGE6IENvbXBldGl0b3JTZXJwUG9zdERhdGFbXVxuKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGNvbnN0IHBvc3REYXRhID0ge1xuICAgIFtDSFJPTUVfRVhURU5TSU9OX0pTT05fREFUQV9LRVldOiB7XG4gICAgICBbRGF0YUtleS5TRVJQXTogZGF0YSxcbiAgICB9LFxuICB9O1xuICByZXR1cm4gc2VuZEZ1bm5lbDxDb21wZXRpdG9yU2VycERhdGE+KHtcbiAgICBwYWdlVHlwZTogUGFnZVR5cGUuU0VSUCxcbiAgICBwb3N0RGF0YSxcbiAgICB0YWJJZCxcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3Qgc2VuZENvbXBldGl0b3JPcmRlckRhdGEgPSBhc3luYyAoXG4gIHRhYklkOiBudW1iZXIsXG4gIGRhdGE6IFBvc3REYXRhXG4pOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgY29uc3QgcG9zdERhdGEgPSB7XG4gICAgW0NIUk9NRV9FWFRFTlNJT05fSlNPTl9EQVRBX0tFWV06IHtcbiAgICAgIFtEYXRhS2V5Lk9SREVSXTogZGF0YSxcbiAgICB9LFxuICB9O1xuICByZXR1cm4gc2VuZEZ1bm5lbDxDb21wZXRpdG9yT3JkZXJEYXRhPih7XG4gICAgcGFnZVR5cGU6IFBhZ2VUeXBlLk9SREVSLFxuICAgIHBvc3REYXRhLFxuICAgIHRhYklkLFxuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZW5kUHJpY2VTZXR0aW5ncyA9IGFzeW5jIChcbiAgdGFiSWQ6IG51bWJlcixcbiAgZGF0YTogUHJpY2VTZXR0aW5nc1Bvc3REYXRhXG4pOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgY29uc3QgcG9zdERhdGEgPSB7XG4gICAgW0NIUk9NRV9FWFRFTlNJT05fSlNPTl9EQVRBX0tFWV06IHtcbiAgICAgIFtEYXRhS2V5LlBSSUNFX1NFVFRJTkdTXTogZGF0YSxcbiAgICB9LFxuICB9O1xuICByZXR1cm4gc2VuZEZ1bm5lbDxQcmljZVNldHRpbmdzRGF0YT4oe1xuICAgIHBhZ2VUeXBlOiBQYWdlVHlwZS5QUklDRV9TRVRUSU5HUyxcbiAgICBwb3N0RGF0YSxcbiAgICB0YWJJZCxcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3Qgc2VuZEJyb3dzZXJIaXN0b3J5ID0gYXN5bmMgKHRhYklkOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgY29uc3QgbWlsbGlzZWNvbmRzUGVyTW9udGggPSAxMDAwICogNjAgKiA2MCAqIDI0ICogMzA7XG4gIGNvbnN0IG9uZU1vbnRoQWdvID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBtaWxsaXNlY29uZHNQZXJNb250aDtcbiAgY29uc3QgaGlzdG9yeSA9IGF3YWl0IGJyb3dzZXIuaGlzdG9yeS5zZWFyY2goe1xuICAgIG1heFJlc3VsdHM6IE1BWF9TRUFSQ0hfUkVTVUxUUyxcbiAgICBzdGFydFRpbWU6IG9uZU1vbnRoQWdvLFxuICAgIHRleHQ6ICcnLFxuICB9KTtcbiAgY29uc3QgaGlzdG9yeVVybHMgPSBoaXN0b3J5XG4gICAgLnNvcnQoXG4gICAgICAoaGlzdG9yeUl0ZW1BLCBoaXN0b3J5SXRlbUIpID0+XG4gICAgICAgIChoaXN0b3J5SXRlbUIudmlzaXRDb3VudCB8fCAwKSAtIChoaXN0b3J5SXRlbUEudmlzaXRDb3VudCB8fCAwKVxuICAgIClcbiAgICAucmVkdWNlKChhY2MsIHsgdXJsIH0pID0+IHtcbiAgICAgIGNvbnN0IGhvc3RuYW1lID0gdXJsICYmIG5ldyBVUkwodXJsKS5ob3N0bmFtZTtcblxuICAgICAgaWYgKGhvc3RuYW1lKSB7XG4gICAgICAgIGFjYy5wdXNoKGhvc3RuYW1lKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBbXSBhcyBzdHJpbmdbXSk7XG4gIGNvbnN0IHVuaXF1ZUhpc3RvcnlVcmxzID0gWy4uLm5ldyBTZXQoaGlzdG9yeVVybHMpXTtcbiAgY29uc3QgcG9zdERhdGEgPSB7XG4gICAgW0NIUk9NRV9FWFRFTlNJT05fSlNPTl9EQVRBX0tFWV06IHtcbiAgICAgIFtEYXRhS2V5LkhJU1RPUlldOiB1bmlxdWVIaXN0b3J5VXJscy5zbGljZSgwLCBNT1NUX1ZJU0lURURfU0lURVNfQU1PVU5UKSxcbiAgICB9LFxuICB9O1xuXG4gIHJldHVybiBzZW5kRnVubmVsPEhpc3RvcnlEYXRhPih7XG4gICAgcGFnZVR5cGU6IFBhZ2VUeXBlLkhJU1RPUlksXG4gICAgcG9zdERhdGEsXG4gICAgdGFiSWQsXG4gIH0pO1xufTtcbiIsImltcG9ydCB7IGJyb3dzZXIsIFRhYnMgfSBmcm9tICd3ZWJleHRlbnNpb24tcG9seWZpbGwtdHMnO1xuXG5leHBvcnQgY29uc3QgZ2V0Q3VycmVudFRhYiA9IGFzeW5jICgpOiBQcm9taXNlPFRhYnMuVGFiPiA9PiB7XG4gIGNvbnN0IFt0YWJdID0gYXdhaXQgYnJvd3Nlci50YWJzLnF1ZXJ5KHtcbiAgICBhY3RpdmU6IHRydWUsXG4gICAgY3VycmVudFdpbmRvdzogdHJ1ZSxcbiAgfSk7XG5cbiAgcmV0dXJuIHRhYjtcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBMYW5ndWFnZSB9IGZyb20gJ0Bjb25zdGFudHMvbGFuZ3VhZ2VzJztcblxuaW50ZXJmYWNlIENvbnRleHRQcm9wcyB7XG4gIGxhbmd1YWdlOiBMYW5ndWFnZTtcbiAgc2V0TGFuZ3VhZ2UobGFuZ3VhZ2U6IExhbmd1YWdlKTogdm9pZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVhY3QuY3JlYXRlQ29udGV4dDxDb250ZXh0UHJvcHM+KHtcbiAgbGFuZ3VhZ2U6IExhbmd1YWdlLkVOLFxuICBzZXRMYW5ndWFnZTogKCkgPT4ge30sXG59KTtcbiIsInZhciBkZWZhdWx0RnVuY3Rpb25OYW1lID0gJzxhbm9ueW1vdXM+Jztcbi8qKlxuICogU2FmZWx5IGV4dHJhY3QgZnVuY3Rpb24gbmFtZSBmcm9tIGl0c2VsZlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RnVuY3Rpb25OYW1lKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKCFmbiB8fCB0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0RnVuY3Rpb25OYW1lO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbi5uYW1lIHx8IGRlZmF1bHRGdW5jdGlvbk5hbWU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEp1c3QgYWNjZXNzaW5nIGN1c3RvbSBwcm9wcyBpbiBzb21lIFNlbGVuaXVtIGVudmlyb25tZW50c1xuICAgICAgICAvLyBjYW4gY2F1c2UgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXhjZXB0aW9uIChzZWUgcmF2ZW4tanMjNDk1KS5cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRGdW5jdGlvbk5hbWU7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhY2t0cmFjZS5qcy5tYXAiLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgY3NzbWVtIGZyb20gJ2Nzc21lbSc7XG5cbmltcG9ydCB7IG5vb3AgfSBmcm9tICdAaGVscGVycy91dGlscyc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9CdXR0b25JY29uLmNzcyc7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGNoaWxkcmVuPzogUmVhY3ROb2RlO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIG9uQ2xpY2soKTogdm9pZDtcbn1cblxuY29uc3QgQnV0dG9uSWNvbjogUmVhY3QuRkM8UHJvcHM+ID0gKHtcbiAgY2hpbGRyZW4sXG4gIGNsYXNzTmFtZSxcbiAgb25DbGljayA9IG5vb3AsXG59KSA9PiAoXG4gIDxidXR0b25cbiAgICBjbGFzc05hbWU9e2VtKCdidXR0b25JY29uJykobnVsbCwgY2xhc3NOYW1lKX1cbiAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgIHR5cGU9XCJidXR0b25cIlxuICA+XG4gICAge2NoaWxkcmVufVxuICA8L2J1dHRvbj5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbkljb247XG4iLCJpbXBvcnQgeyBMYW5ndWFnZSB9IGZyb20gJ0Bjb25zdGFudHMvbGFuZ3VhZ2VzJztcblxuZXhwb3J0IHR5cGUgSWNvbiA9IHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBoZWlnaHQ/OiBudW1iZXI7XG4gIHdpZHRoPzogbnVtYmVyO1xuICBmaWxsPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgSW5mZXJWYWx1ZVR5cGVzPFQ+ID0gVCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogaW5mZXIgVSB9XG4gID8gVVxuICA6IG5ldmVyO1xuXG50eXBlIENvbW1pc3Npb25JbmZvSXRlbSA9IHtcbiAgYW1vdW50X2NvbW1pc3Npb246IHN0cmluZztcbiAgYW1vdW50X2dyb3NzOiBzdHJpbmc7XG4gIGFtb3VudF9ncm9zc19tYXJrdXA6IHN0cmluZztcbiAgYW1vdW50X21hcmt1cDogc3RyaW5nO1xuICBhbW91bnRfbmV0OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBDb21taXNzaW9uSW5mbyA9IHtcbiAgY2hhcmdlOiBDb21taXNzaW9uSW5mb0l0ZW07XG4gIHNob3c6IENvbW1pc3Npb25JbmZvSXRlbTtcbn07XG5cbmV4cG9ydCB0eXBlIE1lc3NhZ2VzID0ge1xuICBba2V5IGluIExhbmd1YWdlLkVOIHwgTGFuZ3VhZ2UuUlVdOiB7XG4gICAgbGFuZzogTGFuZ3VhZ2U7XG4gICAgbWVzc2FnZXM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG4gIH07XG59O1xuXG5leHBvcnQgZW51bSBMaXZlU2V0dGluZyB7XG4gIEIyQl9SRUNPTU1FTkRFRF9NQVJLVVAgPSAnYjJiX3JlY29tbWVuZGVkX21hcmt1cCcsXG4gIERFU0lHTl9USEVNRSA9ICdkZXNpZ25fdGhlbWUnLFxuICBERVRBSUxTID0gJ2RldGFpbHMnLFxuICBFTkFCTEVEID0gJ2VuYWJsZWQnLFxuICBISURERU4gPSAnaGlkZGVuJyxcbiAgUFJJQ0VfRElGRiA9ICdwcmljZV9kaWZmJyxcbiAgUFJJQ0VfRElGRl9BQlMgPSAncHJpY2VfZGlmZl9hYnMnLFxuICBQUk9NT19DQU1QQUlHTlMgPSAncHJvbW9fY2FtcGFpZ25zJyxcbn1cblxuZXhwb3J0IGVudW0gRGlzY291bnRUeXBlIHtcbiAgQUJTT0xVVEUgPSAnYWJzb2x1dGUnLFxuICBQRVJDRU5UID0gJ3BlcmNlbnQnLFxuICBQUkVDSEVDSyA9ICdwcmVjaGVjaycsXG59XG5cbmV4cG9ydCBlbnVtIFByb21vQ2FtcGFpZ24ge1xuICBDT01QRU5TQVRJT04gPSAnY29tcGVuc2F0aW9uJyxcbiAgTUFSS0VUSU5HID0gJ21hcmtldGluZycsXG4gIFBBWU1FTlQgPSAncGF5bWVudCcsXG4gIFJFR1VMQVIgPSAncmVndWxhcicsXG4gIFRFU1QgPSAndGVzdCcsXG4gIFRPUCA9ICd0b3AnLFxuICBXSVRIX09QVElPTlMgPSAnd2l0aF9vcHRpb25zJyxcbn1cblxuZXhwb3J0IHR5cGUgTGl2ZVNldHRpbmdzID0ge1xuICBbTGl2ZVNldHRpbmcuQjJCX1JFQ09NTUVOREVEX01BUktVUF0/OiBudW1iZXI7XG4gIFtMaXZlU2V0dGluZy5ERVNJR05fVEhFTUVdOiBzdHJpbmc7XG4gIFtMaXZlU2V0dGluZy5ERVRBSUxTXTogc3RyaW5nO1xuICBbTGl2ZVNldHRpbmcuRU5BQkxFRF06IGJvb2xlYW47XG4gIFtMaXZlU2V0dGluZy5ISURERU5dOiBib29sZWFuO1xuICBbTGl2ZVNldHRpbmcuUFJJQ0VfRElGRl06IG51bWJlcjtcbiAgW0xpdmVTZXR0aW5nLlBSSUNFX0RJRkZfQUJTXTogUmVjb3JkPHN0cmluZywgbnVtYmVyPjtcbiAgW0xpdmVTZXR0aW5nLlBST01PX0NBTVBBSUdOU106IFJlY29yZDxQcm9tb0NhbXBhaWduLCBSZWNvcmQ8bnVtYmVyLCBzdHJpbmc+Pjtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvbW9Db2RlUmF3IHtcbiAgY2FtcGFpZ25fdHlwZTogUHJvbW9DYW1wYWlnbjtcbiAgY3VycmVuY3lfY29kZT86IHN0cmluZztcbiAgZGlzY291bnQ6IHN0cmluZztcbiAgZGlzY291bnRfdHlwZTogRGlzY291bnRUeXBlO1xuICBleHBpcmVzX2F0PzogbnVtYmVyIHwgbnVsbDtcbiAgaXNfZGVhY3RpdmF0ZWQ/OiBib29sZWFuIHwgbnVsbDtcbiAgaXNfZXhwaXJlZDogYm9vbGVhbjtcbiAgaXNfdXNlZDogYm9vbGVhbjtcbiAgdmFsdWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQcm9tb0NvZGUge1xuICBjYW1wYWlnblR5cGU6IFByb21vQ2FtcGFpZ247XG4gIGN1cnJlbmN5Q29kZT86IHN0cmluZztcbiAgZGlzY291bnQ6IHN0cmluZztcbiAgZGlzY291bnRUeXBlOiBEaXNjb3VudFR5cGU7XG4gIGV4cGlyZXNBdD86IG51bWJlciB8IG51bGw7XG4gIGlzRGVhY3RpdmF0ZWQ/OiBib29sZWFuIHwgbnVsbDtcbiAgaXNFeHBpcmVkOiBib29sZWFuO1xuICBpc1VzZWQ6IGJvb2xlYW47XG4gIHZhbHVlOiBzdHJpbmc7XG59XG4iLCJleHBvcnQgZW51bSBBQ1RJT05fVFlQRSB7XG4gIFNFVF9USEVNRSA9ICdTRVRfVEhFTUUnLFxufVxuIiwiZXhwb3J0IGVudW0gQUNUSU9OX1RZUEUge1xuICBTRVRfTE9DQUxFID0gJ1NFVF9MT0NBTEUnLFxufVxuIiwiZXhwb3J0IGVudW0gQUNUSU9OX1RZUEUge1xuICBTRVRfU0VUVElOR1MgPSAnU0VUX1NFVFRJTkdTJyxcbn1cbiIsImV4cG9ydCB2YXIgVFlQRTtcbihmdW5jdGlvbiAoVFlQRSkge1xuICAgIC8qKlxuICAgICAqIFJhdyB0ZXh0XG4gICAgICovXG4gICAgVFlQRVtUWVBFW1wibGl0ZXJhbFwiXSA9IDBdID0gXCJsaXRlcmFsXCI7XG4gICAgLyoqXG4gICAgICogVmFyaWFibGUgdy9vIGFueSBmb3JtYXQsIGUuZyBgdmFyYCBpbiBgdGhpcyBpcyBhIHt2YXJ9YFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcImFyZ3VtZW50XCJdID0gMV0gPSBcImFyZ3VtZW50XCI7XG4gICAgLyoqXG4gICAgICogVmFyaWFibGUgdy8gbnVtYmVyIGZvcm1hdFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcIm51bWJlclwiXSA9IDJdID0gXCJudW1iZXJcIjtcbiAgICAvKipcbiAgICAgKiBWYXJpYWJsZSB3LyBkYXRlIGZvcm1hdFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcImRhdGVcIl0gPSAzXSA9IFwiZGF0ZVwiO1xuICAgIC8qKlxuICAgICAqIFZhcmlhYmxlIHcvIHRpbWUgZm9ybWF0XG4gICAgICovXG4gICAgVFlQRVtUWVBFW1widGltZVwiXSA9IDRdID0gXCJ0aW1lXCI7XG4gICAgLyoqXG4gICAgICogVmFyaWFibGUgdy8gc2VsZWN0IGZvcm1hdFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcInNlbGVjdFwiXSA9IDVdID0gXCJzZWxlY3RcIjtcbiAgICAvKipcbiAgICAgKiBWYXJpYWJsZSB3LyBwbHVyYWwgZm9ybWF0XG4gICAgICovXG4gICAgVFlQRVtUWVBFW1wicGx1cmFsXCJdID0gNl0gPSBcInBsdXJhbFwiO1xuICAgIC8qKlxuICAgICAqIE9ubHkgcG9zc2libGUgd2l0aGluIHBsdXJhbCBhcmd1bWVudC5cbiAgICAgKiBUaGlzIGlzIHRoZSBgI2Agc3ltYm9sIHRoYXQgd2lsbCBiZSBzdWJzdGl0dXRlZCB3aXRoIHRoZSBjb3VudC5cbiAgICAgKi9cbiAgICBUWVBFW1RZUEVbXCJwb3VuZFwiXSA9IDddID0gXCJwb3VuZFwiO1xufSkoVFlQRSB8fCAoVFlQRSA9IHt9KSk7XG4vKipcbiAqIFR5cGUgR3VhcmRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0xpdGVyYWxFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUubGl0ZXJhbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0FyZ3VtZW50RWxlbWVudChlbCkge1xuICAgIHJldHVybiBlbC50eXBlID09PSBUWVBFLmFyZ3VtZW50O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyRWxlbWVudChlbCkge1xuICAgIHJldHVybiBlbC50eXBlID09PSBUWVBFLm51bWJlcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0RhdGVFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUuZGF0ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1RpbWVFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUudGltZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1NlbGVjdEVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS5zZWxlY3Q7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNQbHVyYWxFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUucGx1cmFsO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUG91bmRFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUucG91bmQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXJTa2VsZXRvbihlbCkge1xuICAgIHJldHVybiAhIShlbCAmJiB0eXBlb2YgZWwgPT09ICdvYmplY3QnICYmIGVsLnR5cGUgPT09IDAgLyogbnVtYmVyICovKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0RhdGVUaW1lU2tlbGV0b24oZWwpIHtcbiAgICByZXR1cm4gISEoZWwgJiYgdHlwZW9mIGVsID09PSAnb2JqZWN0JyAmJiBlbC50eXBlID09PSAxIC8qIGRhdGVUaW1lICovKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMaXRlcmFsRWxlbWVudCh2YWx1ZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFRZUEUubGl0ZXJhbCxcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTnVtYmVyRWxlbWVudCh2YWx1ZSwgc3R5bGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBUWVBFLm51bWJlcixcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgfTtcbn1cbiIsIi8vIHRzbGludDpkaXNhYmxlOm9ubHktYXJyb3ctZnVuY3Rpb25zXG4vLyB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zaG9ydGhhbmRcbi8vIHRzbGludDpkaXNhYmxlOnRyYWlsaW5nLWNvbW1hXG4vLyB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXNcbi8vIHRzbGludDpkaXNhYmxlOm9uZS12YXJpYWJsZS1wZXItZGVjbGFyYXRpb25cbi8vIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aFxuLy8gdHNsaW50OmRpc2FibGU6bm8tY29uc2VjdXRpdmUtYmxhbmstbGluZXNcbi8vIHRzbGludDpkaXNhYmxlOmFsaWduXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG4vLyBHZW5lcmF0ZWQgYnkgUEVHLmpzIHYuIDAuMTAuMCAodHMtcGVnanMgcGx1Z2luIHYuIDAuMi42IClcbi8vXG4vLyBodHRwczovL3BlZ2pzLm9yZy8gICBodHRwczovL2dpdGh1Yi5jb20vbWV0YWRldnByby90cy1wZWdqc1xuaW1wb3J0IHsgVFlQRSwgfSBmcm9tICcuL3R5cGVzJztcbnZhciBTeW50YXhFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3ludGF4RXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3ludGF4RXJyb3IobWVzc2FnZSwgZXhwZWN0ZWQsIGZvdW5kLCBsb2NhdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgX3RoaXMuZXhwZWN0ZWQgPSBleHBlY3RlZDtcbiAgICAgICAgX3RoaXMuZm91bmQgPSBmb3VuZDtcbiAgICAgICAgX3RoaXMubG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgX3RoaXMubmFtZSA9IFwiU3ludGF4RXJyb3JcIjtcbiAgICAgICAgaWYgKHR5cGVvZiBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShfdGhpcywgU3ludGF4RXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3ludGF4RXJyb3IuYnVpbGRNZXNzYWdlID0gZnVuY3Rpb24gKGV4cGVjdGVkLCBmb3VuZCkge1xuICAgICAgICBmdW5jdGlvbiBoZXgoY2gpIHtcbiAgICAgICAgICAgIHJldHVybiBjaC5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGxpdGVyYWxFc2NhcGUocykge1xuICAgICAgICAgICAgcmV0dXJuIHNcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXC9nLCBcIlxcXFxcXFxcXCIpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1wiL2csIFwiXFxcXFxcXCJcIilcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwwL2csIFwiXFxcXDBcIilcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFx0L2csIFwiXFxcXHRcIilcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIilcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxyL2csIFwiXFxcXHJcIilcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvW1xceDAwLVxceDBGXS9nLCBmdW5jdGlvbiAoY2gpIHsgcmV0dXJuIFwiXFxcXHgwXCIgKyBoZXgoY2gpOyB9KVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXFx4MTAtXFx4MUZcXHg3Ri1cXHg5Rl0vZywgZnVuY3Rpb24gKGNoKSB7IHJldHVybiBcIlxcXFx4XCIgKyBoZXgoY2gpOyB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjbGFzc0VzY2FwZShzKSB7XG4gICAgICAgICAgICByZXR1cm4gc1xuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcL2csIFwiXFxcXFxcXFxcIilcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxdL2csIFwiXFxcXF1cIilcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxeL2csIFwiXFxcXF5cIilcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvLS9nLCBcIlxcXFwtXCIpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcMC9nLCBcIlxcXFwwXCIpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcdC9nLCBcIlxcXFx0XCIpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcci9nLCBcIlxcXFxyXCIpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1tcXHgwMC1cXHgwRl0vZywgZnVuY3Rpb24gKGNoKSB7IHJldHVybiBcIlxcXFx4MFwiICsgaGV4KGNoKTsgfSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvW1xceDEwLVxceDFGXFx4N0YtXFx4OUZdL2csIGZ1bmN0aW9uIChjaCkgeyByZXR1cm4gXCJcXFxceFwiICsgaGV4KGNoKTsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZGVzY3JpYmVFeHBlY3RhdGlvbihleHBlY3RhdGlvbikge1xuICAgICAgICAgICAgc3dpdGNoIChleHBlY3RhdGlvbi50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImxpdGVyYWxcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXFxcIlwiICsgbGl0ZXJhbEVzY2FwZShleHBlY3RhdGlvbi50ZXh0KSArIFwiXFxcIlwiO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJjbGFzc1wiOlxuICAgICAgICAgICAgICAgICAgICB2YXIgZXNjYXBlZFBhcnRzID0gZXhwZWN0YXRpb24ucGFydHMubWFwKGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShwYXJ0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gY2xhc3NFc2NhcGUocGFydFswXSkgKyBcIi1cIiArIGNsYXNzRXNjYXBlKHBhcnRbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjbGFzc0VzY2FwZShwYXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIltcIiArIChleHBlY3RhdGlvbi5pbnZlcnRlZCA/IFwiXlwiIDogXCJcIikgKyBlc2NhcGVkUGFydHMgKyBcIl1cIjtcbiAgICAgICAgICAgICAgICBjYXNlIFwiYW55XCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImFueSBjaGFyYWN0ZXJcIjtcbiAgICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImVuZCBvZiBpbnB1dFwiO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJvdGhlclwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXhwZWN0YXRpb24uZGVzY3JpcHRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZGVzY3JpYmVFeHBlY3RlZChleHBlY3RlZDEpIHtcbiAgICAgICAgICAgIHZhciBkZXNjcmlwdGlvbnMgPSBleHBlY3RlZDEubWFwKGRlc2NyaWJlRXhwZWN0YXRpb24pO1xuICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICB2YXIgajtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9ucy5zb3J0KCk7XG4gICAgICAgICAgICBpZiAoZGVzY3JpcHRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAxLCBqID0gMTsgaSA8IGRlc2NyaXB0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVzY3JpcHRpb25zW2kgLSAxXSAhPT0gZGVzY3JpcHRpb25zW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbnNbal0gPSBkZXNjcmlwdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb25zLmxlbmd0aCA9IGo7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKGRlc2NyaXB0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdGlvbnNbMF07XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVzY3JpcHRpb25zWzBdICsgXCIgb3IgXCIgKyBkZXNjcmlwdGlvbnNbMV07XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0aW9ucy5zbGljZSgwLCAtMSkuam9pbihcIiwgXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICArIFwiLCBvciBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgKyBkZXNjcmlwdGlvbnNbZGVzY3JpcHRpb25zLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGRlc2NyaWJlRm91bmQoZm91bmQxKSB7XG4gICAgICAgICAgICByZXR1cm4gZm91bmQxID8gXCJcXFwiXCIgKyBsaXRlcmFsRXNjYXBlKGZvdW5kMSkgKyBcIlxcXCJcIiA6IFwiZW5kIG9mIGlucHV0XCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFwiRXhwZWN0ZWQgXCIgKyBkZXNjcmliZUV4cGVjdGVkKGV4cGVjdGVkKSArIFwiIGJ1dCBcIiArIGRlc2NyaWJlRm91bmQoZm91bmQpICsgXCIgZm91bmQuXCI7XG4gICAgfTtcbiAgICByZXR1cm4gU3ludGF4RXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnQgeyBTeW50YXhFcnJvciB9O1xuZnVuY3Rpb24gcGVnJHBhcnNlKGlucHV0LCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMgOiB7fTtcbiAgICB2YXIgcGVnJEZBSUxFRCA9IHt9O1xuICAgIHZhciBwZWckc3RhcnRSdWxlRnVuY3Rpb25zID0geyBzdGFydDogcGVnJHBhcnNlc3RhcnQgfTtcbiAgICB2YXIgcGVnJHN0YXJ0UnVsZUZ1bmN0aW9uID0gcGVnJHBhcnNlc3RhcnQ7XG4gICAgdmFyIHBlZyRjMCA9IGZ1bmN0aW9uIChwYXJ0cykge1xuICAgICAgICByZXR1cm4gcGFydHMuam9pbignJyk7XG4gICAgfTtcbiAgICB2YXIgcGVnJGMxID0gZnVuY3Rpb24gKG1lc3NhZ2VUZXh0KSB7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbih7IHR5cGU6IFRZUEUubGl0ZXJhbCwgdmFsdWU6IG1lc3NhZ2VUZXh0IH0sIGluc2VydExvY2F0aW9uKCkpO1xuICAgIH07XG4gICAgdmFyIHBlZyRjMiA9IFwiI1wiO1xuICAgIHZhciBwZWckYzMgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiI1wiLCBmYWxzZSk7XG4gICAgdmFyIHBlZyRjNCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKHsgdHlwZTogVFlQRS5wb3VuZCB9LCBpbnNlcnRMb2NhdGlvbigpKTtcbiAgICB9O1xuICAgIHZhciBwZWckYzUgPSBwZWckb3RoZXJFeHBlY3RhdGlvbihcImFyZ3VtZW50RWxlbWVudFwiKTtcbiAgICB2YXIgcGVnJGM2ID0gXCJ7XCI7XG4gICAgdmFyIHBlZyRjNyA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJ7XCIsIGZhbHNlKTtcbiAgICB2YXIgcGVnJGM4ID0gXCJ9XCI7XG4gICAgdmFyIHBlZyRjOSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJ9XCIsIGZhbHNlKTtcbiAgICB2YXIgcGVnJGMxMCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oeyB0eXBlOiBUWVBFLmFyZ3VtZW50LCB2YWx1ZTogdmFsdWUgfSwgaW5zZXJ0TG9jYXRpb24oKSk7XG4gICAgfTtcbiAgICB2YXIgcGVnJGMxMSA9IHBlZyRvdGhlckV4cGVjdGF0aW9uKFwibnVtYmVyU2tlbGV0b25JZFwiKTtcbiAgICB2YXIgcGVnJGMxMiA9IC9eWydcXC97fV0vO1xuICAgIHZhciBwZWckYzEzID0gcGVnJGNsYXNzRXhwZWN0YXRpb24oW1wiJ1wiLCBcIi9cIiwgXCJ7XCIsIFwifVwiXSwgZmFsc2UsIGZhbHNlKTtcbiAgICB2YXIgcGVnJGMxNCA9IHBlZyRhbnlFeHBlY3RhdGlvbigpO1xuICAgIHZhciBwZWckYzE1ID0gcGVnJG90aGVyRXhwZWN0YXRpb24oXCJudW1iZXJTa2VsZXRvblRva2VuT3B0aW9uXCIpO1xuICAgIHZhciBwZWckYzE2ID0gXCIvXCI7XG4gICAgdmFyIHBlZyRjMTcgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiL1wiLCBmYWxzZSk7XG4gICAgdmFyIHBlZyRjMTggPSBmdW5jdGlvbiAob3B0aW9uKSB7IHJldHVybiBvcHRpb247IH07XG4gICAgdmFyIHBlZyRjMTkgPSBwZWckb3RoZXJFeHBlY3RhdGlvbihcIm51bWJlclNrZWxldG9uVG9rZW5cIik7XG4gICAgdmFyIHBlZyRjMjAgPSBmdW5jdGlvbiAoc3RlbSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4geyBzdGVtOiBzdGVtLCBvcHRpb25zOiBvcHRpb25zIH07XG4gICAgfTtcbiAgICB2YXIgcGVnJGMyMSA9IGZ1bmN0aW9uICh0b2tlbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKHsgdHlwZTogMCAvKiBudW1iZXIgKi8sIHRva2VuczogdG9rZW5zIH0sIGluc2VydExvY2F0aW9uKCkpO1xuICAgIH07XG4gICAgdmFyIHBlZyRjMjIgPSBcIjo6XCI7XG4gICAgdmFyIHBlZyRjMjMgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiOjpcIiwgZmFsc2UpO1xuICAgIHZhciBwZWckYzI0ID0gZnVuY3Rpb24gKHNrZWxldG9uKSB7IHJldHVybiBza2VsZXRvbjsgfTtcbiAgICB2YXIgcGVnJGMyNSA9IGZ1bmN0aW9uICgpIHsgbWVzc2FnZUN0eC5wdXNoKCdudW1iZXJBcmdTdHlsZScpOyByZXR1cm4gdHJ1ZTsgfTtcbiAgICB2YXIgcGVnJGMyNiA9IGZ1bmN0aW9uIChzdHlsZSkge1xuICAgICAgICBtZXNzYWdlQ3R4LnBvcCgpO1xuICAgICAgICByZXR1cm4gc3R5bGUucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG4gICAgfTtcbiAgICB2YXIgcGVnJGMyNyA9IFwiLFwiO1xuICAgIHZhciBwZWckYzI4ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIixcIiwgZmFsc2UpO1xuICAgIHZhciBwZWckYzI5ID0gXCJudW1iZXJcIjtcbiAgICB2YXIgcGVnJGMzMCA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJudW1iZXJcIiwgZmFsc2UpO1xuICAgIHZhciBwZWckYzMxID0gZnVuY3Rpb24gKHZhbHVlLCB0eXBlLCBzdHlsZSkge1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oeyB0eXBlOiB0eXBlID09PSAnbnVtYmVyJyA/IFRZUEUubnVtYmVyIDogdHlwZSA9PT0gJ2RhdGUnID8gVFlQRS5kYXRlIDogVFlQRS50aW1lLCBzdHlsZTogc3R5bGUgJiYgc3R5bGVbMl0sIHZhbHVlOiB2YWx1ZSB9LCBpbnNlcnRMb2NhdGlvbigpKTtcbiAgICB9O1xuICAgIHZhciBwZWckYzMyID0gXCInXCI7XG4gICAgdmFyIHBlZyRjMzMgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiJ1wiLCBmYWxzZSk7XG4gICAgdmFyIHBlZyRjMzQgPSAvXlteJ10vO1xuICAgIHZhciBwZWckYzM1ID0gcGVnJGNsYXNzRXhwZWN0YXRpb24oW1wiJ1wiXSwgdHJ1ZSwgZmFsc2UpO1xuICAgIHZhciBwZWckYzM2ID0gL15bXmEtekEtWid7fV0vO1xuICAgIHZhciBwZWckYzM3ID0gcGVnJGNsYXNzRXhwZWN0YXRpb24oW1tcImFcIiwgXCJ6XCJdLCBbXCJBXCIsIFwiWlwiXSwgXCInXCIsIFwie1wiLCBcIn1cIl0sIHRydWUsIGZhbHNlKTtcbiAgICB2YXIgcGVnJGMzOCA9IC9eW2EtekEtWl0vO1xuICAgIHZhciBwZWckYzM5ID0gcGVnJGNsYXNzRXhwZWN0YXRpb24oW1tcImFcIiwgXCJ6XCJdLCBbXCJBXCIsIFwiWlwiXV0sIGZhbHNlLCBmYWxzZSk7XG4gICAgdmFyIHBlZyRjNDAgPSBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oeyB0eXBlOiAxIC8qIGRhdGVUaW1lICovLCBwYXR0ZXJuOiBwYXR0ZXJuIH0sIGluc2VydExvY2F0aW9uKCkpO1xuICAgIH07XG4gICAgdmFyIHBlZyRjNDEgPSBmdW5jdGlvbiAoKSB7IG1lc3NhZ2VDdHgucHVzaCgnZGF0ZU9yVGltZUFyZ1N0eWxlJyk7IHJldHVybiB0cnVlOyB9O1xuICAgIHZhciBwZWckYzQyID0gXCJkYXRlXCI7XG4gICAgdmFyIHBlZyRjNDMgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiZGF0ZVwiLCBmYWxzZSk7XG4gICAgdmFyIHBlZyRjNDQgPSBcInRpbWVcIjtcbiAgICB2YXIgcGVnJGM0NSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJ0aW1lXCIsIGZhbHNlKTtcbiAgICB2YXIgcGVnJGM0NiA9IFwicGx1cmFsXCI7XG4gICAgdmFyIHBlZyRjNDcgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwicGx1cmFsXCIsIGZhbHNlKTtcbiAgICB2YXIgcGVnJGM0OCA9IFwic2VsZWN0b3JkaW5hbFwiO1xuICAgIHZhciBwZWckYzQ5ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcInNlbGVjdG9yZGluYWxcIiwgZmFsc2UpO1xuICAgIHZhciBwZWckYzUwID0gXCJvZmZzZXQ6XCI7XG4gICAgdmFyIHBlZyRjNTEgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwib2Zmc2V0OlwiLCBmYWxzZSk7XG4gICAgdmFyIHBlZyRjNTIgPSBmdW5jdGlvbiAodmFsdWUsIHBsdXJhbFR5cGUsIG9mZnNldCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oeyB0eXBlOiBUWVBFLnBsdXJhbCwgcGx1cmFsVHlwZTogcGx1cmFsVHlwZSA9PT0gJ3BsdXJhbCcgPyAnY2FyZGluYWwnIDogJ29yZGluYWwnLCB2YWx1ZTogdmFsdWUsIG9mZnNldDogb2Zmc2V0ID8gb2Zmc2V0WzJdIDogMCwgb3B0aW9uczogb3B0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKGFsbCwgX2EpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSBfYS5pZCwgdmFsdWUgPSBfYS52YWx1ZSwgb3B0aW9uTG9jYXRpb24gPSBfYS5sb2NhdGlvbjtcbiAgICAgICAgICAgICAgICBpZiAoaWQgaW4gYWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yKFwiRHVwbGljYXRlIG9wdGlvbiBcXFwiXCIgKyBpZCArIFwiXFxcIiBpbiBwbHVyYWwgZWxlbWVudDogXFxcIlwiICsgdGV4dCgpICsgXCJcXFwiXCIsIGxvY2F0aW9uKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhbGxbaWRdID0ge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBvcHRpb25Mb2NhdGlvblxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFsbDtcbiAgICAgICAgICAgIH0sIHt9KSB9LCBpbnNlcnRMb2NhdGlvbigpKTtcbiAgICB9O1xuICAgIHZhciBwZWckYzUzID0gXCJzZWxlY3RcIjtcbiAgICB2YXIgcGVnJGM1NCA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJzZWxlY3RcIiwgZmFsc2UpO1xuICAgIHZhciBwZWckYzU1ID0gZnVuY3Rpb24gKHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbih7IHR5cGU6IFRZUEUuc2VsZWN0LCB2YWx1ZTogdmFsdWUsIG9wdGlvbnM6IG9wdGlvbnMucmVkdWNlKGZ1bmN0aW9uIChhbGwsIF9hKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlkID0gX2EuaWQsIHZhbHVlID0gX2EudmFsdWUsIG9wdGlvbkxvY2F0aW9uID0gX2EubG9jYXRpb247XG4gICAgICAgICAgICAgICAgaWYgKGlkIGluIGFsbCkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcihcIkR1cGxpY2F0ZSBvcHRpb24gXFxcIlwiICsgaWQgKyBcIlxcXCIgaW4gc2VsZWN0IGVsZW1lbnQ6IFxcXCJcIiArIHRleHQoKSArIFwiXFxcIlwiLCBsb2NhdGlvbigpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWxsW2lkXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogb3B0aW9uTG9jYXRpb25cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBhbGw7XG4gICAgICAgICAgICB9LCB7fSkgfSwgaW5zZXJ0TG9jYXRpb24oKSk7XG4gICAgfTtcbiAgICB2YXIgcGVnJGM1NiA9IFwiPVwiO1xuICAgIHZhciBwZWckYzU3ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIj1cIiwgZmFsc2UpO1xuICAgIHZhciBwZWckYzU4ID0gZnVuY3Rpb24gKGlkKSB7IG1lc3NhZ2VDdHgucHVzaCgnc2VsZWN0Jyk7IHJldHVybiB0cnVlOyB9O1xuICAgIHZhciBwZWckYzU5ID0gZnVuY3Rpb24gKGlkLCB2YWx1ZSkge1xuICAgICAgICBtZXNzYWdlQ3R4LnBvcCgpO1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oeyBpZDogaWQsXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUgfSwgaW5zZXJ0TG9jYXRpb24oKSk7XG4gICAgfTtcbiAgICB2YXIgcGVnJGM2MCA9IGZ1bmN0aW9uIChpZCkgeyBtZXNzYWdlQ3R4LnB1c2goJ3BsdXJhbCcpOyByZXR1cm4gdHJ1ZTsgfTtcbiAgICB2YXIgcGVnJGM2MSA9IGZ1bmN0aW9uIChpZCwgdmFsdWUpIHtcbiAgICAgICAgbWVzc2FnZUN0eC5wb3AoKTtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKHsgaWQ6IGlkLFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlIH0sIGluc2VydExvY2F0aW9uKCkpO1xuICAgIH07XG4gICAgdmFyIHBlZyRjNjIgPSBwZWckb3RoZXJFeHBlY3RhdGlvbihcIndoaXRlc3BhY2VcIik7XG4gICAgdmFyIHBlZyRjNjMgPSAvXltcXHQtXFxyIFxceDg1XFx4QTBcXHUxNjgwXFx1MjAwMC1cXHUyMDBBXFx1MjAyOFxcdTIwMjlcXHUyMDJGXFx1MjA1RlxcdTMwMDBdLztcbiAgICB2YXIgcGVnJGM2NCA9IHBlZyRjbGFzc0V4cGVjdGF0aW9uKFtbXCJcXHRcIiwgXCJcXHJcIl0sIFwiIFwiLCBcIlxceDg1XCIsIFwiXFx4QTBcIiwgXCJcXHUxNjgwXCIsIFtcIlxcdTIwMDBcIiwgXCJcXHUyMDBBXCJdLCBcIlxcdTIwMjhcIiwgXCJcXHUyMDI5XCIsIFwiXFx1MjAyRlwiLCBcIlxcdTIwNUZcIiwgXCJcXHUzMDAwXCJdLCBmYWxzZSwgZmFsc2UpO1xuICAgIHZhciBwZWckYzY1ID0gcGVnJG90aGVyRXhwZWN0YXRpb24oXCJzeW50YXggcGF0dGVyblwiKTtcbiAgICB2YXIgcGVnJGM2NiA9IC9eWyEtXFwvOi1AWy1cXF5gey1+XFx4QTEtXFx4QTdcXHhBOVxceEFCXFx4QUNcXHhBRVxceEIwXFx4QjFcXHhCNlxceEJCXFx4QkZcXHhEN1xceEY3XFx1MjAxMC1cXHUyMDI3XFx1MjAzMC1cXHUyMDNFXFx1MjA0MS1cXHUyMDUzXFx1MjA1NS1cXHUyMDVFXFx1MjE5MC1cXHUyNDVGXFx1MjUwMC1cXHUyNzc1XFx1Mjc5NC1cXHUyQkZGXFx1MkUwMC1cXHUyRTdGXFx1MzAwMS1cXHUzMDAzXFx1MzAwOC1cXHUzMDIwXFx1MzAzMFxcdUZEM0VcXHVGRDNGXFx1RkU0NVxcdUZFNDZdLztcbiAgICB2YXIgcGVnJGM2NyA9IHBlZyRjbGFzc0V4cGVjdGF0aW9uKFtbXCIhXCIsIFwiL1wiXSwgW1wiOlwiLCBcIkBcIl0sIFtcIltcIiwgXCJeXCJdLCBcImBcIiwgW1wie1wiLCBcIn5cIl0sIFtcIlxceEExXCIsIFwiXFx4QTdcIl0sIFwiXFx4QTlcIiwgXCJcXHhBQlwiLCBcIlxceEFDXCIsIFwiXFx4QUVcIiwgXCJcXHhCMFwiLCBcIlxceEIxXCIsIFwiXFx4QjZcIiwgXCJcXHhCQlwiLCBcIlxceEJGXCIsIFwiXFx4RDdcIiwgXCJcXHhGN1wiLCBbXCJcXHUyMDEwXCIsIFwiXFx1MjAyN1wiXSwgW1wiXFx1MjAzMFwiLCBcIlxcdTIwM0VcIl0sIFtcIlxcdTIwNDFcIiwgXCJcXHUyMDUzXCJdLCBbXCJcXHUyMDU1XCIsIFwiXFx1MjA1RVwiXSwgW1wiXFx1MjE5MFwiLCBcIlxcdTI0NUZcIl0sIFtcIlxcdTI1MDBcIiwgXCJcXHUyNzc1XCJdLCBbXCJcXHUyNzk0XCIsIFwiXFx1MkJGRlwiXSwgW1wiXFx1MkUwMFwiLCBcIlxcdTJFN0ZcIl0sIFtcIlxcdTMwMDFcIiwgXCJcXHUzMDAzXCJdLCBbXCJcXHUzMDA4XCIsIFwiXFx1MzAyMFwiXSwgXCJcXHUzMDMwXCIsIFwiXFx1RkQzRVwiLCBcIlxcdUZEM0ZcIiwgXCJcXHVGRTQ1XCIsIFwiXFx1RkU0NlwiXSwgZmFsc2UsIGZhbHNlKTtcbiAgICB2YXIgcGVnJGM2OCA9IHBlZyRvdGhlckV4cGVjdGF0aW9uKFwib3B0aW9uYWwgd2hpdGVzcGFjZVwiKTtcbiAgICB2YXIgcGVnJGM2OSA9IHBlZyRvdGhlckV4cGVjdGF0aW9uKFwibnVtYmVyXCIpO1xuICAgIHZhciBwZWckYzcwID0gXCItXCI7XG4gICAgdmFyIHBlZyRjNzEgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiLVwiLCBmYWxzZSk7XG4gICAgdmFyIHBlZyRjNzIgPSBmdW5jdGlvbiAobmVnYXRpdmUsIG51bSkge1xuICAgICAgICByZXR1cm4gbnVtXG4gICAgICAgICAgICA/IG5lZ2F0aXZlXG4gICAgICAgICAgICAgICAgPyAtbnVtXG4gICAgICAgICAgICAgICAgOiBudW1cbiAgICAgICAgICAgIDogMDtcbiAgICB9O1xuICAgIHZhciBwZWckYzczID0gcGVnJG90aGVyRXhwZWN0YXRpb24oXCJhcG9zdHJvcGhlXCIpO1xuICAgIHZhciBwZWckYzc0ID0gcGVnJG90aGVyRXhwZWN0YXRpb24oXCJkb3VibGUgYXBvc3Ryb3BoZXNcIik7XG4gICAgdmFyIHBlZyRjNzUgPSBcIicnXCI7XG4gICAgdmFyIHBlZyRjNzYgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiJydcIiwgZmFsc2UpO1xuICAgIHZhciBwZWckYzc3ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gXCInXCI7IH07XG4gICAgdmFyIHBlZyRjNzggPSBmdW5jdGlvbiAoZXNjYXBlZENoYXIsIHF1b3RlZENoYXJzKSB7XG4gICAgICAgIHJldHVybiBlc2NhcGVkQ2hhciArIHF1b3RlZENoYXJzLnJlcGxhY2UoXCInJ1wiLCBcIidcIik7XG4gICAgfTtcbiAgICB2YXIgcGVnJGM3OSA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiAoeCAhPT0gJ3snICYmXG4gICAgICAgICAgICAhKGlzSW5QbHVyYWxPcHRpb24oKSAmJiB4ID09PSAnIycpICYmXG4gICAgICAgICAgICAhKGlzTmVzdGVkTWVzc2FnZVRleHQoKSAmJiB4ID09PSAnfScpKTtcbiAgICB9O1xuICAgIHZhciBwZWckYzgwID0gXCJcXG5cIjtcbiAgICB2YXIgcGVnJGM4MSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJcXG5cIiwgZmFsc2UpO1xuICAgIHZhciBwZWckYzgyID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHggPT09ICd7JyB8fCB4ID09PSAnfScgfHwgKGlzSW5QbHVyYWxPcHRpb24oKSAmJiB4ID09PSAnIycpO1xuICAgIH07XG4gICAgdmFyIHBlZyRjODMgPSBwZWckb3RoZXJFeHBlY3RhdGlvbihcImFyZ05hbWVPck51bWJlclwiKTtcbiAgICB2YXIgcGVnJGM4NCA9IHBlZyRvdGhlckV4cGVjdGF0aW9uKFwiYXJnTnVtYmVyXCIpO1xuICAgIHZhciBwZWckYzg1ID0gXCIwXCI7XG4gICAgdmFyIHBlZyRjODYgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiMFwiLCBmYWxzZSk7XG4gICAgdmFyIHBlZyRjODcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAwOyB9O1xuICAgIHZhciBwZWckYzg4ID0gL15bMS05XS87XG4gICAgdmFyIHBlZyRjODkgPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbW1wiMVwiLCBcIjlcIl1dLCBmYWxzZSwgZmFsc2UpO1xuICAgIHZhciBwZWckYzkwID0gL15bMC05XS87XG4gICAgdmFyIHBlZyRjOTEgPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbW1wiMFwiLCBcIjlcIl1dLCBmYWxzZSwgZmFsc2UpO1xuICAgIHZhciBwZWckYzkyID0gZnVuY3Rpb24gKGRpZ2l0cykge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLmpvaW4oJycpLCAxMCk7XG4gICAgfTtcbiAgICB2YXIgcGVnJGM5MyA9IHBlZyRvdGhlckV4cGVjdGF0aW9uKFwiYXJnTmFtZVwiKTtcbiAgICB2YXIgcGVnJGN1cnJQb3MgPSAwO1xuICAgIHZhciBwZWckc2F2ZWRQb3MgPSAwO1xuICAgIHZhciBwZWckcG9zRGV0YWlsc0NhY2hlID0gW3sgbGluZTogMSwgY29sdW1uOiAxIH1dO1xuICAgIHZhciBwZWckbWF4RmFpbFBvcyA9IDA7XG4gICAgdmFyIHBlZyRtYXhGYWlsRXhwZWN0ZWQgPSBbXTtcbiAgICB2YXIgcGVnJHNpbGVudEZhaWxzID0gMDtcbiAgICB2YXIgcGVnJHJlc3VsdDtcbiAgICBpZiAob3B0aW9ucy5zdGFydFJ1bGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoIShvcHRpb25zLnN0YXJ0UnVsZSBpbiBwZWckc3RhcnRSdWxlRnVuY3Rpb25zKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3Qgc3RhcnQgcGFyc2luZyBmcm9tIHJ1bGUgXFxcIlwiICsgb3B0aW9ucy5zdGFydFJ1bGUgKyBcIlxcXCIuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHBlZyRzdGFydFJ1bGVGdW5jdGlvbiA9IHBlZyRzdGFydFJ1bGVGdW5jdGlvbnNbb3B0aW9ucy5zdGFydFJ1bGVdO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0ZXh0KCkge1xuICAgICAgICByZXR1cm4gaW5wdXQuc3Vic3RyaW5nKHBlZyRzYXZlZFBvcywgcGVnJGN1cnJQb3MpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBsb2NhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHBlZyRjb21wdXRlTG9jYXRpb24ocGVnJHNhdmVkUG9zLCBwZWckY3VyclBvcyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGV4cGVjdGVkKGRlc2NyaXB0aW9uLCBsb2NhdGlvbjEpIHtcbiAgICAgICAgbG9jYXRpb24xID0gbG9jYXRpb24xICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gbG9jYXRpb24xXG4gICAgICAgICAgICA6IHBlZyRjb21wdXRlTG9jYXRpb24ocGVnJHNhdmVkUG9zLCBwZWckY3VyclBvcyk7XG4gICAgICAgIHRocm93IHBlZyRidWlsZFN0cnVjdHVyZWRFcnJvcihbcGVnJG90aGVyRXhwZWN0YXRpb24oZGVzY3JpcHRpb24pXSwgaW5wdXQuc3Vic3RyaW5nKHBlZyRzYXZlZFBvcywgcGVnJGN1cnJQb3MpLCBsb2NhdGlvbjEpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBlcnJvcihtZXNzYWdlLCBsb2NhdGlvbjEpIHtcbiAgICAgICAgbG9jYXRpb24xID0gbG9jYXRpb24xICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gbG9jYXRpb24xXG4gICAgICAgICAgICA6IHBlZyRjb21wdXRlTG9jYXRpb24ocGVnJHNhdmVkUG9zLCBwZWckY3VyclBvcyk7XG4gICAgICAgIHRocm93IHBlZyRidWlsZFNpbXBsZUVycm9yKG1lc3NhZ2UsIGxvY2F0aW9uMSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRsaXRlcmFsRXhwZWN0YXRpb24odGV4dDEsIGlnbm9yZUNhc2UpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJsaXRlcmFsXCIsIHRleHQ6IHRleHQxLCBpZ25vcmVDYXNlOiBpZ25vcmVDYXNlIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRjbGFzc0V4cGVjdGF0aW9uKHBhcnRzLCBpbnZlcnRlZCwgaWdub3JlQ2FzZSkge1xuICAgICAgICByZXR1cm4geyB0eXBlOiBcImNsYXNzXCIsIHBhcnRzOiBwYXJ0cywgaW52ZXJ0ZWQ6IGludmVydGVkLCBpZ25vcmVDYXNlOiBpZ25vcmVDYXNlIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRhbnlFeHBlY3RhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJhbnlcIiB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckZW5kRXhwZWN0YXRpb24oKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6IFwiZW5kXCIgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJG90aGVyRXhwZWN0YXRpb24oZGVzY3JpcHRpb24pIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJvdGhlclwiLCBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24gfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJGNvbXB1dGVQb3NEZXRhaWxzKHBvcykge1xuICAgICAgICB2YXIgZGV0YWlscyA9IHBlZyRwb3NEZXRhaWxzQ2FjaGVbcG9zXTtcbiAgICAgICAgdmFyIHA7XG4gICAgICAgIGlmIChkZXRhaWxzKSB7XG4gICAgICAgICAgICByZXR1cm4gZGV0YWlscztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHAgPSBwb3MgLSAxO1xuICAgICAgICAgICAgd2hpbGUgKCFwZWckcG9zRGV0YWlsc0NhY2hlW3BdKSB7XG4gICAgICAgICAgICAgICAgcC0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGV0YWlscyA9IHBlZyRwb3NEZXRhaWxzQ2FjaGVbcF07XG4gICAgICAgICAgICBkZXRhaWxzID0ge1xuICAgICAgICAgICAgICAgIGxpbmU6IGRldGFpbHMubGluZSxcbiAgICAgICAgICAgICAgICBjb2x1bW46IGRldGFpbHMuY29sdW1uXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2hpbGUgKHAgPCBwb3MpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwKSA9PT0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlscy5saW5lKys7XG4gICAgICAgICAgICAgICAgICAgIGRldGFpbHMuY29sdW1uID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRldGFpbHMuY29sdW1uKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHArKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBlZyRwb3NEZXRhaWxzQ2FjaGVbcG9zXSA9IGRldGFpbHM7XG4gICAgICAgICAgICByZXR1cm4gZGV0YWlscztcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckY29tcHV0ZUxvY2F0aW9uKHN0YXJ0UG9zLCBlbmRQb3MpIHtcbiAgICAgICAgdmFyIHN0YXJ0UG9zRGV0YWlscyA9IHBlZyRjb21wdXRlUG9zRGV0YWlscyhzdGFydFBvcyk7XG4gICAgICAgIHZhciBlbmRQb3NEZXRhaWxzID0gcGVnJGNvbXB1dGVQb3NEZXRhaWxzKGVuZFBvcyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGFydDoge1xuICAgICAgICAgICAgICAgIG9mZnNldDogc3RhcnRQb3MsXG4gICAgICAgICAgICAgICAgbGluZTogc3RhcnRQb3NEZXRhaWxzLmxpbmUsXG4gICAgICAgICAgICAgICAgY29sdW1uOiBzdGFydFBvc0RldGFpbHMuY29sdW1uXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5kOiB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBlbmRQb3MsXG4gICAgICAgICAgICAgICAgbGluZTogZW5kUG9zRGV0YWlscy5saW5lLFxuICAgICAgICAgICAgICAgIGNvbHVtbjogZW5kUG9zRGV0YWlscy5jb2x1bW5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJGZhaWwoZXhwZWN0ZWQxKSB7XG4gICAgICAgIGlmIChwZWckY3VyclBvcyA8IHBlZyRtYXhGYWlsUG9zKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBlZyRjdXJyUG9zID4gcGVnJG1heEZhaWxQb3MpIHtcbiAgICAgICAgICAgIHBlZyRtYXhGYWlsUG9zID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICBwZWckbWF4RmFpbEV4cGVjdGVkID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcGVnJG1heEZhaWxFeHBlY3RlZC5wdXNoKGV4cGVjdGVkMSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRidWlsZFNpbXBsZUVycm9yKG1lc3NhZ2UsIGxvY2F0aW9uMSkge1xuICAgICAgICByZXR1cm4gbmV3IFN5bnRheEVycm9yKG1lc3NhZ2UsIFtdLCBcIlwiLCBsb2NhdGlvbjEpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckYnVpbGRTdHJ1Y3R1cmVkRXJyb3IoZXhwZWN0ZWQxLCBmb3VuZCwgbG9jYXRpb24xKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3ludGF4RXJyb3IoU3ludGF4RXJyb3IuYnVpbGRNZXNzYWdlKGV4cGVjdGVkMSwgZm91bmQpLCBleHBlY3RlZDEsIGZvdW5kLCBsb2NhdGlvbjEpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VzdGFydCgpIHtcbiAgICAgICAgdmFyIHMwO1xuICAgICAgICBzMCA9IHBlZyRwYXJzZW1lc3NhZ2UoKTtcbiAgICAgICAgcmV0dXJuIHMwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VtZXNzYWdlKCkge1xuICAgICAgICB2YXIgczAsIHMxO1xuICAgICAgICBzMCA9IFtdO1xuICAgICAgICBzMSA9IHBlZyRwYXJzZW1lc3NhZ2VFbGVtZW50KCk7XG4gICAgICAgIHdoaWxlIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczAucHVzaChzMSk7XG4gICAgICAgICAgICBzMSA9IHBlZyRwYXJzZW1lc3NhZ2VFbGVtZW50KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHMwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VtZXNzYWdlRWxlbWVudCgpIHtcbiAgICAgICAgdmFyIHMwO1xuICAgICAgICBzMCA9IHBlZyRwYXJzZWxpdGVyYWxFbGVtZW50KCk7XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczAgPSBwZWckcGFyc2Vhcmd1bWVudEVsZW1lbnQoKTtcbiAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJHBhcnNlc2ltcGxlRm9ybWF0RWxlbWVudCgpO1xuICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRwYXJzZXBsdXJhbEVsZW1lbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRwYXJzZXNlbGVjdEVsZW1lbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJHBhcnNlcG91bmRFbGVtZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHMwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VtZXNzYWdlVGV4dCgpIHtcbiAgICAgICAgdmFyIHMwLCBzMSwgczI7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHMxID0gW107XG4gICAgICAgIHMyID0gcGVnJHBhcnNlZG91YmxlQXBvc3Ryb3BoZXMoKTtcbiAgICAgICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRwYXJzZXF1b3RlZFN0cmluZygpO1xuICAgICAgICAgICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczIgPSBwZWckcGFyc2V1bnF1b3RlZFN0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgd2hpbGUgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczEucHVzaChzMik7XG4gICAgICAgICAgICAgICAgczIgPSBwZWckcGFyc2Vkb3VibGVBcG9zdHJvcGhlcygpO1xuICAgICAgICAgICAgICAgIGlmIChzMiA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzMiA9IHBlZyRwYXJzZXF1b3RlZFN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMyID0gcGVnJHBhcnNldW5xdW90ZWRTdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzAoczEpO1xuICAgICAgICB9XG4gICAgICAgIHMwID0gczE7XG4gICAgICAgIHJldHVybiBzMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlbGl0ZXJhbEVsZW1lbnQoKSB7XG4gICAgICAgIHZhciBzMCwgczE7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHMxID0gcGVnJHBhcnNlbWVzc2FnZVRleHQoKTtcbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGMxKHMxKTtcbiAgICAgICAgfVxuICAgICAgICBzMCA9IHMxO1xuICAgICAgICByZXR1cm4gczA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZXBvdW5kRWxlbWVudCgpIHtcbiAgICAgICAgdmFyIHMwLCBzMTtcbiAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAzNSkge1xuICAgICAgICAgICAgczEgPSBwZWckYzI7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGM0KCk7XG4gICAgICAgIH1cbiAgICAgICAgczAgPSBzMTtcbiAgICAgICAgcmV0dXJuIHMwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckcGFyc2Vhcmd1bWVudEVsZW1lbnQoKSB7XG4gICAgICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQsIHM1O1xuICAgICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAxMjMpIHtcbiAgICAgICAgICAgIHMxID0gcGVnJGM2O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckcGFyc2VfKCk7XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMyA9IHBlZyRwYXJzZWFyZ05hbWVPck51bWJlcigpO1xuICAgICAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzNCA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDEyNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM1ID0gcGVnJGM4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGMxMChzMyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGM1KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gczA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZW51bWJlclNrZWxldG9uSWQoKSB7XG4gICAgICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQ7XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzMSA9IFtdO1xuICAgICAgICBzMiA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgICAgczQgPSBwZWckcGFyc2V3aGl0ZVNwYWNlKCk7XG4gICAgICAgIGlmIChzNCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgaWYgKHBlZyRjMTIudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgICAgICAgIHM0ID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGMxMyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgICBpZiAoczQgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMzID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5sZW5ndGggPiBwZWckY3VyclBvcykge1xuICAgICAgICAgICAgICAgIHM0ID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGMxNCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczMgPSBbczMsIHM0XTtcbiAgICAgICAgICAgICAgICBzMiA9IHMzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgd2hpbGUgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczEucHVzaChzMik7XG4gICAgICAgICAgICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNld2hpdGVTcGFjZSgpO1xuICAgICAgICAgICAgICAgIGlmIChzNCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocGVnJGMxMi50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzNCA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMTMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgICAgICAgICAgIGlmIChzNCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzMyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5sZW5ndGggPiBwZWckY3VyclBvcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgczQgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHM0ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzE0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMzID0gW3MzLCBzNF07XG4gICAgICAgICAgICAgICAgICAgICAgICBzMiA9IHMzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgICAgICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMwID0gaW5wdXQuc3Vic3RyaW5nKHMwLCBwZWckY3VyclBvcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICB9XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzExKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gczA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZW51bWJlclNrZWxldG9uVG9rZW5PcHRpb24oKSB7XG4gICAgICAgIHZhciBzMCwgczEsIHMyO1xuICAgICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0Nykge1xuICAgICAgICAgICAgczEgPSBwZWckYzE2O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzE3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gcGVnJHBhcnNlbnVtYmVyU2tlbGV0b25JZCgpO1xuICAgICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckYzE4KHMyKTtcbiAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzE1KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gczA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZW51bWJlclNrZWxldG9uVG9rZW4oKSB7XG4gICAgICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQ7XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzMSA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRwYXJzZW51bWJlclNrZWxldG9uSWQoKTtcbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMzID0gW107XG4gICAgICAgICAgICAgICAgczQgPSBwZWckcGFyc2VudW1iZXJTa2VsZXRvblRva2VuT3B0aW9uKCk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHMzLnB1c2goczQpO1xuICAgICAgICAgICAgICAgICAgICBzNCA9IHBlZyRwYXJzZW51bWJlclNrZWxldG9uVG9rZW5PcHRpb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMjAoczIsIHMzKTtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMTkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlbnVtYmVyU2tlbGV0b24oKSB7XG4gICAgICAgIHZhciBzMCwgczEsIHMyO1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzMSA9IFtdO1xuICAgICAgICBzMiA9IHBlZyRwYXJzZW51bWJlclNrZWxldG9uVG9rZW4oKTtcbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICB3aGlsZSAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMS5wdXNoKHMyKTtcbiAgICAgICAgICAgICAgICBzMiA9IHBlZyRwYXJzZW51bWJlclNrZWxldG9uVG9rZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzIxKHMxKTtcbiAgICAgICAgfVxuICAgICAgICBzMCA9IHMxO1xuICAgICAgICByZXR1cm4gczA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZW51bWJlckFyZ1N0eWxlKCkge1xuICAgICAgICB2YXIgczAsIHMxLCBzMjtcbiAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMjIpIHtcbiAgICAgICAgICAgIHMxID0gcGVnJGMyMjtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGMyMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRwYXJzZW51bWJlclNrZWxldG9uKCk7XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMjQoczIpO1xuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICBzMSA9IHBlZyRjMjUoKTtcbiAgICAgICAgICAgIGlmIChzMSkge1xuICAgICAgICAgICAgICAgIHMxID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczIgPSBwZWckcGFyc2VtZXNzYWdlVGV4dCgpO1xuICAgICAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzI2KHMyKTtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gczA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZW51bWJlckZvcm1hdEVsZW1lbnQoKSB7XG4gICAgICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNiwgczcsIHM4LCBzOSwgczEwLCBzMTEsIHMxMjtcbiAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAxMjMpIHtcbiAgICAgICAgICAgIHMxID0gcGVnJGM2O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckcGFyc2VfKCk7XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMyA9IHBlZyRwYXJzZWFyZ05hbWVPck51bWJlcigpO1xuICAgICAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzNCA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczUgPSBwZWckYzI3O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzI4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNiA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgNikgPT09IHBlZyRjMjkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJGMyOTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGMzMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzOCA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzOCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM5ID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0NCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTAgPSBwZWckYzI3O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGMyOCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTEgPSBwZWckcGFyc2VfKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMiA9IHBlZyRwYXJzZW51bWJlckFyZ1N0eWxlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczEyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEwID0gW3MxMCwgczExLCBzMTJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM5ID0gczEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzOTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzOSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHM5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHM5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzOSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzOSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzOSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzOSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTAgPSBwZWckcGFyc2VfKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTAgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMTI1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczExID0gcGVnJGM4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGM5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczExICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzMxKHMzLCBzNywgczkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHMwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VkYXRlVGltZVNrZWxldG9uTGl0ZXJhbCgpIHtcbiAgICAgICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDM5KSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRjMzI7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMzMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBbXTtcbiAgICAgICAgICAgIHMzID0gcGVnJHBhcnNlZG91YmxlQXBvc3Ryb3BoZXMoKTtcbiAgICAgICAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIGlmIChwZWckYzM0LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgczMgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzM1KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgICAgICAgICAgICAgczMgPSBwZWckcGFyc2Vkb3VibGVBcG9zdHJvcGhlcygpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckYzM0LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMyA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMzUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMzkpIHtcbiAgICAgICAgICAgICAgICAgICAgczMgPSBwZWckYzMyO1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzMzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgczEgPSBbczEsIHMyLCBzM107XG4gICAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczAgPSBbXTtcbiAgICAgICAgICAgIHMxID0gcGVnJHBhcnNlZG91YmxlQXBvc3Ryb3BoZXMoKTtcbiAgICAgICAgICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIGlmIChwZWckYzM2LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgczEgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzM3KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHdoaWxlIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzMC5wdXNoKHMxKTtcbiAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckcGFyc2Vkb3VibGVBcG9zdHJvcGhlcygpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckYzM2LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMzcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gczA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZWRhdGVUaW1lU2tlbGV0b25QYXR0ZXJuKCkge1xuICAgICAgICB2YXIgczAsIHMxO1xuICAgICAgICBzMCA9IFtdO1xuICAgICAgICBpZiAocGVnJGMzOC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICBzMSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMzkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgd2hpbGUgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczAucHVzaChzMSk7XG4gICAgICAgICAgICAgICAgaWYgKHBlZyRjMzgudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgICAgICAgICAgICBzMSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMzkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlZGF0ZVRpbWVTa2VsZXRvbigpIHtcbiAgICAgICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzMSA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzMiA9IFtdO1xuICAgICAgICBzMyA9IHBlZyRwYXJzZWRhdGVUaW1lU2tlbGV0b25MaXRlcmFsKCk7XG4gICAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczMgPSBwZWckcGFyc2VkYXRlVGltZVNrZWxldG9uUGF0dGVybigpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckcGFyc2VkYXRlVGltZVNrZWxldG9uTGl0ZXJhbCgpO1xuICAgICAgICAgICAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzMyA9IHBlZyRwYXJzZWRhdGVUaW1lU2tlbGV0b25QYXR0ZXJuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczEgPSBpbnB1dC5zdWJzdHJpbmcoczEsIHBlZyRjdXJyUG9zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHMxID0gczI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGM0MChzMSk7XG4gICAgICAgIH1cbiAgICAgICAgczAgPSBzMTtcbiAgICAgICAgcmV0dXJuIHMwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VkYXRlT3JUaW1lQXJnU3R5bGUoKSB7XG4gICAgICAgIHZhciBzMCwgczEsIHMyO1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGMyMikge1xuICAgICAgICAgICAgczEgPSBwZWckYzIyO1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzIzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gcGVnJHBhcnNlZGF0ZVRpbWVTa2VsZXRvbigpO1xuICAgICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckYzI0KHMyKTtcbiAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgczEgPSBwZWckYzQxKCk7XG4gICAgICAgICAgICBpZiAoczEpIHtcbiAgICAgICAgICAgICAgICBzMSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMyID0gcGVnJHBhcnNlbWVzc2FnZVRleHQoKTtcbiAgICAgICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGMyNihzMik7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHMwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VkYXRlT3JUaW1lRm9ybWF0RWxlbWVudCgpIHtcbiAgICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2LCBzNywgczgsIHM5LCBzMTAsIHMxMSwgczEyO1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDEyMykge1xuICAgICAgICAgICAgczEgPSBwZWckYzY7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjNyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJHBhcnNlYXJnTmFtZU9yTnVtYmVyKCk7XG4gICAgICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNlXygpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNSA9IHBlZyRjMjc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMjgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM2ID0gcGVnJHBhcnNlXygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA0KSA9PT0gcGVnJGM0Mikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczcgPSBwZWckYzQyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gNDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzQzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczcgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDQpID09PSBwZWckYzQ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczcgPSBwZWckYzQ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzQ1KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzOCA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzOCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM5ID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0NCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTAgPSBwZWckYzI3O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGMyOCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTEgPSBwZWckcGFyc2VfKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMiA9IHBlZyRwYXJzZWRhdGVPclRpbWVBcmdTdHlsZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMCA9IFtzMTAsIHMxMSwgczEyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzOSA9IHMxMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzOTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM5ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzOTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczkgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczkgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEwID0gcGVnJHBhcnNlXygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczEwICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDEyNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMSA9IHBlZyRjODtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczExID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjOSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGMzMShzMywgczcsIHM5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlc2ltcGxlRm9ybWF0RWxlbWVudCgpIHtcbiAgICAgICAgdmFyIHMwO1xuICAgICAgICBzMCA9IHBlZyRwYXJzZW51bWJlckZvcm1hdEVsZW1lbnQoKTtcbiAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRwYXJzZWRhdGVPclRpbWVGb3JtYXRFbGVtZW50KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHMwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VwbHVyYWxFbGVtZW50KCkge1xuICAgICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczYsIHM3LCBzOCwgczksIHMxMCwgczExLCBzMTIsIHMxMywgczE0LCBzMTU7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMTIzKSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRjNjtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGM3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gcGVnJHBhcnNlXygpO1xuICAgICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckcGFyc2VhcmdOYW1lT3JOdW1iZXIoKTtcbiAgICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgczQgPSBwZWckcGFyc2VfKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0NCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM1ID0gcGVnJGMyNztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGMyOCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczYgPSBwZWckcGFyc2VfKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDYpID09PSBwZWckYzQ2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNyA9IHBlZyRjNDY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSA2O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczcgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjNDcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzNyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMTMpID09PSBwZWckYzQ4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczcgPSBwZWckYzQ4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDEzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczcgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGM0OSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczggPSBwZWckcGFyc2VfKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczggIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM5ID0gcGVnJGMyNztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM5ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGMyOCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHM5ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMCA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczExID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA3KSA9PT0gcGVnJGM1MCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMiA9IHBlZyRjNTA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gNztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzUxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczEyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEzID0gcGVnJHBhcnNlXygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczE0ID0gcGVnJHBhcnNlbnVtYmVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMiA9IFtzMTIsIHMxMywgczE0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMSA9IHMxMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczExO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczExID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczExID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTEgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMiA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczEyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTQgPSBwZWckcGFyc2VwbHVyYWxPcHRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHMxNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMy5wdXNoKHMxNCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczE0ID0gcGVnJHBhcnNlcGx1cmFsT3B0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxNCA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDEyNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTUgPSBwZWckYzg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGM1MihzMywgczcsIHMxMSwgczEzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHMwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VzZWxlY3RFbGVtZW50KCkge1xuICAgICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczYsIHM3LCBzOCwgczksIHMxMCwgczExLCBzMTIsIHMxMztcbiAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAxMjMpIHtcbiAgICAgICAgICAgIHMxID0gcGVnJGM2O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckcGFyc2VfKCk7XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMyA9IHBlZyRwYXJzZWFyZ05hbWVPck51bWJlcigpO1xuICAgICAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzNCA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczUgPSBwZWckYzI3O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzI4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNiA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgNikgPT09IHBlZyRjNTMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJGM1MztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGM1NCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzOCA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzOCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckYzI3O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzI4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEwID0gcGVnJHBhcnNlXygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczEwICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTEgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMiA9IHBlZyRwYXJzZXNlbGVjdE9wdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChzMTIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczExLnB1c2goczEyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEyID0gcGVnJHBhcnNlc2VsZWN0T3B0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczExID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTIgPSBwZWckcGFyc2VfKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDEyNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEzID0gcGVnJGM4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGM5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczEzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGM1NShzMywgczExKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlcGx1cmFsUnVsZVNlbGVjdFZhbHVlKCkge1xuICAgICAgICB2YXIgczAsIHMxLCBzMiwgczM7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHMxID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNjEpIHtcbiAgICAgICAgICAgIHMyID0gcGVnJGM1NjtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGM1Nyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRwYXJzZW51bWJlcigpO1xuICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczIgPSBbczIsIHMzXTtcbiAgICAgICAgICAgICAgICBzMSA9IHMyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczAgPSBpbnB1dC5zdWJzdHJpbmcoczAsIHBlZyRjdXJyUG9zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRwYXJzZWFyZ05hbWUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gczA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZXNlbGVjdE9wdGlvbigpIHtcbiAgICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2LCBzNztcbiAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgczEgPSBwZWckcGFyc2VfKCk7XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckcGFyc2VhcmdOYW1lKCk7XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMyA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAxMjMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHM0ID0gcGVnJGM2O1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHM0ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBzNSA9IHBlZyRjNTgoczIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHM1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNiA9IHBlZyRwYXJzZW1lc3NhZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAxMjUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJGM4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjNTkoczIsIHM2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlcGx1cmFsT3B0aW9uKCkge1xuICAgICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczYsIHM3O1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzMSA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRwYXJzZXBsdXJhbFJ1bGVTZWxlY3RWYWx1ZSgpO1xuICAgICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckcGFyc2VfKCk7XG4gICAgICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMTIzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzNCA9IHBlZyRjNjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGM3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgczUgPSBwZWckYzYwKHMyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM1ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczYgPSBwZWckcGFyc2VtZXNzYWdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMTI1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNyA9IHBlZyRjODtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGM5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzYxKHMyLCBzNik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gczA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZXdoaXRlU3BhY2UoKSB7XG4gICAgICAgIHZhciBzMCwgczE7XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICBpZiAocGVnJGM2My50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICBzMCA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjNjQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzYyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gczA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZXBhdHRlcm5TeW50YXgoKSB7XG4gICAgICAgIHZhciBzMCwgczE7XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICBpZiAocGVnJGM2Ni50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICBzMCA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjNjcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzY1KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gczA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZV8oKSB7XG4gICAgICAgIHZhciBzMCwgczEsIHMyO1xuICAgICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgczEgPSBbXTtcbiAgICAgICAgczIgPSBwZWckcGFyc2V3aGl0ZVNwYWNlKCk7XG4gICAgICAgIHdoaWxlIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczEucHVzaChzMik7XG4gICAgICAgICAgICBzMiA9IHBlZyRwYXJzZXdoaXRlU3BhY2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMwID0gaW5wdXQuc3Vic3RyaW5nKHMwLCBwZWckY3VyclBvcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICB9XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzY4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gczA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZW51bWJlcigpIHtcbiAgICAgICAgdmFyIHMwLCBzMSwgczI7XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ1KSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRjNzA7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjNzEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczEgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckcGFyc2VhcmdOdW1iZXIoKTtcbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJGM3MihzMSwgczIpO1xuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjNjkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlYXBvc3Ryb3BoZSgpIHtcbiAgICAgICAgdmFyIHMwLCBzMTtcbiAgICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMzkpIHtcbiAgICAgICAgICAgIHMwID0gcGVnJGMzMjtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGMzMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjNzMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlZG91YmxlQXBvc3Ryb3BoZXMoKSB7XG4gICAgICAgIHZhciBzMCwgczE7XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGM3NSkge1xuICAgICAgICAgICAgczEgPSBwZWckYzc1O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzc2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzc3KCk7XG4gICAgICAgIH1cbiAgICAgICAgczAgPSBzMTtcbiAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjNzQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlcXVvdGVkU3RyaW5nKCkge1xuICAgICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0LCBzNTtcbiAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAzOSkge1xuICAgICAgICAgICAgczEgPSBwZWckYzMyO1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzMzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gcGVnJHBhcnNlZXNjYXBlZENoYXIoKTtcbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICAgICAgczQgPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGM3NSkge1xuICAgICAgICAgICAgICAgICAgICBzNSA9IHBlZyRjNzU7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjNzYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzNSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocGVnJGMzNC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzNSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMzUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdoaWxlIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzNC5wdXNoKHM1KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjNzUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHM1ID0gcGVnJGM3NTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGM3Nik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHM1ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJGMzNC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczUgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzM1KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHMzID0gaW5wdXQuc3Vic3RyaW5nKHMzLCBwZWckY3VyclBvcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAzOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgczQgPSBwZWckYzMyO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHM0ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzMzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoczQgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHM0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzc4KHMyLCBzMyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gczA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZXVucXVvdGVkU3RyaW5nKCkge1xuICAgICAgICB2YXIgczAsIHMxLCBzMiwgczM7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHMxID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIGlmIChpbnB1dC5sZW5ndGggPiBwZWckY3VyclBvcykge1xuICAgICAgICAgICAgczIgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzE0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgczMgPSBwZWckYzc5KHMyKTtcbiAgICAgICAgICAgIGlmIChzMykge1xuICAgICAgICAgICAgICAgIHMzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczIgPSBbczIsIHMzXTtcbiAgICAgICAgICAgICAgICBzMSA9IHMyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAxMCkge1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJGM4MDtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGM4MSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczAgPSBpbnB1dC5zdWJzdHJpbmcoczAsIHBlZyRjdXJyUG9zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHMwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckcGFyc2Vlc2NhcGVkQ2hhcigpIHtcbiAgICAgICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzMSA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBpZiAoaW5wdXQubGVuZ3RoID4gcGVnJGN1cnJQb3MpIHtcbiAgICAgICAgICAgIHMyID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGMxNCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgIHMzID0gcGVnJGM4MihzMik7XG4gICAgICAgICAgICBpZiAoczMpIHtcbiAgICAgICAgICAgICAgICBzMyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMyID0gW3MyLCBzM107XG4gICAgICAgICAgICAgICAgczEgPSBzMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMwID0gaW5wdXQuc3Vic3RyaW5nKHMwLCBwZWckY3VyclBvcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlYXJnTmFtZU9yTnVtYmVyKCkge1xuICAgICAgICB2YXIgczAsIHMxO1xuICAgICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgczEgPSBwZWckcGFyc2VhcmdOdW1iZXIoKTtcbiAgICAgICAgaWYgKHMxID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRwYXJzZWFyZ05hbWUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMwID0gaW5wdXQuc3Vic3RyaW5nKHMwLCBwZWckY3VyclBvcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICB9XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzgzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gczA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZWFyZ051bWJlcigpIHtcbiAgICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNDtcbiAgICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDgpIHtcbiAgICAgICAgICAgIHMxID0gcGVnJGM4NTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGM4Nik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGM4NygpO1xuICAgICAgICB9XG4gICAgICAgIHMwID0gczE7XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgIHMxID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICBpZiAocGVnJGM4OC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICAgICAgczIgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzg5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMyA9IFtdO1xuICAgICAgICAgICAgICAgIGlmIChwZWckYzkwLnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgczQgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzkxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3aGlsZSAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgczMucHVzaChzNCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwZWckYzkwLnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHM0ID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGM5MSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHMyID0gW3MyLCBzM107XG4gICAgICAgICAgICAgICAgICAgIHMxID0gczI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRjOTIoczEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfVxuICAgICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGM4NCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHMwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VhcmdOYW1lKCkge1xuICAgICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0O1xuICAgICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgczEgPSBbXTtcbiAgICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICAgIHM0ID0gcGVnJHBhcnNld2hpdGVTcGFjZSgpO1xuICAgICAgICBpZiAoczQgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNlcGF0dGVyblN5bnRheCgpO1xuICAgICAgICB9XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgICBpZiAoczQgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMzID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5sZW5ndGggPiBwZWckY3VyclBvcykge1xuICAgICAgICAgICAgICAgIHM0ID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGMxNCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczMgPSBbczMsIHM0XTtcbiAgICAgICAgICAgICAgICBzMiA9IHMzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgd2hpbGUgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczEucHVzaChzMik7XG4gICAgICAgICAgICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNld2hpdGVTcGFjZSgpO1xuICAgICAgICAgICAgICAgIGlmIChzNCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzNCA9IHBlZyRwYXJzZXBhdHRlcm5TeW50YXgoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgICAgICAgICAgaWYgKHM0ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHMzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0Lmxlbmd0aCA+IHBlZyRjdXJyUG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzNCA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMTQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgczMgPSBbczMsIHM0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMyID0gczM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgICAgICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczAgPSBpbnB1dC5zdWJzdHJpbmcoczAsIHBlZyRjdXJyUG9zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH1cbiAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjOTMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzMDtcbiAgICB9XG4gICAgdmFyIG1lc3NhZ2VDdHggPSBbJ3Jvb3QnXTtcbiAgICBmdW5jdGlvbiBpc05lc3RlZE1lc3NhZ2VUZXh0KCkge1xuICAgICAgICByZXR1cm4gbWVzc2FnZUN0eC5sZW5ndGggPiAxO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0luUGx1cmFsT3B0aW9uKCkge1xuICAgICAgICByZXR1cm4gbWVzc2FnZUN0eFttZXNzYWdlQ3R4Lmxlbmd0aCAtIDFdID09PSAncGx1cmFsJztcbiAgICB9XG4gICAgZnVuY3Rpb24gaW5zZXJ0TG9jYXRpb24oKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuY2FwdHVyZUxvY2F0aW9uID8ge1xuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uKClcbiAgICAgICAgfSA6IHt9O1xuICAgIH1cbiAgICBwZWckcmVzdWx0ID0gcGVnJHN0YXJ0UnVsZUZ1bmN0aW9uKCk7XG4gICAgaWYgKHBlZyRyZXN1bHQgIT09IHBlZyRGQUlMRUQgJiYgcGVnJGN1cnJQb3MgPT09IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcGVnJHJlc3VsdDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChwZWckcmVzdWx0ICE9PSBwZWckRkFJTEVEICYmIHBlZyRjdXJyUG9zIDwgaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgICAgICBwZWckZmFpbChwZWckZW5kRXhwZWN0YXRpb24oKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgcGVnJGJ1aWxkU3RydWN0dXJlZEVycm9yKHBlZyRtYXhGYWlsRXhwZWN0ZWQsIHBlZyRtYXhGYWlsUG9zIDwgaW5wdXQubGVuZ3RoID8gaW5wdXQuY2hhckF0KHBlZyRtYXhGYWlsUG9zKSA6IG51bGwsIHBlZyRtYXhGYWlsUG9zIDwgaW5wdXQubGVuZ3RoXG4gICAgICAgICAgICA/IHBlZyRjb21wdXRlTG9jYXRpb24ocGVnJG1heEZhaWxQb3MsIHBlZyRtYXhGYWlsUG9zICsgMSlcbiAgICAgICAgICAgIDogcGVnJGNvbXB1dGVMb2NhdGlvbihwZWckbWF4RmFpbFBvcywgcGVnJG1heEZhaWxQb3MpKTtcbiAgICB9XG59XG5leHBvcnQgdmFyIHBlZ1BhcnNlID0gcGVnJHBhcnNlO1xuIiwidmFyIF9fc3ByZWFkQXJyYXlzID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5cykgfHwgZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcbiAgICByZXR1cm4gcjtcbn07XG5pbXBvcnQgeyBpc1BsdXJhbEVsZW1lbnQsIGlzTGl0ZXJhbEVsZW1lbnQsIGlzU2VsZWN0RWxlbWVudCwgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IHBlZ1BhcnNlIH0gZnJvbSAnLi9wYXJzZXInO1xudmFyIFBMVVJBTF9IQVNIVEFHX1JFR0VYID0gLyhefFteXFxcXF0pIy9nO1xuLyoqXG4gKiBXaGV0aGVyIHRvIGNvbnZlcnQgYCNgIGluIHBsdXJhbCBydWxlIG9wdGlvbnNcbiAqIHRvIGB7dmFyLCBudW1iZXJ9YFxuICogQHBhcmFtIGVsIEFTVCBFbGVtZW50XG4gKiBAcGFyYW0gcGx1cmFsU3RhY2sgY3VycmVudCBwbHVyYWwgc3RhY2tcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUhhc2h0YWdJblBsdXJhbChlbHMpIHtcbiAgICBlbHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgLy8gSWYgd2UncmUgZW5jb3VudGVyaW5nIGEgcGx1cmFsIGVsXG4gICAgICAgIGlmICghaXNQbHVyYWxFbGVtZW50KGVsKSAmJiAhaXNTZWxlY3RFbGVtZW50KGVsKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIEdvIGRvd24gdGhlIG9wdGlvbnMgYW5kIHNlYXJjaCBmb3IgIyBpbiBhbnkgbGl0ZXJhbCBlbGVtZW50XG4gICAgICAgIE9iamVjdC5rZXlzKGVsLm9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICB2YXIgb3B0ID0gZWwub3B0aW9uc1tpZF07XG4gICAgICAgICAgICAvLyBJZiB3ZSBnb3QgYSBtYXRjaCwgd2UgaGF2ZSB0byBzcGxpdCB0aGlzXG4gICAgICAgICAgICAvLyBhbmQgaW5qZWN0IGEgTnVtYmVyRWxlbWVudCBpbiB0aGUgbWlkZGxlXG4gICAgICAgICAgICB2YXIgbWF0Y2hpbmdMaXRlcmFsRWxJbmRleCA9IC0xO1xuICAgICAgICAgICAgdmFyIGxpdGVyYWxFbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3B0LnZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVsXzEgPSBvcHQudmFsdWVbaV07XG4gICAgICAgICAgICAgICAgaWYgKGlzTGl0ZXJhbEVsZW1lbnQoZWxfMSkgJiYgUExVUkFMX0hBU0hUQUdfUkVHRVgudGVzdChlbF8xLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBtYXRjaGluZ0xpdGVyYWxFbEluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICAgICAgbGl0ZXJhbEVsID0gZWxfMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxpdGVyYWxFbCkge1xuICAgICAgICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGxpdGVyYWxFbC52YWx1ZS5yZXBsYWNlKFBMVVJBTF9IQVNIVEFHX1JFR0VYLCBcIiQxe1wiICsgZWwudmFsdWUgKyBcIiwgbnVtYmVyfVwiKTtcbiAgICAgICAgICAgICAgICB2YXIgbmV3RWxzID0gcGVnUGFyc2UobmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgIChfYSA9IG9wdC52YWx1ZSkuc3BsaWNlLmFwcGx5KF9hLCBfX3NwcmVhZEFycmF5cyhbbWF0Y2hpbmdMaXRlcmFsRWxJbmRleCwgMV0sIG5ld0VscykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbm9ybWFsaXplSGFzaHRhZ0luUGx1cmFsKG9wdC52YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuIiwiaW1wb3J0IHsgcGVnUGFyc2UgfSBmcm9tICcuL3BhcnNlcic7XG5pbXBvcnQgeyBub3JtYWxpemVIYXNodGFnSW5QbHVyYWwgfSBmcm9tICcuL25vcm1hbGl6ZSc7XG5leHBvcnQgKiBmcm9tICcuL3R5cGVzJztcbmV4cG9ydCAqIGZyb20gJy4vcGFyc2VyJztcbmV4cG9ydCAqIGZyb20gJy4vc2tlbGV0b24nO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlKGlucHV0LCBvcHRzKSB7XG4gICAgdmFyIGVscyA9IHBlZ1BhcnNlKGlucHV0LCBvcHRzKTtcbiAgICBpZiAoIW9wdHMgfHwgb3B0cy5ub3JtYWxpemVIYXNodGFnSW5QbHVyYWwgIT09IGZhbHNlKSB7XG4gICAgICAgIG5vcm1hbGl6ZUhhc2h0YWdJblBsdXJhbChlbHMpO1xuICAgIH1cbiAgICByZXR1cm4gZWxzO1xufVxuIiwidmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbi8qKlxuICogaHR0cHM6Ly91bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlXG4gKiBDcmVkaXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9jYXJpZHkvaW50bC1kYXRldGltZWZvcm1hdC1wYXR0ZXJuL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG4gKiB3aXRoIHNvbWUgdHdlYWtzXG4gKi9cbnZhciBEQVRFX1RJTUVfUkVHRVggPSAvKD86W0VlY117MSw2fXxHezEsNX18W1FxXXsxLDV9fCg/Olt5WXVyXSt8VXsxLDV9KXxbTUxdezEsNX18ZHsxLDJ9fER7MSwzfXxGezF9fFthYkJdezEsNX18W2hrSEtdezEsMn18d3sxLDJ9fFd7MX18bXsxLDJ9fHN7MSwyfXxbelpPdlZ4WF17MSw0fSkoPz0oW14nXSonW14nXSonKSpbXiddKiQpL2c7XG4vKipcbiAqIFBhcnNlIERhdGUgdGltZSBza2VsZXRvbiBpbnRvIEludGwuRGF0ZVRpbWVGb3JtYXRPcHRpb25zXG4gKiBSZWY6IGh0dHBzOi8vdW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0ZpZWxkX1N5bWJvbF9UYWJsZVxuICogQHB1YmxpY1xuICogQHBhcmFtIHNrZWxldG9uIHNrZWxldG9uIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VEYXRlVGltZVNrZWxldG9uKHNrZWxldG9uKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHNrZWxldG9uLnJlcGxhY2UoREFURV9USU1FX1JFR0VYLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgdmFyIGxlbiA9IG1hdGNoLmxlbmd0aDtcbiAgICAgICAgc3dpdGNoIChtYXRjaFswXSkge1xuICAgICAgICAgICAgLy8gRXJhXG4gICAgICAgICAgICBjYXNlICdHJzpcbiAgICAgICAgICAgICAgICByZXN1bHQuZXJhID0gbGVuID09PSA0ID8gJ2xvbmcnIDogbGVuID09PSA1ID8gJ25hcnJvdycgOiAnc2hvcnQnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgLy8gWWVhclxuICAgICAgICAgICAgY2FzZSAneSc6XG4gICAgICAgICAgICAgICAgcmVzdWx0LnllYXIgPSBsZW4gPT09IDIgPyAnMi1kaWdpdCcgOiAnbnVtZXJpYyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdZJzpcbiAgICAgICAgICAgIGNhc2UgJ3UnOlxuICAgICAgICAgICAgY2FzZSAnVSc6XG4gICAgICAgICAgICBjYXNlICdyJzpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignYFkvdS9VL3JgICh5ZWFyKSBwYXR0ZXJucyBhcmUgbm90IHN1cHBvcnRlZCwgdXNlIGB5YCBpbnN0ZWFkJyk7XG4gICAgICAgICAgICAvLyBRdWFydGVyXG4gICAgICAgICAgICBjYXNlICdxJzpcbiAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdgcS9RYCAocXVhcnRlcikgcGF0dGVybnMgYXJlIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgICAgICAgIC8vIE1vbnRoXG4gICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgIGNhc2UgJ0wnOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5tb250aCA9IFsnbnVtZXJpYycsICcyLWRpZ2l0JywgJ3Nob3J0JywgJ2xvbmcnLCAnbmFycm93J11bbGVuIC0gMV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAvLyBXZWVrXG4gICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdgdy9XYCAod2VlaykgcGF0dGVybnMgYXJlIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5kYXkgPSBbJ251bWVyaWMnLCAnMi1kaWdpdCddW2xlbiAtIDFdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICBjYXNlICdGJzpcbiAgICAgICAgICAgIGNhc2UgJ2cnOlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdgRC9GL2dgIChkYXkpIHBhdHRlcm5zIGFyZSBub3Qgc3VwcG9ydGVkLCB1c2UgYGRgIGluc3RlYWQnKTtcbiAgICAgICAgICAgIC8vIFdlZWtkYXlcbiAgICAgICAgICAgIGNhc2UgJ0UnOlxuICAgICAgICAgICAgICAgIHJlc3VsdC53ZWVrZGF5ID0gbGVuID09PSA0ID8gJ3Nob3J0JyA6IGxlbiA9PT0gNSA/ICduYXJyb3cnIDogJ3Nob3J0JztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2UnOlxuICAgICAgICAgICAgICAgIGlmIChsZW4gPCA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdgZS4uZWVlYCAod2Vla2RheSkgcGF0dGVybnMgYXJlIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0LndlZWtkYXkgPSBbJ3Nob3J0JywgJ2xvbmcnLCAnbmFycm93JywgJ3Nob3J0J11bbGVuIC0gNF07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjJzpcbiAgICAgICAgICAgICAgICBpZiAobGVuIDwgNCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignYGMuLmNjY2AgKHdlZWtkYXkpIHBhdHRlcm5zIGFyZSBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdC53ZWVrZGF5ID0gWydzaG9ydCcsICdsb25nJywgJ25hcnJvdycsICdzaG9ydCddW2xlbiAtIDRdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgLy8gUGVyaW9kXG4gICAgICAgICAgICBjYXNlICdhJzogLy8gQU0sIFBNXG4gICAgICAgICAgICAgICAgcmVzdWx0LmhvdXIxMiA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdiJzogLy8gYW0sIHBtLCBub29uLCBtaWRuaWdodFxuICAgICAgICAgICAgY2FzZSAnQic6IC8vIGZsZXhpYmxlIGRheSBwZXJpb2RzXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2BiL0JgIChwZXJpb2QpIHBhdHRlcm5zIGFyZSBub3Qgc3VwcG9ydGVkLCB1c2UgYGFgIGluc3RlYWQnKTtcbiAgICAgICAgICAgIC8vIEhvdXJcbiAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5ob3VyQ3ljbGUgPSAnaDEyJztcbiAgICAgICAgICAgICAgICByZXN1bHQuaG91ciA9IFsnbnVtZXJpYycsICcyLWRpZ2l0J11bbGVuIC0gMV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdIJzpcbiAgICAgICAgICAgICAgICByZXN1bHQuaG91ckN5Y2xlID0gJ2gyMyc7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmhvdXIgPSBbJ251bWVyaWMnLCAnMi1kaWdpdCddW2xlbiAtIDFdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnSyc6XG4gICAgICAgICAgICAgICAgcmVzdWx0LmhvdXJDeWNsZSA9ICdoMTEnO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5ob3VyID0gWydudW1lcmljJywgJzItZGlnaXQnXVtsZW4gLSAxXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2snOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5ob3VyQ3ljbGUgPSAnaDI0JztcbiAgICAgICAgICAgICAgICByZXN1bHQuaG91ciA9IFsnbnVtZXJpYycsICcyLWRpZ2l0J11bbGVuIC0gMV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdqJzpcbiAgICAgICAgICAgIGNhc2UgJ0onOlxuICAgICAgICAgICAgY2FzZSAnQyc6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2BqL0ovQ2AgKGhvdXIpIHBhdHRlcm5zIGFyZSBub3Qgc3VwcG9ydGVkLCB1c2UgYGgvSC9LL2tgIGluc3RlYWQnKTtcbiAgICAgICAgICAgIC8vIE1pbnV0ZVxuICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgcmVzdWx0Lm1pbnV0ZSA9IFsnbnVtZXJpYycsICcyLWRpZ2l0J11bbGVuIC0gMV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAvLyBTZWNvbmRcbiAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5zZWNvbmQgPSBbJ251bWVyaWMnLCAnMi1kaWdpdCddW2xlbiAtIDFdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnUyc6XG4gICAgICAgICAgICBjYXNlICdBJzpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignYFMvQWAgKHNlY29uZCkgcGF0dGVucnMgYXJlIG5vdCBzdXBwb3J0ZWQsIHVzZSBgc2AgaW5zdGVhZCcpO1xuICAgICAgICAgICAgLy8gWm9uZVxuICAgICAgICAgICAgY2FzZSAneic6IC8vIDEuLjMsIDQ6IHNwZWNpZmljIG5vbi1sb2NhdGlvbiBmb3JtYXRcbiAgICAgICAgICAgICAgICByZXN1bHQudGltZVpvbmVOYW1lID0gbGVuIDwgNCA/ICdzaG9ydCcgOiAnbG9uZyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdaJzogLy8gMS4uMywgNCwgNTogVGhlIElTTzg2MDEgdmFyaW9zIGZvcm1hdHNcbiAgICAgICAgICAgIGNhc2UgJ08nOiAvLyAxLCA0OiBtaWxpc2Vjb25kcyBpbiBkYXkgc2hvcnQsIGxvbmdcbiAgICAgICAgICAgIGNhc2UgJ3YnOiAvLyAxLCA0OiBnZW5lcmljIG5vbi1sb2NhdGlvbiBmb3JtYXRcbiAgICAgICAgICAgIGNhc2UgJ1YnOiAvLyAxLCAyLCAzLCA0OiB0aW1lIHpvbmUgSUQgb3IgY2l0eVxuICAgICAgICAgICAgY2FzZSAnWCc6IC8vIDEsIDIsIDMsIDQ6IFRoZSBJU084NjAxIHZhcmlvcyBmb3JtYXRzXG4gICAgICAgICAgICBjYXNlICd4JzogLy8gMSwgMiwgMywgNDogVGhlIElTTzg2MDEgdmFyaW9zIGZvcm1hdHNcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignYFovTy92L1YvWC94YCAodGltZVpvbmUpIHBhdHRlbnJzIGFyZSBub3Qgc3VwcG9ydGVkLCB1c2UgYHpgIGluc3RlYWQnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGljdVVuaXRUb0VjbWEodW5pdCkge1xuICAgIHJldHVybiB1bml0LnJlcGxhY2UoL14oLio/KS0vLCAnJyk7XG59XG52YXIgRlJBQ1RJT05fUFJFQ0lTSU9OX1JFR0VYID0gL15cXC4oPzooMCspKFxcK3wjKyk/KT8kL2c7XG52YXIgU0lHTklGSUNBTlRfUFJFQ0lTSU9OX1JFR0VYID0gL14oQCspPyhcXCt8IyspPyQvZztcbmZ1bmN0aW9uIHBhcnNlU2lnbmlmaWNhbnRQcmVjaXNpb24oc3RyKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHN0ci5yZXBsYWNlKFNJR05JRklDQU5UX1BSRUNJU0lPTl9SRUdFWCwgZnVuY3Rpb24gKF8sIGcxLCBnMikge1xuICAgICAgICAvLyBAQEAgY2FzZVxuICAgICAgICBpZiAodHlwZW9mIGcyICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmVzdWx0Lm1pbmltdW1TaWduaWZpY2FudERpZ2l0cyA9IGcxLmxlbmd0aDtcbiAgICAgICAgICAgIHJlc3VsdC5tYXhpbXVtU2lnbmlmaWNhbnREaWdpdHMgPSBnMS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQEBAKyBjYXNlXG4gICAgICAgIGVsc2UgaWYgKGcyID09PSAnKycpIHtcbiAgICAgICAgICAgIHJlc3VsdC5taW5pbXVtU2lnbmlmaWNhbnREaWdpdHMgPSBnMS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgLy8gLiMjIyBjYXNlXG4gICAgICAgIGVsc2UgaWYgKGcxWzBdID09PSAnIycpIHtcbiAgICAgICAgICAgIHJlc3VsdC5tYXhpbXVtU2lnbmlmaWNhbnREaWdpdHMgPSBnMS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgLy8gLkBAIyMgb3IgLkBAQCBjYXNlXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0Lm1pbmltdW1TaWduaWZpY2FudERpZ2l0cyA9IGcxLmxlbmd0aDtcbiAgICAgICAgICAgIHJlc3VsdC5tYXhpbXVtU2lnbmlmaWNhbnREaWdpdHMgPVxuICAgICAgICAgICAgICAgIGcxLmxlbmd0aCArICh0eXBlb2YgZzIgPT09ICdzdHJpbmcnID8gZzIubGVuZ3RoIDogMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBwYXJzZVNpZ24oc3RyKSB7XG4gICAgc3dpdGNoIChzdHIpIHtcbiAgICAgICAgY2FzZSAnc2lnbi1hdXRvJzpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc2lnbkRpc3BsYXk6ICdhdXRvJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgJ3NpZ24tYWNjb3VudGluZyc6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGN1cnJlbmN5U2lnbjogJ2FjY291bnRpbmcnLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSAnc2lnbi1hbHdheXMnOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzaWduRGlzcGxheTogJ2Fsd2F5cycsXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlICdzaWduLWFjY291bnRpbmctYWx3YXlzJzpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc2lnbkRpc3BsYXk6ICdhbHdheXMnLFxuICAgICAgICAgICAgICAgIGN1cnJlbmN5U2lnbjogJ2FjY291bnRpbmcnLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSAnc2lnbi1leGNlcHQtemVybyc6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNpZ25EaXNwbGF5OiAnZXhjZXB0WmVybycsXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlICdzaWduLWFjY291bnRpbmctZXhjZXB0LXplcm8nOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzaWduRGlzcGxheTogJ2V4Y2VwdFplcm8nLFxuICAgICAgICAgICAgICAgIGN1cnJlbmN5U2lnbjogJ2FjY291bnRpbmcnLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSAnc2lnbi1uZXZlcic6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNpZ25EaXNwbGF5OiAnbmV2ZXInLFxuICAgICAgICAgICAgfTtcbiAgICB9XG59XG5mdW5jdGlvbiBwYXJzZU5vdGF0aW9uT3B0aW9ucyhvcHQpIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIHNpZ25PcHRzID0gcGFyc2VTaWduKG9wdCk7XG4gICAgaWYgKHNpZ25PcHRzKSB7XG4gICAgICAgIHJldHVybiBzaWduT3B0cztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogaHR0cHM6Ly9naXRodWIuY29tL3VuaWNvZGUtb3JnL2ljdS9ibG9iL21hc3Rlci9kb2NzL3VzZXJndWlkZS9mb3JtYXRfcGFyc2UvbnVtYmVycy9za2VsZXRvbnMubWQjc2tlbGV0b24tc3RlbXMtYW5kLW9wdGlvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnROdW1iZXJTa2VsZXRvblRvTnVtYmVyRm9ybWF0T3B0aW9ucyh0b2tlbnMpIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgZm9yICh2YXIgX2kgPSAwLCB0b2tlbnNfMSA9IHRva2VuczsgX2kgPCB0b2tlbnNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHRva2VuID0gdG9rZW5zXzFbX2ldO1xuICAgICAgICBzd2l0Y2ggKHRva2VuLnN0ZW0pIHtcbiAgICAgICAgICAgIGNhc2UgJ3BlcmNlbnQnOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5zdHlsZSA9ICdwZXJjZW50JztcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGNhc2UgJ2N1cnJlbmN5JzpcbiAgICAgICAgICAgICAgICByZXN1bHQuc3R5bGUgPSAnY3VycmVuY3knO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5jdXJyZW5jeSA9IHRva2VuLm9wdGlvbnNbMF07XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBjYXNlICdncm91cC1vZmYnOlxuICAgICAgICAgICAgICAgIHJlc3VsdC51c2VHcm91cGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgY2FzZSAncHJlY2lzaW9uLWludGVnZXInOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5tYXhpbXVtRnJhY3Rpb25EaWdpdHMgPSAwO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgY2FzZSAnbWVhc3VyZS11bml0JzpcbiAgICAgICAgICAgICAgICByZXN1bHQuc3R5bGUgPSAndW5pdCc7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnVuaXQgPSBpY3VVbml0VG9FY21hKHRva2VuLm9wdGlvbnNbMF0pO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgY2FzZSAnY29tcGFjdC1zaG9ydCc6XG4gICAgICAgICAgICAgICAgcmVzdWx0Lm5vdGF0aW9uID0gJ2NvbXBhY3QnO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5jb21wYWN0RGlzcGxheSA9ICdzaG9ydCc7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBjYXNlICdjb21wYWN0LWxvbmcnOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5ub3RhdGlvbiA9ICdjb21wYWN0JztcbiAgICAgICAgICAgICAgICByZXN1bHQuY29tcGFjdERpc3BsYXkgPSAnbG9uZyc7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBjYXNlICdzY2llbnRpZmljJzpcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcmVzdWx0KSwgeyBub3RhdGlvbjogJ3NjaWVudGlmaWMnIH0pLCB0b2tlbi5vcHRpb25zLnJlZHVjZShmdW5jdGlvbiAoYWxsLCBvcHQpIHsgcmV0dXJuIChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgYWxsKSwgcGFyc2VOb3RhdGlvbk9wdGlvbnMob3B0KSkpOyB9LCB7fSkpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgY2FzZSAnZW5naW5lZXJpbmcnOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKHt9LCByZXN1bHQpLCB7IG5vdGF0aW9uOiAnZW5naW5lZXJpbmcnIH0pLCB0b2tlbi5vcHRpb25zLnJlZHVjZShmdW5jdGlvbiAoYWxsLCBvcHQpIHsgcmV0dXJuIChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgYWxsKSwgcGFyc2VOb3RhdGlvbk9wdGlvbnMob3B0KSkpOyB9LCB7fSkpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgY2FzZSAnbm90YXRpb24tc2ltcGxlJzpcbiAgICAgICAgICAgICAgICByZXN1bHQubm90YXRpb24gPSAnc3RhbmRhcmQnO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3VuaWNvZGUtb3JnL2ljdS9ibG9iL21hc3Rlci9pY3U0Yy9zb3VyY2UvaTE4bi91bmljb2RlL3VudW1iZXJmb3JtYXR0ZXIuaFxuICAgICAgICAgICAgY2FzZSAndW5pdC13aWR0aC1uYXJyb3cnOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5jdXJyZW5jeURpc3BsYXkgPSAnbmFycm93U3ltYm9sJztcbiAgICAgICAgICAgICAgICByZXN1bHQudW5pdERpc3BsYXkgPSAnbmFycm93JztcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGNhc2UgJ3VuaXQtd2lkdGgtc2hvcnQnOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5jdXJyZW5jeURpc3BsYXkgPSAnY29kZSc7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnVuaXREaXNwbGF5ID0gJ3Nob3J0JztcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGNhc2UgJ3VuaXQtd2lkdGgtZnVsbC1uYW1lJzpcbiAgICAgICAgICAgICAgICByZXN1bHQuY3VycmVuY3lEaXNwbGF5ID0gJ25hbWUnO1xuICAgICAgICAgICAgICAgIHJlc3VsdC51bml0RGlzcGxheSA9ICdsb25nJztcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGNhc2UgJ3VuaXQtd2lkdGgtaXNvLWNvZGUnOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5jdXJyZW5jeURpc3BsYXkgPSAnc3ltYm9sJztcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcmVjaXNpb25cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3VuaWNvZGUtb3JnL2ljdS9ibG9iL21hc3Rlci9kb2NzL3VzZXJndWlkZS9mb3JtYXRfcGFyc2UvbnVtYmVycy9za2VsZXRvbnMubWQjZnJhY3Rpb24tcHJlY2lzaW9uXG4gICAgICAgIGlmIChGUkFDVElPTl9QUkVDSVNJT05fUkVHRVgudGVzdCh0b2tlbi5zdGVtKSkge1xuICAgICAgICAgICAgaWYgKHRva2VuLm9wdGlvbnMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdGcmFjdGlvbi1wcmVjaXNpb24gc3RlbXMgb25seSBhY2NlcHQgYSBzaW5nbGUgb3B0aW9uYWwgb3B0aW9uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b2tlbi5zdGVtLnJlcGxhY2UoRlJBQ1RJT05fUFJFQ0lTSU9OX1JFR0VYLCBmdW5jdGlvbiAobWF0Y2gsIGcxLCBnMikge1xuICAgICAgICAgICAgICAgIC8vIHByZWNpc2lvbi1pbnRlZ2VyIGNhc2VcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2ggPT09ICcuJykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQubWF4aW11bUZyYWN0aW9uRGlnaXRzID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gLjAwMCsgY2FzZVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGcyID09PSAnKycpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lm1pbmltdW1GcmFjdGlvbkRpZ2l0cyA9IGcyLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gLiMjIyBjYXNlXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZzFbMF0gPT09ICcjJykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQubWF4aW11bUZyYWN0aW9uRGlnaXRzID0gZzEubGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyAuMDAjIyBvciAuMDAwIGNhc2VcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lm1pbmltdW1GcmFjdGlvbkRpZ2l0cyA9IGcxLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lm1heGltdW1GcmFjdGlvbkRpZ2l0cyA9XG4gICAgICAgICAgICAgICAgICAgICAgICBnMS5sZW5ndGggKyAodHlwZW9mIGcyID09PSAnc3RyaW5nJyA/IGcyLmxlbmd0aCA6IDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCByZXN1bHQpLCBwYXJzZVNpZ25pZmljYW50UHJlY2lzaW9uKHRva2VuLm9wdGlvbnNbMF0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChTSUdOSUZJQ0FOVF9QUkVDSVNJT05fUkVHRVgudGVzdCh0b2tlbi5zdGVtKSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHJlc3VsdCksIHBhcnNlU2lnbmlmaWNhbnRQcmVjaXNpb24odG9rZW4uc3RlbSkpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNpZ25PcHRzID0gcGFyc2VTaWduKHRva2VuLnN0ZW0pO1xuICAgICAgICBpZiAoc2lnbk9wdHMpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCByZXN1bHQpLCBzaWduT3B0cyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xudmFyIF9fc3ByZWFkQXJyYXlzID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5cykgfHwgZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcbiAgICByZXR1cm4gcjtcbn07XG5pbXBvcnQgeyBjb252ZXJ0TnVtYmVyU2tlbGV0b25Ub051bWJlckZvcm1hdE9wdGlvbnMsIGlzQXJndW1lbnRFbGVtZW50LCBpc0RhdGVFbGVtZW50LCBpc0RhdGVUaW1lU2tlbGV0b24sIGlzTGl0ZXJhbEVsZW1lbnQsIGlzTnVtYmVyRWxlbWVudCwgaXNOdW1iZXJTa2VsZXRvbiwgaXNQbHVyYWxFbGVtZW50LCBpc1BvdW5kRWxlbWVudCwgaXNTZWxlY3RFbGVtZW50LCBpc1RpbWVFbGVtZW50LCBwYXJzZURhdGVUaW1lU2tlbGV0b24sIH0gZnJvbSAnaW50bC1tZXNzYWdlZm9ybWF0LXBhcnNlcic7XG52YXIgRm9ybWF0RXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEZvcm1hdEVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZvcm1hdEVycm9yKG1zZywgdmFyaWFibGVJZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtc2cpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnZhcmlhYmxlSWQgPSB2YXJpYWJsZUlkO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBGb3JtYXRFcnJvcjtcbn0oRXJyb3IpKTtcbmZ1bmN0aW9uIG1lcmdlTGl0ZXJhbChwYXJ0cykge1xuICAgIGlmIChwYXJ0cy5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBwYXJ0cztcbiAgICB9XG4gICAgcmV0dXJuIHBhcnRzLnJlZHVjZShmdW5jdGlvbiAoYWxsLCBwYXJ0KSB7XG4gICAgICAgIHZhciBsYXN0UGFydCA9IGFsbFthbGwubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmICghbGFzdFBhcnQgfHxcbiAgICAgICAgICAgIGxhc3RQYXJ0LnR5cGUgIT09IDAgLyogbGl0ZXJhbCAqLyB8fFxuICAgICAgICAgICAgcGFydC50eXBlICE9PSAwIC8qIGxpdGVyYWwgKi8pIHtcbiAgICAgICAgICAgIGFsbC5wdXNoKHBhcnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGFzdFBhcnQudmFsdWUgKz0gcGFydC52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWxsO1xuICAgIH0sIFtdKTtcbn1cbi8vIFRPRE8oc2tlbGV0b24pOiBhZGQgc2tlbGV0b24gc3VwcG9ydFxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFRvUGFydHMoZWxzLCBsb2NhbGVzLCBmb3JtYXR0ZXJzLCBmb3JtYXRzLCB2YWx1ZXMsIGN1cnJlbnRQbHVyYWxWYWx1ZSwgXG4vLyBGb3IgZGVidWdnaW5nXG5vcmlnaW5hbE1lc3NhZ2UpIHtcbiAgICAvLyBIb3QgcGF0aCBmb3Igc3RyYWlnaHQgc2ltcGxlIG1zZyB0cmFuc2xhdGlvbnNcbiAgICBpZiAoZWxzLmxlbmd0aCA9PT0gMSAmJiBpc0xpdGVyYWxFbGVtZW50KGVsc1swXSkpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAwIC8qIGxpdGVyYWwgKi8sXG4gICAgICAgICAgICAgICAgdmFsdWU6IGVsc1swXS52YWx1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF07XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIGVsc18xID0gZWxzOyBfaSA8IGVsc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgZWwgPSBlbHNfMVtfaV07XG4gICAgICAgIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZyBwYXJ0cy5cbiAgICAgICAgaWYgKGlzTGl0ZXJhbEVsZW1lbnQoZWwpKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogMCAvKiBsaXRlcmFsICovLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBlbC52YWx1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVE9ETzogc2hvdWxkIHRoaXMgcGFydCBiZSBsaXRlcmFsIHR5cGU/XG4gICAgICAgIC8vIFJlcGxhY2UgYCNgIGluIHBsdXJhbCBydWxlcyB3aXRoIHRoZSBhY3R1YWwgbnVtZXJpYyB2YWx1ZS5cbiAgICAgICAgaWYgKGlzUG91bmRFbGVtZW50KGVsKSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXJyZW50UGx1cmFsVmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAwIC8qIGxpdGVyYWwgKi8sXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmb3JtYXR0ZXJzLmdldE51bWJlckZvcm1hdChsb2NhbGVzKS5mb3JtYXQoY3VycmVudFBsdXJhbFZhbHVlKSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciB2YXJOYW1lID0gZWwudmFsdWU7XG4gICAgICAgIC8vIEVuZm9yY2UgdGhhdCBhbGwgcmVxdWlyZWQgdmFsdWVzIGFyZSBwcm92aWRlZCBieSB0aGUgY2FsbGVyLlxuICAgICAgICBpZiAoISh2YWx1ZXMgJiYgdmFyTmFtZSBpbiB2YWx1ZXMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoXCJUaGUgaW50bCBzdHJpbmcgY29udGV4dCB2YXJpYWJsZSBcXFwiXCIgKyB2YXJOYW1lICsgXCJcXFwiIHdhcyBub3QgcHJvdmlkZWQgdG8gdGhlIHN0cmluZyBcXFwiXCIgKyBvcmlnaW5hbE1lc3NhZ2UgKyBcIlxcXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbHVlID0gdmFsdWVzW3Zhck5hbWVdO1xuICAgICAgICBpZiAoaXNBcmd1bWVudEVsZW1lbnQoZWwpKSB7XG4gICAgICAgICAgICBpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIHZhbHVlID1cbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInXG4gICAgICAgICAgICAgICAgICAgICAgICA/IFN0cmluZyh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogMSAvKiBhcmd1bWVudCAqLyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGZvcm1hdCBwbHVyYWwgYW5kIHNlbGVjdCBwYXJ0cycgb3B0aW9uIOKAlCB3aGljaCBjYW4gYmUgYVxuICAgICAgICAvLyBuZXN0ZWQgcGF0dGVybiBzdHJ1Y3R1cmUuIFRoZSBjaG9vc2luZyBvZiB0aGUgb3B0aW9uIHRvIHVzZSBpc1xuICAgICAgICAvLyBhYnN0cmFjdGVkLWJ5IGFuZCBkZWxlZ2F0ZWQtdG8gdGhlIHBhcnQgaGVscGVyIG9iamVjdC5cbiAgICAgICAgaWYgKGlzRGF0ZUVsZW1lbnQoZWwpKSB7XG4gICAgICAgICAgICB2YXIgc3R5bGUgPSB0eXBlb2YgZWwuc3R5bGUgPT09ICdzdHJpbmcnID8gZm9ybWF0cy5kYXRlW2VsLnN0eWxlXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAwIC8qIGxpdGVyYWwgKi8sXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZvcm1hdHRlcnNcbiAgICAgICAgICAgICAgICAgICAgLmdldERhdGVUaW1lRm9ybWF0KGxvY2FsZXMsIHN0eWxlKVxuICAgICAgICAgICAgICAgICAgICAuZm9ybWF0KHZhbHVlKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVGltZUVsZW1lbnQoZWwpKSB7XG4gICAgICAgICAgICB2YXIgc3R5bGUgPSB0eXBlb2YgZWwuc3R5bGUgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgPyBmb3JtYXRzLnRpbWVbZWwuc3R5bGVdXG4gICAgICAgICAgICAgICAgOiBpc0RhdGVUaW1lU2tlbGV0b24oZWwuc3R5bGUpXG4gICAgICAgICAgICAgICAgICAgID8gcGFyc2VEYXRlVGltZVNrZWxldG9uKGVsLnN0eWxlLnBhdHRlcm4pXG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgIHR5cGU6IDAgLyogbGl0ZXJhbCAqLyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogZm9ybWF0dGVyc1xuICAgICAgICAgICAgICAgICAgICAuZ2V0RGF0ZVRpbWVGb3JtYXQobG9jYWxlcywgc3R5bGUpXG4gICAgICAgICAgICAgICAgICAgIC5mb3JtYXQodmFsdWUpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOdW1iZXJFbGVtZW50KGVsKSkge1xuICAgICAgICAgICAgdmFyIHN0eWxlID0gdHlwZW9mIGVsLnN0eWxlID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgID8gZm9ybWF0cy5udW1iZXJbZWwuc3R5bGVdXG4gICAgICAgICAgICAgICAgOiBpc051bWJlclNrZWxldG9uKGVsLnN0eWxlKVxuICAgICAgICAgICAgICAgICAgICA/IGNvbnZlcnROdW1iZXJTa2VsZXRvblRvTnVtYmVyRm9ybWF0T3B0aW9ucyhlbC5zdHlsZS50b2tlbnMpXG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgIHR5cGU6IDAgLyogbGl0ZXJhbCAqLyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogZm9ybWF0dGVyc1xuICAgICAgICAgICAgICAgICAgICAuZ2V0TnVtYmVyRm9ybWF0KGxvY2FsZXMsIHN0eWxlKVxuICAgICAgICAgICAgICAgICAgICAuZm9ybWF0KHZhbHVlKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU2VsZWN0RWxlbWVudChlbCkpIHtcbiAgICAgICAgICAgIHZhciBvcHQgPSBlbC5vcHRpb25zW3ZhbHVlXSB8fCBlbC5vcHRpb25zLm90aGVyO1xuICAgICAgICAgICAgaWYgKCFvcHQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgdmFsdWVzIGZvciBcXFwiXCIgKyBlbC52YWx1ZSArIFwiXFxcIjogXFxcIlwiICsgdmFsdWUgKyBcIlxcXCIuIE9wdGlvbnMgYXJlIFxcXCJcIiArIE9iamVjdC5rZXlzKGVsLm9wdGlvbnMpLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LnB1c2guYXBwbHkocmVzdWx0LCBmb3JtYXRUb1BhcnRzKG9wdC52YWx1ZSwgbG9jYWxlcywgZm9ybWF0dGVycywgZm9ybWF0cywgdmFsdWVzKSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQbHVyYWxFbGVtZW50KGVsKSkge1xuICAgICAgICAgICAgdmFyIG9wdCA9IGVsLm9wdGlvbnNbXCI9XCIgKyB2YWx1ZV07XG4gICAgICAgICAgICBpZiAoIW9wdCkge1xuICAgICAgICAgICAgICAgIGlmICghSW50bC5QbHVyYWxSdWxlcykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoXCJJbnRsLlBsdXJhbFJ1bGVzIGlzIG5vdCBhdmFpbGFibGUgaW4gdGhpcyBlbnZpcm9ubWVudC5cXG5UcnkgcG9seWZpbGxpbmcgaXQgdXNpbmcgXFxcIkBmb3JtYXRqcy9pbnRsLXBsdXJhbHJ1bGVzXFxcIlxcblwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHJ1bGUgPSBmb3JtYXR0ZXJzXG4gICAgICAgICAgICAgICAgICAgIC5nZXRQbHVyYWxSdWxlcyhsb2NhbGVzLCB7IHR5cGU6IGVsLnBsdXJhbFR5cGUgfSlcbiAgICAgICAgICAgICAgICAgICAgLnNlbGVjdCh2YWx1ZSAtIChlbC5vZmZzZXQgfHwgMCkpO1xuICAgICAgICAgICAgICAgIG9wdCA9IGVsLm9wdGlvbnNbcnVsZV0gfHwgZWwub3B0aW9ucy5vdGhlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghb3B0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIHZhbHVlcyBmb3IgXFxcIlwiICsgZWwudmFsdWUgKyBcIlxcXCI6IFxcXCJcIiArIHZhbHVlICsgXCJcXFwiLiBPcHRpb25zIGFyZSBcXFwiXCIgKyBPYmplY3Qua2V5cyhlbC5vcHRpb25zKS5qb2luKCdcIiwgXCInKSArIFwiXFxcIlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdC5wdXNoLmFwcGx5KHJlc3VsdCwgZm9ybWF0VG9QYXJ0cyhvcHQudmFsdWUsIGxvY2FsZXMsIGZvcm1hdHRlcnMsIGZvcm1hdHMsIHZhbHVlcywgdmFsdWUgLSAoZWwub2Zmc2V0IHx8IDApKSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VMaXRlcmFsKHJlc3VsdCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0VG9TdHJpbmcoZWxzLCBsb2NhbGVzLCBmb3JtYXR0ZXJzLCBmb3JtYXRzLCB2YWx1ZXMsIFxuLy8gRm9yIGRlYnVnZ2luZ1xub3JpZ2luYWxNZXNzYWdlKSB7XG4gICAgdmFyIHBhcnRzID0gZm9ybWF0VG9QYXJ0cyhlbHMsIGxvY2FsZXMsIGZvcm1hdHRlcnMsIGZvcm1hdHMsIHZhbHVlcywgdW5kZWZpbmVkLCBvcmlnaW5hbE1lc3NhZ2UpO1xuICAgIC8vIEhvdCBwYXRoIGZvciBzdHJhaWdodCBzaW1wbGUgbXNnIHRyYW5zbGF0aW9uc1xuICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHBhcnRzWzBdLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gcGFydHMucmVkdWNlKGZ1bmN0aW9uIChhbGwsIHBhcnQpIHsgcmV0dXJuIChhbGwgKz0gcGFydC52YWx1ZSk7IH0sICcnKTtcbn1cbi8vIFNpbmdsZXRvblxudmFyIGRvbVBhcnNlcjtcbnZhciBUT0tFTl9ERUxJTUlURVIgPSAnQEAnO1xudmFyIFRPS0VOX1JFR0VYID0gL0BAKFxcZCtfXFxkKylAQC9nO1xudmFyIGNvdW50ZXIgPSAwO1xuZnVuY3Rpb24gZ2VuZXJhdGVJZCgpIHtcbiAgICByZXR1cm4gRGF0ZS5ub3coKSArIFwiX1wiICsgKytjb3VudGVyO1xufVxuZnVuY3Rpb24gcmVzdG9yZVJpY2hQbGFjZWhvbGRlck1lc3NhZ2UodGV4dCwgb2JqZWN0UGFydHMpIHtcbiAgICByZXR1cm4gdGV4dFxuICAgICAgICAuc3BsaXQoVE9LRU5fUkVHRVgpXG4gICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gKG9iamVjdFBhcnRzW2NdICE9IG51bGwgPyBvYmplY3RQYXJ0c1tjXSA6IGMpOyB9KVxuICAgICAgICAucmVkdWNlKGZ1bmN0aW9uIChhbGwsIGMpIHtcbiAgICAgICAgaWYgKCFhbGwubGVuZ3RoKSB7XG4gICAgICAgICAgICBhbGwucHVzaChjKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgYyA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgIHR5cGVvZiBhbGxbYWxsLmxlbmd0aCAtIDFdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgYWxsW2FsbC5sZW5ndGggLSAxXSArPSBjO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYWxsLnB1c2goYyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFsbDtcbiAgICB9LCBbXSk7XG59XG4vKipcbiAqIE5vdCBleGhhdXN0aXZlLCBqdXN0IGZvciBzYW5pdHkgY2hlY2tcbiAqL1xudmFyIFNJTVBMRV9YTUxfUkVHRVggPSAvKDwoWzAtOWEtekEtWi1fXSo/KT4oLio/KTxcXC8oWzAtOWEtekEtWi1fXSo/KT4pfCg8WzAtOWEtekEtWi1fXSo/XFwvPikvO1xudmFyIFRFTVBMQVRFX0lEID0gRGF0ZS5ub3coKSArICdAQCc7XG52YXIgVk9JRF9FTEVNRU5UUyA9IFtcbiAgICAnYXJlYScsXG4gICAgJ2Jhc2UnLFxuICAgICdicicsXG4gICAgJ2NvbCcsXG4gICAgJ2VtYmVkJyxcbiAgICAnaHInLFxuICAgICdpbWcnLFxuICAgICdpbnB1dCcsXG4gICAgJ2xpbmsnLFxuICAgICdtZXRhJyxcbiAgICAncGFyYW0nLFxuICAgICdzb3VyY2UnLFxuICAgICd0cmFjaycsXG4gICAgJ3dicicsXG5dO1xuZnVuY3Rpb24gZm9ybWF0SFRNTEVsZW1lbnQoZWwsIG9iamVjdFBhcnRzLCB2YWx1ZXMpIHtcbiAgICB2YXIgdGFnTmFtZSA9IGVsLnRhZ05hbWU7XG4gICAgdmFyIG91dGVySFRNTCA9IGVsLm91dGVySFRNTCwgdGV4dENvbnRlbnQgPSBlbC50ZXh0Q29udGVudCwgY2hpbGROb2RlcyA9IGVsLmNoaWxkTm9kZXM7XG4gICAgLy8gUmVndWxhciB0ZXh0XG4gICAgaWYgKCF0YWdOYW1lKSB7XG4gICAgICAgIHJldHVybiByZXN0b3JlUmljaFBsYWNlaG9sZGVyTWVzc2FnZSh0ZXh0Q29udGVudCB8fCAnJywgb2JqZWN0UGFydHMpO1xuICAgIH1cbiAgICB0YWdOYW1lID0gdGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhciBpc1ZvaWRFbGVtZW50ID0gflZPSURfRUxFTUVOVFMuaW5kZXhPZih0YWdOYW1lKTtcbiAgICB2YXIgZm9ybWF0Rm5PclZhbHVlID0gdmFsdWVzW3RhZ05hbWVdO1xuICAgIGlmIChmb3JtYXRGbk9yVmFsdWUgJiYgaXNWb2lkRWxlbWVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IodGFnTmFtZSArIFwiIGlzIGEgc2VsZi1jbG9zaW5nIHRhZyBhbmQgY2FuIG5vdCBiZSB1c2VkLCBwbGVhc2UgdXNlIGFub3RoZXIgdGFnIG5hbWUuXCIpO1xuICAgIH1cbiAgICBpZiAoIWNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbb3V0ZXJIVE1MXTtcbiAgICB9XG4gICAgdmFyIGNodW5rcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGNoaWxkTm9kZXMpLnJlZHVjZShmdW5jdGlvbiAoYWxsLCBjaGlsZCkge1xuICAgICAgICByZXR1cm4gYWxsLmNvbmNhdChmb3JtYXRIVE1MRWxlbWVudChjaGlsZCwgb2JqZWN0UGFydHMsIHZhbHVlcykpO1xuICAgIH0sIFtdKTtcbiAgICAvLyBMZWdhY3kgSFRNTFxuICAgIGlmICghZm9ybWF0Rm5PclZhbHVlKSB7XG4gICAgICAgIHJldHVybiBfX3NwcmVhZEFycmF5cyhbXCI8XCIgKyB0YWdOYW1lICsgXCI+XCJdLCBjaHVua3MsIFtcIjwvXCIgKyB0YWdOYW1lICsgXCI+XCJdKTtcbiAgICB9XG4gICAgLy8gSFRNTCBUYWcgcmVwbGFjZW1lbnRcbiAgICBpZiAodHlwZW9mIGZvcm1hdEZuT3JWYWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gW2Zvcm1hdEZuT3JWYWx1ZS5hcHBseSh2b2lkIDAsIGNodW5rcyldO1xuICAgIH1cbiAgICByZXR1cm4gW2Zvcm1hdEZuT3JWYWx1ZV07XG59XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0SFRNTE1lc3NhZ2UoZWxzLCBsb2NhbGVzLCBmb3JtYXR0ZXJzLCBmb3JtYXRzLCB2YWx1ZXMsIFxuLy8gRm9yIGRlYnVnZ2luZ1xub3JpZ2luYWxNZXNzYWdlKSB7XG4gICAgdmFyIHBhcnRzID0gZm9ybWF0VG9QYXJ0cyhlbHMsIGxvY2FsZXMsIGZvcm1hdHRlcnMsIGZvcm1hdHMsIHZhbHVlcywgdW5kZWZpbmVkLCBvcmlnaW5hbE1lc3NhZ2UpO1xuICAgIHZhciBvYmplY3RQYXJ0cyA9IHt9O1xuICAgIHZhciBmb3JtYXR0ZWRNZXNzYWdlID0gcGFydHMucmVkdWNlKGZ1bmN0aW9uIChhbGwsIHBhcnQpIHtcbiAgICAgICAgaWYgKHBhcnQudHlwZSA9PT0gMCAvKiBsaXRlcmFsICovKSB7XG4gICAgICAgICAgICByZXR1cm4gKGFsbCArPSBwYXJ0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaWQgPSBnZW5lcmF0ZUlkKCk7XG4gICAgICAgIG9iamVjdFBhcnRzW2lkXSA9IHBhcnQudmFsdWU7XG4gICAgICAgIHJldHVybiAoYWxsICs9IFwiXCIgKyBUT0tFTl9ERUxJTUlURVIgKyBpZCArIFRPS0VOX0RFTElNSVRFUik7XG4gICAgfSwgJycpO1xuICAgIC8vIE5vdCBkZXNpZ25lZCB0byBmaWx0ZXIgb3V0IGFnZ3Jlc3NpdmVseVxuICAgIGlmICghU0lNUExFX1hNTF9SRUdFWC50ZXN0KGZvcm1hdHRlZE1lc3NhZ2UpKSB7XG4gICAgICAgIHJldHVybiByZXN0b3JlUmljaFBsYWNlaG9sZGVyTWVzc2FnZShmb3JtYXR0ZWRNZXNzYWdlLCBvYmplY3RQYXJ0cyk7XG4gICAgfVxuICAgIGlmICghdmFsdWVzKSB7XG4gICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcignTWVzc2FnZSBoYXMgcGxhY2Vob2xkZXJzIGJ1dCBubyB2YWx1ZXMgd2FzIGdpdmVuJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgRE9NUGFyc2VyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoJ0Nhbm5vdCBmb3JtYXQgWE1MIG1lc3NhZ2Ugd2l0aG91dCBET01QYXJzZXInKTtcbiAgICB9XG4gICAgaWYgKCFkb21QYXJzZXIpIHtcbiAgICAgICAgZG9tUGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuICAgIH1cbiAgICB2YXIgY29udGVudCA9IGRvbVBhcnNlclxuICAgICAgICAucGFyc2VGcm9tU3RyaW5nKFwiPGZvcm1hdHRlZC1tZXNzYWdlIGlkPVxcXCJcIiArIFRFTVBMQVRFX0lEICsgXCJcXFwiPlwiICsgZm9ybWF0dGVkTWVzc2FnZSArIFwiPC9mb3JtYXR0ZWQtbWVzc2FnZT5cIiwgJ3RleHQvaHRtbCcpXG4gICAgICAgIC5nZXRFbGVtZW50QnlJZChURU1QTEFURV9JRCk7XG4gICAgaWYgKCFjb250ZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcihcIk1hbGZvcm1lZCBIVE1MIG1lc3NhZ2UgXCIgKyBmb3JtYXR0ZWRNZXNzYWdlKTtcbiAgICB9XG4gICAgdmFyIHRhZ3NUb0Zvcm1hdCA9IE9iamVjdC5rZXlzKHZhbHVlcykuZmlsdGVyKGZ1bmN0aW9uICh2YXJOYW1lKSB7IHJldHVybiAhIWNvbnRlbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUodmFyTmFtZSkubGVuZ3RoOyB9KTtcbiAgICAvLyBObyB0YWdzIHRvIGZvcm1hdFxuICAgIGlmICghdGFnc1RvRm9ybWF0Lmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdG9yZVJpY2hQbGFjZWhvbGRlck1lc3NhZ2UoZm9ybWF0dGVkTWVzc2FnZSwgb2JqZWN0UGFydHMpO1xuICAgIH1cbiAgICB2YXIgY2FzZVNlbnNpdGl2ZVRhZ3MgPSB0YWdzVG9Gb3JtYXQuZmlsdGVyKGZ1bmN0aW9uICh0YWdOYW1lKSB7IHJldHVybiB0YWdOYW1lICE9PSB0YWdOYW1lLnRvTG93ZXJDYXNlKCk7IH0pO1xuICAgIGlmIChjYXNlU2Vuc2l0aXZlVGFncy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKFwiSFRNTCB0YWcgbXVzdCBiZSBsb3dlcmNhc2VkIGJ1dCB0aGUgZm9sbG93aW5nIHRhZ3MgYXJlIG5vdDogXCIgKyBjYXNlU2Vuc2l0aXZlVGFncy5qb2luKCcsICcpKTtcbiAgICB9XG4gICAgLy8gV2UncmUgZG9pbmcgdGhpcyBzaW5jZSB0b3Agbm9kZSBpcyBgPGZvcm1hdHRlZC1tZXNzYWdlLz5gIHdoaWNoIGRvZXMgbm90IGhhdmUgYSBmb3JtYXR0ZXJcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlXG4gICAgICAgIC5jYWxsKGNvbnRlbnQuY2hpbGROb2RlcylcbiAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAoYWxsLCBjaGlsZCkgeyByZXR1cm4gYWxsLmNvbmNhdChmb3JtYXRIVE1MRWxlbWVudChjaGlsZCwgb2JqZWN0UGFydHMsIHZhbHVlcykpOyB9LCBbXSk7XG59XG4iLCIvKlxuQ29weXJpZ2h0IChjKSAyMDE0LCBZYWhvbyEgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLlxuU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiovXG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuaW1wb3J0IHsgcGFyc2UgfSBmcm9tICdpbnRsLW1lc3NhZ2Vmb3JtYXQtcGFyc2VyJztcbmltcG9ydCBtZW1vaXplSW50bENvbnN0cnVjdG9yIGZyb20gJ2ludGwtZm9ybWF0LWNhY2hlJztcbmltcG9ydCB7IGZvcm1hdFRvU3RyaW5nLCBmb3JtYXRUb1BhcnRzLCBmb3JtYXRIVE1MTWVzc2FnZSwgfSBmcm9tICcuL2Zvcm1hdHRlcnMnO1xuLy8gLS0gTWVzc2FnZUZvcm1hdCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gbWVyZ2VDb25maWcoYzEsIGMyKSB7XG4gICAgaWYgKCFjMikge1xuICAgICAgICByZXR1cm4gYzE7XG4gICAgfVxuICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgKGMxIHx8IHt9KSksIChjMiB8fCB7fSkpLCBPYmplY3Qua2V5cyhjMSkucmVkdWNlKGZ1bmN0aW9uIChhbGwsIGspIHtcbiAgICAgICAgYWxsW2tdID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGMxW2tdKSwgKGMyW2tdIHx8IHt9KSk7XG4gICAgICAgIHJldHVybiBhbGw7XG4gICAgfSwge30pKTtcbn1cbmZ1bmN0aW9uIG1lcmdlQ29uZmlncyhkZWZhdWx0Q29uZmlnLCBjb25maWdzKSB7XG4gICAgaWYgKCFjb25maWdzKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0Q29uZmlnO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoZGVmYXVsdENvbmZpZykucmVkdWNlKGZ1bmN0aW9uIChhbGwsIGspIHtcbiAgICAgICAgYWxsW2tdID0gbWVyZ2VDb25maWcoZGVmYXVsdENvbmZpZ1trXSwgY29uZmlnc1trXSk7XG4gICAgICAgIHJldHVybiBhbGw7XG4gICAgfSwgX19hc3NpZ24oe30sIGRlZmF1bHRDb25maWcpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEZWZhdWx0Rm9ybWF0dGVycyhjYWNoZSkge1xuICAgIGlmIChjYWNoZSA9PT0gdm9pZCAwKSB7IGNhY2hlID0ge1xuICAgICAgICBudW1iZXI6IHt9LFxuICAgICAgICBkYXRlVGltZToge30sXG4gICAgICAgIHBsdXJhbFJ1bGVzOiB7fSxcbiAgICB9OyB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0TnVtYmVyRm9ybWF0OiBtZW1vaXplSW50bENvbnN0cnVjdG9yKEludGwuTnVtYmVyRm9ybWF0LCBjYWNoZS5udW1iZXIpLFxuICAgICAgICBnZXREYXRlVGltZUZvcm1hdDogbWVtb2l6ZUludGxDb25zdHJ1Y3RvcihJbnRsLkRhdGVUaW1lRm9ybWF0LCBjYWNoZS5kYXRlVGltZSksXG4gICAgICAgIGdldFBsdXJhbFJ1bGVzOiBtZW1vaXplSW50bENvbnN0cnVjdG9yKEludGwuUGx1cmFsUnVsZXMsIGNhY2hlLnBsdXJhbFJ1bGVzKSxcbiAgICB9O1xufVxudmFyIEludGxNZXNzYWdlRm9ybWF0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEludGxNZXNzYWdlRm9ybWF0KG1lc3NhZ2UsIGxvY2FsZXMsIG92ZXJyaWRlRm9ybWF0cywgb3B0cykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAobG9jYWxlcyA9PT0gdm9pZCAwKSB7IGxvY2FsZXMgPSBJbnRsTWVzc2FnZUZvcm1hdC5kZWZhdWx0TG9jYWxlOyB9XG4gICAgICAgIHRoaXMuZm9ybWF0dGVyQ2FjaGUgPSB7XG4gICAgICAgICAgICBudW1iZXI6IHt9LFxuICAgICAgICAgICAgZGF0ZVRpbWU6IHt9LFxuICAgICAgICAgICAgcGx1cmFsUnVsZXM6IHt9LFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmZvcm1hdCA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRUb1N0cmluZyhfdGhpcy5hc3QsIF90aGlzLmxvY2FsZXMsIF90aGlzLmZvcm1hdHRlcnMsIF90aGlzLmZvcm1hdHMsIHZhbHVlcywgX3RoaXMubWVzc2FnZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZm9ybWF0VG9QYXJ0cyA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRUb1BhcnRzKF90aGlzLmFzdCwgX3RoaXMubG9jYWxlcywgX3RoaXMuZm9ybWF0dGVycywgX3RoaXMuZm9ybWF0cywgdmFsdWVzLCB1bmRlZmluZWQsIF90aGlzLm1lc3NhZ2UpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmZvcm1hdEhUTUxNZXNzYWdlID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdEhUTUxNZXNzYWdlKF90aGlzLmFzdCwgX3RoaXMubG9jYWxlcywgX3RoaXMuZm9ybWF0dGVycywgX3RoaXMuZm9ybWF0cywgdmFsdWVzLCBfdGhpcy5tZXNzYWdlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5yZXNvbHZlZE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAoe1xuICAgICAgICAgICAgbG9jYWxlOiBJbnRsLk51bWJlckZvcm1hdC5zdXBwb3J0ZWRMb2NhbGVzT2YoX3RoaXMubG9jYWxlcylbMF0sXG4gICAgICAgIH0pOyB9O1xuICAgICAgICB0aGlzLmdldEFzdCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmFzdDsgfTtcbiAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgICAgIGlmICghSW50bE1lc3NhZ2VGb3JtYXQuX19wYXJzZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludGxNZXNzYWdlRm9ybWF0Ll9fcGFyc2UgbXVzdCBiZSBzZXQgdG8gcHJvY2VzcyBgbWVzc2FnZWAgb2YgdHlwZSBgc3RyaW5nYCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUGFyc2Ugc3RyaW5nIG1lc3NhZ2VzIGludG8gYW4gQVNULlxuICAgICAgICAgICAgdGhpcy5hc3QgPSBJbnRsTWVzc2FnZUZvcm1hdC5fX3BhcnNlKG1lc3NhZ2UsIHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVIYXNodGFnSW5QbHVyYWw6IGZhbHNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFzdCA9IG1lc3NhZ2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRoaXMuYXN0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQSBtZXNzYWdlIG11c3QgYmUgcHJvdmlkZWQgYXMgYSBTdHJpbmcgb3IgQVNULicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENyZWF0ZXMgYSBuZXcgb2JqZWN0IHdpdGggdGhlIHNwZWNpZmllZCBgZm9ybWF0c2AgbWVyZ2VkIHdpdGggdGhlIGRlZmF1bHRcbiAgICAgICAgLy8gZm9ybWF0cy5cbiAgICAgICAgdGhpcy5mb3JtYXRzID0gbWVyZ2VDb25maWdzKEludGxNZXNzYWdlRm9ybWF0LmZvcm1hdHMsIG92ZXJyaWRlRm9ybWF0cyk7XG4gICAgICAgIC8vIERlZmluZWQgZmlyc3QgYmVjYXVzZSBpdCdzIHVzZWQgdG8gYnVpbGQgdGhlIGZvcm1hdCBwYXR0ZXJuLlxuICAgICAgICB0aGlzLmxvY2FsZXMgPSBsb2NhbGVzO1xuICAgICAgICB0aGlzLmZvcm1hdHRlcnMgPVxuICAgICAgICAgICAgKG9wdHMgJiYgb3B0cy5mb3JtYXR0ZXJzKSB8fCBjcmVhdGVEZWZhdWx0Rm9ybWF0dGVycyh0aGlzLmZvcm1hdHRlckNhY2hlKTtcbiAgICB9XG4gICAgSW50bE1lc3NhZ2VGb3JtYXQuZGVmYXVsdExvY2FsZSA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCgpLnJlc29sdmVkT3B0aW9ucygpLmxvY2FsZTtcbiAgICBJbnRsTWVzc2FnZUZvcm1hdC5fX3BhcnNlID0gcGFyc2U7XG4gICAgLy8gRGVmYXVsdCBmb3JtYXQgb3B0aW9ucyB1c2VkIGFzIHRoZSBwcm90b3R5cGUgb2YgdGhlIGBmb3JtYXRzYCBwcm92aWRlZCB0byB0aGVcbiAgICAvLyBjb25zdHJ1Y3Rvci4gVGhlc2UgYXJlIHVzZWQgd2hlbiBjb25zdHJ1Y3RpbmcgdGhlIGludGVybmFsIEludGwuTnVtYmVyRm9ybWF0XG4gICAgLy8gYW5kIEludGwuRGF0ZVRpbWVGb3JtYXQgaW5zdGFuY2VzLlxuICAgIEludGxNZXNzYWdlRm9ybWF0LmZvcm1hdHMgPSB7XG4gICAgICAgIG51bWJlcjoge1xuICAgICAgICAgICAgY3VycmVuY3k6IHtcbiAgICAgICAgICAgICAgICBzdHlsZTogJ2N1cnJlbmN5JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwZXJjZW50OiB7XG4gICAgICAgICAgICAgICAgc3R5bGU6ICdwZXJjZW50JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgIHNob3J0OiB7XG4gICAgICAgICAgICAgICAgbW9udGg6ICdudW1lcmljJyxcbiAgICAgICAgICAgICAgICBkYXk6ICdudW1lcmljJyxcbiAgICAgICAgICAgICAgICB5ZWFyOiAnMi1kaWdpdCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWVkaXVtOiB7XG4gICAgICAgICAgICAgICAgbW9udGg6ICdzaG9ydCcsXG4gICAgICAgICAgICAgICAgZGF5OiAnbnVtZXJpYycsXG4gICAgICAgICAgICAgICAgeWVhcjogJ251bWVyaWMnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxvbmc6IHtcbiAgICAgICAgICAgICAgICBtb250aDogJ2xvbmcnLFxuICAgICAgICAgICAgICAgIGRheTogJ251bWVyaWMnLFxuICAgICAgICAgICAgICAgIHllYXI6ICdudW1lcmljJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmdWxsOiB7XG4gICAgICAgICAgICAgICAgd2Vla2RheTogJ2xvbmcnLFxuICAgICAgICAgICAgICAgIG1vbnRoOiAnbG9uZycsXG4gICAgICAgICAgICAgICAgZGF5OiAnbnVtZXJpYycsXG4gICAgICAgICAgICAgICAgeWVhcjogJ251bWVyaWMnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgdGltZToge1xuICAgICAgICAgICAgc2hvcnQ6IHtcbiAgICAgICAgICAgICAgICBob3VyOiAnbnVtZXJpYycsXG4gICAgICAgICAgICAgICAgbWludXRlOiAnbnVtZXJpYycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWVkaXVtOiB7XG4gICAgICAgICAgICAgICAgaG91cjogJ251bWVyaWMnLFxuICAgICAgICAgICAgICAgIG1pbnV0ZTogJ251bWVyaWMnLFxuICAgICAgICAgICAgICAgIHNlY29uZDogJ251bWVyaWMnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxvbmc6IHtcbiAgICAgICAgICAgICAgICBob3VyOiAnbnVtZXJpYycsXG4gICAgICAgICAgICAgICAgbWludXRlOiAnbnVtZXJpYycsXG4gICAgICAgICAgICAgICAgc2Vjb25kOiAnbnVtZXJpYycsXG4gICAgICAgICAgICAgICAgdGltZVpvbmVOYW1lOiAnc2hvcnQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZ1bGw6IHtcbiAgICAgICAgICAgICAgICBob3VyOiAnbnVtZXJpYycsXG4gICAgICAgICAgICAgICAgbWludXRlOiAnbnVtZXJpYycsXG4gICAgICAgICAgICAgICAgc2Vjb25kOiAnbnVtZXJpYycsXG4gICAgICAgICAgICAgICAgdGltZVpvbmVOYW1lOiAnc2hvcnQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIHJldHVybiBJbnRsTWVzc2FnZUZvcm1hdDtcbn0oKSk7XG5leHBvcnQgeyBJbnRsTWVzc2FnZUZvcm1hdCB9O1xuZXhwb3J0IGRlZmF1bHQgSW50bE1lc3NhZ2VGb3JtYXQ7XG4iLCIvKlxuQ29weXJpZ2h0IChjKSAyMDE0LCBZYWhvbyEgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLlxuU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiovXG5pbXBvcnQgSW50bE1lc3NhZ2VGb3JtYXQgZnJvbSAnLi9jb3JlJztcbmV4cG9ydCAqIGZyb20gJy4vZm9ybWF0dGVycyc7XG5leHBvcnQgKiBmcm9tICcuL2NvcmUnO1xuZXhwb3J0IGRlZmF1bHQgSW50bE1lc3NhZ2VGb3JtYXQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgRkMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3NzbWVtIGZyb20gJ2Nzc21lbSc7XG5cbmltcG9ydCB7IFZJRVcgfSBmcm9tICcuLi9CdXR0b24nO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0RvdHNMb2FkZXIuY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICB2aWV3PzogVklFVztcbn1cblxuY29uc3QgRG90c0xvYWRlcjogRkM8UHJvcHM+ID0gKHsgdmlldywgY2xhc3NOYW1lIH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ3dyYXBwZXInKShudWxsLCBjbGFzc05hbWUpfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnZG90JykoeyB2aWV3LCBmaXJzdDogdHJ1ZSB9KX0gLz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnZG90JykoeyB2aWV3LCBzZWNvbmQ6IHRydWUgfSl9IC8+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2RvdCcpKHsgdmlldywgdGhpcmQ6IHRydWUgfSl9IC8+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2RvdCcpKHsgdmlldywgZm91cnRoOiB0cnVlIH0pfSAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRG90c0xvYWRlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IGNzc21lbSBmcm9tICdjc3NtZW0nO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vVGl0bGUuY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgY2hpbGRyZW4/OiBSZWFjdE5vZGU7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgc2l6ZTogc3RyaW5nO1xufVxuXG5jb25zdCBUaXRsZTogUmVhY3QuRkM8UHJvcHM+ID0gKHsgY2hpbGRyZW4sIGNsYXNzTmFtZSwgc2l6ZSB9KSA9PiAoXG4gIDxoMiBjbGFzc05hbWU9e2VtKCd0aXRsZScpKHsgc2l6ZSB9LCBjbGFzc05hbWUpfT57Y2hpbGRyZW59PC9oMj5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IFRpdGxlO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWVcblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuL2lzJztcbi8qKlxuICogR2l2ZW4gYSBjaGlsZCBET00gZWxlbWVudCwgcmV0dXJucyBhIHF1ZXJ5LXNlbGVjdG9yIHN0YXRlbWVudCBkZXNjcmliaW5nIHRoYXRcbiAqIGFuZCBpdHMgYW5jZXN0b3JzXG4gKiBlLmcuIFtIVE1MRWxlbWVudF0gPT4gYm9keSA+IGRpdiA+IGlucHV0I2Zvby5idG5bbmFtZT1iYXpdXG4gKiBAcmV0dXJucyBnZW5lcmF0ZWQgRE9NIHBhdGhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGh0bWxUcmVlQXNTdHJpbmcoZWxlbSkge1xuICAgIC8vIHRyeS9jYXRjaCBib3RoOlxuICAgIC8vIC0gYWNjZXNzaW5nIGV2ZW50LnRhcmdldCAoc2VlIGdldHNlbnRyeS9yYXZlbi1qcyM4MzgsICM3NjgpXG4gICAgLy8gLSBgaHRtbFRyZWVBc1N0cmluZ2AgYmVjYXVzZSBpdCdzIGNvbXBsZXgsIGFuZCBqdXN0IGFjY2Vzc2luZyB0aGUgRE9NIGluY29ycmVjdGx5XG4gICAgLy8gLSBjYW4gdGhyb3cgYW4gZXhjZXB0aW9uIGluIHNvbWUgY2lyY3Vtc3RhbmNlcy5cbiAgICB0cnkge1xuICAgICAgICB2YXIgY3VycmVudEVsZW0gPSBlbGVtO1xuICAgICAgICB2YXIgTUFYX1RSQVZFUlNFX0hFSUdIVCA9IDU7XG4gICAgICAgIHZhciBNQVhfT1VUUFVUX0xFTiA9IDgwO1xuICAgICAgICB2YXIgb3V0ID0gW107XG4gICAgICAgIHZhciBoZWlnaHQgPSAwO1xuICAgICAgICB2YXIgbGVuID0gMDtcbiAgICAgICAgdmFyIHNlcGFyYXRvciA9ICcgPiAnO1xuICAgICAgICB2YXIgc2VwTGVuZ3RoID0gc2VwYXJhdG9yLmxlbmd0aDtcbiAgICAgICAgdmFyIG5leHRTdHIgPSB2b2lkIDA7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wbHVzcGx1c1xuICAgICAgICB3aGlsZSAoY3VycmVudEVsZW0gJiYgaGVpZ2h0KysgPCBNQVhfVFJBVkVSU0VfSEVJR0hUKSB7XG4gICAgICAgICAgICBuZXh0U3RyID0gX2h0bWxFbGVtZW50QXNTdHJpbmcoY3VycmVudEVsZW0pO1xuICAgICAgICAgICAgLy8gYmFpbCBvdXQgaWZcbiAgICAgICAgICAgIC8vIC0gbmV4dFN0ciBpcyB0aGUgJ2h0bWwnIGVsZW1lbnRcbiAgICAgICAgICAgIC8vIC0gdGhlIGxlbmd0aCBvZiB0aGUgc3RyaW5nIHRoYXQgd291bGQgYmUgY3JlYXRlZCBleGNlZWRzIE1BWF9PVVRQVVRfTEVOXG4gICAgICAgICAgICAvLyAgIChpZ25vcmUgdGhpcyBsaW1pdCBpZiB3ZSBhcmUgb24gdGhlIGZpcnN0IGl0ZXJhdGlvbilcbiAgICAgICAgICAgIGlmIChuZXh0U3RyID09PSAnaHRtbCcgfHwgKGhlaWdodCA+IDEgJiYgbGVuICsgb3V0Lmxlbmd0aCAqIHNlcExlbmd0aCArIG5leHRTdHIubGVuZ3RoID49IE1BWF9PVVRQVVRfTEVOKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0LnB1c2gobmV4dFN0cik7XG4gICAgICAgICAgICBsZW4gKz0gbmV4dFN0ci5sZW5ndGg7XG4gICAgICAgICAgICBjdXJyZW50RWxlbSA9IGN1cnJlbnRFbGVtLnBhcmVudE5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dC5yZXZlcnNlKCkuam9pbihzZXBhcmF0b3IpO1xuICAgIH1cbiAgICBjYXRjaCAoX29PKSB7XG4gICAgICAgIHJldHVybiAnPHVua25vd24+JztcbiAgICB9XG59XG4vKipcbiAqIFJldHVybnMgYSBzaW1wbGUsIHF1ZXJ5LXNlbGVjdG9yIHJlcHJlc2VudGF0aW9uIG9mIGEgRE9NIGVsZW1lbnRcbiAqIGUuZy4gW0hUTUxFbGVtZW50XSA9PiBpbnB1dCNmb28uYnRuW25hbWU9YmF6XVxuICogQHJldHVybnMgZ2VuZXJhdGVkIERPTSBwYXRoXG4gKi9cbmZ1bmN0aW9uIF9odG1sRWxlbWVudEFzU3RyaW5nKGVsKSB7XG4gICAgdmFyIGVsZW0gPSBlbDtcbiAgICB2YXIgb3V0ID0gW107XG4gICAgdmFyIGNsYXNzTmFtZTtcbiAgICB2YXIgY2xhc3NlcztcbiAgICB2YXIga2V5O1xuICAgIHZhciBhdHRyO1xuICAgIHZhciBpO1xuICAgIGlmICghZWxlbSB8fCAhZWxlbS50YWdOYW1lKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgb3V0LnB1c2goZWxlbS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpO1xuICAgIGlmIChlbGVtLmlkKSB7XG4gICAgICAgIG91dC5wdXNoKFwiI1wiICsgZWxlbS5pZCk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItY29uc3RcbiAgICBjbGFzc05hbWUgPSBlbGVtLmNsYXNzTmFtZTtcbiAgICBpZiAoY2xhc3NOYW1lICYmIGlzU3RyaW5nKGNsYXNzTmFtZSkpIHtcbiAgICAgICAgY2xhc3NlcyA9IGNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2xhc3Nlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgb3V0LnB1c2goXCIuXCIgKyBjbGFzc2VzW2ldKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgYWxsb3dlZEF0dHJzID0gWyd0eXBlJywgJ25hbWUnLCAndGl0bGUnLCAnYWx0J107XG4gICAgZm9yIChpID0gMDsgaSA8IGFsbG93ZWRBdHRycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBrZXkgPSBhbGxvd2VkQXR0cnNbaV07XG4gICAgICAgIGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShrZXkpO1xuICAgICAgICBpZiAoYXR0cikge1xuICAgICAgICAgICAgb3V0LnB1c2goXCJbXCIgKyBrZXkgKyBcIj1cXFwiXCIgKyBhdHRyICsgXCJcXFwiXVwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0LmpvaW4oJycpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJvd3Nlci5qcy5tYXAiLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiaW1wb3J0IHsgUmVhY3ROb2RlLCBSZWZPYmplY3QgfSBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBlbnVtIFBvc2l0aW9uIHtcbiAgVE9QID0gJ3RvcCcsXG4gIFRPUF9TVEFSVCA9ICd0b3Atc3RhcnQnLFxuICBUT1BfRU5EID0gJ3RvcC1lbmQnLFxuICBSSUdIVCA9ICdyaWdodCcsXG4gIFJJR0hUX1NUQVJUID0gJ3JpZ2h0LXN0YXJ0JyxcbiAgUklHSFRfRU5EID0gJ3JpZ2h0LWVuZCcsXG4gIEJPVFRPTSA9ICdib3R0b20nLFxuICBCT1RUT01fU1RBUlQgPSAnYm90dG9tLXN0YXJ0JyxcbiAgQk9UVE9NX0VORCA9ICdib3R0b20tZW5kJyxcbiAgTEVGVCA9ICdsZWZ0JyxcbiAgTEVGVF9TVEFSVCA9ICdsZWZ0LXN0YXJ0JyxcbiAgTEVGVF9FTkQgPSAnbGVmdC1lbmQnLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9mZnNldCB7XG4gIHRvcDogbnVtYmVyO1xuICBsZWZ0OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSG92ZXJFdmVudHMge1xuICBvbk1vdXNlRW50ZXI6ICgpID0+IHZvaWQ7XG4gIG9uTW91c2VMZWF2ZTogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGb2N1c0V2ZW50cyB7XG4gIG9uRm9jdXM6ICgpID0+IHZvaWQ7XG4gIG9uQmx1cjogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUb29sdGlwZWRQcm9wcyB7XG4gIC8qKiDQmtC+0L3RgtC10L3RgiDQstC90YPRgtGA0Lgg0YLRg9C70YLQuNC/0LAgKi9cbiAgdG9vbHRpcENvbnRlbnQ/OiAoKSA9PiBSZWFjdE5vZGU7XG4gIC8qKiDQn9C+0LfQuNGG0LjRjyDRgtGD0LvRgtC40L/QsCDQvtGC0L3QvtGB0LjRgtC10LvRjNC90L4g0LHQu9C+0LrQsC3QutC+0L3RgtC10LnQvdC10YDQsCAqL1xuICBwb3NpdGlvbjogUG9zaXRpb247XG4gIC8qKiDQodC80LXRidC10L3QuNC1INC/0L7Qt9C40YbQuNC4INGC0YPQu9GC0LjQv9CwINC+0YLQvdC+0YHQuNGC0LXQu9GM0L3QviDQsdC70L7QutCwLdC60L7QvdGC0LXQudC90LXRgNCwICovXG4gIG9mZnNldD86IE9mZnNldDtcbiAgLyoqINCX0LDQs9C+0LvQvtCy0L7QuiDRgtGD0LvRgtC40L/QsC5cbiAgICog0J7RgiDQtdCz0L4g0L3QsNC70LjRh9C40Y8g0LfQsNCy0LjRgdGP0YIg0YDQsNC30LzQtdGA0Ysg0L7RgtGB0YLRg9C/0L7QsiDQsiDRgtGD0LvRgtC40L/QtSAqL1xuICB0aXRsZT86IHN0cmluZyB8IHVuZGVmaW5lZCB8IEpTWC5FbGVtZW50O1xuICAvKipcbiAgICog0KLRg9C70YLQuNC/INGB0LrRgNGL0YIg0L/QviDRg9C80L7Qu9GH0LDQvdC40Y5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGlzT3BlbmVkPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqINCi0YPQu9GC0LjQvyDQuNC80LXQtdGCINC80LDQutGB0LjQvNCw0LvRjNC90YPRjiDRiNC40YDQuNC90YMsXG4gICAqINGA0LDQstC90YPRjiDRiNC40YDQuNC90LUg0LrQvtC90YLQtdC50L3QtdGA0LAt0YLRgNC40LPQs9C10YDQsFxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaXNMaW1pdGVkQnlDb250YWluZXI/OiBib29sZWFuO1xuICAvKipcbiAgICog0KHRgdGL0LvQutCwINC90LAgRE9NLdGN0LvQtdC80LXQvdGCINGA0L7QtNC40YLQtdC70YzRgdC60L7Qs9C+INCx0LvQvtC60LAt0LrQvtC90YLQtdC50L3QtdGA0LBcbiAgICpcbiAgICog0JjRgdC/0L7Qu9GM0LfRg9C10YLRgdGPINC/0YDQuCDQstC60LvRjtGH0LXQvdC90L7QvCDRhNC70LDQs9C1IGlzTGltaXRlZEJ5Q29udGFpbmVyINC00LvRjyDRgtC+0LPQvixcbiAgICog0YfRgtC+0LHRiyDQstGL0YfQuNGB0LvQuNGC0Ywg0YjQuNGA0LjQvdGDINGC0YPQu9GC0LjQv9CwINC+0YLQvdC+0YHQuNGC0LXQu9GM0L3QviDQstC90LXRiNC90LXQs9C+INC60L7QvdGC0LXQudC90LXRgNCwXG4gICAqL1xuICBwYXJlbnRSZWY/OiBSZWZPYmplY3Q8SFRNTEVsZW1lbnQ+O1xuXG4gIC8qKiDQmtC+0LvQu9Cx0LXQuiDQtNC70Y8g0L7RgtC/0YDQsNCy0LrQuCDQsNC90LDQu9C40YLQuNC60Lgg0Lgg0L/QvtC00L7QsdC90YvRhSDQuNCy0LXQvdGC0L7QsiAqL1xuICB0b29sdGlwQ2FsbGJhY2s/OiAoKSA9PiB2b2lkO1xufVxuIiwiaW1wb3J0IHsgUmVmT2JqZWN0IH0gZnJvbSAncmVhY3QnO1xuXG5jb25zdCBnZXRSZWZCb3VuZGluZyA9ICh7XG4gIGN1cnJlbnQsXG59OiBSZWZPYmplY3Q8SFRNTEVsZW1lbnQ+KTogQ2xpZW50UmVjdCB8IG51bGwgPT4ge1xuICBpZiAoIWN1cnJlbnQpIHJldHVybiBudWxsO1xuXG4gIHJldHVybiBjdXJyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0UmVmQm91bmRpbmc7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC1ob29rcy1zc3IvcmVhY3QtaG9va3MtZ2xvYmFsLXNzciAqL1xuaW1wb3J0IHsgUG9zaXRpb24sIE9mZnNldCB9IGZyb20gJy4uL1Rvb2x0aXBlZENvbXBvbmVudC9pbnRlcmZhY2VzJztcbmltcG9ydCB7IENvb3JkaW5hdGVzU3RhdGUsIGFzc2VydE5ldmVyIH0gZnJvbSAnLi9pbmRleCc7XG5cbmNvbnN0IFRPT0xUSVBfQVJST1dfSEVJR0hUID0gMjU7XG5jb25zdCBUT09MVElQX01BUkdJTiA9IDg7XG5leHBvcnQgY29uc3QgVE9PTFRJUF9DQUxDVUxBVEVEX01BUkdJTiA9IFRPT0xUSVBfQVJST1dfSEVJR0hUIC0gVE9PTFRJUF9NQVJHSU47XG5leHBvcnQgY29uc3QgQVJST1dfTUFSR0lOID0gMTU7XG5cbmNvbnN0IGdldFVwZGF0ZWRDb29yZGluYXRlcyA9IChcbiAgbmV3Q29udGFpbmVyUmVjdDogQ2xpZW50UmVjdCxcbiAgdG9vbHRpcFBhcmFtczogQ2xpZW50UmVjdCB8IG51bGwsXG4gIHBvc2l0aW9uOiBQb3NpdGlvbixcbiAgb2Zmc2V0PzogT2Zmc2V0LFxuICBpc09wZW5lZD86IGJvb2xlYW5cbik6IENvb3JkaW5hdGVzU3RhdGUgfCBudWxsID0+IHtcbiAgY29uc3QgdG9vbHRpcENvb3JkaW5hdGVzID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuICBpZiAoIXRvb2x0aXBQYXJhbXMgfHwgIWlzT3BlbmVkIHx8ICFuZXdDb250YWluZXJSZWN0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBsZWZ0Q29yZUxlZnRDb29yZGluYXRlID1cbiAgICBuZXdDb250YWluZXJSZWN0LmxlZnQgLSB0b29sdGlwUGFyYW1zLndpZHRoIC0gVE9PTFRJUF9DQUxDVUxBVEVEX01BUkdJTjtcblxuICBjb25zdCByaWdodENvcmVDb29yZGluYXRlID1cbiAgICBuZXdDb250YWluZXJSZWN0LmxlZnQgKyBuZXdDb250YWluZXJSZWN0LndpZHRoICsgVE9PTFRJUF9DQUxDVUxBVEVEX01BUkdJTjtcblxuICBjb25zdCB0b3BDb3JlQ29vcmRpbmF0ZSA9XG4gICAgbmV3Q29udGFpbmVyUmVjdC50b3AgK1xuICAgIHdpbmRvdy5wYWdlWU9mZnNldCAtXG4gICAgdG9vbHRpcFBhcmFtcy5oZWlnaHQgLVxuICAgIFRPT0xUSVBfQ0FMQ1VMQVRFRF9NQVJHSU47XG5cbiAgY29uc3QgYm90dG9tQ29yZUNvb3JkaW5hdGUgPVxuICAgIG5ld0NvbnRhaW5lclJlY3QudG9wICtcbiAgICB3aW5kb3cucGFnZVlPZmZzZXQgK1xuICAgIG5ld0NvbnRhaW5lclJlY3QuaGVpZ2h0ICtcbiAgICBUT09MVElQX0NBTENVTEFURURfTUFSR0lOO1xuXG4gIGNvbnN0IHNpZGVzVG9wQ29vcmRpbmF0ZU9mRW5kUG9zaXRpb24gPVxuICAgIG5ld0NvbnRhaW5lclJlY3QudG9wICtcbiAgICB3aW5kb3cucGFnZVlPZmZzZXQgLVxuICAgIHRvb2x0aXBQYXJhbXMuaGVpZ2h0ICtcbiAgICBuZXdDb250YWluZXJSZWN0LmhlaWdodCArXG4gICAgQVJST1dfTUFSR0lOO1xuXG4gIGNvbnN0IHNpZGVzVG9wQ29vcmRpbmF0ZU9mQ2VudGVyUG9zaXRpb24gPVxuICAgIG5ld0NvbnRhaW5lclJlY3QudG9wICtcbiAgICB3aW5kb3cucGFnZVlPZmZzZXQgLVxuICAgIHRvb2x0aXBQYXJhbXMuaGVpZ2h0IC8gMiArXG4gICAgbmV3Q29udGFpbmVyUmVjdC5oZWlnaHQgLyAyO1xuXG4gIGNvbnN0IHRvcEFuZEJvdHRvbUNvb3JkaW5hdGVPZkNlbnRlclBvc2l0aW9uID1cbiAgICBuZXdDb250YWluZXJSZWN0LmxlZnQgLVxuICAgIHRvb2x0aXBQYXJhbXMud2lkdGggLyAyICtcbiAgICBuZXdDb250YWluZXJSZWN0LndpZHRoIC8gMjtcblxuICBzd2l0Y2ggKHBvc2l0aW9uKSB7XG4gICAgLy8gVE9QXG4gICAgY2FzZSBQb3NpdGlvbi5UT1BfU1RBUlQ6XG4gICAgICB0b29sdGlwQ29vcmRpbmF0ZXMudG9wID0gdG9wQ29yZUNvb3JkaW5hdGU7XG4gICAgICB0b29sdGlwQ29vcmRpbmF0ZXMubGVmdCA9IG5ld0NvbnRhaW5lclJlY3QubGVmdCAtIEFSUk9XX01BUkdJTjtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBQb3NpdGlvbi5UT1A6XG4gICAgICB0b29sdGlwQ29vcmRpbmF0ZXMudG9wID0gdG9wQ29yZUNvb3JkaW5hdGU7XG4gICAgICB0b29sdGlwQ29vcmRpbmF0ZXMubGVmdCA9IHRvcEFuZEJvdHRvbUNvb3JkaW5hdGVPZkNlbnRlclBvc2l0aW9uO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFBvc2l0aW9uLlRPUF9FTkQ6XG4gICAgICB0b29sdGlwQ29vcmRpbmF0ZXMudG9wID0gdG9wQ29yZUNvb3JkaW5hdGU7XG4gICAgICB0b29sdGlwQ29vcmRpbmF0ZXMubGVmdCA9XG4gICAgICAgIG5ld0NvbnRhaW5lclJlY3QubGVmdCAtXG4gICAgICAgIHRvb2x0aXBQYXJhbXMud2lkdGggK1xuICAgICAgICBuZXdDb250YWluZXJSZWN0LndpZHRoICtcbiAgICAgICAgQVJST1dfTUFSR0lOO1xuICAgICAgYnJlYWs7XG5cbiAgICAvLyBMRUZUXG4gICAgY2FzZSBQb3NpdGlvbi5MRUZUX1NUQVJUOlxuICAgICAgdG9vbHRpcENvb3JkaW5hdGVzLnRvcCA9XG4gICAgICAgIG5ld0NvbnRhaW5lclJlY3QudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0IC0gQVJST1dfTUFSR0lOO1xuICAgICAgdG9vbHRpcENvb3JkaW5hdGVzLmxlZnQgPSBsZWZ0Q29yZUxlZnRDb29yZGluYXRlO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFBvc2l0aW9uLkxFRlQ6XG4gICAgICB0b29sdGlwQ29vcmRpbmF0ZXMudG9wID0gc2lkZXNUb3BDb29yZGluYXRlT2ZDZW50ZXJQb3NpdGlvbjtcbiAgICAgIHRvb2x0aXBDb29yZGluYXRlcy5sZWZ0ID0gbGVmdENvcmVMZWZ0Q29vcmRpbmF0ZTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBQb3NpdGlvbi5MRUZUX0VORDpcbiAgICAgIHRvb2x0aXBDb29yZGluYXRlcy50b3AgPSBzaWRlc1RvcENvb3JkaW5hdGVPZkVuZFBvc2l0aW9uO1xuICAgICAgdG9vbHRpcENvb3JkaW5hdGVzLmxlZnQgPSBsZWZ0Q29yZUxlZnRDb29yZGluYXRlO1xuICAgICAgYnJlYWs7XG5cbiAgICAvLyBCT1RUT01cbiAgICBjYXNlIFBvc2l0aW9uLkJPVFRPTV9TVEFSVDpcbiAgICAgIHRvb2x0aXBDb29yZGluYXRlcy50b3AgPSBib3R0b21Db3JlQ29vcmRpbmF0ZTtcbiAgICAgIHRvb2x0aXBDb29yZGluYXRlcy5sZWZ0ID0gbmV3Q29udGFpbmVyUmVjdC5sZWZ0IC0gQVJST1dfTUFSR0lOO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFBvc2l0aW9uLkJPVFRPTTpcbiAgICAgIHRvb2x0aXBDb29yZGluYXRlcy50b3AgPSBib3R0b21Db3JlQ29vcmRpbmF0ZTtcbiAgICAgIHRvb2x0aXBDb29yZGluYXRlcy5sZWZ0ID0gdG9wQW5kQm90dG9tQ29vcmRpbmF0ZU9mQ2VudGVyUG9zaXRpb247XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgUG9zaXRpb24uQk9UVE9NX0VORDpcbiAgICAgIHRvb2x0aXBDb29yZGluYXRlcy50b3AgPSBib3R0b21Db3JlQ29vcmRpbmF0ZTtcbiAgICAgIHRvb2x0aXBDb29yZGluYXRlcy5sZWZ0ID1cbiAgICAgICAgbmV3Q29udGFpbmVyUmVjdC5sZWZ0IC1cbiAgICAgICAgdG9vbHRpcFBhcmFtcy53aWR0aCArXG4gICAgICAgIG5ld0NvbnRhaW5lclJlY3Qud2lkdGggK1xuICAgICAgICBBUlJPV19NQVJHSU47XG4gICAgICBicmVhaztcblxuICAgIC8vIFJJR0hUXG4gICAgY2FzZSBQb3NpdGlvbi5SSUdIVF9TVEFSVDpcbiAgICAgIHRvb2x0aXBDb29yZGluYXRlcy50b3AgPVxuICAgICAgICBuZXdDb250YWluZXJSZWN0LnRvcCArIHdpbmRvdy5wYWdlWU9mZnNldCAtIEFSUk9XX01BUkdJTjtcbiAgICAgIHRvb2x0aXBDb29yZGluYXRlcy5sZWZ0ID0gcmlnaHRDb3JlQ29vcmRpbmF0ZTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBQb3NpdGlvbi5SSUdIVDpcbiAgICAgIHRvb2x0aXBDb29yZGluYXRlcy50b3AgPSBzaWRlc1RvcENvb3JkaW5hdGVPZkNlbnRlclBvc2l0aW9uO1xuICAgICAgdG9vbHRpcENvb3JkaW5hdGVzLmxlZnQgPSByaWdodENvcmVDb29yZGluYXRlO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFBvc2l0aW9uLlJJR0hUX0VORDpcbiAgICAgIHRvb2x0aXBDb29yZGluYXRlcy50b3AgPSBzaWRlc1RvcENvb3JkaW5hdGVPZkVuZFBvc2l0aW9uO1xuICAgICAgdG9vbHRpcENvb3JkaW5hdGVzLmxlZnQgPSByaWdodENvcmVDb29yZGluYXRlO1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgYXNzZXJ0TmV2ZXIocG9zaXRpb24pO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gIW9mZnNldFxuICAgID8gdG9vbHRpcENvb3JkaW5hdGVzXG4gICAgOiB7XG4gICAgICAgIHRvcDogdG9vbHRpcENvb3JkaW5hdGVzLnRvcCArIG9mZnNldC50b3AsXG4gICAgICAgIGxlZnQ6IHRvb2x0aXBDb29yZGluYXRlcy5sZWZ0ICsgb2Zmc2V0LmxlZnQsXG4gICAgICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0VXBkYXRlZENvb3JkaW5hdGVzO1xuIiwiaW1wb3J0IFJlYWN0LCB7XG4gIHVzZVN0YXRlLFxuICBGQyxcbiAgdXNlRWZmZWN0LFxuICB1c2VSZWYsXG4gIFJlZk9iamVjdCxcbiAgdXNlTGF5b3V0RWZmZWN0LFxufSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcbmltcG9ydCB7IFBvc2l0aW9uLCBPZmZzZXQgfSBmcm9tICcuLi9Ub29sdGlwZWRDb21wb25lbnQvaW50ZXJmYWNlcyc7XG5pbXBvcnQgZ2V0UmVmQm91bmRpbmcgZnJvbSAnLi4vLi4vaGVscGVycy9nZXRSZWZCb3VuZGluZyc7XG5pbXBvcnQgZ2V0VXBkYXRlZENvb3JkaW5hdGVzIGZyb20gJy4vZ2V0VXBkYXRlZENvb3JkaW5hdGVzJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL1Rvb2x0aXBDb250ZW50LmNzcyc7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5jb25zdCBlbVRvb2x0aXAgPSBlbSgndG9vbHRpcCcpO1xuY29uc3QgZW1Ub29sdGlwVW5kZXJsYXkgPSBlbSgndG9vbHRpcFVuZGVybGF5Jyk7XG5jb25zdCBlbVRvb2x0aXBXcmFwcGVyID0gZW0oJ3Rvb2x0aXBXcmFwcGVyJyk7XG5jb25zdCBlbVRvb2x0aXBUaXRsZSA9IGVtKCd0b29sdGlwVGl0bGUnKTtcblxuZXhwb3J0IGNvbnN0IGFzc2VydE5ldmVyID0gKHBvc2l0aW9uOiBuZXZlcik6IG5ldmVyID0+IHtcbiAgdGhyb3cgRXJyb3IoYFVuZXhwZWN0ZWQgcG9zaXRpb24gJHtwb3NpdGlvbn1gKTtcbn07XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIC8qKiDQl9Cw0LPQvtC70L7QstC+0Log0YLRg9C70YLQuNC/0LAuINCe0YIg0LXQs9C+INC90LDQu9C40YfQuNGPINC30LDQstC40YHRj9GCINGA0LDQt9C80LXRgNGLINC+0YLRgdGC0YPQv9C+0LIg0LIg0YLRg9C70YLQuNC/0LUgKi9cbiAgdGl0bGU/OiBzdHJpbmcgfCBKU1guRWxlbWVudDtcbiAgLyoqINCf0L7Qt9C40YbQuNGPINGC0YPQu9GC0LjQv9CwINC+0YLQvdC+0YHQuNGC0LXQu9GM0L3QviDQstGL0LfRi9Cy0LDRjtGJ0LXQs9C+INC10LPQviDRjdC70LXQvNC10L3RgtCwICovXG4gIHBvc2l0aW9uOiBQb3NpdGlvbjtcbiAgLyoqINCh0LzQtdGJ0LXQvdC40LUg0L/QvtC30LjRhtC40Lgg0YLRg9C70YLQuNC/0LAg0L7RgtC90L7RgdC40YLQtdC70YzQvdC+INCx0LvQvtC60LAt0LrQvtC90YLQtdC50L3QtdGA0LAgKi9cbiAgb2Zmc2V0PzogT2Zmc2V0O1xuICAvKiog0KHRgdGL0LvQutCwINC90LAgRE9NLdGN0LvQtdC80LXQvdGCINCx0LvQvtC60LAt0LrQvtC90YLQtdC50L3QtdGA0LAgKi9cbiAgY29udGFpbmVyUmVmOiBSZWZPYmplY3Q8SFRNTEVsZW1lbnQ+O1xuICAvKipcbiAgICog0KHRgdGL0LvQutCwINC90LAgRE9NLdGN0LvQtdC80LXQvdGCINGA0L7QtNC40YLQtdC70YzRgdC60L7Qs9C+INCx0LvQvtC60LAt0LrQvtC90YLQtdC50L3QtdGA0LBcbiAgICpcbiAgICog0JjRgdC/0L7Qu9GM0LfRg9C10YLRgdGPINC/0YDQuCDQstC60LvRjtGH0LXQvdC90L7QvCDRhNC70LDQs9C1IGlzTGltaXRlZEJ5Q29udGFpbmVyINC00LvRjyDRgtC+0LPQvixcbiAgICog0YfRgtC+0LHRiyDQstGL0YfQuNGB0LvQuNGC0Ywg0YjQuNGA0LjQvdGDINGC0YPQu9GC0LjQv9CwINC+0YLQvdC+0YHQuNGC0LXQu9GM0L3QviDQstC90LXRiNC90LXQs9C+INC60L7QvdGC0LXQudC90LXRgNCwXG4gICAqL1xuICBwYXJlbnRSZWY/OiBSZWZPYmplY3Q8SFRNTEVsZW1lbnQ+O1xuICAvKipcbiAgICog0KLRg9C70YLQuNC/INGB0LrRgNGL0YIg0L/QviDRg9C80L7Qu9GH0LDQvdC40Y5cbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGlzT3BlbmVkPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqINCi0YPQu9GC0LjQvyDQuNC80LXQtdGCINC80LDQutGB0LjQvNCw0LvRjNC90YPRjiDRiNC40YDQuNC90YMsXG4gICAqINGA0LDQstC90YPRjiDRiNC40YDQuNC90LUg0LrQvtC90YLQtdC50L3QtdGA0LAt0YLRgNC40LPQs9C10YDQsFxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaXNMaW1pdGVkQnlDb250YWluZXI/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvb3JkaW5hdGVzU3RhdGUge1xuICB0b3A6IG51bWJlcjtcbiAgbGVmdDogbnVtYmVyO1xufVxuXG5jb25zdCBUb29sdGlwQ29udGVudDogRkM8UHJvcHM+ID0gKHtcbiAgaXNPcGVuZWQgPSBmYWxzZSxcbiAgY2hpbGRyZW4sXG4gIHRpdGxlLFxuICBwb3NpdGlvbixcbiAgb2Zmc2V0LFxuICBjb250YWluZXJSZWYsXG4gIHBhcmVudFJlZixcbiAgaXNMaW1pdGVkQnlDb250YWluZXIgPSBmYWxzZSxcbn0pID0+IHtcbiAgY29uc3QgW3Rvb2x0aXBQYXJhbXMsIHNldFRvb2x0aXBQYXJhbXNdID0gdXNlU3RhdGU8Q2xpZW50UmVjdCB8IG51bGw+KG51bGwpO1xuXG4gIGNvbnN0IFtcbiAgICBjb29yZGluYXRlcyxcbiAgICBzZXRUb29sdGlwQ29vcmRpbmF0ZXMsXG4gIF0gPSB1c2VTdGF0ZTxDb29yZGluYXRlc1N0YXRlIHwgbnVsbD4oe1xuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICB9KTtcblxuICBjb25zdCB0b29sdGlwUmVmID0gdXNlUmVmKG51bGwpO1xuXG4gIGNvbnN0IGNvbnRhaW5lclJlY3QgPSBnZXRSZWZCb3VuZGluZyhjb250YWluZXJSZWYpO1xuICBjb25zdCBwYXJlbnRSZWN0ID0gcGFyZW50UmVmICYmIGdldFJlZkJvdW5kaW5nKHBhcmVudFJlZik7XG5cbiAgY29uc3QgdXBkYXRlVG9vbHRpcENvb3JkaW5hdGVzID0gKCkgPT5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgY29uc3QgcmVjdCA9IGdldFJlZkJvdW5kaW5nKGNvbnRhaW5lclJlZik7XG5cbiAgICAgIGlmIChyZWN0KSB7XG4gICAgICAgIHNldFRvb2x0aXBDb29yZGluYXRlcyhcbiAgICAgICAgICBnZXRVcGRhdGVkQ29vcmRpbmF0ZXMocmVjdCwgdG9vbHRpcFBhcmFtcywgcG9zaXRpb24sIG9mZnNldCwgaXNPcGVuZWQpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBzZXRUb29sdGlwUGFyYW1zKGdldFJlZkJvdW5kaW5nKHRvb2x0aXBSZWYpKTtcbiAgfSwgW2NoaWxkcmVuXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICB1cGRhdGVUb29sdGlwQ29vcmRpbmF0ZXMoKTtcblxuICAgIGlmICh3aW5kb3cpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB1cGRhdGVUb29sdGlwQ29vcmRpbmF0ZXMpO1xuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAod2luZG93KSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB1cGRhdGVUb29sdGlwQ29vcmRpbmF0ZXMpO1xuICAgICAgfVxuICAgIH07XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbaXNPcGVuZWQsIHRvb2x0aXBQYXJhbXMsIHBvc2l0aW9uXSk7XG5cbiAgaWYgKCFjb29yZGluYXRlcykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgYXJlQ29vcmRpbmF0ZXNDYWxjdWxhdGVkID1cbiAgICBCb29sZWFuKGNvb3JkaW5hdGVzLnRvcCkgJiYgQm9vbGVhbihjb29yZGluYXRlcy5sZWZ0KTtcblxuICBsZXQgdG9vbHRpcFdpZHRoID1cbiAgICBjb250YWluZXJSZWN0ICYmIGlzTGltaXRlZEJ5Q29udGFpbmVyID8gY29udGFpbmVyUmVjdC53aWR0aCA6IHVuZGVmaW5lZDtcblxuICBpZiAocGFyZW50UmVjdCAmJiBpc0xpbWl0ZWRCeUNvbnRhaW5lcikge1xuICAgIHRvb2x0aXBXaWR0aCA9IHBhcmVudFJlY3Qud2lkdGg7XG4gIH1cblxuICByZXR1cm4gUmVhY3RET00uY3JlYXRlUG9ydGFsKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT17ZW1Ub29sdGlwKHtcbiAgICAgICAgc2hvd246IGFyZUNvb3JkaW5hdGVzQ2FsY3VsYXRlZCxcbiAgICAgIH0pfVxuICAgICAgc3R5bGU9e3tcbiAgICAgICAgLi4uY29vcmRpbmF0ZXMsXG4gICAgICAgIHdpZHRoOiB0b29sdGlwV2lkdGgsXG4gICAgICAgIG1heFdpZHRoOiB0b29sdGlwV2lkdGgsXG4gICAgICB9fVxuICAgICAgcmVmPXt0b29sdGlwUmVmfVxuICAgID5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbVRvb2x0aXBVbmRlcmxheSh7IHBvc2l0aW9uIH0pfSBhcmlhLWhpZGRlbj1cInRydWVcIiAvPlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2VtVG9vbHRpcFdyYXBwZXIoeyB0aXRsZWQ6IEJvb2xlYW4odGl0bGUpIH0pfT5cbiAgICAgICAge3RpdGxlICYmIDxwIGNsYXNzTmFtZT17ZW1Ub29sdGlwVGl0bGUoKX0+e3RpdGxlfTwvcD59XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PixcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3Mtc3NyL3JlYWN0LWhvb2tzLWdsb2JhbC1zc3JcbiAgICBkb2N1bWVudC5ib2R5XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBUb29sdGlwQ29udGVudDtcbiIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCBGQywgdXNlUmVmLCBSZWFjdE5vZGUsIFJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUb29sdGlwQ29udGVudCBmcm9tICcuLi9Ub29sdGlwQ29udGVudCc7XG5pbXBvcnQge1xuICBQb3NpdGlvbixcbiAgSG92ZXJFdmVudHMsXG4gIEZvY3VzRXZlbnRzLFxuICBUb29sdGlwZWRQcm9wcyxcbn0gZnJvbSAnLi9pbnRlcmZhY2VzJztcblxuZXhwb3J0IHsgUG9zaXRpb24gfTtcblxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgVG9vbHRpcGVkUHJvcHMge1xuICBnZXRFdmVudHM6IChcbiAgICBvcGVuVG9vbHRpcDogKCkgPT4gdm9pZCxcbiAgICBjbG9zZVRvb2x0aXA6ICgpID0+IHZvaWRcbiAgKSA9PiBIb3ZlckV2ZW50cyB8IEZvY3VzRXZlbnRzO1xufVxuXG5jb25zdCBUb29sdGlwZWRDb21wb25lbnQ6IEZDPFxuICB8IChQcm9wcyAmIHtcbiAgICAgIGNoaWxkcmVuKFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICBjb250YWluZXJQcm9wczogSG92ZXJFdmVudHMgfCAoRm9jdXNFdmVudHMgJiB7IHJlZjogUmVmPGFueT4gfSlcbiAgICAgICk6IFJlYWN0Tm9kZTtcbiAgICB9KVxuICB8IFByb3BzXG4+ID0gKHtcbiAgY2hpbGRyZW4sXG4gIHRvb2x0aXBDb250ZW50LFxuICBpc09wZW5lZDogaXNPcGVuZWRCeURlZmF1bHQgPSBmYWxzZSxcbiAgdGl0bGUsXG4gIHBvc2l0aW9uLFxuICBvZmZzZXQsXG4gIGdldEV2ZW50cyxcbiAgcGFyZW50UmVmLFxuICBpc0xpbWl0ZWRCeUNvbnRhaW5lciA9IGZhbHNlLFxuICB0b29sdGlwQ2FsbGJhY2ssXG59KSA9PiB7XG4gIGNvbnN0IFtpc09wZW5lZCwgc2V0SXNPcGVuZWRdID0gdXNlU3RhdGU8Ym9vbGVhbj4oaXNPcGVuZWRCeURlZmF1bHQpO1xuICBjb25zdCBjb250YWluZXJSZWYgPSB1c2VSZWYobnVsbCk7XG5cbiAgY29uc3Qgb3BlblRvb2x0aXAgPSAoKSA9PiB7XG4gICAgaWYgKHRvb2x0aXBDYWxsYmFjaykge1xuICAgICAgdG9vbHRpcENhbGxiYWNrKCk7XG4gICAgfVxuICAgIHNldElzT3BlbmVkKHRydWUpO1xuICB9O1xuICBjb25zdCBjbG9zZVRvb2x0aXAgPSAoKSA9PiBzZXRJc09wZW5lZChmYWxzZSk7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAge3Rvb2x0aXBDb250ZW50ICYmIGlzT3BlbmVkICYmIChcbiAgICAgICAgPFRvb2x0aXBDb250ZW50XG4gICAgICAgICAgaXNPcGVuZWQ9e2lzT3BlbmVkfVxuICAgICAgICAgIHBvc2l0aW9uPXtwb3NpdGlvbn1cbiAgICAgICAgICBvZmZzZXQ9e29mZnNldH1cbiAgICAgICAgICB0aXRsZT17dGl0bGV9XG4gICAgICAgICAgY29udGFpbmVyUmVmPXtjb250YWluZXJSZWZ9XG4gICAgICAgICAgcGFyZW50UmVmPXtwYXJlbnRSZWZ9XG4gICAgICAgICAgaXNMaW1pdGVkQnlDb250YWluZXI9e2lzTGltaXRlZEJ5Q29udGFpbmVyfVxuICAgICAgICA+XG4gICAgICAgICAge3Rvb2x0aXBDb250ZW50KCl9XG4gICAgICAgIDwvVG9vbHRpcENvbnRlbnQ+XG4gICAgICApfVxuXG4gICAgICB7dHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gKFxuICAgICAgICBjaGlsZHJlbih7XG4gICAgICAgICAgLi4uZ2V0RXZlbnRzKG9wZW5Ub29sdGlwLCBjbG9zZVRvb2x0aXApLFxuICAgICAgICAgIHJlZjogY29udGFpbmVyUmVmLFxuICAgICAgICB9KVxuICAgICAgKSA6IChcbiAgICAgICAgPGRpdiB7Li4uZ2V0RXZlbnRzKG9wZW5Ub29sdGlwLCBjbG9zZVRvb2x0aXApfSByZWY9e2NvbnRhaW5lclJlZn0+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBUb29sdGlwZWRDb21wb25lbnQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgRkMsIFJlYWN0Tm9kZSwgUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRvb2x0aXBlZENvbXBvbmVudCBmcm9tICcuL1Rvb2x0aXBlZENvbXBvbmVudCc7XG5pbXBvcnQge1xuICBUb29sdGlwZWRQcm9wcyxcbiAgSG92ZXJFdmVudHMsXG4gIFBvc2l0aW9uLFxufSBmcm9tICcuL1Rvb2x0aXBlZENvbXBvbmVudC9pbnRlcmZhY2VzJztcblxuZXhwb3J0IHsgUG9zaXRpb24gfTtcblxuZnVuY3Rpb24gZ2V0SG92ZXJFdmVudHMoXG4gIG9wZW5Ub29sdGlwOiAoKSA9PiB2b2lkLFxuICBjbG9zZVRvb2x0aXA6ICgpID0+IHZvaWRcbik6IEhvdmVyRXZlbnRzIHtcbiAgcmV0dXJuIHtcbiAgICBvbk1vdXNlRW50ZXI6IG9wZW5Ub29sdGlwLFxuICAgIG9uTW91c2VMZWF2ZTogY2xvc2VUb29sdGlwLFxuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbnRhaW5lclByb3BzIGV4dGVuZHMgSG92ZXJFdmVudHMge1xuICByZWY6IFJlZjxhbnk+O1xufVxuXG5jb25zdCBUb29sdGlwZWQ6IEZDPFxuICB8IChUb29sdGlwZWRQcm9wcyAmIHtcbiAgICAgIGNoaWxkcmVuKGNvbnRhaW5lclByb3BzOiBDb250YWluZXJQcm9wcyk6IFJlYWN0Tm9kZTtcbiAgICB9KVxuICB8IFRvb2x0aXBlZFByb3BzXG4+ID0gKHByb3BzKSA9PiB7XG4gIHJldHVybiA8VG9vbHRpcGVkQ29tcG9uZW50IGdldEV2ZW50cz17Z2V0SG92ZXJFdmVudHN9IHsuLi5wcm9wc30gLz47XG59O1xuXG5leHBvcnQgZGVmYXVsdCBUb29sdGlwZWQ7XG4iLCIvKiog0KTRg9C90LrRhtC40Y8g0LTQu9GPINCx0LvQvtC60LjRgNC+0LLQutC4INGB0LrRgNC+0LvQu9CwINC90LAg0YHRgtGA0LDQvdC40YbQtS4gICovXG5leHBvcnQgY29uc3QgdG9nZ2xlUGFnZVNjcm9sbCA9IChzaG91bGRMb2NrV2luZG93OiBib29sZWFuKTogdm9pZCA9PiB7XG4gIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSBzaG91bGRMb2NrV2luZG93ID8gJ2hpZGRlbicgOiAndmlzaWJsZSc7XG59O1xuIiwiLyogZXNsaW50LWVudiBicm93c2VyICovXG5pbXBvcnQgUmVhY3QsIHsgRkMsIFJlYWN0RWxlbWVudCwgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdE1vZGFsIGZyb20gJ3JlYWN0LW1vZGFsJztcbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcbmltcG9ydCB7IHRvZ2dsZVBhZ2VTY3JvbGwgfSBmcm9tICcuLi9oZWxwZXJzL3RvZ2dsZVBhZ2VTY3JvbGwnO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vTW9kYWwuY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgLyog0JrQvtC80L/QvtC90LXQvdGCLdGC0YDQuNCz0LPQtdGALCDQstGL0LfRi9Cy0LDRjtGJ0LjQuSDQvNC+0LTQsNC70YzQvdC+0LUg0L7QutC90L4gKi9cbiAgdHJpZ2dlckVsZW1lbnQ/OiAob25DbGljazogKCkgPT4gdm9pZCkgPT4gUmVhY3RFbGVtZW50O1xuICAvKipcbiAgICog0J7RgtC60YDRi9GC0L4g0LzQvtC00LDQu9GM0L3QvtC1INC+0LrQvdC+INC40LvQuCDQvdC10YIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBpc09wZW5lZD86IGJvb2xlYW47XG4gIC8qINCa0L7QvNC/0L7QvdC10L3Rgi3QutC+0L3RgtC10L3Rgiwg0YDQsNC30LzQtdGJ0LDQtdC80YvQuSDQstC90YPRgtGA0Lgg0LzQvtC00LDQu9GM0L3QvtCz0L4g0L7QutC90LAgKi9cbiAgY2hpbGRyZW46IChjbG9zZTogKCkgPT4gdm9pZCkgPT4gUmVhY3RFbGVtZW50O1xuICAvKipcbiAgICog0JzQvtC00LDQu9GM0L3QvtC1INC+0LrQvdC+INC00LvRjyDQv9C+0LrQsNC30LAg0L/RgNC10LTRg9C/0YDQtdC20LTQtdC90LjRjyDQuNC70Lgg0L7RiNC40LHQutC4LFxuICAgKiDQutC+0YLQvtGA0L7QtSDQstGB0LXQs9C00LAg0L7RgtC60YDRi9GC0L4g0Lgg0LXQs9C+INC90LXQu9GM0LfRjyDQt9Cw0LrRgNGL0YLRjFxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaXNBbGVydD86IGJvb2xlYW47XG4gIG9uQ2xvc2U/OiAoKSA9PiB2b2lkO1xuICBwb3B1cD86IGJvb2xlYW47XG59XG5cbmNvbnN0IE1vZGFsOiBGQzxQcm9wcz4gPSAoe1xuICB0cmlnZ2VyRWxlbWVudCxcbiAgY2hpbGRyZW4sXG4gIGlzT3BlbmVkID0gZmFsc2UsXG4gIGlzQWxlcnQgPSBmYWxzZSxcbiAgb25DbG9zZSxcbiAgcG9wdXAsXG59KSA9PiB7XG4gIGNvbnN0IFtpc09wZW4sIHNldE9wZW5dID0gdXNlU3RhdGU8Ym9vbGVhbj4oaXNPcGVuZWQpO1xuXG4gIGNvbnN0IG9wZW4gPSAoKSA9PiB7XG4gICAgc2V0T3Blbih0cnVlKTtcbiAgICB0b2dnbGVQYWdlU2Nyb2xsKHRydWUpO1xuICB9O1xuXG4gIGNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIHNldE9wZW4oZmFsc2UpO1xuICAgIHRvZ2dsZVBhZ2VTY3JvbGwoZmFsc2UpO1xuICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICBvbkNsb3NlKCk7XG4gICAgfVxuICB9O1xuXG4gIGxldCBvdmVybGF5RWxlbWVudDogSFRNTEVsZW1lbnQ7XG5cbiAgY29uc3QgY2xvc2VPbkVzYyA9ICh7IGtleSB9OiB7IGtleTogc3RyaW5nIH0pID0+IHtcbiAgICBpZiAoa2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgY2xvc2UoKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgY2xvc2VPbkNsaWNrT3V0c2lkZSA9ICh7IHRhcmdldCB9OiBFdmVudCkgPT4ge1xuICAgIGNvbnN0IGNsaWNrZWRPdXRzaWRlID0gdGFyZ2V0ID09PSBvdmVybGF5RWxlbWVudDtcbiAgICBpZiAoY2xpY2tlZE91dHNpZGUpIHtcbiAgICAgIGNsb3NlKCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IG9uQWZ0ZXJPcGVuID0gKCkgPT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy1zc3IvcmVhY3QtaG9va3MtZ2xvYmFsLXNzclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBjbG9zZU9uRXNjKTtcbiAgICBvdmVybGF5RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsb3NlT25DbGlja091dHNpZGUpO1xuICB9O1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmIChvdmVybGF5RWxlbWVudCkge1xuICAgICAgICBvdmVybGF5RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGNsb3NlT25DbGlja091dHNpZGUpO1xuICAgICAgfVxuXG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgY2xvc2VPbkVzYyk7XG4gICAgfTtcbiAgfSk7XG5cbiAgaWYgKGlzQWxlcnQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFJlYWN0TW9kYWxcbiAgICAgICAgaXNPcGVuXG4gICAgICAgIGFyaWFIaWRlQXBwPXtmYWxzZX1cbiAgICAgICAgY2xhc3NOYW1lPXtlbSgncm9vdCcpKCl9XG4gICAgICAgIG92ZXJsYXlDbGFzc05hbWU9e2VtKCdvdmVybGF5JykoeyBwb3B1cCB9KX1cbiAgICAgID5cbiAgICAgICAge2NoaWxkcmVuKCgpID0+IHVuZGVmaW5lZCl9XG4gICAgICA8L1JlYWN0TW9kYWw+XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHt0cmlnZ2VyRWxlbWVudCAmJiB0cmlnZ2VyRWxlbWVudChvcGVuKX1cbiAgICAgIDxSZWFjdE1vZGFsXG4gICAgICAgIGlzT3Blbj17aXNPcGVufVxuICAgICAgICBhcmlhSGlkZUFwcD17ZmFsc2V9XG4gICAgICAgIGNsYXNzTmFtZT17ZW0oJ3Jvb3QnKSgpfVxuICAgICAgICBvdmVybGF5Q2xhc3NOYW1lPXtlbSgnb3ZlcmxheScpKHsgcG9wdXAgfSl9XG4gICAgICAgIHNob3VsZENsb3NlT25PdmVybGF5Q2xpY2tcbiAgICAgICAgb25BZnRlck9wZW49e29uQWZ0ZXJPcGVufVxuICAgICAgICBvdmVybGF5UmVmPXsobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgICBvdmVybGF5RWxlbWVudCA9IG5vZGU7XG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIHtjaGlsZHJlbihjbG9zZSl9XG4gICAgICA8L1JlYWN0TW9kYWw+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBNb2RhbDtcbiIsImltcG9ydCBSZWFjdCwgeyBGQywgUmVhY3ROb2RlLCBDU1NQcm9wZXJ0aWVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNzc21lbSBmcm9tICdjc3NtZW0nO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vQ2FyZC5jc3MnO1xuXG5jb25zdCBlbSA9IGNzc21lbShzdHlsZXMpO1xuXG5leHBvcnQgZW51bSBQYWRkaW5nIHtcbiAgWFMgPSAneHMnLFxuICBTID0gJ3MnLFxuICBNID0gJ20nLFxufVxuXG5leHBvcnQgZW51bSBTaGFkb3dTaXplIHtcbiAgUyA9ICdzJyxcbiAgTSA9ICdtJyxcbiAgTCA9ICdsJyxcbn1cblxudHlwZSBQcm9wcyA9IHtcbiAgLyoqIFDQsNC30LzQtdGAINCy0L3Rg9GC0YDQtdC90L3QuNGFINC+0YLRgdGC0YPQv9C+0LIgKi9cbiAgcGFkZGluZz86IFBhZGRpbmc7XG4gIC8qKiDQoNCw0LfQvNC10YAg0YLQtdC90Lgg0L/QvtC0INC60LDRgNGC0L7Rh9C60L7QuSAqL1xuICBzaGFkb3dTaXplPzogU2hhZG93U2l6ZTtcbiAgY2hpbGRyZW46IFJlYWN0Tm9kZTtcbiAgc3R5bGU/OiBDU1NQcm9wZXJ0aWVzO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG59O1xuXG5jb25zdCBDYXJkOiBGQzxQcm9wcz4gPSAoeyBwYWRkaW5nLCBzaGFkb3dTaXplLCBjbGFzc05hbWUsIC4uLnByb3BzIH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICB7Li4ucHJvcHN9XG4gICAgICBjbGFzc05hbWU9e2VtKCdjYXJkJykoeyBwYWRkaW5nLCBzaGFkb3dTaXplIH0sIGNsYXNzTmFtZSl9XG4gICAgLz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENhcmQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgRkMsIFJlYWN0Tm9kZSwgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcblxuaW1wb3J0IFRvb2x0aXBlZCwgeyBQb3NpdGlvbiB9IGZyb20gJy4uL1Rvb2x0aXBlZCc7XG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vTW9kYWwnO1xuaW1wb3J0IENhcmQsIHsgUGFkZGluZyB9IGZyb20gJy4uL0NhcmQnO1xuXG5pbXBvcnQgQ2xvc2VJY29uIGZyb20gJy4uL0ljb24vQ3Jvc3MnO1xuXG5pbXBvcnQgeyBpc01vYmlsZSB9IGZyb20gJy4uL2hlbHBlcnMvYWRhcHRpdmUnO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vSGludC5jc3MnO1xuXG5jb25zdCBlbSA9IGNzc21lbShzdHlsZXMpO1xuXG5leHBvcnQgeyBQb3NpdGlvbiB9O1xuXG5leHBvcnQgZW51bSBWYXJpYW50IHtcbiAgUkVHVUxBUiA9ICdyZWd1bGFyJyxcbiAgTUlOSSA9ICdtaW5pJyxcbn1cblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgdG9vbHRpcENvbnRlbnQ6ICgpID0+IFJlYWN0Tm9kZTtcbiAgcG9zaXRpb246IFBvc2l0aW9uO1xuICB0aXRsZT86IHN0cmluZyB8IEpTWC5FbGVtZW50O1xuICB2YXJpYW50PzogVmFyaWFudDtcbiAgb2Zmc2V0PzogeyB0b3A6IG51bWJlcjsgbGVmdDogbnVtYmVyIH07XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgdG9vbHRpcENhbGxiYWNrPzogKCkgPT4gdm9pZDtcbn1cblxuY29uc3QgSGludDogRkM8UHJvcHM+ID0gKHtcbiAgdmFyaWFudCA9IFZhcmlhbnQuUkVHVUxBUixcbiAgY2xhc3NOYW1lLFxuICAuLi5wcm9wc1xufSkgPT4ge1xuICBjb25zdCBbaXNNb2JpbGVSZXN1bHQsIHNldElzTW9iaWxlUmVzdWx0XSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldElzTW9iaWxlUmVzdWx0KGlzTW9iaWxlKCkpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgeyB0aXRsZSwgdG9vbHRpcENvbnRlbnQgfSA9IHByb3BzO1xuXG4gIGNvbnN0IGRlc2t0b3BIaW50ID0gKFxuICAgIDxUb29sdGlwZWQgey4uLnByb3BzfT5cbiAgICAgIHsodG9vbHRpcFByb3BzKSA9PiAoXG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICB7Li4udG9vbHRpcFByb3BzfVxuICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ2hpbnQnKSh7IHZhcmlhbnQgfSwgY2xhc3NOYW1lKX1cbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICB0YWJJbmRleD17LTF9XG4gICAgICAgID5cbiAgICAgICAgICA/XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgKX1cbiAgICA8L1Rvb2x0aXBlZD5cbiAgKTtcblxuICBjb25zdCBtb2JpbGVIaW50ID0gKFxuICAgIDxNb2RhbFxuICAgICAgdHJpZ2dlckVsZW1lbnQ9eyhvbkNsaWNrKSA9PiAoXG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ2hpbnQnKSh7IHZhcmlhbnQgfSwgY2xhc3NOYW1lKX1cbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICB0YWJJbmRleD17LTF9XG4gICAgICAgID5cbiAgICAgICAgICA/XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgKX1cbiAgICA+XG4gICAgICB7KGNsb3NlKSA9PiAoXG4gICAgICAgIDxDYXJkIHBhZGRpbmc9e1BhZGRpbmcuTX0+XG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgb25DbGljaz17Y2xvc2V9XG4gICAgICAgICAgICBjbGFzc05hbWU9e2VtKCdtb2JpbGVDbG9zZUJ1dHRvbicpKCl9XG4gICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8Q2xvc2VJY29uIHdpZHRoPVwiMjJcIiBoZWlnaHQ9XCIyMlwiIGZpbGw9XCJ3aGl0ZVwiIC8+XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAge3RpdGxlICYmIDxwIGNsYXNzTmFtZT17ZW0oJ2hpbnRUaXRsZScpKCl9Pnt0aXRsZX08L3A+fVxuICAgICAgICAgIHt0b29sdGlwQ29udGVudCgpfVxuICAgICAgICA8L0NhcmQ+XG4gICAgICApfVxuICAgIDwvTW9kYWw+XG4gICk7XG5cbiAgcmV0dXJuIGlzTW9iaWxlUmVzdWx0ID8gbW9iaWxlSGludCA6IGRlc2t0b3BIaW50O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSGludDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3NzbWVtIGZyb20gJ2Nzc21lbSc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9CdXR0b25SYWRpby5jc3MnO1xuXG5jb25zdCBlbSA9IGNzc21lbShzdHlsZXMpO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBpZD86IHN0cmluZztcbiAgdmFsdWU6IHN0cmluZyB8IG51bWJlcjtcbiAgdGV4dDogc3RyaW5nO1xuICBuYW1lPzogc3RyaW5nO1xuICBjaGVja2VkPzogYm9vbGVhbjtcbiAgb25DaGFuZ2U/OiAoZXZlbnQ6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB2b2lkO1xuICBvbkJsdXI/OiAoZXZlbnQ6IFJlYWN0LkZvY3VzRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHZvaWQ7XG4gIG9uQ2xpY2s/OiAoZXZlbnQ6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTExhYmVsRWxlbWVudCwgTW91c2VFdmVudD4pID0+IHZvaWQ7XG4gIG9uTW91c2VFbnRlcj86IChcbiAgICBldmVudDogUmVhY3QuTW91c2VFdmVudDxIVE1MTGFiZWxFbGVtZW50LCBNb3VzZUV2ZW50PlxuICApID0+IHZvaWQ7XG4gIHdpZGU/OiBib29sZWFuO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbn1cblxuY29uc3QgQnV0dG9uUmFkaW8gPSAoe1xuICBpZCxcbiAgdmFsdWUsXG4gIHRleHQsXG4gIG5hbWUsXG4gIGNoZWNrZWQsXG4gIG9uQ2hhbmdlLFxuICBvbkJsdXIsXG4gIG9uQ2xpY2ssXG4gIG9uTW91c2VFbnRlcixcbiAgd2lkZSxcbiAgY2xhc3NOYW1lLFxuICBkaXNhYmxlZCxcbn06IFByb3BzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGxhYmVsXG4gICAgICBjbGFzc05hbWU9e2VtKCdsYWJlbCcpKHsgd2lkZSB9LCBjbGFzc05hbWUpfVxuICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgIG9uTW91c2VFbnRlcj17b25Nb3VzZUVudGVyfVxuICAgID5cbiAgICAgIDxpbnB1dFxuICAgICAgICBpZD17aWR9XG4gICAgICAgIGNsYXNzTmFtZT17ZW0oJ2NvbnRyb2wnKSgpfVxuICAgICAgICB0eXBlPVwicmFkaW9cIlxuICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgIGNoZWNrZWQ9e2NoZWNrZWR9XG4gICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgb25CbHVyPXtvbkJsdXJ9XG4gICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgIC8+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2J1dHRvbicpKHsgY2hlY2tlZCwgd2lkZSwgZGlzYWJsZWQgfSl9Pnt0ZXh0fTwvZGl2PlxuICAgIDwvbGFiZWw+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBCdXR0b25SYWRpbztcbiIsImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcbmltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0Ryb3Bkb3duLmNzcyc7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmNvbnN0IHRyYW5zaXRpb25DbGFzc01hcCA9IHtcbiAgZW50ZXJlZDogZW0oJ2VudGVyZWQnKSgpLFxuICBleGl0aW5nOiBlbSgnZXhpdGluZycpKCksXG4gIGV4aXRlZDogZW0oJ2V4aXRlZCcpKCksXG59O1xuXG5jb25zdCBBTklNQVRJT05fVElNRU9VVCA9IHtcbiAgZW50ZXI6IDAsXG4gIGV4aXQ6IDI0MCxcbn07XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGNoaWxkcmVuOiBSZWFjdE5vZGU7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgaXNGdWxsV2lkdGg/OiBib29sZWFuO1xuICBpc1Zpc2libGU/OiBib29sZWFuO1xufVxuXG5jb25zdCBEcm9wZG93bjogUmVhY3QuRkM8UHJvcHM+ID0gKHtcbiAgY2hpbGRyZW4sXG4gIGNsYXNzTmFtZSA9ICcnLFxuICBpc0Z1bGxXaWR0aCA9IGZhbHNlLFxuICBpc1Zpc2libGUgPSB0cnVlLFxufSkgPT4gKFxuICA8ZGl2PlxuICAgIDxUcmFuc2l0aW9uIGluPXtpc1Zpc2libGV9IHRpbWVvdXQ9e0FOSU1BVElPTl9USU1FT1VUfSB1bm1vdW50T25FeGl0PlxuICAgICAgeyhzdGF0ZToga2V5b2YgdHlwZW9mIHRyYW5zaXRpb25DbGFzc01hcCkgPT4gKFxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPXtlbSgnZHJvcGRvd24nKSh7IGZ1bGxXaWR0aDogaXNGdWxsV2lkdGggfSwgW1xuICAgICAgICAgICAgdHJhbnNpdGlvbkNsYXNzTWFwW3N0YXRlXSxcbiAgICAgICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgICBdKX1cbiAgICAgICAgPlxuICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgIDwvVHJhbnNpdGlvbj5cbiAgPC9kaXY+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBEcm9wZG93bjtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IEljb24gYXMgSWNvblR5cGUgfSBmcm9tICdAaW50ZXJmYWNlcy9pbnRlcmZhY2VzJztcblxuY29uc3QgSWNvbkdlYXI6IFJlYWN0LkZDPEljb25UeXBlPiA9ICh7XG4gIGNsYXNzTmFtZSxcbiAgZmlsbCA9ICcjODY4Njg2JyxcbiAgaGVpZ2h0ID0gMTgsXG4gIHdpZHRoID0gMTgsXG59KSA9PiAoXG4gIDxzdmdcbiAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICBmaWxsPXtmaWxsfVxuICAgIGhlaWdodD17aGVpZ2h0fVxuICAgIHZpZXdCb3g9XCIwIDAgMjAgMjFcIlxuICAgIHdpZHRoPXt3aWR0aH1cbiAgPlxuICAgIDxwYXRoXG4gICAgICBmaWxsUnVsZT1cIm5vbnplcm9cIlxuICAgICAgZD1cIk03LjEyOCAxOC45NzhhOS40NDcgOS40NDcgMCAwIDEtMS40NDctLjYuNjcyLjY3MiAwIDAgMS0uMzUzLS42M2wuMDYxLTEuMTc5YS42NTEuNjUxIDAgMCAwLS4yNS0uNTQgNy45MzUgNy45MzUgMCAwIDEtMS4xNjgtMS4xNjguNjUuNjUgMCAwIDAtLjU0LS4yNDlsLTEuMTc5LjA1OWEuNjY5LjY2OSAwIDAgMS0uNjMtLjM1MSA5LjQ0NyA5LjQ0NyAwIDAgMS0uNi0xLjQ0Ny42NzMuNjczIDAgMCAxIC4xOTYtLjY5OGwxLjEyNS0xLjAxNkE3LjY5IDcuNjkgMCAwIDEgMi4yNTcgMTBjMC0uMzkzLjAyOC0uNzgxLjA4Ni0xLjE1OEwxLjIxOCA3LjgyNWEuNjcyLjY3MiAwIDAgMS0uMTk2LS42OThjLjE2LS41MDIuMzYyLS45ODQuNi0xLjQ0NmEuNjcuNjcgMCAwIDEgLjYzLS4zNTJsMS4xNzkuMDU5YS42NDYuNjQ2IDAgMCAwIC41NC0uMjQ5Yy4zNDctLjQyOC43MzktLjgyMSAxLjE2OS0xLjE2OGEuNjU0LjY1NCAwIDAgMCAuMjUtLjU0bC0uMDYyLTEuMThhLjY3Mi42NzIgMCAwIDEgLjM1My0uNjNjLjQ2MS0uMjM3Ljk0NS0uNDQgMS40NDctLjZhLjY3NS42NzUgMCAwIDEgLjY5Ni4xOTZMOC44NCAyLjM0MmE3Ljg3IDcuODcgMCAwIDEgMi4zMiAwbDEuMDE1LTEuMTI1YS42NzYuNjc2IDAgMCAxIC42OTctLjE5NmMuNTAzLjE2Ljk4Ny4zNjMgMS40NDcuNmEuNjcuNjcgMCAwIDEgLjM1Mi42M2wtLjA2IDEuMThhLjY1LjY1IDAgMCAwIC4yNDkuNTRjLjQzLjM0Ny44MjIuNzQgMS4xNjkgMS4xNjguMTMyLjE2NS4zMy4yNi41NC4yNDlsMS4xOC0uMDZjLjI2LS4wMTMuNTEuMTIyLjYyOS4zNTMuMjM4LjQ2Mi40NC45NDQuNiAxLjQ0NmEuNjc1LjY3NSAwIDAgMS0uMTk2LjY5OEwxNy42NTggOC44NGE3Ljg1NCA3Ljg1NCAwIDAgMSAwIDIuMzE4bDEuMTI0IDEuMDE2Yy4xOTMuMTc1LjI3NS40NS4xOTcuNjk4YTkuNDUyIDkuNDUyIDAgMCAxLS42MDEgMS40NDcuNjY2LjY2NiAwIDAgMS0uNjMuMzVsLTEuMTgtLjA1OGEuNjUuNjUgMCAwIDAtLjU0LjI0OWMtLjM0Ni40MjgtLjczOS44MjEtMS4xNjggMS4xNjlhLjY0Ny42NDcgMCAwIDAtLjI0OS41NGwuMDYgMS4xNzhhLjY3LjY3IDAgMCAxLS4zNTIuNjNjLS40Ni4yMzgtLjk0NC40NC0xLjQ0Ny42YS42NzMuNjczIDAgMCAxLS42OTctLjE5NmwtMS4wMTUtMS4xMjRhNy44NjYgNy44NjYgMCAwIDEtMi4zMiAwbC0xLjAxNiAxLjEyNGEuNjczLjY3MyAwIDAgMS0uNjk2LjE5Nk0xMCAxMy4wOGEzLjA4IDMuMDggMCAxIDAtLjAwMi02LjE2QTMuMDggMy4wOCAwIDAgMCAxMCAxMy4wOFwiXG4gICAgLz5cbiAgPC9zdmc+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBJY29uR2VhcjtcbiIsImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgY3NzbWVtIGZyb20gJ2Nzc21lbSc7XG5cbmltcG9ydCBCdXR0b25JY29uIGZyb20gJ0Bjb21wb25lbnRzL0J1dHRvbkljb24vQnV0dG9uSWNvbic7XG5pbXBvcnQgRHJvcGRvd24gZnJvbSAnQGNvbXBvbmVudHMvRHJvcGRvd24vRHJvcGRvd24nO1xuaW1wb3J0IEljb25Dcm9zcyBmcm9tICdAY29tcG9uZW50cy9JY29uL0ljb25Dcm9zcyc7XG5pbXBvcnQgSWNvbkdlYXIgZnJvbSAnQGNvbXBvbmVudHMvSWNvbi9JY29uR2Vhcic7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9Db250ZXh0TWVudS5jc3MnO1xuXG5jb25zdCBlbSA9IGNzc21lbShzdHlsZXMpO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBjaGlsZHJlbjogSlNYLkVsZW1lbnRbXTtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBpY29uPzogUmVhY3ROb2RlO1xuICBpc1Zpc2libGU/OiBib29sZWFuO1xuICBvbkNoYW5nZT8oaXNWaXNpYmxlOiBib29sZWFuKTogdm9pZDtcbiAgdGl0bGU/OiBzdHJpbmc7XG59XG5cbmNvbnN0IENvbnRleHRNZW51OiBSZWFjdC5GQzxQcm9wcz4gPSAoe1xuICBjaGlsZHJlbixcbiAgY2xhc3NOYW1lLFxuICBpY29uID0gPEljb25HZWFyIC8+LFxuICBpc1Zpc2libGUgPSBmYWxzZSxcbiAgb25DaGFuZ2UsXG4gIHRpdGxlLFxufSkgPT4ge1xuICBjb25zdCBoYW5kbGVUcmlnZ2VyQ2xpY2sgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZSh0cnVlKTtcbiAgICB9XG4gIH0sIFtvbkNoYW5nZV0pO1xuXG4gIGNvbnN0IGhhbmRsZUJ1dHRvbkNsb3NlQ2xpY2sgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZShmYWxzZSk7XG4gICAgfVxuICB9LCBbb25DaGFuZ2VdKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnY29udGV4dE1lbnUnKShudWxsLCBjbGFzc05hbWUpfT5cbiAgICAgIDxCdXR0b25JY29uXG4gICAgICAgIGNsYXNzTmFtZT17ZW0oJ2RvdHNDb250YWluZXInKSgpfVxuICAgICAgICBvbkNsaWNrPXtoYW5kbGVUcmlnZ2VyQ2xpY2t9XG4gICAgICA+XG4gICAgICAgIHtpY29ufVxuICAgICAgPC9CdXR0b25JY29uPlxuICAgICAgPERyb3Bkb3duIGNsYXNzTmFtZT17ZW0oJ2Ryb3Bkb3duJykoKX0gaXNWaXNpYmxlPXtpc1Zpc2libGV9PlxuICAgICAgICA8cCBjbGFzc05hbWU9e2VtKCd0aXRsZScpKCl9Pnt0aXRsZX08L3A+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnb3B0aW9uQ29udGFpbmVyJykoKX0+XG4gICAgICAgICAge1JlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgKGNoaWxkOiBKU1guRWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRQcm9wcyA9IHtcbiAgICAgICAgICAgICAgLi4uY2hpbGQucHJvcHMsXG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogZW0oJ29wdGlvbkl0ZW0nKShudWxsLCBjaGlsZC5wcm9wcy5jbGFzc05hbWUpLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgY2hpbGRQcm9wcyk7XG4gICAgICAgICAgfSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8QnV0dG9uSWNvblxuICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ2Nsb3NlQnV0dG9uJykoKX1cbiAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVCdXR0b25DbG9zZUNsaWNrfVxuICAgICAgICA+XG4gICAgICAgICAgPEljb25Dcm9zcyAvPlxuICAgICAgICA8L0J1dHRvbkljb24+XG4gICAgICA8L0Ryb3Bkb3duPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUmVhY3QubWVtbyhDb250ZXh0TWVudSk7XG4iLCJpbXBvcnQgeyB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IGJyb3dzZXIgfSBmcm9tICd3ZWJleHRlbnNpb24tcG9seWZpbGwtdHMnO1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IFtpc0xvYWRpbmcsIHNldExvYWRpbmdTdGF0ZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtzdGF0dXMsIHNldFN0YXR1c10gPSB1c2VTdGF0ZShudWxsKTtcblxuICBjb25zdCBoYW5kbGVCYWNrZ3JvdW5kUmVxdWVzdCA9IHVzZUNhbGxiYWNrKGFzeW5jICh7IGNvbW1hbmQsIC4uLnJlc3QgfSkgPT4ge1xuICAgIHNldEVycm9yKG51bGwpO1xuICAgIHNldExvYWRpbmdTdGF0ZSh0cnVlKTtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYnJvd3Nlci5ydW50aW1lLnNlbmRNZXNzYWdlKHtcbiAgICAgIGNvbW1hbmQsXG4gICAgICAuLi5yZXN0LFxuICAgIH0pO1xuXG4gICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gJ2Vycm9yJyAmJiByZXNwb25zZS5lcnJvcikge1xuICAgICAgc2V0RXJyb3IocmVzcG9uc2UuZXJyb3IpO1xuICAgIH1cblxuICAgIHNldExvYWRpbmdTdGF0ZShmYWxzZSk7XG4gICAgc2V0U3RhdHVzKHJlc3BvbnNlLnN0YXR1cyk7XG4gIH0sIFtdKTtcblxuICByZXR1cm4ge1xuICAgIGVycm9yLFxuICAgIGhhbmRsZUJhY2tncm91bmRSZXF1ZXN0LFxuICAgIGlzTG9hZGluZyxcbiAgICBzdGF0dXMsXG4gIH07XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0IHN0b3JlIGZyb20gJy4uL3N0b3JlJztcbmltcG9ydCB7IFNJWkUgfSBmcm9tICcuLi9yZWR1Y2Vycy90aGVtZSc7XG5cbmNvbnN0IGdldFRoZW1lID0gKGtleTogc3RyaW5nKSA9PiBzdG9yZS5nZXRTdGF0ZSgpLnRoZW1lW2tleV07XG5jb25zdCBnZXRTaXplID0gKGtleTogU0laRSkgPT4gc3RvcmUuZ2V0U3RhdGUoKS50aGVtZS5zaXplc1trZXldO1xuXG5leHBvcnQgZGVmYXVsdCBnZXRUaGVtZTtcbmV4cG9ydCB7IGdldFNpemUgfTtcbiIsImltcG9ydCB7IGdldFNpemUgfSBmcm9tICcuL3RoZW1lJztcbmltcG9ydCB7IFNJWkUgfSBmcm9tICcuLi9yZWR1Y2Vycy90aGVtZSc7XG5cbi8qIEpTIGhlbHBlcnMgKi9cbmNvbnN0IGlzTW9iaWxlID0gKCkgPT4ge1xuICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoIDw9IGdldFNpemUoU0laRS5NT0JJTEUpO1xufTtcblxuY29uc3QgaXNUYWJsZXQgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoID4gZ2V0U2l6ZShTSVpFLk1PQklMRSkgJiZcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggPD0gZ2V0U2l6ZShTSVpFLlRBQkxFVClcbiAgKTtcbn07XG5cbmNvbnN0IGlzRGVza3RvcCA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggPiBnZXRTaXplKFNJWkUuVEFCTEVUKSAmJlxuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCA8PSBnZXRTaXplKFNJWkUuREVTS1RPUClcbiAgKTtcbn07XG5cbmNvbnN0IGlzRGVza3RvcFdpZGUgPSAoKSA9PiB7XG4gIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggPiBnZXRTaXplKFNJWkUuREVTS1RPUCk7XG59O1xuXG5jb25zdCBpc1RhYmxldFVwID0gKCkgPT4ge1xuICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoID4gZ2V0U2l6ZShTSVpFLk1PQklMRSk7XG59O1xuXG5jb25zdCBpc0Rlc2t0b3BVcCA9ICgpID0+IHtcbiAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCA+IGdldFNpemUoU0laRS5UQUJMRVQpO1xufTtcblxuZXhwb3J0IHtcbiAgaXNNb2JpbGUsXG4gIGlzVGFibGV0LFxuICBpc0Rlc2t0b3AsXG4gIGlzRGVza3RvcFdpZGUsXG4gIGlzVGFibGV0VXAsXG4gIGlzRGVza3RvcFVwLFxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jYW5Vc2VET00gPSB1bmRlZmluZWQ7XG5cbnZhciBfZXhlbnYgPSByZXF1aXJlKFwiZXhlbnZcIik7XG5cbnZhciBfZXhlbnYyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlbnYpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgRUUgPSBfZXhlbnYyLmRlZmF1bHQ7XG5cbnZhciBTYWZlSFRNTEVsZW1lbnQgPSBFRS5jYW5Vc2VET00gPyB3aW5kb3cuSFRNTEVsZW1lbnQgOiB7fTtcblxudmFyIGNhblVzZURPTSA9IGV4cG9ydHMuY2FuVXNlRE9NID0gRUUuY2FuVXNlRE9NO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBTYWZlSFRNTEVsZW1lbnQ7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IGNzc21lbSBmcm9tICdjc3NtZW0nO1xuaW1wb3J0IHsgYnJvd3NlciB9IGZyb20gJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbC10cyc7XG5cbmltcG9ydCB7IGZpbGVzIH0gZnJvbSAnQGNvbnN0YW50cy9maWxlcyc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9Mb2dvLmNzcyc7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgaGVpZ2h0PzogbnVtYmVyO1xuICBzaXplPzogc3RyaW5nO1xuICB3aWR0aD86IHN0cmluZztcbn1cblxuY29uc3QgTG9nbzogUmVhY3QuRkM8UHJvcHM+ID0gKHsgY2xhc3NOYW1lLCBoZWlnaHQsIHNpemUgPSAnbScsIHdpZHRoIH0pID0+IChcbiAgPGRpdiBjbGFzc05hbWU9e2VtKCdsb2dvJykoeyBzaXplIH0sIGNsYXNzTmFtZSl9PlxuICAgIDxpbWdcbiAgICAgIGFsdD1cIlwiXG4gICAgICBjbGFzc05hbWU9e2VtKCdpbm5lcicpKCl9XG4gICAgICBoZWlnaHQ9e2hlaWdodH1cbiAgICAgIHNyYz17YnJvd3Nlci5ydW50aW1lLmdldFVSTChmaWxlcy5pbWFnZXMuTE9HTyl9XG4gICAgICB3aWR0aD17d2lkdGh9XG4gICAgLz5cbiAgPC9kaXY+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBMb2dvO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgSWNvbiBhcyBJY29uVHlwZSB9IGZyb20gJ0BpbnRlcmZhY2VzL2ludGVyZmFjZXMnO1xuXG5jb25zdCBJY29uQ2hlY2s6IFJlYWN0LkZDPEljb25UeXBlPiA9ICh7XG4gIGNsYXNzTmFtZSxcbiAgaGVpZ2h0ID0gMTYsXG4gIHdpZHRoID0gMTYsXG59KSA9PiAoXG4gIDxzdmcgY2xhc3NOYW1lPXtjbGFzc05hbWV9IGhlaWdodD17aGVpZ2h0fSB2aWV3Qm94PVwiMCAwIDE2IDE2XCIgd2lkdGg9e3dpZHRofT5cbiAgICA8cGF0aFxuICAgICAgZmlsbD1cImN1cnJlbnRDb2xvclwiXG4gICAgICBkPVwibTEzLjcwMjc1IDQuMzAwNzVjLS40MDEtLjQwMS0xLjA1OS0uNDAxLTEuNDYgMGwtNS45ODkgNS45ODgtMi40OTgtMi40OThjLS4zOTMtLjM5My0xLjAzNy0uMzkzLTEuNDMxIDBsLS4wMy4wM2MtLjM5My4zOTMtLjM5MyAxLjAzOCAwIDEuNDMxbDMuMjQ0IDMuMjQzYy4zOTMuMzk0IDEuMDM4LjM5NCAxLjQzMSAwbC4wMTUtLjAxNC4wMTQtLjAxNSA2LjcwNC02LjcwNGMuNDAyLS40MDEuNDAyLTEuMDU5IDAtMS40NjFcIlxuICAgIC8+XG4gIDwvc3ZnPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgSWNvbkNoZWNrO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgSWNvbiBhcyBJY29uVHlwZSB9IGZyb20gJ0BpbnRlcmZhY2VzL2ludGVyZmFjZXMnO1xuXG5jb25zdCBJY29uRmxhZ0VuOiBSZWFjdC5GQzxJY29uVHlwZT4gPSAoe1xuICBjbGFzc05hbWUsXG4gIGhlaWdodCA9IDIwLFxuICB3aWR0aCA9IDIwLFxufSkgPT4gKFxuICA8c3ZnXG4gICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgZmlsbD1cIm5vbmVcIlxuICAgIGhlaWdodD17aGVpZ2h0fVxuICAgIHZpZXdCb3g9XCIwIDAgMjAgMjBcIlxuICAgIHdpZHRoPXt3aWR0aH1cbiAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgPlxuICAgIDxyZWN0IG9wYWNpdHk9XCIwLjRcIiB3aWR0aD1cIjIwXCIgaGVpZ2h0PVwiMjBcIiByeD1cIjNcIiBmaWxsPVwid2hpdGVcIiAvPlxuICAgIDxtYXNrXG4gICAgICBpZD1cIm1hc2swXCJcbiAgICAgIG1hc2stdHlwZT1cImFscGhhXCJcbiAgICAgIG1hc2tVbml0cz1cInVzZXJTcGFjZU9uVXNlXCJcbiAgICAgIHg9XCIwXCJcbiAgICAgIHk9XCIwXCJcbiAgICAgIHdpZHRoPVwiMjBcIlxuICAgICAgaGVpZ2h0PVwiMjBcIlxuICAgID5cbiAgICAgIDxyZWN0IHdpZHRoPVwiMjBcIiBoZWlnaHQ9XCIyMFwiIHJ4PVwiM1wiIGZpbGw9XCJ3aGl0ZVwiIC8+XG4gICAgPC9tYXNrPlxuICAgIDxnIG1hc2s9XCJ1cmwoI21hc2swKVwiPlxuICAgICAgPHBhdGhcbiAgICAgICAgZD1cIk0yMy4yMjUzIDBILTIuNzE1MDFDLTMuOTc3MDEgMCAtNSAxLjAyMjk5IC01IDIuMjg0OTlWMTcuNzA0NUMtNSAxOC45NjY1IC0zLjk3NzAxIDE5Ljk4OTUgLTIuNzE1MDEgMTkuOTg5NUgyMy4yMjUzQzI0LjQ4NzIgMTkuOTg5NSAyNS41MTAyIDE4Ljk2NjUgMjUuNTEwMiAxNy43MDQ1VjIuMjg0OTlDMjUuNTEwMiAxLjAyMjk5IDI0LjQ4NzMgMCAyMy4yMjUzIDBaXCJcbiAgICAgICAgZmlsbD1cIiMzNzQxQ0ZcIlxuICAgICAgLz5cbiAgICAgIDxwYXRoXG4gICAgICAgIGQ9XCJNMjUuNDc4NiAxLjkwNzMxQzI1LjI5ODUgMC44MjUyMDcgMjQuMzU4NSAwIDIzLjIyNTMgMEgyMi42MzA3TDEyLjg4NTMgNi4zODQ5MlY1Ljk1OTAzZS0wNUg3LjYyNDkyVjYuMzg0OThMLTIuMTIwNDggNS45NTkwM2UtMDVILTIuNzE1MDFDLTMuODQ4MjQgNS45NTkwM2UtMDUgLTQuNzg4MjggMC44MjUyMDcgLTQuOTY4MzYgMS45MDczN0wzLjM2MTA2IDcuMzY0NjVILTVWMTIuNjI1SDMuMzYxMDZMLTQuOTY4MzYgMTguMDgyMkMtNC43ODgyOCAxOS4xNjQzIC0zLjg0ODI0IDE5Ljk4OTUgLTIuNzE1MDEgMTkuOTg5NUgtMi4xMjA0OEw3LjYyNDkyIDEzLjYwNDZWMTkuOTg5NUgxMi44ODUzVjEzLjYwNDZMMjIuNjMwNyAxOS45ODk1SDIzLjIyNTNDMjQuMzU4NSAxOS45ODk1IDI1LjI5ODUgMTkuMTY0NCAyNS40Nzg2IDE4LjA4MjJMMTcuMTQ5MiAxMi42MjQ5SDI1LjUxMDJWNy4zNjQ1M0gxNy4xNDkyTDI1LjQ3ODYgMS45MDczMVpcIlxuICAgICAgICBmaWxsPVwiI0Y1RjVGNVwiXG4gICAgICAvPlxuICAgICAgPHBhdGhcbiAgICAgICAgZD1cIk0xMS44MzMzIDBIOC42NzY5OVY4LjQxNjZILTVWMTEuNTcyOUg4LjY3Njk5VjE5Ljk4OTVIMTEuODMzM1YxMS41NzI5SDI1LjUxMDJWOC40MTY2SDExLjgzMzNWMFpcIlxuICAgICAgICBmaWxsPVwiI0U2MDAwRFwiXG4gICAgICAvPlxuICAgICAgPHBhdGhcbiAgICAgICAgY2xpcFJ1bGU9XCJldmVub2RkXCJcbiAgICAgICAgZD1cIk0yNC45NTAxIDAuNzg3Mjg4TDE0LjgxNzYgNy4zNjQ1N0gxMi44ODUzTDI0LjAxNDYgMC4xNDAxMzdDMjQuMzc1OSAwLjI3MzY3IDI0LjY5NzcgMC40OTYyNjUgMjQuOTUwMSAwLjc4NzI4OFpNLTQuNzU4NzkgMS4yNjMyTDQuNjQwMzkgNy4zNjQ0N0g2LjU3Mjc5TC00LjA3NzkxIDAuNDUwODA2Qy00LjM2NTE4IDAuNjY0NzQgLTQuNTk4MzYgMC45NDI5NjQgLTQuNzU4NzkgMS4yNjMyWk03LjU5NTc0IDEyLjYyNDlMLTMuNTIyOCAxOS44NDIxQy0zLjg4MTg3IDE5LjcwNjEgLTQuMjAwOTIgMTkuNDgxOCAtNC40NTA1NiAxOS4xOTAxTDUuNjYzMzUgMTIuNjI0OUg3LjU5NTc0Wk0xMy43MDg2IDEyLjYyNDlIMTUuNjQxTDI1LjIwOTcgMTguODM2QzI1LjAzMDQgMTkuMTQ5NyAyNC43Nzk1IDE5LjQxNjcgMjQuNDc3NSAxOS42MTUxTDEzLjcwODYgMTIuNjI0OVpcIlxuICAgICAgICBmaWxsPVwiI0U2MDAwRFwiXG4gICAgICAgIGZpbGxSdWxlPVwiZXZlbm9kZFwiXG4gICAgICAvPlxuICAgIDwvZz5cbiAgPC9zdmc+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBJY29uRmxhZ0VuO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgSWNvbiBhcyBJY29uVHlwZSB9IGZyb20gJ0BpbnRlcmZhY2VzL2ludGVyZmFjZXMnO1xuXG5jb25zdCBJY29uRmxhZ1J1c3NpYTogUmVhY3QuRkM8SWNvblR5cGU+ID0gKHtcbiAgY2xhc3NOYW1lLFxuICBoZWlnaHQgPSAyMCxcbiAgd2lkdGggPSAyMCxcbn0pID0+IChcbiAgPHN2Z1xuICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgIGZpbGw9XCJub25lXCJcbiAgICBoZWlnaHQ9e2hlaWdodH1cbiAgICB2aWV3Qm94PVwiMCAwIDIwIDIwXCJcbiAgICB3aWR0aD17d2lkdGh9XG4gICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gID5cbiAgICA8cmVjdCB3aWR0aD1cIjIwXCIgaGVpZ2h0PVwiMjBcIiByeD1cIjNcIiBmaWxsPVwiI0U1RTVFNVwiIC8+XG4gICAgPG1hc2tcbiAgICAgIGlkPVwibWFzazBcIlxuICAgICAgbWFzay10eXBlPVwiYWxwaGFcIlxuICAgICAgbWFza1VuaXRzPVwidXNlclNwYWNlT25Vc2VcIlxuICAgICAgeD1cIjBcIlxuICAgICAgeT1cIjBcIlxuICAgICAgd2lkdGg9XCIyMFwiXG4gICAgICBoZWlnaHQ9XCIyMFwiXG4gICAgPlxuICAgICAgPHJlY3Qgd2lkdGg9XCIyMFwiIGhlaWdodD1cIjIwXCIgcng9XCIzXCIgZmlsbD1cIndoaXRlXCIgLz5cbiAgICA8L21hc2s+XG4gICAgPGcgbWFzaz1cInVybCgjbWFzazApXCI+XG4gICAgICA8cmVjdFxuICAgICAgICB4PVwiMS4yNVwiXG4gICAgICAgIHk9XCIxLjExMDg0XCJcbiAgICAgICAgd2lkdGg9XCIxNy41XCJcbiAgICAgICAgaGVpZ2h0PVwiNy43Nzc3OFwiXG4gICAgICAgIHJ4PVwiMlwiXG4gICAgICAgIGZpbGw9XCJ3aGl0ZVwiXG4gICAgICAvPlxuICAgICAgPHJlY3QgeT1cIjYuNTI3MzRcIiB3aWR0aD1cIjIwXCIgaGVpZ2h0PVwiNi42NjY2N1wiIGZpbGw9XCIjNDA4NkU0XCIgLz5cbiAgICAgIDxyZWN0IHk9XCIxMy4xOTQzXCIgd2lkdGg9XCIyMFwiIGhlaWdodD1cIjYuNjY2NjdcIiBmaWxsPVwiI0UwNDI0MlwiIC8+XG4gICAgPC9nPlxuICA8L3N2Zz5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IEljb25GbGFnUnVzc2lhO1xuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSwgdXNlQ2FsbGJhY2ssIHVzZUNvbnRleHQsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgY3NzbWVtIGZyb20gJ2Nzc21lbSc7XG5pbXBvcnQgeyB1c2VJbnRsIH0gZnJvbSAncmVhY3QtaW50bCc7XG5cbmltcG9ydCB7IExhbmd1YWdlLCBMYW5ndWFnZUxhYmVsIH0gZnJvbSAnQGNvbnN0YW50cy9sYW5ndWFnZXMnO1xuaW1wb3J0IHsgU3RvcmFnZSB9IGZyb20gJ0Bjb25zdGFudHMvc3RvcmFnZSc7XG5cbmltcG9ydCBDb250ZXh0TWVudSBmcm9tICdAY29tcG9uZW50cy9Db250ZXh0TWVudS9Db250ZXh0TWVudSc7XG5pbXBvcnQgSWNvbkNoZWNrIGZyb20gJ0Bjb21wb25lbnRzL0ljb24vSWNvbkNoZWNrJztcbmltcG9ydCBJY29uRmxhZ0VuIGZyb20gJ0Bjb21wb25lbnRzL0ljb24vSWNvbkZsYWdFbic7XG5pbXBvcnQgSWNvbkZsYWdSdXNzaWEgZnJvbSAnQGNvbXBvbmVudHMvSWNvbi9JY29uRmxhZ1J1c3NpYSc7XG5cbmltcG9ydCBMYW5ndWFnZUNvbnRleHQgZnJvbSAnQGhlbHBlcnMvTGFuZ3VhZ2VDb250ZXh0JztcbmltcG9ydCB7IHNhdmVUb1N0b3JhZ2UgfSBmcm9tICdAaGVscGVycy9zdG9yYWdlJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICdAaGVscGVycy91dGlscyc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9MYW5ndWFnZVN3aXRjaGVyLmNzcyc7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmNvbnN0IEZsYWc6IFBhcnRpYWw8UmVjb3JkPExhbmd1YWdlLCBSZWFjdE5vZGU+PiA9IHtcbiAgW0xhbmd1YWdlLkVOXTogPEljb25GbGFnRW4gLz4sXG4gIFtMYW5ndWFnZS5SVV06IDxJY29uRmxhZ1J1c3NpYSAvPixcbn07XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIG9uQ2hhbmdlPyhsYW5nOiBMYW5ndWFnZSk6IHZvaWQ7XG59XG5cbmNvbnN0IExhbmd1YWdlU3dpdGNoZXI6IFJlYWN0LkZDPFByb3BzPiA9ICh7IG9uQ2hhbmdlID0gbm9vcCB9KSA9PiB7XG4gIGNvbnN0IGludGwgPSB1c2VJbnRsKCk7XG5cbiAgY29uc3QgW2lzQ29udGV4dE1lbnVWaXNpYmxlLCBzZXRDb250ZXh0TWVudVZpc2libGVTdGF0ZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3QgeyBsYW5ndWFnZSwgc2V0TGFuZ3VhZ2UgfSA9IHVzZUNvbnRleHQoTGFuZ3VhZ2VDb250ZXh0KTtcblxuICBjb25zdCBoYW5kbGVMYW5ndWFnZUNsaWNrID0gdXNlQ2FsbGJhY2soXG4gICAgYXN5bmMgKGV2dCkgPT4ge1xuICAgICAgY29uc3QgbGFuZzogTGFuZ3VhZ2UgPSBldnQuY3VycmVudFRhcmdldC5kYXRhc2V0Lmxhbmd1YWdlO1xuICAgICAgYXdhaXQgc2F2ZVRvU3RvcmFnZShTdG9yYWdlLkxBTkdVQUdFLCBsYW5nKTtcbiAgICAgIG9uQ2hhbmdlKGxhbmcpO1xuICAgICAgc2V0TGFuZ3VhZ2UobGFuZyk7XG4gICAgfSxcbiAgICBbb25DaGFuZ2UsIHNldExhbmd1YWdlXVxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPENvbnRleHRNZW51XG4gICAgICBpY29uPXtGbGFnW2xhbmd1YWdlXX1cbiAgICAgIGlzVmlzaWJsZT17aXNDb250ZXh0TWVudVZpc2libGV9XG4gICAgICBvbkNoYW5nZT17c2V0Q29udGV4dE1lbnVWaXNpYmxlU3RhdGV9XG4gICAgICB0aXRsZT17aW50bC5mb3JtYXRNZXNzYWdlKHsgaWQ6ICdsYW5ndWFnZS50aXRsZScgfSl9XG4gICAgPlxuICAgICAge09iamVjdC5lbnRyaWVzKExhbmd1YWdlTGFiZWwpLm1hcCgoW2xhbmcsIGxhYmVsXSkgPT4gKFxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgY2xhc3NOYW1lPXtlbSgnYnV0dG9uJykoKX1cbiAgICAgICAgICBkYXRhLWxhbmd1YWdlPXtsYW5nfVxuICAgICAgICAgIGtleT17bGFuZ31cbiAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVMYW5ndWFnZUNsaWNrfVxuICAgICAgICA+XG4gICAgICAgICAge0ZsYWdbbGFuZyBhcyBMYW5ndWFnZV19XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtlbSgnbGFiZWwnKSgpfT57bGFiZWx9PC9zcGFuPlxuICAgICAgICAgIHtsYW5nID09PSBsYW5ndWFnZSAmJiA8SWNvbkNoZWNrIC8+fVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICkpfVxuICAgIDwvQ29udGV4dE1lbnU+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMYW5ndWFnZVN3aXRjaGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfTW9kYWwgPSByZXF1aXJlKFwiLi9jb21wb25lbnRzL01vZGFsXCIpO1xuXG52YXIgX01vZGFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX01vZGFsKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX01vZGFsMi5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJpbXBvcnQgeyBNZXNzYWdlcyB9IGZyb20gJ0BpbnRlcmZhY2VzL2ludGVyZmFjZXMnO1xuXG5pbXBvcnQgeyBMYW5ndWFnZSB9IGZyb20gJ0Bjb25zdGFudHMvbGFuZ3VhZ2VzJztcblxuY29uc3QgbWVzc2FnZXM6IE1lc3NhZ2VzID0ge1xuICBbTGFuZ3VhZ2UuRU5dOiB7XG4gICAgbGFuZzogTGFuZ3VhZ2UuRU4sXG4gICAgbWVzc2FnZXM6IHtcbiAgICAgICdsYW5ndWFnZS50aXRsZSc6ICdDaG9vc2UgbGFuZ3VhZ2UnLFxuICAgIH0sXG4gIH0sXG4gIFtMYW5ndWFnZS5SVV06IHtcbiAgICBsYW5nOiBMYW5ndWFnZS5SVSxcbiAgICBtZXNzYWdlczoge1xuICAgICAgJ2xhbmd1YWdlLnRpdGxlJzogJ9CS0YvQsdC10YDQuNGC0LUg0Y/Qt9GL0LonLFxuICAgIH0sXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBtZXNzYWdlcztcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gc2hhbGxvd0VxdWFsT2JqZWN0cyhvYmpBLCBvYmpCKSB7XG4gIGlmIChvYmpBID09PSBvYmpCKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoIW9iakEgfHwgIW9iakIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgYUtleXMgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGJLZXlzID0gT2JqZWN0LmtleXMob2JqQik7XG4gIHZhciBsZW4gPSBhS2V5cy5sZW5ndGg7XG5cbiAgaWYgKGJLZXlzLmxlbmd0aCAhPT0gbGVuKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBrZXkgPSBhS2V5c1tpXTtcblxuICAgIGlmIChvYmpBW2tleV0gIT09IG9iakJba2V5XSB8fCAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iakIsIGtleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaGFsbG93RXF1YWxPYmplY3RzO1xuIiwiZnVuY3Rpb24gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKGV4dHJhQXJndW1lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaCxcbiAgICAgICAgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlO1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmFBcmd1bWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufVxuXG52YXIgdGh1bmsgPSBjcmVhdGVUaHVua01pZGRsZXdhcmUoKTtcbnRodW5rLndpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuXG5leHBvcnQgZGVmYXVsdCB0aHVuazsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBJY29uRkMgfSBmcm9tICcuJztcblxuY29uc3QgQ3Jvc3M6IEljb25GQyA9ICh7XG4gIGZpbGwgPSAnY3VycmVudENvbG9yJyxcbiAgd2lkdGggPSAxOCxcbiAgaGVpZ2h0ID0gMTgsXG4gIC4uLnJlc3Rcbn0pID0+IChcbiAgPHN2ZyB3aWR0aD17d2lkdGh9IGhlaWdodD17aGVpZ2h0fSB2aWV3Qm94PVwiMCAwIDIwIDIwXCIgey4uLnJlc3R9PlxuICAgIDxwYXRoXG4gICAgICBmaWxsPXtmaWxsfVxuICAgICAgZmlsbFJ1bGU9XCJub256ZXJvXCJcbiAgICAgIGQ9XCJNMTEuNiAxMGw1LjEtNS4yYTEuMSAxLjEgMCAwMC0xLjUtMS42TDEwIDguNCA0LjggMy4yYTEuMSAxLjEgMCAwMC0xLjYgMCAxLjEgMS4xIDAgMDAwIDEuNkw4LjQgMTBsLTUuMiA1LjJhMS4xIDEuMSAwIDAwMCAxLjYgMS4xIDEuMSAwIDAwMS42IDBsNS4yLTUuMiA1LjIgNS4yYTEuMSAxLjEgMCAwMDEuNS0xLjZMMTEuNiAxMHpcIlxuICAgIC8+XG4gIDwvc3ZnPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgQ3Jvc3M7XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH1cbn07XG5cbmRlZmF1bHRzLmhlYWRlcnMgPSB7XG4gIGNvbW1vbjoge1xuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgYnVpbGRGdWxsUGF0aCA9IHJlcXVpcmUoJy4uL2NvcmUvYnVpbGRGdWxsUGF0aCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkID8gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGNvbmZpZy5hdXRoLnBhc3N3b3JkKSkgOiAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgdmFyIGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZVxuICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgdmFyIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcih0aW1lb3V0RXJyb3JNZXNzYWdlLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghcmVxdWVzdERhdGEpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICB2YXIgdmFsdWVGcm9tQ29uZmlnMktleXMgPSBbJ3VybCcsICdtZXRob2QnLCAnZGF0YSddO1xuICB2YXIgbWVyZ2VEZWVwUHJvcGVydGllc0tleXMgPSBbJ2hlYWRlcnMnLCAnYXV0aCcsICdwcm94eScsICdwYXJhbXMnXTtcbiAgdmFyIGRlZmF1bHRUb0NvbmZpZzJLZXlzID0gW1xuICAgICdiYXNlVVJMJywgJ3RyYW5zZm9ybVJlcXVlc3QnLCAndHJhbnNmb3JtUmVzcG9uc2UnLCAncGFyYW1zU2VyaWFsaXplcicsXG4gICAgJ3RpbWVvdXQnLCAndGltZW91dE1lc3NhZ2UnLCAnd2l0aENyZWRlbnRpYWxzJywgJ2FkYXB0ZXInLCAncmVzcG9uc2VUeXBlJywgJ3hzcmZDb29raWVOYW1lJyxcbiAgICAneHNyZkhlYWRlck5hbWUnLCAnb25VcGxvYWRQcm9ncmVzcycsICdvbkRvd25sb2FkUHJvZ3Jlc3MnLCAnZGVjb21wcmVzcycsXG4gICAgJ21heENvbnRlbnRMZW5ndGgnLCAnbWF4Qm9keUxlbmd0aCcsICdtYXhSZWRpcmVjdHMnLCAndHJhbnNwb3J0JywgJ2h0dHBBZ2VudCcsXG4gICAgJ2h0dHBzQWdlbnQnLCAnY2FuY2VsVG9rZW4nLCAnc29ja2V0UGF0aCcsICdyZXNwb25zZUVuY29kaW5nJ1xuICBdO1xuICB2YXIgZGlyZWN0TWVyZ2VLZXlzID0gWyd2YWxpZGF0ZVN0YXR1cyddO1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgdXRpbHMuZm9yRWFjaCh2YWx1ZUZyb21Db25maWcyS2V5cywgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gobWVyZ2VEZWVwUHJvcGVydGllc0tleXMsIG1lcmdlRGVlcFByb3BlcnRpZXMpO1xuXG4gIHV0aWxzLmZvckVhY2goZGVmYXVsdFRvQ29uZmlnMktleXMsIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKGRpcmVjdE1lcmdlS2V5cywgZnVuY3Rpb24gbWVyZ2UocHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGF4aW9zS2V5cyA9IHZhbHVlRnJvbUNvbmZpZzJLZXlzXG4gICAgLmNvbmNhdChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cylcbiAgICAuY29uY2F0KGRlZmF1bHRUb0NvbmZpZzJLZXlzKVxuICAgIC5jb25jYXQoZGlyZWN0TWVyZ2VLZXlzKTtcblxuICB2YXIgb3RoZXJLZXlzID0gT2JqZWN0XG4gICAgLmtleXMoY29uZmlnMSlcbiAgICAuY29uY2F0KE9iamVjdC5rZXlzKGNvbmZpZzIpKVxuICAgIC5maWx0ZXIoZnVuY3Rpb24gZmlsdGVyQXhpb3NLZXlzKGtleSkge1xuICAgICAgcmV0dXJuIGF4aW9zS2V5cy5pbmRleE9mKGtleSkgPT09IC0xO1xuICAgIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gob3RoZXJLZXlzLCBtZXJnZURlZXBQcm9wZXJ0aWVzKTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJ3cmFwcGVyXCI6XCJEb3RzTG9hZGVyX193cmFwcGVyLS1TTWhkT1wiLFwiZG90XCI6XCJEb3RzTG9hZGVyX19kb3QtLTNsSUM4XCIsXCJwZW5kaW5nXCI6XCJEb3RzTG9hZGVyX19wZW5kaW5nLS0yeFNGSVwiLFwiZG90X3ZpZXdfbGlnaHRcIjpcIkRvdHNMb2FkZXJfX2RvdF92aWV3X2xpZ2h0LS0yZ2pPY1wiLFwiZG90X2ZpcnN0XCI6XCJEb3RzTG9hZGVyX19kb3RfZmlyc3QtLTIycWliXCIsXCJkb3Rfc2Vjb25kXCI6XCJEb3RzTG9hZGVyX19kb3Rfc2Vjb25kLS0xb0ZrZlwiLFwiZG90X3RoaXJkXCI6XCJEb3RzTG9hZGVyX19kb3RfdGhpcmQtLTNlTkVzXCIsXCJkb3RfZm91cnRoXCI6XCJEb3RzTG9hZGVyX19kb3RfZm91cnRoLS0xTXNVc1wifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiYnV0dG9uXCI6XCJCdXR0b25fX2J1dHRvbi0tMUZUNmhcIixcImNoaWxkX2xvYWRpbmdcIjpcIkJ1dHRvbl9fY2hpbGRfbG9hZGluZy0tMndDd1ZcIixcInNwaW5uZXJcIjpcIkJ1dHRvbl9fc3Bpbm5lci0tRXJlNE1cIixcImJ1dHRvbl9zaXplX3NcIjpcIkJ1dHRvbl9fYnV0dG9uX3NpemVfcy0tMkZwWDRcIixcImJ1dHRvbl9zaXplX21cIjpcIkJ1dHRvbl9fYnV0dG9uX3NpemVfbS0tM01pZEFcIixcImJ1dHRvbl9zaXplX2xcIjpcIkJ1dHRvbl9fYnV0dG9uX3NpemVfbC0tMmdXSExcIixcImJ1dHRvbl9zaXplX3hsXCI6XCJCdXR0b25fX2J1dHRvbl9zaXplX3hsLS0zZ3BFdlwiLFwiYnV0dG9uX3dpZGVcIjpcIkJ1dHRvbl9fYnV0dG9uX3dpZGUtLXl5MnhiXCIsXCJidXR0b25fdmlld19saWdodFwiOlwiQnV0dG9uX19idXR0b25fdmlld19saWdodC0tYU1lbFRcIixcImJ1dHRvbl92aWV3X2dob3N0XCI6XCJCdXR0b25fX2J1dHRvbl92aWV3X2dob3N0LS0zQXU1MFwiLFwiYnV0dG9uX3ZpZXdfZmxhdFwiOlwiQnV0dG9uX19idXR0b25fdmlld19mbGF0LS1fMHFaTFwiLFwiYnV0dG9uX2ZvY3VzZWRcIjpcIkJ1dHRvbl9fYnV0dG9uX2ZvY3VzZWQtLTJKVWhFXCJ9OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN5bWJvbE9ic2VydmFibGVQb255ZmlsbChyb290KSB7XG5cdHZhciByZXN1bHQ7XG5cdHZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuXHRpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGlmIChTeW1ib2wub2JzZXJ2YWJsZSkge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sLm9ic2VydmFibGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuXHRcdFx0U3ltYm9sLm9ic2VydmFibGUgPSByZXN1bHQ7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJlc3VsdCA9ICdAQG9ic2VydmFibGUnO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXMgKi9cbi8qKlxuICogTWVtbyBjbGFzcyB1c2VkIGZvciBkZWN5Y2xlIGpzb24gb2JqZWN0cy4gVXNlcyBXZWFrU2V0IGlmIGF2YWlsYWJsZSBvdGhlcndpc2UgYXJyYXkuXG4gKi9cbnZhciBNZW1vID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1lbW8oKSB7XG4gICAgICAgIHRoaXMuX2hhc1dlYWtTZXQgPSB0eXBlb2YgV2Vha1NldCA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgICAgdGhpcy5faW5uZXIgPSB0aGlzLl9oYXNXZWFrU2V0ID8gbmV3IFdlYWtTZXQoKSA6IFtdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIG9iaiB0byByZW1lbWJlci5cbiAgICAgKiBAcGFyYW0gb2JqIE9iamVjdCB0byByZW1lbWJlclxuICAgICAqL1xuICAgIE1lbW8ucHJvdG90eXBlLm1lbW9pemUgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIGlmICh0aGlzLl9oYXNXZWFrU2V0KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faW5uZXIuaGFzKG9iaikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2lubmVyLmFkZChvYmopO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLWZvci1vZlxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2lubmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9pbm5lcltpXTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gb2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faW5uZXIucHVzaChvYmopO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIG9iamVjdCBmcm9tIGludGVybmFsIHN0b3JhZ2UuXG4gICAgICogQHBhcmFtIG9iaiBPYmplY3QgdG8gZm9yZ2V0XG4gICAgICovXG4gICAgTWVtby5wcm90b3R5cGUudW5tZW1vaXplID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICBpZiAodGhpcy5faGFzV2Vha1NldCkge1xuICAgICAgICAgICAgdGhpcy5faW5uZXIuZGVsZXRlKG9iaik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2lubmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lubmVyW2ldID09PSBvYmopIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5uZXIuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBNZW1vO1xufSgpKTtcbmV4cG9ydCB7IE1lbW8gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lbW8uanMubWFwIiwidmFyIG9yaWdpbmFsRnVuY3Rpb25Ub1N0cmluZztcbi8qKiBQYXRjaCB0b1N0cmluZyBjYWxscyB0byByZXR1cm4gcHJvcGVyIG5hbWUgZm9yIHdyYXBwZWQgZnVuY3Rpb25zICovXG52YXIgRnVuY3Rpb25Ub1N0cmluZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGdW5jdGlvblRvU3RyaW5nKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubmFtZSA9IEZ1bmN0aW9uVG9TdHJpbmcuaWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgRnVuY3Rpb25Ub1N0cmluZy5wcm90b3R5cGUuc2V0dXBPbmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gICAgICAgIG9yaWdpbmFsRnVuY3Rpb25Ub1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLl9fc2VudHJ5X29yaWdpbmFsX18gfHwgdGhpcztcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbEZ1bmN0aW9uVG9TdHJpbmcuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEZ1bmN0aW9uVG9TdHJpbmcuaWQgPSAnRnVuY3Rpb25Ub1N0cmluZyc7XG4gICAgcmV0dXJuIEZ1bmN0aW9uVG9TdHJpbmc7XG59KCkpO1xuZXhwb3J0IHsgRnVuY3Rpb25Ub1N0cmluZyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnVuY3Rpb250b3N0cmluZy5qcy5tYXAiLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtZnVuY3Rpb24tcmV0dXJuLXR5cGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC90eXBlZGVmICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5pbXBvcnQgeyBpc1RoZW5hYmxlIH0gZnJvbSAnLi9pcyc7XG4vKiogU3luY1Byb21pc2UgaW50ZXJuYWwgc3RhdGVzICovXG52YXIgU3RhdGVzO1xuKGZ1bmN0aW9uIChTdGF0ZXMpIHtcbiAgICAvKiogUGVuZGluZyAqL1xuICAgIFN0YXRlc1tcIlBFTkRJTkdcIl0gPSBcIlBFTkRJTkdcIjtcbiAgICAvKiogUmVzb2x2ZWQgLyBPSyAqL1xuICAgIFN0YXRlc1tcIlJFU09MVkVEXCJdID0gXCJSRVNPTFZFRFwiO1xuICAgIC8qKiBSZWplY3RlZCAvIEVycm9yICovXG4gICAgU3RhdGVzW1wiUkVKRUNURURcIl0gPSBcIlJFSkVDVEVEXCI7XG59KShTdGF0ZXMgfHwgKFN0YXRlcyA9IHt9KSk7XG4vKipcbiAqIFRoZW5hYmxlIGNsYXNzIHRoYXQgYmVoYXZlcyBsaWtlIGEgUHJvbWlzZSBhbmQgZm9sbG93cyBpdCdzIGludGVyZmFjZVxuICogYnV0IGlzIG5vdCBhc3luYyBpbnRlcm5hbGx5XG4gKi9cbnZhciBTeW5jUHJvbWlzZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTeW5jUHJvbWlzZShleGVjdXRvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IFN0YXRlcy5QRU5ESU5HO1xuICAgICAgICB0aGlzLl9oYW5kbGVycyA9IFtdO1xuICAgICAgICAvKiogSlNEb2MgKi9cbiAgICAgICAgdGhpcy5fcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgX3RoaXMuX3NldFJlc3VsdChTdGF0ZXMuUkVTT0xWRUQsIHZhbHVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqIEpTRG9jICovXG4gICAgICAgIHRoaXMuX3JlamVjdCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgIF90aGlzLl9zZXRSZXN1bHQoU3RhdGVzLlJFSkVDVEVELCByZWFzb24pO1xuICAgICAgICB9O1xuICAgICAgICAvKiogSlNEb2MgKi9cbiAgICAgICAgdGhpcy5fc2V0UmVzdWx0ID0gZnVuY3Rpb24gKHN0YXRlLCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKF90aGlzLl9zdGF0ZSAhPT0gU3RhdGVzLlBFTkRJTkcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNUaGVuYWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZS50aGVuKF90aGlzLl9yZXNvbHZlLCBfdGhpcy5fcmVqZWN0KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5fc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgICAgIF90aGlzLl92YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgX3RoaXMuX2V4ZWN1dGVIYW5kbGVycygpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBUT0RPOiBGSVhNRVxuICAgICAgICAvKiogSlNEb2MgKi9cbiAgICAgICAgdGhpcy5fYXR0YWNoSGFuZGxlciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgICAgICBfdGhpcy5faGFuZGxlcnMgPSBfdGhpcy5faGFuZGxlcnMuY29uY2F0KGhhbmRsZXIpO1xuICAgICAgICAgICAgX3RoaXMuX2V4ZWN1dGVIYW5kbGVycygpO1xuICAgICAgICB9O1xuICAgICAgICAvKiogSlNEb2MgKi9cbiAgICAgICAgdGhpcy5fZXhlY3V0ZUhhbmRsZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLl9zdGF0ZSA9PT0gU3RhdGVzLlBFTkRJTkcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY2FjaGVkSGFuZGxlcnMgPSBfdGhpcy5faGFuZGxlcnMuc2xpY2UoKTtcbiAgICAgICAgICAgIF90aGlzLl9oYW5kbGVycyA9IFtdO1xuICAgICAgICAgICAgY2FjaGVkSGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIGlmIChoYW5kbGVyLmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX3N0YXRlID09PSBTdGF0ZXMuUkVTT0xWRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhbmRsZXIub25mdWxmaWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXIub25mdWxmaWxsZWQoX3RoaXMuX3ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX3N0YXRlID09PSBTdGF0ZXMuUkVKRUNURUQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhbmRsZXIub25yZWplY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5vbnJlamVjdGVkKF90aGlzLl92YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGFuZGxlci5kb25lID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZXhlY3V0b3IodGhpcy5fcmVzb2x2ZSwgdGhpcy5fcmVqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5fcmVqZWN0KGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBKU0RvYyAqL1xuICAgIFN5bmNQcm9taXNlLnJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTeW5jUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgU3luY1Byb21pc2UucmVqZWN0ID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICByZXR1cm4gbmV3IFN5bmNQcm9taXNlKGZ1bmN0aW9uIChfLCByZWplY3QpIHtcbiAgICAgICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFN5bmNQcm9taXNlLmFsbCA9IGZ1bmN0aW9uIChjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3luY1Byb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoXCJQcm9taXNlLmFsbCByZXF1aXJlcyBhbiBhcnJheSBhcyBpbnB1dC5cIikpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb2xsZWN0aW9uLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoW10pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjb3VudGVyID0gY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgcmVzb2x2ZWRDb2xsZWN0aW9uID0gW107XG4gICAgICAgICAgICBjb2xsZWN0aW9uLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgU3luY1Byb21pc2UucmVzb2x2ZShpdGVtKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWRDb2xsZWN0aW9uW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBjb3VudGVyIC09IDE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb3VudGVyICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNvbHZlZENvbGxlY3Rpb24pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKG51bGwsIHJlamVjdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBTeW5jUHJvbWlzZS5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uIChvbmZ1bGZpbGxlZCwgb25yZWplY3RlZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFN5bmNQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIF90aGlzLl9hdHRhY2hIYW5kbGVyKHtcbiAgICAgICAgICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBvbmZ1bGZpbGxlZDogZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW9uZnVsZmlsbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiDCr1xcXyjjg4QpXy/Cr1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogRklYTUVcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShvbmZ1bGZpbGxlZChyZXN1bHQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbnJlamVjdGVkOiBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghb25yZWplY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUob25yZWplY3RlZChyZWFzb24pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFN5bmNQcm9taXNlLnByb3RvdHlwZS5jYXRjaCA9IGZ1bmN0aW9uIChvbnJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gdmFsOyB9LCBvbnJlamVjdGVkKTtcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFN5bmNQcm9taXNlLnByb3RvdHlwZS5maW5hbGx5ID0gZnVuY3Rpb24gKG9uZmluYWxseSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFN5bmNQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciB2YWw7XG4gICAgICAgICAgICB2YXIgaXNSZWplY3RlZDtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlzUmVqZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YWwgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAob25maW5hbGx5KSB7XG4gICAgICAgICAgICAgICAgICAgIG9uZmluYWxseSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgICAgICBpc1JlamVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YWwgPSByZWFzb247XG4gICAgICAgICAgICAgICAgaWYgKG9uZmluYWxseSkge1xuICAgICAgICAgICAgICAgICAgICBvbmZpbmFsbHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNSZWplY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QodmFsKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXNvbHZlKHZhbCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBTeW5jUHJvbWlzZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnW29iamVjdCBTeW5jUHJvbWlzZV0nO1xuICAgIH07XG4gICAgcmV0dXJuIFN5bmNQcm9taXNlO1xufSgpKTtcbmV4cG9ydCB7IFN5bmNQcm9taXNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zeW5jcHJvbWlzZS5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19yZWFkLCBfX3NwcmVhZCB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgZGF0ZVRpbWVzdGFtcEluU2Vjb25kcywgZ2V0R2xvYmFsT2JqZWN0LCBpc1BsYWluT2JqZWN0LCBpc1RoZW5hYmxlLCBTeW5jUHJvbWlzZSB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuLyoqXG4gKiBIb2xkcyBhZGRpdGlvbmFsIGV2ZW50IGluZm9ybWF0aW9uLiB7QGxpbmsgU2NvcGUuYXBwbHlUb0V2ZW50fSB3aWxsIGJlXG4gKiBjYWxsZWQgYnkgdGhlIGNsaWVudCBiZWZvcmUgYW4gZXZlbnQgd2lsbCBiZSBzZW50LlxuICovXG52YXIgU2NvcGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2NvcGUoKSB7XG4gICAgICAgIC8qKiBGbGFnIGlmIG5vdGlmaXlpbmcgaXMgaGFwcGVuaW5nLiAqL1xuICAgICAgICB0aGlzLl9ub3RpZnlpbmdMaXN0ZW5lcnMgPSBmYWxzZTtcbiAgICAgICAgLyoqIENhbGxiYWNrIGZvciBjbGllbnQgdG8gcmVjZWl2ZSBzY29wZSBjaGFuZ2VzLiAqL1xuICAgICAgICB0aGlzLl9zY29wZUxpc3RlbmVycyA9IFtdO1xuICAgICAgICAvKiogQ2FsbGJhY2sgbGlzdCB0aGF0IHdpbGwgYmUgY2FsbGVkIGFmdGVyIHtAbGluayBhcHBseVRvRXZlbnR9LiAqL1xuICAgICAgICB0aGlzLl9ldmVudFByb2Nlc3NvcnMgPSBbXTtcbiAgICAgICAgLyoqIEFycmF5IG9mIGJyZWFkY3J1bWJzLiAqL1xuICAgICAgICB0aGlzLl9icmVhZGNydW1icyA9IFtdO1xuICAgICAgICAvKiogVXNlciAqL1xuICAgICAgICB0aGlzLl91c2VyID0ge307XG4gICAgICAgIC8qKiBUYWdzICovXG4gICAgICAgIHRoaXMuX3RhZ3MgPSB7fTtcbiAgICAgICAgLyoqIEV4dHJhICovXG4gICAgICAgIHRoaXMuX2V4dHJhID0ge307XG4gICAgICAgIC8qKiBDb250ZXh0cyAqL1xuICAgICAgICB0aGlzLl9jb250ZXh0cyA9IHt9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmhlcml0IHZhbHVlcyBmcm9tIHRoZSBwYXJlbnQgc2NvcGUuXG4gICAgICogQHBhcmFtIHNjb3BlIHRvIGNsb25lLlxuICAgICAqL1xuICAgIFNjb3BlLmNsb25lID0gZnVuY3Rpb24gKHNjb3BlKSB7XG4gICAgICAgIHZhciBuZXdTY29wZSA9IG5ldyBTY29wZSgpO1xuICAgICAgICBpZiAoc2NvcGUpIHtcbiAgICAgICAgICAgIG5ld1Njb3BlLl9icmVhZGNydW1icyA9IF9fc3ByZWFkKHNjb3BlLl9icmVhZGNydW1icyk7XG4gICAgICAgICAgICBuZXdTY29wZS5fdGFncyA9IF9fYXNzaWduKHt9LCBzY29wZS5fdGFncyk7XG4gICAgICAgICAgICBuZXdTY29wZS5fZXh0cmEgPSBfX2Fzc2lnbih7fSwgc2NvcGUuX2V4dHJhKTtcbiAgICAgICAgICAgIG5ld1Njb3BlLl9jb250ZXh0cyA9IF9fYXNzaWduKHt9LCBzY29wZS5fY29udGV4dHMpO1xuICAgICAgICAgICAgbmV3U2NvcGUuX3VzZXIgPSBzY29wZS5fdXNlcjtcbiAgICAgICAgICAgIG5ld1Njb3BlLl9sZXZlbCA9IHNjb3BlLl9sZXZlbDtcbiAgICAgICAgICAgIG5ld1Njb3BlLl9zcGFuID0gc2NvcGUuX3NwYW47XG4gICAgICAgICAgICBuZXdTY29wZS5fc2Vzc2lvbiA9IHNjb3BlLl9zZXNzaW9uO1xuICAgICAgICAgICAgbmV3U2NvcGUuX3RyYW5zYWN0aW9uTmFtZSA9IHNjb3BlLl90cmFuc2FjdGlvbk5hbWU7XG4gICAgICAgICAgICBuZXdTY29wZS5fZmluZ2VycHJpbnQgPSBzY29wZS5fZmluZ2VycHJpbnQ7XG4gICAgICAgICAgICBuZXdTY29wZS5fZXZlbnRQcm9jZXNzb3JzID0gX19zcHJlYWQoc2NvcGUuX2V2ZW50UHJvY2Vzc29ycyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld1Njb3BlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkIGludGVybmFsIG9uIGNoYW5nZSBsaXN0ZW5lci4gVXNlZCBmb3Igc3ViIFNES3MgdGhhdCBuZWVkIHRvIHN0b3JlIHRoZSBzY29wZS5cbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLmFkZFNjb3BlTGlzdGVuZXIgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fc2NvcGVMaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5hZGRFdmVudFByb2Nlc3NvciA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9ldmVudFByb2Nlc3NvcnMucHVzaChjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuc2V0VXNlciA9IGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgIHRoaXMuX3VzZXIgPSB1c2VyIHx8IHt9O1xuICAgICAgICBpZiAodGhpcy5fc2Vzc2lvbikge1xuICAgICAgICAgICAgdGhpcy5fc2Vzc2lvbi51cGRhdGUoeyB1c2VyOiB1c2VyIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuZ2V0VXNlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXI7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5zZXRUYWdzID0gZnVuY3Rpb24gKHRhZ3MpIHtcbiAgICAgICAgdGhpcy5fdGFncyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLl90YWdzKSwgdGFncyk7XG4gICAgICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuc2V0VGFnID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLl90YWdzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuX3RhZ3MpLCAoX2EgPSB7fSwgX2Fba2V5XSA9IHZhbHVlLCBfYSkpO1xuICAgICAgICB0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLnNldEV4dHJhcyA9IGZ1bmN0aW9uIChleHRyYXMpIHtcbiAgICAgICAgdGhpcy5fZXh0cmEgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5fZXh0cmEpLCBleHRyYXMpO1xuICAgICAgICB0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLnNldEV4dHJhID0gZnVuY3Rpb24gKGtleSwgZXh0cmEpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLl9leHRyYSA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLl9leHRyYSksIChfYSA9IHt9LCBfYVtrZXldID0gZXh0cmEsIF9hKSk7XG4gICAgICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuc2V0RmluZ2VycHJpbnQgPSBmdW5jdGlvbiAoZmluZ2VycHJpbnQpIHtcbiAgICAgICAgdGhpcy5fZmluZ2VycHJpbnQgPSBmaW5nZXJwcmludDtcbiAgICAgICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5zZXRMZXZlbCA9IGZ1bmN0aW9uIChsZXZlbCkge1xuICAgICAgICB0aGlzLl9sZXZlbCA9IGxldmVsO1xuICAgICAgICB0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLnNldFRyYW5zYWN0aW9uTmFtZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHRoaXMuX3RyYW5zYWN0aW9uTmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2FuIGJlIHJlbW92ZWQgaW4gbWFqb3IgdmVyc2lvbi5cbiAgICAgKiBAZGVwcmVjYXRlZCBpbiBmYXZvciBvZiB7QGxpbmsgdGhpcy5zZXRUcmFuc2FjdGlvbk5hbWV9XG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLnNldFRyYW5zYWN0aW9uID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0VHJhbnNhY3Rpb25OYW1lKG5hbWUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuc2V0Q29udGV4dCA9IGZ1bmN0aW9uIChrZXksIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoY29udGV4dCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1keW5hbWljLWRlbGV0ZVxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2NvbnRleHRzW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0cyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLl9jb250ZXh0cyksIChfYSA9IHt9LCBfYVtrZXldID0gY29udGV4dCwgX2EpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLnNldFNwYW4gPSBmdW5jdGlvbiAoc3Bhbikge1xuICAgICAgICB0aGlzLl9zcGFuID0gc3BhbjtcbiAgICAgICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5nZXRTcGFuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3BhbjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLmdldFRyYW5zYWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgIC8vIG9mdGVuLCB0aGlzIHNwYW4gd2lsbCBiZSBhIHRyYW5zYWN0aW9uLCBidXQgaXQncyBub3QgZ3VhcmFudGVlZCB0byBiZVxuICAgICAgICB2YXIgc3BhbiA9IHRoaXMuZ2V0U3BhbigpO1xuICAgICAgICAvLyB0cnkgaXQgdGhlIG5ldyB3YXkgZmlyc3RcbiAgICAgICAgaWYgKChfYSA9IHNwYW4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50cmFuc2FjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIChfYiA9IHNwYW4pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi50cmFuc2FjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICAvLyBmYWxsYmFjayB0byB0aGUgb2xkIHdheSAoa25vd24gYnVnOiB0aGlzIG9ubHkgZmluZHMgdHJhbnNhY3Rpb25zIHdpdGggc2FtcGxlZCA9IHRydWUpXG4gICAgICAgIGlmICgoX2QgPSAoX2MgPSBzcGFuKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Muc3BhblJlY29yZGVyKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Quc3BhbnNbMF0pIHtcbiAgICAgICAgICAgIHJldHVybiBzcGFuLnNwYW5SZWNvcmRlci5zcGFuc1swXTtcbiAgICAgICAgfVxuICAgICAgICAvLyBuZWl0aGVyIHdheSBmb3VuZCBhIHRyYW5zYWN0aW9uXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5zZXRTZXNzaW9uID0gZnVuY3Rpb24gKHNlc3Npb24pIHtcbiAgICAgICAgaWYgKCFzZXNzaW9uKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fc2Vzc2lvbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3Nlc3Npb24gPSBzZXNzaW9uO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuZ2V0U2Vzc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Nlc3Npb247XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoY2FwdHVyZUNvbnRleHQpIHtcbiAgICAgICAgaWYgKCFjYXB0dXJlQ29udGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjYXB0dXJlQ29udGV4dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdmFyIHVwZGF0ZWRTY29wZSA9IGNhcHR1cmVDb250ZXh0KHRoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZWRTY29wZSBpbnN0YW5jZW9mIFNjb3BlID8gdXBkYXRlZFNjb3BlIDogdGhpcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FwdHVyZUNvbnRleHQgaW5zdGFuY2VvZiBTY29wZSkge1xuICAgICAgICAgICAgdGhpcy5fdGFncyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLl90YWdzKSwgY2FwdHVyZUNvbnRleHQuX3RhZ3MpO1xuICAgICAgICAgICAgdGhpcy5fZXh0cmEgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5fZXh0cmEpLCBjYXB0dXJlQ29udGV4dC5fZXh0cmEpO1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dHMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5fY29udGV4dHMpLCBjYXB0dXJlQ29udGV4dC5fY29udGV4dHMpO1xuICAgICAgICAgICAgaWYgKGNhcHR1cmVDb250ZXh0Ll91c2VyICYmIE9iamVjdC5rZXlzKGNhcHR1cmVDb250ZXh0Ll91c2VyKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91c2VyID0gY2FwdHVyZUNvbnRleHQuX3VzZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FwdHVyZUNvbnRleHQuX2xldmVsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGV2ZWwgPSBjYXB0dXJlQ29udGV4dC5fbGV2ZWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FwdHVyZUNvbnRleHQuX2ZpbmdlcnByaW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmluZ2VycHJpbnQgPSBjYXB0dXJlQ29udGV4dC5fZmluZ2VycHJpbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNQbGFpbk9iamVjdChjYXB0dXJlQ29udGV4dCkpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgICAgY2FwdHVyZUNvbnRleHQgPSBjYXB0dXJlQ29udGV4dDtcbiAgICAgICAgICAgIHRoaXMuX3RhZ3MgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5fdGFncyksIGNhcHR1cmVDb250ZXh0LnRhZ3MpO1xuICAgICAgICAgICAgdGhpcy5fZXh0cmEgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5fZXh0cmEpLCBjYXB0dXJlQ29udGV4dC5leHRyYSk7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0cyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLl9jb250ZXh0cyksIGNhcHR1cmVDb250ZXh0LmNvbnRleHRzKTtcbiAgICAgICAgICAgIGlmIChjYXB0dXJlQ29udGV4dC51c2VyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXNlciA9IGNhcHR1cmVDb250ZXh0LnVzZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FwdHVyZUNvbnRleHQubGV2ZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sZXZlbCA9IGNhcHR1cmVDb250ZXh0LmxldmVsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhcHR1cmVDb250ZXh0LmZpbmdlcnByaW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmluZ2VycHJpbnQgPSBjYXB0dXJlQ29udGV4dC5maW5nZXJwcmludDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9icmVhZGNydW1icyA9IFtdO1xuICAgICAgICB0aGlzLl90YWdzID0ge307XG4gICAgICAgIHRoaXMuX2V4dHJhID0ge307XG4gICAgICAgIHRoaXMuX3VzZXIgPSB7fTtcbiAgICAgICAgdGhpcy5fY29udGV4dHMgPSB7fTtcbiAgICAgICAgdGhpcy5fbGV2ZWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3RyYW5zYWN0aW9uTmFtZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fZmluZ2VycHJpbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3NwYW4gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3Nlc3Npb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuYWRkQnJlYWRjcnVtYiA9IGZ1bmN0aW9uIChicmVhZGNydW1iLCBtYXhCcmVhZGNydW1icykge1xuICAgICAgICB2YXIgbWVyZ2VkQnJlYWRjcnVtYiA9IF9fYXNzaWduKHsgdGltZXN0YW1wOiBkYXRlVGltZXN0YW1wSW5TZWNvbmRzKCkgfSwgYnJlYWRjcnVtYik7XG4gICAgICAgIHRoaXMuX2JyZWFkY3J1bWJzID1cbiAgICAgICAgICAgIG1heEJyZWFkY3J1bWJzICE9PSB1bmRlZmluZWQgJiYgbWF4QnJlYWRjcnVtYnMgPj0gMFxuICAgICAgICAgICAgICAgID8gX19zcHJlYWQodGhpcy5fYnJlYWRjcnVtYnMsIFttZXJnZWRCcmVhZGNydW1iXSkuc2xpY2UoLW1heEJyZWFkY3J1bWJzKVxuICAgICAgICAgICAgICAgIDogX19zcHJlYWQodGhpcy5fYnJlYWRjcnVtYnMsIFttZXJnZWRCcmVhZGNydW1iXSk7XG4gICAgICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuY2xlYXJCcmVhZGNydW1icyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fYnJlYWRjcnVtYnMgPSBbXTtcbiAgICAgICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIHRoZSBjdXJyZW50IGNvbnRleHQgYW5kIGZpbmdlcnByaW50IHRvIHRoZSBldmVudC5cbiAgICAgKiBOb3RlIHRoYXQgYnJlYWRjcnVtYnMgd2lsbCBiZSBhZGRlZCBieSB0aGUgY2xpZW50LlxuICAgICAqIEFsc28gaWYgdGhlIGV2ZW50IGhhcyBhbHJlYWR5IGJyZWFkY3J1bWJzIG9uIGl0LCB3ZSBkbyBub3QgbWVyZ2UgdGhlbS5cbiAgICAgKiBAcGFyYW0gZXZlbnQgRXZlbnRcbiAgICAgKiBAcGFyYW0gaGludCBNYXkgY29udGFpbiBhZGRpdGlvbmFsIGluZm9ybWFydGlvbiBhYm91dCB0aGUgb3JpZ2luYWwgZXhjZXB0aW9uLlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuYXBwbHlUb0V2ZW50ID0gZnVuY3Rpb24gKGV2ZW50LCBoaW50KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRoaXMuX2V4dHJhICYmIE9iamVjdC5rZXlzKHRoaXMuX2V4dHJhKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGV2ZW50LmV4dHJhID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuX2V4dHJhKSwgZXZlbnQuZXh0cmEpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl90YWdzICYmIE9iamVjdC5rZXlzKHRoaXMuX3RhZ3MpLmxlbmd0aCkge1xuICAgICAgICAgICAgZXZlbnQudGFncyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLl90YWdzKSwgZXZlbnQudGFncyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3VzZXIgJiYgT2JqZWN0LmtleXModGhpcy5fdXNlcikubGVuZ3RoKSB7XG4gICAgICAgICAgICBldmVudC51c2VyID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuX3VzZXIpLCBldmVudC51c2VyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fY29udGV4dHMgJiYgT2JqZWN0LmtleXModGhpcy5fY29udGV4dHMpLmxlbmd0aCkge1xuICAgICAgICAgICAgZXZlbnQuY29udGV4dHMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5fY29udGV4dHMpLCBldmVudC5jb250ZXh0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2xldmVsKSB7XG4gICAgICAgICAgICBldmVudC5sZXZlbCA9IHRoaXMuX2xldmVsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl90cmFuc2FjdGlvbk5hbWUpIHtcbiAgICAgICAgICAgIGV2ZW50LnRyYW5zYWN0aW9uID0gdGhpcy5fdHJhbnNhY3Rpb25OYW1lO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdlIHdhbnQgdG8gc2V0IHRoZSB0cmFjZSBjb250ZXh0IGZvciBub3JtYWwgZXZlbnRzIG9ubHkgaWYgdGhlcmUgaXNuJ3QgYWxyZWFkeVxuICAgICAgICAvLyBhIHRyYWNlIGNvbnRleHQgb24gdGhlIGV2ZW50LiBUaGVyZSBpcyBhIHByb2R1Y3QgZmVhdHVyZSBpbiBwbGFjZSB3aGVyZSB3ZSBsaW5rXG4gICAgICAgIC8vIGVycm9ycyB3aXRoIHRyYW5zYWN0aW9uIGFuZCBpdCByZWx5cyBvbiB0aGF0LlxuICAgICAgICBpZiAodGhpcy5fc3Bhbikge1xuICAgICAgICAgICAgZXZlbnQuY29udGV4dHMgPSBfX2Fzc2lnbih7IHRyYWNlOiB0aGlzLl9zcGFuLmdldFRyYWNlQ29udGV4dCgpIH0sIGV2ZW50LmNvbnRleHRzKTtcbiAgICAgICAgICAgIHZhciB0cmFuc2FjdGlvbk5hbWUgPSAoX2EgPSB0aGlzLl9zcGFuLnRyYW5zYWN0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubmFtZTtcbiAgICAgICAgICAgIGlmICh0cmFuc2FjdGlvbk5hbWUpIHtcbiAgICAgICAgICAgICAgICBldmVudC50YWdzID0gX19hc3NpZ24oeyB0cmFuc2FjdGlvbjogdHJhbnNhY3Rpb25OYW1lIH0sIGV2ZW50LnRhZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FwcGx5RmluZ2VycHJpbnQoZXZlbnQpO1xuICAgICAgICBldmVudC5icmVhZGNydW1icyA9IF9fc3ByZWFkKChldmVudC5icmVhZGNydW1icyB8fCBbXSksIHRoaXMuX2JyZWFkY3J1bWJzKTtcbiAgICAgICAgZXZlbnQuYnJlYWRjcnVtYnMgPSBldmVudC5icmVhZGNydW1icy5sZW5ndGggPiAwID8gZXZlbnQuYnJlYWRjcnVtYnMgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiB0aGlzLl9ub3RpZnlFdmVudFByb2Nlc3NvcnMoX19zcHJlYWQoZ2V0R2xvYmFsRXZlbnRQcm9jZXNzb3JzKCksIHRoaXMuX2V2ZW50UHJvY2Vzc29ycyksIGV2ZW50LCBoaW50KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoaXMgd2lsbCBiZSBjYWxsZWQgYWZ0ZXIge0BsaW5rIGFwcGx5VG9FdmVudH0gaXMgZmluaXNoZWQuXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLl9ub3RpZnlFdmVudFByb2Nlc3NvcnMgPSBmdW5jdGlvbiAocHJvY2Vzc29ycywgZXZlbnQsIGhpbnQsIGluZGV4KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7IGluZGV4ID0gMDsgfVxuICAgICAgICByZXR1cm4gbmV3IFN5bmNQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBwcm9jZXNzb3IgPSBwcm9jZXNzb3JzW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChldmVudCA9PT0gbnVsbCB8fCB0eXBlb2YgcHJvY2Vzc29yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gcHJvY2Vzc29yKF9fYXNzaWduKHt9LCBldmVudCksIGhpbnQpO1xuICAgICAgICAgICAgICAgIGlmIChpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0XG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZmluYWwpIHsgcmV0dXJuIF90aGlzLl9ub3RpZnlFdmVudFByb2Nlc3NvcnMocHJvY2Vzc29ycywgZmluYWwsIGhpbnQsIGluZGV4ICsgMSkudGhlbihyZXNvbHZlKTsgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKG51bGwsIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fbm90aWZ5RXZlbnRQcm9jZXNzb3JzKHByb2Nlc3NvcnMsIHJlc3VsdCwgaGludCwgaW5kZXggKyAxKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzb2x2ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKG51bGwsIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoaXMgd2lsbCBiZSBjYWxsZWQgb24gZXZlcnkgc2V0IGNhbGwuXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLl9ub3RpZnlTY29wZUxpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLl9ub3RpZnlpbmdMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeWluZ0xpc3RlbmVycyA9IHRydWU7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fc2NvcGVMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soX3RoaXMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIF90aGlzLl9ub3RpZnlpbmdMaXN0ZW5lcnMgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIGZpbmdlcnByaW50IGZyb20gdGhlIHNjb3BlIHRvIHRoZSBldmVudCBpZiB0aGVyZSdzIG9uZSxcbiAgICAgKiB1c2VzIG1lc3NhZ2UgaWYgdGhlcmUncyBvbmUgaW5zdGVhZCBvciBnZXQgcmlkIG9mIGVtcHR5IGZpbmdlcnByaW50XG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLl9hcHBseUZpbmdlcnByaW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIE1ha2Ugc3VyZSBpdCdzIGFuIGFycmF5IGZpcnN0IGFuZCB3ZSBhY3R1YWxseSBoYXZlIHNvbWV0aGluZyBpbiBwbGFjZVxuICAgICAgICBldmVudC5maW5nZXJwcmludCA9IGV2ZW50LmZpbmdlcnByaW50XG4gICAgICAgICAgICA/IEFycmF5LmlzQXJyYXkoZXZlbnQuZmluZ2VycHJpbnQpXG4gICAgICAgICAgICAgICAgPyBldmVudC5maW5nZXJwcmludFxuICAgICAgICAgICAgICAgIDogW2V2ZW50LmZpbmdlcnByaW50XVxuICAgICAgICAgICAgOiBbXTtcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBzb21ldGhpbmcgb24gdGhlIHNjb3BlLCB0aGVuIG1lcmdlIGl0IHdpdGggZXZlbnRcbiAgICAgICAgaWYgKHRoaXMuX2ZpbmdlcnByaW50KSB7XG4gICAgICAgICAgICBldmVudC5maW5nZXJwcmludCA9IGV2ZW50LmZpbmdlcnByaW50LmNvbmNhdCh0aGlzLl9maW5nZXJwcmludCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBubyBkYXRhIGF0IGFsbCwgcmVtb3ZlIGVtcHR5IGFycmF5IGRlZmF1bHRcbiAgICAgICAgaWYgKGV2ZW50LmZpbmdlcnByaW50ICYmICFldmVudC5maW5nZXJwcmludC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudC5maW5nZXJwcmludDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFNjb3BlO1xufSgpKTtcbmV4cG9ydCB7IFNjb3BlIH07XG4vKipcbiAqIFJldHJ1bnMgdGhlIGdsb2JhbCBldmVudCBwcm9jZXNzb3JzLlxuICovXG5mdW5jdGlvbiBnZXRHbG9iYWxFdmVudFByb2Nlc3NvcnMoKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzICAqL1xuICAgIHZhciBnbG9iYWwgPSBnZXRHbG9iYWxPYmplY3QoKTtcbiAgICBnbG9iYWwuX19TRU5UUllfXyA9IGdsb2JhbC5fX1NFTlRSWV9fIHx8IHt9O1xuICAgIGdsb2JhbC5fX1NFTlRSWV9fLmdsb2JhbEV2ZW50UHJvY2Vzc29ycyA9IGdsb2JhbC5fX1NFTlRSWV9fLmdsb2JhbEV2ZW50UHJvY2Vzc29ycyB8fCBbXTtcbiAgICByZXR1cm4gZ2xvYmFsLl9fU0VOVFJZX18uZ2xvYmFsRXZlbnRQcm9jZXNzb3JzO1xuICAgIC8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzICovXG59XG4vKipcbiAqIEFkZCBhIEV2ZW50UHJvY2Vzc29yIHRvIGJlIGtlcHQgZ2xvYmFsbHkuXG4gKiBAcGFyYW0gY2FsbGJhY2sgRXZlbnRQcm9jZXNzb3IgdG8gYWRkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRHbG9iYWxFdmVudFByb2Nlc3NvcihjYWxsYmFjaykge1xuICAgIGdldEdsb2JhbEV2ZW50UHJvY2Vzc29ycygpLnB1c2goY2FsbGJhY2spO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NvcGUuanMubWFwIiwiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuaW1wb3J0IHsgY29uc29sZVNhbmRib3gsIGdldEdsb2JhbE9iamVjdCB9IGZyb20gJy4vbWlzYyc7XG4vLyBUT0RPOiBJbXBsZW1lbnQgZGlmZmVyZW50IGxvZ2dlcnMgZm9yIGRpZmZlcmVudCBlbnZpcm9ubWVudHNcbnZhciBnbG9iYWwgPSBnZXRHbG9iYWxPYmplY3QoKTtcbi8qKiBQcmVmaXggZm9yIGxvZ2dpbmcgc3RyaW5ncyAqL1xudmFyIFBSRUZJWCA9ICdTZW50cnkgTG9nZ2VyICc7XG4vKiogSlNEb2MgKi9cbnZhciBMb2dnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqIEpTRG9jICovXG4gICAgZnVuY3Rpb24gTG9nZ2VyKCkge1xuICAgICAgICB0aGlzLl9lbmFibGVkID0gZmFsc2U7XG4gICAgfVxuICAgIC8qKiBKU0RvYyAqL1xuICAgIExvZ2dlci5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fZW5hYmxlZCA9IGZhbHNlO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgTG9nZ2VyLnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2VuYWJsZWQgPSB0cnVlO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgTG9nZ2VyLnByb3RvdHlwZS5sb2cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9lbmFibGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZVNhbmRib3goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZ2xvYmFsLmNvbnNvbGUubG9nKFBSRUZJWCArIFwiW0xvZ106IFwiICsgYXJncy5qb2luKCcgJykpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIExvZ2dlci5wcm90b3R5cGUud2FybiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2VuYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlU2FuZGJveChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBnbG9iYWwuY29uc29sZS53YXJuKFBSRUZJWCArIFwiW1dhcm5dOiBcIiArIGFyZ3Muam9pbignICcpKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBMb2dnZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fZW5hYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGVTYW5kYm94KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGdsb2JhbC5jb25zb2xlLmVycm9yKFBSRUZJWCArIFwiW0Vycm9yXTogXCIgKyBhcmdzLmpvaW4oJyAnKSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIExvZ2dlcjtcbn0oKSk7XG4vLyBFbnN1cmUgd2Ugb25seSBoYXZlIGEgc2luZ2xlIGxvZ2dlciBpbnN0YW5jZSwgZXZlbiBpZiBtdWx0aXBsZSB2ZXJzaW9ucyBvZiBAc2VudHJ5L3V0aWxzIGFyZSBiZWluZyB1c2VkXG5nbG9iYWwuX19TRU5UUllfXyA9IGdsb2JhbC5fX1NFTlRSWV9fIHx8IHt9O1xudmFyIGxvZ2dlciA9IGdsb2JhbC5fX1NFTlRSWV9fLmxvZ2dlciB8fCAoZ2xvYmFsLl9fU0VOVFJZX18ubG9nZ2VyID0gbmV3IExvZ2dlcigpKTtcbmV4cG9ydCB7IGxvZ2dlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nZ2VyLmpzLm1hcCIsIi8qKlxuICogU2Vzc2lvbiBTdGF0dXNcbiAqL1xuZXhwb3J0IHZhciBTZXNzaW9uU3RhdHVzO1xuKGZ1bmN0aW9uIChTZXNzaW9uU3RhdHVzKSB7XG4gICAgLyoqIEpTRG9jICovXG4gICAgU2Vzc2lvblN0YXR1c1tcIk9rXCJdID0gXCJva1wiO1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFNlc3Npb25TdGF0dXNbXCJFeGl0ZWRcIl0gPSBcImV4aXRlZFwiO1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFNlc3Npb25TdGF0dXNbXCJDcmFzaGVkXCJdID0gXCJjcmFzaGVkXCI7XG4gICAgLyoqIEpTRG9jICovXG4gICAgU2Vzc2lvblN0YXR1c1tcIkFibm9ybWFsXCJdID0gXCJhYm5vcm1hbFwiO1xufSkoU2Vzc2lvblN0YXR1cyB8fCAoU2Vzc2lvblN0YXR1cyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXNzaW9uLmpzLm1hcCIsImltcG9ydCB7IFNlc3Npb25TdGF0dXMgfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IGRyb3BVbmRlZmluZWRLZXlzLCB1dWlkNCB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuLyoqXG4gKiBAaW5oZXJpdGRvY1xuICovXG52YXIgU2Vzc2lvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZXNzaW9uKGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5lcnJvcnMgPSAwO1xuICAgICAgICB0aGlzLnNpZCA9IHV1aWQ0KCk7XG4gICAgICAgIHRoaXMudGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdGhpcy5zdGFydGVkID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IDA7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gU2Vzc2lvblN0YXR1cy5PaztcbiAgICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBKU0RvYyAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG4gICAgU2Vzc2lvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkgeyBjb250ZXh0ID0ge307IH1cbiAgICAgICAgaWYgKGNvbnRleHQudXNlcikge1xuICAgICAgICAgICAgaWYgKGNvbnRleHQudXNlci5pcF9hZGRyZXNzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pcEFkZHJlc3MgPSBjb250ZXh0LnVzZXIuaXBfYWRkcmVzcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY29udGV4dC5kaWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpZCA9IGNvbnRleHQudXNlci5pZCB8fCBjb250ZXh0LnVzZXIuZW1haWwgfHwgY29udGV4dC51c2VyLnVzZXJuYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudGltZXN0YW1wID0gY29udGV4dC50aW1lc3RhbXAgfHwgRGF0ZS5ub3coKTtcbiAgICAgICAgaWYgKGNvbnRleHQuc2lkKSB7XG4gICAgICAgICAgICAvLyBHb29kIGVub3VnaCB1dWlkIHZhbGlkYXRpb24uIOKAlCBLYW1pbFxuICAgICAgICAgICAgdGhpcy5zaWQgPSBjb250ZXh0LnNpZC5sZW5ndGggPT09IDMyID8gY29udGV4dC5zaWQgOiB1dWlkNCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZXh0LmRpZCkge1xuICAgICAgICAgICAgdGhpcy5kaWQgPSBcIlwiICsgY29udGV4dC5kaWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjb250ZXh0LnN0YXJ0ZWQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0ZWQgPSBjb250ZXh0LnN0YXJ0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjb250ZXh0LmR1cmF0aW9uID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGNvbnRleHQuZHVyYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmR1cmF0aW9uID0gdGhpcy50aW1lc3RhbXAgLSB0aGlzLnN0YXJ0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRleHQucmVsZWFzZSkge1xuICAgICAgICAgICAgdGhpcy5yZWxlYXNlID0gY29udGV4dC5yZWxlYXNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZXh0LmVudmlyb25tZW50KSB7XG4gICAgICAgICAgICB0aGlzLmVudmlyb25tZW50ID0gY29udGV4dC5lbnZpcm9ubWVudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGV4dC5pcEFkZHJlc3MpIHtcbiAgICAgICAgICAgIHRoaXMuaXBBZGRyZXNzID0gY29udGV4dC5pcEFkZHJlc3M7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRleHQudXNlckFnZW50KSB7XG4gICAgICAgICAgICB0aGlzLnVzZXJBZ2VudCA9IGNvbnRleHQudXNlckFnZW50O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY29udGV4dC5lcnJvcnMgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9ycyA9IGNvbnRleHQuZXJyb3JzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZXh0LnN0YXR1cykge1xuICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBjb250ZXh0LnN0YXR1cztcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgU2Vzc2lvbi5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoc3RhdHVzKSB7XG4gICAgICAgIGlmIChzdGF0dXMpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHsgc3RhdHVzOiBzdGF0dXMgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5zdGF0dXMgPT09IFNlc3Npb25TdGF0dXMuT2spIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHsgc3RhdHVzOiBTZXNzaW9uU3RhdHVzLkV4aXRlZCB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFNlc3Npb24ucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGRyb3BVbmRlZmluZWRLZXlzKHtcbiAgICAgICAgICAgIHNpZDogXCJcIiArIHRoaXMuc2lkLFxuICAgICAgICAgICAgaW5pdDogdHJ1ZSxcbiAgICAgICAgICAgIHN0YXJ0ZWQ6IG5ldyBEYXRlKHRoaXMuc3RhcnRlZCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUodGhpcy50aW1lc3RhbXApLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgICAgICAgICAgZXJyb3JzOiB0aGlzLmVycm9ycyxcbiAgICAgICAgICAgIGRpZDogdHlwZW9mIHRoaXMuZGlkID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdGhpcy5kaWQgPT09ICdzdHJpbmcnID8gXCJcIiArIHRoaXMuZGlkIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZHVyYXRpb246IHRoaXMuZHVyYXRpb24sXG4gICAgICAgICAgICBhdHRyczogZHJvcFVuZGVmaW5lZEtleXMoe1xuICAgICAgICAgICAgICAgIHJlbGVhc2U6IHRoaXMucmVsZWFzZSxcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudDogdGhpcy5lbnZpcm9ubWVudCxcbiAgICAgICAgICAgICAgICBpcF9hZGRyZXNzOiB0aGlzLmlwQWRkcmVzcyxcbiAgICAgICAgICAgICAgICB1c2VyX2FnZW50OiB0aGlzLnVzZXJBZ2VudCxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBTZXNzaW9uO1xufSgpKTtcbmV4cG9ydCB7IFNlc3Npb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlc3Npb24uanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fcmVhZCwgX19zcHJlYWQgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGNvbnNvbGVTYW5kYm94LCBkYXRlVGltZXN0YW1wSW5TZWNvbmRzLCBnZXRHbG9iYWxPYmplY3QsIGlzTm9kZUVudiwgbG9nZ2VyLCB1dWlkNCB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgU2NvcGUgfSBmcm9tICcuL3Njb3BlJztcbmltcG9ydCB7IFNlc3Npb24gfSBmcm9tICcuL3Nlc3Npb24nO1xuLyoqXG4gKiBBUEkgY29tcGF0aWJpbGl0eSB2ZXJzaW9uIG9mIHRoaXMgaHViLlxuICpcbiAqIFdBUk5JTkc6IFRoaXMgbnVtYmVyIHNob3VsZCBvbmx5IGJlIGluY3JlYXNlZCB3aGVuIHRoZSBnbG9iYWwgaW50ZXJmYWNlXG4gKiBjaGFuZ2VzIGFuZCBuZXcgbWV0aG9kcyBhcmUgaW50cm9kdWNlZC5cbiAqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCB2YXIgQVBJX1ZFUlNJT04gPSAzO1xuLyoqXG4gKiBEZWZhdWx0IG1heGltdW0gbnVtYmVyIG9mIGJyZWFkY3J1bWJzIGFkZGVkIHRvIGFuIGV2ZW50LiBDYW4gYmUgb3ZlcndyaXR0ZW5cbiAqIHdpdGgge0BsaW5rIE9wdGlvbnMubWF4QnJlYWRjcnVtYnN9LlxuICovXG52YXIgREVGQVVMVF9CUkVBRENSVU1CUyA9IDEwMDtcbi8qKlxuICogQWJzb2x1dGUgbWF4aW11bSBudW1iZXIgb2YgYnJlYWRjcnVtYnMgYWRkZWQgdG8gYW4gZXZlbnQuIFRoZVxuICogYG1heEJyZWFkY3J1bWJzYCBvcHRpb24gY2Fubm90IGJlIGhpZ2hlciB0aGFuIHRoaXMgdmFsdWUuXG4gKi9cbnZhciBNQVhfQlJFQURDUlVNQlMgPSAxMDA7XG4vKipcbiAqIEBpbmhlcml0RG9jXG4gKi9cbnZhciBIdWIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgaHViLCB3aWxsIHB1c2ggb25lIHtAbGluayBMYXllcn0gaW50byB0aGVcbiAgICAgKiBpbnRlcm5hbCBzdGFjayBvbiBjcmVhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjbGllbnQgYm91bmQgdG8gdGhlIGh1Yi5cbiAgICAgKiBAcGFyYW0gc2NvcGUgYm91bmQgdG8gdGhlIGh1Yi5cbiAgICAgKiBAcGFyYW0gdmVyc2lvbiBudW1iZXIsIGhpZ2hlciBudW1iZXIgbWVhbnMgaGlnaGVyIHByaW9yaXR5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEh1YihjbGllbnQsIHNjb3BlLCBfdmVyc2lvbikge1xuICAgICAgICBpZiAoc2NvcGUgPT09IHZvaWQgMCkgeyBzY29wZSA9IG5ldyBTY29wZSgpOyB9XG4gICAgICAgIGlmIChfdmVyc2lvbiA9PT0gdm9pZCAwKSB7IF92ZXJzaW9uID0gQVBJX1ZFUlNJT047IH1cbiAgICAgICAgdGhpcy5fdmVyc2lvbiA9IF92ZXJzaW9uO1xuICAgICAgICAvKiogSXMgYSB7QGxpbmsgTGF5ZXJ9W10gY29udGFpbmluZyB0aGUgY2xpZW50IGFuZCBzY29wZSAqL1xuICAgICAgICB0aGlzLl9zdGFjayA9IFt7fV07XG4gICAgICAgIHRoaXMuZ2V0U3RhY2tUb3AoKS5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLmJpbmRDbGllbnQoY2xpZW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLmlzT2xkZXJUaGFuID0gZnVuY3Rpb24gKHZlcnNpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZlcnNpb24gPCB2ZXJzaW9uO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLmJpbmRDbGllbnQgPSBmdW5jdGlvbiAoY2xpZW50KSB7XG4gICAgICAgIHZhciB0b3AgPSB0aGlzLmdldFN0YWNrVG9wKCk7XG4gICAgICAgIHRvcC5jbGllbnQgPSBjbGllbnQ7XG4gICAgICAgIGlmIChjbGllbnQgJiYgY2xpZW50LnNldHVwSW50ZWdyYXRpb25zKSB7XG4gICAgICAgICAgICBjbGllbnQuc2V0dXBJbnRlZ3JhdGlvbnMoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLnB1c2hTY29wZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gV2Ugd2FudCB0byBjbG9uZSB0aGUgY29udGVudCBvZiBwcmV2IHNjb3BlXG4gICAgICAgIHZhciBzY29wZSA9IFNjb3BlLmNsb25lKHRoaXMuZ2V0U2NvcGUoKSk7XG4gICAgICAgIHRoaXMuZ2V0U3RhY2soKS5wdXNoKHtcbiAgICAgICAgICAgIGNsaWVudDogdGhpcy5nZXRDbGllbnQoKSxcbiAgICAgICAgICAgIHNjb3BlOiBzY29wZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzY29wZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5wb3BTY29wZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuZ2V0U3RhY2soKS5sZW5ndGggPD0gMSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5nZXRTdGFjaygpLnBvcCgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLndpdGhTY29wZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgc2NvcGUgPSB0aGlzLnB1c2hTY29wZSgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2FsbGJhY2soc2NvcGUpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy5wb3BTY29wZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuZ2V0Q2xpZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTdGFja1RvcCgpLmNsaWVudDtcbiAgICB9O1xuICAgIC8qKiBSZXR1cm5zIHRoZSBzY29wZSBvZiB0aGUgdG9wIHN0YWNrLiAqL1xuICAgIEh1Yi5wcm90b3R5cGUuZ2V0U2NvcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFN0YWNrVG9wKCkuc2NvcGU7XG4gICAgfTtcbiAgICAvKiogUmV0dXJucyB0aGUgc2NvcGUgc3RhY2sgZm9yIGRvbWFpbnMgb3IgdGhlIHByb2Nlc3MuICovXG4gICAgSHViLnByb3RvdHlwZS5nZXRTdGFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YWNrO1xuICAgIH07XG4gICAgLyoqIFJldHVybnMgdGhlIHRvcG1vc3Qgc2NvcGUgbGF5ZXIgaW4gdGhlIG9yZGVyIGRvbWFpbiA+IGxvY2FsID4gcHJvY2Vzcy4gKi9cbiAgICBIdWIucHJvdG90eXBlLmdldFN0YWNrVG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhY2tbdGhpcy5fc3RhY2subGVuZ3RoIC0gMV07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LCBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzXG4gICAgSHViLnByb3RvdHlwZS5jYXB0dXJlRXhjZXB0aW9uID0gZnVuY3Rpb24gKGV4Y2VwdGlvbiwgaGludCkge1xuICAgICAgICB2YXIgZXZlbnRJZCA9ICh0aGlzLl9sYXN0RXZlbnRJZCA9IHV1aWQ0KCkpO1xuICAgICAgICB2YXIgZmluYWxIaW50ID0gaGludDtcbiAgICAgICAgLy8gSWYgdGhlcmUncyBubyBleHBsaWNpdCBoaW50IHByb3ZpZGVkLCBtaW1pY2sgdGhlIHNhbWUgdGhpbmcgdGhhdCB3b3VsZCBoYXBwZW5cbiAgICAgICAgLy8gaW4gdGhlIG1pbmltYWwgaXRzZWxmIHRvIGNyZWF0ZSBhIGNvbnNpc3RlbnQgYmVoYXZpb3IuXG4gICAgICAgIC8vIFdlIGRvbid0IGRvIHRoaXMgaW4gdGhlIGNsaWVudCwgYXMgaXQncyB0aGUgbG93ZXN0IGxldmVsIEFQSSwgYW5kIGRvaW5nIHRoaXMsXG4gICAgICAgIC8vIHdvdWxkIHByZXZlbnQgdXNlciBmcm9tIGhhdmluZyBmdWxsIGNvbnRyb2wgb3ZlciBkaXJlY3QgY2FsbHMuXG4gICAgICAgIGlmICghaGludCkge1xuICAgICAgICAgICAgdmFyIHN5bnRoZXRpY0V4Y2VwdGlvbiA9IHZvaWQgMDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZW50cnkgc3ludGhldGljRXhjZXB0aW9uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgc3ludGhldGljRXhjZXB0aW9uID0gZXhjZXB0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxIaW50ID0ge1xuICAgICAgICAgICAgICAgIG9yaWdpbmFsRXhjZXB0aW9uOiBleGNlcHRpb24sXG4gICAgICAgICAgICAgICAgc3ludGhldGljRXhjZXB0aW9uOiBzeW50aGV0aWNFeGNlcHRpb24sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2ludm9rZUNsaWVudCgnY2FwdHVyZUV4Y2VwdGlvbicsIGV4Y2VwdGlvbiwgX19hc3NpZ24oX19hc3NpZ24oe30sIGZpbmFsSGludCksIHsgZXZlbnRfaWQ6IGV2ZW50SWQgfSkpO1xuICAgICAgICByZXR1cm4gZXZlbnRJZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5jYXB0dXJlTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlLCBsZXZlbCwgaGludCkge1xuICAgICAgICB2YXIgZXZlbnRJZCA9ICh0aGlzLl9sYXN0RXZlbnRJZCA9IHV1aWQ0KCkpO1xuICAgICAgICB2YXIgZmluYWxIaW50ID0gaGludDtcbiAgICAgICAgLy8gSWYgdGhlcmUncyBubyBleHBsaWNpdCBoaW50IHByb3ZpZGVkLCBtaW1pY2sgdGhlIHNhbWUgdGhpbmcgdGhhdCB3b3VsZCBoYXBwZW5cbiAgICAgICAgLy8gaW4gdGhlIG1pbmltYWwgaXRzZWxmIHRvIGNyZWF0ZSBhIGNvbnNpc3RlbnQgYmVoYXZpb3IuXG4gICAgICAgIC8vIFdlIGRvbid0IGRvIHRoaXMgaW4gdGhlIGNsaWVudCwgYXMgaXQncyB0aGUgbG93ZXN0IGxldmVsIEFQSSwgYW5kIGRvaW5nIHRoaXMsXG4gICAgICAgIC8vIHdvdWxkIHByZXZlbnQgdXNlciBmcm9tIGhhdmluZyBmdWxsIGNvbnRyb2wgb3ZlciBkaXJlY3QgY2FsbHMuXG4gICAgICAgIGlmICghaGludCkge1xuICAgICAgICAgICAgdmFyIHN5bnRoZXRpY0V4Y2VwdGlvbiA9IHZvaWQgMDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgIHN5bnRoZXRpY0V4Y2VwdGlvbiA9IGV4Y2VwdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsSGludCA9IHtcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEV4Y2VwdGlvbjogbWVzc2FnZSxcbiAgICAgICAgICAgICAgICBzeW50aGV0aWNFeGNlcHRpb246IHN5bnRoZXRpY0V4Y2VwdGlvbixcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faW52b2tlQ2xpZW50KCdjYXB0dXJlTWVzc2FnZScsIG1lc3NhZ2UsIGxldmVsLCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZmluYWxIaW50KSwgeyBldmVudF9pZDogZXZlbnRJZCB9KSk7XG4gICAgICAgIHJldHVybiBldmVudElkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLmNhcHR1cmVFdmVudCA9IGZ1bmN0aW9uIChldmVudCwgaGludCkge1xuICAgICAgICB2YXIgZXZlbnRJZCA9ICh0aGlzLl9sYXN0RXZlbnRJZCA9IHV1aWQ0KCkpO1xuICAgICAgICB0aGlzLl9pbnZva2VDbGllbnQoJ2NhcHR1cmVFdmVudCcsIGV2ZW50LCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgaGludCksIHsgZXZlbnRfaWQ6IGV2ZW50SWQgfSkpO1xuICAgICAgICByZXR1cm4gZXZlbnRJZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5sYXN0RXZlbnRJZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhc3RFdmVudElkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLmFkZEJyZWFkY3J1bWIgPSBmdW5jdGlvbiAoYnJlYWRjcnVtYiwgaGludCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLmdldFN0YWNrVG9wKCksIHNjb3BlID0gX2Euc2NvcGUsIGNsaWVudCA9IF9hLmNsaWVudDtcbiAgICAgICAgaWYgKCFzY29wZSB8fCAhY2xpZW50KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gICAgICAgIHZhciBfYiA9IChjbGllbnQuZ2V0T3B0aW9ucyAmJiBjbGllbnQuZ2V0T3B0aW9ucygpKSB8fCB7fSwgX2MgPSBfYi5iZWZvcmVCcmVhZGNydW1iLCBiZWZvcmVCcmVhZGNydW1iID0gX2MgPT09IHZvaWQgMCA/IG51bGwgOiBfYywgX2QgPSBfYi5tYXhCcmVhZGNydW1icywgbWF4QnJlYWRjcnVtYnMgPSBfZCA9PT0gdm9pZCAwID8gREVGQVVMVF9CUkVBRENSVU1CUyA6IF9kO1xuICAgICAgICBpZiAobWF4QnJlYWRjcnVtYnMgPD0gMClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIHRpbWVzdGFtcCA9IGRhdGVUaW1lc3RhbXBJblNlY29uZHMoKTtcbiAgICAgICAgdmFyIG1lcmdlZEJyZWFkY3J1bWIgPSBfX2Fzc2lnbih7IHRpbWVzdGFtcDogdGltZXN0YW1wIH0sIGJyZWFkY3J1bWIpO1xuICAgICAgICB2YXIgZmluYWxCcmVhZGNydW1iID0gYmVmb3JlQnJlYWRjcnVtYlxuICAgICAgICAgICAgPyBjb25zb2xlU2FuZGJveChmdW5jdGlvbiAoKSB7IHJldHVybiBiZWZvcmVCcmVhZGNydW1iKG1lcmdlZEJyZWFkY3J1bWIsIGhpbnQpOyB9KVxuICAgICAgICAgICAgOiBtZXJnZWRCcmVhZGNydW1iO1xuICAgICAgICBpZiAoZmluYWxCcmVhZGNydW1iID09PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBzY29wZS5hZGRCcmVhZGNydW1iKGZpbmFsQnJlYWRjcnVtYiwgTWF0aC5taW4obWF4QnJlYWRjcnVtYnMsIE1BWF9CUkVBRENSVU1CUykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLnNldFVzZXIgPSBmdW5jdGlvbiAodXNlcikge1xuICAgICAgICB2YXIgc2NvcGUgPSB0aGlzLmdldFNjb3BlKCk7XG4gICAgICAgIGlmIChzY29wZSlcbiAgICAgICAgICAgIHNjb3BlLnNldFVzZXIodXNlcik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuc2V0VGFncyA9IGZ1bmN0aW9uICh0YWdzKSB7XG4gICAgICAgIHZhciBzY29wZSA9IHRoaXMuZ2V0U2NvcGUoKTtcbiAgICAgICAgaWYgKHNjb3BlKVxuICAgICAgICAgICAgc2NvcGUuc2V0VGFncyh0YWdzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5zZXRFeHRyYXMgPSBmdW5jdGlvbiAoZXh0cmFzKSB7XG4gICAgICAgIHZhciBzY29wZSA9IHRoaXMuZ2V0U2NvcGUoKTtcbiAgICAgICAgaWYgKHNjb3BlKVxuICAgICAgICAgICAgc2NvcGUuc2V0RXh0cmFzKGV4dHJhcyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuc2V0VGFnID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIHNjb3BlID0gdGhpcy5nZXRTY29wZSgpO1xuICAgICAgICBpZiAoc2NvcGUpXG4gICAgICAgICAgICBzY29wZS5zZXRUYWcoa2V5LCB2YWx1ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuc2V0RXh0cmEgPSBmdW5jdGlvbiAoa2V5LCBleHRyYSkge1xuICAgICAgICB2YXIgc2NvcGUgPSB0aGlzLmdldFNjb3BlKCk7XG4gICAgICAgIGlmIChzY29wZSlcbiAgICAgICAgICAgIHNjb3BlLnNldEV4dHJhKGtleSwgZXh0cmEpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIEh1Yi5wcm90b3R5cGUuc2V0Q29udGV4dCA9IGZ1bmN0aW9uIChuYW1lLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBzY29wZSA9IHRoaXMuZ2V0U2NvcGUoKTtcbiAgICAgICAgaWYgKHNjb3BlKVxuICAgICAgICAgICAgc2NvcGUuc2V0Q29udGV4dChuYW1lLCBjb250ZXh0KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5jb25maWd1cmVTY29wZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLmdldFN0YWNrVG9wKCksIHNjb3BlID0gX2Euc2NvcGUsIGNsaWVudCA9IF9hLmNsaWVudDtcbiAgICAgICAgaWYgKHNjb3BlICYmIGNsaWVudCkge1xuICAgICAgICAgICAgY2FsbGJhY2soc2NvcGUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvbGRIdWIgPSBtYWtlTWFpbih0aGlzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgbWFrZU1haW4ob2xkSHViKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLmdldEludGVncmF0aW9uID0gZnVuY3Rpb24gKGludGVncmF0aW9uKSB7XG4gICAgICAgIHZhciBjbGllbnQgPSB0aGlzLmdldENsaWVudCgpO1xuICAgICAgICBpZiAoIWNsaWVudClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGNsaWVudC5nZXRJbnRlZ3JhdGlvbihpbnRlZ3JhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKF9vTykge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJDYW5ub3QgcmV0cmlldmUgaW50ZWdyYXRpb24gXCIgKyBpbnRlZ3JhdGlvbi5pZCArIFwiIGZyb20gdGhlIGN1cnJlbnQgSHViXCIpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5zdGFydFNwYW4gPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2FsbEV4dGVuc2lvbk1ldGhvZCgnc3RhcnRTcGFuJywgY29udGV4dCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuc3RhcnRUcmFuc2FjdGlvbiA9IGZ1bmN0aW9uIChjb250ZXh0LCBjdXN0b21TYW1wbGluZ0NvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhbGxFeHRlbnNpb25NZXRob2QoJ3N0YXJ0VHJhbnNhY3Rpb24nLCBjb250ZXh0LCBjdXN0b21TYW1wbGluZ0NvbnRleHQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLnRyYWNlSGVhZGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhbGxFeHRlbnNpb25NZXRob2QoJ3RyYWNlSGVhZGVycycpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLnN0YXJ0U2Vzc2lvbiA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIC8vIEVuZCBleGlzdGluZyBzZXNzaW9uIGlmIHRoZXJlJ3Mgb25lXG4gICAgICAgIHRoaXMuZW5kU2Vzc2lvbigpO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLmdldFN0YWNrVG9wKCksIHNjb3BlID0gX2Euc2NvcGUsIGNsaWVudCA9IF9hLmNsaWVudDtcbiAgICAgICAgdmFyIF9iID0gKGNsaWVudCAmJiBjbGllbnQuZ2V0T3B0aW9ucygpKSB8fCB7fSwgcmVsZWFzZSA9IF9iLnJlbGVhc2UsIGVudmlyb25tZW50ID0gX2IuZW52aXJvbm1lbnQ7XG4gICAgICAgIHZhciBzZXNzaW9uID0gbmV3IFNlc3Npb24oX19hc3NpZ24oX19hc3NpZ24oeyByZWxlYXNlOiByZWxlYXNlLFxuICAgICAgICAgICAgZW52aXJvbm1lbnQ6IGVudmlyb25tZW50IH0sIChzY29wZSAmJiB7IHVzZXI6IHNjb3BlLmdldFVzZXIoKSB9KSksIGNvbnRleHQpKTtcbiAgICAgICAgaWYgKHNjb3BlKSB7XG4gICAgICAgICAgICBzY29wZS5zZXRTZXNzaW9uKHNlc3Npb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXNzaW9uO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLmVuZFNlc3Npb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuZ2V0U3RhY2tUb3AoKSwgc2NvcGUgPSBfYS5zY29wZSwgY2xpZW50ID0gX2EuY2xpZW50O1xuICAgICAgICBpZiAoIXNjb3BlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgc2Vzc2lvbiA9IHNjb3BlLmdldFNlc3Npb24gJiYgc2NvcGUuZ2V0U2Vzc2lvbigpO1xuICAgICAgICBpZiAoc2Vzc2lvbikge1xuICAgICAgICAgICAgc2Vzc2lvbi5jbG9zZSgpO1xuICAgICAgICAgICAgaWYgKGNsaWVudCAmJiBjbGllbnQuY2FwdHVyZVNlc3Npb24pIHtcbiAgICAgICAgICAgICAgICBjbGllbnQuY2FwdHVyZVNlc3Npb24oc2Vzc2lvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzY29wZS5zZXRTZXNzaW9uKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEludGVybmFsIGhlbHBlciBmdW5jdGlvbiB0byBjYWxsIGEgbWV0aG9kIG9uIHRoZSB0b3AgY2xpZW50IGlmIGl0IGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBtZXRob2QgVGhlIG1ldGhvZCB0byBjYWxsIG9uIHRoZSBjbGllbnQuXG4gICAgICogQHBhcmFtIGFyZ3MgQXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlIGNsaWVudCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIEh1Yi5wcm90b3R5cGUuX2ludm9rZUNsaWVudCA9IGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2IgPSB0aGlzLmdldFN0YWNrVG9wKCksIHNjb3BlID0gX2Iuc2NvcGUsIGNsaWVudCA9IF9iLmNsaWVudDtcbiAgICAgICAgaWYgKGNsaWVudCAmJiBjbGllbnRbbWV0aG9kXSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgKF9hID0gY2xpZW50KVttZXRob2RdLmFwcGx5KF9hLCBfX3NwcmVhZChhcmdzLCBbc2NvcGVdKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENhbGxzIGdsb2JhbCBleHRlbnNpb24gbWV0aG9kIGFuZCBiaW5kaW5nIGN1cnJlbnQgaW5zdGFuY2UgdG8gdGhlIGZ1bmN0aW9uIGNhbGxcbiAgICAgKi9cbiAgICAvLyBAdHMtaWdub3JlIEZ1bmN0aW9uIGxhY2tzIGVuZGluZyByZXR1cm4gc3RhdGVtZW50IGFuZCByZXR1cm4gdHlwZSBkb2VzIG5vdCBpbmNsdWRlICd1bmRlZmluZWQnLiB0cygyMzY2KVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgSHViLnByb3RvdHlwZS5fY2FsbEV4dGVuc2lvbk1ldGhvZCA9IGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhcnJpZXIgPSBnZXRNYWluQ2FycmllcigpO1xuICAgICAgICB2YXIgc2VudHJ5ID0gY2Fycmllci5fX1NFTlRSWV9fO1xuICAgICAgICBpZiAoc2VudHJ5ICYmIHNlbnRyeS5leHRlbnNpb25zICYmIHR5cGVvZiBzZW50cnkuZXh0ZW5zaW9uc1ttZXRob2RdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VudHJ5LmV4dGVuc2lvbnNbbWV0aG9kXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBsb2dnZXIud2FybihcIkV4dGVuc2lvbiBtZXRob2QgXCIgKyBtZXRob2QgKyBcIiBjb3VsZG4ndCBiZSBmb3VuZCwgZG9pbmcgbm90aGluZy5cIik7XG4gICAgfTtcbiAgICByZXR1cm4gSHViO1xufSgpKTtcbmV4cG9ydCB7IEh1YiB9O1xuLyoqIFJldHVybnMgdGhlIGdsb2JhbCBzaGltIHJlZ2lzdHJ5LiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE1haW5DYXJyaWVyKCkge1xuICAgIHZhciBjYXJyaWVyID0gZ2V0R2xvYmFsT2JqZWN0KCk7XG4gICAgY2Fycmllci5fX1NFTlRSWV9fID0gY2Fycmllci5fX1NFTlRSWV9fIHx8IHtcbiAgICAgICAgZXh0ZW5zaW9uczoge30sXG4gICAgICAgIGh1YjogdW5kZWZpbmVkLFxuICAgIH07XG4gICAgcmV0dXJuIGNhcnJpZXI7XG59XG4vKipcbiAqIFJlcGxhY2VzIHRoZSBjdXJyZW50IG1haW4gaHViIHdpdGggdGhlIHBhc3NlZCBvbmUgb24gdGhlIGdsb2JhbCBvYmplY3RcbiAqXG4gKiBAcmV0dXJucyBUaGUgb2xkIHJlcGxhY2VkIGh1YlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFrZU1haW4oaHViKSB7XG4gICAgdmFyIHJlZ2lzdHJ5ID0gZ2V0TWFpbkNhcnJpZXIoKTtcbiAgICB2YXIgb2xkSHViID0gZ2V0SHViRnJvbUNhcnJpZXIocmVnaXN0cnkpO1xuICAgIHNldEh1Yk9uQ2FycmllcihyZWdpc3RyeSwgaHViKTtcbiAgICByZXR1cm4gb2xkSHViO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkZWZhdWx0IGh1YiBpbnN0YW5jZS5cbiAqXG4gKiBJZiBhIGh1YiBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQgaW4gdGhlIGdsb2JhbCBjYXJyaWVyIGJ1dCB0aGlzIG1vZHVsZVxuICogY29udGFpbnMgYSBtb3JlIHJlY2VudCB2ZXJzaW9uLCBpdCByZXBsYWNlcyB0aGUgcmVnaXN0ZXJlZCB2ZXJzaW9uLlxuICogT3RoZXJ3aXNlLCB0aGUgY3VycmVudGx5IHJlZ2lzdGVyZWQgaHViIHdpbGwgYmUgcmV0dXJuZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyZW50SHViKCkge1xuICAgIC8vIEdldCBtYWluIGNhcnJpZXIgKGdsb2JhbCBmb3IgZXZlcnkgZW52aXJvbm1lbnQpXG4gICAgdmFyIHJlZ2lzdHJ5ID0gZ2V0TWFpbkNhcnJpZXIoKTtcbiAgICAvLyBJZiB0aGVyZSdzIG5vIGh1Yiwgb3IgaXRzIGFuIG9sZCBBUEksIGFzc2lnbiBhIG5ldyBvbmVcbiAgICBpZiAoIWhhc0h1Yk9uQ2FycmllcihyZWdpc3RyeSkgfHwgZ2V0SHViRnJvbUNhcnJpZXIocmVnaXN0cnkpLmlzT2xkZXJUaGFuKEFQSV9WRVJTSU9OKSkge1xuICAgICAgICBzZXRIdWJPbkNhcnJpZXIocmVnaXN0cnksIG5ldyBIdWIoKSk7XG4gICAgfVxuICAgIC8vIFByZWZlciBkb21haW5zIG92ZXIgZ2xvYmFsIGlmIHRoZXkgYXJlIHRoZXJlIChhcHBsaWNhYmxlIG9ubHkgdG8gTm9kZSBlbnZpcm9ubWVudClcbiAgICBpZiAoaXNOb2RlRW52KCkpIHtcbiAgICAgICAgcmV0dXJuIGdldEh1YkZyb21BY3RpdmVEb21haW4ocmVnaXN0cnkpO1xuICAgIH1cbiAgICAvLyBSZXR1cm4gaHViIHRoYXQgbGl2ZXMgb24gYSBnbG9iYWwgb2JqZWN0XG4gICAgcmV0dXJuIGdldEh1YkZyb21DYXJyaWVyKHJlZ2lzdHJ5KTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgYWN0aXZlIGRvbWFpbiwgaWYgb25lIGV4aXN0c1xuICpcbiAqIEByZXR1cm5zIFRoZSBkb21haW4sIG9yIHVuZGVmaW5lZCBpZiB0aGVyZSBpcyBubyBhY3RpdmUgZG9tYWluXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBY3RpdmVEb21haW4oKSB7XG4gICAgdmFyIHNlbnRyeSA9IGdldE1haW5DYXJyaWVyKCkuX19TRU5UUllfXztcbiAgICByZXR1cm4gc2VudHJ5ICYmIHNlbnRyeS5leHRlbnNpb25zICYmIHNlbnRyeS5leHRlbnNpb25zLmRvbWFpbiAmJiBzZW50cnkuZXh0ZW5zaW9ucy5kb21haW4uYWN0aXZlO1xufVxuLyoqXG4gKiBUcnkgdG8gcmVhZCB0aGUgaHViIGZyb20gYW4gYWN0aXZlIGRvbWFpbiwgYW5kIGZhbGxiYWNrIHRvIHRoZSByZWdpc3RyeSBpZiBvbmUgZG9lc24ndCBleGlzdFxuICogQHJldHVybnMgZGlzY292ZXJlZCBodWJcbiAqL1xuZnVuY3Rpb24gZ2V0SHViRnJvbUFjdGl2ZURvbWFpbihyZWdpc3RyeSkge1xuICAgIHRyeSB7XG4gICAgICAgIHZhciBhY3RpdmVEb21haW4gPSBnZXRBY3RpdmVEb21haW4oKTtcbiAgICAgICAgLy8gSWYgdGhlcmUncyBubyBhY3RpdmUgZG9tYWluLCBqdXN0IHJldHVybiBnbG9iYWwgaHViXG4gICAgICAgIGlmICghYWN0aXZlRG9tYWluKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0SHViRnJvbUNhcnJpZXIocmVnaXN0cnkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gaHViIG9uIGN1cnJlbnQgZG9tYWluLCBvciBpdCdzIGFuIG9sZCBBUEksIGFzc2lnbiBhIG5ldyBvbmVcbiAgICAgICAgaWYgKCFoYXNIdWJPbkNhcnJpZXIoYWN0aXZlRG9tYWluKSB8fCBnZXRIdWJGcm9tQ2FycmllcihhY3RpdmVEb21haW4pLmlzT2xkZXJUaGFuKEFQSV9WRVJTSU9OKSkge1xuICAgICAgICAgICAgdmFyIHJlZ2lzdHJ5SHViVG9wU3RhY2sgPSBnZXRIdWJGcm9tQ2FycmllcihyZWdpc3RyeSkuZ2V0U3RhY2tUb3AoKTtcbiAgICAgICAgICAgIHNldEh1Yk9uQ2FycmllcihhY3RpdmVEb21haW4sIG5ldyBIdWIocmVnaXN0cnlIdWJUb3BTdGFjay5jbGllbnQsIFNjb3BlLmNsb25lKHJlZ2lzdHJ5SHViVG9wU3RhY2suc2NvcGUpKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmV0dXJuIGh1YiB0aGF0IGxpdmVzIG9uIGEgZG9tYWluXG4gICAgICAgIHJldHVybiBnZXRIdWJGcm9tQ2FycmllcihhY3RpdmVEb21haW4pO1xuICAgIH1cbiAgICBjYXRjaCAoX09vKSB7XG4gICAgICAgIC8vIFJldHVybiBodWIgdGhhdCBsaXZlcyBvbiBhIGdsb2JhbCBvYmplY3RcbiAgICAgICAgcmV0dXJuIGdldEh1YkZyb21DYXJyaWVyKHJlZ2lzdHJ5KTtcbiAgICB9XG59XG4vKipcbiAqIFRoaXMgd2lsbCB0ZWxsIHdoZXRoZXIgYSBjYXJyaWVyIGhhcyBhIGh1YiBvbiBpdCBvciBub3RcbiAqIEBwYXJhbSBjYXJyaWVyIG9iamVjdFxuICovXG5mdW5jdGlvbiBoYXNIdWJPbkNhcnJpZXIoY2Fycmllcikge1xuICAgIHJldHVybiAhIShjYXJyaWVyICYmIGNhcnJpZXIuX19TRU5UUllfXyAmJiBjYXJyaWVyLl9fU0VOVFJZX18uaHViKTtcbn1cbi8qKlxuICogVGhpcyB3aWxsIGNyZWF0ZSBhIG5ldyB7QGxpbmsgSHVifSBhbmQgYWRkIHRvIHRoZSBwYXNzZWQgb2JqZWN0IG9uXG4gKiBfX1NFTlRSWV9fLmh1Yi5cbiAqIEBwYXJhbSBjYXJyaWVyIG9iamVjdFxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SHViRnJvbUNhcnJpZXIoY2Fycmllcikge1xuICAgIGlmIChjYXJyaWVyICYmIGNhcnJpZXIuX19TRU5UUllfXyAmJiBjYXJyaWVyLl9fU0VOVFJZX18uaHViKVxuICAgICAgICByZXR1cm4gY2Fycmllci5fX1NFTlRSWV9fLmh1YjtcbiAgICBjYXJyaWVyLl9fU0VOVFJZX18gPSBjYXJyaWVyLl9fU0VOVFJZX18gfHwge307XG4gICAgY2Fycmllci5fX1NFTlRSWV9fLmh1YiA9IG5ldyBIdWIoKTtcbiAgICByZXR1cm4gY2Fycmllci5fX1NFTlRSWV9fLmh1Yjtcbn1cbi8qKlxuICogVGhpcyB3aWxsIHNldCBwYXNzZWQge0BsaW5rIEh1Yn0gb24gdGhlIHBhc3NlZCBvYmplY3QncyBfX1NFTlRSWV9fLmh1YiBhdHRyaWJ1dGVcbiAqIEBwYXJhbSBjYXJyaWVyIG9iamVjdFxuICogQHBhcmFtIGh1YiBIdWJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEh1Yk9uQ2FycmllcihjYXJyaWVyLCBodWIpIHtcbiAgICBpZiAoIWNhcnJpZXIpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjYXJyaWVyLl9fU0VOVFJZX18gPSBjYXJyaWVyLl9fU0VOVFJZX18gfHwge307XG4gICAgY2Fycmllci5fX1NFTlRSWV9fLmh1YiA9IGh1YjtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh1Yi5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBhZGRHbG9iYWxFdmVudFByb2Nlc3NvciwgZ2V0Q3VycmVudEh1YiB9IGZyb20gJ0BzZW50cnkvaHViJztcbmltcG9ydCB7IGdldEV2ZW50RGVzY3JpcHRpb24sIGlzTWF0Y2hpbmdQYXR0ZXJuLCBsb2dnZXIgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbi8vIFwiU2NyaXB0IGVycm9yLlwiIGlzIGhhcmQgY29kZWQgaW50byBicm93c2VycyBmb3IgZXJyb3JzIHRoYXQgaXQgY2FuJ3QgcmVhZC5cbi8vIHRoaXMgaXMgdGhlIHJlc3VsdCBvZiBhIHNjcmlwdCBiZWluZyBwdWxsZWQgaW4gZnJvbSBhbiBleHRlcm5hbCBkb21haW4gYW5kIENPUlMuXG52YXIgREVGQVVMVF9JR05PUkVfRVJST1JTID0gWy9eU2NyaXB0IGVycm9yXFwuPyQvLCAvXkphdmFzY3JpcHQgZXJyb3I6IFNjcmlwdCBlcnJvclxcLj8gb24gbGluZSAwJC9dO1xuLyoqIEluYm91bmQgZmlsdGVycyBjb25maWd1cmFibGUgYnkgdGhlIHVzZXIgKi9cbnZhciBJbmJvdW5kRmlsdGVycyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBJbmJvdW5kRmlsdGVycyhfb3B0aW9ucykge1xuICAgICAgICBpZiAoX29wdGlvbnMgPT09IHZvaWQgMCkgeyBfb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBfb3B0aW9ucztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBJbmJvdW5kRmlsdGVycy5pZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBJbmJvdW5kRmlsdGVycy5wcm90b3R5cGUuc2V0dXBPbmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBhZGRHbG9iYWxFdmVudFByb2Nlc3NvcihmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBodWIgPSBnZXRDdXJyZW50SHViKCk7XG4gICAgICAgICAgICBpZiAoIWh1Yikge1xuICAgICAgICAgICAgICAgIHJldHVybiBldmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzZWxmID0gaHViLmdldEludGVncmF0aW9uKEluYm91bmRGaWx0ZXJzKTtcbiAgICAgICAgICAgIGlmIChzZWxmKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNsaWVudCA9IGh1Yi5nZXRDbGllbnQoKTtcbiAgICAgICAgICAgICAgICB2YXIgY2xpZW50T3B0aW9ucyA9IGNsaWVudCA/IGNsaWVudC5nZXRPcHRpb25zKCkgOiB7fTtcbiAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHNlbGYuX21lcmdlT3B0aW9ucyhjbGllbnRPcHRpb25zKTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5fc2hvdWxkRHJvcEV2ZW50KGV2ZW50LCBvcHRpb25zKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgSW5ib3VuZEZpbHRlcnMucHJvdG90eXBlLl9zaG91bGREcm9wRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzU2VudHJ5RXJyb3IoZXZlbnQsIG9wdGlvbnMpKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybihcIkV2ZW50IGRyb3BwZWQgZHVlIHRvIGJlaW5nIGludGVybmFsIFNlbnRyeSBFcnJvci5cXG5FdmVudDogXCIgKyBnZXRFdmVudERlc2NyaXB0aW9uKGV2ZW50KSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faXNJZ25vcmVkRXJyb3IoZXZlbnQsIG9wdGlvbnMpKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybihcIkV2ZW50IGRyb3BwZWQgZHVlIHRvIGJlaW5nIG1hdGNoZWQgYnkgYGlnbm9yZUVycm9yc2Agb3B0aW9uLlxcbkV2ZW50OiBcIiArIGdldEV2ZW50RGVzY3JpcHRpb24oZXZlbnQpKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9pc0RlbmllZFVybChldmVudCwgb3B0aW9ucykpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKFwiRXZlbnQgZHJvcHBlZCBkdWUgdG8gYmVpbmcgbWF0Y2hlZCBieSBgZGVueVVybHNgIG9wdGlvbi5cXG5FdmVudDogXCIgKyBnZXRFdmVudERlc2NyaXB0aW9uKGV2ZW50KSArIFwiLlxcblVybDogXCIgKyB0aGlzLl9nZXRFdmVudEZpbHRlclVybChldmVudCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9pc0FsbG93ZWRVcmwoZXZlbnQsIG9wdGlvbnMpKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybihcIkV2ZW50IGRyb3BwZWQgZHVlIHRvIG5vdCBiZWluZyBtYXRjaGVkIGJ5IGBhbGxvd1VybHNgIG9wdGlvbi5cXG5FdmVudDogXCIgKyBnZXRFdmVudERlc2NyaXB0aW9uKGV2ZW50KSArIFwiLlxcblVybDogXCIgKyB0aGlzLl9nZXRFdmVudEZpbHRlclVybChldmVudCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgSW5ib3VuZEZpbHRlcnMucHJvdG90eXBlLl9pc1NlbnRyeUVycm9yID0gZnVuY3Rpb24gKGV2ZW50LCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghb3B0aW9ucy5pZ25vcmVJbnRlcm5hbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gKChldmVudCAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmV4Y2VwdGlvbiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMgJiZcbiAgICAgICAgICAgICAgICBldmVudC5leGNlcHRpb24udmFsdWVzWzBdICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS50eXBlID09PSAnU2VudHJ5RXJyb3InKSB8fFxuICAgICAgICAgICAgICAgIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoX29PKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIEluYm91bmRGaWx0ZXJzLnByb3RvdHlwZS5faXNJZ25vcmVkRXJyb3IgPSBmdW5jdGlvbiAoZXZlbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zLmlnbm9yZUVycm9ycyB8fCAhb3B0aW9ucy5pZ25vcmVFcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFBvc3NpYmxlRXZlbnRNZXNzYWdlcyhldmVudCkuc29tZShmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgLy8gTm90IHN1cmUgd2h5IFR5cGVTY3JpcHQgY29tcGxhaW5zIGhlcmUuLi5cbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmlnbm9yZUVycm9ycy5zb21lKGZ1bmN0aW9uIChwYXR0ZXJuKSB7IHJldHVybiBpc01hdGNoaW5nUGF0dGVybihtZXNzYWdlLCBwYXR0ZXJuKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgSW5ib3VuZEZpbHRlcnMucHJvdG90eXBlLl9pc0RlbmllZFVybCA9IGZ1bmN0aW9uIChldmVudCwgb3B0aW9ucykge1xuICAgICAgICAvLyBUT0RPOiBVc2UgR2xvYiBpbnN0ZWFkP1xuICAgICAgICBpZiAoIW9wdGlvbnMuZGVueVVybHMgfHwgIW9wdGlvbnMuZGVueVVybHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHVybCA9IHRoaXMuX2dldEV2ZW50RmlsdGVyVXJsKGV2ZW50KTtcbiAgICAgICAgcmV0dXJuICF1cmwgPyBmYWxzZSA6IG9wdGlvbnMuZGVueVVybHMuc29tZShmdW5jdGlvbiAocGF0dGVybikgeyByZXR1cm4gaXNNYXRjaGluZ1BhdHRlcm4odXJsLCBwYXR0ZXJuKTsgfSk7XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBJbmJvdW5kRmlsdGVycy5wcm90b3R5cGUuX2lzQWxsb3dlZFVybCA9IGZ1bmN0aW9uIChldmVudCwgb3B0aW9ucykge1xuICAgICAgICAvLyBUT0RPOiBVc2UgR2xvYiBpbnN0ZWFkP1xuICAgICAgICBpZiAoIW9wdGlvbnMuYWxsb3dVcmxzIHx8ICFvcHRpb25zLmFsbG93VXJscy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciB1cmwgPSB0aGlzLl9nZXRFdmVudEZpbHRlclVybChldmVudCk7XG4gICAgICAgIHJldHVybiAhdXJsID8gdHJ1ZSA6IG9wdGlvbnMuYWxsb3dVcmxzLnNvbWUoZnVuY3Rpb24gKHBhdHRlcm4pIHsgcmV0dXJuIGlzTWF0Y2hpbmdQYXR0ZXJuKHVybCwgcGF0dGVybik7IH0pO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgSW5ib3VuZEZpbHRlcnMucHJvdG90eXBlLl9tZXJnZU9wdGlvbnMgPSBmdW5jdGlvbiAoY2xpZW50T3B0aW9ucykge1xuICAgICAgICBpZiAoY2xpZW50T3B0aW9ucyA9PT0gdm9pZCAwKSB7IGNsaWVudE9wdGlvbnMgPSB7fTsgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWxsb3dVcmxzOiBfX3NwcmVhZCgodGhpcy5fb3B0aW9ucy53aGl0ZWxpc3RVcmxzIHx8IFtdKSwgKHRoaXMuX29wdGlvbnMuYWxsb3dVcmxzIHx8IFtdKSwgKGNsaWVudE9wdGlvbnMud2hpdGVsaXN0VXJscyB8fCBbXSksIChjbGllbnRPcHRpb25zLmFsbG93VXJscyB8fCBbXSkpLFxuICAgICAgICAgICAgZGVueVVybHM6IF9fc3ByZWFkKCh0aGlzLl9vcHRpb25zLmJsYWNrbGlzdFVybHMgfHwgW10pLCAodGhpcy5fb3B0aW9ucy5kZW55VXJscyB8fCBbXSksIChjbGllbnRPcHRpb25zLmJsYWNrbGlzdFVybHMgfHwgW10pLCAoY2xpZW50T3B0aW9ucy5kZW55VXJscyB8fCBbXSkpLFxuICAgICAgICAgICAgaWdub3JlRXJyb3JzOiBfX3NwcmVhZCgodGhpcy5fb3B0aW9ucy5pZ25vcmVFcnJvcnMgfHwgW10pLCAoY2xpZW50T3B0aW9ucy5pZ25vcmVFcnJvcnMgfHwgW10pLCBERUZBVUxUX0lHTk9SRV9FUlJPUlMpLFxuICAgICAgICAgICAgaWdub3JlSW50ZXJuYWw6IHR5cGVvZiB0aGlzLl9vcHRpb25zLmlnbm9yZUludGVybmFsICE9PSAndW5kZWZpbmVkJyA/IHRoaXMuX29wdGlvbnMuaWdub3JlSW50ZXJuYWwgOiB0cnVlLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgSW5ib3VuZEZpbHRlcnMucHJvdG90eXBlLl9nZXRQb3NzaWJsZUV2ZW50TWVzc2FnZXMgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50Lm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiBbZXZlbnQubWVzc2FnZV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50LmV4Y2VwdGlvbikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSAoZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyAmJiBldmVudC5leGNlcHRpb24udmFsdWVzWzBdKSB8fCB7fSwgX2IgPSBfYS50eXBlLCB0eXBlID0gX2IgPT09IHZvaWQgMCA/ICcnIDogX2IsIF9jID0gX2EudmFsdWUsIHZhbHVlID0gX2MgPT09IHZvaWQgMCA/ICcnIDogX2M7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcIlwiICsgdmFsdWUsIHR5cGUgKyBcIjogXCIgKyB2YWx1ZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAob08pIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoXCJDYW5ub3QgZXh0cmFjdCBtZXNzYWdlIGZvciBldmVudCBcIiArIGdldEV2ZW50RGVzY3JpcHRpb24oZXZlbnQpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgSW5ib3VuZEZpbHRlcnMucHJvdG90eXBlLl9nZXRFdmVudEZpbHRlclVybCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnN0YWNrdHJhY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgZnJhbWVzXzEgPSBldmVudC5zdGFja3RyYWNlLmZyYW1lcztcbiAgICAgICAgICAgICAgICByZXR1cm4gKGZyYW1lc18xICYmIGZyYW1lc18xW2ZyYW1lc18xLmxlbmd0aCAtIDFdLmZpbGVuYW1lKSB8fCBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV2ZW50LmV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciBmcmFtZXNfMiA9IGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMgJiYgZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS5zdGFja3RyYWNlICYmIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0uc3RhY2t0cmFjZS5mcmFtZXM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChmcmFtZXNfMiAmJiBmcmFtZXNfMltmcmFtZXNfMi5sZW5ndGggLSAxXS5maWxlbmFtZSkgfHwgbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChvTykge1xuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKFwiQ2Fubm90IGV4dHJhY3QgdXJsIGZvciBldmVudCBcIiArIGdldEV2ZW50RGVzY3JpcHRpb24oZXZlbnQpKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEluYm91bmRGaWx0ZXJzLmlkID0gJ0luYm91bmRGaWx0ZXJzJztcbiAgICByZXR1cm4gSW5ib3VuZEZpbHRlcnM7XG59KCkpO1xuZXhwb3J0IHsgSW5ib3VuZEZpbHRlcnMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluYm91bmRmaWx0ZXJzLmpzLm1hcCIsImV4cG9ydCB2YXIgc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgPyBzZXRQcm90b09mIDogbWl4aW5Qcm9wZXJ0aWVzKTtcbi8qKlxuICogc2V0UHJvdG90eXBlT2YgcG9seWZpbGwgdXNpbmcgX19wcm90b19fXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG5mdW5jdGlvbiBzZXRQcm90b09mKG9iaiwgcHJvdG8pIHtcbiAgICAvLyBAdHMtaWdub3JlIF9fcHJvdG9fXyBkb2VzIG5vdCBleGlzdCBvbiBvYmpcbiAgICBvYmouX19wcm90b19fID0gcHJvdG87XG4gICAgcmV0dXJuIG9iajtcbn1cbi8qKlxuICogc2V0UHJvdG90eXBlT2YgcG9seWZpbGwgdXNpbmcgbWl4aW5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbmZ1bmN0aW9uIG1peGluUHJvcGVydGllcyhvYmosIHByb3RvKSB7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBwcm90bykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gICAgICAgIGlmICghb2JqLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIHR5cGVzY3JpcHQgY29tcGxhaW5zIGFib3V0IGluZGV4aW5nIHNvIHdlIHJlbW92ZVxuICAgICAgICAgICAgb2JqW3Byb3BdID0gcHJvdG9bcHJvcF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvbHlmaWxsLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgc2V0UHJvdG90eXBlT2YgfSBmcm9tICcuL3BvbHlmaWxsJztcbi8qKiBBbiBlcnJvciBlbWl0dGVkIGJ5IFNlbnRyeSBTREtzIGFuZCByZWxhdGVkIHV0aWxpdGllcy4gKi9cbnZhciBTZW50cnlFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2VudHJ5RXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2VudHJ5RXJyb3IobWVzc2FnZSkge1xuICAgICAgICB2YXIgX25ld1RhcmdldCA9IHRoaXMuY29uc3RydWN0b3I7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1lc3NhZ2UpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICBfdGhpcy5uYW1lID0gX25ld1RhcmdldC5wcm90b3R5cGUuY29uc3RydWN0b3IubmFtZTtcbiAgICAgICAgc2V0UHJvdG90eXBlT2YoX3RoaXMsIF9uZXdUYXJnZXQucHJvdG90eXBlKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gU2VudHJ5RXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnQgeyBTZW50cnlFcnJvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3IuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTZW50cnlFcnJvciB9IGZyb20gJy4vZXJyb3InO1xuLyoqIFJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VkIHRvIHBhcnNlIGEgRHNuLiAqL1xudmFyIERTTl9SRUdFWCA9IC9eKD86KFxcdyspOilcXC9cXC8oPzooXFx3KykoPzo6KFxcdyspKT9AKShbXFx3Li1dKykoPzo6KFxcZCspKT9cXC8oLispLztcbi8qKiBFcnJvciBtZXNzYWdlICovXG52YXIgRVJST1JfTUVTU0FHRSA9ICdJbnZhbGlkIERzbic7XG4vKiogVGhlIFNlbnRyeSBEc24sIGlkZW50aWZ5aW5nIGEgU2VudHJ5IGluc3RhbmNlIGFuZCBwcm9qZWN0LiAqL1xudmFyIERzbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKiogQ3JlYXRlcyBhIG5ldyBEc24gY29tcG9uZW50ICovXG4gICAgZnVuY3Rpb24gRHNuKGZyb20pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmcm9tID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhpcy5fZnJvbVN0cmluZyhmcm9tKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2Zyb21Db21wb25lbnRzKGZyb20pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ZhbGlkYXRlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbmRlcnMgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERzbi5cbiAgICAgKlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoaXMgd2lsbCByZW5kZXIgdGhlIHB1YmxpYyByZXByZXNlbnRhdGlvbiB3aXRob3V0IHRoZSBwYXNzd29yZFxuICAgICAqIGNvbXBvbmVudC4gVG8gZ2V0IHRoZSBkZXByZWNhdGVkIHByaXZhdGUgcmVwcmVzZW50YXRpb24sIHNldCBgd2l0aFBhc3N3b3JkYFxuICAgICAqIHRvIHRydWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gd2l0aFBhc3N3b3JkIFdoZW4gc2V0IHRvIHRydWUsIHRoZSBwYXNzd29yZCB3aWxsIGJlIGluY2x1ZGVkLlxuICAgICAqL1xuICAgIERzbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAod2l0aFBhc3N3b3JkKSB7XG4gICAgICAgIGlmICh3aXRoUGFzc3dvcmQgPT09IHZvaWQgMCkgeyB3aXRoUGFzc3dvcmQgPSBmYWxzZTsgfVxuICAgICAgICB2YXIgX2EgPSB0aGlzLCBob3N0ID0gX2EuaG9zdCwgcGF0aCA9IF9hLnBhdGgsIHBhc3MgPSBfYS5wYXNzLCBwb3J0ID0gX2EucG9ydCwgcHJvamVjdElkID0gX2EucHJvamVjdElkLCBwcm90b2NvbCA9IF9hLnByb3RvY29sLCB1c2VyID0gX2EudXNlcjtcbiAgICAgICAgcmV0dXJuIChwcm90b2NvbCArIFwiOi8vXCIgKyB1c2VyICsgKHdpdGhQYXNzd29yZCAmJiBwYXNzID8gXCI6XCIgKyBwYXNzIDogJycpICtcbiAgICAgICAgICAgIChcIkBcIiArIGhvc3QgKyAocG9ydCA/IFwiOlwiICsgcG9ydCA6ICcnKSArIFwiL1wiICsgKHBhdGggPyBwYXRoICsgXCIvXCIgOiBwYXRoKSArIHByb2plY3RJZCkpO1xuICAgIH07XG4gICAgLyoqIFBhcnNlcyBhIHN0cmluZyBpbnRvIHRoaXMgRHNuLiAqL1xuICAgIERzbi5wcm90b3R5cGUuX2Zyb21TdHJpbmcgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IERTTl9SRUdFWC5leGVjKHN0cik7XG4gICAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBTZW50cnlFcnJvcihFUlJPUl9NRVNTQUdFKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2EgPSBfX3JlYWQobWF0Y2guc2xpY2UoMSksIDYpLCBwcm90b2NvbCA9IF9hWzBdLCB1c2VyID0gX2FbMV0sIF9iID0gX2FbMl0sIHBhc3MgPSBfYiA9PT0gdm9pZCAwID8gJycgOiBfYiwgaG9zdCA9IF9hWzNdLCBfYyA9IF9hWzRdLCBwb3J0ID0gX2MgPT09IHZvaWQgMCA/ICcnIDogX2MsIGxhc3RQYXRoID0gX2FbNV07XG4gICAgICAgIHZhciBwYXRoID0gJyc7XG4gICAgICAgIHZhciBwcm9qZWN0SWQgPSBsYXN0UGF0aDtcbiAgICAgICAgdmFyIHNwbGl0ID0gcHJvamVjdElkLnNwbGl0KCcvJyk7XG4gICAgICAgIGlmIChzcGxpdC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBwYXRoID0gc3BsaXQuc2xpY2UoMCwgLTEpLmpvaW4oJy8nKTtcbiAgICAgICAgICAgIHByb2plY3RJZCA9IHNwbGl0LnBvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9qZWN0SWQpIHtcbiAgICAgICAgICAgIHZhciBwcm9qZWN0TWF0Y2ggPSBwcm9qZWN0SWQubWF0Y2goL15cXGQrLyk7XG4gICAgICAgICAgICBpZiAocHJvamVjdE1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcHJvamVjdElkID0gcHJvamVjdE1hdGNoWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2Zyb21Db21wb25lbnRzKHsgaG9zdDogaG9zdCwgcGFzczogcGFzcywgcGF0aDogcGF0aCwgcHJvamVjdElkOiBwcm9qZWN0SWQsIHBvcnQ6IHBvcnQsIHByb3RvY29sOiBwcm90b2NvbCwgdXNlcjogdXNlciB9KTtcbiAgICB9O1xuICAgIC8qKiBNYXBzIERzbiBjb21wb25lbnRzIGludG8gdGhpcyBpbnN0YW5jZS4gKi9cbiAgICBEc24ucHJvdG90eXBlLl9mcm9tQ29tcG9uZW50cyA9IGZ1bmN0aW9uIChjb21wb25lbnRzKSB7XG4gICAgICAgIHRoaXMucHJvdG9jb2wgPSBjb21wb25lbnRzLnByb3RvY29sO1xuICAgICAgICB0aGlzLnVzZXIgPSBjb21wb25lbnRzLnVzZXI7XG4gICAgICAgIHRoaXMucGFzcyA9IGNvbXBvbmVudHMucGFzcyB8fCAnJztcbiAgICAgICAgdGhpcy5ob3N0ID0gY29tcG9uZW50cy5ob3N0O1xuICAgICAgICB0aGlzLnBvcnQgPSBjb21wb25lbnRzLnBvcnQgfHwgJyc7XG4gICAgICAgIHRoaXMucGF0aCA9IGNvbXBvbmVudHMucGF0aCB8fCAnJztcbiAgICAgICAgdGhpcy5wcm9qZWN0SWQgPSBjb21wb25lbnRzLnByb2plY3RJZDtcbiAgICB9O1xuICAgIC8qKiBWYWxpZGF0ZXMgdGhpcyBEc24gYW5kIHRocm93cyBvbiBlcnJvci4gKi9cbiAgICBEc24ucHJvdG90eXBlLl92YWxpZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgWydwcm90b2NvbCcsICd1c2VyJywgJ2hvc3QnLCAncHJvamVjdElkJ10uZm9yRWFjaChmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgICAgICAgICBpZiAoIV90aGlzW2NvbXBvbmVudF0pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU2VudHJ5RXJyb3IoRVJST1JfTUVTU0FHRSArIFwiOiBcIiArIGNvbXBvbmVudCArIFwiIG1pc3NpbmdcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXRoaXMucHJvamVjdElkLm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFNlbnRyeUVycm9yKEVSUk9SX01FU1NBR0UgKyBcIjogSW52YWxpZCBwcm9qZWN0SWQgXCIgKyB0aGlzLnByb2plY3RJZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucHJvdG9jb2wgIT09ICdodHRwJyAmJiB0aGlzLnByb3RvY29sICE9PSAnaHR0cHMnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgU2VudHJ5RXJyb3IoRVJST1JfTUVTU0FHRSArIFwiOiBJbnZhbGlkIHByb3RvY29sIFwiICsgdGhpcy5wcm90b2NvbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucG9ydCAmJiBpc05hTihwYXJzZUludCh0aGlzLnBvcnQsIDEwKSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBTZW50cnlFcnJvcihFUlJPUl9NRVNTQUdFICsgXCI6IEludmFsaWQgcG9ydCBcIiArIHRoaXMucG9ydCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBEc247XG59KCkpO1xuZXhwb3J0IHsgRHNuIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kc24uanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZCB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IsIGdldEN1cnJlbnRIdWIgfSBmcm9tICdAc2VudHJ5L2h1Yic7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmV4cG9ydCB2YXIgaW5zdGFsbGVkSW50ZWdyYXRpb25zID0gW107XG4vKiogR2V0cyBpbnRlZ3JhdGlvbiB0byBpbnN0YWxsICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW50ZWdyYXRpb25zVG9TZXR1cChvcHRpb25zKSB7XG4gICAgdmFyIGRlZmF1bHRJbnRlZ3JhdGlvbnMgPSAob3B0aW9ucy5kZWZhdWx0SW50ZWdyYXRpb25zICYmIF9fc3ByZWFkKG9wdGlvbnMuZGVmYXVsdEludGVncmF0aW9ucykpIHx8IFtdO1xuICAgIHZhciB1c2VySW50ZWdyYXRpb25zID0gb3B0aW9ucy5pbnRlZ3JhdGlvbnM7XG4gICAgdmFyIGludGVncmF0aW9ucyA9IFtdO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHVzZXJJbnRlZ3JhdGlvbnMpKSB7XG4gICAgICAgIHZhciB1c2VySW50ZWdyYXRpb25zTmFtZXNfMSA9IHVzZXJJbnRlZ3JhdGlvbnMubWFwKGZ1bmN0aW9uIChpKSB7IHJldHVybiBpLm5hbWU7IH0pO1xuICAgICAgICB2YXIgcGlja2VkSW50ZWdyYXRpb25zTmFtZXNfMSA9IFtdO1xuICAgICAgICAvLyBMZWF2ZSBvbmx5IHVuaXF1ZSBkZWZhdWx0IGludGVncmF0aW9ucywgdGhhdCB3ZXJlIG5vdCBvdmVycmlkZGVuIHdpdGggcHJvdmlkZWQgdXNlciBpbnRlZ3JhdGlvbnNcbiAgICAgICAgZGVmYXVsdEludGVncmF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChkZWZhdWx0SW50ZWdyYXRpb24pIHtcbiAgICAgICAgICAgIGlmICh1c2VySW50ZWdyYXRpb25zTmFtZXNfMS5pbmRleE9mKGRlZmF1bHRJbnRlZ3JhdGlvbi5uYW1lKSA9PT0gLTEgJiZcbiAgICAgICAgICAgICAgICBwaWNrZWRJbnRlZ3JhdGlvbnNOYW1lc18xLmluZGV4T2YoZGVmYXVsdEludGVncmF0aW9uLm5hbWUpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGludGVncmF0aW9ucy5wdXNoKGRlZmF1bHRJbnRlZ3JhdGlvbik7XG4gICAgICAgICAgICAgICAgcGlja2VkSW50ZWdyYXRpb25zTmFtZXNfMS5wdXNoKGRlZmF1bHRJbnRlZ3JhdGlvbi5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIERvbid0IGFkZCBzYW1lIHVzZXIgaW50ZWdyYXRpb24gdHdpY2VcbiAgICAgICAgdXNlckludGVncmF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uICh1c2VySW50ZWdyYXRpb24pIHtcbiAgICAgICAgICAgIGlmIChwaWNrZWRJbnRlZ3JhdGlvbnNOYW1lc18xLmluZGV4T2YodXNlckludGVncmF0aW9uLm5hbWUpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGludGVncmF0aW9ucy5wdXNoKHVzZXJJbnRlZ3JhdGlvbik7XG4gICAgICAgICAgICAgICAgcGlja2VkSW50ZWdyYXRpb25zTmFtZXNfMS5wdXNoKHVzZXJJbnRlZ3JhdGlvbi5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB1c2VySW50ZWdyYXRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGludGVncmF0aW9ucyA9IHVzZXJJbnRlZ3JhdGlvbnMoZGVmYXVsdEludGVncmF0aW9ucyk7XG4gICAgICAgIGludGVncmF0aW9ucyA9IEFycmF5LmlzQXJyYXkoaW50ZWdyYXRpb25zKSA/IGludGVncmF0aW9ucyA6IFtpbnRlZ3JhdGlvbnNdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaW50ZWdyYXRpb25zID0gX19zcHJlYWQoZGVmYXVsdEludGVncmF0aW9ucyk7XG4gICAgfVxuICAgIC8vIE1ha2Ugc3VyZSB0aGF0IGlmIHByZXNlbnQsIGBEZWJ1Z2AgaW50ZWdyYXRpb24gd2lsbCBhbHdheXMgcnVuIGxhc3RcbiAgICB2YXIgaW50ZWdyYXRpb25zTmFtZXMgPSBpbnRlZ3JhdGlvbnMubWFwKGZ1bmN0aW9uIChpKSB7IHJldHVybiBpLm5hbWU7IH0pO1xuICAgIHZhciBhbHdheXNMYXN0VG9SdW4gPSAnRGVidWcnO1xuICAgIGlmIChpbnRlZ3JhdGlvbnNOYW1lcy5pbmRleE9mKGFsd2F5c0xhc3RUb1J1bikgIT09IC0xKSB7XG4gICAgICAgIGludGVncmF0aW9ucy5wdXNoLmFwcGx5KGludGVncmF0aW9ucywgX19zcHJlYWQoaW50ZWdyYXRpb25zLnNwbGljZShpbnRlZ3JhdGlvbnNOYW1lcy5pbmRleE9mKGFsd2F5c0xhc3RUb1J1biksIDEpKSk7XG4gICAgfVxuICAgIHJldHVybiBpbnRlZ3JhdGlvbnM7XG59XG4vKiogU2V0dXAgZ2l2ZW4gaW50ZWdyYXRpb24gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cEludGVncmF0aW9uKGludGVncmF0aW9uKSB7XG4gICAgaWYgKGluc3RhbGxlZEludGVncmF0aW9ucy5pbmRleE9mKGludGVncmF0aW9uLm5hbWUpICE9PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGludGVncmF0aW9uLnNldHVwT25jZShhZGRHbG9iYWxFdmVudFByb2Nlc3NvciwgZ2V0Q3VycmVudEh1Yik7XG4gICAgaW5zdGFsbGVkSW50ZWdyYXRpb25zLnB1c2goaW50ZWdyYXRpb24ubmFtZSk7XG4gICAgbG9nZ2VyLmxvZyhcIkludGVncmF0aW9uIGluc3RhbGxlZDogXCIgKyBpbnRlZ3JhdGlvbi5uYW1lKTtcbn1cbi8qKlxuICogR2l2ZW4gYSBsaXN0IG9mIGludGVncmF0aW9uIGluc3RhbmNlcyB0aGlzIGluc3RhbGxzIHRoZW0gYWxsLiBXaGVuIGB3aXRoRGVmYXVsdHNgIGlzIHNldCB0byBgdHJ1ZWAgdGhlbiBhbGwgZGVmYXVsdFxuICogaW50ZWdyYXRpb25zIGFyZSBhZGRlZCB1bmxlc3MgdGhleSB3ZXJlIGFscmVhZHkgcHJvdmlkZWQgYmVmb3JlLlxuICogQHBhcmFtIGludGVncmF0aW9ucyBhcnJheSBvZiBpbnRlZ3JhdGlvbiBpbnN0YW5jZXNcbiAqIEBwYXJhbSB3aXRoRGVmYXVsdCBzaG91bGQgZW5hYmxlIGRlZmF1bHQgaW50ZWdyYXRpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cEludGVncmF0aW9ucyhvcHRpb25zKSB7XG4gICAgdmFyIGludGVncmF0aW9ucyA9IHt9O1xuICAgIGdldEludGVncmF0aW9uc1RvU2V0dXAob3B0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAoaW50ZWdyYXRpb24pIHtcbiAgICAgICAgaW50ZWdyYXRpb25zW2ludGVncmF0aW9uLm5hbWVdID0gaW50ZWdyYXRpb247XG4gICAgICAgIHNldHVwSW50ZWdyYXRpb24oaW50ZWdyYXRpb24pO1xuICAgIH0pO1xuICAgIHJldHVybiBpbnRlZ3JhdGlvbnM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlZ3JhdGlvbi5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX192YWx1ZXMgfSBmcm9tIFwidHNsaWJcIjtcbi8qIGVzbGludC1kaXNhYmxlIG1heC1saW5lcyAqL1xuaW1wb3J0IHsgU2NvcGUgfSBmcm9tICdAc2VudHJ5L2h1Yic7XG5pbXBvcnQgeyBTZXNzaW9uU3RhdHVzLCB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuaW1wb3J0IHsgZGF0ZVRpbWVzdGFtcEluU2Vjb25kcywgRHNuLCBpc1ByaW1pdGl2ZSwgaXNUaGVuYWJsZSwgbG9nZ2VyLCBub3JtYWxpemUsIFNlbnRyeUVycm9yLCBTeW5jUHJvbWlzZSwgdHJ1bmNhdGUsIHV1aWQ0LCB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgc2V0dXBJbnRlZ3JhdGlvbnMgfSBmcm9tICcuL2ludGVncmF0aW9uJztcbi8qKlxuICogQmFzZSBpbXBsZW1lbnRhdGlvbiBmb3IgYWxsIEphdmFTY3JpcHQgU0RLIGNsaWVudHMuXG4gKlxuICogQ2FsbCB0aGUgY29uc3RydWN0b3Igd2l0aCB0aGUgY29ycmVzcG9uZGluZyBiYWNrZW5kIGNvbnN0cnVjdG9yIGFuZCBvcHRpb25zXG4gKiBzcGVjaWZpYyB0byB0aGUgY2xpZW50IHN1YmNsYXNzLiBUbyBhY2Nlc3MgdGhlc2Ugb3B0aW9ucyBsYXRlciwgdXNlXG4gKiB7QGxpbmsgQ2xpZW50LmdldE9wdGlvbnN9LiBBbHNvLCB0aGUgQmFja2VuZCBpbnN0YW5jZSBpcyBhdmFpbGFibGUgdmlhXG4gKiB7QGxpbmsgQ2xpZW50LmdldEJhY2tlbmR9LlxuICpcbiAqIElmIGEgRHNuIGlzIHNwZWNpZmllZCBpbiB0aGUgb3B0aW9ucywgaXQgd2lsbCBiZSBwYXJzZWQgYW5kIHN0b3JlZC4gVXNlXG4gKiB7QGxpbmsgQ2xpZW50LmdldERzbn0gdG8gcmV0cmlldmUgdGhlIERzbiBhdCBhbnkgbW9tZW50LiBJbiBjYXNlIHRoZSBEc24gaXNcbiAqIGludmFsaWQsIHRoZSBjb25zdHJ1Y3RvciB3aWxsIHRocm93IGEge0BsaW5rIFNlbnRyeUV4Y2VwdGlvbn0uIE5vdGUgdGhhdFxuICogd2l0aG91dCBhIHZhbGlkIERzbiwgdGhlIFNESyB3aWxsIG5vdCBzZW5kIGFueSBldmVudHMgdG8gU2VudHJ5LlxuICpcbiAqIEJlZm9yZSBzZW5kaW5nIGFuIGV2ZW50IHZpYSB0aGUgYmFja2VuZCwgaXQgaXMgcGFzc2VkIHRocm91Z2hcbiAqIHtAbGluayBCYXNlQ2xpZW50LnByZXBhcmVFdmVudH0gdG8gYWRkIFNESyBpbmZvcm1hdGlvbiBhbmQgc2NvcGUgZGF0YVxuICogKGJyZWFkY3J1bWJzIGFuZCBjb250ZXh0KS4gVG8gYWRkIG1vcmUgY3VzdG9tIGluZm9ybWF0aW9uLCBvdmVycmlkZSB0aGlzXG4gKiBtZXRob2QgYW5kIGV4dGVuZCB0aGUgcmVzdWx0aW5nIHByZXBhcmVkIGV2ZW50LlxuICpcbiAqIFRvIGlzc3VlIGF1dG9tYXRpY2FsbHkgY3JlYXRlZCBldmVudHMgKGUuZy4gdmlhIGluc3RydW1lbnRhdGlvbiksIHVzZVxuICoge0BsaW5rIENsaWVudC5jYXB0dXJlRXZlbnR9LiBJdCB3aWxsIHByZXBhcmUgdGhlIGV2ZW50IGFuZCBwYXNzIGl0IHRocm91Z2hcbiAqIHRoZSBjYWxsYmFjayBsaWZlY3ljbGUuIFRvIGlzc3VlIGF1dG8tYnJlYWRjcnVtYnMsIHVzZVxuICoge0BsaW5rIENsaWVudC5hZGRCcmVhZGNydW1ifS5cbiAqXG4gKiBAZXhhbXBsZVxuICogY2xhc3MgTm9kZUNsaWVudCBleHRlbmRzIEJhc2VDbGllbnQ8Tm9kZUJhY2tlbmQsIE5vZGVPcHRpb25zPiB7XG4gKiAgIHB1YmxpYyBjb25zdHJ1Y3RvcihvcHRpb25zOiBOb2RlT3B0aW9ucykge1xuICogICAgIHN1cGVyKE5vZGVCYWNrZW5kLCBvcHRpb25zKTtcbiAqICAgfVxuICpcbiAqICAgLy8gLi4uXG4gKiB9XG4gKi9cbnZhciBCYXNlQ2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoaXMgY2xpZW50IGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGJhY2tlbmRDbGFzcyBBIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgYmFja2VuZC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIGZvciB0aGUgY2xpZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEJhc2VDbGllbnQoYmFja2VuZENsYXNzLCBvcHRpb25zKSB7XG4gICAgICAgIC8qKiBBcnJheSBvZiB1c2VkIGludGVncmF0aW9ucy4gKi9cbiAgICAgICAgdGhpcy5faW50ZWdyYXRpb25zID0ge307XG4gICAgICAgIC8qKiBOdW1iZXIgb2YgY2FsbCBiZWluZyBwcm9jZXNzZWQgKi9cbiAgICAgICAgdGhpcy5fcHJvY2Vzc2luZyA9IDA7XG4gICAgICAgIHRoaXMuX2JhY2tlbmQgPSBuZXcgYmFja2VuZENsYXNzKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgaWYgKG9wdGlvbnMuZHNuKSB7XG4gICAgICAgICAgICB0aGlzLl9kc24gPSBuZXcgRHNuKG9wdGlvbnMuZHNuKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LCBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuY2FwdHVyZUV4Y2VwdGlvbiA9IGZ1bmN0aW9uIChleGNlcHRpb24sIGhpbnQsIHNjb3BlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBldmVudElkID0gaGludCAmJiBoaW50LmV2ZW50X2lkO1xuICAgICAgICB0aGlzLl9wcm9jZXNzKHRoaXMuX2dldEJhY2tlbmQoKVxuICAgICAgICAgICAgLmV2ZW50RnJvbUV4Y2VwdGlvbihleGNlcHRpb24sIGhpbnQpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIF90aGlzLl9jYXB0dXJlRXZlbnQoZXZlbnQsIGhpbnQsIHNjb3BlKTsgfSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGV2ZW50SWQgPSByZXN1bHQ7XG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIGV2ZW50SWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJhc2VDbGllbnQucHJvdG90eXBlLmNhcHR1cmVNZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UsIGxldmVsLCBoaW50LCBzY29wZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgZXZlbnRJZCA9IGhpbnQgJiYgaGludC5ldmVudF9pZDtcbiAgICAgICAgdmFyIHByb21pc2VkRXZlbnQgPSBpc1ByaW1pdGl2ZShtZXNzYWdlKVxuICAgICAgICAgICAgPyB0aGlzLl9nZXRCYWNrZW5kKCkuZXZlbnRGcm9tTWVzc2FnZShcIlwiICsgbWVzc2FnZSwgbGV2ZWwsIGhpbnQpXG4gICAgICAgICAgICA6IHRoaXMuX2dldEJhY2tlbmQoKS5ldmVudEZyb21FeGNlcHRpb24obWVzc2FnZSwgaGludCk7XG4gICAgICAgIHRoaXMuX3Byb2Nlc3MocHJvbWlzZWRFdmVudFxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBfdGhpcy5fY2FwdHVyZUV2ZW50KGV2ZW50LCBoaW50LCBzY29wZSk7IH0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICBldmVudElkID0gcmVzdWx0O1xuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBldmVudElkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5jYXB0dXJlRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQsIGhpbnQsIHNjb3BlKSB7XG4gICAgICAgIHZhciBldmVudElkID0gaGludCAmJiBoaW50LmV2ZW50X2lkO1xuICAgICAgICB0aGlzLl9wcm9jZXNzKHRoaXMuX2NhcHR1cmVFdmVudChldmVudCwgaGludCwgc2NvcGUpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgZXZlbnRJZCA9IHJlc3VsdDtcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gZXZlbnRJZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuY2FwdHVyZVNlc3Npb24gPSBmdW5jdGlvbiAoc2Vzc2lvbikge1xuICAgICAgICBpZiAoIXNlc3Npb24ucmVsZWFzZSkge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ0Rpc2NhcmRlZCBzZXNzaW9uIGJlY2F1c2Ugb2YgbWlzc2luZyByZWxlYXNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zZW5kU2Vzc2lvbihzZXNzaW9uKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5nZXREc24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kc247XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJhc2VDbGllbnQucHJvdG90eXBlLmdldE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0NsaWVudFByb2Nlc3NpbmcodGltZW91dCkudGhlbihmdW5jdGlvbiAocmVhZHkpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5fZ2V0QmFja2VuZCgpXG4gICAgICAgICAgICAgICAgLmdldFRyYW5zcG9ydCgpXG4gICAgICAgICAgICAgICAgLmNsb3NlKHRpbWVvdXQpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHRyYW5zcG9ydEZsdXNoZWQpIHsgcmV0dXJuIHJlYWR5ICYmIHRyYW5zcG9ydEZsdXNoZWQ7IH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAodGltZW91dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5mbHVzaCh0aW1lb3V0KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIF90aGlzLmdldE9wdGlvbnMoKS5lbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgdXAgdGhlIGludGVncmF0aW9uc1xuICAgICAqL1xuICAgIEJhc2VDbGllbnQucHJvdG90eXBlLnNldHVwSW50ZWdyYXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5faXNFbmFibGVkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2ludGVncmF0aW9ucyA9IHNldHVwSW50ZWdyYXRpb25zKHRoaXMuX29wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJhc2VDbGllbnQucHJvdG90eXBlLmdldEludGVncmF0aW9uID0gZnVuY3Rpb24gKGludGVncmF0aW9uKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW50ZWdyYXRpb25zW2ludGVncmF0aW9uLmlkXSB8fCBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChfb08pIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKFwiQ2Fubm90IHJldHJpZXZlIGludGVncmF0aW9uIFwiICsgaW50ZWdyYXRpb24uaWQgKyBcIiBmcm9tIHRoZSBjdXJyZW50IENsaWVudFwiKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKiogVXBkYXRlcyBleGlzdGluZyBzZXNzaW9uIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBldmVudCAqL1xuICAgIEJhc2VDbGllbnQucHJvdG90eXBlLl91cGRhdGVTZXNzaW9uRnJvbUV2ZW50ID0gZnVuY3Rpb24gKHNlc3Npb24sIGV2ZW50KSB7XG4gICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICB2YXIgY3Jhc2hlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3JlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgdXNlckFnZW50O1xuICAgICAgICB2YXIgZXhjZXB0aW9ucyA9IGV2ZW50LmV4Y2VwdGlvbiAmJiBldmVudC5leGNlcHRpb24udmFsdWVzO1xuICAgICAgICBpZiAoZXhjZXB0aW9ucykge1xuICAgICAgICAgICAgZXJyb3JlZCA9IHRydWU7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGV4Y2VwdGlvbnNfMSA9IF9fdmFsdWVzKGV4Y2VwdGlvbnMpLCBleGNlcHRpb25zXzFfMSA9IGV4Y2VwdGlvbnNfMS5uZXh0KCk7ICFleGNlcHRpb25zXzFfMS5kb25lOyBleGNlcHRpb25zXzFfMSA9IGV4Y2VwdGlvbnNfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV4ID0gZXhjZXB0aW9uc18xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtZWNoYW5pc20gPSBleC5tZWNoYW5pc207XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZWNoYW5pc20gJiYgbWVjaGFuaXNtLmhhbmRsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcmFzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChleGNlcHRpb25zXzFfMSAmJiAhZXhjZXB0aW9uc18xXzEuZG9uZSAmJiAoX2EgPSBleGNlcHRpb25zXzEucmV0dXJuKSkgX2EuY2FsbChleGNlcHRpb25zXzEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHVzZXIgPSBldmVudC51c2VyO1xuICAgICAgICBpZiAoIXNlc3Npb24udXNlckFnZW50KSB7XG4gICAgICAgICAgICB2YXIgaGVhZGVycyA9IGV2ZW50LnJlcXVlc3QgPyBldmVudC5yZXF1ZXN0LmhlYWRlcnMgOiB7fTtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleS50b0xvd2VyQ2FzZSgpID09PSAndXNlci1hZ2VudCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdXNlckFnZW50ID0gaGVhZGVyc1trZXldO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2Vzc2lvbi51cGRhdGUoX19hc3NpZ24oX19hc3NpZ24oe30sIChjcmFzaGVkICYmIHsgc3RhdHVzOiBTZXNzaW9uU3RhdHVzLkNyYXNoZWQgfSkpLCB7IHVzZXI6IHVzZXIsXG4gICAgICAgICAgICB1c2VyQWdlbnQ6IHVzZXJBZ2VudCwgZXJyb3JzOiBzZXNzaW9uLmVycm9ycyArIE51bWJlcihlcnJvcmVkIHx8IGNyYXNoZWQpIH0pKTtcbiAgICB9O1xuICAgIC8qKiBEZWxpdmVyIGNhcHR1cmVkIHNlc3Npb24gdG8gU2VudHJ5ICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuX3NlbmRTZXNzaW9uID0gZnVuY3Rpb24gKHNlc3Npb24pIHtcbiAgICAgICAgdGhpcy5fZ2V0QmFja2VuZCgpLnNlbmRTZXNzaW9uKHNlc3Npb24pO1xuICAgIH07XG4gICAgLyoqIFdhaXRzIGZvciB0aGUgY2xpZW50IHRvIGJlIGRvbmUgd2l0aCBwcm9jZXNzaW5nLiAqL1xuICAgIEJhc2VDbGllbnQucHJvdG90eXBlLl9pc0NsaWVudFByb2Nlc3NpbmcgPSBmdW5jdGlvbiAodGltZW91dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFN5bmNQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICB2YXIgdGlja2VkID0gMDtcbiAgICAgICAgICAgIHZhciB0aWNrID0gMTtcbiAgICAgICAgICAgIHZhciBpbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX3Byb2Nlc3NpbmcgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRpY2tlZCArPSB0aWNrO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGltZW91dCAmJiB0aWNrZWQgPj0gdGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRpY2spO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKiBSZXR1cm5zIHRoZSBjdXJyZW50IGJhY2tlbmQuICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuX2dldEJhY2tlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iYWNrZW5kO1xuICAgIH07XG4gICAgLyoqIERldGVybWluZXMgd2hldGhlciB0aGlzIFNESyBpcyBlbmFibGVkIGFuZCBhIHZhbGlkIERzbiBpcyBwcmVzZW50LiAqL1xuICAgIEJhc2VDbGllbnQucHJvdG90eXBlLl9pc0VuYWJsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9wdGlvbnMoKS5lbmFibGVkICE9PSBmYWxzZSAmJiB0aGlzLl9kc24gIT09IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZHMgY29tbW9uIGluZm9ybWF0aW9uIHRvIGV2ZW50cy5cbiAgICAgKlxuICAgICAqIFRoZSBpbmZvcm1hdGlvbiBpbmNsdWRlcyByZWxlYXNlIGFuZCBlbnZpcm9ubWVudCBmcm9tIGBvcHRpb25zYCxcbiAgICAgKiBicmVhZGNydW1icyBhbmQgY29udGV4dCAoZXh0cmEsIHRhZ3MgYW5kIHVzZXIpIGZyb20gdGhlIHNjb3BlLlxuICAgICAqXG4gICAgICogSW5mb3JtYXRpb24gdGhhdCBpcyBhbHJlYWR5IHByZXNlbnQgaW4gdGhlIGV2ZW50IGlzIG5ldmVyIG92ZXJ3cml0dGVuLiBGb3JcbiAgICAgKiBuZXN0ZWQgb2JqZWN0cywgc3VjaCBhcyB0aGUgY29udGV4dCwga2V5cyBhcmUgbWVyZ2VkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50IFRoZSBvcmlnaW5hbCBldmVudC5cbiAgICAgKiBAcGFyYW0gaGludCBNYXkgY29udGFpbiBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvcmlnaW5hbCBleGNlcHRpb24uXG4gICAgICogQHBhcmFtIHNjb3BlIEEgc2NvcGUgY29udGFpbmluZyBldmVudCBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyBBIG5ldyBldmVudCB3aXRoIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuX3ByZXBhcmVFdmVudCA9IGZ1bmN0aW9uIChldmVudCwgc2NvcGUsIGhpbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9hID0gdGhpcy5nZXRPcHRpb25zKCkubm9ybWFsaXplRGVwdGgsIG5vcm1hbGl6ZURlcHRoID0gX2EgPT09IHZvaWQgMCA/IDMgOiBfYTtcbiAgICAgICAgdmFyIHByZXBhcmVkID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGV2ZW50KSwgeyBldmVudF9pZDogZXZlbnQuZXZlbnRfaWQgfHwgKGhpbnQgJiYgaGludC5ldmVudF9pZCA/IGhpbnQuZXZlbnRfaWQgOiB1dWlkNCgpKSwgdGltZXN0YW1wOiBldmVudC50aW1lc3RhbXAgfHwgZGF0ZVRpbWVzdGFtcEluU2Vjb25kcygpIH0pO1xuICAgICAgICB0aGlzLl9hcHBseUNsaWVudE9wdGlvbnMocHJlcGFyZWQpO1xuICAgICAgICB0aGlzLl9hcHBseUludGVncmF0aW9uc01ldGFkYXRhKHByZXBhcmVkKTtcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBzY29wZSBnaXZlbiB0byB1cywgdXNlIGl0IGFzIHRoZSBiYXNlIGZvciBmdXJ0aGVyIG1vZGlmaWNhdGlvbnMuXG4gICAgICAgIC8vIFRoaXMgYWxsb3dzIHVzIHRvIHByZXZlbnQgdW5uZWNlc3NhcnkgY29weWluZyBvZiBkYXRhIGlmIGBjYXB0dXJlQ29udGV4dGAgaXMgbm90IHByb3ZpZGVkLlxuICAgICAgICB2YXIgZmluYWxTY29wZSA9IHNjb3BlO1xuICAgICAgICBpZiAoaGludCAmJiBoaW50LmNhcHR1cmVDb250ZXh0KSB7XG4gICAgICAgICAgICBmaW5hbFNjb3BlID0gU2NvcGUuY2xvbmUoZmluYWxTY29wZSkudXBkYXRlKGhpbnQuY2FwdHVyZUNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdlIHByZXBhcmUgdGhlIHJlc3VsdCBoZXJlIHdpdGggYSByZXNvbHZlZCBFdmVudC5cbiAgICAgICAgdmFyIHJlc3VsdCA9IFN5bmNQcm9taXNlLnJlc29sdmUocHJlcGFyZWQpO1xuICAgICAgICAvLyBUaGlzIHNob3VsZCBiZSB0aGUgbGFzdCB0aGluZyBjYWxsZWQsIHNpbmNlIHdlIHdhbnQgdGhhdFxuICAgICAgICAvLyB7QGxpbmsgSHViLmFkZEV2ZW50UHJvY2Vzc29yfSBnZXRzIHRoZSBmaW5pc2hlZCBwcmVwYXJlZCBldmVudC5cbiAgICAgICAgaWYgKGZpbmFsU2NvcGUpIHtcbiAgICAgICAgICAgIC8vIEluIGNhc2Ugd2UgaGF2ZSBhIGh1YiB3ZSByZWFzc2lnbiBpdC5cbiAgICAgICAgICAgIHJlc3VsdCA9IGZpbmFsU2NvcGUuYXBwbHlUb0V2ZW50KHByZXBhcmVkLCBoaW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0LnRoZW4oZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBub3JtYWxpemVEZXB0aCA9PT0gJ251bWJlcicgJiYgbm9ybWFsaXplRGVwdGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9ub3JtYWxpemVFdmVudChldnQsIG5vcm1hbGl6ZURlcHRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBldnQ7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQXBwbGllcyBgbm9ybWFsaXplYCBmdW5jdGlvbiBvbiBuZWNlc3NhcnkgYEV2ZW50YCBhdHRyaWJ1dGVzIHRvIG1ha2UgdGhlbSBzYWZlIGZvciBzZXJpYWxpemF0aW9uLlxuICAgICAqIE5vcm1hbGl6ZWQga2V5czpcbiAgICAgKiAtIGBicmVhZGNydW1icy5kYXRhYFxuICAgICAqIC0gYHVzZXJgXG4gICAgICogLSBgY29udGV4dHNgXG4gICAgICogLSBgZXh0cmFgXG4gICAgICogQHBhcmFtIGV2ZW50IEV2ZW50XG4gICAgICogQHJldHVybnMgTm9ybWFsaXplZCBldmVudFxuICAgICAqL1xuICAgIEJhc2VDbGllbnQucHJvdG90eXBlLl9ub3JtYWxpemVFdmVudCA9IGZ1bmN0aW9uIChldmVudCwgZGVwdGgpIHtcbiAgICAgICAgaWYgKCFldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5vcm1hbGl6ZWQgPSBfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZXZlbnQpLCAoZXZlbnQuYnJlYWRjcnVtYnMgJiYge1xuICAgICAgICAgICAgYnJlYWRjcnVtYnM6IGV2ZW50LmJyZWFkY3J1bWJzLm1hcChmdW5jdGlvbiAoYikgeyByZXR1cm4gKF9fYXNzaWduKF9fYXNzaWduKHt9LCBiKSwgKGIuZGF0YSAmJiB7XG4gICAgICAgICAgICAgICAgZGF0YTogbm9ybWFsaXplKGIuZGF0YSwgZGVwdGgpLFxuICAgICAgICAgICAgfSkpKTsgfSksXG4gICAgICAgIH0pKSwgKGV2ZW50LnVzZXIgJiYge1xuICAgICAgICAgICAgdXNlcjogbm9ybWFsaXplKGV2ZW50LnVzZXIsIGRlcHRoKSxcbiAgICAgICAgfSkpLCAoZXZlbnQuY29udGV4dHMgJiYge1xuICAgICAgICAgICAgY29udGV4dHM6IG5vcm1hbGl6ZShldmVudC5jb250ZXh0cywgZGVwdGgpLFxuICAgICAgICB9KSksIChldmVudC5leHRyYSAmJiB7XG4gICAgICAgICAgICBleHRyYTogbm9ybWFsaXplKGV2ZW50LmV4dHJhLCBkZXB0aCksXG4gICAgICAgIH0pKTtcbiAgICAgICAgLy8gZXZlbnQuY29udGV4dHMudHJhY2Ugc3RvcmVzIGluZm9ybWF0aW9uIGFib3V0IGEgVHJhbnNhY3Rpb24uIFNpbWlsYXJseSxcbiAgICAgICAgLy8gZXZlbnQuc3BhbnNbXSBzdG9yZXMgaW5mb3JtYXRpb24gYWJvdXQgY2hpbGQgU3BhbnMuIEdpdmVuIHRoYXQgYVxuICAgICAgICAvLyBUcmFuc2FjdGlvbiBpcyBjb25jZXB0dWFsbHkgYSBTcGFuLCBub3JtYWxpemF0aW9uIHNob3VsZCBhcHBseSB0byBib3RoXG4gICAgICAgIC8vIFRyYW5zYWN0aW9ucyBhbmQgU3BhbnMgY29uc2lzdGVudGx5LlxuICAgICAgICAvLyBGb3Igbm93IHRoZSBkZWNpc2lvbiBpcyB0byBza2lwIG5vcm1hbGl6YXRpb24gb2YgVHJhbnNhY3Rpb25zIGFuZCBTcGFucyxcbiAgICAgICAgLy8gc28gdGhpcyBibG9jayBvdmVyd3JpdGVzIHRoZSBub3JtYWxpemVkIGV2ZW50IHRvIGFkZCBiYWNrIHRoZSBvcmlnaW5hbFxuICAgICAgICAvLyBUcmFuc2FjdGlvbiBpbmZvcm1hdGlvbiBwcmlvciB0byBub3JtYWxpemF0aW9uLlxuICAgICAgICBpZiAoZXZlbnQuY29udGV4dHMgJiYgZXZlbnQuY29udGV4dHMudHJhY2UpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgICAgIG5vcm1hbGl6ZWQuY29udGV4dHMudHJhY2UgPSBldmVudC5jb250ZXh0cy50cmFjZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9ybWFsaXplZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqICBFbmhhbmNlcyBldmVudCB1c2luZyB0aGUgY2xpZW50IGNvbmZpZ3VyYXRpb24uXG4gICAgICogIEl0IHRha2VzIGNhcmUgb2YgYWxsIFwic3RhdGljXCIgdmFsdWVzIGxpa2UgZW52aXJvbm1lbnQsIHJlbGVhc2UgYW5kIGBkaXN0YCxcbiAgICAgKiAgYXMgd2VsbCBhcyB0cnVuY2F0aW5nIG92ZXJseSBsb25nIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0gZXZlbnQgZXZlbnQgaW5zdGFuY2UgdG8gYmUgZW5oYW5jZWRcbiAgICAgKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5fYXBwbHlDbGllbnRPcHRpb25zID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XG4gICAgICAgIHZhciBlbnZpcm9ubWVudCA9IG9wdGlvbnMuZW52aXJvbm1lbnQsIHJlbGVhc2UgPSBvcHRpb25zLnJlbGVhc2UsIGRpc3QgPSBvcHRpb25zLmRpc3QsIF9hID0gb3B0aW9ucy5tYXhWYWx1ZUxlbmd0aCwgbWF4VmFsdWVMZW5ndGggPSBfYSA9PT0gdm9pZCAwID8gMjUwIDogX2E7XG4gICAgICAgIGlmICghKCdlbnZpcm9ubWVudCcgaW4gZXZlbnQpKSB7XG4gICAgICAgICAgICBldmVudC5lbnZpcm9ubWVudCA9ICdlbnZpcm9ubWVudCcgaW4gb3B0aW9ucyA/IGVudmlyb25tZW50IDogJ3Byb2R1Y3Rpb24nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudC5yZWxlYXNlID09PSB1bmRlZmluZWQgJiYgcmVsZWFzZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBldmVudC5yZWxlYXNlID0gcmVsZWFzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQuZGlzdCA9PT0gdW5kZWZpbmVkICYmIGRpc3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZXZlbnQuZGlzdCA9IGRpc3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50Lm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGV2ZW50Lm1lc3NhZ2UgPSB0cnVuY2F0ZShldmVudC5tZXNzYWdlLCBtYXhWYWx1ZUxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGV4Y2VwdGlvbiA9IGV2ZW50LmV4Y2VwdGlvbiAmJiBldmVudC5leGNlcHRpb24udmFsdWVzICYmIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF07XG4gICAgICAgIGlmIChleGNlcHRpb24gJiYgZXhjZXB0aW9uLnZhbHVlKSB7XG4gICAgICAgICAgICBleGNlcHRpb24udmFsdWUgPSB0cnVuY2F0ZShleGNlcHRpb24udmFsdWUsIG1heFZhbHVlTGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVxdWVzdCA9IGV2ZW50LnJlcXVlc3Q7XG4gICAgICAgIGlmIChyZXF1ZXN0ICYmIHJlcXVlc3QudXJsKSB7XG4gICAgICAgICAgICByZXF1ZXN0LnVybCA9IHRydW5jYXRlKHJlcXVlc3QudXJsLCBtYXhWYWx1ZUxlbmd0aCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gYWRkcyBhbGwgdXNlZCBpbnRlZ3JhdGlvbnMgdG8gdGhlIFNESyBpbmZvIGluIHRoZSBldmVudC5cbiAgICAgKiBAcGFyYW0gc2RrSW5mbyBUaGUgc2RrSW5mbyBvZiB0aGUgZXZlbnQgdGhhdCB3aWxsIGJlIGZpbGxlZCB3aXRoIGFsbCBpbnRlZ3JhdGlvbnMuXG4gICAgICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuX2FwcGx5SW50ZWdyYXRpb25zTWV0YWRhdGEgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIHNka0luZm8gPSBldmVudC5zZGs7XG4gICAgICAgIHZhciBpbnRlZ3JhdGlvbnNBcnJheSA9IE9iamVjdC5rZXlzKHRoaXMuX2ludGVncmF0aW9ucyk7XG4gICAgICAgIGlmIChzZGtJbmZvICYmIGludGVncmF0aW9uc0FycmF5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHNka0luZm8uaW50ZWdyYXRpb25zID0gaW50ZWdyYXRpb25zQXJyYXk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRlbGxzIHRoZSBiYWNrZW5kIHRvIHNlbmQgdGhpcyBldmVudFxuICAgICAqIEBwYXJhbSBldmVudCBUaGUgU2VudHJ5IGV2ZW50IHRvIHNlbmRcbiAgICAgKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5fc2VuZEV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuX2dldEJhY2tlbmQoKS5zZW5kRXZlbnQoZXZlbnQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUHJvY2Vzc2VzIHRoZSBldmVudCBhbmQgbG9ncyBhbiBlcnJvciBpbiBjYXNlIG9mIHJlamVjdGlvblxuICAgICAqIEBwYXJhbSBldmVudFxuICAgICAqIEBwYXJhbSBoaW50XG4gICAgICogQHBhcmFtIHNjb3BlXG4gICAgICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuX2NhcHR1cmVFdmVudCA9IGZ1bmN0aW9uIChldmVudCwgaGludCwgc2NvcGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2Nlc3NFdmVudChldmVudCwgaGludCwgc2NvcGUpLnRoZW4oZnVuY3Rpb24gKGZpbmFsRXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBmaW5hbEV2ZW50LmV2ZW50X2lkO1xuICAgICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IocmVhc29uKTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUHJvY2Vzc2VzIGFuIGV2ZW50IChlaXRoZXIgZXJyb3Igb3IgbWVzc2FnZSkgYW5kIHNlbmRzIGl0IHRvIFNlbnRyeS5cbiAgICAgKlxuICAgICAqIFRoaXMgYWxzbyBhZGRzIGJyZWFkY3J1bWJzIGFuZCBjb250ZXh0IGluZm9ybWF0aW9uIHRvIHRoZSBldmVudC4gSG93ZXZlcixcbiAgICAgKiBwbGF0Zm9ybSBzcGVjaWZpYyBtZXRhIGRhdGEgKHN1Y2ggYXMgdGhlIFVzZXIncyBJUCBhZGRyZXNzKSBtdXN0IGJlIGFkZGVkXG4gICAgICogYnkgdGhlIFNESyBpbXBsZW1lbnRvci5cbiAgICAgKlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCB0byBzZW5kIHRvIFNlbnRyeS5cbiAgICAgKiBAcGFyYW0gaGludCBNYXkgY29udGFpbiBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvcmlnaW5hbCBleGNlcHRpb24uXG4gICAgICogQHBhcmFtIHNjb3BlIEEgc2NvcGUgY29udGFpbmluZyBldmVudCBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyBBIFN5bmNQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgZXZlbnQgb3IgcmVqZWN0cyBpbiBjYXNlIGV2ZW50IHdhcy93aWxsIG5vdCBiZSBzZW5kLlxuICAgICAqL1xuICAgIEJhc2VDbGllbnQucHJvdG90eXBlLl9wcm9jZXNzRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQsIGhpbnQsIHNjb3BlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgICAgICAgdmFyIF9hID0gdGhpcy5nZXRPcHRpb25zKCksIGJlZm9yZVNlbmQgPSBfYS5iZWZvcmVTZW5kLCBzYW1wbGVSYXRlID0gX2Euc2FtcGxlUmF0ZTtcbiAgICAgICAgaWYgKCF0aGlzLl9pc0VuYWJsZWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIFN5bmNQcm9taXNlLnJlamVjdChuZXcgU2VudHJ5RXJyb3IoJ1NESyBub3QgZW5hYmxlZCwgd2lsbCBub3Qgc2VuZCBldmVudC4nKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGlzVHJhbnNhY3Rpb24gPSBldmVudC50eXBlID09PSAndHJhbnNhY3Rpb24nO1xuICAgICAgICAvLyAxLjAgPT09IDEwMCUgZXZlbnRzIGFyZSBzZW50XG4gICAgICAgIC8vIDAuMCA9PT0gMCUgZXZlbnRzIGFyZSBzZW50XG4gICAgICAgIC8vIFNhbXBsaW5nIGZvciB0cmFuc2FjdGlvbiBoYXBwZW5zIHNvbWV3aGVyZSBlbHNlXG4gICAgICAgIGlmICghaXNUcmFuc2FjdGlvbiAmJiB0eXBlb2Ygc2FtcGxlUmF0ZSA9PT0gJ251bWJlcicgJiYgTWF0aC5yYW5kb20oKSA+IHNhbXBsZVJhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBTeW5jUHJvbWlzZS5yZWplY3QobmV3IFNlbnRyeUVycm9yKCdUaGlzIGV2ZW50IGhhcyBiZWVuIHNhbXBsZWQsIHdpbGwgbm90IHNlbmQgZXZlbnQuJykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wcmVwYXJlRXZlbnQoZXZlbnQsIHNjb3BlLCBoaW50KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHByZXBhcmVkKSB7XG4gICAgICAgICAgICBpZiAocHJlcGFyZWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU2VudHJ5RXJyb3IoJ0FuIGV2ZW50IHByb2Nlc3NvciByZXR1cm5lZCBudWxsLCB3aWxsIG5vdCBzZW5kIGV2ZW50LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGlzSW50ZXJuYWxFeGNlcHRpb24gPSBoaW50ICYmIGhpbnQuZGF0YSAmJiBoaW50LmRhdGEuX19zZW50cnlfXyA9PT0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChpc0ludGVybmFsRXhjZXB0aW9uIHx8IGlzVHJhbnNhY3Rpb24gfHwgIWJlZm9yZVNlbmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJlcGFyZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYmVmb3JlU2VuZFJlc3VsdCA9IGJlZm9yZVNlbmQocHJlcGFyZWQsIGhpbnQpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBiZWZvcmVTZW5kUmVzdWx0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBTZW50cnlFcnJvcignYGJlZm9yZVNlbmRgIG1ldGhvZCBoYXMgdG8gcmV0dXJuIGBudWxsYCBvciBhIHZhbGlkIGV2ZW50LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNUaGVuYWJsZShiZWZvcmVTZW5kUmVzdWx0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBiZWZvcmVTZW5kUmVzdWx0LnRoZW4oZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBldmVudDsgfSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNlbnRyeUVycm9yKFwiYmVmb3JlU2VuZCByZWplY3RlZCB3aXRoIFwiICsgZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYmVmb3JlU2VuZFJlc3VsdDtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChwcm9jZXNzZWRFdmVudCkge1xuICAgICAgICAgICAgaWYgKHByb2Nlc3NlZEV2ZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNlbnRyeUVycm9yKCdgYmVmb3JlU2VuZGAgcmV0dXJuZWQgYG51bGxgLCB3aWxsIG5vdCBzZW5kIGV2ZW50LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHNlc3Npb24gPSBzY29wZSAmJiBzY29wZS5nZXRTZXNzaW9uICYmIHNjb3BlLmdldFNlc3Npb24oKTtcbiAgICAgICAgICAgIGlmICghaXNUcmFuc2FjdGlvbiAmJiBzZXNzaW9uKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3VwZGF0ZVNlc3Npb25Gcm9tRXZlbnQoc2Vzc2lvbiwgcHJvY2Vzc2VkRXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuX3NlbmRFdmVudChwcm9jZXNzZWRFdmVudCk7XG4gICAgICAgICAgICByZXR1cm4gcHJvY2Vzc2VkRXZlbnQ7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihudWxsLCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgICBpZiAocmVhc29uIGluc3RhbmNlb2YgU2VudHJ5RXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyByZWFzb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5jYXB0dXJlRXhjZXB0aW9uKHJlYXNvbiwge1xuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgX19zZW50cnlfXzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsRXhjZXB0aW9uOiByZWFzb24sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRocm93IG5ldyBTZW50cnlFcnJvcihcIkV2ZW50IHByb2Nlc3NpbmcgcGlwZWxpbmUgdGhyZXcgYW4gZXJyb3IsIG9yaWdpbmFsIGV2ZW50IHdpbGwgbm90IGJlIHNlbnQuIERldGFpbHMgaGF2ZSBiZWVuIHNlbnQgYXMgYSBuZXcgZXZlbnQuXFxuUmVhc29uOiBcIiArIHJlYXNvbik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogT2NjdXBpZXMgdGhlIGNsaWVudCB3aXRoIHByb2Nlc3NpbmcgYW5kIGV2ZW50XG4gICAgICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuX3Byb2Nlc3MgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9wcm9jZXNzaW5nICs9IDE7XG4gICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIF90aGlzLl9wcm9jZXNzaW5nIC09IDE7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgIF90aGlzLl9wcm9jZXNzaW5nIC09IDE7XG4gICAgICAgICAgICByZXR1cm4gcmVhc29uO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBCYXNlQ2xpZW50O1xufSgpKTtcbmV4cG9ydCB7IEJhc2VDbGllbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2VjbGllbnQuanMubWFwIiwiLyoqIFRoZSBzdGF0dXMgb2YgYW4gZXZlbnQuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L2V4cG9ydFxuZXhwb3J0IHZhciBTdGF0dXM7XG4oZnVuY3Rpb24gKFN0YXR1cykge1xuICAgIC8qKiBUaGUgc3RhdHVzIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkLiAqL1xuICAgIFN0YXR1c1tcIlVua25vd25cIl0gPSBcInVua25vd25cIjtcbiAgICAvKiogVGhlIGV2ZW50IHdhcyBza2lwcGVkIGR1ZSB0byBjb25maWd1cmF0aW9uIG9yIGNhbGxiYWNrcy4gKi9cbiAgICBTdGF0dXNbXCJTa2lwcGVkXCJdID0gXCJza2lwcGVkXCI7XG4gICAgLyoqIFRoZSBldmVudCB3YXMgc2VudCB0byBTZW50cnkgc3VjY2Vzc2Z1bGx5LiAqL1xuICAgIFN0YXR1c1tcIlN1Y2Nlc3NcIl0gPSBcInN1Y2Nlc3NcIjtcbiAgICAvKiogVGhlIGNsaWVudCBpcyBjdXJyZW50bHkgcmF0ZSBsaW1pdGVkIGFuZCB3aWxsIHRyeSBhZ2FpbiBsYXRlci4gKi9cbiAgICBTdGF0dXNbXCJSYXRlTGltaXRcIl0gPSBcInJhdGVfbGltaXRcIjtcbiAgICAvKiogVGhlIGV2ZW50IGNvdWxkIG5vdCBiZSBwcm9jZXNzZWQuICovXG4gICAgU3RhdHVzW1wiSW52YWxpZFwiXSA9IFwiaW52YWxpZFwiO1xuICAgIC8qKiBBIHNlcnZlci1zaWRlIGVycm9yIG9jdXJyZWQgZHVyaW5nIHN1Ym1pc3Npb24uICovXG4gICAgU3RhdHVzW1wiRmFpbGVkXCJdID0gXCJmYWlsZWRcIjtcbn0pKFN0YXR1cyB8fCAoU3RhdHVzID0ge30pKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlLCBpbXBvcnQvZXhwb3J0XG4oZnVuY3Rpb24gKFN0YXR1cykge1xuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGEgSFRUUCBzdGF0dXMgY29kZSBpbnRvIGEge0BsaW5rIFN0YXR1c30uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29kZSBUaGUgSFRUUCByZXNwb25zZSBzdGF0dXMgY29kZS5cbiAgICAgKiBAcmV0dXJucyBUaGUgc2VuZCBzdGF0dXMgb3Ige0BsaW5rIFN0YXR1cy5Vbmtub3dufS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tSHR0cENvZGUoY29kZSkge1xuICAgICAgICBpZiAoY29kZSA+PSAyMDAgJiYgY29kZSA8IDMwMCkge1xuICAgICAgICAgICAgcmV0dXJuIFN0YXR1cy5TdWNjZXNzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2RlID09PSA0MjkpIHtcbiAgICAgICAgICAgIHJldHVybiBTdGF0dXMuUmF0ZUxpbWl0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2RlID49IDQwMCAmJiBjb2RlIDwgNTAwKSB7XG4gICAgICAgICAgICByZXR1cm4gU3RhdHVzLkludmFsaWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvZGUgPj0gNTAwKSB7XG4gICAgICAgICAgICByZXR1cm4gU3RhdHVzLkZhaWxlZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU3RhdHVzLlVua25vd247XG4gICAgfVxuICAgIFN0YXR1cy5mcm9tSHR0cENvZGUgPSBmcm9tSHR0cENvZGU7XG59KShTdGF0dXMgfHwgKFN0YXR1cyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0dXMuanMubWFwIiwiaW1wb3J0IHsgU3RhdHVzIH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBTeW5jUHJvbWlzZSB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuLyoqIE5vb3AgdHJhbnNwb3J0ICovXG52YXIgTm9vcFRyYW5zcG9ydCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOb29wVHJhbnNwb3J0KCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIE5vb3BUcmFuc3BvcnQucHJvdG90eXBlLnNlbmRFdmVudCA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICAgIHJldHVybiBTeW5jUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICAgIHJlYXNvbjogXCJOb29wVHJhbnNwb3J0OiBFdmVudCBoYXMgYmVlbiBza2lwcGVkIGJlY2F1c2Ugbm8gRHNuIGlzIGNvbmZpZ3VyZWQuXCIsXG4gICAgICAgICAgICBzdGF0dXM6IFN0YXR1cy5Ta2lwcGVkLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgTm9vcFRyYW5zcG9ydC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoXykge1xuICAgICAgICByZXR1cm4gU3luY1Byb21pc2UucmVzb2x2ZSh0cnVlKTtcbiAgICB9O1xuICAgIHJldHVybiBOb29wVHJhbnNwb3J0O1xufSgpKTtcbmV4cG9ydCB7IE5vb3BUcmFuc3BvcnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vb3AuanMubWFwIiwiLyoqIEpTRG9jICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L2V4cG9ydFxuZXhwb3J0IHZhciBTZXZlcml0eTtcbihmdW5jdGlvbiAoU2V2ZXJpdHkpIHtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBTZXZlcml0eVtcIkZhdGFsXCJdID0gXCJmYXRhbFwiO1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFNldmVyaXR5W1wiRXJyb3JcIl0gPSBcImVycm9yXCI7XG4gICAgLyoqIEpTRG9jICovXG4gICAgU2V2ZXJpdHlbXCJXYXJuaW5nXCJdID0gXCJ3YXJuaW5nXCI7XG4gICAgLyoqIEpTRG9jICovXG4gICAgU2V2ZXJpdHlbXCJMb2dcIl0gPSBcImxvZ1wiO1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFNldmVyaXR5W1wiSW5mb1wiXSA9IFwiaW5mb1wiO1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFNldmVyaXR5W1wiRGVidWdcIl0gPSBcImRlYnVnXCI7XG4gICAgLyoqIEpTRG9jICovXG4gICAgU2V2ZXJpdHlbXCJDcml0aWNhbFwiXSA9IFwiY3JpdGljYWxcIjtcbn0pKFNldmVyaXR5IHx8IChTZXZlcml0eSA9IHt9KSk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZSwgaW1wb3J0L2V4cG9ydFxuKGZ1bmN0aW9uIChTZXZlcml0eSkge1xuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGEgc3RyaW5nLWJhc2VkIGxldmVsIGludG8gYSB7QGxpbmsgU2V2ZXJpdHl9LlxuICAgICAqXG4gICAgICogQHBhcmFtIGxldmVsIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBTZXZlcml0eVxuICAgICAqIEByZXR1cm5zIFNldmVyaXR5XG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbVN0cmluZyhsZXZlbCkge1xuICAgICAgICBzd2l0Y2ggKGxldmVsKSB7XG4gICAgICAgICAgICBjYXNlICdkZWJ1Zyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFNldmVyaXR5LkRlYnVnO1xuICAgICAgICAgICAgY2FzZSAnaW5mbyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFNldmVyaXR5LkluZm87XG4gICAgICAgICAgICBjYXNlICd3YXJuJzpcbiAgICAgICAgICAgIGNhc2UgJ3dhcm5pbmcnOlxuICAgICAgICAgICAgICAgIHJldHVybiBTZXZlcml0eS5XYXJuaW5nO1xuICAgICAgICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICAgICAgICAgIHJldHVybiBTZXZlcml0eS5FcnJvcjtcbiAgICAgICAgICAgIGNhc2UgJ2ZhdGFsJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gU2V2ZXJpdHkuRmF0YWw7XG4gICAgICAgICAgICBjYXNlICdjcml0aWNhbCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFNldmVyaXR5LkNyaXRpY2FsO1xuICAgICAgICAgICAgY2FzZSAnbG9nJzpcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFNldmVyaXR5LkxvZztcbiAgICAgICAgfVxuICAgIH1cbiAgICBTZXZlcml0eS5mcm9tU3RyaW5nID0gZnJvbVN0cmluZztcbn0pKFNldmVyaXR5IHx8IChTZXZlcml0eSA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXZlcml0eS5qcy5tYXAiLCJpbXBvcnQgeyBsb2dnZXIsIFNlbnRyeUVycm9yIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBOb29wVHJhbnNwb3J0IH0gZnJvbSAnLi90cmFuc3BvcnRzL25vb3AnO1xuLyoqXG4gKiBUaGlzIGlzIHRoZSBiYXNlIGltcGxlbWVudGlvbiBvZiBhIEJhY2tlbmQuXG4gKiBAaGlkZGVuXG4gKi9cbnZhciBCYXNlQmFja2VuZCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKiogQ3JlYXRlcyBhIG5ldyBiYWNrZW5kIGluc3RhbmNlLiAqL1xuICAgIGZ1bmN0aW9uIEJhc2VCYWNrZW5kKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIGlmICghdGhpcy5fb3B0aW9ucy5kc24pIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdObyBEU04gcHJvdmlkZWQsIGJhY2tlbmQgd2lsbCBub3QgZG8gYW55dGhpbmcuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0ID0gdGhpcy5fc2V0dXBUcmFuc3BvcnQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlc1xuICAgIEJhc2VCYWNrZW5kLnByb3RvdHlwZS5ldmVudEZyb21FeGNlcHRpb24gPSBmdW5jdGlvbiAoX2V4Y2VwdGlvbiwgX2hpbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFNlbnRyeUVycm9yKCdCYWNrZW5kIGhhcyB0byBpbXBsZW1lbnQgYGV2ZW50RnJvbUV4Y2VwdGlvbmAgbWV0aG9kJyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJhc2VCYWNrZW5kLnByb3RvdHlwZS5ldmVudEZyb21NZXNzYWdlID0gZnVuY3Rpb24gKF9tZXNzYWdlLCBfbGV2ZWwsIF9oaW50KSB7XG4gICAgICAgIHRocm93IG5ldyBTZW50cnlFcnJvcignQmFja2VuZCBoYXMgdG8gaW1wbGVtZW50IGBldmVudEZyb21NZXNzYWdlYCBtZXRob2QnKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQmFzZUJhY2tlbmQucHJvdG90eXBlLnNlbmRFdmVudCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB0aGlzLl90cmFuc3BvcnQuc2VuZEV2ZW50KGV2ZW50KS50aGVuKG51bGwsIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihcIkVycm9yIHdoaWxlIHNlbmRpbmcgZXZlbnQ6IFwiICsgcmVhc29uKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJhc2VCYWNrZW5kLnByb3RvdHlwZS5zZW5kU2Vzc2lvbiA9IGZ1bmN0aW9uIChzZXNzaW9uKSB7XG4gICAgICAgIGlmICghdGhpcy5fdHJhbnNwb3J0LnNlbmRTZXNzaW9uKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybihcIkRyb3BwaW5nIHNlc3Npb24gYmVjYXVzZSBjdXN0b20gdHJhbnNwb3J0IGRvZXNuJ3QgaW1wbGVtZW50IHNlbmRTZXNzaW9uXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydC5zZW5kU2Vzc2lvbihzZXNzaW9uKS50aGVuKG51bGwsIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihcIkVycm9yIHdoaWxlIHNlbmRpbmcgc2Vzc2lvbjogXCIgKyByZWFzb24pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQmFzZUJhY2tlbmQucHJvdG90eXBlLmdldFRyYW5zcG9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgdXAgdGhlIHRyYW5zcG9ydCBzbyBpdCBjYW4gYmUgdXNlZCBsYXRlciB0byBzZW5kIHJlcXVlc3RzLlxuICAgICAqL1xuICAgIEJhc2VCYWNrZW5kLnByb3RvdHlwZS5fc2V0dXBUcmFuc3BvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTm9vcFRyYW5zcG9ydCgpO1xuICAgIH07XG4gICAgcmV0dXJuIEJhc2VCYWNrZW5kO1xufSgpKTtcbmV4cG9ydCB7IEJhc2VCYWNrZW5kIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlYmFja2VuZC5qcy5tYXAiLCJpbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyBnZXRHbG9iYWxPYmplY3QgfSBmcm9tICcuL21pc2MnO1xuLyoqXG4gKiBUZWxscyB3aGV0aGVyIGN1cnJlbnQgZW52aXJvbm1lbnQgc3VwcG9ydHMgRXJyb3JFdmVudCBvYmplY3RzXG4gKiB7QGxpbmsgc3VwcG9ydHNFcnJvckV2ZW50fS5cbiAqXG4gKiBAcmV0dXJucyBBbnN3ZXIgdG8gdGhlIGdpdmVuIHF1ZXN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNFcnJvckV2ZW50KCkge1xuICAgIHRyeSB7XG4gICAgICAgIG5ldyBFcnJvckV2ZW50KCcnKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4vKipcbiAqIFRlbGxzIHdoZXRoZXIgY3VycmVudCBlbnZpcm9ubWVudCBzdXBwb3J0cyBET01FcnJvciBvYmplY3RzXG4gKiB7QGxpbmsgc3VwcG9ydHNET01FcnJvcn0uXG4gKlxuICogQHJldHVybnMgQW5zd2VyIHRvIHRoZSBnaXZlbiBxdWVzdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRzRE9NRXJyb3IoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gQ2hyb21lOiBWTTg5OjEgVW5jYXVnaHQgVHlwZUVycm9yOiBGYWlsZWQgdG8gY29uc3RydWN0ICdET01FcnJvcic6XG4gICAgICAgIC8vIDEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC5cbiAgICAgICAgLy8gQHRzLWlnbm9yZSBJdCByZWFsbHkgbmVlZHMgMSBhcmd1bWVudCwgbm90IDAuXG4gICAgICAgIG5ldyBET01FcnJvcignJyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuLyoqXG4gKiBUZWxscyB3aGV0aGVyIGN1cnJlbnQgZW52aXJvbm1lbnQgc3VwcG9ydHMgRE9NRXhjZXB0aW9uIG9iamVjdHNcbiAqIHtAbGluayBzdXBwb3J0c0RPTUV4Y2VwdGlvbn0uXG4gKlxuICogQHJldHVybnMgQW5zd2VyIHRvIHRoZSBnaXZlbiBxdWVzdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRzRE9NRXhjZXB0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAgIG5ldyBET01FeGNlcHRpb24oJycpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbi8qKlxuICogVGVsbHMgd2hldGhlciBjdXJyZW50IGVudmlyb25tZW50IHN1cHBvcnRzIEZldGNoIEFQSVxuICoge0BsaW5rIHN1cHBvcnRzRmV0Y2h9LlxuICpcbiAqIEByZXR1cm5zIEFuc3dlciB0byB0aGUgZ2l2ZW4gcXVlc3Rpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdXBwb3J0c0ZldGNoKCkge1xuICAgIGlmICghKCdmZXRjaCcgaW4gZ2V0R2xvYmFsT2JqZWN0KCkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgbmV3IEhlYWRlcnMoKTtcbiAgICAgICAgbmV3IFJlcXVlc3QoJycpO1xuICAgICAgICBuZXcgUmVzcG9uc2UoKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4vKipcbiAqIGlzTmF0aXZlRmV0Y2ggY2hlY2tzIGlmIHRoZSBnaXZlbiBmdW5jdGlvbiBpcyBhIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiBvZiBmZXRjaCgpXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG5mdW5jdGlvbiBpc05hdGl2ZUZldGNoKGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuYyAmJiAvXmZ1bmN0aW9uIGZldGNoXFwoXFwpXFxzK1xce1xccytcXFtuYXRpdmUgY29kZVxcXVxccytcXH0kLy50ZXN0KGZ1bmMudG9TdHJpbmcoKSk7XG59XG4vKipcbiAqIFRlbGxzIHdoZXRoZXIgY3VycmVudCBlbnZpcm9ubWVudCBzdXBwb3J0cyBGZXRjaCBBUEkgbmF0aXZlbHlcbiAqIHtAbGluayBzdXBwb3J0c05hdGl2ZUZldGNofS5cbiAqXG4gKiBAcmV0dXJucyB0cnVlIGlmIGB3aW5kb3cuZmV0Y2hgIGlzIG5hdGl2ZWx5IGltcGxlbWVudGVkLCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRzTmF0aXZlRmV0Y2goKSB7XG4gICAgaWYgKCFzdXBwb3J0c0ZldGNoKCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgZ2xvYmFsID0gZ2V0R2xvYmFsT2JqZWN0KCk7XG4gICAgLy8gRmFzdCBwYXRoIHRvIGF2b2lkIERPTSBJL09cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gICAgaWYgKGlzTmF0aXZlRmV0Y2goZ2xvYmFsLmZldGNoKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gd2luZG93LmZldGNoIGlzIGltcGxlbWVudGVkLCBidXQgaXMgcG9seWZpbGxlZCBvciBhbHJlYWR5IHdyYXBwZWQgKGUuZzogYnkgYSBjaHJvbWUgZXh0ZW5zaW9uKVxuICAgIC8vIHNvIGNyZWF0ZSBhIFwicHVyZVwiIGlmcmFtZSB0byBzZWUgaWYgdGhhdCBoYXMgbmF0aXZlIGZldGNoXG4gICAgdmFyIHJlc3VsdCA9IGZhbHNlO1xuICAgIHZhciBkb2MgPSBnbG9iYWwuZG9jdW1lbnQ7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgaWYgKGRvYyAmJiB0eXBlb2YgZG9jLmNyZWF0ZUVsZW1lbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIHNhbmRib3ggPSBkb2MuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICAgICAgICBzYW5kYm94LmhpZGRlbiA9IHRydWU7XG4gICAgICAgICAgICBkb2MuaGVhZC5hcHBlbmRDaGlsZChzYW5kYm94KTtcbiAgICAgICAgICAgIGlmIChzYW5kYm94LmNvbnRlbnRXaW5kb3cgJiYgc2FuZGJveC5jb250ZW50V2luZG93LmZldGNoKSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZFxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzTmF0aXZlRmV0Y2goc2FuZGJveC5jb250ZW50V2luZG93LmZldGNoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvYy5oZWFkLnJlbW92ZUNoaWxkKHNhbmRib3gpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdDb3VsZCBub3QgY3JlYXRlIHNhbmRib3ggaWZyYW1lIGZvciBwdXJlIGZldGNoIGNoZWNrLCBiYWlsaW5nIHRvIHdpbmRvdy5mZXRjaDogJywgZXJyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBUZWxscyB3aGV0aGVyIGN1cnJlbnQgZW52aXJvbm1lbnQgc3VwcG9ydHMgUmVwb3J0aW5nT2JzZXJ2ZXIgQVBJXG4gKiB7QGxpbmsgc3VwcG9ydHNSZXBvcnRpbmdPYnNlcnZlcn0uXG4gKlxuICogQHJldHVybnMgQW5zd2VyIHRvIHRoZSBnaXZlbiBxdWVzdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRzUmVwb3J0aW5nT2JzZXJ2ZXIoKSB7XG4gICAgcmV0dXJuICdSZXBvcnRpbmdPYnNlcnZlcicgaW4gZ2V0R2xvYmFsT2JqZWN0KCk7XG59XG4vKipcbiAqIFRlbGxzIHdoZXRoZXIgY3VycmVudCBlbnZpcm9ubWVudCBzdXBwb3J0cyBSZWZlcnJlciBQb2xpY3kgQVBJXG4gKiB7QGxpbmsgc3VwcG9ydHNSZWZlcnJlclBvbGljeX0uXG4gKlxuICogQHJldHVybnMgQW5zd2VyIHRvIHRoZSBnaXZlbiBxdWVzdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRzUmVmZXJyZXJQb2xpY3koKSB7XG4gICAgLy8gRGVzcGl0ZSBhbGwgc3RhcnMgaW4gdGhlIHNreSBzYXlpbmcgdGhhdCBFZGdlIHN1cHBvcnRzIG9sZCBkcmFmdCBzeW50YXgsIGFrYSAnbmV2ZXInLCAnYWx3YXlzJywgJ29yaWdpbicgYW5kICdkZWZhdWx0XG4gICAgLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jZmVhdD1yZWZlcnJlci1wb2xpY3lcbiAgICAvLyBJdCBkb2Vzbid0LiBBbmQgaXQgdGhyb3cgZXhjZXB0aW9uIGluc3RlYWQgb2YgaWdub3JpbmcgdGhpcyBwYXJhbWV0ZXIuLi5cbiAgICAvLyBSRUY6IGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvcmF2ZW4tanMvaXNzdWVzLzEyMzNcbiAgICBpZiAoIXN1cHBvcnRzRmV0Y2goKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIG5ldyBSZXF1ZXN0KCdfJywge1xuICAgICAgICAgICAgcmVmZXJyZXJQb2xpY3k6ICdvcmlnaW4nLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4vKipcbiAqIFRlbGxzIHdoZXRoZXIgY3VycmVudCBlbnZpcm9ubWVudCBzdXBwb3J0cyBIaXN0b3J5IEFQSVxuICoge0BsaW5rIHN1cHBvcnRzSGlzdG9yeX0uXG4gKlxuICogQHJldHVybnMgQW5zd2VyIHRvIHRoZSBnaXZlbiBxdWVzdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgICAvLyBOT1RFOiBpbiBDaHJvbWUgQXBwIGVudmlyb25tZW50LCB0b3VjaGluZyBoaXN0b3J5LnB1c2hTdGF0ZSwgKmV2ZW4gaW5zaWRlXG4gICAgLy8gICAgICAgYSB0cnkvY2F0Y2ggYmxvY2sqLCB3aWxsIGNhdXNlIENocm9tZSB0byBvdXRwdXQgYW4gZXJyb3IgdG8gY29uc29sZS5lcnJvclxuICAgIC8vIGJvcnJvd2VkIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvcHVsbC8xMzk0NS9maWxlc1xuICAgIHZhciBnbG9iYWwgPSBnZXRHbG9iYWxPYmplY3QoKTtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIHZhciBjaHJvbWUgPSBnbG9iYWwuY2hyb21lO1xuICAgIHZhciBpc0Nocm9tZVBhY2thZ2VkQXBwID0gY2hyb21lICYmIGNocm9tZS5hcHAgJiYgY2hyb21lLmFwcC5ydW50aW1lO1xuICAgIC8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzICovXG4gICAgdmFyIGhhc0hpc3RvcnlBcGkgPSAnaGlzdG9yeScgaW4gZ2xvYmFsICYmICEhZ2xvYmFsLmhpc3RvcnkucHVzaFN0YXRlICYmICEhZ2xvYmFsLmhpc3RvcnkucmVwbGFjZVN0YXRlO1xuICAgIHJldHVybiAhaXNDaHJvbWVQYWNrYWdlZEFwcCAmJiBoYXNIaXN0b3J5QXBpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3VwcG9ydHMuanMubWFwIiwiLyoqXG4gKiBUaGlzIHdhcyBvcmlnaW5hbGx5IGZvcmtlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9vY2MvVHJhY2VLaXQsIGJ1dCBoYXMgc2luY2UgYmVlblxuICogbGFyZ2VseSBtb2RpZmllZCBhbmQgaXMgbm93IG1haW50YWluZWQgYXMgcGFydCBvZiBTZW50cnkgSlMgU0RLLlxuICovXG5pbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuLy8gZ2xvYmFsIHJlZmVyZW5jZSB0byBzbGljZVxudmFyIFVOS05PV05fRlVOQ1RJT04gPSAnPyc7XG4vLyBDaHJvbWl1bSBiYXNlZCBicm93c2VyczogQ2hyb21lLCBCcmF2ZSwgbmV3IE9wZXJhLCBuZXcgRWRnZVxudmFyIGNocm9tZSA9IC9eXFxzKmF0ICg/OiguKj8pID9cXCgpPygoPzpmaWxlfGh0dHBzP3xibG9ifGNocm9tZS1leHRlbnNpb258YWRkcmVzc3xuYXRpdmV8ZXZhbHx3ZWJwYWNrfDxhbm9ueW1vdXM+fFstYS16XSs6fC4qYnVuZGxlfFxcLykuKj8pKD86OihcXGQrKSk/KD86OihcXGQrKSk/XFwpP1xccyokL2k7XG4vLyBnZWNrbyByZWdleDogYCg/OmJ1bmRsZXxcXGQrXFwuanMpYDogYGJ1bmRsZWAgaXMgZm9yIHJlYWN0IG5hdGl2ZSwgYFxcZCtcXC5qc2AgYWxzbyBidXQgc3BlY2lmaWNhbGx5IGZvciByYW0gYnVuZGxlcyBiZWNhdXNlIGl0XG4vLyBnZW5lcmF0ZXMgZmlsZW5hbWVzIHdpdGhvdXQgYSBwcmVmaXggbGlrZSBgZmlsZTovL2AgdGhlIGZpbGVuYW1lcyBpbiB0aGUgc3RhY2t0cmFjZSBhcmUganVzdCA0Mi5qc1xuLy8gV2UgbmVlZCB0aGlzIHNwZWNpZmljIGNhc2UgZm9yIG5vdyBiZWNhdXNlIHdlIHdhbnQgbm8gb3RoZXIgcmVnZXggdG8gbWF0Y2guXG52YXIgZ2Vja28gPSAvXlxccyooLio/KSg/OlxcKCguKj8pXFwpKT8oPzpefEApPygoPzpmaWxlfGh0dHBzP3xibG9ifGNocm9tZXx3ZWJwYWNrfHJlc291cmNlfG1vei1leHRlbnNpb258Y2FwYWNpdG9yKS4qPzpcXC8uKj98XFxbbmF0aXZlIGNvZGVcXF18W15AXSooPzpidW5kbGV8XFxkK1xcLmpzKSkoPzo6KFxcZCspKT8oPzo6KFxcZCspKT9cXHMqJC9pO1xudmFyIHdpbmpzID0gL15cXHMqYXQgKD86KCg/OlxcW29iamVjdCBvYmplY3RcXF0pPy4rKSApP1xcKD8oKD86ZmlsZXxtcy1hcHB4fGh0dHBzP3x3ZWJwYWNrfGJsb2IpOi4qPyk6KFxcZCspKD86OihcXGQrKSk/XFwpP1xccyokL2k7XG52YXIgZ2Vja29FdmFsID0gLyhcXFMrKSBsaW5lIChcXGQrKSg/OiA+IGV2YWwgbGluZSBcXGQrKSogPiBldmFsL2k7XG52YXIgY2hyb21lRXZhbCA9IC9cXCgoXFxTKikoPzo6KFxcZCspKSg/OjooXFxkKykpXFwpLztcbi8vIEJhc2VkIG9uIG91ciBvd24gbWFwcGluZyBwYXR0ZXJuIC0gaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnkvYmxvYi85ZjA4MzA1ZTA5ODY2YzhiZDZkMGMyNGY1YjBhYWJkZDdkZDZjNTljL3NyYy9zZW50cnkvbGFuZy9qYXZhc2NyaXB0L2Vycm9ybWFwcGluZy5weSNMODMtTDEwOFxudmFyIHJlYWN0TWluaWZpZWRSZWdleHAgPSAvTWluaWZpZWQgUmVhY3QgZXJyb3IgI1xcZCs7L2k7XG4vKiogSlNEb2MgKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LCBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZVN0YWNrVHJhY2UoZXgpIHtcbiAgICB2YXIgc3RhY2sgPSBudWxsO1xuICAgIHZhciBwb3BTaXplID0gMDtcbiAgICBpZiAoZXgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBleC5mcmFtZXNUb1BvcCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHBvcFNpemUgPSBleC5mcmFtZXNUb1BvcDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyZWFjdE1pbmlmaWVkUmVnZXhwLnRlc3QoZXgubWVzc2FnZSkpIHtcbiAgICAgICAgICAgIHBvcFNpemUgPSAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgbXVzdCBiZSB0cmllZCBmaXJzdCBiZWNhdXNlIE9wZXJhIDEwICpkZXN0cm95cypcbiAgICAgICAgLy8gaXRzIHN0YWNrdHJhY2UgcHJvcGVydHkgaWYgeW91IHRyeSB0byBhY2Nlc3MgdGhlIHN0YWNrXG4gICAgICAgIC8vIHByb3BlcnR5IGZpcnN0ISFcbiAgICAgICAgc3RhY2sgPSBjb21wdXRlU3RhY2tUcmFjZUZyb21TdGFja3RyYWNlUHJvcChleCk7XG4gICAgICAgIGlmIChzdGFjaykge1xuICAgICAgICAgICAgcmV0dXJuIHBvcEZyYW1lcyhzdGFjaywgcG9wU2l6ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gbm8tZW1wdHlcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgc3RhY2sgPSBjb21wdXRlU3RhY2tUcmFjZUZyb21TdGFja1Byb3AoZXgpO1xuICAgICAgICBpZiAoc3RhY2spIHtcbiAgICAgICAgICAgIHJldHVybiBwb3BGcmFtZXMoc3RhY2ssIHBvcFNpemUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIC8vIG5vLWVtcHR5XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIG1lc3NhZ2U6IGV4dHJhY3RNZXNzYWdlKGV4KSxcbiAgICAgICAgbmFtZTogZXggJiYgZXgubmFtZSxcbiAgICAgICAgc3RhY2s6IFtdLFxuICAgICAgICBmYWlsZWQ6IHRydWUsXG4gICAgfTtcbn1cbi8qKiBKU0RvYyAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnksIGNvbXBsZXhpdHlcbmZ1bmN0aW9uIGNvbXB1dGVTdGFja1RyYWNlRnJvbVN0YWNrUHJvcChleCkge1xuICAgIGlmICghZXggfHwgIWV4LnN0YWNrKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgc3RhY2sgPSBbXTtcbiAgICB2YXIgbGluZXMgPSBleC5zdGFjay5zcGxpdCgnXFxuJyk7XG4gICAgdmFyIGlzRXZhbDtcbiAgICB2YXIgc3VibWF0Y2g7XG4gICAgdmFyIHBhcnRzO1xuICAgIHZhciBlbGVtZW50O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKChwYXJ0cyA9IGNocm9tZS5leGVjKGxpbmVzW2ldKSkpIHtcbiAgICAgICAgICAgIHZhciBpc05hdGl2ZSA9IHBhcnRzWzJdICYmIHBhcnRzWzJdLmluZGV4T2YoJ25hdGl2ZScpID09PSAwOyAvLyBzdGFydCBvZiBsaW5lXG4gICAgICAgICAgICBpc0V2YWwgPSBwYXJ0c1syXSAmJiBwYXJ0c1syXS5pbmRleE9mKCdldmFsJykgPT09IDA7IC8vIHN0YXJ0IG9mIGxpbmVcbiAgICAgICAgICAgIGlmIChpc0V2YWwgJiYgKHN1Ym1hdGNoID0gY2hyb21lRXZhbC5leGVjKHBhcnRzWzJdKSkpIHtcbiAgICAgICAgICAgICAgICAvLyB0aHJvdyBvdXQgZXZhbCBsaW5lL2NvbHVtbiBhbmQgdXNlIHRvcC1tb3N0IGxpbmUvY29sdW1uIG51bWJlclxuICAgICAgICAgICAgICAgIHBhcnRzWzJdID0gc3VibWF0Y2hbMV07IC8vIHVybFxuICAgICAgICAgICAgICAgIHBhcnRzWzNdID0gc3VibWF0Y2hbMl07IC8vIGxpbmVcbiAgICAgICAgICAgICAgICBwYXJ0c1s0XSA9IHN1Ym1hdGNoWzNdOyAvLyBjb2x1bW5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsZW1lbnQgPSB7XG4gICAgICAgICAgICAgICAgLy8gd29ya2luZyB3aXRoIHRoZSByZWdleHAgYWJvdmUgaXMgc3VwZXIgcGFpbmZ1bC4gaXQgaXMgcXVpdGUgYSBoYWNrLCBidXQganVzdCBzdHJpcHBpbmcgdGhlIGBhZGRyZXNzIGF0IGBcbiAgICAgICAgICAgICAgICAvLyBwcmVmaXggaGVyZSBzZWVtcyBsaWtlIHRoZSBxdWlja2VzdCBzb2x1dGlvbiBmb3Igbm93LlxuICAgICAgICAgICAgICAgIHVybDogcGFydHNbMl0gJiYgcGFydHNbMl0uaW5kZXhPZignYWRkcmVzcyBhdCAnKSA9PT0gMCA/IHBhcnRzWzJdLnN1YnN0cignYWRkcmVzcyBhdCAnLmxlbmd0aCkgOiBwYXJ0c1syXSxcbiAgICAgICAgICAgICAgICBmdW5jOiBwYXJ0c1sxXSB8fCBVTktOT1dOX0ZVTkNUSU9OLFxuICAgICAgICAgICAgICAgIGFyZ3M6IGlzTmF0aXZlID8gW3BhcnRzWzJdXSA6IFtdLFxuICAgICAgICAgICAgICAgIGxpbmU6IHBhcnRzWzNdID8gK3BhcnRzWzNdIDogbnVsbCxcbiAgICAgICAgICAgICAgICBjb2x1bW46IHBhcnRzWzRdID8gK3BhcnRzWzRdIDogbnVsbCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKHBhcnRzID0gd2luanMuZXhlYyhsaW5lc1tpXSkpKSB7XG4gICAgICAgICAgICBlbGVtZW50ID0ge1xuICAgICAgICAgICAgICAgIHVybDogcGFydHNbMl0sXG4gICAgICAgICAgICAgICAgZnVuYzogcGFydHNbMV0gfHwgVU5LTk9XTl9GVU5DVElPTixcbiAgICAgICAgICAgICAgICBhcmdzOiBbXSxcbiAgICAgICAgICAgICAgICBsaW5lOiArcGFydHNbM10sXG4gICAgICAgICAgICAgICAgY29sdW1uOiBwYXJ0c1s0XSA/ICtwYXJ0c1s0XSA6IG51bGwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChwYXJ0cyA9IGdlY2tvLmV4ZWMobGluZXNbaV0pKSkge1xuICAgICAgICAgICAgaXNFdmFsID0gcGFydHNbM10gJiYgcGFydHNbM10uaW5kZXhPZignID4gZXZhbCcpID4gLTE7XG4gICAgICAgICAgICBpZiAoaXNFdmFsICYmIChzdWJtYXRjaCA9IGdlY2tvRXZhbC5leGVjKHBhcnRzWzNdKSkpIHtcbiAgICAgICAgICAgICAgICAvLyB0aHJvdyBvdXQgZXZhbCBsaW5lL2NvbHVtbiBhbmQgdXNlIHRvcC1tb3N0IGxpbmUgbnVtYmVyXG4gICAgICAgICAgICAgICAgcGFydHNbMV0gPSBwYXJ0c1sxXSB8fCBcImV2YWxcIjtcbiAgICAgICAgICAgICAgICBwYXJ0c1szXSA9IHN1Ym1hdGNoWzFdO1xuICAgICAgICAgICAgICAgIHBhcnRzWzRdID0gc3VibWF0Y2hbMl07XG4gICAgICAgICAgICAgICAgcGFydHNbNV0gPSAnJzsgLy8gbm8gY29sdW1uIHdoZW4gZXZhbFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaSA9PT0gMCAmJiAhcGFydHNbNV0gJiYgZXguY29sdW1uTnVtYmVyICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICAvLyBGaXJlRm94IHVzZXMgdGhpcyBhd2Vzb21lIGNvbHVtbk51bWJlciBwcm9wZXJ0eSBmb3IgaXRzIHRvcCBmcmFtZVxuICAgICAgICAgICAgICAgIC8vIEFsc28gbm90ZSwgRmlyZWZveCdzIGNvbHVtbiBudW1iZXIgaXMgMC1iYXNlZCBhbmQgZXZlcnl0aGluZyBlbHNlIGV4cGVjdHMgMS1iYXNlZCxcbiAgICAgICAgICAgICAgICAvLyBzbyBhZGRpbmcgMVxuICAgICAgICAgICAgICAgIC8vIE5PVEU6IHRoaXMgaGFjayBkb2Vzbid0IHdvcmsgaWYgdG9wLW1vc3QgZnJhbWUgaXMgZXZhbFxuICAgICAgICAgICAgICAgIHN0YWNrWzBdLmNvbHVtbiA9IGV4LmNvbHVtbk51bWJlciArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbGVtZW50ID0ge1xuICAgICAgICAgICAgICAgIHVybDogcGFydHNbM10sXG4gICAgICAgICAgICAgICAgZnVuYzogcGFydHNbMV0gfHwgVU5LTk9XTl9GVU5DVElPTixcbiAgICAgICAgICAgICAgICBhcmdzOiBwYXJ0c1syXSA/IHBhcnRzWzJdLnNwbGl0KCcsJykgOiBbXSxcbiAgICAgICAgICAgICAgICBsaW5lOiBwYXJ0c1s0XSA/ICtwYXJ0c1s0XSA6IG51bGwsXG4gICAgICAgICAgICAgICAgY29sdW1uOiBwYXJ0c1s1XSA/ICtwYXJ0c1s1XSA6IG51bGwsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFlbGVtZW50LmZ1bmMgJiYgZWxlbWVudC5saW5lKSB7XG4gICAgICAgICAgICBlbGVtZW50LmZ1bmMgPSBVTktOT1dOX0ZVTkNUSU9OO1xuICAgICAgICB9XG4gICAgICAgIHN0YWNrLnB1c2goZWxlbWVudCk7XG4gICAgfVxuICAgIGlmICghc3RhY2subGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBtZXNzYWdlOiBleHRyYWN0TWVzc2FnZShleCksXG4gICAgICAgIG5hbWU6IGV4Lm5hbWUsXG4gICAgICAgIHN0YWNrOiBzdGFjayxcbiAgICB9O1xufVxuLyoqIEpTRG9jICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gY29tcHV0ZVN0YWNrVHJhY2VGcm9tU3RhY2t0cmFjZVByb3AoZXgpIHtcbiAgICBpZiAoIWV4IHx8ICFleC5zdGFja3RyYWNlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBBY2Nlc3MgYW5kIHN0b3JlIHRoZSBzdGFja3RyYWNlIHByb3BlcnR5IGJlZm9yZSBkb2luZyBBTllUSElOR1xuICAgIC8vIGVsc2UgdG8gaXQgYmVjYXVzZSBPcGVyYSBpcyBub3QgdmVyeSBnb29kIGF0IHByb3ZpZGluZyBpdFxuICAgIC8vIHJlbGlhYmx5IGluIG90aGVyIGNpcmN1bXN0YW5jZXMuXG4gICAgdmFyIHN0YWNrdHJhY2UgPSBleC5zdGFja3RyYWNlO1xuICAgIHZhciBvcGVyYTEwUmVnZXggPSAvIGxpbmUgKFxcZCspLipzY3JpcHQgKD86aW4gKT8oXFxTKykoPzo6IGluIGZ1bmN0aW9uIChcXFMrKSk/JC9pO1xuICAgIHZhciBvcGVyYTExUmVnZXggPSAvIGxpbmUgKFxcZCspLCBjb2x1bW4gKFxcZCspXFxzKig/OmluICg/Ojxhbm9ueW1vdXMgZnVuY3Rpb246IChbXj5dKyk+fChbXildKykpXFwoKC4qKVxcKSk/IGluICguKik6XFxzKiQvaTtcbiAgICB2YXIgbGluZXMgPSBzdGFja3RyYWNlLnNwbGl0KCdcXG4nKTtcbiAgICB2YXIgc3RhY2sgPSBbXTtcbiAgICB2YXIgcGFydHM7XG4gICAgZm9yICh2YXIgbGluZSA9IDA7IGxpbmUgPCBsaW5lcy5sZW5ndGg7IGxpbmUgKz0gMikge1xuICAgICAgICB2YXIgZWxlbWVudCA9IG51bGw7XG4gICAgICAgIGlmICgocGFydHMgPSBvcGVyYTEwUmVnZXguZXhlYyhsaW5lc1tsaW5lXSkpKSB7XG4gICAgICAgICAgICBlbGVtZW50ID0ge1xuICAgICAgICAgICAgICAgIHVybDogcGFydHNbMl0sXG4gICAgICAgICAgICAgICAgZnVuYzogcGFydHNbM10sXG4gICAgICAgICAgICAgICAgYXJnczogW10sXG4gICAgICAgICAgICAgICAgbGluZTogK3BhcnRzWzFdLFxuICAgICAgICAgICAgICAgIGNvbHVtbjogbnVsbCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKHBhcnRzID0gb3BlcmExMVJlZ2V4LmV4ZWMobGluZXNbbGluZV0pKSkge1xuICAgICAgICAgICAgZWxlbWVudCA9IHtcbiAgICAgICAgICAgICAgICB1cmw6IHBhcnRzWzZdLFxuICAgICAgICAgICAgICAgIGZ1bmM6IHBhcnRzWzNdIHx8IHBhcnRzWzRdLFxuICAgICAgICAgICAgICAgIGFyZ3M6IHBhcnRzWzVdID8gcGFydHNbNV0uc3BsaXQoJywnKSA6IFtdLFxuICAgICAgICAgICAgICAgIGxpbmU6ICtwYXJ0c1sxXSxcbiAgICAgICAgICAgICAgICBjb2x1bW46ICtwYXJ0c1syXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmICghZWxlbWVudC5mdW5jICYmIGVsZW1lbnQubGluZSkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuZnVuYyA9IFVOS05PV05fRlVOQ1RJT047XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFjay5wdXNoKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghc3RhY2subGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBtZXNzYWdlOiBleHRyYWN0TWVzc2FnZShleCksXG4gICAgICAgIG5hbWU6IGV4Lm5hbWUsXG4gICAgICAgIHN0YWNrOiBzdGFjayxcbiAgICB9O1xufVxuLyoqIFJlbW92ZSBOIG51bWJlciBvZiBmcmFtZXMgZnJvbSB0aGUgc3RhY2sgKi9cbmZ1bmN0aW9uIHBvcEZyYW1lcyhzdGFja3RyYWNlLCBwb3BTaXplKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBzdGFja3RyYWNlKSwgeyBzdGFjazogc3RhY2t0cmFjZS5zdGFjay5zbGljZShwb3BTaXplKSB9KTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrdHJhY2U7XG4gICAgfVxufVxuLyoqXG4gKiBUaGVyZSBhcmUgY2FzZXMgd2hlcmUgc3RhY2t0cmFjZS5tZXNzYWdlIGlzIGFuIEV2ZW50IG9iamVjdFxuICogaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvMTk0OVxuICogSW4gdGhpcyBzcGVjaWZpYyBjYXNlIHdlIHRyeSB0byBleHRyYWN0IHN0YWNrdHJhY2UubWVzc2FnZS5lcnJvci5tZXNzYWdlXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBleHRyYWN0TWVzc2FnZShleCkge1xuICAgIHZhciBtZXNzYWdlID0gZXggJiYgZXgubWVzc2FnZTtcbiAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuICdObyBlcnJvciBtZXNzYWdlJztcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuZXJyb3IgJiYgdHlwZW9mIG1lc3NhZ2UuZXJyb3IubWVzc2FnZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2UuZXJyb3IubWVzc2FnZTtcbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFjZWtpdC5qcy5tYXAiLCJpbXBvcnQgeyBleHRyYWN0RXhjZXB0aW9uS2V5c0Zvck1lc3NhZ2UsIGlzRXZlbnQsIG5vcm1hbGl6ZVRvU2l6ZSB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgY29tcHV0ZVN0YWNrVHJhY2UgfSBmcm9tICcuL3RyYWNla2l0JztcbnZhciBTVEFDS1RSQUNFX0xJTUlUID0gNTA7XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gY3JlYXRlcyBhbiBleGNlcHRpb24gZnJvbSBhbiBUcmFjZUtpdFN0YWNrVHJhY2VcbiAqIEBwYXJhbSBzdGFja3RyYWNlIFRyYWNlS2l0U3RhY2tUcmFjZSB0aGF0IHdpbGwgYmUgY29udmVydGVkIHRvIGFuIGV4Y2VwdGlvblxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhjZXB0aW9uRnJvbVN0YWNrdHJhY2Uoc3RhY2t0cmFjZSkge1xuICAgIHZhciBmcmFtZXMgPSBwcmVwYXJlRnJhbWVzRm9yRXZlbnQoc3RhY2t0cmFjZS5zdGFjayk7XG4gICAgdmFyIGV4Y2VwdGlvbiA9IHtcbiAgICAgICAgdHlwZTogc3RhY2t0cmFjZS5uYW1lLFxuICAgICAgICB2YWx1ZTogc3RhY2t0cmFjZS5tZXNzYWdlLFxuICAgIH07XG4gICAgaWYgKGZyYW1lcyAmJiBmcmFtZXMubGVuZ3RoKSB7XG4gICAgICAgIGV4Y2VwdGlvbi5zdGFja3RyYWNlID0geyBmcmFtZXM6IGZyYW1lcyB9O1xuICAgIH1cbiAgICBpZiAoZXhjZXB0aW9uLnR5cGUgPT09IHVuZGVmaW5lZCAmJiBleGNlcHRpb24udmFsdWUgPT09ICcnKSB7XG4gICAgICAgIGV4Y2VwdGlvbi52YWx1ZSA9ICdVbnJlY292ZXJhYmxlIGVycm9yIGNhdWdodCc7XG4gICAgfVxuICAgIHJldHVybiBleGNlcHRpb247XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV2ZW50RnJvbVBsYWluT2JqZWN0KGV4Y2VwdGlvbiwgc3ludGhldGljRXhjZXB0aW9uLCByZWplY3Rpb24pIHtcbiAgICB2YXIgZXZlbnQgPSB7XG4gICAgICAgIGV4Y2VwdGlvbjoge1xuICAgICAgICAgICAgdmFsdWVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBpc0V2ZW50KGV4Y2VwdGlvbikgPyBleGNlcHRpb24uY29uc3RydWN0b3IubmFtZSA6IHJlamVjdGlvbiA/ICdVbmhhbmRsZWRSZWplY3Rpb24nIDogJ0Vycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwiTm9uLUVycm9yIFwiICsgKHJlamVjdGlvbiA/ICdwcm9taXNlIHJlamVjdGlvbicgOiAnZXhjZXB0aW9uJykgKyBcIiBjYXB0dXJlZCB3aXRoIGtleXM6IFwiICsgZXh0cmFjdEV4Y2VwdGlvbktleXNGb3JNZXNzYWdlKGV4Y2VwdGlvbiksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIGV4dHJhOiB7XG4gICAgICAgICAgICBfX3NlcmlhbGl6ZWRfXzogbm9ybWFsaXplVG9TaXplKGV4Y2VwdGlvbiksXG4gICAgICAgIH0sXG4gICAgfTtcbiAgICBpZiAoc3ludGhldGljRXhjZXB0aW9uKSB7XG4gICAgICAgIHZhciBzdGFja3RyYWNlID0gY29tcHV0ZVN0YWNrVHJhY2Uoc3ludGhldGljRXhjZXB0aW9uKTtcbiAgICAgICAgdmFyIGZyYW1lc18xID0gcHJlcGFyZUZyYW1lc0ZvckV2ZW50KHN0YWNrdHJhY2Uuc3RhY2spO1xuICAgICAgICBldmVudC5zdGFja3RyYWNlID0ge1xuICAgICAgICAgICAgZnJhbWVzOiBmcmFtZXNfMSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGV2ZW50O1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBldmVudEZyb21TdGFja3RyYWNlKHN0YWNrdHJhY2UpIHtcbiAgICB2YXIgZXhjZXB0aW9uID0gZXhjZXB0aW9uRnJvbVN0YWNrdHJhY2Uoc3RhY2t0cmFjZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZXhjZXB0aW9uOiB7XG4gICAgICAgICAgICB2YWx1ZXM6IFtleGNlcHRpb25dLFxuICAgICAgICB9LFxuICAgIH07XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVGcmFtZXNGb3JFdmVudChzdGFjaykge1xuICAgIGlmICghc3RhY2sgfHwgIXN0YWNrLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHZhciBsb2NhbFN0YWNrID0gc3RhY2s7XG4gICAgdmFyIGZpcnN0RnJhbWVGdW5jdGlvbiA9IGxvY2FsU3RhY2tbMF0uZnVuYyB8fCAnJztcbiAgICB2YXIgbGFzdEZyYW1lRnVuY3Rpb24gPSBsb2NhbFN0YWNrW2xvY2FsU3RhY2subGVuZ3RoIC0gMV0uZnVuYyB8fCAnJztcbiAgICAvLyBJZiBzdGFjayBzdGFydHMgd2l0aCBvbmUgb2Ygb3VyIEFQSSBjYWxscywgcmVtb3ZlIGl0IChzdGFydHMsIG1lYW5pbmcgaXQncyB0aGUgdG9wIG9mIHRoZSBzdGFjayAtIGFrYSBsYXN0IGNhbGwpXG4gICAgaWYgKGZpcnN0RnJhbWVGdW5jdGlvbi5pbmRleE9mKCdjYXB0dXJlTWVzc2FnZScpICE9PSAtMSB8fCBmaXJzdEZyYW1lRnVuY3Rpb24uaW5kZXhPZignY2FwdHVyZUV4Y2VwdGlvbicpICE9PSAtMSkge1xuICAgICAgICBsb2NhbFN0YWNrID0gbG9jYWxTdGFjay5zbGljZSgxKTtcbiAgICB9XG4gICAgLy8gSWYgc3RhY2sgZW5kcyB3aXRoIG9uZSBvZiBvdXIgaW50ZXJuYWwgQVBJIGNhbGxzLCByZW1vdmUgaXQgKGVuZHMsIG1lYW5pbmcgaXQncyB0aGUgYm90dG9tIG9mIHRoZSBzdGFjayAtIGFrYSB0b3AtbW9zdCBjYWxsKVxuICAgIGlmIChsYXN0RnJhbWVGdW5jdGlvbi5pbmRleE9mKCdzZW50cnlXcmFwcGVkJykgIT09IC0xKSB7XG4gICAgICAgIGxvY2FsU3RhY2sgPSBsb2NhbFN0YWNrLnNsaWNlKDAsIC0xKTtcbiAgICB9XG4gICAgLy8gVGhlIGZyYW1lIHdoZXJlIHRoZSBjcmFzaCBoYXBwZW5lZCwgc2hvdWxkIGJlIHRoZSBsYXN0IGVudHJ5IGluIHRoZSBhcnJheVxuICAgIHJldHVybiBsb2NhbFN0YWNrXG4gICAgICAgIC5zbGljZSgwLCBTVEFDS1RSQUNFX0xJTUlUKVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChmcmFtZSkgeyByZXR1cm4gKHtcbiAgICAgICAgY29sbm86IGZyYW1lLmNvbHVtbiA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IGZyYW1lLmNvbHVtbixcbiAgICAgICAgZmlsZW5hbWU6IGZyYW1lLnVybCB8fCBsb2NhbFN0YWNrWzBdLnVybCxcbiAgICAgICAgZnVuY3Rpb246IGZyYW1lLmZ1bmMgfHwgJz8nLFxuICAgICAgICBpbl9hcHA6IHRydWUsXG4gICAgICAgIGxpbmVubzogZnJhbWUubGluZSA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IGZyYW1lLmxpbmUsXG4gICAgfSk7IH0pXG4gICAgICAgIC5yZXZlcnNlKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZXJzLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTZXZlcml0eSB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuaW1wb3J0IHsgYWRkRXhjZXB0aW9uTWVjaGFuaXNtLCBhZGRFeGNlcHRpb25UeXBlVmFsdWUsIGlzRE9NRXJyb3IsIGlzRE9NRXhjZXB0aW9uLCBpc0Vycm9yLCBpc0Vycm9yRXZlbnQsIGlzRXZlbnQsIGlzUGxhaW5PYmplY3QsIFN5bmNQcm9taXNlLCB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgZXZlbnRGcm9tUGxhaW5PYmplY3QsIGV2ZW50RnJvbVN0YWNrdHJhY2UsIHByZXBhcmVGcmFtZXNGb3JFdmVudCB9IGZyb20gJy4vcGFyc2Vycyc7XG5pbXBvcnQgeyBjb21wdXRlU3RhY2tUcmFjZSB9IGZyb20gJy4vdHJhY2VraXQnO1xuLyoqXG4gKiBCdWlsZHMgYW5kIEV2ZW50IGZyb20gYSBFeGNlcHRpb25cbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV2ZW50RnJvbUV4Y2VwdGlvbihvcHRpb25zLCBleGNlcHRpb24sIGhpbnQpIHtcbiAgICB2YXIgc3ludGhldGljRXhjZXB0aW9uID0gKGhpbnQgJiYgaGludC5zeW50aGV0aWNFeGNlcHRpb24pIHx8IHVuZGVmaW5lZDtcbiAgICB2YXIgZXZlbnQgPSBldmVudEZyb21Vbmtub3duSW5wdXQoZXhjZXB0aW9uLCBzeW50aGV0aWNFeGNlcHRpb24sIHtcbiAgICAgICAgYXR0YWNoU3RhY2t0cmFjZTogb3B0aW9ucy5hdHRhY2hTdGFja3RyYWNlLFxuICAgIH0pO1xuICAgIGFkZEV4Y2VwdGlvbk1lY2hhbmlzbShldmVudCwge1xuICAgICAgICBoYW5kbGVkOiB0cnVlLFxuICAgICAgICB0eXBlOiAnZ2VuZXJpYycsXG4gICAgfSk7XG4gICAgZXZlbnQubGV2ZWwgPSBTZXZlcml0eS5FcnJvcjtcbiAgICBpZiAoaGludCAmJiBoaW50LmV2ZW50X2lkKSB7XG4gICAgICAgIGV2ZW50LmV2ZW50X2lkID0gaGludC5ldmVudF9pZDtcbiAgICB9XG4gICAgcmV0dXJuIFN5bmNQcm9taXNlLnJlc29sdmUoZXZlbnQpO1xufVxuLyoqXG4gKiBCdWlsZHMgYW5kIEV2ZW50IGZyb20gYSBNZXNzYWdlXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBldmVudEZyb21NZXNzYWdlKG9wdGlvbnMsIG1lc3NhZ2UsIGxldmVsLCBoaW50KSB7XG4gICAgaWYgKGxldmVsID09PSB2b2lkIDApIHsgbGV2ZWwgPSBTZXZlcml0eS5JbmZvOyB9XG4gICAgdmFyIHN5bnRoZXRpY0V4Y2VwdGlvbiA9IChoaW50ICYmIGhpbnQuc3ludGhldGljRXhjZXB0aW9uKSB8fCB1bmRlZmluZWQ7XG4gICAgdmFyIGV2ZW50ID0gZXZlbnRGcm9tU3RyaW5nKG1lc3NhZ2UsIHN5bnRoZXRpY0V4Y2VwdGlvbiwge1xuICAgICAgICBhdHRhY2hTdGFja3RyYWNlOiBvcHRpb25zLmF0dGFjaFN0YWNrdHJhY2UsXG4gICAgfSk7XG4gICAgZXZlbnQubGV2ZWwgPSBsZXZlbDtcbiAgICBpZiAoaGludCAmJiBoaW50LmV2ZW50X2lkKSB7XG4gICAgICAgIGV2ZW50LmV2ZW50X2lkID0gaGludC5ldmVudF9pZDtcbiAgICB9XG4gICAgcmV0dXJuIFN5bmNQcm9taXNlLnJlc29sdmUoZXZlbnQpO1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBldmVudEZyb21Vbmtub3duSW5wdXQoZXhjZXB0aW9uLCBzeW50aGV0aWNFeGNlcHRpb24sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIHZhciBldmVudDtcbiAgICBpZiAoaXNFcnJvckV2ZW50KGV4Y2VwdGlvbikgJiYgZXhjZXB0aW9uLmVycm9yKSB7XG4gICAgICAgIC8vIElmIGl0IGlzIGFuIEVycm9yRXZlbnQgd2l0aCBgZXJyb3JgIHByb3BlcnR5LCBleHRyYWN0IGl0IHRvIGdldCBhY3R1YWwgRXJyb3JcbiAgICAgICAgdmFyIGVycm9yRXZlbnQgPSBleGNlcHRpb247XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBleGNlcHRpb24gPSBlcnJvckV2ZW50LmVycm9yO1xuICAgICAgICBldmVudCA9IGV2ZW50RnJvbVN0YWNrdHJhY2UoY29tcHV0ZVN0YWNrVHJhY2UoZXhjZXB0aW9uKSk7XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICB9XG4gICAgaWYgKGlzRE9NRXJyb3IoZXhjZXB0aW9uKSB8fCBpc0RPTUV4Y2VwdGlvbihleGNlcHRpb24pKSB7XG4gICAgICAgIC8vIElmIGl0IGlzIGEgRE9NRXJyb3Igb3IgRE9NRXhjZXB0aW9uICh3aGljaCBhcmUgbGVnYWN5IEFQSXMsIGJ1dCBzdGlsbCBzdXBwb3J0ZWQgaW4gc29tZSBicm93c2VycylcbiAgICAgICAgLy8gdGhlbiB3ZSBqdXN0IGV4dHJhY3QgdGhlIG5hbWUsIGNvZGUsIGFuZCBtZXNzYWdlLCBhcyB0aGV5IGRvbid0IHByb3ZpZGUgYW55dGhpbmcgZWxzZVxuICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRE9NRXJyb3JcbiAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RPTUV4Y2VwdGlvblxuICAgICAgICB2YXIgZG9tRXhjZXB0aW9uID0gZXhjZXB0aW9uO1xuICAgICAgICB2YXIgbmFtZV8xID0gZG9tRXhjZXB0aW9uLm5hbWUgfHwgKGlzRE9NRXJyb3IoZG9tRXhjZXB0aW9uKSA/ICdET01FcnJvcicgOiAnRE9NRXhjZXB0aW9uJyk7XG4gICAgICAgIHZhciBtZXNzYWdlID0gZG9tRXhjZXB0aW9uLm1lc3NhZ2UgPyBuYW1lXzEgKyBcIjogXCIgKyBkb21FeGNlcHRpb24ubWVzc2FnZSA6IG5hbWVfMTtcbiAgICAgICAgZXZlbnQgPSBldmVudEZyb21TdHJpbmcobWVzc2FnZSwgc3ludGhldGljRXhjZXB0aW9uLCBvcHRpb25zKTtcbiAgICAgICAgYWRkRXhjZXB0aW9uVHlwZVZhbHVlKGV2ZW50LCBtZXNzYWdlKTtcbiAgICAgICAgaWYgKCdjb2RlJyBpbiBkb21FeGNlcHRpb24pIHtcbiAgICAgICAgICAgIGV2ZW50LnRhZ3MgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZXZlbnQudGFncyksIHsgJ0RPTUV4Y2VwdGlvbi5jb2RlJzogXCJcIiArIGRvbUV4Y2VwdGlvbi5jb2RlIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IoZXhjZXB0aW9uKSkge1xuICAgICAgICAvLyB3ZSBoYXZlIGEgcmVhbCBFcnJvciBvYmplY3QsIGRvIG5vdGhpbmdcbiAgICAgICAgZXZlbnQgPSBldmVudEZyb21TdGFja3RyYWNlKGNvbXB1dGVTdGFja1RyYWNlKGV4Y2VwdGlvbikpO1xuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfVxuICAgIGlmIChpc1BsYWluT2JqZWN0KGV4Y2VwdGlvbikgfHwgaXNFdmVudChleGNlcHRpb24pKSB7XG4gICAgICAgIC8vIElmIGl0IGlzIHBsYWluIE9iamVjdCBvciBFdmVudCwgc2VyaWFsaXplIGl0IG1hbnVhbGx5IGFuZCBleHRyYWN0IG9wdGlvbnNcbiAgICAgICAgLy8gVGhpcyB3aWxsIGFsbG93IHVzIHRvIGdyb3VwIGV2ZW50cyBiYXNlZCBvbiB0b3AtbGV2ZWwga2V5c1xuICAgICAgICAvLyB3aGljaCBpcyBtdWNoIGJldHRlciB0aGFuIGNyZWF0aW5nIG5ldyBncm91cCB3aGVuIGFueSBrZXkvdmFsdWUgY2hhbmdlXG4gICAgICAgIHZhciBvYmplY3RFeGNlcHRpb24gPSBleGNlcHRpb247XG4gICAgICAgIGV2ZW50ID0gZXZlbnRGcm9tUGxhaW5PYmplY3Qob2JqZWN0RXhjZXB0aW9uLCBzeW50aGV0aWNFeGNlcHRpb24sIG9wdGlvbnMucmVqZWN0aW9uKTtcbiAgICAgICAgYWRkRXhjZXB0aW9uTWVjaGFuaXNtKGV2ZW50LCB7XG4gICAgICAgICAgICBzeW50aGV0aWM6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfVxuICAgIC8vIElmIG5vbmUgb2YgcHJldmlvdXMgY2hlY2tzIHdlcmUgdmFsaWQsIHRoZW4gaXQgbWVhbnMgdGhhdCBpdCdzIG5vdDpcbiAgICAvLyAtIGFuIGluc3RhbmNlIG9mIERPTUVycm9yXG4gICAgLy8gLSBhbiBpbnN0YW5jZSBvZiBET01FeGNlcHRpb25cbiAgICAvLyAtIGFuIGluc3RhbmNlIG9mIEV2ZW50XG4gICAgLy8gLSBhbiBpbnN0YW5jZSBvZiBFcnJvclxuICAgIC8vIC0gYSB2YWxpZCBFcnJvckV2ZW50IChvbmUgd2l0aCBhbiBlcnJvciBwcm9wZXJ0eSlcbiAgICAvLyAtIGEgcGxhaW4gT2JqZWN0XG4gICAgLy9cbiAgICAvLyBTbyBiYWlsIG91dCBhbmQgY2FwdHVyZSBpdCBhcyBhIHNpbXBsZSBtZXNzYWdlOlxuICAgIGV2ZW50ID0gZXZlbnRGcm9tU3RyaW5nKGV4Y2VwdGlvbiwgc3ludGhldGljRXhjZXB0aW9uLCBvcHRpb25zKTtcbiAgICBhZGRFeGNlcHRpb25UeXBlVmFsdWUoZXZlbnQsIFwiXCIgKyBleGNlcHRpb24sIHVuZGVmaW5lZCk7XG4gICAgYWRkRXhjZXB0aW9uTWVjaGFuaXNtKGV2ZW50LCB7XG4gICAgICAgIHN5bnRoZXRpYzogdHJ1ZSxcbiAgICB9KTtcbiAgICByZXR1cm4gZXZlbnQ7XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV2ZW50RnJvbVN0cmluZyhpbnB1dCwgc3ludGhldGljRXhjZXB0aW9uLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICB2YXIgZXZlbnQgPSB7XG4gICAgICAgIG1lc3NhZ2U6IGlucHV0LFxuICAgIH07XG4gICAgaWYgKG9wdGlvbnMuYXR0YWNoU3RhY2t0cmFjZSAmJiBzeW50aGV0aWNFeGNlcHRpb24pIHtcbiAgICAgICAgdmFyIHN0YWNrdHJhY2UgPSBjb21wdXRlU3RhY2tUcmFjZShzeW50aGV0aWNFeGNlcHRpb24pO1xuICAgICAgICB2YXIgZnJhbWVzXzEgPSBwcmVwYXJlRnJhbWVzRm9yRXZlbnQoc3RhY2t0cmFjZS5zdGFjayk7XG4gICAgICAgIGV2ZW50LnN0YWNrdHJhY2UgPSB7XG4gICAgICAgICAgICBmcmFtZXM6IGZyYW1lc18xLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZXZlbnQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVudGJ1aWxkZXIuanMubWFwIiwiLyoqIENyZWF0ZXMgYSBTZW50cnlSZXF1ZXN0IGZyb20gYW4gZXZlbnQuICovXG5leHBvcnQgZnVuY3Rpb24gc2Vzc2lvblRvU2VudHJ5UmVxdWVzdChzZXNzaW9uLCBhcGkpIHtcbiAgICB2YXIgZW52ZWxvcGVIZWFkZXJzID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBzZW50X2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgfSk7XG4gICAgdmFyIGl0ZW1IZWFkZXJzID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICB0eXBlOiAnc2Vzc2lvbicsXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYm9keTogZW52ZWxvcGVIZWFkZXJzICsgXCJcXG5cIiArIGl0ZW1IZWFkZXJzICsgXCJcXG5cIiArIEpTT04uc3RyaW5naWZ5KHNlc3Npb24pLFxuICAgICAgICB0eXBlOiAnc2Vzc2lvbicsXG4gICAgICAgIHVybDogYXBpLmdldEVudmVsb3BlRW5kcG9pbnRXaXRoVXJsRW5jb2RlZEF1dGgoKSxcbiAgICB9O1xufVxuLyoqIENyZWF0ZXMgYSBTZW50cnlSZXF1ZXN0IGZyb20gYW4gZXZlbnQuICovXG5leHBvcnQgZnVuY3Rpb24gZXZlbnRUb1NlbnRyeVJlcXVlc3QoZXZlbnQsIGFwaSkge1xuICAgIHZhciB1c2VFbnZlbG9wZSA9IGV2ZW50LnR5cGUgPT09ICd0cmFuc2FjdGlvbic7XG4gICAgdmFyIHJlcSA9IHtcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZXZlbnQpLFxuICAgICAgICB0eXBlOiBldmVudC50eXBlIHx8ICdldmVudCcsXG4gICAgICAgIHVybDogdXNlRW52ZWxvcGUgPyBhcGkuZ2V0RW52ZWxvcGVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aCgpIDogYXBpLmdldFN0b3JlRW5kcG9pbnRXaXRoVXJsRW5jb2RlZEF1dGgoKSxcbiAgICB9O1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcC5zZW50cnkuZGV2L3Nkay9lbnZlbG9wZXMvXG4gICAgLy8gU2luY2Ugd2UgZG9uJ3QgbmVlZCB0byBtYW5pcHVsYXRlIGVudmVsb3BlcyBub3Igc3RvcmUgdGhlbSwgdGhlcmUgaXMgbm9cbiAgICAvLyBleHBvcnRlZCBjb25jZXB0IG9mIGFuIEVudmVsb3BlIHdpdGggb3BlcmF0aW9ucyBpbmNsdWRpbmcgc2VyaWFsaXphdGlvbiBhbmRcbiAgICAvLyBkZXNlcmlhbGl6YXRpb24uIEluc3RlYWQsIHdlIG9ubHkgaW1wbGVtZW50IGEgbWluaW1hbCBzdWJzZXQgb2YgdGhlIHNwZWMgdG9cbiAgICAvLyBzZXJpYWxpemUgZXZlbnRzIGlubGluZSBoZXJlLlxuICAgIGlmICh1c2VFbnZlbG9wZSkge1xuICAgICAgICB2YXIgZW52ZWxvcGVIZWFkZXJzID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgZXZlbnRfaWQ6IGV2ZW50LmV2ZW50X2lkLFxuICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBhZGQgKiAxMDAwIHNpbmNlIHdlIGRpdmlkZSBpdCBieSAxMDAwIGJ5IGRlZmF1bHQgYnV0IEpTIHdvcmtzIHdpdGggbXMgcHJlY2lzaW9uXG4gICAgICAgICAgICAvLyBUaGUgcmVhc29uIHdlIHVzZSB0aW1lc3RhbXBXaXRoTXMgaGVyZSBpcyB0aGF0IGFsbCBjbG9ja3MgYWNyb3NzIHRoZSBTREsgdXNlIHRoZSBzYW1lIGNsb2NrXG4gICAgICAgICAgICBzZW50X2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgaXRlbUhlYWRlcnMgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICB0eXBlOiBldmVudC50eXBlLFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gVGhlIHRyYWlsaW5nIG5ld2xpbmUgaXMgb3B0aW9uYWwuIFdlIGludGVudGlvbmFsbHkgZG9uJ3Qgc2VuZCBpdCB0byBhdm9pZFxuICAgICAgICAvLyBzZW5kaW5nIHVubmVjZXNzYXJ5IGJ5dGVzLlxuICAgICAgICAvL1xuICAgICAgICAvLyBjb25zdCBlbnZlbG9wZSA9IGAke2VudmVsb3BlSGVhZGVyc31cXG4ke2l0ZW1IZWFkZXJzfVxcbiR7cmVxLmJvZHl9XFxuYDtcbiAgICAgICAgdmFyIGVudmVsb3BlID0gZW52ZWxvcGVIZWFkZXJzICsgXCJcXG5cIiArIGl0ZW1IZWFkZXJzICsgXCJcXG5cIiArIHJlcS5ib2R5O1xuICAgICAgICByZXEuYm9keSA9IGVudmVsb3BlO1xuICAgIH1cbiAgICByZXR1cm4gcmVxO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVxdWVzdC5qcy5tYXAiLCJpbXBvcnQgeyBEc24sIHVybEVuY29kZSB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xudmFyIFNFTlRSWV9BUElfVkVSU0lPTiA9ICc3Jztcbi8qKiBIZWxwZXIgY2xhc3MgdG8gcHJvdmlkZSB1cmxzIHRvIGRpZmZlcmVudCBTZW50cnkgZW5kcG9pbnRzLiAqL1xudmFyIEFQSSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKiogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEFQSSAqL1xuICAgIGZ1bmN0aW9uIEFQSShkc24pIHtcbiAgICAgICAgdGhpcy5kc24gPSBkc247XG4gICAgICAgIHRoaXMuX2Rzbk9iamVjdCA9IG5ldyBEc24oZHNuKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgdGhlIERzbiBvYmplY3QuICovXG4gICAgQVBJLnByb3RvdHlwZS5nZXREc24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kc25PYmplY3Q7XG4gICAgfTtcbiAgICAvKiogUmV0dXJucyB0aGUgcHJlZml4IHRvIGNvbnN0cnVjdCBTZW50cnkgaW5nZXN0aW9uIEFQSSBlbmRwb2ludHMuICovXG4gICAgQVBJLnByb3RvdHlwZS5nZXRCYXNlQXBpRW5kcG9pbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkc24gPSB0aGlzLl9kc25PYmplY3Q7XG4gICAgICAgIHZhciBwcm90b2NvbCA9IGRzbi5wcm90b2NvbCA/IGRzbi5wcm90b2NvbCArIFwiOlwiIDogJyc7XG4gICAgICAgIHZhciBwb3J0ID0gZHNuLnBvcnQgPyBcIjpcIiArIGRzbi5wb3J0IDogJyc7XG4gICAgICAgIHJldHVybiBwcm90b2NvbCArIFwiLy9cIiArIGRzbi5ob3N0ICsgcG9ydCArIChkc24ucGF0aCA/IFwiL1wiICsgZHNuLnBhdGggOiAnJykgKyBcIi9hcGkvXCI7XG4gICAgfTtcbiAgICAvKiogUmV0dXJucyB0aGUgc3RvcmUgZW5kcG9pbnQgVVJMLiAqL1xuICAgIEFQSS5wcm90b3R5cGUuZ2V0U3RvcmVFbmRwb2ludCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEluZ2VzdEVuZHBvaW50KCdzdG9yZScpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc3RvcmUgZW5kcG9pbnQgVVJMIHdpdGggYXV0aCBpbiB0aGUgcXVlcnkgc3RyaW5nLlxuICAgICAqXG4gICAgICogU2VuZGluZyBhdXRoIGFzIHBhcnQgb2YgdGhlIHF1ZXJ5IHN0cmluZyBhbmQgbm90IGFzIGN1c3RvbSBIVFRQIGhlYWRlcnMgYXZvaWRzIENPUlMgcHJlZmxpZ2h0IHJlcXVlc3RzLlxuICAgICAqL1xuICAgIEFQSS5wcm90b3R5cGUuZ2V0U3RvcmVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RvcmVFbmRwb2ludCgpICsgXCI/XCIgKyB0aGlzLl9lbmNvZGVkQXV0aCgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZW52ZWxvcGUgZW5kcG9pbnQgVVJMIHdpdGggYXV0aCBpbiB0aGUgcXVlcnkgc3RyaW5nLlxuICAgICAqXG4gICAgICogU2VuZGluZyBhdXRoIGFzIHBhcnQgb2YgdGhlIHF1ZXJ5IHN0cmluZyBhbmQgbm90IGFzIGN1c3RvbSBIVFRQIGhlYWRlcnMgYXZvaWRzIENPUlMgcHJlZmxpZ2h0IHJlcXVlc3RzLlxuICAgICAqL1xuICAgIEFQSS5wcm90b3R5cGUuZ2V0RW52ZWxvcGVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEVudmVsb3BlRW5kcG9pbnQoKSArIFwiP1wiICsgdGhpcy5fZW5jb2RlZEF1dGgoKTtcbiAgICB9O1xuICAgIC8qKiBSZXR1cm5zIG9ubHkgdGhlIHBhdGggY29tcG9uZW50IGZvciB0aGUgc3RvcmUgZW5kcG9pbnQuICovXG4gICAgQVBJLnByb3RvdHlwZS5nZXRTdG9yZUVuZHBvaW50UGF0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRzbiA9IHRoaXMuX2Rzbk9iamVjdDtcbiAgICAgICAgcmV0dXJuIChkc24ucGF0aCA/IFwiL1wiICsgZHNuLnBhdGggOiAnJykgKyBcIi9hcGkvXCIgKyBkc24ucHJvamVjdElkICsgXCIvc3RvcmUvXCI7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGluIHJlcXVlc3QgaGVhZGVycy5cbiAgICAgKiBUaGlzIGlzIG5lZWRlZCBmb3Igbm9kZSBhbmQgdGhlIG9sZCAvc3RvcmUgZW5kcG9pbnQgaW4gc2VudHJ5XG4gICAgICovXG4gICAgQVBJLnByb3RvdHlwZS5nZXRSZXF1ZXN0SGVhZGVycyA9IGZ1bmN0aW9uIChjbGllbnROYW1lLCBjbGllbnRWZXJzaW9uKSB7XG4gICAgICAgIHZhciBkc24gPSB0aGlzLl9kc25PYmplY3Q7XG4gICAgICAgIHZhciBoZWFkZXIgPSBbXCJTZW50cnkgc2VudHJ5X3ZlcnNpb249XCIgKyBTRU5UUllfQVBJX1ZFUlNJT05dO1xuICAgICAgICBoZWFkZXIucHVzaChcInNlbnRyeV9jbGllbnQ9XCIgKyBjbGllbnROYW1lICsgXCIvXCIgKyBjbGllbnRWZXJzaW9uKTtcbiAgICAgICAgaGVhZGVyLnB1c2goXCJzZW50cnlfa2V5PVwiICsgZHNuLnVzZXIpO1xuICAgICAgICBpZiAoZHNuLnBhc3MpIHtcbiAgICAgICAgICAgIGhlYWRlci5wdXNoKFwic2VudHJ5X3NlY3JldD1cIiArIGRzbi5wYXNzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICdYLVNlbnRyeS1BdXRoJzogaGVhZGVyLmpvaW4oJywgJyksXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKiogUmV0dXJucyB0aGUgdXJsIHRvIHRoZSByZXBvcnQgZGlhbG9nIGVuZHBvaW50LiAqL1xuICAgIEFQSS5wcm90b3R5cGUuZ2V0UmVwb3J0RGlhbG9nRW5kcG9pbnQgPSBmdW5jdGlvbiAoZGlhbG9nT3B0aW9ucykge1xuICAgICAgICBpZiAoZGlhbG9nT3B0aW9ucyA9PT0gdm9pZCAwKSB7IGRpYWxvZ09wdGlvbnMgPSB7fTsgfVxuICAgICAgICB2YXIgZHNuID0gdGhpcy5fZHNuT2JqZWN0O1xuICAgICAgICB2YXIgZW5kcG9pbnQgPSB0aGlzLmdldEJhc2VBcGlFbmRwb2ludCgpICsgXCJlbWJlZC9lcnJvci1wYWdlL1wiO1xuICAgICAgICB2YXIgZW5jb2RlZE9wdGlvbnMgPSBbXTtcbiAgICAgICAgZW5jb2RlZE9wdGlvbnMucHVzaChcImRzbj1cIiArIGRzbi50b1N0cmluZygpKTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGRpYWxvZ09wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICd1c2VyJykge1xuICAgICAgICAgICAgICAgIGlmICghZGlhbG9nT3B0aW9ucy51c2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZGlhbG9nT3B0aW9ucy51c2VyLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5jb2RlZE9wdGlvbnMucHVzaChcIm5hbWU9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoZGlhbG9nT3B0aW9ucy51c2VyLm5hbWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRpYWxvZ09wdGlvbnMudXNlci5lbWFpbCkge1xuICAgICAgICAgICAgICAgICAgICBlbmNvZGVkT3B0aW9ucy5wdXNoKFwiZW1haWw9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoZGlhbG9nT3B0aW9ucy51c2VyLmVtYWlsKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZW5jb2RlZE9wdGlvbnMucHVzaChlbmNvZGVVUklDb21wb25lbnQoa2V5KSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGRpYWxvZ09wdGlvbnNba2V5XSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlbmNvZGVkT3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBlbmRwb2ludCArIFwiP1wiICsgZW5jb2RlZE9wdGlvbnMuam9pbignJicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbmRwb2ludDtcbiAgICB9O1xuICAgIC8qKiBSZXR1cm5zIHRoZSBlbnZlbG9wZSBlbmRwb2ludCBVUkwuICovXG4gICAgQVBJLnByb3RvdHlwZS5fZ2V0RW52ZWxvcGVFbmRwb2ludCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEluZ2VzdEVuZHBvaW50KCdlbnZlbG9wZScpO1xuICAgIH07XG4gICAgLyoqIFJldHVybnMgdGhlIGluZ2VzdCBBUEkgZW5kcG9pbnQgZm9yIHRhcmdldC4gKi9cbiAgICBBUEkucHJvdG90eXBlLl9nZXRJbmdlc3RFbmRwb2ludCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgdmFyIGJhc2UgPSB0aGlzLmdldEJhc2VBcGlFbmRwb2ludCgpO1xuICAgICAgICB2YXIgZHNuID0gdGhpcy5fZHNuT2JqZWN0O1xuICAgICAgICByZXR1cm4gXCJcIiArIGJhc2UgKyBkc24ucHJvamVjdElkICsgXCIvXCIgKyB0YXJnZXQgKyBcIi9cIjtcbiAgICB9O1xuICAgIC8qKiBSZXR1cm5zIGEgVVJMLWVuY29kZWQgc3RyaW5nIHdpdGggYXV0aCBjb25maWcgc3VpdGFibGUgZm9yIGEgcXVlcnkgc3RyaW5nLiAqL1xuICAgIEFQSS5wcm90b3R5cGUuX2VuY29kZWRBdXRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZHNuID0gdGhpcy5fZHNuT2JqZWN0O1xuICAgICAgICB2YXIgYXV0aCA9IHtcbiAgICAgICAgICAgIC8vIFdlIHNlbmQgb25seSB0aGUgbWluaW11bSBzZXQgb2YgcmVxdWlyZWQgaW5mb3JtYXRpb24uIFNlZVxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvMjU3Mi5cbiAgICAgICAgICAgIHNlbnRyeV9rZXk6IGRzbi51c2VyLFxuICAgICAgICAgICAgc2VudHJ5X3ZlcnNpb246IFNFTlRSWV9BUElfVkVSU0lPTixcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHVybEVuY29kZShhdXRoKTtcbiAgICB9O1xuICAgIHJldHVybiBBUEk7XG59KCkpO1xuZXhwb3J0IHsgQVBJIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcGkuanMubWFwIiwiaW1wb3J0IHsgU2VudHJ5RXJyb3IgfSBmcm9tICcuL2Vycm9yJztcbmltcG9ydCB7IFN5bmNQcm9taXNlIH0gZnJvbSAnLi9zeW5jcHJvbWlzZSc7XG4vKiogQSBzaW1wbGUgcXVldWUgdGhhdCBob2xkcyBwcm9taXNlcy4gKi9cbnZhciBQcm9taXNlQnVmZmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFByb21pc2VCdWZmZXIoX2xpbWl0KSB7XG4gICAgICAgIHRoaXMuX2xpbWl0ID0gX2xpbWl0O1xuICAgICAgICAvKiogSW50ZXJuYWwgc2V0IG9mIHF1ZXVlZCBQcm9taXNlcyAqL1xuICAgICAgICB0aGlzLl9idWZmZXIgPSBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2F5cyBpZiB0aGUgYnVmZmVyIGlzIHJlYWR5IHRvIHRha2UgbW9yZSByZXF1ZXN0c1xuICAgICAqL1xuICAgIFByb21pc2VCdWZmZXIucHJvdG90eXBlLmlzUmVhZHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9saW1pdCA9PT0gdW5kZWZpbmVkIHx8IHRoaXMubGVuZ3RoKCkgPCB0aGlzLl9saW1pdDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZCBhIHByb21pc2UgdG8gdGhlIHF1ZXVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRhc2sgQ2FuIGJlIGFueSBQcm9taXNlTGlrZTxUPlxuICAgICAqIEByZXR1cm5zIFRoZSBvcmlnaW5hbCBwcm9taXNlLlxuICAgICAqL1xuICAgIFByb21pc2VCdWZmZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh0YXNrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5pc1JlYWR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBTeW5jUHJvbWlzZS5yZWplY3QobmV3IFNlbnRyeUVycm9yKCdOb3QgYWRkaW5nIFByb21pc2UgZHVlIHRvIGJ1ZmZlciBsaW1pdCByZWFjaGVkLicpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fYnVmZmVyLmluZGV4T2YodGFzaykgPT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLl9idWZmZXIucHVzaCh0YXNrKTtcbiAgICAgICAgfVxuICAgICAgICB0YXNrXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5yZW1vdmUodGFzayk7IH0pXG4gICAgICAgICAgICAudGhlbihudWxsLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucmVtb3ZlKHRhc2spLnRoZW4obnVsbCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgdG8gYWRkIHRoaXMgY2F0Y2ggaGVyZSBvdGhlcndpc2Ugd2UgaGF2ZSBhbiB1bmhhbmRsZWRQcm9taXNlUmVqZWN0aW9uXG4gICAgICAgICAgICAgICAgLy8gYmVjYXVzZSBpdCdzIGEgbmV3IFByb21pc2UgY2hhaW4uXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0YXNrO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgcHJvbWlzZSB0byB0aGUgcXVldWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGFzayBDYW4gYmUgYW55IFByb21pc2VMaWtlPFQ+XG4gICAgICogQHJldHVybnMgUmVtb3ZlZCBwcm9taXNlLlxuICAgICAqL1xuICAgIFByb21pc2VCdWZmZXIucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICh0YXNrKSB7XG4gICAgICAgIHZhciByZW1vdmVkVGFzayA9IHRoaXMuX2J1ZmZlci5zcGxpY2UodGhpcy5fYnVmZmVyLmluZGV4T2YodGFzayksIDEpWzBdO1xuICAgICAgICByZXR1cm4gcmVtb3ZlZFRhc2s7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIG51bWJlciBvZiB1bnJlc29sdmVkIHByb21pc2VzIGluIHRoZSBxdWV1ZS5cbiAgICAgKi9cbiAgICBQcm9taXNlQnVmZmVyLnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9idWZmZXIubGVuZ3RoO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhpcyB3aWxsIGRyYWluIHRoZSB3aG9sZSBxdWV1ZSwgcmV0dXJucyB0cnVlIGlmIHF1ZXVlIGlzIGVtcHR5IG9yIGRyYWluZWQuXG4gICAgICogSWYgdGltZW91dCBpcyBwcm92aWRlZCBhbmQgdGhlIHF1ZXVlIHRha2VzIGxvbmdlciB0byBkcmFpbiwgdGhlIHByb21pc2Ugc3RpbGwgcmVzb2x2ZXMgYnV0IHdpdGggZmFsc2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGltZW91dCBOdW1iZXIgaW4gbXMgdG8gd2FpdCB1bnRpbCBpdCByZXNvbHZlcyB3aXRoIGZhbHNlLlxuICAgICAqL1xuICAgIFByb21pc2VCdWZmZXIucHJvdG90eXBlLmRyYWluID0gZnVuY3Rpb24gKHRpbWVvdXQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBTeW5jUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgdmFyIGNhcHR1cmVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0ICYmIHRpbWVvdXQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICAgICAgU3luY1Byb21pc2UuYWxsKF90aGlzLl9idWZmZXIpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChjYXB0dXJlZFNldFRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKG51bGwsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFByb21pc2VCdWZmZXI7XG59KCkpO1xuZXhwb3J0IHsgUHJvbWlzZUJ1ZmZlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvbWlzZWJ1ZmZlci5qcy5tYXAiLCJpbXBvcnQgeyBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQVBJIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IFN0YXR1cywgfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IGxvZ2dlciwgcGFyc2VSZXRyeUFmdGVySGVhZGVyLCBQcm9taXNlQnVmZmVyLCBTZW50cnlFcnJvciB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuLyoqIEJhc2UgVHJhbnNwb3J0IGNsYXNzIGltcGxlbWVudGF0aW9uICovXG52YXIgQmFzZVRyYW5zcG9ydCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCYXNlVHJhbnNwb3J0KG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgLyoqIEEgc2ltcGxlIGJ1ZmZlciBob2xkaW5nIGFsbCByZXF1ZXN0cy4gKi9cbiAgICAgICAgdGhpcy5fYnVmZmVyID0gbmV3IFByb21pc2VCdWZmZXIoMzApO1xuICAgICAgICAvKiogTG9ja3MgdHJhbnNwb3J0IGFmdGVyIHJlY2VpdmluZyByYXRlIGxpbWl0cyBpbiBhIHJlc3BvbnNlICovXG4gICAgICAgIHRoaXMuX3JhdGVMaW1pdHMgPSB7fTtcbiAgICAgICAgdGhpcy5fYXBpID0gbmV3IEFQSSh0aGlzLm9wdGlvbnMuZHNuKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgIHRoaXMudXJsID0gdGhpcy5fYXBpLmdldFN0b3JlRW5kcG9pbnRXaXRoVXJsRW5jb2RlZEF1dGgoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCYXNlVHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kRXZlbnQgPSBmdW5jdGlvbiAoXykge1xuICAgICAgICB0aHJvdyBuZXcgU2VudHJ5RXJyb3IoJ1RyYW5zcG9ydCBDbGFzcyBoYXMgdG8gaW1wbGVtZW50IGBzZW5kRXZlbnRgIG1ldGhvZCcpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCYXNlVHJhbnNwb3J0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9idWZmZXIuZHJhaW4odGltZW91dCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBIYW5kbGUgU2VudHJ5IHJlcHNvbnNlIGZvciBwcm9taXNlLWJhc2VkIHRyYW5zcG9ydHMuXG4gICAgICovXG4gICAgQmFzZVRyYW5zcG9ydC5wcm90b3R5cGUuX2hhbmRsZVJlc3BvbnNlID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciByZXF1ZXN0VHlwZSA9IF9hLnJlcXVlc3RUeXBlLCByZXNwb25zZSA9IF9hLnJlc3BvbnNlLCBoZWFkZXJzID0gX2EuaGVhZGVycywgcmVzb2x2ZSA9IF9hLnJlc29sdmUsIHJlamVjdCA9IF9hLnJlamVjdDtcbiAgICAgICAgdmFyIHN0YXR1cyA9IFN0YXR1cy5mcm9tSHR0cENvZGUocmVzcG9uc2Uuc3RhdHVzKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFwiVGhlIG5hbWUgaXMgY2FzZS1pbnNlbnNpdGl2ZS5cIlxuICAgICAgICAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSGVhZGVycy9nZXRcbiAgICAgICAgICovXG4gICAgICAgIHZhciBsaW1pdGVkID0gdGhpcy5faGFuZGxlUmF0ZUxpbWl0KGhlYWRlcnMpO1xuICAgICAgICBpZiAobGltaXRlZClcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKFwiVG9vIG1hbnkgcmVxdWVzdHMsIGJhY2tpbmcgb2ZmIHRpbGw6IFwiICsgdGhpcy5fZGlzYWJsZWRVbnRpbChyZXF1ZXN0VHlwZSkpO1xuICAgICAgICBpZiAoc3RhdHVzID09PSBTdGF0dXMuU3VjY2Vzcykge1xuICAgICAgICAgICAgcmVzb2x2ZSh7IHN0YXR1czogc3RhdHVzIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdChyZXNwb25zZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB0aW1lIHRoYXQgZ2l2ZW4gY2F0ZWdvcnkgaXMgZGlzYWJsZWQgdW50aWwgZm9yIHJhdGUgbGltaXRpbmdcbiAgICAgKi9cbiAgICBCYXNlVHJhbnNwb3J0LnByb3RvdHlwZS5fZGlzYWJsZWRVbnRpbCA9IGZ1bmN0aW9uIChjYXRlZ29yeSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmF0ZUxpbWl0c1tjYXRlZ29yeV0gfHwgdGhpcy5fcmF0ZUxpbWl0cy5hbGw7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBjYXRlZ29yeSBpcyByYXRlIGxpbWl0ZWRcbiAgICAgKi9cbiAgICBCYXNlVHJhbnNwb3J0LnByb3RvdHlwZS5faXNSYXRlTGltaXRlZCA9IGZ1bmN0aW9uIChjYXRlZ29yeSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWRVbnRpbChjYXRlZ29yeSkgPiBuZXcgRGF0ZShEYXRlLm5vdygpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgaW50ZXJuYWwgX3JhdGVMaW1pdHMgZnJvbSBpbmNvbWluZyBoZWFkZXJzLiBSZXR1cm5zIHRydWUgaWYgaGVhZGVycyBjb250YWlucyBhIG5vbi1lbXB0eSByYXRlIGxpbWl0aW5nIGhlYWRlci5cbiAgICAgKi9cbiAgICBCYXNlVHJhbnNwb3J0LnByb3RvdHlwZS5faGFuZGxlUmF0ZUxpbWl0ID0gZnVuY3Rpb24gKGhlYWRlcnMpIHtcbiAgICAgICAgdmFyIGVfMSwgX2EsIGVfMiwgX2I7XG4gICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICB2YXIgcmxIZWFkZXIgPSBoZWFkZXJzWyd4LXNlbnRyeS1yYXRlLWxpbWl0cyddO1xuICAgICAgICB2YXIgcmFIZWFkZXIgPSBoZWFkZXJzWydyZXRyeS1hZnRlciddO1xuICAgICAgICBpZiAocmxIZWFkZXIpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2MgPSBfX3ZhbHVlcyhybEhlYWRlci50cmltKCkuc3BsaXQoJywnKSksIF9kID0gX2MubmV4dCgpOyAhX2QuZG9uZTsgX2QgPSBfYy5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxpbWl0ID0gX2QudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbWV0ZXJzID0gbGltaXQuc3BsaXQoJzonLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhlYWRlckRlbGF5ID0gcGFyc2VJbnQocGFyYW1ldGVyc1swXSwgMTApO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVsYXkgPSAoIWlzTmFOKGhlYWRlckRlbGF5KSA/IGhlYWRlckRlbGF5IDogNjApICogMTAwMDsgLy8gNjBzZWMgZGVmYXVsdFxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2UgPSAoZV8yID0gdm9pZCAwLCBfX3ZhbHVlcyhwYXJhbWV0ZXJzWzFdLnNwbGl0KCc7JykpKSwgX2YgPSBfZS5uZXh0KCk7ICFfZi5kb25lOyBfZiA9IF9lLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYXRlZ29yeSA9IF9mLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JhdGVMaW1pdHNbY2F0ZWdvcnkgfHwgJ2FsbCddID0gbmV3IERhdGUobm93ICsgZGVsYXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlXzJfMSkgeyBlXzIgPSB7IGVycm9yOiBlXzJfMSB9OyB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2YgJiYgIV9mLmRvbmUgJiYgKF9iID0gX2UucmV0dXJuKSkgX2IuY2FsbChfZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kICYmICFfZC5kb25lICYmIChfYSA9IF9jLnJldHVybikpIF9hLmNhbGwoX2MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyYUhlYWRlcikge1xuICAgICAgICAgICAgdGhpcy5fcmF0ZUxpbWl0cy5hbGwgPSBuZXcgRGF0ZShub3cgKyBwYXJzZVJldHJ5QWZ0ZXJIZWFkZXIobm93LCByYUhlYWRlcikpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgcmV0dXJuIEJhc2VUcmFuc3BvcnQ7XG59KCkpO1xuZXhwb3J0IHsgQmFzZVRyYW5zcG9ydCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZS5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGV2ZW50VG9TZW50cnlSZXF1ZXN0LCBzZXNzaW9uVG9TZW50cnlSZXF1ZXN0IH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IGdldEdsb2JhbE9iamVjdCwgc3VwcG9ydHNSZWZlcnJlclBvbGljeSwgU3luY1Byb21pc2UgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IEJhc2VUcmFuc3BvcnQgfSBmcm9tICcuL2Jhc2UnO1xudmFyIGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdCgpO1xuLyoqIGBmZXRjaGAgYmFzZWQgdHJhbnNwb3J0ICovXG52YXIgRmV0Y2hUcmFuc3BvcnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEZldGNoVHJhbnNwb3J0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZldGNoVHJhbnNwb3J0KCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgRmV0Y2hUcmFuc3BvcnQucHJvdG90eXBlLnNlbmRFdmVudCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VuZFJlcXVlc3QoZXZlbnRUb1NlbnRyeVJlcXVlc3QoZXZlbnQsIHRoaXMuX2FwaSksIGV2ZW50KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgRmV0Y2hUcmFuc3BvcnQucHJvdG90eXBlLnNlbmRTZXNzaW9uID0gZnVuY3Rpb24gKHNlc3Npb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbmRSZXF1ZXN0KHNlc3Npb25Ub1NlbnRyeVJlcXVlc3Qoc2Vzc2lvbiwgdGhpcy5fYXBpKSwgc2Vzc2lvbik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gc2VudHJ5UmVxdWVzdCBQcmVwYXJlZCBTZW50cnlSZXF1ZXN0IHRvIGJlIGRlbGl2ZXJlZFxuICAgICAqIEBwYXJhbSBvcmlnaW5hbFBheWxvYWQgT3JpZ2luYWwgcGF5bG9hZCB1c2VkIHRvIGNyZWF0ZSBTZW50cnlSZXF1ZXN0XG4gICAgICovXG4gICAgRmV0Y2hUcmFuc3BvcnQucHJvdG90eXBlLl9zZW5kUmVxdWVzdCA9IGZ1bmN0aW9uIChzZW50cnlSZXF1ZXN0LCBvcmlnaW5hbFBheWxvYWQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX2lzUmF0ZUxpbWl0ZWQoc2VudHJ5UmVxdWVzdC50eXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHtcbiAgICAgICAgICAgICAgICBldmVudDogb3JpZ2luYWxQYXlsb2FkLFxuICAgICAgICAgICAgICAgIHR5cGU6IHNlbnRyeVJlcXVlc3QudHlwZSxcbiAgICAgICAgICAgICAgICByZWFzb246IFwiVHJhbnNwb3J0IGxvY2tlZCB0aWxsIFwiICsgdGhpcy5fZGlzYWJsZWRVbnRpbChzZW50cnlSZXF1ZXN0LnR5cGUpICsgXCIgZHVlIHRvIHRvbyBtYW55IHJlcXVlc3RzLlwiLFxuICAgICAgICAgICAgICAgIHN0YXR1czogNDI5LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBib2R5OiBzZW50cnlSZXF1ZXN0LmJvZHksXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIC8vIERlc3BpdGUgYWxsIHN0YXJzIGluIHRoZSBza3kgc2F5aW5nIHRoYXQgRWRnZSBzdXBwb3J0cyBvbGQgZHJhZnQgc3ludGF4LCBha2EgJ25ldmVyJywgJ2Fsd2F5cycsICdvcmlnaW4nIGFuZCAnZGVmYXVsdFxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jZmVhdD1yZWZlcnJlci1wb2xpY3lcbiAgICAgICAgICAgIC8vIEl0IGRvZXNuJ3QuIEFuZCBpdCB0aHJvdyBleGNlcHRpb24gaW5zdGVhZCBvZiBpZ25vcmluZyB0aGlzIHBhcmFtZXRlci4uLlxuICAgICAgICAgICAgLy8gUkVGOiBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3JhdmVuLWpzL2lzc3Vlcy8xMjMzXG4gICAgICAgICAgICByZWZlcnJlclBvbGljeTogKHN1cHBvcnRzUmVmZXJyZXJQb2xpY3koKSA/ICdvcmlnaW4nIDogJycpLFxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmZldGNoUGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKG9wdGlvbnMsIHRoaXMub3B0aW9ucy5mZXRjaFBhcmFtZXRlcnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaGVhZGVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBvcHRpb25zLmhlYWRlcnMgPSB0aGlzLm9wdGlvbnMuaGVhZGVycztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fYnVmZmVyLmFkZChuZXcgU3luY1Byb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgZ2xvYmFsXG4gICAgICAgICAgICAgICAgLmZldGNoKHNlbnRyeVJlcXVlc3QudXJsLCBvcHRpb25zKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHZhciBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgICAgICAneC1zZW50cnktcmF0ZS1saW1pdHMnOiByZXNwb25zZS5oZWFkZXJzLmdldCgnWC1TZW50cnktUmF0ZS1MaW1pdHMnKSxcbiAgICAgICAgICAgICAgICAgICAgJ3JldHJ5LWFmdGVyJzogcmVzcG9uc2UuaGVhZGVycy5nZXQoJ1JldHJ5LUFmdGVyJyksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlUmVzcG9uc2UoeyByZXF1ZXN0VHlwZTogc2VudHJ5UmVxdWVzdC50eXBlLCByZXNwb25zZTogcmVzcG9uc2UsIGhlYWRlcnM6IGhlYWRlcnMsIHJlc29sdmU6IHJlc29sdmUsIHJlamVjdDogcmVqZWN0IH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2gocmVqZWN0KTtcbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgcmV0dXJuIEZldGNoVHJhbnNwb3J0O1xufShCYXNlVHJhbnNwb3J0KSk7XG5leHBvcnQgeyBGZXRjaFRyYW5zcG9ydCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmV0Y2guanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBldmVudFRvU2VudHJ5UmVxdWVzdCwgc2Vzc2lvblRvU2VudHJ5UmVxdWVzdCB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBTeW5jUHJvbWlzZSB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgQmFzZVRyYW5zcG9ydCB9IGZyb20gJy4vYmFzZSc7XG4vKiogYFhIUmAgYmFzZWQgdHJhbnNwb3J0ICovXG52YXIgWEhSVHJhbnNwb3J0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhYSFJUcmFuc3BvcnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gWEhSVHJhbnNwb3J0KCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgWEhSVHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbmRSZXF1ZXN0KGV2ZW50VG9TZW50cnlSZXF1ZXN0KGV2ZW50LCB0aGlzLl9hcGkpLCBldmVudCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFhIUlRyYW5zcG9ydC5wcm90b3R5cGUuc2VuZFNlc3Npb24gPSBmdW5jdGlvbiAoc2Vzc2lvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VuZFJlcXVlc3Qoc2Vzc2lvblRvU2VudHJ5UmVxdWVzdChzZXNzaW9uLCB0aGlzLl9hcGkpLCBzZXNzaW9uKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBzZW50cnlSZXF1ZXN0IFByZXBhcmVkIFNlbnRyeVJlcXVlc3QgdG8gYmUgZGVsaXZlcmVkXG4gICAgICogQHBhcmFtIG9yaWdpbmFsUGF5bG9hZCBPcmlnaW5hbCBwYXlsb2FkIHVzZWQgdG8gY3JlYXRlIFNlbnRyeVJlcXVlc3RcbiAgICAgKi9cbiAgICBYSFJUcmFuc3BvcnQucHJvdG90eXBlLl9zZW5kUmVxdWVzdCA9IGZ1bmN0aW9uIChzZW50cnlSZXF1ZXN0LCBvcmlnaW5hbFBheWxvYWQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX2lzUmF0ZUxpbWl0ZWQoc2VudHJ5UmVxdWVzdC50eXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHtcbiAgICAgICAgICAgICAgICBldmVudDogb3JpZ2luYWxQYXlsb2FkLFxuICAgICAgICAgICAgICAgIHR5cGU6IHNlbnRyeVJlcXVlc3QudHlwZSxcbiAgICAgICAgICAgICAgICByZWFzb246IFwiVHJhbnNwb3J0IGxvY2tlZCB0aWxsIFwiICsgdGhpcy5fZGlzYWJsZWRVbnRpbChzZW50cnlSZXF1ZXN0LnR5cGUpICsgXCIgZHVlIHRvIHRvbyBtYW55IHJlcXVlc3RzLlwiLFxuICAgICAgICAgICAgICAgIHN0YXR1czogNDI5LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2J1ZmZlci5hZGQobmV3IFN5bmNQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVxdWVzdC5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3gtc2VudHJ5LXJhdGUtbGltaXRzJzogcmVxdWVzdC5nZXRSZXNwb25zZUhlYWRlcignWC1TZW50cnktUmF0ZS1MaW1pdHMnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdyZXRyeS1hZnRlcic6IHJlcXVlc3QuZ2V0UmVzcG9uc2VIZWFkZXIoJ1JldHJ5LUFmdGVyJyksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9oYW5kbGVSZXNwb25zZSh7IHJlcXVlc3RUeXBlOiBzZW50cnlSZXF1ZXN0LnR5cGUsIHJlc3BvbnNlOiByZXF1ZXN0LCBoZWFkZXJzOiBoZWFkZXJzLCByZXNvbHZlOiByZXNvbHZlLCByZWplY3Q6IHJlamVjdCB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVxdWVzdC5vcGVuKCdQT1NUJywgc2VudHJ5UmVxdWVzdC51cmwpO1xuICAgICAgICAgICAgZm9yICh2YXIgaGVhZGVyIGluIF90aGlzLm9wdGlvbnMuaGVhZGVycykge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmhlYWRlcnMuaGFzT3duUHJvcGVydHkoaGVhZGVyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoaGVhZGVyLCBfdGhpcy5vcHRpb25zLmhlYWRlcnNbaGVhZGVyXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVxdWVzdC5zZW5kKHNlbnRyeVJlcXVlc3QuYm9keSk7XG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIHJldHVybiBYSFJUcmFuc3BvcnQ7XG59KEJhc2VUcmFuc3BvcnQpKTtcbmV4cG9ydCB7IFhIUlRyYW5zcG9ydCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9eGhyLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEJhc2VCYWNrZW5kIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IFNldmVyaXR5IH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBzdXBwb3J0c0ZldGNoIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBldmVudEZyb21FeGNlcHRpb24sIGV2ZW50RnJvbU1lc3NhZ2UgfSBmcm9tICcuL2V2ZW50YnVpbGRlcic7XG5pbXBvcnQgeyBGZXRjaFRyYW5zcG9ydCwgWEhSVHJhbnNwb3J0IH0gZnJvbSAnLi90cmFuc3BvcnRzJztcbi8qKlxuICogVGhlIFNlbnRyeSBCcm93c2VyIFNESyBCYWNrZW5kLlxuICogQGhpZGRlblxuICovXG52YXIgQnJvd3NlckJhY2tlbmQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJyb3dzZXJCYWNrZW5kLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJyb3dzZXJCYWNrZW5kKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQnJvd3NlckJhY2tlbmQucHJvdG90eXBlLmV2ZW50RnJvbUV4Y2VwdGlvbiA9IGZ1bmN0aW9uIChleGNlcHRpb24sIGhpbnQpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50RnJvbUV4Y2VwdGlvbih0aGlzLl9vcHRpb25zLCBleGNlcHRpb24sIGhpbnQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCcm93c2VyQmFja2VuZC5wcm90b3R5cGUuZXZlbnRGcm9tTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlLCBsZXZlbCwgaGludCkge1xuICAgICAgICBpZiAobGV2ZWwgPT09IHZvaWQgMCkgeyBsZXZlbCA9IFNldmVyaXR5LkluZm87IH1cbiAgICAgICAgcmV0dXJuIGV2ZW50RnJvbU1lc3NhZ2UodGhpcy5fb3B0aW9ucywgbWVzc2FnZSwgbGV2ZWwsIGhpbnQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCcm93c2VyQmFja2VuZC5wcm90b3R5cGUuX3NldHVwVHJhbnNwb3J0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuX29wdGlvbnMuZHNuKSB7XG4gICAgICAgICAgICAvLyBXZSByZXR1cm4gdGhlIG5vb3AgdHJhbnNwb3J0IGhlcmUgaW4gY2FzZSB0aGVyZSBpcyBubyBEc24uXG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5fc2V0dXBUcmFuc3BvcnQuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdHJhbnNwb3J0T3B0aW9ucyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLl9vcHRpb25zLnRyYW5zcG9ydE9wdGlvbnMpLCB7IGRzbjogdGhpcy5fb3B0aW9ucy5kc24gfSk7XG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnRyYW5zcG9ydCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyB0aGlzLl9vcHRpb25zLnRyYW5zcG9ydCh0cmFuc3BvcnRPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3VwcG9ydHNGZXRjaCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZldGNoVHJhbnNwb3J0KHRyYW5zcG9ydE9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgWEhSVHJhbnNwb3J0KHRyYW5zcG9ydE9wdGlvbnMpO1xuICAgIH07XG4gICAgcmV0dXJuIEJyb3dzZXJCYWNrZW5kO1xufShCYXNlQmFja2VuZCkpO1xuZXhwb3J0IHsgQnJvd3NlckJhY2tlbmQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhY2tlbmQuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fcmVhZCwgX19zcHJlYWQgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGdldEN1cnJlbnRIdWIgfSBmcm9tICdAc2VudHJ5L2h1Yic7XG4vKipcbiAqIFRoaXMgY2FsbHMgYSBmdW5jdGlvbiBvbiB0aGUgY3VycmVudCBodWIuXG4gKiBAcGFyYW0gbWV0aG9kIGZ1bmN0aW9uIHRvIGNhbGwgb24gaHViLlxuICogQHBhcmFtIGFyZ3MgdG8gcGFzcyB0byBmdW5jdGlvbi5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIGNhbGxPbkh1YihtZXRob2QpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBodWIgPSBnZXRDdXJyZW50SHViKCk7XG4gICAgaWYgKGh1YiAmJiBodWJbbWV0aG9kXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICByZXR1cm4gaHViW21ldGhvZF0uYXBwbHkoaHViLCBfX3NwcmVhZChhcmdzKSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGh1YiBkZWZpbmVkIG9yIFwiICsgbWV0aG9kICsgXCIgd2FzIG5vdCBmb3VuZCBvbiB0aGUgaHViLCBwbGVhc2Ugb3BlbiBhIGJ1ZyByZXBvcnQuXCIpO1xufVxuLyoqXG4gKiBDYXB0dXJlcyBhbiBleGNlcHRpb24gZXZlbnQgYW5kIHNlbmRzIGl0IHRvIFNlbnRyeS5cbiAqXG4gKiBAcGFyYW0gZXhjZXB0aW9uIEFuIGV4Y2VwdGlvbi1saWtlIG9iamVjdC5cbiAqIEByZXR1cm5zIFRoZSBnZW5lcmF0ZWQgZXZlbnRJZC5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnksIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcbmV4cG9ydCBmdW5jdGlvbiBjYXB0dXJlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgY2FwdHVyZUNvbnRleHQpIHtcbiAgICB2YXIgc3ludGhldGljRXhjZXB0aW9uO1xuICAgIHRyeSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU2VudHJ5IHN5bnRoZXRpY0V4Y2VwdGlvbicpO1xuICAgIH1cbiAgICBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgIHN5bnRoZXRpY0V4Y2VwdGlvbiA9IGV4Y2VwdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIGNhbGxPbkh1YignY2FwdHVyZUV4Y2VwdGlvbicsIGV4Y2VwdGlvbiwge1xuICAgICAgICBjYXB0dXJlQ29udGV4dDogY2FwdHVyZUNvbnRleHQsXG4gICAgICAgIG9yaWdpbmFsRXhjZXB0aW9uOiBleGNlcHRpb24sXG4gICAgICAgIHN5bnRoZXRpY0V4Y2VwdGlvbjogc3ludGhldGljRXhjZXB0aW9uLFxuICAgIH0pO1xufVxuLyoqXG4gKiBDYXB0dXJlcyBhIG1lc3NhZ2UgZXZlbnQgYW5kIHNlbmRzIGl0IHRvIFNlbnRyeS5cbiAqXG4gKiBAcGFyYW0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBzZW5kIHRvIFNlbnRyeS5cbiAqIEBwYXJhbSBsZXZlbCBEZWZpbmUgdGhlIGxldmVsIG9mIHRoZSBtZXNzYWdlLlxuICogQHJldHVybnMgVGhlIGdlbmVyYXRlZCBldmVudElkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FwdHVyZU1lc3NhZ2UobWVzc2FnZSwgY2FwdHVyZUNvbnRleHQpIHtcbiAgICB2YXIgc3ludGhldGljRXhjZXB0aW9uO1xuICAgIHRyeSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICBzeW50aGV0aWNFeGNlcHRpb24gPSBleGNlcHRpb247XG4gICAgfVxuICAgIC8vIFRoaXMgaXMgbmVjZXNzYXJ5IHRvIHByb3ZpZGUgZXhwbGljaXQgc2NvcGVzIHVwZ3JhZGUsIHdpdGhvdXQgY2hhbmdpbmcgdGhlIG9yaWdpbmFsXG4gICAgLy8gYXJpdHkgb2YgdGhlIGBjYXB0dXJlTWVzc2FnZShtZXNzYWdlLCBsZXZlbClgIG1ldGhvZC5cbiAgICB2YXIgbGV2ZWwgPSB0eXBlb2YgY2FwdHVyZUNvbnRleHQgPT09ICdzdHJpbmcnID8gY2FwdHVyZUNvbnRleHQgOiB1bmRlZmluZWQ7XG4gICAgdmFyIGNvbnRleHQgPSB0eXBlb2YgY2FwdHVyZUNvbnRleHQgIT09ICdzdHJpbmcnID8geyBjYXB0dXJlQ29udGV4dDogY2FwdHVyZUNvbnRleHQgfSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gY2FsbE9uSHViKCdjYXB0dXJlTWVzc2FnZScsIG1lc3NhZ2UsIGxldmVsLCBfX2Fzc2lnbih7IG9yaWdpbmFsRXhjZXB0aW9uOiBtZXNzYWdlLCBzeW50aGV0aWNFeGNlcHRpb246IHN5bnRoZXRpY0V4Y2VwdGlvbiB9LCBjb250ZXh0KSk7XG59XG4vKipcbiAqIENhcHR1cmVzIGEgbWFudWFsbHkgY3JlYXRlZCBldmVudCBhbmQgc2VuZHMgaXQgdG8gU2VudHJ5LlxuICpcbiAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgdG8gc2VuZCB0byBTZW50cnkuXG4gKiBAcmV0dXJucyBUaGUgZ2VuZXJhdGVkIGV2ZW50SWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYXB0dXJlRXZlbnQoZXZlbnQpIHtcbiAgICByZXR1cm4gY2FsbE9uSHViKCdjYXB0dXJlRXZlbnQnLCBldmVudCk7XG59XG4vKipcbiAqIENhbGxiYWNrIHRvIHNldCBjb250ZXh0IGluZm9ybWF0aW9uIG9udG8gdGhlIHNjb3BlLlxuICogQHBhcmFtIGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgU2NvcGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmVTY29wZShjYWxsYmFjaykge1xuICAgIGNhbGxPbkh1YignY29uZmlndXJlU2NvcGUnLCBjYWxsYmFjayk7XG59XG4vKipcbiAqIFJlY29yZHMgYSBuZXcgYnJlYWRjcnVtYiB3aGljaCB3aWxsIGJlIGF0dGFjaGVkIHRvIGZ1dHVyZSBldmVudHMuXG4gKlxuICogQnJlYWRjcnVtYnMgd2lsbCBiZSBhZGRlZCB0byBzdWJzZXF1ZW50IGV2ZW50cyB0byBwcm92aWRlIG1vcmUgY29udGV4dCBvblxuICogdXNlcidzIGFjdGlvbnMgcHJpb3IgdG8gYW4gZXJyb3Igb3IgY3Jhc2guXG4gKlxuICogQHBhcmFtIGJyZWFkY3J1bWIgVGhlIGJyZWFkY3J1bWIgdG8gcmVjb3JkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkQnJlYWRjcnVtYihicmVhZGNydW1iKSB7XG4gICAgY2FsbE9uSHViKCdhZGRCcmVhZGNydW1iJywgYnJlYWRjcnVtYik7XG59XG4vKipcbiAqIFNldHMgY29udGV4dCBkYXRhIHdpdGggdGhlIGdpdmVuIG5hbWUuXG4gKiBAcGFyYW0gbmFtZSBvZiB0aGUgY29udGV4dFxuICogQHBhcmFtIGNvbnRleHQgQW55IGtpbmQgb2YgZGF0YS4gVGhpcyBkYXRhIHdpbGwgYmUgbm9ybWFsaXplZC5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBmdW5jdGlvbiBzZXRDb250ZXh0KG5hbWUsIGNvbnRleHQpIHtcbiAgICBjYWxsT25IdWIoJ3NldENvbnRleHQnLCBuYW1lLCBjb250ZXh0KTtcbn1cbi8qKlxuICogU2V0IGFuIG9iamVjdCB0aGF0IHdpbGwgYmUgbWVyZ2VkIHNlbnQgYXMgZXh0cmEgZGF0YSB3aXRoIHRoZSBldmVudC5cbiAqIEBwYXJhbSBleHRyYXMgRXh0cmFzIG9iamVjdCB0byBtZXJnZSBpbnRvIGN1cnJlbnQgY29udGV4dC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEV4dHJhcyhleHRyYXMpIHtcbiAgICBjYWxsT25IdWIoJ3NldEV4dHJhcycsIGV4dHJhcyk7XG59XG4vKipcbiAqIFNldCBhbiBvYmplY3QgdGhhdCB3aWxsIGJlIG1lcmdlZCBzZW50IGFzIHRhZ3MgZGF0YSB3aXRoIHRoZSBldmVudC5cbiAqIEBwYXJhbSB0YWdzIFRhZ3MgY29udGV4dCBvYmplY3QgdG8gbWVyZ2UgaW50byBjdXJyZW50IGNvbnRleHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRUYWdzKHRhZ3MpIHtcbiAgICBjYWxsT25IdWIoJ3NldFRhZ3MnLCB0YWdzKTtcbn1cbi8qKlxuICogU2V0IGtleTp2YWx1ZSB0aGF0IHdpbGwgYmUgc2VudCBhcyBleHRyYSBkYXRhIHdpdGggdGhlIGV2ZW50LlxuICogQHBhcmFtIGtleSBTdHJpbmcgb2YgZXh0cmFcbiAqIEBwYXJhbSBleHRyYSBBbnkga2luZCBvZiBkYXRhLiBUaGlzIGRhdGEgd2lsbCBiZSBub3JtYWxpemVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0RXh0cmEoa2V5LCBleHRyYSkge1xuICAgIGNhbGxPbkh1Yignc2V0RXh0cmEnLCBrZXksIGV4dHJhKTtcbn1cbi8qKlxuICogU2V0IGtleTp2YWx1ZSB0aGF0IHdpbGwgYmUgc2VudCBhcyB0YWdzIGRhdGEgd2l0aCB0aGUgZXZlbnQuXG4gKiBAcGFyYW0ga2V5IFN0cmluZyBrZXkgb2YgdGFnXG4gKiBAcGFyYW0gdmFsdWUgU3RyaW5nIHZhbHVlIG9mIHRhZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0VGFnKGtleSwgdmFsdWUpIHtcbiAgICBjYWxsT25IdWIoJ3NldFRhZycsIGtleSwgdmFsdWUpO1xufVxuLyoqXG4gKiBVcGRhdGVzIHVzZXIgY29udGV4dCBpbmZvcm1hdGlvbiBmb3IgZnV0dXJlIGV2ZW50cy5cbiAqXG4gKiBAcGFyYW0gdXNlciBVc2VyIGNvbnRleHQgb2JqZWN0IHRvIGJlIHNldCBpbiB0aGUgY3VycmVudCBjb250ZXh0LiBQYXNzIGBudWxsYCB0byB1bnNldCB0aGUgdXNlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFVzZXIodXNlcikge1xuICAgIGNhbGxPbkh1Yignc2V0VXNlcicsIHVzZXIpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHNjb3BlIHdpdGggYW5kIGV4ZWN1dGVzIHRoZSBnaXZlbiBvcGVyYXRpb24gd2l0aGluLlxuICogVGhlIHNjb3BlIGlzIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZCBvbmNlIHRoZSBvcGVyYXRpb25cbiAqIGZpbmlzaGVzIG9yIHRocm93cy5cbiAqXG4gKiBUaGlzIGlzIGVzc2VudGlhbGx5IGEgY29udmVuaWVuY2UgZnVuY3Rpb24gZm9yOlxuICpcbiAqICAgICBwdXNoU2NvcGUoKTtcbiAqICAgICBjYWxsYmFjaygpO1xuICogICAgIHBvcFNjb3BlKCk7XG4gKlxuICogQHBhcmFtIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBlbmNsb3NlZCBpbnRvIHB1c2gvcG9wU2NvcGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aXRoU2NvcGUoY2FsbGJhY2spIHtcbiAgICBjYWxsT25IdWIoJ3dpdGhTY29wZScsIGNhbGxiYWNrKTtcbn1cbi8qKlxuICogQ2FsbHMgYSBmdW5jdGlvbiBvbiB0aGUgbGF0ZXN0IGNsaWVudC4gVXNlIHRoaXMgd2l0aCBjYXV0aW9uLCBpdCdzIG1lYW50IGFzXG4gKiBpbiBcImludGVybmFsXCIgaGVscGVyIHNvIHdlIGRvbid0IG5lZWQgdG8gZXhwb3NlIGV2ZXJ5IHBvc3NpYmxlIGZ1bmN0aW9uIGluXG4gKiB0aGUgc2hpbS4gSXQgaXMgbm90IGd1YXJhbnRlZWQgdGhhdCB0aGUgY2xpZW50IGFjdHVhbGx5IGltcGxlbWVudHMgdGhlXG4gKiBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gbWV0aG9kIFRoZSBtZXRob2QgdG8gY2FsbCBvbiB0aGUgY2xpZW50L2NsaWVudC5cbiAqIEBwYXJhbSBhcmdzIEFyZ3VtZW50cyB0byBwYXNzIHRvIHRoZSBjbGllbnQvZm9udGVuZC5cbiAqIEBoaWRkZW5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBmdW5jdGlvbiBfY2FsbE9uQ2xpZW50KG1ldGhvZCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgY2FsbE9uSHViLmFwcGx5KHZvaWQgMCwgX19zcHJlYWQoWydfaW52b2tlQ2xpZW50JywgbWV0aG9kXSwgYXJncykpO1xufVxuLyoqXG4gKiBTdGFydHMgYSBuZXcgYFRyYW5zYWN0aW9uYCBhbmQgcmV0dXJucyBpdC4gVGhpcyBpcyB0aGUgZW50cnkgcG9pbnQgdG8gbWFudWFsIHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uLlxuICpcbiAqIEEgdHJlZSBzdHJ1Y3R1cmUgY2FuIGJlIGJ1aWx0IGJ5IGFkZGluZyBjaGlsZCBzcGFucyB0byB0aGUgdHJhbnNhY3Rpb24sIGFuZCBjaGlsZCBzcGFucyB0byBvdGhlciBzcGFucy4gVG8gc3RhcnQgYVxuICogbmV3IGNoaWxkIHNwYW4gd2l0aGluIHRoZSB0cmFuc2FjdGlvbiBvciBhbnkgc3BhbiwgY2FsbCB0aGUgcmVzcGVjdGl2ZSBgLnN0YXJ0Q2hpbGQoKWAgbWV0aG9kLlxuICpcbiAqIEV2ZXJ5IGNoaWxkIHNwYW4gbXVzdCBiZSBmaW5pc2hlZCBiZWZvcmUgdGhlIHRyYW5zYWN0aW9uIGlzIGZpbmlzaGVkLCBvdGhlcndpc2UgdGhlIHVuZmluaXNoZWQgc3BhbnMgYXJlIGRpc2NhcmRlZC5cbiAqXG4gKiBUaGUgdHJhbnNhY3Rpb24gbXVzdCBiZSBmaW5pc2hlZCB3aXRoIGEgY2FsbCB0byBpdHMgYC5maW5pc2goKWAgbWV0aG9kLCBhdCB3aGljaCBwb2ludCB0aGUgdHJhbnNhY3Rpb24gd2l0aCBhbGwgaXRzXG4gKiBmaW5pc2hlZCBjaGlsZCBzcGFucyB3aWxsIGJlIHNlbnQgdG8gU2VudHJ5LlxuICpcbiAqIEBwYXJhbSBjb250ZXh0IFByb3BlcnRpZXMgb2YgdGhlIG5ldyBgVHJhbnNhY3Rpb25gLlxuICogQHBhcmFtIGN1c3RvbVNhbXBsaW5nQ29udGV4dCBJbmZvcm1hdGlvbiBnaXZlbiB0byB0aGUgdHJhbnNhY3Rpb24gc2FtcGxpbmcgZnVuY3Rpb24gKGFsb25nIHdpdGggY29udGV4dC1kZXBlbmRlbnRcbiAqIGRlZmF1bHQgdmFsdWVzKS4gU2VlIHtAbGluayBPcHRpb25zLnRyYWNlc1NhbXBsZXJ9LlxuICpcbiAqIEByZXR1cm5zIFRoZSB0cmFuc2FjdGlvbiB3aGljaCB3YXMganVzdCBzdGFydGVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGFydFRyYW5zYWN0aW9uKGNvbnRleHQsIGN1c3RvbVNhbXBsaW5nQ29udGV4dCkge1xuICAgIHJldHVybiBjYWxsT25IdWIoJ3N0YXJ0VHJhbnNhY3Rpb24nLCBfX2Fzc2lnbih7fSwgY29udGV4dCksIGN1c3RvbVNhbXBsaW5nQ29udGV4dCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQVBJLCBjYXB0dXJlRXhjZXB0aW9uLCB3aXRoU2NvcGUgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgYWRkRXhjZXB0aW9uTWVjaGFuaXNtLCBhZGRFeGNlcHRpb25UeXBlVmFsdWUsIGxvZ2dlciB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xudmFyIGlnbm9yZU9uRXJyb3IgPSAwO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaG91bGRJZ25vcmVPbkVycm9yKCkge1xuICAgIHJldHVybiBpZ25vcmVPbkVycm9yID4gMDtcbn1cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gaWdub3JlTmV4dE9uRXJyb3IoKSB7XG4gICAgLy8gb25lcnJvciBzaG91bGQgdHJpZ2dlciBiZWZvcmUgc2V0VGltZW91dFxuICAgIGlnbm9yZU9uRXJyb3IgKz0gMTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWdub3JlT25FcnJvciAtPSAxO1xuICAgIH0pO1xufVxuLyoqXG4gKiBJbnN0cnVtZW50cyB0aGUgZ2l2ZW4gZnVuY3Rpb24gYW5kIHNlbmRzIGFuIGV2ZW50IHRvIFNlbnRyeSBldmVyeSB0aW1lIHRoZVxuICogZnVuY3Rpb24gdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAqXG4gKiBAcGFyYW0gZm4gQSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHJldHVybnMgVGhlIHdyYXBwZWQgZnVuY3Rpb24uXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3cmFwKGZuLCBvcHRpb25zLCBiZWZvcmUpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZuO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyBXZSBkb24ndCB3YW5uYSB3cmFwIGl0IHR3aWNlXG4gICAgICAgIGlmIChmbi5fX3NlbnRyeV9fKSB7XG4gICAgICAgICAgICByZXR1cm4gZm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhpcyBoYXMgYWxyZWFkeSBiZWVuIHdyYXBwZWQgaW4gdGhlIHBhc3QsIHJldHVybiB0aGF0IHdyYXBwZWQgZnVuY3Rpb25cbiAgICAgICAgaWYgKGZuLl9fc2VudHJ5X3dyYXBwZWRfXykge1xuICAgICAgICAgICAgcmV0dXJuIGZuLl9fc2VudHJ5X3dyYXBwZWRfXztcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICAvLyBKdXN0IGFjY2Vzc2luZyBjdXN0b20gcHJvcHMgaW4gc29tZSBTZWxlbml1bSBlbnZpcm9ubWVudHNcbiAgICAgICAgLy8gY2FuIGNhdXNlIGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGV4Y2VwdGlvbiAoc2VlIHJhdmVuLWpzIzQ5NSkuXG4gICAgICAgIC8vIEJhaWwgb24gd3JhcHBpbmcgYW5kIHJldHVybiB0aGUgZnVuY3Rpb24gYXMtaXMgKGRlZmVycyB0byB3aW5kb3cub25lcnJvcikuXG4gICAgICAgIHJldHVybiBmbjtcbiAgICB9XG4gICAgLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLXJlc3QtcGFyYW1zICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICB2YXIgc2VudHJ5V3JhcHBlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGJlZm9yZSAmJiB0eXBlb2YgYmVmb3JlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgYmVmb3JlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICAgICAgICB2YXIgd3JhcHBlZEFyZ3VtZW50cyA9IGFyZ3MubWFwKGZ1bmN0aW9uIChhcmcpIHsgcmV0dXJuIHdyYXAoYXJnLCBvcHRpb25zKTsgfSk7XG4gICAgICAgICAgICBpZiAoZm4uaGFuZGxlRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBBdHRlbXB0IHRvIGludm9rZSB1c2VyLWxhbmQgZnVuY3Rpb25cbiAgICAgICAgICAgICAgICAvLyBOT1RFOiBJZiB5b3UgYXJlIGEgU2VudHJ5IHVzZXIsIGFuZCB5b3UgYXJlIHNlZWluZyB0aGlzIHN0YWNrIGZyYW1lLCBpdFxuICAgICAgICAgICAgICAgIC8vICAgICAgIG1lYW5zIHRoZSBzZW50cnkuamF2YXNjcmlwdCBTREsgY2F1Z2h0IGFuIGVycm9yIGludm9raW5nIHlvdXIgYXBwbGljYXRpb24gY29kZS4gVGhpc1xuICAgICAgICAgICAgICAgIC8vICAgICAgIGlzIGV4cGVjdGVkIGJlaGF2aW9yIGFuZCBOT1QgaW5kaWNhdGl2ZSBvZiBhIGJ1ZyB3aXRoIHNlbnRyeS5qYXZhc2NyaXB0LlxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgICAgICAgICByZXR1cm4gZm4uaGFuZGxlRXZlbnQuYXBwbHkodGhpcywgd3JhcHBlZEFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBdHRlbXB0IHRvIGludm9rZSB1c2VyLWxhbmQgZnVuY3Rpb25cbiAgICAgICAgICAgIC8vIE5PVEU6IElmIHlvdSBhcmUgYSBTZW50cnkgdXNlciwgYW5kIHlvdSBhcmUgc2VlaW5nIHRoaXMgc3RhY2sgZnJhbWUsIGl0XG4gICAgICAgICAgICAvLyAgICAgICBtZWFucyB0aGUgc2VudHJ5LmphdmFzY3JpcHQgU0RLIGNhdWdodCBhbiBlcnJvciBpbnZva2luZyB5b3VyIGFwcGxpY2F0aW9uIGNvZGUuIFRoaXNcbiAgICAgICAgICAgIC8vICAgICAgIGlzIGV4cGVjdGVkIGJlaGF2aW9yIGFuZCBOT1QgaW5kaWNhdGl2ZSBvZiBhIGJ1ZyB3aXRoIHNlbnRyeS5qYXZhc2NyaXB0LlxuICAgICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIHdyYXBwZWRBcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChleCkge1xuICAgICAgICAgICAgaWdub3JlTmV4dE9uRXJyb3IoKTtcbiAgICAgICAgICAgIHdpdGhTY29wZShmdW5jdGlvbiAoc2NvcGUpIHtcbiAgICAgICAgICAgICAgICBzY29wZS5hZGRFdmVudFByb2Nlc3NvcihmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NlZEV2ZW50ID0gX19hc3NpZ24oe30sIGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMubWVjaGFuaXNtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRFeGNlcHRpb25UeXBlVmFsdWUocHJvY2Vzc2VkRXZlbnQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEV4Y2VwdGlvbk1lY2hhbmlzbShwcm9jZXNzZWRFdmVudCwgb3B0aW9ucy5tZWNoYW5pc20pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NlZEV2ZW50LmV4dHJhID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHByb2Nlc3NlZEV2ZW50LmV4dHJhKSwgeyBhcmd1bWVudHM6IGFyZ3MgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9jZXNzZWRFdmVudDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjYXB0dXJlRXhjZXB0aW9uKGV4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhyb3cgZXg7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qIGVzbGludC1lbmFibGUgcHJlZmVyLXJlc3QtcGFyYW1zICovXG4gICAgLy8gQWNjZXNzaW5nIHNvbWUgb2JqZWN0cyBtYXkgdGhyb3dcbiAgICAvLyByZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5LWphdmFzY3JpcHQvaXNzdWVzLzExNjhcbiAgICB0cnkge1xuICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBmbikge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChmbiwgcHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgICAgc2VudHJ5V3JhcHBlZFtwcm9wZXJ0eV0gPSBmbltwcm9wZXJ0eV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKF9vTykgeyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbiAgICBmbi5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGUgfHwge307XG4gICAgc2VudHJ5V3JhcHBlZC5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCAnX19zZW50cnlfd3JhcHBlZF9fJywge1xuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IHNlbnRyeVdyYXBwZWQsXG4gICAgfSk7XG4gICAgLy8gU2lnbmFsIHRoYXQgdGhpcyBmdW5jdGlvbiBoYXMgYmVlbiB3cmFwcGVkL2ZpbGxlZCBhbHJlYWR5XG4gICAgLy8gZm9yIGJvdGggZGVidWdnaW5nIGFuZCB0byBwcmV2ZW50IGl0IHRvIGJlaW5nIHdyYXBwZWQvZmlsbGVkIHR3aWNlXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc2VudHJ5V3JhcHBlZCwge1xuICAgICAgICBfX3NlbnRyeV9fOiB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBfX3NlbnRyeV9vcmlnaW5hbF9fOiB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlOiBmbixcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICAvLyBSZXN0b3JlIG9yaWdpbmFsIGZ1bmN0aW9uIG5hbWUgKG5vdCBhbGwgYnJvd3NlcnMgYWxsb3cgdGhhdClcbiAgICB0cnkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc2VudHJ5V3JhcHBlZCwgJ25hbWUnKTtcbiAgICAgICAgaWYgKGRlc2NyaXB0b3IuY29uZmlndXJhYmxlKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VudHJ5V3JhcHBlZCwgJ25hbWUnLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmbi5uYW1lO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9XG4gICAgY2F0Y2ggKF9vTykgeyB9XG4gICAgcmV0dXJuIHNlbnRyeVdyYXBwZWQ7XG59XG4vKipcbiAqIEluamVjdHMgdGhlIFJlcG9ydCBEaWFsb2cgc2NyaXB0XG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbmplY3RSZXBvcnREaWFsb2cob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgaWYgKCFvcHRpb25zLmV2ZW50SWQpIHtcbiAgICAgICAgbG9nZ2VyLmVycm9yKFwiTWlzc2luZyBldmVudElkIG9wdGlvbiBpbiBzaG93UmVwb3J0RGlhbG9nIGNhbGxcIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFvcHRpb25zLmRzbikge1xuICAgICAgICBsb2dnZXIuZXJyb3IoXCJNaXNzaW5nIGRzbiBvcHRpb24gaW4gc2hvd1JlcG9ydERpYWxvZyBjYWxsXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICAgIHNjcmlwdC5zcmMgPSBuZXcgQVBJKG9wdGlvbnMuZHNuKS5nZXRSZXBvcnREaWFsb2dFbmRwb2ludChvcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucy5vbkxvYWQpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZFxuICAgICAgICBzY3JpcHQub25sb2FkID0gb3B0aW9ucy5vbkxvYWQ7XG4gICAgfVxuICAgIChkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmJvZHkpLmFwcGVuZENoaWxkKHNjcmlwdCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWxwZXJzLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduLCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNJbnN0YW5jZU9mLCBpc1N0cmluZyB9IGZyb20gJy4vaXMnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgZ2V0R2xvYmFsT2JqZWN0IH0gZnJvbSAnLi9taXNjJztcbmltcG9ydCB7IGZpbGwgfSBmcm9tICcuL29iamVjdCc7XG5pbXBvcnQgeyBnZXRGdW5jdGlvbk5hbWUgfSBmcm9tICcuL3N0YWNrdHJhY2UnO1xuaW1wb3J0IHsgc3VwcG9ydHNIaXN0b3J5LCBzdXBwb3J0c05hdGl2ZUZldGNoIH0gZnJvbSAnLi9zdXBwb3J0cyc7XG52YXIgZ2xvYmFsID0gZ2V0R2xvYmFsT2JqZWN0KCk7XG4vKipcbiAqIEluc3RydW1lbnQgbmF0aXZlIEFQSXMgdG8gY2FsbCBoYW5kbGVycyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNyZWF0ZSBicmVhZGNydW1icywgQVBNIHNwYW5zIGV0Yy5cbiAqICAtIENvbnNvbGUgQVBJXG4gKiAgLSBGZXRjaCBBUElcbiAqICAtIFhIUiBBUElcbiAqICAtIEhpc3RvcnkgQVBJXG4gKiAgLSBET00gQVBJIChjbGljay90eXBpbmcpXG4gKiAgLSBFcnJvciBBUElcbiAqICAtIFVuaGFuZGxlZFJlamVjdGlvbiBBUElcbiAqL1xudmFyIGhhbmRsZXJzID0ge307XG52YXIgaW5zdHJ1bWVudGVkID0ge307XG4vKiogSW5zdHJ1bWVudHMgZ2l2ZW4gQVBJICovXG5mdW5jdGlvbiBpbnN0cnVtZW50KHR5cGUpIHtcbiAgICBpZiAoaW5zdHJ1bWVudGVkW3R5cGVdKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW5zdHJ1bWVudGVkW3R5cGVdID0gdHJ1ZTtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnY29uc29sZSc6XG4gICAgICAgICAgICBpbnN0cnVtZW50Q29uc29sZSgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2RvbSc6XG4gICAgICAgICAgICBpbnN0cnVtZW50RE9NKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAneGhyJzpcbiAgICAgICAgICAgIGluc3RydW1lbnRYSFIoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdmZXRjaCc6XG4gICAgICAgICAgICBpbnN0cnVtZW50RmV0Y2goKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdoaXN0b3J5JzpcbiAgICAgICAgICAgIGluc3RydW1lbnRIaXN0b3J5KCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICAgICAgaW5zdHJ1bWVudEVycm9yKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndW5oYW5kbGVkcmVqZWN0aW9uJzpcbiAgICAgICAgICAgIGluc3RydW1lbnRVbmhhbmRsZWRSZWplY3Rpb24oKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ3Vua25vd24gaW5zdHJ1bWVudGF0aW9uIHR5cGU6JywgdHlwZSk7XG4gICAgfVxufVxuLyoqXG4gKiBBZGQgaGFuZGxlciB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gZ2l2ZW4gdHlwZSBvZiBpbnN0cnVtZW50YXRpb24gdHJpZ2dlcnMuXG4gKiBVc2UgYXQgeW91ciBvd24gcmlzaywgdGhpcyBtaWdodCBicmVhayB3aXRob3V0IGNoYW5nZWxvZyBub3RpY2UsIG9ubHkgdXNlZCBpbnRlcm5hbGx5LlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkSW5zdHJ1bWVudGF0aW9uSGFuZGxlcihoYW5kbGVyKSB7XG4gICAgaWYgKCFoYW5kbGVyIHx8IHR5cGVvZiBoYW5kbGVyLnR5cGUgIT09ICdzdHJpbmcnIHx8IHR5cGVvZiBoYW5kbGVyLmNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaGFuZGxlcnNbaGFuZGxlci50eXBlXSA9IGhhbmRsZXJzW2hhbmRsZXIudHlwZV0gfHwgW107XG4gICAgaGFuZGxlcnNbaGFuZGxlci50eXBlXS5wdXNoKGhhbmRsZXIuY2FsbGJhY2spO1xuICAgIGluc3RydW1lbnQoaGFuZGxlci50eXBlKTtcbn1cbi8qKiBKU0RvYyAqL1xuZnVuY3Rpb24gdHJpZ2dlckhhbmRsZXJzKHR5cGUsIGRhdGEpIHtcbiAgICB2YXIgZV8xLCBfYTtcbiAgICBpZiAoIXR5cGUgfHwgIWhhbmRsZXJzW3R5cGVdKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyhoYW5kbGVyc1t0eXBlXSB8fCBbXSksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGVyID0gX2MudmFsdWU7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihcIkVycm9yIHdoaWxlIHRyaWdnZXJpbmcgaW5zdHJ1bWVudGF0aW9uIGhhbmRsZXIuXFxuVHlwZTogXCIgKyB0eXBlICsgXCJcXG5OYW1lOiBcIiArIGdldEZ1bmN0aW9uTmFtZShoYW5kbGVyKSArIFwiXFxuRXJyb3I6IFwiICsgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgfVxufVxuLyoqIEpTRG9jICovXG5mdW5jdGlvbiBpbnN0cnVtZW50Q29uc29sZSgpIHtcbiAgICBpZiAoISgnY29uc29sZScgaW4gZ2xvYmFsKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIFsnZGVidWcnLCAnaW5mbycsICd3YXJuJywgJ2Vycm9yJywgJ2xvZycsICdhc3NlcnQnXS5mb3JFYWNoKGZ1bmN0aW9uIChsZXZlbCkge1xuICAgICAgICBpZiAoIShsZXZlbCBpbiBnbG9iYWwuY29uc29sZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmaWxsKGdsb2JhbC5jb25zb2xlLCBsZXZlbCwgZnVuY3Rpb24gKG9yaWdpbmFsQ29uc29sZUxldmVsKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0cmlnZ2VySGFuZGxlcnMoJ2NvbnNvbGUnLCB7IGFyZ3M6IGFyZ3MsIGxldmVsOiBsZXZlbCB9KTtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGZhaWxzIGZvciBzb21lIGJyb3dzZXJzLiA6KFxuICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbENvbnNvbGVMZXZlbCkge1xuICAgICAgICAgICAgICAgICAgICBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChvcmlnaW5hbENvbnNvbGVMZXZlbCwgZ2xvYmFsLmNvbnNvbGUsIGFyZ3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLyoqIEpTRG9jICovXG5mdW5jdGlvbiBpbnN0cnVtZW50RmV0Y2goKSB7XG4gICAgaWYgKCFzdXBwb3J0c05hdGl2ZUZldGNoKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmaWxsKGdsb2JhbCwgJ2ZldGNoJywgZnVuY3Rpb24gKG9yaWdpbmFsRmV0Y2gpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBoYW5kbGVyRGF0YSA9IHtcbiAgICAgICAgICAgICAgICBhcmdzOiBhcmdzLFxuICAgICAgICAgICAgICAgIGZldGNoRGF0YToge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IGdldEZldGNoTWV0aG9kKGFyZ3MpLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IGdldEZldGNoVXJsKGFyZ3MpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3RhcnRUaW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdHJpZ2dlckhhbmRsZXJzKCdmZXRjaCcsIF9fYXNzaWduKHt9LCBoYW5kbGVyRGF0YSkpO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsRmV0Y2guYXBwbHkoZ2xvYmFsLCBhcmdzKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHRyaWdnZXJIYW5kbGVycygnZmV0Y2gnLCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgaGFuZGxlckRhdGEpLCB7IGVuZFRpbWVzdGFtcDogRGF0ZS5ub3coKSwgcmVzcG9uc2U6IHJlc3BvbnNlIH0pKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0cmlnZ2VySGFuZGxlcnMoJ2ZldGNoJywgX19hc3NpZ24oX19hc3NpZ24oe30sIGhhbmRsZXJEYXRhKSwgeyBlbmRUaW1lc3RhbXA6IERhdGUubm93KCksIGVycm9yOiBlcnJvciB9KSk7XG4gICAgICAgICAgICAgICAgLy8gTk9URTogSWYgeW91IGFyZSBhIFNlbnRyeSB1c2VyLCBhbmQgeW91IGFyZSBzZWVpbmcgdGhpcyBzdGFjayBmcmFtZSxcbiAgICAgICAgICAgICAgICAvLyAgICAgICBpdCBtZWFucyB0aGUgc2VudHJ5LmphdmFzY3JpcHQgU0RLIGNhdWdodCBhbiBlcnJvciBpbnZva2luZyB5b3VyIGFwcGxpY2F0aW9uIGNvZGUuXG4gICAgICAgICAgICAgICAgLy8gICAgICAgVGhpcyBpcyBleHBlY3RlZCBiZWhhdmlvciBhbmQgTk9UIGluZGljYXRpdmUgb2YgYSBidWcgd2l0aCBzZW50cnkuamF2YXNjcmlwdC5cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH0pO1xufVxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzICovXG4vKiogRXh0cmFjdCBgbWV0aG9kYCBmcm9tIGZldGNoIGNhbGwgYXJndW1lbnRzICovXG5mdW5jdGlvbiBnZXRGZXRjaE1ldGhvZChmZXRjaEFyZ3MpIHtcbiAgICBpZiAoZmV0Y2hBcmdzID09PSB2b2lkIDApIHsgZmV0Y2hBcmdzID0gW107IH1cbiAgICBpZiAoJ1JlcXVlc3QnIGluIGdsb2JhbCAmJiBpc0luc3RhbmNlT2YoZmV0Y2hBcmdzWzBdLCBSZXF1ZXN0KSAmJiBmZXRjaEFyZ3NbMF0ubWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcoZmV0Y2hBcmdzWzBdLm1ldGhvZCkudG9VcHBlckNhc2UoKTtcbiAgICB9XG4gICAgaWYgKGZldGNoQXJnc1sxXSAmJiBmZXRjaEFyZ3NbMV0ubWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcoZmV0Y2hBcmdzWzFdLm1ldGhvZCkudG9VcHBlckNhc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuICdHRVQnO1xufVxuLyoqIEV4dHJhY3QgYHVybGAgZnJvbSBmZXRjaCBjYWxsIGFyZ3VtZW50cyAqL1xuZnVuY3Rpb24gZ2V0RmV0Y2hVcmwoZmV0Y2hBcmdzKSB7XG4gICAgaWYgKGZldGNoQXJncyA9PT0gdm9pZCAwKSB7IGZldGNoQXJncyA9IFtdOyB9XG4gICAgaWYgKHR5cGVvZiBmZXRjaEFyZ3NbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBmZXRjaEFyZ3NbMF07XG4gICAgfVxuICAgIGlmICgnUmVxdWVzdCcgaW4gZ2xvYmFsICYmIGlzSW5zdGFuY2VPZihmZXRjaEFyZ3NbMF0sIFJlcXVlc3QpKSB7XG4gICAgICAgIHJldHVybiBmZXRjaEFyZ3NbMF0udXJsO1xuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nKGZldGNoQXJnc1swXSk7XG59XG4vKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcyAqL1xuLyoqIEpTRG9jICovXG5mdW5jdGlvbiBpbnN0cnVtZW50WEhSKCkge1xuICAgIGlmICghKCdYTUxIdHRwUmVxdWVzdCcgaW4gZ2xvYmFsKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFBvb3IgbWFuJ3MgaW1wbGVtZW50YXRpb24gb2YgRVM2IGBNYXBgLCB0cmFja2luZyBhbmQga2VlcGluZyBpbiBzeW5jIGtleSBhbmQgdmFsdWUgc2VwYXJhdGVseS5cbiAgICB2YXIgcmVxdWVzdEtleXMgPSBbXTtcbiAgICB2YXIgcmVxdWVzdFZhbHVlcyA9IFtdO1xuICAgIHZhciB4aHJwcm90byA9IFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZTtcbiAgICBmaWxsKHhocnByb3RvLCAnb3BlbicsIGZ1bmN0aW9uIChvcmlnaW5hbE9wZW4pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhpcy1hbGlhc1xuICAgICAgICAgICAgdmFyIHhociA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgdXJsID0gYXJnc1sxXTtcbiAgICAgICAgICAgIHhoci5fX3NlbnRyeV94aHJfXyA9IHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBpc1N0cmluZyhhcmdzWzBdKSA/IGFyZ3NbMF0udG9VcHBlckNhc2UoKSA6IGFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgdXJsOiBhcmdzWzFdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIGlmIFNlbnRyeSBrZXkgYXBwZWFycyBpbiBVUkwsIGRvbid0IGNhcHR1cmUgaXQgYXMgYSByZXF1ZXN0XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICAgICAgICBpZiAoaXNTdHJpbmcodXJsKSAmJiB4aHIuX19zZW50cnlfeGhyX18ubWV0aG9kID09PSAnUE9TVCcgJiYgdXJsLm1hdGNoKC9zZW50cnlfa2V5LykpIHtcbiAgICAgICAgICAgICAgICB4aHIuX19zZW50cnlfb3duX3JlcXVlc3RfXyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgb25yZWFkeXN0YXRlY2hhbmdlSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvdWNoaW5nIHN0YXR1c0NvZGUgaW4gc29tZSBwbGF0Zm9ybXMgdGhyb3dzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbiBleGNlcHRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4aHIuX19zZW50cnlfeGhyX18pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHIuX19zZW50cnlfeGhyX18uc3RhdHVzX2NvZGUgPSB4aHIuc3RhdHVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBkbyBub3RoaW5nICovXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0UG9zID0gcmVxdWVzdEtleXMuaW5kZXhPZih4aHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3RQb3MgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRvIHBvcCBib3RoIGtleSBhbmQgdmFsdWUgdG8ga2VlcCBpdCBpbiBzeW5jLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RLZXlzLnNwbGljZShyZXF1ZXN0UG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJnc18xID0gcmVxdWVzdFZhbHVlcy5zcGxpY2UocmVxdWVzdFBvcylbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5fX3NlbnRyeV94aHJfXyAmJiBhcmdzXzFbMF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHIuX19zZW50cnlfeGhyX18uYm9keSA9IGFyZ3NfMVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIGRvIG5vdGhpbmcgKi9cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VySGFuZGxlcnMoJ3hocicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRUaW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydFRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHhocjogeGhyLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKCdvbnJlYWR5c3RhdGVjaGFuZ2UnIGluIHhociAmJiB0eXBlb2YgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGZpbGwoeGhyLCAnb25yZWFkeXN0YXRlY2hhbmdlJywgZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVhZHlTdGF0ZUFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZHlTdGF0ZUFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9ucmVhZHlzdGF0ZWNoYW5nZUhhbmRsZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh4aHIsIHJlYWR5U3RhdGVBcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHhoci5hZGRFdmVudExpc3RlbmVyKCdyZWFkeXN0YXRlY2hhbmdlJywgb25yZWFkeXN0YXRlY2hhbmdlSGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxPcGVuLmFwcGx5KHhociwgYXJncyk7XG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgZmlsbCh4aHJwcm90bywgJ3NlbmQnLCBmdW5jdGlvbiAob3JpZ2luYWxTZW5kKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXF1ZXN0S2V5cy5wdXNoKHRoaXMpO1xuICAgICAgICAgICAgcmVxdWVzdFZhbHVlcy5wdXNoKGFyZ3MpO1xuICAgICAgICAgICAgdHJpZ2dlckhhbmRsZXJzKCd4aHInLCB7XG4gICAgICAgICAgICAgICAgYXJnczogYXJncyxcbiAgICAgICAgICAgICAgICBzdGFydFRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICB4aHI6IHRoaXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbFNlbmQuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH07XG4gICAgfSk7XG59XG52YXIgbGFzdEhyZWY7XG4vKiogSlNEb2MgKi9cbmZ1bmN0aW9uIGluc3RydW1lbnRIaXN0b3J5KCkge1xuICAgIGlmICghc3VwcG9ydHNIaXN0b3J5KCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgb2xkT25Qb3BTdGF0ZSA9IGdsb2JhbC5vbnBvcHN0YXRlO1xuICAgIGdsb2JhbC5vbnBvcHN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0byA9IGdsb2JhbC5sb2NhdGlvbi5ocmVmO1xuICAgICAgICAvLyBrZWVwIHRyYWNrIG9mIHRoZSBjdXJyZW50IFVSTCBzdGF0ZSwgYXMgd2UgYWx3YXlzIHJlY2VpdmUgb25seSB0aGUgdXBkYXRlZCBzdGF0ZVxuICAgICAgICB2YXIgZnJvbSA9IGxhc3RIcmVmO1xuICAgICAgICBsYXN0SHJlZiA9IHRvO1xuICAgICAgICB0cmlnZ2VySGFuZGxlcnMoJ2hpc3RvcnknLCB7XG4gICAgICAgICAgICBmcm9tOiBmcm9tLFxuICAgICAgICAgICAgdG86IHRvLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG9sZE9uUG9wU3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBvbGRPblBvcFN0YXRlLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIGZ1bmN0aW9uIGhpc3RvcnlSZXBsYWNlbWVudEZ1bmN0aW9uKG9yaWdpbmFsSGlzdG9yeUZ1bmN0aW9uKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdXJsID0gYXJncy5sZW5ndGggPiAyID8gYXJnc1syXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmICh1cmwpIHtcbiAgICAgICAgICAgICAgICAvLyBjb2VyY2UgdG8gc3RyaW5nICh0aGlzIGlzIHdoYXQgcHVzaFN0YXRlIGRvZXMpXG4gICAgICAgICAgICAgICAgdmFyIGZyb20gPSBsYXN0SHJlZjtcbiAgICAgICAgICAgICAgICB2YXIgdG8gPSBTdHJpbmcodXJsKTtcbiAgICAgICAgICAgICAgICAvLyBrZWVwIHRyYWNrIG9mIHRoZSBjdXJyZW50IFVSTCBzdGF0ZSwgYXMgd2UgYWx3YXlzIHJlY2VpdmUgb25seSB0aGUgdXBkYXRlZCBzdGF0ZVxuICAgICAgICAgICAgICAgIGxhc3RIcmVmID0gdG87XG4gICAgICAgICAgICAgICAgdHJpZ2dlckhhbmRsZXJzKCdoaXN0b3J5Jywge1xuICAgICAgICAgICAgICAgICAgICBmcm9tOiBmcm9tLFxuICAgICAgICAgICAgICAgICAgICB0bzogdG8sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxIaXN0b3J5RnVuY3Rpb24uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGZpbGwoZ2xvYmFsLmhpc3RvcnksICdwdXNoU3RhdGUnLCBoaXN0b3J5UmVwbGFjZW1lbnRGdW5jdGlvbik7XG4gICAgZmlsbChnbG9iYWwuaGlzdG9yeSwgJ3JlcGxhY2VTdGF0ZScsIGhpc3RvcnlSZXBsYWNlbWVudEZ1bmN0aW9uKTtcbn1cbi8qKiBKU0RvYyAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudERPTSgpIHtcbiAgICBpZiAoISgnZG9jdW1lbnQnIGluIGdsb2JhbCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBDYXB0dXJlIGJyZWFkY3J1bWJzIGZyb20gYW55IGNsaWNrIHRoYXQgaXMgdW5oYW5kbGVkIC8gYnViYmxlZCB1cCBhbGwgdGhlIHdheVxuICAgIC8vIHRvIHRoZSBkb2N1bWVudC4gRG8gdGhpcyBiZWZvcmUgd2UgaW5zdHJ1bWVudCBhZGRFdmVudExpc3RlbmVyLlxuICAgIGdsb2JhbC5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGRvbUV2ZW50SGFuZGxlcignY2xpY2snLCB0cmlnZ2VySGFuZGxlcnMuYmluZChudWxsLCAnZG9tJykpLCBmYWxzZSk7XG4gICAgZ2xvYmFsLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywga2V5cHJlc3NFdmVudEhhbmRsZXIodHJpZ2dlckhhbmRsZXJzLmJpbmQobnVsbCwgJ2RvbScpKSwgZmFsc2UpO1xuICAgIC8vIEFmdGVyIGhvb2tpbmcgaW50byBkb2N1bWVudCBidWJibGVkIHVwIGNsaWNrIGFuZCBrZXlwcmVzc2VzIGV2ZW50cywgd2UgYWxzbyBob29rIGludG8gdXNlciBoYW5kbGVkIGNsaWNrICYga2V5cHJlc3Nlcy5cbiAgICBbJ0V2ZW50VGFyZ2V0JywgJ05vZGUnXS5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzICovXG4gICAgICAgIHZhciBwcm90byA9IGdsb2JhbFt0YXJnZXRdICYmIGdsb2JhbFt0YXJnZXRdLnByb3RvdHlwZTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgICAgICBpZiAoIXByb3RvIHx8ICFwcm90by5oYXNPd25Qcm9wZXJ0eSB8fCAhcHJvdG8uaGFzT3duUHJvcGVydHkoJ2FkZEV2ZW50TGlzdGVuZXInKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzICovXG4gICAgICAgIGZpbGwocHJvdG8sICdhZGRFdmVudExpc3RlbmVyJywgZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50TmFtZSwgZm4sIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZm4gJiYgZm4uaGFuZGxlRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50TmFtZSA9PT0gJ2NsaWNrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbChmbiwgJ2hhbmRsZUV2ZW50JywgZnVuY3Rpb24gKGlubmVyT3JpZ2luYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbUV2ZW50SGFuZGxlcignY2xpY2snLCB0cmlnZ2VySGFuZGxlcnMuYmluZChudWxsLCAnZG9tJykpKGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlubmVyT3JpZ2luYWwuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudE5hbWUgPT09ICdrZXlwcmVzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGwoZm4sICdoYW5kbGVFdmVudCcsIGZ1bmN0aW9uIChpbm5lck9yaWdpbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlwcmVzc0V2ZW50SGFuZGxlcih0cmlnZ2VySGFuZGxlcnMuYmluZChudWxsLCAnZG9tJykpKGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlubmVyT3JpZ2luYWwuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnROYW1lID09PSAnY2xpY2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb21FdmVudEhhbmRsZXIoJ2NsaWNrJywgdHJpZ2dlckhhbmRsZXJzLmJpbmQobnVsbCwgJ2RvbScpLCB0cnVlKSh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnROYW1lID09PSAna2V5cHJlc3MnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlwcmVzc0V2ZW50SGFuZGxlcih0cmlnZ2VySGFuZGxlcnMuYmluZChudWxsLCAnZG9tJykpKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5jYWxsKHRoaXMsIGV2ZW50TmFtZSwgZm4sIG9wdGlvbnMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZpbGwocHJvdG8sICdyZW1vdmVFdmVudExpc3RlbmVyJywgZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50TmFtZSwgZm4sIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbC5jYWxsKHRoaXMsIGV2ZW50TmFtZSwgZm4uX19zZW50cnlfd3JhcHBlZF9fLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWdub3JlLCBhY2Nlc3NpbmcgX19zZW50cnlfd3JhcHBlZF9fIHdpbGwgdGhyb3cgaW4gc29tZSBTZWxlbml1bSBlbnZpcm9ubWVudHNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmNhbGwodGhpcywgZXZlbnROYW1lLCBmbiwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbnZhciBkZWJvdW5jZUR1cmF0aW9uID0gMTAwMDtcbnZhciBkZWJvdW5jZVRpbWVyID0gMDtcbnZhciBrZXlwcmVzc1RpbWVvdXQ7XG52YXIgbGFzdENhcHR1cmVkRXZlbnQ7XG4vKipcbiAqIFdyYXBzIGFkZEV2ZW50TGlzdGVuZXIgdG8gY2FwdHVyZSBVSSBicmVhZGNydW1ic1xuICogQHBhcmFtIG5hbWUgdGhlIGV2ZW50IG5hbWUgKGUuZy4gXCJjbGlja1wiKVxuICogQHBhcmFtIGhhbmRsZXIgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHRyaWdnZXJlZFxuICogQHBhcmFtIGRlYm91bmNlIGRlY2lkZXMgd2hldGhlciBpdCBzaG91bGQgd2FpdCB0aWxsIGFub3RoZXIgZXZlbnQgbG9vcFxuICogQHJldHVybnMgd3JhcHBlZCBicmVhZGNydW1iIGV2ZW50cyBoYW5kbGVyXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIGRvbUV2ZW50SGFuZGxlcihuYW1lLCBoYW5kbGVyLCBkZWJvdW5jZSkge1xuICAgIGlmIChkZWJvdW5jZSA9PT0gdm9pZCAwKSB7IGRlYm91bmNlID0gZmFsc2U7IH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIHJlc2V0IGtleXByZXNzIHRpbWVvdXQ7IGUuZy4gdHJpZ2dlcmluZyBhICdjbGljaycgYWZ0ZXJcbiAgICAgICAgLy8gYSAna2V5cHJlc3MnIHdpbGwgcmVzZXQgdGhlIGtleXByZXNzIGRlYm91bmNlIHNvIHRoYXQgYSBuZXdcbiAgICAgICAgLy8gc2V0IG9mIGtleXByZXNzZXMgY2FuIGJlIHJlY29yZGVkXG4gICAgICAgIGtleXByZXNzVGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgLy8gSXQncyBwb3NzaWJsZSB0aGlzIGhhbmRsZXIgbWlnaHQgdHJpZ2dlciBtdWx0aXBsZSB0aW1lcyBmb3IgdGhlIHNhbWVcbiAgICAgICAgLy8gZXZlbnQgKGUuZy4gZXZlbnQgcHJvcGFnYXRpb24gdGhyb3VnaCBub2RlIGFuY2VzdG9ycykuIElnbm9yZSBpZiB3ZSd2ZVxuICAgICAgICAvLyBhbHJlYWR5IGNhcHR1cmVkIHRoZSBldmVudC5cbiAgICAgICAgaWYgKCFldmVudCB8fCBsYXN0Q2FwdHVyZWRFdmVudCA9PT0gZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsYXN0Q2FwdHVyZWRFdmVudCA9IGV2ZW50O1xuICAgICAgICBpZiAoZGVib3VuY2VUaW1lcikge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGRlYm91bmNlVGltZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWJvdW5jZSkge1xuICAgICAgICAgICAgZGVib3VuY2VUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIoeyBldmVudDogZXZlbnQsIG5hbWU6IG5hbWUgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhhbmRsZXIoeyBldmVudDogZXZlbnQsIG5hbWU6IG5hbWUgfSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuLyoqXG4gKiBXcmFwcyBhZGRFdmVudExpc3RlbmVyIHRvIGNhcHR1cmUga2V5cHJlc3MgVUkgZXZlbnRzXG4gKiBAcGFyYW0gaGFuZGxlciBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgdHJpZ2dlcmVkXG4gKiBAcmV0dXJucyB3cmFwcGVkIGtleXByZXNzIGV2ZW50cyBoYW5kbGVyXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIGtleXByZXNzRXZlbnRIYW5kbGVyKGhhbmRsZXIpIHtcbiAgICAvLyBUT0RPOiBpZiBzb21laG93IHVzZXIgc3dpdGNoZXMga2V5cHJlc3MgdGFyZ2V0IGJlZm9yZVxuICAgIC8vICAgICAgIGRlYm91bmNlIHRpbWVvdXQgaXMgdHJpZ2dlcmVkLCB3ZSB3aWxsIG9ubHkgY2FwdHVyZVxuICAgIC8vICAgICAgIGEgc2luZ2xlIGJyZWFkY3J1bWIgZnJvbSB0aGUgRklSU1QgdGFyZ2V0IChhY2NlcHRhYmxlPylcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciB0YXJnZXQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIGp1c3QgYWNjZXNzaW5nIGV2ZW50IHByb3BlcnRpZXMgY2FuIHRocm93IGFuIGV4Y2VwdGlvbiBpbiBzb21lIHJhcmUgY2lyY3Vtc3RhbmNlc1xuICAgICAgICAgICAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3JhdmVuLWpzL2lzc3Vlcy84MzhcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGFnTmFtZSA9IHRhcmdldCAmJiB0YXJnZXQudGFnTmFtZTtcbiAgICAgICAgLy8gb25seSBjb25zaWRlciBrZXlwcmVzcyBldmVudHMgb24gYWN0dWFsIGlucHV0IGVsZW1lbnRzXG4gICAgICAgIC8vIHRoaXMgd2lsbCBkaXNyZWdhcmQga2V5cHJlc3NlcyB0YXJnZXRpbmcgYm9keSAoZS5nLiB0YWJiaW5nXG4gICAgICAgIC8vIHRocm91Z2ggZWxlbWVudHMsIGhvdGtleXMsIGV0YylcbiAgICAgICAgaWYgKCF0YWdOYW1lIHx8ICh0YWdOYW1lICE9PSAnSU5QVVQnICYmIHRhZ05hbWUgIT09ICdURVhUQVJFQScgJiYgIXRhcmdldC5pc0NvbnRlbnRFZGl0YWJsZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWNvcmQgZmlyc3Qga2V5cHJlc3MgaW4gYSBzZXJpZXMsIGJ1dCBpZ25vcmUgc3Vic2VxdWVudFxuICAgICAgICAvLyBrZXlwcmVzc2VzIHVudGlsIGRlYm91bmNlIGNsZWFyc1xuICAgICAgICBpZiAoIWtleXByZXNzVGltZW91dCkge1xuICAgICAgICAgICAgZG9tRXZlbnRIYW5kbGVyKCdpbnB1dCcsIGhhbmRsZXIpKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBjbGVhclRpbWVvdXQoa2V5cHJlc3NUaW1lb3V0KTtcbiAgICAgICAga2V5cHJlc3NUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBrZXlwcmVzc1RpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0sIGRlYm91bmNlRHVyYXRpb24pO1xuICAgIH07XG59XG52YXIgX29sZE9uRXJyb3JIYW5kbGVyID0gbnVsbDtcbi8qKiBKU0RvYyAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudEVycm9yKCkge1xuICAgIF9vbGRPbkVycm9ySGFuZGxlciA9IGdsb2JhbC5vbmVycm9yO1xuICAgIGdsb2JhbC5vbmVycm9yID0gZnVuY3Rpb24gKG1zZywgdXJsLCBsaW5lLCBjb2x1bW4sIGVycm9yKSB7XG4gICAgICAgIHRyaWdnZXJIYW5kbGVycygnZXJyb3InLCB7XG4gICAgICAgICAgICBjb2x1bW46IGNvbHVtbixcbiAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgIGxpbmU6IGxpbmUsXG4gICAgICAgICAgICBtc2c6IG1zZyxcbiAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKF9vbGRPbkVycm9ySGFuZGxlcikge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgICAgICAgICAgcmV0dXJuIF9vbGRPbkVycm9ySGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xufVxudmFyIF9vbGRPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIgPSBudWxsO1xuLyoqIEpTRG9jICovXG5mdW5jdGlvbiBpbnN0cnVtZW50VW5oYW5kbGVkUmVqZWN0aW9uKCkge1xuICAgIF9vbGRPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb247XG4gICAgZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdHJpZ2dlckhhbmRsZXJzKCd1bmhhbmRsZWRyZWplY3Rpb24nLCBlKTtcbiAgICAgICAgaWYgKF9vbGRPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICAgICAgICAgIHJldHVybiBfb2xkT25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluc3RydW1lbnQuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fcmVhZCwgX19zcHJlYWQgfSBmcm9tIFwidHNsaWJcIjtcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcyAqL1xuLyogZXNsaW50LWRpc2FibGUgbWF4LWxpbmVzICovXG5pbXBvcnQgeyBnZXRDdXJyZW50SHViIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IFNldmVyaXR5IH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBhZGRJbnN0cnVtZW50YXRpb25IYW5kbGVyLCBnZXRFdmVudERlc2NyaXB0aW9uLCBnZXRHbG9iYWxPYmplY3QsIGh0bWxUcmVlQXNTdHJpbmcsIHBhcnNlVXJsLCBzYWZlSm9pbiwgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbi8qKlxuICogRGVmYXVsdCBCcmVhZGNydW1icyBpbnN0cnVtZW50YXRpb25zXG4gKiBUT0RPOiBEZXByZWNhdGVkIC0gd2l0aCB2NiwgdGhpcyB3aWxsIGJlIHJlbmFtZWQgdG8gYEluc3RydW1lbnRgXG4gKi9cbnZhciBCcmVhZGNydW1icyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIEJyZWFkY3J1bWJzKG9wdGlvbnMpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBCcmVhZGNydW1icy5pZDtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IF9fYXNzaWduKHsgY29uc29sZTogdHJ1ZSwgZG9tOiB0cnVlLCBmZXRjaDogdHJ1ZSwgaGlzdG9yeTogdHJ1ZSwgc2VudHJ5OiB0cnVlLCB4aHI6IHRydWUgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGJyZWFkY3J1bWIgb2YgYHNlbnRyeWAgZnJvbSB0aGUgZXZlbnRzIHRoZW1zZWx2ZXNcbiAgICAgKi9cbiAgICBCcmVhZGNydW1icy5wcm90b3R5cGUuYWRkU2VudHJ5QnJlYWRjcnVtYiA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuX29wdGlvbnMuc2VudHJ5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZ2V0Q3VycmVudEh1YigpLmFkZEJyZWFkY3J1bWIoe1xuICAgICAgICAgICAgY2F0ZWdvcnk6IFwic2VudHJ5LlwiICsgKGV2ZW50LnR5cGUgPT09ICd0cmFuc2FjdGlvbicgPyAndHJhbnNhY3Rpb24nIDogJ2V2ZW50JyksXG4gICAgICAgICAgICBldmVudF9pZDogZXZlbnQuZXZlbnRfaWQsXG4gICAgICAgICAgICBsZXZlbDogZXZlbnQubGV2ZWwsXG4gICAgICAgICAgICBtZXNzYWdlOiBnZXRFdmVudERlc2NyaXB0aW9uKGV2ZW50KSxcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEluc3RydW1lbnQgYnJvd3NlciBidWlsdC1pbnMgdy8gYnJlYWRjcnVtYiBjYXB0dXJpbmdcbiAgICAgKiAgLSBDb25zb2xlIEFQSVxuICAgICAqICAtIERPTSBBUEkgKGNsaWNrL3R5cGluZylcbiAgICAgKiAgLSBYTUxIdHRwUmVxdWVzdCBBUElcbiAgICAgKiAgLSBGZXRjaCBBUElcbiAgICAgKiAgLSBIaXN0b3J5IEFQSVxuICAgICAqL1xuICAgIEJyZWFkY3J1bWJzLnByb3RvdHlwZS5zZXR1cE9uY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmNvbnNvbGUpIHtcbiAgICAgICAgICAgIGFkZEluc3RydW1lbnRhdGlvbkhhbmRsZXIoe1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2NvbnNvbGVCcmVhZGNydW1iLmFwcGx5KF90aGlzLCBfX3NwcmVhZChhcmdzKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0eXBlOiAnY29uc29sZScsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5kb20pIHtcbiAgICAgICAgICAgIGFkZEluc3RydW1lbnRhdGlvbkhhbmRsZXIoe1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2RvbUJyZWFkY3J1bWIuYXBwbHkoX3RoaXMsIF9fc3ByZWFkKGFyZ3MpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHR5cGU6ICdkb20nLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMueGhyKSB7XG4gICAgICAgICAgICBhZGRJbnN0cnVtZW50YXRpb25IYW5kbGVyKHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl94aHJCcmVhZGNydW1iLmFwcGx5KF90aGlzLCBfX3NwcmVhZChhcmdzKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0eXBlOiAneGhyJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmZldGNoKSB7XG4gICAgICAgICAgICBhZGRJbnN0cnVtZW50YXRpb25IYW5kbGVyKHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9mZXRjaEJyZWFkY3J1bWIuYXBwbHkoX3RoaXMsIF9fc3ByZWFkKGFyZ3MpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHR5cGU6ICdmZXRjaCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5oaXN0b3J5KSB7XG4gICAgICAgICAgICBhZGRJbnN0cnVtZW50YXRpb25IYW5kbGVyKHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9oaXN0b3J5QnJlYWRjcnVtYi5hcHBseShfdGhpcywgX19zcHJlYWQoYXJncykpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdHlwZTogJ2hpc3RvcnknLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYnJlYWRjcnVtYnMgZnJvbSBjb25zb2xlIEFQSSBjYWxsc1xuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgQnJlYWRjcnVtYnMucHJvdG90eXBlLl9jb25zb2xlQnJlYWRjcnVtYiA9IGZ1bmN0aW9uIChoYW5kbGVyRGF0YSkge1xuICAgICAgICB2YXIgYnJlYWRjcnVtYiA9IHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiAnY29uc29sZScsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgYXJndW1lbnRzOiBoYW5kbGVyRGF0YS5hcmdzLFxuICAgICAgICAgICAgICAgIGxvZ2dlcjogJ2NvbnNvbGUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxldmVsOiBTZXZlcml0eS5mcm9tU3RyaW5nKGhhbmRsZXJEYXRhLmxldmVsKSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHNhZmVKb2luKGhhbmRsZXJEYXRhLmFyZ3MsICcgJyksXG4gICAgICAgIH07XG4gICAgICAgIGlmIChoYW5kbGVyRGF0YS5sZXZlbCA9PT0gJ2Fzc2VydCcpIHtcbiAgICAgICAgICAgIGlmIChoYW5kbGVyRGF0YS5hcmdzWzBdID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGJyZWFkY3J1bWIubWVzc2FnZSA9IFwiQXNzZXJ0aW9uIGZhaWxlZDogXCIgKyAoc2FmZUpvaW4oaGFuZGxlckRhdGEuYXJncy5zbGljZSgxKSwgJyAnKSB8fCAnY29uc29sZS5hc3NlcnQnKTtcbiAgICAgICAgICAgICAgICBicmVhZGNydW1iLmRhdGEuYXJndW1lbnRzID0gaGFuZGxlckRhdGEuYXJncy5zbGljZSgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIERvbid0IGNhcHR1cmUgYSBicmVhZGNydW1iIGZvciBwYXNzZWQgYXNzZXJ0aW9uc1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBnZXRDdXJyZW50SHViKCkuYWRkQnJlYWRjcnVtYihicmVhZGNydW1iLCB7XG4gICAgICAgICAgICBpbnB1dDogaGFuZGxlckRhdGEuYXJncyxcbiAgICAgICAgICAgIGxldmVsOiBoYW5kbGVyRGF0YS5sZXZlbCxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGJyZWFkY3J1bWJzIGZyb20gRE9NIEFQSSBjYWxsc1xuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgQnJlYWRjcnVtYnMucHJvdG90eXBlLl9kb21CcmVhZGNydW1iID0gZnVuY3Rpb24gKGhhbmRsZXJEYXRhKSB7XG4gICAgICAgIHZhciB0YXJnZXQ7XG4gICAgICAgIC8vIEFjY2Vzc2luZyBldmVudC50YXJnZXQgY2FuIHRocm93IChzZWUgZ2V0c2VudHJ5L3JhdmVuLWpzIzgzOCwgIzc2OClcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRhcmdldCA9IGhhbmRsZXJEYXRhLmV2ZW50LnRhcmdldFxuICAgICAgICAgICAgICAgID8gaHRtbFRyZWVBc1N0cmluZyhoYW5kbGVyRGF0YS5ldmVudC50YXJnZXQpXG4gICAgICAgICAgICAgICAgOiBodG1sVHJlZUFzU3RyaW5nKGhhbmRsZXJEYXRhLmV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGFyZ2V0ID0gJzx1bmtub3duPic7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhcmdldC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBnZXRDdXJyZW50SHViKCkuYWRkQnJlYWRjcnVtYih7XG4gICAgICAgICAgICBjYXRlZ29yeTogXCJ1aS5cIiArIGhhbmRsZXJEYXRhLm5hbWUsXG4gICAgICAgICAgICBtZXNzYWdlOiB0YXJnZXQsXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGV2ZW50OiBoYW5kbGVyRGF0YS5ldmVudCxcbiAgICAgICAgICAgIG5hbWU6IGhhbmRsZXJEYXRhLm5hbWUsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBicmVhZGNydW1icyBmcm9tIFhIUiBBUEkgY2FsbHNcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIEJyZWFkY3J1bWJzLnByb3RvdHlwZS5feGhyQnJlYWRjcnVtYiA9IGZ1bmN0aW9uIChoYW5kbGVyRGF0YSkge1xuICAgICAgICBpZiAoaGFuZGxlckRhdGEuZW5kVGltZXN0YW1wKSB7XG4gICAgICAgICAgICAvLyBXZSBvbmx5IGNhcHR1cmUgY29tcGxldGUsIG5vbi1zZW50cnkgcmVxdWVzdHNcbiAgICAgICAgICAgIGlmIChoYW5kbGVyRGF0YS54aHIuX19zZW50cnlfb3duX3JlcXVlc3RfXykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfYSA9IGhhbmRsZXJEYXRhLnhoci5fX3NlbnRyeV94aHJfXyB8fCB7fSwgbWV0aG9kID0gX2EubWV0aG9kLCB1cmwgPSBfYS51cmwsIHN0YXR1c19jb2RlID0gX2Euc3RhdHVzX2NvZGUsIGJvZHkgPSBfYS5ib2R5O1xuICAgICAgICAgICAgZ2V0Q3VycmVudEh1YigpLmFkZEJyZWFkY3J1bWIoe1xuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiAneGhyJyxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzX2NvZGU6IHN0YXR1c19jb2RlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdHlwZTogJ2h0dHAnLFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIHhocjogaGFuZGxlckRhdGEueGhyLFxuICAgICAgICAgICAgICAgIGlucHV0OiBib2R5LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYnJlYWRjcnVtYnMgZnJvbSBmZXRjaCBBUEkgY2FsbHNcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIEJyZWFkY3J1bWJzLnByb3RvdHlwZS5fZmV0Y2hCcmVhZGNydW1iID0gZnVuY3Rpb24gKGhhbmRsZXJEYXRhKSB7XG4gICAgICAgIC8vIFdlIG9ubHkgY2FwdHVyZSBjb21wbGV0ZSBmZXRjaCByZXF1ZXN0c1xuICAgICAgICBpZiAoIWhhbmRsZXJEYXRhLmVuZFRpbWVzdGFtcCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYW5kbGVyRGF0YS5mZXRjaERhdGEudXJsLm1hdGNoKC9zZW50cnlfa2V5LykgJiYgaGFuZGxlckRhdGEuZmV0Y2hEYXRhLm1ldGhvZCA9PT0gJ1BPU1QnKSB7XG4gICAgICAgICAgICAvLyBXZSB3aWxsIG5vdCBjcmVhdGUgYnJlYWRjcnVtYnMgZm9yIGZldGNoIHJlcXVlc3RzIHRoYXQgY29udGFpbiBgc2VudHJ5X2tleWAgKGludGVybmFsIHNlbnRyeSByZXF1ZXN0cylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFuZGxlckRhdGEuZXJyb3IpIHtcbiAgICAgICAgICAgIGdldEN1cnJlbnRIdWIoKS5hZGRCcmVhZGNydW1iKHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogJ2ZldGNoJyxcbiAgICAgICAgICAgICAgICBkYXRhOiBoYW5kbGVyRGF0YS5mZXRjaERhdGEsXG4gICAgICAgICAgICAgICAgbGV2ZWw6IFNldmVyaXR5LkVycm9yLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdodHRwJyxcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBkYXRhOiBoYW5kbGVyRGF0YS5lcnJvcixcbiAgICAgICAgICAgICAgICBpbnB1dDogaGFuZGxlckRhdGEuYXJncyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZ2V0Q3VycmVudEh1YigpLmFkZEJyZWFkY3J1bWIoe1xuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiAnZmV0Y2gnLFxuICAgICAgICAgICAgICAgIGRhdGE6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBoYW5kbGVyRGF0YS5mZXRjaERhdGEpLCB7IHN0YXR1c19jb2RlOiBoYW5kbGVyRGF0YS5yZXNwb25zZS5zdGF0dXMgfSksXG4gICAgICAgICAgICAgICAgdHlwZTogJ2h0dHAnLFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGlucHV0OiBoYW5kbGVyRGF0YS5hcmdzLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlOiBoYW5kbGVyRGF0YS5yZXNwb25zZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGJyZWFkY3J1bWJzIGZyb20gaGlzdG9yeSBBUEkgY2FsbHNcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIEJyZWFkY3J1bWJzLnByb3RvdHlwZS5faGlzdG9yeUJyZWFkY3J1bWIgPSBmdW5jdGlvbiAoaGFuZGxlckRhdGEpIHtcbiAgICAgICAgdmFyIGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdCgpO1xuICAgICAgICB2YXIgZnJvbSA9IGhhbmRsZXJEYXRhLmZyb207XG4gICAgICAgIHZhciB0byA9IGhhbmRsZXJEYXRhLnRvO1xuICAgICAgICB2YXIgcGFyc2VkTG9jID0gcGFyc2VVcmwoZ2xvYmFsLmxvY2F0aW9uLmhyZWYpO1xuICAgICAgICB2YXIgcGFyc2VkRnJvbSA9IHBhcnNlVXJsKGZyb20pO1xuICAgICAgICB2YXIgcGFyc2VkVG8gPSBwYXJzZVVybCh0byk7XG4gICAgICAgIC8vIEluaXRpYWwgcHVzaFN0YXRlIGRvZXNuJ3QgcHJvdmlkZSBgZnJvbWAgaW5mb3JtYXRpb25cbiAgICAgICAgaWYgKCFwYXJzZWRGcm9tLnBhdGgpIHtcbiAgICAgICAgICAgIHBhcnNlZEZyb20gPSBwYXJzZWRMb2M7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXNlIG9ubHkgdGhlIHBhdGggY29tcG9uZW50IG9mIHRoZSBVUkwgaWYgdGhlIFVSTCBtYXRjaGVzIHRoZSBjdXJyZW50XG4gICAgICAgIC8vIGRvY3VtZW50IChhbG1vc3QgYWxsIHRoZSB0aW1lIHdoZW4gdXNpbmcgcHVzaFN0YXRlKVxuICAgICAgICBpZiAocGFyc2VkTG9jLnByb3RvY29sID09PSBwYXJzZWRUby5wcm90b2NvbCAmJiBwYXJzZWRMb2MuaG9zdCA9PT0gcGFyc2VkVG8uaG9zdCkge1xuICAgICAgICAgICAgdG8gPSBwYXJzZWRUby5yZWxhdGl2ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyc2VkTG9jLnByb3RvY29sID09PSBwYXJzZWRGcm9tLnByb3RvY29sICYmIHBhcnNlZExvYy5ob3N0ID09PSBwYXJzZWRGcm9tLmhvc3QpIHtcbiAgICAgICAgICAgIGZyb20gPSBwYXJzZWRGcm9tLnJlbGF0aXZlO1xuICAgICAgICB9XG4gICAgICAgIGdldEN1cnJlbnRIdWIoKS5hZGRCcmVhZGNydW1iKHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiAnbmF2aWdhdGlvbicsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgZnJvbTogZnJvbSxcbiAgICAgICAgICAgICAgICB0bzogdG8sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQnJlYWRjcnVtYnMuaWQgPSAnQnJlYWRjcnVtYnMnO1xuICAgIHJldHVybiBCcmVhZGNydW1icztcbn0oKSk7XG5leHBvcnQgeyBCcmVhZGNydW1icyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJlYWRjcnVtYnMuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcywgX19yZWFkLCBfX3NwcmVhZCB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQmFzZUNsaWVudCB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBnZXRHbG9iYWxPYmplY3QsIGxvZ2dlciB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgQnJvd3NlckJhY2tlbmQgfSBmcm9tICcuL2JhY2tlbmQnO1xuaW1wb3J0IHsgaW5qZWN0UmVwb3J0RGlhbG9nIH0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCB7IEJyZWFkY3J1bWJzIH0gZnJvbSAnLi9pbnRlZ3JhdGlvbnMnO1xuaW1wb3J0IHsgU0RLX05BTUUsIFNES19WRVJTSU9OIH0gZnJvbSAnLi92ZXJzaW9uJztcbi8qKlxuICogVGhlIFNlbnRyeSBCcm93c2VyIFNESyBDbGllbnQuXG4gKlxuICogQHNlZSBCcm93c2VyT3B0aW9ucyBmb3IgZG9jdW1lbnRhdGlvbiBvbiBjb25maWd1cmF0aW9uIG9wdGlvbnMuXG4gKiBAc2VlIFNlbnRyeUNsaWVudCBmb3IgdXNhZ2UgZG9jdW1lbnRhdGlvbi5cbiAqL1xudmFyIEJyb3dzZXJDbGllbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJyb3dzZXJDbGllbnQsIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBCcm93c2VyIFNESyBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhpcyBTREsuXG4gICAgICovXG4gICAgZnVuY3Rpb24gQnJvd3NlckNsaWVudChvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBCcm93c2VyQmFja2VuZCwgb3B0aW9ucykgfHwgdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2hvdyBhIHJlcG9ydCBkaWFsb2cgdG8gdGhlIHVzZXIgdG8gc2VuZCBmZWVkYmFjayB0byBhIHNwZWNpZmljIGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgU2V0IGluZGl2aWR1YWwgb3B0aW9ucyBmb3IgdGhlIGRpYWxvZ1xuICAgICAqL1xuICAgIEJyb3dzZXJDbGllbnQucHJvdG90eXBlLnNob3dSZXBvcnREaWFsb2cgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICAvLyBkb2Vzbid0IHdvcmsgd2l0aG91dCBhIGRvY3VtZW50IChSZWFjdCBOYXRpdmUpXG4gICAgICAgIHZhciBkb2N1bWVudCA9IGdldEdsb2JhbE9iamVjdCgpLmRvY3VtZW50O1xuICAgICAgICBpZiAoIWRvY3VtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9pc0VuYWJsZWQoKSkge1xuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdUcnlpbmcgdG8gY2FsbCBzaG93UmVwb3J0RGlhbG9nIHdpdGggU2VudHJ5IENsaWVudCBkaXNhYmxlZCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGluamVjdFJlcG9ydERpYWxvZyhfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb3B0aW9ucyksIHsgZHNuOiBvcHRpb25zLmRzbiB8fCB0aGlzLmdldERzbigpIH0pKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQnJvd3NlckNsaWVudC5wcm90b3R5cGUuX3ByZXBhcmVFdmVudCA9IGZ1bmN0aW9uIChldmVudCwgc2NvcGUsIGhpbnQpIHtcbiAgICAgICAgZXZlbnQucGxhdGZvcm0gPSBldmVudC5wbGF0Zm9ybSB8fCAnamF2YXNjcmlwdCc7XG4gICAgICAgIGV2ZW50LnNkayA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBldmVudC5zZGspLCB7IG5hbWU6IFNES19OQU1FLCBwYWNrYWdlczogX19zcHJlYWQoKChldmVudC5zZGsgJiYgZXZlbnQuc2RrLnBhY2thZ2VzKSB8fCBbXSksIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICducG06QHNlbnRyeS9icm93c2VyJyxcbiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogU0RLX1ZFUlNJT04sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0pLCB2ZXJzaW9uOiBTREtfVkVSU0lPTiB9KTtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuX3ByZXBhcmVFdmVudC5jYWxsKHRoaXMsIGV2ZW50LCBzY29wZSwgaGludCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJyb3dzZXJDbGllbnQucHJvdG90eXBlLl9zZW5kRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIGludGVncmF0aW9uID0gdGhpcy5nZXRJbnRlZ3JhdGlvbihCcmVhZGNydW1icyk7XG4gICAgICAgIGlmIChpbnRlZ3JhdGlvbikge1xuICAgICAgICAgICAgaW50ZWdyYXRpb24uYWRkU2VudHJ5QnJlYWRjcnVtYihldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fc2VuZEV2ZW50LmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG4gICAgcmV0dXJuIEJyb3dzZXJDbGllbnQ7XG59KEJhc2VDbGllbnQpKTtcbmV4cG9ydCB7IEJyb3dzZXJDbGllbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNsaWVudC5qcy5tYXAiLCJleHBvcnQgdmFyIFNES19OQU1FID0gJ3NlbnRyeS5qYXZhc2NyaXB0LmJyb3dzZXInO1xuZXhwb3J0IHZhciBTREtfVkVSU0lPTiA9ICc1LjI3LjQnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgZmlsbCwgZ2V0RnVuY3Rpb25OYW1lLCBnZXRHbG9iYWxPYmplY3QgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IHdyYXAgfSBmcm9tICcuLi9oZWxwZXJzJztcbnZhciBERUZBVUxUX0VWRU5UX1RBUkdFVCA9IFtcbiAgICAnRXZlbnRUYXJnZXQnLFxuICAgICdXaW5kb3cnLFxuICAgICdOb2RlJyxcbiAgICAnQXBwbGljYXRpb25DYWNoZScsXG4gICAgJ0F1ZGlvVHJhY2tMaXN0JyxcbiAgICAnQ2hhbm5lbE1lcmdlck5vZGUnLFxuICAgICdDcnlwdG9PcGVyYXRpb24nLFxuICAgICdFdmVudFNvdXJjZScsXG4gICAgJ0ZpbGVSZWFkZXInLFxuICAgICdIVE1MVW5rbm93bkVsZW1lbnQnLFxuICAgICdJREJEYXRhYmFzZScsXG4gICAgJ0lEQlJlcXVlc3QnLFxuICAgICdJREJUcmFuc2FjdGlvbicsXG4gICAgJ0tleU9wZXJhdGlvbicsXG4gICAgJ01lZGlhQ29udHJvbGxlcicsXG4gICAgJ01lc3NhZ2VQb3J0JyxcbiAgICAnTW9kYWxXaW5kb3cnLFxuICAgICdOb3RpZmljYXRpb24nLFxuICAgICdTVkdFbGVtZW50SW5zdGFuY2UnLFxuICAgICdTY3JlZW4nLFxuICAgICdUZXh0VHJhY2snLFxuICAgICdUZXh0VHJhY2tDdWUnLFxuICAgICdUZXh0VHJhY2tMaXN0JyxcbiAgICAnV2ViU29ja2V0JyxcbiAgICAnV2ViU29ja2V0V29ya2VyJyxcbiAgICAnV29ya2VyJyxcbiAgICAnWE1MSHR0cFJlcXVlc3QnLFxuICAgICdYTUxIdHRwUmVxdWVzdEV2ZW50VGFyZ2V0JyxcbiAgICAnWE1MSHR0cFJlcXVlc3RVcGxvYWQnLFxuXTtcbi8qKiBXcmFwIHRpbWVyIGZ1bmN0aW9ucyBhbmQgZXZlbnQgdGFyZ2V0cyB0byBjYXRjaCBlcnJvcnMgYW5kIHByb3ZpZGUgYmV0dGVyIG1ldGEgZGF0YSAqL1xudmFyIFRyeUNhdGNoID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgZnVuY3Rpb24gVHJ5Q2F0Y2gob3B0aW9ucykge1xuICAgICAgICAvKipcbiAgICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubmFtZSA9IFRyeUNhdGNoLmlkO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gX19hc3NpZ24oeyBYTUxIdHRwUmVxdWVzdDogdHJ1ZSwgZXZlbnRUYXJnZXQ6IHRydWUsIHJlcXVlc3RBbmltYXRpb25GcmFtZTogdHJ1ZSwgc2V0SW50ZXJ2YWw6IHRydWUsIHNldFRpbWVvdXQ6IHRydWUgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyYXAgdGltZXIgZnVuY3Rpb25zIGFuZCBldmVudCB0YXJnZXRzIHRvIGNhdGNoIGVycm9yc1xuICAgICAqIGFuZCBwcm92aWRlIGJldHRlciBtZXRhZGF0YS5cbiAgICAgKi9cbiAgICBUcnlDYXRjaC5wcm90b3R5cGUuc2V0dXBPbmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZ2xvYmFsID0gZ2V0R2xvYmFsT2JqZWN0KCk7XG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnNldFRpbWVvdXQpIHtcbiAgICAgICAgICAgIGZpbGwoZ2xvYmFsLCAnc2V0VGltZW91dCcsIHRoaXMuX3dyYXBUaW1lRnVuY3Rpb24uYmluZCh0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuc2V0SW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIGZpbGwoZ2xvYmFsLCAnc2V0SW50ZXJ2YWwnLCB0aGlzLl93cmFwVGltZUZ1bmN0aW9uLmJpbmQodGhpcykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuICAgICAgICAgICAgZmlsbChnbG9iYWwsICdyZXF1ZXN0QW5pbWF0aW9uRnJhbWUnLCB0aGlzLl93cmFwUkFGLmJpbmQodGhpcykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLlhNTEh0dHBSZXF1ZXN0ICYmICdYTUxIdHRwUmVxdWVzdCcgaW4gZ2xvYmFsKSB7XG4gICAgICAgICAgICBmaWxsKFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZSwgJ3NlbmQnLCB0aGlzLl93cmFwWEhSLmJpbmQodGhpcykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmV2ZW50VGFyZ2V0KSB7XG4gICAgICAgICAgICB2YXIgZXZlbnRUYXJnZXQgPSBBcnJheS5pc0FycmF5KHRoaXMuX29wdGlvbnMuZXZlbnRUYXJnZXQpID8gdGhpcy5fb3B0aW9ucy5ldmVudFRhcmdldCA6IERFRkFVTFRfRVZFTlRfVEFSR0VUO1xuICAgICAgICAgICAgZXZlbnRUYXJnZXQuZm9yRWFjaCh0aGlzLl93cmFwRXZlbnRUYXJnZXQuYmluZCh0aGlzKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFRyeUNhdGNoLnByb3RvdHlwZS5fd3JhcFRpbWVGdW5jdGlvbiA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG9yaWdpbmFsQ2FsbGJhY2sgPSBhcmdzWzBdO1xuICAgICAgICAgICAgYXJnc1swXSA9IHdyYXAob3JpZ2luYWxDYWxsYmFjaywge1xuICAgICAgICAgICAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7IGZ1bmN0aW9uOiBnZXRGdW5jdGlvbk5hbWUob3JpZ2luYWwpIH0sXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdpbnN0cnVtZW50JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIFRyeUNhdGNoLnByb3RvdHlwZS5fd3JhcFJBRiA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwuY2FsbCh0aGlzLCB3cmFwKGNhbGxiYWNrLCB7XG4gICAgICAgICAgICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uOiAncmVxdWVzdEFuaW1hdGlvbkZyYW1lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXI6IGdldEZ1bmN0aW9uTmFtZShvcmlnaW5hbCksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdpbnN0cnVtZW50JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgVHJ5Q2F0Y2gucHJvdG90eXBlLl93cmFwRXZlbnRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHZhciBnbG9iYWwgPSBnZXRHbG9iYWxPYmplY3QoKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICB2YXIgcHJvdG8gPSBnbG9iYWxbdGFyZ2V0XSAmJiBnbG9iYWxbdGFyZ2V0XS5wcm90b3R5cGU7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgaWYgKCFwcm90byB8fCAhcHJvdG8uaGFzT3duUHJvcGVydHkgfHwgIXByb3RvLmhhc093blByb3BlcnR5KCdhZGRFdmVudExpc3RlbmVyJykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmaWxsKHByb3RvLCAnYWRkRXZlbnRMaXN0ZW5lcicsIGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudE5hbWUsIGZuLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmbi5oYW5kbGVFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm4uaGFuZGxlRXZlbnQgPSB3cmFwKGZuLmhhbmRsZUV2ZW50LmJpbmQoZm4pLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uOiAnaGFuZGxlRXZlbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcjogZ2V0RnVuY3Rpb25OYW1lKGZuKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW5zdHJ1bWVudCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2FuIHNvbWV0aW1lcyBnZXQgJ1Blcm1pc3Npb24gZGVuaWVkIHRvIGFjY2VzcyBwcm9wZXJ0eSBcImhhbmRsZSBFdmVudCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmNhbGwodGhpcywgZXZlbnROYW1lLCBcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICAgIHdyYXAoZm4sIHtcbiAgICAgICAgICAgICAgICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb246ICdhZGRFdmVudExpc3RlbmVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyOiBnZXRGdW5jdGlvbk5hbWUoZm4pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW5zdHJ1bWVudCcsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSksIG9wdGlvbnMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZpbGwocHJvdG8sICdyZW1vdmVFdmVudExpc3RlbmVyJywgZnVuY3Rpb24gKG9yaWdpbmFsUmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudE5hbWUsIGZuLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFRoZXJlIGFyZSAyIHBvc3NpYmxlIHNjZW5hcmlvcyBoZXJlOlxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogMS4gU29tZW9uZSBwYXNzZXMgYSBjYWxsYmFjaywgd2hpY2ggd2FzIGF0dGFjaGVkIHByaW9yIHRvIFNlbnRyeSBpbml0aWFsaXphdGlvbiwgb3IgYnkgdXNpbmcgdW5tb2RpZmllZFxuICAgICAgICAgICAgICAgICAqIG1ldGhvZCwgZWcuIGBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyLmNhbGwoZWwsIG5hbWUsIGhhbmRsZXIpLiBJbiB0aGlzIGNhc2UsIHdlIHRyZWF0IHRoaXMgZnVuY3Rpb25cbiAgICAgICAgICAgICAgICAgKiBhcyBhIHBhc3MtdGhyb3VnaCwgYW5kIGNhbGwgb3JpZ2luYWwgYHJlbW92ZUV2ZW50TGlzdGVuZXJgIHdpdGggaXQuXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiAyLiBTb21lb25lIHBhc3NlcyBhIGNhbGxiYWNrLCB3aGljaCB3YXMgYXR0YWNoZWQgYWZ0ZXIgU2VudHJ5IHdhcyBpbml0aWFsaXplZCwgd2hpY2ggbWVhbnMgdGhhdCBpdCB3YXMgdXNpbmdcbiAgICAgICAgICAgICAgICAgKiBvdXIgd3JhcHBlZCB2ZXJzaW9uIG9mIGBhZGRFdmVudExpc3RlbmVyYCwgd2hpY2ggaW50ZXJuYWxseSBjYWxscyBgd3JhcGAgaGVscGVyLlxuICAgICAgICAgICAgICAgICAqIFRoaXMgaGVscGVyIFwid3JhcHNcIiB3aG9sZSBjYWxsYmFjayBpbnNpZGUgYSB0cnkvY2F0Y2ggc3RhdGVtZW50LCBhbmQgYXR0YWNoZWQgYXBwcm9wcmlhdGUgbWV0YWRhdGEgdG8gaXQsXG4gICAgICAgICAgICAgICAgICogaW4gb3JkZXIgZm9yIHVzIHRvIG1ha2UgYSBkaXN0aW5jdGlvbiBiZXR3ZWVuIHdyYXBwZWQvbm9uLXdyYXBwZWQgZnVuY3Rpb25zIHBvc3NpYmxlLlxuICAgICAgICAgICAgICAgICAqIElmIGEgZnVuY3Rpb24gd2FzIHdyYXBwZWQsIGl0IGhhcyBhZGRpdGlvbmFsIHByb3BlcnR5IG9mIGBfX3NlbnRyeV93cmFwcGVkX19gLCBob2xkaW5nIHRoZSBoYW5kbGVyLlxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogV2hlbiBzb21lb25lIGFkZHMgYSBoYW5kbGVyIHByaW9yIHRvIGluaXRpYWxpemF0aW9uLCBhbmQgdGhlbiBkbyBpdCBhZ2FpbiwgYnV0IGFmdGVyLFxuICAgICAgICAgICAgICAgICAqIHRoZW4gd2UgaGF2ZSB0byBkZXRhY2ggYm90aCBvZiB0aGVtLiBPdGhlcndpc2UsIGlmIHdlJ2QgZGV0YWNoIG9ubHkgd3JhcHBlZCBvbmUsIGl0J2QgYmUgaW1wb3NzaWJsZVxuICAgICAgICAgICAgICAgICAqIHRvIGdldCByaWQgb2YgdGhlIGluaXRpYWwgaGFuZGxlciBhbmQgaXQnZCBzdGljayB0aGVyZSBmb3JldmVyLlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHZhciB3cmFwcGVkRXZlbnRIYW5kbGVyID0gZm47XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdpbmFsRXZlbnRIYW5kbGVyID0gKF9hID0gd3JhcHBlZEV2ZW50SGFuZGxlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLl9fc2VudHJ5X3dyYXBwZWRfXztcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsRXZlbnRIYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFJlbW92ZUV2ZW50TGlzdGVuZXIuY2FsbCh0aGlzLCBldmVudE5hbWUsIG9yaWdpbmFsRXZlbnRIYW5kbGVyLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmUsIGFjY2Vzc2luZyBfX3NlbnRyeV93cmFwcGVkX18gd2lsbCB0aHJvdyBpbiBzb21lIFNlbGVuaXVtIGVudmlyb25tZW50c1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxSZW1vdmVFdmVudExpc3RlbmVyLmNhbGwodGhpcywgZXZlbnROYW1lLCB3cmFwcGVkRXZlbnRIYW5kbGVyLCBvcHRpb25zKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgVHJ5Q2F0Y2gucHJvdG90eXBlLl93cmFwWEhSID0gZnVuY3Rpb24gKG9yaWdpbmFsU2VuZCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby10aGlzLWFsaWFzXG4gICAgICAgICAgICB2YXIgeGhyID0gdGhpcztcbiAgICAgICAgICAgIHZhciB4bWxIdHRwUmVxdWVzdFByb3BzID0gWydvbmxvYWQnLCAnb25lcnJvcicsICdvbnByb2dyZXNzJywgJ29ucmVhZHlzdGF0ZWNoYW5nZSddO1xuICAgICAgICAgICAgeG1sSHR0cFJlcXVlc3RQcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3AgaW4geGhyICYmIHR5cGVvZiB4aHJbcHJvcF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgICAgICAgICAgZmlsbCh4aHIsIHByb3AsIGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdyYXBPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbjogcHJvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXI6IGdldEZ1bmN0aW9uTmFtZShvcmlnaW5hbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdpbnN0cnVtZW50JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIEluc3RydW1lbnQgaW50ZWdyYXRpb24gaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSBUcnlDYXRjaCwgZ2V0IHRoZSBuYW1lIG9mIG9yaWdpbmFsIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWwuX19zZW50cnlfb3JpZ2luYWxfXykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBPcHRpb25zLm1lY2hhbmlzbS5kYXRhLmhhbmRsZXIgPSBnZXRGdW5jdGlvbk5hbWUob3JpZ2luYWwuX19zZW50cnlfb3JpZ2luYWxfXyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2Ugd3JhcCBkaXJlY3RseVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdyYXAob3JpZ2luYWwsIHdyYXBPcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxTZW5kLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBUcnlDYXRjaC5pZCA9ICdUcnlDYXRjaCc7XG4gICAgcmV0dXJuIFRyeUNhdGNoO1xufSgpKTtcbmV4cG9ydCB7IFRyeUNhdGNoIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cnljYXRjaC5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzICovXG5pbXBvcnQgeyBnZXRDdXJyZW50SHViIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IFNldmVyaXR5IH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBhZGRFeGNlcHRpb25NZWNoYW5pc20sIGFkZEluc3RydW1lbnRhdGlvbkhhbmRsZXIsIGdldExvY2F0aW9uSHJlZiwgaXNFcnJvckV2ZW50LCBpc1ByaW1pdGl2ZSwgaXNTdHJpbmcsIGxvZ2dlciwgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IGV2ZW50RnJvbVVua25vd25JbnB1dCB9IGZyb20gJy4uL2V2ZW50YnVpbGRlcic7XG5pbXBvcnQgeyBzaG91bGRJZ25vcmVPbkVycm9yIH0gZnJvbSAnLi4vaGVscGVycyc7XG4vKiogR2xvYmFsIGhhbmRsZXJzICovXG52YXIgR2xvYmFsSGFuZGxlcnMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqIEpTRG9jICovXG4gICAgZnVuY3Rpb24gR2xvYmFsSGFuZGxlcnMob3B0aW9ucykge1xuICAgICAgICAvKipcbiAgICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubmFtZSA9IEdsb2JhbEhhbmRsZXJzLmlkO1xuICAgICAgICAvKiogSlNEb2MgKi9cbiAgICAgICAgdGhpcy5fb25FcnJvckhhbmRsZXJJbnN0YWxsZWQgPSBmYWxzZTtcbiAgICAgICAgLyoqIEpTRG9jICovXG4gICAgICAgIHRoaXMuX29uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlckluc3RhbGxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gX19hc3NpZ24oeyBvbmVycm9yOiB0cnVlLCBvbnVuaGFuZGxlZHJlamVjdGlvbjogdHJ1ZSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBHbG9iYWxIYW5kbGVycy5wcm90b3R5cGUuc2V0dXBPbmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSA1MDtcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMub25lcnJvcikge1xuICAgICAgICAgICAgbG9nZ2VyLmxvZygnR2xvYmFsIEhhbmRsZXIgYXR0YWNoZWQ6IG9uZXJyb3InKTtcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbGxHbG9iYWxPbkVycm9ySGFuZGxlcigpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKCdHbG9iYWwgSGFuZGxlciBhdHRhY2hlZDogb251bmhhbmRsZWRyZWplY3Rpb24nKTtcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbGxHbG9iYWxPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgR2xvYmFsSGFuZGxlcnMucHJvdG90eXBlLl9pbnN0YWxsR2xvYmFsT25FcnJvckhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLl9vbkVycm9ySGFuZGxlckluc3RhbGxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGFkZEluc3RydW1lbnRhdGlvbkhhbmRsZXIoe1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IGRhdGEuZXJyb3I7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRIdWIgPSBnZXRDdXJyZW50SHViKCk7XG4gICAgICAgICAgICAgICAgdmFyIGhhc0ludGVncmF0aW9uID0gY3VycmVudEh1Yi5nZXRJbnRlZ3JhdGlvbihHbG9iYWxIYW5kbGVycyk7XG4gICAgICAgICAgICAgICAgdmFyIGlzRmFpbGVkT3duRGVsaXZlcnkgPSBlcnJvciAmJiBlcnJvci5fX3NlbnRyeV9vd25fcmVxdWVzdF9fID09PSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmICghaGFzSW50ZWdyYXRpb24gfHwgc2hvdWxkSWdub3JlT25FcnJvcigpIHx8IGlzRmFpbGVkT3duRGVsaXZlcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgY2xpZW50ID0gY3VycmVudEh1Yi5nZXRDbGllbnQoKTtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSBpc1ByaW1pdGl2ZShlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgPyBfdGhpcy5fZXZlbnRGcm9tSW5jb21wbGV0ZU9uRXJyb3IoZGF0YS5tc2csIGRhdGEudXJsLCBkYXRhLmxpbmUsIGRhdGEuY29sdW1uKVxuICAgICAgICAgICAgICAgICAgICA6IF90aGlzLl9lbmhhbmNlRXZlbnRXaXRoSW5pdGlhbEZyYW1lKGV2ZW50RnJvbVVua25vd25JbnB1dChlcnJvciwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRhY2hTdGFja3RyYWNlOiBjbGllbnQgJiYgY2xpZW50LmdldE9wdGlvbnMoKS5hdHRhY2hTdGFja3RyYWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgfSksIGRhdGEudXJsLCBkYXRhLmxpbmUsIGRhdGEuY29sdW1uKTtcbiAgICAgICAgICAgICAgICBhZGRFeGNlcHRpb25NZWNoYW5pc20oZXZlbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdvbmVycm9yJyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjdXJyZW50SHViLmNhcHR1cmVFdmVudChldmVudCwge1xuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEV4Y2VwdGlvbjogZXJyb3IsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX29uRXJyb3JIYW5kbGVySW5zdGFsbGVkID0gdHJ1ZTtcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIEdsb2JhbEhhbmRsZXJzLnByb3RvdHlwZS5faW5zdGFsbEdsb2JhbE9uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX29uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlckluc3RhbGxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGFkZEluc3RydW1lbnRhdGlvbkhhbmRsZXIoe1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IGU7XG4gICAgICAgICAgICAgICAgLy8gZGlnIHRoZSBvYmplY3Qgb2YgdGhlIHJlamVjdGlvbiBvdXQgb2Yga25vd24gZXZlbnQgdHlwZXNcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBQcm9taXNlUmVqZWN0aW9uRXZlbnRzIHN0b3JlIHRoZSBvYmplY3Qgb2YgdGhlIHJlamVjdGlvbiB1bmRlciAncmVhc29uJ1xuICAgICAgICAgICAgICAgICAgICAvLyBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1Byb21pc2VSZWplY3Rpb25FdmVudFxuICAgICAgICAgICAgICAgICAgICBpZiAoJ3JlYXNvbicgaW4gZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBlLnJlYXNvbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBzb21ldGhpbmcsIHNvbWV3aGVyZSwgKGxpa2VseSBhIGJyb3dzZXIgZXh0ZW5zaW9uKSBlZmZlY3RpdmVseSBjYXN0cyBQcm9taXNlUmVqZWN0aW9uRXZlbnRzXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvIEN1c3RvbUV2ZW50cywgbW92aW5nIHRoZSBgcHJvbWlzZWAgYW5kIGByZWFzb25gIGF0dHJpYnV0ZXMgb2YgdGhlIFBSRSBpbnRvXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBDdXN0b21FdmVudCdzIGBkZXRhaWxgIGF0dHJpYnV0ZSwgc2luY2UgdGhleSdyZSBub3QgcGFydCBvZiBDdXN0b21FdmVudCdzIHNwZWNcbiAgICAgICAgICAgICAgICAgICAgLy8gc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DdXN0b21FdmVudCBhbmRcbiAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvMjM4MFxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgnZGV0YWlsJyBpbiBlICYmICdyZWFzb24nIGluIGUuZGV0YWlsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IGUuZGV0YWlsLnJlYXNvbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoX29PKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5vLWVtcHR5XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50SHViID0gZ2V0Q3VycmVudEh1YigpO1xuICAgICAgICAgICAgICAgIHZhciBoYXNJbnRlZ3JhdGlvbiA9IGN1cnJlbnRIdWIuZ2V0SW50ZWdyYXRpb24oR2xvYmFsSGFuZGxlcnMpO1xuICAgICAgICAgICAgICAgIHZhciBpc0ZhaWxlZE93bkRlbGl2ZXJ5ID0gZXJyb3IgJiYgZXJyb3IuX19zZW50cnlfb3duX3JlcXVlc3RfXyA9PT0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc0ludGVncmF0aW9uIHx8IHNob3VsZElnbm9yZU9uRXJyb3IoKSB8fCBpc0ZhaWxlZE93bkRlbGl2ZXJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgY2xpZW50ID0gY3VycmVudEh1Yi5nZXRDbGllbnQoKTtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSBpc1ByaW1pdGl2ZShlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgPyBfdGhpcy5fZXZlbnRGcm9tSW5jb21wbGV0ZVJlamVjdGlvbihlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgOiBldmVudEZyb21Vbmtub3duSW5wdXQoZXJyb3IsIHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0YWNoU3RhY2t0cmFjZTogY2xpZW50ICYmIGNsaWVudC5nZXRPcHRpb25zKCkuYXR0YWNoU3RhY2t0cmFjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZXZlbnQubGV2ZWwgPSBTZXZlcml0eS5FcnJvcjtcbiAgICAgICAgICAgICAgICBhZGRFeGNlcHRpb25NZWNoYW5pc20oZXZlbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdvbnVuaGFuZGxlZHJlamVjdGlvbicsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY3VycmVudEh1Yi5jYXB0dXJlRXZlbnQoZXZlbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFeGNlcHRpb246IGVycm9yLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0eXBlOiAndW5oYW5kbGVkcmVqZWN0aW9uJyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX29uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlckluc3RhbGxlZCA9IHRydWU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGNyZWF0ZXMgYSBzdGFjayBmcm9tIGFuIG9sZCwgZXJyb3ItbGVzcyBvbmVycm9yIGhhbmRsZXIuXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBHbG9iYWxIYW5kbGVycy5wcm90b3R5cGUuX2V2ZW50RnJvbUluY29tcGxldGVPbkVycm9yID0gZnVuY3Rpb24gKG1zZywgdXJsLCBsaW5lLCBjb2x1bW4pIHtcbiAgICAgICAgdmFyIEVSUk9SX1RZUEVTX1JFID0gL14oPzpbVXVdbmNhdWdodCAoPzpleGNlcHRpb246ICk/KT8oPzooKD86RXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJfClFcnJvcik6ICk/KC4qKSQvaTtcbiAgICAgICAgLy8gSWYgJ21lc3NhZ2UnIGlzIEVycm9yRXZlbnQsIGdldCByZWFsIG1lc3NhZ2UgZnJvbSBpbnNpZGVcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSBpc0Vycm9yRXZlbnQobXNnKSA/IG1zZy5tZXNzYWdlIDogbXNnO1xuICAgICAgICB2YXIgbmFtZTtcbiAgICAgICAgaWYgKGlzU3RyaW5nKG1lc3NhZ2UpKSB7XG4gICAgICAgICAgICB2YXIgZ3JvdXBzID0gbWVzc2FnZS5tYXRjaChFUlJPUl9UWVBFU19SRSk7XG4gICAgICAgICAgICBpZiAoZ3JvdXBzKSB7XG4gICAgICAgICAgICAgICAgbmFtZSA9IGdyb3Vwc1sxXTtcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gZ3JvdXBzWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBldmVudCA9IHtcbiAgICAgICAgICAgIGV4Y2VwdGlvbjoge1xuICAgICAgICAgICAgICAgIHZhbHVlczogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBuYW1lIHx8ICdFcnJvcicsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuaGFuY2VFdmVudFdpdGhJbml0aWFsRnJhbWUoZXZlbnQsIHVybCwgbGluZSwgY29sdW1uKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gY3JlYXRlcyBhbiBFdmVudCBmcm9tIGFuIFRyYWNlS2l0U3RhY2tUcmFjZSB0aGF0IGhhcyBwYXJ0IG9mIGl0IG1pc3NpbmcuXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBHbG9iYWxIYW5kbGVycy5wcm90b3R5cGUuX2V2ZW50RnJvbUluY29tcGxldGVSZWplY3Rpb24gPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGV4Y2VwdGlvbjoge1xuICAgICAgICAgICAgICAgIHZhbHVlczogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnVW5oYW5kbGVkUmVqZWN0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcIk5vbi1FcnJvciBwcm9taXNlIHJlamVjdGlvbiBjYXB0dXJlZCB3aXRoIHZhbHVlOiBcIiArIGVycm9yLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBHbG9iYWxIYW5kbGVycy5wcm90b3R5cGUuX2VuaGFuY2VFdmVudFdpdGhJbml0aWFsRnJhbWUgPSBmdW5jdGlvbiAoZXZlbnQsIHVybCwgbGluZSwgY29sdW1uKSB7XG4gICAgICAgIGV2ZW50LmV4Y2VwdGlvbiA9IGV2ZW50LmV4Y2VwdGlvbiB8fCB7fTtcbiAgICAgICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyA9IGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMgfHwgW107XG4gICAgICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0gPSBldmVudC5leGNlcHRpb24udmFsdWVzWzBdIHx8IHt9O1xuICAgICAgICBldmVudC5leGNlcHRpb24udmFsdWVzWzBdLnN0YWNrdHJhY2UgPSBldmVudC5leGNlcHRpb24udmFsdWVzWzBdLnN0YWNrdHJhY2UgfHwge307XG4gICAgICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0uc3RhY2t0cmFjZS5mcmFtZXMgPSBldmVudC5leGNlcHRpb24udmFsdWVzWzBdLnN0YWNrdHJhY2UuZnJhbWVzIHx8IFtdO1xuICAgICAgICB2YXIgY29sbm8gPSBpc05hTihwYXJzZUludChjb2x1bW4sIDEwKSkgPyB1bmRlZmluZWQgOiBjb2x1bW47XG4gICAgICAgIHZhciBsaW5lbm8gPSBpc05hTihwYXJzZUludChsaW5lLCAxMCkpID8gdW5kZWZpbmVkIDogbGluZTtcbiAgICAgICAgdmFyIGZpbGVuYW1lID0gaXNTdHJpbmcodXJsKSAmJiB1cmwubGVuZ3RoID4gMCA/IHVybCA6IGdldExvY2F0aW9uSHJlZigpO1xuICAgICAgICBpZiAoZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS5zdGFja3RyYWNlLmZyYW1lcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0uc3RhY2t0cmFjZS5mcmFtZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgY29sbm86IGNvbG5vLFxuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBmaWxlbmFtZSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbjogJz8nLFxuICAgICAgICAgICAgICAgIGluX2FwcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBsaW5lbm86IGxpbmVubyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgR2xvYmFsSGFuZGxlcnMuaWQgPSAnR2xvYmFsSGFuZGxlcnMnO1xuICAgIHJldHVybiBHbG9iYWxIYW5kbGVycztcbn0oKSk7XG5leHBvcnQgeyBHbG9iYWxIYW5kbGVycyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2xvYmFsaGFuZGxlcnMuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZCB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IsIGdldEN1cnJlbnRIdWIgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgaXNJbnN0YW5jZU9mIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBleGNlcHRpb25Gcm9tU3RhY2t0cmFjZSB9IGZyb20gJy4uL3BhcnNlcnMnO1xuaW1wb3J0IHsgY29tcHV0ZVN0YWNrVHJhY2UgfSBmcm9tICcuLi90cmFjZWtpdCc7XG52YXIgREVGQVVMVF9LRVkgPSAnY2F1c2UnO1xudmFyIERFRkFVTFRfTElNSVQgPSA1O1xuLyoqIEFkZHMgU0RLIGluZm8gdG8gYW4gZXZlbnQuICovXG52YXIgTGlua2VkRXJyb3JzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGlua2VkRXJyb3JzKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBMaW5rZWRFcnJvcnMuaWQ7XG4gICAgICAgIHRoaXMuX2tleSA9IG9wdGlvbnMua2V5IHx8IERFRkFVTFRfS0VZO1xuICAgICAgICB0aGlzLl9saW1pdCA9IG9wdGlvbnMubGltaXQgfHwgREVGQVVMVF9MSU1JVDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBMaW5rZWRFcnJvcnMucHJvdG90eXBlLnNldHVwT25jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IoZnVuY3Rpb24gKGV2ZW50LCBoaW50KSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IGdldEN1cnJlbnRIdWIoKS5nZXRJbnRlZ3JhdGlvbihMaW5rZWRFcnJvcnMpO1xuICAgICAgICAgICAgaWYgKHNlbGYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5faGFuZGxlcihldmVudCwgaGludCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBMaW5rZWRFcnJvcnMucHJvdG90eXBlLl9oYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50LCBoaW50KSB7XG4gICAgICAgIGlmICghZXZlbnQuZXhjZXB0aW9uIHx8ICFldmVudC5leGNlcHRpb24udmFsdWVzIHx8ICFoaW50IHx8ICFpc0luc3RhbmNlT2YoaGludC5vcmlnaW5hbEV4Y2VwdGlvbiwgRXJyb3IpKSB7XG4gICAgICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxpbmtlZEVycm9ycyA9IHRoaXMuX3dhbGtFcnJvclRyZWUoaGludC5vcmlnaW5hbEV4Y2VwdGlvbiwgdGhpcy5fa2V5KTtcbiAgICAgICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyA9IF9fc3ByZWFkKGxpbmtlZEVycm9ycywgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyk7XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgTGlua2VkRXJyb3JzLnByb3RvdHlwZS5fd2Fsa0Vycm9yVHJlZSA9IGZ1bmN0aW9uIChlcnJvciwga2V5LCBzdGFjaykge1xuICAgICAgICBpZiAoc3RhY2sgPT09IHZvaWQgMCkgeyBzdGFjayA9IFtdOyB9XG4gICAgICAgIGlmICghaXNJbnN0YW5jZU9mKGVycm9yW2tleV0sIEVycm9yKSB8fCBzdGFjay5sZW5ndGggKyAxID49IHRoaXMuX2xpbWl0KSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2s7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0YWNrdHJhY2UgPSBjb21wdXRlU3RhY2tUcmFjZShlcnJvcltrZXldKTtcbiAgICAgICAgdmFyIGV4Y2VwdGlvbiA9IGV4Y2VwdGlvbkZyb21TdGFja3RyYWNlKHN0YWNrdHJhY2UpO1xuICAgICAgICByZXR1cm4gdGhpcy5fd2Fsa0Vycm9yVHJlZShlcnJvcltrZXldLCBrZXksIF9fc3ByZWFkKFtleGNlcHRpb25dLCBzdGFjaykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBMaW5rZWRFcnJvcnMuaWQgPSAnTGlua2VkRXJyb3JzJztcbiAgICByZXR1cm4gTGlua2VkRXJyb3JzO1xufSgpKTtcbmV4cG9ydCB7IExpbmtlZEVycm9ycyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlua2VkZXJyb3JzLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBhZGRHbG9iYWxFdmVudFByb2Nlc3NvciwgZ2V0Q3VycmVudEh1YiB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBnZXRHbG9iYWxPYmplY3QgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbnZhciBnbG9iYWwgPSBnZXRHbG9iYWxPYmplY3QoKTtcbi8qKiBVc2VyQWdlbnQgKi9cbnZhciBVc2VyQWdlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVXNlckFnZW50KCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubmFtZSA9IFVzZXJBZ2VudC5pZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBVc2VyQWdlbnQucHJvdG90eXBlLnNldHVwT25jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgICAgIGlmIChnZXRDdXJyZW50SHViKCkuZ2V0SW50ZWdyYXRpb24oVXNlckFnZW50KSkge1xuICAgICAgICAgICAgICAgIC8vIGlmIG5vbmUgb2YgdGhlIGluZm9ybWF0aW9uIHdlIHdhbnQgZXhpc3RzLCBkb24ndCBib3RoZXJcbiAgICAgICAgICAgICAgICBpZiAoIWdsb2JhbC5uYXZpZ2F0b3IgJiYgIWdsb2JhbC5sb2NhdGlvbiAmJiAhZ2xvYmFsLmRvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZ3JhYiBhcyBtdWNoIGluZm8gYXMgZXhpc3RzIGFuZCBhZGQgaXQgdG8gdGhlIGV2ZW50XG4gICAgICAgICAgICAgICAgdmFyIHVybCA9ICgoX2EgPSBldmVudC5yZXF1ZXN0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudXJsKSB8fCAoKF9iID0gZ2xvYmFsLmxvY2F0aW9uKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuaHJlZik7XG4gICAgICAgICAgICAgICAgdmFyIHJlZmVycmVyID0gKGdsb2JhbC5kb2N1bWVudCB8fCB7fSkucmVmZXJyZXI7XG4gICAgICAgICAgICAgICAgdmFyIHVzZXJBZ2VudCA9IChnbG9iYWwubmF2aWdhdG9yIHx8IHt9KS51c2VyQWdlbnQ7XG4gICAgICAgICAgICAgICAgdmFyIGhlYWRlcnMgPSBfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgKF9jID0gZXZlbnQucmVxdWVzdCkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmhlYWRlcnMpLCAocmVmZXJyZXIgJiYgeyBSZWZlcmVyOiByZWZlcnJlciB9KSksICh1c2VyQWdlbnQgJiYgeyAnVXNlci1BZ2VudCc6IHVzZXJBZ2VudCB9KSk7XG4gICAgICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgKHVybCAmJiB7IHVybDogdXJsIH0pKSwgeyBoZWFkZXJzOiBoZWFkZXJzIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZXZlbnQpLCB7IHJlcXVlc3Q6IHJlcXVlc3QgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBVc2VyQWdlbnQuaWQgPSAnVXNlckFnZW50JztcbiAgICByZXR1cm4gVXNlckFnZW50O1xufSgpKTtcbmV4cG9ydCB7IFVzZXJBZ2VudCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlcmFnZW50LmpzLm1hcCIsImltcG9ydCB7IGdldEN1cnJlbnRIdWIsIGluaXRBbmRCaW5kLCBJbnRlZ3JhdGlvbnMgYXMgQ29yZUludGVncmF0aW9ucyB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBnZXRHbG9iYWxPYmplY3QsIFN5bmNQcm9taXNlIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBCcm93c2VyQ2xpZW50IH0gZnJvbSAnLi9jbGllbnQnO1xuaW1wb3J0IHsgd3JhcCBhcyBpbnRlcm5hbFdyYXAgfSBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IHsgQnJlYWRjcnVtYnMsIEdsb2JhbEhhbmRsZXJzLCBMaW5rZWRFcnJvcnMsIFRyeUNhdGNoLCBVc2VyQWdlbnQgfSBmcm9tICcuL2ludGVncmF0aW9ucyc7XG5leHBvcnQgdmFyIGRlZmF1bHRJbnRlZ3JhdGlvbnMgPSBbXG4gICAgbmV3IENvcmVJbnRlZ3JhdGlvbnMuSW5ib3VuZEZpbHRlcnMoKSxcbiAgICBuZXcgQ29yZUludGVncmF0aW9ucy5GdW5jdGlvblRvU3RyaW5nKCksXG4gICAgbmV3IFRyeUNhdGNoKCksXG4gICAgbmV3IEJyZWFkY3J1bWJzKCksXG4gICAgbmV3IEdsb2JhbEhhbmRsZXJzKCksXG4gICAgbmV3IExpbmtlZEVycm9ycygpLFxuICAgIG5ldyBVc2VyQWdlbnQoKSxcbl07XG4vKipcbiAqIFRoZSBTZW50cnkgQnJvd3NlciBTREsgQ2xpZW50LlxuICpcbiAqIFRvIHVzZSB0aGlzIFNESywgY2FsbCB0aGUge0BsaW5rIGluaXR9IGZ1bmN0aW9uIGFzIGVhcmx5IGFzIHBvc3NpYmxlIHdoZW5cbiAqIGxvYWRpbmcgdGhlIHdlYiBwYWdlLiBUbyBzZXQgY29udGV4dCBpbmZvcm1hdGlvbiBvciBzZW5kIG1hbnVhbCBldmVudHMsIHVzZVxuICogdGhlIHByb3ZpZGVkIG1ldGhvZHMuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBcbiAqXG4gKiBpbXBvcnQgeyBpbml0IH0gZnJvbSAnQHNlbnRyeS9icm93c2VyJztcbiAqXG4gKiBpbml0KHtcbiAqICAgZHNuOiAnX19EU05fXycsXG4gKiAgIC8vIC4uLlxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKlxuICogaW1wb3J0IHsgY29uZmlndXJlU2NvcGUgfSBmcm9tICdAc2VudHJ5L2Jyb3dzZXInO1xuICogY29uZmlndXJlU2NvcGUoKHNjb3BlOiBTY29wZSkgPT4ge1xuICogICBzY29wZS5zZXRFeHRyYSh7IGJhdHRlcnk6IDAuNyB9KTtcbiAqICAgc2NvcGUuc2V0VGFnKHsgdXNlcl9tb2RlOiAnYWRtaW4nIH0pO1xuICogICBzY29wZS5zZXRVc2VyKHsgaWQ6ICc0NzExJyB9KTtcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICpcbiAqIGltcG9ydCB7IGFkZEJyZWFkY3J1bWIgfSBmcm9tICdAc2VudHJ5L2Jyb3dzZXInO1xuICogYWRkQnJlYWRjcnVtYih7XG4gKiAgIG1lc3NhZ2U6ICdNeSBCcmVhZGNydW1iJyxcbiAqICAgLy8gLi4uXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBgXG4gKlxuICogaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gJ0BzZW50cnkvYnJvd3Nlcic7XG4gKiBTZW50cnkuY2FwdHVyZU1lc3NhZ2UoJ0hlbGxvLCB3b3JsZCEnKTtcbiAqIFNlbnRyeS5jYXB0dXJlRXhjZXB0aW9uKG5ldyBFcnJvcignR29vZCBieWUnKSk7XG4gKiBTZW50cnkuY2FwdHVyZUV2ZW50KHtcbiAqICAgbWVzc2FnZTogJ01hbnVhbCcsXG4gKiAgIHN0YWNrdHJhY2U6IFtcbiAqICAgICAvLyAuLi5cbiAqICAgXSxcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHNlZSB7QGxpbmsgQnJvd3Nlck9wdGlvbnN9IGZvciBkb2N1bWVudGF0aW9uIG9uIGNvbmZpZ3VyYXRpb24gb3B0aW9ucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXQob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgaWYgKG9wdGlvbnMuZGVmYXVsdEludGVncmF0aW9ucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG9wdGlvbnMuZGVmYXVsdEludGVncmF0aW9ucyA9IGRlZmF1bHRJbnRlZ3JhdGlvbnM7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnJlbGVhc2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgd2luZG93XzEgPSBnZXRHbG9iYWxPYmplY3QoKTtcbiAgICAgICAgLy8gVGhpcyBzdXBwb3J0cyB0aGUgdmFyaWFibGUgdGhhdCBzZW50cnktd2VicGFjay1wbHVnaW4gaW5qZWN0c1xuICAgICAgICBpZiAod2luZG93XzEuU0VOVFJZX1JFTEVBU0UgJiYgd2luZG93XzEuU0VOVFJZX1JFTEVBU0UuaWQpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucmVsZWFzZSA9IHdpbmRvd18xLlNFTlRSWV9SRUxFQVNFLmlkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmF1dG9TZXNzaW9uVHJhY2tpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBvcHRpb25zLmF1dG9TZXNzaW9uVHJhY2tpbmcgPSBmYWxzZTtcbiAgICB9XG4gICAgaW5pdEFuZEJpbmQoQnJvd3NlckNsaWVudCwgb3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMuYXV0b1Nlc3Npb25UcmFja2luZykge1xuICAgICAgICBzdGFydFNlc3Npb25UcmFja2luZygpO1xuICAgIH1cbn1cbi8qKlxuICogUHJlc2VudCB0aGUgdXNlciB3aXRoIGEgcmVwb3J0IGRpYWxvZy5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyBFdmVyeXRoaW5nIGlzIG9wdGlvbmFsLCB3ZSB0cnkgdG8gZmV0Y2ggYWxsIGluZm8gbmVlZCBmcm9tIHRoZSBnbG9iYWwgc2NvcGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaG93UmVwb3J0RGlhbG9nKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIGlmICghb3B0aW9ucy5ldmVudElkKSB7XG4gICAgICAgIG9wdGlvbnMuZXZlbnRJZCA9IGdldEN1cnJlbnRIdWIoKS5sYXN0RXZlbnRJZCgpO1xuICAgIH1cbiAgICB2YXIgY2xpZW50ID0gZ2V0Q3VycmVudEh1YigpLmdldENsaWVudCgpO1xuICAgIGlmIChjbGllbnQpIHtcbiAgICAgICAgY2xpZW50LnNob3dSZXBvcnREaWFsb2cob3B0aW9ucyk7XG4gICAgfVxufVxuLyoqXG4gKiBUaGlzIGlzIHRoZSBnZXR0ZXIgZm9yIGxhc3RFdmVudElkLlxuICpcbiAqIEByZXR1cm5zIFRoZSBsYXN0IGV2ZW50IGlkIG9mIGEgY2FwdHVyZWQgZXZlbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsYXN0RXZlbnRJZCgpIHtcbiAgICByZXR1cm4gZ2V0Q3VycmVudEh1YigpLmxhc3RFdmVudElkKCk7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgaGVyZSB0byBiZSBBUEkgY29tcGF0aWJsZSB3aXRoIHRoZSBsb2FkZXIuXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JjZUxvYWQoKSB7XG4gICAgLy8gTm9vcFxufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGhlcmUgdG8gYmUgQVBJIGNvbXBhdGlibGUgd2l0aCB0aGUgbG9hZGVyLlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gb25Mb2FkKGNhbGxiYWNrKSB7XG4gICAgY2FsbGJhY2soKTtcbn1cbi8qKlxuICogQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBhbGwgY3VycmVudCBldmVudHMgaGF2ZSBiZWVuIHNlbnQuXG4gKiBJZiB5b3UgcHJvdmlkZSBhIHRpbWVvdXQgYW5kIHRoZSBxdWV1ZSB0YWtlcyBsb25nZXIgdG8gZHJhaW4gdGhlIHByb21pc2UgcmV0dXJucyBmYWxzZS5cbiAqXG4gKiBAcGFyYW0gdGltZW91dCBNYXhpbXVtIHRpbWUgaW4gbXMgdGhlIGNsaWVudCBzaG91bGQgd2FpdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZsdXNoKHRpbWVvdXQpIHtcbiAgICB2YXIgY2xpZW50ID0gZ2V0Q3VycmVudEh1YigpLmdldENsaWVudCgpO1xuICAgIGlmIChjbGllbnQpIHtcbiAgICAgICAgcmV0dXJuIGNsaWVudC5mbHVzaCh0aW1lb3V0KTtcbiAgICB9XG4gICAgcmV0dXJuIFN5bmNQcm9taXNlLnJlamVjdChmYWxzZSk7XG59XG4vKipcbiAqIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gYWxsIGN1cnJlbnQgZXZlbnRzIGhhdmUgYmVlbiBzZW50LlxuICogSWYgeW91IHByb3ZpZGUgYSB0aW1lb3V0IGFuZCB0aGUgcXVldWUgdGFrZXMgbG9uZ2VyIHRvIGRyYWluIHRoZSBwcm9taXNlIHJldHVybnMgZmFsc2UuXG4gKlxuICogQHBhcmFtIHRpbWVvdXQgTWF4aW11bSB0aW1lIGluIG1zIHRoZSBjbGllbnQgc2hvdWxkIHdhaXQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbG9zZSh0aW1lb3V0KSB7XG4gICAgdmFyIGNsaWVudCA9IGdldEN1cnJlbnRIdWIoKS5nZXRDbGllbnQoKTtcbiAgICBpZiAoY2xpZW50KSB7XG4gICAgICAgIHJldHVybiBjbGllbnQuY2xvc2UodGltZW91dCk7XG4gICAgfVxuICAgIHJldHVybiBTeW5jUHJvbWlzZS5yZWplY3QoZmFsc2UpO1xufVxuLyoqXG4gKiBXcmFwIGNvZGUgd2l0aGluIGEgdHJ5L2NhdGNoIGJsb2NrIHNvIHRoZSBTREsgaXMgYWJsZSB0byBjYXB0dXJlIGVycm9ycy5cbiAqXG4gKiBAcGFyYW0gZm4gQSBmdW5jdGlvbiB0byB3cmFwLlxuICpcbiAqIEByZXR1cm5zIFRoZSByZXN1bHQgb2Ygd3JhcHBlZCBmdW5jdGlvbiBjYWxsLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGZ1bmN0aW9uIHdyYXAoZm4pIHtcbiAgICByZXR1cm4gaW50ZXJuYWxXcmFwKGZuKSgpO1xufVxuLyoqXG4gKiBFbmFibGUgYXV0b21hdGljIFNlc3Npb24gVHJhY2tpbmcgZm9yIHRoZSBpbml0aWFsIHBhZ2UgbG9hZC5cbiAqL1xuZnVuY3Rpb24gc3RhcnRTZXNzaW9uVHJhY2tpbmcoKSB7XG4gICAgdmFyIHdpbmRvdyA9IGdldEdsb2JhbE9iamVjdCgpO1xuICAgIHZhciBodWIgPSBnZXRDdXJyZW50SHViKCk7XG4gICAgLyoqXG4gICAgICogV2Ugc2hvdWxkIGJlIHVzaW5nIGBQcm9taXNlLmFsbChbd2luZG93TG9hZGVkLCBmaXJzdENvbnRlbnRmdWxQYWludF0pYCBoZXJlLFxuICAgICAqIGJ1dCwgYXMgYWx3YXlzLCBpdCdzIG5vdCBhdmFpbGFibGUgaW4gdGhlIElFMTAtMTEuIFRoYW5rcyBJRS5cbiAgICAgKi9cbiAgICB2YXIgbG9hZFJlc29sdmVkID0gZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJztcbiAgICB2YXIgZmNwUmVzb2x2ZWQgPSBmYWxzZTtcbiAgICB2YXIgcG9zc2libHlFbmRTZXNzaW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoZmNwUmVzb2x2ZWQgJiYgbG9hZFJlc29sdmVkKSB7XG4gICAgICAgICAgICBodWIuZW5kU2Vzc2lvbigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB2YXIgcmVzb2x2ZVdpbmRvd0xvYWRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbG9hZFJlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgcG9zc2libHlFbmRTZXNzaW9uKCk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgcmVzb2x2ZVdpbmRvd0xvYWRlZCk7XG4gICAgfTtcbiAgICBodWIuc3RhcnRTZXNzaW9uKCk7XG4gICAgaWYgKCFsb2FkUmVzb2x2ZWQpIHtcbiAgICAgICAgLy8gSUUgZG9lc24ndCBzdXBwb3J0IGB7IG9uY2U6IHRydWUgfWAgZm9yIGV2ZW50IGxpc3RlbmVycywgc28gd2UgaGF2ZSB0byBtYW51YWxseVxuICAgICAgICAvLyBhdHRhY2ggYW5kIHRoZW4gZGV0YWNoIGl0IG9uY2UgY29tcGxldGVkLlxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHJlc29sdmVXaW5kb3dMb2FkZWQpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICB2YXIgcG8gPSBuZXcgUGVyZm9ybWFuY2VPYnNlcnZlcihmdW5jdGlvbiAoZW50cnlMaXN0LCBwbykge1xuICAgICAgICAgICAgZW50cnlMaXN0LmdldEVudHJpZXMoKS5mb3JFYWNoKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgICAgIGlmIChlbnRyeS5uYW1lID09PSAnZmlyc3QtY29udGVudGZ1bC1wYWludCcgJiYgZW50cnkuc3RhcnRUaW1lIDwgZmlyc3RIaWRkZW5UaW1lXzEpIHtcbiAgICAgICAgICAgICAgICAgICAgcG8uZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICBmY3BSZXNvbHZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHBvc3NpYmx5RW5kU2Vzc2lvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gVGhlcmUncyBubyBuZWVkIHRvIGV2ZW4gYXR0YWNoIHRoaXMgbGlzdGVuZXIgaWYgYFBlcmZvcm1hbmNlT2JzZXJ2ZXJgIGNvbnN0cnVjdG9yIHdpbGwgZmFpbCxcbiAgICAgICAgLy8gc28gd2UgZG8gaXQgYmVsb3cgaGVyZS5cbiAgICAgICAgdmFyIGZpcnN0SGlkZGVuVGltZV8xID0gZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSAnaGlkZGVuJyA/IDAgOiBJbmZpbml0eTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgZmlyc3RIaWRkZW5UaW1lXzEgPSBNYXRoLm1pbihmaXJzdEhpZGRlblRpbWVfMSwgZXZlbnQudGltZVN0YW1wKTtcbiAgICAgICAgfSwgeyBvbmNlOiB0cnVlIH0pO1xuICAgICAgICBwby5vYnNlcnZlKHtcbiAgICAgICAgICAgIHR5cGU6ICdwYWludCcsXG4gICAgICAgICAgICBidWZmZXJlZDogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGZjcFJlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgcG9zc2libHlFbmRTZXNzaW9uKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2RrLmpzLm1hcCIsImltcG9ydCB7IGdldEN1cnJlbnRIdWIgfSBmcm9tICdAc2VudHJ5L2h1Yic7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbi8qKlxuICogSW50ZXJuYWwgZnVuY3Rpb24gdG8gY3JlYXRlIGEgbmV3IFNESyBjbGllbnQgaW5zdGFuY2UuIFRoZSBjbGllbnQgaXNcbiAqIGluc3RhbGxlZCBhbmQgdGhlbiBib3VuZCB0byB0aGUgY3VycmVudCBzY29wZS5cbiAqXG4gKiBAcGFyYW0gY2xpZW50Q2xhc3MgVGhlIGNsaWVudCBjbGFzcyB0byBpbnN0YW50aWF0ZS5cbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgdG8gcGFzcyB0byB0aGUgY2xpZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdEFuZEJpbmQoY2xpZW50Q2xhc3MsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5kZWJ1ZyA9PT0gdHJ1ZSkge1xuICAgICAgICBsb2dnZXIuZW5hYmxlKCk7XG4gICAgfVxuICAgIHZhciBodWIgPSBnZXRDdXJyZW50SHViKCk7XG4gICAgdmFyIGNsaWVudCA9IG5ldyBjbGllbnRDbGFzcyhvcHRpb25zKTtcbiAgICBodWIuYmluZENsaWVudChjbGllbnQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2RrLmpzLm1hcCIsImltcG9ydCAqIGFzIFNlbnRyeSBmcm9tICdAc2VudHJ5L2Jyb3dzZXInO1xuXG5leHBvcnQgY29uc3QgaW5pdFNlbnRyeSA9ICgpOiB2b2lkID0+XG4gIFNlbnRyeS5pbml0KHtcbiAgICBkc246IFNFTlRSWV9EU04sXG4gICAgcmVsZWFzZTogQVBQX1ZFUlNJT04sXG4gIH0pO1xuIiwiaW1wb3J0IHsgTG9jYWxlQWN0aW9uIH0gZnJvbSAnLi9hY3Rpb25zL3NldExvY2FsZSc7XG5pbXBvcnQgeyBBQ1RJT05fVFlQRSB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuY29uc3QgbG9jYWxlc1N0YXJ0c1dpdGhTdW5kYXkgPSBbJ2VuJ107XG5cbmV4cG9ydCBlbnVtIFdlZWtTdGFydHNPblR5cGUge1xuICBTdW4gPSAwLFxuICBNb24gPSAxLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEwxMG5TdGF0ZSB7XG4gIGxvY2FsZTogc3RyaW5nO1xuICB3ZWVrU3RhcnRzT246IFdlZWtTdGFydHNPblR5cGU7XG59XG5cbmNvbnN0IGluaXRpYWxTdGF0ZTogTDEwblN0YXRlID0ge1xuICBsb2NhbGU6ICdydScsXG4gIHdlZWtTdGFydHNPbjogMSxcbn07XG5cbmNvbnN0IGwxMG4gPSAoc3RhdGUgPSBpbml0aWFsU3RhdGUsIGFjdGlvbjogTG9jYWxlQWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIEFDVElPTl9UWVBFLlNFVF9MT0NBTEU6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgLy8gSGFjayBmb3Igc2VyYmlhbiBsb2NhbGUsIGJlY2F1c2UgZGVmYXVsdCBEYXRlVGltZUZvcm1hdGUgZm9yIHNyIGxvY2FsZSBpcyBDeXJpbGxpYy4gV2UgbmVlZCBMYXRpbiB2ZXJzaW9uLlxuICAgICAgICBsb2NhbGU6IGFjdGlvbi5sb2NhbGUgPT09ICdzcicgPyAnc3ItTGF0bicgOiBhY3Rpb24ubG9jYWxlLFxuICAgICAgICB3ZWVrU3RhcnRzT246IGxvY2FsZXNTdGFydHNXaXRoU3VuZGF5LmluY2x1ZGVzKGFjdGlvbi5sb2NhbGUpXG4gICAgICAgICAgPyBXZWVrU3RhcnRzT25UeXBlLlN1blxuICAgICAgICAgIDogV2Vla1N0YXJ0c09uVHlwZS5Nb24sXG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGwxMG47XG4iLCJleHBvcnQgZW51bSBBQ1RJT05fVFlQRSB7XG4gIFNFVF9BVklBX1NVR0dFU1QgPSAnU0VUX0FWSUFfU1VHR0VTVCcsXG59XG4iLCJpbXBvcnQgeyBTdWdnZXN0IH0gZnJvbSAnLi9wYXJzZXJzL3BhcnNlU3VnZ2VzdCc7XG5pbXBvcnQgeyBTdWdnZXN0QWN0aW9uIH0gZnJvbSAnLi9hY3Rpb25zL3NldFN1Z2dlc3QnO1xuaW1wb3J0IHsgQUNUSU9OX1RZUEUgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXZpYURlc3RpbmF0aW9uU3RhdGUge1xuICBzdWdnZXN0czogUmVjb3JkPHN0cmluZywgU3VnZ2VzdD47XG59XG5cbmNvbnN0IGluaXRpYWxTdGF0ZTogQXZpYURlc3RpbmF0aW9uU3RhdGUgPSB7XG4gIHN1Z2dlc3RzOiB7fSxcbn07XG5cbmNvbnN0IGF2aWFEZXN0aW5hdGlvbiA9IChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uOiBTdWdnZXN0QWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIEFDVElPTl9UWVBFLlNFVF9BVklBX1NVR0dFU1Q6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWdnZXN0czoge1xuICAgICAgICAgIC4uLnN0YXRlLnN1Z2dlc3RzLFxuICAgICAgICAgIFthY3Rpb24ucXVlcnldOiBhY3Rpb24uc3VnZ2VzdCxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYXZpYURlc3RpbmF0aW9uO1xuIiwiZXhwb3J0IGVudW0gQUNUSU9OX1RZUEUge1xuICBTRVRfVFJBTlNGRVJfU1VHR0VTVCA9ICdTRVRfVFJBTlNGRVJfU1VHR0VTVCcsXG59XG4iLCJpbXBvcnQgeyBTdWdnZXN0IH0gZnJvbSAnLi9wYXJzZXJzL3BhcnNlU3VnZ2VzdCc7XG5pbXBvcnQgeyBTdWdnZXN0QWN0aW9uIH0gZnJvbSAnLi9hY3Rpb25zL3NldFN1Z2dlc3QnO1xuaW1wb3J0IHsgQUNUSU9OX1RZUEUgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNmZXJEZXN0aW5hdGlvblN0YXRlIHtcbiAgc3VnZ2VzdHM6IFJlY29yZDxzdHJpbmcsIFN1Z2dlc3Q+O1xufVxuXG5jb25zdCBpbml0aWFsU3RhdGU6IFRyYW5zZmVyRGVzdGluYXRpb25TdGF0ZSA9IHtcbiAgc3VnZ2VzdHM6IHt9LFxufTtcblxuY29uc3QgdHJhbnNmZXJEZXN0aW5hdGlvbiA9IChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uOiBTdWdnZXN0QWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIEFDVElPTl9UWVBFLlNFVF9UUkFOU0ZFUl9TVUdHRVNUOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VnZ2VzdHM6IHtcbiAgICAgICAgICAuLi5zdGF0ZS5zdWdnZXN0cyxcbiAgICAgICAgICBbYWN0aW9uLnF1ZXJ5XTogYWN0aW9uLnN1Z2dlc3QsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHRyYW5zZmVyRGVzdGluYXRpb247XG4iLCJleHBvcnQgZW51bSBBQ1RJT05fVFlQRSB7XG4gIFNFVF9TVUdHRVNUID0gJ1NFVF9TVUdHRVNUJyxcbn1cbiIsImltcG9ydCB7IFN1Z2dlc3QgfSBmcm9tICcuL3BhcnNlcnMvcGFyc2VTdWdnZXN0JztcbmltcG9ydCB7IFN1Z2dlc3RBY3Rpb24gfSBmcm9tICcuL2FjdGlvbnMvc2V0U3VnZ2VzdCc7XG5pbXBvcnQgeyBBQ1RJT05fVFlQRSB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuZXhwb3J0IGludGVyZmFjZSBEZXN0aW5hdGlvblN0YXRlIHtcbiAgc3VnZ2VzdHM6IFJlY29yZDxzdHJpbmcsIFN1Z2dlc3Q+O1xufVxuXG5jb25zdCBpbml0aWFsU3RhdGU6IERlc3RpbmF0aW9uU3RhdGUgPSB7XG4gIHN1Z2dlc3RzOiB7fSxcbn07XG5cbmNvbnN0IGRlc3RpbmF0aW9uID0gKFxuICBzdGF0ZSA9IGluaXRpYWxTdGF0ZSxcbiAgYWN0aW9uOiBTdWdnZXN0QWN0aW9uXG4pOiBEZXN0aW5hdGlvblN0YXRlID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgQUNUSU9OX1RZUEUuU0VUX1NVR0dFU1Q6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWdnZXN0czoge1xuICAgICAgICAgIC4uLnN0YXRlLnN1Z2dlc3RzLFxuICAgICAgICAgIFthY3Rpb24ucXVlcnldOiBhY3Rpb24uc3VnZ2VzdCxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZGVzdGluYXRpb247XG4iLCJleHBvcnQgZW51bSBBQ1RJT05fVFlQRSB7XG4gIFNFVF9IT0xJREFZUyA9ICdTRVRfSE9MSURBWVMnLFxuICBTRVRfSE9MSURBWVNfTE9BRElORyA9ICdTRVRfSE9MSURBWVNfTE9BRElORycsXG59XG4iLCJpbXBvcnQgeyBBQ1RJT05fVFlQRSB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IEhvbGlkYXlzIH0gZnJvbSAnLi9wYXJzZXJzL3BhcnNlSG9saWRheXMnO1xuaW1wb3J0IHsgSG9saWRheXNBY3Rpb24gfSBmcm9tICcuL2FjdGlvbnMvc2V0SG9saWRheXMnO1xuaW1wb3J0IHsgTG9hZGluZ0FjdGlvbiB9IGZyb20gJy4vYWN0aW9ucy9zZXRMb2FkaW5nJztcblxuZXhwb3J0IGludGVyZmFjZSBIb2xpZGF5c1N0YXRlIHtcbiAgbGlzdDogSG9saWRheXMgfCBudWxsO1xuICBsb2FkaW5nOiBib29sZWFuO1xufVxuXG5jb25zdCBpbml0aWFsU3RhdGU6IEhvbGlkYXlzU3RhdGUgPSB7XG4gIGxpc3Q6IG51bGwsXG4gIGxvYWRpbmc6IGZhbHNlLFxufTtcblxuY29uc3QgaG9saWRheXMgPSAoXG4gIHN0YXRlID0gaW5pdGlhbFN0YXRlLFxuICBhY3Rpb246IEhvbGlkYXlzQWN0aW9uICYgTG9hZGluZ0FjdGlvblxuKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIEFDVElPTl9UWVBFLlNFVF9IT0xJREFZUzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxpc3Q6IGFjdGlvbi5saXN0IHx8IHN0YXRlLmxpc3QsXG4gICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgfTtcbiAgICBjYXNlIEFDVElPTl9UWVBFLlNFVF9IT0xJREFZU19MT0FESU5HOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGxvYWRpbmc6IGFjdGlvbi5sb2FkaW5nLFxuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBob2xpZGF5cztcbiIsImV4cG9ydCBlbnVtIEFDVElPTl9UWVBFIHtcbiAgU0VUX0NPVU5UUklFUyA9ICdTRVRfQ09VTlRSSUVTJyxcbiAgU0VUX0xPQURJTkcgPSAnU0VUX0xPQURJTkcnLFxuICBJTkNfVFJZX0NPVU5UID0gJ0lOQ19UUllfQ09VTlQnLFxufVxuXG5leHBvcnQgY29uc3QgUkVUUklFU19MSU1JVCA9IDEwO1xuIiwiaW1wb3J0IHsgQ291bnRyeSB9IGZyb20gJy4vcGFyc2Vycy9wYXJzZUNvdW50cmllcyc7XG5pbXBvcnQgeyBDb3VudHJpZXNBY3Rpb24gfSBmcm9tICcuL2FjdGlvbnMvc2V0Q291bnRyaWVzJztcbmltcG9ydCB7IExvYWRpbmdBY3Rpb24gfSBmcm9tICcuL2FjdGlvbnMvc2V0TG9hZGluZyc7XG5pbXBvcnQgeyBBQ1RJT05fVFlQRSB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuZXhwb3J0IGludGVyZmFjZSBDb3VudHJpZXNTdGF0ZSB7XG4gIGxpc3Q6IENvdW50cnlbXTtcbiAgbG9hZGluZzogYm9vbGVhbjtcbiAgdHJ5Q291bnQ6IG51bWJlcjtcbn1cblxuY29uc3QgaW5pdGlhbFN0YXRlOiBDb3VudHJpZXNTdGF0ZSA9IHtcbiAgbGlzdDogW10sXG4gIGxvYWRpbmc6IGZhbHNlLFxuICB0cnlDb3VudDogMCxcbn07XG5cbmNvbnN0IGNvdW50cmllcyA9IChcbiAgc3RhdGUgPSBpbml0aWFsU3RhdGUsXG4gIGFjdGlvbjogQ291bnRyaWVzQWN0aW9uICYgTG9hZGluZ0FjdGlvblxuKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIEFDVElPTl9UWVBFLlNFVF9DT1VOVFJJRVM6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgbGlzdDogYWN0aW9uLmNvdW50cmllcyxcbiAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICB9O1xuICAgIGNhc2UgQUNUSU9OX1RZUEUuU0VUX0xPQURJTkc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgbG9hZGluZzogYWN0aW9uLmxvYWRpbmcsXG4gICAgICB9O1xuICAgIGNhc2UgQUNUSU9OX1RZUEUuSU5DX1RSWV9DT1VOVDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICB0cnlDb3VudDogc3RhdGUudHJ5Q291bnQgKyAxLFxuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb3VudHJpZXM7XG4iLCJleHBvcnQgZW51bSBBQ1RJT05fVFlQRSB7XG4gIFNFVF9DSVRJWkVOU0hJUCA9ICdTRVRfQ0lUSVpFTlNISVAnLFxufVxuXG5leHBvcnQgY29uc3QgTE9DQUxfU1RPUkFHRV9LRVkgPSAnY2l0aXplbnNoaXAnO1xuIiwiaW1wb3J0IHsgQ2l0aXplbnNoaXBBY3Rpb24gfSBmcm9tICcuL2FjdGlvbnMvc2V0Q2l0aXplbnNoaXAnO1xuaW1wb3J0IHsgQ291bnRyeSB9IGZyb20gJy4uL2NvdW50cmllcy9wYXJzZXJzL3BhcnNlQ291bnRyaWVzJztcbmltcG9ydCB7IEFDVElPTl9UWVBFLCBMT0NBTF9TVE9SQUdFX0tFWSB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuZXhwb3J0IGludGVyZmFjZSBDaXRpemVuc2hpcFN0YXRlIHtcbiAgcG9wdWxhcjogQ291bnRyeVtdO1xuICB2YWx1ZTogQ291bnRyeSB8IG51bGw7XG59XG5cbmNvbnN0IGdldFN0b3JlZFZhbHVlID0gKCk6IENpdGl6ZW5zaGlwU3RhdGUgPT4ge1xuICBjb25zdCBkZWZhdWx0VmFsdWUgPSB7XG4gICAgcG9wdWxhcjogW10sXG4gICAgdmFsdWU6IG51bGwsXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBzdG9yZWRWYWx1ZSA9IEpTT04ucGFyc2UoXG4gICAgICBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShMT0NBTF9TVE9SQUdFX0tFWSkgfHwgJydcbiAgICApO1xuXG4gICAgcmV0dXJuIHN0b3JlZFZhbHVlIHx8IGRlZmF1bHRWYWx1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gIH1cbn07XG5cbmNvbnN0IHNldENpdGl6ZW5zaGlwSGFuZGxlciA9IChcbiAgc3RhdGU6IENpdGl6ZW5zaGlwU3RhdGUsXG4gIGNvdW50cnk6IENvdW50cnkgfCBudWxsXG4pOiBDaXRpemVuc2hpcFN0YXRlID0+IHtcbiAgaWYgKCFjb3VudHJ5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBvcHVsYXI6IHN0YXRlLnBvcHVsYXIsXG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICB9O1xuICB9XG5cbiAgaWYgKHN0YXRlLnBvcHVsYXIuc29tZSgoaXRlbSkgPT4gaXRlbS5jb2RlID09PSBjb3VudHJ5LmNvZGUpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBvcHVsYXI6IHN0YXRlLnBvcHVsYXIsXG4gICAgICB2YWx1ZTogY291bnRyeSxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwb3B1bGFyOiBbLi4uc3RhdGUucG9wdWxhciwgY291bnRyeV0uc2xpY2UoLTMpLFxuICAgIHZhbHVlOiBjb3VudHJ5LFxuICB9O1xufTtcblxuY29uc3QgY2l0aXplbnNoaXAgPSAoc3RhdGUgPSBnZXRTdG9yZWRWYWx1ZSgpLCBhY3Rpb246IENpdGl6ZW5zaGlwQWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIEFDVElPTl9UWVBFLlNFVF9DSVRJWkVOU0hJUDpcbiAgICAgIHJldHVybiBzZXRDaXRpemVuc2hpcEhhbmRsZXIoc3RhdGUsIGFjdGlvbi5jb3VudHJ5KTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjaXRpemVuc2hpcDtcbiIsImltcG9ydCB7IFNldHRpbmdzLCBTZXR0aW5nc0FjdGlvbiB9IGZyb20gJy4vYWN0aW9ucy9zZXRTZXR0aW5ncyc7XG5pbXBvcnQgeyBBQ1RJT05fVFlQRSB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuY29uc3QgaW5pdGlhbFN0YXRlOiBTZXR0aW5ncyA9IHt9O1xuXG5jb25zdCBzZXR0aW5ncyA9IChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uOiBTZXR0aW5nc0FjdGlvbikgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBBQ1RJT05fVFlQRS5TRVRfU0VUVElOR1M6XG4gICAgICByZXR1cm4gYWN0aW9uLnNldHRpbmdzO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNldHRpbmdzO1xuIiwiaW1wb3J0IHsgY29tYmluZVJlZHVjZXJzIH0gZnJvbSAncmVkdXgnO1xuXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi90aGVtZSc7XG5pbXBvcnQgbDEwbiBmcm9tICcuL2wxMG4nO1xuaW1wb3J0IGF2aWFEZXN0aW5hdGlvbiBmcm9tICcuL2F2aWFEZXN0aW5hdGlvbic7XG5pbXBvcnQgdHJhbnNmZXJEZXN0aW5hdGlvbiBmcm9tICcuL3RyYW5zZmVyRGVzdGluYXRpb24nO1xuaW1wb3J0IGRlc3RpbmF0aW9uIGZyb20gJy4vZGVzdGluYXRpb24nO1xuaW1wb3J0IGhvbGlkYXlzIGZyb20gJy4vaG9saWRheXMnO1xuaW1wb3J0IGNvdW50cmllcyBmcm9tICcuL2NvdW50cmllcyc7XG5pbXBvcnQgY2l0aXplbnNoaXAgZnJvbSAnLi9jaXRpemVuc2hpcCc7XG5pbXBvcnQgc2V0dGluZ3MgZnJvbSAnLi9zZXR0aW5ncyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbWJpbmVSZWR1Y2Vycyh7XG4gIHRoZW1lLFxuICBsMTBuLFxuICBhdmlhRGVzdGluYXRpb24sXG4gIHRyYW5zZmVyRGVzdGluYXRpb24sXG4gIGRlc3RpbmF0aW9uLFxuICBob2xpZGF5cyxcbiAgY291bnRyaWVzLFxuICBjaXRpemVuc2hpcCxcbiAgc2V0dGluZ3MsXG59KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZmluZFRhYmJhYmxlRGVzY2VuZGFudHM7XG4vKiFcbiAqIEFkYXB0ZWQgZnJvbSBqUXVlcnkgVUkgY29yZVxuICpcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgMjAxNCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vY2F0ZWdvcnkvdWktY29yZS9cbiAqL1xuXG52YXIgdGFiYmFibGVOb2RlID0gL2lucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b258b2JqZWN0LztcblxuZnVuY3Rpb24gaGlkZXNDb250ZW50cyhlbGVtZW50KSB7XG4gIHZhciB6ZXJvU2l6ZSA9IGVsZW1lbnQub2Zmc2V0V2lkdGggPD0gMCAmJiBlbGVtZW50Lm9mZnNldEhlaWdodCA8PSAwO1xuXG4gIC8vIElmIHRoZSBub2RlIGlzIGVtcHR5LCB0aGlzIGlzIGdvb2QgZW5vdWdoXG4gIGlmICh6ZXJvU2l6ZSAmJiAhZWxlbWVudC5pbm5lckhUTUwpIHJldHVybiB0cnVlO1xuXG4gIC8vIE90aGVyd2lzZSB3ZSBuZWVkIHRvIGNoZWNrIHNvbWUgc3R5bGVzXG4gIHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICByZXR1cm4gemVyb1NpemUgPyBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKFwib3ZlcmZsb3dcIikgIT09IFwidmlzaWJsZVwiIHx8XG4gIC8vIGlmICdvdmVyZmxvdzogdmlzaWJsZScgc2V0LCBjaGVjayBpZiB0aGVyZSBpcyBhY3R1YWxseSBhbnkgb3ZlcmZsb3dcbiAgZWxlbWVudC5zY3JvbGxXaWR0aCA8PSAwICYmIGVsZW1lbnQuc2Nyb2xsSGVpZ2h0IDw9IDAgOiBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKFwiZGlzcGxheVwiKSA9PSBcIm5vbmVcIjtcbn1cblxuZnVuY3Rpb24gdmlzaWJsZShlbGVtZW50KSB7XG4gIHZhciBwYXJlbnRFbGVtZW50ID0gZWxlbWVudDtcbiAgd2hpbGUgKHBhcmVudEVsZW1lbnQpIHtcbiAgICBpZiAocGFyZW50RWxlbWVudCA9PT0gZG9jdW1lbnQuYm9keSkgYnJlYWs7XG4gICAgaWYgKGhpZGVzQ29udGVudHMocGFyZW50RWxlbWVudCkpIHJldHVybiBmYWxzZTtcbiAgICBwYXJlbnRFbGVtZW50ID0gcGFyZW50RWxlbWVudC5wYXJlbnROb2RlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBmb2N1c2FibGUoZWxlbWVudCwgaXNUYWJJbmRleE5vdE5hTikge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gIHZhciByZXMgPSB0YWJiYWJsZU5vZGUudGVzdChub2RlTmFtZSkgJiYgIWVsZW1lbnQuZGlzYWJsZWQgfHwgKG5vZGVOYW1lID09PSBcImFcIiA/IGVsZW1lbnQuaHJlZiB8fCBpc1RhYkluZGV4Tm90TmFOIDogaXNUYWJJbmRleE5vdE5hTik7XG4gIHJldHVybiByZXMgJiYgdmlzaWJsZShlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gdGFiYmFibGUoZWxlbWVudCkge1xuICB2YXIgdGFiSW5kZXggPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcInRhYmluZGV4XCIpO1xuICBpZiAodGFiSW5kZXggPT09IG51bGwpIHRhYkluZGV4ID0gdW5kZWZpbmVkO1xuICB2YXIgaXNUYWJJbmRleE5hTiA9IGlzTmFOKHRhYkluZGV4KTtcbiAgcmV0dXJuIChpc1RhYkluZGV4TmFOIHx8IHRhYkluZGV4ID49IDApICYmIGZvY3VzYWJsZShlbGVtZW50LCAhaXNUYWJJbmRleE5hTik7XG59XG5cbmZ1bmN0aW9uIGZpbmRUYWJiYWJsZURlc2NlbmRhbnRzKGVsZW1lbnQpIHtcbiAgcmV0dXJuIFtdLnNsaWNlLmNhbGwoZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiKlwiKSwgMCkuZmlsdGVyKHRhYmJhYmxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmFzc2VydE5vZGVMaXN0ID0gYXNzZXJ0Tm9kZUxpc3Q7XG5leHBvcnRzLnNldEVsZW1lbnQgPSBzZXRFbGVtZW50O1xuZXhwb3J0cy52YWxpZGF0ZUVsZW1lbnQgPSB2YWxpZGF0ZUVsZW1lbnQ7XG5leHBvcnRzLmhpZGUgPSBoaWRlO1xuZXhwb3J0cy5zaG93ID0gc2hvdztcbmV4cG9ydHMuZG9jdW1lbnROb3RSZWFkeU9yU1NSVGVzdGluZyA9IGRvY3VtZW50Tm90UmVhZHlPclNTUlRlc3Rpbmc7XG5leHBvcnRzLnJlc2V0Rm9yVGVzdGluZyA9IHJlc2V0Rm9yVGVzdGluZztcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZShcIndhcm5pbmdcIik7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9zYWZlSFRNTEVsZW1lbnQgPSByZXF1aXJlKFwiLi9zYWZlSFRNTEVsZW1lbnRcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBnbG9iYWxFbGVtZW50ID0gbnVsbDtcblxuZnVuY3Rpb24gYXNzZXJ0Tm9kZUxpc3Qobm9kZUxpc3QsIHNlbGVjdG9yKSB7XG4gIGlmICghbm9kZUxpc3QgfHwgIW5vZGVMaXN0Lmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcInJlYWN0LW1vZGFsOiBObyBlbGVtZW50cyB3ZXJlIGZvdW5kIGZvciBzZWxlY3RvciBcIiArIHNlbGVjdG9yICsgXCIuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNldEVsZW1lbnQoZWxlbWVudCkge1xuICB2YXIgdXNlRWxlbWVudCA9IGVsZW1lbnQ7XG4gIGlmICh0eXBlb2YgdXNlRWxlbWVudCA9PT0gXCJzdHJpbmdcIiAmJiBfc2FmZUhUTUxFbGVtZW50LmNhblVzZURPTSkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodXNlRWxlbWVudCk7XG4gICAgYXNzZXJ0Tm9kZUxpc3QoZWwsIHVzZUVsZW1lbnQpO1xuICAgIHVzZUVsZW1lbnQgPSBcImxlbmd0aFwiIGluIGVsID8gZWxbMF0gOiBlbDtcbiAgfVxuICBnbG9iYWxFbGVtZW50ID0gdXNlRWxlbWVudCB8fCBnbG9iYWxFbGVtZW50O1xuICByZXR1cm4gZ2xvYmFsRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVFbGVtZW50KGFwcEVsZW1lbnQpIHtcbiAgaWYgKCFhcHBFbGVtZW50ICYmICFnbG9iYWxFbGVtZW50KSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgW1wicmVhY3QtbW9kYWw6IEFwcCBlbGVtZW50IGlzIG5vdCBkZWZpbmVkLlwiLCBcIlBsZWFzZSB1c2UgYE1vZGFsLnNldEFwcEVsZW1lbnQoZWwpYCBvciBzZXQgYGFwcEVsZW1lbnQ9e2VsfWAuXCIsIFwiVGhpcyBpcyBuZWVkZWQgc28gc2NyZWVuIHJlYWRlcnMgZG9uJ3Qgc2VlIG1haW4gY29udGVudFwiLCBcIndoZW4gbW9kYWwgaXMgb3BlbmVkLiBJdCBpcyBub3QgcmVjb21tZW5kZWQsIGJ1dCB5b3UgY2FuIG9wdC1vdXRcIiwgXCJieSBzZXR0aW5nIGBhcmlhSGlkZUFwcD17ZmFsc2V9YC5cIl0uam9pbihcIiBcIikpO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGhpZGUoYXBwRWxlbWVudCkge1xuICBpZiAodmFsaWRhdGVFbGVtZW50KGFwcEVsZW1lbnQpKSB7XG4gICAgKGFwcEVsZW1lbnQgfHwgZ2xvYmFsRWxlbWVudCkuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiwgXCJ0cnVlXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNob3coYXBwRWxlbWVudCkge1xuICBpZiAodmFsaWRhdGVFbGVtZW50KGFwcEVsZW1lbnQpKSB7XG4gICAgKGFwcEVsZW1lbnQgfHwgZ2xvYmFsRWxlbWVudCkucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gZG9jdW1lbnROb3RSZWFkeU9yU1NSVGVzdGluZygpIHtcbiAgZ2xvYmFsRWxlbWVudCA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIHJlc2V0Rm9yVGVzdGluZygpIHtcbiAgZ2xvYmFsRWxlbWVudCA9IG51bGw7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8vIFRyYWNrcyBwb3J0YWxzIHRoYXQgYXJlIG9wZW4gYW5kIGVtaXRzIGV2ZW50cyB0byBzdWJzY3JpYmVyc1xuXG52YXIgUG9ydGFsT3Blbkluc3RhbmNlcyA9IGZ1bmN0aW9uIFBvcnRhbE9wZW5JbnN0YW5jZXMoKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcnRhbE9wZW5JbnN0YW5jZXMpO1xuXG4gIHRoaXMucmVnaXN0ZXIgPSBmdW5jdGlvbiAob3Blbkluc3RhbmNlKSB7XG4gICAgaWYgKF90aGlzLm9wZW5JbnN0YW5jZXMuaW5kZXhPZihvcGVuSW5zdGFuY2UpICE9PSAtMSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oXCJSZWFjdC1Nb2RhbDogQ2Fubm90IHJlZ2lzdGVyIG1vZGFsIGluc3RhbmNlIHRoYXQncyBhbHJlYWR5IG9wZW5cIik7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIF90aGlzLm9wZW5JbnN0YW5jZXMucHVzaChvcGVuSW5zdGFuY2UpO1xuICAgIF90aGlzLmVtaXQoXCJyZWdpc3RlclwiKTtcbiAgfTtcblxuICB0aGlzLmRlcmVnaXN0ZXIgPSBmdW5jdGlvbiAob3Blbkluc3RhbmNlKSB7XG4gICAgdmFyIGluZGV4ID0gX3RoaXMub3Blbkluc3RhbmNlcy5pbmRleE9mKG9wZW5JbnN0YW5jZSk7XG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oXCJSZWFjdC1Nb2RhbDogVW5hYmxlIHRvIGRlcmVnaXN0ZXIgXCIgKyBvcGVuSW5zdGFuY2UgKyBcIiBhcyBcIiArIFwiaXQgd2FzIG5ldmVyIHJlZ2lzdGVyZWRcIik7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIF90aGlzLm9wZW5JbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICBfdGhpcy5lbWl0KFwiZGVyZWdpc3RlclwiKTtcbiAgfTtcblxuICB0aGlzLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIF90aGlzLnN1YnNjcmliZXJzLnB1c2goY2FsbGJhY2spO1xuICB9O1xuXG4gIHRoaXMuZW1pdCA9IGZ1bmN0aW9uIChldmVudFR5cGUpIHtcbiAgICBfdGhpcy5zdWJzY3JpYmVycy5mb3JFYWNoKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICByZXR1cm4gc3Vic2NyaWJlcihldmVudFR5cGUsXG4gICAgICAvLyBzaGFsbG93IGNvcHkgdG8gYXZvaWQgYWNjaWRlbnRhbCBtdXRhdGlvblxuICAgICAgX3RoaXMub3Blbkluc3RhbmNlcy5zbGljZSgpKTtcbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLm9wZW5JbnN0YW5jZXMgPSBbXTtcbiAgdGhpcy5zdWJzY3JpYmVycyA9IFtdO1xufTtcblxudmFyIHBvcnRhbE9wZW5JbnN0YW5jZXMgPSBuZXcgUG9ydGFsT3Blbkluc3RhbmNlcygpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBwb3J0YWxPcGVuSW5zdGFuY2VzO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBidWlsZEZ1bGxQYXRoID0gcmVxdWlyZSgnLi4vY29yZS9idWlsZEZ1bGxQYXRoJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgfHwgJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHZhciBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHZhciB0aW1lb3V0RXJyb3JNZXNzYWdlID0gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJztcbiAgICAgIGlmIChjb25maWcudGltZW91dEVycm9yTWVzc2FnZSkge1xuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IodGltZW91dEVycm9yTWVzc2FnZSwgY29uZmlnLCAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgdmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xuXG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgdmFyIHZhbHVlRnJvbUNvbmZpZzJLZXlzID0gWyd1cmwnLCAnbWV0aG9kJywgJ3BhcmFtcycsICdkYXRhJ107XG4gIHZhciBtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cyA9IFsnaGVhZGVycycsICdhdXRoJywgJ3Byb3h5J107XG4gIHZhciBkZWZhdWx0VG9Db25maWcyS2V5cyA9IFtcbiAgICAnYmFzZVVSTCcsICd1cmwnLCAndHJhbnNmb3JtUmVxdWVzdCcsICd0cmFuc2Zvcm1SZXNwb25zZScsICdwYXJhbXNTZXJpYWxpemVyJyxcbiAgICAndGltZW91dCcsICd3aXRoQ3JlZGVudGlhbHMnLCAnYWRhcHRlcicsICdyZXNwb25zZVR5cGUnLCAneHNyZkNvb2tpZU5hbWUnLFxuICAgICd4c3JmSGVhZGVyTmFtZScsICdvblVwbG9hZFByb2dyZXNzJywgJ29uRG93bmxvYWRQcm9ncmVzcycsXG4gICAgJ21heENvbnRlbnRMZW5ndGgnLCAndmFsaWRhdGVTdGF0dXMnLCAnbWF4UmVkaXJlY3RzJywgJ2h0dHBBZ2VudCcsXG4gICAgJ2h0dHBzQWdlbnQnLCAnY2FuY2VsVG9rZW4nLCAnc29ja2V0UGF0aCdcbiAgXTtcblxuICB1dGlscy5mb3JFYWNoKHZhbHVlRnJvbUNvbmZpZzJLZXlzLCBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKHByb3ApIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cywgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSB1dGlscy5kZWVwTWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gdXRpbHMuZGVlcE1lcmdlKGNvbmZpZzFbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChkZWZhdWx0VG9Db25maWcyS2V5cywgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBheGlvc0tleXMgPSB2YWx1ZUZyb21Db25maWcyS2V5c1xuICAgIC5jb25jYXQobWVyZ2VEZWVwUHJvcGVydGllc0tleXMpXG4gICAgLmNvbmNhdChkZWZhdWx0VG9Db25maWcyS2V5cyk7XG5cbiAgdmFyIG90aGVyS2V5cyA9IE9iamVjdFxuICAgIC5rZXlzKGNvbmZpZzIpXG4gICAgLmZpbHRlcihmdW5jdGlvbiBmaWx0ZXJBeGlvc0tleXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXhpb3NLZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTE7XG4gICAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChvdGhlcktleXMsIGZ1bmN0aW9uIG90aGVyS2V5c0RlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMVtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzFbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcInRvb2x0aXBcIjpcIlRvb2x0aXBDb250ZW50X190b29sdGlwLS0zY2ttZVwiLFwidG9vbHRpcF9zaG93blwiOlwiVG9vbHRpcENvbnRlbnRfX3Rvb2x0aXBfc2hvd24tLTNkem04XCIsXCJ0b29sdGlwV3JhcHBlclwiOlwiVG9vbHRpcENvbnRlbnRfX3Rvb2x0aXBXcmFwcGVyLS0yVDVVMVwiLFwidG9vbHRpcFdyYXBwZXJfdGl0bGVkXCI6XCJUb29sdGlwQ29udGVudF9fdG9vbHRpcFdyYXBwZXJfdGl0bGVkLS0yRDdWTFwiLFwidG9vbHRpcFVuZGVybGF5XCI6XCJUb29sdGlwQ29udGVudF9fdG9vbHRpcFVuZGVybGF5LS0yU1lyaVwiLFwidG9vbHRpcFVuZGVybGF5X3Bvc2l0aW9uX3RvcC1zdGFydFwiOlwiVG9vbHRpcENvbnRlbnRfX3Rvb2x0aXBVbmRlcmxheV9wb3NpdGlvbl90b3Atc3RhcnQtLTJmQ2JlXCIsXCJ0b29sdGlwVW5kZXJsYXlfcG9zaXRpb25fdG9wXCI6XCJUb29sdGlwQ29udGVudF9fdG9vbHRpcFVuZGVybGF5X3Bvc2l0aW9uX3RvcC0tSkc0Q3pcIixcInRvb2x0aXBVbmRlcmxheV9wb3NpdGlvbl90b3AtZW5kXCI6XCJUb29sdGlwQ29udGVudF9fdG9vbHRpcFVuZGVybGF5X3Bvc2l0aW9uX3RvcC1lbmQtLTJvSWVFXCIsXCJ0b29sdGlwVW5kZXJsYXlfcG9zaXRpb25fcmlnaHQtc3RhcnRcIjpcIlRvb2x0aXBDb250ZW50X190b29sdGlwVW5kZXJsYXlfcG9zaXRpb25fcmlnaHQtc3RhcnQtLTIxY3FuXCIsXCJ0b29sdGlwVW5kZXJsYXlfcG9zaXRpb25fcmlnaHRcIjpcIlRvb2x0aXBDb250ZW50X190b29sdGlwVW5kZXJsYXlfcG9zaXRpb25fcmlnaHQtLTNsaWM0XCIsXCJ0b29sdGlwVW5kZXJsYXlfcG9zaXRpb25fcmlnaHQtZW5kXCI6XCJUb29sdGlwQ29udGVudF9fdG9vbHRpcFVuZGVybGF5X3Bvc2l0aW9uX3JpZ2h0LWVuZC0taGdTR2ZcIixcInRvb2x0aXBVbmRlcmxheV9wb3NpdGlvbl9sZWZ0LXN0YXJ0XCI6XCJUb29sdGlwQ29udGVudF9fdG9vbHRpcFVuZGVybGF5X3Bvc2l0aW9uX2xlZnQtc3RhcnQtLTM3d1psXCIsXCJ0b29sdGlwVW5kZXJsYXlfcG9zaXRpb25fbGVmdFwiOlwiVG9vbHRpcENvbnRlbnRfX3Rvb2x0aXBVbmRlcmxheV9wb3NpdGlvbl9sZWZ0LS1wVVRTZ1wiLFwidG9vbHRpcFVuZGVybGF5X3Bvc2l0aW9uX2xlZnQtZW5kXCI6XCJUb29sdGlwQ29udGVudF9fdG9vbHRpcFVuZGVybGF5X3Bvc2l0aW9uX2xlZnQtZW5kLS05TnVDR1wiLFwidG9vbHRpcFVuZGVybGF5X3Bvc2l0aW9uX2JvdHRvbS1zdGFydFwiOlwiVG9vbHRpcENvbnRlbnRfX3Rvb2x0aXBVbmRlcmxheV9wb3NpdGlvbl9ib3R0b20tc3RhcnQtLVJBZ3h0XCIsXCJ0b29sdGlwVW5kZXJsYXlfcG9zaXRpb25fYm90dG9tXCI6XCJUb29sdGlwQ29udGVudF9fdG9vbHRpcFVuZGVybGF5X3Bvc2l0aW9uX2JvdHRvbS0tMWpybW1cIixcInRvb2x0aXBVbmRlcmxheV9wb3NpdGlvbl9ib3R0b20tZW5kXCI6XCJUb29sdGlwQ29udGVudF9fdG9vbHRpcFVuZGVybGF5X3Bvc2l0aW9uX2JvdHRvbS1lbmQtLTJ4b3daXCIsXCJ0b29sdGlwVGl0bGVcIjpcIlRvb2x0aXBDb250ZW50X190b29sdGlwVGl0bGUtLTFqUzVZXCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJyb290XCI6XCJNb2RhbF9fcm9vdC0tNWdIUG9cIixcIm92ZXJsYXlcIjpcIk1vZGFsX19vdmVybGF5LS0zaFZLNlwiLFwib3ZlcmxheV9wb3B1cFwiOlwiTW9kYWxfX292ZXJsYXlfcG9wdXAtLWNMalozXCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJjYXJkXCI6XCJDYXJkX19jYXJkLS10eVU0Q1wiLFwiY2FyZF9wYWRkaW5nX3hzXCI6XCJDYXJkX19jYXJkX3BhZGRpbmdfeHMtLTJVa2N4XCIsXCJjYXJkX3BhZGRpbmdfc1wiOlwiQ2FyZF9fY2FyZF9wYWRkaW5nX3MtLVFjZGhIXCIsXCJjYXJkX3BhZGRpbmdfbVwiOlwiQ2FyZF9fY2FyZF9wYWRkaW5nX20tLTF6ZDZpXCIsXCJjYXJkX3NoYWRvd1NpemVfc1wiOlwiQ2FyZF9fY2FyZF9zaGFkb3dTaXplX3MtLTNVMF81XCIsXCJjYXJkX3NoYWRvd1NpemVfbVwiOlwiQ2FyZF9fY2FyZF9zaGFkb3dTaXplX20tLTEySFZIXCIsXCJjYXJkX3NoYWRvd1NpemVfbFwiOlwiQ2FyZF9fY2FyZF9zaGFkb3dTaXplX2wtLTFneDVpXCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJoaW50XCI6XCJIaW50X19oaW50LS0xSTAzY1wiLFwiaGludF92YXJpYW50X3JlZ3VsYXJcIjpcIkhpbnRfX2hpbnRfdmFyaWFudF9yZWd1bGFyLS0xYkluYlwiLFwiaGludF92YXJpYW50X21pbmlcIjpcIkhpbnRfX2hpbnRfdmFyaWFudF9taW5pLS1aMWt5dVwiLFwiaGludFRpdGxlXCI6XCJIaW50X19oaW50VGl0bGUtLTFLTjRMXCIsXCJtb2JpbGVDbG9zZUJ1dHRvblwiOlwiSGludF9fbW9iaWxlQ2xvc2VCdXR0b24tLTJjcW9HXCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJ0aXRsZVdyYXBwZXJcIjpcIklucHV0X190aXRsZVdyYXBwZXItLTI5UEd4XCIsXCJ0aXRsZVwiOlwiSW5wdXRfX3RpdGxlLS1RX0ZZa1wiLFwid3JhcHBlclwiOlwiSW5wdXRfX3dyYXBwZXItLTNSNUw2XCIsXCJ3cmFwcGVyX3dpZGVcIjpcIklucHV0X193cmFwcGVyX3dpZGUtLWFjS1BnXCIsXCJsYWJlbFwiOlwiSW5wdXRfX2xhYmVsLS0zNWtqTVwiLFwibGFiZWxfc2l6ZV94c1wiOlwiSW5wdXRfX2xhYmVsX3NpemVfeHMtLTNPbU1HXCIsXCJsYWJlbF9zaXplX3NcIjpcIklucHV0X19sYWJlbF9zaXplX3MtLUN1NlRyXCIsXCJsYWJlbF9zaXplX21cIjpcIklucHV0X19sYWJlbF9zaXplX20tLTItc2NyXCIsXCJsYWJlbF9zaXplX2xcIjpcIklucHV0X19sYWJlbF9zaXplX2wtLTlwYmN3XCIsXCJsYWJlbF9oYXNFcnJvclwiOlwiSW5wdXRfX2xhYmVsX2hhc0Vycm9yLS0zSHZCalwiLFwiY29udHJvbFwiOlwiSW5wdXRfX2NvbnRyb2wtLXFqQ0FSXCIsXCJsYWJlbF9kaXNhYmxlZFwiOlwiSW5wdXRfX2xhYmVsX2Rpc2FibGVkLS0zTFNhMFwiLFwibGFiZWxfcmVxdWlyZWRcIjpcIklucHV0X19sYWJlbF9yZXF1aXJlZC0tMzBtcHpcIixcImxhYmVsX3JlYWRPbmx5XCI6XCJJbnB1dF9fbGFiZWxfcmVhZE9ubHktLTIzbUd1XCIsXCJsYWJlbF9mb2N1c2VkXCI6XCJJbnB1dF9fbGFiZWxfZm9jdXNlZC0tMlFpdGZcIixcImNvbnRyb2xfaGFzUGxhY2Vob2xkZXJcIjpcIklucHV0X19jb250cm9sX2hhc1BsYWNlaG9sZGVyLS0zTm52MVwiLFwiY29udHJvbExpbmVcIjpcIklucHV0X19jb250cm9sTGluZS0tMlJ0WU5cIixcImNvbnRyb2xMaW5lX3Jlc2VydmVJY29uUGxhY2VcIjpcIklucHV0X19jb250cm9sTGluZV9yZXNlcnZlSWNvblBsYWNlLS0zdzMtX1wiLFwiaGludFwiOlwiSW5wdXRfX2hpbnQtLTFwWjNSXCIsXCJpY29uXCI6XCJJbnB1dF9faWNvbi0tMjNmd01cIixcImljb25fY2xpY2thYmxlXCI6XCJJbnB1dF9faWNvbl9jbGlja2FibGUtLTh5SUp4XCIsXCJlcnJvclwiOlwiSW5wdXRfX2Vycm9yLS03WUg2LVwifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1widGl0bGVcIjpcIlRpdGxlX190aXRsZS0tMjdCMGNcIixcInRpdGxlX3NpemVfc1wiOlwiVGl0bGVfX3RpdGxlX3NpemVfcy0td2tqd2dcIixcInRpdGxlX3NpemVfbVwiOlwiVGl0bGVfX3RpdGxlX3NpemVfbS0tMmlFVzdcIixcInRpdGxlX3NpemVfbFwiOlwiVGl0bGVfX3RpdGxlX3NpemVfbC0tMlEzZDFcIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImJ1dHRvbkljb25cIjpcIkJ1dHRvbkljb25fX2J1dHRvbkljb24tLXNCck5kXCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJkcm9wZG93blwiOlwiRHJvcGRvd25fX2Ryb3Bkb3duLS0yVkpLclwiLFwiZHJvcGRvd25fZnVsbFdpZHRoXCI6XCJEcm9wZG93bl9fZHJvcGRvd25fZnVsbFdpZHRoLS0yaUJDZ1wiLFwiZXhpdGluZ1wiOlwiRHJvcGRvd25fX2V4aXRpbmctLTJrSHYyXCIsXCJleGl0ZWRcIjpcIkRyb3Bkb3duX19leGl0ZWQtLTFDU0lRXCIsXCJlbnRlcmVkXCI6XCJEcm9wZG93bl9fZW50ZXJlZC0tM1JfMEFcIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImNvbnRleHRNZW51XCI6XCJDb250ZXh0TWVudV9fY29udGV4dE1lbnUtLTFONFFSXCIsXCJkcm9wZG93blwiOlwiQ29udGV4dE1lbnVfX2Ryb3Bkb3duLS0yRUIxOVwiLFwidGl0bGVcIjpcIkNvbnRleHRNZW51X190aXRsZS0tdWpkTkNcIixcIm9wdGlvbkNvbnRhaW5lclwiOlwiQ29udGV4dE1lbnVfX29wdGlvbkNvbnRhaW5lci0tWVVYOVNcIixcIm9wdGlvbkl0ZW1cIjpcIkNvbnRleHRNZW51X19vcHRpb25JdGVtLS0xRk82WlwiLFwiZG90c0NvbnRhaW5lclwiOlwiQ29udGV4dE1lbnVfX2RvdHNDb250YWluZXItLTFfbUZNXCIsXCJjbG9zZUJ1dHRvblwiOlwiQ29udGV4dE1lbnVfX2Nsb3NlQnV0dG9uLS0zX0ZWS1wifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiYnV0dG9uXCI6XCJMYW5ndWFnZVN3aXRjaGVyX19idXR0b24tLTFZRml0XCIsXCJsYWJlbFwiOlwiTGFuZ3VhZ2VTd2l0Y2hlcl9fbGFiZWwtLTY4NHVyXCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJpbm5lclwiOlwiTG9nb19faW5uZXItLTJwZFpEXCIsXCJsb2dvXCI6XCJMb2dvX19sb2dvLS0zeXRCbVwiLFwibG9nb19zaXplX3NcIjpcIkxvZ29fX2xvZ29fc2l6ZV9zLS03aDRPblwiLFwibG9nb19zaXplX21cIjpcIkxvZ29fX2xvZ29fc2l6ZV9tLS0xTzg4ZVwiLFwibG9nb19zaXplX2xcIjpcIkxvZ29fX2xvZ29fc2l6ZV9sLS0xWkwyQVwifTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7IiwiaW1wb3J0IHsgQUNUSU9OX1RZUEUgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRoZW1lIHtcbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRoZW1lQWN0aW9uIHtcbiAgdGhlbWU6IFRoZW1lO1xuICB0eXBlOiBBQ1RJT05fVFlQRTtcbn1cblxuY29uc3Qgc2V0VGhlbWUgPSAodGhlbWU6IFRoZW1lKTogVGhlbWVBY3Rpb24gPT4ge1xuICByZXR1cm4ge1xuICAgIHRoZW1lLFxuICAgIHR5cGU6IEFDVElPTl9UWVBFLlNFVF9USEVNRSxcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNldFRoZW1lO1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAncGFsZXR0ZS1ibGFjayc6ICcjMmQzMTM3JyxcbiAgJ3BhbGV0dGUtZGFyayc6ICcjODY4Njg2JyxcbiAgJ3BhbGV0dGUtZ3JheSc6ICcjYzhjOGM4JyxcbiAgJ3BhbGV0dGUtbGlnaHQnOiAnI2U1ZTVlNScsXG4gICdwYWxldHRlLXVsaWdodCc6ICcjZjRmNGY0JyxcbiAgJ3BhbGV0dGUtd2hpdGUnOiAnI2ZmZmZmZicsXG4gICdwYWxldHRlLWRpc2FibGVkJzogJyNhZmFmYWYnLFxuICAncGFsZXR0ZS1tYWluJzogJyNmZmRjODInLFxuICAncGFsZXR0ZS1zZWMnOiAnI2U1ZTVlNScsXG4gIGJvcmRlcjogJ3JnYmEoNDUsIDQ5LCA1NSwgMC4xMiknLFxuICAnZGlzYWJsZWQtb3ZlcmxheSc6ICdyZ2JhKDI0NiwgMjQ2LCAyNDYsIDAuOCknLFxuICAnZGlzYWJsZWQtZmlsdGVyJzogJ2dyYXlzY2FsZSgwLjUpIG9wYWNpdHkoMC40KScsXG4gICdoZWFkZXItYmcnOiAnI2ZmZmZmZicsXG4gICdoZWFkZXItYmctc2Vjb25kYXJ5JzogJyNmOWY5ZjknLFxuICAnaGVhZGVyLW1haW4nOiAnIzg2ODY4NicsXG4gICdoZWFkZXItc2Vjb25kYXJ5JzogJyNjOGM4YzgnLFxuICAnaGVhZGVyLW1lbnUtdHlwbyc6ICcjODY4Njg2JyxcbiAgJ2hlYWRlci1hY3RpdmUnOiAnIzJkMzEzNycsXG4gICdidXR0b24tcHJpbWFyeS1iZyc6ICcjZmZkYzgyJyxcbiAgJ2J1dHRvbi1wcmltYXJ5LXR5cG8nOiAnIzJkMzEzNycsXG4gICdidXR0b24tcHJpbWFyeS1ob3Zlci1iZyc6ICcjZmZkMjZkJyxcbiAgJ2J1dHRvbi1wcmltYXJ5LWFjdGl2ZS1iZyc6ICcjZmZjYjVlJyxcbiAgJ2J1dHRvbi1zZWNvbmRhcnktYmcnOiAnI2U1ZTVlNScsXG4gICdidXR0b24tc2Vjb25kYXJ5LXR5cG8nOiAnIzJkMzEzNycsXG4gICdidXR0b24tc2Vjb25kYXJ5LWhvdmVyLWJnJzogJyNjOGM4YzgnLFxuICAnYnV0dG9uLXNlY29uZGFyeS1hY3RpdmUtYmcnOiAnI2IwYjBiMCcsXG4gICdidXR0b24tb3V0bGluZS1ib3JkZXInOiAncmdiYSg0NSwgNDksIDU1LCAwLjE1KScsXG4gICdidXR0b24tb3V0bGluZS10eXBvJzogJyMyZDMxMzcnLFxuICAnYnV0dG9uLW91dGxpbmUtaG92ZXItYm9yZGVyJzogJyNmZmQyNmQnLFxuICAnYnV0dG9uLW91dGxpbmUtYWN0aXZlLWJvcmRlcic6ICcjZmZjYjVlJyxcbiAgJ211bHRpYnV0dG9uLWJvcmRlcic6ICdyZ2JhKDQ1LCA0OSwgNTUsIDAuMTIpJyxcbiAgJ211bHRpYnV0dG9uLW9uLWJnJzogJyNmZmZmZmYnLFxuICAnbXVsdGlidXR0b24tb24tdHlwbyc6ICcjMmQzMTM3JyxcbiAgJ211bHRpYnV0dG9uLW9mZi1iZyc6ICcjZjRmNGY0JyxcbiAgJ211bHRpYnV0dG9uLW9mZi10eXBvJzogJyM4Njg2ODYnLFxuICAnZmllbGQtYmcnOiAnI2ZmZmZmZicsXG4gICdmaWVsZC10eXBvJzogJyMyZDMxMzcnLFxuICAnZmllbGQtcGxhY2Vob2xkZXInOiAnI2FmYWZhZicsXG4gICdmaWVsZC1sYWJlbCc6ICcjMmQzMTM3JyxcbiAgJ2ZpZWxkLWJvcmRlcic6ICdyZ2JhKDQ1LCA0OSwgNTUsIDAuMTIpJyxcbiAgJ2ZpZWxkLWhvdmVyLWJvcmRlcic6ICdyZ2JhKDQ1LCA0OSwgNTUsIDAuNCknLFxuICAnZmllbGQtYWN0aXZlLWJvcmRlcic6ICdyZ2JhKDQ1LCA0OSwgNTUsIDAuMTUpJyxcbiAgJ2Ryb3Bkb3duLXNlbGVjdGVkLWJnJzogJ3JnYmEoMjU1LCAyMjAsIDEzMCwgMC40KScsXG4gICdib3gtYm9yZGVyJzogJ3JnYmEoNDUsIDQ5LCA1NSwgMC4xMiknLFxuICAnYm94LWJnJzogJyNmZmZmZmYnLFxuICAnYm94LW9uLWJnJzogJyNmZmRjODInLFxuICAnYm94LW9uLXR5cG8nOiAnIzJkMzEzNycsXG4gICdib3gtaG92ZXItYm9yZGVyJzogJyNmZmQyNmQnLFxuICAnYm94LWFjdGl2ZS1iZyc6ICcjMmQzMTM3JyxcbiAgJ2JyYW5kLWxvZ28tcGFydG5lcic6ICcnLFxuICAnY2FsZW5kYXItaG9saWRheS1jb2xvci1lZGdlJzogJyNiZTAwMDAnLFxuICAnY2FsZW5kYXItaG9saWRheS1jb2xvcic6ICcjYmUwMDAwJyxcbiAgbGluazogJyM0MDg2ZTQnLFxuICAnbGluay1ob3Zlcic6ICcjY2UyMTIxJyxcbiAgJ2xpbmstYWN0aXZlJzogJyNjZTIxMjEnLFxuICB0ZXh0OiAnIzJkMzEzNycsXG4gICd0ZXh0LXNlY29uZGFyeSc6ICcjODY4Njg2JyxcbiAgJ3RleHQtYWx0JzogJyNmZmZmZmYnLFxuICAnYmxvY2stYmcnOiAnI2ZmZmZmZicsXG4gICdibG9jay1iZy1zZWNvbmRhcnknOiAnI2Y0ZjRmNCcsXG4gICdibG9jay1iZy1hbHQnOiAnIzJkMzEzNycsXG4gIHNoYWRvdzogJ3JnYmEoNDUsIDQ5LCA1NSwgMC4zKScsXG4gIGFsZXJ0OiAnI2NlMjEyMScsXG4gICdhbGVydC1iZyc6ICdyZ2JhKDIwNiwgMzMsIDMzLCAwLjEpJyxcbiAgJ2FsZXJ0LW91dGxpbmUnOiAncmdiYSgyMDYsIDMzLCAzMywgMC40KScsXG4gIHN1Y2Nlc3M6ICcjNTNiMTI0JyxcbiAgJ3N1Y2Nlc3MtYmcnOiAncmdiYSg4MywgMTc1LCAzNiwgMC4xKScsXG4gICdoaWdobGlnaHQtYmcnOiAnI2ZmZjhlNicsXG4gICdmb2N1cy1vdXRsaW5lJzogJ3JnYmEoMjU1LCAyMjAsIDEzMCwgMC40KScsXG4gICdmaWRlbGl0eS1kcmVhbXMnOiAnI2ZmNjQ2NCcsXG4gICdmaWRlbGl0eS1yYXRlaGF3ay1wb2ludHMnOiAnIzQwODZlNCcsXG4gICdmaWRlbGl0eS16ZW4tcG9pbnRzJzogJyM1Yzc3Y2MnLFxuICAnZmlkZWxpdHktc2VnbWVudC1ibGFjayc6ICcjNDY0YTUwJyxcbiAgJ2ZpZGVsaXR5LXNlZ21lbnQtZ29sZCc6ICcjZmZjOTM3JyxcbiAgJ2ZpZGVsaXR5LXNlZ21lbnQtcGxhdGludW0nOiAnI2Q2Y2RjMCcsXG4gICdmaWRlbGl0eS1zZWdtZW50LXNpbHZlcic6ICcjYjNjNmQ4JyxcbiAgJ3NvY2lhbC1mYWNlYm9vay1jb2xvcic6ICcjMTM4MmZmJyxcbiAgJ3NvY2lhbC10ZWxlZ3JhbS1jb2xvcic6ICcjMjNhMmUzJyxcbiAgJ3NvY2lhbC12aWJlci1jb2xvcic6ICcjNjc1YmFjJyxcbiAgJ3NvY2lhbC1hcHBsZS1jb2xvcic6ICcjMmQzMTM3JyxcbiAgJ3otaW5kZXgtc3RhcnQnOiAnMScsXG4gICd6LWluZGV4LXRpcCc6ICcyJyxcbiAgJ3otaW5kZXgtcG9wdXAnOiAnMTInLFxuICAnei1pbmRleC1wb3B1cC1pbXBvcnRhbnQnOiAnMjInLFxufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IHNldFRoZW1lIH0gZnJvbSAnY29tcG9uZW50cyc7XG5cbmltcG9ydCBUSEVNRSBmcm9tICdAY29uc3RhbnRzL3RoZW1lJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG59XG5cbmNvbnN0IFRoZW1lID0gKHsgY2hpbGRyZW4gfTogUHJvcHMpOiBKU1guRWxlbWVudCA9PiB7XG4gIHNldFRoZW1lKFRIRU1FKTtcbiAgY29uc3QgdGhlbWVBcnIgPSBPYmplY3QuZW50cmllcyhUSEVNRSk7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHN0eWxlPntgXG4gICAgICAgIDpyb290LFxuICAgICAgICA6aG9zdCB7XG4gICAgICAgICAgJHt0aGVtZUFyclxuICAgICAgICAgICAgLnJlZHVjZSgoYWNjLCBbbmFtZSwgdmFsdWVdKSA9PiBgJHthY2N9IC0tJHtuYW1lfTogJHt2YWx1ZX07XFxuYCwgJycpXG4gICAgICAgICAgICAudHJpbSgpfVxuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBUaGVtZTtcbiIsImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgc2V0VGhlbWVBY3Rpb24sIHsgVGhlbWUgfSBmcm9tICcuL3JlZHVjZXJzL3RoZW1lL2FjdGlvbnMvc2V0VGhlbWUnO1xuaW1wb3J0IHNldFNldHRpbmdzQWN0aW9uLCB7XG4gIFNldHRpbmdzLFxufSBmcm9tICcuL3JlZHVjZXJzL3NldHRpbmdzL2FjdGlvbnMvc2V0U2V0dGluZ3MnO1xuaW1wb3J0IHNldExvY2FsZUFjdGlvbiBmcm9tICcuL3JlZHVjZXJzL2wxMG4vYWN0aW9ucy9zZXRMb2NhbGUnO1xuXG5pbXBvcnQgc3RvcmUgZnJvbSAnLi9zdG9yZSc7XG5cbmNvbnN0IHNldFRoZW1lID0gKHRoZW1lOiBUaGVtZSkgPT4gc3RvcmUuZGlzcGF0Y2goc2V0VGhlbWVBY3Rpb24odGhlbWUpKTtcbmV4cG9ydCB7IHNldFRoZW1lIH07XG5cbmNvbnN0IHNldFNldHRpbmdzID0gKHNldHRpbmdzOiBTZXR0aW5ncykgPT5cbiAgc3RvcmUuZGlzcGF0Y2goc2V0U2V0dGluZ3NBY3Rpb24oc2V0dGluZ3MpKTtcbmV4cG9ydCB7IHNldFNldHRpbmdzIH07XG5cbmNvbnN0IHNldExvY2FsZSA9IChsb2NhbGU6IHN0cmluZykgPT4gc3RvcmUuZGlzcGF0Y2goc2V0TG9jYWxlQWN0aW9uKGxvY2FsZSkpO1xuZXhwb3J0IHsgc2V0TG9jYWxlIH07XG5cbmNvbnN0IHNldEJhc2VVUkwgPSAodXJsOiBzdHJpbmcpID0+IHtcbiAgYXhpb3MuZGVmYXVsdHMuYmFzZVVSTCA9IHVybDtcbn07XG5leHBvcnQgeyBzZXRCYXNlVVJMIH07XG4iLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ29udGV4dCB9IGZyb20gJy4vaW5qZWN0SW50bCc7XG5pbXBvcnQgeyBpbnZhcmlhbnRJbnRsQ29udGV4dCB9IGZyb20gJy4uL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUludGwoKSB7XG4gICAgY29uc3QgaW50bCA9IHVzZUNvbnRleHQoQ29udGV4dCk7XG4gICAgaW52YXJpYW50SW50bENvbnRleHQoaW50bCk7XG4gICAgcmV0dXJuIGludGw7XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgY3NzbWVtIGZyb20gJ2Nzc21lbSc7XG5pbXBvcnQgeyB1c2VJbnRsIH0gZnJvbSAncmVhY3QtaW50bCc7XG5cbmltcG9ydCB7IExpdmVTZXR0aW5nLCBMaXZlU2V0dGluZ3MgfSBmcm9tICdAaW50ZXJmYWNlcy9pbnRlcmZhY2VzJztcblxuaW1wb3J0IHsgQ29tcGV0aXRvciwgY29tcGV0aXRvcnNOYW1lcyB9IGZyb20gJ0Bjb25zdGFudHMvY29tcGV0aXRvcnMnO1xuaW1wb3J0IHsgU3RvcmFnZSB9IGZyb20gJ0Bjb25zdGFudHMvc3RvcmFnZSc7XG5cbmltcG9ydCB1c2VGdW5uZWwgZnJvbSAnQGhvb2tzL3VzZUZ1bm5lbCc7XG5cbmltcG9ydCBCdXR0b24sIHsgU0laRSBhcyBCVVRUT05fU0laRSwgVklFVyB9IGZyb20gJ2NvbXBvbmVudHMvQnV0dG9uJztcbmltcG9ydCBEb3RzTG9hZGVyIGZyb20gJ2NvbXBvbmVudHMvRG90c0xvYWRlcic7XG5pbXBvcnQgSW5wdXQsIHsgU0laRSBhcyBJTlBVVF9TSVpFIH0gZnJvbSAnY29tcG9uZW50cy9JbnB1dCc7XG5cbmltcG9ydCBJY29uQ2xvc2UgZnJvbSAnQGNvbXBvbmVudHMvSWNvbi9JY29uQ3Jvc3MnO1xuXG5pbXBvcnQgeyBnZXRGcm9tU3RvcmFnZSwgc2F2ZVRvU3RvcmFnZSB9IGZyb20gJ0BoZWxwZXJzL3N0b3JhZ2UnO1xuXG5pbXBvcnQgUm93LCB7XG4gIFByaWNlU2V0dGluZyBhcyBQcmljZVNldHRpbmdzT3B0aW9uLFxuICBORVRfUEVSQ0VOVCxcbn0gZnJvbSAnLi9jb21wb25lbnRzL1Jvdy9Sb3cnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL1ByaWNlU2V0dGluZ3MuY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuY29uc3QgU1VHR0VTVF9DT01QRVRJVE9SID0gJ3N1Z2dlc3RfY29tcGV0aXRvcic7XG5cbmV4cG9ydCBlbnVtIFNpemUge1xuICBMQVJHRSA9ICdsYXJnZScsXG4gIE1FRElVTSA9ICdtZWRpdW0nLFxuICBTTUFMTCA9ICdzbWFsbCcsXG59XG5cbnR5cGUgQ29tcGV0aXRvclNldHRpbmdzID0ge1xuICBuYW1lOiBzdHJpbmc7XG4gIHNldHRpbmc6IFByaWNlU2V0dGluZ3NPcHRpb247XG4gIHBlcmNlbnQ6IG51bWJlcjtcbn07XG5cbnR5cGUgU2V0dGluZ3MgPSBQYXJ0aWFsPFJlY29yZDxDb21wZXRpdG9yLCBDb21wZXRpdG9yU2V0dGluZ3M+PjtcblxuZXhwb3J0IGNvbnN0IGdldERlZmF1bHRTZXR0aW5ncyA9IChtYXJrdXA6IG51bWJlcik6IFNldHRpbmdzID0+ICh7XG4gIFtDb21wZXRpdG9yLkFHRF06IHtcbiAgICBuYW1lOiBjb21wZXRpdG9yc05hbWVzLkFHRCxcbiAgICBzZXR0aW5nOiBQcmljZVNldHRpbmdzT3B0aW9uLk5FVCxcbiAgICBwZXJjZW50OiBORVRfUEVSQ0VOVCxcbiAgfSxcbiAgW0NvbXBldGl0b3IuQkRPXToge1xuICAgIG5hbWU6IGNvbXBldGl0b3JzTmFtZXMuQkRPLFxuICAgIHNldHRpbmc6IFByaWNlU2V0dGluZ3NPcHRpb24uR1JPU1MsXG4gICAgcGVyY2VudDogbWFya3VwLFxuICB9LFxuICBbQ29tcGV0aXRvci5CT09dOiB7XG4gICAgbmFtZTogY29tcGV0aXRvcnNOYW1lcy5CT08sXG4gICAgc2V0dGluZzogUHJpY2VTZXR0aW5nc09wdGlvbi5ORVQsXG4gICAgcGVyY2VudDogTkVUX1BFUkNFTlQsXG4gIH0sXG4gIFtDb21wZXRpdG9yLkVSQV06IHtcbiAgICBuYW1lOiBjb21wZXRpdG9yc05hbWVzLkVSQSxcbiAgICBzZXR0aW5nOiBQcmljZVNldHRpbmdzT3B0aW9uLkdST1NTLFxuICAgIHBlcmNlbnQ6IG1hcmt1cCxcbiAgfSxcbiAgW0NvbXBldGl0b3IuR0dCXToge1xuICAgIG5hbWU6IGNvbXBldGl0b3JzTmFtZXMuR0dCLFxuICAgIHNldHRpbmc6IFByaWNlU2V0dGluZ3NPcHRpb24uR1JPU1MsXG4gICAgcGVyY2VudDogbWFya3VwLFxuICB9LFxuICBbQ29tcGV0aXRvci5IVFBdOiB7XG4gICAgbmFtZTogY29tcGV0aXRvcnNOYW1lcy5IVFAsXG4gICAgc2V0dGluZzogUHJpY2VTZXR0aW5nc09wdGlvbi5HUk9TUyxcbiAgICBwZXJjZW50OiBtYXJrdXAsXG4gIH0sXG4gIFtDb21wZXRpdG9yLkhTVF06IHtcbiAgICBuYW1lOiBjb21wZXRpdG9yc05hbWVzLkhTVCxcbiAgICBzZXR0aW5nOiBQcmljZVNldHRpbmdzT3B0aW9uLkdST1NTLFxuICAgIHBlcmNlbnQ6IG1hcmt1cCxcbiAgfSxcbiAgW0NvbXBldGl0b3IuSVRDXToge1xuICAgIG5hbWU6IGNvbXBldGl0b3JzTmFtZXMuSVRDLFxuICAgIHNldHRpbmc6IFByaWNlU2V0dGluZ3NPcHRpb24uR1JPU1MsXG4gICAgcGVyY2VudDogbWFya3VwLFxuICB9LFxuICBbQ29tcGV0aXRvci5TWFRdOiB7XG4gICAgbmFtZTogY29tcGV0aXRvcnNOYW1lcy5TWFQsXG4gICAgc2V0dGluZzogUHJpY2VTZXR0aW5nc09wdGlvbi5HUk9TUyxcbiAgICBwZXJjZW50OiBtYXJrdXAsXG4gIH0sXG4gIFtDb21wZXRpdG9yLlRCT106IHtcbiAgICBuYW1lOiBjb21wZXRpdG9yc05hbWVzLlRCTyxcbiAgICBzZXR0aW5nOiBQcmljZVNldHRpbmdzT3B0aW9uLkdST1NTLFxuICAgIHBlcmNlbnQ6IG1hcmt1cCxcbiAgfSxcbiAgW0NvbXBldGl0b3IuVzJNXToge1xuICAgIG5hbWU6IGNvbXBldGl0b3JzTmFtZXMuVzJNLFxuICAgIHNldHRpbmc6IFByaWNlU2V0dGluZ3NPcHRpb24uR1JPU1MsXG4gICAgcGVyY2VudDogbWFya3VwLFxuICB9LFxufSk7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIG9uQ2xvc2UoKTogdm9pZDtcbiAgc2l6ZT86IFNpemU7XG59XG5cbmNvbnN0IFByaWNlU2V0dGluZ3MgPSAoeyBvbkNsb3NlLCBzaXplID0gU2l6ZS5MQVJHRSB9OiBQcm9wcyk6IEpTWC5FbGVtZW50ID0+IHtcbiAgY29uc3QgW3NldHRpbmdzLCBzZXRTZXR0aW5nc10gPSB1c2VTdGF0ZTxTZXR0aW5ncyB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbaXNTdWdnZXN0ZWRDb21wZXRpdG9yU2VudCwgc2V0SXNTdWdnZXN0ZWRDb21wZXRpdG9yU2VudF0gPSB1c2VTdGF0ZShcbiAgICBmYWxzZVxuICApO1xuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSk7XG4gIGNvbnN0IFtzdWdnZXN0SW5wdXRWYWx1ZSwgc2V0U3VnZ2VzdElucHV0VmFsdWVdID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbc3VnZ2VzdElucHV0SGFzRXJyb3IsIHNldFN1Z2dlc3RJbnB1dEhhc0Vycm9yXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBmb3JtUmVmID0gdXNlUmVmPEhUTUxGb3JtRWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3QgdXNlckJhc2ljTWFya3VwID0gdXNlUmVmKE5FVF9QRVJDRU5UKTtcblxuICBjb25zdCBpbnRsID0gdXNlSW50bCgpO1xuICBjb25zdCB7IHNlbmRFdmVudCB9ID0gdXNlRnVubmVsKGZhbHNlKTtcblxuICBjb25zdCBbZXJyb3JzLCBzZXRFcnJvcnNdID0gdXNlU3RhdGU8eyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0+KHtcbiAgICBbQ29tcGV0aXRvci5BR0RdOiBmYWxzZSxcbiAgICBbQ29tcGV0aXRvci5CRE9dOiBmYWxzZSxcbiAgICBbQ29tcGV0aXRvci5CT09dOiBmYWxzZSxcbiAgICBbQ29tcGV0aXRvci5FUkFdOiBmYWxzZSxcbiAgICBbQ29tcGV0aXRvci5HR0JdOiBmYWxzZSxcbiAgICBbQ29tcGV0aXRvci5IVFBdOiBmYWxzZSxcbiAgICBbQ29tcGV0aXRvci5IU1RdOiBmYWxzZSxcbiAgICBbQ29tcGV0aXRvci5JVENdOiBmYWxzZSxcbiAgICBbQ29tcGV0aXRvci5TWFRdOiBmYWxzZSxcbiAgICBbQ29tcGV0aXRvci5UQk9dOiBmYWxzZSxcbiAgICBbQ29tcGV0aXRvci5XMk1dOiBmYWxzZSxcbiAgfSk7XG5cbiAgY29uc3Qgc2V0UHJpY2VTZXR0aW5ncyA9IGFzeW5jIChtYXJrdXA6IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IHNhdmVkU2V0dGluZ3MgPSBhd2FpdCBnZXRGcm9tU3RvcmFnZShTdG9yYWdlLlBSSUNFX1NFVFRJTkdTKTtcblxuICAgIGlmIChzYXZlZFNldHRpbmdzKSB7XG4gICAgICBzZXRTZXR0aW5ncyhzYXZlZFNldHRpbmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0U2V0dGluZ3MoZ2V0RGVmYXVsdFNldHRpbmdzKG1hcmt1cCkpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBvblNhZmVTZXR0aW5nc0J1dHRvbkNsaWNrID0gYXN5bmMgKCkgPT4ge1xuICAgIGlmIChPYmplY3Qua2V5cyhlcnJvcnMpLmV2ZXJ5KChrZXkpID0+ICFlcnJvcnNba2V5XSkpIHtcbiAgICAgIGF3YWl0IHNhdmVUb1N0b3JhZ2UoU3RvcmFnZS5QUklDRV9TRVRUSU5HUywgc2V0dGluZ3MpO1xuICAgICAgb25DbG9zZSgpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCB1cGRhdGVTZXR0aW5ncyA9IChcbiAgICBjb21wZXRpdG9ySWQ6IHN0cmluZyxcbiAgICBuZXdTZXR0aW5nOiBDb21wZXRpdG9yU2V0dGluZ3NcbiAgKSA9PiB7XG4gICAgc2V0U2V0dGluZ3MoKHByZXZTZXR0aW5nczogYW55KSA9PiAoe1xuICAgICAgLi4ucHJldlNldHRpbmdzLFxuICAgICAgW2NvbXBldGl0b3JJZF06IHtcbiAgICAgICAgLi4ucHJldlNldHRpbmdzW2NvbXBldGl0b3JJZF0sXG4gICAgICAgIC4uLm5ld1NldHRpbmcsXG4gICAgICB9LFxuICAgIH0pKTtcbiAgfTtcblxuICBjb25zdCByZWNlaXZlRXJyb3IgPSAoY29tcGV0aXRvcklkOiBzdHJpbmcsIGlzRXJyb3I6IGJvb2xlYW4pID0+IHtcbiAgICBzZXRFcnJvcnMoKHByZXZFcnJvcnMpID0+ICh7XG4gICAgICAuLi5wcmV2RXJyb3JzLFxuICAgICAgW2NvbXBldGl0b3JJZF06IGlzRXJyb3IsXG4gICAgfSkpO1xuICB9O1xuXG4gIGNvbnN0IG9uU3VnZ2VzdENvbXBldGl0b3JGb3JtU3VibWl0ID0gKFxuICAgIGU6IFJlYWN0LkZvcm1FdmVudDxIVE1MRm9ybUVsZW1lbnQ+XG4gICkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmICghc3VnZ2VzdElucHV0SGFzRXJyb3IgJiYgc3VnZ2VzdElucHV0VmFsdWUudHJpbSgpKSB7XG4gICAgICBzZW5kRXZlbnQoU1VHR0VTVF9DT01QRVRJVE9SLCBzdWdnZXN0SW5wdXRWYWx1ZS50cmltKCksIG51bGwpO1xuICAgICAgc2V0SXNTdWdnZXN0ZWRDb21wZXRpdG9yU2VudCh0cnVlKTtcbiAgICAgIGlmIChmb3JtUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgZm9ybVJlZi5jdXJyZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB9XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgc2V0SXNTdWdnZXN0ZWRDb21wZXRpdG9yU2VudChmYWxzZSk7XG4gICAgICAgIGlmIChmb3JtUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICBmb3JtUmVmLmN1cnJlbnQuc3R5bGUuZGlzcGxheSA9ICdncmlkJztcbiAgICAgICAgfVxuICAgICAgfSwgNTAwMCk7XG4gICAgICBzZXRTdWdnZXN0SW5wdXRWYWx1ZSgnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFN1Z2dlc3RJbnB1dEhhc0Vycm9yKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBvblN1Z2dlc3RDb21wZXRpdG9ySW5wdXRDaGFuZ2UgPSAodmFsdWU6IHN0cmluZykgPT4ge1xuICAgIGlmICh2YWx1ZS50cmltKCkgJiYgc3VnZ2VzdElucHV0SGFzRXJyb3IpIHtcbiAgICAgIHNldFN1Z2dlc3RJbnB1dEhhc0Vycm9yKGZhbHNlKTtcbiAgICB9XG5cbiAgICBzZXRTdWdnZXN0SW5wdXRWYWx1ZSh2YWx1ZSk7XG4gIH07XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbGl2ZVNldHRpbmdzOiBMaXZlU2V0dGluZ3MgfCB1bmRlZmluZWQgPSBhd2FpdCBnZXRGcm9tU3RvcmFnZShcbiAgICAgICAgU3RvcmFnZS5MSVZFX1NFVFRJTkdTXG4gICAgICApO1xuICAgICAgY29uc3QgbWFya3VwID0gbGl2ZVNldHRpbmdzPy5bTGl2ZVNldHRpbmcuQjJCX1JFQ09NTUVOREVEX01BUktVUF0gfHwgMDtcblxuICAgICAgdXNlckJhc2ljTWFya3VwLmN1cnJlbnQgPSBtYXJrdXA7XG4gICAgICBhd2FpdCBzZXRQcmljZVNldHRpbmdzKG1hcmt1cCk7XG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgIH0pKCk7XG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgncHJpY2VTZXR0aW5ncycpKCl9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCdoZWFkZXInKSgpfT5cbiAgICAgICAgPGRpdiBvbkNsaWNrPXtvbkNsb3NlfSBjbGFzc05hbWU9e2VtKCdpY29uQ3Jvc3NXcmFwcGVyJykoKX0+XG4gICAgICAgICAgPEljb25DbG9zZSB3aWR0aD17MTZ9IGhlaWdodD17MTZ9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8aDEgY2xhc3NOYW1lPXtlbSgndGl0bGUnKSgpfT5cbiAgICAgICAgICB7aW50bC5mb3JtYXRNZXNzYWdlKHsgaWQ6ICdwcmljZVNldHRpbmdzLnRpdGxlJyB9KX1cbiAgICAgICAgPC9oMT5cbiAgICAgICAge3NpemUgIT09IFNpemUuU01BTEwgJiYgKFxuICAgICAgICAgIDxwIGNsYXNzTmFtZT17ZW0oJ3RpdGxlRGVzY3JpcHRpb24nKSgpfT5cbiAgICAgICAgICAgIHtpbnRsLmZvcm1hdE1lc3NhZ2UoeyBpZDogJ3ByaWNlU2V0dGluZ3MudGl0bGVEZXNjcmlwdGlvbicgfSl9XG4gICAgICAgICAgPC9wPlxuICAgICAgICApfVxuICAgICAgICA8cCBjbGFzc05hbWU9e2VtKCdpbmZvSXRlbScpKCl9PlxuICAgICAgICAgIDxiPk5ldDwvYj4g4oCUeycgJ31cbiAgICAgICAgICB7aW50bC5mb3JtYXRNZXNzYWdlKHsgaWQ6ICdwcmljZVNldHRpbmdzLm5ldERlc2NyaXB0aW9uJyB9KX1cbiAgICAgICAgPC9wPlxuICAgICAgICA8cCBjbGFzc05hbWU9e2VtKCdpbmZvSXRlbScpKCl9PlxuICAgICAgICAgIDxiPkdyb3NzPC9iPiDigJR7JyAnfVxuICAgICAgICAgIHtpbnRsLmZvcm1hdE1lc3NhZ2UoeyBpZDogJ3ByaWNlU2V0dGluZ3MuZ3Jvc3NEZXNjcmlwdGlvbicgfSl9XG4gICAgICAgIDwvcD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgeyFpc0xvYWRpbmcgPyAoXG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3NOYW1lPXtgJHtlbSgncm93c0Jsb2NrV3JhcHBlcicpKCl9ICR7XG4gICAgICAgICAgICAgIHNpemUgPT09IFNpemUuTUVESVVNID8gZW0oJ3Jvd3NCbG9ja1dyYXBwZXJTaG9ydGVuZWQnKSgpIDogJydcbiAgICAgICAgICAgIH1gfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtzZXR0aW5ncyAmJiAoXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgncm93c0Jsb2NrJykoKX0+XG4gICAgICAgICAgICAgICAge09iamVjdC5rZXlzKHNldHRpbmdzKS5tYXAoKGlkKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBjb21wZXRpdG9yU2V0dGluZ3MgPSBzZXR0aW5nc1tpZCBhcyBDb21wZXRpdG9yXTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIGNvbXBldGl0b3JTZXR0aW5ncyAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgPFJvd1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtpZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBldGl0b3JJZD17aWR9XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lPXtjb21wZXRpdG9yU2V0dGluZ3MubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBlcmNlbnQ9e2NvbXBldGl0b3JTZXR0aW5ncy5wZXJjZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZz17Y29tcGV0aXRvclNldHRpbmdzLnNldHRpbmd9XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVTZXR0aW5ncz17dXBkYXRlU2V0dGluZ3N9XG4gICAgICAgICAgICAgICAgICAgICAgICBzZW5kRXJyb3I9e3JlY2VpdmVFcnJvcn1cbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yPXtlcnJvcnNbaWRdfVxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlckJhc2ljTWFya3VwPXt1c2VyQmFzaWNNYXJrdXAuY3VycmVudH1cbiAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCdsb2FkZXJCbG9jaycpKCl9PlxuICAgICAgICAgICAgPERvdHNMb2FkZXIgdmlldz17VklFVy5MSUdIVH0gY2xhc3NOYW1lPXtlbSgnbG9hZGVyJykoKX0gLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgICAge3NpemUgIT09IFNpemUuU01BTEwgJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnc3VnZ2VzdENvbXBldGl0b3JCbG9jaycpKCl9PlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPXtlbSgnZGVzY3JpcHRpb24nKSgpfT5cbiAgICAgICAgICAgICAge2ludGwuZm9ybWF0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgaWQ6ICdwcmljZVNldHRpbmdzLnN1Z2dlc3RDb21wZXRpdG9yRGVzY3JpcHRpb24nLFxuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgIDxmb3JtXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ2Zvcm0nKSgpfVxuICAgICAgICAgICAgICByZWY9e2Zvcm1SZWZ9XG4gICAgICAgICAgICAgIG9uU3VibWl0PXsoZTogUmVhY3QuRm9ybUV2ZW50PEhUTUxGb3JtRWxlbWVudD4pID0+XG4gICAgICAgICAgICAgICAgb25TdWdnZXN0Q29tcGV0aXRvckZvcm1TdWJtaXQoZSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2VtKCdpbnB1dCcpKCl9XG4gICAgICAgICAgICAgICAgaGFzRXJyb3I9e3N1Z2dlc3RJbnB1dEhhc0Vycm9yfVxuICAgICAgICAgICAgICAgIHZhbHVlPXtzdWdnZXN0SW5wdXRWYWx1ZX1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGU6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XG4gICAgICAgICAgICAgICAgICBvblN1Z2dlc3RDb21wZXRpdG9ySW5wdXRDaGFuZ2UoZS50YXJnZXQudmFsdWUpO1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgc2l6ZT17SU5QVVRfU0laRS5YU31cbiAgICAgICAgICAgICAgICB3aWRlXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2VtKCdzZW5kRm9ybUJ1dHRvbicpKCl9XG4gICAgICAgICAgICAgICAgdmlldz17VklFVy5MSUdIVH1cbiAgICAgICAgICAgICAgICB3aWRlXG4gICAgICAgICAgICAgICAgc2l6ZT17QlVUVE9OX1NJWkUuU31cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtpbnRsLmZvcm1hdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgaWQ6ICdwcmljZVNldHRpbmdzLnN1Z2dlc3RDb21wZXRpdG9yQWRkQnV0dG9uJyxcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICB7aXNTdWdnZXN0ZWRDb21wZXRpdG9yU2VudCAmJiAoXG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT17ZW0oJ3N1Y2Nlc3NNZXNzYWdlJykoKX0+XG4gICAgICAgICAgICAgICAge2ludGwuZm9ybWF0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICBpZDogJ3ByaWNlU2V0dGluZ3Muc3VnZ2VzdENvbXBldGl0b3JTdWNjZXNzJyxcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXtvblNhZmVTZXR0aW5nc0J1dHRvbkNsaWNrfSB3aWRlIHNpemU9e0JVVFRPTl9TSVpFLlN9PlxuICAgICAgICAgIHtpbnRsLmZvcm1hdE1lc3NhZ2UoeyBpZDogJ3ByaWNlU2V0dGluZ3Muc2F2ZUJ1dHRvbicgfSl9XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQcmljZVNldHRpbmdzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJpbXBvcnQgeyBNZXNzYWdlcyB9IGZyb20gJ0BpbnRlcmZhY2VzL2ludGVyZmFjZXMnO1xuXG5pbXBvcnQgeyBMYW5ndWFnZSB9IGZyb20gJ0Bjb25zdGFudHMvbGFuZ3VhZ2VzJztcblxuY29uc3QgbWVzc2FnZXM6IE1lc3NhZ2VzID0ge1xuICBbTGFuZ3VhZ2UuRU5dOiB7XG4gICAgbGFuZzogTGFuZ3VhZ2UuRU4sXG4gICAgbWVzc2FnZXM6IHtcbiAgICAgICdwcmljZVNldHRpbmdzLnRpdGxlJzogJ1ByaWNlIGNvbXBhcmlzb24gc2V0dGluZ3MnLFxuICAgICAgJ3ByaWNlU2V0dGluZ3MudGl0bGVEZXNjcmlwdGlvbic6XG4gICAgICAgICdUaGUgdHlwZXMgb2YgcHJpY2VzIG9uIGVhY2ggc2l0ZSBhcmUgZGlmZmVyZW50LiBDaG9vc2Ugd2hpY2ggb25lIHlvdSB3YW50IHRvIGNvbXBhcmUgYW5kIGVudGVyIGEgcGVyY2VudGFnZSBvZiB0aGUgbWFya3VwLicsXG4gICAgICAncHJpY2VTZXR0aW5ncy5uZXREZXNjcmlwdGlvbic6ICdwcmljZSB3aXRob3V0IG1hcmt1cCcsXG4gICAgICAncHJpY2VTZXR0aW5ncy5ncm9zc0Rlc2NyaXB0aW9uJzogJ3ByaWNlIHdpdGggYmFzaWMgb3IgY3VzdG9tIG1hcmt1cCcsXG4gICAgICAncHJpY2VTZXR0aW5ncy5zdWdnZXN0Q29tcGV0aXRvckRlc2NyaXB0aW9uJzpcbiAgICAgICAgXCJEaWRuJ3QgZmluZCB5b3VyIHN1cHBsaWVyPyBUZWxsIHVzIGFuZCB3ZSB3aWxsIGFkZCBpdC5cIixcbiAgICAgICdwcmljZVNldHRpbmdzLnN1Z2dlc3RDb21wZXRpdG9yU3VjY2Vzcyc6XG4gICAgICAgICdUaGFuayB5b3UhIFdlIHdpbGwgaW50ZWdyYXRlIHRoZSBzdXBwbGllciB3aGVuIHdlIHJlY2VpdmUgYSBzdWZmaWNpZW50IG51bWJlciBvZiByZXF1ZXN0cy4nLFxuICAgICAgJ3ByaWNlU2V0dGluZ3Muc3VnZ2VzdENvbXBldGl0b3JBZGRCdXR0b24nOiAnU3VnZ2VzdCBzdXBwbGllcicsXG4gICAgICAncHJpY2VTZXR0aW5ncy5zYXZlQnV0dG9uJzogJ1NhdmUgYW5kIGNsb3NlJyxcbiAgICB9LFxuICB9LFxuICBbTGFuZ3VhZ2UuUlVdOiB7XG4gICAgbGFuZzogTGFuZ3VhZ2UuUlUsXG4gICAgbWVzc2FnZXM6IHtcbiAgICAgICdwcmljZVNldHRpbmdzLnRpdGxlJzogJ9Cd0LDRgdGC0YDQvtC50LrQuCDRgdGA0LDQstC90LXQvdC40Y8g0YbQtdC9JyxcbiAgICAgICdwcmljZVNldHRpbmdzLnRpdGxlRGVzY3JpcHRpb24nOlxuICAgICAgICAn0JLQuNC00Ysg0YbQtdC9INC90LAg0LrQsNC20LTQvtC8INGB0LDQudGC0LUg0L7RgtC70LjRh9Cw0Y7RgtGB0Y8uINCS0YvQsdC10YDQuNGC0LUsINC60LDQutGD0Y4g0LjQvNC10L3QvdC+INCy0Ysg0YXQvtGC0LjRgtC1INGB0YDQsNCy0L3QuNGC0YwsINC4INGD0LrQsNC20LjRgtC1INC/0YDQvtGG0LXQvdGCINC90LDRhtC10L3QutC4LicsXG4gICAgICAncHJpY2VTZXR0aW5ncy5uZXREZXNjcmlwdGlvbic6ICfRgdGC0L7QuNC80L7RgdGC0Ywg0LHQtdC3INC90LDRhtC10L3QutC4JyxcbiAgICAgICdwcmljZVNldHRpbmdzLmdyb3NzRGVzY3JpcHRpb24nOiAn0YHRgtC+0LjQvNC+0YHRgtGMINC+0YLQtdC70Y8g0YEg0L3QsNGG0LXQvdC60L7QuScsXG4gICAgICAncHJpY2VTZXR0aW5ncy5zdWdnZXN0Q29tcGV0aXRvckRlc2NyaXB0aW9uJzpcbiAgICAgICAgJ9Cd0LUg0L3QsNGI0LvQuCDQvdGD0LbQvdC+0LPQviDQv9C+0YHRgtCw0LLRidC40LrQsD8g0J3QsNC/0LjRiNC40YLQtSDQvdCw0LwsINC4INC80Ysg0LXQs9C+INC00L7QsdCw0LLQuNC8LicsXG4gICAgICAncHJpY2VTZXR0aW5ncy5zdWdnZXN0Q29tcGV0aXRvclN1Y2Nlc3MnOlxuICAgICAgICAn0KHQv9Cw0YHQuNCx0L4hINCc0Ysg0LjQvdGC0LXQs9GA0LjRgNGD0LXQvCDQv9C+0YHRgtCw0LLRidC40LrQsCwg0LrQvtCz0LTQsCDQv9C+0LvRg9GH0LjQvCDQtNC+0YHRgtCw0YLQvtGH0L3QvtC1INC60L7Qu9C40YfQtdGB0YLQstC+INC30LDQv9GA0L7RgdC+0LIuJyxcbiAgICAgICdwcmljZVNldHRpbmdzLnN1Z2dlc3RDb21wZXRpdG9yQWRkQnV0dG9uJzogJ9CU0L7QsdCw0LLQuNGC0Ywg0L/QvtGB0YLQsNCy0YnQuNC60LAnLFxuICAgICAgJ3ByaWNlU2V0dGluZ3Muc2F2ZUJ1dHRvbic6ICfQodC+0YXRgNCw0L3QuNGC0Ywg0Lgg0LfQsNC60YDRi9GC0YwnLFxuICAgIH0sXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBtZXNzYWdlcztcbiIsImltcG9ydCB7IE1lc3NhZ2VzIH0gZnJvbSAnQGludGVyZmFjZXMvaW50ZXJmYWNlcyc7XG5cbmltcG9ydCB7IExhbmd1YWdlIH0gZnJvbSAnQGNvbnN0YW50cy9sYW5ndWFnZXMnO1xuXG5jb25zdCBtZXNzYWdlczogTWVzc2FnZXMgPSB7XG4gIFtMYW5ndWFnZS5FTl06IHtcbiAgICBsYW5nOiBMYW5ndWFnZS5FTixcbiAgICBtZXNzYWdlczoge1xuICAgICAgJ3NldHRpbmdzLm5vdGlmaWNhdGlvbnNFbmFibGUnOiAnVHVybiBvbiBub3RpZmljYXRpb25zJyxcbiAgICAgICdzZXR0aW5ncy5ub3RpZmljYXRpb25zRW5hYmxlRm9yZXZlcic6ICdmb3JldmVyJyxcbiAgICAgICdzZXR0aW5ncy5ub3RpZmljYXRpb25zRW5hYmxlMTVNaW51dGVzJzogJ2ZvciAxNSBtaW51dGVzJyxcbiAgICAgICdzZXR0aW5ncy5ub3RpZmljYXRpb25zRW5hYmxlMUhvdXInOiAnZm9yIDEgaG91cicsXG4gICAgICAnc2V0dGluZ3Mubm90aWZpY2F0aW9uc0VuYWJsZTEySG91cnMnOiAnZm9yIDEyIGhvdXJzJyxcbiAgICAgICdzZXR0aW5ncy5ub3RpZmljYXRpb25zRGlzYWJsZSc6ICdUdXJuIG9mZiBub3RpZmljYXRpb25zJyxcbiAgICAgICdzZXR0aW5ncy5ub3RpZmljYXRpb25zRGlzYWJsZTE1TWludXRlcyc6ICdmb3IgMTUgbWludXRlcycsXG4gICAgICAnc2V0dGluZ3Mubm90aWZpY2F0aW9uc0Rpc2FibGUxSG91cic6ICdmb3IgMSBob3VyJyxcbiAgICAgICdzZXR0aW5ncy5ub3RpZmljYXRpb25zRGlzYWJsZTEySG91cnMnOiAnZm9yIDEyIGhvdXJzJyxcbiAgICAgICdzZXR0aW5ncy5ub3RpZmljYXRpb25zRGlzYWJsZUZvcmV2ZXInOiAnZm9yZXZlcicsXG4gICAgICAnc2V0dGluZ3MubG9nT3V0JzogJ0xvZyBvdXQnLFxuICAgICAgJ3NldHRpbmdzLnByaWNlU2V0dGluZ3MnOiAnU2V0IHVwIHByaWNlIGNvbXBhcmlzb24nLFxuICAgIH0sXG4gIH0sXG4gIFtMYW5ndWFnZS5SVV06IHtcbiAgICBsYW5nOiBMYW5ndWFnZS5SVSxcbiAgICBtZXNzYWdlczoge1xuICAgICAgJ3NldHRpbmdzLm5vdGlmaWNhdGlvbnNFbmFibGUnOiAn0JLQutC70Y7Rh9C40YLRjCDRg9Cy0LXQtNC+0LzQu9C10L3QuNGPJyxcbiAgICAgICdzZXR0aW5ncy5ub3RpZmljYXRpb25zRW5hYmxlRm9yZXZlcic6ICfQvdCw0LLRgdC10LPQtNCwJyxcbiAgICAgICdzZXR0aW5ncy5ub3RpZmljYXRpb25zRW5hYmxlMTVNaW51dGVzJzogJ9C90LAgMTUg0LzQuNC90YPRgicsXG4gICAgICAnc2V0dGluZ3Mubm90aWZpY2F0aW9uc0VuYWJsZTFIb3VyJzogJ9C90LAgMSDRh9Cw0YEnLFxuICAgICAgJ3NldHRpbmdzLm5vdGlmaWNhdGlvbnNFbmFibGUxMkhvdXJzJzogJ9C90LAgMTIg0YfQsNGB0L7QsicsXG4gICAgICAnc2V0dGluZ3Mubm90aWZpY2F0aW9uc0Rpc2FibGUnOiAn0JLRi9C60LvRjtGH0LjRgtGMINGD0LLQtdC00L7QvNC70LXQvdC40Y8nLFxuICAgICAgJ3NldHRpbmdzLm5vdGlmaWNhdGlvbnNEaXNhYmxlMTVNaW51dGVzJzogJ9C90LAgMTUg0LzQuNC90YPRgicsXG4gICAgICAnc2V0dGluZ3Mubm90aWZpY2F0aW9uc0Rpc2FibGUxSG91cic6ICfQvdCwIDEg0YfQsNGBJyxcbiAgICAgICdzZXR0aW5ncy5ub3RpZmljYXRpb25zRGlzYWJsZTEySG91cnMnOiAn0L3QsCAxMiDRh9Cw0YHQvtCyJyxcbiAgICAgICdzZXR0aW5ncy5ub3RpZmljYXRpb25zRGlzYWJsZUZvcmV2ZXInOiAn0Y8g0LLQutC70Y7Rh9GDINGB0LDQvCcsXG4gICAgICAnc2V0dGluZ3MubG9nT3V0JzogJ9CS0YvQudGC0Lgg0LjQtyDQsNC60LrQsNGD0L3RgtCwJyxcbiAgICAgICdzZXR0aW5ncy5wcmljZVNldHRpbmdzJzogJ9Cd0LDRgdGC0YDQvtC40YLRjCDRgdGA0LDQstC90LXQvdC40LUg0YbQtdC9JyxcbiAgICB9LFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgbWVzc2FnZXM7XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wibGFiZWxcIjpcIkJ1dHRvblJhZGlvX19sYWJlbC0tMTJqdGNcIixcImxhYmVsX3dpZGVcIjpcIkJ1dHRvblJhZGlvX19sYWJlbF93aWRlLS0zYU5jM1wiLFwiY29udHJvbFwiOlwiQnV0dG9uUmFkaW9fX2NvbnRyb2wtLTNIdjJGXCIsXCJidXR0b25cIjpcIkJ1dHRvblJhZGlvX19idXR0b24tLVJCT0c3XCIsXCJidXR0b25fZGlzYWJsZWRcIjpcIkJ1dHRvblJhZGlvX19idXR0b25fZGlzYWJsZWQtLTFnOEZWXCIsXCJidXR0b25fY2hlY2tlZFwiOlwiQnV0dG9uUmFkaW9fX2J1dHRvbl9jaGVja2VkLS01d0VUeFwiLFwiYnV0dG9uX3dpZGVcIjpcIkJ1dHRvblJhZGlvX19idXR0b25fd2lkZS0tMTIxcFRcIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcInJvd1wiOlwiUm93X19yb3ctLTFwVWMyXCIsXCJjb250cm9sbHNcIjpcIlJvd19fY29udHJvbGxzLS1YTG5uLVwiLFwicm93VGl0bGVcIjpcIlJvd19fcm93VGl0bGUtLW1NUHpvXCIsXCJyYWRpb0dyb3VwXCI6XCJSb3dfX3JhZGlvR3JvdXAtLTJoWWNnXCIsXCJCdXR0b25SYWRpb1wiOlwiUm93X19CdXR0b25SYWRpby0tbXJYUktcIixcImlucHV0V3JhcHBlclwiOlwiUm93X19pbnB1dFdyYXBwZXItLTN0YVV3XCIsXCJwZXJjZW50SWNvblwiOlwiUm93X19wZXJjZW50SWNvbi0tZF9KWXlcIixcImlucHV0XCI6XCJSb3dfX2lucHV0LS1NaGEtNlwiLFwiaW5wdXREaXNhYmxlZFwiOlwiUm93X19pbnB1dERpc2FibGVkLS0zekJialwifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wicHJpY2VTZXR0aW5nc1wiOlwiUHJpY2VTZXR0aW5nc19fcHJpY2VTZXR0aW5ncy0tMnhHbDFcIixcInRpdGxlXCI6XCJQcmljZVNldHRpbmdzX190aXRsZS0tM1hfVjdcIixcInRpdGxlRGVzY3JpcHRpb25cIjpcIlByaWNlU2V0dGluZ3NfX3RpdGxlRGVzY3JpcHRpb24tLWdvR0o4XCIsXCJoZWFkZXJcIjpcIlByaWNlU2V0dGluZ3NfX2hlYWRlci0tMnpxakhcIixcImljb25Dcm9zc1dyYXBwZXJcIjpcIlByaWNlU2V0dGluZ3NfX2ljb25Dcm9zc1dyYXBwZXItLTFUazhGXCIsXCJpbmZvSXRlbVwiOlwiUHJpY2VTZXR0aW5nc19faW5mb0l0ZW0tLTJwSDBJXCIsXCJyb3dzQmxvY2tcIjpcIlByaWNlU2V0dGluZ3NfX3Jvd3NCbG9jay0tMzk3cU1cIixcInJvd3NCbG9ja1dyYXBwZXJcIjpcIlByaWNlU2V0dGluZ3NfX3Jvd3NCbG9ja1dyYXBwZXItLTI2Q2FFXCIsXCJyb3dzQmxvY2tXcmFwcGVyU2hvcnRlbmVkXCI6XCJQcmljZVNldHRpbmdzX19yb3dzQmxvY2tXcmFwcGVyU2hvcnRlbmVkLS0xR3hBSVwiLFwiZm9ybVwiOlwiUHJpY2VTZXR0aW5nc19fZm9ybS0tcnhoZ1RcIixcInNlbmRGb3JtQnV0dG9uXCI6XCJQcmljZVNldHRpbmdzX19zZW5kRm9ybUJ1dHRvbi0tM0E5T21cIixcImRlc2NyaXB0aW9uXCI6XCJQcmljZVNldHRpbmdzX19kZXNjcmlwdGlvbi0tMkg0dV9cIixcInN1Y2Nlc3NNZXNzYWdlXCI6XCJQcmljZVNldHRpbmdzX19zdWNjZXNzTWVzc2FnZS0tMkNBN3VcIixcInN1Z2dlc3RDb21wZXRpdG9yQmxvY2tcIjpcIlByaWNlU2V0dGluZ3NfX3N1Z2dlc3RDb21wZXRpdG9yQmxvY2stLTN5d0dCXCIsXCJpbnB1dFwiOlwiUHJpY2VTZXR0aW5nc19faW5wdXQtLXZoS21WXCIsXCJsb2FkZXJCbG9ja1wiOlwiUHJpY2VTZXR0aW5nc19fbG9hZGVyQmxvY2stLTF2UGN1XCIsXCJsb2FkZXJcIjpcIlByaWNlU2V0dGluZ3NfX2xvYWRlci0tM1ZDMzZcIn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfVxuICB0cnkge1xuICAgIC8vIElFIDggaGFzIGEgYnJva2VuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB0aGF0IG9ubHkgd29ya3Mgb24gRE9NIG9iamVjdHMuXG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24ob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoXG4gICAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsXG4gICAgdG9TdHJpbmdUYWdTeW1ib2wsXG4gICAgXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICk7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgZGVmaW5lKHByb3RvdHlwZSwgbWV0aG9kLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgZGVmaW5lKGdlbkZ1biwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIik7XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JcIik7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMVxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBsPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49NjAxMDMscD02MDEwNjtleHBvcnRzLkZyYWdtZW50PTYwMTA3O2V4cG9ydHMuU3RyaWN0TW9kZT02MDEwODtleHBvcnRzLlByb2ZpbGVyPTYwMTE0O3ZhciBxPTYwMTA5LHI9NjAxMTAsdD02MDExMjtleHBvcnRzLlN1c3BlbnNlPTYwMTEzO3ZhciB1PTYwMTE1LHY9NjAxMTY7XG5pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgdz1TeW1ib2wuZm9yO249dyhcInJlYWN0LmVsZW1lbnRcIik7cD13KFwicmVhY3QucG9ydGFsXCIpO2V4cG9ydHMuRnJhZ21lbnQ9dyhcInJlYWN0LmZyYWdtZW50XCIpO2V4cG9ydHMuU3RyaWN0TW9kZT13KFwicmVhY3Quc3RyaWN0X21vZGVcIik7ZXhwb3J0cy5Qcm9maWxlcj13KFwicmVhY3QucHJvZmlsZXJcIik7cT13KFwicmVhY3QucHJvdmlkZXJcIik7cj13KFwicmVhY3QuY29udGV4dFwiKTt0PXcoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtleHBvcnRzLlN1c3BlbnNlPXcoXCJyZWFjdC5zdXNwZW5zZVwiKTt1PXcoXCJyZWFjdC5tZW1vXCIpO3Y9dyhcInJlYWN0LmxhenlcIil9dmFyIHg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO1xuZnVuY3Rpb24geShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eCYmYVt4XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfWZ1bmN0aW9uIHooYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9XG52YXIgQT17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQj17fTtmdW5jdGlvbiBDKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUI7dGhpcy51cGRhdGVyPWN8fEF9Qy5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtDLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3Ioeig4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Qy5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07XG5mdW5jdGlvbiBEKCl7fUQucHJvdG90eXBlPUMucHJvdG90eXBlO2Z1bmN0aW9uIEUoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX12YXIgRj1FLnByb3RvdHlwZT1uZXcgRDtGLmNvbnN0cnVjdG9yPUU7bChGLEMucHJvdG90eXBlKTtGLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBHPXtjdXJyZW50Om51bGx9LEg9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxJPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBKKGEsYixjKXt2YXIgZSxkPXt9LGs9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoZSBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoaz1cIlwiK2Iua2V5KSxiKUguY2FsbChiLGUpJiYhSS5oYXNPd25Qcm9wZXJ0eShlKSYmKGRbZV09YltlXSk7dmFyIGc9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1nKWQuY2hpbGRyZW49YztlbHNlIGlmKDE8Zyl7Zm9yKHZhciBmPUFycmF5KGcpLG09MDttPGc7bSsrKWZbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1mfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihlIGluIGc9YS5kZWZhdWx0UHJvcHMsZyl2b2lkIDA9PT1kW2VdJiYoZFtlXT1nW2VdKTtyZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEsa2V5OmsscmVmOmgscHJvcHM6ZCxfb3duZXI6Ry5jdXJyZW50fX1cbmZ1bmN0aW9uIEsoYSxiKXtyZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIEwoYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PW59ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIithLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBNPS9cXC8rL2c7ZnVuY3Rpb24gTihhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShcIlwiK2Eua2V5KTpiLnRvU3RyaW5nKDM2KX1cbmZ1bmN0aW9uIE8oYSxiLGMsZSxkKXt2YXIgaz10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09a3x8XCJib29sZWFuXCI9PT1rKWE9bnVsbDt2YXIgaD0hMTtpZihudWxsPT09YSloPSEwO2Vsc2Ugc3dpdGNoKGspe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6aD0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgbjpjYXNlIHA6aD0hMH19aWYoaClyZXR1cm4gaD1hLGQ9ZChoKSxhPVwiXCI9PT1lP1wiLlwiK04oaCwwKTplLEFycmF5LmlzQXJyYXkoZCk/KGM9XCJcIixudWxsIT1hJiYoYz1hLnJlcGxhY2UoTSxcIiQmL1wiKStcIi9cIiksTyhkLGIsYyxcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBhfSkpOm51bGwhPWQmJihMKGQpJiYoZD1LKGQsYysoIWQua2V5fHxoJiZoLmtleT09PWQua2V5P1wiXCI6KFwiXCIrZC5rZXkpLnJlcGxhY2UoTSxcIiQmL1wiKStcIi9cIikrYSkpLGIucHVzaChkKSksMTtoPTA7ZT1cIlwiPT09ZT9cIi5cIjplK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBnPVxuMDtnPGEubGVuZ3RoO2crKyl7az1hW2ddO3ZhciBmPWUrTihrLGcpO2grPU8oayxiLGMsZixkKX1lbHNlIGlmKGY9eShhKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksZz0wOyEoaz1hLm5leHQoKSkuZG9uZTspaz1rLnZhbHVlLGY9ZStOKGssZysrKSxoKz1PKGssYixjLGYsZCk7ZWxzZSBpZihcIm9iamVjdFwiPT09ayl0aHJvdyBiPVwiXCIrYSxFcnJvcih6KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1iP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmIpKTtyZXR1cm4gaH1mdW5jdGlvbiBQKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdLGQ9MDtPKGEsZSxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChjLGEsZCsrKX0pO3JldHVybiBlfVxuZnVuY3Rpb24gUShhKXtpZigtMT09PWEuX3N0YXR1cyl7dmFyIGI9YS5fcmVzdWx0O2I9YigpO2EuX3N0YXR1cz0wO2EuX3Jlc3VsdD1iO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSl9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0O3Rocm93IGEuX3Jlc3VsdDt9dmFyIFI9e2N1cnJlbnQ6bnVsbH07ZnVuY3Rpb24gUygpe3ZhciBhPVIuY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBFcnJvcih6KDMyMSkpO3JldHVybiBhfXZhciBUPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlIsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6e3RyYW5zaXRpb246MH0sUmVhY3RDdXJyZW50T3duZXI6RyxJc1NvbWVSZW5kZXJlckFjdGluZzp7Y3VycmVudDohMX0sYXNzaWduOmx9O1xuZXhwb3J0cy5DaGlsZHJlbj17bWFwOlAsZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7UChhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGMpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1AoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBQKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIUwoYSkpdGhyb3cgRXJyb3IoeigxNDMpKTtyZXR1cm4gYX19O2V4cG9ydHMuQ29tcG9uZW50PUM7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUU7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1UO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKHooMjY3LGEpKTt2YXIgZT1sKHt9LGEucHJvcHMpLGQ9YS5rZXksaz1hLnJlZixoPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZixoPUcuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZz1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihmIGluIGIpSC5jYWxsKGIsZikmJiFJLmhhc093blByb3BlcnR5KGYpJiYoZVtmXT12b2lkIDA9PT1iW2ZdJiZ2b2lkIDAhPT1nP2dbZl06YltmXSl9dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWUuY2hpbGRyZW49YztlbHNlIGlmKDE8Zil7Zz1BcnJheShmKTtmb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLFxua2V5OmQscmVmOmsscHJvcHM6ZSxfb3duZXI6aH19O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOnIsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjpxLF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1KO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1KLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07ZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp0LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1MO1xuZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp2LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6UX19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp1LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDb250ZXh0KGEsYil9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9O1xuZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUygpLnVzZVJlZHVjZXIoYSxiLGMpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gUygpLnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gUygpLnVzZVN0YXRlKGEpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjFcIjtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4xXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxtPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHI9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiB5KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifWlmKCFhYSl0aHJvdyBFcnJvcih5KDIyNykpO3ZhciBiYT1uZXcgU2V0LGNhPXt9O2Z1bmN0aW9uIGRhKGEsYil7ZWEoYSxiKTtlYShhK1wiQ2FwdHVyZVwiLGIpfVxuZnVuY3Rpb24gZWEoYSxiKXtjYVthXT1iO2ZvcihhPTA7YTxiLmxlbmd0aDthKyspYmEuYWRkKGJbYV0pfVxudmFyIGZhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSxoYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8saWE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxcbmphPXt9LGthPXt9O2Z1bmN0aW9uIGxhKGEpe2lmKGlhLmNhbGwoa2EsYSkpcmV0dXJuITA7aWYoaWEuY2FsbChqYSxhKSlyZXR1cm4hMTtpZihoYS50ZXN0KGEpKXJldHVybiBrYVthXT0hMDtqYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBtYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIG5hKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fG1hKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gQihhLGIsYyxkLGUsZixnKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zjt0aGlzLnJlbW92ZUVtcHR5U3RyaW5nPWd9dmFyIEQ9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwwLCExLGEsbnVsbCwhMSwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07RFtiXT1uZXcgQihiLDEsITEsYVsxXSxudWxsLCExLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwyLCExLGEsbnVsbCwhMSwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBkaXNhYmxlUmVtb3RlUGxheWJhY2sgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMywhMCxhLG51bGwsITEsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNCwhMSxhLG51bGwsITEsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw2LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO3ZhciBvYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHBhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLFxucGEpO0RbYl09bmV3IEIoYiwxLCExLGEsbnVsbCwhMSwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxwYSk7RFtiXT1uZXcgQihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxwYSk7RFtiXT1uZXcgQihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuRC54bGlua0hyZWY9bmV3IEIoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwLCExKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwLCEwKX0pO1xuZnVuY3Rpb24gcWEoYSxiLGMsZCl7dmFyIGU9RC5oYXNPd25Qcm9wZXJ0eShiKT9EW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwobmEoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP2xhKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG52YXIgcmE9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsc2E9NjAxMDMsdGE9NjAxMDYsdWE9NjAxMDcsd2E9NjAxMDgseGE9NjAxMTQseWE9NjAxMDksemE9NjAxMTAsQWE9NjAxMTIsQmE9NjAxMTMsQ2E9NjAxMjAsRGE9NjAxMTUsRWE9NjAxMTYsRmE9NjAxMjEsR2E9NjAxMjgsSGE9NjAxMjksSWE9NjAxMzAsSmE9NjAxMzE7XG5pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgRT1TeW1ib2wuZm9yO3NhPUUoXCJyZWFjdC5lbGVtZW50XCIpO3RhPUUoXCJyZWFjdC5wb3J0YWxcIik7dWE9RShcInJlYWN0LmZyYWdtZW50XCIpO3dhPUUoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTt4YT1FKFwicmVhY3QucHJvZmlsZXJcIik7eWE9RShcInJlYWN0LnByb3ZpZGVyXCIpO3phPUUoXCJyZWFjdC5jb250ZXh0XCIpO0FhPUUoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtCYT1FKFwicmVhY3Quc3VzcGVuc2VcIik7Q2E9RShcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik7RGE9RShcInJlYWN0Lm1lbW9cIik7RWE9RShcInJlYWN0LmxhenlcIik7RmE9RShcInJlYWN0LmJsb2NrXCIpO0UoXCJyZWFjdC5zY29wZVwiKTtHYT1FKFwicmVhY3Qub3BhcXVlLmlkXCIpO0hhPUUoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO0lhPUUoXCJyZWFjdC5vZmZzY3JlZW5cIik7SmE9RShcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIil9XG52YXIgS2E9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIExhKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1LYSYmYVtLYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH12YXIgTWE7ZnVuY3Rpb24gTmEoYSl7aWYodm9pZCAwPT09TWEpdHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGMpe3ZhciBiPWMuc3RhY2sudHJpbSgpLm1hdGNoKC9cXG4oICooYXQgKT8pLyk7TWE9YiYmYlsxXXx8XCJcIn1yZXR1cm5cIlxcblwiK01hK2F9dmFyIE9hPSExO1xuZnVuY3Rpb24gUGEoYSxiKXtpZighYXx8T2EpcmV0dXJuXCJcIjtPYT0hMDt2YXIgYz1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT12b2lkIDA7dHJ5e2lmKGIpaWYoYj1mdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJwcm9wc1wiLHtzZXQ6ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO319KSxcIm9iamVjdFwiPT09dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuY29uc3RydWN0KXt0cnl7UmVmbGVjdC5jb25zdHJ1Y3QoYixbXSl9Y2F0Y2goayl7dmFyIGQ9a31SZWZsZWN0LmNvbnN0cnVjdChhLFtdLGIpfWVsc2V7dHJ5e2IuY2FsbCgpfWNhdGNoKGspe2Q9a31hLmNhbGwoYi5wcm90b3R5cGUpfWVsc2V7dHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGspe2Q9a31hKCl9fWNhdGNoKGspe2lmKGsmJmQmJlwic3RyaW5nXCI9PT10eXBlb2Ygay5zdGFjayl7Zm9yKHZhciBlPWsuc3RhY2suc3BsaXQoXCJcXG5cIiksXG5mPWQuc3RhY2suc3BsaXQoXCJcXG5cIiksZz1lLmxlbmd0aC0xLGg9Zi5sZW5ndGgtMTsxPD1nJiYwPD1oJiZlW2ddIT09ZltoXTspaC0tO2Zvcig7MTw9ZyYmMDw9aDtnLS0saC0tKWlmKGVbZ10hPT1mW2hdKXtpZigxIT09Z3x8MSE9PWgpe2RvIGlmKGctLSxoLS0sMD5ofHxlW2ddIT09ZltoXSlyZXR1cm5cIlxcblwiK2VbZ10ucmVwbGFjZShcIiBhdCBuZXcgXCIsXCIgYXQgXCIpO3doaWxlKDE8PWcmJjA8PWgpfWJyZWFrfX19ZmluYWxseXtPYT0hMSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1jfXJldHVybihhPWE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOlwiXCIpP05hKGEpOlwiXCJ9XG5mdW5jdGlvbiBRYShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gTmEoYS50eXBlKTtjYXNlIDE2OnJldHVybiBOYShcIkxhenlcIik7Y2FzZSAxMzpyZXR1cm4gTmEoXCJTdXNwZW5zZVwiKTtjYXNlIDE5OnJldHVybiBOYShcIlN1c3BlbnNlTGlzdFwiKTtjYXNlIDA6Y2FzZSAyOmNhc2UgMTU6cmV0dXJuIGE9UGEoYS50eXBlLCExKSxhO2Nhc2UgMTE6cmV0dXJuIGE9UGEoYS50eXBlLnJlbmRlciwhMSksYTtjYXNlIDIyOnJldHVybiBhPVBhKGEudHlwZS5fcmVuZGVyLCExKSxhO2Nhc2UgMTpyZXR1cm4gYT1QYShhLnR5cGUsITApLGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFJhKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgdGE6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIHhhOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIHdhOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgQmE6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgQ2E6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgemE6cmV0dXJuKGEuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgeWE6cmV0dXJuKGEuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgQWE6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7XG5yZXR1cm4gYS5kaXNwbGF5TmFtZXx8KFwiXCIhPT1iP1wiRm9yd2FyZFJlZihcIitiK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIERhOnJldHVybiBSYShhLnR5cGUpO2Nhc2UgRmE6cmV0dXJuIFJhKGEuX3JlbmRlcik7Y2FzZSBFYTpiPWEuX3BheWxvYWQ7YT1hLl9pbml0O3RyeXtyZXR1cm4gUmEoYShiKSl9Y2F0Y2goYyl7fX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBTYShhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gVGEoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFVhKGEpe3ZhciBiPVRhKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBWYShhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VWEoYSkpfWZ1bmN0aW9uIFdhKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1UYShhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIFhhKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1cbmZ1bmN0aW9uIFlhKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBtKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBaYShhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1TYShudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uICRhKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmcWEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIGFiKGEsYil7JGEoYSxiKTt2YXIgYz1TYShiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9iYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZiYihhLGIudHlwZSxTYShiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGNiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBiYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fFhhKGEub3duZXJEb2N1bWVudCkhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1mdW5jdGlvbiBkYihhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBlYihhLGIpe2E9bSh7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPWRiKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIGZiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitTYShjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZ2IoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHkoOTEpKTtyZXR1cm4gbSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBoYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcih5KDkyKSk7aWYoQXJyYXkuaXNBcnJheShjKSl7aWYoISgxPj1jLmxlbmd0aCkpdGhyb3cgRXJyb3IoeSg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlNhKGMpfX1cbmZ1bmN0aW9uIGliKGEsYil7dmFyIGM9U2EoYi52YWx1ZSksZD1TYShiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGpiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9dmFyIGtiPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIGxiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gbWIoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2xiKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIG5iLG9iPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PWtiLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle25iPW5ifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO25iLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPW5iLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIHBiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgcWI9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0scmI9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHFiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JiLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7cWJbYl09cWJbYV19KX0pO2Z1bmN0aW9uIHNiKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxxYi5oYXNPd25Qcm9wZXJ0eShhKSYmcWJbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gdGIoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9c2IoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgdWI9bSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIHZiKGEsYil7aWYoYil7aWYodWJbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih5KDEzNyxhKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcih5KDYwKSk7aWYoIShcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih5KDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcih5KDYyKSk7fX1cbmZ1bmN0aW9uIHdiKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX1mdW5jdGlvbiB4YihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9dmFyIHliPW51bGwsemI9bnVsbCxBYj1udWxsO1xuZnVuY3Rpb24gQmIoYSl7aWYoYT1DYihhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHliKXRocm93IEVycm9yKHkoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9RGIoYikseWIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRWIoYSl7emI/QWI/QWIucHVzaChhKTpBYj1bYV06emI9YX1mdW5jdGlvbiBGYigpe2lmKHpiKXt2YXIgYT16YixiPUFiO0FiPXpiPW51bGw7QmIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUJiKGJbYV0pfX1mdW5jdGlvbiBHYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEhiKGEsYixjLGQsZSl7cmV0dXJuIGEoYixjLGQsZSl9ZnVuY3Rpb24gSWIoKXt9dmFyIEpiPUdiLEtiPSExLExiPSExO2Z1bmN0aW9uIE1iKCl7aWYobnVsbCE9PXpifHxudWxsIT09QWIpSWIoKSxGYigpfVxuZnVuY3Rpb24gTmIoYSxiLGMpe2lmKExiKXJldHVybiBhKGIsYyk7TGI9ITA7dHJ5e3JldHVybiBKYihhLGIsYyl9ZmluYWxseXtMYj0hMSxNYigpfX1cbmZ1bmN0aW9uIE9iKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9RGIoYyk7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IoeSgyMzEsYix0eXBlb2YgYykpO3JldHVybiBjfXZhciBQYj0hMTtpZihmYSl0cnl7dmFyIFFiPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShRYixcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7UGI9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsUWIsUWIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKX1jYXRjaChhKXtQYj0hMX1mdW5jdGlvbiBSYihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobil7dGhpcy5vbkVycm9yKG4pfX12YXIgU2I9ITEsVGI9bnVsbCxVYj0hMSxWYj1udWxsLFdiPXtvbkVycm9yOmZ1bmN0aW9uKGEpe1NiPSEwO1RiPWF9fTtmdW5jdGlvbiBYYihhLGIsYyxkLGUsZixnLGgsayl7U2I9ITE7VGI9bnVsbDtSYi5hcHBseShXYixhcmd1bWVudHMpfVxuZnVuY3Rpb24gWWIoYSxiLGMsZCxlLGYsZyxoLGspe1hiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihTYil7aWYoU2Ipe3ZhciBsPVRiO1NiPSExO1RiPW51bGx9ZWxzZSB0aHJvdyBFcnJvcih5KDE5OCkpO1VifHwoVWI9ITAsVmI9bCl9fWZ1bmN0aW9uIFpiKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5mbGFncyYxMDI2KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gJGIoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBhYyhhKXtpZihaYihhKSE9PWEpdGhyb3cgRXJyb3IoeSgxODgpKTt9XG5mdW5jdGlvbiBiYyhhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1aYihhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcih5KDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBhYyhlKSxhO2lmKGY9PT1kKXJldHVybiBhYyhlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHkoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IoeSgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcih5KDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGNjKGEpe2E9YmMoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkYyhhLGIpe2Zvcih2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09Yjspe2lmKGI9PT1hfHxiPT09YylyZXR1cm4hMDtiPWIucmV0dXJufXJldHVybiExfXZhciBlYyxmYyxnYyxoYyxpYz0hMSxqYz1bXSxrYz1udWxsLGxjPW51bGwsbWM9bnVsbCxuYz1uZXcgTWFwLG9jPW5ldyBNYXAscGM9W10scWM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gcmMoYSxiLGMsZCxlKXtyZXR1cm57YmxvY2tlZE9uOmEsZG9tRXZlbnROYW1lOmIsZXZlbnRTeXN0ZW1GbGFnczpjfDE2LG5hdGl2ZUV2ZW50OmUsdGFyZ2V0Q29udGFpbmVyczpbZF19fWZ1bmN0aW9uIHNjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6a2M9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmxjPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOm1jPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpuYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpvYy5kZWxldGUoYi5wb2ludGVySWQpfX1cbmZ1bmN0aW9uIHRjKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9cmMoYixjLGQsZSxmKSxudWxsIT09YiYmKGI9Q2IoYiksbnVsbCE9PWImJmZjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtiPWEudGFyZ2V0Q29udGFpbmVycztudWxsIT09ZSYmLTE9PT1iLmluZGV4T2YoZSkmJmIucHVzaChlKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHVjKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c2luXCI6cmV0dXJuIGtjPXRjKGtjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBsYz10YyhsYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gbWM9dGMobWMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtuYy5zZXQoZix0YyhuYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsb2Muc2V0KGYsdGMob2MuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gdmMoYSl7dmFyIGI9d2MoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1aYihiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj0kYihjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtoYyhhLmxhbmVQcmlvcml0eSxmdW5jdGlvbigpe3IudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KGEucHJpb3JpdHksZnVuY3Rpb24oKXtnYyhjKX0pfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5oeWRyYXRlKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIHhjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz15YyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09YylyZXR1cm4gYj1DYihjKSxudWxsIT09YiYmZmMoYiksYS5ibG9ja2VkT249YywhMTtiLnNoaWZ0KCl9cmV0dXJuITB9ZnVuY3Rpb24gemMoYSxiLGMpe3hjKGEpJiZjLmRlbGV0ZShiKX1cbmZ1bmN0aW9uIEFjKCl7Zm9yKGljPSExOzA8amMubGVuZ3RoOyl7dmFyIGE9amNbMF07aWYobnVsbCE9PWEuYmxvY2tlZE9uKXthPUNiKGEuYmxvY2tlZE9uKTtudWxsIT09YSYmZWMoYSk7YnJlYWt9Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpe2EuYmxvY2tlZE9uPWM7YnJlYWt9Yi5zaGlmdCgpfW51bGw9PT1hLmJsb2NrZWRPbiYmamMuc2hpZnQoKX1udWxsIT09a2MmJnhjKGtjKSYmKGtjPW51bGwpO251bGwhPT1sYyYmeGMobGMpJiYobGM9bnVsbCk7bnVsbCE9PW1jJiZ4YyhtYykmJihtYz1udWxsKTtuYy5mb3JFYWNoKHpjKTtvYy5mb3JFYWNoKHpjKX1cbmZ1bmN0aW9uIEJjKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCxpY3x8KGljPSEwLHIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LEFjKSkpfVxuZnVuY3Rpb24gQ2MoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gQmMoYixhKX1pZigwPGpjLmxlbmd0aCl7QmMoamNbMF0sYSk7Zm9yKHZhciBjPTE7YzxqYy5sZW5ndGg7YysrKXt2YXIgZD1qY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PWtjJiZCYyhrYyxhKTtudWxsIT09bGMmJkJjKGxjLGEpO251bGwhPT1tYyYmQmMobWMsYSk7bmMuZm9yRWFjaChiKTtvYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxwYy5sZW5ndGg7YysrKWQ9cGNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPHBjLmxlbmd0aCYmKGM9cGNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspdmMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZwYy5zaGlmdCgpfVxuZnVuY3Rpb24gRGMoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgRWM9e2FuaW1hdGlvbmVuZDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOkRjKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sRmM9e30sR2M9e307XG5mYSYmKEdjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIEVjLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIEVjLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIEVjLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIEVjLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gSGMoYSl7aWYoRmNbYV0pcmV0dXJuIEZjW2FdO2lmKCFFY1thXSlyZXR1cm4gYTt2YXIgYj1FY1thXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBHYylyZXR1cm4gRmNbYV09YltjXTtyZXR1cm4gYX1cbnZhciBJYz1IYyhcImFuaW1hdGlvbmVuZFwiKSxKYz1IYyhcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxLYz1IYyhcImFuaW1hdGlvbnN0YXJ0XCIpLExjPUhjKFwidHJhbnNpdGlvbmVuZFwiKSxNYz1uZXcgTWFwLE5jPW5ldyBNYXAsT2M9W1wiYWJvcnRcIixcImFib3J0XCIsSWMsXCJhbmltYXRpb25FbmRcIixKYyxcImFuaW1hdGlvbkl0ZXJhdGlvblwiLEtjLFwiYW5pbWF0aW9uU3RhcnRcIixcImNhbnBsYXlcIixcImNhblBsYXlcIixcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiLFwiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCIsXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCIsXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiLFwiZW5kZWRcIixcImVuZGVkXCIsXCJlcnJvclwiLFwiZXJyb3JcIixcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiLFwibG9hZFwiLFwibG9hZFwiLFwibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiLFwibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCIsXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiLFxuXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiLFwicGxheWluZ1wiLFwicGxheWluZ1wiLFwicHJvZ3Jlc3NcIixcInByb2dyZXNzXCIsXCJzZWVraW5nXCIsXCJzZWVraW5nXCIsXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCIsXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCIsXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCIsTGMsXCJ0cmFuc2l0aW9uRW5kXCIsXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdO2Z1bmN0aW9uIFBjKGEsYil7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKz0yKXt2YXIgZD1hW2NdLGU9YVtjKzFdO2U9XCJvblwiKyhlWzBdLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSk7TmMuc2V0KGQsYik7TWMuc2V0KGQsZSk7ZGEoZSxbZF0pfX12YXIgUWM9ci51bnN0YWJsZV9ub3c7UWMoKTt2YXIgRj04O1xuZnVuY3Rpb24gUmMoYSl7aWYoMCE9PSgxJmEpKXJldHVybiBGPTE1LDE7aWYoMCE9PSgyJmEpKXJldHVybiBGPTE0LDI7aWYoMCE9PSg0JmEpKXJldHVybiBGPTEzLDQ7dmFyIGI9MjQmYTtpZigwIT09YilyZXR1cm4gRj0xMixiO2lmKDAhPT0oYSYzMikpcmV0dXJuIEY9MTEsMzI7Yj0xOTImYTtpZigwIT09YilyZXR1cm4gRj0xMCxiO2lmKDAhPT0oYSYyNTYpKXJldHVybiBGPTksMjU2O2I9MzU4NCZhO2lmKDAhPT1iKXJldHVybiBGPTgsYjtpZigwIT09KGEmNDA5NikpcmV0dXJuIEY9Nyw0MDk2O2I9NDE4NjExMiZhO2lmKDAhPT1iKXJldHVybiBGPTYsYjtiPTYyOTE0NTYwJmE7aWYoMCE9PWIpcmV0dXJuIEY9NSxiO2lmKGEmNjcxMDg4NjQpcmV0dXJuIEY9NCw2NzEwODg2NDtpZigwIT09KGEmMTM0MjE3NzI4KSlyZXR1cm4gRj0zLDEzNDIxNzcyODtiPTgwNTMwNjM2OCZhO2lmKDAhPT1iKXJldHVybiBGPTIsYjtpZigwIT09KDEwNzM3NDE4MjQmYSkpcmV0dXJuIEY9MSwxMDczNzQxODI0O1xuRj04O3JldHVybiBhfWZ1bmN0aW9uIFNjKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiAxNTtjYXNlIDk4OnJldHVybiAxMDtjYXNlIDk3OmNhc2UgOTY6cmV0dXJuIDg7Y2FzZSA5NTpyZXR1cm4gMjtkZWZhdWx0OnJldHVybiAwfX1mdW5jdGlvbiBUYyhhKXtzd2l0Y2goYSl7Y2FzZSAxNTpjYXNlIDE0OnJldHVybiA5OTtjYXNlIDEzOmNhc2UgMTI6Y2FzZSAxMTpjYXNlIDEwOnJldHVybiA5ODtjYXNlIDk6Y2FzZSA4OmNhc2UgNzpjYXNlIDY6Y2FzZSA0OmNhc2UgNTpyZXR1cm4gOTc7Y2FzZSAzOmNhc2UgMjpjYXNlIDE6cmV0dXJuIDk1O2Nhc2UgMDpyZXR1cm4gOTA7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDM1OCxhKSk7fX1cbmZ1bmN0aW9uIFVjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXM7aWYoMD09PWMpcmV0dXJuIEY9MDt2YXIgZD0wLGU9MCxmPWEuZXhwaXJlZExhbmVzLGc9YS5zdXNwZW5kZWRMYW5lcyxoPWEucGluZ2VkTGFuZXM7aWYoMCE9PWYpZD1mLGU9Rj0xNTtlbHNlIGlmKGY9YyYxMzQyMTc3MjcsMCE9PWYpe3ZhciBrPWYmfmc7MCE9PWs/KGQ9UmMoayksZT1GKTooaCY9ZiwwIT09aCYmKGQ9UmMoaCksZT1GKSl9ZWxzZSBmPWMmfmcsMCE9PWY/KGQ9UmMoZiksZT1GKTowIT09aCYmKGQ9UmMoaCksZT1GKTtpZigwPT09ZClyZXR1cm4gMDtkPTMxLVZjKGQpO2Q9YyYoKDA+ZD8wOjE8PGQpPDwxKS0xO2lmKDAhPT1iJiZiIT09ZCYmMD09PShiJmcpKXtSYyhiKTtpZihlPD1GKXJldHVybiBiO0Y9ZX1iPWEuZW50YW5nbGVkTGFuZXM7aWYoMCE9PWIpZm9yKGE9YS5lbnRhbmdsZW1lbnRzLGImPWQ7MDxiOyljPTMxLVZjKGIpLGU9MTw8YyxkfD1hW2NdLGImPX5lO3JldHVybiBkfVxuZnVuY3Rpb24gV2MoYSl7YT1hLnBlbmRpbmdMYW5lcyYtMTA3Mzc0MTgyNTtyZXR1cm4gMCE9PWE/YTphJjEwNzM3NDE4MjQ/MTA3Mzc0MTgyNDowfWZ1bmN0aW9uIFhjKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTU6cmV0dXJuIDE7Y2FzZSAxNDpyZXR1cm4gMjtjYXNlIDEyOnJldHVybiBhPVljKDI0Jn5iKSwwPT09YT9YYygxMCxiKTphO2Nhc2UgMTA6cmV0dXJuIGE9WWMoMTkyJn5iKSwwPT09YT9YYyg4LGIpOmE7Y2FzZSA4OnJldHVybiBhPVljKDM1ODQmfmIpLDA9PT1hJiYoYT1ZYyg0MTg2MTEyJn5iKSwwPT09YSYmKGE9NTEyKSksYTtjYXNlIDI6cmV0dXJuIGI9WWMoODA1MzA2MzY4Jn5iKSwwPT09YiYmKGI9MjY4NDM1NDU2KSxifXRocm93IEVycm9yKHkoMzU4LGEpKTt9ZnVuY3Rpb24gWWMoYSl7cmV0dXJuIGEmLWF9ZnVuY3Rpb24gWmMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiAkYyhhLGIsYyl7YS5wZW5kaW5nTGFuZXN8PWI7dmFyIGQ9Yi0xO2Euc3VzcGVuZGVkTGFuZXMmPWQ7YS5waW5nZWRMYW5lcyY9ZDthPWEuZXZlbnRUaW1lcztiPTMxLVZjKGIpO2FbYl09Y312YXIgVmM9TWF0aC5jbHozMj9NYXRoLmNsejMyOmFkLGJkPU1hdGgubG9nLGNkPU1hdGguTE4yO2Z1bmN0aW9uIGFkKGEpe3JldHVybiAwPT09YT8zMjozMS0oYmQoYSkvY2R8MCl8MH12YXIgZGQ9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxlZD1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxmZD0hMDtmdW5jdGlvbiBnZChhLGIsYyxkKXtLYnx8SWIoKTt2YXIgZT1oZCxmPUtiO0tiPSEwO3RyeXtIYihlLGEsYixjLGQpfWZpbmFsbHl7KEtiPWYpfHxNYigpfX1mdW5jdGlvbiBpZChhLGIsYyxkKXtlZChkZCxoZC5iaW5kKG51bGwsYSxiLGMsZCkpfVxuZnVuY3Rpb24gaGQoYSxiLGMsZCl7aWYoZmQpe3ZhciBlO2lmKChlPTA9PT0oYiY0KSkmJjA8amMubGVuZ3RoJiYtMTxxYy5pbmRleE9mKGEpKWE9cmMobnVsbCxhLGIsYyxkKSxqYy5wdXNoKGEpO2Vsc2V7dmFyIGY9eWMoYSxiLGMsZCk7aWYobnVsbD09PWYpZSYmc2MoYSxkKTtlbHNle2lmKGUpe2lmKC0xPHFjLmluZGV4T2YoYSkpe2E9cmMoZixhLGIsYyxkKTtqYy5wdXNoKGEpO3JldHVybn1pZih1YyhmLGEsYixjLGQpKXJldHVybjtzYyhhLGQpfWpkKGEsYixkLG51bGwsYyl9fX19XG5mdW5jdGlvbiB5YyhhLGIsYyxkKXt2YXIgZT14YihkKTtlPXdjKGUpO2lmKG51bGwhPT1lKXt2YXIgZj1aYihlKTtpZihudWxsPT09ZillPW51bGw7ZWxzZXt2YXIgZz1mLnRhZztpZigxMz09PWcpe2U9JGIoZik7aWYobnVsbCE9PWUpcmV0dXJuIGU7ZT1udWxsfWVsc2UgaWYoMz09PWcpe2lmKGYuc3RhdGVOb2RlLmh5ZHJhdGUpcmV0dXJuIDM9PT1mLnRhZz9mLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7ZT1udWxsfWVsc2UgZiE9PWUmJihlPW51bGwpfX1qZChhLGIsZCxlLGMpO3JldHVybiBudWxsfXZhciBrZD1udWxsLGxkPW51bGwsbWQ9bnVsbDtcbmZ1bmN0aW9uIG5kKCl7aWYobWQpcmV0dXJuIG1kO3ZhciBhLGI9bGQsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gbWQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1mdW5jdGlvbiBvZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1mdW5jdGlvbiBwZCgpe3JldHVybiEwfWZ1bmN0aW9uIHFkKCl7cmV0dXJuITF9XG5mdW5jdGlvbiByZChhKXtmdW5jdGlvbiBiKGIsZCxlLGYsZyl7dGhpcy5fcmVhY3ROYW1lPWI7dGhpcy5fdGFyZ2V0SW5zdD1lO3RoaXMudHlwZT1kO3RoaXMubmF0aXZlRXZlbnQ9Zjt0aGlzLnRhcmdldD1nO3RoaXMuY3VycmVudFRhcmdldD1udWxsO2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJihiPWFbY10sdGhpc1tjXT1iP2IoZik6ZltjXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWYuZGVmYXVsdFByZXZlbnRlZD9mLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1mLnJldHVyblZhbHVlKT9wZDpxZDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXFkO3JldHVybiB0aGlzfW0oYi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJlxuKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPXBkKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXBkKX0scGVyc2lzdDpmdW5jdGlvbigpe30saXNQZXJzaXN0ZW50OnBkfSk7cmV0dXJuIGJ9XG52YXIgc2Q9e2V2ZW50UGhhc2U6MCxidWJibGVzOjAsY2FuY2VsYWJsZTowLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6MCxpc1RydXN0ZWQ6MH0sdGQ9cmQoc2QpLHVkPW0oe30sc2Qse3ZpZXc6MCxkZXRhaWw6MH0pLHZkPXJkKHVkKSx3ZCx4ZCx5ZCxBZD1tKHt9LHVkLHtzY3JlZW5YOjAsc2NyZWVuWTowLGNsaWVudFg6MCxjbGllbnRZOjAscGFnZVg6MCxwYWdlWTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkLGJ1dHRvbjowLGJ1dHRvbnM6MCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hLnJlbGF0ZWRUYXJnZXQ/YS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50OmEucmVsYXRlZFRhcmdldH0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpblxuYSlyZXR1cm4gYS5tb3ZlbWVudFg7YSE9PXlkJiYoeWQmJlwibW91c2Vtb3ZlXCI9PT1hLnR5cGU/KHdkPWEuc2NyZWVuWC15ZC5zY3JlZW5YLHhkPWEuc2NyZWVuWS15ZC5zY3JlZW5ZKTp4ZD13ZD0wLHlkPWEpO3JldHVybiB3ZH0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe3JldHVyblwibW92ZW1lbnRZXCJpbiBhP2EubW92ZW1lbnRZOnhkfX0pLEJkPXJkKEFkKSxDZD1tKHt9LEFkLHtkYXRhVHJhbnNmZXI6MH0pLERkPXJkKENkKSxFZD1tKHt9LHVkLHtyZWxhdGVkVGFyZ2V0OjB9KSxGZD1yZChFZCksR2Q9bSh7fSxzZCx7YW5pbWF0aW9uTmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksSGQ9cmQoR2QpLElkPW0oe30sc2Qse2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxKZD1yZChJZCksS2Q9bSh7fSxzZCx7ZGF0YTowfSksTGQ9cmQoS2QpLE1kPXtFc2M6XCJFc2NhcGVcIixcblNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LE5kPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLDExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLFxuMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxPZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGQoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHpkKCl7cmV0dXJuIFBkfVxudmFyIFFkPW0oe30sdWQse2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9TWRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP05kW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sY29kZTowLGxvY2F0aW9uOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLHJlcGVhdDowLGxvY2FsZTowLGdldE1vZGlmaWVyU3RhdGU6emQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29kKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxSZD1yZChRZCksU2Q9bSh7fSxBZCx7cG9pbnRlcklkOjAsd2lkdGg6MCxoZWlnaHQ6MCxwcmVzc3VyZTowLHRhbmdlbnRpYWxQcmVzc3VyZTowLHRpbHRYOjAsdGlsdFk6MCx0d2lzdDowLHBvaW50ZXJUeXBlOjAsaXNQcmltYXJ5OjB9KSxUZD1yZChTZCksVWQ9bSh7fSx1ZCx7dG91Y2hlczowLHRhcmdldFRvdWNoZXM6MCxjaGFuZ2VkVG91Y2hlczowLGFsdEtleTowLG1ldGFLZXk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkfSksVmQ9cmQoVWQpLFdkPW0oe30sc2Qse3Byb3BlcnR5TmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksWGQ9cmQoV2QpLFlkPW0oe30sQWQse2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LFxuZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOjAsZGVsdGFNb2RlOjB9KSxaZD1yZChZZCksJGQ9WzksMTMsMjcsMzJdLGFlPWZhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxiZT1udWxsO2ZhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihiZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO3ZhciBjZT1mYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWJlLGRlPWZhJiYoIWFlfHxiZSYmODxiZSYmMTE+PWJlKSxlZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxmZT0hMTtcbmZ1bmN0aW9uIGdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09JGQuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImZvY3Vzb3V0XCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gaGUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgaWU9ITE7ZnVuY3Rpb24gamUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGhlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtmZT0hMDtyZXR1cm4gZWU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09ZWUmJmZlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIGtlKGEsYil7aWYoaWUpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWFlJiZnZShhLGIpPyhhPW5kKCksbWQ9bGQ9a2Q9bnVsbCxpZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gZGUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIGxlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIG1lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhbGVbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIG5lKGEsYixjLGQpe0ViKGQpO2I9b2UoYixcIm9uQ2hhbmdlXCIpOzA8Yi5sZW5ndGgmJihjPW5ldyB0ZChcIm9uQ2hhbmdlXCIsXCJjaGFuZ2VcIixudWxsLGMsZCksYS5wdXNoKHtldmVudDpjLGxpc3RlbmVyczpifSkpfXZhciBwZT1udWxsLHFlPW51bGw7ZnVuY3Rpb24gcmUoYSl7c2UoYSwwKX1mdW5jdGlvbiB0ZShhKXt2YXIgYj11ZShhKTtpZihXYShiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIHZlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIHdlPSExO2lmKGZhKXt2YXIgeGU7aWYoZmEpe3ZhciB5ZT1cIm9uaW5wdXRcImluIGRvY3VtZW50O2lmKCF5ZSl7dmFyIHplPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7emUuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLFwicmV0dXJuO1wiKTt5ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgemUub25pbnB1dH14ZT15ZX1lbHNlIHhlPSExO3dlPXhlJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpfWZ1bmN0aW9uIEFlKCl7cGUmJihwZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkscWU9cGU9bnVsbCl9ZnVuY3Rpb24gQmUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJnRlKHFlKSl7dmFyIGI9W107bmUoYixxZSxhLHhiKGEpKTthPXJlO2lmKEtiKWEoYik7ZWxzZXtLYj0hMDt0cnl7R2IoYSxiKX1maW5hbGx5e0tiPSExLE1iKCl9fX19XG5mdW5jdGlvbiBDZShhLGIsYyl7XCJmb2N1c2luXCI9PT1hPyhBZSgpLHBlPWIscWU9YyxwZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkpOlwiZm9jdXNvdXRcIj09PWEmJkFlKCl9ZnVuY3Rpb24gRGUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gdGUocWUpfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gRmUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gR2UoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBIZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpHZSxJZT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gSmUoYSxiKXtpZihIZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIUllLmNhbGwoYixjW2RdKXx8IUhlKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9ZnVuY3Rpb24gS2UoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gTGUoYSxiKXt2YXIgYz1LZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1LZShjKX19ZnVuY3Rpb24gTWUoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9NZShhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBOZSgpe2Zvcih2YXIgYT13aW5kb3csYj1YYSgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1YYShhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBPZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxudmFyIFBlPWZhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsUWU9bnVsbCxSZT1udWxsLFNlPW51bGwsVGU9ITE7XG5mdW5jdGlvbiBVZShhLGIsYyl7dmFyIGQ9Yy53aW5kb3c9PT1jP2MuZG9jdW1lbnQ6OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7VGV8fG51bGw9PVFlfHxRZSE9PVhhKGQpfHwoZD1RZSxcInNlbGVjdGlvblN0YXJ0XCJpbiBkJiZPZShkKT9kPXtzdGFydDpkLnNlbGVjdGlvblN0YXJ0LGVuZDpkLnNlbGVjdGlvbkVuZH06KGQ9KGQub3duZXJEb2N1bWVudCYmZC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGQ9e2FuY2hvck5vZGU6ZC5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpkLmFuY2hvck9mZnNldCxmb2N1c05vZGU6ZC5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6ZC5mb2N1c09mZnNldH0pLFNlJiZKZShTZSxkKXx8KFNlPWQsZD1vZShSZSxcIm9uU2VsZWN0XCIpLDA8ZC5sZW5ndGgmJihiPW5ldyB0ZChcIm9uU2VsZWN0XCIsXCJzZWxlY3RcIixudWxsLGIsYyksYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpkfSksYi50YXJnZXQ9UWUpKSl9XG5QYyhcImNhbmNlbCBjYW5jZWwgY2xpY2sgY2xpY2sgY2xvc2UgY2xvc2UgY29udGV4dG1lbnUgY29udGV4dE1lbnUgY29weSBjb3B5IGN1dCBjdXQgYXV4Y2xpY2sgYXV4Q2xpY2sgZGJsY2xpY2sgZG91YmxlQ2xpY2sgZHJhZ2VuZCBkcmFnRW5kIGRyYWdzdGFydCBkcmFnU3RhcnQgZHJvcCBkcm9wIGZvY3VzaW4gZm9jdXMgZm9jdXNvdXQgYmx1ciBpbnB1dCBpbnB1dCBpbnZhbGlkIGludmFsaWQga2V5ZG93biBrZXlEb3duIGtleXByZXNzIGtleVByZXNzIGtleXVwIGtleVVwIG1vdXNlZG93biBtb3VzZURvd24gbW91c2V1cCBtb3VzZVVwIHBhc3RlIHBhc3RlIHBhdXNlIHBhdXNlIHBsYXkgcGxheSBwb2ludGVyY2FuY2VsIHBvaW50ZXJDYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlckRvd24gcG9pbnRlcnVwIHBvaW50ZXJVcCByYXRlY2hhbmdlIHJhdGVDaGFuZ2UgcmVzZXQgcmVzZXQgc2Vla2VkIHNlZWtlZCBzdWJtaXQgc3VibWl0IHRvdWNoY2FuY2VsIHRvdWNoQ2FuY2VsIHRvdWNoZW5kIHRvdWNoRW5kIHRvdWNoc3RhcnQgdG91Y2hTdGFydCB2b2x1bWVjaGFuZ2Ugdm9sdW1lQ2hhbmdlXCIuc3BsaXQoXCIgXCIpLFxuMCk7UGMoXCJkcmFnIGRyYWcgZHJhZ2VudGVyIGRyYWdFbnRlciBkcmFnZXhpdCBkcmFnRXhpdCBkcmFnbGVhdmUgZHJhZ0xlYXZlIGRyYWdvdmVyIGRyYWdPdmVyIG1vdXNlbW92ZSBtb3VzZU1vdmUgbW91c2VvdXQgbW91c2VPdXQgbW91c2VvdmVyIG1vdXNlT3ZlciBwb2ludGVybW92ZSBwb2ludGVyTW92ZSBwb2ludGVyb3V0IHBvaW50ZXJPdXQgcG9pbnRlcm92ZXIgcG9pbnRlck92ZXIgc2Nyb2xsIHNjcm9sbCB0b2dnbGUgdG9nZ2xlIHRvdWNobW92ZSB0b3VjaE1vdmUgd2hlZWwgd2hlZWxcIi5zcGxpdChcIiBcIiksMSk7UGMoT2MsMik7Zm9yKHZhciBWZT1cImNoYW5nZSBzZWxlY3Rpb25jaGFuZ2UgdGV4dElucHV0IGNvbXBvc2l0aW9uc3RhcnQgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb251cGRhdGVcIi5zcGxpdChcIiBcIiksV2U9MDtXZTxWZS5sZW5ndGg7V2UrKylOYy5zZXQoVmVbV2VdLDApO2VhKFwib25Nb3VzZUVudGVyXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7XG5lYShcIm9uTW91c2VMZWF2ZVwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2VhKFwib25Qb2ludGVyRW50ZXJcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZWEoXCJvblBvaW50ZXJMZWF2ZVwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtkYShcIm9uQ2hhbmdlXCIsXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvblNlbGVjdFwiLFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQmVmb3JlSW5wdXRcIixbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl0pO2RhKFwib25Db21wb3NpdGlvbkVuZFwiLFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO1xuZGEoXCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcImNvbXBvc2l0aW9uc3RhcnQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO2RhKFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO3ZhciBYZT1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksWWU9bmV3IFNldChcImNhbmNlbCBjbG9zZSBpbnZhbGlkIGxvYWQgc2Nyb2xsIHRvZ2dsZVwiLnNwbGl0KFwiIFwiKS5jb25jYXQoWGUpKTtcbmZ1bmN0aW9uIFplKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1jO1liKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBzZShhLGIpe2I9MCE9PShiJjQpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLGU9ZC5ldmVudDtkPWQubGlzdGVuZXJzO2E6e3ZhciBmPXZvaWQgMDtpZihiKWZvcih2YXIgZz1kLmxlbmd0aC0xOzA8PWc7Zy0tKXt2YXIgaD1kW2ddLGs9aC5pbnN0YW5jZSxsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9ZWxzZSBmb3IoZz0wO2c8ZC5sZW5ndGg7ZysrKXtoPWRbZ107az1oLmluc3RhbmNlO2w9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7WmUoZSxoLGwpO2Y9a319fWlmKFViKXRocm93IGE9VmIsVWI9ITEsVmI9bnVsbCxhO31cbmZ1bmN0aW9uIEcoYSxiKXt2YXIgYz0kZShiKSxkPWErXCJfX2J1YmJsZVwiO2MuaGFzKGQpfHwoYWYoYixhLDIsITEpLGMuYWRkKGQpKX12YXIgYmY9XCJfcmVhY3RMaXN0ZW5pbmdcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiBjZihhKXthW2JmXXx8KGFbYmZdPSEwLGJhLmZvckVhY2goZnVuY3Rpb24oYil7WWUuaGFzKGIpfHxkZihiLCExLGEsbnVsbCk7ZGYoYiwhMCxhLG51bGwpfSkpfVxuZnVuY3Rpb24gZGYoYSxiLGMsZCl7dmFyIGU9NDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbNF0/YXJndW1lbnRzWzRdOjAsZj1jO1wic2VsZWN0aW9uY2hhbmdlXCI9PT1hJiY5IT09Yy5ub2RlVHlwZSYmKGY9Yy5vd25lckRvY3VtZW50KTtpZihudWxsIT09ZCYmIWImJlllLmhhcyhhKSl7aWYoXCJzY3JvbGxcIiE9PWEpcmV0dXJuO2V8PTI7Zj1kfXZhciBnPSRlKGYpLGg9YStcIl9fXCIrKGI/XCJjYXB0dXJlXCI6XCJidWJibGVcIik7Zy5oYXMoaCl8fChiJiYoZXw9NCksYWYoZixhLGUsYiksZy5hZGQoaCkpfVxuZnVuY3Rpb24gYWYoYSxiLGMsZCl7dmFyIGU9TmMuZ2V0KGIpO3N3aXRjaCh2b2lkIDA9PT1lPzI6ZSl7Y2FzZSAwOmU9Z2Q7YnJlYWs7Y2FzZSAxOmU9aWQ7YnJlYWs7ZGVmYXVsdDplPWhkfWM9ZS5iaW5kKG51bGwsYixjLGEpO2U9dm9pZCAwOyFQYnx8XCJ0b3VjaHN0YXJ0XCIhPT1iJiZcInRvdWNobW92ZVwiIT09YiYmXCJ3aGVlbFwiIT09Ynx8KGU9ITApO2Q/dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtjYXB0dXJlOiEwLHBhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITApOnZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7cGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMSl9XG5mdW5jdGlvbiBqZChhLGIsYyxkLGUpe3ZhciBmPWQ7aWYoMD09PShiJjEpJiYwPT09KGImMikmJm51bGwhPT1kKWE6Zm9yKDs7KXtpZihudWxsPT09ZClyZXR1cm47dmFyIGc9ZC50YWc7aWYoMz09PWd8fDQ9PT1nKXt2YXIgaD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKGg9PT1lfHw4PT09aC5ub2RlVHlwZSYmaC5wYXJlbnROb2RlPT09ZSlicmVhaztpZig0PT09Zylmb3IoZz1kLnJldHVybjtudWxsIT09Zzspe3ZhciBrPWcudGFnO2lmKDM9PT1rfHw0PT09aylpZihrPWcuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saz09PWV8fDg9PT1rLm5vZGVUeXBlJiZrLnBhcmVudE5vZGU9PT1lKXJldHVybjtnPWcucmV0dXJufWZvcig7bnVsbCE9PWg7KXtnPXdjKGgpO2lmKG51bGw9PT1nKXJldHVybjtrPWcudGFnO2lmKDU9PT1rfHw2PT09ayl7ZD1mPWc7Y29udGludWUgYX1oPWgucGFyZW50Tm9kZX19ZD1kLnJldHVybn1OYihmdW5jdGlvbigpe3ZhciBkPWYsZT14YihjKSxnPVtdO1xuYTp7dmFyIGg9TWMuZ2V0KGEpO2lmKHZvaWQgMCE9PWgpe3ZhciBrPXRkLHg9YTtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PW9kKGMpKWJyZWFrIGE7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjprPVJkO2JyZWFrO2Nhc2UgXCJmb2N1c2luXCI6eD1cImZvY3VzXCI7az1GZDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjp4PVwiYmx1clwiO2s9RmQ7YnJlYWs7Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6az1GZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pYnJlYWsgYTtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOms9QmQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6az1cbkRkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOms9VmQ7YnJlYWs7Y2FzZSBJYzpjYXNlIEpjOmNhc2UgS2M6az1IZDticmVhaztjYXNlIExjOms9WGQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOms9dmQ7YnJlYWs7Y2FzZSBcIndoZWVsXCI6az1aZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjprPUpkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOms9VGR9dmFyIHc9MCE9PShiJjQpLHo9IXcmJlwic2Nyb2xsXCI9PT1hLHU9dz9udWxsIT09aD9oK1wiQ2FwdHVyZVwiOm51bGw6aDt3PVtdO2Zvcih2YXIgdD1kLHE7bnVsbCE9PVxudDspe3E9dDt2YXIgdj1xLnN0YXRlTm9kZTs1PT09cS50YWcmJm51bGwhPT12JiYocT12LG51bGwhPT11JiYodj1PYih0LHUpLG51bGwhPXYmJncucHVzaChlZih0LHYscSkpKSk7aWYoeilicmVhazt0PXQucmV0dXJufTA8dy5sZW5ndGgmJihoPW5ldyBrKGgseCxudWxsLGMsZSksZy5wdXNoKHtldmVudDpoLGxpc3RlbmVyczp3fSkpfX1pZigwPT09KGImNykpe2E6e2g9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWE7az1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoaCYmMD09PShiJjE2KSYmKHg9Yy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KSYmKHdjKHgpfHx4W2ZmXSkpYnJlYWsgYTtpZihrfHxoKXtoPWUud2luZG93PT09ZT9lOihoPWUub3duZXJEb2N1bWVudCk/aC5kZWZhdWx0Vmlld3x8aC5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGspe2lmKHg9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCxrPWQseD14P3djKHgpOm51bGwsbnVsbCE9PVxueCYmKHo9WmIoeCkseCE9PXp8fDUhPT14LnRhZyYmNiE9PXgudGFnKSl4PW51bGx9ZWxzZSBrPW51bGwseD1kO2lmKGshPT14KXt3PUJkO3Y9XCJvbk1vdXNlTGVhdmVcIjt1PVwib25Nb3VzZUVudGVyXCI7dD1cIm1vdXNlXCI7aWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKXc9VGQsdj1cIm9uUG9pbnRlckxlYXZlXCIsdT1cIm9uUG9pbnRlckVudGVyXCIsdD1cInBvaW50ZXJcIjt6PW51bGw9PWs/aDp1ZShrKTtxPW51bGw9PXg/aDp1ZSh4KTtoPW5ldyB3KHYsdCtcImxlYXZlXCIsayxjLGUpO2gudGFyZ2V0PXo7aC5yZWxhdGVkVGFyZ2V0PXE7dj1udWxsO3djKGUpPT09ZCYmKHc9bmV3IHcodSx0K1wiZW50ZXJcIix4LGMsZSksdy50YXJnZXQ9cSx3LnJlbGF0ZWRUYXJnZXQ9eix2PXcpO3o9djtpZihrJiZ4KWI6e3c9azt1PXg7dD0wO2ZvcihxPXc7cTtxPWdmKHEpKXQrKztxPTA7Zm9yKHY9dTt2O3Y9Z2YodikpcSsrO2Zvcig7MDx0LXE7KXc9Z2YodyksdC0tO2Zvcig7MDxxLXQ7KXU9XG5nZih1KSxxLS07Zm9yKDt0LS07KXtpZih3PT09dXx8bnVsbCE9PXUmJnc9PT11LmFsdGVybmF0ZSlicmVhayBiO3c9Z2Yodyk7dT1nZih1KX13PW51bGx9ZWxzZSB3PW51bGw7bnVsbCE9PWsmJmhmKGcsaCxrLHcsITEpO251bGwhPT14JiZudWxsIT09eiYmaGYoZyx6LHgsdywhMCl9fX1hOntoPWQ/dWUoZCk6d2luZG93O2s9aC5ub2RlTmFtZSYmaC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1rfHxcImlucHV0XCI9PT1rJiZcImZpbGVcIj09PWgudHlwZSl2YXIgSj12ZTtlbHNlIGlmKG1lKGgpKWlmKHdlKUo9RmU7ZWxzZXtKPURlO3ZhciBLPUNlfWVsc2Uoaz1oLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09ay50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09aC50eXBlfHxcInJhZGlvXCI9PT1oLnR5cGUpJiYoSj1FZSk7aWYoSiYmKEo9SihhLGQpKSl7bmUoZyxKLGMsZSk7YnJlYWsgYX1LJiZLKGEsaCxkKTtcImZvY3Vzb3V0XCI9PT1hJiYoSz1oLl93cmFwcGVyU3RhdGUpJiZcbksuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWgudHlwZSYmYmIoaCxcIm51bWJlclwiLGgudmFsdWUpfUs9ZD91ZShkKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6aWYobWUoSyl8fFwidHJ1ZVwiPT09Sy5jb250ZW50RWRpdGFibGUpUWU9SyxSZT1kLFNlPW51bGw7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6U2U9UmU9UWU9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6VGU9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOlRlPSExO1VlKGcsYyxlKTticmVhaztjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUGUpYnJlYWs7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpVZShnLGMsZSl9dmFyIFE7aWYoYWUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIEw9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIjticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOkw9XCJvbkNvbXBvc2l0aW9uRW5kXCI7YnJlYWsgYjtcbmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOkw9XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCI7YnJlYWsgYn1MPXZvaWQgMH1lbHNlIGllP2dlKGEsYykmJihMPVwib25Db21wb3NpdGlvbkVuZFwiKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKEw9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7TCYmKGRlJiZcImtvXCIhPT1jLmxvY2FsZSYmKGllfHxcIm9uQ29tcG9zaXRpb25TdGFydFwiIT09TD9cIm9uQ29tcG9zaXRpb25FbmRcIj09PUwmJmllJiYoUT1uZCgpKTooa2Q9ZSxsZD1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxpZT0hMCkpLEs9b2UoZCxMKSwwPEsubGVuZ3RoJiYoTD1uZXcgTGQoTCxhLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OkwsbGlzdGVuZXJzOkt9KSxRP0wuZGF0YT1ROihRPWhlKGMpLG51bGwhPT1RJiYoTC5kYXRhPVEpKSkpO2lmKFE9Y2U/amUoYSxjKTprZShhLGMpKWQ9b2UoZCxcIm9uQmVmb3JlSW5wdXRcIiksMDxkLmxlbmd0aCYmKGU9bmV3IExkKFwib25CZWZvcmVJbnB1dFwiLFxuXCJiZWZvcmVpbnB1dFwiLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmUsbGlzdGVuZXJzOmR9KSxlLmRhdGE9USl9c2UoZyxiKX0pfWZ1bmN0aW9uIGVmKGEsYixjKXtyZXR1cm57aW5zdGFuY2U6YSxsaXN0ZW5lcjpiLGN1cnJlbnRUYXJnZXQ6Y319ZnVuY3Rpb24gb2UoYSxiKXtmb3IodmFyIGM9YitcIkNhcHR1cmVcIixkPVtdO251bGwhPT1hOyl7dmFyIGU9YSxmPWUuc3RhdGVOb2RlOzU9PT1lLnRhZyYmbnVsbCE9PWYmJihlPWYsZj1PYihhLGMpLG51bGwhPWYmJmQudW5zaGlmdChlZihhLGYsZSkpLGY9T2IoYSxiKSxudWxsIT1mJiZkLnB1c2goZWYoYSxmLGUpKSk7YT1hLnJldHVybn1yZXR1cm4gZH1mdW5jdGlvbiBnZihhKXtpZihudWxsPT09YSlyZXR1cm4gbnVsbDtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gaGYoYSxiLGMsZCxlKXtmb3IodmFyIGY9Yi5fcmVhY3ROYW1lLGc9W107bnVsbCE9PWMmJmMhPT1kOyl7dmFyIGg9YyxrPWguYWx0ZXJuYXRlLGw9aC5zdGF0ZU5vZGU7aWYobnVsbCE9PWsmJms9PT1kKWJyZWFrOzU9PT1oLnRhZyYmbnVsbCE9PWwmJihoPWwsZT8oaz1PYihjLGYpLG51bGwhPWsmJmcudW5zaGlmdChlZihjLGssaCkpKTplfHwoaz1PYihjLGYpLG51bGwhPWsmJmcucHVzaChlZihjLGssaCkpKSk7Yz1jLnJldHVybn0wIT09Zy5sZW5ndGgmJmEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6Z30pfWZ1bmN0aW9uIGpmKCl7fXZhciBrZj1udWxsLGxmPW51bGw7ZnVuY3Rpb24gbWYoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gbmYoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBvZj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxwZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDA7ZnVuY3Rpb24gcWYoYSl7MT09PWEubm9kZVR5cGU/YS50ZXh0Q29udGVudD1cIlwiOjk9PT1hLm5vZGVUeXBlJiYoYT1hLmJvZHksbnVsbCE9YSYmKGEudGV4dENvbnRlbnQ9XCJcIikpfVxuZnVuY3Rpb24gcmYoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWt9cmV0dXJuIGF9ZnVuY3Rpb24gc2YoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIiRcIj09PWN8fFwiJCFcIj09PWN8fFwiJD9cIj09PWMpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlXCIvJFwiPT09YyYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIHRmPTA7ZnVuY3Rpb24gdWYoYSl7cmV0dXJueyQkdHlwZW9mOkdhLHRvU3RyaW5nOmEsdmFsdWVPZjphfX12YXIgdmY9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksd2Y9XCJfX3JlYWN0RmliZXIkXCIrdmYseGY9XCJfX3JlYWN0UHJvcHMkXCIrdmYsZmY9XCJfX3JlYWN0Q29udGFpbmVyJFwiK3ZmLHlmPVwiX19yZWFjdEV2ZW50cyRcIit2ZjtcbmZ1bmN0aW9uIHdjKGEpe3ZhciBiPWFbd2ZdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW2ZmXXx8Y1t3Zl0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1zZihhKTtudWxsIT09YTspe2lmKGM9YVt3Zl0pcmV0dXJuIGM7YT1zZihhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2IoYSl7YT1hW3dmXXx8YVtmZl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHVlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcih5KDMzKSk7fWZ1bmN0aW9uIERiKGEpe3JldHVybiBhW3hmXXx8bnVsbH1cbmZ1bmN0aW9uICRlKGEpe3ZhciBiPWFbeWZdO3ZvaWQgMD09PWImJihiPWFbeWZdPW5ldyBTZXQpO3JldHVybiBifXZhciB6Zj1bXSxBZj0tMTtmdW5jdGlvbiBCZihhKXtyZXR1cm57Y3VycmVudDphfX1mdW5jdGlvbiBIKGEpezA+QWZ8fChhLmN1cnJlbnQ9emZbQWZdLHpmW0FmXT1udWxsLEFmLS0pfWZ1bmN0aW9uIEkoYSxiKXtBZisrO3pmW0FmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIENmPXt9LE09QmYoQ2YpLE49QmYoITEpLERmPUNmO1xuZnVuY3Rpb24gRWYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBDZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBGZihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uIEdmKCl7SChOKTtIKE0pfWZ1bmN0aW9uIEhmKGEsYixjKXtpZihNLmN1cnJlbnQhPT1DZil0aHJvdyBFcnJvcih5KDE2OCkpO0koTSxiKTtJKE4sYyl9XG5mdW5jdGlvbiBJZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGEpKXRocm93IEVycm9yKHkoMTA4LFJhKGIpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIG0oe30sYyxkKX1mdW5jdGlvbiBKZihhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8Q2Y7RGY9TS5jdXJyZW50O0koTSxhKTtJKE4sTi5jdXJyZW50KTtyZXR1cm4hMH1mdW5jdGlvbiBLZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IoeSgxNjkpKTtjPyhhPUlmKGEsYixEZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEgoTiksSChNKSxJKE0sYSkpOkgoTik7SShOLGMpfVxudmFyIExmPW51bGwsTWY9bnVsbCxOZj1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxPZj1yLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssUGY9ci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxRZj1yLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFJmPXIudW5zdGFibGVfcmVxdWVzdFBhaW50LFNmPXIudW5zdGFibGVfbm93LFRmPXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsVWY9ci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxWZj1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFdmPXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksWGY9ci51bnN0YWJsZV9Mb3dQcmlvcml0eSxZZj1yLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxaZj17fSwkZj12b2lkIDAhPT1SZj9SZjpmdW5jdGlvbigpe30sYWc9bnVsbCxiZz1udWxsLGNnPSExLGRnPVNmKCksTz0xRTQ+ZGc/U2Y6ZnVuY3Rpb24oKXtyZXR1cm4gU2YoKS1kZ307XG5mdW5jdGlvbiBlZygpe3N3aXRjaChUZigpKXtjYXNlIFVmOnJldHVybiA5OTtjYXNlIFZmOnJldHVybiA5ODtjYXNlIFdmOnJldHVybiA5NztjYXNlIFhmOnJldHVybiA5NjtjYXNlIFlmOnJldHVybiA5NTtkZWZhdWx0OnRocm93IEVycm9yKHkoMzMyKSk7fX1mdW5jdGlvbiBmZyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gVWY7Y2FzZSA5ODpyZXR1cm4gVmY7Y2FzZSA5NzpyZXR1cm4gV2Y7Y2FzZSA5NjpyZXR1cm4gWGY7Y2FzZSA5NTpyZXR1cm4gWWY7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZ2coYSxiKXthPWZnKGEpO3JldHVybiBOZihhLGIpfWZ1bmN0aW9uIGhnKGEsYixjKXthPWZnKGEpO3JldHVybiBPZihhLGIsYyl9ZnVuY3Rpb24gaWcoKXtpZihudWxsIT09Ymcpe3ZhciBhPWJnO2JnPW51bGw7UGYoYSl9amcoKX1cbmZ1bmN0aW9uIGpnKCl7aWYoIWNnJiZudWxsIT09YWcpe2NnPSEwO3ZhciBhPTA7dHJ5e3ZhciBiPWFnO2dnKDk5LGZ1bmN0aW9uKCl7Zm9yKDthPGIubGVuZ3RoO2ErKyl7dmFyIGM9YlthXTtkbyBjPWMoITApO3doaWxlKG51bGwhPT1jKX19KTthZz1udWxsfWNhdGNoKGMpe3Rocm93IG51bGwhPT1hZyYmKGFnPWFnLnNsaWNlKGErMSkpLE9mKFVmLGlnKSxjO31maW5hbGx5e2NnPSExfX19dmFyIGtnPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnO2Z1bmN0aW9uIGxnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pO3JldHVybiBifXJldHVybiBifXZhciBtZz1CZihudWxsKSxuZz1udWxsLG9nPW51bGwscGc9bnVsbDtmdW5jdGlvbiBxZygpe3BnPW9nPW5nPW51bGx9XG5mdW5jdGlvbiByZyhhKXt2YXIgYj1tZy5jdXJyZW50O0gobWcpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gc2coYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5hbHRlcm5hdGU7aWYoKGEuY2hpbGRMYW5lcyZiKT09PWIpaWYobnVsbD09PWN8fChjLmNoaWxkTGFuZXMmYik9PT1iKWJyZWFrO2Vsc2UgYy5jaGlsZExhbmVzfD1iO2Vsc2UgYS5jaGlsZExhbmVzfD1iLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKTthPWEucmV0dXJufX1mdW5jdGlvbiB0ZyhhLGIpe25nPWE7cGc9b2c9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJigwIT09KGEubGFuZXMmYikmJih1Zz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiB2ZyhhLGIpe2lmKHBnIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YilwZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtpZihudWxsPT09b2cpe2lmKG51bGw9PT1uZyl0aHJvdyBFcnJvcih5KDMwOCkpO29nPWI7bmcuZGVwZW5kZW5jaWVzPXtsYW5lczowLGZpcnN0Q29udGV4dDpiLHJlc3BvbmRlcnM6bnVsbH19ZWxzZSBvZz1vZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgd2c9ITE7ZnVuY3Rpb24geGcoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6bnVsbCxsYXN0QmFzZVVwZGF0ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24geWcoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gemcoYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19ZnVuY3Rpb24gQWcoYSxiKXthPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWEpe2E9YS5zaGFyZWQ7dmFyIGM9YS5wZW5kaW5nO251bGw9PT1jP2IubmV4dD1iOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKTthLnBlbmRpbmc9Yn19XG5mdW5jdGlvbiBCZyhhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24gQ2coYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTt3Zz0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBuPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1uKXtuPW4udXBkYXRlUXVldWU7dmFyIEE9bi5sYXN0QmFzZVVwZGF0ZTtBIT09ZyYmKG51bGw9PT1BP24uZmlyc3RCYXNlVXBkYXRlPWw6QS5uZXh0PWwsbi5sYXN0QmFzZVVwZGF0ZT1rKX19aWYobnVsbCE9PWYpe0E9ZS5iYXNlU3RhdGU7Zz0wO249bD1rPW51bGw7ZG97aD1mLmxhbmU7dmFyIHA9Zi5ldmVudFRpbWU7aWYoKGQmaCk9PT1oKXtudWxsIT09biYmKG49bi5uZXh0PXtldmVudFRpbWU6cCxsYW5lOjAsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssXG5uZXh0Om51bGx9KTthOnt2YXIgQz1hLHg9ZjtoPWI7cD1jO3N3aXRjaCh4LnRhZyl7Y2FzZSAxOkM9eC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDKXtBPUMuY2FsbChwLEEsaCk7YnJlYWsgYX1BPUM7YnJlYWsgYTtjYXNlIDM6Qy5mbGFncz1DLmZsYWdzJi00MDk3fDY0O2Nhc2UgMDpDPXgucGF5bG9hZDtoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBDP0MuY2FsbChwLEEsaCk6QztpZihudWxsPT09aHx8dm9pZCAwPT09aClicmVhayBhO0E9bSh7fSxBLGgpO2JyZWFrIGE7Y2FzZSAyOndnPSEwfX1udWxsIT09Zi5jYWxsYmFjayYmKGEuZmxhZ3N8PTMyLGg9ZS5lZmZlY3RzLG51bGw9PT1oP2UuZWZmZWN0cz1bZl06aC5wdXNoKGYpKX1lbHNlIHA9e2V2ZW50VGltZTpwLGxhbmU6aCx0YWc6Zi50YWcscGF5bG9hZDpmLnBheWxvYWQsY2FsbGJhY2s6Zi5jYWxsYmFjayxuZXh0Om51bGx9LG51bGw9PT1uPyhsPW49cCxrPUEpOm49bi5uZXh0PXAsZ3w9aDtmPWYubmV4dDtpZihudWxsPT09XG5mKWlmKGg9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09aClicmVhaztlbHNlIGY9aC5uZXh0LGgubmV4dD1udWxsLGUubGFzdEJhc2VVcGRhdGU9aCxlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSk7bnVsbD09PW4mJihrPUEpO2UuYmFzZVN0YXRlPWs7ZS5maXJzdEJhc2VVcGRhdGU9bDtlLmxhc3RCYXNlVXBkYXRlPW47RGd8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT1BfX1mdW5jdGlvbiBFZyhhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGUpdGhyb3cgRXJyb3IoeSgxOTEsZSkpO2UuY2FsbChkKX19fXZhciBGZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztcbmZ1bmN0aW9uIEdnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjptKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBLZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9aYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1IZygpLGU9SWcoYSksZj16ZyhkLGUpO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1IZygpLGU9SWcoYSksZj16ZyhkLGUpO2YudGFnPTE7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO0FnKGEsZik7SmcoYSxlLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBjPUhnKCksZD1JZyhhKSxlPXpnKGMsZCk7ZS50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGUuY2FsbGJhY2s9XG5iKTtBZyhhLGUpO0pnKGEsZCxjKX19O2Z1bmN0aW9uIExnKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUplKGMsZCl8fCFKZShlLGYpOiEwfVxuZnVuY3Rpb24gTWcoYSxiLGMpe3ZhciBkPSExLGU9Q2Y7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9dmcoZik6KGU9RmYoYik/RGY6TS5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/RWYoYSxlKTpDZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPUtnO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gTmcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJktnLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gT2coYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1GZzt4ZyhhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PXZnKGYpOihmPUZmKGIpP0RmOk0uY3VycmVudCxlLmNvbnRleHQ9RWYoYSxmKSk7Q2coYSxjLGUsZCk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKEdnKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fFxuKGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJktnLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLENnKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQpfXZhciBQZz1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gUWcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHkoMTQ3LGEpKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PUZnJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHkoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHkoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBSZyhhLGIpe2lmKFwidGV4dGFyZWFcIiE9PWEudHlwZSl0aHJvdyBFcnJvcih5KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO31cbmZ1bmN0aW9uIFNnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZmxhZ3M9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIpe2E9VGcoYSxiKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3M9MixcbmMpOmQ7Yi5mbGFncz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5mbGFncz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9VWcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9UWcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPVZnKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPVFnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVxuV2coYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG4oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPVhnKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gQShhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9VWcoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGM9VmcoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9UWcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIHRhOnJldHVybiBiPVdnKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZihQZyhiKXx8TGEoYikpcmV0dXJuIGI9WGcoYixcbmEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtSZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHAoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT11YT9uKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgdGE6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGx9aWYoUGcoYyl8fExhKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm4oYSxiLGMsZCxudWxsKTtSZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIEMoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8XG5udWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09dWE/bihiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgdGE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSl9aWYoUGcoZCl8fExhKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG4oYixhLGQsZSxudWxsKTtSZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIHgoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsdD1udWxsLHU9Zyx6PWc9MCxxPW51bGw7bnVsbCE9PXUmJno8aC5sZW5ndGg7eisrKXt1LmluZGV4Pno/KHE9dSx1PW51bGwpOnE9dS5zaWJsaW5nO3ZhciBuPXAoZSx1LGhbel0sayk7aWYobnVsbD09PW4pe251bGw9PT11JiYodT1xKTticmVha31hJiZ1JiZudWxsPT09XG5uLmFsdGVybmF0ZSYmYihlLHUpO2c9ZihuLGcseik7bnVsbD09PXQ/bD1uOnQuc2libGluZz1uO3Q9bjt1PXF9aWYoej09PWgubGVuZ3RoKXJldHVybiBjKGUsdSksbDtpZihudWxsPT09dSl7Zm9yKDt6PGgubGVuZ3RoO3orKyl1PUEoZSxoW3pdLGspLG51bGwhPT11JiYoZz1mKHUsZyx6KSxudWxsPT09dD9sPXU6dC5zaWJsaW5nPXUsdD11KTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7ejxoLmxlbmd0aDt6KyspcT1DKHUsZSx6LGhbel0sayksbnVsbCE9PXEmJihhJiZudWxsIT09cS5hbHRlcm5hdGUmJnUuZGVsZXRlKG51bGw9PT1xLmtleT96OnEua2V5KSxnPWYocSxnLHopLG51bGw9PT10P2w9cTp0LnNpYmxpbmc9cSx0PXEpO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gdyhlLGcsaCxrKXt2YXIgbD1MYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcih5KDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PVxuaCl0aHJvdyBFcnJvcih5KDE1MSkpO2Zvcih2YXIgdD1sPW51bGwsdT1nLHo9Zz0wLHE9bnVsbCxuPWgubmV4dCgpO251bGwhPT11JiYhbi5kb25lO3orKyxuPWgubmV4dCgpKXt1LmluZGV4Pno/KHE9dSx1PW51bGwpOnE9dS5zaWJsaW5nO3ZhciB3PXAoZSx1LG4udmFsdWUsayk7aWYobnVsbD09PXcpe251bGw9PT11JiYodT1xKTticmVha31hJiZ1JiZudWxsPT09dy5hbHRlcm5hdGUmJmIoZSx1KTtnPWYodyxnLHopO251bGw9PT10P2w9dzp0LnNpYmxpbmc9dzt0PXc7dT1xfWlmKG4uZG9uZSlyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7IW4uZG9uZTt6Kyssbj1oLm5leHQoKSluPUEoZSxuLnZhbHVlLGspLG51bGwhPT1uJiYoZz1mKG4sZyx6KSxudWxsPT09dD9sPW46dC5zaWJsaW5nPW4sdD1uKTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7IW4uZG9uZTt6Kyssbj1oLm5leHQoKSluPUModSxlLHosbi52YWx1ZSxrKSxudWxsIT09biYmKGEmJm51bGwhPT1uLmFsdGVybmF0ZSYmXG51LmRlbGV0ZShudWxsPT09bi5rZXk/ejpuLmtleSksZz1mKG4sZyx6KSxudWxsPT09dD9sPW46dC5zaWJsaW5nPW4sdD1uKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT11YSYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBzYTphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpe3N3aXRjaChrLnRhZyl7Y2FzZSA3OmlmKGYudHlwZT09PXVhKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWJyZWFrO2RlZmF1bHQ6aWYoay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7XG5kPWUoayxmLnByb3BzKTtkLnJlZj1RZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PXVhPyhkPVhnKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1WZyhmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1RZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgdGE6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9XG5XZyhmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1VZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihQZyhmKSlyZXR1cm4geChhLGQsZixoKTtpZihMYShmKSlyZXR1cm4gdyhhLGQsZixoKTtsJiZSZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAyMjpjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnRocm93IEVycm9yKHkoMTUyLFJhKGEudHlwZSl8fFwiQ29tcG9uZW50XCIpKTt9cmV0dXJuIGMoYSxkKX19dmFyIFlnPVNnKCEwKSxaZz1TZyghMSksJGc9e30sYWg9QmYoJGcpLGJoPUJmKCRnKSxjaD1CZigkZyk7XG5mdW5jdGlvbiBkaChhKXtpZihhPT09JGcpdGhyb3cgRXJyb3IoeSgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBlaChhLGIpe0koY2gsYik7SShiaCxhKTtJKGFoLCRnKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOm1iKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1tYihiLGEpfUgoYWgpO0koYWgsYil9ZnVuY3Rpb24gZmgoKXtIKGFoKTtIKGJoKTtIKGNoKX1mdW5jdGlvbiBnaChhKXtkaChjaC5jdXJyZW50KTt2YXIgYj1kaChhaC5jdXJyZW50KTt2YXIgYz1tYihiLGEudHlwZSk7YiE9PWMmJihJKGJoLGEpLEkoYWgsYykpfWZ1bmN0aW9uIGhoKGEpe2JoLmN1cnJlbnQ9PT1hJiYoSChhaCksSChiaCkpfXZhciBQPUJmKDApO1xuZnVuY3Rpb24gaWgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8XCIkP1wiPT09Yy5kYXRhfHxcIiQhXCI9PT1jLmRhdGEpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZmxhZ3MmNjQpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH12YXIgamg9bnVsbCxraD1udWxsLGxoPSExO1xuZnVuY3Rpb24gbWgoYSxiKXt2YXIgYz1uaCg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5mbGFncz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gb2goYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHBoKGEpe2lmKGxoKXt2YXIgYj1raDtpZihiKXt2YXIgYz1iO2lmKCFvaChhLGIpKXtiPXJmKGMubmV4dFNpYmxpbmcpO2lmKCFifHwhb2goYSxiKSl7YS5mbGFncz1hLmZsYWdzJi0xMDI1fDI7bGg9ITE7amg9YTtyZXR1cm59bWgoamgsYyl9amg9YTtraD1yZihiLmZpcnN0Q2hpbGQpfWVsc2UgYS5mbGFncz1hLmZsYWdzJi0xMDI1fDIsbGg9ITEsamg9YX19ZnVuY3Rpb24gcWgoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO2poPWF9XG5mdW5jdGlvbiByaChhKXtpZihhIT09amgpcmV0dXJuITE7aWYoIWxoKXJldHVybiBxaChhKSxsaD0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIW5mKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1raDtiOyltaChhLGIpLGI9cmYoYi5uZXh0U2libGluZyk7cWgoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcih5KDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiLyRcIj09PWMpe2lmKDA9PT1iKXtraD1yZihhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlXCIkXCIhPT1jJiZcIiQhXCIhPT1jJiZcIiQ/XCIhPT1jfHxiKyt9YT1hLm5leHRTaWJsaW5nfWtoPW51bGx9fWVsc2Uga2g9amg/cmYoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9XG5mdW5jdGlvbiBzaCgpe2toPWpoPW51bGw7bGg9ITF9dmFyIHRoPVtdO2Z1bmN0aW9uIHVoKCl7Zm9yKHZhciBhPTA7YTx0aC5sZW5ndGg7YSsrKXRoW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7dGgubGVuZ3RoPTB9dmFyIHZoPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsd2g9cmEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcseGg9MCxSPW51bGwsUz1udWxsLFQ9bnVsbCx5aD0hMSx6aD0hMTtmdW5jdGlvbiBBaCgpe3Rocm93IEVycm9yKHkoMzIxKSk7fWZ1bmN0aW9uIEJoKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUhlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBDaChhLGIsYyxkLGUsZil7eGg9ZjtSPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDt2aC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP0RoOkVoO2E9YyhkLGUpO2lmKHpoKXtmPTA7ZG97emg9ITE7aWYoISgyNT5mKSl0aHJvdyBFcnJvcih5KDMwMSkpO2YrPTE7VD1TPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO3ZoLmN1cnJlbnQ9Rmg7YT1jKGQsZSl9d2hpbGUoemgpfXZoLmN1cnJlbnQ9R2g7Yj1udWxsIT09UyYmbnVsbCE9PVMubmV4dDt4aD0wO1Q9Uz1SPW51bGw7eWg9ITE7aWYoYil0aHJvdyBFcnJvcih5KDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIEhoKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlPVQ9YTpUPVQubmV4dD1hO3JldHVybiBUfVxuZnVuY3Rpb24gSWgoKXtpZihudWxsPT09Uyl7dmFyIGE9Ui5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Uy5uZXh0O3ZhciBiPW51bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZTpULm5leHQ7aWYobnVsbCE9PWIpVD1iLFM9YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHkoMzEwKSk7Uz1hO2E9e21lbW9pemVkU3RhdGU6Uy5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpTLmJhc2VTdGF0ZSxiYXNlUXVldWU6Uy5iYXNlUXVldWUscXVldWU6Uy5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YX1yZXR1cm4gVH1mdW5jdGlvbiBKaChhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIEtoKGEpe3ZhciBiPUloKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHkoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9UyxlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtlPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9Zj1udWxsLGs9ZTtkb3t2YXIgbD1rLmxhbmU7aWYoKHhoJmwpPT09bCludWxsIT09aCYmKGg9aC5uZXh0PXtsYW5lOjAsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixlYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxkPWsuZWFnZXJSZWR1Y2VyPT09YT9rLmVhZ2VyU3RhdGU6YShkLGsuYWN0aW9uKTtlbHNle3ZhciBuPXtsYW5lOmwsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixcbmVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH07bnVsbD09PWg/KGc9aD1uLGY9ZCk6aD1oLm5leHQ9bjtSLmxhbmVzfD1sO0RnfD1sfWs9ay5uZXh0fXdoaWxlKG51bGwhPT1rJiZrIT09ZSk7bnVsbD09PWg/Zj1kOmgubmV4dD1nO0hlKGQsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZDtiLmJhc2VTdGF0ZT1mO2IuYmFzZVF1ZXVlPWg7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1kfXJldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiBMaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPWMuZGlzcGF0Y2gsZT1jLnBlbmRpbmcsZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2MucGVuZGluZz1udWxsO3ZhciBnPWU9ZS5uZXh0O2RvIGY9YShmLGcuYWN0aW9uKSxnPWcubmV4dDt3aGlsZShnIT09ZSk7SGUoZixiLm1lbW9pemVkU3RhdGUpfHwodWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO251bGw9PT1iLmJhc2VRdWV1ZSYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bZixkXX1cbmZ1bmN0aW9uIE1oKGEsYixjKXt2YXIgZD1iLl9nZXRWZXJzaW9uO2Q9ZChiLl9zb3VyY2UpO3ZhciBlPWIuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk7aWYobnVsbCE9PWUpYT1lPT09ZDtlbHNlIGlmKGE9YS5tdXRhYmxlUmVhZExhbmVzLGE9KHhoJmEpPT09YSliLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PWQsdGgucHVzaChiKTtpZihhKXJldHVybiBjKGIuX3NvdXJjZSk7dGgucHVzaChiKTt0aHJvdyBFcnJvcih5KDM1MCkpO31cbmZ1bmN0aW9uIE5oKGEsYixjLGQpe3ZhciBlPVU7aWYobnVsbD09PWUpdGhyb3cgRXJyb3IoeSgzNDkpKTt2YXIgZj1iLl9nZXRWZXJzaW9uLGc9ZihiLl9zb3VyY2UpLGg9dmguY3VycmVudCxrPWgudXNlU3RhdGUoZnVuY3Rpb24oKXtyZXR1cm4gTWgoZSxiLGMpfSksbD1rWzFdLG49a1swXTtrPVQ7dmFyIEE9YS5tZW1vaXplZFN0YXRlLHA9QS5yZWZzLEM9cC5nZXRTbmFwc2hvdCx4PUEuc291cmNlO0E9QS5zdWJzY3JpYmU7dmFyIHc9UjthLm1lbW9pemVkU3RhdGU9e3JlZnM6cCxzb3VyY2U6YixzdWJzY3JpYmU6ZH07aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtwLmdldFNuYXBzaG90PWM7cC5zZXRTbmFwc2hvdD1sO3ZhciBhPWYoYi5fc291cmNlKTtpZighSGUoZyxhKSl7YT1jKGIuX3NvdXJjZSk7SGUobixhKXx8KGwoYSksYT1JZyh3KSxlLm11dGFibGVSZWFkTGFuZXN8PWEmZS5wZW5kaW5nTGFuZXMpO2E9ZS5tdXRhYmxlUmVhZExhbmVzO2UuZW50YW5nbGVkTGFuZXN8PWE7Zm9yKHZhciBkPVxuZS5lbnRhbmdsZW1lbnRzLGg9YTswPGg7KXt2YXIgaz0zMS1WYyhoKSx2PTE8PGs7ZFtrXXw9YTtoJj1+dn19fSxbYyxiLGRdKTtoLnVzZUVmZmVjdChmdW5jdGlvbigpe3JldHVybiBkKGIuX3NvdXJjZSxmdW5jdGlvbigpe3ZhciBhPXAuZ2V0U25hcHNob3QsYz1wLnNldFNuYXBzaG90O3RyeXtjKGEoYi5fc291cmNlKSk7dmFyIGQ9SWcodyk7ZS5tdXRhYmxlUmVhZExhbmVzfD1kJmUucGVuZGluZ0xhbmVzfWNhdGNoKHEpe2MoZnVuY3Rpb24oKXt0aHJvdyBxO30pfX0pfSxbYixkXSk7SGUoQyxjKSYmSGUoeCxiKSYmSGUoQSxkKXx8KGE9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6bn0sYS5kaXNwYXRjaD1sPU9oLmJpbmQobnVsbCxSLGEpLGsucXVldWU9YSxrLmJhc2VRdWV1ZT1udWxsLG49TWgoZSxiLGMpLGsubWVtb2l6ZWRTdGF0ZT1rLmJhc2VTdGF0ZT1uKTtyZXR1cm4gbn1cbmZ1bmN0aW9uIFBoKGEsYixjKXt2YXIgZD1JaCgpO3JldHVybiBOaChkLGEsYixjKX1mdW5jdGlvbiBRaChhKXt2YXIgYj1IaCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpKaCxsYXN0UmVuZGVyZWRTdGF0ZTphfTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIFJoKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPVIudXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbH0sUi51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBTaChhKXt2YXIgYj1IaCgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfWZ1bmN0aW9uIFRoKCl7cmV0dXJuIEloKCkubWVtb2l6ZWRTdGF0ZX1mdW5jdGlvbiBVaChhLGIsYyxkKXt2YXIgZT1IaCgpO1IuZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPVJoKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiBWaChhLGIsYyxkKXt2YXIgZT1JaCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1TKXt2YXIgZz1TLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJkJoKGQsZy5kZXBzKSl7UmgoYixjLGYsZCk7cmV0dXJufX1SLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyxmLGQpfWZ1bmN0aW9uIFdoKGEsYil7cmV0dXJuIFVoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWGgoYSxiKXtyZXR1cm4gVmgoNTE2LDQsYSxiKX1mdW5jdGlvbiBZaChhLGIpe3JldHVybiBWaCg0LDIsYSxiKX1mdW5jdGlvbiBaaChhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fVxuZnVuY3Rpb24gJGgoYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBWaCg0LDIsWmguYmluZChudWxsLGIsYSksYyl9ZnVuY3Rpb24gYWkoKXt9ZnVuY3Rpb24gYmkoYSxiKXt2YXIgYz1JaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmQmgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gY2koYSxiKXt2YXIgYz1JaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmQmgoYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBkaShhLGIpe3ZhciBjPWVnKCk7Z2coOTg+Yz85ODpjLGZ1bmN0aW9uKCl7YSghMCl9KTtnZyg5NzxjPzk3OmMsZnVuY3Rpb24oKXt2YXIgYz13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7YSghMSksYigpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1jfX0pfVxuZnVuY3Rpb24gT2goYSxiLGMpe3ZhciBkPUhnKCksZT1JZyhhKSxmPXtsYW5lOmUsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH0sZz1iLnBlbmRpbmc7bnVsbD09PWc/Zi5uZXh0PWY6KGYubmV4dD1nLm5leHQsZy5uZXh0PWYpO2IucGVuZGluZz1mO2c9YS5hbHRlcm5hdGU7aWYoYT09PVJ8fG51bGwhPT1nJiZnPT09Uil6aD15aD0hMDtlbHNle2lmKDA9PT1hLmxhbmVzJiYobnVsbD09PWd8fDA9PT1nLmxhbmVzKSYmKGc9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1nKSl0cnl7dmFyIGg9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxrPWcoaCxjKTtmLmVhZ2VyUmVkdWNlcj1nO2YuZWFnZXJTdGF0ZT1rO2lmKEhlKGssaCkpcmV0dXJufWNhdGNoKGwpe31maW5hbGx5e31KZyhhLGUsZCl9fVxudmFyIEdoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpBaCx1c2VDb250ZXh0OkFoLHVzZUVmZmVjdDpBaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkFoLHVzZUxheW91dEVmZmVjdDpBaCx1c2VNZW1vOkFoLHVzZVJlZHVjZXI6QWgsdXNlUmVmOkFoLHVzZVN0YXRlOkFoLHVzZURlYnVnVmFsdWU6QWgsdXNlRGVmZXJyZWRWYWx1ZTpBaCx1c2VUcmFuc2l0aW9uOkFoLHVzZU11dGFibGVTb3VyY2U6QWgsdXNlT3BhcXVlSWRlbnRpZmllcjpBaCx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LERoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe0hoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OldoLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBVaCg0LDIsWmguYmluZChudWxsLFxuYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFVoKDQsMixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9SGgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9SGgoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2E9YS5kaXNwYXRjaD1PaC5iaW5kKG51bGwsUixhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6U2gsdXNlU3RhdGU6UWgsdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPVFoKGEpLGM9YlswXSxkPWJbMV07V2goZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO1xud2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPVFoKCExKSxiPWFbMF07YT1kaS5iaW5kKG51bGwsYVsxXSk7U2goYSk7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7ZC5tZW1vaXplZFN0YXRlPXtyZWZzOntnZXRTbmFwc2hvdDpiLHNldFNuYXBzaG90Om51bGx9LHNvdXJjZTphLHN1YnNjcmliZTpjfTtyZXR1cm4gTmgoZCxhLGIsYyl9LHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtpZihsaCl7dmFyIGE9ITEsYj11ZihmdW5jdGlvbigpe2F8fChhPSEwLGMoXCJyOlwiKyh0ZisrKS50b1N0cmluZygzNikpKTt0aHJvdyBFcnJvcih5KDM1NSkpO30pLGM9UWgoYilbMV07MD09PShSLm1vZGUmMikmJihSLmZsYWdzfD01MTYsUmgoNSxmdW5jdGlvbigpe2MoXCJyOlwiKyh0ZisrKS50b1N0cmluZygzNikpfSxcbnZvaWQgMCxudWxsKSk7cmV0dXJuIGJ9Yj1cInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KTtRaChiKTtyZXR1cm4gYn0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxFaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6YmksdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6WGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTokaCx1c2VMYXlvdXRFZmZlY3Q6WWgsdXNlTWVtbzpjaSx1c2VSZWR1Y2VyOktoLHVzZVJlZjpUaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBLaChKaCl9LHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1LaChKaCksYz1iWzBdLGQ9YlsxXTtYaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPUtoKEpoKVswXTtyZXR1cm5bVGgoKS5jdXJyZW50LFxuYV19LHVzZU11dGFibGVTb3VyY2U6UGgsdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe3JldHVybiBLaChKaClbMF19LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRmg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpMaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gTGgoSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9TGgoSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1MaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gTGgoSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LGVpPXJhLlJlYWN0Q3VycmVudE93bmVyLHVnPSExO2Z1bmN0aW9uIGZpKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WmcoYixudWxsLGMsZCk6WWcoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gZ2koYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO3RnKGIsZSk7ZD1DaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiF1ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS01MTcsYS5sYW5lcyY9fmUsaGkoYSxiLGUpO2IuZmxhZ3N8PTE7ZmkoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBpaShhLGIsYyxkLGUsZil7aWYobnVsbD09PWEpe3ZhciBnPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmIWppKGcpJiZ2b2lkIDA9PT1nLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1nLGtpKGEsYixnLGQsZSxmKTthPVZnKGMudHlwZSxudWxsLGQsYixiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWc9YS5jaGlsZDtpZigwPT09KGUmZikmJihlPWcubWVtb2l6ZWRQcm9wcyxjPWMuY29tcGFyZSxjPW51bGwhPT1jP2M6SmUsYyhlLGQpJiZhLnJlZj09PWIucmVmKSlyZXR1cm4gaGkoYSxiLGYpO2IuZmxhZ3N8PTE7YT1UZyhnLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGtpKGEsYixjLGQsZSxmKXtpZihudWxsIT09YSYmSmUoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmKWlmKHVnPSExLDAhPT0oZiZlKSkwIT09KGEuZmxhZ3MmMTYzODQpJiYodWc9ITApO2Vsc2UgcmV0dXJuIGIubGFuZXM9YS5sYW5lcyxoaShhLGIsZik7cmV0dXJuIGxpKGEsYixjLGQsZil9XG5mdW5jdGlvbiBtaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLGY9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7aWYoXCJoaWRkZW5cIj09PWQubW9kZXx8XCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiPT09ZC5tb2RlKWlmKDA9PT0oYi5tb2RlJjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsYyk7ZWxzZSBpZigwIT09KGMmMTA3Mzc0MTgyNCkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MH0sbmkoYixudWxsIT09Zj9mLmJhc2VMYW5lczpjKTtlbHNlIHJldHVybiBhPW51bGwhPT1mP2YuYmFzZUxhbmVzfGM6YyxiLmxhbmVzPWIuY2hpbGRMYW5lcz0xMDczNzQxODI0LGIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmF9LG5pKGIsYSksbnVsbDtlbHNlIG51bGwhPT1mPyhkPWYuYmFzZUxhbmVzfGMsYi5tZW1vaXplZFN0YXRlPW51bGwpOmQ9YyxuaShiLGQpO2ZpKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gb2koYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5mbGFnc3w9MTI4fWZ1bmN0aW9uIGxpKGEsYixjLGQsZSl7dmFyIGY9RmYoYyk/RGY6TS5jdXJyZW50O2Y9RWYoYixmKTt0ZyhiLGUpO2M9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gcGkoYSxiLGMsZCxlKXtpZihGZihjKSl7dmFyIGY9ITA7SmYoYil9ZWxzZSBmPSExO3RnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpLE1nKGIsYyxkKSxPZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD12ZyhsKToobD1GZihjKT9EZjpNLmN1cnJlbnQsbD1FZihiLGwpKTt2YXIgbj1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxBPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBufHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmTmcoYixnLGQsbCk7d2c9ITE7dmFyIHA9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cDtDZyhiLGQsZyxlKTtrPWIubWVtb2l6ZWRTdGF0ZTtoIT09ZHx8cCE9PWt8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuJiYoR2coYixjLG4sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPXdnfHxMZyhiLGMsaCxkLHAsayxsKSk/KEF8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpLGQ9ITEpfWVsc2V7Zz1iLnN0YXRlTm9kZTt5ZyhhLGIpO2g9Yi5tZW1vaXplZFByb3BzO2w9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOmxnKGIudHlwZSxoKTtnLnByb3BzPWw7QT1iLnBlbmRpbmdQcm9wcztwPWcuY29udGV4dDtrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPXZnKGspOihrPUZmKGMpP0RmOk0uY3VycmVudCxrPUVmKGIsaykpO3ZhciBDPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBDfHxcblwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09QXx8cCE9PWspJiZOZyhiLGcsZCxrKTt3Zz0hMTtwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7dmFyIHg9Yi5tZW1vaXplZFN0YXRlO2ghPT1BfHxwIT09eHx8Ti5jdXJyZW50fHx3Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIEMmJihHZyhiLGMsQyxkKSx4PWIubWVtb2l6ZWRTdGF0ZSksKGw9d2d8fExnKGIsYyxsLGQscCx4LGspKT8obnx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxcbngsayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx4LGspKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZmxhZ3N8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPXgpLGcucHJvcHM9ZCxnLnN0YXRlPXgsZy5jb250ZXh0PWssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxcbmg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTI1NiksZD0hMSl9cmV0dXJuIHFpKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIHFpKGEsYixjLGQsZSxmKXtvaShhLGIpO3ZhciBnPTAhPT0oYi5mbGFncyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZLZihiLGMsITEpLGhpKGEsYixmKTtkPWIuc3RhdGVOb2RlO2VpLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZmxhZ3N8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9WWcoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1ZZyhiLG51bGwsaCxmKSk6ZmkoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmS2YoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiByaShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0hmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJkhmKGEsYi5jb250ZXh0LCExKTtlaChhLGIuY29udGFpbmVySW5mbyl9XG52YXIgc2k9e2RlaHlkcmF0ZWQ6bnVsbCxyZXRyeUxhbmU6MH07XG5mdW5jdGlvbiB0aShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1QLmN1cnJlbnQsZj0hMSxnOyhnPTAhPT0oYi5mbGFncyY2NCkpfHwoZz1udWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZT8hMTowIT09KGUmMikpO2c/KGY9ITAsYi5mbGFncyY9LTY1KTpudWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZXx8dm9pZCAwPT09ZC5mYWxsYmFja3x8ITA9PT1kLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwoZXw9MSk7SShQLGUmMSk7aWYobnVsbD09PWEpe3ZvaWQgMCE9PWQuZmFsbGJhY2smJnBoKGIpO2E9ZC5jaGlsZHJlbjtlPWQuZmFsbGJhY2s7aWYoZilyZXR1cm4gYT11aShiLGEsZSxjKSxiLmNoaWxkLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczpjfSxiLm1lbW9pemVkU3RhdGU9c2ksYTtpZihcIm51bWJlclwiPT09dHlwZW9mIGQudW5zdGFibGVfZXhwZWN0ZWRMb2FkVGltZSlyZXR1cm4gYT11aShiLGEsZSxjKSxiLmNoaWxkLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczpjfSxcbmIubWVtb2l6ZWRTdGF0ZT1zaSxiLmxhbmVzPTMzNTU0NDMyLGE7Yz12aSh7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjphfSxiLm1vZGUsYyxudWxsKTtjLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWN9aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTp7YmFzZUxhbmVzOmUuYmFzZUxhbmVzfGN9LGYuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmMsYi5tZW1vaXplZFN0YXRlPXNpLGQ7Yz14aShhLGIsZC5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gY31pZihmKXJldHVybiBkPXdpKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLGYubWVtb2l6ZWRTdGF0ZT1udWxsPT09ZT97YmFzZUxhbmVzOmN9Olxue2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9ZnVuY3Rpb24gdWkoYSxiLGMsZCl7dmFyIGU9YS5tb2RlLGY9YS5jaGlsZDtiPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Yn07MD09PShlJjIpJiZudWxsIT09Zj8oZi5jaGlsZExhbmVzPTAsZi5wZW5kaW5nUHJvcHM9Yik6Zj12aShiLGUsMCxudWxsKTtjPVhnKGMsZSxkLG51bGwpO2YucmV0dXJuPWE7Yy5yZXR1cm49YTtmLnNpYmxpbmc9YzthLmNoaWxkPWY7cmV0dXJuIGN9XG5mdW5jdGlvbiB4aShhLGIsYyxkKXt2YXIgZT1hLmNoaWxkO2E9ZS5zaWJsaW5nO2M9VGcoZSx7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpjfSk7MD09PShiLm1vZGUmMikmJihjLmxhbmVzPWQpO2MucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihhLm5leHRFZmZlY3Q9bnVsbCxhLmZsYWdzPTgsYi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YSk7cmV0dXJuIGIuY2hpbGQ9Y31cbmZ1bmN0aW9uIHdpKGEsYixjLGQsZSl7dmFyIGY9Yi5tb2RlLGc9YS5jaGlsZDthPWcuc2libGluZzt2YXIgaD17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmN9OzA9PT0oZiYyKSYmYi5jaGlsZCE9PWc/KGM9Yi5jaGlsZCxjLmNoaWxkTGFuZXM9MCxjLnBlbmRpbmdQcm9wcz1oLGc9Yy5sYXN0RWZmZWN0LG51bGwhPT1nPyhiLmZpcnN0RWZmZWN0PWMuZmlyc3RFZmZlY3QsYi5sYXN0RWZmZWN0PWcsZy5uZXh0RWZmZWN0PW51bGwpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGwpOmM9VGcoZyxoKTtudWxsIT09YT9kPVRnKGEsZCk6KGQ9WGcoZCxmLGUsbnVsbCksZC5mbGFnc3w9Mik7ZC5yZXR1cm49YjtjLnJldHVybj1iO2Muc2libGluZz1kO2IuY2hpbGQ9YztyZXR1cm4gZH1mdW5jdGlvbiB5aShhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtzZyhhLnJldHVybixiKX1cbmZ1bmN0aW9uIHppKGEsYixjLGQsZSxmKXt2YXIgZz1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWc/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbE1vZGU6ZSxsYXN0RWZmZWN0OmZ9OihnLmlzQmFja3dhcmRzPWIsZy5yZW5kZXJpbmc9bnVsbCxnLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGcubGFzdD1kLGcudGFpbD1jLGcudGFpbE1vZGU9ZSxnLmxhc3RFZmZlY3Q9Zil9XG5mdW5jdGlvbiBBaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO2ZpKGEsYixkLmNoaWxkcmVuLGMpO2Q9UC5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZmxhZ3N8PTY0O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5mbGFncyY2NCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZ5aShhLGMpO2Vsc2UgaWYoMTk9PT1hLnRhZyl5aShhLGMpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1JKFAsZCk7aWYoMD09PShiLm1vZGUmMikpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PWloKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7emkoYiwhMSxlLGMsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09aWgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfXppKGIsITAsYyxudWxsLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwidG9nZXRoZXJcIjp6aShiLCExLG51bGwsbnVsbCx2b2lkIDAsYi5sYXN0RWZmZWN0KTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaGkoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO0RnfD1iLmxhbmVzO2lmKDAhPT0oYyZiLmNoaWxkTGFuZXMpKXtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IoeSgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9VGcoYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVRnKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9cmV0dXJuIG51bGx9dmFyIEJpLENpLERpLEVpO1xuQmk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O0NpPWZ1bmN0aW9uKCl7fTtcbkRpPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWEubWVtb2l6ZWRQcm9wcztpZihlIT09ZCl7YT1iLnN0YXRlTm9kZTtkaChhaC5jdXJyZW50KTt2YXIgZj1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjplPVlhKGEsZSk7ZD1ZYShhLGQpO2Y9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZWIoYSxlKTtkPWViKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6ZT1tKHt9LGUse3ZhbHVlOnZvaWQgMH0pO2Q9bSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmU9Z2IoYSxlKTtkPWdiKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9amYpfXZiKGMsZCk7dmFyIGc7Yz1udWxsO2ZvcihsIGluIGUpaWYoIWQuaGFzT3duUHJvcGVydHkobCkmJmUuaGFzT3duUHJvcGVydHkobCkmJm51bGwhPWVbbF0paWYoXCJzdHlsZVwiPT09XG5sKXt2YXIgaD1lW2xdO2ZvcihnIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShnKSYmKGN8fChjPXt9KSxjW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1sJiZcImNoaWxkcmVuXCIhPT1sJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYoY2EuaGFzT3duUHJvcGVydHkobCk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGwsbnVsbCkpO2ZvcihsIGluIGQpe3ZhciBrPWRbbF07aD1udWxsIT1lP2VbbF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkobCkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09bClpZihoKXtmb3IoZyBpbiBoKSFoLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoY3x8KGM9e30pLGNbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZoW2ddIT09a1tnXSYmKGN8fFxuKGM9e30pLGNbZ109a1tnXSl9ZWxzZSBjfHwoZnx8KGY9W10pLGYucHVzaChsLGMpKSxjPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2gobCxrKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2gobCxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpPyhudWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1sJiZHKFwic2Nyb2xsXCIsYSksZnx8aD09PWt8fChmPVtdKSk6XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09ayYmay4kJHR5cGVvZj09PUdhP2sudG9TdHJpbmcoKTooZj1mfHxbXSkucHVzaChsLGspKX1jJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsXG5jKTt2YXIgbD1mO2lmKGIudXBkYXRlUXVldWU9bCliLmZsYWdzfD00fX07RWk9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmZsYWdzfD00KX07ZnVuY3Rpb24gRmkoYSxiKXtpZighbGgpc3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIEdpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBudWxsO2Nhc2UgMTpyZXR1cm4gRmYoYi50eXBlKSYmR2YoKSxudWxsO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2Q9Yi5zdGF0ZU5vZGU7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKXJoKGIpP2IuZmxhZ3N8PTQ6ZC5oeWRyYXRlfHwoYi5mbGFnc3w9MjU2KTtDaShiKTtyZXR1cm4gbnVsbDtjYXNlIDU6aGgoYik7dmFyIGU9ZGgoY2guY3VycmVudCk7Yz1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKURpKGEsYixjLGQsZSksYS5yZWYhPT1iLnJlZiYmKGIuZmxhZ3N8PTEyOCk7ZWxzZXtpZighZCl7aWYobnVsbD09PVxuYi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjYpKTtyZXR1cm4gbnVsbH1hPWRoKGFoLmN1cnJlbnQpO2lmKHJoKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW3dmXT1iO2RbeGZdPWY7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpHKFwiY2FuY2VsXCIsZCk7RyhcImNsb3NlXCIsZCk7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihhPTA7YTxYZS5sZW5ndGg7YSsrKUcoWGVbYV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkcoXCJlcnJvclwiLGQpO0coXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpHKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoZCxmKTtHKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtHKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGQsZiksRyhcImludmFsaWRcIixkKX12YihjLGYpO2E9bnVsbDtmb3IodmFyIGcgaW4gZilmLmhhc093blByb3BlcnR5KGcpJiYoZT1mW2ddLFwiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBlP2QudGV4dENvbnRlbnQhPT1lJiYoYT1bXCJjaGlsZHJlblwiLGVdKTpcIm51bWJlclwiPT09dHlwZW9mIGUmJmQudGV4dENvbnRlbnQhPT1cIlwiK2UmJihhPVtcImNoaWxkcmVuXCIsXCJcIitlXSk6Y2EuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWUmJlwib25TY3JvbGxcIj09PWcmJkcoXCJzY3JvbGxcIixkKSk7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGQpO2NiKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoZCk7amIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihkLm9uY2xpY2s9XG5qZil9ZD1hO2IudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmKGIuZmxhZ3N8PTQpfWVsc2V7Zz05PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudDthPT09a2IuaHRtbCYmKGE9bGIoYykpO2E9PT1rYi5odG1sP1wic2NyaXB0XCI9PT1jPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoYyx7aXM6ZC5pc30pOihhPWcuY3JlYXRlRWxlbWVudChjKSxcInNlbGVjdFwiPT09YyYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsYyk7YVt3Zl09YjthW3hmXT1kO0JpKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTtnPXdiKGMsZCk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpHKFwiY2FuY2VsXCIsYSk7RyhcImNsb3NlXCIsYSk7XG5lPWQ7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8WGUubGVuZ3RoO2UrKylHKFhlW2VdLGEpO2U9ZDticmVhaztjYXNlIFwic291cmNlXCI6RyhcImVycm9yXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkcoXCJlcnJvclwiLGEpO0coXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpaYShhLGQpO2U9WWEoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtlPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihhLGQpO2U9XG5nYihhLGQpO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7ZGVmYXVsdDplPWR9dmIoYyxlKTt2YXIgaD1lO2ZvcihmIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGs9aFtmXTtcInN0eWxlXCI9PT1mP3RiKGEsayk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZvYihhLGspKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09Y3x8XCJcIiE9PWspJiZwYihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmcGIoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihjYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1mJiZHKFwic2Nyb2xsXCIsYSk6bnVsbCE9ayYmcWEoYSxmLGssZykpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShhKTtjYihhLGQsITEpO1xuYnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoYSk7amIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK1NhKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Zj1kLnZhbHVlO251bGwhPWY/ZmIoYSwhIWQubXVsdGlwbGUsZiwhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJmZiKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLm9uQ2xpY2smJihhLm9uY2xpY2s9amYpfW1mKGMsZCkmJihiLmZsYWdzfD00KX1udWxsIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlFaShhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjYpKTtcbmM9ZGgoY2guY3VycmVudCk7ZGgoYWguY3VycmVudCk7cmgoYik/KGQ9Yi5zdGF0ZU5vZGUsYz1iLm1lbW9pemVkUHJvcHMsZFt3Zl09YixkLm5vZGVWYWx1ZSE9PWMmJihiLmZsYWdzfD00KSk6KGQ9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxkW3dmXT1iLGIuc3RhdGVOb2RlPWQpfXJldHVybiBudWxsO2Nhc2UgMTM6SChQKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZmxhZ3MmNjQpKXJldHVybiBiLmxhbmVzPWMsYjtkPW51bGwhPT1kO2M9ITE7bnVsbD09PWE/dm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLmZhbGxiYWNrJiZyaChiKTpjPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7aWYoZCYmIWMmJjAhPT0oYi5tb2RlJjIpKWlmKG51bGw9PT1hJiYhMCE9PWIubWVtb2l6ZWRQcm9wcy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8MCE9PShQLmN1cnJlbnQmMSkpMD09PVYmJihWPTMpO2Vsc2V7aWYoMD09PVZ8fDM9PT1WKVY9XG40O251bGw9PT1VfHwwPT09KERnJjEzNDIxNzcyNykmJjA9PT0oSGkmMTM0MjE3NzI3KXx8SWkoVSxXKX1pZihkfHxjKWIuZmxhZ3N8PTQ7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLENpKGIpLG51bGw9PT1hJiZjZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxudWxsO2Nhc2UgMTA6cmV0dXJuIHJnKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gRmYoYi50eXBlKSYmR2YoKSxudWxsO2Nhc2UgMTk6SChQKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtmPTAhPT0oYi5mbGFncyY2NCk7Zz1kLnJlbmRlcmluZztpZihudWxsPT09ZylpZihmKUZpKGQsITEpO2Vsc2V7aWYoMCE9PVZ8fG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtnPWloKGEpO2lmKG51bGwhPT1nKXtiLmZsYWdzfD02NDtGaShkLCExKTtmPWcudXBkYXRlUXVldWU7bnVsbCE9PWYmJihiLnVwZGF0ZVF1ZXVlPWYsYi5mbGFnc3w9NCk7XG5udWxsPT09ZC5sYXN0RWZmZWN0JiYoYi5maXJzdEVmZmVjdD1udWxsKTtiLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0O2Q9Yztmb3IoYz1iLmNoaWxkO251bGwhPT1jOylmPWMsYT1kLGYuZmxhZ3MmPTIsZi5uZXh0RWZmZWN0PW51bGwsZi5maXJzdEVmZmVjdD1udWxsLGYubGFzdEVmZmVjdD1udWxsLGc9Zi5hbHRlcm5hdGUsbnVsbD09PWc/KGYuY2hpbGRMYW5lcz0wLGYubGFuZXM9YSxmLmNoaWxkPW51bGwsZi5tZW1vaXplZFByb3BzPW51bGwsZi5tZW1vaXplZFN0YXRlPW51bGwsZi51cGRhdGVRdWV1ZT1udWxsLGYuZGVwZW5kZW5jaWVzPW51bGwsZi5zdGF0ZU5vZGU9bnVsbCk6KGYuY2hpbGRMYW5lcz1nLmNoaWxkTGFuZXMsZi5sYW5lcz1nLmxhbmVzLGYuY2hpbGQ9Zy5jaGlsZCxmLm1lbW9pemVkUHJvcHM9Zy5tZW1vaXplZFByb3BzLGYubWVtb2l6ZWRTdGF0ZT1nLm1lbW9pemVkU3RhdGUsZi51cGRhdGVRdWV1ZT1nLnVwZGF0ZVF1ZXVlLGYudHlwZT1nLnR5cGUsYT1nLmRlcGVuZGVuY2llcyxcbmYuZGVwZW5kZW5jaWVzPW51bGw9PT1hP251bGw6e2xhbmVzOmEubGFuZXMsZmlyc3RDb250ZXh0OmEuZmlyc3RDb250ZXh0fSksYz1jLnNpYmxpbmc7SShQLFAuY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWE9YS5zaWJsaW5nfW51bGwhPT1kLnRhaWwmJk8oKT5KaSYmKGIuZmxhZ3N8PTY0LGY9ITAsRmkoZCwhMSksYi5sYW5lcz0zMzU1NDQzMil9ZWxzZXtpZighZilpZihhPWloKGcpLG51bGwhPT1hKXtpZihiLmZsYWdzfD02NCxmPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmZsYWdzfD00KSxGaShkLCEwKSxudWxsPT09ZC50YWlsJiZcImhpZGRlblwiPT09ZC50YWlsTW9kZSYmIWcuYWx0ZXJuYXRlJiYhbGgpcmV0dXJuIGI9Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdCxudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKSxudWxsfWVsc2UgMipPKCktZC5yZW5kZXJpbmdTdGFydFRpbWU+SmkmJjEwNzM3NDE4MjQhPT1jJiYoYi5mbGFnc3w9XG42NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpO2QuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGM9ZC5sYXN0LG51bGwhPT1jP2Muc2libGluZz1nOmIuY2hpbGQ9ZyxkLmxhc3Q9Zyl9cmV0dXJuIG51bGwhPT1kLnRhaWw/KGM9ZC50YWlsLGQucmVuZGVyaW5nPWMsZC50YWlsPWMuc2libGluZyxkLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0LGQucmVuZGVyaW5nU3RhcnRUaW1lPU8oKSxjLnNpYmxpbmc9bnVsbCxiPVAuY3VycmVudCxJKFAsZj9iJjF8MjpiJjEpLGMpOm51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBLaSgpLG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlIT09KG51bGwhPT1iLm1lbW9pemVkU3RhdGUpJiZcInVuc3RhYmxlLWRlZmVyLXdpdGhvdXQtaGlkaW5nXCIhPT1kLm1vZGUmJihiLmZsYWdzfD00KSxudWxsfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7fVxuZnVuY3Rpb24gTGkoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6RmYoYS50eXBlKSYmR2YoKTt2YXIgYj1hLmZsYWdzO3JldHVybiBiJjQwOTY/KGEuZmxhZ3M9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2I9YS5mbGFncztpZigwIT09KGImNjQpKXRocm93IEVycm9yKHkoMjg1KSk7YS5mbGFncz1iJi00MDk3fDY0O3JldHVybiBhO2Nhc2UgNTpyZXR1cm4gaGgoYSksbnVsbDtjYXNlIDEzOnJldHVybiBIKFApLGI9YS5mbGFncyxiJjQwOTY/KGEuZmxhZ3M9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEgoUCksbnVsbDtjYXNlIDQ6cmV0dXJuIGZoKCksbnVsbDtjYXNlIDEwOnJldHVybiByZyhhKSxudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gTWkoYSxiKXt0cnl7dmFyIGM9XCJcIixkPWI7ZG8gYys9UWEoZCksZD1kLnJldHVybjt3aGlsZShkKTt2YXIgZT1jfWNhdGNoKGYpe2U9XCJcXG5FcnJvciBnZW5lcmF0aW5nIHN0YWNrOiBcIitmLm1lc3NhZ2UrXCJcXG5cIitmLnN0YWNrfXJldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOmV9fWZ1bmN0aW9uIE5pKGEsYil7dHJ5e2NvbnNvbGUuZXJyb3IoYi52YWx1ZSl9Y2F0Y2goYyl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGM7fSl9fXZhciBPaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBQaShhLGIsYyl7Yz16ZygtMSxjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtRaXx8KFFpPSEwLFJpPWQpO05pKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gU2koYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe05pKGEsYik7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1UaT9UaT1uZXcgU2V0KFt0aGlzXSk6VGkuYWRkKHRoaXMpLE5pKGEsYikpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfXZhciBVaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtcbmZ1bmN0aW9uIFZpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe1dpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBYaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOnJldHVybjtjYXNlIDE6aWYoYi5mbGFncyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOmxnKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9cmV0dXJuO2Nhc2UgMzpiLmZsYWdzJjI1NiYmcWYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7cmV0dXJuO2Nhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fVxuZnVuY3Rpb24gWWkoYSxiLGMpe3N3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOmI9Yy51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXthPWI9Yi5uZXh0O2Rve2lmKDM9PT0oYS50YWcmMykpe3ZhciBkPWEuY3JlYXRlO2EuZGVzdHJveT1kKCl9YT1hLm5leHR9d2hpbGUoYSE9PWIpfWI9Yy51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXthPWI9Yi5uZXh0O2Rve3ZhciBlPWE7ZD1lLm5leHQ7ZT1lLnRhZzswIT09KGUmNCkmJjAhPT0oZSYxKSYmKFppKGMsYSksJGkoYyxhKSk7YT1kfXdoaWxlKGEhPT1iKX1yZXR1cm47Y2FzZSAxOmE9Yy5zdGF0ZU5vZGU7Yy5mbGFncyY0JiYobnVsbD09PWI/YS5jb21wb25lbnREaWRNb3VudCgpOihkPWMuZWxlbWVudFR5cGU9PT1jLnR5cGU/Yi5tZW1vaXplZFByb3BzOmxnKGMudHlwZSxiLm1lbW9pemVkUHJvcHMpLGEuY29tcG9uZW50RGlkVXBkYXRlKGQsXG5iLm1lbW9pemVkU3RhdGUsYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSkpKTtiPWMudXBkYXRlUXVldWU7bnVsbCE9PWImJkVnKGMsYixhKTtyZXR1cm47Y2FzZSAzOmI9Yy51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YT1udWxsO2lmKG51bGwhPT1jLmNoaWxkKXN3aXRjaChjLmNoaWxkLnRhZyl7Y2FzZSA1OmE9Yy5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmE9Yy5jaGlsZC5zdGF0ZU5vZGV9RWcoYyxiLGEpfXJldHVybjtjYXNlIDU6YT1jLnN0YXRlTm9kZTtudWxsPT09YiYmYy5mbGFncyY0JiZtZihjLnR5cGUsYy5tZW1vaXplZFByb3BzKSYmYS5mb2N1cygpO3JldHVybjtjYXNlIDY6cmV0dXJuO2Nhc2UgNDpyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpudWxsPT09Yy5tZW1vaXplZFN0YXRlJiYoYz1jLmFsdGVybmF0ZSxudWxsIT09YyYmKGM9Yy5tZW1vaXplZFN0YXRlLG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbCE9PWMmJkNjKGMpKSkpO1xucmV0dXJuO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIwOmNhc2UgMjE6Y2FzZSAyMzpjYXNlIDI0OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIGFqKGEsYil7Zm9yKHZhciBjPWE7Oyl7aWYoNT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihiKWQ9ZC5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5zZXRQcm9wZXJ0eT9kLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmQuZGlzcGxheT1cIm5vbmVcIjtlbHNle2Q9Yy5zdGF0ZU5vZGU7dmFyIGU9Yy5tZW1vaXplZFByb3BzLnN0eWxlO2U9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsO2Quc3R5bGUuZGlzcGxheT1zYihcImRpc3BsYXlcIixlKX19ZWxzZSBpZig2PT09Yy50YWcpYy5zdGF0ZU5vZGUubm9kZVZhbHVlPWI/XCJcIjpjLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigoMjMhPT1jLnRhZyYmMjQhPT1jLnRhZ3x8bnVsbD09PWMubWVtb2l6ZWRTdGF0ZXx8Yz09PWEpJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PVxuYSlicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YSlyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIGJqKGEsYil7aWYoTWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBNZi5vbkNvbW1pdEZpYmVyVW5tb3VudCl0cnl7TWYub25Db21taXRGaWJlclVubW91bnQoTGYsYil9Y2F0Y2goZil7fXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6YT1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hJiYoYT1hLmxhc3RFZmZlY3QsbnVsbCE9PWEpKXt2YXIgYz1hPWEubmV4dDtkb3t2YXIgZD1jLGU9ZC5kZXN0cm95O2Q9ZC50YWc7aWYodm9pZCAwIT09ZSlpZigwIT09KGQmNCkpWmkoYixjKTtlbHNle2Q9Yjt0cnl7ZSgpfWNhdGNoKGYpe1dpKGQsZil9fWM9Yy5uZXh0fXdoaWxlKGMhPT1hKX1icmVhaztjYXNlIDE6VmkoYik7YT1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7YS5wcm9wcz1iLm1lbW9pemVkUHJvcHMsYS5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsYS5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGYpe1dpKGIsXG5mKX1icmVhaztjYXNlIDU6VmkoYik7YnJlYWs7Y2FzZSA0OmNqKGEsYil9fWZ1bmN0aW9uIGRqKGEpe2EuYWx0ZXJuYXRlPW51bGw7YS5jaGlsZD1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5maXJzdEVmZmVjdD1udWxsO2EubGFzdEVmZmVjdD1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO2EubWVtb2l6ZWRTdGF0ZT1udWxsO2EucGVuZGluZ1Byb3BzPW51bGw7YS5yZXR1cm49bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGx9ZnVuY3Rpb24gZWooYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBmaihhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihlaihiKSlicmVhayBhO2I9Yi5yZXR1cm59dGhyb3cgRXJyb3IoeSgxNjApKTt9dmFyIGM9YjtiPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgxNjEpKTt9Yy5mbGFncyYxNiYmKHBiKGIsXCJcIiksYy5mbGFncyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGVqKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZyYmMTghPT1jLnRhZzspe2lmKGMuZmxhZ3MmMiljb250aW51ZSBiO2lmKG51bGw9PT1cbmMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmZsYWdzJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWQ/Z2ooYSxjLGIpOmhqKGEsYyxiKX1cbmZ1bmN0aW9uIGdqKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1qZikpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihnaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KWdqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIGhqKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoaGooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOyloaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBjaihhLGIpe2Zvcih2YXIgYz1iLGQ9ITEsZSxmOzspe2lmKCFkKXtkPWMucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZCl0aHJvdyBFcnJvcih5KDE2MCkpO2U9ZC5zdGF0ZU5vZGU7c3dpdGNoKGQudGFnKXtjYXNlIDU6Zj0hMTticmVhayBhO2Nhc2UgMzplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGE7Y2FzZSA0OmU9ZS5jb250YWluZXJJbmZvO2Y9ITA7YnJlYWsgYX1kPWQucmV0dXJufWQ9ITB9aWYoNT09PWMudGFnfHw2PT09Yy50YWcpe2E6Zm9yKHZhciBnPWEsaD1jLGs9aDs7KWlmKGJqKGcsayksbnVsbCE9PWsuY2hpbGQmJjQhPT1rLnRhZylrLmNoaWxkLnJldHVybj1rLGs9ay5jaGlsZDtlbHNle2lmKGs9PT1oKWJyZWFrIGE7Zm9yKDtudWxsPT09ay5zaWJsaW5nOyl7aWYobnVsbD09PWsucmV0dXJufHxrLnJldHVybj09PWgpYnJlYWsgYTtrPWsucmV0dXJufWsuc2libGluZy5yZXR1cm49ay5yZXR1cm47az1rLnNpYmxpbmd9Zj8oZz1lLGg9Yy5zdGF0ZU5vZGUsXG44PT09Zy5ub2RlVHlwZT9nLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaCk6Zy5yZW1vdmVDaGlsZChoKSk6ZS5yZW1vdmVDaGlsZChjLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09Yy50YWcpe2lmKG51bGwhPT1jLmNoaWxkKXtlPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zj0hMDtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihiaihhLGMpLG51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybjs0PT09Yy50YWcmJihkPSExKX1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIGlqKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjp2YXIgYz1iLnVwZGF0ZVF1ZXVlO2M9bnVsbCE9PWM/Yy5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWMpe3ZhciBkPWM9Yy5uZXh0O2RvIDM9PT0oZC50YWcmMykmJihhPWQuZGVzdHJveSxkLmRlc3Ryb3k9dm9pZCAwLHZvaWQgMCE9PWEmJmEoKSksZD1kLm5leHQ7d2hpbGUoZCE9PWMpfXJldHVybjtjYXNlIDE6cmV0dXJuO2Nhc2UgNTpjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe2Q9Yi5tZW1vaXplZFByb3BzO3ZhciBlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW3hmXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiYkYShjLGQpO3diKGEsZSk7Yj13YihhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz1cbjIpe3ZhciBnPWZbZV0saD1mW2UrMV07XCJzdHlsZVwiPT09Zz90YihjLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/b2IoYyxoKTpcImNoaWxkcmVuXCI9PT1nP3BiKGMsaCk6cWEoYyxnLGgsYil9c3dpdGNoKGEpe2Nhc2UgXCJpbnB1dFwiOmFiKGMsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYyxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YT1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxmPWQudmFsdWUsbnVsbCE9Zj9mYihjLCEhZC5tdWx0aXBsZSxmLCExKTphIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/ZmIoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOmZiKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19cmV0dXJuO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9XG5iLm1lbW9pemVkUHJvcHM7cmV0dXJuO2Nhc2UgMzpjPWIuc3RhdGVOb2RlO2MuaHlkcmF0ZSYmKGMuaHlkcmF0ZT0hMSxDYyhjLmNvbnRhaW5lckluZm8pKTtyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpudWxsIT09Yi5tZW1vaXplZFN0YXRlJiYoamo9TygpLGFqKGIuY2hpbGQsITApKTtraihiKTtyZXR1cm47Y2FzZSAxOTpraihiKTtyZXR1cm47Y2FzZSAxNzpyZXR1cm47Y2FzZSAyMzpjYXNlIDI0OmFqKGIsbnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSk7cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fWZ1bmN0aW9uIGtqKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IFVpKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9bGouYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG5mdW5jdGlvbiBtaihhLGIpe3JldHVybiBudWxsIT09YSYmKGE9YS5tZW1vaXplZFN0YXRlLG51bGw9PT1hfHxudWxsIT09YS5kZWh5ZHJhdGVkKT8oYj1iLm1lbW9pemVkU3RhdGUsbnVsbCE9PWImJm51bGw9PT1iLmRlaHlkcmF0ZWQpOiExfXZhciBuaj1NYXRoLmNlaWwsb2o9cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixwaj1yYS5SZWFjdEN1cnJlbnRPd25lcixYPTAsVT1udWxsLFk9bnVsbCxXPTAscWo9MCxyaj1CZigwKSxWPTAsc2o9bnVsbCx0aj0wLERnPTAsSGk9MCx1aj0wLHZqPW51bGwsamo9MCxKaT1JbmZpbml0eTtmdW5jdGlvbiB3aigpe0ppPU8oKSs1MDB9dmFyIFo9bnVsbCxRaT0hMSxSaT1udWxsLFRpPW51bGwseGo9ITEseWo9bnVsbCx6aj05MCxBaj1bXSxCaj1bXSxDaj1udWxsLERqPTAsRWo9bnVsbCxGaj0tMSxHaj0wLEhqPTAsSWo9bnVsbCxKaj0hMTtmdW5jdGlvbiBIZygpe3JldHVybiAwIT09KFgmNDgpP08oKTotMSE9PUZqP0ZqOkZqPU8oKX1cbmZ1bmN0aW9uIElnKGEpe2E9YS5tb2RlO2lmKDA9PT0oYSYyKSlyZXR1cm4gMTtpZigwPT09KGEmNCkpcmV0dXJuIDk5PT09ZWcoKT8xOjI7MD09PUdqJiYoR2o9dGopO2lmKDAhPT1rZy50cmFuc2l0aW9uKXswIT09SGomJihIaj1udWxsIT09dmo/dmoucGVuZGluZ0xhbmVzOjApO2E9R2o7dmFyIGI9NDE4NjExMiZ+SGo7YiY9LWI7MD09PWImJihhPTQxODYxMTImfmEsYj1hJi1hLDA9PT1iJiYoYj04MTkyKSk7cmV0dXJuIGJ9YT1lZygpOzAhPT0oWCY0KSYmOTg9PT1hP2E9WGMoMTIsR2opOihhPVNjKGEpLGE9WGMoYSxHaikpO3JldHVybiBhfVxuZnVuY3Rpb24gSmcoYSxiLGMpe2lmKDUwPERqKXRocm93IERqPTAsRWo9bnVsbCxFcnJvcih5KDE4NSkpO2E9S2ooYSxiKTtpZihudWxsPT09YSlyZXR1cm4gbnVsbDskYyhhLGIsYyk7YT09PVUmJihIaXw9Yiw0PT09ViYmSWkoYSxXKSk7dmFyIGQ9ZWcoKTsxPT09Yj8wIT09KFgmOCkmJjA9PT0oWCY0OCk/TGooYSk6KE1qKGEsYyksMD09PVgmJih3aigpLGlnKCkpKTooMD09PShYJjQpfHw5OCE9PWQmJjk5IT09ZHx8KG51bGw9PT1Daj9Daj1uZXcgU2V0KFthXSk6Q2ouYWRkKGEpKSxNaihhLGMpKTt2aj1hfWZ1bmN0aW9uIEtqKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO2M9YTtmb3IoYT1hLnJldHVybjtudWxsIT09YTspYS5jaGlsZExhbmVzfD1iLGM9YS5hbHRlcm5hdGUsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpLGM9YSxhPWEucmV0dXJuO3JldHVybiAzPT09Yy50YWc/Yy5zdGF0ZU5vZGU6bnVsbH1cbmZ1bmN0aW9uIE1qKGEsYil7Zm9yKHZhciBjPWEuY2FsbGJhY2tOb2RlLGQ9YS5zdXNwZW5kZWRMYW5lcyxlPWEucGluZ2VkTGFuZXMsZj1hLmV4cGlyYXRpb25UaW1lcyxnPWEucGVuZGluZ0xhbmVzOzA8Zzspe3ZhciBoPTMxLVZjKGcpLGs9MTw8aCxsPWZbaF07aWYoLTE9PT1sKXtpZigwPT09KGsmZCl8fDAhPT0oayZlKSl7bD1iO1JjKGspO3ZhciBuPUY7ZltoXT0xMDw9bj9sKzI1MDo2PD1uP2wrNUUzOi0xfX1lbHNlIGw8PWImJihhLmV4cGlyZWRMYW5lc3w9ayk7ZyY9fmt9ZD1VYyhhLGE9PT1VP1c6MCk7Yj1GO2lmKDA9PT1kKW51bGwhPT1jJiYoYyE9PVpmJiZQZihjKSxhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tQcmlvcml0eT0wKTtlbHNle2lmKG51bGwhPT1jKXtpZihhLmNhbGxiYWNrUHJpb3JpdHk9PT1iKXJldHVybjtjIT09WmYmJlBmKGMpfTE1PT09Yj8oYz1Mai5iaW5kKG51bGwsYSksbnVsbD09PWFnPyhhZz1bY10sYmc9T2YoVWYsamcpKTphZy5wdXNoKGMpLFxuYz1aZik6MTQ9PT1iP2M9aGcoOTksTGouYmluZChudWxsLGEpKTooYz1UYyhiKSxjPWhnKGMsTmouYmluZChudWxsLGEpKSk7YS5jYWxsYmFja1ByaW9yaXR5PWI7YS5jYWxsYmFja05vZGU9Y319XG5mdW5jdGlvbiBOaihhKXtGaj0tMTtIaj1Haj0wO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTt2YXIgYj1hLmNhbGxiYWNrTm9kZTtpZihPaigpJiZhLmNhbGxiYWNrTm9kZSE9PWIpcmV0dXJuIG51bGw7dmFyIGM9VWMoYSxhPT09VT9XOjApO2lmKDA9PT1jKXJldHVybiBudWxsO3ZhciBkPWM7dmFyIGU9WDtYfD0xNjt2YXIgZj1QaigpO2lmKFUhPT1hfHxXIT09ZCl3aigpLFFqKGEsZCk7ZG8gdHJ5e1JqKCk7YnJlYWt9Y2F0Y2goaCl7U2ooYSxoKX13aGlsZSgxKTtxZygpO29qLmN1cnJlbnQ9ZjtYPWU7bnVsbCE9PVk/ZD0wOihVPW51bGwsVz0wLGQ9Vik7aWYoMCE9PSh0aiZIaSkpUWooYSwwKTtlbHNlIGlmKDAhPT1kKXsyPT09ZCYmKFh8PTY0LGEuaHlkcmF0ZSYmKGEuaHlkcmF0ZT0hMSxxZihhLmNvbnRhaW5lckluZm8pKSxjPVdjKGEpLDAhPT1jJiYoZD1UaihhLGMpKSk7aWYoMT09PWQpdGhyb3cgYj1zaixRaihhLDApLElpKGEsYyksTWooYSxPKCkpLGI7YS5maW5pc2hlZFdvcms9XG5hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1jO3N3aXRjaChkKXtjYXNlIDA6Y2FzZSAxOnRocm93IEVycm9yKHkoMzQ1KSk7Y2FzZSAyOlVqKGEpO2JyZWFrO2Nhc2UgMzpJaShhLGMpO2lmKChjJjYyOTE0NTYwKT09PWMmJihkPWpqKzUwMC1PKCksMTA8ZCkpe2lmKDAhPT1VYyhhLDApKWJyZWFrO2U9YS5zdXNwZW5kZWRMYW5lcztpZigoZSZjKSE9PWMpe0hnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZlO2JyZWFrfWEudGltZW91dEhhbmRsZT1vZihVai5iaW5kKG51bGwsYSksZCk7YnJlYWt9VWooYSk7YnJlYWs7Y2FzZSA0OklpKGEsYyk7aWYoKGMmNDE4NjExMik9PT1jKWJyZWFrO2Q9YS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8Yzspe3ZhciBnPTMxLVZjKGMpO2Y9MTw8ZztnPWRbZ107Zz5lJiYoZT1nKTtjJj1+Zn1jPWU7Yz1PKCktYztjPSgxMjA+Yz8xMjA6NDgwPmM/NDgwOjEwODA+Yz8xMDgwOjE5MjA+Yz8xOTIwOjNFMz5jPzNFMzo0MzIwPlxuYz80MzIwOjE5NjAqbmooYy8xOTYwKSktYztpZigxMDxjKXthLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGMpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNTpVaihhKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMzI5KSk7fX1NaihhLE8oKSk7cmV0dXJuIGEuY2FsbGJhY2tOb2RlPT09Yj9Oai5iaW5kKG51bGwsYSk6bnVsbH1mdW5jdGlvbiBJaShhLGIpe2ImPX51ajtiJj1+SGk7YS5zdXNwZW5kZWRMYW5lc3w9YjthLnBpbmdlZExhbmVzJj1+Yjtmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGI7KXt2YXIgYz0zMS1WYyhiKSxkPTE8PGM7YVtjXT0tMTtiJj1+ZH19XG5mdW5jdGlvbiBMaihhKXtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7T2ooKTtpZihhPT09VSYmMCE9PShhLmV4cGlyZWRMYW5lcyZXKSl7dmFyIGI9Vzt2YXIgYz1UaihhLGIpOzAhPT0odGomSGkpJiYoYj1VYyhhLGIpLGM9VGooYSxiKSl9ZWxzZSBiPVVjKGEsMCksYz1UaihhLGIpOzAhPT1hLnRhZyYmMj09PWMmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYj1XYyhhKSwwIT09YiYmKGM9VGooYSxiKSkpO2lmKDE9PT1jKXRocm93IGM9c2osUWooYSwwKSxJaShhLGIpLE1qKGEsTygpKSxjO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7VWooYSk7TWooYSxPKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gVmooKXtpZihudWxsIT09Q2ope3ZhciBhPUNqO0NqPW51bGw7YS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2EuZXhwaXJlZExhbmVzfD0yNCZhLnBlbmRpbmdMYW5lcztNaihhLE8oKSl9KX1pZygpfWZ1bmN0aW9uIFdqKGEsYil7dmFyIGM9WDtYfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fWZ1bmN0aW9uIFhqKGEsYil7dmFyIGM9WDtYJj0tMjtYfD04O3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fWZ1bmN0aW9uIG5pKGEsYil7SShyaixxaik7cWp8PWI7dGp8PWJ9ZnVuY3Rpb24gS2koKXtxaj1yai5jdXJyZW50O0gocmopfVxuZnVuY3Rpb24gUWooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEscGYoYykpO2lmKG51bGwhPT1ZKWZvcihjPVkucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmR2YoKTticmVhaztjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTticmVhaztjYXNlIDU6aGgoZCk7YnJlYWs7Y2FzZSA0OmZoKCk7YnJlYWs7Y2FzZSAxMzpIKFApO2JyZWFrO2Nhc2UgMTk6SChQKTticmVhaztjYXNlIDEwOnJnKGQpO2JyZWFrO2Nhc2UgMjM6Y2FzZSAyNDpLaSgpfWM9Yy5yZXR1cm59VT1hO1k9VGcoYS5jdXJyZW50LG51bGwpO1c9cWo9dGo9YjtWPTA7c2o9bnVsbDt1aj1IaT1EZz0wfVxuZnVuY3Rpb24gU2ooYSxiKXtkb3t2YXIgYz1ZO3RyeXtxZygpO3ZoLmN1cnJlbnQ9R2g7aWYoeWgpe2Zvcih2YXIgZD1SLm1lbW9pemVkU3RhdGU7bnVsbCE9PWQ7KXt2YXIgZT1kLnF1ZXVlO251bGwhPT1lJiYoZS5wZW5kaW5nPW51bGwpO2Q9ZC5uZXh0fXloPSExfXhoPTA7VD1TPVI9bnVsbDt6aD0hMTtwai5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7Vj0xO3NqPWI7WT1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9VztoLmZsYWdzfD0yMDQ4O2guZmlyc3RFZmZlY3Q9aC5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWsmJlwib2JqZWN0XCI9PT10eXBlb2YgayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsudGhlbil7dmFyIGw9aztpZigwPT09KGgubW9kZSYyKSl7dmFyIG49aC5hbHRlcm5hdGU7bj8oaC51cGRhdGVRdWV1ZT1uLnVwZGF0ZVF1ZXVlLGgubWVtb2l6ZWRTdGF0ZT1uLm1lbW9pemVkU3RhdGUsaC5sYW5lcz1uLmxhbmVzKTpcbihoLnVwZGF0ZVF1ZXVlPW51bGwsaC5tZW1vaXplZFN0YXRlPW51bGwpfXZhciBBPTAhPT0oUC5jdXJyZW50JjEpLHA9Zztkb3t2YXIgQztpZihDPTEzPT09cC50YWcpe3ZhciB4PXAubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09eClDPW51bGwhPT14LmRlaHlkcmF0ZWQ/ITA6ITE7ZWxzZXt2YXIgdz1wLm1lbW9pemVkUHJvcHM7Qz12b2lkIDA9PT13LmZhbGxiYWNrPyExOiEwIT09dy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjaz8hMDpBPyExOiEwfX1pZihDKXt2YXIgej1wLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT16KXt2YXIgdT1uZXcgU2V0O3UuYWRkKGwpO3AudXBkYXRlUXVldWU9dX1lbHNlIHouYWRkKGwpO2lmKDA9PT0ocC5tb2RlJjIpKXtwLmZsYWdzfD02NDtoLmZsYWdzfD0xNjM4NDtoLmZsYWdzJj0tMjk4MTtpZigxPT09aC50YWcpaWYobnVsbD09PWguYWx0ZXJuYXRlKWgudGFnPTE3O2Vsc2V7dmFyIHQ9emcoLTEsMSk7dC50YWc9MjtBZyhoLHQpfWgubGFuZXN8PTE7YnJlYWsgYX1rPVxudm9pZCAwO2g9Yjt2YXIgcT1mLnBpbmdDYWNoZTtudWxsPT09cT8ocT1mLnBpbmdDYWNoZT1uZXcgT2ksaz1uZXcgU2V0LHEuc2V0KGwsaykpOihrPXEuZ2V0KGwpLHZvaWQgMD09PWsmJihrPW5ldyBTZXQscS5zZXQobCxrKSkpO2lmKCFrLmhhcyhoKSl7ay5hZGQoaCk7dmFyIHY9WWouYmluZChudWxsLGYsbCxoKTtsLnRoZW4odix2KX1wLmZsYWdzfD00MDk2O3AubGFuZXM9YjticmVhayBhfXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApO2s9RXJyb3IoKFJhKGgudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIil9NSE9PVYmJihWPTIpO2s9TWkoayxoKTtwPVxuZztkb3tzd2l0Y2gocC50YWcpe2Nhc2UgMzpmPWs7cC5mbGFnc3w9NDA5NjtiJj0tYjtwLmxhbmVzfD1iO3ZhciBKPVBpKHAsZixiKTtCZyhwLEopO2JyZWFrIGE7Y2FzZSAxOmY9azt2YXIgSz1wLnR5cGUsUT1wLnN0YXRlTm9kZTtpZigwPT09KHAuZmxhZ3MmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEsuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09USYmXCJmdW5jdGlvblwiPT09dHlwZW9mIFEuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoUSkpKSl7cC5mbGFnc3w9NDA5NjtiJj0tYjtwLmxhbmVzfD1iO3ZhciBMPVNpKHAsZixiKTtCZyhwLEwpO2JyZWFrIGF9fXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApfVpqKGMpfWNhdGNoKHZhKXtiPXZhO1k9PT1jJiZudWxsIT09YyYmKFk9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9XG5mdW5jdGlvbiBQaigpe3ZhciBhPW9qLmN1cnJlbnQ7b2ouY3VycmVudD1HaDtyZXR1cm4gbnVsbD09PWE/R2g6YX1mdW5jdGlvbiBUaihhLGIpe3ZhciBjPVg7WHw9MTY7dmFyIGQ9UGooKTtVPT09YSYmVz09PWJ8fFFqKGEsYik7ZG8gdHJ5e2FrKCk7YnJlYWt9Y2F0Y2goZSl7U2ooYSxlKX13aGlsZSgxKTtxZygpO1g9Yztvai5jdXJyZW50PWQ7aWYobnVsbCE9PVkpdGhyb3cgRXJyb3IoeSgyNjEpKTtVPW51bGw7Vz0wO3JldHVybiBWfWZ1bmN0aW9uIGFrKCl7Zm9yKDtudWxsIT09WTspYmsoWSl9ZnVuY3Rpb24gUmooKXtmb3IoO251bGwhPT1ZJiYhUWYoKTspYmsoWSl9ZnVuY3Rpb24gYmsoYSl7dmFyIGI9Y2soYS5hbHRlcm5hdGUsYSxxaik7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP1pqKGEpOlk9Yjtwai5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBaaihhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjIwNDgpKXtjPUdpKGMsYixxaik7aWYobnVsbCE9PWMpe1k9YztyZXR1cm59Yz1iO2lmKDI0IT09Yy50YWcmJjIzIT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fDAhPT0ocWomMTA3Mzc0MTgyNCl8fDA9PT0oYy5tb2RlJjQpKXtmb3IodmFyIGQ9MCxlPWMuY2hpbGQ7bnVsbCE9PWU7KWR8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGU9ZS5zaWJsaW5nO2MuY2hpbGRMYW5lcz1kfW51bGwhPT1hJiYwPT09KGEuZmxhZ3MmMjA0OCkmJihudWxsPT09YS5maXJzdEVmZmVjdCYmKGEuZmlyc3RFZmZlY3Q9Yi5maXJzdEVmZmVjdCksbnVsbCE9PWIubGFzdEVmZmVjdCYmKG51bGwhPT1hLmxhc3RFZmZlY3QmJihhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iLmZpcnN0RWZmZWN0KSxhLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0KSwxPGIuZmxhZ3MmJihudWxsIT09XG5hLmxhc3RFZmZlY3Q/YS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YjphLmZpcnN0RWZmZWN0PWIsYS5sYXN0RWZmZWN0PWIpKX1lbHNle2M9TGkoYik7aWYobnVsbCE9PWMpe2MuZmxhZ3MmPTIwNDc7WT1jO3JldHVybn1udWxsIT09YSYmKGEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PW51bGwsYS5mbGFnc3w9MjA0OCl9Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1k9YjtyZXR1cm59WT1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1WJiYoVj01KX1mdW5jdGlvbiBVaihhKXt2YXIgYj1lZygpO2dnKDk5LGRrLmJpbmQobnVsbCxhLGIpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGRrKGEsYil7ZG8gT2ooKTt3aGlsZShudWxsIT09eWopO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTt2YXIgYz1hLmZpbmlzaGVkV29yaztpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IoeSgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO3ZhciBkPWMubGFuZXN8Yy5jaGlsZExhbmVzLGU9ZCxmPWEucGVuZGluZ0xhbmVzJn5lO2EucGVuZGluZ0xhbmVzPWU7YS5zdXNwZW5kZWRMYW5lcz0wO2EucGluZ2VkTGFuZXM9MDthLmV4cGlyZWRMYW5lcyY9ZTthLm11dGFibGVSZWFkTGFuZXMmPWU7YS5lbnRhbmdsZWRMYW5lcyY9ZTtlPWEuZW50YW5nbGVtZW50cztmb3IodmFyIGc9YS5ldmVudFRpbWVzLGg9YS5leHBpcmF0aW9uVGltZXM7MDxmOyl7dmFyIGs9MzEtVmMoZiksbD0xPDxrO2Vba109MDtnW2tdPS0xO2hba109LTE7ZiY9fmx9bnVsbCE9PVxuQ2omJjA9PT0oZCYyNCkmJkNqLmhhcyhhKSYmQ2ouZGVsZXRlKGEpO2E9PT1VJiYoWT1VPW51bGwsVz0wKTsxPGMuZmxhZ3M/bnVsbCE9PWMubGFzdEVmZmVjdD8oYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxkPWMuZmlyc3RFZmZlY3QpOmQ9YzpkPWMuZmlyc3RFZmZlY3Q7aWYobnVsbCE9PWQpe2U9WDtYfD0zMjtwai5jdXJyZW50PW51bGw7a2Y9ZmQ7Zz1OZSgpO2lmKE9lKGcpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBnKWg9e3N0YXJ0Omcuc2VsZWN0aW9uU3RhcnQsZW5kOmcuc2VsZWN0aW9uRW5kfTtlbHNlIGE6aWYoaD0oaD1nLm93bmVyRG9jdW1lbnQpJiZoLmRlZmF1bHRWaWV3fHx3aW5kb3csKGw9aC5nZXRTZWxlY3Rpb24mJmguZ2V0U2VsZWN0aW9uKCkpJiYwIT09bC5yYW5nZUNvdW50KXtoPWwuYW5jaG9yTm9kZTtmPWwuYW5jaG9yT2Zmc2V0O2s9bC5mb2N1c05vZGU7bD1sLmZvY3VzT2Zmc2V0O3RyeXtoLm5vZGVUeXBlLGsubm9kZVR5cGV9Y2F0Y2godmEpe2g9bnVsbDtcbmJyZWFrIGF9dmFyIG49MCxBPS0xLHA9LTEsQz0wLHg9MCx3PWcsej1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHU7Oyl7dyE9PWh8fDAhPT1mJiYzIT09dy5ub2RlVHlwZXx8KEE9bitmKTt3IT09a3x8MCE9PWwmJjMhPT13Lm5vZGVUeXBlfHwocD1uK2wpOzM9PT13Lm5vZGVUeXBlJiYobis9dy5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHU9dy5maXJzdENoaWxkKSlicmVhazt6PXc7dz11fWZvcig7Oyl7aWYodz09PWcpYnJlYWsgYjt6PT09aCYmKytDPT09ZiYmKEE9bik7ej09PWsmJisreD09PWwmJihwPW4pO2lmKG51bGwhPT0odT13Lm5leHRTaWJsaW5nKSlicmVhazt3PXo7ej13LnBhcmVudE5vZGV9dz11fWg9LTE9PT1BfHwtMT09PXA/bnVsbDp7c3RhcnQ6QSxlbmQ6cH19ZWxzZSBoPW51bGw7aD1ofHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBoPW51bGw7bGY9e2ZvY3VzZWRFbGVtOmcsc2VsZWN0aW9uUmFuZ2U6aH07ZmQ9ITE7SWo9bnVsbDtKaj0hMTtaPWQ7ZG8gdHJ5e2VrKCl9Y2F0Y2godmEpe2lmKG51bGw9PT1cblopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7SWo9bnVsbDtaPWQ7ZG8gdHJ5e2ZvcihnPWE7bnVsbCE9PVo7KXt2YXIgdD1aLmZsYWdzO3QmMTYmJnBiKFouc3RhdGVOb2RlLFwiXCIpO2lmKHQmMTI4KXt2YXIgcT1aLmFsdGVybmF0ZTtpZihudWxsIT09cSl7dmFyIHY9cS5yZWY7bnVsbCE9PXYmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdj92KG51bGwpOnYuY3VycmVudD1udWxsKX19c3dpdGNoKHQmMTAzOCl7Y2FzZSAyOmZqKFopO1ouZmxhZ3MmPS0zO2JyZWFrO2Nhc2UgNjpmaihaKTtaLmZsYWdzJj0tMztpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDEwMjQ6Wi5mbGFncyY9LTEwMjU7YnJlYWs7Y2FzZSAxMDI4OlouZmxhZ3MmPS0xMDI1O2lqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgNDppaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDg6aD1aO2NqKGcsaCk7dmFyIEo9aC5hbHRlcm5hdGU7ZGooaCk7bnVsbCE9PVxuSiYmZGooSil9Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTt2PWxmO3E9TmUoKTt0PXYuZm9jdXNlZEVsZW07Zz12LnNlbGVjdGlvblJhbmdlO2lmKHEhPT10JiZ0JiZ0Lm93bmVyRG9jdW1lbnQmJk1lKHQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsdCkpe251bGwhPT1nJiZPZSh0KSYmKHE9Zy5zdGFydCx2PWcuZW5kLHZvaWQgMD09PXYmJih2PXEpLFwic2VsZWN0aW9uU3RhcnRcImluIHQ/KHQuc2VsZWN0aW9uU3RhcnQ9cSx0LnNlbGVjdGlvbkVuZD1NYXRoLm1pbih2LHQudmFsdWUubGVuZ3RoKSk6KHY9KHE9dC5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJnEuZGVmYXVsdFZpZXd8fHdpbmRvdyx2LmdldFNlbGVjdGlvbiYmKHY9di5nZXRTZWxlY3Rpb24oKSxoPXQudGV4dENvbnRlbnQubGVuZ3RoLEo9TWF0aC5taW4oZy5zdGFydCxoKSxnPXZvaWQgMD09PVxuZy5lbmQ/SjpNYXRoLm1pbihnLmVuZCxoKSwhdi5leHRlbmQmJko+ZyYmKGg9ZyxnPUosSj1oKSxoPUxlKHQsSiksZj1MZSh0LGcpLGgmJmYmJigxIT09di5yYW5nZUNvdW50fHx2LmFuY2hvck5vZGUhPT1oLm5vZGV8fHYuYW5jaG9yT2Zmc2V0IT09aC5vZmZzZXR8fHYuZm9jdXNOb2RlIT09Zi5ub2RlfHx2LmZvY3VzT2Zmc2V0IT09Zi5vZmZzZXQpJiYocT1xLmNyZWF0ZVJhbmdlKCkscS5zZXRTdGFydChoLm5vZGUsaC5vZmZzZXQpLHYucmVtb3ZlQWxsUmFuZ2VzKCksSj5nPyh2LmFkZFJhbmdlKHEpLHYuZXh0ZW5kKGYubm9kZSxmLm9mZnNldCkpOihxLnNldEVuZChmLm5vZGUsZi5vZmZzZXQpLHYuYWRkUmFuZ2UocSkpKSkpKTtxPVtdO2Zvcih2PXQ7dj12LnBhcmVudE5vZGU7KTE9PT12Lm5vZGVUeXBlJiZxLnB1c2goe2VsZW1lbnQ6dixsZWZ0OnYuc2Nyb2xsTGVmdCx0b3A6di5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgdC5mb2N1cyYmdC5mb2N1cygpO2Zvcih0PVxuMDt0PHEubGVuZ3RoO3QrKyl2PXFbdF0sdi5lbGVtZW50LnNjcm9sbExlZnQ9di5sZWZ0LHYuZWxlbWVudC5zY3JvbGxUb3A9di50b3B9ZmQ9ISFrZjtsZj1rZj1udWxsO2EuY3VycmVudD1jO1o9ZDtkbyB0cnl7Zm9yKHQ9YTtudWxsIT09Wjspe3ZhciBLPVouZmxhZ3M7SyYzNiYmWWkodCxaLmFsdGVybmF0ZSxaKTtpZihLJjEyOCl7cT12b2lkIDA7dmFyIFE9Wi5yZWY7aWYobnVsbCE9PVEpe3ZhciBMPVouc3RhdGVOb2RlO3N3aXRjaChaLnRhZyl7Y2FzZSA1OnE9TDticmVhaztkZWZhdWx0OnE9TH1cImZ1bmN0aW9uXCI9PT10eXBlb2YgUT9RKHEpOlEuY3VycmVudD1xfX1aPVoubmV4dEVmZmVjdH19Y2F0Y2godmEpe2lmKG51bGw9PT1aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO1o9bnVsbDskZigpO1g9ZX1lbHNlIGEuY3VycmVudD1jO2lmKHhqKXhqPSExLHlqPWEsemo9YjtlbHNlIGZvcihaPWQ7bnVsbCE9PVo7KWI9XG5aLm5leHRFZmZlY3QsWi5uZXh0RWZmZWN0PW51bGwsWi5mbGFncyY4JiYoSz1aLEsuc2libGluZz1udWxsLEsuc3RhdGVOb2RlPW51bGwpLFo9YjtkPWEucGVuZGluZ0xhbmVzOzA9PT1kJiYoVGk9bnVsbCk7MT09PWQ/YT09PUVqP0RqKys6KERqPTAsRWo9YSk6RGo9MDtjPWMuc3RhdGVOb2RlO2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclJvb3QpdHJ5e01mLm9uQ29tbWl0RmliZXJSb290KExmLGMsdm9pZCAwLDY0PT09KGMuY3VycmVudC5mbGFncyY2NCkpfWNhdGNoKHZhKXt9TWooYSxPKCkpO2lmKFFpKXRocm93IFFpPSExLGE9UmksUmk9bnVsbCxhO2lmKDAhPT0oWCY4KSlyZXR1cm4gbnVsbDtpZygpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gZWsoKXtmb3IoO251bGwhPT1aOyl7dmFyIGE9Wi5hbHRlcm5hdGU7Smp8fG51bGw9PT1Janx8KDAhPT0oWi5mbGFncyY4KT9kYyhaLElqKSYmKEpqPSEwKToxMz09PVoudGFnJiZtaihhLFopJiZkYyhaLElqKSYmKEpqPSEwKSk7dmFyIGI9Wi5mbGFnczswIT09KGImMjU2KSYmWGkoYSxaKTswPT09KGImNTEyKXx8eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSk7Wj1aLm5leHRFZmZlY3R9fWZ1bmN0aW9uIE9qKCl7aWYoOTAhPT16ail7dmFyIGE9OTc8emo/OTc6emo7emo9OTA7cmV0dXJuIGdnKGEsZmspfXJldHVybiExfWZ1bmN0aW9uICRpKGEsYil7QWoucHVzaChiLGEpO3hqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpfWZ1bmN0aW9uIFppKGEsYil7QmoucHVzaChiLGEpO3hqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpfVxuZnVuY3Rpb24gZmsoKXtpZihudWxsPT09eWopcmV0dXJuITE7dmFyIGE9eWo7eWo9bnVsbDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzMxKSk7dmFyIGI9WDtYfD0zMjt2YXIgYz1CajtCaj1bXTtmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrPTIpe3ZhciBlPWNbZF0sZj1jW2QrMV0sZz1lLmRlc3Ryb3k7ZS5kZXN0cm95PXZvaWQgMDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyl0cnl7ZygpfWNhdGNoKGspe2lmKG51bGw9PT1mKXRocm93IEVycm9yKHkoMzMwKSk7V2koZixrKX19Yz1BajtBaj1bXTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCs9Mil7ZT1jW2RdO2Y9Y1tkKzFdO3RyeXt2YXIgaD1lLmNyZWF0ZTtlLmRlc3Ryb3k9aCgpfWNhdGNoKGspe2lmKG51bGw9PT1mKXRocm93IEVycm9yKHkoMzMwKSk7V2koZixrKX19Zm9yKGg9YS5jdXJyZW50LmZpcnN0RWZmZWN0O251bGwhPT1oOylhPWgubmV4dEVmZmVjdCxoLm5leHRFZmZlY3Q9bnVsbCxoLmZsYWdzJjgmJihoLnNpYmxpbmc9XG5udWxsLGguc3RhdGVOb2RlPW51bGwpLGg9YTtYPWI7aWcoKTtyZXR1cm4hMH1mdW5jdGlvbiBnayhhLGIsYyl7Yj1NaShjLGIpO2I9UGkoYSxiLDEpO0FnKGEsYik7Yj1IZygpO2E9S2ooYSwxKTtudWxsIT09YSYmKCRjKGEsMSxiKSxNaihhLGIpKX1cbmZ1bmN0aW9uIFdpKGEsYil7aWYoMz09PWEudGFnKWdrKGEsYSxiKTtlbHNlIGZvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKDM9PT1jLnRhZyl7Z2soYyxhLGIpO2JyZWFrfWVsc2UgaWYoMT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoZCkpKXthPU1pKGIsYSk7dmFyIGU9U2koYyxhLDEpO0FnKGMsZSk7ZT1IZygpO2M9S2ooYywxKTtpZihudWxsIT09YykkYyhjLDEsZSksTWooYyxlKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl0cnl7ZC5jb21wb25lbnREaWRDYXRjaChiLGEpfWNhdGNoKGYpe31icmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBZaihhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2I9SGcoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmM7VT09PWEmJihXJmMpPT09YyYmKDQ9PT1WfHwzPT09ViYmKFcmNjI5MTQ1NjApPT09VyYmNTAwPk8oKS1qaj9RaihhLDApOnVqfD1jKTtNaihhLGIpfWZ1bmN0aW9uIGxqKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbCE9PWMmJmMuZGVsZXRlKGIpO2I9MDswPT09YiYmKGI9YS5tb2RlLDA9PT0oYiYyKT9iPTE6MD09PShiJjQpP2I9OTk9PT1lZygpPzE6MjooMD09PUdqJiYoR2o9dGopLGI9WWMoNjI5MTQ1NjAmfkdqKSwwPT09YiYmKGI9NDE5NDMwNCkpKTtjPUhnKCk7YT1LaihhLGIpO251bGwhPT1hJiYoJGMoYSxiLGMpLE1qKGEsYykpfXZhciBjaztcbmNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLmxhbmVzO2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxOLmN1cnJlbnQpdWc9ITA7ZWxzZSBpZigwIT09KGMmZCkpdWc9MCE9PShhLmZsYWdzJjE2Mzg0KT8hMDohMTtlbHNle3VnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOnJpKGIpO3NoKCk7YnJlYWs7Y2FzZSA1OmdoKGIpO2JyZWFrO2Nhc2UgMTpGZihiLnR5cGUpJiZKZihiKTticmVhaztjYXNlIDQ6ZWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOmQ9Yi5tZW1vaXplZFByb3BzLnZhbHVlO3ZhciBlPWIudHlwZS5fY29udGV4dDtJKG1nLGUuX2N1cnJlbnRWYWx1ZSk7ZS5fY3VycmVudFZhbHVlPWQ7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtpZigwIT09KGMmYi5jaGlsZC5jaGlsZExhbmVzKSlyZXR1cm4gdGkoYSxiLGMpO0koUCxQLmN1cnJlbnQmMSk7Yj1oaShhLGIsYyk7cmV0dXJuIG51bGwhPT1cbmI/Yi5zaWJsaW5nOm51bGx9SShQLFAuY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9MCE9PShjJmIuY2hpbGRMYW5lcyk7aWYoMCE9PShhLmZsYWdzJjY0KSl7aWYoZClyZXR1cm4gQWkoYSxiLGMpO2IuZmxhZ3N8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCk7SShQLFAuY3VycmVudCk7aWYoZClicmVhaztlbHNlIHJldHVybiBudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gYi5sYW5lcz0wLG1pKGEsYixjKX1yZXR1cm4gaGkoYSxiLGMpfWVsc2UgdWc9ITE7Yi5sYW5lcz0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9Yi50eXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1FZihiLE0uY3VycmVudCk7dGcoYixjKTtlPUNoKG51bGwsYixkLGEsZSxjKTtiLmZsYWdzfD0xO2lmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtpZihGZihkKSl7dmFyIGY9ITA7SmYoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7eGcoYik7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJkdnKGIsZCxnLGEpO2UudXBkYXRlcj1LZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxzPWI7T2coYixkLGEsYyk7Yj1xaShudWxsLGIsZCwhMCxmLGMpfWVsc2UgYi50YWc9MCxmaShudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjplPWIuZWxlbWVudFR5cGU7YTp7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mik7XG5hPWIucGVuZGluZ1Byb3BzO2Y9ZS5faW5pdDtlPWYoZS5fcGF5bG9hZCk7Yi50eXBlPWU7Zj1iLnRhZz1oayhlKTthPWxnKGUsYSk7c3dpdGNoKGYpe2Nhc2UgMDpiPWxpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1waShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPWdpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9aWkobnVsbCxiLGUsbGcoZS50eXBlLGEpLGQsYyk7YnJlYWsgYX10aHJvdyBFcnJvcih5KDMwNixlLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLGxpKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLHBpKGEsYixkLGUsYyk7Y2FzZSAzOnJpKGIpO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09YXx8bnVsbD09PWQpdGhyb3cgRXJyb3IoeSgyODIpKTtcbmQ9Yi5wZW5kaW5nUHJvcHM7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDt5ZyhhLGIpO0NnKGIsZCxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpc2goKSxiPWhpKGEsYixjKTtlbHNle2U9Yi5zdGF0ZU5vZGU7aWYoZj1lLmh5ZHJhdGUpa2g9cmYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSxqaD1iLGY9bGg9ITA7aWYoZil7YT1lLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE7aWYobnVsbCE9YSlmb3IoZT0wO2U8YS5sZW5ndGg7ZSs9MilmPWFbZV0sZi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1hW2UrMV0sdGgucHVzaChmKTtjPVpnKGIsbnVsbCxkLGMpO2ZvcihiLmNoaWxkPWM7YzspYy5mbGFncz1jLmZsYWdzJi0zfDEwMjQsYz1jLnNpYmxpbmd9ZWxzZSBmaShhLGIsZCxjKSxzaCgpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIGdoKGIpLG51bGw9PT1hJiZcbnBoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sbmYoZCxlKT9nPW51bGw6bnVsbCE9PWYmJm5mKGQsZikmJihiLmZsYWdzfD0xNiksb2koYSxiKSxmaShhLGIsZyxjKSxiLmNoaWxkO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJnBoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gdGkoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gZWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9WWcoYixudWxsLGQsYyk6ZmkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLGdpKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbmMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTt2YXIgaD1iLnR5cGUuX2NvbnRleHQ7SShtZyxoLl9jdXJyZW50VmFsdWUpO2guX2N1cnJlbnRWYWx1ZT1mO2lmKG51bGwhPT1nKWlmKGg9Zy52YWx1ZSxmPUhlKGgsZik/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsZik6MTA3Mzc0MTgyMyl8MCwwPT09Zil7aWYoZy5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFOLmN1cnJlbnQpe2I9aGkoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGg9Yi5jaGlsZCxudWxsIT09aCYmKGgucmV0dXJuPWIpO251bGwhPT1oOyl7dmFyIGs9aC5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWspe2c9aC5jaGlsZDtmb3IodmFyIGw9XG5rLmZpcnN0Q29udGV4dDtudWxsIT09bDspe2lmKGwuY29udGV4dD09PWQmJjAhPT0obC5vYnNlcnZlZEJpdHMmZikpezE9PT1oLnRhZyYmKGw9emcoLTEsYyYtYyksbC50YWc9MixBZyhoLGwpKTtoLmxhbmVzfD1jO2w9aC5hbHRlcm5hdGU7bnVsbCE9PWwmJihsLmxhbmVzfD1jKTtzZyhoLnJldHVybixjKTtrLmxhbmVzfD1jO2JyZWFrfWw9bC5uZXh0fX1lbHNlIGc9MTA9PT1oLnRhZz9oLnR5cGU9PT1iLnR5cGU/bnVsbDpoLmNoaWxkOmguY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49aDtlbHNlIGZvcihnPWg7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWg9Zy5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1nLnJldHVybjtnPWg7YnJlYWt9Zz1nLnJldHVybn1oPWd9ZmkoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4sdGcoYixjKSxlPXZnKGUsXG5mLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZmxhZ3N8PTEsZmkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPWxnKGUsYi5wZW5kaW5nUHJvcHMpLGY9bGcoZS50eXBlLGYpLGlpKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiBraShhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGQsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxiLnRhZz0xLEZmKGQpPyhhPSEwLEpmKGIpKTphPSExLHRnKGIsYyksTWcoYixkLGUpLE9nKGIsZCxlLGMpLHFpKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gQWkoYSxiLGMpO2Nhc2UgMjM6cmV0dXJuIG1pKGEsYixjKTtjYXNlIDI0OnJldHVybiBtaShhLGIsYyl9dGhyb3cgRXJyb3IoeSgxNTYsYi50YWcpKTtcbn07ZnVuY3Rpb24gaWsoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmZsYWdzPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZExhbmVzPXRoaXMubGFuZXM9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIG5oKGEsYixjLGQpe3JldHVybiBuZXcgaWsoYSxiLGMsZCl9ZnVuY3Rpb24gamkoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1cbmZ1bmN0aW9uIGhrKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBqaShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09QWEpcmV0dXJuIDExO2lmKGE9PT1EYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBUZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPW5oKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMudHlwZT1hLnR5cGUsYy5mbGFncz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcztjLmxhbmVzPWEubGFuZXM7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntsYW5lczpiLmxhbmVzLGZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dH07XG5jLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFZnKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlqaShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSB1YTpyZXR1cm4gWGcoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBIYTpnPTg7ZXw9MTY7YnJlYWs7Y2FzZSB3YTpnPTg7ZXw9MTticmVhaztjYXNlIHhhOnJldHVybiBhPW5oKDEyLGMsYixlfDgpLGEuZWxlbWVudFR5cGU9eGEsYS50eXBlPXhhLGEubGFuZXM9ZixhO2Nhc2UgQmE6cmV0dXJuIGE9bmgoMTMsYyxiLGUpLGEudHlwZT1CYSxhLmVsZW1lbnRUeXBlPUJhLGEubGFuZXM9ZixhO2Nhc2UgQ2E6cmV0dXJuIGE9bmgoMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9Q2EsYS5sYW5lcz1mLGE7Y2FzZSBJYTpyZXR1cm4gdmkoYyxlLGYsYik7Y2FzZSBKYTpyZXR1cm4gYT1uaCgyNCxjLGIsZSksYS5lbGVtZW50VHlwZT1KYSxhLmxhbmVzPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB5YTpnPTEwO2JyZWFrIGE7Y2FzZSB6YTpnPTk7YnJlYWsgYTtjYXNlIEFhOmc9MTE7YnJlYWsgYTtjYXNlIERhOmc9MTQ7YnJlYWsgYTtjYXNlIEVhOmc9MTY7ZD1udWxsO2JyZWFrIGE7Y2FzZSBGYTpnPTIyO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1uaChnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5sYW5lcz1mO3JldHVybiBifWZ1bmN0aW9uIFhnKGEsYixjLGQpe2E9bmgoNyxhLGQsYik7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIHZpKGEsYixjLGQpe2E9bmgoMjMsYSxkLGIpO2EuZWxlbWVudFR5cGU9SWE7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIFVnKGEsYixjKXthPW5oKDYsYSxudWxsLGIpO2EubGFuZXM9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIFdnKGEsYixjKXtiPW5oKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmxhbmVzPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gamsoYSxiLGMpe3RoaXMudGFnPWI7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5maW5pc2hlZFdvcms9dGhpcy5waW5nQ2FjaGU9dGhpcy5jdXJyZW50PXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5oeWRyYXRlPWM7dGhpcy5jYWxsYmFja05vZGU9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9MDt0aGlzLmV2ZW50VGltZXM9WmMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXM9WmMoLTEpO3RoaXMuZW50YW5nbGVkTGFuZXM9dGhpcy5maW5pc2hlZExhbmVzPXRoaXMubXV0YWJsZVJlYWRMYW5lcz10aGlzLmV4cGlyZWRMYW5lcz10aGlzLnBpbmdlZExhbmVzPXRoaXMuc3VzcGVuZGVkTGFuZXM9dGhpcy5wZW5kaW5nTGFuZXM9MDt0aGlzLmVudGFuZ2xlbWVudHM9WmMoMCk7dGhpcy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPW51bGx9XG5mdW5jdGlvbiBrayhhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOnRhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuZnVuY3Rpb24gbGsoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9SGcoKSxnPUlnKGUpO2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFscztiOntpZihaYihjKSE9PWN8fDEhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDE3MCkpO3ZhciBoPWM7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aD1oLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKEZmKGgudHlwZSkpe2g9aC5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn19aD1oLnJldHVybn13aGlsZShudWxsIT09aCk7dGhyb3cgRXJyb3IoeSgxNzEpKTt9aWYoMT09PWMudGFnKXt2YXIgaz1jLnR5cGU7aWYoRmYoaykpe2M9SWYoYyxrLGgpO2JyZWFrIGF9fWM9aH1lbHNlIGM9Q2Y7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj16ZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PWQ/bnVsbDpkO251bGwhPT1cbmQmJihiLmNhbGxiYWNrPWQpO0FnKGUsYik7SmcoZSxnLGYpO3JldHVybiBnfWZ1bmN0aW9uIG1rKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gbmsoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7dmFyIGM9YS5yZXRyeUxhbmU7YS5yZXRyeUxhbmU9MCE9PWMmJmM8Yj9jOmJ9fWZ1bmN0aW9uIG9rKGEsYil7bmsoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJm5rKGEsYil9ZnVuY3Rpb24gcGsoKXtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHFrKGEsYixjKXt2YXIgZD1udWxsIT1jJiZudWxsIT1jLmh5ZHJhdGlvbk9wdGlvbnMmJmMuaHlkcmF0aW9uT3B0aW9ucy5tdXRhYmxlU291cmNlc3x8bnVsbDtjPW5ldyBqayhhLGIsbnVsbCE9YyYmITA9PT1jLmh5ZHJhdGUpO2I9bmgoMyxudWxsLG51bGwsMj09PWI/NzoxPT09Yj8zOjApO2MuY3VycmVudD1iO2Iuc3RhdGVOb2RlPWM7eGcoYik7YVtmZl09Yy5jdXJyZW50O2NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtpZihkKWZvcihhPTA7YTxkLmxlbmd0aDthKyspe2I9ZFthXTt2YXIgZT1iLl9nZXRWZXJzaW9uO2U9ZShiLl9zb3VyY2UpO251bGw9PWMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT9jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9W2IsZV06Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhLnB1c2goYixlKX10aGlzLl9pbnRlcm5hbFJvb3Q9Y31cbnFrLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7bGsoYSx0aGlzLl9pbnRlcm5hbFJvb3QsbnVsbCxudWxsKX07cWsucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3QsYj1hLmNvbnRhaW5lckluZm87bGsobnVsbCxhLG51bGwsZnVuY3Rpb24oKXtiW2ZmXT1udWxsfSl9O2Z1bmN0aW9uIHJrKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1cbmZ1bmN0aW9uIHNrKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgcWsoYSwwLGI/e2h5ZHJhdGU6ITB9OnZvaWQgMCl9XG5mdW5jdGlvbiB0ayhhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPW1rKGcpO2guY2FsbChhKX19bGsoYixnLGEsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1zayhjLGQpO2c9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtrLmNhbGwoYSl9fVhqKGZ1bmN0aW9uKCl7bGsoYixnLGEsZSl9KX1yZXR1cm4gbWsoZyl9ZWM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKTtKZyhhLDQsYik7b2soYSw0KX19O2ZjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw2NzEwODg2NCxiKTtvayhhLDY3MTA4ODY0KX19O1xuZ2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKSxjPUlnKGEpO0pnKGEsYyxiKTtvayhhLGMpfX07aGM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYigpfTtcbnliPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6YWIoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPURiKGQpO2lmKCFlKXRocm93IEVycm9yKHkoOTApKTtXYShkKTthYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmZiKGEsISFjLm11bHRpcGxlLGIsITEpfX07R2I9V2o7XG5IYj1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVg7WHw9NDt0cnl7cmV0dXJuIGdnKDk4LGEuYmluZChudWxsLGIsYyxkLGUpKX1maW5hbGx5e1g9ZiwwPT09WCYmKHdqKCksaWcoKSl9fTtJYj1mdW5jdGlvbigpezA9PT0oWCY0OSkmJihWaigpLE9qKCkpfTtKYj1mdW5jdGlvbihhLGIpe3ZhciBjPVg7WHw9Mjt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX07ZnVuY3Rpb24gdWsoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4ga2soYSxiLG51bGwsYyl9dmFyIHZrPXtFdmVudHM6W0NiLHVlLERiLEViLEZiLE9qLHtjdXJyZW50OiExfV19LHdrPXtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp3YyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE3LjAuMVwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn07XG52YXIgeGs9e2J1bmRsZVR5cGU6d2suYnVuZGxlVHlwZSx2ZXJzaW9uOndrLnZlcnNpb24scmVuZGVyZXJQYWNrYWdlTmFtZTp3ay5yZW5kZXJlclBhY2thZ2VOYW1lLHJlbmRlcmVyQ29uZmlnOndrLnJlbmRlcmVyQ29uZmlnLG92ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLG92ZXJyaWRlUHJvcHNEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGg6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOnJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1jYyhhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2suZmluZEZpYmVyQnlIb3N0SW5zdGFuY2V8fFxucGssZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pe3ZhciB5az1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIXlrLmlzRGlzYWJsZWQmJnlrLnN1cHBvcnRzRmliZXIpdHJ5e0xmPXlrLmluamVjdCh4ayksTWY9eWt9Y2F0Y2goYSl7fX1leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPXZrO2V4cG9ydHMuY3JlYXRlUG9ydGFsPXVrO1xuZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxzO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcih5KDE4OCkpO3Rocm93IEVycm9yKHkoMjY4LE9iamVjdC5rZXlzKGEpKSk7fWE9Y2MoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtleHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhLGIpe3ZhciBjPVg7aWYoMCE9PShjJjQ4KSlyZXR1cm4gYShiKTtYfD0xO3RyeXtpZihhKXJldHVybiBnZyg5OSxhLmJpbmQobnVsbCxiKSl9ZmluYWxseXtYPWMsaWcoKX19O2V4cG9ydHMuaHlkcmF0ZT1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCEwLGMpfTtcbmV4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4gdGsobnVsbCxhLGIsITEsYyl9O2V4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighcmsoYSkpdGhyb3cgRXJyb3IoeSg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFhqKGZ1bmN0aW9uKCl7dGsobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW2ZmXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9V2o7ZXhwb3J0cy51bnN0YWJsZV9jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdWsoYSxiLDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsKX07XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFyayhjKSl0aHJvdyBFcnJvcih5KDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxzKXRocm93IEVycm9yKHkoMzgpKTtyZXR1cm4gdGsoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMVwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4yMC4xXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBmLGcsaCxrO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBsPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIGwubm93KCl9fWVsc2V7dmFyIHA9RGF0ZSxxPXAubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gcC5ub3coKS1xfX1cbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciB0PW51bGwsdT1udWxsLHc9ZnVuY3Rpb24oKXtpZihudWxsIT09dCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTt0KCEwLGEpO3Q9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHcsMCksYjt9fTtmPWZ1bmN0aW9uKGEpe251bGwhPT10P3NldFRpbWVvdXQoZiwwLGEpOih0PWEsc2V0VGltZW91dCh3LDApKX07Zz1mdW5jdGlvbihhLGIpe3U9c2V0VGltZW91dChhLGIpfTtoPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHUpfTtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2s9ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgeD13aW5kb3cuc2V0VGltZW91dCx5PXdpbmRvdy5jbGVhclRpbWVvdXQ7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlKXt2YXIgej1cbndpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvcmVhY3QtcG9seWZpbGxzXCIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB6JiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKX12YXIgQT0hMSxCPW51bGwsQz0tMSxEPTUsRT0wO2V4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKT49XG5FfTtrPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lIHJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHN1cHBvcnRlZFwiKTpEPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTt2YXIgRj1uZXcgTWVzc2FnZUNoYW5uZWwsRz1GLnBvcnQyO0YucG9ydDEub25tZXNzYWdlPWZ1bmN0aW9uKCl7aWYobnVsbCE9PUIpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7RT1hK0Q7dHJ5e0IoITAsYSk/Ry5wb3N0TWVzc2FnZShudWxsKTooQT0hMSxCPW51bGwpfWNhdGNoKGIpe3Rocm93IEcucG9zdE1lc3NhZ2UobnVsbCksYjt9fWVsc2UgQT0hMX07Zj1mdW5jdGlvbihhKXtCPWE7QXx8KEE9ITAsRy5wb3N0TWVzc2FnZShudWxsKSl9O2c9ZnVuY3Rpb24oYSxiKXtDPVxueChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eShDKTtDPS0xfX1mdW5jdGlvbiBIKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEkoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIEooYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIEsoYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+SShuLGMpKXZvaWQgMCE9PXImJjA+SShyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+SShyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSShhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTD1bXSxNPVtdLE49MSxPPW51bGwsUD0zLFE9ITEsUj0hMSxTPSExO1xuZnVuY3Rpb24gVChhKXtmb3IodmFyIGI9SihNKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKUsoTSk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlLKE0pLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSChMLGIpO2Vsc2UgYnJlYWs7Yj1KKE0pfX1mdW5jdGlvbiBVKGEpe1M9ITE7VChhKTtpZighUilpZihudWxsIT09SihMKSlSPSEwLGYoVik7ZWxzZXt2YXIgYj1KKE0pO251bGwhPT1iJiZnKFUsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gVihhLGIpe1I9ITE7UyYmKFM9ITEsaCgpKTtRPSEwO3ZhciBjPVA7dHJ5e1QoYik7Zm9yKE89SihMKTtudWxsIT09TyYmKCEoTy5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQoKSk7KXt2YXIgZD1PLmNhbGxiYWNrO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXtPLmNhbGxiYWNrPW51bGw7UD1PLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChPLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/Ty5jYWxsYmFjaz1lOk89PT1KKEwpJiZLKEwpO1QoYil9ZWxzZSBLKEwpO089SihMKX1pZihudWxsIT09Tyl2YXIgbT0hMDtlbHNle3ZhciBuPUooTSk7bnVsbCE9PW4mJmcoVSxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7Tz1udWxsLFA9YyxRPSExfX12YXIgVz1rO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7XG5leHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe1J8fFF8fChSPSEwLGYoVikpfTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFB9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gSihMKX07XG5leHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFApe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVB9dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtQPWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1XO2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UDtQPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtQPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6TisrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsSChNLGEpLG51bGw9PT1KKEwpJiZhPT09SihNKSYmKFM/aCgpOlM9ITAsZyhVLGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxIKEwsYSksUnx8UXx8KFI9ITAsZihWKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVA7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1A9Y319fTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoXCJ3ZWJleHRlbnNpb24tcG9seWZpbGxcIiwgW1wibW9kdWxlXCJdLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkobW9kdWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kKTtcbiAgICBnbG9iYWwuYnJvd3NlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbiAobW9kdWxlKSB7XG4gIC8qIHdlYmV4dGVuc2lvbi1wb2x5ZmlsbCAtIHYwLjcuMCAtIFR1ZSBOb3YgMTAgMjAyMCAyMDoyNDowNCAqL1xuXG4gIC8qIC0qLSBNb2RlOiBpbmRlbnQtdGFicy1tb2RlOiBuaWw7IGpzLWluZGVudC1sZXZlbDogMiAtKi0gKi9cblxuICAvKiB2aW06IHNldCBzdHM9MiBzdz0yIGV0IHR3PTgwOiAqL1xuXG4gIC8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAgICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpc1xuICAgKiBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBpZiAodHlwZW9mIGJyb3dzZXIgPT09IFwidW5kZWZpbmVkXCIgfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKGJyb3dzZXIpICE9PSBPYmplY3QucHJvdG90eXBlKSB7XG4gICAgY29uc3QgQ0hST01FX1NFTkRfTUVTU0FHRV9DQUxMQkFDS19OT19SRVNQT05TRV9NRVNTQUdFID0gXCJUaGUgbWVzc2FnZSBwb3J0IGNsb3NlZCBiZWZvcmUgYSByZXNwb25zZSB3YXMgcmVjZWl2ZWQuXCI7XG4gICAgY29uc3QgU0VORF9SRVNQT05TRV9ERVBSRUNBVElPTl9XQVJOSU5HID0gXCJSZXR1cm5pbmcgYSBQcm9taXNlIGlzIHRoZSBwcmVmZXJyZWQgd2F5IHRvIHNlbmQgYSByZXBseSBmcm9tIGFuIG9uTWVzc2FnZS9vbk1lc3NhZ2VFeHRlcm5hbCBsaXN0ZW5lciwgYXMgdGhlIHNlbmRSZXNwb25zZSB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgc3BlY3MgKFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL01vemlsbGEvQWRkLW9ucy9XZWJFeHRlbnNpb25zL0FQSS9ydW50aW1lL29uTWVzc2FnZSlcIjsgLy8gV3JhcHBpbmcgdGhlIGJ1bGsgb2YgdGhpcyBwb2x5ZmlsbCBpbiBhIG9uZS10aW1lLXVzZSBmdW5jdGlvbiBpcyBhIG1pbm9yXG4gICAgLy8gb3B0aW1pemF0aW9uIGZvciBGaXJlZm94LiBTaW5jZSBTcGlkZXJtb25rZXkgZG9lcyBub3QgZnVsbHkgcGFyc2UgdGhlXG4gICAgLy8gY29udGVudHMgb2YgYSBmdW5jdGlvbiB1bnRpbCB0aGUgZmlyc3QgdGltZSBpdCdzIGNhbGxlZCwgYW5kIHNpbmNlIGl0IHdpbGxcbiAgICAvLyBuZXZlciBhY3R1YWxseSBuZWVkIHRvIGJlIGNhbGxlZCwgdGhpcyBhbGxvd3MgdGhlIHBvbHlmaWxsIHRvIGJlIGluY2x1ZGVkXG4gICAgLy8gaW4gRmlyZWZveCBuZWFybHkgZm9yIGZyZWUuXG5cbiAgICBjb25zdCB3cmFwQVBJcyA9IGV4dGVuc2lvbkFQSXMgPT4ge1xuICAgICAgLy8gTk9URTogYXBpTWV0YWRhdGEgaXMgYXNzb2NpYXRlZCB0byB0aGUgY29udGVudCBvZiB0aGUgYXBpLW1ldGFkYXRhLmpzb24gZmlsZVxuICAgICAgLy8gYXQgYnVpbGQgdGltZSBieSByZXBsYWNpbmcgdGhlIGZvbGxvd2luZyBcImluY2x1ZGVcIiB3aXRoIHRoZSBjb250ZW50IG9mIHRoZVxuICAgICAgLy8gSlNPTiBmaWxlLlxuICAgICAgY29uc3QgYXBpTWV0YWRhdGEgPSB7XG4gICAgICAgIFwiYWxhcm1zXCI6IHtcbiAgICAgICAgICBcImNsZWFyXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiY2xlYXJBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJib29rbWFya3NcIjoge1xuICAgICAgICAgIFwiY3JlYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0Q2hpbGRyZW5cIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRSZWNlbnRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRTdWJUcmVlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0VHJlZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVUcmVlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VhcmNoXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidXBkYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiYnJvd3NlckFjdGlvblwiOiB7XG4gICAgICAgICAgXCJkaXNhYmxlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZW5hYmxlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0QmFkZ2VCYWNrZ3JvdW5kQ29sb3JcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRCYWRnZVRleHRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRQb3B1cFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFRpdGxlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwib3BlblBvcHVwXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0QmFkZ2VCYWNrZ3JvdW5kQ29sb3JcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRCYWRnZVRleHRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRJY29uXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0UG9wdXBcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRUaXRsZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImJyb3dzaW5nRGF0YVwiOiB7XG4gICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVDYWNoZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZUNvb2tpZXNcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVEb3dubG9hZHNcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVGb3JtRGF0YVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZUhpc3RvcnlcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVMb2NhbFN0b3JhZ2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVQYXNzd29yZHNcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVQbHVnaW5EYXRhXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0dGluZ3NcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJjb21tYW5kc1wiOiB7XG4gICAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJjb250ZXh0TWVudXNcIjoge1xuICAgICAgICAgIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlQWxsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidXBkYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiY29va2llc1wiOiB7XG4gICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRBbGxDb29raWVTdG9yZXNcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJkZXZ0b29sc1wiOiB7XG4gICAgICAgICAgXCJpbnNwZWN0ZWRXaW5kb3dcIjoge1xuICAgICAgICAgICAgXCJldmFsXCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyLFxuICAgICAgICAgICAgICBcInNpbmdsZUNhbGxiYWNrQXJnXCI6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhbmVsc1wiOiB7XG4gICAgICAgICAgICBcImNyZWF0ZVwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAzLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMyxcbiAgICAgICAgICAgICAgXCJzaW5nbGVDYWxsYmFja0FyZ1wiOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJlbGVtZW50c1wiOiB7XG4gICAgICAgICAgICAgIFwiY3JlYXRlU2lkZWJhclBhbmVcIjoge1xuICAgICAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiZG93bmxvYWRzXCI6IHtcbiAgICAgICAgICBcImNhbmNlbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImRvd25sb2FkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZXJhc2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRGaWxlSWNvblwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm9wZW5cIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwYXVzZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZUZpbGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXN1bWVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZWFyY2hcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzaG93XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiZXh0ZW5zaW9uXCI6IHtcbiAgICAgICAgICBcImlzQWxsb3dlZEZpbGVTY2hlbWVBY2Nlc3NcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJpc0FsbG93ZWRJbmNvZ25pdG9BY2Nlc3NcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJoaXN0b3J5XCI6IHtcbiAgICAgICAgICBcImFkZFVybFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImRlbGV0ZUFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImRlbGV0ZVJhbmdlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZGVsZXRlVXJsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0VmlzaXRzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VhcmNoXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiaTE4blwiOiB7XG4gICAgICAgICAgXCJkZXRlY3RMYW5ndWFnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEFjY2VwdExhbmd1YWdlc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImlkZW50aXR5XCI6IHtcbiAgICAgICAgICBcImxhdW5jaFdlYkF1dGhGbG93XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiaWRsZVwiOiB7XG4gICAgICAgICAgXCJxdWVyeVN0YXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwibWFuYWdlbWVudFwiOiB7XG4gICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRTZWxmXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0RW5hYmxlZFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInVuaW5zdGFsbFNlbGZcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJub3RpZmljYXRpb25zXCI6IHtcbiAgICAgICAgICBcImNsZWFyXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiY3JlYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0QWxsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0UGVybWlzc2lvbkxldmVsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidXBkYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwicGFnZUFjdGlvblwiOiB7XG4gICAgICAgICAgXCJnZXRQb3B1cFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFRpdGxlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaGlkZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldEljb25cIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRQb3B1cFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldFRpdGxlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2hvd1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInBlcm1pc3Npb25zXCI6IHtcbiAgICAgICAgICBcImNvbnRhaW5zXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0QWxsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVxdWVzdFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInJ1bnRpbWVcIjoge1xuICAgICAgICAgIFwiZ2V0QmFja2dyb3VuZFBhZ2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRQbGF0Zm9ybUluZm9cIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJvcGVuT3B0aW9uc1BhZ2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXF1ZXN0VXBkYXRlQ2hlY2tcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZW5kTWVzc2FnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAzXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlbmROYXRpdmVNZXNzYWdlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0VW5pbnN0YWxsVVJMXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwic2Vzc2lvbnNcIjoge1xuICAgICAgICAgIFwiZ2V0RGV2aWNlc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFJlY2VudGx5Q2xvc2VkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVzdG9yZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInN0b3JhZ2VcIjoge1xuICAgICAgICAgIFwibG9jYWxcIjoge1xuICAgICAgICAgICAgXCJjbGVhclwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJnZXRCeXRlc0luVXNlXCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInNldFwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJtYW5hZ2VkXCI6IHtcbiAgICAgICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJnZXRCeXRlc0luVXNlXCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInN5bmNcIjoge1xuICAgICAgICAgICAgXCJjbGVhclwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJnZXRCeXRlc0luVXNlXCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInNldFwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0YWJzXCI6IHtcbiAgICAgICAgICBcImNhcHR1cmVWaXNpYmxlVGFiXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiY3JlYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZGV0ZWN0TGFuZ3VhZ2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkaXNjYXJkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZHVwbGljYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZXhlY3V0ZVNjcmlwdFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEN1cnJlbnRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRab29tXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0Wm9vbVNldHRpbmdzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ29CYWNrXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ29Gb3J3YXJkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaGlnaGxpZ2h0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaW5zZXJ0Q1NTXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibW92ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInF1ZXJ5XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVsb2FkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlQ1NTXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VuZE1lc3NhZ2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogM1xuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRab29tXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0Wm9vbVNldHRpbmdzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidXBkYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidG9wU2l0ZXNcIjoge1xuICAgICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwid2ViTmF2aWdhdGlvblwiOiB7XG4gICAgICAgICAgXCJnZXRBbGxGcmFtZXNcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRGcmFtZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIndlYlJlcXVlc3RcIjoge1xuICAgICAgICAgIFwiaGFuZGxlckJlaGF2aW9yQ2hhbmdlZFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIndpbmRvd3NcIjoge1xuICAgICAgICAgIFwiY3JlYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0QWxsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0Q3VycmVudFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldExhc3RGb2N1c2VkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidXBkYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmIChPYmplY3Qua2V5cyhhcGlNZXRhZGF0YSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImFwaS1tZXRhZGF0YS5qc29uIGhhcyBub3QgYmVlbiBpbmNsdWRlZCBpbiBicm93c2VyLXBvbHlmaWxsXCIpO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBBIFdlYWtNYXAgc3ViY2xhc3Mgd2hpY2ggY3JlYXRlcyBhbmQgc3RvcmVzIGEgdmFsdWUgZm9yIGFueSBrZXkgd2hpY2ggZG9lc1xuICAgICAgICogbm90IGV4aXN0IHdoZW4gYWNjZXNzZWQsIGJ1dCBiZWhhdmVzIGV4YWN0bHkgYXMgYW4gb3JkaW5hcnkgV2Vha01hcFxuICAgICAgICogb3RoZXJ3aXNlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNyZWF0ZUl0ZW1cbiAgICAgICAqICAgICAgICBBIGZ1bmN0aW9uIHdoaWNoIHdpbGwgYmUgY2FsbGVkIGluIG9yZGVyIHRvIGNyZWF0ZSB0aGUgdmFsdWUgZm9yIGFueVxuICAgICAgICogICAgICAgIGtleSB3aGljaCBkb2VzIG5vdCBleGlzdCwgdGhlIGZpcnN0IHRpbWUgaXQgaXMgYWNjZXNzZWQuIFRoZVxuICAgICAgICogICAgICAgIGZ1bmN0aW9uIHJlY2VpdmVzLCBhcyBpdHMgb25seSBhcmd1bWVudCwgdGhlIGtleSBiZWluZyBjcmVhdGVkLlxuICAgICAgICovXG5cblxuICAgICAgY2xhc3MgRGVmYXVsdFdlYWtNYXAgZXh0ZW5kcyBXZWFrTWFwIHtcbiAgICAgICAgY29uc3RydWN0b3IoY3JlYXRlSXRlbSwgaXRlbXMgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzdXBlcihpdGVtcyk7XG4gICAgICAgICAgdGhpcy5jcmVhdGVJdGVtID0gY3JlYXRlSXRlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldChrZXkpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0KGtleSwgdGhpcy5jcmVhdGVJdGVtKGtleSkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzdXBlci5nZXQoa2V5KTtcbiAgICAgICAgfVxuXG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gb2JqZWN0IGlzIGFuIG9iamVjdCB3aXRoIGEgYHRoZW5gIG1ldGhvZCwgYW5kIGNhblxuICAgICAgICogdGhlcmVmb3JlIGJlIGFzc3VtZWQgdG8gYmVoYXZlIGFzIGEgUHJvbWlzZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB0ZXN0LlxuICAgICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHRoZW5hYmxlLlxuICAgICAgICovXG5cblxuICAgICAgY29uc3QgaXNUaGVuYWJsZSA9IHZhbHVlID0+IHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gXCJmdW5jdGlvblwiO1xuICAgICAgfTtcbiAgICAgIC8qKlxuICAgICAgICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoLCB3aGVuIGNhbGxlZCwgd2lsbCByZXNvbHZlIG9yIHJlamVjdFxuICAgICAgICogdGhlIGdpdmVuIHByb21pc2UgYmFzZWQgb24gaG93IGl0IGlzIGNhbGxlZDpcbiAgICAgICAqXG4gICAgICAgKiAtIElmLCB3aGVuIGNhbGxlZCwgYGNocm9tZS5ydW50aW1lLmxhc3RFcnJvcmAgY29udGFpbnMgYSBub24tbnVsbCBvYmplY3QsXG4gICAgICAgKiAgIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkIHdpdGggdGhhdCB2YWx1ZS5cbiAgICAgICAqIC0gSWYgdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIGV4YWN0bHkgb25lIGFyZ3VtZW50LCB0aGUgcHJvbWlzZSBpc1xuICAgICAgICogICByZXNvbHZlZCB0byB0aGF0IHZhbHVlLlxuICAgICAgICogLSBPdGhlcndpc2UsIHRoZSBwcm9taXNlIGlzIHJlc29sdmVkIHRvIGFuIGFycmF5IGNvbnRhaW5pbmcgYWxsIG9mIHRoZVxuICAgICAgICogICBmdW5jdGlvbidzIGFyZ3VtZW50cy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gcHJvbWlzZVxuICAgICAgICogICAgICAgIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSByZXNvbHV0aW9uIGFuZCByZWplY3Rpb24gZnVuY3Rpb25zIG9mIGFcbiAgICAgICAqICAgICAgICBwcm9taXNlLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gcHJvbWlzZS5yZXNvbHZlXG4gICAgICAgKiAgICAgICAgVGhlIHByb21pc2UncyByZXNvbHV0aW9uIGZ1bmN0aW9uLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gcHJvbWlzZS5yZWplY3Rpb25cbiAgICAgICAqICAgICAgICBUaGUgcHJvbWlzZSdzIHJlamVjdGlvbiBmdW5jdGlvbi5cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBtZXRhZGF0YVxuICAgICAgICogICAgICAgIE1ldGFkYXRhIGFib3V0IHRoZSB3cmFwcGVkIG1ldGhvZCB3aGljaCBoYXMgY3JlYXRlZCB0aGUgY2FsbGJhY2suXG4gICAgICAgKiBAcGFyYW0ge2ludGVnZXJ9IG1ldGFkYXRhLm1heFJlc29sdmVkQXJnc1xuICAgICAgICogICAgICAgIFRoZSBtYXhpbXVtIG51bWJlciBvZiBhcmd1bWVudHMgd2hpY2ggbWF5IGJlIHBhc3NlZCB0byB0aGVcbiAgICAgICAqICAgICAgICBjYWxsYmFjayBjcmVhdGVkIGJ5IHRoZSB3cmFwcGVkIGFzeW5jIGZ1bmN0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAgICAgICAqICAgICAgICBUaGUgZ2VuZXJhdGVkIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAgICovXG5cblxuICAgICAgY29uc3QgbWFrZUNhbGxiYWNrID0gKHByb21pc2UsIG1ldGFkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiAoLi4uY2FsbGJhY2tBcmdzKSA9PiB7XG4gICAgICAgICAgaWYgKGV4dGVuc2lvbkFQSXMucnVudGltZS5sYXN0RXJyb3IpIHtcbiAgICAgICAgICAgIHByb21pc2UucmVqZWN0KGV4dGVuc2lvbkFQSXMucnVudGltZS5sYXN0RXJyb3IpO1xuICAgICAgICAgIH0gZWxzZSBpZiAobWV0YWRhdGEuc2luZ2xlQ2FsbGJhY2tBcmcgfHwgY2FsbGJhY2tBcmdzLmxlbmd0aCA8PSAxICYmIG1ldGFkYXRhLnNpbmdsZUNhbGxiYWNrQXJnICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKGNhbGxiYWNrQXJnc1swXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb21pc2UucmVzb2x2ZShjYWxsYmFja0FyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHBsdXJhbGl6ZUFyZ3VtZW50cyA9IG51bUFyZ3MgPT4gbnVtQXJncyA9PSAxID8gXCJhcmd1bWVudFwiIDogXCJhcmd1bWVudHNcIjtcbiAgICAgIC8qKlxuICAgICAgICogQ3JlYXRlcyBhIHdyYXBwZXIgZnVuY3Rpb24gZm9yIGEgbWV0aG9kIHdpdGggdGhlIGdpdmVuIG5hbWUgYW5kIG1ldGFkYXRhLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAgICAgKiAgICAgICAgVGhlIG5hbWUgb2YgdGhlIG1ldGhvZCB3aGljaCBpcyBiZWluZyB3cmFwcGVkLlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IG1ldGFkYXRhXG4gICAgICAgKiAgICAgICAgTWV0YWRhdGEgYWJvdXQgdGhlIG1ldGhvZCBiZWluZyB3cmFwcGVkLlxuICAgICAgICogQHBhcmFtIHtpbnRlZ2VyfSBtZXRhZGF0YS5taW5BcmdzXG4gICAgICAgKiAgICAgICAgVGhlIG1pbmltdW0gbnVtYmVyIG9mIGFyZ3VtZW50cyB3aGljaCBtdXN0IGJlIHBhc3NlZCB0byB0aGVcbiAgICAgICAqICAgICAgICBmdW5jdGlvbi4gSWYgY2FsbGVkIHdpdGggZmV3ZXIgdGhhbiB0aGlzIG51bWJlciBvZiBhcmd1bWVudHMsIHRoZVxuICAgICAgICogICAgICAgIHdyYXBwZXIgd2lsbCByYWlzZSBhbiBleGNlcHRpb24uXG4gICAgICAgKiBAcGFyYW0ge2ludGVnZXJ9IG1ldGFkYXRhLm1heEFyZ3NcbiAgICAgICAqICAgICAgICBUaGUgbWF4aW11bSBudW1iZXIgb2YgYXJndW1lbnRzIHdoaWNoIG1heSBiZSBwYXNzZWQgdG8gdGhlXG4gICAgICAgKiAgICAgICAgZnVuY3Rpb24uIElmIGNhbGxlZCB3aXRoIG1vcmUgdGhhbiB0aGlzIG51bWJlciBvZiBhcmd1bWVudHMsIHRoZVxuICAgICAgICogICAgICAgIHdyYXBwZXIgd2lsbCByYWlzZSBhbiBleGNlcHRpb24uXG4gICAgICAgKiBAcGFyYW0ge2ludGVnZXJ9IG1ldGFkYXRhLm1heFJlc29sdmVkQXJnc1xuICAgICAgICogICAgICAgIFRoZSBtYXhpbXVtIG51bWJlciBvZiBhcmd1bWVudHMgd2hpY2ggbWF5IGJlIHBhc3NlZCB0byB0aGVcbiAgICAgICAqICAgICAgICBjYWxsYmFjayBjcmVhdGVkIGJ5IHRoZSB3cmFwcGVkIGFzeW5jIGZ1bmN0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihvYmplY3QsIC4uLiopfVxuICAgICAgICogICAgICAgVGhlIGdlbmVyYXRlZCB3cmFwcGVyIGZ1bmN0aW9uLlxuICAgICAgICovXG5cblxuICAgICAgY29uc3Qgd3JhcEFzeW5jRnVuY3Rpb24gPSAobmFtZSwgbWV0YWRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGFzeW5jRnVuY3Rpb25XcmFwcGVyKHRhcmdldCwgLi4uYXJncykge1xuICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA8IG1ldGFkYXRhLm1pbkFyZ3MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgYXQgbGVhc3QgJHttZXRhZGF0YS5taW5BcmdzfSAke3BsdXJhbGl6ZUFyZ3VtZW50cyhtZXRhZGF0YS5taW5BcmdzKX0gZm9yICR7bmFtZX0oKSwgZ290ICR7YXJncy5sZW5ndGh9YCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gbWV0YWRhdGEubWF4QXJncykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBhdCBtb3N0ICR7bWV0YWRhdGEubWF4QXJnc30gJHtwbHVyYWxpemVBcmd1bWVudHMobWV0YWRhdGEubWF4QXJncyl9IGZvciAke25hbWV9KCksIGdvdCAke2FyZ3MubGVuZ3RofWApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBpZiAobWV0YWRhdGEuZmFsbGJhY2tUb05vQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgLy8gVGhpcyBBUEkgbWV0aG9kIGhhcyBjdXJyZW50bHkgbm8gY2FsbGJhY2sgb24gQ2hyb21lLCBidXQgaXQgcmV0dXJuIGEgcHJvbWlzZSBvbiBGaXJlZm94LFxuICAgICAgICAgICAgICAvLyBhbmQgc28gdGhlIHBvbHlmaWxsIHdpbGwgdHJ5IHRvIGNhbGwgaXQgd2l0aCBhIGNhbGxiYWNrIGZpcnN0LCBhbmQgaXQgd2lsbCBmYWxsYmFja1xuICAgICAgICAgICAgICAvLyB0byBub3QgcGFzc2luZyB0aGUgY2FsbGJhY2sgaWYgdGhlIGZpcnN0IGNhbGwgZmFpbHMuXG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdKC4uLmFyZ3MsIG1ha2VDYWxsYmFjayh7XG4gICAgICAgICAgICAgICAgICByZXNvbHZlLFxuICAgICAgICAgICAgICAgICAgcmVqZWN0XG4gICAgICAgICAgICAgICAgfSwgbWV0YWRhdGEpKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoY2JFcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgJHtuYW1lfSBBUEkgbWV0aG9kIGRvZXNuJ3Qgc2VlbSB0byBzdXBwb3J0IHRoZSBjYWxsYmFjayBwYXJhbWV0ZXIsIGAgKyBcImZhbGxpbmcgYmFjayB0byBjYWxsIGl0IHdpdGhvdXQgYSBjYWxsYmFjazogXCIsIGNiRXJyb3IpO1xuICAgICAgICAgICAgICAgIHRhcmdldFtuYW1lXSguLi5hcmdzKTsgLy8gVXBkYXRlIHRoZSBBUEkgbWV0aG9kIG1ldGFkYXRhLCBzbyB0aGF0IHRoZSBuZXh0IEFQSSBjYWxscyB3aWxsIG5vdCB0cnkgdG9cbiAgICAgICAgICAgICAgICAvLyB1c2UgdGhlIHVuc3VwcG9ydGVkIGNhbGxiYWNrIGFueW1vcmUuXG5cbiAgICAgICAgICAgICAgICBtZXRhZGF0YS5mYWxsYmFja1RvTm9DYWxsYmFjayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIG1ldGFkYXRhLm5vQ2FsbGJhY2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXRhZGF0YS5ub0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgIHRhcmdldFtuYW1lXSguLi5hcmdzKTtcbiAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdKC4uLmFyZ3MsIG1ha2VDYWxsYmFjayh7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSxcbiAgICAgICAgICAgICAgICByZWplY3RcbiAgICAgICAgICAgICAgfSwgbWV0YWRhdGEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgICAvKipcbiAgICAgICAqIFdyYXBzIGFuIGV4aXN0aW5nIG1ldGhvZCBvZiB0aGUgdGFyZ2V0IG9iamVjdCwgc28gdGhhdCBjYWxscyB0byBpdCBhcmVcbiAgICAgICAqIGludGVyY2VwdGVkIGJ5IHRoZSBnaXZlbiB3cmFwcGVyIGZ1bmN0aW9uLiBUaGUgd3JhcHBlciBmdW5jdGlvbiByZWNlaXZlcyxcbiAgICAgICAqIGFzIGl0cyBmaXJzdCBhcmd1bWVudCwgdGhlIG9yaWdpbmFsIGB0YXJnZXRgIG9iamVjdCwgZm9sbG93ZWQgYnkgZWFjaCBvZlxuICAgICAgICogdGhlIGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlIG9yaWdpbmFsIG1ldGhvZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFyZ2V0XG4gICAgICAgKiAgICAgICAgVGhlIG9yaWdpbmFsIHRhcmdldCBvYmplY3QgdGhhdCB0aGUgd3JhcHBlZCBtZXRob2QgYmVsb25ncyB0by5cbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IG1ldGhvZFxuICAgICAgICogICAgICAgIFRoZSBtZXRob2QgYmVpbmcgd3JhcHBlZC4gVGhpcyBpcyB1c2VkIGFzIHRoZSB0YXJnZXQgb2YgdGhlIFByb3h5XG4gICAgICAgKiAgICAgICAgb2JqZWN0IHdoaWNoIGlzIGNyZWF0ZWQgdG8gd3JhcCB0aGUgbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gd3JhcHBlclxuICAgICAgICogICAgICAgIFRoZSB3cmFwcGVyIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBpbiBwbGFjZSBvZiBhIGRpcmVjdCBpbnZvY2F0aW9uXG4gICAgICAgKiAgICAgICAgb2YgdGhlIHdyYXBwZWQgbWV0aG9kLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtQcm94eTxmdW5jdGlvbj59XG4gICAgICAgKiAgICAgICAgQSBQcm94eSBvYmplY3QgZm9yIHRoZSBnaXZlbiBtZXRob2QsIHdoaWNoIGludm9rZXMgdGhlIGdpdmVuIHdyYXBwZXJcbiAgICAgICAqICAgICAgICBtZXRob2QgaW4gaXRzIHBsYWNlLlxuICAgICAgICovXG5cblxuICAgICAgY29uc3Qgd3JhcE1ldGhvZCA9ICh0YXJnZXQsIG1ldGhvZCwgd3JhcHBlcikgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb3h5KG1ldGhvZCwge1xuICAgICAgICAgIGFwcGx5KHRhcmdldE1ldGhvZCwgdGhpc09iaiwgYXJncykge1xuICAgICAgICAgICAgcmV0dXJuIHdyYXBwZXIuY2FsbCh0aGlzT2JqLCB0YXJnZXQsIC4uLmFyZ3MpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIGxldCBoYXNPd25Qcm9wZXJ0eSA9IEZ1bmN0aW9uLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcbiAgICAgIC8qKlxuICAgICAgICogV3JhcHMgYW4gb2JqZWN0IGluIGEgUHJveHkgd2hpY2ggaW50ZXJjZXB0cyBhbmQgd3JhcHMgY2VydGFpbiBtZXRob2RzXG4gICAgICAgKiBiYXNlZCBvbiB0aGUgZ2l2ZW4gYHdyYXBwZXJzYCBhbmQgYG1ldGFkYXRhYCBvYmplY3RzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YXJnZXRcbiAgICAgICAqICAgICAgICBUaGUgdGFyZ2V0IG9iamVjdCB0byB3cmFwLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbd3JhcHBlcnMgPSB7fV1cbiAgICAgICAqICAgICAgICBBbiBvYmplY3QgdHJlZSBjb250YWluaW5nIHdyYXBwZXIgZnVuY3Rpb25zIGZvciBzcGVjaWFsIGNhc2VzLiBBbnlcbiAgICAgICAqICAgICAgICBmdW5jdGlvbiBwcmVzZW50IGluIHRoaXMgb2JqZWN0IHRyZWUgaXMgY2FsbGVkIGluIHBsYWNlIG9mIHRoZVxuICAgICAgICogICAgICAgIG1ldGhvZCBpbiB0aGUgc2FtZSBsb2NhdGlvbiBpbiB0aGUgYHRhcmdldGAgb2JqZWN0IHRyZWUuIFRoZXNlXG4gICAgICAgKiAgICAgICAgd3JhcHBlciBtZXRob2RzIGFyZSBpbnZva2VkIGFzIGRlc2NyaWJlZCBpbiB7QHNlZSB3cmFwTWV0aG9kfS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gW21ldGFkYXRhID0ge31dXG4gICAgICAgKiAgICAgICAgQW4gb2JqZWN0IHRyZWUgY29udGFpbmluZyBtZXRhZGF0YSB1c2VkIHRvIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVcbiAgICAgICAqICAgICAgICBQcm9taXNlLWJhc2VkIHdyYXBwZXIgZnVuY3Rpb25zIGZvciBhc3luY2hyb25vdXMuIEFueSBmdW5jdGlvbiBpblxuICAgICAgICogICAgICAgIHRoZSBgdGFyZ2V0YCBvYmplY3QgdHJlZSB3aGljaCBoYXMgYSBjb3JyZXNwb25kaW5nIG1ldGFkYXRhIG9iamVjdFxuICAgICAgICogICAgICAgIGluIHRoZSBzYW1lIGxvY2F0aW9uIGluIHRoZSBgbWV0YWRhdGFgIHRyZWUgaXMgcmVwbGFjZWQgd2l0aCBhblxuICAgICAgICogICAgICAgIGF1dG9tYXRpY2FsbHktZ2VuZXJhdGVkIHdyYXBwZXIgZnVuY3Rpb24sIGFzIGRlc2NyaWJlZCBpblxuICAgICAgICogICAgICAgIHtAc2VlIHdyYXBBc3luY0Z1bmN0aW9ufVxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtQcm94eTxvYmplY3Q+fVxuICAgICAgICovXG5cbiAgICAgIGNvbnN0IHdyYXBPYmplY3QgPSAodGFyZ2V0LCB3cmFwcGVycyA9IHt9LCBtZXRhZGF0YSA9IHt9KSA9PiB7XG4gICAgICAgIGxldCBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGxldCBoYW5kbGVycyA9IHtcbiAgICAgICAgICBoYXMocHJveHlUYXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9wIGluIHRhcmdldCB8fCBwcm9wIGluIGNhY2hlO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBnZXQocHJveHlUYXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgICAgICAgICBpZiAocHJvcCBpbiBjYWNoZSkge1xuICAgICAgICAgICAgICByZXR1cm4gY2FjaGVbcHJvcF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghKHByb3AgaW4gdGFyZ2V0KSkge1xuICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSB0YXJnZXRbcHJvcF07XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgbWV0aG9kIG9uIHRoZSB1bmRlcmx5aW5nIG9iamVjdC4gQ2hlY2sgaWYgd2UgbmVlZCB0byBkb1xuICAgICAgICAgICAgICAvLyBhbnkgd3JhcHBpbmcuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2Ygd3JhcHBlcnNbcHJvcF0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgYSBzcGVjaWFsLWNhc2Ugd3JhcHBlciBmb3IgdGhpcyBtZXRob2QuXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB3cmFwTWV0aG9kKHRhcmdldCwgdGFyZ2V0W3Byb3BdLCB3cmFwcGVyc1twcm9wXSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFzT3duUHJvcGVydHkobWV0YWRhdGEsIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhbiBhc3luYyBtZXRob2QgdGhhdCB3ZSBoYXZlIG1ldGFkYXRhIGZvci4gQ3JlYXRlIGFcbiAgICAgICAgICAgICAgICAvLyBQcm9taXNlIHdyYXBwZXIgZm9yIGl0LlxuICAgICAgICAgICAgICAgIGxldCB3cmFwcGVyID0gd3JhcEFzeW5jRnVuY3Rpb24ocHJvcCwgbWV0YWRhdGFbcHJvcF0pO1xuICAgICAgICAgICAgICAgIHZhbHVlID0gd3JhcE1ldGhvZCh0YXJnZXQsIHRhcmdldFtwcm9wXSwgd3JhcHBlcik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIG1ldGhvZCB0aGF0IHdlIGRvbid0IGtub3cgb3IgY2FyZSBhYm91dC4gUmV0dXJuIHRoZVxuICAgICAgICAgICAgICAgIC8vIG9yaWdpbmFsIG1ldGhvZCwgYm91bmQgdG8gdGhlIHVuZGVybHlpbmcgb2JqZWN0LlxuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuYmluZCh0YXJnZXQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZSAhPT0gbnVsbCAmJiAoaGFzT3duUHJvcGVydHkod3JhcHBlcnMsIHByb3ApIHx8IGhhc093blByb3BlcnR5KG1ldGFkYXRhLCBwcm9wKSkpIHtcbiAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhbiBvYmplY3QgdGhhdCB3ZSBuZWVkIHRvIGRvIHNvbWUgd3JhcHBpbmcgZm9yIHRoZSBjaGlsZHJlblxuICAgICAgICAgICAgICAvLyBvZi4gQ3JlYXRlIGEgc3ViLW9iamVjdCB3cmFwcGVyIGZvciBpdCB3aXRoIHRoZSBhcHByb3ByaWF0ZSBjaGlsZFxuICAgICAgICAgICAgICAvLyBtZXRhZGF0YS5cbiAgICAgICAgICAgICAgdmFsdWUgPSB3cmFwT2JqZWN0KHZhbHVlLCB3cmFwcGVyc1twcm9wXSwgbWV0YWRhdGFbcHJvcF0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChoYXNPd25Qcm9wZXJ0eShtZXRhZGF0YSwgXCIqXCIpKSB7XG4gICAgICAgICAgICAgIC8vIFdyYXAgYWxsIHByb3BlcnRpZXMgaW4gKiBuYW1lc3BhY2UuXG4gICAgICAgICAgICAgIHZhbHVlID0gd3JhcE9iamVjdCh2YWx1ZSwgd3JhcHBlcnNbcHJvcF0sIG1ldGFkYXRhW1wiKlwiXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBXZSBkb24ndCBuZWVkIHRvIGRvIGFueSB3cmFwcGluZyBmb3IgdGhpcyBwcm9wZXJ0eSxcbiAgICAgICAgICAgICAgLy8gc28ganVzdCBmb3J3YXJkIGFsbCBhY2Nlc3MgdG8gdGhlIHVuZGVybHlpbmcgb2JqZWN0LlxuICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2FjaGUsIHByb3AsIHtcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRbcHJvcF07XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhY2hlW3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIHNldChwcm94eVRhcmdldCwgcHJvcCwgdmFsdWUsIHJlY2VpdmVyKSB7XG4gICAgICAgICAgICBpZiAocHJvcCBpbiBjYWNoZSkge1xuICAgICAgICAgICAgICBjYWNoZVtwcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eShwcm94eVRhcmdldCwgcHJvcCwgZGVzYykge1xuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoY2FjaGUsIHByb3AsIGRlc2MpO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBkZWxldGVQcm9wZXJ0eShwcm94eVRhcmdldCwgcHJvcCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZGVsZXRlUHJvcGVydHkoY2FjaGUsIHByb3ApO1xuICAgICAgICAgIH1cblxuICAgICAgICB9OyAvLyBQZXIgY29udHJhY3Qgb2YgdGhlIFByb3h5IEFQSSwgdGhlIFwiZ2V0XCIgcHJveHkgaGFuZGxlciBtdXN0IHJldHVybiB0aGVcbiAgICAgICAgLy8gb3JpZ2luYWwgdmFsdWUgb2YgdGhlIHRhcmdldCBpZiB0aGF0IHZhbHVlIGlzIGRlY2xhcmVkIHJlYWQtb25seSBhbmRcbiAgICAgICAgLy8gbm9uLWNvbmZpZ3VyYWJsZS4gRm9yIHRoaXMgcmVhc29uLCB3ZSBjcmVhdGUgYW4gb2JqZWN0IHdpdGggdGhlXG4gICAgICAgIC8vIHByb3RvdHlwZSBzZXQgdG8gYHRhcmdldGAgaW5zdGVhZCBvZiB1c2luZyBgdGFyZ2V0YCBkaXJlY3RseS5cbiAgICAgICAgLy8gT3RoZXJ3aXNlIHdlIGNhbm5vdCByZXR1cm4gYSBjdXN0b20gb2JqZWN0IGZvciBBUElzIHRoYXRcbiAgICAgICAgLy8gYXJlIGRlY2xhcmVkIHJlYWQtb25seSBhbmQgbm9uLWNvbmZpZ3VyYWJsZSwgc3VjaCBhcyBgY2hyb21lLmRldnRvb2xzYC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhlIHByb3h5IGhhbmRsZXJzIHRoZW1zZWx2ZXMgd2lsbCBzdGlsbCB1c2UgdGhlIG9yaWdpbmFsIGB0YXJnZXRgXG4gICAgICAgIC8vIGluc3RlYWQgb2YgdGhlIGBwcm94eVRhcmdldGAsIHNvIHRoYXQgdGhlIG1ldGhvZHMgYW5kIHByb3BlcnRpZXMgYXJlXG4gICAgICAgIC8vIGRlcmVmZXJlbmNlZCB2aWEgdGhlIG9yaWdpbmFsIHRhcmdldHMuXG5cbiAgICAgICAgbGV0IHByb3h5VGFyZ2V0ID0gT2JqZWN0LmNyZWF0ZSh0YXJnZXQpO1xuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHByb3h5VGFyZ2V0LCBoYW5kbGVycyk7XG4gICAgICB9O1xuICAgICAgLyoqXG4gICAgICAgKiBDcmVhdGVzIGEgc2V0IG9mIHdyYXBwZXIgZnVuY3Rpb25zIGZvciBhbiBldmVudCBvYmplY3QsIHdoaWNoIGhhbmRsZXNcbiAgICAgICAqIHdyYXBwaW5nIG9mIGxpc3RlbmVyIGZ1bmN0aW9ucyB0aGF0IHRob3NlIG1lc3NhZ2VzIGFyZSBwYXNzZWQuXG4gICAgICAgKlxuICAgICAgICogQSBzaW5nbGUgd3JhcHBlciBpcyBjcmVhdGVkIGZvciBlYWNoIGxpc3RlbmVyIGZ1bmN0aW9uLCBhbmQgc3RvcmVkIGluIGFcbiAgICAgICAqIG1hcC4gU3Vic2VxdWVudCBjYWxscyB0byBgYWRkTGlzdGVuZXJgLCBgaGFzTGlzdGVuZXJgLCBvciBgcmVtb3ZlTGlzdGVuZXJgXG4gICAgICAgKiByZXRyaWV2ZSB0aGUgb3JpZ2luYWwgd3JhcHBlciwgc28gdGhhdCAgYXR0ZW1wdHMgdG8gcmVtb3ZlIGFcbiAgICAgICAqIHByZXZpb3VzbHktYWRkZWQgbGlzdGVuZXIgd29yayBhcyBleHBlY3RlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RlZmF1bHRXZWFrTWFwPGZ1bmN0aW9uLCBmdW5jdGlvbj59IHdyYXBwZXJNYXBcbiAgICAgICAqICAgICAgICBBIERlZmF1bHRXZWFrTWFwIG9iamVjdCB3aGljaCB3aWxsIGNyZWF0ZSB0aGUgYXBwcm9wcmlhdGUgd3JhcHBlclxuICAgICAgICogICAgICAgIGZvciBhIGdpdmVuIGxpc3RlbmVyIGZ1bmN0aW9uIHdoZW4gb25lIGRvZXMgbm90IGV4aXN0LCBhbmQgcmV0cmlldmVcbiAgICAgICAqICAgICAgICBhbiBleGlzdGluZyBvbmUgd2hlbiBpdCBkb2VzLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAgICAgKi9cblxuXG4gICAgICBjb25zdCB3cmFwRXZlbnQgPSB3cmFwcGVyTWFwID0+ICh7XG4gICAgICAgIGFkZExpc3RlbmVyKHRhcmdldCwgbGlzdGVuZXIsIC4uLmFyZ3MpIHtcbiAgICAgICAgICB0YXJnZXQuYWRkTGlzdGVuZXIod3JhcHBlck1hcC5nZXQobGlzdGVuZXIpLCAuLi5hcmdzKTtcbiAgICAgICAgfSxcblxuICAgICAgICBoYXNMaXN0ZW5lcih0YXJnZXQsIGxpc3RlbmVyKSB7XG4gICAgICAgICAgcmV0dXJuIHRhcmdldC5oYXNMaXN0ZW5lcih3cmFwcGVyTWFwLmdldChsaXN0ZW5lcikpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZUxpc3RlbmVyKHRhcmdldCwgbGlzdGVuZXIpIHtcbiAgICAgICAgICB0YXJnZXQucmVtb3ZlTGlzdGVuZXIod3JhcHBlck1hcC5nZXQobGlzdGVuZXIpKTtcbiAgICAgICAgfVxuXG4gICAgICB9KTsgLy8gS2VlcCB0cmFjayBpZiB0aGUgZGVwcmVjYXRpb24gd2FybmluZyBoYXMgYmVlbiBsb2dnZWQgYXQgbGVhc3Qgb25jZS5cblxuXG4gICAgICBsZXQgbG9nZ2VkU2VuZFJlc3BvbnNlRGVwcmVjYXRpb25XYXJuaW5nID0gZmFsc2U7XG4gICAgICBjb25zdCBvbk1lc3NhZ2VXcmFwcGVycyA9IG5ldyBEZWZhdWx0V2Vha01hcChsaXN0ZW5lciA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHJldHVybiBsaXN0ZW5lcjtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogV3JhcHMgYSBtZXNzYWdlIGxpc3RlbmVyIGZ1bmN0aW9uIHNvIHRoYXQgaXQgbWF5IHNlbmQgcmVzcG9uc2VzIGJhc2VkIG9uXG4gICAgICAgICAqIGl0cyByZXR1cm4gdmFsdWUsIHJhdGhlciB0aGFuIGJ5IHJldHVybmluZyBhIHNlbnRpbmVsIHZhbHVlIGFuZCBjYWxsaW5nIGFcbiAgICAgICAgICogY2FsbGJhY2suIElmIHRoZSBsaXN0ZW5lciBmdW5jdGlvbiByZXR1cm5zIGEgUHJvbWlzZSwgdGhlIHJlc3BvbnNlIGlzXG4gICAgICAgICAqIHNlbnQgd2hlbiB0aGUgcHJvbWlzZSBlaXRoZXIgcmVzb2x2ZXMgb3IgcmVqZWN0cy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHsqfSBtZXNzYWdlXG4gICAgICAgICAqICAgICAgICBUaGUgbWVzc2FnZSBzZW50IGJ5IHRoZSBvdGhlciBlbmQgb2YgdGhlIGNoYW5uZWwuXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBzZW5kZXJcbiAgICAgICAgICogICAgICAgIERldGFpbHMgYWJvdXQgdGhlIHNlbmRlciBvZiB0aGUgbWVzc2FnZS5cbiAgICAgICAgICogQHBhcmFtIHtmdW5jdGlvbigqKX0gc2VuZFJlc3BvbnNlXG4gICAgICAgICAqICAgICAgICBBIGNhbGxiYWNrIHdoaWNoLCB3aGVuIGNhbGxlZCB3aXRoIGFuIGFyYml0cmFyeSBhcmd1bWVudCwgc2VuZHNcbiAgICAgICAgICogICAgICAgIHRoYXQgdmFsdWUgYXMgYSByZXNwb25zZS5cbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICAgICAqICAgICAgICBUcnVlIGlmIHRoZSB3cmFwcGVkIGxpc3RlbmVyIHJldHVybmVkIGEgUHJvbWlzZSwgd2hpY2ggd2lsbCBsYXRlclxuICAgICAgICAgKiAgICAgICAgeWllbGQgYSByZXNwb25zZS4gRmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAgICAgKi9cblxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBvbk1lc3NhZ2UobWVzc2FnZSwgc2VuZGVyLCBzZW5kUmVzcG9uc2UpIHtcbiAgICAgICAgICBsZXQgZGlkQ2FsbFNlbmRSZXNwb25zZSA9IGZhbHNlO1xuICAgICAgICAgIGxldCB3cmFwcGVkU2VuZFJlc3BvbnNlO1xuICAgICAgICAgIGxldCBzZW5kUmVzcG9uc2VQcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICB3cmFwcGVkU2VuZFJlc3BvbnNlID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgIGlmICghbG9nZ2VkU2VuZFJlc3BvbnNlRGVwcmVjYXRpb25XYXJuaW5nKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFNFTkRfUkVTUE9OU0VfREVQUkVDQVRJT05fV0FSTklORywgbmV3IEVycm9yKCkuc3RhY2spO1xuICAgICAgICAgICAgICAgIGxvZ2dlZFNlbmRSZXNwb25zZURlcHJlY2F0aW9uV2FybmluZyA9IHRydWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBkaWRDYWxsU2VuZFJlc3BvbnNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGxldCByZXN1bHQ7XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gbGlzdGVuZXIobWVzc2FnZSwgc2VuZGVyLCB3cmFwcGVkU2VuZFJlc3BvbnNlKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgaXNSZXN1bHRUaGVuYWJsZSA9IHJlc3VsdCAhPT0gdHJ1ZSAmJiBpc1RoZW5hYmxlKHJlc3VsdCk7IC8vIElmIHRoZSBsaXN0ZW5lciBkaWRuJ3QgcmV0dXJuZWQgdHJ1ZSBvciBhIFByb21pc2UsIG9yIGNhbGxlZFxuICAgICAgICAgIC8vIHdyYXBwZWRTZW5kUmVzcG9uc2Ugc3luY2hyb25vdXNseSwgd2UgY2FuIGV4aXQgZWFybGllclxuICAgICAgICAgIC8vIGJlY2F1c2UgdGhlcmUgd2lsbCBiZSBubyByZXNwb25zZSBzZW50IGZyb20gdGhpcyBsaXN0ZW5lci5cblxuICAgICAgICAgIGlmIChyZXN1bHQgIT09IHRydWUgJiYgIWlzUmVzdWx0VGhlbmFibGUgJiYgIWRpZENhbGxTZW5kUmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9IC8vIEEgc21hbGwgaGVscGVyIHRvIHNlbmQgdGhlIG1lc3NhZ2UgaWYgdGhlIHByb21pc2UgcmVzb2x2ZXNcbiAgICAgICAgICAvLyBhbmQgYW4gZXJyb3IgaWYgdGhlIHByb21pc2UgcmVqZWN0cyAoYSB3cmFwcGVkIHNlbmRNZXNzYWdlIGhhc1xuICAgICAgICAgIC8vIHRvIHRyYW5zbGF0ZSB0aGUgbWVzc2FnZSBpbnRvIGEgcmVzb2x2ZWQgcHJvbWlzZSBvciBhIHJlamVjdGVkXG4gICAgICAgICAgLy8gcHJvbWlzZSkuXG5cblxuICAgICAgICAgIGNvbnN0IHNlbmRQcm9taXNlZFJlc3VsdCA9IHByb21pc2UgPT4ge1xuICAgICAgICAgICAgcHJvbWlzZS50aGVuKG1zZyA9PiB7XG4gICAgICAgICAgICAgIC8vIHNlbmQgdGhlIG1lc3NhZ2UgdmFsdWUuXG4gICAgICAgICAgICAgIHNlbmRSZXNwb25zZShtc2cpO1xuICAgICAgICAgICAgfSwgZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAvLyBTZW5kIGEgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgZXJyb3IgaWYgdGhlIHJlamVjdGVkIHZhbHVlXG4gICAgICAgICAgICAgIC8vIGlzIGFuIGluc3RhbmNlIG9mIGVycm9yLCBvciB0aGUgb2JqZWN0IGl0c2VsZiBvdGhlcndpc2UuXG4gICAgICAgICAgICAgIGxldCBtZXNzYWdlO1xuXG4gICAgICAgICAgICAgIGlmIChlcnJvciAmJiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciB8fCB0eXBlb2YgZXJyb3IubWVzc2FnZSA9PT0gXCJzdHJpbmdcIikpIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gZXJyb3IubWVzc2FnZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkXCI7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBzZW5kUmVzcG9uc2Uoe1xuICAgICAgICAgICAgICAgIF9fbW96V2ViRXh0ZW5zaW9uUG9seWZpbGxSZWplY3RfXzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgLy8gUHJpbnQgYW4gZXJyb3Igb24gdGhlIGNvbnNvbGUgaWYgdW5hYmxlIHRvIHNlbmQgdGhlIHJlc3BvbnNlLlxuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIHNlbmQgb25NZXNzYWdlIHJlamVjdGVkIHJlcGx5XCIsIGVycik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9OyAvLyBJZiB0aGUgbGlzdGVuZXIgcmV0dXJuZWQgYSBQcm9taXNlLCBzZW5kIHRoZSByZXNvbHZlZCB2YWx1ZSBhcyBhXG4gICAgICAgICAgLy8gcmVzdWx0LCBvdGhlcndpc2Ugd2FpdCB0aGUgcHJvbWlzZSByZWxhdGVkIHRvIHRoZSB3cmFwcGVkU2VuZFJlc3BvbnNlXG4gICAgICAgICAgLy8gY2FsbGJhY2sgdG8gcmVzb2x2ZSBhbmQgc2VuZCBpdCBhcyBhIHJlc3BvbnNlLlxuXG5cbiAgICAgICAgICBpZiAoaXNSZXN1bHRUaGVuYWJsZSkge1xuICAgICAgICAgICAgc2VuZFByb21pc2VkUmVzdWx0KHJlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbmRQcm9taXNlZFJlc3VsdChzZW5kUmVzcG9uc2VQcm9taXNlKTtcbiAgICAgICAgICB9IC8vIExldCBDaHJvbWUga25vdyB0aGF0IHRoZSBsaXN0ZW5lciBpcyByZXBseWluZy5cblxuXG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG4gICAgICB9KTtcblxuICAgICAgY29uc3Qgd3JhcHBlZFNlbmRNZXNzYWdlQ2FsbGJhY2sgPSAoe1xuICAgICAgICByZWplY3QsXG4gICAgICAgIHJlc29sdmVcbiAgICAgIH0sIHJlcGx5KSA9PiB7XG4gICAgICAgIGlmIChleHRlbnNpb25BUElzLnJ1bnRpbWUubGFzdEVycm9yKSB7XG4gICAgICAgICAgLy8gRGV0ZWN0IHdoZW4gbm9uZSBvZiB0aGUgbGlzdGVuZXJzIHJlcGxpZWQgdG8gdGhlIHNlbmRNZXNzYWdlIGNhbGwgYW5kIHJlc29sdmVcbiAgICAgICAgICAvLyB0aGUgcHJvbWlzZSB0byB1bmRlZmluZWQgYXMgaW4gRmlyZWZveC5cbiAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvd2ViZXh0ZW5zaW9uLXBvbHlmaWxsL2lzc3Vlcy8xMzBcbiAgICAgICAgICBpZiAoZXh0ZW5zaW9uQVBJcy5ydW50aW1lLmxhc3RFcnJvci5tZXNzYWdlID09PSBDSFJPTUVfU0VORF9NRVNTQUdFX0NBTExCQUNLX05PX1JFU1BPTlNFX01FU1NBR0UpIHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KGV4dGVuc2lvbkFQSXMucnVudGltZS5sYXN0RXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChyZXBseSAmJiByZXBseS5fX21veldlYkV4dGVuc2lvblBvbHlmaWxsUmVqZWN0X18pIHtcbiAgICAgICAgICAvLyBDb252ZXJ0IGJhY2sgdGhlIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIGVycm9yIGludG9cbiAgICAgICAgICAvLyBhbiBFcnJvciBpbnN0YW5jZS5cbiAgICAgICAgICByZWplY3QobmV3IEVycm9yKHJlcGx5Lm1lc3NhZ2UpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKHJlcGx5KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgY29uc3Qgd3JhcHBlZFNlbmRNZXNzYWdlID0gKG5hbWUsIG1ldGFkYXRhLCBhcGlOYW1lc3BhY2VPYmosIC4uLmFyZ3MpID0+IHtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoIDwgbWV0YWRhdGEubWluQXJncykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgYXQgbGVhc3QgJHttZXRhZGF0YS5taW5BcmdzfSAke3BsdXJhbGl6ZUFyZ3VtZW50cyhtZXRhZGF0YS5taW5BcmdzKX0gZm9yICR7bmFtZX0oKSwgZ290ICR7YXJncy5sZW5ndGh9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXJncy5sZW5ndGggPiBtZXRhZGF0YS5tYXhBcmdzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBhdCBtb3N0ICR7bWV0YWRhdGEubWF4QXJnc30gJHtwbHVyYWxpemVBcmd1bWVudHMobWV0YWRhdGEubWF4QXJncyl9IGZvciAke25hbWV9KCksIGdvdCAke2FyZ3MubGVuZ3RofWApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICBjb25zdCB3cmFwcGVkQ2IgPSB3cmFwcGVkU2VuZE1lc3NhZ2VDYWxsYmFjay5iaW5kKG51bGwsIHtcbiAgICAgICAgICAgIHJlc29sdmUsXG4gICAgICAgICAgICByZWplY3RcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBhcmdzLnB1c2god3JhcHBlZENiKTtcbiAgICAgICAgICBhcGlOYW1lc3BhY2VPYmouc2VuZE1lc3NhZ2UoLi4uYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgY29uc3Qgc3RhdGljV3JhcHBlcnMgPSB7XG4gICAgICAgIHJ1bnRpbWU6IHtcbiAgICAgICAgICBvbk1lc3NhZ2U6IHdyYXBFdmVudChvbk1lc3NhZ2VXcmFwcGVycyksXG4gICAgICAgICAgb25NZXNzYWdlRXh0ZXJuYWw6IHdyYXBFdmVudChvbk1lc3NhZ2VXcmFwcGVycyksXG4gICAgICAgICAgc2VuZE1lc3NhZ2U6IHdyYXBwZWRTZW5kTWVzc2FnZS5iaW5kKG51bGwsIFwic2VuZE1lc3NhZ2VcIiwge1xuICAgICAgICAgICAgbWluQXJnczogMSxcbiAgICAgICAgICAgIG1heEFyZ3M6IDNcbiAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICB0YWJzOiB7XG4gICAgICAgICAgc2VuZE1lc3NhZ2U6IHdyYXBwZWRTZW5kTWVzc2FnZS5iaW5kKG51bGwsIFwic2VuZE1lc3NhZ2VcIiwge1xuICAgICAgICAgICAgbWluQXJnczogMixcbiAgICAgICAgICAgIG1heEFyZ3M6IDNcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY29uc3Qgc2V0dGluZ01ldGFkYXRhID0ge1xuICAgICAgICBjbGVhcjoge1xuICAgICAgICAgIG1pbkFyZ3M6IDEsXG4gICAgICAgICAgbWF4QXJnczogMVxuICAgICAgICB9LFxuICAgICAgICBnZXQ6IHtcbiAgICAgICAgICBtaW5BcmdzOiAxLFxuICAgICAgICAgIG1heEFyZ3M6IDFcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiB7XG4gICAgICAgICAgbWluQXJnczogMSxcbiAgICAgICAgICBtYXhBcmdzOiAxXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBhcGlNZXRhZGF0YS5wcml2YWN5ID0ge1xuICAgICAgICBuZXR3b3JrOiB7XG4gICAgICAgICAgXCIqXCI6IHNldHRpbmdNZXRhZGF0YVxuICAgICAgICB9LFxuICAgICAgICBzZXJ2aWNlczoge1xuICAgICAgICAgIFwiKlwiOiBzZXR0aW5nTWV0YWRhdGFcbiAgICAgICAgfSxcbiAgICAgICAgd2Vic2l0ZXM6IHtcbiAgICAgICAgICBcIipcIjogc2V0dGluZ01ldGFkYXRhXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZXR1cm4gd3JhcE9iamVjdChleHRlbnNpb25BUElzLCBzdGF0aWNXcmFwcGVycywgYXBpTWV0YWRhdGEpO1xuICAgIH07XG5cbiAgICBpZiAodHlwZW9mIGNocm9tZSAhPSBcIm9iamVjdFwiIHx8ICFjaHJvbWUgfHwgIWNocm9tZS5ydW50aW1lIHx8ICFjaHJvbWUucnVudGltZS5pZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBzY3JpcHQgc2hvdWxkIG9ubHkgYmUgbG9hZGVkIGluIGEgYnJvd3NlciBleHRlbnNpb24uXCIpO1xuICAgIH0gLy8gVGhlIGJ1aWxkIHByb2Nlc3MgYWRkcyBhIFVNRCB3cmFwcGVyIGFyb3VuZCB0aGlzIGZpbGUsIHdoaWNoIG1ha2VzIHRoZVxuICAgIC8vIGBtb2R1bGVgIHZhcmlhYmxlIGF2YWlsYWJsZS5cblxuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB3cmFwQVBJcyhjaHJvbWUpO1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gYnJvd3NlcjtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1icm93c2VyLXBvbHlmaWxsLmpzLm1hcFxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhheGlvcy5kZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbi8vIEV4cG9zZSBpc0F4aW9zRXJyb3JcbmF4aW9zLmlzQXhpb3NFcnJvciA9IHJlcXVpcmUoJy4vaGVscGVycy9pc0F4aW9zRXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBhcmd1bWVudHNbMV0gfHwge307XG4gICAgY29uZmlnLnVybCA9IGFyZ3VtZW50c1swXTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gIC8vIFNldCBjb25maWcubWV0aG9kXG4gIGlmIChjb25maWcubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSB0aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5tZXRob2QgPSAnZ2V0JztcbiAgfVxuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1xuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cblxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgZXJyb3IuaXNBeGlvc0Vycm9yID0gdHJ1ZTtcblxuICBlcnJvci50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGVcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRGdWxsUGF0aChiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpIHtcbiAgaWYgKGJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwocmVxdWVzdGVkVVJMKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHZhciBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvc1xuICpcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0F4aW9zRXJyb3IocGF5bG9hZCkge1xuICByZXR1cm4gKHR5cGVvZiBwYXlsb2FkID09PSAnb2JqZWN0JykgJiYgKHBheWxvYWQuaXNBeGlvc0Vycm9yID09PSB0cnVlKTtcbn07XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UsIEVycikge1xuICAgIGlmIChFcnIgPT09IHZvaWQgMCkgeyBFcnIgPSBFcnJvcjsgfVxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnIobWVzc2FnZSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW52YXJpYW50LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5ib2R5T3BlbkNsYXNzTmFtZSA9IGV4cG9ydHMucG9ydGFsQ2xhc3NOYW1lID0gdW5kZWZpbmVkO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoXCJyZWFjdC1kb21cIik7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX01vZGFsUG9ydGFsID0gcmVxdWlyZShcIi4vTW9kYWxQb3J0YWxcIik7XG5cbnZhciBfTW9kYWxQb3J0YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTW9kYWxQb3J0YWwpO1xuXG52YXIgX2FyaWFBcHBIaWRlciA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL2FyaWFBcHBIaWRlclwiKTtcblxudmFyIGFyaWFBcHBIaWRlciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9hcmlhQXBwSGlkZXIpO1xuXG52YXIgX3NhZmVIVE1MRWxlbWVudCA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3NhZmVIVE1MRWxlbWVudFwiKTtcblxudmFyIF9zYWZlSFRNTEVsZW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2FmZUhUTUxFbGVtZW50KTtcblxudmFyIF9yZWFjdExpZmVjeWNsZXNDb21wYXQgPSByZXF1aXJlKFwicmVhY3QtbGlmZWN5Y2xlcy1jb21wYXRcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIHBvcnRhbENsYXNzTmFtZSA9IGV4cG9ydHMucG9ydGFsQ2xhc3NOYW1lID0gXCJSZWFjdE1vZGFsUG9ydGFsXCI7XG52YXIgYm9keU9wZW5DbGFzc05hbWUgPSBleHBvcnRzLmJvZHlPcGVuQ2xhc3NOYW1lID0gXCJSZWFjdE1vZGFsX19Cb2R5LS1vcGVuXCI7XG5cbnZhciBpc1JlYWN0MTYgPSBfc2FmZUhUTUxFbGVtZW50LmNhblVzZURPTSAmJiBfcmVhY3REb20yLmRlZmF1bHQuY3JlYXRlUG9ydGFsICE9PSB1bmRlZmluZWQ7XG5cbnZhciBnZXRDcmVhdGVQb3J0YWwgPSBmdW5jdGlvbiBnZXRDcmVhdGVQb3J0YWwoKSB7XG4gIHJldHVybiBpc1JlYWN0MTYgPyBfcmVhY3REb20yLmRlZmF1bHQuY3JlYXRlUG9ydGFsIDogX3JlYWN0RG9tMi5kZWZhdWx0LnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyO1xufTtcblxuZnVuY3Rpb24gZ2V0UGFyZW50RWxlbWVudChwYXJlbnRTZWxlY3Rvcikge1xuICByZXR1cm4gcGFyZW50U2VsZWN0b3IoKTtcbn1cblxudmFyIE1vZGFsID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1vZGFsLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb2RhbCgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9kYWwpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IE1vZGFsLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTW9kYWwpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5yZW1vdmVQb3J0YWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNSZWFjdDE2ICYmIF9yZWFjdERvbTIuZGVmYXVsdC51bm1vdW50Q29tcG9uZW50QXROb2RlKF90aGlzLm5vZGUpO1xuICAgICAgdmFyIHBhcmVudCA9IGdldFBhcmVudEVsZW1lbnQoX3RoaXMucHJvcHMucGFyZW50U2VsZWN0b3IpO1xuICAgICAgaWYgKHBhcmVudCAmJiBwYXJlbnQuY29udGFpbnMoX3RoaXMubm9kZSkpIHtcbiAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKF90aGlzLm5vZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS53YXJuKCdSZWFjdC1Nb2RhbDogXCJwYXJlbnRTZWxlY3RvclwiIHByb3AgZGlkIG5vdCByZXR1cm5lZCBhbnkgRE9NICcgKyBcImVsZW1lbnQuIE1ha2Ugc3VyZSB0aGF0IHRoZSBwYXJlbnQgZWxlbWVudCBpcyB1bm1vdW50ZWQgdG8gXCIgKyBcImF2b2lkIGFueSBtZW1vcnkgbGVha3MuXCIpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLnBvcnRhbFJlZiA9IGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIF90aGlzLnBvcnRhbCA9IHJlZjtcbiAgICB9LCBfdGhpcy5yZW5kZXJQb3J0YWwgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgIHZhciBjcmVhdGVQb3J0YWwgPSBnZXRDcmVhdGVQb3J0YWwoKTtcbiAgICAgIHZhciBwb3J0YWwgPSBjcmVhdGVQb3J0YWwoX3RoaXMsIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Nb2RhbFBvcnRhbDIuZGVmYXVsdCwgX2V4dGVuZHMoeyBkZWZhdWx0U3R5bGVzOiBNb2RhbC5kZWZhdWx0U3R5bGVzIH0sIHByb3BzKSksIF90aGlzLm5vZGUpO1xuICAgICAgX3RoaXMucG9ydGFsUmVmKHBvcnRhbCk7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTW9kYWwsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKCFfc2FmZUhUTUxFbGVtZW50LmNhblVzZURPTSkgcmV0dXJuO1xuXG4gICAgICBpZiAoIWlzUmVhY3QxNikge1xuICAgICAgICB0aGlzLm5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgfVxuICAgICAgdGhpcy5ub2RlLmNsYXNzTmFtZSA9IHRoaXMucHJvcHMucG9ydGFsQ2xhc3NOYW1lO1xuXG4gICAgICB2YXIgcGFyZW50ID0gZ2V0UGFyZW50RWxlbWVudCh0aGlzLnByb3BzLnBhcmVudFNlbGVjdG9yKTtcbiAgICAgIHBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLm5vZGUpO1xuXG4gICAgICAhaXNSZWFjdDE2ICYmIHRoaXMucmVuZGVyUG9ydGFsKHRoaXMucHJvcHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIHZhciBwcmV2UGFyZW50ID0gZ2V0UGFyZW50RWxlbWVudChwcmV2UHJvcHMucGFyZW50U2VsZWN0b3IpO1xuICAgICAgdmFyIG5leHRQYXJlbnQgPSBnZXRQYXJlbnRFbGVtZW50KHRoaXMucHJvcHMucGFyZW50U2VsZWN0b3IpO1xuICAgICAgcmV0dXJuIHsgcHJldlBhcmVudDogcHJldlBhcmVudCwgbmV4dFBhcmVudDogbmV4dFBhcmVudCB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgXywgc25hcHNob3QpIHtcbiAgICAgIGlmICghX3NhZmVIVE1MRWxlbWVudC5jYW5Vc2VET00pIHJldHVybjtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGlzT3BlbiA9IF9wcm9wcy5pc09wZW4sXG4gICAgICAgICAgcG9ydGFsQ2xhc3NOYW1lID0gX3Byb3BzLnBvcnRhbENsYXNzTmFtZTtcblxuXG4gICAgICBpZiAocHJldlByb3BzLnBvcnRhbENsYXNzTmFtZSAhPT0gcG9ydGFsQ2xhc3NOYW1lKSB7XG4gICAgICAgIHRoaXMubm9kZS5jbGFzc05hbWUgPSBwb3J0YWxDbGFzc05hbWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2UGFyZW50ID0gc25hcHNob3QucHJldlBhcmVudCxcbiAgICAgICAgICBuZXh0UGFyZW50ID0gc25hcHNob3QubmV4dFBhcmVudDtcblxuICAgICAgaWYgKG5leHRQYXJlbnQgIT09IHByZXZQYXJlbnQpIHtcbiAgICAgICAgcHJldlBhcmVudC5yZW1vdmVDaGlsZCh0aGlzLm5vZGUpO1xuICAgICAgICBuZXh0UGFyZW50LmFwcGVuZENoaWxkKHRoaXMubm9kZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFN0b3AgdW5uZWNlc3NhcnkgcmVuZGVycyBpZiBtb2RhbCBpcyByZW1haW5pbmcgY2xvc2VkXG4gICAgICBpZiAoIXByZXZQcm9wcy5pc09wZW4gJiYgIWlzT3BlbikgcmV0dXJuO1xuXG4gICAgICAhaXNSZWFjdDE2ICYmIHRoaXMucmVuZGVyUG9ydGFsKHRoaXMucHJvcHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICghX3NhZmVIVE1MRWxlbWVudC5jYW5Vc2VET00gfHwgIXRoaXMubm9kZSB8fCAhdGhpcy5wb3J0YWwpIHJldHVybjtcblxuICAgICAgdmFyIHN0YXRlID0gdGhpcy5wb3J0YWwuc3RhdGU7XG4gICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgIHZhciBjbG9zZXNBdCA9IHN0YXRlLmlzT3BlbiAmJiB0aGlzLnByb3BzLmNsb3NlVGltZW91dE1TICYmIChzdGF0ZS5jbG9zZXNBdCB8fCBub3cgKyB0aGlzLnByb3BzLmNsb3NlVGltZW91dE1TKTtcblxuICAgICAgaWYgKGNsb3Nlc0F0KSB7XG4gICAgICAgIGlmICghc3RhdGUuYmVmb3JlQ2xvc2UpIHtcbiAgICAgICAgICB0aGlzLnBvcnRhbC5jbG9zZVdpdGhUaW1lb3V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBzZXRUaW1lb3V0KHRoaXMucmVtb3ZlUG9ydGFsLCBjbG9zZXNBdCAtIG5vdyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbW92ZVBvcnRhbCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgaWYgKCFfc2FmZUhUTUxFbGVtZW50LmNhblVzZURPTSB8fCAhaXNSZWFjdDE2KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMubm9kZSAmJiBpc1JlYWN0MTYpIHtcbiAgICAgICAgdGhpcy5ub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNyZWF0ZVBvcnRhbCA9IGdldENyZWF0ZVBvcnRhbCgpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVBvcnRhbChfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTW9kYWxQb3J0YWwyLmRlZmF1bHQsIF9leHRlbmRzKHtcbiAgICAgICAgcmVmOiB0aGlzLnBvcnRhbFJlZixcbiAgICAgICAgZGVmYXVsdFN0eWxlczogTW9kYWwuZGVmYXVsdFN0eWxlc1xuICAgICAgfSwgdGhpcy5wcm9wcykpLCB0aGlzLm5vZGUpO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcInNldEFwcEVsZW1lbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0QXBwRWxlbWVudChlbGVtZW50KSB7XG4gICAgICBhcmlhQXBwSGlkZXIuc2V0RWxlbWVudChlbGVtZW50KTtcbiAgICB9XG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9uby11bnVzZWQtcHJvcC10eXBlcyAqL1xuXG4gICAgLyogZXNsaW50LWVuYWJsZSByZWFjdC9uby11bnVzZWQtcHJvcC10eXBlcyAqL1xuXG4gIH1dKTtcblxuICByZXR1cm4gTW9kYWw7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5Nb2RhbC5wcm9wVHlwZXMgPSB7XG4gIGlzT3BlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLmlzUmVxdWlyZWQsXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnNoYXBlKHtcbiAgICBjb250ZW50OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgICBvdmVybGF5OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdFxuICB9KSxcbiAgcG9ydGFsQ2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgYm9keU9wZW5DbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBodG1sT3BlbkNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzMi5kZWZhdWx0LnNoYXBlKHtcbiAgICBiYXNlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGFmdGVyT3BlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBiZWZvcmVDbG9zZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcuaXNSZXF1aXJlZFxuICB9KV0pLFxuICBvdmVybGF5Q2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMyLmRlZmF1bHQuc2hhcGUoe1xuICAgIGJhc2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgYWZ0ZXJPcGVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGJlZm9yZUNsb3NlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZy5pc1JlcXVpcmVkXG4gIH0pXSksXG4gIGFwcEVsZW1lbnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuaW5zdGFuY2VPZihfc2FmZUhUTUxFbGVtZW50Mi5kZWZhdWx0KSxcbiAgb25BZnRlck9wZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgb25SZXF1ZXN0Q2xvc2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgY2xvc2VUaW1lb3V0TVM6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICBhcmlhSGlkZUFwcDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBzaG91bGRGb2N1c0FmdGVyUmVuZGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHNob3VsZENsb3NlT25PdmVybGF5Q2xpY2s6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgc2hvdWxkUmV0dXJuRm9jdXNBZnRlckNsb3NlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHByZXZlbnRTY3JvbGw6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgcGFyZW50U2VsZWN0b3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgYXJpYTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIGRhdGE6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICByb2xlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgY29udGVudExhYmVsOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgc2hvdWxkQ2xvc2VPbkVzYzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBvdmVybGF5UmVmOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGNvbnRlbnRSZWY6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgaWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBvdmVybGF5RWxlbWVudDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBjb250ZW50RWxlbWVudDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXG59O1xuTW9kYWwuZGVmYXVsdFByb3BzID0ge1xuICBpc09wZW46IGZhbHNlLFxuICBwb3J0YWxDbGFzc05hbWU6IHBvcnRhbENsYXNzTmFtZSxcbiAgYm9keU9wZW5DbGFzc05hbWU6IGJvZHlPcGVuQ2xhc3NOYW1lLFxuICByb2xlOiBcImRpYWxvZ1wiLFxuICBhcmlhSGlkZUFwcDogdHJ1ZSxcbiAgY2xvc2VUaW1lb3V0TVM6IDAsXG4gIHNob3VsZEZvY3VzQWZ0ZXJSZW5kZXI6IHRydWUsXG4gIHNob3VsZENsb3NlT25Fc2M6IHRydWUsXG4gIHNob3VsZENsb3NlT25PdmVybGF5Q2xpY2s6IHRydWUsXG4gIHNob3VsZFJldHVybkZvY3VzQWZ0ZXJDbG9zZTogdHJ1ZSxcbiAgcHJldmVudFNjcm9sbDogZmFsc2UsXG4gIHBhcmVudFNlbGVjdG9yOiBmdW5jdGlvbiBwYXJlbnRTZWxlY3RvcigpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYm9keTtcbiAgfSxcbiAgb3ZlcmxheUVsZW1lbnQ6IGZ1bmN0aW9uIG92ZXJsYXlFbGVtZW50KHByb3BzLCBjb250ZW50RWwpIHtcbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBcImRpdlwiLFxuICAgICAgcHJvcHMsXG4gICAgICBjb250ZW50RWxcbiAgICApO1xuICB9LFxuICBjb250ZW50RWxlbWVudDogZnVuY3Rpb24gY29udGVudEVsZW1lbnQocHJvcHMsIGNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgXCJkaXZcIixcbiAgICAgIHByb3BzLFxuICAgICAgY2hpbGRyZW5cbiAgICApO1xuICB9XG59O1xuTW9kYWwuZGVmYXVsdFN0eWxlcyA9IHtcbiAgb3ZlcmxheToge1xuICAgIHBvc2l0aW9uOiBcImZpeGVkXCIsXG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNzUpXCJcbiAgfSxcbiAgY29udGVudDoge1xuICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgdG9wOiBcIjQwcHhcIixcbiAgICBsZWZ0OiBcIjQwcHhcIixcbiAgICByaWdodDogXCI0MHB4XCIsXG4gICAgYm90dG9tOiBcIjQwcHhcIixcbiAgICBib3JkZXI6IFwiMXB4IHNvbGlkICNjY2NcIixcbiAgICBiYWNrZ3JvdW5kOiBcIiNmZmZcIixcbiAgICBvdmVyZmxvdzogXCJhdXRvXCIsXG4gICAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6IFwidG91Y2hcIixcbiAgICBib3JkZXJSYWRpdXM6IFwiNHB4XCIsXG4gICAgb3V0bGluZTogXCJub25lXCIsXG4gICAgcGFkZGluZzogXCIyMHB4XCJcbiAgfVxufTtcblxuXG4oMCwgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdC5wb2x5ZmlsbCkoTW9kYWwpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBNb2RhbDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2ZvY3VzTWFuYWdlciA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL2ZvY3VzTWFuYWdlclwiKTtcblxudmFyIGZvY3VzTWFuYWdlciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9mb2N1c01hbmFnZXIpO1xuXG52YXIgX3Njb3BlVGFiID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvc2NvcGVUYWJcIik7XG5cbnZhciBfc2NvcGVUYWIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2NvcGVUYWIpO1xuXG52YXIgX2FyaWFBcHBIaWRlciA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL2FyaWFBcHBIaWRlclwiKTtcblxudmFyIGFyaWFBcHBIaWRlciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9hcmlhQXBwSGlkZXIpO1xuXG52YXIgX2NsYXNzTGlzdCA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL2NsYXNzTGlzdFwiKTtcblxudmFyIGNsYXNzTGlzdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9jbGFzc0xpc3QpO1xuXG52YXIgX3NhZmVIVE1MRWxlbWVudCA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3NhZmVIVE1MRWxlbWVudFwiKTtcblxudmFyIF9zYWZlSFRNTEVsZW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2FmZUhUTUxFbGVtZW50KTtcblxudmFyIF9wb3J0YWxPcGVuSW5zdGFuY2VzID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvcG9ydGFsT3Blbkluc3RhbmNlc1wiKTtcblxudmFyIF9wb3J0YWxPcGVuSW5zdGFuY2VzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BvcnRhbE9wZW5JbnN0YW5jZXMpO1xuXG5yZXF1aXJlKFwiLi4vaGVscGVycy9ib2R5VHJhcFwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vLyBzbyB0aGF0IG91ciBDU1MgaXMgc3RhdGljYWxseSBhbmFseXphYmxlXG52YXIgQ0xBU1NfTkFNRVMgPSB7XG4gIG92ZXJsYXk6IFwiUmVhY3RNb2RhbF9fT3ZlcmxheVwiLFxuICBjb250ZW50OiBcIlJlYWN0TW9kYWxfX0NvbnRlbnRcIlxufTtcblxudmFyIFRBQl9LRVkgPSA5O1xudmFyIEVTQ19LRVkgPSAyNztcblxudmFyIGFyaWFIaWRkZW5JbnN0YW5jZXMgPSAwO1xuXG52YXIgTW9kYWxQb3J0YWwgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTW9kYWxQb3J0YWwsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1vZGFsUG9ydGFsKHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vZGFsUG9ydGFsKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChNb2RhbFBvcnRhbC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKE1vZGFsUG9ydGFsKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMuc2V0T3ZlcmxheVJlZiA9IGZ1bmN0aW9uIChvdmVybGF5KSB7XG4gICAgICBfdGhpcy5vdmVybGF5ID0gb3ZlcmxheTtcbiAgICAgIF90aGlzLnByb3BzLm92ZXJsYXlSZWYgJiYgX3RoaXMucHJvcHMub3ZlcmxheVJlZihvdmVybGF5KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc2V0Q29udGVudFJlZiA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gICAgICBfdGhpcy5jb250ZW50ID0gY29udGVudDtcbiAgICAgIF90aGlzLnByb3BzLmNvbnRlbnRSZWYgJiYgX3RoaXMucHJvcHMuY29udGVudFJlZihjb250ZW50KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuYWZ0ZXJDbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGFwcEVsZW1lbnQgPSBfdGhpcyRwcm9wcy5hcHBFbGVtZW50LFxuICAgICAgICAgIGFyaWFIaWRlQXBwID0gX3RoaXMkcHJvcHMuYXJpYUhpZGVBcHAsXG4gICAgICAgICAgaHRtbE9wZW5DbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5odG1sT3BlbkNsYXNzTmFtZSxcbiAgICAgICAgICBib2R5T3BlbkNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmJvZHlPcGVuQ2xhc3NOYW1lO1xuXG4gICAgICAvLyBSZW1vdmUgY2xhc3Nlcy5cblxuICAgICAgYm9keU9wZW5DbGFzc05hbWUgJiYgY2xhc3NMaXN0LnJlbW92ZShkb2N1bWVudC5ib2R5LCBib2R5T3BlbkNsYXNzTmFtZSk7XG5cbiAgICAgIGh0bWxPcGVuQ2xhc3NOYW1lICYmIGNsYXNzTGlzdC5yZW1vdmUoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJodG1sXCIpWzBdLCBodG1sT3BlbkNsYXNzTmFtZSk7XG5cbiAgICAgIC8vIFJlc2V0IGFyaWEtaGlkZGVuIGF0dHJpYnV0ZSBpZiBhbGwgbW9kYWxzIGhhdmUgYmVlbiByZW1vdmVkXG4gICAgICBpZiAoYXJpYUhpZGVBcHAgJiYgYXJpYUhpZGRlbkluc3RhbmNlcyA+IDApIHtcbiAgICAgICAgYXJpYUhpZGRlbkluc3RhbmNlcyAtPSAxO1xuXG4gICAgICAgIGlmIChhcmlhSGlkZGVuSW5zdGFuY2VzID09PSAwKSB7XG4gICAgICAgICAgYXJpYUFwcEhpZGVyLnNob3coYXBwRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnByb3BzLnNob3VsZEZvY3VzQWZ0ZXJSZW5kZXIpIHtcbiAgICAgICAgaWYgKF90aGlzLnByb3BzLnNob3VsZFJldHVybkZvY3VzQWZ0ZXJDbG9zZSkge1xuICAgICAgICAgIGZvY3VzTWFuYWdlci5yZXR1cm5Gb2N1cyhfdGhpcy5wcm9wcy5wcmV2ZW50U2Nyb2xsKTtcbiAgICAgICAgICBmb2N1c01hbmFnZXIudGVhcmRvd25TY29wZWRGb2N1cygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZvY3VzTWFuYWdlci5wb3BXaXRob3V0Rm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25BZnRlckNsb3NlKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uQWZ0ZXJDbG9zZSgpO1xuICAgICAgfVxuXG4gICAgICBfcG9ydGFsT3Blbkluc3RhbmNlczIuZGVmYXVsdC5kZXJlZ2lzdGVyKF90aGlzKTtcbiAgICB9O1xuXG4gICAgX3RoaXMub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmJlZm9yZU9wZW4oKTtcbiAgICAgIGlmIChfdGhpcy5zdGF0ZS5hZnRlck9wZW4gJiYgX3RoaXMuc3RhdGUuYmVmb3JlQ2xvc2UpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmNsb3NlVGltZXIpO1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGJlZm9yZUNsb3NlOiBmYWxzZSB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5zaG91bGRGb2N1c0FmdGVyUmVuZGVyKSB7XG4gICAgICAgICAgZm9jdXNNYW5hZ2VyLnNldHVwU2NvcGVkRm9jdXMoX3RoaXMubm9kZSk7XG4gICAgICAgICAgZm9jdXNNYW5hZ2VyLm1hcmtGb3JGb2N1c0xhdGVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGlzT3BlbjogdHJ1ZSB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBhZnRlck9wZW46IHRydWUgfSk7XG5cbiAgICAgICAgICBpZiAoX3RoaXMucHJvcHMuaXNPcGVuICYmIF90aGlzLnByb3BzLm9uQWZ0ZXJPcGVuKSB7XG4gICAgICAgICAgICBfdGhpcy5wcm9wcy5vbkFmdGVyT3Blbih7XG4gICAgICAgICAgICAgIG92ZXJsYXlFbDogX3RoaXMub3ZlcmxheSxcbiAgICAgICAgICAgICAgY29udGVudEVsOiBfdGhpcy5jb250ZW50XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5jbG9zZVRpbWVvdXRNUyA+IDApIHtcbiAgICAgICAgX3RoaXMuY2xvc2VXaXRoVGltZW91dCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMuY2xvc2VXaXRob3V0VGltZW91dCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5mb2N1c0NvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuY29udGVudCAmJiAhX3RoaXMuY29udGVudEhhc0ZvY3VzKCkgJiYgX3RoaXMuY29udGVudC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmNsb3NlV2l0aFRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY2xvc2VzQXQgPSBEYXRlLm5vdygpICsgX3RoaXMucHJvcHMuY2xvc2VUaW1lb3V0TVM7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7IGJlZm9yZUNsb3NlOiB0cnVlLCBjbG9zZXNBdDogY2xvc2VzQXQgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5jbG9zZVRpbWVyID0gc2V0VGltZW91dChfdGhpcy5jbG9zZVdpdGhvdXRUaW1lb3V0LCBfdGhpcy5zdGF0ZS5jbG9zZXNBdCAtIERhdGUubm93KCkpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmNsb3NlV2l0aG91dFRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGJlZm9yZUNsb3NlOiBmYWxzZSxcbiAgICAgICAgaXNPcGVuOiBmYWxzZSxcbiAgICAgICAgYWZ0ZXJPcGVuOiBmYWxzZSxcbiAgICAgICAgY2xvc2VzQXQ6IG51bGxcbiAgICAgIH0sIF90aGlzLmFmdGVyQ2xvc2UpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gVEFCX0tFWSkge1xuICAgICAgICAoMCwgX3Njb3BlVGFiMi5kZWZhdWx0KShfdGhpcy5jb250ZW50LCBldmVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5zaG91bGRDbG9zZU9uRXNjICYmIGV2ZW50LmtleUNvZGUgPT09IEVTQ19LRVkpIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIF90aGlzLnJlcXVlc3RDbG9zZShldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZU92ZXJsYXlPbkNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMuc2hvdWxkQ2xvc2UgPT09IG51bGwpIHtcbiAgICAgICAgX3RoaXMuc2hvdWxkQ2xvc2UgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMuc2hvdWxkQ2xvc2UgJiYgX3RoaXMucHJvcHMuc2hvdWxkQ2xvc2VPbk92ZXJsYXlDbGljaykge1xuICAgICAgICBpZiAoX3RoaXMub3duZXJIYW5kbGVzQ2xvc2UoKSkge1xuICAgICAgICAgIF90aGlzLnJlcXVlc3RDbG9zZShldmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuZm9jdXNDb250ZW50KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIF90aGlzLnNob3VsZENsb3NlID0gbnVsbDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQ29udGVudE9uTW91c2VVcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNob3VsZENsb3NlID0gZmFsc2U7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZU92ZXJsYXlPbk1vdXNlRG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKCFfdGhpcy5wcm9wcy5zaG91bGRDbG9zZU9uT3ZlcmxheUNsaWNrICYmIGV2ZW50LnRhcmdldCA9PSBfdGhpcy5vdmVybGF5KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUNvbnRlbnRPbkNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2hvdWxkQ2xvc2UgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQ29udGVudE9uTW91c2VEb3duID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2hvdWxkQ2xvc2UgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgX3RoaXMucmVxdWVzdENsb3NlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gX3RoaXMub3duZXJIYW5kbGVzQ2xvc2UoKSAmJiBfdGhpcy5wcm9wcy5vblJlcXVlc3RDbG9zZShldmVudCk7XG4gICAgfTtcblxuICAgIF90aGlzLm93bmVySGFuZGxlc0Nsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnByb3BzLm9uUmVxdWVzdENsb3NlO1xuICAgIH07XG5cbiAgICBfdGhpcy5zaG91bGRCZUNsb3NlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAhX3RoaXMuc3RhdGUuaXNPcGVuICYmICFfdGhpcy5zdGF0ZS5iZWZvcmVDbG9zZTtcbiAgICB9O1xuXG4gICAgX3RoaXMuY29udGVudEhhc0ZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IF90aGlzLmNvbnRlbnQgfHwgX3RoaXMuY29udGVudC5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuYnVpbGRDbGFzc05hbWUgPSBmdW5jdGlvbiAod2hpY2gsIGFkZGl0aW9uYWwpIHtcbiAgICAgIHZhciBjbGFzc05hbWVzID0gKHR5cGVvZiBhZGRpdGlvbmFsID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoYWRkaXRpb25hbCkpID09PSBcIm9iamVjdFwiID8gYWRkaXRpb25hbCA6IHtcbiAgICAgICAgYmFzZTogQ0xBU1NfTkFNRVNbd2hpY2hdLFxuICAgICAgICBhZnRlck9wZW46IENMQVNTX05BTUVTW3doaWNoXSArIFwiLS1hZnRlci1vcGVuXCIsXG4gICAgICAgIGJlZm9yZUNsb3NlOiBDTEFTU19OQU1FU1t3aGljaF0gKyBcIi0tYmVmb3JlLWNsb3NlXCJcbiAgICAgIH07XG4gICAgICB2YXIgY2xhc3NOYW1lID0gY2xhc3NOYW1lcy5iYXNlO1xuICAgICAgaWYgKF90aGlzLnN0YXRlLmFmdGVyT3Blbikge1xuICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUgKyBcIiBcIiArIGNsYXNzTmFtZXMuYWZ0ZXJPcGVuO1xuICAgICAgfVxuICAgICAgaWYgKF90aGlzLnN0YXRlLmJlZm9yZUNsb3NlKSB7XG4gICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZSArIFwiIFwiICsgY2xhc3NOYW1lcy5iZWZvcmVDbG9zZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgYWRkaXRpb25hbCA9PT0gXCJzdHJpbmdcIiAmJiBhZGRpdGlvbmFsID8gY2xhc3NOYW1lICsgXCIgXCIgKyBhZGRpdGlvbmFsIDogY2xhc3NOYW1lO1xuICAgIH07XG5cbiAgICBfdGhpcy5hdHRyaWJ1dGVzRnJvbU9iamVjdCA9IGZ1bmN0aW9uIChwcmVmaXgsIGl0ZW1zKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMoaXRlbXMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBuYW1lKSB7XG4gICAgICAgIGFjY1twcmVmaXggKyBcIi1cIiArIG5hbWVdID0gaXRlbXNbbmFtZV07XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9LCB7fSk7XG4gICAgfTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgYWZ0ZXJPcGVuOiBmYWxzZSxcbiAgICAgIGJlZm9yZUNsb3NlOiBmYWxzZVxuICAgIH07XG5cbiAgICBfdGhpcy5zaG91bGRDbG9zZSA9IG51bGw7XG4gICAgX3RoaXMubW92ZUZyb21Db250ZW50VG9PdmVybGF5ID0gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTW9kYWxQb3J0YWwsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuaXNPcGVuKSB7XG4gICAgICAgIHRoaXMub3BlbigpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGlmIChwcmV2UHJvcHMuYm9keU9wZW5DbGFzc05hbWUgIT09IHRoaXMucHJvcHMuYm9keU9wZW5DbGFzc05hbWUpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgIGNvbnNvbGUud2FybignUmVhY3QtTW9kYWw6IFwiYm9keU9wZW5DbGFzc05hbWVcIiBwcm9wIGhhcyBiZWVuIG1vZGlmaWVkLiAnICsgXCJUaGlzIG1heSBjYXVzZSB1bmV4cGVjdGVkIGJlaGF2aW9yIHdoZW4gbXVsdGlwbGUgbW9kYWxzIGFyZSBvcGVuLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJldlByb3BzLmh0bWxPcGVuQ2xhc3NOYW1lICE9PSB0aGlzLnByb3BzLmh0bWxPcGVuQ2xhc3NOYW1lKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1JlYWN0LU1vZGFsOiBcImh0bWxPcGVuQ2xhc3NOYW1lXCIgcHJvcCBoYXMgYmVlbiBtb2RpZmllZC4gJyArIFwiVGhpcyBtYXkgY2F1c2UgdW5leHBlY3RlZCBiZWhhdmlvciB3aGVuIG11bHRpcGxlIG1vZGFscyBhcmUgb3Blbi5cIik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucHJvcHMuaXNPcGVuICYmICFwcmV2UHJvcHMuaXNPcGVuKSB7XG4gICAgICAgIHRoaXMub3BlbigpO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5wcm9wcy5pc09wZW4gJiYgcHJldlByb3BzLmlzT3Blbikge1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEZvY3VzIG9ubHkgbmVlZHMgdG8gYmUgc2V0IG9uY2Ugd2hlbiB0aGUgbW9kYWwgaXMgYmVpbmcgb3BlbmVkXG4gICAgICBpZiAodGhpcy5wcm9wcy5zaG91bGRGb2N1c0FmdGVyUmVuZGVyICYmIHRoaXMuc3RhdGUuaXNPcGVuICYmICFwcmV2U3RhdGUuaXNPcGVuKSB7XG4gICAgICAgIHRoaXMuZm9jdXNDb250ZW50KCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuc3RhdGUuaXNPcGVuKSB7XG4gICAgICAgIHRoaXMuYWZ0ZXJDbG9zZSgpO1xuICAgICAgfVxuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuY2xvc2VUaW1lcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImJlZm9yZU9wZW5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYmVmb3JlT3BlbigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGFwcEVsZW1lbnQgPSBfcHJvcHMuYXBwRWxlbWVudCxcbiAgICAgICAgICBhcmlhSGlkZUFwcCA9IF9wcm9wcy5hcmlhSGlkZUFwcCxcbiAgICAgICAgICBodG1sT3BlbkNsYXNzTmFtZSA9IF9wcm9wcy5odG1sT3BlbkNsYXNzTmFtZSxcbiAgICAgICAgICBib2R5T3BlbkNsYXNzTmFtZSA9IF9wcm9wcy5ib2R5T3BlbkNsYXNzTmFtZTtcblxuICAgICAgLy8gQWRkIGNsYXNzZXMuXG5cbiAgICAgIGJvZHlPcGVuQ2xhc3NOYW1lICYmIGNsYXNzTGlzdC5hZGQoZG9jdW1lbnQuYm9keSwgYm9keU9wZW5DbGFzc05hbWUpO1xuXG4gICAgICBodG1sT3BlbkNsYXNzTmFtZSAmJiBjbGFzc0xpc3QuYWRkKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaHRtbFwiKVswXSwgaHRtbE9wZW5DbGFzc05hbWUpO1xuXG4gICAgICBpZiAoYXJpYUhpZGVBcHApIHtcbiAgICAgICAgYXJpYUhpZGRlbkluc3RhbmNlcyArPSAxO1xuICAgICAgICBhcmlhQXBwSGlkZXIuaGlkZShhcHBFbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgX3BvcnRhbE9wZW5JbnN0YW5jZXMyLmRlZmF1bHQucmVnaXN0ZXIodGhpcyk7XG4gICAgfVxuXG4gICAgLy8gRG9uJ3Qgc3RlYWwgZm9jdXMgZnJvbSBpbm5lciBlbGVtZW50c1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpZCA9IF9wcm9wczIuaWQsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzMi5jbGFzc05hbWUsXG4gICAgICAgICAgb3ZlcmxheUNsYXNzTmFtZSA9IF9wcm9wczIub3ZlcmxheUNsYXNzTmFtZSxcbiAgICAgICAgICBkZWZhdWx0U3R5bGVzID0gX3Byb3BzMi5kZWZhdWx0U3R5bGVzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzMi5jaGlsZHJlbjtcblxuICAgICAgdmFyIGNvbnRlbnRTdHlsZXMgPSBjbGFzc05hbWUgPyB7fSA6IGRlZmF1bHRTdHlsZXMuY29udGVudDtcbiAgICAgIHZhciBvdmVybGF5U3R5bGVzID0gb3ZlcmxheUNsYXNzTmFtZSA/IHt9IDogZGVmYXVsdFN0eWxlcy5vdmVybGF5O1xuXG4gICAgICBpZiAodGhpcy5zaG91bGRCZUNsb3NlZCgpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgb3ZlcmxheVByb3BzID0ge1xuICAgICAgICByZWY6IHRoaXMuc2V0T3ZlcmxheVJlZixcbiAgICAgICAgY2xhc3NOYW1lOiB0aGlzLmJ1aWxkQ2xhc3NOYW1lKFwib3ZlcmxheVwiLCBvdmVybGF5Q2xhc3NOYW1lKSxcbiAgICAgICAgc3R5bGU6IF9leHRlbmRzKHt9LCBvdmVybGF5U3R5bGVzLCB0aGlzLnByb3BzLnN0eWxlLm92ZXJsYXkpLFxuICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZU92ZXJsYXlPbkNsaWNrLFxuICAgICAgICBvbk1vdXNlRG93bjogdGhpcy5oYW5kbGVPdmVybGF5T25Nb3VzZURvd25cbiAgICAgIH07XG5cbiAgICAgIHZhciBjb250ZW50UHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgcmVmOiB0aGlzLnNldENvbnRlbnRSZWYsXG4gICAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7fSwgY29udGVudFN0eWxlcywgdGhpcy5wcm9wcy5zdHlsZS5jb250ZW50KSxcbiAgICAgICAgY2xhc3NOYW1lOiB0aGlzLmJ1aWxkQ2xhc3NOYW1lKFwiY29udGVudFwiLCBjbGFzc05hbWUpLFxuICAgICAgICB0YWJJbmRleDogXCItMVwiLFxuICAgICAgICBvbktleURvd246IHRoaXMuaGFuZGxlS2V5RG93bixcbiAgICAgICAgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlQ29udGVudE9uTW91c2VEb3duLFxuICAgICAgICBvbk1vdXNlVXA6IHRoaXMuaGFuZGxlQ29udGVudE9uTW91c2VVcCxcbiAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDb250ZW50T25DbGljayxcbiAgICAgICAgcm9sZTogdGhpcy5wcm9wcy5yb2xlLFxuICAgICAgICBcImFyaWEtbGFiZWxcIjogdGhpcy5wcm9wcy5jb250ZW50TGFiZWxcbiAgICAgIH0sIHRoaXMuYXR0cmlidXRlc0Zyb21PYmplY3QoXCJhcmlhXCIsIF9leHRlbmRzKHsgbW9kYWw6IHRydWUgfSwgdGhpcy5wcm9wcy5hcmlhKSksIHRoaXMuYXR0cmlidXRlc0Zyb21PYmplY3QoXCJkYXRhXCIsIHRoaXMucHJvcHMuZGF0YSB8fCB7fSksIHtcbiAgICAgICAgXCJkYXRhLXRlc3RpZFwiOiB0aGlzLnByb3BzLnRlc3RJZFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBjb250ZW50RWxlbWVudCA9IHRoaXMucHJvcHMuY29udGVudEVsZW1lbnQoY29udGVudFByb3BzLCBjaGlsZHJlbik7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5vdmVybGF5RWxlbWVudChvdmVybGF5UHJvcHMsIGNvbnRlbnRFbGVtZW50KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTW9kYWxQb3J0YWw7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5Nb2RhbFBvcnRhbC5kZWZhdWx0UHJvcHMgPSB7XG4gIHN0eWxlOiB7XG4gICAgb3ZlcmxheToge30sXG4gICAgY29udGVudDoge31cbiAgfSxcbiAgZGVmYXVsdFN0eWxlczoge31cbn07XG5Nb2RhbFBvcnRhbC5wcm9wVHlwZXMgPSB7XG4gIGlzT3BlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLmlzUmVxdWlyZWQsXG4gIGRlZmF1bHRTdHlsZXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc2hhcGUoe1xuICAgIGNvbnRlbnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAgIG92ZXJsYXk6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XG4gIH0pLFxuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zaGFwZSh7XG4gICAgY29udGVudDogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gICAgb3ZlcmxheTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3RcbiAgfSksXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdF0pLFxuICBvdmVybGF5Q2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XSksXG4gIGJvZHlPcGVuQ2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgaHRtbE9wZW5DbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBhcmlhSGlkZUFwcDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBhcHBFbGVtZW50OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lmluc3RhbmNlT2YoX3NhZmVIVE1MRWxlbWVudDIuZGVmYXVsdCksXG4gIG9uQWZ0ZXJPcGVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIG9uQWZ0ZXJDbG9zZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBvblJlcXVlc3RDbG9zZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBjbG9zZVRpbWVvdXRNUzogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIHNob3VsZEZvY3VzQWZ0ZXJSZW5kZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgc2hvdWxkQ2xvc2VPbk92ZXJsYXlDbGljazogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBzaG91bGRSZXR1cm5Gb2N1c0FmdGVyQ2xvc2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgcHJldmVudFNjcm9sbDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICByb2xlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgY29udGVudExhYmVsOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgYXJpYTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIGRhdGE6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICBzaG91bGRDbG9zZU9uRXNjOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIG92ZXJsYXlSZWY6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgY29udGVudFJlZjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBpZDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIG92ZXJsYXlFbGVtZW50OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGNvbnRlbnRFbGVtZW50OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIHRlc3RJZDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBNb2RhbFBvcnRhbDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmhhbmRsZUJsdXIgPSBoYW5kbGVCbHVyO1xuZXhwb3J0cy5oYW5kbGVGb2N1cyA9IGhhbmRsZUZvY3VzO1xuZXhwb3J0cy5tYXJrRm9yRm9jdXNMYXRlciA9IG1hcmtGb3JGb2N1c0xhdGVyO1xuZXhwb3J0cy5yZXR1cm5Gb2N1cyA9IHJldHVybkZvY3VzO1xuZXhwb3J0cy5wb3BXaXRob3V0Rm9jdXMgPSBwb3BXaXRob3V0Rm9jdXM7XG5leHBvcnRzLnNldHVwU2NvcGVkRm9jdXMgPSBzZXR1cFNjb3BlZEZvY3VzO1xuZXhwb3J0cy50ZWFyZG93blNjb3BlZEZvY3VzID0gdGVhcmRvd25TY29wZWRGb2N1cztcblxudmFyIF90YWJiYWJsZSA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3RhYmJhYmxlXCIpO1xuXG52YXIgX3RhYmJhYmxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RhYmJhYmxlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGZvY3VzTGF0ZXJFbGVtZW50cyA9IFtdO1xudmFyIG1vZGFsRWxlbWVudCA9IG51bGw7XG52YXIgbmVlZFRvRm9jdXMgPSBmYWxzZTtcblxuZnVuY3Rpb24gaGFuZGxlQmx1cigpIHtcbiAgbmVlZFRvRm9jdXMgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVGb2N1cygpIHtcbiAgaWYgKG5lZWRUb0ZvY3VzKSB7XG4gICAgbmVlZFRvRm9jdXMgPSBmYWxzZTtcbiAgICBpZiAoIW1vZGFsRWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBuZWVkIHRvIHNlZSBob3cgalF1ZXJ5IHNoaW1zIGRvY3VtZW50Lm9uKCdmb2N1c2luJykgc28gd2UgZG9uJ3QgbmVlZCB0aGVcbiAgICAvLyBzZXRUaW1lb3V0LCBmaXJlZm94IGRvZXNuJ3Qgc3VwcG9ydCBmb2N1c2luLCBpZiBpdCBkaWQsIHdlIGNvdWxkIGZvY3VzXG4gICAgLy8gdGhlIGVsZW1lbnQgb3V0c2lkZSBvZiBhIHNldFRpbWVvdXQuIFNpZGUtZWZmZWN0IG9mIHRoaXMgaW1wbGVtZW50YXRpb25cbiAgICAvLyBpcyB0aGF0IHRoZSBkb2N1bWVudC5ib2R5IGdldHMgZm9jdXMsIGFuZCB0aGVuIHdlIGZvY3VzIG91ciBlbGVtZW50IHJpZ2h0XG4gICAgLy8gYWZ0ZXIsIHNlZW1zIGZpbmUuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAobW9kYWxFbGVtZW50LmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBlbCA9ICgwLCBfdGFiYmFibGUyLmRlZmF1bHQpKG1vZGFsRWxlbWVudClbMF0gfHwgbW9kYWxFbGVtZW50O1xuICAgICAgZWwuZm9jdXMoKTtcbiAgICB9LCAwKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrRm9yRm9jdXNMYXRlcigpIHtcbiAgZm9jdXNMYXRlckVsZW1lbnRzLnB1c2goZG9jdW1lbnQuYWN0aXZlRWxlbWVudCk7XG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbmZ1bmN0aW9uIHJldHVybkZvY3VzKCkge1xuICB2YXIgcHJldmVudFNjcm9sbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgdmFyIHRvRm9jdXMgPSBudWxsO1xuICB0cnkge1xuICAgIGlmIChmb2N1c0xhdGVyRWxlbWVudHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICB0b0ZvY3VzID0gZm9jdXNMYXRlckVsZW1lbnRzLnBvcCgpO1xuICAgICAgdG9Gb2N1cy5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHByZXZlbnRTY3JvbGwgfSk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUud2FybihbXCJZb3UgdHJpZWQgdG8gcmV0dXJuIGZvY3VzIHRvXCIsIHRvRm9jdXMsIFwiYnV0IGl0IGlzIG5vdCBpbiB0aGUgRE9NIGFueW1vcmVcIl0uam9pbihcIiBcIikpO1xuICB9XG59XG4vKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuZnVuY3Rpb24gcG9wV2l0aG91dEZvY3VzKCkge1xuICBmb2N1c0xhdGVyRWxlbWVudHMubGVuZ3RoID4gMCAmJiBmb2N1c0xhdGVyRWxlbWVudHMucG9wKCk7XG59XG5cbmZ1bmN0aW9uIHNldHVwU2NvcGVkRm9jdXMoZWxlbWVudCkge1xuICBtb2RhbEVsZW1lbnQgPSBlbGVtZW50O1xuXG4gIGlmICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCBoYW5kbGVCbHVyLCBmYWxzZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIGhhbmRsZUZvY3VzLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICB3aW5kb3cuYXR0YWNoRXZlbnQoXCJvbkJsdXJcIiwgaGFuZGxlQmx1cik7XG4gICAgZG9jdW1lbnQuYXR0YWNoRXZlbnQoXCJvbkZvY3VzXCIsIGhhbmRsZUZvY3VzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0ZWFyZG93blNjb3BlZEZvY3VzKCkge1xuICBtb2RhbEVsZW1lbnQgPSBudWxsO1xuXG4gIGlmICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmx1clwiLCBoYW5kbGVCbHVyKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgaGFuZGxlRm9jdXMpO1xuICB9IGVsc2Uge1xuICAgIHdpbmRvdy5kZXRhY2hFdmVudChcIm9uQmx1clwiLCBoYW5kbGVCbHVyKTtcbiAgICBkb2N1bWVudC5kZXRhY2hFdmVudChcIm9uRm9jdXNcIiwgaGFuZGxlRm9jdXMpO1xuICB9XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBzY29wZVRhYjtcblxudmFyIF90YWJiYWJsZSA9IHJlcXVpcmUoXCIuL3RhYmJhYmxlXCIpO1xuXG52YXIgX3RhYmJhYmxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RhYmJhYmxlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gc2NvcGVUYWIobm9kZSwgZXZlbnQpIHtcbiAgdmFyIHRhYmJhYmxlID0gKDAsIF90YWJiYWJsZTIuZGVmYXVsdCkobm9kZSk7XG5cbiAgaWYgKCF0YWJiYWJsZS5sZW5ndGgpIHtcbiAgICAvLyBEbyBub3RoaW5nLCBzaW5jZSB0aGVyZSBhcmUgbm8gZWxlbWVudHMgdGhhdCBjYW4gcmVjZWl2ZSBmb2N1cy5cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB0YXJnZXQgPSB2b2lkIDA7XG5cbiAgdmFyIHNoaWZ0S2V5ID0gZXZlbnQuc2hpZnRLZXk7XG4gIHZhciBoZWFkID0gdGFiYmFibGVbMF07XG4gIHZhciB0YWlsID0gdGFiYmFibGVbdGFiYmFibGUubGVuZ3RoIC0gMV07XG5cbiAgLy8gcHJvY2VlZCB3aXRoIGRlZmF1bHQgYnJvd3NlciBiZWhhdmlvciBvbiB0YWIuXG4gIC8vIEZvY3VzIG9uIGxhc3QgZWxlbWVudCBvbiBzaGlmdCArIHRhYi5cbiAgaWYgKG5vZGUgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICBpZiAoIXNoaWZ0S2V5KSByZXR1cm47XG4gICAgdGFyZ2V0ID0gdGFpbDtcbiAgfVxuXG4gIGlmICh0YWlsID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICFzaGlmdEtleSkge1xuICAgIHRhcmdldCA9IGhlYWQ7XG4gIH1cblxuICBpZiAoaGVhZCA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiBzaGlmdEtleSkge1xuICAgIHRhcmdldCA9IHRhaWw7XG4gIH1cblxuICBpZiAodGFyZ2V0KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0YXJnZXQuZm9jdXMoKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBTYWZhcmkgcmFkaW8gaXNzdWUuXG4gIC8vXG4gIC8vIFNhZmFyaSBkb2VzIG5vdCBtb3ZlIHRoZSBmb2N1cyB0byB0aGUgcmFkaW8gYnV0dG9uLFxuICAvLyBzbyB3ZSBuZWVkIHRvIGZvcmNlIGl0IHRvIHJlYWxseSB3YWxrIHRocm91Z2ggYWxsIGVsZW1lbnRzLlxuICAvL1xuICAvLyBUaGlzIGlzIHZlcnkgZXJyb3IgcHJvbmUsIHNpbmNlIHdlIGFyZSB0cnlpbmcgdG8gZ3Vlc3NcbiAgLy8gaWYgaXQgaXMgYSBzYWZhcmkgYnJvd3NlciBmcm9tIHRoZSBmaXJzdCBvY2N1cmVuY2UgYmV0d2VlblxuICAvLyBjaHJvbWUgb3Igc2FmYXJpLlxuICAvL1xuICAvLyBUaGUgY2hyb21lIHVzZXIgYWdlbnQgY29udGFpbnMgdGhlIGZpcnN0IG9jdXJyZW5jZVxuICAvLyBhcyB0aGUgJ2Nocm9tZS92ZXJzaW9uJyBhbmQgbGF0ZXIgdGhlICdzYWZhcmkvdmVyc2lvbicuXG4gIHZhciBjaGVja1NhZmFyaSA9IC8oXFxiQ2hyb21lXFxifFxcYlNhZmFyaVxcYilcXC8vLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gIHZhciBpc1NhZmFyaURlc2t0b3AgPSBjaGVja1NhZmFyaSAhPSBudWxsICYmIGNoZWNrU2FmYXJpWzFdICE9IFwiQ2hyb21lXCIgJiYgL1xcYmlQb2RcXGJ8XFxiaVBhZFxcYi9nLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudCkgPT0gbnVsbDtcblxuICAvLyBJZiB3ZSBhcmUgbm90IGluIHNhZmFyaSBkZXNrdG9wLCBsZXQgdGhlIGJyb3dzZXIgY29udHJvbFxuICAvLyB0aGUgZm9jdXNcbiAgaWYgKCFpc1NhZmFyaURlc2t0b3ApIHJldHVybjtcblxuICB2YXIgeCA9IHRhYmJhYmxlLmluZGV4T2YoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCk7XG5cbiAgaWYgKHggPiAtMSkge1xuICAgIHggKz0gc2hpZnRLZXkgPyAtMSA6IDE7XG4gIH1cblxuICB0YXJnZXQgPSB0YWJiYWJsZVt4XTtcblxuICAvLyBJZiB0aGUgdGFiYmFibGUgZWxlbWVudCBkb2VzIG5vdCBleGlzdCxcbiAgLy8gZm9jdXMgaGVhZC90YWlsIGJhc2VkIG9uIHNoaWZ0S2V5XG4gIGlmICh0eXBlb2YgdGFyZ2V0ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0YXJnZXQgPSBzaGlmdEtleSA/IHRhaWwgOiBoZWFkO1xuICAgIHRhcmdldC5mb2N1cygpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgdGFyZ2V0LmZvY3VzKCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgX19ERVZfXyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbic7XG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKF9fREVWX18pIHtcbiAgdmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uIHByaW50V2FybmluZyhmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDEgPyBsZW4gLSAxIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMTsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAxXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pO1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH1cblxuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KG51bGwsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE1IEplZCBXYXRzb24uXG4gIEJhc2VkIG9uIGNvZGUgdGhhdCBpcyBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBjYW5Vc2VET00gPSAhIShcblx0XHR0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuXHRcdHdpbmRvdy5kb2N1bWVudCAmJlxuXHRcdHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50XG5cdCk7XG5cblx0dmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0ge1xuXG5cdFx0Y2FuVXNlRE9NOiBjYW5Vc2VET00sXG5cblx0XHRjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuXHRcdGNhblVzZUV2ZW50TGlzdGVuZXJzOlxuXHRcdFx0Y2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cblx0XHRjYW5Vc2VWaWV3cG9ydDogY2FuVXNlRE9NICYmICEhd2luZG93LnNjcmVlblxuXG5cdH07XG5cblx0aWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHRkZWZpbmUoZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIEV4ZWN1dGlvbkVudmlyb25tZW50O1xuXHRcdH0pO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuRXhlY3V0aW9uRW52aXJvbm1lbnQgPSBFeGVjdXRpb25FbnZpcm9ubWVudDtcblx0fVxuXG59KCkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmR1bXBDbGFzc0xpc3RzID0gZHVtcENsYXNzTGlzdHM7XG52YXIgaHRtbENsYXNzTGlzdCA9IHt9O1xudmFyIGRvY0JvZHlDbGFzc0xpc3QgPSB7fTtcblxuZnVuY3Rpb24gZHVtcENsYXNzTGlzdHMoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YXIgY2xhc3NlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaHRtbFwiKVswXS5jbGFzc05hbWU7XG4gICAgdmFyIGJ1ZmZlciA9IFwiU2hvdyB0cmFja2VkIGNsYXNzZXM6XFxuXFxuXCI7XG5cbiAgICBidWZmZXIgKz0gXCI8aHRtbCAvPiAoXCIgKyBjbGFzc2VzICsgXCIpOlxcblwiO1xuICAgIGZvciAodmFyIHggaW4gaHRtbENsYXNzTGlzdCkge1xuICAgICAgYnVmZmVyICs9IFwiICBcIiArIHggKyBcIiBcIiArIGh0bWxDbGFzc0xpc3RbeF0gKyBcIlxcblwiO1xuICAgIH1cblxuICAgIGNsYXNzZXMgPSBkb2N1bWVudC5ib2R5LmNsYXNzTmFtZTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG4gICAgYnVmZmVyICs9IFwiXFxuXFxuZG9jLmJvZHkgKFwiICsgY2xhc3NlcyArIFwiKTpcXG5cIjtcbiAgICBmb3IgKHZhciBfeCBpbiBkb2NCb2R5Q2xhc3NMaXN0KSB7XG4gICAgICBidWZmZXIgKz0gXCIgIFwiICsgX3ggKyBcIiBcIiArIGRvY0JvZHlDbGFzc0xpc3RbX3hdICsgXCJcXG5cIjtcbiAgICB9XG5cbiAgICBidWZmZXIgKz0gXCJcXG5cIjtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5sb2coYnVmZmVyKTtcbiAgfVxufVxuXG4vKipcbiAqIFRyYWNrIHRoZSBudW1iZXIgb2YgcmVmZXJlbmNlIG9mIGEgY2xhc3MuXG4gKiBAcGFyYW0ge29iamVjdH0gcG9sbCBUaGUgcG9sbCB0byByZWNlaXZlIHRoZSByZWZlcmVuY2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIFRoZSBjbGFzcyBuYW1lLlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG52YXIgaW5jcmVtZW50UmVmZXJlbmNlID0gZnVuY3Rpb24gaW5jcmVtZW50UmVmZXJlbmNlKHBvbGwsIGNsYXNzTmFtZSkge1xuICBpZiAoIXBvbGxbY2xhc3NOYW1lXSkge1xuICAgIHBvbGxbY2xhc3NOYW1lXSA9IDA7XG4gIH1cbiAgcG9sbFtjbGFzc05hbWVdICs9IDE7XG4gIHJldHVybiBjbGFzc05hbWU7XG59O1xuXG4vKipcbiAqIERyb3AgdGhlIHJlZmVyZW5jZSBvZiBhIGNsYXNzLlxuICogQHBhcmFtIHtvYmplY3R9IHBvbGwgVGhlIHBvbGwgdG8gcmVjZWl2ZSB0aGUgcmVmZXJlbmNlLlxuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSBUaGUgY2xhc3MgbmFtZS5cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xudmFyIGRlY3JlbWVudFJlZmVyZW5jZSA9IGZ1bmN0aW9uIGRlY3JlbWVudFJlZmVyZW5jZShwb2xsLCBjbGFzc05hbWUpIHtcbiAgaWYgKHBvbGxbY2xhc3NOYW1lXSkge1xuICAgIHBvbGxbY2xhc3NOYW1lXSAtPSAxO1xuICB9XG4gIHJldHVybiBjbGFzc05hbWU7XG59O1xuXG4vKipcbiAqIFRyYWNrIGEgY2xhc3MgYW5kIGFkZCB0byB0aGUgZ2l2ZW4gY2xhc3MgbGlzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjbGFzc0xpc3RSZWYgQSBjbGFzcyBsaXN0IG9mIGFuIGVsZW1lbnQuXG4gKiBAcGFyYW0ge09iamVjdH0gcG9sbCAgICAgICAgIFRoZSBwb2xsIHRvIGJlIHVzZWQuXG4gKiBAcGFyYW0ge0FycmF5fSAgY2xhc3NlcyAgICAgIFRoZSBsaXN0IG9mIGNsYXNzZXMgdG8gYmUgdHJhY2tlZC5cbiAqL1xudmFyIHRyYWNrQ2xhc3MgPSBmdW5jdGlvbiB0cmFja0NsYXNzKGNsYXNzTGlzdFJlZiwgcG9sbCwgY2xhc3Nlcykge1xuICBjbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgIGluY3JlbWVudFJlZmVyZW5jZShwb2xsLCBjbGFzc05hbWUpO1xuICAgIGNsYXNzTGlzdFJlZi5hZGQoY2xhc3NOYW1lKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFVudHJhY2sgYSBjbGFzcyBhbmQgcmVtb3ZlIGZyb20gdGhlIGdpdmVuIGNsYXNzIGxpc3QgaWYgdGhlIHJlZmVyZW5jZVxuICogcmVhY2hlcyAwLlxuICogQHBhcmFtIHtPYmplY3R9IGNsYXNzTGlzdFJlZiBBIGNsYXNzIGxpc3Qgb2YgYW4gZWxlbWVudC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBwb2xsICAgICAgICAgVGhlIHBvbGwgdG8gYmUgdXNlZC5cbiAqIEBwYXJhbSB7QXJyYXl9ICBjbGFzc2VzICAgICAgVGhlIGxpc3Qgb2YgY2xhc3NlcyB0byBiZSB1bnRyYWNrZWQuXG4gKi9cbnZhciB1bnRyYWNrQ2xhc3MgPSBmdW5jdGlvbiB1bnRyYWNrQ2xhc3MoY2xhc3NMaXN0UmVmLCBwb2xsLCBjbGFzc2VzKSB7XG4gIGNsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgZGVjcmVtZW50UmVmZXJlbmNlKHBvbGwsIGNsYXNzTmFtZSk7XG4gICAgcG9sbFtjbGFzc05hbWVdID09PSAwICYmIGNsYXNzTGlzdFJlZi5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFB1YmxpYyBpbmZlcmZhY2UgdG8gYWRkIGNsYXNzZXMgdG8gdGhlIGRvY3VtZW50LmJvZHkuXG4gKiBAcGFyYW0ge3N0cmluZ30gYm9keUNsYXNzIFRoZSBjbGFzcyBzdHJpbmcgdG8gYmUgYWRkZWQuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIEl0IG1heSBjb250YWluIG1vcmUgdGhlbiBvbmUgY2xhc3NcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCAnICcgYXMgc2VwYXJhdG9yLlxuICovXG52YXIgYWRkID0gZXhwb3J0cy5hZGQgPSBmdW5jdGlvbiBhZGQoZWxlbWVudCwgY2xhc3NTdHJpbmcpIHtcbiAgcmV0dXJuIHRyYWNrQ2xhc3MoZWxlbWVudC5jbGFzc0xpc3QsIGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PSBcImh0bWxcIiA/IGh0bWxDbGFzc0xpc3QgOiBkb2NCb2R5Q2xhc3NMaXN0LCBjbGFzc1N0cmluZy5zcGxpdChcIiBcIikpO1xufTtcblxuLyoqXG4gKiBQdWJsaWMgaW5mZXJmYWNlIHRvIHJlbW92ZSBjbGFzc2VzIGZyb20gdGhlIGRvY3VtZW50LmJvZHkuXG4gKiBAcGFyYW0ge3N0cmluZ30gYm9keUNsYXNzIFRoZSBjbGFzcyBzdHJpbmcgdG8gYmUgYWRkZWQuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIEl0IG1heSBjb250YWluIG1vcmUgdGhlbiBvbmUgY2xhc3NcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCAnICcgYXMgc2VwYXJhdG9yLlxuICovXG52YXIgcmVtb3ZlID0gZXhwb3J0cy5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoZWxlbWVudCwgY2xhc3NTdHJpbmcpIHtcbiAgcmV0dXJuIHVudHJhY2tDbGFzcyhlbGVtZW50LmNsYXNzTGlzdCwgZWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09IFwiaHRtbFwiID8gaHRtbENsYXNzTGlzdCA6IGRvY0JvZHlDbGFzc0xpc3QsIGNsYXNzU3RyaW5nLnNwbGl0KFwiIFwiKSk7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX3BvcnRhbE9wZW5JbnN0YW5jZXMgPSByZXF1aXJlKFwiLi9wb3J0YWxPcGVuSW5zdGFuY2VzXCIpO1xuXG52YXIgX3BvcnRhbE9wZW5JbnN0YW5jZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9ydGFsT3Blbkluc3RhbmNlcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIEJvZHkgZm9jdXMgdHJhcCBzZWUgSXNzdWUgIzc0MlxuXG52YXIgYmVmb3JlID0gdm9pZCAwLFxuICAgIGFmdGVyID0gdm9pZCAwLFxuICAgIGluc3RhbmNlcyA9IFtdO1xuXG5mdW5jdGlvbiBmb2N1c0NvbnRlbnQoKSB7XG4gIGlmIChpbnN0YW5jZXMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcIlJlYWN0LU1vZGFsOiBPcGVuIGluc3RhbmNlcyA+IDAgZXhwZWN0ZWRcIik7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICBpbnN0YW5jZXNbaW5zdGFuY2VzLmxlbmd0aCAtIDFdLmZvY3VzQ29udGVudCgpO1xufVxuXG5mdW5jdGlvbiBib2R5VHJhcChldmVudFR5cGUsIG9wZW5JbnN0YW5jZXMpIHtcbiAgaWYgKCFiZWZvcmUgfHwgIWFmdGVyKSB7XG4gICAgYmVmb3JlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBiZWZvcmUuc2V0QXR0cmlidXRlKFwiZGF0YS1yZWFjdC1tb2RhbC1ib2R5LXRyYXBcIiwgXCJcIik7XG4gICAgYmVmb3JlLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgIGJlZm9yZS5zdHlsZS5vcGFjaXR5ID0gXCIwXCI7XG4gICAgYmVmb3JlLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsIFwiMFwiKTtcbiAgICBiZWZvcmUuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIGZvY3VzQ29udGVudCk7XG4gICAgYWZ0ZXIgPSBiZWZvcmUuY2xvbmVOb2RlKCk7XG4gICAgYWZ0ZXIuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIGZvY3VzQ29udGVudCk7XG4gIH1cblxuICBpbnN0YW5jZXMgPSBvcGVuSW5zdGFuY2VzO1xuXG4gIGlmIChpbnN0YW5jZXMubGVuZ3RoID4gMCkge1xuICAgIC8vIEFkZCBmb2N1cyB0cmFwXG4gICAgaWYgKGRvY3VtZW50LmJvZHkuZmlyc3RDaGlsZCAhPT0gYmVmb3JlKSB7XG4gICAgICBkb2N1bWVudC5ib2R5Lmluc2VydEJlZm9yZShiZWZvcmUsIGRvY3VtZW50LmJvZHkuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIGlmIChkb2N1bWVudC5ib2R5Lmxhc3RDaGlsZCAhPT0gYWZ0ZXIpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYWZ0ZXIpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBSZW1vdmUgZm9jdXMgdHJhcFxuICAgIGlmIChiZWZvcmUucGFyZW50RWxlbWVudCkge1xuICAgICAgYmVmb3JlLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoYmVmb3JlKTtcbiAgICB9XG4gICAgaWYgKGFmdGVyLnBhcmVudEVsZW1lbnQpIHtcbiAgICAgIGFmdGVyLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoYWZ0ZXIpO1xuICAgIH1cbiAgfVxufVxuXG5fcG9ydGFsT3Blbkluc3RhbmNlczIuZGVmYXVsdC5zdWJzY3JpYmUoYm9keVRyYXApOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAvLyBDYWxsIHRoaXMuY29uc3RydWN0b3IuZ0RTRlAgdG8gc3VwcG9ydCBzdWItY2xhc3Nlcy5cbiAgdmFyIHN0YXRlID0gdGhpcy5jb25zdHJ1Y3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHModGhpcy5wcm9wcywgdGhpcy5zdGF0ZSk7XG4gIGlmIChzdGF0ZSAhPT0gbnVsbCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgLy8gQ2FsbCB0aGlzLmNvbnN0cnVjdG9yLmdEU0ZQIHRvIHN1cHBvcnQgc3ViLWNsYXNzZXMuXG4gIC8vIFVzZSB0aGUgc2V0U3RhdGUoKSB1cGRhdGVyIHRvIGVuc3VyZSBzdGF0ZSBpc24ndCBzdGFsZSBpbiBjZXJ0YWluIGVkZ2UgY2FzZXMuXG4gIGZ1bmN0aW9uIHVwZGF0ZXIocHJldlN0YXRlKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5jb25zdHJ1Y3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBwcmV2U3RhdGUpO1xuICAgIHJldHVybiBzdGF0ZSAhPT0gbnVsbCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkID8gc3RhdGUgOiBudWxsO1xuICB9XG4gIC8vIEJpbmRpbmcgXCJ0aGlzXCIgaXMgaW1wb3J0YW50IGZvciBzaGFsbG93IHJlbmRlcmVyIHN1cHBvcnQuXG4gIHRoaXMuc2V0U3RhdGUodXBkYXRlci5iaW5kKHRoaXMpKTtcbn1cblxuZnVuY3Rpb24gY29tcG9uZW50V2lsbFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICB0cnkge1xuICAgIHZhciBwcmV2UHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBwcmV2U3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgIHRoaXMucHJvcHMgPSBuZXh0UHJvcHM7XG4gICAgdGhpcy5zdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZyA9IHRydWU7XG4gICAgdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdCA9IHRoaXMuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoXG4gICAgICBwcmV2UHJvcHMsXG4gICAgICBwcmV2U3RhdGVcbiAgICApO1xuICB9IGZpbmFsbHkge1xuICAgIHRoaXMucHJvcHMgPSBwcmV2UHJvcHM7XG4gICAgdGhpcy5zdGF0ZSA9IHByZXZTdGF0ZTtcbiAgfVxufVxuXG4vLyBSZWFjdCBtYXkgd2FybiBhYm91dCBjV00vY1dSUC9jV1UgbWV0aG9kcyBiZWluZyBkZXByZWNhdGVkLlxuLy8gQWRkIGEgZmxhZyB0byBzdXBwcmVzcyB0aGVzZSB3YXJuaW5ncyBmb3IgdGhpcyBzcGVjaWFsIGNhc2UuXG5jb21wb25lbnRXaWxsTW91bnQuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyA9IHRydWU7XG5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgPSB0cnVlO1xuY29tcG9uZW50V2lsbFVwZGF0ZS5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTtcblxuZnVuY3Rpb24gcG9seWZpbGwoQ29tcG9uZW50KSB7XG4gIHZhciBwcm90b3R5cGUgPSBDb21wb25lbnQucHJvdG90eXBlO1xuXG4gIGlmICghcHJvdG90eXBlIHx8ICFwcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2FuIG9ubHkgcG9seWZpbGwgY2xhc3MgY29tcG9uZW50cycpO1xuICB9XG5cbiAgaWYgKFxuICAgIHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzICE9PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIHByb3RvdHlwZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm4gQ29tcG9uZW50O1xuICB9XG5cbiAgLy8gSWYgbmV3IGNvbXBvbmVudCBBUElzIGFyZSBkZWZpbmVkLCBcInVuc2FmZVwiIGxpZmVjeWNsZXMgd29uJ3QgYmUgY2FsbGVkLlxuICAvLyBFcnJvciBpZiBhbnkgb2YgdGhlc2UgbGlmZWN5Y2xlcyBhcmUgcHJlc2VudCxcbiAgLy8gQmVjYXVzZSB0aGV5IHdvdWxkIHdvcmsgZGlmZmVyZW50bHkgYmV0d2VlbiBvbGRlciBhbmQgbmV3ZXIgKDE2LjMrKSB2ZXJzaW9ucyBvZiBSZWFjdC5cbiAgdmFyIGZvdW5kV2lsbE1vdW50TmFtZSA9IG51bGw7XG4gIHZhciBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lID0gbnVsbDtcbiAgdmFyIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSBudWxsO1xuICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxNb3VudE5hbWUgPSAnY29tcG9uZW50V2lsbE1vdW50JztcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxNb3VudE5hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCc7XG4gIH1cbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgPSAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnO1xuICB9XG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxVcGRhdGVOYW1lID0gJ2NvbXBvbmVudFdpbGxVcGRhdGUnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxVcGRhdGVOYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJztcbiAgfVxuICBpZiAoXG4gICAgZm91bmRXaWxsTW91bnROYW1lICE9PSBudWxsIHx8XG4gICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSAhPT0gbnVsbCB8fFxuICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgIT09IG51bGxcbiAgKSB7XG4gICAgdmFyIGNvbXBvbmVudE5hbWUgPSBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWU7XG4gICAgdmFyIG5ld0FwaU5hbWUgPVxuICAgICAgdHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyAnZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKCknXG4gICAgICAgIDogJ2dldFNuYXBzaG90QmVmb3JlVXBkYXRlKCknO1xuXG4gICAgdGhyb3cgRXJyb3IoXG4gICAgICAnVW5zYWZlIGxlZ2FjeSBsaWZlY3ljbGVzIHdpbGwgbm90IGJlIGNhbGxlZCBmb3IgY29tcG9uZW50cyB1c2luZyBuZXcgY29tcG9uZW50IEFQSXMuXFxuXFxuJyArXG4gICAgICAgIGNvbXBvbmVudE5hbWUgK1xuICAgICAgICAnIHVzZXMgJyArXG4gICAgICAgIG5ld0FwaU5hbWUgK1xuICAgICAgICAnIGJ1dCBhbHNvIGNvbnRhaW5zIHRoZSBmb2xsb3dpbmcgbGVnYWN5IGxpZmVjeWNsZXM6JyArXG4gICAgICAgIChmb3VuZFdpbGxNb3VudE5hbWUgIT09IG51bGwgPyAnXFxuICAnICsgZm91bmRXaWxsTW91bnROYW1lIDogJycpICtcbiAgICAgICAgKGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgIT09IG51bGxcbiAgICAgICAgICA/ICdcXG4gICcgKyBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lXG4gICAgICAgICAgOiAnJykgK1xuICAgICAgICAoZm91bmRXaWxsVXBkYXRlTmFtZSAhPT0gbnVsbCA/ICdcXG4gICcgKyBmb3VuZFdpbGxVcGRhdGVOYW1lIDogJycpICtcbiAgICAgICAgJ1xcblxcblRoZSBhYm92ZSBsaWZlY3ljbGVzIHNob3VsZCBiZSByZW1vdmVkLiBMZWFybiBtb3JlIGFib3V0IHRoaXMgd2FybmluZyBoZXJlOlxcbicgK1xuICAgICAgICAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1hc3luYy1jb21wb25lbnQtbGlmZWN5Y2xlLWhvb2tzJ1xuICAgICk7XG4gIH1cblxuICAvLyBSZWFjdCA8PSAxNi4yIGRvZXMgbm90IHN1cHBvcnQgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcy5cbiAgLy8gQXMgYSB3b3JrYXJvdW5kLCB1c2UgY1dNIGFuZCBjV1JQIHRvIGludm9rZSB0aGUgbmV3IHN0YXRpYyBsaWZlY3ljbGUuXG4gIC8vIE5ld2VyIHZlcnNpb25zIG9mIFJlYWN0IHdpbGwgaWdub3JlIHRoZXNlIGxpZmVjeWNsZXMgaWYgZ0RTRlAgZXhpc3RzLlxuICBpZiAodHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBwcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gY29tcG9uZW50V2lsbE1vdW50O1xuICAgIHByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcztcbiAgfVxuXG4gIC8vIFJlYWN0IDw9IDE2LjIgZG9lcyBub3Qgc3VwcG9ydCBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZS5cbiAgLy8gQXMgYSB3b3JrYXJvdW5kLCB1c2UgY1dVIHRvIGludm9rZSB0aGUgbmV3IGxpZmVjeWNsZS5cbiAgLy8gTmV3ZXIgdmVyc2lvbnMgb2YgUmVhY3Qgd2lsbCBpZ25vcmUgdGhhdCBsaWZlY3ljbGUgaWYgZ1NCVSBleGlzdHMuXG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdDYW5ub3QgcG9seWZpbGwgZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoKSBmb3IgY29tcG9uZW50cyB0aGF0IGRvIG5vdCBkZWZpbmUgY29tcG9uZW50RGlkVXBkYXRlKCkgb24gdGhlIHByb3RvdHlwZSdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxVcGRhdGUgPSBjb21wb25lbnRXaWxsVXBkYXRlO1xuXG4gICAgdmFyIGNvbXBvbmVudERpZFVwZGF0ZSA9IHByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGU7XG5cbiAgICBwcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlUG9seWZpbGwoXG4gICAgICBwcmV2UHJvcHMsXG4gICAgICBwcmV2U3RhdGUsXG4gICAgICBtYXliZVNuYXBzaG90XG4gICAgKSB7XG4gICAgICAvLyAxNi4zKyB3aWxsIG5vdCBleGVjdXRlIG91ciB3aWxsLXVwZGF0ZSBtZXRob2Q7XG4gICAgICAvLyBJdCB3aWxsIHBhc3MgYSBzbmFwc2hvdCB2YWx1ZSB0byBkaWQtdXBkYXRlIHRob3VnaC5cbiAgICAgIC8vIE9sZGVyIHZlcnNpb25zIHdpbGwgcmVxdWlyZSBvdXIgcG9seWZpbGxlZCB3aWxsLXVwZGF0ZSB2YWx1ZS5cbiAgICAgIC8vIFdlIG5lZWQgdG8gaGFuZGxlIGJvdGggY2FzZXMsIGJ1dCBjYW4ndCBqdXN0IGNoZWNrIGZvciB0aGUgcHJlc2VuY2Ugb2YgXCJtYXliZVNuYXBzaG90XCIsXG4gICAgICAvLyBCZWNhdXNlIGZvciA8PSAxNS54IHZlcnNpb25zIHRoaXMgbWlnaHQgYmUgYSBcInByZXZDb250ZXh0XCIgb2JqZWN0LlxuICAgICAgLy8gV2UgYWxzbyBjYW4ndCBqdXN0IGNoZWNrIFwiX19yZWFjdEludGVybmFsU25hcHNob3RcIixcbiAgICAgIC8vIEJlY2F1c2UgZ2V0LXNuYXBzaG90IG1pZ2h0IHJldHVybiBhIGZhbHN5IHZhbHVlLlxuICAgICAgLy8gU28gY2hlY2sgZm9yIHRoZSBleHBsaWNpdCBfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWcgZmxhZyB0byBkZXRlcm1pbmUgYmVoYXZpb3IuXG4gICAgICB2YXIgc25hcHNob3QgPSB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZ1xuICAgICAgICA/IHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3RcbiAgICAgICAgOiBtYXliZVNuYXBzaG90O1xuXG4gICAgICBjb21wb25lbnREaWRVcGRhdGUuY2FsbCh0aGlzLCBwcmV2UHJvcHMsIHByZXZTdGF0ZSwgc25hcHNob3QpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gQ29tcG9uZW50O1xufVxuXG5leHBvcnQgeyBwb2x5ZmlsbCB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhheGlvcy5kZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBhcmd1bWVudHNbMF07XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICB9XG5cbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICBpZiAoY29uZmlnLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSBpZiAodGhpcy5kZWZhdWx0cy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gdGhpcy5kZWZhdWx0cy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcubWV0aG9kID0gJ2dldCc7XG4gIH1cblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuQXhpb3MucHJvdG90eXBlLmdldFVyaSA9IGZ1bmN0aW9uIGdldFVyaShjb25maWcpIHtcbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgcmV0dXJuIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKS5yZXBsYWNlKC9eXFw/LywgJycpO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1xuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG5cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIGVycm9yLmlzQXhpb3NFcnJvciA9IHRydWU7XG5cbiAgZXJyb3IudG9KU09OID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGVcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcbmltcG9ydCB7IHVzZUludGwgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCB7IGJyb3dzZXIgfSBmcm9tICd3ZWJleHRlbnNpb24tcG9seWZpbGwtdHMnO1xuXG5pbXBvcnQgeyBJbmZlclZhbHVlVHlwZXMgfSBmcm9tICdAaW50ZXJmYWNlcy9pbnRlcmZhY2VzJztcblxuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IGNvbW1hbmRzIGZyb20gJ0Bjb25zdGFudHMvY29tbWFuZHMnO1xuaW1wb3J0IHsgQlJBTkQsIFZFUlNJT04gfSBmcm9tICdAY29uc3RhbnRzL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBTdGF0ZSwgcGFyYW1zIH0gZnJvbSAnQGNvbnN0YW50cy9ub3RpZmljYXRpb25zJztcbmltcG9ydCB7IFN0b3JhZ2UgfSBmcm9tICdAY29uc3RhbnRzL3N0b3JhZ2UnO1xuXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgdXNlQmFja2dyb3VuZFJlcXVlc3RIYW5kbGVyIGZyb20gJ0Bob29rcy91c2VCYWNrZ3JvdW5kUmVxdWVzdEhhbmRsZXInO1xuaW1wb3J0IHVzZUZ1bm5lbCBmcm9tICdAaG9va3MvdXNlRnVubmVsJztcblxuaW1wb3J0IENvbnRleHRNZW51IGZyb20gJ0Bjb21wb25lbnRzL0NvbnRleHRNZW51L0NvbnRleHRNZW51JztcblxuaW1wb3J0IHsgZ2V0RnJvbVN0b3JhZ2UgfSBmcm9tICdAaGVscGVycy9zdG9yYWdlJztcbmltcG9ydCB7IGdldFZlcnNpb24gfSBmcm9tICdAaGVscGVycy91dGlscyc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9TZXR0aW5ncy5jc3MnO1xuXG5jb25zdCBlbSA9IGNzc21lbShzdHlsZXMpO1xuXG5jb25zdCBuYW1lID0gJ25vdGlmaWNhdGlvbic7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGluUG9wdXA/OiBib29sZWFuO1xuICBvbkxvZ291dD8oKTogdm9pZDtcbiAgb25QcmljZVNldHRpbmdzQ2xpY2s/KCk6IHZvaWQ7XG59XG5cbmNvbnN0IFNldHRpbmdzOiBSZWFjdC5GQzxQcm9wcz4gPSAoe1xuICBpblBvcHVwLFxuICBvbkxvZ291dCxcbiAgb25QcmljZVNldHRpbmdzQ2xpY2ssXG59KSA9PiB7XG4gIGNvbnN0IGludGwgPSB1c2VJbnRsKCk7XG5cbiAgdHlwZSBTdGF0ZVR5cGUgPSBJbmZlclZhbHVlVHlwZXM8dHlwZW9mIFN0YXRlPjtcblxuICBjb25zdCBbaXNDb250ZXh0TWVudVZpc2libGUsIHNldENvbnRleHRNZW51VmlzaWJsZVN0YXRlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZTxTdGF0ZVR5cGU+KFN0YXRlLk9OKTtcblxuICBjb25zdCB7IHNlbmRFdmVudCB9ID0gdXNlRnVubmVsKGluUG9wdXApO1xuXG4gIGNvbnN0IHtcbiAgICBlcnJvcixcbiAgICBoYW5kbGVCYWNrZ3JvdW5kUmVxdWVzdCxcbiAgICBpc0xvYWRpbmcsXG4gICAgc3RhdHVzLFxuICB9ID0gdXNlQmFja2dyb3VuZFJlcXVlc3RIYW5kbGVyKCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgbm90aWZpY2F0aW9uc1NldHRpbmdzID0gYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoXG4gICAgICAgIFN0b3JhZ2UuTk9USUZJQ0FUSU9OU19TRVRUSU5HU1xuICAgICAgKTtcblxuICAgICAgaWYgKG5vdGlmaWNhdGlvbnNTZXR0aW5ncykge1xuICAgICAgICBzZXRTdGF0ZShub3RpZmljYXRpb25zU2V0dGluZ3Muc3RhdGUpO1xuICAgICAgfVxuICAgIH0pKCk7XG4gIH0sIFtdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChzdGF0dXMgPT09ICdvaycpIHtcbiAgICAgIGlmIChvbkxvZ291dCkge1xuICAgICAgICBvbkxvZ291dCgpO1xuICAgICAgfVxuICAgICAgc2V0Q29udGV4dE1lbnVWaXNpYmxlU3RhdGUoZmFsc2UpO1xuICAgIH1cbiAgfSwgW29uTG9nb3V0LCBzdGF0dXNdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgfVxuICB9LCBbZXJyb3JdKTtcblxuICBjb25zdCBoYW5kbGVOb3RpZmljYXRpb25PcHRpb25DbGljayA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jICh7IHRhcmdldCB9KSA9PiB7XG4gICAgICBjb25zdCB7IGR1cmF0aW9uLCB0YXJnZXRTdGF0ZSB9ID0gdGFyZ2V0LmRhdGFzZXQ7XG4gICAgICBjb25zdCB1aWQgPSBhd2FpdCBnZXRGcm9tU3RvcmFnZShTdG9yYWdlLlVJRCk7XG4gICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCBnZXRGcm9tU3RvcmFnZShTdG9yYWdlLlVTRVJfSUQpO1xuICAgICAgYXdhaXQgc2VuZEV2ZW50KCdjbGljaycsIGAke25hbWV9XyR7dGFyZ2V0U3RhdGV9XyR7ZHVyYXRpb259YCwge1xuICAgICAgICBkYXRldGltZTogRGF0ZS5ub3coKSxcbiAgICAgICAgZXh0ZW5zaW9uX2JyYW5kOiBCUkFORCxcbiAgICAgICAgZXh0ZW5zaW9uX3ZlcnNpb246IGdldFZlcnNpb24oKSxcbiAgICAgICAgdWlkLFxuICAgICAgICB1cmw6IHdpbmRvdy5sb2NhdGlvbi5ocmVmLFxuICAgICAgICB1c2VyX2lkOiB1c2VySWQsXG4gICAgICAgIHZlcnNpb246IFZFUlNJT04sXG4gICAgICB9KTtcbiAgICAgIGF3YWl0IGJyb3dzZXIucnVudGltZS5zZW5kTWVzc2FnZSh7XG4gICAgICAgIGNvbW1hbmQ6IGNvbW1hbmRzLkNIQU5HRV9OT1RJRklDQVRJT05TX1NFVFRJTkdTLFxuICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgc3RhdGU6IHRhcmdldFN0YXRlLFxuICAgICAgfSk7XG5cbiAgICAgIHNldENvbnRleHRNZW51VmlzaWJsZVN0YXRlKGZhbHNlKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBzZXRTdGF0ZSgocHJldlN0YXRlOiBTdGF0ZVR5cGUpID0+XG4gICAgICAgICAgcHJldlN0YXRlID09PSBTdGF0ZS5PRkYgPyBTdGF0ZS5PTiA6IFN0YXRlLk9GRlxuICAgICAgICApO1xuICAgICAgfSwgMjUwKTtcbiAgICB9LFxuICAgIFtzZW5kRXZlbnRdXG4gICk7XG5cbiAgY29uc3QgaGFuZGxlTG9nb3V0QnV0dG9uQ2xpY2sgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdWlkID0gYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoU3RvcmFnZS5VSUQpO1xuICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IGdldEZyb21TdG9yYWdlKFN0b3JhZ2UuVVNFUl9JRCk7XG4gICAgYXdhaXQgc2VuZEV2ZW50KCdjbGljaycsICdsb2dvdXQnLCB7XG4gICAgICBkYXRldGltZTogRGF0ZS5ub3coKSxcbiAgICAgIGV4dGVuc2lvbl9icmFuZDogQlJBTkQsXG4gICAgICBleHRlbnNpb25fdmVyc2lvbjogZ2V0VmVyc2lvbigpLFxuICAgICAgdWlkLFxuICAgICAgdXJsOiB3aW5kb3cubG9jYXRpb24uaHJlZixcbiAgICAgIHVzZXJfaWQ6IHVzZXJJZCxcbiAgICAgIHZlcnNpb246IFZFUlNJT04sXG4gICAgfSk7XG4gICAgYXdhaXQgaGFuZGxlQmFja2dyb3VuZFJlcXVlc3QoeyBjb21tYW5kOiBjb21tYW5kcy5TSUdOX09VVCB9KTtcbiAgfSwgW2hhbmRsZUJhY2tncm91bmRSZXF1ZXN0LCBzZW5kRXZlbnRdKTtcblxuICBjb25zdCByZW5kZXJOb3RpZmljYXRpb25PcHRpb25zID0gKCk6IGFueSA9PlxuICAgIHBhcmFtc1tzdGF0ZV0ubWFwKCh7IGR1cmF0aW9uLCBsYWJlbCB9KSA9PiAoXG4gICAgICA8YnV0dG9uXG4gICAgICAgIGRhdGEtZHVyYXRpb249e2R1cmF0aW9ufVxuICAgICAgICBkYXRhLXRhcmdldC1zdGF0ZT17c3RhdGUgPT09IFN0YXRlLk9GRiA/IFN0YXRlLk9OIDogU3RhdGUuT0ZGfVxuICAgICAgICBrZXk9e2Ake3N0YXRlfS0ke2R1cmF0aW9ufWB9XG4gICAgICAgIG9uQ2xpY2s9e2hhbmRsZU5vdGlmaWNhdGlvbk9wdGlvbkNsaWNrfVxuICAgICAgPlxuICAgICAgICB7aW50bC5mb3JtYXRNZXNzYWdlKHsgaWQ6IGxhYmVsIH0pfVxuICAgICAgPC9idXR0b24+XG4gICAgKSk7XG5cbiAgcmV0dXJuIChcbiAgICA8Q29udGV4dE1lbnVcbiAgICAgIGNsYXNzTmFtZT17ZW0oJ3NldHRpbmdzJykoKX1cbiAgICAgIGlzVmlzaWJsZT17aXNDb250ZXh0TWVudVZpc2libGV9XG4gICAgICBvbkNoYW5nZT17c2V0Q29udGV4dE1lbnVWaXNpYmxlU3RhdGV9XG4gICAgICB0aXRsZT17XG4gICAgICAgIHN0YXRlID09PSBTdGF0ZS5PRkZcbiAgICAgICAgICA/IGludGwuZm9ybWF0TWVzc2FnZSh7IGlkOiAnc2V0dGluZ3Mubm90aWZpY2F0aW9uc0VuYWJsZScgfSlcbiAgICAgICAgICA6IGludGwuZm9ybWF0TWVzc2FnZSh7IGlkOiAnc2V0dGluZ3Mubm90aWZpY2F0aW9uc0Rpc2FibGUnIH0pXG4gICAgICB9XG4gICAgPlxuICAgICAge3JlbmRlck5vdGlmaWNhdGlvbk9wdGlvbnMoKX1cbiAgICAgIDxzcGFuIGNsYXNzTmFtZT17ZW0oJ3NlcGFyYXRvcicpKCl9IC8+XG4gICAgICA8YnV0dG9uIG9uQ2xpY2s9e29uUHJpY2VTZXR0aW5nc0NsaWNrfT5cbiAgICAgICAge2ludGwuZm9ybWF0TWVzc2FnZSh7IGlkOiAnc2V0dGluZ3MucHJpY2VTZXR0aW5ncycgfSl9XG4gICAgICA8L2J1dHRvbj5cbiAgICAgIDxidXR0b24gZGlzYWJsZWQ9e2lzTG9hZGluZ30gb25DbGljaz17aGFuZGxlTG9nb3V0QnV0dG9uQ2xpY2t9PlxuICAgICAgICB7aW50bC5mb3JtYXRNZXNzYWdlKHsgaWQ6ICdzZXR0aW5ncy5sb2dPdXQnIH0pfVxuICAgICAgPC9idXR0b24+XG4gICAgPC9Db250ZXh0TWVudT5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNldHRpbmdzO1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcInNldHRpbmdzXCI6XCJTZXR0aW5nc19fc2V0dGluZ3MtLTFqZFNnXCIsXCJzZXBhcmF0b3JcIjpcIlNldHRpbmdzX19zZXBhcmF0b3ItLTFLdVdoXCJ9OyIsInZhciBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFID0gNjAwMDA7XG5cbmZ1bmN0aW9uIGdldERhdGVNaWxsaXNlY29uZHNQYXJ0KGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpICUgTUlMTElTRUNPTkRTX0lOX01JTlVURTtcbn1cbi8qKlxuICogR29vZ2xlIENocm9tZSBhcyBvZiA2Ny4wLjMzOTYuODcgaW50cm9kdWNlZCB0aW1lem9uZXMgd2l0aCBvZmZzZXQgdGhhdCBpbmNsdWRlcyBzZWNvbmRzLlxuICogVGhleSB1c3VhbGx5IGFwcGVhciBmb3IgZGF0ZXMgdGhhdCBkZW5vdGUgdGltZSBiZWZvcmUgdGhlIHRpbWV6b25lcyB3ZXJlIGludHJvZHVjZWRcbiAqIChlLmcuIGZvciAnRXVyb3BlL1ByYWd1ZScgdGltZXpvbmUgdGhlIG9mZnNldCBpcyBHTVQrMDA6NTc6NDQgYmVmb3JlIDEgT2N0b2JlciAxODkxXG4gKiBhbmQgR01UKzAxOjAwOjAwIGFmdGVyIHRoYXQgZGF0ZSlcbiAqXG4gKiBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgdGhlIG9mZnNldCBpbiBtaW51dGVzIGFuZCB3b3VsZCByZXR1cm4gNTcgZm9yIHRoZSBleGFtcGxlIGFib3ZlLFxuICogd2hpY2ggd291bGQgbGVhZCB0byBpbmNvcnJlY3QgY2FsY3VsYXRpb25zLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdGltZXpvbmUgb2Zmc2V0IGluIG1pbGxpc2Vjb25kcyB0aGF0IHRha2VzIHNlY29uZHMgaW4gYWNjb3VudC5cbiAqL1xuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoZGlydHlEYXRlKSB7XG4gIHZhciBkYXRlID0gbmV3IERhdGUoZGlydHlEYXRlLmdldFRpbWUoKSk7XG4gIHZhciBiYXNlVGltZXpvbmVPZmZzZXQgPSBNYXRoLmNlaWwoZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpKTtcbiAgZGF0ZS5zZXRTZWNvbmRzKDAsIDApO1xuICB2YXIgaGFzTmVnYXRpdmVVVENPZmZzZXQgPSBiYXNlVGltZXpvbmVPZmZzZXQgPiAwO1xuICB2YXIgbWlsbGlzZWNvbmRzUGFydE9mVGltZXpvbmVPZmZzZXQgPSBoYXNOZWdhdGl2ZVVUQ09mZnNldCA/IChNSUxMSVNFQ09ORFNfSU5fTUlOVVRFICsgZ2V0RGF0ZU1pbGxpc2Vjb25kc1BhcnQoZGF0ZSkpICUgTUlMTElTRUNPTkRTX0lOX01JTlVURSA6IGdldERhdGVNaWxsaXNlY29uZHNQYXJ0KGRhdGUpO1xuICByZXR1cm4gYmFzZVRpbWV6b25lT2Zmc2V0ICogTUlMTElTRUNPTkRTX0lOX01JTlVURSArIG1pbGxpc2Vjb25kc1BhcnRPZlRpbWV6b25lT2Zmc2V0O1xufSIsImltcG9ydCB7IE1lc3NhZ2VzIH0gZnJvbSAnQGludGVyZmFjZXMvaW50ZXJmYWNlcyc7XG5cbmltcG9ydCB7IExhbmd1YWdlIH0gZnJvbSAnQGNvbnN0YW50cy9sYW5ndWFnZXMnO1xuXG5jb25zdCBtZXNzYWdlczogTWVzc2FnZXMgPSB7XG4gIFtMYW5ndWFnZS5FTl06IHtcbiAgICBsYW5nOiBMYW5ndWFnZS5FTixcbiAgICBtZXNzYWdlczoge1xuICAgICAgJ2F1dGguc2VjdXJpdHlQb2xpY3knOlxuICAgICAgICAnQnkgdXNpbmcgdGhpcyBleHRlbnNpb24sIHlvdSBhZ3JlZSB0byB0aGUgPGEgaHJlZj1cIntwb2xpY3lIcmVmfVwiIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIiB0YXJnZXQ9XCJfYmxhbmtcIj5zZWN1cml0eSBwb2xpY3k8L2E+LicsXG4gICAgICAnYXV0aC5yZW1lbWJlclBhc3N3b3JkJzogJ0kgcmVtZW1iZXIgcGFzc3dvcmQnLFxuICAgICAgJ2F1dGgucmVtaW5kUGFzc3dvcmQnOiAnSWYgeW91IGhhdmUgZm9yZ290dGVuIHlvdXIgcGFzc3dvcmQsIGNsaWNrIGhlcmUnLFxuICAgICAgJ2F1dGgucmVtaW5kUGFzc3dvcmRTdWNjZXNzTWVzc2FnZSc6XG4gICAgICAgICdXZSBoYXZlIHNlbnQgeW91IGEgcGFzc3dvcmQgcmVjb3ZlcnkgbGluayBpbiB0aGUgbWFpbC4nLFxuICAgICAgJ2F1dGgucmVzZXRQYXNzd29yZCc6ICdSZXNldCBwYXNzd29yZCcsXG4gICAgICAnYXV0aC5yZXNldCc6ICdSZXNldCBwYXNzd29yZCcsXG4gICAgICAnYXV0aC5sb2dpbkxhdGVyJzogJ0xvZyBpbiBsYXRlcicsXG4gICAgICAnYXV0aC5lcnJvckJ1c3knOiAnU2VydmVyIGVycm9yLiBSZWxvYWQgdGhlIHBhZ2UgYW5kIHRyeSBvbmNlIGFnYWluLicsXG4gICAgICAnYXV0aC5lcnJvckluY29ycmVjdFBhc3N3b3JkT3JVc2VybmFtZSc6XG4gICAgICAgICdXcm9uZyBwYXNzd29yZCBvciBlLW1haWwgYWRkcmVzcy4nLFxuICAgICAgJ2F1dGguZXJyb3JQcm9maWxlTm90Rm91bmQnOlxuICAgICAgICAnVGhlIGUtbWFpbCBhZGRyZXNzIHRoYXQgeW91IGVudGVyZWQgd2FzIG5vdCBmb3VuZC4nLFxuICAgICAgJ2F1dGguZXJyb3JUb29NYW55QXR0ZW1wdHMnOiAnVG9vIG1hbnkgYXR0ZW1wdHMuIFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuJyxcbiAgICAgICdhdXRoLmVycm9yQXV0aERhdGEnOiAnQ2FuIG5vdCB2ZXJpZnkgdGhlIGF1dGhvcml6YXRpb24gZGF0YS4nLFxuICAgICAgJ2F1dGguZXJyb3JBdXRoQ29va2llJzpcbiAgICAgICAgJ1BsZWFzZSBsb2cgaW4gdG8gaHR0cHM6Ly93d3cucmF0ZWhhd2suY29tIGZpcnN0LicsXG4gICAgICAnYXV0aC5hdXRoT3InOiAnTG9nIGluIG9yICcsXG4gICAgICAnYXV0aC5zaWduVXAnOiAnc2lnbiB1cCcsXG4gICAgICAnYXV0aC5hdXRoUmVhc29uJzogJyB0byBlYXJuIG1vcmUnLFxuICAgIH0sXG4gIH0sXG4gIFtMYW5ndWFnZS5SVV06IHtcbiAgICBsYW5nOiBMYW5ndWFnZS5SVSxcbiAgICBtZXNzYWdlczoge1xuICAgICAgJ2F1dGguc2VjdXJpdHlQb2xpY3knOlxuICAgICAgICAn0JjRgdC/0L7Qu9GM0LfRg9GPINC00LDQvdC90L7QtSDRgNCw0YHRiNC40YDQtdC90LjQtSwg0LLRiyDRgdC+0LPQu9Cw0YjQsNC10YLQtdGB0Ywg0YEgPGEgaHJlZj1cIntwb2xpY3lIcmVmfVwiIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIiB0YXJnZXQ9XCJfYmxhbmtcIj7Qv9C+0LvQuNGC0LjQutC+0Lkg0LrQvtC90YTQuNC00LXQvdGG0LjQsNC70YzQvdC+0YHRgtC4PC9hPi4nLFxuICAgICAgJ2F1dGgucmVtZW1iZXJQYXNzd29yZCc6ICfQryDQv9C+0LzQvdGOINC/0LDRgNC+0LvRjCcsXG4gICAgICAnYXV0aC5yZW1pbmRQYXNzd29yZCc6ICfQldGB0LvQuCDQstGLINC30LDQsdGL0LvQuCDQv9Cw0YDQvtC70YwsINC90LDQttC80LjRgtC1INGB0Y7QtNCwJyxcbiAgICAgICdhdXRoLnJlbWluZFBhc3N3b3JkU3VjY2Vzc01lc3NhZ2UnOlxuICAgICAgICAn0JzRiyDQvtGC0L/RgNCw0LLQuNC70Lgg0LLQsNC8INC90LAg0L/QvtGH0YLRgyDRgdGB0YvQu9C60YMg0LTQu9GPINCy0L7RgdGB0YLQsNC90L7QstC70LXQvdC40Y8g0L/QsNGA0L7Qu9GPLicsXG4gICAgICAnYXV0aC5yZXNldFBhc3N3b3JkJzogJ9CS0L7RgdGB0YLQsNC90L7QstC40YLRjCcsXG4gICAgICAnYXV0aC5yZXNldCc6ICfQktC+0YHRgdGC0LDQvdC+0LLQu9C10L3QuNC1INC/0LDRgNC+0LvRjycsXG4gICAgICAnYXV0aC5sb2dpbkxhdGVyJzogJ9CQ0LLRgtC+0YDQuNC30L7QstCw0YLRjNGB0Y8g0L/QvtC30LbQtScsXG4gICAgICAnYXV0aC5lcnJvckJ1c3knOiAn0J7RiNC40LHQutCwINGB0LXRgNCy0LXRgNCwLiDQn9C+0L/RgNC+0LHRg9C50YLQtSDQtdGJ0LUg0YDQsNC3INC/0L7Qt9C20LUuJyxcbiAgICAgICdhdXRoLmVycm9ySW5jb3JyZWN0UGFzc3dvcmRPclVzZXJuYW1lJzpcbiAgICAgICAgJ9Cj0LrQsNC30LDQvSDQvdC10L/RgNCw0LLQuNC70YzQvdGL0Lkg0L/QsNGA0L7Qu9GMINC40LvQuCDRjdC70LXQutGC0YDQvtC90L3Ri9C5INCw0LTRgNC10YEuJyxcbiAgICAgICdhdXRoLmVycm9yUHJvZmlsZU5vdEZvdW5kJzpcbiAgICAgICAgJ9Cc0Ysg0L3QtSDQvdCw0YjQu9C4INCy0LLQtdC00LXQvdC90YvQuSDQstCw0LzQuCDQsNC00YDQtdGBINGN0LvQtdC60YLRgNC+0L3QvdC+0Lkg0L/QvtGH0YLRiy4nLFxuICAgICAgJ2F1dGguZXJyb3JUb29NYW55QXR0ZW1wdHMnOlxuICAgICAgICAn0KHQu9C40YjQutC+0Lwg0LzQvdC+0LPQviDQv9C+0L/Ri9GC0L7Qui4g0J/QvtC/0YDQvtCx0YPQudGC0LUg0LXRidC1INGA0LDQtyDQv9C+0LfQttC1LicsXG4gICAgICAnYXV0aC5lcnJvckF1dGhEYXRhJzogJ9Cd0LUg0LzQvtCz0YMg0L/RgNC+0LLQtdGA0LjRgtGMINCw0LLRgtC+0YDQuNC30LDRhtC40L7QvdC90YvQtSDQtNCw0L3QvdGL0LUuJyxcbiAgICAgICdhdXRoLmVycm9yQXV0aENvb2tpZSc6XG4gICAgICAgICfQn9C+0LbQsNC70YPQudGB0YLQsCwg0YHQvdCw0YfQsNC70LAg0LDQstGC0L7RgNC40LfRg9C50YLQtdGB0Ywg0L3QsCBodHRwczovL3d3dy5yYXRlaGF3ay5jb20uJyxcbiAgICAgICdhdXRoLmF1dGhPcic6ICfQkNCy0YLQvtGA0LjQt9GD0LnRgtC10YHRjCDQuNC70Lg8YnI+JyxcbiAgICAgICdhdXRoLnNpZ25VcCc6ICfQt9Cw0YDQtdCz0LjRgdGC0YDQuNGA0YPQudGC0LXRgdGMJyxcbiAgICAgICdhdXRoLmF1dGhSZWFzb24nOiAnLCDRh9GC0L7QsdGLINC30LDRgNCw0LHQvtGC0LDRgtGMINCx0L7Qu9GM0YjQtScsXG4gICAgfSxcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1lc3NhZ2VzO1xuIiwiaW1wb3J0IHsgTWVzc2FnZXMgfSBmcm9tICdAaW50ZXJmYWNlcy9pbnRlcmZhY2VzJztcblxuaW1wb3J0IHsgTGFuZ3VhZ2UgfSBmcm9tICdAY29uc3RhbnRzL2xhbmd1YWdlcyc7XG5cbmNvbnN0IG1lc3NhZ2VzOiBNZXNzYWdlcyA9IHtcbiAgW0xhbmd1YWdlLkVOXToge1xuICAgIGxhbmc6IExhbmd1YWdlLkVOLFxuICAgIG1lc3NhZ2VzOiB7XG4gICAgICAnc2lnbmluLmVtYWlsJzogJ0VtYWlsJyxcbiAgICAgICdzaWduaW4ucGFzc3dvcmQnOiAnUGFzc3dvcmQnLFxuICAgICAgJ3NpZ25pbi5zdWJtaXRCdXR0b24nOiAnRW50ZXInLFxuICAgIH0sXG4gIH0sXG4gIFtMYW5ndWFnZS5SVV06IHtcbiAgICBsYW5nOiBMYW5ndWFnZS5SVSxcbiAgICBtZXNzYWdlczoge1xuICAgICAgJ3NpZ25pbi5lbWFpbCc6ICdFbWFpbCcsXG4gICAgICAnc2lnbmluLnBhc3N3b3JkJzogJ9Cf0LDRgNC+0LvRjCcsXG4gICAgICAnc2lnbmluLnN1Ym1pdEJ1dHRvbic6ICfQktC+0LnRgtC4JyxcbiAgICB9LFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgbWVzc2FnZXM7XG4iLCJpbXBvcnQgeyBnZXROYW1lZEZvcm1hdCwgZmlsdGVyUHJvcHMsIGNyZWF0ZUVycm9yIH0gZnJvbSAnLi4vdXRpbHMnO1xuY29uc3QgTlVNQkVSX0ZPUk1BVF9PUFRJT05TID0gW1xuICAgICdsb2NhbGVNYXRjaGVyJyxcbiAgICAnc3R5bGUnLFxuICAgICdjdXJyZW5jeScsXG4gICAgJ2N1cnJlbmN5RGlzcGxheScsXG4gICAgJ3VuaXQnLFxuICAgICd1bml0RGlzcGxheScsXG4gICAgJ3VzZUdyb3VwaW5nJyxcbiAgICAnbWluaW11bUludGVnZXJEaWdpdHMnLFxuICAgICdtaW5pbXVtRnJhY3Rpb25EaWdpdHMnLFxuICAgICdtYXhpbXVtRnJhY3Rpb25EaWdpdHMnLFxuICAgICdtaW5pbXVtU2lnbmlmaWNhbnREaWdpdHMnLFxuICAgICdtYXhpbXVtU2lnbmlmaWNhbnREaWdpdHMnLFxuICAgIC8vIFVuaWZpZWQgTnVtYmVyRm9ybWF0IChTdGFnZSAzIGFzIG9mIDEwLzIyLzE5KVxuICAgICdjb21wYWN0RGlzcGxheScsXG4gICAgJ2N1cnJlbmN5RGlzcGxheScsXG4gICAgJ2N1cnJlbmN5U2lnbicsXG4gICAgJ25vdGF0aW9uJyxcbiAgICAnc2lnbkRpc3BsYXknLFxuICAgICd1bml0JyxcbiAgICAndW5pdERpc3BsYXknLFxuXTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRGb3JtYXR0ZXIoeyBsb2NhbGUsIGZvcm1hdHMsIG9uRXJyb3IsIH0sIGdldE51bWJlckZvcm1hdCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgeyBmb3JtYXQgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgZGVmYXVsdHMgPSAoKGZvcm1hdCAmJlxuICAgICAgICBnZXROYW1lZEZvcm1hdChmb3JtYXRzLCAnbnVtYmVyJywgZm9ybWF0LCBvbkVycm9yKSkgfHxcbiAgICAgICAge30pO1xuICAgIGNvbnN0IGZpbHRlcmVkT3B0aW9ucyA9IGZpbHRlclByb3BzKG9wdGlvbnMsIE5VTUJFUl9GT1JNQVRfT1BUSU9OUywgZGVmYXVsdHMpO1xuICAgIHJldHVybiBnZXROdW1iZXJGb3JtYXQobG9jYWxlLCBmaWx0ZXJlZE9wdGlvbnMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdE51bWJlcihjb25maWcsIGdldE51bWJlckZvcm1hdCwgdmFsdWUsIG9wdGlvbnMgPSB7fSkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBnZXRGb3JtYXR0ZXIoY29uZmlnLCBnZXROdW1iZXJGb3JtYXQsIG9wdGlvbnMpLmZvcm1hdCh2YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbmZpZy5vbkVycm9yKGNyZWF0ZUVycm9yKCdFcnJvciBmb3JtYXR0aW5nIG51bWJlci4nLCBlKSk7XG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdE51bWJlclRvUGFydHMoY29uZmlnLCBnZXROdW1iZXJGb3JtYXQsIHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gZ2V0Rm9ybWF0dGVyKGNvbmZpZywgZ2V0TnVtYmVyRm9ybWF0LCBvcHRpb25zKS5mb3JtYXRUb1BhcnRzKHZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uZmlnLm9uRXJyb3IoY3JlYXRlRXJyb3IoJ0Vycm9yIGZvcm1hdHRpbmcgbnVtYmVyLicsIGUpKTtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xufVxuIiwiaW1wb3J0IHsgZ2V0TmFtZWRGb3JtYXQsIGZpbHRlclByb3BzLCBjcmVhdGVFcnJvciB9IGZyb20gJy4uL3V0aWxzJztcbmNvbnN0IFJFTEFUSVZFX1RJTUVfRk9STUFUX09QVElPTlMgPSBbXG4gICAgJ251bWVyaWMnLFxuICAgICdzdHlsZScsXG5dO1xuZnVuY3Rpb24gZ2V0Rm9ybWF0dGVyKHsgbG9jYWxlLCBmb3JtYXRzLCBvbkVycm9yLCB9LCBnZXRSZWxhdGl2ZVRpbWVGb3JtYXQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgZm9ybWF0IH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGRlZmF1bHRzID0gKCEhZm9ybWF0ICYmIGdldE5hbWVkRm9ybWF0KGZvcm1hdHMsICdyZWxhdGl2ZScsIGZvcm1hdCwgb25FcnJvcikpIHx8IHt9O1xuICAgIGNvbnN0IGZpbHRlcmVkT3B0aW9ucyA9IGZpbHRlclByb3BzKG9wdGlvbnMsIFJFTEFUSVZFX1RJTUVfRk9STUFUX09QVElPTlMsIGRlZmF1bHRzKTtcbiAgICByZXR1cm4gZ2V0UmVsYXRpdmVUaW1lRm9ybWF0KGxvY2FsZSwgZmlsdGVyZWRPcHRpb25zKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZVRpbWUoY29uZmlnLCBnZXRSZWxhdGl2ZVRpbWVGb3JtYXQsIHZhbHVlLCB1bml0LCBvcHRpb25zID0ge30pIHtcbiAgICBpZiAoIXVuaXQpIHtcbiAgICAgICAgdW5pdCA9ICdzZWNvbmQnO1xuICAgIH1cbiAgICBjb25zdCBSZWxhdGl2ZVRpbWVGb3JtYXQgPSBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdDtcbiAgICBpZiAoIVJlbGF0aXZlVGltZUZvcm1hdCkge1xuICAgICAgICBjb25maWcub25FcnJvcihjcmVhdGVFcnJvcihgSW50bC5SZWxhdGl2ZVRpbWVGb3JtYXQgaXMgbm90IGF2YWlsYWJsZSBpbiB0aGlzIGVudmlyb25tZW50LlxuVHJ5IHBvbHlmaWxsaW5nIGl0IHVzaW5nIFwiQGZvcm1hdGpzL2ludGwtcmVsYXRpdmV0aW1lZm9ybWF0XCJcbmApKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGdldEZvcm1hdHRlcihjb25maWcsIGdldFJlbGF0aXZlVGltZUZvcm1hdCwgb3B0aW9ucykuZm9ybWF0KHZhbHVlLCB1bml0KTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uZmlnLm9uRXJyb3IoY3JlYXRlRXJyb3IoJ0Vycm9yIGZvcm1hdHRpbmcgcmVsYXRpdmUgdGltZS4nLCBlKSk7XG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xufVxuIiwiLypcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuXG4gKiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG5pbXBvcnQgeyBjcmVhdGVFcnJvciwgZmlsdGVyUHJvcHMsIGdldE5hbWVkRm9ybWF0IH0gZnJvbSAnLi4vdXRpbHMnO1xuY29uc3QgREFURV9USU1FX0ZPUk1BVF9PUFRJT05TID0gW1xuICAgICdsb2NhbGVNYXRjaGVyJyxcbiAgICAnZm9ybWF0TWF0Y2hlcicsXG4gICAgJ3RpbWVab25lJyxcbiAgICAnaG91cjEyJyxcbiAgICAnd2Vla2RheScsXG4gICAgJ2VyYScsXG4gICAgJ3llYXInLFxuICAgICdtb250aCcsXG4gICAgJ2RheScsXG4gICAgJ2hvdXInLFxuICAgICdtaW51dGUnLFxuICAgICdzZWNvbmQnLFxuICAgICd0aW1lWm9uZU5hbWUnLFxuXTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRGb3JtYXR0ZXIoeyBsb2NhbGUsIGZvcm1hdHMsIG9uRXJyb3IsIHRpbWVab25lLCB9LCB0eXBlLCBnZXREYXRlVGltZUZvcm1hdCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgeyBmb3JtYXQgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgZGVmYXVsdHMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sICh0aW1lWm9uZSAmJiB7IHRpbWVab25lIH0pKSwgKGZvcm1hdCAmJiBnZXROYW1lZEZvcm1hdChmb3JtYXRzLCB0eXBlLCBmb3JtYXQsIG9uRXJyb3IpKSk7XG4gICAgbGV0IGZpbHRlcmVkT3B0aW9ucyA9IGZpbHRlclByb3BzKG9wdGlvbnMsIERBVEVfVElNRV9GT1JNQVRfT1BUSU9OUywgZGVmYXVsdHMpO1xuICAgIGlmICh0eXBlID09PSAndGltZScgJiZcbiAgICAgICAgIWZpbHRlcmVkT3B0aW9ucy5ob3VyICYmXG4gICAgICAgICFmaWx0ZXJlZE9wdGlvbnMubWludXRlICYmXG4gICAgICAgICFmaWx0ZXJlZE9wdGlvbnMuc2Vjb25kKSB7XG4gICAgICAgIC8vIEFkZCBkZWZhdWx0IGZvcm1hdHRpbmcgb3B0aW9ucyBpZiBob3VyLCBtaW51dGUsIG9yIHNlY29uZCBpc24ndCBkZWZpbmVkLlxuICAgICAgICBmaWx0ZXJlZE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGZpbHRlcmVkT3B0aW9ucyksIHsgaG91cjogJ251bWVyaWMnLCBtaW51dGU6ICdudW1lcmljJyB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGdldERhdGVUaW1lRm9ybWF0KGxvY2FsZSwgZmlsdGVyZWRPcHRpb25zKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXREYXRlKGNvbmZpZywgZ2V0RGF0ZVRpbWVGb3JtYXQsIHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBkYXRlID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IG5ldyBEYXRlKHZhbHVlIHx8IDApIDogdmFsdWU7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGdldEZvcm1hdHRlcihjb25maWcsICdkYXRlJywgZ2V0RGF0ZVRpbWVGb3JtYXQsIG9wdGlvbnMpLmZvcm1hdChkYXRlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uZmlnLm9uRXJyb3IoY3JlYXRlRXJyb3IoJ0Vycm9yIGZvcm1hdHRpbmcgZGF0ZS4nLCBlKSk7XG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcoZGF0ZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0VGltZShjb25maWcsIGdldERhdGVUaW1lRm9ybWF0LCB2YWx1ZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgZGF0ZSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBuZXcgRGF0ZSh2YWx1ZSB8fCAwKSA6IHZhbHVlO1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBnZXRGb3JtYXR0ZXIoY29uZmlnLCAndGltZScsIGdldERhdGVUaW1lRm9ybWF0LCBvcHRpb25zKS5mb3JtYXQoZGF0ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbmZpZy5vbkVycm9yKGNyZWF0ZUVycm9yKCdFcnJvciBmb3JtYXR0aW5nIHRpbWUuJywgZSkpO1xuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nKGRhdGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdERhdGVUb1BhcnRzKGNvbmZpZywgZ2V0RGF0ZVRpbWVGb3JtYXQsIHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBkYXRlID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IG5ldyBEYXRlKHZhbHVlIHx8IDApIDogdmFsdWU7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGdldEZvcm1hdHRlcihjb25maWcsICdkYXRlJywgZ2V0RGF0ZVRpbWVGb3JtYXQsIG9wdGlvbnMpLmZvcm1hdFRvUGFydHMoZGF0ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbmZpZy5vbkVycm9yKGNyZWF0ZUVycm9yKCdFcnJvciBmb3JtYXR0aW5nIGRhdGUuJywgZSkpO1xuICAgIH1cbiAgICByZXR1cm4gW107XG59XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0VGltZVRvUGFydHMoY29uZmlnLCBnZXREYXRlVGltZUZvcm1hdCwgdmFsdWUsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGRhdGUgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gbmV3IERhdGUodmFsdWUgfHwgMCkgOiB2YWx1ZTtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gZ2V0Rm9ybWF0dGVyKGNvbmZpZywgJ3RpbWUnLCBnZXREYXRlVGltZUZvcm1hdCwgb3B0aW9ucykuZm9ybWF0VG9QYXJ0cyhkYXRlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uZmlnLm9uRXJyb3IoY3JlYXRlRXJyb3IoJ0Vycm9yIGZvcm1hdHRpbmcgdGltZS4nLCBlKSk7XG4gICAgfVxuICAgIHJldHVybiBbXTtcbn1cbiIsImltcG9ydCB7IGZpbHRlclByb3BzLCBjcmVhdGVFcnJvciB9IGZyb20gJy4uL3V0aWxzJztcbmNvbnN0IFBMVVJBTF9GT1JNQVRfT1BUSU9OUyA9IFtcbiAgICAnbG9jYWxlTWF0Y2hlcicsXG4gICAgJ3R5cGUnLFxuXTtcbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRQbHVyYWwoeyBsb2NhbGUsIG9uRXJyb3IgfSwgZ2V0UGx1cmFsUnVsZXMsIHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgICBpZiAoIUludGwuUGx1cmFsUnVsZXMpIHtcbiAgICAgICAgb25FcnJvcihjcmVhdGVFcnJvcihgSW50bC5QbHVyYWxSdWxlcyBpcyBub3QgYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnQuXG5UcnkgcG9seWZpbGxpbmcgaXQgdXNpbmcgXCJAZm9ybWF0anMvaW50bC1wbHVyYWxydWxlc1wiXG5gKSk7XG4gICAgfVxuICAgIGNvbnN0IGZpbHRlcmVkT3B0aW9ucyA9IGZpbHRlclByb3BzKG9wdGlvbnMsIFBMVVJBTF9GT1JNQVRfT1BUSU9OUyk7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGdldFBsdXJhbFJ1bGVzKGxvY2FsZSwgZmlsdGVyZWRPcHRpb25zKS5zZWxlY3QodmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBvbkVycm9yKGNyZWF0ZUVycm9yKCdFcnJvciBmb3JtYXR0aW5nIHBsdXJhbC4nLCBlKSk7XG4gICAgfVxuICAgIHJldHVybiAnb3RoZXInO1xufVxuIiwiLypcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuXG4gKiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICdAZm9ybWF0anMvaW50bC11dGlscyc7XG5pbXBvcnQgeyBjcmVhdGVFcnJvciwgZXNjYXBlIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IEludGxNZXNzYWdlRm9ybWF0IGZyb20gJ2ludGwtbWVzc2FnZWZvcm1hdCc7XG5mdW5jdGlvbiBzZXRUaW1lWm9uZUluT3B0aW9ucyhvcHRzLCB0aW1lWm9uZSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvcHRzKS5yZWR1Y2UoKGFsbCwgaykgPT4ge1xuICAgICAgICBhbGxba10gPSBPYmplY3QuYXNzaWduKHsgdGltZVpvbmUgfSwgb3B0c1trXSk7XG4gICAgICAgIHJldHVybiBhbGw7XG4gICAgfSwge30pO1xufVxuZnVuY3Rpb24gZGVlcE1lcmdlT3B0aW9ucyhvcHRzMSwgb3B0czIpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRzMSksIG9wdHMyKSk7XG4gICAgcmV0dXJuIGtleXMucmVkdWNlKChhbGwsIGspID0+IHtcbiAgICAgICAgYWxsW2tdID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCAob3B0czFba10gfHwge30pKSwgKG9wdHMyW2tdIHx8IHt9KSk7XG4gICAgICAgIHJldHVybiBhbGw7XG4gICAgfSwge30pO1xufVxuZnVuY3Rpb24gZGVlcE1lcmdlRm9ybWF0c0FuZFNldFRpbWVab25lKGYxLCB0aW1lWm9uZSkge1xuICAgIGlmICghdGltZVpvbmUpIHtcbiAgICAgICAgcmV0dXJuIGYxO1xuICAgIH1cbiAgICBjb25zdCBtZkZvcm1hdHMgPSBJbnRsTWVzc2FnZUZvcm1hdC5mb3JtYXRzO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbWZGb3JtYXRzKSwgZjEpLCB7IGRhdGU6IGRlZXBNZXJnZU9wdGlvbnMoc2V0VGltZVpvbmVJbk9wdGlvbnMobWZGb3JtYXRzLmRhdGUsIHRpbWVab25lKSwgc2V0VGltZVpvbmVJbk9wdGlvbnMoZjEuZGF0ZSB8fCB7fSwgdGltZVpvbmUpKSwgdGltZTogZGVlcE1lcmdlT3B0aW9ucyhzZXRUaW1lWm9uZUluT3B0aW9ucyhtZkZvcm1hdHMudGltZSwgdGltZVpvbmUpLCBzZXRUaW1lWm9uZUluT3B0aW9ucyhmMS50aW1lIHx8IHt9LCB0aW1lWm9uZSkpIH0pO1xufVxuZXhwb3J0IGNvbnN0IHByZXBhcmVJbnRsTWVzc2FnZUZvcm1hdEh0bWxPdXRwdXQgPSAoY2h1bmtzKSA9PiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAuLi5jaHVua3MpO1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2UoeyBsb2NhbGUsIGZvcm1hdHMsIG1lc3NhZ2VzLCBkZWZhdWx0TG9jYWxlLCBkZWZhdWx0Rm9ybWF0cywgb25FcnJvciwgdGltZVpvbmUsIH0sIHN0YXRlLCBtZXNzYWdlRGVzY3JpcHRvciA9IHsgaWQ6ICcnIH0sIHZhbHVlcyA9IHt9KSB7XG4gICAgY29uc3QgeyBpZCwgZGVmYXVsdE1lc3NhZ2UgfSA9IG1lc3NhZ2VEZXNjcmlwdG9yO1xuICAgIC8vIGBpZGAgaXMgYSByZXF1aXJlZCBmaWVsZCBvZiBhIE1lc3NhZ2UgRGVzY3JpcHRvci5cbiAgICBpbnZhcmlhbnQoISFpZCwgJ1tSZWFjdCBJbnRsXSBBbiBgaWRgIG11c3QgYmUgcHJvdmlkZWQgdG8gZm9ybWF0IGEgbWVzc2FnZS4nKTtcbiAgICBjb25zdCBtZXNzYWdlID0gbWVzc2FnZXMgJiYgbWVzc2FnZXNbU3RyaW5nKGlkKV07XG4gICAgZm9ybWF0cyA9IGRlZXBNZXJnZUZvcm1hdHNBbmRTZXRUaW1lWm9uZShmb3JtYXRzLCB0aW1lWm9uZSk7XG4gICAgZGVmYXVsdEZvcm1hdHMgPSBkZWVwTWVyZ2VGb3JtYXRzQW5kU2V0VGltZVpvbmUoZGVmYXVsdEZvcm1hdHMsIHRpbWVab25lKTtcbiAgICBsZXQgZm9ybWF0dGVkTWVzc2FnZVBhcnRzID0gW107XG4gICAgaWYgKG1lc3NhZ2UpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlciA9IHN0YXRlLmdldE1lc3NhZ2VGb3JtYXQobWVzc2FnZSwgbG9jYWxlLCBmb3JtYXRzLCB7XG4gICAgICAgICAgICAgICAgZm9ybWF0dGVyczogc3RhdGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZvcm1hdHRlZE1lc3NhZ2VQYXJ0cyA9IGZvcm1hdHRlci5mb3JtYXRIVE1MTWVzc2FnZSh2YWx1ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBvbkVycm9yKGNyZWF0ZUVycm9yKGBFcnJvciBmb3JtYXR0aW5nIG1lc3NhZ2U6IFwiJHtpZH1cIiBmb3IgbG9jYWxlOiBcIiR7bG9jYWxlfVwiYCArXG4gICAgICAgICAgICAgICAgKGRlZmF1bHRNZXNzYWdlID8gJywgdXNpbmcgZGVmYXVsdCBtZXNzYWdlIGFzIGZhbGxiYWNrLicgOiAnJyksIGUpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gVGhpcyBwcmV2ZW50cyB3YXJuaW5ncyBmcm9tIGxpdHRlcmluZyB0aGUgY29uc29sZSBpbiBkZXZlbG9wbWVudFxuICAgICAgICAvLyB3aGVuIG5vIGBtZXNzYWdlc2AgYXJlIHBhc3NlZCBpbnRvIHRoZSA8SW50bFByb3ZpZGVyPiBmb3IgdGhlXG4gICAgICAgIC8vIGRlZmF1bHQgbG9jYWxlLCBhbmQgYSBkZWZhdWx0IG1lc3NhZ2UgaXMgaW4gdGhlIHNvdXJjZS5cbiAgICAgICAgaWYgKCFkZWZhdWx0TWVzc2FnZSB8fFxuICAgICAgICAgICAgKGxvY2FsZSAmJiBsb2NhbGUudG9Mb3dlckNhc2UoKSAhPT0gZGVmYXVsdExvY2FsZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgICAgb25FcnJvcihjcmVhdGVFcnJvcihgTWlzc2luZyBtZXNzYWdlOiBcIiR7aWR9XCIgZm9yIGxvY2FsZTogXCIke2xvY2FsZX1cImAgK1xuICAgICAgICAgICAgICAgIChkZWZhdWx0TWVzc2FnZSA/ICcsIHVzaW5nIGRlZmF1bHQgbWVzc2FnZSBhcyBmYWxsYmFjay4nIDogJycpKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFmb3JtYXR0ZWRNZXNzYWdlUGFydHMubGVuZ3RoICYmIGRlZmF1bHRNZXNzYWdlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBmb3JtYXR0ZXIgPSBzdGF0ZS5nZXRNZXNzYWdlRm9ybWF0KGRlZmF1bHRNZXNzYWdlLCBkZWZhdWx0TG9jYWxlLCBkZWZhdWx0Rm9ybWF0cyk7XG4gICAgICAgICAgICBmb3JtYXR0ZWRNZXNzYWdlUGFydHMgPSBmb3JtYXR0ZXIuZm9ybWF0SFRNTE1lc3NhZ2UodmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgb25FcnJvcihjcmVhdGVFcnJvcihgRXJyb3IgZm9ybWF0dGluZyB0aGUgZGVmYXVsdCBtZXNzYWdlIGZvcjogXCIke2lkfVwiYCwgZSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghZm9ybWF0dGVkTWVzc2FnZVBhcnRzLmxlbmd0aCkge1xuICAgICAgICBvbkVycm9yKGNyZWF0ZUVycm9yKGBDYW5ub3QgZm9ybWF0IG1lc3NhZ2U6IFwiJHtpZH1cIiwgYCArXG4gICAgICAgICAgICBgdXNpbmcgbWVzc2FnZSAke21lc3NhZ2UgfHwgZGVmYXVsdE1lc3NhZ2UgPyAnc291cmNlJyA6ICdpZCd9IGFzIGZhbGxiYWNrLmApKTtcbiAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2UgfHwgZGVmYXVsdE1lc3NhZ2UgfHwgU3RyaW5nKGlkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVmYXVsdE1lc3NhZ2UgfHwgU3RyaW5nKGlkKTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdHRlZE1lc3NhZ2VQYXJ0cy5sZW5ndGggPT09IDEgJiZcbiAgICAgICAgdHlwZW9mIGZvcm1hdHRlZE1lc3NhZ2VQYXJ0c1swXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlZE1lc3NhZ2VQYXJ0c1swXSB8fCBkZWZhdWx0TWVzc2FnZSB8fCBTdHJpbmcoaWQpO1xuICAgIH1cbiAgICByZXR1cm4gcHJlcGFyZUludGxNZXNzYWdlRm9ybWF0SHRtbE91dHB1dChmb3JtYXR0ZWRNZXNzYWdlUGFydHMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEhUTUxNZXNzYWdlKGNvbmZpZywgc3RhdGUsIG1lc3NhZ2VEZXNjcmlwdG9yID0geyBpZDogJycgfSwgcmF3VmFsdWVzID0ge30pIHtcbiAgICAvLyBQcm9jZXNzIGFsbCB0aGUgdmFsdWVzIGJlZm9yZSB0aGV5IGFyZSB1c2VkIHdoZW4gZm9ybWF0dGluZyB0aGUgSUNVXG4gICAgLy8gTWVzc2FnZSBzdHJpbmcuIFNpbmNlIHRoZSBmb3JtYXR0ZWQgbWVzc2FnZSBtaWdodCBiZSBpbmplY3RlZCB2aWFcbiAgICAvLyBgaW5uZXJIVE1MYCwgYWxsIFN0cmluZy1iYXNlZCB2YWx1ZXMgbmVlZCB0byBiZSBIVE1MLWVzY2FwZWQuXG4gICAgY29uc3QgZXNjYXBlZFZhbHVlcyA9IE9iamVjdC5rZXlzKHJhd1ZhbHVlcykucmVkdWNlKChlc2NhcGVkLCBuYW1lKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcmF3VmFsdWVzW25hbWVdO1xuICAgICAgICBlc2NhcGVkW25hbWVdID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IGVzY2FwZSh2YWx1ZSkgOiB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGVzY2FwZWQ7XG4gICAgfSwge30pO1xuICAgIHJldHVybiBmb3JtYXRNZXNzYWdlKGNvbmZpZywgc3RhdGUsIG1lc3NhZ2VEZXNjcmlwdG9yLCBlc2NhcGVkVmFsdWVzKTtcbn1cbiIsImltcG9ydCB7IGZpbHRlclByb3BzLCBjcmVhdGVFcnJvciB9IGZyb20gJy4uL3V0aWxzJztcbmNvbnN0IExJU1RfRk9STUFUX09QVElPTlMgPSBbXG4gICAgJ2xvY2FsZU1hdGNoZXInLFxuICAgICd0eXBlJyxcbiAgICAnc3R5bGUnLFxuXTtcbmNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5mdW5jdGlvbiBnZW5lcmF0ZVRva2VuKGkpIHtcbiAgICByZXR1cm4gYCR7bm93fV8ke2l9XyR7bm93fWA7XG59XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0TGlzdCh7IGxvY2FsZSwgb25FcnJvciB9LCBnZXRMaXN0Rm9ybWF0LCB2YWx1ZXMsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IExpc3RGb3JtYXQgPSBJbnRsLkxpc3RGb3JtYXQ7XG4gICAgaWYgKCFMaXN0Rm9ybWF0KSB7XG4gICAgICAgIG9uRXJyb3IoY3JlYXRlRXJyb3IoYEludGwuTGlzdEZvcm1hdCBpcyBub3QgYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnQuXG5UcnkgcG9seWZpbGxpbmcgaXQgdXNpbmcgXCJAZm9ybWF0anMvaW50bC1saXN0Zm9ybWF0XCJcbmApKTtcbiAgICB9XG4gICAgY29uc3QgZmlsdGVyZWRPcHRpb25zID0gZmlsdGVyUHJvcHMob3B0aW9ucywgTElTVF9GT1JNQVRfT1BUSU9OUyk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmljaFZhbHVlcyA9IHt9O1xuICAgICAgICBjb25zdCBzZXJpYWxpemVkVmFsdWVzID0gdmFsdWVzLm1hcCgodiwgaSkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gZ2VuZXJhdGVUb2tlbihpKTtcbiAgICAgICAgICAgICAgICByaWNoVmFsdWVzW2lkXSA9IHY7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyh2KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghT2JqZWN0LmtleXMocmljaFZhbHVlcykubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0TGlzdEZvcm1hdChsb2NhbGUsIGZpbHRlcmVkT3B0aW9ucykuZm9ybWF0KHNlcmlhbGl6ZWRWYWx1ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnRzID0gZ2V0TGlzdEZvcm1hdChsb2NhbGUsIGZpbHRlcmVkT3B0aW9ucykuZm9ybWF0VG9QYXJ0cyhzZXJpYWxpemVkVmFsdWVzKTtcbiAgICAgICAgcmV0dXJuIHBhcnRzLnJlZHVjZSgoYWxsLCBlbCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsID0gZWwudmFsdWU7XG4gICAgICAgICAgICBpZiAocmljaFZhbHVlc1t2YWxdKSB7XG4gICAgICAgICAgICAgICAgYWxsLnB1c2gocmljaFZhbHVlc1t2YWxdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhbGxbYWxsLmxlbmd0aCAtIDFdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGFsbFthbGwubGVuZ3RoIC0gMV0gKz0gdmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYWxsLnB1c2godmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhbGw7XG4gICAgICAgIH0sIFtdKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgb25FcnJvcihjcmVhdGVFcnJvcignRXJyb3IgZm9ybWF0dGluZyBsaXN0LicsIGUpKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlcztcbn1cbiIsImltcG9ydCB7IGZpbHRlclByb3BzLCBjcmVhdGVFcnJvciB9IGZyb20gJy4uL3V0aWxzJztcbmNvbnN0IERJU1BMQVlfTkFNRVNfT1BUT05TID0gW1xuICAgICdsb2NhbGVNYXRjaGVyJyxcbiAgICAnc3R5bGUnLFxuICAgICd0eXBlJyxcbiAgICAnZmFsbGJhY2snLFxuXTtcbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXREaXNwbGF5TmFtZSh7IGxvY2FsZSwgb25FcnJvciB9LCBnZXREaXNwbGF5TmFtZXMsIHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBEaXNwbGF5TmFtZXMgPSBJbnRsLkRpc3BsYXlOYW1lcztcbiAgICBpZiAoIURpc3BsYXlOYW1lcykge1xuICAgICAgICBvbkVycm9yKGNyZWF0ZUVycm9yKGBJbnRsLkRpc3BsYXlOYW1lcyBpcyBub3QgYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnQuXG5UcnkgcG9seWZpbGxpbmcgaXQgdXNpbmcgXCJAZm9ybWF0anMvaW50bC1kaXNwbGF5bmFtZXNcIlxuYCkpO1xuICAgIH1cbiAgICBjb25zdCBmaWx0ZXJlZE9wdGlvbnMgPSBmaWx0ZXJQcm9wcyhvcHRpb25zLCBESVNQTEFZX05BTUVTX09QVE9OUyk7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGdldERpc3BsYXlOYW1lcyhsb2NhbGUsIGZpbHRlcmVkT3B0aW9ucykub2YodmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBvbkVycm9yKGNyZWF0ZUVycm9yKCdFcnJvciBmb3JtYXR0aW5nIGRpc3BsYXkgbmFtZS4nLCBlKSk7XG4gICAgfVxufVxuIiwiLypcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuXG4gKiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJy4vaW5qZWN0SW50bCc7XG5pbXBvcnQgeyBjcmVhdGVFcnJvciwgREVGQVVMVF9JTlRMX0NPTkZJRywgY3JlYXRlRm9ybWF0dGVycywgaW52YXJpYW50SW50bENvbnRleHQsIGNyZWF0ZUludGxDYWNoZSwgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBmb3JtYXROdW1iZXIsIGZvcm1hdE51bWJlclRvUGFydHMgfSBmcm9tICcuLi9mb3JtYXR0ZXJzL251bWJlcic7XG5pbXBvcnQgeyBmb3JtYXRSZWxhdGl2ZVRpbWUgfSBmcm9tICcuLi9mb3JtYXR0ZXJzL3JlbGF0aXZlVGltZSc7XG5pbXBvcnQgeyBmb3JtYXREYXRlLCBmb3JtYXRUaW1lLCBmb3JtYXREYXRlVG9QYXJ0cywgZm9ybWF0VGltZVRvUGFydHMsIH0gZnJvbSAnLi4vZm9ybWF0dGVycy9kYXRlVGltZSc7XG5pbXBvcnQgeyBmb3JtYXRQbHVyYWwgfSBmcm9tICcuLi9mb3JtYXR0ZXJzL3BsdXJhbCc7XG5pbXBvcnQgeyBmb3JtYXRNZXNzYWdlLCBmb3JtYXRIVE1MTWVzc2FnZSB9IGZyb20gJy4uL2Zvcm1hdHRlcnMvbWVzc2FnZSc7XG5pbXBvcnQgKiBhcyBzaGFsbG93RXF1YWxzXyBmcm9tICdzaGFsbG93LWVxdWFsL29iamVjdHMnO1xuaW1wb3J0IHsgZm9ybWF0TGlzdCB9IGZyb20gJy4uL2Zvcm1hdHRlcnMvbGlzdCc7XG5pbXBvcnQgeyBmb3JtYXREaXNwbGF5TmFtZSB9IGZyb20gJy4uL2Zvcm1hdHRlcnMvZGlzcGxheU5hbWUnO1xuY29uc3Qgc2hhbGxvd0VxdWFscyA9IHNoYWxsb3dFcXVhbHNfLmRlZmF1bHQgfHwgc2hhbGxvd0VxdWFsc187XG5mdW5jdGlvbiBwcm9jZXNzSW50bENvbmZpZyhjb25maWcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBsb2NhbGU6IGNvbmZpZy5sb2NhbGUsXG4gICAgICAgIHRpbWVab25lOiBjb25maWcudGltZVpvbmUsXG4gICAgICAgIGZvcm1hdHM6IGNvbmZpZy5mb3JtYXRzLFxuICAgICAgICB0ZXh0Q29tcG9uZW50OiBjb25maWcudGV4dENvbXBvbmVudCxcbiAgICAgICAgbWVzc2FnZXM6IGNvbmZpZy5tZXNzYWdlcyxcbiAgICAgICAgZGVmYXVsdExvY2FsZTogY29uZmlnLmRlZmF1bHRMb2NhbGUsXG4gICAgICAgIGRlZmF1bHRGb3JtYXRzOiBjb25maWcuZGVmYXVsdEZvcm1hdHMsXG4gICAgICAgIG9uRXJyb3I6IGNvbmZpZy5vbkVycm9yLFxuICAgIH07XG59XG4vKipcbiAqIENyZWF0ZSBpbnRsIG9iamVjdFxuICogQHBhcmFtIGNvbmZpZyBpbnRsIGNvbmZpZ1xuICogQHBhcmFtIGNhY2hlIGNhY2hlIGZvciBmb3JtYXR0ZXIgaW5zdGFuY2VzIHRvIHByZXZlbnQgbWVtb3J5IGxlYWtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUludGwoY29uZmlnLCBjYWNoZSkge1xuICAgIGNvbnN0IGZvcm1hdHRlcnMgPSBjcmVhdGVGb3JtYXR0ZXJzKGNhY2hlKTtcbiAgICBjb25zdCByZXNvbHZlZENvbmZpZyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9JTlRMX0NPTkZJRyksIGNvbmZpZyk7XG4gICAgY29uc3QgeyBsb2NhbGUsIGRlZmF1bHRMb2NhbGUsIG9uRXJyb3IgfSA9IHJlc29sdmVkQ29uZmlnO1xuICAgIGlmICghbG9jYWxlKSB7XG4gICAgICAgIGlmIChvbkVycm9yKSB7XG4gICAgICAgICAgICBvbkVycm9yKGNyZWF0ZUVycm9yKGBcImxvY2FsZVwiIHdhcyBub3QgY29uZmlndXJlZCwgdXNpbmcgXCIke2RlZmF1bHRMb2NhbGV9XCIgYXMgZmFsbGJhY2suIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZm9ybWF0anMvcmVhY3QtaW50bC9ibG9iL21hc3Rlci9kb2NzL0FQSS5tZCNpbnRsc2hhcGUgZm9yIG1vcmUgZGV0YWlsc2ApKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTaW5jZSB0aGVyZSdzIG5vIHJlZ2lzdGVyZWQgbG9jYWxlIGRhdGEgZm9yIGBsb2NhbGVgLCB0aGlzIHdpbGxcbiAgICAgICAgLy8gZmFsbGJhY2sgdG8gdGhlIGBkZWZhdWx0TG9jYWxlYCB0byBtYWtlIHN1cmUgdGhpbmdzIGNhbiByZW5kZXIuXG4gICAgICAgIC8vIFRoZSBgbWVzc2FnZXNgIGFyZSBvdmVycmlkZGVuIHRvIHRoZSBgZGVmYXVsdFByb3BzYCBlbXB0eSBvYmplY3RcbiAgICAgICAgLy8gdG8gbWFpbnRhaW4gcmVmZXJlbnRpYWwgZXF1YWxpdHkgYWNyb3NzIHJlLXJlbmRlcnMuIEl0J3MgYXNzdW1lZFxuICAgICAgICAvLyBlYWNoIDxGb3JtYXR0ZWRNZXNzYWdlPiBjb250YWlucyBhIGBkZWZhdWx0TWVzc2FnZWAgcHJvcC5cbiAgICAgICAgcmVzb2x2ZWRDb25maWcubG9jYWxlID0gcmVzb2x2ZWRDb25maWcuZGVmYXVsdExvY2FsZSB8fCAnZW4nO1xuICAgIH1cbiAgICBlbHNlIGlmICghSW50bC5OdW1iZXJGb3JtYXQuc3VwcG9ydGVkTG9jYWxlc09mKGxvY2FsZSkubGVuZ3RoICYmIG9uRXJyb3IpIHtcbiAgICAgICAgb25FcnJvcihjcmVhdGVFcnJvcihgTWlzc2luZyBsb2NhbGUgZGF0YSBmb3IgbG9jYWxlOiBcIiR7bG9jYWxlfVwiIGluIEludGwuTnVtYmVyRm9ybWF0LiBVc2luZyBkZWZhdWx0IGxvY2FsZTogXCIke2RlZmF1bHRMb2NhbGV9XCIgYXMgZmFsbGJhY2suIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZm9ybWF0anMvcmVhY3QtaW50bC9ibG9iL21hc3Rlci9kb2NzL0dldHRpbmctU3RhcnRlZC5tZCNydW50aW1lLXJlcXVpcmVtZW50cyBmb3IgbW9yZSBkZXRhaWxzYCkpO1xuICAgIH1cbiAgICBlbHNlIGlmICghSW50bC5EYXRlVGltZUZvcm1hdC5zdXBwb3J0ZWRMb2NhbGVzT2YobG9jYWxlKS5sZW5ndGggJiZcbiAgICAgICAgb25FcnJvcikge1xuICAgICAgICBvbkVycm9yKGNyZWF0ZUVycm9yKGBNaXNzaW5nIGxvY2FsZSBkYXRhIGZvciBsb2NhbGU6IFwiJHtsb2NhbGV9XCIgaW4gSW50bC5EYXRlVGltZUZvcm1hdC4gVXNpbmcgZGVmYXVsdCBsb2NhbGU6IFwiJHtkZWZhdWx0TG9jYWxlfVwiIGFzIGZhbGxiYWNrLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2Zvcm1hdGpzL3JlYWN0LWludGwvYmxvYi9tYXN0ZXIvZG9jcy9HZXR0aW5nLVN0YXJ0ZWQubWQjcnVudGltZS1yZXF1aXJlbWVudHMgZm9yIG1vcmUgZGV0YWlsc2ApKTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzb2x2ZWRDb25maWcpLCB7IGZvcm1hdHRlcnMsIGZvcm1hdE51bWJlcjogZm9ybWF0TnVtYmVyLmJpbmQobnVsbCwgcmVzb2x2ZWRDb25maWcsIGZvcm1hdHRlcnMuZ2V0TnVtYmVyRm9ybWF0KSwgZm9ybWF0TnVtYmVyVG9QYXJ0czogZm9ybWF0TnVtYmVyVG9QYXJ0cy5iaW5kKG51bGwsIHJlc29sdmVkQ29uZmlnLCBmb3JtYXR0ZXJzLmdldE51bWJlckZvcm1hdCksIGZvcm1hdFJlbGF0aXZlVGltZTogZm9ybWF0UmVsYXRpdmVUaW1lLmJpbmQobnVsbCwgcmVzb2x2ZWRDb25maWcsIGZvcm1hdHRlcnMuZ2V0UmVsYXRpdmVUaW1lRm9ybWF0KSwgZm9ybWF0RGF0ZTogZm9ybWF0RGF0ZS5iaW5kKG51bGwsIHJlc29sdmVkQ29uZmlnLCBmb3JtYXR0ZXJzLmdldERhdGVUaW1lRm9ybWF0KSwgZm9ybWF0RGF0ZVRvUGFydHM6IGZvcm1hdERhdGVUb1BhcnRzLmJpbmQobnVsbCwgcmVzb2x2ZWRDb25maWcsIGZvcm1hdHRlcnMuZ2V0RGF0ZVRpbWVGb3JtYXQpLCBmb3JtYXRUaW1lOiBmb3JtYXRUaW1lLmJpbmQobnVsbCwgcmVzb2x2ZWRDb25maWcsIGZvcm1hdHRlcnMuZ2V0RGF0ZVRpbWVGb3JtYXQpLCBmb3JtYXRUaW1lVG9QYXJ0czogZm9ybWF0VGltZVRvUGFydHMuYmluZChudWxsLCByZXNvbHZlZENvbmZpZywgZm9ybWF0dGVycy5nZXREYXRlVGltZUZvcm1hdCksIGZvcm1hdFBsdXJhbDogZm9ybWF0UGx1cmFsLmJpbmQobnVsbCwgcmVzb2x2ZWRDb25maWcsIGZvcm1hdHRlcnMuZ2V0UGx1cmFsUnVsZXMpLCBmb3JtYXRNZXNzYWdlOiBmb3JtYXRNZXNzYWdlLmJpbmQobnVsbCwgcmVzb2x2ZWRDb25maWcsIGZvcm1hdHRlcnMpLCBmb3JtYXRIVE1MTWVzc2FnZTogZm9ybWF0SFRNTE1lc3NhZ2UuYmluZChudWxsLCByZXNvbHZlZENvbmZpZywgZm9ybWF0dGVycyksIGZvcm1hdExpc3Q6IGZvcm1hdExpc3QuYmluZChudWxsLCByZXNvbHZlZENvbmZpZywgZm9ybWF0dGVycy5nZXRMaXN0Rm9ybWF0KSwgZm9ybWF0RGlzcGxheU5hbWU6IGZvcm1hdERpc3BsYXlOYW1lLmJpbmQobnVsbCwgcmVzb2x2ZWRDb25maWcsIGZvcm1hdHRlcnMuZ2V0RGlzcGxheU5hbWVzKSB9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEludGxQcm92aWRlciBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNhY2hlID0gY3JlYXRlSW50bENhY2hlKCk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBjYWNoZTogdGhpcy5jYWNoZSxcbiAgICAgICAgICAgIGludGw6IGNyZWF0ZUludGwocHJvY2Vzc0ludGxDb25maWcodGhpcy5wcm9wcyksIHRoaXMuY2FjaGUpLFxuICAgICAgICAgICAgcHJldkNvbmZpZzogcHJvY2Vzc0ludGxDb25maWcodGhpcy5wcm9wcyksXG4gICAgICAgIH07XG4gICAgfVxuICAgIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIHsgcHJldkNvbmZpZywgY2FjaGUgfSkge1xuICAgICAgICBjb25zdCBjb25maWcgPSBwcm9jZXNzSW50bENvbmZpZyhwcm9wcyk7XG4gICAgICAgIGlmICghc2hhbGxvd0VxdWFscyhwcmV2Q29uZmlnLCBjb25maWcpKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGludGw6IGNyZWF0ZUludGwoY29uZmlnLCBjYWNoZSksXG4gICAgICAgICAgICAgICAgcHJldkNvbmZpZzogY29uZmlnLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBpbnZhcmlhbnRJbnRsQ29udGV4dCh0aGlzLnN0YXRlLmludGwpO1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChQcm92aWRlciwgeyB2YWx1ZTogdGhpcy5zdGF0ZS5pbnRsIH0sIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIH1cbn1cbkludGxQcm92aWRlci5kaXNwbGF5TmFtZSA9ICdJbnRsUHJvdmlkZXInO1xuSW50bFByb3ZpZGVyLmRlZmF1bHRQcm9wcyA9IERFRkFVTFRfSU5UTF9DT05GSUc7XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiZXJyb3JNZXNzYWdlXCI6XCJFcnJvck1lc3NhZ2VfX2Vycm9yTWVzc2FnZS0tMkxDbW5cIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImlucHV0XCI6XCJSZXN0b3JlUGFzc3dvcmRfX2lucHV0LS0yNHl3UlwiLFwibWVzc2FnZVwiOlwiUmVzdG9yZVBhc3N3b3JkX19tZXNzYWdlLS0yZGFwa1wifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiaW5wdXRcIjpcIlNpZ25Jbl9faW5wdXQtLTFtUXZyXCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJ0ZXh0QnV0dG9uXCI6XCJUZXh0QnV0dG9uX190ZXh0QnV0dG9uLS0yamNpaVwiLFwidGV4dEJ1dHRvbl92aWV3X2xpZ2h0XCI6XCJUZXh0QnV0dG9uX190ZXh0QnV0dG9uX3ZpZXdfbGlnaHQtLWo2NlBRXCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJ0aXRsZVwiOlwiQXV0aF9fdGl0bGUtLTFlNVBKXCIsXCJsaW5rXCI6XCJBdXRoX19saW5rLS0zOVpScVwiLFwicHJpdmFjeVBvbGljeVwiOlwiQXV0aF9fcHJpdmFjeVBvbGljeS0tM1Y5Vm9cIn07IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tICcuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qcyc7XG5pbXBvcnQgdG9EYXRlIGZyb20gJy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbi8qKlxuICogQG5hbWUgYWRkTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBhZGRlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBZGQgNzUwIG1pbGxpc2Vjb25kcyB0byAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogdmFyIHJlc3VsdCA9IGFkZE1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjMwLjc1MFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgdGltZXN0YW1wID0gdG9EYXRlKGRpcnR5RGF0ZSkuZ2V0VGltZSgpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIGFtb3VudCk7XG59IiwiaW1wb3J0IFJlYWN0LCB7IEZDLCBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0Vycm9yTWVzc2FnZS5jc3MnO1xuXG5jb25zdCBlbSA9IGNzc21lbShzdHlsZXMpO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBjaGlsZHJlbj86IFJlYWN0Tm9kZTtcbn1cblxuY29uc3QgRXJyb3JNZXNzYWdlOiBGQzxQcm9wcz4gPSAoeyBjaGlsZHJlbiB9KSA9PiAoXG4gIDxkaXYgY2xhc3NOYW1lPXtlbSgnZXJyb3JNZXNzYWdlJykoKX0+e2NoaWxkcmVufTwvZGl2PlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgRXJyb3JNZXNzYWdlO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrLCB1c2VSZWYsIEZDIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgY3NzbWVtIGZyb20gJ2Nzc21lbSc7XG5pbXBvcnQgeyB1c2VJbnRsIH0gZnJvbSAncmVhY3QtaW50bCc7XG5cbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBjb21tYW5kcyBmcm9tICdAY29uc3RhbnRzL2NvbW1hbmRzJztcblxuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHVzZUJhY2tncm91bmRSZXF1ZXN0SGFuZGxlciBmcm9tICdAaG9va3MvdXNlQmFja2dyb3VuZFJlcXVlc3RIYW5kbGVyJztcblxuaW1wb3J0IEJ1dHRvbiwge1xuICBTSVpFIGFzIEJVVFRPTl9TSVpFLFxuICBUWVBFIGFzIEJVVFRPTl9UWVBFLFxufSBmcm9tICdjb21wb25lbnRzL0J1dHRvbic7XG5pbXBvcnQgSW5wdXQsIHsgU0laRSBhcyBJTlBVVF9TSVpFIH0gZnJvbSAnY29tcG9uZW50cy9JbnB1dCc7XG5cbmltcG9ydCBFcnJvck1lc3NhZ2UgZnJvbSAnQGNvbXBvbmVudHMvRXJyb3JNZXNzYWdlL0Vycm9yTWVzc2FnZSc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9SZXN0b3JlUGFzc3dvcmQuY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgb25TdWJtaXQ/KCk6IHZvaWQ7XG4gIHN1Ym1pdExhYmVsPzogc3RyaW5nO1xufVxuXG5jb25zdCBSZXN0b3JlUGFzc3dvcmQ6IEZDPFByb3BzPiA9ICh7IG9uU3VibWl0LCBzdWJtaXRMYWJlbCB9KSA9PiB7XG4gIGNvbnN0IGludGwgPSB1c2VJbnRsKCk7XG5cbiAgY29uc3QgW3VzZXJuYW1lLCBzZXRVc2VybmFtZV0gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFttZXNzYWdlLCBzZXRNZXNzYWdlXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuXG4gIGNvbnN0IGlucHV0RW1haWxSZWYgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3Qge1xuICAgIGVycm9yLFxuICAgIGhhbmRsZUJhY2tncm91bmRSZXF1ZXN0LFxuICAgIGlzTG9hZGluZyxcbiAgICBzdGF0dXMsXG4gIH0gPSB1c2VCYWNrZ3JvdW5kUmVxdWVzdEhhbmRsZXIoKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpbnB1dEVtYWlsUmVmLmN1cnJlbnQpIHtcbiAgICAgIGlucHV0RW1haWxSZWYuY3VycmVudC5mb2N1cygpO1xuICAgIH1cbiAgfSwgW10pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHN0YXR1cyA9PT0gJ29rJykge1xuICAgICAgaWYgKG9uU3VibWl0KSB7XG4gICAgICAgIG9uU3VibWl0KCk7XG4gICAgICB9XG4gICAgICBzZXRNZXNzYWdlKFxuICAgICAgICBpbnRsLmZvcm1hdE1lc3NhZ2UoeyBpZDogJ2F1dGgucmVtaW5kUGFzc3dvcmRTdWNjZXNzTWVzc2FnZScgfSlcbiAgICAgICk7XG4gICAgfVxuICB9LCBbc3RhdHVzLCBvblN1Ym1pdCwgaW50bF0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlucHV0RW1haWxSZWYuY3VycmVudCkge1xuICAgICAgaW5wdXRFbWFpbFJlZi5jdXJyZW50LmRpc2FibGVkID0gaXNMb2FkaW5nO1xuICAgIH1cbiAgfSwgW2lzTG9hZGluZ10pO1xuXG4gIGNvbnN0IGhhbmRsZVVzZXJuYW1lQ2hhbmdlID0gdXNlQ2FsbGJhY2soXG4gICAgKHsgdGFyZ2V0IH0pID0+IHNldFVzZXJuYW1lKHRhcmdldC52YWx1ZSksXG4gICAgW11cbiAgKTtcblxuICBjb25zdCBoYW5kbGVGb3JtU3VibWl0ID0gdXNlQ2FsbGJhY2soXG4gICAgYXN5bmMgKGV2dCkgPT4ge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBzZXRNZXNzYWdlKG51bGwpO1xuICAgICAgYXdhaXQgaGFuZGxlQmFja2dyb3VuZFJlcXVlc3Qoe1xuICAgICAgICBjb21tYW5kOiBjb21tYW5kcy5SRVNUT1JFX1BBU1NXT1JELFxuICAgICAgICB1c2VybmFtZSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgW2hhbmRsZUJhY2tncm91bmRSZXF1ZXN0LCB1c2VybmFtZV1cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8Zm9ybSBvblN1Ym1pdD17aGFuZGxlRm9ybVN1Ym1pdH0+XG4gICAgICAgIHtlcnJvciAmJiAoXG4gICAgICAgICAgPEVycm9yTWVzc2FnZT57aW50bC5mb3JtYXRNZXNzYWdlKHsgaWQ6IGVycm9yIH0pfTwvRXJyb3JNZXNzYWdlPlxuICAgICAgICApfVxuICAgICAgICB7bWVzc2FnZSA/IChcbiAgICAgICAgICA8cCBjbGFzc05hbWU9e2VtKCdtZXNzYWdlJykoKX0+e21lc3NhZ2V9PC9wPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDw+XG4gICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtlbSgnaW5wdXQnKSgpfVxuICAgICAgICAgICAgICBpbnB1dFJlZj17aW5wdXRFbWFpbFJlZn1cbiAgICAgICAgICAgICAgbGFiZWw9e2ludGwuZm9ybWF0TWVzc2FnZSh7IGlkOiAnc2lnbmluLmVtYWlsJyB9KX1cbiAgICAgICAgICAgICAgbmFtZT1cInVzZXJuYW1lXCJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZVVzZXJuYW1lQ2hhbmdlfVxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cImV4YW1wbGVAbWFpbC5ydVwiXG4gICAgICAgICAgICAgIHJlcXVpcmVkXG4gICAgICAgICAgICAgIHNpemU9e0lOUFVUX1NJWkUuTX1cbiAgICAgICAgICAgICAgdHlwZT1cImVtYWlsXCJcbiAgICAgICAgICAgICAgdmFsdWU9e3VzZXJuYW1lfVxuICAgICAgICAgICAgICB3aWRlXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICBkaXNhYmxlZD17aXNMb2FkaW5nfVxuICAgICAgICAgICAgICBzaXplPXtCVVRUT05fU0laRS5NfVxuICAgICAgICAgICAgICB0eXBlPXtCVVRUT05fVFlQRS5TVUJNSVR9XG4gICAgICAgICAgICAgIHdpZGVcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3N1Ym1pdExhYmVsfVxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC8+XG4gICAgICAgICl9XG4gICAgICA8L2Zvcm0+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSZXN0b3JlUGFzc3dvcmQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2ssIHVzZVJlZiwgRkMgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcbmltcG9ydCB7IHVzZUludGwgfSBmcm9tICdyZWFjdC1pbnRsJztcblxuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IGNvbW1hbmRzIGZyb20gJ0Bjb25zdGFudHMvY29tbWFuZHMnO1xuXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgdXNlQmFja2dyb3VuZFJlcXVlc3RIYW5kbGVyIGZyb20gJ0Bob29rcy91c2VCYWNrZ3JvdW5kUmVxdWVzdEhhbmRsZXInO1xuXG5pbXBvcnQgQnV0dG9uLCB7XG4gIFNJWkUgYXMgQlVUVE9OX1NJWkUsXG4gIFRZUEUgYXMgQlVUVE9OX1RZUEUsXG59IGZyb20gJ2NvbXBvbmVudHMvQnV0dG9uJztcbmltcG9ydCBJbnB1dCwgeyBTSVpFIGFzIElOUFVUX1NJWkUgfSBmcm9tICdjb21wb25lbnRzL0lucHV0JztcblxuaW1wb3J0IEVycm9yTWVzc2FnZSBmcm9tICdAY29tcG9uZW50cy9FcnJvck1lc3NhZ2UvRXJyb3JNZXNzYWdlJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL1NpZ25Jbi5jc3MnO1xuXG5jb25zdCBlbSA9IGNzc21lbShzdHlsZXMpO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBpc0FjdGl2ZT86IGJvb2xlYW47XG4gIG9uU3VibWl0KCk6IHZvaWQ7XG59XG5cbmNvbnN0IFNpZ25JbjogRkM8UHJvcHM+ID0gKHsgaXNBY3RpdmUsIG9uU3VibWl0IH0pID0+IHtcbiAgY29uc3QgaW50bCA9IHVzZUludGwoKTtcblxuICBjb25zdCBbdXNlcm5hbWUsIHNldFVzZXJuYW1lXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW3Bhc3N3b3JkLCBzZXRQYXNzd29yZF0gPSB1c2VTdGF0ZSgnJyk7XG5cbiAgY29uc3QgaW5wdXRFbWFpbFJlZiA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgaW5wdXRQYXNzd29yZFJlZiA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcblxuICBjb25zdCB7XG4gICAgZXJyb3IsXG4gICAgaGFuZGxlQmFja2dyb3VuZFJlcXVlc3QsXG4gICAgaXNMb2FkaW5nLFxuICAgIHN0YXR1cyxcbiAgfSA9IHVzZUJhY2tncm91bmRSZXF1ZXN0SGFuZGxlcigpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlzQWN0aXZlICYmIGlucHV0RW1haWxSZWYuY3VycmVudCkge1xuICAgICAgaW5wdXRFbWFpbFJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfVxuICB9LCBbaXNBY3RpdmVdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChzdGF0dXMgPT09ICdvaycpIHtcbiAgICAgIG9uU3VibWl0KCk7XG4gICAgfVxuICB9LCBbc3RhdHVzLCBvblN1Ym1pdF0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlucHV0RW1haWxSZWYuY3VycmVudCkge1xuICAgICAgaW5wdXRFbWFpbFJlZi5jdXJyZW50LmRpc2FibGVkID0gaXNMb2FkaW5nO1xuICAgIH1cbiAgICBpZiAoaW5wdXRQYXNzd29yZFJlZi5jdXJyZW50KSB7XG4gICAgICBpbnB1dFBhc3N3b3JkUmVmLmN1cnJlbnQuZGlzYWJsZWQgPSBpc0xvYWRpbmc7XG4gICAgfVxuICB9LCBbaXNMb2FkaW5nXSk7XG5cbiAgY29uc3QgaGFuZGxlVXNlcm5hbWVDaGFuZ2UgPSB1c2VDYWxsYmFjayhcbiAgICAoeyB0YXJnZXQgfSkgPT4gc2V0VXNlcm5hbWUodGFyZ2V0LnZhbHVlKSxcbiAgICBbXVxuICApO1xuICBjb25zdCBoYW5kbGVQYXNzd29yZENoYW5nZSA9IHVzZUNhbGxiYWNrKFxuICAgICh7IHRhcmdldCB9KSA9PiBzZXRQYXNzd29yZCh0YXJnZXQudmFsdWUpLFxuICAgIFtdXG4gICk7XG5cbiAgY29uc3QgaGFuZGxlRm9ybVN1Ym1pdCA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jIChldnQpID0+IHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgYXdhaXQgaGFuZGxlQmFja2dyb3VuZFJlcXVlc3Qoe1xuICAgICAgICBjb21tYW5kOiBjb21tYW5kcy5TSUdOX0lOLFxuICAgICAgICB1c2VybmFtZSxcbiAgICAgICAgcGFzc3dvcmQsXG4gICAgICB9KTtcbiAgICB9LFxuICAgIFtoYW5kbGVCYWNrZ3JvdW5kUmVxdWVzdCwgdXNlcm5hbWUsIHBhc3N3b3JkXVxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxmb3JtIG9uU3VibWl0PXtoYW5kbGVGb3JtU3VibWl0fT5cbiAgICAgICAge2Vycm9yICYmIChcbiAgICAgICAgICA8RXJyb3JNZXNzYWdlPntpbnRsLmZvcm1hdE1lc3NhZ2UoeyBpZDogZXJyb3IgfSl9PC9FcnJvck1lc3NhZ2U+XG4gICAgICAgICl9XG4gICAgICAgIDxJbnB1dFxuICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ2lucHV0JykoKX1cbiAgICAgICAgICBpbnB1dFJlZj17aW5wdXRFbWFpbFJlZn1cbiAgICAgICAgICBsYWJlbD17aW50bC5mb3JtYXRNZXNzYWdlKHsgaWQ6ICdzaWduaW4uZW1haWwnIH0pfVxuICAgICAgICAgIG5hbWU9XCJ1c2VybmFtZVwiXG4gICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZVVzZXJuYW1lQ2hhbmdlfVxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiZXhhbXBsZUBtYWlsLnJ1XCJcbiAgICAgICAgICByZXF1aXJlZFxuICAgICAgICAgIHNpemU9e0lOUFVUX1NJWkUuTX1cbiAgICAgICAgICB0eXBlPVwiZW1haWxcIlxuICAgICAgICAgIHZhbHVlPXt1c2VybmFtZX1cbiAgICAgICAgICB3aWRlXG4gICAgICAgIC8+XG4gICAgICAgIDxJbnB1dFxuICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ2lucHV0JykoKX1cbiAgICAgICAgICBpbnB1dFJlZj17aW5wdXRQYXNzd29yZFJlZn1cbiAgICAgICAgICBsYWJlbD17aW50bC5mb3JtYXRNZXNzYWdlKHsgaWQ6ICdzaWduaW4ucGFzc3dvcmQnIH0pfVxuICAgICAgICAgIG5hbWU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZVBhc3N3b3JkQ2hhbmdlfVxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwi4oCi4oCi4oCi4oCi4oCi4oCiXCJcbiAgICAgICAgICByZXF1aXJlZFxuICAgICAgICAgIHNpemU9e0lOUFVUX1NJWkUuTX1cbiAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxuICAgICAgICAgIHZhbHVlPXtwYXNzd29yZH1cbiAgICAgICAgICB3aWRlXG4gICAgICAgIC8+XG4gICAgICAgIDxCdXR0b25cbiAgICAgICAgICBkaXNhYmxlZD17aXNMb2FkaW5nfVxuICAgICAgICAgIHNpemU9e0JVVFRPTl9TSVpFLk19XG4gICAgICAgICAgdHlwZT17QlVUVE9OX1RZUEUuU1VCTUlUfVxuICAgICAgICAgIHdpZGVcbiAgICAgICAgPlxuICAgICAgICAgIHtpbnRsLmZvcm1hdE1lc3NhZ2UoeyBpZDogJ3NpZ25pbi5zdWJtaXRCdXR0b24nIH0pfVxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgIDwvZm9ybT5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNpZ25JbjtcbiIsImltcG9ydCBSZWFjdCwgeyBGQywgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgY3NzbWVtIGZyb20gJ2Nzc21lbSc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9UZXh0QnV0dG9uLmNzcyc7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmV4cG9ydCBlbnVtIFZpZXcge1xuICBMSUdIVCA9ICdsaWdodCcsXG59XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGNoaWxkcmVuOiBSZWFjdE5vZGU7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgaHJlZj86IHN0cmluZztcbiAgb25DbGljaygpOiB2b2lkO1xuICB0YXJnZXQ/OiBzdHJpbmc7XG4gIHZpZXc/OiBWaWV3O1xufVxuXG5jb25zdCBUZXh0QnV0dG9uOiBGQzxQcm9wcz4gPSAoe1xuICBjaGlsZHJlbixcbiAgY2xhc3NOYW1lLFxuICBocmVmLFxuICBvbkNsaWNrLFxuICB0YXJnZXQgPSAnX2JsYW5rJyxcbiAgdmlldyxcbn06IFByb3BzKSA9PiB7XG4gIGlmIChocmVmKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxhXG4gICAgICAgIGNsYXNzTmFtZT17ZW0oJ3RleHRCdXR0b24nKSh7IHZpZXcgfSwgY2xhc3NOYW1lKX1cbiAgICAgICAgaHJlZj17aHJlZn1cbiAgICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgICAgdGFyZ2V0PXt0YXJnZXR9XG4gICAgICA+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvYT5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8YnV0dG9uXG4gICAgICBjbGFzc05hbWU9e2VtKCd0ZXh0QnV0dG9uJykoeyB2aWV3IH0sIGNsYXNzTmFtZSl9XG4gICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvYnV0dG9uPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVGV4dEJ1dHRvbjtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2ssIEZDIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgY3NzbWVtIGZyb20gJ2Nzc21lbSc7XG5pbXBvcnQgeyB1c2VJbnRsIH0gZnJvbSAncmVhY3QtaW50bCc7XG5cbmltcG9ydCB7IEJSQU5ELCBWRVJTSU9OIH0gZnJvbSAnQGNvbnN0YW50cy9jb25zdGFudHMnO1xuaW1wb3J0IHsgU3RvcmFnZSB9IGZyb20gJ0Bjb25zdGFudHMvc3RvcmFnZSc7XG5pbXBvcnQgdXJscyBmcm9tICdAY29uc3RhbnRzL3VybHMnO1xuXG5pbXBvcnQgdXNlRnVubmVsIGZyb20gJ0Bob29rcy91c2VGdW5uZWwnO1xuXG5pbXBvcnQgUmVzdG9yZVBhc3N3b3JkIGZyb20gJ0Bjb21wb25lbnRzL1Jlc3RvcmVQYXNzd29yZC9SZXN0b3JlUGFzc3dvcmQnO1xuaW1wb3J0IFNpZ25JbiBmcm9tICdAY29tcG9uZW50cy9TaWduSW4vU2lnbkluJztcbmltcG9ydCBUZXh0QnV0dG9uLCB7IFZpZXcgfSBmcm9tICdAY29tcG9uZW50cy9UZXh0QnV0dG9uL1RleHRCdXR0b24nO1xuaW1wb3J0IFRpdGxlIGZyb20gJ0Bjb21wb25lbnRzL1RpdGxlL1RpdGxlJztcblxuaW1wb3J0IHsgZ2V0RnJvbVN0b3JhZ2UgfSBmcm9tICdAaGVscGVycy9zdG9yYWdlJztcbmltcG9ydCB7IGdldFZlcnNpb24gfSBmcm9tICdAaGVscGVycy91dGlscyc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9BdXRoLmNzcyc7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgaW5Qb3B1cD86IGJvb2xlYW47XG4gIGlzQWN0aXZlPzogYm9vbGVhbjtcbiAgbmFtZTogc3RyaW5nO1xuICBvblNraXAoKTogdm9pZDtcbiAgb25TdWJtaXQoKTogdm9pZDtcbn1cblxuY29uc3QgQXV0aDogRkM8UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgY2xhc3NOYW1lLCBpblBvcHVwLCBpc0FjdGl2ZSwgbmFtZSwgb25Ta2lwLCBvblN1Ym1pdCB9ID0gcHJvcHM7XG5cbiAgY29uc3QgaW50bCA9IHVzZUludGwoKTtcblxuICBjb25zdCBbaXNSZXN0b3JpbmdQYXNzd29yZCwgc2V0UmVzdG9yaW5nUGFzc3dvcmRTdGF0ZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3QgeyBzZW5kRXZlbnQgfSA9IHVzZUZ1bm5lbChpblBvcHVwKTtcblxuICBjb25zdCBoYW5kbGVCdXR0b25TaWduVXBDbGljayA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB1aWQgPSBhd2FpdCBnZXRGcm9tU3RvcmFnZShTdG9yYWdlLlVJRCk7XG4gICAgY29uc3QgdXNlcklkID0gYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoU3RvcmFnZS5VU0VSX0lEKTtcbiAgICBhd2FpdCBzZW5kRXZlbnQoJ2NsaWNrJywgYCR7bmFtZX1fc2lnbnVwYCwge1xuICAgICAgZGF0ZXRpbWU6IERhdGUubm93KCksXG4gICAgICBleHRlbnNpb25fYnJhbmQ6IEJSQU5ELFxuICAgICAgZXh0ZW5zaW9uX3ZlcnNpb246IGdldFZlcnNpb24oKSxcbiAgICAgIHVpZCxcbiAgICAgIHVybDogd2luZG93LmxvY2F0aW9uLmhyZWYsXG4gICAgICB1c2VyX2lkOiB1c2VySWQsXG4gICAgICB2ZXJzaW9uOiBWRVJTSU9OLFxuICAgIH0pO1xuICB9LCBbbmFtZSwgc2VuZEV2ZW50XSk7XG5cbiAgY29uc3QgaGFuZGxlU2lnbkluU3VibWl0ID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHVpZCA9IGF3YWl0IGdldEZyb21TdG9yYWdlKFN0b3JhZ2UuVUlEKTtcbiAgICBjb25zdCB1c2VySWQgPSBhd2FpdCBnZXRGcm9tU3RvcmFnZShTdG9yYWdlLlVTRVJfSUQpO1xuICAgIGF3YWl0IHNlbmRFdmVudCgnY2xpY2snLCBgJHtuYW1lfV9sb2dpbmAsIHtcbiAgICAgIGRhdGV0aW1lOiBEYXRlLm5vdygpLFxuICAgICAgZXh0ZW5zaW9uX2JyYW5kOiBCUkFORCxcbiAgICAgIGV4dGVuc2lvbl92ZXJzaW9uOiBnZXRWZXJzaW9uKCksXG4gICAgICB1aWQsXG4gICAgICB1cmw6IHdpbmRvdy5sb2NhdGlvbi5ocmVmLFxuICAgICAgdXNlcl9pZDogdXNlcklkLFxuICAgICAgdmVyc2lvbjogVkVSU0lPTixcbiAgICB9KTtcblxuICAgIG9uU3VibWl0KCk7XG4gIH0sIFtuYW1lLCBvblN1Ym1pdCwgc2VuZEV2ZW50XSk7XG5cbiAgY29uc3QgaGFuZGxlQnV0dG9uUmVzdG9yaW5nUGFzc3dvcmRDbGljayA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB1aWQgPSBhd2FpdCBnZXRGcm9tU3RvcmFnZShTdG9yYWdlLlVJRCk7XG4gICAgY29uc3QgdXNlcklkID0gYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoU3RvcmFnZS5VU0VSX0lEKTtcbiAgICBhd2FpdCBzZW5kRXZlbnQoJ2NsaWNrJywgYCR7bmFtZX1fZm9yZ2V0YCwge1xuICAgICAgZGF0ZXRpbWU6IERhdGUubm93KCksXG4gICAgICBleHRlbnNpb25fYnJhbmQ6IEJSQU5ELFxuICAgICAgZXh0ZW5zaW9uX3ZlcnNpb246IGdldFZlcnNpb24oKSxcbiAgICAgIHVpZCxcbiAgICAgIHVybDogd2luZG93LmxvY2F0aW9uLmhyZWYsXG4gICAgICB1c2VyX2lkOiB1c2VySWQsXG4gICAgICB2ZXJzaW9uOiBWRVJTSU9OLFxuICAgIH0pO1xuXG4gICAgc2V0UmVzdG9yaW5nUGFzc3dvcmRTdGF0ZSgocHJldlN0YXRlKSA9PiAhcHJldlN0YXRlKTtcbiAgfSwgW25hbWUsIHNlbmRFdmVudF0pO1xuXG4gIGNvbnN0IGhhbmRsZUJ1dHRvblNraXBDbGljayA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB1aWQgPSBhd2FpdCBnZXRGcm9tU3RvcmFnZShTdG9yYWdlLlVJRCk7XG4gICAgY29uc3QgdXNlcklkID0gYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoU3RvcmFnZS5VU0VSX0lEKTtcbiAgICBhd2FpdCBzZW5kRXZlbnQoJ2NsaWNrJywgYCR7bmFtZX1fbGF0ZXJgLCB7XG4gICAgICBkYXRldGltZTogRGF0ZS5ub3coKSxcbiAgICAgIGV4dGVuc2lvbl9icmFuZDogQlJBTkQsXG4gICAgICBleHRlbnNpb25fdmVyc2lvbjogZ2V0VmVyc2lvbigpLFxuICAgICAgdWlkLFxuICAgICAgdXJsOiB3aW5kb3cubG9jYXRpb24uaHJlZixcbiAgICAgIHVzZXJfaWQ6IHVzZXJJZCxcbiAgICAgIHZlcnNpb246IFZFUlNJT04sXG4gICAgfSk7XG5cbiAgICBvblNraXAoKTtcbiAgfSwgW25hbWUsIG9uU2tpcCwgc2VuZEV2ZW50XSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfT5cbiAgICAgIDxUaXRsZSBjbGFzc05hbWU9e2VtKCd0aXRsZScpKCl9IHNpemU9XCJtXCI+XG4gICAgICAgIHtpc1Jlc3RvcmluZ1Bhc3N3b3JkID8gKFxuICAgICAgICAgIGludGwuZm9ybWF0TWVzc2FnZSh7IGlkOiAnYXV0aC5yZXNldCcgfSlcbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8PlxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tcbiAgICAgICAgICAgICAgICBfX2h0bWw6IGludGwuZm9ybWF0TWVzc2FnZSh7IGlkOiAnYXV0aC5hdXRoT3InIH0pLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxUZXh0QnV0dG9uXG4gICAgICAgICAgICAgIGhyZWY9e3VybHMuUkVHSVNUUkFUSU9OfVxuICAgICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVCdXR0b25TaWduVXBDbGlja31cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge2ludGwuZm9ybWF0TWVzc2FnZSh7IGlkOiAnYXV0aC5zaWduVXAnIH0pfVxuICAgICAgICAgICAgPC9UZXh0QnV0dG9uPlxuICAgICAgICAgICAge2ludGwuZm9ybWF0TWVzc2FnZSh7IGlkOiAnYXV0aC5hdXRoUmVhc29uJyB9KX1cbiAgICAgICAgICA8Lz5cbiAgICAgICAgKX1cbiAgICAgIDwvVGl0bGU+XG4gICAgICB7aXNSZXN0b3JpbmdQYXNzd29yZCA/IChcbiAgICAgICAgPFJlc3RvcmVQYXNzd29yZFxuICAgICAgICAgIHN1Ym1pdExhYmVsPXtpbnRsLmZvcm1hdE1lc3NhZ2UoeyBpZDogJ2F1dGgucmVzZXRQYXNzd29yZCcgfSl9XG4gICAgICAgIC8+XG4gICAgICApIDogKFxuICAgICAgICA8U2lnbkluIGlzQWN0aXZlPXtpc0FjdGl2ZX0gb25TdWJtaXQ9e2hhbmRsZVNpZ25JblN1Ym1pdH0gLz5cbiAgICAgICl9XG4gICAgICA8ZGl2PlxuICAgICAgICA8VGV4dEJ1dHRvblxuICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ2xpbmsnKSgpfVxuICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUJ1dHRvblJlc3RvcmluZ1Bhc3N3b3JkQ2xpY2t9XG4gICAgICAgID5cbiAgICAgICAgICB7aXNSZXN0b3JpbmdQYXNzd29yZFxuICAgICAgICAgICAgPyBpbnRsLmZvcm1hdE1lc3NhZ2UoeyBpZDogJ2F1dGgucmVtZW1iZXJQYXNzd29yZCcgfSlcbiAgICAgICAgICAgIDogaW50bC5mb3JtYXRNZXNzYWdlKHsgaWQ6ICdhdXRoLnJlbWluZFBhc3N3b3JkJyB9KX1cbiAgICAgICAgPC9UZXh0QnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8VGV4dEJ1dHRvblxuICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ2xpbmsnKSgpfVxuICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUJ1dHRvblNraXBDbGlja31cbiAgICAgICAgICB2aWV3PXtWaWV3LkxJR0hUfVxuICAgICAgICA+XG4gICAgICAgICAge2ludGwuZm9ybWF0TWVzc2FnZSh7IGlkOiAnYXV0aC5sb2dpbkxhdGVyJyB9KX1cbiAgICAgICAgPC9UZXh0QnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8cFxuICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ3ByaXZhY3lQb2xpY3knKSgpfVxuICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICAgICAgICBfX2h0bWw6IGludGwuZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICAgICAgeyBpZDogJ2F1dGguc2VjdXJpdHlQb2xpY3knIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwb2xpY3lIcmVmOiB1cmxzLlBSSVZBQ1lfUE9MSUNZLFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApLFxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEF1dGg7XG4iLCJpbXBvcnQgdG9EYXRlIGZyb20gJy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbi8qKlxuICogQG5hbWUgc3RhcnRPZkRheVxuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgZGF5IGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHJldHVybnMge0RhdGV9IHRoZSBzdGFydCBvZiBhIGRheVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhIGRheSBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIHZhciByZXN1bHQgPSBzdGFydE9mRGF5KG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCkpXG4gKiAvLz0+IFR1ZSBTZXAgMDIgMjAxNCAwMDowMDowMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZEYXkoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgeyBnZXRHbG9iYWxPYmplY3QgfSBmcm9tICcuL21pc2MnO1xuaW1wb3J0IHsgZHluYW1pY1JlcXVpcmUsIGlzTm9kZUVudiB9IGZyb20gJy4vbm9kZSc7XG4vKipcbiAqIEEgVGltZXN0YW1wU291cmNlIGltcGxlbWVudGF0aW9uIGZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3Qgc3VwcG9ydCB0aGUgUGVyZm9ybWFuY2UgV2ViIEFQSSBuYXRpdmVseS5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBUaW1lc3RhbXBTb3VyY2UgZG9lcyBub3QgdXNlIGEgbW9ub3RvbmljIGNsb2NrLiBBIGNhbGwgdG8gYG5vd1NlY29uZHNgIG1heSByZXR1cm4gYSB0aW1lc3RhbXAgZWFybGllclxuICogdGhhbiBhIHByZXZpb3VzbHkgcmV0dXJuZWQgdmFsdWUuIFdlIGRvIG5vdCB0cnkgdG8gZW11bGF0ZSBhIG1vbm90b25pYyBiZWhhdmlvciBpbiBvcmRlciB0byBmYWNpbGl0YXRlIGRlYnVnZ2luZy4gSXRcbiAqIGlzIG1vcmUgb2J2aW91cyB0byBleHBsYWluIFwid2h5IGRvZXMgbXkgc3BhbiBoYXZlIG5lZ2F0aXZlIGR1cmF0aW9uXCIgdGhhbiBcIndoeSBteSBzcGFucyBoYXZlIHplcm8gZHVyYXRpb25cIi5cbiAqL1xudmFyIGRhdGVUaW1lc3RhbXBTb3VyY2UgPSB7XG4gICAgbm93U2Vjb25kczogZnVuY3Rpb24gKCkgeyByZXR1cm4gRGF0ZS5ub3coKSAvIDEwMDA7IH0sXG59O1xuLyoqXG4gKiBSZXR1cm5zIGEgd3JhcHBlciBhcm91bmQgdGhlIG5hdGl2ZSBQZXJmb3JtYW5jZSBBUEkgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiwgb3IgdW5kZWZpbmVkIGZvciBicm93c2VycyB0aGF0IGRvIG5vdFxuICogc3VwcG9ydCB0aGUgQVBJLlxuICpcbiAqIFdyYXBwaW5nIHRoZSBuYXRpdmUgQVBJIHdvcmtzIGFyb3VuZCBkaWZmZXJlbmNlcyBpbiBiZWhhdmlvciBmcm9tIGRpZmZlcmVudCBicm93c2Vycy5cbiAqL1xuZnVuY3Rpb24gZ2V0QnJvd3NlclBlcmZvcm1hbmNlKCkge1xuICAgIHZhciBwZXJmb3JtYW5jZSA9IGdldEdsb2JhbE9iamVjdCgpLnBlcmZvcm1hbmNlO1xuICAgIGlmICghcGVyZm9ybWFuY2UgfHwgIXBlcmZvcm1hbmNlLm5vdykge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLyBSZXBsYWNlIHBlcmZvcm1hbmNlLnRpbWVPcmlnaW4gd2l0aCBvdXIgb3duIHRpbWVPcmlnaW4gYmFzZWQgb24gRGF0ZS5ub3coKS5cbiAgICAvL1xuICAgIC8vIFRoaXMgaXMgYSBwYXJ0aWFsIHdvcmthcm91bmQgZm9yIGJyb3dzZXJzIHJlcG9ydGluZyBwZXJmb3JtYW5jZS50aW1lT3JpZ2luIHN1Y2ggdGhhdCBwZXJmb3JtYW5jZS50aW1lT3JpZ2luICtcbiAgICAvLyBwZXJmb3JtYW5jZS5ub3coKSBnaXZlcyBhIGRhdGUgYXJiaXRyYXJpbHkgaW4gdGhlIHBhc3QuXG4gICAgLy9cbiAgICAvLyBBZGRpdGlvbmFsbHksIGNvbXB1dGluZyB0aW1lT3JpZ2luIGluIHRoaXMgd2F5IGZpbGxzIHRoZSBnYXAgZm9yIGJyb3dzZXJzIHdoZXJlIHBlcmZvcm1hbmNlLnRpbWVPcmlnaW4gaXNcbiAgICAvLyB1bmRlZmluZWQuXG4gICAgLy9cbiAgICAvLyBUaGUgYXNzdW1wdGlvbiB0aGF0IHBlcmZvcm1hbmNlLnRpbWVPcmlnaW4gKyBwZXJmb3JtYW5jZS5ub3coKSB+PSBEYXRlLm5vdygpIGlzIGZsYXdlZCwgYnV0IHdlIGRlcGVuZCBvbiBpdCB0b1xuICAgIC8vIGludGVyYWN0IHdpdGggZGF0YSBjb21pbmcgb3V0IG9mIHBlcmZvcm1hbmNlIGVudHJpZXMuXG4gICAgLy9cbiAgICAvLyBOb3RlIHRoYXQgZGVzcGl0ZSByZWNvbW1lbmRhdGlvbnMgYWdhaW5zdCBpdCBpbiB0aGUgc3BlYywgYnJvd3NlcnMgaW1wbGVtZW50IHRoZSBQZXJmb3JtYW5jZSBBUEkgd2l0aCBhIGNsb2NrIHRoYXRcbiAgICAvLyBtaWdodCBzdG9wIHdoZW4gdGhlIGNvbXB1dGVyIGlzIGFzbGVlcCAoYW5kIHBlcmhhcHMgdW5kZXIgb3RoZXIgY2lyY3Vtc3RhbmNlcykuIFN1Y2ggYmVoYXZpb3IgY2F1c2VzXG4gICAgLy8gcGVyZm9ybWFuY2UudGltZU9yaWdpbiArIHBlcmZvcm1hbmNlLm5vdygpIHRvIGhhdmUgYW4gYXJiaXRyYXJ5IHNrZXcgb3ZlciBEYXRlLm5vdygpLiBJbiBsYXB0b3AgY29tcHV0ZXJzLCB3ZSBoYXZlXG4gICAgLy8gb2JzZXJ2ZWQgc2tld3MgdGhhdCBjYW4gYmUgYXMgbG9uZyBhcyBkYXlzLCB3ZWVrcyBvciBtb250aHMuXG4gICAgLy9cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvMjU5MC5cbiAgICAvL1xuICAgIC8vIEJVRzogZGVzcGl0ZSBvdXIgYmVzdCBpbnRlbnRpb25zLCB0aGlzIHdvcmthcm91bmQgaGFzIGl0cyBsaW1pdGF0aW9ucy4gSXQgbW9zdGx5IGFkZHJlc3NlcyB0aW1pbmdzIG9mIHBhZ2Vsb2FkXG4gICAgLy8gdHJhbnNhY3Rpb25zLCBidXQgaWdub3JlcyB0aGUgc2tldyBidWlsdCB1cCBvdmVyIHRpbWUgdGhhdCBjYW4gYXZlcnNlbHkgYWZmZWN0IHRpbWVzdGFtcHMgb2YgbmF2aWdhdGlvblxuICAgIC8vIHRyYW5zYWN0aW9ucyBvZiBsb25nLWxpdmVkIHdlYiBwYWdlcy5cbiAgICB2YXIgdGltZU9yaWdpbiA9IERhdGUubm93KCkgLSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBub3c6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpOyB9LFxuICAgICAgICB0aW1lT3JpZ2luOiB0aW1lT3JpZ2luLFxuICAgIH07XG59XG4vKipcbiAqIFJldHVybnMgdGhlIG5hdGl2ZSBQZXJmb3JtYW5jZSBBUEkgaW1wbGVtZW50YXRpb24gZnJvbSBOb2RlLmpzLiBSZXR1cm5zIHVuZGVmaW5lZCBpbiBvbGQgTm9kZS5qcyB2ZXJzaW9ucyB0aGF0IGRvbid0XG4gKiBpbXBsZW1lbnQgdGhlIEFQSS5cbiAqL1xuZnVuY3Rpb24gZ2V0Tm9kZVBlcmZvcm1hbmNlKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHZhciBwZXJmSG9va3MgPSBkeW5hbWljUmVxdWlyZShtb2R1bGUsICdwZXJmX2hvb2tzJyk7XG4gICAgICAgIHJldHVybiBwZXJmSG9va3MucGVyZm9ybWFuY2U7XG4gICAgfVxuICAgIGNhdGNoIChfKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuLyoqXG4gKiBUaGUgUGVyZm9ybWFuY2UgQVBJIGltcGxlbWVudGF0aW9uIGZvciB0aGUgY3VycmVudCBwbGF0Zm9ybSwgaWYgYXZhaWxhYmxlLlxuICovXG52YXIgcGxhdGZvcm1QZXJmb3JtYW5jZSA9IGlzTm9kZUVudigpID8gZ2V0Tm9kZVBlcmZvcm1hbmNlKCkgOiBnZXRCcm93c2VyUGVyZm9ybWFuY2UoKTtcbnZhciB0aW1lc3RhbXBTb3VyY2UgPSBwbGF0Zm9ybVBlcmZvcm1hbmNlID09PSB1bmRlZmluZWRcbiAgICA/IGRhdGVUaW1lc3RhbXBTb3VyY2VcbiAgICA6IHtcbiAgICAgICAgbm93U2Vjb25kczogZnVuY3Rpb24gKCkgeyByZXR1cm4gKHBsYXRmb3JtUGVyZm9ybWFuY2UudGltZU9yaWdpbiArIHBsYXRmb3JtUGVyZm9ybWFuY2Uubm93KCkpIC8gMTAwMDsgfSxcbiAgICB9O1xuLyoqXG4gKiBSZXR1cm5zIGEgdGltZXN0YW1wIGluIHNlY29uZHMgc2luY2UgdGhlIFVOSVggZXBvY2ggdXNpbmcgdGhlIERhdGUgQVBJLlxuICovXG5leHBvcnQgdmFyIGRhdGVUaW1lc3RhbXBJblNlY29uZHMgPSBkYXRlVGltZXN0YW1wU291cmNlLm5vd1NlY29uZHMuYmluZChkYXRlVGltZXN0YW1wU291cmNlKTtcbi8qKlxuICogUmV0dXJucyBhIHRpbWVzdGFtcCBpbiBzZWNvbmRzIHNpbmNlIHRoZSBVTklYIGVwb2NoIHVzaW5nIGVpdGhlciB0aGUgUGVyZm9ybWFuY2Ugb3IgRGF0ZSBBUElzLCBkZXBlbmRpbmcgb24gdGhlXG4gKiBhdmFpbGFiaWxpdHkgb2YgdGhlIFBlcmZvcm1hbmNlIEFQSS5cbiAqXG4gKiBTZWUgYHVzaW5nUGVyZm9ybWFuY2VBUElgIHRvIHRlc3Qgd2hldGhlciB0aGUgUGVyZm9ybWFuY2UgQVBJIGlzIHVzZWQuXG4gKlxuICogQlVHOiBOb3RlIHRoYXQgYmVjYXVzZSBvZiBob3cgYnJvd3NlcnMgaW1wbGVtZW50IHRoZSBQZXJmb3JtYW5jZSBBUEksIHRoZSBjbG9jayBtaWdodCBzdG9wIHdoZW4gdGhlIGNvbXB1dGVyIGlzXG4gKiBhc2xlZXAuIFRoaXMgY3JlYXRlcyBhIHNrZXcgYmV0d2VlbiBgZGF0ZVRpbWVzdGFtcEluU2Vjb25kc2AgYW5kIGB0aW1lc3RhbXBJblNlY29uZHNgLiBUaGVcbiAqIHNrZXcgY2FuIGdyb3cgdG8gYXJiaXRyYXJ5IGFtb3VudHMgbGlrZSBkYXlzLCB3ZWVrcyBvciBtb250aHMuXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvMjU5MC5cbiAqL1xuZXhwb3J0IHZhciB0aW1lc3RhbXBJblNlY29uZHMgPSB0aW1lc3RhbXBTb3VyY2Uubm93U2Vjb25kcy5iaW5kKHRpbWVzdGFtcFNvdXJjZSk7XG4vLyBSZS1leHBvcnRlZCB3aXRoIGFuIG9sZCBuYW1lIGZvciBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eS5cbmV4cG9ydCB2YXIgdGltZXN0YW1wV2l0aE1zID0gdGltZXN0YW1wSW5TZWNvbmRzO1xuLyoqXG4gKiBBIGJvb2xlYW4gdGhhdCBpcyB0cnVlIHdoZW4gdGltZXN0YW1wSW5TZWNvbmRzIHVzZXMgdGhlIFBlcmZvcm1hbmNlIEFQSSB0byBwcm9kdWNlIG1vbm90b25pYyB0aW1lc3RhbXBzLlxuICovXG5leHBvcnQgdmFyIHVzaW5nUGVyZm9ybWFuY2VBUEkgPSBwbGF0Zm9ybVBlcmZvcm1hbmNlICE9PSB1bmRlZmluZWQ7XG4vKipcbiAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHNpbmNlIHRoZSBVTklYIGVwb2NoLiBUaGlzIHZhbHVlIGlzIG9ubHkgdXNhYmxlIGluIGEgYnJvd3NlciwgYW5kIG9ubHkgd2hlbiB0aGVcbiAqIHBlcmZvcm1hbmNlIEFQSSBpcyBhdmFpbGFibGUuXG4gKi9cbmV4cG9ydCB2YXIgYnJvd3NlclBlcmZvcm1hbmNlVGltZU9yaWdpbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBlcmZvcm1hbmNlID0gZ2V0R2xvYmFsT2JqZWN0KCkucGVyZm9ybWFuY2U7XG4gICAgaWYgKCFwZXJmb3JtYW5jZSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAocGVyZm9ybWFuY2UudGltZU9yaWdpbikge1xuICAgICAgICByZXR1cm4gcGVyZm9ybWFuY2UudGltZU9yaWdpbjtcbiAgICB9XG4gICAgLy8gV2hpbGUgcGVyZm9ybWFuY2UudGltaW5nLm5hdmlnYXRpb25TdGFydCBpcyBkZXByZWNhdGVkIGluIGZhdm9yIG9mIHBlcmZvcm1hbmNlLnRpbWVPcmlnaW4sIHBlcmZvcm1hbmNlLnRpbWVPcmlnaW5cbiAgICAvLyBpcyBub3QgYXMgd2lkZWx5IHN1cHBvcnRlZC4gTmFtZWx5LCBwZXJmb3JtYW5jZS50aW1lT3JpZ2luIGlzIHVuZGVmaW5lZCBpbiBTYWZhcmkgYXMgb2Ygd3JpdGluZy5cbiAgICAvLyBBbHNvIGFzIG9mIHdyaXRpbmcsIHBlcmZvcm1hbmNlLnRpbWluZyBpcyBub3QgYXZhaWxhYmxlIGluIFdlYiBXb3JrZXJzIGluIG1haW5zdHJlYW0gYnJvd3NlcnMsIHNvIGl0IGlzIG5vdCBhbHdheXNcbiAgICAvLyBhIHZhbGlkIGZhbGxiYWNrLiBJbiB0aGUgYWJzZW5jZSBvZiBhbiBpbml0aWFsIHRpbWUgcHJvdmlkZWQgYnkgdGhlIGJyb3dzZXIsIGZhbGxiYWNrIHRvIHRoZSBjdXJyZW50IHRpbWUgZnJvbSB0aGVcbiAgICAvLyBEYXRlIEFQSS5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICByZXR1cm4gKHBlcmZvcm1hbmNlLnRpbWluZyAmJiBwZXJmb3JtYW5jZS50aW1pbmcubmF2aWdhdGlvblN0YXJ0KSB8fCBEYXRlLm5vdygpO1xufSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWUuanMubWFwIiwiZXhwb3J0IGVudW0gQnJvd3NlciB7XG4gIENIUk9NRSA9ICdjaHJvbWUnLFxuICBFREdFID0gJ2VkZ2UnLFxuICBGSVJFRk9YID0gJ2ZpcmVmb3gnLFxuICBPUEVSQSA9ICdvcGVyYScsXG59XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdDtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgZGlzYWJsZWQ6IGZhbHNlXG59OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyB0aW1lb3V0c1NoYXBlIH0gZnJvbSAnLi91dGlscy9Qcm9wVHlwZXMnO1xuaW1wb3J0IFRyYW5zaXRpb25Hcm91cENvbnRleHQgZnJvbSAnLi9UcmFuc2l0aW9uR3JvdXBDb250ZXh0JztcbmV4cG9ydCB2YXIgVU5NT1VOVEVEID0gJ3VubW91bnRlZCc7XG5leHBvcnQgdmFyIEVYSVRFRCA9ICdleGl0ZWQnO1xuZXhwb3J0IHZhciBFTlRFUklORyA9ICdlbnRlcmluZyc7XG5leHBvcnQgdmFyIEVOVEVSRUQgPSAnZW50ZXJlZCc7XG5leHBvcnQgdmFyIEVYSVRJTkcgPSAnZXhpdGluZyc7XG4vKipcbiAqIFRoZSBUcmFuc2l0aW9uIGNvbXBvbmVudCBsZXRzIHlvdSBkZXNjcmliZSBhIHRyYW5zaXRpb24gZnJvbSBvbmUgY29tcG9uZW50XG4gKiBzdGF0ZSB0byBhbm90aGVyIF9vdmVyIHRpbWVfIHdpdGggYSBzaW1wbGUgZGVjbGFyYXRpdmUgQVBJLiBNb3N0IGNvbW1vbmx5XG4gKiBpdCdzIHVzZWQgdG8gYW5pbWF0ZSB0aGUgbW91bnRpbmcgYW5kIHVubW91bnRpbmcgb2YgYSBjb21wb25lbnQsIGJ1dCBjYW4gYWxzb1xuICogYmUgdXNlZCB0byBkZXNjcmliZSBpbi1wbGFjZSB0cmFuc2l0aW9uIHN0YXRlcyBhcyB3ZWxsLlxuICpcbiAqIC0tLVxuICpcbiAqICoqTm90ZSoqOiBgVHJhbnNpdGlvbmAgaXMgYSBwbGF0Zm9ybS1hZ25vc3RpYyBiYXNlIGNvbXBvbmVudC4gSWYgeW91J3JlIHVzaW5nXG4gKiB0cmFuc2l0aW9ucyBpbiBDU1MsIHlvdSdsbCBwcm9iYWJseSB3YW50IHRvIHVzZVxuICogW2BDU1NUcmFuc2l0aW9uYF0oaHR0cHM6Ly9yZWFjdGNvbW11bml0eS5vcmcvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9jc3MtdHJhbnNpdGlvbilcbiAqIGluc3RlYWQuIEl0IGluaGVyaXRzIGFsbCB0aGUgZmVhdHVyZXMgb2YgYFRyYW5zaXRpb25gLCBidXQgY29udGFpbnNcbiAqIGFkZGl0aW9uYWwgZmVhdHVyZXMgbmVjZXNzYXJ5IHRvIHBsYXkgbmljZSB3aXRoIENTUyB0cmFuc2l0aW9ucyAoaGVuY2UgdGhlXG4gKiBuYW1lIG9mIHRoZSBjb21wb25lbnQpLlxuICpcbiAqIC0tLVxuICpcbiAqIEJ5IGRlZmF1bHQgdGhlIGBUcmFuc2l0aW9uYCBjb21wb25lbnQgZG9lcyBub3QgYWx0ZXIgdGhlIGJlaGF2aW9yIG9mIHRoZVxuICogY29tcG9uZW50IGl0IHJlbmRlcnMsIGl0IG9ubHkgdHJhY2tzIFwiZW50ZXJcIiBhbmQgXCJleGl0XCIgc3RhdGVzIGZvciB0aGVcbiAqIGNvbXBvbmVudHMuIEl0J3MgdXAgdG8geW91IHRvIGdpdmUgbWVhbmluZyBhbmQgZWZmZWN0IHRvIHRob3NlIHN0YXRlcy4gRm9yXG4gKiBleGFtcGxlIHdlIGNhbiBhZGQgc3R5bGVzIHRvIGEgY29tcG9uZW50IHdoZW4gaXQgZW50ZXJzIG9yIGV4aXRzOlxuICpcbiAqIGBgYGpzeFxuICogaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuICpcbiAqIGNvbnN0IGR1cmF0aW9uID0gMzAwO1xuICpcbiAqIGNvbnN0IGRlZmF1bHRTdHlsZSA9IHtcbiAqICAgdHJhbnNpdGlvbjogYG9wYWNpdHkgJHtkdXJhdGlvbn1tcyBlYXNlLWluLW91dGAsXG4gKiAgIG9wYWNpdHk6IDAsXG4gKiB9XG4gKlxuICogY29uc3QgdHJhbnNpdGlvblN0eWxlcyA9IHtcbiAqICAgZW50ZXJpbmc6IHsgb3BhY2l0eTogMSB9LFxuICogICBlbnRlcmVkOiAgeyBvcGFjaXR5OiAxIH0sXG4gKiAgIGV4aXRpbmc6ICB7IG9wYWNpdHk6IDAgfSxcbiAqICAgZXhpdGVkOiAgeyBvcGFjaXR5OiAwIH0sXG4gKiB9O1xuICpcbiAqIGNvbnN0IEZhZGUgPSAoeyBpbjogaW5Qcm9wIH0pID0+IChcbiAqICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17ZHVyYXRpb259PlxuICogICAgIHtzdGF0ZSA9PiAoXG4gKiAgICAgICA8ZGl2IHN0eWxlPXt7XG4gKiAgICAgICAgIC4uLmRlZmF1bHRTdHlsZSxcbiAqICAgICAgICAgLi4udHJhbnNpdGlvblN0eWxlc1tzdGF0ZV1cbiAqICAgICAgIH19PlxuICogICAgICAgICBJJ20gYSBmYWRlIFRyYW5zaXRpb24hXG4gKiAgICAgICA8L2Rpdj5cbiAqICAgICApfVxuICogICA8L1RyYW5zaXRpb24+XG4gKiApO1xuICogYGBgXG4gKlxuICogVGhlcmUgYXJlIDQgbWFpbiBzdGF0ZXMgYSBUcmFuc2l0aW9uIGNhbiBiZSBpbjpcbiAqICAtIGAnZW50ZXJpbmcnYFxuICogIC0gYCdlbnRlcmVkJ2BcbiAqICAtIGAnZXhpdGluZydgXG4gKiAgLSBgJ2V4aXRlZCdgXG4gKlxuICogVHJhbnNpdGlvbiBzdGF0ZSBpcyB0b2dnbGVkIHZpYSB0aGUgYGluYCBwcm9wLiBXaGVuIGB0cnVlYCB0aGUgY29tcG9uZW50XG4gKiBiZWdpbnMgdGhlIFwiRW50ZXJcIiBzdGFnZS4gRHVyaW5nIHRoaXMgc3RhZ2UsIHRoZSBjb21wb25lbnQgd2lsbCBzaGlmdCBmcm9tXG4gKiBpdHMgY3VycmVudCB0cmFuc2l0aW9uIHN0YXRlLCB0byBgJ2VudGVyaW5nJ2AgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGVcbiAqIHRyYW5zaXRpb24gYW5kIHRoZW4gdG8gdGhlIGAnZW50ZXJlZCdgIHN0YWdlIG9uY2UgaXQncyBjb21wbGV0ZS4gTGV0J3MgdGFrZVxuICogdGhlIGZvbGxvd2luZyBleGFtcGxlICh3ZSdsbCB1c2UgdGhlXG4gKiBbdXNlU3RhdGVdKGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9ob29rcy1yZWZlcmVuY2UuaHRtbCN1c2VzdGF0ZSkgaG9vayk6XG4gKlxuICogYGBganN4XG4gKiBmdW5jdGlvbiBBcHAoKSB7XG4gKiAgIGNvbnN0IFtpblByb3AsIHNldEluUHJvcF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gKiAgIHJldHVybiAoXG4gKiAgICAgPGRpdj5cbiAqICAgICAgIDxUcmFuc2l0aW9uIGluPXtpblByb3B9IHRpbWVvdXQ9ezUwMH0+XG4gKiAgICAgICAgIHtzdGF0ZSA9PiAoXG4gKiAgICAgICAgICAgLy8gLi4uXG4gKiAgICAgICAgICl9XG4gKiAgICAgICA8L1RyYW5zaXRpb24+XG4gKiAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHNldEluUHJvcCh0cnVlKX0+XG4gKiAgICAgICAgIENsaWNrIHRvIEVudGVyXG4gKiAgICAgICA8L2J1dHRvbj5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkIHRoZSBjb21wb25lbnQgd2lsbCBzaGlmdCB0byB0aGUgYCdlbnRlcmluZydgIHN0YXRlXG4gKiBhbmQgc3RheSB0aGVyZSBmb3IgNTAwbXMgKHRoZSB2YWx1ZSBvZiBgdGltZW91dGApIGJlZm9yZSBpdCBmaW5hbGx5IHN3aXRjaGVzXG4gKiB0byBgJ2VudGVyZWQnYC5cbiAqXG4gKiBXaGVuIGBpbmAgaXMgYGZhbHNlYCB0aGUgc2FtZSB0aGluZyBoYXBwZW5zIGV4Y2VwdCB0aGUgc3RhdGUgbW92ZXMgZnJvbVxuICogYCdleGl0aW5nJ2AgdG8gYCdleGl0ZWQnYC5cbiAqL1xuXG52YXIgVHJhbnNpdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUcmFuc2l0aW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgdmFyIHBhcmVudEdyb3VwID0gY29udGV4dDsgLy8gSW4gdGhlIGNvbnRleHQgb2YgYSBUcmFuc2l0aW9uR3JvdXAgYWxsIGVudGVycyBhcmUgcmVhbGx5IGFwcGVhcnNcblxuICAgIHZhciBhcHBlYXIgPSBwYXJlbnRHcm91cCAmJiAhcGFyZW50R3JvdXAuaXNNb3VudGluZyA/IHByb3BzLmVudGVyIDogcHJvcHMuYXBwZWFyO1xuICAgIHZhciBpbml0aWFsU3RhdHVzO1xuICAgIF90aGlzLmFwcGVhclN0YXR1cyA9IG51bGw7XG5cbiAgICBpZiAocHJvcHMuaW4pIHtcbiAgICAgIGlmIChhcHBlYXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVYSVRFRDtcbiAgICAgICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gRU5URVJJTkc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRU5URVJFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb3BzLnVubW91bnRPbkV4aXQgfHwgcHJvcHMubW91bnRPbkVudGVyKSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBVTk1PVU5URUQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgfVxuICAgIH1cblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgc3RhdHVzOiBpbml0aWFsU3RhdHVzXG4gICAgfTtcbiAgICBfdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFRyYW5zaXRpb24uZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKF9yZWYsIHByZXZTdGF0ZSkge1xuICAgIHZhciBuZXh0SW4gPSBfcmVmLmluO1xuXG4gICAgaWYgKG5leHRJbiAmJiBwcmV2U3RhdGUuc3RhdHVzID09PSBVTk1PVU5URUQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9IC8vIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHByZXZQcm9wcykge1xuICAvLyAgIGxldCBuZXh0U3RhdHVzID0gbnVsbFxuICAvLyAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgLy8gICAgIGNvbnN0IHsgc3RhdHVzIH0gPSB0aGlzLnN0YXRlXG4gIC8vICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAvLyAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfSBlbHNlIHtcbiAgLy8gICAgICAgaWYgKHN0YXR1cyA9PT0gRU5URVJJTkcgfHwgc3RhdHVzID09PSBFTlRFUkVEKSB7XG4gIC8vICAgICAgICAgbmV4dFN0YXR1cyA9IEVYSVRJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gICByZXR1cm4geyBuZXh0U3RhdHVzIH1cbiAgLy8gfVxuICA7XG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMudXBkYXRlU3RhdHVzKHRydWUsIHRoaXMuYXBwZWFyU3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciBuZXh0U3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgICAgaWYgKHRoaXMucHJvcHMuaW4pIHtcbiAgICAgICAgaWYgKHN0YXR1cyAhPT0gRU5URVJJTkcgJiYgc3RhdHVzICE9PSBFTlRFUkVEKSB7XG4gICAgICAgICAgbmV4dFN0YXR1cyA9IEVOVEVSSU5HO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElORztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudXBkYXRlU3RhdHVzKGZhbHNlLCBuZXh0U3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuICB9O1xuXG4gIF9wcm90by5nZXRUaW1lb3V0cyA9IGZ1bmN0aW9uIGdldFRpbWVvdXRzKCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5wcm9wcy50aW1lb3V0O1xuICAgIHZhciBleGl0LCBlbnRlciwgYXBwZWFyO1xuICAgIGV4aXQgPSBlbnRlciA9IGFwcGVhciA9IHRpbWVvdXQ7XG5cbiAgICBpZiAodGltZW91dCAhPSBudWxsICYmIHR5cGVvZiB0aW1lb3V0ICE9PSAnbnVtYmVyJykge1xuICAgICAgZXhpdCA9IHRpbWVvdXQuZXhpdDtcbiAgICAgIGVudGVyID0gdGltZW91dC5lbnRlcjsgLy8gVE9ETzogcmVtb3ZlIGZhbGxiYWNrIGZvciBuZXh0IG1ham9yXG5cbiAgICAgIGFwcGVhciA9IHRpbWVvdXQuYXBwZWFyICE9PSB1bmRlZmluZWQgPyB0aW1lb3V0LmFwcGVhciA6IGVudGVyO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBleGl0OiBleGl0LFxuICAgICAgZW50ZXI6IGVudGVyLFxuICAgICAgYXBwZWFyOiBhcHBlYXJcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVTdGF0dXMgPSBmdW5jdGlvbiB1cGRhdGVTdGF0dXMobW91bnRpbmcsIG5leHRTdGF0dXMpIHtcbiAgICBpZiAobW91bnRpbmcgPT09IHZvaWQgMCkge1xuICAgICAgbW91bnRpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAobmV4dFN0YXR1cyAhPT0gbnVsbCkge1xuICAgICAgLy8gbmV4dFN0YXR1cyB3aWxsIGFsd2F5cyBiZSBFTlRFUklORyBvciBFWElUSU5HLlxuICAgICAgdGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKTtcblxuICAgICAgaWYgKG5leHRTdGF0dXMgPT09IEVOVEVSSU5HKSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUVudGVyKG1vdW50aW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUV4aXQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMudW5tb3VudE9uRXhpdCAmJiB0aGlzLnN0YXRlLnN0YXR1cyA9PT0gRVhJVEVEKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBVTk1PVU5URURcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUVudGVyID0gZnVuY3Rpb24gcGVyZm9ybUVudGVyKG1vdW50aW5nKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgZW50ZXIgPSB0aGlzLnByb3BzLmVudGVyO1xuICAgIHZhciBhcHBlYXJpbmcgPSB0aGlzLmNvbnRleHQgPyB0aGlzLmNvbnRleHQuaXNNb3VudGluZyA6IG1vdW50aW5nO1xuXG4gICAgdmFyIF9yZWYyID0gdGhpcy5wcm9wcy5ub2RlUmVmID8gW2FwcGVhcmluZ10gOiBbUmVhY3RET00uZmluZERPTU5vZGUodGhpcyksIGFwcGVhcmluZ10sXG4gICAgICAgIG1heWJlTm9kZSA9IF9yZWYyWzBdLFxuICAgICAgICBtYXliZUFwcGVhcmluZyA9IF9yZWYyWzFdO1xuXG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBlbnRlclRpbWVvdXQgPSBhcHBlYXJpbmcgPyB0aW1lb3V0cy5hcHBlYXIgOiB0aW1lb3V0cy5lbnRlcjsgLy8gbm8gZW50ZXIgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRU5URVJFRFxuICAgIC8vIGlmIHdlIGFyZSBtb3VudGluZyBhbmQgcnVubmluZyB0aGlzIGl0IG1lYW5zIGFwcGVhciBfbXVzdF8gYmUgc2V0XG5cbiAgICBpZiAoIW1vdW50aW5nICYmICFlbnRlciB8fCBjb25maWcuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobWF5YmVOb2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FbnRlcihtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVOVEVSSU5HXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJpbmcobWF5YmVOb2RlLCBtYXliZUFwcGVhcmluZyk7XG5cbiAgICAgIF90aGlzMi5vblRyYW5zaXRpb25FbmQoZW50ZXJUaW1lb3V0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRU5URVJFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUV4aXQgPSBmdW5jdGlvbiBwZXJmb3JtRXhpdCgpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBleGl0ID0gdGhpcy5wcm9wcy5leGl0O1xuICAgIHZhciB0aW1lb3V0cyA9IHRoaXMuZ2V0VGltZW91dHMoKTtcbiAgICB2YXIgbWF5YmVOb2RlID0gdGhpcy5wcm9wcy5ub2RlUmVmID8gdW5kZWZpbmVkIDogUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7IC8vIG5vIGV4aXQgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRVhJVEVEXG5cbiAgICBpZiAoIWV4aXQgfHwgY29uZmlnLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRlZChtYXliZU5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkV4aXQobWF5YmVOb2RlKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVYSVRJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczMucHJvcHMub25FeGl0aW5nKG1heWJlTm9kZSk7XG5cbiAgICAgIF90aGlzMy5vblRyYW5zaXRpb25FbmQodGltZW91dHMuZXhpdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG1heWJlTm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNhbmNlbE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIGNhbmNlbE5leHRDYWxsYmFjaygpIHtcbiAgICBpZiAodGhpcy5uZXh0Q2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCgpO1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2FmZVNldFN0YXRlID0gZnVuY3Rpb24gc2FmZVNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAvLyBUaGlzIHNob3VsZG4ndCBiZSBuZWNlc3NhcnksIGJ1dCB0aGVyZSBhcmUgd2VpcmQgcmFjZSBjb25kaXRpb25zIHdpdGhcbiAgICAvLyBzZXRTdGF0ZSBjYWxsYmFja3MgYW5kIHVubW91bnRpbmcgaW4gdGVzdGluZywgc28gYWx3YXlzIG1ha2Ugc3VyZSB0aGF0XG4gICAgLy8gd2UgY2FuIGNhbmNlbCBhbnkgcGVuZGluZyBzZXRTdGF0ZSBjYWxsYmFja3MgYWZ0ZXIgd2UgdW5tb3VudC5cbiAgICBjYWxsYmFjayA9IHRoaXMuc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spO1xuICB9O1xuXG4gIF9wcm90by5zZXROZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBzZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBhY3RpdmUgPSB0cnVlO1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIF90aGlzNC5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5uZXh0Q2FsbGJhY2s7XG4gIH07XG5cbiAgX3Byb3RvLm9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCh0aW1lb3V0LCBoYW5kbGVyKSB7XG4gICAgdGhpcy5zZXROZXh0Q2FsbGJhY2soaGFuZGxlcik7XG4gICAgdmFyIG5vZGUgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyB0aGlzLnByb3BzLm5vZGVSZWYuY3VycmVudCA6IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpO1xuICAgIHZhciBkb2VzTm90SGF2ZVRpbWVvdXRPckxpc3RlbmVyID0gdGltZW91dCA9PSBudWxsICYmICF0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyO1xuXG4gICAgaWYgKCFub2RlIHx8IGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIDApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKSB7XG4gICAgICB2YXIgX3JlZjMgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyBbdGhpcy5uZXh0Q2FsbGJhY2tdIDogW25vZGUsIHRoaXMubmV4dENhbGxiYWNrXSxcbiAgICAgICAgICBtYXliZU5vZGUgPSBfcmVmM1swXSxcbiAgICAgICAgICBtYXliZU5leHRDYWxsYmFjayA9IF9yZWYzWzFdO1xuXG4gICAgICB0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKG1heWJlTm9kZSwgbWF5YmVOZXh0Q2FsbGJhY2spO1xuICAgIH1cblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIHRpbWVvdXQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgIGlmIChzdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgX2luID0gX3RoaXMkcHJvcHMuaW4sXG4gICAgICAgIF9tb3VudE9uRW50ZXIgPSBfdGhpcyRwcm9wcy5tb3VudE9uRW50ZXIsXG4gICAgICAgIF91bm1vdW50T25FeGl0ID0gX3RoaXMkcHJvcHMudW5tb3VudE9uRXhpdCxcbiAgICAgICAgX2FwcGVhciA9IF90aGlzJHByb3BzLmFwcGVhcixcbiAgICAgICAgX2VudGVyID0gX3RoaXMkcHJvcHMuZW50ZXIsXG4gICAgICAgIF9leGl0ID0gX3RoaXMkcHJvcHMuZXhpdCxcbiAgICAgICAgX3RpbWVvdXQgPSBfdGhpcyRwcm9wcy50aW1lb3V0LFxuICAgICAgICBfYWRkRW5kTGlzdGVuZXIgPSBfdGhpcyRwcm9wcy5hZGRFbmRMaXN0ZW5lcixcbiAgICAgICAgX29uRW50ZXIgPSBfdGhpcyRwcm9wcy5vbkVudGVyLFxuICAgICAgICBfb25FbnRlcmluZyA9IF90aGlzJHByb3BzLm9uRW50ZXJpbmcsXG4gICAgICAgIF9vbkVudGVyZWQgPSBfdGhpcyRwcm9wcy5vbkVudGVyZWQsXG4gICAgICAgIF9vbkV4aXQgPSBfdGhpcyRwcm9wcy5vbkV4aXQsXG4gICAgICAgIF9vbkV4aXRpbmcgPSBfdGhpcyRwcm9wcy5vbkV4aXRpbmcsXG4gICAgICAgIF9vbkV4aXRlZCA9IF90aGlzJHByb3BzLm9uRXhpdGVkLFxuICAgICAgICBfbm9kZVJlZiA9IF90aGlzJHByb3BzLm5vZGVSZWYsXG4gICAgICAgIGNoaWxkUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJpblwiLCBcIm1vdW50T25FbnRlclwiLCBcInVubW91bnRPbkV4aXRcIiwgXCJhcHBlYXJcIiwgXCJlbnRlclwiLCBcImV4aXRcIiwgXCJ0aW1lb3V0XCIsIFwiYWRkRW5kTGlzdGVuZXJcIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGluZ1wiLCBcIm9uRXhpdGVkXCIsIFwibm9kZVJlZlwiXSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgLyojX19QVVJFX18qL1xuICAgICAgLy8gYWxsb3dzIGZvciBuZXN0ZWQgVHJhbnNpdGlvbnNcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogbnVsbFxuICAgICAgfSwgdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4oc3RhdHVzLCBjaGlsZFByb3BzKSA6IFJlYWN0LmNsb25lRWxlbWVudChSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSwgY2hpbGRQcm9wcykpXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbi5jb250ZXh0VHlwZSA9IFRyYW5zaXRpb25Hcm91cENvbnRleHQ7XG5UcmFuc2l0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIEEgUmVhY3QgcmVmZXJlbmNlIHRvIERPTSBlbGVtZW50IHRoYXQgbmVlZCB0byB0cmFuc2l0aW9uOlxuICAgKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTExMjcxMzAvNDY3MTkzMlxuICAgKlxuICAgKiAgIC0gV2hlbiBgbm9kZVJlZmAgcHJvcCBpcyB1c2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZCB0byBjYWxsYmFjayBmdW5jdGlvbnNcbiAgICogICAgICAoZS5nLiBgb25FbnRlcmApIGJlY2F1c2UgdXNlciBhbHJlYWR5IGhhcyBkaXJlY3QgYWNjZXNzIHRvIHRoZSBub2RlLlxuICAgKiAgIC0gV2hlbiBjaGFuZ2luZyBga2V5YCBwcm9wIG9mIGBUcmFuc2l0aW9uYCBpbiBhIGBUcmFuc2l0aW9uR3JvdXBgIGEgbmV3XG4gICAqICAgICBgbm9kZVJlZmAgbmVlZCB0byBiZSBwcm92aWRlZCB0byBgVHJhbnNpdGlvbmAgd2l0aCBjaGFuZ2VkIGBrZXlgIHByb3BcbiAgICogICAgIChzZWVcbiAgICogICAgIFt0ZXN0L0NTU1RyYW5zaXRpb24tdGVzdC5qc10oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9ibG9iLzEzNDM1Zjg5N2IzYWI3MWY2ZTE5ZDcyNGYxNDU1OTZmNTkxMDU4MWMvdGVzdC9DU1NUcmFuc2l0aW9uLXRlc3QuanMjTDM2Mi1MNDM3KSkuXG4gICAqL1xuICBub2RlUmVmOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IHR5cGVvZiBFbGVtZW50ID09PSAndW5kZWZpbmVkJyA/IFByb3BUeXBlcy5hbnkgOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihFbGVtZW50KVxuICB9KSxcblxuICAvKipcbiAgICogQSBgZnVuY3Rpb25gIGNoaWxkIGNhbiBiZSB1c2VkIGluc3RlYWQgb2YgYSBSZWFjdCBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uIGlzXG4gICAqIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHRyYW5zaXRpb24gc3RhdHVzIChgJ2VudGVyaW5nJ2AsIGAnZW50ZXJlZCdgLFxuICAgKiBgJ2V4aXRpbmcnYCwgYCdleGl0ZWQnYCksIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGFwcGx5IGNvbnRleHRcbiAgICogc3BlY2lmaWMgcHJvcHMgdG8gYSBjb21wb25lbnQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiA8VHJhbnNpdGlvbiBpbj17dGhpcy5zdGF0ZS5pbn0gdGltZW91dD17MTUwfT5cbiAgICogICB7c3RhdGUgPT4gKFxuICAgKiAgICAgPE15Q29tcG9uZW50IGNsYXNzTmFtZT17YGZhZGUgZmFkZS0ke3N0YXRlfWB9IC8+XG4gICAqICAgKX1cbiAgICogPC9UcmFuc2l0aW9uPlxuICAgKiBgYGBcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLCBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXSkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogU2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBzdGF0ZXNcbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGlzIG1vdW50ZWQgaW1tZWRpYXRlbHkgYWxvbmcgd2l0aFxuICAgKiB0aGUgcGFyZW50IGBUcmFuc2l0aW9uYCBjb21wb25lbnQuIElmIHlvdSB3YW50IHRvIFwibGF6eSBtb3VudFwiIHRoZSBjb21wb25lbnQgb24gdGhlXG4gICAqIGZpcnN0IGBpbj17dHJ1ZX1gIHlvdSBjYW4gc2V0IGBtb3VudE9uRW50ZXJgLiBBZnRlciB0aGUgZmlyc3QgZW50ZXIgdHJhbnNpdGlvbiB0aGUgY29tcG9uZW50IHdpbGwgc3RheVxuICAgKiBtb3VudGVkLCBldmVuIG9uIFwiZXhpdGVkXCIsIHVubGVzcyB5b3UgYWxzbyBzcGVjaWZ5IGB1bm1vdW50T25FeGl0YC5cbiAgICovXG4gIG1vdW50T25FbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBzdGF5cyBtb3VudGVkIGFmdGVyIGl0IHJlYWNoZXMgdGhlIGAnZXhpdGVkJ2Agc3RhdGUuXG4gICAqIFNldCBgdW5tb3VudE9uRXhpdGAgaWYgeW91J2QgcHJlZmVyIHRvIHVubW91bnQgdGhlIGNvbXBvbmVudCBhZnRlciBpdCBmaW5pc2hlcyBleGl0aW5nLlxuICAgKi9cbiAgdW5tb3VudE9uRXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBkb2VzIG5vdCBwZXJmb3JtIHRoZSBlbnRlciB0cmFuc2l0aW9uIHdoZW5cbiAgICogaXQgZmlyc3QgbW91bnRzLCByZWdhcmRsZXNzIG9mIHRoZSB2YWx1ZSBvZiBgaW5gLiBJZiB5b3Ugd2FudCB0aGlzXG4gICAqIGJlaGF2aW9yLCBzZXQgYm90aCBgYXBwZWFyYCBhbmQgYGluYCB0byBgdHJ1ZWAuXG4gICAqXG4gICAqID4gKipOb3RlKio6IHRoZXJlIGFyZSBubyBzcGVjaWFsIGFwcGVhciBzdGF0ZXMgbGlrZSBgYXBwZWFyaW5nYC9gYXBwZWFyZWRgLCB0aGlzIHByb3BcbiAgICogPiBvbmx5IGFkZHMgYW4gYWRkaXRpb25hbCBlbnRlciB0cmFuc2l0aW9uLiBIb3dldmVyLCBpbiB0aGVcbiAgICogPiBgPENTU1RyYW5zaXRpb24+YCBjb21wb25lbnQgdGhhdCBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIGRvZXMgcmVzdWx0IGluXG4gICAqID4gYWRkaXRpb25hbCBgLmFwcGVhci0qYCBjbGFzc2VzLCB0aGF0IHdheSB5b3UgY2FuIGNob29zZSB0byBzdHlsZSBpdFxuICAgKiA+IGRpZmZlcmVudGx5LlxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZW50ZXIgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGV4aXQgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBleGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFJlcXVpcmVkIHVubGVzcyBgYWRkRW5kTGlzdGVuZXJgIGlzIHByb3ZpZGVkLlxuICAgKlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zOlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogdGltZW91dD17NTAwfVxuICAgKiBgYGBcbiAgICpcbiAgICogb3IgaW5kaXZpZHVhbGx5OlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogdGltZW91dD17e1xuICAgKiAgYXBwZWFyOiA1MDAsXG4gICAqICBlbnRlcjogMzAwLFxuICAgKiAgZXhpdDogNTAwLFxuICAgKiB9fVxuICAgKiBgYGBcbiAgICpcbiAgICogLSBgYXBwZWFyYCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgb2YgYGVudGVyYFxuICAgKiAtIGBlbnRlcmAgZGVmYXVsdHMgdG8gYDBgXG4gICAqIC0gYGV4aXRgIGRlZmF1bHRzIHRvIGAwYFxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyIHwgeyBlbnRlcj86IG51bWJlciwgZXhpdD86IG51bWJlciwgYXBwZWFyPzogbnVtYmVyIH19XG4gICAqL1xuICB0aW1lb3V0OiBmdW5jdGlvbiB0aW1lb3V0KHByb3BzKSB7XG4gICAgdmFyIHB0ID0gdGltZW91dHNTaGFwZTtcbiAgICBpZiAoIXByb3BzLmFkZEVuZExpc3RlbmVyKSBwdCA9IHB0LmlzUmVxdWlyZWQ7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHQuYXBwbHkodm9pZCAwLCBbcHJvcHNdLmNvbmNhdChhcmdzKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZ1xuICAgKiBET00gbm9kZSBhbmQgYSBgZG9uZWAgY2FsbGJhY2suIEFsbG93cyBmb3IgbW9yZSBmaW5lIGdyYWluZWQgdHJhbnNpdGlvbiBlbmRcbiAgICogbG9naWMuIFRpbWVvdXRzIGFyZSBzdGlsbCB1c2VkIGFzIGEgZmFsbGJhY2sgaWYgcHJvdmlkZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiBhZGRFbmRMaXN0ZW5lcj17KG5vZGUsIGRvbmUpID0+IHtcbiAgICogICAvLyB1c2UgdGhlIGNzcyB0cmFuc2l0aW9uZW5kIGV2ZW50IHRvIG1hcmsgdGhlIGZpbmlzaCBvZiBhIHRyYW5zaXRpb25cbiAgICogICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBkb25lLCBmYWxzZSk7XG4gICAqIH19XG4gICAqIGBgYFxuICAgKi9cbiAgYWRkRW5kTGlzdGVuZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIFwiZW50ZXJpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbClcbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJlbnRlcmVkXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKSAtPiB2b2lkXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIFwiZXhpdGluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZXhpdGluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZXhpdGVkXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuY1xufSA6IHt9OyAvLyBOYW1lIHRoZSBmdW5jdGlvbiBzbyBpdCBpcyBjbGVhcmVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5UcmFuc2l0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgaW46IGZhbHNlLFxuICBtb3VudE9uRW50ZXI6IGZhbHNlLFxuICB1bm1vdW50T25FeGl0OiBmYWxzZSxcbiAgYXBwZWFyOiBmYWxzZSxcbiAgZW50ZXI6IHRydWUsXG4gIGV4aXQ6IHRydWUsXG4gIG9uRW50ZXI6IG5vb3AsXG4gIG9uRW50ZXJpbmc6IG5vb3AsXG4gIG9uRW50ZXJlZDogbm9vcCxcbiAgb25FeGl0OiBub29wLFxuICBvbkV4aXRpbmc6IG5vb3AsXG4gIG9uRXhpdGVkOiBub29wXG59O1xuVHJhbnNpdGlvbi5VTk1PVU5URUQgPSBVTk1PVU5URUQ7XG5UcmFuc2l0aW9uLkVYSVRFRCA9IEVYSVRFRDtcblRyYW5zaXRpb24uRU5URVJJTkcgPSBFTlRFUklORztcblRyYW5zaXRpb24uRU5URVJFRCA9IEVOVEVSRUQ7XG5UcmFuc2l0aW9uLkVYSVRJTkcgPSBFWElUSU5HO1xuZXhwb3J0IGRlZmF1bHQgVHJhbnNpdGlvbjsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9Qb3J0YWwgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9Qb3J0YWxcIikpO1xuXG52YXIgX3Bvc2l0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9wb3NpdGlvblwiKSk7XG5cbnZhciBfZnVuY3Rpb25zID0gcmVxdWlyZShcIi4vZnVuY3Rpb25zXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OyBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmpbXCJkZWZhdWx0XCJdID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykgeyBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlOyB9KSk7IH0gb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbi8vIGRlZmF1bHQgY29sb3JzXG52YXIgZGVmYXVsdENvbG9yID0gJyNmZmYnO1xudmFyIGRlZmF1bHRCZyA9ICcjMzMzJztcbnZhciByZXNpemVUaHJvdHRsZSA9IDEwMDtcbnZhciByZXNpemVUaHJlc2hvbGQgPSA1O1xuXG52YXIgc3RvcFByb3AgPSBmdW5jdGlvbiBzdG9wUHJvcChlKSB7XG4gIHJldHVybiBlLnN0b3BQcm9wYWdhdGlvbigpO1xufTtcblxudmFyIFRvb2x0aXAgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFRvb2x0aXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIF9jcmVhdGVDbGFzcyhUb29sdGlwLCBudWxsLCBbe1xuICAgIGtleTogXCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcykge1xuICAgICAgcmV0dXJuIF9Qb3J0YWwuaXNCcm93c2VyICYmIG5leHRQcm9wcy5pc09wZW4gPyB7XG4gICAgICAgIGhhc0JlZW5TaG93bjogdHJ1ZVxuICAgICAgfSA6IG51bGw7XG4gICAgfVxuICB9XSk7XG5cbiAgZnVuY3Rpb24gVG9vbHRpcCgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVG9vbHRpcCk7XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihUb29sdGlwKS5jYWxsKHRoaXMpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJkZWJvdW5jZVRpbWVvdXRcIiwgZmFsc2UpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhvdmVyVGltZW91dFwiLCBmYWxzZSk7XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHNob3dUaXA6IGZhbHNlLFxuICAgICAgaGFzSG92ZXI6IGZhbHNlLFxuICAgICAgaWdub3JlU2hvdzogZmFsc2UsXG4gICAgICBoYXNCZWVuU2hvd246IGZhbHNlXG4gICAgfTtcbiAgICBfdGhpcy5zaG93VGlwID0gX3RoaXMuc2hvd1RpcC5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICBfdGhpcy5oaWRlVGlwID0gX3RoaXMuaGlkZVRpcC5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICBfdGhpcy5jaGVja0hvdmVyID0gX3RoaXMuY2hlY2tIb3Zlci5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICBfdGhpcy50b2dnbGVUaXAgPSBfdGhpcy50b2dnbGVUaXAuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgX3RoaXMuc3RhcnRIb3ZlciA9IF90aGlzLnN0YXJ0SG92ZXIuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgX3RoaXMuZW5kSG92ZXIgPSBfdGhpcy5lbmRIb3Zlci5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICBfdGhpcy5saXN0ZW5SZXNpemVTY3JvbGwgPSBfdGhpcy5saXN0ZW5SZXNpemVTY3JvbGwuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgX3RoaXMuaGFuZGxlUmVzaXplU2Nyb2xsID0gX3RoaXMuaGFuZGxlUmVzaXplU2Nyb2xsLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgIF90aGlzLmJvZHlUb3VjaFN0YXJ0ID0gX3RoaXMuYm9keVRvdWNoU3RhcnQuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgX3RoaXMuYm9keVRvdWNoRW5kID0gX3RoaXMuYm9keVRvdWNoRW5kLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgIF90aGlzLnRhcmdldFRvdWNoU3RhcnQgPSBfdGhpcy50YXJnZXRUb3VjaFN0YXJ0LmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgIF90aGlzLnRhcmdldFRvdWNoRW5kID0gX3RoaXMudGFyZ2V0VG91Y2hFbmQuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRvb2x0aXAsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgLy8gaWYgdGhlIGlzT3BlbiBwcm9wIGlzIHBhc3NlZCBvbiBmaXJzdCByZW5kZXIgd2UgbmVlZCB0byBpbW1lZGlhdGVseSB0cmlnZ2VyIGEgc2Vjb25kIHJlbmRlcixcbiAgICAgIC8vIGJlY2F1c2UgdGhlIHRpcCByZWYgaXMgbmVlZGVkIHRvIGNhbGN1bGF0ZSB0aGUgcG9zaXRpb25cbiAgICAgIGlmICh0aGlzLnByb3BzLmlzT3Blbikge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tZGlkLW1vdW50LXNldC1zdGF0ZVxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpc09wZW46IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2Nyb2xsUGFyZW50ID0gKDAsIF9mdW5jdGlvbnMuZ2V0U2Nyb2xsUGFyZW50KSh0aGlzLnRhcmdldCk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5saXN0ZW5SZXNpemVTY3JvbGwpO1xuICAgICAgdGhpcy5zY3JvbGxQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5saXN0ZW5SZXNpemVTY3JvbGwpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLmJvZHlUb3VjaFN0YXJ0KTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaEVuZCcsIHRoaXMuYm9keVRvdWNoRW5kKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShfLCBwcmV2U3RhdGUpIHtcbiAgICAgIC8vIG9sZGVyIHZlcnNpb25zIG9mIHJlYWN0IHdvbid0IGxldmVyYWdlIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywgVE9ETzogcmVtb3ZlIHdoZW4gPCAxNi4zIHN1cHBvcnQgaXMgZHJvcHBlZFxuICAgICAgaWYgKCF0aGlzLnN0YXRlLmhhc0JlZW5TaG93biAmJiB0aGlzLnByb3BzLmlzT3Blbikge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tZGlkLXVwZGF0ZS1zZXQtc3RhdGVcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgaGFzQmVlblNob3duOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dCh0aGlzLnNob3dUaXAsIDApO1xuICAgICAgfSAvLyB3ZSBuZWVkIHRvIHJlbmRlciBvbmNlIHRvIGdldCByZWZzIGluIHBsYWNlLCB0aGVuIHdlIGNhbiBtYWtlIHRoZSBjYWxjdWxhdGlvbnMgb24gYSBmb2xsb3d1cCByZW5kZXJcbiAgICAgIC8vIHRoaXMgb25seSBoYXMgdG8gaGFwcGVuIHRoZSBmaXJzdCB0aW1lIHRoZSB0aXAgaXMgc2hvd24sIGFuZCBhbGxvd3MgdXMgdG8gbm90IHJlbmRlciBldmVyeSB0aXAgb24gdGhlIHBhZ2Ugd2l0aCBpbml0aWFsIHJlbmRlci5cblxuXG4gICAgICBpZiAoIXByZXZTdGF0ZS5oYXNCZWVuU2hvd24gJiYgdGhpcy5zdGF0ZS5oYXNCZWVuU2hvd24pIHtcbiAgICAgICAgdGhpcy5zaG93VGlwKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMubGlzdGVuUmVzaXplU2Nyb2xsKTtcbiAgICAgIHRoaXMuc2Nyb2xsUGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMubGlzdGVuUmVzaXplU2Nyb2xsKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5ib2R5VG91Y2hTdGFydCk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hFbmQnLCB0aGlzLmJvZHlUb3VjaEVuZCk7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5kZWJvdW5jZVRpbWVvdXQpO1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuaG92ZXJUaW1lb3V0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibGlzdGVuUmVzaXplU2Nyb2xsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RlblJlc2l6ZVNjcm9sbCgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmRlYm91bmNlVGltZW91dCk7XG4gICAgICB0aGlzLmRlYm91bmNlVGltZW91dCA9IHNldFRpbWVvdXQodGhpcy5oYW5kbGVSZXNpemVTY3JvbGwsIHJlc2l6ZVRocm90dGxlKTtcblxuICAgICAgaWYgKHRoaXMuc3RhdGUudGFyZ2V0VG91Y2gpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgdGFyZ2V0VG91Y2g6IHVuZGVmaW5lZFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaGFuZGxlUmVzaXplU2Nyb2xsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVJlc2l6ZVNjcm9sbCgpIHtcbiAgICAgIGlmICh0aGlzLnN0YXRlLnNob3dUaXApIHtcbiAgICAgICAgLy8gaWYgd2UncmUgc2hvd2luZyB0aGUgdGlwIGFuZCB0aGUgcmVzaXplIHdhcyBhY3R1YWxseSBhIHNpZ25pZmlnYW50IGNoYW5nZSwgdGhlbiBzZXRTdGF0ZSB0byByZS1yZW5kZXIgYW5kIGNhbGN1bGF0ZSBwb3NpdGlvblxuICAgICAgICB2YXIgY2xpZW50V2lkdGggPSBNYXRoLnJvdW5kKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCAvIHJlc2l6ZVRocmVzaG9sZCkgKiByZXNpemVUaHJlc2hvbGQ7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGNsaWVudFdpZHRoOiBjbGllbnRXaWR0aFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidGFyZ2V0VG91Y2hTdGFydFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0YXJnZXRUb3VjaFN0YXJ0KCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHRhcmdldFRvdWNoOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidGFyZ2V0VG91Y2hFbmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdGFyZ2V0VG91Y2hFbmQoKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS50YXJnZXRUb3VjaCkge1xuICAgICAgICB0aGlzLnRvZ2dsZVRpcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJib2R5VG91Y2hFbmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYm9keVRvdWNoRW5kKCkge1xuICAgICAgaWYgKHRoaXMuc3RhdGUudGFyZ2V0VG91Y2gpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgdGFyZ2V0VG91Y2g6IHVuZGVmaW5lZFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYm9keVRvdWNoU3RhcnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYm9keVRvdWNoU3RhcnQoZSkge1xuICAgICAgLy8gaWYgaXQncyBhIGNvbnRyb2xsZWQgdGlwIHdlIGRvbid0IHdhbnQgdG8gYXV0by1kaXNtaXNzLCBvdGhlcndpc2Ugd2UganVzdCBpZ25vcmUgdGFwcyBpbnNpZGUgdGhlIHRpcFxuICAgICAgaWYgKCEodGhpcy50YXJnZXQgJiYgdGhpcy50YXJnZXQuY29udGFpbnMoZS50YXJnZXQpKSAmJiAhKHRoaXMudGlwICYmIHRoaXMudGlwLmNvbnRhaW5zKGUudGFyZ2V0KSkgJiYgIXRoaXMucHJvcHMuaXNPcGVuKSB7XG4gICAgICAgIHRoaXMuaGlkZVRpcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0b2dnbGVUaXBcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlVGlwKCkge1xuICAgICAgdGhpcy5zdGF0ZS5zaG93VGlwID8gdGhpcy5oaWRlVGlwKCkgOiB0aGlzLnNob3dUaXAoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2hvd1RpcFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG93VGlwKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmICghdGhpcy5zdGF0ZS5oYXNCZWVuU2hvd24pIHtcbiAgICAgICAgLy8gdGhpcyB3aWxsIHJlbmRlciBvbmNlLCB0aGVuIGZpcmUgY29tcG9uZW50RGlkVXBkYXRlLCB3aGljaCB3aWxsIHNob3cgdGhlIHRpcFxuICAgICAgICByZXR1cm4gdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgaGFzQmVlblNob3duOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuc3RhdGUuc2hvd1RpcCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBzaG93VGlwOiB0cnVlXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIF90aGlzMi5wcm9wcy5vblRvZ2dsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgX3RoaXMyLnByb3BzLm9uVG9nZ2xlKF90aGlzMi5zdGF0ZS5zaG93VGlwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJoaWRlVGlwXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGVUaXAoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGhhc0hvdmVyOiBmYWxzZVxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLnN0YXRlLnNob3dUaXApIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgc2hvd1RpcDogZmFsc2VcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgX3RoaXMzLnByb3BzLm9uVG9nZ2xlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBfdGhpczMucHJvcHMub25Ub2dnbGUoX3RoaXMzLnN0YXRlLnNob3dUaXApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0YXJ0SG92ZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnRIb3ZlcigpIHtcbiAgICAgIGlmICghdGhpcy5zdGF0ZS5pZ25vcmVTaG93KSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGhhc0hvdmVyOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5ob3ZlclRpbWVvdXQpO1xuICAgICAgICB0aGlzLmhvdmVyVGltZW91dCA9IHNldFRpbWVvdXQodGhpcy5jaGVja0hvdmVyLCB0aGlzLnByb3BzLmhvdmVyRGVsYXkpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJlbmRIb3ZlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbmRIb3ZlcigpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBoYXNIb3ZlcjogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuaG92ZXJUaW1lb3V0KTtcbiAgICAgIHRoaXMuaG92ZXJUaW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLmNoZWNrSG92ZXIsIHRoaXMucHJvcHMubW91c2VPdXREZWxheSB8fCB0aGlzLnByb3BzLmhvdmVyRGVsYXkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjaGVja0hvdmVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoZWNrSG92ZXIoKSB7XG4gICAgICB0aGlzLnN0YXRlLmhhc0hvdmVyID8gdGhpcy5zaG93VGlwKCkgOiB0aGlzLmhpZGVUaXAoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGFycm93ID0gX3RoaXMkcHJvcHMuYXJyb3csXG4gICAgICAgICAgYXJyb3dTaXplID0gX3RoaXMkcHJvcHMuYXJyb3dTaXplLFxuICAgICAgICAgIGJhY2tncm91bmQgPSBfdGhpcyRwcm9wcy5iYWNrZ3JvdW5kLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNvbG9yID0gX3RoaXMkcHJvcHMuY29sb3IsXG4gICAgICAgICAgY29udGVudCA9IF90aGlzJHByb3BzLmNvbnRlbnQsXG4gICAgICAgICAgZGlyZWN0aW9uID0gX3RoaXMkcHJvcHMuZGlyZWN0aW9uLFxuICAgICAgICAgIGRpc3RhbmNlID0gX3RoaXMkcHJvcHMuZGlzdGFuY2UsXG4gICAgICAgICAgZXZlbnRPZmYgPSBfdGhpcyRwcm9wcy5ldmVudE9mZixcbiAgICAgICAgICBldmVudE9uID0gX3RoaXMkcHJvcHMuZXZlbnRPbixcbiAgICAgICAgICBldmVudFRvZ2dsZSA9IF90aGlzJHByb3BzLmV2ZW50VG9nZ2xlLFxuICAgICAgICAgIGZvcmNlRGlyZWN0aW9uID0gX3RoaXMkcHJvcHMuZm9yY2VEaXJlY3Rpb24sXG4gICAgICAgICAgaXNPcGVuID0gX3RoaXMkcHJvcHMuaXNPcGVuLFxuICAgICAgICAgIG1vdXNlT3V0RGVsYXkgPSBfdGhpcyRwcm9wcy5tb3VzZU91dERlbGF5LFxuICAgICAgICAgIHBhZGRpbmcgPSBfdGhpcyRwcm9wcy5wYWRkaW5nLFxuICAgICAgICAgIHN0eWxlcyA9IF90aGlzJHByb3BzLnN0eWxlcyxcbiAgICAgICAgICBUYWdOYW1lID0gX3RoaXMkcHJvcHMudGFnTmFtZSxcbiAgICAgICAgICB0aXBDb250ZW50SG92ZXIgPSBfdGhpcyRwcm9wcy50aXBDb250ZW50SG92ZXIsXG4gICAgICAgICAgdGlwQ29udGVudENsYXNzTmFtZSA9IF90aGlzJHByb3BzLnRpcENvbnRlbnRDbGFzc05hbWUsXG4gICAgICAgICAgdXNlRGVmYXVsdFN0eWxlcyA9IF90aGlzJHByb3BzLnVzZURlZmF1bHRTdHlsZXMsXG4gICAgICAgICAgdXNlSG92ZXIgPSBfdGhpcyRwcm9wcy51c2VIb3ZlcixcbiAgICAgICAgICBhcnJvd0NvbnRlbnQgPSBfdGhpcyRwcm9wcy5hcnJvd0NvbnRlbnQ7XG4gICAgICB2YXIgaXNDb250cm9sbGVkQnlQcm9wcyA9IHR5cGVvZiBpc09wZW4gIT09ICd1bmRlZmluZWQnICYmIGlzT3BlbiAhPT0gbnVsbDtcbiAgICAgIHZhciBzaG93VGlwID0gaXNDb250cm9sbGVkQnlQcm9wcyA/IGlzT3BlbiA6IHRoaXMuc3RhdGUuc2hvd1RpcDtcblxuICAgICAgdmFyIHdyYXBwZXJTdHlsZXMgPSBfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0sIHN0eWxlcyk7XG5cbiAgICAgIHZhciBwcm9wcyA9IHtcbiAgICAgICAgc3R5bGU6IHdyYXBwZXJTdHlsZXMsXG4gICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKHRhcmdldCkge1xuICAgICAgICAgIF90aGlzNC50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIH0sXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgICB9O1xuICAgICAgdmFyIHBvcnRhbFByb3BzID0ge1xuICAgICAgICAvLyBrZWVwIGNsaWNrcyBvbiB0aGUgdGlwIGZyb20gY2xvc2luZyBjbGljayBjb250cm9sbGVkIHRpcHNcbiAgICAgICAgb25DbGljazogc3RvcFByb3BcbiAgICAgIH07IC8vIGV2ZW50IGhhbmRsaW5nXG5cbiAgICAgIGlmIChldmVudE9mZikge1xuICAgICAgICBwcm9wc1tldmVudE9mZl0gPSB0aGlzLmhpZGVUaXA7XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudE9uKSB7XG4gICAgICAgIHByb3BzW2V2ZW50T25dID0gdGhpcy5zaG93VGlwO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnRUb2dnbGUpIHtcbiAgICAgICAgcHJvcHNbZXZlbnRUb2dnbGVdID0gdGhpcy50b2dnbGVUaXA7IC8vIG9ubHkgdXNlIGhvdmVyIGlmIHRoZXkgZG9uJ3QgaGF2ZSBhIHRvZ2dsZSBldmVudFxuICAgICAgfSBlbHNlIGlmICh1c2VIb3ZlciAmJiAhaXNDb250cm9sbGVkQnlQcm9wcykge1xuICAgICAgICBwcm9wcy5vbk1vdXNlRW50ZXIgPSB0aGlzLnN0YXJ0SG92ZXI7XG4gICAgICAgIHByb3BzLm9uTW91c2VMZWF2ZSA9IHRpcENvbnRlbnRIb3ZlciB8fCBtb3VzZU91dERlbGF5ID8gdGhpcy5lbmRIb3ZlciA6IHRoaXMuaGlkZVRpcDtcbiAgICAgICAgcHJvcHMub25Ub3VjaFN0YXJ0ID0gdGhpcy50YXJnZXRUb3VjaFN0YXJ0O1xuICAgICAgICBwcm9wcy5vblRvdWNoRW5kID0gdGhpcy50YXJnZXRUb3VjaEVuZDtcblxuICAgICAgICBpZiAodGlwQ29udGVudEhvdmVyKSB7XG4gICAgICAgICAgcG9ydGFsUHJvcHMub25Nb3VzZUVudGVyID0gdGhpcy5zdGFydEhvdmVyO1xuICAgICAgICAgIHBvcnRhbFByb3BzLm9uTW91c2VMZWF2ZSA9IHRoaXMuZW5kSG92ZXI7XG4gICAgICAgICAgcG9ydGFsUHJvcHMub25Ub3VjaFN0YXJ0ID0gc3RvcFByb3A7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gY29uZGl0aW9uYWwgcmVuZGVyaW5nIG9mIHRpcFxuXG5cbiAgICAgIHZhciB0aXBQb3J0YWw7XG5cbiAgICAgIGlmICh0aGlzLnN0YXRlLmhhc0JlZW5TaG93bikge1xuICAgICAgICB2YXIgY3VycmVudFBvc2l0aW9ucyA9ICgwLCBfcG9zaXRpb25bXCJkZWZhdWx0XCJdKShkaXJlY3Rpb24sIGZvcmNlRGlyZWN0aW9uLCB0aGlzLnRpcCwgdGhpcy50YXJnZXQsIF9vYmplY3RTcHJlYWQoe30sIHRoaXMuc3RhdGUsIHtcbiAgICAgICAgICBzaG93VGlwOiBzaG93VGlwXG4gICAgICAgIH0pLCB7XG4gICAgICAgICAgYmFja2dyb3VuZDogdXNlRGVmYXVsdFN0eWxlcyA/IGRlZmF1bHRCZyA6IGJhY2tncm91bmQsXG4gICAgICAgICAgYXJyb3c6IGFycm93LFxuICAgICAgICAgIGFycm93U2l6ZTogYXJyb3dTaXplLFxuICAgICAgICAgIGRpc3RhbmNlOiBkaXN0YW5jZVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgdGlwU3R5bGVzID0gX29iamVjdFNwcmVhZCh7fSwgY3VycmVudFBvc2l0aW9ucy50aXAsIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB1c2VEZWZhdWx0U3R5bGVzID8gZGVmYXVsdEJnIDogYmFja2dyb3VuZCxcbiAgICAgICAgICBjb2xvcjogdXNlRGVmYXVsdFN0eWxlcyA/IGRlZmF1bHRDb2xvciA6IGNvbG9yLFxuICAgICAgICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAgICAgekluZGV4OiB0aGlzLnByb3BzLnpJbmRleCxcbiAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJ1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgYXJyb3dTdHlsZXMgPSBfb2JqZWN0U3ByZWFkKHt9LCBjdXJyZW50UG9zaXRpb25zLmFycm93LnBvc2l0aW9uU3R5bGVzLCBhcnJvd0NvbnRlbnQgPyB7fSA6IGN1cnJlbnRQb3NpdGlvbnMuYXJyb3cuYm9yZGVyU3R5bGVzLCB7XG4gICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgd2lkdGg6ICcwcHgnLFxuICAgICAgICAgIGhlaWdodDogJzBweCcsXG4gICAgICAgICAgekluZGV4OiB0aGlzLnByb3BzLnpJbmRleCArIDFcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGlwUG9ydGFsID0gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9Qb3J0YWxbXCJkZWZhdWx0XCJdLCBudWxsLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIHBvcnRhbFByb3BzLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiB0eXBlb2YgdGlwQ29udGVudENsYXNzTmFtZSAhPT0gJ3VuZGVmaW5lZCcgPyB0aXBDb250ZW50Q2xhc3NOYW1lIDogY2xhc3NOYW1lXG4gICAgICAgIH0pLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IFwicmVhY3QtdG9vbHRpcC1saXRlXCIsXG4gICAgICAgICAgc3R5bGU6IHRpcFN0eWxlcyxcbiAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZih0aXApIHtcbiAgICAgICAgICAgIF90aGlzNC50aXAgPSB0aXA7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBjb250ZW50KSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LXRvb2x0aXAtbGl0ZS1hcnJvdyByZWFjdC10b29sdGlwLWxpdGUtXCIuY29uY2F0KGN1cnJlbnRQb3NpdGlvbnMucmVhbERpcmVjdGlvbiwgXCItYXJyb3dcIiksXG4gICAgICAgICAgc3R5bGU6IGFycm93U3R5bGVzXG4gICAgICAgIH0sIGFycm93Q29udGVudCkpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChUYWdOYW1lLCBwcm9wcywgY2hpbGRyZW4sIHRpcFBvcnRhbCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRvb2x0aXA7XG59KF9yZWFjdFtcImRlZmF1bHRcIl0uQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KFRvb2x0aXAsIFwicHJvcFR5cGVzXCIsIHtcbiAgYXJyb3c6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGFycm93U2l6ZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLFxuICBiYWNrZ3JvdW5kOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLmlzUmVxdWlyZWQsXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBjb2xvcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBjb250ZW50OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLmlzUmVxdWlyZWQsXG4gIGRpcmVjdGlvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBkaXN0YW5jZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLFxuICBldmVudE9mZjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBldmVudE9uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIGV2ZW50VG9nZ2xlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIGZvcmNlRGlyZWN0aW9uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBob3ZlckRlbGF5OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIsXG4gIGlzT3BlbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgbW91c2VPdXREZWxheTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLFxuICBwYWRkaW5nOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vbmVPZlR5cGUoW19wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZywgX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyXSksXG4gIHN0eWxlczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0LFxuICB0YWdOYW1lOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIHRpcENvbnRlbnRIb3ZlcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgdGlwQ29udGVudENsYXNzTmFtZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICB1c2VEZWZhdWx0U3R5bGVzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICB1c2VIb3ZlcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgekluZGV4OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIsXG4gIG9uVG9nZ2xlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBhcnJvd0NvbnRlbnQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGVcbn0pO1xuXG5fZGVmaW5lUHJvcGVydHkoVG9vbHRpcCwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBhcnJvdzogdHJ1ZSxcbiAgYXJyb3dTaXplOiAxMCxcbiAgYmFja2dyb3VuZDogJycsXG4gIGNsYXNzTmFtZTogJycsXG4gIGNvbG9yOiAnJyxcbiAgZGlyZWN0aW9uOiAndXAnLFxuICBkaXN0YW5jZTogdW5kZWZpbmVkLFxuICBldmVudE9mZjogdW5kZWZpbmVkLFxuICBldmVudE9uOiB1bmRlZmluZWQsXG4gIGV2ZW50VG9nZ2xlOiB1bmRlZmluZWQsXG4gIGZvcmNlRGlyZWN0aW9uOiBmYWxzZSxcbiAgaG92ZXJEZWxheTogMjAwLFxuICBpc09wZW46IHVuZGVmaW5lZCxcbiAgbW91c2VPdXREZWxheTogdW5kZWZpbmVkLFxuICBwYWRkaW5nOiAnMTBweCcsXG4gIHN0eWxlczoge30sXG4gIHRhZ05hbWU6ICdkaXYnLFxuICB0aXBDb250ZW50SG92ZXI6IGZhbHNlLFxuICB0aXBDb250ZW50Q2xhc3NOYW1lOiB1bmRlZmluZWQsXG4gIHVzZURlZmF1bHRTdHlsZXM6IGZhbHNlLFxuICB1c2VIb3ZlcjogdHJ1ZSxcbiAgekluZGV4OiAxMDAwLFxuICBvblRvZ2dsZTogdW5kZWZpbmVkLFxuICBhcnJvd0NvbnRlbnQ6IG51bGxcbn0pO1xuXG52YXIgX2RlZmF1bHQgPSBUb29sdGlwO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wicG9wdXBcIjpcIlBvcHVwX19wb3B1cC0tMmpSaHpcIn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmdldFNjcm9sbFRvcCA9IGdldFNjcm9sbFRvcDtcbmV4cG9ydHMuZ2V0U2Nyb2xsTGVmdCA9IGdldFNjcm9sbExlZnQ7XG5leHBvcnRzLmdldEFycm93U3BhY2luZyA9IGdldEFycm93U3BhY2luZztcbmV4cG9ydHMuZ2V0U2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50O1xuZXhwb3J0cy5ub0Fycm93RGlzdGFuY2UgPSBleHBvcnRzLmJvZHlQYWRkaW5nID0gZXhwb3J0cy5taW5BcnJvd1BhZGRpbmcgPSB2b2lkIDA7XG5cbi8qKlxuICogYSBoYW5kZnVsIG9mIHNoYXJlZCBmdW5jdGlvbnMgYW5kIGNvbnN0YW50c1xuICovXG52YXIgbWluQXJyb3dQYWRkaW5nID0gNTtcbmV4cG9ydHMubWluQXJyb3dQYWRkaW5nID0gbWluQXJyb3dQYWRkaW5nO1xudmFyIGJvZHlQYWRkaW5nID0gMTA7XG5leHBvcnRzLmJvZHlQYWRkaW5nID0gYm9keVBhZGRpbmc7XG52YXIgbm9BcnJvd0Rpc3RhbmNlID0gMztcbi8qKlxuICogY3Jvc3MgYnJvd3NlciBzY3JvbGwgcG9zaXRpb25zXG4gKi9cblxuZXhwb3J0cy5ub0Fycm93RGlzdGFuY2UgPSBub0Fycm93RGlzdGFuY2U7XG5cbmZ1bmN0aW9uIGdldFNjcm9sbFRvcCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wIHx8IDA7XG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbExlZnQoKSB7XG4gIHJldHVybiB3aW5kb3cucGFnZVhPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0IHx8IDA7XG59XG5cbmZ1bmN0aW9uIGdldEFycm93U3BhY2luZyhwcm9wcykge1xuICB2YXIgZGVmYXVsdEFycm93U3BhY2luZyA9IHByb3BzLmFycm93ID8gcHJvcHMuYXJyb3dTaXplIDogbm9BcnJvd0Rpc3RhbmNlO1xuICByZXR1cm4gdHlwZW9mIHByb3BzLmRpc3RhbmNlID09PSAnbnVtYmVyJyA/IHByb3BzLmRpc3RhbmNlIDogZGVmYXVsdEFycm93U3BhY2luZztcbn1cbi8qKlxuICogZ2V0IGZpcnN0IGFuY2VzdG9yIHRoYXQgbWlnaHQgc2Nyb2xsXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCkge1xuICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICB2YXIgc2Nyb2xsUGFyZW50ID0gd2luZG93O1xuXG4gIGlmIChzdHlsZS5wb3NpdGlvbiAhPT0gJ2ZpeGVkJykge1xuICAgIHZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG5cbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICB2YXIgcGFyZW50U3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKHBhcmVudCk7XG5cbiAgICAgIGlmICgvKGF1dG98c2Nyb2xsKS8udGVzdChwYXJlbnRTdHlsZS5vdmVyZmxvdyArIHBhcmVudFN0eWxlLm92ZXJmbG93WSArIHBhcmVudFN0eWxlLm92ZXJmbG93WCkpIHtcbiAgICAgICAgc2Nyb2xsUGFyZW50ID0gcGFyZW50O1xuICAgICAgICBwYXJlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50RWxlbWVudDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2Nyb2xsUGFyZW50O1xufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSAnLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanMnO1xuaW1wb3J0IHRvRGF0ZSBmcm9tICcuLi90b0RhdGUvaW5kZXguanMnO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tICcuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyc7XG4vKipcbiAqIEBuYW1lIGFkZERheXNcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRheXMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBkYXlzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIGRheXMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDEwIGRheXMgdG8gMSBTZXB0ZW1iZXIgMjAxNDpcbiAqIHZhciByZXN1bHQgPSBhZGREYXlzKG5ldyBEYXRlKDIwMTQsIDgsIDEpLCAxMClcbiAqIC8vPT4gVGh1IFNlcCAxMSAyMDE0IDAwOjAwOjAwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkRGF5cyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcblxuICBpZiAoaXNOYU4oYW1vdW50KSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG5cbiAgaWYgKCFhbW91bnQpIHtcbiAgICAvLyBJZiAwIGRheXMsIG5vLW9wIHRvIGF2b2lkIGNoYW5naW5nIHRpbWVzIGluIHRoZSBob3VyIGJlZm9yZSBlbmQgb2YgRFNUXG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cblxuICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBhbW91bnQpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJ2YXIgZGVib3VuY2UgPSByZXF1aXJlKCcuL2RlYm91bmNlJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHRocm90dGxlZCBmdW5jdGlvbiB0aGF0IG9ubHkgaW52b2tlcyBgZnVuY2AgYXQgbW9zdCBvbmNlIHBlclxuICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGBcbiAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAqIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYFxuICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YFxuICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICogdGhyb3R0bGVkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gcmV0dXJuIHRoZVxuICogcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhyb3R0bGUgaW52b2NhdGlvbnMgdG8uXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgdGhyb3R0bGVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBleGNlc3NpdmVseSB1cGRhdGluZyB0aGUgcG9zaXRpb24gd2hpbGUgc2Nyb2xsaW5nLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpO1xuICpcbiAqIC8vIEludm9rZSBgcmVuZXdUb2tlbmAgd2hlbiB0aGUgY2xpY2sgZXZlbnQgaXMgZmlyZWQsIGJ1dCBub3QgbW9yZSB0aGFuIG9uY2UgZXZlcnkgNSBtaW51dGVzLlxuICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7ICd0cmFpbGluZyc6IGZhbHNlIH0pO1xuICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gKlxuICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyB0aHJvdHRsZWQgaW52b2NhdGlvbi5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICovXG5mdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgfVxuICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICdsZWFkaW5nJzogbGVhZGluZyxcbiAgICAnbWF4V2FpdCc6IHdhaXQsXG4gICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdGhyb3R0bGU7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvb3Q7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE5BTiA9IDAgLyAwO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xudmFyIHJlVHJpbSA9IC9eXFxzK3xcXHMrJC9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbi8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG52YXIgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b051bWJlcigzLjIpO1xuICogLy8gPT4gMy4yXG4gKlxuICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDVlLTMyNFxuICpcbiAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICogLy8gPT4gSW5maW5pdHlcbiAqXG4gKiBfLnRvTnVtYmVyKCczLjInKTtcbiAqIC8vID0+IDMuMlxuICovXG5mdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gTkFOO1xuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gIH1cbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b051bWJlcjtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBnZXRSYXdUYWcgPSByZXF1aXJlKCcuL19nZXRSYXdUYWcnKSxcbiAgICBvYmplY3RUb1N0cmluZyA9IHJlcXVpcmUoJy4vX29iamVjdFRvU3RyaW5nJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRUYWc7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuIiwidmFyIHRvRmluaXRlID0gcmVxdWlyZSgnLi90b0Zpbml0ZScpO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlci5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0ludGVnZXJgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9pbnRlZ2VyKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvSW50ZWdlcigzLjIpO1xuICogLy8gPT4gM1xuICpcbiAqIF8udG9JbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gMFxuICpcbiAqIF8udG9JbnRlZ2VyKEluZmluaXR5KTtcbiAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gKlxuICogXy50b0ludGVnZXIoJzMuMicpO1xuICogLy8gPT4gM1xuICovXG5mdW5jdGlvbiB0b0ludGVnZXIodmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgIHJlbWFpbmRlciA9IHJlc3VsdCAlIDE7XG5cbiAgcmV0dXJuIHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlbWFpbmRlciA/IHJlc3VsdCAtIHJlbWFpbmRlciA6IHJlc3VsdCkgOiAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvSW50ZWdlcjtcbiIsInZhciB0b051bWJlciA9IHJlcXVpcmUoJy4vdG9OdW1iZXInKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMCxcbiAgICBNQVhfSU5URUdFUiA9IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4O1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBmaW5pdGUgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMi4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9GaW5pdGUoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9GaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvRmluaXRlKEluZmluaXR5KTtcbiAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gKlxuICogXy50b0Zpbml0ZSgnMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9GaW5pdGUodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMDtcbiAgfVxuICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgaWYgKHZhbHVlID09PSBJTkZJTklUWSB8fCB2YWx1ZSA9PT0gLUlORklOSVRZKSB7XG4gICAgdmFyIHNpZ24gPSAodmFsdWUgPCAwID8gLTEgOiAxKTtcbiAgICByZXR1cm4gc2lnbiAqIE1BWF9JTlRFR0VSO1xuICB9XG4gIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyB2YWx1ZSA6IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9GaW5pdGU7XG4iLCJ2YXIgZXEgPSByZXF1aXJlKCcuL2VxJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IGluZGV4IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgaW5kZXggb3Iga2V5IGFyZ3VtZW50LlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBvYmplY3QgYXJndW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIGluZGV4O1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICA/IChpc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsIG9iamVjdC5sZW5ndGgpKVxuICAgICAgICA6ICh0eXBlID09ICdzdHJpbmcnICYmIGluZGV4IGluIG9iamVjdClcbiAgICAgICkge1xuICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSXRlcmF0ZWVDYWxsO1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcIndyYXBwZXJcIjpcIk1vbnRoX193cmFwcGVyLS15S3I3VlwiLFwidGl0bGVcIjpcIk1vbnRoX190aXRsZS0tM3Q4MDNcIixcInllYXJcIjpcIk1vbnRoX195ZWFyLS0xZmxKZVwifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wid3JhcHBlclwiOlwiTW9udGhzTGlzdF9fd3JhcHBlci0tMThXRGpcIixcInNjcm9sbGVyXCI6XCJNb250aHNMaXN0X19zY3JvbGxlci0tMjhnS29cIixcInVuZGVybGF5XCI6XCJNb250aHNMaXN0X191bmRlcmxheS0tZUhYY21cIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcIndyYXBwZXJcIjpcIkRheV9fd3JhcHBlci0tMTNxaktcIixcIndyYXBwZXJfaGlkZGVuXCI6XCJEYXlfX3dyYXBwZXJfaGlkZGVuLS1YREhBclwiLFwiaW5uZXJcIjpcIkRheV9faW5uZXItLTNoa0pnXCIsXCJpbm5lcl9zZWxlY3RlZFwiOlwiRGF5X19pbm5lcl9zZWxlY3RlZC0tWHA5anVcIixcImlubmVyX3dpdGhMZWZ0UmFkaXVzXCI6XCJEYXlfX2lubmVyX3dpdGhMZWZ0UmFkaXVzLS0zMjBFaVwiLFwiaW5uZXJfd2l0aFJpZ2h0UmFkaXVzXCI6XCJEYXlfX2lubmVyX3dpdGhSaWdodFJhZGl1cy0tMnRJYUJcIixcImlubmVyX2xvY2tlZFwiOlwiRGF5X19pbm5lcl9sb2NrZWQtLTI5RHpuXCIsXCJpbm5lcl9lZGdlRGF5XCI6XCJEYXlfX2lubmVyX2VkZ2VEYXktLTJWZ2xsXCIsXCJpbm5lcl9ob2xpZGF5XCI6XCJEYXlfX2lubmVyX2hvbGlkYXktLWtZdjk2XCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJ3ZWVrXCI6XCJXZWVrX193ZWVrLS0zdF9fVlwifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wid3JhcHBlclwiOlwiTW9udGhfX3dyYXBwZXItLTJDdnVMXCIsXCJmYWtlV2Vla1wiOlwiTW9udGhfX2Zha2VXZWVrLS0yX2F3cVwiLFwidGl0bGVcIjpcIk1vbnRoX190aXRsZS0teDE3QnJcIixcImxvYWRlclwiOlwiTW9udGhfX2xvYWRlci0tM01fdlhcIixcImxvYWRlckRvdFwiOlwiTW9udGhfX2xvYWRlckRvdC0tM014WDdcIixcInBlbmRpbmdcIjpcIk1vbnRoX19wZW5kaW5nLS0ySlB1MVwiLFwibG9hZGVyRG90Rmlyc3RcIjpcIk1vbnRoX19sb2FkZXJEb3RGaXJzdC0tMXYyOTEgTW9udGhfX2xvYWRlckRvdC0tM014WDdcIixcImxvYWRlckRvdFNlY29uZFwiOlwiTW9udGhfX2xvYWRlckRvdFNlY29uZC0tMmlneFYgTW9udGhfX2xvYWRlckRvdC0tM014WDdcIixcImxvYWRlckRvdFRoaXJkXCI6XCJNb250aF9fbG9hZGVyRG90VGhpcmQtLTM1ODlRIE1vbnRoX19sb2FkZXJEb3QtLTNNeFg3XCIsXCJsb2FkZXJEb3RGb3VydGhcIjpcIk1vbnRoX19sb2FkZXJEb3RGb3VydGgtLU5xbzBQIE1vbnRoX19sb2FkZXJEb3QtLTNNeFg3XCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJ3cmFwcGVyXCI6XCJEYXlzT2ZUaGVXZWVrX193cmFwcGVyLS1yamZOQVwiLFwiZGF5XCI6XCJEYXlzT2ZUaGVXZWVrX19kYXktLVJHbzY3XCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJ3cmFwcGVyXCI6XCJHcmlkX193cmFwcGVyLS0zUVFRU1wiLFwibW9udGhzU2Nyb2xsaW5nXCI6XCJHcmlkX19tb250aHNTY3JvbGxpbmctLVlWakxkXCIsXCJtb250aHNcIjpcIkdyaWRfX21vbnRocy0tMjJyLXlcIixcInllYXJcIjpcIkdyaWRfX3llYXItLTNFWDJaXCIsXCJzZXBhcmF0b3JcIjpcIkdyaWRfX3NlcGFyYXRvci0tMTZ6RzRcIixcInZhbGlkYXRpb25cIjpcIkdyaWRfX3ZhbGlkYXRpb24tLTFYcWNaXCIsXCJib3R0b21HcmFkaWVudFwiOlwiR3JpZF9fYm90dG9tR3JhZGllbnQtLTNaNnlLXCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJjb250cm9sR3JvdXBcIjpcIkNvbnRyb2xHcm91cF9fY29udHJvbEdyb3VwLS1xd2ZKM1wiLFwiY29udHJvbEdyb3VwX3dpZGVcIjpcIkNvbnRyb2xHcm91cF9fY29udHJvbEdyb3VwX3dpZGUtLTNhVjFBXCIsXCJjb250cm9sR3JvdXBfdmVydGljYWxcIjpcIkNvbnRyb2xHcm91cF9fY29udHJvbEdyb3VwX3ZlcnRpY2FsLS1jYkVoOFwifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wid3JhcHBlclwiOlwiTW9iaWxlU3VnZ2VzdF9fd3JhcHBlci0tM1IxS0RcIixcIndyYXBwZXJfaGlkZGVuXCI6XCJNb2JpbGVTdWdnZXN0X193cmFwcGVyX2hpZGRlbi0tM3hPQUFcIixcImNvbnRyb2xzXCI6XCJNb2JpbGVTdWdnZXN0X19jb250cm9scy0tMWl3a01cIixcImJhY2tCdXR0b25cIjpcIk1vYmlsZVN1Z2dlc3RfX2JhY2tCdXR0b24tLTE0WF90XCIsXCJhcnJvd0xlZnRcIjpcIk1vYmlsZVN1Z2dlc3RfX2Fycm93TGVmdC0tM0xUTFNcIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImlucHV0XCI6XCJEYXRlcGlja2VyX19pbnB1dC0tbm83RlJcIixcImdyb3VwXCI6XCJEYXRlcGlja2VyX19ncm91cC0tMWllVGxcIixcInBvcHVwXCI6XCJEYXRlcGlja2VyX19wb3B1cC0tMWZ2R1RcIixcInBvcHVwX2hpZGRlblwiOlwiRGF0ZXBpY2tlcl9fcG9wdXBfaGlkZGVuLS0yQ2h0SFwiLFwicG9wdXBJblBvcHVwXCI6XCJEYXRlcGlja2VyX19wb3B1cEluUG9wdXAtLTNlelNUXCIsXCJwb3B1cEluUG9wdXBfaGlkZGVuXCI6XCJEYXRlcGlja2VyX19wb3B1cEluUG9wdXBfaGlkZGVuLS0yeXNSV1wifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1widGl0bGVcIjpcIlN1Z2dlc3RfX3RpdGxlLS1MTGFLQ1wiLFwicmVnaW9uXCI6XCJTdWdnZXN0X19yZWdpb24tLVRmM2QwXCIsXCJyZWdpb25fYWN0aXZlXCI6XCJTdWdnZXN0X19yZWdpb25fYWN0aXZlLS1FQlNjN1wiLFwiaG90ZWxcIjpcIlN1Z2dlc3RfX2hvdGVsLS0xSHZiUCBTdWdnZXN0X19yZWdpb24tLVRmM2QwXCIsXCJpY29uXCI6XCJTdWdnZXN0X19pY29uLS0xRUJRYVwiLFwiZGVzdGluYXRpb25cIjpcIlN1Z2dlc3RfX2Rlc3RpbmF0aW9uLS0yaGRoOFwiLFwiZGVzdGluYXRpb25UaXRsZVwiOlwiU3VnZ2VzdF9fZGVzdGluYXRpb25UaXRsZS0tM0dURlRcIixcIm5vdGVcIjpcIlN1Z2dlc3RfX25vdGUtLUJBVXJDXCIsXCJmbGFnXCI6XCJTdWdnZXN0X19mbGFnLS0yaDF5X1wifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wid3JhcHBlclwiOlwiTW9iaWxlU3VnZ2VzdF9fd3JhcHBlci0tUWEyakRcIixcImNvbnRyb2xzXCI6XCJNb2JpbGVTdWdnZXN0X19jb250cm9scy0takFCWjJcIixcImJhY2tCdXR0b25cIjpcIk1vYmlsZVN1Z2dlc3RfX2JhY2tCdXR0b24tLTNtUDVhXCIsXCJhcnJvd0xlZnRcIjpcIk1vYmlsZVN1Z2dlc3RfX2Fycm93TGVmdC0tM2tIeHVcIixcInN1Z2dlc3RcIjpcIk1vYmlsZVN1Z2dlc3RfX3N1Z2dlc3QtLUlkSUo4XCJ9OyIsInZhciBiYXNlRmlsbCA9IHJlcXVpcmUoJy4vX2Jhc2VGaWxsJyksXG4gICAgaXNJdGVyYXRlZUNhbGwgPSByZXF1aXJlKCcuL19pc0l0ZXJhdGVlQ2FsbCcpO1xuXG4vKipcbiAqIEZpbGxzIGVsZW1lbnRzIG9mIGBhcnJheWAgd2l0aCBgdmFsdWVgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdFxuICogaW5jbHVkaW5nLCBgZW5kYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4yLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbGwuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAqXG4gKiBfLmZpbGwoYXJyYXksICdhJyk7XG4gKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gKiAvLyA9PiBbJ2EnLCAnYScsICdhJ11cbiAqXG4gKiBfLmZpbGwoQXJyYXkoMyksIDIpO1xuICogLy8gPT4gWzIsIDIsIDJdXG4gKlxuICogXy5maWxsKFs0LCA2LCA4LCAxMF0sICcqJywgMSwgMyk7XG4gKiAvLyA9PiBbNCwgJyonLCAnKicsIDEwXVxuICovXG5mdW5jdGlvbiBmaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGlmIChzdGFydCAmJiB0eXBlb2Ygc3RhcnQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHZhbHVlLCBzdGFydCkpIHtcbiAgICBzdGFydCA9IDA7XG4gICAgZW5kID0gbGVuZ3RoO1xuICB9XG4gIHJldHVybiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZpbGw7XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wid3JhcHBlclwiOlwiRm9ybV9fd3JhcHBlci0tM05wVEpcIixcInJvb21zXCI6XCJGb3JtX19yb29tcy0tY2dpS3hcIixcInNlcGFyYXRvclwiOlwiRm9ybV9fc2VwYXJhdG9yLS0zSmlXSlwiLFwiYnV0dG9uXCI6XCJGb3JtX19idXR0b24tLTNzV21vXCIsXCJmb290ZXJcIjpcIkZvcm1fX2Zvb3Rlci0tNTFHTHpcIixcImJvdHRvbUdyYWRpZW50XCI6XCJGb3JtX19ib3R0b21HcmFkaWVudC0tMTRWTkVcIixcImJ1dHRvbnNcIjpcIkZvcm1fX2J1dHRvbnMtLWNveFY1XCIsXCJzb21ldGhpbmdMaWtlQnV0dG9uQnV0Tm90QnV0dG9uXCI6XCJGb3JtX19zb21ldGhpbmdMaWtlQnV0dG9uQnV0Tm90QnV0dG9uLS0zZC1aX1wiLFwiYm9va01vcmVCdG5cIjpcIkZvcm1fX2Jvb2tNb3JlQnRuLS0ycXAyVCBGb3JtX19zb21ldGhpbmdMaWtlQnV0dG9uQnV0Tm90QnV0dG9uLS0zZC1aX1wiLFwiYWRkUm9vbUJ0blwiOlwiRm9ybV9fYWRkUm9vbUJ0bi0tMTROYUYgRm9ybV9fc29tZXRoaW5nTGlrZUJ1dHRvbkJ1dE5vdEJ1dHRvbi0tM2QtWl9cIixcImFkZFJvb21CdG5JY29uXCI6XCJGb3JtX19hZGRSb29tQnRuSWNvbi0tMU8ybHhcIn07IiwidmFyIGNyZWF0ZVJhbmdlID0gcmVxdWlyZSgnLi9fY3JlYXRlUmFuZ2UnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG51bWJlcnMgKHBvc2l0aXZlIGFuZC9vciBuZWdhdGl2ZSkgcHJvZ3Jlc3NpbmcgZnJvbVxuICogYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBBIHN0ZXAgb2YgYC0xYCBpcyB1c2VkIGlmIGEgbmVnYXRpdmVcbiAqIGBzdGFydGAgaXMgc3BlY2lmaWVkIHdpdGhvdXQgYW4gYGVuZGAgb3IgYHN0ZXBgLiBJZiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLFxuICogaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICpcbiAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVJpZ2h0XG4gKiBAZXhhbXBsZVxuICpcbiAqIF8ucmFuZ2UoNCk7XG4gKiAvLyA9PiBbMCwgMSwgMiwgM11cbiAqXG4gKiBfLnJhbmdlKC00KTtcbiAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICpcbiAqIF8ucmFuZ2UoMSwgNSk7XG4gKiAvLyA9PiBbMSwgMiwgMywgNF1cbiAqXG4gKiBfLnJhbmdlKDAsIDIwLCA1KTtcbiAqIC8vID0+IFswLCA1LCAxMCwgMTVdXG4gKlxuICogXy5yYW5nZSgwLCAtNCwgLTEpO1xuICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gKlxuICogXy5yYW5nZSgxLCA0LCAwKTtcbiAqIC8vID0+IFsxLCAxLCAxXVxuICpcbiAqIF8ucmFuZ2UoMCk7XG4gKiAvLyA9PiBbXVxuICovXG52YXIgcmFuZ2UgPSBjcmVhdGVSYW5nZSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJhbmdlO1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImNvbnRyb2xcIjpcIlNlbGVjdF9fY29udHJvbC0tMlB6Q0RcIixcImFycm93RG93blwiOlwiU2VsZWN0X19hcnJvd0Rvd24tLTJIVWY1XCIsXCJjbGVhckljb25cIjpcIlNlbGVjdF9fY2xlYXJJY29uLS0yQWcwOFwifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wid3JhcHBlclwiOlwiQ291bnRlcl9fd3JhcHBlci0tMkRkdlBcIixcInZhbHVlXCI6XCJDb3VudGVyX192YWx1ZS0tM3BaWFVcIixcImNvdW50QnV0dG9uXCI6XCJDb3VudGVyX19jb3VudEJ1dHRvbi0tMkZQQWJcIixcImNvdW50QnV0dG9uX2Rpc2FibGVkXCI6XCJDb3VudGVyX19jb3VudEJ1dHRvbl9kaXNhYmxlZC0tMnNCb0dcIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcIndyYXBwZXJcIjpcIlJvb21fX3dyYXBwZXItLTNHd1VKXCIsXCJsZWZ0Q29sdW1uXCI6XCJSb29tX19sZWZ0Q29sdW1uLS0xdncxT1wiLFwicmlnaHRDb2x1bW5cIjpcIlJvb21fX3JpZ2h0Q29sdW1uLS0yN05VVVwiLFwidGl0bGVcIjpcIlJvb21fX3RpdGxlLS0zLVB2b1wiLFwibGFiZWxcIjpcIlJvb21fX2xhYmVsLS0xb2lRMFwiLFwibGFiZWxfYWdlXCI6XCJSb29tX19sYWJlbF9hZ2UtLTIzS0Z6XCIsXCJsaW5lXCI6XCJSb29tX19saW5lLS1iZHNCUFwiLFwiY29udHJvbEJveFwiOlwiUm9vbV9fY29udHJvbEJveC0tM05MMVBcIixcInJlbW92ZUJ0blwiOlwiUm9vbV9fcmVtb3ZlQnRuLS0zMmNKQ1wifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wicG9wdXBcIjpcIk1vYmlsZVN1Z2dlc3RfX3BvcHVwLS0zWFZWWFwiLFwiY29udHJvbHNcIjpcIk1vYmlsZVN1Z2dlc3RfX2NvbnRyb2xzLS0zdGhIWFwiLFwiYmFja0J1dHRvblwiOlwiTW9iaWxlU3VnZ2VzdF9fYmFja0J1dHRvbi0tMWU0VmZcIixcImFycm93TGVmdFwiOlwiTW9iaWxlU3VnZ2VzdF9fYXJyb3dMZWZ0LS0xb0p2MlwifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiaW5wdXRcIjpcIkd1ZXN0c19faW5wdXQtLTFMN05zXCIsXCJwb3B1cFwiOlwiR3Vlc3RzX19wb3B1cC0tMU84OVdcIixcImFycm93RG93blwiOlwiR3Vlc3RzX19hcnJvd0Rvd24tLTNQUk8zXCIsXCJhcnJvd1RvcFwiOlwiR3Vlc3RzX19hcnJvd1RvcC0tMW51OWQgR3Vlc3RzX19hcnJvd0Rvd24tLTNQUk8zXCJ9OyIsImNvbnN0IGV2ZW50ID0gKC4uLmFyZ3MpID0+IGdsb2JhbC5oY2Z1bm5lbCAmJiBnbG9iYWwuaGNmdW5uZWwoJ2V2ZW50JywgLi4uYXJncyk7XG5cbmNvbnN0IGZ1bm5lbCA9IHsgZXZlbnQgfTtcblxuZXhwb3J0IGRlZmF1bHQgZnVubmVsO1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImxhYmVsXCI6XCJEZWZhdWx0X19sYWJlbC0tMS1ta1pcIixcImNvbnRyb2xcIjpcIkRlZmF1bHRfX2NvbnRyb2wtLXd1LXpOXCIsXCJmYWtlQ2hlY2tib3hcIjpcIkRlZmF1bHRfX2Zha2VDaGVja2JveC0tM3YwNGRcIixcImZha2VDaGVja2JveF9jaGVja2VkXCI6XCJEZWZhdWx0X19mYWtlQ2hlY2tib3hfY2hlY2tlZC0tTDN6WHNcIixcInRleHRcIjpcIkRlZmF1bHRfX3RleHQtLTFONE9iXCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJsYWJlbFwiOlwiQnV0dG9uX19sYWJlbC0tMUs1MGdcIixcImxhYmVsX3dpZGVcIjpcIkJ1dHRvbl9fbGFiZWxfd2lkZS0tamNOZ2RcIixcImNvbnRyb2xcIjpcIkJ1dHRvbl9fY29udHJvbC0tMmJkRXhcIixcImJ1dHRvblwiOlwiQnV0dG9uX19idXR0b24tLTJZbGNfXCIsXCJidXR0b25fY2hlY2tlZFwiOlwiQnV0dG9uX19idXR0b25fY2hlY2tlZC0tMlpwTjVcIixcImJ1dHRvbl93aWRlXCI6XCJCdXR0b25fX2J1dHRvbl93aWRlLS0yUHkzN1wifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wibGFiZWxcIjpcIklucHV0UmFkaW9fX2xhYmVsLS0ySTNHOVwiLFwidGV4dFwiOlwiSW5wdXRSYWRpb19fdGV4dC0tM3BlZk1cIixcImljb25cIjpcIklucHV0UmFkaW9fX2ljb24tLTJDU2NVXCIsXCJjb250YWluZXJcIjpcIklucHV0UmFkaW9fX2NvbnRhaW5lci0tMTd4dTNcIixcImNvbnRhaW5lcl9kaXNhYmxlZFwiOlwiSW5wdXRSYWRpb19fY29udGFpbmVyX2Rpc2FibGVkLS0xUWxOTVwiLFwiY29udGFpbmVyX2Vycm9yXCI6XCJJbnB1dFJhZGlvX19jb250YWluZXJfZXJyb3ItLTMxVkg1XCIsXCJpbnB1dFwiOlwiSW5wdXRSYWRpb19faW5wdXQtLXU5TW1pXCIsXCJpbnB1dF9lcnJvclwiOlwiSW5wdXRSYWRpb19faW5wdXRfZXJyb3ItLWt0ZjdFXCIsXCJoaW50XCI6XCJJbnB1dFJhZGlvX19oaW50LS0xX0pMWFwiLFwibm90ZVwiOlwiSW5wdXRSYWRpb19fbm90ZS0tMVpyZ2ZcIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImdyb3VwXCI6XCJSYWRpb0dyb3VwX19ncm91cC0tZm5nNTVcIixcImdyb3VwX3dpZGVcIjpcIlJhZGlvR3JvdXBfX2dyb3VwX3dpZGUtLThaTEI5XCIsXCJncm91cF9jb2x1bW5cIjpcIlJhZGlvR3JvdXBfX2dyb3VwX2NvbHVtbi0tM0dESHhcIixcInJhZGlvXCI6XCJSYWRpb0dyb3VwX19yYWRpby0tMUVTLXFcIixcImdyb3VwX3dyYXBwZWRcIjpcIlJhZGlvR3JvdXBfX2dyb3VwX3dyYXBwZWQtLTFGYWN2XCIsXCJyYWRpb192aWV3X2J1dHRvblwiOlwiUmFkaW9Hcm91cF9fcmFkaW9fdmlld19idXR0b24tLTJtWWM4XCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJsaW5lXCI6XCJCMkNFeHRyYV9fbGluZS0tSnl6U3pcIixcInRyaXBUeXBlXCI6XCJCMkNFeHRyYV9fdHJpcFR5cGUtLTE2dXpBXCIsXCJ0cmlwVHlwZV9pblBvcHVwXCI6XCJCMkNFeHRyYV9fdHJpcFR5cGVfaW5Qb3B1cC0tQldzYzdcIixcImNvbXBhcmV0b1wiOlwiQjJDRXh0cmFfX2NvbXBhcmV0by0tMWVLMUVcIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcIml0ZW1cIjpcIlN1Z2dlc3RfX2l0ZW0tLTNhLUxCXCIsXCJpdGVtX2FjdGl2ZVwiOlwiU3VnZ2VzdF9faXRlbV9hY3RpdmUtLU5XMlRXXCIsXCJjb3VudHJ5XCI6XCJTdWdnZXN0X19jb3VudHJ5LS16ODF4bVwiLFwic2VwYXJhdG9yXCI6XCJTdWdnZXN0X19zZXBhcmF0b3ItLWFUNGJPXCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJ3cmFwcGVyXCI6XCJNb2JpbGVTdWdnZXN0X193cmFwcGVyLS1mUVNENVwiLFwiY29udHJvbHNcIjpcIk1vYmlsZVN1Z2dlc3RfX2NvbnRyb2xzLS0zTkVCTFwiLFwiYmFja0J1dHRvblwiOlwiTW9iaWxlU3VnZ2VzdF9fYmFja0J1dHRvbi0tMnE0V0hcIixcImFycm93TGVmdFwiOlwiTW9iaWxlU3VnZ2VzdF9fYXJyb3dMZWZ0LS0ycEZQRFwiLFwic3VnZ2VzdFwiOlwiTW9iaWxlU3VnZ2VzdF9fc3VnZ2VzdC0tMUpvS3JcIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcIndyYXBwZXJcIjpcIkNpdGl6ZW5zaGlwX193cmFwcGVyLS0yQ2FCbFwiLFwicG9wdXBcIjpcIkNpdGl6ZW5zaGlwX19wb3B1cC0tMXd2RFBcIixcImFycm93RG93blwiOlwiQ2l0aXplbnNoaXBfX2Fycm93RG93bi0tUnZIQWNcIixcImFycm93VG9wXCI6XCJDaXRpemVuc2hpcF9fYXJyb3dUb3AtLTNyOUMzIENpdGl6ZW5zaGlwX19hcnJvd0Rvd24tLVJ2SEFjXCIsXCJjbGVhckljb25cIjpcIkNpdGl6ZW5zaGlwX19jbGVhckljb24tLWFqWFprXCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJncm91cFwiOlwiQ2hlY2tib3hHcm91cF9fZ3JvdXAtLTFQaHFrXCIsXCJncm91cF93aWRlXCI6XCJDaGVja2JveEdyb3VwX19ncm91cF93aWRlLS0xY1pOQlwiLFwiZ3JvdXBfd3JhcFwiOlwiQ2hlY2tib3hHcm91cF9fZ3JvdXBfd3JhcC0tM2NUMXVcIixcImNvbnRyb2xcIjpcIkNoZWNrYm94R3JvdXBfX2NvbnRyb2wtLXNlT0VyXCIsXCJjb250cm9sX3ZpZXdfYnV0dG9uXCI6XCJDaGVja2JveEdyb3VwX19jb250cm9sX3ZpZXdfYnV0dG9uLS0yTWVfMVwifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiY29udHJvbFwiOlwiRUNMQ19fY29udHJvbC0tM1VuWkVcIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImxpbmVcIjpcIkIyQkV4dHJhX19saW5lLS0xQnEzTlwiLFwiY29udHJvbFwiOlwiQjJCRXh0cmFfX2NvbnRyb2wtLTFIMk9WXCIsXCJtZWFsc1wiOlwiQjJCRXh0cmFfX21lYWxzLS0xUXc3ZCBCMkJFeHRyYV9fY29udHJvbC0tMUgyT1ZcIixcIm1lYWxzX2luUG9wdXBcIjpcIkIyQkV4dHJhX19tZWFsc19pblBvcHVwLS0yUHJ4SVwiLFwiY2l0aXplbnNoaXBcIjpcIkIyQkV4dHJhX19jaXRpemVuc2hpcC0tMmdvUGogQjJCRXh0cmFfX2NvbnRyb2wtLTFIMk9WXCIsXCJjaXRpemVuc2hpcF9pblBvcHVwXCI6XCJCMkJFeHRyYV9fY2l0aXplbnNoaXBfaW5Qb3B1cC0tMXhCZHBcIixcImZyZWVDYW5jZWxsYXRpb25cIjpcIkIyQkV4dHJhX19mcmVlQ2FuY2VsbGF0aW9uLS0xcFZ5eCBCMkJFeHRyYV9fY29udHJvbC0tMUgyT1ZcIixcImZyZWVDYW5jZWxsYXRpb25faW5Qb3B1cFwiOlwiQjJCRXh0cmFfX2ZyZWVDYW5jZWxsYXRpb25faW5Qb3B1cC0tbWJ1NGhcIixcImVjbGNcIjpcIkIyQkV4dHJhX19lY2xjLS1iSkpXMyBCMkJFeHRyYV9fY29udHJvbC0tMUgyT1ZcIixcImVjbGNfaW5Qb3B1cFwiOlwiQjJCRXh0cmFfX2VjbGNfaW5Qb3B1cC0tM0VTZERcIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcIndyYXBwZXJcIjpcIkV4dHJhUGFyYW1zU3dpdGNoZXJfX3dyYXBwZXItLTFwQWVRXCIsXCJ3cmFwcGVyX2luUG9wdXBcIjpcIkV4dHJhUGFyYW1zU3dpdGNoZXJfX3dyYXBwZXJfaW5Qb3B1cC0tMVhBdG1cIixcIndyYXBwZXJfbW9iaWxlT25seVwiOlwiRXh0cmFQYXJhbXNTd2l0Y2hlcl9fd3JhcHBlcl9tb2JpbGVPbmx5LS0yeENHZVwiLFwiYXJyb3dcIjpcIkV4dHJhUGFyYW1zU3dpdGNoZXJfX2Fycm93LS1rNjRYdVwiLFwiYXJyb3dfcmV2ZXJzZVwiOlwiRXh0cmFQYXJhbXNTd2l0Y2hlcl9fYXJyb3dfcmV2ZXJzZS0tMzJHVTVcIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcIndyYXBwZXJcIjpcIlNlYXJjaEZvcm1fX3dyYXBwZXItLTJoeUllXCIsXCJjb250cm9sXCI6XCJTZWFyY2hGb3JtX19jb250cm9sLS0xMG1MUlwiLFwiZGVzdGluYXRpb25cIjpcIlNlYXJjaEZvcm1fX2Rlc3RpbmF0aW9uLS1aQUpCZyBTZWFyY2hGb3JtX19jb250cm9sLS0xMG1MUlwiLFwiZGVzdGluYXRpb25faW5Qb3B1cFwiOlwiU2VhcmNoRm9ybV9fZGVzdGluYXRpb25faW5Qb3B1cC0tM3E0ZkdcIixcImRlc3RpbmF0aW9uX25hcnJvd1wiOlwiU2VhcmNoRm9ybV9fZGVzdGluYXRpb25fbmFycm93LS0yczFMTVwiLFwiZGVzdGluYXRpb25faGlkZGVuXCI6XCJTZWFyY2hGb3JtX19kZXN0aW5hdGlvbl9oaWRkZW4tLTFnOHBkXCIsXCJkYXRlc1wiOlwiU2VhcmNoRm9ybV9fZGF0ZXMtLWFtYXF1IFNlYXJjaEZvcm1fX2NvbnRyb2wtLTEwbUxSXCIsXCJndWVzdHNcIjpcIlNlYXJjaEZvcm1fX2d1ZXN0cy0tMXpXVUogU2VhcmNoRm9ybV9fY29udHJvbC0tMTBtTFJcIixcImd1ZXN0c19pc0RlbW9cIjpcIlNlYXJjaEZvcm1fX2d1ZXN0c19pc0RlbW8tLTI2T3p6XCIsXCJleHRyYVBhcmFtc1N3aXRjaGVyXCI6XCJTZWFyY2hGb3JtX19leHRyYVBhcmFtc1N3aXRjaGVyLS0yZERZbyBTZWFyY2hGb3JtX19jb250cm9sLS0xMG1MUlwiLFwic3VibWl0XCI6XCJTZWFyY2hGb3JtX19zdWJtaXQtLTdybWFLIFNlYXJjaEZvcm1fX2NvbnRyb2wtLTEwbUxSXCIsXCJzdWJtaXRfaW5Qb3B1cFwiOlwiU2VhcmNoRm9ybV9fc3VibWl0X2luUG9wdXAtLTMzMzlmXCIsXCJzdWJtaXRfaXNCMkJcIjpcIlNlYXJjaEZvcm1fX3N1Ym1pdF9pc0IyQi0tMm4tel9cIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcInBvcHVwXCI6XCJwb3B1cF9fcG9wdXAtLTFyVjZ4XCIsXCJsb2dvXCI6XCJwb3B1cF9fbG9nby0tMjJrdXVcIixcImhlYWRlclwiOlwicG9wdXBfX2hlYWRlci0tM2xlWldcIixcImJ1dHRvbnNcIjpcInBvcHVwX19idXR0b25zLS0yeEZxNVwiLFwiYnV0dG9uQ2xvc2VcIjpcInBvcHVwX19idXR0b25DbG9zZS0tM3I5czJcIixcInRpdGxlXCI6XCJwb3B1cF9fdGl0bGUtLXhPaXNPXCIsXCJ0ZXh0XCI6XCJwb3B1cF9fdGV4dC0tQjU5aTJcIixcImF1dGhcIjpcInBvcHVwX19hdXRoLS0zQVBrSFwifTsiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgbm93ID0gcmVxdWlyZSgnLi9ub3cnKSxcbiAgICB0b051bWJlciA9IHJlcXVpcmUoJy4vdG9OdW1iZXInKTtcblxuLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICogbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2FzXG4gKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAqIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZVxuICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICogY2FsbHMgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2BcbiAqIGludm9jYXRpb24uXG4gKlxuICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAqXG4gKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAqXG4gKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCkpO1xuICpcbiAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwge1xuICogICAnbGVhZGluZyc6IHRydWUsXG4gKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gKiB9KSk7XG4gKlxuICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAqIHZhciBkZWJvdW5jZWQgPSBfLmRlYm91bmNlKGJhdGNoTG9nLCAyNTAsIHsgJ21heFdhaXQnOiAxMDAwIH0pO1xuICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGFzdEFyZ3MsXG4gICAgICBsYXN0VGhpcyxcbiAgICAgIG1heFdhaXQsXG4gICAgICByZXN1bHQsXG4gICAgICB0aW1lcklkLFxuICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgbGVhZGluZyA9IGZhbHNlLFxuICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgd2FpdCA9IHRvTnVtYmVyKHdhaXQpIHx8IDA7XG4gIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICBtYXhpbmcgPSAnbWF4V2FpdCcgaW4gb3B0aW9ucztcbiAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICB0aGlzQXJnID0gbGFzdFRoaXM7XG5cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBsZWFkaW5nRWRnZSh0aW1lKSB7XG4gICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgLy8gU3RhcnQgdGhlIHRpbWVyIGZvciB0aGUgdHJhaWxpbmcgZWRnZS5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgIHJldHVybiBsZWFkaW5nID8gaW52b2tlRnVuYyh0aW1lKSA6IHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgIHRpbWVXYWl0aW5nID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgcmV0dXJuIG1heGluZ1xuICAgICAgPyBuYXRpdmVNaW4odGltZVdhaXRpbmcsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKVxuICAgICAgOiB0aW1lV2FpdGluZztcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZTtcblxuICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlXG4gICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAvLyBpdCBhcyB0aGUgdHJhaWxpbmcgZWRnZSwgb3Igd2UndmUgaGl0IHRoZSBgbWF4V2FpdGAgbGltaXQuXG4gICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHxcbiAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gIH1cblxuICBmdW5jdGlvbiB0aW1lckV4cGlyZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICBpZiAoc2hvdWxkSW52b2tlKHRpbWUpKSB7XG4gICAgICByZXR1cm4gdHJhaWxpbmdFZGdlKHRpbWUpO1xuICAgIH1cbiAgICAvLyBSZXN0YXJ0IHRoZSB0aW1lci5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhaWxpbmdFZGdlKHRpbWUpIHtcbiAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXG4gICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgIC8vIGRlYm91bmNlZCBhdCBsZWFzdCBvbmNlLlxuICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgfVxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgfVxuICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICBsYXN0QXJncyA9IGxhc3RDYWxsVGltZSA9IGxhc3RUaGlzID0gdGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHJldHVybiB0aW1lcklkID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiB0cmFpbGluZ0VkZ2Uobm93KCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCksXG4gICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7XG5cbiAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgbGFzdENhbGxUaW1lID0gdGltZTtcblxuICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgfVxuICAgICAgaWYgKG1heGluZykge1xuICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gIHJldHVybiBkZWJvdW5jZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVib3VuY2U7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBEYXRlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAqIH0sIF8ubm93KCkpO1xuICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAqL1xudmFyIG5vdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBub3c7XG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZyZWVHbG9iYWw7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTeW1ib2w7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcbiIsInZhciBtYXAgPSB7XG5cdFwiLi9hYi5zdmdcIjogMjg2LFxuXHRcIi4vYWQuc3ZnXCI6IDI4Nyxcblx0XCIuL2FlLnN2Z1wiOiAyODgsXG5cdFwiLi9hZi5zdmdcIjogMjg5LFxuXHRcIi4vYWcuc3ZnXCI6IDI5MCxcblx0XCIuL2FpLnN2Z1wiOiAyOTEsXG5cdFwiLi9hbC5zdmdcIjogMjkyLFxuXHRcIi4vYW0uc3ZnXCI6IDI5Myxcblx0XCIuL2FvLnN2Z1wiOiAyOTQsXG5cdFwiLi9hci5zdmdcIjogMjk1LFxuXHRcIi4vYXMuc3ZnXCI6IDI5Nixcblx0XCIuL2F0LnN2Z1wiOiAyOTcsXG5cdFwiLi9hdS5zdmdcIjogMjk4LFxuXHRcIi4vYXcuc3ZnXCI6IDI5OSxcblx0XCIuL2F4LnN2Z1wiOiAzMDAsXG5cdFwiLi9hei5zdmdcIjogMzAxLFxuXHRcIi4vYmEuc3ZnXCI6IDMwMixcblx0XCIuL2JiLnN2Z1wiOiAzMDMsXG5cdFwiLi9iZC5zdmdcIjogMzA0LFxuXHRcIi4vYmUuc3ZnXCI6IDMwNSxcblx0XCIuL2JmLnN2Z1wiOiAzMDYsXG5cdFwiLi9iZy5zdmdcIjogMzA3LFxuXHRcIi4vYmguc3ZnXCI6IDMwOCxcblx0XCIuL2JpLnN2Z1wiOiAzMDksXG5cdFwiLi9iai5zdmdcIjogMzEwLFxuXHRcIi4vYmwuc3ZnXCI6IDMxMSxcblx0XCIuL2JtLnN2Z1wiOiAzMTIsXG5cdFwiLi9ibi5zdmdcIjogMzEzLFxuXHRcIi4vYm8uc3ZnXCI6IDMxNCxcblx0XCIuL2JxLnN2Z1wiOiAzMTUsXG5cdFwiLi9ici5zdmdcIjogMzE2LFxuXHRcIi4vYnMuc3ZnXCI6IDMxNyxcblx0XCIuL2J0LnN2Z1wiOiAzMTgsXG5cdFwiLi9idy5zdmdcIjogMzE5LFxuXHRcIi4vYnkuc3ZnXCI6IDMyMCxcblx0XCIuL2J6LnN2Z1wiOiAzMjEsXG5cdFwiLi9jYS5zdmdcIjogMzIyLFxuXHRcIi4vY2Muc3ZnXCI6IDMyMyxcblx0XCIuL2NkLnN2Z1wiOiAzMjQsXG5cdFwiLi9jZi5zdmdcIjogMzI1LFxuXHRcIi4vY2cuc3ZnXCI6IDMyNixcblx0XCIuL2NoLnN2Z1wiOiAzMjcsXG5cdFwiLi9jaS5zdmdcIjogMzI4LFxuXHRcIi4vY2suc3ZnXCI6IDMyOSxcblx0XCIuL2NsLnN2Z1wiOiAzMzAsXG5cdFwiLi9jbS5zdmdcIjogMzMxLFxuXHRcIi4vY24uc3ZnXCI6IDMzMixcblx0XCIuL2NvLnN2Z1wiOiAzMzMsXG5cdFwiLi9jci5zdmdcIjogMzM0LFxuXHRcIi4vY3Uuc3ZnXCI6IDMzNSxcblx0XCIuL2N2LnN2Z1wiOiAzMzYsXG5cdFwiLi9jdy5zdmdcIjogMzM3LFxuXHRcIi4vY3guc3ZnXCI6IDMzOCxcblx0XCIuL2N5LnN2Z1wiOiAzMzksXG5cdFwiLi9jei5zdmdcIjogMzQwLFxuXHRcIi4vZGUuc3ZnXCI6IDM0MSxcblx0XCIuL2RqLnN2Z1wiOiAzNDIsXG5cdFwiLi9kay5zdmdcIjogMzQzLFxuXHRcIi4vZG0uc3ZnXCI6IDM0NCxcblx0XCIuL2RvLnN2Z1wiOiAzNDUsXG5cdFwiLi9kei5zdmdcIjogMzQ2LFxuXHRcIi4vZWMuc3ZnXCI6IDM0Nyxcblx0XCIuL2VlLnN2Z1wiOiAzNDgsXG5cdFwiLi9lZy5zdmdcIjogMzQ5LFxuXHRcIi4vZXIuc3ZnXCI6IDM1MCxcblx0XCIuL2VzLnN2Z1wiOiAzNTEsXG5cdFwiLi9ldC5zdmdcIjogMzUyLFxuXHRcIi4vZmkuc3ZnXCI6IDM1Myxcblx0XCIuL2ZqLnN2Z1wiOiAzNTQsXG5cdFwiLi9may5zdmdcIjogMzU1LFxuXHRcIi4vZm0uc3ZnXCI6IDM1Nixcblx0XCIuL2ZvLnN2Z1wiOiAzNTcsXG5cdFwiLi9mci5zdmdcIjogMzU4LFxuXHRcIi4vZ2Euc3ZnXCI6IDM1OSxcblx0XCIuL2diLnN2Z1wiOiAzNjAsXG5cdFwiLi9nZC5zdmdcIjogMzYxLFxuXHRcIi4vZ2Uuc3ZnXCI6IDM2Mixcblx0XCIuL2dmLnN2Z1wiOiAzNjMsXG5cdFwiLi9nZy5zdmdcIjogMzY0LFxuXHRcIi4vZ2guc3ZnXCI6IDM2NSxcblx0XCIuL2dpLnN2Z1wiOiAzNjYsXG5cdFwiLi9nbC5zdmdcIjogMzY3LFxuXHRcIi4vZ20uc3ZnXCI6IDM2OCxcblx0XCIuL2duLnN2Z1wiOiAzNjksXG5cdFwiLi9ncC5zdmdcIjogMzcwLFxuXHRcIi4vZ3Euc3ZnXCI6IDM3MSxcblx0XCIuL2dyLnN2Z1wiOiAzNzIsXG5cdFwiLi9ndC5zdmdcIjogMzczLFxuXHRcIi4vZ3Uuc3ZnXCI6IDM3NCxcblx0XCIuL2d3LnN2Z1wiOiAzNzUsXG5cdFwiLi9neS5zdmdcIjogMzc2LFxuXHRcIi4vaGsuc3ZnXCI6IDM3Nyxcblx0XCIuL2huLnN2Z1wiOiAzNzgsXG5cdFwiLi9oci5zdmdcIjogMzc5LFxuXHRcIi4vaHQuc3ZnXCI6IDM4MCxcblx0XCIuL2h1LnN2Z1wiOiAzODEsXG5cdFwiLi9pZC5zdmdcIjogMzgyLFxuXHRcIi4vaWUuc3ZnXCI6IDM4Myxcblx0XCIuL2lsLnN2Z1wiOiAzODQsXG5cdFwiLi9pbS5zdmdcIjogMzg1LFxuXHRcIi4vaW4uc3ZnXCI6IDM4Nixcblx0XCIuL2lvLnN2Z1wiOiAzODcsXG5cdFwiLi9pcS5zdmdcIjogMzg4LFxuXHRcIi4vaXIuc3ZnXCI6IDM4OSxcblx0XCIuL2lzLnN2Z1wiOiAzOTAsXG5cdFwiLi9pdC5zdmdcIjogMzkxLFxuXHRcIi4vamUuc3ZnXCI6IDM5Mixcblx0XCIuL2ptLnN2Z1wiOiAzOTMsXG5cdFwiLi9qby5zdmdcIjogMzk0LFxuXHRcIi4vanAuc3ZnXCI6IDM5NSxcblx0XCIuL2tlLnN2Z1wiOiAzOTYsXG5cdFwiLi9rZy5zdmdcIjogMzk3LFxuXHRcIi4va2guc3ZnXCI6IDM5OCxcblx0XCIuL2tpLnN2Z1wiOiAzOTksXG5cdFwiLi9rbS5zdmdcIjogNDAwLFxuXHRcIi4va24uc3ZnXCI6IDQwMSxcblx0XCIuL2twLnN2Z1wiOiA0MDIsXG5cdFwiLi9rci5zdmdcIjogNDAzLFxuXHRcIi4va3cuc3ZnXCI6IDQwNCxcblx0XCIuL2t5LnN2Z1wiOiA0MDUsXG5cdFwiLi9rei5zdmdcIjogNDA2LFxuXHRcIi4vbGEuc3ZnXCI6IDQwNyxcblx0XCIuL2xiLnN2Z1wiOiA0MDgsXG5cdFwiLi9sYy5zdmdcIjogNDA5LFxuXHRcIi4vbGkuc3ZnXCI6IDQxMCxcblx0XCIuL2xrLnN2Z1wiOiA0MTEsXG5cdFwiLi9sci5zdmdcIjogNDEyLFxuXHRcIi4vbHMuc3ZnXCI6IDQxMyxcblx0XCIuL2x0LnN2Z1wiOiA0MTQsXG5cdFwiLi9sdS5zdmdcIjogNDE1LFxuXHRcIi4vbHYuc3ZnXCI6IDQxNixcblx0XCIuL2x5LnN2Z1wiOiA0MTcsXG5cdFwiLi9tYS5zdmdcIjogNDE4LFxuXHRcIi4vbWMuc3ZnXCI6IDQxOSxcblx0XCIuL21kLnN2Z1wiOiA0MjAsXG5cdFwiLi9tZS5zdmdcIjogNDIxLFxuXHRcIi4vbWYuc3ZnXCI6IDQyMixcblx0XCIuL21nLnN2Z1wiOiA0MjMsXG5cdFwiLi9taC5zdmdcIjogNDI0LFxuXHRcIi4vbWsuc3ZnXCI6IDQyNSxcblx0XCIuL21sLnN2Z1wiOiA0MjYsXG5cdFwiLi9tbS5zdmdcIjogNDI3LFxuXHRcIi4vbW4uc3ZnXCI6IDQyOCxcblx0XCIuL21vLnN2Z1wiOiA0MjksXG5cdFwiLi9tcC5zdmdcIjogNDMwLFxuXHRcIi4vbXEuc3ZnXCI6IDQzMSxcblx0XCIuL21yLnN2Z1wiOiA0MzIsXG5cdFwiLi9tcy5zdmdcIjogNDMzLFxuXHRcIi4vbXQuc3ZnXCI6IDQzNCxcblx0XCIuL211LnN2Z1wiOiA0MzUsXG5cdFwiLi9tdi5zdmdcIjogNDM2LFxuXHRcIi4vbXcuc3ZnXCI6IDQzNyxcblx0XCIuL214LnN2Z1wiOiA0MzgsXG5cdFwiLi9teS5zdmdcIjogNDM5LFxuXHRcIi4vbXouc3ZnXCI6IDQ0MCxcblx0XCIuL25hLnN2Z1wiOiA0NDEsXG5cdFwiLi9uYy5zdmdcIjogNDQyLFxuXHRcIi4vbmUuc3ZnXCI6IDQ0Myxcblx0XCIuL25mLnN2Z1wiOiA0NDQsXG5cdFwiLi9uZy5zdmdcIjogNDQ1LFxuXHRcIi4vbmkuc3ZnXCI6IDQ0Nixcblx0XCIuL25sLnN2Z1wiOiA0NDcsXG5cdFwiLi9uby5zdmdcIjogNDQ4LFxuXHRcIi4vbnAuc3ZnXCI6IDQ0OSxcblx0XCIuL25yLnN2Z1wiOiA0NTAsXG5cdFwiLi9udS5zdmdcIjogNDUxLFxuXHRcIi4vbnouc3ZnXCI6IDQ1Mixcblx0XCIuL29tLnN2Z1wiOiA0NTMsXG5cdFwiLi9wYS5zdmdcIjogNDU0LFxuXHRcIi4vcGUuc3ZnXCI6IDQ1NSxcblx0XCIuL3BmLnN2Z1wiOiA0NTYsXG5cdFwiLi9wZy5zdmdcIjogNDU3LFxuXHRcIi4vcGguc3ZnXCI6IDQ1OCxcblx0XCIuL3BrLnN2Z1wiOiA0NTksXG5cdFwiLi9wbC5zdmdcIjogNDYwLFxuXHRcIi4vcG0uc3ZnXCI6IDQ2MSxcblx0XCIuL3BuLnN2Z1wiOiA0NjIsXG5cdFwiLi9wci5zdmdcIjogNDYzLFxuXHRcIi4vcHMuc3ZnXCI6IDQ2NCxcblx0XCIuL3B0LnN2Z1wiOiA0NjUsXG5cdFwiLi9wdy5zdmdcIjogNDY2LFxuXHRcIi4vcHkuc3ZnXCI6IDQ2Nyxcblx0XCIuL3FhLnN2Z1wiOiA0NjgsXG5cdFwiLi9yZS5zdmdcIjogNDY5LFxuXHRcIi4vcm8uc3ZnXCI6IDQ3MCxcblx0XCIuL3JzLnN2Z1wiOiA0NzEsXG5cdFwiLi9ydS5zdmdcIjogNDcyLFxuXHRcIi4vcncuc3ZnXCI6IDQ3Myxcblx0XCIuL3NhLnN2Z1wiOiA0NzQsXG5cdFwiLi9zYi5zdmdcIjogNDc1LFxuXHRcIi4vc2Muc3ZnXCI6IDQ3Nixcblx0XCIuL3NkLnN2Z1wiOiA0NzcsXG5cdFwiLi9zZS5zdmdcIjogNDc4LFxuXHRcIi4vc2cuc3ZnXCI6IDQ3OSxcblx0XCIuL3NoLnN2Z1wiOiA0ODAsXG5cdFwiLi9zaS5zdmdcIjogNDgxLFxuXHRcIi4vc2ouc3ZnXCI6IDQ4Mixcblx0XCIuL3NrLnN2Z1wiOiA0ODMsXG5cdFwiLi9zbC5zdmdcIjogNDg0LFxuXHRcIi4vc20uc3ZnXCI6IDQ4NSxcblx0XCIuL3NuLnN2Z1wiOiA0ODYsXG5cdFwiLi9zby5zdmdcIjogNDg3LFxuXHRcIi4vc3Iuc3ZnXCI6IDQ4OCxcblx0XCIuL3NzLnN2Z1wiOiA0ODksXG5cdFwiLi9zdC5zdmdcIjogNDkwLFxuXHRcIi4vc3Yuc3ZnXCI6IDQ5MSxcblx0XCIuL3N4LnN2Z1wiOiA0OTIsXG5cdFwiLi9zeS5zdmdcIjogNDkzLFxuXHRcIi4vc3ouc3ZnXCI6IDQ5NCxcblx0XCIuL3RjLnN2Z1wiOiA0OTUsXG5cdFwiLi90ZC5zdmdcIjogNDk2LFxuXHRcIi4vdGcuc3ZnXCI6IDQ5Nyxcblx0XCIuL3RoLnN2Z1wiOiA0OTgsXG5cdFwiLi90ai5zdmdcIjogNDk5LFxuXHRcIi4vdGsuc3ZnXCI6IDUwMCxcblx0XCIuL3RsLnN2Z1wiOiA1MDEsXG5cdFwiLi90bS5zdmdcIjogNTAyLFxuXHRcIi4vdG4uc3ZnXCI6IDUwMyxcblx0XCIuL3RvLnN2Z1wiOiA1MDQsXG5cdFwiLi90ci5zdmdcIjogNTA1LFxuXHRcIi4vdHQuc3ZnXCI6IDUwNixcblx0XCIuL3R2LnN2Z1wiOiA1MDcsXG5cdFwiLi90dy5zdmdcIjogNTA4LFxuXHRcIi4vdHouc3ZnXCI6IDUwOSxcblx0XCIuL3VhLnN2Z1wiOiA1MTAsXG5cdFwiLi91Zy5zdmdcIjogNTExLFxuXHRcIi4vdW0uc3ZnXCI6IDUxMixcblx0XCIuL3VzLnN2Z1wiOiA1MTMsXG5cdFwiLi91eS5zdmdcIjogNTE0LFxuXHRcIi4vdXouc3ZnXCI6IDUxNSxcblx0XCIuL3ZhLnN2Z1wiOiA1MTYsXG5cdFwiLi92Yy5zdmdcIjogNTE3LFxuXHRcIi4vdmUuc3ZnXCI6IDUxOCxcblx0XCIuL3ZnLnN2Z1wiOiA1MTksXG5cdFwiLi92aS5zdmdcIjogNTIwLFxuXHRcIi4vdm4uc3ZnXCI6IDUyMSxcblx0XCIuL3Z1LnN2Z1wiOiA1MjIsXG5cdFwiLi93Zi5zdmdcIjogNTIzLFxuXHRcIi4vd3Muc3ZnXCI6IDUyNCxcblx0XCIuL3hrLnN2Z1wiOiA1MjUsXG5cdFwiLi95ZS5zdmdcIjogNTI2LFxuXHRcIi4veXQuc3ZnXCI6IDUyNyxcblx0XCIuL3phLnN2Z1wiOiA1MjgsXG5cdFwiLi96bS5zdmdcIjogNTI5LFxuXHRcIi4vencuc3ZnXCI6IDUzMFxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDI4NTsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9hYi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9hZC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9hZS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9hZi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9hZy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9haS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9hbC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9hbS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9hby5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9hci5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9hcy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9hdC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9hdS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9hdy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9heC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9hei5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9iYS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9iYi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9iZC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9iZS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9iZi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9iZy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9iaC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9iaS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9iai5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9ibC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9ibS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9ibi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9iby5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9icS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9ici5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9icy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9idC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9idy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9ieS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9iei5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9jYS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9jYy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9jZC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9jZi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9jZy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9jaC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9jaS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9jay5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9jbC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9jbS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9jbi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9jby5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9jci5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9jdS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9jdi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9jdy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9jeC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9jeS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9jei5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9kZS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9kai5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9kay5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9kbS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9kby5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9kei5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9lYy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9lZS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9lZy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9lci5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9lcy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9ldC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9maS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9mai5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9may5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9mbS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9mby5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9mci5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9nYS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9nYi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9nZC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9nZS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9nZi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9nZy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9naC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9naS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9nbC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9nbS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9nbi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9ncC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9ncS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9nci5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9ndC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9ndS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9ndy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9neS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9oay5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9obi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9oci5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9odC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9odS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9pZC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9pZS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9pbC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9pbS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9pbi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9pby5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9pcS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9pci5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9pcy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9pdC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9qZS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9qbS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9qby5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9qcC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9rZS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9rZy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9raC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9raS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9rbS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9rbi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9rcC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9rci5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9rdy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9reS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9rei5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9sYS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9sYi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9sYy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9saS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9say5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9sci5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9scy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9sdC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9sdS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9sdi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9seS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9tYS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9tYy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9tZC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9tZS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9tZi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9tZy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9taC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9tay5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9tbC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9tbS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9tbi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9tby5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9tcC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9tcS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9tci5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9tcy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9tdC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9tdS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9tdi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9tdy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9teC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9teS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9tei5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9uYS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9uYy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9uZS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9uZi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9uZy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9uaS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9ubC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9uby5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9ucC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9uci5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9udS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9uei5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9vbS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9wYS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9wZS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9wZi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9wZy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9waC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9way5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9wbC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9wbS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9wbi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9wci5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9wcy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9wdC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9wdy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9weS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9xYS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9yZS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9yby5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9ycy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9ydS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9ydy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9zYS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9zYi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9zYy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9zZC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9zZS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9zZy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9zaC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9zaS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9zai5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9zay5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9zbC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9zbS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9zbi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9zby5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9zci5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9zcy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9zdC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9zdi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9zeC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9zeS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9zei5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy90Yy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy90ZC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy90Zy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy90aC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy90ai5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy90ay5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy90bC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy90bS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy90bi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy90by5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy90ci5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy90dC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy90di5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy90dy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy90ei5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy91YS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy91Zy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy91bS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy91cy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy91eS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy91ei5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy92YS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy92Yy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy92ZS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy92Zy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy92aS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy92bi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy92dS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy93Zi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy93cy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy94ay5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy95ZS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy95dC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy96YS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy96bS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy96dy5zdmdcIjsiLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi90b0ludGVnZXInKSxcbiAgICB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vdG9MZW5ndGgnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWxsYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZmlsbCBgYXJyYXlgIHdpdGguXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICB9XG4gIGVuZCA9IChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiBsZW5ndGgpID8gbGVuZ3RoIDogdG9JbnRlZ2VyKGVuZCk7XG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlbmd0aDtcbiAgfVxuICBlbmQgPSBzdGFydCA+IGVuZCA/IDAgOiB0b0xlbmd0aChlbmQpO1xuICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcbiAgICBhcnJheVtzdGFydCsrXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRmlsbDtcbiIsInZhciBiYXNlQ2xhbXAgPSByZXF1aXJlKCcuL19iYXNlQ2xhbXAnKSxcbiAgICB0b0ludGVnZXIgPSByZXF1aXJlKCcuL3RvSW50ZWdlcicpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB0aGUgbWF4aW11bSBsZW5ndGggYW5kIGluZGV4IG9mIGFuIGFycmF5LiAqL1xudmFyIE1BWF9BUlJBWV9MRU5HVEggPSA0Mjk0OTY3Mjk1O1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlciBzdWl0YWJsZSBmb3IgdXNlIGFzIHRoZSBsZW5ndGggb2YgYW5cbiAqIGFycmF5LWxpa2Ugb2JqZWN0LlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTGVuZ3RoKDMuMik7XG4gKiAvLyA9PiAzXG4gKlxuICogXy50b0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDBcbiAqXG4gKiBfLnRvTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IDQyOTQ5NjcyOTVcbiAqXG4gKiBfLnRvTGVuZ3RoKCczLjInKTtcbiAqIC8vID0+IDNcbiAqL1xuZnVuY3Rpb24gdG9MZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIDAsIE1BWF9BUlJBWV9MRU5HVEgpIDogMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0xlbmd0aDtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xhbXBgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICovXG5mdW5jdGlvbiBiYXNlQ2xhbXAobnVtYmVyLCBsb3dlciwgdXBwZXIpIHtcbiAgaWYgKG51bWJlciA9PT0gbnVtYmVyKSB7XG4gICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG51bWJlciA9IG51bWJlciA8PSB1cHBlciA/IG51bWJlciA6IHVwcGVyO1xuICAgIH1cbiAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbnVtYmVyID0gbnVtYmVyID49IGxvd2VyID8gbnVtYmVyIDogbG93ZXI7XG4gICAgfVxuICB9XG4gIHJldHVybiBudW1iZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUNsYW1wO1xuIiwiLyoqXG4gKiBQZXJmb3JtcyBhXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXE7XG4iLCJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5TGlrZTtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRnVuY3Rpb247XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNMZW5ndGg7XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNJbmRleDtcbiIsInZhciBiYXNlUmFuZ2UgPSByZXF1aXJlKCcuL19iYXNlUmFuZ2UnKSxcbiAgICBpc0l0ZXJhdGVlQ2FsbCA9IHJlcXVpcmUoJy4vX2lzSXRlcmF0ZWVDYWxsJyksXG4gICAgdG9GaW5pdGUgPSByZXF1aXJlKCcuL3RvRmluaXRlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGBfLnJhbmdlYCBvciBgXy5yYW5nZVJpZ2h0YCBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByYW5nZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUmFuZ2UoZnJvbVJpZ2h0KSB7XG4gIHJldHVybiBmdW5jdGlvbihzdGFydCwgZW5kLCBzdGVwKSB7XG4gICAgaWYgKHN0ZXAgJiYgdHlwZW9mIHN0ZXAgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RhcnQsIGVuZCwgc3RlcCkpIHtcbiAgICAgIGVuZCA9IHN0ZXAgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8vIEVuc3VyZSB0aGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgc3RhcnQgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICAgIH1cbiAgICBzdGVwID0gc3RlcCA9PT0gdW5kZWZpbmVkID8gKHN0YXJ0IDwgZW5kID8gMSA6IC0xKSA6IHRvRmluaXRlKHN0ZXApO1xuICAgIHJldHVybiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVSYW5nZTtcbiIsIi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVDZWlsID0gTWF0aC5jZWlsLFxuICAgIG5hdGl2ZU1heCA9IE1hdGgubWF4O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmdlYCBhbmQgYF8ucmFuZ2VSaWdodGAgd2hpY2ggZG9lc24ndFxuICogY29lcmNlIGFyZ3VtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IHN0ZXAgVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAqL1xuZnVuY3Rpb24gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChuYXRpdmVDZWlsKChlbmQgLSBzdGFydCkgLyAoc3RlcCB8fCAxKSksIDApLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICByZXN1bHRbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF0gPSBzdGFydDtcbiAgICBzdGFydCArPSBzdGVwO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVJhbmdlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGV4cG9ydHMuaXNCcm93c2VyID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0RG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG52YXIgdXNlQ3JlYXRlUG9ydGFsID0gdHlwZW9mIF9yZWFjdERvbVtcImRlZmF1bHRcIl0uY3JlYXRlUG9ydGFsID09PSAnZnVuY3Rpb24nO1xudmFyIGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuZXhwb3J0cy5pc0Jyb3dzZXIgPSBpc0Jyb3dzZXI7XG5cbnZhciBQb3J0YWwgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFBvcnRhbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUG9ydGFsKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcnRhbCk7XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihQb3J0YWwpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIGlmIChpc0Jyb3dzZXIpIHtcbiAgICAgIF90aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChfdGhpcy5jb250YWluZXIpO1xuXG4gICAgICBfdGhpcy5yZW5kZXJMYXllcigpO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQb3J0YWwsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICB0aGlzLnJlbmRlckxheWVyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKCF1c2VDcmVhdGVQb3J0YWwpIHtcbiAgICAgICAgX3JlYWN0RG9tW1wiZGVmYXVsdFwiXS51bm1vdW50Q29tcG9uZW50QXROb2RlKHRoaXMuY29udGFpbmVyKTtcbiAgICAgIH1cblxuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLmNvbnRhaW5lcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlckxheWVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckxheWVyKCkge1xuICAgICAgaWYgKCF1c2VDcmVhdGVQb3J0YWwpIHtcbiAgICAgICAgX3JlYWN0RG9tW1wiZGVmYXVsdFwiXS51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcih0aGlzLCB0aGlzLnByb3BzLmNoaWxkcmVuLCB0aGlzLmNvbnRhaW5lcik7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICBpZiAodXNlQ3JlYXRlUG9ydGFsKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3REb21bXCJkZWZhdWx0XCJdLmNyZWF0ZVBvcnRhbCh0aGlzLnByb3BzLmNoaWxkcmVuLCB0aGlzLmNvbnRhaW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQb3J0YWw7XG59KF9yZWFjdFtcImRlZmF1bHRcIl0uQ29tcG9uZW50KTtcblxuUG9ydGFsLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGUuaXNSZXF1aXJlZFxufTtcbnZhciBfZGVmYXVsdCA9IFBvcnRhbDtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHBvc2l0aW9ucztcblxudmFyIF9nZXREaXJlY3Rpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2dldERpcmVjdGlvblwiKSk7XG5cbnZhciBfZnVuY3Rpb25zID0gcmVxdWlyZShcIi4vZnVuY3Rpb25zXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG4vKipcbiAqIFNldHMgdGlwIG1heCB3aWR0aCBzYWZlbHkgZm9yIG1vYmlsZVxuICovXG5mdW5jdGlvbiBnZXRUaXBNYXhXaWR0aCgpIHtcbiAgcmV0dXJuIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggLSBfZnVuY3Rpb25zLmJvZHlQYWRkaW5nICogMiA6IDEwMDA7XG59XG4vKipcbiAqIFBhcnNlcyBhbGlnbiBtb2RlIGZyb20gZGlyZWN0aW9uIGlmIHNwZWNpZmllZCB3aXRoIGh5cGhlbiwgZGVmYXVsdGluZyB0byBtaWRkbGUgaWYgbm90IC1cbiAqIGUuZy4gJ2xlZnQtc3RhcnQnIGlzIG1vZGUgJ3N0YXJ0JyBhbmQgJ2xlZnQnIHdvdWxkIGJlIHRoZSBkZWZhdWx0IG9mICdtaWRkbGUnXG4gKi9cblxuXG5mdW5jdGlvbiBwYXJzZUFsaWduTW9kZShkaXJlY3Rpb24pIHtcbiAgdmFyIGRpcmVjdGlvbkFycmF5ID0gZGlyZWN0aW9uLnNwbGl0KCctJyk7XG5cbiAgaWYgKGRpcmVjdGlvbkFycmF5Lmxlbmd0aCA+IDEpIHtcbiAgICByZXR1cm4gZGlyZWN0aW9uQXJyYXlbMV07XG4gIH1cblxuICByZXR1cm4gJ21pZGRsZSc7XG59XG4vKipcbiAqIEdldHMgd3JhcHBlcidzIGxlZnQgcG9zaXRpb24gZm9yIHRvcC9ib3R0b20gdG9vbHRpcHMgYXMgd2VsbCBhcyBuZWVkZWQgd2lkdGggcmVzdHJpY3Rpb25cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFVwRG93blBvc2l0aW9uKHRpcCwgdGFyZ2V0LCBzdGF0ZSwgZGlyZWN0aW9uLCBhbGlnbk1vZGUsIHByb3BzKSB7XG4gIHZhciBsZWZ0ID0gLTEwMDAwMDAwO1xuICB2YXIgdG9wO1xuICB2YXIgdHJhbnNmb3JtID0gc3RhdGUuc2hvd1RpcCA/IHVuZGVmaW5lZCA6ICd0cmFuc2xhdGVYKC0xMDAwMDAwMHB4KSc7XG4gIHZhciBhcnJvd1NwYWNpbmcgPSAoMCwgX2Z1bmN0aW9ucy5nZXRBcnJvd1NwYWNpbmcpKHByb3BzKTtcblxuICBpZiAodGlwKSB7XG4gICAgLy8gZ2V0IHdyYXBwZXIgbGVmdCBwb3NpdGlvblxuICAgIHZhciBzY3JvbGxMZWZ0ID0gKDAsIF9mdW5jdGlvbnMuZ2V0U2Nyb2xsTGVmdCkoKTtcbiAgICB2YXIgdGFyZ2V0UmVjdCA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB2YXIgdGFyZ2V0TGVmdCA9IHRhcmdldFJlY3QubGVmdCArIHNjcm9sbExlZnQ7XG4gICAgdmFyIGhhbGZUYXJnZXRXaWR0aCA9IE1hdGgucm91bmQodGFyZ2V0Lm9mZnNldFdpZHRoIC8gMik7XG4gICAgdmFyIHRpcFdpZHRoID0gTWF0aC5taW4oZ2V0VGlwTWF4V2lkdGgoKSwgdGlwLm9mZnNldFdpZHRoKTtcbiAgICB2YXIgYXJyb3dDZW50ZXIgPSB0YXJnZXRMZWZ0ICsgaGFsZlRhcmdldFdpZHRoO1xuICAgIHZhciBhcnJvd0xlZnQgPSBhcnJvd0NlbnRlciAtIHByb3BzLmFycm93U2l6ZTtcbiAgICB2YXIgYXJyb3dSaWdodCA9IGFycm93Q2VudGVyICsgcHJvcHMuYXJyb3dTaXplO1xuXG4gICAgaWYgKGFsaWduTW9kZSA9PT0gJ3N0YXJ0Jykge1xuICAgICAgbGVmdCA9IHByb3BzLmFycm93ID8gTWF0aC5taW4oYXJyb3dMZWZ0LCB0YXJnZXRMZWZ0KSA6IHRhcmdldExlZnQ7XG4gICAgfSBlbHNlIGlmIChhbGlnbk1vZGUgPT09ICdlbmQnKSB7XG4gICAgICB2YXIgcmlnaHRXaXRoQXJyb3cgPSBNYXRoLm1heChhcnJvd1JpZ2h0LCB0YXJnZXRMZWZ0ICsgdGFyZ2V0Lm9mZnNldFdpZHRoKTtcbiAgICAgIHZhciByaWdodEVkZ2UgPSBwcm9wcy5hcnJvdyA/IHJpZ2h0V2l0aEFycm93IDogdGFyZ2V0TGVmdCArIHRhcmdldC5vZmZzZXRXaWR0aDtcbiAgICAgIGxlZnQgPSBNYXRoLm1heChyaWdodEVkZ2UgLSB0aXBXaWR0aCwgX2Z1bmN0aW9ucy5ib2R5UGFkZGluZyArIHNjcm9sbExlZnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2VudGVyZWRMZWZ0ID0gdGFyZ2V0TGVmdCArIGhhbGZUYXJnZXRXaWR0aCAtIE1hdGgucm91bmQodGlwV2lkdGggLyAyKTtcbiAgICAgIHZhciBhdmFpbGFibGVTcGFjZU9uTGVmdCA9IF9mdW5jdGlvbnMuYm9keVBhZGRpbmcgKyBzY3JvbGxMZWZ0O1xuICAgICAgbGVmdCA9IE1hdGgubWF4KGNlbnRlcmVkTGVmdCwgYXZhaWxhYmxlU3BhY2VPbkxlZnQpO1xuICAgIH0gLy8gY2hlY2sgZm9yIHJpZ2h0IG92ZXJoYW5nXG5cblxuICAgIHZhciByaWdodE9mVGlwID0gbGVmdCArIHRpcFdpZHRoO1xuICAgIHZhciByaWdodE9mU2NyZWVuID0gc2Nyb2xsTGVmdCArIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCAtIF9mdW5jdGlvbnMuYm9keVBhZGRpbmc7XG4gICAgdmFyIHJpZ2h0T3ZlcmhhbmcgPSByaWdodE9mVGlwIC0gcmlnaHRPZlNjcmVlbjtcblxuICAgIGlmIChyaWdodE92ZXJoYW5nID4gMCkge1xuICAgICAgbGVmdCAtPSByaWdodE92ZXJoYW5nO1xuICAgIH1cblxuICAgIGlmIChkaXJlY3Rpb24gPT09ICd1cCcpIHtcbiAgICAgIHRvcCA9IHRhcmdldFJlY3QudG9wICsgKDAsIF9mdW5jdGlvbnMuZ2V0U2Nyb2xsVG9wKSgpIC0gKHRpcC5vZmZzZXRIZWlnaHQgKyBhcnJvd1NwYWNpbmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0b3AgPSB0YXJnZXRSZWN0LmJvdHRvbSArICgwLCBfZnVuY3Rpb25zLmdldFNjcm9sbFRvcCkoKSArIGFycm93U3BhY2luZztcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGxlZnQ6IGxlZnQsXG4gICAgdG9wOiB0b3AsXG4gICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm1cbiAgfTtcbn1cbi8qKlxuICogZ2V0cyB0b3AgcG9zaXRpb24gZm9yIGxlZnQvcmlnaHQgYXJyb3dzXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRMZWZ0UmlnaHRQb3NpdGlvbih0aXAsIHRhcmdldCwgc3RhdGUsIGRpcmVjdGlvbiwgYWxpZ25Nb2RlLCBwcm9wcykge1xuICB2YXIgbGVmdCA9IC0xMDAwMDAwMDtcbiAgdmFyIHRvcCA9IDA7XG4gIHZhciB0cmFuc2Zvcm0gPSBzdGF0ZS5zaG93VGlwID8gdW5kZWZpbmVkIDogJ3RyYW5zbGF0ZVgoLTEwMDAwMDAwcHgpJztcbiAgdmFyIGFycm93U3BhY2luZyA9ICgwLCBfZnVuY3Rpb25zLmdldEFycm93U3BhY2luZykocHJvcHMpO1xuICB2YXIgYXJyb3dQYWRkaW5nID0gcHJvcHMuYXJyb3cgPyBfZnVuY3Rpb25zLm1pbkFycm93UGFkZGluZyA6IDA7XG5cbiAgaWYgKHRpcCkge1xuICAgIHZhciBzY3JvbGxUb3AgPSAoMCwgX2Z1bmN0aW9ucy5nZXRTY3JvbGxUb3ApKCk7XG4gICAgdmFyIHNjcm9sbExlZnQgPSAoMCwgX2Z1bmN0aW9ucy5nZXRTY3JvbGxMZWZ0KSgpO1xuICAgIHZhciB0YXJnZXRSZWN0ID0gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHZhciB0YXJnZXRUb3AgPSB0YXJnZXRSZWN0LnRvcCArIHNjcm9sbFRvcDtcbiAgICB2YXIgaGFsZlRhcmdldEhlaWdodCA9IE1hdGgucm91bmQodGFyZ2V0Lm9mZnNldEhlaWdodCAvIDIpO1xuICAgIHZhciBhcnJvd1RvcCA9IHRhcmdldFRvcCArIGhhbGZUYXJnZXRIZWlnaHQgLSBwcm9wcy5hcnJvd1NpemU7XG4gICAgdmFyIGFycm93Qm90dG9tID0gdGFyZ2V0UmVjdC50b3AgKyBzY3JvbGxUb3AgKyBoYWxmVGFyZ2V0SGVpZ2h0ICsgcHJvcHMuYXJyb3dTaXplOyAvLyBUT0RPOiBoYW5kbGUgY2xvc2UgdG8gZWRnZXMgYmV0dGVyXG5cbiAgICBpZiAoYWxpZ25Nb2RlID09PSAnc3RhcnQnKSB7XG4gICAgICB0b3AgPSBwcm9wcy5hcnJvdyA/IE1hdGgubWluKHRhcmdldFRvcCwgYXJyb3dUb3ApIDogdGFyZ2V0VG9wO1xuICAgIH0gZWxzZSBpZiAoYWxpZ25Nb2RlID09PSAnZW5kJykge1xuICAgICAgdmFyIHRvcEZvckJvdHRvbUFsaWduID0gdGFyZ2V0UmVjdC5ib3R0b20gKyBzY3JvbGxUb3AgLSB0aXAub2Zmc2V0SGVpZ2h0O1xuICAgICAgdG9wID0gcHJvcHMuYXJyb3cgPyBNYXRoLm1heCh0b3BGb3JCb3R0b21BbGlnbiwgYXJyb3dCb3R0b20gLSB0aXAub2Zmc2V0SGVpZ2h0KSA6IHRvcEZvckJvdHRvbUFsaWduO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBkZWZhdWx0IHRvIG1pZGRsZSwgYnV0IGRvbid0IGdvIGJlbG93IGJvZHlcbiAgICAgIHZhciBjZW50ZXJlZFRvcCA9IE1hdGgubWF4KHRhcmdldFRvcCArIGhhbGZUYXJnZXRIZWlnaHQgLSBNYXRoLnJvdW5kKHRpcC5vZmZzZXRIZWlnaHQgLyAyKSwgX2Z1bmN0aW9ucy5ib2R5UGFkZGluZyArIHNjcm9sbFRvcCk7IC8vIG1ha2Ugc3VyZSBpdCBkb2Vzbid0IGdvIGJlbG93IHRoZSBhcnJvd1xuXG4gICAgICB0b3AgPSBNYXRoLm1pbihjZW50ZXJlZFRvcCwgYXJyb3dUb3AgLSBhcnJvd1BhZGRpbmcpO1xuICAgIH0gLy8gY2hlY2sgZm9yIGJvdHRvbSBvdmVyaGFuZ1xuXG5cbiAgICB2YXIgYm90dG9tT3ZlcmhhbmcgPSB0b3AgLSBzY3JvbGxUb3AgKyB0aXAub2Zmc2V0SGVpZ2h0ICsgX2Z1bmN0aW9ucy5ib2R5UGFkZGluZyAtIHdpbmRvdy5pbm5lckhlaWdodDtcblxuICAgIGlmIChib3R0b21PdmVyaGFuZyA+IDApIHtcbiAgICAgIC8vIHRyeSB0byBhZGQgdGhlIGJvZHkgcGFkZGluZyBiZWxvdyB0aGUgdGlwLCBidXQgZG9uJ3Qgb2Zmc2V0IHRvbyBmYXIgZnJvbSB0aGUgYXJyb3dcbiAgICAgIHRvcCA9IE1hdGgubWF4KHRvcCAtIGJvdHRvbU92ZXJoYW5nLCBhcnJvd0JvdHRvbSArIGFycm93UGFkZGluZyAtIHRpcC5vZmZzZXRIZWlnaHQpO1xuICAgIH1cblxuICAgIGlmIChkaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICAgIGxlZnQgPSB0YXJnZXRSZWN0LnJpZ2h0ICsgYXJyb3dTcGFjaW5nICsgc2Nyb2xsTGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGVmdCA9IHRhcmdldFJlY3QubGVmdCAtIGFycm93U3BhY2luZyAtIHRpcC5vZmZzZXRXaWR0aCArIHNjcm9sbExlZnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiBsZWZ0LFxuICAgIHRvcDogdG9wLFxuICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtXG4gIH07XG59XG4vKipcbiAqIHNldHMgdGhlIEFycm93IHN0eWxlcyBiYXNlZCBvbiBkaXJlY3Rpb25cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldEFycm93U3R5bGVzKHRhcmdldCwgdGlwLCBkaXJlY3Rpb24sIHN0YXRlLCBwcm9wcykge1xuICBpZiAoIXRhcmdldCB8fCAhcHJvcHMuYXJyb3cpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcG9zaXRpb25TdHlsZXM6IHtcbiAgICAgICAgdG9wOiAnMCcsXG4gICAgICAgIGxlZnQ6ICctMTAwMDAwMDBweCdcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgdmFyIHRhcmdldFJlY3QgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBoYWxmVGFyZ2V0SGVpZ2h0ID0gTWF0aC5yb3VuZCh0YXJnZXQub2Zmc2V0SGVpZ2h0IC8gMik7XG4gIHZhciBoYWxmVGFyZ2V0V2lkdGggPSBNYXRoLnJvdW5kKHRhcmdldC5vZmZzZXRXaWR0aCAvIDIpO1xuICB2YXIgc2Nyb2xsVG9wID0gKDAsIF9mdW5jdGlvbnMuZ2V0U2Nyb2xsVG9wKSgpO1xuICB2YXIgc2Nyb2xsTGVmdCA9ICgwLCBfZnVuY3Rpb25zLmdldFNjcm9sbExlZnQpKCk7XG4gIHZhciBhcnJvd1NwYWNpbmcgPSAoMCwgX2Z1bmN0aW9ucy5nZXRBcnJvd1NwYWNpbmcpKHByb3BzKTtcbiAgdmFyIGJvcmRlclN0eWxlcyA9IHt9O1xuICB2YXIgcG9zaXRpb25TdHlsZXMgPSB7fTtcblxuICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgIGJvcmRlclN0eWxlcy5ib3JkZXJUb3AgPSBcIlwiLmNvbmNhdChwcm9wcy5hcnJvd1NpemUsIFwicHggc29saWQgdHJhbnNwYXJlbnRcIik7XG4gICAgICBib3JkZXJTdHlsZXMuYm9yZGVyQm90dG9tID0gXCJcIi5jb25jYXQocHJvcHMuYXJyb3dTaXplLCBcInB4IHNvbGlkIHRyYW5zcGFyZW50XCIpO1xuXG4gICAgICBpZiAocHJvcHMuYmFja2dyb3VuZCkge1xuICAgICAgICBib3JkZXJTdHlsZXMuYm9yZGVyUmlnaHQgPSBcIlwiLmNvbmNhdChwcm9wcy5hcnJvd1NpemUsIFwicHggc29saWQgXCIpLmNvbmNhdChwcm9wcy5iYWNrZ3JvdW5kKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJvcmRlclN0eWxlcy5ib3JkZXJSaWdodFdpZHRoID0gXCJcIi5jb25jYXQocHJvcHMuYXJyb3dTaXplLCBcInB4XCIpO1xuICAgICAgICBib3JkZXJTdHlsZXMuYm9yZGVyUmlnaHRTdHlsZSA9ICdzb2xpZCc7XG4gICAgICB9XG5cbiAgICAgIHBvc2l0aW9uU3R5bGVzLnRvcCA9IHN0YXRlLnNob3dUaXAgJiYgdGlwID8gdGFyZ2V0UmVjdC50b3AgKyBzY3JvbGxUb3AgKyBoYWxmVGFyZ2V0SGVpZ2h0IC0gcHJvcHMuYXJyb3dTaXplIDogJy0xMDAwMDAwMHB4JztcbiAgICAgIHBvc2l0aW9uU3R5bGVzLmxlZnQgPSB0YXJnZXRSZWN0LnJpZ2h0ICsgc2Nyb2xsTGVmdCArIGFycm93U3BhY2luZyAtIHByb3BzLmFycm93U2l6ZTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnbGVmdCc6XG4gICAgICBib3JkZXJTdHlsZXMuYm9yZGVyVG9wID0gXCJcIi5jb25jYXQocHJvcHMuYXJyb3dTaXplLCBcInB4IHNvbGlkIHRyYW5zcGFyZW50XCIpO1xuICAgICAgYm9yZGVyU3R5bGVzLmJvcmRlckJvdHRvbSA9IFwiXCIuY29uY2F0KHByb3BzLmFycm93U2l6ZSwgXCJweCBzb2xpZCB0cmFuc3BhcmVudFwiKTtcblxuICAgICAgaWYgKHByb3BzLmJhY2tncm91bmQpIHtcbiAgICAgICAgYm9yZGVyU3R5bGVzLmJvcmRlckxlZnQgPSBcIlwiLmNvbmNhdChwcm9wcy5hcnJvd1NpemUsIFwicHggc29saWQgXCIpLmNvbmNhdChwcm9wcy5iYWNrZ3JvdW5kKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJvcmRlclN0eWxlcy5ib3JkZXJMZWZ0V2lkdGggPSBcIlwiLmNvbmNhdChwcm9wcy5hcnJvd1NpemUsIFwicHhcIik7XG4gICAgICAgIGJvcmRlclN0eWxlcy5ib3JkZXJMZWZ0U3R5bGUgPSAnc29saWQnO1xuICAgICAgfVxuXG4gICAgICBwb3NpdGlvblN0eWxlcy50b3AgPSBzdGF0ZS5zaG93VGlwICYmIHRpcCA/IHRhcmdldFJlY3QudG9wICsgc2Nyb2xsVG9wICsgaGFsZlRhcmdldEhlaWdodCAtIHByb3BzLmFycm93U2l6ZSA6ICctMTAwMDAwMDBweCc7XG4gICAgICBwb3NpdGlvblN0eWxlcy5sZWZ0ID0gdGFyZ2V0UmVjdC5sZWZ0ICsgc2Nyb2xsTGVmdCAtIGFycm93U3BhY2luZyAtIDE7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3VwJzpcbiAgICAgIGJvcmRlclN0eWxlcy5ib3JkZXJMZWZ0ID0gXCJcIi5jb25jYXQocHJvcHMuYXJyb3dTaXplLCBcInB4IHNvbGlkIHRyYW5zcGFyZW50XCIpO1xuICAgICAgYm9yZGVyU3R5bGVzLmJvcmRlclJpZ2h0ID0gXCJcIi5jb25jYXQocHJvcHMuYXJyb3dTaXplLCBcInB4IHNvbGlkIHRyYW5zcGFyZW50XCIpOyAvLyBpZiBjb2xvciBpcyBzdHlsZWQgd2l0aCBjc3MsIHdlIG5lZWQgZXZlcnl0aGluZyBleGNlcHQgYm9yZGVyLWNvbG9yLCBpZiBzdHlsZWQgd2l0aCBwcm9wcywgd2UgYWRkIGVudGlyZSBib3JkZXIgcnVsZVxuXG4gICAgICBpZiAocHJvcHMuYmFja2dyb3VuZCkge1xuICAgICAgICBib3JkZXJTdHlsZXMuYm9yZGVyVG9wID0gXCJcIi5jb25jYXQocHJvcHMuYXJyb3dTaXplLCBcInB4IHNvbGlkIFwiKS5jb25jYXQocHJvcHMuYmFja2dyb3VuZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBib3JkZXJTdHlsZXMuYm9yZGVyVG9wV2lkdGggPSBcIlwiLmNvbmNhdChwcm9wcy5hcnJvd1NpemUsIFwicHhcIik7XG4gICAgICAgIGJvcmRlclN0eWxlcy5ib3JkZXJUb3BTdHlsZSA9ICdzb2xpZCc7XG4gICAgICB9XG5cbiAgICAgIHBvc2l0aW9uU3R5bGVzLmxlZnQgPSBzdGF0ZS5zaG93VGlwICYmIHRpcCA/IHRhcmdldFJlY3QubGVmdCArIHNjcm9sbExlZnQgKyBoYWxmVGFyZ2V0V2lkdGggLSBwcm9wcy5hcnJvd1NpemUgOiAnLTEwMDAwMDAwcHgnO1xuICAgICAgcG9zaXRpb25TdHlsZXMudG9wID0gdGFyZ2V0UmVjdC50b3AgKyBzY3JvbGxUb3AgLSBhcnJvd1NwYWNpbmc7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2Rvd24nOlxuICAgIGRlZmF1bHQ6XG4gICAgICBib3JkZXJTdHlsZXMuYm9yZGVyTGVmdCA9IFwiXCIuY29uY2F0KHByb3BzLmFycm93U2l6ZSwgXCJweCBzb2xpZCB0cmFuc3BhcmVudFwiKTtcbiAgICAgIGJvcmRlclN0eWxlcy5ib3JkZXJSaWdodCA9IFwiXCIuY29uY2F0KHByb3BzLmFycm93U2l6ZSwgXCJweCBzb2xpZCB0cmFuc3BhcmVudFwiKTtcblxuICAgICAgaWYgKHByb3BzLmJhY2tncm91bmQpIHtcbiAgICAgICAgYm9yZGVyU3R5bGVzLmJvcmRlckJvdHRvbSA9IFwiMTBweCBzb2xpZCBcIi5jb25jYXQocHJvcHMuYmFja2dyb3VuZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBib3JkZXJTdHlsZXMuYm9yZGVyQm90dG9tV2lkdGggPSBcIlwiLmNvbmNhdChwcm9wcy5hcnJvd1NpemUsIFwicHhcIik7XG4gICAgICAgIGJvcmRlclN0eWxlcy5ib3JkZXJCb3R0b21TdHlsZSA9ICdzb2xpZCc7XG4gICAgICB9XG5cbiAgICAgIHBvc2l0aW9uU3R5bGVzLmxlZnQgPSBzdGF0ZS5zaG93VGlwICYmIHRpcCA/IHRhcmdldFJlY3QubGVmdCArIHNjcm9sbExlZnQgKyBoYWxmVGFyZ2V0V2lkdGggLSBwcm9wcy5hcnJvd1NpemUgOiAnLTEwMDAwMDAwcHgnO1xuICAgICAgcG9zaXRpb25TdHlsZXMudG9wID0gdGFyZ2V0UmVjdC5ib3R0b20gKyBzY3JvbGxUb3AgKyBhcnJvd1NwYWNpbmcgLSBwcm9wcy5hcnJvd1NpemU7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYm9yZGVyU3R5bGVzOiBib3JkZXJTdHlsZXMsXG4gICAgcG9zaXRpb25TdHlsZXM6IHBvc2l0aW9uU3R5bGVzXG4gIH07XG59XG4vKipcbiAqIFJldHVybnMgdGhlIHBvc2l0aW9ucyBzdHlsZSBydWxlc1xuICovXG5cblxuZnVuY3Rpb24gcG9zaXRpb25zKGRpcmVjdGlvbiwgZm9yY2VEaXJlY3Rpb24sIHRpcCwgdGFyZ2V0LCBzdGF0ZSwgcHJvcHMpIHtcbiAgdmFyIGFsaWduTW9kZSA9IHBhcnNlQWxpZ25Nb2RlKGRpcmVjdGlvbik7XG4gIHZhciB0cmltbWVkRGlyZWN0aW9uID0gZGlyZWN0aW9uLnNwbGl0KCctJylbMF07XG4gIHZhciByZWFsRGlyZWN0aW9uID0gdHJpbW1lZERpcmVjdGlvbjtcblxuICBpZiAoIWZvcmNlRGlyZWN0aW9uICYmIHRpcCkge1xuICAgIHZhciB0ZXN0QXJyb3dTdHlsZXMgPSBwcm9wcy5hcnJvdyAmJiBnZXRBcnJvd1N0eWxlcyh0YXJnZXQsIHRpcCwgdHJpbW1lZERpcmVjdGlvbiwgc3RhdGUsIHByb3BzKTtcbiAgICByZWFsRGlyZWN0aW9uID0gKDAsIF9nZXREaXJlY3Rpb25bXCJkZWZhdWx0XCJdKSh0cmltbWVkRGlyZWN0aW9uLCB0aXAsIHRhcmdldCwgcHJvcHMsIF9mdW5jdGlvbnMuYm9keVBhZGRpbmcsIHRlc3RBcnJvd1N0eWxlcyk7XG4gIH1cblxuICB2YXIgbWF4V2lkdGggPSBnZXRUaXBNYXhXaWR0aCgpOyAvLyBmb3JjZSB0aGUgdGlwIHRvIGRpc3BsYXkgdGhlIHdpZHRoIHdlIG1lYXN1cmVkIGV2ZXJ5dGhpbmcgYXQgd2hlbiB2aXNpYmxlXG5cbiAgdmFyIHdpZHRoO1xuXG4gIGlmICh0aXApIHtcbiAgICAvLyBhZGRpbmcgdGhlIGV4YWN0IHdpZHRoIG9uIHRoZSBmaXJzdCByZW5kZXIgZm9yY2VzIGEgYm9ndXMgbGluZSBicmVhaywgc28gYWRkIDFweCB0aGUgZmlyc3QgdGltZVxuICAgIHZhciBzcGFjZXIgPSB0aXAuc3R5bGUud2lkdGggPyAwIDogMTtcbiAgICB3aWR0aCA9IE1hdGgubWluKHRpcC5vZmZzZXRXaWR0aCwgbWF4V2lkdGgpICsgc3BhY2VyO1xuICB9XG5cbiAgdmFyIHRpcFBvc2l0aW9uID0gcmVhbERpcmVjdGlvbiA9PT0gJ3VwJyB8fCByZWFsRGlyZWN0aW9uID09PSAnZG93bicgPyBnZXRVcERvd25Qb3NpdGlvbih0aXAsIHRhcmdldCwgc3RhdGUsIHJlYWxEaXJlY3Rpb24sIGFsaWduTW9kZSwgcHJvcHMpIDogZ2V0TGVmdFJpZ2h0UG9zaXRpb24odGlwLCB0YXJnZXQsIHN0YXRlLCByZWFsRGlyZWN0aW9uLCBhbGlnbk1vZGUsIHByb3BzKTtcbiAgcmV0dXJuIHtcbiAgICB0aXA6IF9vYmplY3RTcHJlYWQoe30sIHRpcFBvc2l0aW9uLCB7XG4gICAgICBtYXhXaWR0aDogbWF4V2lkdGgsXG4gICAgICB3aWR0aDogd2lkdGhcbiAgICB9KSxcbiAgICBhcnJvdzogZ2V0QXJyb3dTdHlsZXModGFyZ2V0LCB0aXAsIHJlYWxEaXJlY3Rpb24sIHN0YXRlLCBwcm9wcyksXG4gICAgcmVhbERpcmVjdGlvbjogcmVhbERpcmVjdGlvblxuICB9O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBnZXREaXJlY3Rpb247XG5cbnZhciBfZnVuY3Rpb25zID0gcmVxdWlyZShcIi4vZnVuY3Rpb25zXCIpO1xuXG4vKipcbiAqIENoZWNrcyB0aGUgaW50ZW5kZWQgdGlwIGRpcmVjdGlvbiBhbmQgZmFsbHMgYmFjayBpZiBub3QgZW5vdWdoIHNwYWNlXG4gKi9cbmZ1bmN0aW9uIGNoZWNrTGVmdFJpZ2h0V2lkdGhTdWZmaWNpZW50KHRpcCwgdGFyZ2V0LCBkaXN0YW5jZSwgYm9keVBhZGRpbmcpIHtcbiAgdmFyIHRhcmdldFJlY3QgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBkZWFkU3BhY2UgPSBNYXRoLm1pbih0YXJnZXRSZWN0LmxlZnQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCAtIHRhcmdldFJlY3QucmlnaHQpO1xuICByZXR1cm4gdGlwLm9mZnNldFdpZHRoICsgdGFyZ2V0Lm9mZnNldFdpZHRoICsgZGlzdGFuY2UgKyBib2R5UGFkZGluZyArIGRlYWRTcGFjZSA8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcbn1cblxuZnVuY3Rpb24gY2hlY2tUYXJnZXRTdWZmaWNpZW50bHlWaXNpYmxlKHRhcmdldCwgdGlwLCBwcm9wcykge1xuICB2YXIgdGFyZ2V0UmVjdCA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIGJvdHRvbU92ZXJoYW5nID0gdGFyZ2V0UmVjdC5ib3R0b20gPiB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gIHZhciB0b3BPdmVyaGFuZyA9IHRhcmdldFJlY3QudG9wIDwgMDsgLy8gaWYgdGhlIHRhcmdldCBpcyB0YWxsZXIgdGhhbiB0aGUgdmlld3BvcnQgKGFuZCB3ZSBrbm93IHRoZXJlJ3Mgc3VmZmljaWVudCBsZWZ0L3JpZ2h0IHdpZHRoIGJlZm9yZSB0aGlzIGlzIGNhbGxlZCksXG4gIC8vIHRoZW4gZ28gd2l0aCB0aGUgbGVmdC9yaWdodCBkaXJlY3Rpb24gYXMgdG9wL2JvdHRvbSB3aWxsIGJvdGggYmUgb2ZmIHNjcmVlblxuXG4gIGlmICh0b3BPdmVyaGFuZyAmJiBib3R0b21PdmVyaGFuZykge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIGlmIHRoZSB0YXJnZXQgaXMgYmlnZ2VyIHRoYW4gdGhlIHRpcCwgd2UgbmVlZCB0byBjaGVjayBpZiBlbm91Z2ggb2YgdGhlIHRhcmdldCBpcyB2aXNpYmxlXG5cblxuICBpZiAodGFyZ2V0Lm9mZnNldEhlaWdodCA+IHRpcC5vZmZzZXRIZWlnaHQpIHtcbiAgICB2YXIgaGFsZlRhcmdldEhlaWdodCA9IHRhcmdldC5vZmZzZXRIZWlnaHQgLyAyO1xuICAgIHZhciBhcnJvd0NsZWFyYW5jZSA9IHByb3BzLmFycm93U2l6ZSArIF9mdW5jdGlvbnMubWluQXJyb3dQYWRkaW5nO1xuICAgIHZhciBib3R0b21PdmVyaGFuZ0Ftb3VudCA9IHRhcmdldFJlY3QuYm90dG9tIC0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgIHZhciB0b3BPdmVyaGFuZ0Ftb3VudCA9IC10YXJnZXRSZWN0LnRvcDtcbiAgICB2YXIgdGFyZ2V0Q2VudGVyVG9Cb3R0b21PZldpbmRvdyA9IGhhbGZUYXJnZXRIZWlnaHQgLSBib3R0b21PdmVyaGFuZ0Ftb3VudDtcbiAgICB2YXIgdGFyZ2V0Q2VudGVyVG9Ub3BPZldpbmRvdyA9IGhhbGZUYXJnZXRIZWlnaHQgLSB0b3BPdmVyaGFuZ0Ftb3VudDtcbiAgICByZXR1cm4gdGFyZ2V0Q2VudGVyVG9Cb3R0b21PZldpbmRvdyA+PSBhcnJvd0NsZWFyYW5jZSAmJiB0YXJnZXRDZW50ZXJUb1RvcE9mV2luZG93ID49IGFycm93Q2xlYXJhbmNlO1xuICB9IC8vIG90aGVyd2lzZSBqdXN0IGNoZWNrIHRoYXQgdGhlIHdob2xlIHRhcmdldCBpcyB2aXNpYmxlXG5cblxuICByZXR1cm4gIWJvdHRvbU92ZXJoYW5nICYmICF0b3BPdmVyaGFuZztcbn1cblxuZnVuY3Rpb24gY2hlY2tGb3JBcnJvd092ZXJoYW5nKHByb3BzLCBhcnJvd1N0eWxlcywgYm9keVBhZGRpbmcpIHtcbiAgdmFyIHNjcm9sbExlZnQgPSAoMCwgX2Z1bmN0aW9ucy5nZXRTY3JvbGxMZWZ0KSgpO1xuICB2YXIgaGFzTGVmdENsZWFyYW5jZSA9IGFycm93U3R5bGVzLnBvc2l0aW9uU3R5bGVzLmxlZnQgLSBzY3JvbGxMZWZ0ID4gYm9keVBhZGRpbmc7XG4gIHZhciBoYXNSaWdodENsZWFyYW5jZSA9IGFycm93U3R5bGVzLnBvc2l0aW9uU3R5bGVzLmxlZnQgKyBwcm9wcy5hcnJvd1NpemUgKiAyIDwgc2Nyb2xsTGVmdCArIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCAtIGJvZHlQYWRkaW5nO1xuICByZXR1cm4gIWhhc0xlZnRDbGVhcmFuY2UgfHwgIWhhc1JpZ2h0Q2xlYXJhbmNlO1xufVxuXG5mdW5jdGlvbiBnZXREaXJlY3Rpb24oY3VycmVudERpcmVjdGlvbiwgdGlwLCB0YXJnZXQsIHByb3BzLCBib2R5UGFkZGluZywgYXJyb3dTdHlsZXMsIHJlY3Vyc2l2ZSkge1xuICAvLyBjYW4ndCBzd2l0Y2ggdW50aWwgdGFyZ2V0IGlzIHJlbmRlcmVkXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgcmV0dXJuIGN1cnJlbnREaXJlY3Rpb247XG4gIH1cblxuICB2YXIgdGFyZ2V0UmVjdCA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIGFycm93U3BhY2luZyA9ICgwLCBfZnVuY3Rpb25zLmdldEFycm93U3BhY2luZykocHJvcHMpOyAvLyB0aGlzIGlzIGhvdyBtdWNoIHNwYWNlIGlzIG5lZWRlZCB0byBkaXNwbGF5IHRoZSB0aXAgYWJvdmUgb3IgYmVsb3cgdGhlIHRhcmdldFxuXG4gIHZhciBoZWlnaHRPZlRpcFdpdGhBcnJvdyA9IHRpcC5vZmZzZXRIZWlnaHQgKyBhcnJvd1NwYWNpbmcgKyBib2R5UGFkZGluZztcbiAgdmFyIHNwYWNlQmVsb3dUYXJnZXQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSB0YXJnZXRSZWN0LmJvdHRvbTtcbiAgdmFyIHNwYWNlQWJvdmVUYXJnZXQgPSB0YXJnZXRSZWN0LnRvcDtcbiAgdmFyIGhhc1NwYWNlQmVsb3cgPSBzcGFjZUJlbG93VGFyZ2V0ID49IGhlaWdodE9mVGlwV2l0aEFycm93O1xuICB2YXIgaGFzU3BhY2VBYm92ZSA9IHNwYWNlQWJvdmVUYXJnZXQgPj0gaGVpZ2h0T2ZUaXBXaXRoQXJyb3c7XG5cbiAgc3dpdGNoIChjdXJyZW50RGlyZWN0aW9uKSB7XG4gICAgY2FzZSAncmlnaHQnOlxuICAgICAgLy8gaWYgdGhlIHdpbmRvdyBpcyBub3Qgd2lkZSBlbm91Z2ggdHJ5IHRvcCAod2hpY2ggZmFsbHMgYmFjayB0byBkb3duKVxuICAgICAgaWYgKCFjaGVja0xlZnRSaWdodFdpZHRoU3VmZmljaWVudCh0aXAsIHRhcmdldCwgYXJyb3dTcGFjaW5nLCBib2R5UGFkZGluZykgfHwgIWNoZWNrVGFyZ2V0U3VmZmljaWVudGx5VmlzaWJsZSh0YXJnZXQsIHRpcCwgcHJvcHMpKSB7XG4gICAgICAgIHJldHVybiBnZXREaXJlY3Rpb24oJ3VwJywgdGlwLCB0YXJnZXQsIGFycm93U3BhY2luZywgYm9keVBhZGRpbmcsIGFycm93U3R5bGVzLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCAtIHRhcmdldFJlY3QucmlnaHQgPCB0aXAub2Zmc2V0V2lkdGggKyBhcnJvd1NwYWNpbmcgKyBib2R5UGFkZGluZykge1xuICAgICAgICByZXR1cm4gJ2xlZnQnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJ3JpZ2h0JztcblxuICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgLy8gaWYgdGhlIHdpbmRvdyBpcyBub3Qgd2lkZSBlbm91Z2ggdHJ5IHRvcCAod2hpY2ggZmFsbHMgYmFjayB0byBkb3duKVxuICAgICAgaWYgKCFjaGVja0xlZnRSaWdodFdpZHRoU3VmZmljaWVudCh0aXAsIHRhcmdldCwgYXJyb3dTcGFjaW5nLCBib2R5UGFkZGluZykgfHwgIWNoZWNrVGFyZ2V0U3VmZmljaWVudGx5VmlzaWJsZSh0YXJnZXQsIHRpcCwgcHJvcHMpKSB7XG4gICAgICAgIHJldHVybiBnZXREaXJlY3Rpb24oJ3VwJywgdGlwLCB0YXJnZXQsIGFycm93U3BhY2luZywgYm9keVBhZGRpbmcsIGFycm93U3R5bGVzLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRhcmdldFJlY3QubGVmdCA8IHRpcC5vZmZzZXRXaWR0aCArIGFycm93U3BhY2luZyArIGJvZHlQYWRkaW5nKSB7XG4gICAgICAgIHJldHVybiAncmlnaHQnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJ2xlZnQnO1xuXG4gICAgY2FzZSAndXAnOlxuICAgICAgaWYgKCFyZWN1cnNpdmUgJiYgYXJyb3dTdHlsZXMgJiYgY2hlY2tGb3JBcnJvd092ZXJoYW5nKHByb3BzLCBhcnJvd1N0eWxlcywgYm9keVBhZGRpbmcpKSB7XG4gICAgICAgIHJldHVybiBnZXREaXJlY3Rpb24oJ2xlZnQnLCB0aXAsIHRhcmdldCwgYXJyb3dTcGFjaW5nLCBib2R5UGFkZGluZywgYXJyb3dTdHlsZXMsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWhhc1NwYWNlQWJvdmUpIHtcbiAgICAgICAgaWYgKGhhc1NwYWNlQmVsb3cpIHtcbiAgICAgICAgICByZXR1cm4gJ2Rvd24nO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFyZWN1cnNpdmUgJiYgY2hlY2tMZWZ0UmlnaHRXaWR0aFN1ZmZpY2llbnQodGlwLCB0YXJnZXQsIGFycm93U3BhY2luZywgYm9keVBhZGRpbmcpKSB7XG4gICAgICAgICAgcmV0dXJuIGdldERpcmVjdGlvbigncmlnaHQnLCB0aXAsIHRhcmdldCwgYXJyb3dTcGFjaW5nLCBib2R5UGFkZGluZywgYXJyb3dTdHlsZXMsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAndXAnO1xuXG4gICAgY2FzZSAnZG93bic6XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmICghcmVjdXJzaXZlICYmIGFycm93U3R5bGVzICYmIGNoZWNrRm9yQXJyb3dPdmVyaGFuZyhwcm9wcywgYXJyb3dTdHlsZXMsIGJvZHlQYWRkaW5nKSkge1xuICAgICAgICByZXR1cm4gZ2V0RGlyZWN0aW9uKCdyaWdodCcsIHRpcCwgdGFyZ2V0LCBhcnJvd1NwYWNpbmcsIGJvZHlQYWRkaW5nLCBhcnJvd1N0eWxlcywgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaGFzU3BhY2VCZWxvdykge1xuICAgICAgICAvLyBpZiB0aGVyZSdzIG5vIHNwYWNlIGJlbG93LCBidXQgc3BhY2UgYWJvdmUsIHN3aXRjaCB0byB0aGF0IGRpcmVjdGlvblxuICAgICAgICBpZiAoaGFzU3BhY2VBYm92ZSkge1xuICAgICAgICAgIHJldHVybiAndXAnOyAvLyBpZiB0aGVyZSdzIG5vdCBzcGFjZSBhYm92ZSBvciBiZWxvdywgY2hlY2sgaWYgdGhlcmUgd291bGQgYmUgc3BhY2UgbGVmdCBvciByaWdodFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFyZWN1cnNpdmUgJiYgY2hlY2tMZWZ0UmlnaHRXaWR0aFN1ZmZpY2llbnQodGlwLCB0YXJnZXQsIGFycm93U3BhY2luZywgYm9keVBhZGRpbmcpKSB7XG4gICAgICAgICAgcmV0dXJuIGdldERpcmVjdGlvbigncmlnaHQnLCB0aXAsIHRhcmdldCwgYXJyb3dTcGFjaW5nLCBib2R5UGFkZGluZywgYXJyb3dTdHlsZXMsIHRydWUpO1xuICAgICAgICB9IC8vIGlmIHRoZXJlJ3Mgbm8gc3BhY2UgaW4gYW55IGRpcmVjdGlvbiwgZGVmYXVsdCB0byB0aGUgb3JpZ2luYWwgZGlyZWN0aW9uXG5cbiAgICAgIH1cblxuICAgICAgcmV0dXJuICdkb3duJztcbiAgfVxufSIsImNvbnN0IFNFVF9MT0NBTEUgPSAnU0VUX0xPQ0FMRSc7XG5cbmZ1bmN0aW9uIHNldExvY2FsZShsb2NhbGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBTRVRfTE9DQUxFLFxuICAgIGxvY2FsZSxcbiAgfTtcbn1cblxuY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICBsb2NhbGU6ICdydScsXG59O1xuXG5leHBvcnQgY29uc3QgY29uc3RhbnRzID0geyBTRVRfTE9DQUxFIH07XG5leHBvcnQgY29uc3QgYWN0aW9ucyA9IHsgc2V0TG9jYWxlIH07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pIHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgU0VUX0xPQ0FMRTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBsb2NhbGU6IGFjdGlvbi5sb2NhbGUsXG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgdmFyIFJlYWN0UmVkdXhDb250ZXh0ID1cbi8qI19fUFVSRV9fKi9cblJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFJlYWN0UmVkdXhDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1JlYWN0UmVkdXgnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZWFjdFJlZHV4Q29udGV4dDsiLCIvLyBEZWZhdWx0IHRvIGEgZHVtbXkgXCJiYXRjaFwiIGltcGxlbWVudGF0aW9uIHRoYXQganVzdCBydW5zIHRoZSBjYWxsYmFja1xuZnVuY3Rpb24gZGVmYXVsdE5vb3BCYXRjaChjYWxsYmFjaykge1xuICBjYWxsYmFjaygpO1xufVxuXG52YXIgYmF0Y2ggPSBkZWZhdWx0Tm9vcEJhdGNoOyAvLyBBbGxvdyBpbmplY3RpbmcgYW5vdGhlciBiYXRjaGluZyBmdW5jdGlvbiBsYXRlclxuXG5leHBvcnQgdmFyIHNldEJhdGNoID0gZnVuY3Rpb24gc2V0QmF0Y2gobmV3QmF0Y2gpIHtcbiAgcmV0dXJuIGJhdGNoID0gbmV3QmF0Y2g7XG59OyAvLyBTdXBwbHkgYSBnZXR0ZXIganVzdCB0byBza2lwIGRlYWxpbmcgd2l0aCBFU00gYmluZGluZ3NcblxuZXhwb3J0IHZhciBnZXRCYXRjaCA9IGZ1bmN0aW9uIGdldEJhdGNoKCkge1xuICByZXR1cm4gYmF0Y2g7XG59OyIsImltcG9ydCB7IGdldEJhdGNoIH0gZnJvbSAnLi9iYXRjaCc7IC8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIHZhciBiYXRjaCA9IGdldEJhdGNoKCk7XG4gIHZhciBmaXJzdCA9IG51bGw7XG4gIHZhciBsYXN0ID0gbnVsbDtcbiAgcmV0dXJuIHtcbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICBmaXJzdCA9IG51bGw7XG4gICAgICBsYXN0ID0gbnVsbDtcbiAgICB9LFxuICAgIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgICAgYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgICBsaXN0ZW5lci5jYWxsYmFjaygpO1xuICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBbXTtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGZpcnN0O1xuXG4gICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsaXN0ZW5lcnM7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsYXN0ID0ge1xuICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgIG5leHQ6IG51bGwsXG4gICAgICAgIHByZXY6IGxhc3RcbiAgICAgIH07XG5cbiAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlyc3QgPSBsaXN0ZW5lcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBmaXJzdCA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAobGlzdGVuZXIubmV4dCkge1xuICAgICAgICAgIGxpc3RlbmVyLm5leHQucHJldiA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFzdCA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlyc3QgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxudmFyIFN1YnNjcmlwdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihzdG9yZSwgcGFyZW50U3ViKSB7XG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViO1xuICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIgPSB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdWJzY3JpcHRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGROZXN0ZWRTdWIgPSBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9O1xuXG4gIF9wcm90by5ub3RpZnlOZXN0ZWRTdWJzID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3VicygpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlQ2hhbmdlV3JhcHBlciA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZVdyYXBwZXIoKSB7XG4gICAgaWYgKHRoaXMub25TdGF0ZUNoYW5nZSkge1xuICAgICAgdGhpcy5vblN0YXRlQ2hhbmdlKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy51bnN1YnNjcmliZSk7XG4gIH07XG5cbiAgX3Byb3RvLnRyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSB0aGlzLnBhcmVudFN1YiA/IHRoaXMucGFyZW50U3ViLmFkZE5lc3RlZFN1Yih0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIpIDogdGhpcy5zdG9yZS5zdWJzY3JpYmUodGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by50cnlVbnN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTdWJzY3JpcHRpb247XG59KCk7XG5cbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8sIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5cbmZ1bmN0aW9uIFByb3ZpZGVyKF9yZWYpIHtcbiAgdmFyIHN0b3JlID0gX3JlZi5zdG9yZSxcbiAgICAgIGNvbnRleHQgPSBfcmVmLmNvbnRleHQsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gIHZhciBjb250ZXh0VmFsdWUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSk7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicztcbiAgICByZXR1cm4ge1xuICAgICAgc3RvcmU6IHN0b3JlLFxuICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICB9O1xuICB9LCBbc3RvcmVdKTtcbiAgdmFyIHByZXZpb3VzU3RhdGUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgfSwgW3N0b3JlXSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb247XG4gICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuXG4gICAgaWYgKHByZXZpb3VzU3RhdGUgIT09IHN0b3JlLmdldFN0YXRlKCkpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBudWxsO1xuICAgIH07XG4gIH0sIFtjb250ZXh0VmFsdWUsIHByZXZpb3VzU3RhdGVdKTtcbiAgdmFyIENvbnRleHQgPSBjb250ZXh0IHx8IFJlYWN0UmVkdXhDb250ZXh0O1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICB9LCBjaGlsZHJlbik7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgICBzdG9yZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KSxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb3ZpZGVyOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7IC8vIFJlYWN0IGN1cnJlbnRseSB0aHJvd3MgYSB3YXJuaW5nIHdoZW4gdXNpbmcgdXNlTGF5b3V0RWZmZWN0IG9uIHRoZSBzZXJ2ZXIuXG4vLyBUbyBnZXQgYXJvdW5kIGl0LCB3ZSBjYW4gY29uZGl0aW9uYWxseSB1c2VFZmZlY3Qgb24gdGhlIHNlcnZlciAobm8tb3ApIGFuZFxuLy8gdXNlTGF5b3V0RWZmZWN0IGluIHRoZSBicm93c2VyLiBXZSBuZWVkIHVzZUxheW91dEVmZmVjdCB0byBlbnN1cmUgdGhlIHN0b3JlXG4vLyBzdWJzY3JpcHRpb24gY2FsbGJhY2sgYWx3YXlzIGhhcyB0aGUgc2VsZWN0b3IgZnJvbSB0aGUgbGF0ZXN0IHJlbmRlciBjb21taXRcbi8vIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBoYXBwZW4gYmV0d2VlbiByZW5kZXIgYW5kIHRoZSBlZmZlY3QsXG4vLyB3aGljaCBtYXkgY2F1c2UgbWlzc2VkIHVwZGF0ZXM7IHdlIGFsc28gbXVzdCBlbnN1cmUgdGhlIHN0b3JlIHN1YnNjcmlwdGlvblxuLy8gaXMgY3JlYXRlZCBzeW5jaHJvbm91c2x5LCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IG9jY3VyIGJlZm9yZSB0aGVcbi8vIHN1YnNjcmlwdGlvbiBpcyBjcmVhdGVkIGFuZCBhbiBpbmNvbnNpc3RlbnQgc3RhdGUgbWF5IGJlIG9ic2VydmVkXG5cbmV4cG9ydCB2YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZU1lbW8sIHVzZVJlZiwgdXNlUmVkdWNlciB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSwgaXNDb250ZXh0Q29uc3VtZXIgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi4vdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7IC8vIERlZmluZSBzb21lIGNvbnN0YW50IGFycmF5cyBqdXN0IHRvIGF2b2lkIHJlLWNyZWF0aW5nIHRoZXNlXG5cbnZhciBFTVBUWV9BUlJBWSA9IFtdO1xudmFyIE5PX1NVQlNDUklQVElPTl9BUlJBWSA9IFtudWxsLCBudWxsXTtcblxudmFyIHN0cmluZ2lmeUNvbXBvbmVudCA9IGZ1bmN0aW9uIHN0cmluZ2lmeUNvbXBvbmVudChDb21wKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KENvbXApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gU3RyaW5nKENvbXApO1xuICB9XG59O1xuXG5mdW5jdGlvbiBzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICB2YXIgdXBkYXRlQ291bnQgPSBzdGF0ZVsxXTtcbiAgcmV0dXJuIFthY3Rpb24ucGF5bG9hZCwgdXBkYXRlQ291bnQgKyAxXTtcbn1cblxuZnVuY3Rpb24gdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzKGVmZmVjdEZ1bmMsIGVmZmVjdEFyZ3MsIGRlcGVuZGVuY2llcykge1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZWZmZWN0RnVuYy5hcHBseSh2b2lkIDAsIGVmZmVjdEFyZ3MpO1xuICB9LCBkZXBlbmRlbmNpZXMpO1xufVxuXG5mdW5jdGlvbiBjYXB0dXJlV3JhcHBlclByb3BzKGxhc3RXcmFwcGVyUHJvcHMsIGxhc3RDaGlsZFByb3BzLCByZW5kZXJJc1NjaGVkdWxlZCwgd3JhcHBlclByb3BzLCBhY3R1YWxDaGlsZFByb3BzLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzKSB7XG4gIC8vIFdlIHdhbnQgdG8gY2FwdHVyZSB0aGUgd3JhcHBlciBwcm9wcyBhbmQgY2hpbGQgcHJvcHMgd2UgdXNlZCBmb3IgbGF0ZXIgY29tcGFyaXNvbnNcbiAgbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50ID0gd3JhcHBlclByb3BzO1xuICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gYWN0dWFsQ2hpbGRQcm9wcztcbiAgcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCA9IGZhbHNlOyAvLyBJZiB0aGUgcmVuZGVyIHdhcyBmcm9tIGEgc3RvcmUgdXBkYXRlLCBjbGVhciBvdXQgdGhhdCByZWZlcmVuY2UgYW5kIGNhc2NhZGUgdGhlIHN1YnNjcmliZXIgdXBkYXRlXG5cbiAgaWYgKGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCkge1xuICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG51bGw7XG4gICAgbm90aWZ5TmVzdGVkU3VicygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN1YnNjcmliZVVwZGF0ZXMoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLCBzdG9yZSwgc3Vic2NyaXB0aW9uLCBjaGlsZFByb3BzU2VsZWN0b3IsIGxhc3RXcmFwcGVyUHJvcHMsIGxhc3RDaGlsZFByb3BzLCByZW5kZXJJc1NjaGVkdWxlZCwgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3VicywgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCkge1xuICAvLyBJZiB3ZSdyZSBub3Qgc3Vic2NyaWJlZCB0byB0aGUgc3RvcmUsIG5vdGhpbmcgdG8gZG8gaGVyZVxuICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuOyAvLyBDYXB0dXJlIHZhbHVlcyBmb3IgY2hlY2tpbmcgaWYgYW5kIHdoZW4gdGhpcyBjb21wb25lbnQgdW5tb3VudHNcblxuICB2YXIgZGlkVW5zdWJzY3JpYmUgPSBmYWxzZTtcbiAgdmFyIGxhc3RUaHJvd25FcnJvciA9IG51bGw7IC8vIFdlJ2xsIHJ1biB0aGlzIGNhbGxiYWNrIGV2ZXJ5IHRpbWUgYSBzdG9yZSBzdWJzY3JpcHRpb24gdXBkYXRlIHByb3BhZ2F0ZXMgdG8gdGhpcyBjb21wb25lbnRcblxuICB2YXIgY2hlY2tGb3JVcGRhdGVzID0gZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGVzKCkge1xuICAgIGlmIChkaWRVbnN1YnNjcmliZSkge1xuICAgICAgLy8gRG9uJ3QgcnVuIHN0YWxlIGxpc3RlbmVycy5cbiAgICAgIC8vIFJlZHV4IGRvZXNuJ3QgZ3VhcmFudGVlIHVuc3Vic2NyaXB0aW9ucyBoYXBwZW4gdW50aWwgbmV4dCBkaXNwYXRjaC5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbGF0ZXN0U3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgdmFyIG5ld0NoaWxkUHJvcHMsIGVycm9yO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIEFjdHVhbGx5IHJ1biB0aGUgc2VsZWN0b3Igd2l0aCB0aGUgbW9zdCByZWNlbnQgc3RvcmUgc3RhdGUgYW5kIHdyYXBwZXIgcHJvcHNcbiAgICAgIC8vIHRvIGRldGVybWluZSB3aGF0IHRoZSBjaGlsZCBwcm9wcyBzaG91bGQgYmVcbiAgICAgIG5ld0NoaWxkUHJvcHMgPSBjaGlsZFByb3BzU2VsZWN0b3IobGF0ZXN0U3RvcmVTdGF0ZSwgbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBlcnJvciA9IGU7XG4gICAgICBsYXN0VGhyb3duRXJyb3IgPSBlO1xuICAgIH1cblxuICAgIGlmICghZXJyb3IpIHtcbiAgICAgIGxhc3RUaHJvd25FcnJvciA9IG51bGw7XG4gICAgfSAvLyBJZiB0aGUgY2hpbGQgcHJvcHMgaGF2ZW4ndCBjaGFuZ2VkLCBub3RoaW5nIHRvIGRvIGhlcmUgLSBjYXNjYWRlIHRoZSBzdWJzY3JpcHRpb24gdXBkYXRlXG5cblxuICAgIGlmIChuZXdDaGlsZFByb3BzID09PSBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50KSB7XG4gICAgICBpZiAoIXJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQpIHtcbiAgICAgICAgbm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTYXZlIHJlZmVyZW5jZXMgdG8gdGhlIG5ldyBjaGlsZCBwcm9wcy4gIE5vdGUgdGhhdCB3ZSB0cmFjayB0aGUgXCJjaGlsZCBwcm9wcyBmcm9tIHN0b3JlIHVwZGF0ZVwiXG4gICAgICAvLyBhcyBhIHJlZiBpbnN0ZWFkIG9mIGEgdXNlU3RhdGUvdXNlUmVkdWNlciBiZWNhdXNlIHdlIG5lZWQgYSB3YXkgdG8gZGV0ZXJtaW5lIGlmIHRoYXQgdmFsdWUgaGFzXG4gICAgICAvLyBiZWVuIHByb2Nlc3NlZC4gIElmIHRoaXMgd2VudCBpbnRvIHVzZVN0YXRlL3VzZVJlZHVjZXIsIHdlIGNvdWxkbid0IGNsZWFyIG91dCB0aGUgdmFsdWUgd2l0aG91dFxuICAgICAgLy8gZm9yY2luZyBhbm90aGVyIHJlLXJlbmRlciwgd2hpY2ggd2UgZG9uJ3Qgd2FudC5cbiAgICAgIGxhc3RDaGlsZFByb3BzLmN1cnJlbnQgPSBuZXdDaGlsZFByb3BzO1xuICAgICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSB0cnVlOyAvLyBJZiB0aGUgY2hpbGQgcHJvcHMgX2RpZF8gY2hhbmdlIChvciB3ZSBjYXVnaHQgYW4gZXJyb3IpLCB0aGlzIHdyYXBwZXIgY29tcG9uZW50IG5lZWRzIHRvIHJlLXJlbmRlclxuXG4gICAgICBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ1NUT1JFX1VQREFURUQnLFxuICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTsgLy8gQWN0dWFsbHkgc3Vic2NyaWJlIHRvIHRoZSBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3RvciAob3Igc3RvcmUpXG5cblxuICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpOyAvLyBQdWxsIGRhdGEgZnJvbSB0aGUgc3RvcmUgYWZ0ZXIgZmlyc3QgcmVuZGVyIGluIGNhc2UgdGhlIHN0b3JlIGhhc1xuICAvLyBjaGFuZ2VkIHNpbmNlIHdlIGJlZ2FuLlxuXG4gIGNoZWNrRm9yVXBkYXRlcygpO1xuXG4gIHZhciB1bnN1YnNjcmliZVdyYXBwZXIgPSBmdW5jdGlvbiB1bnN1YnNjcmliZVdyYXBwZXIoKSB7XG4gICAgZGlkVW5zdWJzY3JpYmUgPSB0cnVlO1xuICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gbnVsbDtcblxuICAgIGlmIChsYXN0VGhyb3duRXJyb3IpIHtcbiAgICAgIC8vIEl0J3MgcG9zc2libGUgdGhhdCB3ZSBjYXVnaHQgYW4gZXJyb3IgZHVlIHRvIGEgYmFkIG1hcFN0YXRlIGZ1bmN0aW9uLCBidXQgdGhlXG4gICAgICAvLyBwYXJlbnQgcmUtcmVuZGVyZWQgd2l0aG91dCB0aGlzIGNvbXBvbmVudCBhbmQgd2UncmUgYWJvdXQgdG8gdW5tb3VudC5cbiAgICAgIC8vIFRoaXMgc2hvdWxkbid0IGhhcHBlbiBhcyBsb25nIGFzIHdlIGRvIHRvcC1kb3duIHN1YnNjcmlwdGlvbnMgY29ycmVjdGx5LCBidXRcbiAgICAgIC8vIGlmIHdlIGV2ZXIgZG8gdGhvc2Ugd3JvbmcsIHRoaXMgdGhyb3cgd2lsbCBzdXJmYWNlIHRoZSBlcnJvciBpbiBvdXIgdGVzdHMuXG4gICAgICAvLyBJbiB0aGF0IGNhc2UsIHRocm93IHRoZSBlcnJvciBmcm9tIGhlcmUgc28gaXQgZG9lc24ndCBnZXQgbG9zdC5cbiAgICAgIHRocm93IGxhc3RUaHJvd25FcnJvcjtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVuc3Vic2NyaWJlV3JhcHBlcjtcbn1cblxudmFyIGluaXRTdGF0ZVVwZGF0ZXMgPSBmdW5jdGlvbiBpbml0U3RhdGVVcGRhdGVzKCkge1xuICByZXR1cm4gW251bGwsIDBdO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29ubmVjdEFkdmFuY2VkKFxuLypcclxuICBzZWxlY3RvckZhY3RvcnkgaXMgYSBmdW5jIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIHJldHVybmluZyB0aGUgc2VsZWN0b3IgZnVuY3Rpb24gdXNlZCB0b1xyXG4gIGNvbXB1dGUgbmV3IHByb3BzIGZyb20gc3RhdGUsIHByb3BzLCBhbmQgZGlzcGF0Y2guIEZvciBleGFtcGxlOlxyXG4gICAgICBleHBvcnQgZGVmYXVsdCBjb25uZWN0QWR2YW5jZWQoKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAoc3RhdGUsIHByb3BzKSA9PiAoe1xyXG4gICAgICB0aGluZzogc3RhdGUudGhpbmdzW3Byb3BzLnRoaW5nSWRdLFxyXG4gICAgICBzYXZlVGhpbmc6IGZpZWxkcyA9PiBkaXNwYXRjaChhY3Rpb25DcmVhdG9ycy5zYXZlVGhpbmcocHJvcHMudGhpbmdJZCwgZmllbGRzKSksXHJcbiAgICB9KSkoWW91ckNvbXBvbmVudClcclxuICAgIEFjY2VzcyB0byBkaXNwYXRjaCBpcyBwcm92aWRlZCB0byB0aGUgZmFjdG9yeSBzbyBzZWxlY3RvckZhY3RvcmllcyBjYW4gYmluZCBhY3Rpb25DcmVhdG9yc1xyXG4gIG91dHNpZGUgb2YgdGhlaXIgc2VsZWN0b3IgYXMgYW4gb3B0aW1pemF0aW9uLiBPcHRpb25zIHBhc3NlZCB0byBjb25uZWN0QWR2YW5jZWQgYXJlIHBhc3NlZCB0b1xyXG4gIHRoZSBzZWxlY3RvckZhY3RvcnksIGFsb25nIHdpdGggZGlzcGxheU5hbWUgYW5kIFdyYXBwZWRDb21wb25lbnQsIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuXHJcbiAgICBOb3RlIHRoYXQgc2VsZWN0b3JGYWN0b3J5IGlzIHJlc3BvbnNpYmxlIGZvciBhbGwgY2FjaGluZy9tZW1vaXphdGlvbiBvZiBpbmJvdW5kIGFuZCBvdXRib3VuZFxyXG4gIHByb3BzLiBEbyBub3QgdXNlIGNvbm5lY3RBZHZhbmNlZCBkaXJlY3RseSB3aXRob3V0IG1lbW9pemluZyByZXN1bHRzIGJldHdlZW4gY2FsbHMgdG8geW91clxyXG4gIHNlbGVjdG9yLCBvdGhlcndpc2UgdGhlIENvbm5lY3QgY29tcG9uZW50IHdpbGwgcmUtcmVuZGVyIG9uIGV2ZXJ5IHN0YXRlIG9yIHByb3BzIGNoYW5nZS5cclxuKi9cbnNlbGVjdG9yRmFjdG9yeSwgLy8gb3B0aW9ucyBvYmplY3Q6XG5fcmVmKSB7XG4gIGlmIChfcmVmID09PSB2b2lkIDApIHtcbiAgICBfcmVmID0ge307XG4gIH1cblxuICB2YXIgX3JlZjIgPSBfcmVmLFxuICAgICAgX3JlZjIkZ2V0RGlzcGxheU5hbWUgPSBfcmVmMi5nZXREaXNwbGF5TmFtZSxcbiAgICAgIGdldERpc3BsYXlOYW1lID0gX3JlZjIkZ2V0RGlzcGxheU5hbWUgPT09IHZvaWQgMCA/IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIFwiQ29ubmVjdEFkdmFuY2VkKFwiICsgbmFtZSArIFwiKVwiO1xuICB9IDogX3JlZjIkZ2V0RGlzcGxheU5hbWUsXG4gICAgICBfcmVmMiRtZXRob2ROYW1lID0gX3JlZjIubWV0aG9kTmFtZSxcbiAgICAgIG1ldGhvZE5hbWUgPSBfcmVmMiRtZXRob2ROYW1lID09PSB2b2lkIDAgPyAnY29ubmVjdEFkdmFuY2VkJyA6IF9yZWYyJG1ldGhvZE5hbWUsXG4gICAgICBfcmVmMiRyZW5kZXJDb3VudFByb3AgPSBfcmVmMi5yZW5kZXJDb3VudFByb3AsXG4gICAgICByZW5kZXJDb3VudFByb3AgPSBfcmVmMiRyZW5kZXJDb3VudFByb3AgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYyJHJlbmRlckNvdW50UHJvcCxcbiAgICAgIF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9IF9yZWYyLnNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYyJHNob3VsZEhhbmRsZVN0YSxcbiAgICAgIF9yZWYyJHN0b3JlS2V5ID0gX3JlZjIuc3RvcmVLZXksXG4gICAgICBzdG9yZUtleSA9IF9yZWYyJHN0b3JlS2V5ID09PSB2b2lkIDAgPyAnc3RvcmUnIDogX3JlZjIkc3RvcmVLZXksXG4gICAgICBfcmVmMiR3aXRoUmVmID0gX3JlZjIud2l0aFJlZixcbiAgICAgIHdpdGhSZWYgPSBfcmVmMiR3aXRoUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJHdpdGhSZWYsXG4gICAgICBfcmVmMiRmb3J3YXJkUmVmID0gX3JlZjIuZm9yd2FyZFJlZixcbiAgICAgIGZvcndhcmRSZWYgPSBfcmVmMiRmb3J3YXJkUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJGZvcndhcmRSZWYsXG4gICAgICBfcmVmMiRjb250ZXh0ID0gX3JlZjIuY29udGV4dCxcbiAgICAgIGNvbnRleHQgPSBfcmVmMiRjb250ZXh0ID09PSB2b2lkIDAgPyBSZWFjdFJlZHV4Q29udGV4dCA6IF9yZWYyJGNvbnRleHQsXG4gICAgICBjb25uZWN0T3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJnZXREaXNwbGF5TmFtZVwiLCBcIm1ldGhvZE5hbWVcIiwgXCJyZW5kZXJDb3VudFByb3BcIiwgXCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXNcIiwgXCJzdG9yZUtleVwiLCBcIndpdGhSZWZcIiwgXCJmb3J3YXJkUmVmXCIsIFwiY29udGV4dFwiXSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAocmVuZGVyQ291bnRQcm9wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInJlbmRlckNvdW50UHJvcCBpcyByZW1vdmVkLiByZW5kZXIgY291bnRpbmcgaXMgYnVpbHQgaW50byB0aGUgbGF0ZXN0IFJlYWN0IERldiBUb29scyBwcm9maWxpbmcgZXh0ZW5zaW9uXCIpO1xuICAgIH1cblxuICAgIGlmICh3aXRoUmVmKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3dpdGhSZWYgaXMgcmVtb3ZlZC4gVG8gYWNjZXNzIHRoZSB3cmFwcGVkIGluc3RhbmNlLCB1c2UgYSByZWYgb24gdGhlIGNvbm5lY3RlZCBjb21wb25lbnQnKTtcbiAgICB9XG5cbiAgICB2YXIgY3VzdG9tU3RvcmVXYXJuaW5nTWVzc2FnZSA9ICdUbyB1c2UgYSBjdXN0b20gUmVkdXggc3RvcmUgZm9yIHNwZWNpZmljIGNvbXBvbmVudHMsIGNyZWF0ZSBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHdpdGggJyArIFwiUmVhY3QuY3JlYXRlQ29udGV4dCgpLCBhbmQgcGFzcyB0aGUgY29udGV4dCBvYmplY3QgdG8gUmVhY3QgUmVkdXgncyBQcm92aWRlciBhbmQgc3BlY2lmaWMgY29tcG9uZW50c1wiICsgJyBsaWtlOiA8UHJvdmlkZXIgY29udGV4dD17TXlDb250ZXh0fT48Q29ubmVjdGVkQ29tcG9uZW50IGNvbnRleHQ9e015Q29udGV4dH0gLz48L1Byb3ZpZGVyPi4gJyArICdZb3UgbWF5IGFsc28gcGFzcyBhIHtjb250ZXh0IDogTXlDb250ZXh0fSBvcHRpb24gdG8gY29ubmVjdCc7XG5cbiAgICBpZiAoc3RvcmVLZXkgIT09ICdzdG9yZScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignc3RvcmVLZXkgaGFzIGJlZW4gcmVtb3ZlZCBhbmQgZG9lcyBub3QgZG8gYW55dGhpbmcuICcgKyBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgQ29udGV4dCA9IGNvbnRleHQ7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwV2l0aENvbm5lY3QoV3JhcHBlZENvbXBvbmVudCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc1ZhbGlkRWxlbWVudFR5cGUoV3JhcHBlZENvbXBvbmVudCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBtdXN0IHBhc3MgYSBjb21wb25lbnQgdG8gdGhlIGZ1bmN0aW9uIHJldHVybmVkIGJ5IFwiICsgKG1ldGhvZE5hbWUgKyBcIi4gSW5zdGVhZCByZWNlaXZlZCBcIiArIHN0cmluZ2lmeUNvbXBvbmVudChXcmFwcGVkQ29tcG9uZW50KSkpO1xuICAgIH1cblxuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50TmFtZSA9IFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKHdyYXBwZWRDb21wb25lbnROYW1lKTtcblxuICAgIHZhciBzZWxlY3RvckZhY3RvcnlPcHRpb25zID0gX2V4dGVuZHMoe30sIGNvbm5lY3RPcHRpb25zLCB7XG4gICAgICBnZXREaXNwbGF5TmFtZTogZ2V0RGlzcGxheU5hbWUsXG4gICAgICBtZXRob2ROYW1lOiBtZXRob2ROYW1lLFxuICAgICAgcmVuZGVyQ291bnRQcm9wOiByZW5kZXJDb3VudFByb3AsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHN0b3JlS2V5OiBzdG9yZUtleSxcbiAgICAgIGRpc3BsYXlOYW1lOiBkaXNwbGF5TmFtZSxcbiAgICAgIHdyYXBwZWRDb21wb25lbnROYW1lOiB3cmFwcGVkQ29tcG9uZW50TmFtZSxcbiAgICAgIFdyYXBwZWRDb21wb25lbnQ6IFdyYXBwZWRDb21wb25lbnRcbiAgICB9KTtcblxuICAgIHZhciBwdXJlID0gY29ubmVjdE9wdGlvbnMucHVyZTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkU2VsZWN0b3Ioc3RvcmUpIHtcbiAgICAgIHJldHVybiBzZWxlY3RvckZhY3Rvcnkoc3RvcmUuZGlzcGF0Y2gsIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMpO1xuICAgIH0gLy8gSWYgd2UgYXJlbid0IHJ1bm5pbmcgaW4gXCJwdXJlXCIgbW9kZSwgd2UgZG9uJ3Qgd2FudCB0byBtZW1vaXplIHZhbHVlcy5cbiAgICAvLyBUbyBhdm9pZCBjb25kaXRpb25hbGx5IGNhbGxpbmcgaG9va3MsIHdlIGZhbGwgYmFjayB0byBhIHRpbnkgd3JhcHBlclxuICAgIC8vIHRoYXQganVzdCBleGVjdXRlcyB0aGUgZ2l2ZW4gY2FsbGJhY2sgaW1tZWRpYXRlbHkuXG5cblxuICAgIHZhciB1c2VQdXJlT25seU1lbW8gPSBwdXJlID8gdXNlTWVtbyA6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIENvbm5lY3RGdW5jdGlvbihwcm9wcykge1xuICAgICAgdmFyIF91c2VNZW1vID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIERpc3Rpbmd1aXNoIGJldHdlZW4gYWN0dWFsIFwiZGF0YVwiIHByb3BzIHRoYXQgd2VyZSBwYXNzZWQgdG8gdGhlIHdyYXBwZXIgY29tcG9uZW50LFxuICAgICAgICAvLyBhbmQgdmFsdWVzIG5lZWRlZCB0byBjb250cm9sIGJlaGF2aW9yIChmb3J3YXJkZWQgcmVmcywgYWx0ZXJuYXRlIGNvbnRleHQgaW5zdGFuY2VzKS5cbiAgICAgICAgLy8gVG8gbWFpbnRhaW4gdGhlIHdyYXBwZXJQcm9wcyBvYmplY3QgcmVmZXJlbmNlLCBtZW1vaXplIHRoaXMgZGVzdHJ1Y3R1cmluZy5cbiAgICAgICAgdmFyIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWYgPSBwcm9wcy5yZWFjdFJlZHV4Rm9yd2FyZGVkUmVmLFxuICAgICAgICAgICAgd3JhcHBlclByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIFtcInJlYWN0UmVkdXhGb3J3YXJkZWRSZWZcIl0pO1xuXG4gICAgICAgIHJldHVybiBbcHJvcHMuY29udGV4dCwgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiwgd3JhcHBlclByb3BzXTtcbiAgICAgIH0sIFtwcm9wc10pLFxuICAgICAgICAgIHByb3BzQ29udGV4dCA9IF91c2VNZW1vWzBdLFxuICAgICAgICAgIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWYgPSBfdXNlTWVtb1sxXSxcbiAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfdXNlTWVtb1syXTtcblxuICAgICAgdmFyIENvbnRleHRUb1VzZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBVc2VycyBtYXkgb3B0aW9uYWxseSBwYXNzIGluIGEgY3VzdG9tIGNvbnRleHQgaW5zdGFuY2UgdG8gdXNlIGluc3RlYWQgb2Ygb3VyIFJlYWN0UmVkdXhDb250ZXh0LlxuICAgICAgICAvLyBNZW1vaXplIHRoZSBjaGVjayB0aGF0IGRldGVybWluZXMgd2hpY2ggY29udGV4dCBpbnN0YW5jZSB3ZSBzaG91bGQgdXNlLlxuICAgICAgICByZXR1cm4gcHJvcHNDb250ZXh0ICYmIHByb3BzQ29udGV4dC5Db25zdW1lciAmJiBpc0NvbnRleHRDb25zdW1lcihSZWFjdC5jcmVhdGVFbGVtZW50KHByb3BzQ29udGV4dC5Db25zdW1lciwgbnVsbCkpID8gcHJvcHNDb250ZXh0IDogQ29udGV4dDtcbiAgICAgIH0sIFtwcm9wc0NvbnRleHQsIENvbnRleHRdKTsgLy8gUmV0cmlldmUgdGhlIHN0b3JlIGFuZCBhbmNlc3RvciBzdWJzY3JpcHRpb24gdmlhIGNvbnRleHQsIGlmIGF2YWlsYWJsZVxuXG4gICAgICB2YXIgY29udGV4dFZhbHVlID0gdXNlQ29udGV4dChDb250ZXh0VG9Vc2UpOyAvLyBUaGUgc3RvcmUgX211c3RfIGV4aXN0IGFzIGVpdGhlciBhIHByb3Agb3IgaW4gY29udGV4dC5cbiAgICAgIC8vIFdlJ2xsIGNoZWNrIHRvIHNlZSBpZiBpdCBfbG9va3NfIGxpa2UgYSBSZWR1eCBzdG9yZSBmaXJzdC5cbiAgICAgIC8vIFRoaXMgYWxsb3dzIHVzIHRvIHBhc3MgdGhyb3VnaCBhIGBzdG9yZWAgcHJvcCB0aGF0IGlzIGp1c3QgYSBwbGFpbiB2YWx1ZS5cblxuICAgICAgdmFyIGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA9IEJvb2xlYW4ocHJvcHMuc3RvcmUpICYmIEJvb2xlYW4ocHJvcHMuc3RvcmUuZ2V0U3RhdGUpICYmIEJvb2xlYW4ocHJvcHMuc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgdmFyIGRpZFN0b3JlQ29tZUZyb21Db250ZXh0ID0gQm9vbGVhbihjb250ZXh0VmFsdWUpICYmIEJvb2xlYW4oY29udGV4dFZhbHVlLnN0b3JlKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWRpZFN0b3JlQ29tZUZyb21Qcm9wcyAmJiAhZGlkU3RvcmVDb21lRnJvbUNvbnRleHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgXFxcInN0b3JlXFxcIiBpbiB0aGUgY29udGV4dCBvZiBcIiArIChcIlxcXCJcIiArIGRpc3BsYXlOYW1lICsgXCJcXFwiLiBFaXRoZXIgd3JhcCB0aGUgcm9vdCBjb21wb25lbnQgaW4gYSA8UHJvdmlkZXI+LCBcIikgKyBcIm9yIHBhc3MgYSBjdXN0b20gUmVhY3QgY29udGV4dCBwcm92aWRlciB0byA8UHJvdmlkZXI+IGFuZCB0aGUgY29ycmVzcG9uZGluZyBcIiArIChcIlJlYWN0IGNvbnRleHQgY29uc3VtZXIgdG8gXCIgKyBkaXNwbGF5TmFtZSArIFwiIGluIGNvbm5lY3Qgb3B0aW9ucy5cIikpO1xuICAgICAgfSAvLyBCYXNlZCBvbiB0aGUgcHJldmlvdXMgY2hlY2ssIG9uZSBvZiB0aGVzZSBtdXN0IGJlIHRydWVcblxuXG4gICAgICB2YXIgc3RvcmUgPSBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPyBwcm9wcy5zdG9yZSA6IGNvbnRleHRWYWx1ZS5zdG9yZTtcbiAgICAgIHZhciBjaGlsZFByb3BzU2VsZWN0b3IgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVGhlIGNoaWxkIHByb3BzIHNlbGVjdG9yIG5lZWRzIHRoZSBzdG9yZSByZWZlcmVuY2UgYXMgYW4gaW5wdXQuXG4gICAgICAgIC8vIFJlLWNyZWF0ZSB0aGlzIHNlbGVjdG9yIHdoZW5ldmVyIHRoZSBzdG9yZSBjaGFuZ2VzLlxuICAgICAgICByZXR1cm4gY3JlYXRlQ2hpbGRTZWxlY3RvcihzdG9yZSk7XG4gICAgICB9LCBbc3RvcmVdKTtcblxuICAgICAgdmFyIF91c2VNZW1vMiA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuIE5PX1NVQlNDUklQVElPTl9BUlJBWTsgLy8gVGhpcyBTdWJzY3JpcHRpb24ncyBzb3VyY2Ugc2hvdWxkIG1hdGNoIHdoZXJlIHN0b3JlIGNhbWUgZnJvbTogcHJvcHMgdnMuIGNvbnRleHQuIEEgY29tcG9uZW50XG4gICAgICAgIC8vIGNvbm5lY3RlZCB0byB0aGUgc3RvcmUgdmlhIHByb3BzIHNob3VsZG4ndCB1c2Ugc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dCwgb3IgdmljZSB2ZXJzYS5cblxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzID8gbnVsbCA6IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb24pOyAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgaW5cbiAgICAgICAgLy8gdGhlIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AsIHdoZXJlIGBzdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBUaGlzIGNhblxuICAgICAgICAvLyBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVyc1xuICAgICAgICAvLyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlICBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLlxuXG4gICAgICAgIHZhciBub3RpZnlOZXN0ZWRTdWJzID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZChzdWJzY3JpcHRpb24pO1xuICAgICAgICByZXR1cm4gW3N1YnNjcmlwdGlvbiwgbm90aWZ5TmVzdGVkU3Vic107XG4gICAgICB9LCBbc3RvcmUsIGRpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlXSksXG4gICAgICAgICAgc3Vic2NyaXB0aW9uID0gX3VzZU1lbW8yWzBdLFxuICAgICAgICAgIG5vdGlmeU5lc3RlZFN1YnMgPSBfdXNlTWVtbzJbMV07IC8vIERldGVybWluZSB3aGF0IHtzdG9yZSwgc3Vic2NyaXB0aW9ufSB2YWx1ZSBzaG91bGQgYmUgcHV0IGludG8gbmVzdGVkIGNvbnRleHQsIGlmIG5lY2Vzc2FyeSxcbiAgICAgIC8vIGFuZCBtZW1vaXplIHRoYXQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgY29udGV4dCB1cGRhdGVzLlxuXG5cbiAgICAgIHZhciBvdmVycmlkZGVuQ29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChkaWRTdG9yZUNvbWVGcm9tUHJvcHMpIHtcbiAgICAgICAgICAvLyBUaGlzIGNvbXBvbmVudCBpcyBkaXJlY3RseSBzdWJzY3JpYmVkIHRvIGEgc3RvcmUgZnJvbSBwcm9wcy5cbiAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IGRlc2NlbmRhbnRzIHJlYWRpbmcgZnJvbSB0aGlzIHN0b3JlIC0gcGFzcyBkb3duIHdoYXRldmVyXG4gICAgICAgICAgLy8gdGhlIGV4aXN0aW5nIGNvbnRleHQgdmFsdWUgaXMgZnJvbSB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IuXG4gICAgICAgICAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbiAgICAgICAgfSAvLyBPdGhlcndpc2UsIHB1dCB0aGlzIGNvbXBvbmVudCdzIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBpbnRvIGNvbnRleHQsIHNvIHRoYXRcbiAgICAgICAgLy8gY29ubmVjdGVkIGRlc2NlbmRhbnRzIHdvbid0IHVwZGF0ZSB1bnRpbCBhZnRlciB0aGlzIGNvbXBvbmVudCBpcyBkb25lXG5cblxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHRWYWx1ZSwge1xuICAgICAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSwgW2RpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlLCBzdWJzY3JpcHRpb25dKTsgLy8gV2UgbmVlZCB0byBmb3JjZSB0aGlzIHdyYXBwZXIgY29tcG9uZW50IHRvIHJlLXJlbmRlciB3aGVuZXZlciBhIFJlZHV4IHN0b3JlIHVwZGF0ZVxuICAgICAgLy8gY2F1c2VzIGEgY2hhbmdlIHRvIHRoZSBjYWxjdWxhdGVkIGNoaWxkIGNvbXBvbmVudCBwcm9wcyAob3Igd2UgY2F1Z2h0IGFuIGVycm9yIGluIG1hcFN0YXRlKVxuXG4gICAgICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKHN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlciwgRU1QVFlfQVJSQVksIGluaXRTdGF0ZVVwZGF0ZXMpLFxuICAgICAgICAgIF91c2VSZWR1Y2VyJCA9IF91c2VSZWR1Y2VyWzBdLFxuICAgICAgICAgIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgPSBfdXNlUmVkdWNlciRbMF0sXG4gICAgICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCA9IF91c2VSZWR1Y2VyWzFdOyAvLyBQcm9wYWdhdGUgYW55IG1hcFN0YXRlL21hcERpc3BhdGNoIGVycm9ycyB1cHdhcmRzXG5cblxuICAgICAgaWYgKHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgJiYgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdC5lcnJvcikge1xuICAgICAgICB0aHJvdyBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LmVycm9yO1xuICAgICAgfSAvLyBTZXQgdXAgcmVmcyB0byBjb29yZGluYXRlIHZhbHVlcyBiZXR3ZWVuIHRoZSBzdWJzY3JpcHRpb24gZWZmZWN0IGFuZCB0aGUgcmVuZGVyIGxvZ2ljXG5cblxuICAgICAgdmFyIGxhc3RDaGlsZFByb3BzID0gdXNlUmVmKCk7XG4gICAgICB2YXIgbGFzdFdyYXBwZXJQcm9wcyA9IHVzZVJlZih3cmFwcGVyUHJvcHMpO1xuICAgICAgdmFyIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUgPSB1c2VSZWYoKTtcbiAgICAgIHZhciByZW5kZXJJc1NjaGVkdWxlZCA9IHVzZVJlZihmYWxzZSk7XG4gICAgICB2YXIgYWN0dWFsQ2hpbGRQcm9wcyA9IHVzZVB1cmVPbmx5TWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRyaWNreSBsb2dpYyBoZXJlOlxuICAgICAgICAvLyAtIFRoaXMgcmVuZGVyIG1heSBoYXZlIGJlZW4gdHJpZ2dlcmVkIGJ5IGEgUmVkdXggc3RvcmUgdXBkYXRlIHRoYXQgcHJvZHVjZWQgbmV3IGNoaWxkIHByb3BzXG4gICAgICAgIC8vIC0gSG93ZXZlciwgd2UgbWF5IGhhdmUgZ290dGVuIG5ldyB3cmFwcGVyIHByb3BzIGFmdGVyIHRoYXRcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBuZXcgY2hpbGQgcHJvcHMsIGFuZCB0aGUgc2FtZSB3cmFwcGVyIHByb3BzLCB3ZSBrbm93IHdlIHNob3VsZCB1c2UgdGhlIG5ldyBjaGlsZCBwcm9wcyBhcy1pcy5cbiAgICAgICAgLy8gQnV0LCBpZiB3ZSBoYXZlIG5ldyB3cmFwcGVyIHByb3BzLCB0aG9zZSBtaWdodCBjaGFuZ2UgdGhlIGNoaWxkIHByb3BzLCBzbyB3ZSBoYXZlIHRvIHJlY2FsY3VsYXRlIHRoaW5ncy5cbiAgICAgICAgLy8gU28sIHdlJ2xsIHVzZSB0aGUgY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGUgb25seSBpZiB0aGUgd3JhcHBlciBwcm9wcyBhcmUgdGhlIHNhbWUgYXMgbGFzdCB0aW1lLlxuICAgICAgICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ICYmIHdyYXBwZXJQcm9wcyA9PT0gbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudDtcbiAgICAgICAgfSAvLyBUT0RPIFdlJ3JlIHJlYWRpbmcgdGhlIHN0b3JlIGRpcmVjdGx5IGluIHJlbmRlcigpIGhlcmUuIEJhZCBpZGVhP1xuICAgICAgICAvLyBUaGlzIHdpbGwgbGlrZWx5IGNhdXNlIEJhZCBUaGluZ3MgKFRNKSB0byBoYXBwZW4gaW4gQ29uY3VycmVudCBNb2RlLlxuICAgICAgICAvLyBOb3RlIHRoYXQgd2UgZG8gdGhpcyBiZWNhdXNlIG9uIHJlbmRlcnMgX25vdF8gY2F1c2VkIGJ5IHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdGhlIGxhdGVzdCBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlLlxuXG5cbiAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCB3cmFwcGVyUHJvcHMpO1xuICAgICAgfSwgW3N0b3JlLCBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LCB3cmFwcGVyUHJvcHNdKTsgLy8gV2UgbmVlZCB0aGlzIHRvIGV4ZWN1dGUgc3luY2hyb25vdXNseSBldmVyeSB0aW1lIHdlIHJlLXJlbmRlci4gSG93ZXZlciwgUmVhY3Qgd2FybnNcbiAgICAgIC8vIGFib3V0IHVzZUxheW91dEVmZmVjdCBpbiBTU1IsIHNvIHdlIHRyeSB0byBkZXRlY3QgZW52aXJvbm1lbnQgYW5kIGZhbGwgYmFjayB0b1xuICAgICAgLy8ganVzdCB1c2VFZmZlY3QgaW5zdGVhZCB0byBhdm9pZCB0aGUgd2FybmluZywgc2luY2UgbmVpdGhlciB3aWxsIHJ1biBhbnl3YXkuXG5cbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhjYXB0dXJlV3JhcHBlclByb3BzLCBbbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCB3cmFwcGVyUHJvcHMsIGFjdHVhbENoaWxkUHJvcHMsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnNdKTsgLy8gT3VyIHJlLXN1YnNjcmliZSBsb2dpYyBvbmx5IHJ1bnMgd2hlbiB0aGUgc3RvcmUvc3Vic2NyaXB0aW9uIHNldHVwIGNoYW5nZXNcblxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzKHN1YnNjcmliZVVwZGF0ZXMsIFtzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsIHN0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3RvciwgbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzLCBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoXSwgW3N0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3Rvcl0pOyAvLyBOb3cgdGhhdCBhbGwgdGhhdCdzIGRvbmUsIHdlIGNhbiBmaW5hbGx5IHRyeSB0byBhY3R1YWxseSByZW5kZXIgdGhlIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgIC8vIFdlIG1lbW9pemUgdGhlIGVsZW1lbnRzIGZvciB0aGUgcmVuZGVyZWQgY2hpbGQgY29tcG9uZW50IGFzIGFuIG9wdGltaXphdGlvbi5cblxuICAgICAgdmFyIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgYWN0dWFsQ2hpbGRQcm9wcywge1xuICAgICAgICAgIHJlZjogcmVhY3RSZWR1eEZvcndhcmRlZFJlZlxuICAgICAgICB9KSk7XG4gICAgICB9LCBbcmVhY3RSZWR1eEZvcndhcmRlZFJlZiwgV3JhcHBlZENvbXBvbmVudCwgYWN0dWFsQ2hpbGRQcm9wc10pOyAvLyBJZiBSZWFjdCBzZWVzIHRoZSBleGFjdCBzYW1lIGVsZW1lbnQgcmVmZXJlbmNlIGFzIGxhc3QgdGltZSwgaXQgYmFpbHMgb3V0IG9mIHJlLXJlbmRlcmluZ1xuICAgICAgLy8gdGhhdCBjaGlsZCwgc2FtZSBhcyBpZiBpdCB3YXMgd3JhcHBlZCBpbiBSZWFjdC5tZW1vKCkgb3IgcmV0dXJuZWQgZmFsc2UgZnJvbSBzaG91bGRDb21wb25lbnRVcGRhdGUuXG5cbiAgICAgIHZhciByZW5kZXJlZENoaWxkID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHtcbiAgICAgICAgICAvLyBJZiB0aGlzIGNvbXBvbmVudCBpcyBzdWJzY3JpYmVkIHRvIHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdG8gcGFzcyBpdHMgb3duXG4gICAgICAgICAgLy8gc3Vic2NyaXB0aW9uIGluc3RhbmNlIGRvd24gdG8gb3VyIGRlc2NlbmRhbnRzLiBUaGF0IG1lYW5zIHJlbmRlcmluZyB0aGUgc2FtZVxuICAgICAgICAgIC8vIENvbnRleHQgaW5zdGFuY2UsIGFuZCBwdXR0aW5nIGEgZGlmZmVyZW50IHZhbHVlIGludG8gdGhlIGNvbnRleHQuXG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dFRvVXNlLlByb3ZpZGVyLCB7XG4gICAgICAgICAgICB2YWx1ZTogb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZVxuICAgICAgICAgIH0sIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50O1xuICAgICAgfSwgW0NvbnRleHRUb1VzZSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50LCBvdmVycmlkZGVuQ29udGV4dFZhbHVlXSk7XG4gICAgICByZXR1cm4gcmVuZGVyZWRDaGlsZDtcbiAgICB9IC8vIElmIHdlJ3JlIGluIFwicHVyZVwiIG1vZGUsIGVuc3VyZSBvdXIgd3JhcHBlciBjb21wb25lbnQgb25seSByZS1yZW5kZXJzIHdoZW4gaW5jb21pbmcgcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuXG5cbiAgICB2YXIgQ29ubmVjdCA9IHB1cmUgPyBSZWFjdC5tZW1vKENvbm5lY3RGdW5jdGlvbikgOiBDb25uZWN0RnVuY3Rpb247XG4gICAgQ29ubmVjdC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICBDb25uZWN0LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG5cbiAgICBpZiAoZm9yd2FyZFJlZikge1xuICAgICAgdmFyIGZvcndhcmRlZCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gZm9yd2FyZENvbm5lY3RSZWYocHJvcHMsIHJlZikge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb25uZWN0LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmOiByZWZcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgICBmb3J3YXJkZWQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICAgIGZvcndhcmRlZC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIHJldHVybiBob2lzdFN0YXRpY3MoZm9yd2FyZGVkLCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaG9pc3RTdGF0aWNzKENvbm5lY3QsIFdyYXBwZWRDb21wb25lbnQpO1xuICB9O1xufSIsImZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59IiwiaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHZhciBjb25zdGFudCA9IGdldENvbnN0YW50KGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuXG4gICAgY29uc3RhbnRTZWxlY3Rvci5kZXBlbmRzT25Pd25Qcm9wcyA9IGZhbHNlO1xuICAgIHJldHVybiBjb25zdGFudFNlbGVjdG9yO1xuICB9O1xufSAvLyBkZXBlbmRzT25Pd25Qcm9wcyBpcyB1c2VkIGJ5IGNyZWF0ZU1hcFRvUHJvcHNQcm94eSB0byBkZXRlcm1pbmUgd2hldGhlciB0byBwYXNzIHByb3BzIGFzIGFyZ3Ncbi8vIHRvIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIHdyYXBwZWQuIEl0IGlzIGFsc28gdXNlZCBieSBtYWtlUHVyZVByb3BzU2VsZWN0b3IgdG8gZGV0ZXJtaW5lXG4vLyB3aGV0aGVyIG1hcFRvUHJvcHMgbmVlZHMgdG8gYmUgaW52b2tlZCB3aGVuIHByb3BzIGhhdmUgY2hhbmdlZC5cbi8vXG4vLyBBIGxlbmd0aCBvZiBvbmUgc2lnbmFscyB0aGF0IG1hcFRvUHJvcHMgZG9lcyBub3QgZGVwZW5kIG9uIHByb3BzIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQuXG4vLyBBIGxlbmd0aCBvZiB6ZXJvIGlzIGFzc3VtZWQgdG8gbWVhbiBtYXBUb1Byb3BzIGlzIGdldHRpbmcgYXJncyB2aWEgYXJndW1lbnRzIG9yIC4uLmFyZ3MgYW5kXG4vLyB0aGVyZWZvcmUgbm90IHJlcG9ydGluZyBpdHMgbGVuZ3RoIGFjY3VyYXRlbHkuLlxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcykge1xuICByZXR1cm4gbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gbnVsbCAmJiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSB1bmRlZmluZWQgPyBCb29sZWFuKG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIDogbWFwVG9Qcm9wcy5sZW5ndGggIT09IDE7XG59IC8vIFVzZWQgYnkgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24gYW5kIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLFxuLy8gdGhpcyBmdW5jdGlvbiB3cmFwcyBtYXBUb1Byb3BzIGluIGEgcHJveHkgZnVuY3Rpb24gd2hpY2ggZG9lcyBzZXZlcmFsIHRoaW5nczpcbi8vXG4vLyAgKiBEZXRlY3RzIHdoZXRoZXIgdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgY2FsbGVkIGRlcGVuZHMgb24gcHJvcHMsIHdoaWNoXG4vLyAgICBpcyB1c2VkIGJ5IHNlbGVjdG9yRmFjdG9yeSB0byBkZWNpZGUgaWYgaXQgc2hvdWxkIHJlaW52b2tlIG9uIHByb3BzIGNoYW5nZXMuXG4vL1xuLy8gICogT24gZmlyc3QgY2FsbCwgaGFuZGxlcyBtYXBUb1Byb3BzIGlmIHJldHVybnMgYW5vdGhlciBmdW5jdGlvbiwgYW5kIHRyZWF0cyB0aGF0XG4vLyAgICBuZXcgZnVuY3Rpb24gYXMgdGhlIHRydWUgbWFwVG9Qcm9wcyBmb3Igc3Vic2VxdWVudCBjYWxscy5cbi8vXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCB2ZXJpZmllcyB0aGUgZmlyc3QgcmVzdWx0IGlzIGEgcGxhaW4gb2JqZWN0LCBpbiBvcmRlciB0byB3YXJuXG4vLyAgICB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlaXIgbWFwVG9Qcm9wcyBmdW5jdGlvbiBpcyBub3QgcmV0dXJuaW5nIGEgdmFsaWQgcmVzdWx0LlxuLy9cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBUb1Byb3BzLCBtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0UHJveHlTZWxlY3RvcihkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWU7XG5cbiAgICB2YXIgcHJveHkgPSBmdW5jdGlvbiBtYXBUb1Byb3BzUHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcmV0dXJuIHByb3h5LmRlcGVuZHNPbk93blByb3BzID8gcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSA6IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoKTtcbiAgICB9OyAvLyBhbGxvdyBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5IHRvIGdldCBvd25Qcm9wc1xuXG5cbiAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IHRydWU7XG5cbiAgICBwcm94eS5tYXBUb1Byb3BzID0gZnVuY3Rpb24gZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICBwcm94eS5tYXBUb1Byb3BzID0gbWFwVG9Qcm9wcztcbiAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcyk7XG4gICAgICB2YXIgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm94eS5tYXBUb1Byb3BzID0gcHJvcHM7XG4gICAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMocHJvcHMpO1xuICAgICAgICBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QocHJvcHMsIGRpc3BsYXlOYW1lLCBtZXRob2ROYW1lKTtcbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb3h5O1xuICB9O1xufSIsImltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBEaXNwYXRjaFRvUHJvcHMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcERpc3BhdGNoVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3BhdGNoOiBkaXNwYXRjaFxuICAgIH07XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdChtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcERpc3BhdGNoVG9Qcm9wcyAmJiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnb2JqZWN0JyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyhtYXBEaXNwYXRjaFRvUHJvcHMsIGRpc3BhdGNoKTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcsIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdF07IiwiaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24obWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwU3RhdGVUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFN0YXRlVG9Qcm9wcywgJ21hcFN0YXRlVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmcobWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwU3RhdGVUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZ107IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3duUHJvcHMsIHt9LCBzdGF0ZVByb3BzLCB7fSwgZGlzcGF0Y2hQcm9wcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRNZXJnZVByb3BzUHJveHkoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lLFxuICAgICAgICBwdXJlID0gX3JlZi5wdXJlLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZi5hcmVNZXJnZWRQcm9wc0VxdWFsO1xuICAgIHZhciBoYXNSdW5PbmNlID0gZmFsc2U7XG4gICAgdmFyIG1lcmdlZFByb3BzO1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZVByb3BzUHJveHkoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgICAgIHZhciBuZXh0TWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcblxuICAgICAgaWYgKGhhc1J1bk9uY2UpIHtcbiAgICAgICAgaWYgKCFwdXJlIHx8ICFhcmVNZXJnZWRQcm9wc0VxdWFsKG5leHRNZXJnZWRQcm9wcywgbWVyZ2VkUHJvcHMpKSBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhc1J1bk9uY2UgPSB0cnVlO1xuICAgICAgICBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KG1lcmdlZFByb3BzLCBkaXNwbGF5TmFtZSwgJ21lcmdlUHJvcHMnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICAgIH07XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtZXJnZVByb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuICFtZXJnZVByb3BzID8gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWVyZ2VQcm9wcztcbiAgfSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24sIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkXTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCB2ZXJpZnlTdWJzZWxlY3RvcnMgZnJvbSAnLi92ZXJpZnlTdWJzZWxlY3RvcnMnO1xuZXhwb3J0IGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB7XG4gICAgcmV0dXJuIG1lcmdlUHJvcHMobWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyksIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpLCBvd25Qcm9wcyk7XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBfcmVmKSB7XG4gIHZhciBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYuYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZi5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZi5hcmVTdGF0ZVByb3BzRXF1YWw7XG4gIHZhciBoYXNSdW5BdExlYXN0T25jZSA9IGZhbHNlO1xuICB2YXIgc3RhdGU7XG4gIHZhciBvd25Qcm9wcztcbiAgdmFyIHN0YXRlUHJvcHM7XG4gIHZhciBkaXNwYXRjaFByb3BzO1xuICB2YXIgbWVyZ2VkUHJvcHM7XG5cbiAgZnVuY3Rpb24gaGFuZGxlRmlyc3RDYWxsKGZpcnN0U3RhdGUsIGZpcnN0T3duUHJvcHMpIHtcbiAgICBzdGF0ZSA9IGZpcnN0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBmaXJzdE93blByb3BzO1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICBoYXNSdW5BdExlYXN0T25jZSA9IHRydWU7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpIHtcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHMoKSB7XG4gICAgaWYgKG1hcFN0YXRlVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1N0YXRlKCkge1xuICAgIHZhciBuZXh0U3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZVByb3BzQ2hhbmdlZCA9ICFhcmVTdGF0ZVByb3BzRXF1YWwobmV4dFN0YXRlUHJvcHMsIHN0YXRlUHJvcHMpO1xuICAgIHN0YXRlUHJvcHMgPSBuZXh0U3RhdGVQcm9wcztcbiAgICBpZiAoc3RhdGVQcm9wc0NoYW5nZWQpIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgdmFyIHByb3BzQ2hhbmdlZCA9ICFhcmVPd25Qcm9wc0VxdWFsKG5leHRPd25Qcm9wcywgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZUNoYW5nZWQgPSAhYXJlU3RhdGVzRXF1YWwobmV4dFN0YXRlLCBzdGF0ZSk7XG4gICAgc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBuZXh0T3duUHJvcHM7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCAmJiBzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCk7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzKCk7XG4gICAgaWYgKHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1N0YXRlKCk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3IobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICByZXR1cm4gaGFzUnVuQXRMZWFzdE9uY2UgPyBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIDogaGFuZGxlRmlyc3RDYWxsKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKTtcbiAgfTtcbn0gLy8gVE9ETzogQWRkIG1vcmUgY29tbWVudHNcbi8vIElmIHB1cmUgaXMgdHJ1ZSwgdGhlIHNlbGVjdG9yIHJldHVybmVkIGJ5IHNlbGVjdG9yRmFjdG9yeSB3aWxsIG1lbW9pemUgaXRzIHJlc3VsdHMsXG4vLyBhbGxvd2luZyBjb25uZWN0QWR2YW5jZWQncyBzaG91bGRDb21wb25lbnRVcGRhdGUgdG8gcmV0dXJuIGZhbHNlIGlmIGZpbmFsXG4vLyBwcm9wcyBoYXZlIG5vdCBjaGFuZ2VkLiBJZiBmYWxzZSwgdGhlIHNlbGVjdG9yIHdpbGwgYWx3YXlzIHJldHVybiBhIG5ld1xuLy8gb2JqZWN0IGFuZCBzaG91bGRDb21wb25lbnRVcGRhdGUgd2lsbCBhbHdheXMgcmV0dXJuIHRydWUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkoZGlzcGF0Y2gsIF9yZWYyKSB7XG4gIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gX3JlZjIuaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBfcmVmMi5pbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHMgPSBfcmVmMi5pbml0TWVyZ2VQcm9wcyxcbiAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiaW5pdE1hcFN0YXRlVG9Qcm9wc1wiLCBcImluaXRNYXBEaXNwYXRjaFRvUHJvcHNcIiwgXCJpbml0TWVyZ2VQcm9wc1wiXSk7XG5cbiAgdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGluaXRNYXBTdGF0ZVRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtZXJnZVByb3BzID0gaW5pdE1lcmdlUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBvcHRpb25zLmRpc3BsYXlOYW1lKTtcbiAgfVxuXG4gIHZhciBzZWxlY3RvckZhY3RvcnkgPSBvcHRpb25zLnB1cmUgPyBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSA6IGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3Rvcnk7XG4gIHJldHVybiBzZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBvcHRpb25zKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4uL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tZXJnZVByb3BzJztcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vc2VsZWN0b3JGYWN0b3J5Jztcbi8qXHJcbiAgY29ubmVjdCBpcyBhIGZhY2FkZSBvdmVyIGNvbm5lY3RBZHZhbmNlZC4gSXQgdHVybnMgaXRzIGFyZ3MgaW50byBhIGNvbXBhdGlibGVcclxuICBzZWxlY3RvckZhY3RvcnksIHdoaWNoIGhhcyB0aGUgc2lnbmF0dXJlOlxyXG5cclxuICAgIChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA9PiBuZXh0RmluYWxQcm9wc1xyXG4gIFxyXG4gIGNvbm5lY3QgcGFzc2VzIGl0cyBhcmdzIHRvIGNvbm5lY3RBZHZhbmNlZCBhcyBvcHRpb25zLCB3aGljaCB3aWxsIGluIHR1cm4gcGFzcyB0aGVtIHRvXHJcbiAgc2VsZWN0b3JGYWN0b3J5IGVhY2ggdGltZSBhIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIGlzIGluc3RhbnRpYXRlZCBvciBob3QgcmVsb2FkZWQuXHJcblxyXG4gIHNlbGVjdG9yRmFjdG9yeSByZXR1cm5zIGEgZmluYWwgcHJvcHMgc2VsZWN0b3IgZnJvbSBpdHMgbWFwU3RhdGVUb1Byb3BzLFxyXG4gIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsIG1lcmdlUHJvcHMsXHJcbiAgbWVyZ2VQcm9wc0ZhY3RvcmllcywgYW5kIHB1cmUgYXJncy5cclxuXHJcbiAgVGhlIHJlc3VsdGluZyBmaW5hbCBwcm9wcyBzZWxlY3RvciBpcyBjYWxsZWQgYnkgdGhlIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIHdoZW5ldmVyXHJcbiAgaXQgcmVjZWl2ZXMgbmV3IHByb3BzIG9yIHN0b3JlIHN0YXRlLlxyXG4gKi9cblxuZnVuY3Rpb24gbWF0Y2goYXJnLCBmYWN0b3JpZXMsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IGZhY3Rvcmllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciByZXN1bHQgPSBmYWN0b3JpZXNbaV0oYXJnKTtcbiAgICBpZiAocmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdmFsdWUgb2YgdHlwZSBcIiArIHR5cGVvZiBhcmcgKyBcIiBmb3IgXCIgKyBuYW1lICsgXCIgYXJndW1lbnQgd2hlbiBjb25uZWN0aW5nIGNvbXBvbmVudCBcIiArIG9wdGlvbnMud3JhcHBlZENvbXBvbmVudE5hbWUgKyBcIi5cIik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59IC8vIGNyZWF0ZUNvbm5lY3Qgd2l0aCBkZWZhdWx0IGFyZ3MgYnVpbGRzIHRoZSAnb2ZmaWNpYWwnIGNvbm5lY3QgYmVoYXZpb3IuIENhbGxpbmcgaXQgd2l0aFxuLy8gZGlmZmVyZW50IG9wdGlvbnMgb3BlbnMgdXAgc29tZSB0ZXN0aW5nIGFuZCBleHRlbnNpYmlsaXR5IHNjZW5hcmlvc1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb25uZWN0KF90ZW1wKSB7XG4gIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICBfcmVmJGNvbm5lY3RIT0MgPSBfcmVmLmNvbm5lY3RIT0MsXG4gICAgICBjb25uZWN0SE9DID0gX3JlZiRjb25uZWN0SE9DID09PSB2b2lkIDAgPyBjb25uZWN0QWR2YW5jZWQgOiBfcmVmJGNvbm5lY3RIT0MsXG4gICAgICBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPSBfcmVmLm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwU3RhdGVUb1Byb3BzRixcbiAgICAgIF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9IF9yZWYubWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBEaXNwYXRjaFRvUHJvID09PSB2b2lkIDAgPyBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBEaXNwYXRjaFRvUHJvLFxuICAgICAgX3JlZiRtZXJnZVByb3BzRmFjdG9yID0gX3JlZi5tZXJnZVByb3BzRmFjdG9yaWVzLFxuICAgICAgbWVyZ2VQcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9PT0gdm9pZCAwID8gZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1lcmdlUHJvcHNGYWN0b3IsXG4gICAgICBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYuc2VsZWN0b3JGYWN0b3J5LFxuICAgICAgc2VsZWN0b3JGYWN0b3J5ID0gX3JlZiRzZWxlY3RvckZhY3RvcnkgPT09IHZvaWQgMCA/IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgOiBfcmVmJHNlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgX3JlZjIpIHtcbiAgICBpZiAoX3JlZjIgPT09IHZvaWQgMCkge1xuICAgICAgX3JlZjIgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX3JlZjMgPSBfcmVmMixcbiAgICAgICAgX3JlZjMkcHVyZSA9IF9yZWYzLnB1cmUsXG4gICAgICAgIHB1cmUgPSBfcmVmMyRwdXJlID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjMkcHVyZSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVzRXF1YWwgPSBfcmVmMy5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZXNFcXVhbCA9PT0gdm9pZCAwID8gc3RyaWN0RXF1YWwgOiBfcmVmMyRhcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgX3JlZjMkYXJlT3duUHJvcHNFcXVhID0gX3JlZjMuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU93blByb3BzRXF1YSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlT3duUHJvcHNFcXVhLFxuICAgICAgICBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPSBfcmVmMy5hcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlU3RhdGVQcm9wc0VxLFxuICAgICAgICBfcmVmMyRhcmVNZXJnZWRQcm9wc0UgPSBfcmVmMy5hcmVNZXJnZWRQcm9wc0VxdWFsLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVNZXJnZWRQcm9wc0UsXG4gICAgICAgIGV4dHJhT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYzLCBbXCJwdXJlXCIsIFwiYXJlU3RhdGVzRXF1YWxcIiwgXCJhcmVPd25Qcm9wc0VxdWFsXCIsIFwiYXJlU3RhdGVQcm9wc0VxdWFsXCIsIFwiYXJlTWVyZ2VkUHJvcHNFcXVhbFwiXSk7XG5cbiAgICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hdGNoKG1hcFN0YXRlVG9Qcm9wcywgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCAnbWFwU3RhdGVUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBtYXRjaChtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWVyZ2VQcm9wcyA9IG1hdGNoKG1lcmdlUHJvcHMsIG1lcmdlUHJvcHNGYWN0b3JpZXMsICdtZXJnZVByb3BzJyk7XG4gICAgcmV0dXJuIGNvbm5lY3RIT0Moc2VsZWN0b3JGYWN0b3J5LCBfZXh0ZW5kcyh7XG4gICAgICAvLyB1c2VkIGluIGVycm9yIG1lc3NhZ2VzXG4gICAgICBtZXRob2ROYW1lOiAnY29ubmVjdCcsXG4gICAgICAvLyB1c2VkIHRvIGNvbXB1dGUgQ29ubmVjdCdzIGRpc3BsYXlOYW1lIGZyb20gdGhlIHdyYXBwZWQgY29tcG9uZW50J3MgZGlzcGxheU5hbWUuXG4gICAgICBnZXREaXNwbGF5TmFtZTogZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gXCJDb25uZWN0KFwiICsgbmFtZSArIFwiKVwiO1xuICAgICAgfSxcbiAgICAgIC8vIGlmIG1hcFN0YXRlVG9Qcm9wcyBpcyBmYWxzeSwgdGhlIENvbm5lY3QgY29tcG9uZW50IGRvZXNuJ3Qgc3Vic2NyaWJlIHRvIHN0b3JlIHN0YXRlIGNoYW5nZXNcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogQm9vbGVhbihtYXBTdGF0ZVRvUHJvcHMpLFxuICAgICAgLy8gcGFzc2VkIHRocm91Z2ggdG8gc2VsZWN0b3JGYWN0b3J5XG4gICAgICBpbml0TWFwU3RhdGVUb1Byb3BzOiBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wczogaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzOiBpbml0TWVyZ2VQcm9wcyxcbiAgICAgIHB1cmU6IHB1cmUsXG4gICAgICBhcmVTdGF0ZXNFcXVhbDogYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsOiBhcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsOiBhcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsOiBhcmVNZXJnZWRQcm9wc0VxdWFsXG4gICAgfSwgZXh0cmFPcHRpb25zKSk7XG4gIH07XG59XG5leHBvcnQgZGVmYXVsdFxuLyojX19QVVJFX18qL1xuY3JlYXRlQ29ubmVjdCgpOyIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGAuIFRoaXMgaXMgYSBsb3ctbGV2ZWxcclxuICogaG9vayB0aGF0IHlvdSBzaG91bGQgdXN1YWxseSBub3QgbmVlZCB0byBjYWxsIGRpcmVjdGx5LlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGBcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoeyB2YWx1ZSB9KSA9PiB7XHJcbiAqICAgY29uc3QgeyBzdG9yZSB9ID0gdXNlUmVkdXhDb250ZXh0KClcclxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cclxuICogfVxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlZHV4Q29udGV4dCgpIHtcbiAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZUNvbnRleHQoUmVhY3RSZWR1eENvbnRleHQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb250ZXh0VmFsdWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCBmaW5kIHJlYWN0LXJlZHV4IGNvbnRleHQgdmFsdWU7IHBsZWFzZSBlbnN1cmUgdGhlIGNvbXBvbmVudCBpcyB3cmFwcGVkIGluIGEgPFByb3ZpZGVyPicpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbn0iLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IGFzIHVzZURlZmF1bHRSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG4vKipcclxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZVN0b3JlYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cclxuICpcclxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlU3RvcmVgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0b3JlSG9vayhjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQ7XG4gIH1cblxuICB2YXIgdXNlUmVkdXhDb250ZXh0ID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpO1xuICB9O1xuICByZXR1cm4gZnVuY3Rpb24gdXNlU3RvcmUoKSB7XG4gICAgdmFyIF91c2VSZWR1eENvbnRleHQgPSB1c2VSZWR1eENvbnRleHQoKSxcbiAgICAgICAgc3RvcmUgPSBfdXNlUmVkdXhDb250ZXh0LnN0b3JlO1xuXG4gICAgcmV0dXJuIHN0b3JlO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgcmVkdXggc3RvcmVcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgRXhhbXBsZUNvbXBvbmVudCA9ICgpID0+IHtcclxuICogICBjb25zdCBzdG9yZSA9IHVzZVN0b3JlKClcclxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cclxuICogfVxyXG4gKi9cblxuZXhwb3J0IHZhciB1c2VTdG9yZSA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVTdG9yZUhvb2soKTsiLCJpbXBvcnQgeyB1c2VSZWR1Y2VyLCB1c2VSZWYsIHVzZU1lbW8sIHVzZUNvbnRleHQsIHVzZURlYnVnVmFsdWUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgYXMgdXNlRGVmYXVsdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vdXNlUmVkdXhDb250ZXh0JztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcblxudmFyIHJlZkVxdWFsaXR5ID0gZnVuY3Rpb24gcmVmRXF1YWxpdHkoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn07XG5cbmZ1bmN0aW9uIHVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uKHNlbGVjdG9yLCBlcXVhbGl0eUZuLCBzdG9yZSwgY29udGV4dFN1Yikge1xuICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIHMgKyAxO1xuICB9LCAwKSxcbiAgICAgIGZvcmNlUmVuZGVyID0gX3VzZVJlZHVjZXJbMV07XG5cbiAgdmFyIHN1YnNjcmlwdGlvbiA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKHN0b3JlLCBjb250ZXh0U3ViKTtcbiAgfSwgW3N0b3JlLCBjb250ZXh0U3ViXSk7XG4gIHZhciBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTZWxlY3RvciA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U3RvcmVTdGF0ZSA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0ZWRTdGF0ZSA9IHVzZVJlZigpO1xuICB2YXIgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gIHZhciBzZWxlY3RlZFN0YXRlO1xuXG4gIHRyeSB7XG4gICAgaWYgKHNlbGVjdG9yICE9PSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50IHx8IHN0b3JlU3RhdGUgIT09IGxhdGVzdFN0b3JlU3RhdGUuY3VycmVudCB8fCBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIHNlbGVjdGVkU3RhdGUgPSBzZWxlY3RvcihzdG9yZVN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIGVyci5tZXNzYWdlICs9IFwiXFxuVGhlIGVycm9yIG1heSBiZSBjb3JyZWxhdGVkIHdpdGggdGhpcyBwcmV2aW91cyBlcnJvcjpcXG5cIiArIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudC5zdGFjayArIFwiXFxuXFxuXCI7XG4gICAgfVxuXG4gICAgdGhyb3cgZXJyO1xuICB9XG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgbGF0ZXN0U2VsZWN0b3IuY3VycmVudCA9IHNlbGVjdG9yO1xuICAgIGxhdGVzdFN0b3JlU3RhdGUuY3VycmVudCA9IHN0b3JlU3RhdGU7XG4gICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gc2VsZWN0ZWRTdGF0ZTtcbiAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gIH0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBjaGVja0ZvclVwZGF0ZXMoKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbmV3U2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQoc3RvcmUuZ2V0U3RhdGUoKSk7XG5cbiAgICAgICAgaWYgKGVxdWFsaXR5Rm4obmV3U2VsZWN0ZWRTdGF0ZSwgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9IG5ld1NlbGVjdGVkU3RhdGU7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gd2UgaWdub3JlIGFsbCBlcnJvcnMgaGVyZSwgc2luY2Ugd2hlbiB0aGUgY29tcG9uZW50XG4gICAgICAgIC8vIGlzIHJlLXJlbmRlcmVkLCB0aGUgc2VsZWN0b3JzIGFyZSBjYWxsZWQgYWdhaW4sIGFuZFxuICAgICAgICAvLyB3aWxsIHRocm93IGFnYWluLCBpZiBuZWl0aGVyIHByb3BzIG5vciBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyBjaGFuZ2VkXG4gICAgICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IGVycjtcbiAgICAgIH1cblxuICAgICAgZm9yY2VSZW5kZXIoKTtcbiAgICB9XG5cbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgY2hlY2tGb3JVcGRhdGVzKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbc3RvcmUsIHN1YnNjcmlwdGlvbl0pO1xuICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbn1cbi8qKlxyXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cclxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXHJcbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3Rvckhvb2soY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0O1xuICB9XG5cbiAgdmFyIHVzZVJlZHV4Q29udGV4dCA9IGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFJlZHV4Q29udGV4dCA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KTtcbiAgfTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZVNlbGVjdG9yKHNlbGVjdG9yLCBlcXVhbGl0eUZuKSB7XG4gICAgaWYgKGVxdWFsaXR5Rm4gPT09IHZvaWQgMCkge1xuICAgICAgZXF1YWxpdHlGbiA9IHJlZkVxdWFsaXR5O1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFzZWxlY3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhIHNlbGVjdG9yIHRvIHVzZVNlbGVjdG9yXCIpO1xuICAgIH1cblxuICAgIHZhciBfdXNlUmVkdXhDb250ZXh0ID0gdXNlUmVkdXhDb250ZXh0KCksXG4gICAgICAgIHN0b3JlID0gX3VzZVJlZHV4Q29udGV4dC5zdG9yZSxcbiAgICAgICAgY29udGV4dFN1YiA9IF91c2VSZWR1eENvbnRleHQuc3Vic2NyaXB0aW9uO1xuXG4gICAgdmFyIHNlbGVjdGVkU3RhdGUgPSB1c2VTZWxlY3RvcldpdGhTdG9yZUFuZFN1YnNjcmlwdGlvbihzZWxlY3RvciwgZXF1YWxpdHlGbiwgc3RvcmUsIGNvbnRleHRTdWIpO1xuICAgIHVzZURlYnVnVmFsdWUoc2VsZWN0ZWRTdGF0ZSk7XG4gICAgcmV0dXJuIHNlbGVjdGVkU3RhdGU7XG4gIH07XG59XG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggc3RvcmUncyBzdGF0ZS4gVGhpcyBob29rIHRha2VzIGEgc2VsZWN0b3IgZnVuY3Rpb25cclxuICogYXMgYW4gYXJndW1lbnQuIFRoZSBzZWxlY3RvciBpcyBjYWxsZWQgd2l0aCB0aGUgc3RvcmUgc3RhdGUuXHJcbiAqXHJcbiAqIFRoaXMgaG9vayB0YWtlcyBhbiBvcHRpb25hbCBlcXVhbGl0eSBjb21wYXJpc29uIGZ1bmN0aW9uIGFzIHRoZSBzZWNvbmQgcGFyYW1ldGVyXHJcbiAqIHRoYXQgYWxsb3dzIHlvdSB0byBjdXN0b21pemUgdGhlIHdheSB0aGUgc2VsZWN0ZWQgc3RhdGUgaXMgY29tcGFyZWQgdG8gZGV0ZXJtaW5lXHJcbiAqIHdoZXRoZXIgdGhlIGNvbXBvbmVudCBuZWVkcyB0byBiZSByZS1yZW5kZXJlZC5cclxuICpcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2VsZWN0b3IgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb249fSBlcXVhbGl0eUZuIHRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgdXNlZCB0byBkZXRlcm1pbmUgZXF1YWxpdHlcclxuICpcclxuICogQHJldHVybnMge2FueX0gdGhlIHNlbGVjdGVkIHN0YXRlXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuICogaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoKSA9PiB7XHJcbiAqICAgY29uc3QgY291bnRlciA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLmNvdW50ZXIpXHJcbiAqICAgcmV0dXJuIDxkaXY+e2NvdW50ZXJ9PC9kaXY+XHJcbiAqIH1cclxuICovXG5cbmV4cG9ydCB2YXIgdXNlU2VsZWN0b3IgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlU2VsZWN0b3JIb29rKCk7IiwiaW1wb3J0IFByb3ZpZGVyIGZyb20gJy4vY29tcG9uZW50cy9Qcm92aWRlcic7XG5pbXBvcnQgY29ubmVjdEFkdmFuY2VkIGZyb20gJy4vY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgY29ubmVjdCBmcm9tICcuL2Nvbm5lY3QvY29ubmVjdCc7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgY3JlYXRlRGlzcGF0Y2hIb29rIH0gZnJvbSAnLi9ob29rcy91c2VEaXNwYXRjaCc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciwgY3JlYXRlU2VsZWN0b3JIb29rIH0gZnJvbSAnLi9ob29rcy91c2VTZWxlY3Rvcic7XG5pbXBvcnQgeyB1c2VTdG9yZSwgY3JlYXRlU3RvcmVIb29rIH0gZnJvbSAnLi9ob29rcy91c2VTdG9yZSc7XG5pbXBvcnQgeyBzZXRCYXRjaCB9IGZyb20gJy4vdXRpbHMvYmF0Y2gnO1xuaW1wb3J0IHsgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgYXMgYmF0Y2ggfSBmcm9tICcuL3V0aWxzL3JlYWN0QmF0Y2hlZFVwZGF0ZXMnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5zZXRCYXRjaChiYXRjaCk7XG5leHBvcnQgeyBQcm92aWRlciwgY29ubmVjdEFkdmFuY2VkLCBSZWFjdFJlZHV4Q29udGV4dCwgY29ubmVjdCwgYmF0Y2gsIHVzZURpc3BhdGNoLCBjcmVhdGVEaXNwYXRjaEhvb2ssIHVzZVNlbGVjdG9yLCBjcmVhdGVTZWxlY3Rvckhvb2ssIHVzZVN0b3JlLCBjcmVhdGVTdG9yZUhvb2ssIHNoYWxsb3dFcXVhbCB9OyIsImNvbnN0IFNFVF9USEVNRSA9ICdTRVRfVEhFTUUnO1xuXG5mdW5jdGlvbiBzZXRUaGVtZSh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFNFVF9USEVNRSxcbiAgICB0aGVtZVxuICB9O1xufVxuXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gIHNpemVzOiB7XG4gICAgbW9iaWxlOiA2ODAsXG4gICAgdGFibGV0OiAxMDc0LFxuICAgIGRlc2t0b3A6IDE0NTBcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGNvbnN0YW50cyA9IHsgU0VUX1RIRU1FIH07XG5leHBvcnQgY29uc3QgYWN0aW9ucyA9IHsgc2V0VGhlbWUgfTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RhdGUgPSBpbml0aWFsU3RhdGUsIGFjdGlvbikge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBTRVRfVEhFTUU6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaXplczogc3RhdGUuc2l6ZXMsXG4gICAgICAgIC4uLmFjdGlvbi50aGVtZVxuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG4iLCIvLyA+IGZldGNoIHdvbuKAmXQgc2VuZCBjb29raWVzLCB1bmxlc3MgeW91IHNldCB0aGUgY3JlZGVudGlhbHMgaW5pdCBvcHRpb24uIChTaW5jZSBBdWcgMjUsIDIwMTcuIFRoZSBzcGVjIGNoYW5nZWQgdGhlIGRlZmF1bHQgY3JlZGVudGlhbHMgcG9saWN5IHRvIHNhbWUtb3JpZ2luLiBGaXJlZm94IGNoYW5nZWQgc2luY2UgNjEuMGIxMy4pXG4vLyBodHRwczovL3JlZC5vc3Ryb3Zvay5pbi9pc3N1ZXMvODQ1OTRcbmNvbnN0IGludGVybmFsRmV0Y2ggPSAodXJsLCBvcHRpb25zKSA9PiB7XG4gIHJldHVybiBmZXRjaChcbiAgICB1cmwsXG4gICAge1xuICAgICAgY3JlZGVudGlhbHM6ICdzYW1lLW9yaWdpbicsXG4gICAgICAuLi5vcHRpb25zLFxuICAgIH1cbiAgKVxufTtcblxuZXhwb3J0IGRlZmF1bHQgaW50ZXJuYWxGZXRjaDtcbiIsImltcG9ydCB7IGdldEZyb21TdG9yYWdlIH0gZnJvbSAnQGhlbHBlcnMvc3RvcmFnZSc7XG5pbXBvcnQgeyBTdG9yYWdlIH0gZnJvbSAnQGNvbnN0YW50cy9zdG9yYWdlJztcblxuaW1wb3J0IGZldGNoIGZyb20gJy4uLy4uL2hlbHBlcnMvZmV0Y2gnO1xuXG5jb25zdCBTRVRfQVZJQV9TVUdHRVNUID0gJ1NFVF9BVklBX1NVR0dFU1QnO1xuXG5mdW5jdGlvbiBsb2FkU3VnZ2VzdChxdWVyeSkge1xuICByZXR1cm4gYXN5bmMgKGRpc3BhdGNoLCBnZXRTdG9yZSkgPT4ge1xuICAgIGNvbnN0IHN0b3JlID0gZ2V0U3RvcmUoKTtcblxuICAgIGlmIChxdWVyeSBpbiBzdG9yZS5hdmlhRGVzdGluYXRpb24uc3VnZ2VzdHMpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBjb25zdCB1cmwgPSAnaHR0cHM6Ly93d3cucmF0ZWhhd2suY29tL2FwaS9zaXRlL211bHRpY29tcGxldGUuanNvbic7XG4gICAgY29uc3QgbG9jYWxlID0gYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoU3RvcmFnZS5MQU5HVUFHRSk7XG5cbiAgICByZXR1cm4gZmV0Y2goXG4gICAgICBgJHt1cmx9P3F1ZXJ5PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHF1ZXJ5KSB8fFxuICAgICAgICAnJ30mbG9jYWxlPSR7bG9jYWxlfSZpYXRhPTEmbGltaXQ9MTBgXG4gICAgKVxuICAgICAgLnRoZW4ocmVzdWx0ID0+IHJlc3VsdC5qc29uKCkpXG4gICAgICAudGhlbihkYXRhID0+IHBhcnNlU3VnZ2VzdChxdWVyeSwgZGF0YSkpXG4gICAgICAudGhlbihzdWdnZXN0ID0+IGRpc3BhdGNoKHNldFN1Z2dlc3QocXVlcnksIHN1Z2dlc3QpKSlcbiAgICAgIC5jYXRjaCgoKSA9PiB7fSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNldFN1Z2dlc3QocXVlcnksIHN1Z2dlc3QpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBTRVRfQVZJQV9TVUdHRVNULFxuICAgIHF1ZXJ5LFxuICAgIHN1Z2dlc3RcbiAgfTtcbn1cblxuY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICBzdWdnZXN0czoge31cbn07XG5cbmV4cG9ydCBjb25zdCBjb25zdGFudHMgPSB7IFNFVF9BVklBX1NVR0dFU1QgfTtcbmV4cG9ydCBjb25zdCBhY3Rpb25zID0geyBsb2FkU3VnZ2VzdCB9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uKSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFNFVF9BVklBX1NVR0dFU1Q6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWdnZXN0czoge1xuICAgICAgICAgIC4uLnN0YXRlLnN1Z2dlc3RzLFxuICAgICAgICAgIFthY3Rpb24ucXVlcnldOiBhY3Rpb24uc3VnZ2VzdFxuICAgICAgICB9XG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VTdWdnZXN0KHF1ZXJ5LCBkYXRhKSB7XG4gIGNvbnN0IHJlZ2lvbnMgPSBwcmVwYXJlUmVnaW9ucyhcbiAgICAoZGF0YS5yZWdpb25zIHx8IFtdKS5maWx0ZXIoZmlsdGVyUmVnaW9uKS5tYXAocGFyc2VSZWdpb24pXG4gICkubWFwKChyZWdpb24sIGluZGV4KSA9PiAoe1xuICAgIGluZGV4LFxuICAgIC4uLnJlZ2lvblxuICB9KSk7XG5cbiAgcmV0dXJuIHtcbiAgICBxdWVyeSxcbiAgICByZWdpb25zXG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbHRlclJlZ2lvbihyZWdpb24pIHtcbiAgY29uc3QgYWxsb3dlZFR5cGVzID0gWydDaXR5JywgJ0FpcnBvcnQnXTtcblxuICBpZiAoYWxsb3dlZFR5cGVzLmluZGV4T2YocmVnaW9uLnR5cGUpID09PSAtMSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICghcmVnaW9uLmlhdGEpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcGFyc2VSZWdpb24oZGF0YSkge1xuICByZXR1cm4ge1xuICAgIGlkOiBkYXRhWydpZCddIHx8ICcnLFxuICAgIGNvdW50cnk6IGRhdGFbJ2NvdW50cnknXSB8fCAnJyxcbiAgICBpYXRhOiBkYXRhWydpYXRhJ10gfHwgJycsXG4gICAgbmFtZTogZGF0YVsnbmFtZSddLFxuICAgIHJlbGF0ZWRDaXR5OiBkYXRhWydyZWxhdGVkX2NpdHknXSB8fCAnJyxcbiAgICB0eXBlOiBkYXRhWyd0eXBlJ11cbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJlcGFyZVJlZ2lvbnMocmVnaW9ucykge1xuICBjb25zdCBjaXRpZXMgPSByZWdpb25zLmZpbHRlcihyZWdpb24gPT4gcmVnaW9uLnR5cGUgPT09ICdDaXR5Jyk7XG4gIGNvbnN0IGFpcnBvcnRzID0gcmVnaW9ucy5maWx0ZXIocmVnaW9uID0+IHJlZ2lvbi50eXBlID09PSAnQWlycG9ydCcpO1xuXG4gIGNvbnN0IHJlZ2lvbnNUcmVlID0gW107XG5cbiAgY2l0aWVzLmZvckVhY2goY2l0eSA9PlxuICAgIHJlZ2lvbnNUcmVlLnB1c2goe1xuICAgICAgLi4uY2l0eSxcbiAgICAgIGNoaWxkcmVuOiBbXVxuICAgIH0pXG4gICk7XG5cbiAgYWlycG9ydHMuZm9yRWFjaChhZGRBaXJwb3J0KTtcblxuICByZXR1cm4gZmxhdHRlbihyZWdpb25zVHJlZSk7XG5cbiAgZnVuY3Rpb24gYWRkQWlycG9ydChhaXJwb3J0KSB7XG4gICAgY29uc3QgcmVsYXRlZENpdHkgPSBmaW5kQ2l0eShhaXJwb3J0LnJlbGF0ZWRDaXR5KTtcblxuICAgIGlmIChyZWxhdGVkQ2l0eSkge1xuICAgICAgcmVsYXRlZENpdHkuY2hpbGRyZW4ucHVzaChhaXJwb3J0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVnaW9uc1RyZWUucHVzaChhaXJwb3J0KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kQ2l0eShuYW1lKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZWdpb25zVHJlZS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHJlZ2lvbnNUcmVlW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHJlZ2lvbnNUcmVlW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW4odHJlZSkge1xuICBjb25zdCByZXN1bHQgPSBbXTtcblxuICB0cmVlLmZvckVhY2gocmVnaW9uID0+IHtcbiAgICByZXN1bHQucHVzaCh7XG4gICAgICAuLi5yZWdpb24sXG4gICAgICBsZXZlbDogMCxcbiAgICAgIGNoaWxkcmVuOiBudWxsXG4gICAgfSk7XG5cbiAgICBpZiAocmVnaW9uLmNoaWxkcmVuICYmIHJlZ2lvbi5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICByZWdpb24uY2hpbGRyZW4uZm9yRWFjaChyZWdpb24gPT4ge1xuICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgLi4ucmVnaW9uLFxuICAgICAgICAgIGxldmVsOiAxLFxuICAgICAgICAgIGNoaWxkcmVuOiBudWxsXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuIiwiaW1wb3J0IGZldGNoIGZyb20gJy4uLy4uL2hlbHBlcnMvZmV0Y2gnO1xuaW1wb3J0IHsgZ2V0RnJvbVN0b3JhZ2UgfSBmcm9tICdAaGVscGVycy9zdG9yYWdlJztcbmltcG9ydCB7IFN0b3JhZ2UgfSBmcm9tICdAY29uc3RhbnRzL3N0b3JhZ2UnO1xuXG5jb25zdCBTRVRfU1VHR0VTVCA9ICdTRVRfU1VHR0VTVCc7XG5cbmZ1bmN0aW9uIGxvYWRTdWdnZXN0KHF1ZXJ5KSB7XG4gIHJldHVybiBhc3luYyAoZGlzcGF0Y2gsIGdldFN0b3JlKSA9PiB7XG4gICAgY29uc3Qgc3RvcmUgPSBnZXRTdG9yZSgpO1xuXG4gICAgaWYgKHF1ZXJ5IGluIHN0b3JlLmRlc3RpbmF0aW9uLnN1Z2dlc3RzKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgY29uc3QgdXJsID0gJ2h0dHBzOi8vd3d3LnJhdGVoYXdrLmNvbS9hcGkvc2l0ZS9tdWx0aWNvbXBsZXRlLmpzb24nO1xuICAgIGNvbnN0IGxvY2FsZSA9IGF3YWl0IGdldEZyb21TdG9yYWdlKFN0b3JhZ2UuTEFOR1VBR0UpO1xuXG4gICAgcmV0dXJuIGZldGNoKGAke3VybH0/cXVlcnk9JHtlbmNvZGVVUklDb21wb25lbnQocXVlcnkpIHx8ICcnfSZsb2NhbGU9JHtsb2NhbGV9YClcbiAgICAgIC50aGVuKHJlc3VsdCA9PiByZXN1bHQuanNvbigpKVxuICAgICAgLnRoZW4oZGF0YSA9PiBwYXJzZVN1Z2dlc3QocXVlcnksIGRhdGEpKVxuICAgICAgLnRoZW4oc3VnZ2VzdCA9PiBkaXNwYXRjaChzZXRTdWdnZXN0KHF1ZXJ5LCBzdWdnZXN0KSkpXG4gICAgICAuY2F0Y2goKCkgPT4ge30pO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzZXRTdWdnZXN0KHF1ZXJ5LCBzdWdnZXN0KSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogU0VUX1NVR0dFU1QsXG4gICAgcXVlcnksXG4gICAgc3VnZ2VzdCxcbiAgfTtcbn1cblxuY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICBzdWdnZXN0czoge30sXG59O1xuXG5leHBvcnQgY29uc3QgY29uc3RhbnRzID0geyBTRVRfU1VHR0VTVCB9O1xuZXhwb3J0IGNvbnN0IGFjdGlvbnMgPSB7IGxvYWRTdWdnZXN0IH07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uKSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFNFVF9TVUdHRVNUOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VnZ2VzdHM6IHtcbiAgICAgICAgICAuLi5zdGF0ZS5zdWdnZXN0cyxcbiAgICAgICAgICBbYWN0aW9uLnF1ZXJ5XTogYWN0aW9uLnN1Z2dlc3QsXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gcGFyc2VTdWdnZXN0KHF1ZXJ5LCBkYXRhKSB7XG4gIGNvbnN0IHJlZ2lvbnMgPSAoZGF0YS5yZWdpb25zIHx8IFtdKVxuICAgIC5tYXAocGFyc2VSZWdpb24pXG4gICAgLm1hcCgocmVnaW9uLCBpbmRleCkgPT4gKHtcbiAgICAgIGluZGV4LFxuICAgICAgLi4ucmVnaW9uLFxuICAgIH0pKTtcbiAgY29uc3QgaG90ZWxzID0gKGRhdGEuaG90ZWxzIHx8IFtdKVxuICAgIC5tYXAocGFyc2VIb3RlbClcbiAgICAubWFwKChob3RlbCwgaW5kZXgpID0+ICh7XG4gICAgICBpbmRleDogaW5kZXggKyByZWdpb25zLmxlbmd0aCxcbiAgICAgIC4uLmhvdGVsLFxuICAgIH0pKTtcblxuICByZXR1cm4ge1xuICAgIHF1ZXJ5LFxuICAgIHJlZ2lvbnMsXG4gICAgaG90ZWxzLFxuICB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZUhvdGVsKGRhdGEpIHtcbiAgcmV0dXJuIHtcbiAgICBjb3VudHJ5Q29kZTogZGF0YVsnY291bnRyeV9jb2RlJ10sXG4gICAgY291bnRyeU5hbWU6IGRhdGFbJ2NvdW50cnlfbmFtZSddLFxuICAgIGhvdGVsQWRkcmVzczogZGF0YVsnaG90ZWxfYWRkcmVzcyddIHx8ICcnLFxuICAgIGhvdGVsS2luZDogZGF0YVsnaG90ZWxfa2luZCddIHx8ICcnLFxuICAgIGlkOiBkYXRhWydvdGFob3RlbF9pZCddLFxuICAgIGlzTmF0ZGlzQ3JpdGljYWw6ICEhZGF0YVsnaXNfbmF0ZGlzX2NyaXRpY2FsJ10sXG4gICAgbWFzdGVySWQ6IFN0cmluZyhkYXRhWydtYXN0ZXJfaWQnXSB8fCAwKSB8fCAnJyxcbiAgICBuYW1lOiBkYXRhWydob3RlbF9uYW1lJ10sXG4gICAgcmVnaW9uSWQ6IGRhdGFbJ3JlZ2lvbl9pZCddLFxuICAgIHJlZ2lvbk5hbWU6IGRhdGFbJ3JlZ2lvbl9uYW1lJ10sXG4gICAgc2x1ZzogcGFyc2VTbHVnKGRhdGFbJ3NsdWcnXSksXG4gICAgbXVsdGljb21wbGV0ZVR5cGU6ICdob3RlbCcsXG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlUmVnaW9uKGRhdGEpIHtcbiAgcmV0dXJuIHtcbiAgICBjb3VudHJ5OiBkYXRhWydjb3VudHJ5J10gfHwgJycsXG4gICAgY291bnRyeUNvZGU6IGRhdGFbJ2NvdW50cnlfY29kZSddIHx8ICcnLFxuICAgIGlhdGE6IGRhdGFbJ2lhdGEnXSB8fCAnJyxcbiAgICBpZDogZGF0YVsnaWQnXSxcbiAgICBpc05hdGRpc0NyaXRpY2FsOiAhIWRhdGFbJ2lzX25hdGRpc19jcml0aWNhbCddLFxuICAgIG5hbWU6IGRhdGFbJ25hbWUnXSxcbiAgICBzbHVnOiBwYXJzZVNsdWcoZGF0YVsnc2x1ZyddKSxcbiAgICB0eXBlOiBkYXRhWyd0eXBlJ10sXG4gICAgbXVsdGljb21wbGV0ZVR5cGU6ICdyZWdpb24nLFxuICB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZVNsdWcoZGF0YSkge1xuICBjb25zdCBkZWxpbWl0ZXIgPSAnLyc7XG5cbiAgaWYgKCFkYXRhKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBbY291bnRyeSwgcmVnaW9uLCBzdWJyZWdpb25dID0gZGF0YS5zcGxpdChkZWxpbWl0ZXIpO1xuXG4gIHJldHVybiB7XG4gICAgY291bnRyeSxcbiAgICByZWdpb24sXG4gICAgc3VicmVnaW9uLFxuICB9O1xufVxuIiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tICcuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbnZhciBNSUxMSVNFQ09ORFNfSU5fSE9VUiA9IDM2MDAwMDA7XG52YXIgTUlMTElTRUNPTkRTX0lOX01JTlVURSA9IDYwMDAwO1xudmFyIERFRkFVTFRfQURESVRJT05BTF9ESUdJVFMgPSAyO1xudmFyIHBhdHRlcm5zID0ge1xuICBkYXRlVGltZURlbGltaXRlcjogL1tUIF0vLFxuICB0aW1lWm9uZURlbGltaXRlcjogL1taIF0vaSxcbiAgdGltZXpvbmU6IC8oW1orLV0uKikkL1xufTtcbnZhciBkYXRlUmVnZXggPSAvXi0/KD86KFxcZHszfSl8KFxcZHsyfSkoPzotPyhcXGR7Mn0pKT98VyhcXGR7Mn0pKD86LT8oXFxkezF9KSk/fCkkLztcbnZhciB0aW1lUmVnZXggPSAvXihcXGR7Mn0oPzpbLixdXFxkKik/KSg/Ojo/KFxcZHsyfSg/OlsuLF1cXGQqKT8pKT8oPzo6PyhcXGR7Mn0oPzpbLixdXFxkKik/KSk/JC87XG52YXIgdGltZXpvbmVSZWdleCA9IC9eKFsrLV0pKFxcZHsyfSkoPzo6PyhcXGR7Mn0pKT8kLztcbi8qKlxuICogQG5hbWUgcGFyc2VJU09cbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgUGFyc2UgSVNPIHN0cmluZ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUGFyc2UgdGhlIGdpdmVuIHN0cmluZyBpbiBJU08gODYwMSBmb3JtYXQgYW5kIHJldHVybiBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIEZ1bmN0aW9uIGFjY2VwdHMgY29tcGxldGUgSVNPIDg2MDEgZm9ybWF0cyBhcyB3ZWxsIGFzIHBhcnRpYWwgaW1wbGVtZW50YXRpb25zLlxuICogSVNPIDg2MDE6IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDFcbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXNuJ3QgYSBzdHJpbmcsIHRoZSBmdW5jdGlvbiBjYW5ub3QgcGFyc2UgdGhlIHN0cmluZyBvclxuICogdGhlIHZhbHVlcyBhcmUgaW52YWxpZCwgaXQgcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiAtIFRoZSBwcmV2aW91cyBgcGFyc2VgIGltcGxlbWVudGF0aW9uIHdhcyByZW5hbWVkIHRvIGBwYXJzZUlTT2AuXG4gKlxuICogICBgYGBqYXZhc2NyaXB0XG4gKiAgIC8vIEJlZm9yZSB2Mi4wLjBcbiAqICAgcGFyc2UoJzIwMTYtMDEtMDEnKVxuICpcbiAqICAgLy8gdjIuMC4wIG9ud2FyZFxuICogICBwYXJzZUlTTygnMjAxNi0wMS0wMScpXG4gKiAgIGBgYFxuICpcbiAqIC0gYHBhcnNlSVNPYCBub3cgdmFsaWRhdGVzIHNlcGFyYXRlIGRhdGUgYW5kIHRpbWUgdmFsdWVzIGluIElTTy04NjAxIHN0cmluZ3NcbiAqICAgYW5kIHJldHVybnMgYEludmFsaWQgRGF0ZWAgaWYgdGhlIGRhdGUgaXMgaW52YWxpZC5cbiAqXG4gKiAgIGBgYGphdmFzY3JpcHRcbiAqICAgcGFyc2VJU08oJzIwMTgtMTMtMzInKVxuICogICAvLz0+IEludmFsaWQgRGF0ZVxuICogICBgYGBcbiAqXG4gKiAtIGBwYXJzZUlTT2Agbm93IGRvZXNuJ3QgZmFsbCBiYWNrIHRvIGBuZXcgRGF0ZWAgY29uc3RydWN0b3JcbiAqICAgaWYgaXQgZmFpbHMgdG8gcGFyc2UgYSBzdHJpbmcgYXJndW1lbnQuIEluc3RlYWQsIGl0IHJldHVybnMgYEludmFsaWQgRGF0ZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHswfDF8Mn0gW29wdGlvbnMuYWRkaXRpb25hbERpZ2l0cz0yXSAtIHRoZSBhZGRpdGlvbmFsIG51bWJlciBvZiBkaWdpdHMgaW4gdGhlIGV4dGVuZGVkIHllYXIgZm9ybWF0XG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMuYWRkaXRpb25hbERpZ2l0c2AgbXVzdCBiZSAwLCAxIG9yIDJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCBzdHJpbmcgJzIwMTQtMDItMTFUMTE6MzA6MzAnIHRvIGRhdGU6XG4gKiB2YXIgcmVzdWx0ID0gcGFyc2VJU08oJzIwMTQtMDItMTFUMTE6MzA6MzAnKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCBzdHJpbmcgJyswMjAxNDEwMScgdG8gZGF0ZSxcbiAqIC8vIGlmIHRoZSBhZGRpdGlvbmFsIG51bWJlciBvZiBkaWdpdHMgaW4gdGhlIGV4dGVuZGVkIHllYXIgZm9ybWF0IGlzIDE6XG4gKiB2YXIgcmVzdWx0ID0gcGFyc2VJU08oJyswMjAxNDEwMScsIHsgYWRkaXRpb25hbERpZ2l0czogMSB9KVxuICogLy89PiBGcmkgQXByIDExIDIwMTQgMDA6MDA6MDBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZUlTTyhhcmd1bWVudCwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGFkZGl0aW9uYWxEaWdpdHMgPSBvcHRpb25zLmFkZGl0aW9uYWxEaWdpdHMgPT0gbnVsbCA/IERFRkFVTFRfQURESVRJT05BTF9ESUdJVFMgOiB0b0ludGVnZXIob3B0aW9ucy5hZGRpdGlvbmFsRGlnaXRzKTtcblxuICBpZiAoYWRkaXRpb25hbERpZ2l0cyAhPT0gMiAmJiBhZGRpdGlvbmFsRGlnaXRzICE9PSAxICYmIGFkZGl0aW9uYWxEaWdpdHMgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignYWRkaXRpb25hbERpZ2l0cyBtdXN0IGJlIDAsIDEgb3IgMicpO1xuICB9XG5cbiAgaWYgKCEodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnQpID09PSAnW29iamVjdCBTdHJpbmddJykpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxuXG4gIHZhciBkYXRlU3RyaW5ncyA9IHNwbGl0RGF0ZVN0cmluZyhhcmd1bWVudCk7XG4gIHZhciBkYXRlO1xuXG4gIGlmIChkYXRlU3RyaW5ncy5kYXRlKSB7XG4gICAgdmFyIHBhcnNlWWVhclJlc3VsdCA9IHBhcnNlWWVhcihkYXRlU3RyaW5ncy5kYXRlLCBhZGRpdGlvbmFsRGlnaXRzKTtcbiAgICBkYXRlID0gcGFyc2VEYXRlKHBhcnNlWWVhclJlc3VsdC5yZXN0RGF0ZVN0cmluZywgcGFyc2VZZWFyUmVzdWx0LnllYXIpO1xuICB9XG5cbiAgaWYgKGlzTmFOKGRhdGUpIHx8ICFkYXRlKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cblxuICB2YXIgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIHZhciB0aW1lID0gMDtcbiAgdmFyIG9mZnNldDtcblxuICBpZiAoZGF0ZVN0cmluZ3MudGltZSkge1xuICAgIHRpbWUgPSBwYXJzZVRpbWUoZGF0ZVN0cmluZ3MudGltZSk7XG5cbiAgICBpZiAoaXNOYU4odGltZSkgfHwgdGltZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRhdGVTdHJpbmdzLnRpbWV6b25lKSB7XG4gICAgb2Zmc2V0ID0gcGFyc2VUaW1lem9uZShkYXRlU3RyaW5ncy50aW1lem9uZSk7XG5cbiAgICBpZiAoaXNOYU4ob2Zmc2V0KSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBkaXJ0eURhdGUgPSBuZXcgRGF0ZSh0aW1lc3RhbXAgKyB0aW1lKTsgLy8ganMgcGFyc2VkIHN0cmluZyBhc3N1bWluZyBpdCdzIGluIFVUQyB0aW1lem9uZVxuICAgIC8vIGJ1dCB3ZSBuZWVkIGl0IHRvIGJlIHBhcnNlZCBpbiBvdXIgdGltZXpvbmVcbiAgICAvLyBzbyB3ZSB1c2UgdXRjIHZhbHVlcyB0byBidWlsZCBkYXRlIGluIG91ciB0aW1lem9uZS5cbiAgICAvLyBZZWFyIHZhbHVlcyBmcm9tIDAgdG8gOTkgbWFwIHRvIHRoZSB5ZWFycyAxOTAwIHRvIDE5OTlcbiAgICAvLyBzbyBzZXQgeWVhciBleHBsaWNpdGx5IHdpdGggc2V0RnVsbFllYXIuXG5cbiAgICB2YXIgcmVzdWx0ID0gbmV3IERhdGUoZGlydHlEYXRlLmdldFVUQ0Z1bGxZZWFyKCksIGRpcnR5RGF0ZS5nZXRVVENNb250aCgpLCBkaXJ0eURhdGUuZ2V0VVRDRGF0ZSgpLCBkaXJ0eURhdGUuZ2V0VVRDSG91cnMoKSwgZGlydHlEYXRlLmdldFVUQ01pbnV0ZXMoKSwgZGlydHlEYXRlLmdldFVUQ1NlY29uZHMoKSwgZGlydHlEYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpKTtcbiAgICByZXN1bHQuc2V0RnVsbFllYXIoZGlydHlEYXRlLmdldFVUQ0Z1bGxZZWFyKCkpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wICsgdGltZSArIG9mZnNldCk7XG59XG5cbmZ1bmN0aW9uIHNwbGl0RGF0ZVN0cmluZyhkYXRlU3RyaW5nKSB7XG4gIHZhciBkYXRlU3RyaW5ncyA9IHt9O1xuICB2YXIgYXJyYXkgPSBkYXRlU3RyaW5nLnNwbGl0KHBhdHRlcm5zLmRhdGVUaW1lRGVsaW1pdGVyKTtcbiAgdmFyIHRpbWVTdHJpbmc7IC8vIFRoZSByZWdleCBtYXRjaCBzaG91bGQgb25seSByZXR1cm4gYXQgbWF4aW11bSB0d28gYXJyYXkgZWxlbWVudHMuXG4gIC8vIFtkYXRlXSwgW3RpbWVdLCBvciBbZGF0ZSwgdGltZV0uXG5cbiAgaWYgKGFycmF5Lmxlbmd0aCA+IDIpIHtcbiAgICByZXR1cm4gZGF0ZVN0cmluZ3M7XG4gIH1cblxuICBpZiAoLzovLnRlc3QoYXJyYXlbMF0pKSB7XG4gICAgZGF0ZVN0cmluZ3MuZGF0ZSA9IG51bGw7XG4gICAgdGltZVN0cmluZyA9IGFycmF5WzBdO1xuICB9IGVsc2Uge1xuICAgIGRhdGVTdHJpbmdzLmRhdGUgPSBhcnJheVswXTtcbiAgICB0aW1lU3RyaW5nID0gYXJyYXlbMV07XG5cbiAgICBpZiAocGF0dGVybnMudGltZVpvbmVEZWxpbWl0ZXIudGVzdChkYXRlU3RyaW5ncy5kYXRlKSkge1xuICAgICAgZGF0ZVN0cmluZ3MuZGF0ZSA9IGRhdGVTdHJpbmcuc3BsaXQocGF0dGVybnMudGltZVpvbmVEZWxpbWl0ZXIpWzBdO1xuICAgICAgdGltZVN0cmluZyA9IGRhdGVTdHJpbmcuc3Vic3RyKGRhdGVTdHJpbmdzLmRhdGUubGVuZ3RoLCBkYXRlU3RyaW5nLmxlbmd0aCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHRpbWVTdHJpbmcpIHtcbiAgICB2YXIgdG9rZW4gPSBwYXR0ZXJucy50aW1lem9uZS5leGVjKHRpbWVTdHJpbmcpO1xuXG4gICAgaWYgKHRva2VuKSB7XG4gICAgICBkYXRlU3RyaW5ncy50aW1lID0gdGltZVN0cmluZy5yZXBsYWNlKHRva2VuWzFdLCAnJyk7XG4gICAgICBkYXRlU3RyaW5ncy50aW1lem9uZSA9IHRva2VuWzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRlU3RyaW5ncy50aW1lID0gdGltZVN0cmluZztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0ZVN0cmluZ3M7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWWVhcihkYXRlU3RyaW5nLCBhZGRpdGlvbmFsRGlnaXRzKSB7XG4gIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ14oPzooXFxcXGR7NH18WystXVxcXFxkeycgKyAoNCArIGFkZGl0aW9uYWxEaWdpdHMpICsgJ30pfChcXFxcZHsyfXxbKy1dXFxcXGR7JyArICgyICsgYWRkaXRpb25hbERpZ2l0cykgKyAnfSkkKScpO1xuICB2YXIgY2FwdHVyZXMgPSBkYXRlU3RyaW5nLm1hdGNoKHJlZ2V4KTsgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIHllYXJcblxuICBpZiAoIWNhcHR1cmVzKSByZXR1cm4ge1xuICAgIHllYXI6IG51bGxcbiAgfTtcbiAgdmFyIHllYXIgPSBjYXB0dXJlc1sxXSAmJiBwYXJzZUludChjYXB0dXJlc1sxXSk7XG4gIHZhciBjZW50dXJ5ID0gY2FwdHVyZXNbMl0gJiYgcGFyc2VJbnQoY2FwdHVyZXNbMl0pO1xuICByZXR1cm4ge1xuICAgIHllYXI6IGNlbnR1cnkgPT0gbnVsbCA/IHllYXIgOiBjZW50dXJ5ICogMTAwLFxuICAgIHJlc3REYXRlU3RyaW5nOiBkYXRlU3RyaW5nLnNsaWNlKChjYXB0dXJlc1sxXSB8fCBjYXB0dXJlc1syXSkubGVuZ3RoKVxuICB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZURhdGUoZGF0ZVN0cmluZywgeWVhcikge1xuICAvLyBJbnZhbGlkIElTTy1mb3JtYXR0ZWQgeWVhclxuICBpZiAoeWVhciA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gIHZhciBjYXB0dXJlcyA9IGRhdGVTdHJpbmcubWF0Y2goZGF0ZVJlZ2V4KTsgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIHN0cmluZ1xuXG4gIGlmICghY2FwdHVyZXMpIHJldHVybiBudWxsO1xuICB2YXIgaXNXZWVrRGF0ZSA9ICEhY2FwdHVyZXNbNF07XG4gIHZhciBkYXlPZlllYXIgPSBwYXJzZURhdGVVbml0KGNhcHR1cmVzWzFdKTtcbiAgdmFyIG1vbnRoID0gcGFyc2VEYXRlVW5pdChjYXB0dXJlc1syXSkgLSAxO1xuICB2YXIgZGF5ID0gcGFyc2VEYXRlVW5pdChjYXB0dXJlc1szXSk7XG4gIHZhciB3ZWVrID0gcGFyc2VEYXRlVW5pdChjYXB0dXJlc1s0XSk7XG4gIHZhciBkYXlPZldlZWsgPSBwYXJzZURhdGVVbml0KGNhcHR1cmVzWzVdKSAtIDE7XG5cbiAgaWYgKGlzV2Vla0RhdGUpIHtcbiAgICBpZiAoIXZhbGlkYXRlV2Vla0RhdGUoeWVhciwgd2VlaywgZGF5T2ZXZWVrKSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRheU9mSVNPV2Vla1llYXIoeWVhciwgd2VlaywgZGF5T2ZXZWVrKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKDApO1xuXG4gICAgaWYgKCF2YWxpZGF0ZURhdGUoeWVhciwgbW9udGgsIGRheSkgfHwgIXZhbGlkYXRlRGF5T2ZZZWFyRGF0ZSh5ZWFyLCBkYXlPZlllYXIpKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgICB9XG5cbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIsIG1vbnRoLCBNYXRoLm1heChkYXlPZlllYXIsIGRheSkpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF0ZVVuaXQodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID8gcGFyc2VJbnQodmFsdWUpIDogMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUaW1lKHRpbWVTdHJpbmcpIHtcbiAgdmFyIGNhcHR1cmVzID0gdGltZVN0cmluZy5tYXRjaCh0aW1lUmVnZXgpO1xuICBpZiAoIWNhcHR1cmVzKSByZXR1cm4gbnVsbDsgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIHRpbWVcblxuICB2YXIgaG91cnMgPSBwYXJzZVRpbWVVbml0KGNhcHR1cmVzWzFdKTtcbiAgdmFyIG1pbnV0ZXMgPSBwYXJzZVRpbWVVbml0KGNhcHR1cmVzWzJdKTtcbiAgdmFyIHNlY29uZHMgPSBwYXJzZVRpbWVVbml0KGNhcHR1cmVzWzNdKTtcblxuICBpZiAoIXZhbGlkYXRlVGltZShob3VycywgbWludXRlcywgc2Vjb25kcykpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG5cbiAgcmV0dXJuIGhvdXJzICogTUlMTElTRUNPTkRTX0lOX0hPVVIgKyBtaW51dGVzICogTUlMTElTRUNPTkRTX0lOX01JTlVURSArIHNlY29uZHMgKiAxMDAwO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRpbWVVbml0KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAmJiBwYXJzZUZsb2F0KHZhbHVlLnJlcGxhY2UoJywnLCAnLicpKSB8fCAwO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRpbWV6b25lKHRpbWV6b25lU3RyaW5nKSB7XG4gIGlmICh0aW1lem9uZVN0cmluZyA9PT0gJ1onKSByZXR1cm4gMDtcbiAgdmFyIGNhcHR1cmVzID0gdGltZXpvbmVTdHJpbmcubWF0Y2godGltZXpvbmVSZWdleCk7XG4gIGlmICghY2FwdHVyZXMpIHJldHVybiAwO1xuICB2YXIgc2lnbiA9IGNhcHR1cmVzWzFdID09PSAnKycgPyAtMSA6IDE7XG4gIHZhciBob3VycyA9IHBhcnNlSW50KGNhcHR1cmVzWzJdKTtcbiAgdmFyIG1pbnV0ZXMgPSBjYXB0dXJlc1szXSAmJiBwYXJzZUludChjYXB0dXJlc1szXSkgfHwgMDtcblxuICBpZiAoIXZhbGlkYXRlVGltZXpvbmUoaG91cnMsIG1pbnV0ZXMpKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIHJldHVybiBzaWduICogKGhvdXJzICogTUlMTElTRUNPTkRTX0lOX0hPVVIgKyBtaW51dGVzICogTUlMTElTRUNPTkRTX0lOX01JTlVURSk7XG59XG5cbmZ1bmN0aW9uIGRheU9mSVNPV2Vla1llYXIoaXNvV2Vla1llYXIsIHdlZWssIGRheSkge1xuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKDApO1xuICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGlzb1dlZWtZZWFyLCAwLCA0KTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeURheSA9IGRhdGUuZ2V0VVRDRGF5KCkgfHwgNztcbiAgdmFyIGRpZmYgPSAod2VlayAtIDEpICogNyArIGRheSArIDEgLSBmb3VydGhPZkphbnVhcnlEYXk7XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIGRpZmYpO1xuICByZXR1cm4gZGF0ZTtcbn0gLy8gVmFsaWRhdGlvbiBmdW5jdGlvbnNcbi8vIEZlYnJ1YXJ5IGlzIG51bGwgdG8gaGFuZGxlIHRoZSBsZWFwIHllYXIgKHVzaW5nIHx8KVxuXG5cbnZhciBkYXlzSW5Nb250aHMgPSBbMzEsIG51bGwsIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXTtcblxuZnVuY3Rpb24gaXNMZWFwWWVhckluZGV4KHllYXIpIHtcbiAgcmV0dXJuIHllYXIgJSA0MDAgPT09IDAgfHwgeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMDtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVEYXRlKHllYXIsIG1vbnRoLCBkYXRlKSB7XG4gIHJldHVybiBtb250aCA+PSAwICYmIG1vbnRoIDw9IDExICYmIGRhdGUgPj0gMSAmJiBkYXRlIDw9IChkYXlzSW5Nb250aHNbbW9udGhdIHx8IChpc0xlYXBZZWFySW5kZXgoeWVhcikgPyAyOSA6IDI4KSk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRGF5T2ZZZWFyRGF0ZSh5ZWFyLCBkYXlPZlllYXIpIHtcbiAgcmV0dXJuIGRheU9mWWVhciA+PSAxICYmIGRheU9mWWVhciA8PSAoaXNMZWFwWWVhckluZGV4KHllYXIpID8gMzY2IDogMzY1KTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVXZWVrRGF0ZShfeWVhciwgd2VlaywgZGF5KSB7XG4gIHJldHVybiB3ZWVrID49IDEgJiYgd2VlayA8PSA1MyAmJiBkYXkgPj0gMCAmJiBkYXkgPD0gNjtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVUaW1lKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKSB7XG4gIGlmIChob3VycyA9PT0gMjQpIHtcbiAgICByZXR1cm4gbWludXRlcyA9PT0gMCAmJiBzZWNvbmRzID09PSAwO1xuICB9XG5cbiAgcmV0dXJuIHNlY29uZHMgPj0gMCAmJiBzZWNvbmRzIDwgNjAgJiYgbWludXRlcyA+PSAwICYmIG1pbnV0ZXMgPCA2MCAmJiBob3VycyA+PSAwICYmIGhvdXJzIDwgMjU7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVGltZXpvbmUoX2hvdXJzLCBtaW51dGVzKSB7XG4gIHJldHVybiBtaW51dGVzID49IDAgJiYgbWludXRlcyA8PSA1OTtcbn0iLCJpbXBvcnQgZmV0Y2ggZnJvbSAnLi4vLi4vaGVscGVycy9mZXRjaCc7XG5pbXBvcnQgeyBwYXJzZUlTTyB9IGZyb20gJ2RhdGUtZm5zJztcblxuY29uc3QgU0VUX0hPTElEQVlTID0gJ1NFVF9IT0xJREFZUyc7XG5jb25zdCBTRVRfSE9MSURBWVNfTE9BRElORyA9ICdTRVRfSE9MSURBWVNfTE9BRElORyc7XG5cbmZ1bmN0aW9uIGxvYWRIb2xpZGF5cyhxdWVyeSkge1xuICByZXR1cm4gKGRpc3BhdGNoLCBnZXRTdG9yZSkgPT4ge1xuICAgIGNvbnN0IHsgaG9saWRheXMgfSA9IGdldFN0b3JlKCk7XG5cbiAgICBpZiAoaG9saWRheXMubGlzdCB8fCBob2xpZGF5cy5sb2FkaW5nKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgZGlzcGF0Y2goc2V0TG9hZGluZyh0cnVlKSk7XG5cbiAgICBjb25zdCB1cmwgPSAnaHR0cHM6Ly93d3cucmF0ZWhhd2suY29tL2FwaS92MS9ob2xpZGF5cyc7XG5cbiAgICByZXR1cm4gZmV0Y2godXJsKVxuICAgICAgLnRoZW4ocmVzdWx0ID0+IHJlc3VsdC5qc29uKCkpXG4gICAgICAudGhlbihwYXJzZUhvbGlkYXlzKVxuICAgICAgLnRoZW4obGlzdCA9PiBkaXNwYXRjaChzZXRIb2xpZGF5cyhsaXN0KSkpXG4gICAgICAuY2F0Y2goKCkgPT4gZGlzcGF0Y2goc2V0TG9hZGluZyhmYWxzZSkpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2V0SG9saWRheXMobGlzdCkge1xuICB3aW5kb3cubCA9IGxpc3Q7XG4gIHJldHVybiB7XG4gICAgdHlwZTogU0VUX0hPTElEQVlTLFxuICAgIGxpc3RcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2V0TG9hZGluZyhsb2FkaW5nKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogU0VUX0hPTElEQVlTX0xPQURJTkcsXG4gICAgbG9hZGluZ1xuICB9O1xufVxuXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gIGxpc3Q6IG51bGwsXG4gIGxvYWRpbmc6IGZhbHNlXG59O1xuXG5leHBvcnQgY29uc3QgY29uc3RhbnRzID0geyBTRVRfSE9MSURBWVMsIFNFVF9IT0xJREFZU19MT0FESU5HIH07XG5leHBvcnQgY29uc3QgYWN0aW9ucyA9IHsgbG9hZEhvbGlkYXlzLCBzZXRMb2FkaW5nIH07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pIHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgU0VUX0hPTElEQVlTOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGlzdDogYWN0aW9uLmxpc3QgfHwgc3RhdGUubGlzdCxcbiAgICAgICAgbG9hZGluZzogZmFsc2VcbiAgICAgIH07XG4gICAgY2FzZSBTRVRfSE9MSURBWVNfTE9BRElORzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBsb2FkaW5nOiBhY3Rpb24ubG9hZGluZ1xuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlSG9saWRheXMoZGF0YSkge1xuICBpZiAoIWRhdGEgfHwgZGF0YS5zdGF0dXMgIT09ICdPSycgfHwgIUFycmF5LmlzQXJyYXkoZGF0YS5ob2xpZGF5cykpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGxpc3QgPSBkYXRhLmhvbGlkYXlzLm1hcChwYXJzZUlTTyk7XG5cbiAgLy8gU29tZSBzb3J0IG9mIFNldC5cbiAgcmV0dXJuIGxpc3QucmVkdWNlKChhY2MsIGVsKSA9PiAoeyAuLi5hY2MsIFtlbF06IGVsIH0pKTtcbn1cbiIsImltcG9ydCBmZXRjaCBmcm9tICcuLi8uLi9oZWxwZXJzL2ZldGNoJztcblxuY29uc3QgU0VUX0NPVU5UUklFUyA9ICdTRVRfQ09VTlRSSUVTJztcbmNvbnN0IFNFVF9MT0FESU5HID0gJ1NFVF9MT0FESU5HJztcbmNvbnN0IElOQ19UUllfQ09VTlQgPSAnSU5DX1RSWV9DT1VOVCc7XG5cbmNvbnN0IFJFVFJJRVNfTElNSVQgPSAxMDtcblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgcmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RvcmUpID0+IHtcbiAgICBjb25zdCBzdG9yZSA9IGdldFN0b3JlKCk7XG5cbiAgICBpZiAoc3RvcmUuY291bnRyaWVzLmxpc3QubGVuZ3RoID4gMCB8fCBzdG9yZS5jb3VudHJpZXMubG9hZGluZykge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIGRpc3BhdGNoKHNldExvYWRpbmcodHJ1ZSkpO1xuICAgIGRpc3BhdGNoKGluY1RyeUNvdW50KCkpO1xuXG4gICAgY29uc3QgdXJsID0gJ2h0dHBzOi8vd3d3LnJhdGVoYXdrLmNvbS9hcGkvdjMvc2l0ZS9hY2NvdW50cy9jb3VudHJpZXMvJztcblxuICAgIHJldHVybiBmZXRjaCh1cmwpXG4gICAgICAudGhlbihyZXN1bHQgPT4gcmVzdWx0Lmpzb24oKSlcbiAgICAgIC50aGVuKGRhdGEgPT4gcGFyc2VDb3VudHJpZXMoZGF0YSkpXG4gICAgICAudGhlbihjb3VudHJpZXMgPT4gZGlzcGF0Y2goc2V0Q291bnRyaWVzKGNvdW50cmllcykpKVxuICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgaWYgKHN0b3JlLmNvdW50cmllcy50cnlDb3VudCA8PSBSRVRSSUVTX0xJTUlUKSB7XG4gICAgICAgICAgZGlzcGF0Y2gobG9hZCgpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNldENvdW50cmllcyhjb3VudHJpZXMpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBTRVRfQ09VTlRSSUVTLFxuICAgIGNvdW50cmllc1xuICB9O1xufVxuXG5mdW5jdGlvbiBzZXRMb2FkaW5nKGxvYWRpbmcpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBTRVRfTE9BRElORyxcbiAgICBsb2FkaW5nXG4gIH07XG59XG5cbmZ1bmN0aW9uIGluY1RyeUNvdW50KCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IElOQ19UUllfQ09VTlRcbiAgfTtcbn1cblxuY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICBsaXN0OiBbXSxcbiAgbG9hZGluZzogZmFsc2UsXG4gIHRyeUNvdW50OiAwXG59O1xuXG5leHBvcnQgY29uc3QgY29uc3RhbnRzID0geyBTRVRfQ09VTlRSSUVTIH07XG5leHBvcnQgY29uc3QgYWN0aW9ucyA9IHsgbG9hZCB9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uKSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFNFVF9DT1VOVFJJRVM6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgbGlzdDogYWN0aW9uLmNvdW50cmllcyxcbiAgICAgICAgbG9hZGluZzogZmFsc2VcbiAgICAgIH07XG4gICAgY2FzZSBTRVRfTE9BRElORzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBsb2FkaW5nOiBhY3Rpb24ubG9hZGluZ1xuICAgICAgfTtcbiAgICBjYXNlIElOQ19UUllfQ09VTlQ6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgdHJ5Q291bnQ6IHN0YXRlLnRyeUNvdW50ICsgMVxuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlQ291bnRyaWVzKGRhdGEpIHtcbiAgaWYgKCEoZGF0YSAmJiBkYXRhLmJvZHkpKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcmV0dXJuIGRhdGEuYm9keTtcbn1cbiIsImNvbnN0IFNFVF9DSVRJWkVOU0hJUCA9ICdTRVRfQ0lUSVpFTlNISVAnO1xuXG5jb25zdCBMT0NBTF9TVE9SQUdFX0tFWSA9ICdjaXRpemVuc2hpcCc7XG5cbmZ1bmN0aW9uIGdldFN0b3JlZFZhbHVlKCkge1xuICBjb25zdCBkZWZhdWx0VmFsdWUgPSB7XG4gICAgcG9wdWxhcjogW10sXG4gICAgdmFsdWU6IG51bGwsXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBzdG9yZWRWYWx1ZSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oTE9DQUxfU1RPUkFHRV9LRVkpKTtcblxuICAgIHJldHVybiBzdG9yZWRWYWx1ZSB8fCBkZWZhdWx0VmFsdWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNldENpdGl6ZW5zaGlwKGNvdW50cnkpIHtcbiAgcmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RvcmUpID0+IHtcbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBTRVRfQ0lUSVpFTlNISVAsXG4gICAgICBjb3VudHJ5LFxuICAgIH0pO1xuXG4gICAgY29uc3QgY2l0aXplbnNoaXAgPSBnZXRTdG9yZSgpLmNpdGl6ZW5zaGlwO1xuXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXG4gICAgICBMT0NBTF9TVE9SQUdFX0tFWSxcbiAgICAgIEpTT04uc3RyaW5naWZ5KGNpdGl6ZW5zaGlwKVxuICAgIClcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGFjdGlvbnMgPSB7IHNldENpdGl6ZW5zaGlwIH07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChzdGF0ZSA9IGdldFN0b3JlZFZhbHVlKCksIGFjdGlvbikge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBTRVRfQ0lUSVpFTlNISVA6XG4gICAgICByZXR1cm4gc2V0Q2l0aXplbnNoaXBIYW5kbGVyKHN0YXRlLCBhY3Rpb24uY291bnRyeSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gc2V0Q2l0aXplbnNoaXBIYW5kbGVyKHN0YXRlLCBjb3VudHJ5KSB7XG4gIGlmICghY291bnRyeSkge1xuICAgIHJldHVybiB7XG4gICAgICBwb3B1bGFyOiBzdGF0ZS5wb3B1bGFyLFxuICAgICAgdmFsdWU6IG51bGwsXG4gICAgfTtcbiAgfVxuXG4gIGlmIChzdGF0ZS5wb3B1bGFyLnNvbWUoaXRlbSA9PiBpdGVtLmNvZGUgPT09IGNvdW50cnkuY29kZSkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcG9wdWxhcjogc3RhdGUucG9wdWxhcixcbiAgICAgIHZhbHVlOiBjb3VudHJ5LFxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBvcHVsYXI6IFsuLi5zdGF0ZS5wb3B1bGFyLCBjb3VudHJ5XS5zbGljZSgtMyksXG4gICAgdmFsdWU6IGNvdW50cnksXG4gIH07XG59XG4iLCJjb25zdCBTRVRfU0VUVElOR1MgPSAnU0VUX1NFVFRJTkdTJztcblxuZnVuY3Rpb24gc2V0U2V0dGluZ3Moc2V0dGluZ3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBTRVRfU0VUVElOR1MsXG4gICAgc2V0dGluZ3MsXG4gIH07XG59XG5cbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHt9O1xuXG5leHBvcnQgY29uc3QgY29uc3RhbnRzID0geyBTRVRfU0VUVElOR1MgfTtcbmV4cG9ydCBjb25zdCBhY3Rpb25zID0geyBzZXRTZXR0aW5ncyB9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoc3RhdGUgPSBpbml0aWFsU3RhdGUsIGFjdGlvbikge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBTRVRfU0VUVElOR1M6XG4gICAgICByZXR1cm4gYWN0aW9uLnNldHRpbmdzO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG4iLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgdGhlbWUgZnJvbSAnLi90aGVtZSc7XG5pbXBvcnQgbDEwbiBmcm9tICcuL2wxMG4nO1xuaW1wb3J0IGF2aWFEZXN0aW5hdGlvbiBmcm9tICcuL2F2aWEtZGVzdGluYXRpb24nO1xuaW1wb3J0IGRlc3RpbmF0aW9uIGZyb20gJy4vZGVzdGluYXRpb24nO1xuaW1wb3J0IGhvbGlkYXlzIGZyb20gJy4vaG9saWRheXMnO1xuaW1wb3J0IGNvdW50cmllcyBmcm9tICcuL2NvdW50cmllcyc7XG5pbXBvcnQgY2l0aXplbnNoaXAgZnJvbSAnLi9jaXRpemVuc2hpcCc7XG5pbXBvcnQgc2V0dGluZ3MgZnJvbSAnLi9zZXR0aW5ncyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbWJpbmVSZWR1Y2Vycyh7XG4gIHRoZW1lLFxuICBsMTBuLFxuICBhdmlhRGVzdGluYXRpb24sXG4gIGRlc3RpbmF0aW9uLFxuICBob2xpZGF5cyxcbiAgY291bnRyaWVzLFxuICBjaXRpemVuc2hpcCxcbiAgc2V0dGluZ3MsXG59KTtcbiIsImltcG9ydCByZWR1Y2VycyBmcm9tICcuL3JlZHVjZXJzJztcbmltcG9ydCB7IGNyZWF0ZVN0b3JlLCBjb21wb3NlLCBhcHBseU1pZGRsZXdhcmUgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgdGh1bmsgZnJvbSAncmVkdXgtdGh1bmsnO1xuXG5jb25zdCBlbmhhbmNlcnMgPSBbXG4gIGFwcGx5TWlkZGxld2FyZSh0aHVuayksXG4gIHdpbmRvdyAmJiB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyAmJiB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXygpLFxuXS5maWx0ZXIoeCA9PiB4KTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3RvcmUoXG4gIHJlZHVjZXJzLFxuICBjb21wb3NlLmFwcGx5KG51bGwsIGVuaGFuY2Vycylcbik7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgc3RvcmUgZnJvbSAnLi9zdG9yZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFJlZHV4ZWQgKHsgY2hpbGRyZW4gfSkge1xuICByZXR1cm4gKFxuICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvUHJvdmlkZXI+XG4gICk7XG59O1xuIiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tICcuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qcyc7XG5pbXBvcnQgdG9EYXRlIGZyb20gJy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbi8qKlxuICogQG5hbWUgYWRkTW9udGhzXG4gKiBAY2F0ZWdvcnkgTW9udGggSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1vbnRocyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtb250aHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbW9udGhzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1vbnRocyBhZGRlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBZGQgNSBtb250aHMgdG8gMSBTZXB0ZW1iZXIgMjAxNDpcbiAqIHZhciByZXN1bHQgPSBhZGRNb250aHMobmV3IERhdGUoMjAxNCwgOCwgMSksIDUpXG4gKiAvLz0+IFN1biBGZWIgMDEgMjAxNSAwMDowMDowMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZE1vbnRocyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcblxuICBpZiAoaXNOYU4oYW1vdW50KSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG5cbiAgaWYgKCFhbW91bnQpIHtcbiAgICAvLyBJZiAwIG1vbnRocywgbm8tb3AgdG8gYXZvaWQgY2hhbmdpbmcgdGltZXMgaW4gdGhlIGhvdXIgYmVmb3JlIGVuZCBvZiBEU1RcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuXG4gIHZhciBkYXlPZk1vbnRoID0gZGF0ZS5nZXREYXRlKCk7IC8vIFRoZSBKUyBEYXRlIG9iamVjdCBzdXBwb3J0cyBkYXRlIG1hdGggYnkgYWNjZXB0aW5nIG91dC1vZi1ib3VuZHMgdmFsdWVzIGZvclxuICAvLyBtb250aCwgZGF5LCBldGMuIEZvciBleGFtcGxlLCBuZXcgRGF0ZSgyMDIwLCAxLCAwKSByZXR1cm5zIDMxIERlYyAyMDE5IGFuZFxuICAvLyBuZXcgRGF0ZSgyMDIwLCAxMywgMSkgcmV0dXJucyAxIEZlYiAyMDIxLiAgVGhpcyBpcyAqYWxtb3N0KiB0aGUgYmVoYXZpb3Igd2VcbiAgLy8gd2FudCBleGNlcHQgdGhhdCBkYXRlcyB3aWxsIHdyYXAgYXJvdW5kIHRoZSBlbmQgb2YgYSBtb250aCwgbWVhbmluZyB0aGF0XG4gIC8vIG5ldyBEYXRlKDIwMjAsIDEzLCAzMSkgd2lsbCByZXR1cm4gMyBNYXIgMjAyMSBub3QgMjggRmViIDIwMjEgYXMgZGVzaXJlZC4gU29cbiAgLy8gd2UnbGwgZGVmYXVsdCB0byB0aGUgZW5kIG9mIHRoZSBkZXNpcmVkIG1vbnRoIGJ5IGFkZGluZyAxIHRvIHRoZSBkZXNpcmVkXG4gIC8vIG1vbnRoIGFuZCB1c2luZyBhIGRhdGUgb2YgMCB0byBiYWNrIHVwIG9uZSBkYXkgdG8gdGhlIGVuZCBvZiB0aGUgZGVzaXJlZFxuICAvLyBtb250aC5cblxuICB2YXIgZW5kT2ZEZXNpcmVkTW9udGggPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSk7XG4gIGVuZE9mRGVzaXJlZE1vbnRoLnNldE1vbnRoKGRhdGUuZ2V0TW9udGgoKSArIGFtb3VudCArIDEsIDApO1xuICB2YXIgZGF5c0luTW9udGggPSBlbmRPZkRlc2lyZWRNb250aC5nZXREYXRlKCk7XG5cbiAgaWYgKGRheU9mTW9udGggPj0gZGF5c0luTW9udGgpIHtcbiAgICAvLyBJZiB3ZSdyZSBhbHJlYWR5IGF0IHRoZSBlbmQgb2YgdGhlIG1vbnRoLCB0aGVuIHRoaXMgaXMgdGhlIGNvcnJlY3QgZGF0ZVxuICAgIC8vIGFuZCB3ZSdyZSBkb25lLlxuICAgIHJldHVybiBlbmRPZkRlc2lyZWRNb250aDtcbiAgfSBlbHNlIHtcbiAgICAvLyBPdGhlcndpc2UsIHdlIG5vdyBrbm93IHRoYXQgc2V0dGluZyB0aGUgb3JpZ2luYWwgZGF5LW9mLW1vbnRoIHZhbHVlIHdvbid0XG4gICAgLy8gY2F1c2UgYW4gb3ZlcmZsb3csIHNvIHNldCB0aGUgZGVzaXJlZCBkYXktb2YtbW9udGguIE5vdGUgdGhhdCB3ZSBjYW4ndFxuICAgIC8vIGp1c3Qgc2V0IHRoZSBkYXRlIG9mIGBlbmRPZkRlc2lyZWRNb250aGAgYmVjYXVzZSB0aGF0IG9iamVjdCBtYXkgaGF2ZSBoYWRcbiAgICAvLyBpdHMgdGltZSBjaGFuZ2VkIGluIHRoZSB1bnVzdWFsIGNhc2Ugd2hlcmUgd2hlcmUgYSBEU1QgdHJhbnNpdGlvbiB3YXMgb25cbiAgICAvLyB0aGUgbGFzdCBkYXkgb2YgdGhlIG1vbnRoIGFuZCBpdHMgbG9jYWwgdGltZSB3YXMgaW4gdGhlIGhvdXIgc2tpcHBlZCBvclxuICAgIC8vIHJlcGVhdGVkIG5leHQgdG8gYSBEU1QgdHJhbnNpdGlvbi4gIFNvIHdlIHVzZSBgZGF0ZWAgaW5zdGVhZCB3aGljaCBpc1xuICAgIC8vIGd1YXJhbnRlZWQgdG8gc3RpbGwgaGF2ZSB0aGUgb3JpZ2luYWwgdGltZS5cbiAgICBkYXRlLnNldEZ1bGxZZWFyKGVuZE9mRGVzaXJlZE1vbnRoLmdldEZ1bGxZZWFyKCksIGVuZE9mRGVzaXJlZE1vbnRoLmdldE1vbnRoKCksIGRheU9mTW9udGgpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG59IiwiaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiB1c2VCb3VuZHMoXG4gIHJvb3RFbGVtZW50ID0gZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRcbikge1xuICBjb25zdCByZWYgPSB1c2VSZWYobnVsbCk7XG4gIGNvbnN0IFtib3VuZHMsIHNldEJvdW5kc10gPSB1c2VTdGF0ZSh7fSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRCb3VuZHMoZ2V0Qm91bmRzKHJlZi5jdXJyZW50LCByb290RWxlbWVudCkpO1xuICB9LCBbcmVmLmN1cnJlbnQsIC4uLmdldEJvdW5kc0FycmF5KHJlZi5jdXJyZW50LCByb290RWxlbWVudCldKTtcblxuICByZXR1cm4gW3JlZiwgYm91bmRzXTtcbn1cblxuZnVuY3Rpb24gZ2V0Qm91bmRzKG5vZGUsIHJvb3RFbGVtZW50KSB7XG4gIGlmICghbm9kZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgcmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgcmV0dXJuIHtcbiAgICB0b3A6IHJlY3QudG9wLFxuICAgIGJvdHRvbTogcmVjdC5ib3R0b20sXG4gICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgIHJpZ2h0OiByZWN0LnJpZ2h0LFxuICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHQsXG4gICAgYWJzb2x1dGVUb3A6IHJvb3RFbGVtZW50LnNjcm9sbFRvcCArIHJlY3QudG9wLFxuICAgIGFic29sdXRlQm90dG9tOiByb290RWxlbWVudC5zY3JvbGxUb3AgKyByZWN0LmJvdHRvbSxcbiAgICBhYnNvbHV0ZUxlZnQ6IHJvb3RFbGVtZW50LnNjcm9sbExlZnQgKyByZWN0LmxlZnQsXG4gICAgYWJzb2x1dGVSaWdodDogcm9vdEVsZW1lbnQuc2Nyb2xsTGVmdCArIHJlY3QucmlnaHRcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0Qm91bmRzQXJyYXkobm9kZSwgcm9vdEVsZW1lbnQpIHtcbiAgY29uc3QgYm91bmRzID0gbm9kZSA/IGdldEJvdW5kcyhub2RlLCByb290RWxlbWVudCkgOiB7fTtcblxuICBjb25zdCBrZXlzID0gW1xuICAgICd0b3AnLFxuICAgICdib3R0b20nLFxuICAgICdsZWZ0JyxcbiAgICAncmlnaHQnLFxuICAgICd3aWR0aCcsXG4gICAgJ2hlaWdodCcsXG4gICAgJ2Fic29sdXRlVG9wJyxcbiAgICAnYWJzb2x1dGVCb3R0b20nLFxuICAgICdhYnNvbHV0ZUxlZnQnLFxuICAgICdhYnNvbHV0ZVJpZ2h0J1xuICBdO1xuXG4gIHJldHVybiBrZXlzLm1hcChrZXkgPT4gYm91bmRzW2tleV0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCB1c2VCb3VuZHM7XG4iLCJpbXBvcnQgc3RvcmUgZnJvbSAnLi4vc3RvcmUnO1xuXG5jb25zdCBnZXRUaGVtZSA9IGtleSA9PiBzdG9yZS5nZXRTdGF0ZSgpLnRoZW1lW2tleV07XG5jb25zdCBnZXRTaXplID0ga2V5ID0+IHN0b3JlLmdldFN0YXRlKCkudGhlbWUuc2l6ZXNba2V5XTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0VGhlbWU7XG5leHBvcnQgeyBnZXRTaXplIH07XG4iLCJpbXBvcnQgc3RvcmUgZnJvbSAnLi4vc3RvcmUnO1xuXG5pbXBvcnQgeyBnZXRTaXplIH0gZnJvbSAnLi90aGVtZSc7XG5cbi8qIEpTIGhlbHBlcnMgKi9cbmNvbnN0IGlzTW9iaWxlID0gKCkgPT4ge1xuICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoIDw9IGdldFNpemUoJ21vYmlsZScpO1xufVxuXG5jb25zdCBpc1RhYmxldCA9ICgpID0+IHtcbiAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCA+IGdldFNpemUoJ21vYmlsZScpXG4gICAgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoIDw9IGdldFNpemUoJ3RhYmxldCcpO1xufVxuXG5jb25zdCBpc0Rlc2t0b3AgPSAoKSA9PiB7XG4gIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggPiBnZXRTaXplKCd0YWJsZXQnKVxuICAgICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCA8PSBnZXRTaXplKCdkZXNrdG9wJyk7XG59XG5cbmNvbnN0IGlzRGVza3RvcFdpZGUgPSAoKSA9PiB7XG4gIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggPiBnZXRTaXplKCdkZXNrdG9wJyk7XG59XG5cbmNvbnN0IGlzVGFibGV0VXAgPSAoKSA9PiB7XG4gIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggPiBnZXRTaXplKCdtb2JpbGUnKTtcbn1cblxuY29uc3QgaXNEZXNrdG9wVXAgPSAoKSA9PiB7XG4gIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggPiBnZXRTaXplKCd0YWJsZXQnKTtcbn1cblxuZXhwb3J0IHtcbiAgaXNNb2JpbGUsXG4gIGlzVGFibGV0LFxuICBpc0Rlc2t0b3AsXG4gIGlzRGVza3RvcFdpZGUsXG4gIGlzVGFibGV0VXAsXG4gIGlzRGVza3RvcFVwLFxufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJY29uRkMgfSBmcm9tICcuJztcblxuY29uc3QgQXJyb3dEb3duOiBJY29uRkMgPSAoe1xuICBmaWxsID0gJ2N1cnJlbnRDb2xvcicsXG4gIHdpZHRoID0gMTYsXG4gIGhlaWdodCA9IDE2LFxuICAuLi5yZXN0XG59KSA9PiAoXG4gIDxzdmcgd2lkdGg9e3dpZHRofSBoZWlnaHQ9e2hlaWdodH0gdmlld0JveD1cIjAgMCAyMCAyMFwiIGZpbGw9e2ZpbGx9IHsuLi5yZXN0fT5cbiAgICA8cGF0aFxuICAgICAgZmlsbFJ1bGU9XCJub256ZXJvXCJcbiAgICAgIGQ9XCJNMTAuOTA4IDE0LjYyM2w2LjEzOS02LjE0Yy41LS40OTkuNS0xLjMxNSAwLTEuODE1bC0uMTcyLS4xNzRhMS4yOSAxLjI5IDAgMCAwLTEuODE3IDBMMTAgMTEuNTUzbC01LjA2LTUuMDZhMS4yODggMS4yODggMCAwIDAtMS44MTQgMGwtLjE3My4xNzVjLS41LjUtLjUgMS4zMTYgMCAxLjgxNmw2LjE0IDYuMTM5YTEuMjg4IDEuMjg4IDAgMCAwIDEuODE1IDBcIlxuICAgIC8+XG4gIDwvc3ZnPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgQXJyb3dEb3duO1xuIiwiLyoqXG4gKiBIT0MgZm9yIGRldGVjdCBjbGljayBvdXRzaWRlIG9mIGNvbXBvbmVudC5cbiAqIEl0IGNhbiBiZSBtb3JlIHNpbXBsZSwgYnV0IHdpbGwgbm90IHdvcmsgd2l0aCBwb3J0YWxzLlxuICogSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2FkYXp6bGUvcmVhY3QtZGF0YS1ncmlkL2Jsb2IvMjZmNGRhZmU2OGZiZWJlZjMxMmVhN2MxNDZiNDRmMDM5ZDQ4YzFiOS9wYWNrYWdlcy9yZWFjdC1kYXRhLWdyaWQvc3JjL2NvbW1vbi9lZGl0b3JzL0NsaWNrT3V0c2lkZS50c3hcbiAqL1xuaW1wb3J0IFJlYWN0LCB7IHVzZUxheW91dEVmZmVjdCwgdXNlUmVmLCBmb3J3YXJkUmVmIH0gZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiBDbGlja091dHNpZGUoeyBvbkNsaWNrT3V0c2lkZSwgY2xhc3NOYW1lLCBjaGlsZHJlbiB9LCByZWYpIHtcbiAgLy8gY2xpY2sgaXMgYnJva2VuIG9uIGlQaG9uZVxuICBjb25zdCB0b3VjaEV2ZW50ID0gJ29udG91Y2hzdGFydCcgaW4gd2luZG93ID8gJ3RvdWNoc3RhcnQnIDogJ21vdXNlZG93bic7XG4gIGNvbnN0IHRvdWNoQ2FwdHVyZVByb3AgPSAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3dcbiAgICA/ICdvblRvdWNoU3RhcnRDYXB0dXJlJ1xuICAgIDogJ29uTW91c2VEb3duQ2FwdHVyZSc7XG5cbiAgY29uc3QgaXNDbGlja2VkSW5zaWRlID0gdXNlUmVmKGZhbHNlKTtcblxuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGZ1bmN0aW9uIGhhbmRsZURvY3VtZW50Q2xpY2soKSB7XG4gICAgICBpZiAoaXNDbGlja2VkSW5zaWRlLmN1cnJlbnQpIHtcbiAgICAgICAgaXNDbGlja2VkSW5zaWRlLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uQ2xpY2tPdXRzaWRlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50LCBoYW5kbGVEb2N1bWVudENsaWNrKTtcbiAgICByZXR1cm4gKCkgPT4gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50LCBoYW5kbGVEb2N1bWVudENsaWNrKTtcbiAgfSwgW29uQ2xpY2tPdXRzaWRlXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICByZWY9e3JlZn1cbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgey4uLnsgW3RvdWNoQ2FwdHVyZVByb3BdOiAoKSA9PiBpc0NsaWNrZWRJbnNpZGUuY3VycmVudCA9IHRydWUgfX1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZvcndhcmRSZWYoQ2xpY2tPdXRzaWRlKTtcbiIsImltcG9ydCB0b0RhdGUgZnJvbSAnLi4vdG9EYXRlL2luZGV4LmpzJztcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnO1xuLyoqXG4gKiBAbmFtZSBpc1NhbWVNb250aFxuICogQGNhdGVnb3J5IE1vbnRoIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFyZSB0aGUgZ2l2ZW4gZGF0ZXMgaW4gdGhlIHNhbWUgbW9udGg/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBcmUgdGhlIGdpdmVuIGRhdGVzIGluIHRoZSBzYW1lIG1vbnRoP1xuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZUxlZnQgLSB0aGUgZmlyc3QgZGF0ZSB0byBjaGVja1xuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVJpZ2h0IC0gdGhlIHNlY29uZCBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGVzIGFyZSBpbiB0aGUgc2FtZSBtb250aFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgMiBTZXB0ZW1iZXIgMjAxNCBhbmQgMjUgU2VwdGVtYmVyIDIwMTQgaW4gdGhlIHNhbWUgbW9udGg/XG4gKiB2YXIgcmVzdWx0ID0gaXNTYW1lTW9udGgobmV3IERhdGUoMjAxNCwgOCwgMiksIG5ldyBEYXRlKDIwMTQsIDgsIDI1KSlcbiAqIC8vPT4gdHJ1ZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzU2FtZU1vbnRoKGRpcnR5RGF0ZUxlZnQsIGRpcnR5RGF0ZVJpZ2h0KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZUxlZnQgPSB0b0RhdGUoZGlydHlEYXRlTGVmdCk7XG4gIHZhciBkYXRlUmlnaHQgPSB0b0RhdGUoZGlydHlEYXRlUmlnaHQpO1xuICByZXR1cm4gZGF0ZUxlZnQuZ2V0RnVsbFllYXIoKSA9PT0gZGF0ZVJpZ2h0LmdldEZ1bGxZZWFyKCkgJiYgZGF0ZUxlZnQuZ2V0TW9udGgoKSA9PT0gZGF0ZVJpZ2h0LmdldE1vbnRoKCk7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tICcuLi90b0RhdGUvaW5kZXguanMnO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tICcuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyc7XG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZNb250aFxuICogQGNhdGVnb3J5IE1vbnRoIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSBtb250aCBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgbW9udGggZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHJldHVybnMge0RhdGV9IHRoZSBzdGFydCBvZiBhIG1vbnRoXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgbW9udGggZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiB2YXIgcmVzdWx0ID0gc3RhcnRPZk1vbnRoKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCkpXG4gKiAvLz0+IE1vbiBTZXAgMDEgMjAxNCAwMDowMDowMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZNb250aChkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIGRhdGUuc2V0RGF0ZSgxKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHN0YXJ0T2ZNb250aCwgZGlmZmVyZW5jZUluQ2FsZW5kYXJNb250aHMsIGFkZE1vbnRocyB9IGZyb20gJ2RhdGUtZm5zJztcblxuZXhwb3J0IGNvbnN0IGdldE1vbnRocyA9IChmcm9tOiBEYXRlLCB0bzogRGF0ZSkgPT5cbiAgdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgbW9udGhzID0gW107XG4gICAgY29uc3QgZmlyc3RNb250aCA9IHN0YXJ0T2ZNb250aChmcm9tKTtcbiAgICBjb25zdCBtb250aHNDb3VudCA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzKHRvLCBmcm9tKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IG1vbnRoc0NvdW50OyBpKyspIHtcbiAgICAgIG1vbnRocy5wdXNoKGFkZE1vbnRocyhmaXJzdE1vbnRoLCBpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vbnRocztcbiAgfSwgW2Zyb20sIHRvXSk7XG4iLCJpbXBvcnQgdG9EYXRlIGZyb20gJy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbi8qKlxuICogQG5hbWUgZGlmZmVyZW5jZUluQ2FsZW5kYXJNb250aHNcbiAqIEBjYXRlZ29yeSBNb250aCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIG51bWJlciBvZiBjYWxlbmRhciBtb250aHMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBjYWxlbmRhciBtb250aHMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBsYXRlciBkYXRlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgZWFybGllciBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIG1vbnRoc1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBIb3cgbWFueSBjYWxlbmRhciBtb250aHMgYXJlIGJldHdlZW4gMzEgSmFudWFyeSAyMDE0IGFuZCAxIFNlcHRlbWJlciAyMDE0P1xuICogdmFyIHJlc3VsdCA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzKFxuICogICBuZXcgRGF0ZSgyMDE0LCA4LCAxKSxcbiAqICAgbmV3IERhdGUoMjAxNCwgMCwgMzEpXG4gKiApXG4gKiAvLz0+IDhcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRocyhkaXJ0eURhdGVMZWZ0LCBkaXJ0eURhdGVSaWdodCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGVMZWZ0ID0gdG9EYXRlKGRpcnR5RGF0ZUxlZnQpO1xuICB2YXIgZGF0ZVJpZ2h0ID0gdG9EYXRlKGRpcnR5RGF0ZVJpZ2h0KTtcbiAgdmFyIHllYXJEaWZmID0gZGF0ZUxlZnQuZ2V0RnVsbFllYXIoKSAtIGRhdGVSaWdodC5nZXRGdWxsWWVhcigpO1xuICB2YXIgbW9udGhEaWZmID0gZGF0ZUxlZnQuZ2V0TW9udGgoKSAtIGRhdGVSaWdodC5nZXRNb250aCgpO1xuICByZXR1cm4geWVhckRpZmYgKiAxMiArIG1vbnRoRGlmZjtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gJy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbi8qKlxuICogQG5hbWUgZ2V0TW9udGhcbiAqIEBjYXRlZ29yeSBNb250aCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIG1vbnRoIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBtb250aCBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZ2l2ZW4gZGF0ZVxuICogQHJldHVybnMge051bWJlcn0gdGhlIG1vbnRoXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggbW9udGggaXMgMjkgRmVicnVhcnkgMjAxMj9cbiAqIHZhciByZXN1bHQgPSBnZXRNb250aChuZXcgRGF0ZSgyMDEyLCAxLCAyOSkpXG4gKiAvLz0+IDFcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRNb250aChkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBtb250aCA9IGRhdGUuZ2V0TW9udGgoKTtcbiAgcmV0dXJuIG1vbnRoO1xufSIsImltcG9ydCB7IGRlZmluZU1lc3NhZ2VzLCBNZXNzYWdlRGVzY3JpcHRvciB9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IHsgZ2V0TW9udGggfSBmcm9tICdkYXRlLWZucyc7XG5cbmNvbnN0IG1vbnRoTmFtZU1lc3NhZ2UgPSBkZWZpbmVNZXNzYWdlcyh7XG4gIGphbnVhcnk6IHtcbiAgICBpZDogJ2phbnVhcnknLFxuICAgIGRlZmF1bHRNZXNzYWdlOiAn0K/QvdCy0LDRgNGMJyxcbiAgfSxcbiAgZmVicnVhcnk6IHtcbiAgICBpZDogJ2ZlYnJ1YXJ5JyxcbiAgICBkZWZhdWx0TWVzc2FnZTogJ9Ck0LXQstGA0LDQu9GMJyxcbiAgfSxcbiAgbWFyY2g6IHtcbiAgICBpZDogJ21hcmNoJyxcbiAgICBkZWZhdWx0TWVzc2FnZTogJ9Cc0LDRgNGCJyxcbiAgfSxcbiAgYXByaWw6IHtcbiAgICBpZDogJ2FwcmlsJyxcbiAgICBkZWZhdWx0TWVzc2FnZTogJ9CQ0L/RgNC10LvRjCcsXG4gIH0sXG4gIG1heToge1xuICAgIGlkOiAnbWF5JyxcbiAgICBkZWZhdWx0TWVzc2FnZTogJ9Cc0LDQuScsXG4gIH0sXG4gIGp1bmU6IHtcbiAgICBpZDogJ2p1bmUnLFxuICAgIGRlZmF1bHRNZXNzYWdlOiAn0JjRjtC90YwnLFxuICB9LFxuICBqdWx5OiB7XG4gICAgaWQ6ICdqdWx5JyxcbiAgICBkZWZhdWx0TWVzc2FnZTogJ9CY0Y7Qu9GMJyxcbiAgfSxcbiAgYXVndXN0OiB7XG4gICAgaWQ6ICdhdWd1c3QnLFxuICAgIGRlZmF1bHRNZXNzYWdlOiAn0JDQstCz0YPRgdGCJyxcbiAgfSxcbiAgc2VwdGVtYmVyOiB7XG4gICAgaWQ6ICdzZXB0ZW1iZXInLFxuICAgIGRlZmF1bHRNZXNzYWdlOiAn0KHQtdC90YLRj9Cx0YDRjCcsXG4gIH0sXG4gIG9jdG9iZXI6IHtcbiAgICBpZDogJ29jdG9iZXInLFxuICAgIGRlZmF1bHRNZXNzYWdlOiAn0J7QutGC0Y/QsdGA0YwnLFxuICB9LFxuICBub3ZlbWJlcjoge1xuICAgIGlkOiAnbm92ZW1iZXInLFxuICAgIGRlZmF1bHRNZXNzYWdlOiAn0J3QvtGP0LHRgNGMJyxcbiAgfSxcbiAgZGVjZW1iZXI6IHtcbiAgICBpZDogJ2RlY2VtYmVyJyxcbiAgICBkZWZhdWx0TWVzc2FnZTogJ9CU0LXQutCw0LHRgNGMJyxcbiAgfSxcbn0pO1xuXG5jb25zdCBNT05USF9OQU1FX01FU1NBR0VTID0gW1xuICBtb250aE5hbWVNZXNzYWdlLmphbnVhcnksXG4gIG1vbnRoTmFtZU1lc3NhZ2UuZmVicnVhcnksXG4gIG1vbnRoTmFtZU1lc3NhZ2UubWFyY2gsXG4gIG1vbnRoTmFtZU1lc3NhZ2UuYXByaWwsXG4gIG1vbnRoTmFtZU1lc3NhZ2UubWF5LFxuICBtb250aE5hbWVNZXNzYWdlLmp1bmUsXG4gIG1vbnRoTmFtZU1lc3NhZ2UuanVseSxcbiAgbW9udGhOYW1lTWVzc2FnZS5hdWd1c3QsXG4gIG1vbnRoTmFtZU1lc3NhZ2Uuc2VwdGVtYmVyLFxuICBtb250aE5hbWVNZXNzYWdlLm9jdG9iZXIsXG4gIG1vbnRoTmFtZU1lc3NhZ2Uubm92ZW1iZXIsXG4gIG1vbnRoTmFtZU1lc3NhZ2UuZGVjZW1iZXIsXG5dO1xuXG5jb25zdCBnZXRNb250aE5hbWVNZXNzYWdlID0gKG1vbnRoOiBEYXRlKTogTWVzc2FnZURlc2NyaXB0b3IgPT4ge1xuICByZXR1cm4gTU9OVEhfTkFNRV9NRVNTQUdFU1tnZXRNb250aChtb250aCldO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0TW9udGhOYW1lTWVzc2FnZTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgdXNlSW50bCB9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IGNzc21lbSBmcm9tICdjc3NtZW0nO1xuXG5pbXBvcnQgeyBMMTBuU3RhdGUgfSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9sMTBuJztcblxuaW1wb3J0IGdldE1vbnRoTmFtZU1lc3NhZ2UgZnJvbSAnLi4vLi4vaGVscGVycy9nZXRNb250aE5hbWVNZXNzYWdlJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL01vbnRoLmNzcyc7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIG1vbnRoOiBEYXRlO1xuICBtb250aEluZGV4OiBudW1iZXI7XG4gIGxvY2FsZT86IHN0cmluZztcbiAgc2hvdWxkU2hvd1llYXI/OiBib29sZWFuO1xuICBzY3JvbGxUb01vbnRoOiAobW9udGhJbmRleDogbnVtYmVyKSA9PiB2b2lkO1xufVxuXG5jb25zdCBNb250aCA9ICh7XG4gIG1vbnRoLFxuICBtb250aEluZGV4LFxuICBsb2NhbGUsXG4gIHNob3VsZFNob3dZZWFyLFxuICBzY3JvbGxUb01vbnRoLFxufTogUHJvcHMpID0+IHtcbiAgY29uc3QgaW50bCA9IHVzZUludGwoKTtcblxuICBjb25zdCB0aXRsZSA9IGludGwuZm9ybWF0TWVzc2FnZShnZXRNb250aE5hbWVNZXNzYWdlKG1vbnRoKSk7XG4gIGNvbnN0IHllYXIgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUsIHsgeWVhcjogJ251bWVyaWMnIH0pLmZvcm1hdChcbiAgICBtb250aFxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtlbSgnd3JhcHBlcicpKCl9XG4gICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgIHRhYkluZGV4PXswfVxuICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICBzY3JvbGxUb01vbnRoKG1vbnRoSW5kZXgpO1xuICAgICAgfX1cbiAgICA+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ3RpdGxlJykoKX0+e3RpdGxlfTwvZGl2PlxuICAgICAge3Nob3VsZFNob3dZZWFyICYmIDxkaXYgY2xhc3NOYW1lPXtlbSgneWVhcicpKCl9Pnt5ZWFyfTwvZGl2Pn1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKShNb250aCk7XG5cbmludGVyZmFjZSBMMTBuU3RhdGVUb1Byb3BzIHtcbiAgbDEwbjogTDEwblN0YXRlO1xufVxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoeyBsMTBuIH06IEwxMG5TdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuIHsgbG9jYWxlOiBsMTBuLmxvY2FsZSB9O1xufVxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVJlZiwgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNzc21lbSBmcm9tICdjc3NtZW0nO1xuaW1wb3J0IHsgZ2V0TW9udGggfSBmcm9tICdkYXRlLWZucyc7XG5cbmltcG9ydCBNb250aCBmcm9tICcuL01vbnRoJztcblxuaW1wb3J0IHsgZ2V0TW9udGhzIH0gZnJvbSAnLi4vaGVscGVycyc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9Nb250aHNMaXN0LmNzcyc7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGZyb206IERhdGU7XG4gIHRvOiBEYXRlO1xuICBzY3JvbGxWaWV3OiB7IGhlaWdodDogbnVtYmVyOyB0b3A6IG51bWJlciB9O1xuICBzY3JvbGxUb01vbnRoOiAobW9udGhJbmRleDogbnVtYmVyKSA9PiB2b2lkO1xuICBzaG91bGRTY3JvbGxSZWY6IFJlYWN0Lk11dGFibGVSZWZPYmplY3Q8Ym9vbGVhbj47XG59XG5cbmNvbnN0IE1vbnRoc0xpc3Q6IFJlYWN0LkZDPFByb3BzPiA9ICh7XG4gIGZyb20sXG4gIHRvLFxuICBzY3JvbGxWaWV3LFxuICBzY3JvbGxUb01vbnRoLFxuICBzaG91bGRTY3JvbGxSZWYsXG59KSA9PiB7XG4gIGNvbnN0IG1vbnRocyA9IGdldE1vbnRocyhmcm9tLCB0byk7XG5cbiAgY29uc3QgdW5kZXJsYXlTdHlsZSA9IHtcbiAgICB0b3A6IGAke3Njcm9sbFZpZXcudG9wfSVgLFxuICAgIGhlaWdodDogYCR7c2Nyb2xsVmlldy5oZWlnaHR9JWAsXG4gIH07XG4gIGNvbnN0IHVuZGVybGF5UmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50IHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IHdyYXBwZXJSZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQgfCBudWxsPihudWxsKTtcblxuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghc2hvdWxkU2Nyb2xsUmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodW5kZXJsYXlSZWYuY3VycmVudCAmJiB3cmFwcGVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIGNvbnN0IHVuZGVybGF5ID0gdW5kZXJsYXlSZWYuY3VycmVudDtcbiAgICAgIGNvbnN0IHVuZGVybGF5VG9wID0gdW5kZXJsYXkub2Zmc2V0VG9wO1xuICAgICAgY29uc3QgdW5kZXJsYXlCb3R0b20gPSB1bmRlcmxheVRvcCArIHVuZGVybGF5LmNsaWVudEhlaWdodDtcblxuICAgICAgY29uc3Qgd3JhcHBlciA9IHdyYXBwZXJSZWYuY3VycmVudDtcbiAgICAgIGNvbnN0IHdyYXBwZXJUb3AgPSB3cmFwcGVyLnNjcm9sbFRvcDtcbiAgICAgIGNvbnN0IHdyYXBwZXJCb3R0b20gPSB3cmFwcGVyVG9wICsgd3JhcHBlci5jbGllbnRIZWlnaHQ7XG5cbiAgICAgIGNvbnN0IGlzVW5kZXJsYXlBYm92ZSA9IHVuZGVybGF5VG9wIDwgd3JhcHBlclRvcDtcbiAgICAgIGNvbnN0IGlzVW5kZXJsYXlCZWxvdyA9IHVuZGVybGF5Qm90dG9tID4gd3JhcHBlckJvdHRvbTtcblxuICAgICAgaWYgKGlzVW5kZXJsYXlCZWxvdykge1xuICAgICAgICB3cmFwcGVyUmVmLmN1cnJlbnQuc2Nyb2xsVG9wID0gdW5kZXJsYXlCb3R0b20gLSB3cmFwcGVyLmNsaWVudEhlaWdodDtcbiAgICAgIH0gZWxzZSBpZiAoaXNVbmRlcmxheUFib3ZlKSB7XG4gICAgICAgIHdyYXBwZXJSZWYuY3VycmVudC5zY3JvbGxUb3AgPSB1bmRlcmxheVRvcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFt1bmRlcmxheVN0eWxlLnRvcCwgdW5kZXJsYXlTdHlsZS5oZWlnaHRdKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnd3JhcHBlcicpKCl9IHJlZj17d3JhcHBlclJlZn0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ3Njcm9sbGVyJykoKX0+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9e2VtKCd1bmRlcmxheScpKCl9XG4gICAgICAgICAgc3R5bGU9e3VuZGVybGF5U3R5bGV9XG4gICAgICAgICAgcmVmPXt1bmRlcmxheVJlZn1cbiAgICAgICAgLz5cbiAgICAgICAge21vbnRocy5tYXAoKG1vbnRoLCBpKSA9PiB7XG4gICAgICAgICAgY29uc3QgaXNKYW51YXJ5ID0gZ2V0TW9udGgobW9udGgpID09PSAwO1xuICAgICAgICAgIGNvbnN0IGlzRmlyc3RNb250aCA9IGkgPT09IDA7XG4gICAgICAgICAgY29uc3Qgc2hvdWxkU2hvd1llYXIgPSBpc0ZpcnN0TW9udGggfHwgaXNKYW51YXJ5O1xuXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxNb250aFxuICAgICAgICAgICAgICBtb250aD17bW9udGh9XG4gICAgICAgICAgICAgIG1vbnRoSW5kZXg9e2l9XG4gICAgICAgICAgICAgIHNob3VsZFNob3dZZWFyPXtzaG91bGRTaG93WWVhcn1cbiAgICAgICAgICAgICAgc2Nyb2xsVG9Nb250aD17c2Nyb2xsVG9Nb250aH1cbiAgICAgICAgICAgICAga2V5PXttb250aC50b1N0cmluZygpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApO1xuICAgICAgICB9KX1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTW9udGhzTGlzdDtcbiIsImltcG9ydCB0b0RhdGUgZnJvbSAnLi4vdG9EYXRlL2luZGV4LmpzJztcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnO1xuLyoqXG4gKiBAbmFtZSBlbmRPZkRheVxuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIGVuZCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGVuZCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIGVuZCBvZiBhIGRheVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBlbmQgb2YgYSBkYXkgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiB2YXIgcmVzdWx0ID0gZW5kT2ZEYXkobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gVHVlIFNlcCAwMiAyMDE0IDIzOjU5OjU5Ljk5OVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVuZE9mRGF5KGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgZGF0ZS5zZXRIb3VycygyMywgNTksIDU5LCA5OTkpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gJy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbi8qKlxuICogQG5hbWUgaXNXaXRoaW5JbnRlcnZhbFxuICogQGNhdGVnb3J5IEludGVydmFsIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIHdpdGhpbiB0aGUgaW50ZXJ2YWw/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJcyB0aGUgZ2l2ZW4gZGF0ZSB3aXRoaW4gdGhlIGludGVydmFsPyAoSW5jbHVkaW5nIHN0YXJ0IGFuZCBlbmQuKVxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogLSBUaGUgZnVuY3Rpb24gd2FzIHJlbmFtZWQgZnJvbSBgaXNXaXRoaW5SYW5nZWAgdG8gYGlzV2l0aGluSW50ZXJ2YWxgLlxuICogICBUaGlzIGNoYW5nZSB3YXMgbWFkZSB0byBtaXJyb3IgdGhlIHVzZSBvZiB0aGUgd29yZCBcImludGVydmFsXCIgaW4gc3RhbmRhcmQgSVNPIDg2MDE6MjAwNCB0ZXJtaW5vbG9neTpcbiAqXG4gKiAgIGBgYFxuICogICAyLjEuM1xuICogICB0aW1lIGludGVydmFsXG4gKiAgIHBhcnQgb2YgdGhlIHRpbWUgYXhpcyBsaW1pdGVkIGJ5IHR3byBpbnN0YW50c1xuICogICBgYGBcbiAqXG4gKiAgIEFsc28sIHRoaXMgZnVuY3Rpb24gbm93IGFjY2VwdHMgYW4gb2JqZWN0IHdpdGggYHN0YXJ0YCBhbmQgYGVuZGAgcHJvcGVydGllc1xuICogICBpbnN0ZWFkIG9mIHR3byBhcmd1bWVudHMgYXMgYW4gaW50ZXJ2YWwuXG4gKiAgIFRoaXMgZnVuY3Rpb24gbm93IHRocm93cyBgUmFuZ2VFcnJvcmAgaWYgdGhlIHN0YXJ0IG9mIHRoZSBpbnRlcnZhbCBpcyBhZnRlciBpdHMgZW5kXG4gKiAgIG9yIGlmIGFueSBkYXRlIGluIHRoZSBpbnRlcnZhbCBpcyBgSW52YWxpZCBEYXRlYC5cbiAqXG4gKiAgIGBgYGphdmFzY3JpcHRcbiAqICAgLy8gQmVmb3JlIHYyLjAuMFxuICpcbiAqICAgaXNXaXRoaW5SYW5nZShcbiAqICAgICBuZXcgRGF0ZSgyMDE0LCAwLCAzKSxcbiAqICAgICBuZXcgRGF0ZSgyMDE0LCAwLCAxKSwgbmV3IERhdGUoMjAxNCwgMCwgNylcbiAqICAgKVxuICpcbiAqICAgLy8gdjIuMC4wIG9ud2FyZFxuICpcbiAqICAgaXNXaXRoaW5JbnRlcnZhbChcbiAqICAgICBuZXcgRGF0ZSgyMDE0LCAwLCAzKSxcbiAqICAgICB7IHN0YXJ0OiBuZXcgRGF0ZSgyMDE0LCAwLCAxKSwgZW5kOiBuZXcgRGF0ZSgyMDE0LCAwLCA3KSB9XG4gKiAgIClcbiAqICAgYGBgXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGNoZWNrXG4gKiBAcGFyYW0ge0ludGVydmFsfSBpbnRlcnZhbCAtIHRoZSBpbnRlcnZhbCB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlIGlzIHdpdGhpbiB0aGUgaW50ZXJ2YWxcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IFRoZSBzdGFydCBvZiBhbiBpbnRlcnZhbCBjYW5ub3QgYmUgYWZ0ZXIgaXRzIGVuZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gRGF0ZSBpbiBpbnRlcnZhbCBjYW5ub3QgYmUgYEludmFsaWQgRGF0ZWBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSBkYXRlIHdpdGhpbiB0aGUgaW50ZXJ2YWw6XG4gKiBpc1dpdGhpbkludGVydmFsKG5ldyBEYXRlKDIwMTQsIDAsIDMpLCB7XG4gKiAgIHN0YXJ0OiBuZXcgRGF0ZSgyMDE0LCAwLCAxKSxcbiAqICAgZW5kOiBuZXcgRGF0ZSgyMDE0LCAwLCA3KVxuICogfSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIGRhdGUgb3V0c2lkZSBvZiB0aGUgaW50ZXJ2YWw6XG4gKiBpc1dpdGhpbkludGVydmFsKG5ldyBEYXRlKDIwMTQsIDAsIDEwKSwge1xuICogICBzdGFydDogbmV3IERhdGUoMjAxNCwgMCwgMSksXG4gKiAgIGVuZDogbmV3IERhdGUoMjAxNCwgMCwgNylcbiAqIH0pXG4gKiAvLz0+IGZhbHNlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBkYXRlIGVxdWFsIHRvIGludGVydmFsIHN0YXJ0OlxuICogaXNXaXRoaW5JbnRlcnZhbChkYXRlLCB7IHN0YXJ0LCBlbmQ6IGRhdGUgfSkgLy8gPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgZGF0ZSBlcXVhbCB0byBpbnRlcnZhbCBlbmQ6XG4gKiBpc1dpdGhpbkludGVydmFsKGRhdGUsIHsgc3RhcnQ6IGRhdGUsIGVuZCB9KSAvLyA9PiB0cnVlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNXaXRoaW5JbnRlcnZhbChkaXJ0eURhdGUsIGRpcnR5SW50ZXJ2YWwpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBpbnRlcnZhbCA9IGRpcnR5SW50ZXJ2YWwgfHwge307XG4gIHZhciB0aW1lID0gdG9EYXRlKGRpcnR5RGF0ZSkuZ2V0VGltZSgpO1xuICB2YXIgc3RhcnRUaW1lID0gdG9EYXRlKGludGVydmFsLnN0YXJ0KS5nZXRUaW1lKCk7XG4gIHZhciBlbmRUaW1lID0gdG9EYXRlKGludGVydmFsLmVuZCkuZ2V0VGltZSgpOyAvLyBUaHJvdyBhbiBleGNlcHRpb24gaWYgc3RhcnQgZGF0ZSBpcyBhZnRlciBlbmQgZGF0ZSBvciBpZiBhbnkgZGF0ZSBpcyBgSW52YWxpZCBEYXRlYFxuXG4gIGlmICghKHN0YXJ0VGltZSA8PSBlbmRUaW1lKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIGludGVydmFsJyk7XG4gIH1cblxuICByZXR1cm4gdGltZSA+PSBzdGFydFRpbWUgJiYgdGltZSA8PSBlbmRUaW1lO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSAnLi4vdG9EYXRlL2luZGV4LmpzJztcbmltcG9ydCB0b0ludGVnZXIgZnJvbSAnLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanMnO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tICcuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyc7XG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZXZWVrXG4gKiBAY2F0ZWdvcnkgV2VlayBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgd2VlayBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgd2VlayBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgc3RhcnQgb2YgYSB3ZWVrXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgd2VlayBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIHZhciByZXN1bHQgPSBzdGFydE9mV2VlayhuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBTdW4gQXVnIDMxIDIwMTQgMDA6MDA6MDBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSWYgdGhlIHdlZWsgc3RhcnRzIG9uIE1vbmRheSwgdGhlIHN0YXJ0IG9mIHRoZSB3ZWVrIGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogdmFyIHJlc3VsdCA9IHN0YXJ0T2ZXZWVrKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCksIHsgd2Vla1N0YXJ0c09uOiAxIH0pXG4gKiAvLz0+IE1vbiBTZXAgMDEgMjAxNCAwMDowMDowMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZXZWVrKGRpcnR5RGF0ZSwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlO1xuICB2YXIgbG9jYWxlV2Vla1N0YXJ0c09uID0gbG9jYWxlICYmIGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLndlZWtTdGFydHNPbjtcbiAgdmFyIGRlZmF1bHRXZWVrU3RhcnRzT24gPSBsb2NhbGVXZWVrU3RhcnRzT24gPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIobG9jYWxlV2Vla1N0YXJ0c09uKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IG9wdGlvbnMud2Vla1N0YXJ0c09uID09IG51bGwgPyBkZWZhdWx0V2Vla1N0YXJ0c09uIDogdG9JbnRlZ2VyKG9wdGlvbnMud2Vla1N0YXJ0c09uKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXREYXkoKTtcbiAgdmFyIGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uO1xuICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSBkaWZmKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tICcuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qcyc7XG5pbXBvcnQgYWRkRGF5cyBmcm9tICcuLi9hZGREYXlzL2luZGV4LmpzJztcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnO1xuLyoqXG4gKiBAbmFtZSBhZGRXZWVrc1xuICogQGNhdGVnb3J5IFdlZWsgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIHdlZWtzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIHdlZWsgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2Ygd2Vla3MgdG8gYmUgYWRkZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgd2Vla3MgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDQgd2Vla3MgdG8gMSBTZXB0ZW1iZXIgMjAxNDpcbiAqIHZhciByZXN1bHQgPSBhZGRXZWVrcyhuZXcgRGF0ZSgyMDE0LCA4LCAxKSwgNClcbiAqIC8vPT4gTW9uIFNlcCAyOSAyMDE0IDAwOjAwOjAwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkV2Vla3MoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHZhciBkYXlzID0gYW1vdW50ICogNztcbiAgcmV0dXJuIGFkZERheXMoZGlydHlEYXRlLCBkYXlzKTtcbn0iLCJpbXBvcnQgc3RhcnRPZkRheSBmcm9tICcuLi9zdGFydE9mRGF5L2luZGV4LmpzJztcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnO1xuLyoqXG4gKiBAbmFtZSBpc1NhbWVEYXlcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgQXJlIHRoZSBnaXZlbiBkYXRlcyBpbiB0aGUgc2FtZSBkYXk/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBcmUgdGhlIGdpdmVuIGRhdGVzIGluIHRoZSBzYW1lIGRheT9cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVMZWZ0IC0gdGhlIGZpcnN0IGRhdGUgdG8gY2hlY2tcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVSaWdodCAtIHRoZSBzZWNvbmQgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlcyBhcmUgaW4gdGhlIHNhbWUgZGF5XG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFyZSA0IFNlcHRlbWJlciAwNjowMDowMCBhbmQgNCBTZXB0ZW1iZXIgMTg6MDA6MDAgaW4gdGhlIHNhbWUgZGF5P1xuICogdmFyIHJlc3VsdCA9IGlzU2FtZURheShuZXcgRGF0ZSgyMDE0LCA4LCA0LCA2LCAwKSwgbmV3IERhdGUoMjAxNCwgOCwgNCwgMTgsIDApKVxuICogLy89PiB0cnVlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNTYW1lRGF5KGRpcnR5RGF0ZUxlZnQsIGRpcnR5RGF0ZVJpZ2h0KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZUxlZnRTdGFydE9mRGF5ID0gc3RhcnRPZkRheShkaXJ0eURhdGVMZWZ0KTtcbiAgdmFyIGRhdGVSaWdodFN0YXJ0T2ZEYXkgPSBzdGFydE9mRGF5KGRpcnR5RGF0ZVJpZ2h0KTtcbiAgcmV0dXJuIGRhdGVMZWZ0U3RhcnRPZkRheS5nZXRUaW1lKCkgPT09IGRhdGVSaWdodFN0YXJ0T2ZEYXkuZ2V0VGltZSgpO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSAnLi4vdG9EYXRlL2luZGV4LmpzJztcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnO1xuLyoqXG4gKiBAbmFtZSBhcmVJbnRlcnZhbHNPdmVybGFwcGluZ1xuICogQGNhdGVnb3J5IEludGVydmFsIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiB0aW1lIGludGVydmFsIG92ZXJsYXBwaW5nIHdpdGggYW5vdGhlciB0aW1lIGludGVydmFsP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSXMgdGhlIGdpdmVuIHRpbWUgaW50ZXJ2YWwgb3ZlcmxhcHBpbmcgd2l0aCBhbm90aGVyIHRpbWUgaW50ZXJ2YWw/IEFkamFjZW50IGludGVydmFscyBkbyBub3QgY291bnQgYXMgb3ZlcmxhcHBpbmcuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiAtIFRoZSBmdW5jdGlvbiB3YXMgcmVuYW1lZCBmcm9tIGBhcmVSYW5nZXNPdmVybGFwcGluZ2AgdG8gYGFyZUludGVydmFsc092ZXJsYXBwaW5nYC5cbiAqICAgVGhpcyBjaGFuZ2Ugd2FzIG1hZGUgdG8gbWlycm9yIHRoZSB1c2Ugb2YgdGhlIHdvcmQgXCJpbnRlcnZhbFwiIGluIHN0YW5kYXJkIElTTyA4NjAxOjIwMDQgdGVybWlub2xvZ3k6XG4gKlxuICogICBgYGBcbiAqICAgMi4xLjNcbiAqICAgdGltZSBpbnRlcnZhbFxuICogICBwYXJ0IG9mIHRoZSB0aW1lIGF4aXMgbGltaXRlZCBieSB0d28gaW5zdGFudHNcbiAqICAgYGBgXG4gKlxuICogICBBbHNvLCB0aGlzIGZ1bmN0aW9uIG5vdyBhY2NlcHRzIGFuIG9iamVjdCB3aXRoIGBzdGFydGAgYW5kIGBlbmRgIHByb3BlcnRpZXNcbiAqICAgaW5zdGVhZCBvZiB0d28gYXJndW1lbnRzIGFzIGFuIGludGVydmFsLlxuICogICBUaGlzIGZ1bmN0aW9uIG5vdyB0aHJvd3MgYFJhbmdlRXJyb3JgIGlmIHRoZSBzdGFydCBvZiB0aGUgaW50ZXJ2YWwgaXMgYWZ0ZXIgaXRzIGVuZFxuICogICBvciBpZiBhbnkgZGF0ZSBpbiB0aGUgaW50ZXJ2YWwgaXMgYEludmFsaWQgRGF0ZWAuXG4gKlxuICogICBgYGBqYXZhc2NyaXB0XG4gKiAgIC8vIEJlZm9yZSB2Mi4wLjBcbiAqXG4gKiAgIGFyZVJhbmdlc092ZXJsYXBwaW5nKFxuICogICAgIG5ldyBEYXRlKDIwMTQsIDAsIDEwKSwgbmV3IERhdGUoMjAxNCwgMCwgMjApLFxuICogICAgIG5ldyBEYXRlKDIwMTQsIDAsIDE3KSwgbmV3IERhdGUoMjAxNCwgMCwgMjEpXG4gKiAgIClcbiAqXG4gKiAgIC8vIHYyLjAuMCBvbndhcmRcbiAqXG4gKiAgIGFyZUludGVydmFsc092ZXJsYXBwaW5nKFxuICogICAgIHsgc3RhcnQ6IG5ldyBEYXRlKDIwMTQsIDAsIDEwKSwgZW5kOiBuZXcgRGF0ZSgyMDE0LCAwLCAyMCkgfSxcbiAqICAgICB7IHN0YXJ0OiBuZXcgRGF0ZSgyMDE0LCAwLCAxNyksIGVuZDogbmV3IERhdGUoMjAxNCwgMCwgMjEpIH1cbiAqICAgKVxuICogICBgYGBcbiAqXG4gKiBAcGFyYW0ge0ludGVydmFsfSBpbnRlcnZhbExlZnQgLSB0aGUgZmlyc3QgaW50ZXJ2YWwgdG8gY29tcGFyZS4gU2VlIFtJbnRlcnZhbF17QGxpbmsgZG9jcy90eXBlcy9JbnRlcnZhbH1cbiAqIEBwYXJhbSB7SW50ZXJ2YWx9IGludGVydmFsUmlnaHQgLSB0aGUgc2Vjb25kIGludGVydmFsIHRvIGNvbXBhcmUuIFNlZSBbSW50ZXJ2YWxde0BsaW5rIGRvY3MvdHlwZXMvSW50ZXJ2YWx9XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gdGhlIG9iamVjdCB3aXRoIG9wdGlvbnNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuaW5jbHVzaXZlPWZhbHNlXSAtIHdoZXRoZXIgdGhlIGNvbXBhcmlzb24gaXMgaW5jbHVzaXZlIG9yIG5vdFxuICogQHJldHVybnMge0Jvb2xlYW59IHdoZXRoZXIgdGhlIHRpbWUgaW50ZXJ2YWxzIGFyZSBvdmVybGFwcGluZ1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gVGhlIHN0YXJ0IG9mIGFuIGludGVydmFsIGNhbm5vdCBiZSBhZnRlciBpdHMgZW5kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBEYXRlIGluIGludGVydmFsIGNhbm5vdCBiZSBgSW52YWxpZCBEYXRlYFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3Igb3ZlcmxhcHBpbmcgdGltZSBpbnRlcnZhbHM6XG4gKiBhcmVJbnRlcnZhbHNPdmVybGFwcGluZyhcbiAqICAgeyBzdGFydDogbmV3IERhdGUoMjAxNCwgMCwgMTApLCBlbmQ6IG5ldyBEYXRlKDIwMTQsIDAsIDIwKSB9LFxuICogICB7IHN0YXJ0OiBuZXcgRGF0ZSgyMDE0LCAwLCAxNyksIGVuZDogbmV3IERhdGUoMjAxNCwgMCwgMjEpIH1cbiAqIClcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3Igbm9uLW92ZXJsYXBwaW5nIHRpbWUgaW50ZXJ2YWxzOlxuICogYXJlSW50ZXJ2YWxzT3ZlcmxhcHBpbmcoXG4gKiAgIHsgc3RhcnQ6IG5ldyBEYXRlKDIwMTQsIDAsIDEwKSwgZW5kOiBuZXcgRGF0ZSgyMDE0LCAwLCAyMCkgfSxcbiAqICAgeyBzdGFydDogbmV3IERhdGUoMjAxNCwgMCwgMjEpLCBlbmQ6IG5ldyBEYXRlKDIwMTQsIDAsIDIyKSB9XG4gKiApXG4gKiAvLz0+IGZhbHNlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhZGphY2VudCB0aW1lIGludGVydmFsczpcbiAqIGFyZUludGVydmFsc092ZXJsYXBwaW5nKFxuICogICB7IHN0YXJ0OiBuZXcgRGF0ZSgyMDE0LCAwLCAxMCksIGVuZDogbmV3IERhdGUoMjAxNCwgMCwgMjApIH0sXG4gKiAgIHsgc3RhcnQ6IG5ldyBEYXRlKDIwMTQsIDAsIDIwKSwgZW5kOiBuZXcgRGF0ZSgyMDE0LCAwLCAzMCkgfVxuICogKVxuICogLy89PiBmYWxzZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBVc2luZyB0aGUgaW5jbHVzaXZlIG9wdGlvbjpcbiAqIGFyZUludGVydmFsc092ZXJsYXBwaW5nKFxuICogICB7IHN0YXJ0OiBuZXcgRGF0ZSgyMDE0LCAwLCAxMCksIGVuZDogbmV3IERhdGUoMjAxNCwgMCwgMjApIH0sXG4gKiAgIHsgc3RhcnQ6IG5ldyBEYXRlKDIwMTQsIDAsIDIwKSwgZW5kOiBuZXcgRGF0ZSgyMDE0LCAwLCAyNCkgfVxuICogKVxuICogLy89PiBmYWxzZVxuICogYXJlSW50ZXJ2YWxzT3ZlcmxhcHBpbmcoXG4gKiAgIHsgc3RhcnQ6IG5ldyBEYXRlKDIwMTQsIDAsIDEwKSwgZW5kOiBuZXcgRGF0ZSgyMDE0LCAwLCAyMCkgfSxcbiAqICAgeyBzdGFydDogbmV3IERhdGUoMjAxNCwgMCwgMjApLCBlbmQ6IG5ldyBEYXRlKDIwMTQsIDAsIDI0KSB9LFxuICogICB7IGluY2x1c2l2ZTogdHJ1ZSB9XG4gKiApXG4gKiAvLz0+IHRydWVcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcmVJbnRlcnZhbHNPdmVybGFwcGluZyhkaXJ0eUludGVydmFsTGVmdCwgZGlydHlJbnRlcnZhbFJpZ2h0KSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBpbnRlcnZhbExlZnQgPSBkaXJ0eUludGVydmFsTGVmdCB8fCB7fTtcbiAgdmFyIGludGVydmFsUmlnaHQgPSBkaXJ0eUludGVydmFsUmlnaHQgfHwge307XG4gIHZhciBsZWZ0U3RhcnRUaW1lID0gdG9EYXRlKGludGVydmFsTGVmdC5zdGFydCkuZ2V0VGltZSgpO1xuICB2YXIgbGVmdEVuZFRpbWUgPSB0b0RhdGUoaW50ZXJ2YWxMZWZ0LmVuZCkuZ2V0VGltZSgpO1xuICB2YXIgcmlnaHRTdGFydFRpbWUgPSB0b0RhdGUoaW50ZXJ2YWxSaWdodC5zdGFydCkuZ2V0VGltZSgpO1xuICB2YXIgcmlnaHRFbmRUaW1lID0gdG9EYXRlKGludGVydmFsUmlnaHQuZW5kKS5nZXRUaW1lKCk7IC8vIFRocm93IGFuIGV4Y2VwdGlvbiBpZiBzdGFydCBkYXRlIGlzIGFmdGVyIGVuZCBkYXRlIG9yIGlmIGFueSBkYXRlIGlzIGBJbnZhbGlkIERhdGVgXG5cbiAgaWYgKCEobGVmdFN0YXJ0VGltZSA8PSBsZWZ0RW5kVGltZSAmJiByaWdodFN0YXJ0VGltZSA8PSByaWdodEVuZFRpbWUpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgaW50ZXJ2YWwnKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmluY2x1c2l2ZSkge1xuICAgIHJldHVybiBsZWZ0U3RhcnRUaW1lIDw9IHJpZ2h0RW5kVGltZSAmJiByaWdodFN0YXJ0VGltZSA8PSBsZWZ0RW5kVGltZTtcbiAgfVxuXG4gIHJldHVybiBsZWZ0U3RhcnRUaW1lIDwgcmlnaHRFbmRUaW1lICYmIHJpZ2h0U3RhcnRUaW1lIDwgbGVmdEVuZFRpbWU7XG59IiwiaW1wb3J0IFJlYWN0LCB7IG1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3NzbWVtIGZyb20gJ2Nzc21lbSc7XG5cbmltcG9ydCB7IGlzTW9iaWxlIH0gZnJvbSAnLi4vaGVscGVycy9hZGFwdGl2ZSc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9EYXkuY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuZW51bSBNRU1PX1BBUkFNRVRFUiB7XG4gIEhJRERFTiA9ICdoaWRkZW4nLFxuICBMT0NLRUQgPSAnbG9ja2VkJyxcbiAgSE9MSURBWSA9ICdob2xpZGF5JyxcbiAgU0VMRUNURUQgPSAnc2VsZWN0ZWQnLFxuICBFREdFX0RBWSA9ICdlZGdlRGF5JyxcbiAgV0lUSF9MRUZUX1JBRElVUyA9ICd3aXRoTGVmdFJhZGl1cycsXG4gIFdJVEhfUklHSFRfUkFESVVTID0gJ3dpdGhSaWdodFJhZGl1cycsXG59XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGRheTogbnVtYmVyO1xuICBkYXRlOiBEYXRlO1xuICBbTUVNT19QQVJBTUVURVIuSElEREVOXT86IGJvb2xlYW47XG4gIFtNRU1PX1BBUkFNRVRFUi5MT0NLRURdPzogYm9vbGVhbjtcbiAgW01FTU9fUEFSQU1FVEVSLkhPTElEQVldPzogYm9vbGVhbjtcbiAgW01FTU9fUEFSQU1FVEVSLlNFTEVDVEVEXT86IGJvb2xlYW47XG4gIFtNRU1PX1BBUkFNRVRFUi5FREdFX0RBWV0/OiBib29sZWFuO1xuICBbTUVNT19QQVJBTUVURVIuV0lUSF9MRUZUX1JBRElVU10/OiBib29sZWFuO1xuICBbTUVNT19QQVJBTUVURVIuV0lUSF9SSUdIVF9SQURJVVNdPzogYm9vbGVhbjtcbiAgb25Nb3VzZUVudGVyPzogKGRhdGU6IERhdGUpID0+IHZvaWQ7XG4gIG9uTW91c2VMZWF2ZT86ICgpID0+IHZvaWQ7XG59XG5cbmNvbnN0IERheSA9ICh7XG4gIGRheSxcbiAgZGF0ZSxcbiAgaGlkZGVuLFxuICBsb2NrZWQsXG4gIGhvbGlkYXksXG4gIHNlbGVjdGVkLFxuICBlZGdlRGF5LFxuICB3aXRoTGVmdFJhZGl1cyxcbiAgd2l0aFJpZ2h0UmFkaXVzLFxuICBvbk1vdXNlRW50ZXIsXG4gIG9uTW91c2VMZWF2ZSxcbn06IFByb3BzKSA9PiB7XG4gIGlmIChoaWRkZW4pIHtcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e2VtKCd3cmFwcGVyJykoeyBoaWRkZW46IHRydWUgfSl9IC8+O1xuICB9XG5cbiAgLyogZGF0YS1kYXkgaXMgcGFydCBvZiBldmVudCBkZWxlZ2F0aW9uIGZvciByZW5kZXJpbmcgb3B0aW1pemF0aW9uICovXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtlbSgnd3JhcHBlcicpKCl9XG4gICAgICBvbk1vdXNlRW50ZXI9e1xuICAgICAgICBpc01vYmlsZSgpIHx8ICFvbk1vdXNlRW50ZXIgPyB1bmRlZmluZWQgOiAoKSA9PiBvbk1vdXNlRW50ZXIoZGF0ZSlcbiAgICAgIH1cbiAgICAgIG9uTW91c2VMZWF2ZT17XG4gICAgICAgIGlzTW9iaWxlKCkgfHwgIW9uTW91c2VMZWF2ZSA/IHVuZGVmaW5lZCA6ICgpID0+IG9uTW91c2VMZWF2ZSgpXG4gICAgICB9XG4gICAgICBkYXRhLWRheT17ZGF0ZX1cbiAgICA+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17ZW0oJ2lubmVyJykoe1xuICAgICAgICAgIGxvY2tlZCxcbiAgICAgICAgICBzZWxlY3RlZCxcbiAgICAgICAgICBob2xpZGF5LFxuICAgICAgICAgIGVkZ2VEYXksXG4gICAgICAgICAgd2l0aExlZnRSYWRpdXMsXG4gICAgICAgICAgd2l0aFJpZ2h0UmFkaXVzLFxuICAgICAgICB9KX1cbiAgICAgICAgZGF0YS1kYXk9e2RhdGV9XG4gICAgICA+XG4gICAgICAgIHtkYXl9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW8oRGF5LCBhcmVFcXVhbCk7XG5cbmNvbnN0IHByb3BzTGlzdCA9IE9iamVjdC52YWx1ZXMoTUVNT19QQVJBTUVURVIpO1xuXG5mdW5jdGlvbiBhcmVFcXVhbChwcmV2UHJvcHM6IFByb3BzLCBuZXh0UHJvcHM6IFByb3BzKSB7XG4gIHJldHVybiBwcm9wc0xpc3QuZXZlcnkoKHByb3ApID0+IHByZXZQcm9wc1twcm9wXSA9PT0gbmV4dFByb3BzW3Byb3BdKTtcbn1cbiIsImltcG9ydCBSZWFjdCwgeyBtZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgc3RhcnRPZldlZWssXG4gIHN0YXJ0T2ZEYXksXG4gIGFkZERheXMsXG4gIGdldERhdGUsXG4gIGlzV2l0aGluSW50ZXJ2YWwsXG4gIGlzU2FtZU1vbnRoLFxuICBpc1NhbWVEYXksXG4gIGdldERheXNJbk1vbnRoLFxuICBlbmRPZldlZWssXG4gIGFyZUludGVydmFsc092ZXJsYXBwaW5nLFxufSBmcm9tICdkYXRlLWZucyc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IGNzc21lbSBmcm9tICdjc3NtZW0nO1xuXG5pbXBvcnQgeyBIb2xpZGF5c1N0YXRlIH0gZnJvbSAnLi4vcmVkdWNlcnMvaG9saWRheXMnO1xuaW1wb3J0IHsgSG9saWRheXMgfSBmcm9tICcuLi9yZWR1Y2Vycy9ob2xpZGF5cy9wYXJzZXJzL3BhcnNlSG9saWRheXMnO1xuXG5pbXBvcnQgRGF5IGZyb20gJy4vRGF5JztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9XZWVrLmNzcyc7XG5pbXBvcnQgeyBXZWVrU3RhcnRzT25UeXBlIH0gZnJvbSAnLi4vcmVkdWNlcnMvbDEwbic7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHdlZWs6IERhdGU7XG4gIG1vbnRoOiBEYXRlO1xuICBmcm9tOiBEYXRlO1xuICB0bzogRGF0ZTtcbiAgcmFuZ2VTdGFydDogRGF0ZTtcbiAgcmFuZ2VFbmQ6IERhdGU7XG4gIGlzU3RhcnRTZWxlY3Rpb24/OiBib29sZWFuO1xuICBpc0VuZFNlbGVjdGlvbj86IGJvb2xlYW47XG4gIG9uTW91c2VFbnRlcjogKGRhdGU6IERhdGUpID0+IHZvaWQ7XG4gIG9uTW91c2VMZWF2ZTogKCkgPT4gdm9pZDtcbiAgaG9saWRheXM6IEhvbGlkYXlzIHwgbnVsbDtcbiAgd2Vla1N0YXJ0c09uOiBXZWVrU3RhcnRzT25UeXBlO1xufVxuXG5jb25zdCBXZWVrID0gKHtcbiAgd2VlayxcbiAgbW9udGgsXG4gIGZyb20sXG4gIHRvLFxuICByYW5nZVN0YXJ0LFxuICByYW5nZUVuZCxcbiAgb25Nb3VzZUVudGVyLFxuICBvbk1vdXNlTGVhdmUsXG4gIGhvbGlkYXlzLFxuICB3ZWVrU3RhcnRzT24sXG59OiBQcm9wcykgPT4ge1xuICBjb25zdCBkYXlzID0gW107XG4gIGNvbnN0IGZpcnN0RGF5ID0gc3RhcnRPZldlZWsod2VlaywgeyB3ZWVrU3RhcnRzT24gfSk7XG4gIGNvbnN0IGRheXNDb3VudCA9IDc7XG4gIGNvbnN0IGZpcnN0V2Vla0RheUluZGV4ID0gMDtcbiAgY29uc3QgbGFzdFdlZWtEYXlJbmRleCA9IDY7XG4gIGNvbnN0IGZpcnN0TW9udGhEYXlJbmRleCA9IDE7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXlzQ291bnQ7IGkrKykge1xuICAgIGRheXMucHVzaChhZGREYXlzKGZpcnN0RGF5LCBpKSk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnd2VlaycpKCl9PlxuICAgICAge2RheXMubWFwKChkYXRlLCBpKSA9PiB7XG4gICAgICAgIGNvbnN0IGRheSA9IGdldERhdGUoZGF0ZSk7XG4gICAgICAgIGNvbnN0IGhpZGRlbiA9ICFpc1NhbWVNb250aChkYXRlLCBtb250aCk7XG5cbiAgICAgICAgaWYgKGhpZGRlbikge1xuICAgICAgICAgIHJldHVybiA8RGF5IGRheT17ZGF5fSBkYXRlPXtkYXRlfSBoaWRkZW49e2hpZGRlbn0ga2V5PXtkYXl9IC8+O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGF5U3RhcnQgPSBzdGFydE9mRGF5KGRhdGUpO1xuICAgICAgICBjb25zdCBsb2NrZWQgPSBkYXRlIDwgZnJvbSB8fCBkYXRlID4gdG87XG4gICAgICAgIGNvbnN0IGhvbGlkYXkgPSAhIWhvbGlkYXlzICYmICEhaG9saWRheXNbZGF5U3RhcnQudG9TdHJpbmcoKV07XG5cbiAgICAgICAgY29uc3QgaXNSYW5nZUZpcnN0RGF5ID0gaXNTYW1lRGF5KGRhdGUsIHJhbmdlU3RhcnQpO1xuICAgICAgICBjb25zdCBpc1JhbmdlTGFzdERheSA9IGlzU2FtZURheShkYXRlLCByYW5nZUVuZCk7XG4gICAgICAgIGNvbnN0IGlzUmFuZ2VFZGdlRGF5ID0gaXNSYW5nZUZpcnN0RGF5IHx8IGlzUmFuZ2VMYXN0RGF5O1xuXG4gICAgICAgIGNvbnN0IGlzV2Vla0ZpcnN0RGF5ID0gaSA9PT0gZmlyc3RXZWVrRGF5SW5kZXg7XG4gICAgICAgIGNvbnN0IGlzV2Vla0xhc3REYXkgPSBpID09PSBsYXN0V2Vla0RheUluZGV4O1xuXG4gICAgICAgIGNvbnN0IGlzTW9udGhGaXJzdERheSA9IGRheSA9PT0gZmlyc3RNb250aERheUluZGV4O1xuICAgICAgICBjb25zdCBpc01vbnRoTGFzdERheSA9IGRheSA9PT0gZ2V0RGF5c0luTW9udGgobW9udGgpO1xuXG4gICAgICAgIGNvbnN0IHdpdGhMZWZ0UmFkaXVzID1cbiAgICAgICAgICBpc1JhbmdlRmlyc3REYXkgfHwgaXNXZWVrRmlyc3REYXkgfHwgaXNNb250aEZpcnN0RGF5O1xuICAgICAgICBjb25zdCB3aXRoUmlnaHRSYWRpdXMgPVxuICAgICAgICAgIGlzUmFuZ2VMYXN0RGF5IHx8IGlzV2Vla0xhc3REYXkgfHwgaXNNb250aExhc3REYXk7XG5cbiAgICAgICAgY29uc3QgaXNTZWxlY3RlZCA9IGlzV2l0aGluSW50ZXJ2YWwoZGF0ZSwge1xuICAgICAgICAgIHN0YXJ0OiByYW5nZVN0YXJ0LFxuICAgICAgICAgIGVuZDogcmFuZ2VFbmQsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPERheVxuICAgICAgICAgICAgZGF5PXtkYXl9XG4gICAgICAgICAgICBkYXRlPXtkYXRlfVxuICAgICAgICAgICAgaGlkZGVuPXtoaWRkZW59XG4gICAgICAgICAgICBsb2NrZWQ9e2xvY2tlZH1cbiAgICAgICAgICAgIGhvbGlkYXk9e2hvbGlkYXl9XG4gICAgICAgICAgICBzZWxlY3RlZD17aXNTZWxlY3RlZH1cbiAgICAgICAgICAgIGVkZ2VEYXk9e2lzUmFuZ2VFZGdlRGF5fVxuICAgICAgICAgICAgd2l0aExlZnRSYWRpdXM9e3dpdGhMZWZ0UmFkaXVzfVxuICAgICAgICAgICAgd2l0aFJpZ2h0UmFkaXVzPXt3aXRoUmlnaHRSYWRpdXN9XG4gICAgICAgICAgICBvbk1vdXNlRW50ZXI9e29uTW91c2VFbnRlcn1cbiAgICAgICAgICAgIG9uTW91c2VMZWF2ZT17b25Nb3VzZUxlYXZlfVxuICAgICAgICAgICAga2V5PXtkYXl9XG4gICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICAgIH0pfVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKG1lbW8oV2VlaywgaXNFcXVhbCkpO1xuXG5pbnRlcmZhY2UgSG9saWRheXNTdGF0ZVRvUHJvcHMge1xuICBob2xpZGF5czogSG9saWRheXNTdGF0ZTtcbn1cblxuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHsgaG9saWRheXMgfTogSG9saWRheXNTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuIHtcbiAgICBob2xpZGF5czogaG9saWRheXMubGlzdCxcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNFcXVhbChvbGRQcm9wczogUHJvcHMsIG5ld1Byb3BzOiBQcm9wcykge1xuICBpZiAob2xkUHJvcHMuZnJvbS52YWx1ZU9mKCkgIT09IG5ld1Byb3BzLmZyb20udmFsdWVPZigpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKG9sZFByb3BzLnRvLnZhbHVlT2YoKSAhPT0gbmV3UHJvcHMudG8udmFsdWVPZigpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKG9sZFByb3BzLmlzU3RhcnRTZWxlY3Rpb24gIT09IG5ld1Byb3BzLmlzU3RhcnRTZWxlY3Rpb24pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAob2xkUHJvcHMuaXNFbmRTZWxlY3Rpb24gIT09IG5ld1Byb3BzLmlzRW5kU2VsZWN0aW9uKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3Qgd2Vla1N0YXJ0ID0gc3RhcnRPZldlZWsobmV3UHJvcHMud2Vlaywge1xuICAgIHdlZWtTdGFydHNPbjogbmV3UHJvcHMud2Vla1N0YXJ0c09uLFxuICB9KTtcbiAgY29uc3Qgd2Vla0VuZCA9IGVuZE9mV2VlayhuZXdQcm9wcy53ZWVrLCB7XG4gICAgd2Vla1N0YXJ0c09uOiBuZXdQcm9wcy53ZWVrU3RhcnRzT24sXG4gIH0pO1xuICBjb25zdCBpc09sZFJhbmdlT3ZlcmxhcCA9IGFyZUludGVydmFsc092ZXJsYXBwaW5nKFxuICAgIHsgc3RhcnQ6IG9sZFByb3BzLnJhbmdlU3RhcnQsIGVuZDogb2xkUHJvcHMucmFuZ2VFbmQgfSxcbiAgICB7IHN0YXJ0OiB3ZWVrU3RhcnQsIGVuZDogd2Vla0VuZCB9XG4gICk7XG4gIGNvbnN0IGlzTmV3UmFuZ2VPdmVybGFwID0gYXJlSW50ZXJ2YWxzT3ZlcmxhcHBpbmcoXG4gICAgeyBzdGFydDogbmV3UHJvcHMucmFuZ2VTdGFydCwgZW5kOiBuZXdQcm9wcy5yYW5nZUVuZCB9LFxuICAgIHsgc3RhcnQ6IHdlZWtTdGFydCwgZW5kOiB3ZWVrRW5kIH1cbiAgKTtcblxuICBpZiAoIWlzT2xkUmFuZ2VPdmVybGFwICYmICFpc05ld1JhbmdlT3ZlcmxhcCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKG9sZFByb3BzLnJhbmdlU3RhcnQudmFsdWVPZigpICE9PSBuZXdQcm9wcy5yYW5nZVN0YXJ0LnZhbHVlT2YoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChvbGRQcm9wcy5yYW5nZUVuZC52YWx1ZU9mKCkgIT09IG5ld1Byb3BzLnJhbmdlRW5kLnZhbHVlT2YoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuIiwiaW1wb3J0IHRvRGF0ZSBmcm9tICcuLi90b0RhdGUvaW5kZXguanMnO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tICcuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyc7XG4vKipcbiAqIEBuYW1lIGdldERhdGVcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBkYXkgb2YgdGhlIG1vbnRoIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBkYXkgb2YgdGhlIG1vbnRoIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBnaXZlbiBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgZGF5IG9mIG1vbnRoXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggZGF5IG9mIHRoZSBtb250aCBpcyAyOSBGZWJydWFyeSAyMDEyP1xuICogdmFyIHJlc3VsdCA9IGdldERhdGUobmV3IERhdGUoMjAxMiwgMSwgMjkpKVxuICogLy89PiAyOVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldERhdGUoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5T2ZNb250aCA9IGRhdGUuZ2V0RGF0ZSgpO1xuICByZXR1cm4gZGF5T2ZNb250aDtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gJy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbi8qKlxuICogQG5hbWUgZ2V0RGF5c0luTW9udGhcbiAqIEBjYXRlZ29yeSBNb250aCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIG51bWJlciBvZiBkYXlzIGluIGEgbW9udGggb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBkYXlzIGluIGEgbW9udGggb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGdpdmVuIGRhdGVcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHRoZSBudW1iZXIgb2YgZGF5cyBpbiBhIG1vbnRoXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSG93IG1hbnkgZGF5cyBhcmUgaW4gRmVicnVhcnkgMjAwMD9cbiAqIHZhciByZXN1bHQgPSBnZXREYXlzSW5Nb250aChuZXcgRGF0ZSgyMDAwLCAxKSlcbiAqIC8vPT4gMjlcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXREYXlzSW5Nb250aChkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICB2YXIgbW9udGhJbmRleCA9IGRhdGUuZ2V0TW9udGgoKTtcbiAgdmFyIGxhc3REYXlPZk1vbnRoID0gbmV3IERhdGUoMCk7XG4gIGxhc3REYXlPZk1vbnRoLnNldEZ1bGxZZWFyKHllYXIsIG1vbnRoSW5kZXggKyAxLCAwKTtcbiAgbGFzdERheU9mTW9udGguc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBsYXN0RGF5T2ZNb250aC5nZXREYXRlKCk7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tICcuLi90b0RhdGUvaW5kZXguanMnO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tICcuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbi8qKlxuICogQG5hbWUgZW5kT2ZXZWVrXG4gKiBAY2F0ZWdvcnkgV2VlayBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIGVuZCBvZiBhIHdlZWsgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBlbmQgb2YgYSB3ZWVrIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcGFyYW0gezB8MXwyfDN8NHw1fDZ9IFtvcHRpb25zLndlZWtTdGFydHNPbj0wXSAtIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrICgwIC0gU3VuZGF5KVxuICogQHJldHVybnMge0RhdGV9IHRoZSBlbmQgb2YgYSB3ZWVrXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIGVuZCBvZiBhIHdlZWsgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiB2YXIgcmVzdWx0ID0gZW5kT2ZXZWVrKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCkpXG4gKiAvLz0+IFNhdCBTZXAgMDYgMjAxNCAyMzo1OTo1OS45OTlcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSWYgdGhlIHdlZWsgc3RhcnRzIG9uIE1vbmRheSwgdGhlIGVuZCBvZiB0aGUgd2VlayBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIHZhciByZXN1bHQgPSBlbmRPZldlZWsobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSwgeyB3ZWVrU3RhcnRzT246IDEgfSlcbiAqIC8vPT4gU3VuIFNlcCAwNyAyMDE0IDIzOjU5OjU5Ljk5OVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVuZE9mV2VlayhkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgdmFyIGxvY2FsZVdlZWtTdGFydHNPbiA9IGxvY2FsZSAmJiBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy53ZWVrU3RhcnRzT247XG4gIHZhciBkZWZhdWx0V2Vla1N0YXJ0c09uID0gbG9jYWxlV2Vla1N0YXJ0c09uID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGxvY2FsZVdlZWtTdGFydHNPbik7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSBvcHRpb25zLndlZWtTdGFydHNPbiA9PSBudWxsID8gZGVmYXVsdFdlZWtTdGFydHNPbiA6IHRvSW50ZWdlcihvcHRpb25zLndlZWtTdGFydHNPbik7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0RGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IC03IDogMCkgKyA2IC0gKGRheSAtIHdlZWtTdGFydHNPbik7XG4gIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIGRpZmYpO1xuICBkYXRlLnNldEhvdXJzKDIzLCA1OSwgNTksIDk5OSk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCBSZWFjdCwgeyB1c2VSZWYsIHVzZUxheW91dEVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUludGwgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCB7XG4gIGxhc3REYXlPZk1vbnRoLFxuICBzdGFydE9mTW9udGgsXG4gIHN0YXJ0T2ZXZWVrLFxuICBkaWZmZXJlbmNlSW5DYWxlbmRhcldlZWtzLFxuICBhZGRXZWVrcyxcbn0gZnJvbSAnZGF0ZS1mbnMnO1xuaW1wb3J0IGNzc21lbSBmcm9tICdjc3NtZW0nO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcblxuaW1wb3J0IHsgTDEwblN0YXRlLCBXZWVrU3RhcnRzT25UeXBlIH0gZnJvbSAnLi4vcmVkdWNlcnMvbDEwbic7XG5cbmltcG9ydCBnZXRNb250aE5hbWVNZXNzYWdlIGZyb20gJy4uL2hlbHBlcnMvZ2V0TW9udGhOYW1lTWVzc2FnZSc7XG5cbmltcG9ydCBXZWVrIGZyb20gJy4vV2Vlayc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vTW9udGguY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgbW9udGg6IERhdGU7XG4gIGZyb206IERhdGU7XG4gIHRvOiBEYXRlO1xuICByYW5nZVN0YXJ0OiBEYXRlO1xuICByYW5nZUVuZDogRGF0ZTtcbiAgaXNTdGFydFNlbGVjdGlvbj86IGJvb2xlYW47XG4gIGlzRW5kU2VsZWN0aW9uPzogYm9vbGVhbjtcbiAgd2Vla1N0YXJ0c09uOiBXZWVrU3RhcnRzT25UeXBlO1xuICBvbk1vdXNlRW50ZXI6IChkYXRlOiBEYXRlKSA9PiB2b2lkO1xuICBvbk1vdXNlTGVhdmU6ICgpID0+IHZvaWQ7XG4gIHNldE1vbnRoT2Zmc2V0OiAob2Zmc2V0OiBudW1iZXIpID0+IHZvaWQ7XG4gIGlzRmFrZT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjb25zdCBNb250aDogUmVhY3QuRkM8UHJvcHM+ID0gKHtcbiAgbW9udGgsXG4gIGZyb20sXG4gIHRvLFxuICByYW5nZVN0YXJ0LFxuICByYW5nZUVuZCxcbiAgaXNTdGFydFNlbGVjdGlvbixcbiAgaXNFbmRTZWxlY3Rpb24sXG4gIHdlZWtTdGFydHNPbixcbiAgb25Nb3VzZUVudGVyLFxuICBvbk1vdXNlTGVhdmUsXG4gIHNldE1vbnRoT2Zmc2V0LFxuICBpc0Zha2UsXG59KSA9PiB7XG4gIGNvbnN0IGludGwgPSB1c2VJbnRsKCk7XG5cbiAgY29uc3Qgd2Vla3MgPSBbXTtcbiAgY29uc3QgbGFzdERheSA9IGxhc3REYXlPZk1vbnRoKG1vbnRoKTtcbiAgY29uc3QgZmlyc3RXZWVrID0gc3RhcnRPZk1vbnRoKG1vbnRoKTtcbiAgY29uc3QgbGFzdFdlZWsgPSBzdGFydE9mV2VlayhsYXN0RGF5LCB7IHdlZWtTdGFydHNPbiB9KTtcbiAgY29uc3Qgd2Vla3NDb3VudCA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyV2Vla3MobGFzdFdlZWssIGZpcnN0V2Vlaywge1xuICAgIHdlZWtTdGFydHNPbixcbiAgfSk7XG5cbiAgY29uc3QgdGl0bGUgPSBpbnRsLmZvcm1hdE1lc3NhZ2UoZ2V0TW9udGhOYW1lTWVzc2FnZShtb250aCkpO1xuXG4gIGNvbnN0IG1vbnRoUmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKTtcblxuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIHNldE1vbnRoT2Zmc2V0KGdldE1vbnRoT2Zmc2V0KCkpO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbZ2V0TW9udGhPZmZzZXQoKSwgaXNTdGFydFNlbGVjdGlvbiwgaXNFbmRTZWxlY3Rpb25dKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8PSB3ZWVrc0NvdW50OyBpICs9IDEpIHtcbiAgICB3ZWVrcy5wdXNoKGFkZFdlZWtzKGZpcnN0V2VlaywgaSkpO1xuICB9XG5cbiAgaWYgKGlzRmFrZSkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ3dyYXBwZXInKSgpfSByZWY9e21vbnRoUmVmfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCd0aXRsZScpKCl9Pnt0aXRsZX08L2Rpdj5cbiAgICAgICAge3dlZWtzLm1hcCgod2VlaykgPT4gKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnZmFrZVdlZWsnKSgpfSBrZXk9e3dlZWsudG9TdHJpbmcoKX0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2xvYWRlcicpKCl9PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2xvYWRlckRvdEZpcnN0JykoKX0gLz5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCdsb2FkZXJEb3RTZWNvbmQnKSgpfSAvPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2xvYWRlckRvdFRoaXJkJykoKX0gLz5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCdsb2FkZXJEb3RGb3VydGgnKSgpfSAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICkpfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2VtKCd3cmFwcGVyJykoKX0gcmVmPXttb250aFJlZn0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ3RpdGxlJykoKX0+e3RpdGxlfTwvZGl2PlxuICAgICAge3dlZWtzLm1hcCgod2VlaykgPT4gKFxuICAgICAgICA8V2Vla1xuICAgICAgICAgIHdlZWs9e3dlZWt9XG4gICAgICAgICAgbW9udGg9e21vbnRofVxuICAgICAgICAgIGZyb209e2Zyb219XG4gICAgICAgICAgdG89e3RvfVxuICAgICAgICAgIHJhbmdlU3RhcnQ9e3JhbmdlU3RhcnR9XG4gICAgICAgICAgcmFuZ2VFbmQ9e3JhbmdlRW5kfVxuICAgICAgICAgIGlzU3RhcnRTZWxlY3Rpb249e2lzU3RhcnRTZWxlY3Rpb259XG4gICAgICAgICAgaXNFbmRTZWxlY3Rpb249e2lzRW5kU2VsZWN0aW9ufVxuICAgICAgICAgIG9uTW91c2VFbnRlcj17b25Nb3VzZUVudGVyfVxuICAgICAgICAgIG9uTW91c2VMZWF2ZT17b25Nb3VzZUxlYXZlfVxuICAgICAgICAgIGtleT17d2Vlay50b1N0cmluZygpfVxuICAgICAgICAgIHdlZWtTdGFydHNPbj17d2Vla1N0YXJ0c09ufVxuICAgICAgICAvPlxuICAgICAgKSl9XG4gICAgPC9kaXY+XG4gICk7XG5cbiAgZnVuY3Rpb24gZ2V0TW9udGhPZmZzZXQoKSB7XG4gICAgaWYgKCFtb250aFJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gbW9udGhSZWYuY3VycmVudC5vZmZzZXRUb3A7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKShNb250aCk7XG5cbmludGVyZmFjZSBMMTBuU3RhdGVUb1Byb3BzIHtcbiAgbDEwbjogTDEwblN0YXRlO1xufVxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoeyBsMTBuIH06IEwxMG5TdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuIHtcbiAgICBsb2NhbGU6IGwxMG4ubG9jYWxlLFxuICAgIHdlZWtTdGFydHNPbjogbDEwbi53ZWVrU3RhcnRzT24sXG4gIH07XG59XG4iLCJpbXBvcnQgdG9EYXRlIGZyb20gJy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbi8qKlxuICogQG5hbWUgbGFzdERheU9mTW9udGhcbiAqIEBjYXRlZ29yeSBNb250aCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIGxhc3QgZGF5IG9mIGEgbW9udGggZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBsYXN0IGRheSBvZiBhIG1vbnRoIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbGFzdCBkYXkgb2YgYSBtb250aFxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBsYXN0IGRheSBvZiBhIG1vbnRoIGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogdmFyIHJlc3VsdCA9IGxhc3REYXlPZk1vbnRoKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCkpXG4gKiAvLz0+IFR1ZSBTZXAgMzAgMjAxNCAwMDowMDowMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxhc3REYXlPZk1vbnRoKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIG1vbnRoID0gZGF0ZS5nZXRNb250aCgpO1xuICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSwgbW9udGggKyAxLCAwKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHN0YXJ0T2ZXZWVrIGZyb20gJy4uL3N0YXJ0T2ZXZWVrL2luZGV4LmpzJztcbmltcG9ydCBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIGZyb20gJy4uL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDtcbi8qKlxuICogQG5hbWUgZGlmZmVyZW5jZUluQ2FsZW5kYXJXZWVrc1xuICogQGNhdGVnb3J5IFdlZWsgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBudW1iZXIgb2YgY2FsZW5kYXIgd2Vla3MgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBjYWxlbmRhciB3ZWVrcyBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcy5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVMZWZ0IC0gdGhlIGxhdGVyIGRhdGVcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVSaWdodCAtIHRoZSBlYXJsaWVyIGRhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcGFyYW0gezB8MXwyfDN8NHw1fDZ9IFtvcHRpb25zLndlZWtTdGFydHNPbj0wXSAtIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrICgwIC0gU3VuZGF5KVxuICogQHJldHVybnMge051bWJlcn0gdGhlIG51bWJlciBvZiBjYWxlbmRhciB3ZWVrc1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMud2Vla1N0YXJ0c09uYCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBIb3cgbWFueSBjYWxlbmRhciB3ZWVrcyBhcmUgYmV0d2VlbiA1IEp1bHkgMjAxNCBhbmQgMjAgSnVseSAyMDE0P1xuICogdmFyIHJlc3VsdCA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyV2Vla3MoXG4gKiAgIG5ldyBEYXRlKDIwMTQsIDYsIDIwKSxcbiAqICAgbmV3IERhdGUoMjAxNCwgNiwgNSlcbiAqIClcbiAqIC8vPT4gM1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0aGUgd2VlayBzdGFydHMgb24gTW9uZGF5LFxuICogLy8gaG93IG1hbnkgY2FsZW5kYXIgd2Vla3MgYXJlIGJldHdlZW4gNSBKdWx5IDIwMTQgYW5kIDIwIEp1bHkgMjAxND9cbiAqIHZhciByZXN1bHQgPSBkaWZmZXJlbmNlSW5DYWxlbmRhcldlZWtzKFxuICogICBuZXcgRGF0ZSgyMDE0LCA2LCAyMCksXG4gKiAgIG5ldyBEYXRlKDIwMTQsIDYsIDUpLFxuICogICB7IHdlZWtTdGFydHNPbjogMSB9XG4gKiApXG4gKiAvLz0+IDJcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaWZmZXJlbmNlSW5DYWxlbmRhcldlZWtzKGRpcnR5RGF0ZUxlZnQsIGRpcnR5RGF0ZVJpZ2h0LCBkaXJ0eU9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBzdGFydE9mV2Vla0xlZnQgPSBzdGFydE9mV2VlayhkaXJ0eURhdGVMZWZ0LCBkaXJ0eU9wdGlvbnMpO1xuICB2YXIgc3RhcnRPZldlZWtSaWdodCA9IHN0YXJ0T2ZXZWVrKGRpcnR5RGF0ZVJpZ2h0LCBkaXJ0eU9wdGlvbnMpO1xuICB2YXIgdGltZXN0YW1wTGVmdCA9IHN0YXJ0T2ZXZWVrTGVmdC5nZXRUaW1lKCkgLSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKHN0YXJ0T2ZXZWVrTGVmdCk7XG4gIHZhciB0aW1lc3RhbXBSaWdodCA9IHN0YXJ0T2ZXZWVrUmlnaHQuZ2V0VGltZSgpIC0gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhzdGFydE9mV2Vla1JpZ2h0KTsgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcblxuICByZXR1cm4gTWF0aC5yb3VuZCgodGltZXN0YW1wTGVmdCAtIHRpbWVzdGFtcFJpZ2h0KSAvIE1JTExJU0VDT05EU19JTl9XRUVLKTtcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IHN0YXJ0T2ZXZWVrLCBhZGREYXlzIH0gZnJvbSAnZGF0ZS1mbnMnO1xuaW1wb3J0IGNzc21lbSBmcm9tICdjc3NtZW0nO1xuXG5pbXBvcnQgeyBMMTBuU3RhdGUsIFdlZWtTdGFydHNPblR5cGUgfSBmcm9tICcuLi9yZWR1Y2Vycy9sMTBuJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0RheXNPZlRoZVdlZWsuY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgbG9jYWxlOiBzdHJpbmc7XG4gIHdlZWtTdGFydHNPbjogV2Vla1N0YXJ0c09uVHlwZTtcbn1cblxuY29uc3QgRGF5c09mVGhlV2VlayA9ICh7IGxvY2FsZSwgd2Vla1N0YXJ0c09uIH06IFByb3BzKSA9PiB7XG4gIGNvbnN0IGRheXMgPSBbXTtcbiAgY29uc3QgZmlyc3REYXkgPSBzdGFydE9mV2VlayhuZXcgRGF0ZSgpLCB7IHdlZWtTdGFydHNPbiB9KTtcbiAgY29uc3QgZGF5c0NvdW50ID0gNztcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGRheXNDb3VudDsgaSsrKSB7XG4gICAgZGF5cy5wdXNoKGFkZERheXMoZmlyc3REYXksIGkpKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2VtKCd3cmFwcGVyJykoKX0+XG4gICAgICB7ZGF5cy5tYXAoKGRheSwgaSkgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnZGF5JykoKX0ga2V5PXtpfT5cbiAgICAgICAgICAgIHtnZXRXZWVrZGF5KGxvY2FsZSwgZGF5KX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICAgIH0pfVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKERheXNPZlRoZVdlZWspO1xuXG5mdW5jdGlvbiBnZXRXZWVrZGF5KGxvY2FsZTogc3RyaW5nLCBkYXRlOiBEYXRlKSB7XG4gIGNvbnN0IHdlZWtkYXkgPSBsb2NhbGUgPT09ICdhcicgPyAnbmFycm93JyA6ICdzaG9ydCc7XG4gIGNvbnN0IGZvcm1hdHRlciA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY2FsZSwgeyB3ZWVrZGF5IH0pO1xuXG4gIHJldHVybiBmb3JtYXR0ZXIuZm9ybWF0KGRhdGUpLnNsaWNlKDAsIDIpO1xufVxuXG5pbnRlcmZhY2UgTDEwblN0YXRlVG9Qcm9wcyB7XG4gIGwxMG46IEwxMG5TdGF0ZTtcbn1cblxuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHsgbDEwbiB9OiBMMTBuU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiB7XG4gICAgbG9jYWxlOiBsMTBuLmxvY2FsZSxcbiAgICB3ZWVrU3RhcnRzT246IGwxMG4ud2Vla1N0YXJ0c09uLFxuICB9O1xufVxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VNZW1vLCBtZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZGVmaW5lTWVzc2FnZXMsIHVzZUludGwgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCB7XG4gIGFkZERheXMsXG4gIG1pbixcbiAgc3RhcnRPZkRheSxcbiAgZW5kT2ZEYXksXG4gIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyxcbiAgaXNXaXRoaW5JbnRlcnZhbCxcbiAgZ2V0TW9udGgsXG4gIGdldFllYXIsXG59IGZyb20gJ2RhdGUtZm5zJztcbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcblxuaW1wb3J0IE1vbnRoIGZyb20gJy4vTW9udGgnO1xuaW1wb3J0IERheXNPZlRoZVdlZWsgZnJvbSAnLi9EYXlzT2ZUaGVXZWVrJztcblxuaW1wb3J0IHsgZ2V0TW9udGhzIH0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9HcmlkLmNzcyc7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmNvbnN0IG1lc3NhZ2VzID0gZGVmaW5lTWVzc2FnZXMoe1xuICBkYXRlSW5QYXN0OiB7XG4gICAgaWQ6ICdDYWxlbmRhci5HcmlkLmRhdGVJblBhc3QnLFxuICAgIGRlZmF1bHRNZXNzYWdlOiAn0J3QtdC70YzQt9GPINCy0YvQsdGA0LDRgtGMINC00LDRgtGLINCyINC/0YDQvtGI0LvQvtC8JyxcbiAgfSxcbiAgZGF0ZUJlZm9yZUNoZWNraW46IHtcbiAgICBpZDogJ0NhbGVuZGFyLkdyaWQuZGF0ZUJlZm9yZUNoZWNraW4nLFxuICAgIGRlZmF1bHRNZXNzYWdlOiAn0J3QtdC70YzQt9GPINCy0YvQsdGA0LDRgtGMINC00LDRgtGDINGA0LDQvdGM0YjQtSDQt9Cw0LXQt9C00LAnLFxuICB9LFxuICBkYXRlQmVmb3JlRGVwYXJ0dXJlOiB7XG4gICAgaWQ6ICdDYWxlbmRhci5HcmlkLmRhdGVCZWZvcmVEZXBhcnR1cmUnLFxuICAgIGRlZmF1bHRNZXNzYWdlOiAn0J3QtdC70YzQt9GPINCy0YvQsdGA0LDRgtGMINC00LDRgtGDINGA0LDQvdGM0YjQtSDQstGL0LvQtdGC0LAnLFxuICB9LFxuICBkYXRlSXNPdXRPZlJhbmdlOiB7XG4gICAgaWQ6ICdDYWxlbmRhci5HcmlkLmRhdGVJc091dE9mUmFuZ2UnLFxuICAgIGRlZmF1bHRNZXNzYWdlOiAn0J3QtdC70YzQt9GPINCy0YvQsdGA0LDRgtGMINC/0LXRgNC40L7QtCDQsdC+0LvQtdC1IDMwINC00L3QtdC5JyxcbiAgfSxcbn0pO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBmcm9tOiBEYXRlO1xuICB0bzogRGF0ZTtcbiAgbGltaXRGcm9tOiBEYXRlIHwgbnVsbDtcbiAgbGltaXRUbzogRGF0ZSB8IG51bGw7XG4gIG1heFJhbmdlOiBudW1iZXI7XG4gIGFsbG93T25lRGF5UmFuZ2U/OiBib29sZWFuO1xuICByYW5nZVN0YXJ0OiBEYXRlO1xuICByYW5nZUVuZDogRGF0ZTtcbiAgaXNTdGFydFNlbGVjdGlvbj86IGJvb2xlYW47XG4gIGlzRW5kU2VsZWN0aW9uPzogYm9vbGVhbjtcbiAgc2VsZWN0UmFuZ2VFbmQ6IChzaG91bGRTY3JvbGw/OiBib29sZWFuKSA9PiB2b2lkO1xuICBzdG9wU2VsZWN0OiAoKSA9PiB2b2lkO1xuICBvblJhbmdlQ2hhbmdlOiAoe1xuICAgIHJhbmdlU3RhcnQsXG4gICAgcmFuZ2VFbmQsXG4gICAgaXNFbmRTZWxlY3Rpb24sXG4gIH06IHtcbiAgICByYW5nZVN0YXJ0OiBEYXRlO1xuICAgIHJhbmdlRW5kOiBEYXRlO1xuICAgIGlzRW5kU2VsZWN0aW9uPzogYm9vbGVhbjtcbiAgfSkgPT4gdm9pZDtcbiAgc2V0U2Nyb2xsVmlldzogKG5ld1Njcm9sbFZpZXc6IHsgaGVpZ2h0OiBudW1iZXI7IHRvcDogbnVtYmVyIH0pID0+IHZvaWQ7XG4gIG1vbnRoc09mZnNldHM6IFJlYWN0Lk11dGFibGVSZWZPYmplY3Q8UmVjb3JkPG51bWJlciwgbnVtYmVyPj47XG4gIHNldE1vbnRoT2Zmc2V0OiAobW9udGhJbmRleDogbnVtYmVyLCBvZmZzZXQ6IG51bWJlcikgPT4gdm9pZDtcbiAgaXNBdmlhPzogYm9vbGVhbjtcbiAgc2Nyb2xsUmVmOiBSZWFjdC5NdXRhYmxlUmVmT2JqZWN0PEhUTUxEaXZFbGVtZW50IHwgbnVsbD47XG59XG5cbmNvbnN0IEdyaWQgPSAoe1xuICBmcm9tLFxuICB0byxcbiAgbGltaXRGcm9tLFxuICBsaW1pdFRvLFxuICBtYXhSYW5nZSxcbiAgYWxsb3dPbmVEYXlSYW5nZSxcbiAgcmFuZ2VTdGFydCxcbiAgcmFuZ2VFbmQsXG4gIGlzU3RhcnRTZWxlY3Rpb24sXG4gIGlzRW5kU2VsZWN0aW9uLFxuICBzZWxlY3RSYW5nZUVuZCxcbiAgc3RvcFNlbGVjdCxcbiAgb25SYW5nZUNoYW5nZSxcbiAgc2V0U2Nyb2xsVmlldyxcbiAgbW9udGhzT2Zmc2V0cyxcbiAgc2V0TW9udGhPZmZzZXQsXG4gIGlzQXZpYSxcbiAgc2Nyb2xsUmVmLFxufTogUHJvcHMpID0+IHtcbiAgY29uc3QgW2hvdmVyZWREYXksIHNldEhvdmVyZWREYXldID0gdXNlU3RhdGU8RGF0ZSB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuXG4gIGNvbnN0IHNob3dlZEZyb20gPSB1c2VNZW1vKCgpID0+IHtcbiAgICBpZiAoaXNFbmRTZWxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBhbGxvd09uZURheVJhbmdlID8gcmFuZ2VTdGFydCA6IGFkZERheXMocmFuZ2VTdGFydCwgMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpbWl0RnJvbSB8fCBmcm9tO1xuICB9LCBbaXNFbmRTZWxlY3Rpb24sIGFsbG93T25lRGF5UmFuZ2UsIHJhbmdlU3RhcnQsIGxpbWl0RnJvbSwgZnJvbV0pO1xuXG4gIGNvbnN0IHNob3dlZFRvID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgcmVhbFRvID0gbGltaXRUbyB8fCB0bztcblxuICAgIGlmICghbWF4UmFuZ2UpIHtcbiAgICAgIHJldHVybiByZWFsVG87XG4gICAgfVxuXG4gICAgaWYgKGlzRW5kU2VsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gbWluKFthZGREYXlzKHJhbmdlU3RhcnQsIG1heFJhbmdlKSwgcmVhbFRvXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZERheXMocmVhbFRvLCAtMSk7XG4gIH0sIFtsaW1pdFRvLCB0bywgbWF4UmFuZ2UsIGlzRW5kU2VsZWN0aW9uLCByYW5nZVN0YXJ0XSk7XG5cbiAgY29uc3Qgc2hvd2VkUmFuZ2VTdGFydCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChpc1N0YXJ0U2VsZWN0aW9uICYmIGhvdmVyZWREYXkpIHtcbiAgICAgIHJldHVybiBzdGFydE9mRGF5KGhvdmVyZWREYXkpO1xuICAgIH1cblxuICAgIHJldHVybiByYW5nZVN0YXJ0O1xuICB9LCBbaXNTdGFydFNlbGVjdGlvbiwgaG92ZXJlZERheSwgcmFuZ2VTdGFydF0pO1xuXG4gIGNvbnN0IHNob3dlZFJhbmdlRW5kID0gdXNlTWVtbygoKSA9PiB7XG4gICAgbGV0IGlzSW5BdmFpbGFibGVSYW5nZSA9ICEhaG92ZXJlZERheTtcbiAgICBpZiAoaG92ZXJlZERheSkge1xuICAgICAgY29uc3QgaXNIb3ZlcmVkQWZ0ZXJTdGFydCA9IGFsbG93T25lRGF5UmFuZ2VcbiAgICAgICAgPyBob3ZlcmVkRGF5ID49IHJhbmdlU3RhcnRcbiAgICAgICAgOiBob3ZlcmVkRGF5ID4gcmFuZ2VTdGFydDtcbiAgICAgIGNvbnN0IGlzSG92ZXJlZEJlZm9yZUVuZCA9IGhvdmVyZWREYXkgPD0gc2hvd2VkVG87XG4gICAgICBpc0luQXZhaWxhYmxlUmFuZ2UgPSBpc0hvdmVyZWRBZnRlclN0YXJ0ICYmIGlzSG92ZXJlZEJlZm9yZUVuZDtcbiAgICB9XG5cbiAgICBpZiAoaXNTdGFydFNlbGVjdGlvbiAmJiBob3ZlcmVkRGF5KSB7XG4gICAgICByZXR1cm4gZW5kT2ZEYXkoaG92ZXJlZERheSk7XG4gICAgfVxuXG4gICAgaWYgKGlzRW5kU2VsZWN0aW9uICYmIGhvdmVyZWREYXkgJiYgaXNJbkF2YWlsYWJsZVJhbmdlKSB7XG4gICAgICByZXR1cm4gZW5kT2ZEYXkoaG92ZXJlZERheSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhbmdlRW5kO1xuICB9LCBbXG4gICAgYWxsb3dPbmVEYXlSYW5nZSxcbiAgICBob3ZlcmVkRGF5LFxuICAgIHJhbmdlU3RhcnQsXG4gICAgc2hvd2VkVG8sXG4gICAgaXNTdGFydFNlbGVjdGlvbixcbiAgICBpc0VuZFNlbGVjdGlvbixcbiAgICByYW5nZUVuZCxcbiAgXSk7XG5cbiAgY29uc3QgbW9udGhzID0gZ2V0TW9udGhzKGZyb20sIHRvKTtcbiAgY29uc3QgW2ZpcnN0UmVuZGVyZWRNb250aCwgc2V0Rmlyc3RSZW5kZXJlZE1vbnRoXSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCByZW5kZXJlZE1vbnRoc0NvdW50ID0gMztcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIGNvbnN0IG9uRGF5TW91c2VFbnRlciA9IHVzZUNhbGxiYWNrKHVwZGF0ZUhvdmVyZWREYXksIFtcbiAgICBpc1N0YXJ0U2VsZWN0aW9uLFxuICAgIGlzRW5kU2VsZWN0aW9uLFxuICAgIGxpbWl0RnJvbSxcbiAgICBsaW1pdFRvLFxuICBdKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICBjb25zdCBvbkRheU1vdXNlTGVhdmUgPSB1c2VDYWxsYmFjaygoKSA9PiB1cGRhdGVIb3ZlcmVkRGF5KG51bGwpLCBbXSk7XG5cbiAgdXNlRWZmZWN0KHVwZGF0ZVNjcm9sbFZpZXcpO1xuXG4gIGNvbnN0IGludGwgPSB1c2VJbnRsKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e2VtKCd3cmFwcGVyJykoKX1cbiAgICAgIHJvbGU9XCJidXR0b25cIlxuICAgICAgdGFiSW5kZXg9ey0xfVxuICAgICAgb25DbGljaz17b25DbGlja31cbiAgICA+XG4gICAgICA8RGF5c09mVGhlV2VlayAvPlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCdzZXBhcmF0b3InKSgpfSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e2VtKCdtb250aHNTY3JvbGxpbmcnKSgpfVxuICAgICAgICByZWY9e3Njcm9sbFJlZn1cbiAgICAgICAgb25TY3JvbGw9e3VwZGF0ZVNjcm9sbFZpZXd9XG4gICAgICA+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnbW9udGhzJykoKX0+XG4gICAgICAgICAge21vbnRocy5tYXAoKG1vbnRoLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlXG4gICAgICAgICAgICBjb25zdCBfc2V0TW9udGhPZmZzZXQgPSAob2Zmc2V0OiBudW1iZXIpID0+XG4gICAgICAgICAgICAgIHNldE1vbnRoT2Zmc2V0KGluZGV4LCBvZmZzZXQpO1xuICAgICAgICAgICAgY29uc3QgaXNKYW51YXJ5ID0gZ2V0TW9udGgobW9udGgpID09PSAwO1xuXG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5XG4gICAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudCBrZXk9e2luZGV4fT5cbiAgICAgICAgICAgICAgICB7aXNKYW51YXJ5ID8gKFxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCd5ZWFyJykoKX0+e2dldFllYXIobW9udGgpfTwvZGl2PlxuICAgICAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgICAgICAgIDxNb250aFxuICAgICAgICAgICAgICAgICAgbW9udGg9e21vbnRofVxuICAgICAgICAgICAgICAgICAgZnJvbT17c2hvd2VkRnJvbX1cbiAgICAgICAgICAgICAgICAgIHRvPXtzaG93ZWRUb31cbiAgICAgICAgICAgICAgICAgIHJhbmdlU3RhcnQ9e3Nob3dlZFJhbmdlU3RhcnR9XG4gICAgICAgICAgICAgICAgICByYW5nZUVuZD17c2hvd2VkUmFuZ2VFbmR9XG4gICAgICAgICAgICAgICAgICBpc1N0YXJ0U2VsZWN0aW9uPXtpc1N0YXJ0U2VsZWN0aW9ufVxuICAgICAgICAgICAgICAgICAgaXNFbmRTZWxlY3Rpb249e2lzRW5kU2VsZWN0aW9ufVxuICAgICAgICAgICAgICAgICAgb25Nb3VzZUVudGVyPXtvbkRheU1vdXNlRW50ZXJ9XG4gICAgICAgICAgICAgICAgICBvbk1vdXNlTGVhdmU9e29uRGF5TW91c2VMZWF2ZX1cbiAgICAgICAgICAgICAgICAgIHNldE1vbnRoT2Zmc2V0PXtfc2V0TW9udGhPZmZzZXR9XG4gICAgICAgICAgICAgICAgICBpc0Zha2U9e1xuICAgICAgICAgICAgICAgICAgICBpbmRleCA8IGZpcnN0UmVuZGVyZWRNb250aCB8fFxuICAgICAgICAgICAgICAgICAgICBpbmRleCA+PSBmaXJzdFJlbmRlcmVkTW9udGggKyByZW5kZXJlZE1vbnRoc0NvdW50XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBrZXk9e21vbnRoLnRvU3RyaW5nKCl9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2JvdHRvbUdyYWRpZW50JykoKX0gLz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgndmFsaWRhdGlvbicpKCl9PntlcnJvcn08L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcblxuICBmdW5jdGlvbiB1cGRhdGVIb3ZlcmVkRGF5KGRhdGU6IERhdGUgfCBudWxsKSB7XG4gICAgaWYgKGRhdGUgJiYgZW5kT2ZEYXkoZGF0ZSkgPCBmcm9tKSB7XG4gICAgICBzZXRFcnJvcihpbnRsLmZvcm1hdE1lc3NhZ2UobWVzc2FnZXMuZGF0ZUluUGFzdCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChkYXRlICYmIGVuZE9mRGF5KGRhdGUpIDwgc2hvd2VkRnJvbSkge1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gaXNBdmlhXG4gICAgICAgID8gaW50bC5mb3JtYXRNZXNzYWdlKG1lc3NhZ2VzLmRhdGVCZWZvcmVEZXBhcnR1cmUpXG4gICAgICAgIDogaW50bC5mb3JtYXRNZXNzYWdlKG1lc3NhZ2VzLmRhdGVCZWZvcmVDaGVja2luKTtcblxuICAgICAgc2V0RXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZGF0ZSAmJiBzdGFydE9mRGF5KGRhdGUpID4gdG8pIHtcbiAgICAgIHNldEVycm9yKG51bGwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChkYXRlICYmIHN0YXJ0T2ZEYXkoZGF0ZSkgPiBzaG93ZWRUbykge1xuICAgICAgc2V0RXJyb3IoaW50bC5mb3JtYXRNZXNzYWdlKG1lc3NhZ2VzLmRhdGVJc091dE9mUmFuZ2UpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZXRFcnJvcihudWxsKTtcbiAgICBzZXRIb3ZlcmVkRGF5KGRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlU2Nyb2xsVmlldygpIHtcbiAgICBpZiAoIXNjcm9sbFJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgeyBjbGllbnRIZWlnaHQsIHNjcm9sbEhlaWdodCwgc2Nyb2xsVG9wIH0gPSBzY3JvbGxSZWYuY3VycmVudDtcblxuICAgIGNvbnN0IGhlaWdodCA9IGNsaWVudEhlaWdodCAvIChzY3JvbGxIZWlnaHQgLyAxMDApO1xuICAgIGNvbnN0IHRvcCA9IHNjcm9sbFRvcCAvIChzY3JvbGxIZWlnaHQgLyAxMDApO1xuXG4gICAgc2V0U2Nyb2xsVmlldyh7IGhlaWdodCwgdG9wIH0pO1xuXG4gICAgT2JqZWN0LmtleXMobW9udGhzT2Zmc2V0cy5jdXJyZW50KS5zb21lKChpbmRleCkgPT4ge1xuICAgICAgaWYgKG1vbnRoc09mZnNldHMuY3VycmVudFtOdW1iZXIoaW5kZXgpXSA+IHNjcm9sbFRvcCkge1xuICAgICAgICBzZXRGaXJzdFJlbmRlcmVkTW9udGgoaW5kZXggPyBOdW1iZXIoaW5kZXgpIC0gMSA6IDApO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50OiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxEaXZFbGVtZW50LCBNb3VzZUV2ZW50Pikge1xuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldCBhcyBIVE1MRGl2RWxlbWVudDtcbiAgICBjb25zdCB7IGRheSB9ID0gdGFyZ2V0LmRhdGFzZXQ7XG5cbiAgICBpZiAoIWRheSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG9uRGF5Q2xpY2sobmV3IERhdGUoZGF5KSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkRheUNsaWNrKGRhdGU6IERhdGUpIHtcbiAgICBpZiAodmFsaWRhdGVEYXlTZXQoZGF0ZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgbmV3UmFuZ2VTdGFydCA9IHJhbmdlU3RhcnQ7XG4gICAgbGV0IG5ld1JhbmdlRW5kID0gcmFuZ2VFbmQ7XG5cbiAgICBpZiAoaXNTdGFydFNlbGVjdGlvbikge1xuICAgICAgbmV3UmFuZ2VTdGFydCA9IGRhdGU7XG5cbiAgICAgIGNvbnN0IGlzU3RhcnRBZnRlckVuZCA9IGRhdGUgPj0gcmFuZ2VFbmQ7XG4gICAgICBjb25zdCBuZXdSYW5nZSA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhuZXdSYW5nZUVuZCwgbmV3UmFuZ2VTdGFydCk7XG4gICAgICBjb25zdCBpc01vcmVUaGVuTWF4UmFuZ2UgPSAhIW1heFJhbmdlICYmIG5ld1JhbmdlID4gbWF4UmFuZ2U7XG5cbiAgICAgIGlmIChpc1N0YXJ0QWZ0ZXJFbmQgfHwgaXNNb3JlVGhlbk1heFJhbmdlKSB7XG4gICAgICAgIG5ld1JhbmdlRW5kID0gYWRkRGF5cyhkYXRlLCAxKTtcbiAgICAgIH1cblxuICAgICAgc2VsZWN0UmFuZ2VFbmQoZmFsc2UpO1xuICAgIH0gZWxzZSBpZiAoaXNFbmRTZWxlY3Rpb24pIHtcbiAgICAgIG5ld1JhbmdlRW5kID0gZGF0ZTtcbiAgICAgIHN0b3BTZWxlY3QoKTtcbiAgICB9XG5cbiAgICBvblJhbmdlQ2hhbmdlKHtcbiAgICAgIHJhbmdlU3RhcnQ6IG5ld1JhbmdlU3RhcnQsXG4gICAgICByYW5nZUVuZDogbmV3UmFuZ2VFbmQsXG4gICAgICBpc0VuZFNlbGVjdGlvbixcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbGlkYXRlRGF5U2V0KGRhdGU6IERhdGUpIHtcbiAgICBpZiAoXG4gICAgICAhaXNXaXRoaW5JbnRlcnZhbChkYXRlLCB7XG4gICAgICAgIHN0YXJ0OiBzaG93ZWRGcm9tLFxuICAgICAgICBlbmQ6IHNob3dlZFRvLFxuICAgICAgfSlcbiAgICApIHtcbiAgICAgIHJldHVybiAnZGF0ZV9pc19vdXRfb2ZfcmFuZ2UnO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtZW1vKEdyaWQpO1xuIiwiaW1wb3J0IHRvRGF0ZSBmcm9tICcuLi90b0RhdGUvaW5kZXguanMnO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tICcuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyc7XG4vKipcbiAqIEBuYW1lIG1pblxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIGVhcmxpZXN0IG9mIHRoZSBnaXZlbiBkYXRlcy5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZWFybGllc3Qgb2YgdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogLSBgbWluYCBmdW5jdGlvbiBub3cgYWNjZXB0cyBhbiBhcnJheSBvZiBkYXRlcyByYXRoZXIgdGhhbiBzcHJlYWQgYXJndW1lbnRzLlxuICpcbiAqICAgYGBgamF2YXNjcmlwdFxuICogICAvLyBCZWZvcmUgdjIuMC4wXG4gKiAgIHZhciBkYXRlMSA9IG5ldyBEYXRlKDE5ODksIDYsIDEwKVxuICogICB2YXIgZGF0ZTIgPSBuZXcgRGF0ZSgxOTg3LCAxLCAxMSlcbiAqICAgdmFyIG1pbkRhdGUgPSBtaW4oZGF0ZTEsIGRhdGUyKVxuICpcbiAqICAgLy8gdjIuMC4wIG9ud2FyZDpcbiAqICAgdmFyIGRhdGVzID0gW25ldyBEYXRlKDE5ODksIDYsIDEwKSwgbmV3IERhdGUoMTk4NywgMSwgMTEpXVxuICogICB2YXIgbWluRGF0ZSA9IG1pbihkYXRlcylcbiAqICAgYGBgXG4gKlxuICogQHBhcmFtIHtEYXRlW118TnVtYmVyW119IGRhdGVzQXJyYXkgLSB0aGUgZGF0ZXMgdG8gY29tcGFyZVxuICogQHJldHVybnMge0RhdGV9IHRoZSBlYXJsaWVzdCBvZiB0aGUgZGF0ZXNcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCBvZiB0aGVzZSBkYXRlcyBpcyB0aGUgZWFybGllc3Q/XG4gKiB2YXIgcmVzdWx0ID0gbWluKFtcbiAqICAgbmV3IERhdGUoMTk4OSwgNiwgMTApLFxuICogICBuZXcgRGF0ZSgxOTg3LCAxLCAxMSksXG4gKiAgIG5ldyBEYXRlKDE5OTUsIDYsIDIpLFxuICogICBuZXcgRGF0ZSgxOTkwLCAwLCAxKVxuICogXSlcbiAqIC8vPT4gV2VkIEZlYiAxMSAxOTg3IDAwOjAwOjAwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWluKGRpcnR5RGF0ZXNBcnJheSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGVzQXJyYXk7IC8vIGBkaXJ0eURhdGVzQXJyYXlgIGlzIEFycmF5LCBTZXQgb3IgTWFwLCBvciBvYmplY3Qgd2l0aCBjdXN0b20gYGZvckVhY2hgIG1ldGhvZFxuXG4gIGlmIChkaXJ0eURhdGVzQXJyYXkgJiYgdHlwZW9mIGRpcnR5RGF0ZXNBcnJheS5mb3JFYWNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZGF0ZXNBcnJheSA9IGRpcnR5RGF0ZXNBcnJheTsgLy8gSWYgYGRpcnR5RGF0ZXNBcnJheWAgaXMgQXJyYXktbGlrZSBPYmplY3QsIGNvbnZlcnQgdG8gQXJyYXkuXG4gIH0gZWxzZSBpZiAodHlwZW9mIGRpcnR5RGF0ZXNBcnJheSA9PT0gJ29iamVjdCcgJiYgZGlydHlEYXRlc0FycmF5ICE9PSBudWxsKSB7XG4gICAgZGF0ZXNBcnJheSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGRpcnR5RGF0ZXNBcnJheSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYGRpcnR5RGF0ZXNBcnJheWAgaXMgbm9uLWl0ZXJhYmxlLCByZXR1cm4gSW52YWxpZCBEYXRlXG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cblxuICB2YXIgcmVzdWx0O1xuICBkYXRlc0FycmF5LmZvckVhY2goZnVuY3Rpb24gKGRpcnR5RGF0ZSkge1xuICAgIHZhciBjdXJyZW50RGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuXG4gICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkIHx8IHJlc3VsdCA+IGN1cnJlbnREYXRlIHx8IGlzTmFOKGN1cnJlbnREYXRlKSkge1xuICAgICAgcmVzdWx0ID0gY3VycmVudERhdGU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdCB8fCBuZXcgRGF0ZShOYU4pO1xufSIsImltcG9ydCBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIGZyb20gJy4uL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qcyc7XG5pbXBvcnQgc3RhcnRPZkRheSBmcm9tICcuLi9zdGFydE9mRGF5L2luZGV4LmpzJztcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnO1xudmFyIE1JTExJU0VDT05EU19JTl9EQVkgPSA4NjQwMDAwMDtcbi8qKlxuICogQG5hbWUgZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIGRheXMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBjYWxlbmRhciBkYXlzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLiBUaGlzIG1lYW5zIHRoYXQgdGhlIHRpbWVzIGFyZSByZW1vdmVkXG4gKiBmcm9tIHRoZSBkYXRlcyBhbmQgdGhlbiB0aGUgZGlmZmVyZW5jZSBpbiBkYXlzIGlzIGNhbGN1bGF0ZWQuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBsYXRlciBkYXRlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgZWFybGllciBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIGRheXNcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSG93IG1hbnkgY2FsZW5kYXIgZGF5cyBhcmUgYmV0d2VlblxuICogLy8gMiBKdWx5IDIwMTEgMjM6MDA6MDAgYW5kIDIgSnVseSAyMDEyIDAwOjAwOjAwP1xuICogdmFyIHJlc3VsdCA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhcbiAqICAgbmV3IERhdGUoMjAxMiwgNiwgMiwgMCwgMCksXG4gKiAgIG5ldyBEYXRlKDIwMTEsIDYsIDIsIDIzLCAwKVxuICogKVxuICogLy89PiAzNjZcbiAqIC8vIEhvdyBtYW55IGNhbGVuZGFyIGRheXMgYXJlIGJldHdlZW5cbiAqIC8vIDIgSnVseSAyMDExIDIzOjU5OjAwIGFuZCAzIEp1bHkgMjAxMSAwMDowMTowMD9cbiAqIHZhciByZXN1bHQgPSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoXG4gKiAgIG5ldyBEYXRlKDIwMTEsIDYsIDMsIDAsIDEpLFxuICogICBuZXcgRGF0ZSgyMDExLCA2LCAyLCAyMywgNTkpXG4gKiApXG4gKiAvLz0+IDFcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoZGlydHlEYXRlTGVmdCwgZGlydHlEYXRlUmlnaHQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBzdGFydE9mRGF5TGVmdCA9IHN0YXJ0T2ZEYXkoZGlydHlEYXRlTGVmdCk7XG4gIHZhciBzdGFydE9mRGF5UmlnaHQgPSBzdGFydE9mRGF5KGRpcnR5RGF0ZVJpZ2h0KTtcbiAgdmFyIHRpbWVzdGFtcExlZnQgPSBzdGFydE9mRGF5TGVmdC5nZXRUaW1lKCkgLSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKHN0YXJ0T2ZEYXlMZWZ0KTtcbiAgdmFyIHRpbWVzdGFtcFJpZ2h0ID0gc3RhcnRPZkRheVJpZ2h0LmdldFRpbWUoKSAtIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoc3RhcnRPZkRheVJpZ2h0KTsgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIGRheSBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIGRheSBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoKHRpbWVzdGFtcExlZnQgLSB0aW1lc3RhbXBSaWdodCkgLyBNSUxMSVNFQ09ORFNfSU5fREFZKTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gJy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbi8qKlxuICogQG5hbWUgZ2V0WWVhclxuICogQGNhdGVnb3J5IFllYXIgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSB5ZWFyIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSB5ZWFyIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBnaXZlbiBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgeWVhclxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoaWNoIHllYXIgaXMgMiBKdWx5IDIwMTQ/XG4gKiB2YXIgcmVzdWx0ID0gZ2V0WWVhcihuZXcgRGF0ZSgyMDE0LCA2LCAyKSlcbiAqIC8vPT4gMjAxNFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFllYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgcmV0dXJuIHllYXI7XG59IiwiLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbmltcG9ydCBSZWFjdCwge1xuICB1c2VTdGF0ZSxcbiAgdXNlUmVmLFxuICB1c2VDYWxsYmFjayxcbiAgdXNlTGF5b3V0RWZmZWN0LFxuICBtZW1vLFxufSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc1NhbWVNb250aCB9IGZyb20gJ2RhdGUtZm5zJztcbmltcG9ydCB7IGlzTW9iaWxlIH0gZnJvbSAnLi4vaGVscGVycy9hZGFwdGl2ZSc7XG5cbmltcG9ydCB7IGdldE1vbnRocyB9IGZyb20gJy4vaGVscGVycyc7XG5cbmltcG9ydCBNb250aHNMaXN0IGZyb20gJy4vTW9udGhzTGlzdCc7XG5pbXBvcnQgR3JpZCBmcm9tICcuL0dyaWQnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBmcm9tOiBEYXRlO1xuICB0bzogRGF0ZTtcbiAgbGltaXRGcm9tOiBEYXRlIHwgbnVsbDtcbiAgbGltaXRUbzogRGF0ZSB8IG51bGw7XG4gIG1heFJhbmdlOiBudW1iZXI7XG4gIGFsbG93T25lRGF5UmFuZ2U/OiBib29sZWFuO1xuICByYW5nZVN0YXJ0OiBEYXRlO1xuICByYW5nZUVuZDogRGF0ZTtcbiAgaXNTdGFydFNlbGVjdGlvbjogYm9vbGVhbjtcbiAgaXNFbmRTZWxlY3Rpb246IGJvb2xlYW47XG4gIHNlbGVjdFJhbmdlRW5kOiAoc2hvdWxkU2Nyb2xsPzogYm9vbGVhbikgPT4gdm9pZDtcbiAgc3RvcFNlbGVjdDogKCkgPT4gdm9pZDtcbiAgb25SYW5nZUNoYW5nZTogKHtcbiAgICByYW5nZVN0YXJ0LFxuICAgIHJhbmdlRW5kLFxuICAgIGlzRW5kU2VsZWN0aW9uLFxuICB9OiB7XG4gICAgcmFuZ2VTdGFydDogRGF0ZTtcbiAgICByYW5nZUVuZDogRGF0ZTtcbiAgICBpc0VuZFNlbGVjdGlvbj86IGJvb2xlYW47XG4gIH0pID0+IHZvaWQ7XG4gIGlzQXZpYT86IGJvb2xlYW47XG59XG5cbmNvbnN0IENhbGVuZGFyID0gKHtcbiAgZnJvbSxcbiAgdG8sXG4gIGxpbWl0RnJvbSxcbiAgbGltaXRUbyxcbiAgbWF4UmFuZ2UsXG4gIGFsbG93T25lRGF5UmFuZ2UsXG4gIHJhbmdlU3RhcnQsXG4gIHJhbmdlRW5kLFxuICBpc1N0YXJ0U2VsZWN0aW9uLFxuICBpc0VuZFNlbGVjdGlvbixcbiAgc2VsZWN0UmFuZ2VFbmQsXG4gIHN0b3BTZWxlY3QsXG4gIG9uUmFuZ2VDaGFuZ2UsXG4gIGlzQXZpYSxcbn06IFByb3BzKSA9PiB7XG4gIGNvbnN0IFtzY3JvbGxWaWV3LCBzZXRTY3JvbGxWaWV3XSA9IHVzZVN0YXRlKHsgdG9wOiAwLCBoZWlnaHQ6IDAgfSk7XG4gIGNvbnN0IG1vbnRoc09mZnNldHMgPSB1c2VSZWY8UmVjb3JkPG51bWJlciwgbnVtYmVyPj4oe30pO1xuICBjb25zdCBzY3JvbGxSZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQgfCBudWxsPihudWxsKTtcblxuICBjb25zdCBzaG91bGRTY3JvbGxNb250aHNMaXN0UmVmID0gdXNlUmVmPGJvb2xlYW4+KHRydWUpO1xuXG4gIGNvbnN0IF9zY3JvbGxUb01vbnRoID0gdXNlQ2FsbGJhY2soc2Nyb2xsVG9Nb250aCwgW10pO1xuICBjb25zdCBfc2V0TW9udGhPZmZzZXQgPSB1c2VDYWxsYmFjayhzZXRNb250aE9mZnNldCwgW10pO1xuICBjb25zdCBfc2V0U2Nyb2xsVmlldyA9IHVzZUNhbGxiYWNrKFxuICAgIChuZXdTY3JvbGxWaWV3KSA9PiB7XG4gICAgICBpZiAoXG4gICAgICAgIHNjcm9sbFZpZXcudG9wID09PSBuZXdTY3JvbGxWaWV3LnRvcCAmJlxuICAgICAgICBzY3JvbGxWaWV3LmhlaWdodCA9PT0gbmV3U2Nyb2xsVmlldy5oZWlnaHRcbiAgICAgICkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNldFNjcm9sbFZpZXcobmV3U2Nyb2xsVmlldyk7XG4gICAgfSxcbiAgICBbc2Nyb2xsVmlld11cbiAgKTtcblxuICBjb25zdCBtb250aHMgPSBnZXRNb250aHMoZnJvbSwgdG8pO1xuXG4gIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgbW9udGhJbmRleCA9IG1vbnRocy5maW5kSW5kZXgoKG1vbnRoKSA9PiB7XG4gICAgICByZXR1cm4gaXNTYW1lTW9udGgocmFuZ2VTdGFydCwgbW9udGgpO1xuICAgIH0pO1xuXG4gICAgc2Nyb2xsVG9Nb250aChtb250aEluZGV4KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICB7IWlzTW9iaWxlKCkgJiYgKFxuICAgICAgICA8TW9udGhzTGlzdFxuICAgICAgICAgIGZyb209e2Zyb219XG4gICAgICAgICAgdG89e3RvfVxuICAgICAgICAgIHNjcm9sbFZpZXc9e3Njcm9sbFZpZXd9XG4gICAgICAgICAgc2Nyb2xsVG9Nb250aD17X3Njcm9sbFRvTW9udGh9XG4gICAgICAgICAgc2hvdWxkU2Nyb2xsUmVmPXtzaG91bGRTY3JvbGxNb250aHNMaXN0UmVmfVxuICAgICAgICAvPlxuICAgICAgKX1cbiAgICAgIDxHcmlkXG4gICAgICAgIGZyb209e2Zyb219XG4gICAgICAgIHRvPXt0b31cbiAgICAgICAgbGltaXRGcm9tPXtsaW1pdEZyb219XG4gICAgICAgIGxpbWl0VG89e2xpbWl0VG99XG4gICAgICAgIG1heFJhbmdlPXttYXhSYW5nZX1cbiAgICAgICAgYWxsb3dPbmVEYXlSYW5nZT17YWxsb3dPbmVEYXlSYW5nZX1cbiAgICAgICAgcmFuZ2VTdGFydD17cmFuZ2VTdGFydH1cbiAgICAgICAgcmFuZ2VFbmQ9e3JhbmdlRW5kfVxuICAgICAgICBpc1N0YXJ0U2VsZWN0aW9uPXtpc1N0YXJ0U2VsZWN0aW9ufVxuICAgICAgICBpc0VuZFNlbGVjdGlvbj17aXNFbmRTZWxlY3Rpb259XG4gICAgICAgIHNlbGVjdFJhbmdlRW5kPXtzZWxlY3RSYW5nZUVuZH1cbiAgICAgICAgc3RvcFNlbGVjdD17c3RvcFNlbGVjdH1cbiAgICAgICAgb25SYW5nZUNoYW5nZT17b25SYW5nZUNoYW5nZX1cbiAgICAgICAgc2V0U2Nyb2xsVmlldz17X3NldFNjcm9sbFZpZXd9XG4gICAgICAgIG1vbnRoc09mZnNldHM9e21vbnRoc09mZnNldHN9XG4gICAgICAgIHNldE1vbnRoT2Zmc2V0PXtfc2V0TW9udGhPZmZzZXR9XG4gICAgICAgIGlzQXZpYT17aXNBdmlhfVxuICAgICAgICBzY3JvbGxSZWY9e3Njcm9sbFJlZn1cbiAgICAgIC8+XG4gICAgPC8+XG4gICk7XG5cbiAgZnVuY3Rpb24gc2Nyb2xsVG9Nb250aChpbmRleDogbnVtYmVyKSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gbW9udGhzT2Zmc2V0cy5jdXJyZW50W2luZGV4XTtcbiAgICBjb25zdCB0aW1lV2l0aG91dFNjcm9sbCA9IDEwMDA7XG5cbiAgICBpZiAoIXNjcm9sbFJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2hvdWxkU2Nyb2xsTW9udGhzTGlzdFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBzaG91bGRTY3JvbGxNb250aHNMaXN0UmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIH0sIHRpbWVXaXRob3V0U2Nyb2xsKTtcblxuICAgIGlmICghc2Nyb2xsUmVmLmN1cnJlbnQuc2Nyb2xsVG8pIHtcbiAgICAgIHNjcm9sbFJlZi5jdXJyZW50LnNjcm9sbFRvcCA9IG9mZnNldDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzY3JvbGxSZWYuY3VycmVudC5zY3JvbGxUbyh7XG4gICAgICB0b3A6IG9mZnNldCxcbiAgICAgIGJlaGF2aW9yOiAnc21vb3RoJyxcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldE1vbnRoT2Zmc2V0KG1vbnRoSW5kZXg6IG51bWJlciwgb2Zmc2V0OiBudW1iZXIpIHtcbiAgICBpZiAoXG4gICAgICBtb250aHNPZmZzZXRzLmN1cnJlbnRbbW9udGhJbmRleF0gJiZcbiAgICAgIG1vbnRoc09mZnNldHMuY3VycmVudFttb250aEluZGV4XSA+IDBcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBtb250aHNPZmZzZXRzLmN1cnJlbnRbbW9udGhJbmRleF0gPSBvZmZzZXQ7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW8oQ2FsZW5kYXIpO1xuIiwiaW1wb3J0IFJlYWN0LCB7IGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL1BvcHVwLmNzcyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHRvcD86IG51bWJlcjtcbiAgbGVmdD86IG51bWJlcjtcbiAgcmlnaHQ/OiBudW1iZXI7XG4gIHdpZHRoPzogbnVtYmVyO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xuICByb290RWxlbWVudD86IEVsZW1lbnQ7XG4gIG9uTW91c2VEb3duPzogKGV2ZW50OiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxEaXZFbGVtZW50LCBNb3VzZUV2ZW50PikgPT4gdm9pZDtcbiAgb25Ub3VjaFN0YXJ0PzogKGV2ZW50OiBSZWFjdC5Ub3VjaEV2ZW50PEhUTUxEaXZFbGVtZW50PikgPT4gdm9pZDtcbn1cblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuY29uc3QgUG9wdXAgPSAoXG4gIHtcbiAgICB0b3AsXG4gICAgbGVmdCxcbiAgICByaWdodCxcbiAgICB3aWR0aCxcbiAgICBjbGFzc05hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgcm9vdEVsZW1lbnQgPSBkb2N1bWVudC5ib2R5LFxuICAgIG9uTW91c2VEb3duLFxuICAgIG9uVG91Y2hTdGFydCxcbiAgfTogUHJvcHMsXG4gIHJlZjogUmVhY3QuUmVmPEhUTUxEaXZFbGVtZW50PlxuKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29udGFpbnMocm9vdEVsZW1lbnQpICYmXG4gICAgICAgIFJlYWN0RE9NLmNyZWF0ZVBvcnRhbChcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvbm8tc3RhdGljLWVsZW1lbnQtaW50ZXJhY3Rpb25zXG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3NOYW1lPXtlbSgncG9wdXAnKSh1bmRlZmluZWQsIGNsYXNzTmFtZSl9XG4gICAgICAgICAgICBvbk1vdXNlRG93bj17b25Nb3VzZURvd259XG4gICAgICAgICAgICBvblRvdWNoU3RhcnQ9e29uVG91Y2hTdGFydH1cbiAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgIHRvcDogdHlwZW9mIHRvcCA9PT0gJ251bWJlcicgPyBgJHt0b3B9cHhgIDogJycsXG4gICAgICAgICAgICAgIGxlZnQ6IHR5cGVvZiBsZWZ0ID09PSAnbnVtYmVyJyA/IGAke2xlZnR9cHhgIDogJycsXG4gICAgICAgICAgICAgIHJpZ2h0OiB0eXBlb2YgcmlnaHQgPT09ICdudW1iZXInID8gYCR7cmlnaHR9cHhgIDogJycsXG4gICAgICAgICAgICAgIHdpZHRoOiB0eXBlb2Ygd2lkdGggPT09ICdudW1iZXInID8gYCR7d2lkdGh9cHhgIDogJycsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgcmVmPXtyZWZ9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICAgIDwvZGl2PixcbiAgICAgICAgICByb290RWxlbWVudFxuICAgICAgICApfVxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZm9yd2FyZFJlZihQb3B1cCk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNzc21lbSBmcm9tICdjc3NtZW0nO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vQ29udHJvbEdyb3VwLmNzcyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHdpZGU/OiBib29sZWFuO1xuICB2ZXJ0aWNhbD86IGJvb2xlYW47XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgc3R5bGU/OiBSZWFjdC5DU1NQcm9wZXJ0aWVzO1xufVxuXG5jb25zdCBlbSA9IGNzc21lbShzdHlsZXMpO1xuXG5jb25zdCBDb250cm9sR3JvdXA6IFJlYWN0LkZDPFByb3BzPiA9ICh7XG4gIHdpZGUsXG4gIHZlcnRpY2FsLFxuICBjbGFzc05hbWUgPSAnJyxcbiAgY2hpbGRyZW4sXG4gIHN0eWxlLFxufSkgPT4ge1xuICBjb25zdCB2ZXJ0aWNhbEdsb2JhbENsYXNzID0gdmVydGljYWwgPyAnY29udHJvbEdyb3VwVmVydGljYWwnIDogJyc7XG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtlbSgnY29udHJvbEdyb3VwJykoeyB3aWRlLCB2ZXJ0aWNhbCB9LCBbXG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgJ2NvbnRyb2xHcm91cCcsXG4gICAgICAgIHZlcnRpY2FsR2xvYmFsQ2xhc3MsXG4gICAgICBdKX1cbiAgICAgIHN0eWxlPXtzdHlsZX1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb250cm9sR3JvdXA7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNzc21lbSBmcm9tICdjc3NtZW0nO1xuXG5pbXBvcnQgQXJyb3dEb3duIGZyb20gJ2NvbXBvbmVudHMvSWNvbi9BcnJvd0Rvd24nO1xuaW1wb3J0IFBvcHVwIGZyb20gJ2NvbXBvbmVudHMvUG9wdXAnO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vTW9iaWxlU3VnZ2VzdC5jc3MnO1xuXG5jb25zdCBlbSA9IGNzc21lbShzdHlsZXMpO1xuXG5jb25zdCBNb2JpbGVTdWdnZXN0ID0gKHtcbiAgY29udHJvbCxcbiAgY29udGVudCxcbiAgb25DbG9zZSxcbiAgaGlkZGVuLFxufSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxQb3B1cCBjbGFzc05hbWU9e2VtKCd3cmFwcGVyJykoeyBoaWRkZW4gfSl9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCdjb250cm9scycpKCl9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2JhY2tCdXR0b24nKSgpfVxuICAgICAgICAgIG9uQ2xpY2s9e29uQ2xvc2V9XG4gICAgICAgID5cbiAgICAgICAgICA8QXJyb3dEb3duIGNsYXNzTmFtZT17ZW0oJ2Fycm93TGVmdCcpKCl9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7Y29udHJvbH1cbiAgICAgIDwvZGl2PlxuXG4gICAgICB7Y29udGVudH1cbiAgICA8L1BvcHVwPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTW9iaWxlU3VnZ2VzdDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBhY3Rpb25zIGFzIGhvbGlkYXlzQWN0aW9ucyB9IGZyb20gJy4uL3JlZHVjZXJzL2hvbGlkYXlzJztcbmltcG9ydCB1c2VCb3VuZHMgZnJvbSAnLi4vaG9va3MvdXNlQm91bmRzJztcbmltcG9ydCB7IGlzTW9iaWxlLCBpc0Rlc2t0b3BVcCB9IGZyb20gJy4uL2hlbHBlcnMvYWRhcHRpdmUnO1xuXG5pbXBvcnQgQXJyb3dEb3duIGZyb20gJ2NvbXBvbmVudHMvSWNvbi9BcnJvd0Rvd24nO1xuaW1wb3J0IENsaWNrT3V0c2lkZSBmcm9tICcuLi9DbGlja091dHNpZGUnO1xuaW1wb3J0IENhbGVuZGFyIGZyb20gJ2NvbXBvbmVudHMvQ2FsZW5kYXInO1xuaW1wb3J0IFBvcHVwIGZyb20gJ2NvbXBvbmVudHMvUG9wdXAnO1xuaW1wb3J0IElucHV0IGZyb20gJ2NvbXBvbmVudHMvSW5wdXQnO1xuaW1wb3J0IENvbnRyb2xHcm91cCBmcm9tICdjb21wb25lbnRzL0NvbnRyb2xHcm91cCc7XG5cbmltcG9ydCBNb2JpbGVTdWdnZXN0IGZyb20gJy4vTW9iaWxlU3VnZ2VzdCc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vRGF0ZXBpY2tlci5jc3MnO1xuaW1wb3J0IHBvcHVwU3R5bGVzIGZyb20gJ2NvbXBvbmVudHMvUG9wdXAvUG9wdXAuY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuZXhwb3J0IGNvbnN0IERhdGVQaWNrZXIgPSAoe1xuICAvLyByZW5kZXJlZCByYW5nZVxuICBmcm9tLFxuICB0byxcbiAgLy8gY2hvb3NhYmxlIHJhbmdlXG4gIGxpbWl0RnJvbSA9IG51bGwsXG4gIGxpbWl0VG8gPSBudWxsLFxuICBsYWJlbEZyb20sXG4gIGxhYmVsVG8sXG4gIGlzUmFuZ2VTZWxlY3QsXG4gIGFsbG93T25lRGF5UmFuZ2UsXG4gIG1heFJhbmdlLFxuICByYW5nZVN0YXJ0LFxuICByYW5nZUVuZCxcbiAgb25SYW5nZUNoYW5nZSxcbiAgbG9jYWxlLFxuICBsb2FkSG9saWRheXMsXG4gIGluUG9wdXAsXG4gIGlzRGVtbyxcbiAgaXNBdmlhLFxuICBzZWFyY2hGb3JtUmVmLFxuICByb290RWxlbWVudFxufSkgPT4ge1xuICBjb25zdCBub1Njcm9sbENsYXNzID0gJ292ZXJsYXlwb3B1cC1ub3Njcm9sbCc7XG5cbiAgY29uc3QgW2lzU3RhcnRTZWxlY3Rpb24sIHNldFN0YXJ0U2VsZWN0aW9uXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2lzRW5kU2VsZWN0aW9uLCBzZXRFbmRTZWxlY3Rpb25dID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IFt3cmFwcGVyUmVmLCBib3VuZHNdID0gdXNlQm91bmRzKHJvb3RFbGVtZW50KTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxvYWRIb2xpZGF5cygpO1xuICB9LCBbXSk7XG5cbiAgLyoqXG4gICAqIENhbGVuZGFyIHNob3VsZCBiZSBhbHdheXMgcmVuZGVyZWQgYmFjYXVzZSBpcyBsYXJnZSAoMTIgbW9udGhzKVxuICAgKiBhbmQgcmVuZGVyaW5nIG9uIGRlbWFuZCB3b3JrcyB3aXRoIHZpc2libGUgbGFnXG4gICAqL1xuICBjb25zdCBpc0NhbGVuZGFyVmlzaWJsZSA9IGlzU3RhcnRTZWxlY3Rpb24gfHwgaXNFbmRTZWxlY3Rpb247XG5cbiAgY29uc3Qgc2Nyb2xsRm9ybSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAoIWlzRGVza3RvcFVwKCkgJiYgIWlzRGVtbykge1xuICAgICAgc2VhcmNoRm9ybVJlZi5jdXJyZW50LnNjcm9sbEludG9WaWV3KHtcbiAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGluUG9wdXAgJiYgcm9vdEVsZW1lbnQpIHtcbiAgICAgIHJvb3RFbGVtZW50LnNjcm9sbFRvKHtcbiAgICAgICAgdG9wOiAxMjAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgfSk7XG4gICAgfVxuICB9LCBbXSk7XG5cbiAgY29uc3Qgc2VsZWN0UmFuZ2VTdGFydCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAoaXNNb2JpbGUoKSkge1xuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKG5vU2Nyb2xsQ2xhc3MpO1xuICAgIH1cblxuICAgIHNldFN0YXJ0U2VsZWN0aW9uKHRydWUpO1xuICAgIHNldEVuZFNlbGVjdGlvbihmYWxzZSk7XG5cbiAgICBzY3JvbGxGb3JtKCk7XG4gIH0sIFtpc01vYmlsZSgpXSk7XG5cbiAgY29uc3Qgc2VsZWN0UmFuZ2VFbmQgPSB1c2VDYWxsYmFjayhcbiAgICAoc2hvdWxkU2Nyb2xsID0gdHJ1ZSkgPT4ge1xuICAgICAgaWYgKGlzTW9iaWxlKCkpIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKG5vU2Nyb2xsQ2xhc3MpO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGFydFNlbGVjdGlvbihmYWxzZSk7XG4gICAgICBpZiAoaXNSYW5nZVNlbGVjdCkge1xuICAgICAgICBzZXRFbmRTZWxlY3Rpb24odHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRFbmRTZWxlY3Rpb24oZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2hvdWxkU2Nyb2xsKSB7XG4gICAgICAgIHNjcm9sbEZvcm0oKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtpc1JhbmdlU2VsZWN0LCBpc01vYmlsZSgpXVxuICApO1xuXG4gIGNvbnN0IHN0b3BTZWxlY3QgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKGlzTW9iaWxlKCkpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShub1Njcm9sbENsYXNzKTtcbiAgICB9XG5cbiAgICBzZXRTdGFydFNlbGVjdGlvbihmYWxzZSk7XG4gICAgc2V0RW5kU2VsZWN0aW9uKGZhbHNlKTtcbiAgfSwgW2lzTW9iaWxlKCldKTtcblxuICBjb25zdCB0b2dnbGVSYW5nZVN0YXJ0ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChpc1N0YXJ0U2VsZWN0aW9uKSB7XG4gICAgICBzdG9wU2VsZWN0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdFJhbmdlU3RhcnQoKTtcbiAgICB9XG4gIH0sIFtpc1N0YXJ0U2VsZWN0aW9uLCBpc01vYmlsZSgpXSk7XG5cbiAgY29uc3QgdG9nZ2xlUmFuZ2VFbmQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKGlzRW5kU2VsZWN0aW9uKSB7XG4gICAgICBzdG9wU2VsZWN0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdFJhbmdlRW5kKCk7XG4gICAgfVxuICB9LCBbaXNSYW5nZVNlbGVjdCwgaXNFbmRTZWxlY3Rpb24sIGlzTW9iaWxlKCldKTtcblxuICBjb25zdCBjb250cm9sID0gKFxuICAgIDxDb250cm9sR3JvdXAgY2xhc3NOYW1lPXtlbSgnZ3JvdXAnKSgpfT5cbiAgICAgIDxJbnB1dFxuICAgICAgICBjbGFzc05hbWU9e2VtKCdpbnB1dCcpKCl9XG4gICAgICAgIG9uQ2xpY2s9e3RvZ2dsZVJhbmdlU3RhcnR9XG4gICAgICAgIHBzZXVkbz17dHJ1ZX1cbiAgICAgICAgZm9jdXNlZD17aXNTdGFydFNlbGVjdGlvbn1cbiAgICAgICAgc2l6ZT1cIm1cIlxuICAgICAgICBsYWJlbD17bGFiZWxGcm9tfVxuICAgICAgICB2YWx1ZT17Zm9ybWF0RGF0ZShyYW5nZVN0YXJ0LCBsb2NhbGUpfVxuICAgICAgLz5cbiAgICAgIHtpc1JhbmdlU2VsZWN0ICYmIChcbiAgICAgICAgPElucHV0XG4gICAgICAgICAgY2xhc3NOYW1lPXtlbSgnaW5wdXQnKSgpfVxuICAgICAgICAgIG9uQ2xpY2s9e3RvZ2dsZVJhbmdlRW5kfVxuICAgICAgICAgIGZvY3VzZWQ9e2lzRW5kU2VsZWN0aW9ufVxuICAgICAgICAgIHBzZXVkbz17dHJ1ZX1cbiAgICAgICAgICBzaXplPVwibVwiXG4gICAgICAgICAgbGFiZWw9e2xhYmVsVG99XG4gICAgICAgICAgdmFsdWU9e2Zvcm1hdERhdGUocmFuZ2VFbmQsIGxvY2FsZSl9XG4gICAgICAgIC8+XG4gICAgICApfVxuICAgIDwvQ29udHJvbEdyb3VwPlxuICApO1xuXG4gIGNvbnN0IGNhbGVuZGFyID0gKFxuICAgIDxDYWxlbmRhclxuICAgICAgZnJvbT17ZnJvbX1cbiAgICAgIHRvPXt0b31cbiAgICAgIGxpbWl0RnJvbT17bGltaXRGcm9tfVxuICAgICAgbGltaXRUbz17bGltaXRUb31cbiAgICAgIG1heFJhbmdlPXttYXhSYW5nZX1cbiAgICAgIGFsbG93T25lRGF5UmFuZ2U9e2FsbG93T25lRGF5UmFuZ2V9XG4gICAgICByYW5nZVN0YXJ0PXtyYW5nZVN0YXJ0fVxuICAgICAgcmFuZ2VFbmQ9e2lzUmFuZ2VTZWxlY3QgPyByYW5nZUVuZCA6IHJhbmdlU3RhcnR9XG4gICAgICBpc1N0YXJ0U2VsZWN0aW9uPXtpc1N0YXJ0U2VsZWN0aW9ufVxuICAgICAgaXNFbmRTZWxlY3Rpb249e2lzRW5kU2VsZWN0aW9ufVxuICAgICAgc2VsZWN0UmFuZ2VTdGFydD17c2VsZWN0UmFuZ2VTdGFydH1cbiAgICAgIHNlbGVjdFJhbmdlRW5kPXtzZWxlY3RSYW5nZUVuZH1cbiAgICAgIHN0b3BTZWxlY3Q9e3N0b3BTZWxlY3R9XG4gICAgICBvblJhbmdlQ2hhbmdlPXtvblJhbmdlQ2hhbmdlfVxuICAgICAgaXNBdmlhPXtpc0F2aWF9XG4gICAgLz5cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxDbGlja091dHNpZGUgcmVmPXt3cmFwcGVyUmVmfSBvbkNsaWNrT3V0c2lkZT17c3RvcFNlbGVjdH0+XG4gICAgICB7Y29udHJvbH1cbiAgICAgIHshaXNNb2JpbGUoKSAmJiAhaW5Qb3B1cCAmJiAoXG4gICAgICAgIDxQb3B1cFxuICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ3BvcHVwJykoeyBoaWRkZW46ICFpc0NhbGVuZGFyVmlzaWJsZSB9KX1cbiAgICAgICAgICB0b3A9e2JvdW5kcy5hYnNvbHV0ZUJvdHRvbSArIDEgfHwgMH1cbiAgICAgICAgICBsZWZ0PXtib3VuZHMuYWJzb2x1dGVMZWZ0IHx8IDB9XG4gICAgICAgICAgcm9vdEVsZW1lbnQ9e3Jvb3RFbGVtZW50fVxuICAgICAgICA+XG4gICAgICAgICAge2NhbGVuZGFyfVxuICAgICAgICA8L1BvcHVwPlxuICAgICAgKX1cbiAgICAgIHshaXNNb2JpbGUoKSAmJiBpblBvcHVwICYmIChcbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ3BvcHVwSW5Qb3B1cCcpKFxuICAgICAgICAgICAgeyBoaWRkZW46ICFpc0NhbGVuZGFyVmlzaWJsZSB9LFxuICAgICAgICAgICAgY3NzbWVtKHBvcHVwU3R5bGVzKSgncG9wdXAnKSgpXG4gICAgICAgICAgKX1cbiAgICAgICAgICB0b3A9ezQ3fVxuICAgICAgICAgIGxlZnQ9ezB9XG4gICAgICAgID5cbiAgICAgICAgICB7Y2FsZW5kYXJ9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICAgIHtpc01vYmlsZSgpICYmIGlzQ2FsZW5kYXJWaXNpYmxlICYmIChcbiAgICAgICAgPE1vYmlsZVN1Z2dlc3RcbiAgICAgICAgICBvbkNsb3NlPXtzdG9wU2VsZWN0fVxuICAgICAgICAgIGNvbnRlbnQ9e2NhbGVuZGFyfVxuICAgICAgICAgIGNvbnRyb2w9e2NvbnRyb2x9XG4gICAgICAgIC8+XG4gICAgICApfVxuICAgIDwvQ2xpY2tPdXRzaWRlPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcbiAgbWFwU3RhdGVUb1Byb3BzLFxuICBtYXBEaXNwYXRjaFRvUHJvcHNcbikoRGF0ZVBpY2tlcik7XG5cbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkge1xuICByZXR1cm4ge1xuICAgIGxvY2FsZTogc3RhdGUubDEwbi5sb2NhbGVcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoKSB7XG4gIHJldHVybiB7XG4gICAgbG9hZEhvbGlkYXlzOiAoKSA9PiBkaXNwYXRjaChob2xpZGF5c0FjdGlvbnMubG9hZEhvbGlkYXlzKCkpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZSwgbG9jYWxlKSB7XG4gIGNvbnN0IGRheUFuZE1vbnRoID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoXG4gICAgbG9jYWxlLFxuICAgIHsgZGF5OiAnbnVtZXJpYycsIG1vbnRoOiAnc2hvcnQnIH1cbiAgKS5mb3JtYXQoZGF0ZSk7XG4gIGNvbnN0IHdlZWtkYXkgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChcbiAgICBsb2NhbGUsXG4gICAgeyB3ZWVrZGF5OiAnc2hvcnQnIH1cbiAgKS5mb3JtYXQoZGF0ZSk7XG5cbiAgcmV0dXJuIGAke2RheUFuZE1vbnRofSwgJHt3ZWVrZGF5fWA7XG59XG4iLCJjb25zdCBjb3VudHJpZXMgPSBbXG4gICdhYicsXG4gICdhZCcsXG4gICdhZScsXG4gICdhZicsXG4gICdhZycsXG4gICdhaScsXG4gICdhbCcsXG4gICdhbScsXG4gICdhbycsXG4gICdhcicsXG4gICdhcycsXG4gICdhdCcsXG4gICdhdScsXG4gICdhdycsXG4gICdheCcsXG4gICdheicsXG4gICdiYScsXG4gICdiYicsXG4gICdiZCcsXG4gICdiZScsXG4gICdiZicsXG4gICdiZycsXG4gICdiaCcsXG4gICdiaScsXG4gICdiaicsXG4gICdibCcsXG4gICdibScsXG4gICdibicsXG4gICdibycsXG4gICdicScsXG4gICdicicsXG4gICdicycsXG4gICdidCcsXG4gICdidycsXG4gICdieScsXG4gICdieicsXG4gICdjYScsXG4gICdjYycsXG4gICdjZCcsXG4gICdjZicsXG4gICdjZycsXG4gICdjaCcsXG4gICdjaScsXG4gICdjaycsXG4gICdjbCcsXG4gICdjbScsXG4gICdjbicsXG4gICdjbycsXG4gICdjcicsXG4gICdjdScsXG4gICdjdicsXG4gICdjdycsXG4gICdjeCcsXG4gICdjeScsXG4gICdjeicsXG4gICdkZScsXG4gICdkaicsXG4gICdkaycsXG4gICdkbScsXG4gICdkbycsXG4gICdkeicsXG4gICdlYycsXG4gICdlZScsXG4gICdlZycsXG4gICdlcicsXG4gICdlcycsXG4gICdldCcsXG4gICdmaScsXG4gICdmaicsXG4gICdmaycsXG4gICdmbScsXG4gICdmbycsXG4gICdmcicsXG4gICdnYScsXG4gICdnYicsXG4gICdnZCcsXG4gICdnZScsXG4gICdnZicsXG4gICdnZycsXG4gICdnaCcsXG4gICdnaScsXG4gICdnbCcsXG4gICdnbScsXG4gICdnbicsXG4gICdncCcsXG4gICdncScsXG4gICdncicsXG4gICdndCcsXG4gICdndScsXG4gICdndycsXG4gICdneScsXG4gICdoaycsXG4gICdobicsXG4gICdocicsXG4gICdodCcsXG4gICdodScsXG4gICdpZCcsXG4gICdpZScsXG4gICdpbCcsXG4gICdpbScsXG4gICdpbicsXG4gICdpbycsXG4gICdpcScsXG4gICdpcicsXG4gICdpcycsXG4gICdpdCcsXG4gICdqZScsXG4gICdqbScsXG4gICdqbycsXG4gICdqcCcsXG4gICdrZScsXG4gICdrZycsXG4gICdraCcsXG4gICdraScsXG4gICdrbScsXG4gICdrbicsXG4gICdrcCcsXG4gICdrcicsXG4gICdrdycsXG4gICdreScsXG4gICdreicsXG4gICdsYScsXG4gICdsYicsXG4gICdsYycsXG4gICdsaScsXG4gICdsaycsXG4gICdscicsXG4gICdscycsXG4gICdsdCcsXG4gICdsdScsXG4gICdsdicsXG4gICdseScsXG4gICdtYScsXG4gICdtYycsXG4gICdtZCcsXG4gICdtZScsXG4gICdtZicsXG4gICdtZycsXG4gICdtaCcsXG4gICdtaycsXG4gICdtbCcsXG4gICdtbScsXG4gICdtbicsXG4gICdtbycsXG4gICdtcCcsXG4gICdtcScsXG4gICdtcicsXG4gICdtcycsXG4gICdtdCcsXG4gICdtdScsXG4gICdtdicsXG4gICdtdycsXG4gICdteCcsXG4gICdteScsXG4gICdteicsXG4gICduYScsXG4gICduYycsXG4gICduZScsXG4gICduZicsXG4gICduZycsXG4gICduaScsXG4gICdubCcsXG4gICdubycsXG4gICducCcsXG4gICducicsXG4gICdudScsXG4gICdueicsXG4gICdvbScsXG4gICdwYScsXG4gICdwZScsXG4gICdwZicsXG4gICdwZycsXG4gICdwaCcsXG4gICdwaycsXG4gICdwbCcsXG4gICdwbScsXG4gICdwbicsXG4gICdwcicsXG4gICdwcycsXG4gICdwdCcsXG4gICdwdycsXG4gICdweScsXG4gICdxYScsXG4gICdyZScsXG4gICdybycsXG4gICdycycsXG4gICdydScsXG4gICdydycsXG4gICdzYScsXG4gICdzYicsXG4gICdzYycsXG4gICdzZCcsXG4gICdzZScsXG4gICdzZycsXG4gICdzaCcsXG4gICdzaScsXG4gICdzaicsXG4gICdzaycsXG4gICdzbCcsXG4gICdzbScsXG4gICdzbicsXG4gICdzbycsXG4gICdzcicsXG4gICdzcycsXG4gICdzdCcsXG4gICdzdicsXG4gICdzeCcsXG4gICdzeScsXG4gICdzeicsXG4gICd0YycsXG4gICd0ZCcsXG4gICd0ZycsXG4gICd0aCcsXG4gICd0aicsXG4gICd0aycsXG4gICd0bCcsXG4gICd0bScsXG4gICd0bicsXG4gICd0bycsXG4gICd0cicsXG4gICd0dCcsXG4gICd0dicsXG4gICd0dycsXG4gICd0eicsXG4gICd1YScsXG4gICd1ZycsXG4gICd1bScsXG4gICd1cycsXG4gICd1eScsXG4gICd1eicsXG4gICd2YScsXG4gICd2YycsXG4gICd2ZScsXG4gICd2ZycsXG4gICd2aScsXG4gICd2bicsXG4gICd2dScsXG4gICd3ZicsXG4gICd3cycsXG4gICd4aycsXG4gICd5ZScsXG4gICd5dCcsXG4gICd6YScsXG4gICd6bScsXG4gICd6dycsXG5dO1xuXG5jb25zdCBGbGFnOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XG5cbmNvdW50cmllcy5mb3JFYWNoKChjb3VudHJ5Q29kZSkgPT4ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgRmxhZ1tjb3VudHJ5Q29kZV0gPSByZXF1aXJlKGAuL2ltZy8ke2NvdW50cnlDb2RlfS5zdmdgKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBGbGFnO1xuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIi9hc3NldHMvaWNvbnMvaG90ZWwuc3ZnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIi9hc3NldHMvaWNvbnMvY290dGFnZS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9jYW1waW5nLnN2Z1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIvYXNzZXRzL2ljb25zL2Nhc3RsZS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy9haXJwb3J0LnN2Z1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIvYXNzZXRzL2ljb25zL2J1cy1zdGF0aW9uLnN2Z1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIvYXNzZXRzL2ljb25zL2NpdHkuc3ZnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIi9hc3NldHMvaWNvbnMvZGlzdHJpY3Quc3ZnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIi9hc3NldHMvaWNvbnMvbWV0cm8uc3ZnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIi9hc3NldHMvaWNvbnMvcmFpbHdheS1zdGF0aW9uLnN2Z1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIvYXNzZXRzL2ljb25zL3N0YXRlLnN2Z1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIvYXNzZXRzL2ljb25zL3N0cmVldC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiL2Fzc2V0cy9pY29ucy91bml2ZXJzYWwtcG9pLnN2Z1wiOyIsImltcG9ydCBob3RlbEljb24gZnJvbSAnLi9pbWcvaG90ZWwuc3ZnJztcbmltcG9ydCBjb3R0YWdlSWNvbiBmcm9tICcuL2ltZy9jb3R0YWdlLnN2Zyc7XG5pbXBvcnQgY2FtcGluZ0ljb24gZnJvbSAnLi9pbWcvY2FtcGluZy5zdmcnO1xuaW1wb3J0IGNhc3RsZUljb24gZnJvbSAnLi9pbWcvY2FzdGxlLnN2Zyc7XG5cbmltcG9ydCBhaXJwb3J0SWNvbiBmcm9tICcuL2ltZy9haXJwb3J0LnN2Zyc7XG5pbXBvcnQgYnVzU3RhdGlvbkljb24gZnJvbSAnLi9pbWcvYnVzLXN0YXRpb24uc3ZnJztcbmltcG9ydCBjaXR5SWNvbiBmcm9tICcuL2ltZy9jaXR5LnN2Zyc7XG5pbXBvcnQgZGlzdHJpY3RJY29uIGZyb20gJy4vaW1nL2Rpc3RyaWN0LnN2Zyc7XG5pbXBvcnQgbWV0cm9JY29uIGZyb20gJy4vaW1nL21ldHJvLnN2Zyc7XG5pbXBvcnQgcmFpbHdheVN0YXRpb25JY29uIGZyb20gJy4vaW1nL3JhaWx3YXktc3RhdGlvbi5zdmcnO1xuaW1wb3J0IHN0YXRlSWNvbiBmcm9tICcuL2ltZy9zdGF0ZS5zdmcnO1xuaW1wb3J0IHN0cmVldEljb24gZnJvbSAnLi9pbWcvc3RyZWV0LnN2Zyc7XG5pbXBvcnQgdW5pdmVyc2FsUG9pSWNvbiBmcm9tICcuL2ltZy91bml2ZXJzYWwtcG9pLnN2Zyc7XG5cbmV4cG9ydCBjb25zdCBIT1RFTF9UWVBFID0ge1xuICBBUEFSVEhPVEVMOiAnQXBhcnRob3RlbCcsXG4gIEFQQVJUTUVOVDogJ0FwYXJ0bWVudCcsXG4gIEJFREFOREJSRUFLRkFTVDogJ0JlZF9hbmRfQnJlYWtmYXN0JyxcbiAgQk5COiAnQk5CJyxcbiAgQk9VVElRVUVBTkRERVNJR046ICdCb3V0aXF1ZV9hbmRfRGVzaWduJyxcbiAgQ0FNUElORzogJ0NhbXBpbmcnLFxuICBDQVNUTEU6ICdDYXN0bGUnLFxuICBDT1RUQUdFU0FOREhPVVNFUzogJ0NvdHRhZ2VzX2FuZF9Ib3VzZXMnLFxuICBGQVJNOiAnRmFybScsXG4gIEdVRVNUSE9VU0U6ICdHdWVzdGhvdXNlJyxcbiAgSE9TVEVMOiAnSG9zdGVsJyxcbiAgSE9URUw6ICdIb3RlbCcsXG4gIE1JTklfSE9URUw6ICdNaW5pLWhvdGVsJyxcbiAgUkVTT1JUOiAnUmVzb3J0JyxcbiAgU0FOQVRPUklVTTogJ1NhbmF0b3JpdW0nLFxuICBWSUxMQVNBTkRCVU5HQUxPV1M6ICdWaWxsYXNfYW5kX0J1bmdhbG93cycsXG59O1xuXG5leHBvcnQgY29uc3QgUkVHSU9OX1RZUEUgPSB7XG4gIEFJUlBPUlQ6ICdBaXJwb3J0JyxcbiAgQlVTX1NUQVRJT046ICdCdXMgU3RhdGlvbicsXG4gIENJVFk6ICdDaXR5JyxcbiAgQ09VTlRSWTogJ0NvdW50cnknLFxuICBDT05USU5FTlQ6ICdDb250aW5lbnQnLFxuICBNVUxUSV9DSVRZOiAnTXVsdGktQ2l0eSAoVmljaW5pdHkpJyxcbiAgTVVMVElfUkVHSU9OOiAnTXVsdGktUmVnaW9uICh3aXRoaW4gYSBjb3VudHJ5KScsXG4gIE5FSUdIQk9VUkhPT0Q6ICdOZWlnaGJvdXJob29kJywgLy8gQ296IHBsYW5ldCBoYXMgZGlmZmVyZW50IGNvbnN0YW50XG4gIE5FSUdIQk9SSE9PRDogJ05laWdoYm9yaG9vZCcsIC8vIHdlIHNob3VsZCBzdXBwb3J0IGJvdGhcbiAgUE9JOiAnUG9pbnQgb2YgSW50ZXJlc3QnLFxuICBQUk9WSU5DRTogJ1Byb3ZpbmNlIChTdGF0ZSknLFxuICBSQUlMV0FZX1NUQVRJT046ICdSYWlsd2F5IFN0YXRpb24nLFxuICBTVFJFRVQ6ICdTdHJlZXQnLFxuICBTVUJXQVk6ICdTdWJ3YXkgKEVudHJhY2UpJyxcbn07XG5cbmV4cG9ydCBjb25zdCBIT1RFTF9JQ09OID0ge1xuICBDQU1QSU5HOiAnY2FtcGluZycsXG4gIENBU1RMRTogJ2Nhc3RsZScsXG4gIENPVFRBR0U6ICdjb3R0YWdlJyxcbiAgSE9URUw6ICdob3RlbCcsXG59O1xuXG5leHBvcnQgY29uc3QgUkVHSU9OX0lDT04gPSB7XG4gIEFJUlBPUlQ6ICdhaXJwb3J0JyxcbiAgQlVTX1NUQVRJT046ICdidXMtc3RhdGlvbicsXG4gIENJVFk6ICdjaXR5JyxcbiAgRElTVFJJQ1Q6ICdkaXN0cmljdCcsXG4gIE1FVFJPOiAnbWV0cm8nLFxuICBSQUlMV0FZX1NUQVRJT046ICdyYWlsd2F5LXN0YXRpb24nLFxuICBTVEFURTogJ3N0YXRlJyxcbiAgU1RSRUVUOiAnc3RyZWV0JyxcbiAgVU5JVkVSU0FMX1BPSTogJ3VuaXZlcnNhbC1wb2knLFxufTtcblxuY29uc3QgdHlwZTJpY29uTWFwID0ge1xuICBbSE9URUxfVFlQRS5BUEFSVEhPVEVMXTogaG90ZWxJY29uLFxuICBbSE9URUxfVFlQRS5BUEFSVE1FTlRdOiBob3RlbEljb24sXG4gIFtIT1RFTF9UWVBFLkJFREFOREJSRUFLRkFTVF06IGhvdGVsSWNvbixcbiAgW0hPVEVMX1RZUEUuQk5CXTogaG90ZWxJY29uLFxuICBbSE9URUxfVFlQRS5CT1VUSVFVRUFORERFU0lHTl06IGhvdGVsSWNvbixcbiAgW0hPVEVMX1RZUEUuQ0FNUElOR106IGNhbXBpbmdJY29uLFxuICBbSE9URUxfVFlQRS5DQVNUTEVdOiBjYXN0bGVJY29uLFxuICBbSE9URUxfVFlQRS5DT1RUQUdFU0FOREhPVVNFU106IGNvdHRhZ2VJY29uLFxuICBbSE9URUxfVFlQRS5GQVJNXTogY2FtcGluZ0ljb24sXG4gIFtIT1RFTF9UWVBFLkdVRVNUSE9VU0VdOiBob3RlbEljb24sXG4gIFtIT1RFTF9UWVBFLkhPU1RFTF06IGhvdGVsSWNvbixcbiAgW0hPVEVMX1RZUEUuSE9URUxdOiBob3RlbEljb24sXG4gIFtIT1RFTF9UWVBFLk1JTklfSE9URUxdOiBob3RlbEljb24sXG4gIFtIT1RFTF9UWVBFLlJFU09SVF06IGhvdGVsSWNvbixcbiAgW0hPVEVMX1RZUEUuU0FOQVRPUklVTV06IGhvdGVsSWNvbixcbiAgW0hPVEVMX1RZUEUuVklMTEFTQU5EQlVOR0FMT1dTXTogY290dGFnZUljb24sXG5cbiAgW1JFR0lPTl9UWVBFLkFJUlBPUlRdOiBhaXJwb3J0SWNvbixcbiAgW1JFR0lPTl9UWVBFLkJVU19TVEFUSU9OXTogYnVzU3RhdGlvbkljb24sXG4gIFtSRUdJT05fVFlQRS5DSVRZXTogY2l0eUljb24sXG4gIFtSRUdJT05fVFlQRS5DT1VOVFJZXTogc3RhdGVJY29uLFxuICBbUkVHSU9OX1RZUEUuTVVMVElfQ0lUWV06IGNpdHlJY29uLFxuICBbUkVHSU9OX1RZUEUuTVVMVElfUkVHSU9OXTogc3RhdGVJY29uLFxuICBbUkVHSU9OX1RZUEUuTkVJR0hCT1VSSE9PRF06IGRpc3RyaWN0SWNvbixcbiAgW1JFR0lPTl9UWVBFLk5FSUdIQk9SSE9PRF06IGRpc3RyaWN0SWNvbixcbiAgW1JFR0lPTl9UWVBFLlBPSV06IHVuaXZlcnNhbFBvaUljb24sXG4gIFtSRUdJT05fVFlQRS5QUk9WSU5DRV06IHN0YXRlSWNvbixcbiAgW1JFR0lPTl9UWVBFLlJBSUxXQVlfU1RBVElPTl06IHJhaWx3YXlTdGF0aW9uSWNvbixcbiAgW1JFR0lPTl9UWVBFLlNUUkVFVF06IHN0cmVldEljb24sXG4gIFtSRUdJT05fVFlQRS5TVUJXQVldOiBtZXRyb0ljb24sXG59XG5cbmV4cG9ydCBjb25zdCBnZXRJY29uID0gZGVzdGluYXRpb25UeXBlID0+IHtcbiAgaWYgKGRlc3RpbmF0aW9uVHlwZSBpbiB0eXBlMmljb25NYXApIHtcbiAgICByZXR1cm4gdHlwZTJpY29uTWFwW2Rlc3RpbmF0aW9uVHlwZV07XG4gIH1cblxuICByZXR1cm4gJyc7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZGVmaW5lTWVzc2FnZXMsIHVzZUludGwgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcblxuaW1wb3J0IGZsYWdzIGZyb20gJ2NvbXBvbmVudHMvSWNvbi9GbGFnJztcblxuaW1wb3J0IHsgZ2V0SWNvbiB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHN0eWxlIGZyb20gJy4vU3VnZ2VzdC5jc3MnO1xuXG5jb25zdCBlbSA9IGNzc21lbShzdHlsZSk7XG5cbmNvbnN0IG1lc3NhZ2VzID0gZGVmaW5lTWVzc2FnZXMoe1xuICByZWdpb25zOiB7XG4gICAgaWQ6IFwiRGVzdGluYXRpb24uU3VnZ2VzdC5yZWdpb25zXCIsXG4gICAgZGVmYXVsdE1lc3NhZ2U6IFwi0KDQtdCz0LjQvtC90YtcIixcbiAgfSxcbiAgaG90ZWxzOiB7XG4gICAgaWQ6IFwiRGVzdGluYXRpb24uU3VnZ2VzdC5ob3RlbHNcIixcbiAgICBkZWZhdWx0TWVzc2FnZTogXCLQntGC0LXQu9C4XCIsXG4gIH0sXG59KTtcblxuY29uc3QgUmVnaW9uID0gKHsgcmVnaW9uLCBpc0FjdGl2ZSwgb25DbGljaywgb25Nb3VzZUVudGVyIH0pID0+IHtcbiAgY29uc3QgcGFydHMgPSBbcmVnaW9uLm5hbWVdO1xuXG4gIGlmIChyZWdpb24uY291bnRyeSkge1xuICAgIHBhcnRzLnB1c2gocmVnaW9uLmNvdW50cnkpO1xuICB9XG5cbiAgY29uc3QgaWNvbiA9IGdldEljb24ocmVnaW9uLnR5cGUpO1xuICBjb25zdCByZWdpb25OYW1lID0gcGFydHMuam9pbignLCAnKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT17ZW0oJ3JlZ2lvbicpKHsgYWN0aXZlOiBpc0FjdGl2ZSB9KX1cbiAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICBvbk1vdXNlRW50ZXI9e29uTW91c2VFbnRlcn1cbiAgICA+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17ZW0oJ2ljb24nKSgpfVxuICAgICAgICBzdHlsZT17eyBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJyR7aWNvbn0nKWAgfX1cbiAgICAgIC8+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2Rlc3RpbmF0aW9uJykoKX0gdGl0bGU9e3JlZ2lvbk5hbWV9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2Rlc3RpbmF0aW9uVGl0bGUnKSgpfT57cmVnaW9uTmFtZX08L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuY29uc3QgSG90ZWwgPSAoeyBob3RlbCwgaXNBY3RpdmUsIG9uQ2xpY2ssIG9uTW91c2VFbnRlciB9KSA9PiB7XG4gIGNvbnN0IGljb24gPSBnZXRJY29uKGhvdGVsLmhvdGVsS2luZCk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e2VtKCdob3RlbCcpKHsgYWN0aXZlOiBpc0FjdGl2ZSB9KX1cbiAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICBvbk1vdXNlRW50ZXI9e29uTW91c2VFbnRlcn1cbiAgICA+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17ZW0oJ2ljb24nKSgpfVxuICAgICAgICBzdHlsZT17eyBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJyR7aWNvbn0nKWAgfX1cbiAgICAgIC8+XG4gICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCdkZXN0aW5hdGlvbicpKCl9IHRpdGxlPXtob3RlbC5uYW1lfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCdkZXN0aW5hdGlvblRpdGxlJykoKX0+e2hvdGVsLm5hbWV9PC9kaXY+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT17ZW0oJ25vdGUnKSgpfSB0aXRsZT17YCR7aG90ZWwucmVnaW9uTmFtZX0sICR7aG90ZWwuaG90ZWxBZGRyZXNzfWB9PlxuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ2ZsYWcnKSgpfVxuICAgICAgICAgICAgdGl0bGU9e2hvdGVsLmNvdW50cnlOYW1lfVxuICAgICAgICAgICAgYWx0PXtob3RlbC5jb3VudHJ5TmFtZX1cbiAgICAgICAgICAgIHNyYz17ZmxhZ3NbaG90ZWwuY291bnRyeUNvZGUudG9Mb3dlckNhc2UoKV0uZGVmYXVsdH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtob3RlbC5yZWdpb25OYW1lfSwge2hvdGVsLmhvdGVsQWRkcmVzc31cbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5jb25zdCBTdWdnZXN0ID0gKHtcbiAgcmVnaW9ucyxcbiAgaG90ZWxzLFxuICBzZXRWYWx1ZSxcbiAgYWN0aXZlSXRlbSA9IDAsXG4gIHNldEFjdGl2ZUl0ZW0sXG59KSA9PiB7XG4gIGNvbnN0IGludGwgPSB1c2VJbnRsKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICB7XG4gICAgICAgIHJlZ2lvbnMubGVuZ3RoID4gMFxuICAgICAgICAmJiA8ZGl2IGNsYXNzTmFtZT17ZW0oJ3RpdGxlJykoKX0+XG4gICAgICAgICAge2ludGwuZm9ybWF0TWVzc2FnZShtZXNzYWdlcy5yZWdpb25zKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICB9XG4gICAgICB7cmVnaW9ucy5tYXAoaXRlbSA9PlxuICAgICAgICA8UmVnaW9uXG4gICAgICAgICAgcmVnaW9uPXtpdGVtfVxuICAgICAgICAgIGtleT17aXRlbS5pZH1cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRWYWx1ZShpdGVtKX1cbiAgICAgICAgICBpc0FjdGl2ZT17aXRlbS5pbmRleCA9PT0gYWN0aXZlSXRlbX1cbiAgICAgICAgICBvbk1vdXNlRW50ZXI9eygpID0+IHNldEFjdGl2ZUl0ZW0oaXRlbS5pbmRleCl9XG4gICAgICAgIC8+XG4gICAgICApfVxuICAgICAge1xuICAgICAgICBob3RlbHMubGVuZ3RoID4gMFxuICAgICAgICAmJiA8ZGl2IGNsYXNzTmFtZT17ZW0oJ3RpdGxlJykoKX0+XG4gICAgICAgICAge2ludGwuZm9ybWF0TWVzc2FnZShtZXNzYWdlcy5ob3RlbHMpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIH1cbiAgICAgIHtob3RlbHMubWFwKGl0ZW0gPT5cbiAgICAgICAgPEhvdGVsXG4gICAgICAgICAgaG90ZWw9e2l0ZW19XG4gICAgICAgICAga2V5PXtpdGVtLmlkfVxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFZhbHVlKGl0ZW0pfVxuICAgICAgICAgIGlzQWN0aXZlPXtpdGVtLmluZGV4ID09PSBhY3RpdmVJdGVtfVxuICAgICAgICAgIG9uTW91c2VFbnRlcj17KCkgPT4gc2V0QWN0aXZlSXRlbShpdGVtLmluZGV4KX1cbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFN1Z2dlc3Q7XG4iLCJpbXBvcnQgeyBkZWZpbmVNZXNzYWdlcywgdXNlSW50bCB9IGZyb20gJ3JlYWN0LWludGwnO1xuXG5jb25zdCBtZXNzYWdlcyA9IGRlZmluZU1lc3NhZ2VzKHtcbiAgbGFiZWw6IHtcbiAgICBpZDogXCJkZXN0aW5hdGlvbi5sYWJlbFwiLFxuICAgIGRlZmF1bHRNZXNzYWdlOiBcItCd0LDQv9GA0LDQstC70LXQvdC40LVcIlxuICB9LFxuICBwbGFjZWhvbGRlcjoge1xuICAgIGlkOiBcImRlc3RpbmF0aW9uLnBsYWNlaG9sZGVyXCIsXG4gICAgZGVmYXVsdE1lc3NhZ2U6IFwi0JPQvtGA0L7QtCwg0L7RgtC10LvRjCDQuNC70Lgg0LDRjdGA0L7Qv9C+0YDRglwiXG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtZXNzYWdlcztcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VMYXlvdXRFZmZlY3QsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUludGwgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcblxuaW1wb3J0IElucHV0IGZyb20gJ2NvbXBvbmVudHMvSW5wdXQnO1xuaW1wb3J0IEFycm93RG93biBmcm9tICdjb21wb25lbnRzL0ljb24vQXJyb3dEb3duJztcbmltcG9ydCBQb3B1cCBmcm9tICdjb21wb25lbnRzL1BvcHVwJztcblxuaW1wb3J0IFN1Z2dlc3QgZnJvbSAnLi9TdWdnZXN0JztcblxuaW1wb3J0IG1lc3NhZ2VzIGZyb20gJy4vbWVzc2FnZXMnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL01vYmlsZVN1Z2dlc3QuY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuY29uc3QgTW9iaWxlU3VnZ2VzdCA9ICh7XG4gIGNsb3NlU3VnZ2VzdCxcbiAgb25JbnB1dENoYW5nZSxcbiAgcXVlcnksXG4gIHJlZ2lvbnMsXG4gIGhvdGVscyxcbiAgc2V0VmFsdWVGcm9tU3VnZ2VzdCxcbiAgYWN0aXZlU3VnZ2VzdEl0ZW0sXG4gIHNldEFjdGl2ZVN1Z2dlc3RJdGVtLFxufSkgPT4ge1xuICBjb25zdCBpbnB1dFJlZiA9IHVzZVJlZihudWxsKTtcblxuICBjb25zdCBpbnRsID0gdXNlSW50bCgpO1xuXG4gIC8vIFVzaW5nIGZvciBjb3JyZWN0IGJsdXIgaGFuZGxlXG4gIGNvbnN0IGlzQ2xpY2tlZEluc2lkZSA9IHVzZVJlZihmYWxzZSk7XG5cbiAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBpbnB1dFJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgaW5wdXRSZWYuY3VycmVudC5zZXRTZWxlY3Rpb25SYW5nZSgwLCBxdWVyeS5sZW5ndGgpO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8UG9wdXBcbiAgICAgIGNsYXNzTmFtZT17ZW0oJ3dyYXBwZXInKSgpfVxuICAgICAgb25Nb3VzZURvd249e2NsaWNrSW5zaWRlSGFuZGxlcn1cbiAgICAgIG9uVG91Y2hTdGFydD17Y2xpY2tJbnNpZGVIYW5kbGVyfVxuICAgID5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnY29udHJvbHMnKSgpfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCdiYWNrQnV0dG9uJykoKX1cbiAgICAgICAgICBvbkNsaWNrPXtjbG9zZVN1Z2dlc3R9XG4gICAgICAgID5cbiAgICAgICAgICA8QXJyb3dEb3duIGNsYXNzTmFtZT17ZW0oJ2Fycm93TGVmdCcpKCl9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8SW5wdXRcbiAgICAgICAgICBpbnB1dFJlZj17aW5wdXRSZWZ9XG4gICAgICAgICAgb25DaGFuZ2U9e29uSW5wdXRDaGFuZ2V9XG4gICAgICAgICAgb25CbHVyPXtvbkJsdXJ9XG4gICAgICAgICAgb25Gb2N1cz17b25Gb2N1c31cbiAgICAgICAgICB2YWx1ZT17cXVlcnl9XG4gICAgICAgICAgc2l6ZT1cIm1cIlxuICAgICAgICAgIHdpZGU9e3RydWV9XG4gICAgICAgICAgbGFiZWw9e2ludGwuZm9ybWF0TWVzc2FnZShtZXNzYWdlcy5sYWJlbCl9XG4gICAgICAgICAgcGxhY2Vob2xkZXI9e2ludGwuZm9ybWF0TWVzc2FnZShtZXNzYWdlcy5wbGFjZWhvbGRlcil9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCdzdWdnZXN0JykoKX0+XG4gICAgICAgIDxTdWdnZXN0XG4gICAgICAgICAgcmVnaW9ucz17cmVnaW9uc31cbiAgICAgICAgICBob3RlbHM9e2hvdGVsc31cbiAgICAgICAgICBzZXRWYWx1ZT17c2V0VmFsdWVGcm9tU3VnZ2VzdH1cbiAgICAgICAgICBhY3RpdmVJdGVtPXthY3RpdmVTdWdnZXN0SXRlbX1cbiAgICAgICAgICBzZXRBY3RpdmVJdGVtPXtzZXRBY3RpdmVTdWdnZXN0SXRlbX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvUG9wdXA+XG4gICk7XG5cbiAgZnVuY3Rpb24gY2xpY2tJbnNpZGVIYW5kbGVyKCkge1xuICAgIGlzQ2xpY2tlZEluc2lkZS5jdXJyZW50ID0gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQmx1cigpIHtcbiAgICBpZiAoaXNDbGlja2VkSW5zaWRlLmN1cnJlbnQpIHtcbiAgICAgIGlzQ2xpY2tlZEluc2lkZS5jdXJyZW50ID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsb3NlU3VnZ2VzdCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRm9jdXMoKSB7XG4gICAgaXNDbGlja2VkSW5zaWRlLmN1cnJlbnQgPSBmYWxzZTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgTW9iaWxlU3VnZ2VzdDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlUmVmLCB1c2VDYWxsYmFjaywgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlSW50bCB9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB0aHJvdHRsZSBmcm9tICdsb2Rhc2gvdGhyb3R0bGUnO1xuaW1wb3J0IHVzZUJvdW5kcyBmcm9tICcuLi9ob29rcy91c2VCb3VuZHMnO1xuaW1wb3J0IHsgaXNNb2JpbGUsIGlzVGFibGV0LCBpc0Rlc2t0b3BVcCB9IGZyb20gJy4uL2hlbHBlcnMvYWRhcHRpdmUnO1xuXG5pbXBvcnQgQ2xpY2tPdXRzaWRlIGZyb20gJy4uL0NsaWNrT3V0c2lkZSc7XG5pbXBvcnQgeyBhY3Rpb25zIGFzIGRlc3RpbmF0aW9uQWN0aW9ucyB9IGZyb20gJy4uL3JlZHVjZXJzL2Rlc3RpbmF0aW9uJztcblxuaW1wb3J0IFBvcHVwIGZyb20gJ2NvbXBvbmVudHMvUG9wdXAnO1xuaW1wb3J0IElucHV0IGZyb20gJ2NvbXBvbmVudHMvSW5wdXQnO1xuXG5pbXBvcnQgU3VnZ2VzdCBmcm9tICcuL1N1Z2dlc3QnO1xuaW1wb3J0IE1vYmlsZVN1Z2dlc3QgZnJvbSAnLi9Nb2JpbGVTdWdnZXN0JztcblxuaW1wb3J0IG1lc3NhZ2VzIGZyb20gJy4vbWVzc2FnZXMnO1xuXG5jb25zdCBEZXN0aW5hdGlvbiA9ICh7XG4gIHN1Z2dlc3RzLFxuICBsb2FkU3VnZ2VzdCxcbiAgdmFsdWUsXG4gIG9uQ2hhbmdlLFxuICBpblBvcHVwLFxuICBpc0RlbW8sXG4gIHNldElucHV0UmVmLFxuICBzZWFyY2hGb3JtUmVmLFxuICByb290RWxlbWVudCxcbn0pID0+IHtcbiAgY29uc3Qgbm9TY3JvbGxDbGFzcyA9ICdvdmVybGF5cG9wdXAtbm9zY3JvbGwnO1xuXG4gIGNvbnN0IFt3cmFwcGVyUmVmLCBib3VuZHNdID0gdXNlQm91bmRzKHJvb3RFbGVtZW50KTtcbiAgY29uc3QgaW5wdXRFbCA9IHVzZVJlZihudWxsKTtcblxuICBjb25zdCBbbmVlZFNob3dTdWdnZXN0LCBzZXRTaG93U3VnZ2VzdF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtxdWVyeSwgc2V0UXVlcnldID0gdXNlU3RhdGUoZ2V0VmFsdWVMYWJlbCh2YWx1ZSkpO1xuICBjb25zdCBbc2VsZWN0ZWRWYWx1ZSwgc2V0U2VsZWN0ZWRWYWx1ZV0gPSB1c2VTdGF0ZSh2YWx1ZSk7XG4gIGNvbnN0IFtzdWdnZXN0LCBzZXRTdWdnZXN0XSA9IHVzZVN0YXRlKHsgaG90ZWxzOiBbXSwgcmVnaW9uczogW10gfSk7XG4gIGNvbnN0IFthY3RpdmVTdWdnZXN0SXRlbSwgc2V0QWN0aXZlU3VnZ2VzdEl0ZW1dID0gdXNlU3RhdGUoMCk7XG5cbiAgY29uc3Qgc3VnZ2VzdEl0ZW1zQ291bnQgPSBzdWdnZXN0LmhvdGVscy5sZW5ndGggKyBzdWdnZXN0LnJlZ2lvbnMubGVuZ3RoO1xuICBjb25zdCB7IHJlZ2lvbnMsIGhvdGVscyB9ID0gc3VnZ2VzdDtcblxuICBjb25zdCBpc1N1Z2dlc3RWaXNpYmxlID0gbmVlZFNob3dTdWdnZXN0XG4gICAgJiYgKHJlZ2lvbnMubGVuZ3RoICsgaG90ZWxzLmxlbmd0aCkgPiAwO1xuXG4gIGlmIChxdWVyeSBpbiBzdWdnZXN0cyAmJiBzdWdnZXN0LnF1ZXJ5ICE9PSBxdWVyeSkge1xuICAgIHNldFN1Z2dlc3Qoc3VnZ2VzdHNbcXVlcnldKTtcbiAgICBzZXRBY3RpdmVTdWdnZXN0SXRlbSgwKTtcbiAgfSBlbHNlIHtcbiAgICBsb2FkU3VnZ2VzdChxdWVyeSk7XG4gIH1cblxuICB1c2VFZmZlY3QoKCkgPT4gc2V0SW5wdXRSZWYoaW5wdXRFbCksIFtdKTtcblxuICBjb25zdCBpbnRsID0gdXNlSW50bCgpO1xuXG4gIGNvbnN0IGNsb3NlU3VnZ2VzdCA9IHVzZUNhbGxiYWNrKFxuICAgIGhpZGVTdWdnZXN0LFxuICAgIFtyZWdpb25zLCBob3RlbHMsIGlzU3VnZ2VzdFZpc2libGUsIG5lZWRTaG93U3VnZ2VzdF1cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxDbGlja091dHNpZGVcbiAgICAgIHJlZj17d3JhcHBlclJlZn1cbiAgICAgIG9uQ2xpY2tPdXRzaWRlPXtjbG9zZVN1Z2dlc3R9XG4gICAgPlxuICAgICAgPElucHV0XG4gICAgICAgIGlucHV0UmVmPXtpbnB1dEVsfVxuICAgICAgICBvbkZvY3VzPXtvbklucHV0Rm9jdXN9XG4gICAgICAgIG9uQ2hhbmdlPXtvbklucHV0Q2hhbmdlfVxuICAgICAgICBvbktleURvd249e29uS2V5RG93bn1cbiAgICAgICAgdmFsdWU9e3F1ZXJ5fVxuICAgICAgICBzaXplPVwibVwiXG4gICAgICAgIHdpZGU9e3RydWV9XG4gICAgICAgIGxhYmVsPXtpbnRsLmZvcm1hdE1lc3NhZ2UobWVzc2FnZXMubGFiZWwpfVxuICAgICAgICBwbGFjZWhvbGRlcj17aW50bC5mb3JtYXRNZXNzYWdlKG1lc3NhZ2VzLnBsYWNlaG9sZGVyKX1cbiAgICAgIC8+XG4gICAgICB7XG4gICAgICAgIGlzU3VnZ2VzdFZpc2libGUgJiYgIWlzTW9iaWxlKClcbiAgICAgICAgJiYgPFBvcHVwXG4gICAgICAgICAgdG9wPXtib3VuZHMuYWJzb2x1dGVCb3R0b20gKyAxfVxuICAgICAgICAgIGxlZnQ9e2JvdW5kcy5hYnNvbHV0ZUxlZnR9XG4gICAgICAgICAgd2lkdGg9e2JvdW5kcy53aWR0aH1cbiAgICAgICAgICByb290RWxlbWVudD17cm9vdEVsZW1lbnR9XG4gICAgICAgID5cbiAgICAgICAgICA8U3VnZ2VzdFxuICAgICAgICAgICAgcmVnaW9ucz17cmVnaW9uc31cbiAgICAgICAgICAgIGhvdGVscz17aG90ZWxzfVxuICAgICAgICAgICAgc2V0VmFsdWU9e3NldFZhbHVlRnJvbVN1Z2dlc3R9XG4gICAgICAgICAgICBhY3RpdmVJdGVtPXthY3RpdmVTdWdnZXN0SXRlbX1cbiAgICAgICAgICAgIHNldEFjdGl2ZUl0ZW09e3NldEFjdGl2ZVN1Z2dlc3RJdGVtfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvUG9wdXA+XG4gICAgICB9XG4gICAgICB7XG4gICAgICAgIG5lZWRTaG93U3VnZ2VzdCAmJiBpc01vYmlsZSgpXG4gICAgICAgICYmIDxNb2JpbGVTdWdnZXN0XG4gICAgICAgICAgY2xvc2VTdWdnZXN0PXtjbG9zZVN1Z2dlc3R9XG4gICAgICAgICAgb25JbnB1dENoYW5nZT17b25JbnB1dENoYW5nZX1cbiAgICAgICAgICBxdWVyeT17cXVlcnl9XG4gICAgICAgICAgcmVnaW9ucz17cmVnaW9uc31cbiAgICAgICAgICBob3RlbHM9e2hvdGVsc31cbiAgICAgICAgICBzZXRWYWx1ZUZyb21TdWdnZXN0PXtzZXRWYWx1ZUZyb21TdWdnZXN0fVxuICAgICAgICAgIGFjdGl2ZVN1Z2dlc3RJdGVtPXthY3RpdmVTdWdnZXN0SXRlbX1cbiAgICAgICAgICBzZXRBY3RpdmVTdWdnZXN0SXRlbT17c2V0QWN0aXZlU3VnZ2VzdEl0ZW19XG4gICAgICAgIC8+XG4gICAgICB9XG4gICAgPC9DbGlja091dHNpZGU+XG4gICk7XG5cbiAgZnVuY3Rpb24gb25JbnB1dENoYW5nZShlKSB7XG4gICAgc2V0UXVlcnkoZS50YXJnZXQudmFsdWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25JbnB1dEZvY3VzKGUpIHtcbiAgICBpZiAoaXNNb2JpbGUoKSkge1xuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKG5vU2Nyb2xsQ2xhc3MpO1xuICAgIH1cblxuICAgIGlmIChpc1RhYmxldCgpICYmICFpc0RlbW8pIHtcbiAgICAgIHNlYXJjaEZvcm1SZWYuY3VycmVudC5zY3JvbGxJbnRvVmlldyh7XG4gICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJyxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaXNEZXNrdG9wVXAoKSAmJiBpblBvcHVwICYmIHJvb3RFbGVtZW50KSB7XG4gICAgICByb290RWxlbWVudC5zY3JvbGxUbyh7XG4gICAgICAgIHRvcDogMTIwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcbiAgICAgIH0pXG4gICAgfVxuICAgIHNldFNob3dTdWdnZXN0KHRydWUpO1xuXG4gICAgaW5wdXRFbC5jdXJyZW50LnNldFNlbGVjdGlvblJhbmdlKDAsIGUudGFyZ2V0LnZhbHVlLmxlbmd0aCk7XG4gIH1cblxuICBmdW5jdGlvbiBoaWRlU3VnZ2VzdCgpIHtcbiAgICBpZiAoIW5lZWRTaG93U3VnZ2VzdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghc2VsZWN0ZWRWYWx1ZSkge1xuICAgICAgY29uc3QgYWN0aXZlSXRlbSA9IFsuLi5yZWdpb25zLCAuLi5ob3RlbHNdLmZpbmQoXG4gICAgICAgIGVsID0+IGVsLmluZGV4ID09PSBhY3RpdmVTdWdnZXN0SXRlbVxuICAgICAgKTtcblxuICAgICAgaWYgKGFjdGl2ZUl0ZW0pIHtcbiAgICAgICAgc2V0VmFsdWVGcm9tU3VnZ2VzdChhY3RpdmVJdGVtKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2V0VmFsdWVGcm9tU3VnZ2VzdChzZWxlY3RlZFZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uS2V5RG93bihlKSB7XG4gICAgc3dpdGNoIChlLmtleUNvZGUpIHtcbiAgICAgIGNhc2UgOTpcbiAgICAgICAgcmV0dXJuIHRhYigpO1xuICAgICAgY2FzZSAxMzpcbiAgICAgICAgcmV0dXJuIGVudGVyKCk7XG4gICAgICBjYXNlIDM4OlxuICAgICAgICByZXR1cm4gdXAoKTtcbiAgICAgIGNhc2UgNDA6XG4gICAgICAgIHJldHVybiBkb3duKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXAoKSB7XG4gICAgICBzZXRBY3RpdmVTdWdnZXN0SXRlbShcbiAgICAgICAgKGFjdGl2ZVN1Z2dlc3RJdGVtICsgc3VnZ2VzdEl0ZW1zQ291bnQgLSAxKSAlIHN1Z2dlc3RJdGVtc0NvdW50XG4gICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRvd24oKSB7XG4gICAgICBzZXRBY3RpdmVTdWdnZXN0SXRlbShcbiAgICAgICAgKGFjdGl2ZVN1Z2dlc3RJdGVtICsgc3VnZ2VzdEl0ZW1zQ291bnQgKyAxKSAlIHN1Z2dlc3RJdGVtc0NvdW50XG4gICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVudGVyKCkge1xuICAgICAgY29uc3QgdmFsdWUgPSBbLi4uaG90ZWxzLCAuLi5yZWdpb25zXS5maW5kKFxuICAgICAgICBpdGVtID0+IGl0ZW0uaW5kZXggPT09IGFjdGl2ZVN1Z2dlc3RJdGVtXG4gICAgICApO1xuXG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2V0VmFsdWVGcm9tU3VnZ2VzdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGFiKCkge1xuICAgICAgaGlkZVN1Z2dlc3QoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRWYWx1ZUZyb21TdWdnZXN0KHZhbHVlKSB7XG4gICAgaWYgKGlzTW9iaWxlKCkpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShub1Njcm9sbENsYXNzKTtcbiAgICB9XG5cbiAgICBzZXRTZWxlY3RlZFZhbHVlKHZhbHVlKTtcbiAgICBvbkNoYW5nZSh2YWx1ZSk7XG5cbiAgICBpbnB1dEVsLmN1cnJlbnQgJiYgaW5wdXRFbC5jdXJyZW50LmJsdXIoKTtcblxuICAgIHNldFF1ZXJ5KGdldFZhbHVlTGFiZWwodmFsdWUpKTtcbiAgICBzZXRTaG93U3VnZ2VzdChmYWxzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRWYWx1ZUxhYmVsKHZhbHVlKSB7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGNvbnN0IHBhcnRzID0gW3ZhbHVlLm5hbWVdO1xuXG4gICAgaWYgKHZhbHVlLm11bHRpY29tcGxldGVUeXBlID09PSAnaG90ZWwnKSB7XG4gICAgICBpZiAodmFsdWUuY291bnRyeU5hbWUpIHtcbiAgICAgICAgcGFydHMucHVzaCh2YWx1ZS5jb3VudHJ5TmFtZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2YWx1ZS5jb3VudHJ5KSB7XG4gICAgICBwYXJ0cy5wdXNoKHZhbHVlLmNvdW50cnkpO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJ0cy5qb2luKCcsICcpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShEZXN0aW5hdGlvbik7XG5cbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyh7IGRlc3RpbmF0aW9uIH0pIHtcbiAgcmV0dXJuIHsgc3VnZ2VzdHM6IGRlc3RpbmF0aW9uLnN1Z2dlc3RzIH07XG59XG5cbmZ1bmN0aW9uIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCkge1xuICBjb25zdCBzdWdnZXN0VGhyb3R0bGVUaW1lID0gMTAwMDtcblxuICByZXR1cm4ge1xuICAgIGxvYWRTdWdnZXN0OiB0aHJvdHRsZShcbiAgICAgIChxdWVyeSkgPT4gZGlzcGF0Y2goZGVzdGluYXRpb25BY3Rpb25zLmxvYWRTdWdnZXN0KHF1ZXJ5KSksXG4gICAgICBzdWdnZXN0VGhyb3R0bGVUaW1lXG4gICAgKSxcbiAgfTtcbn1cbiIsImV4cG9ydCBjb25zdCBBRERfUk9PTSA9ICdBRERfUk9PTSc7XG5leHBvcnQgY29uc3QgUkVNT1ZFX1JPT00gPSAnUkVNT1ZFX1JPT00nO1xuZXhwb3J0IGNvbnN0IFNFVF9BRFVMVFMgPSAnU0VUX0FEVUxUUyc7XG5leHBvcnQgY29uc3QgU0VUX0tJRFMgPSAnU0VUX0tJRFMnO1xuZXhwb3J0IGNvbnN0IFNFVF9LSURfQUdFID0gJ1NFVF9LSURfQUdFJztcbiIsImltcG9ydCB7XG4gIEFERF9ST09NLFxuICBSRU1PVkVfUk9PTSxcbiAgU0VUX0FEVUxUUyxcbiAgU0VUX0tJRFMsXG4gIFNFVF9LSURfQUdFLFxufSBmcm9tICcuL2FjdGlvblR5cGVzJztcblxuaW1wb3J0IGZpbGwgZnJvbSAnbG9kYXNoL2ZpbGwnO1xuXG5mdW5jdGlvbiBndWVzdHNSZWR1Y2VyKHN0YXRlLCBhY3Rpb24pIHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgQUREX1JPT006XG4gICAgICByZXR1cm4gYWRkUm9vbShzdGF0ZSk7XG4gICAgY2FzZSBSRU1PVkVfUk9PTTpcbiAgICAgIHJldHVybiByZW1vdmVSb29tKHN0YXRlLCBhY3Rpb24ucm9vbUluZGV4KTtcbiAgICBjYXNlIFNFVF9BRFVMVFM6XG4gICAgICByZXR1cm4gc2V0QWR1bHRzKHN0YXRlLCBhY3Rpb24ucm9vbUluZGV4LCBhY3Rpb24uY291bnQpO1xuICAgIGNhc2UgU0VUX0tJRFM6XG4gICAgICByZXR1cm4gc2V0S2lkcyhzdGF0ZSwgYWN0aW9uLnJvb21JbmRleCwgYWN0aW9uLmNvdW50KTtcbiAgICBjYXNlIFNFVF9LSURfQUdFOlxuICAgICAgcmV0dXJuIHNldEtpZEFnZShzdGF0ZSwgYWN0aW9uLnJvb21JbmRleCwgYWN0aW9uLmtpZEluZGV4LCBhY3Rpb24uYWdlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRSb29tKHN0YXRlKSB7XG4gIHJldHVybiBbXG4gICAgLi4uc3RhdGUsXG4gICAge1xuICAgICAgYWR1bHRzOiAyLFxuICAgICAga2lkczogW10sXG4gICAgfSxcbiAgXTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlUm9vbShzdGF0ZSwgcm9vbUluZGV4KSB7XG4gIHJldHVybiBbXG4gICAgLi4uc3RhdGUuc2xpY2UoMCwgcm9vbUluZGV4KSxcbiAgICAuLi5zdGF0ZS5zbGljZShyb29tSW5kZXggKyAxKSxcbiAgXTtcbn1cblxuZnVuY3Rpb24gc2V0QWR1bHRzKHN0YXRlLCByb29tSW5kZXgsIGNvdW50KSB7XG4gIGNvbnN0IG9sZFJvb20gPSBzdGF0ZVtyb29tSW5kZXhdO1xuICBjb25zdCB1cGRhdGVkUm9vbSA9IHtcbiAgICAuLi5vbGRSb29tLFxuICAgIGFkdWx0czogY291bnQsXG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZUFycmF5SXRlbShzdGF0ZSwgcm9vbUluZGV4LCB1cGRhdGVkUm9vbSk7XG59XG5cbmZ1bmN0aW9uIHNldEtpZHMoc3RhdGUsIHJvb21JbmRleCwgY291bnQpIHtcbiAgY29uc3Qgb2xkUm9vbSA9IHN0YXRlW3Jvb21JbmRleF07XG4gIGNvbnN0IG9sZEtpZHMgPSBvbGRSb29tLmtpZHM7XG4gIGNvbnN0IHVwZGF0ZWRLaWRzID0gb2xkS2lkcy5sZW5ndGggPj0gY291bnRcbiAgICA/IG9sZEtpZHMuc2xpY2UoMCwgY291bnQpXG4gICAgOiBbXG4gICAgICAuLi5vbGRLaWRzLFxuICAgICAgLi4uZmlsbChBcnJheShjb3VudCAtIG9sZEtpZHMubGVuZ3RoKSwgMCksXG4gICAgXTtcbiAgY29uc3QgdXBkYXRlZFJvb20gPSB7XG4gICAgLi4ub2xkUm9vbSxcbiAgICBraWRzOiB1cGRhdGVkS2lkcyxcbiAgfTtcblxuICByZXR1cm4gdXBkYXRlQXJyYXlJdGVtKHN0YXRlLCByb29tSW5kZXgsIHVwZGF0ZWRSb29tKTtcbn1cblxuZnVuY3Rpb24gaW5jcmVtZW50S2lkcyhzdGF0ZSwgcm9vbUluZGV4KSB7XG4gIGNvbnN0IG9sZFJvb20gPSBzdGF0ZVtyb29tSW5kZXhdO1xuICBjb25zdCB1cGRhdGVkUm9vbSA9IHtcbiAgICAuLi5vbGRSb29tLFxuICAgIGtpZHM6IFsuLi5vbGRSb29tLmtpZHMsIDBdLFxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVBcnJheUl0ZW0oc3RhdGUsIHJvb21JbmRleCwgdXBkYXRlZFJvb20pO1xufVxuXG5mdW5jdGlvbiBkZWNyZW1lbnRLaWRzKHN0YXRlLCByb29tSW5kZXgpIHtcbiAgY29uc3Qgb2xkUm9vbSA9IHN0YXRlW3Jvb21JbmRleF07XG4gIGNvbnN0IHVwZGF0ZWRSb29tID0ge1xuICAgIC4uLm9sZFJvb20sXG4gICAga2lkczogb2xkUm9vbS5raWRzLnNsaWNlKDAsIC0xKSxcbiAgfTtcblxuICByZXR1cm4gdXBkYXRlQXJyYXlJdGVtKHN0YXRlLCByb29tSW5kZXgsIHVwZGF0ZWRSb29tKTtcbn1cblxuZnVuY3Rpb24gc2V0S2lkQWdlKHN0YXRlLCByb29tSW5kZXgsIGtpZEluZGV4LCBhZ2UpIHtcbiAgY29uc3Qgb2xkUm9vbSA9IHN0YXRlW3Jvb21JbmRleF07XG4gIGNvbnN0IG9sZEtpZHMgPSBvbGRSb29tLmtpZHM7XG4gIGNvbnN0IHVwZGF0ZWRLaWRzID0gdXBkYXRlQXJyYXlJdGVtKG9sZEtpZHMsIGtpZEluZGV4LCBOdW1iZXIoYWdlKSk7XG4gIGNvbnN0IHVwZGF0ZWRSb29tID0ge1xuICAgIC4uLm9sZFJvb20sXG4gICAga2lkczogdXBkYXRlZEtpZHMsXG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZUFycmF5SXRlbShzdGF0ZSwgcm9vbUluZGV4LCB1cGRhdGVkUm9vbSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUFycmF5SXRlbShhcnJheSwgaW5kZXgsIG5ld0l0ZW0pIHtcbiAgcmV0dXJuIFtcbiAgICAuLi5hcnJheS5zbGljZSgwLCBpbmRleCksXG4gICAgbmV3SXRlbSxcbiAgICAuLi5hcnJheS5zbGljZShpbmRleCArIDEpLFxuICBdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBndWVzdHNSZWR1Y2VyO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEljb25GQyB9IGZyb20gJy4nO1xuXG5jb25zdCBQbHVzOiBJY29uRkMgPSAoe1xuICBmaWxsID0gJ2N1cnJlbnRDb2xvcicsXG4gIHdpZHRoID0gMTgsXG4gIGhlaWdodCA9IDE4LFxuICAuLi5yZXN0XG59KSA9PiAoXG4gIDxzdmcgd2lkdGg9e3dpZHRofSBoZWlnaHQ9e2hlaWdodH0gdmlld0JveD1cIjAgMCAxOCAxOFwiIHsuLi5yZXN0fT5cbiAgICA8cGF0aFxuICAgICAgZmlsbD17ZmlsbH1cbiAgICAgIGZpbGxSdWxlPVwibm9uemVyb1wiXG4gICAgICBkPVwiTTE1LjUxNyA3LjY0MmgtNS4xNnYtNS4xNmExLjM1OCAxLjM1OCAwIDAgMC0yLjcxNSAwdjUuMTZoLTUuMTZhMS4zNTggMS4zNTggMCAwIDAgMCAyLjcxNmg1LjE2djUuMTZhMS4zNTggMS4zNTggMCAwIDAgMi43MTYgMHYtNS4xNmg1LjE2YTEuMzU4IDEuMzU4IDAgMCAwIDAtMi43MTZcIlxuICAgIC8+XG4gIDwvc3ZnPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgUGx1cztcbiIsImNvbnN0IGNyZWF0ZUV2ZW50ID0gKHR5cGU6IHN0cmluZykgPT4ge1xuICBpZiAodHlwZW9mIEV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIG5ldyBFdmVudCh0eXBlLCB7IGJ1YmJsZXM6IHRydWUsIGNhbmNlbGFibGU6IHRydWUgfSk7XG4gIH1cblxuICBjb25zdCBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdIVE1MRXZlbnRzJyk7XG5cbiAgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIHRydWUsIHRydWUpO1xuXG4gIHJldHVybiBldmVudDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUV2ZW50O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVN0b3JlIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IGNzc21lbSBmcm9tICdjc3NtZW0nO1xuXG5pbXBvcnQgY3JlYXRlRXZlbnQgZnJvbSAnLi4vaGVscGVycy9ldmVudCc7XG5cbmltcG9ydCBJbnB1dCwgeyBTSVpFIH0gZnJvbSAnLi4vSW5wdXQnO1xuaW1wb3J0IEFycm93RG93biBmcm9tICcuLi9JY29uL0Fycm93RG93bic7XG5pbXBvcnQgQ3Jvc3MgZnJvbSAnLi4vSWNvbi9Dcm9zcyc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9TZWxlY3QuY3NzJztcblxuaW50ZXJmYWNlIE9wdGlvbiB7XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgaGlkZGVuPzogYm9vbGVhbjtcbiAgdGV4dDogc3RyaW5nO1xuICB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIHN0eWxlPzogUmVhY3QuQ1NTUHJvcGVydGllcztcbiAgc2l6ZTogU0laRTtcbiAgbGFiZWw/OiBzdHJpbmc7XG4gIHRvb2x0aXBDb250ZW50PzogKCkgPT4gUmVhY3QuUmVhY3RFbGVtZW50O1xuICBzZWxlY3RSZWY/OiBSZWFjdC5SZWZPYmplY3Q8SFRNTFNlbGVjdEVsZW1lbnQ+O1xuICBvbkZvY3VzPzogKGV2ZW50OiBSZWFjdC5Gb2N1c0V2ZW50PEhUTUxTZWxlY3RFbGVtZW50PikgPT4gdm9pZDtcbiAgb25DaGFuZ2U/OiAoZXZlbnQ6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxTZWxlY3RFbGVtZW50PikgPT4gdm9pZDtcbiAgb25CbHVyPzogKGV2ZW50OiBSZWFjdC5Gb2N1c0V2ZW50PEhUTUxTZWxlY3RFbGVtZW50PikgPT4gdm9pZDtcbiAgb25LZXlEb3duPzogKGV2ZW50OiBSZWFjdC5LZXlib2FyZEV2ZW50PEhUTUxTZWxlY3RFbGVtZW50PikgPT4gdm9pZDtcbiAgaWNvbj86IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgZGVmYXVsdFZhbHVlPzogc3RyaW5nIHwgbnVtYmVyO1xuICB2YWx1ZT86IHN0cmluZyB8IG51bWJlcjtcbiAgb3B0aW9uczogT3B0aW9uW107XG4gIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG4gIGNsZWFuZWQ/OiBib29sZWFuO1xuICBmb3JtYXRWYWx1ZT86ICh2YWx1ZT86IHN0cmluZyB8IG51bWJlcikgPT4gc3RyaW5nO1xuICBjYW5jZWxsYWJsZT86IGJvb2xlYW47XG4gIHdpZGU/OiBib29sZWFuO1xuICByZXF1aXJlZD86IGJvb2xlYW47XG4gIGlzQXJyb3dEaXNhYmxlZD86IGJvb2xlYW47XG59XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmNvbnN0IFNlbGVjdDogUmVhY3QuRkM8UHJvcHM+ID0gKHtcbiAgY2xhc3NOYW1lLFxuICBzdHlsZSxcbiAgc2l6ZSxcbiAgbGFiZWwsXG4gIHRvb2x0aXBDb250ZW50LFxuICBzZWxlY3RSZWYsXG4gIG9uRm9jdXMsXG4gIG9uQ2hhbmdlLFxuICBvbkJsdXIsXG4gIG9uS2V5RG93bixcbiAgaWNvbixcbiAgZGVmYXVsdFZhbHVlLFxuICB2YWx1ZSxcbiAgb3B0aW9ucyxcbiAgcGxhY2Vob2xkZXIsXG4gIGRpc2FibGVkLFxuICBjbGVhbmVkLFxuICBmb3JtYXRWYWx1ZSxcbiAgY2FuY2VsbGFibGUsXG4gIHdpZGUsXG4gIHJlcXVpcmVkLFxuICBpc0Fycm93RGlzYWJsZWQsXG59KSA9PiB7XG4gIGNvbnN0IHsgdGhlbWUgfSA9IHVzZVN0b3JlKCkuZ2V0U3RhdGUoKTtcbiAgY29uc3QgZmlsbCA9IHRoZW1lLmxpbms7XG5cbiAgY29uc3QgaGFzVmFsdWUgPSBnZXRUZXh0KHZhbHVlIHx8IGRlZmF1bHRWYWx1ZSkgIT09ICcnO1xuICBsZXQgaW5wdXRJY29uID1cbiAgICBpc0Fycm93RGlzYWJsZWQgfHwgKGNhbmNlbGxhYmxlICYmIGhhc1ZhbHVlKSA/IHVuZGVmaW5lZCA6IChcbiAgICAgIDxBcnJvd0Rvd25cbiAgICAgICAgY2xhc3NOYW1lPXtlbSgnYXJyb3dEb3duJykoKX1cbiAgICAgICAgd2lkdGg9ezIwfVxuICAgICAgICBoZWlnaHQ9ezIwfVxuICAgICAgICBmaWxsPXtmaWxsfVxuICAgICAgLz5cbiAgICApO1xuICBpZiAoaWNvbikge1xuICAgIGlucHV0SWNvbiA9IGljb247XG4gIH1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gIGNvbnN0IHJlZiA9IHNlbGVjdFJlZiB8fCB1c2VSZWYobnVsbCk7XG5cbiAgcmV0dXJuIChcbiAgICA8SW5wdXRcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgc3R5bGU9e3N0eWxlfVxuICAgICAgcHNldWRvXG4gICAgICBzaXplPXtzaXplfVxuICAgICAgbGFiZWw9e2xhYmVsfVxuICAgICAgdG9vbHRpcENvbnRlbnQ9e3Rvb2x0aXBDb250ZW50fVxuICAgICAgdmFsdWU9e1xuICAgICAgICBmb3JtYXRWYWx1ZVxuICAgICAgICAgID8gZm9ybWF0VmFsdWUodmFsdWUgfHwgZGVmYXVsdFZhbHVlKVxuICAgICAgICAgIDogZ2V0VGV4dCh2YWx1ZSB8fCBkZWZhdWx0VmFsdWUpXG4gICAgICB9XG4gICAgICB3aWRlPXt3aWRlfVxuICAgICAgcGxhY2Vob2xkZXI9e3BsYWNlaG9sZGVyfVxuICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgcmVxdWlyZWQ9e3JlcXVpcmVkfVxuICAgICAgaWNvbj17aW5wdXRJY29ufVxuICAgID5cbiAgICAgIDxzZWxlY3RcbiAgICAgICAgY2xhc3NOYW1lPXtlbSgnY29udHJvbCcpKCl9XG4gICAgICAgIHJlZj17cmVmfVxuICAgICAgICBvbkZvY3VzPXtvbkZvY3VzfVxuICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgIG9uQmx1cj17b25CbHVyfVxuICAgICAgICBvbktleURvd249e29uS2V5RG93bn1cbiAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICBkZWZhdWx0VmFsdWU9e2RlZmF1bHRWYWx1ZX1cbiAgICAgICAgdmFsdWU9e2NsZWFuZWQgPyAnJyA6IHZhbHVlfVxuICAgICAgPlxuICAgICAgICB7XG4gICAgICAgICAgY2xlYW5lZCAmJiA8b3B0aW9uIHZhbHVlPVwiXCIgZGlzYWJsZWQgaGlkZGVuIC8+IC8vIGVzbGludC1kaXNhYmxlLWxpbmUganN4LWExMXkvY29udHJvbC1oYXMtYXNzb2NpYXRlZC1sYWJlbFxuICAgICAgICB9XG4gICAgICAgIHtvcHRpb25zLm1hcCgoXG4gICAgICAgICAgeyB2YWx1ZSwgdGV4dCwgZGlzYWJsZWQsIGhpZGRlbiB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2hhZG93XG4gICAgICAgICkgPT4gKFxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9e3ZhbHVlfSBrZXk9e3ZhbHVlfSBkaXNhYmxlZD17ZGlzYWJsZWR9IGhpZGRlbj17aGlkZGVufT5cbiAgICAgICAgICAgIHt0ZXh0fVxuICAgICAgICAgIDwvb3B0aW9uPlxuICAgICAgICApKX1cbiAgICAgIDwvc2VsZWN0PlxuICAgICAge2NhbmNlbGxhYmxlICYmIGhhc1ZhbHVlICYmIChcbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ2NsZWFySWNvbicpKCl9XG4gICAgICAgICAgb25DbGljaz17Y2xlYXJWYWx1ZX1cbiAgICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICB0YWJJbmRleD17MH1cbiAgICAgICAgPlxuICAgICAgICAgIDxDcm9zcyB3aWR0aD17MjB9IGhlaWdodD17MjB9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICA8L0lucHV0PlxuICApO1xuXG4gIGZ1bmN0aW9uIGNsZWFyVmFsdWUoKSB7XG4gICAgaWYgKCFyZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGV2dCA9IGNyZWF0ZUV2ZW50KCdjaGFuZ2UnKTtcblxuICAgIHJlZi5jdXJyZW50LnZhbHVlID0gJyc7XG4gICAgcmVmLmN1cnJlbnQuZGlzcGF0Y2hFdmVudChldnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VGV4dChyYXdWYWx1ZT86IHN0cmluZyB8IG51bWJlcikge1xuICAgIGlmIChjYW5jZWxsYWJsZSAmJiAhcmF3VmFsdWUpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChvcHRpb25zW2ldLnZhbHVlID09PSByYXdWYWx1ZSkge1xuICAgICAgICByZXR1cm4gb3B0aW9uc1tpXS50ZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAnJztcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgU2VsZWN0O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0NvdW50ZXIuY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuY29uc3QgQ291bnRlciA9ICh7XG4gIHZhbHVlLFxuICBtYXgsXG4gIG1pbixcbiAgb25DaGFuZ2UsXG59KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2VtKCd3cmFwcGVyJykoKX0+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNsYXNzTmFtZT17ZW0oJ2NvdW50QnV0dG9uJykoeyBkaXNhYmxlZDogdmFsdWUgPD0gbWluIH0pfVxuICAgICAgICBkaXNhYmxlZD17dmFsdWUgPD0gbWlufVxuICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkNoYW5nZSh2YWx1ZSAtIDEpfVxuICAgICAgPiZtaW51czs8L2J1dHRvbj5cblxuICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCd2YWx1ZScpKCl9PlxuICAgICAgICB7dmFsdWV9XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGJ1dHRvblxuICAgICAgICBjbGFzc05hbWU9e2VtKCdjb3VudEJ1dHRvbicpKHsgZGlzYWJsZWQ6IHZhbHVlID49IG1heCB9KX1cbiAgICAgICAgZGlzYWJsZWQ9e3ZhbHVlID49IG1heH1cbiAgICAgICAgb25DbGljaz17KCkgPT4gb25DaGFuZ2UodmFsdWUgKyAxKX1cbiAgICAgID4rPC9idXR0b24+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb3VudGVyO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGRlZmluZU1lc3NhZ2VzLCB1c2VJbnRsIH0gZnJvbSAncmVhY3QtaW50bCc7XG5pbXBvcnQgY3NzbWVtIGZyb20gJ2Nzc21lbSc7XG5pbXBvcnQgcmFuZ2UgZnJvbSAnbG9kYXNoL3JhbmdlJztcblxuaW1wb3J0IFNlbGVjdCBmcm9tICdjb21wb25lbnRzL1NlbGVjdCc7XG5cbmltcG9ydCBhY3Rpb25zIGZyb20gJy4vYWN0aW9ucyc7XG5pbXBvcnQgQ291bnRlciBmcm9tICcuL0NvdW50ZXInO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vUm9vbS5jc3MnO1xuXG5jb25zdCBlbSA9IGNzc21lbShzdHlsZXMpO1xuXG5jb25zdCBtZXNzYWdlcyA9IGRlZmluZU1lc3NhZ2VzKHtcbiAgcm9vbU51bWJlcjoge1xuICAgIGlkOiBcImd1ZXN0cy5yb29tTnVtYmVyXCIsXG4gICAgZGVmYXVsdE1lc3NhZ2U6IFwie3Jvb21OdW1iZXJ9INC90L7QvNC10YBcIixcbiAgfSxcbiAgYWR1bHRzTGFiZWw6IHtcbiAgICBpZDogXCJndWVzdHMuYWR1bHRzTGFiZWxcIixcbiAgICBkZWZhdWx0TWVzc2FnZTogXCLQktC30YDQvtGB0LvRi9C1XCIsXG4gIH0sXG4gIGtpZHNMYWJlbDoge1xuICAgIGlkOiBcImd1ZXN0cy5raWRzTGFiZWxcIixcbiAgICBkZWZhdWx0TWVzc2FnZTogXCLQlNC10YLQuFwiLFxuICB9LFxuICBraWRBZ2U6IHtcbiAgICBpZDogXCJndWVzdHMua2lkQWdlXCIsXG4gICAgZGVmYXVsdE1lc3NhZ2U6IFwi0JLQvtC30YDQsNGB0YIg0YDQtdCx0ZHQvdC60LBcIixcbiAgfSxcbiAgcmVtb3ZlOiB7XG4gICAgaWQ6IFwiZ3Vlc3RzLnJlbW92ZVwiLFxuICAgIGRlZmF1bHRNZXNzYWdlOiBcItCj0LTQsNC70LjRgtGMXCIsXG4gIH0sXG59KTtcblxuY29uc3Qga2lkc0FnZXMgPSByYW5nZSgxOCk7XG5cbmNvbnN0IEFEVUxUU19NQVggPSA2O1xuY29uc3QgQURVTFRTX01JTiA9IDE7XG5cbmNvbnN0IEtJRFNfTUFYID0gNDtcbmNvbnN0IEtJRFNfTUlOID0gMDtcblxuY29uc3QgUm9vbSA9ICh7XG4gIHJvb20sXG4gIGluZGV4LFxuICByZW1vdmVSb29tLFxuICBzZXRBZHVsdHNDb3VudCxcbiAgc2V0S2lkc0NvdW50LFxuICBzZXRLaWRBZ2UsXG59KSA9PiB7XG4gIGNvbnN0IGNhblJlbW92ZVJvb20gPSBpbmRleCAhPT0gMDtcbiAgY29uc3QgaW50bCA9IHVzZUludGwoKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnd3JhcHBlcicpKCl9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCdsaW5lJykoKX0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnbGVmdENvbHVtbicpKCl9PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgndGl0bGUnKSgpfT5cbiAgICAgICAgICAgIHtpbnRsLmZvcm1hdE1lc3NhZ2UobWVzc2FnZXMucm9vbU51bWJlciwgeyByb29tTnVtYmVyOiBpbmRleCArIDEgfSl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAge1xuICAgICAgICAgICAgY2FuUmVtb3ZlUm9vbVxuICAgICAgICAgICAgJiYgPGJ1dHRvbiBjbGFzc05hbWU9e2VtKCdyZW1vdmVCdG4nKSgpfSBvbkNsaWNrPXtyZW1vdmVSb29tfT5cbiAgICAgICAgICAgICAge2ludGwuZm9ybWF0TWVzc2FnZShtZXNzYWdlcy5yZW1vdmUpfVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgfVxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ3JpZ2h0Q29sdW1uJykoKX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCdjb250cm9sQm94JykoKX0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2xhYmVsJykoKX0+XG4gICAgICAgICAgICAgIHtpbnRsLmZvcm1hdE1lc3NhZ2UobWVzc2FnZXMuYWR1bHRzTGFiZWwpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8Q291bnRlclxuICAgICAgICAgICAgICB2YWx1ZT17cm9vbS5hZHVsdHN9XG4gICAgICAgICAgICAgIG1pbj17QURVTFRTX01JTn1cbiAgICAgICAgICAgICAgbWF4PXtBRFVMVFNfTUFYfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17c2V0QWR1bHRzQ291bnR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCdjb250cm9sQm94JykoKX0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2xhYmVsJykoKX0+XG4gICAgICAgICAgICAgIHtpbnRsLmZvcm1hdE1lc3NhZ2UobWVzc2FnZXMua2lkc0xhYmVsKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPENvdW50ZXJcbiAgICAgICAgICAgICAgdmFsdWU9e3Jvb20ua2lkcy5sZW5ndGh9XG4gICAgICAgICAgICAgIG1pbj17S0lEU19NSU59XG4gICAgICAgICAgICAgIG1heD17S0lEU19NQVh9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtzZXRLaWRzQ291bnR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAge1xuICAgICAgICAgICAgcm9vbS5raWRzLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICYmIDxkaXYgY2xhc3NOYW1lPXtlbSgnbGFiZWwnKSh7IGFnZTogdHJ1ZSB9KX0+XG4gICAgICAgICAgICAgIHtpbnRsLmZvcm1hdE1lc3NhZ2UobWVzc2FnZXMua2lkQWdlKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIH1cbiAgICAgICAgICB7XG4gICAgICAgICAgICByb29tLmtpZHMubWFwKChhZ2UsIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnY29udHJvbEJveCcpKCl9IGtleT17aW5kZXh9PlxuICAgICAgICAgICAgICAgIDxTZWxlY3RcbiAgICAgICAgICAgICAgICAgIHdpZGU9e3RydWV9XG4gICAgICAgICAgICAgICAgICB2YWx1ZT17YWdlfVxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRLaWRBZ2UoaW5kZXgsIGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICAgICAgICAgIHNpemU9XCJ4c1wiXG4gICAgICAgICAgICAgICAgICBvcHRpb25zPXtraWRzQWdlcy5tYXAoYWdlID0+ICh7IHZhbHVlOiBhZ2UsIHRleHQ6IGFnZSB9KSl9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApKVxuICAgICAgICAgIH1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJvb207XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUNhbGxiYWNrLCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IGRlZmluZU1lc3NhZ2VzLCB1c2VJbnRsIH0gZnJvbSAncmVhY3QtaW50bCc7XG5pbXBvcnQgY3NzbWVtIGZyb20gJ2Nzc21lbSc7XG5cbmltcG9ydCBCdXR0b24gZnJvbSAnY29tcG9uZW50cy9CdXR0b24nO1xuaW1wb3J0IFBsdXNJY29uIGZyb20gJ2NvbXBvbmVudHMvSWNvbi9QbHVzJztcblxuaW1wb3J0IHVybHMgZnJvbSAnQGNvbnN0YW50cy91cmxzJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0Zvcm0uY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuaW1wb3J0IHtcbiAgYWRkUm9vbSxcbiAgcmVtb3ZlUm9vbSxcbiAgc2V0QWR1bHRzLFxuICBzZXRLaWRzLFxuICBzZXRLaWRBZ2UsXG59IGZyb20gJy4vYWN0aW9ucyc7XG5cbmltcG9ydCBSb29tIGZyb20gJy4vUm9vbSc7XG5cbmNvbnN0IG1lc3NhZ2VzID0gZGVmaW5lTWVzc2FnZXMoe1xuICBwbHVzUm9vbUJ0bjoge1xuICAgIGlkOiBcImd1ZXN0cy5wbHVzUm9vbUJ0blwiLFxuICAgIGRlZmF1bHRNZXNzYWdlOiBcItCd0L7QvNC10YBcIixcbiAgfSxcbiAgYm9va01vcmVCdG46IHtcbiAgICBpZDogXCJndWVzdHMuYm9va01vcmVCdG5cIixcbiAgICBkZWZhdWx0TWVzc2FnZTogXCLQl9Cw0LHRgNC+0L3QuNGA0L7QstCw0YLRjCDQsdC+0LvRjNGI0LUg0L3QvtC80LXRgNC+0LJcIixcbiAgfSxcbiAgZG9uZUJ0bjoge1xuICAgIGlkOiBcImd1ZXN0cy5kb25lQnRuXCIsXG4gICAgZGVmYXVsdE1lc3NhZ2U6IFwi0JPQvtGC0L7QstC+XCIsXG4gIH0sXG59KTtcblxuY29uc3QgUk9PTVNfTUFYID0gNjtcblxuY29uc3QgRm9ybSA9ICh7XG4gIHRvcCxcbiAgcmlnaHQsXG4gIHJvb21zLFxuICBkaXNwYXRjaCxcbiAgY2xvc2VGb3JtLFxuICBzY3JvbGxSZWYsXG4gIGlzQjJCLFxuICBpc011bHRpcm9vbSxcbn0pID0+IHtcbiAgY29uc3QgaXNNYXhpbXVtUm9vbXMgPSAhaXNNdWx0aXJvb20gfHwgcm9vbXMubGVuZ3RoID49IFJPT01TX01BWDtcblxuICBjb25zdCBbc2hvdWxkU2Nyb2xsVG9Cb3R0b20sIHNldFNob3VsZFNjcm9sbFRvQm90dG9tXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBpbnRsID0gdXNlSW50bCgpO1xuXG4gIGNvbnN0IGJvb2tNb3JlUm9vbXMgPSAoKSA9PiB7XG4gICAgY29uc3QgdXJsID0gaXNCMkJcbiAgICAgID8gYCR7dXJscy5CMkJ9L215L2dyb3VwYm9vay9gXG4gICAgICA6IGAke3VybHMuQjJCfS9mZWVkYmFjay8/cmVmPW1hbnktcGVvcGxlc2A7XG5cbiAgICB3aW5kb3cub3Blbih1cmwpO1xuICB9O1xuXG4gIGNvbnN0IGFkZFJvb21IYW5kbGVyID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGRpc3BhdGNoKGFkZFJvb20oKSk7XG4gICAgc2V0U2hvdWxkU2Nyb2xsVG9Cb3R0b20odHJ1ZSk7XG4gIH0sIFtdKTtcblxuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChzaG91bGRTY3JvbGxUb0JvdHRvbSAmJiBzY3JvbGxSZWYuY3VycmVudCkge1xuICAgICAgc2Nyb2xsUmVmLmN1cnJlbnQuc2Nyb2xsVG9wID0gc2Nyb2xsUmVmLmN1cnJlbnQuc2Nyb2xsSGVpZ2h0O1xuICAgICAgc2V0U2hvdWxkU2Nyb2xsVG9Cb3R0b20oZmFsc2UpO1xuICAgIH1cbiAgfSwgW3Nob3VsZFNjcm9sbFRvQm90dG9tXSlcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnd3JhcHBlcicpKCl9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCdyb29tcycpKCl9PlxuICAgICAgICB7XG4gICAgICAgICAgcm9vbXMubWFwKChyb29tLCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgPFJvb21cbiAgICAgICAgICAgICAgcm9vbT17cm9vbX1cbiAgICAgICAgICAgICAgaW5kZXg9e2luZGV4fVxuICAgICAgICAgICAgICByZW1vdmVSb29tPXsoKSA9PiBkaXNwYXRjaChyZW1vdmVSb29tKGluZGV4KSl9XG4gICAgICAgICAgICAgIHNldEFkdWx0c0NvdW50PXsoY291bnQpID0+IGRpc3BhdGNoKHNldEFkdWx0cyhpbmRleCwgY291bnQpKX1cbiAgICAgICAgICAgICAgc2V0S2lkc0NvdW50PXsoY291bnQpID0+IGRpc3BhdGNoKHNldEtpZHMoaW5kZXgsIGNvdW50KSl9XG4gICAgICAgICAgICAgIHNldEtpZEFnZT17KGtpZEluZGV4LCBhZ2UpID0+IGRpc3BhdGNoKHNldEtpZEFnZShcbiAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICBraWRJbmRleCxcbiAgICAgICAgICAgICAgICBhZ2VcbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgIGtleT17aW5kZXh9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICkpXG4gICAgICAgIH1cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2JvdHRvbUdyYWRpZW50JykoKX0gLz5cblxuICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCdmb290ZXInKSgpfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCdzZXBhcmF0b3InKSgpfSAvPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2J1dHRvbnMnKSgpfT5cbiAgICAgICAgICB7XG4gICAgICAgICAgICBpc01heGltdW1Sb29tc1xuICAgICAgICAgICAgPyAoXG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2VtKCdib29rTW9yZUJ0bicpKCl9XG4gICAgICAgICAgICAgICAgb25DbGljaz17Ym9va01vcmVSb29tc31cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtpbnRsLmZvcm1hdE1lc3NhZ2UobWVzc2FnZXMuYm9va01vcmVCdG4pfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIDogKFxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtlbSgnYWRkUm9vbUJ0bicpKCl9XG4gICAgICAgICAgICAgICAgb25DbGljaz17YWRkUm9vbUhhbmRsZXJ9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8UGx1c0ljb24gY2xhc3NOYW1lPXtlbSgnYWRkUm9vbUJ0bkljb24nKSgpfSB3aWR0aD1cIjE4XCIgaGVpZ2h0PVwiMThcIiAvPlxuICAgICAgICAgICAgICAgIHtpbnRsLmZvcm1hdE1lc3NhZ2UobWVzc2FnZXMucGx1c1Jvb21CdG4pfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9e2VtKCdidXR0b24nKSgpfSBzaXplPVwibVwiIHdpZGU9e3RydWV9IG9uQ2xpY2s9e2Nsb3NlRm9ybX0+XG4gICAgICAgICAgICB7aW50bC5mb3JtYXRNZXNzYWdlKG1lc3NhZ2VzLmRvbmVCdG4pfVxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRm9ybTtcbiIsImltcG9ydCB7XG4gIEFERF9ST09NLFxuICBSRU1PVkVfUk9PTSxcbiAgU0VUX0FEVUxUUyxcbiAgU0VUX0tJRFMsXG4gIFNFVF9LSURfQUdFLFxufSBmcm9tICcuL2FjdGlvblR5cGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFJvb20oKSB7XG4gIHJldHVybiB7IHR5cGU6IEFERF9ST09NIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVSb29tKHJvb21JbmRleCkge1xuICByZXR1cm4geyB0eXBlOiBSRU1PVkVfUk9PTSwgcm9vbUluZGV4IH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRBZHVsdHMocm9vbUluZGV4LCBjb3VudCkge1xuICByZXR1cm4geyB0eXBlOiBTRVRfQURVTFRTLCByb29tSW5kZXgsIGNvdW50IH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRLaWRzKHJvb21JbmRleCwgY291bnQpIHtcbiAgcmV0dXJuIHsgdHlwZTogU0VUX0tJRFMsIHJvb21JbmRleCwgY291bnQgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldEtpZEFnZShyb29tSW5kZXgsIGtpZEluZGV4LCBhZ2UpIHtcbiAgcmV0dXJuIHsgdHlwZTogU0VUX0tJRF9BR0UsIHJvb21JbmRleCwga2lkSW5kZXgsIGFnZSB9O1xufVxuIiwiaW1wb3J0IHsgZGVmaW5lTWVzc2FnZXMgfSBmcm9tICdyZWFjdC1pbnRsJztcblxuY29uc3QgbWVzc2FnZXMgPSBkZWZpbmVNZXNzYWdlcyh7XG4gIHJvb21zQ291bnQ6IHtcbiAgICBpZDogXCJndWVzdHMucm9vbXNDb3VudFwiLFxuICAgIGRlZmF1bHRNZXNzYWdlOiBgXG4gICAgICB7cm9vbXNDb3VudH0ge3Jvb21zQ291bnQsIHBsdXJhbCxcbiAgICAgICAgb25lIHvQvdC+0LzQtdGAfVxuICAgICAgICBmZXcge9C90L7QvNC10YDQsH1cbiAgICAgICAgb3RoZXIge9C90L7QvNC10YDQvtCyfVxuICAgICAgfSDQtNC70Y9cbiAgICBgLFxuICB9LFxuICBndWVzdHNDb3VudDoge1xuICAgIGlkOiBcImd1ZXN0cy5ndWVzdHNDb3VudFwiLFxuICAgIGRlZmF1bHRNZXNzYWdlOiBgXG4gICAgICB7Z3Vlc3RzQ291bnR9IHtndWVzdHNDb3VudCwgcGx1cmFsLFxuICAgICAgICBvbmUge9Cz0L7RgdGC0Y99XG4gICAgICAgIG90aGVyIHvQs9C+0YHRgtC10Ll9XG4gICAgICB9XG4gICAgYCxcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtZXNzYWdlcztcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VJbnRsIH0gZnJvbSAncmVhY3QtaW50bCc7XG5pbXBvcnQgY3NzbWVtIGZyb20gJ2Nzc21lbSc7XG5cbmltcG9ydCBJbnB1dCBmcm9tICdjb21wb25lbnRzL0lucHV0JztcbmltcG9ydCBBcnJvd0Rvd24gZnJvbSAnY29tcG9uZW50cy9JY29uL0Fycm93RG93bic7XG5pbXBvcnQgUG9wdXAgZnJvbSAnY29tcG9uZW50cy9Qb3B1cCc7XG5cbmltcG9ydCBGb3JtIGZyb20gJy4vRm9ybSc7XG5cbmltcG9ydCBtZXNzYWdlcyBmcm9tICcuL21lc3NhZ2VzJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL01vYmlsZVN1Z2dlc3QuY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuY29uc3QgTW9iaWxlU3VnZ2VzdCA9ICh7XG4gIG5lZWRTaG93Rm9ybSxcbiAgY2xvc2VGb3JtLFxuICByb29tc0NvdW50LFxuICBndWVzdHNDb3VudCxcbiAgcm9vbXMsXG4gIGRpc3BhdGNoLFxuICBpc0IyQixcbiAgaXNNdWx0aXJvb20sXG59KSA9PiB7XG4gIGNvbnN0IHdyYXBwZXJSZWYgPSB1c2VSZWYobnVsbCk7XG5cbiAgY29uc3QgaW50bCA9IHVzZUludGwoKTtcblxuICByZXR1cm4gKFxuICAgIDxQb3B1cCBjbGFzc05hbWU9e2VtKCdwb3B1cCcpKCl9IHJlZj17d3JhcHBlclJlZn0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2NvbnRyb2xzJykoKX0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnYmFja0J1dHRvbicpKCl9XG4gICAgICAgICAgb25DbGljaz17Y2xvc2VGb3JtfVxuICAgICAgICA+XG4gICAgICAgICAgPEFycm93RG93biBjbGFzc05hbWU9e2VtKCdhcnJvd0xlZnQnKSgpfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPElucHV0XG4gICAgICAgICAgcHNldWRvPXt0cnVlfVxuICAgICAgICAgIGZvY3VzZWQ9e25lZWRTaG93Rm9ybX1cbiAgICAgICAgICBzaXplPVwibVwiXG4gICAgICAgICAgd2lkZT17dHJ1ZX1cbiAgICAgICAgICBsYWJlbD17aW50bC5mb3JtYXRNZXNzYWdlKG1lc3NhZ2VzLnJvb21zQ291bnQsIHsgcm9vbXNDb3VudCB9KX1cbiAgICAgICAgICB2YWx1ZT17aW50bC5mb3JtYXRNZXNzYWdlKG1lc3NhZ2VzLmd1ZXN0c0NvdW50LCB7IGd1ZXN0c0NvdW50IH0pfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxGb3JtXG4gICAgICAgIHJvb21zPXtyb29tc31cbiAgICAgICAgZGlzcGF0Y2g9e2Rpc3BhdGNofVxuICAgICAgICBjbG9zZUZvcm09e2Nsb3NlRm9ybX1cbiAgICAgICAgc2Nyb2xsUmVmPXt3cmFwcGVyUmVmfVxuICAgICAgICBpc0IyQj17aXNCMkJ9XG4gICAgICAgIGlzTXVsdGlyb29tPXtpc011bHRpcm9vbX1cbiAgICAgIC8+XG4gICAgPC9Qb3B1cD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1vYmlsZVN1Z2dlc3Q7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZVJlZiwgdXNlUmVkdWNlciwgdXNlRWZmZWN0LCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUludGwgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcbmltcG9ydCB1c2VCb3VuZHMgZnJvbSAnLi4vaG9va3MvdXNlQm91bmRzJztcbmltcG9ydCB7IGlzTW9iaWxlLCBpc0Rlc2t0b3BVcCB9IGZyb20gJy4uL2hlbHBlcnMvYWRhcHRpdmUnO1xuXG5pbXBvcnQgcmVkdWNlciBmcm9tICcuL3JlZHVjZXInO1xuXG5pbXBvcnQgQ2xpY2tPdXRzaWRlIGZyb20gJy4uL0NsaWNrT3V0c2lkZSc7XG5pbXBvcnQgSW5wdXQgZnJvbSAnY29tcG9uZW50cy9JbnB1dCc7XG5pbXBvcnQgQXJyb3dEb3duIGZyb20gJ2NvbXBvbmVudHMvSWNvbi9BcnJvd0Rvd24nO1xuaW1wb3J0IFBvcHVwIGZyb20gJ2NvbXBvbmVudHMvUG9wdXAnO1xuXG5pbXBvcnQgRm9ybSBmcm9tICcuL0Zvcm0nO1xuaW1wb3J0IE1vYmlsZVN1Z2dlc3QgZnJvbSAnLi9Nb2JpbGVTdWdnZXN0JztcblxuaW1wb3J0IG1lc3NhZ2VzIGZyb20gJy4vbWVzc2FnZXMnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0d1ZXN0cy5jc3MnO1xuXG5jb25zdCBlbSA9IGNzc21lbShzdHlsZXMpO1xuXG5jb25zdCBHdWVzdHMgPSAoe1xuICB2YWx1ZSxcbiAgb25DaGFuZ2UsXG4gIGluUG9wdXAsXG4gIGlzRGVtbyxcbiAgc2VhcmNoRm9ybVJlZixcbiAgcm9vdEVsZW1lbnQsXG4gIGlzQjJCLFxuICBpc011bHRpcm9vbSxcbn0pID0+IHtcbiAgY29uc3Qgbm9TY3JvbGxDbGFzcyA9ICdvdmVybGF5cG9wdXAtbm9zY3JvbGwnO1xuICBjb25zdCB3aWR0aCA9IDM2MDtcblxuICBjb25zdCBwb3B1cFJlZiA9IHVzZVJlZihudWxsKTtcbiAgY29uc3QgW25lZWRTaG93Rm9ybSwgc2V0U2hvd0Zvcm1dID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IFtyb29tcywgZGlzcGF0Y2hdID0gdXNlUmVkdWNlcihyZWR1Y2VyLCB2YWx1ZSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBvbkNoYW5nZShyb29tcylcbiAgfSwgW3Jvb21zXSk7XG5cbiAgY29uc3Qgcm9vbXNDb3VudCA9IHJvb21zLmxlbmd0aDtcbiAgY29uc3QgZ3Vlc3RzQ291bnQgPSByb29tcy5yZWR1Y2UoXG4gICAgKGFjYywgcm9vbSkgPT4gYWNjICsgcm9vbS5hZHVsdHMgKyByb29tLmtpZHMubGVuZ3RoLFxuICAgIDBcbiAgKTtcblxuICBjb25zdCBbd3JhcHBlclJlZiwgYm91bmRzXSA9IHVzZUJvdW5kcyhyb290RWxlbWVudCk7XG5cbiAgY29uc3QgaWNvbiA9IG5lZWRTaG93Rm9ybVxuICAgID8gPEFycm93RG93biBjbGFzc05hbWU9e2VtKCdhcnJvd1RvcCcpKCl9IHdpZHRoPVwiMjBcIiBoZWlnaHQ9XCIyMFwiIC8+XG4gICAgOiA8QXJyb3dEb3duIGNsYXNzTmFtZT17ZW0oJ2Fycm93RG93bicpKCl9IHdpZHRoPVwiMjBcIiBoZWlnaHQ9XCIyMFwiIC8+O1xuXG4gIGNvbnN0IGludGwgPSB1c2VJbnRsKCk7XG5cbiAgY29uc3QgX2Nsb3NlRm9ybSA9IHVzZUNhbGxiYWNrKGNsb3NlRm9ybSwgW10pO1xuXG4gIHJldHVybiAoXG4gICAgPENsaWNrT3V0c2lkZSByZWY9e3dyYXBwZXJSZWZ9IG9uQ2xpY2tPdXRzaWRlPXtfY2xvc2VGb3JtfT5cbiAgICAgIDxJbnB1dFxuICAgICAgICBjbGFzc05hbWU9e2VtKCdpbnB1dCcpKCl9XG4gICAgICAgIG9uQ2xpY2s9e3RvZ2dsZUZvcm19XG4gICAgICAgIHBzZXVkbz17dHJ1ZX1cbiAgICAgICAgZm9jdXNlZD17bmVlZFNob3dGb3JtfVxuICAgICAgICBzaXplPVwibVwiXG4gICAgICAgIHdpZGU9e3RydWV9XG4gICAgICAgIGxhYmVsPXtpbnRsLmZvcm1hdE1lc3NhZ2UobWVzc2FnZXMucm9vbXNDb3VudCwgeyByb29tc0NvdW50IH0pfVxuICAgICAgICB2YWx1ZT17aW50bC5mb3JtYXRNZXNzYWdlKG1lc3NhZ2VzLmd1ZXN0c0NvdW50LCB7IGd1ZXN0c0NvdW50IH0pfVxuICAgICAgICBpY29uPXtpY29ufVxuICAgICAgLz5cbiAgICAgIHtcbiAgICAgICAgbmVlZFNob3dGb3JtICYmICFpc01vYmlsZSgpXG4gICAgICAgICYmIDxQb3B1cFxuICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ3BvcHVwJykoKX1cbiAgICAgICAgICB0b3A9e2JvdW5kcy5hYnNvbHV0ZUJvdHRvbSArIDF9XG4gICAgICAgICAgbGVmdD17Ym91bmRzLmFic29sdXRlUmlnaHQgLSB3aWR0aH1cbiAgICAgICAgICB3aWR0aD17d2lkdGh9XG4gICAgICAgICAgcm9vdEVsZW1lbnQ9e3Jvb3RFbGVtZW50fVxuICAgICAgICAgIHJlZj17cG9wdXBSZWZ9XG4gICAgICAgID5cbiAgICAgICAgICA8Rm9ybVxuICAgICAgICAgICAgdG9wPXtib3VuZHMuYWJzb2x1dGVCb3R0b20gKyAxfVxuICAgICAgICAgICAgcmlnaHQ9e2JvdW5kcy5hYnNvbHV0ZVJpZ2h0fVxuICAgICAgICAgICAgcm9vbXM9e3Jvb21zfVxuICAgICAgICAgICAgZGlzcGF0Y2g9e2Rpc3BhdGNofVxuICAgICAgICAgICAgY2xvc2VGb3JtPXtfY2xvc2VGb3JtfVxuICAgICAgICAgICAgc2Nyb2xsUmVmPXtwb3B1cFJlZn1cbiAgICAgICAgICAgIGlzQjJCPXtpc0IyQn1cbiAgICAgICAgICAgIGlzTXVsdGlyb29tPXtpc011bHRpcm9vbX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L1BvcHVwPlxuICAgICAgfVxuICAgICAge1xuICAgICAgICBuZWVkU2hvd0Zvcm0gJiYgaXNNb2JpbGUoKVxuICAgICAgICAmJiA8TW9iaWxlU3VnZ2VzdFxuICAgICAgICAgIG5lZWRTaG93Rm9ybT17bmVlZFNob3dGb3JtfVxuICAgICAgICAgIGNsb3NlRm9ybT17X2Nsb3NlRm9ybX1cbiAgICAgICAgICByb29tc0NvdW50PXtyb29tc0NvdW50fVxuICAgICAgICAgIGd1ZXN0c0NvdW50PXtndWVzdHNDb3VudH1cbiAgICAgICAgICByb29tcz17cm9vbXN9XG4gICAgICAgICAgZGlzcGF0Y2g9e2Rpc3BhdGNofVxuICAgICAgICAgIGlzQjJCPXtpc0IyQn1cbiAgICAgICAgICBpc011bHRpcm9vbT17aXNNdWx0aXJvb219XG4gICAgICAgIC8+XG4gICAgICB9XG4gICAgPC9DbGlja091dHNpZGU+XG4gICk7XG5cbiAgZnVuY3Rpb24gdG9nZ2xlRm9ybSgpIHtcbiAgICBpZiAobmVlZFNob3dGb3JtKSB7XG4gICAgICBjbG9zZUZvcm0oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvd0Zvcm0oKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzaG93Rm9ybSgpIHtcbiAgICBpZiAoaXNNb2JpbGUoKSkge1xuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKG5vU2Nyb2xsQ2xhc3MpO1xuICAgIH1cblxuICAgIGlmICghaXNEZXNrdG9wVXAoKSAmJiAhaXNEZW1vKSB7XG4gICAgICBzZWFyY2hGb3JtUmVmLmN1cnJlbnQuc2Nyb2xsSW50b1ZpZXcoe1xuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCcsXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGluUG9wdXAgJiYgcm9vdEVsZW1lbnQpIHtcbiAgICAgIHJvb3RFbGVtZW50LnNjcm9sbFRvKHtcbiAgICAgICAgdG9wOiAxMjAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgfSlcbiAgICB9XG4gICAgc2V0U2hvd0Zvcm0odHJ1ZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb3NlRm9ybSgpIHtcbiAgICBpZiAoaXNNb2JpbGUoKSkge1xuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKG5vU2Nyb2xsQ2xhc3MpO1xuICAgIH1cblxuICAgIHNldFNob3dGb3JtKGZhbHNlKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgR3Vlc3RzO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IERlZmF1bHRDaGVja2JveCBmcm9tICcuL0RlZmF1bHQnO1xuaW1wb3J0IEJ1dHRvbkNoZWNrYm94IGZyb20gJy4vQnV0dG9uJztcblxuZXhwb3J0IGVudW0gVklFVyB7XG4gIEJVVFRPTiA9ICdidXR0b24nLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgaWQ/OiBzdHJpbmc7XG4gIG5hbWU/OiBzdHJpbmc7XG4gIGNoZWNrZWQ/OiBib29sZWFuO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIG9uQ2hhbmdlPzogKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbiAgb25Gb2N1cz86IChldmVudDogUmVhY3QuRm9jdXNFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbiAgb25CbHVyPzogKGV2ZW50OiBSZWFjdC5Gb2N1c0V2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB2b2lkO1xuICB0ZXh0Pzogc3RyaW5nO1xuICB0b29sdGlwPzogUmVhY3QuUmVhY3ROb2RlO1xuICB2YWw/OiBzdHJpbmcgfCBudW1iZXI7XG4gIHZpZXc/OiBWSUVXO1xuICB3aWRlPzogYm9vbGVhbjtcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xufVxuXG5jb25zdCBDaGVja2JveDogUmVhY3QuRkM8UHJvcHM+ID0gKHtcbiAgaWQsXG4gIG5hbWUsXG4gIHZhbCxcbiAgdGV4dCxcbiAgdG9vbHRpcCxcbiAgY2hlY2tlZCxcbiAgb25DaGFuZ2UsXG4gIG9uRm9jdXMsXG4gIG9uQmx1cixcbiAgdmlldyxcbiAgd2lkZSxcbiAgY2xhc3NOYW1lLFxuICBkaXNhYmxlZCxcbn0pID0+IHtcbiAgY29uc3QgQ29udHJvbCA9IHZpZXcgPT09IFZJRVcuQlVUVE9OID8gQnV0dG9uQ2hlY2tib3ggOiBEZWZhdWx0Q2hlY2tib3g7XG5cbiAgcmV0dXJuIChcbiAgICA8Q29udHJvbFxuICAgICAgaWQ9e2lkfVxuICAgICAgbmFtZT17bmFtZX1cbiAgICAgIHZhbD17dmFsfVxuICAgICAgY2hlY2tlZD17Y2hlY2tlZH1cbiAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgIG9uRm9jdXM9e29uRm9jdXN9XG4gICAgICBvbkJsdXI9e29uQmx1cn1cbiAgICAgIHRleHQ9e3RleHR9XG4gICAgICB0b29sdGlwPXt0b29sdGlwfVxuICAgICAgd2lkZT17d2lkZX1cbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgIC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDaGVja2JveDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3NzbWVtIGZyb20gJ2Nzc21lbSc7XG5cbmltcG9ydCBUb29sdGlwIGZyb20gJ3JlYWN0LXRvb2x0aXAtbGl0ZSc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9EZWZhdWx0LmNzcyc7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGlkPzogc3RyaW5nO1xuICBuYW1lPzogc3RyaW5nO1xuICB2YWw/OiBzdHJpbmcgfCBudW1iZXI7XG4gIHRleHQ/OiBzdHJpbmc7XG4gIHRvb2x0aXA/OiBSZWFjdC5SZWFjdE5vZGU7XG4gIGNoZWNrZWQ/OiBib29sZWFuO1xuICBvbkNoYW5nZT86IChldmVudDogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHZvaWQ7XG4gIG9uRm9jdXM/OiAoZXZlbnQ6IFJlYWN0LkZvY3VzRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHZvaWQ7XG4gIG9uQmx1cj86IChldmVudDogUmVhY3QuRm9jdXNFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG59XG5cbmNvbnN0IERlZmF1bHRDaGVja2JveDogUmVhY3QuRkM8UHJvcHM+ID0gKHtcbiAgaWQsXG4gIG5hbWUsXG4gIHZhbCxcbiAgdGV4dCxcbiAgdG9vbHRpcCxcbiAgY2hlY2tlZCxcbiAgb25DaGFuZ2UsXG4gIG9uRm9jdXMsXG4gIG9uQmx1cixcbiAgY2xhc3NOYW1lLFxuICBkaXNhYmxlZCxcbn0pID0+IHtcbiAgY29uc3QgY29udHJvbCA9IChcbiAgICA8PlxuICAgICAgPGlucHV0XG4gICAgICAgIGNsYXNzTmFtZT17ZW0oJ2NvbnRyb2wnKSgpfVxuICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICBpZD17aWR9XG4gICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgIHZhbHVlPXt2YWx9XG4gICAgICAgIGNoZWNrZWQ9e2NoZWNrZWR9XG4gICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgb25Gb2N1cz17b25Gb2N1c31cbiAgICAgICAgb25CbHVyPXtvbkJsdXJ9XG4gICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgIC8+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2Zha2VDaGVja2JveCcpKHsgY2hlY2tlZCB9KX0gZGF0YS1wb3B1bmRlcj1cImlnbm9yZVwiIC8+XG4gICAgICA8c3BhbiBjbGFzc05hbWU9e2VtKCd0ZXh0JykoKX0+e3RleHR9PC9zcGFuPlxuICAgIDwvPlxuICApO1xuXG4gIGNvbnN0IGNvbnRlbnQgPSB0b29sdGlwID8gKFxuICAgIDxUb29sdGlwIGNvbnRlbnQ9e3Rvb2x0aXB9Pntjb250cm9sfTwvVG9vbHRpcD5cbiAgKSA6IChcbiAgICBjb250cm9sXG4gICk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2xhYmVsLWhhcy1hc3NvY2lhdGVkLWNvbnRyb2xcbiAgcmV0dXJuIDxsYWJlbCBjbGFzc05hbWU9e2VtKCdsYWJlbCcpKHVuZGVmaW5lZCwgY2xhc3NOYW1lKX0+e2NvbnRlbnR9PC9sYWJlbD47XG59O1xuXG5leHBvcnQgZGVmYXVsdCBEZWZhdWx0Q2hlY2tib3g7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNzc21lbSBmcm9tICdjc3NtZW0nO1xuXG5pbXBvcnQgVG9vbHRpcCBmcm9tICdyZWFjdC10b29sdGlwLWxpdGUnO1xuXG5pbXBvcnQgeyBpc01vYmlsZSB9IGZyb20gJy4uL2hlbHBlcnMvYWRhcHRpdmUnO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vQnV0dG9uLmNzcyc7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGlkPzogc3RyaW5nO1xuICBuYW1lPzogc3RyaW5nO1xuICB2YWw/OiBzdHJpbmcgfCBudW1iZXI7XG4gIHRleHQ/OiBzdHJpbmc7XG4gIHRvb2x0aXA/OiBSZWFjdC5SZWFjdE5vZGU7XG4gIGNoZWNrZWQ/OiBib29sZWFuO1xuICBvbkNoYW5nZT86IChldmVudDogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHZvaWQ7XG4gIG9uRm9jdXM/OiAoZXZlbnQ6IFJlYWN0LkZvY3VzRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHZvaWQ7XG4gIG9uQmx1cj86IChldmVudDogUmVhY3QuRm9jdXNFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbiAgd2lkZT86IGJvb2xlYW47XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xufVxuXG5jb25zdCBCdXR0b25DaGVja2JveDogUmVhY3QuRkM8UHJvcHM+ID0gKHtcbiAgaWQsXG4gIG5hbWUsXG4gIHZhbCxcbiAgdGV4dCxcbiAgdG9vbHRpcCxcbiAgY2hlY2tlZCxcbiAgb25DaGFuZ2UsXG4gIG9uRm9jdXMsXG4gIG9uQmx1cixcbiAgd2lkZSxcbiAgY2xhc3NOYW1lLFxuICBkaXNhYmxlZCxcbn0pID0+IHtcbiAgY29uc3QgY29udHJvbCA9IChcbiAgICA8PlxuICAgICAgPGlucHV0XG4gICAgICAgIGNsYXNzTmFtZT17ZW0oJ2NvbnRyb2wnKSgpfVxuICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICBpZD17aWR9XG4gICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgIHZhbHVlPXt2YWx9XG4gICAgICAgIGNoZWNrZWQ9e2NoZWNrZWR9XG4gICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgb25Gb2N1cz17b25Gb2N1c31cbiAgICAgICAgb25CbHVyPXtvbkJsdXJ9XG4gICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgIC8+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2J1dHRvbicpKHsgY2hlY2tlZCwgd2lkZSB9KX0gZGF0YS1wb3B1bmRlcj1cImlnbm9yZVwiPlxuICAgICAgICB7dGV4dH1cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICApO1xuXG4gIGNvbnN0IGNvbnRlbnQgPVxuICAgIHRvb2x0aXAgJiYgIWlzTW9iaWxlKCkgPyAoXG4gICAgICA8VG9vbHRpcCBjb250ZW50PXt0b29sdGlwfSBzdHlsZXM9e3sgd2lkdGg6ICcxMDAlJyB9fT5cbiAgICAgICAge2NvbnRyb2x9XG4gICAgICA8L1Rvb2x0aXA+XG4gICAgKSA6IChcbiAgICAgIGNvbnRyb2xcbiAgICApO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9sYWJlbC1oYXMtYXNzb2NpYXRlZC1jb250cm9sXG4gIHJldHVybiA8bGFiZWwgY2xhc3NOYW1lPXtlbSgnbGFiZWwnKSh7IHdpZGUgfSwgY2xhc3NOYW1lKX0+e2NvbnRlbnR9PC9sYWJlbD47XG59O1xuXG5leHBvcnQgZGVmYXVsdCBCdXR0b25DaGVja2JveDtcbiIsImltcG9ydCBSZWFjdCwgeyBGQywgQ1NTUHJvcGVydGllcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcblxuaW1wb3J0IEhpbnQsIHsgUG9zaXRpb24gfSBmcm9tICcuLi9IaW50JztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0lucHV0UmFkaW8uY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgY2hlY2tlZD86IGJvb2xlYW47XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICBlcnJvcj86IHN0cmluZztcbiAgaWQ/OiBzdHJpbmc7XG4gIG5hbWU/OiBzdHJpbmc7XG4gIG5vdGU/OiBzdHJpbmc7XG4gIG9uQmx1cj86IChldmVudDogUmVhY3QuRm9jdXNFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbiAgb25DaGFuZ2U/OiAoZXZlbnQ6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB2b2lkO1xuICBvbkNsaWNrPzogKGV2ZW50OiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxMYWJlbEVsZW1lbnQsIE1vdXNlRXZlbnQ+KSA9PiB2b2lkO1xuICBvbk1vdXNlRW50ZXI/OiAoXG4gICAgZXZlbnQ6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTExhYmVsRWxlbWVudCwgTW91c2VFdmVudD5cbiAgKSA9PiB2b2lkO1xuICBzdHlsZT86IENTU1Byb3BlcnRpZXM7XG4gIHRleHQ/OiBzdHJpbmc7XG4gIHRvb2x0aXBDb250ZW50PzogKCkgPT4gUmVhY3QuUmVhY3RFbGVtZW50O1xuICB0b29sdGlwUG9zaXRpb24/OiBQb3NpdGlvbjtcbiAgdmFsdWU6IHN0cmluZyB8IG51bWJlcjtcbiAgJ2RhdGEtdGVzdGlkJz86IHN0cmluZztcbn1cblxuY29uc3QgSW5wdXRSYWRpbzogRkM8UHJvcHM+ID0gKHtcbiAgY2hlY2tlZCxcbiAgY2hpbGRyZW4sXG4gIGNsYXNzTmFtZSxcbiAgZGlzYWJsZWQsXG4gIGVycm9yLFxuICBpZCxcbiAgbmFtZSxcbiAgbm90ZSxcbiAgb25CbHVyLFxuICBvbkNoYW5nZSxcbiAgb25DbGljayxcbiAgb25Nb3VzZUVudGVyLFxuICBzdHlsZSxcbiAgdGV4dCxcbiAgdG9vbHRpcENvbnRlbnQsXG4gIHRvb2x0aXBQb3NpdGlvbiA9IFBvc2l0aW9uLlRPUCxcbiAgdmFsdWUsXG4gIC4uLnJlc3Rcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvbm8tbm9uaW50ZXJhY3RpdmUtZWxlbWVudC1pbnRlcmFjdGlvbnNcbiAgICA8bGFiZWxcbiAgICAgIGNsYXNzTmFtZT17ZW0oJ2xhYmVsJykodW5kZWZpbmVkLCBjbGFzc05hbWUpfVxuICAgICAgaHRtbEZvcj17aWR9XG4gICAgICBzdHlsZT17c3R5bGV9XG4gICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgb25Nb3VzZUVudGVyPXtvbk1vdXNlRW50ZXJ9XG4gICAgPlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCdjb250YWluZXInKSh7IGRpc2FibGVkLCBlcnJvcjogISFlcnJvciB9KX0+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgaWQ9e2lkfVxuICAgICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ2lucHV0JykoeyBlcnJvcjogISFlcnJvciB9KX1cbiAgICAgICAgICBjaGVja2VkPXtjaGVja2VkfVxuICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgICAgb25CbHVyPXtvbkJsdXJ9XG4gICAgICAgICAgey4uLnJlc3R9XG4gICAgICAgIC8+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT17ZW0oJ2ljb24nKSgpfSAvPlxuICAgICAgICB7IWNoaWxkcmVuICYmIHRleHQgJiYgPHNwYW4gY2xhc3NOYW1lPXtlbSgndGV4dCcpKCl9Pnt0ZXh0fTwvc3Bhbj59XG4gICAgICAgIHshdGV4dCAmJiBjaGlsZHJlbiAmJiA8c3BhbiBjbGFzc05hbWU9e2VtKCd0ZXh0JykoKX0+e2NoaWxkcmVufTwvc3Bhbj59XG4gICAgICAgIHshIXRvb2x0aXBDb250ZW50ICYmIChcbiAgICAgICAgICA8SGludFxuICAgICAgICAgICAgY2xhc3NOYW1lPXtlbSgnaGludCcpKCl9XG4gICAgICAgICAgICB0b29sdGlwQ29udGVudD17dG9vbHRpcENvbnRlbnR9XG4gICAgICAgICAgICBwb3NpdGlvbj17dG9vbHRpcFBvc2l0aW9ufVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICAgIHshIW5vdGUgJiYgPHAgY2xhc3NOYW1lPXtlbSgnbm90ZScpKCl9Pntub3RlfTwvcD59XG4gICAgPC9sYWJlbD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IElucHV0UmFkaW87XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgSW5wdXRSYWRpbyBmcm9tICcuLi9JbnB1dFJhZGlvJztcbmltcG9ydCBCdXR0b25SYWRpbyBmcm9tICcuLi9CdXR0b25SYWRpbyc7XG5cbmV4cG9ydCBlbnVtIFZJRVcge1xuICBCVVRUT04gPSAnYnV0dG9uJyxcbn1cblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgdmFsdWU6IHN0cmluZyB8IG51bWJlcjtcbiAgdGV4dDogc3RyaW5nO1xuICBpZD86IHN0cmluZztcbiAgbm90ZT86IHN0cmluZztcbiAgbmFtZT86IHN0cmluZztcbiAgY2hlY2tlZD86IGJvb2xlYW47XG4gIHRvb2x0aXBDb250ZW50PzogKCkgPT4gUmVhY3QuUmVhY3RFbGVtZW50O1xuICBvbkNoYW5nZT86IChldmVudDogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHZvaWQ7XG4gIG9uQmx1cj86IChldmVudDogUmVhY3QuRm9jdXNFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbiAgb25DbGljaz86IChldmVudDogUmVhY3QuTW91c2VFdmVudDxIVE1MTGFiZWxFbGVtZW50LCBNb3VzZUV2ZW50PikgPT4gdm9pZDtcbiAgb25Nb3VzZUVudGVyPzogKFxuICAgIGV2ZW50OiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxMYWJlbEVsZW1lbnQsIE1vdXNlRXZlbnQ+XG4gICkgPT4gdm9pZDtcbiAgdmlldz86IFZJRVc7XG4gIHdpZGU/OiBib29sZWFuO1xuICBjbGFzc05hbWU6IHN0cmluZztcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xufVxuXG5jb25zdCBSYWRpbzogUmVhY3QuRkM8UHJvcHM+ID0gKHtcbiAgaWQsXG4gIHZhbHVlLFxuICB0ZXh0LFxuICBub3RlLFxuICBuYW1lLFxuICBjaGVja2VkLFxuICB0b29sdGlwQ29udGVudCxcbiAgb25DaGFuZ2UsXG4gIG9uQmx1cixcbiAgb25DbGljayxcbiAgb25Nb3VzZUVudGVyLFxuICB2aWV3LFxuICB3aWRlLFxuICBjbGFzc05hbWUsXG4gIGRpc2FibGVkLFxufTogUHJvcHMpID0+IHtcbiAgY29uc3QgQ29udHJvbCA9IHZpZXcgPT09ICdidXR0b24nID8gQnV0dG9uUmFkaW8gOiBJbnB1dFJhZGlvO1xuXG4gIHJldHVybiAoXG4gICAgPENvbnRyb2xcbiAgICAgIGlkPXtpZH1cbiAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgIGNoZWNrZWQ9e2NoZWNrZWR9XG4gICAgICB0b29sdGlwQ29udGVudD17dG9vbHRpcENvbnRlbnR9XG4gICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICBvbkJsdXI9e29uQmx1cn1cbiAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICBvbk1vdXNlRW50ZXI9e29uTW91c2VFbnRlcn1cbiAgICAgIHRleHQ9e3RleHR9XG4gICAgICBub3RlPXtub3RlfVxuICAgICAgbmFtZT17bmFtZX1cbiAgICAgIHdpZGU9e3dpZGV9XG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUmFkaW87XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNzc21lbSBmcm9tICdjc3NtZW0nO1xuXG5pbXBvcnQgUmFkaW8sIHsgVklFVyB9IGZyb20gJy4vUmFkaW8nO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vUmFkaW9Hcm91cC5jc3MnO1xuXG5jb25zdCBlbSA9IGNzc21lbShzdHlsZXMpO1xuXG5leHBvcnQgaW50ZXJmYWNlIE9wdGlvbiB7XG4gIGlkPzogc3RyaW5nO1xuICB2YWw6IHN0cmluZyB8IG51bWJlcjtcbiAgdGV4dDogc3RyaW5nO1xuICBub3RlPzogc3RyaW5nO1xuICBuYW1lPzogc3RyaW5nO1xuICB0b29sdGlwQ29udGVudD86ICgpID0+IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgb25DbGljaz86IChldmVudDogUmVhY3QuTW91c2VFdmVudDxIVE1MTGFiZWxFbGVtZW50LCBNb3VzZUV2ZW50PikgPT4gdm9pZDtcbiAgb25Nb3VzZUVudGVyPzogKFxuICAgIGV2ZW50OiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxMYWJlbEVsZW1lbnQsIE1vdXNlRXZlbnQ+XG4gICkgPT4gdm9pZDtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgUHJvcHMge1xuICB2YWw/OiBzdHJpbmcgfCBudW1iZXI7XG4gIG9wdGlvbnM6IE9wdGlvbltdO1xuICBvbkNoYW5nZTogKHZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7XG4gIG9uQmx1cj86IChldmVudDogUmVhY3QuRm9jdXNFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbiAgdmlldz86IFZJRVc7XG4gIGNvbHVtbj86IGJvb2xlYW47XG4gIHdpZGU/OiBib29sZWFuO1xuICB3cmFwcGVkPzogYm9vbGVhbjtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG59XG5cbmNvbnN0IFJhZGlvR3JvdXA6IFJlYWN0LkZDPFByb3BzPiA9ICh7XG4gIHZhbCxcbiAgb3B0aW9ucyxcbiAgb25DaGFuZ2UsXG4gIG9uQmx1cixcbiAgdmlldyxcbiAgY29sdW1uLFxuICB3aWRlLFxuICB3cmFwcGVkLFxuICBjbGFzc05hbWUsXG4gIGRpc2FibGVkLFxufTogUHJvcHMpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2dyb3VwJykoeyB3aWRlLCBjb2x1bW4sIHdyYXBwZWQgfSwgY2xhc3NOYW1lKX0+XG4gICAgICB7b3B0aW9ucy5tYXAoKG9wdGlvbikgPT4gKFxuICAgICAgICA8UmFkaW9cbiAgICAgICAgICBjbGFzc05hbWU9e2VtKCdyYWRpbycpKHsgdmlldyB9LCBvcHRpb24uY2xhc3NOYW1lKX1cbiAgICAgICAgICBpZD17b3B0aW9uLmlkfVxuICAgICAgICAgIHZhbHVlPXtvcHRpb24udmFsfVxuICAgICAgICAgIHRleHQ9e29wdGlvbi50ZXh0fVxuICAgICAgICAgIG5vdGU9e29wdGlvbi5ub3RlfVxuICAgICAgICAgIG5hbWU9e29wdGlvbi5uYW1lfVxuICAgICAgICAgIGNoZWNrZWQ9e3ZhbCA9PT0gb3B0aW9uLnZhbH1cbiAgICAgICAgICB0b29sdGlwQ29udGVudD17b3B0aW9uLnRvb2x0aXBDb250ZW50fVxuICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gb25DaGFuZ2UoZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgIG9uQmx1cj17b25CbHVyfVxuICAgICAgICAgIG9uQ2xpY2s9e29wdGlvbi5vbkNsaWNrfVxuICAgICAgICAgIG9uTW91c2VFbnRlcj17b3B0aW9uLm9uTW91c2VFbnRlcn1cbiAgICAgICAgICB2aWV3PXt2aWV3fVxuICAgICAgICAgIHdpZGU9e3dpZGV9XG4gICAgICAgICAga2V5PXtvcHRpb24udmFsfVxuICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgLz5cbiAgICAgICkpfVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUmFkaW9Hcm91cDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGRlZmluZU1lc3NhZ2VzLCB1c2VJbnRsIH0gZnJvbSAncmVhY3QtaW50bCc7XG5pbXBvcnQgY3NzbWVtIGZyb20gJ2Nzc21lbSc7XG5cbmltcG9ydCBmdW5uZWwgZnJvbSAnLi4vaGVscGVycy9mdW5uZWwnO1xuXG5pbXBvcnQgQ2hlY2tib3ggZnJvbSAnY29tcG9uZW50cy9DaGVja2JveCc7XG5pbXBvcnQgUmFkaW9Hcm91cCBmcm9tICdjb21wb25lbnRzL1JhZGlvR3JvdXAnO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vQjJDRXh0cmEuY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuY29uc3QgbWVzc2FnZXMgPSBkZWZpbmVNZXNzYWdlcyh7XG4gIHRvdXJpc206IHtcbiAgICBpZDogXCJzZWFyY2hGb3JtLmIyY0V4dHJhLnRvdXJpc21cIixcbiAgICBkZWZhdWx0TWVzc2FnZTogXCLQntGC0LTRi9GFXCIsXG4gIH0sXG4gIGJ1c2luZXNzOiB7XG4gICAgaWQ6IFwic2VhcmNoRm9ybS5iMmNFeHRyYS5idXNpbmVzc1wiLFxuICAgIGRlZmF1bHRNZXNzYWdlOiBcItCg0LDQsdC+0YLQsFwiLFxuICB9LFxuICBjb21wYXJlUHJpY2VzOiB7XG4gICAgaWQ6IFwic2VhcmNoRm9ybS5iMmNFeHRyYS5jb21wYXJlUHJpY2VzXCIsXG4gICAgZGVmYXVsdE1lc3NhZ2U6IFwi0J/QvtC60LDQt9Cw0YLRjCDRhtC10L3RiyDQvdCwINC00YDRg9Cz0LjRhSDRgdCw0LnRgtCw0YUg0LIg0L3QvtCy0L7QvCDQvtC60L3QtT9cIixcbiAgfSxcbn0pO1xuXG5jb25zdCBCMkNFeHRyYSA9ICh7XG4gIGluUG9wdXAsXG4gIHNob3VsZFNob3dDb21wYXJldG8sXG4gIG9uQ29tcGFyZXRvQ2hhbmdlLFxuICBjb21wYXJldG9WYWx1ZSxcbn0pID0+IHtcbiAgY29uc3QgW3RyaXBUeXBlLCBzZXRUcmlwVHlwZV0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW2NvbXBhcmV0bywgc2V0Q29tcGFyZXRvXSA9IHVzZVN0YXRlKGNvbXBhcmV0b1ZhbHVlKTtcblxuICBjb25zdCBpbnRsID0gdXNlSW50bCgpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2VtKCdsaW5lJykoKX0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ3RyaXBUeXBlJykoeyBpblBvcHVwIH0pfT5cbiAgICAgICAgPFJhZGlvR3JvdXBcbiAgICAgICAgICB2YWw9e3RyaXBUeXBlfVxuICAgICAgICAgIG9wdGlvbnM9e1tcbiAgICAgICAgICAgIHt2YWw6IFwidG91cmlzbVwiLCB0ZXh0OiBpbnRsLmZvcm1hdE1lc3NhZ2UobWVzc2FnZXMudG91cmlzbSl9LFxuICAgICAgICAgICAge3ZhbDogXCJidXNpbmVzc1wiLCB0ZXh0OiBpbnRsLmZvcm1hdE1lc3NhZ2UobWVzc2FnZXMuYnVzaW5lc3MpfSxcbiAgICAgICAgICBdfVxuICAgICAgICAgIG9uQ2hhbmdlPXtvblRyaXBUeXBlQ2hhbmdlfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgICB7XG4gICAgICAgIHNob3VsZFNob3dDb21wYXJldG9cbiAgICAgICAgJiYgPGRpdiBjbGFzc05hbWU9e2VtKCdjb21wYXJldG8nKSgpfT5cbiAgICAgICAgICA8Q2hlY2tib3hcbiAgICAgICAgICAgIHRleHQ9e2ludGwuZm9ybWF0TWVzc2FnZShtZXNzYWdlcy5jb21wYXJlUHJpY2VzKX1cbiAgICAgICAgICAgIGNoZWNrZWQ9e2NvbXBhcmV0b31cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDb21wYXJldG99XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICB9XG4gICAgPC9kaXY+XG4gICk7XG5cbiAgZnVuY3Rpb24gb25UcmlwVHlwZUNoYW5nZSh0eXBlKSB7XG4gICAgZnVubmVsLmV2ZW50KCdzZWFyY2hmb3JtJywgJ2NsaWNrJywgJ3RyaXBfdHlwZScsIHsgdHlwZSB9KTtcbiAgICBzZXRUcmlwVHlwZSh0eXBlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUNvbXBhcmV0byhldnQpIHtcbiAgICBzZXRDb21wYXJldG8oZXZ0LnRhcmdldC5jaGVja2VkKTtcbiAgICBvbkNvbXBhcmV0b0NoYW5nZShldnQpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBCMkNFeHRyYTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuXG5jb25zdCB1c2VGaWx0ZXJlZExpc3QgPSAoXG4gIGNvdW50cmllcyxcbiAgcXVlcnkgPSAnJyxcbiAgc2hvd0Z1bGxMaXN0XG4pID0+IHtcbiAgY29uc3QgZmlsdGVyRm4gPSAoY291bnRyeSkgPT4ge1xuICAgIGNvbnN0IG5hbWUgPSBjb3VudHJ5Lm5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBwcmVwYXJlZFF1ZXJ5ID0gcXVlcnkudG9Mb3dlckNhc2UoKTtcblxuICAgIHJldHVybiBuYW1lLmluZGV4T2YocHJlcGFyZWRRdWVyeSkgIT09IC0xO1xuICB9XG5cbiAgY29uc3QgZmlsdGVyZWRDb3VudHJpZXMgPSB1c2VNZW1vKFxuICAgICgpID0+IGNvdW50cmllcy5maWx0ZXIoZmlsdGVyRm4pLFxuICAgIFtjb3VudHJpZXMsIHF1ZXJ5XVxuICApO1xuXG4gIHJldHVybiBzaG93RnVsbExpc3QgPyBjb3VudHJpZXMgOiBmaWx0ZXJlZENvdW50cmllcztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZUZpbHRlcmVkTGlzdDsiLCJpbXBvcnQgUmVhY3QsIHsgbWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL1N1Z2dlc3QuY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuY29uc3QgQ291bnRyeSA9ICh7IGNvdW50cnksIGlzQWN0aXZlLCBvbkNsaWNrLCBvbk1vdXNlRW50ZXJ9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtlbSgnaXRlbScpKHsgYWN0aXZlOiBpc0FjdGl2ZSB9KX1cbiAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICBvbk1vdXNlRW50ZXI9e29uTW91c2VFbnRlcn1cbiAgICA+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2NvdW50cnknKSgpfT57Y291bnRyeS5uYW1lfTwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5jb25zdCBDb3VudHJ5TWVtb2l6ZWQgPSBtZW1vKENvdW50cnksIGlzRXF1YWxDb3VudHJ5KTtcblxuY29uc3QgU3VnZ2VzdCA9ICh7XG4gIHN1Z2dlc3RMaXN0LFxuICBzZXRWYWx1ZSxcbiAgYWN0aXZlSXRlbSA9IDAsXG4gIHNldEFjdGl2ZUl0ZW0sXG59KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAge3N1Z2dlc3RMaXN0Lm1hcChpdGVtID0+XG4gICAgICAgIGl0ZW0uaXNTZXBhcmF0b3JcbiAgICAgICAgICA/IDxkaXYgY2xhc3NOYW1lPXtlbSgnc2VwYXJhdG9yJykoKX0ga2V5PVwic2VwYXJhdG9yXCIgLz5cbiAgICAgICAgICA6IDxDb3VudHJ5TWVtb2l6ZWRcbiAgICAgICAgICAgIGNvdW50cnk9e2l0ZW19XG4gICAgICAgICAgICBrZXk9e2l0ZW0uaW5kZXh9XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRWYWx1ZShpdGVtLmNvZGUpfVxuICAgICAgICAgICAgaXNBY3RpdmU9e2l0ZW0uaW5kZXggPT09IGFjdGl2ZUl0ZW19XG4gICAgICAgICAgICBvbk1vdXNlRW50ZXI9eygpID0+IHNldEFjdGl2ZUl0ZW0oaXRlbS5pbmRleCl9XG4gICAgICAgICAgLz5cbiAgICAgICl9XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKTtcbn07XG5cbmZ1bmN0aW9uIGlzRXF1YWxDb3VudHJ5KG9sZFByb3BzLCBuZXdQcm9wcykge1xuICByZXR1cm4gb2xkUHJvcHMuaXNBY3RpdmUgPT09IG5ld1Byb3BzLmlzQWN0aXZlXG4gICAgJiYgb2xkUHJvcHMuY291bnRyeSA9PT0gbmV3UHJvcHMuY291bnRyeTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgU3VnZ2VzdDtcbiIsImltcG9ydCB7IGRlZmluZU1lc3NhZ2VzLCB1c2VJbnRsIH0gZnJvbSAncmVhY3QtaW50bCc7XG5cbmNvbnN0IG1lc3NhZ2VzID0gZGVmaW5lTWVzc2FnZXMoe1xuICBsYWJlbDoge1xuICAgIGlkOiBcImNpdGl6ZW5zaGlwLmxhYmVsXCIsXG4gICAgZGVmYXVsdE1lc3NhZ2U6IFwi0JPRgNCw0LbQtNCw0L3RgdGC0LLQviDQs9C+0YHRgtC10LlcIlxuICB9LFxuICBwbGFjZWhvbGRlcjoge1xuICAgIGlkOiBcImNpdGl6ZW5zaGlwLnBsYWNlaG9sZGVyXCIsXG4gICAgZGVmYXVsdE1lc3NhZ2U6IFwi0JLRi9Cx0LXRgNC40YLQtSDQs9GA0LDQttC00LDQvdGB0YLQstC+XCJcbiAgfSxcbiAgbGFiZWxSZXF1aXJlZDoge1xuICAgIGlkOiBcImNpdGl6ZW5zaGlwLmxhYmVsUmVxdWlyZWRcIixcbiAgICBkZWZhdWx0TWVzc2FnZTogXCLQk9GA0LDQttC00LDQvdGB0YLQstC+INCz0L7RgdGC0LXQuSAo0L7QsdGP0LfQsNGC0LXQu9GM0L3QviDQtNC70Y8g0Y3RgtC+0LPQviDQvdCw0L/RgNCw0LLQu9C10L3QuNGPKVwiLFxuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1lc3NhZ2VzO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUxheW91dEVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZGVmaW5lTWVzc2FnZXMsIHVzZUludGwgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcblxuaW1wb3J0IElucHV0IGZyb20gJ2NvbXBvbmVudHMvSW5wdXQnO1xuaW1wb3J0IEFycm93RG93biBmcm9tICdjb21wb25lbnRzL0ljb24vQXJyb3dEb3duJztcbmltcG9ydCBQb3B1cCBmcm9tICdjb21wb25lbnRzL1BvcHVwJztcblxuaW1wb3J0IFN1Z2dlc3QgZnJvbSAnLi9TdWdnZXN0JztcblxuaW1wb3J0IG1lc3NhZ2VzIGZyb20gJy4vbWVzc2FnZXMnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL01vYmlsZVN1Z2dlc3QuY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuY29uc3QgTW9iaWxlU3VnZ2VzdCA9ICh7XG4gIGNsb3NlU3VnZ2VzdCxcbiAgb25JbnB1dENoYW5nZSxcbiAgcXVlcnksXG4gIHN1Z2dlc3RMaXN0LFxuICBzZXRWYWx1ZUZyb21TdWdnZXN0LFxuICBhY3RpdmVTdWdnZXN0SXRlbSxcbiAgc2V0QWN0aXZlU3VnZ2VzdEl0ZW0sXG59KSA9PiB7XG4gIGNvbnN0IGlucHV0UmVmID0gdXNlUmVmKG51bGwpO1xuXG4gIGNvbnN0IGludGwgPSB1c2VJbnRsKCk7XG5cbiAgLy8gVXNpbmcgZm9yIGNvcnJlY3QgYmx1ciBoYW5kbGVcbiAgY29uc3QgaXNDbGlja2VkSW5zaWRlID0gdXNlUmVmKGZhbHNlKTtcblxuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGlucHV0UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiAoXG4gICAgPFBvcHVwXG4gICAgICBjbGFzc05hbWU9e2VtKCd3cmFwcGVyJykoKX1cbiAgICAgIG9uTW91c2VEb3duPXtjbGlja0luc2lkZUhhbmRsZXJ9XG4gICAgICBvblRvdWNoU3RhcnQ9e2NsaWNrSW5zaWRlSGFuZGxlcn1cbiAgICA+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2NvbnRyb2xzJykoKX0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnYmFja0J1dHRvbicpKCl9XG4gICAgICAgICAgb25DbGljaz17Y2xvc2VTdWdnZXN0fVxuICAgICAgICA+XG4gICAgICAgICAgPEFycm93RG93biBjbGFzc05hbWU9e2VtKCdhcnJvd0xlZnQnKSgpfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPElucHV0XG4gICAgICAgICAgaW5wdXRSZWY9e2lucHV0UmVmfVxuICAgICAgICAgIG9uQ2hhbmdlPXtvbklucHV0Q2hhbmdlfVxuICAgICAgICAgIG9uQmx1cj17b25CbHVyfVxuICAgICAgICAgIG9uRm9jdXM9e29uRm9jdXN9XG4gICAgICAgICAgdmFsdWU9e3F1ZXJ5fVxuICAgICAgICAgIHNpemU9XCJtXCJcbiAgICAgICAgICB3aWRlPXt0cnVlfVxuICAgICAgICAgIGxhYmVsPXtpbnRsLmZvcm1hdE1lc3NhZ2UobWVzc2FnZXMubGFiZWwpfVxuICAgICAgICAgIHBsYWNlaG9sZGVyPXtpbnRsLmZvcm1hdE1lc3NhZ2UobWVzc2FnZXMucGxhY2Vob2xkZXIpfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnc3VnZ2VzdCcpKCl9PlxuICAgICAgICA8U3VnZ2VzdFxuICAgICAgICAgIHN1Z2dlc3RMaXN0PXtzdWdnZXN0TGlzdH1cbiAgICAgICAgICBzZXRWYWx1ZT17c2V0VmFsdWVGcm9tU3VnZ2VzdH1cbiAgICAgICAgICBhY3RpdmVJdGVtPXthY3RpdmVTdWdnZXN0SXRlbX1cbiAgICAgICAgICBzZXRBY3RpdmVJdGVtPXtzZXRBY3RpdmVTdWdnZXN0SXRlbX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvUG9wdXA+XG4gICk7XG5cbiAgZnVuY3Rpb24gY2xpY2tJbnNpZGVIYW5kbGVyKCkge1xuICAgIGlzQ2xpY2tlZEluc2lkZS5jdXJyZW50ID0gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQmx1cigpIHtcbiAgICBpZiAoaXNDbGlja2VkSW5zaWRlLmN1cnJlbnQpIHtcbiAgICAgIGlzQ2xpY2tlZEluc2lkZS5jdXJyZW50ID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsb3NlU3VnZ2VzdCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRm9jdXMoKSB7XG4gICAgaXNDbGlja2VkSW5zaWRlLmN1cnJlbnQgPSBmYWxzZTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgTW9iaWxlU3VnZ2VzdDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlUmVmLCB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlSW50bCB9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB0aHJvdHRsZSBmcm9tICdsb2Rhc2gvdGhyb3R0bGUnO1xuaW1wb3J0IGNzc21lbSBmcm9tICdjc3NtZW0nO1xuaW1wb3J0IHVzZUJvdW5kcyBmcm9tICcuLi9ob29rcy91c2VCb3VuZHMnO1xuaW1wb3J0IHsgaXNNb2JpbGUsIGlzRGVza3RvcFVwIH0gZnJvbSAnLi4vaGVscGVycy9hZGFwdGl2ZSc7XG5cbmltcG9ydCBDbGlja091dHNpZGUgZnJvbSAnLi4vQ2xpY2tPdXRzaWRlJztcbmltcG9ydCB7IGFjdGlvbnMgYXMgY291bnRyaWVzQWN0aW9ucyB9IGZyb20gJy4uL3JlZHVjZXJzL2NvdW50cmllcyc7XG5pbXBvcnQgeyBhY3Rpb25zIGFzIGNpdGl6ZW5zaGlwQWN0aW9ucyB9IGZyb20gJy4uL3JlZHVjZXJzL2NpdGl6ZW5zaGlwJztcblxuaW1wb3J0IEFycm93RG93biBmcm9tICdjb21wb25lbnRzL0ljb24vQXJyb3dEb3duJztcbmltcG9ydCBDcm9zcyBmcm9tICdjb21wb25lbnRzL0ljb24vQ3Jvc3MnO1xuXG5pbXBvcnQgUG9wdXAgZnJvbSAnY29tcG9uZW50cy9Qb3B1cCc7XG5pbXBvcnQgSW5wdXQgZnJvbSAnY29tcG9uZW50cy9JbnB1dCc7XG5cbmltcG9ydCB1c2VGaWx0ZXJlZExpc3QgZnJvbSAnLi91c2VGaWx0ZXJlZExpc3QnO1xuXG5pbXBvcnQgU3VnZ2VzdCBmcm9tICcuL1N1Z2dlc3QnO1xuaW1wb3J0IE1vYmlsZVN1Z2dlc3QgZnJvbSAnLi9Nb2JpbGVTdWdnZXN0JztcblxuaW1wb3J0IG1lc3NhZ2VzIGZyb20gJy4vbWVzc2FnZXMnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0NpdGl6ZW5zaGlwLmNzcyc7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmNvbnN0IENpdGl6ZW5zaGlwID0gKHtcbiAgY291bnRyaWVzLFxuICBwb3B1bGFyQ291bnRyaWVzLFxuICBsb2FkU3VnZ2VzdCxcbiAgc2V0Q2l0aXplbnNoaXAsXG4gIHZhbHVlLFxuICBvbkNoYW5nZSxcbiAgaXNDaXRpemVuc2hpcFJlcXVpcmVkLFxuICBpc05hdGRpc0NyaXRpY2FsLFxuICBuZWVkU2hvd0Vycm9ycyxcbiAgc2VhcmNoRm9ybVJlZixcbiAgcm9vdEVsZW1lbnQsXG59KSA9PiB7XG4gIGNvbnN0IGlzUmVxdWlyZWQgPSBpc0NpdGl6ZW5zaGlwUmVxdWlyZWQgfHwgaXNOYXRkaXNDcml0aWNhbDtcbiAgY29uc3QgaGFzRXJyb3IgPSAhdmFsdWUgJiYgaXNSZXF1aXJlZCAmJiBuZWVkU2hvd0Vycm9ycztcblxuICBjb25zdCBub1Njcm9sbENsYXNzID0gJ292ZXJsYXlwb3B1cC1ub3Njcm9sbCc7XG5cbiAgY29uc3QgW3dyYXBwZXJSZWYsIGJvdW5kc10gPSB1c2VCb3VuZHMocm9vdEVsZW1lbnQpO1xuICBjb25zdCBpbnB1dEVsID0gdXNlUmVmKG51bGwpO1xuXG4gIGNvbnN0IFtuZWVkU2hvd1N1Z2dlc3QsIHNldFNob3dTdWdnZXN0XSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3F1ZXJ5LCBzZXRRdWVyeV0gPSB1c2VTdGF0ZShnZXRWYWx1ZUxhYmVsKHZhbHVlKSk7XG4gIGNvbnN0IFtzZWxlY3RlZFZhbHVlLCBzZXRTZWxlY3RlZFZhbHVlXSA9IHVzZVN0YXRlKHZhbHVlKTtcbiAgY29uc3QgW2FjdGl2ZVN1Z2dlc3RJdGVtLCBzZXRBY3RpdmVTdWdnZXN0SXRlbV0gPSB1c2VTdGF0ZSgwKTtcblxuICBjb25zdCBbc2hvd0Z1bGxMaXN0LCBzZXRTaG93RnVsbExpc3RdID0gdXNlU3RhdGUodHJ1ZSk7XG5cbiAgY29uc3QgZmlsdGVyZWRDb3VudHJpZXMgPSB1c2VGaWx0ZXJlZExpc3QoY291bnRyaWVzLCBxdWVyeSwgc2hvd0Z1bGxMaXN0KTtcbiAgY29uc3QgZmlsdGVyZWRQb3B1bGFyQ291bnRyaWVzID0gdXNlRmlsdGVyZWRMaXN0KFxuICAgIHBvcHVsYXJDb3VudHJpZXMsXG4gICAgcXVlcnksXG4gICAgc2hvd0Z1bGxMaXN0XG4gICk7XG5cbiAgY29uc3QgcHJlcGFyZUNvdW50cnkgPSBvZmZzZXQgPT4gKGNvdW50cnksIGluZGV4KSA9PiAoe1xuICAgIC4uLmNvdW50cnksXG4gICAgaW5kZXg6IGluZGV4ICsgb2Zmc2V0LFxuICB9KTtcbiAgY29uc3Qgc3VnZ2VzdExpc3QgPSB1c2VNZW1vKFxuICAgICgpID0+IFtcbiAgICAgIC4uLmZpbHRlcmVkUG9wdWxhckNvdW50cmllcy5tYXAocHJlcGFyZUNvdW50cnkoMCkpLFxuICAgICAgZmlsdGVyZWRQb3B1bGFyQ291bnRyaWVzLmxlbmd0aCA+IDAgJiYgeyBpc1NlcGFyYXRvcjogdHJ1ZSB9LFxuICAgICAgLi4uZmlsdGVyZWRDb3VudHJpZXMubWFwKHByZXBhcmVDb3VudHJ5KGZpbHRlcmVkUG9wdWxhckNvdW50cmllcy5sZW5ndGgpKSxcbiAgICBdLmZpbHRlcih4ID0+IHgpLFxuICAgIFtmaWx0ZXJlZENvdW50cmllcywgZmlsdGVyZWRQb3B1bGFyQ291bnRyaWVzXVxuICApO1xuXG4gIGNvbnN0IHN1Z2dlc3RJdGVtc0NvdW50ID0gZmlsdGVyZWRDb3VudHJpZXMubGVuZ3RoXG4gICAgKyBmaWx0ZXJlZFBvcHVsYXJDb3VudHJpZXMubGVuZ3RoO1xuXG4gIGxvYWRTdWdnZXN0KCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHNldFF1ZXJ5KGdldFZhbHVlTGFiZWwodmFsdWUpKSwgW2NvdW50cmllc10pO1xuXG4gIGNvbnN0IGludGwgPSB1c2VJbnRsKCk7XG5cbiAgY29uc3QgY2xvc2VTdWdnZXN0ID0gdXNlQ2FsbGJhY2soXG4gICAgaGlkZVN1Z2dlc3QsXG4gICAgW3N1Z2dlc3RMaXN0LCBuZWVkU2hvd1N1Z2dlc3RdXG4gICk7XG5cbiAgY29uc3QgYXJyb3dDbGFzc05hbWUgPSBlbShuZWVkU2hvd1N1Z2dlc3QgPyAnYXJyb3dUb3AnIDogJ2Fycm93RG93bicpKCk7XG4gIGNvbnN0IGljb24gPSBzZWxlY3RlZFZhbHVlXG4gICAgPyBudWxsXG4gICAgOiA8QXJyb3dEb3duIGNsYXNzTmFtZT17YXJyb3dDbGFzc05hbWV9IHdpZHRoPVwiMjBcIiBoZWlnaHQ9XCIyMFwiIC8+O1xuXG4gIHJldHVybiAoXG4gICAgPENsaWNrT3V0c2lkZVxuICAgICAgcmVmPXt3cmFwcGVyUmVmfVxuICAgICAgb25DbGlja091dHNpZGU9e2Nsb3NlU3VnZ2VzdH1cbiAgICA+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ3dyYXBwZXInKSgpfT5cbiAgICAgICAgPElucHV0XG4gICAgICAgICAgaW5wdXRSZWY9e2lucHV0RWx9XG4gICAgICAgICAgb25Gb2N1cz17b25JbnB1dEZvY3VzfVxuICAgICAgICAgIG9uQ2hhbmdlPXtvbklucHV0Q2hhbmdlfVxuICAgICAgICAgIG9uS2V5RG93bj17b25LZXlEb3dufVxuICAgICAgICAgIHZhbHVlPXtxdWVyeX1cbiAgICAgICAgICBzaXplPVwibVwiXG4gICAgICAgICAgd2lkZT17dHJ1ZX1cbiAgICAgICAgICBsYWJlbD17XG4gICAgICAgICAgICBpc1JlcXVpcmVkXG4gICAgICAgICAgICAgID8gaW50bC5mb3JtYXRNZXNzYWdlKG1lc3NhZ2VzLmxhYmVsUmVxdWlyZWQpXG4gICAgICAgICAgICAgIDogaW50bC5mb3JtYXRNZXNzYWdlKG1lc3NhZ2VzLmxhYmVsKVxuICAgICAgICAgIH1cbiAgICAgICAgICBwbGFjZWhvbGRlcj17aW50bC5mb3JtYXRNZXNzYWdlKG1lc3NhZ2VzLnBsYWNlaG9sZGVyKX1cbiAgICAgICAgICBpY29uPXtpY29ufVxuICAgICAgICAgIHJlc2VydmVJY29uUGxhY2U9e3RydWV9XG4gICAgICAgICAgaGFzRXJyb3I9e2hhc0Vycm9yfVxuICAgICAgICAvPlxuICAgICAgICB7IHNlbGVjdGVkVmFsdWVcbiAgICAgICAgICAmJiA8ZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9e2VtKCdjbGVhckljb24nKSgpfVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0VmFsdWVGcm9tU3VnZ2VzdChudWxsKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8Q3Jvc3Mgd2lkdGg9XCIyMFwiIGhlaWdodD1cIjIwXCIgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgfVxuICAgICAgICB7XG4gICAgICAgICAgbmVlZFNob3dTdWdnZXN0ICYmICFpc01vYmlsZSgpXG4gICAgICAgICAgJiYgPFBvcHVwXG4gICAgICAgICAgICBjbGFzc05hbWU9e2VtKCdwb3B1cCcpKCl9XG4gICAgICAgICAgICB0b3A9e2JvdW5kcy5hYnNvbHV0ZUJvdHRvbSArIDF9XG4gICAgICAgICAgICBsZWZ0PXtib3VuZHMuYWJzb2x1dGVMZWZ0fVxuICAgICAgICAgICAgd2lkdGg9e2JvdW5kcy53aWR0aH1cbiAgICAgICAgICAgIHJvb3RFbGVtZW50PXtyb290RWxlbWVudH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8U3VnZ2VzdFxuICAgICAgICAgICAgICBzdWdnZXN0TGlzdD17c3VnZ2VzdExpc3R9XG4gICAgICAgICAgICAgIHNldFZhbHVlPXtzZXRWYWx1ZUZyb21TdWdnZXN0fVxuICAgICAgICAgICAgICBhY3RpdmVJdGVtPXthY3RpdmVTdWdnZXN0SXRlbX1cbiAgICAgICAgICAgICAgc2V0QWN0aXZlSXRlbT17c2V0QWN0aXZlU3VnZ2VzdEl0ZW19XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvUG9wdXA+XG4gICAgICAgIH1cbiAgICAgICAge1xuICAgICAgICAgIG5lZWRTaG93U3VnZ2VzdCAmJiBpc01vYmlsZSgpXG4gICAgICAgICAgJiYgPE1vYmlsZVN1Z2dlc3RcbiAgICAgICAgICAgIGNsb3NlU3VnZ2VzdD17Y2xvc2VTdWdnZXN0fVxuICAgICAgICAgICAgb25JbnB1dENoYW5nZT17b25JbnB1dENoYW5nZX1cbiAgICAgICAgICAgIHF1ZXJ5PXtxdWVyeX1cbiAgICAgICAgICAgIHN1Z2dlc3RMaXN0PXtzdWdnZXN0TGlzdH1cbiAgICAgICAgICAgIHNldFZhbHVlRnJvbVN1Z2dlc3Q9e3NldFZhbHVlRnJvbVN1Z2dlc3R9XG4gICAgICAgICAgICBhY3RpdmVTdWdnZXN0SXRlbT17YWN0aXZlU3VnZ2VzdEl0ZW19XG4gICAgICAgICAgICBzZXRBY3RpdmVTdWdnZXN0SXRlbT17c2V0QWN0aXZlU3VnZ2VzdEl0ZW19XG4gICAgICAgICAgLz5cbiAgICAgICAgfVxuICAgICAgPC9kaXY+XG4gICAgPC9DbGlja091dHNpZGU+XG4gICk7XG5cbiAgZnVuY3Rpb24gb25JbnB1dENoYW5nZShlKSB7XG4gICAgc2V0U2hvd0Z1bGxMaXN0KGZhbHNlKTtcbiAgICBzZXRRdWVyeShlLnRhcmdldC52YWx1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbklucHV0Rm9jdXMoZSkge1xuICAgIGlmIChpc01vYmlsZSgpKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQobm9TY3JvbGxDbGFzcyk7XG4gICAgfVxuXG4gICAgaWYgKCFpc0Rlc2t0b3BVcCgpKSB7XG4gICAgICBzZWFyY2hGb3JtUmVmLmN1cnJlbnQuc2Nyb2xsSW50b1ZpZXcoe1xuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCcsXG4gICAgICB9KTtcbiAgICB9XG4gICAgc2V0U2hvd1N1Z2dlc3QodHJ1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBoaWRlU3VnZ2VzdCgpIHtcbiAgICBpZiAoIW5lZWRTaG93U3VnZ2VzdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNldFNob3dGdWxsTGlzdCh0cnVlKTtcblxuICAgIGlmICghc2VsZWN0ZWRWYWx1ZSkge1xuICAgICAgc2V0U2hvd1N1Z2dlc3QoZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRWYWx1ZUZyb21TdWdnZXN0KHNlbGVjdGVkVmFsdWUpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25LZXlEb3duKGUpIHtcbiAgICBzd2l0Y2ggKGUua2V5Q29kZSkge1xuICAgICAgY2FzZSA5OlxuICAgICAgICByZXR1cm4gdGFiKCk7XG4gICAgICBjYXNlIDEzOlxuICAgICAgICByZXR1cm4gZW50ZXIoKTtcbiAgICAgIGNhc2UgMzg6XG4gICAgICAgIHJldHVybiB1cCgpO1xuICAgICAgY2FzZSA0MDpcbiAgICAgICAgcmV0dXJuIGRvd24oKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cCgpIHtcbiAgICAgIHNldEFjdGl2ZVN1Z2dlc3RJdGVtKFxuICAgICAgICAoYWN0aXZlU3VnZ2VzdEl0ZW0gKyBzdWdnZXN0SXRlbXNDb3VudCAtIDEpICUgc3VnZ2VzdEl0ZW1zQ291bnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZG93bigpIHtcbiAgICAgIHNldEFjdGl2ZVN1Z2dlc3RJdGVtKFxuICAgICAgICAoYWN0aXZlU3VnZ2VzdEl0ZW0gKyBzdWdnZXN0SXRlbXNDb3VudCArIDEpICUgc3VnZ2VzdEl0ZW1zQ291bnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW50ZXIoKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHN1Z2dlc3RMaXN0LmZpbmQoXG4gICAgICAgIGl0ZW0gPT4gaXRlbS5pbmRleCA9PT0gYWN0aXZlU3VnZ2VzdEl0ZW1cbiAgICAgICk7XG5cbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZXRWYWx1ZUZyb21TdWdnZXN0KHZhbHVlLmNvZGUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRhYigpIHtcbiAgICAgIGhpZGVTdWdnZXN0KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0VmFsdWVGcm9tU3VnZ2VzdChjb2RlKSB7XG4gICAgaWYgKGlzTW9iaWxlKCkpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShub1Njcm9sbENsYXNzKTtcbiAgICB9XG5cbiAgICBzZXRTZWxlY3RlZFZhbHVlKGNvZGUpO1xuICAgIG9uQ2hhbmdlKGNvZGUpO1xuXG4gICAgaW5wdXRFbC5jdXJyZW50ICYmIGlucHV0RWwuY3VycmVudC5ibHVyKCk7XG5cbiAgICBzZXRRdWVyeShnZXRWYWx1ZUxhYmVsKGNvZGUpKTtcbiAgICBzZXRDaXRpemVuc2hpcChnZXRWYWx1ZUJ5Q29kZShjb2RlKSk7XG4gICAgc2V0U2hvd1N1Z2dlc3QoZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VmFsdWVCeUNvZGUoY29kZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnRyaWVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoY291bnRyaWVzW2ldLmNvZGUgPT09IGNvZGUpIHtcbiAgICAgICAgcmV0dXJuIGNvdW50cmllc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFZhbHVlTGFiZWwoY29kZSkge1xuICAgIGNvbnN0IHZhbHVlID0gZ2V0VmFsdWVCeUNvZGUoY29kZSk7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZS5uYW1lO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShDaXRpemVuc2hpcCk7XG5cbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyh7IGNvdW50cmllcywgY2l0aXplbnNoaXAgfSkge1xuICByZXR1cm4ge1xuICAgIGNvdW50cmllczogY291bnRyaWVzLmxpc3QsXG4gICAgcG9wdWxhckNvdW50cmllczogY2l0aXplbnNoaXAucG9wdWxhcixcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoKSB7XG4gIHJldHVybiB7XG4gICAgbG9hZFN1Z2dlc3Q6ICgpID0+IGRpc3BhdGNoKGNvdW50cmllc0FjdGlvbnMubG9hZCgpKSxcbiAgICBzZXRDaXRpemVuc2hpcDogKHZhbCkgPT4gZGlzcGF0Y2goY2l0aXplbnNoaXBBY3Rpb25zLnNldENpdGl6ZW5zaGlwKHZhbCkpLFxuICB9O1xufVxuIiwiaW1wb3J0IFJlYWN0LCB7IEZDIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNzc21lbSBmcm9tICdjc3NtZW0nO1xuXG5pbXBvcnQgQ2hlY2tib3gsIHsgVklFVyB9IGZyb20gJy4uL0NoZWNrYm94JztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0NoZWNrYm94R3JvdXAuY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuaW50ZXJmYWNlIE9wdGlvbiB7XG4gIHRleHQ6IHN0cmluZztcbiAgdG9vbHRpcDogUmVhY3QuUmVhY3ROb2RlO1xuICB2YWw6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgdmFsOiBzdHJpbmdbXTtcbiAgb3B0aW9uczogT3B0aW9uW107XG4gIG9uQ2hhbmdlOiAodmFsdWU6IHN0cmluZ1tdKSA9PiB2b2lkO1xuICB2aWV3OiBWSUVXO1xuICB3aWRlOiBib29sZWFuO1xuICB3cmFwPzogYm9vbGVhbjtcbn1cblxuY29uc3QgQ2hlY2tib3hHcm91cDogRkM8UHJvcHM+ID0gKHtcbiAgdmFsLFxuICBvcHRpb25zLFxuICBvbkNoYW5nZSxcbiAgdmlldyxcbiAgd2lkZSxcbiAgd3JhcCxcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2dyb3VwJykoeyB3aWRlLCB3cmFwIH0pfT5cbiAgICAgIHtvcHRpb25zLm1hcCgob3B0aW9uKSA9PiAoXG4gICAgICAgIDxDaGVja2JveFxuICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ2NvbnRyb2wnKSh7IHZpZXcgfSl9XG4gICAgICAgICAgdmFsPXtvcHRpb24udmFsfVxuICAgICAgICAgIHRleHQ9e29wdGlvbi50ZXh0fVxuICAgICAgICAgIHRvb2x0aXA9e29wdGlvbi50b29sdGlwfVxuICAgICAgICAgIGNoZWNrZWQ9e3ZhbC5pbmRleE9mKG9wdGlvbi52YWwpICE9PSAtMX1cbiAgICAgICAgICBvbkNoYW5nZT17b25DaGVja2JveENoYW5nZX1cbiAgICAgICAgICB2aWV3PXt2aWV3fVxuICAgICAgICAgIGtleT17b3B0aW9uLnZhbH1cbiAgICAgICAgICB3aWRlPXt3aWRlfVxuICAgICAgICAvPlxuICAgICAgKSl9XG4gICAgPC9kaXY+XG4gICk7XG5cbiAgZnVuY3Rpb24gb25DaGVja2JveENoYW5nZShldmVudDogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pIHtcbiAgICBjb25zdCBpc0NoZWNrZWQgPSBldmVudC50YXJnZXQuY2hlY2tlZDtcblxuICAgIGNvbnN0IG5ld1ZhbCA9IG9wdGlvbnNcbiAgICAgIC5maWx0ZXIoKG9wdGlvbikgPT4ge1xuICAgICAgICBpZiAob3B0aW9uLnZhbCA9PT0gZXZlbnQudGFyZ2V0LnZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzQ2hlY2tlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWwuaW5kZXhPZihvcHRpb24udmFsKSAhPT0gLTE7XG4gICAgICB9KVxuICAgICAgLm1hcCgoeyB2YWwgfSkgPT4gdmFsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zaGFkb3dcblxuICAgIG9uQ2hhbmdlKG5ld1ZhbCk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENoZWNrYm94R3JvdXA7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBkZWZpbmVNZXNzYWdlcywgdXNlSW50bCB9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IGNzc21lbSBmcm9tICdjc3NtZW0nO1xuXG5pbXBvcnQgU2VsZWN0IGZyb20gJ2NvbXBvbmVudHMvU2VsZWN0JztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0VDTEMuY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuY29uc3QgbWVzc2FnZXMgPSBkZWZpbmVNZXNzYWdlcyh7XG4gIGVhcmx5Q2hlY2tpbjoge1xuICAgIGlkOiBcIkVDTEMuZWFybHlDaGVja2luXCIsXG4gICAgZGVmYXVsdE1lc3NhZ2U6IFwi0KDQsNC90L3QuNC5INC30LDQtdC30LRcIixcbiAgfSxcbiAgbGF0ZUNoZWNrb3V0OiB7XG4gICAgaWQ6IFwiRUNMQy5sYXRlQ2hlY2tvdXRcIixcbiAgICBkZWZhdWx0TWVzc2FnZTogXCLQn9C+0LfQtNC90LjQuSDQstGL0LXQt9C0XCIsXG4gIH0sXG4gIHNlbGVjdFRpbWU6IHtcbiAgICBpZDogXCJFQ0xDLnNlbGVjdFRpbWVcIixcbiAgICBkZWZhdWx0TWVzc2FnZTogXCLQktGL0LHQtdGA0LjRgtC1INCy0YDQtdC80Y9cIixcbiAgfSxcbn0pO1xuXG5jb25zdCBFQ0xDID0gKHtcbiAgZWFybHlDaGVja2luLFxuICBzZXRFYXJseUNoZWNraW4sXG4gIGxhdGVDaGVja291dCxcbiAgc2V0TGF0ZUNoZWNrb3V0LFxuICBlY2xjVGltZXNMaXN0LFxufSkgPT4ge1xuICBjb25zdCB0aW1lcyA9IGVjbGNUaW1lc0xpc3Q7XG5cbiAgaWYgKCF0aW1lcykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgY2hlY2tpblRpbWVzID0gdGltZXNbJ2Vhcmx5X2NoZWNraW4nXTtcbiAgY29uc3QgY2hlY2tvdXRUaW1lcyA9IHRpbWVzWydsYXRlX2NoZWNrb3V0J107XG4gIGNvbnN0IGludGwgPSB1c2VJbnRsKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2NvbnRyb2wnKSgpfT5cbiAgICAgICAgPFNlbGVjdFxuICAgICAgICAgIGxhYmVsPXtpbnRsLmZvcm1hdE1lc3NhZ2UobWVzc2FnZXMuZWFybHlDaGVja2luKX1cbiAgICAgICAgICBwbGFjZWhvbGRlcj17aW50bC5mb3JtYXRNZXNzYWdlKG1lc3NhZ2VzLnNlbGVjdFRpbWUpfVxuICAgICAgICAgIGNhbmNlbGxhYmxlPXt0cnVlfVxuICAgICAgICAgIHZhbHVlPXtlYXJseUNoZWNraW59XG4gICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRFYXJseUNoZWNraW4oZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgIHNpemU9XCJtXCJcbiAgICAgICAgICB3aWRlPXt0cnVlfVxuICAgICAgICAgIG9wdGlvbnM9e1tcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdmFsdWU6ICcnLFxuICAgICAgICAgICAgICB0ZXh0OiBpbnRsLmZvcm1hdE1lc3NhZ2UobWVzc2FnZXMuc2VsZWN0VGltZSksXG4gICAgICAgICAgICAgIGRpc2FibGVkOiB0cnVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC4uLmNoZWNraW5UaW1lcy5tYXAodGltZSA9PiAoe1xuICAgICAgICAgICAgICB2YWx1ZTogdGltZS5zdWJzdHJpbmcoMCwgMiksXG4gICAgICAgICAgICAgIHRleHQ6IHRpbWUsXG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgXX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCdjb250cm9sJykoKX0+XG4gICAgICAgIDxTZWxlY3RcbiAgICAgICAgICBsYWJlbD17aW50bC5mb3JtYXRNZXNzYWdlKG1lc3NhZ2VzLmxhdGVDaGVja291dCl9XG4gICAgICAgICAgcGxhY2Vob2xkZXI9e2ludGwuZm9ybWF0TWVzc2FnZShtZXNzYWdlcy5zZWxlY3RUaW1lKX1cbiAgICAgICAgICBjYW5jZWxsYWJsZT17dHJ1ZX1cbiAgICAgICAgICB2YWx1ZT17bGF0ZUNoZWNrb3V0fVxuICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0TGF0ZUNoZWNrb3V0KGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICBzaXplPVwibVwiXG4gICAgICAgICAgd2lkZT17dHJ1ZX1cbiAgICAgICAgICBvcHRpb25zPXtbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHZhbHVlOiAnJyxcbiAgICAgICAgICAgICAgdGV4dDogaW50bC5mb3JtYXRNZXNzYWdlKG1lc3NhZ2VzLnNlbGVjdFRpbWUpLFxuICAgICAgICAgICAgICBkaXNhYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAuLi5jaGVja291dFRpbWVzLm1hcCh0aW1lID0+ICh7XG4gICAgICAgICAgICAgIHZhbHVlOiB0aW1lLnN1YnN0cmluZygwLCAyKSxcbiAgICAgICAgICAgICAgdGV4dDogdGltZSxcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICBdfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEVDTEM7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBkZWZpbmVNZXNzYWdlcywgdXNlSW50bCB9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IGNzc21lbSBmcm9tICdjc3NtZW0nO1xuXG5pbXBvcnQgVG9vbHRpcCBmcm9tICdyZWFjdC10b29sdGlwLWxpdGUnO1xuXG5pbXBvcnQgQ2l0aXplbnNoaXAgZnJvbSAnLi4vQ2l0aXplbnNoaXAnO1xuaW1wb3J0IENoZWNrYm94R3JvdXAgZnJvbSAnY29tcG9uZW50cy9DaGVja2JveEdyb3VwJztcbmltcG9ydCBDaGVja2JveCBmcm9tICdjb21wb25lbnRzL0NoZWNrYm94JztcblxuaW1wb3J0IEVDTEMgZnJvbSAnLi9FQ0xDJztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9CMkJFeHRyYS5jc3MnO1xuXG5jb25zdCBlbSA9IGNzc21lbShzdHlsZXMpO1xuXG5jb25zdCBtZXNzYWdlcyA9IGRlZmluZU1lc3NhZ2VzKHtcbiAgcm9vbU9ubHk6IHtcbiAgICBpZDogXCJCMkJFeHRyYS5tZWFscy5yb29tT25seVwiLFxuICAgIGRlZmF1bHRNZXNzYWdlOiBcItCR0LXQtyDQv9C40YLQsNC90LjRj1wiLFxuICB9LFxuICBicmVha2Zhc3Q6IHtcbiAgICBpZDogXCJCMkJFeHRyYS5tZWFscy5icmVha2Zhc3RcIixcbiAgICBkZWZhdWx0TWVzc2FnZTogXCLQl9Cw0LLRgtGA0LDQulwiLFxuICB9LFxuICBoYWxmQm9hcmQ6IHtcbiAgICBpZDogXCJCMkJFeHRyYS5tZWFscy5oYWxmQm9hcmRcIixcbiAgICBkZWZhdWx0TWVzc2FnZTogXCLQn9C+0LvRg9C/0LDQvdGB0LjQvtC9ICjQt9Cw0LLRgtGA0LDQuiDQuCDRg9C20LjQvSlcIixcbiAgfSxcbiAgZnVsbEJvYXJkOiB7XG4gICAgaWQ6IFwiQjJCRXh0cmEubWVhbHMuZnVsbEJvYXJkXCIsXG4gICAgZGVmYXVsdE1lc3NhZ2U6IFwi0J/QvtC70L3Ri9C5INC/0LDQvdGB0LjQvtC9ICjQt9Cw0LLRgtGA0LDQuiwg0L7QsdC10LQg0Lgg0YPQttC40L0g0YEg0LHQtdC30LDQu9C60L7Qs9C+0LvRjNC90YvQvNC4INC90LDQv9C40YLQutCw0LzQuClcIixcbiAgfSxcbiAgYWxsSW5jbHVzaXZlOiB7XG4gICAgaWQ6IFwiQjJCRXh0cmEubWVhbHMuYWxsSW5jbHVzaXZlXCIsXG4gICAgZGVmYXVsdE1lc3NhZ2U6IFwi0JLRgdGRINCy0LrQu9GO0YfQtdC90L5cIixcbiAgfSxcbiAgZnJlZUNhbmNlbGxhdGlvbjoge1xuICAgIGlkOiBcIkIyQkV4dHJhLmZyZWVDYW5jZWxsYXRpb25cIixcbiAgICBkZWZhdWx0TWVzc2FnZTogXCLQkdC10YHQv9C70LDRgtC90LDRjyDQvtGC0LzQtdC90LBcIixcbiAgfSxcbn0pO1xuXG5jb25zdCBCMkJFeHRyYSA9ICh7XG4gIGNpdGl6ZW5zaGlwLFxuICBzZXRDaXRpemVuc2hpcCxcbiAgZnJlZUNhbmNlbGxhdGlvbixcbiAgc2V0RnJlZUNhbmNlbGxhdGlvbixcbiAgZWFybHlDaGVja2luLFxuICBzZXRFYXJseUNoZWNraW4sXG4gIGxhdGVDaGVja291dCxcbiAgc2V0TGF0ZUNoZWNrb3V0LFxuICBtZWFscyxcbiAgc2V0TWVhbHMsXG4gIGlzQ2l0aXplbnNoaXBSZXF1aXJlZCxcbiAgaXNOYXRkaXNDcml0aWNhbCxcbiAgaXNFY2xjU2VhcmNoRW5hYmxlZCxcbiAgaW5Qb3B1cCxcbiAgZWNsY1RpbWVzTGlzdCxcbiAgbmVlZFNob3dFcnJvcnMsXG4gIHNlYXJjaEZvcm1SZWYsXG4gIHJvb3RFbGVtZW50LFxufSkgPT4ge1xuICBjb25zdCBpbnRsID0gdXNlSW50bCgpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2VtKCdsaW5lJykoKX0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2NpdGl6ZW5zaGlwJykoeyBpblBvcHVwIH0pfT5cbiAgICAgICAgPENpdGl6ZW5zaGlwXG4gICAgICAgICAgdmFsdWU9e2NpdGl6ZW5zaGlwfVxuICAgICAgICAgIG9uQ2hhbmdlPXtzZXRDaXRpemVuc2hpcH1cbiAgICAgICAgICBzZWFyY2hGb3JtUmVmPXtzZWFyY2hGb3JtUmVmfVxuICAgICAgICAgIHJvb3RFbGVtZW50PXtyb290RWxlbWVudH1cbiAgICAgICAgICBpc0NpdGl6ZW5zaGlwUmVxdWlyZWQ9e2lzQ2l0aXplbnNoaXBSZXF1aXJlZH1cbiAgICAgICAgICBpc05hdGRpc0NyaXRpY2FsPXtpc05hdGRpc0NyaXRpY2FsfVxuICAgICAgICAgIG5lZWRTaG93RXJyb3JzPXtuZWVkU2hvd0Vycm9yc31cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ21lYWxzJykoeyBpblBvcHVwIH0pfT5cbiAgICAgICAgPENoZWNrYm94R3JvdXBcbiAgICAgICAgICB2aWV3PVwiYnV0dG9uXCJcbiAgICAgICAgICB2YWw9e21lYWxzfVxuICAgICAgICAgIG9wdGlvbnM9e1tcbiAgICAgICAgICAgIHsgdmFsOiAnbm9tZWFsJywgdGV4dDogJ1JPJywgdG9vbHRpcDogaW50bC5mb3JtYXRNZXNzYWdlKG1lc3NhZ2VzLnJvb21Pbmx5KSB9LFxuICAgICAgICAgICAgeyB2YWw6ICdicmVha2Zhc3QnLCB0ZXh0OiAnQkInLCB0b29sdGlwOiBpbnRsLmZvcm1hdE1lc3NhZ2UobWVzc2FnZXMuYnJlYWtmYXN0KSB9LFxuICAgICAgICAgICAgeyB2YWw6ICdoYWxmQm9hcmQnLCB0ZXh0OiAnSEInLCB0b29sdGlwOiBpbnRsLmZvcm1hdE1lc3NhZ2UobWVzc2FnZXMuaGFsZkJvYXJkKSB9LFxuICAgICAgICAgICAgeyB2YWw6ICdmdWxsQm9hcmQnLCB0ZXh0OiAnRkInLCB0b29sdGlwOiBpbnRsLmZvcm1hdE1lc3NhZ2UobWVzc2FnZXMuZnVsbEJvYXJkKSB9LFxuICAgICAgICAgICAgeyB2YWw6ICdhbGxJbmNsdXNpdmUnLCB0ZXh0OiAnQUknLCB0b29sdGlwOiBpbnRsLmZvcm1hdE1lc3NhZ2UobWVzc2FnZXMuYWxsSW5jbHVzaXZlKSB9LFxuICAgICAgICAgIF19XG4gICAgICAgICAgb25DaGFuZ2U9e3NldE1lYWxzfVxuICAgICAgICAgIHdpZGU9e3RydWV9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cblxuICAgICAge1xuICAgICAgICBpc0VjbGNTZWFyY2hFbmFibGVkXG4gICAgICAgICYmIDxkaXYgY2xhc3NOYW1lPXtlbSgnZWNsYycpKHsgaW5Qb3B1cCB9KX0+XG4gICAgICAgICAgPEVDTENcbiAgICAgICAgICAgIGVhcmx5Q2hlY2tpbj17ZWFybHlDaGVja2lufVxuICAgICAgICAgICAgc2V0RWFybHlDaGVja2luPXtzZXRFYXJseUNoZWNraW59XG4gICAgICAgICAgICBsYXRlQ2hlY2tvdXQ9e2xhdGVDaGVja291dH1cbiAgICAgICAgICAgIHNldExhdGVDaGVja291dD17c2V0TGF0ZUNoZWNrb3V0fVxuICAgICAgICAgICAgZWNsY1RpbWVzTGlzdD17ZWNsY1RpbWVzTGlzdH1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIH1cblxuICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCdmcmVlQ2FuY2VsbGF0aW9uJykoeyBpblBvcHVwIH0pfT5cbiAgICAgICAgPENoZWNrYm94XG4gICAgICAgICAgdGV4dD17aW50bC5mb3JtYXRNZXNzYWdlKG1lc3NhZ2VzLmZyZWVDYW5jZWxsYXRpb24pfVxuICAgICAgICAgIGNoZWNrZWQ9e2ZyZWVDYW5jZWxsYXRpb259XG4gICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUZyZWVDYW5jZWxsYXRpb259XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcblxuICBmdW5jdGlvbiBoYW5kbGVGcmVlQ2FuY2VsbGF0aW9uKGV2dCkge1xuICAgIHNldEZyZWVDYW5jZWxsYXRpb24oZXZ0LnRhcmdldC5jaGVja2VkKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQjJCRXh0cmE7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZGVmaW5lTWVzc2FnZXMsIHVzZUludGwgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcblxuaW1wb3J0IEFycm93RG93biBmcm9tICdjb21wb25lbnRzL0ljb24vQXJyb3dEb3duJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0V4dHJhUGFyYW1zU3dpdGNoZXIuY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuY29uc3QgbWVzc2FnZXMgPSBkZWZpbmVNZXNzYWdlcyh7XG4gIGV4dHJhUGFyYW1zOiB7XG4gICAgaWQ6IFwic2VhcmNoRm9ybS5leHRyYVBhcmFtc1wiLFxuICAgIGRlZmF1bHRNZXNzYWdlOiBcItCU0L7Qv9C+0LvQvdC40YLQtdC70YzQvdGL0LUg0L/QsNGA0LDQvNC10YLRgNGLXCIsXG4gIH0sXG59KTtcblxuY29uc3QgRXh0cmFQYXJhbXNTd2l0Y2hlciA9ICh7XG4gIHNob3dFeHRyYVBhcmFtcyxcbiAgc2V0U2hvd0V4dHJhUGFyYW1zLFxuICBpblBvcHVwLFxufSkgPT4ge1xuICBjb25zdCBpbnRsID0gdXNlSW50bCgpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2VtKCd3cmFwcGVyJykoeyBpblBvcHVwIH0pfVxuICAgICAgb25DbGljaz17KCkgPT4gc2V0U2hvd0V4dHJhUGFyYW1zKCFzaG93RXh0cmFQYXJhbXMpfVxuICAgID5cbiAgICAgIDxBcnJvd0Rvd24gY2xhc3NOYW1lPXtlbSgnYXJyb3cnKSh7IHJldmVyc2U6IHNob3dFeHRyYVBhcmFtcyB9KX0gLz5cblxuICAgICAge2ludGwuZm9ybWF0TWVzc2FnZShtZXNzYWdlcy5leHRyYVBhcmFtcyl9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBFeHRyYVBhcmFtc1N3aXRjaGVyO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrLCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVkdXhlZCBmcm9tICcuLi9SZWR1eGVkJztcbmltcG9ydCB7IGRlZmluZU1lc3NhZ2VzLCB1c2VJbnRsIH0gZnJvbSAncmVhY3QtaW50bCc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHtcbiAgc3RhcnRPZkRheSxcbiAgYWRkRGF5cyxcbiAgYWRkWWVhcnMsXG59IGZyb20gJ2RhdGUtZm5zJztcbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcblxuaW1wb3J0IHsgYWN0aW9ucyBhcyBjb3VudHJpZXNBY3Rpb25zIH0gZnJvbSAnLi4vcmVkdWNlcnMvY291bnRyaWVzJztcblxuXG5pbXBvcnQgRGF0ZXBpY2tlciBmcm9tICcuLi9EYXRlcGlja2VyJztcbmltcG9ydCBEZXN0aW5hdGlvbiBmcm9tICcuLi9EZXN0aW5hdGlvbic7XG5pbXBvcnQgR3Vlc3RzIGZyb20gJy4uL0d1ZXN0cyc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJ2NvbXBvbmVudHMvQnV0dG9uJztcblxuaW1wb3J0IEIyQ0V4dHJhIGZyb20gJy4vQjJDRXh0cmEnO1xuaW1wb3J0IEIyQkV4dHJhIGZyb20gJy4vQjJCRXh0cmEnO1xuaW1wb3J0IEV4dHJhUGFyYW1zU3dpdGNoZXIgZnJvbSAnLi9FeHRyYVBhcmFtc1N3aXRjaGVyJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL1NlYXJjaEZvcm0uY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuY29uc3QgbWVzc2FnZXMgPSBkZWZpbmVNZXNzYWdlcyh7XG4gIHNlYXJjaDoge1xuICAgIGlkOiBcInNlYXJjaEZvcm0uc2VhcmNoXCIsXG4gICAgZGVmYXVsdE1lc3NhZ2U6IFwi0J3QsNC50YLQuFwiLFxuICB9LFxuICBkZW1vU2VhcmNoOiB7XG4gICAgaWQ6IFwic2VhcmNoRm9ybS5kZW1vU2VhcmNoXCIsXG4gICAgZGVmYXVsdE1lc3NhZ2U6IFwi0J3QsNC50YLQuCDQvdCwIFJhdGVIYXdrXCIsXG4gIH0sXG4gIGNoZWNraW46IHtcbiAgICBpZDogXCJzZWFyY2hGb3JtLmNoZWNraW5cIixcbiAgICBkZWZhdWx0TWVzc2FnZTogXCLQl9Cw0LXQt9C0XCIsXG4gIH0sXG4gIGNoZWNrb3V0OiB7XG4gICAgaWQ6IFwic2VhcmNoRm9ybS5jaGVja291dFwiLFxuICAgIGRlZmF1bHRNZXNzYWdlOiBcItCS0YvQtdC30LRcIixcbiAgfSxcbn0pO1xuXG5jb25zdCBTZWFyY2hGb3JtID0gKHtcbiAgY2xhc3NOYW1lLFxuICBvbkNoYW5nZSxcbiAgb25TdWJtaXQsXG4gIG9uQ29tcGFyZXRvQ2hhbmdlLFxuICBzaG91bGRTaG93Q29tcGFyZXRvLFxuICBjb21wYXJldG9WYWx1ZSxcbiAgcmVnaW9uVmFsdWUsXG4gIHJvb21zVmFsdWUsXG4gIGZyb21WYWx1ZSxcbiAgdG9WYWx1ZSxcbiAgY2l0aXplbnNoaXBWYWx1ZSxcbiAgbG9hZENpdGl6ZW5zaGlwcyxcbiAgZWFybHlDaGVja2luVmFsdWUgPSBudWxsLFxuICBsYXRlQ2hlY2tvdXRWYWx1ZSA9IG51bGwsXG4gIGZyZWVDYW5jZWxsYXRpb25WYWx1ZSA9IGZhbHNlLFxuICBtZWFsc1ZhbHVlID0gW10sXG4gIGluUG9wdXAsXG4gIGlzRGVtbyxcbiAgaGlkZURlc3RpbmF0aW9uLFxuICBpc0IyQixcbiAgaXNDaXRpemVuc2hpcFJlcXVpcmVkLFxuICBpc0VjbGNTZWFyY2hFbmFibGVkLFxuICByb290RWxlbWVudCwgLy8gZm9yIGNvcnJlY3QgcG9wdXAgc2Nyb2xsXG4gIGlzTmFycm93LFxuICBpc011bHRpcm9vbSxcbiAgZWNsY1RpbWVzTGlzdCxcbiAgaXNFeHRlbnNpb24sXG59KSA9PiB7XG4gIGNvbnN0IHdyYXBwZXJSZWYgPSB1c2VSZWYobnVsbCk7XG5cbiAgY29uc3QgW25lZWRTaG93RXJyb3JzLCBzZXROZWVkU2hvd0Vycm9yc10gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgLy8gdXNlU3RhdGUgaXMgZm9yIG9wdGltaXphdGlvblxuICBjb25zdCBbZnJvbV0gPSB1c2VTdGF0ZShzdGFydE9mRGF5KG5ldyBEYXRlKCkpKTtcbiAgY29uc3QgW3RvXSA9IHVzZVN0YXRlKGFkZERheXMoYWRkWWVhcnMoZnJvbSwgMSksIC0xKSk7XG4gIGNvbnN0IG1heFJhbmdlID0gMzA7XG5cbiAgY29uc3QgaW5pdGlhbFJvb21zID0gW3tcbiAgICBhZHVsdHM6IDIsXG4gICAga2lkczogW10sXG4gIH1dO1xuXG4gIGNvbnN0IFtyYW5nZVN0YXJ0LCBzZXRSYW5nZVN0YXJ0XSA9IHVzZVN0YXRlKGZyb21WYWx1ZSk7XG4gIGNvbnN0IFtyYW5nZUVuZCwgc2V0UmFuZ2VFbmRdID0gdXNlU3RhdGUodG9WYWx1ZSk7XG5cbiAgY29uc3QgW3JlZ2lvbiwgc2V0UmVnaW9uXSA9IHVzZVN0YXRlKHJlZ2lvblZhbHVlKTtcbiAgY29uc3QgW2d1ZXN0cywgc2V0R3Vlc3RzXSA9IHVzZVN0YXRlKHJvb21zVmFsdWUgfHwgaW5pdGlhbFJvb21zKTtcbiAgY29uc3QgW2NpdGl6ZW5zaGlwLCBzZXRDaXRpemVuc2hpcF0gPSB1c2VTdGF0ZShjaXRpemVuc2hpcFZhbHVlKTtcbiAgY29uc3QgW2ZyZWVDYW5jZWxsYXRpb24sIHNldEZyZWVDYW5jZWxsYXRpb25dID0gdXNlU3RhdGUoZnJlZUNhbmNlbGxhdGlvblZhbHVlKTtcbiAgY29uc3QgW2Vhcmx5Q2hlY2tpbiwgc2V0RWFybHlDaGVja2luXSA9IHVzZVN0YXRlKGVhcmx5Q2hlY2tpblZhbHVlKTtcbiAgY29uc3QgW2xhdGVDaGVja291dCwgc2V0TGF0ZUNoZWNrb3V0XSA9IHVzZVN0YXRlKGxhdGVDaGVja291dFZhbHVlKTtcbiAgY29uc3QgW21lYWxzLCBzZXRNZWFsc10gPSB1c2VTdGF0ZShtZWFsc1ZhbHVlIHx8IFtdKTtcblxuICBjb25zdCBbZGVzdGluYXRpb25JbnB1dFJlZiwgc2V0RGVzdGluYXRpb25JbnB1dFJlZl0gPSB1c2VTdGF0ZShudWxsKTtcblxuICBjb25zdCBbc2hvd0V4dHJhUGFyYW1zLCBzZXRTaG93RXh0cmFQYXJhbXNdID0gdXNlU3RhdGUoISFjaXRpemVuc2hpcCk7XG5cbiAgdXNlRWZmZWN0KFxuICAgICgpID0+IG9uQ2hhbmdlKGdldFZhbHVlKCkpLFxuICAgIFtcbiAgICAgIHJhbmdlU3RhcnQsXG4gICAgICByYW5nZUVuZCxcbiAgICAgIHJlZ2lvbixcbiAgICAgIGd1ZXN0cyxcbiAgICAgIGNpdGl6ZW5zaGlwLFxuICAgICAgZnJlZUNhbmNlbGxhdGlvbixcbiAgICAgIGVhcmx5Q2hlY2tpbixcbiAgICAgIGxhdGVDaGVja291dCxcbiAgICAgIG1lYWxzLFxuICAgIF1cbiAgKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpc0IyQikge1xuICAgICAgbG9hZENpdGl6ZW5zaGlwcygpO1xuICAgIH1cbiAgfSwgW10pO1xuXG4gIGNvbnN0IG9uUmFuZ2VDaGFuZ2UgPSB1c2VDYWxsYmFjaygoeyByYW5nZVN0YXJ0LCByYW5nZUVuZCB9KSA9PiB7XG4gICAgc2V0UmFuZ2VTdGFydChyYW5nZVN0YXJ0KTtcbiAgICBzZXRSYW5nZUVuZChyYW5nZUVuZCk7XG4gIH0sIFtyYW5nZVN0YXJ0LCByYW5nZUVuZF0pO1xuXG4gIGNvbnN0IGludGwgPSB1c2VJbnRsKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ3dyYXBwZXInKSh7IGluUG9wdXAsIGlzQjJCIH0sIGNsYXNzTmFtZSl9IHJlZj17d3JhcHBlclJlZn0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2Rlc3RpbmF0aW9uJykoeyBpblBvcHVwLCBoaWRkZW46IGhpZGVEZXN0aW5hdGlvbiwgbmFycm93OiBpc05hcnJvdyB9KX0+XG4gICAgICAgIDxEZXN0aW5hdGlvblxuICAgICAgICAgIHZhbHVlPXtyZWdpb259XG4gICAgICAgICAgb25DaGFuZ2U9e3NldFJlZ2lvbn1cbiAgICAgICAgICBpblBvcHVwPXtpblBvcHVwfVxuICAgICAgICAgIGlzRGVtbz17aXNEZW1vfVxuICAgICAgICAgIHNldElucHV0UmVmPXtzZXREZXN0aW5hdGlvbklucHV0UmVmfVxuICAgICAgICAgIHJvb3RFbGVtZW50PXtyb290RWxlbWVudH1cbiAgICAgICAgICBzZWFyY2hGb3JtUmVmPXt3cmFwcGVyUmVmfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2RhdGVzJykoeyBpblBvcHVwIH0pfT5cbiAgICAgICAgPERhdGVwaWNrZXJcbiAgICAgICAgICB7Li4ueyBmcm9tLCB0bywgbWF4UmFuZ2UsIHJhbmdlU3RhcnQsIHJhbmdlRW5kLCBvblJhbmdlQ2hhbmdlLCByb290RWxlbWVudCwgaW5Qb3B1cCB9fVxuICAgICAgICAgIGlzUmFuZ2VTZWxlY3Q9e3RydWV9XG4gICAgICAgICAgbGFiZWxGcm9tPXtpbnRsLmZvcm1hdE1lc3NhZ2UobWVzc2FnZXMuY2hlY2tpbil9XG4gICAgICAgICAgbGFiZWxUbz17aW50bC5mb3JtYXRNZXNzYWdlKG1lc3NhZ2VzLmNoZWNrb3V0KX1cbiAgICAgICAgICBpc0RlbW89e2lzRGVtb31cbiAgICAgICAgICBzZWFyY2hGb3JtUmVmPXt3cmFwcGVyUmVmfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2d1ZXN0cycpKHsgaW5Qb3B1cCwgaXNEZW1vIH0pfT5cbiAgICAgICAgPEd1ZXN0c1xuICAgICAgICAgIHZhbHVlPXtndWVzdHN9XG4gICAgICAgICAgb25DaGFuZ2U9e3NldEd1ZXN0c31cbiAgICAgICAgICBpblBvcHVwPXtpblBvcHVwfVxuICAgICAgICAgIGlzRGVtbz17aXNEZW1vfVxuICAgICAgICAgIHJvb3RFbGVtZW50PXtyb290RWxlbWVudH1cbiAgICAgICAgICBzZWFyY2hGb3JtUmVmPXt3cmFwcGVyUmVmfVxuICAgICAgICAgIGlzQjJCPXtpc0IyQn1cbiAgICAgICAgICBpc011bHRpcm9vbT17aXNNdWx0aXJvb219XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnc3VibWl0JykoeyBpblBvcHVwLCBpc0IyQiB9KX0+XG4gICAgICAgIDxCdXR0b24gb25DbGljaz17c3VibWl0fSBzaXplPVwibVwiIHdpZGU9e3RydWV9PlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlzRGVtb1xuICAgICAgICAgICAgICA/IGludGwuZm9ybWF0TWVzc2FnZShtZXNzYWdlcy5kZW1vU2VhcmNoKVxuICAgICAgICAgICAgICA6IGludGwuZm9ybWF0TWVzc2FnZShtZXNzYWdlcy5zZWFyY2gpXG4gICAgICAgICAgfVxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgICAge1xuICAgICAgICAhaXNCMkJcbiAgICAgICAgJiYgPEIyQ0V4dHJhXG4gICAgICAgICAgaW5Qb3B1cD17aW5Qb3B1cH1cbiAgICAgICAgICBzaG91bGRTaG93Q29tcGFyZXRvPXtzaG91bGRTaG93Q29tcGFyZXRvfVxuICAgICAgICAgIG9uQ29tcGFyZXRvQ2hhbmdlPXtvbkNvbXBhcmV0b0NoYW5nZX1cbiAgICAgICAgICBjb21wYXJldG9WYWx1ZT17Y29tcGFyZXRvVmFsdWV9XG4gICAgICAgIC8+XG4gICAgICB9XG4gICAgICB7XG4gICAgICAgICFpc0V4dGVuc2lvbiAmJiAoaXNCMkIgJiYgIWlzRGVtbylcbiAgICAgICAgJiYgPGRpdiBjbGFzc05hbWU9e2VtKCdleHRyYVBhcmFtc1N3aXRjaGVyJykoKX0+XG4gICAgICAgICAgPEV4dHJhUGFyYW1zU3dpdGNoZXJcbiAgICAgICAgICAgIHNob3dFeHRyYVBhcmFtcz17c2hvd0V4dHJhUGFyYW1zfVxuICAgICAgICAgICAgc2V0U2hvd0V4dHJhUGFyYW1zPXtzZXRTaG93RXh0cmFQYXJhbXN9XG4gICAgICAgICAgICBpblBvcHVwPXtpblBvcHVwfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgfVxuICAgICAge1xuICAgICAgICAoaXNFeHRlbnNpb24gfHwgKGlzQjJCICYmIHNob3dFeHRyYVBhcmFtcyAmJiAhaXNEZW1vKSlcbiAgICAgICAgJiYgPEIyQkV4dHJhXG4gICAgICAgICAgaW5Qb3B1cD17aW5Qb3B1cH1cbiAgICAgICAgICBpc0NpdGl6ZW5zaGlwUmVxdWlyZWQ9e2lzQ2l0aXplbnNoaXBSZXF1aXJlZH1cbiAgICAgICAgICBpc05hdGRpc0NyaXRpY2FsPXtyZWdpb24gJiYgcmVnaW9uLmlzTmF0ZGlzQ3JpdGljYWx9XG4gICAgICAgICAgaXNFY2xjU2VhcmNoRW5hYmxlZD17aXNFY2xjU2VhcmNoRW5hYmxlZH1cbiAgICAgICAgICBjaXRpemVuc2hpcD17Y2l0aXplbnNoaXB9XG4gICAgICAgICAgc2V0Q2l0aXplbnNoaXA9e3NldENpdGl6ZW5zaGlwfVxuICAgICAgICAgIGZyZWVDYW5jZWxsYXRpb249e2ZyZWVDYW5jZWxsYXRpb259XG4gICAgICAgICAgc2V0RnJlZUNhbmNlbGxhdGlvbj17c2V0RnJlZUNhbmNlbGxhdGlvbn1cbiAgICAgICAgICBlYXJseUNoZWNraW49e2Vhcmx5Q2hlY2tpbn1cbiAgICAgICAgICBzZXRFYXJseUNoZWNraW49e3NldEVhcmx5Q2hlY2tpbn1cbiAgICAgICAgICBsYXRlQ2hlY2tvdXQ9e2xhdGVDaGVja291dH1cbiAgICAgICAgICBzZXRMYXRlQ2hlY2tvdXQ9e3NldExhdGVDaGVja291dH1cbiAgICAgICAgICBtZWFscz17bWVhbHN9XG4gICAgICAgICAgc2V0TWVhbHM9e3NldE1lYWxzfVxuICAgICAgICAgIGVjbGNUaW1lc0xpc3Q9e2VjbGNUaW1lc0xpc3R9XG4gICAgICAgICAgbmVlZFNob3dFcnJvcnM9e25lZWRTaG93RXJyb3JzfVxuICAgICAgICAgIHJvb3RFbGVtZW50PXtyb290RWxlbWVudH1cbiAgICAgICAgICBzZWFyY2hGb3JtUmVmPXt3cmFwcGVyUmVmfVxuICAgICAgICAvPlxuICAgICAgfVxuICAgIDwvZGl2PlxuICApXG5cbiAgZnVuY3Rpb24gc3VibWl0KCkge1xuICAgIHNldE5lZWRTaG93RXJyb3JzKGZhbHNlKTtcblxuICAgIGlmICghcmVnaW9uKSB7XG4gICAgICBkZXN0aW5hdGlvbklucHV0UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNOZWVkQ2l0aXplbnNoaXAoKSkge1xuICAgICAgc2V0U2hvd0V4dHJhUGFyYW1zKHRydWUpO1xuICAgICAgc2V0TmVlZFNob3dFcnJvcnModHJ1ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9uU3VibWl0KSB7XG4gICAgICBvblN1Ym1pdChnZXRWYWx1ZSgpKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBndWVzdHMsXG4gICAgICByZWdpb24sXG4gICAgICBmcmVlQ2FuY2VsbGF0aW9uLFxuICAgICAgZWFybHlDaGVja2luLFxuICAgICAgbGF0ZUNoZWNrb3V0LFxuICAgICAgbWVhbHMsXG4gICAgICBjaXRpemVuc2hpcCxcbiAgICAgIGZyb206IHJhbmdlU3RhcnQsXG4gICAgICB0bzogcmFuZ2VFbmQsXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzTmVlZENpdGl6ZW5zaGlwKCkge1xuICAgIGlmICghaXNCMkIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBpc05hdGRpc0NyaXRpY2FsID0gcmVnaW9uICYmIHJlZ2lvbi5pc05hdGRpc0NyaXRpY2FsO1xuXG4gICAgcmV0dXJuICFjaXRpemVuc2hpcFxuICAgICAgJiYgKGlzQ2l0aXplbnNoaXBSZXF1aXJlZCB8fCBpc05hdGRpc0NyaXRpY2FsKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHsgY2l0aXplbnNoaXAgfSwgb3duUHJvcHMpIHtcbiAgcmV0dXJuIHtcbiAgICBjaXRpemVuc2hpcFZhbHVlOiBvd25Qcm9wcy5jaXRpemVuc2hpcFZhbHVlXG4gICAgICB8fCAoY2l0aXplbnNoaXAudmFsdWUgJiYgY2l0aXplbnNoaXAudmFsdWUuY29kZSksXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCkge1xuICByZXR1cm4ge1xuICAgIGxvYWRDaXRpemVuc2hpcHM6ICgpID0+IHtkaXNwYXRjaChjb3VudHJpZXNBY3Rpb25zLmxvYWQoKSl9LFxuICB9O1xufVxuXG5jb25zdCBDb25uZWN0ZWRTZWFyY2hGb3JtID0gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykoU2VhcmNoRm9ybSk7XG5cbmNvbnN0IFdyYXBwZWRTZWFyY2hGb3JtID0gKHByb3BzKSA9PiAoXG4gICAgPFJlZHV4ZWQ+XG4gICAgICA8Q29ubmVjdGVkU2VhcmNoRm9ybSB7Li4ucHJvcHN9IC8+XG4gICAgPC9SZWR1eGVkPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgV3JhcHBlZFNlYXJjaEZvcm07XG4iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gJy4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzJztcbmltcG9ydCBhZGRNb250aHMgZnJvbSAnLi4vYWRkTW9udGhzL2luZGV4LmpzJztcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnO1xuLyoqXG4gKiBAbmFtZSBhZGRZZWFyc1xuICogQGNhdGVnb3J5IFllYXIgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIHllYXJzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIHllYXJzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIHllYXJzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIHllYXJzIGFkZGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFkZCA1IHllYXJzIHRvIDEgU2VwdGVtYmVyIDIwMTQ6XG4gKiB2YXIgcmVzdWx0ID0gYWRkWWVhcnMobmV3IERhdGUoMjAxNCwgOCwgMSksIDUpXG4gKiAvLz0+IFN1biBTZXAgMDEgMjAxOSAwMDowMDowMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZFllYXJzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gYWRkTW9udGhzKGRpcnR5RGF0ZSwgYW1vdW50ICogMTIpO1xufSIsImltcG9ydCB7IE1lc3NhZ2VzIH0gZnJvbSAnQGludGVyZmFjZXMvaW50ZXJmYWNlcyc7XG5cbmltcG9ydCB7IExhbmd1YWdlIH0gZnJvbSAnQGNvbnN0YW50cy9sYW5ndWFnZXMnO1xuXG5pbXBvcnQgQXV0aE1lc3NhZ2VzIGZyb20gJ0Bjb21wb25lbnRzL0F1dGgvbWVzc2FnZXMnO1xuaW1wb3J0IExhbmd1YWdlTWVzc2FnZXMgZnJvbSAnQGNvbXBvbmVudHMvTGFuZ3VhZ2VTd2l0Y2hlci9tZXNzYWdlcyc7XG5pbXBvcnQgUHJpY2VTZXR0aW5nc01lc3NhZ2VzIGZyb20gJ0Bjb21wb25lbnRzL1ByaWNlU2V0dGluZ3MvbWVzc2FnZXMnO1xuaW1wb3J0IFNldHRpbmdzTWVzc2FnZXMgZnJvbSAnQGNvbXBvbmVudHMvU2V0dGluZ3MvbWVzc2FnZXMnO1xuaW1wb3J0IFNpZ25Jbk1lc3NhZ2VzIGZyb20gJ0Bjb21wb25lbnRzL1NpZ25Jbi9tZXNzYWdlcyc7XG5cbmNvbnN0IG1lc3NhZ2VzOiBNZXNzYWdlcyA9IHtcbiAgW0xhbmd1YWdlLkVOXToge1xuICAgIGxhbmc6IExhbmd1YWdlLkVOLFxuICAgIG1lc3NhZ2VzOiB7XG4gICAgICAnQjJCRXh0cmEuZnJlZUNhbmNlbGxhdGlvbic6ICdGcmVlIGNhbmNlbGxhdGlvbicsXG4gICAgICAnQjJCRXh0cmEubWVhbHMuYWxsSW5jbHVzaXZlJzogJ0FsbCBJbmNsdXNpdmUnLFxuICAgICAgJ0IyQkV4dHJhLm1lYWxzLmJyZWFrZmFzdCc6ICdCcmVha2Zhc3QnLFxuICAgICAgJ0IyQkV4dHJhLm1lYWxzLmZ1bGxCb2FyZCc6XG4gICAgICAgICdGdWxsIEJvYXJkIChicmVha2Zhc3QsIGx1bmNoLCBhbmQgZGlubmVyIHdpdGggc29mdCBkcmlua3MpJyxcbiAgICAgICdCMkJFeHRyYS5tZWFscy5oYWxmQm9hcmQnOiAnSGFsZiBCb2FyZCAoYnJlYWtmYXN0IGFuZCBkaW5uZXIpJyxcbiAgICAgICdCMkJFeHRyYS5tZWFscy5yb29tT25seSc6ICdSb29tIG9ubHknLFxuICAgICAgJ2NpdGl6ZW5zaGlwLmxhYmVsJzogXCJHdWVzdHMnIGNpdGl6ZW5zaGlwXCIsXG4gICAgICAnY2l0aXplbnNoaXAubGFiZWxSZXF1aXJlZCc6XG4gICAgICAgIFwiR3Vlc3RzJyBjaXRpemVuc2hpcCAocmVxdWlyZWQgZm9yIHRoaXMgZGlyZWN0aW9uKVwiLFxuICAgICAgJ2NpdGl6ZW5zaGlwLnBsYWNlaG9sZGVyJzogJ0Nob29zZSB5b3VyIGNpdGl6ZW5zaGlwJyxcbiAgICAgICdkYXRlcGlja2VyLmNoZWNraW4nOiAnQ2hlY2staW4nLFxuICAgICAgJ2RhdGVwaWNrZXIuY2hlY2tvdXQnOiAnQ2hlY2stb3V0JyxcbiAgICAgICdkZXN0aW5hdGlvbi5sYWJlbCc6ICdEZXN0aW5hdGlvbicsXG4gICAgICAnZGVzdGluYXRpb24ucGxhY2Vob2xkZXInOiAnQ2l0eSwgaG90ZWwgb3IgYWlycG9ydCcsXG4gICAgICAnRGVzdGluYXRpb24uU3VnZ2VzdC5ob3RlbHMnOiAnSG90ZWxzJyxcbiAgICAgICdEZXN0aW5hdGlvbi5TdWdnZXN0LnJlZ2lvbnMnOiAnUmVnaW9ucycsXG4gICAgICAnZ3Vlc3RzLmd1ZXN0c0NvdW50JzogYFxuICAgICAgICB7Z3Vlc3RzQ291bnR9IHtndWVzdHNDb3VudCxcbiAgICAgICAgIHBsdXJhbCxcbiAgICAgICAgIG9uZSB7Z3Vlc3R9XG4gICAgICAgICBvdGhlciB7Z3Vlc3RzfVxuICAgICAgIH1gLFxuICAgICAgJ2d1ZXN0cy5hZHVsdHNMYWJlbCc6ICdBZHVsdHMnLFxuICAgICAgJ2d1ZXN0cy5ib29rTW9yZUJ0bic6ICdCb29rIG1vcmUgcm9vbXMnLFxuICAgICAgJ2d1ZXN0cy5kb25lQnRuJzogJ0RvbmUnLFxuICAgICAgJ2d1ZXN0cy5raWRBZ2UnOiBcIkNoaWxkJ3MgYWdlXCIsXG4gICAgICAnZ3Vlc3RzLmtpZHNMYWJlbCc6ICdDaGlsZHJlbicsXG4gICAgICAnZ3Vlc3RzLnBsdXNSb29tQnRuJzogJ1Jvb20nLFxuICAgICAgJ2d1ZXN0cy5yZW1vdmUnOiAnUmVtb3ZlJyxcbiAgICAgICdndWVzdHMucm9vbU51bWJlcic6IGBcbiAgICAgICAge3Jvb21OdW1iZXIsIHNlbGVjdG9yZGluYWwsXG4gICAgICAgICAgb25lIHsjc3R9XG4gICAgICAgICAgdHdvIHsjbmR9XG4gICAgICAgICAgZmV3IHsjcmR9XG4gICAgICAgICAgb3RoZXIgeyN0aH1cbiAgICAgICAgfSByb29tYCxcbiAgICAgICdndWVzdHMucm9vbXNDb3VudCc6IGBcbiAgICAgICAge3Jvb21zQ291bnR9IHtyb29tc0NvdW50LCBwbHVyYWwsXG4gICAgICAgICBvbmUge3Jvb219XG4gICAgICAgICBmZXcge3Jvb21zfVxuICAgICAgICAgb3RoZXIge3Jvb21zfVxuICAgICAgIH0gZm9yYCxcbiAgICAgICdzZWFyY2hGb3JtLmNoZWNraW4nOiAnQ2hlY2staW4nLFxuICAgICAgJ3NlYXJjaEZvcm0uY2hlY2tvdXQnOiAnQ2hlY2stb3V0JyxcbiAgICAgICdzZWFyY2hGb3JtLmRlbW9TZWFyY2gnOiAnU2VhcmNoIG9uIFJhdGVIYXdrJyxcbiAgICAgICdzZWFyY2hGb3JtLnNlYXJjaCc6ICdTZWFyY2gnLFxuICAgICAgJ29mZmVyLnRpdGxlRmFpbHVyZSc6XG4gICAgICAgICdBbGFzLCB3ZSBjYW5ub3Qgb2ZmZXIgeW91IGEgbG93ZXIgcHJpY2UgZm9yIHRoaXMgaG90ZWwnLFxuICAgICAgJ29mZmVyLmRlc2NyaXB0aW9uRmFpbHVyZSc6XG4gICAgICAgICdCdXQgeW91IGNhbiB0YWtlIGEgbG9vayBhdCBvdGhlciBob3RlbHMgaW4gdGhpcyBkaXN0cmljdCBvbiBSYXRlSGF3ayEnLFxuICAgICAgLi4uQXV0aE1lc3NhZ2VzW0xhbmd1YWdlLkVOXS5tZXNzYWdlcyxcbiAgICAgIC4uLkxhbmd1YWdlTWVzc2FnZXNbTGFuZ3VhZ2UuRU5dLm1lc3NhZ2VzLFxuICAgICAgLi4uU2V0dGluZ3NNZXNzYWdlc1tMYW5ndWFnZS5FTl0ubWVzc2FnZXMsXG4gICAgICAuLi5TaWduSW5NZXNzYWdlc1tMYW5ndWFnZS5FTl0ubWVzc2FnZXMsXG4gICAgICAuLi5QcmljZVNldHRpbmdzTWVzc2FnZXNbTGFuZ3VhZ2UuRU5dLm1lc3NhZ2VzLFxuICAgIH0sXG4gIH0sXG4gIFtMYW5ndWFnZS5SVV06IHtcbiAgICBsYW5nOiBMYW5ndWFnZS5SVSxcbiAgICBtZXNzYWdlczoge1xuICAgICAgJ0IyQkV4dHJhLmZyZWVDYW5jZWxsYXRpb24nOiAn0JHQtdGB0L/Qu9Cw0YLQvdCw0Y8g0L7RgtC80LXQvdCwJyxcbiAgICAgICdCMkJFeHRyYS5tZWFscy5hbGxJbmNsdXNpdmUnOiAn0JLRgdGRINCy0LrQu9GO0YfQtdC90L4nLFxuICAgICAgJ0IyQkV4dHJhLm1lYWxzLmJyZWFrZmFzdCc6ICfQl9Cw0LLRgtGA0LDQuicsXG4gICAgICAnQjJCRXh0cmEubWVhbHMuZnVsbEJvYXJkJzpcbiAgICAgICAgJ9Cf0L7Qu9C90YvQuSDQv9Cw0L3RgdC40L7QvSAo0LfQsNCy0YLRgNCw0LosINC+0LHQtdC0INC4INGD0LbQuNC9INGBINCx0LXQt9Cw0LvQutC+0LPQvtC70YzQvdGL0LzQuCDQvdCw0L/QuNGC0LrQsNC80LgpJyxcbiAgICAgICdCMkJFeHRyYS5tZWFscy5oYWxmQm9hcmQnOiAn0J/QvtC70YPQv9Cw0L3RgdC40L7QvSAo0LfQsNCy0YLRgNCw0Log0Lgg0YPQttC40L0pJyxcbiAgICAgICdCMkJFeHRyYS5tZWFscy5yb29tT25seSc6ICfQkdC10Lcg0L/QuNGC0LDQvdC40Y8nLFxuICAgICAgJ2NpdGl6ZW5zaGlwLmxhYmVsJzogJ9CT0YDQsNC20LTQsNC90YHRgtCy0L4g0LPQvtGB0YLQtdC5JyxcbiAgICAgICdjaXRpemVuc2hpcC5sYWJlbFJlcXVpcmVkJzpcbiAgICAgICAgJ9CT0YDQsNC20LTQsNC90YHRgtCy0L4g0LPQvtGB0YLQtdC5ICjQvtCx0Y/Qt9Cw0YLQtdC70YzQvdC+INC00LvRjyDRjdGC0L7Qs9C+INC90LDQv9GA0LDQstC70LXQvdC40Y8pJyxcbiAgICAgICdjaXRpemVuc2hpcC5wbGFjZWhvbGRlcic6ICfQktGL0LHQtdGA0LjRgtC1INCz0YDQsNC20LTQsNC90YHRgtCy0L4nLFxuICAgICAgJ2RhdGVwaWNrZXIuY2hlY2tpbic6ICfQl9Cw0LXQt9C0JyxcbiAgICAgICdkYXRlcGlja2VyLmNoZWNrb3V0JzogJ9CS0YvQtdC30LQnLFxuICAgICAgJ2Rlc3RpbmF0aW9uLmxhYmVsJzogJ9Cd0LDQv9GA0LDQstC70LXQvdC40LUnLFxuICAgICAgJ2Rlc3RpbmF0aW9uLnBsYWNlaG9sZGVyJzogJ9CT0L7RgNC+0LQsINC+0YLQtdC70Ywg0LjQu9C4INCw0Y3RgNC+0L/QvtGA0YInLFxuICAgICAgJ0Rlc3RpbmF0aW9uLlN1Z2dlc3QuaG90ZWxzJzogJ9Ce0YLQtdC70LgnLFxuICAgICAgJ0Rlc3RpbmF0aW9uLlN1Z2dlc3QucmVnaW9ucyc6ICfQoNC10LPQuNC+0L3RiycsXG4gICAgICAnZ3Vlc3RzLmd1ZXN0c0NvdW50JzogYFxuICAgICAgICB7Z3Vlc3RzQ291bnR9IHtndWVzdHNDb3VudCwgcGx1cmFsLFxuICAgICAgICAgIG9uZSB70LPQvtGB0YLRj31cbiAgICAgICAgICBvdGhlciB70LPQvtGB0YLQtdC5fVxuICAgICAgICB9YCxcbiAgICAgICdndWVzdHMuYWR1bHRzTGFiZWwnOiAn0JLQt9GA0L7RgdC70YvQtScsXG4gICAgICAnZ3Vlc3RzLmJvb2tNb3JlQnRuJzogJ9CX0LDQsdGA0L7QvdC40YDQvtCy0LDRgtGMINCx0L7Qu9GM0YjQtSDQvdC+0LzQtdGA0L7QsicsXG4gICAgICAnZ3Vlc3RzLmRvbmVCdG4nOiAn0JPQvtGC0L7QstC+JyxcbiAgICAgICdndWVzdHMua2lkQWdlJzogJ9CS0L7Qt9GA0LDRgdGCINGA0LXQsdGR0L3QutCwJyxcbiAgICAgICdndWVzdHMua2lkc0xhYmVsJzogJ9CU0LXRgtC4JyxcbiAgICAgICdndWVzdHMucGx1c1Jvb21CdG4nOiAn0J3QvtC80LXRgCcsXG4gICAgICAnZ3Vlc3RzLnJlbW92ZSc6ICfQo9C00LDQu9C40YLRjCcsXG4gICAgICAnZ3Vlc3RzLnJvb21OdW1iZXInOiAne3Jvb21OdW1iZXJ9INC90L7QvNC10YAnLFxuICAgICAgJ2d1ZXN0cy5yb29tc0NvdW50JzogYFxuICAgICAgICB7cm9vbXNDb3VudH0ge3Jvb21zQ291bnQsIHBsdXJhbCxcbiAgICAgICAgICBvbmUge9C90L7QvNC10YB9XG4gICAgICAgICAgZmV3IHvQvdC+0LzQtdGA0LB9XG4gICAgICAgICAgb3RoZXIge9C90L7QvNC10YDQvtCyfVxuICAgICAgICB9INC00LvRj2AsXG4gICAgICAnc2VhcmNoRm9ybS5jaGVja2luJzogJ9CX0LDQtdC30LQnLFxuICAgICAgJ3NlYXJjaEZvcm0uY2hlY2tvdXQnOiAn0JLRi9C10LfQtCcsXG4gICAgICAnc2VhcmNoRm9ybS5kZW1vU2VhcmNoJzogJ9Cd0LDQudGC0Lgg0L3QsCBSYXRlSGF3aycsXG4gICAgICAnc2VhcmNoRm9ybS5zZWFyY2gnOiAn0J3QsNC50YLQuCcsXG4gICAgICAnb2ZmZXIudGl0bGVGYWlsdXJlJzpcbiAgICAgICAgJ9Cj0LLRiywg0L3QsCDRjdGC0L7RgiDQvtGC0LXQu9GMINC80Ysg0L3QtSDQvNC+0LbQtdC8INC/0YDQtdC00LvQvtC20LjRgtGMINGG0LXQvdGLINC90LjQttC1JyxcbiAgICAgICdvZmZlci5kZXNjcmlwdGlvbkZhaWx1cmUnOlxuICAgICAgICAn0J3QviDQstGLINC80L7QttC10YLQtSDQv9C+0YHQvNC+0YLRgNC10YLRjCDQvdCwIFJhdGVIYXdrINC00YDRg9Cz0LjQtSDQvtGC0LXQu9C4INCyINGN0YLQvtC8INGA0LXQs9C40L7QvdC1IScsXG4gICAgICAuLi5BdXRoTWVzc2FnZXNbTGFuZ3VhZ2UuUlVdLm1lc3NhZ2VzLFxuICAgICAgLi4uTGFuZ3VhZ2VNZXNzYWdlc1tMYW5ndWFnZS5SVV0ubWVzc2FnZXMsXG4gICAgICAuLi5TZXR0aW5nc01lc3NhZ2VzW0xhbmd1YWdlLlJVXS5tZXNzYWdlcyxcbiAgICAgIC4uLlNpZ25Jbk1lc3NhZ2VzW0xhbmd1YWdlLlJVXS5tZXNzYWdlcyxcbiAgICAgIC4uLlByaWNlU2V0dGluZ3NNZXNzYWdlc1tMYW5ndWFnZS5SVV0ubWVzc2FnZXMsXG4gICAgfSxcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1lc3NhZ2VzO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcbmltcG9ydCB7IGFkZERheXMsIGZvcm1hdCwgc3RhcnRPZkRheSB9IGZyb20gJ2RhdGUtZm5zJztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgSW50bFByb3ZpZGVyLCB1c2VJbnRsIH0gZnJvbSAncmVhY3QtaW50bCc7XG5pbXBvcnQgeyBicm93c2VyIH0gZnJvbSAnd2ViZXh0ZW5zaW9uLXBvbHlmaWxsLXRzJztcblxuaW1wb3J0IHsgQ29tbWlzc2lvbkluZm8gfSBmcm9tICdAaW50ZXJmYWNlcy9pbnRlcmZhY2VzJztcblxuaW1wb3J0IHsgQnJvd3NlciB9IGZyb20gJ0Bjb25zdGFudHMvYnJvd3Nlcic7XG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgY29tbWFuZHMgZnJvbSAnQGNvbnN0YW50cy9jb21tYW5kcyc7XG5pbXBvcnQgeyBDb21wZXRpdG9yIH0gZnJvbSAnQGNvbnN0YW50cy9jb21wZXRpdG9ycyc7XG5pbXBvcnQgeyBCUkFORCwgVkVSU0lPTiB9IGZyb20gJ0Bjb25zdGFudHMvY29uc3RhbnRzJztcbmltcG9ydCB7IExhbmd1YWdlIH0gZnJvbSAnQGNvbnN0YW50cy9sYW5ndWFnZXMnO1xuaW1wb3J0IHsgU3RvcmFnZSB9IGZyb20gJ0Bjb25zdGFudHMvc3RvcmFnZSc7XG5pbXBvcnQgdXJscyBmcm9tICdAY29uc3RhbnRzL3VybHMnO1xuXG5pbXBvcnQgdXNlRnVubmVsIGZyb20gJ0Bob29rcy91c2VGdW5uZWwnO1xuXG5pbXBvcnQgQXV0aCBmcm9tICdAY29tcG9uZW50cy9BdXRoL0F1dGgnO1xuaW1wb3J0IEJ1dHRvbkljb24gZnJvbSAnQGNvbXBvbmVudHMvQnV0dG9uSWNvbi9CdXR0b25JY29uJztcbmltcG9ydCBJY29uQ3Jvc3MgZnJvbSAnQGNvbXBvbmVudHMvSWNvbi9JY29uQ3Jvc3MnO1xuaW1wb3J0IExhbmd1YWdlU3dpdGNoZXIgZnJvbSAnQGNvbXBvbmVudHMvTGFuZ3VhZ2VTd2l0Y2hlci9MYW5ndWFnZVN3aXRjaGVyJztcbmltcG9ydCBMb2dvIGZyb20gJ0Bjb21wb25lbnRzL0xvZ28vTG9nbyc7XG5pbXBvcnQgUHJpY2VTZXR0aW5ncywgeyBTaXplIH0gZnJvbSAnQGNvbXBvbmVudHMvUHJpY2VTZXR0aW5ncy9QcmljZVNldHRpbmdzJztcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCB7IGFjdGlvbnMgYXMgbDEwbkFjdGlvbnMgfSBmcm9tICdAY29tcG9uZW50cy9TZWFyY2hGb3JtL3JlZHVjZXJzL2wxMG4vaW5kZXgnO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IFNlYXJjaEZvcm0gZnJvbSAnQGNvbXBvbmVudHMvU2VhcmNoRm9ybS9TZWFyY2hGb3JtJztcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBzdG9yZSBmcm9tICdAY29tcG9uZW50cy9TZWFyY2hGb3JtL3N0b3JlJztcbmltcG9ydCBTZXR0aW5ncyBmcm9tICdAY29tcG9uZW50cy9TZXR0aW5ncy9TZXR0aW5ncyc7XG5pbXBvcnQgVGhlbWUgZnJvbSAnQGNvbXBvbmVudHMvVGhlbWUvVGhlbWUnO1xuaW1wb3J0IFRpdGxlIGZyb20gJ0Bjb21wb25lbnRzL1RpdGxlL1RpdGxlJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICdAY3NzL3BvcHVwLmNzcyc7XG5pbXBvcnQgJ0Bjc3MvZm9udHMuY3NzJztcblxuaW1wb3J0IExhbmd1YWdlQ29udGV4dCBmcm9tICdAaGVscGVycy9MYW5ndWFnZUNvbnRleHQnO1xuaW1wb3J0IHsgaW5pdFNlbnRyeSB9IGZyb20gJ0BoZWxwZXJzL3NlbnRyeSc7XG5pbXBvcnQgeyBnZXRGcm9tU3RvcmFnZSB9IGZyb20gJ0BoZWxwZXJzL3N0b3JhZ2UnO1xuaW1wb3J0IHsgZ2V0Q3VycmVudFRhYiB9IGZyb20gJ0BoZWxwZXJzL3RhYnMnO1xuaW1wb3J0IHsgZ2V0QnJvd3Nlck5hbWUsIGdldFZlcnNpb24gfSBmcm9tICdAaGVscGVycy91dGlscyc7XG5cbmltcG9ydCBtZXNzYWdlcyBmcm9tICdAY29tcG9uZW50cy9Qb3B1cC9tZXNzYWdlcyc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gICAgaW5pdFNlbnRyeSgpO1xuICB9KTtcbn1cblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuY29uc3QgbmFtZSA9ICdzZWFyY2hmb3JtJztcbmNvbnN0IG5vT2ZmZXJzTmFtZSA9ICdub19vZmZlcnMnO1xuY29uc3Qgbm9PZmZlcnNOb3RMb2dnZWROYW1lID0gJ25vX29mZmVyc19hdXRoJztcbmNvbnN0IG5vdExvZ2dlZE5hbWUgPSAncG9wdXBfYXV0aCc7XG5cbnR5cGUgR3Vlc3QgPSB7XG4gIGFkdWx0czogbnVtYmVyO1xuICBraWRzOiBudW1iZXJbXTtcbn07XG5cbnR5cGUgTm9SYXRlID0ge1xuICBjaGVja2luOiBzdHJpbmc7XG4gIGNoZWNrb3V0OiBzdHJpbmc7XG4gIGNvbXBldGl0b3I6IENvbXBldGl0b3I7XG4gIGV4dGVybmFsSG90ZWxJZDogc3RyaW5nIHwgbnVtYmVyO1xuICBleHRlcm5hbEhvdGVsTmFtZTogc3RyaW5nO1xuICBmdW5uZWxTdGVwOiBzdHJpbmc7XG4gIGd1ZXN0czogR3Vlc3RbXTtcbiAgaXNFdGc6IGJvb2xlYW47XG4gIHByaWNlT2xkOiBzdHJpbmc7XG4gIHJlc2lkZW5jeTogc3RyaW5nO1xuICBjb21taXNzaW9uSW5mbz86IENvbW1pc3Npb25JbmZvO1xuICBjdXJyZW5jeT86IHN0cmluZztcbiAgaG90ZWxJZD86IHN0cmluZztcbiAgbG95YWx0eT86IG51bWJlcjtcbiAgcHJpY2U/OiBzdHJpbmc7XG4gIHJhdGVJbmRleD86IG51bWJlcjtcbiAgaG90ZWxOYW1lPzogc3RyaW5nO1xuICBob3RlbFByZXZpZXc/OiBzdHJpbmc7XG4gIHJhdGluZz86IG51bWJlcjtcbn07XG5cbmNvbnN0IGlzRmlyZWZveCA9IHByb2Nlc3MuZW52LlRBUkdFVF9CUk9XU0VSID09PSBCcm93c2VyLkZJUkVGT1g7XG5cbihhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHBlcnNpc3RlZExhbmd1YWdlOiBMYW5ndWFnZSA9XG4gICAgKGF3YWl0IGdldEZyb21TdG9yYWdlKFN0b3JhZ2UuTEFOR1VBR0UpKSB8fCBMYW5ndWFnZS5FTjtcbiAgY29uc3QgcGFydG5lcnNBdXRoS2V5ID0gYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoU3RvcmFnZS5QQVJUTkVSU19BVVRIX0tFWSk7XG4gIGNvbnN0IHVzZXJJZCA9IGF3YWl0IGdldEZyb21TdG9yYWdlKFN0b3JhZ2UuVVNFUl9JRCk7XG4gIGNvbnN0IG5vUmF0ZURhdGEgPSAoYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoU3RvcmFnZS5OT19SQVRFX0RBVEEpKSB8fCB7fTtcbiAgY29uc3QgdGFiID0gYXdhaXQgZ2V0Q3VycmVudFRhYigpO1xuICBsZXQgbm9SYXRlOiBOb1JhdGU7XG4gIGlmICh0YWIuaWQpIHtcbiAgICBub1JhdGUgPSBub1JhdGVEYXRhW3RhYi5pZF07XG4gIH1cblxuICBjb25zdCBGYWlsdXJlTWVzc2FnZSA9ICgpID0+IHtcbiAgICBjb25zdCBpbnRsID0gdXNlSW50bCgpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnaGVhZGVyJykoKX0+XG4gICAgICAgIDxUaXRsZSBjbGFzc05hbWU9e2VtKCd0aXRsZScpKCl9IHNpemU9XCJtXCI+XG4gICAgICAgICAge2ludGwuZm9ybWF0TWVzc2FnZSh7IGlkOiAnb2ZmZXIudGl0bGVGYWlsdXJlJyB9KX1cbiAgICAgICAgPC9UaXRsZT5cbiAgICAgICAgPHAgY2xhc3NOYW1lPXtlbSgndGV4dCcpKCl9PlxuICAgICAgICAgIHtpbnRsLmZvcm1hdE1lc3NhZ2UoeyBpZDogJ29mZmVyLmRlc2NyaXB0aW9uRmFpbHVyZScgfSl9XG4gICAgICAgIDwvcD5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH07XG5cbiAgY29uc3QgUG9wdXAgPSAoKSA9PiB7XG4gICAgY29uc3QgW2xhbmd1YWdlLCBzZXRMYW5ndWFnZV0gPSB1c2VTdGF0ZShwZXJzaXN0ZWRMYW5ndWFnZSk7XG4gICAgY29uc3QgW2lzTG9nZ2VkLCBzZXRMb2dnZWRTdGF0ZV0gPSB1c2VTdGF0ZShCb29sZWFuKHBhcnRuZXJzQXV0aEtleSkpO1xuICAgIGNvbnN0IFtpc1ByaWNlU2V0dGluZ3NWaXNpYmxlLCBzZXRJc1ByaWNlU2V0dGluZ3NWaXNpYmxlXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICAgIGNvbnN0IHsgaW5qZWN0LCBzZW5kRXZlbnQgfSA9IHVzZUZ1bm5lbCh0cnVlKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBzdG9yZS5kaXNwYXRjaChsMTBuQWN0aW9ucy5zZXRMb2NhbGUobGFuZ3VhZ2UpKTtcbiAgICB9LCBbbGFuZ3VhZ2VdKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCBpbmplY3QobmFtZSk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWIgPSBhd2FpdCBnZXRDdXJyZW50VGFiKCk7XG4gICAgICAgIGNvbnN0IHVpZCA9IGF3YWl0IGdldEZyb21TdG9yYWdlKFN0b3JhZ2UuVUlEKTtcblxuICAgICAgICBpZiAobm9SYXRlKSB7XG4gICAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICAgIGNvbXBldGl0b3JfcHJpY2U6IG5vUmF0ZS5wcmljZU9sZCxcbiAgICAgICAgICAgIGV4dGVuc2lvbl9icmFuZDogQlJBTkQsXG4gICAgICAgICAgICBleHRlbnNpb25fdmVyc2lvbjogZ2V0VmVyc2lvbigpLFxuICAgICAgICAgICAgb3N0cm92b2tfYmFyX3ByaWNlOiBub1JhdGUuY29tbWlzc2lvbkluZm8/LnNob3cuYW1vdW50X2dyb3NzX21hcmt1cCxcbiAgICAgICAgICAgIG9zdHJvdm9rX2N1cjogbm9SYXRlLmN1cnJlbmN5LFxuICAgICAgICAgICAgb3N0cm92b2tfbmV0X3ByaWNlOiBub1JhdGUuY29tbWlzc2lvbkluZm8/LnNob3cuYW1vdW50X25ldCxcbiAgICAgICAgICAgIG90YWhvdGVsX2lkOiBub1JhdGUuaG90ZWxJZCxcbiAgICAgICAgICAgIHVpZCxcbiAgICAgICAgICAgIHVybDogY3VycmVudFRhYi51cmwsXG4gICAgICAgICAgICB1c2VyX2lkOiB1c2VySWQsXG4gICAgICAgICAgICB2ZXJzaW9uOiBWRVJTSU9OLFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAoaXNMb2dnZWQpIHtcbiAgICAgICAgICAgIGF3YWl0IHNlbmRFdmVudCgnc2hvdycsIG5vT2ZmZXJzTmFtZSwgZGF0YSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGF3YWl0IHNlbmRFdmVudCgnc2hvdycsIG5vT2ZmZXJzTm90TG9nZ2VkTmFtZSwgZGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGlzTG9nZ2VkKSB7XG4gICAgICAgICAgYXdhaXQgc2VuZEV2ZW50KCdzaG93JywgbmFtZSwge1xuICAgICAgICAgICAgZXh0ZW5zaW9uX2JyYW5kOiBCUkFORCxcbiAgICAgICAgICAgIGV4dGVuc2lvbl92ZXJzaW9uOiBnZXRWZXJzaW9uKCksXG4gICAgICAgICAgICB1aWQsXG4gICAgICAgICAgICB1cmw6IGN1cnJlbnRUYWIudXJsLFxuICAgICAgICAgICAgdXNlcl9pZDogdXNlcklkLFxuICAgICAgICAgICAgdmVyc2lvbjogVkVSU0lPTixcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhd2FpdCBzZW5kRXZlbnQoJ3Nob3cnLCBub3RMb2dnZWROYW1lLCB7XG4gICAgICAgICAgICBleHRlbnNpb25fYnJhbmQ6IEJSQU5ELFxuICAgICAgICAgICAgZXh0ZW5zaW9uX3ZlcnNpb246IGdldFZlcnNpb24oKSxcbiAgICAgICAgICAgIHVpZCxcbiAgICAgICAgICAgIHVybDogY3VycmVudFRhYi51cmwsXG4gICAgICAgICAgICB1c2VyX2lkOiB1c2VySWQsXG4gICAgICAgICAgICB2ZXJzaW9uOiBWRVJTSU9OLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KSgpO1xuICAgIH0sIFtpbmplY3QsIGlzTG9nZ2VkLCBzZW5kRXZlbnRdKTtcblxuICAgIHR5cGUgVmFsdWUgPSB7XG4gICAgICBndWVzdHM6IEd1ZXN0W107XG4gICAgICBmcm9tOiBEYXRlO1xuICAgICAgcmVnaW9uOiB7XG4gICAgICAgIGlkOiBzdHJpbmc7XG4gICAgICAgIG11bHRpY29tcGxldGVUeXBlOiBzdHJpbmc7XG4gICAgICAgIHJlZ2lvbklkOiBzdHJpbmc7XG4gICAgICB9O1xuICAgICAgdG86IERhdGU7XG4gICAgICBjaXRpemVuc2hpcDogc3RyaW5nO1xuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVTZWFyY2hGb3JtU3VibWl0ID0gYXN5bmMgKHZhbHVlOiBWYWx1ZSkgPT4ge1xuICAgICAgY29uc3QgY3VycmVudFRhYiA9IGF3YWl0IGdldEN1cnJlbnRUYWIoKTtcbiAgICAgIGNvbnN0IHVpZCA9IGF3YWl0IGdldEZyb21TdG9yYWdlKFN0b3JhZ2UuVUlEKTtcblxuICAgICAgaWYgKG5vUmF0ZSkge1xuICAgICAgICBhd2FpdCBzZW5kRXZlbnQoJ2NsaWNrJywgYCR7bm9PZmZlcnNOYW1lfV9zZWFyY2hgLCB7XG4gICAgICAgICAgZXh0ZW5zaW9uX2JyYW5kOiBCUkFORCxcbiAgICAgICAgICBleHRlbnNpb25fdmVyc2lvbjogZ2V0VmVyc2lvbigpLFxuICAgICAgICAgIHVpZCxcbiAgICAgICAgICB1cmw6IGN1cnJlbnRUYWIudXJsLFxuICAgICAgICAgIHVzZXJfaWQ6IHVzZXJJZCxcbiAgICAgICAgICB2ZXJzaW9uOiBWRVJTSU9OLFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF3YWl0IHNlbmRFdmVudCgnY2xpY2snLCBgJHtuYW1lfV9zZWFyY2hgLCB7XG4gICAgICAgICAgZXh0ZW5zaW9uX2JyYW5kOiBCUkFORCxcbiAgICAgICAgICBleHRlbnNpb25fdmVyc2lvbjogZ2V0VmVyc2lvbigpLFxuICAgICAgICAgIHVpZCxcbiAgICAgICAgICB1cmw6IGN1cnJlbnRUYWIudXJsLFxuICAgICAgICAgIHVzZXJfaWQ6IHVzZXJJZCxcbiAgICAgICAgICB2ZXJzaW9uOiBWRVJTSU9OLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qge1xuICAgICAgICBmcm9tLFxuICAgICAgICBndWVzdHMsXG4gICAgICAgIHJlZ2lvbjogeyBpZCwgbXVsdGljb21wbGV0ZVR5cGUsIHJlZ2lvbklkIH0sXG4gICAgICAgIHRvLFxuICAgICAgICBjaXRpemVuc2hpcCxcbiAgICAgIH0gPSB2YWx1ZTtcbiAgICAgIGxldCB1cmw6IFVSTCB8IHVuZGVmaW5lZDtcbiAgICAgIGxldCBxUGFyYW06IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKG11bHRpY29tcGxldGVUeXBlID09PSAncmVnaW9uJykge1xuICAgICAgICB1cmwgPSBuZXcgVVJMKHVybHMuQjJCX0hPVEVMUyk7XG4gICAgICAgIHFQYXJhbSA9IGlkO1xuICAgICAgfSBlbHNlIGlmIChtdWx0aWNvbXBsZXRlVHlwZSA9PT0gJ2hvdGVsJykge1xuICAgICAgICB1cmwgPSBuZXcgVVJMKGAke3VybHMuQjJCX1JPT01TfSR7aWR9L2ApO1xuICAgICAgICBxUGFyYW0gPSByZWdpb25JZDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZnJvbVBhcmFtID0gZm9ybWF0KGZyb20sICdkZC5NTS55eXl5Jyk7XG4gICAgICBjb25zdCB0b1BhcmFtID0gZm9ybWF0KHRvLCAnZGQuTU0ueXl5eScpO1xuICAgICAgY29uc3QgZ3Vlc3RzUGFyYW0gPSBndWVzdHNcbiAgICAgICAgLm1hcCgoeyBhZHVsdHMsIGtpZHMgfSkgPT4ge1xuICAgICAgICAgIGlmIChraWRzPy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBgJHthZHVsdHN9YW5kJHtraWRzLmpvaW4oJy4nKX1gO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBhZHVsdHM7XG4gICAgICAgIH0pXG4gICAgICAgIC5qb2luKCctJyk7XG5cbiAgICAgIGlmICh1cmwpIHtcbiAgICAgICAgaWYgKHFQYXJhbSkge1xuICAgICAgICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KCdxJywgcVBhcmFtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KCdkYXRlcycsIGAke2Zyb21QYXJhbX0tJHt0b1BhcmFtfWApO1xuICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLnNldCgnZ3Vlc3RzJywgZ3Vlc3RzUGFyYW0pO1xuICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLnNldCgncmVzaWRlbmN5JywgYCR7bGFuZ3VhZ2V9LSR7Y2l0aXplbnNoaXB9YCk7XG4gICAgICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KCd1dG1fc291cmNlJywgYCR7VkVSU0lPTn0tJHtnZXRCcm93c2VyTmFtZSgpfWApO1xuICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLnNldCgndXRtX21lZGl1bScsICdleHRlbnNpb24nKTtcblxuICAgICAgICBjb25zdCBtb2RpZmllZEhvc3ROYW1lID0gd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLnJlcGxhY2UoJ3d3dy4nLCAnJyk7XG5cbiAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5zZXQoJ3V0bV9jYW1wYWlnbicsIG1vZGlmaWVkSG9zdE5hbWUpO1xuICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLnNldCgndXRtX2NvbnRlbnQnLCAnc2VhcmNoJyk7XG4gICAgICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KCd1dG1fdGVybScsIHVzZXJJZCk7XG5cbiAgICAgICAgYXdhaXQgYnJvd3Nlci5ydW50aW1lLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICBjb21tYW5kOiBjb21tYW5kcy5PUEVOX05FV19XSU5ET1csXG4gICAgICAgICAgdXJsOiB1cmwudG9TdHJpbmcoKSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IGhhbmRsZUF1dGhTdWJtaXQgPSAoKSA9PiBzZXRMb2dnZWRTdGF0ZSh0cnVlKTtcbiAgICBjb25zdCBoYW5kbGVBdXRoU2tpcCA9ICgpID0+IHdpbmRvdy5jbG9zZSgpO1xuICAgIGNvbnN0IGhhbmRsZUJ1dHRvbkNsb3NlQ2xpY2sgPSAoKSA9PiB3aW5kb3cuY2xvc2UoKTtcbiAgICBjb25zdCBoYW5kbGVOb3RpZmljYXRpb25zTG9nb3V0ID0gKCkgPT4gc2V0TG9nZ2VkU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IGhhbmRsZUxhbmd1YWdlQ2hhbmdlID0gKGxhbmc6IHN0cmluZykgPT4ge1xuICAgICAgc3RvcmUuZGlzcGF0Y2gobDEwbkFjdGlvbnMuc2V0TG9jYWxlKGxhbmcpKTtcbiAgICB9O1xuXG4gICAgbGV0IHByaWNlU2V0dGluZ3NTaXplO1xuXG4gICAgaWYgKGlzRmlyZWZveCkge1xuICAgICAgcHJpY2VTZXR0aW5nc1NpemUgPSBub1JhdGUgPyBTaXplLk1FRElVTSA6IFNpemUuU01BTEw7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxUaGVtZT5cbiAgICAgICAgPEludGxQcm92aWRlclxuICAgICAgICAgIGxvY2FsZT17bGFuZ3VhZ2V9XG4gICAgICAgICAgbWVzc2FnZXM9e1xuICAgICAgICAgICAgbWVzc2FnZXNbbGFuZ3VhZ2UgYXMgTGFuZ3VhZ2UuRU4gfCBMYW5ndWFnZS5SVV0/Lm1lc3NhZ2VzID8/XG4gICAgICAgICAgICBtZXNzYWdlc1tMYW5ndWFnZS5FTl0ubWVzc2FnZXNcbiAgICAgICAgICB9XG4gICAgICAgID5cbiAgICAgICAgICA8TGFuZ3VhZ2VDb250ZXh0LlByb3ZpZGVyXG4gICAgICAgICAgICB2YWx1ZT17e1xuICAgICAgICAgICAgICBsYW5ndWFnZSxcbiAgICAgICAgICAgICAgc2V0TGFuZ3VhZ2UsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgncG9wdXAnKSgpfT5cbiAgICAgICAgICAgICAgPExvZ28gY2xhc3NOYW1lPXtlbSgnbG9nbycpKCl9IGhlaWdodD17NDZ9IHNpemU9XCJtXCIgLz5cbiAgICAgICAgICAgICAge2lzTG9nZ2VkID8gKFxuICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICB7bm9SYXRlICYmIDxGYWlsdXJlTWVzc2FnZSAvPn1cbiAgICAgICAgICAgICAgICAgIDxTZWFyY2hGb3JtXG4gICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zaGlwVmFsdWU9e25vUmF0ZT8ucmVzaWRlbmN5ID8/ICdydSd9XG4gICAgICAgICAgICAgICAgICAgIGZyb21WYWx1ZT17XG4gICAgICAgICAgICAgICAgICAgICAgbm9SYXRlPy5jaGVja2luXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG5ldyBEYXRlKG5vUmF0ZS5jaGVja2luKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBzdGFydE9mRGF5KG5ldyBEYXRlKCkpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaW5Qb3B1cFxuICAgICAgICAgICAgICAgICAgICBpc0IyQlxuICAgICAgICAgICAgICAgICAgICBpc0NpdGl6ZW5zaGlwUmVxdWlyZWRcbiAgICAgICAgICAgICAgICAgICAgaXNFeHRlbnNpb25cbiAgICAgICAgICAgICAgICAgICAgaXNNdWx0aXJvb21cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2NvbnNvbGUubG9nfVxuICAgICAgICAgICAgICAgICAgICBvblN1Ym1pdD17aGFuZGxlU2VhcmNoRm9ybVN1Ym1pdH1cbiAgICAgICAgICAgICAgICAgICAgcm9vbXNWYWx1ZT17bm9SYXRlPy5ndWVzdHN9XG4gICAgICAgICAgICAgICAgICAgIHRvVmFsdWU9e1xuICAgICAgICAgICAgICAgICAgICAgIG5vUmF0ZT8uY2hlY2tpblxuICAgICAgICAgICAgICAgICAgICAgICAgPyBuZXcgRGF0ZShub1JhdGUuY2hlY2tvdXQpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGFkZERheXMoc3RhcnRPZkRheShuZXcgRGF0ZSgpKSwgMSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICA8QXV0aFxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtlbSgnYXV0aCcpKCl9XG4gICAgICAgICAgICAgICAgICBpblBvcHVwXG4gICAgICAgICAgICAgICAgICBpc0FjdGl2ZVxuICAgICAgICAgICAgICAgICAgbmFtZT1cInBvcHVwX2F1dGhcIlxuICAgICAgICAgICAgICAgICAgb25Ta2lwPXtoYW5kbGVBdXRoU2tpcH1cbiAgICAgICAgICAgICAgICAgIG9uU3VibWl0PXtoYW5kbGVBdXRoU3VibWl0fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnYnV0dG9ucycpKCl9PlxuICAgICAgICAgICAgICAgIDxMYW5ndWFnZVN3aXRjaGVyIG9uQ2hhbmdlPXtoYW5kbGVMYW5ndWFnZUNoYW5nZX0gLz5cbiAgICAgICAgICAgICAgICB7aXNMb2dnZWQgJiYgKFxuICAgICAgICAgICAgICAgICAgPFNldHRpbmdzXG4gICAgICAgICAgICAgICAgICAgIGluUG9wdXBcbiAgICAgICAgICAgICAgICAgICAgb25Mb2dvdXQ9e2hhbmRsZU5vdGlmaWNhdGlvbnNMb2dvdXR9XG4gICAgICAgICAgICAgICAgICAgIG9uUHJpY2VTZXR0aW5nc0NsaWNrPXsoKSA9PiBzZXRJc1ByaWNlU2V0dGluZ3NWaXNpYmxlKHRydWUpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDxCdXR0b25JY29uXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2VtKCdidXR0b25DbG9zZScpKCl9XG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVCdXR0b25DbG9zZUNsaWNrfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxJY29uQ3Jvc3MgLz5cbiAgICAgICAgICAgICAgICA8L0J1dHRvbkljb24+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICB7aXNQcmljZVNldHRpbmdzVmlzaWJsZSAmJiAoXG4gICAgICAgICAgICAgICAgPFByaWNlU2V0dGluZ3NcbiAgICAgICAgICAgICAgICAgIHNpemU9e3ByaWNlU2V0dGluZ3NTaXplfVxuICAgICAgICAgICAgICAgICAgb25DbG9zZT17KCkgPT4gc2V0SXNQcmljZVNldHRpbmdzVmlzaWJsZShmYWxzZSl9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvTGFuZ3VhZ2VDb250ZXh0LlByb3ZpZGVyPlxuICAgICAgICA8L0ludGxQcm92aWRlcj5cbiAgICAgIDwvVGhlbWU+XG4gICAgKTtcbiAgfTtcblxuICBSZWFjdERPTS5yZW5kZXIoPFBvcHVwIC8+LCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcm9vdCcpKTtcbn0pKCk7XG4iLCJpbXBvcnQgdG9EYXRlIGZyb20gJy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbi8qKlxuICogQG5hbWUgaXNWYWxpZFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB2YWxpZD9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgZmFsc2UgaWYgYXJndW1lbnQgaXMgSW52YWxpZCBEYXRlIGFuZCB0cnVlIG90aGVyd2lzZS5cbiAqIEFyZ3VtZW50IGlzIGNvbnZlcnRlZCB0byBEYXRlIHVzaW5nIGB0b0RhdGVgLiBTZWUgW3RvRGF0ZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy90b0RhdGV9XG4gKiBJbnZhbGlkIERhdGUgaXMgYSBEYXRlLCB3aG9zZSB0aW1lIHZhbHVlIGlzIE5hTi5cbiAqXG4gKiBUaW1lIHZhbHVlIG9mIERhdGU6IGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuOS4xLjFcbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIC0gTm93IGBpc1ZhbGlkYCBkb2Vzbid0IHRocm93IGFuIGV4Y2VwdGlvblxuICogICBpZiB0aGUgZmlyc3QgYXJndW1lbnQgaXMgbm90IGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKiAgIEluc3RlYWQsIGFyZ3VtZW50IGlzIGNvbnZlcnRlZCBiZWZvcmVoYW5kIHVzaW5nIGB0b0RhdGVgLlxuICpcbiAqICAgRXhhbXBsZXM6XG4gKlxuICogICB8IGBpc1ZhbGlkYCBhcmd1bWVudCAgICAgICAgfCBCZWZvcmUgdjIuMC4wIHwgdjIuMC4wIG9ud2FyZCB8XG4gKiAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLXxcbiAqICAgfCBgbmV3IERhdGUoKWAgICAgICAgICAgICAgIHwgYHRydWVgICAgICAgICB8IGB0cnVlYCAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZSgnMjAxNi0wMS0wMScpYCAgfCBgdHJ1ZWAgICAgICAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKCcnKWAgICAgICAgICAgICB8IGBmYWxzZWAgICAgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgbmV3IERhdGUoMTQ4ODM3MDgzNTA4MSlgIHwgYHRydWVgICAgICAgICB8IGB0cnVlYCAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZShOYU4pYCAgICAgICAgICAgfCBgZmFsc2VgICAgICAgIHwgYGZhbHNlYCAgICAgICB8XG4gKiAgIHwgYCcyMDE2LTAxLTAxJ2AgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgJydgICAgICAgICAgICAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGAxNDg4MzcwODM1MDgxYCAgICAgICAgICAgfCBgVHlwZUVycm9yYCAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYE5hTmAgICAgICAgICAgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqXG4gKiAgIFdlIGludHJvZHVjZSB0aGlzIGNoYW5nZSB0byBtYWtlICpkYXRlLWZucyogY29uc2lzdGVudCB3aXRoIEVDTUFTY3JpcHQgYmVoYXZpb3JcbiAqICAgdGhhdCB0cnkgdG8gY29lcmNlIGFyZ3VtZW50cyB0byB0aGUgZXhwZWN0ZWQgdHlwZVxuICogICAod2hpY2ggaXMgYWxzbyB0aGUgY2FzZSB3aXRoIG90aGVyICpkYXRlLWZucyogZnVuY3Rpb25zKS5cbiAqXG4gKiBAcGFyYW0geyp9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlIGlzIHZhbGlkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWxpZCBkYXRlOlxuICogdmFyIHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoMjAxNCwgMSwgMzEpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgdmFsdWUsIGNvbnZlcnRhYmxlIGludG8gYSBkYXRlOlxuICogdmFyIHJlc3VsdCA9IGlzVmFsaWQoMTM5MzgwNDgwMDAwMClcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIGludmFsaWQgZGF0ZTpcbiAqIHZhciByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKCcnKSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1ZhbGlkKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgcmV0dXJuICFpc05hTihkYXRlKTtcbn0iLCJ2YXIgZm9ybWF0RGlzdGFuY2VMb2NhbGUgPSB7XG4gIGxlc3NUaGFuWFNlY29uZHM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBzZWNvbmQnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBzZWNvbmRzJ1xuICB9LFxuICB4U2Vjb25kczoge1xuICAgIG9uZTogJzEgc2Vjb25kJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBzZWNvbmRzJ1xuICB9LFxuICBoYWxmQU1pbnV0ZTogJ2hhbGYgYSBtaW51dGUnLFxuICBsZXNzVGhhblhNaW51dGVzOiB7XG4gICAgb25lOiAnbGVzcyB0aGFuIGEgbWludXRlJyxcbiAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gbWludXRlcydcbiAgfSxcbiAgeE1pbnV0ZXM6IHtcbiAgICBvbmU6ICcxIG1pbnV0ZScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbWludXRlcydcbiAgfSxcbiAgYWJvdXRYSG91cnM6IHtcbiAgICBvbmU6ICdhYm91dCAxIGhvdXInLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IGhvdXJzJ1xuICB9LFxuICB4SG91cnM6IHtcbiAgICBvbmU6ICcxIGhvdXInLFxuICAgIG90aGVyOiAne3tjb3VudH19IGhvdXJzJ1xuICB9LFxuICB4RGF5czoge1xuICAgIG9uZTogJzEgZGF5JyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBkYXlzJ1xuICB9LFxuICBhYm91dFhXZWVrczoge1xuICAgIG9uZTogJ2Fib3V0IDEgd2VlaycsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gd2Vla3MnXG4gIH0sXG4gIHhXZWVrczoge1xuICAgIG9uZTogJzEgd2VlaycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gd2Vla3MnXG4gIH0sXG4gIGFib3V0WE1vbnRoczoge1xuICAgIG9uZTogJ2Fib3V0IDEgbW9udGgnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IG1vbnRocydcbiAgfSxcbiAgeE1vbnRoczoge1xuICAgIG9uZTogJzEgbW9udGgnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1vbnRocydcbiAgfSxcbiAgYWJvdXRYWWVhcnM6IHtcbiAgICBvbmU6ICdhYm91dCAxIHllYXInLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICB4WWVhcnM6IHtcbiAgICBvbmU6ICcxIHllYXInLFxuICAgIG90aGVyOiAne3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBvdmVyWFllYXJzOiB7XG4gICAgb25lOiAnb3ZlciAxIHllYXInLFxuICAgIG90aGVyOiAnb3ZlciB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIGFsbW9zdFhZZWFyczoge1xuICAgIG9uZTogJ2FsbW9zdCAxIHllYXInLFxuICAgIG90aGVyOiAnYWxtb3N0IHt7Y291bnR9fSB5ZWFycydcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlKHRva2VuLCBjb3VudCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHJlc3VsdDtcblxuICBpZiAodHlwZW9mIGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub25lO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudCk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuICdpbiAnICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJyBhZ28nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRGb3JtYXRMb25nRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpcnR5T3B0aW9ucykge1xuICAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICB2YXIgZm9ybWF0ID0gYXJncy5mb3JtYXRzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHNbYXJncy5kZWZhdWx0V2lkdGhdO1xuICAgIHJldHVybiBmb3JtYXQ7XG4gIH07XG59IiwiaW1wb3J0IGJ1aWxkRm9ybWF0TG9uZ0ZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanMnO1xudmFyIGRhdGVGb3JtYXRzID0ge1xuICBmdWxsOiAnRUVFRSwgTU1NTSBkbywgeScsXG4gIGxvbmc6ICdNTU1NIGRvLCB5JyxcbiAgbWVkaXVtOiAnTU1NIGQsIHknLFxuICBzaG9ydDogJ01NL2RkL3l5eXknXG59O1xudmFyIHRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiAnaDptbTpzcyBhIHp6enonLFxuICBsb25nOiAnaDptbTpzcyBhIHonLFxuICBtZWRpdW06ICdoOm1tOnNzIGEnLFxuICBzaG9ydDogJ2g6bW0gYSdcbn07XG52YXIgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbG9uZzogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIG1lZGl1bTogJ3t7ZGF0ZX19LCB7e3RpbWV9fScsXG4gIHNob3J0OiAne3tkYXRlfX0sIHt7dGltZX19J1xufTtcbnZhciBmb3JtYXRMb25nID0ge1xuICBkYXRlOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIHRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiB0aW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgZGF0ZVRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlVGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXRMb25nOyIsInZhciBmb3JtYXRSZWxhdGl2ZUxvY2FsZSA9IHtcbiAgbGFzdFdlZWs6IFwiJ2xhc3QnIGVlZWUgJ2F0JyBwXCIsXG4gIHllc3RlcmRheTogXCIneWVzdGVyZGF5IGF0JyBwXCIsXG4gIHRvZGF5OiBcIid0b2RheSBhdCcgcFwiLFxuICB0b21vcnJvdzogXCIndG9tb3Jyb3cgYXQnIHBcIixcbiAgbmV4dFdlZWs6IFwiZWVlZSAnYXQnIHBcIixcbiAgb3RoZXI6ICdQJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlKHRva2VuLCBfZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykge1xuICByZXR1cm4gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTG9jYWxpemVGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlydHlJbmRleCwgZGlydHlPcHRpb25zKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gICAgdmFyIGNvbnRleHQgPSBvcHRpb25zLmNvbnRleHQgPyBTdHJpbmcob3B0aW9ucy5jb250ZXh0KSA6ICdzdGFuZGFsb25lJztcbiAgICB2YXIgdmFsdWVzQXJyYXk7XG5cbiAgICBpZiAoY29udGV4dCA9PT0gJ2Zvcm1hdHRpbmcnICYmIGFyZ3MuZm9ybWF0dGluZ1ZhbHVlcykge1xuICAgICAgdmFyIGRlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCB8fCBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBkZWZhdWx0V2lkdGg7XG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1t3aWR0aF0gfHwgYXJncy5mb3JtYXR0aW5nVmFsdWVzW2RlZmF1bHRXaWR0aF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhciBfd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy52YWx1ZXNbX3dpZHRoXSB8fCBhcmdzLnZhbHVlc1tfZGVmYXVsdFdpZHRoXTtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXggPSBhcmdzLmFyZ3VtZW50Q2FsbGJhY2sgPyBhcmdzLmFyZ3VtZW50Q2FsbGJhY2soZGlydHlJbmRleCkgOiBkaXJ0eUluZGV4O1xuICAgIHJldHVybiB2YWx1ZXNBcnJheVtpbmRleF07XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaEZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXJ0eVN0cmluZywgZGlydHlPcHRpb25zKSB7XG4gICAgdmFyIHN0cmluZyA9IFN0cmluZyhkaXJ0eVN0cmluZyk7XG4gICAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICB2YXIgbWF0Y2hQYXR0ZXJuID0gd2lkdGggJiYgYXJncy5tYXRjaFBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLm1hdGNoUGF0dGVybnNbYXJncy5kZWZhdWx0TWF0Y2hXaWR0aF07XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKG1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVBhdHRlcm5zID0gd2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLnBhcnNlUGF0dGVybnNbYXJncy5kZWZhdWx0UGFyc2VXaWR0aF07XG4gICAgdmFyIHZhbHVlO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwYXJzZVBhdHRlcm5zKSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgdmFsdWUgPSBmaW5kSW5kZXgocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSA9IGZpbmRLZXkocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpXG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHByZWRpY2F0ZShvYmplY3Rba2V5XSkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSA9IDA7IGtleSA8IGFycmF5Lmxlbmd0aDsga2V5KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxufSIsImltcG9ydCBidWlsZE1hdGNoUGF0dGVybkZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qcyc7XG5pbXBvcnQgYnVpbGRNYXRjaEZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzJztcbnZhciBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL14oXFxkKykodGh8c3R8bmR8cmQpPy9pO1xudmFyIHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xudmFyIG1hdGNoRXJhUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYnxhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oYlxcLj9cXHM/Y1xcLj98YlxcLj9cXHM/Y1xcLj9cXHM/ZVxcLj98YVxcLj9cXHM/ZFxcLj98Y1xcLj9cXHM/ZVxcLj8pL2ksXG4gIHdpZGU6IC9eKGJlZm9yZSBjaHJpc3R8YmVmb3JlIGNvbW1vbiBlcmF8YW5ubyBkb21pbml8Y29tbW9uIGVyYSkvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXmIvaSwgL14oYXxjKS9pXVxufTtcbnZhciBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15xWzEyMzRdL2ksXG4gIHdpZGU6IC9eWzEyMzRdKHRofHN0fG5kfHJkKT8gcXVhcnRlci9pXG59O1xudmFyIHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXVxufTtcbnZhciBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bamZtYXNvbmRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXihqYW58ZmVifG1hcnxhcHJ8bWF5fGp1bnxqdWx8YXVnfHNlcHxvY3R8bm92fGRlYykvaSxcbiAgd2lkZTogL14oamFudWFyeXxmZWJydWFyeXxtYXJjaHxhcHJpbHxtYXl8anVuZXxqdWx5fGF1Z3VzdHxzZXB0ZW1iZXJ8b2N0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcikvaVxufTtcbnZhciBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9eai9pLCAvXmYvaSwgL15tL2ksIC9eYS9pLCAvXm0vaSwgL15qL2ksIC9eai9pLCAvXmEvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldLFxuICBhbnk6IFsvXmphL2ksIC9eZi9pLCAvXm1hci9pLCAvXmFwL2ksIC9ebWF5L2ksIC9eanVuL2ksIC9eanVsL2ksIC9eYXUvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bc210d2ZdL2ksXG4gIHNob3J0OiAvXihzdXxtb3x0dXx3ZXx0aHxmcnxzYSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHN1bnxtb258dHVlfHdlZHx0aHV8ZnJpfHNhdCkvaSxcbiAgd2lkZTogL14oc3VuZGF5fG1vbmRheXx0dWVzZGF5fHdlZG5lc2RheXx0aHVyc2RheXxmcmlkYXl8c2F0dXJkYXkpL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15zL2ksIC9ebS9pLCAvXnQvaSwgL153L2ksIC9edC9pLCAvXmYvaSwgL15zL2ldLFxuICBhbnk6IFsvXnN1L2ksIC9ebS9pLCAvXnR1L2ksIC9edy9pLCAvXnRoL2ksIC9eZi9pLCAvXnNhL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXxwfG1pfG58KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pLFxuICBhbnk6IC9eKFthcF1cXC4/XFxzP21cXC4/fG1pZG5pZ2h0fG5vb258KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXmEvaSxcbiAgICBwbTogL15wL2ksXG4gICAgbWlkbmlnaHQ6IC9ebWkvaSxcbiAgICBub29uOiAvXm5vL2ksXG4gICAgbW9ybmluZzogL21vcm5pbmcvaSxcbiAgICBhZnRlcm5vb246IC9hZnRlcm5vb24vaSxcbiAgICBldmVuaW5nOiAvZXZlbmluZy9pLFxuICAgIG5pZ2h0OiAvbmlnaHQvaVxuICB9XG59O1xudmFyIG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9KSxcbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55JyxcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICdhbnknLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbWF0Y2g7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaFBhdHRlcm5GbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlydHlTdHJpbmcsIGRpcnR5T3B0aW9ucykge1xuICAgIHZhciBzdHJpbmcgPSBTdHJpbmcoZGlydHlTdHJpbmcpO1xuICAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLm1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLnBhcnNlUGF0dGVybik7XG5cbiAgICBpZiAoIXBhcnNlUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2socGFyc2VSZXN1bHRbMF0pIDogcGFyc2VSZXN1bHRbMF07XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2sgPyBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aClcbiAgICB9O1xuICB9O1xufSIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tICcuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSAnLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gJy4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyc7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSAnLi9fbGliL2xvY2FsaXplL2luZGV4LmpzJztcbmltcG9ydCBtYXRjaCBmcm9tICcuL19saWIvbWF0Y2gvaW5kZXguanMnO1xuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IEVuZ2xpc2ggbG9jYWxlIChVbml0ZWQgU3RhdGVzKS5cbiAqIEBsYW5ndWFnZSBFbmdsaXNoXG4gKiBAaXNvLTYzOS0yIGVuZ1xuICogQGF1dGhvciBTYXNoYSBLb3NzIFtAa29zc25vY29ycF17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2tvc3Nub2NvcnB9XG4gKiBAYXV0aG9yIExlc2hhIEtvc3MgW0BsZXNoYWtvc3Nde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9sZXNoYWtvc3N9XG4gKi9cblxudmFyIGxvY2FsZSA9IHtcbiAgY29kZTogJ2VuLVVTJyxcbiAgZm9ybWF0RGlzdGFuY2U6IGZvcm1hdERpc3RhbmNlLFxuICBmb3JtYXRMb25nOiBmb3JtYXRMb25nLFxuICBmb3JtYXRSZWxhdGl2ZTogZm9ybWF0UmVsYXRpdmUsXG4gIGxvY2FsaXplOiBsb2NhbGl6ZSxcbiAgbWF0Y2g6IG1hdGNoLFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAwXG4gICAgLyogU3VuZGF5ICovXG4gICAgLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogMVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsImltcG9ydCBidWlsZExvY2FsaXplRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMnO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0InLCAnQSddLFxuICBhYmJyZXZpYXRlZDogWydCQycsICdBRCddLFxuICB3aWRlOiBbJ0JlZm9yZSBDaHJpc3QnLCAnQW5ubyBEb21pbmknXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydRMScsICdRMicsICdRMycsICdRNCddLFxuICB3aWRlOiBbJzFzdCBxdWFydGVyJywgJzJuZCBxdWFydGVyJywgJzNyZCBxdWFydGVyJywgJzR0aCBxdWFydGVyJ10gLy8gTm90ZTogaW4gRW5nbGlzaCwgdGhlIG5hbWVzIG9mIGRheXMgb2YgdGhlIHdlZWsgYW5kIG1vbnRocyBhcmUgY2FwaXRhbGl6ZWQuXG4gIC8vIElmIHlvdSBhcmUgbWFraW5nIGEgbmV3IGxvY2FsZSBiYXNlZCBvbiB0aGlzIG9uZSwgY2hlY2sgaWYgdGhlIHNhbWUgaXMgdHJ1ZSBmb3IgdGhlIGxhbmd1YWdlIHlvdSdyZSB3b3JraW5nIG9uLlxuICAvLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbiAgLy8gZS5nLiBpbiBTcGFuaXNoIGxhbmd1YWdlIHRoZSB3ZWVrZGF5cyBhbmQgbW9udGhzIHNob3VsZCBiZSBpbiB0aGUgbG93ZXJjYXNlLlxuXG59O1xudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdBJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgd2lkZTogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnUycsICdNJywgJ1QnLCAnVycsICdUJywgJ0YnLCAnUyddLFxuICBzaG9ydDogWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICBhYmJyZXZpYXRlZDogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgd2lkZTogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfVxufTtcblxuZnVuY3Rpb24gb3JkaW5hbE51bWJlcihkaXJ0eU51bWJlciwgX2RpcnR5T3B0aW9ucykge1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTsgLy8gSWYgb3JkaW5hbCBudW1iZXJzIGRlcGVuZCBvbiBjb250ZXh0LCBmb3IgZXhhbXBsZSxcbiAgLy8gaWYgdGhleSBhcmUgZGlmZmVyZW50IGZvciBkaWZmZXJlbnQgZ3JhbW1hdGljYWwgZ2VuZGVycyxcbiAgLy8gdXNlIGBvcHRpb25zLnVuaXRgOlxuICAvL1xuICAvLyAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9XG4gIC8vICAgdmFyIHVuaXQgPSBTdHJpbmcob3B0aW9ucy51bml0KVxuICAvL1xuICAvLyB3aGVyZSBgdW5pdGAgY2FuIGJlICd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXRlJywgJ2RheU9mWWVhcicsXG4gIC8vICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJ1xuXG4gIHZhciByZW0xMDAgPSBudW1iZXIgJSAxMDA7XG5cbiAgaWYgKHJlbTEwMCA+IDIwIHx8IHJlbTEwMCA8IDEwKSB7XG4gICAgc3dpdGNoIChyZW0xMDAgJSAxMCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3N0JztcblxuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ25kJztcblxuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3JkJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVtYmVyICsgJ3RoJztcbn1cblxudmFyIGxvY2FsaXplID0ge1xuICBvcmRpbmFsTnVtYmVyOiBvcmRpbmFsTnVtYmVyLFxuICBlcmE6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBlcmFWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IGZ1bmN0aW9uIChxdWFydGVyKSB7XG4gICAgICByZXR1cm4gTnVtYmVyKHF1YXJ0ZXIpIC0gMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IG1vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXk6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBmb3JtYXR0aW5nVmFsdWVzOiBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRGb3JtYXR0aW5nV2lkdGg6ICd3aWRlJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsaXplOyIsImltcG9ydCB0b0ludGVnZXIgZnJvbSAnLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanMnO1xuaW1wb3J0IGFkZE1pbGxpc2Vjb25kcyBmcm9tICcuLi9hZGRNaWxsaXNlY29uZHMvaW5kZXguanMnO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tICcuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyc7XG4vKipcbiAqIEBuYW1lIHN1Yk1pbGxpc2Vjb25kc1xuICogQGNhdGVnb3J5IE1pbGxpc2Vjb25kIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIHN1YnRyYWN0ZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIHN1YnRyYWN0ZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU3VidHJhY3QgNzUwIG1pbGxpc2Vjb25kcyBmcm9tIDEwIEp1bHkgMjAxNCAxMjo0NTozMC4wMDA6XG4gKiB2YXIgcmVzdWx0ID0gc3ViTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MjkuMjUwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ViTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gYWRkTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgLWFtb3VudCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCA/ICctJyA6ICcnO1xuICB2YXIgb3V0cHV0ID0gTWF0aC5hYnMobnVtYmVyKS50b1N0cmluZygpO1xuXG4gIHdoaWxlIChvdXRwdXQubGVuZ3RoIDwgdGFyZ2V0TGVuZ3RoKSB7XG4gICAgb3V0cHV0ID0gJzAnICsgb3V0cHV0O1xuICB9XG5cbiAgcmV0dXJuIHNpZ24gKyBvdXRwdXQ7XG59IiwiaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tICcuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanMnO1xuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKi9cblxudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgLy8gRnJvbSBodHRwOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LTMxL3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0Zvcm1hdF90b2tlbnNcbiAgICAvLyB8IFllYXIgICAgIHwgICAgIHkgfCB5eSB8ICAgeXl5IHwgIHl5eXkgfCB5eXl5eSB8XG4gICAgLy8gfC0tLS0tLS0tLS18LS0tLS0tLXwtLS0tfC0tLS0tLS18LS0tLS0tLXwtLS0tLS0tfFxuICAgIC8vIHwgQUQgMSAgICAgfCAgICAgMSB8IDAxIHwgICAwMDEgfCAgMDAwMSB8IDAwMDAxIHxcbiAgICAvLyB8IEFEIDEyICAgIHwgICAgMTIgfCAxMiB8ICAgMDEyIHwgIDAwMTIgfCAwMDAxMiB8XG4gICAgLy8gfCBBRCAxMjMgICB8ICAgMTIzIHwgMjMgfCAgIDEyMyB8ICAwMTIzIHwgMDAxMjMgfFxuICAgIC8vIHwgQUQgMTIzNCAgfCAgMTIzNCB8IDM0IHwgIDEyMzQgfCAgMTIzNCB8IDAxMjM0IHxcbiAgICAvLyB8IEFEIDEyMzQ1IHwgMTIzNDUgfCA0NSB8IDEyMzQ1IHwgMTIzNDUgfCAxMjM0NSB8XG4gICAgdmFyIHNpZ25lZFllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7IC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG5cbiAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModG9rZW4gPT09ICd5eScgPyB5ZWFyICUgMTAwIDogeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgIHJldHVybiB0b2tlbiA9PT0gJ00nID8gU3RyaW5nKG1vbnRoICsgMSkgOiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHRoZSBtb250aFxuICBkOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDRGF0ZSgpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF0ZS5nZXRVVENIb3VycygpIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYSc6XG4gICAgICBjYXNlICdhYSc6XG4gICAgICBjYXNlICdhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZVswXTtcblxuICAgICAgY2FzZSAnYWFhYSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlID09PSAnYW0nID8gJ2EubS4nIDogJ3AubS4nO1xuICAgIH1cbiAgfSxcbiAgLy8gSG91ciBbMS0xMl1cbiAgaDogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMiB8fCAxMiwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ0hvdXJzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDTWludXRlcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBTZWNvbmRcbiAgczogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ1NlY29uZHMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRnJhY3Rpb24gb2Ygc2Vjb25kXG4gIFM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBudW1iZXJPZkRpZ2l0cyA9IHRva2VuLmxlbmd0aDtcbiAgICB2YXIgbWlsbGlzZWNvbmRzID0gZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgICB2YXIgZnJhY3Rpb25hbFNlY29uZHMgPSBNYXRoLmZsb29yKG1pbGxpc2Vjb25kcyAqIE1hdGgucG93KDEwLCBudW1iZXJPZkRpZ2l0cyAtIDMpKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGZyYWN0aW9uYWxTZWNvbmRzLCB0b2tlbi5sZW5ndGgpO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0dGVyczsiLCJpbXBvcnQgdG9EYXRlIGZyb20gJy4uLy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL3JlcXVpcmVkQXJncy9pbmRleC5qcyc7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2VlayhkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSAxO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgdmFyIGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uO1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSBkaWZmKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tICcuLi8uLi90b0RhdGUvaW5kZXguanMnO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gJy4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzJztcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzJzsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0VVRDRnVsbFllYXIoeWVhciArIDEsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhcik7XG4gIHZhciBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyKTtcblxuICBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59IiwiaW1wb3J0IGdldFVUQ0lTT1dlZWtZZWFyIGZyb20gJy4uL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzJztcbmltcG9ydCBzdGFydE9mVVRDSVNPV2VlayBmcm9tICcuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL3JlcXVpcmVkQXJncy9pbmRleC5qcyc7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgeWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSk7XG4gIHZhciBmb3VydGhPZkphbnVhcnkgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tICcuLi90b0ludGVnZXIvaW5kZXguanMnO1xuaW1wb3J0IHRvRGF0ZSBmcm9tICcuLi8uLi90b0RhdGUvaW5kZXguanMnO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tICcuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ1dlZWsoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGU7XG4gIHZhciBsb2NhbGVXZWVrU3RhcnRzT24gPSBsb2NhbGUgJiYgbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMud2Vla1N0YXJ0c09uO1xuICB2YXIgZGVmYXVsdFdlZWtTdGFydHNPbiA9IGxvY2FsZVdlZWtTdGFydHNPbiA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihsb2NhbGVXZWVrU3RhcnRzT24pO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gb3B0aW9ucy53ZWVrU3RhcnRzT24gPT0gbnVsbCA/IGRlZmF1bHRXZWVrU3RhcnRzT24gOiB0b0ludGVnZXIob3B0aW9ucy53ZWVrU3RhcnRzT24pOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKHdlZWtTdGFydHNPbiA+PSAwICYmIHdlZWtTdGFydHNPbiA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gJy4uL3RvSW50ZWdlci9pbmRleC5qcyc7XG5pbXBvcnQgdG9EYXRlIGZyb20gJy4uLy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSAnLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanMnO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tICcuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDV2Vla1llYXIoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSwgZGlydHlPcHRpb25zKTtcbiAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGU7XG4gIHZhciBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGUgJiYgbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlO1xuICB2YXIgZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gMSA6IHRvSW50ZWdlcihsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgOiB0b0ludGVnZXIob3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDEgYW5kIDcgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciBmaXJzdFdlZWtPZk5leHRZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDRnVsbFllYXIoeWVhciArIDEsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWtPZk5leHRZZWFyLCBkaXJ0eU9wdGlvbnMpO1xuICB2YXIgZmlyc3RXZWVrT2ZUaGlzWWVhciA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWtPZlRoaXNZZWFyLCBkaXJ0eU9wdGlvbnMpO1xuXG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gJy4uL3RvSW50ZWdlci9pbmRleC5qcyc7XG5pbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSAnLi4vZ2V0VVRDV2Vla1llYXIvaW5kZXguanMnO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gJy4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzJztcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzJzsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrWWVhcihkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZSAmJiBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU7XG4gIHZhciBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyAxIDogdG9JbnRlZ2VyKGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA6IHRvSW50ZWdlcihvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciB5ZWFyID0gZ2V0VVRDV2Vla1llYXIoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpO1xuICB2YXIgZmlyc3RXZWVrID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vlay5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWsuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrLCBkaXJ0eU9wdGlvbnMpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgbGlnaHRGb3JtYXR0ZXJzIGZyb20gJy4uL2xpZ2h0Rm9ybWF0dGVycy9pbmRleC5qcyc7XG5pbXBvcnQgZ2V0VVRDRGF5T2ZZZWFyIGZyb20gJy4uLy4uLy4uL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzJztcbmltcG9ydCBnZXRVVENJU09XZWVrIGZyb20gJy4uLy4uLy4uL19saWIvZ2V0VVRDSVNPV2Vlay9pbmRleC5qcyc7XG5pbXBvcnQgZ2V0VVRDSVNPV2Vla1llYXIgZnJvbSAnLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qcyc7XG5pbXBvcnQgZ2V0VVRDV2VlayBmcm9tICcuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWsvaW5kZXguanMnO1xuaW1wb3J0IGdldFVUQ1dlZWtZZWFyIGZyb20gJy4uLy4uLy4uL19saWIvZ2V0VVRDV2Vla1llYXIvaW5kZXguanMnO1xuaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tICcuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanMnO1xudmFyIGRheVBlcmlvZEVudW0gPSB7XG4gIGFtOiAnYW0nLFxuICBwbTogJ3BtJyxcbiAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gIG5vb246ICdub29uJyxcbiAgbW9ybmluZzogJ21vcm5pbmcnLFxuICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICBldmVuaW5nOiAnZXZlbmluZycsXG4gIG5pZ2h0OiAnbmlnaHQnXG4gIC8qXG4gICAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICAgKiB8ICBhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBBKiB8IE1pbGxpc2Vjb25kcyBpbiBkYXkgICAgICAgICAgICB8XG4gICAqIHwgIGIgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgIHwgIEIgIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgIHxcbiAgICogfCAgYyAgfCBTdGFuZC1hbG9uZSBsb2NhbCBkYXkgb2Ygd2VlayAgfCAgQyogfCBMb2NhbGl6ZWQgaG91ciB3LyBkYXkgcGVyaW9kICAgfFxuICAgKiB8ICBkICB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICB8ICBEICB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gICAqIHwgIGUgIHwgTG9jYWwgZGF5IG9mIHdlZWsgICAgICAgICAgICAgIHwgIEUgIHwgRGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgICAgIHxcbiAgICogfCAgZiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgRiogfCBEYXkgb2Ygd2VlayBpbiBtb250aCAgICAgICAgICAgfFxuICAgKiB8ICBnKiB8IE1vZGlmaWVkIEp1bGlhbiBkYXkgICAgICAgICAgICB8ICBHICB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAgICogfCAgaSEgfCBJU08gZGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgfCAgSSEgfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgfFxuICAgKiB8ICBqKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8ICBKKiB8IExvY2FsaXplZCBob3VyIHcvbyBkYXkgcGVyaW9kICB8XG4gICAqIHwgIGsgIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgIHwgIEsgIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgIHxcbiAgICogfCAgbCogfCAoZGVwcmVjYXRlZCkgICAgICAgICAgICAgICAgICAgfCAgTCAgfCBTdGFuZC1hbG9uZSBtb250aCAgICAgICAgICAgICAgfFxuICAgKiB8ICBtICB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBNICB8IE1vbnRoICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAqIHwgIG4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICogfCAgbyEgfCBPcmRpbmFsIG51bWJlciBtb2RpZmllciAgICAgICAgfCAgTyAgfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgfFxuICAgKiB8ICBwISB8IExvbmcgbG9jYWxpemVkIHRpbWUgICAgICAgICAgICB8ICBQISB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICB8XG4gICAqIHwgIHEgIHwgU3RhbmQtYWxvbmUgcXVhcnRlciAgICAgICAgICAgIHwgIFEgIHwgUXVhcnRlciAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICogfCAgciogfCBSZWxhdGVkIEdyZWdvcmlhbiB5ZWFyICAgICAgICAgfCAgUiEgfCBJU08gd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICAgfFxuICAgKiB8ICBzICB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICB8ICBTICB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICB8XG4gICAqIHwgIHQhIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgIHwgIFQhIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgIHxcbiAgICogfCAgdSAgfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgfCAgVSogfCBDeWNsaWMgeWVhciAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8ICB2KiB8IFRpbWV6b25lIChnZW5lcmljIG5vbi1sb2NhdC4pICB8ICBWKiB8IFRpbWV6b25lIChsb2NhdGlvbikgICAgICAgICAgICB8XG4gICAqIHwgIHcgIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgIHwgIFcqIHwgV2VlayBvZiBtb250aCAgICAgICAgICAgICAgICAgIHxcbiAgICogfCAgeCAgfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgfCAgWCAgfCBUaW1lem9uZSAoSVNPLTg2MDEpICAgICAgICAgICAgfFxuICAgKiB8ICB5ICB8IFllYXIgKGFicykgICAgICAgICAgICAgICAgICAgICB8ICBZICB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICB8XG4gICAqIHwgIHogIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pIHwgIFoqIHwgVGltZXpvbmUgKGFsaWFzZXMpICAgICAgICAgICAgIHxcbiAgICpcbiAgICogTGV0dGVycyBtYXJrZWQgYnkgKiBhcmUgbm90IGltcGxlbWVudGVkIGJ1dCByZXNlcnZlZCBieSBVbmljb2RlIHN0YW5kYXJkLlxuICAgKlxuICAgKiBMZXR0ZXJzIG1hcmtlZCBieSAhIGFyZSBub24tc3RhbmRhcmQsIGJ1dCBpbXBsZW1lbnRlZCBieSBkYXRlLWZuczpcbiAgICogLSBgb2AgbW9kaWZpZXMgdGhlIHByZXZpb3VzIHRva2VuIHRvIHR1cm4gaXQgaW50byBhbiBvcmRpbmFsIChzZWUgYGZvcm1hdGAgZG9jcylcbiAgICogLSBgaWAgaXMgSVNPIGRheSBvZiB3ZWVrLiBGb3IgYGlgIGFuZCBgaWlgIGlzIHJldHVybnMgbnVtZXJpYyBJU08gd2VlayBkYXlzLFxuICAgKiAgIGkuZS4gNyBmb3IgU3VuZGF5LCAxIGZvciBNb25kYXksIGV0Yy5cbiAgICogLSBgSWAgaXMgSVNPIHdlZWsgb2YgeWVhciwgYXMgb3Bwb3NlZCB0byBgd2Agd2hpY2ggaXMgbG9jYWwgd2VlayBvZiB5ZWFyLlxuICAgKiAtIGBSYCBpcyBJU08gd2Vlay1udW1iZXJpbmcgeWVhciwgYXMgb3Bwb3NlZCB0byBgWWAgd2hpY2ggaXMgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhci5cbiAgICogICBgUmAgaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGBJYCBhbmQgYGlgXG4gICAqICAgZm9yIHVuaXZlcnNhbCBJU08gd2Vlay1udW1iZXJpbmcgZGF0ZSwgd2hlcmVhc1xuICAgKiAgIGBZYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHdgIGFuZCBgZWBcbiAgICogICBmb3Igd2Vlay1udW1iZXJpbmcgZGF0ZSBzcGVjaWZpYyB0byB0aGUgbG9jYWxlLlxuICAgKiAtIGBQYCBpcyBsb25nIGxvY2FsaXplZCBkYXRlIGZvcm1hdFxuICAgKiAtIGBwYCBpcyBsb25nIGxvY2FsaXplZCB0aW1lIGZvcm1hdFxuICAgKi9cblxufTtcbnZhciBmb3JtYXR0ZXJzID0ge1xuICAvLyBFcmFcbiAgRzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBlcmEgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgPiAwID8gMSA6IDA7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBBRCwgQkNcbiAgICAgIGNhc2UgJ0cnOlxuICAgICAgY2FzZSAnR0cnOlxuICAgICAgY2FzZSAnR0dHJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEEsIEJcblxuICAgICAgY2FzZSAnR0dHR0cnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93J1xuICAgICAgICB9KTtcbiAgICAgIC8vIEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0XG5cbiAgICAgIGNhc2UgJ0dHR0cnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgLy8gT3JkaW5hbCBudW1iZXJcbiAgICBpZiAodG9rZW4gPT09ICd5bycpIHtcbiAgICAgIHZhciBzaWduZWRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoeWVhciwge1xuICAgICAgICB1bml0OiAneWVhcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMueShkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgWTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBzaWduZWRXZWVrWWVhciA9IGdldFVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgdmFyIHdlZWtZZWFyID0gc2lnbmVkV2Vla1llYXIgPiAwID8gc2lnbmVkV2Vla1llYXIgOiAxIC0gc2lnbmVkV2Vla1llYXI7IC8vIFR3byBkaWdpdCB5ZWFyXG5cbiAgICBpZiAodG9rZW4gPT09ICdZWScpIHtcbiAgICAgIHZhciB0d29EaWdpdFllYXIgPSB3ZWVrWWVhciAlIDEwMDtcbiAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModHdvRGlnaXRZZWFyLCAyKTtcbiAgICB9IC8vIE9yZGluYWwgbnVtYmVyXG5cblxuICAgIGlmICh0b2tlbiA9PT0gJ1lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vla1llYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9IC8vIFBhZGRpbmdcblxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh3ZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgUjogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIGlzb1dlZWtZZWFyID0gZ2V0VVRDSVNPV2Vla1llYXIoZGF0ZSk7IC8vIFBhZGRpbmdcblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvV2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEV4dGVuZGVkIHllYXIuIFRoaXMgaXMgYSBzaW5nbGUgbnVtYmVyIGRlc2lnbmF0aW5nIHRoZSB5ZWFyIG9mIHRoaXMgY2FsZW5kYXIgc3lzdGVtLlxuICAvLyBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgbG9jYWxpemVycyBhcmUgQi5DLiB5ZWFyczpcbiAgLy8gfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAgLy8gfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAgLy8gfCBBQyAxIHwgICAxIHwgICAxIHxcbiAgLy8gfCBCQyAxIHwgICAxIHwgICAwIHxcbiAgLy8gfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAgLy8gQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICAvLyB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQuXG4gIHU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gUXVhcnRlclxuICBROiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdRJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG5cbiAgICAgIGNhc2UgJ1FRJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuXG4gICAgICBjYXNlICdRbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuXG4gICAgICBjYXNlICdRUVEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG5cbiAgICAgIGNhc2UgJ1FRUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuXG4gICAgICBjYXNlICdRUVFRJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIHF1YXJ0ZXJcbiAgcTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSAvIDMpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAncSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuXG4gICAgICBjYXNlICdxcSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcblxuICAgICAgY2FzZSAncW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7XG4gICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcblxuICAgICAgY2FzZSAncXFxJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuXG4gICAgICBjYXNlICdxcXFxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cblxuICAgICAgY2FzZSAncXFxcSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnTSc6XG4gICAgICBjYXNlICdNTSc6XG4gICAgICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuTShkYXRlLCB0b2tlbik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG5cbiAgICAgIGNhc2UgJ01vJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobW9udGggKyAxLCB7XG4gICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuXG4gICAgICBjYXNlICdNTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBKLCBGLCAuLi4sIERcblxuICAgICAgY2FzZSAnTU1NTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcblxuICAgICAgY2FzZSAnTU1NTSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIG1vbnRoXG4gIEw6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAuLi4sIDEyXG4gICAgICBjYXNlICdMJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhtb250aCArIDEpO1xuICAgICAgLy8gMDEsIDAyLCAuLi4sIDEyXG5cbiAgICAgIGNhc2UgJ0xMJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuXG4gICAgICBjYXNlICdMbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcblxuICAgICAgY2FzZSAnTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG5cbiAgICAgIGNhc2UgJ0xMTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG5cbiAgICAgIGNhc2UgJ0xMTEwnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBMb2NhbCB3ZWVrIG9mIHllYXJcbiAgdzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciB3ZWVrID0gZ2V0VVRDV2VlayhkYXRlLCBvcHRpb25zKTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ3dvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWsgb2YgeWVhclxuICBJOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGlzb1dlZWsgPSBnZXRVVENJU09XZWVrKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSAnSW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29XZWVrLCB7XG4gICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdkbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDRGF0ZSgpLCB7XG4gICAgICAgIHVuaXQ6ICdkYXRlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5kKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHllYXJcbiAgRDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZlllYXIgPSBnZXRVVENEYXlPZlllYXIoZGF0ZSk7XG5cbiAgICBpZiAodG9rZW4gPT09ICdEbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRheU9mWWVhciwge1xuICAgICAgICB1bml0OiAnZGF5T2ZZZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXlPZlllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIERheSBvZiB3ZWVrXG4gIEU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFR1ZVxuICAgICAgY2FzZSAnRSc6XG4gICAgICBjYXNlICdFRSc6XG4gICAgICBjYXNlICdFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdFRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnRUVFRSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgZGF5IG9mIHdlZWtcbiAgZTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChOdGggZGF5IG9mIHdlZWsgd2l0aCBjdXJyZW50IGxvY2FsZSBvciB3ZWVrU3RhcnRzT24pXG4gICAgICBjYXNlICdlJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG5cbiAgICAgIGNhc2UgJ2VlJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcblxuICAgICAgY2FzZSAnZW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihsb2NhbERheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdlZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnZWVlZSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWtcbiAgYzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChzYW1lIGFzIGluIGBlYClcbiAgICAgIGNhc2UgJ2MnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcblxuICAgICAgY2FzZSAnY2MnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGxvY2FsRGF5T2ZXZWVrLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG5cbiAgICAgIGNhc2UgJ2NvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnY2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2NjY2MnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIElTTyBkYXkgb2Ygd2Vla1xuICBpOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGlzb0RheU9mV2VlayA9IGRheU9mV2VlayA9PT0gMCA/IDcgOiBkYXlPZldlZWs7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAyXG4gICAgICBjYXNlICdpJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhpc29EYXlPZldlZWspO1xuICAgICAgLy8gMDJcblxuICAgICAgY2FzZSAnaWknOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb0RheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDJuZFxuXG4gICAgICBjYXNlICdpbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb0RheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlXG5cbiAgICAgIGNhc2UgJ2lpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2lpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdpaWlpJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgY2FzZSAnYWEnOlxuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdhYWFhJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSwgUE0sIG1pZG5pZ2h0LCBub29uXG4gIGI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgIGlmIChob3VycyA9PT0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID09PSAwKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1pZG5pZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdiJzpcbiAgICAgIGNhc2UgJ2JiJzpcbiAgICAgIGNhc2UgJ2JiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdiYmJiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYmJiYic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gaW4gdGhlIG1vcm5pbmcsIGluIHRoZSBhZnRlcm5vb24sIGluIHRoZSBldmVuaW5nLCBhdCBuaWdodFxuICBCOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWU7XG5cbiAgICBpZiAoaG91cnMgPj0gMTcpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uZXZlbmluZztcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmFmdGVybm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDQpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubW9ybmluZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5uaWdodDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdCJzpcbiAgICAgIGNhc2UgJ0JCJzpcbiAgICAgIGNhc2UgJ0JCQic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdCQkJCQic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnQkJCQic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gSG91ciBbMS0xMl1cbiAgaDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ2hvJykge1xuICAgICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG4gICAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMTI7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuaChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdIbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDSG91cnMoKSwge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuSChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMTFdXG4gIEs6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMjtcblxuICAgIGlmICh0b2tlbiA9PT0gJ0tvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGhvdXJzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBIb3VyIFsxLTI0XVxuICBrOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIGlmIChob3VycyA9PT0gMCkgaG91cnMgPSAyNDtcblxuICAgIGlmICh0b2tlbiA9PT0gJ2tvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGhvdXJzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ21vJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENNaW51dGVzKCksIHtcbiAgICAgICAgdW5pdDogJ21pbnV0ZSdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMubShkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIFNlY29uZFxuICBzOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnc28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ1NlY29uZHMoKSwge1xuICAgICAgICB1bml0OiAnc2Vjb25kJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5zKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gRnJhY3Rpb24gb2Ygc2Vjb25kXG4gIFM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuUyhkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gSWYgb2Zmc2V0IGlzIDAsIG91dHB1dCBpcyBhbHdheXMgYCdaJ2ApXG4gIFg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgaWYgKHRpbWV6b25lT2Zmc2V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gJ1onO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICdYJzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWGBcblxuICAgICAgY2FzZSAnWFhYWCc6XG4gICAgICBjYXNlICdYWCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhYYFxuXG4gICAgICBjYXNlICdYWFhYWCc6XG4gICAgICBjYXNlICdYWFgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGAnKzAwOjAwJ2Agb3IgZXF1aXZhbGVudClcbiAgeDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBIb3VycyBhbmQgb3B0aW9uYWwgbWludXRlc1xuICAgICAgY2FzZSAneCc6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXModGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgeHhgXG5cbiAgICAgIGNhc2UgJ3h4eHgnOlxuICAgICAgY2FzZSAneHgnOlxuICAgICAgICAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4eGBcblxuICAgICAgY2FzZSAneHh4eHgnOlxuICAgICAgY2FzZSAneHh4JzogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aCBgOmAgZGVsaW1pdGVyXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChHTVQpXG4gIE86IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gU2hvcnRcbiAgICAgIGNhc2UgJ08nOlxuICAgICAgY2FzZSAnT08nOlxuICAgICAgY2FzZSAnT09PJzpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmVTaG9ydCh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICAgIC8vIExvbmdcblxuICAgICAgY2FzZSAnT09PTyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXRpb24pXG4gIHo6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gU2hvcnRcbiAgICAgIGNhc2UgJ3onOlxuICAgICAgY2FzZSAnenonOlxuICAgICAgY2FzZSAnenp6JzpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmVTaG9ydCh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICAgIC8vIExvbmdcblxuICAgICAgY2FzZSAnenp6eic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFNlY29uZHMgdGltZXN0YW1wXG4gIHQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCkgLyAxMDAwKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICBUOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXN0YW1wID0gb3JpZ2luYWxEYXRlLmdldFRpbWUoKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVTaG9ydChvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9IE1hdGguZmxvb3IoYWJzT2Zmc2V0IC8gNjApO1xuICB2YXIgbWludXRlcyA9IGFic09mZnNldCAlIDYwO1xuXG4gIGlmIChtaW51dGVzID09PSAwKSB7XG4gICAgcmV0dXJuIHNpZ24gKyBTdHJpbmcoaG91cnMpO1xuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICByZXR1cm4gc2lnbiArIFN0cmluZyhob3VycykgKyBkZWxpbWl0ZXIgKyBhZGRMZWFkaW5nWmVyb3MobWludXRlcywgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyhvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIGlmIChvZmZzZXQgJSA2MCA9PT0gMCkge1xuICAgIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgICByZXR1cm4gc2lnbiArIGFkZExlYWRpbmdaZXJvcyhNYXRoLmFicyhvZmZzZXQpIC8gNjAsIDIpO1xuICB9XG5cbiAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIHZhciBkZWxpbWl0ZXIgPSBkaXJ0eURlbGltaXRlciB8fCAnJztcbiAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICB2YXIgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgdmFyIGhvdXJzID0gYWRkTGVhZGluZ1plcm9zKE1hdGguZmxvb3IoYWJzT2Zmc2V0IC8gNjApLCAyKTtcbiAgdmFyIG1pbnV0ZXMgPSBhZGRMZWFkaW5nWmVyb3MoYWJzT2Zmc2V0ICUgNjAsIDIpO1xuICByZXR1cm4gc2lnbiArIGhvdXJzICsgZGVsaW1pdGVyICsgbWludXRlcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0dGVyczsiLCJpbXBvcnQgdG9EYXRlIGZyb20gJy4uLy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSAnLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanMnO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrWWVhciBmcm9tICcuLi9zdGFydE9mVVRDV2Vla1llYXIvaW5kZXguanMnO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tICcuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnO1xudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDV2VlayhkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkaWZmID0gc3RhcnRPZlVUQ1dlZWsoZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpIC0gc3RhcnRPZlVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpLmdldFRpbWUoKTsgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcblxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gJy4uLy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSAnLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanMnO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrWWVhciBmcm9tICcuLi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanMnO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tICcuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnO1xudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2VlayhkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkaWZmID0gc3RhcnRPZlVUQ0lTT1dlZWsoZGF0ZSkuZ2V0VGltZSgpIC0gc3RhcnRPZlVUQ0lTT1dlZWtZZWFyKGRhdGUpLmdldFRpbWUoKTsgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcblxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gJy4uLy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL3JlcXVpcmVkQXJncy9pbmRleC5qcyc7XG52YXIgTUlMTElTRUNPTkRTX0lOX0RBWSA9IDg2NDAwMDAwOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDRGF5T2ZZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlllYXJUaW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgdmFyIGRpZmZlcmVuY2UgPSB0aW1lc3RhbXAgLSBzdGFydE9mWWVhclRpbWVzdGFtcDtcbiAgcmV0dXJuIE1hdGguZmxvb3IoZGlmZmVyZW5jZSAvIE1JTExJU0VDT05EU19JTl9EQVkpICsgMTtcbn0iLCJmdW5jdGlvbiBkYXRlTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgJ1AnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ1BQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ1BQUFAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdwcCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwcCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdwcHBwJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRhdGVUaW1lTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHZhciBtYXRjaFJlc3VsdCA9IHBhdHRlcm4ubWF0Y2goLyhQKykocCspPy8pO1xuICB2YXIgZGF0ZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsxXTtcbiAgdmFyIHRpbWVQYXR0ZXJuID0gbWF0Y2hSZXN1bHRbMl07XG5cbiAgaWYgKCF0aW1lUGF0dGVybikge1xuICAgIHJldHVybiBkYXRlTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKTtcbiAgfVxuXG4gIHZhciBkYXRlVGltZUZvcm1hdDtcblxuICBzd2l0Y2ggKGRhdGVQYXR0ZXJuKSB7XG4gICAgY2FzZSAnUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1BQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1BQUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFBQUCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gZGF0ZVRpbWVGb3JtYXQucmVwbGFjZSgne3tkYXRlfX0nLCBkYXRlTG9uZ0Zvcm1hdHRlcihkYXRlUGF0dGVybiwgZm9ybWF0TG9uZykpLnJlcGxhY2UoJ3t7dGltZX19JywgdGltZUxvbmdGb3JtYXR0ZXIodGltZVBhdHRlcm4sIGZvcm1hdExvbmcpKTtcbn1cblxudmFyIGxvbmdGb3JtYXR0ZXJzID0ge1xuICBwOiB0aW1lTG9uZ0Zvcm1hdHRlcixcbiAgUDogZGF0ZVRpbWVMb25nRm9ybWF0dGVyXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9uZ0Zvcm1hdHRlcnM7IiwidmFyIHByb3RlY3RlZERheU9mWWVhclRva2VucyA9IFsnRCcsICdERCddO1xudmFyIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zID0gWydZWScsICdZWVlZJ107XG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4odG9rZW4pIHtcbiAgcmV0dXJuIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0aHJvd1Byb3RlY3RlZEVycm9yKHRva2VuLCBmb3JtYXQsIGlucHV0KSB7XG4gIGlmICh0b2tlbiA9PT0gJ1lZWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdZWScpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgeXlgIGluc3RlYWQgb2YgYFlZYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnRCcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0REJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH1cbn0iLCJpbXBvcnQgaXNWYWxpZCBmcm9tICcuLi9pc1ZhbGlkL2luZGV4LmpzJztcbmltcG9ydCBkZWZhdWx0TG9jYWxlIGZyb20gJy4uL2xvY2FsZS9lbi1VUy9pbmRleC5qcyc7XG5pbXBvcnQgc3ViTWlsbGlzZWNvbmRzIGZyb20gJy4uL3N1Yk1pbGxpc2Vjb25kcy9pbmRleC5qcyc7XG5pbXBvcnQgdG9EYXRlIGZyb20gJy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybWF0dGVycyBmcm9tICcuLi9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzJztcbmltcG9ydCBsb25nRm9ybWF0dGVycyBmcm9tICcuLi9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy9pbmRleC5qcyc7XG5pbXBvcnQgZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyBmcm9tICcuLi9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanMnO1xuaW1wb3J0IHsgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbiwgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuLCB0aHJvd1Byb3RlY3RlZEVycm9yIH0gZnJvbSAnLi4vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanMnO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tICcuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJzsgLy8gVGhpcyBSZWdFeHAgY29uc2lzdHMgb2YgdGhyZWUgcGFydHMgc2VwYXJhdGVkIGJ5IGB8YDpcbi8vIC0gW3lZUXFNTHdJZERlY2loSEtrbXNdbyBtYXRjaGVzIGFueSBhdmFpbGFibGUgb3JkaW5hbCBudW1iZXIgdG9rZW5cbi8vICAgKG9uZSBvZiB0aGUgY2VydGFpbiBsZXR0ZXJzIGZvbGxvd2VkIGJ5IGBvYClcbi8vIC0gKFxcdylcXDEqIG1hdGNoZXMgYW55IHNlcXVlbmNlcyBvZiB0aGUgc2FtZSBsZXR0ZXJcbi8vIC0gJycgbWF0Y2hlcyB0d28gcXVvdGUgY2hhcmFjdGVycyBpbiBhIHJvd1xuLy8gLSAnKCcnfFteJ10pKygnfCQpIG1hdGNoZXMgYW55dGhpbmcgc3Vycm91bmRlZCBieSB0d28gcXVvdGUgY2hhcmFjdGVycyAoJyksXG4vLyAgIGV4Y2VwdCBhIHNpbmdsZSBxdW90ZSBzeW1ib2wsIHdoaWNoIGVuZHMgdGhlIHNlcXVlbmNlLlxuLy8gICBUd28gcXVvdGUgY2hhcmFjdGVycyBkbyBub3QgZW5kIHRoZSBzZXF1ZW5jZS5cbi8vICAgSWYgdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc2luZ2xlIHF1b3RlXG4vLyAgIHRoZW4gdGhlIHNlcXVlbmNlIHdpbGwgY29udGludWUgdW50aWwgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLlxuLy8gLSAuIG1hdGNoZXMgYW55IHNpbmdsZSBjaGFyYWN0ZXIgdW5tYXRjaGVkIGJ5IHByZXZpb3VzIHBhcnRzIG9mIHRoZSBSZWdFeHBzXG5cbnZhciBmb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1t5WVFxTUx3SWREZWNpaEhLa21zXW98KFxcdylcXDEqfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nOyAvLyBUaGlzIFJlZ0V4cCBjYXRjaGVzIHN5bWJvbHMgZXNjYXBlZCBieSBxdW90ZXMsIGFuZCBhbHNvXG4vLyBzZXF1ZW5jZXMgb2Ygc3ltYm9scyBQLCBwLCBhbmQgdGhlIGNvbWJpbmF0aW9ucyBsaWtlIGBQUFBQUFBQcHBwcHBgXG5cbnZhciBsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9QK3ArfFArfHArfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nO1xudmFyIGVzY2FwZWRTdHJpbmdSZWdFeHAgPSAvXicoW15dKj8pJz8kLztcbnZhciBkb3VibGVRdW90ZVJlZ0V4cCA9IC8nJy9nO1xudmFyIHVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwID0gL1thLXpBLVpdLztcbi8qKlxuICogQG5hbWUgZm9ybWF0XG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEZvcm1hdCB0aGUgZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nIGluIHRoZSBnaXZlbiBmb3JtYXQuIFRoZSByZXN1bHQgbWF5IHZhcnkgYnkgbG9jYWxlLlxuICpcbiAqID4g4pqg77iPIFBsZWFzZSBub3RlIHRoYXQgdGhlIGBmb3JtYXRgIHRva2VucyBkaWZmZXIgZnJvbSBNb21lbnQuanMgYW5kIG90aGVyIGxpYnJhcmllcy5cbiAqID4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqIFRoZSBjaGFyYWN0ZXJzIHdyYXBwZWQgYmV0d2VlbiB0d28gc2luZ2xlIHF1b3RlcyBjaGFyYWN0ZXJzICgnKSBhcmUgZXNjYXBlZC5cbiAqIFR3byBzaW5nbGUgcXVvdGVzIGluIGEgcm93LCB3aGV0aGVyIGluc2lkZSBvciBvdXRzaWRlIGEgcXVvdGVkIHNlcXVlbmNlLCByZXByZXNlbnQgYSAncmVhbCcgc2luZ2xlIHF1b3RlLlxuICogKHNlZSB0aGUgbGFzdCBleGFtcGxlKVxuICpcbiAqIEZvcm1hdCBvZiB0aGUgc3RyaW5nIGlzIGJhc2VkIG9uIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGVcbiAqIHdpdGggYSBmZXcgYWRkaXRpb25zIChzZWUgbm90ZSA3IGJlbG93IHRoZSB0YWJsZSkuXG4gKlxuICogQWNjZXB0ZWQgcGF0dGVybnM6XG4gKiB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQYXR0ZXJuIHwgUmVzdWx0IGV4YW1wbGVzICAgICAgICAgICAgICAgICAgIHwgTm90ZXMgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLXxcbiAqIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEcuLkdHRyAgfCBBRCwgQkMgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHICAgIHwgQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3QgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHR0cgICB8IEEsIEIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQ2FsZW5kYXIgeWVhciAgICAgICAgICAgICAgICAgICB8IHkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5byAgICAgIHwgNDR0aCwgMXN0LCAwdGgsIDE3dGggICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5ICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eXkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICB8IFkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZbyAgICAgIHwgNDR0aCwgMXN0LCAxOTAwdGgsIDIwMTd0aCAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWVkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgICB8IFIgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUiAgICAgIHwgLTQzLCAwMCwgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSICAgICB8IC0wNDMsIDAwMCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlIgICAgfCAtMDA0MywgMDAwMCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSUiAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1LDcgfFxuICogfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgIHwgdSAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1ICAgICAgfCAtNDMsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXUgICAgIHwgLTA0MywgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dSAgICB8IC0wMDQzLCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXV1ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IFF1YXJ0ZXIgKGZvcm1hdHRpbmcpICAgICAgICAgICAgfCBRICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVFRICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IFF1YXJ0ZXIgKHN0YW5kLWFsb25lKSAgICAgICAgICAgfCBxICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXFxICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IE1vbnRoIChmb3JtYXR0aW5nKSAgICAgICAgICAgICAgfCBNICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU0gICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTSAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU1NICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1vbnRoIChzdGFuZC1hbG9uZSkgICAgICAgICAgICAgfCBMICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTEwgICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTCAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTExMICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgfCB3ICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHd3ICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICAgfCBJICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElJICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICAgfCBkICAgICAgIHwgMSwgMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDMxc3QgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRkICAgICAgfCAwMSwgMDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICAgfCBEICAgICAgIHwgMSwgMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDM2NXRoLCAzNjZ0aCAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREICAgICAgfCAwMSwgMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREQgICAgIHwgMDAxLCAwMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRERERCAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgRGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgICAgICB8IEUuLkVFRSAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFRSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFN1LCBTYSAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgfCBpICAgICAgIHwgMSwgMiwgMywgLi4uLCA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDd0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpICAgICAgfCAwMSwgMDIsIC4uLiwgMDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWkgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaWkgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTdSwgU2EgICAgICAgIHwgNyAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgIHwgZSAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZSAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWVlICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU3UsIFNhICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKHN0YW5kLWFsb25lKSB8IGMgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2MgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjYyAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2MgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjYyAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFN1LCBTYSAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhLi5hYWEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYSAgICB8IGEubS4sIHAubS4gICAgICAgICAgICAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWFhICAgfCBhLCBwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgfCBiLi5iYmIgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYiAgICB8IGEubS4sIHAubS4sIG5vb24sIG1pZG5pZ2h0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmJiICAgfCBhLCBwLCBuLCBtaSAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICAgfCBCLi5CQkIgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQiAgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkJCICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICAgfCBoICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDEydGggICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhoICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICAgfCBIICAgICAgIHwgMCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSG8gICAgICB8IDB0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhIICAgICAgfCAwMCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICAgfCBLICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMCAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDB0aCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtLICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICAgfCBrICAgICAgIHwgMjQsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga28gICAgICB8IDI0dGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtrICAgICAgfCAyNCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW8gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1tICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc28gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNzICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICAgfCBTICAgICAgIHwgMCwgMSwgLi4uLCA5ICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1MgICAgICB8IDAwLCAwMSwgLi4uLCA5OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTUyAgICAgfCAwMDAsIDAwMDEsIC4uLiwgOTk5ICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1NTICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy8gWikgICAgICAgIHwgWCAgICAgICB8IC0wOCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYICAgICAgfCAtMDgwMCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFggICAgIHwgLTA4OjAwLCArMDU6MzAsIFogICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWCAgICB8IC0wODAwLCArMDUzMCwgWiwgKzEyMzQ1NiAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFhYICAgfCAtMDg6MDAsICswNTozMCwgWiwgKzEyOjM0OjU2ICAgICAgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICAgfCB4ICAgICAgIHwgLTA4LCArMDUzMCwgKzAwICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHggICAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eCAgICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4ICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCwgKzEyMzQ1NiAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eHggICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAsICsxMjozNDo1NiB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgICB8IE8uLi5PT08gfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBPT09PICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiAgICAgfFxuICogfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgIHwgei4uLnp6eiB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8IDYgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHp6enogICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyLDYgICB8XG4gKiB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICAgfCB0ICAgICAgIHwgNTEyOTY5NTIwICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdHQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICB8IFQgICAgICAgfCA1MTI5Njk1MjA5MDAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBUVCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgIHwgUCAgICAgICB8IDA1LzI5LzE0NTMgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQICAgICAgfCBNYXkgMjksIDE0NTMgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFAgICAgIHwgTWF5IDI5dGgsIDE0NTMgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUCAgICB8IFN1bmRheSwgTWF5IDI5dGgsIDE0NTMgICAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgICB8IHAgICAgICAgfCAxMjowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcCAgICAgIHwgMTI6MDA6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwICAgICB8IDEyOjAwOjAwIEFNIEdNVCsyICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcHAgICAgfCAxMjowMDowMCBBTSBHTVQrMDI6MDAgICAgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IENvbWJpbmF0aW9uIG9mIGRhdGUgYW5kIHRpbWUgICAgfCBQcCAgICAgIHwgMDUvMjkvMTQ1MywgMTI6MDAgQU0gICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBwcCAgICB8IE1heSAyOSwgMTQ1MywgMTI6MDA6MDAgQU0gICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUHBwcCAgfCBNYXkgMjl0aCwgMTQ1MyBhdCAuLi4gICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQcHBwcHwgU3VuZGF5LCBNYXkgMjl0aCwgMTQ1MyBhdCAuLi4gICAgIHwgMiw3ICAgfFxuICogTm90ZXM6XG4gKiAxLiBcIkZvcm1hdHRpbmdcIiB1bml0cyAoZS5nLiBmb3JtYXR0aW5nIHF1YXJ0ZXIpIGluIHRoZSBkZWZhdWx0IGVuLVVTIGxvY2FsZVxuICogICAgYXJlIHRoZSBzYW1lIGFzIFwic3RhbmQtYWxvbmVcIiB1bml0cywgYnV0IGFyZSBkaWZmZXJlbnQgaW4gc29tZSBsYW5ndWFnZXMuXG4gKiAgICBcIkZvcm1hdHRpbmdcIiB1bml0cyBhcmUgZGVjbGluZWQgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBvZiB0aGUgbGFuZ3VhZ2VcbiAqICAgIGluIHRoZSBjb250ZXh0IG9mIGEgZGF0ZS4gXCJTdGFuZC1hbG9uZVwiIHVuaXRzIGFyZSBhbHdheXMgbm9taW5hdGl2ZSBzaW5ndWxhcjpcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIExMTEwnLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIE1NTU0nLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkdSdgXG4gKlxuICogMi4gQW55IHNlcXVlbmNlIG9mIHRoZSBpZGVudGljYWwgbGV0dGVycyBpcyBhIHBhdHRlcm4sIHVubGVzcyBpdCBpcyBlc2NhcGVkIGJ5XG4gKiAgICB0aGUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgKHNlZSBiZWxvdykuXG4gKiAgICBJZiB0aGUgc2VxdWVuY2UgaXMgbG9uZ2VyIHRoYW4gbGlzdGVkIGluIHRhYmxlIChlLmcuIGBFRUVFRUVFRUVFRWApXG4gKiAgICB0aGUgb3V0cHV0IHdpbGwgYmUgdGhlIHNhbWUgYXMgZGVmYXVsdCBwYXR0ZXJuIGZvciB0aGlzIHVuaXQsIHVzdWFsbHlcbiAqICAgIHRoZSBsb25nZXN0IG9uZSAoaW4gY2FzZSBvZiBJU08gd2Vla2RheXMsIGBFRUVFYCkuIERlZmF1bHQgcGF0dGVybnMgZm9yIHVuaXRzXG4gKiAgICBhcmUgbWFya2VkIHdpdGggXCIyXCIgaW4gdGhlIGxhc3QgY29sdW1uIG9mIHRoZSB0YWJsZS5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTScpIC8vPT4gJ05vdidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU0nKSAvLz0+ICdOJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogMy4gU29tZSBwYXR0ZXJucyBjb3VsZCBiZSB1bmxpbWl0ZWQgbGVuZ3RoIChzdWNoIGFzIGB5eXl5eXl5eWApLlxuICogICAgVGhlIG91dHB1dCB3aWxsIGJlIHBhZGRlZCB3aXRoIHplcm9zIHRvIG1hdGNoIHRoZSBsZW5ndGggb2YgdGhlIHBhdHRlcm4uXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICd5eXl5eXl5eScpIC8vPT4gJzAwMDAyMDE3J2BcbiAqXG4gKiA0LiBgUVFRUVFgIGFuZCBgcXFxcXFgIGNvdWxkIGJlIG5vdCBzdHJpY3RseSBudW1lcmljYWwgaW4gc29tZSBsb2NhbGVzLlxuICogICAgVGhlc2UgdG9rZW5zIHJlcHJlc2VudCB0aGUgc2hvcnRlc3QgZm9ybSBvZiB0aGUgcXVhcnRlci5cbiAqXG4gKiA1LiBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgcGF0dGVybnMgYXJlIEIuQy4geWVhcnM6XG4gKlxuICogICAgfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS18LS0tLS18XG4gKiAgICB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICogICAgfCBCQyAxIHwgICAxIHwgICAwIHxcbiAqICAgIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gKlxuICogICAgQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICogICAgd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkOlxuICpcbiAqICAgIHwgWWVhciB8IGB5eWAgfCBgdXVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS0tfC0tLS0tLXxcbiAqICAgIHwgMSAgICB8ICAgMDEgfCAgIDAxIHxcbiAqICAgIHwgMTQgICB8ICAgMTQgfCAgIDE0IHxcbiAqICAgIHwgMzc2ICB8ICAgNzYgfCAgMzc2IHxcbiAqICAgIHwgMTQ1MyB8ICAgNTMgfCAxNDUzIHxcbiAqXG4gKiAgICBUaGUgc2FtZSBkaWZmZXJlbmNlIGlzIHRydWUgZm9yIGxvY2FsIGFuZCBJU08gd2Vlay1udW1iZXJpbmcgeWVhcnMgKGBZYCBhbmQgYFJgKSxcbiAqICAgIGV4Y2VwdCBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFycyBhcmUgZGVwZW5kZW50IG9uIGBvcHRpb25zLndlZWtTdGFydHNPbmBcbiAqICAgIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIChjb21wYXJlIFtnZXRJU09XZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRJU09XZWVrWWVhcn1cbiAqICAgIGFuZCBbZ2V0V2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0V2Vla1llYXJ9KS5cbiAqXG4gKiA2LiBTcGVjaWZpYyBub24tbG9jYXRpb24gdGltZXpvbmVzIGFyZSBjdXJyZW50bHkgdW5hdmFpbGFibGUgaW4gYGRhdGUtZm5zYCxcbiAqICAgIHNvIHJpZ2h0IG5vdyB0aGVzZSB0b2tlbnMgZmFsbCBiYWNrIHRvIEdNVCB0aW1lem9uZXMuXG4gKlxuICogNy4gVGhlc2UgcGF0dGVybnMgYXJlIG5vdCBpbiB0aGUgVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogICAgLSBgaWA6IElTTyBkYXkgb2Ygd2Vla1xuICogICAgLSBgSWA6IElTTyB3ZWVrIG9mIHllYXJcbiAqICAgIC0gYFJgOiBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICogICAgLSBgdGA6IHNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBUYDogbWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgb2A6IG9yZGluYWwgbnVtYmVyIG1vZGlmaWVyXG4gKiAgICAtIGBQYDogbG9uZyBsb2NhbGl6ZWQgZGF0ZVxuICogICAgLSBgcGA6IGxvbmcgbG9jYWxpemVkIHRpbWVcbiAqXG4gKiA4LiBgWVlgIGFuZCBgWVlZWWAgdG9rZW5zIHJlcHJlc2VudCB3ZWVrLW51bWJlcmluZyB5ZWFycyBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCB5ZWFycy5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqXG4gKiA5LiBgRGAgYW5kIGBERGAgdG9rZW5zIHJlcHJlc2VudCBkYXlzIG9mIHRoZSB5ZWFyIGJ1dCB0aGV5IGFyZSBvZnRoZW4gY29uZnVzZWQgd2l0aCBkYXlzIG9mIHRoZSBtb250aC5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiAtIFRoZSBzZWNvbmQgYXJndW1lbnQgaXMgbm93IHJlcXVpcmVkIGZvciB0aGUgc2FrZSBvZiBleHBsaWNpdG5lc3MuXG4gKlxuICogICBgYGBqYXZhc2NyaXB0XG4gKiAgIC8vIEJlZm9yZSB2Mi4wLjBcbiAqICAgZm9ybWF0KG5ldyBEYXRlKDIwMTYsIDAsIDEpKVxuICpcbiAqICAgLy8gdjIuMC4wIG9ud2FyZFxuICogICBmb3JtYXQobmV3IERhdGUoMjAxNiwgMCwgMSksIFwieXl5eS1NTS1kZCdUJ0hIOm1tOnNzLlNTU3h4eFwiKVxuICogICBgYGBcbiAqXG4gKiAtIE5ldyBmb3JtYXQgc3RyaW5nIEFQSSBmb3IgYGZvcm1hdGAgZnVuY3Rpb25cbiAqICAgd2hpY2ggaXMgYmFzZWQgb24gW1VuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNV0oaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0ZpZWxkX1N5bWJvbF9UYWJsZSkuXG4gKiAgIFNlZSBbdGhpcyBwb3N0XShodHRwczovL2Jsb2cuZGF0ZS1mbnMub3JnL3Bvc3QvdW5pY29kZS10b2tlbnMtaW4tZGF0ZS1mbnMtdjItc3JlYXR5a2k5MWpnKSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIC0gQ2hhcmFjdGVycyBhcmUgbm93IGVzY2FwZWQgdXNpbmcgc2luZ2xlIHF1b3RlIHN5bWJvbHMgKGAnYCkgaW5zdGVhZCBvZiBzcXVhcmUgYnJhY2tldHMuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0IC0gdGhlIHN0cmluZyBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcGFyYW0gezB8MXwyfDN8NHw1fDZ9IFtvcHRpb25zLndlZWtTdGFydHNPbj0wXSAtIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrICgwIC0gU3VuZGF5KVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZT0xXSAtIHRoZSBkYXkgb2YgSmFudWFyeSwgd2hpY2ggaXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgd2Vlay1udW1iZXJpbmcgeWVhciB0b2tlbnMgYFlZYCBhbmQgYFlZWVlgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIHRoZSBkYXkgb2YgeWVhciB0b2tlbnMgYERgIGFuZCBgRERgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgZGF0ZWAgbXVzdCBub3QgYmUgSW52YWxpZCBEYXRlXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgbG9jYWxpemVgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgZm9ybWF0TG9uZ2AgcHJvcGVydHlcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDdcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXlgIGluc3RlYWQgb2YgYFlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBmb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDExIEZlYnJ1YXJ5IDIwMTQgaW4gbWlkZGxlLWVuZGlhbiBmb3JtYXQ6XG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDEsIDExKSwgJ01NL2RkL3l5eXknKVxuICogLy89PiAnMDIvMTEvMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDIgSnVseSAyMDE0IGluIEVzcGVyYW50bzpcbiAqIGltcG9ydCB7IGVvTG9jYWxlIH0gZnJvbSAnZGF0ZS1mbnMvbG9jYWxlL2VvJ1xuICogdmFyIHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyKSwgXCJkbyAnZGUnIE1NTU0geXl5eVwiLCB7XG4gKiAgIGxvY2FsZTogZW9Mb2NhbGVcbiAqIH0pXG4gKiAvLz0+ICcyLWEgZGUganVsaW8gMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRXNjYXBlIHN0cmluZyBieSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyczpcbiAqIHZhciByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiwgMTUpLCBcImggJ28nJ2Nsb2NrJ1wiKVxuICogLy89PiBcIjMgbydjbG9ja1wiXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0KGRpcnR5RGF0ZSwgZGlydHlGb3JtYXRTdHIsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGZvcm1hdFN0ciA9IFN0cmluZyhkaXJ0eUZvcm1hdFN0cik7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUgfHwgZGVmYXVsdExvY2FsZTtcbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZTtcbiAgdmFyIGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IDEgOiB0b0ludGVnZXIobG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIDogdG9JbnRlZ2VyKG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoIShmaXJzdFdlZWtDb250YWluc0RhdGUgPj0gMSAmJiBmaXJzdFdlZWtDb250YWluc0RhdGUgPD0gNykpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZmlyc3RXZWVrQ29udGFpbnNEYXRlIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgbG9jYWxlV2Vla1N0YXJ0c09uID0gbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMud2Vla1N0YXJ0c09uO1xuICB2YXIgZGVmYXVsdFdlZWtTdGFydHNPbiA9IGxvY2FsZVdlZWtTdGFydHNPbiA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihsb2NhbGVXZWVrU3RhcnRzT24pO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gb3B0aW9ucy53ZWVrU3RhcnRzT24gPT0gbnVsbCA/IGRlZmF1bHRXZWVrU3RhcnRzT24gOiB0b0ludGVnZXIob3B0aW9ucy53ZWVrU3RhcnRzT24pOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKHdlZWtTdGFydHNPbiA+PSAwICYmIHdlZWtTdGFydHNPbiA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIGlmICghbG9jYWxlLmxvY2FsaXplKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gbG9jYWxpemUgcHJvcGVydHknKTtcbiAgfVxuXG4gIGlmICghbG9jYWxlLmZvcm1hdExvbmcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBmb3JtYXRMb25nIHByb3BlcnR5Jyk7XG4gIH1cblxuICB2YXIgb3JpZ2luYWxEYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG5cbiAgaWYgKCFpc1ZhbGlkKG9yaWdpbmFsRGF0ZSkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIH0gLy8gQ29udmVydCB0aGUgZGF0ZSBpbiBzeXN0ZW0gdGltZXpvbmUgdG8gdGhlIHNhbWUgZGF0ZSBpbiBVVEMrMDA6MDAgdGltZXpvbmUuXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0IHdoZW4gVVRDIGZ1bmN0aW9ucyB3aWxsIGJlIGltcGxlbWVudGVkLCBsb2NhbGVzIHdpbGwgYmUgY29tcGF0aWJsZSB3aXRoIHRoZW0uXG4gIC8vIFNlZSBhbiBpc3N1ZSBhYm91dCBVVEMgZnVuY3Rpb25zOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5cbiAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhvcmlnaW5hbERhdGUpO1xuICB2YXIgdXRjRGF0ZSA9IHN1Yk1pbGxpc2Vjb25kcyhvcmlnaW5hbERhdGUsIHRpbWV6b25lT2Zmc2V0KTtcbiAgdmFyIGZvcm1hdHRlck9wdGlvbnMgPSB7XG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiBmaXJzdFdlZWtDb250YWluc0RhdGUsXG4gICAgd2Vla1N0YXJ0c09uOiB3ZWVrU3RhcnRzT24sXG4gICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgX29yaWdpbmFsRGF0ZTogb3JpZ2luYWxEYXRlXG4gIH07XG4gIHZhciByZXN1bHQgPSBmb3JtYXRTdHIubWF0Y2gobG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuXG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSAncCcgfHwgZmlyc3RDaGFyYWN0ZXIgPT09ICdQJykge1xuICAgICAgdmFyIGxvbmdGb3JtYXR0ZXIgPSBsb25nRm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG4gICAgICByZXR1cm4gbG9uZ0Zvcm1hdHRlcihzdWJzdHJpbmcsIGxvY2FsZS5mb3JtYXRMb25nLCBmb3JtYXR0ZXJPcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3Vic3RyaW5nO1xuICB9KS5qb2luKCcnKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIC8vIFJlcGxhY2UgdHdvIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIHdpdGggb25lIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJcbiAgICBpZiAoc3Vic3RyaW5nID09PSBcIicnXCIpIHtcbiAgICAgIHJldHVybiBcIidcIjtcbiAgICB9XG5cbiAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09IFwiJ1wiKSB7XG4gICAgICByZXR1cm4gY2xlYW5Fc2NhcGVkU3RyaW5nKHN1YnN0cmluZyk7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1hdHRlciA9IGZvcm1hdHRlcnNbZmlyc3RDaGFyYWN0ZXJdO1xuXG4gICAgaWYgKGZvcm1hdHRlcikge1xuICAgICAgaWYgKCFvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucyAmJiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIGRpcnR5RGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zICYmIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIGRpcnR5RGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmb3JtYXR0ZXIodXRjRGF0ZSwgc3Vic3RyaW5nLCBsb2NhbGUubG9jYWxpemUsIGZvcm1hdHRlck9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChmaXJzdENoYXJhY3Rlci5tYXRjaCh1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCkpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdGb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXIgYCcgKyBmaXJzdENoYXJhY3RlciArICdgJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1YnN0cmluZztcbiAgfSkuam9pbignJyk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGNsZWFuRXNjYXBlZFN0cmluZyhpbnB1dCkge1xuICByZXR1cm4gaW5wdXQubWF0Y2goZXNjYXBlZFN0cmluZ1JlZ0V4cClbMV0ucmVwbGFjZShkb3VibGVRdW90ZVJlZ0V4cCwgXCInXCIpO1xufSJdLCJzb3VyY2VSb290IjoiIn0=