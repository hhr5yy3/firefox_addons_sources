class WebauthnUtils{static fromB64ToArray(str){if(null==str)return null;const binaryString=atob(str),bytes=new Uint8Array(binaryString.length);for(let i=0;i<binaryString.length;i++)bytes[i]=binaryString.charCodeAt(i);return bytes}static fromUrlB64ToB64(urlB64Str){let output=urlB64Str.replace(/-/g,"+").replace(/_/g,"/");switch(output.length%4){case 0:break;case 2:output+="==";break;case 3:output+="=";break;default:throw new Error("Illegal string")}return output}static fromBufferToB64(buffer){if(null==buffer)return null;let binary="";const bytes=new Uint8Array(buffer);for(let i=0;i<bytes.byteLength;i++)binary+=String.fromCharCode(bytes[i]);return btoa(binary)}static fromUrlB64ToArray(str){return WebauthnUtils.fromB64ToArray(WebauthnUtils.fromUrlB64ToB64(str))}static fromBufferToUrlB64(buffer){return WebauthnUtils.fromB64toUrlB64(WebauthnUtils.fromBufferToB64(buffer))}static fromB64toUrlB64(b64Str){return b64Str.replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}static bufferToString(bufferSource){const buffer=WebauthnUtils.bufferSourceToUint8Array(bufferSource);return WebauthnUtils.fromBufferToUrlB64(buffer)}static stringToBuffer(str){return WebauthnUtils.fromUrlB64ToArray(str)}static bufferSourceToUint8Array(bufferSource){return WebauthnUtils.isArrayBuffer(bufferSource)?new Uint8Array(bufferSource):new Uint8Array(bufferSource.buffer)}static isArrayBuffer(bufferSource){return bufferSource instanceof ArrayBuffer||void 0===bufferSource.buffer}static fromByteStringToArray(str){if(null==str)return null;const arr=new Uint8Array(str.length);for(let i=0;i<str.length;i++)arr[i]=str.charCodeAt(i);return arr}static formatMakeCredentialParams(params,clientDataHash){const excludeCredentialDescriptorList=(params.excludeCredentials||[]).map(credential=>({id:WebauthnUtils.stringToBuffer(credential.id),transports:credential.transports,type:credential.type})),authenticatorSelection=params.authenticatorSelection||{},requireResidentKey=["required","preferred"].includes(authenticatorSelection.residentKey)||void 0===authenticatorSelection.residentKey&&!0===authenticatorSelection.requireResidentKey,requireUserVerification=["required","preferred"].includes(authenticatorSelection.userVerification)||void 0===authenticatorSelection.userVerification,pubKeyCreds=params.pubKeyCredParams;return{requireResidentKey:requireResidentKey,requireUserVerification:requireUserVerification,enterpriseAttestationPossible:"enterprise"===params.attestation,excludeCredentialDescriptorList:excludeCredentialDescriptorList,pubKeyCreds:pubKeyCreds,hash:clientDataHash,rpEntity:{id:params.rp.id,name:params.rp.name},userEntity:{id:WebauthnUtils.stringToBuffer(params.user.id),displayName:params.user.displayName},fallbackSupported:params.fallbackSupported}}static formatGetAssertionParams(params,clientDataHash){const allowCredentialDescriptorList=params.allowedCredentialIds.map(id=>({id:WebauthnUtils.stringToBuffer(id),type:"public-key"})),requireUserVerification=["required","preferred"].includes(params.userVerification)||void 0===params.userVerification;return{rpId:params.rpId,requireUserVerification:requireUserVerification,hash:clientDataHash,allowCredentialDescriptorList:allowCredentialDescriptorList,extensions:{},fallbackSupported:params.fallbackSupported}}}