function BrowserGap(isContentScript, unittest) { //jshint ignore: line

    const isWebExtension = true;
    var topSites = [];
    this.isContentScript = isContentScript;
    var intl = "";
    var market = "";
    var ver = "";
    var storeId = "";

    async function getCTID() {
        var ctid;
        var ysetStateJson = await this.localStorage.getItem('ysetStateJSON');
        if(!ysetStateJson || !JSON.parse(ysetStateJson).ctid) {
            console.log("CTID value does not exist in ysetState.json file");
            ctid = generateCTID();
            console.log("CTID = " + ctid);
        }
        else {
            console.log("CTID value exists in ysetState.json file");
            ctid = JSON.parse(ysetStateJson).ctid;
            console.log("CTID = " + ctid);
        }
        return ctid;
    }

    /*This piece of code needs to be moved out of Browser Gap.
    Also, this is a work around that we are using until we get access to the unified CTID generated by the Installer.
    This code has been taken from the nanoclient_firefox*/
    function generateCTID()
    {
        var strUUID= "";

        try
        {
            var timeSeed= ((new Date()).getTime()).toString();
            timeSeed= timeSeed.substr(timeSeed.length - 3);
            for (var seedOn= 0; seedOn < timeSeed; seedOn++){
                Math.random();
            }

            for (var charOn= 0; charOn < 32; charOn++){
                var charCur= Math.floor(Math.random() * 36);
                if (charCur > 25){
                    charCur= String.fromCharCode(48 + charCur - 26);
                } else{
                    charCur= String.fromCharCode(65 + charCur);
                }

                strUUID += charCur;

                switch (charOn)
                {
                    case 7:
                    case 11:
                    case 15:
                    case 19:
                        strUUID += '-';
                        break;
                }
            }
        }
        catch (e)
        {
            console.log('BrowserGap.generateCTID error: ' + e.message);
        }
        return strUUID;
    }

    async function loadTrackingParams() {
        var ctid = await this.localStorage.getItem('ctid');
        if(!ctid) {
            await this.localStorage.setItem('ctid', generateCTID());
            var newctid = await this.localStorage.getItem("ctid");
            var _ctid = await this.localStorage.getItem('ctid');
        }
    }

    function  getMarket() {
        return market;
    }

    function getIntl() {
        return intl;
    }

    function getVer() {
        return ver;
    }

    function getStoreId() {
        return storeId;
    }


    function getTopSites(){
        return topSites;
    }

    function refreshTopSites(){
        browser.topSites.get(function(siteArr){
            topSites = siteArr;
        });
    }

    function addNewTabListener(listener, preInit){
        browser.runtime.onMessage.addListener(function (msg, sender, response) {
            if(msg.newTab) {
                listener(msg, response);
                return true; //for async calls we need to return true here -- https://developer.chrome.com/apps/messaging
            }
        });
        browser.runtime.onMessage.removeListener(preInit);
    }

    function emitToMain(msg, callback) {
        browser.runtime.sendMessage(msg, callback);
    }

    function xhr(url, callback, err) {
        var xmlhttp = new XMLHttpRequest();
        xmlhttp.onreadystatechange = function() {
            if(this.readyState === XMLHttpRequest.DONE) {
                if(this.status === 200) {
                    callback(this.responseText);
                }
            }
        };
        xmlhttp.open("GET", url, true);
        xmlhttp.send();
    }

    function getLocalizedString(key, params) {
        return browser.i18n.getMessage(key);
    }

    function isOnline() {
        return true;
    }

    function onceOnline(callback) {

    }
    async function  getGDPRprivacyObject(){
        var rawBlacklist = await extGlobal.browserGap.localStorage.getItem('sitesBlackList');
        var rawFavoriteSites = await extGlobal.browserGap.localStorage.getItem('favoriteSites');
        var rawLocation  = await extGlobal.browserGap.localStorage.getItem("localStorageLocation");
        var rawWeather = await extGlobal.browserGap.localStorage.getItem("localStorageWeather");
        var blacklist = [];
        var favoriteSites = [];
        var lat, lon;
        var weather;
        var gdprObject = {};

        if (rawBlacklist !== null ){
            blacklist = JSON.parse(rawBlacklist);
        }
        gdprObject.sitesBlackList = blacklist;

        if (rawFavoriteSites !== null) {
            favoriteSites = JSON.parse(rawFavoriteSites);
            for (var i = 0; i < favoriteSites.length; i++) {
                delete favoriteSites[i].isFavorite;
            }
        }
        gdprObject.favoriteSites = favoriteSites;

        if (rawLocation !== null){
            var locationArray = rawLocation.split(', ');  
            lat = Number.parseFloat(locationArray[0]);
            lon = Number.parseFloat(locationArray[1]);

            gdprObject.localStorageLocation = {
                latitude: lat,
                longitude: lon,
            };
        }

        if (rawWeather !== null){
            weather = JSON.parse(rawWeather);
            gdprObject.localStorageWeather = weather;
        }
        
        return gdprObject;
    }

    if(unittest){
        this.isWebExtension = isWebExtension;
        this.topSites = topSites;
        this.intl = intl;
        this.ver = ver;
        this.market = market;
        this.getCTID = getCTID;
        this.generateCTID = generateCTID;
        this.loadTrackingParams = loadTrackingParams;
        this.getMarket = getMarket;
        this.getIntl = getIntl;
        this.getVer = getVer;
        this.getTopSites = getTopSites;
        this.refreshTopSites = refreshTopSites;
        this.addNewTabListener = addNewTabListener;
        this.emitToMain = emitToMain;
        this.xhrForMain = xhrForMain;
        this.xhrForNewTab = xhrForNewTab;
        this.isOnline = isOnline;
        this.isExternalInstall = isExternalInstall;
        this.syncDataBrowserGapToUnitTestCase = function(){
            this.market = market;
            this.intl = intl;
            this.ver = ver;
        };
        this.syncDataUnitTestCaseToBrowserGap = function(){
            market = this.market;
            intl = this.intl;
            ver = this.ver;
            topSites = this.topSites;
        };
        return this;
    }

    this.loadTrackingParams = loadTrackingParams;
    isContentScript? true:  refreshTopSites();
    isContentScript? true: setInterval(refreshTopSites,extGlobal.constants.topSitesRefreshTime);
    this.getLocalizedString = getLocalizedString;
    this.refreshTopSites = refreshTopSites;
    this.getTopSites = getTopSites;
    this.addNewTabListener = addNewTabListener;
    this.emitToMain = emitToMain;
    this.localStorage = {};
    this.localStorage.getItem = async function(obj) { //getItem only takes strings as input, unlike storage.local.get which could take json objects
        var results = await browser.storage.local.get(obj);
        return results[obj] || null;
    };
    this.localStorage.setItem = async function(key, value) {
        var obj = {};
        obj[key] = value;
        return await browser.storage.local.set(obj);
    };
    this.localStorage.removeItem = async function(obj) { //getItem only takes strings as input, unlike storage.local.get which could take json objects
        return await browser.storage.local.remove(obj);
    };
    this.xhr = xhr;
    this.isWebExtension = isWebExtension;
    this.onceOnline = onceOnline;
    this.isOnline = isOnline;
    this.getIntl = getIntl;
    this.getMarket = getMarket;
    this.getVer = getVer;
    this.getStoreId = getStoreId;
    this.getGDPRprivacyObject = getGDPRprivacyObject;
    if(isContentScript)
    {
        this.market = market;
    }
    return this;
}
