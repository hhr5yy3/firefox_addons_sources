{"version":3,"file":"contentScript.bundle.js","mappings":"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","sources":["webpack://fonts-ninja-extension-v7/./src/common/data/Events.ts","webpack://fonts-ninja-extension-v7/./src/common/data/Storage.ts","webpack://fonts-ninja-extension-v7/./src/pages/Content/index.tsx"],"sourcesContent":["export const INJECT_FONTS_NINJA_HELPERS = 'inject_fonts_ninja_helpers';\nexport const IDENTIFY_FONTS_NINJA_HELPERS = 'identify';\nexport const TOGGLE_FONTS_NINJA = 'toggle_fonts_ninja';\nexport const TOGGLE_FONTS_NINJA_RESPONSE = 'toggle_fonts_ninja_reponse';\nexport const CLOSE_FONTS_NINJA = 'close_fonts_ninja';\nexport const CHANGE_URL = 'change_url';\nexport const CHANGE_URL_RESPONSE = 'change_url_response';\nexport const GET_MACHINE_ID = 'get_machine_id';\nexport const SEND_MACHINE_ID = 'send_machine_id';\nexport const GET_STORAGE = 'get_storage';\nexport const SEND_STORAGE = 'send_storage';\nexport const SAVE_STORAGE = 'save_storage';\nexport const CHANGE_FONTS_NINJA_ICON = 'change_fonts_ninja_icon';\nexport const GET_EXTENSION_PATH = 'get_extension_path';\nexport const SEND_EXTENSION_PATH = 'send_extension_path';\nexport const NINJA_PROCESS_RESULTS = 'ninjaProcessResults';\nexport const NINJA_ROLL_OVER = 'ninjaRollover';\nexport const NINJA_ROLL_OVER_RESULTS = 'ninjaRolloverResults';\nexport const PING_FONTS_NINJA_EXTENSION = 'ping_from_fonts_ninja_extension';\nexport const PONG_FONTS_NINJA_EXTENSION = 'pong_from_fonts_ninja_extension';\n// Messages received by fonts.ninja website\nexport const FONTS_NINJA_PAGE_LOADED = 'fontsNinjaPageLoaded';\nexport const FONTS_NINJA_PAGE_HEIGHT = 'fontsNinjaPageHeight';\nexport const FONTS_NINJA_DARK_MODE = 'fontsNinjaDarkMode';\nexport const FONTS_NINJA_ACCESS_TOKEN = 'fontsNinjaAccessToken';\nexport const FONTS_NINJA_REFRESH_TOKEN = 'fontsNinjaRefreshToken';\nexport const FONTS_NINJA_IFRAME_SCROLL_Y = 'fontsNinjaIframeScrollY';\nexport const FONTS_NINJA_IFRAME_WINDOW_HEIGHT = 'fontsNinjaIframeWindowHeight';\nexport const FONTS_NINJA_GET_GPDR_VALIDATION = 'fontsNinjaGetGpdrValidation';\nexport const FONTS_NINJA_SAVE_GPDR_VALIDATION = 'fontsNinjaSaveGpdrValidation';\n// Messages sent/received to/from Iframe page\nexport const IFRAME_READY = 'iframeReady';\nexport const IFRAME_DATA = 'iframeData';\nexport const IFRAME_ACCESS_TOKEN = 'iframeAccessToken';\nexport const IFRAME_REFRESH_TOKEN = 'iframeRefreshToken';\nexport const IFRAME_GDPR_VALIDATION = 'iframeGdprValidation';\n","export const SETTINGS = 'persist:settings';\nexport const AUTH = 'persist:auth';\nexport const GDPR = 'persist:gdpr';\n","import { API_BASE_URL, CHANGE_FONTS_NINJA_ICON, CHANGE_URL, CHANGE_URL_RESPONSE, CLOSE_FONTS_NINJA, DEV_PERSIST_AUTH_DATA, GET_EXTENSION_PATH, GET_MACHINE_ID, GET_STORAGE, IDENTIFY_FONTS_NINJA_HELPERS, INJECT_FONTS_NINJA_HELPERS, PING_FONTS_NINJA_EXTENSION, PONG_FONTS_NINJA_EXTENSION, SAVE_STORAGE, SEND_EXTENSION_PATH, SEND_MACHINE_ID, SEND_STORAGE, SETTINGS, TOGGLE_FONTS_NINJA, TOGGLE_FONTS_NINJA_RESPONSE, } from 'src/common/data';\nlet fontsNinjaExt;\nlet fontsNinjaExtInjected = false;\nlet fontsNinjaExtDisplayed = false;\nlet fontsNinjaIdentifyCalled = false;\nconst injectFontsNinjaExt = () => {\n    // Inject fonts ninja ext only on top level (not inside iframes)\n    if (window.self === window.top) {\n        const reactExtensionScript = document.createElement('script');\n        reactExtensionScript.id = 'fonts-ninja-ext-script';\n        reactExtensionScript.src = chrome.runtime.getURL('extension.bundle.js');\n        (document.head || document.documentElement).appendChild(reactExtensionScript);\n        fontsNinjaExt = document.createElement('div');\n        fontsNinjaExt.id = 'fonts-ninja-ext';\n        fontsNinjaExt.classList.add('notranslate');\n        document.body.appendChild(fontsNinjaExt);\n    }\n    fontsNinjaExtInjected = true;\n    if (module.hot)\n        module.hot.accept();\n};\nconst injectFontsNinjaHelpers = () => {\n    const fontsNinjaHelpersScript = document.createElement('script');\n    fontsNinjaHelpersScript.id = 'fonts-ninja-helpers-script';\n    fontsNinjaHelpersScript.src = chrome.runtime.getURL('fonts-ninja-helpers/index.js');\n    fontsNinjaHelpersScript.dataset.extid = chrome.runtime.id;\n    (document.head || document.documentElement).appendChild(fontsNinjaHelpersScript);\n};\nconst toggleFontNinjaExt = () => {\n    fontsNinjaExtDisplayed = !fontsNinjaExtDisplayed;\n    if (fontsNinjaExt) {\n        fontsNinjaExt.style.display = fontsNinjaExtDisplayed ? 'block' : 'none';\n        const isOpenJson = JSON.stringify({ isOpen: fontsNinjaExtDisplayed });\n        document.dispatchEvent(new CustomEvent('fontsninja-ext-opened', { detail: isOpenJson }));\n    }\n};\nconst removeFontsNinjaExt = (url) => {\n    const fontsNinjaExtScript = document.getElementById('fonts-ninja-ext-script');\n    const fontsNinjaHelpersScript = document.getElementById('fonts-ninja-helpers-script');\n    const fontsNinjaExtWrapper = document.getElementById('fonts-ninja-ext');\n    // Case we remove extension (by reloading page)\n    // - url = undefined for Safari\n    // - url = current url (all browsers except safari and firefox)\n    if (fontsNinjaExtScript &&\n        fontsNinjaHelpersScript &&\n        fontsNinjaExtWrapper &&\n        (!url || url === window.location.href)) {\n        window.location.reload();\n    }\n};\nconst sendExtensionPath = () => {\n    window.postMessage({ type: SEND_EXTENSION_PATH, results: chrome.runtime.getURL('') });\n};\nconst sendPongMessage = () => {\n    window.postMessage({ type: PONG_FONTS_NINJA_EXTENSION, message: PONG_FONTS_NINJA_EXTENSION });\n};\nconst identifyEnvironment = () => {\n    window.postMessage({\n        type: IDENTIFY_FONTS_NINJA_HELPERS,\n        env: process.env.NODE_ENV === 'production' ? 'prod' : 'preprod',\n    }, '*');\n};\nconst getMachineId = (key) => {\n    chrome.storage.sync.get(key, (json) => {\n        // SIMULATE `persist:auth` data in development mode\n        if (process.env.NODE_ENV === 'development') {\n            json = DEV_PERSIST_AUTH_DATA;\n        }\n        const persistAuth = json && json[key] && JSON.parse(json[key]);\n        const machineId = persistAuth && persistAuth.machineId.replaceAll('\"', '');\n        const email = persistAuth && persistAuth.authToken && JSON.parse(persistAuth.authToken).email;\n        if (machineId) {\n            if (email) {\n                // Email exists, we delete `persist:auth` data in storage\n                chrome.storage.sync.remove(key);\n            }\n            else {\n                const timestamp = Date.now();\n                fetch(`${API_BASE_URL}/extension/legacy/${machineId}?ts=${timestamp}`, { method: 'GET' })\n                    .then((response) => {\n                    return response.json();\n                })\n                    .then((data) => {\n                    if (data.success) {\n                        // Legacy bookmarks exists, we stock machineId in SettingsContext\n                        window.postMessage({ type: SEND_MACHINE_ID, machineId: machineId });\n                    }\n                    else {\n                        // No legacy bookmarks exists, we delete `persist:auth` data in storage\n                        chrome.storage.sync.remove(key);\n                    }\n                });\n            }\n        }\n    });\n};\nconst getStorageData = (key) => {\n    chrome.storage.sync.get(key, (json) => {\n        const storage = json && json[key];\n        window.postMessage({ type: SEND_STORAGE, storage: storage });\n    });\n};\nconst saveStorageData = (key, attributes, values) => {\n    chrome.storage.sync.get(key, (json) => {\n        const storage = json && json[key] ? json[key] : {};\n        attributes.forEach((attribute, index) => {\n            storage[attribute] = values[index];\n        });\n        chrome.storage.sync.set({ [key]: storage });\n    });\n};\nchrome.storage.sync.get(SETTINGS, (settingsStorageJson) => {\n    // If chrome storage type is string, convert it in json object\n    if (typeof settingsStorageJson[SETTINGS] === 'string') {\n        convertChromeStorageV6ToV7(settingsStorageJson[SETTINGS]);\n    }\n    const settingsStorage = settingsStorageJson[SETTINGS];\n    if (settingsStorage) {\n        const iconIndex = settingsStorage.iconIndex;\n        if (iconIndex) {\n            chrome.runtime.sendMessage({ message: CHANGE_FONTS_NINJA_ICON, options: { iconIndex } });\n        }\n    }\n});\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    if (request.message === TOGGLE_FONTS_NINJA) {\n        if (!fontsNinjaExtInjected) {\n            injectFontsNinjaExt();\n        }\n        toggleFontNinjaExt();\n        sendResponse({\n            response: TOGGLE_FONTS_NINJA_RESPONSE,\n        });\n        return true;\n    }\n    if (request.message === CHANGE_URL) {\n        removeFontsNinjaExt(request.url);\n        sendResponse({\n            response: CHANGE_URL_RESPONSE,\n        });\n        return true;\n    }\n});\nwindow.addEventListener('message', (event) => {\n    if (event.data) {\n        const data = event.data.message ? event.data.message : event.data;\n        if (data.type === INJECT_FONTS_NINJA_HELPERS) {\n            injectFontsNinjaHelpers();\n        }\n        if (data.type === GET_EXTENSION_PATH) {\n            sendExtensionPath();\n        }\n        if (data.type === CLOSE_FONTS_NINJA) {\n            toggleFontNinjaExt();\n        }\n        if (data.type === GET_MACHINE_ID && data.key) {\n            getMachineId(data.key);\n        }\n        if (data.type === GET_STORAGE && data.key) {\n            getStorageData(data.key);\n        }\n        if (data.type === SAVE_STORAGE) {\n            saveStorageData(data.key, data.attributes, data.values);\n        }\n        if (data.type === PING_FONTS_NINJA_EXTENSION) {\n            sendPongMessage();\n        }\n        if (data.type === CHANGE_FONTS_NINJA_ICON) {\n            const iconIndex = data.iconIndex;\n            chrome.runtime.sendMessage({ message: CHANGE_FONTS_NINJA_ICON, options: { iconIndex } });\n        }\n        if (!data || data.context !== 'ninja>ext')\n            return;\n        chrome.runtime.sendMessage(data, (response) => {\n            window.postMessage(Object.assign(Object.assign(Object.assign({}, data), { context: 'ext>ninja' }), response), '*');\n            // Ninja helpers answers and is ready, we identify environment\n            if (!fontsNinjaIdentifyCalled) {\n                identifyEnvironment();\n                fontsNinjaIdentifyCalled = true;\n            }\n        });\n    }\n});\n/**\n * Conversion chrome storage v6 to v7 functions\n */\nconst convertChromeStorageV6ToV7 = (data) => {\n    const dataStringifiedToParse = JSON.parse(data);\n    const dataParsed = parseStringifiedProperties(dataStringifiedToParse);\n    // Clear chrome storage data stringified\n    chrome.storage.sync.clear();\n    // Reset launchCount to 0\n    dataParsed.launchCount = 0;\n    // Reset instaSeen to false\n    dataParsed.instaSeen = false;\n    // Save dataStringifiedToParse\n    chrome.storage.sync.set({\n        'persist:settings': dataParsed,\n    });\n};\nconst parseStringifiedProperties = (data) => {\n    for (const key in data) {\n        if (data.hasOwnProperty(key) && typeof data[key] === 'string') {\n            const value = data[key];\n            // Check for boolean values\n            if (value.toLowerCase() === 'true') {\n                data[key] = true;\n            }\n            else if (value.toLowerCase() === 'false') {\n                data[key] = false;\n            }\n            else if (!isNaN(parseFloat(value)) && value.trim() !== '') {\n                // Check for number values\n                data[key] = parseFloat(value);\n            }\n        }\n    }\n    return data;\n};\n"],"names":["CHANGE_FONTS_NINJA_ICON","PONG_FONTS_NINJA_EXTENSION","SETTINGS","fontsNinjaExt","fontsNinjaExtInjected","fontsNinjaExtDisplayed","fontsNinjaIdentifyCalled","toggleFontNinjaExt","style","display","isOpenJson","JSON","stringify","isOpen","document","dispatchEvent","CustomEvent","detail","chrome","storage","sync","get","settingsStorageJson","convertChromeStorageV6ToV7","settingsStorage","iconIndex","runtime","sendMessage","message","options","onMessage","addListener","request","sender","sendResponse","window","self","top","reactExtensionScript","createElement","id","src","getURL","head","documentElement","appendChild","classList","add","body","injectFontsNinjaExt","response","url","fontsNinjaExtScript","getElementById","fontsNinjaHelpersScript","fontsNinjaExtWrapper","location","href","reload","removeFontsNinjaExt","addEventListener","event","data","type","dataset","extid","injectFontsNinjaHelpers","postMessage","results","key","json","persistAuth","parse","machineId","replaceAll","email","authToken","remove","timestamp","Date","now","fetch","method","then","success","getStorageData","attributes","values","forEach","attribute","index","set","saveStorageData","context","Object","assign","env","dataStringifiedToParse","dataParsed","parseStringifiedProperties","clear","launchCount","instaSeen","hasOwnProperty","value","toLowerCase","isNaN","parseFloat","trim"],"sourceRoot":""}