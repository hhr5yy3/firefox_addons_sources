async function configureNewManagedProfiles(){var profile,managedProfiles=await getManagedProfiles();if(managedProfiles){console.debug("=== MANAGED PROFILES FOUND - UPDATING LOCAL CONFIG ===");for(const managedProfile of managedProfiles)managedProfile&&((profile={profileId:managedProfile.id,color:managedProfile.color||getRandomProfileColor(),profileName:managedProfile.name,webClientUrl:managedProfile.webAppAddress,endpoint:managedProfile.endpoint,databaseName:managedProfile.database}).profileId&&profile.databaseName&&profile.profileName&&profile.endpoint?await getIndexedDBrecord("profiles",profile.profileId,"profileId")?(console.debug(`Update profile ${profile.profileName} (${profile.profileId})`),await updateDatabaseProfile(profile)):(console.debug(`Create profile ${profile.profileName} (${profile.profileId})`),await saveDatabaseProfile(profile)):console.error("Profile is not complete. Skip it!"))}}async function configureManagedOptions(){var managedOptions=await getManagedOptions();managedOptions&&(console.debug("=== MANAGED OPTIONS FOUND - CONFIGURE EXTENSION ==="),managedOptions.hasOwnProperty("allowCrossClientAuth"))&&await getCrossClientAuthActive()!==(managedOptions=managedOptions.allowCrossClientAuth)&&(console.debug("POLICY: CHANGE cross_client_auth STATE TO "+managedOptions),await setCrossClientAuthActive(managedOptions))}async function hasManagedProfiles(){try{return null!=await getManagedProfiles()}catch(e){return console.error(e),!1}}async function hasManagedOptions(){try{return null!=await getManagedOptions()}catch(e){return console.error(e),!1}}async function getManagedProfiles(){return new Promise((resolve,reject)=>{null==chrome.storage.managed?resolve(null):chrome.storage.managed.get("managedSettings",result=>{chrome.runtime.lastError?reject(chrome.runtime.lastError):resolve(result.managedSettings?result.managedSettings.profiles:null)})})}async function getManagedOptions(){return new Promise((resolve,reject)=>{null==chrome.storage.managed?resolve(null):chrome.storage.managed.get("managedSettings",result=>{chrome.runtime.lastError?reject(chrome.runtime.lastError):resolve(result.managedSettings?result.managedSettings.options:null)})})}function getRandomProfileColor(){return"#"+(16777215*Math.random()<<0).toString(16).padStart(6,"0")}window.browser=window.msBrowser||window.browser||window.chrome;let extension;!async function(){browser.runtime.getBackgroundPage(async function(page){extension=page,await configureNewManagedProfiles(),await configureManagedOptions(),extension.refreshData()})}();