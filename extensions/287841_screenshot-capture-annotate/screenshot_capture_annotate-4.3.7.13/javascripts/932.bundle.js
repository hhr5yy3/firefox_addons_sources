(self.webpackChunkAwesomeScreenshot=self.webpackChunkAwesomeScreenshot||[]).push([[932],{2138:(e,t,n)=>{"use strict";n.d(t,{R_:()=>E});var r=n(6500),o=n(1350),a=2,i=.16,l=.05,c=.05,s=.15,u=5,f=4,d=[{index:7,opacity:.15},{index:6,opacity:.25},{index:5,opacity:.3},{index:5,opacity:.45},{index:5,opacity:.65},{index:5,opacity:.85},{index:4,opacity:.9},{index:3,opacity:.95},{index:2,opacity:.97},{index:1,opacity:.98}];function p(e){var t=e.r,n=e.g,o=e.b,a=(0,r.py)(t,n,o);return{h:360*a.h,s:a.s,v:a.v}}function b(e){var t=e.r,n=e.g,o=e.b;return"#".concat((0,r.vq)(t,n,o,!1))}function v(e,t,n){var r;return(r=Math.round(e.h)>=60&&Math.round(e.h)<=240?n?Math.round(e.h)-a*t:Math.round(e.h)+a*t:n?Math.round(e.h)+a*t:Math.round(e.h)-a*t)<0?r+=360:r>=360&&(r-=360),r}function m(e,t,n){return 0===e.h&&0===e.s?e.s:((r=n?e.s-i*t:t===f?e.s+i:e.s+l*t)>1&&(r=1),n&&t===u&&r>.1&&(r=.1),r<.06&&(r=.06),Number(r.toFixed(2)));var r}function y(e,t,n){var r;return(r=n?e.v+c*t:e.v-s*t)>1&&(r=1),Number(r.toFixed(2))}function E(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=[],r=(0,o.uA)(e),a=u;a>0;a-=1){var i=p(r),l=b((0,o.uA)({h:v(i,a,!0),s:m(i,a,!0),v:y(i,a,!0)}));n.push(l)}n.push(b(r));for(var c=1;c<=f;c+=1){var s=p(r),E=b((0,o.uA)({h:v(s,c),s:m(s,c),v:y(s,c)}));n.push(E)}return"dark"===t.theme?d.map((function(e){var r,a,i,l=e.index,c=e.opacity;return b((r=(0,o.uA)(t.backgroundColor||"#141414"),a=(0,o.uA)(n[l]),i=100*c/100,{r:(a.r-r.r)*i+r.r,g:(a.g-r.g)*i+r.g,b:(a.b-r.b)*i+r.b}))})):n}var h={red:"#F5222D",volcano:"#FA541C",orange:"#FA8C16",gold:"#FAAD14",yellow:"#FADB14",lime:"#A0D911",green:"#52C41A",cyan:"#13C2C2",blue:"#1890FF",geekblue:"#2F54EB",purple:"#722ED1",magenta:"#EB2F96",grey:"#666666"},g={},S={};Object.keys(h).forEach((function(e){g[e]=E(h[e]),g[e].primary=g[e][5],S[e]=E(h[e],{theme:"dark",backgroundColor:"#141414"}),S[e].primary=S[e][5]}));g.red,g.volcano,g.gold,g.orange,g.yellow,g.lime,g.green,g.cyan,g.blue,g.geekblue,g.purple,g.magenta,g.grey},8787:(e,t,n)=>{"use strict";n.d(t,{Y:()=>o});var r=n(3355),o=((0,r.b)("success","processing","error","default","warning"),(0,r.b)("pink","red","yellow","orange","cyan","green","blue","purple","geekblue","magenta","volcano","gold","lime"))},3603:(e,t,n)=>{"use strict";n.d(t,{mL:()=>r});(0,n(3355).b)("bottomLeft","bottomRight","topLeft","topRight");var r=function(e,t,n){return void 0!==n?n:"".concat(e,"-").concat(t)}},1808:(e,t,n)=>{"use strict";n.d(t,{jD:()=>o});var r=n(8924),o=function(){return(0,r.Z)()&&window.document.documentElement}},3355:(e,t,n)=>{"use strict";n.d(t,{a:()=>o,b:()=>r});var r=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t},o=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t}},5223:(e,t,n)=>{"use strict";n.d(t,{Ux:()=>i,aM:()=>a});var r=n(7462),o=(n(6077),n(7294)),a=o.createContext({}),i=function(e){var t=e.children,n=e.status,i=e.override,l=(0,o.useContext)(a),c=(0,o.useMemo)((function(){var e=(0,r.Z)({},l);return i&&delete e.isFormItemInput,n&&(delete e.status,delete e.hasFeedback,delete e.feedbackIcon),e}),[n,i,l]);return o.createElement(a.Provider,{value:c},t)}},9865:(e,t,n)=>{"use strict";n.d(t,{D7:()=>r,rJ:()=>o,nH:()=>a});n(6228),n(7294),n(1448);n(1770);n(2550);function r(e){return null==e?"":String(e)}function o(e,t,n,r){if(n){var o=t;if("click"===t.type){var a=e.cloneNode(!0);return o=Object.create(t,{target:{value:a},currentTarget:{value:a}}),a.value="",void n(o)}if(void 0!==r)return o=Object.create(t,{target:{value:e},currentTarget:{value:e}}),e.value=r,void n(o);n(o)}}function a(e,t){if(e){e.focus(t);var n=(t||{}).cursor;if(n){var r=e.value.length;switch(n){case"start":e.setSelectionRange(0,0);break;case"end":e.setSelectionRange(r,r);break;default:e.setSelectionRange(0,r)}}}}},892:(e,t,n)=>{"use strict";n.d(t,{Z:()=>me});var r=n(7462),o=n(7294),a=n(4942),i=n(1002),l=n(9439),c=n(9065),s=n(1413),u=n(8820),f=n(7713),d=function(e,t){return o.createElement(f.Z,(0,s.Z)((0,s.Z)({},e),{},{ref:t,icon:u.Z}))};d.displayName="CopyOutlined";const p=o.forwardRef(d);const b={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M257.7 752c2 0 4-.2 6-.5L431.9 722c2-.4 3.9-1.3 5.3-2.8l423.9-423.9a9.96 9.96 0 000-14.1L694.9 114.9c-1.9-1.9-4.4-2.9-7.1-2.9s-5.2 1-7.1 2.9L256.8 538.8c-1.5 1.5-2.4 3.3-2.8 5.3l-29.5 168.2a33.5 33.5 0 009.4 29.8c6.6 6.4 14.9 9.9 23.8 9.9zm67.4-174.4L687.8 215l73.3 73.3-362.7 362.6-88.9 15.7 15.6-89zM880 836H144c-17.7 0-32 14.3-32 32v36c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-36c0-17.7-14.3-32-32-32z"}}]},name:"edit",theme:"outlined"};var v=function(e,t){return o.createElement(f.Z,(0,s.Z)((0,s.Z)({},e),{},{ref:t,icon:b}))};v.displayName="EditOutlined";const m=o.forwardRef(v);var y=n(6228),E=n.n(y),h=n(640),g=n.n(h),S=n(8717),O=n(344),x=n(8410),w=n(1770),C=n(8423),M=n(2550),A=n(3124),R=n(7667),P=n(5777),N=n(8924),k=function(e){if((0,N.Z)()&&window.document.documentElement){var t=Array.isArray(e)?e:[e],n=window.document.documentElement;return t.some((function(e){return e in n.style}))}return!1};function Z(e,t){return Array.isArray(e)||void 0===t?k(e):function(e,t){if(!k(e))return!1;var n=document.createElement("div"),r=n.style[e];return n.style[e]=t,n.style[e]!==r}(e,t)}var T=n(5105),_=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},I={border:0,background:"transparent",padding:0,lineHeight:"inherit",display:"inline-block"};const F=o.forwardRef((function(e,t){var n=e.style,a=e.noStyle,i=e.disabled,l=_(e,["style","noStyle","disabled"]),c={};return a||(c=(0,r.Z)({},I)),i&&(c.pointerEvents="none"),c=(0,r.Z)((0,r.Z)({},c),n),o.createElement("div",(0,r.Z)({role:"button",tabIndex:0,ref:t},l,{onKeyDown:function(e){e.keyCode===T.Z.ENTER&&e.preventDefault()},onKeyUp:function(t){var n=t.keyCode,r=e.onClick;n===T.Z.ENTER&&r&&r()},style:c}))}));const L={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M864 170h-60c-4.4 0-8 3.6-8 8v518H310v-73c0-6.7-7.8-10.5-13-6.3l-141.9 112a8 8 0 000 12.6l141.9 112c5.3 4.2 13 .4 13-6.3v-75h498c35.3 0 64-28.7 64-64V178c0-4.4-3.6-8-8-8z"}}]},name:"enter",theme:"outlined"};var U=function(e,t){return o.createElement(f.Z,(0,s.Z)((0,s.Z)({},e),{},{ref:t,icon:L}))};U.displayName="EnterOutlined";const W=o.forwardRef(U);var B=n(4418),D=n(6159);const K=function(e){var t=e.prefixCls,n=e["aria-label"],r=e.className,i=e.style,c=e.direction,s=e.maxLength,u=e.autoSize,f=void 0===u||u,d=e.value,p=e.onSave,b=e.onCancel,v=e.onEnd,m=e.component,y=e.enterIcon,h=void 0===y?o.createElement(W,null):y,g=o.useRef(),S=o.useRef(!1),O=o.useRef(),x=o.useState(d),w=(0,l.Z)(x,2),C=w[0],M=w[1];o.useEffect((function(){M(d)}),[d]),o.useEffect((function(){if(g.current&&g.current.resizableTextArea){var e=g.current.resizableTextArea.textArea;e.focus();var t=e.value.length;e.setSelectionRange(t,t)}}),[]);var A=function(){p(C.trim())},R=m?"".concat(t,"-").concat(m):"",P=E()(t,"".concat(t,"-edit-content"),(0,a.Z)({},"".concat(t,"-rtl"),"rtl"===c),r,R);return o.createElement("div",{className:P,style:i},o.createElement(B.Z,{ref:g,maxLength:s,value:C,onChange:function(e){var t=e.target;M(t.value.replace(/[\n\r]/g,""))},onKeyDown:function(e){var t=e.keyCode;S.current||(O.current=t)},onKeyUp:function(e){var t=e.keyCode,n=e.ctrlKey,r=e.altKey,o=e.metaKey,a=e.shiftKey;O.current!==t||S.current||n||r||o||a||(t===T.Z.ENTER?(A(),null==v||v()):t===T.Z.ESC&&b())},onCompositionStart:function(){S.current=!0},onCompositionEnd:function(){S.current=!1},onBlur:function(){A()},"aria-label":n,rows:1,autoSize:f}),null!==h?(0,D.Tm)(h,{className:"".concat(t,"-edit-content-confirm")}):null)};function j(e,t){return o.useMemo((function(){var n=!!e;return[n,(0,r.Z)((0,r.Z)({},t),n&&"object"===(0,i.Z)(e)?e:null)]}),[e])}var G=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},H=function(e,t){var n=e.prefixCls,i=e.component,l=void 0===i?"article":i,c=e.className,s=e["aria-label"],u=e.setContentRef,f=e.children,d=G(e,["prefixCls","component","className","aria-label","setContentRef","children"]),p=o.useContext(A.E_),b=p.getPrefixCls,v=p.direction,m=t;u&&(m=(0,M.sQ)(t,u));var y=l,h=b("typography",n),g=E()(h,(0,a.Z)({},"".concat(h,"-rtl"),"rtl"===v),c);return o.createElement(y,(0,r.Z)({className:g,"aria-label":s,ref:m},d),f)};const $=o.forwardRef(H);function z(e){var t=(0,i.Z)(e);return"string"===t||"number"===t}function V(e,t){for(var n=0,r=[],o=0;o<e.length;o+=1){if(n===t)return r;var a=e[o],i=n+(z(a)?String(a).length:1);if(i>t){var l=t-n;return r.push(String(a).slice(0,l)),r}r.push(a),n=i}return e}const X=function(e){var t=e.enabledMeasure,n=e.children,a=e.text,i=e.width,c=e.rows,s=e.onEllipsis,u=o.useState([0,0,0]),f=(0,l.Z)(u,2),d=f[0],p=f[1],b=o.useState(0),v=(0,l.Z)(b,2),m=v[0],y=v[1],E=(0,l.Z)(d,3),h=E[0],g=E[1],S=E[2],w=o.useState(0),C=(0,l.Z)(w,2),M=C[0],A=C[1],R=o.useRef(null),P=o.useRef(null),N=o.useMemo((function(){return(0,O.Z)(a)}),[a]),k=o.useMemo((function(){return function(e){var t=0;return e.forEach((function(e){z(e)?t+=String(e).length:t+=1})),t}(N)}),[N]),Z=o.useMemo((function(){return t&&3===m?n(V(N,g),g<k):n(N,!1)}),[t,m,n,N,g,k]);(0,x.Z)((function(){t&&i&&k&&(y(1),p([0,Math.ceil(k/2),k]))}),[t,i,a,k,c]),(0,x.Z)((function(){var e;1===m&&A((null===(e=R.current)||void 0===e?void 0:e.offsetHeight)||0)}),[m]),(0,x.Z)((function(){var e,t;if(M)if(1===m)((null===(e=P.current)||void 0===e?void 0:e.offsetHeight)||0)<=c*M?(y(4),s(!1)):y(2);else if(2===m)if(h!==S){var n=(null===(t=P.current)||void 0===t?void 0:t.offsetHeight)||0,r=h,o=S;h===S-1?o=h:n<=c*M?r=g:o=g;var a=Math.ceil((r+o)/2);p([r,a,o])}else y(3),s(!0)}),[m,h,S,c,M]);var T,_,I={width:i,whiteSpace:"normal",margin:0,padding:0},F=function(e,t,n){return o.createElement("span",{"aria-hidden":!0,ref:t,style:(0,r.Z)({position:"fixed",display:"block",left:0,top:0,zIndex:-9999,visibility:"hidden",pointerEvents:"none"},n)},e)};return o.createElement(o.Fragment,null,Z,t&&3!==m&&4!==m&&o.createElement(o.Fragment,null,F("lg",R,{wordBreak:"keep-all",whiteSpace:"nowrap"}),1===m?F(n(N,!1),P,I):(T=P,_=V(N,g),F(n(_,!0),T,I))))};const Q=function(e){var t=e.title,n=e.enabledEllipsis,r=e.isEllipsis,a=e.children;return t&&n?o.createElement(P.Z,{title:t,visible:!!r&&void 0},a):a};var q=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};function Y(e,t,n){return!0===e||void 0===e?t:e||n&&t}function J(e){return Array.isArray(e)?e:[e]}var ee=o.forwardRef((function(e,t){var n,s,u,f=e.prefixCls,d=e.className,b=e.style,v=e.type,y=e.disabled,h=e.children,N=e.ellipsis,k=e.editable,T=e.copyable,_=e.component,I=e.title,L=q(e,["prefixCls","className","style","type","disabled","children","ellipsis","editable","copyable","component","title"]),U=o.useContext(A.E_),W=U.getPrefixCls,B=U.direction,D=(0,R.E)("Text")[0],G=o.useRef(null),H=o.useRef(null),z=W("typography",f),V=(0,C.Z)(L,["mark","code","delete","underline","strong","keyboard","italic"]),ee=j(k),te=(0,l.Z)(ee,2),ne=te[0],re=te[1],oe=(0,w.Z)(!1,{value:re.editing}),ae=(0,l.Z)(oe,2),ie=ae[0],le=ae[1],ce=re.triggerType,se=void 0===ce?["icon"]:ce,ue=function(e){var t;e&&(null===(t=re.onStart)||void 0===t||t.call(re)),le(e)};n=function(){var e;ie||null===(e=H.current)||void 0===e||e.focus()},s=[ie],u=o.useRef(!1),o.useEffect((function(){u.current?n():u.current=!0}),s);var fe=function(e){null==e||e.preventDefault(),ue(!0)},de=j(T),pe=(0,l.Z)(de,2),be=pe[0],ve=pe[1],me=o.useState(!1),ye=(0,l.Z)(me,2),Ee=ye[0],he=ye[1],ge=o.useRef(),Se={};ve.format&&(Se.format=ve.format);var Oe=function(){clearTimeout(ge.current)},xe=function(e){var t;null==e||e.preventDefault(),null==e||e.stopPropagation(),g()(ve.text||String(h)||"",Se),he(!0),Oe(),ge.current=setTimeout((function(){he(!1)}),3e3),null===(t=ve.onCopy)||void 0===t||t.call(ve,e)};o.useEffect((function(){return Oe}),[]);var we=o.useState(!1),Ce=(0,l.Z)(we,2),Me=Ce[0],Ae=Ce[1],Re=o.useState(!1),Pe=(0,l.Z)(Re,2),Ne=Pe[0],ke=Pe[1],Ze=o.useState(!1),Te=(0,l.Z)(Ze,2),_e=Te[0],Ie=Te[1],Fe=o.useState(!1),Le=(0,l.Z)(Fe,2),Ue=Le[0],We=Le[1],Be=o.useState(!1),De=(0,l.Z)(Be,2),Ke=De[0],je=De[1],Ge=j(N,{expandable:!1}),He=(0,l.Z)(Ge,2),$e=He[0],ze=He[1],Ve=$e&&!_e,Xe=ze.rows,Qe=void 0===Xe?1:Xe,qe=o.useMemo((function(){return!Ve||void 0!==ze.suffix||ze.onEllipsis||ze.expandable||ne||be}),[Ve,ze,ne,be]);(0,x.Z)((function(){$e&&!qe&&(Ae(Z("webkitLineClamp")),ke(Z("textOverflow")))}),[qe,$e]);var Ye=o.useMemo((function(){return!qe&&(1===Qe?Ne:Me)}),[qe,Ne,Me]),Je=Ve&&(Ye?Ke:Ue),et=Ve&&1===Qe&&Ye,tt=Ve&&Qe>1&&Ye,nt=function(e){var t;Ie(!0),null===(t=ze.onExpand)||void 0===t||t.call(ze,e)},rt=o.useState(0),ot=(0,l.Z)(rt,2),at=ot[0],it=ot[1],lt=function(e){var t;We(e),Ue!==e&&(null===(t=ze.onEllipsis)||void 0===t||t.call(ze,e))};o.useEffect((function(){var e=G.current;if($e&&Ye&&e){var t=tt?e.offsetHeight<e.scrollHeight:e.offsetWidth<e.scrollWidth;Ke!==t&&je(t)}}),[$e,Ye,h,tt]);var ct=!0===ze.tooltip?h:ze.tooltip,st=o.useMemo((function(){var e=function(e){return["string","number"].includes((0,i.Z)(e))};if($e&&!Ye)return e(h)?h:e(I)?I:e(ct)?ct:void 0}),[$e,Ye,I,ct,Je]);if(ie)return o.createElement(K,{value:"string"==typeof h?h:"",onSave:function(e){var t;null===(t=re.onChange)||void 0===t||t.call(re,e),ue(!1)},onCancel:function(){var e;null===(e=re.onCancel)||void 0===e||e.call(re),ue(!1)},onEnd:re.onEnd,prefixCls:z,className:d,style:b,direction:B,component:_,maxLength:re.maxLength,autoSize:re.autoSize,enterIcon:re.enterIcon});var ut=function(){if(ne){var e=re.icon,t=re.tooltip,n=(0,O.Z)(t)[0]||D.edit,r="string"==typeof n?n:"";return se.includes("icon")?o.createElement(P.Z,{key:"edit",title:!1===t?"":n},o.createElement(F,{ref:H,className:"".concat(z,"-edit"),onClick:fe,"aria-label":r},e||o.createElement(m,{role:"button"}))):null}},ft=function(){if(be){var e=ve.tooltips,t=ve.icon,n=J(e),r=J(t),a=Ee?Y(n[1],D.copied):Y(n[0],D.copy),i=Ee?D.copied:D.copy,l="string"==typeof a?a:i;return o.createElement(P.Z,{key:"copy",title:a},o.createElement(F,{className:E()("".concat(z,"-copy"),Ee&&"".concat(z,"-copy-success")),onClick:xe,"aria-label":l},Ee?Y(r[1],o.createElement(c.Z,null),!0):Y(r[0],o.createElement(p,null),!0)))}};return o.createElement(S.Z,{onResize:function(e){var t=e.offsetWidth;it(t)},disabled:!Ve||Ye},(function(n){var i;return o.createElement(Q,{title:ct,enabledEllipsis:Ve,isEllipsis:Je},o.createElement($,(0,r.Z)({className:E()((i={},(0,a.Z)(i,"".concat(z,"-").concat(v),v),(0,a.Z)(i,"".concat(z,"-disabled"),y),(0,a.Z)(i,"".concat(z,"-ellipsis"),$e),(0,a.Z)(i,"".concat(z,"-single-line"),Ve&&1===Qe),(0,a.Z)(i,"".concat(z,"-ellipsis-single-line"),et),(0,a.Z)(i,"".concat(z,"-ellipsis-multiple-line"),tt),i),d),style:(0,r.Z)((0,r.Z)({},b),{WebkitLineClamp:tt?Qe:void 0}),component:_,ref:(0,M.sQ)(n,G,t),direction:B,onClick:se.includes("text")?fe:null,"aria-label":st,title:I},V),o.createElement(X,{enabledMeasure:Ve&&!Ye,text:h,rows:Qe,width:at,onEllipsis:lt},(function(t,n){var r=t;t.length&&n&&st&&(r=o.createElement("span",{key:"show-content","aria-hidden":!0},r));var a=function(e,t){var n=e.mark,r=e.code,a=e.underline,i=e.delete,l=e.strong,c=e.keyboard,s=e.italic,u=t;function f(e,t){e&&(u=o.createElement(t,{},u))}return f(l,"strong"),f(a,"u"),f(i,"del"),f(r,"code"),f(n,"mark"),f(c,"kbd"),f(s,"i"),u}(e,o.createElement(o.Fragment,null,r,function(e){return[e&&o.createElement("span",{"aria-hidden":!0,key:"ellipsis"},"..."),ze.suffix,(t=e,[t&&(r=ze.expandable,a=ze.symbol,r?(n=a||D.expand,o.createElement("a",{key:"expand",className:"".concat(z,"-expand"),onClick:nt,"aria-label":D.expand},n)):null),ut(),ft()])];var t,n,r,a}(n)));return a}))))}))}));const te=ee;var ne=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},re=function(e,t){var n=e.ellipsis,a=e.rel,i=ne(e,["ellipsis","rel"]),l=o.useRef(null);o.useImperativeHandle(t,(function(){return l.current}));var c=(0,r.Z)((0,r.Z)({},i),{rel:void 0===a&&"_blank"===i.target?"noopener noreferrer":a});return delete c.navigate,o.createElement(te,(0,r.Z)({},c,{ref:l,ellipsis:!!n,component:"a"}))};const oe=o.forwardRef(re);var ae=function(e,t){return o.createElement(te,(0,r.Z)({ref:t},e,{component:"div"}))};const ie=o.forwardRef(ae);var le=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},ce=function(e,t){var n=e.ellipsis,a=le(e,["ellipsis"]),l=o.useMemo((function(){return n&&"object"===(0,i.Z)(n)?(0,C.Z)(n,["expandable","rows"]):n}),[n]);return o.createElement(te,(0,r.Z)({ref:t},a,{ellipsis:l,component:"span"}))};const se=o.forwardRef(ce);var ue=n(3355),fe=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},de=(0,ue.a)(1,2,3,4,5),pe=function(e,t){var n,a=e.level,i=void 0===a?1:a,l=fe(e,["level"]);return n=-1!==de.indexOf(i)?"h".concat(i):"h1",o.createElement(te,(0,r.Z)({ref:t},l,{component:n}))};const be=o.forwardRef(pe);var ve=$;ve.Text=se,ve.Link=oe,ve.Title=be,ve.Paragraph=ie;const me=ve},8533:(e,t,n)=>{"use strict";n(1337),n(3416),n(1886)},640:(e,t,n)=>{"use strict";var r=n(1742),o={"text/plain":"Text","text/html":"Url",default:"Text"};e.exports=function(e,t){var n,a,i,l,c,s=!1;t||(t={}),t.debug;try{if(a=r(),i=document.createRange(),l=document.getSelection(),(c=document.createElement("span")).textContent=e,c.ariaHidden="true",c.style.all="unset",c.style.position="fixed",c.style.top=0,c.style.clip="rect(0, 0, 0, 0)",c.style.whiteSpace="pre",c.style.webkitUserSelect="text",c.style.MozUserSelect="text",c.style.msUserSelect="text",c.style.userSelect="text",c.addEventListener("copy",(function(n){if(n.stopPropagation(),t.format)if(n.preventDefault(),void 0===n.clipboardData){window.clipboardData.clearData();var r=o[t.format]||o.default;window.clipboardData.setData(r,e)}else n.clipboardData.clearData(),n.clipboardData.setData(t.format,e);t.onCopy&&(n.preventDefault(),t.onCopy(n.clipboardData))})),document.body.appendChild(c),i.selectNodeContents(c),l.addRange(i),!document.execCommand("copy"))throw new Error("copy command was unsuccessful");s=!0}catch(r){try{window.clipboardData.setData(t.format||"text",e),t.onCopy&&t.onCopy(window.clipboardData),s=!0}catch(r){n=function(e){var t=(/mac os x/i.test(navigator.userAgent)?"⌘":"Ctrl")+"+C";return e.replace(/#{\s*key\s*}/g,t)}("message"in t?t.message:"Copy to clipboard: #{key}, Enter"),window.prompt(n,e)}}finally{l&&("function"==typeof l.removeRange?l.removeRange(i):l.removeAllRanges()),c&&document.body.removeChild(c),a()}return s}},1795:function(e,t,n){var r;e=n.nmd(e),function(){"use strict";var o={function:!0,object:!0},a=o[typeof window]&&window||this,i=o[typeof t]&&t,l=o.object&&e&&!e.nodeType&&e,c=i&&l&&"object"==typeof n.g&&n.g;!c||c.global!==c&&c.window!==c&&c.self!==c||(a=c);var s=Math.pow(2,53)-1,u=/\bOpera/,f=Object.prototype,d=f.hasOwnProperty,p=f.toString;function b(e){return(e=String(e)).charAt(0).toUpperCase()+e.slice(1)}function v(e){return e=g(e),/^(?:webOS|i(?:OS|P))/.test(e)?e:b(e)}function m(e,t){for(var n in e)d.call(e,n)&&t(e[n],n,e)}function y(e){return null==e?b(e):p.call(e).slice(8,-1)}function E(e){return String(e).replace(/([ -])(?!$)/g,"$1?")}function h(e,t){var n=null;return function(e,t){var n=-1,r=e?e.length:0;if("number"==typeof r&&r>-1&&r<=s)for(;++n<r;)t(e[n],n,e);else m(e,t)}(e,(function(r,o){n=t(n,r,o,e)})),n}function g(e){return String(e).replace(/^ +| +$/g,"")}var S=function e(t){var n=a,r=t&&"object"==typeof t&&"String"!=y(t);r&&(n=t,t=null);var o=n.navigator||{},i=o.userAgent||"";t||(t=i);var l,c,s,f,d,b=r?!!o.likeChrome:/\bChrome\b/.test(t)&&!/internal|\n/i.test(p.toString()),S="Object",O=r?S:"ScriptBridgingProxyObject",x=r?S:"Environment",w=r&&n.java?"JavaPackage":y(n.java),C=r?S:"RuntimeObject",M=/\bJava/.test(w)&&n.java,A=M&&y(n.environment)==x,R=M?"a":"α",P=M?"b":"β",N=n.document||{},k=n.operamini||n.opera,Z=u.test(Z=r&&k?k["[[Class]]"]:y(k))?Z:k=null,T=t,_=[],I=null,F=t==i,L=F&&k&&"function"==typeof k.version&&k.version(),U=h([{label:"EdgeHTML",pattern:"Edge"},"Trident",{label:"WebKit",pattern:"AppleWebKit"},"iCab","Presto","NetFront","Tasman","KHTML","Gecko"],(function(e,n){return e||RegExp("\\b"+(n.pattern||E(n))+"\\b","i").exec(t)&&(n.label||n)})),W=function(e){return h(e,(function(e,n){return e||RegExp("\\b"+(n.pattern||E(n))+"\\b","i").exec(t)&&(n.label||n)}))}(["Adobe AIR","Arora","Avant Browser","Breach","Camino","Electron","Epiphany","Fennec","Flock","Galeon","GreenBrowser","iCab","Iceweasel","K-Meleon","Konqueror","Lunascape","Maxthon",{label:"Microsoft Edge",pattern:"Edge"},"Midori","Nook Browser","PaleMoon","PhantomJS","Raven","Rekonq","RockMelt",{label:"Samsung Internet",pattern:"SamsungBrowser"},"SeaMonkey",{label:"Silk",pattern:"(?:Cloud9|Silk-Accelerated)"},"Sleipnir","SlimBrowser",{label:"SRWare Iron",pattern:"Iron"},"Sunrise","Swiftfox","Waterfox","WebPositive","Opera Mini",{label:"Opera Mini",pattern:"OPiOS"},"Opera",{label:"Opera",pattern:"OPR"},"Chrome",{label:"Chrome Mobile",pattern:"(?:CriOS|CrMo)"},{label:"Firefox",pattern:"(?:Firefox|Minefield)"},{label:"Firefox for iOS",pattern:"FxiOS"},{label:"IE",pattern:"IEMobile"},{label:"IE",pattern:"MSIE"},"Safari"]),B=j([{label:"BlackBerry",pattern:"BB10"},"BlackBerry",{label:"Galaxy S",pattern:"GT-I9000"},{label:"Galaxy S2",pattern:"GT-I9100"},{label:"Galaxy S3",pattern:"GT-I9300"},{label:"Galaxy S4",pattern:"GT-I9500"},{label:"Galaxy S5",pattern:"SM-G900"},{label:"Galaxy S6",pattern:"SM-G920"},{label:"Galaxy S6 Edge",pattern:"SM-G925"},{label:"Galaxy S7",pattern:"SM-G930"},{label:"Galaxy S7 Edge",pattern:"SM-G935"},"Google TV","Lumia","iPad","iPod","iPhone","Kindle",{label:"Kindle Fire",pattern:"(?:Cloud9|Silk-Accelerated)"},"Nexus","Nook","PlayBook","PlayStation Vita","PlayStation","TouchPad","Transformer",{label:"Wii U",pattern:"WiiU"},"Wii","Xbox One",{label:"Xbox 360",pattern:"Xbox"},"Xoom"]),D=function(e){return h(e,(function(e,n,r){return e||(n[B]||n[/^[a-z]+(?: +[a-z]+\b)*/i.exec(B)]||RegExp("\\b"+E(r)+"(?:\\b|\\w*\\d)","i").exec(t))&&r}))}({Apple:{iPad:1,iPhone:1,iPod:1},Archos:{},Amazon:{Kindle:1,"Kindle Fire":1},Asus:{Transformer:1},"Barnes & Noble":{Nook:1},BlackBerry:{PlayBook:1},Google:{"Google TV":1,Nexus:1},HP:{TouchPad:1},HTC:{},LG:{},Microsoft:{Xbox:1,"Xbox One":1},Motorola:{Xoom:1},Nintendo:{"Wii U":1,Wii:1},Nokia:{Lumia:1},Samsung:{"Galaxy S":1,"Galaxy S2":1,"Galaxy S3":1,"Galaxy S4":1},Sony:{PlayStation:1,"PlayStation Vita":1}}),K=function(e){return h(e,(function(e,n){var r=n.pattern||E(n);return!e&&(e=RegExp("\\b"+r+"(?:/[\\d.]+|[ \\w.]*)","i").exec(t))&&(e=function(e,t,n){var r={"10.0":"10",6.4:"10 Technical Preview",6.3:"8.1",6.2:"8",6.1:"Server 2008 R2 / 7","6.0":"Server 2008 / Vista",5.2:"Server 2003 / XP 64-bit",5.1:"XP",5.01:"2000 SP1","5.0":"2000","4.0":"NT","4.90":"ME"};return t&&n&&/^Win/i.test(e)&&!/^Windows Phone /i.test(e)&&(r=r[/[\d.]+$/.exec(e)])&&(e="Windows "+r),e=String(e),t&&n&&(e=e.replace(RegExp(t,"i"),n)),v(e.replace(/ ce$/i," CE").replace(/\bhpw/i,"web").replace(/\bMacintosh\b/,"Mac OS").replace(/_PowerPC\b/i," OS").replace(/\b(OS X) [^ \d]+/i,"$1").replace(/\bMac (OS X)\b/,"$1").replace(/\/(\d)/," $1").replace(/_/g,".").replace(/(?: BePC|[ .]*fc[ \d.]+)$/i,"").replace(/\bx86\.64\b/gi,"x86_64").replace(/\b(Windows Phone) OS\b/,"$1").replace(/\b(Chrome OS \w+) [\d.]+\b/,"$1").split(" on ")[0])}(e,r,n.label||n)),e}))}(["Windows Phone","Android","CentOS",{label:"Chrome OS",pattern:"CrOS"},"Debian","Fedora","FreeBSD","Gentoo","Haiku","Kubuntu","Linux Mint","OpenBSD","Red Hat","SuSE","Ubuntu","Xubuntu","Cygwin","Symbian OS","hpwOS","webOS ","webOS","Tablet OS","Tizen","Linux","Mac OS X","Macintosh","Mac","Windows 98;","Windows "]);function j(e){return h(e,(function(e,n){var r=n.pattern||E(n);return!e&&(e=RegExp("\\b"+r+" *\\d+[.\\w_]*","i").exec(t)||RegExp("\\b"+r+" *\\w+-[\\w]*","i").exec(t)||RegExp("\\b"+r+"(?:; *(?:[a-z]+[_-])?[a-z]+\\d+|[^ ();-]*)","i").exec(t))&&((e=String(n.label&&!RegExp(r,"i").test(n.label)?n.label:e).split("/"))[1]&&!/[\d.]+/.test(e[0])&&(e[0]+=" "+e[1]),n=n.label||n,e=v(e[0].replace(RegExp(r,"i"),n).replace(RegExp("; *(?:"+n+"[_-])?","i")," ").replace(RegExp("("+n+")[-_.]?(\\w)","i"),"$1 $2"))),e}))}if(U&&(U=[U]),D&&!B&&(B=j([D])),(l=/\bGoogle TV\b/.exec(B))&&(B=l[0]),/\bSimulator\b/i.test(t)&&(B=(B?B+" ":"")+"Simulator"),"Opera Mini"==W&&/\bOPiOS\b/.test(t)&&_.push("running in Turbo/Uncompressed mode"),"IE"==W&&/\blike iPhone OS\b/.test(t)?(D=(l=e(t.replace(/like iPhone OS/,""))).manufacturer,B=l.product):/^iP/.test(B)?(W||(W="Safari"),K="iOS"+((l=/ OS ([\d_]+)/i.exec(t))?" "+l[1].replace(/_/g,"."):"")):"Konqueror"!=W||/buntu/i.test(K)?D&&"Google"!=D&&(/Chrome/.test(W)&&!/\bMobile Safari\b/i.test(t)||/\bVita\b/.test(B))||/\bAndroid\b/.test(K)&&/^Chrome/.test(W)&&/\bVersion\//i.test(t)?(W="Android Browser",K=/\bAndroid\b/.test(K)?K:"Android"):"Silk"==W?(/\bMobi/i.test(t)||(K="Android",_.unshift("desktop mode")),/Accelerated *= *true/i.test(t)&&_.unshift("accelerated")):"PaleMoon"==W&&(l=/\bFirefox\/([\d.]+)\b/.exec(t))?_.push("identifying as Firefox "+l[1]):"Firefox"==W&&(l=/\b(Mobile|Tablet|TV)\b/i.exec(t))?(K||(K="Firefox OS"),B||(B=l[1])):!W||(l=!/\bMinefield\b/i.test(t)&&/\b(?:Firefox|Safari)\b/.exec(W))?(W&&!B&&/[\/,]|^[^(]+?\)/.test(t.slice(t.indexOf(l+"/")+8))&&(W=null),(l=B||D||K)&&(B||D||/\b(?:Android|Symbian OS|Tablet OS|webOS)\b/.test(K))&&(W=/[a-z]+(?: Hat)?/i.exec(/\bAndroid\b/.test(K)?K:l)+" Browser")):"Electron"==W&&(l=(/\bChrome\/([\d.]+)\b/.exec(t)||0)[1])&&_.push("Chromium "+l):K="Kubuntu",L||(L=h(["(?:Cloud9|CriOS|CrMo|Edge|FxiOS|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\d.]+$))","Version",E(W),"(?:Firefox|Minefield|NetFront)"],(function(e,n){return e||(RegExp(n+"(?:-[\\d.]+/|(?: for [\\w-]+)?[ /-])([\\d.]+[^ ();/_-]*)","i").exec(t)||0)[1]||null}))),(l=("iCab"==U&&parseFloat(L)>3?"WebKit":/\bOpera\b/.test(W)&&(/\bOPR\b/.test(t)?"Blink":"Presto"))||/\b(?:Midori|Nook|Safari)\b/i.test(t)&&!/^(?:Trident|EdgeHTML)$/.test(U)&&"WebKit"||!U&&/\bMSIE\b/i.test(t)&&("Mac OS"==K?"Tasman":"Trident")||"WebKit"==U&&/\bPlayStation\b(?! Vita\b)/i.test(W)&&"NetFront")&&(U=[l]),"IE"==W&&(l=(/; *(?:XBLWP|ZuneWP)(\d+)/i.exec(t)||0)[1])?(W+=" Mobile",K="Windows Phone "+(/\+$/.test(l)?l:l+".x"),_.unshift("desktop mode")):/\bWPDesktop\b/i.test(t)?(W="IE Mobile",K="Windows Phone 8.x",_.unshift("desktop mode"),L||(L=(/\brv:([\d.]+)/.exec(t)||0)[1])):"IE"!=W&&"Trident"==U&&(l=/\brv:([\d.]+)/.exec(t))&&(W&&_.push("identifying as "+W+(L?" "+L:"")),W="IE",L=l[1]),F){if(f="global",d=null!=(s=n)?typeof s[f]:"number",/^(?:boolean|number|string|undefined)$/.test(d)||"object"==d&&!s[f])y(l=n.runtime)==O?(W="Adobe AIR",K=l.flash.system.Capabilities.os):y(l=n.phantom)==C?(W="PhantomJS",L=(l=l.version||null)&&l.major+"."+l.minor+"."+l.patch):"number"==typeof N.documentMode&&(l=/\bTrident\/(\d+)/i.exec(t))?(L=[L,N.documentMode],(l=+l[1]+4)!=L[1]&&(_.push("IE "+L[1]+" mode"),U&&(U[1]=""),L[1]=l),L="IE"==W?String(L[1].toFixed(1)):L[0]):"number"==typeof N.documentMode&&/^(?:Chrome|Firefox)\b/.test(W)&&(_.push("masking as "+W+" "+L),W="IE",L="11.0",U=["Trident"],K="Windows");else if(M&&(T=(l=M.lang.System).getProperty("os.arch"),K=K||l.getProperty("os.name")+" "+l.getProperty("os.version")),A){try{L=n.require("ringo/engine").version.join("."),W="RingoJS"}catch(e){(l=n.system)&&l.global.system==n.system&&(W="Narwhal",K||(K=l[0].os||null))}W||(W="Rhino")}else"object"==typeof n.process&&!n.process.browser&&(l=n.process)&&("object"==typeof l.versions&&("string"==typeof l.versions.electron?(_.push("Node "+l.versions.node),W="Electron",L=l.versions.electron):"string"==typeof l.versions.nw&&(_.push("Chromium "+L,"Node "+l.versions.node),W="NW.js",L=l.versions.nw)),W||(W="Node.js",T=l.arch,K=l.platform,L=(L=/[\d.]+/.exec(l.version))?L[0]:null));K=K&&v(K)}if(L&&(l=/(?:[ab]|dp|pre|[ab]\d+pre)(?:\d+\+?)?$/i.exec(L)||/(?:alpha|beta)(?: ?\d)?/i.exec(t+";"+(F&&o.appMinorVersion))||/\bMinefield\b/i.test(t)&&"a")&&(I=/b/i.test(l)?"beta":"alpha",L=L.replace(RegExp(l+"\\+?$"),"")+("beta"==I?P:R)+(/\d+\+?/.exec(l)||"")),"Fennec"==W||"Firefox"==W&&/\b(?:Android|Firefox OS)\b/.test(K))W="Firefox Mobile";else if("Maxthon"==W&&L)L=L.replace(/\.[\d.]+/,".x");else if(/\bXbox\b/i.test(B))"Xbox 360"==B&&(K=null),"Xbox 360"==B&&/\bIEMobile\b/.test(t)&&_.unshift("mobile mode");else if(!/^(?:Chrome|IE|Opera)$/.test(W)&&(!W||B||/Browser|Mobi/.test(W))||"Windows CE"!=K&&!/Mobi/i.test(t))if("IE"==W&&F)try{null===n.external&&_.unshift("platform preview")}catch(e){_.unshift("embedded")}else(/\bBlackBerry\b/.test(B)||/\bBB10\b/.test(t))&&(l=(RegExp(B.replace(/ +/g," *")+"/([.\\d]+)","i").exec(t)||0)[1]||L)?(K=((l=[l,/BB10/.test(t)])[1]?(B=null,D="BlackBerry"):"Device Software")+" "+l[0],L=null):this!=m&&"Wii"!=B&&(F&&k||/Opera/.test(W)&&/\b(?:MSIE|Firefox)\b/i.test(t)||"Firefox"==W&&/\bOS X (?:\d+\.){2,}/.test(K)||"IE"==W&&(K&&!/^Win/.test(K)&&L>5.5||/\bWindows XP\b/.test(K)&&L>8||8==L&&!/\bTrident\b/.test(t)))&&!u.test(l=e.call(m,t.replace(u,"")+";"))&&l.name&&(l="ing as "+l.name+((l=l.version)?" "+l:""),u.test(W)?(/\bIE\b/.test(l)&&"Mac OS"==K&&(K=null),l="identify"+l):(l="mask"+l,W=Z?v(Z.replace(/([a-z])([A-Z])/g,"$1 $2")):"Opera",/\bIE\b/.test(l)&&(K=null),F||(L=null)),U=["Presto"],_.push(l));else W+=" Mobile";(l=(/\bAppleWebKit\/([\d.]+\+?)/i.exec(t)||0)[1])&&(l=[parseFloat(l.replace(/\.(\d)$/,".0$1")),l],"Safari"==W&&"+"==l[1].slice(-1)?(W="WebKit Nightly",I="alpha",L=l[1].slice(0,-1)):L!=l[1]&&L!=(l[2]=(/\bSafari\/([\d.]+\+?)/i.exec(t)||0)[1])||(L=null),l[1]=(/\bChrome\/([\d.]+)/i.exec(t)||0)[1],537.36==l[0]&&537.36==l[2]&&parseFloat(l[1])>=28&&"WebKit"==U&&(U=["Blink"]),F&&(b||l[1])?(U&&(U[1]="like Chrome"),l=l[1]||((l=l[0])<530?1:l<532?2:l<532.05?3:l<533?4:l<534.03?5:l<534.07?6:l<534.1?7:l<534.13?8:l<534.16?9:l<534.24?10:l<534.3?11:l<535.01?12:l<535.02?"13+":l<535.07?15:l<535.11?16:l<535.19?17:l<536.05?18:l<536.1?19:l<537.01?20:l<537.11?"21+":l<537.13?23:l<537.18?24:l<537.24?25:l<537.36?26:"Blink"!=U?"27":"28")):(U&&(U[1]="like Safari"),l=(l=l[0])<400?1:l<500?2:l<526?3:l<533?4:l<534?"4+":l<535?5:l<537?6:l<538?7:l<601?8:"8"),U&&(U[1]+=" "+(l+="number"==typeof l?".x":/[.+]/.test(l)?"":"+")),"Safari"==W&&(!L||parseInt(L)>45)&&(L=l)),"Opera"==W&&(l=/\bzbov|zvav$/.exec(K))?(W+=" ",_.unshift("desktop mode"),"zvav"==l?(W+="Mini",L=null):W+="Mobile",K=K.replace(RegExp(" *"+l+"$"),"")):"Safari"==W&&/\bChrome\b/.exec(U&&U[1])&&(_.unshift("desktop mode"),W="Chrome Mobile",L=null,/\bOS X\b/.test(K)?(D="Apple",K="iOS 4.3+"):K=null),L&&0==L.indexOf(l=/[\d.]+$/.exec(K))&&t.indexOf("/"+l+"-")>-1&&(K=g(K.replace(l,""))),U&&!/\b(?:Avant|Nook)\b/.test(W)&&(/Browser|Lunascape|Maxthon/.test(W)||"Safari"!=W&&/^iOS/.test(K)&&/\bSafari\b/.test(U[1])||/^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|Web)/.test(W)&&U[1])&&(l=U[U.length-1])&&_.push(l),_.length&&(_=["("+_.join("; ")+")"]),D&&B&&B.indexOf(D)<0&&_.push("on "+D),B&&_.push((/^on /.test(_[_.length-1])?"":"on ")+B),K&&(l=/ ([\d.+]+)$/.exec(K),c=l&&"/"==K.charAt(K.length-l[0].length-1),K={architecture:32,family:l&&!c?K.replace(l[0],""):K,version:l?l[1]:null,toString:function(){var e=this.version;return this.family+(e&&!c?" "+e:"")+(64==this.architecture?" 64-bit":"")}}),(l=/\b(?:AMD|IA|Win|WOW|x86_|x)64\b/i.exec(T))&&!/\bi686\b/i.test(T)?(K&&(K.architecture=64,K.family=K.family.replace(RegExp(" *"+l),"")),W&&(/\bWOW64\b/i.test(t)||F&&/\w(?:86|32)$/.test(o.cpuClass||o.platform)&&!/\bWin64; x64\b/i.test(t))&&_.unshift("32-bit")):K&&/^OS X/.test(K.family)&&"Chrome"==W&&parseFloat(L)>=39&&(K.architecture=64),t||(t=null);var G={};return G.description=t,G.layout=U&&U[0],G.manufacturer=D,G.name=W,G.prerelease=I,G.product=B,G.ua=t,G.version=W&&L,G.os=K||{architecture:null,family:null,version:null,toString:function(){return"null"}},G.parse=e,G.toString=function(){return this.description||""},G.version&&_.unshift(L),G.name&&_.unshift(W),K&&W&&(K!=String(K).split(" ")[0]||K!=W.split(" ")[0]&&!B)&&_.push(B?"("+K+")":"on "+K),_.length&&(G.description=_.join(" ")),G}();a.platform=S,void 0===(r=function(){return S}.call(t,n,t,e))||(e.exports=r)}.call(this)},6077:(e,t,n)=>{"use strict";n.d(t,{RV:()=>c.R,zb:()=>s.Z});var r=n(7294),o=n(1045),a=n(5378),i=n(4294),l=n(5318),c=n(1696),s=n(8665),u=(n(2131),n(1806)),f=r.forwardRef(l.Z);f.FormProvider=c.R,f.Field=o.Z,f.List=a.Z,f.useForm=i.Z,f.useWatch=u.Z},4173:(e,t,n)=>{"use strict";n.d(t,{Z:()=>h});var r=n(7462),o=n(4925),a=n(1413),i=n(5671),l=n(3144),c=n(7326),s=n(9340),u=n(8557),f=n(4942),d=n(7294),p=n(4542),b=n(2378),v=n(4159),m=["component","children","onVisibleChanged","onAllRemoved"],y=["status"],E=["eventProps","visible","children","motionName","motionAppear","motionEnter","motionLeave","motionLeaveImmediately","motionDeadline","removeOnLeave","leavedClassName","onAppearPrepare","onAppearStart","onAppearActive","onAppearEnd","onEnterStart","onEnterActive","onEnterEnd","onLeaveStart","onLeaveActive","onLeaveEnd"];const h=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:p.Z,n=function(e){(0,s.Z)(p,e);var n=(0,u.Z)(p);function p(){var e;(0,i.Z)(this,p);for(var t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return e=n.call.apply(n,[this].concat(r)),(0,f.Z)((0,c.Z)(e),"state",{keyEntities:[]}),(0,f.Z)((0,c.Z)(e),"removeKey",(function(t){var n=e.state.keyEntities.map((function(e){return e.key!==t?e:(0,a.Z)((0,a.Z)({},e),{},{status:b.Td})}));return e.setState({keyEntities:n}),n.filter((function(e){return e.status!==b.Td})).length})),e}return(0,l.Z)(p,[{key:"render",value:function(){var e=this,n=this.state.keyEntities,i=this.props,l=i.component,c=i.children,s=i.onVisibleChanged,u=i.onAllRemoved,f=(0,o.Z)(i,m),p=l||d.Fragment,v={};return E.forEach((function(e){v[e]=f[e],delete f[e]})),delete f.keys,d.createElement(p,f,n.map((function(n,i){var l=n.status,f=(0,o.Z)(n,y),p=l===b.zM||l===b.ff;return d.createElement(t,(0,r.Z)({},v,{key:f.key,visible:p,eventProps:f,onVisibleChanged:function(t){(null==s||s(t,{key:f.key}),t)||0===e.removeKey(f.key)&&u&&u()}}),(function(e,t){return c((0,a.Z)((0,a.Z)({},e),{},{index:i}),t)}))})))}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=e.keys,r=t.keyEntities,o=(0,b.l4)(n);return{keyEntities:(0,b.uz)(r,o).filter((function(e){var t=r.find((function(t){var n=t.key;return e.key===n}));return!t||t.status!==b.Td||e.status!==b.p4}))}}}]),p}(d.Component);return(0,f.Z)(n,"defaultProps",{component:"div"}),n}(v.Cq)},344:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(7294),o=n(1805);function a(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=[];return r.Children.forEach(e,(function(e){(null!=e||t.keepEmpty)&&(Array.isArray(e)?n=n.concat(a(e)):(0,o.isFragment)(e)&&e.props?n=n.concat(a(e.props.children,t)):n.push(e))})),n}},5105:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r={MAC_ENTER:3,BACKSPACE:8,TAB:9,NUM_CENTER:12,ENTER:13,SHIFT:16,CTRL:17,ALT:18,PAUSE:19,CAPS_LOCK:20,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,PRINT_SCREEN:44,INSERT:45,DELETE:46,ZERO:48,ONE:49,TWO:50,THREE:51,FOUR:52,FIVE:53,SIX:54,SEVEN:55,EIGHT:56,NINE:57,QUESTION_MARK:63,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,META:91,WIN_KEY_RIGHT:92,CONTEXT_MENU:93,NUM_ZERO:96,NUM_ONE:97,NUM_TWO:98,NUM_THREE:99,NUM_FOUR:100,NUM_FIVE:101,NUM_SIX:102,NUM_SEVEN:103,NUM_EIGHT:104,NUM_NINE:105,NUM_MULTIPLY:106,NUM_PLUS:107,NUM_MINUS:109,NUM_PERIOD:110,NUM_DIVISION:111,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,NUMLOCK:144,SEMICOLON:186,DASH:189,EQUALS:187,COMMA:188,PERIOD:190,SLASH:191,APOSTROPHE:192,SINGLE_QUOTE:222,OPEN_SQUARE_BRACKET:219,BACKSLASH:220,CLOSE_SQUARE_BRACKET:221,WIN_KEY:224,MAC_FF_META:224,WIN_IME:229,isTextModifyingKeyEvent:function(e){var t=e.keyCode;if(e.altKey&&!e.ctrlKey||e.metaKey||t>=r.F1&&t<=r.F12)return!1;switch(t){case r.ALT:case r.CAPS_LOCK:case r.CONTEXT_MENU:case r.CTRL:case r.DOWN:case r.END:case r.ESC:case r.HOME:case r.INSERT:case r.LEFT:case r.MAC_FF_META:case r.META:case r.NUMLOCK:case r.NUM_CENTER:case r.PAGE_DOWN:case r.PAGE_UP:case r.PAUSE:case r.PRINT_SCREEN:case r.RIGHT:case r.SHIFT:case r.UP:case r.WIN_KEY:case r.WIN_KEY_RIGHT:return!1;default:return!0}},isCharacterKey:function(e){if(e>=r.ZERO&&e<=r.NINE)return!0;if(e>=r.NUM_ZERO&&e<=r.NUM_MULTIPLY)return!0;if(e>=r.A&&e<=r.Z)return!0;if(-1!==window.navigator.userAgent.indexOf("WebKit")&&0===e)return!0;switch(e){case r.SPACE:case r.QUESTION_MARK:case r.NUM_PLUS:case r.NUM_MINUS:case r.NUM_PERIOD:case r.NUM_DIVISION:case r.SEMICOLON:case r.DASH:case r.EQUALS:case r.COMMA:case r.PERIOD:case r.SLASH:case r.APOSTROPHE:case r.SINGLE_QUOTE:case r.OPEN_SQUARE_BRACKET:case r.BACKSLASH:case r.CLOSE_SQUARE_BRACKET:return!0;default:return!1}}};const o=r},6982:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7294);function o(e,t,n){var o=r.useRef({});return"value"in o.current&&!n(o.current.condition,t)||(o.current.value=e(),o.current.condition=t),o.current.value}},5164:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=function(e){return+setTimeout(e,16)},o=function(e){return clearTimeout(e)};"undefined"!=typeof window&&"requestAnimationFrame"in window&&(r=function(e){return window.requestAnimationFrame(e)},o=function(e){return window.cancelAnimationFrame(e)});var a=0,i=new Map;function l(e){i.delete(e)}var c=function(e){var t=a+=1;return function n(o){if(0===o)l(t),e();else{var a=r((function(){n(o-1)}));i.set(t,a)}}(arguments.length>1&&void 0!==arguments[1]?arguments[1]:1),t};c.cancel=function(e){var t=i.get(e);return l(e),o(t)};const s=c},8880:(e,t,n)=>{"use strict";n.d(t,{Z:()=>c});var r=n(1413),o=n(3433),a=n(4506),i=n(8306);function l(e,t,n,i){if(!t.length)return n;var c,s=(0,a.Z)(t),u=s[0],f=s.slice(1);return c=e||"number"!=typeof u?Array.isArray(e)?(0,o.Z)(e):(0,r.Z)({},e):[],i&&void 0===n&&1===f.length?delete c[u][f[0]]:c[u]=l(c[u],f,n,i),c}function c(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return t.length&&r&&void 0===n&&!(0,i.Z)(e,t.slice(0,-1))?e:l(e,t,n,r)}"undefined"==typeof Reflect?Object.keys:Reflect.ownKeys},334:(e,t,n)=>{"use strict";n.d(t,{ZP:()=>s});var r={},o=[];function a(e,t){}function i(e,t){}function l(e,t,n){t||r[n]||(e(!1,n),r[n]=!0)}function c(e,t){l(a,e,t)}c.preMessage=function(e){o.push(e)},c.resetWarned=function(){r={}},c.noteOnce=function(e,t){l(i,e,t)};const s=c},1805:(e,t,n)=>{"use strict";e.exports=n(1162)},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){}}(),e.exports=n(4448)},5251:(e,t,n)=>{"use strict";var r=n(7294),o=60103;if(60107,"function"==typeof Symbol&&Symbol.for){var a=Symbol.for;o=a("react.element"),a("react.fragment")}var i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l=Object.prototype.hasOwnProperty,c={key:!0,ref:!0,__self:!0,__source:!0};function s(e,t,n){var r,a={},s=null,u=null;for(r in void 0!==n&&(s=""+n),void 0!==t.key&&(s=""+t.key),void 0!==t.ref&&(u=t.ref),t)l.call(t,r)&&!c.hasOwnProperty(r)&&(a[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===a[r]&&(a[r]=t[r]);return{$$typeof:o,type:e,key:s,ref:u,props:a,_owner:i.current}}t.jsx=s,t.jsxs=s},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},5893:(e,t,n)=>{"use strict";e.exports=n(5251)},1742:e=>{e.exports=function(){var e=document.getSelection();if(!e.rangeCount)return function(){};for(var t=document.activeElement,n=[],r=0;r<e.rangeCount;r++)n.push(e.getRangeAt(r));switch(t.tagName.toUpperCase()){case"INPUT":case"TEXTAREA":t.blur();break;default:t=null}return e.removeAllRanges(),function(){"Caret"===e.type&&e.removeAllRanges(),e.rangeCount||n.forEach((function(t){e.addRange(t)})),t&&t.focus()}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,