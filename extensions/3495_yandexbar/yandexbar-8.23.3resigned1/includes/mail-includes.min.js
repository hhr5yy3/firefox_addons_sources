!function(modules) {
    function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) return installedModules[moduleId].exports;
        var module = installedModules[moduleId] = {
            exports: {},
            id: moduleId,
            loaded: !1
        };
        return modules[moduleId].call(module.exports, module, module.exports, __webpack_require__), 
        module.loaded = !0, module.exports;
    }
    var installedModules = {};
    return __webpack_require__.m = modules, __webpack_require__.c = installedModules, 
    __webpack_require__.p = "", __webpack_require__(0);
}({
    0: function(module, exports, __webpack_require__) {
        "use strict";
        var dispatcher = __webpack_require__(262);
        !function() {
            function init() {
                dispatcher.on("wdgt.preferences.setted", onPreference), dispatcher.on("wdgt.preferences.getted", onPreference), 
                dispatcher.trigger("yandex.mail.get-mailto-value");
            }
            function onPreference(topic, parameters) {
                parameters.name === preference && (parameters.value = Boolean(parameters.value), 
                enabled !== parameters.value && (enabled = parameters.value, enabled ? document.addEventListener("click", onClick, !0) : document.removeEventListener("click", onClick, !0)));
            }
            function onClick(e) {
                for (var node = e.target; node; ) {
                    var b = !1;
                    try {
                        b = "a" === node.localName.toLowerCase();
                    } catch (error) {}
                    if (b) {
                        var href = node.href;
                        "mailto:" === href.substr(0, 7).toLowerCase() && (e.preventDefault(), dispatcher.trigger("yandex.mail.compose", {
                            url: href
                        }));
                        break;
                    }
                    node = node.parentNode;
                }
            }
            var enabled = !1, preference = "application.mail-protocol-hook";
            setTimeout(init, 0);
        }();
    },
    262: function(module, exports) {
        "use strict";
        var Dispatcher = function() {
            this._events = [], this.init();
        };
        Dispatcher.prototype.init = function() {
            chrome.runtime.onMessage.addListener(this._messageHandler.bind(this));
        }, Dispatcher.prototype.trigger = function(topic, data, options, responseCallback) {
            var params = {
                topic: topic,
                data: data,
                options: options,
                nano: !0
            };
            responseCallback ? chrome.runtime.sendMessage(params, responseCallback) : chrome.runtime.sendMessage(params);
        }, Dispatcher.prototype.on = function(topic, handler, ctx, once) {
            this._events.push({
                topic: topic,
                handler: handler,
                ctx: ctx,
                once: once,
                mute: !1
            });
        }, Dispatcher.prototype.off = function(topic, handler) {
            this._events = this._events.filter(function(event) {
                return event.topic !== topic || event.handler !== handler;
            });
        }, Dispatcher.prototype.ignoreEvent = function(topic) {
            this._events = this._events.filter(function(event) {
                return event.topic !== topic;
            });
        }, Dispatcher.prototype.once = function(topic, handler, ctx) {
            this.on(topic, handler, ctx, !0);
        }, Dispatcher.prototype.flush = function() {
            this._events = [];
        }, Dispatcher.prototype.willTrigger = function(topic) {
            return this._events.some(function(event) {
                return event.topic === topic;
            });
        }, Dispatcher.prototype.hasListener = function(topic, handler) {
            return this._events.some(function(event) {
                return event.topic === topic && event.handler === handler;
            });
        }, Dispatcher.prototype._messageHandler = function(params, sender, sendResponse) {
            if (params.topic) return params.options = params.options || {}, params.options.sendResponse = sendResponse, 
            this._internalTrigger(params.topic, params.data, params.options), Boolean(params.options.asyncResponse);
        }, Dispatcher.prototype._internalTrigger = function(topic, data, options) {
            var events = [];
            this._events = this._events.filter(function(event) {
                return event.topic !== topic || (events.push(event), !event.once);
            }), events.forEach(function(event) {
                event.handler.call(event.ctx, topic, data, options);
            });
        }, module.exports = new Dispatcher();
    }
});