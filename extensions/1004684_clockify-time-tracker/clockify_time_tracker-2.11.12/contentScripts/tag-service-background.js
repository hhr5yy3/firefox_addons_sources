class TagService extends ClockifyService{constructor(){}static async getUrlTags(){return`${await this.apiEndpoint}/v1/workspaces/${await this.workspaceId}/tags`}static async getOrCreateTags(t){let a=[],e="",s=1,i=0;do{const{data:t,error:e,status:r}=await this.getAllTagsWithFilter(s,50);if(200!==r){if(e)return{tagovi:[],message:e.message};break}a=a.concat(t.map((t=>({id:t.id,name:t.name})))),s++,i=t.length}while(50===i);const{forceTags:r}=await this.getForces(),n=[];let c=!1;for(const s of t){const t=a.find((t=>t.name.toUpperCase()===s.toUpperCase())),i=await this.getCreateObjects(),r=await this.getCanCreateTags();if(t)n.push(t);else if(i&&r){const{data:t,error:a,status:i}=await this.createTag({name:s});201===i?n.push(t):e+=`\nCouldn't create tag: ${s}`}else e+=`\nCouldn't create tag: ${s}`,i||(c=!0)}return c&&(e+="\n Integrations can't create tags."),r&&n.length!==t.length&&(e+="\n Tags are required."),{tagovi:n,message:e}}static async getAllTagsWithFilter(t,a,e){let s=`${await this.getUrlTags()}?page=${t}&pagesize=${a}&archived=false`;return e&&(s=s.concat(`&name=${e}`)),await this.apiCall(s)}static async createTag(t){const a=await this.getUrlTags(),e=t;return await this.apiCall(a,"POST",e)}}