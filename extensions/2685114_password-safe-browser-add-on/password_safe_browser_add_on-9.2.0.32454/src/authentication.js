function Authentication(profile,username){const _self=this;_self.profile=profile,_self.username=username;let supportsAuthFlowCache=void 0;0!==profile.endpoint.toLowerCase().indexOf("http")&&(profile.endpoint="https://"+profile.endpoint);const psrApi=new PsrApi(profile.endpoint),clientInfo={ClientType:"BrowserExtension",ClientVersion:browser.runtime.getManifest().version,OidcRedirectUrl:browser.identity.getRedirectURL()},firstAuthEP=profile.endpoint+"/auth/GetFirstAuthentication",authEP=profile.endpoint+"/auth/Authenticate",configureEP=profile.endpoint+"/auth/ConfigureAuthentication",userkeySignatureEP=profile.endpoint+"/auth/AuthenticateUserKeySignatureCredential",firstAuthPL={request:{Database:profile.databaseName,Username:username,OperationMode:0,ClientInformation:clientInfo}};function postAuthenticate(payload,ep){return httpPost(ep||authEP,{credential:{...payload,ClientInformation:clientInfo}})}async function postConfigureAuthentication(payload){payload=await httpPost(configureEP,{config:{...payload,ClientInformation:clientInfo}});if(payload.ExceptionCode)throw payload;return payload}async function handleAuthResult(authResult,authRunData){authRunData.sessionId=authRunData.sessionId||authResult.SessionId;let newAuthResult;return authResult.$type.includes("PossibleAuthConfigurationRequirements")&&(newAuthResult=await async function(authResult,authRunData){let configRequirements=authResult.PossibleAuthenticationConfigurationRequirements;const selectedRequirement=JSON.stringify(authRunData.selectedRequirement||null);configRequirements.some(r=>JSON.stringify(r)===selectedRequirement)&&(configRequirements=[authRunData.selectedRequirement]);if(1<(configRequirements=function(requirements){const supportedConfigRequirements=["RsaSecurIdTokenConfigurationRequirement","SafeNetOneTimePasswordConfigurationRequirement","YubicoOneTimePasswordConfigurationRequirement","GoogleAuthConfigurationRequirement","PasswordHashAuthConfigurationRequirement"];return requirements.filter(r=>supportedConfigRequirements.some(scr=>r.$type.includes(scr)))}(configRequirements)).length)return{configurationRequirements:configRequirements,originalAuthenticationResult:authResult,userFields:[]};if(1===configRequirements.length){authRunData=await getHandledRequirement(configRequirements[0],authRunData,authResult);if(authRunData)return authRunData}0===configRequirements.length&&(configRequirements=authResult.PossibleAuthenticationConfigurationRequirements);handleUnsupportedAuthenticationType(configRequirements.map(c=>c.$type).join(", "),configRequirements.map(c=>c.Name).join(", "))}(authResult,authRunData)),authResult.$type.includes("PossibleAuthCredentialRequirements")&&(newAuthResult=await async function(authResult,authRunData){var credentialRequirements=authResult.PossibleAuthenticationCredentialRequirements;credentialRequirements.find(r=>r.$type.includes("Fido2CredentialRequirement"));var passwordHashRequirement=credentialRequirements.find(r=>r.$type.includes("PasswordHashCredentialRequirement"));if(passwordHashRequirement)return handleRequirement(authRunData,authResult,passwordHashRequirement,handlePasswordHashCredential,generalHandleRequirement);passwordHashRequirement=credentialRequirements.find(r=>r.$type.includes("GoogleAuthCredentialRequirement"));if(passwordHashRequirement)return handleRequirement(authRunData,authResult,passwordHashRequirement,generalHandleCredential("GoogleAuthCredential"),generalHandleRequirement);passwordHashRequirement=credentialRequirements.find(r=>r.$type.includes("SafeNetOneTimePasswordCredentialRequirement"));if(passwordHashRequirement)return handleRequirement(authRunData,authResult,passwordHashRequirement,generalHandleCredential("SafeNetOneTimePasswordCredential"),generalHandleRequirement);passwordHashRequirement=credentialRequirements.find(r=>r.$type.includes("YubicoOneTimePasswordCredentialRequirement"));if(passwordHashRequirement)return handleRequirement(authRunData,authResult,passwordHashRequirement,generalHandleCredential("YubicoOneTimePasswordCredential"),generalHandleRequirement);passwordHashRequirement=credentialRequirements.find(r=>r.$type.includes("RsaSecurIdTokenCredentialRequirement"));if(passwordHashRequirement)return handleRequirement(authRunData,authResult,passwordHashRequirement,generalHandleCredential("RsaSecurIdTokenCredential"),generalHandleRequirement);passwordHashRequirement=credentialRequirements.find(r=>r.$type.includes("AdPasswordCredentialRequirement"));if(passwordHashRequirement)return handleRequirement(authRunData,authResult,passwordHashRequirement,generalHandleCredential("AdPasswordCredential"),generalHandleRequirement);passwordHashRequirement=credentialRequirements.find(r=>r.$type.includes("RadiusTokenCredentialRequirement"));if(passwordHashRequirement)return handleRequirement(authRunData,authResult,passwordHashRequirement,generalHandleCredential("RadiusTokenCredential"),generalHandleRequirement);passwordHashRequirement=credentialRequirements.find(r=>r.$type.includes("LoginTokenCredentialRequirement"));if(passwordHashRequirement)return handleRequirement(authRunData,authResult,passwordHashRequirement,generalHandleCredential("LoginTokenCredential"),generalHandleRequirement);passwordHashRequirement=credentialRequirements.find(r=>r.$type.includes("OidcCredentialRequirement"));if(passwordHashRequirement)return handleRequirement(authRunData,authResult,passwordHashRequirement,handleOidcCredential,generalHandleRequirement);passwordHashRequirement=credentialRequirements.find(r=>r.$type.includes("EmailConfirmationCredentialRequirement"));if(passwordHashRequirement)return handleRequirement(authRunData,authResult,passwordHashRequirement,generalHandleCredential("EmailConfirmationCredential"),generalHandleRequirement);handleUnsupportedAuthenticationType(credentialRequirements.map(c=>c.$type).join(", "),credentialRequirements.map(c=>c.Name).join(", "))}(authResult,authRunData)),authResult.$type.includes("AuthenticationUserKeySignatureRequirement")&&(newAuthResult=await async function(authResult,authRunData){let userKey=atob(authResult.UserKey);authResult.hasOwnProperty("EncryptionVersion")&&(psrApi.encryptionManager.setEncryptionVersion(authResult.EncryptionVersion),authRunData.encryptionVersion=authResult.EncryptionVersion);var passwordHashCredentialRequirementType=Object.keys(authRunData.allUserFields).find(k=>k.includes("PasswordHashCredentialRequirement"));passwordHashCredentialRequirementType&&(userKey=await psrApi.encryptionManager.decrypt(authRunData.allUserFields[passwordHashCredentialRequirementType].find(f=>"password"===f.key).value,userKey));authRunData.userKey=userKey;passwordHashCredentialRequirementType=btoa(await psrApi.encryptionManager.signData(atob(authResult.Challenge),userKey)),passwordHashCredentialRequirementType={UserKeyChallengeSignature:passwordHashCredentialRequirementType,Challenge:authResult.Challenge,ChallengeSignature:authResult.ChallengeSignature,SessionId:authResult.SessionId},applyAuthRunData(passwordHashCredentialRequirementType,authRunData),passwordHashCredentialRequirementType=await postAuthenticate(passwordHashCredentialRequirementType,userkeySignatureEP),passwordHashCredentialRequirementType=await handleAuthResult(passwordHashCredentialRequirementType,authRunData);return{...passwordHashCredentialRequirementType,userId:authResult.UserId}}(authResult,authRunData)),authResult.$type.includes("AuthenticationResultCompleted")&&(newAuthResult=await async function(authResult,authRunData){var roleKeys=await Promise.all(Object.keys(authResult.EncryptedRoleRightKey).filter(roleId=>"$type"!==roleId).map(async roleId=>{return{id:roleId,privateKey:await psrApi.encryptionManager.decrypt(authRunData.userKey,atob(authResult.EncryptedRoleRightKey[roleId]))}}));let encryptionVersion=authRunData?.encryptionVersion;encryptionVersion=encryptionVersion||0;var authToken={Database:authRunData.database,SessionId:authResult.SessionId,SessionKey:authResult.SessionKey,EncryptionVersion:encryptionVersion};await psrApi.authenticationManagerV2.setSession(authToken,[{id:authResult.UserId,privateKey:authRunData.userKey},...roleKeys]);let databaseId=null;try{var optionDatabaseId=await psrApi.optionManager.getOption("DatabaseId");optionDatabaseId&&(databaseId=optionDatabaseId.ValueString)}catch(err){}return{psrApi:psrApi,originalAuthenticationResult:authResult,databaseId:databaseId}}(authResult,authRunData)),authResult.$type.includes("AuthenticationResultLoginFailed")&&(newAuthResult=await{loginLock:authResult.LoginLock,originalAuthenticationResult:null}),authRunData.originalAuthenticationResult=JSON.parse(JSON.stringify(newAuthResult.originalAuthenticationResult||authRunData.originalAuthenticationResult||null)),newAuthResult||handleUnsupportedAuthenticationType(authResult.$type,"Unknown"),newAuthResult}async function handlePasswordHashCredential(requirement,authRunData){var salt=requirement.PasswordSalt;let hashAlgorithm=requirement.HashAlgorithm;hashAlgorithm=hashAlgorithm||0;requirement={$type:"PsrAuthenticationObjectLib.Authentication.AuthData.PasswordHashCredential, PsrAuthenticationObjectLib",PasswordHash:(await psrApi.encryptionManager.mtoPbkdf2(authRunData.allUserFields[requirement.$type].find(f=>"password"===f.key).value,salt,hashAlgorithm)).Hash};return applyAuthRunData(requirement,authRunData),postAuthenticate(requirement)}async function handleChangePasswordCredential(requirement,authRunData){var newPassword=authRunData.allUserFields[requirement.$type].find(f=>"new-password"===f.key).value;let hashAlgorithm=requirement.ClientHashAlgorithm,encryptionChain=(hashAlgorithm=hashAlgorithm||0,requirement.EncryptionChain);encryptionChain||(requirement=psrApi.encryptionManager.getEncryptionVersion(),encryptionChain=0===requirement?1:3);requirement=await psrApi.encryptionManager.mtoPbkdf2(newPassword,null,hashAlgorithm),newPassword={$type:"PsrAuthenticationObjectLib.Authentication.AuthConfiguration.PasswordHashAuthConfiguration, PsrAuthenticationObjectLib",UserKey:btoa(await psrApi.encryptionManager.encrypt(encryptionChain,newPassword,authRunData.userKey)),PasswordHash:requirement.Hash,PasswordSalt:requirement.Salt,ClientHashAlgorithm:requirement.HashAlgorithm};return applyAuthRunData(newPassword,authRunData),postConfigureAuthentication(newPassword)}function generalHandleRequirement(requirement){const authFields=requirement.RequiredFieldsFromUser.AuthenticationFields;return{userFields:(object=authFields,Object.keys(object).filter(k=>"$type"!==k).map(key=>function(key,authField,requirement){return{key:key,name:key,type:authField.Type,value:authField.Value||"",requirement:requirement}}(key,authFields[key],requirement))),userFieldType:requirement.$type,originalAuthenticationResult:null};var object}function generalHandleCredential(type){return function(_,authRunData){var authCredential={$type:"PsrAuthenticationObjectLib.Authentication.AuthData."+type+", PsrAuthenticationObjectLib"};return applyUserFields(authCredential,authRunData),applyAuthRunData(authCredential,authRunData),postAuthenticate(authCredential)}}function handleOidcCredential(authRequirement,authRunData){return new Promise((resolve,reject)=>{const authCredential={$type:"PsrAuthenticationObjectLib.Authentication.AuthData.OidcCredential, PsrAuthenticationObjectLib"};var loginUrl=authRequirement.LoginUrl.replace("%7BbrowserExtensionRedirectUrl%7D",encodeURIComponent(browser.identity.getRedirectURL()));browser.identity.launchWebAuthFlow({url:loginUrl,interactive:!0},function(redirect_url){if(!redirect_url)return reject();redirect_url=redirect_url.split("#")[1];authCredential.AuthorizationCode="#"+redirect_url,applyAuthRunData(authCredential,authRunData),resolve(postAuthenticate(authCredential))})})}function generalHandleConfiguration(type){return function(_,authRunData){var authConfiguration={$type:"PsrAuthenticationObjectLib.Authentication.AuthConfiguration."+type+", PsrAuthenticationObjectLib"};return applyUserFields(authConfiguration,authRunData),applyAuthRunData(authConfiguration,authRunData),postConfigureAuthentication(authConfiguration)}}function applyAuthRunData(credential,authRunData){credential.Database=authRunData.database,credential.Username=authRunData.username,credential.SessionId=authRunData.sessionId,credential.OperationMode=authRunData.operationMode}function applyUserFields(credential,authRunData){var authFields={};for(const field of authRunData.userFields)authFields[field.key]={Type:field.type,Value:field.value};credential.RequiredFieldsFromUser={AuthenticationFields:authFields}}async function handleRequirement(authRunData,authResult,requirement,credentialHandler,requirementHandler){if(JSON.stringify(authRunData.originalAuthenticationResult)===JSON.stringify(authResult))return handleAuthResult(await credentialHandler(requirement,authRunData),authRunData);{const result=await requirementHandler(requirement);return{...result,originalAuthenticationResult:authResult}}}async function handleGoogleAuthConfiguration(requirement,authRunData){requirement={$type:"PsrAuthenticationObjectLib.Authentication.AuthConfiguration.GoogleAuthConfiguration, PsrAuthenticationObjectLib",Secret:requirement.Secret,UserIdentity:requirement.UserIdentity};return applyAuthRunData(requirement,authRunData),applyUserFields(requirement,authRunData),postConfigureAuthentication(requirement)}async function getHandledRequirement(configRequirement,authRunData,authResult){configRequirement.$type.includes("Fido2ConfigurationRequirement");var rsaRequirement=configRequirement.$type.includes("RsaSecurIdTokenConfigurationRequirement")?configRequirement:null;return rsaRequirement?handleRequirement(authRunData,authResult,rsaRequirement,generalHandleConfiguration("RsaSecurIdTokenConfiguration"),generalHandleRequirement):(rsaRequirement=configRequirement.$type.includes("SafeNetOneTimePasswordConfigurationRequirement")?configRequirement:null)?handleRequirement(authRunData,authResult,rsaRequirement,generalHandleConfiguration("SafeNetOneTimePasswordConfiguration"),generalHandleRequirement):(rsaRequirement=configRequirement.$type.includes("YubicoOneTimePasswordConfigurationRequirement")?configRequirement:null)?handleRequirement(authRunData,authResult,rsaRequirement,generalHandleConfiguration("YubicoOneTimePasswordConfiguration"),generalHandleRequirement):(rsaRequirement=configRequirement.$type.includes("GoogleAuthConfigurationRequirement")?configRequirement:null)?handleRequirement(authRunData,authResult,rsaRequirement,handleGoogleAuthConfiguration,generalHandleRequirement):(rsaRequirement=configRequirement.$type.includes("PasswordHashAuthConfigurationRequirement")?configRequirement:null)?((configRequirement=await handleRequirement(authRunData,authResult,rsaRequirement,handleChangePasswordCredential,generalHandleRequirement)).userFields=[...configRequirement.userFields||[],{key:"new-password",name:"Password",type:0,value:"",requirement:rsaRequirement}],configRequirement):void 0}function handleUnsupportedAuthenticationType(requirementName,humanReadableName){throw{requirementName:requirementName,humanReadableName:humanReadableName}}_self.getFirstAuthentication=async function(){try{return await httpPost(firstAuthEP,firstAuthPL)}catch(error){throw console.error(error),error}},_self.authenticate=async function(authenticationResult,authRunData){return{authResult:await handleAuthResult(authenticationResult,authRunData),authRunData:authRunData}},_self.getHandledRequirement=async function(configRequirement,authRunData,authResult){return getHandledRequirement(configRequirement,authRunData,authResult)},_self.supportsAuthFlow=async function(){var result;return void 0===supportsAuthFlowCache&&(result=await fetch(firstAuthEP,{headers:{"Content-Type":"application/json"},method:"POST"}),supportsAuthFlowCache=500===result.status),supportsAuthFlowCache},_self.validateUserPassword=function(policy,password){return psrApi.passwordManager.validatePassword(policy,password,[_self.username])},httpPost=async function(endpoint,data){let response;try{response=await fetch(endpoint,{headers:{"Content-Type":"application/json"},method:"POST",body:JSON.stringify(data)})}catch(error){throw error.isFetchError=!0,error}var error,endpoint=await response.json();if(response.ok)return endpoint;throw error=new Error(endpoint.Message||"Request failed"),Object.assign(error,endpoint),error}}