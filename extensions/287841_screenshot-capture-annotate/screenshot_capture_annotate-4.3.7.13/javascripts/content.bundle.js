(()=>{var t={873:t=>{var e={en_GB:"en-gb",en_US:"en",zh_CN:"zh-cn",zh_TW:"zh-tw"};t.exports=function(t,n,i){var o=n.prototype.locale;n.prototype.locale=function(t){var n;return"string"==typeof t&&(t=e[n=t]||n.split("_")[0]),o.call(this,t)}}},7484:function(t){t.exports=function(){"use strict";var t="millisecond",e="second",n="minute",i="hour",o="day",r="week",s="month",a="quarter",c="year",l="date",d=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,h=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,u={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")},f=function(t,e,n){var i=String(t);return!i||i.length>=e?t:""+Array(e+1-i.length).join(n)+t},p={s:f,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),i=Math.floor(n/60),o=n%60;return(e<=0?"+":"-")+f(i,2,"0")+":"+f(o,2,"0")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var i=12*(n.year()-e.year())+(n.month()-e.month()),o=e.clone().add(i,s),r=n-o<0,a=e.clone().add(i+(r?-1:1),s);return+(-(i+(n-o)/(r?o-a:a-o))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(d){return{M:s,y:c,w:r,d:o,D:l,h:i,m:n,s:e,ms:t,Q:a}[d]||String(d||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},m="en",g={};g[m]=u;var w=function(t){return t instanceof x},y=function(t,e,n){var i;if(!t)return m;if("string"==typeof t)g[t]&&(i=t),e&&(g[t]=e,i=t);else{var o=t.name;g[o]=t,i=o}return!n&&i&&(m=i),i||!n&&m},v=function(t,e){if(w(t))return t.clone();var n="object"==typeof e?e:{};return n.date=t,n.args=arguments,new x(n)},b=p;b.l=y,b.i=w,b.w=function(t,e){return v(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var x=function(){function u(t){this.$L=y(t.locale,null,!0),this.parse(t)}var f=u.prototype;return f.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(b.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var i=e.match(d);if(i){var o=i[2]-1||0,r=(i[7]||"0").substring(0,3);return n?new Date(Date.UTC(i[1],o,i[3]||1,i[4]||0,i[5]||0,i[6]||0,r)):new Date(i[1],o,i[3]||1,i[4]||0,i[5]||0,i[6]||0,r)}}return new Date(e)}(t),this.$x=t.x||{},this.init()},f.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},f.$utils=function(){return b},f.isValid=function(){return!("Invalid Date"===this.$d.toString())},f.isSame=function(t,e){var n=v(t);return this.startOf(e)<=n&&n<=this.endOf(e)},f.isAfter=function(t,e){return v(t)<this.startOf(e)},f.isBefore=function(t,e){return this.endOf(e)<v(t)},f.$g=function(t,e,n){return b.u(t)?this[e]:this.set(n,t)},f.unix=function(){return Math.floor(this.valueOf()/1e3)},f.valueOf=function(){return this.$d.getTime()},f.startOf=function(t,a){var d=this,h=!!b.u(a)||a,u=b.p(t),f=function(t,e){var n=b.w(d.$u?Date.UTC(d.$y,e,t):new Date(d.$y,e,t),d);return h?n:n.endOf(o)},p=function(t,e){return b.w(d.toDate()[t].apply(d.toDate("s"),(h?[0,0,0,0]:[23,59,59,999]).slice(e)),d)},m=this.$W,g=this.$M,w=this.$D,y="set"+(this.$u?"UTC":"");switch(u){case c:return h?f(1,0):f(31,11);case s:return h?f(1,g):f(0,g+1);case r:var v=this.$locale().weekStart||0,x=(m<v?m+7:m)-v;return f(h?w-x:w+(6-x),g);case o:case l:return p(y+"Hours",0);case i:return p(y+"Minutes",1);case n:return p(y+"Seconds",2);case e:return p(y+"Milliseconds",3);default:return this.clone()}},f.endOf=function(t){return this.startOf(t,!1)},f.$set=function(r,a){var d,h=b.p(r),u="set"+(this.$u?"UTC":""),f=(d={},d[o]=u+"Date",d[l]=u+"Date",d[s]=u+"Month",d[c]=u+"FullYear",d[i]=u+"Hours",d[n]=u+"Minutes",d[e]=u+"Seconds",d[t]=u+"Milliseconds",d)[h],p=h===o?this.$D+(a-this.$W):a;if(h===s||h===c){var m=this.clone().set(l,1);m.$d[f](p),m.init(),this.$d=m.set(l,Math.min(this.$D,m.daysInMonth())).$d}else f&&this.$d[f](p);return this.init(),this},f.set=function(t,e){return this.clone().$set(t,e)},f.get=function(t){return this[b.p(t)]()},f.add=function(t,a){var l,d=this;t=Number(t);var h=b.p(a),u=function(e){var n=v(d);return b.w(n.date(n.date()+Math.round(e*t)),d)};if(h===s)return this.set(s,this.$M+t);if(h===c)return this.set(c,this.$y+t);if(h===o)return u(1);if(h===r)return u(7);var f=(l={},l[n]=6e4,l[i]=36e5,l[e]=1e3,l)[h]||1,p=this.$d.getTime()+t*f;return b.w(p,this)},f.subtract=function(t,e){return this.add(-1*t,e)},f.format=function(t){var e=this;if(!this.isValid())return"Invalid Date";var n=t||"YYYY-MM-DDTHH:mm:ssZ",i=b.z(this),o=this.$locale(),r=this.$H,s=this.$m,a=this.$M,c=o.weekdays,l=o.months,d=function(t,i,o,r){return t&&(t[i]||t(e,n))||o[i].substr(0,r)},u=function(t){return b.s(r%12||12,t,"0")},f=o.meridiem||function(t,e,n){var i=t<12?"AM":"PM";return n?i.toLowerCase():i},p={YY:String(this.$y).slice(-2),YYYY:this.$y,M:a+1,MM:b.s(a+1,2,"0"),MMM:d(o.monthsShort,a,l,3),MMMM:d(l,a),D:this.$D,DD:b.s(this.$D,2,"0"),d:String(this.$W),dd:d(o.weekdaysMin,this.$W,c,2),ddd:d(o.weekdaysShort,this.$W,c,3),dddd:c[this.$W],H:String(r),HH:b.s(r,2,"0"),h:u(1),hh:u(2),a:f(r,s,!0),A:f(r,s,!1),m:String(s),mm:b.s(s,2,"0"),s:String(this.$s),ss:b.s(this.$s,2,"0"),SSS:b.s(this.$ms,3,"0"),Z:i};return n.replace(h,(function(t,e){return e||p[t]||i.replace(":","")}))},f.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},f.diff=function(t,l,d){var h,u=b.p(l),f=v(t),p=6e4*(f.utcOffset()-this.utcOffset()),m=this-f,g=b.m(this,f);return g=(h={},h[c]=g/12,h[s]=g,h[a]=g/3,h[r]=(m-p)/6048e5,h[o]=(m-p)/864e5,h[i]=m/36e5,h[n]=m/6e4,h[e]=m/1e3,h)[u]||m,d?g:b.a(g)},f.daysInMonth=function(){return this.endOf(s).$D},f.$locale=function(){return g[this.$L]},f.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),i=y(t,e,!0);return i&&(n.$L=i),n},f.clone=function(){return b.w(this.$d,this)},f.toDate=function(){return new Date(this.valueOf())},f.toJSON=function(){return this.isValid()?this.toISOString():null},f.toISOString=function(){return this.$d.toISOString()},f.toString=function(){return this.$d.toUTCString()},u}(),S=x.prototype;return v.prototype=S,[["$ms",t],["$s",e],["$m",n],["$H",i],["$W",o],["$M",s],["$y",c],["$D",l]].forEach((function(t){S[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),v.extend=function(t,e){return t.$i||(t(e,x,v),t.$i=!0),v},v.locale=y,v.isDayjs=w,v.unix=function(t){return v(1e3*t)},v.en=g[m],v.Ls=g,v.p={},v}()},8734:function(t){t.exports=function(){"use strict";return function(t,e,n){var i=e.prototype,o=i.format;n.en.ordinal=function(t){var e=["th","st","nd","rd"],n=t%100;return"["+t+(e[(n-20)%10]||e[n]||e[0])+"]"},i.format=function(t){var e=this,n=this.$locale(),i=this.$utils(),r=(t||"YYYY-MM-DDTHH:mm:ssZ").replace(/\[([^\]]+)]|Q|wo|ww|w|WW|W|zzz|z|gggg|GGGG|Do|X|x|k{1,2}|S/g,(function(t){switch(t){case"Q":return Math.ceil((e.$M+1)/3);case"Do":return n.ordinal(e.$D);case"gggg":return e.weekYear();case"GGGG":return e.isoWeekYear();case"wo":return n.ordinal(e.week(),"W");case"w":case"ww":return i.s(e.week(),"w"===t?1:2,"0");case"W":case"WW":return i.s(e.isoWeek(),"W"===t?1:2,"0");case"k":case"kk":return i.s(String(0===e.$H?24:e.$H),"k"===t?1:2,"0");case"X":return Math.floor(e.$d.getTime()/1e3);case"x":return e.$d.getTime();case"z":return"["+e.offsetName()+"]";case"zzz":return"["+e.offsetName("long")+"]";default:return t}}));return o.bind(this)(r)}}}()},285:function(t){t.exports=function(){"use strict";var t={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},e=function(e,n){return e.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g,(function(e,i,o){var r=o&&o.toUpperCase();return i||n[o]||t[o]||n[r].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,(function(t,e,n){return e||n.slice(1)}))}))},n=/(\[[^[]*\])|([-:/.()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,i=/\d\d/,o=/\d\d?/,r=/\d*[^\s\d-_:/()]+/,s={},a=function(t){return function(e){this[t]=+e}},c=[/[+-]\d\d:?(\d\d)?/,function(t){(this.zone||(this.zone={})).offset=function(t){if(!t)return 0;var e=t.match(/([+-]|\d\d)/g),n=60*e[1]+(+e[2]||0);return 0===n?0:"+"===e[0]?-n:n}(t)}],l=function(t){var e=s[t];return e&&(e.indexOf?e:e.s.concat(e.f))},d=function(t,e){var n,i=s.meridiem;if(i){for(var o=1;o<=24;o+=1)if(t.indexOf(i(o,0,e))>-1){n=o>12;break}}else n=t===(e?"pm":"PM");return n},h={A:[r,function(t){this.afternoon=d(t,!1)}],a:[r,function(t){this.afternoon=d(t,!0)}],S:[/\d/,function(t){this.milliseconds=100*+t}],SS:[i,function(t){this.milliseconds=10*+t}],SSS:[/\d{3}/,function(t){this.milliseconds=+t}],s:[o,a("seconds")],ss:[o,a("seconds")],m:[o,a("minutes")],mm:[o,a("minutes")],H:[o,a("hours")],h:[o,a("hours")],HH:[o,a("hours")],hh:[o,a("hours")],D:[o,a("day")],DD:[i,a("day")],Do:[r,function(t){var e=s.ordinal,n=t.match(/\d+/);if(this.day=n[0],e)for(var i=1;i<=31;i+=1)e(i).replace(/\[|\]/g,"")===t&&(this.day=i)}],M:[o,a("month")],MM:[i,a("month")],MMM:[r,function(t){var e=l("months"),n=(l("monthsShort")||e.map((function(t){return t.substr(0,3)}))).indexOf(t)+1;if(n<1)throw new Error;this.month=n%12||n}],MMMM:[r,function(t){var e=l("months").indexOf(t)+1;if(e<1)throw new Error;this.month=e%12||e}],Y:[/[+-]?\d+/,a("year")],YY:[i,function(t){t=+t,this.year=t+(t>68?1900:2e3)}],YYYY:[/\d{4}/,a("year")],Z:c,ZZ:c},u=function(t,i,o){try{var r=function(t){for(var i=(t=e(t,s&&s.formats)).match(n),o=i.length,r=0;r<o;r+=1){var a=i[r],c=h[a],l=c&&c[0],d=c&&c[1];i[r]=d?{regex:l,parser:d}:a.replace(/^\[|\]$/g,"")}return function(t){for(var e={},n=0,r=0;n<o;n+=1){var s=i[n];if("string"==typeof s)r+=s.length;else{var a=s.regex,c=s.parser,l=t.substr(r),d=a.exec(l)[0];c.call(e,d),t=t.replace(d,"")}}return function(t){var e=t.afternoon;if(void 0!==e){var n=t.hours;e?n<12&&(t.hours+=12):12===n&&(t.hours=0),delete t.afternoon}}(e),e}}(i)(t),a=r.year,c=r.month,l=r.day,d=r.hours,u=r.minutes,f=r.seconds,p=r.milliseconds,m=r.zone,g=new Date,w=l||(a||c?1:g.getDate()),y=a||g.getFullYear(),v=0;a&&!c||(v=c>0?c-1:g.getMonth());var b=d||0,x=u||0,S=f||0,_=p||0;return m?new Date(Date.UTC(y,v,w,b,x,S,_+60*m.offset*1e3)):o?new Date(Date.UTC(y,v,w,b,x,S,_)):new Date(y,v,w,b,x,S,_)}catch(t){return new Date("")}};return function(t,e,n){n.p.customParseFormat=!0;var i=e.prototype,o=i.parse;i.parse=function(t){var e=t.date,i=t.utc,r=t.args;this.$u=i;var a=r[1];if("string"==typeof a){var c=!0===r[2],l=!0===r[3],d=c||l,h=r[2];l&&(h=r[2]),s=this.$locale(),!c&&h&&(s=n.Ls[h]),this.$d=u(e,a,i),this.init(),h&&!0!==h&&(this.$L=this.locale(h).$L),d&&e!==this.format(a)&&(this.$d=new Date("")),s={}}else if(a instanceof Array)for(var f=a.length,p=1;p<=f;p+=1){r[1]=a[p-1];var m=n.apply(this,r);if(m.isValid()){this.$d=m.$d,this.$L=m.$L,this.init();break}p===f&&(this.$d=new Date(""))}else o.call(this,t)}}}()},1646:function(t){t.exports=function(){"use strict";var t,e,n=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,i=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/,o={years:31536e6,months:2592e6,days:864e5,hours:36e5,minutes:6e4,seconds:1e3,milliseconds:1,weeks:6048e5},r=function(t){return t instanceof h},s=function(t,e,n){return new h(t,n,e.$l)},a=function(t){return e.p(t)+"s"},c=function(t){return t<0},l=function(t){return c(t)?Math.ceil(t):Math.floor(t)},d=function(t,e){return t?c(t)?{negative:!0,format:""+function(t){return Math.abs(t)}(t)+e}:{negative:!1,format:""+t+e}:{negative:!1,format:""}},h=function(){function c(t,e,n){var r=this;if(this.$d={},this.$l=n,e)return s(t*o[a(e)],this);if("number"==typeof t)return this.$ms=t,this.parseFromMilliseconds(),this;if("object"==typeof t)return Object.keys(t).forEach((function(e){r.$d[a(e)]=t[e]})),this.calMilliseconds(),this;if("string"==typeof t){var c=t.match(i);if(c)return this.$d.years=c[2],this.$d.months=c[3],this.$d.weeks=c[4],this.$d.days=c[5],this.$d.hours=c[6],this.$d.minutes=c[7],this.$d.seconds=c[8],this.calMilliseconds(),this}return this}var h=c.prototype;return h.calMilliseconds=function(){var t=this;this.$ms=Object.keys(this.$d).reduce((function(e,n){return e+(t.$d[n]||0)*o[n]}),0)},h.parseFromMilliseconds=function(){var t=this.$ms;this.$d.years=l(t/31536e6),t%=31536e6,this.$d.months=l(t/2592e6),t%=2592e6,this.$d.days=l(t/864e5),t%=864e5,this.$d.hours=l(t/36e5),t%=36e5,this.$d.minutes=l(t/6e4),t%=6e4,this.$d.seconds=l(t/1e3),t%=1e3,this.$d.milliseconds=t},h.toISOString=function(){var t=d(this.$d.years,"Y"),e=d(this.$d.months,"M"),n=+this.$d.days||0;this.$d.weeks&&(n+=7*this.$d.weeks);var i=d(n,"D"),o=d(this.$d.hours,"H"),r=d(this.$d.minutes,"M"),s=this.$d.seconds||0;this.$d.milliseconds&&(s+=this.$d.milliseconds/1e3);var a=d(s,"S"),c=t.negative||e.negative||i.negative||o.negative||r.negative||a.negative,l=o.format||r.format||a.format?"T":"",h=(c?"-":"")+"P"+t.format+e.format+i.format+l+o.format+r.format+a.format;return"P"===h||"-P"===h?"P0D":h},h.toJSON=function(){return this.toISOString()},h.format=function(t){var i=t||"YYYY-MM-DDTHH:mm:ss",o={Y:this.$d.years,YY:e.s(this.$d.years,2,"0"),YYYY:e.s(this.$d.years,4,"0"),M:this.$d.months,MM:e.s(this.$d.months,2,"0"),D:this.$d.days,DD:e.s(this.$d.days,2,"0"),H:this.$d.hours,HH:e.s(this.$d.hours,2,"0"),m:this.$d.minutes,mm:e.s(this.$d.minutes,2,"0"),s:this.$d.seconds,ss:e.s(this.$d.seconds,2,"0"),SSS:e.s(this.$d.milliseconds,3,"0")};return i.replace(n,(function(t,e){return e||String(o[t])}))},h.as=function(t){return this.$ms/o[a(t)]},h.get=function(t){var e=this.$ms,n=a(t);return"milliseconds"===n?e%=1e3:e="weeks"===n?l(e/o[n]):this.$d[n],0===e?0:e},h.add=function(t,e,n){var i;return i=e?t*o[a(e)]:r(t)?t.$ms:s(t,this).$ms,s(this.$ms+i*(n?-1:1),this)},h.subtract=function(t,e){return this.add(t,e,!0)},h.locale=function(t){var e=this.clone();return e.$l=t,e},h.clone=function(){return s(this.$ms,this)},h.humanize=function(e){return t().add(this.$ms,"ms").locale(this.$l).fromNow(!e)},h.milliseconds=function(){return this.get("milliseconds")},h.asMilliseconds=function(){return this.as("milliseconds")},h.seconds=function(){return this.get("seconds")},h.asSeconds=function(){return this.as("seconds")},h.minutes=function(){return this.get("minutes")},h.asMinutes=function(){return this.as("minutes")},h.hours=function(){return this.get("hours")},h.asHours=function(){return this.as("hours")},h.days=function(){return this.get("days")},h.asDays=function(){return this.as("days")},h.weeks=function(){return this.get("weeks")},h.asWeeks=function(){return this.as("weeks")},h.months=function(){return this.get("months")},h.asMonths=function(){return this.as("months")},h.years=function(){return this.get("years")},h.asYears=function(){return this.as("years")},c}();return function(n,i,o){t=o,e=o().$utils(),o.duration=function(t,e){var n=o.locale();return s(t,{$l:n},e)},o.isDuration=r;var a=i.prototype.add,c=i.prototype.subtract;i.prototype.add=function(t,e){return r(t)&&(t=t.asMilliseconds()),a.bind(this)(t,e)},i.prototype.subtract=function(t,e){return r(t)&&(t=t.asMilliseconds()),c.bind(this)(t,e)}}}()},4425:function(t){t.exports=function(){"use strict";return function(t,e,n){n.isMoment=function(t){return n.isDayjs(t)}}}()},9212:function(t){t.exports=function(){"use strict";return function(t,e){e.prototype.isSameOrAfter=function(t,e){return this.isSame(t,e)||this.isAfter(t,e)}}}()},7412:function(t){t.exports=function(){"use strict";return function(t,e){e.prototype.isSameOrBefore=function(t,e){return this.isSame(t,e)||this.isBefore(t,e)}}}()},6036:function(t){t.exports=function(){"use strict";return function(t,e,n){var i=function(t){return t&&(t.indexOf?t:t.s)},o=function(t,e,n,o,r){var s=t.name?t:t.$locale(),a=i(s[e]),c=i(s[n]),l=a||c.map((function(t){return t.substr(0,o)}));if(!r)return l;var d=s.weekStart;return l.map((function(t,e){return l[(e+(d||0))%7]}))},r=function(){return n.Ls[n.locale()]},s=function(t,e){return t.formats[e]||function(t){return t.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,(function(t,e,n){return e||n.slice(1)}))}(t.formats[e.toUpperCase()])};e.prototype.localeData=function(){return function(){var t=this;return{months:function(e){return e?e.format("MMMM"):o(t,"months")},monthsShort:function(e){return e?e.format("MMM"):o(t,"monthsShort","months",3)},firstDayOfWeek:function(){return t.$locale().weekStart||0},weekdays:function(e){return e?e.format("dddd"):o(t,"weekdays")},weekdaysMin:function(e){return e?e.format("dd"):o(t,"weekdaysMin","weekdays",2)},weekdaysShort:function(e){return e?e.format("ddd"):o(t,"weekdaysShort","weekdays",3)},longDateFormat:function(e){return s(t.$locale(),e)},meridiem:this.$locale().meridiem,ordinal:this.$locale().ordinal}}.bind(this)()},n.localeData=function(){var t=r();return{firstDayOfWeek:function(){return t.weekStart||0},weekdays:function(){return n.weekdays()},weekdaysShort:function(){return n.weekdaysShort()},weekdaysMin:function(){return n.weekdaysMin()},months:function(){return n.months()},monthsShort:function(){return n.monthsShort()},longDateFormat:function(e){return s(t,e)},meridiem:t.meridiem,ordinal:t.ordinal}},n.months=function(){return o(r(),"months")},n.monthsShort=function(){return o(r(),"monthsShort","months",3)},n.weekdays=function(t){return o(r(),"weekdays",null,null,t)},n.weekdaysShort=function(t){return o(r(),"weekdaysShort","weekdays",3,t)},n.weekdaysMin=function(t){return o(r(),"weekdaysMin","weekdays",2,t)}}}()},6176:function(t){t.exports=function(){"use strict";var t={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"};return function(e,n,i){var o=n.prototype,r=o.format;i.en.formats=t,o.format=function(e){void 0===e&&(e="YYYY-MM-DDTHH:mm:ssZ");var n=this.$locale().formats,i=function(e,n){return e.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g,(function(e,i,o){var r=o&&o.toUpperCase();return i||n[o]||t[o]||n[r].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,(function(t,e,n){return e||n.slice(1)}))}))}(e,void 0===n?{}:n);return r.call(this,i)}}}()},178:function(t){t.exports=function(){"use strict";return function(t,e,n){var i=e.prototype;n.utc=function(t){return new e({date:t,utc:!0,args:arguments})},i.utc=function(t){var e=n(this.toDate(),{locale:this.$L,utc:!0});return t?e.add(this.utcOffset(),"minute"):e},i.local=function(){return n(this.toDate(),{locale:this.$L,utc:!1})};var o=i.parse;i.parse=function(t){t.utc&&(this.$u=!0),this.$utils().u(t.$offset)||(this.$offset=t.$offset),o.call(this,t)};var r=i.init;i.init=function(){if(this.$u){var t=this.$d;this.$y=t.getUTCFullYear(),this.$M=t.getUTCMonth(),this.$D=t.getUTCDate(),this.$W=t.getUTCDay(),this.$H=t.getUTCHours(),this.$m=t.getUTCMinutes(),this.$s=t.getUTCSeconds(),this.$ms=t.getUTCMilliseconds()}else r.call(this)};var s=i.utcOffset;i.utcOffset=function(t,e){var n=this.$utils().u;if(n(t))return this.$u?0:n(this.$offset)?s.call(this):this.$offset;var i=Math.abs(t)<=16?60*t:t,o=this;if(e)return o.$offset=i,o.$u=0===t,o;if(0!==t){var r=this.$u?this.toDate().getTimezoneOffset():-1*this.utcOffset();(o=this.local().add(i+r,"minute")).$offset=i,o.$x.$localOffset=r}else o=this.utc();return o};var a=i.format;i.format=function(t){var e=t||(this.$u?"YYYY-MM-DDTHH:mm:ss[Z]":"");return a.call(this,e)},i.valueOf=function(){var t=this.$utils().u(this.$offset)?0:this.$offset+(this.$x.$localOffset||(new Date).getTimezoneOffset());return this.$d.valueOf()-6e4*t},i.isUTC=function(){return!!this.$u},i.toISOString=function(){return this.toDate().toISOString()},i.toString=function(){return this.toDate().toUTCString()};var c=i.toDate;i.toDate=function(t){return"s"===t&&this.$offset?n(this.format("YYYY-MM-DD HH:mm:ss:SSS")).toDate():c.call(this)};var l=i.diff;i.diff=function(t,e,i){if(t&&this.$u===t.$u)return l.call(this,t,e,i);var o=this.local(),r=n(t).local();return l.call(o,r,e,i)}}}()},5183:function(t){t.exports=function(){"use strict";var t="week",e="year";return function(n,i,o){var r=i.prototype;r.week=function(n){if(void 0===n&&(n=null),null!==n)return this.add(7*(n-this.week()),"day");var i=this.$locale().yearStart||1;if(11===this.month()&&this.date()>25){var r=o(this).startOf(e).add(1,e).date(i),s=o(this).endOf(t);if(r.isBefore(s))return 1}var a=o(this).startOf(e).date(i).startOf(t).subtract(1,"millisecond"),c=this.diff(a,t,!0);return c<0?o(this).startOf("week").week():Math.ceil(c)},r.weeks=function(t){return void 0===t&&(t=null),this.week(t)}}}()},172:function(t){t.exports=function(){"use strict";return function(t,e){e.prototype.weekYear=function(){var t=this.month(),e=this.week(),n=this.year();return 1===e&&11===t?n+1:0===t&&e>=52?n-1:n}}}()},6833:function(t){t.exports=function(){"use strict";return function(t,e){e.prototype.weekday=function(t){var e=this.$locale().weekStart||0,n=this.$W,i=(n<e?n+7:n)-e;return this.$utils().u(t)?i:this.subtract(i,"day").add(t,"day")}}}()}},e={};function n(i){var o=e[i];if(void 0!==o)return o.exports;var r=e[i]={exports:{}};return t[i].call(r.exports,r,r.exports,n),r.exports}(()=>{var t=n(7484),e=n(7412),i=n(9212),o=n(8734),r=n(285),s=n(6833),a=n(172),c=n(5183),l=n(4425),d=n(6036),h=n(6176),u=n(178),f=n(1646);t.extend(e),t.extend(i),t.extend(o),t.extend(r),t.extend(s),t.extend(a),t.extend(c),t.extend(l),t.extend(d),t.extend(h),t.extend(u),t.extend(f);var p=n(873);t.extend(p)})(),(()=>{"use strict";function t(t){document.getElementById(t)&&document.getElementById(t).remove()}function e(t,e){this.type=t,this.data=e,this.exec()}function n(t){return!!t&&new Set(["iframe","frame"]).has(t.tagName.toLowerCase())}function i(t,e){for(var i="boolean"==typeof e?e:n(t),o=(u=t.getBoundingClientRect()).width,r=u.height,c=0,l=0,d=t;d;){c+=isNaN(d.offsetLeft)?0:d.offsetLeft,d===document.body&&d.offsetHeight>0?l+=d.getBoundingClientRect().top+window.scrollY:l+=isNaN(d.offsetTop)?0:d.offsetTop;var h=s(d);h&&(c+=h.m41,l+=h.m42),d=d.offsetParent}if(i){var u=t.getBoundingClientRect();l=Math.min(u.top,l)}var f,p,m={left:c,top:l,width:o,height:r};if(i){var g=(f=t,{left:a(p=window.getComputedStyle(f),["borderLeftWidth","paddingLeft"]),right:a(p,["borderRightWidth","paddingRight"]),top:a(p,["paddingTop","borderTopWidth"]),bottom:a(p,["paddingBottom","borderBottomWidth"])});m.box=g,m.left+=g.left,m.top+=g.top,m.width-=g.left+g.right,m.height-=g.top+g.bottom}return m}e.prototype={constructor:e,exec:function(){try{"changeCssText"===this.type?(this.cssTextBefore=this.data.element.style.cssText,this.data.element.style.cssText=this.cssTextBefore+";"+function(t){var e="";for(var n in t)e+=n.replace(/([a-zA-Z](?=[A-Z]))/g,"$1-").toLowerCase()+":"+t[n]+" !important;";return e}(this.data.cssObj)):"addStyle"===this.type?(t=this.data.id,e=this.data.css,n=document.head,(i=document.createElement("style")).setAttribute("type","text/css"),i.setAttribute("id",t),i.appendChild(document.createTextNode(e)),n.appendChild(i)):"changeAttr"===this.type&&(this.attrValueBefore=this.data.element[this.data.attrName],this.data.element[this.data.attrName]=this.data.attrValue)}catch(t){}var t,e,n,i},undo:function(){try{"changeCssText"===this.type?this.data.element.style.cssText=this.cssTextBefore:"addStyle"===this.type?t(this.data.id):"changeAttr"===this.type&&(this.data.element[this.data.attrName]=this.attrValueBefore)}catch(t){}}};var o,r=(o=0,{next:function(){return"__STICKY_ID_"+ ++o+"_"+(new Date).getTime()}});function s(t){if(window.DOMMatrix||window.WebKitCSSMatrix){var e=(t=window.getComputedStyle(t)).transform||t.webkitTransform;return window.DOMMatrix?new window.DOMMatrix(e):new window.WebKitCSSMatrix(e)}}function a(t,e){return e.reduce((function(e,n){return e+function(t){var e=parseFloat(t);return isNaN(e)?0:e}(t[n])}),0)}function c(t){return c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},c(t)}var l=new Set(["absolute","fixed","relative","sticky"]),d=18,u={captureStyleChanges:[],fixedElements:[],bottomAbsElts:[],isFirstPage:!1,init:function(){this.add(document.documentElement,{scrollBehavior:"auto"}),this.add(document.documentElement,{"scrollbar-width":"none"});var t=document.body;t&&"scroll"===window.getComputedStyle(t).overflowY&&this.add(t,{overflowY:"visible"}),this._initHangAbsolutes(),this._initFixedPseudos(),this.hideScrollbars(),this.parallaxHacks(),this.disableTransitions(),this.hacks()},_add:function(t,e,n){if(t&&t.style){var i=t.style.cssText;this._applyStyles(t,e),n.push({type:"changeCssText",elt:t,cssTextBefore:i,cssTextAfter:t.style.cssText})}},add:function(t,e){return this._add(t,e,this.captureStyleChanges)},addFixed:function(t,e){return this._add(t,e,this.fixedElements)},addBottomAbs:function(t,e){return this._add(t,e,this.bottomAbsElts)},_pop:function(t){var e=t.pop();if(e)switch(e.type){case"addStyle":e.elt.parentNode&&e.elt.parentNode.removeChild(e.elt);break;case"changeCssText":e.elt.style.cssText=e.cssTextBefore}},handleScrollNode:function(t){t&&this.add(t,{scrollBehavior:"auto"})},popAll:function(){for(;this.captureStyleChanges.length>0;)this._pop(this.captureStyleChanges)},popAllFixed:function(){for(;this.fixedElements.length>0;)this._pop(this.fixedElements)},popAllAbs:function(){for(;this.bottomAbsElts.length>0;)this._pop(this.bottomAbsElts)},dealBottomAbsolutesInner:function(t,e){var n=document.body;if(n&&!/osmz.ru/.test(window.location.host))for(var o=document.createTreeWalker(n,NodeFilter.SHOW_ELEMENT),r=o.nextNode();null!==r;){var s=window.getComputedStyle(r);if("absolute"===s.position){var a=i(r),c=r.nodeName.toLocaleLowerCase(),l=r.className;if(("iframe"===c||"img"===c)&&parseInt(s.width)<=5&&parseInt(s.height)<5);else if(a.width>0&&a.height>0&&a.height+a.top>=window.innerHeight-80&&parseInt(a.height)+parseInt(a.top)<=window.innerHeight&&a.height<200&&a.top<window.innerHeight){var d=r.parentNode,h=window.getComputedStyle(d),u=!0;if((a.left+a.width-2<e.x/window.devicePixelRatio||a.left+a.width>(e.x+e.width)/window.devicePixelRatio)&&(u=!1),(parseInt(h.height)===a.height||parseInt(h.height)-a.height<=100)&&!(parseInt(h.height)<1&&/www.facebook.com/.test(window.location.host))&&("absolute"===h.position||"relative"===h.position)||t&&"fixed"===h.position&&parseInt(h.height)===window.innerHeight||"relative"===h.position&&parseInt(h.width)===a.width&&parseInt(h.height)>window.innerHeight||"static"===h.position&&Math.abs(parseInt(h.width)-parseInt(a.width))<10&&a.width<e.width/2||!u){r=o.nextNode();continue}!0,this.addBottomAbs(r,{visibility:"hidden",opacity:"0",overflow:"hidden"})}else l&&"string"==typeof l&&l.indexOf("articlePage_actionTrayContainer")>=0&&this.addBottomAbs(r,{visibility:"hidden",opacity:"0",overflow:"hidden"});r=o.nextNode()}else r=o.nextNode()}},_initHangAbsolutes:function(){var t=this,e=document.body;if(e&&!/osmz.ru/.test(window.location.host)){var n=window.getComputedStyle(e);if(!l.has(n.position)){for(var i=[],o=document.createTreeWalker(e,NodeFilter.SHOW_ELEMENT),r=o.nextNode();null!==r&&r;){var s=window.getComputedStyle(r),a=s.position;if("absolute"===a){var c=r.nodeName.toLocaleLowerCase();("iframe"===c||"img"===c)&&parseInt(s.width)<=5&&parseInt(s.height)<5||0===parseInt(s.top)||parseInt(s.top)>window.innerHeight||i.push({ele:r,style:s}),r=o.nextNode()}else l.has(a)?(r=o.nextSibling())||(r=m(o)):r=o.nextNode()}var d=e.getBoundingClientRect(),h=d.left+window.scrollX,u=d.top+window.scrollY;i.forEach((function(e){var i=e.ele,o=e.style,r=o.width,s=o.height,a=isNaN(parseFloat(o.left))?0:parseFloat(o.left),c=isNaN(parseFloat(o.right))?0:parseFloat(o.right),l=isNaN(parseFloat(o.top))?0:parseFloat(o.top)+(isNaN(parseFloat(n.marginTop))?0:parseFloat(n.marginTop)),d=a;a<0&&a===c&&Math.abs(parseInt(a))>parseInt(window.innerWidth/2)&&(d=0);var f={width:r,height:s,left:d-h+"px",top:l-u+"px",right:"auto",bottom:"auto"};t.add(i,f)}))}}},initFixed:function(){var t=document.body&&window.getComputedStyle(document.body);if(t&&"absolute"!==t.position&&"fixed"!==t.position){var e={position:"relative"};if("inline"===t.display&&(e.display="block"),0===parseInt(t.width)||0===parseInt(t.height))return void(/nullschool.net/.test(window.location.host)||/peardeck.com/.test(window.location.host)||this.add(document.body,{backgroundColor:"transparent",backgroundImage:"none"}));var n=!1;/venca.es/.test(window.location.host)&&(n=!0);var i=!1;if("none"===t.maxWidth&&0===parseInt(t.minWidth)&&0===parseInt(t.marginLeft)&&(!n&&(e.minWidth="100vw"),i=this.isBoxSizingRisky(t)),"none"===t.maxHeight&&0===parseInt(t.minHeight)&&(e.minHeight="100vh",i=i||this.isBoxSizingRisky(t,!0)),"0px"!==t.marginTop){var o=parseInt(t.paddingTop)+parseInt(t.marginTop);e.paddingTop=o+"px",e.marginTop="0px",i=!0}if("0px"!==t.marginBottom){var r=parseInt(t.paddingBottom)+parseInt(t.marginBottom);e.paddingBottom=r+"px",e.marginBottom="0px",i=!0}i&&(e.boxSizing="border-box"),this.add(document.body,e)}},_initFixedPseudos:function(){var t=this;if(document.body&&!/ulikecam.com/.test(window.location.host))for(var e=document.createTreeWalker(document.body,NodeFilter.SHOW_ELEMENT),n=e.nextNode();null!==n&&n;){window.getComputedStyle(n).position;var i=n.getBoundingClientRect();if(i.width>.75*window.innerWidth&&i.height>.75*window.innerHeight){var o=!1;i.width>=window.innerWidth-d&&i.height>=window.innerHeight-d||["::before","::after"].forEach((function(e){if("fixed"===window.getComputedStyle(n,e).position){o=!0,n.id||(n.id=r.next());var i="#"+window.CSS.escape(n.id)+e+" { position: absolute; }";t.addStyleSheet(i)}})),o?(n=e.nextSibling())||(n=m(e)):n=e.nextNode()}else n=e.nextNode()}},_getFixedStickyEels:function(t){var e={fixed:[],sticky:[],fixedBg:[],fixedHeader:[],fixedBottom:[]},n=!1;/awesomescreenshot.com/.test(window.location.host)&&(n=!0);var o=n?document.body:t||document.body;if(!o)return e;for(var r,s=document.createNodeIterator(o,NodeFilter.SHOW_ELEMENT,null,!1);r=s.nextNode();)if(r!==o){var a=window.getComputedStyle(r),c=a.position;if("sticky"===c)e.sticky.push(r);else if("fixed"===c){var l=i(r),h=window.innerHeight-l.top-20;if(l.top+l.height<=0&&l.height>0||l.left+l.width<=0&&l.width>0||l.top>window.innerHeight&&l.height>0||l.left>=window.innerWidth-d&&l.width>0)continue;if(l.top<20&&l.height<h&&l.top>=0&&r.offsetHeight<2*window.innerHeight/3)e.fixedHeader.push(r);else if(l.height>0&&l.height<350&&l.top+l.height>=window.innerHeight-20&&"hidden"!==a.visibility)e.fixedBottom.push(r);else{if(l.height>=window.innerHeight&&l.width>=2*window.innerWidth/3&&(l.width!==window.innerWidth||r.scrollHeight>window.innerHeight))continue;e.fixed.push(r)}}"fixed"===a.backgroundAttachment&&e.fixedBg.push(r)}return e},checkFixedSideElem:function(t,e,n){return!(e+Math.min(t,n)>window.innerWidth/2)},updateFixed:function(t,e,n,o,r){var s=this,a=this._getFixedStickyEels(t),c=a.fixed,l=a.sticky,d=a.fixedBg,h=a.fixedHeader,u=a.fixedBottom;e||h.forEach((function(t){s.isFirstPage||s.addFixed(t,{visibility:"hidden",overflow:"hidden",opacity:0})})),u.forEach((function(t){r?s.addFixed(t,{visibility:"visible"}):s.addFixed(t,{visibility:"hidden",overflow:"hidden",opacity:0})})),c.forEach((function(t){if("fixed"===t.dataset.position&&t.classList.contains("siteBackgroundcurrent"));else{var e=window.getComputedStyle(t),r=parseFloat(e.left),a=parseFloat(e.right),c=parseFloat(e.top),l=parseFloat(e.bottom),d=parseFloat(e.width),h=parseInt(e.height),u=t.scrollHeight,f=e.overflowY,p=window.getComputedStyle(t),m={};if("hidden"!==e.visibility&&(0!=c||0!=l||0!=r||0!=a)&&(h<=window.innerHeight||s.checkFixedSideElem(r,d,a))){i(t);["left","right","top","bottom","width","height"].forEach((function(t){m[t]=p&&"auto"!==p.getPropertyValue(t)})),s.addFixed(t,{position:"absolute",transition:"none"});var g=t.offsetParent;if(g){var w=i(g),y=r-w.left,v=a-(o-(w.left+w.width)),b=c-w.top,x=l-(n-(w.top+w.height)),S=!1,_={};if(!isNaN(y)&&(y<=0||y<r)?(S=!0,m.left||m.right?(m.left&&(_.left=y+"px"),m.right&&(_.right=v+"px")):0==y&&0==v?r<a?_.left=r+"px":_.right=a+"px":_.left=y+"px"):m.right&&!isNaN(v)&&(S=!0,_.right=v+"px"),!isNaN(b)&&(b<=0||b<c)){S=!0;var M=h;"scroll"!==f&&"auto"!==f||(M=Math.max(M,u)),_.height=M+"px",m.top||m.bottom?(m.top&&m.bottom&&delete _.height,m.top&&(_.top=b+"px"),m.bottom&&(x+window.innerHeight<=0&&x<0?_.bottom="auto":_.bottom=x+"px")):0===l&&0!==t.offsetParent.getBoundingClientRect().height?_.bottom="0px":(_.top=b+"px",_.bottom="auto")}else m.bottom&&!isNaN(x)&&(S=!0,0==l&&0!==t.offsetParent.getBoundingClientRect().height?_.bottom="0px":_.bottom=x+"px");(_.left?_.right:!_.right)&&d===t.getBoundingClientRect().width||!m.width||(_.width=d+"px"),S&&(_.width&&(_.maxWidth=_.width),_.height&&(_.maxHeight=_.height),s.addFixed(t,_))}}}}));l.forEach((function(t){if(!/www.dupont.com/.test(window.location.host)){var n=window.getComputedStyle(t),i={};["left","right"].forEach((function(t){i[t]=n&&"auto"!==n.getPropertyValue(t)}));var o={position:"relative"};i.top||(o.top="auto"),i.left&&!/www.linkedin.com/.test(window.location.host)||(o.left="auto"),i.right||(o.right="auto"),i.bottom||(o.bottom="auto"),!e&&s.add(t,o)}})),d.forEach((function(t){var e,n=window.getComputedStyle(t),o={backgroundAttachment:"scroll"};if(n.backgroundRepeat,"cover"===n.backgroundSize){var r=i(t);r.top<0&&(o.backgroundPositionY=-r.top+"px"),r.height<window.innerHeight&&(o.backgroundSize=window.innerWidth+"px");var a=n.backgroundImage.match(/^url\(["']?(.+)["']\)$/);if(a){var c=a[1];(e=c,new Promise((function(t,n){var i=new Image;i.onerror=function(t){return n(t)},i.onload=function(n){return t({img:i,src:e,width:i.width,height:i.height})},i.src=e}))).then((function(e){var n,i,o=e.width,r=e.height,a=window.innerHeight,c=window.innerWidth,l=c*r/o;r>a||(l>=a?(n=c,i=l):(n=a*o/r,i=a),s.add(t,{backgroundSize:n+"px "+i+"px"}))})).catch((function(){}))}}s.add(t,o)}))},_hasOverflowHiddenParent:function(t){var e=t.parentNode;return!(!e||e===document.documentElement||e===document.body||"hidden"!==window.getComputedStyle(e).overflow)},hacks:function(){this._quoraHack(),this._adwordsStickyClassHack(),this._squarespaceHack(),this._notionHack(),this._hackFade(),/nhl.com/.test(window.location.host)&&this.add(document.body,{height:"auto"}),this._hackFooter()},_hackFooter:function(){var t=document.getElementsByTagName("mobile-footer");t.length>0&&this.add(t[0],{visibility:"hidden",opacity:"0",overflow:"hidden"})},_squarespaceHack:function(){this.addStyleSheet(".sqs-layout .sqs-row .sqs-block-content figure { opacity: 1 !important; }")},_quoraHack:function(){var t=window.location.host;("quora.com"===t||t.endsWith("quora.com"))&&this.addStyleSheet(".Answer.ActionBar.sticky { position: static !important }")},_adwordsStickyClassHack:function(){this.addStyleSheet('[stickyclass="sticky"], ess-particle-table [role="row"], [acxscrollhost] .header-sticky-container  { transform: translate(0px, 0px) !important }')},_notionHack:function(){document.querySelector(".notion-scroller")&&this.addStyleSheet(".notion-scroller > .notion-table-view > .notion-selectable > div { transform: none !important; }")},_hackFade:function(){document.querySelector(".fade")&&this.addStyleSheet("div.fade{transform: none !important;opacity:1 !important;}")},hideScrollbars:function(){(this.isMobile()||this._isImage())&&this.add(document.documentElement,{overflow:"hidden"}),this._hideScrollbars(["html","body"]),this._hideScrollbarThun(["html","body"]),!/ulikecam.com/.test(window.location.host)&&!/iste.org/.test(window.location.host)&&!/rakuten-wallet.co.jp/.test(window.location.host)&&"dispatchEvent"in window&&window},hideScrollbarsInner:function(t){if(t.id||(t.id=r.next()),this._twitchHideScrollbars(t));else{var e="#"+window.CSS.escape(t.id);this._gmailHideScrollbars(e),this._hideScrollbars([e]);var n=["overflow","overflowY","overflowX"],i={};n.forEach((function(e){return i[e]=t.style[e]})),t.style.overflow="hidden",t.offsetWidth,n.forEach((function(e){return t.style[e]=i[e]}))}},_twitchHideScrollbars:function(t){if(t.classList&&t.classList.contains("simplebar-scroll-content")){var e=Array.from(t.parentNode.childNodes).find((function(t){return t.nodeType===t.ELEMENT_NODE&&t.classList&&t.classList.contains("simplebar-track")&&t.classList.contains("vertical")}));return this.add(e,{opacity:0}),!0}return!1},_gmailHideScrollbars:function(t){var e=["::-webkit-scrollbar-button { width: 0 !important; height: 0 !important; display: none !important; }","::-webkit-scrollbar-corner { background-color: transparent !important; border: 0 !important }","::-webkit-scrollbar-thumb { background-color: transparent !important; box-shadow: none !important }"].map((function(e){return""+t+e})).join("\n");this.addStyleSheet(e)},isMobile:function(){return this._isTouch()},_isTouch:function(){try{return document.createEvent("TouchEvent"),!0}catch(t){return!1}},_isImage:function(){var t=document.contentType;return t&&t.startsWith("image/")},_hideScrollbars:function(t){var e=t.map((function(t){return t+"::-webkit-scrollbar"})).join(", ")+"{ width: 0 !important; height: 0 !important }";this.addStyleSheet(e)},_hideScrollbarThun:function(t){var e=["::-webkit-scrollbar-button { width: 0 !important; height: 0 !important; }","::-webkit-scrollbar-corner { background-color: transparent !important; border: 0 !important }","::-webkit-scrollbar-thumb { background-color: transparent !important; box-shadow: none !important }"].map((function(t){return""+t})).join("\n");this.addStyleSheet(e)},disableTransitions:function(){if(/shop.hrc.org/.test(window.location.host)||this.addStyleSheet("* {\n          transition: none !important;\n          transition-delay: 0s !important;\n          animation-duration: 0s !important;\n          animation-delay: 0s !important;\n        }"),document.querySelector("body > .Parallax-host-outer .Parallax-host")){var t="\n          .Parallax-item, .Parallax-item figure {\n            position: absolute !important;\n            transform: translate3d(0px, 0px, 0px) !important;\n          }";this.addStyleSheet(t)}var e="body.parallax-scrolling #parallax-images .image-container";document.querySelector(e)&&(t=e+", "+e+" img {\n              transform: translate3d(0px, 0px, 0px) !important;\n            }\n        ",this.addStyleSheet(t))},parallaxHacks:function(){if(['div[data-effect="BackgroundParallax"] > .bgImage','div[data-effect="BackgroundParallaxZoom"] > .bgImage'].some((function(t){return document.querySelector(t)}))){var t='\ndiv[data-effect="BackgroundParallax"] {\n  position: absolute !important;\n  left: auto !important;\n  top: auto !important;\n}\ndiv[data-effect="BackgroundParallaxZoom"] {\n  position: absolute !important;\n}\n.bgImage[data-type="image"] {\n  transform: translate3d(0, 0, 0) !important;\n}\n        ';this.addStyleSheet(t)}document.querySelector(".enable-load-effects .Parallax-host .Parallax-item figure")&&(t=".enable-load-effects .Parallax-host .Parallax-item figure { opacity: 1 !important; transition: all 0 ease-in-out; }",this.addStyleSheet(t))},addStyleSheet:function(t){var e=document.createElement("style");e.innerHTML=t;var n=document.getElementsByTagName("head")[0]||document.getElementsByTagName("body")[0];n&&(n.appendChild(e),this.captureStyleChanges.push({elt:e,type:"addStyle"}))},_applyStyles:function(t,e){if(t){var n=t.style.cssText+"; ";for(var i in e)n+=this._camelToDash(i)+": "+e[i]+" !important; ";t.style.cssText=n}},_camelToDash:function(t){return t.replace(/([a-zA-Z])(?=[A-Z])/g,"$1-").toLowerCase()},isBoxSizingRisky:function(t,e){var n=["paddingTop","paddingBottom","borderTopWidth","borderBottomWidth"];!0!==e&&n.push("paddingRight","paddingLeft","borderRightWidth","borderRightWidth");var i=n.some((function(e){return t[e]&&"0px"!==t[e]}));return"content-box"===t.boxSizing&&i}};function f(t,e,n){this.origBodyZeroHeight=t,this.origWindowScrollX=e,this.origWindowScrollY=n,this.scrollPart=null,this.scrollNode=null,this.scrollClientHeight=0,this.regions=[],this.bgRegions=[],this.positions=[],this.bottomPosition=null,this.topCapturePosition=null,this.contentClip=null,this.numPositions=0,this.docs=document.documentElement,this.body=document.body,this.dimensions=this.getDimensions()}function p(t){return{x:t.x*window.devicePixelRatio,y:t.y*window.devicePixelRatio,width:t.width*window.devicePixelRatio,height:t.height*window.devicePixelRatio}}function m(t){if(t){t.parentNode();var e=t.nextSibling();return e||t.currentNode===document.body?e:m(t)}return null}function g(t){return Math.max.apply(null,t.filter((function(t){return"number"==typeof t})))}function w(t,e){if(t===e)return!0;var n=c(t);return null!=t&&null!=e&&n===c(e)&&("object"!==n||0===Object.keys(e).filter((function(n){return!0!==w(t[n],e[n])})).length)}function y(t){return y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},y(t)}function v(){v=function(){return e};var t,e={},n=Object.prototype,i=n.hasOwnProperty,o=Object.defineProperty||function(t,e,n){t[e]=n.value},r="function"==typeof Symbol?Symbol:{},s=r.iterator||"@@iterator",a=r.asyncIterator||"@@asyncIterator",c=r.toStringTag||"@@toStringTag";function l(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{l({},"")}catch(t){l=function(t,e,n){return t[e]=n}}function d(t,e,n,i){var r=e&&e.prototype instanceof w?e:w,s=Object.create(r.prototype),a=new W(i||[]);return o(s,"_invoke",{value:H(t,n,a)}),s}function h(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}e.wrap=d;var u="suspendedStart",f="suspendedYield",p="executing",m="completed",g={};function w(){}function b(){}function x(){}var S={};l(S,s,(function(){return this}));var _=Object.getPrototypeOf,M=_&&_(_(P([])));M&&M!==n&&i.call(M,s)&&(S=M);var E=x.prototype=w.prototype=Object.create(S);function $(t){["next","throw","return"].forEach((function(e){l(t,e,(function(t){return this._invoke(e,t)}))}))}function k(t,e){function n(o,r,s,a){var c=h(t[o],t,r);if("throw"!==c.type){var l=c.arg,d=l.value;return d&&"object"==y(d)&&i.call(d,"__await")?e.resolve(d.__await).then((function(t){n("next",t,s,a)}),(function(t){n("throw",t,s,a)})):e.resolve(d).then((function(t){l.value=t,s(l)}),(function(t){return n("throw",t,s,a)}))}a(c.arg)}var r;o(this,"_invoke",{value:function(t,i){function o(){return new e((function(e,o){n(t,i,e,o)}))}return r=r?r.then(o,o):o()}})}function H(e,n,i){var o=u;return function(r,s){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===r)throw s;return{value:t,done:!0}}for(i.method=r,i.arg=s;;){var a=i.delegate;if(a){var c=T(a,i);if(c){if(c===g)continue;return c}}if("next"===i.method)i.sent=i._sent=i.arg;else if("throw"===i.method){if(o===u)throw o=m,i.arg;i.dispatchException(i.arg)}else"return"===i.method&&i.abrupt("return",i.arg);o=p;var l=h(e,n,i);if("normal"===l.type){if(o=i.done?m:f,l.arg===g)continue;return{value:l.arg,done:i.done}}"throw"===l.type&&(o=m,i.method="throw",i.arg=l.arg)}}}function T(e,n){var i=n.method,o=e.iterator[i];if(o===t)return n.delegate=null,"throw"===i&&e.iterator.return&&(n.method="return",n.arg=t,T(e,n),"throw"===n.method)||"return"!==i&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+i+"' method")),g;var r=h(o,e.iterator,n.arg);if("throw"===r.type)return n.method="throw",n.arg=r.arg,n.delegate=null,g;var s=r.arg;return s?s.done?(n[e.resultName]=s.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,g):s:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function C(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function L(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function W(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(C,this),this.reset(!0)}function P(e){if(e||""===e){var n=e[s];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,r=function n(){for(;++o<e.length;)if(i.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return r.next=r}}throw new TypeError(y(e)+" is not iterable")}return b.prototype=x,o(E,"constructor",{value:x,configurable:!0}),o(x,"constructor",{value:b,configurable:!0}),b.displayName=l(x,c,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===b||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,x):(t.__proto__=x,l(t,c,"GeneratorFunction")),t.prototype=Object.create(E),t},e.awrap=function(t){return{__await:t}},$(k.prototype),l(k.prototype,a,(function(){return this})),e.AsyncIterator=k,e.async=function(t,n,i,o,r){void 0===r&&(r=Promise);var s=new k(d(t,n,i,o),r);return e.isGeneratorFunction(n)?s:s.next().then((function(t){return t.done?t.value:s.next()}))},$(E),l(E,c,"Generator"),l(E,s,(function(){return this})),l(E,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),n=[];for(var i in e)n.push(i);return n.reverse(),function t(){for(;n.length;){var i=n.pop();if(i in e)return t.value=i,t.done=!1,t}return t.done=!0,t}},e.values=P,W.prototype={constructor:W,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(L),!e)for(var n in this)"t"===n.charAt(0)&&i.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(i,o){return a.type="throw",a.arg=e,n.next=i,o&&(n.method="next",n.arg=t),!!o}for(var r=this.tryEntries.length-1;r>=0;--r){var s=this.tryEntries[r],a=s.completion;if("root"===s.tryLoc)return o("end");if(s.tryLoc<=this.prev){var c=i.call(s,"catchLoc"),l=i.call(s,"finallyLoc");if(c&&l){if(this.prev<s.catchLoc)return o(s.catchLoc,!0);if(this.prev<s.finallyLoc)return o(s.finallyLoc)}else if(c){if(this.prev<s.catchLoc)return o(s.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<s.finallyLoc)return o(s.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&i.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var r=o;break}}r&&("break"===t||"continue"===t)&&r.tryLoc<=e&&e<=r.finallyLoc&&(r=null);var s=r?r.completion:{};return s.type=t,s.arg=e,r?(this.method="next",this.next=r.finallyLoc,g):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),g},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),L(n),g}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var i=n.completion;if("throw"===i.type){var o=i.arg;L(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,i){return this.delegate={iterator:P(e),resultName:n,nextLoc:i},"next"===this.method&&(this.arg=t),g}},e}function b(t,e,n,i,o,r,s){try{var a=t[r](s),c=a.value}catch(t){return void n(t)}a.done?e(c):Promise.resolve(c).then(i,o)}f.prototype.prepareDeal=function(){this.scrollPart||this.getScrollPart(),this._setRegions(),this._setPositions()},f.prototype.getScrollNode=function(t){var e=this;if(this.scrollNode)return this.scrollNode;if("empty"===this.scrollPart.type||"frame"===this.scrollPart.type){var n=null,i=0,o=0,r=null;if(this.positions.forEach((function(t){t.capture.height>=i&&(i=t.capture.height,n=t.elt,o=t.clip.height,r=t.clip)})),n){var s=200;if(t&&t.parentHeight<r.height+t.top-10){var a=t.parentHeight-t.top-10;o=a,r.height=a,s=50}(/7mkr.com/.test(window.location.host)||/Mobi/.test(navigator.userAgent)||o<=s)&&(s=0),/www.dupont.com/.test(window.location.host)&&(s=88),this.scrollNode=n!==window?n:document.scrollingElement?document.scrollingElement:window,this.scrollClientHeight=o-s,this.topCapturePosition=p(r),t&&(this.topCapturePosition.height+=t.top*window.devicePixelRatio),r.y+=s,r.height-=s,this.contentClip=p(r)}else this.scrollNode=document.scrollingElement?document.scrollingElement:window,this.scrollClientHeight=document.scrollingElement?document.scrollingElement.clientHeight:window.innerHeight,this.contentClip={x:0,y:0*window.devicePixelRatio,width:window.innerWidth*window.devicePixelRatio,height:window.innerHeight*window.devicePixelRatio},this.topCapturePosition={x:0,y:0,width:window.innerWidth*window.devicePixelRatio,height:window.innerHeight*window.devicePixelRatio};return this.scrollNode}if("elt"===this.scrollPart.type){s=100;return/Mobi/.test(navigator.userAgent)&&(s=20),this.scrollNode=this.scrollPart.elt,this.scrollClientHeight=this.scrollPart.height-s,this.positions.forEach((function(t){t.isMain&&t.clip.y>0&&t.clip.height<window.innerHeight?e.bottomPosition=p(t.clip):t.isMain&&0===t.clip.x&&0===t.clip.y?e.topCapturePosition=p(t.clip):t.isMain||(t.clip.y+=s,t.clip.height-=s,e.contentClip=p(t.clip))})),this.scrollNode&&u.add(this.scrollNode,{"scrollbar-width":"none"}),this.scrollNode}},f.prototype._setRegions=function(){var t=[],e=[],n=this.scrollPart,i=this.dimensions,o=i.fullWidth,r=i.fullHeight,s=window,a=i.bodyMaxHeight,c=i.docEltMaxHeight;if(a-20>c&&c<=window.innerHeight&&(s=this.body),"empty"!==n.type&&n.ready){var l=n.bottom<r,d=n.right<o,h=null,u=null;if("elt"===n.type?u={type:"inner_elt",page:{elt:n.elt,eltHeight:n.height,eltWidth:n.width,eltOffsetLeft:n.left,eltOffsetTop:n.top,top:0,left:0,right:n.width,bottom:n.scrollHeight},capture:{x:n.left,y:n.top,width:n.width,height:n.scrollHeight}}:"frame"===n.type&&(u={type:"inner_frame",page:{eltHeight:n.height,eltWidth:n.width,eltOffsetLeft:n.left,eltOffsetTop:n.top,top:0,left:0,right:n.scrollWidth,bottom:n.scrollHeight},capture:{x:n.left,y:n.top,width:n.scrollWidth,height:n.scrollHeight}}),l&&d&&t.push({type:"main",page:{elt:s,top:n.bottom,left:n.right,right:o,bottom:r},capture:{delay:0,x:n.right,y:n.bottom+(n.scrollHeight-n.height),width:o-n.right,height:r-n.bottom}}),l){h={type:"main",page:{elt:s,top:n.bottom,left:0,right:n.right,bottom:r},capture:{delay:0,x:0,y:n.bottom+(n.scrollHeight-n.height),width:n.right,height:r-n.bottom}},t.push(h);var f=h.capture.height,p=h.capture.y;e.push({type:"fill",fill:{x:h.capture.x+h.capture.width,y:p,width:u.capture.width-n.width,height:f},sample:{x:u.capture.x,y:p,height:f,width:n.width}})}if(d){h={type:"main",page:{elt:s,top:0,left:n.right,right:o,bottom:n.bottom},capture:{delay:0,x:n.right,y:0,width:o-n.right,height:n.bottom}},t.push(h);var m=h.capture.width,g=h.capture.x,y=h.capture.y+h.capture.height;e.push({type:"fill",fill:{x:g,y,width:m,height:u.capture.y+u.capture.height-y},sample:{x:g,y:u.capture.y,width:m,height:h.page.bottom-u.capture.y}})}h={type:"main",page:{elt:s,top:0,left:0,right:n.right,bottom:n.bottom},capture:{delay:0,x:0,y:0,width:n.right,height:n.bottom}},t.push(h);var v=h.capture.y+h.capture.height,b=u.capture.x;e.push({type:"fill",fill:{x:0,y:v,width:b,height:u.capture.y+u.capture.height-v},sample:{x:0,y:u.capture.y,width:b,height:h.page.bottom-u.capture.y}}),v=0,t.push(u),this.dimensions.fullWidth+=Math.max(0,u.page.right-u.page.eltWidth),this.dimensions.fullHeight+=Math.max(0,u.page.bottom-u.page.eltHeight)}else t.push({type:"main",page:{elt:s,top:0,left:0,right:o,bottom:r},capture:{x:0,y:0,width:o,height:r}});this.regions=t,this.bgRegions=e,function(t){var e={type:"",page:{top:1,left:1,right:1,bottom:1},capture:{x:1,y:1,width:1,height:1}},n={eltHeight:1,eltWidth:1,eltOffsetTop:1,eltOffsetLeft:1};if(0!==t.filter((function(t,i){var o=!1;return w(t,e)||(o=!0),"inner_elt"!==t.type&&"inner_frame"!==t.type||w(t.page,n)||(o=!0),o})).length)throw new Error("Bad regions setup!")}(t),function(t){var e={x:1,y:1,width:1,height:1};if(0!==t.filter((function(t){["sample","fill"].filter((function(n){return!t[n]||!w(t[n],e)&&!0})).length})).length)throw new Error("Bad bgRegions setup!")}(e)},f.prototype._setPositions=function(){var t=this.dimensions,e=t.windowWidth,n=t.windowHeight,i=(t.fullWidth,[]);this.regions.forEach((function(t){if("inner_frame"!==t.type){var o=t.page,r={x:o.left,y:o.top,width:Math.min(e,o.right-o.left),height:Math.min(n,o.bottom-o.top)};if("main"!==t.type&&(r.x+=t.page.eltOffsetLeft||0,r.y+=t.page.eltOffsetTop||0,r.width=t.page.eltWidth||r.width,r.height=t.page.eltHeight||r.height),0!==r.width&&0!==r.height){var s=Object.assign({},r),a=Object.assign({},t.capture);if(s.height-0>0&&a.height-0>0){s.y+=0,s.height-=0,a.y+=0,a.height-=0;"inner_elt"===t.type&&t.page.eltHeight,"inner_elt"===t.type&&t.page.eltWidth;var c={isMain:"main"===t.type,isFrame:!1,isTopOfElt:!1,elt:t.page.elt,scrollX:0,clip:r,capture:t.capture};i.push(c)}}}else h.push({isFrame:!0})})),this.positions=i,this.numPositions=i.length,i.forEach((function(t,e){t.index=e}))},f.prototype.getScrollPart=function(){var t=this.dimensions;if(this.scrollPart)return this.scrollPart;var e=function(t,e,o,r,s){var a={type:"empty"},c=0;if(document.body){var l=window.getComputedStyle(document.body);c=parseInt(l.getPropertyValue("margin-top"))}if(r>e+d+Math.abs(c)&&!window.location.href.startsWith("https://radish-blueberry-jd5b")||!(s=s||document.body))return a;if(!n(s)&&!window.location.href.startsWith("https://app.hubspot.com/email/")){var h=function(t){for(var e=window.innerWidth,n=window.innerHeight,o=0,r=t,s=null,a=null,c=!!/sendgrid.com/.test(window.location.host),l=document.createTreeWalker(t||document.body,NodeFilter.SHOW_ELEMENT),h=l.nextNode();null!=h;){var u=h.offsetHeight,f=h.scrollHeight,p=!1,g=h.nodeName.toLocaleLowerCase();if(f>u+5&&u>50&&(f>o||a&&a.width*a.height<h.offsetHeight*h.offsetWidth&&f>a.height)&&h.offsetWidth>60&&"iframe"!==g&&"script"!==g){var w=i(h);if(0==w.left&&w.width/window.innerWidth<.3);else{var y=window.getComputedStyle(h),v=y.overflowY,b=["ps-active-y","ps--active-y"],x=["ps","ps-container"].some((function(t){return h.classList.contains(t)}))&&b.some((function(t){return h.classList.contains(t)}));"none"!==y.pointerEvents&&("hidden"!==v&&"visible"!==v||x)&&w.left+d>=0&&w.left+w.width<e+d+200&&w.top+d>=0&&(w.top+w.height<n+d||f>n+d+100)&&(p=!0,s=y,o=f,r=h,a=w)}}p&&!c?(h=l.nextSibling())||(h=m(l)):h=l.nextNode()}if(!r)return null;var S=(a=a||i(r)).height,_=a.width,M=r.scrollWidth,E=r.scrollHeight;if("hidden"==(s&&s.overflowX)){x=parseFloat(s.paddingLeft)||0;var $=parseFloat(s.paddingRight)||0;a.left+=x,_-=x+$,M-=$+$}if(r===document.body)return null;if(t!==document.body&&r===t&&Math.abs(M-_)<=2&&Math.abs(E-S)<=2)return null;var k=a.left;return r.classList.contains("bodyCells")&&document.querySelector(".pivotTableContainer .bodyCells")===r&&(_=k+_,k=0),a.left+_>innerWidth&&a.left<e&&(_=e-a.left),a.top+S>innerHeight&&a.top<innerHeight&&(S=n-a.top),{type:"elt",elt:r,scrollHeight:Math.max(S,E),scrollWidth:Math.max(_,M),top:a.top,bottom:a.top+S,left:k,right:k+_,height:S,width:_,ready:!0}}(s);if(h)return h}return function(t,e){var n=Array.from(document.querySelectorAll("iframe, frame")),o=Math.min(t*e/4,18e4),r=0,s=null;return n.forEach((function(n){var a=window.getComputedStyle(n),c=i(n),l=c.width,h=c.height,u=l*h;if("hidden"!==a.getPropertyValue("visibility")&&"none"!==a.getPropertyValue("display")&&u>=o/2&&u>r&&c.left+d>=0&&c.left+c.width<=t+d&&c.top+d>=0&&c.top+c.height<=e+d+300){r=u;var f=c.left,p=c.top;s={type:"frame",frame:n,width:l,height:h,top:p,left:f,url:n.src,tagName:n.nodeName.toLowerCase(),bottom:p+h,right:f+l,ready:!1}}})),null!==s?s:null}(t,e)||a}(t.windowWidth,t.windowHeight,t.fullWidth,t.fullHeight);return this.scrollPart=e,e},f.prototype.getDimensions=function(){var t=this.body,e=this.docs,n=window.innerWidth,i=window.innerHeight,o=t?window.getComputedStyle(t):{},r=[e.clientWidth,e.offsetWidth,t?t.offsetWidth:0],s="hidden"===o.overflowY&&"hidden"===o.overflowX,a=[e.clientHeight,e.offsetHeight,s?0:e.scrollHeight],c=[t?t.offsetHeight:0,t&&!s?t.scrollHeight:0],l=g(a),d=g(c),h=g([l,d]),u=g(r);return{windowWidth:n,windowHeight:i,bodyMaxHeight:d,docEltMaxHeight:l,fullWidth:u,fullHeight:h,nonadjustedFullHeight:h,nonadjustedFullWidth:u,root:void 0}};var x,S,_,M,E,$,k,H,T,C,L,W={},P=1,N=0,D=[],Y=!1,I=!1,B=!1,O=!1,F=!1,A=0,R=!1,z=0,j={visible:{enable:"false",key:"V"},selected:{enable:"false",key:"S"},entire:{enable:"false",key:"E"}},V=[],X=navigator.platform&&navigator.platform.includes("Win"),U=chrome.i18n.getMessage("capture_btn_capture"),Z='<div id="awesome_screenshot_wrapper"><div id="awesome_screenshot_top"></div><div id="awesome_screenshot_right"></div><div id="awesome_screenshot_bottom"></div><div id="awesome_screenshot_left"></div><div id="awesome_screenshot_center" class="drsElement drsMoveHandle"><div id="awesome_screenshot_size" style="min-width:70px;"><span>0 X 0</span></div><div id="awesome_screenshot_action"><a id="awesome_screenshot_cancel"><span id="awesome_screenshot_cancel_icon"></span>'+chrome.i18n.getMessage("capture_btn_cancel")+'</a><a id="awesome_screenshot_copy"><span id="awesome_screenshot_copy_icon"></span>'+chrome.i18n.getMessage("capture_btn_copy")+'</a><a id="awesome_screenshot_capture"><span id="awesome_screenshot_capture_icon"></span>'+U+"</a></div></div></div>",q=!1,G=document.location.hostname,K=null,J=window.devicePixelRatio;function Q(t){switch(t){case"www.facebook.com":var e=document.getElementById("pagelet_bluebar");if(e)e.querySelector("[role=banner]");break;case"pinterest.com":var n=document.getElementById("CategoriesBar"),i=document.getElementsByClassName("Nag");null!=i&&0!=i.length&&(i[0].style.position=""),null!=n&&(n.style.position="")}}function tt(t,e,n){t=document.createElement("div");switch(e){case"success":t.classList.add("success-message"),t.style.cssText="box-sizing:content-box;padding: 10px 30px;height: 36px;text-align: center;background-color:rgba(0,0,0,.9);;color: white;position: fixed;left: 50%;top: 20px;transform:translateX(-50%);line-height: 36px;font-size:16px;font-weight:bold;border-radius: 4px;z-index: 9999;box-shadow: 0 3px 6px -4px rgba(0,0,0,.12),0 6px 16px 0 rgba(0,0,0,.08),0 9px 28px 8px rgba(0,0,0,.05);",(i=document.createElement("span")).innerText=t,i.classList.add("mes-text"),t.appendChild(i);break;case"error":var i;t.classList.add("error-message"),t.style.cssText="width: 300px;height: 40px;text-align: center;background-color: #f5f0e5;color: rgba(238,99,99,0.8);position: fixed;left: 43%;top: 10%;line-height: 40px;border-radius: 5px;z-index: 9999;",(i=document.createElement("span")).innerText=t,i.classList.add("mes-text"),t.appendChild(i)}document.body.appendChild(t),setTimeout((function(){document.body.removeChild(t)}),n)}function et(t){document.getElementById(t)&&document.getElementById(t).remove()}function nt(){et("aws-entire-capture"),D.forEach((function(t){t.undo()})),D=[]}function it(t,e){this.type=t,this.data=e,this.exec()}function ot(){return window.self!==window.top}function rt(t,e,n){var i=t;t||(i=window),i.scrollTo&&"function"==typeof i.scrollTo?i.scrollTo(n||0,e):(i.scrollTop=e,n&&(i.scrollLeft=n))}function st(t){if(document.body){var e=!1,n=0;O=!1,F=!1,A=0,R=!1,0,z=0,u.init(),u.initFixed(),rt(document.scrollingElement,0);var i=(H=new f(document.body&&0===document.body.offsetHeight||!1,window.scrollX,window.scrollY)).getScrollPart();if(i.frame&&(e=!0),H.prepareDeal(),M=H.getScrollNode(t).scrollTop,E=H.getScrollNode(t).scrollLeft,"elt"!==i.type&&document.body!==H.scrollNode||u.handleScrollNode(i.elt||H.scrollNode),rt(H.scrollNode,0,0),rt(document.scrollingElement,0),H.dimensions.fullHeight,H.scrollPart&&H.dimensions.fullHeight>window.innerHeight&&u.dealBottomAbsolutesInner(!0,H.contentClip),i.elt&&(u.hideScrollbarsInner(i.elt),rt(H.scrollNode,1,0),n=100),e&&!ot())return function(){I=!1,B=!1;var t=H.getScrollPart(),e=t.frame;e&&e.contentWindow.postMessage({type:"checkFrameStatus"},"*")}(),void setTimeout((function(){if(I){var t=function(t){var e=t.getScrollPart(),n=e.frame;n?(B=!0,n.contentWindow.postMessage({type:"initCaptureFrame",parentPage:{top:e.top,left:e.left,right:e.width,bottom:e.bottom,parentHeight:window.innerHeight,parentWidth:window.innerWidth}},"*")):B=!1;return B}(H);t||Ht({action:"visible",menuType:"entire"})}else Ht({action:"visible",menuType:"entire"})}),1200);if(q=!1,0,$=Wt(),k=document.documentElement.clientWidth,Dt(),window.onresize=Dt,H.dimensions.fullHeight<=window.innerHeight||function(){if(H&&"empty"===H.getScrollPart().type&&/behance.net/.test(window.location.host)){if("hidden"===window.getComputedStyle(document.scrollingElement).getPropertyValue("overflow"))return!0}return!1}())return W.y=!1,void(ot()?Yt({action:"visible",menuType:"entire"}):Ht({action:"visible",menuType:"entire"}));W.y=!0,T||(T="entire "+Math.random()),function(t){if(t&&H&&ot()){if(H.contentClip.y+=t.top*window.devicePixelRatio,H.contentClip.x+=t.left*window.devicePixelRatio,window.location.host.indexOf("trustarte")<0&&(H.contentClip.height-=parseInt(1*window.devicePixelRatio)),H.topCapturePosition.x=0,H.topCapturePosition.y=0,!H.bottomPosition)if(t.bottom>=t.parentHeight){var e=H.contentClip.y+H.contentClip.height,n=t.parentHeight*window.devicePixelRatio;H.topCapturePosition.height=Math.min(e,n),e<n&&(H.bottomPosition={y:e+4,height:n-e-4})}else H.topCapturePosition.height=parseInt(t.bottom*window.devicePixelRatio),H.bottomPosition={y:t.bottom*window.devicePixelRatio,height:(t.parentHeight-t.bottom)*window.devicePixelRatio};if(t.left>0){var i=!1,o=t.left;H.bgRegions.length>0&&H.bgRegions.forEach((function(t){t&&t.fill.width>0&&t.fill.height>0&&0==t.fill.x&&(t.width+=o,i=!0)})),i||H.bgRegions.push({fill:{x:0,y:t.top,width:o,height:H.contentClip.height},sample:{x:0,y:t.top,width:o,height:H.contentClip.height}})}var r=(H.contentClip.x+H.contentClip.width)/window.devicePixelRatio;if(r<t.parentWidth){o=t.parentWidth-r;var s=!1,a=H.contentClip.height/window.devicePixelRatio;H.bgRegions.length>0&&H.bgRegions.forEach((function(t){t&&t.fill.width>0&&t.fill.height>0&&t.fill.x>0&&(t.width+=o,t.x=r,s=!0)})),s||H.bgRegions.push({fill:{x:r,y:t.top,width:o,height:a},sample:{x:r,y:t.top,width:o,height:a}})}}}(t);var o={action:"scroll_next_done",userAction:"save",isFirstScroll:!0,contentClip:H.contentClip,bottomClip:H.bottomPosition,bgRegions:Nt(H.bgRegions),topCapturePosition:H.topCapturePosition,devicePixelRatio:window.devicePixelRatio,mark:T,windowHeight:window.innerHeight*window.devicePixelRatio};z=2,setTimeout((function(){H.dimensions=H.getDimensions(),u.updateFixed(H.getScrollNode()?H.getScrollNode():document.scrollingElement,!0,H.dimensions.nonadjustedFullHeight,window.innerWidth),rt(H.scrollNode,0,0),ot()?setTimeout((function(){Yt(o)}),300):setTimeout((function(){Ht(o)}),150+n)}),150+at())}else Ht({action:"visible",menuType:"entire"})}function at(){return/84paris.com/.test(window.location.host)?1200:/createsend.com/.test(window.location.host)?200:/7mkr.com/.test(window.location.host)?800:/civitai.com/.test(window.location.host)?100:/jus.br/.test(window.location.host)?150:50}function ct(t){/trello.com/.test(window.location.host)&&(t.stopPropagation(),pt(t))}function lt(t){if(t.preventDefault(),t.changedTouches.length>0){var e,n,i=function(t){t.preventDefault(),Mt(C,"background-color","rgba(0,0,0,0)"),n=parseInt(t.changedTouches[0].pageX)-o,e=parseInt(t.changedTouches[0].pageY)-r,s.children[0].innerHTML=parseInt(Math.abs(n))+" X "+parseInt(Math.abs(e)),xt(o,r,n,e),St(o,r,n,e),bt(t.changedTouches[0])},o=parseInt(t.changedTouches[0].pageX),r=parseInt(t.changedTouches[0].pageY),s=document.getElementById("awesome_screenshot_size"),a=document.getElementById("awesome_screenshot_action");C.addEventListener("touchmove",i,!1),C.addEventListener("touchend",(function t(n){n.preventDefault();var c=document.getElementById("awesome_screenshot_center");parseInt(n.changedTouches[0].pageX)-o!=0&&parseInt(n.changedTouches[0].pageY)-r!=0||0!=c.offsetWidth||(Mt(C,"background-color","rgba(0,0,0,0)"),s.children[0].innerHTML=Math.abs(200)+" X "+Math.abs(200),xt(o-100,r-100,200,200),St(o-100,r-100,200,200)),C.removeEventListener("touchstart",lt,!1),C.removeEventListener("touchmove",i,!1),C.removeEventListener("touchend",t,!1),Mt(document.getElementById("awesome_screenshot_action"),"display","block"),r+e>document.documentElement.scrollTop+document.documentElement.clientHeight-46?Mt(a,"bottom","5px"):Mt(a,"bottom","-46px"),Mt(s,"display","block"),ft()}),!1)}}function dt(t){if(0==t.button){var e,n,i=function(t){Mt(C,"background-color","rgba(0,0,0,0)"),n=t.pageX-o,e=t.pageY-r,s.children[0].innerHTML=Math.abs(n)+" X "+Math.abs(e),xt(o,r,n,e),St(o,r,n,e),bt(t)},o=t.pageX,r=t.pageY,s=document.getElementById("awesome_screenshot_size"),a=document.getElementById("awesome_screenshot_action");C.addEventListener("mousemove",i,!1),C.addEventListener("mouseup",(function t(n){var c=document.getElementById("awesome_screenshot_center");n.pageX-o!=0&&n.pageY-r!=0||0!=c.offsetWidth||(Mt(C,"background-color","rgba(0,0,0,0)"),s.children[0].innerHTML=Math.abs(200)+" X "+Math.abs(200),xt(o-100,r-100,200,200),St(o-100,r-100,200,200)),C.removeEventListener("mousedown",dt,!1),C.removeEventListener("mousemove",i,!1),C.removeEventListener("mouseup",t,!1),Mt(document.getElementById("awesome_screenshot_action"),"display","block"),r+e>document.documentElement.scrollTop+document.documentElement.clientHeight-46?Mt(a,"bottom","5px"):Mt(a,"bottom","-46px"),Mt(s,"display","block"),ft()}),!1)}}function ht(t){27==t.keyCode&&vt()}function ut(t){_t(),Lt();var e=document.getElementById("awesome_screenshot_center"),n=Et(e,"width"),i=Et(e,"height");n*i&&xt(Et(e,"left"),Et(e,"top"),n,i);L.maxLeft=S,L.maxTop=_}function ft(){var t=document.getElementById("awesome_screenshot_center");L=new DragResize("dragresize",{maxLeft:S,maxTop:_});var e=document.getElementById("awesome_screenshot_size"),n=document.getElementById("awesome_screenshot_action");L.isElement=function(t){if(t.className&&t.className.indexOf("drsElement")>-1)return!0},L.isHandle=function(t){if(t.className&&t.className.indexOf("drsMoveHandle")>-1)return!0},L.ondragmove=function(t,i){var o=L.elmX,r=L.elmY,s=L.elmW,a=L.elmH;e.children[0].innerHTML=parseInt(Math.abs(s))+" X "+parseInt(Math.abs(a)),Mt(e,"top",r<30?"5px":"-30px"),Mt(n,"right",s<190?-(270-s)/2+"px":"0px"),r+a>document.documentElement.scrollTop+document.documentElement.clientHeight-46?Mt(n,"bottom","5px"):Mt(n,"bottom","-46px"),xt(o,r,s,a),St(o,r,s,a),bt(i)},L.apply(C),L.select(t),document.getElementById("awesome_screenshot_action").addEventListener("click",pt,!1),document.getElementById("awesome_screenshot_action").addEventListener("touchend",(function(t){t.preventDefault(),pt(t.changedTouches[0])}),!1)}function pt(t){switch(t.target.id){case"awesome_screenshot_capture":case"awesome_screenshot_capture_icon":gt();break;case"awesome_screenshot_cancel":case"awesome_screenshot_cancel_icon":vt();break;case"awesome_screenshot_copy":case"awesome_screenshot_copy_icon":gt(!0)}}function mt(){var t=document.createElement("p");t.style.width="100%",t.style.height="200px";var e=document.createElement("div");e.style.position="absolute",e.style.top="0px",e.style.left="0px",e.style.visibility="hidden",e.style.width="200px",e.style.height="150px",e.style.overflow="hidden",e.appendChild(t),document.body.appendChild(e);var n=t.offsetWidth;e.style.overflow="scroll";var i=t.offsetWidth;return n==i&&(i=e.clientWidth),document.body.removeChild(e),n-i}function gt(t){return wt.apply(this,arguments)}function wt(){var t;return t=v().mark((function t(e){var n,i,o,r,s,a,c,l,d,h;return v().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=document.getElementById("awesome_screenshot_size"),i=document.getElementById("awesome_screenshot_center"),mt(),n&&Mt(n,"display","none"),L.deselect(i),L.enabled=!1,Mt(i,"outline","none"),P=1,x=document.documentElement,M=document.scrollingElement.scrollTop,E=document.scrollingElement.scrollLeft,$=Wt(),k=x.clientWidth,q=!0,o=L.elmX,r=L.elmY,s=L.elmW,a=L.elmH,c=o-document.scrollingElement.scrollLeft,l=r-document.scrollingElement.scrollTop,r<M&&(c<=0&&(document.scrollingElement.scrollLeft=o),l<=0?(document.scrollingElement.scrollTop=r,l=0):(C.style.paddingTop=l+"px",document.scrollingElement.scrollTop+=l)),t.next=19,yt(200);case 19:if(a>$&&(u.initFixed(),u.updateFixed(document.scrollingElement,!0,document.scrollingElement.scrollHeight,window.innerWidth)),Lt(),Q(G),(d=document.getElementById("awesome_screenshot_action"))&&(d.style.display="none"),h={x:0,y:0,width:window.innerWidth*window.devicePixelRatio,height:window.innerHeight*window.devicePixelRatio},!(r<M)){t.next=32;break}if(!(s<=k&&a<=$)){t.next=29;break}return setTimeout(Ht,300,{action:"visible",counter:P,ratio:a%$/$,scrollBar:{x:!1,y:!1},centerW:s*J,centerH:a*J,data:{x:c*J,y:l*J,w:s*J,h:a*J},menuType:"selected",innerWidth:window.innerWidth,isCopyAction:e,topCapturePosition:h}),t.abrupt("return");case 29:setTimeout(Ht,300,{action:"scroll_next_done",innerWidth:window.innerWidth,isCopyAction:e,isFirstScroll:!0,windowHeight:window.innerHeight*window.devicePixelRatio,topCapturePosition:h}),t.next=35;break;case 32:vt(),visualViewport.scale>1&&(c=parseInt((c-visualViewport.offsetLeft)*visualViewport.scale),l=parseInt((l-visualViewport.offsetTop)*visualViewport.scale),s=parseInt(s*visualViewport.scale),a=parseInt(a*visualViewport.scale)),setTimeout((function(){Ht({action:"capture_selected_done",data:{innerWidth:window.innerWidth,x:c*J,y:l*J,w:s*J,h:a*J},isCopyAction:1==e,topCapturePosition:h})}),100);case 35:case"end":return t.stop()}}),t)})),wt=function(){var e=this,n=arguments;return new Promise((function(i,o){var r=t.apply(e,n);function s(t){b(r,i,o,s,a,"next",t)}function a(t){b(r,i,o,s,a,"throw",t)}s(void 0)}))},wt.apply(this,arguments)}function yt(t){return new Promise((function(e){setTimeout((function(){e()}),t>0?t:0)}))}function vt(){window.removeEventListener("resize",ut),window.removeEventListener("click",ct,!0),document.body.removeEventListener("keydown",ht,!1),C.parentNode&&C.parentNode.removeChild(C),q=!1,u.popAll(),u.popAllFixed(),u.popAllAbs()}function bt(t){if(t){var e=t.clientY,n=t.clientX,i=window.innerHeight-e,o=window.innerWidth-n;e<20&&(document.scrollingElement.scrollTop-=25),n<40&&(document.scrollingElement.scrollLeft-=25),i<40&&(document.scrollingElement.scrollTop+=60-i),o<40&&(document.scrollingElement.scrollLeft+=60-o)}}function xt(t,e,n,i){var o=n>=0?t+n:t,r=i>=0?e:e+i,s=n>=0?S-t-n:S-t,a=i>=0?e+i:e,c=n>=0?S-t:S-t-n,l=S-c,d=_-r,h=document.getElementById("awesome_screenshot_top"),u=document.getElementById("awesome_screenshot_right"),f=document.getElementById("awesome_screenshot_bottom"),p=document.getElementById("awesome_screenshot_left");Mt(h,"width",o+"px"),Mt(h,"height",r+"px"),Mt(u,"width",s+"px"),Mt(u,"height",a+"px"),Mt(f,"width",c+"px"),Mt(f,"top",a+"px"),Mt(p,"width",l+"px"),Mt(p,"height",d+"px")}function St(t,e,n,i){var o=n>=0?t:t+n,r=i>=0?e:e+i,s=document.getElementById("awesome_screenshot_center");Mt(s,"width",Math.abs(n)+"px"),Mt(s,"height",Math.abs(i)+"px"),Mt(s,"top",r+"px"),Mt(s,"left",o+"px")}function _t(){Mt(C,"display","none"),Mt(C,"width",document.scrollingElement.scrollWidth+"px"),Mt(C,"height",document.scrollingElement.scrollHeight+"px"),Mt(C,"display","block")}function Mt(t,e,n){t.style.setProperty(e,n)}function Et(t,e){return parseInt(t.style.getPropertyValue(e))}function $t(t){if(!t)return window.pageYOffset;var e=t.scrollTop,n=document.scrollingElement?document.scrollingElement.scrollTop:document.defaultView.pageYOffset;return n>e?n:e}function kt(){if(B)!function(t){var e=H.getScrollPart().frame;e&&e.contentWindow.postMessage(t,"*")}({type:"scrollNext"});else{u.popAllFixed(),u.popAllAbs();var t=H?H.scrollNode:document.scrollingElement,e=Math.ceil($t(t)),n=Math.ceil(t.scrollLeft);t.scrollHeight;if(q){var i=document.getElementById("awesome_screenshot_center"),o=Et(i,"left"),r=Et(i,"top"),s=Et(i,"width"),a=Et(i,"height");if(s<=k&&a>$){if(r+a==e+$||r+a-1==e+$||r+a<e+$){var c={action:"entire_capture_done",counter:P,ratio:{x:0,y:a%$/$},scrollBar:{x:!1,y:!0,realX:window.innerHeight>document.documentElement.clientHeight},data:{x:o*window.devicePixelRatio,y:r*window.devicePixelRatio},centerW:s*window.devicePixelRatio,centerH:a*window.devicePixelRatio};return void(ot()?Yt(c):Ht(c))}r+a<e+2*$?rt(document.scrollingElement,r+a-$):r+a>e+2*$&&rt(document.scrollingElement,e+$)}if(s>k&&a<=$){if(o+s==n+k){c={action:"entire_capture_done",counter:P,ratio:{x:s%k/k,y:0},scrollBar:{x:!0,y:!1,realY:window.innerWidth>document.documentElement.clientWidth},centerW:s*window.devicePixelRatio,centerH:a*window.devicePixelRatio};return void(ot()?Yt(c):Ht(c))}o+s<n+2*k?document.scrollingElement.scrollLeft=o+s-k:o+s>n+2*k&&(document.scrollingElement.scrollLeft=n+k)}if(s>k&&a>$){if(r+a==e+$){if(o+s==n+k){c={action:"entire_capture_done",counter:P,ratio:{x:s%k/k,y:a%$/$},scrollBar:{x:!0,y:!0},centerW:s*window.devicePixelRatio,centerH:a*window.devicePixelRatio};return void(ot()?Yt(c):Ht(c))}return o+s<n+2*k?document.scrollingElement.scrollLeft=o+s-k:o+s>n+2*k&&(document.scrollingElement.scrollLeft=n+k),P++,document.scrollingElement.scrollTop=r,void setTimeout(Ht,300,{action:"scroll_next_done"})}r+a<e+2*$?document.scrollingElement.scrollTop=r+a-$:r+a>e+2*$&&(document.scrollingElement.scrollTop=e+$)}}else{$=H?H.scrollClientHeight:$;var l=Math.round($t(t)/(t.scrollHeight+t.offsetTop-$)*100)+"%";if(N++,ot()?Yt({action:"entireCaptureProgress",percentage:l,scrollNum:N}):Ht({action:"entireCaptureProgress",percentage:l,scrollNum:N}),t!==document.body?rt(t,e+$):(rt(t,e+$),rt(window,e+$)),Math.ceil($t(t))==e||Y||R&&Math.ceil($t(t))-e<$||e<$&&e>0&&Math.ceil($t(t))-e<2){n=t.scrollLeft;t.scrollLeft=n+k,!W.x||t.scrollLeft;var d={};return d.y=(e+Math.abs(A))%$/$,0==d.y&&(d.y=1),d.x=n%k/k,rt(t,M,E),u.popAll(),ot()?Yt({action:"entire_capture_done",counter:Y?P-1:P,ratio:Y?{x:1,y:1}:d,scrollBar:W}):Ht({action:"entire_capture_done",counter:Y?P-1:P,ratio:Y?{x:1,y:1}:d,scrollBar:W}),N=0,void(Y=!1)}}setTimeout((function(){!q&&z>0&&(z--,t!==document.body?rt(t,e+$):(rt(t,e+$),rt(window,e+$)));var n=!1;t.scrollHeight-Math.ceil($t(t))>window.innerHeight&&H&&H.scrollPart&&u.dealBottomAbsolutesInner(!1,H.contentClip),t.scrollHeight-Math.ceil($t(t))<=window.innerHeight&&(n=!0),u.updateFixed(t,!1,H?H.dimensions.nonadjustedFullHeight:t.scrollHeight,window.innerWidth,n),setTimeout((function(){t.scrollHeight;var i=0,o=H?H.getDimensions():null;if(H&&o&&(i=/ourmortgageoptions.com.au/.test(window.location.host)?Math.ceil(o.docEltMaxHeight-H.dimensions.docEltMaxHeight):Math.ceil(o.nonadjustedFullHeight-H.dimensions.nonadjustedFullHeight)),(!O&&i>0||function(){try{return document.createEvent("TouchEvent"),!0}catch(t){return!1}}()&&/instagram.com/.test(window.location.host))&&(F=!0),!F&&(i<0||O&&i>=0&&!/blog.csdn.net/.test(window.location.host))){o&&(H.dimensions=o);var r=function(t){if(/7mkr.com/.test(window.location.host)){if(t<=0)return-1;if(t>0)return 1}return t+200<0?-1:t}(i);O=!0,A+=r,rt(t,e+$+r),ot()?Yt({action:"scroll_next_done"}):(u.updateFixed(t,!1,H?H.dimensions.nonadjustedFullHeight:t.scrollHeight,window.innerWidth,n),setTimeout(Ht,100+at(),{action:"scroll_next_done"}))}else ot()?Yt({action:"scroll_next_done"}):setTimeout(Ht,at(),{action:"scroll_next_done"});R=Math.ceil($t(t))-e<.7*$}),80+at())}),100)}}function Ht(t,e){browser.runtime.sendMessage(t).then((function(t){e&&e(t)})).catch((function(t){}))}function Tt(t){switch(String.fromCharCode(t.which)){case j.visible.key:1==j.visible.enable&&(X&&t.altKey||!X&&t.shiftKey)&&t.ctrlKey&&Ht({innerWidth:window.innerWidth,action:"visible"});break;case j.selected.key:1==j.selected.enable&&(X&&t.altKey||!X&&t.shiftKey)&&t.ctrlKey&&Ht({innerWidth:window.innerWidth,action:"selected"});break;case j.entire.key:1==j.entire.enable&&(X&&t.altKey||!X&&t.shiftKey)&&t.ctrlKey&&Ht({innerWidth:window.innerWidth,action:"entire"})}}function Ct(){if(V){for(var t=0,e=V.length;t<e;t++){var n=V[t];n.element.style.cssText=n.cssText}V=[]}}function Lt(){_=document.scrollingElement.scrollHeight,S=document.scrollingElement.scrollWidth}function Wt(){return"CSS1Compat"===document.compatMode?document.documentElement.clientHeight:document.body.clientHeight}chrome.runtime.onMessage.addListener((function(t,e,n){switch(t.action){case"update_shortcuts":!function(t){var e=document.body;if(e&&(e.removeEventListener("keydown",Tt,!1),e.addEventListener("keydown",Tt,!1),t.msObj)){var n=t.msObj;for(var i in n=JSON.parse(n))j[i].enable=n[i].enable,j[i].key=n[i].key}}(t);break;case"init_entire_capture":st();break;case"init_selected_capture":!function(){if(!document.body)return;if(u.init(),function(){window.document,window.location.href.match(/https?:\/\/mail.google.com/i)}(),Lt(),!document.getElementById("awesome_screenshot_wrapper")){var t=document.createElement("div");document.body.appendChild(t),t.style.setProperty("position","static","important"),t.innerHTML+=Z}C=document.getElementById("awesome_screenshot_wrapper"),_t(),window.addEventListener("resize",ut,!1),document.body.addEventListener("keydown",ht,!1),C.addEventListener("mousedown",dt,!1),C.addEventListener("touchstart",lt,!1)}();break;case"scroll_next":kt();break;case"fetchPageWidth":n(window.innerWidth);break;case"destroy_selected":Ct(),nt(),vt(),!1;break;case"restorebar":Ct(),nt(),!1;break;case"finishAutoSave":var i="The screenshot has been saved in "+t.path+".";Pt.show("success",i);break;case"tabupdate":case"startCountDown":case"stop-countdown":break;case"stop-entire-capture":Y=!0;break;case"delay":if(document.body){if(null!==K){clearInterval(K),K=null;var o=document.querySelector("#awe_delay_div");o&&o.parentNode.removeChild(o)}var r=document.createElement("div");r.id="awe_delay_div";var s=document.createElement("span");s.innerText=t.sec,r.appendChild(s);var a=document.createElement("div");a.id="awe_delay_cancel",a.innerText="Cancel",r.appendChild(a),document.body.appendChild(r),a.addEventListener("click",(function(){clearInterval(K),K=null,document.body.removeChild(r)}));var c=t.sec?t.sec-1:2;K=setInterval((function(){if(c<=0)return clearInterval(K),K=null,document.body.removeChild(r),void setTimeout((function(){Ht({innerWidth:window.innerWidth,action:"visible"})}),100);s&&(s.innerText=c),c--}),1e3)}else Ht({innerWidth:window.innerWidth,action:"visible"});break;case"copytoclipboard":!function(t){if(t)if("function"==typeof ClipboardItem)fetch(t).then((function(t){return t.blob()})).then((function(t){var e=new ClipboardItem({"image/png":t});navigator.clipboard.write([e]).then((function(){tt(chrome.i18n.getMessage("capture_btn_copy_tip"),"success",1e3)}))}));else{var e=document.createElement("img");document.body.appendChild(e),e.onload=function(){var t=document.createRange();t.selectNode(e);var n=window.getSelection();n.removeAllRanges(),n.addRange(t),document.execCommand("copy",!1,null),tt(chrome.i18n.getMessage("capture_btn_copy_tip"),"success",1e3),document.body.removeChild(e)},e.src=t}}(t.obj)}})),it.prototype={constructor:it,exec:function(){try{"changeCssText"===this.type?(this.cssTextBefore=this.data.element.style.cssText,this.data.element.style.cssText=this.cssTextBefore+";"+function(t){var e="";for(var n in t)e+=n.replace(/([a-zA-Z](?=[A-Z]))/g,"$1-").toLowerCase()+":"+t[n]+" !important;";return e}(this.data.cssObj)):"addStyle"===this.type?(t=this.data.id,e=this.data.css,n=document.head,(i=document.createElement("style")).setAttribute("type","text/css"),i.setAttribute("id",t),i.appendChild(document.createTextNode(e)),n.appendChild(i)):"changeAttr"===this.type&&(this.attrValueBefore=this.data.element[this.data.attrName],this.data.element[this.data.attrName]=this.data.attrValue)}catch(t){}var t,e,n,i},undo:function(){try{"changeCssText"===this.type?this.data.element.style.cssText=this.cssTextBefore:"addStyle"===this.type?et(this.data.id):"changeAttr"===this.type&&(this.data.element[this.data.attrName]=this.attrValueBefore)}catch(t){}}},Ht({action:"check_shortcuts"}),window.addEventListener("load",(function(){Ht({action:"enable_selected"})}),!1);var Pt={notifyBox:null,init:function(){this.create()},create:function(){var t=this;this.notifyBox=document.createElement("div"),this.notifyBox.id="asNotifyBox",this.notifyBox.innerHTML='<img id="as-nitofyIcon"><span id="as-notifyMessage"></span><div id="as-notifyClose"></div>',document.body.appendChild(this.notifyBox),document.getElementById("as-notifyClose").addEventListener("click",(function(){t.hide()}))},show:function(t,e){var n=this;(document.getElementById("asNotifyBox")||this.init(),"success"==t)&&(document.getElementById("as-nitofyIcon").src=chrome.runtime.getURL("")+"images/success.gif");document.getElementById("as-notifyMessage").innerText=e,this.notifyBox.style.display="block",setTimeout((function(){n.notifyBox.style.display="none"}),3e3)},hide:function(){this.notifyBox.style.display="none"}};function Nt(t){var e=[];return t&&t.forEach((function(t){t.sample={x:t.sample.x*window.devicePixelRatio,y:t.sample.y*window.devicePixelRatio,width:t.sample.width*window.devicePixelRatio,height:t.sample.height*window.devicePixelRatio},e.push(t)})),e}function Dt(){W.x=!1,H&&H.scrollNode?W.y=H.scrollNode.scrollHeight+H.scrollNode.offsetTop>window.innerHeight:W.y=document.scrollingElement.scrollHeight>window.innerHeight}function Yt(t){window.parent.postMessage({type:"awsSendBg",message:t},"*")}if(window.addEventListener("message",(function(t){if(t.data){var e=t.data.type;if("initCaptureFrame"==e)st(t.data.parentPage);else if("scrollNext"===e)kt();else if("stopEntireCapture"===e)Y=!0;else if("restorebar"===e)restoreStatus();else if("awsSendBg"===e){(n=t.data.message)&&Ht(n)}else if("checkFrameStatus"===e)window.parent.postMessage({type:"frameResponse"},"*");else if("frameResponse"===e)I=!0,B=!0;else if("shortCuts"===e){var n;(n=t.data.message)&&Tt(n)}}})),/(.*).awesomescreenshot.com/.test(document.location.hostname)){var It=chrome.runtime.getManifest().version,Bt=document.createElement("div");Bt.id="aws-chrome-installed",Bt.style.cssText="display:none !important",Bt.setAttribute("data-version",It),document.body.appendChild(Bt)}window.isContentScriptLoaded=!0})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,