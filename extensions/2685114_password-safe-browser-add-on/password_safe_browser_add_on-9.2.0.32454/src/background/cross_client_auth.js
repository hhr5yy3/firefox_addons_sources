let nativeMessageHost;try{connectNativeMessageHost()}catch(err){console.error("could not connect to native message host",err)}function connectNativeMessageHost(){(nativeMessageHost=chrome.runtime.connectNative("com.netwrix.passwordsecure")).onMessage.addListener(onMessageReceived);sendNativeMessage({Command:"Initialize",ClientType:"BrowserExtension",ClientVersion:browser.runtime.getManifest().version})}function sendNativeMessage(message){null!=nativeMessageHost&&nativeMessageHost.postMessage(message)}function sendNativeMessage_LoginStatusChanged(userLogin,loginStatus,informOtherClients){sendNativeMessage({Command:"LoginStatusChanged",UserLogin:userLogin,LoginStatus:loginStatus,InformOtherClients:informOtherClients})}async function sendNativeMessage_CheckIfConnectionDetailsComplete(databaseProfileId,databaseId,databaseName){}async function onMessageReceived(message){var crossClientAuthActive=await getCrossClientAuthActive();if(crossClientAuthActive)if("LoginWithCredentialData"===message.Command)await LoginWithCredentialData(message.CredentialData);else if("GetCredentialData"===message.Command)try{var credentialData=await GetCredentialData({clientInstanceId:message.ClientInstanceId,clientType:message.ClientType,clientVersion:message.ClientVersion},message.RequestedUserLogin);sendNativeMessage({Command:"Reply",MessageId:message.MessageId,CredentialData:credentialData})}catch(err){console.error("error in GetCredentialData",err),sendNativeMessage({Command:"Reply",CredentialData:null})}else"ShowNotificationCannotLoginWithUserLogin"===message.Command?showNotification(browser.i18n.getMessage("cross_client_auth_no_webapp_url",message.UserLogin.DatabaseName)):"CanLoginWithUserLogin"===message.Command&&(crossClientAuthActive=await CanLoginWithUserLogin(message.UserLogin),sendNativeMessage({Command:"Reply",MessageId:message.MessageId,Result:crossClientAuthActive}))}async function CanLoginWithUserLogin(userLogin){return!!(userLogin.WebClientUrl&&userLogin.DatabaseName&&userLogin.UserName)||null!=await GetMatchingProfileForCredentialData(userLogin)}async function LoginWithCredentialData(credentialData){try{let profile=await GetMatchingProfileForCredentialData(credentialData);if(null==profile){if(!credentialData.WebClientUrl)return void showNotification(browser.i18n.getMessage("cross_client_auth_no_webapp_url",credentialData.DatabaseName));profile=await CreateProfileForCrossClientAuth(credentialData)}else credentialData.WebClientUrl&&credentialData.WebClientUrl!==profile.webClientUrl&&(profile.webClientUrl=credentialData.WebClientUrl,await updateDatabaseProfile(profile));var psrApi=new PsrApi(profile.endpoint),authToken={Database:profile.databaseName,SessionId:credentialData.SessionId,SessionKey:credentialData.SessionKey,EncryptionVersion:credentialData.EncryptionVersion},userKey=credentialData.UserKey.Keys[0],roleKeys=credentialData.UserKey.Keys.slice(1).map(key=>({id:key.Id,privateKey:atob(key.PrivateKey)})),session=(await psrApi.authenticationManagerV2.setSession(authToken,[{id:userKey.Id,privateKey:atob(userKey.PrivateKey)},...roleKeys]),new Session(profile.profileId,profile.databaseId,profile.databaseName,profile.endpoint,credentialData.UserName,null,onSessionExpired,psrApi)),userLogin=(session.color=profile.color,sessions.push(session),await session.init(),await onConnectedToServer(session,!1),{DatabaseProfileId:profile.profileId,DatabaseId:profile.databaseId,DatabaseName:profile.databaseName,UserName:credentialData.UserName,WebClientUrl:profile.webClientUrl,HostIp:null});sendNativeMessage_LoginStatusChanged(userLogin,"LoggedIn",!1),showLoginSucceededNotification(profile.databaseName),await onFinalizeLogin()}catch(err){showNotification(browser.i18n.getMessage("cross_client_auth_login_failed",credentialData.DatabaseName)),console.error("error in LoginWithCredentialData",err)}}async function GetSessionForRequestedSessionFork(requestedUserLogin){let session=null,profiles=await loadDatabaseProfiles();return session=!(session=!(session=!(session=requestedUserLogin.DatabaseProfileId?sessions.find(x=>x.profileId===requestedUserLogin.DatabaseProfileId):session)&&requestedUserLogin.DatabaseProfileId&&requestedUserLogin.DatabaseName?sessions.find(x=>{return!1!=(x.profileId===requestedUserLogin.DatabaseProfileId&&x.databaseName.toLowerCase()===requestedUserLogin.DatabaseName.toLowerCase())&&HasSessionMatchingWebClientUrlWithUserLogin(x,requestedUserLogin,profiles)}):session)&&requestedUserLogin.DatabaseProfileId&&requestedUserLogin.DatabaseName?sessions.find(x=>x.profileId===requestedUserLogin.DatabaseProfileId&&x.databaseName.toLowerCase()===requestedUserLogin.DatabaseName.toLowerCase()):session)&&requestedUserLogin.DatabaseName?sessions.find(x=>{return!1!=(x.databaseName.toLowerCase()===requestedUserLogin.DatabaseName.toLowerCase())&&HasSessionMatchingWebClientUrlWithUserLogin(x,requestedUserLogin,profiles)}):session}function HasSessionMatchingWebClientUrlWithUserLogin(session,requestedUserLogin,profiles){return!(!requestedUserLogin.WebClientUrl||!(profiles=profiles.find(profile=>profile.profileId===session.profileId))||!profiles.webClientUrl||normalizeUrl(profiles.webClientUrl)!==normalizeUrl(requestedUserLogin.WebClientUrl))}async function GetCredentialData(sessionForkParameters,requestedUserLogin){const session=await GetSessionForRequestedSessionFork(requestedUserLogin);var profile,encryptionVersion,userKeys;return null==session?null:(requestedUserLogin=await session.forkSession(sessionForkParameters.clientInstanceId,sessionForkParameters.clientType,sessionForkParameters.clientVersion),userKeys=session.psrApi.authenticationManagerV2.getUserKeys(),profile=(await loadDatabaseProfiles()).find(x=>x.profileId===session.profileId),encryptionVersion=session.psrApi.encryptionManager.encryptionVersion,userKeys={Keys:userKeys.map(key=>({Id:key.id,PrivateKey:btoa(key.privateKey)}))},{SessionId:requestedUserLogin.session.Token.SessionId,SessionKey:requestedUserLogin.session.Token.SessionKey,UserKey:userKeys,ClientType:sessionForkParameters.clientType,ClientInstanceId:sessionForkParameters.clientInstanceId,UserName:requestedUserLogin.session.UserName,AuthOptionList:null,UserHash:null,UserHashSigned:null,ServerPublicKey:null,DatabaseProfileId:profile.profileId,WebClientUrl:profile.webClientUrl,DatabaseId:session.databaseId,DatabaseName:requestedUserLogin.session.Token.Database,HostIp:null,ResolveHost:!0,EncryptionVersion:encryptionVersion})}async function GetMatchingProfileForCredentialData(credentialData){var profiles=await loadDatabaseProfiles();let profile=profiles.find(x=>x.profileId===credentialData.DatabaseProfileId);return profile=(profile=(profile=profile||profiles.find(x=>{var profileUrl,credentialUrl;return!(!x.webClientUrl||!credentialData.WebClientUrl)&&(profileUrl=normalizeUrl(x.webClientUrl),credentialUrl=normalizeUrl(credentialData.WebClientUrl),x.databaseName.toLowerCase()===credentialData.DatabaseName.toLowerCase())&&null!=x.databaseId&&""!=x.databaseId&&x.databaseId===credentialData.DatabaseId&&profileUrl===credentialUrl}))||profiles.find(x=>x.databaseName.toLowerCase()===credentialData.DatabaseName.toLowerCase()&&null!=x.databaseId&&""!=x.databaseId&&x.databaseId===credentialData.DatabaseId))||profiles.find(x=>{var profileUrl,credentialUrl;return!(!x.webClientUrl||!credentialData.WebClientUrl)&&(profileUrl=normalizeUrl(x.webClientUrl),credentialUrl=normalizeUrl(credentialData.WebClientUrl),x.databaseName.toLowerCase()===credentialData.DatabaseName.toLowerCase())&&profileUrl===credentialUrl})}async function CreateProfileForCrossClientAuth(credentialData){let profileId;profileId="00000000-0000-0000-0000-000000000000"==credentialData.DatabaseProfileId?generateUuid():credentialData.DatabaseProfileId;credentialData={color:getRandomColor(),profileId:profileId,databaseId:credentialData.DatabaseId,databaseName:credentialData.DatabaseName,profileName:credentialData.DatabaseName,webClientUrl:credentialData.WebClientUrl,endpoint:getEndpointAddressFromWebClientUrl(credentialData.WebClientUrl)};return await saveDatabaseProfile(credentialData),credentialData}function normalizeUrl(url){return url.replace(/(^\w+:|^)\/\/(www\.)?/,"")}function showLoginSucceededNotification(databaseName){databaseName=browser.i18n.getMessage("cross_client_auth_executed",databaseName);showNotification(databaseName)}function getEndpointAddressFromWebClientUrl(webClientUrl){return webClientUrl&&("/"!==(webClientUrl=0!==(webClientUrl=0===webClientUrl.indexOf("http://")?webClientUrl.split("http://")[1]:webClientUrl).indexOf("https://")?"https://"+value:webClientUrl)[webClientUrl.length-1]&&(webClientUrl+="/"),webClientUrl+"api")}chrome.runtime.onMessage.addListener(function(request,sender,sendResponse){"SendNativeMessage"===request.Command&&sendNativeMessage(request.message)});