(()=>{"use strict";var e,t,r,n,o,i={6767:(e,t,r)=>{r(1211);var n=r(2214),o=(r(9255),r(8648)),i=(r(8727),r(9228)),a=r(7294),s=r(3935),c=(r(4239),r(9676)),l=r(4184),u=r.n(l),d=r(5893);function f(e){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f(e)}function p(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,y(n.key),n)}}function m(e,t,r){return t&&h(e.prototype,t),r&&h(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function y(e){var t=function(e,t){if("object"!=f(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=f(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==f(t)?t:String(t)}function b(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&v(e,t)}function v(e,t){return v=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},v(e,t)}function g(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=w(e);if(t){var o=w(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"===f(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return j(e)}(this,r)}}function j(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function w(e){return w=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},w(e)}var x=function(e){b(r,e);var t=g(r);function r(e){return p(this,r),t.call(this,e)}return m(r,[{key:"shouldComponentUpdate",value:function(e){return e.disabled!==this.props.disabled||this.props.allowAdvancedTool!==e.allowAdvancedTool}},{key:"render",value:function(){var e=this.props,t=e.disabled,r=e.action,n=e.title,o=e.handleClick,i=u()("tool-btn single-btn",{disabled:t}),a=u()(this.props.allowAdvancedTool?"":"pro");return(0,d.jsx)("div",{className:i,"data-action":r,onClick:o.bind(this,"action",{actionType:r}),title:n,children:(0,d.jsx)("b",{className:a})})}}]),r}(a.Component),S=function(e){b(r,e);var t=g(r);function r(e){return p(this,r),t.call(this,e)}return m(r,[{key:"shouldComponentUpdate",value:function(e){return e.current!==this.props.current||this.props.allowAdvancedTool!==e.allowAdvancedTool}},{key:"render",value:function(){var e=this.props,t=e.current,r=e.shape,n=e.title,o=e.handleClick,i=u()("tool-btn single-btn",{active:t===r}),a=u()(this.props.allowAdvancedTool?"":"pro");return(0,d.jsx)("div",{className:i,"data-shape":r,onClick:o.bind(this,"shape",r),title:n,children:(0,d.jsx)("b",{className:a})})}}]),r}(a.Component),O=function(e){b(r,e);var t=g(r);function r(e){var n;return p(this,r),(n=t.call(this,e)).state={currentBtn:n.props.btns[0]},n.handleDropDownBtnClick=n.handleDropDownBtnClick.bind(j(n)),n}return m(r,[{key:"shouldComponentUpdate",value:function(e,t){return t.currentBtn!==this.state.currentBtn||e.current!==this.props.current}},{key:"handleDropDownBtnClick",value:function(e){this.setState({currentBtn:e}),this.props.handleClick("shape",e.shape)}},{key:"render",value:function(){var e=this,t=this.state.currentBtn,r=this.props.btns;return(0,d.jsxs)("div",{className:"tool-btn multi-btn",children:[(0,d.jsx)(S,{title:t.title,shape:t.shape,current:this.props.current,handleClick:this.props.handleClick}),(0,d.jsx)(P,{children:function(t,n){var o=u()("multi-btn-dropdown",{active:t.isExpand}),i=function(t){n(),e.handleDropDownBtnClick(t)};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)("div",{className:"multi-btn-arrow"}),(0,d.jsx)("div",{className:o,children:r.map((function(e){return(0,d.jsx)("div",{className:"tool-btn sub-single-btn","data-shape":e.shape,onClick:i.bind(null,e),children:(0,d.jsx)("b",{})},e.shape)}))})]})}})]})}}]),r}(a.Component),P=function(e){b(r,e);var t=g(r);function r(e){var n;return p(this,r),(n=t.call(this,e)).state={isExpand:!1},n.toggle=n.toggle.bind(j(n)),n.el=(0,a.createRef)(),n}return m(r,[{key:"shouldComponentUpdate",value:function(e,t){return!0}},{key:"toggle",value:function(){this.state.isExpand&&this.el.current.blur(),this.setState({isExpand:!this.state.isExpand})}},{key:"render",value:function(){var e=u()("tool-select",this.props.className);return(0,d.jsx)("div",{className:e,tabIndex:"0",onFocus:this.toggle,onBlur:this.toggle,ref:this.el,children:this.props.children(this.state,this.toggle)})}}]),r}(a.Component),k=r(6700);function C(e){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},C(e)}function N(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,D(n.key),n)}}function D(e){var t=function(e,t){if("object"!=C(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=C(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==C(t)?t:String(t)}function I(e,t){return I=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},I(e,t)}function T(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=A(e);if(t){var o=A(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"===C(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return E(e)}(this,r)}}function E(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function A(e){return A=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},A(e)}var _=["rgb(255, 0, 0)","rgb(152, 0, 0)","rgb(255, 153, 0)","rgb(255, 255, 0)","rgb(0, 255, 0)","rgb(0, 0, 0)","rgb(67, 67, 67)","rgb(102, 102, 102)","rgb(153, 153, 153)","rgb(183, 183, 183)","rgb(204, 204, 204)","rgb(217, 217, 217)","rgb(239, 239, 239)","rgb(243, 243, 243)","rgb(255, 255, 255)","rgb(0, 255, 255)","rgb(74, 134, 232)","rgb(0, 0, 255)","rgb(153, 0, 255)","rgb(255, 0, 255)","rgb(230, 184, 175)","rgb(244, 204, 204)","rgb(252, 229, 205)","rgb(255, 242, 204)","rgb(217, 234, 211)","rgb(208, 224, 227)","rgb(201, 218, 248)","rgb(207, 226, 243)","rgb(217, 210, 233)","rgb(234, 209, 220)","rgb(221, 126, 107)","rgb(234, 153, 153)","rgb(249, 203, 156)","rgb(255, 229, 153)","rgb(182, 215, 168)","rgb(162, 196, 201)","rgb(164, 194, 244)","rgb(159, 197, 232)","rgb(180, 167, 214)","rgb(213, 166, 189)","rgb(204, 65, 37)","rgb(224, 102, 102)","rgb(246, 178, 107)","rgb(255, 217, 102)","rgb(147, 196, 125)","rgb(118, 165, 175)","rgb(109, 158, 235)","rgb(111, 168, 220)","rgb(142, 124, 195)","rgb(194, 123, 160)","rgb(166, 28, 0)","rgb(204, 0, 0)","rgb(230, 145, 56)","rgb(241, 194, 50)","rgb(106, 168, 79)","rgb(69, 129, 142)","rgb(60, 120, 216)","rgb(61, 133, 198)","rgb(103, 78, 167)","rgb(166, 77, 121)","rgb(133, 32, 12)","rgb(153, 0, 0)","rgb(180, 95, 6)","rgb(191, 144, 0)","rgb(56, 118, 29)","rgb(19, 79, 92)","rgb(17, 85, 204)","rgb(11, 83, 148)","rgb(53, 28, 117)","rgb(116, 27, 71)","rgb(91, 15, 0)","rgb(102, 0, 0)","rgb(120, 63, 4)","rgb(127, 96, 0)","rgb(39, 78, 19)","rgb(12, 52, 61)","rgb(28, 69, 135)","rgb(7, 55, 99)","rgb(32, 18, 77)","rgb(76, 17, 48)"],Z=[2,4,6,8,16],U=[14,18,24,36,48],L=[{title:"Rectangle",shape:"rect"},{title:"Ellipse",shape:"ellipse"}],M=[{title:"Line Arrow",shape:"line_arrow"},{title:"Bezier Arrow",shape:"bezier_arrow"},{title:"Line",shape:"line"},{title:"Big Head Arrow",shape:"big_head_arrow"}],R=["Times New Roman","Arial","Craft Girls","Limelight","Lobster","Anton","Chewy","Frijole","Spirax","Dancing Script","Changa One","Griffy"],F=["windows-cursor","cursor","cursor-hand","cursor-hand-black","cursor-click","smile","cry","tick-off","cross","forbidden","warning","q-mark","like","heart","star","chicken","dog","rain","sun","cloud","thunder","fish","fish2","tree1","tree2","building1","building2","package","tent","umbrella","car","basketball","beer"],B=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&I(e,t)}(i,e);var t,r,n,o=T(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).handleCropDemensionChange=t.handleCropDemensionChange.bind(E(t)),t}return t=i,(r=[{key:"handleCropDemensionChange",value:function(e,t){""===t.target.value&&(t.target.value=0),this.props.handleToolBarBtnClick("action",{actionType:"crop-demension-"+e,value:t.target.value})}},{key:"render",value:function(){var e=this,t=this.props,r=t.handleToolBarBtnClick,n=t.handleResizeInputChange,o=t.handleResizeProportionChange,i=t.getResizeInfo,a=t.currentTool,s=t.currentScale,l=t.isShowScaleTip,f=t.cropWidth,p=t.cropHeight,h=t.resizeWidth,m=t.resizeHeight,y=t.resizeProportional,b=t.canUndo,v=t.canRedo,g=t.canClear,j=t.canDeleteSelected,w=t.finishEdit,C=t.isTextBackground,N=t.handleTextBgChange,D=t.handleResetList,I=100*s+"%",T=(u()("zoom-tip",{active:l}),function(){if("Text"===a){var t=C?"bg":"";return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(P,{className:"tool-font-family multi-btn",children:function(t,r){var n=u()("panel",{active:t.isExpand}),o=function(t){r(),e.props.handleToolBarBtnClick("action",{actionType:"changeFontFamily",value:t})};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)("div",{className:"tool-current-font-family current",id:"tool-current-font-family","data-ff":e.props.currentFontFamily,children:[(0,d.jsx)("span",{children:e.props.currentFontFamily}),(0,d.jsx)("div",{className:"btn-down-arrow"})]}),(0,d.jsx)("div",{className:n,children:R.map((function(t){return(0,d.jsx)("div",{className:"font-f-item","data-ff":t,onClick:o.bind(e,t),children:t},t)}))})]})}}),(0,d.jsx)(P,{className:"tool-font-size multi-btn",children:function(t,r){var n=u()("panel",{active:t.isExpand}),o=function(t){r(),e.props.handleToolBarBtnClick("action",{actionType:"changeFontSize",value:t})};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)("div",{className:"tool-current-font-size current","data-fs":e.props.currentFontSize,id:"tool-current-font-size",children:[e.props.currentFontSize,"px",(0,d.jsx)("div",{className:"btn-down-arrow"})]}),(0,d.jsx)("div",{className:n,children:U.map((function(t){return(0,d.jsxs)("div",{className:"font-s-item","data-fs":t,onClick:o.bind(e,t),children:[t,"px"]},t)}))})]})}}),(0,d.jsx)("div",{className:"single-btn text-bg-option-btn ".concat(t),onClick:N,children:(0,d.jsx)("span",{children:"A"})})]})}return"list"===a?(0,d.jsx)("div",{className:"tool-select tool-restart-sequence",children:(0,d.jsx)("div",{onClick:D,children:"Restart Sequence"})}):(0,d.jsx)(P,{className:"tool-pen-width multi-btn",children:function(t,r){var n=u()("panel",{active:t.isExpand}),o=function(t){r(),e.props.handleToolBarBtnClick("action",{actionType:"changePenWidth",value:t})};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)("div",{className:"current",id:"tool-current-width","data-width":e.props.currentPenWidth,children:[(0,d.jsxs)("div",{className:"tool-current-width",children:[(0,d.jsxs)("span",{children:[e.props.currentPenWidth,"px"]}),(0,d.jsx)("b",{})]}),(0,d.jsx)("div",{className:"btn-down-arrow"})]}),(0,d.jsx)("div",{className:n,children:Z.map((function(t){return(0,d.jsxs)("div",{className:"pen-width-item","data-width":t,onClick:o.bind(e,t),children:[(0,d.jsxs)("span",{children:[t,"px"]}),(0,d.jsx)("b",{})]},t)}))})]})}})});return(0,d.jsx)("div",{className:"toolbar active",children:this.props.isInCropMode?(0,d.jsxs)("div",{className:"crop-area",children:[(0,d.jsx)("div",{className:"tool-action-btn primary-btn",id:"crop-btn",onClick:r.bind(e,"action",{actionType:"doCrop"}),children:"Crop"}),(0,d.jsx)("div",{className:"tool-action-btn",id:"crop-cancel-btn",onClick:r.bind(e,"action",{actionType:"leaveCrop"}),children:"Cancel"}),(0!==f||0!==p)&&(0,d.jsxs)("div",{id:"crop-dimension",children:[(0,d.jsxs)("div",{children:["Width:",(0,d.jsx)("input",{type:"text",id:"cd-width",className:"cd-input",onChange:e.handleCropDemensionChange.bind(null,"width"),value:f})]}),(0,d.jsxs)("div",{children:["Height:",(0,d.jsx)("input",{id:"cd-height",type:"text",className:"cd-input",onChange:e.handleCropDemensionChange.bind(null,"height"),value:p})]})]})]}):(0,d.jsxs)("div",{className:"tools",children:["ext"!==e.props.type&&(0,d.jsx)("div",{className:"back-btn",onClick:e.props.handleBack,children:(0,d.jsx)(k.Z,{})}),(0,d.jsx)(P,{className:"resize",children:function(e,t){var a=u()("panel",{active:e.isExpand});return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)("div",{className:"tool-btn resize-btn",id:"resize-btn",onClick:i,children:(0,d.jsx)("b",{})}),(0,d.jsxs)("div",{className:a,children:[(0,d.jsxs)("div",{className:"row",children:[(0,d.jsx)("span",{children:"Width:"}),(0,d.jsx)("input",{type:"number",id:"resize-width",min:"1",max:"5000",value:h,onChange:n.bind(null,"width")}),"px"]}),(0,d.jsxs)("div",{className:"row",children:[(0,d.jsx)("span",{children:"Height:"}),(0,d.jsx)("input",{type:"number",id:"resize-height",min:"1",max:"5000",value:m,onChange:n.bind(null,"height")}),"px"]}),(0,d.jsx)("div",{className:"row",children:(0,d.jsx)("label",{htmlFor:"resize-proportional",children:(0,d.jsx)(c.Z,{checked:y,onChange:o,children:"Proportional"})})}),(0,d.jsxs)("div",{className:"row",children:[(0,d.jsx)("div",{className:"do-resize-btn",id:"do-resize-btn",onClick:function(e){t(),r("action",{actionType:"doResize"})},children:"Resize"}),(0,d.jsx)("div",{className:"resize-cancel",id:"resize-cancel",onClick:t,children:"Cancel"})]})]})]})}}),(0,d.jsx)(x,{title:"Crop",action:"crop",handleClick:r}),(0,d.jsx)("div",{className:"tool-sep"}),(0,d.jsx)(S,{title:"Pen",shape:"curve",current:a,handleClick:r}),(0,d.jsx)(O,{btns:L,current:a,handleClick:r}),(0,d.jsx)(O,{btns:M,current:a,handleClick:r}),(0,d.jsx)(S,{title:"Text",shape:"Text",current:a,handleClick:r}),(0,d.jsx)(S,{title:"Blur",shape:"rect_blur",current:a,handleClick:r}),(0,d.jsx)(S,{title:"Highlight",shape:"highlight",current:a,handleClick:r}),(0,d.jsxs)("div",{className:"advanced-tool",children:[(0,d.jsx)(S,{title:"Callout",shape:"callout",current:a,handleClick:r,allowAdvancedTool:e.props.allowAdvancedTool}),(0,d.jsx)(S,{title:"Step",shape:"list",current:a,handleClick:r,allowAdvancedTool:e.props.allowAdvancedTool}),(0,d.jsx)(P,{className:"tool-image-picker",children:function(t,n){var o=u()("panel",{active:t.isExpand}),i=function(e){n(),r("action",{actionType:"doInsertImage",value:e})},a=u()(e.props.allowAdvancedTool?"":"pro");return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)("div",{className:"image-btn",id:"image-btn",children:[(0,d.jsx)("b",{className:a}),(0,d.jsx)("div",{className:"image-btn-arrow"})]}),(0,d.jsx)("div",{className:o,children:(0,d.jsx)("div",{className:"panel-container",children:F.map((function(t,r){if("web"===e.props.type)var n="/images/svg/"+t+".svg";else n="./images/svg/"+t+".svg";return(0,d.jsx)("div",{className:"image-item",onClick:i.bind(null,t),children:(0,d.jsx)("img",{src:n,alt:""})},t)}))})})]})}}),(0,d.jsx)(x,{title:"Image",action:"insert-image",handleClick:r,allowAdvancedTool:e.props.allowAdvancedTool})]}),(0,d.jsx)("div",{className:"tool-sep"}),(0,d.jsx)(P,{className:"tool-color-picker multi-btn",children:function(t,n){var o=u()("panel",{active:t.isExpand}),i=function(e){n(),r("action",{actionType:"changeColor",value:e})};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)("div",{className:"tool-current-color current",id:"tool-current-color",style:{backgroundColor:e.props.currentColor},"data-color":e.props.currentColor}),(0,d.jsx)("div",{className:"multi-btn-arrow"}),(0,d.jsx)("div",{className:o,children:_.map((function(t){return(0,d.jsx)("div",{className:"color-item","data-color":t,style:{backgroundColor:t,borderColor:(r=t,"rgb(239, 239, 239)"===r||"rgb(243, 243, 243)"===r||"rgb(255, 255, 255)"===r||"rgb(252, 229, 205)"===r||"rgb(255, 242, 204)"===r?"#bdc1c6":"transparent")},onClick:i.bind(e,t)},t);var r}))})]})}}),T(),(0,d.jsx)("div",{className:"tool-sep"}),(0,d.jsx)(x,{title:"Undo",action:"undo",disabled:!b,handleClick:r}),(0,d.jsx)(x,{title:"Redo",action:"redo",disabled:!v,handleClick:r}),(0,d.jsx)(x,{title:"Clear",action:"clear",disabled:!g,handleClick:r}),(0,d.jsx)(x,{title:"Delete Selected",action:"deleteSelected",disabled:!j,handleClick:r}),(0,d.jsx)("div",{className:"tool-sep"}),(0,d.jsx)("div",{className:"zoom-area",children:(0,d.jsx)(P,{children:function(e,t){return u()("zoom-tip",{active:e.isExpand}),(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(x,{title:"Zoom out",action:"zoom-out",handleClick:r}),(0,d.jsx)("span",{className:"zoom-level",children:I}),(0,d.jsx)(x,{title:"Zoom in",action:"zoom-in",handleClick:r})]})}})}),(0,d.jsx)("div",{className:"tool-action-btn primary-btn",id:"save-btn",onClick:w,children:"web"===e.props.type?"Save":"Done"}),"web"!==e.props.type&&!e.props.isReported&&("entire"===e.props.menuType||"selected"===e.props.menuType)&&(0,d.jsxs)("div",{className:"quick-issue",children:["Not properly captured?",(0,d.jsx)("a",{onClick:e.props.quickReport,children:" Report a problem."})]})]})})}}])&&N(t.prototype,r),n&&N(t,n),Object.defineProperty(t,"prototype",{writable:!1}),i}(a.PureComponent);const H=B;var V={slack:{displayName:"Slack",targetName:"Channel",placeHolder:"Choose a channel or user",panelTitle:"Send message",actionTypeStr:"Sending message",successMsg:"Slack message sent!",panelSubTitle:"Send screenshots to Slack",featureLists:["Send screenshots to Slack Channel","Send screenshots to Slack direct messages","Attach URL of the screenshot automatically"]},trello:{displayName:"Trello",targetName:"Board",placeHolder:"Choose a board",panelTitle:"Create card",actionTypeStr:"Creating card",successMsg:"Trello card created!",panelSubTitle:"Send screenshots as Trello cards",featureLists:["Create a trello card and attach the screenshot directly","Assign the card to members","Set due date and time","Include browser & OS info to help identify the issue"]},asana:{displayName:"Asana",targetName1:"Workspace",targetName2:"Project",placeHolder1:"Choose a workspace",placeHolder2:"Choose a project",panelTitle:"Create task",actionTypeStr:"Creating task",successMsg:"Asana task created!",panelSubTitle:"Send screenshots as Asana task",featureLists:["Send screenshots to Asana task","Create an Asana task and attach the screenshot directly","Assign the card to members","Choose Sections","Set due date and time","Include browser & OS info to help identify the issue"]},jira:{displayName:"Jira",targetName1:"Site",targetName2:"Project",placeHolder1:"Choose a site",placeHolder2:"Choose a project",panelTitle:"Create issue",actionTypeStr:"Creating issue",successMsg:"Jira issue created!",panelSubTitle:"Send screenshots as Jira issue",featureLists:["Create a Jira issue and attach the screenshot directly","Assign the card to members","Include browser & OS info to help identify the issue"]},googleDrive:{displayName:"Google Drive",targetName:"Folder",placeHolder:"Choose a folder",panelTitle:"Upload image",actionTypeStr:"Uploading image",successMsg:"Google Drive image uploaded!",panelSubTitle:"Save screenshots to Google Drive",featureLists:["Save screenshots to Google Drive folders directly"]},dropbox:{displayName:"Dropbox",targetName:"Folder",placeHolder:"Choose a folder",panelTitle:"Upload image",actionTypeStr:"Uploading image",successMsg:"Dropbox image uploaded!",panelSubTitle:"Save screenshots to Dropbox",featureLists:["Save screenshots to Dropbox folders directly"]},box:{displayName:"Box",targetName:"Folder",placeHolder:"Choose a folder",panelTitle:"Upload image",actionTypeStr:"Uploading image",successMsg:"Box image uploaded!",panelSubTitle:"Save screenshots to Box",featureLists:["Save screenshots to Box folders directly"]},github:{displayName:"Github",targetName:"Repository",placeHolder:"Choose a repository",panelTitle:"Create issue",actionTypeStr:"Creating issue",successMsg:"Github issue created!",panelSubTitle:"Send screenshots as Github issue",featureLists:["Send screenshots to Slack Channel","Send screenshots to Slack direct messages","Attach URL of the screenshot automatically"]}},Y={channel:"#",repo:"",user:"@",board:"",project:"",folder:""},G=[{name:"slack",displayName:"Slack"},{name:"asana",displayName:"Asana"},{name:"trello",displayName:"Trello"},{name:"github",displayName:"Github"},{name:"jira",displayName:"Jira"}],q=[{name:"googleDrive",displayName:"Google Drive"},{name:"dropbox",displayName:"Dropbox"},{name:"box",displayName:"Box"}],W=["callout","list"],J=(r(2648),r(1577));const K=r.p+"images/image_premium.png",Q=r.p+"images/callout_premium.png",X=r.p+"images/step_premium.png",ee=r.p+"images/local-image_premium.png";var te=r(6165);function re(e){return re="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},re(e)}function ne(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function oe(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ne(Object(r),!0).forEach((function(t){ie(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ne(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function ie(e,t,r){return t=function(e){var t=function(e,t){if("object"!=re(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=re(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==re(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function ae(e){return ae="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ae(e)}function se(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function ce(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?se(Object(r),!0).forEach((function(t){le(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):se(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function le(e,t,r){return t=function(e){var t=function(e,t){if("object"!=ae(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=ae(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==ae(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function ue(e){return ue="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ue(e)}function de(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function fe(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?de(Object(r),!0).forEach((function(t){pe(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):de(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function pe(e,t,r){return t=function(e){var t=function(e,t){if("object"!=ue(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=ue(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==ue(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function he(e){return he="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},he(e)}function me(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function ye(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?me(Object(r),!0).forEach((function(t){be(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):me(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function be(e,t,r){return t=function(e){var t=function(e,t){if("object"!=he(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=he(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==he(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function ve(e){return ve="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ve(e)}function ge(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function je(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ge(Object(r),!0).forEach((function(t){we(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ge(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function we(e,t,r){return t=function(e){var t=function(e,t){if("object"!=ve(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=ve(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==ve(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function xe(e){return xe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},xe(e)}function Se(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Oe(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Se(Object(r),!0).forEach((function(t){Pe(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Se(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Pe(e,t,r){return t=function(e){var t=function(e,t){if("object"!=xe(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=xe(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==xe(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function ke(e){return ke="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ke(e)}function Ce(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Ne(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Ce(Object(r),!0).forEach((function(t){De(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Ce(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function De(e,t,r){return t=function(e){var t=function(e,t){if("object"!=ke(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=ke(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==ke(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Ie(e){return Ie="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ie(e)}function Te(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Ee(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Te(Object(r),!0).forEach((function(t){Ae(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Te(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Ae(e,t,r){return t=function(e){var t=function(e,t){if("object"!=Ie(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=Ie(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==Ie(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function _e(e){return _e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_e(e)}function Ze(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Ue(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Ze(Object(r),!0).forEach((function(t){Le(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Ze(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Le(e,t,r){return t=function(e){var t=function(e,t){if("object"!=_e(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=_e(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==_e(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Me(e){return Me="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Me(e)}function Re(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function ze(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Re(Object(r),!0).forEach((function(t){Fe(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Re(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Fe(e,t,r){return t=function(e){var t=function(e,t){if("object"!=Me(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=Me(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==Me(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Be(e){return Be="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Be(e)}function He(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Ve(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?He(Object(r),!0).forEach((function(t){Ye(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):He(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Ye(e,t,r){return t=function(e){var t=function(e,t){if("object"!=Be(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=Be(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==Be(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Ge(e){return Ge="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ge(e)}function qe(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function We(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?qe(Object(r),!0).forEach((function(t){$e(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):qe(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function $e(e,t,r){return t=function(e){var t=function(e,t){if("object"!=Ge(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=Ge(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==Ge(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Je(e){return Je="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Je(e)}function Ke(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Qe(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Ke(Object(r),!0).forEach((function(t){Xe(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Ke(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Xe(e,t,r){return t=function(e){var t=function(e,t){if("object"!=Je(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=Je(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==Je(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function et(e){return et="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},et(e)}function tt(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function rt(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?tt(Object(r),!0).forEach((function(t){nt(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):tt(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function nt(e,t,r){return t=function(e){var t=function(e,t){if("object"!=et(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=et(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==et(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function ot(e){return ot="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ot(e)}function it(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function at(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?it(Object(r),!0).forEach((function(t){st(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):it(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function st(e,t,r){return t=function(e){var t=function(e,t){if("object"!=ot(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=ot(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==ot(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function ct(e){return ct="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ct(e)}function lt(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function ut(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?lt(Object(r),!0).forEach((function(t){dt(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):lt(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function dt(e,t,r){return t=function(e){var t=function(e,t){if("object"!=ct(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=ct(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==ct(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function ft(e){return ft="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ft(e)}function pt(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function ht(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?pt(Object(r),!0).forEach((function(t){mt(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):pt(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function mt(e,t,r){return t=function(e){var t=function(e,t){if("object"!=ft(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=ft(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==ft(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function yt(e){return yt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},yt(e)}function bt(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function vt(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?bt(Object(r),!0).forEach((function(t){gt(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):bt(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function gt(e,t,r){return t=function(e){var t=function(e,t){if("object"!=yt(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=yt(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==yt(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function jt(e){return jt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},jt(e)}function wt(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function xt(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?wt(Object(r),!0).forEach((function(t){St(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):wt(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function St(e,t,r){return t=function(e){var t=function(e,t){if("object"!=jt(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=jt(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==jt(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Ot(e){return Ot="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ot(e)}function Pt(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function kt(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Pt(Object(r),!0).forEach((function(t){Ct(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Pt(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Ct(e,t,r){return t=function(e){var t=function(e,t){if("object"!=Ot(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=Ot(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==Ot(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Nt(e){return Nt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Nt(e)}function Dt(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function It(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Dt(Object(r),!0).forEach((function(t){Tt(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Dt(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Tt(e,t,r){return t=function(e){var t=function(e,t){if("object"!=Nt(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=Nt(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==Nt(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Et(e){return Et="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Et(e)}function At(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function _t(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?At(Object(r),!0).forEach((function(t){Zt(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):At(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Zt(e,t,r){return t=function(e){var t=function(e,t){if("object"!=Et(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=Et(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==Et(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Ut(e){return Ut="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ut(e)}function Lt(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Mt(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Lt(Object(r),!0).forEach((function(t){Rt(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Lt(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Rt(e,t,r){return t=function(e){var t=function(e,t){if("object"!=Ut(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=Ut(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==Ut(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function zt(e){return zt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},zt(e)}function Ft(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Bt(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Ft(Object(r),!0).forEach((function(t){Ht(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Ft(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Ht(e,t,r){return t=function(e){var t=function(e,t){if("object"!=zt(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=zt(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==zt(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Vt(e){return Vt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Vt(e)}function Yt(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Gt(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Yt(Object(r),!0).forEach((function(t){qt(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Yt(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function qt(e,t,r){return t=function(e){var t=function(e,t){if("object"!=Vt(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=Vt(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==Vt(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Wt(e){return Wt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Wt(e)}function $t(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Jt(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?$t(Object(r),!0).forEach((function(t){Kt(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):$t(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Kt(e,t,r){return t=function(e){var t=function(e,t){if("object"!=Wt(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=Wt(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==Wt(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Qt(e){return Qt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Qt(e)}function Xt(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function er(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Xt(Object(r),!0).forEach((function(t){tr(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Xt(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function tr(e,t,r){return t=function(e){var t=function(e,t){if("object"!=Qt(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=Qt(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==Qt(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function rr(e){return rr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},rr(e)}function nr(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function or(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?nr(Object(r),!0).forEach((function(t){ir(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):nr(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function ir(e,t,r){return t=function(e){var t=function(e,t){if("object"!=rr(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=rr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==rr(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function ar(e){return ar="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ar(e)}function sr(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function cr(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?sr(Object(r),!0).forEach((function(t){lr(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):sr(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function lr(e,t,r){return t=function(e){var t=function(e,t){if("object"!=ar(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=ar(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==ar(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function ur(e){return ur="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ur(e)}function dr(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function fr(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?dr(Object(r),!0).forEach((function(t){pr(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):dr(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function pr(e,t,r){return t=function(e){var t=function(e,t){if("object"!=ur(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=ur(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==ur(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function hr(e){return hr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},hr(e)}function mr(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function yr(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?mr(Object(r),!0).forEach((function(t){br(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):mr(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function br(e,t,r){return t=function(e){var t=function(e,t){if("object"!=hr(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=hr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==hr(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function vr(e){return vr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},vr(e)}function gr(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function jr(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?gr(Object(r),!0).forEach((function(t){wr(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):gr(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function wr(e,t,r){return t=function(e){var t=function(e,t){if("object"!=vr(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=vr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==vr(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function xr(e){return(0,d.jsx)(te.Z,jr(jr({},e),{},{className:"svg-icon"}))}var Sr={AddImageIcon:function(e){return(0,d.jsx)("svg",oe(oe({className:"add_image_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1097 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:(0,d.jsx)("path",{d:"M877.714 576a45.714 45.714 0 0 1 45.715 45.714v128h128a45.714 45.714 0 1 1 0 91.429H923.41l.019 128a45.714 45.714 0 1 1-91.429 0l-.018-128H704a45.714 45.714 0 1 1 0-91.429h128v-128A45.714 45.714 0 0 1 877.714 576zM865.957 0a85.029 85.029 0 0 1 60.032 24.777 84.498 84.498 0 0 1 24.758 55.37l.11 4.48v468.077a100.297 100.297 0 0 0-73.143-31.561l-4.04.073a100.571 100.571 0 0 0-83.804 51.474l-76.6-51.383a20.224 20.224 0 0 0-19.84-1.188l-2.303 1.316-140.178 96.915v.11L302.446 374.106a19.749 19.749 0 0 0-20.407-1.334l-2.085 1.261-176.329 183.223V776.32h501.632a101.351 101.351 0 0 0-1.81 19.109l.073 4.04a100.462 100.462 0 0 0 42.697 78.264l-561.316-.019a84.773 84.773 0 0 1-84.81-80.75L0 793.089V84.626A84.754 84.754 0 0 1 81.006.091L84.9 0h781.056zm-152.32 167.296c-54.547 1.006-99.054 45.33-100.06 99.73a101.522 101.522 0 0 0 29.86 73.838 102.199 102.199 0 0 0 74.058 29.77c54.564-1.007 99.017-45.386 100.078-99.75a101.522 101.522 0 0 0-29.88-73.819 102.199 102.199 0 0 0-74.056-29.769z"})}))},AddIcon:function(e){return(0,d.jsx)("svg",ce(ce({className:"add_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1024 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:(0,d.jsx)("path",{d:"M512 0a64 64 0 0 1 64 64v384h384a64 64 0 1 1 0 128H576v384a64 64 0 1 1-128 0V576H64a64 64 0 1 1 0-128h384V64a64 64 0 0 1 64-64z"})}))},AnnotateIcon:function(e){return(0,d.jsx)("svg",fe(fe({className:"annotate_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1024 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:(0,d.jsx)("path",{d:"M847.246 28.444c77.483 0 140.857 61.327 145.806 138.81l.342 9.841v64.569l-94.777 96.313.057-160.882a52.053 52.053 0 0 0-44.942-51.94l-6.486-.398H146.148a51.769 51.769 0 0 0-51.03 45.739l-.455 6.6v380.756l10.923 9.103c144.782 118.556 265.33 126.065 375.637 25.6l9.956-9.387 10.638-10.638c107.747-112.299 179.37-151.325 312.49-112.64l-80.782 82.09c-69.575-5.347-82.033 21.903-142.45 76.8l-10.41 9.842-11.093 11.15C431.9 783.246 270.677 796.73 98.987 681.244l-4.324-2.958v168.619c0 26.738 19.684 48.697 45.056 51.94l6.429.398h701.098a51.769 51.769 0 0 0 51.03-45.739l.398-6.6-.114-177.379 94.777-96.313v273.693c0 78.848-60.302 143.303-136.533 148.31l-9.558.34H146.148C68.665 995.556 5.234 934.23.284 856.748L0 846.848V177.095C0 98.247 60.302 33.792 136.533 28.785l9.671-.34zm92.388 375.752a48.81 48.81 0 0 1 69.916 0c19.286 19.626 19.286 51.484 0 71.11L624.754 866.589a48.81 48.81 0 0 1-69.917 0 50.859 50.859 0 0 1 0-71.054zM343.78 229.376c80.725 0 146.147 66.56 146.147 148.65s-65.422 148.651-146.204 148.651c-80.669 0-146.091-66.56-146.091-148.65s65.422-148.651 146.148-148.651zm0 96.313c-28.445 0-51.485 23.438-51.485 52.338s23.04 52.337 51.485 52.337 51.427-23.438 51.427-52.337a51.883 51.883 0 0 0-51.427-52.338z"})}))},ArrowIcon:function(e){return(0,d.jsx)("svg",ye(ye({className:"arrow_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1024 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:(0,d.jsx)("path",{d:"M717.664 458.24a48.896 48.896 0 0 0-35.413 16.384L270.944 928.427a60.672 60.672 0 0 0-.597 79.018A47.445 47.445 0 0 0 305.675 1024a47.36 47.36 0 0 0 35.584-16.043L752.651 554.24a60.587 60.587 0 0 0 .512-79.019 43.69 43.69 0 0 0-35.413-16.981zM310.88 0a48.981 48.981 0 0 0-35.413 16.384 60.587 60.587 0 0 0-.512 79.019l407.296 458.24a47.445 47.445 0 0 0 35.328 16.554 47.36 47.36 0 0 0 35.584-15.957 60.672 60.672 0 0 0 .512-79.019L346.38 16.981A47.019 47.019 0 0 0 310.88 0z"})}))},CloseIcon:function(e){return(0,d.jsx)("svg",je(je({className:"close_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1024 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:(0,d.jsx)("path",{d:"M591.318 511.96 1008.14 94.97a54.61 54.61 0 0 0 0-76.88l-2.303-2.304a54.61 54.61 0 0 0-76.794 0L512.22 433.46 95.313 15.87a54.61 54.61 0 0 0-76.708 0l-2.39 2.049a53.585 53.585 0 0 0 0 76.794L433.209 511.96 16.216 929.209a54.61 54.61 0 0 0 0 76.794l2.303 2.218a54.61 54.61 0 0 0 76.794 0L512.22 591.06l416.907 417.248a54.61 54.61 0 0 0 76.709 0l2.303-2.39a54.61 54.61 0 0 0 0-76.794L591.147 511.79l.086.17z"})}))},CommentIcon:function(e){return(0,d.jsx)("svg",Oe(Oe({className:"comment_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1105 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:(0,d.jsx)("path",{d:"M1026.95 0H78.996A79.23 79.23 0 0 0 0 78.996v670.295a79.23 79.23 0 0 0 78.996 78.996h274.931l172.508 185.086a39.498 39.498 0 0 0 53.545.234l174.038-185.37h272.932a79.23 79.23 0 0 0 78.996-78.996V78.996A79.23 79.23 0 0 0 1026.95 0zm-19.749 729.542h-253.22a98.745 98.745 0 0 0-71.997 31.166L553.479 897.606 426.172 760.98a98.745 98.745 0 0 0-72.245-31.438H98.745V98.745h908.456zM236.643 433.565a79.008 79.008 0 1 0 158.017 0 79.008 79.008 0 1 0-158.017 0ZM474.325 439.124a79.008 79.008 0 1 0 157.619-11.215 79.008 79.008 0 1 0-157.619 11.215ZM712.17 439.103a79.008 79.008 0 1 0 157.619-11.215 79.008 79.008 0 1 0-157.619 11.215Z"})}))},CopyLinkIcon:function(e){return(0,d.jsx)("svg",Ne(Ne({className:"copy_link_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1024 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:(0,d.jsx)("path",{d:"M278.122 746.485a55.645 55.645 0 0 0 78.699 0l387.612-387.612a55.645 55.645 0 0 0 0-78.699 55.645 55.645 0 0 0-78.699 0L278.122 667.786a55.645 55.645 0 0 0 0 78.7zm258.53-50.83L336.588 895.72a86.081 86.081 0 0 1-121.596 0l-86.597-86.643a85.978 85.978 0 0 1 0-121.584L330.156 485.73a51.587 51.587 0 1 0-72.955-72.956L55.439 614.537a189.152 189.152 0 0 0 0 267.496l86.608 86.654a189.358 189.358 0 0 0 267.496 0L609.608 768.61a51.587 51.587 0 0 0-72.955-72.955zm432.104-553.62-86.643-86.63a189.152 189.152 0 0 0-267.495 0L412.856 257.165a51.587 51.587 0 0 0 72.966 72.99l201.762-201.762a85.978 85.978 0 0 1 121.585 0l86.643 86.632a86.081 86.081 0 0 1 0 121.596l-200.077 200.03a51.587 51.587 0 0 0 72.955 72.956l200.066-200.065c73.746-73.747 73.746-193.75 0-267.507z"})}))},CopyIcon:function(e){return(0,d.jsx)("svg",Ee(Ee({className:"copy_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1024 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:(0,d.jsx)("path",{d:"M744.448 0c15.076 0 29.582 5.404 40.22 15.019l194.22 174.762a48.754 48.754 0 0 1 16.668 36.239V716.8c0 56.548-50.916 102.4-113.778 102.4H809.7v102.4c0 56.548-50.916 102.4-113.778 102.4h-553.7c-62.862 0-113.778-45.852-113.778-102.4V256c0-56.548 50.916-102.4 113.778-102.4H256v-51.2C256 45.852 306.916 0 369.778 0h374.67zM256 240.64H142.222c-8.078 0-14.848 5.063-16.611 11.833l-.455 3.527v665.6c0 7.282 5.632 13.369 13.14 14.962l3.926.398h553.7c8.078 0 14.848-5.063 16.611-11.833l.455-3.527V819.2h-343.21C306.916 819.2 256 773.348 256 716.8V240.64zm471.95-153.6H369.778c-8.078 0-14.848 5.063-16.612 11.833l-.455 3.527v614.4c0 7.282 5.632 13.369 13.141 14.962l3.926.398h512c8.078 0 14.848-5.063 16.611-11.833l.455-3.527V240.868L727.95 87.04z"})}))},DownloadIcon:function(e){return(0,d.jsx)("svg",Ue(Ue({className:"download_mp4_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1024 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:(0,d.jsx)("path",{d:"M80.448 667.52a54.208 54.208 0 0 1 51.136 0c14.016 7.616 23.424 20.928 25.6 35.904l.448 6.528V855.04c0 7.872 6.016 14.592 14.336 16.384l4.352.448h671.36c8.96 0 16.32-5.632 18.24-12.992l.448-3.84V709.952c0-17.6 10.048-33.728 26.048-42.432a54.208 54.208 0 0 1 51.2 0c14.016 7.616 23.36 20.928 25.536 35.904l.448 6.528v210.816c0 24.832-19.52 45.12-44.608 48.384l-7.04.448H106.048c-25.984 0-47.68-18.304-51.136-42.24l-.448-6.592V709.952c0-17.6 9.984-33.728 26.048-42.432zM512.64 54.4c25.472 0 46.912 17.472 51.008 40.96l.64 6.656V565.12l174.4-163.072a53.952 53.952 0 0 1 60.544-8.32l6.272 3.712 5.76 4.672a46.912 46.912 0 0 1 4.672 64.512l-4.672 5.056-262.4 245.184a53.504 53.504 0 0 1-66.304 4.992l-6.208-4.928-262.4-245.248a47.552 47.552 0 0 1-13.504-47.552 50.304 50.304 0 0 1 36.608-34.432 54.08 54.08 0 0 1 43.52 7.68l5.952 4.736 174.464 163.136V101.632a49.536 49.536 0 0 1 38.272-45.568l6.592-1.28 6.784-.384z"})}))},EmbedIcon:function(e){return(0,d.jsx)("svg",ze(ze({className:"embed_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1408 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:(0,d.jsx)("path",{d:"M792.796 59.52c14.464-40 61.504-58.176 104.96-47.232 43.392 10.88 68.736 54.4 54.272 90.816l-336.64 860.928c-10.88 32.64-43.392 50.816-79.616 50.816-7.232 0-18.112 0-25.344-3.648-43.392-10.88-68.736-54.464-54.272-90.816zm275.072 203.392c25.344-25.408 72.32-25.408 101.312 0l217.216 199.808c28.928 25.408 28.928 65.344 0 94.4L1169.18 756.928c-14.464 10.88-32.576 18.176-50.624 18.176-18.112 0-36.224-3.648-50.688-18.176a62.208 62.208 0 0 1 0-94.464l166.464-152.512-166.464-152.576a62.208 62.208 0 0 1 0-94.464zM239.004 259.2c25.344-25.408 72.32-25.408 101.312 0a62.208 62.208 0 0 1 0 94.464L173.852 506.24l166.464 152.576a62.208 62.208 0 0 1 0 94.4c-14.464 10.88-32.576 18.176-50.688 18.176-18.048 0-36.16-3.648-50.624-18.176L21.788 553.6a62.208 62.208 0 0 1 0-94.464z"})}))},FeedbackIcon:function(e){return(0,d.jsx)("svg",Ve(Ve({className:"feedback_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1024 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:(0,d.jsx)("path",{d:"m739.556 59.733 8.533 8.534v68.266l-8.533 8.534H113.778a14.564 14.564 0 0 0-12.516 7.225l-1.308 3.242-.398 3.755v568.889c0 5.404 3.072 10.24 7.224 12.515l3.243 1.252 3.755.455h302.706l7.11 3.812L512 878.762l88.405-132.55 7.111-3.812h302.706c5.405 0 10.24-3.072 12.516-7.225l1.308-3.3.398-3.697V329.956l8.534-8.534h68.266l8.534 8.534v398.222c0 48.754-35.158 89.714-82.432 98.02l-8.477 1.137-8.647.398-261.746-.057-91.534 137.5a53.988 53.988 0 0 1-56.434 22.756l-6.371-1.763-6.258-2.617-5.86-3.413a52.68 52.68 0 0 1-7.509-6.03l-3.527-3.698-3.982-5.234-91.534-137.444h-261.69a99.556 99.556 0 0 1-96.255-74.183l-1.82-8.192-1.138-8.476-.342-8.704v-568.89c0-48.753 35.158-89.77 82.432-98.076l8.477-1.137 8.647-.342h625.778zM478.037 491.236a42.496 42.496 0 0 1 5.746 84.593l-5.746.399H261.518a42.496 42.496 0 0 1-5.746-84.594l5.746-.398h216.52zM932.693 44.373c9.103-10.069 23.894-11.946 35.044-5.063l3.982 3.015 28.786 25.885c10.07 9.102 11.947 23.893 5.006 35.043l-2.958 3.983-307.541 341.56a27.648 27.648 0 0 1-5.12 4.38l-2.845 1.708-74.752 38.115a16.156 16.156 0 0 1-23.324-16.953l.91-3.3 30.037-78.278a27.648 27.648 0 0 1 3.13-5.917l2.104-2.674L932.693 44.43zm-397.767 277.05a42.496 42.496 0 0 1 5.746 84.593l-5.746.398H261.518a42.496 42.496 0 0 1-5.746-84.594l5.746-.398h273.408z"})}))},FolderIcon:function(e){return(0,d.jsx)("svg",We(We({className:"folder_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1171 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:(0,d.jsx)("path",{d:"M1087.931 139.88H585.788L483.568 29.805C467.679 10.969 443.54 0 418.015 0H83.776C37.503 0 0 35.343 0 78.985v866.03C0 988.631 37.503 1024 83.776 1024H1087.93c46.273 0 83.776-35.343 83.776-78.985V218.864c0-43.616-37.503-78.985-83.776-78.985zm-21.677 255.122H103.987v-91.63a31.416 31.416 0 0 1 31.415-31.415h899.436a31.416 31.416 0 0 1 31.416 31.416z"})}))},ImagesIcon:function(e){return(0,d.jsx)("svg",Qe(Qe({className:"images_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1170 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:(0,d.jsx)("path",{d:"M1040.238 0c71.826 0 130.048 58.222 130.048 130.048v763.904c0 71.826-58.222 130.048-130.048 130.048h-910.19A130.048 130.048 0 0 1 0 893.952V130.048C0 58.222 58.222 0 130.048 0h910.19zM433.445 448 130.048 832h910.19l-202.24-239.982-151.699 144.019L433.445 448zM910.19 192c-71.827 0-129.975 57.27-129.975 128s58.222 128 129.975 128c71.826 0 130.048-57.27 130.048-128S982.016 192 910.19 192z"})}))},ItemsIcon:function(e){return(0,d.jsx)("svg",rt(rt({className:"items_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1024 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:(0,d.jsx)("path",{d:"M654.222 0a85.333 85.333 0 0 1 85.334 85.333v199.111h199.11A85.333 85.333 0 0 1 1024 369.778v568.889A85.333 85.333 0 0 1 938.667 1024h-568.89a85.333 85.333 0 0 1-85.333-85.333V739.556H85.334A85.333 85.333 0 0 1 0 654.222V85.333A85.333 85.333 0 0 1 85.333 0h568.89zM568.89 682.667 398.222 910.222h512L796.444 768l-85.333 85.333L568.89 682.667zm256-170.667a85.333 85.333 0 1 0 0 170.667 85.333 85.333 0 0 0 0-170.667zM314.027 230.514a18.034 18.034 0 0 0-19.684-.057 22.414 22.414 0 0 0-9.899 18.887v240.868c0 7.793 3.812 15.018 9.9 18.887a18.034 18.034 0 0 0 19.683 0L501.93 388.55A21.902 21.902 0 0 0 512 369.778a21.902 21.902 0 0 0-10.07-18.83z"})}))},LoadingMoreIcon:function(e){return(0,d.jsx)("svg",at(at({className:"loading_more_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1024 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:(0,d.jsx)("path",{d:"M969.626 399.36c14.438 0 28.262 6.144 37.888 16.896 21.094 22.528 22.425 60.211 1.33 82.842L530.023 1013.76l-3.788 4.3a20.89 20.89 0 0 1-14.03 5.94 22.323 22.323 0 0 1-17.817-10.24h-.102L15.36 499.098c-21.094-22.528-19.763-60.314 1.331-82.842a51.098 51.098 0 0 1 75.879 0L512 866.611l419.533-450.355a50.995 50.995 0 0 1 37.888-16.896zM969.318 0c14.439 0 28.263 6.144 37.888 16.998 21.095 22.528 22.324 60.11 1.23 82.74L529.612 614.4l-3.687 4.403a21.094 21.094 0 0 1-14.13 5.837 22.323 22.323 0 0 1-17.818-10.24L15.36 99.738c-21.3-22.528-19.968-60.212 1.024-82.74a51.098 51.098 0 0 1 75.98-.102l419.431 450.458 419.533-450.56A51.098 51.098 0 0 1 969.216 0z"})}))},MoreIcon:function(e){return(0,d.jsx)("svg",ut(ut({className:"more_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1638 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:(0,d.jsx)("path",{d:"M746.7 934.434 174.9 362.633a102.4 102.4 0 0 1 72.294-174.9h1144.012a102.4 102.4 0 0 1 72.295 174.9L891.699 934.434a102.4 102.4 0 0 1-144.998 0z"})}))},MoveFolderIcon:function(e){return(0,d.jsx)("svg",ht(ht({className:"move_folder_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1106 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:(0,d.jsx)("path",{d:"M1035.301 128h-267.72a50.016 50.016 0 0 1-45.932-30.239L693.95 33.434C685.118 12.917 667.364 0 647.97 0H36.815C16.483 0 0 19.616 0 43.822v895.05c0 46.882 31.917 85.03 71.347 85.128H1035.3c39.48 0 71.557-38.147 71.557-85.128v-725.72c-.062-47.005-32.065-85.127-71.557-85.152zm-27.204 797.301H98.7V98.7h515.886l16.396 38.098a148.603 148.603 0 0 0 136.587 89.902h240.579zM571.293 306.188a49.35 49.35 0 0 0 3.294 69.706l135.785 123.559H262.28a49.35 49.35 0 0 0-49.35 49.35 49.35 49.35 0 0 0 49.35 49.349H704.56l-128.876 110.48a49.35 49.35 0 1 0 64.229 74.938l230.14-197.3a49.35 49.35 0 0 0 1.099-74.023L641.012 302.894a49.35 49.35 0 0 0-69.719 3.294z"})}))},NotificationIcon:function(e){return(0,d.jsx)("svg",vt(vt({className:"notification_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1024 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:(0,d.jsx)("path",{d:"M489.927 11.605a44.089 44.089 0 0 1 65.764 32.313l.398 5.86-.057 65.706 5.404.74c150.528 23.893 265.842 153.941 278.016 312.775l.797 14.109.284 13.824-.057 331.036h62.578c11.89 0 22.983 4.779 31.175 12.857l3.812 4.323 3.243 4.893a44.089 44.089 0 0 1-32.313 65.763l-5.86.399-210.147-.057-.797 3.527a186.425 186.425 0 0 1-158.72 137.387l-10.866.967-10.581.284a186.368 186.368 0 0 1-180.167-138.638l-.853-3.527H120.889a44.089 44.089 0 0 1-31.118-12.8l-3.812-4.324-3.243-4.892a44.089 44.089 0 0 1 32.313-65.764l5.86-.398h62.578V456.932c0-166.685 113.436-307.712 266.24-338.376l12.857-2.275 5.347-.797V49.778c0-11.833 4.722-22.926 12.857-31.118l4.324-3.812 4.835-3.243zM599.61 876.09H424.39l1.877 3.64c15.759 28.388 44.772 47.332 77.483 50.063l8.249.341c36.068 0 68.722-19.683 85.845-50.403l1.764-3.641zM512 200.533c-128.74 0-233.984 107.862-240.071 243.542l-.285 12.458v331.435H752.3V456.476c0-137.272-101.433-249.173-228.694-255.601L512 200.533z"})}))},OpenFolderIcon:function(e){return(0,d.jsx)("svg",xt(xt({className:"open_folder_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1277 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:(0,d.jsx)("path",{d:"M1221.397 383.175H341.569c-14.086 0-25.532 7.27-30.68 19.489l-107.25 254.649-95.243 226.13 51.677-571.207c2.268-21.25 17.021-37.124 34.469-37.124h758.452v.253h106.716v-48.262c0-43.62-33.923-78.982-75.768-78.982H543.14L450.685 29.814A74.7 74.7 0 0 0 391.392 0H75.768C33.922 0 0 35.363 0 78.996v866.008C0 988.637 33.922 1024 75.768 1024h936.427c14.086 0 25.531-7.27 30.68-19.489l231.332-549.157c12.793-30.374-17.794-72.18-52.81-72.18z"})}))},PutBackIcon:function(e){return(0,d.jsxs)("svg",kt(kt({className:"put_back_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1024 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:[(0,d.jsx)("path",{d:"M947.9 263.282 678.405 36.804A88.495 88.495 0 0 0 613.197 8H141.252C92.13 8 52.248 48.448 52.248 98.345v827.31c0 49.853 39.882 90.345 89.049 90.345h741.406c49.178 0 89.05-40.448 89.05-90.345v-600.81a91.054 91.054 0 0 0-23.853-61.563zm-64.765 662.373a2.216 2.216 0 0 1-.609 1.717H141.485a2.216 2.216 0 0 1-.61-1.717V98.345a2.15 2.15 0 0 1 .61-1.717h471.512l.078.078a90.844 90.844 0 0 0 8.309 7.954l261.751 219.953a1.208 1.208 0 0 1 0 .199z"}),(0,d.jsx)("path",{d:"M572.361 397.022h-165.07l97.259-88.495a44.314 44.314 0 1 0-59.68-65.552L257.466 413.473a44.314 44.314 0 0 0 .986 66.471l187.404 160.639a44.314 44.314 0 1 0 57.686-67.28L401.32 485.66h171.041a116.39 116.39 0 0 1 0 232.781h-158.7a44.314 44.314 0 0 0 0 88.628h158.7c113.001 0 205.019-91.951 205.019-205.018s-91.974-205.03-205.019-205.03z"})]}))},RenameIcon:function(e){return(0,d.jsx)("svg",It(It({className:"rename_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1024 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:(0,d.jsx)("path",{d:"m798.103 10.922 7.395 6.144 201.66 203.536c20.194 20.82 22.185 52.335 5.915 75.487l-6.143 7.395-703.162 702.137a57.682 57.682 0 0 1-32.31 16.554l-9.273.683-203.536 1.08A57.853 57.853 0 0 1 .626 973.88L0 964.721l1.08-204.959c.513-11.889 4.381-23.323 11.378-33.22l5.688-7.111L580.858 158.54 721.649 16.952a60.185 60.185 0 0 1 76.454-6.03zm174.639 910.623a51.197 51.197 0 0 1 0 102.394H506.28a51.197 51.197 0 0 1 0-102.394h466.46zm-350.87-654.752L111.04 777.283l-3.413 7.964-.74 132.031 132.146-.967 7.964-3.3 511.57-509.977L621.873 266.85zm142.043-141.474-74.179 74.178 136.07 136.014 74.35-74.122-136.24-136.07z"})}))},RightIcon:function(e){return(0,d.jsx)("svg",_t(_t({className:"right_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1365 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:(0,d.jsx)("path",{d:"M1213.44 48.014 491.52 777.557 151.893 434.176a84.537 84.537 0 0 0-120.604 0 86.244 86.244 0 0 0 0 121.06l400.156 404.593a84.764 84.764 0 0 0 120.605 0l781.994-790.755a86.244 86.244 0 0 0 0-121.06 84.537 84.537 0 0 0-120.604 0z"})}))},TagIcon:function(e){return(0,d.jsx)("svg",Mt(Mt({className:"tag_img_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1365 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:(0,d.jsx)("path",{d:"M426.667 426.667 768 853.333l256-256L1365.333 1024H0l426.667-597.333zM1024 0a170.667 170.667 0 1 1 0 341.333A170.667 170.667 0 0 1 1024 0z"})}))},TrashFilledIcon:function(e){return(0,d.jsx)("svg",Bt(Bt({className:"trash_filled_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1024 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:(0,d.jsx)("path",{d:"M510.92 0c91.135 0 172.828 53.817 207.7 135.566l4.267 10.81h222.89c26.852 0 49.323 20.877 49.779 47.217a47.56 47.56 0 0 1-14.052 34.475 49.323 49.323 0 0 1-28.444 13.937l-6.486.399h-23.552V932.58c0 47.672-37.262 86.869-84.764 91.022l-8.477.398H192.057c-48.583 0-88.52-36.523-92.843-83.115l-.341-8.305V242.347H77.369a49.436 49.436 0 0 1-34.93-14.336 47.56 47.56 0 0 1-14.051-34.475c.398-24.292 19.626-43.975 43.633-46.82l6.144-.398h220.73C330.98 58.596 415.857 0 510.861 0zM327.11 341.333h-28.444a28.444 28.444 0 0 0-28.445 28.445v455.11a28.444 28.444 0 0 0 28.445 28.445h28.444a28.444 28.444 0 0 0 28.445-28.444V369.778a28.444 28.444 0 0 0-28.445-28.445zm199.111 0h-28.444a28.444 28.444 0 0 0-28.445 28.445v455.11a28.444 28.444 0 0 0 28.445 28.445h28.444a28.444 28.444 0 0 0 28.445-28.444V369.778a28.444 28.444 0 0 0-28.445-28.445zm199.111 0H696.89a28.444 28.444 0 0 0-28.445 28.445v455.11a28.444 28.444 0 0 0 28.445 28.445h28.444a28.444 28.444 0 0 0 28.445-28.444V369.778a28.444 28.444 0 0 0-28.445-28.445zM510.863 73.16c-44.488 0-84.651 25.486-103.14 64.626l-3.641 8.533h213.674A113.72 113.72 0 0 0 510.92 73.16z"})}))},TrashIcon:function(e){return(0,d.jsx)("svg",Gt(Gt({className:"trash_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1024 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:(0,d.jsx)("path",{d:"M940.758 146.44H685.79a176.374 176.374 0 0 0-347.58 0H83.242a45.734 45.734 0 0 0-45.734 45.735 45.734 45.734 0 0 0 45.734 45.734h43.836V886.74A137.26 137.26 0 0 0 264.281 1024h495.37a137.26 137.26 0 0 0 137.202-137.26V237.91h43.905a45.734 45.734 0 0 0 45.734-45.735 45.734 45.734 0 0 0-45.734-45.734zm-135.316 740.3a45.849 45.849 0 0 1-45.734 45.792h-495.37a45.849 45.849 0 0 1-45.734-45.792V237.91h586.838zM512 91.468a85.031 85.031 0 0 1 79.429 54.973H432.503A85.031 85.031 0 0 1 512 91.468zM338.553 817.67a45.734 45.734 0 0 0 45.734-45.734v-384.67a45.734 45.734 0 0 0-45.734-45.734 45.734 45.734 0 0 0-45.734 45.734v384.67a45.734 45.734 0 0 0 45.734 45.734zM511.348 341.532q45.734 0 45.734 45.734v384.659q0 45.734-45.734 45.734t-45.734-45.734v-384.66q0-45.733 45.734-45.733Zm172.304 0q45.734 0 45.734 45.734v384.659q0 45.734-45.734 45.734t-45.734-45.734v-384.66q0-45.733 45.734-45.733Z"})}))},VideosIcon:function(e){return(0,d.jsx)("svg",Jt(Jt({className:"videos_svg__icon",width:"1em",height:"1em",viewBox:"0 0 1024 1024",xmlns:"http://www.w3.org/2000/svg"},e),{},{children:(0,d.jsx)("path",{d:"M1012.622 193.536a38.172 38.172 0 0 0-50.062.569L809.188 336.043v-151.04c0-70.656-49.608-128.114-110.592-128.114h-588.06C49.095 57.458 0 114.347 0 185.003v653.994c0 70.656 49.55 128.114 110.535 128.114h589.198c60.871 0 110.479-57.458 110.479-128.114V699.164l153.372 141.938a36.75 36.75 0 0 0 25.316 9.558c19.626 0 35.1-14.336 35.1-31.858V216.348a33.564 33.564 0 0 0-11.378-22.812zM563.371 532.992 317.61 679.196a25.202 25.202 0 0 1-25.771.057 26.738 26.738 0 0 1-12.97-22.926V363.918a26.738 26.738 0 0 1 12.97-22.87 25.202 25.202 0 0 1 25.714 0L563.37 487.254a26.169 26.169 0 0 1 13.198 22.87 26.169 26.169 0 0 1-13.198 22.869z"})}))},AddTextIcon:function(e){return(0,d.jsx)("svg",er(er({className:"add_text_svg__icon",viewBox:"0 0 1024 1024",xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em"},e),{},{children:(0,d.jsx)("path",{d:"M784.998 76.8c18.944 0 34.202 14.848 34.202 32.768v137.728l-86.733-83.2h-277.35l-.051 685.824 110.694.051a48.64 48.64 0 0 1 0 97.28l-75.878-.051-.615.051H253.44a48.64 48.64 0 0 1 0-97.28l110.643-.051V164.147H86.733L0 247.296V109.568C0 91.443 15.258 76.8 34.15 76.8zM819.2 435.2a40.96 40.96 0 0 1 40.96 40.96v122.829l122.88.051a40.96 40.96 0 1 1 0 81.92l-122.88-.051V803.84a40.96 40.96 0 1 1-81.92 0V680.909l-122.88.051a40.96 40.96 0 1 1 0-81.92l122.88-.051V476.16a40.96 40.96 0 0 1 40.96-40.96z"})}))},CutIcon:function(e){return(0,d.jsx)("svg",or(or({className:"cut_svg__icon",viewBox:"0 0 1024 1024",xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em"},e),{},{children:(0,d.jsx)("path",{d:"M214.016 32C95.744 32 0 124.518 0 238.438 0 348.416 89.242 438.477 201.42 444.57l12.135.307 12.237-.307a218.214 218.214 0 0 0 99.84-29.952l12.544-8.039 10.24-7.065 132.608 107.52-138.906 112.742-10.188-6.502a218.47 218.47 0 0 0-117.914-34.15C95.744 579.123 0 671.641 0 785.561S95.744 992 214.016 992c118.272 0 213.965-92.518 213.965-206.438 0-24.679-4.506-48.743-13.107-71.322l-5.684-13.414-5.478-11.674 150.886-122.47 323.79 262.656 8.703 6.502c41.472 27.955 96.307 25.14 134.247-5.325l2.662-2.355-395.776-321.178 395.622-321.024-2.15-2.048a113.818 113.818 0 0 0-125.082-11.366l-9.062 5.427-8.602 6.349-324.3 262.963-147.303-119.45 4.813-11.417c10.394-24.525 15.82-50.893 15.82-77.978C427.98 124.518 332.238 32 213.966 32zm0 638.157a118.938 118.938 0 0 1 118.886 119.04 118.938 118.938 0 0 1-118.886 119.091 118.938 118.938 0 0 1-118.938-119.04 118.938 118.938 0 0 1 118.938-119.04zm0-547.123a118.938 118.938 0 0 1 118.886 119.04 118.938 118.938 0 0 1-118.886 119.04 118.938 118.938 0 0 1-118.938-119.04 118.938 118.938 0 0 1 118.938-119.04z"})}))},ProIcon:function(e){return(0,d.jsx)("svg",cr(cr({className:"pro_svg__icon",viewBox:"0 0 1600 1024",xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em"},e),{},{children:(0,d.jsx)("path",{d:"M1138.368 0C1375.36 0 1568.256 188.8 1568 421.632c0 232.256-192.384 421.632-429.888 421.632H298.176L32 1024V421.632C32 189.312 224.384 0 461.888 0zm-52.928 341.888c-76.736 0-76.736 0-114.432 47.232-37.696 47.296-37.696 47.296-37.696 111.744 0 65.536 0 65.536 37.76 112.064 37.632 46.592 37.632 46.592 114.368 46.592 76.8 0 76.8 0 114.432-46.592 37.76-46.528 37.76-46.528 37.76-112.064 0-64.448 0-64.448-37.76-111.744-37.696-47.232-37.696-47.232-114.432-47.232zm-540.992-95.36h-175.36v402.56h83.584v-144.64h85.44c66.944 0 66.944 0 103.04-29.568 36.032-29.44 36.032-29.44 36.032-100.736 0-65.28 0-65.28-36.096-96.448-32-27.648-32-27.648-83.52-30.72l-13.12-.384zm351.168 97.856c-34.944 0-34.944 0-56.768 18.24-11.136 9.152-11.136 9.152-25.6 31.36l-5.76 9.344v-51.84H733.12v297.6h78.4V506.88c0-35.84 0-35.84 8.96-52.992 16.192-30.592 16.192-30.592 63.168-30.592 3.52 0 3.52 0 9.28.256l6.144.384 6.976.704v-79.68l-6.72-.384c-1.472-.128-1.472-.128-3.712-.128zm189.568 63.36c34.112 0 34.112 0 52.48 24.128 18.24 24.192 18.24 24.192 18.24 68.992 0 44.8 0 44.8-18.304 69.12-18.304 24.32-18.304 24.32-52.48 24.32-34.048 0-34.048 0-52.48-24.32-18.496-24.32-18.496-24.32-18.496-69.12 0-44.8 0-44.8 18.432-68.992 18.496-24.128 18.496-24.128 52.608-24.128zM531.072 316.48c29.76 0 29.76 0 46.272 13.44 16.512 13.312 16.512 13.312 16.512 44.8 0 31.36 0 31.36-16.512 45.824-16.512 14.464-16.512 14.464-46.272 14.464h-78.4V316.48h78.4z",fill:"#FFBC00"})}))},ReduceIcon:function(e){return(0,d.jsx)("svg",fr(fr({className:"reduce_svg__icon",viewBox:"0 0 1024 1024",xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em"},e),{},{children:(0,d.jsx)("path",{d:"M63.488 450.56h897.024q63.488 0 63.488 63.488t-63.488 63.488H63.488Q0 577.536 0 514.048t63.488-63.488Z"})}))},MoreDotIcon:function(e){return(0,d.jsx)("svg",yr(yr({className:"more_feature_svg__icon",viewBox:"0 0 1024 1024",xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em"},e),{},{children:(0,d.jsx)("path",{d:"M117.029 402.286a109.714 109.714 0 1 1 0 219.428 109.714 109.714 0 0 1 0-219.428zm393.874 0a109.714 109.714 0 1 1 0 219.428 109.714 109.714 0 0 1 0-219.428zm393.801 0a109.714 109.714 0 1 1 0 219.428 109.714 109.714 0 0 1 0-219.428z"})}))}},Or={},Pr=function(e){Or[e]=(0,a.memo)((function(t){return(0,d.jsx)(xr,jr({component:Sr[e]},t))}))};for(var kr in Sr)Pr(kr);Or.AddImageIcon,Or.AddIcon,Or.AnnotateIcon,Or.ArrowIcon;var Cr=Or.CloseIcon,Nr=(Or.CommentIcon,Or.CopyLinkIcon,Or.CopyIcon,Or.DownloadIcon,Or.EmbedIcon,Or.FeedbackIcon,Or.FolderIcon,Or.ImagesIcon,Or.ItemsIcon,Or.LoadingMoreIcon,Or.MoreIcon,Or.MoveFolderIcon,Or.NotificationIcon,Or.OpenFolderIcon,Or.PutBackIcon,Or.RenameIcon,Or.RightIcon,Or.TagIcon,Or.TrashFilledIcon,Or.TrashIcon,Or.VideosIcon,Or.AddTextIcon,Or.CutIcon,Or.ProIcon,Or.ReduceIcon,Or.MoreDotIcon,["callout","list","image","insertImage"]);function Dr(e){return(0,d.jsx)(n.Z,{visible:e.visible,onCancel:e.onCancel,footer:null,width:548,maskClosable:!1,wrapClassName:"upgrade-modal",destroyOnClose:!0,centered:!0,closable:!e.unClosable,closeIcon:(0,d.jsx)(Cr,{style:{fontSize:"12px"}}),children:(0,d.jsxs)("div",{className:"upgrade-panel",children:[(0,d.jsx)("div",{className:"crown"}),(0,d.jsx)("div",{className:"title",children:"5limit"===e.type?"Your free trial has ended":"Access Limit Reached"}),function(){switch(e.type){case"callout":return(0,d.jsx)("img",{src:Q,alt:""});case"list":return(0,d.jsx)("img",{src:X,alt:""});case"image":return(0,d.jsx)("img",{src:K,alt:""});case"insertImage":return(0,d.jsx)("img",{src:ee,alt:""});default:return""}}(),(0,d.jsx)("p",{children:-1!==Nr.indexOf(e.type)?"This is a basic plan feature. Please upgrade to unlock it.":"dropbox"===e.type?"Upgrade to premium plans to save to Dropbox.":"box"===e.type?"Upgrade to premium plans to save to Box.":"team"===e.type?"Upgrade to team plan to unlock the feature.":"project"===e.type?"Upgrade to premium plans to get unlimited folders.":"uploadImage"===e.type?"Upgrade to premium plans to host unlimited images.":"recordResolution"===e.type?(0,d.jsxs)(d.Fragment,{children:["Upgrade to ",(0,d.jsx)("b",{children:"professional plan"})," to unlock the high resolution recording feature.",(0,d.jsx)("br",{}),"High resolution video takes lots of disk space, so you need to upgrade to use this feature."]}):"video-play"===e.type?(0,d.jsxs)(d.Fragment,{children:["This video is not accessible because you have reached the limit on video access. Please upgrade to ",(0,d.jsx)("b",{children:"Professional plan"})," for unlimited recording and access."]}):"image-view"===e.type?(0,d.jsx)(d.Fragment,{children:"This image is not accessible because you have reached the limit on image access. Please upgrade your plan for unlimited access."}):"video-alert"===e.type?(0,d.jsxs)(d.Fragment,{children:["You have reached the limit on video access. Please upgrade to"," ",(0,d.jsx)("b",{children:"Professional plan"})," for unlimited recording and access."]}):"download"===e.type?(0,d.jsxs)(d.Fragment,{children:["Please upgrade to ",(0,d.jsx)("b",{children:"Professional plan"})," to unlock this feature."]}):"5limit"===e.type?(0,d.jsx)(d.Fragment,{children:"Your video can be up to 5 minutes long. To access unlimited video length, please upgrade your account to Professional."}):"Upgrade to Professional or Team plan to unlock the feature."}),(0,d.jsx)(J.Z,{className:"up-btn",size:"large",type:"primary",onClick:function(){window.open("https://www.awesomescreenshot.com/pricing?from="+e.type)},children:"Go to Upgrade"})]})})}function Ir(e){return Ir="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ir(e)}function Tr(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Er(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Tr(Object(r),!0).forEach((function(t){Ar(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Tr(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Ar(e,t,r){return(t=Zr(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function _r(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,Zr(n.key),n)}}function Zr(e){var t=function(e,t){if("object"!=Ir(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=Ir(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==Ir(t)?t:String(t)}function Ur(e,t){return Ur=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Ur(e,t)}function Lr(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Rr(e);if(t){var o=Rr(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"===Ir(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Mr(e)}(this,r)}}function Mr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Rr(e){return Rr=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Rr(e)}var zr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Ur(e,t)}(i,e);var t,r,n,o=Lr(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).outerContainer=a.createRef(),t.container=a.createRef(),t.doodleCanvas=a.createRef(),t.layerCanvas=a.createRef(),t.textareaOut=a.createRef(),t.textarea=a.createRef(),t.listDialog=a.createRef(),t.fileInput=a.createRef(),t.state={isInCropMode:!1,currentTool:"curve",currentColor:localStorage["pen-color"]||"rgb(255, 0, 0)",currentPenWidth:localStorage["pen-width"]?parseInt(localStorage["pen-width"]):4,currentFontSize:localStorage["font-size"]?parseInt(localStorage["font-size"]):24,currentFontFamily:localStorage["font-family"]||"Times New Rome",cropWidth:0,cropHeight:0,resizeWidth:0,resizeHeight:0,resizeProportional:!0,currentScale:1,canUndo:!1,canRedo:!1,canClear:!1,canDeleteSelected:!1,isShownUpgrade:!1,isReady:!1,upgradeType:"",isTextBackground:!1},t.handleToolBarBtnClick=t.handleToolBarBtnClick.bind(Mr(t)),t.handleFileInputChange=t.handleFileInputChange.bind(Mr(t)),t.editor_style_callback=t.editor_style_callback.bind(Mr(t)),t.initEditor=t.initEditor.bind(Mr(t)),t.insertImage=t.insertImage.bind(Mr(t)),t.handleResizeInputChange=t.handleResizeInputChange.bind(Mr(t)),t.handleResizeProportionChange=t.handleResizeProportionChange.bind(Mr(t)),t.getResizeInfo=t.getResizeInfo.bind(Mr(t)),t.finishEdit=t.finishEdit.bind(Mr(t)),t.handleKeyDown=t.handleKeyDown.bind(Mr(t)),t.handleCloseUpgrade=t.handleCloseUpgrade.bind(Mr(t)),t.handleTextBgChange=t.handleTextBgChange.bind(Mr(t)),t.handleResetList=t.handleResetList.bind(Mr(t)),t}return t=i,(r=[{key:"componentDidMount",value:function(){this.initEditor(this.props.imageUrl),document.querySelector("#canvas2")&&document.querySelector("#canvas2").addEventListener("click",(function(){document.querySelectorAll(".tool-select").forEach((function(e){e.blur()}))}),!1),document.addEventListener("keydown",this.handleKeyDown)}},{key:"componentDidUpdate",value:function(e){e.imageUrl!==this.props.imageUrl&&""===e.imageUrl&&this.initEditor(this.props.imageUrl)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("keydown",this.handleKeyDown),this.editor=null}},{key:"handleKeyDown",value:function(e){var t=e.keyCode;if(-1!==this.props.className.indexOf("active"))if(90===t&&(e.ctrlKey||e.metaKey))e.shiftKey?this.editor.redo():this.editor.undo();else if((46===t||8===t)&&this.state.canDeleteSelected){if(e.target.classList.contains("editor-textarea"))return;this.editor.deleteSelected()}}},{key:"finishEdit",value:function(e,t){var r=this;this.editor.getImageDataBlob(this.props.contentType,(function(e){var n=window.URL.createObjectURL(e);if(t)r.props.handleFinishEditAndShare(n,e);else{var o=r.editor.bg_info;r.props.handleFinishEdit(n,e,{width:o.width,height:o.height})}}))}},{key:"handleResetList",value:function(){this.editor.resetList()}},{key:"handleTextBgChange",value:function(){this.editor.setTextBackground(!this.state.isTextBackground),this.setState({isTextBackground:!this.state.isTextBackground})}},{key:"handleResizeProportionChange",value:function(e){this.setState({resizeProportional:e.target.checked})}},{key:"handleResizeInputChange",value:function(e,t){var r=this.editor.bg_info.width/this.editor.bg_info.height;"width"===e?!0===this.state.resizeProportional?this.setState({resizeWidth:parseInt(t.target.value),resizeHeight:parseInt(t.target.value)/r}):this.setState({resizeWidth:parseInt(t.target.value)}):!0===this.state.resizeProportional?this.setState({resizeWidth:parseInt(t.target.value)*r,resizeHeight:parseInt(t.target.value)}):this.setState({resizeHeight:parseInt(t.target.value)})}},{key:"getResizeInfo",value:function(){var e=this.editor.bg_info;this.setState({resizeHeight:parseInt(e.height),resizeWidth:parseInt(e.width)})}},{key:"handleFileInputChange",value:function(e){var t=e.target.files[0],r=URL.createObjectURL(t);this.insertImage(r)}},{key:"editor_style_callback",value:function(e,t){switch(e){case"crop":"done"!==t&&this.setState({cropWidth:t.width,cropHeight:t.height});break;case"undo":this.setState({canUndo:t});break;case"redo":this.setState({canRedo:t});break;case"del":this.setState({canDeleteSelected:t});break;case"clear":this.setState({canClear:!t})}}},{key:"initEditor",value:function(e){if(e){var t=this,r=new Image;this.editor=new Diigo.Doodle._Drawer({out_container:this.outerContainer.current,container:this.container.current,doodle_canvas:this.doodleCanvas.current,layer_canvas:this.layerCanvas.current,textarea:this.textarea.current,textarea_out:this.textareaOut.current,$list_dialog:$(this.listDialog.current),devicePixelRatio:this.props.devicePixelRatio,image:r},(function(e,r){t.editor_style_callback(e,r)})),r.src=e,r.onload=function(){t.editor.setBgImage(r,!1),t.editor.setPenColor(t.state.currentColor),t.editor.setPenType("curve"),t.editor.setFontSize(t.state.currentFontSize),t.editor.setPenWidth(t.state.currentPenWidth),t.editor.setFontName(t.state.currentFontFamily),t.editor.setBlurRadius(30),t.setState({isReady:!0}),this.width>window.screen.availWidth&&"true"===localStorage["resize-for-retina"]&&t.editor.setImageSize(t.editor.bg_info.width/2,t.editor.bg_info.height/2)}}}},{key:"insertImage",value:function(e){var t=this,r=new Image;r.src=e;var n={image:r,width:0,height:0,choose_type:"full"};r.img_info=n,r.onload=function(){n.width=this.naturalWidth,n.height=this.naturalHeight,t.editor.insertSvgImage(n)}}},{key:"handleCloseUpgrade",value:function(){this.setState({isShownUpgrade:!1})}},{key:"handleToolBarBtnClick",value:function(e,t){var r=this.editor;if("shape"===e){if(-1!==W.indexOf(t)&&!this.props.permissions.allowAdvancedToolForImageEditor)return void this.setState({upgradeType:t,isShownUpgrade:!0});"highlight"==t?(r.unSelectAll(),r.setPenOpacity(.3),r.setPenWidth(16),r.setPenType("highlight")):(r.setPenOpacity(1),r.setPenWidth(this.state.currentPenWidth),r.setPenType(t)),this.setState({currentTool:t})}else if("action"===e)switch(t.actionType){case"crop":this.setState({isInCropMode:!0}),r.cutImage();break;case"changeColor":this.setState({currentColor:t.value}),r.setPenColor(t.value),localStorage["pen-color"]=t.value;break;case"changePenWidth":this.setState({currentPenWidth:t.value}),r.setPenWidth(parseInt(t.value)),localStorage["pen-width"]=t.value;break;case"changeFontSize":this.setState({currentFontSize:t.value}),r.setFontSize(parseInt(t.value)),localStorage["font-size"]=t.value;break;case"changeFontFamily":this.setState({currentFontFamily:t.value}),r.setFontName(t.value),localStorage["font-family"]=t.value;break;case"zoom-in":if(2!==this.state.currentScale){var n=this.state.currentScale+.25;r.setScale(n),this.setState({currentScale:n,isShowScaleTip:!0})}break;case"zoom-out":.25!==this.state.currentScale&&(n=this.state.currentScale-.25,r.setScale(n),this.setState({currentScale:n,isShowScaleTip:!0}));break;case"resetScale":r.setScale(1),this.setState({currentScale:1,isShowScaleTip:!1});break;case"crop-demension-width":this.setState({cropWidth:parseInt(t.value)},(function(){r.setCropSize(this.state.cropWidth,this.state.cropHeight)}));break;case"crop-demension-height":this.setState({cropHeight:parseInt(t.value)},(function(){r.setCropSize(this.state.cropWidth,this.state.cropHeight)}));break;case"leaveCrop":this.setState({isInCropMode:!1,cropWidth:0,cropHeight:0}),r.finishCutImage(!1);break;case"doCrop":r.finishCutImage(!0),this.setState({isInCropMode:!1,cropWidth:0,cropHeight:0});break;case"insert-image":if(!this.props.permissions.allowAdvancedToolForImageEditor)return void this.setState({upgradeType:"insertImage",isShownUpgrade:!0});this.fileInput.current.click();break;case"doInsertImage":if(!this.props.permissions.allowAdvancedToolForImageEditor)return void this.setState({upgradeType:"image",isShownUpgrade:!0});var o="./images/svg/"+t.value+".svg";this.insertImage(o);break;case"doResize":r.setImageSize(this.state.resizeWidth,this.state.resizeHeight);break;default:r[t.actionType]()}}},{key:"render",value:function(){var e=this.state,t=e.isShownUpgrade,r=e.isReady,n=u()("editor",this.props.className),o=u()("loading-page",{active:!r});return(0,d.jsxs)("div",{className:n,tabIndex:"0",children:[(0,d.jsx)("div",{className:o,children:(0,d.jsxs)("div",{className:"center",children:[(0,d.jsx)("div",{className:"loading-spinner",children:(0,d.jsxs)("div",{className:"spinner",children:[(0,d.jsx)("div",{className:"rect1"}),(0,d.jsx)("div",{className:"rect2"}),(0,d.jsx)("div",{className:"rect3"}),(0,d.jsx)("div",{className:"rect4"}),(0,d.jsx)("div",{className:"rect5"})]})}),(0,d.jsxs)("div",{className:"brand",children:[(0,d.jsx)("div",{className:"logo"}),"AWESOME SCREENSHOT"]})]})}),(0,d.jsx)("input",{type:"file",className:"file-input",ref:this.fileInput,accept:".jpg,.jpeg,.png",onChange:this.handleFileInputChange}),(0,d.jsx)(H,Er(Er({},this.state),{},{handleToolBarBtnClick:this.handleToolBarBtnClick,handleResizeInputChange:this.handleResizeInputChange,handleResizeProportionChange:this.handleResizeProportionChange,handleResetList:this.handleResetList,getResizeInfo:this.getResizeInfo,finishEdit:this.finishEdit,handleTextBgChange:this.handleTextBgChange,handleBack:this.props.handleBack,type:this.props.type,quickReport:this.props.quickReport,isReported:this.props.isReported,menuType:this.props.menuType,allowAdvancedTool:this.props.permissions.allowAdvancedToolForImageEditor})),(0,d.jsx)("div",{className:"editor-outer-container",tabIndex:"0",id:"editor-outer-container",ref:this.outerContainer,children:(0,d.jsxs)("div",{className:"editor-container",ref:this.container,children:[(0,d.jsx)("canvas",{className:"doodle-canvas",id:"canvas",ref:this.doodleCanvas}),(0,d.jsx)("canvas",{className:"layer-canvas",id:"canvas2",ref:this.layerCanvas}),(0,d.jsx)("div",{className:"editor-outer-textarea",ref:this.textareaOut,children:(0,d.jsx)("textarea",{className:"editor-textarea",ref:this.textarea})}),(0,d.jsxs)("div",{className:"editor-list-dialog",ref:this.listDialog,children:["Number:",(0,d.jsx)("input",{type:"number"})]})]})}),(0,d.jsx)(Dr,{visible:t,onCancel:this.handleCloseUpgrade,type:this.state.upgradeType})]})}}])&&_r(t.prototype,r),n&&_r(t,n),Object.defineProperty(t,"prototype",{writable:!1}),i}(a.PureComponent);const Fr=zr;r(1886);var Br=r(5777),Hr=(r(3170),r(641)),Vr=(r(1104),r(8993)),Yr=r(1816),Gr=r(3258),qr=r(8485),Wr=r(5035),$r=r(4616),Jr=r(4302),Kr=r(9366),Qr=r(7858),Xr=r(4804),en=r(5175),tn=r(9669),rn=r.n(tn),nn=r(7484),on=r.n(nn),an=r(1168);function sn(e,t,r){function n(e){return e.charCodeAt(0)}t=t||"",r=r||1024;for(var o=atob(e),i=[],a=0;a<o.length;a+=r){var s=o.slice(a,a+r),c=Array.prototype.map.call(s,n),l=new Uint8Array(c);i.push(l)}return new Blob(i,{type:t})}function cn(e){window.open(e)}function ln(e){return"[object Array]"===Object.prototype.toString.call(e)}function un(e,t,r){var n={version:1,type:"doc",content:[]};if(e&&e.length&&n.content.push({type:"paragraph",content:[{type:"text",text:e}]}),n.content.push({type:"rule"}),t)for(var o in t){var i={type:"paragraph",content:[{type:"text",text:o+":",marks:[{type:"strong"}]},{type:"text",text:" "+t[o]}]};n.content.push(i)}return r&&(n.content.push({type:"paragraph",content:[{type:"text",text:"Click the link below to watch the video:"}]}),n.content.push({type:"paragraph",content:[{type:"text",text:r,marks:[{type:"link",attrs:{href:r,title:r}}]}]})),n}function dn(e){return e?e.charAt(0).toUpperCase()+e.slice(1):""}function fn(e){var t=document.createElement("textarea");t.value=e,t.style.position="absolute",t.style.top="-999999px",document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t)}function pn(e,t,r){var n=[],o=document.createElement("img");o.onload=function(){for(var e=this.height,i=this.width,a=Math.ceil(e/t),s=e%t,c=0;c<a;c++){var l,u,d=document.createElement("canvas"),f=d.getContext("2d");d.width=i,l=u=d.height=c!==a-1?t:s,f.drawImage(o,0,t*c,i,l,0,0,i,u),n.push(d.toDataURL())}r(n)},o.src=e}function hn(e){function t(e){return new Promise((function(t,r){var n=new Image;n.onload=function(){t({ele:n,height:n.height,width:n.width})},n.onerror=n.onabort=function(){r(e)},n.src=e}))}for(var r=[],n=0;n<e.length;n++)r.push(t(e[n]));return Promise.all(r)}function mn(e){return new Promise((function(e,t){chrome.permissions.request({permissions:["downloads"]},(function(t){t&&e()}))}))}function yn(e){return new Promise((function(t,r){"string"==typeof e?chrome.storage.local.get([e],(function(r){t(r[e])})):Array.isArray(e)?chrome.storage.local.get(null,(function(r){t(e.map((function(e){return r[e]})))})):e||chrome.storage.local.get(null,(function(e){t(e)}))}))}function bn(e){var t=e.filename;"true"===localStorage["save-as"]&&localStorage.download_directory&&(e.filename=localStorage.download_directory+"/"+e.filename),chrome.downloads.download(e,(function(r){var n=chrome.runtime.lastError;void 0===r&&n&&n.message&&n.message.indexOf("cancel")<0&&vn(e.url,t)}))}function vn(e,t){var r=document.createElement("a"),n=document.createEvent("MouseEvents");n.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),r.setAttribute("href",e),r.setAttribute("download",t),r.rel="noopener",r.dispatchEvent(n)}function gn(e){if(!e)return"local-image-"+on()().format("YYYY-MM-DD_h_mm");var t=new URL(e),r=t.pathname?t.pathname.split("/").splice(1).join("-")+"-":"";return"AwesomeScreenshot-"+t.hostname.replace(/^https?:\/\/(www\.)?/,"").replace(/^([^\/]+)\.com/,"$1").replace(/[^A-Za-z0-9]+/g,"-").replace(/-+/g,"-").replace(/^[_\-]+/,"").replace(/[_\-]+$/,"")+"-"+r+on()().format("YYYY-MM-DD_h_mm")}function jn(e,t,r,n){var o=document.createElement("canvas"),i=o.getContext("2d"),a=r.length?"Captured at: "+on()().format("YYYY/MM/DD hh:mm")+"  URL: "+r:"Captured at: "+on()().format("YYYY/MM/DD hh:mm"),s="single",c=40,l="bold 24px Arial",u="bold 24px Arial";i.font=l;wn(i,a,t.width);var d=i.measureText("Captured at: ").width,f=i.measureText("URL: ").width;if(i.font=u,d+f+i.measureText(r).width+i.measureText(on()().format("YYYY/MM/DD hh:mm")+" ").width>t.width){s="multiple";var p=wn(i,"URL: "+r,t.width),h=p.length;c=40*(h+1)}o.width=t.width,o.height=t.height+c;var m=URL.createObjectURL(e),y=document.createElement("img");if(y.onload=function(){i.drawImage(y,0,c),o.toBlob((function(e){n(e)}))},y.src=m,i.fillStyle="#000000",i.fillRect(0,0,o.width,c),i.restore(),i.fillStyle="#ffffff",i.textBaseline="top",i.strokeStyle="#ffffff",i.font="bold 24px Arial","single"===s){i.fillText("Captured at: ",10,10),i.font=u,i.fillText(on()().format("YYYY/MM/DD hh:mm A")+" ",10+d,10);var b=i.measureText(on()().format("YYYY/MM/DD hh:mm A")+" ").width+20;r.length&&(i.font=l,i.fillText("URL: ",10+d+b,10),i.font=u,i.fillText(r,10+d+b+f,10))}else{i.fillText("Captured at: ",10,10),i.font=u,i.fillText(on()().format("MM/DD/YYYY, hh:mm A"),10+d,10);for(var v=0;v<p.length;v++)0===v?(i.font=l,i.fillText("URL: ",10,50),i.font=u,i.fillText(p[0].substring(5),10+f,50)):(i.font=u,i.fillText(p[v],10,10+40*(v+1)))}i.beginPath(),i.moveTo(0,c),i.stroke(),i.closePath()}function wn(e,t,r){r-=10;for(var n=t.split(""),o=[],i=n[0],a=1;a<n.length;a++){var s=n[a];e.measureText(i+" "+s).width<r?i+=s:(o.push(i),i=s)}return o.push(i),o}var xn="https://www.awesomescreenshot.com",Sn="https://www.awesomescreenshot.com/api/v1",On="https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id",Pn="https://content.dropboxapi.com/2/files/upload",kn="https://upload.box.com/api/2.0/files/content",Cn=["/premium/stripe/create_plan","/premium/stripe/change_plan","/folder/create","/folder/add_items","/folder/change_name","/trash/throw_into","/image/change_title","/video/update_title","/trash/restore","/trash/delete","/image/upload"],Nn=rn().create({baseURL:Sn});function Dn(){return(e=xn,t=["screenshot_personal_fullname","screenshot_personal_type","screenshot_personal_mail","screenshot_peronal_premium_level"],new Promise((function(r,n){chrome.cookies.getAll({url:e},(function(e){if("string"==typeof t){var n=e.filter((function(e){return e.name===t}));r(n)}else if(Array.isArray(t)){var o=e.filter((function(e){return-1!==t.indexOf(e.name)}));r(o)}}))}))).then((function(e){if(e.length){var t={};return e.forEach((function(e){t[e.name]=e})),{username:decodeURI(t.screenshot_personal_fullname.value),type:t.screenshot_personal_type.value,mail:t.screenshot_personal_mail.value,premiumLevel:t.screenshot_personal_premium_level?t.screenshot_personal_premium_level.value:""}}return null}));var e,t}function In(e){return Nn({method:"GET",url:"/account/auth",params:{service:e,from:"extension"}})}function Tn(e){return Nn({method:"GET",url:"/account/load/resource",params:e})}function En(e,t,r,n,o,i){return Nn({method:"POST",url:"/destination/add",data:{accountID:e,resourceID:r,privacy:o,resourceName:n,resourceType:t,info:i}})}function An(e){return Nn({method:"GET",url:"/destination/image/upload_to_cloud_done",params:{Service:e}})}Nn.interceptors.request.use((function(e){return e}),(function(e){return i.ZP.error("Network error, Request timeout!"),Promise.reject()})),Nn.interceptors.response.use((function(e){if(e&&e.data&&1===e.data.code)return Promise.resolve(e.data.data);if(e.data.code,e.data.msg){if(-1!==Cn.indexOf(e.config.url))return Promise.reject(e.data.msg);if(i.ZP.error(e.data.msg),"/pricing"!==window.location.pathname)return Promise.reject(e.data.msg)}}),(function(e){var t=e.response.status;return i.ZP.error("Network error! Error Code "+t),Promise.reject(e)}));r(6080);var _n=r(679),Zn=(r(3958),r(7049)),Un=(r(4529),r(3044)),Ln=(r(3416),r(4272)),Mn=(r(1837),r(4458)),Rn=(r(8032),r(4041)),zn=r(9101),Fn=r(9879);function Bn(e){return Bn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Bn(e)}function Hn(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,Vn(n.key),n)}}function Vn(e){var t=function(e,t){if("object"!=Bn(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=Bn(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==Bn(t)?t:String(t)}function Yn(e,t){return Yn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Yn(e,t)}function Gn(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Wn(e);if(t){var o=Wn(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"===Bn(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return qn(e)}(this,r)}}function qn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Wn(e){return Wn=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Wn(e)}Rn.Z.Option;var $n=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Yn(e,t)}(a,e);var t,r,n,o=Gn(a);function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=o.call(this,e)).state={isUploading:!1,isShownUpgrade:!1,percentage:0,isInCreate:!1,isCreateLoading:!1,premiumAlertType:"",isFolderCreated:!1,selectedFolder:"0-.-My Items"},t.handleUpload=t.handleUpload.bind(qn(t)),t.handleCreateProject=t.handleCreateProject.bind(qn(t)),t.enterCreate=t.enterCreate.bind(qn(t)),t.leaveCreate=t.leaveCreate.bind(qn(t)),t.onUploadProgress=t.onUploadProgress.bind(qn(t)),t.getCando=t.getCando.bind(qn(t)),t.handleCancelUpgrade=t.handleCancelUpgrade.bind(qn(t)),t.handleSelectFolder=t.handleSelectFolder.bind(qn(t)),t}return t=a,r=[{key:"componentDidMount",value:function(){}},{key:"handleUpload",value:function(e){var t=this;try{(new ColorThief).getColor(this.props.img).join(",")}catch(e){}var r=this.state.selectedFolder.split("-.-")[0],n=this.state.selectedFolder.split("-.-")[1];this.setState({isUploading:!0});var o="image/png"===this.props.contentType?".png":".jpg";new File([this.props.imageBlob],e.name+o,{type:this.props.contentType}),function(e,t,r,n,o){var i=new FormData;return i.append("file",t),i.append("title",r),i.append("folderID",e),i.append("share",!0),i.append("actionType","ext"),i.append("version",n),i.append("client",/Edg/.test(navigator.userAgent)?"Edge extension":"Firefox extension"),Nn({method:"POST",url:"/image/upload",data:i,onUploadProgress:function(e){var t=Math.round(100*e.loaded/e.total);o(t)}})}(r,this.props.imageBlob,e.name,chrome.extension.getBackgroundPage().currentversion,this.onUploadProgress).then((function(e){var o;(o=e.image.shareURI,rn()({method:"GET",url:"https://tinyurl.com/api-create.php?url="+o})).then((function(e){t.props.onUploadFinish({projectName:n,projectId:r,url:e.data})})).catch((function(){t.props.onUploadFinish({projectName:n,projectId:r,url:e.image.shareURI})}))})).catch((function(e){"Premium Plan Required!"===e&&t.setState({isShownUpgrade:!0,isUploading:!1,percentage:0,premiumAlertType:"uploadImage"})}))}},{key:"handleCreateProject",value:function(e){var t=this;this.setState({isCreateLoading:!0}),function(e,t){return Nn({method:"POST",url:"/folder/create",data:{name:e,parentID:t}})}(e.pName,"0").then((function(e){t.setState({isCreateLoading:!1,isInCreate:!1,selectedFolder:e.folder.folderID+"-.-"+e.folder.name}),t.props.onFolderCreated(e.folder)})).catch((function(e){i.ZP.error(e),t.setState({isCreateLoading:!1})}))}},{key:"getCando",value:function(e,t){return"project"===e?"free"!==this.props.currentPlan.PlanName||this.props.projects.length<1:"image"===e?"free"!==this.props.currentPlan.PlanName||this.props.projectsHash[t].ImgCount<30:void 0}},{key:"handleCancelUpgrade",value:function(){this.setState({isShownUpgrade:!1})}},{key:"enterCreate",value:function(){this.setState({isInCreate:!0})}},{key:"leaveCreate",value:function(){this.setState({isInCreate:!1})}},{key:"onUploadProgress",value:function(e){this.setState({percentage:e})}},{key:"handleSelectFolder",value:function(e){this.setState({selectedFolder:e})}},{key:"render",value:function(){var e=this,t=this.state,r=t.isUploading,n=t.percentage,o=t.isInCreate,i=t.isCreateLoading,a=t.premiumAlertType,s=t.isShownUpgrade,c=this.props,l=c.tabTitle,u=c.foldersTreeData;return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)("div",{className:"save-to-aws-panel",children:[(0,d.jsxs)("div",{className:"title",children:[(0,d.jsx)("div",{className:"logo",children:(0,d.jsx)("b",{})}),o?"Create a New Folder":"Awesome Screenshot"]}),(0,d.jsx)("div",{className:"box",children:r?(0,d.jsxs)("div",{className:"upload-progress",children:[(0,d.jsx)(Mn.Z,{type:"circle",percent:n}),(0,d.jsx)("div",{className:"upload-tip",children:n<100?"Uploading...":"Creating shareable link..."})]}):o?(0,d.jsxs)(Un.Z,{name:"createProject",onFinish:e.handleCreateProject,children:[(0,d.jsx)("div",{className:"label",children:"Folder name"}),(0,d.jsx)(Un.Z.Item,{name:"pName",rules:[{required:!0,message:"Please input a folder name!"}],children:(0,d.jsx)(Ln.Z,{size:"large"})}),(0,d.jsxs)(Un.Z.Item,{style:{textAlign:"right"},children:[(0,d.jsx)(J.Z,{size:"large",onClick:e.leaveCreate,style:{marginRight:8},children:"Cancel"}),(0,d.jsx)(J.Z,{size:"large",type:"primary",htmlType:"submit",loading:i,children:"Create"})]})]}):(0,d.jsxs)(Un.Z,{name:"uploadAwsForm",onFinish:e.handleUpload,children:[(0,d.jsx)("div",{className:"label",children:"Name"}),(0,d.jsx)(Un.Z.Item,{name:"name",rules:[{required:!0,message:"Please input a name!"}],initialValue:l,children:(0,d.jsx)(Ln.Z,{size:"large"})}),(0,d.jsx)("div",{className:"label",children:"Folder"}),(0,d.jsx)(_n.Z,{style:{width:"100%",marginBottom:"20px"},showSearch:!0,treeData:u,treeIcon:!0,loading:e.props.isfolderLoading,value:e.props.isfolderLoading?"":e.state.selectedFolder,onChange:e.handleSelectFolder,filterTreeNode:function(e,t){return-1!==t.title.indexOf(e)},dropdownRender:function(t){return(0,d.jsxs)("div",{children:[t,(0,d.jsx)(Zn.Z,{}),(0,d.jsxs)("div",{className:"select-action-btn",onClick:e.enterCreate,children:[(0,d.jsx)(zn.Z,{}),"Create a New Folder"]}),(0,d.jsxs)("div",{className:"select-action-btn",onClick:e.props.onRefreshProjects,children:[(0,d.jsx)(Fn.Z,{}),"Refresh Folders"]})]})}}),(0,d.jsx)(Un.Z.Item,{children:(0,d.jsx)(J.Z,{size:"large",type:"primary",className:"save-btn",block:!0,htmlType:"submit",children:"Upload"})})]})})]}),(0,d.jsx)(Dr,{visible:s,onCancel:this.handleCancelUpgrade,type:a})]})}}],r&&Hn(t.prototype,r),n&&Hn(t,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(a.Component);const Jn=$n;function Kn(e){return Kn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Kn(e)}function Qn(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Xn(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Qn(Object(r),!0).forEach((function(t){eo(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Qn(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function eo(e,t,r){return t=function(e){var t=function(e,t){if("object"!=Kn(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=Kn(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==Kn(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}const to=function(e){return(0,d.jsx)(n.Z,Xn(Xn({},e),{},{footer:null,maskClosable:!1,wrapClassName:"save-to-aws",destroyOnClose:!0,centered:!0,children:(0,d.jsx)(Jn,Xn({},e))}))};function ro(e){return new Promise((function(t,r){var n=null;hn(e).then((function(r){r.forEach((function(r,o){var i=r.width,a=r.height;n?n.addPage([Math.ceil(i),Math.ceil(a)],i>a?"l":"p"):n=new an.ZP({orientation:i>a?"l":"p",unit:"pt",format:[Math.ceil(i),Math.ceil(a)],compress:!0});var s=document.createElement("canvas"),c=s.getContext("2d");s.width=i,s.height=a,c.drawImage(r.ele,0,0,i,a,0,0,i,a);var l=s.toDataURL("image/jpeg",1);n.addImage(l,"JPEG",0,0,Math.ceil(i),Math.ceil(a),"","FAST"),o===e.length-1&&t(n.output("bloburl"))}))}))}))}function no(e,t){return new Promise((function(t,r){var n=14400;hn(e).then((function(e){var r=new an.ZP({orientation:e[0].width>e[0].height?"l":"p",unit:"pt",format:[Math.ceil(e[0].width),Math.ceil(n)],compress:!0}),o=n;e.forEach((function(e,t){for(var i=e.width,a=0,s=e.height;a<e.height;)if(o>0){var c=Math.min(s,o),l=document.createElement("canvas"),u=l.getContext("2d");l.width=i,l.height=c,u.drawImage(e.ele,0,a,i,c,0,0,i,c);var d=l.toDataURL("image/jpeg",1);r.addImage(d,"JPEG",0,n-o,Math.ceil(i),Math.ceil(c),"","FAST"),a+=c,s-=o,o-=c}else r.addPage({format:[i,n]}),o=n})),t(r.output("bloburl"))}))}))}var oo=r(1646),io=r.n(oo),ao=(r(4852),r(2530));function so(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,s=[],c=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);c=!0);}catch(e){l=!0,o=e}finally{try{if(!c&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return s}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return co(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return co(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function co(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var lo=Rn.Z.Option,uo=Rn.Z.OptGroup,fo=ao.ZP.Group,po={};const ho=function(e){var t=e.currentAccount,r=so((0,a.useState)([]),2),n=r[0],o=r[1],i=so((0,a.useState)([]),2),s=i[0],c=i[1];(0,a.useEffect)((function(){Promise.all([Tn({accountID:t.id,what:"channel"}),Tn({accountID:t.id,what:"member"})]).then((function(e){var t=e[0].items.concat(e[1].items);o(t.filter((function(e){return e.added}))),c(t.filter((function(e){return!e.added}))),po={},t.forEach((function(e){po[e.id]=e}))}))}),[]);var l=V.slack;return(0,d.jsxs)(Un.Z,{onFinish:function(r){En(t.id,po[r.channel].type,r.channel,po[r.channel].name,r.privacy,po[r.channel].info).then((function(t){e.handleDesCreated(t.destination)}))},children:[(0,d.jsx)("div",{className:"label",children:l.targetName}),(0,d.jsx)(Un.Z.Item,{name:"channel",rules:[{required:!0,message:"Please choose a channel or member"}],children:(0,d.jsxs)(Rn.Z,{showSearch:!0,placeholder:l.placeHolder,loading:n.length+s.length===0,filterOption:function(e,t){if(t.name)return t.name.toLowerCase().indexOf(e.toLowerCase())>=0},children:[n.length&&(0,d.jsx)(uo,{label:"Already Added",children:n.map((function(e){return(0,d.jsx)(lo,{value:e.id,name:e.name,disabled:!0,children:Y[e.type]+e.name},e.id)}))}),(0,d.jsx)(uo,{label:"Available",children:s.map((function(e){return(0,d.jsx)(lo,{value:e.id,name:e.name,children:Y[e.type]+e.name},e.id)}))})]})}),(0,d.jsx)(Un.Z.Item,{className:"des-share-option",name:"privacy",initialValue:"private",children:(0,d.jsxs)(fo,{children:[(0,d.jsx)(ao.ZP,{value:"private",children:"Private"}),(0,d.jsx)(ao.ZP,{value:"shared",children:"Shared"})]})}),(0,d.jsx)(J.Z,{type:"primary",className:"add-des-btn",size:"large",block:!0,htmlType:"submit",children:"Create Destination"})]})};function mo(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,s=[],c=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);c=!0);}catch(e){l=!0,o=e}finally{try{if(!c&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return s}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return yo(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return yo(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function yo(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var bo=Rn.Z.Option,vo=Rn.Z.OptGroup,go=ao.ZP.Group,jo={};const wo=function(e){var t=e.currentAccount,r=mo((0,a.useState)([]),2),n=r[0],o=r[1],i=mo((0,a.useState)([]),2),s=i[0],c=i[1];(0,a.useEffect)((function(){Tn({accountID:t.id,what:"board"}).then((function(e){var t=e.items;o(t.filter((function(e){return e.added}))),c(t.filter((function(e){return!e.added}))),jo={},t.forEach((function(e){jo[e.id]=e}))}))}),[]);var l=V.trello;return(0,d.jsxs)(Un.Z,{onFinish:function(r){En(t.id,jo[r.channel].type,r.channel,jo[r.channel].name,r.privacy,jo[r.channel].info).then((function(t){e.handleDesCreated(t.destination)}))},children:[(0,d.jsx)("div",{className:"label",children:l.targetName}),(0,d.jsx)(Un.Z.Item,{name:"channel",rules:[{required:!0,message:"Please choose a board"}],children:(0,d.jsxs)(Rn.Z,{showSearch:!0,placeholder:l.placeHolder,loading:n.length+s.length===0,filterOption:function(e,t){if(t.name)return t.name.toLowerCase().indexOf(e.toLowerCase())>=0},children:[n.length&&(0,d.jsx)(vo,{label:"Already Added",children:n.map((function(e){return(0,d.jsx)(bo,{value:e.id,name:e.name,disabled:!0,children:Y[e.type]+e.name},e.id)}))}),(0,d.jsx)(vo,{label:"Available",children:s.map((function(e){return(0,d.jsx)(bo,{value:e.id,name:e.name,children:Y[e.type]+e.name},e.id)}))})]})}),(0,d.jsx)(Un.Z.Item,{className:"des-share-option",name:"privacy",initialValue:"private",children:(0,d.jsxs)(go,{children:[(0,d.jsx)(ao.ZP,{value:"private",children:"Private"}),(0,d.jsx)(ao.ZP,{value:"shared",children:"Shared"})]})}),(0,d.jsx)(J.Z,{type:"primary",className:"add-des-btn",size:"large",block:!0,htmlType:"submit",children:"Create Destination"})]})};function xo(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,s=[],c=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);c=!0);}catch(e){l=!0,o=e}finally{try{if(!c&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return s}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return So(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return So(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function So(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var Oo=Rn.Z.Option,Po=Rn.Z.OptGroup,ko=ao.ZP.Group,Co={},No={};const Do=function(e){var t=e.currentAccount,r=xo((0,a.useState)([]),2),n=r[0],o=r[1],i=xo((0,a.useState)([]),2),s=i[0],c=i[1],l=xo((0,a.useState)([]),2),u=l[0],f=l[1];(0,a.useEffect)((function(){Tn({accountID:t.id,what:"workspace"}).then((function(e){var t=e.items;o(t),h(t[0].id),No={},t.forEach((function(e){No[e.id]=e}))}))}),[]);var p=V.asana;function h(e){c([]),f([]),Tn({accountID:t.id,what:"project",workspaceID:e}).then((function(e){var t=e.items;c(t.filter((function(e){return e.added}))),f(t.filter((function(e){return!e.added}))),Co={},t.forEach((function(e){Co[e.id]=e}))}))}return(0,d.jsxs)(Un.Z,{onFinish:function(r){En(t.id,"project",r.project,Co[r.project].name,r.privacy,Co[r.project].info).then((function(t){e.handleDesCreated(t.destination)}))},children:[(0,d.jsx)("div",{className:"label",children:p.targetName1}),(0,d.jsx)(Un.Z.Item,{name:"workspace",rules:[{required:!0,message:"Please choose a workspace"}],children:(0,d.jsx)(Rn.Z,{placeholder:p.placeHolder1,loading:0===n.length,onChange:function(e){h(e)},children:n.map((function(e){return(0,d.jsx)(Oo,{value:e.id,children:e.name},e.id)}))})}),(0,d.jsx)("div",{className:"label",children:p.targetName2}),(0,d.jsx)(Un.Z.Item,{name:"project",rules:[{required:!0,message:"Please choose a project"}],children:(0,d.jsxs)(Rn.Z,{showSearch:!0,placeholder:p.placeHolder2,loading:s.length+u.length===0,filterOption:function(e,t){if(t.name)return t.name.toLowerCase().indexOf(e.toLowerCase())>=0},children:[s.length&&(0,d.jsx)(Po,{label:"Already Added",children:s.map((function(e){return(0,d.jsx)(Oo,{value:e.id,name:e.name,disabled:!0,children:Y[e.type]+e.name},e.id)}))}),(0,d.jsx)(Po,{label:"Available",children:u.map((function(e){return(0,d.jsx)(Oo,{value:e.id,name:e.name,children:Y[e.type]+e.name},e.id)}))})]})}),(0,d.jsx)(Un.Z.Item,{className:"des-share-option",name:"privacy",initialValue:"private",children:(0,d.jsxs)(ko,{children:[(0,d.jsx)(ao.ZP,{value:"private",children:"Private"}),(0,d.jsx)(ao.ZP,{value:"shared",children:"Shared"})]})}),(0,d.jsx)(J.Z,{type:"primary",className:"add-des-btn",size:"large",block:!0,htmlType:"submit",children:"Create Destination"})]})};function Io(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,s=[],c=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);c=!0);}catch(e){l=!0,o=e}finally{try{if(!c&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return s}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return To(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return To(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function To(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var Eo=Rn.Z.Option,Ao=Rn.Z.OptGroup,_o=ao.ZP.Group,Zo={};const Uo=function(e){var t=e.currentAccount,r=Io((0,a.useState)([]),2),n=r[0],o=r[1],i=Io((0,a.useState)([]),2),s=i[0],c=i[1],l=function(e){Tn({accountID:t.id,what:"folder",query:e}).then((function(e){var t=e.items;o(t.filter((function(e){return e.added}))),c(t.filter((function(e){return!e.added}))),Zo={},t.forEach((function(e){Zo[e.id]=e}))}))};(0,a.useEffect)((function(){l()}),[]);var u=V.googleDrive;return(0,d.jsxs)(Un.Z,{onFinish:function(r){En(t.id,Zo[r.folder].type,r.folder,Zo[r.folder].name,r.privacy,Zo[r.folder].info).then((function(t){e.handleDesCreated(t.destination)}))},children:[(0,d.jsx)("div",{className:"label",children:u.targetName}),(0,d.jsxs)(Un.Z.Item,{name:"folder",rules:[{required:!0,message:"choose a folder"}],children:[(0,d.jsxs)(Rn.Z,{showSearch:!0,placeholder:u.placeHolder,loading:n.length+s.length===0,onSearch:function(e){l(e)},filterOption:!1,children:[n.length&&(0,d.jsx)(Ao,{label:"Already Added",children:n.map((function(e){return(0,d.jsx)(Eo,{value:e.id,disabled:!0,children:Y[e.type]+e.name},e.id)}))}),(0,d.jsx)(Ao,{label:"Available",children:s.map((function(e){return(0,d.jsx)(Eo,{value:e.id,children:Y[e.type]+e.name},e.id)}))})]}),(0,d.jsx)("div",{className:"tip",children:"Only 10 recent folders are listed. Type and search for other folders."})]}),(0,d.jsx)(Un.Z.Item,{className:"des-share-option",name:"privacy",initialValue:"private",children:(0,d.jsxs)(_o,{children:[(0,d.jsx)(ao.ZP,{value:"private",children:"Private"}),(0,d.jsx)(ao.ZP,{value:"shared",children:"Shared"})]})}),(0,d.jsx)(J.Z,{type:"primary",className:"add-des-btn",size:"large",block:!0,htmlType:"submit",children:"Create Destination"})]})};function Lo(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,s=[],c=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);c=!0);}catch(e){l=!0,o=e}finally{try{if(!c&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return s}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Mo(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return Mo(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Mo(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var Ro=Rn.Z.Option,zo=Rn.Z.OptGroup,Fo=ao.ZP.Group,Bo={};const Ho=function(e){var t=e.currentAccount,r=Lo((0,a.useState)([]),2),n=r[0],o=r[1],i=Lo((0,a.useState)([]),2),s=i[0],c=i[1];(0,a.useEffect)((function(){Tn({accountID:t.id,what:"repo"}).then((function(e){var t=e.items;o(t.filter((function(e){return e.added}))),c(t.filter((function(e){return!e.added}))),Bo={},t.forEach((function(e){Bo[e.id]=e}))}))}),[]);var l=V.github;return(0,d.jsxs)(Un.Z,{onFinish:function(r){En(t.id,Bo[r.repo].type,r.repo,Bo[r.repo].name,r.privacy,Bo[r.repo].info).then((function(t){e.handleDesCreated(t.destination)}))},children:[(0,d.jsx)("div",{className:"label",children:l.targetName}),(0,d.jsx)(Un.Z.Item,{name:"repo",rules:[{required:!0,message:"Please choose a channel or member"}],children:(0,d.jsxs)(Rn.Z,{placeholder:l.placeHolder,loading:n.length+s.length===0,showSearch:!0,onSearch:function(e){},filterOption:function(e,t){if(t.name)return t.name.toLowerCase().indexOf(e.toLowerCase())>=0},children:[n.length&&(0,d.jsx)(zo,{label:"Already Added",children:n.map((function(e){return(0,d.jsx)(Ro,{value:e.id,name:e.info.owner+e.name,disabled:!0,children:Y[e.type]+e.info.owner+"/"+e.name},e.id)}))}),(0,d.jsx)(zo,{label:"Available",children:s.map((function(e){return(0,d.jsx)(Ro,{value:e.id,name:e.info.owner+e.name,children:Y[e.type]+e.info.owner+"/"+e.name},e.id)}))})]})}),(0,d.jsx)(Un.Z.Item,{className:"des-share-option",name:"privacy",initialValue:"private",children:(0,d.jsxs)(Fo,{children:[(0,d.jsx)(ao.ZP,{value:"private",children:"Private"}),(0,d.jsx)(ao.ZP,{value:"shared",children:"Shared"})]})}),(0,d.jsx)(J.Z,{type:"primary",className:"add-des-btn",size:"large",block:!0,htmlType:"submit",children:"Create Destination"})]})};function Vo(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,s=[],c=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);c=!0);}catch(e){l=!0,o=e}finally{try{if(!c&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return s}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Yo(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return Yo(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Yo(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var Go=Rn.Z.Option,qo=Rn.Z.OptGroup,Wo=ao.ZP.Group,$o={},Jo={};const Ko=function(e){var t=e.currentAccount,r=Vo((0,a.useState)([]),2),n=r[0],o=r[1],i=Vo((0,a.useState)([]),2),s=i[0],c=i[1],l=Vo((0,a.useState)([]),2),u=l[0],f=l[1];(0,a.useEffect)((function(){Tn({accountID:t.id,what:"cloud"}).then((function(e){var t=e.items;o(t),h(t[0].id,t[0].name),Jo={},t.forEach((function(e){Jo[e.id]=e}))}))}),[]);var p=V.jira;function h(e,r){c([]),f([]),Tn({accountID:t.id,what:"project",cloudID:e,cloudName:r}).then((function(e){var t=e.items;c(t.filter((function(e){return e.added}))),f(t.filter((function(e){return!e.added}))),$o={},t.forEach((function(e){$o[e.id]=e}))}))}return(0,d.jsxs)(Un.Z,{onFinish:function(r){En(t.id,"project",r.project,$o[r.project].name,r.privacy,$o[r.project].info).then((function(t){e.handleDesCreated(t.destination)}))},children:[(0,d.jsx)("div",{className:"label",children:p.targetName1}),(0,d.jsx)(Un.Z.Item,{name:"site",rules:[{required:!0,message:"Please choose a site"}],children:(0,d.jsx)(Rn.Z,{placeholder:p.placeHolder1,loading:0===n.length,onChange:function(e){h(e,Jo[e].name)},children:n.map((function(e){return(0,d.jsx)(Go,{value:e.id,children:e.name},e.id)}))})}),(0,d.jsx)("div",{className:"label",children:p.targetName2}),(0,d.jsx)(Un.Z.Item,{name:"project",rules:[{required:!0,message:"Please choose a project"}],children:(0,d.jsxs)(Rn.Z,{showSearch:!0,placeholder:p.placeHolder2,loading:s.length+u.length===0,filterOption:function(e,t){if(t.name)return t.name.toLowerCase().indexOf(e.toLowerCase())>=0},children:[s.length&&(0,d.jsx)(qo,{label:"Already Added",children:s.map((function(e){return(0,d.jsx)(Go,{value:e.id,name:e.name,disabled:!0,children:Y[e.type]+e.name},e.id)}))}),(0,d.jsx)(qo,{label:"Available",children:u.map((function(e){return(0,d.jsx)(Go,{value:e.id,name:e.name,children:Y[e.type]+e.name},e.id)}))})]})}),(0,d.jsx)(Un.Z.Item,{className:"des-share-option",name:"privacy",initialValue:"private",children:(0,d.jsxs)(Wo,{children:[(0,d.jsx)(ao.ZP,{value:"private",children:"Private"}),(0,d.jsx)(ao.ZP,{value:"shared",children:"Shared"})]})}),(0,d.jsx)(J.Z,{type:"primary",className:"add-des-btn",size:"large",block:!0,htmlType:"submit",children:"Create Destination"})]})};function Qo(e){return Qo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Qo(e)}function Xo(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,ei(n.key),n)}}function ei(e){var t=function(e,t){if("object"!=Qo(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=Qo(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==Qo(t)?t:String(t)}function ti(e,t){return ti=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},ti(e,t)}function ri(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=oi(e);if(t){var o=oi(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"===Qo(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return ni(e)}(this,r)}}function ni(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function oi(e){return oi=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},oi(e)}var ii={},ai=Rn.Z.Option;Rn.Z.OptGroup;on().extend(io());var si=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&ti(e,t)}(i,e);var t,r,n,o=ri(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).state={isInAuthMode:!1,isLoadList:!1,currentResources:[],createAccount:"",createPrivacy:"private",createResource:null,isCreating:!1,currentAccount:e.currentAccount||(e.accounts?e.accounts[0]:null)||null,isShownUpgrade:!1},t.chooseDes=t.chooseDes.bind(ni(t)),t.back=t.back.bind(ni(t)),t.handleAccountChange=t.handleAccountChange.bind(ni(t)),t.handleConnect=t.handleConnect.bind(ni(t)),t.handlePrivacyChange=t.handlePrivacyChange.bind(ni(t)),t.handleResourceChange=t.handleResourceChange.bind(ni(t)),t.updateCurrentResources=t.updateCurrentResources.bind(ni(t)),t.handleMessage=t.handleMessage.bind(ni(t)),t.onAccountConnected=t.onAccountConnected.bind(ni(t)),t.handleUpgradeCancel=t.handleUpgradeCancel.bind(ni(t)),t.getPermissionByName=t.getPermissionByName.bind(ni(t)),t.getFreeTrialTip=t.getFreeTrialTip.bind(ni(t)),t.getIsShowPro=t.getIsShowPro.bind(ni(t)),t}return t=i,(r=[{key:"componentDidMount",value:function(){var e=this;chrome.runtime.onMessage.addListener((function(t,r,n){if("accountConnected"===t.action){var o=r.tab.id,i=JSON.parse(t.data);e.setState({isInAuthMode:!1}),e.onAccountConnected(i),chrome.tabs.remove(o)}}))}},{key:"componentWillUnmount",value:function(){}},{key:"handleMessage",value:function(e){if("accountConnected"===e.data.name){var t=JSON.parse(e.data.data);this.setState({isInAuthMode:!1}),this.onAccountConnected(t)}}},{key:"handleUpgradeCancel",value:function(){this.setState({isShownUpgrade:!1})}},{key:"onAccountConnected",value:function(e){this.props.handleAccountConnected(e),this.setState({currentAccount:e})}},{key:"chooseDes",value:function(e){this.getPermissionByName(e)?this.setState({isInAuthMode:!0,createAccount:e}):this.setState({isShownUpgrade:!0})}},{key:"getPermissionByName",value:function(e){return"googleDrive"===e?this.props.permissions["allow".concat(dn(e))]:this.props.permissions["allow".concat(dn(e))]||"free"!==this.props.currentPlan.PlanName}},{key:"getFreeTrialTip",value:function(){var e=this.props.permissions;if(e.trailConnectedAccountExpireTimeSecond>0){if(e.trailConnectedAccountExpireTimeSecond>Date.now()/1e3){var t=1e3*e.trailConnectedAccountExpireTimeSecond-Date.now(),r=on().duration(t,"milliseconds").asDays();if(r<1)var n="less than a day";else n=Math.ceil(r)+" days";return(0,d.jsxs)(d.Fragment,{children:["Free trial for pro services ends in ",n,".",(0,d.jsxs)("a",{target:"_blank",href:"https://www.awesomescreenshot.com/pricing",children:[" ","Upgrade now"]})]})}return(0,d.jsxs)(d.Fragment,{children:["The 7-days free trial was expired.",(0,d.jsxs)("a",{target:"_blank",href:"https://www.awesomescreenshot.com/pricing",children:[" ","Upgrade now"]})]})}return-1===e.trailConnectedAccountExpireTimeSecond?"":0===e.trailConnectedAccountExpireTimeSecond?"7-days free trial for pro services":void 0}},{key:"handleConnect",value:function(){In(this.state.createAccount).then((function(e){var t="width=800,height=700,top="+(window.screen.availHeight-30-700)/2+",left="+(window.screen.availWidth-10-800)/2;window.open(e.URI,"",t)}))}},{key:"handlePrivacyChange",value:function(e){this.setState({createPrivacy:e.target.value})}},{key:"handleResourceChange",value:function(e){this.setState({createResource:e})}},{key:"updateCurrentResources",value:function(e){ii={},e.forEach((function(e){ii[e.id]=e})),this.setState({currentResources:e,isLoadList:!1})}},{key:"handleAccountChange",value:function(e){this.setState({currentAccount:"add"===e?null:this.props.accountHash[e]})}},{key:"getIsShowPro",value:function(){return"free"===this.props.currentPlan.PlanName||"basic"===this.props.currentPlan.PlanName}},{key:"back",value:function(){this.setState({isInAuthMode:!1})}},{key:"render",value:function(){var e=this,t=this.props.accounts,r=this.state,n=r.currentResources,o=(r.isLoadList,r.createResource,r.createPrivacy,r.createAccount),i=(r.isCreating,r.currentAccount),a=r.isShownUpgrade;return n.filter((function(e){return e.added})),n.filter((function(e){return!e.added})),(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)("div",{className:"add-des-panel",children:this.state.isInAuthMode?(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)("div",{className:"top",children:(0,d.jsxs)("div",{className:"back-btn",onClick:this.back,children:[(0,d.jsx)(k.Z,{}),"Choose another integration"]})}),(0,d.jsx)("div",{className:"connect-panel",children:(0,d.jsxs)("div",{className:"box",children:[(0,d.jsxs)("div",{className:"main-box",children:[(0,d.jsx)("div",{className:"pic",children:(0,d.jsx)("div",{className:"logo ".concat(o)})}),(0,d.jsxs)("div",{className:"content",children:[(0,d.jsx)("div",{className:"logo ".concat(o)}),(0,d.jsxs)("div",{className:"title",children:["Integrate ",V[o].displayName]}),(0,d.jsx)("div",{className:"sub-title",children:V[o].panelSubTitle}),(0,d.jsx)("ul",{children:V[o].featureLists.map((function(e,t){return(0,d.jsx)("li",{children:e},t)}))})]})]}),(0,d.jsxs)(J.Z,{type:"primary",size:"large",onClick:this.handleConnect,children:["Connect with ",V[o].displayName]})]})})]}):(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)("div",{className:"title",children:i?"Create a new destination":"Connect a new account"}),(t&&t.length)>0&&(0,d.jsxs)("div",{className:"account-select",children:[(0,d.jsx)("div",{className:"label",children:"Connected account"}),(0,d.jsxs)(Rn.Z,{value:i?i.id:"add",onChange:this.handleAccountChange,children:[t.map((function(e){var t=u()("account-logo",e.service);return(0,d.jsxs)(ai,{value:e.id,children:[(0,d.jsx)("div",{className:t}),V[e.service].displayName," (",e.userInfo.name,")"]},e.id)})),(0,d.jsxs)(ai,{value:"add",children:[(0,d.jsx)("div",{className:"account-logo add"}),"Connect to a new account"]})]})]}),function(){if(i)return(0,d.jsx)("div",{className:"des-select",children:(0,d.jsx)("div",{className:"account-des-select",children:"slack"===i.service?(0,d.jsx)(ho,{currentAccount:i,handleDesCreated:e.props.handleDesCreated}):"trello"===i.service?(0,d.jsx)(wo,{currentAccount:i,handleDesCreated:e.props.handleDesCreated}):"asana"===i.service?(0,d.jsx)(Do,{currentAccount:i,handleDesCreated:e.props.handleDesCreated}):"googleDrive"===i.service?(0,d.jsx)(Uo,{currentAccount:i,handleDesCreated:e.props.handleDesCreated}):"github"===i.service?(0,d.jsx)(Ho,{currentAccount:i,handleDesCreated:e.props.handleDesCreated}):"jira"===i.service?(0,d.jsx)(Ko,{currentAccount:i,handleDesCreated:e.props.handleDesCreated}):void 0})});var t="saveElsewhere"===e.props.servicesType?q:G;return(0,d.jsxs)("div",{className:"service-container",children:["saveElsewhere"!==e.props.servicesType&&(0,d.jsx)("div",{className:"trial-tip",children:e.getFreeTrialTip()}),(0,d.jsx)("div",{className:"label",children:"Services"}),(0,d.jsx)("div",{className:"account-container",children:t.map((function(t){var r=u()("account-item",t.name,{pro:e.getIsShowPro()});return(0,d.jsx)("div",{className:r,"data-des":t.name,onClick:e.chooseDes.bind(null,t.name),children:(0,d.jsx)("b",{})},t.name)}))})]})}()]})}),(0,d.jsx)(Dr,{visible:a,onCancel:this.handleUpgradeCancel,type:"destination"})]})}}])&&Xo(t.prototype,r),n&&Xo(t,n),Object.defineProperty(t,"prototype",{writable:!1}),i}(a.Component);const ci=si;var li=r(9090);const ui=function(e){return(0,d.jsx)("div",{className:"slack-form",children:(0,d.jsxs)(Un.Z,{onFinish:function(t){e.handleSend(t)},children:[(0,d.jsx)("div",{className:"label",children:"Message"}),(0,d.jsx)(Un.Z.Item,{name:"description",children:(0,d.jsx)(Ln.Z.TextArea,{autoSize:{minRows:3},onChange:e.handleSlackMsgChange})}),(0,d.jsx)(Un.Z.Item,{children:(0,d.jsx)(J.Z,{className:"send-btn",size:"large",type:"primary",block:!0,htmlType:"submit",children:"Send message"})})]})})};r(6663);var di=r(8351),fi=(r(9263),r(5462)),pi=r(4029);function hi(e){return hi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},hi(e)}function mi(e,t,r){return t=function(e){var t=function(e,t){if("object"!=hi(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=hi(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==hi(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function yi(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,s=[],c=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);c=!0);}catch(e){l=!0,o=e}finally{try{if(!c&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return s}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return bi(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return bi(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function bi(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var vi=Rn.Z.Option;const gi=function(e){var t=yi((0,a.useState)(!1),2),r=t[0],n=t[1],o=yi((0,a.useState)([]),2),i=o[0],s=o[1],c=yi((0,a.useState)([]),2),l=c[0],u=c[1],f=yi((0,a.useState)([]),2),p=f[0],h=f[1],m=e.resourceID,y=e.currentDes;return(0,a.useEffect)((function(){Tn({accountID:y.accountID,what:"list",boardID:m}).then((function(e){s(e.items)})),Tn({accountID:y.accountID,what:"member",boardID:m}).then((function(e){u(e.items)})),Tn({accountID:y.accountID,what:"label",boardID:m}).then((function(e){h(e.items)}))}),[m]),(0,d.jsx)("div",{className:"trello-form",children:(0,d.jsxs)(Un.Z,{onFinish:function(t){var r={};t.description&&(r.description=void 0===t.description?"":t.description),r.listID=t.list,t.title&&(r.title=t.title),t.members&&(r.membersID=t.members.join(",")),t.labels&&(r.labelsID=t.labels.join(",")),t.dueDate&&!t.dueTime?r.date=t.dueDate.format("YYYY-MM-DD"):t.dueDate&&t.dueTime&&(r.datetime=on().utc(t.dueDate.format("YYYY-MM-DD")+"T"+t.dueTime.format().replace(/(.*)T/,""))),e.handleSend(r)},children:[(0,d.jsx)("div",{className:"label",children:"List"}),(0,d.jsx)(Un.Z.Item,{name:"list",rules:[{required:!0,message:"Please choose a list"}],initialValue:i.length?i[0].id:void 0,children:(0,d.jsx)(Rn.Z,{placeholder:"Please choose a list",showSearch:!0,filterOption:function(e,t){return t.name.toLowerCase().indexOf(e.toLowerCase())>=0},children:i.map((function(e){return(0,d.jsx)(vi,{value:e.id,name:e.name,children:e.name},e.id)}))})}),(0,d.jsx)("div",{className:"label",children:"Card title"}),(0,d.jsx)(Un.Z.Item,{name:"title",initialValue:e.tabTitle,children:(0,d.jsx)(Ln.Z,{})}),r&&(0,d.jsxs)("div",{className:"ad-fields",children:[(0,d.jsx)("div",{className:"label",children:"Description"}),(0,d.jsx)(Un.Z.Item,{name:"description",children:(0,d.jsx)(Ln.Z.TextArea,{autoSize:{minRows:3}})}),(0,d.jsx)("div",{className:"label",children:"Members"}),(0,d.jsx)(Un.Z.Item,{name:"members",children:(0,d.jsx)(Rn.Z,{mode:"multiple",style:{width:"100%"},placeholder:"Select members",showSearch:!0,filterOption:function(e,t){return t.name.toLowerCase().indexOf(e.toLowerCase())>=0},children:l.map((function(e){return(0,d.jsx)(vi,{value:e.id,name:e.name,children:e.name},e.id)}))})}),(0,d.jsx)("div",{className:"label",children:"Labels"}),(0,d.jsx)(Un.Z.Item,{name:"labels",children:(0,d.jsx)(Rn.Z,mi(mi(mi(mi({mode:"multiple",style:{width:"100%"},placeholder:"Select a label",className:"label-select"},"className","trello-member-select"),"showSearch",!0),"filterOption",(function(e,t){return t.name.toLowerCase().indexOf(e.toLowerCase())>=0})),"children",p.map((function(e){return(0,d.jsx)(vi,{value:e.id,name:e.name,children:(0,d.jsx)("div",{className:"trello-label-item "+e.info.color,children:e.name})},e.id)}))))}),(0,d.jsxs)("div",{className:"half-form",children:[(0,d.jsxs)("div",{className:"half",children:[(0,d.jsx)("div",{className:"label",children:"Due Date"}),(0,d.jsx)(Un.Z.Item,{name:"dueDate",children:(0,d.jsx)(fi.Z,{})})]}),(0,d.jsxs)("div",{className:"half",children:[(0,d.jsx)("div",{className:"label",children:"Due Time"}),(0,d.jsx)(Un.Z.Item,{name:"dueTime",children:(0,d.jsx)(di.Z,{use12Hours:!0,format:"h:mm A",className:"due-time-picker"})})]})]})]}),(0,d.jsx)("div",{className:"toggle-field",children:(0,d.jsx)("a",{className:"toggle-fields-btn",onClick:function(){n(!r)},children:r?(0,d.jsxs)(d.Fragment,{children:["Collapse all fields ",(0,d.jsx)(pi.Z,{})]}):(0,d.jsxs)(d.Fragment,{children:["Show all fields ",(0,d.jsx)(Xr.Z,{})]})})}),(0,d.jsx)("div",{children:(0,d.jsx)(J.Z,{className:"send-btn",size:"large",type:"primary",block:!0,htmlType:"submit",children:"Create card"})})]})})};function ji(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,s=[],c=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);c=!0);}catch(e){l=!0,o=e}finally{try{if(!c&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return s}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return wi(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return wi(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function wi(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var xi=Rn.Z.Option;const Si=function(e){var t=ji((0,a.useState)(!1),2),r=t[0],n=t[1],o=ji((0,a.useState)([]),2),i=o[0],s=o[1],c=ji((0,a.useState)([]),2),l=c[0],u=c[1],f=ji((0,a.useState)([]),2),p=f[0],h=f[1],m=e.currentDes,y=m.info.workspaceID,b=m.resourceID;return(0,a.useEffect)((function(){Tn({accountID:m.accountID,what:"section",projectID:b}).then((function(e){s(e.items)})),Tn({accountID:m.accountID,what:"member",projectID:b}).then((function(e){u(e.items)})),Tn({accountID:m.accountID,what:"tag",workspaceID:y}).then((function(e){h(e.items)}))}),[b]),(0,d.jsx)("div",{className:"trello-form",children:(0,d.jsxs)(Un.Z,{onFinish:function(t){var r={};t.description&&(r.description=t.description),t.section&&"-1"!==t.section&&(r.sectionID=t.section),t.title&&(r.title=t.title),t.tags&&(r.tagsID=t.tags.join(",")),t.assignee&&(r.assigneeID=t.assignee),t.dueDate&&!t.dueTime?r.date=t.dueDate.format("YYYY-MM-DD"):t.dueDate&&t.dueTime&&(r.datetime=on().utc(t.dueDate.format("YYYY-MM-DD")+"T"+t.dueTime.format().replace(/(.*)T/,""))),e.handleSend(r)},children:[(0,d.jsx)("div",{className:"label",children:"list"===m.info.layout?"Section":"Column"}),(0,d.jsx)(Un.Z.Item,{name:"section",initialValue:"list"!==m.info.layout?i.length?i[0].id:null:"-1",children:(0,d.jsxs)(Rn.Z,{children:["list"===m.info.layout&&(0,d.jsx)(xi,{value:"-1",children:"No section"}),i.map((function(e){return(0,d.jsx)(xi,{value:e.id,children:e.name},e.id)}))]})}),(0,d.jsx)("div",{className:"label",children:"Task name"}),(0,d.jsx)(Un.Z.Item,{name:"title",initialValue:e.tabTitle,children:(0,d.jsx)(Ln.Z,{})}),r&&(0,d.jsxs)("div",{className:"ad-fields",children:[(0,d.jsx)("div",{className:"label",children:"Description"}),(0,d.jsx)(Un.Z.Item,{name:"description",children:(0,d.jsx)(Ln.Z.TextArea,{autoSize:{minRows:3}})}),(0,d.jsx)("div",{className:"label",children:"Assignee"}),(0,d.jsx)(Un.Z.Item,{name:"assignee",children:(0,d.jsx)(Rn.Z,{style:{width:"100%"},placeholder:"Please select assignee",children:l.map((function(e){return(0,d.jsx)(xi,{value:e.id,children:e.name},e.id)}))})}),(0,d.jsx)("div",{className:"label",children:"Tags"}),(0,d.jsx)(Un.Z.Item,{name:"tags",children:(0,d.jsx)(Rn.Z,{mode:"multiple",style:{width:"100%"},placeholder:"Please select",children:p.map((function(e){return(0,d.jsx)(xi,{value:e.id,children:e.name},e.id)}))})}),(0,d.jsxs)("div",{className:"half-form",children:[(0,d.jsxs)("div",{className:"half",children:[(0,d.jsx)("div",{className:"label",children:"Due Date"}),(0,d.jsx)(Un.Z.Item,{name:"dueDate",children:(0,d.jsx)(fi.Z,{})})]}),(0,d.jsxs)("div",{className:"half",children:[(0,d.jsx)("div",{className:"label",children:"Due Time"}),(0,d.jsx)(Un.Z.Item,{name:"dueTime",children:(0,d.jsx)(di.Z,{use12Hours:!0,format:"h:mm A",className:"due-time-picker"})})]})]})]}),(0,d.jsx)("div",{className:"toggle-field",children:(0,d.jsx)("a",{className:"toggle-fields-btn",onClick:function(){n(!r)},children:r?(0,d.jsxs)(d.Fragment,{children:["Collapse all fields ",(0,d.jsx)(pi.Z,{})]}):(0,d.jsxs)(d.Fragment,{children:["Show all fields ",(0,d.jsx)(Xr.Z,{})]})})}),(0,d.jsx)("div",{children:(0,d.jsx)(J.Z,{className:"send-btn",size:"large",type:"primary",block:!0,htmlType:"submit",children:"Create task"})})]})})};const Oi=function(e){var t=e.tabTitle;return(0,d.jsx)("div",{className:"slack-form",children:(0,d.jsxs)(Un.Z,{onFinish:function(t){e.handleSend(values)},children:[(0,d.jsx)("div",{className:"label",children:"Name"}),(0,d.jsx)(Un.Z.Item,{name:"title",initialValue:t,children:(0,d.jsx)(Ln.Z,{onChange:e.handleSlackMsgChange})}),(0,d.jsx)("div",{children:(0,d.jsx)(J.Z,{className:"send-btn",size:"large",type:"primary",block:!0,htmlType:"submit",children:"Upload image"})})]})})};function Pi(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,s=[],c=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);c=!0);}catch(e){l=!0,o=e}finally{try{if(!c&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return s}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return ki(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return ki(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ki(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var Ci=Rn.Z.Option;const Ni=function(e){var t=Pi((0,a.useState)(!1),2),r=t[0],n=t[1],o=Pi((0,a.useState)([]),2),i=o[0],s=o[1],c=Pi((0,a.useState)([]),2),l=c[0],u=c[1],f=e.resourceID,p=e.currentDes;return(0,a.useEffect)((function(){Tn({accountID:p.accountID,what:"assignee",repo:p.resourceName,owner:p.info.owner}).then((function(e){s(e.items)})),Tn({accountID:p.accountID,what:"label",repo:p.resourceName,owner:p.info.owner}).then((function(e){u(e.items)}))}),[f]),(0,d.jsx)("div",{className:"github-form",children:(0,d.jsxs)(Un.Z,{onFinish:function(t){var r={};t.description&&(r.description=void 0===t.description?"":t.description),r.listID=t.list,t.title&&(r.title=t.title),t.assignees&&(r.assignees=t.assignees.join(",")),t.labels&&(r.labels=t.labels.join(",")),e.handleSend(r)},children:[(0,d.jsx)("div",{className:"label",children:"Issue title"}),(0,d.jsx)(Un.Z.Item,{name:"title",initialValue:e.tabTitle,children:(0,d.jsx)(Ln.Z,{})}),r&&(0,d.jsxs)("div",{className:"ad-fields",children:[(0,d.jsx)("div",{className:"label",children:"Description"}),(0,d.jsx)(Un.Z.Item,{name:"description",children:(0,d.jsx)(Ln.Z.TextArea,{autoSize:{minRows:3}})}),(0,d.jsx)("div",{className:"label",children:"Assignee"}),(0,d.jsx)(Un.Z.Item,{name:"assignees",children:(0,d.jsx)(Rn.Z,{mode:"multiple",style:{width:"100%"},placeholder:"Assign a member",children:i.map((function(e){return(0,d.jsx)(Ci,{value:e.name,children:e.name},e.id)}))})}),(0,d.jsx)("div",{className:"label",children:"Labels"}),(0,d.jsx)(Un.Z.Item,{name:"labels",children:(0,d.jsx)(Rn.Z,{mode:"multiple",style:{width:"100%"},placeholder:"Select a label",className:"label-select",children:l.map((function(e){var t={backgroundColor:"#"+e.info.color};return"ffffff"===e.info.color&&(t.color="black",t.border="1px solid #eee"),(0,d.jsx)(Ci,{value:e.name,children:(0,d.jsx)("div",{style:t,className:"trello-label-item",children:e.name})},e.id)}))})})]}),(0,d.jsx)("div",{className:"toggle-field",children:(0,d.jsx)("a",{className:"toggle-fields-btn",onClick:function(){n(!r)},children:r?(0,d.jsxs)(d.Fragment,{children:["Collapse all fields ",(0,d.jsx)(pi.Z,{})]}):(0,d.jsxs)(d.Fragment,{children:["Show all fields ",(0,d.jsx)(Xr.Z,{})]})})}),(0,d.jsx)("div",{children:(0,d.jsx)(J.Z,{className:"send-btn",size:"large",type:"primary",block:!0,htmlType:"submit",children:"Create issue"})})]})})};r(2690);var Di=r(1382),Ii=(r(1819),r(8592)),Ti=Rn.Z.Option;function Ei(e){var t=e.field,r=t.allowedValues,n=t.defaultValue,o=-1!==t.operations.indexOf("add")?"multiple":void 0;return(0,d.jsx)(Rn.Z,{defaultValue:n?n.id:void 0,mode:o,onChange:function(n){var o=n;"customfield_10021"===t.key&&(o=n.map((function(e){return function(e){var t=null;return r.forEach((function(r){r.id===e&&(t=r)})),t}(e)}))),e.handleChange(t.key,o)},children:r.map((function(e){return(0,d.jsx)(Ti,{value:e.id,children:e.name||e.value},e.id)}))})}function Ai(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,s=[],c=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);c=!0);}catch(e){l=!0,o=e}finally{try{if(!c&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return s}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return _i(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return _i(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _i(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var Zi=Rn.Z.Option;function Ui(e){var t=Ai((0,a.useState)([]),2),r=t[0],n=t[1],o=e.field,i=e.currentDes;(0,a.useEffect)((function(){Tn({accountID:i.accountID,what:"autoComplete",fieldName:o.key,cloudID:i.info.cloudID,projectID:i.info.projectID}).then((function(e){n(e.items?e.items:[])}))}),[]);var s=-1!==o.operations.indexOf("add")?"multiple":void 0;return(0,d.jsx)(Rn.Z,{mode:s,onChange:function(t){e.handleChange(o.key,t)},children:r.map((function(e){return function(e){return"assignee"===o.key?(0,d.jsx)(Zi,{value:e.info.user.accountId,children:e.info.user.displayName},e.info.user.accountId):"reporter"===o.key?(0,d.jsx)(Zi,{value:e.id,children:e.info.field.displayName},e.id):"labels"===o.key?(0,d.jsx)(Zi,{value:e.info.field.value,children:e.info.field.displayName},e.info.field.value):(0,d.jsx)(Zi,{})}(e)}))})}var Li=r(3279),Mi=r.n(Li),Ri=r(3695);function zi(e){return function(e){if(Array.isArray(e))return Hi(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Bi(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Fi(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,s=[],c=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);c=!0);}catch(e){l=!0,o=e}finally{try{if(!c&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return s}}(e,t)||Bi(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Bi(e,t){if(e){if("string"==typeof e)return Hi(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Hi(e,t):void 0}}function Hi(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var Vi=Rn.Z.Option;function Yi(e){var t=Fi((0,a.useState)([{id:Date.now(),linkType:"",issues:[]}]),2),r=t[0],n=t[1],o=Fi((0,a.useState)([]),2),i=o[0],s=o[1],c=Fi((0,a.useState)([]),2),l=c[0],u=c[1],f=(e.field,e.currentDes);(0,a.useEffect)((function(){Tn({accountID:f.accountID,what:"issueLinkType",cloudID:f.info.cloudID,projectID:f.info.projectID}).then((function(e){var t=[];e.items.forEach((function(e){"Relates"===e.name?t.push({value:e.name+"+in",displayName:e.info.inward}):(t.push({value:e.name+"+in",displayName:e.info.inward}),t.push({value:e.name+"+out",displayName:e.info.outward}))})),s(t)}))}),[]),(0,a.useEffect)((function(){e.handleChange("issuelinks",r)}),[r]);var p=function(e,t){Tn({accountID:f.accountID,what:"issue",cloudID:f.info.cloudID,query:t}).then((function(e){e.items[0].info.issues.length>0&&u(e.items[0].info.issues)}))};return(0,d.jsxs)("div",{className:"issue-link",children:[(0,d.jsxs)("div",{className:"label",children:["Linked issues",(0,d.jsx)("div",{className:"add-btn",onClick:function(){n([].concat(zi(r),[{id:Date.now(),linkType:"",issues:[]}]))},children:(0,d.jsx)(Br.Z,{title:"Add",children:(0,d.jsx)(zn.Z,{})})})]}),(0,d.jsx)("div",{className:"issue-link-container",children:r.map((function(e,t){return(0,d.jsxs)("div",{className:"issue-link-item",children:[(0,d.jsx)(Rn.Z,{className:"issue-link-type-select",placeholder:"Link type",onChange:function(t){!function(e,t){var o=r.filter((function(t){return t.id===e}));o[0].linkType=t;var i=r.map((function(t){return t.id===e?o[0]:t}));n(i)}(e.id,t)},children:i.map((function(e){return(0,d.jsx)(Vi,{value:e.value,children:e.displayName},e.value)}))}),(0,d.jsx)(Rn.Z,{className:"issue-link-select",placeholder:"Select issues",mode:"multiple",onSearch:Mi()((function(t){return p(e.id,t)}),800),onDropdownVisibleChange:function(t){t&&p(e.id,"")},onChange:function(t){return function(e,t){var o=r.filter((function(t){return t.id===e}));o[0].issues=t;var i=r.map((function(t){return t.id===e?o[0]:t}));n(i)}(e.id,t)},children:l.map((function(e){return(0,d.jsx)(Vi,{value:e.key,children:e.key},e.key)}))}),(0,d.jsx)("div",{className:"issue-link-remove",onClick:function(){var t;t=e.id,n(r.filter((function(e){return e.id!==t})))},children:(0,d.jsx)(Br.Z,{title:"Remove",children:(0,d.jsx)(Ri.Z,{})})})]},e.id)}))})]})}function Gi(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,s=[],c=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);c=!0);}catch(e){l=!0,o=e}finally{try{if(!c&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return s}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return qi(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return qi(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function qi(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var Wi=Rn.Z.Option;function $i(e){var t=Gi((0,a.useState)([]),2),r=t[0],n=t[1],o=e.field,i=e.currentDes;(0,a.useEffect)((function(){}),[]);var s=function(e){var t;Tn({accountID:i.accountID,what:(t=o.key,"customfield_10014"===t?"epic":"customfield_10021"==t?"sprint":void 0),cloudName:i.info.cloudName,query:e,cloudID:i.info.cloudID,projectID:i.info.projectID}).then((function(e){n(e.items?e.items:[])}))},c=-1!==o.operations.indexOf("add")?"multiple":void 0;return(0,d.jsx)(Rn.Z,{showSearch:!0,mode:c,filterOption:!1,onChange:function(t){e.handleChange(o.key,t)},onSearch:Mi()(s,800),onDropdownVisibleChange:function(e){e&&s("")},children:r.map((function(e){return function(e){return"customfield_10021"===o.key?(0,d.jsxs)(Wi,{value:e.id,children:[e.name,"(",e.info.data.stateKey,")"]},e.id):"customfield_10014"===o.key?(0,d.jsxs)(Wi,{value:e.id,children:[e.name,"-(",e.id,")"]},e.id):(0,d.jsx)(Wi,{})}(e)}))})}function Ji(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,s=[],c=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);c=!0);}catch(e){l=!0,o=e}finally{try{if(!c&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return s}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Ki(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return Ki(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ki(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const Qi=function(e){var t=Ji((0,a.useState)(!1),2),r=t[0],n=t[1],o=e.currentDes;return(0,d.jsxs)("div",{className:"jira-api-token-panel",children:[(0,d.jsxs)("div",{className:"info",children:["Go to your Atlassian"," ",(0,d.jsx)("a",{href:"https://id.atlassian.com/manage/api-tokens",target:"_blank",children:"API tokens page"})," ","and create a new API token. Copy the token and paste it into the box below."]}),(0,d.jsxs)(Un.Z,{onSubmit:function(t){var r,i;n(!0),(r=o.account.id,i=t.token,Nn({method:"POST",url:"/account/jira_basic_token",data:{accountID:r,token:i}})).then((function(){n(!1),e.handleApiTokenSubmitted()})).catch((function(){n(!1)}))},children:[(0,d.jsx)("div",{className:"label",children:"API TOKEN"}),(0,d.jsx)(Un.Z.Item,{name:"token",rules:[{required:!0}],children:(0,d.jsx)(Ln.Z,{})}),(0,d.jsx)(Un.Z.Item,{children:(0,d.jsx)(J.Z,{type:"primary",block:!0,loading:r,htmlType:"submit",children:"Submit"})})]})]})};function Xi(e){return Xi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Xi(e)}function ea(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function ta(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ea(Object(r),!0).forEach((function(t){ra(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ea(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function ra(e,t,r){return t=function(e){var t=function(e,t){if("object"!=Xi(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=Xi(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==Xi(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function na(e){return(0,d.jsx)(n.Z,ta(ta({},e),{},{footer:null,maskClosable:!1,wrapClassName:"jira-api-token",destroyOnClose:!0,centered:!0,title:"Submit Jira API token",children:(0,d.jsx)(Qi,ta({},e))}))}function oa(e){return oa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},oa(e)}function ia(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function aa(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ia(Object(r),!0).forEach((function(t){sa(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ia(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function sa(e,t,r){return t=function(e){var t=function(e,t){if("object"!=oa(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=oa(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==oa(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function ca(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,s=[],c=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);c=!0);}catch(e){l=!0,o=e}finally{try{if(!c&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return s}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return la(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return la(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function la(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var ua=Rn.Z.Option,da={};const fa=function(e){var t=ca((0,a.useState)(!1),2),r=t[0],n=t[1],o=ca((0,a.useState)({}),2),i=o[0],s=o[1],l=ca((0,a.useState)([]),2),u=l[0],f=l[1],p=ca((0,a.useState)(null),2),h=p[0],m=p[1],y=ca((0,a.useState)(!1),2),b=y[0],v=y[1],g=e.currentDes;(0,a.useEffect)((function(){u.length&&f([]),Tn({accountID:g.accountID,what:"createMeta",cloudID:g.info.cloudID,projectID:g.info.projectID}).then((function(e){m(e.items[0]),f(e.items),e.items.forEach((function(e){da[e.id]=e}))}))}),[e.currentDes]),(0,a.useEffect)((function(){}));var j,w=function(e,t){s(aa(aa({},i),{},sa({},e,t)))},x=function(e){var t={fields:{}},r={};for(var n in r.project={id:g.info.projectID},e)"issuetype"===n||"priority"===n||"assignee"===n?r[n]={id:e[n]}:"summary"===n||"description"===n||"environment"===n||"customfield_10014"===n||"customfield_10016"===n||"labels"===n||"customfield_10037"===n||"customfield_10038"===n||"customfield_10039"===n||"customfield_10029"===n||"customfield_10034"===n||"customfield_10035"===n||"customfield_10036"===n||"customfield_10031"===n||"customfield_10032"===n||"customfield_10033"===n||"customfield_10021"===n?e[n]&&(r[n]=e[n]):"components"===n?r[n]=e[n].map((function(e){return{id:e}})):"customfield_10026"===n?e[n]&&(r[n]=[{id:h.info.fields.customfield_10026.allowedValues[0].id}]):"fixVersions"===n?r[n]=e[n].map((function(e){return{id:e}})):"reporter"===n?e[n]&&(r[n]={id:e[n]}):"parent"===n?e[n]&&(r[n]={key:e[n]}):"duedate"!==n&&"customfield_10015"!==n&&"customfield_10030"!==n||e[n]&&(r[n]=e[n].format());return(e["timetracking-o"]||e["timetracking-r"])&&(r.timetracking={}),e["timetracking-o"]&&(r.timetracking.originalEstimate=e["timetracking-o"]),e["timetracking-r"]&&(r.timetracking.remainingEstimate=e["timetracking-r"]),t.fields=r,e.issuelinks&&e.issuelinks.length&&(t.issueLinks=[],e.issuelinks.forEach((function(e){if(e.linkType&&e.issues.length){var r=e.linkType.split("+"),n=r[0],o=r[1];e.issues.forEach((function(e){var r=sa({type:n},"".concat(o,"wardIssue"),e);t.issueLinks.push(r)}))}}))),t},S=function(e){return"timetracking"===e.key?"(eg. 3w 4d 12h)":""},O=function(){v(!0)},P=function(e){return void 0!==e.allowedValues?(0,d.jsx)(Ei,{handleChange:w,field:e}):void 0!==e.autoCompleteUrl?(0,d.jsx)(Ui,{handleChange:w,currentDes:g,field:e}):"description"===e.key||"environment"===e.key?(0,d.jsx)(Un.Z.Item,{name:e.key,children:(0,d.jsx)(Ln.Z.TextArea,{autoSize:{minRows:3}})}):"customfield_10014"===e.key?(0,d.jsx)($i,{handleChange:w,currentDes:g,field:e}):"customfield_10021"===e.key?h.info.apiToken?(0,d.jsx)($i,{handleChange:w,currentDes:g,field:e}):(0,d.jsx)(d.Fragment,{children:(0,d.jsxs)("i",{className:"jira-sprint-tip",children:["To use Sprint, you need to provide an API token."," ",(0,d.jsx)("a",{onClick:O,children:"Submit API token"})]})}):(0,d.jsx)(Un.Z.Item,{name:e.key,children:(0,d.jsx)(Ln.Z,{placeholder:S(e)})})};return(0,d.jsxs)("div",{className:"jira-form",children:[0===u.length?(0,d.jsx)("div",{className:"loading",children:(0,d.jsx)(Di.Z,{indicator:(0,d.jsx)(li.Z,{spin:!0})})}):(0,d.jsxs)(Un.Z,{onFinish:function(t){var r=aa(aa({},t),i),n=x(r),o=h.info.fields;o.environment&&!n.fields.environment&&(n.fields.environment=""),o.description&&!n.fields.description&&(n.fields.description=""),e.handleSend(n)},children:[(0,d.jsx)("div",{className:"label",children:"Issue Type"}),(0,d.jsx)(Un.Z.Item,{name:"issuetype",initialValue:u[0].id,children:(0,d.jsx)(Rn.Z,{onChange:function(e,t){m(da[e])},children:u.map((function(e){if("Subtask"!==e.name)return(0,d.jsx)(ua,{value:e.id,children:e.name},e.id)}))})}),(0,d.jsx)("div",{className:"label",children:"Summary"}),(0,d.jsx)(Un.Z.Item,{name:"summary",rules:[{required:!0,message:"You must specify a summary of the issue."}],children:(0,d.jsx)(Ln.Z,{})}),r&&(j=h.info.fields,(0,d.jsx)(d.Fragment,{children:Object.keys(j).map((function(e){return"issuetype"===e||"project"===e||"summary"===e||"attachment"===e?void 0:"timetracking"===e?(0,d.jsxs)("div",{children:[(0,d.jsxs)("div",{children:[(0,d.jsx)("div",{className:"label",children:"Original Estimate"}),(0,d.jsx)(Un.Z.Item,{name:"timetracking-o",children:(0,d.jsx)(Ln.Z,{placeholder:"(eg. 3w 4d 12h)"})})]},"oe"),(0,d.jsxs)("div",{children:[(0,d.jsx)("div",{className:"label",children:"Remaining Estimate"}),(0,d.jsx)(Un.Z.Item,{name:"timetracking-r",children:(0,d.jsx)(Ln.Z,{placeholder:"(eg. 3w 4d 12h)"})})]},"re")]},j[e].key):"issuelinks"===e?(0,d.jsx)("div",{children:(0,d.jsx)(Yi,{handleChange:w,currentDes:g,field:j})},j[e].key):"duedate"===e||"customfield_10030"===e||"customfield_10015"===e?(0,d.jsxs)("div",{children:[(0,d.jsx)("div",{className:"label",children:j[e].name}),(0,d.jsx)(Un.Z.Item,{name:e,children:(0,d.jsx)(fi.Z,{style:{width:"100%"}})})]},j[e].key):"customfield_10022"===e||"customfield_10017"===e?"":"customfield_10016"===e?(0,d.jsxs)("div",{children:[(0,d.jsx)("div",{className:"label",children:j[e].name}),(0,d.jsx)(Un.Z.Item,{name:e,children:(0,d.jsx)(Ii.Z,{style:{width:"100%"}})})]},j[e].key):"customfield_10026"===e?(0,d.jsxs)("div",{children:[(0,d.jsx)("div",{className:"label",children:j[e].name}),(0,d.jsx)(Un.Z.Item,{name:e,children:(0,d.jsx)(c.Z,{children:j[e].allowedValues[0].value})})]},j[e].key):(0,d.jsxs)("div",{children:[(0,d.jsx)("div",{className:"label",children:j[e].name}),P(j[e])]},j[e].key)}))})),(0,d.jsx)("div",{className:"toggle-field",children:(0,d.jsx)("a",{className:"toggle-fields-btn",onClick:function(){n(!r)},children:r?(0,d.jsxs)(d.Fragment,{children:["Collapse all fields ",(0,d.jsx)(pi.Z,{})]}):(0,d.jsxs)(d.Fragment,{children:["Show all fields ",(0,d.jsx)(Xr.Z,{})]})})}),(0,d.jsx)("div",{children:(0,d.jsx)(J.Z,{className:"send-btn",size:"large",type:"primary",block:!0,htmlType:"submit",children:"Create issue"})})]}),(0,d.jsx)(na,{visible:b,onCancel:function(){v(!1)},currentDes:g,handleApiTokenSubmitted:function(){v(!1),u.length&&f([]),Tn({accountID:g.accountID,what:"createMeta",cloudID:g.info.cloudID,projectID:g.info.projectID}).then((function(e){m(e.items[0]),f(e.items),e.items.forEach((function(e){da[e.id]=e}))}))}})]})};function pa(e){return pa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},pa(e)}function ha(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,ma(n.key),n)}}function ma(e){var t=function(e,t){if("object"!=pa(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=pa(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==pa(t)?t:String(t)}function ya(e,t){return ya=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},ya(e,t)}function ba(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=ga(e);if(t){var o=ga(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"===pa(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return va(e)}(this,r)}}function va(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ga(e){return ga=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},ga(e)}var ja=Rn.Z.Option,wa=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&ya(e,t)}(s,e);var t,r,n,a=ba(s);function s(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),(t=a.call(this,e)).state={currentDesId:t.props.currentDes.id,slackMsg:"",isUploading:!1,percentage:0},t.handleDesChange=t.handleDesChange.bind(va(t)),t.handleSend=t.handleSend.bind(va(t)),t.handleSlackMsgChange=t.handleSlackMsgChange.bind(va(t)),t.onUploadProgress=t.onUploadProgress.bind(va(t)),t}return t=s,r=[{key:"handleDesChange",value:function(e){"add"!==e?this.setState({currentDesId:e}):this.props.goToAddDes()}},{key:"onUploadProgress",value:function(e){this.setState({percentage:e})}},{key:"handleSend",value:function(e){var t=this,r=this.props.destinations,n=this.state.currentDesId,a={};r.forEach((function(e){a[e.id]=e}));var s=a[n];e.service=s.service,e.destinationID=n+"";var c,l=e.description;if(this.props.tabUrl&&(e.sourceLink=this.props.tabUrl),"trello"===e.service?e.extraString=function(e){if(!e)return"";var t="";for(var r in e)t+="**"+r+"**: "+e[r]+" \n";return t}(this.props.imageInfo):"asana"===e.service?e.extraString=function(e){if(!e)return"";var t="";return t+"Captured in "+e.Browser+", "+e["Viewport Size"]+" viewport, "+e["Pixel Ratio"]+" pixel ratio, "+e["Zoom Level"]+" zoom, "+e.OS}(this.props.imageInfo):"github"===e.service?e.extraString=function(e){if(!e)return"";var t="<table>";for(var r in e)t+="<tr><td><strong>"+r+"</strong></td><td>"+e[r]+"</td></tr>";return t+"</table> \n"}(this.props.imageInfo):"jira"===e.service&&(void 0!==e.fields.environment?(e.fields.environment=un(e.fields.environment,this.props.imageInfo,this.props.itemUrl,this.props.type),void 0!==e.fields.description&&(e.fields.description={version:1,type:"doc",content:[{type:"paragraph",content:[{type:"text",text:e.fields.description}]}]})):void 0!==e.fields.description&&(e.fields.description=un(e.fields.description,this.props.imageInfo,this.props.itemUrl,this.props.type))),this.props.itemId)"video"===this.props.type?e.videoID=this.props.itemId:e.imageID=this.props.itemId,this.setState({isUploading:!0}),(c=e,Nn({method:"POST",url:"/account/share_item",data:c})).then((function(r){o.Z.success({message:V[e.service].successMsg,description:(0,d.jsxs)("a",{href:r.itemUrl,target:"_blank",children:["Click to see it in your ",V[e.service].displayName]})}),t.props.handleSendSuccess()}),(function(e){throw new Error(V[s.service].actionTypeStr+" failed! ("+e+")")})).catch((function(e){e&&i.ZP.error(e.toString()+" Please try again!"),t.setState({isUploading:!1,percentage:0})}));else{if(this.props.imageBlob)var u=this.props.contentType;else{var f=this.props.imageUrl.split(",")[1];u=this.props.imageUrl.split(",")[0].split(":")[1].split(";")[0]}this.setState({isUploading:!0}),function(e){return Nn({method:"POST",url:"/destination/image/create",data:e})}({Title:e.title||"",Description:l,DestID:this.state.currentDesId+"",ContentType:u}).then((function(r){var n=t.props.imageBlob?t.props.imageBlob:sn(f,u),i=new File([n],"test.png"),a=r.Image.S3Key;return e.destinationImageID=r.Image.ImageID+"",e.imageURL=Sn+"/destination/image/show?ImageKey="+a,e.imageName=t.props.tabTitle+"."+u.replace("image/",""),function(e,t,r){var n=new FormData;for(var o in e)n.append(o,e[o]);var i=r||"https://awesomescreenshot.s3.amazonaws.com/";return rn()({method:"POST",crossdomain:!0,url:i,data:n,onUploadProgress:function(e){var r=Math.round(100*e.loaded/e.total);t(r)}})}({AWSAccessKeyId:"AKIAJSCJQ2NM3XLFPVKA",acl:"private",key:r.Image.S3Key,"Content-Type":u,policy:r.Policy,signature:r.Signature,file:i},t.onUploadProgress).then((function(r){return function(e){return Nn({method:"GET",url:"/destination/image/upload_done",params:{key:e}})}(a).then((function(r){return function(e){return Nn({method:"POST",url:"/account/share_screenshot",data:e})}(e).then((function(r){o.Z.success({message:V[e.service].successMsg,description:(0,d.jsxs)("a",{href:r.itemUrl,target:"_blank",children:["Click to see it in your"," ",V[e.service].displayName]})}),t.props.handleSendSuccess()}),(function(e){throw new Error(V[s.service].actionTypeStr+" failed! ("+e+")")}))}))}),(function(e){throw new Error("Upload image failed!")}))}),(function(e){throw new Error("Create image error!("+e+")")})).catch((function(e){e&&i.ZP.error(e.toString()+" Please try again!"),t.setState({isUploading:!1,percentage:0})}))}}},{key:"handleSlackMsgChange",value:function(e){this.setState({slackMsg:e.currentTarget.value})}},{key:"render",value:function(){var e=this,t=this.props,r=t.destinations,n=t.itemUrl,o=this.state,i=o.currentDesId,a=o.isUploading,s=o.percentage,c={};r.forEach((function(e){c[e.id]=e}));var l=c[i],f=u()("upload-progress",{active:a}),p=u()("destination-area",{active:!a});return(0,d.jsxs)("div",{className:"des-panel",children:[(0,d.jsx)("div",{className:"title",children:V[l.service].panelTitle}),(0,d.jsxs)("div",{className:f,children:[n?(0,d.jsx)(li.Z,{className:"loading"}):(0,d.jsx)(Mn.Z,{type:"circle",status:"active",percent:s}),(0,d.jsx)("div",{className:"upload-tip",children:s<100&&!n?"Uploading image...":V[l.service].actionTypeStr+"..."})]}),(0,d.jsxs)("div",{className:p,children:[(0,d.jsxs)("div",{className:"destination-select",children:[(0,d.jsx)("div",{className:"label",children:"Destination"}),(0,d.jsxs)(Rn.Z,{value:i,onChange:this.handleDesChange,children:[r.map((function(e){var t=u()("des-logo",e.service);return(0,d.jsxs)(ja,{value:e.id,children:[(0,d.jsx)("div",{className:t}),Y[e.resourceType]+e.resourceName]},e.id)})),(0,d.jsxs)(ja,{value:"add",children:[(0,d.jsx)("div",{className:"des-logo add"}),"Create a new destination"]},"add")]})]}),(0,d.jsx)("div",{className:"des-form",children:"slack"===l.service?(0,d.jsx)(ui,{currentDes:l,tabTitle:e.props.tabTitle,handleSend:e.handleSend,handleSlackMsgChange:e.handleSlackMsgChange}):"trello"===l.service?(0,d.jsx)(gi,{currentDes:l,tabTitle:e.props.tabTitle,resourceID:l.resourceID,handleSend:e.handleSend}):"asana"===l.service?(0,d.jsx)(Si,{tabTitle:e.props.tabTitle,currentDes:l,handleSend:e.handleSend}):"googleDrive"===l.service?(0,d.jsx)(Oi,{tabTitle:e.props.tabTitle,currentDes:l,handleSend:e.handleSend}):"github"===l.service?(0,d.jsx)(Ni,{tabTitle:e.props.tabTitle,currentDes:l,handleSend:e.handleSend}):"jira"===l.service?(0,d.jsx)(fa,{tabTitle:e.props.tabTitle,currentDes:l,handleSend:e.handleSend}):void 0})]})]})}}],r&&ha(t.prototype,r),n&&ha(t,n),Object.defineProperty(t,"prototype",{writable:!1}),s}(a.Component);const xa=wa;function Sa(e){return Sa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Sa(e)}function Oa(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Pa(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Oa(Object(r),!0).forEach((function(t){ka(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Oa(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function ka(e,t,r){return(t=Na(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Ca(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,Na(n.key),n)}}function Na(e){var t=function(e,t){if("object"!=Sa(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=Sa(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==Sa(t)?t:String(t)}function Da(e,t){return Da=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Da(e,t)}function Ia(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Ta(e);if(t){var o=Ta(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"===Sa(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,r)}}function Ta(e){return Ta=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Ta(e)}var Ea=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Da(e,t)}(a,e);var t,r,o,i=Ia(a);function a(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),i.call(this,e)}return t=a,(r=[{key:"render",value:function(){var e=this,t=this.props.currentPanel;return(0,d.jsx)(n.Z,Pa(Pa({},this.props),{},{footer:null,maskClosable:!1,wrapClassName:"des",destroyOnClose:!0,centered:!0,children:"add"===t?(0,d.jsx)(ci,Pa(Pa({},e.props),{},{currentAccount:e.props.defaultCurrentAccount})):"des"===t?(0,d.jsx)(xa,{currentDes:e.props.currentDes,destinations:e.props.destinations,goToAddDes:e.props.goToAddDes,tabTitle:e.props.tabTitle,tabUrl:e.props.tabUrl,imageUrl:e.props.imageUrl,imageBlob:e.props.imageBlob,imageInfo:e.props.imageInfo||null,handleSendSuccess:e.props.onCancel,contentType:e.props.contentType,type:e.props.type,itemId:e.props.itemId,itemUrl:e.props.itemUrl}):void 0}))}}])&&Ca(t.prototype,r),o&&Ca(t,o),Object.defineProperty(t,"prototype",{writable:!1}),a}(a.Component);const Aa=Ea;function _a(e){return _a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_a(e)}function Za(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Ua(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Za(Object(r),!0).forEach((function(t){La(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Za(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function La(e,t,r){return t=function(e){var t=function(e,t){if("object"!=_a(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=_a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==_a(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Ma(e){return(0,d.jsx)(n.Z,Ua(Ua({},e),{},{footer:null,maskClosable:!1,wrapClassName:"what-des",destroyOnClose:!0,children:"what is a destination?"}))}function Ra(e){var t=e.destinations,r=u()("des-container",{small:e.small});return(0,d.jsx)("div",{className:"render-des",children:t&&t.length?(0,d.jsxs)("div",{className:r,children:[t.map((function(t,r){var n=u()("des-item",t.service);return(0,d.jsxs)("div",{className:n,onClick:e.handleDesClick.bind(null,t),title:V[t.service].displayName+" ("+Y[t.resourceType]+t.resourceName+")",children:[(0,d.jsx)("div",{className:"icon"}),(0,d.jsx)("div",{className:"name",children:Y[t.resourceType]+t.resourceName})]},r)})),(0,d.jsx)("div",{className:"des-item add",onClick:e.handleDesClick.bind(null,"add"),children:(0,d.jsx)("div",{className:"icon",children:"+"})})]}):(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(J.Z,{type:"primary",className:"feedback-btn",block:!0,onClick:e.handleAddDesClick,children:"Connect with other services"}),(0,d.jsxs)("div",{className:"support-s",children:[(0,d.jsx)("div",{children:"Support:"}),(0,d.jsx)("div",{className:"s-container",children:G.map((function(e){return(0,d.jsx)(Br.Z,{title:e.displayName,children:(0,d.jsx)("div",{className:"s-item ".concat(e.name)})},e.name)}))})]})]})})}var za=r(5483);function Fa(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,s=[],c=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);c=!0);}catch(e){l=!0,o=e}finally{try{if(!c&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return s}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Ba(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return Ba(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ba(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var Ha=Rn.Z.Option;const Va=function(e){var t=e.accounts,r=e.currentDriveAccount,n=r?r.service:"googleDrive",s=V[n],l=Fa((0,a.useState)((function(){return t?t[0]:null})),2),f=(l[0],l[1]),p=Fa((0,a.useState)(""),2),h=p[0],m=p[1],y=Fa((0,a.useState)(!0),2),b=y[0],v=y[1],g=Fa((0,a.useState)([]),2),j=g[0],w=g[1],x=Fa((0,a.useState)(!1),2),S=x[0],O=x[1],P=Fa((0,a.useState)((function(){return null===e.currentDriveAccount})),2),C=(P[0],P[1],Fa((0,a.useState)(!1),2)),N=C[0],D=C[1],I=Fa((0,a.useState)(0),2),T=I[0],E=I[1],A=Fa((0,a.useState)(!1),2),_=A[0],Z=A[1],U=Fa((0,a.useState)(""),2),L=U[0],M=U[1],R=Fa((0,a.useState)(""),2),z=R[0],F=R[1],B=Fa((0,a.useState)(!1),2),H=B[0],Y=B[1],G=Fa((0,a.useState)(!1),2),W=G[0],$=G[1];(0,a.useEffect)((function(){f(t[0])}),[t.length]),(0,a.useEffect)((function(){return e.currentDriveAccount&&Q(),window.addEventListener("message",K),function(){window.removeEventListener("message",K)}}),[e.currentDriveAccount]);var K=function(t){if("accountConnected"===t.data.name){var r=JSON.parse(t.data.data);e.handleDriveAccountConnected(r)}},Q=function(t){w([]),O(!0),Tn({accountID:e.currentDriveAccount.id,what:"folder",query:t}).then((function(e){var t=e.items?e.items:[];w(t),O(!1)}))},X=function(e,t,n,o){if("googleDrive"===r.service){var i=new File([e],n.name,{type:t}),a=t.split("/")[1];"jpeg"==a&&(a="jpg");var s={name:n.name+"."+a};"-1"!==n.folder&&(s.parents=[n.folder]),ee(o,i,s,n.googleDriveSharable)}else if("dropbox"===r.service){var c=("-1"!==n.folder?j.filter((function(e){return e.id===n.folder}))[0].info.path||j.filter((function(e){return e.id===n.folder}))[0].info.path_lower:"")+"/"+n.name+"."+t.split("/")[1];te(o,c,e)}else if("box"===r.service){var l=n.name+"."+t.split("/")[1],u=n.folder;i=new File([e],n.name,{type:t});re(o,i,l,u)}},ee=function(t,r,a,s){(function(e,t,r,n,o){var i=new FormData;return i.append("metadata",new Blob([JSON.stringify(r)],{type:"application/json"})),i.append("file",t),rn()({url:On,method:"POST",headers:{Authorization:"Bearer "+e},data:i,onUploadProgress:function(e){if("video"===o)var t=50+Math.round(Math.round(100*e.loaded/e.total)/2);else t=Math.round(100*e.loaded/e.total);n(t)}})})(t,r,a,E,e.type).then((function(r){if(s){var i=r.data.id;$(!0),function(e,t){return rn()({url:"https://www.googleapis.com/drive/v3/files/"+t+"/permissions",method:"POST",headers:{Authorization:"Bearer "+e},data:{role:"reader",type:"anyone"}})}(t,i).then((function(e){F("https://drive.google.com/file/d/".concat(i,"/view?usp=sharing")),Y(!0),$(!1)})).catch((function(){F("https://drive.google.com/file/d/".concat(i,"/view?usp=sharing")),Y(!0),$(!1)}))}else o.Z.success({message:V[n].successMsg,description:(0,d.jsxs)("a",{target:"_blank",href:"https://drive.google.com/file/d/".concat(r.data.id,"/view"),children:["Click to see it in your ",V[n].displayName]})}),e.onCancel();An("googleDrive")})).catch((function(e){i.ZP.error(e.response.data.msg),D(!1),E(0)}))},te=function(t,r,a){(function(e,t,r,n,o){return rn()({url:Pn,method:"POST",headers:{Authorization:"Bearer "+e,"Dropbox-API-Arg":(i={path:t,mode:"add",autorename:!0,mute:!1,strict_conflict:!1},JSON.stringify(i).replace(/[\u007f-\uffff]/g,(function(e){return"\\u"+("000"+e.charCodeAt(0).toString(16)).slice(-4)}))),"Content-Type":"application/octet-stream"},data:r,onUploadProgress:function(e){if("video"===o)var t=50+Math.round(Math.round(100*e.loaded/e.total)/2);else t=Math.round(100*e.loaded/e.total);n(t)}});var i})(t,r,a,E,e.type).then((function(t){o.Z.success({message:V[n].successMsg,description:(0,d.jsxs)("a",{target:"_blank",href:"https://www.dropbox.com/home".concat(t.data.path_display),children:["Click to see it in your ",V[n].displayName]})}),e.onCancel(),An("dropbox")})).catch((function(e){e.response&&"insufficient_space"===e.response.data.error.reason[".tag"]?i.ZP.error("Your dropbox account is full. The screenshot can’t be sent to it"):i.ZP.error(e.response.data.error_summary),D(!1),E(0)}))},re=function(t,r,a,s){(function(e,t,r,n,o,i){var a=new FormData,s={name:r};return s.parent="-1"!==n?{id:n}:{id:"0"},a.append("attributes",JSON.stringify(s)),a.append("file",t),rn()({method:"POST",url:kn,headers:{Authorization:"Bearer "+e,"Access-Control-Expose-Headers":"WWW-Authenticate"},data:a,onUploadProgress:function(e){if("video"===i)var t=50+Math.round(Math.round(100*e.loaded/e.total)/2);else t=Math.round(100*e.loaded/e.total);o(t)}})})(t,r,a,s,E,e.type).then((function(t){o.Z.success({message:V[n].successMsg,description:(0,d.jsxs)("a",{target:"_blank",href:"https://app.box.com/file/".concat(t.data.entries[0].id),children:["Click to see it in your ",V[n].displayName]})}),e.onCancel(),An("box")})).catch((function(e){if(e.response.data&&e.response.data.message)var t=e.response.data.message;else t=e.response.statusText;i.ZP.error(t),D(!1),E(0)}))},ne=function(t){return e.permissions["allow".concat(dn(t))]},oe=u()("upload-progress",{active:N}),ie=u()("drive-wrapper",{active:!N}),ae="video"===e.type?"video":"image";return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)("div",{className:"drive-panel",children:[(0,d.jsx)("div",{className:"title",children:null===r?b?"Choose your cloud storage":"":(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)("div",{className:"icon ".concat(r.service)}),"Save to ",s.displayName]})}),(0,d.jsx)("div",{className:oe,children:H?(0,d.jsxs)("div",{className:"sharable-link-area",children:[(0,d.jsx)("div",{className:"label",children:"Shareable Link"}),(0,d.jsx)(Ln.Z,{value:z,style:{width:"320px"},size:"large"}),(0,d.jsx)(J.Z,{type:"primary",size:"large",onClick:function(){fn(z),i.ZP.success("Copied!")},children:"Copy"})]}):(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(Mn.Z,{type:"circle",status:"active",percent:T}),(0,d.jsx)("div",{className:"upload-tip",children:T<100?"Uploading ".concat(ae,"..."):W?"Creating shareable link...":V[n].actionTypeStr+"..."})]})}),t.length&&r?(0,d.jsx)("div",{className:ie,children:(0,d.jsx)("div",{className:"container",children:(0,d.jsxs)(Un.Z,{onFinish:function(t){var n;D(!0),(n=r.id,Nn({method:"GET",url:"/account/token",params:{accountID:n}})).then((function(r){var n,o,i=r.token;if(e.itemUrl)(n=e.itemUrl,o=function(e){E(Math.round(e/2))},rn()({method:"GET",url:n,responseType:"blob",onDownloadProgress:function(e){var t=Math.round(100*e.loaded/e.total);o&&o(t)}})).then((function(e){X(e.data,"image/png",t,i)}));else{if(e.imageBlob)var a=e.contentType,s=e.imageBlob;else s=sn(e.imageUrl.split(",")[1]),a=e.imageUrl.split(",")[0].split(":")[1].split(";")[0];X(s,a,t,i)}})).catch((function(e){i.ZP.error("Something went wrong!"),D(!1)}))},children:[(0,d.jsx)("div",{className:"account-select"}),(0,d.jsx)("div",{className:"label",children:"Name"}),(0,d.jsx)(Un.Z.Item,{name:"name",rules:[{required:!0,message:"Please input a name"}],initialValue:e.tabTitle,children:(0,d.jsx)(Ln.Z,{})}),(0,d.jsx)("div",{className:"label",children:s.targetName}),(0,d.jsx)(Un.Z.Item,{name:"folder",rules:[{required:!0,message:"choose a folder"}],initialValue:"-1",children:(0,d.jsxs)(Rn.Z,{showSearch:!0,placeholder:s.placeHolder,loading:S,onSearch:Mi()((function(e){Q(e)}),800),filterOption:!1,children:[(0,d.jsxs)(Ha,{value:"-1",children:[(0,d.jsx)(za.Z,{className:"folder-option ".concat(r.service)}),"/"]}),j.map((function(e){return(0,d.jsxs)(Ha,{value:e.id,children:[(0,d.jsx)(za.Z,{className:"folder-option ".concat(r.service)}),"dropbox"===r.service?e.info.path||e.info.path_lower:e.name]},e.id)}))]})}),(0,d.jsx)("div",{className:"tip",children:"googleDrive"===r.service?"Only root folder and Awesome Screenshot folder are available for the moment.":"Only 10 recent folders are listed. Type and search for other folders."}),"googleDrive"===r.service&&(0,d.jsx)(Un.Z.Item,{name:"googleDriveSharable",valuePropName:"checked",initialValue:"true"===localStorage["is-google-drive-share"],children:(0,d.jsx)(c.Z,{children:"Get shareable link (Anyone with the link can view)"})}),(0,d.jsx)(Un.Z.Item,{children:(0,d.jsx)(J.Z,{type:"primary",className:"upload-btn",size:"large",block:!0,htmlType:"submit",children:"Upload"})})]})})}):(0,d.jsx)(d.Fragment,{children:b?(0,d.jsx)("div",{className:"service-container",children:(0,d.jsx)("div",{className:"account-container",children:q.map((function(e){var t=u()("account-item",e.name,{pro:!ne(e.name)});return(0,d.jsx)("div",{className:t,"data-des":e.name,onClick:function(){return function(e){ne(e)?(m(e),v(!1)):(M(e),Z(!0))}(e.name)},children:(0,d.jsx)("b",{})},e.name)}))})}):(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)("div",{className:"top",children:(0,d.jsxs)("div",{className:"back-btn",onClick:function(){v(!0)},children:[(0,d.jsx)(k.Z,{}),"Choose another cloud storage"]})}),(0,d.jsx)("div",{className:"connect-panel",children:(0,d.jsxs)("div",{className:"box",children:[(0,d.jsxs)("div",{className:"main-box",children:[(0,d.jsx)("div",{className:"pic",children:(0,d.jsx)("div",{className:"logo ".concat(h)})}),(0,d.jsxs)("div",{className:"content",children:[(0,d.jsx)("div",{className:"logo ".concat(h)}),(0,d.jsxs)("div",{className:"title",children:["Integrate ",V[h].displayName]}),(0,d.jsx)("div",{className:"sub-title",children:V[h].panelSubTitle}),(0,d.jsx)("ul",{children:V[h].featureLists.map((function(e,t){return(0,d.jsx)("li",{children:e},t)}))})]})]}),(0,d.jsxs)(J.Z,{type:"primary",size:"large",onClick:function(){In(h).then((function(e){var t="width=800,height=700,top="+(window.screen.availHeight-30-700)/2+",left="+(window.screen.availWidth-10-800)/2;window.open(e.URI,"",t)}))},children:["Connect with ",V[h].displayName]})]})})]})})]}),(0,d.jsx)(Dr,{visible:_,onCancel:function(){return Z(!1)},type:L})]})};function Ya(e){return Ya="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ya(e)}function Ga(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function qa(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Ga(Object(r),!0).forEach((function(t){Wa(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Ga(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Wa(e,t,r){return t=function(e){var t=function(e,t){if("object"!=Ya(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=Ya(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==Ya(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function $a(e){return(0,d.jsx)(n.Z,qa(qa({},e),{},{footer:null,maskClosable:!1,wrapClassName:"des",destroyOnClose:!0,centered:!0,children:(0,d.jsx)(Va,qa({},e))}))}function Ja(e){var t=e.accounts;return(0,d.jsx)("div",{className:"render-drive-accounts",children:t&&t.length?(0,d.jsx)("div",{className:"save-to-drive",children:t.map((function(t){return(0,d.jsxs)("div",{className:"save-item ".concat(t.service),onClick:e.handleDriveItemClick.bind(null,t),children:[(0,d.jsx)("div",{className:"icon"}),V[t.service].displayName," ",(0,d.jsxs)("span",{children:["(",(0,d.jsx)("span",{className:"user-email",title:t.userInfo.email,children:t.userInfo.email}),")"]})]},t.id)}))}):(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(J.Z,{type:"primary",className:"connect-btn",block:!0,onClick:e.handleAddDriveClick,children:"Connect with cloud storage"}),(0,d.jsxs)("div",{className:"support-s",children:[(0,d.jsx)("div",{children:"Support:"}),(0,d.jsx)("div",{className:"s-container",children:q.map((function(e){return(0,d.jsx)(Br.Z,{title:e.displayName,children:(0,d.jsx)("div",{className:"s-item ".concat(e.name)})},e.name)}))})]})]})})}function Ka(e){return Ka="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ka(e)}function Qa(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Xa(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Qa(Object(r),!0).forEach((function(t){es(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Qa(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function es(e,t,r){return t=function(e){var t=function(e,t){if("object"!=Ka(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=Ka(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==Ka(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}const ts=function(e){var t;return(0,d.jsx)(n.Z,Xa(Xa({},e),{},{footer:null,maskClosable:!1,wrapClassName:"sign-in",destroyOnClose:!0,centered:!0,children:(0,d.jsxs)("div",{className:"signin-alert-modal",children:[(0,d.jsx)("div",{className:"tip",children:(t=e.type,"aws"===t?"You need to sign in to an Awesome Screenshot account in order to upload images.":"drive"===t?"You need to sign in to an Awesome Screenshot account in order to connect with cloud services.":"des"===t?"You need to sign in to an Awesome Screenshot account in order to connect with other services.":"")}),(0,d.jsx)(J.Z,{type:"primary",size:"large",block:!0,onClick:function(){window.open("https://www.awesomescreenshot.com/signin")},children:"Sign In"})]})}))};function rs(e){return rs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},rs(e)}function ns(e){return function(e){if(Array.isArray(e))return os(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return os(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return os(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function os(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function is(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function as(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?is(Object(r),!0).forEach((function(t){ss(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):is(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function ss(e,t,r){return(t=ls(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function cs(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,ls(n.key),n)}}function ls(e){var t=function(e,t){if("object"!=rs(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=rs(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==rs(t)?t:String(t)}function us(e,t){return us=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},us(e,t)}function ds(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=ps(e);if(t){var o=ps(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"===rs(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return fs(e)}(this,r)}}function fs(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ps(e){return ps=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},ps(e)}var hs=[{name:"save",displayName:"Download as image"},{name:"pdf",displayName:"Download as PDF"},{name:"print",displayName:"Print"},{name:"copy",displayName:"Copy"}],ms={},ys=(chrome.extension.getBackgroundPage(),function e(t,r){t.forEach((function(t,n){r[t.folderID]&&"0"!==t.folderID&&(t.children=r[t.folderID].map((function(e,t){return{title:e.name,value:e.folderID+"-.-"+e.name,folderID:e.folderID,icon:function(e){return e.expanded?(0,d.jsx)(Yr.Z,{}):(0,d.jsx)(Gr.Z,{})}}})),e(t.children,r))}))}),bs=function(e){var t=[],r=e;return r[0]&&r[0].forEach((function(e,r){t.push({title:e.name,value:e.folderID+"-.-"+e.name,folderID:e.folderID,icon:function(e){return e.expanded?(0,d.jsx)(Yr.Z,{}):(0,d.jsx)(Gr.Z,{})}})})),t.unshift({title:"My Items",folderID:"0",value:"0-.-My Items",icon:function(e){return e.expanded?(0,d.jsx)(Yr.Z,{}):(0,d.jsx)(Gr.Z,{})}}),ys(t,e),t},vs=function(){chrome.storage.sync.get(["clickNo"],(function(e){e.clickNo?chrome.storage.sync.set({neverShow:!0}):chrome.storage.sync.set({clickNo:!0})})),o.Z.destroy()},gs=function(e,t){o.Z.open({key:"questionnaire",className:"questionnaire",placement:"bottomRight",duration:0,style:{width:435,marginLeft:-80},message:e,description:t,onClose:vs})},js=function(){cn("https://addons.mozilla.org/en-US/firefox/addon/screenshot-capture-annotate/reviews/"),chrome.storage.sync.set({neverShow:!0}),o.Z.destroy()},ws=function(){cn("/feedback.html"),chrome.storage.sync.set({captureCount:0,clickNo:!0}),o.Z.destroy()},xs=function(){gs((0,d.jsx)(d.Fragment,{children:(0,d.jsx)("p",{children:"Your review means a lot to us. Would you mind taking a moment to rate the extension in the Web Store?"})}),(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(J.Z,{style:{width:"236px",marginRight:"20px"},type:"primary",onClick:js,children:"Sure, take me to the Web Store."}),(0,d.jsx)(J.Z,{style:{width:"100px"},onClick:vs,children:"No, thanks."})]}))},Ss=function(){gs((0,d.jsx)(d.Fragment,{children:(0,d.jsx)("p",{children:"Would you like to report any issues you're experiencing or give us some suggestions so that we can make the extension better for you?"})}),(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(J.Z,{style:{width:"256px",marginRight:"20px"},type:"primary",onClick:ws,children:"Yes, take me to the feedback form."}),(0,d.jsx)(J.Z,{style:{width:"100px"},onClick:vs,children:"No, thanks."})]}))},Os=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&us(e,t)}(s,e);var t,r,n,o=ds(s);function s(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),(t=o.call(this,e)).printIframe=(0,a.createRef)(),t.copyDiv=(0,a.createRef)(),t.img=(0,a.createRef)(),t.state={isShownSignin:!1,isShownSaveToAws:!1,isShownWhatDes:!1,isShownDrive:!1,isShownUpgrade:!1,signInLoading:!1,uploadImagePercentage:0,awsShareUrls:[],projects:[],folders:{},foldersTreeData:[],isfolderLoading:!1,destinations:[],accounts:[],isShownDes:!1,desCurrentPanel:"add",currentDes:null,driveService:"",currentDriveAccount:null,upgradeType:"",zoomImageIndex:""},t.handleLocalSave=t.handleLocalSave.bind(fs(t)),t.handleSaveToAws=t.handleSaveToAws.bind(fs(t)),t.showModal=t.showModal.bind(fs(t)),t.handleModalCancel=t.handleModalCancel.bind(fs(t)),t.handleSignInFinish=t.handleSignInFinish.bind(fs(t)),t.handleUploadFinish=t.handleUploadFinish.bind(fs(t)),t.refreshUserData=t.refreshUserData.bind(fs(t)),t.handleFolderCreated=t.handleFolderCreated.bind(fs(t)),t.openDesModal=t.openDesModal.bind(fs(t)),t.handleDesClick=t.handleDesClick.bind(fs(t)),t.goToAddDes=t.goToAddDes.bind(fs(t)),t.handleDesCreated=t.handleDesCreated.bind(fs(t)),t.handleAccountConnected=t.handleAccountConnected.bind(fs(t)),t.handleAddDriveClick=t.handleAddDriveClick.bind(fs(t)),t.handleAddDesClick=t.handleAddDesClick.bind(fs(t)),t.openDriveModal=t.openDriveModal.bind(fs(t)),t.openSetting=t.openSetting.bind(fs(t)),t.handleDriveAccountConnected=t.handleDriveAccountConnected.bind(fs(t)),t.showUpgradeModal=t.showUpgradeModal.bind(fs(t)),t.getPermissionByName=t.getPermissionByName.bind(fs(t)),t.copyUrl=t.copyUrl.bind(fs(t)),t.openFeedback=t.openFeedback.bind(fs(t)),t.openOptionPage=t.openOptionPage.bind(fs(t)),t.downloadMultiple=t.downloadMultiple.bind(fs(t)),t.downloadMultiplePDF=t.downloadMultiplePDF.bind(fs(t)),t.handleSignIn=t.handleSignIn.bind(fs(t)),t.zoomImage=t.zoomImage.bind(fs(t)),t}return t=s,r=[{key:"componentDidMount",value:function(){var e=this;this.props.user.username&&0===this.state.projects.length&&this.refreshUserData(),chrome.runtime.onMessage.addListener((function(t,r,n){var o=t.name;"awsLoginByGoogle"===o?(e.props.refreshUser(),e.setState({isShownSignin:!1})):"stop"===o&&n()}))}},{key:"componentDidUpdate",value:function(e,t){e.user.username!==this.props.user.username&&(this.props.user.username?this.refreshUserData():this.setState({awsShareUrls:[],projects:[],destinations:[],accounts:[]})),"save"===this.props.step&&chrome.storage.sync.get(["captureCount","clickNo","neverShow"],(function(e){if(!e.neverShow){if(e.clickNo)var t=200;else t=100;e.captureCount&&e.captureCount>t&&gs("Are you enjoying Awesome Screenshot?",(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(J.Z,{style:{width:"100px",marginRight:"20px"},onClick:xs,children:"Yes!"}),(0,d.jsx)(J.Z,{style:{width:"100px"},onClick:Ss,children:"Not really."})]}))}}))}},{key:"copyUrl",value:function(e){fn(e)}},{key:"downloadMultiple",value:function(){var e=this.props,t=e.imageUrl,r=(e.tabTitle,e.tabUrl),n=this.props.contentType.split("/")[1];"jpeg"===n&&(n="jpg");var o=gn(r);"true"===localStorage["save-as"]?mn().then((function(){t.forEach((function(e,t){bn({url:e,filename:o+"_part"+(t+1)+"."+n})}))})):t.forEach((function(e,t){vn(e,o+"_part"+(t+1)+"."+n)}))}},{key:"downloadMultiplePDF",value:function(){var e=this.props.imageUrl,t=gn(this.props.tabUrl);"true"===localStorage["save-as"]?mn().then((function(){no(e).then((function(e){bn({url:e,filename:t+".pdf"})}))})):no(e).then((function(e){vn(e,t+".pdf")}))}},{key:"handleLocalSave",value:function(e){var t=this,r=this.props,n=r.imageUrl,o=r.tabTitle;if(r.tabUrl,"save"===e){var a=t.props.contentType.split("/")[1];"jpeg"==a&&(a="jpg");var s=o.replace(/(\.|\:)/g," ").replace(/[#$~\-!@%^&*();'"?><\[\]{}\|,:\/=+]/g," ")+"."+a;if(s=s.replace(/\s+/g,"-"),"true"===localStorage["save-as"]){var c={url:window.URL.createObjectURL(t.props.imageBlob),filename:s,saveAs:!0};mn().then((function(){bn(c)}))}else vn(window.URL.createObjectURL(t.props.imageBlob),s)}else if("print"===e){var l=this.printIframe.current,u='<div style="margin:0 auto;text-align:center"><img style="width:100%;" src="'.concat(n,'"></div>'),d=l.contentWindow.document;d.write(u);var f=l.contentWindow;f.close(),f.focus(),f.print(),d.body.innerHTML=""}else if("copy"===e)try{"image/jpeg"===t.props.imageBlob.type?fetch(n).then((function(e){return e.arrayBuffer()})).then((function(e){browser.clipboard.setImageData(e,"jpeg")})).then((function(){i.ZP.success("Copy success!",1)})):fetch(n).then((function(e){return e.arrayBuffer()})).then((function(e){browser.clipboard.setImageData(e,"png")})).then((function(){i.ZP.success("Copy success!",1)}))}catch(e){i.ZP.error("Sorry,your system doesn't support this function. Please right click on this image to save.")}else if("pdf"===e){this.props.info.width;var p=this.props.info.height,h=this.props.imageUrl,m=(this.props.tabTitle,this.props.tabUrl,14400),y=o.replace(/(\.|\:)/g," ").replace(/[#$~!@%^&*();'"?><\[\]{}\|,:\/=+-]/g," ")+".pdf";"true"===localStorage["save-as"]?mn().then((function(){p>m?pn(h,m,(function(e){ro(e).then((function(e){bn({url:e,filename:y,saveAs:!0})}))})):ro([h]).then((function(e){bn({url:e,filename:y,saveAs:!0})}))})):p>m?pn(h,m,(function(e){ro(e).then((function(e){vn(e,y)}))})):ro([h]).then((function(e){vn(e,y)}))}}},{key:"handleSaveToAws",value:function(){this.props.user.username?this.showModal("SaveToAws"):this.setState({signInType:"aws",isShownSignin:!0})}},{key:"openFeedback",value:function(){var e=as({},this.props.imageInfo);localStorage.last_info=JSON.stringify(e),chrome.tabs.create({url:"/feedback.html"})}},{key:"openOptionPage",value:function(){chrome.tabs.create({url:"/option-react.html"})}},{key:"handleSignInFinish",value:function(){this.handleModalCancel("Signin"),this.props.refreshUser()}},{key:"handleUploadFinish",value:function(e){this.setState({isShownSaveToAws:!1,awsShareUrls:[].concat(ns(this.state.awsShareUrls),[e])})}},{key:"showModal",value:function(e){var t="isShown".concat(e);this.setState(ss({},t,!0))}},{key:"openSetting",value:function(e){chrome.tabs.create({url:"https://www.awesomescreenshot.com/settings/"+e})}},{key:"handleModalCancel",value:function(e){var t="isShown".concat(e);this.setState(ss(ss({},t,!1),"signInType",""))}},{key:"goToAddDes",value:function(){this.setState({desCurrentPanel:"add"})}},{key:"handleDesCreated",value:function(e){this.setState({destinations:[].concat(ns(this.state.destinations),[e]),desCurrentPanel:"des",currentDes:e})}},{key:"openDesModal",value:function(e){var t=this;this.setState({desCurrentPanel:e},(function(){t.showModal("Des")}))}},{key:"getPermissionByName",value:function(e){return this.props.permissions["allow".concat(dn(e))]}},{key:"goToRate",value:function(){cn("https://addons.mozilla.org/en-US/firefox/addon/screenshot-capture-annotate/reviews/")}},{key:"handleDesClick",value:function(e){var t=this;"add"===e?this.openDesModal("add"):this.getPermissionByName(e.service)?this.setState({currentDes:e},(function(){t.openDesModal("des")})):this.setState({upgradeType:"des",isShownUpgrade:!0})}},{key:"handleSignOut",value:function(){cn("https://www.awesomescreenshot.com/web/user/logout")}},{key:"handleFolderCreated",value:function(e){var t={};t=this.state.folders[0]?as(as({},this.state.folders),{},{0:[e].concat(ns(this.state.folders[0]))}):{0:[e]};var r=bs(t);this.setState({folders:t,foldersTreeData:r})}},{key:"openDriveModal",value:function(e){var t=this;this.props.user.username?this.props.permissions["allow".concat(dn(e.service))]?this.setState({currentDriveAccount:e},(function(){t.showModal("Drive")})):this.setState({upgradeType:e.service},(function(){t.showModal("Upgrade")})):this.setState({signInType:"drive",isShownSignin:!0})}},{key:"refreshUserData",value:function(){var e,t=this;this.setState({projects:[],destinations:[],isShownSignin:!1,isfolderLoading:!0}),Nn({method:"GET",url:"/folder/load_user_folders",params:{count:20,page:e}}).then((function(e){var r=e.folders,n=bs(r);t.setState({folders:r,foldersTreeData:n,isfolderLoading:!1})})),Promise.all([Nn({method:"GET",url:"/account/load"}),Nn({method:"GET",url:"/destination/load"})]).then((function(e){t.setState({accounts:e[0].accounts?e[0].accounts:[],destinations:e[1].destinations?e[1].destinations:[]}),e[0].accounts&&(ms={},e[0].accounts.forEach((function(e){ms[e.id]=e})))})).catch((function(e){}))}},{key:"handleAccountConnected",value:function(e){this.setState({accounts:[].concat(ns(this.state.accounts),[e]),currentAccount:e},(function(){ms[e.id]=e}))}},{key:"handleDriveAccountConnected",value:function(e){this.setState({accounts:[e].concat(ns(this.state.accounts)),currentDriveAccount:e})}},{key:"handleAddDesClick",value:function(){this.props.user.username?this.showModal("Des"):this.setState({signInType:"des",isShownSignin:!0})}},{key:"handleAddDriveClick",value:function(){var e=this;this.props.user.username?this.setState({currentDriveAccount:null},(function(){e.showModal("Drive")})):this.setState({signInType:"drive",isShownSignin:!0})}},{key:"showUpgradeModal",value:function(e){this.setState({isShownUpgrade:!0,driveService:e})}},{key:"zoomImage",value:function(e){this.setState({zoomImageIndex:e})}},{key:"handleSignIn",value:function(){window.open("https://www.awesomescreenshot.com/signin")}},{key:"render",value:function(){var e=this,t=ln(this.props.imageUrl),r=this.state,n=r.awsShareUrls,o=r.destinations,i=this.props.user,a=this.state.accounts.filter((function(e){return"googleDrive"===e.service||"dropbox"===e.service||"box"===e.service})),s=this.state.accounts.filter((function(e){return"googleDrive"!==e.service&&"dropbox"!==e.service&&"box"!==e.service})),c=u()("save-panel",this.props.className),l=(0,d.jsxs)(Vr.Z,{children:["free"===this.props.currentPlan.PlanName&&(0,d.jsx)(Vr.Z.Item,{children:(0,d.jsxs)("a",{href:"https://www.awesomescreenshot.com/pricing",target:"_blank",rel:"noopener noreferrer",children:[(0,d.jsx)(qr.Z,{style:{marginRight:"5px"},title:"Premium user"}),"Upgrade"]})}),(0,d.jsx)(Vr.Z.Item,{onClick:this.handleSignOut,children:(0,d.jsxs)("a",{children:[(0,d.jsx)(Wr.Z,{style:{marginRight:"5px"}}),"Sign out"]})})]}),f=function(e,t,r){return(0,d.jsxs)("div",{className:"section",children:[e&&(0,d.jsxs)("div",{className:"section-title",children:[t&&(0,d.jsx)("div",{className:"icon "+t}),e]}),(0,d.jsx)("div",{className:"section-content",children:r})]})};return(0,d.jsxs)("div",{className:c,children:[(0,d.jsx)("iframe",{className:"print-iframe",ref:this.printIframe,frameBorder:"0"}),(0,d.jsx)("div",{className:"copy-div",contentEditable:"true",ref:this.copyDiv}),(0,d.jsx)("div",{className:"top-bar",children:(0,d.jsxs)("div",{className:"inner-container",children:[(0,d.jsxs)("div",{className:"logo-area",children:[(0,d.jsx)("div",{className:"logo"}),(0,d.jsx)("a",ss({target:"_blank",href:"https://www.awesomescreenshot.com"},"target","_blank"))]}),(0,d.jsxs)("div",{className:"user-area",children:[this.props.isReported||"entire"!==this.props.menuType&&"selected"!==this.props.menuType?(0,d.jsx)("div",{}):(0,d.jsxs)("div",{className:"quick-issue",children:["Not properly captured?",(0,d.jsx)("a",{onClick:this.props.quickReport,children:" Report a problem."})]}),(0,d.jsxs)("a",{className:"user-link email-us",target:"_blank",onClick:this.openOptionPage,children:[(0,d.jsx)($r.Z,{}),"Options"]}),(0,d.jsxs)("a",{className:"user-link email-us",target:"_blank",onClick:this.openFeedback,children:[(0,d.jsx)(Jr.Z,{}),"Send Feedback"]}),i.username?(0,d.jsx)(Hr.Z,{overlay:l,trigger:["click"],placement:"bottomRight",children:(0,d.jsxs)("div",{className:"user-link",children:["free"!==this.props.currentPlan.PlanName&&this.props.currentPlan.PlanName?(0,d.jsx)(Qr.Z,{style:{color:"#faad14"}}):(0,d.jsx)(Kr.Z,{}),i.username,(0,d.jsx)(Xr.Z,{})]})}):(0,d.jsxs)("div",{className:"user-link",onClick:this.handleSignIn,children:[(0,d.jsx)(Kr.Z,{}),"Sign in"]})]})]})}),(0,d.jsx)("div",{className:"panel",children:(0,d.jsxs)("div",{className:"inner-container",children:[(0,d.jsxs)("div",{className:"left",children:[!t&&(0,d.jsx)(Br.Z,{mouseEnterDelay:.3,title:"Back and Re-edit this screenshot",children:(0,d.jsx)("div",{className:"back-btn",onClick:this.props.backToEdit,children:(0,d.jsx)("b",{})})}),(0,d.jsx)("div",{className:"image-container",children:ln(e.props.imageUrl)?e.props.imageUrl.map((function(t,r){var n=e.state.zoomImageIndex===r,o=n?"zoom-in":"";return(0,d.jsx)("img",{className:"multiple ".concat(o),src:t,ref:e.img,alt:"",onClick:function(){e.zoomImage(n?"":r)}},r)})):(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)("span",{className:"helper"}),(0,d.jsx)("img",{src:e.props.imageUrl,ref:e.img,alt:""})]})})]}),(0,d.jsxs)("div",{className:"right",children:[(0,d.jsxs)("div",{className:"panel-logo-area",children:[(0,d.jsx)("div",{className:"logo"}),"AwesomeScreenshot"]}),(0,d.jsx)("div",{className:"right-container",children:t?(0,d.jsx)("div",{className:"multiple-image-panel sub-panel",children:(0,d.jsxs)("div",{className:"section",children:[(0,d.jsxs)("div",{className:"tip",children:["Note: there's no way for Chrome to capture this web page as a single image because it is too large, and editing toolbar is not available in this situation. The screenshot was automatically split into"," ",this.props.imageUrl.length," images. You can download all images or save images as a single PDF with one click."]}),(0,d.jsxs)("div",{className:"btn-area",children:[(0,d.jsx)(J.Z,{block:!0,className:"multiple-download-btn",onClick:this.downloadMultiple,children:"Download all ".concat(this.props.imageUrl.length," images")}),(0,d.jsx)(J.Z,{block:!0,className:"multiple-download-btn",onClick:this.downloadMultiplePDF,children:"Download as PDF"})]})]})}):(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)("div",{className:"local-panel",children:(0,d.jsx)("div",{className:"local-save-container",children:hs.map((function(t){var r=u()("local-save-item",t.name);return(0,d.jsx)(Br.Z,{mouseEnterDelay:.3,title:t.displayName,children:(0,d.jsx)("div",{className:r,onClick:e.handleLocalSave.bind(null,t.name),children:(0,d.jsx)("b",{})})},t.name)}))})}),(0,d.jsx)("div",{className:"sub-panel",children:f("Save to Awesome Screenshot","",(0,d.jsx)(d.Fragment,{children:n.length?(0,d.jsxs)("div",{className:"aws-share-area",children:[n.map((function(t){return(0,d.jsxs)("div",{className:"aws-share-item",children:[(0,d.jsxs)("div",{className:"title",children:["Saved in"," ",(0,d.jsx)("span",{title:t.projectName,children:t.projectName})]}),(0,d.jsxs)("div",{className:"input-area",children:[(0,d.jsx)("input",{type:"text",value:t.url,readOnly:!0}),(0,d.jsx)(Br.Z,{title:"copied!",trigger:"click",children:(0,d.jsx)("div",{className:"aws-share-action-btn",onClick:e.copyUrl.bind(null,t.url),children:(0,d.jsx)(en.Z,{})})})]})]},t.projectId)})),(0,d.jsx)("div",{className:"save-another",onClick:this.handleSaveToAws,children:"Save to another folder"})]}):(0,d.jsx)(J.Z,{className:"save-aws-btn",onClick:this.handleSaveToAws,block:!0,children:"Upload to get shareable link"})}))}),(0,d.jsx)("div",{className:"sub-panel",children:f((0,d.jsxs)(d.Fragment,{children:["Collaborate with Teammates",0!==o.length&&(0,d.jsx)("div",{className:"actions",children:(0,d.jsx)(Br.Z,{title:"Manage destinations",children:(0,d.jsx)("div",{className:"action-btn option",onClick:this.openSetting.bind(null,"destinations")})})})]}),"",(0,d.jsx)(Ra,{destinations:o,handleDesClick:this.handleDesClick,handleAddDesClick:this.handleAddDesClick,small:!0}))}),(0,d.jsx)("div",{className:"sub-panel",children:f((0,d.jsxs)(d.Fragment,{children:["Save to Cloud",0!==a.length&&(0,d.jsxs)("div",{className:"actions",children:[(0,d.jsx)(Br.Z,{title:"Connect a new account",children:(0,d.jsx)("div",{className:"action-btn add",onClick:this.handleAddDriveClick})}),(0,d.jsx)(Br.Z,{title:"Manage accounts",children:(0,d.jsx)("div",{className:"action-btn option",onClick:this.openSetting.bind(null,"connectedAccounts")})})]})]}),"",(0,d.jsx)(d.Fragment,{children:(0,d.jsx)("div",{className:"save-to-drive",children:(0,d.jsx)(Ja,{accounts:a,handleAddDriveClick:this.handleAddDriveClick,handleDriveItemClick:this.openDriveModal})})}))})]})})]})]})}),(0,d.jsx)("div",{className:"footer",children:(0,d.jsx)("div",{className:"inner-container",children:(0,d.jsx)("div",{className:"social-media"})})}),(0,d.jsx)(ts,{visible:this.state.isShownSignin,onCancel:this.handleModalCancel.bind(null,"Signin"),type:this.state.signInType}),(0,d.jsx)(to,{visible:this.state.isShownSaveToAws,onCancel:this.handleModalCancel.bind(null,"SaveToAws"),tabTitle:this.props.tabTitle,imageUrl:this.props.imageUrl,imageBlob:this.props.imageBlob,contentType:this.props.contentType,img:this.img.current,folders:this.state.folders,foldersTreeData:this.state.foldersTreeData,onUploadFinish:this.handleUploadFinish,onRefreshProjects:this.refreshUserData,onFolderCreated:this.handleFolderCreated,currentPlan:this.props.currentPlan,counts:this.props.counts,isfolderLoading:this.state.isfolderLoading}),(0,d.jsx)(Aa,{visible:this.state.isShownDes,onCancel:this.handleModalCancel.bind(null,"Des"),currentPanel:this.state.desCurrentPanel,currentDes:this.state.currentDes,accountHash:ms,destinations:this.state.destinations,accounts:s,tabTitle:this.props.tabTitle,tabUrl:this.props.tabUrl,imageUrl:this.props.imageUrl,imageBlob:this.props.imageBlob,goToAddDes:this.goToAddDes,handleDesCreated:this.handleDesCreated,handleAccountConnected:this.handleAccountConnected,imageInfo:this.props.imageInfo,permissions:this.props.permissions,currentPlan:this.props.currentPlan,contentType:this.props.contentType}),(0,d.jsx)($a,{visible:this.state.isShownDrive,onCancel:this.handleModalCancel.bind(null,"Drive"),tabTitle:this.props.tabTitle,imageUrl:this.props.imageUrl,imageBlob:this.props.imageBlob,service:this.state.driveService,permissions:this.props.permissions,currentPlan:this.props.currentPlan,accounts:a,currentDriveAccount:this.state.currentDriveAccount,handleDriveAccountConnected:this.handleDriveAccountConnected,contentType:this.props.contentType,showUpgradeModal:this.showUpgradeModal}),(0,d.jsx)(Dr,{visible:this.state.isShownUpgrade,onCancel:this.handleModalCancel.bind(null,"Upgrade"),type:this.state.upgradeType}),(0,d.jsx)(Ma,{visible:this.state.isShownWhatDes,onCancel:this.handleModalCancel.bind(null,"WhatDes")})]})}}],r&&cs(t.prototype,r),n&&cs(t,n),Object.defineProperty(t,"prototype",{writable:!1}),s}(a.Component);const Ps=Os;function ks(e){return ks="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ks(e)}function Cs(){Cs=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag";function l(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,r){return e[t]=r}}function u(e,t,r,n){var i=t&&t.prototype instanceof b?t:b,a=Object.create(i.prototype),s=new I(n||[]);return o(a,"_invoke",{value:k(e,r,s)}),a}function d(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var f="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function b(){}function v(){}function g(){}var j={};l(j,a,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(T([])));x&&x!==r&&n.call(x,a)&&(j=x);var S=g.prototype=b.prototype=Object.create(j);function O(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function P(e,t){function r(o,i,a,s){var c=d(e[o],e,i);if("throw"!==c.type){var l=c.arg,u=l.value;return u&&"object"==ks(u)&&n.call(u,"__await")?t.resolve(u.__await).then((function(e){r("next",e,a,s)}),(function(e){r("throw",e,a,s)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return r("throw",e,a,s)}))}s(c.arg)}var i;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return i=i?i.then(o,o):o()}})}function k(t,r,n){var o=f;return function(i,a){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===i)throw a;return{value:e,done:!0}}for(n.method=i,n.arg=a;;){var s=n.delegate;if(s){var c=C(s,n);if(c){if(c===y)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===f)throw o=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=h;var l=d(t,r,n);if("normal"===l.type){if(o=n.done?m:p,l.arg===y)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(o=m,n.method="throw",n.arg=l.arg)}}}function C(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,C(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var i=d(o,t.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,y;var a=i.arg;return a?a.done?(r[t.resultName]=a.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,y):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function N(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function D(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function I(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(N,this),this.reset(!0)}function T(t){if(t||""===t){var r=t[a];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,i=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return i.next=i}}throw new TypeError(ks(t)+" is not iterable")}return v.prototype=g,o(S,"constructor",{value:g,configurable:!0}),o(g,"constructor",{value:v,configurable:!0}),v.displayName=l(g,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,l(e,c,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},O(P.prototype),l(P.prototype,s,(function(){return this})),t.AsyncIterator=P,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new P(u(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},O(S),l(S,c,"Generator"),l(S,a,(function(){return this})),l(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=T,I.prototype={constructor:I,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(D),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return s.type="throw",s.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var c=n.call(a,"catchLoc"),l=n.call(a,"finallyLoc");if(c&&l){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),D(r),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;D(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:T(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),y}},t}function Ns(e,t,r,n,o,i,a){try{var s=e[i](a),c=s.value}catch(e){return void r(e)}s.done?t(c):Promise.resolve(c).then(n,o)}function Ds(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var i=e.apply(t,r);function a(e){Ns(i,n,o,a,s,"next",e)}function s(e){Ns(i,n,o,a,s,"throw",e)}a(void 0)}))}}var Is=3e4;function Ts(){return Ts=Ds(Cs().mark((function e(t,r,n,o,i,a,s,c,l){var u,d,f,p,h,m,y,b,v,g,j,w,x,S,O,P,k,C,N,D,I,T,E,A,_,Z,U,L;return Cs().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return u=l||Is,d=!1,e.next=4,Es(t[0]);case 4:f=e.sent,p=f.width/n,h=f.height/n,s&&parseInt(s.height)>parseInt(f.height)&&(d=!0),m=Math.ceil(h*r),b=null,v=null,a&&a.forEach(function(){var e=Ds(Cs().mark((function e(r){return Cs().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(r&&r.fill.width>0&&r.fill.height>0)){e.next=11;break}if(0!=r.fill.x){e.next=7;break}return e.next=4,As(t[0],r.sample);case 4:b=e.sent,e.next=11;break;case 7:if(!(r.fill.x>0)){e.next=11;break}return e.next=10,As(t[0],r.sample);case 10:v=e.sent;case 11:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),o?(g=o.height,d&&(g=h),y=(m=g*r)?((d?h:s.height)+(t.length>2?(t.length-2)*g:0)+m)/n:((d?h:s.height)+(t.length-1)*g)/n,i&&i.height>0&&(y+=i.height/n)):y=m?(t.length-1)*h+m:t.length*h,j=Math.ceil(y/u),w=y%u,x=0,S=0,O=[],P=0,k=0;case 19:if(!(k<j)){e.next=68;break}C=new OffscreenCanvas(10,10),N=C.getContext("2d"),C.id="c_"+k,C.width=p,C.height=k===j-1?w:u,D=x;case 26:if(!(D<t.length)){e.next=64;break}return I=0,T=0,E=p*n,A=h*n,_=0,Z=p,U=h,e.next=31,Es(t[D]);case 31:if(L=e.sent,!o){e.next=49;break}if(g=o.height,d&&(g=h),0===D?(A=d?h:s.height,U=(d?h:s.height)/n):D===t.length-1&&k===j-1?(I=o.x,_=o.x/n,P?(T=(h-Math.min(P,m))*n,U=Math.min(P,m)):(T=(h-m)*n,U=m/n),A=U*n):(I=o.x,_=o.x/n,P?(T=(h-P)*n,I=o.x,_=o.x/n,A=(U=P)*n):(T=o.y,I=o.x,_=o.x/n,U=g/n,Z=o.width/n,A=g,E=o.width),D===t.length-1&&k!==j-1&&(T=(h-m)*n)),N.drawImage(L,I,T,E,A,_,S,Z,U),0!==D&&(o.x>0&&b&&(N.beginPath(),N.rect(0,S-1,o.x/n,U+1),N.fillStyle=b,N.fill()),o.x+o.width<p&&v&&(N.beginPath(),N.rect((o.x+o.width)/n,S-1,(p-(o.x+o.width))/n,U+1),N.fillStyle=v,N.fill()),D===t.length-1&&k===j-1&&i&&i.height>0&&N.drawImage(L,0,i.y,p*n,i.height,0,S+U,p,i.height/n)),!(S+U>u)){e.next=45;break}return x=D,P=D===t.length-1&&k+1===j-1?S+m-u:S+o.height/n-u,S=0,e.abrupt("break",64);case 45:S=P?S+P:S+U,P=0;case 47:e.next=61;break;case 49:if(D===t.length-1&&k===j-1?T=P?(h-Math.min(P,m))*n:(h-m)*n:(P&&(T=(h-P)*n,A=(U=P)*n),D===t.length-1&&k!==j-1&&(T=(h-m)*n)),N.drawImage(L,I,T,E,A,_,S,Z,U),!(S+U>u)){e.next=59;break}return x=D,P=D===t.length-1&&k+1===j-1?S+m-u:S+h-u,S=0,e.abrupt("break",64);case 59:S=P?S+P:S+U,P=0;case 61:D++,e.next=26;break;case 64:!function(e){C.convertToBlob().then((function(t){if(O.push({blob:t,index:e}),O.length===j){O.sort((function(e,t){return e.index-t.index}));c(O.map((function(e){return e.blob})))}}))}(k);case 65:k++,e.next=19;break;case 68:case 69:case"end":return e.stop()}}),e)}))),Ts.apply(this,arguments)}function Es(e){return new Promise((function(t){fetch(e).then((function(e){return e.blob()})).then((function(e){createImageBitmap(e).then((function(e){t(e)}))}))}))}function As(e,t){return _s.apply(this,arguments)}function _s(){return _s=Ds(Cs().mark((function e(t,r){var n,o,i,a,s,c,l,u,d;return Cs().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(d=function(e,t){function r(e,t,r){return(e<<16)+(t<<8)+r}t=t||new Map;for(var n=0,o=e.length;n<o;n+=4)if(255===e[n+3]){var i=r(e[n],e[n+1],e[n+2]);t.set(i,(t.get(i)||0)+1)}return t},!(r.height>0&&r.width>0)){e.next=22;break}return n=new Map,(o=new OffscreenCanvas(10,10)).width=r.width,o.height=r.height,e.next=8,Es(t);case 8:i=e.sent,(a=o.getContext("2d")).drawImage(i,r.x,r.y,r.width,r.height,0,0,r.width,r.height),s=null;try{s=a.getImageData(0,0,r.width,r.height)}catch(e){}if(!s){e.next=21;break}if(d(s.data,n),c=0,l=0,u=!1,n.forEach((function(e,t){e>c&&(c=e,l=t,u=!0)})),!u){e.next=20;break}return e.abrupt("return","rgb("+Zs(l).join(", ")+")");case 20:return e.abrupt("return","rgb(212,212,212)");case 21:return e.abrupt("return",null);case 22:case"end":return e.stop()}}),e)}))),_s.apply(this,arguments)}function Zs(e){var t=255&e,r=255&(e>>=8);return[255&(e>>=8),r,t]}function Us(e){return Us="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Us(e)}function Ls(){Ls=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag";function l(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,r){return e[t]=r}}function u(e,t,r,n){var i=t&&t.prototype instanceof b?t:b,a=Object.create(i.prototype),s=new I(n||[]);return o(a,"_invoke",{value:k(e,r,s)}),a}function d(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var f="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function b(){}function v(){}function g(){}var j={};l(j,a,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(T([])));x&&x!==r&&n.call(x,a)&&(j=x);var S=g.prototype=b.prototype=Object.create(j);function O(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function P(e,t){function r(o,i,a,s){var c=d(e[o],e,i);if("throw"!==c.type){var l=c.arg,u=l.value;return u&&"object"==Us(u)&&n.call(u,"__await")?t.resolve(u.__await).then((function(e){r("next",e,a,s)}),(function(e){r("throw",e,a,s)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return r("throw",e,a,s)}))}s(c.arg)}var i;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return i=i?i.then(o,o):o()}})}function k(t,r,n){var o=f;return function(i,a){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===i)throw a;return{value:e,done:!0}}for(n.method=i,n.arg=a;;){var s=n.delegate;if(s){var c=C(s,n);if(c){if(c===y)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===f)throw o=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=h;var l=d(t,r,n);if("normal"===l.type){if(o=n.done?m:p,l.arg===y)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(o=m,n.method="throw",n.arg=l.arg)}}}function C(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,C(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var i=d(o,t.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,y;var a=i.arg;return a?a.done?(r[t.resultName]=a.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,y):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function N(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function D(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function I(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(N,this),this.reset(!0)}function T(t){if(t||""===t){var r=t[a];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,i=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return i.next=i}}throw new TypeError(Us(t)+" is not iterable")}return v.prototype=g,o(S,"constructor",{value:g,configurable:!0}),o(g,"constructor",{value:v,configurable:!0}),v.displayName=l(g,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,l(e,c,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},O(P.prototype),l(P.prototype,s,(function(){return this})),t.AsyncIterator=P,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new P(u(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},O(S),l(S,c,"Generator"),l(S,a,(function(){return this})),l(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=T,I.prototype={constructor:I,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(D),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return s.type="throw",s.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var c=n.call(a,"catchLoc"),l=n.call(a,"finallyLoc");if(c&&l){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),D(r),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;D(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:T(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),y}},t}function Ms(e,t,r,n,o,i,a){try{var s=e[i](a),c=s.value}catch(e){return void r(e)}s.done?t(c):Promise.resolve(c).then(n,o)}function Rs(e,t,r,n,o,i,a,s,c,l,u,d,f,p,h,m,y,b,v){var g,j,w,x,S,O,P,k,C=1,N=new OffscreenCanvas(100,100),D=N.getContext("2d"),I=!1,T=1,E=0,A=0;function _(){N.width=I?w-2:w,N.height=x}("boolean"==typeof d&&d||"true"==d)&&window.devicePixelRatio>1&&(C=window.devicePixelRatio),fetch(l[0]).then((function(e){return e.blob()})).then((function(d){createImageBitmap(d).then((function(d){if(g=d.width/C,j=d.height/C,P=d.width,k=d.height,b&&parseInt(b.height)>k+10){I=!0;var f=b.width/P;T=Math.ceil(f),(b=p(f,b)).height>k&&(b.height=k,b.width=P),h&&(h=p(f,h)).y+h.height>k&&(h.height=k-h.y),m&&(m=p(f,m)),"selected"===e&&(o/=f,i/=f,r/=f,n/=f)}function p(e,t){return t.x=t.x/e,t.y=Math.ceil(t.y/e),t.height=parseInt(t.height/e),t.width=t.width/e+2,t}switch(t){case"visible":"selected"===e?(w=o/C,x=i/C,Y=r,W=n,k=i,P=o):"desktop"===e||"upload"===e?(w=g,x=j,Y=0,W=0):(w=g-0,x=j,Y=0,W=0,P-=0),_(),D.drawImage(d,Y,W,P,k,0,0,w,x),"jpg"===u?N.convertToBlob({type:"image/jpeg",quality:1}).then((function(e){v(e,{width:N.width,height:N.height})})):N.convertToBlob().then((function(e){v(e,{width:N.width,height:N.height})}));break;case"entire":var Z=A=E=0,U=l.length,L=a,M=Math.round(U/L),R=null,z=null;y&&y.forEach(function(){var e,t=(e=Ls().mark((function e(t){return Ls().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(t&&t.fill.width>0&&t.fill.height>0)){e.next=11;break}if(0!=t.fill.x){e.next=7;break}return e.next=4,As(l[0],t.sample);case 4:R=e.sent,e.next=11;break;case 7:if(!(t.fill.x>0)){e.next=11;break}return e.next=10,As(l[0],t.sample);case 10:z=e.sent;case 11:case"end":return e.stop()}}),e)})),function(){var t=this,r=arguments;return new Promise((function(n,o){var i=e.apply(t,r);function a(e){Ms(i,n,o,a,s,"next",e)}function s(e){Ms(i,n,o,a,s,"throw",e)}a(void 0)}))});return function(e){return t.apply(this,arguments)}}());var F=function e(t,r,n,o,i,a,s,c,f){t?fetch(t).then((function(e){return e.blob()})).then((function(t){createImageBitmap(t).then((function(t){if(h){var u=h.height;0===Z?D.drawImage(t,0,0,o,b.height,0,0,o/C,b.height/C):(s=(b.height-T+(Z-1)*(u-T))/C,n=h.y,f=u/C,i=u,Z===M-1&&(n=h.y+u-S,f=S/C,i=S),D.drawImage(t,h.x,n,h.width,i,h.x/C,s,h.width/C,f),h.x>0&&R&&(D.beginPath(),D.rect(0,s-1,h.x/C,f+1),D.fillStyle=R,D.fill()),h.x+h.width<o&&z&&(D.beginPath(),D.rect((h.x+h.width)/C,s-1,(o-(h.x+h.width))/C,f+1),D.fillStyle=z,D.fill()),Z===M-1&&m&&m.height>0&&D.drawImage(d,0,m.y,o,m.height,0,s+f,o/C,m.height/C)),Z++}else s=Z*j,Z==M-1&&(n=(j-S)*C,i=(f=S)*C),D.drawImage(t,r,n,o,i,a,s,c,f),++Z>M-1&&B();e(l[++E],r,n,o,i,a,s,c,f)}))})):"jpg"===u?N.convertToBlob({type:"image/jpeg",quality:1}).then((function(e){v(e,{width:N.width,height:N.height})})):N.convertToBlob().then((function(e){v(e,{width:N.width,height:N.height})}))},B=function(){++A>L-1||(A==L-1?(Y=g-O,G=w-A*g,q=A*g):(Y=0,G=g,q=A*g),W=0,$=j,J=0,F(l[E=(Z=0)+A*M],Y,W,P,k,q,J,G,$))};if(!c.x&&c.y){if(M=U,S=j*s.y,w="selected"==e?o/C:g,h){S=h.height*s.y;var H=h.height,V=b.height;x=S?1===M?V/C:(V+(M>2?(M-2)*H:0)+S)/C:(V+(M-1)*H)/C,m&&m.height>0&&(x+=m.height/C)}else x=S?j*(M-1)+S:j*M;if(x>Is)return void function(e,t,r,n,o,i,a,s,c){Ts.apply(this,arguments)}(l,s.y,C,h,m,y,b,v);_();var Y=0,G=g,q=0,W=0,$=j,J=0;"selected"==e&&r&&(Y=r),F(l[E],Y,W,P,k,q,J,G,$)}if(c.x&&!c.y){L=U,O=g*s.x,x="selected"==e?request.centerH:j,w=O?g*(L-1)+O:g*L,_();Y=0,G=g,q=0,W=0,$=j,J=0;!function e(t,r,n,o,i,a,s,c,u,d){a=A*g,A==L-1&&(r=g-O,c=O),D.drawImage(t,r,n,o,i,a,s,c,u),A<L-1&&e(l[++A],r,n,o,i,a,s,c,u)}(l[E],Y,W,P,k,q,J,G,$)}if(c.x&&c.y){O=g*s.x,S=j*s.y,"selected"==e?(w=request.centerW,x=request.centerH):(w=O?g*(L-1)+O:g*L,x=S?j*(M-1)+S:j*M),_();Y=0,G=g,q=0,W=0,$=j,J=0;F(l[E],Y,W,P,k,q,J,G,$)}}}))}))}window.requestFileSystem=window.requestFileSystem||window.webkitRequestFileSystem;var zs=null;const Fs={fs:null,getFs:function(){return new Promise((function(e,t){window.requestFileSystem(window.PERSISTENT,52428800,(function(t){e(t)}),(function(e){t(e)}))}))},save:function(e,t){var r=this;return this.getFs().then((function(n){return r.do_save(n,e,t)}))},append:function(e,t){zs?zs.write(e):this.getFs().then((function(r){r.root.getFile(t,{create:!1},(function(t){t.createWriter((function(t){t.onwriteend=function(e){},t.onerror=function(e){},t.write(e),zs=t}),(function(e){}))}),(function(e){}))}))},do_save:function(e,t,r){return new Promise((function(n,o){e.root.getFile(r,{create:!0},(function(e){e.createWriter((function(r){r.onwriteend=function(t){n(e.toURL())},r.onerror=function(e){o(e.toString())},r.write(t),zs=r}),(function(e){o(e)}))}),(function(e){o(e)}))}))}};var Bs=r(1795),Hs=r.n(Bs);function Vs(e){return Vs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Vs(e)}function Ys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Gs(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Ys(Object(r),!0).forEach((function(t){qs(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Ys(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function qs(e,t,r){return(t=Ks(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Ws(){Ws=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag";function l(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,r){return e[t]=r}}function u(e,t,r,n){var i=t&&t.prototype instanceof b?t:b,a=Object.create(i.prototype),s=new I(n||[]);return o(a,"_invoke",{value:k(e,r,s)}),a}function d(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var f="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function b(){}function v(){}function g(){}var j={};l(j,a,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(T([])));x&&x!==r&&n.call(x,a)&&(j=x);var S=g.prototype=b.prototype=Object.create(j);function O(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function P(e,t){function r(o,i,a,s){var c=d(e[o],e,i);if("throw"!==c.type){var l=c.arg,u=l.value;return u&&"object"==Vs(u)&&n.call(u,"__await")?t.resolve(u.__await).then((function(e){r("next",e,a,s)}),(function(e){r("throw",e,a,s)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return r("throw",e,a,s)}))}s(c.arg)}var i;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return i=i?i.then(o,o):o()}})}function k(t,r,n){var o=f;return function(i,a){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===i)throw a;return{value:e,done:!0}}for(n.method=i,n.arg=a;;){var s=n.delegate;if(s){var c=C(s,n);if(c){if(c===y)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===f)throw o=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=h;var l=d(t,r,n);if("normal"===l.type){if(o=n.done?m:p,l.arg===y)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(o=m,n.method="throw",n.arg=l.arg)}}}function C(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,C(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var i=d(o,t.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,y;var a=i.arg;return a?a.done?(r[t.resultName]=a.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,y):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function N(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function D(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function I(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(N,this),this.reset(!0)}function T(t){if(t||""===t){var r=t[a];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,i=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return i.next=i}}throw new TypeError(Vs(t)+" is not iterable")}return v.prototype=g,o(S,"constructor",{value:g,configurable:!0}),o(g,"constructor",{value:v,configurable:!0}),v.displayName=l(g,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,l(e,c,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},O(P.prototype),l(P.prototype,s,(function(){return this})),t.AsyncIterator=P,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new P(u(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},O(S),l(S,c,"Generator"),l(S,a,(function(){return this})),l(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=T,I.prototype={constructor:I,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(D),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return s.type="throw",s.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var c=n.call(a,"catchLoc"),l=n.call(a,"finallyLoc");if(c&&l){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),D(r),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;D(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:T(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),y}},t}function $s(e,t,r,n,o,i,a){try{var s=e[i](a),c=s.value}catch(e){return void r(e)}s.done?t(c):Promise.resolve(c).then(n,o)}function Js(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,Ks(n.key),n)}}function Ks(e){var t=function(e,t){if("object"!=Vs(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=Vs(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==Vs(t)?t:String(t)}function Qs(e,t){return Qs=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Qs(e,t)}function Xs(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=tc(e);if(t){var o=tc(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"===Vs(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return ec(e)}(this,r)}}function ec(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function tc(e){return tc=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},tc(e)}var rc={Browser:Hs().name+" "+Hs().version,OS:Hs().os.toString(),"Screen Size":window.screen.width+"x"+window.screen.height,"Viewport Size":window.innerWidth+"x"+window.innerHeight,"Pixel Ratio":"@"+window.devicePixelRatio+"x"},nc=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Qs(e,t)}(f,e);var t,r,a,s,c,l=Xs(f);function f(e){var t,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,f),(t=l.call(this,e)).state={tabTitle:"",tabUrl:"",annotateImageUrl:"",saveImageUrl:"",imageBlob:null,info:{},contentType:(r=localStorage.format,"jpg"===r?"image/jpeg":"image/png"),user:{username:"",userType:0,userEmail:"",premiumLevel:""},permissions:{},currentPlan:{},counts:{},step:"edit",isAddDateAndURL:!1,isReported:!1,menuType:""},t.enterSave=t.enterSave.bind(ec(t)),t.backToEdit=t.backToEdit.bind(ec(t)),t.refreshUser=t.refreshUser.bind(ec(t)),t.quickReportIssueUrl=t.quickReportIssueUrl.bind(ec(t)),t.reportIssueUrl=t.reportIssueUrl.bind(ec(t)),t}return t=f,r=[{key:"componentDidMount",value:(s=Ws().mark((function e(){var t,r,n,o,i,a,s,c;return Ws().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(window.addEventListener("message",(function(e){})),t=this,!chrome.extension.getBackgroundPage()){e.next=6;break}r=chrome.extension.getBackgroundPage().dataURL,e.next=9;break;case 6:return e.next=8,yn("dataURL");case 8:r=e.sent;case 9:return e.next=11,browser.runtime.sendMessage({action:"getImageInfo"});case 11:if((n=e.sent).data=r,this.setState({menuType:n.menuType,tabTitle:n.tabtitle,tabUrl:n.taburl}),localStorage.fileUrls&&JSON.parse(localStorage.fileUrls),o=localStorage["resize-for-retina"]||"true"==localStorage["resize-for-retina"],i=n.menuType,a=n.type,!(s=n.data)||!s.length){e.next=25;break}Rs(i,a,n.centerOffX,n.centerOffY,n.centerW,n.centerH,n.counter,n.ratio,n.scrollBar,s,localStorage.format,o,n.contentCanScroll,n.scrollBarWidth,n.contentClip,n.bottomClip,n.bgRegions,n.topCapturePosition,(function(e,r){if(ln(e))var n=e.map((function(e){return URL.createObjectURL(e)}));else n=URL.createObjectURL(e);var o="true"===localStorage["skip-annotate"]&&"entire"===a||ln(e);if(o)if("true"!==localStorage["add-url"]||ln(e)){var i={saveImageUrl:n,imageBlob:e,step:o?"save":"edit"};ln(e)||setTimeout((function(){var r=new FileReader;r.readAsDataURL(e),r.onloadend=function(){var e=r.result;t.setState({saveImageUrl:e},(function(){r=null}))}}),1200)}else n=t.state.tabUrl,jn(e,r,n,(function(e){var n=e,o=URL.createObjectURL(n);t.setState({imageBlob:n,saveImageUrl:o,info:r,isAddDateAndURL:!0,step:"save"}),setTimeout((function(){var e=new FileReader;e.readAsDataURL(n),e.onloadend=function(){var t=e.result;that.setState({saveImageUrl:t},(function(){e=null}))}}),1200)}));else i={annotateImageUrl:n};t.setState(i),(window.requestFileSystem||window.webkitRequestFileSystem)&&setTimeout((function(){var t=ln(e)?e:[e],r=[];t.forEach((function(e,n){Fs.save(e,"currentScreenshot"+n+".png").then((function(e){r.push({url:e,index:n}),r.length===t.length&&(r.sort((function(e,t){return e.index-t.index})),localStorage.fileUrls=JSON.stringify(r.map((function(e){return e.url}))),chrome.runtime.sendMessage({action:"clearDataURL"}))})).catch((function(e){}))}))}),1e3)})),e.next=28;break;case 25:return c=chrome.runtime.getURL("")+"upload.html",chrome.tabs.update({url:c}),e.abrupt("return");case 28:t.refreshUser(),document.addEventListener("visibilitychange",(function(){"visible"===document.visibilityState&&t.refreshUser()})),chrome.storage.sync.get(["captureCount"],(function(e){e.captureCount?chrome.storage.sync.set({captureCount:e.captureCount+1}):chrome.storage.sync.set({captureCount:1})}));case 32:case"end":return e.stop()}}),e,this)})),c=function(){var e=this,t=arguments;return new Promise((function(r,n){var o=s.apply(e,t);function i(e){$s(o,r,n,i,a,"next",e)}function a(e){$s(o,r,n,i,a,"throw",e)}i(void 0)}))},function(){return c.apply(this,arguments)})},{key:"componentWillUnmount",value:function(){document.removeEventListener("visibilitychange",(function(){"visible"===document.visibilityState&&z.refreshUser()}))}},{key:"reportIssueUrl",value:function(){var e=this;if(this.state.isReported)i.ZP.warning("You have reported a problem with this page successfully.");else{var t={};t["Extension Version"]=chrome.runtime.getManifest().version,localStorage.last_info&&(t=Gs(Gs({},t),JSON.parse(localStorage.last_info))),t.Browser||(t.Browser=Hs().name+" "+Hs().version),t.OS||(t.OS=Hs().os.toString()),t["Screen Size"]||(t["Screen Size"]=window.screen.width+"x"+window.screen.height);var r={name:this.state.user.username?this.state.user.username:"user",subject:"Full Page capture Iusse",content:function(e,t){var r="";for(var n in r+=e+"<br/><br/><br/><hr>",t)r+="<b>"+n+"</b>: "+t[n]+"<br/>";return r}(this.state.tabTitle+" "+this.state.tabUrl+"\nmenuType: "+this.state.menuType,t)};this.state.user.userEmail&&!/privaterelay.appleid.com/.test(this.state.user.userEmail)?r.email=this.state.user.userEmail:r.email="report_fullpage@aws.cn",function(e){return Nn({method:"POST",url:"/common/contact_us",data:e})}(r).then((function(t){e.setState({isReported:!0}),o.Z.open({message:"Thank you :)",description:"Your report has been sent successfully. We will look into this and find a solution as soon as possible.",duration:2})})).catch((function(e){i.ZP.warning("Submission failed. Please retry or copy the page's url to send an email to care@awesomescreenshot.com.")}))}}},{key:"quickReportIssueUrl",value:function(){var e=this;n.Z.confirm({title:"Not properly captured?",onOk:function(){e.reportIssueUrl()},okText:"Report",okType:"primary"})}},{key:"refreshUser",value:function(){var e=this;Dn().then((function(t){t?t.username===e.state.user.username&&t.type===e.state.user.userType&&t.mail===e.state.user.userEmail&&t.premiumLevel===e.state.user.premiumLevel||(e.setState({user:{username:t.username,userType:t.type,userEmail:t.mail,premiumLevel:t.premiumLevel}}),Nn({method:"GET",url:"/user/info"}).then((function(t){e.setState({permissions:t.permissions,currentPlan:t.premium.currentPlan})}))):e.setState({user:{username:"",userType:0,userEmail:""},permissions:{}})}))}},{key:"enterSave",value:function(e,t,r){var n=this;if(window.location.href.match(/gmail=(.*)/)){var o=parseInt(window.location.href.match(/gmail=(.*)/)[1]),i=new FileReader;return i.readAsDataURL(t),void(i.onloadend=function(){var e=i.result;chrome.tabs.sendMessage(o,{action:"insertImage",dataURL:e}),setTimeout((function(){window.close()}),0)})}"true"!==localStorage["add-url"]||n.state.isAddDateAndURL?(n.setState({imageBlob:t,saveImageUrl:e,info:r,step:"save"}),setTimeout((function(){var e=new FileReader;e.readAsDataURL(t),e.onloadend=function(){var t=e.result;n.setState({saveImageUrl:t},(function(){e=null}))}}),1200)):jn(t,r,this.state.tabUrl,(function(e){var t=e,o=URL.createObjectURL(t);n.setState({imageBlob:t,saveImageUrl:o,info:r,step:"save"}),setTimeout((function(){var e=new FileReader;e.readAsDataURL(t),e.onloadend=function(){var t=e.result;n.setState({saveImageUrl:t},(function(){e=null}))}}),1200)}))}},{key:"backToEdit",value:function(){var e={step:"edit"};this.state.annotateImageUrl||(e.annotateImageUrl=this.state.saveImageUrl),this.setState(e)}},{key:"render",value:function(){var e=u()("sub-page",{active:"edit"===this.state.step}),t=u()("sub-page",{active:"save"===this.state.step});return this.state.saveImageUrl||this.state.annotateImageUrl?(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(Fr,{imageUrl:this.state.annotateImageUrl,handleFinishEdit:this.enterSave,permissions:this.state.permissions,className:e,devicePixelRatio:window.devicePixelRatio,type:"ext",contentType:this.state.contentType,isReported:this.state.isReported,menuType:this.state.menuType,quickReport:this.quickReportIssueUrl}),(0,d.jsx)(Ps,{user:this.state.user,backToEdit:this.backToEdit,imageUrl:this.state.saveImageUrl,imageBlob:this.state.imageBlob,tabTitle:this.state.tabTitle,tabUrl:this.state.tabUrl,info:this.state.info,imageInfo:rc,refreshUser:this.refreshUser,step:this.state.step,className:t,permissions:this.state.permissions,currentPlan:this.state.currentPlan,contentType:this.state.contentType,isReported:this.state.isReported,menuType:this.state.menuType,quickReport:this.quickReportIssueUrl,counts:this.state.counts})]}):(0,d.jsx)("div",{className:"loading-page",children:(0,d.jsxs)("div",{className:"center",children:[(0,d.jsx)("div",{className:"loading-spinner",children:(0,d.jsxs)("div",{className:"spinner",children:[(0,d.jsx)("div",{className:"rect1"}),(0,d.jsx)("div",{className:"rect2"}),(0,d.jsx)("div",{className:"rect3"}),(0,d.jsx)("div",{className:"rect4"}),(0,d.jsx)("div",{className:"rect5"})]})}),(0,d.jsxs)("div",{className:"brand",children:[(0,d.jsx)("div",{className:"logo"}),"AWESOME SCREENSHOT"]})]})})}}],r&&Js(t.prototype,r),a&&Js(t,a),Object.defineProperty(t,"prototype",{writable:!1}),f}(a.Component);s.render((0,d.jsx)(nc,{}),document.getElementById("edit-page"))}},a={};function s(e){var t=a[e];if(void 0!==t)return t.exports;var r=a[e]={id:e,loaded:!1,exports:{}};return i[e].call(r.exports,r,r.exports,s),r.loaded=!0,r.exports}s.m=i,e=[],s.O=(t,r,n,o)=>{if(!r){var i=1/0;for(u=0;u<e.length;u++){for(var[r,n,o]=e[u],a=!0,c=0;c<r.length;c++)(!1&o||i>=o)&&Object.keys(s.O).every((e=>s.O[e](r[c])))?r.splice(c--,1):(a=!1,o<i&&(i=o));if(a){e.splice(u--,1);var l=n();void 0!==l&&(t=l)}}return t}o=o||0;for(var u=e.length;u>0&&e[u-1][2]>o;u--)e[u]=e[u-1];e[u]=[r,n,o]},s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},r=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,s.t=function(e,n){if(1&n&&(e=this(e)),8&n)return e;if("object"==typeof e&&e){if(4&n&&e.__esModule)return e;if(16&n&&"function"==typeof e.then)return e}var o=Object.create(null);s.r(o);var i={};t=t||[null,r({}),r([]),r(r)];for(var a=2&n&&e;"object"==typeof a&&!~t.indexOf(a);a=r(a))Object.getOwnPropertyNames(a).forEach((t=>i[t]=()=>e[t]));return i.default=()=>e,s.d(o,i),o},s.d=(e,t)=>{for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce(((t,r)=>(s.f[r](e,t),t)),[])),s.u=e=>"javascripts/"+e+".bundle.js",s.miniCssF=e=>"stylesheets/"+(922===e?"edit":e)+".bundle.css",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n={},o="AwesomeScreenshot:",s.l=(e,t,r,i)=>{if(n[e])n[e].push(t);else{var a,c;if(void 0!==r)for(var l=document.getElementsByTagName("script"),u=0;u<l.length;u++){var d=l[u];if(d.getAttribute("src")==e||d.getAttribute("data-webpack")==o+r){a=d;break}}a||(c=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.setAttribute("data-webpack",o+r),a.src=e),n[e]=[t];var f=(t,r)=>{a.onerror=a.onload=null,clearTimeout(p);var o=n[e];if(delete n[e],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((e=>e(r))),t)return t(r)},p=setTimeout(f.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=f.bind(null,a.onerror),a.onload=f.bind(null,a.onload),c&&document.head.appendChild(a)}},s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e+"../"})(),(()=>{var e={922:0};s.f.j=(t,r)=>{var n=s.o(e,t)?e[t]:void 0;if(0!==n)if(n)r.push(n[2]);else{var o=new Promise(((r,o)=>n=e[t]=[r,o]));r.push(n[2]=o);var i=s.p+s.u(t),a=new Error;s.l(i,(r=>{if(s.o(e,t)&&(0!==(n=e[t])&&(e[t]=void 0),n)){var o=r&&("load"===r.type?"missing":r.type),i=r&&r.target&&r.target.src;a.message="Loading chunk "+t+" failed.\n("+o+": "+i+")",a.name="ChunkLoadError",a.type=o,a.request=i,n[1](a)}}),"chunk-"+t,t)}},s.O.j=t=>0===e[t];var t=(t,r)=>{var n,o,[i,a,c]=r,l=0;if(i.some((t=>0!==e[t]))){for(n in a)s.o(a,n)&&(s.m[n]=a[n]);if(c)var u=c(s)}for(t&&t(r);l<i.length;l++)o=i[l],s.o(e,o)&&e[o]&&e[o][0](),e[o]=0;return s.O(u)},r=self.webpackChunkAwesomeScreenshot=self.webpackChunkAwesomeScreenshot||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})(),s.O(void 0,[700,733,769,257,69,537],(()=>s(2082)));var c=s.O(void 0,[700,733,769,257,69,537],(()=>s(6767)));c=s.O(c)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,