function newGuid(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,c=>{const r=16*Math.random()|0,v="x"===c?r:3&r|8;return v.toString(16)})}function isValidGuid(guid){return RegExp(/^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/,"i").test(guid)}function guidToRawFormat(guid){if(!isValidGuid(guid))throw TypeError("GUID parameter is invalid");let v;const arr=new Uint8Array(16);return arr[0]=(v=parseInt(guid.slice(0,8),16))>>>24,arr[1]=v>>>16&255,arr[2]=v>>>8&255,arr[3]=255&v,arr[4]=(v=parseInt(guid.slice(9,13),16))>>>8,arr[5]=255&v,arr[6]=(v=parseInt(guid.slice(14,18),16))>>>8,arr[7]=255&v,arr[8]=(v=parseInt(guid.slice(19,23),16))>>>8,arr[9]=255&v,arr[10]=(v=parseInt(guid.slice(24,36),16))/1099511627776&255,arr[11]=v/4294967296&255,arr[12]=v>>>24&255,arr[13]=v>>>16&255,arr[14]=v>>>8&255,arr[15]=255&v,arr}const byteToHex=Array.from({length:256},(_,i)=>(i+256).toString(16).substring(1));function guidToStandardFormat(bufferSource){const arr=bufferSource instanceof ArrayBuffer?new Uint8Array(bufferSource):new Uint8Array(bufferSource.buffer),guid=(byteToHex[arr[0]]+byteToHex[arr[1]]+byteToHex[arr[2]]+byteToHex[arr[3]]+"-"+byteToHex[arr[4]]+byteToHex[arr[5]]+"-"+byteToHex[arr[6]]+byteToHex[arr[7]]+"-"+byteToHex[arr[8]]+byteToHex[arr[9]]+"-"+byteToHex[arr[10]]+byteToHex[arr[11]]+byteToHex[arr[12]]+byteToHex[arr[13]]+byteToHex[arr[14]]+byteToHex[arr[15]]).toLowerCase();if(!isValidGuid(guid))throw TypeError("Converted GUID is invalid");return guid}const GUIDHelper={newGuid:newGuid,isValidGuid:isValidGuid,guidToRawFormat:guidToRawFormat,guidToStandardFormat:guidToStandardFormat};