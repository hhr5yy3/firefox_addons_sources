!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=548)}([function(e,t,n){"use strict";e.exports=n(126)},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return a})),n.d(t,"e",(function(){return i})),n.d(t,"c",(function(){return u})),n.d(t,"d",(function(){return s}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function o(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var a=function(){return(a=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function i(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function u(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,a=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i}function s(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(u(arguments[t]));return e}},function(e,t,n){e.exports=n(125)},function(e,t,n){e.exports=function(e){return function(t){return function(n,r){var o=[t];return n&&Object.getOwnPropertyNames(n).forEach((function(e){var r=n[e];!0===r?o.push([t,e].join("_")):r&&o.push([t,e,r].join("_"))})),o.map((function(t){return"string"==typeof e[t]?e[t]:""})).filter(Boolean).concat(r||[]).join(" ")}}}},function(e,t,n){"use strict";var r;n.d(t,"a",(function(){return r})),function(e){e.PARTNERS_AUTH_KEY="PARTNERS_AUTH_KEY",e.UID="UID",e.USER_ID="USER_ID",e.PINGER_PERIOD="PINGER_PERIOD",e.WAS_ONBOARDING_SHOWN="WAS_ONBOARDING_SHOWN",e.ONBOARDING_TAB_ID="ONBOARDING_TAB_ID",e.BOOKING_SCROLL_TO_TABLE_ON_FIRST_OFFER="BOOKING_SCROLL_TO_TABLE_ON_FIRST_OFFER",e.IS_FIRST_BOOKING="IS_FIRST_BOOKING",e.WAS_FIRST_BOOKING_SHOWN="WAS_FIRST_BOOKING_SHOWN",e.NO_RATE_DATA="NO_RATE_DATA",e.RATE="RATE",e.RATES="RATES",e.PROMOCODE="PROMOCODE",e.LANGUAGE="LANGUAGE",e.LIVE_SETTINGS="LIVE_SETTINGS",e.NOTIFICATIONS_SETTINGS="NOTIFICATIONS_SETTINGS",e.PRICE_SETTINGS="PRICE_SETTINGS",e.PROMO_CAMPAIGN="PROMO_CAMPAIGN",e.INFORMATION_STEP="INFORMATION_STEP",e.LAST_TIME_INFORMATION_WAS_SHOWN="LAST_TIME_INFORMATION_WAS_SHOWN"}(r||(r={}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"c",(function(){return l})),n.d(t,"b",(function(){return f}));var r=n(2),o=n.n(r),a=n(8);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t,n,r,o,a,i){try{var u=e[a](i),s=u.value}catch(e){return void n(e)}u.done?t(s):Promise.resolve(s).then(r,o)}function s(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){u(a,r,o,i,s,"next",e)}function s(e){u(a,r,o,i,s,"throw",e)}i(void 0)}))}}var c=function(){var e=s(o.a.mark((function e(t){var n;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,a.browser.storage.local.get([t]);case 2:return n=e.sent,e.abrupt("return",n[t]);case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),l=function(){var e=s(o.a.mark((function e(t,n){return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,a.browser.storage.local.set(i({},t,n));case 2:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),f=function(){var e=s(o.a.mark((function e(t){return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,a.browser.storage.local.remove(t);case 2:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()},function(e,t,n){"use strict";n.d(t,"e",(function(){return c})),n.d(t,"f",(function(){return l})),n.d(t,"h",(function(){return f})),n.d(t,"b",(function(){return d})),n.d(t,"a",(function(){return p})),n.d(t,"d",(function(){return h})),n.d(t,"c",(function(){return m})),n.d(t,"g",(function(){return g}));var r=n(0),o=n(53),a=n(20),i=n(151);const u={38:"&amp;",62:"&gt;",60:"&lt;",34:"&quot;",39:"&#x27;"},s=/[&><"']/g;function c(e){return(""+e).replace(s,e=>u[e.charCodeAt(0)])}function l(e,t,n={}){return t.reduce((t,r)=>(r in e?t[r]=e[r]:r in n&&(t[r]=n[r]),t),{})}function f(e){Object(i.a)(e,"[React Intl] Could not find required `intl` object. <IntlProvider> needs to exist in the component ancestry.")}function d(e,t){return`[React Intl] ${e}${t?"\n"+t.stack:""}`}const p={formats:{},messages:{},timeZone:void 0,textComponent:r.Fragment,defaultLocale:"en",defaultFormats:{},onError:function(e){0}};function h(){return{dateTime:{},number:{},message:{},relativeTime:{},pluralRules:{},list:{},displayNames:{}}}function m(e={dateTime:{},number:{},message:{},relativeTime:{},pluralRules:{},list:{},displayNames:{}}){const t=Intl.RelativeTimeFormat,n=Intl.ListFormat,r=Intl.DisplayNames;return{getDateTimeFormat:Object(a.a)(Intl.DateTimeFormat,e.dateTime),getNumberFormat:Object(a.a)(Intl.NumberFormat,e.number),getMessageFormat:Object(a.a)(o.a,e.message),getRelativeTimeFormat:Object(a.a)(t,e.relativeTime),getPluralRules:Object(a.a)(Intl.PluralRules,e.pluralRules),getListFormat:Object(a.a)(n,e.list),getDisplayNames:Object(a.a)(r,e.displayNames)}}function g(e,t,n,r){const o=e&&e[t];let a;if(o&&(a=o[n]),a)return a;r(d(`No ${t} format named: ${n}`))}},function(e,t,n){"use strict";var r,o;function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return i})),n.d(t,"c",(function(){return u})),function(e){e.EN="en",e.RU="ru",e.DE="de",e.ES="es",e.IT="it",e.FR="fr",e.PL="pl",e.TK="tk",e.BG="bg",e.RO="ro",e.PT="pt"}(o||(o={}));var i=(a(r={},o.EN,"English"),a(r,o.RU,"Русский"),r),u={gb:o.EN,de:o.DE,es:o.ES,it:o.IT,fr:o.FR,pl:o.PL,tk:o.TK,ru:o.RU,bg:o.BG,hu:o.EN,gr:o.EN,ro:o.RO,ae:o.EN,rs:o.EN,al:o.EN,pt:o.PT}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.browser=n(132)},,function(e,t,n){"use strict";function r(e){switch(Object.prototype.toString.call(e)){case"[object Error]":case"[object Exception]":case"[object DOMException]":return!0;default:return m(e,Error)}}function o(e){return"[object ErrorEvent]"===Object.prototype.toString.call(e)}function a(e){return"[object DOMError]"===Object.prototype.toString.call(e)}function i(e){return"[object DOMException]"===Object.prototype.toString.call(e)}function u(e){return"[object String]"===Object.prototype.toString.call(e)}function s(e){return null===e||"object"!=typeof e&&"function"!=typeof e}function c(e){return"[object Object]"===Object.prototype.toString.call(e)}function l(e){return"undefined"!=typeof Event&&m(e,Event)}function f(e){return"undefined"!=typeof Element&&m(e,Element)}function d(e){return"[object RegExp]"===Object.prototype.toString.call(e)}function p(e){return Boolean(e&&e.then&&"function"==typeof e.then)}function h(e){return c(e)&&"nativeEvent"in e&&"preventDefault"in e&&"stopPropagation"in e}function m(e,t){try{return e instanceof t}catch(e){return!1}}n.d(t,"d",(function(){return r})),n.d(t,"e",(function(){return o})),n.d(t,"a",(function(){return a})),n.d(t,"b",(function(){return i})),n.d(t,"k",(function(){return u})),n.d(t,"i",(function(){return s})),n.d(t,"h",(function(){return c})),n.d(t,"f",(function(){return l})),n.d(t,"c",(function(){return f})),n.d(t,"j",(function(){return d})),n.d(t,"m",(function(){return p})),n.d(t,"l",(function(){return h})),n.d(t,"g",(function(){return m}))},,function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return o})),n.d(t,"c",(function(){return a})),n.d(t,"d",(function(){return i})),n.d(t,"e",(function(){return u})),n.d(t,"f",(function(){return s}));var r="Mzg6ZDUxODQxYmQtYTNlNi00YzkxLTgwYTktYzJmMmNjMGFlOGM5",o="ratehawk",a=.02,i="ru",u="ratehawk-extension",s="ratehawk"},function(e,t,n){"use strict";n.d(t,"g",(function(){return s})),n.d(t,"b",(function(){return c})),n.d(t,"f",(function(){return l})),n.d(t,"e",(function(){return f})),n.d(t,"c",(function(){return d})),n.d(t,"h",(function(){return p})),n.d(t,"a",(function(){return h})),n.d(t,"d",(function(){return m}));var r=n(2),o=n.n(r),a=n(8),i=n(7);function u(e,t,n,r,o,a,i){try{var u=e[a](i),s=u.value}catch(e){return void n(e)}u.done?t(s):Promise.resolve(s).then(r,o)}var s=function(){},c=function(){var e,t=(e=o.a.mark((function e(t,n){var r,i;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r={url:t,name:n},e.next=3,a.browser.cookies.get(r);case 3:return i=e.sent,e.abrupt("return",null==i?void 0:i.value);case 5:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){u(a,r,o,i,s,"next",e)}function s(e){u(a,r,o,i,s,"throw",e)}i(void 0)}))});return function(e,n){return t.apply(this,arguments)}}(),l=function(){return a.browser.runtime.getManifest().version},f=function(e){var t=document.querySelector("#".concat(e));return t&&t.remove(),(t=document.createElement("div")).id=e,document.body.appendChild(t),t},d=function(e){var t=document.createElement("link");return t.rel="stylesheet",t.href=e,t},p=function(e){var t=e.toString();return t.length>4?t.replace(/\B(?=(\d{3})+(?!\d))/g," "):t},h=function(){var e=window.navigator.userAgent.toLowerCase();return e.includes("edg")?"edge":e.includes("opr")?"opera":e.includes("firefox")?"firefox":e.includes("safari")&&!e.includes("chrome")?"safari":"chrome"},m=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"gb";return Object.keys(i.c).find((function(t){return t===e}))||(t===i.a.EN?"gb":t)}},function(e,t,n){"use strict";function r(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";(function(e){n.d(t,"e",(function(){return a})),n.d(t,"i",(function(){return i})),n.d(t,"h",(function(){return u})),n.d(t,"d",(function(){return s})),n.d(t,"c",(function(){return c})),n.d(t,"b",(function(){return l})),n.d(t,"a",(function(){return f})),n.d(t,"f",(function(){return d})),n.d(t,"g",(function(){return p}));var r=n(41),o=(n(32),{});function a(){return Object(r.b)()?e:"undefined"!=typeof window?window:"undefined"!=typeof self?self:o}function i(){var e=a(),t=e.crypto||e.msCrypto;if(void 0!==t&&t.getRandomValues){var n=new Uint16Array(8);t.getRandomValues(n),n[3]=4095&n[3]|16384,n[4]=16383&n[4]|32768;var r=function(e){for(var t=e.toString(16);t.length<4;)t="0"+t;return t};return r(n[0])+r(n[1])+r(n[2])+r(n[3])+r(n[4])+r(n[5])+r(n[6])+r(n[7])}return"xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)}))}function u(e){if(!e)return{};var t=e.match(/^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);if(!t)return{};var n=t[6]||"",r=t[8]||"";return{host:t[4],path:t[5],protocol:t[2],relative:t[5]+n+r}}function s(e){if(e.message)return e.message;if(e.exception&&e.exception.values&&e.exception.values[0]){var t=e.exception.values[0];return t.type&&t.value?t.type+": "+t.value:t.type||t.value||e.event_id||"<unknown>"}return e.event_id||"<unknown>"}function c(e){var t=a();if(!("console"in t))return e();var n=t.console,r={};["debug","info","warn","error","log","assert"].forEach((function(e){e in t.console&&n[e].__sentry_original__&&(r[e]=n[e],n[e]=n[e].__sentry_original__)}));var o=e();return Object.keys(r).forEach((function(e){n[e]=r[e]})),o}function l(e,t,n){e.exception=e.exception||{},e.exception.values=e.exception.values||[],e.exception.values[0]=e.exception.values[0]||{},e.exception.values[0].value=e.exception.values[0].value||t||"",e.exception.values[0].type=e.exception.values[0].type||n||"Error"}function f(e,t){void 0===t&&(t={});try{e.exception.values[0].mechanism=e.exception.values[0].mechanism||{},Object.keys(t).forEach((function(n){e.exception.values[0].mechanism[n]=t[n]}))}catch(e){}}function d(){try{return document.location.href}catch(e){return""}}function p(e,t){if(!t)return 6e4;var n=parseInt(""+t,10);if(!isNaN(n))return 1e3*n;var r=Date.parse(""+t);return isNaN(r)?6e4:r-e}}).call(this,n(40))},function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"c",(function(){return o})),n.d(t,"b",(function(){return a}));var r,o,a,i=n(0),u=n.n(i),s=n(3),c=n.n(s),l=n(54),f=n(86),d=n.n(f);!function(e){e.XL="xl",e.L="l",e.M="m",e.S="s"}(r||(r={})),function(e){e.LIGHT="light",e.GHOST="ghost",e.FLAT="flat"}(o||(o={})),function(e){e.BUTTON="button",e.SUBMIT="submit",e.RESET="reset"}(a||(a={}));var p=c()(d.a);t.d=function(e){var t=e.children,n=e.size,o=void 0===n?r.M:n,a=e.view,i=e.type,s=e.href,c=e.openInNewTab,f=e.wide,d=e.disabled,h=e.focused,m=e.loading,g=e.onClick,v=e.className,y=e.style,b=e.testid,w=d||m,_=p("button")({size:o,view:a,wide:f,focused:h},v),O=m?u.a.createElement(l.a,{view:a}):t;return s?u.a.createElement("a",{className:_,tabIndex:w?-1:0,"data-disabled":w,style:y,href:w?void 0:s,target:c?"_blank":void 0,"data-testid":b},O):u.a.createElement("button",{className:_,onClick:g,tabIndex:w?-1:0,style:y,disabled:w,type:i,"data-testid":b},O)}},function(e,t,n){"use strict";(function(e){n.d(t,"c",(function(){return c})),n.d(t,"f",(function(){return l})),n.d(t,"e",(function(){return p})),n.d(t,"d",(function(){return g})),n.d(t,"b",(function(){return v})),n.d(t,"a",(function(){return y}));var r=n(1),o=n(59),a=n(10),i=n(88),u=n(47),s=n(32);function c(e,t,n){if(t in e){var r=e[t],o=n(r);if("function"==typeof o)try{o.prototype=o.prototype||{},Object.defineProperties(o,{__sentry_original__:{enumerable:!1,value:r}})}catch(e){}e[t]=o}}function l(e){return Object.keys(e).map((function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])})).join("&")}function f(e){if(Object(a.d)(e)){var t=e,n={message:t.message,name:t.name,stack:t.stack};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}if(Object(a.f)(e)){var i=e,u={};u.type=i.type;try{u.target=Object(a.c)(i.target)?Object(o.a)(i.target):Object.prototype.toString.call(i.target)}catch(e){u.target="<unknown>"}try{u.currentTarget=Object(a.c)(i.currentTarget)?Object(o.a)(i.currentTarget):Object.prototype.toString.call(i.currentTarget)}catch(e){u.currentTarget="<unknown>"}for(var r in"undefined"!=typeof CustomEvent&&Object(a.g)(e,CustomEvent)&&(u.detail=i.detail),i)Object.prototype.hasOwnProperty.call(i,r)&&(u[r]=i);return u}return e}function d(e){return function(e){return~-encodeURI(e).split(/%..|./).length}(JSON.stringify(e))}function p(e,t,n){void 0===t&&(t=3),void 0===n&&(n=102400);var r=g(e,t);return d(r)>n?p(e,t-1,n):r}function h(t,n){return"domain"===n&&t&&"object"==typeof t&&t._events?"[Domain]":"domainEmitter"===n?"[DomainEmitter]":void 0!==e&&t===e?"[Global]":"undefined"!=typeof window&&t===window?"[Window]":"undefined"!=typeof document&&t===document?"[Document]":Object(a.l)(t)?"[SyntheticEvent]":"number"==typeof t&&t!=t?"[NaN]":void 0===t?"[undefined]":"function"==typeof t?"[Function: "+Object(u.a)(t)+"]":t}function m(e,t,n,r){if(void 0===n&&(n=1/0),void 0===r&&(r=new i.a),0===n)return function(e){var t=Object.prototype.toString.call(e);if("string"==typeof e)return e;if("[object Object]"===t)return"[Object]";if("[object Array]"===t)return"[Array]";var n=h(e);return Object(a.i)(n)?n:t}(t);if(null!=t&&"function"==typeof t.toJSON)return t.toJSON();var o=h(t,e);if(Object(a.i)(o))return o;var u=f(t),s=Array.isArray(t)?[]:{};if(r.memoize(t))return"[Circular ~]";for(var c in u)Object.prototype.hasOwnProperty.call(u,c)&&(s[c]=m(c,u[c],n-1,r));return r.unmemoize(t),s}function g(e,t){try{return JSON.parse(JSON.stringify(e,(function(e,n){return m(e,n,t)})))}catch(e){return"**non-serializable**"}}function v(e,t){void 0===t&&(t=40);var n=Object.keys(f(e));if(n.sort(),!n.length)return"[object has no keys]";if(n[0].length>=t)return Object(s.d)(n[0],t);for(var r=n.length;r>0;r--){var o=n.slice(0,r).join(", ");if(!(o.length>t))return r===n.length?o:Object(s.d)(o,t)}return""}function y(e){var t,n;if(Object(a.h)(e)){var o=e,i={};try{for(var u=Object(r.e)(Object.keys(o)),s=u.next();!s.done;s=u.next()){var c=s.value;void 0!==o[c]&&(i[c]=y(o[c]))}}catch(e){t={error:e}}finally{try{s&&!s.done&&(n=u.return)&&n.call(u)}finally{if(t)throw t.error}}return i}return Array.isArray(e)?e.map(y):e}}).call(this,n(40))},function(e,t,n){"use strict";var r=n(76),o=Object.prototype.toString;function a(e){return"[object Array]"===o.call(e)}function i(e){return void 0===e}function u(e){return null!==e&&"object"==typeof e}function s(e){if("[object Object]"!==o.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function c(e){return"[object Function]"===o.call(e)}function l(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:u,isPlainObject:s,isUndefined:i,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:c,isStream:function(e){return u(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:l,merge:function e(){var t={};function n(n,r){s(t[r])&&s(n)?t[r]=e(t[r],n):s(n)?t[r]=e({},n):a(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)l(arguments[r],n);return t},extend:function(e,t,n){return l(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(8),o={B2B:"https://www.ratehawk.com",OSTROVOK:"https://ostrovok.ru",PARTNERS:"https://partner.ostrovok.ru",API:"https://api.worldota.net"};t.b={B2B:o.B2B,B2B_HOTELS:"".concat(o.B2B,"/hotels/"),B2B_ROOMS:"".concat(o.B2B,"/rooms/"),HOTELS:"".concat(o.PARTNERS,"/api/extension/v1/hotel_static/"),REGISTRATION:"".concat(o.B2B,"/registration"),SEARCH_HP:"".concat(o.API,"/api/b2b/v3/search/hp/ext"),SEARCH_SERP:"".concat(o.API,"/api/b2b/v3/search/serp/ext"),GET_PARTNERS_AUTH_KEY:"".concat(o.B2B,"/partners/frontend/v3/proxy/extension/auth/"),RESTORE_PASSWORD:"".concat(o.B2B,"/partners/frontend/v4/proxy/password/recovery/"),SIGN_IN:"".concat(o.B2B,"/api/v3/site/accounts/login/"),SIGN_OUT:"".concat(o.B2B,"/accounts/logout/"),FUNNEL:"https://cnt.worldota.net/funnel.js",HC_CHROME_FORM_PINGER:"".concat(o.B2B,"/hc/chromeform/pinger"),HC_CHROME_FORM_TAB:"".concat(o.OSTROVOK,"/hc/chromeform/tab"),HC_EXTENSION_SERP:"".concat(o.B2B,"/hc/extension/serp"),HC_RUM:"".concat(o.B2B,"/hc/rum.gif"),FIRST_EXAMPLE:"https://www.booking.com/hotel/fr/timquartierlatinpantheo",LIVE_SETTINGS:"".concat(o.B2B,"/api/v1/growth/ext/conf/"),PROMOCODE:"".concat(o.B2B,"/api/v1/growth/ext/promocode/"),PROMOCODES:"".concat(o.B2B,"/api/v1/growth/ext/promocodes/"),CHROME_STORE_REVIEWS:"https://chrome.google.com/webstore/detail/".concat(r.browser.runtime.id,"/reviews"),CHROME_EXTENSIONS:"chrome://extensions/",CHROME_NEW_TAB:"chrome://newtab/",EXTENSION_EMAIL:"extension@ratehawk.com",LANDING:"https://www.ratehawk.com/travel/extension_r/",PRIVACY_POLICY:"https://ostrovok.ru/legal/site/privacy-policy/"}},function(e,t,n){"use strict";var r=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var a=arguments[t],i=0,u=a.length;i<u;i++,o++)r[o]=a[i];return r};function o(e){return JSON.stringify(e.map((function(e){return e&&"object"==typeof e?(t=e,Object.keys(t).sort().map((function(e){var n;return(n={})[e]=t[e],n}))):e;var t})))}t.a=function(e,t){return void 0===t&&(t={}),function(){for(var n,a=[],i=0;i<arguments.length;i++)a[i]=arguments[i];var u=o(a),s=u&&t[u];return s||(s=new((n=e).bind.apply(n,r([void 0],a))),u&&(t[u]=s)),s}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(14);function o(e){Object(r.a)(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}},,function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=n(94),a=Object.prototype.toString;function i(e){return"[object Array]"===a.call(e)}function u(e){return void 0===e}function s(e){return null!==e&&"object"===r(e)}function c(e){return"[object Function]"===a.call(e)}function l(e,t){if(null!=e)if("object"!==r(e)&&(e=[e]),i(e))for(var n=0,o=e.length;n<o;n++)t.call(null,e[n],n,e);else for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.call(null,e[a],a,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===a.call(e)},isBuffer:function(e){return null!==e&&!u(e)&&null!==e.constructor&&!u(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isUndefined:u,isDate:function(e){return"[object Date]"===a.call(e)},isFile:function(e){return"[object File]"===a.call(e)},isBlob:function(e){return"[object Blob]"===a.call(e)},isFunction:c,isStream:function(e){return s(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:l,merge:function e(){var t={};function n(n,o){"object"===r(t[o])&&"object"===r(n)?t[o]=e(t[o],n):t[o]=n}for(var o=0,a=arguments.length;o<a;o++)l(arguments[o],n);return t},deepMerge:function e(){var t={};function n(n,o){"object"===r(t[o])&&"object"===r(n)?t[o]=e(t[o],n):"object"===r(n)?t[o]=e({},n):t[o]=n}for(var o=0,a=arguments.length;o<a;o++)l(arguments[o],n);return t},extend:function(e,t,n){return l(t,(function(t,r){e[r]=n&&"function"==typeof t?o(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(127)},,function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var r=n(0),o=n.n(r),a=n(3),i=n.n(a),u=n(61),s=function(e){var t=o.a.useRef();return o.a.useEffect((function(){t.current=e})),t.current},c=n(106),l=n.n(c);function f(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return d(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return d(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var p,h=i()(l.a),m=o.a.forwardRef((function(e,t){var n=e.className,r=e.value,a=e.placeholder,i=e.disabled,u=e.testid,s=e.onFocus,c=e.onBlur,l=e.onKeyDown,f=null!=r&&""!==r;return o.a.createElement("div",{className:h("control")({hasPlaceholder:!f&&!!a,disabled:i},n),tabIndex:0,onFocus:s,onBlur:c,onKeyDown:l,"data-testid":u,ref:t,role:"textbox"},f?r:a)})),g=Object(r.forwardRef)((function(e,t){var n=e.className,r=e.onFocus,a=e.onChange,i=e.onBlur,u=e.onKeyDown,s=e.value,c=e.placeholder,l=e.name,f=e.type,d=e.required,p=e.disabled,h=e.testid,m=e.autoComplete,g=e.maxLength,v=e.readOnly;return o.a.createElement("input",{className:n,onFocus:r,onChange:a,onBlur:i,onKeyDown:u,value:s,placeholder:c,name:l,"data-testid":h,type:f,required:d,disabled:p,autoComplete:m,autoCorrect:"off",autoCapitalize:"off",spellCheck:!1,ref:t,maxLength:g,readOnly:v})}));!function(e){e.XS="xs",e.L="l",e.M="m",e.S="s"}(p||(p={}));t.b=function(e){var t=e.className,n=e.style,r=e.size,a=e.label,i=e.tooltipContent,c=e.placeholder,l=e.inputRef,d=e.onFocus,p=e.onChange,v=e.onClick,y=e.onBlur,b=e.onKeyDown,w=e.onIconClick,_=e.value,O=e.pseudo,E=e.focused,S=e.wide,x=e.children,j=e.startAdornment,k=e.icon,T=e.reserveIconPlace,C=e.hasError,A=e.error,N=void 0===A?null:A,P=e.name,R=e.type,I=e.autoComplete,D=e.readOnly,L=e.required,M=e.disabled,U=e.testid,F=e.validators,B=e.maxLength,z=e.tooltipCallback,H=O?m:g,W=f(o.a.useState(N),2),G=W[0],q=W[1],$=f(o.a.useState(null),2),Y=$[0],V=$[1],X=f(o.a.useState(_),2),K=X[0],Q=X[1],Z=s(K);o.a.useEffect((function(){q(N)}),[N]),o.a.useEffect((function(){V(null)}),[_]);var J=G||Y;return o.a.createElement("div",{className:h("wrapper")({wide:S},t)},o.a.createElement("label",{className:h("label")({size:r,focused:E,hasError:C||!!J,disabled:M,required:L,readOnly:D}),style:n,onClick:v},x,o.a.createElement("div",{className:h("controlLine")({reserveIconPlace:!k&&T})},j,o.a.createElement(H,{className:h("control")(),ref:l,onChange:p,onFocus:function(e){q(null),V(null),d&&d(e)},onBlur:function(e){if(y){Q(e.target.value);var t=e.target.value===Z;if(F){var n=null;F.every((function(t){return n=t(e.target.value),V(n),!n})),y(e,n,t)}else y(e,null,t)}},onKeyDown:b,value:_,placeholder:c,name:P,type:R,required:L,disabled:M,testid:U,autoComplete:I||"input-off",maxLength:B,readOnly:D}),k&&o.a.createElement("div",{tabIndex:0,role:"button",onClick:w,className:h("icon")({clickable:!!w})},k)),o.a.createElement("div",{className:h("titleWrapper")()},o.a.createElement("div",{className:h("title")()},a),!!i&&o.a.createElement(u.b,{className:h("hint")(),tooltipContent:i,position:u.a.TOP,tooltipCallback:z}))),!!J&&o.a.createElement("p",{className:h("error")()},J.message))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r,o,a=n(50);function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}!function(e){e.DESKTOP="desktop",e.MOBILE="mobile",e.TABLET="tablet"}(o||(o={}));var c={sizes:(r={},s(r,o.DESKTOP,1450),s(r,o.MOBILE,680),s(r,o.TABLET,1074),r)};t.b=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:c,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case a.a.SET_THEME:return u({sizes:e.sizes},t.theme);default:return e}}},function(e,t,n){e.exports=n(130)()},function(e,t,n){"use strict";function r(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return g})),n.d(t,"b",(function(){return f})),n.d(t,"c",(function(){return c})),n.d(t,"d",(function(){return m})),n.d(t,"e",(function(){return u}));var r=n(58),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},a={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function i(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function u(e,t,n){var o;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(u)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var s=e,c=t,l=[],f=l,d=!1;function p(){f===l&&(f=l.slice())}function h(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return c}function m(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return p(),f.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,p();var n=f.indexOf(e);f.splice(n,1),l=null}}}function g(e){if(!i(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,c=s(c,e)}finally{d=!1}for(var t=l=f,n=0;n<t.length;n++){(0,t[n])()}return e}function v(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");s=e,g({type:a.REPLACE})}function y(){var e,t=m;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e}return g({type:a.INIT}),(o={dispatch:g,subscribe:m,getState:h,replaceReducer:v})[r.a]=y,o}function s(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function c(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var i,u=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:a.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:a.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+a.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},a=0;a<u.length;a++){var c=u[a],l=n[c],f=e[c],d=l(f,t);if(void 0===d){var p=s(c,t);throw new Error(p)}o[c]=d,r=r||d!==f}return(r=r||u.length!==Object.keys(e).length)?o:e}}function l(e,t){return function(){return t(e.apply(this,arguments))}}function f(e,t){if("function"==typeof e)return l(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=l(o,t))}return n}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(n,!0).forEach((function(t){d(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function g(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=t.map((function(e){return e(o)}));return h({},n,{dispatch:r=m.apply(void 0,a)(n.dispatch)})}}}},,function(e,t,n){"use strict";n.d(t,"d",(function(){return o})),n.d(t,"c",(function(){return a})),n.d(t,"b",(function(){return i})),n.d(t,"a",(function(){return u}));var r=n(10);function o(e,t){return void 0===t&&(t=0),"string"!=typeof e||0===t||e.length<=t?e:e.substr(0,t)+"..."}function a(e,t){var n=e,r=n.length;if(r<=150)return n;t>r&&(t=r);var o=Math.max(t-60,0);o<5&&(o=0);var a=Math.min(o+140,r);return a>r-5&&(a=r),a===r&&(o=Math.max(a-140,0)),n=n.slice(o,a),o>0&&(n="'{snip} "+n),a<r&&(n+=" {snip}"),n}function i(e,t){if(!Array.isArray(e))return"";for(var n=[],r=0;r<e.length;r++){var o=e[r];try{n.push(String(o))}catch(e){n.push("[value cannot be serialized]")}}return n.join(t)}function u(e,t){return!!Object(r.k)(e)&&(Object(r.j)(t)?t.test(e):"string"==typeof t&&-1!==e.indexOf(t))}},function(e,t,n){"use strict";t.a={RESTORE_PASSWORD:"RESTORE_PASSWORD",SIGN_IN:"SIGN_IN",SIGN_OUT:"SIGN_OUT",CLOSE_ONBOARDING:"CLOSE_ONBOARDING",OPEN_RATE:"OPEN_RATE",SHOW_OFFER:"SHOW_OFFER",SHOW_TBO_BF_OFFER:"SHOW_TBO_BF_OFFER",CHANGE_NOTIFICATIONS_SETTINGS:"CHANGE_NOTIFICATIONS_SETTINGS",GET_COMPETITOR_SERP_DATA:"GET_COMPETITOR_SERP_DATA",GET_COMPETITOR_ALL_SERP_DATA:"GET_COMPETITOR_ALL_SERP_DATA",GET_COMPETITOR_ORDER_DATA:"GET_COMPETITOR_ORDER_DATA",GET_TBO_ORDER_DATA:"GET_TBO_ORDER_DATA",UPDATE_LIVE_SETTINGS:"UPDATE_LIVE_SETTINGS",OPEN_NEW_WINDOW:"OPEN_NEW_WINDOW"}},function(e,t,n){"use strict";var r=n(2),o=n.n(r),a=n(0),i=n(8),u=n(44),s=n(45);function c(e,t,n,r,o,a,i){try{var u=e[a](i),s=u.value}catch(e){return void n(e)}u.done?t(s):Promise.resolve(s).then(r,o)}function l(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){c(a,r,o,i,u,"next",e)}function u(e){c(a,r,o,i,u,"throw",e)}i(void 0)}))}}t.a=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=Object(a.useCallback)(function(){var t=l(o.a.mark((function t(n){var r;return o.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!e){t.next=7;break}return t.next=3,Object(s.a)();case 3:if(!(r=t.sent).id){t.next=7;break}return t.next=7,Object(u.b)(r.id,n);case 7:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),[e]),n=Object(a.useCallback)(function(){var t=l(o.a.mark((function t(n,r,a){var u;return o.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!e){t.next=14;break}return t.next=3,Object(s.a)();case 3:return u=t.sent,t.prev=4,t.next=7,i.browser.tabs.executeScript(u.id,{code:"hcfunnel('event', 'chrome_extension', '".concat(n,"', '").concat(r,"', ").concat(JSON.stringify(a),");")});case 7:t.next=12;break;case 9:t.prev=9,t.t0=t.catch(4),console.log("sendEvent error: ",t.t0);case 12:t.next=15;break;case 14:hcfunnel("event","chrome_extension",n,r,a);case 15:case"end":return t.stop()}}),t,null,[[4,9]])})));return function(e,n,r){return t.apply(this,arguments)}}(),[e]);return{inject:t,sendEvent:n}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r={html:{SEARCH_FORM:"/popup.html"},js:{FIRST_BOOKING:"/js/firstBooking.bundle.js",OFFER:"/js/offer.bundle.js",ONBOARDING:"/js/onBoarding.bundle.js",PROMOCODE:"/js/promoCode.bundle.js",INFORMATION:"/js/information.bundle.js"},css:{FIRST_BOOKING:"css/firstBooking.css",FONTS:"/css/fonts.css",OFFER:"css/offer.css",ONBOARDING:"css/onBoarding.css",PROMOCODE:"css/promoCode.css",INFORMATION:"css/information.css"},images:{BG_ECONOMY_STEP:"/assets/img/background-economy-step.png",BG_FIRST_BOOKING:"/assets/img/background-first-booking.png",BG_INSTRUCTIONS_STEP:"/assets/img/background-instructions-step.png",BG_WELCOME_STEP:"/assets/img/background-welcome-step.png",FAVICON_DEFAULT:"/assets/icons/icon-128.png",FAVICON_SUCCESS:"/assets/icons/icon-success.png",ICON_HEART:"/assets/icons/icon-heart.svg",ICON_NEW:"/assets/icons/icon-new.svg",ICON_PIN:"/assets/icons/icon-pin.svg",LOGO:"/assets/icons/logo.svg"}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(84),o=n.n(r).a.create({withCredentials:!0})},function(e,t,n){"use strict";(function(e){var r=n(30),o=n(73),a=n(90);function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var u,s=[Object(r.a)(o.a),e&&e.__REDUX_DEVTOOLS_EXTENSION__&&e.__REDUX_DEVTOOLS_EXTENSION__()].filter((function(e){return e}));t.a=Object(r.e)(a.a,r.d.apply(void 0,function(e){if(Array.isArray(e))return i(e)}(u=s)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(u)||function(e,t){if(e){if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(e,t):void 0}}(u)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()))}).call(this,n(40))},,,function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";(function(e,r){n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return a}));n(10),n(17);function o(){return"[object process]"===Object.prototype.toString.call(void 0!==e?e:0)}function a(e,t){return e.require(t)}}).call(this,n(60),n(57)(e))},function(e,t,n){"use strict";n.d(t,"b",(function(){return c})),n.d(t,"a",(function(){return l}));var r=n(0),o=n(55),a=n.n(o);n(6);a.a;const i=r.createContext(null),{Consumer:u,Provider:s}=i,c=s,l=i},function(e,t,n){"use strict";var r=n(0),o=n.n(r);t.a=function(e){var t=e.className,n=e.fill,r=void 0===n?"#868686":n,a=e.height,i=void 0===a?18:a,u=e.width,s=void 0===u?18:u;return o.a.createElement("svg",{className:t,fill:r,height:i,viewBox:"0 0 20 21",width:s},o.a.createElement("path",{d:"M11.59 10l5.159-5.16a1.126 1.126 0 0 0-1.59-1.59L10 8.41 4.84 3.25a1.128 1.128 0 0 0-1.59 0 1.128 1.128 0 0 0 0 1.59L8.408 10 3.25 15.16a1.128 1.128 0 0 0 0 1.59 1.128 1.128 0 0 0 1.59 0L10 11.59l5.158 5.16a1.126 1.126 0 0 0 1.59-1.59L11.592 10z",fillRule:"nonzero"}))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return E})),n.d(t,"e",(function(){return x})),n.d(t,"d",(function(){return j})),n.d(t,"f",(function(){return k})),n.d(t,"c",(function(){return T}));var r=n(2),o=n.n(r),a=n(8),i=n(12),u=n(4),s=n(19),c=n(36),l=n(5),f=n(13);function d(e){return function(e){if(Array.isArray(e))return p(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return p(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return p(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function p(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function h(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?h(Object(n),!0).forEach((function(t){g(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):h(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function v(e,t,n,r,o,a,i){try{var u=e[a](i),s=u.value}catch(e){return void n(e)}u.done?t(s):Promise.resolve(s).then(r,o)}function y(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){v(a,r,o,i,u,"next",e)}function u(e){v(a,r,o,i,u,"throw",e)}i(void 0)}))}}var b,w;!function(e){e.CONGRATULATIONS="congratulations",e.HISTORY="history",e.OFFER="offer",e.ORDER="order",e.PRICE_SETTINGS="price_settings",e.PROMOCODE="promocode",e.SERP="serp",e.WELCOME="welcome",e.INFORMATION="information"}(b||(b={})),function(e){e.PAGETYPE="pagetype",e.USER_ID="user_id"}(w||(w={}));var _;!function(e){e.ADDRESS="address",e.BAR_PRICE="bar_price",e.BATHROOM_TYPE="bathroom_type",e.BED_TYPE="bed_type",e.CANCELLATION_BEFORE="cancellation_before",e.CHECKIN="checkin",e.CHECKOUT="checkout",e.CITY="city",e.COMPETITOR_CURRENCY="competitor_currency",e.COMPETITOR_ID="competitor_id",e.COMPETITOR_NET_PRICE="competitor_net_price",e.COMPETITOR_PRICE="competitor_price",e.DATETIME="datetime",e.EXTENSION_BRAND="extension_brand",e.EXTENSION_LANG="extension_lang",e.EXTENSION_VERSION="extension_version",e.EXTERNAL_CURRENCY="external_currency",e.EXTERNAL_HOTEL_ID="external_hotel_id",e.EXTERNAL_HOTEL_NAME="external_hotel_name",e.FUNNEL_STEP="funnel_step",e.GEO="geo",e.GUESTS="guests",e.GUESTS_DETAILED="guests_detailed",e.HAS_BALCONY="has_balcony",e.HAS_MEAL="has_meal",e.HOTEL_KIND="hotel_kind",e.HOTEL_NAME="hotel_name",e.IS_ETG="is_etg",e.LANGUAGE="language",e.LATITUDE="latitude",e.LONGITUDE="longitude",e.MAIN_COMPETITOR_PRICE="main_competitor_price",e.MEAL_TYPE="meal_type",e.MIN_OSTROVOK_LOYALTY="min_ostrovok_loyalty",e.MIN_OSTROVOK_PRICE="min_ostrovok_price",e.MIN_OSTROVOK_PRICE_WITH_TAXES="min_ostrovok_price_with_taxes",e.NET_PRICE="net_price",e.NUM_IN_PAGE="num_in_page",e.OSTROVOK_CURRENCY="ostrovok_currency",e.OTAHOTEL_ID="otahotel_id",e.PHONE="phone",e.PRICE="price",e.PRICE_WITH_TAXES="price_with_taxes",e.PROMO_AMOUNT="promo_amount",e.REGION="region",e.RESIDENCY="residency",e.ROOM_NAME="room_name",e.STAR_RATING="star_rating",e.SUP_NAME="sup_name",e.SUP_PRICE="sup_price",e.TAXES="taxes"}(_||(_={}));var O,E=function(){var e=y(o.a.mark((function e(t,n){var r,d,p,h,v,y,b,O,E,S,x,j,k,T,C,A;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(l.a)(u.a.UID);case 2:return r=e.sent,e.next=5,Object(l.a)(u.a.USER_ID);case 5:return d=e.sent,e.next=8,Object(l.a)(u.a.RATES);case 8:if(e.t0=e.sent,e.t0){e.next=11;break}e.t0={};case 11:return p=e.t0,e.prev=12,e.next=15,c.a.get(s.b.FUNNEL);case 15:return v=e.sent,y=v.data,e.next=19,a.browser.tabs.executeScript(t,{code:"(() => {\n        var script = document.createElement('script');\n        document.body.appendChild(script);\n      })();"});case 19:return e.next=21,a.browser.tabs.executeScript(t,{code:y});case 21:return e.next=23,a.browser.tabs.executeScript(t,{code:"\n        hcfunnel('platform', 'chrome_extension');\n        hcfunnel('sitelang', 'ru');\n        hcfunnel('uid', '".concat(r,"');\n      ")});case 23:if(g(h={},w.PAGETYPE,n),g(h,w.USER_ID,d),b=h,O=p[t]){e.next=33;break}return e.next=28,Object(l.a)(u.a.NO_RATE_DATA);case 28:if(e.t1=e.sent,e.t1){e.next=31;break}e.t1={};case 31:S=e.t1,O=S[t];case 33:return e.next=35,Object(l.a)(u.a.PROMOCODE);case 35:return x=e.sent,O?(E=g({},"chrome_extension_json_data",(g(T={},_.BAR_PRICE,null===(j=O.commissionInfo)||void 0===j?void 0:j.show.amount_gross_markup),g(T,_.BATHROOM_TYPE,O.bathroomType),g(T,_.BED_TYPE,O.bedType),g(T,_.CHECKIN,O.checkIn),g(T,_.CHECKOUT,O.checkOut),g(T,_.COMPETITOR_CURRENCY,O.currency),g(T,_.COMPETITOR_ID,O.competitor),g(T,_.DATETIME,Date.now()),g(T,_.EXTENSION_BRAND,i.b),g(T,_.EXTENSION_LANG,i.d),g(T,_.EXTENSION_VERSION,Object(f.f)()),g(T,_.EXTERNAL_CURRENCY,O.externalCurrency),g(T,_.EXTERNAL_HOTEL_ID,O.externalHotelId),g(T,_.EXTERNAL_HOTEL_NAME,O.externalHotelName),g(T,_.FUNNEL_STEP,O.funnelStep),g(T,_.GUESTS,O.guests.reduce((function(e,t){var n=t.adults,r=t.kids;return e+ +n+((null==r?void 0:r.length)||0)}),0)),g(T,_.GUESTS_DETAILED,O.guests.map((function(e){return{adults:e.adults,children:e.kids}}))),g(T,_.HAS_BALCONY,O.hasBalcony),g(T,_.IS_ETG,O.isEtg),g(T,_.MAIN_COMPETITOR_PRICE,O.priceOldWithoutTaxes),g(T,_.PRICE_WITH_TAXES,O.priceOldWithTaxes),g(T,_.MEAL_TYPE,O.mealType),g(T,_.MIN_OSTROVOK_LOYALTY,O.loyalty),g(T,_.MIN_OSTROVOK_PRICE,O.priceWithoutTaxes),g(T,_.MIN_OSTROVOK_PRICE_WITH_TAXES,O.priceWithTaxes),g(T,_.NET_PRICE,null===(k=O.commissionInfo)||void 0===k?void 0:k.show.amount_net),g(T,_.NUM_IN_PAGE,(O.rateIndex||0)+1),g(T,_.OSTROVOK_CURRENCY,O.currency),g(T,_.OTAHOTEL_ID,O.hotelId),g(T,_.PROMO_AMOUNT,x&&parseFloat(x.discount)/100),g(T,_.RESIDENCY,O.residency),g(T,_.ROOM_NAME,O.roomName),g(T,_.TAXES,O.taxes),T)),"booking_form"===O.funnelStep&&(E=g({},"chrome_extension_json_data",m(m({},E.chrome_extension_json_data),{},(g(C={},_.CANCELLATION_BEFORE,O.cancellationBefore),g(C,_.HAS_MEAL,O.hasMeal),C))))):E=g({},"chrome_extension_json_data",(g(A={},_.EXTENSION_BRAND,i.b),g(A,_.EXTENSION_LANG,i.d),g(A,_.EXTENSION_VERSION,Object(f.f)()),g(A,_.PROMO_AMOUNT,x&&parseFloat(x.discount)/100),A)),e.next=39,a.browser.tabs.executeScript(t,{code:"hcfunnel('send', ".concat(JSON.stringify(b),", ").concat(JSON.stringify(E),");")});case 39:e.next=44;break;case 41:e.prev=41,e.t2=e.catch(12),console.error(e.t2);case 44:case"end":return e.stop()}}),e,null,[[12,41]])})));return function(t,n){return e.apply(this,arguments)}}();!function(e){e.HISTORY="history",e.ORDER="order",e.SERP="serp",e.PRICE_SETTINGS="price_settings"}(O||(O={}));var S=function(){var e=y(o.a.mark((function e(t){var n,r,i,f,d,p,h,m,v;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.pageType,r=t.postData,i=t.tabId,e.next=3,Object(l.a)(u.a.UID);case 3:return f=e.sent,e.next=6,Object(l.a)(u.a.USER_ID);case 6:return d=e.sent,e.prev=7,e.next=10,c.a.get(s.b.FUNNEL);case 10:return h=e.sent,m=h.data,e.next=14,a.browser.tabs.executeScript(i,{code:"var script = document.createElement('script');\n        document.body.appendChild(script);"});case 14:return e.next=16,a.browser.tabs.executeScript(i,{code:m});case 16:return e.next=18,a.browser.tabs.executeScript(i,{code:"\n        hcfunnel('platform', 'chrome_extension');\n        hcfunnel('sitelang', 'ru');\n        hcfunnel('uid', '".concat(f,"');\n      ")});case 18:return g(p={},w.PAGETYPE,n),g(p,w.USER_ID,d),v=p,e.next=21,a.browser.tabs.executeScript(i,{code:"hcfunnel('send', ".concat(JSON.stringify(v),", ").concat(JSON.stringify(r),");")});case 21:e.next=26;break;case 23:e.prev=23,e.t0=e.catch(7),console.error(e.t0);case 26:case"end":return e.stop()}}),e,null,[[7,23]])})));return function(t){return e.apply(this,arguments)}}(),x=function(){var e=y(o.a.mark((function e(t,n){var r;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=g({},"chrome_extension_json_data",g({},O.SERP,n)),e.abrupt("return",S({pageType:b.SERP,postData:r,tabId:t}));case 2:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),j=function(){var e=y(o.a.mark((function e(t,n){var r;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=g({},"chrome_extension_json_data",g({},O.ORDER,n)),e.abrupt("return",S({pageType:b.ORDER,postData:r,tabId:t}));case 2:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),k=function(){var e=y(o.a.mark((function e(t,n){var r;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=g({},"chrome_extension_json_data",g({},O.PRICE_SETTINGS,n)),e.abrupt("return",S({pageType:b.PRICE_SETTINGS,postData:r,tabId:t}));case 2:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),T=function(){var e=y(o.a.mark((function e(t){var n,r,i,u,s;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return 2592e6,n=(new Date).getTime()-2592e6,e.next=4,a.browser.history.search({maxResults:5e3,startTime:n,text:""});case 4:return r=e.sent,i=r.sort((function(e,t){return(t.visitCount||0)-(e.visitCount||0)})).reduce((function(e,t){var n=t.url,r=n&&new URL(n).hostname;return r&&e.push(r),e}),[]),u=d(new Set(i)),s=g({},"chrome_extension_json_data",g({},O.HISTORY,u.slice(0,50))),e.abrupt("return",S({pageType:b.HISTORY,postData:s,tabId:t}));case 9:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(2),o=n.n(r),a=n(8);function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return u(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return u(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function s(e,t,n,r,o,a,i){try{var u=e[a](i),s=u.value}catch(e){return void n(e)}u.done?t(s):Promise.resolve(s).then(r,o)}var c=function(){var e,t=(e=o.a.mark((function e(){var t,n,r;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,a.browser.tabs.query({active:!0,currentWindow:!0});case 2:return t=e.sent,n=i(t,1),r=n[0],e.abrupt("return",r);case 6:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){s(a,r,o,i,u,"next",e)}function u(e){s(a,r,o,i,u,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}()},function(e,t,n){"use strict";var r=n(0),o=n.n(r),a=n(7);t.a=o.a.createContext({language:a.a.EN,setLanguage:function(){}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));function r(e){try{return e&&"function"==typeof e&&e.name||"<anonymous>"}catch(e){return"<anonymous>"}}},function(e,t,n){"use strict";var r=n(0),o=n.n(r),a=n(3),i=n.n(a),u=n(13),s=n(108),c=n.n(s),l=i()(c.a);t.a=function(e){var t=e.children,n=e.className,r=e.onClick,a=void 0===r?u.g:r;return o.a.createElement("button",{className:l("buttonIcon")(null,n),onClick:a,type:"button"},t)}},,function(e,t,n){"use strict";var r;n.d(t,"a",(function(){return r})),function(e){e.SET_THEME="SET_THEME"}(r||(r={}))},function(e,t,n){"use strict";var r;n.d(t,"a",(function(){return r})),function(e){e.SET_LOCALE="SET_LOCALE"}(r||(r={}))},function(e,t,n){"use strict";var r;n.d(t,"a",(function(){return r})),function(e){e.SET_SETTINGS="SET_SETTINGS"}(r||(r={}))},function(e,t,n){"use strict";var r;function o(e){return e.type===r.literal}function a(e){return e.type===r.argument}function i(e){return e.type===r.number}function u(e){return e.type===r.date}function s(e){return e.type===r.time}function c(e){return e.type===r.select}function l(e){return e.type===r.plural}function f(e){return e.type===r.pound}function d(e){return!(!e||"object"!=typeof e||0!==e.type)}function p(e){return!(!e||"object"!=typeof e||1!==e.type)}!function(e){e[e.literal=0]="literal",e[e.argument=1]="argument",e[e.number=2]="number",e[e.date=3]="date",e[e.time=4]="time",e[e.select=5]="select",e[e.plural=6]="plural",e[e.pound=7]="pound"}(r||(r={}));var h,m=(h=function(e,t){return(h=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}h(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),g=function(){return(g=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},v=function(e){function t(n,r,o,a){var i=e.call(this)||this;return i.message=n,i.expected=r,i.found=o,i.location=a,i.name="SyntaxError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(i,t),i}return m(t,e),t.buildMessage=function(e,t){function n(e){return e.charCodeAt(0).toString(16).toUpperCase()}function r(e){return e.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,(function(e){return"\\x0"+n(e)})).replace(/[\x10-\x1F\x7F-\x9F]/g,(function(e){return"\\x"+n(e)}))}function o(e){return e.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,(function(e){return"\\x0"+n(e)})).replace(/[\x10-\x1F\x7F-\x9F]/g,(function(e){return"\\x"+n(e)}))}function a(e){switch(e.type){case"literal":return'"'+r(e.text)+'"';case"class":var t=e.parts.map((function(e){return Array.isArray(e)?o(e[0])+"-"+o(e[1]):o(e)}));return"["+(e.inverted?"^":"")+t+"]";case"any":return"any character";case"end":return"end of input";case"other":return e.description}}return"Expected "+function(e){var t,n,r=e.map(a);if(r.sort(),r.length>0){for(t=1,n=1;t<r.length;t++)r[t-1]!==r[t]&&(r[n]=r[t],n++);r.length=n}switch(r.length){case 1:return r[0];case 2:return r[0]+" or "+r[1];default:return r.slice(0,-1).join(", ")+", or "+r[r.length-1]}}(e)+" but "+(((i=t)?'"'+r(i)+'"':"end of input")+" found.");var i},t}(Error);var y=function(e,t){t=void 0!==t?t:{};var n,o={},a={start:Oe},i=Oe,u=me("#",!1),s=ve("argumentElement"),c=me("{",!1),l=me("}",!1),f=ve("numberSkeletonId"),d=/^['\/{}]/,p=ge(["'","/","{","}"],!1,!1),h={type:"any"},m=ve("numberSkeletonTokenOption"),y=me("/",!1),b=ve("numberSkeletonToken"),w=me("::",!1),_=function(e){return We.pop(),e.replace(/\s*$/,"")},O=me(",",!1),E=me("number",!1),S=function(e,t,n){return g({type:"number"===t?r.number:"date"===t?r.date:r.time,style:n&&n[2],value:e},qe())},x=me("'",!1),j=/^[^']/,k=ge(["'"],!0,!1),T=/^[^a-zA-Z'{}]/,C=ge([["a","z"],["A","Z"],"'","{","}"],!0,!1),A=/^[a-zA-Z]/,N=ge([["a","z"],["A","Z"]],!1,!1),P=me("date",!1),R=me("time",!1),I=me("plural",!1),D=me("selectordinal",!1),L=me("offset:",!1),M=me("select",!1),U=me("=",!1),F=ve("whitespace"),B=/^[\t-\r \x85\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/,z=ge([["\t","\r"]," ",""," "," ",[" "," "],"\u2028","\u2029"," "," ","　"],!1,!1),H=ve("syntax pattern"),W=/^[!-\/:-@[-\^`{-~\xA1-\xA7\xA9\xAB\xAC\xAE\xB0\xB1\xB6\xBB\xBF\xD7\xF7\u2010-\u2027\u2030-\u203E\u2041-\u2053\u2055-\u205E\u2190-\u245F\u2500-\u2775\u2794-\u2BFF\u2E00-\u2E7F\u3001-\u3003\u3008-\u3020\u3030\uFD3E\uFD3F\uFE45\uFE46]/,G=ge([["!","/"],[":","@"],["[","^"],"`",["{","~"],["¡","§"],"©","«","¬","®","°","±","¶","»","¿","×","÷",["‐","‧"],["‰","‾"],["⁁","⁓"],["⁕","⁞"],["←","⑟"],["─","❵"],["➔","⯿"],["⸀","⹿"],["、","〃"],["〈","〠"],"〰","﴾","﴿","﹅","﹆"],!1,!1),q=ve("optional whitespace"),$=ve("number"),Y=me("-",!1),V=(ve("apostrophe"),ve("double apostrophes")),X=me("''",!1),K=function(e){return!("{"===e||Ge()&&"#"===e||We.length>1&&"}"===e)},Q=me("\n",!1),Z=ve("argNameOrNumber"),J=ve("argNumber"),ee=me("0",!1),te=/^[1-9]/,ne=ge([["1","9"]],!1,!1),re=/^[0-9]/,oe=ge([["0","9"]],!1,!1),ae=ve("argName"),ie=0,ue=0,se=[{line:1,column:1}],ce=0,le=[],fe=0;if(void 0!==t.startRule){if(!(t.startRule in a))throw new Error("Can't start parsing from rule \""+t.startRule+'".');i=a[t.startRule]}function de(){return e.substring(ue,ie)}function pe(){return be(ue,ie)}function he(e,t){throw function(e,t){return new v(e,[],"",t)}(e,t=void 0!==t?t:be(ue,ie))}function me(e,t){return{type:"literal",text:e,ignoreCase:t}}function ge(e,t,n){return{type:"class",parts:e,inverted:t,ignoreCase:n}}function ve(e){return{type:"other",description:e}}function ye(t){var n,r=se[t];if(r)return r;for(n=t-1;!se[n];)n--;for(r={line:(r=se[n]).line,column:r.column};n<t;)10===e.charCodeAt(n)?(r.line++,r.column=1):r.column++,n++;return se[t]=r,r}function be(e,t){var n=ye(e),r=ye(t);return{start:{offset:e,line:n.line,column:n.column},end:{offset:t,line:r.line,column:r.column}}}function we(e){ie<ce||(ie>ce&&(ce=ie,le=[]),le.push(e))}function _e(e,t,n){return new v(v.buildMessage(e,t),e,t,n)}function Oe(){return Ee()}function Ee(){var e,t;for(e=[],t=Se();t!==o;)e.push(t),t=Se();return e}function Se(){var t;return(t=function(){var e,t;e=ie,(t=xe())!==o&&(ue=e,n=t,t=g({type:r.literal,value:n},qe()));var n;return e=t}())===o&&(t=function(){var t,n,a,i;fe++,t=ie,123===e.charCodeAt(ie)?(n="{",ie++):(n=o,0===fe&&we(c));n!==o&&De()!==o&&(a=Be())!==o&&De()!==o?(125===e.charCodeAt(ie)?(i="}",ie++):(i=o,0===fe&&we(l)),i!==o?(ue=t,u=a,n=g({type:r.argument,value:u},qe()),t=n):(ie=t,t=o)):(ie=t,t=o);var u;fe--,t===o&&(n=o,0===fe&&we(s));return t}())===o&&(t=function(){var t;(t=function(){var t,n,r,a,i,u,s,f,d;t=ie,123===e.charCodeAt(ie)?(n="{",ie++):(n=o,0===fe&&we(c));n!==o&&De()!==o&&(r=Be())!==o&&De()!==o?(44===e.charCodeAt(ie)?(a=",",ie++):(a=o,0===fe&&we(O)),a!==o&&De()!==o?("number"===e.substr(ie,6)?(i="number",ie+=6):(i=o,0===fe&&we(E)),i!==o&&De()!==o?(u=ie,44===e.charCodeAt(ie)?(s=",",ie++):(s=o,0===fe&&we(O)),s!==o&&(f=De())!==o&&(d=function(){var t,n,r;t=ie,"::"===e.substr(ie,2)?(n="::",ie+=2):(n=o,0===fe&&we(w));n!==o&&(r=function(){var e,t,n;if(e=ie,t=[],(n=Te())!==o)for(;n!==o;)t.push(n),n=Te();else t=o;t!==o&&(ue=e,t=g({type:0,tokens:t},qe()));return e=t}())!==o?(ue=t,t=n=r):(ie=t,t=o);t===o&&(t=ie,ue=ie,We.push("numberArgStyle"),(n=(n=!0)?void 0:o)!==o&&(r=xe())!==o?(ue=t,n=_(r),t=n):(ie=t,t=o));return t}())!==o?u=s=[s,f,d]:(ie=u,u=o),u===o&&(u=null),u!==o&&(s=De())!==o?(125===e.charCodeAt(ie)?(f="}",ie++):(f=o,0===fe&&we(l)),f!==o?(ue=t,n=S(r,i,u),t=n):(ie=t,t=o)):(ie=t,t=o)):(ie=t,t=o)):(ie=t,t=o)):(ie=t,t=o);return t}())===o&&(t=function(){var t,n,r,a,i,u,s,f,d;t=ie,123===e.charCodeAt(ie)?(n="{",ie++):(n=o,0===fe&&we(c));n!==o&&De()!==o&&(r=Be())!==o&&De()!==o?(44===e.charCodeAt(ie)?(a=",",ie++):(a=o,0===fe&&we(O)),a!==o&&De()!==o?("date"===e.substr(ie,4)?(i="date",ie+=4):(i=o,0===fe&&we(P)),i===o&&("time"===e.substr(ie,4)?(i="time",ie+=4):(i=o,0===fe&&we(R))),i!==o&&De()!==o?(u=ie,44===e.charCodeAt(ie)?(s=",",ie++):(s=o,0===fe&&we(O)),s!==o&&(f=De())!==o&&(d=function(){var t,n,r;t=ie,"::"===e.substr(ie,2)?(n="::",ie+=2):(n=o,0===fe&&we(w));n!==o&&(r=function(){var t,n,r,a;t=ie,n=ie,r=[],(a=Ce())===o&&(a=Ae());if(a!==o)for(;a!==o;)r.push(a),(a=Ce())===o&&(a=Ae());else r=o;n=r!==o?e.substring(n,ie):r;n!==o&&(ue=t,n=g({type:1,pattern:n},qe()));return t=n}())!==o?(ue=t,t=n=r):(ie=t,t=o);t===o&&(t=ie,ue=ie,We.push("dateOrTimeArgStyle"),(n=(n=!0)?void 0:o)!==o&&(r=xe())!==o?(ue=t,n=_(r),t=n):(ie=t,t=o));return t}())!==o?u=s=[s,f,d]:(ie=u,u=o),u===o&&(u=null),u!==o&&(s=De())!==o?(125===e.charCodeAt(ie)?(f="}",ie++):(f=o,0===fe&&we(l)),f!==o?(ue=t,n=S(r,i,u),t=n):(ie=t,t=o)):(ie=t,t=o)):(ie=t,t=o)):(ie=t,t=o)):(ie=t,t=o);return t}());return t}())===o&&(t=function(){var t,n,a,i,u,s,f,d,p,h,m;t=ie,123===e.charCodeAt(ie)?(n="{",ie++):(n=o,0===fe&&we(c));if(n!==o)if(De()!==o)if((a=Be())!==o)if(De()!==o)if(44===e.charCodeAt(ie)?(i=",",ie++):(i=o,0===fe&&we(O)),i!==o)if(De()!==o)if("plural"===e.substr(ie,6)?(u="plural",ie+=6):(u=o,0===fe&&we(I)),u===o&&("selectordinal"===e.substr(ie,13)?(u="selectordinal",ie+=13):(u=o,0===fe&&we(D))),u!==o)if(De()!==o)if(44===e.charCodeAt(ie)?(s=",",ie++):(s=o,0===fe&&we(O)),s!==o)if(De()!==o)if(f=ie,"offset:"===e.substr(ie,7)?(d="offset:",ie+=7):(d=o,0===fe&&we(L)),d!==o&&(p=De())!==o&&(h=Le())!==o?f=d=[d,p,h]:(ie=f,f=o),f===o&&(f=null),f!==o)if((d=De())!==o){if(p=[],(h=Pe())!==o)for(;h!==o;)p.push(h),h=Pe();else p=o;p!==o&&(h=De())!==o?(125===e.charCodeAt(ie)?(m="}",ie++):(m=o,0===fe&&we(l)),m!==o?(ue=t,n=function(e,t,n,o){return g({type:r.plural,pluralType:"plural"===t?"cardinal":"ordinal",value:e,offset:n?n[2]:0,options:o.reduce((function(e,t){var n=t.id,r=t.value,o=t.location;return n in e&&he('Duplicate option "'+n+'" in plural element: "'+de()+'"',pe()),e[n]={value:r,location:o},e}),{})},qe())}(a,u,f,p),t=n):(ie=t,t=o)):(ie=t,t=o)}else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;return t}())===o&&(t=function(){var t,n,a,i,u,s,f,d,p;t=ie,123===e.charCodeAt(ie)?(n="{",ie++):(n=o,0===fe&&we(c));if(n!==o)if(De()!==o)if((a=Be())!==o)if(De()!==o)if(44===e.charCodeAt(ie)?(i=",",ie++):(i=o,0===fe&&we(O)),i!==o)if(De()!==o)if("select"===e.substr(ie,6)?(u="select",ie+=6):(u=o,0===fe&&we(M)),u!==o)if(De()!==o)if(44===e.charCodeAt(ie)?(s=",",ie++):(s=o,0===fe&&we(O)),s!==o)if(De()!==o){if(f=[],(d=Ne())!==o)for(;d!==o;)f.push(d),d=Ne();else f=o;f!==o&&(d=De())!==o?(125===e.charCodeAt(ie)?(p="}",ie++):(p=o,0===fe&&we(l)),p!==o?(ue=t,n=function(e,t){return g({type:r.select,value:e,options:t.reduce((function(e,t){var n=t.id,r=t.value,o=t.location;return n in e&&he('Duplicate option "'+n+'" in select element: "'+de()+'"',pe()),e[n]={value:r,location:o},e}),{})},qe())}(a,f),t=n):(ie=t,t=o)):(ie=t,t=o)}else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;else ie=t,t=o;return t}())===o&&(t=function(){var t,n;t=ie,35===e.charCodeAt(ie)?(n="#",ie++):(n=o,0===fe&&we(u));n!==o&&(ue=t,n=g({type:r.pound},qe()));return t=n}()),t}function xe(){var e,t,n;if(e=ie,t=[],(n=Me())===o&&(n=Ue())===o&&(n=Fe()),n!==o)for(;n!==o;)t.push(n),(n=Me())===o&&(n=Ue())===o&&(n=Fe());else t=o;return t!==o&&(ue=e,t=t.join("")),e=t}function je(){var t,n,r,a,i;if(fe++,t=ie,n=[],r=ie,a=ie,fe++,(i=Re())===o&&(d.test(e.charAt(ie))?(i=e.charAt(ie),ie++):(i=o,0===fe&&we(p))),fe--,i===o?a=void 0:(ie=a,a=o),a!==o?(e.length>ie?(i=e.charAt(ie),ie++):(i=o,0===fe&&we(h)),i!==o?r=a=[a,i]:(ie=r,r=o)):(ie=r,r=o),r!==o)for(;r!==o;)n.push(r),r=ie,a=ie,fe++,(i=Re())===o&&(d.test(e.charAt(ie))?(i=e.charAt(ie),ie++):(i=o,0===fe&&we(p))),fe--,i===o?a=void 0:(ie=a,a=o),a!==o?(e.length>ie?(i=e.charAt(ie),ie++):(i=o,0===fe&&we(h)),i!==o?r=a=[a,i]:(ie=r,r=o)):(ie=r,r=o);else n=o;return t=n!==o?e.substring(t,ie):n,fe--,t===o&&(n=o,0===fe&&we(f)),t}function ke(){var t,n,r;return fe++,t=ie,47===e.charCodeAt(ie)?(n="/",ie++):(n=o,0===fe&&we(y)),n!==o&&(r=je())!==o?(ue=t,t=n=r):(ie=t,t=o),fe--,t===o&&(n=o,0===fe&&we(m)),t}function Te(){var e,t,n,r;if(fe++,e=ie,De()!==o)if((t=je())!==o){for(n=[],r=ke();r!==o;)n.push(r),r=ke();n!==o?(ue=e,e=function(e,t){return{stem:e,options:t}}(t,n)):(ie=e,e=o)}else ie=e,e=o;else ie=e,e=o;return fe--,e===o&&(o,0===fe&&we(b)),e}function Ce(){var t,n,r,a;if(t=ie,39===e.charCodeAt(ie)?(n="'",ie++):(n=o,0===fe&&we(x)),n!==o){if(r=[],(a=Me())===o&&(j.test(e.charAt(ie))?(a=e.charAt(ie),ie++):(a=o,0===fe&&we(k))),a!==o)for(;a!==o;)r.push(a),(a=Me())===o&&(j.test(e.charAt(ie))?(a=e.charAt(ie),ie++):(a=o,0===fe&&we(k)));else r=o;r!==o?(39===e.charCodeAt(ie)?(a="'",ie++):(a=o,0===fe&&we(x)),a!==o?t=n=[n,r,a]:(ie=t,t=o)):(ie=t,t=o)}else ie=t,t=o;if(t===o)if(t=[],(n=Me())===o&&(T.test(e.charAt(ie))?(n=e.charAt(ie),ie++):(n=o,0===fe&&we(C))),n!==o)for(;n!==o;)t.push(n),(n=Me())===o&&(T.test(e.charAt(ie))?(n=e.charAt(ie),ie++):(n=o,0===fe&&we(C)));else t=o;return t}function Ae(){var t,n;if(t=[],A.test(e.charAt(ie))?(n=e.charAt(ie),ie++):(n=o,0===fe&&we(N)),n!==o)for(;n!==o;)t.push(n),A.test(e.charAt(ie))?(n=e.charAt(ie),ie++):(n=o,0===fe&&we(N));else t=o;return t}function Ne(){var t,n,r,a,i,u,s;return t=ie,De()!==o&&(n=He())!==o&&De()!==o?(123===e.charCodeAt(ie)?(r="{",ie++):(r=o,0===fe&&we(c)),r!==o?(ue=ie,We.push("select"),(!0?void 0:o)!==o&&(a=Ee())!==o?(125===e.charCodeAt(ie)?(i="}",ie++):(i=o,0===fe&&we(l)),i!==o?(ue=t,u=n,s=a,We.pop(),t=g({id:u,value:s},qe())):(ie=t,t=o)):(ie=t,t=o)):(ie=t,t=o)):(ie=t,t=o),t}function Pe(){var t,n,r,a,i,u,s;return t=ie,De()!==o&&(n=function(){var t,n,r,a;return t=ie,n=ie,61===e.charCodeAt(ie)?(r="=",ie++):(r=o,0===fe&&we(U)),r!==o&&(a=Le())!==o?n=r=[r,a]:(ie=n,n=o),(t=n!==o?e.substring(t,ie):n)===o&&(t=He()),t}())!==o&&De()!==o?(123===e.charCodeAt(ie)?(r="{",ie++):(r=o,0===fe&&we(c)),r!==o?(ue=ie,We.push("plural"),(!0?void 0:o)!==o&&(a=Ee())!==o?(125===e.charCodeAt(ie)?(i="}",ie++):(i=o,0===fe&&we(l)),i!==o?(ue=t,u=n,s=a,We.pop(),t=g({id:u,value:s},qe())):(ie=t,t=o)):(ie=t,t=o)):(ie=t,t=o)):(ie=t,t=o),t}function Re(){var t;return fe++,B.test(e.charAt(ie))?(t=e.charAt(ie),ie++):(t=o,0===fe&&we(z)),fe--,t===o&&(o,0===fe&&we(F)),t}function Ie(){var t;return fe++,W.test(e.charAt(ie))?(t=e.charAt(ie),ie++):(t=o,0===fe&&we(G)),fe--,t===o&&(o,0===fe&&we(H)),t}function De(){var t,n,r;for(fe++,t=ie,n=[],r=Re();r!==o;)n.push(r),r=Re();return t=n!==o?e.substring(t,ie):n,fe--,t===o&&(n=o,0===fe&&we(q)),t}function Le(){var t,n,r,a,i;return fe++,t=ie,45===e.charCodeAt(ie)?(n="-",ie++):(n=o,0===fe&&we(Y)),n===o&&(n=null),n!==o&&(r=ze())!==o?(ue=t,a=n,t=n=(i=r)?a?-i:i:0):(ie=t,t=o),fe--,t===o&&(n=o,0===fe&&we($)),t}function Me(){var t,n;return fe++,t=ie,"''"===e.substr(ie,2)?(n="''",ie+=2):(n=o,0===fe&&we(X)),n!==o&&(ue=t,n="'"),fe--,(t=n)===o&&(n=o,0===fe&&we(V)),t}function Ue(){var t,n,r,a,i,u;if(t=ie,39===e.charCodeAt(ie)?(n="'",ie++):(n=o,0===fe&&we(x)),n!==o)if((r=function(){var t,n,r,a;t=ie,n=ie,e.length>ie?(r=e.charAt(ie),ie++):(r=o,0===fe&&we(h));r!==o?(ue=ie,(a=(a="{"===(i=r)||"}"===i||Ge()&&"#"===i)?void 0:o)!==o?n=r=[r,a]:(ie=n,n=o)):(ie=n,n=o);var i;t=n!==o?e.substring(t,ie):n;return t}())!==o){for(a=ie,i=[],"''"===e.substr(ie,2)?(u="''",ie+=2):(u=o,0===fe&&we(X)),u===o&&(j.test(e.charAt(ie))?(u=e.charAt(ie),ie++):(u=o,0===fe&&we(k)));u!==o;)i.push(u),"''"===e.substr(ie,2)?(u="''",ie+=2):(u=o,0===fe&&we(X)),u===o&&(j.test(e.charAt(ie))?(u=e.charAt(ie),ie++):(u=o,0===fe&&we(k)));(a=i!==o?e.substring(a,ie):i)!==o?(39===e.charCodeAt(ie)?(i="'",ie++):(i=o,0===fe&&we(x)),i===o&&(i=null),i!==o?(ue=t,t=n=r+a.replace("''","'")):(ie=t,t=o)):(ie=t,t=o)}else ie=t,t=o;else ie=t,t=o;return t}function Fe(){var t,n,r,a;return t=ie,n=ie,e.length>ie?(r=e.charAt(ie),ie++):(r=o,0===fe&&we(h)),r!==o?(ue=ie,(a=(a=K(r))?void 0:o)!==o?n=r=[r,a]:(ie=n,n=o)):(ie=n,n=o),n===o&&(10===e.charCodeAt(ie)?(n="\n",ie++):(n=o,0===fe&&we(Q))),t=n!==o?e.substring(t,ie):n}function Be(){var t,n;return fe++,t=ie,(n=ze())===o&&(n=He()),t=n!==o?e.substring(t,ie):n,fe--,t===o&&(n=o,0===fe&&we(Z)),t}function ze(){var t,n,r,a,i;if(fe++,t=ie,48===e.charCodeAt(ie)?(n="0",ie++):(n=o,0===fe&&we(ee)),n!==o&&(ue=t,n=0),(t=n)===o){if(t=ie,n=ie,te.test(e.charAt(ie))?(r=e.charAt(ie),ie++):(r=o,0===fe&&we(ne)),r!==o){for(a=[],re.test(e.charAt(ie))?(i=e.charAt(ie),ie++):(i=o,0===fe&&we(oe));i!==o;)a.push(i),re.test(e.charAt(ie))?(i=e.charAt(ie),ie++):(i=o,0===fe&&we(oe));a!==o?n=r=[r,a]:(ie=n,n=o)}else ie=n,n=o;n!==o&&(ue=t,n=parseInt(n.join(""),10)),t=n}return fe--,t===o&&(n=o,0===fe&&we(J)),t}function He(){var t,n,r,a,i;if(fe++,t=ie,n=[],r=ie,a=ie,fe++,(i=Re())===o&&(i=Ie()),fe--,i===o?a=void 0:(ie=a,a=o),a!==o?(e.length>ie?(i=e.charAt(ie),ie++):(i=o,0===fe&&we(h)),i!==o?r=a=[a,i]:(ie=r,r=o)):(ie=r,r=o),r!==o)for(;r!==o;)n.push(r),r=ie,a=ie,fe++,(i=Re())===o&&(i=Ie()),fe--,i===o?a=void 0:(ie=a,a=o),a!==o?(e.length>ie?(i=e.charAt(ie),ie++):(i=o,0===fe&&we(h)),i!==o?r=a=[a,i]:(ie=r,r=o)):(ie=r,r=o);else n=o;return t=n!==o?e.substring(t,ie):n,fe--,t===o&&(n=o,0===fe&&we(ae)),t}var We=["root"];function Ge(){return"plural"===We[We.length-1]}function qe(){return t&&t.captureLocation?{location:pe()}:{}}if((n=i())!==o&&ie===e.length)return n;throw n!==o&&ie<e.length&&we({type:"end"}),_e(le,ce<e.length?e.charAt(ce):null,ce<e.length?be(ce,ce+1):be(ce,ce))},b=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var a=arguments[t],i=0,u=a.length;i<u;i++,o++)r[o]=a[i];return r},w=/(^|[^\\])#/g;function _(e,t){var n=y(e,t);return t&&!1===t.normalizeHashtagInPlural||function e(t){t.forEach((function(t){(l(t)||c(t))&&Object.keys(t.options).forEach((function(n){for(var r,a=t.options[n],i=-1,u=void 0,s=0;s<a.value.length;s++){var c=a.value[s];if(o(c)&&w.test(c.value)){i=s,u=c;break}}if(u){var l=u.value.replace(w,"$1{"+t.value+", number}"),f=y(l);(r=a.value).splice.apply(r,b([i,1],f))}e(a.value)}))}))}(n),n}var O=n(20),E=function(){return(E=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},S=/(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;function x(e){var t={};return e.replace(S,(function(e){var n=e.length;switch(e[0]){case"G":t.era=4===n?"long":5===n?"narrow":"short";break;case"y":t.year=2===n?"2-digit":"numeric";break;case"Y":case"u":case"U":case"r":throw new RangeError("`Y/u/U/r` (year) patterns are not supported, use `y` instead");case"q":case"Q":throw new RangeError("`q/Q` (quarter) patterns are not supported");case"M":case"L":t.month=["numeric","2-digit","short","long","narrow"][n-1];break;case"w":case"W":throw new RangeError("`w/W` (week) patterns are not supported");case"d":t.day=["numeric","2-digit"][n-1];break;case"D":case"F":case"g":throw new RangeError("`D/F/g` (day) patterns are not supported, use `d` instead");case"E":t.weekday=4===n?"short":5===n?"narrow":"short";break;case"e":if(n<4)throw new RangeError("`e..eee` (weekday) patterns are not supported");t.weekday=["short","long","narrow","short"][n-4];break;case"c":if(n<4)throw new RangeError("`c..ccc` (weekday) patterns are not supported");t.weekday=["short","long","narrow","short"][n-4];break;case"a":t.hour12=!0;break;case"b":case"B":throw new RangeError("`b/B` (period) patterns are not supported, use `a` instead");case"h":t.hourCycle="h12",t.hour=["numeric","2-digit"][n-1];break;case"H":t.hourCycle="h23",t.hour=["numeric","2-digit"][n-1];break;case"K":t.hourCycle="h11",t.hour=["numeric","2-digit"][n-1];break;case"k":t.hourCycle="h24",t.hour=["numeric","2-digit"][n-1];break;case"j":case"J":case"C":throw new RangeError("`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead");case"m":t.minute=["numeric","2-digit"][n-1];break;case"s":t.second=["numeric","2-digit"][n-1];break;case"S":case"A":throw new RangeError("`S/A` (second) pattenrs are not supported, use `s` instead");case"z":t.timeZoneName=n<4?"short":"long";break;case"Z":case"O":case"v":case"V":case"X":case"x":throw new RangeError("`Z/O/v/V/X/x` (timeZone) pattenrs are not supported, use `z` instead")}return""})),t}var j=/^\.(?:(0+)(\+|#+)?)?$/g,k=/^(@+)?(\+|#+)?$/g;function T(e){var t={};return e.replace(k,(function(e,n,r){return"string"!=typeof r?(t.minimumSignificantDigits=n.length,t.maximumSignificantDigits=n.length):"+"===r?t.minimumSignificantDigits=n.length:"#"===n[0]?t.maximumSignificantDigits=n.length:(t.minimumSignificantDigits=n.length,t.maximumSignificantDigits=n.length+("string"==typeof r?r.length:0)),""})),t}function C(e){switch(e){case"sign-auto":return{signDisplay:"auto"};case"sign-accounting":return{currencySign:"accounting"};case"sign-always":return{signDisplay:"always"};case"sign-accounting-always":return{signDisplay:"always",currencySign:"accounting"};case"sign-except-zero":return{signDisplay:"exceptZero"};case"sign-accounting-except-zero":return{signDisplay:"exceptZero",currencySign:"accounting"};case"sign-never":return{signDisplay:"never"}}}function A(e){var t=C(e);return t||{}}function N(e){for(var t={},n=0,r=e;n<r.length;n++){var o=r[n];switch(o.stem){case"percent":t.style="percent";continue;case"currency":t.style="currency",t.currency=o.options[0];continue;case"group-off":t.useGrouping=!1;continue;case"precision-integer":t.maximumFractionDigits=0;continue;case"measure-unit":t.style="unit",t.unit=o.options[0].replace(/^(.*?)-/,"");continue;case"compact-short":t.notation="compact",t.compactDisplay="short";continue;case"compact-long":t.notation="compact",t.compactDisplay="long";continue;case"scientific":t=E(E(E({},t),{notation:"scientific"}),o.options.reduce((function(e,t){return E(E({},e),A(t))}),{}));continue;case"engineering":t=E(E(E({},t),{notation:"engineering"}),o.options.reduce((function(e,t){return E(E({},e),A(t))}),{}));continue;case"notation-simple":t.notation="standard";continue;case"unit-width-narrow":t.currencyDisplay="narrowSymbol",t.unitDisplay="narrow";continue;case"unit-width-short":t.currencyDisplay="code",t.unitDisplay="short";continue;case"unit-width-full-name":t.currencyDisplay="name",t.unitDisplay="long";continue;case"unit-width-iso-code":t.currencyDisplay="symbol";continue}if(j.test(o.stem)){if(o.options.length>1)throw new RangeError("Fraction-precision stems only accept a single optional option");o.stem.replace(j,(function(e,n,r){return"."===e?t.maximumFractionDigits=0:"+"===r?t.minimumFractionDigits=r.length:"#"===n[0]?t.maximumFractionDigits=n.length:(t.minimumFractionDigits=n.length,t.maximumFractionDigits=n.length+("string"==typeof r?r.length:0)),""})),o.options.length&&(t=E(E({},t),T(o.options[0])))}else if(k.test(o.stem))t=E(E({},t),T(o.stem));else{var a=C(o.stem);a&&(t=E(E({},t),a))}}return t}var P,R=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),I=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var a=arguments[t],i=0,u=a.length;i<u;i++,o++)r[o]=a[i];return r},D=function(e){function t(t,n){var r=e.call(this,t)||this;return r.variableId=n,r}return R(t,e),t}(Error);function L(e,t,n,r,h,m,g){if(1===e.length&&o(e[0]))return[{type:0,value:e[0].value}];for(var v,y=[],b=0,w=e;b<w.length;b++){var _=w[b];if(o(_))y.push({type:0,value:_.value});else if(f(_))"number"==typeof m&&y.push({type:0,value:n.getNumberFormat(t).format(m)});else{var O=_.value;if(!h||!(O in h))throw new D('The intl string context variable "'+O+'" was not provided to the string "'+g+'"');var E=h[O];if(a(_))E&&"string"!=typeof E&&"number"!=typeof E||(E="string"==typeof E||"number"==typeof E?String(E):""),y.push({type:1,value:E});else if(u(_)){var S="string"==typeof _.style?r.date[_.style]:void 0;y.push({type:0,value:n.getDateTimeFormat(t,S).format(E)})}else if(s(_)){S="string"==typeof _.style?r.time[_.style]:p(_.style)?x(_.style.pattern):void 0;y.push({type:0,value:n.getDateTimeFormat(t,S).format(E)})}else if(i(_)){S="string"==typeof _.style?r.number[_.style]:d(_.style)?N(_.style.tokens):void 0;y.push({type:0,value:n.getNumberFormat(t,S).format(E)})}else if(c(_)){if(!(j=_.options[E]||_.options.other))throw new RangeError('Invalid values for "'+_.value+'": "'+E+'". Options are "'+Object.keys(_.options).join('", "')+'"');y.push.apply(y,L(j.value,t,n,r,h))}else if(l(_)){var j;if(!(j=_.options["="+E])){if(!Intl.PluralRules)throw new D('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n');var k=n.getPluralRules(t,{type:_.pluralType}).select(E-(_.offset||0));j=_.options[k]||_.options.other}if(!j)throw new RangeError('Invalid values for "'+_.value+'": "'+E+'". Options are "'+Object.keys(_.options).join('", "')+'"');y.push.apply(y,L(j.value,t,n,r,h,E-(_.offset||0)))}else;}}return(v=y).length<2?v:v.reduce((function(e,t){var n=e[e.length-1];return n&&0===n.type&&0===t.type?n.value+=t.value:e.push(t),e}),[])}var M=/@@(\d+_\d+)@@/g,U=0;function F(e,t){return e.split(M).filter(Boolean).map((function(e){return null!=t[e]?t[e]:e})).reduce((function(e,t){return e.length&&"string"==typeof t&&"string"==typeof e[e.length-1]?e[e.length-1]+=t:e.push(t),e}),[])}var B=/(<([0-9a-zA-Z-_]*?)>(.*?)<\/([0-9a-zA-Z-_]*?)>)|(<[0-9a-zA-Z-_]*?\/>)/,z=Date.now()+"@@",H=["area","base","br","col","embed","hr","img","input","link","meta","param","source","track","wbr"];function W(e,t,n,r,o,a){var i=L(e,t,n,r,o,void 0,a),u={},s=i.reduce((function(e,t){if(0===t.type)return e+t.value;var n=Date.now()+"_"+ ++U;return u[n]=t.value,e+"@@"+n+"@@"}),"");if(!B.test(s))return F(s,u);if(!o)throw new D("Message has placeholders but no values was given");if("undefined"==typeof DOMParser)throw new D("Cannot format XML message without DOMParser");P||(P=new DOMParser);var c=P.parseFromString('<formatted-message id="'+z+'">'+s+"</formatted-message>","text/html").getElementById(z);if(!c)throw new D("Malformed HTML message "+s);var l=Object.keys(o).filter((function(e){return!!c.getElementsByTagName(e).length}));if(!l.length)return F(s,u);var f=l.filter((function(e){return e!==e.toLowerCase()}));if(f.length)throw new D("HTML tag must be lowercased but the following tags are not: "+f.join(", "));return Array.prototype.slice.call(c.childNodes).reduce((function(e,t){return e.concat(function e(t,n,r){var o=t.tagName,a=t.outerHTML,i=t.textContent,u=t.childNodes;if(!o)return F(i||"",n);o=o.toLowerCase();var s=~H.indexOf(o),c=r[o];if(c&&s)throw new D(o+" is a self-closing tag and can not be used, please use another tag name.");if(!u.length)return[a];var l=Array.prototype.slice.call(u).reduce((function(t,o){return t.concat(e(o,n,r))}),[]);return c?"function"==typeof c?[c.apply(void 0,l)]:[c]:I(["<"+o+">"],l,["</"+o+">"])}(t,u,o))}),[])}var G=function(){return(G=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function q(e,t){return t?Object.keys(e).reduce((function(n,r){var o,a;return n[r]=(o=e[r],(a=t[r])?G(G(G({},o||{}),a||{}),Object.keys(o).reduce((function(e,t){return e[t]=G(G({},o[t]),a[t]||{}),e}),{})):o),n}),G({},e)):e}var $=function(){function e(t,n,r,o){var a,i=this;if(void 0===n&&(n=e.defaultLocale),this.formatterCache={number:{},dateTime:{},pluralRules:{}},this.format=function(e){return function(e,t,n,r,o,a){var i=L(e,t,n,r,o,void 0,a);return 1===i.length?i[0].value:i.reduce((function(e,t){return e+t.value}),"")}(i.ast,i.locales,i.formatters,i.formats,e,i.message)},this.formatToParts=function(e){return L(i.ast,i.locales,i.formatters,i.formats,e,void 0,i.message)},this.formatHTMLMessage=function(e){return W(i.ast,i.locales,i.formatters,i.formats,e,i.message)},this.resolvedOptions=function(){return{locale:Intl.NumberFormat.supportedLocalesOf(i.locales)[0]}},this.getAst=function(){return i.ast},"string"==typeof t){if(this.message=t,!e.__parse)throw new TypeError("IntlMessageFormat.__parse must be set to process `message` of type `string`");this.ast=e.__parse(t,{normalizeHashtagInPlural:!1})}else this.ast=t;if(!Array.isArray(this.ast))throw new TypeError("A message must be provided as a String or AST.");this.formats=q(e.formats,r),this.locales=n,this.formatters=o&&o.formatters||(void 0===(a=this.formatterCache)&&(a={number:{},dateTime:{},pluralRules:{}}),{getNumberFormat:Object(O.a)(Intl.NumberFormat,a.number),getDateTimeFormat:Object(O.a)(Intl.DateTimeFormat,a.dateTime),getPluralRules:Object(O.a)(Intl.PluralRules,a.pluralRules)})}return e.defaultLocale=(new Intl.NumberFormat).resolvedOptions().locale,e.__parse=_,e.formats={number:{currency:{style:"currency"},percent:{style:"percent"}},date:{short:{month:"numeric",day:"numeric",year:"2-digit"},medium:{month:"short",day:"numeric",year:"numeric"},long:{month:"long",day:"numeric",year:"numeric"},full:{weekday:"long",month:"long",day:"numeric",year:"numeric"}},time:{short:{hour:"numeric",minute:"numeric"},medium:{hour:"numeric",minute:"numeric",second:"numeric"},long:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"},full:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"}}},e}();t.a=$},function(e,t,n){"use strict";var r=n(0),o=n.n(r),a=n(3),i=n.n(a),u=n(85),s=n.n(u),c=i()(s.a);t.a=function(e){var t=e.view,n=e.className;return o.a.createElement("div",{className:c("wrapper")(null,n)},o.a.createElement("div",{className:c("dot")({view:t,first:!0})}),o.a.createElement("div",{className:c("dot")({view:t,second:!0})}),o.a.createElement("div",{className:c("dot")({view:t,third:!0})}),o.a.createElement("div",{className:c("dot")({view:t,fourth:!0})}))}},function(e,t,n){"use strict";var r=n(117),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function s(e){return r.isMemo(e)?i:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=i;var c=Object.defineProperty,l=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=l(n);f&&(i=i.concat(f(n)));for(var u=s(t),m=s(n),g=0;g<i.length;++g){var v=i[g];if(!(a[v]||r&&r[v]||m&&m[v]||u&&u[v])){var y=d(n,v);try{c(t,v,y)}catch(e){}}}}return t}},function(e,t,n){"use strict";var r=n(0),o=n.n(r),a=n(3),i=n.n(a),u=n(107),s=n.n(u),c=i()(s.a);t.a=function(e){var t=e.children,n=e.className,r=e.size;return o.a.createElement("h2",{className:c("title")({size:r},n)},t)}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";(function(e,r){var o,a=n(87);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var i=Object(a.a)(o);t.a=i}).call(this,n(40),n(57)(e))},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(10);function o(e){try{for(var t=e,n=[],r=0,o=0,i=" > ".length,u=void 0;t&&r++<5&&!("html"===(u=a(t))||r>1&&o+n.length*i+u.length>=80);)n.push(u),o+=u.length,t=t.parentNode;return n.reverse().join(" > ")}catch(e){return"<unknown>"}}function a(e){var t,n,o,a,i,u=e,s=[];if(!u||!u.tagName)return"";if(s.push(u.tagName.toLowerCase()),u.id&&s.push("#"+u.id),(t=u.className)&&Object(r.k)(t))for(n=t.split(/\s+/),i=0;i<n.length;i++)s.push("."+n[i]);var c=["type","name","title","alt"];for(i=0;i<c.length;i++)o=c[i],(a=u.getAttribute(o))&&s.push("["+o+'="'+a+'"]');return s.join("")}},function(e,t){var n,r,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var s,c=[],l=!1,f=-1;function d(){l&&s&&(l=!1,s.length?c=s.concat(c):f=-1,c.length&&p())}function p(){if(!l){var e=u(d);l=!0;for(var t=c.length;t;){for(s=c,c=[];++f<t;)s&&s[f].run();f=-1,t=c.length}s=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||l||u(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r,o=n(0),a=n.n(o),i=n(3),u=n.n(i),s=n(24),c=n.n(s),l=function(e){var t=e.current;return t?t.getBoundingClientRect():null};!function(e){e.TOP="top",e.TOP_START="top-start",e.TOP_END="top-end",e.RIGHT="right",e.RIGHT_START="right-start",e.RIGHT_END="right-end",e.BOTTOM="bottom",e.BOTTOM_START="bottom-start",e.BOTTOM_END="bottom-end",e.LEFT="left",e.LEFT_START="left-start",e.LEFT_END="left-end"}(r||(r={}));var f=function(e,t,n,o,a){var i={top:0,left:0};if(!t||!a||!e)return null;var u=e.left-t.width-17,s=e.left+e.width+17,c=e.top+window.pageYOffset-t.height-17,l=e.top+window.pageYOffset+e.height+17,f=e.top+window.pageYOffset-t.height+e.height+15,d=e.top+window.pageYOffset-t.height/2+e.height/2,p=e.left-t.width/2+e.width/2;switch(n){case r.TOP_START:i.top=c,i.left=e.left-15;break;case r.TOP:i.top=c,i.left=p;break;case r.TOP_END:i.top=c,i.left=e.left-t.width+e.width+15;break;case r.LEFT_START:i.top=e.top+window.pageYOffset-15,i.left=u;break;case r.LEFT:i.top=d,i.left=u;break;case r.LEFT_END:i.top=f,i.left=u;break;case r.BOTTOM_START:i.top=l,i.left=e.left-15;break;case r.BOTTOM:i.top=l,i.left=p;break;case r.BOTTOM_END:i.top=l,i.left=e.left-t.width+e.width+15;break;case r.RIGHT_START:i.top=e.top+window.pageYOffset-15,i.left=s;break;case r.RIGHT:i.top=d,i.left=s;break;case r.RIGHT_END:i.top=f,i.left=s;break;default:S(n)}return o?{top:i.top+o.top,left:i.left+o.left}:i},d=n(102),p=n.n(d);function h(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?h(Object(n),!0).forEach((function(t){g(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):h(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function v(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return y(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return y(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function y(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var b=u()(p.a),w=b("tooltip"),_=b("tooltipUnderlay"),O=b("tooltipWrapper"),E=b("tooltipTitle"),S=function(e){throw Error("Unexpected position ".concat(e))},x=function(e){var t=e.isOpened,n=void 0!==t&&t,r=e.children,i=e.title,u=e.position,s=e.offset,d=e.containerRef,p=e.parentRef,h=e.isLimitedByContainer,g=void 0!==h&&h,y=v(Object(o.useState)(null),2),b=y[0],S=y[1],x=v(Object(o.useState)({top:0,left:0}),2),j=x[0],k=x[1],T=Object(o.useRef)(null),C=l(d),A=p&&l(p),N=function(){return requestAnimationFrame((function(){var e=l(d);e&&k(f(e,b,u,s,n))}))};if(Object(o.useLayoutEffect)((function(){S(l(T))}),[r]),Object(o.useEffect)((function(){return N(),window&&window.addEventListener("resize",N),function(){window&&window.removeEventListener("resize",N)}}),[n,b,u]),!j)return null;var P=Boolean(j.top)&&Boolean(j.left),R=C&&g?C.width:void 0;return A&&g&&(R=A.width),c.a.createPortal(a.a.createElement("div",{className:w({shown:P}),style:m(m({},j),{},{width:R,maxWidth:R}),ref:T},a.a.createElement("div",{className:_({position:u}),"aria-hidden":"true"}),a.a.createElement("div",{className:O({titled:Boolean(i)})},i&&a.a.createElement("p",{className:E()},i),r)),document.body)};function j(){return(j=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function k(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function T(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?k(Object(n),!0).forEach((function(t){C(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):k(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function C(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function A(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return N(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return N(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function N(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var P=function(e){var t=e.children,n=e.tooltipContent,r=e.isOpened,i=void 0!==r&&r,u=e.title,s=e.position,c=e.offset,l=e.getEvents,f=e.parentRef,d=e.isLimitedByContainer,p=void 0!==d&&d,h=e.tooltipCallback,m=A(Object(o.useState)(i),2),g=m[0],v=m[1],y=Object(o.useRef)(null),b=function(){h&&h(),v(!0)},w=function(){return v(!1)};return a.a.createElement(a.a.Fragment,null,n&&g&&a.a.createElement(x,{isOpened:g,position:s,offset:c,title:u,containerRef:y,parentRef:f,isLimitedByContainer:p},n()),"function"==typeof t?t(T(T({},l(b,w)),{},{ref:y})):a.a.createElement("div",j({},l(b,w),{ref:y}),t))};function R(){return(R=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function I(e,t){return{onMouseEnter:e,onMouseLeave:t}}var D=function(e){return a.a.createElement(P,R({getEvents:I},e))},L=n(70),M=n.n(L),U=function(e){document.body.style.overflow=e?"hidden":"visible"},F=n(103),B=n.n(F);function z(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return H(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return H(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function H(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var W=u()(B.a),G=function(e){var t,n=e.triggerElement,r=e.children,i=e.isOpened,u=void 0!==i&&i,s=e.isAlert,c=void 0!==s&&s,l=e.onClose,f=e.popup,d=z(Object(o.useState)(u),2),p=d[0],h=d[1],m=function(){h(!1),U(!1),l&&l()},g=function(e){"Escape"===e.key&&m()},v=function(e){e.target===t&&m()};return Object(o.useEffect)((function(){return function(){t&&t.removeEventListener("click",v),document.removeEventListener("keydown",g)}})),c?a.a.createElement(M.a,{isOpen:!0,ariaHideApp:!1,className:W("root")(),overlayClassName:W("overlay")({popup:f})},r((function(){}))):a.a.createElement(a.a.Fragment,null,n&&n((function(){h(!0),U(!0)})),a.a.createElement(M.a,{isOpen:p,ariaHideApp:!1,className:W("root")(),overlayClassName:W("overlay")({popup:f}),shouldCloseOnOverlayClick:!0,onAfterOpen:function(){document.addEventListener("keydown",g),t.addEventListener("click",v)},overlayRef:function(e){t=e}},r(m)))},q=n(104),$=n.n(q);function Y(){return(Y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function V(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var X,K,Q=u()($.a);!function(e){e.XS="xs",e.S="s",e.M="m"}(X||(X={})),function(e){e.S="s",e.M="m",e.L="l"}(K||(K={}));var Z=function(e){var t=e.padding,n=e.shadowSize,r=e.className,o=V(e,["padding","shadowSize","className"]);return a.a.createElement("div",Y({},o,{className:Q("card")({padding:t,shadowSize:n},r)}))},J=n(74),ee=n(66),te=n(105),ne=n.n(te);function re(){return(re=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function oe(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return ae(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ae(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ae(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ie(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var ue,se=u()(ne.a);!function(e){e.REGULAR="regular",e.MINI="mini"}(ue||(ue={}));t.b=function(e){var t=e.variant,n=void 0===t?ue.REGULAR:t,r=e.className,i=ie(e,["variant","className"]),u=oe(Object(o.useState)(!1),2),s=u[0],c=u[1];Object(o.useEffect)((function(){c(Object(ee.a)())}),[]);var l=i.title,f=i.tooltipContent,d=a.a.createElement(D,i,(function(e){return a.a.createElement("button",re({},e,{className:se("hint")({variant:n},r),type:"button",tabIndex:-1}),"?")}));return s?a.a.createElement(G,{triggerElement:function(e){return a.a.createElement("button",{onClick:e,className:se("hint")({variant:n},r),type:"button",tabIndex:-1},"?")}},(function(e){return a.a.createElement(Z,{padding:X.M},a.a.createElement("button",{onClick:e,className:se("mobileCloseButton")(),type:"button"},a.a.createElement(J.a,{width:"22",height:"22",fill:"white"})),l&&a.a.createElement("p",{className:se("hintTitle")()},l),f())})):d}},,function(e,t,n){"use strict";var r=n(0),o=n.n(r),a=n(3),i=n.n(a),u=n(48),s=n(207),c=n(109),l=n.n(c),f=i()(l.a),d={entered:f("entered")(),exiting:f("exiting")(),exited:f("exited")()},p={enter:0,exit:240},h=function(e){var t=e.children,n=e.className,r=void 0===n?"":n,a=e.isFullWidth,i=void 0!==a&&a,u=e.isVisible,c=void 0===u||u;return o.a.createElement("div",null,o.a.createElement(s.a,{in:c,timeout:p,unmountOnExit:!0},(function(e){return o.a.createElement("div",{className:f("dropdown")({fullWidth:i},[d[e],r])},t)})))},m=n(43),g=function(e){var t=e.className,n=e.fill,r=void 0===n?"#868686":n,a=e.height,i=void 0===a?18:a,u=e.width,s=void 0===u?18:u;return o.a.createElement("svg",{className:t,fill:r,height:i,viewBox:"0 0 20 21",width:s},o.a.createElement("path",{fillRule:"nonzero",d:"M7.128 18.978a9.447 9.447 0 0 1-1.447-.6.672.672 0 0 1-.353-.63l.061-1.179a.651.651 0 0 0-.25-.54 7.935 7.935 0 0 1-1.168-1.168.65.65 0 0 0-.54-.249l-1.179.059a.669.669 0 0 1-.63-.351 9.447 9.447 0 0 1-.6-1.447.673.673 0 0 1 .196-.698l1.125-1.016A7.69 7.69 0 0 1 2.257 10c0-.393.028-.781.086-1.158L1.218 7.825a.672.672 0 0 1-.196-.698c.16-.502.362-.984.6-1.446a.67.67 0 0 1 .63-.352l1.179.059a.646.646 0 0 0 .54-.249c.347-.428.739-.821 1.169-1.168a.654.654 0 0 0 .25-.54l-.062-1.18a.672.672 0 0 1 .353-.63c.461-.237.945-.44 1.447-.6a.675.675 0 0 1 .696.196L8.84 2.342a7.87 7.87 0 0 1 2.32 0l1.015-1.125a.676.676 0 0 1 .697-.196c.503.16.987.363 1.447.6a.67.67 0 0 1 .352.63l-.06 1.18a.65.65 0 0 0 .249.54c.43.347.822.74 1.169 1.168.132.165.33.26.54.249l1.18-.06c.26-.013.51.122.629.353.238.462.44.944.6 1.446a.675.675 0 0 1-.196.698L17.658 8.84a7.854 7.854 0 0 1 0 2.318l1.124 1.016c.193.175.275.45.197.698a9.452 9.452 0 0 1-.601 1.447.666.666 0 0 1-.63.35l-1.18-.058a.65.65 0 0 0-.54.249c-.346.428-.739.821-1.168 1.169a.647.647 0 0 0-.249.54l.06 1.178a.67.67 0 0 1-.352.63c-.46.238-.944.44-1.447.6a.673.673 0 0 1-.697-.196l-1.015-1.124a7.866 7.866 0 0 1-2.32 0l-1.016 1.124a.673.673 0 0 1-.696.196M10 13.08a3.08 3.08 0 1 0-.002-6.16A3.08 3.08 0 0 0 10 13.08"}))},v=n(110),y=n.n(v);function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function w(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){_(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var O=i()(y.a),E=function(e){var t=e.children,n=e.className,a=e.icon,i=void 0===a?o.a.createElement(g,null):a,s=e.isVisible,c=void 0!==s&&s,l=e.onChange,f=e.title,d=Object(r.useCallback)((function(){l&&l(!0)}),[l]),p=Object(r.useCallback)((function(){l&&l(!1)}),[l]);return o.a.createElement("div",{className:O("contextMenu")(null,n)},o.a.createElement(u.a,{className:O("dotsContainer")(),onClick:d},i),o.a.createElement(h,{className:O("dropdown")(),isVisible:c},o.a.createElement("p",{className:O("title")()},f),o.a.createElement("div",{className:O("optionContainer")()},o.a.Children.map(t,(function(e){var t=w(w({},e.props),{},{className:O("optionItem")(null,e.props.className)});return o.a.cloneElement(e,t)}))),o.a.createElement(u.a,{className:O("closeButton")(),onClick:p},o.a.createElement(m.a,null))))};t.a=o.a.memo(E)},function(e,t,n){"use strict";var r=n(2),o=n.n(r),a=n(0),i=n(8);function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function f(e,t,n,r,o,a,i){try{var u=e[a](i),s=u.value}catch(e){return void n(e)}u.done?t(s):Promise.resolve(s).then(r,o)}function d(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return p(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return p(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function p(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}t.a=function(){var e=d(Object(a.useState)(null),2),t=e[0],n=e[1],r=d(Object(a.useState)(!1),2),u=r[0],c=r[1],p=d(Object(a.useState)(null),2),h=p[0],m=p[1];return{error:t,handleBackgroundRequest:Object(a.useCallback)(function(){var e,t=(e=o.a.mark((function e(t){var r,a,u;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.command,a=l(t,["command"]),n(null),c(!0),e.next=5,i.browser.runtime.sendMessage(s({command:r},a));case 5:"error"===(u=e.sent).status&&u.error&&n(u.error),c(!1),m(u.status);case 9:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){f(a,r,o,i,u,"next",e)}function u(e){f(a,r,o,i,u,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),[]),isLoading:u,status:h}}},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(37),o=function(e){return r.a.getState().theme.sizes[e]},a=n(27),i=function(){return document.documentElement.clientWidth<=o(a.a.MOBILE)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.canUseDOM=void 0;var r,o=n(159);var a=((r=o)&&r.__esModule?r:{default:r}).default,i=a.canUseDOM?window.HTMLElement:{};t.canUseDOM=a.canUseDOM;t.default=i},function(e,t,n){"use strict";var r=n(0),o=n.n(r),a=n(3),i=n.n(a),u=n(8),s=n(35),c=n(112),l=n.n(c),f=i()(l.a);t.a=function(e){var t=e.className,n=e.height,r=e.size,a=void 0===r?"m":r,i=e.width;return o.a.createElement("div",{className:f("logo")({size:a},t)},o.a.createElement("img",{alt:"",className:f("inner")(),height:n,src:u.browser.runtime.getURL(s.a.images.LOGO),width:i}))}},function(e,t,n){"use strict";var r,o=n(2),a=n.n(o),i=n(0),u=n.n(i),s=n(3),c=n.n(s),l=n(115),f=n(7),d=n(4),p=n(63),h=function(e){var t=e.className,n=e.height,r=void 0===n?16:n,o=e.width,a=void 0===o?16:o;return u.a.createElement("svg",{className:t,height:r,viewBox:"0 0 16 16",width:a},u.a.createElement("path",{fill:"currentColor",d:"m13.70275 4.30075c-.401-.401-1.059-.401-1.46 0l-5.989 5.988-2.498-2.498c-.393-.393-1.037-.393-1.431 0l-.03.03c-.393.393-.393 1.038 0 1.431l3.244 3.243c.393.394 1.038.394 1.431 0l.015-.014.014-.015 6.704-6.704c.402-.401.402-1.059 0-1.461"}))},m=function(e){var t=e.className,n=e.height,r=void 0===n?20:n,o=e.width,a=void 0===o?20:o;return u.a.createElement("svg",{className:t,fill:"none",height:r,viewBox:"0 0 20 20",width:a,xmlns:"http://www.w3.org/2000/svg"},u.a.createElement("rect",{opacity:"0.4",width:"20",height:"20",rx:"3",fill:"white"}),u.a.createElement("mask",{id:"mask0","mask-type":"alpha",maskUnits:"userSpaceOnUse",x:"0",y:"0",width:"20",height:"20"},u.a.createElement("rect",{width:"20",height:"20",rx:"3",fill:"white"})),u.a.createElement("g",{mask:"url(#mask0)"},u.a.createElement("path",{d:"M23.2253 0H-2.71501C-3.97701 0 -5 1.02299 -5 2.28499V17.7045C-5 18.9665 -3.97701 19.9895 -2.71501 19.9895H23.2253C24.4872 19.9895 25.5102 18.9665 25.5102 17.7045V2.28499C25.5102 1.02299 24.4873 0 23.2253 0Z",fill:"#3741CF"}),u.a.createElement("path",{d:"M25.4786 1.90731C25.2985 0.825207 24.3585 0 23.2253 0H22.6307L12.8853 6.38492V5.95903e-05H7.62492V6.38498L-2.12048 5.95903e-05H-2.71501C-3.84824 5.95903e-05 -4.78828 0.825207 -4.96836 1.90737L3.36106 7.36465H-5V12.625H3.36106L-4.96836 18.0822C-4.78828 19.1643 -3.84824 19.9895 -2.71501 19.9895H-2.12048L7.62492 13.6046V19.9895H12.8853V13.6046L22.6307 19.9895H23.2253C24.3585 19.9895 25.2985 19.1644 25.4786 18.0822L17.1492 12.6249H25.5102V7.36453H17.1492L25.4786 1.90731Z",fill:"#F5F5F5"}),u.a.createElement("path",{d:"M11.8333 0H8.67699V8.4166H-5V11.5729H8.67699V19.9895H11.8333V11.5729H25.5102V8.4166H11.8333V0Z",fill:"#E6000D"}),u.a.createElement("path",{clipRule:"evenodd",d:"M24.9501 0.787288L14.8176 7.36457H12.8853L24.0146 0.140137C24.3759 0.27367 24.6977 0.496265 24.9501 0.787288ZM-4.75879 1.2632L4.64039 7.36447H6.57279L-4.07791 0.450806C-4.36518 0.66474 -4.59836 0.942964 -4.75879 1.2632ZM7.59574 12.6249L-3.5228 19.8421C-3.88187 19.7061 -4.20092 19.4818 -4.45056 19.1901L5.66335 12.6249H7.59574ZM13.7086 12.6249H15.641L25.2097 18.836C25.0304 19.1497 24.7795 19.4167 24.4775 19.6151L13.7086 12.6249Z",fill:"#E6000D",fillRule:"evenodd"})))},g=function(e){var t=e.className,n=e.height,r=void 0===n?20:n,o=e.width,a=void 0===o?20:o;return u.a.createElement("svg",{className:t,fill:"none",height:r,viewBox:"0 0 20 20",width:a,xmlns:"http://www.w3.org/2000/svg"},u.a.createElement("rect",{width:"20",height:"20",rx:"3",fill:"#E5E5E5"}),u.a.createElement("mask",{id:"mask0","mask-type":"alpha",maskUnits:"userSpaceOnUse",x:"0",y:"0",width:"20",height:"20"},u.a.createElement("rect",{width:"20",height:"20",rx:"3",fill:"white"})),u.a.createElement("g",{mask:"url(#mask0)"},u.a.createElement("rect",{x:"1.25",y:"1.11084",width:"17.5",height:"7.77778",rx:"2",fill:"white"}),u.a.createElement("rect",{y:"6.52734",width:"20",height:"6.66667",fill:"#4086E4"}),u.a.createElement("rect",{y:"13.1943",width:"20",height:"6.66667",fill:"#E04242"})))},v=n(46),y=n(5),b=n(13),w=n(111),_=n.n(w);function O(e,t,n,r,o,a,i){try{var u=e[a](i),s=u.value}catch(e){return void n(e)}u.done?t(s):Promise.resolve(s).then(r,o)}function E(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return S(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return S(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function S(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function x(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var j=c()(_.a),k=(x(r={},f.a.EN,u.a.createElement(m,null)),x(r,f.a.RU,u.a.createElement(g,null)),r);t.a=function(e){var t=e.onChange,n=void 0===t?b.g:t,r=Object(l.a)(),o=E(Object(i.useState)(!1),2),s=o[0],c=o[1],m=Object(i.useContext)(v.a),g=m.language,w=m.setLanguage,_=Object(i.useCallback)(function(){var e,t=(e=a.a.mark((function e(t){var r;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.currentTarget.dataset.language,e.next=3,Object(y.c)(d.a.LANGUAGE,r);case 3:n(r),w(r);case 5:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){O(a,r,o,i,u,"next",e)}function u(e){O(a,r,o,i,u,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),[n,w]);return u.a.createElement(p.a,{icon:k[g],isVisible:s,onChange:c,title:r.formatMessage({id:"language.title"})},Object.entries(f.b).map((function(e){var t=E(e,2),n=t[0],r=t[1];return u.a.createElement("button",{className:j("button")(),"data-language":n,key:n,onClick:_},k[n],u.a.createElement("span",{className:j("label")()},r),n===g&&u.a.createElement(h,null))})))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(154),a=(r=o)&&r.__esModule?r:{default:r};t.default=a.default,e.exports=t.default},function(e,t,n){"use strict";var r,o=n(7);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var i=(a(r={},o.a.EN,{lang:o.a.EN,messages:{"language.title":"Choose language"}}),a(r,o.a.RU,{lang:o.a.RU,messages:{"language.title":"Выберите язык"}}),r);t.a=i},function(e,t,n){"use strict";e.exports=function(e,t){if(e===t)return!0;if(!e||!t)return!1;var n=Object.keys(e),r=Object.keys(t),o=n.length;if(r.length!==o)return!1;for(var a=0;a<o;a++){var i=n[a];if(e[i]!==t[i]||!Object.prototype.hasOwnProperty.call(t,i))return!1}return!0}},function(e,t,n){"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var o=r();o.withExtraArgument=r,t.a=o},function(e,t,n){"use strict";var r=n(0),o=n.n(r);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}t.a=function(e){var t=e.fill,n=void 0===t?"currentColor":t,r=e.width,u=void 0===r?18:r,s=e.height,c=void 0===s?18:s,l=i(e,["fill","width","height"]);return o.a.createElement("svg",a({width:u,height:c,viewBox:"0 0 20 20"},l),o.a.createElement("path",{fill:n,fillRule:"nonzero",d:"M11.6 10l5.1-5.2a1.1 1.1 0 00-1.5-1.6L10 8.4 4.8 3.2a1.1 1.1 0 00-1.6 0 1.1 1.1 0 000 1.6L8.4 10l-5.2 5.2a1.1 1.1 0 000 1.6 1.1 1.1 0 001.6 0l5.2-5.2 5.2 5.2a1.1 1.1 0 001.5-1.6L11.6 10z"}))}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,s=i(e),c=1;c<arguments.length;c++){for(var l in n=Object(arguments[c]))o.call(n,l)&&(s[l]=n[l]);if(r){u=r(n);for(var f=0;f<u.length;f++)a.call(n,u[f])&&(s[u[f]]=n[u[f]])}}return s}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(18);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var a;if(n)a=n(t);else if(r.isURLSearchParams(t))a=t.toString();else{var i=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))})))})),a=i.join("&")}if(a){var u=e.indexOf("#");-1!==u&&(e=e.slice(0,u)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(18),o=n(138),a={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,s={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(u=n(80)),u),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300}};s.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){s.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){s.headers[e]=r.merge(a)})),e.exports=s}).call(this,n(60))},function(e,t,n){"use strict";var r=n(18),o=n(139),a=n(141),i=n(77),u=n(142),s=n(145),c=n(146),l=n(81);e.exports=function(e){return new Promise((function(t,n){var f=e.data,d=e.headers;r.isFormData(f)&&delete d["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var h=e.auth.username||"",m=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";d.Authorization="Basic "+btoa(h+":"+m)}var g=u(e.baseURL,e.url);if(p.open(e.method.toUpperCase(),i(g,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in p?s(p.getAllResponseHeaders()):null,a={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:r,config:e,request:p};o(t,n,a),p=null}},p.onabort=function(){p&&(n(l("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){n(l("Network Error",e,null,p)),p=null},p.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(l(t,e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var v=(e.withCredentials||c(g))&&e.xsrfCookieName?a.read(e.xsrfCookieName):void 0;v&&(d[e.xsrfHeaderName]=v)}if("setRequestHeader"in p&&r.forEach(d,(function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete d[t]:p.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(p.withCredentials=!!e.withCredentials),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),n(e),p=null)})),f||(f=null),p.send(f)}))}},function(e,t,n){"use strict";var r=n(140);e.exports=function(e,t,n,o,a){var i=new Error(e);return r(i,t,n,o,a)}},function(e,t,n){"use strict";var r=n(18);e.exports=function(e,t){t=t||{};var n={},o=["url","method","data"],a=["headers","auth","proxy","params"],i=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],u=["validateStatus"];function s(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function c(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=s(void 0,e[o])):n[o]=s(e[o],t[o])}r.forEach(o,(function(e){r.isUndefined(t[e])||(n[e]=s(void 0,t[e]))})),r.forEach(a,c),r.forEach(i,(function(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=s(void 0,e[o])):n[o]=s(void 0,t[o])})),r.forEach(u,(function(r){r in t?n[r]=s(e[r],t[r]):r in e&&(n[r]=s(void 0,e[r]))}));var l=o.concat(a).concat(i).concat(u),f=Object.keys(e).concat(Object.keys(t)).filter((function(e){return-1===l.indexOf(e)}));return r.forEach(f,c),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){e.exports=n(133)},function(e,t,n){e.exports={wrapper:"DotsLoader__wrapper--SMhdO",dot:"DotsLoader__dot--3lIC8",pending:"DotsLoader__pending--2xSFI",dot_view_light:"DotsLoader__dot_view_light--2gjOc",dot_first:"DotsLoader__dot_first--22qib",dot_second:"DotsLoader__dot_second--1oFkf",dot_third:"DotsLoader__dot_third--3eNEs",dot_fourth:"DotsLoader__dot_fourth--1MsUs"}},function(e,t,n){e.exports={button:"Button__button--1FT6h",child_loading:"Button__child_loading--2wCwV",spinner:"Button__spinner--Ere4M",button_size_s:"Button__button_size_s--2FpX4",button_size_m:"Button__button_size_m--3MidA",button_size_l:"Button__button_size_l--2gWHL",button_size_xl:"Button__button_size_xl--3gpEv",button_wide:"Button__button_wide--yy2xb",button_view_light:"Button__button_view_light--aMelT",button_view_ghost:"Button__button_view_ghost--3Au50",button_view_flat:"Button__button_view_flat--_0qZL",button_focused:"Button__button_focused--2JUhE"}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r=function(){function e(){this._hasWeakSet="function"==typeof WeakSet,this._inner=this._hasWeakSet?new WeakSet:[]}return e.prototype.memoize=function(e){if(this._hasWeakSet)return!!this._inner.has(e)||(this._inner.add(e),!1);for(var t=0;t<this._inner.length;t++){if(this._inner[t]===e)return!0}return this._inner.push(e),!1},e.prototype.unmemoize=function(e){if(this._hasWeakSet)this._inner.delete(e);else for(var t=0;t<this._inner.length;t++)if(this._inner[t]===e){this._inner.splice(t,1);break}},e}()},function(e,t,n){"use strict";n.d(t,"a",(function(){return Ze}));var r,o={};n.r(o),n.d(o,"FunctionToString",(function(){return i})),n.d(o,"InboundFilters",(function(){return P}));var a,i=function(){function e(){this.name=e.id}return e.prototype.setupOnce=function(){r=Function.prototype.toString,Function.prototype.toString=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this.__sentry_original__||this;return r.apply(n,e)}},e.id="FunctionToString",e}(),u=n(1),s=n(10),c=n(202);!function(e){e.PENDING="PENDING",e.RESOLVED="RESOLVED",e.REJECTED="REJECTED"}(a||(a={}));var l=function(){function e(e){var t=this;this._state=a.PENDING,this._handlers=[],this._resolve=function(e){t._setResult(a.RESOLVED,e)},this._reject=function(e){t._setResult(a.REJECTED,e)},this._setResult=function(e,n){t._state===a.PENDING&&(Object(s.m)(n)?n.then(t._resolve,t._reject):(t._state=e,t._value=n,t._executeHandlers()))},this._attachHandler=function(e){t._handlers=t._handlers.concat(e),t._executeHandlers()},this._executeHandlers=function(){if(t._state!==a.PENDING){var e=t._handlers.slice();t._handlers=[],e.forEach((function(e){e.done||(t._state===a.RESOLVED&&e.onfulfilled&&e.onfulfilled(t._value),t._state===a.REJECTED&&e.onrejected&&e.onrejected(t._value),e.done=!0)}))}};try{e(this._resolve,this._reject)}catch(e){this._reject(e)}}return e.resolve=function(t){return new e((function(e){e(t)}))},e.reject=function(t){return new e((function(e,n){n(t)}))},e.all=function(t){return new e((function(n,r){if(Array.isArray(t))if(0!==t.length){var o=t.length,a=[];t.forEach((function(t,i){e.resolve(t).then((function(e){a[i]=e,0===(o-=1)&&n(a)})).then(null,r)}))}else n([]);else r(new TypeError("Promise.all requires an array as input."))}))},e.prototype.then=function(t,n){var r=this;return new e((function(e,o){r._attachHandler({done:!1,onfulfilled:function(n){if(t)try{return void e(t(n))}catch(e){return void o(e)}else e(n)},onrejected:function(t){if(n)try{return void e(n(t))}catch(e){return void o(e)}else o(t)}})}))},e.prototype.catch=function(e){return this.then((function(e){return e}),e)},e.prototype.finally=function(t){var n=this;return new e((function(e,r){var o,a;return n.then((function(e){a=!1,o=e,t&&t()}),(function(e){a=!0,o=e,t&&t()})).then((function(){a?r(o):e(o)}))}))},e.prototype.toString=function(){return"[object SyncPromise]"},e}(),f=n(15),d=function(){function e(){this._notifyingListeners=!1,this._scopeListeners=[],this._eventProcessors=[],this._breadcrumbs=[],this._user={},this._tags={},this._extra={},this._contexts={}}return e.clone=function(t){var n=new e;return t&&(n._breadcrumbs=Object(u.d)(t._breadcrumbs),n._tags=Object(u.a)({},t._tags),n._extra=Object(u.a)({},t._extra),n._contexts=Object(u.a)({},t._contexts),n._user=t._user,n._level=t._level,n._span=t._span,n._session=t._session,n._transactionName=t._transactionName,n._fingerprint=t._fingerprint,n._eventProcessors=Object(u.d)(t._eventProcessors)),n},e.prototype.addScopeListener=function(e){this._scopeListeners.push(e)},e.prototype.addEventProcessor=function(e){return this._eventProcessors.push(e),this},e.prototype.setUser=function(e){return this._user=e||{},this._session&&this._session.update({user:e}),this._notifyScopeListeners(),this},e.prototype.getUser=function(){return this._user},e.prototype.setTags=function(e){return this._tags=Object(u.a)(Object(u.a)({},this._tags),e),this._notifyScopeListeners(),this},e.prototype.setTag=function(e,t){var n;return this._tags=Object(u.a)(Object(u.a)({},this._tags),((n={})[e]=t,n)),this._notifyScopeListeners(),this},e.prototype.setExtras=function(e){return this._extra=Object(u.a)(Object(u.a)({},this._extra),e),this._notifyScopeListeners(),this},e.prototype.setExtra=function(e,t){var n;return this._extra=Object(u.a)(Object(u.a)({},this._extra),((n={})[e]=t,n)),this._notifyScopeListeners(),this},e.prototype.setFingerprint=function(e){return this._fingerprint=e,this._notifyScopeListeners(),this},e.prototype.setLevel=function(e){return this._level=e,this._notifyScopeListeners(),this},e.prototype.setTransactionName=function(e){return this._transactionName=e,this._notifyScopeListeners(),this},e.prototype.setTransaction=function(e){return this.setTransactionName(e)},e.prototype.setContext=function(e,t){var n;return null===t?delete this._contexts[e]:this._contexts=Object(u.a)(Object(u.a)({},this._contexts),((n={})[e]=t,n)),this._notifyScopeListeners(),this},e.prototype.setSpan=function(e){return this._span=e,this._notifyScopeListeners(),this},e.prototype.getSpan=function(){return this._span},e.prototype.getTransaction=function(){var e,t,n,r,o=this.getSpan();return(null===(e=o)||void 0===e?void 0:e.transaction)?null===(t=o)||void 0===t?void 0:t.transaction:(null===(r=null===(n=o)||void 0===n?void 0:n.spanRecorder)||void 0===r?void 0:r.spans[0])?o.spanRecorder.spans[0]:void 0},e.prototype.setSession=function(e){return e?this._session=e:delete this._session,this._notifyScopeListeners(),this},e.prototype.getSession=function(){return this._session},e.prototype.update=function(t){if(!t)return this;if("function"==typeof t){var n=t(this);return n instanceof e?n:this}return t instanceof e?(this._tags=Object(u.a)(Object(u.a)({},this._tags),t._tags),this._extra=Object(u.a)(Object(u.a)({},this._extra),t._extra),this._contexts=Object(u.a)(Object(u.a)({},this._contexts),t._contexts),t._user&&Object.keys(t._user).length&&(this._user=t._user),t._level&&(this._level=t._level),t._fingerprint&&(this._fingerprint=t._fingerprint)):Object(s.h)(t)&&(t=t,this._tags=Object(u.a)(Object(u.a)({},this._tags),t.tags),this._extra=Object(u.a)(Object(u.a)({},this._extra),t.extra),this._contexts=Object(u.a)(Object(u.a)({},this._contexts),t.contexts),t.user&&(this._user=t.user),t.level&&(this._level=t.level),t.fingerprint&&(this._fingerprint=t.fingerprint)),this},e.prototype.clear=function(){return this._breadcrumbs=[],this._tags={},this._extra={},this._user={},this._contexts={},this._level=void 0,this._transactionName=void 0,this._fingerprint=void 0,this._span=void 0,this._session=void 0,this._notifyScopeListeners(),this},e.prototype.addBreadcrumb=function(e,t){var n=Object(u.a)({timestamp:Object(c.a)()},e);return this._breadcrumbs=void 0!==t&&t>=0?Object(u.d)(this._breadcrumbs,[n]).slice(-t):Object(u.d)(this._breadcrumbs,[n]),this._notifyScopeListeners(),this},e.prototype.clearBreadcrumbs=function(){return this._breadcrumbs=[],this._notifyScopeListeners(),this},e.prototype.applyToEvent=function(e,t){var n;if(this._extra&&Object.keys(this._extra).length&&(e.extra=Object(u.a)(Object(u.a)({},this._extra),e.extra)),this._tags&&Object.keys(this._tags).length&&(e.tags=Object(u.a)(Object(u.a)({},this._tags),e.tags)),this._user&&Object.keys(this._user).length&&(e.user=Object(u.a)(Object(u.a)({},this._user),e.user)),this._contexts&&Object.keys(this._contexts).length&&(e.contexts=Object(u.a)(Object(u.a)({},this._contexts),e.contexts)),this._level&&(e.level=this._level),this._transactionName&&(e.transaction=this._transactionName),this._span){e.contexts=Object(u.a)({trace:this._span.getTraceContext()},e.contexts);var r=null===(n=this._span.transaction)||void 0===n?void 0:n.name;r&&(e.tags=Object(u.a)({transaction:r},e.tags))}return this._applyFingerprint(e),e.breadcrumbs=Object(u.d)(e.breadcrumbs||[],this._breadcrumbs),e.breadcrumbs=e.breadcrumbs.length>0?e.breadcrumbs:void 0,this._notifyEventProcessors(Object(u.d)(p(),this._eventProcessors),e,t)},e.prototype._notifyEventProcessors=function(e,t,n,r){var o=this;return void 0===r&&(r=0),new l((function(a,i){var c=e[r];if(null===t||"function"!=typeof c)a(t);else{var l=c(Object(u.a)({},t),n);Object(s.m)(l)?l.then((function(t){return o._notifyEventProcessors(e,t,n,r+1).then(a)})).then(null,i):o._notifyEventProcessors(e,l,n,r+1).then(a).then(null,i)}}))},e.prototype._notifyScopeListeners=function(){var e=this;this._notifyingListeners||(this._notifyingListeners=!0,setTimeout((function(){e._scopeListeners.forEach((function(t){t(e)})),e._notifyingListeners=!1})))},e.prototype._applyFingerprint=function(e){e.fingerprint=e.fingerprint?Array.isArray(e.fingerprint)?e.fingerprint:[e.fingerprint]:[],this._fingerprint&&(e.fingerprint=e.fingerprint.concat(this._fingerprint)),e.fingerprint&&!e.fingerprint.length&&delete e.fingerprint},e}();function p(){var e=Object(f.e)();return e.__SENTRY__=e.__SENTRY__||{},e.__SENTRY__.globalEventProcessors=e.__SENTRY__.globalEventProcessors||[],e.__SENTRY__.globalEventProcessors}function h(e){p().push(e)}var m=Object(f.e)(),g="Sentry Logger ",v=function(){function e(){this._enabled=!1}return e.prototype.disable=function(){this._enabled=!1},e.prototype.enable=function(){this._enabled=!0},e.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._enabled&&Object(f.c)((function(){m.console.log(g+"[Log]: "+e.join(" "))}))},e.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._enabled&&Object(f.c)((function(){m.console.warn(g+"[Warn]: "+e.join(" "))}))},e.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._enabled&&Object(f.c)((function(){m.console.error(g+"[Error]: "+e.join(" "))}))},e}();m.__SENTRY__=m.__SENTRY__||{};var y,b=m.__SENTRY__.logger||(m.__SENTRY__.logger=new v),w=n(41);!function(e){e.Ok="ok",e.Exited="exited",e.Crashed="crashed",e.Abnormal="abnormal"}(y||(y={}));var _=n(17),O=function(){function e(e){this.errors=0,this.sid=Object(f.i)(),this.timestamp=Date.now(),this.started=Date.now(),this.duration=0,this.status=y.Ok,e&&this.update(e)}return e.prototype.update=function(e){void 0===e&&(e={}),e.user&&(e.user.ip_address&&(this.ipAddress=e.user.ip_address),e.did||(this.did=e.user.id||e.user.email||e.user.username)),this.timestamp=e.timestamp||Date.now(),e.sid&&(this.sid=32===e.sid.length?e.sid:Object(f.i)()),e.did&&(this.did=""+e.did),"number"==typeof e.started&&(this.started=e.started),"number"==typeof e.duration?this.duration=e.duration:this.duration=this.timestamp-this.started,e.release&&(this.release=e.release),e.environment&&(this.environment=e.environment),e.ipAddress&&(this.ipAddress=e.ipAddress),e.userAgent&&(this.userAgent=e.userAgent),"number"==typeof e.errors&&(this.errors=e.errors),e.status&&(this.status=e.status)},e.prototype.close=function(e){e?this.update({status:e}):this.status===y.Ok?this.update({status:y.Exited}):this.update()},e.prototype.toJSON=function(){return Object(_.a)({sid:""+this.sid,init:!0,started:new Date(this.started).toISOString(),timestamp:new Date(this.timestamp).toISOString(),status:this.status,errors:this.errors,did:"number"==typeof this.did||"string"==typeof this.did?""+this.did:void 0,duration:this.duration,attrs:Object(_.a)({release:this.release,environment:this.environment,ip_address:this.ipAddress,user_agent:this.userAgent})})},e}(),E=function(){function e(e,t,n){void 0===t&&(t=new d),void 0===n&&(n=3),this._version=n,this._stack=[{}],this.getStackTop().scope=t,this.bindClient(e)}return e.prototype.isOlderThan=function(e){return this._version<e},e.prototype.bindClient=function(e){this.getStackTop().client=e,e&&e.setupIntegrations&&e.setupIntegrations()},e.prototype.pushScope=function(){var e=d.clone(this.getScope());return this.getStack().push({client:this.getClient(),scope:e}),e},e.prototype.popScope=function(){return!(this.getStack().length<=1)&&!!this.getStack().pop()},e.prototype.withScope=function(e){var t=this.pushScope();try{e(t)}finally{this.popScope()}},e.prototype.getClient=function(){return this.getStackTop().client},e.prototype.getScope=function(){return this.getStackTop().scope},e.prototype.getStack=function(){return this._stack},e.prototype.getStackTop=function(){return this._stack[this._stack.length-1]},e.prototype.captureException=function(e,t){var n=this._lastEventId=Object(f.i)(),r=t;if(!t){var o=void 0;try{throw new Error("Sentry syntheticException")}catch(e){o=e}r={originalException:e,syntheticException:o}}return this._invokeClient("captureException",e,Object(u.a)(Object(u.a)({},r),{event_id:n})),n},e.prototype.captureMessage=function(e,t,n){var r=this._lastEventId=Object(f.i)(),o=n;if(!n){var a=void 0;try{throw new Error(e)}catch(e){a=e}o={originalException:e,syntheticException:a}}return this._invokeClient("captureMessage",e,t,Object(u.a)(Object(u.a)({},o),{event_id:r})),r},e.prototype.captureEvent=function(e,t){var n=this._lastEventId=Object(f.i)();return this._invokeClient("captureEvent",e,Object(u.a)(Object(u.a)({},t),{event_id:n})),n},e.prototype.lastEventId=function(){return this._lastEventId},e.prototype.addBreadcrumb=function(e,t){var n=this.getStackTop(),r=n.scope,o=n.client;if(r&&o){var a=o.getOptions&&o.getOptions()||{},i=a.beforeBreadcrumb,s=void 0===i?null:i,l=a.maxBreadcrumbs,d=void 0===l?100:l;if(!(d<=0)){var p=Object(c.a)(),h=Object(u.a)({timestamp:p},e),m=s?Object(f.c)((function(){return s(h,t)})):h;null!==m&&r.addBreadcrumb(m,Math.min(d,100))}}},e.prototype.setUser=function(e){var t=this.getScope();t&&t.setUser(e)},e.prototype.setTags=function(e){var t=this.getScope();t&&t.setTags(e)},e.prototype.setExtras=function(e){var t=this.getScope();t&&t.setExtras(e)},e.prototype.setTag=function(e,t){var n=this.getScope();n&&n.setTag(e,t)},e.prototype.setExtra=function(e,t){var n=this.getScope();n&&n.setExtra(e,t)},e.prototype.setContext=function(e,t){var n=this.getScope();n&&n.setContext(e,t)},e.prototype.configureScope=function(e){var t=this.getStackTop(),n=t.scope,r=t.client;n&&r&&e(n)},e.prototype.run=function(e){var t=x(this);try{e(this)}finally{x(t)}},e.prototype.getIntegration=function(e){var t=this.getClient();if(!t)return null;try{return t.getIntegration(e)}catch(t){return b.warn("Cannot retrieve integration "+e.id+" from the current Hub"),null}},e.prototype.startSpan=function(e){return this._callExtensionMethod("startSpan",e)},e.prototype.startTransaction=function(e,t){return this._callExtensionMethod("startTransaction",e,t)},e.prototype.traceHeaders=function(){return this._callExtensionMethod("traceHeaders")},e.prototype.startSession=function(e){this.endSession();var t=this.getStackTop(),n=t.scope,r=t.client,o=r&&r.getOptions()||{},a=o.release,i=o.environment,s=new O(Object(u.a)(Object(u.a)({release:a,environment:i},n&&{user:n.getUser()}),e));return n&&n.setSession(s),s},e.prototype.endSession=function(){var e=this.getStackTop(),t=e.scope,n=e.client;if(t){var r=t.getSession&&t.getSession();r&&(r.close(),n&&n.captureSession&&n.captureSession(r),t.setSession())}},e.prototype._invokeClient=function(e){for(var t,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var o=this.getStackTop(),a=o.scope,i=o.client;i&&i[e]&&(t=i)[e].apply(t,Object(u.d)(n,[a]))},e.prototype._callExtensionMethod=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=S(),o=r.__SENTRY__;if(o&&o.extensions&&"function"==typeof o.extensions[e])return o.extensions[e].apply(this,t);b.warn("Extension method "+e+" couldn't be found, doing nothing.")},e}();function S(){var e=Object(f.e)();return e.__SENTRY__=e.__SENTRY__||{extensions:{},hub:void 0},e}function x(e){var t=S(),n=T(t);return C(t,e),n}function j(){var e=S();return k(e)&&!T(e).isOlderThan(3)||C(e,new E),Object(w.b)()?function(e){try{var t=(r=S().__SENTRY__)&&r.extensions&&r.extensions.domain&&r.extensions.domain.active;if(!t)return T(e);if(!k(t)||T(t).isOlderThan(3)){var n=T(e).getStackTop();C(t,new E(n.client,d.clone(n.scope)))}return T(t)}catch(t){return T(e)}var r}(e):T(e)}function k(e){return!!(e&&e.__SENTRY__&&e.__SENTRY__.hub)}function T(e){return e&&e.__SENTRY__&&e.__SENTRY__.hub||(e.__SENTRY__=e.__SENTRY__||{},e.__SENTRY__.hub=new E),e.__SENTRY__.hub}function C(e,t){return!!e&&(e.__SENTRY__=e.__SENTRY__||{},e.__SENTRY__.hub=t,!0)}var A=n(32),N=[/^Script error\.?$/,/^Javascript error: Script error\.? on line 0$/],P=function(){function e(t){void 0===t&&(t={}),this._options=t,this.name=e.id}return e.prototype.setupOnce=function(){h((function(t){var n=j();if(!n)return t;var r=n.getIntegration(e);if(r){var o=n.getClient(),a=o?o.getOptions():{},i=r._mergeOptions(a);if(r._shouldDropEvent(t,i))return null}return t}))},e.prototype._shouldDropEvent=function(e,t){return this._isSentryError(e,t)?(b.warn("Event dropped due to being internal Sentry Error.\nEvent: "+Object(f.d)(e)),!0):this._isIgnoredError(e,t)?(b.warn("Event dropped due to being matched by `ignoreErrors` option.\nEvent: "+Object(f.d)(e)),!0):this._isDeniedUrl(e,t)?(b.warn("Event dropped due to being matched by `denyUrls` option.\nEvent: "+Object(f.d)(e)+".\nUrl: "+this._getEventFilterUrl(e)),!0):!this._isAllowedUrl(e,t)&&(b.warn("Event dropped due to not being matched by `allowUrls` option.\nEvent: "+Object(f.d)(e)+".\nUrl: "+this._getEventFilterUrl(e)),!0)},e.prototype._isSentryError=function(e,t){if(!t.ignoreInternal)return!1;try{return e&&e.exception&&e.exception.values&&e.exception.values[0]&&"SentryError"===e.exception.values[0].type||!1}catch(e){return!1}},e.prototype._isIgnoredError=function(e,t){return!(!t.ignoreErrors||!t.ignoreErrors.length)&&this._getPossibleEventMessages(e).some((function(e){return t.ignoreErrors.some((function(t){return Object(A.a)(e,t)}))}))},e.prototype._isDeniedUrl=function(e,t){if(!t.denyUrls||!t.denyUrls.length)return!1;var n=this._getEventFilterUrl(e);return!!n&&t.denyUrls.some((function(e){return Object(A.a)(n,e)}))},e.prototype._isAllowedUrl=function(e,t){if(!t.allowUrls||!t.allowUrls.length)return!0;var n=this._getEventFilterUrl(e);return!n||t.allowUrls.some((function(e){return Object(A.a)(n,e)}))},e.prototype._mergeOptions=function(e){return void 0===e&&(e={}),{allowUrls:Object(u.d)(this._options.whitelistUrls||[],this._options.allowUrls||[],e.whitelistUrls||[],e.allowUrls||[]),denyUrls:Object(u.d)(this._options.blacklistUrls||[],this._options.denyUrls||[],e.blacklistUrls||[],e.denyUrls||[]),ignoreErrors:Object(u.d)(this._options.ignoreErrors||[],e.ignoreErrors||[],N),ignoreInternal:void 0===this._options.ignoreInternal||this._options.ignoreInternal}},e.prototype._getPossibleEventMessages=function(e){if(e.message)return[e.message];if(e.exception)try{var t=e.exception.values&&e.exception.values[0]||{},n=t.type,r=void 0===n?"":n,o=t.value,a=void 0===o?"":o;return[""+a,r+": "+a]}catch(t){return b.error("Cannot extract message for event "+Object(f.d)(e)),[]}return[]},e.prototype._getEventFilterUrl=function(e){try{if(e.stacktrace){var t=e.stacktrace.frames;return t&&t[t.length-1].filename||null}if(e.exception){var n=e.exception.values&&e.exception.values[0].stacktrace&&e.exception.values[0].stacktrace.frames;return n&&n[n.length-1].filename||null}return null}catch(t){return b.error("Cannot extract url for event "+Object(f.d)(e)),null}},e.id="InboundFilters",e}();var R=Object.setPrototypeOf||({__proto__:[]}instanceof Array?function(e,t){return e.__proto__=t,e}:function(e,t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n]);return e});var I=function(e){function t(t){var n=this.constructor,r=e.call(this,t)||this;return r.message=t,r.name=n.prototype.constructor.name,R(r,n.prototype),r}return Object(u.b)(t,e),t}(Error),D=/^(?:(\w+):)\/\/(?:(\w+)(?::(\w+))?@)([\w.-]+)(?::(\d+))?\/(.+)/,L=function(){function e(e){"string"==typeof e?this._fromString(e):this._fromComponents(e),this._validate()}return e.prototype.toString=function(e){void 0===e&&(e=!1);var t=this,n=t.host,r=t.path,o=t.pass,a=t.port,i=t.projectId;return t.protocol+"://"+t.user+(e&&o?":"+o:"")+"@"+n+(a?":"+a:"")+"/"+(r?r+"/":r)+i},e.prototype._fromString=function(e){var t=D.exec(e);if(!t)throw new I("Invalid Dsn");var n=Object(u.c)(t.slice(1),6),r=n[0],o=n[1],a=n[2],i=void 0===a?"":a,s=n[3],c=n[4],l=void 0===c?"":c,f="",d=n[5],p=d.split("/");if(p.length>1&&(f=p.slice(0,-1).join("/"),d=p.pop()),d){var h=d.match(/^\d+/);h&&(d=h[0])}this._fromComponents({host:s,pass:i,path:f,projectId:d,port:l,protocol:r,user:o})},e.prototype._fromComponents=function(e){this.protocol=e.protocol,this.user=e.user,this.pass=e.pass||"",this.host=e.host,this.port=e.port||"",this.path=e.path||"",this.projectId=e.projectId},e.prototype._validate=function(){var e=this;if(["protocol","user","host","projectId"].forEach((function(t){if(!e[t])throw new I("Invalid Dsn: "+t+" missing")})),!this.projectId.match(/^\d+$/))throw new I("Invalid Dsn: Invalid projectId "+this.projectId);if("http"!==this.protocol&&"https"!==this.protocol)throw new I("Invalid Dsn: Invalid protocol "+this.protocol);if(this.port&&isNaN(parseInt(this.port,10)))throw new I("Invalid Dsn: Invalid port "+this.port)},e}(),M=[];function U(e){var t={};return function(e){var t=e.defaultIntegrations&&Object(u.d)(e.defaultIntegrations)||[],n=e.integrations,r=[];if(Array.isArray(n)){var o=n.map((function(e){return e.name})),a=[];t.forEach((function(e){-1===o.indexOf(e.name)&&-1===a.indexOf(e.name)&&(r.push(e),a.push(e.name))})),n.forEach((function(e){-1===a.indexOf(e.name)&&(r.push(e),a.push(e.name))}))}else"function"==typeof n?(r=n(t),r=Array.isArray(r)?r:[r]):r=Object(u.d)(t);var i=r.map((function(e){return e.name}));return-1!==i.indexOf("Debug")&&r.push.apply(r,Object(u.d)(r.splice(i.indexOf("Debug"),1))),r}(e).forEach((function(e){t[e.name]=e,function(e){-1===M.indexOf(e.name)&&(e.setupOnce(h,j),M.push(e.name),b.log("Integration installed: "+e.name))}(e)})),t}var F,B=function(){function e(e,t){this._integrations={},this._processing=0,this._backend=new e(t),this._options=t,t.dsn&&(this._dsn=new L(t.dsn))}return e.prototype.captureException=function(e,t,n){var r=this,o=t&&t.event_id;return this._process(this._getBackend().eventFromException(e,t).then((function(e){return r._captureEvent(e,t,n)})).then((function(e){o=e}))),o},e.prototype.captureMessage=function(e,t,n,r){var o=this,a=n&&n.event_id,i=Object(s.i)(e)?this._getBackend().eventFromMessage(""+e,t,n):this._getBackend().eventFromException(e,n);return this._process(i.then((function(e){return o._captureEvent(e,n,r)})).then((function(e){a=e}))),a},e.prototype.captureEvent=function(e,t,n){var r=t&&t.event_id;return this._process(this._captureEvent(e,t,n).then((function(e){r=e}))),r},e.prototype.captureSession=function(e){e.release?this._sendSession(e):b.warn("Discarded session because of missing release")},e.prototype.getDsn=function(){return this._dsn},e.prototype.getOptions=function(){return this._options},e.prototype.flush=function(e){var t=this;return this._isClientProcessing(e).then((function(n){return t._getBackend().getTransport().close(e).then((function(e){return n&&e}))}))},e.prototype.close=function(e){var t=this;return this.flush(e).then((function(e){return t.getOptions().enabled=!1,e}))},e.prototype.setupIntegrations=function(){this._isEnabled()&&(this._integrations=U(this._options))},e.prototype.getIntegration=function(e){try{return this._integrations[e.id]||null}catch(t){return b.warn("Cannot retrieve integration "+e.id+" from the current Client"),null}},e.prototype._updateSessionFromEvent=function(e,t){var n,r,o,a=!1,i=!1,s=t.exception&&t.exception.values;if(s){i=!0;try{for(var c=Object(u.e)(s),l=c.next();!l.done;l=c.next()){var f=l.value.mechanism;if(f&&!1===f.handled){a=!0;break}}}catch(e){n={error:e}}finally{try{l&&!l.done&&(r=c.return)&&r.call(c)}finally{if(n)throw n.error}}}var d=t.user;if(!e.userAgent){var p=t.request?t.request.headers:{};for(var h in p)if("user-agent"===h.toLowerCase()){o=p[h];break}}e.update(Object(u.a)(Object(u.a)({},a&&{status:y.Crashed}),{user:d,userAgent:o,errors:e.errors+Number(i||a)}))},e.prototype._sendSession=function(e){this._getBackend().sendSession(e)},e.prototype._isClientProcessing=function(e){var t=this;return new l((function(n){var r=0,o=setInterval((function(){0==t._processing?(clearInterval(o),n(!0)):(r+=1,e&&r>=e&&(clearInterval(o),n(!1)))}),1)}))},e.prototype._getBackend=function(){return this._backend},e.prototype._isEnabled=function(){return!1!==this.getOptions().enabled&&void 0!==this._dsn},e.prototype._prepareEvent=function(e,t,n){var r=this,o=this.getOptions().normalizeDepth,a=void 0===o?3:o,i=Object(u.a)(Object(u.a)({},e),{event_id:e.event_id||(n&&n.event_id?n.event_id:Object(f.i)()),timestamp:e.timestamp||Object(c.a)()});this._applyClientOptions(i),this._applyIntegrationsMetadata(i);var s=t;n&&n.captureContext&&(s=d.clone(s).update(n.captureContext));var p=l.resolve(i);return s&&(p=s.applyToEvent(i,n)),p.then((function(e){return"number"==typeof a&&a>0?r._normalizeEvent(e,a):e}))},e.prototype._normalizeEvent=function(e,t){if(!e)return null;var n=Object(u.a)(Object(u.a)(Object(u.a)(Object(u.a)(Object(u.a)({},e),e.breadcrumbs&&{breadcrumbs:e.breadcrumbs.map((function(e){return Object(u.a)(Object(u.a)({},e),e.data&&{data:Object(_.d)(e.data,t)})}))}),e.user&&{user:Object(_.d)(e.user,t)}),e.contexts&&{contexts:Object(_.d)(e.contexts,t)}),e.extra&&{extra:Object(_.d)(e.extra,t)});return e.contexts&&e.contexts.trace&&(n.contexts.trace=e.contexts.trace),n},e.prototype._applyClientOptions=function(e){var t=this.getOptions(),n=t.environment,r=t.release,o=t.dist,a=t.maxValueLength,i=void 0===a?250:a;"environment"in e||(e.environment="environment"in t?n:"production"),void 0===e.release&&void 0!==r&&(e.release=r),void 0===e.dist&&void 0!==o&&(e.dist=o),e.message&&(e.message=Object(A.d)(e.message,i));var u=e.exception&&e.exception.values&&e.exception.values[0];u&&u.value&&(u.value=Object(A.d)(u.value,i));var s=e.request;s&&s.url&&(s.url=Object(A.d)(s.url,i))},e.prototype._applyIntegrationsMetadata=function(e){var t=e.sdk,n=Object.keys(this._integrations);t&&n.length>0&&(t.integrations=n)},e.prototype._sendEvent=function(e){this._getBackend().sendEvent(e)},e.prototype._captureEvent=function(e,t,n){return this._processEvent(e,t,n).then((function(e){return e.event_id}),(function(e){b.error(e)}))},e.prototype._processEvent=function(e,t,n){var r=this,o=this.getOptions(),a=o.beforeSend,i=o.sampleRate;if(!this._isEnabled())return l.reject(new I("SDK not enabled, will not send event."));var u="transaction"===e.type;return!u&&"number"==typeof i&&Math.random()>i?l.reject(new I("This event has been sampled, will not send event.")):this._prepareEvent(e,n,t).then((function(e){if(null===e)throw new I("An event processor returned null, will not send event.");if(t&&t.data&&!0===t.data.__sentry__||u||!a)return e;var n=a(e,t);if(void 0===n)throw new I("`beforeSend` method has to return `null` or a valid event.");return Object(s.m)(n)?n.then((function(e){return e}),(function(e){throw new I("beforeSend rejected with "+e)})):n})).then((function(e){if(null===e)throw new I("`beforeSend` returned `null`, will not send event.");var t=n&&n.getSession&&n.getSession();return!u&&t&&r._updateSessionFromEvent(t,e),r._sendEvent(e),e})).then(null,(function(e){if(e instanceof I)throw e;throw r.captureException(e,{data:{__sentry__:!0},originalException:e}),new I("Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\nReason: "+e)}))},e.prototype._process=function(e){var t=this;this._processing+=1,e.then((function(e){return t._processing-=1,e}),(function(e){return t._processing-=1,e}))},e}();!function(e){e.Unknown="unknown",e.Skipped="skipped",e.Success="success",e.RateLimit="rate_limit",e.Invalid="invalid",e.Failed="failed"}(F||(F={})),function(e){e.fromHttpCode=function(t){return t>=200&&t<300?e.Success:429===t?e.RateLimit:t>=400&&t<500?e.Invalid:t>=500?e.Failed:e.Unknown}}(F||(F={}));var z,H=function(){function e(){}return e.prototype.sendEvent=function(e){return l.resolve({reason:"NoopTransport: Event has been skipped because no Dsn is configured.",status:F.Skipped})},e.prototype.close=function(e){return l.resolve(!0)},e}(),W=function(){function e(e){this._options=e,this._options.dsn||b.warn("No DSN provided, backend will not do anything."),this._transport=this._setupTransport()}return e.prototype.eventFromException=function(e,t){throw new I("Backend has to implement `eventFromException` method")},e.prototype.eventFromMessage=function(e,t,n){throw new I("Backend has to implement `eventFromMessage` method")},e.prototype.sendEvent=function(e){this._transport.sendEvent(e).then(null,(function(e){b.error("Error while sending event: "+e)}))},e.prototype.sendSession=function(e){this._transport.sendSession?this._transport.sendSession(e).then(null,(function(e){b.error("Error while sending session: "+e)})):b.warn("Dropping session because custom transport doesn't implement sendSession")},e.prototype.getTransport=function(){return this._transport},e.prototype._setupTransport=function(){return new H},e}();function G(){if(!("fetch"in Object(f.e)()))return!1;try{return new Headers,new Request(""),new Response,!0}catch(e){return!1}}function q(e){return e&&/^function fetch\(\)\s+\{\s+\[native code\]\s+\}$/.test(e.toString())}function $(){if(!G())return!1;try{return new Request("_",{referrerPolicy:"origin"}),!0}catch(e){return!1}}!function(e){e.Fatal="fatal",e.Error="error",e.Warning="warning",e.Log="log",e.Info="info",e.Debug="debug",e.Critical="critical"}(z||(z={})),function(e){e.fromString=function(t){switch(t){case"debug":return e.Debug;case"info":return e.Info;case"warn":case"warning":return e.Warning;case"error":return e.Error;case"fatal":return e.Fatal;case"critical":return e.Critical;case"log":default:return e.Log}}}(z||(z={}));var Y=/^\s*at (?:(.*?) ?\()?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\/).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i,V=/^\s*(.*?)(?:\((.*?)\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\/.*?|\[native code\]|[^@]*(?:bundle|\d+\.js))(?::(\d+))?(?::(\d+))?\s*$/i,X=/^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i,K=/(\S+) line (\d+)(?: > eval line \d+)* > eval/i,Q=/\((\S*)(?::(\d+))(?::(\d+))\)/,Z=/Minified React error #\d+;/i;function J(e){var t=null,n=0;e&&("number"==typeof e.framesToPop?n=e.framesToPop:Z.test(e.message)&&(n=1));try{if(t=function(e){if(!e||!e.stacktrace)return null;for(var t,n=e.stacktrace,r=/ line (\d+).*script (?:in )?(\S+)(?:: in function (\S+))?$/i,o=/ line (\d+), column (\d+)\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\((.*)\))? in (.*):\s*$/i,a=n.split("\n"),i=[],u=0;u<a.length;u+=2){var s=null;(t=r.exec(a[u]))?s={url:t[2],func:t[3],args:[],line:+t[1],column:null}:(t=o.exec(a[u]))&&(s={url:t[6],func:t[3]||t[4],args:t[5]?t[5].split(","):[],line:+t[1],column:+t[2]}),s&&(!s.func&&s.line&&(s.func="?"),i.push(s))}if(!i.length)return null;return{message:te(e),name:e.name,stack:i}}(e))return ee(t,n)}catch(e){}try{if(t=function(e){if(!e||!e.stack)return null;for(var t,n,r,o=[],a=e.stack.split("\n"),i=0;i<a.length;++i){if(n=Y.exec(a[i])){var u=n[2]&&0===n[2].indexOf("native");n[2]&&0===n[2].indexOf("eval")&&(t=Q.exec(n[2]))&&(n[2]=t[1],n[3]=t[2],n[4]=t[3]),r={url:n[2]&&0===n[2].indexOf("address at ")?n[2].substr("address at ".length):n[2],func:n[1]||"?",args:u?[n[2]]:[],line:n[3]?+n[3]:null,column:n[4]?+n[4]:null}}else if(n=X.exec(a[i]))r={url:n[2],func:n[1]||"?",args:[],line:+n[3],column:n[4]?+n[4]:null};else{if(!(n=V.exec(a[i])))continue;n[3]&&n[3].indexOf(" > eval")>-1&&(t=K.exec(n[3]))?(n[1]=n[1]||"eval",n[3]=t[1],n[4]=t[2],n[5]=""):0!==i||n[5]||void 0===e.columnNumber||(o[0].column=e.columnNumber+1),r={url:n[3],func:n[1]||"?",args:n[2]?n[2].split(","):[],line:n[4]?+n[4]:null,column:n[5]?+n[5]:null}}!r.func&&r.line&&(r.func="?"),o.push(r)}if(!o.length)return null;return{message:te(e),name:e.name,stack:o}}(e))return ee(t,n)}catch(e){}return{message:te(e),name:e&&e.name,stack:[],failed:!0}}function ee(e,t){try{return Object(u.a)(Object(u.a)({},e),{stack:e.stack.slice(t)})}catch(t){return e}}function te(e){var t=e&&e.message;return t?t.error&&"string"==typeof t.error.message?t.error.message:t:"No error message"}function ne(e){var t=oe(e.stack),n={type:e.name,value:e.message};return t&&t.length&&(n.stacktrace={frames:t}),void 0===n.type&&""===n.value&&(n.value="Unrecoverable error caught"),n}function re(e){return{exception:{values:[ne(e)]}}}function oe(e){if(!e||!e.length)return[];var t=e,n=t[0].func||"",r=t[t.length-1].func||"";return-1===n.indexOf("captureMessage")&&-1===n.indexOf("captureException")||(t=t.slice(1)),-1!==r.indexOf("sentryWrapped")&&(t=t.slice(0,-1)),t.slice(0,50).map((function(e){return{colno:null===e.column?void 0:e.column,filename:e.url||t[0].url,function:e.func||"?",in_app:!0,lineno:null===e.line?void 0:e.line}})).reverse()}function ae(e,t,n){var r;if(void 0===n&&(n={}),Object(s.e)(e)&&e.error)return r=re(J(e=e.error));if(Object(s.a)(e)||Object(s.b)(e)){var o=e,a=o.name||(Object(s.a)(o)?"DOMError":"DOMException"),i=o.message?a+": "+o.message:a;return r=ie(i,t,n),Object(f.b)(r,i),"code"in o&&(r.tags=Object(u.a)(Object(u.a)({},r.tags),{"DOMException.code":""+o.code})),r}return Object(s.d)(e)?r=re(J(e)):Object(s.h)(e)||Object(s.f)(e)?(r=function(e,t,n){var r={exception:{values:[{type:Object(s.f)(e)?e.constructor.name:n?"UnhandledRejection":"Error",value:"Non-Error "+(n?"promise rejection":"exception")+" captured with keys: "+Object(_.b)(e)}]},extra:{__serialized__:Object(_.e)(e)}};if(t){var o=oe(J(t).stack);r.stacktrace={frames:o}}return r}(e,t,n.rejection),Object(f.a)(r,{synthetic:!0}),r):(r=ie(e,t,n),Object(f.b)(r,""+e,void 0),Object(f.a)(r,{synthetic:!0}),r)}function ie(e,t,n){void 0===n&&(n={});var r={message:e};if(n.attachStacktrace&&t){var o=oe(J(t).stack);r.stacktrace={frames:o}}return r}function ue(e,t){return{body:JSON.stringify({sent_at:(new Date).toISOString()})+"\n"+JSON.stringify({type:"session"})+"\n"+JSON.stringify(e),type:"session",url:t.getEnvelopeEndpointWithUrlEncodedAuth()}}function se(e,t){var n="transaction"===e.type,r={body:JSON.stringify(e),type:e.type||"event",url:n?t.getEnvelopeEndpointWithUrlEncodedAuth():t.getStoreEndpointWithUrlEncodedAuth()};if(n){var o=JSON.stringify({event_id:e.event_id,sent_at:(new Date).toISOString()})+"\n"+JSON.stringify({type:e.type})+"\n"+r.body;r.body=o}return r}var ce=function(){function e(e){this.dsn=e,this._dsnObject=new L(e)}return e.prototype.getDsn=function(){return this._dsnObject},e.prototype.getBaseApiEndpoint=function(){var e=this._dsnObject,t=e.protocol?e.protocol+":":"",n=e.port?":"+e.port:"";return t+"//"+e.host+n+(e.path?"/"+e.path:"")+"/api/"},e.prototype.getStoreEndpoint=function(){return this._getIngestEndpoint("store")},e.prototype.getStoreEndpointWithUrlEncodedAuth=function(){return this.getStoreEndpoint()+"?"+this._encodedAuth()},e.prototype.getEnvelopeEndpointWithUrlEncodedAuth=function(){return this._getEnvelopeEndpoint()+"?"+this._encodedAuth()},e.prototype.getStoreEndpointPath=function(){var e=this._dsnObject;return(e.path?"/"+e.path:"")+"/api/"+e.projectId+"/store/"},e.prototype.getRequestHeaders=function(e,t){var n=this._dsnObject,r=["Sentry sentry_version=7"];return r.push("sentry_client="+e+"/"+t),r.push("sentry_key="+n.user),n.pass&&r.push("sentry_secret="+n.pass),{"Content-Type":"application/json","X-Sentry-Auth":r.join(", ")}},e.prototype.getReportDialogEndpoint=function(e){void 0===e&&(e={});var t=this._dsnObject,n=this.getBaseApiEndpoint()+"embed/error-page/",r=[];for(var o in r.push("dsn="+t.toString()),e)if("user"===o){if(!e.user)continue;e.user.name&&r.push("name="+encodeURIComponent(e.user.name)),e.user.email&&r.push("email="+encodeURIComponent(e.user.email))}else r.push(encodeURIComponent(o)+"="+encodeURIComponent(e[o]));return r.length?n+"?"+r.join("&"):n},e.prototype._getEnvelopeEndpoint=function(){return this._getIngestEndpoint("envelope")},e.prototype._getIngestEndpoint=function(e){return""+this.getBaseApiEndpoint()+this._dsnObject.projectId+"/"+e+"/"},e.prototype._encodedAuth=function(){var e={sentry_key:this._dsnObject.user,sentry_version:"7"};return Object(_.f)(e)},e}(),le=function(){function e(e){this._limit=e,this._buffer=[]}return e.prototype.isReady=function(){return void 0===this._limit||this.length()<this._limit},e.prototype.add=function(e){var t=this;return this.isReady()?(-1===this._buffer.indexOf(e)&&this._buffer.push(e),e.then((function(){return t.remove(e)})).then(null,(function(){return t.remove(e).then(null,(function(){}))})),e):l.reject(new I("Not adding Promise due to buffer limit reached."))},e.prototype.remove=function(e){return this._buffer.splice(this._buffer.indexOf(e),1)[0]},e.prototype.length=function(){return this._buffer.length},e.prototype.drain=function(e){var t=this;return new l((function(n){var r=setTimeout((function(){e&&e>0&&n(!1)}),e);l.all(t._buffer).then((function(){clearTimeout(r),n(!0)})).then(null,(function(){n(!0)}))}))},e}(),fe=function(){function e(e){this.options=e,this._buffer=new le(30),this._rateLimits={},this._api=new ce(this.options.dsn),this.url=this._api.getStoreEndpointWithUrlEncodedAuth()}return e.prototype.sendEvent=function(e){throw new I("Transport Class has to implement `sendEvent` method")},e.prototype.close=function(e){return this._buffer.drain(e)},e.prototype._handleResponse=function(e){var t=e.requestType,n=e.response,r=e.headers,o=e.resolve,a=e.reject,i=F.fromHttpCode(n.status);this._handleRateLimit(r)&&b.warn("Too many requests, backing off till: "+this._disabledUntil(t)),i!==F.Success?a(n):o({status:i})},e.prototype._disabledUntil=function(e){return this._rateLimits[e]||this._rateLimits.all},e.prototype._isRateLimited=function(e){return this._disabledUntil(e)>new Date(Date.now())},e.prototype._handleRateLimit=function(e){var t,n,r,o,a=Date.now(),i=e["x-sentry-rate-limits"],s=e["retry-after"];if(i){try{for(var c=Object(u.e)(i.trim().split(",")),l=c.next();!l.done;l=c.next()){var d=l.value.split(":",2),p=parseInt(d[0],10),h=1e3*(isNaN(p)?60:p);try{for(var m=(r=void 0,Object(u.e)(d[1].split(";"))),g=m.next();!g.done;g=m.next()){var v=g.value;this._rateLimits[v||"all"]=new Date(a+h)}}catch(e){r={error:e}}finally{try{g&&!g.done&&(o=m.return)&&o.call(m)}finally{if(r)throw r.error}}}}catch(e){t={error:e}}finally{try{l&&!l.done&&(n=c.return)&&n.call(c)}finally{if(t)throw t.error}}return!0}return!!s&&(this._rateLimits.all=new Date(a+Object(f.g)(a,s)),!0)},e}(),de=Object(f.e)(),pe=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Object(u.b)(t,e),t.prototype.sendEvent=function(e){return this._sendRequest(se(e,this._api),e)},t.prototype.sendSession=function(e){return this._sendRequest(ue(e,this._api),e)},t.prototype._sendRequest=function(e,t){var n=this;if(this._isRateLimited(e.type))return Promise.reject({event:t,type:e.type,reason:"Transport locked till "+this._disabledUntil(e.type)+" due to too many requests.",status:429});var r={body:e.body,method:"POST",referrerPolicy:$()?"origin":""};return void 0!==this.options.fetchParameters&&Object.assign(r,this.options.fetchParameters),void 0!==this.options.headers&&(r.headers=this.options.headers),this._buffer.add(new l((function(t,o){de.fetch(e.url,r).then((function(r){var a={"x-sentry-rate-limits":r.headers.get("X-Sentry-Rate-Limits"),"retry-after":r.headers.get("Retry-After")};n._handleResponse({requestType:e.type,response:r,headers:a,resolve:t,reject:o})})).catch(o)})))},t}(fe),he=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Object(u.b)(t,e),t.prototype.sendEvent=function(e){return this._sendRequest(se(e,this._api),e)},t.prototype.sendSession=function(e){return this._sendRequest(ue(e,this._api),e)},t.prototype._sendRequest=function(e,t){var n=this;return this._isRateLimited(e.type)?Promise.reject({event:t,type:e.type,reason:"Transport locked till "+this._disabledUntil(e.type)+" due to too many requests.",status:429}):this._buffer.add(new l((function(t,r){var o=new XMLHttpRequest;for(var a in o.onreadystatechange=function(){if(4===o.readyState){var a={"x-sentry-rate-limits":o.getResponseHeader("X-Sentry-Rate-Limits"),"retry-after":o.getResponseHeader("Retry-After")};n._handleResponse({requestType:e.type,response:o,headers:a,resolve:t,reject:r})}},o.open("POST",e.url),n.options.headers)n.options.headers.hasOwnProperty(a)&&o.setRequestHeader(a,n.options.headers[a]);o.send(e.body)})))},t}(fe),me=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Object(u.b)(t,e),t.prototype.eventFromException=function(e,t){return function(e,t,n){var r=ae(t,n&&n.syntheticException||void 0,{attachStacktrace:e.attachStacktrace});return Object(f.a)(r,{handled:!0,type:"generic"}),r.level=z.Error,n&&n.event_id&&(r.event_id=n.event_id),l.resolve(r)}(this._options,e,t)},t.prototype.eventFromMessage=function(e,t,n){return void 0===t&&(t=z.Info),function(e,t,n,r){void 0===n&&(n=z.Info);var o=ie(t,r&&r.syntheticException||void 0,{attachStacktrace:e.attachStacktrace});return o.level=n,r&&r.event_id&&(o.event_id=r.event_id),l.resolve(o)}(this._options,e,t,n)},t.prototype._setupTransport=function(){if(!this._options.dsn)return e.prototype._setupTransport.call(this);var t=Object(u.a)(Object(u.a)({},this._options.transportOptions),{dsn:this._options.dsn});return this._options.transport?new this._options.transport(t):G()?new pe(t):new he(t)},t}(W);function ge(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=j();if(r&&r[e])return r[e].apply(r,Object(u.d)(t));throw new Error("No hub defined or "+e+" was not found on the hub, please open a bug report.")}function ve(e,t){var n;try{throw new Error("Sentry syntheticException")}catch(e){n=e}return ge("captureException",e,{captureContext:t,originalException:e,syntheticException:n})}function ye(e){ge("withScope",e)}var be=0;function we(){return be>0}function _e(){be+=1,setTimeout((function(){be-=1}))}function Oe(e,t,n){if(void 0===t&&(t={}),"function"!=typeof e)return e;try{if(e.__sentry__)return e;if(e.__sentry_wrapped__)return e.__sentry_wrapped__}catch(t){return e}var r=function(){var r=Array.prototype.slice.call(arguments);try{n&&"function"==typeof n&&n.apply(this,arguments);var o=r.map((function(e){return Oe(e,t)}));return e.handleEvent?e.handleEvent.apply(this,o):e.apply(this,o)}catch(e){throw _e(),ye((function(n){n.addEventProcessor((function(e){var n=Object(u.a)({},e);return t.mechanism&&(Object(f.b)(n,void 0,void 0),Object(f.a)(n,t.mechanism)),n.extra=Object(u.a)(Object(u.a)({},n.extra),{arguments:r}),n})),ve(e)})),e}};try{for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(r[o]=e[o])}catch(e){}e.prototype=e.prototype||{},r.prototype=e.prototype,Object.defineProperty(e,"__sentry_wrapped__",{enumerable:!1,value:r}),Object.defineProperties(r,{__sentry__:{enumerable:!1,value:!0},__sentry_original__:{enumerable:!1,value:e}});try{Object.getOwnPropertyDescriptor(r,"name").configurable&&Object.defineProperty(r,"name",{get:function(){return e.name}})}catch(e){}return r}function Ee(e){if(void 0===e&&(e={}),e.eventId)if(e.dsn){var t=document.createElement("script");t.async=!0,t.src=new ce(e.dsn).getReportDialogEndpoint(e),e.onLoad&&(t.onload=e.onLoad),(document.head||document.body).appendChild(t)}else b.error("Missing dsn option in showReportDialog call");else b.error("Missing eventId option in showReportDialog call")}var Se,xe=n(47),je=Object(f.e)(),ke={},Te={};function Ce(e){if(!Te[e])switch(Te[e]=!0,e){case"console":!function(){if(!("console"in je))return;["debug","info","warn","error","log","assert"].forEach((function(e){e in je.console&&Object(_.c)(je.console,e,(function(t){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];Ne("console",{args:n,level:e}),t&&Function.prototype.apply.call(t,je.console,n)}}))}))}();break;case"dom":!function(){if(!("document"in je))return;je.document.addEventListener("click",Me("click",Ne.bind(null,"dom")),!1),je.document.addEventListener("keypress",Ue(Ne.bind(null,"dom")),!1),["EventTarget","Node"].forEach((function(e){var t=je[e]&&je[e].prototype;t&&t.hasOwnProperty&&t.hasOwnProperty("addEventListener")&&(Object(_.c)(t,"addEventListener",(function(e){return function(t,n,r){return n&&n.handleEvent?("click"===t&&Object(_.c)(n,"handleEvent",(function(e){return function(t){return Me("click",Ne.bind(null,"dom"))(t),e.call(this,t)}})),"keypress"===t&&Object(_.c)(n,"handleEvent",(function(e){return function(t){return Ue(Ne.bind(null,"dom"))(t),e.call(this,t)}}))):("click"===t&&Me("click",Ne.bind(null,"dom"),!0)(this),"keypress"===t&&Ue(Ne.bind(null,"dom"))(this)),e.call(this,t,n,r)}})),Object(_.c)(t,"removeEventListener",(function(e){return function(t,n,r){try{e.call(this,t,n.__sentry_wrapped__,r)}catch(e){}return e.call(this,t,n,r)}})))}))}();break;case"xhr":!function(){if(!("XMLHttpRequest"in je))return;var e=[],t=[],n=XMLHttpRequest.prototype;Object(_.c)(n,"open",(function(n){return function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];var a=this,i=r[1];a.__sentry_xhr__={method:Object(s.k)(r[0])?r[0].toUpperCase():r[0],url:r[1]},Object(s.k)(i)&&"POST"===a.__sentry_xhr__.method&&i.match(/sentry_key/)&&(a.__sentry_own_request__=!0);var u=function(){if(4===a.readyState){try{a.__sentry_xhr__&&(a.__sentry_xhr__.status_code=a.status)}catch(e){}try{var n=e.indexOf(a);if(-1!==n){e.splice(n);var o=t.splice(n)[0];a.__sentry_xhr__&&void 0!==o[0]&&(a.__sentry_xhr__.body=o[0])}}catch(e){}Ne("xhr",{args:r,endTimestamp:Date.now(),startTimestamp:Date.now(),xhr:a})}};return"onreadystatechange"in a&&"function"==typeof a.onreadystatechange?Object(_.c)(a,"onreadystatechange",(function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return u(),e.apply(a,t)}})):a.addEventListener("readystatechange",u),n.apply(a,r)}})),Object(_.c)(n,"send",(function(n){return function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];return e.push(this),t.push(r),Ne("xhr",{args:r,startTimestamp:Date.now(),xhr:this}),n.apply(this,r)}}))}();break;case"fetch":!function(){if(!function(){if(!G())return!1;var e=Object(f.e)();if(q(e.fetch))return!0;var t=!1,n=e.document;if(n&&"function"==typeof n.createElement)try{var r=n.createElement("iframe");r.hidden=!0,n.head.appendChild(r),r.contentWindow&&r.contentWindow.fetch&&(t=q(r.contentWindow.fetch)),n.head.removeChild(r)}catch(e){b.warn("Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ",e)}return t}())return;Object(_.c)(je,"fetch",(function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r={args:t,fetchData:{method:Pe(t),url:Re(t)},startTimestamp:Date.now()};return Ne("fetch",Object(u.a)({},r)),e.apply(je,t).then((function(e){return Ne("fetch",Object(u.a)(Object(u.a)({},r),{endTimestamp:Date.now(),response:e})),e}),(function(e){throw Ne("fetch",Object(u.a)(Object(u.a)({},r),{endTimestamp:Date.now(),error:e})),e}))}}))}();break;case"history":!function(){if(!function(){var e=Object(f.e)(),t=e.chrome,n=t&&t.app&&t.app.runtime,r="history"in e&&!!e.history.pushState&&!!e.history.replaceState;return!n&&r}())return;var e=je.onpopstate;function t(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.length>2?t[2]:void 0;if(r){var o=Se,a=String(r);Se=a,Ne("history",{from:o,to:a})}return e.apply(this,t)}}je.onpopstate=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=je.location.href,o=Se;if(Se=r,Ne("history",{from:o,to:r}),e)return e.apply(this,t)},Object(_.c)(je.history,"pushState",t),Object(_.c)(je.history,"replaceState",t)}();break;case"error":Fe=je.onerror,je.onerror=function(e,t,n,r,o){return Ne("error",{column:r,error:o,line:n,msg:e,url:t}),!!Fe&&Fe.apply(this,arguments)};break;case"unhandledrejection":Be=je.onunhandledrejection,je.onunhandledrejection=function(e){return Ne("unhandledrejection",e),!Be||Be.apply(this,arguments)};break;default:b.warn("unknown instrumentation type:",e)}}function Ae(e){e&&"string"==typeof e.type&&"function"==typeof e.callback&&(ke[e.type]=ke[e.type]||[],ke[e.type].push(e.callback),Ce(e.type))}function Ne(e,t){var n,r;if(e&&ke[e])try{for(var o=Object(u.e)(ke[e]||[]),a=o.next();!a.done;a=o.next()){var i=a.value;try{i(t)}catch(t){b.error("Error while triggering instrumentation handler.\nType: "+e+"\nName: "+Object(xe.a)(i)+"\nError: "+t)}}}catch(e){n={error:e}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}}function Pe(e){return void 0===e&&(e=[]),"Request"in je&&Object(s.g)(e[0],Request)&&e[0].method?String(e[0].method).toUpperCase():e[1]&&e[1].method?String(e[1].method).toUpperCase():"GET"}function Re(e){return void 0===e&&(e=[]),"string"==typeof e[0]?e[0]:"Request"in je&&Object(s.g)(e[0],Request)?e[0].url:String(e[0])}var Ie,De,Le=0;function Me(e,t,n){return void 0===n&&(n=!1),function(r){Ie=void 0,r&&De!==r&&(De=r,Le&&clearTimeout(Le),n?Le=setTimeout((function(){t({event:r,name:e})})):t({event:r,name:e}))}}function Ue(e){return function(t){var n;try{n=t.target}catch(e){return}var r=n&&n.tagName;r&&("INPUT"===r||"TEXTAREA"===r||n.isContentEditable)&&(Ie||Me("input",e)(t),clearTimeout(Ie),Ie=setTimeout((function(){Ie=void 0}),1e3))}}var Fe=null;var Be=null;var ze=n(59),He=function(){function e(t){this.name=e.id,this._options=Object(u.a)({console:!0,dom:!0,fetch:!0,history:!0,sentry:!0,xhr:!0},t)}return e.prototype.addSentryBreadcrumb=function(e){this._options.sentry&&j().addBreadcrumb({category:"sentry."+("transaction"===e.type?"transaction":"event"),event_id:e.event_id,level:e.level,message:Object(f.d)(e)},{event:e})},e.prototype.setupOnce=function(){var e=this;this._options.console&&Ae({callback:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];e._consoleBreadcrumb.apply(e,Object(u.d)(t))},type:"console"}),this._options.dom&&Ae({callback:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];e._domBreadcrumb.apply(e,Object(u.d)(t))},type:"dom"}),this._options.xhr&&Ae({callback:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];e._xhrBreadcrumb.apply(e,Object(u.d)(t))},type:"xhr"}),this._options.fetch&&Ae({callback:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];e._fetchBreadcrumb.apply(e,Object(u.d)(t))},type:"fetch"}),this._options.history&&Ae({callback:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];e._historyBreadcrumb.apply(e,Object(u.d)(t))},type:"history"})},e.prototype._consoleBreadcrumb=function(e){var t={category:"console",data:{arguments:e.args,logger:"console"},level:z.fromString(e.level),message:Object(A.b)(e.args," ")};if("assert"===e.level){if(!1!==e.args[0])return;t.message="Assertion failed: "+(Object(A.b)(e.args.slice(1)," ")||"console.assert"),t.data.arguments=e.args.slice(1)}j().addBreadcrumb(t,{input:e.args,level:e.level})},e.prototype._domBreadcrumb=function(e){var t;try{t=e.event.target?Object(ze.a)(e.event.target):Object(ze.a)(e.event)}catch(e){t="<unknown>"}0!==t.length&&j().addBreadcrumb({category:"ui."+e.name,message:t},{event:e.event,name:e.name})},e.prototype._xhrBreadcrumb=function(e){if(e.endTimestamp){if(e.xhr.__sentry_own_request__)return;var t=e.xhr.__sentry_xhr__||{},n=t.method,r=t.url,o=t.status_code,a=t.body;j().addBreadcrumb({category:"xhr",data:{method:n,url:r,status_code:o},type:"http"},{xhr:e.xhr,input:a})}else;},e.prototype._fetchBreadcrumb=function(e){e.endTimestamp&&(e.fetchData.url.match(/sentry_key/)&&"POST"===e.fetchData.method||(e.error?j().addBreadcrumb({category:"fetch",data:e.fetchData,level:z.Error,type:"http"},{data:e.error,input:e.args}):j().addBreadcrumb({category:"fetch",data:Object(u.a)(Object(u.a)({},e.fetchData),{status_code:e.response.status}),type:"http"},{input:e.args,response:e.response})))},e.prototype._historyBreadcrumb=function(e){var t=Object(f.e)(),n=e.from,r=e.to,o=Object(f.h)(t.location.href),a=Object(f.h)(n),i=Object(f.h)(r);a.path||(a=o),o.protocol===i.protocol&&o.host===i.host&&(r=i.relative),o.protocol===a.protocol&&o.host===a.host&&(n=a.relative),j().addBreadcrumb({category:"navigation",data:{from:n,to:r}})},e.id="Breadcrumbs",e}(),We=function(e){function t(t){return void 0===t&&(t={}),e.call(this,me,t)||this}return Object(u.b)(t,e),t.prototype.showReportDialog=function(e){void 0===e&&(e={}),Object(f.e)().document&&(this._isEnabled()?Ee(Object(u.a)(Object(u.a)({},e),{dsn:e.dsn||this.getDsn()})):b.error("Trying to call showReportDialog with Sentry Client disabled"))},t.prototype._prepareEvent=function(t,n,r){return t.platform=t.platform||"javascript",t.sdk=Object(u.a)(Object(u.a)({},t.sdk),{name:"sentry.javascript.browser",packages:Object(u.d)(t.sdk&&t.sdk.packages||[],[{name:"npm:@sentry/browser",version:"5.27.4"}]),version:"5.27.4"}),e.prototype._prepareEvent.call(this,t,n,r)},t.prototype._sendEvent=function(t){var n=this.getIntegration(He);n&&n.addSentryBreadcrumb(t),e.prototype._sendEvent.call(this,t)},t}(B),Ge=["EventTarget","Window","Node","ApplicationCache","AudioTrackList","ChannelMergerNode","CryptoOperation","EventSource","FileReader","HTMLUnknownElement","IDBDatabase","IDBRequest","IDBTransaction","KeyOperation","MediaController","MessagePort","ModalWindow","Notification","SVGElementInstance","Screen","TextTrack","TextTrackCue","TextTrackList","WebSocket","WebSocketWorker","Worker","XMLHttpRequest","XMLHttpRequestEventTarget","XMLHttpRequestUpload"],qe=function(){function e(t){this.name=e.id,this._options=Object(u.a)({XMLHttpRequest:!0,eventTarget:!0,requestAnimationFrame:!0,setInterval:!0,setTimeout:!0},t)}return e.prototype.setupOnce=function(){var e=Object(f.e)();(this._options.setTimeout&&Object(_.c)(e,"setTimeout",this._wrapTimeFunction.bind(this)),this._options.setInterval&&Object(_.c)(e,"setInterval",this._wrapTimeFunction.bind(this)),this._options.requestAnimationFrame&&Object(_.c)(e,"requestAnimationFrame",this._wrapRAF.bind(this)),this._options.XMLHttpRequest&&"XMLHttpRequest"in e&&Object(_.c)(XMLHttpRequest.prototype,"send",this._wrapXHR.bind(this)),this._options.eventTarget)&&(Array.isArray(this._options.eventTarget)?this._options.eventTarget:Ge).forEach(this._wrapEventTarget.bind(this))},e.prototype._wrapTimeFunction=function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t[0];return t[0]=Oe(r,{mechanism:{data:{function:Object(xe.a)(e)},handled:!0,type:"instrument"}}),e.apply(this,t)}},e.prototype._wrapRAF=function(e){return function(t){return e.call(this,Oe(t,{mechanism:{data:{function:"requestAnimationFrame",handler:Object(xe.a)(e)},handled:!0,type:"instrument"}}))}},e.prototype._wrapEventTarget=function(e){var t=Object(f.e)(),n=t[e]&&t[e].prototype;n&&n.hasOwnProperty&&n.hasOwnProperty("addEventListener")&&(Object(_.c)(n,"addEventListener",(function(t){return function(n,r,o){try{"function"==typeof r.handleEvent&&(r.handleEvent=Oe(r.handleEvent.bind(r),{mechanism:{data:{function:"handleEvent",handler:Object(xe.a)(r),target:e},handled:!0,type:"instrument"}}))}catch(e){}return t.call(this,n,Oe(r,{mechanism:{data:{function:"addEventListener",handler:Object(xe.a)(r),target:e},handled:!0,type:"instrument"}}),o)}})),Object(_.c)(n,"removeEventListener",(function(e){return function(t,n,r){var o,a=n;try{var i=null===(o=a)||void 0===o?void 0:o.__sentry_wrapped__;i&&e.call(this,t,i,r)}catch(e){}return e.call(this,t,a,r)}})))},e.prototype._wrapXHR=function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=this,o=["onload","onerror","onprogress","onreadystatechange"];return o.forEach((function(e){e in r&&"function"==typeof r[e]&&Object(_.c)(r,e,(function(t){var n={mechanism:{data:{function:e,handler:Object(xe.a)(t)},handled:!0,type:"instrument"}};return t.__sentry_original__&&(n.mechanism.data.handler=Object(xe.a)(t.__sentry_original__)),Oe(t,n)}))})),e.apply(this,t)}},e.id="TryCatch",e}(),$e=function(){function e(t){this.name=e.id,this._onErrorHandlerInstalled=!1,this._onUnhandledRejectionHandlerInstalled=!1,this._options=Object(u.a)({onerror:!0,onunhandledrejection:!0},t)}return e.prototype.setupOnce=function(){Error.stackTraceLimit=50,this._options.onerror&&(b.log("Global Handler attached: onerror"),this._installGlobalOnErrorHandler()),this._options.onunhandledrejection&&(b.log("Global Handler attached: onunhandledrejection"),this._installGlobalOnUnhandledRejectionHandler())},e.prototype._installGlobalOnErrorHandler=function(){var t=this;this._onErrorHandlerInstalled||(Ae({callback:function(n){var r=n.error,o=j(),a=o.getIntegration(e),i=r&&!0===r.__sentry_own_request__;if(a&&!we()&&!i){var u=o.getClient(),c=Object(s.i)(r)?t._eventFromIncompleteOnError(n.msg,n.url,n.line,n.column):t._enhanceEventWithInitialFrame(ae(r,void 0,{attachStacktrace:u&&u.getOptions().attachStacktrace,rejection:!1}),n.url,n.line,n.column);Object(f.a)(c,{handled:!1,type:"onerror"}),o.captureEvent(c,{originalException:r})}},type:"error"}),this._onErrorHandlerInstalled=!0)},e.prototype._installGlobalOnUnhandledRejectionHandler=function(){var t=this;this._onUnhandledRejectionHandlerInstalled||(Ae({callback:function(n){var r=n;try{"reason"in n?r=n.reason:"detail"in n&&"reason"in n.detail&&(r=n.detail.reason)}catch(e){}var o=j(),a=o.getIntegration(e),i=r&&!0===r.__sentry_own_request__;if(!a||we()||i)return!0;var u=o.getClient(),c=Object(s.i)(r)?t._eventFromIncompleteRejection(r):ae(r,void 0,{attachStacktrace:u&&u.getOptions().attachStacktrace,rejection:!0});c.level=z.Error,Object(f.a)(c,{handled:!1,type:"onunhandledrejection"}),o.captureEvent(c,{originalException:r})},type:"unhandledrejection"}),this._onUnhandledRejectionHandlerInstalled=!0)},e.prototype._eventFromIncompleteOnError=function(e,t,n,r){var o,a=Object(s.e)(e)?e.message:e;if(Object(s.k)(a)){var i=a.match(/^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i);i&&(o=i[1],a=i[2])}var u={exception:{values:[{type:o||"Error",value:a}]}};return this._enhanceEventWithInitialFrame(u,t,n,r)},e.prototype._eventFromIncompleteRejection=function(e){return{exception:{values:[{type:"UnhandledRejection",value:"Non-Error promise rejection captured with value: "+e}]}}},e.prototype._enhanceEventWithInitialFrame=function(e,t,n,r){e.exception=e.exception||{},e.exception.values=e.exception.values||[],e.exception.values[0]=e.exception.values[0]||{},e.exception.values[0].stacktrace=e.exception.values[0].stacktrace||{},e.exception.values[0].stacktrace.frames=e.exception.values[0].stacktrace.frames||[];var o=isNaN(parseInt(r,10))?void 0:r,a=isNaN(parseInt(n,10))?void 0:n,i=Object(s.k)(t)&&t.length>0?t:Object(f.f)();return 0===e.exception.values[0].stacktrace.frames.length&&e.exception.values[0].stacktrace.frames.push({colno:o,filename:i,function:"?",in_app:!0,lineno:a}),e},e.id="GlobalHandlers",e}(),Ye=function(){function e(t){void 0===t&&(t={}),this.name=e.id,this._key=t.key||"cause",this._limit=t.limit||5}return e.prototype.setupOnce=function(){h((function(t,n){var r=j().getIntegration(e);return r?r._handler(t,n):t}))},e.prototype._handler=function(e,t){if(!(e.exception&&e.exception.values&&t&&Object(s.g)(t.originalException,Error)))return e;var n=this._walkErrorTree(t.originalException,this._key);return e.exception.values=Object(u.d)(n,e.exception.values),e},e.prototype._walkErrorTree=function(e,t,n){if(void 0===n&&(n=[]),!Object(s.g)(e[t],Error)||n.length+1>=this._limit)return n;var r=ne(J(e[t]));return this._walkErrorTree(e[t],t,Object(u.d)([r],n))},e.id="LinkedErrors",e}(),Ve=Object(f.e)(),Xe=function(){function e(){this.name=e.id}return e.prototype.setupOnce=function(){h((function(t){var n,r,o;if(j().getIntegration(e)){if(!Ve.navigator&&!Ve.location&&!Ve.document)return t;var a=(null===(n=t.request)||void 0===n?void 0:n.url)||(null===(r=Ve.location)||void 0===r?void 0:r.href),i=(Ve.document||{}).referrer,s=(Ve.navigator||{}).userAgent,c=Object(u.a)(Object(u.a)(Object(u.a)({},null===(o=t.request)||void 0===o?void 0:o.headers),i&&{Referer:i}),s&&{"User-Agent":s}),l=Object(u.a)(Object(u.a)({},a&&{url:a}),{headers:c});return Object(u.a)(Object(u.a)({},t),{request:l})}return t}))},e.id="UserAgent",e}(),Ke=[new o.InboundFilters,new o.FunctionToString,new qe,new He,new $e,new Ye,new Xe];function Qe(e){if(void 0===e&&(e={}),void 0===e.defaultIntegrations&&(e.defaultIntegrations=Ke),void 0===e.release){var t=Object(f.e)();t.SENTRY_RELEASE&&t.SENTRY_RELEASE.id&&(e.release=t.SENTRY_RELEASE.id)}void 0===e.autoSessionTracking&&(e.autoSessionTracking=!1),function(e,t){!0===t.debug&&b.enable();var n=j(),r=new e(t);n.bindClient(r)}(We,e),e.autoSessionTracking&&function(){var e=Object(f.e)(),t=j(),n="complete"===document.readyState,r=!1,o=function(){r&&n&&t.endSession()},a=function(){n=!0,o(),e.removeEventListener("load",a)};t.startSession(),n||e.addEventListener("load",a);try{var i=new PerformanceObserver((function(e,t){e.getEntries().forEach((function(e){"first-contentful-paint"===e.name&&e.startTime<u&&(t.disconnect(),r=!0,o())}))})),u="hidden"===document.visibilityState?0:1/0;document.addEventListener("visibilitychange",(function(e){u=Math.min(u,e.timeStamp)}),{once:!0}),i.observe({type:"paint",buffered:!0})}catch(e){r=!0,o()}}()}var Ze=function(){return Qe({dsn:"https://0aafb2216ca24114a9dd7450f4fcca7a@sentry.ostrovok.in/102",release:"1.15.0"})}},function(e,t,n){"use strict";var r=n(30),o=n(27),a=n(51);function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var c,l=["en"];!function(e){e[e.Sun=0]="Sun",e[e.Mon=1]="Mon"}(c||(c={}));var f,d={locale:"ru",weekStartsOn:1},p=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:d,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case a.a.SET_LOCALE:return u(u({},e),{},{locale:"sr"===t.locale?"sr-Latn":t.locale,weekStartsOn:l.includes(t.locale)?c.Sun:c.Mon});default:return e}};function h(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?h(Object(n),!0).forEach((function(t){g(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):h(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}!function(e){e.SET_AVIA_SUGGEST="SET_AVIA_SUGGEST"}(f||(f={}));var v,y={suggests:{}},b=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:y,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case f.SET_AVIA_SUGGEST:return{suggests:m(m({},e.suggests),{},g({},t.query,t.suggest))};default:return e}};function w(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?w(Object(n),!0).forEach((function(t){O(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):w(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function O(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}!function(e){e.SET_TRANSFER_SUGGEST="SET_TRANSFER_SUGGEST"}(v||(v={}));var E,S={suggests:{}},x=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:S,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case v.SET_TRANSFER_SUGGEST:return{suggests:_(_({},e.suggests),{},O({},t.query,t.suggest))};default:return e}};function j(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function k(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?j(Object(n),!0).forEach((function(t){T(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):j(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function T(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}!function(e){e.SET_SUGGEST="SET_SUGGEST"}(E||(E={}));var C,A={suggests:{}},N=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:A,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case E.SET_SUGGEST:return{suggests:k(k({},e.suggests),{},T({},t.query,t.suggest))};default:return e}};function P(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function R(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?P(Object(n),!0).forEach((function(t){I(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):P(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function I(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}!function(e){e.SET_HOLIDAYS="SET_HOLIDAYS",e.SET_HOLIDAYS_LOADING="SET_HOLIDAYS_LOADING"}(C||(C={}));var D,L={list:null,loading:!1},M=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:L,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case C.SET_HOLIDAYS:return{list:t.list||e.list,loading:!1};case C.SET_HOLIDAYS_LOADING:return R(R({},e),{},{loading:t.loading});default:return e}};!function(e){e.SET_COUNTRIES="SET_COUNTRIES",e.SET_LOADING="SET_LOADING",e.INC_TRY_COUNT="INC_TRY_COUNT"}(D||(D={}));function U(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function F(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?U(Object(n),!0).forEach((function(t){B(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):U(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function B(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var z,H={list:[],loading:!1,tryCount:0},W=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:H,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case D.SET_COUNTRIES:return F(F({},e),{},{list:t.countries,loading:!1});case D.SET_LOADING:return F(F({},e),{},{loading:t.loading});case D.INC_TRY_COUNT:return F(F({},e),{},{tryCount:e.tryCount+1});default:return e}};!function(e){e.SET_CITIZENSHIP="SET_CITIZENSHIP"}(z||(z={}));function G(e){return function(e){if(Array.isArray(e))return q(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return q(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return q(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function q(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var $=function(){var e={popular:[],value:null};try{return JSON.parse(localStorage.getItem("citizenship")||"")||e}catch(t){return e}},Y=function(e,t){return t?e.popular.some((function(e){return e.code===t.code}))?{popular:e.popular,value:t}:{popular:[].concat(G(e.popular),[t]).slice(-3),value:t}:{popular:e.popular,value:null}},V=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:$(),t=arguments.length>1?arguments[1]:void 0;switch(t.type){case z.SET_CITIZENSHIP:return Y(e,t.country);default:return e}},X=n(52),K={},Q=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:K,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case X.a.SET_SETTINGS:return t.settings;default:return e}};t.a=Object(r.c)({theme:o.b,l10n:p,aviaDestination:b,transferDestination:x,destination:N,holidays:M,countries:W,citizenship:V,settings:Q})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return[].slice.call(e.querySelectorAll("*"),0).filter(i)};
/*!
 * Adapted from jQuery UI core
 *
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/ui-core/
 */
var r=/input|select|textarea|button|object/;function o(e){var t=e.offsetWidth<=0&&e.offsetHeight<=0;if(t&&!e.innerHTML)return!0;var n=window.getComputedStyle(e);return t?"visible"!==n.getPropertyValue("overflow")||e.scrollWidth<=0&&e.scrollHeight<=0:"none"==n.getPropertyValue("display")}function a(e,t){var n=e.nodeName.toLowerCase();return(r.test(n)&&!e.disabled||"a"===n&&e.href||t)&&function(e){for(var t=e;t&&t!==document.body;){if(o(t))return!1;t=t.parentNode}return!0}(e)}function i(e){var t=e.getAttribute("tabindex");null===t&&(t=void 0);var n=isNaN(t);return(n||t>=0)&&a(e,!n)}e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.assertNodeList=s,t.setElement=function(e){var t=e;if("string"==typeof t&&i.canUseDOM){var n=document.querySelectorAll(t);s(n,t),t="length"in n?n[0]:n}return u=t||u},t.validateElement=c,t.hide=function(e){c(e)&&(e||u).setAttribute("aria-hidden","true")},t.show=function(e){c(e)&&(e||u).removeAttribute("aria-hidden")},t.documentNotReadyOrSSRTesting=function(){u=null},t.resetForTesting=function(){u=null};var r,o=n(158),a=(r=o)&&r.__esModule?r:{default:r},i=n(67);var u=null;function s(e,t){if(!e||!e.length)throw new Error("react-modal: No elements were found for selector "+t+".")}function c(e){return!(!e&&!u)||((0,a.default)(!1,["react-modal: App element is not defined.","Please use `Modal.setAppElement(el)` or set `appElement={el}`.","This is needed so screen readers don't see main content","when modal is opened. It is not recommended, but you can opt-out","by setting `ariaHideApp={false}`."].join(" ")),!1)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=new function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.register=function(e){-1===t.openInstances.indexOf(e)&&(t.openInstances.push(e),t.emit("register"))},this.deregister=function(e){var n=t.openInstances.indexOf(e);-1!==n&&(t.openInstances.splice(n,1),t.emit("deregister"))},this.subscribe=function(e){t.subscribers.push(e)},this.emit=function(e){t.subscribers.forEach((function(n){return n(e,t.openInstances.slice())}))},this.openInstances=[],this.subscribers=[]};t.default=r,e.exports=t.default},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(23);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var a;if(n)a=n(t);else if(r.isURLSearchParams(t))a=t.toString();else{var i=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))})))})),a=i.join("&")}if(a){var u=e.indexOf("#");-1!==u&&(e=e.slice(0,u)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(23),o=n(168),a={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,s={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(u=n(98)),u),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};s.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){s.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){s.headers[e]=r.merge(a)})),e.exports=s}).call(this,n(60))},function(e,t,n){"use strict";var r=n(23),o=n(169),a=n(95),i=n(171),u=n(174),s=n(175),c=n(99);e.exports=function(e){return new Promise((function(t,l){var f=e.data,d=e.headers;r.isFormData(f)&&delete d["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var h=e.auth.username||"",m=e.auth.password||"";d.Authorization="Basic "+btoa(h+":"+m)}var g=i(e.baseURL,e.url);if(p.open(e.method.toUpperCase(),a(g,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?u(p.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:n,config:e,request:p};o(t,l,r),p=null}},p.onabort=function(){p&&(l(c("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){l(c("Network Error",e,null,p)),p=null},p.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),l(c(t,e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var v=n(176),y=(e.withCredentials||s(g))&&e.xsrfCookieName?v.read(e.xsrfCookieName):void 0;y&&(d[e.xsrfHeaderName]=y)}if("setRequestHeader"in p&&r.forEach(d,(function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete d[t]:p.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(p.withCredentials=!!e.withCredentials),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),l(e),p=null)})),void 0===f&&(f=null),p.send(f)}))}},function(e,t,n){"use strict";var r=n(170);e.exports=function(e,t,n,o,a){var i=new Error(e);return r(i,t,n,o,a)}},function(e,t,n){"use strict";var r=n(23);e.exports=function(e,t){t=t||{};var n={},o=["url","method","params","data"],a=["headers","auth","proxy"],i=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];r.forEach(o,(function(e){void 0!==t[e]&&(n[e]=t[e])})),r.forEach(a,(function(o){r.isObject(t[o])?n[o]=r.deepMerge(e[o],t[o]):void 0!==t[o]?n[o]=t[o]:r.isObject(e[o])?n[o]=r.deepMerge(e[o]):void 0!==e[o]&&(n[o]=e[o])})),r.forEach(i,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])}));var u=o.concat(a).concat(i),s=Object.keys(t).filter((function(e){return-1===u.indexOf(e)}));return r.forEach(s,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])})),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){e.exports={tooltip:"TooltipContent__tooltip--3ckme",tooltip_shown:"TooltipContent__tooltip_shown--3dzm8",tooltipWrapper:"TooltipContent__tooltipWrapper--2T5U1",tooltipWrapper_titled:"TooltipContent__tooltipWrapper_titled--2D7VL",tooltipUnderlay:"TooltipContent__tooltipUnderlay--2SYri","tooltipUnderlay_position_top-start":"TooltipContent__tooltipUnderlay_position_top-start--2fCbe",tooltipUnderlay_position_top:"TooltipContent__tooltipUnderlay_position_top--JG4Cz","tooltipUnderlay_position_top-end":"TooltipContent__tooltipUnderlay_position_top-end--2oIeE","tooltipUnderlay_position_right-start":"TooltipContent__tooltipUnderlay_position_right-start--21cqn",tooltipUnderlay_position_right:"TooltipContent__tooltipUnderlay_position_right--3lic4","tooltipUnderlay_position_right-end":"TooltipContent__tooltipUnderlay_position_right-end--hgSGf","tooltipUnderlay_position_left-start":"TooltipContent__tooltipUnderlay_position_left-start--37wZl",tooltipUnderlay_position_left:"TooltipContent__tooltipUnderlay_position_left--pUTSg","tooltipUnderlay_position_left-end":"TooltipContent__tooltipUnderlay_position_left-end--9NuCG","tooltipUnderlay_position_bottom-start":"TooltipContent__tooltipUnderlay_position_bottom-start--RAgxt",tooltipUnderlay_position_bottom:"TooltipContent__tooltipUnderlay_position_bottom--1jrmm","tooltipUnderlay_position_bottom-end":"TooltipContent__tooltipUnderlay_position_bottom-end--2xowZ",tooltipTitle:"TooltipContent__tooltipTitle--1jS5Y"}},function(e,t,n){e.exports={root:"Modal__root--5gHPo",overlay:"Modal__overlay--3hVK6",overlay_popup:"Modal__overlay_popup--cLjZ3"}},function(e,t,n){e.exports={card:"Card__card--tyU4C",card_padding_xs:"Card__card_padding_xs--2Ukcx",card_padding_s:"Card__card_padding_s--QcdhH",card_padding_m:"Card__card_padding_m--1zd6i",card_shadowSize_s:"Card__card_shadowSize_s--3U0_5",card_shadowSize_m:"Card__card_shadowSize_m--12HVH",card_shadowSize_l:"Card__card_shadowSize_l--1gx5i"}},function(e,t,n){e.exports={hint:"Hint__hint--1I03c",hint_variant_regular:"Hint__hint_variant_regular--1bInb",hint_variant_mini:"Hint__hint_variant_mini--Z1kyu",hintTitle:"Hint__hintTitle--1KN4L",mobileCloseButton:"Hint__mobileCloseButton--2cqoG"}},function(e,t,n){e.exports={titleWrapper:"Input__titleWrapper--29PGx",title:"Input__title--Q_FYk",wrapper:"Input__wrapper--3R5L6",wrapper_wide:"Input__wrapper_wide--acKPg",label:"Input__label--35kjM",label_size_xs:"Input__label_size_xs--3OmMG",label_size_s:"Input__label_size_s--Cu6Tr",label_size_m:"Input__label_size_m--2-scr",label_size_l:"Input__label_size_l--9pbcw",label_hasError:"Input__label_hasError--3HvBj",control:"Input__control--qjCAR",label_disabled:"Input__label_disabled--3LSa0",label_required:"Input__label_required--30mpz",label_readOnly:"Input__label_readOnly--23mGu",label_focused:"Input__label_focused--2Qitf",control_hasPlaceholder:"Input__control_hasPlaceholder--3Nnv1",controlLine:"Input__controlLine--2RtYN",controlLine_reserveIconPlace:"Input__controlLine_reserveIconPlace--3w3-_",hint:"Input__hint--1pZ3R",icon:"Input__icon--23fwM",icon_clickable:"Input__icon_clickable--8yIJx",error:"Input__error--7YH6-"}},function(e,t,n){e.exports={title:"Title__title--27B0c",title_size_s:"Title__title_size_s--wkjwg",title_size_m:"Title__title_size_m--2iEW7",title_size_l:"Title__title_size_l--2Q3d1"}},function(e,t,n){e.exports={buttonIcon:"ButtonIcon__buttonIcon--sBrNd"}},function(e,t,n){e.exports={dropdown:"Dropdown__dropdown--2VJKr",dropdown_fullWidth:"Dropdown__dropdown_fullWidth--2iBCg",exiting:"Dropdown__exiting--2kHv2",exited:"Dropdown__exited--1CSIQ",entered:"Dropdown__entered--3R_0A"}},function(e,t,n){e.exports={contextMenu:"ContextMenu__contextMenu--1N4QR",dropdown:"ContextMenu__dropdown--2EB19",title:"ContextMenu__title--ujdNC",optionContainer:"ContextMenu__optionContainer--YUX9S",optionItem:"ContextMenu__optionItem--1FO6Z",dotsContainer:"ContextMenu__dotsContainer--1_mFM",closeButton:"ContextMenu__closeButton--3_FVK"}},function(e,t,n){e.exports={button:"LanguageSwitcher__button--1YFit",label:"LanguageSwitcher__label--684ur"}},function(e,t,n){e.exports={inner:"Logo__inner--2pdZD",logo:"Logo__logo--3ytBm",logo_size_s:"Logo__logo_size_s--7h4On",logo_size_m:"Logo__logo_size_m--1O88e",logo_size_l:"Logo__logo_size_l--1ZL2A"}},function(e,t,n){e.exports=n(163)},function(e,t,n){"use strict";var r=n(0),o=n.n(r),a=(n(113),n(50)),i=function(e){return{theme:e,type:a.a.SET_THEME}},u=(n(52),n(51),n(37)),s={"palette-black":"#2d3137","palette-dark":"#868686","palette-gray":"#c8c8c8","palette-light":"#e5e5e5","palette-ulight":"#f4f4f4","palette-white":"#ffffff","palette-disabled":"#afafaf","palette-main":"#ffdc82","palette-sec":"#e5e5e5",border:"rgba(45, 49, 55, 0.12)","disabled-overlay":"rgba(246, 246, 246, 0.8)","disabled-filter":"grayscale(0.5) opacity(0.4)","header-bg":"#ffffff","header-bg-secondary":"#f9f9f9","header-main":"#868686","header-secondary":"#c8c8c8","header-menu-typo":"#868686","header-active":"#2d3137","button-primary-bg":"#ffdc82","button-primary-typo":"#2d3137","button-primary-hover-bg":"#ffd26d","button-primary-active-bg":"#ffcb5e","button-secondary-bg":"#e5e5e5","button-secondary-typo":"#2d3137","button-secondary-hover-bg":"#c8c8c8","button-secondary-active-bg":"#b0b0b0","button-outline-border":"rgba(45, 49, 55, 0.15)","button-outline-typo":"#2d3137","button-outline-hover-border":"#ffd26d","button-outline-active-border":"#ffcb5e","multibutton-border":"rgba(45, 49, 55, 0.12)","multibutton-on-bg":"#ffffff","multibutton-on-typo":"#2d3137","multibutton-off-bg":"#f4f4f4","multibutton-off-typo":"#868686","field-bg":"#ffffff","field-typo":"#2d3137","field-placeholder":"#afafaf","field-label":"#2d3137","field-border":"rgba(45, 49, 55, 0.12)","field-hover-border":"rgba(45, 49, 55, 0.4)","field-active-border":"rgba(45, 49, 55, 0.15)","dropdown-selected-bg":"rgba(255, 220, 130, 0.4)","box-border":"rgba(45, 49, 55, 0.12)","box-bg":"#ffffff","box-on-bg":"#ffdc82","box-on-typo":"#2d3137","box-hover-border":"#ffd26d","box-active-bg":"#2d3137","brand-logo-partner":"","calendar-holiday-color-edge":"#be0000","calendar-holiday-color":"#be0000",link:"#4086e4","link-hover":"#ce2121","link-active":"#ce2121",text:"#2d3137","text-secondary":"#868686","text-alt":"#ffffff","block-bg":"#ffffff","block-bg-secondary":"#f4f4f4","block-bg-alt":"#2d3137",shadow:"rgba(45, 49, 55, 0.3)",alert:"#ce2121","alert-bg":"rgba(206, 33, 33, 0.1)","alert-outline":"rgba(206, 33, 33, 0.4)",success:"#53b124","success-bg":"rgba(83, 175, 36, 0.1)","highlight-bg":"#fff8e6","focus-outline":"rgba(255, 220, 130, 0.4)","fidelity-dreams":"#ff6464","fidelity-ratehawk-points":"#4086e4","fidelity-zen-points":"#5c77cc","fidelity-segment-black":"#464a50","fidelity-segment-gold":"#ffc937","fidelity-segment-platinum":"#d6cdc0","fidelity-segment-silver":"#b3c6d8","social-facebook-color":"#1382ff","social-telegram-color":"#23a2e3","social-viber-color":"#675bac","social-apple-color":"#2d3137","z-index-start":"1","z-index-tip":"2","z-index-popup":"12","z-index-popup-important":"22"};function c(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return l(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}t.a=function(e){var t,n=e.children;t=s,u.a.dispatch(i(t));var r=Object.entries(s);return o.a.createElement(o.a.Fragment,null,o.a.createElement("style",null,"\n        :root,\n        :host {\n          ".concat(r.reduce((function(e,t){var n=c(t,2),r=n[0],o=n[1];return"".concat(e," --").concat(r,": ").concat(o,";\n")}),"").trim(),"\n        }\n      ")),n)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(0),o=n(42),a=n(6);function i(){const e=Object(r.useContext)(o.a);return Object(a.h)(e),e}},,function(e,t,n){"use strict";e.exports=n(150)},,,function(e,t,n){"use strict";(function(e){var r=n(0),o=n.n(r),a=n(24),i=n(28),u=n.n(i),s="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==e?e:"undefined"!=typeof self?self:{};function c(e,t){return e(t={exports:{}},t.exports),t.exports}var l=c((function(e){!function(t){var n=function(e,t,r){if(!s(t)||l(t)||f(t)||d(t)||u(t))return t;var o,a=0,i=0;if(c(t))for(o=[],i=t.length;a<i;a++)o.push(n(e,t[a],r));else for(var p in o={},t)Object.prototype.hasOwnProperty.call(t,p)&&(o[e(p,r)]=n(e,t[p],r));return o},r=function(e){return p(e)?e:(e=e.replace(/[\-_\s]+(.)?/g,(function(e,t){return t?t.toUpperCase():""}))).substr(0,1).toLowerCase()+e.substr(1)},o=function(e){var t=r(e);return t.substr(0,1).toUpperCase()+t.substr(1)},a=function(e,t){return function(e,t){var n=(t=t||{}).separator||"_",r=t.split||/(?=[A-Z])/;return e.split(r).join(n)}(e,t).toLowerCase()},i=Object.prototype.toString,u=function(e){return"function"==typeof e},s=function(e){return e===Object(e)},c=function(e){return"[object Array]"==i.call(e)},l=function(e){return"[object Date]"==i.call(e)},f=function(e){return"[object RegExp]"==i.call(e)},d=function(e){return"[object Boolean]"==i.call(e)},p=function(e){return(e-=0)==e},h=function(e,t){var n=t&&"process"in t?t.process:t;return"function"!=typeof n?e:function(t,r){return n(t,e,r)}},m={camelize:r,decamelize:a,pascalize:o,depascalize:a,camelizeKeys:function(e,t){return n(h(r,t),e)},decamelizeKeys:function(e,t){return n(h(a,t),e,t)},pascalizeKeys:function(e,t){return n(h(o,t),e)},depascalizeKeys:function(){return this.decamelizeKeys.apply(this,arguments)}};e.exports?e.exports=m:t.humps=m}(s)})).decamelize,f=c((function(e){function t(){return e.exports=t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},t.apply(this,arguments)}e.exports=t})),d=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r},p=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw a}}return n}}(e,t)||function(e,t){if(e){if("string"==typeof e)return d(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?d(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()},h=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o},m=Object(r.createContext)(null);function g(e){var t=e.root,n=e.children;return Object(a.createPortal)(n,t)}function v(t){var n=Object(r.forwardRef)((function(e,n){var a,i,u=e.mode,s=e.delegatesFocus,c=e.styleSheets,l=e.ssr,d=e.children,v=h(e,["mode","delegatesFocus","styleSheets","ssr","children"]),y=(i=Object(r.useRef)((a=n)&&a.current),Object(r.useEffect)((function(){a&&(a.current=i.current)}),[a]),i),b=Object(r.useState)(null),w=p(b,2),_=w[0],O=w[1],E="node_".concat(u).concat(s);return Object(r.useEffect)((function(){if(y.current)try{if("function"==typeof n&&n(y.current),l){var e=y.current.shadowRoot;return void O(e)}var t=y.current.attachShadow({mode:u,delegatesFocus:s});c.length>0&&(t.adoptedStyleSheets=c),O(t)}catch(e){!function(e){var t=e.error,n=e.styleSheets,r=e.root;switch(t.name){case"NotSupportedError":n.length>0&&(r.adoptedStyleSheets=n);break;default:throw t}}({error:e,styleSheets:c,root:_})}}),[n,y,c]),o.a.createElement(o.a.Fragment,null,o.a.createElement(t.tag,f({key:E,ref:y},v),(_||l)&&o.a.createElement(m.Provider,{value:_},l?o.a.createElement("template",{shadowroot:"open"},t.render({root:_,ssr:l,children:d})):o.a.createElement(g,{root:_},t.render({root:_,ssr:l,children:d})))))}));return n.propTypes={mode:u.a.oneOf(["open","closed"]),delegatesFocus:u.a.bool,styleSheets:u.a.arrayOf(u.a.instanceOf(e.CSSStyleSheet)),ssr:u.a.bool,children:u.a.node},n.defaultProps={mode:"open",delegatesFocus:!1,styleSheets:[],ssr:!1,children:null},n}g.propTypes={root:u.a.object.isRequired,children:u.a.node},g.defaultProps={children:null};var y=new Map;var b=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"core",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(e){return e.children};return new Proxy(e,{get:function(e,r){var o=l(r,{separator:"-"}),a="".concat(t,"-").concat(o);return y.has(a)||y.set(a,v({tag:o,render:n})),y.get(a)}})}();t.a=b}).call(this,n(40))},,,,,function(e,t,n){var r=function(e){"use strict";var t=Object.prototype,n=t.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",a=r.asyncIterator||"@@asyncIterator",i=r.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var o=t&&t.prototype instanceof f?t:f,a=Object.create(o.prototype),i=new E(r||[]);return a._invoke=function(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return x()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var u=w(i,n);if(u){if(u===l)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var s=c(e,t,n);if("normal"===s.type){if(r=n.done?"completed":"suspendedYield",s.arg===l)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r="completed",n.method="throw",n.arg=s.arg)}}}(e,n,i),a}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var l={};function f(){}function d(){}function p(){}var h={};h[o]=function(){return this};var m=Object.getPrototypeOf,g=m&&m(m(S([])));g&&g!==t&&n.call(g,o)&&(h=g);var v=p.prototype=f.prototype=Object.create(h);function y(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function b(e,t){var r;this._invoke=function(o,a){function i(){return new t((function(r,i){!function r(o,a,i,u){var s=c(e[o],e,a);if("throw"!==s.type){var l=s.arg,f=l.value;return f&&"object"==typeof f&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){r("next",e,i,u)}),(function(e){r("throw",e,i,u)})):t.resolve(f).then((function(e){l.value=e,i(l)}),(function(e){return r("throw",e,i,u)}))}u(s.arg)}(o,a,r,i)}))}return r=r?r.then(i,i):i()}}function w(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,w(e,t),"throw"===t.method))return l;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return l}var r=c(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,l;var o=r.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,l):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,l)}function _(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(_,this),this.reset(!0)}function S(e){if(e){var t=e[o];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,a=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return a.next=a}}return{next:x}}function x(){return{value:void 0,done:!0}}return d.prototype=v.constructor=p,p.constructor=d,d.displayName=u(p,i,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===d||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,p):(e.__proto__=p,u(e,i,"GeneratorFunction")),e.prototype=Object.create(v),e},e.awrap=function(e){return{__await:e}},y(b.prototype),b.prototype[a]=function(){return this},e.AsyncIterator=b,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new b(s(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},y(v),u(v,i,"Generator"),v[o]=function(){return this},v.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=S,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(O),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var u=n.call(a,"catchLoc"),s=n.call(a,"finallyLoc");if(u&&s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,l):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),l},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),l}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:S(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),l}},e}(e.exports);try{regeneratorRuntime=r}catch(e){Function("r","regeneratorRuntime = r")(r)}},function(e,t,n){"use strict";
/** @license React v17.0.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(75),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,u=60110,s=60112;t.Suspense=60113;var c=60115,l=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),u=f("react.context"),s=f("react.forward_ref"),t.Suspense=f("react.suspense"),c=f("react.memo"),l=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function g(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function v(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=g.prototype;var b=y.prototype=new v;b.constructor=y,r(b,g.prototype),b.isPureReactComponent=!0;var w={current:null},_=Object.prototype.hasOwnProperty,O={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,n){var r,a={},i=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(i=""+t.key),t)_.call(t,r)&&!O.hasOwnProperty(r)&&(a[r]=t[r]);var s=arguments.length-2;if(1===s)a.children=n;else if(1<s){for(var c=Array(s),l=0;l<s;l++)c[l]=arguments[l+2];a.children=c}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===a[r]&&(a[r]=s[r]);return{$$typeof:o,type:e,key:i,ref:u,props:a,_owner:w.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var x=/\/+/g;function j(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function k(e,t,n,r,i){var u=typeof e;"undefined"!==u&&"boolean"!==u||(e=null);var s=!1;if(null===e)s=!0;else switch(u){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case o:case a:s=!0}}if(s)return i=i(s=e),e=""===r?"."+j(s,0):r,Array.isArray(i)?(n="",null!=e&&(n=e.replace(x,"$&/")+"/"),k(i,t,n,"",(function(e){return e}))):null!=i&&(S(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||s&&s.key===i.key?"":(""+i.key).replace(x,"$&/")+"/")+e)),t.push(i)),1;if(s=0,r=""===r?".":r+":",Array.isArray(e))for(var c=0;c<e.length;c++){var l=r+j(u=e[c],c);s+=k(u,t,n,l,i)}else if("function"==typeof(l=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=l.call(e),c=0;!(u=e.next()).done;)s+=k(u=u.value,t,n,l=r+j(u,c++),i);else if("object"===u)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return s}function T(e,t,n){if(null==e)return e;var r=[],o=0;return k(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function C(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var A={current:null};function N(){var e=A.current;if(null===e)throw Error(p(321));return e}var P={ReactCurrentDispatcher:A,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:T,forEach:function(e,t,n){T(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return T(e,(function(){t++})),t},toArray:function(e){return T(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error(p(143));return e}},t.Component=g,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=P,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var a=r({},e.props),i=e.key,u=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,s=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(l in t)_.call(t,l)&&!O.hasOwnProperty(l)&&(a[l]=void 0===t[l]&&void 0!==c?c[l]:t[l])}var l=arguments.length-2;if(1===l)a.children=n;else if(1<l){c=Array(l);for(var f=0;f<l;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:o,type:e.type,key:i,ref:u,props:a,_owner:s}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:u,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:l,_payload:{_status:-1,_result:e},_init:C}},t.memo=function(e,t){return{$$typeof:c,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return N().useCallback(e,t)},t.useContext=function(e,t){return N().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return N().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return N().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return N().useLayoutEffect(e,t)},t.useMemo=function(e,t){return N().useMemo(e,t)},t.useReducer=function(e,t,n){return N().useReducer(e,t,n)},t.useRef=function(e){return N().useRef(e)},t.useState=function(e){return N().useState(e)},t.version="17.0.1"},function(e,t,n){"use strict";
/** @license React v17.0.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(75),a=n(128);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var u=new Set,s={};function c(e,t){l(e,t),l(e+"Capture",t)}function l(e,t){for(s[e]=t,e=0;e<t.length;e++)u.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function g(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=v.hasOwnProperty(t)?v[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(d.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);v[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);v[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);v[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var _=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,O=60103,E=60106,S=60107,x=60108,j=60114,k=60109,T=60110,C=60112,A=60113,N=60120,P=60115,R=60116,I=60121,D=60128,L=60129,M=60130,U=60131;if("function"==typeof Symbol&&Symbol.for){var F=Symbol.for;O=F("react.element"),E=F("react.portal"),S=F("react.fragment"),x=F("react.strict_mode"),j=F("react.profiler"),k=F("react.provider"),T=F("react.context"),C=F("react.forward_ref"),A=F("react.suspense"),N=F("react.suspense_list"),P=F("react.memo"),R=F("react.lazy"),I=F("react.block"),F("react.scope"),D=F("react.opaque.id"),L=F("react.debug_trace_mode"),M=F("react.offscreen"),U=F("react.legacy_hidden")}var B,z="function"==typeof Symbol&&Symbol.iterator;function H(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=z&&e[z]||e["@@iterator"])?e:null}function W(e){if(void 0===B)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);B=t&&t[1]||""}return"\n"+B+e}var G=!1;function q(e,t){if(!e||G)return"";G=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,u=a.length-1;1<=i&&0<=u&&o[i]!==a[u];)u--;for(;1<=i&&0<=u;i--,u--)if(o[i]!==a[u]){if(1!==i||1!==u)do{if(i--,0>--u||o[i]!==a[u])return"\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=u);break}}}finally{G=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?W(e):""}function $(e){switch(e.tag){case 5:return W(e.type);case 16:return W("Lazy");case 13:return W("Suspense");case 19:return W("SuspenseList");case 0:case 2:case 15:return e=q(e.type,!1);case 11:return e=q(e.type.render,!1);case 22:return e=q(e.type._render,!1);case 1:return e=q(e.type,!0);default:return""}}function Y(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case E:return"Portal";case j:return"Profiler";case x:return"StrictMode";case A:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case T:return(e.displayName||"Context")+".Consumer";case k:return(e._context.displayName||"Context")+".Provider";case C:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case P:return Y(e.type);case I:return Y(e._render);case R:t=e._payload,e=e._init;try{return Y(e(t))}catch(e){}}return null}function V(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function X(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function K(e){e._valueTracker||(e._valueTracker=function(e){var t=X(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=X(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Z(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=V(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=V(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,V(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&Z(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+V(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function ue(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function se(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:V(n)}}function ce(e,t){var n=V(t.value),r=V(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function le(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml",de="http://www.w3.org/2000/svg";function pe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function he(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?pe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var me,ge=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==de||"innerHTML"in e)e.innerHTML=t;else{for((me=me||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=me.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function ve(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function _e(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var Oe=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Ee(e,t){if(t){if(Oe[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function Se(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var je=null,ke=null,Te=null;function Ce(e){if(e=Zr(e)){if("function"!=typeof je)throw Error(i(280));var t=e.stateNode;t&&(t=eo(t),je(e.stateNode,e.type,t))}}function Ae(e){ke?Te?Te.push(e):Te=[e]:ke=e}function Ne(){if(ke){var e=ke,t=Te;if(Te=ke=null,Ce(e),t)for(e=0;e<t.length;e++)Ce(t[e])}}function Pe(e,t){return e(t)}function Re(e,t,n,r,o){return e(t,n,r,o)}function Ie(){}var De=Pe,Le=!1,Me=!1;function Ue(){null===ke&&null===Te||(Ie(),Ne())}function Fe(e,t){var n=e.stateNode;if(null===n)return null;var r=eo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Be=!1;if(f)try{var ze={};Object.defineProperty(ze,"passive",{get:function(){Be=!0}}),window.addEventListener("test",ze,ze),window.removeEventListener("test",ze,ze)}catch(e){Be=!1}function He(e,t,n,r,o,a,i,u,s){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var We=!1,Ge=null,qe=!1,$e=null,Ye={onError:function(e){We=!0,Ge=e}};function Ve(e,t,n,r,o,a,i,u,s){We=!1,Ge=null,He.apply(Ye,arguments)}function Xe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ke(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function Qe(e){if(Xe(e)!==e)throw Error(i(188))}function Ze(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Xe(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return Qe(o),e;if(a===r)return Qe(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var u=!1,s=o.child;s;){if(s===n){u=!0,n=o,r=a;break}if(s===r){u=!0,r=o,n=a;break}s=s.sibling}if(!u){for(s=a.child;s;){if(s===n){u=!0,n=a,r=o;break}if(s===r){u=!0,r=a,n=o;break}s=s.sibling}if(!u)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,at=[],it=null,ut=null,st=null,ct=new Map,lt=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":it=null;break;case"dragenter":case"dragleave":ut=null;break;case"mouseover":case"mouseout":st=null;break;case"pointerover":case"pointerout":ct.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":lt.delete(t.pointerId)}}function mt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=pt(t,n,r,o,a),null!==t&&(null!==(t=Zr(t))&&tt(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function gt(e){var t=Qr(e.target);if(null!==t){var n=Xe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ke(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function vt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Zr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){vt(e)&&n.delete(t)}function bt(){for(ot=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=Zr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==it&&vt(it)&&(it=null),null!==ut&&vt(ut)&&(ut=null),null!==st&&vt(st)&&(st=null),ct.forEach(yt),lt.forEach(yt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,bt)))}function _t(e){function t(t){return wt(t,e)}if(0<at.length){wt(at[0],e);for(var n=1;n<at.length;n++){var r=at[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==it&&wt(it,e),null!==ut&&wt(ut,e),null!==st&&wt(st,e),ct.forEach(t),lt.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)gt(n),null===n.blockedOn&&ft.shift()}function Ot(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Et={animationend:Ot("Animation","AnimationEnd"),animationiteration:Ot("Animation","AnimationIteration"),animationstart:Ot("Animation","AnimationStart"),transitionend:Ot("Transition","TransitionEnd")},St={},xt={};function jt(e){if(St[e])return St[e];if(!Et[e])return e;var t,n=Et[e];for(t in n)if(n.hasOwnProperty(t)&&t in xt)return St[e]=n[t];return e}f&&(xt=document.createElement("div").style,"AnimationEvent"in window||(delete Et.animationend.animation,delete Et.animationiteration.animation,delete Et.animationstart.animation),"TransitionEvent"in window||delete Et.transitionend.transition);var kt=jt("animationend"),Tt=jt("animationiteration"),Ct=jt("animationstart"),At=jt("transitionend"),Nt=new Map,Pt=new Map,Rt=["abort","abort",kt,"animationEnd",Tt,"animationIteration",Ct,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",At,"transitionEnd","waiting","waiting"];function It(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Pt.set(r,t),Nt.set(r,o),c(o,[r])}}(0,a.unstable_now)();var Dt=8;function Lt(e){if(0!=(1&e))return Dt=15,1;if(0!=(2&e))return Dt=14,2;if(0!=(4&e))return Dt=13,4;var t=24&e;return 0!==t?(Dt=12,t):0!=(32&e)?(Dt=11,32):0!==(t=192&e)?(Dt=10,t):0!=(256&e)?(Dt=9,256):0!==(t=3584&e)?(Dt=8,t):0!=(4096&e)?(Dt=7,4096):0!==(t=4186112&e)?(Dt=6,t):0!==(t=62914560&e)?(Dt=5,t):67108864&e?(Dt=4,67108864):0!=(134217728&e)?(Dt=3,134217728):0!==(t=805306368&e)?(Dt=2,t):0!=(1073741824&e)?(Dt=1,1073741824):(Dt=8,e)}function Mt(e,t){var n=e.pendingLanes;if(0===n)return Dt=0;var r=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,u=e.pingedLanes;if(0!==a)r=a,o=Dt=15;else if(0!==(a=134217727&n)){var s=a&~i;0!==s?(r=Lt(s),o=Dt):0!==(u&=a)&&(r=Lt(u),o=Dt)}else 0!==(a=n&~i)?(r=Lt(a),o=Dt):0!==u&&(r=Lt(u),o=Dt);if(0===r)return 0;if(r=n&((0>(r=31-Wt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&i)){if(Lt(t),o<=Dt)return t;Dt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Wt(t)),r|=e[n],t&=~o;return r}function Ut(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Ft(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Bt(24&~t))?Ft(10,t):e;case 10:return 0===(e=Bt(192&~t))?Ft(8,t):e;case 8:return 0===(e=Bt(3584&~t))&&(0===(e=Bt(4186112&~t))&&(e=512)),e;case 2:return 0===(t=Bt(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function Bt(e){return e&-e}function zt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ht(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Wt(t)]=n}var Wt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Gt(e)/qt|0)|0},Gt=Math.log,qt=Math.LN2;var $t=a.unstable_UserBlockingPriority,Yt=a.unstable_runWithPriority,Vt=!0;function Xt(e,t,n,r){Le||Ie();var o=Qt,a=Le;Le=!0;try{Re(o,e,t,n,r)}finally{(Le=a)||Ue()}}function Kt(e,t,n,r){Yt($t,Qt.bind(null,e,t,n,r))}function Qt(e,t,n,r){var o;if(Vt)if((o=0==(4&t))&&0<at.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),at.push(e);else{var a=Zt(e,t,n,r);if(null===a)o&&ht(e,r);else{if(o){if(-1<dt.indexOf(e))return e=pt(a,e,t,n,r),void at.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return it=mt(it,e,t,n,r,o),!0;case"dragenter":return ut=mt(ut,e,t,n,r,o),!0;case"mouseover":return st=mt(st,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return ct.set(a,mt(ct.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,lt.set(a,mt(lt.get(a)||null,e,t,n,r,o)),!0}return!1}(a,e,t,n,r))return;ht(e,r)}Ar(e,t,r,null,n)}}}function Zt(e,t,n,r){var o=xe(r);if(null!==(o=Qr(o))){var a=Xe(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Ke(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Ar(e,t,r,o,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Jt?Jt.value:Jt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function un(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var sn,cn,ln,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=un(fn),pn=o({},fn,{view:0,detail:0}),hn=un(pn),mn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:jn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(sn=e.screenX-ln.screenX,cn=e.screenY-ln.screenY):cn=sn=0,ln=e),sn)},movementY:function(e){return"movementY"in e?e.movementY:cn}}),gn=un(mn),vn=un(o({},mn,{dataTransfer:0})),yn=un(o({},pn,{relatedTarget:0})),bn=un(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=un(o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),_n=un(o({},fn,{data:0})),On={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},En={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sn[e])&&!!t[e]}function jn(){return xn}var kn=un(o({},pn,{key:function(e){if(e.key){var t=On[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?En[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:jn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Tn=un(o({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Cn=un(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:jn})),An=un(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nn=un(o({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Pn=[9,13,27,32],Rn=f&&"CompositionEvent"in window,In=null;f&&"documentMode"in document&&(In=document.documentMode);var Dn=f&&"TextEvent"in window&&!In,Ln=f&&(!Rn||In&&8<In&&11>=In),Mn=String.fromCharCode(32),Un=!1;function Fn(e,t){switch(e){case"keyup":return-1!==Pn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Bn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var zn=!1;var Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Gn(e,t,n,r){Ae(r),0<(t=Pr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var qn=null,$n=null;function Yn(e){Sr(e,0)}function Vn(e){if(Q(Jr(e)))return e}function Xn(e,t){if("change"===e)return t}var Kn=!1;if(f){var Qn;if(f){var Zn="oninput"in document;if(!Zn){var Jn=document.createElement("div");Jn.setAttribute("oninput","return;"),Zn="function"==typeof Jn.oninput}Qn=Zn}else Qn=!1;Kn=Qn&&(!document.documentMode||9<document.documentMode)}function er(){qn&&(qn.detachEvent("onpropertychange",tr),$n=qn=null)}function tr(e){if("value"===e.propertyName&&Vn($n)){var t=[];if(Gn(t,$n,e,xe(e)),e=Yn,Le)e(t);else{Le=!0;try{Pe(e,t)}finally{Le=!1,Ue()}}}}function nr(e,t,n){"focusin"===e?(er(),$n=n,(qn=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Vn($n)}function or(e,t){if("click"===e)return Vn(t)}function ar(e,t){if("input"===e||"change"===e)return Vn(t)}var ir="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ur=Object.prototype.hasOwnProperty;function sr(e,t){if(ir(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!ur.call(t,n[r])||!ir(e[n[r]],t[n[r]]))return!1;return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function lr(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function fr(){for(var e=window,t=Z();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Z((e=t.contentWindow).document)}return t}function dr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var pr=f&&"documentMode"in document&&11>=document.documentMode,hr=null,mr=null,gr=null,vr=!1;function yr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;vr||null==hr||hr!==Z(r)||("selectionStart"in(r=hr)&&dr(r)?r={start:r.selectionStart,end:r.selectionEnd}:r={anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&sr(gr,r)||(gr=r,0<(r=Pr(mr,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=hr)))}It("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),It("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),It(Rt,2);for(var br="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),wr=0;wr<br.length;wr++)Pt.set(br[wr],0);l("onMouseEnter",["mouseout","mouseover"]),l("onMouseLeave",["mouseout","mouseover"]),l("onPointerEnter",["pointerout","pointerover"]),l("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var _r="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Or=new Set("cancel close invalid load scroll toggle".split(" ").concat(_r));function Er(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,u,s,c){if(Ve.apply(this,arguments),We){if(!We)throw Error(i(198));var l=Ge;We=!1,Ge=null,qe||(qe=!0,$e=l)}}(r,t,void 0,e),e.currentTarget=null}function Sr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var u=r[i],s=u.instance,c=u.currentTarget;if(u=u.listener,s!==a&&o.isPropagationStopped())break e;Er(o,u,c),a=s}else for(i=0;i<r.length;i++){if(s=(u=r[i]).instance,c=u.currentTarget,u=u.listener,s!==a&&o.isPropagationStopped())break e;Er(o,u,c),a=s}}}if(qe)throw e=$e,qe=!1,$e=null,e}function xr(e,t){var n=to(t),r=e+"__bubble";n.has(r)||(Cr(t,e,2,!1),n.add(r))}var jr="_reactListening"+Math.random().toString(36).slice(2);function kr(e){e[jr]||(e[jr]=!0,u.forEach((function(t){Or.has(t)||Tr(t,!1,e,null),Tr(t,!0,e,null)})))}function Tr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=n;if("selectionchange"===e&&9!==n.nodeType&&(a=n.ownerDocument),null!==r&&!t&&Or.has(e)){if("scroll"!==e)return;o|=2,a=r}var i=to(a),u=e+"__"+(t?"capture":"bubble");i.has(u)||(t&&(o|=4),Cr(a,e,o,t),i.add(u))}function Cr(e,t,n,r){var o=Pt.get(t);switch(void 0===o?2:o){case 0:o=Xt;break;case 1:o=Kt;break;default:o=Qt}n=o.bind(null,t,n,e),o=void 0,!Be||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Ar(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var u=r.stateNode.containerInfo;if(u===o||8===u.nodeType&&u.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var s=i.tag;if((3===s||4===s)&&((s=i.stateNode.containerInfo)===o||8===s.nodeType&&s.parentNode===o))return;i=i.return}for(;null!==u;){if(null===(i=Qr(u)))return;if(5===(s=i.tag)||6===s){r=a=i;continue e}u=u.parentNode}}r=r.return}!function(e,t,n){if(Me)return e(t,n);Me=!0;try{De(e,t,n)}finally{Me=!1,Ue()}}((function(){var r=a,o=xe(n),i=[];e:{var u=Nt.get(e);if(void 0!==u){var s=dn,c=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":s=kn;break;case"focusin":c="focus",s=yn;break;case"focusout":c="blur",s=yn;break;case"beforeblur":case"afterblur":s=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=gn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=Cn;break;case kt:case Tt:case Ct:s=bn;break;case At:s=An;break;case"scroll":s=hn;break;case"wheel":s=Nn;break;case"copy":case"cut":case"paste":s=wn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=Tn}var l=0!=(4&t),f=!l&&"scroll"===e,d=l?null!==u?u+"Capture":null:u;l=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&(null!=(m=Fe(h,d))&&l.push(Nr(h,m,p)))),f)break;h=h.return}0<l.length&&(u=new s(u,c,null,n,o),i.push({event:u,listeners:l}))}}if(0==(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(u="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(c=n.relatedTarget||n.fromElement)||!Qr(c)&&!c[Xr])&&(s||u)&&(u=o.window===o?o:(u=o.ownerDocument)?u.defaultView||u.parentWindow:window,s?(s=r,null!==(c=(c=n.relatedTarget||n.toElement)?Qr(c):null)&&(c!==(f=Xe(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(s=null,c=r),s!==c)){if(l=gn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(l=Tn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==s?u:Jr(s),p=null==c?u:Jr(c),(u=new l(m,h+"leave",s,n,o)).target=f,u.relatedTarget=p,m=null,Qr(o)===r&&((l=new l(d,h+"enter",c,n,o)).target=p,l.relatedTarget=f,m=l),f=m,s&&c)e:{for(d=c,h=0,p=l=s;p;p=Rr(p))h++;for(p=0,m=d;m;m=Rr(m))p++;for(;0<h-p;)l=Rr(l),h--;for(;0<p-h;)d=Rr(d),p--;for(;h--;){if(l===d||null!==d&&l===d.alternate)break e;l=Rr(l),d=Rr(d)}l=null}else l=null;null!==s&&Ir(i,u,s,l,!1),null!==c&&null!==f&&Ir(i,f,c,l,!0)}if("select"===(s=(u=r?Jr(r):window).nodeName&&u.nodeName.toLowerCase())||"input"===s&&"file"===u.type)var g=Xn;else if(Wn(u))if(Kn)g=ar;else{g=rr;var v=nr}else(s=u.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===u.type||"radio"===u.type)&&(g=or);switch(g&&(g=g(e,r))?Gn(i,g,n,o):(v&&v(e,u,r),"focusout"===e&&(v=u._wrapperState)&&v.controlled&&"number"===u.type&&oe(u,"number",u.value)),v=r?Jr(r):window,e){case"focusin":(Wn(v)||"true"===v.contentEditable)&&(hr=v,mr=r,gr=null);break;case"focusout":gr=mr=hr=null;break;case"mousedown":vr=!0;break;case"contextmenu":case"mouseup":case"dragend":vr=!1,yr(i,n,o);break;case"selectionchange":if(pr)break;case"keydown":case"keyup":yr(i,n,o)}var y;if(Rn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else zn?Fn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Ln&&"ko"!==n.locale&&(zn||"onCompositionStart"!==b?"onCompositionEnd"===b&&zn&&(y=nn()):(en="value"in(Jt=o)?Jt.value:Jt.textContent,zn=!0)),0<(v=Pr(r,b)).length&&(b=new _n(b,e,null,n,o),i.push({event:b,listeners:v}),y?b.data=y:null!==(y=Bn(n))&&(b.data=y))),(y=Dn?function(e,t){switch(e){case"compositionend":return Bn(t);case"keypress":return 32!==t.which?null:(Un=!0,Mn);case"textInput":return(e=t.data)===Mn&&Un?null:e;default:return null}}(e,n):function(e,t){if(zn)return"compositionend"===e||!Rn&&Fn(e,t)?(e=nn(),tn=en=Jt=null,zn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ln&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&(0<(r=Pr(r,"onBeforeInput")).length&&(o=new _n("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=y))}Sr(i,t)}))}function Nr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Pr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Fe(e,n))&&r.unshift(Nr(e,a,o)),null!=(a=Fe(e,t))&&r.push(Nr(e,a,o))),e=e.return}return r}function Rr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Ir(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var u=n,s=u.alternate,c=u.stateNode;if(null!==s&&s===r)break;5===u.tag&&null!==c&&(u=c,o?null!=(s=Fe(n,a))&&i.unshift(Nr(n,s,u)):o||null!=(s=Fe(n,a))&&i.push(Nr(n,s,u))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function Dr(){}var Lr=null,Mr=null;function Ur(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Fr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Br="function"==typeof setTimeout?setTimeout:void 0,zr="function"==typeof clearTimeout?clearTimeout:void 0;function Hr(e){1===e.nodeType?e.textContent="":9===e.nodeType&&(null!=(e=e.body)&&(e.textContent=""))}function Wr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Gr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var qr=0;var $r=Math.random().toString(36).slice(2),Yr="__reactFiber$"+$r,Vr="__reactProps$"+$r,Xr="__reactContainer$"+$r,Kr="__reactEvents$"+$r;function Qr(e){var t=e[Yr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Xr]||n[Yr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Gr(e);null!==e;){if(n=e[Yr])return n;e=Gr(e)}return t}n=(e=n).parentNode}return null}function Zr(e){return!(e=e[Yr]||e[Xr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Jr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function eo(e){return e[Vr]||null}function to(e){var t=e[Kr];return void 0===t&&(t=e[Kr]=new Set),t}var no=[],ro=-1;function oo(e){return{current:e}}function ao(e){0>ro||(e.current=no[ro],no[ro]=null,ro--)}function io(e,t){ro++,no[ro]=e.current,e.current=t}var uo={},so=oo(uo),co=oo(!1),lo=uo;function fo(e,t){var n=e.type.contextTypes;if(!n)return uo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function po(e){return null!=(e=e.childContextTypes)}function ho(){ao(co),ao(so)}function mo(e,t,n){if(so.current!==uo)throw Error(i(168));io(so,t),io(co,n)}function go(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,Y(t)||"Unknown",a));return o({},n,r)}function vo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||uo,lo=so.current,io(so,e),io(co,co.current),!0}function yo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=go(e,t,lo),r.__reactInternalMemoizedMergedChildContext=e,ao(co),ao(so),io(so,e)):ao(co),io(co,n)}var bo=null,wo=null,_o=a.unstable_runWithPriority,Oo=a.unstable_scheduleCallback,Eo=a.unstable_cancelCallback,So=a.unstable_shouldYield,xo=a.unstable_requestPaint,jo=a.unstable_now,ko=a.unstable_getCurrentPriorityLevel,To=a.unstable_ImmediatePriority,Co=a.unstable_UserBlockingPriority,Ao=a.unstable_NormalPriority,No=a.unstable_LowPriority,Po=a.unstable_IdlePriority,Ro={},Io=void 0!==xo?xo:function(){},Do=null,Lo=null,Mo=!1,Uo=jo(),Fo=1e4>Uo?jo:function(){return jo()-Uo};function Bo(){switch(ko()){case To:return 99;case Co:return 98;case Ao:return 97;case No:return 96;case Po:return 95;default:throw Error(i(332))}}function zo(e){switch(e){case 99:return To;case 98:return Co;case 97:return Ao;case 96:return No;case 95:return Po;default:throw Error(i(332))}}function Ho(e,t){return e=zo(e),_o(e,t)}function Wo(e,t,n){return e=zo(e),Oo(e,t,n)}function Go(){if(null!==Lo){var e=Lo;Lo=null,Eo(e)}qo()}function qo(){if(!Mo&&null!==Do){Mo=!0;var e=0;try{var t=Do;Ho(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Do=null}catch(t){throw null!==Do&&(Do=Do.slice(e+1)),Oo(To,Go),t}finally{Mo=!1}}}var $o=_.ReactCurrentBatchConfig;function Yo(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Vo=oo(null),Xo=null,Ko=null,Qo=null;function Zo(){Qo=Ko=Xo=null}function Jo(e){var t=Vo.current;ao(Vo),e.type._context._currentValue=t}function ea(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ta(e,t){Xo=e,Qo=Ko=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Pi=!0),e.firstContext=null)}function na(e,t){if(Qo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Qo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Ko){if(null===Xo)throw Error(i(308));Ko=t,Xo.dependencies={lanes:0,firstContext:t,responders:null}}else Ko=Ko.next=t;return e._currentValue}var ra=!1;function oa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function aa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ia(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ua(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function sa(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ca(e,t,n,r){var a=e.updateQueue;ra=!1;var i=a.firstBaseUpdate,u=a.lastBaseUpdate,s=a.shared.pending;if(null!==s){a.shared.pending=null;var c=s,l=c.next;c.next=null,null===u?i=l:u.next=l,u=c;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==u&&(null===d?f.firstBaseUpdate=l:d.next=l,f.lastBaseUpdate=c)}}if(null!==i){for(d=a.baseState,u=0,f=l=c=null;;){s=i.lane;var p=i.eventTime;if((r&s)===s){null!==f&&(f=f.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,m=i;switch(s=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,s);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(s="function"==typeof(h=m.payload)?h.call(p,d,s):h))break e;d=o({},d,s);break e;case 2:ra=!0}}null!==i.callback&&(e.flags|=32,null===(s=a.effects)?a.effects=[i]:s.push(i))}else p={eventTime:p,lane:s,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(l=f=p,c=d):f=f.next=p,u|=s;if(null===(i=i.next)){if(null===(s=a.shared.pending))break;i=s.next,s.next=null,a.lastBaseUpdate=s,a.shared.pending=null}}null===f&&(c=d),a.baseState=c,a.firstBaseUpdate=l,a.lastBaseUpdate=f,Iu|=u,e.lanes=u,e.memoizedState=d}}function la(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var fa=(new r.Component).refs;function da(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var pa={isMounted:function(e){return!!(e=e._reactInternals)&&Xe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=as(),o=is(e),a=ia(r,o);a.payload=t,null!=n&&(a.callback=n),ua(e,a),us(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=as(),o=is(e),a=ia(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),ua(e,a),us(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=as(),r=is(e),o=ia(n,r);o.tag=2,null!=t&&(o.callback=t),ua(e,o),us(e,r,n)}};function ha(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!t.prototype||!t.prototype.isPureReactComponent||(!sr(n,r)||!sr(o,a))}function ma(e,t,n){var r=!1,o=uo,a=t.contextType;return"object"==typeof a&&null!==a?a=na(a):(o=po(t)?lo:so.current,a=(r=null!=(r=t.contextTypes))?fo(e,o):uo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=pa,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function ga(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&pa.enqueueReplaceState(t,t.state,null)}function va(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=fa,oa(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=na(a):(a=po(t)?lo:so.current,o.context=fo(e,a)),ca(e,n,o,r),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(da(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&pa.enqueueReplaceState(o,o.state,null),ca(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var ya=Array.isArray;function ba(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===fa&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function wa(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function _a(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Fs(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function u(t){return e&&null===t.alternate&&(t.flags=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Ws(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=ba(e,t,n),r.return=e,r):((r=Bs(n.type,n.key,n.props,null,e.mode,r)).ref=ba(e,t,n),r.return=e,r)}function l(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Gs(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=zs(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Ws(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case O:return(n=Bs(t.type,t.key,t.props,null,e.mode,n)).ref=ba(e,null,t),n.return=e,n;case E:return(t=Gs(t,e.mode,n)).return=e,t}if(ya(t)||H(t))return(t=zs(t,e.mode,n,null)).return=e,t;wa(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case O:return n.key===o?n.type===S?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case E:return n.key===o?l(e,t,n,r):null}if(ya(n)||H(n))return null!==o?null:f(e,t,n,r,null);wa(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case O:return e=e.get(null===r.key?n:r.key)||null,r.type===S?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case E:return l(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(ya(r)||H(r))return f(t,e=e.get(n)||null,r,o,null);wa(t,r)}return null}function m(o,i,u,s){for(var c=null,l=null,f=i,m=i=0,g=null;null!==f&&m<u.length;m++){f.index>m?(g=f,f=null):g=f.sibling;var v=p(o,f,u[m],s);if(null===v){null===f&&(f=g);break}e&&f&&null===v.alternate&&t(o,f),i=a(v,i,m),null===l?c=v:l.sibling=v,l=v,f=g}if(m===u.length)return n(o,f),c;if(null===f){for(;m<u.length;m++)null!==(f=d(o,u[m],s))&&(i=a(f,i,m),null===l?c=f:l.sibling=f,l=f);return c}for(f=r(o,f);m<u.length;m++)null!==(g=h(f,o,m,u[m],s))&&(e&&null!==g.alternate&&f.delete(null===g.key?m:g.key),i=a(g,i,m),null===l?c=g:l.sibling=g,l=g);return e&&f.forEach((function(e){return t(o,e)})),c}function g(o,u,s,c){var l=H(s);if("function"!=typeof l)throw Error(i(150));if(null==(s=l.call(s)))throw Error(i(151));for(var f=l=null,m=u,g=u=0,v=null,y=s.next();null!==m&&!y.done;g++,y=s.next()){m.index>g?(v=m,m=null):v=m.sibling;var b=p(o,m,y.value,c);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(o,m),u=a(b,u,g),null===f?l=b:f.sibling=b,f=b,m=v}if(y.done)return n(o,m),l;if(null===m){for(;!y.done;g++,y=s.next())null!==(y=d(o,y.value,c))&&(u=a(y,u,g),null===f?l=y:f.sibling=y,f=y);return l}for(m=r(o,m);!y.done;g++,y=s.next())null!==(y=h(m,o,g,y.value,c))&&(e&&null!==y.alternate&&m.delete(null===y.key?g:y.key),u=a(y,u,g),null===f?l=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(o,e)})),l}return function(e,r,a,s){var c="object"==typeof a&&null!==a&&a.type===S&&null===a.key;c&&(a=a.props.children);var l="object"==typeof a&&null!==a;if(l)switch(a.$$typeof){case O:e:{for(l=a.key,c=r;null!==c;){if(c.key===l){switch(c.tag){case 7:if(a.type===S){n(e,c.sibling),(r=o(c,a.props.children)).return=e,e=r;break e}break;default:if(c.elementType===a.type){n(e,c.sibling),(r=o(c,a.props)).ref=ba(e,c,a),r.return=e,e=r;break e}}n(e,c);break}t(e,c),c=c.sibling}a.type===S?((r=zs(a.props.children,e.mode,s,a.key)).return=e,e=r):((s=Bs(a.type,a.key,a.props,null,e.mode,s)).ref=ba(e,r,a),s.return=e,e=s)}return u(e);case E:e:{for(c=a.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Gs(a,e.mode,s)).return=e,e=r}return u(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Ws(a,e.mode,s)).return=e,e=r),u(e);if(ya(a))return m(e,r,a,s);if(H(a))return g(e,r,a,s);if(l&&wa(e,a),void 0===a&&!c)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,Y(e.type)||"Component"))}return n(e,r)}}var Oa=_a(!0),Ea=_a(!1),Sa={},xa=oo(Sa),ja=oo(Sa),ka=oo(Sa);function Ta(e){if(e===Sa)throw Error(i(174));return e}function Ca(e,t){switch(io(ka,t),io(ja,e),io(xa,Sa),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:he(null,"");break;default:t=he(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ao(xa),io(xa,t)}function Aa(){ao(xa),ao(ja),ao(ka)}function Na(e){Ta(ka.current);var t=Ta(xa.current),n=he(t,e.type);t!==n&&(io(ja,e),io(xa,n))}function Pa(e){ja.current===e&&(ao(xa),ao(ja))}var Ra=oo(0);function Ia(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Da=null,La=null,Ma=!1;function Ua(e,t){var n=Ms(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Fa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ba(e){if(Ma){var t=La;if(t){var n=t;if(!Fa(e,t)){if(!(t=Wr(n.nextSibling))||!Fa(e,t))return e.flags=-1025&e.flags|2,Ma=!1,void(Da=e);Ua(Da,n)}Da=e,La=Wr(t.firstChild)}else e.flags=-1025&e.flags|2,Ma=!1,Da=e}}function za(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Da=e}function Ha(e){if(e!==Da)return!1;if(!Ma)return za(e),Ma=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Fr(t,e.memoizedProps))for(t=La;t;)Ua(e,t),t=Wr(t.nextSibling);if(za(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){La=Wr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}La=null}}else La=Da?Wr(e.stateNode.nextSibling):null;return!0}function Wa(){La=Da=null,Ma=!1}var Ga=[];function qa(){for(var e=0;e<Ga.length;e++)Ga[e]._workInProgressVersionPrimary=null;Ga.length=0}var $a=_.ReactCurrentDispatcher,Ya=_.ReactCurrentBatchConfig,Va=0,Xa=null,Ka=null,Qa=null,Za=!1,Ja=!1;function ei(){throw Error(i(321))}function ti(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ir(e[n],t[n]))return!1;return!0}function ni(e,t,n,r,o,a){if(Va=a,Xa=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,$a.current=null===e||null===e.memoizedState?Ti:Ci,e=n(r,o),Ja){a=0;do{if(Ja=!1,!(25>a))throw Error(i(301));a+=1,Qa=Ka=null,t.updateQueue=null,$a.current=Ai,e=n(r,o)}while(Ja)}if($a.current=ki,t=null!==Ka&&null!==Ka.next,Va=0,Qa=Ka=Xa=null,Za=!1,t)throw Error(i(300));return e}function ri(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Qa?Xa.memoizedState=Qa=e:Qa=Qa.next=e,Qa}function oi(){if(null===Ka){var e=Xa.alternate;e=null!==e?e.memoizedState:null}else e=Ka.next;var t=null===Qa?Xa.memoizedState:Qa.next;if(null!==t)Qa=t,Ka=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Ka=e).memoizedState,baseState:Ka.baseState,baseQueue:Ka.baseQueue,queue:Ka.queue,next:null},null===Qa?Xa.memoizedState=Qa=e:Qa=Qa.next=e}return Qa}function ai(e,t){return"function"==typeof t?t(e):t}function ii(e){var t=oi(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=Ka,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var u=o.next;o.next=a.next,a.next=u}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var s=u=a=null,c=o;do{var l=c.lane;if((Va&l)===l)null!==s&&(s=s.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),r=c.eagerReducer===e?c.eagerState:e(r,c.action);else{var f={lane:l,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===s?(u=s=f,a=r):s=s.next=f,Xa.lanes|=l,Iu|=l}c=c.next}while(null!==c&&c!==o);null===s?a=r:s.next=u,ir(r,t.memoizedState)||(Pi=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=s,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function ui(e){var t=oi(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var u=o=o.next;do{a=e(a,u.action),u=u.next}while(u!==o);ir(a,t.memoizedState)||(Pi=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function si(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Va&e)===e)&&(t._workInProgressVersionPrimary=r,Ga.push(t))),e)return n(t._source);throw Ga.push(t),Error(i(350))}function ci(e,t,n,r){var o=ju;if(null===o)throw Error(i(349));var a=t._getVersion,u=a(t._source),s=$a.current,c=s.useState((function(){return si(o,t,n)})),l=c[1],f=c[0];c=Qa;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var g=Xa;return e.memoizedState={refs:p,source:t,subscribe:r},s.useEffect((function(){p.getSnapshot=n,p.setSnapshot=l;var e=a(t._source);if(!ir(u,e)){e=n(t._source),ir(f,e)||(l(e),e=is(g),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,i=e;0<i;){var s=31-Wt(i),c=1<<s;r[s]|=e,i&=~c}}}),[n,t,r]),s.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=is(g);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ir(h,n)&&ir(m,t)&&ir(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ai,lastRenderedState:f}).dispatch=l=ji.bind(null,Xa,e),c.queue=e,c.baseQueue=null,f=si(o,t,n),c.memoizedState=c.baseState=f),f}function li(e,t,n){return ci(oi(),e,t,n)}function fi(e){var t=ri();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ai,lastRenderedState:e}).dispatch=ji.bind(null,Xa,e),[t.memoizedState,e]}function di(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Xa.updateQueue)?(t={lastEffect:null},Xa.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function pi(e){return e={current:e},ri().memoizedState=e}function hi(){return oi().memoizedState}function mi(e,t,n,r){var o=ri();Xa.flags|=e,o.memoizedState=di(1|t,n,void 0,void 0===r?null:r)}function gi(e,t,n,r){var o=oi();r=void 0===r?null:r;var a=void 0;if(null!==Ka){var i=Ka.memoizedState;if(a=i.destroy,null!==r&&ti(r,i.deps))return void di(t,n,a,r)}Xa.flags|=e,o.memoizedState=di(1|t,n,a,r)}function vi(e,t){return mi(516,4,e,t)}function yi(e,t){return gi(516,4,e,t)}function bi(e,t){return gi(4,2,e,t)}function wi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function _i(e,t,n){return n=null!=n?n.concat([e]):null,gi(4,2,wi.bind(null,t,e),n)}function Oi(){}function Ei(e,t){var n=oi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ti(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Si(e,t){var n=oi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ti(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function xi(e,t){var n=Bo();Ho(98>n?98:n,(function(){e(!0)})),Ho(97<n?97:n,(function(){var n=Ya.transition;Ya.transition=1;try{e(!1),t()}finally{Ya.transition=n}}))}function ji(e,t,n){var r=as(),o=is(e),a={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Xa||null!==i&&i===Xa)Ja=Za=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var u=t.lastRenderedState,s=i(u,n);if(a.eagerReducer=i,a.eagerState=s,ir(s,u))return}catch(e){}us(e,o,r)}}var ki={readContext:na,useCallback:ei,useContext:ei,useEffect:ei,useImperativeHandle:ei,useLayoutEffect:ei,useMemo:ei,useReducer:ei,useRef:ei,useState:ei,useDebugValue:ei,useDeferredValue:ei,useTransition:ei,useMutableSource:ei,useOpaqueIdentifier:ei,unstable_isNewReconciler:!1},Ti={readContext:na,useCallback:function(e,t){return ri().memoizedState=[e,void 0===t?null:t],e},useContext:na,useEffect:vi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,mi(4,2,wi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return mi(4,2,e,t)},useMemo:function(e,t){var n=ri();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ri();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ji.bind(null,Xa,e),[r.memoizedState,e]},useRef:pi,useState:fi,useDebugValue:Oi,useDeferredValue:function(e){var t=fi(e),n=t[0],r=t[1];return vi((function(){var t=Ya.transition;Ya.transition=1;try{r(e)}finally{Ya.transition=t}}),[e]),n},useTransition:function(){var e=fi(!1),t=e[0];return pi(e=xi.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=ri();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},ci(r,e,t,n)},useOpaqueIdentifier:function(){if(Ma){var e=!1,t=function(e){return{$$typeof:D,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(qr++).toString(36))),Error(i(355))})),n=fi(t)[1];return 0==(2&Xa.mode)&&(Xa.flags|=516,di(5,(function(){n("r:"+(qr++).toString(36))}),void 0,null)),t}return fi(t="r:"+(qr++).toString(36)),t},unstable_isNewReconciler:!1},Ci={readContext:na,useCallback:Ei,useContext:na,useEffect:yi,useImperativeHandle:_i,useLayoutEffect:bi,useMemo:Si,useReducer:ii,useRef:hi,useState:function(){return ii(ai)},useDebugValue:Oi,useDeferredValue:function(e){var t=ii(ai),n=t[0],r=t[1];return yi((function(){var t=Ya.transition;Ya.transition=1;try{r(e)}finally{Ya.transition=t}}),[e]),n},useTransition:function(){var e=ii(ai)[0];return[hi().current,e]},useMutableSource:li,useOpaqueIdentifier:function(){return ii(ai)[0]},unstable_isNewReconciler:!1},Ai={readContext:na,useCallback:Ei,useContext:na,useEffect:yi,useImperativeHandle:_i,useLayoutEffect:bi,useMemo:Si,useReducer:ui,useRef:hi,useState:function(){return ui(ai)},useDebugValue:Oi,useDeferredValue:function(e){var t=ui(ai),n=t[0],r=t[1];return yi((function(){var t=Ya.transition;Ya.transition=1;try{r(e)}finally{Ya.transition=t}}),[e]),n},useTransition:function(){var e=ui(ai)[0];return[hi().current,e]},useMutableSource:li,useOpaqueIdentifier:function(){return ui(ai)[0]},unstable_isNewReconciler:!1},Ni=_.ReactCurrentOwner,Pi=!1;function Ri(e,t,n,r){t.child=null===e?Ea(t,null,n,r):Oa(t,e.child,n,r)}function Ii(e,t,n,r,o){n=n.render;var a=t.ref;return ta(t,o),r=ni(e,t,n,r,a,o),null===e||Pi?(t.flags|=1,Ri(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,eu(e,t,o))}function Di(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||Us(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Bs(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Li(e,t,i,r,o,a))}return i=e.child,0==(o&a)&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:sr)(o,r)&&e.ref===t.ref)?eu(e,t,a):(t.flags|=1,(e=Fs(i,r)).ref=t.ref,e.return=t,t.child=e)}function Li(e,t,n,r,o,a){if(null!==e&&sr(e.memoizedProps,r)&&e.ref===t.ref){if(Pi=!1,0==(a&o))return t.lanes=e.lanes,eu(e,t,a);0!=(16384&e.flags)&&(Pi=!0)}return Fi(e,t,n,r,a)}function Mi(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},ms(t,n);else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},ms(t,e),null;t.memoizedState={baseLanes:0},ms(t,null!==a?a.baseLanes:n)}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,ms(t,r);return Ri(e,t,o,n),t.child}function Ui(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Fi(e,t,n,r,o){var a=po(n)?lo:so.current;return a=fo(t,a),ta(t,o),n=ni(e,t,n,r,a,o),null===e||Pi?(t.flags|=1,Ri(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,eu(e,t,o))}function Bi(e,t,n,r,o){if(po(n)){var a=!0;vo(t)}else a=!1;if(ta(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ma(t,n,r),va(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,u=t.memoizedProps;i.props=u;var s=i.context,c=n.contextType;"object"==typeof c&&null!==c?c=na(c):c=fo(t,c=po(n)?lo:so.current);var l=n.getDerivedStateFromProps,f="function"==typeof l||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(u!==r||s!==c)&&ga(t,i,r,c),ra=!1;var d=t.memoizedState;i.state=d,ca(t,r,i,o),s=t.memoizedState,u!==r||d!==s||co.current||ra?("function"==typeof l&&(da(t,n,l,r),s=t.memoizedState),(u=ra||ha(t,n,u,r,d,s,c))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=s),i.props=r,i.state=s,i.context=c,r=u):("function"==typeof i.componentDidMount&&(t.flags|=4),r=!1)}else{i=t.stateNode,aa(e,t),u=t.memoizedProps,c=t.type===t.elementType?u:Yo(t.type,u),i.props=c,f=t.pendingProps,d=i.context,"object"==typeof(s=n.contextType)&&null!==s?s=na(s):s=fo(t,s=po(n)?lo:so.current);var p=n.getDerivedStateFromProps;(l="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(u!==f||d!==s)&&ga(t,i,r,s),ra=!1,d=t.memoizedState,i.state=d,ca(t,r,i,o);var h=t.memoizedState;u!==f||d!==h||co.current||ra?("function"==typeof p&&(da(t,n,p,r),h=t.memoizedState),(c=ra||ha(t,n,c,r,d,h,s))?(l||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,s)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=s,r=c):("function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return zi(e,t,n,r,a,o)}function zi(e,t,n,r,o,a){Ui(e,t);var i=0!=(64&t.flags);if(!r&&!i)return o&&yo(t,n,!1),eu(e,t,a);r=t.stateNode,Ni.current=t;var u=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Oa(t,e.child,null,a),t.child=Oa(t,null,u,a)):Ri(e,t,u,a),t.memoizedState=r.state,o&&yo(t,n,!0),t.child}function Hi(e){var t=e.stateNode;t.pendingContext?mo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&mo(0,t.context,!1),Ca(e,t.containerInfo)}var Wi,Gi,qi,$i={dehydrated:null,retryLane:0};function Yi(e,t,n){var r,o=t.pendingProps,a=Ra.current,i=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),io(Ra,1&a),null===e?(void 0!==o.fallback&&Ba(t),e=o.children,a=o.fallback,i?(e=Vi(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=$i,e):"number"==typeof o.unstable_expectedLoadTime?(e=Vi(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=$i,t.lanes=33554432,e):((n=Hs({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(o=Ki(e,t,o.children,o.fallback,n),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:n}:{baseLanes:a.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=$i,o):(n=Xi(e,t,o.children,n),t.memoizedState=null,n))}function Vi(e,t,n,r){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=Hs(t,o,0,null),n=zs(n,o,r,null),a.return=e,n.return=e,a.sibling=n,e.child=a,n}function Xi(e,t,n,r){var o=e.child;return e=o.sibling,n=Fs(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}function Ki(e,t,n,r,o){var a=t.mode,i=e.child;e=i.sibling;var u={mode:"hidden",children:n};return 0==(2&a)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=u,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Fs(i,u),null!==e?r=Fs(e,r):(r=zs(r,a,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function Qi(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ea(e.return,t)}function Zi(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o,i.lastEffect=a)}function Ji(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Ri(e,t,r.children,n),0!=(2&(r=Ra.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Qi(e,n);else if(19===e.tag)Qi(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(io(Ra,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Ia(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Zi(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ia(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Zi(t,!0,n,null,a,t.lastEffect);break;case"together":Zi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function eu(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Iu|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Fs(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Fs(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function tu(e,t){if(!Ma)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function nu(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return po(t.type)&&ho(),null;case 3:return Aa(),ao(co),ao(so),qa(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Ha(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Pa(t);var a=Ta(ka.current);if(n=t.type,null!==e&&null!=t.stateNode)Gi(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=Ta(xa.current),Ha(t)){r=t.stateNode,n=t.type;var u=t.memoizedProps;switch(r[Yr]=t,r[Vr]=u,n){case"dialog":xr("cancel",r),xr("close",r);break;case"iframe":case"object":case"embed":xr("load",r);break;case"video":case"audio":for(e=0;e<_r.length;e++)xr(_r[e],r);break;case"source":xr("error",r);break;case"img":case"image":case"link":xr("error",r),xr("load",r);break;case"details":xr("toggle",r);break;case"input":ee(r,u),xr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!u.multiple},xr("invalid",r);break;case"textarea":se(r,u),xr("invalid",r)}for(var c in Ee(n,u),e=null,u)u.hasOwnProperty(c)&&(a=u[c],"children"===c?"string"==typeof a?r.textContent!==a&&(e=["children",a]):"number"==typeof a&&r.textContent!==""+a&&(e=["children",""+a]):s.hasOwnProperty(c)&&null!=a&&"onScroll"===c&&xr("scroll",r));switch(n){case"input":K(r),re(r,u,!0);break;case"textarea":K(r),le(r);break;case"select":case"option":break;default:"function"==typeof u.onClick&&(r.onclick=Dr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(c=9===a.nodeType?a:a.ownerDocument,e===fe&&(e=pe(n)),e===fe?"script"===n?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=c.createElement(n,{is:r.is}):(e=c.createElement(n),"select"===n&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,n),e[Yr]=t,e[Vr]=r,Wi(e,t),t.stateNode=e,c=Se(n,r),n){case"dialog":xr("cancel",e),xr("close",e),a=r;break;case"iframe":case"object":case"embed":xr("load",e),a=r;break;case"video":case"audio":for(a=0;a<_r.length;a++)xr(_r[a],e);a=r;break;case"source":xr("error",e),a=r;break;case"img":case"image":case"link":xr("error",e),xr("load",e),a=r;break;case"details":xr("toggle",e),a=r;break;case"input":ee(e,r),a=J(e,r),xr("invalid",e);break;case"option":a=ae(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=o({},r,{value:void 0}),xr("invalid",e);break;case"textarea":se(e,r),a=ue(e,r),xr("invalid",e);break;default:a=r}Ee(n,a);var l=a;for(u in l)if(l.hasOwnProperty(u)){var f=l[u];"style"===u?_e(e,f):"dangerouslySetInnerHTML"===u?null!=(f=f?f.__html:void 0)&&ge(e,f):"children"===u?"string"==typeof f?("textarea"!==n||""!==f)&&ve(e,f):"number"==typeof f&&ve(e,""+f):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(s.hasOwnProperty(u)?null!=f&&"onScroll"===u&&xr("scroll",e):null!=f&&w(e,u,f,c))}switch(n){case"input":K(e),re(e,r,!1);break;case"textarea":K(e),le(e);break;case"option":null!=r.value&&e.setAttribute("value",""+V(r.value));break;case"select":e.multiple=!!r.multiple,null!=(u=r.value)?ie(e,!!r.multiple,u,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Dr)}Ur(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)qi(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=Ta(ka.current),Ta(xa.current),Ha(t)?(r=t.stateNode,n=t.memoizedProps,r[Yr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Yr]=t,t.stateNode=r)}return null;case 13:return ao(Ra),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Ha(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ra.current)?0===Nu&&(Nu=3):(0!==Nu&&3!==Nu||(Nu=4),null===ju||0==(134217727&Iu)&&0==(134217727&Du)||fs(ju,Tu))),(r||n)&&(t.flags|=4),null);case 4:return Aa(),null===e&&kr(t.stateNode.containerInfo),null;case 10:return Jo(t),null;case 17:return po(t.type)&&ho(),null;case 19:if(ao(Ra),null===(r=t.memoizedState))return null;if(u=0!=(64&t.flags),null===(c=r.rendering))if(u)tu(r,!1);else{if(0!==Nu||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(c=Ia(e))){for(t.flags|=64,tu(r,!1),null!==(u=c.updateQueue)&&(t.updateQueue=u,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(u=n).flags&=2,u.nextEffect=null,u.firstEffect=null,u.lastEffect=null,null===(c=u.alternate)?(u.childLanes=0,u.lanes=e,u.child=null,u.memoizedProps=null,u.memoizedState=null,u.updateQueue=null,u.dependencies=null,u.stateNode=null):(u.childLanes=c.childLanes,u.lanes=c.lanes,u.child=c.child,u.memoizedProps=c.memoizedProps,u.memoizedState=c.memoizedState,u.updateQueue=c.updateQueue,u.type=c.type,e=c.dependencies,u.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return io(Ra,1&Ra.current|2),t.child}e=e.sibling}null!==r.tail&&Fo()>Fu&&(t.flags|=64,u=!0,tu(r,!1),t.lanes=33554432)}else{if(!u)if(null!==(e=Ia(c))){if(t.flags|=64,u=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),tu(r,!0),null===r.tail&&"hidden"===r.tailMode&&!c.alternate&&!Ma)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Fo()-r.renderingStartTime>Fu&&1073741824!==n&&(t.flags|=64,u=!0,tu(r,!1),t.lanes=33554432);r.isBackwards?(c.sibling=t.child,t.child=c):(null!==(n=r.last)?n.sibling=c:t.child=c,r.last=c)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Fo(),n.sibling=null,t=Ra.current,io(Ra,u?1&t|2:1&t),n):null;case 23:case 24:return gs(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function ru(e){switch(e.tag){case 1:po(e.type)&&ho();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Aa(),ao(co),ao(so),qa(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Pa(e),null;case 13:return ao(Ra),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return ao(Ra),null;case 4:return Aa(),null;case 10:return Jo(e),null;case 23:case 24:return gs(),null;default:return null}}function ou(e,t){try{var n="",r=t;do{n+=$(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function au(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Wi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Gi=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Ta(xa.current);var i,u=null;switch(n){case"input":a=J(e,a),r=J(e,r),u=[];break;case"option":a=ae(e,a),r=ae(e,r),u=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),u=[];break;case"textarea":a=ue(e,a),r=ue(e,r),u=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Dr)}for(f in Ee(n,r),n=null,a)if(!r.hasOwnProperty(f)&&a.hasOwnProperty(f)&&null!=a[f])if("style"===f){var c=a[f];for(i in c)c.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(s.hasOwnProperty(f)?u||(u=[]):(u=u||[]).push(f,null));for(f in r){var l=r[f];if(c=null!=a?a[f]:void 0,r.hasOwnProperty(f)&&l!==c&&(null!=l||null!=c))if("style"===f)if(c){for(i in c)!c.hasOwnProperty(i)||l&&l.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in l)l.hasOwnProperty(i)&&c[i]!==l[i]&&(n||(n={}),n[i]=l[i])}else n||(u||(u=[]),u.push(f,n)),n=l;else"dangerouslySetInnerHTML"===f?(l=l?l.__html:void 0,c=c?c.__html:void 0,null!=l&&c!==l&&(u=u||[]).push(f,l)):"children"===f?"string"!=typeof l&&"number"!=typeof l||(u=u||[]).push(f,""+l):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(s.hasOwnProperty(f)?(null!=l&&"onScroll"===f&&xr("scroll",e),u||c===l||(u=[])):"object"==typeof l&&null!==l&&l.$$typeof===D?l.toString():(u=u||[]).push(f,l))}n&&(u=u||[]).push("style",n);var f=u;(t.updateQueue=f)&&(t.flags|=4)}},qi=function(e,t,n,r){n!==r&&(t.flags|=4)};var iu="function"==typeof WeakMap?WeakMap:Map;function uu(e,t,n){(n=ia(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wu||(Wu=!0,Gu=r),au(0,t)},n}function su(e,t,n){(n=ia(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return au(0,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===qu?qu=new Set([this]):qu.add(this),au(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var cu="function"==typeof WeakSet?WeakSet:Set;function lu(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Rs(e,t)}else t.current=null}function fu(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Yo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Hr(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(i(163))}function du(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(As(n,e),Cs(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Yo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&la(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}la(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Ur(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&_t(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(i(163))}function pu(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=we("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function hu(e,t){if(wo&&"function"==typeof wo.onCommitFiberUnmount)try{wo.onCommitFiberUnmount(bo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))As(t,n);else{r=t;try{o()}catch(e){Rs(r,e)}}n=n.next}while(n!==e)}break;case 1:if(lu(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Rs(t,e)}break;case 5:lu(t);break;case 4:yu(e,t)}}function mu(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function gu(e){return 5===e.tag||3===e.tag||4===e.tag}function vu(e){e:{for(var t=e.return;null!==t;){if(gu(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.flags&&(ve(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||gu(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?function e(t,n,r){var o=t.tag,a=5===o||6===o;if(a)t=a?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=Dr));else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var o=t.tag,a=5===o||6===o;if(a)t=a?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function yu(e,t){for(var n,r,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(n=a.stateNode,a.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var u=e,s=o,c=s;;)if(hu(u,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===s)break e;for(;null===c.sibling;){if(null===c.return||c.return===s)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}r?(u=n,s=o.stateNode,8===u.nodeType?u.parentNode.removeChild(s):u.removeChild(s)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(hu(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function bu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Vr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Se(e,o),t=Se(e,r),o=0;o<a.length;o+=2){var u=a[o],s=a[o+1];"style"===u?_e(n,s):"dangerouslySetInnerHTML"===u?ge(n,s):"children"===u?ve(n,s):w(n,u,s,t)}switch(e){case"input":ne(n,r);break;case"textarea":ce(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(a=r.value)?ie(n,!!r.multiple,a,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(n,!!r.multiple,r.defaultValue,!0):ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,_t(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Uu=Fo(),pu(t.child,!0)),void wu(t);case 19:return void wu(t);case 17:return;case 23:case 24:return void pu(t,null!==t.memoizedState)}throw Error(i(163))}function wu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new cu),t.forEach((function(t){var r=Ds.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function _u(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&(null!==(t=t.memoizedState)&&null===t.dehydrated)}var Ou=Math.ceil,Eu=_.ReactCurrentDispatcher,Su=_.ReactCurrentOwner,xu=0,ju=null,ku=null,Tu=0,Cu=0,Au=oo(0),Nu=0,Pu=null,Ru=0,Iu=0,Du=0,Lu=0,Mu=null,Uu=0,Fu=1/0;function Bu(){Fu=Fo()+500}var zu,Hu=null,Wu=!1,Gu=null,qu=null,$u=!1,Yu=null,Vu=90,Xu=[],Ku=[],Qu=null,Zu=0,Ju=null,es=-1,ts=0,ns=0,rs=null,os=!1;function as(){return 0!=(48&xu)?Fo():-1!==es?es:es=Fo()}function is(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Bo()?1:2;if(0===ts&&(ts=Ru),0!==$o.transition){0!==ns&&(ns=null!==Mu?Mu.pendingLanes:0),e=ts;var t=4186112&~ns;return 0===(t&=-t)&&(0===(t=(e=4186112&~e)&-e)&&(t=8192)),t}return e=Bo(),0!=(4&xu)&&98===e?e=Ft(12,ts):e=Ft(e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),ts),e}function us(e,t,n){if(50<Zu)throw Zu=0,Ju=null,Error(i(185));if(null===(e=ss(e,t)))return null;Ht(e,t,n),e===ju&&(Du|=t,4===Nu&&fs(e,Tu));var r=Bo();1===t?0!=(8&xu)&&0==(48&xu)?ds(e):(cs(e,n),0===xu&&(Bu(),Go())):(0==(4&xu)||98!==r&&99!==r||(null===Qu?Qu=new Set([e]):Qu.add(e)),cs(e,n)),Mu=e}function ss(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function cs(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,u=e.pendingLanes;0<u;){var s=31-Wt(u),c=1<<s,l=a[s];if(-1===l){if(0==(c&r)||0!=(c&o)){l=t,Lt(c);var f=Dt;a[s]=10<=f?l+250:6<=f?l+5e3:-1}}else l<=t&&(e.expiredLanes|=c);u&=~c}if(r=Mt(e,e===ju?Tu:0),t=Dt,0===r)null!==n&&(n!==Ro&&Eo(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Ro&&Eo(n)}15===t?(n=ds.bind(null,e),null===Do?(Do=[n],Lo=Oo(To,qo)):Do.push(n),n=Ro):14===t?n=Wo(99,ds.bind(null,e)):n=Wo(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),ls.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function ls(e){if(es=-1,ns=ts=0,0!=(48&xu))throw Error(i(327));var t=e.callbackNode;if(Ts()&&e.callbackNode!==t)return null;var n=Mt(e,e===ju?Tu:0);if(0===n)return null;var r=n,o=xu;xu|=16;var a=bs();for(ju===e&&Tu===r||(Bu(),vs(e,r));;)try{Os();break}catch(t){ys(e,t)}if(Zo(),Eu.current=a,xu=o,null!==ku?r=0:(ju=null,Tu=0,r=Nu),0!=(Ru&Du))vs(e,0);else if(0!==r){if(2===r&&(xu|=64,e.hydrate&&(e.hydrate=!1,Hr(e.containerInfo)),0!==(n=Ut(e))&&(r=ws(e,n))),1===r)throw t=Pu,vs(e,0),fs(e,n),cs(e,Fo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(i(345));case 2:xs(e);break;case 3:if(fs(e,n),(62914560&n)===n&&10<(r=Uu+500-Fo())){if(0!==Mt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){as(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Br(xs.bind(null,e),r);break}xs(e);break;case 4:if(fs(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var u=31-Wt(n);a=1<<u,(u=r[u])>o&&(o=u),n&=~a}if(n=o,10<(n=(120>(n=Fo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Ou(n/1960))-n)){e.timeoutHandle=Br(xs.bind(null,e),n);break}xs(e);break;case 5:xs(e);break;default:throw Error(i(329))}}return cs(e,Fo()),e.callbackNode===t?ls.bind(null,e):null}function fs(e,t){for(t&=~Lu,t&=~Du,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Wt(t),r=1<<n;e[n]=-1,t&=~r}}function ds(e){if(0!=(48&xu))throw Error(i(327));if(Ts(),e===ju&&0!=(e.expiredLanes&Tu)){var t=Tu,n=ws(e,t);0!=(Ru&Du)&&(n=ws(e,t=Mt(e,t)))}else n=ws(e,t=Mt(e,0));if(0!==e.tag&&2===n&&(xu|=64,e.hydrate&&(e.hydrate=!1,Hr(e.containerInfo)),0!==(t=Ut(e))&&(n=ws(e,t))),1===n)throw n=Pu,vs(e,0),fs(e,t),cs(e,Fo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,xs(e),cs(e,Fo()),null}function ps(e,t){var n=xu;xu|=1;try{return e(t)}finally{0===(xu=n)&&(Bu(),Go())}}function hs(e,t){var n=xu;xu&=-2,xu|=8;try{return e(t)}finally{0===(xu=n)&&(Bu(),Go())}}function ms(e,t){io(Au,Cu),Cu|=t,Ru|=t}function gs(){Cu=Au.current,ao(Au)}function vs(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,zr(n)),null!==ku)for(n=ku.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&ho();break;case 3:Aa(),ao(co),ao(so),qa();break;case 5:Pa(r);break;case 4:Aa();break;case 13:case 19:ao(Ra);break;case 10:Jo(r);break;case 23:case 24:gs()}n=n.return}ju=e,ku=Fs(e.current,null),Tu=Cu=Ru=t,Nu=0,Pu=null,Lu=Du=Iu=0}function ys(e,t){for(;;){var n=ku;try{if(Zo(),$a.current=ki,Za){for(var r=Xa.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Za=!1}if(Va=0,Qa=Ka=Xa=null,Ja=!1,Su.current=null,null===n||null===n.return){Nu=1,Pu=t,ku=null;break}e:{var a=e,i=n.return,u=n,s=t;if(t=Tu,u.flags|=2048,u.firstEffect=u.lastEffect=null,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s;if(0==(2&u.mode)){var l=u.alternate;l?(u.updateQueue=l.updateQueue,u.memoizedState=l.memoizedState,u.lanes=l.lanes):(u.updateQueue=null,u.memoizedState=null)}var f=0!=(1&Ra.current),d=i;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(p){var g=d.updateQueue;if(null===g){var v=new Set;v.add(c),d.updateQueue=v}else g.add(c);if(0==(2&d.mode)){if(d.flags|=64,u.flags|=16384,u.flags&=-2981,1===u.tag)if(null===u.alternate)u.tag=17;else{var y=ia(-1,1);y.tag=2,ua(u,y)}u.lanes|=1;break e}s=void 0,u=t;var b=a.pingCache;if(null===b?(b=a.pingCache=new iu,s=new Set,b.set(c,s)):void 0===(s=b.get(c))&&(s=new Set,b.set(c,s)),!s.has(u)){s.add(u);var w=Is.bind(null,a,c,u);c.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);s=Error((Y(u.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Nu&&(Nu=2),s=ou(s,u),d=i;do{switch(d.tag){case 3:a=s,d.flags|=4096,t&=-t,d.lanes|=t,sa(d,uu(0,a,t));break e;case 1:a=s;var _=d.type,O=d.stateNode;if(0==(64&d.flags)&&("function"==typeof _.getDerivedStateFromError||null!==O&&"function"==typeof O.componentDidCatch&&(null===qu||!qu.has(O)))){d.flags|=4096,t&=-t,d.lanes|=t,sa(d,su(d,a,t));break e}}d=d.return}while(null!==d)}Ss(n)}catch(e){t=e,ku===n&&null!==n&&(ku=n=n.return);continue}break}}function bs(){var e=Eu.current;return Eu.current=ki,null===e?ki:e}function ws(e,t){var n=xu;xu|=16;var r=bs();for(ju===e&&Tu===t||vs(e,t);;)try{_s();break}catch(t){ys(e,t)}if(Zo(),xu=n,Eu.current=r,null!==ku)throw Error(i(261));return ju=null,Tu=0,Nu}function _s(){for(;null!==ku;)Es(ku)}function Os(){for(;null!==ku&&!So();)Es(ku)}function Es(e){var t=zu(e.alternate,e,Cu);e.memoizedProps=e.pendingProps,null===t?Ss(e):ku=t,Su.current=null}function Ss(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=nu(n,t,Cu)))return void(ku=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Cu)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=ru(t)))return n.flags&=2047,void(ku=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(ku=t);ku=t=e}while(null!==t);0===Nu&&(Nu=5)}function xs(e){var t=Bo();return Ho(99,js.bind(null,e,t)),null}function js(e,t){do{Ts()}while(null!==Yu);if(0!=(48&xu))throw Error(i(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var u=e.eventTimes,s=e.expirationTimes;0<a;){var c=31-Wt(a),l=1<<c;o[c]=0,u[c]=-1,s[c]=-1,a&=~l}if(null!==Qu&&0==(24&r)&&Qu.has(e)&&Qu.delete(e),e===ju&&(ku=ju=null,Tu=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=xu,xu|=32,Su.current=null,Lr=Vt,dr(u=fr())){if("selectionStart"in u)s={start:u.selectionStart,end:u.selectionEnd};else e:if(s=(s=u.ownerDocument)&&s.defaultView||window,(l=s.getSelection&&s.getSelection())&&0!==l.rangeCount){s=l.anchorNode,a=l.anchorOffset,c=l.focusNode,l=l.focusOffset;try{s.nodeType,c.nodeType}catch(e){s=null;break e}var f=0,d=-1,p=-1,h=0,m=0,g=u,v=null;t:for(;;){for(var y;g!==s||0!==a&&3!==g.nodeType||(d=f+a),g!==c||0!==l&&3!==g.nodeType||(p=f+l),3===g.nodeType&&(f+=g.nodeValue.length),null!==(y=g.firstChild);)v=g,g=y;for(;;){if(g===u)break t;if(v===s&&++h===a&&(d=f),v===c&&++m===l&&(p=f),null!==(y=g.nextSibling))break;v=(g=v).parentNode}g=y}s=-1===d||-1===p?null:{start:d,end:p}}else s=null;s=s||{start:0,end:0}}else s=null;Mr={focusedElem:u,selectionRange:s},Vt=!1,rs=null,os=!1,Hu=r;do{try{ks()}catch(e){if(null===Hu)throw Error(i(330));Rs(Hu,e),Hu=Hu.nextEffect}}while(null!==Hu);rs=null,Hu=r;do{try{for(u=e;null!==Hu;){var b=Hu.flags;if(16&b&&ve(Hu.stateNode,""),128&b){var w=Hu.alternate;if(null!==w){var _=w.ref;null!==_&&("function"==typeof _?_(null):_.current=null)}}switch(1038&b){case 2:vu(Hu),Hu.flags&=-3;break;case 6:vu(Hu),Hu.flags&=-3,bu(Hu.alternate,Hu);break;case 1024:Hu.flags&=-1025;break;case 1028:Hu.flags&=-1025,bu(Hu.alternate,Hu);break;case 4:bu(Hu.alternate,Hu);break;case 8:yu(u,s=Hu);var O=s.alternate;mu(s),null!==O&&mu(O)}Hu=Hu.nextEffect}}catch(e){if(null===Hu)throw Error(i(330));Rs(Hu,e),Hu=Hu.nextEffect}}while(null!==Hu);if(_=Mr,w=fr(),b=_.focusedElem,u=_.selectionRange,w!==b&&b&&b.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(b.ownerDocument.documentElement,b)){null!==u&&dr(b)&&(w=u.start,void 0===(_=u.end)&&(_=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(_,b.value.length)):(_=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(_=_.getSelection(),s=b.textContent.length,O=Math.min(u.start,s),u=void 0===u.end?O:Math.min(u.end,s),!_.extend&&O>u&&(s=u,u=O,O=s),s=lr(b,O),a=lr(b,u),s&&a&&(1!==_.rangeCount||_.anchorNode!==s.node||_.anchorOffset!==s.offset||_.focusNode!==a.node||_.focusOffset!==a.offset)&&((w=w.createRange()).setStart(s.node,s.offset),_.removeAllRanges(),O>u?(_.addRange(w),_.extend(a.node,a.offset)):(w.setEnd(a.node,a.offset),_.addRange(w))))),w=[];for(_=b;_=_.parentNode;)1===_.nodeType&&w.push({element:_,left:_.scrollLeft,top:_.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(_=w[b]).element.scrollLeft=_.left,_.element.scrollTop=_.top}Vt=!!Lr,Mr=Lr=null,e.current=n,Hu=r;do{try{for(b=e;null!==Hu;){var E=Hu.flags;if(36&E&&du(b,Hu.alternate,Hu),128&E){w=void 0;var S=Hu.ref;if(null!==S){var x=Hu.stateNode;switch(Hu.tag){case 5:w=x;break;default:w=x}"function"==typeof S?S(w):S.current=w}}Hu=Hu.nextEffect}}catch(e){if(null===Hu)throw Error(i(330));Rs(Hu,e),Hu=Hu.nextEffect}}while(null!==Hu);Hu=null,Io(),xu=o}else e.current=n;if($u)$u=!1,Yu=e,Vu=t;else for(Hu=r;null!==Hu;)t=Hu.nextEffect,Hu.nextEffect=null,8&Hu.flags&&((E=Hu).sibling=null,E.stateNode=null),Hu=t;if(0===(r=e.pendingLanes)&&(qu=null),1===r?e===Ju?Zu++:(Zu=0,Ju=e):Zu=0,n=n.stateNode,wo&&"function"==typeof wo.onCommitFiberRoot)try{wo.onCommitFiberRoot(bo,n,void 0,64==(64&n.current.flags))}catch(e){}if(cs(e,Fo()),Wu)throw Wu=!1,e=Gu,Gu=null,e;return 0!=(8&xu)||Go(),null}function ks(){for(;null!==Hu;){var e=Hu.alternate;os||null===rs||(0!=(8&Hu.flags)?Je(Hu,rs)&&(os=!0):13===Hu.tag&&_u(e,Hu)&&Je(Hu,rs)&&(os=!0));var t=Hu.flags;0!=(256&t)&&fu(e,Hu),0==(512&t)||$u||($u=!0,Wo(97,(function(){return Ts(),null}))),Hu=Hu.nextEffect}}function Ts(){if(90!==Vu){var e=97<Vu?97:Vu;return Vu=90,Ho(e,Ns)}return!1}function Cs(e,t){Xu.push(t,e),$u||($u=!0,Wo(97,(function(){return Ts(),null})))}function As(e,t){Ku.push(t,e),$u||($u=!0,Wo(97,(function(){return Ts(),null})))}function Ns(){if(null===Yu)return!1;var e=Yu;if(Yu=null,0!=(48&xu))throw Error(i(331));var t=xu;xu|=32;var n=Ku;Ku=[];for(var r=0;r<n.length;r+=2){var o=n[r],a=n[r+1],u=o.destroy;if(o.destroy=void 0,"function"==typeof u)try{u()}catch(e){if(null===a)throw Error(i(330));Rs(a,e)}}for(n=Xu,Xu=[],r=0;r<n.length;r+=2){o=n[r],a=n[r+1];try{var s=o.create;o.destroy=s()}catch(e){if(null===a)throw Error(i(330));Rs(a,e)}}for(s=e.current.firstEffect;null!==s;)e=s.nextEffect,s.nextEffect=null,8&s.flags&&(s.sibling=null,s.stateNode=null),s=e;return xu=t,Go(),!0}function Ps(e,t,n){ua(e,t=uu(0,t=ou(n,t),1)),t=as(),null!==(e=ss(e,1))&&(Ht(e,1,t),cs(e,t))}function Rs(e,t){if(3===e.tag)Ps(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Ps(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===qu||!qu.has(r))){var o=su(n,e=ou(t,e),1);if(ua(n,o),o=as(),null!==(n=ss(n,1)))Ht(n,1,o),cs(n,o);else if("function"==typeof r.componentDidCatch&&(null===qu||!qu.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Is(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=as(),e.pingedLanes|=e.suspendedLanes&n,ju===e&&(Tu&n)===n&&(4===Nu||3===Nu&&(62914560&Tu)===Tu&&500>Fo()-Uu?vs(e,0):Lu|=n),cs(e,t)}function Ds(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Bo()?1:2:(0===ts&&(ts=Ru),0===(t=Bt(62914560&~ts))&&(t=4194304))),n=as(),null!==(e=ss(e,t))&&(Ht(e,t,n),cs(e,n))}function Ls(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Ms(e,t,n,r){return new Ls(e,t,n,r)}function Us(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Fs(e,t){var n=e.alternate;return null===n?((n=Ms(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Bs(e,t,n,r,o,a){var u=2;if(r=e,"function"==typeof e)Us(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case S:return zs(n.children,o,a,t);case L:u=8,o|=16;break;case x:u=8,o|=1;break;case j:return(e=Ms(12,n,t,8|o)).elementType=j,e.type=j,e.lanes=a,e;case A:return(e=Ms(13,n,t,o)).type=A,e.elementType=A,e.lanes=a,e;case N:return(e=Ms(19,n,t,o)).elementType=N,e.lanes=a,e;case M:return Hs(n,o,a,t);case U:return(e=Ms(24,n,t,o)).elementType=U,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case k:u=10;break e;case T:u=9;break e;case C:u=11;break e;case P:u=14;break e;case R:u=16,r=null;break e;case I:u=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Ms(u,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function zs(e,t,n,r){return(e=Ms(7,e,r,t)).lanes=n,e}function Hs(e,t,n,r){return(e=Ms(23,e,r,t)).elementType=M,e.lanes=n,e}function Ws(e,t,n){return(e=Ms(6,e,null,t)).lanes=n,e}function Gs(e,t,n){return(t=Ms(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function qs(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=zt(0),this.expirationTimes=zt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=zt(0),this.mutableSourceEagerHydrationData=null}function $s(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Ys(e,t,n,r){var o=t.current,a=as(),u=is(o);e:if(n){t:{if(Xe(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var s=n;do{switch(s.tag){case 3:s=s.stateNode.context;break t;case 1:if(po(s.type)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break t}}s=s.return}while(null!==s);throw Error(i(171))}if(1===n.tag){var c=n.type;if(po(c)){n=go(n,c,s);break e}}n=s}else n=uo;return null===t.context?t.context=n:t.pendingContext=n,(t=ia(a,u)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ua(o,t),us(o,u,a),u}function Vs(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Xs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ks(e,t){Xs(e,t),(e=e.alternate)&&Xs(e,t)}function Qs(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new qs(e,t,null!=n&&!0===n.hydrate),t=Ms(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,oa(t),e[Xr]=n.current,kr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function Zs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Js(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var u=o;o=function(){var e=Vs(i);u.call(e)}}Ys(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Qs(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var s=o;o=function(){var e=Vs(i);s.call(e)}}hs((function(){Ys(t,i,e,o)}))}return Vs(i)}function ec(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Zs(t))throw Error(i(200));return $s(e,t,null,n)}zu=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||co.current)Pi=!0;else{if(0==(n&r)){switch(Pi=!1,t.tag){case 3:Hi(t),Wa();break;case 5:Na(t);break;case 1:po(t.type)&&vo(t);break;case 4:Ca(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;io(Vo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Yi(e,t,n):(io(Ra,1&Ra.current),null!==(t=eu(e,t,n))?t.sibling:null);io(Ra,1&Ra.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Ji(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),io(Ra,Ra.current),r)break;return null;case 23:case 24:return t.lanes=0,Mi(e,t,n)}return eu(e,t,n)}Pi=0!=(16384&e.flags)}else Pi=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=fo(t,so.current),ta(t,n),o=ni(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,po(r)){var a=!0;vo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,oa(t);var u=r.getDerivedStateFromProps;"function"==typeof u&&da(t,r,u,e),o.updater=pa,t.stateNode=o,o._reactInternals=t,va(t,r,e,n),t=zi(null,t,r,!0,a,n)}else t.tag=0,Ri(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"==typeof e)return Us(e)?1:0;if(null!=e){if((e=e.$$typeof)===C)return 11;if(e===P)return 14}return 2}(o),e=Yo(o,e),a){case 0:t=Fi(null,t,o,e,n);break e;case 1:t=Bi(null,t,o,e,n);break e;case 11:t=Ii(null,t,o,e,n);break e;case 14:t=Di(null,t,o,Yo(o.type,e),r,n);break e}throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Fi(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Bi(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 3:if(Hi(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,aa(e,t),ca(t,r,null,n),(r=t.memoizedState.element)===o)Wa(),t=eu(e,t,n);else{if((a=(o=t.stateNode).hydrate)&&(La=Wr(t.stateNode.containerInfo.firstChild),Da=t,a=Ma=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],Ga.push(a);for(n=Ea(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ri(e,t,r,n),Wa();t=t.child}return t;case 5:return Na(t),null===e&&Ba(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,u=o.children,Fr(r,o)?u=null:null!==a&&Fr(r,a)&&(t.flags|=16),Ui(e,t),Ri(e,t,u,n),t.child;case 6:return null===e&&Ba(t),null;case 13:return Yi(e,t,n);case 4:return Ca(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Oa(t,null,r,n):Ri(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Ii(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 7:return Ri(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ri(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,u=t.memoizedProps,a=o.value;var s=t.type._context;if(io(Vo,s._currentValue),s._currentValue=a,null!==u)if(s=u.value,0===(a=ir(s,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,a):1073741823))){if(u.children===o.children&&!co.current){t=eu(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var c=s.dependencies;if(null!==c){u=s.child;for(var l=c.firstContext;null!==l;){if(l.context===r&&0!=(l.observedBits&a)){1===s.tag&&((l=ia(-1,n&-n)).tag=2,ua(s,l)),s.lanes|=n,null!==(l=s.alternate)&&(l.lanes|=n),ea(s.return,n),c.lanes|=n;break}l=l.next}}else u=10===s.tag&&s.type===t.type?null:s.child;if(null!==u)u.return=s;else for(u=s;null!==u;){if(u===t){u=null;break}if(null!==(s=u.sibling)){s.return=u.return,u=s;break}u=u.return}s=u}Ri(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,ta(t,n),r=r(o=na(o,a.unstable_observedBits)),t.flags|=1,Ri(e,t,r,n),t.child;case 14:return a=Yo(o=t.type,t.pendingProps),Di(e,t,o,a=Yo(o.type,a),r,n);case 15:return Li(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Yo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,po(r)?(e=!0,vo(t)):e=!1,ta(t,n),ma(t,r,o),va(t,r,o,n),zi(null,t,r,!0,e,n);case 19:return Ji(e,t,n);case 23:case 24:return Mi(e,t,n)}throw Error(i(156,t.tag))},Qs.prototype.render=function(e){Ys(e,this._internalRoot,null,null)},Qs.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Ys(null,e,null,(function(){t[Xr]=null}))},et=function(e){13===e.tag&&(us(e,4,as()),Ks(e,4))},tt=function(e){13===e.tag&&(us(e,67108864,as()),Ks(e,67108864))},nt=function(e){if(13===e.tag){var t=as(),n=is(e);us(e,n,t),Ks(e,n)}},rt=function(e,t){return t()},je=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=eo(r);if(!o)throw Error(i(90));Q(r),ne(r,o)}}}break;case"textarea":ce(e,n);break;case"select":null!=(t=n.value)&&ie(e,!!n.multiple,t,!1)}},Pe=ps,Re=function(e,t,n,r,o){var a=xu;xu|=4;try{return Ho(98,e.bind(null,t,n,r,o))}finally{0===(xu=a)&&(Bu(),Go())}},Ie=function(){0==(49&xu)&&(function(){if(null!==Qu){var e=Qu;Qu=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,cs(e,Fo())}))}Go()}(),Ts())},De=function(e,t){var n=xu;xu|=2;try{return e(t)}finally{0===(xu=n)&&(Bu(),Go())}};var tc={Events:[Zr,Jr,eo,Ae,Ne,Ts,{current:!1}]},nc={findFiberByHostInstance:Qr,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:_.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ze(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var oc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!oc.isDisabled&&oc.supportsFiber)try{bo=oc.inject(rc),wo=oc}catch(e){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=ec,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return e=null===(e=Ze(t))?null:e.stateNode},t.flushSync=function(e,t){var n=xu;if(0!=(48&n))return e(t);xu|=1;try{if(e)return Ho(99,e.bind(null,t))}finally{xu=n,Go()}},t.hydrate=function(e,t,n){if(!Zs(t))throw Error(i(200));return Js(null,e,t,!0,n)},t.render=function(e,t,n){if(!Zs(t))throw Error(i(200));return Js(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zs(e))throw Error(i(40));return!!e._reactRootContainer&&(hs((function(){Js(null,null,e,!1,(function(){e._reactRootContainer=null,e[Xr]=null}))})),!0)},t.unstable_batchedUpdates=ps,t.unstable_createPortal=function(e,t){return ec(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Zs(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return Js(e,t,n,!1,r)},t.version="17.0.1"},function(e,t,n){"use strict";e.exports=n(129)},function(e,t,n){"use strict";
/** @license React v0.20.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,a,i;if("object"==typeof performance&&"function"==typeof performance.now){var u=performance;t.unstable_now=function(){return u.now()}}else{var s=Date,c=s.now();t.unstable_now=function(){return s.now()-c}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,f=null,d=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(d,0),e}};r=function(e){null!==l?setTimeout(r,0,e):(l=e,setTimeout(d,0))},o=function(e,t){f=setTimeout(e,t)},a=function(){clearTimeout(f)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var p=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var m=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var g=!1,v=null,y=-1,b=5,w=0;t.unstable_shouldYield=function(){return t.unstable_now()>=w},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):b=0<e?Math.floor(1e3/e):5};var _=new MessageChannel,O=_.port2;_.port1.onmessage=function(){if(null!==v){var e=t.unstable_now();w=e+b;try{v(!0,e)?O.postMessage(null):(g=!1,v=null)}catch(e){throw O.postMessage(null),e}}else g=!1},r=function(e){v=e,g||(g=!0,O.postMessage(null))},o=function(e,n){y=p((function(){e(t.unstable_now())}),n)},a=function(){h(y),y=-1}}function E(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<j(o,t)))break e;e[r]=t,e[n]=o,n=r}}function S(e){return void 0===(e=e[0])?null:e}function x(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],u=a+1,s=e[u];if(void 0!==i&&0>j(i,n))void 0!==s&&0>j(s,i)?(e[r]=s,e[u]=n,r=u):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==s&&0>j(s,n)))break e;e[r]=s,e[u]=n,r=u}}}return t}return null}function j(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var k=[],T=[],C=1,A=null,N=3,P=!1,R=!1,I=!1;function D(e){for(var t=S(T);null!==t;){if(null===t.callback)x(T);else{if(!(t.startTime<=e))break;x(T),t.sortIndex=t.expirationTime,E(k,t)}t=S(T)}}function L(e){if(I=!1,D(e),!R)if(null!==S(k))R=!0,r(M);else{var t=S(T);null!==t&&o(L,t.startTime-e)}}function M(e,n){R=!1,I&&(I=!1,a()),P=!0;var r=N;try{for(D(n),A=S(k);null!==A&&(!(A.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=A.callback;if("function"==typeof i){A.callback=null,N=A.priorityLevel;var u=i(A.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?A.callback=u:A===S(k)&&x(k),D(n)}else x(k);A=S(k)}if(null!==A)var s=!0;else{var c=S(T);null!==c&&o(L,c.startTime-n),s=!1}return s}finally{A=null,N=r,P=!1}}var U=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){R||P||(R=!0,r(M))},t.unstable_getCurrentPriorityLevel=function(){return N},t.unstable_getFirstCallbackNode=function(){return S(k)},t.unstable_next=function(e){switch(N){case 1:case 2:case 3:var t=3;break;default:t=N}var n=N;N=t;try{return e()}finally{N=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=U,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=N;N=e;try{return t()}finally{N=n}},t.unstable_scheduleCallback=function(e,n,i){var u=t.unstable_now();switch("object"==typeof i&&null!==i?i="number"==typeof(i=i.delay)&&0<i?u+i:u:i=u,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:C++,callback:n,priorityLevel:e,startTime:i,expirationTime:s=i+s,sortIndex:-1},i>u?(e.sortIndex=i,E(T,e),null===S(k)&&e===S(T)&&(I?a():I=!0,o(L,i-u))):(e.sortIndex=s,E(k,e),R||P||(R=!0,r(M))),e},t.unstable_wrapCallback=function(e){var t=N;return function(){var n=N;N=t;try{return e.apply(this,arguments)}finally{N=n}}}},function(e,t,n){"use strict";var r=n(131);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){var r,o,a;"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self&&self,o=[e],void 0===(a="function"==typeof(r=function(e){"use strict";if("undefined"==typeof browser||Object.getPrototypeOf(browser)!==Object.prototype){const t="The message port closed before a response was received.",n="Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)",r=e=>{const r={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0},elements:{createSidebarPane:{minArgs:1,maxArgs:1}}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},goBack:{minArgs:0,maxArgs:1},goForward:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(0===Object.keys(r).length)throw new Error("api-metadata.json has not been included in browser-polyfill");class o extends WeakMap{constructor(e,t){super(t),this.createItem=e}get(e){return this.has(e)||this.set(e,this.createItem(e)),super.get(e)}}const a=(t,n)=>(...r)=>{e.runtime.lastError?t.reject(e.runtime.lastError):n.singleCallbackArg||r.length<=1&&!1!==n.singleCallbackArg?t.resolve(r[0]):t.resolve(r)},i=e=>1==e?"argument":"arguments",u=(e,t,n)=>new Proxy(t,{apply:(t,r,o)=>n.call(r,e,...o)});let s=Function.call.bind(Object.prototype.hasOwnProperty);const c=(e,t={},n={})=>{let r=Object.create(null),o={has:(t,n)=>n in e||n in r,get(o,l,f){if(l in r)return r[l];if(!(l in e))return;let d=e[l];if("function"==typeof d)if("function"==typeof t[l])d=u(e,e[l],t[l]);else if(s(n,l)){let t=((e,t)=>function(n,...r){if(r.length<t.minArgs)throw new Error(`Expected at least ${t.minArgs} ${i(t.minArgs)} for ${e}(), got ${r.length}`);if(r.length>t.maxArgs)throw new Error(`Expected at most ${t.maxArgs} ${i(t.maxArgs)} for ${e}(), got ${r.length}`);return new Promise((o,i)=>{if(t.fallbackToNoCallback)try{n[e](...r,a({resolve:o,reject:i},t))}catch(a){console.warn(e+" API method doesn't seem to support the callback parameter, falling back to call it without a callback: ",a),n[e](...r),t.fallbackToNoCallback=!1,t.noCallback=!0,o()}else t.noCallback?(n[e](...r),o()):n[e](...r,a({resolve:o,reject:i},t))})})(l,n[l]);d=u(e,e[l],t)}else d=d.bind(e);else if("object"==typeof d&&null!==d&&(s(t,l)||s(n,l)))d=c(d,t[l],n[l]);else{if(!s(n,"*"))return Object.defineProperty(r,l,{configurable:!0,enumerable:!0,get:()=>e[l],set(t){e[l]=t}}),d;d=c(d,t[l],n["*"])}return r[l]=d,d},set:(t,n,o,a)=>(n in r?r[n]=o:e[n]=o,!0),defineProperty:(e,t,n)=>Reflect.defineProperty(r,t,n),deleteProperty:(e,t)=>Reflect.deleteProperty(r,t)},l=Object.create(e);return new Proxy(l,o)},l=e=>({addListener(t,n,...r){t.addListener(e.get(n),...r)},hasListener:(t,n)=>t.hasListener(e.get(n)),removeListener(t,n){t.removeListener(e.get(n))}});let f=!1;const d=new o(e=>"function"!=typeof e?e:function(t,r,o){let a,i,u=!1,s=new Promise(e=>{a=function(t){f||(console.warn(n,(new Error).stack),f=!0),u=!0,e(t)}});try{i=e(t,r,a)}catch(e){i=Promise.reject(e)}const c=!0!==i&&(l=i)&&"object"==typeof l&&"function"==typeof l.then;var l;if(!0!==i&&!c&&!u)return!1;const d=e=>{e.then(e=>{o(e)},e=>{let t;t=e&&(e instanceof Error||"string"==typeof e.message)?e.message:"An unexpected error occurred",o({__mozWebExtensionPolyfillReject__:!0,message:t})}).catch(e=>{console.error("Failed to send onMessage rejected reply",e)})};return d(c?i:s),!0}),p=({reject:n,resolve:r},o)=>{e.runtime.lastError?e.runtime.lastError.message===t?r():n(e.runtime.lastError):o&&o.__mozWebExtensionPolyfillReject__?n(new Error(o.message)):r(o)},h=(e,t,n,...r)=>{if(r.length<t.minArgs)throw new Error(`Expected at least ${t.minArgs} ${i(t.minArgs)} for ${e}(), got ${r.length}`);if(r.length>t.maxArgs)throw new Error(`Expected at most ${t.maxArgs} ${i(t.maxArgs)} for ${e}(), got ${r.length}`);return new Promise((e,t)=>{const o=p.bind(null,{resolve:e,reject:t});r.push(o),n.sendMessage(...r)})},m={runtime:{onMessage:l(d),onMessageExternal:l(d),sendMessage:h.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:h.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},g={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return r.privacy={network:{"*":g},services:{"*":g},websites:{"*":g}},c(e,m,r)};if("object"!=typeof chrome||!chrome||!chrome.runtime||!chrome.runtime.id)throw new Error("This script should only be loaded in a browser extension.");e.exports=r(chrome)}else e.exports=browser})?r.apply(t,o):r)||(e.exports=a)},function(e,t,n){"use strict";var r=n(18),o=n(76),a=n(134),i=n(82);function u(e){var t=new a(e),n=o(a.prototype.request,t);return r.extend(n,a.prototype,t),r.extend(n,t),n}var s=u(n(79));s.Axios=a,s.create=function(e){return u(i(s.defaults,e))},s.Cancel=n(83),s.CancelToken=n(147),s.isCancel=n(78),s.all=function(e){return Promise.all(e)},s.spread=n(148),s.isAxiosError=n(149),e.exports=s,e.exports.default=s},function(e,t,n){"use strict";var r=n(18),o=n(77),a=n(135),i=n(136),u=n(82);function s(e){this.defaults=e,this.interceptors={request:new a,response:new a}}s.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=u(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[i,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},s.prototype.getUri=function(e){return e=u(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){s.prototype[e]=function(t,n){return this.request(u(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){s.prototype[e]=function(t,n,r){return this.request(u(r||{},{method:e,url:t,data:n}))}})),e.exports=s},function(e,t,n){"use strict";var r=n(18);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,n){"use strict";var r=n(18),o=n(137),a=n(78),i=n(79);function u(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return u(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return u(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return a(t)||(u(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(18);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t,n){"use strict";var r=n(18);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(81);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(18);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,a,i){var u=[];u.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&u.push("expires="+new Date(n).toGMTString()),r.isString(o)&&u.push("path="+o),r.isString(a)&&u.push("domain="+a),!0===i&&u.push("secure"),document.cookie=u.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(143),o=n(144);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(18),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,a,i={};return e?(r.forEach(e.split("\n"),(function(e){if(a=e.indexOf(":"),t=r.trim(e.substr(0,a)).toLowerCase(),n=r.trim(e.substr(a+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}})),i):i}},function(e,t,n){"use strict";var r=n(18);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(83);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";e.exports=function(e){return"object"==typeof e&&!0===e.isAxiosError}},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,s=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,l=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,g=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116,y=r?Symbol.for("react.block"):60121,b=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,_=r?Symbol.for("react.scope"):60119;function O(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case i:case s:case u:case h:return e;default:switch(e=e&&e.$$typeof){case l:case p:case v:case g:case c:return e;default:return t}}case a:return t}}}function E(e){return O(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=l,t.ContextProvider=c,t.Element=o,t.ForwardRef=p,t.Fragment=i,t.Lazy=v,t.Memo=g,t.Portal=a,t.Profiler=s,t.StrictMode=u,t.Suspense=h,t.isAsyncMode=function(e){return E(e)||O(e)===f},t.isConcurrentMode=E,t.isContextConsumer=function(e){return O(e)===l},t.isContextProvider=function(e){return O(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return O(e)===p},t.isFragment=function(e){return O(e)===i},t.isLazy=function(e){return O(e)===v},t.isMemo=function(e){return O(e)===g},t.isPortal=function(e){return O(e)===a},t.isProfiler=function(e){return O(e)===s},t.isStrictMode=function(e){return O(e)===u},t.isSuspense=function(e){return O(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===d||e===s||e===u||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===g||e.$$typeof===c||e.$$typeof===l||e.$$typeof===p||e.$$typeof===b||e.$$typeof===w||e.$$typeof===_||e.$$typeof===y)},t.typeOf=O},function(e,t,n){"use strict";function r(e,t,n){if(void 0===n&&(n=Error),!e)throw new n(t)}n.d(t,"a",(function(){return r}))},,,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bodyOpenClassName=t.portalClassName=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(0),i=h(a),u=h(n(24)),s=h(n(28)),c=h(n(155)),l=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(92)),f=n(67),d=h(f),p=n(162);function h(e){return e&&e.__esModule?e:{default:e}}function m(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function g(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var v=t.portalClassName="ReactModalPortal",y=t.bodyOpenClassName="ReactModal__Body--open",b=f.canUseDOM&&void 0!==u.default.createPortal,w=function(){return b?u.default.createPortal:u.default.unstable_renderSubtreeIntoContainer};function _(e){return e()}var O=function(e){function t(){var e,n,o;m(this,t);for(var a=arguments.length,s=Array(a),l=0;l<a;l++)s[l]=arguments[l];return n=o=g(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(s))),o.removePortal=function(){!b&&u.default.unmountComponentAtNode(o.node);var e=_(o.props.parentSelector);e&&e.contains(o.node)?e.removeChild(o.node):console.warn('React-Modal: "parentSelector" prop did not returned any DOM element. Make sure that the parent element is unmounted to avoid any memory leaks.')},o.portalRef=function(e){o.portal=e},o.renderPortal=function(e){var n=w()(o,i.default.createElement(c.default,r({defaultStyles:t.defaultStyles},e)),o.node);o.portalRef(n)},g(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"componentDidMount",value:function(){f.canUseDOM&&(b||(this.node=document.createElement("div")),this.node.className=this.props.portalClassName,_(this.props.parentSelector).appendChild(this.node),!b&&this.renderPortal(this.props))}},{key:"getSnapshotBeforeUpdate",value:function(e){return{prevParent:_(e.parentSelector),nextParent:_(this.props.parentSelector)}}},{key:"componentDidUpdate",value:function(e,t,n){if(f.canUseDOM){var r=this.props,o=r.isOpen,a=r.portalClassName;e.portalClassName!==a&&(this.node.className=a);var i=n.prevParent,u=n.nextParent;u!==i&&(i.removeChild(this.node),u.appendChild(this.node)),(e.isOpen||o)&&!b&&this.renderPortal(this.props)}}},{key:"componentWillUnmount",value:function(){if(f.canUseDOM&&this.node&&this.portal){var e=this.portal.state,t=Date.now(),n=e.isOpen&&this.props.closeTimeoutMS&&(e.closesAt||t+this.props.closeTimeoutMS);n?(e.beforeClose||this.portal.closeWithTimeout(),setTimeout(this.removePortal,n-t)):this.removePortal()}}},{key:"render",value:function(){return f.canUseDOM&&b?(!this.node&&b&&(this.node=document.createElement("div")),w()(i.default.createElement(c.default,r({ref:this.portalRef,defaultStyles:t.defaultStyles},this.props)),this.node)):null}}],[{key:"setAppElement",value:function(e){l.setElement(e)}}]),t}(a.Component);O.propTypes={isOpen:s.default.bool.isRequired,style:s.default.shape({content:s.default.object,overlay:s.default.object}),portalClassName:s.default.string,bodyOpenClassName:s.default.string,htmlOpenClassName:s.default.string,className:s.default.oneOfType([s.default.string,s.default.shape({base:s.default.string.isRequired,afterOpen:s.default.string.isRequired,beforeClose:s.default.string.isRequired})]),overlayClassName:s.default.oneOfType([s.default.string,s.default.shape({base:s.default.string.isRequired,afterOpen:s.default.string.isRequired,beforeClose:s.default.string.isRequired})]),appElement:s.default.instanceOf(d.default),onAfterOpen:s.default.func,onRequestClose:s.default.func,closeTimeoutMS:s.default.number,ariaHideApp:s.default.bool,shouldFocusAfterRender:s.default.bool,shouldCloseOnOverlayClick:s.default.bool,shouldReturnFocusAfterClose:s.default.bool,preventScroll:s.default.bool,parentSelector:s.default.func,aria:s.default.object,data:s.default.object,role:s.default.string,contentLabel:s.default.string,shouldCloseOnEsc:s.default.bool,overlayRef:s.default.func,contentRef:s.default.func,id:s.default.string,overlayElement:s.default.func,contentElement:s.default.func},O.defaultProps={isOpen:!1,portalClassName:v,bodyOpenClassName:y,role:"dialog",ariaHideApp:!0,closeTimeoutMS:0,shouldFocusAfterRender:!0,shouldCloseOnEsc:!0,shouldCloseOnOverlayClick:!0,shouldReturnFocusAfterClose:!0,preventScroll:!1,parentSelector:function(){return document.body},overlayElement:function(e,t){return i.default.createElement("div",e,t)},contentElement:function(e,t){return i.default.createElement("div",e,t)}},O.defaultStyles={overlay:{position:"fixed",top:0,left:0,right:0,bottom:0,backgroundColor:"rgba(255, 255, 255, 0.75)"},content:{position:"absolute",top:"40px",left:"40px",right:"40px",bottom:"40px",border:"1px solid #ccc",background:"#fff",overflow:"auto",WebkitOverflowScrolling:"touch",borderRadius:"4px",outline:"none",padding:"20px"}},(0,p.polyfill)(O),t.default=O},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),u=m(n(28)),s=h(n(156)),c=m(n(157)),l=h(n(92)),f=h(n(160)),d=m(n(67)),p=m(n(93));function h(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function m(e){return e&&e.__esModule?e:{default:e}}n(161);var g={overlay:"ReactModal__Overlay",content:"ReactModal__Content"},v=0,y=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.setOverlayRef=function(e){n.overlay=e,n.props.overlayRef&&n.props.overlayRef(e)},n.setContentRef=function(e){n.content=e,n.props.contentRef&&n.props.contentRef(e)},n.afterClose=function(){var e=n.props,t=e.appElement,r=e.ariaHideApp,o=e.htmlOpenClassName,a=e.bodyOpenClassName;a&&f.remove(document.body,a),o&&f.remove(document.getElementsByTagName("html")[0],o),r&&v>0&&0===(v-=1)&&l.show(t),n.props.shouldFocusAfterRender&&(n.props.shouldReturnFocusAfterClose?(s.returnFocus(n.props.preventScroll),s.teardownScopedFocus()):s.popWithoutFocus()),n.props.onAfterClose&&n.props.onAfterClose(),p.default.deregister(n)},n.open=function(){n.beforeOpen(),n.state.afterOpen&&n.state.beforeClose?(clearTimeout(n.closeTimer),n.setState({beforeClose:!1})):(n.props.shouldFocusAfterRender&&(s.setupScopedFocus(n.node),s.markForFocusLater()),n.setState({isOpen:!0},(function(){n.setState({afterOpen:!0}),n.props.isOpen&&n.props.onAfterOpen&&n.props.onAfterOpen({overlayEl:n.overlay,contentEl:n.content})})))},n.close=function(){n.props.closeTimeoutMS>0?n.closeWithTimeout():n.closeWithoutTimeout()},n.focusContent=function(){return n.content&&!n.contentHasFocus()&&n.content.focus({preventScroll:!0})},n.closeWithTimeout=function(){var e=Date.now()+n.props.closeTimeoutMS;n.setState({beforeClose:!0,closesAt:e},(function(){n.closeTimer=setTimeout(n.closeWithoutTimeout,n.state.closesAt-Date.now())}))},n.closeWithoutTimeout=function(){n.setState({beforeClose:!1,isOpen:!1,afterOpen:!1,closesAt:null},n.afterClose)},n.handleKeyDown=function(e){9===e.keyCode&&(0,c.default)(n.content,e),n.props.shouldCloseOnEsc&&27===e.keyCode&&(e.stopPropagation(),n.requestClose(e))},n.handleOverlayOnClick=function(e){null===n.shouldClose&&(n.shouldClose=!0),n.shouldClose&&n.props.shouldCloseOnOverlayClick&&(n.ownerHandlesClose()?n.requestClose(e):n.focusContent()),n.shouldClose=null},n.handleContentOnMouseUp=function(){n.shouldClose=!1},n.handleOverlayOnMouseDown=function(e){n.props.shouldCloseOnOverlayClick||e.target!=n.overlay||e.preventDefault()},n.handleContentOnClick=function(){n.shouldClose=!1},n.handleContentOnMouseDown=function(){n.shouldClose=!1},n.requestClose=function(e){return n.ownerHandlesClose()&&n.props.onRequestClose(e)},n.ownerHandlesClose=function(){return n.props.onRequestClose},n.shouldBeClosed=function(){return!n.state.isOpen&&!n.state.beforeClose},n.contentHasFocus=function(){return document.activeElement===n.content||n.content.contains(document.activeElement)},n.buildClassName=function(e,t){var r="object"===(void 0===t?"undefined":o(t))?t:{base:g[e],afterOpen:g[e]+"--after-open",beforeClose:g[e]+"--before-close"},a=r.base;return n.state.afterOpen&&(a=a+" "+r.afterOpen),n.state.beforeClose&&(a=a+" "+r.beforeClose),"string"==typeof t&&t?a+" "+t:a},n.attributesFromObject=function(e,t){return Object.keys(t).reduce((function(n,r){return n[e+"-"+r]=t[r],n}),{})},n.state={afterOpen:!1,beforeClose:!1},n.shouldClose=null,n.moveFromContentToOverlay=null,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"componentDidMount",value:function(){this.props.isOpen&&this.open()}},{key:"componentDidUpdate",value:function(e,t){this.props.isOpen&&!e.isOpen?this.open():!this.props.isOpen&&e.isOpen&&this.close(),this.props.shouldFocusAfterRender&&this.state.isOpen&&!t.isOpen&&this.focusContent()}},{key:"componentWillUnmount",value:function(){this.state.isOpen&&this.afterClose(),clearTimeout(this.closeTimer)}},{key:"beforeOpen",value:function(){var e=this.props,t=e.appElement,n=e.ariaHideApp,r=e.htmlOpenClassName,o=e.bodyOpenClassName;o&&f.add(document.body,o),r&&f.add(document.getElementsByTagName("html")[0],r),n&&(v+=1,l.hide(t)),p.default.register(this)}},{key:"render",value:function(){var e=this.props,t=e.id,n=e.className,o=e.overlayClassName,a=e.defaultStyles,i=e.children,u=n?{}:a.content,s=o?{}:a.overlay;if(this.shouldBeClosed())return null;var c={ref:this.setOverlayRef,className:this.buildClassName("overlay",o),style:r({},s,this.props.style.overlay),onClick:this.handleOverlayOnClick,onMouseDown:this.handleOverlayOnMouseDown},l=r({id:t,ref:this.setContentRef,style:r({},u,this.props.style.content),className:this.buildClassName("content",n),tabIndex:"-1",onKeyDown:this.handleKeyDown,onMouseDown:this.handleContentOnMouseDown,onMouseUp:this.handleContentOnMouseUp,onClick:this.handleContentOnClick,role:this.props.role,"aria-label":this.props.contentLabel},this.attributesFromObject("aria",r({modal:!0},this.props.aria)),this.attributesFromObject("data",this.props.data||{}),{"data-testid":this.props.testId}),f=this.props.contentElement(l,i);return this.props.overlayElement(c,f)}}]),t}(i.Component);y.defaultProps={style:{overlay:{},content:{}},defaultStyles:{}},y.propTypes={isOpen:u.default.bool.isRequired,defaultStyles:u.default.shape({content:u.default.object,overlay:u.default.object}),style:u.default.shape({content:u.default.object,overlay:u.default.object}),className:u.default.oneOfType([u.default.string,u.default.object]),overlayClassName:u.default.oneOfType([u.default.string,u.default.object]),bodyOpenClassName:u.default.string,htmlOpenClassName:u.default.string,ariaHideApp:u.default.bool,appElement:u.default.instanceOf(d.default),onAfterOpen:u.default.func,onAfterClose:u.default.func,onRequestClose:u.default.func,closeTimeoutMS:u.default.number,shouldFocusAfterRender:u.default.bool,shouldCloseOnOverlayClick:u.default.bool,shouldReturnFocusAfterClose:u.default.bool,preventScroll:u.default.bool,role:u.default.string,contentLabel:u.default.string,aria:u.default.object,data:u.default.object,children:u.default.node,shouldCloseOnEsc:u.default.bool,overlayRef:u.default.func,contentRef:u.default.func,id:u.default.string,overlayElement:u.default.func,contentElement:u.default.func,testId:u.default.string},t.default=y,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.handleBlur=c,t.handleFocus=l,t.markForFocusLater=function(){i.push(document.activeElement)},t.returnFocus=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=null;try{return void(0!==i.length&&(t=i.pop()).focus({preventScroll:e}))}catch(e){console.warn(["You tried to return focus to",t,"but it is not in the DOM anymore"].join(" "))}},t.popWithoutFocus=function(){i.length>0&&i.pop()},t.setupScopedFocus=function(e){u=e,window.addEventListener?(window.addEventListener("blur",c,!1),document.addEventListener("focus",l,!0)):(window.attachEvent("onBlur",c),document.attachEvent("onFocus",l))},t.teardownScopedFocus=function(){u=null,window.addEventListener?(window.removeEventListener("blur",c),document.removeEventListener("focus",l)):(window.detachEvent("onBlur",c),document.detachEvent("onFocus",l))};var r,o=n(91),a=(r=o)&&r.__esModule?r:{default:r};var i=[],u=null,s=!1;function c(){s=!0}function l(){if(s){if(s=!1,!u)return;setTimeout((function(){u.contains(document.activeElement)||((0,a.default)(u)[0]||u).focus()}),0)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=(0,a.default)(e);if(!n.length)return void t.preventDefault();var r=void 0,o=t.shiftKey,i=n[0],u=n[n.length-1];if(e===document.activeElement){if(!o)return;r=u}u!==document.activeElement||o||(r=i);i===document.activeElement&&o&&(r=u);if(r)return t.preventDefault(),void r.focus();var s=/(\bChrome\b|\bSafari\b)\//.exec(navigator.userAgent);if(null==s||"Chrome"==s[1]||null!=/\biPod\b|\biPad\b/g.exec(navigator.userAgent))return;var c=n.indexOf(document.activeElement);c>-1&&(c+=o?-1:1);if(void 0===(r=n[c]))return t.preventDefault(),void(r=o?u:i).focus();t.preventDefault(),r.focus()};var r,o=n(91),a=(r=o)&&r.__esModule?r:{default:r};e.exports=t.default},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){var r;
/*!
  Copyright (c) 2015 Jed Watson.
  Based on code that is Copyright 2013-2015, Facebook, Inc.
  All rights reserved.
*/!function(){"use strict";var o=!("undefined"==typeof window||!window.document||!window.document.createElement),a={canUseDOM:o,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:o&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:o&&!!window.screen};void 0===(r=function(){return a}.call(t,n,t,e))||(e.exports=r)}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dumpClassLists=function(){0};var r={},o={};t.add=function(e,t){return n=e.classList,a="html"==e.nodeName.toLowerCase()?r:o,void t.split(" ").forEach((function(e){!function(e,t){e[t]||(e[t]=0),e[t]+=1}(a,e),n.add(e)}));var n,a},t.remove=function(e,t){return n=e.classList,a="html"==e.nodeName.toLowerCase()?r:o,void t.split(" ").forEach((function(e){!function(e,t){e[t]&&(e[t]-=1)}(a,e),0===a[e]&&n.remove(e)}));var n,a}},function(e,t,n){"use strict";var r,o=n(93),a=(r=o)&&r.__esModule?r:{default:r};var i=void 0,u=void 0,s=[];function c(){0!==s.length&&s[s.length-1].focusContent()}a.default.subscribe((function(e,t){i&&u||((i=document.createElement("div")).setAttribute("data-react-modal-body-trap",""),i.style.position="absolute",i.style.opacity="0",i.setAttribute("tabindex","0"),i.addEventListener("focus",c),(u=i.cloneNode()).addEventListener("focus",c)),(s=t).length>0?(document.body.firstChild!==i&&document.body.insertBefore(i,document.body.firstChild),document.body.lastChild!==u&&document.body.appendChild(u)):(i.parentElement&&i.parentElement.removeChild(i),u.parentElement&&u.parentElement.removeChild(u))}))},function(e,t,n){"use strict";function r(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=e&&this.setState(e)}function o(e){this.setState(function(t){var n=this.constructor.getDerivedStateFromProps(e,t);return null!=n?n:null}.bind(this))}function a(e,t){try{var n=this.props,r=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}function i(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var n=null,i=null,u=null;if("function"==typeof t.componentWillMount?n="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?i="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(i="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?u="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(u="UNSAFE_componentWillUpdate"),null!==n||null!==i||null!==u){var s=e.displayName||e.name,c="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+s+" uses "+c+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==i?"\n  "+i:"")+(null!==u?"\n  "+u:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=r,t.componentWillReceiveProps=o),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=a;var l=t.componentDidUpdate;t.componentDidUpdate=function(e,t,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;l.call(this,e,t,r)}}return e}n.r(t),n.d(t,"polyfill",(function(){return i})),r.__suppressDeprecationWarning=!0,o.__suppressDeprecationWarning=!0,a.__suppressDeprecationWarning=!0},function(e,t,n){"use strict";var r=n(23),o=n(94),a=n(164),i=n(100);function u(e){var t=new a(e),n=o(a.prototype.request,t);return r.extend(n,a.prototype,t),r.extend(n,t),n}var s=u(n(97));s.Axios=a,s.create=function(e){return u(i(s.defaults,e))},s.Cancel=n(101),s.CancelToken=n(177),s.isCancel=n(96),s.all=function(e){return Promise.all(e)},s.spread=n(178),e.exports=s,e.exports.default=s},function(e,t,n){"use strict";var r=n(23),o=n(95),a=n(165),i=n(166),u=n(100);function s(e){this.defaults=e,this.interceptors={request:new a,response:new a}}s.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=u(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[i,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},s.prototype.getUri=function(e){return e=u(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){s.prototype[e]=function(t,n){return this.request(r.merge(n||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){s.prototype[e]=function(t,n,o){return this.request(r.merge(o||{},{method:e,url:t,data:n}))}})),e.exports=s},function(e,t,n){"use strict";var r=n(23);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,n){"use strict";var r=n(23),o=n(167),a=n(96),i=n(97);function u(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return u(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return u(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return a(t)||(u(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(23);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t,n){"use strict";var r=n(23);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(99);e.exports=function(e,t,n){var o=n.config.validateStatus;!o||o(n.status)?e(n):t(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(172),o=n(173);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(23),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,a,i={};return e?(r.forEach(e.split("\n"),(function(e){if(a=e.indexOf(":"),t=r.trim(e.substr(0,a)).toLowerCase(),n=r.trim(e.substr(a+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}})),i):i}},function(e,t,n){"use strict";var r=n(23);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(23);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,a,i){var u=[];u.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&u.push("expires="+new Date(n).toGMTString()),r.isString(o)&&u.push("path="+o),r.isString(a)&&u.push("domain="+a),!0===i&&u.push("secure"),document.cookie=u.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(101);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},,,function(e,t,n){"use strict";var r=n(0),o=n.n(r),a=n(3),i=n.n(a),u=n(208),s=n.n(u),c=i()(s.a);t.a=function(e){var t=e.children,n=e.className,r=e.style;return o.a.createElement("div",{className:c("step")(null,n),style:r},t)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));function r(e){return e.getTime()%6e4}function o(e){var t=new Date(e.getTime()),n=Math.ceil(t.getTimezoneOffset());return t.setSeconds(0,0),6e4*n+(n>0?(6e4+r(t))%6e4:r(t))}},function(e,t,n){"use strict";var r,o=n(7);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var i=(a(r={},o.a.EN,{lang:o.a.EN,messages:{"auth.securityPolicy":'By using this extension, you agree to the <a href="{policyHref}" rel="noopener noreferrer" target="_blank">security policy</a>.',"auth.rememberPassword":"I remember password","auth.remindPassword":"If you have forgotten your password, click here","auth.remindPasswordSuccessMessage":"We have sent you a password recovery link in the mail.","auth.resetPassword":"Reset password","auth.reset":"Reset password","auth.loginLater":"Log in later","auth.errorBusy":"Server error. Reload the page and try once again.","auth.errorIncorrectPasswordOrUsername":"Wrong password or e-mail address.","auth.errorProfileNotFound":"The e-mail address that you entered was not found.","auth.errorTooManyAttempts":"Too many attempts. Please try again later.","auth.errorAuthData":"Can not verify the authorization data.","auth.errorAuthCookie":"Please log in to https://www.ratehawk.com first.","auth.authOr":"Log in or ","auth.signUp":"sign up","auth.authReason":" to earn more"}}),a(r,o.a.RU,{lang:o.a.RU,messages:{"auth.securityPolicy":'Используя данное расширение, вы соглашаетесь с <a href="{policyHref}" rel="noopener noreferrer" target="_blank">политикой конфиденциальности</a>.',"auth.rememberPassword":"Я помню пароль","auth.remindPassword":"Если вы забыли пароль, нажмите сюда","auth.remindPasswordSuccessMessage":"Мы отправили вам на почту ссылку для восстановления пароля.","auth.resetPassword":"Восстановить","auth.reset":"Восстановление пароля","auth.loginLater":"Авторизоваться позже","auth.errorBusy":"Ошибка сервера. Попробуйте еще раз позже.","auth.errorIncorrectPasswordOrUsername":"Указан неправильный пароль или электронный адрес.","auth.errorProfileNotFound":"Мы не нашли введенный вами адрес электронной почты.","auth.errorTooManyAttempts":"Слишком много попыток. Попробуйте еще раз позже.","auth.errorAuthData":"Не могу проверить авторизационные данные.","auth.errorAuthCookie":"Пожалуйста, сначала авторизуйтесь на https://www.ratehawk.com.","auth.authOr":"Авторизуйтесь или<br>","auth.signUp":"зарегистрируйтесь","auth.authReason":", чтобы заработать больше"}}),r);t.a=i},function(e,t,n){"use strict";var r,o=n(7);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var i=(a(r={},o.a.EN,{lang:o.a.EN,messages:{"signin.email":"Email","signin.password":"Password","signin.submitButton":"Enter"}}),a(r,o.a.RU,{lang:o.a.RU,messages:{"signin.email":"Email","signin.password":"Пароль","signin.submitButton":"Войти"}}),r);t.a=i},,,function(e,t,n){"use strict";var r=n(0),o=n.n(r);t.a=o.a.createContext((function(){}))},function(e,t,n){e.exports={animated:"Animated__animated--Bmalk",fadeInRight:"Animated__fadeInRight--3q2DA",fadeInLeft:"Animated__fadeInLeft--2Riiy",fadeOutRight:"Animated__fadeOutRight--34fxr",fadeOutLeft:"Animated__fadeOutLeft--19WHC"}},function(e,t,n){"use strict";n.d(t,"a",(function(){return M}));var r=n(0),o=n(42),a=n(6);const i=["localeMatcher","style","currency","currencyDisplay","unit","unitDisplay","useGrouping","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","compactDisplay","currencyDisplay","currencySign","notation","signDisplay","unit","unitDisplay"];function u({locale:e,formats:t,onError:n},r,o={}){const{format:u}=o,s=u&&Object(a.g)(t,"number",u,n)||{};return r(e,Object(a.f)(o,i,s))}function s(e,t,n,r={}){try{return u(e,t,r).format(n)}catch(t){e.onError(Object(a.b)("Error formatting number.",t))}return String(n)}function c(e,t,n,r={}){try{return u(e,t,r).formatToParts(n)}catch(t){e.onError(Object(a.b)("Error formatting number.",t))}return[]}const l=["numeric","style"];function f(e,t,n,r,o={}){r||(r="second");Intl.RelativeTimeFormat||e.onError(Object(a.b)('Intl.RelativeTimeFormat is not available in this environment.\nTry polyfilling it using "@formatjs/intl-relativetimeformat"\n'));try{return function({locale:e,formats:t,onError:n},r,o={}){const{format:i}=o,u=!!i&&Object(a.g)(t,"relative",i,n)||{};return r(e,Object(a.f)(o,l,u))}(e,t,o).format(n,r)}catch(t){e.onError(Object(a.b)("Error formatting relative time.",t))}return String(n)}const d=["localeMatcher","formatMatcher","timeZone","hour12","weekday","era","year","month","day","hour","minute","second","timeZoneName"];function p({locale:e,formats:t,onError:n,timeZone:r},o,i,u={}){const{format:s}=u,c=Object.assign(Object.assign({},r&&{timeZone:r}),s&&Object(a.g)(t,o,s,n));let l=Object(a.f)(u,d,c);return"time"!==o||l.hour||l.minute||l.second||(l=Object.assign(Object.assign({},l),{hour:"numeric",minute:"numeric"})),i(e,l)}function h(e,t,n,r={}){const o="string"==typeof n?new Date(n||0):n;try{return p(e,"date",t,r).format(o)}catch(t){e.onError(Object(a.b)("Error formatting date.",t))}return String(o)}function m(e,t,n,r={}){const o="string"==typeof n?new Date(n||0):n;try{return p(e,"time",t,r).format(o)}catch(t){e.onError(Object(a.b)("Error formatting time.",t))}return String(o)}function g(e,t,n,r={}){const o="string"==typeof n?new Date(n||0):n;try{return p(e,"date",t,r).formatToParts(o)}catch(t){e.onError(Object(a.b)("Error formatting date.",t))}return[]}function v(e,t,n,r={}){const o="string"==typeof n?new Date(n||0):n;try{return p(e,"time",t,r).formatToParts(o)}catch(t){e.onError(Object(a.b)("Error formatting time.",t))}return[]}const y=["localeMatcher","type"];function b({locale:e,onError:t},n,r,o={}){Intl.PluralRules||t(Object(a.b)('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n'));const i=Object(a.f)(o,y);try{return n(e,i).select(r)}catch(e){t(Object(a.b)("Error formatting plural.",e))}return"other"}var w=n(151),_=n(53);function O(e,t){return Object.keys(e).reduce((n,r)=>(n[r]=Object.assign({timeZone:t},e[r]),n),{})}function E(e,t){return Object.keys(Object.assign(Object.assign({},e),t)).reduce((n,r)=>(n[r]=Object.assign(Object.assign({},e[r]||{}),t[r]||{}),n),{})}function S(e,t){if(!t)return e;const n=_.a.formats;return Object.assign(Object.assign(Object.assign({},n),e),{date:E(O(n.date,t),O(e.date||{},t)),time:E(O(n.time,t),O(e.time||{},t))})}function x({locale:e,formats:t,messages:n,defaultLocale:o,defaultFormats:i,onError:u,timeZone:s},c,l={id:""},f={}){const{id:d,defaultMessage:p}=l;Object(w.a)(!!d,"[React Intl] An `id` must be provided to format a message.");const h=n&&n[String(d)];t=S(t,s),i=S(i,s);let m=[];if(h)try{m=c.getMessageFormat(h,e,t,{formatters:c}).formatHTMLMessage(f)}catch(t){u(Object(a.b)(`Error formatting message: "${d}" for locale: "${e}"`+(p?", using default message as fallback.":""),t))}else(!p||e&&e.toLowerCase()!==o.toLowerCase())&&u(Object(a.b)(`Missing message: "${d}" for locale: "${e}"`+(p?", using default message as fallback.":"")));if(!m.length&&p)try{m=c.getMessageFormat(p,o,i).formatHTMLMessage(f)}catch(e){u(Object(a.b)(`Error formatting the default message for: "${d}"`,e))}return m.length?1===m.length&&"string"==typeof m[0]?m[0]||p||String(d):(g=m,r.createElement(r.Fragment,null,...g)):(u(Object(a.b)(`Cannot format message: "${d}", using message ${h||p?"source":"id"} as fallback.`)),"string"==typeof h?h||p||String(d):p||String(d));var g}function j(e,t,n={id:""},r={}){return x(e,t,n,Object.keys(r).reduce((e,t)=>{const n=r[t];return e[t]="string"==typeof n?Object(a.e)(n):n,e},{}))}var k=n(72),T=n.n(k);const C=["localeMatcher","type","style"],A=Date.now();function N({locale:e,onError:t},n,r,o={}){Intl.ListFormat||t(Object(a.b)('Intl.ListFormat is not available in this environment.\nTry polyfilling it using "@formatjs/intl-listformat"\n'));const i=Object(a.f)(o,C);try{const t={},o=r.map((e,n)=>{if("object"==typeof e){const r=function(e){return`${A}_${e}_${A}`}(n);return t[r]=e,r}return String(e)});if(!Object.keys(t).length)return n(e,i).format(o);return n(e,i).formatToParts(o).reduce((e,n)=>{const r=n.value;return t[r]?e.push(t[r]):"string"==typeof e[e.length-1]?e[e.length-1]+=r:e.push(r),e},[])}catch(e){t(Object(a.b)("Error formatting list.",e))}return r}const P=["localeMatcher","style","type","fallback"];function R({locale:e,onError:t},n,r,o={}){Intl.DisplayNames||t(Object(a.b)('Intl.DisplayNames is not available in this environment.\nTry polyfilling it using "@formatjs/intl-displaynames"\n'));const i=Object(a.f)(o,P);try{return n(e,i).of(r)}catch(e){t(Object(a.b)("Error formatting display name.",e))}}const I=T.a||k;function D(e){return{locale:e.locale,timeZone:e.timeZone,formats:e.formats,textComponent:e.textComponent,messages:e.messages,defaultLocale:e.defaultLocale,defaultFormats:e.defaultFormats,onError:e.onError}}function L(e,t){const n=Object(a.c)(t),r=Object.assign(Object.assign({},a.a),e),{locale:o,defaultLocale:i,onError:u}=r;return o?!Intl.NumberFormat.supportedLocalesOf(o).length&&u?u(Object(a.b)(`Missing locale data for locale: "${o}" in Intl.NumberFormat. Using default locale: "${i}" as fallback. See https://github.com/formatjs/react-intl/blob/master/docs/Getting-Started.md#runtime-requirements for more details`)):!Intl.DateTimeFormat.supportedLocalesOf(o).length&&u&&u(Object(a.b)(`Missing locale data for locale: "${o}" in Intl.DateTimeFormat. Using default locale: "${i}" as fallback. See https://github.com/formatjs/react-intl/blob/master/docs/Getting-Started.md#runtime-requirements for more details`)):(u&&u(Object(a.b)(`"locale" was not configured, using "${i}" as fallback. See https://github.com/formatjs/react-intl/blob/master/docs/API.md#intlshape for more details`)),r.locale=r.defaultLocale||"en"),Object.assign(Object.assign({},r),{formatters:n,formatNumber:s.bind(null,r,n.getNumberFormat),formatNumberToParts:c.bind(null,r,n.getNumberFormat),formatRelativeTime:f.bind(null,r,n.getRelativeTimeFormat),formatDate:h.bind(null,r,n.getDateTimeFormat),formatDateToParts:g.bind(null,r,n.getDateTimeFormat),formatTime:m.bind(null,r,n.getDateTimeFormat),formatTimeToParts:v.bind(null,r,n.getDateTimeFormat),formatPlural:b.bind(null,r,n.getPluralRules),formatMessage:x.bind(null,r,n),formatHTMLMessage:j.bind(null,r,n),formatList:N.bind(null,r,n.getListFormat),formatDisplayName:R.bind(null,r,n.getDisplayNames)})}class M extends r.PureComponent{constructor(){super(...arguments),this.cache=Object(a.d)(),this.state={cache:this.cache,intl:L(D(this.props),this.cache),prevConfig:D(this.props)}}static getDerivedStateFromProps(e,{prevConfig:t,cache:n}){const r=D(e);return I(t,r)?null:{intl:L(r,n),prevConfig:r}}render(){return Object(a.h)(this.state.intl),r.createElement(o.b,{value:this.state.intl},this.props.children)}}M.displayName="IntlProvider",M.defaultProps=a.a},function(e,t,n){e.exports={errorMessage:"ErrorMessage__errorMessage--2LCmn"}},function(e,t,n){e.exports={input:"RestorePassword__input--24ywR",message:"RestorePassword__message--2dapk"}},function(e,t,n){e.exports={input:"SignIn__input--1mQvr"}},function(e,t,n){e.exports={textButton:"TextButton__textButton--2jcii",textButton_view_light:"TextButton__textButton_view_light--j66PQ"}},function(e,t,n){e.exports={title:"Auth__title--1e5PJ",link:"Auth__link--39ZRq",privacyPolicy:"Auth__privacyPolicy--3V9Vo"}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(29),o=n(21),a=n(14);function i(e,t){Object(a.a)(2,arguments);var n=Object(o.a)(e).getTime(),i=Object(r.a)(t);return new Date(n+i)}},,function(e,t,n){"use strict";var r=n(2),o=n.n(r),a=n(0),i=n.n(a),u=n(3),s=n.n(u),c=n(115),l=n(12),f=n(4),d=n(19),p=n(34),h=n(33),m=n(64),g=n(16),v=n(26),y=n(190),b=n.n(y),w=s()(b.a),_=function(e){var t=e.children;return i.a.createElement("div",{className:w("errorMessage")()},t)},O=n(191),E=n.n(O);function S(e,t,n,r,o,a,i){try{var u=e[a](i),s=u.value}catch(e){return void n(e)}u.done?t(s):Promise.resolve(s).then(r,o)}function x(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return j(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return j(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function j(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var k=s()(E.a),T=function(e){var t=e.onSubmit,n=e.submitLabel,r=Object(c.a)(),u=x(Object(a.useState)(""),2),s=u[0],l=u[1],f=x(Object(a.useState)(null),2),d=f[0],p=f[1],y=Object(a.useRef)(null),b=Object(m.a)(),w=b.error,O=b.handleBackgroundRequest,E=b.isLoading,j=b.status;Object(a.useEffect)((function(){y.current&&y.current.focus()}),[]),Object(a.useEffect)((function(){"ok"===j&&(t&&t(),p(r.formatMessage({id:"auth.remindPasswordSuccessMessage"})))}),[j,t,r]),Object(a.useEffect)((function(){y.current&&(y.current.disabled=E)}),[E]);var T=Object(a.useCallback)((function(e){var t=e.target;return l(t.value)}),[]),C=Object(a.useCallback)(function(){var e,t=(e=o.a.mark((function e(t){return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),p(null),e.next=4,O({command:h.a.RESTORE_PASSWORD,username:s});case 4:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){S(a,r,o,i,u,"next",e)}function u(e){S(a,r,o,i,u,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),[O,s]);return i.a.createElement("div",null,i.a.createElement("form",{onSubmit:C},w&&i.a.createElement(_,null,r.formatMessage({id:w})),d?i.a.createElement("p",{className:k("message")()},d):i.a.createElement(i.a.Fragment,null,i.a.createElement(v.b,{className:k("input")(),inputRef:y,label:r.formatMessage({id:"signin.email"}),name:"username",onChange:T,placeholder:"example@mail.ru",required:!0,size:v.a.M,type:"email",value:s,wide:!0}),i.a.createElement(g.d,{disabled:E,size:g.a.M,type:g.b.SUBMIT,wide:!0},n))))},C=n(192),A=n.n(C);function N(e,t,n,r,o,a,i){try{var u=e[a](i),s=u.value}catch(e){return void n(e)}u.done?t(s):Promise.resolve(s).then(r,o)}function P(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return R(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return R(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function R(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var I,D=s()(A.a),L=function(e){var t=e.isActive,n=e.onSubmit,r=Object(c.a)(),u=P(Object(a.useState)(""),2),s=u[0],l=u[1],f=P(Object(a.useState)(""),2),d=f[0],p=f[1],y=Object(a.useRef)(null),b=Object(a.useRef)(null),w=Object(m.a)(),O=w.error,E=w.handleBackgroundRequest,S=w.isLoading,x=w.status;Object(a.useEffect)((function(){t&&y.current&&y.current.focus()}),[t]),Object(a.useEffect)((function(){"ok"===x&&n()}),[x,n]),Object(a.useEffect)((function(){y.current&&(y.current.disabled=S),b.current&&(b.current.disabled=S)}),[S]);var j=Object(a.useCallback)((function(e){var t=e.target;return l(t.value)}),[]),k=Object(a.useCallback)((function(e){var t=e.target;return p(t.value)}),[]),T=Object(a.useCallback)(function(){var e,t=(e=o.a.mark((function e(t){return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),e.next=3,E({command:h.a.SIGN_IN,username:s,password:d});case 3:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){N(a,r,o,i,u,"next",e)}function u(e){N(a,r,o,i,u,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),[E,s,d]);return i.a.createElement("div",null,i.a.createElement("form",{onSubmit:T},O&&i.a.createElement(_,null,r.formatMessage({id:O})),i.a.createElement(v.b,{className:D("input")(),inputRef:y,label:r.formatMessage({id:"signin.email"}),name:"username",onChange:j,placeholder:"example@mail.ru",required:!0,size:v.a.M,type:"email",value:s,wide:!0}),i.a.createElement(v.b,{className:D("input")(),inputRef:b,label:r.formatMessage({id:"signin.password"}),name:"password",onChange:k,placeholder:"••••••",required:!0,size:v.a.M,type:"password",value:d,wide:!0}),i.a.createElement(g.d,{disabled:S,size:g.a.M,type:g.b.SUBMIT,wide:!0},r.formatMessage({id:"signin.submitButton"}))))},M=n(193),U=n.n(M),F=s()(U.a);!function(e){e.LIGHT="light"}(I||(I={}));var B=function(e){var t=e.children,n=e.className,r=e.href,o=e.onClick,a=e.target,u=void 0===a?"_blank":a,s=e.view;return r?i.a.createElement("a",{className:F("textButton")({view:s},n),href:r,onClick:o,target:u},t):i.a.createElement("button",{className:F("textButton")({view:s},n),onClick:o,type:"button"},t)},z=n(56),H=n(5),W=n(13),G=n(194),q=n.n(G);function $(e,t,n,r,o,a,i){try{var u=e[a](i),s=u.value}catch(e){return void n(e)}u.done?t(s):Promise.resolve(s).then(r,o)}function Y(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){$(a,r,o,i,u,"next",e)}function u(e){$(a,r,o,i,u,"throw",e)}i(void 0)}))}}function V(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return X(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return X(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function X(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var K=s()(q.a);t.a=function(e){var t=e.className,n=e.inPopup,r=e.isActive,u=e.name,s=e.onSkip,h=e.onSubmit,m=Object(c.a)(),g=V(Object(a.useState)(!1),2),v=g[0],y=g[1],b=Object(p.a)(n).sendEvent,w=Object(a.useCallback)(Y(o.a.mark((function e(){var t,n;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(H.a)(f.a.UID);case 2:return t=e.sent,e.next=5,Object(H.a)(f.a.USER_ID);case 5:return n=e.sent,e.next=8,b("click","".concat(u,"_signup"),{datetime:Date.now(),extension_brand:l.b,extension_version:Object(W.f)(),uid:t,url:window.location.href,user_id:n,version:l.f});case 8:case"end":return e.stop()}}),e)}))),[u,b]),_=Object(a.useCallback)(Y(o.a.mark((function e(){var t,n;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(H.a)(f.a.UID);case 2:return t=e.sent,e.next=5,Object(H.a)(f.a.USER_ID);case 5:return n=e.sent,e.next=8,b("click","".concat(u,"_login"),{datetime:Date.now(),extension_brand:l.b,extension_version:Object(W.f)(),uid:t,url:window.location.href,user_id:n,version:l.f});case 8:h();case 9:case"end":return e.stop()}}),e)}))),[u,h,b]),O=Object(a.useCallback)(Y(o.a.mark((function e(){var t,n;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(H.a)(f.a.UID);case 2:return t=e.sent,e.next=5,Object(H.a)(f.a.USER_ID);case 5:return n=e.sent,e.next=8,b("click","".concat(u,"_forget"),{datetime:Date.now(),extension_brand:l.b,extension_version:Object(W.f)(),uid:t,url:window.location.href,user_id:n,version:l.f});case 8:y((function(e){return!e}));case 9:case"end":return e.stop()}}),e)}))),[u,b]),E=Object(a.useCallback)(Y(o.a.mark((function e(){var t,n;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(H.a)(f.a.UID);case 2:return t=e.sent,e.next=5,Object(H.a)(f.a.USER_ID);case 5:return n=e.sent,e.next=8,b("click","".concat(u,"_later"),{datetime:Date.now(),extension_brand:l.b,extension_version:Object(W.f)(),uid:t,url:window.location.href,user_id:n,version:l.f});case 8:s();case 9:case"end":return e.stop()}}),e)}))),[u,s,b]);return i.a.createElement("div",{className:t},i.a.createElement(z.a,{className:K("title")(),size:"m"},v?m.formatMessage({id:"auth.reset"}):i.a.createElement(i.a.Fragment,null,i.a.createElement("span",{dangerouslySetInnerHTML:{__html:m.formatMessage({id:"auth.authOr"})}}),i.a.createElement(B,{href:d.b.REGISTRATION,onClick:w},m.formatMessage({id:"auth.signUp"})),m.formatMessage({id:"auth.authReason"}))),v?i.a.createElement(T,{submitLabel:m.formatMessage({id:"auth.resetPassword"})}):i.a.createElement(L,{isActive:r,onSubmit:_}),i.a.createElement("div",null,i.a.createElement(B,{className:K("link")(),onClick:O},v?m.formatMessage({id:"auth.rememberPassword"}):m.formatMessage({id:"auth.remindPassword"}))),i.a.createElement("div",null,i.a.createElement(B,{className:K("link")(),onClick:E,view:I.LIGHT},m.formatMessage({id:"auth.loginLater"}))),i.a.createElement("div",null,i.a.createElement("p",{className:K("privacyPolicy")(),dangerouslySetInnerHTML:{__html:m.formatMessage({id:"auth.securityPolicy"},{policyHref:d.b.PRIVACY_POLICY})}})))}},,function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var r=n(21),o=n(14);function a(e){Object(o.a)(1,arguments);var t=Object(r.a)(e);return t.setHours(0,0,0,0),t}},,,function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return s}));var r=n(15),o=n(41),a={nowSeconds:function(){return Date.now()/1e3}};var i=Object(o.b)()?function(){try{return Object(o.a)(e,"perf_hooks").performance}catch(e){return}}():function(){var e=Object(r.e)().performance;if(e&&e.now)return{now:function(){return e.now()},timeOrigin:Date.now()-e.now()}}(),u=void 0===i?a:{nowSeconds:function(){return(i.timeOrigin+i.now())/1e3}},s=a.nowSeconds.bind(a);u.nowSeconds.bind(u),function(){var e=Object(r.e)().performance;if(e)e.timeOrigin?e.timeOrigin:e.timing&&e.timing.navigationStart||Date.now()}()}).call(this,n(57)(e))},,,function(e,t,n){},,function(e,t,n){"use strict";var r=n(65);n(28);var o=n(0),a=n.n(o),i=n(24),u=n.n(i),s=!1,c=a.a.createContext(null),l=function(e){var t,n;function o(t,n){var r;r=e.call(this,t,n)||this;var o,a=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?a?(o="exited",r.appearStatus="entering"):o="entered":o=t.unmountOnExit||t.mountOnEnter?"unmounted":"exited",r.state={status:o},r.nextCallback=null,r}n=e,(t=o).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,o.getDerivedStateFromProps=function(e,t){return e.in&&"unmounted"===t.status?{status:"exited"}:null};var i=o.prototype;return i.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},i.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?"entering"!==n&&"entered"!==n&&(t="entering"):"entering"!==n&&"entered"!==n||(t="exiting")}this.updateStatus(!1,t)},i.componentWillUnmount=function(){this.cancelNextCallback()},i.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},i.updateStatus=function(e,t){void 0===e&&(e=!1),null!==t?(this.cancelNextCallback(),"entering"===t?this.performEnter(e):this.performExit()):this.props.unmountOnExit&&"exited"===this.state.status&&this.setState({status:"unmounted"})},i.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,o=this.props.nodeRef?[r]:[u.a.findDOMNode(this),r],a=o[0],i=o[1],c=this.getTimeouts(),l=r?c.appear:c.enter;!e&&!n||s?this.safeSetState({status:"entered"},(function(){t.props.onEntered(a)})):(this.props.onEnter(a,i),this.safeSetState({status:"entering"},(function(){t.props.onEntering(a,i),t.onTransitionEnd(l,(function(){t.safeSetState({status:"entered"},(function(){t.props.onEntered(a,i)}))}))})))},i.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:u.a.findDOMNode(this);t&&!s?(this.props.onExit(r),this.safeSetState({status:"exiting"},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))},i.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},i.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},i.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},i.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:u.a.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var o=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],a=o[0],i=o[1];this.props.addEndListener(a,i)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},i.render=function(){var e=this.state.status;if("unmounted"===e)return null;var t=this.props,n=t.children,o=(t.in,t.mountOnEnter,t.unmountOnExit,t.appear,t.enter,t.exit,t.timeout,t.addEndListener,t.onEnter,t.onEntering,t.onEntered,t.onExit,t.onExiting,t.onExited,t.nodeRef,Object(r.a)(t,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return a.a.createElement(c.Provider,{value:null},"function"==typeof n?n(e,o):a.a.cloneElement(a.a.Children.only(n),o))},o}(a.a.Component);function f(){}l.contextType=c,l.propTypes={},l.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:f,onEntering:f,onEntered:f,onExit:f,onExiting:f,onExited:f},l.UNMOUNTED="unmounted",l.EXITED="exited",l.ENTERING="entering",l.ENTERED="entered",l.EXITING="exiting";t.a=l},function(e,t,n){e.exports={step:"Step__step--1hki9"}},,,function(e,t,n){e.exports={"step-wrapper":"StepWizard__step-wrapper--2ur2h",step:"StepWizard__step--1c5ad",active:"StepWizard__active--15GrZ"}},,function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(29),o=n(21),a=n(14);function i(e,t){Object(a.a)(2,arguments);var n=Object(o.a)(e),i=Object(r.a)(t);return isNaN(i)?new Date(NaN):i?(n.setDate(n.getDate()+i),n):n}},,,,,,,,,function(e,t,n){e.exports={languageSwitcher:"AuthStep__languageSwitcher--2iK9w"}},function(e,t,n){e.exports={orderedList:"OrderedList__orderedList--vsdFj",item:"OrderedList__item--2hSG9"}},function(e,t,n){e.exports={languageSwitcher:"EconomyStep__languageSwitcher--2AX5o",title:"EconomyStep__title--3_W9M",buttons:"EconomyStep__buttons--16F0I",button:"EconomyStep__button--7lRBk"}},function(e,t,n){e.exports={languageSwitcher:"InstructionsStep__languageSwitcher--1eqMC",logo:"InstructionsStep__logo--1TtRC",title:"InstructionsStep__title--zgoF3",button:"InstructionsStep__button--1-YSu"}},function(e,t,n){e.exports={welcome:"WelcomeStep__welcome--38IBQ",languageSwitcher:"WelcomeStep__languageSwitcher--3wV7e",logo:"WelcomeStep__logo--2THVR",title:"WelcomeStep__title--3nDPT",text:"WelcomeStep__text--164He",button:"WelcomeStep__button--uGROV"}},function(e,t,n){e.exports={onBoarding:"OnBoarding__onBoarding--S6Ke3",exiting:"OnBoarding__exiting--3kXhf",exited:"OnBoarding__exited--h0YqG",entered:"OnBoarding__entered--39jGy",languageSwitcher:"OnBoarding__languageSwitcher--1YIhZ"}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.d(t,"a",(function(){return X}));var r=n(21),o=n(14);function a(e){Object(o.a)(1,arguments);var t=Object(r.a)(e);return!isNaN(t)}var i={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function u(e){return function(t){var n=t||{},r=n.width?String(n.width):e.defaultWidth;return e.formats[r]||e.formats[e.defaultWidth]}}var s={date:u({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:u({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:u({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},c={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function l(e){return function(t,n){var r,o=n||{};if("formatting"===(o.context?String(o.context):"standalone")&&e.formattingValues){var a=e.defaultFormattingWidth||e.defaultWidth,i=o.width?String(o.width):a;r=e.formattingValues[i]||e.formattingValues[a]}else{var u=e.defaultWidth,s=o.width?String(o.width):e.defaultWidth;r=e.values[s]||e.values[u]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function f(e){return function(t,n){var r=String(t),o=n||{},a=o.width,i=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],u=r.match(i);if(!u)return null;var s,c=u[0],l=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth];return s="[object Array]"===Object.prototype.toString.call(l)?function(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}(l,(function(e){return e.test(c)})):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}(l,(function(e){return e.test(c)})),s=e.valueCallback?e.valueCallback(s):s,{value:s=o.valueCallback?o.valueCallback(s):s,rest:r.slice(c.length)}}}var d,p={code:"en-US",formatDistance:function(e,t,n){var r;return n=n||{},r="string"==typeof i[e]?i[e]:1===t?i[e].one:i[e].other.replace("{{count}}",t),n.addSuffix?n.comparison>0?"in "+r:r+" ago":r},formatLong:s,formatRelative:function(e,t,n,r){return c[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:l({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:l({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:l({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:l({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:l({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(d={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e,t){var n=String(e),r=t||{},o=n.match(d.matchPattern);if(!o)return null;var a=o[0],i=n.match(d.parsePattern);if(!i)return null;var u=d.valueCallback?d.valueCallback(i[0]):i[0];return{value:u=r.valueCallback?r.valueCallback(u):u,rest:n.slice(a.length)}}),era:f({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:f({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:f({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:f({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:f({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}},h=n(29),m=n(195);function g(e,t){Object(o.a)(2,arguments);var n=Object(h.a)(t);return Object(m.a)(e,-n)}function v(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}var y={y:function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return v("yy"===t?r%100:r,t.length)},M:function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):v(n+1,2)},d:function(e,t){return v(e.getUTCDate(),t.length)},a:function(e,t){var n=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":case"aaa":return n.toUpperCase();case"aaaaa":return n[0];case"aaaa":default:return"am"===n?"a.m.":"p.m."}},h:function(e,t){return v(e.getUTCHours()%12||12,t.length)},H:function(e,t){return v(e.getUTCHours(),t.length)},m:function(e,t){return v(e.getUTCMinutes(),t.length)},s:function(e,t){return v(e.getUTCSeconds(),t.length)},S:function(e,t){var n=t.length,r=e.getUTCMilliseconds();return v(Math.floor(r*Math.pow(10,n-3)),t.length)}};function b(e){Object(o.a)(1,arguments);var t=1,n=Object(r.a)(e),a=n.getUTCDay(),i=(a<t?7:0)+a-t;return n.setUTCDate(n.getUTCDate()-i),n.setUTCHours(0,0,0,0),n}function w(e){Object(o.a)(1,arguments);var t=Object(r.a)(e),n=t.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(n+1,0,4),a.setUTCHours(0,0,0,0);var i=b(a),u=new Date(0);u.setUTCFullYear(n,0,4),u.setUTCHours(0,0,0,0);var s=b(u);return t.getTime()>=i.getTime()?n+1:t.getTime()>=s.getTime()?n:n-1}function _(e){Object(o.a)(1,arguments);var t=w(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var r=b(n);return r}function O(e,t){Object(o.a)(1,arguments);var n=t||{},a=n.locale,i=a&&a.options&&a.options.weekStartsOn,u=null==i?0:Object(h.a)(i),s=null==n.weekStartsOn?u:Object(h.a)(n.weekStartsOn);if(!(s>=0&&s<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=Object(r.a)(e),l=c.getUTCDay(),f=(l<s?7:0)+l-s;return c.setUTCDate(c.getUTCDate()-f),c.setUTCHours(0,0,0,0),c}function E(e,t){Object(o.a)(1,arguments);var n=Object(r.a)(e,t),a=n.getUTCFullYear(),i=t||{},u=i.locale,s=u&&u.options&&u.options.firstWeekContainsDate,c=null==s?1:Object(h.a)(s),l=null==i.firstWeekContainsDate?c:Object(h.a)(i.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=new Date(0);f.setUTCFullYear(a+1,0,l),f.setUTCHours(0,0,0,0);var d=O(f,t),p=new Date(0);p.setUTCFullYear(a,0,l),p.setUTCHours(0,0,0,0);var m=O(p,t);return n.getTime()>=d.getTime()?a+1:n.getTime()>=m.getTime()?a:a-1}function S(e,t){Object(o.a)(1,arguments);var n=t||{},r=n.locale,a=r&&r.options&&r.options.firstWeekContainsDate,i=null==a?1:Object(h.a)(a),u=null==n.firstWeekContainsDate?i:Object(h.a)(n.firstWeekContainsDate),s=E(e,t),c=new Date(0);c.setUTCFullYear(s,0,u),c.setUTCHours(0,0,0,0);var l=O(c,t);return l}var x="midnight",j="noon",k="morning",T="afternoon",C="evening",A="night";function N(e,t){var n=e>0?"-":"+",r=Math.abs(e),o=Math.floor(r/60),a=r%60;if(0===a)return n+String(o);var i=t||"";return n+String(o)+i+v(a,2)}function P(e,t){return e%60==0?(e>0?"-":"+")+v(Math.abs(e)/60,2):R(e,t)}function R(e,t){var n=t||"",r=e>0?"-":"+",o=Math.abs(e);return r+v(Math.floor(o/60),2)+n+v(o%60,2)}var I={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});case"GGGG":default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),o=r>0?r:1-r;return n.ordinalNumber(o,{unit:"year"})}return y.y(e,t)},Y:function(e,t,n,r){var o=E(e,r),a=o>0?o:1-o;return"YY"===t?v(a%100,2):"Yo"===t?n.ordinalNumber(a,{unit:"year"}):v(a,t.length)},R:function(e,t){return v(w(e),t.length)},u:function(e,t){return v(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return v(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return v(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return y.M(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return v(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,a){var i=function(e,t){Object(o.a)(1,arguments);var n=Object(r.a)(e),a=O(n,t).getTime()-S(n,t).getTime();return Math.round(a/6048e5)+1}(e,a);return"wo"===t?n.ordinalNumber(i,{unit:"week"}):v(i,t.length)},I:function(e,t,n){var a=function(e){Object(o.a)(1,arguments);var t=Object(r.a)(e),n=b(t).getTime()-_(t).getTime();return Math.round(n/6048e5)+1}(e);return"Io"===t?n.ordinalNumber(a,{unit:"week"}):v(a,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):y.d(e,t)},D:function(e,t,n){var a=function(e){Object(o.a)(1,arguments);var t=Object(r.a)(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var a=t.getTime(),i=n-a;return Math.floor(i/864e5)+1}(e);return"Do"===t?n.ordinalNumber(a,{unit:"dayOfYear"}):v(a,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});case"EEEE":default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(a);case"ee":return v(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});case"eeee":default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(a);case"cc":return v(a,t.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});case"cccc":default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),o=0===r?7:r;switch(t){case"i":return String(o);case"ii":return v(o,t.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});case"iiii":default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,o=e.getUTCHours();switch(r=12===o?j:0===o?x:o/12>=1?"pm":"am",t){case"b":case"bb":case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,o=e.getUTCHours();switch(r=o>=17?C:o>=12?T:o>=4?k:A,t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return y.h(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):y.H(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):v(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):v(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):y.m(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):y.s(e,t)},S:function(e,t){return y.S(e,t)},X:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();if(0===o)return"Z";switch(t){case"X":return P(o);case"XXXX":case"XX":return R(o);case"XXXXX":case"XXX":default:return R(o,":")}},x:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return P(o);case"xxxx":case"xx":return R(o);case"xxxxx":case"xxx":default:return R(o,":")}},O:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+N(o,":");case"OOOO":default:return"GMT"+R(o,":")}},z:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+N(o,":");case"zzzz":default:return"GMT"+R(o,":")}},t:function(e,t,n,r){var o=r._originalDate||e;return v(Math.floor(o.getTime()/1e3),t.length)},T:function(e,t,n,r){return v((r._originalDate||e).getTime(),t.length)}};function D(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});case"PPPP":default:return t.date({width:"full"})}}function L(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});case"pppp":default:return t.time({width:"full"})}}var M={p:L,P:function(e,t){var n,r=e.match(/(P+)(p+)?/),o=r[1],a=r[2];if(!a)return D(e,t);switch(o){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;case"PPPP":default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",D(o,t)).replace("{{time}}",L(a,t))}},U=n(182),F=["D","DD"],B=["YY","YYYY"];function z(e){return-1!==F.indexOf(e)}function H(e){return-1!==B.indexOf(e)}function W(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var G=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,q=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,$=/^'([^]*?)'?$/,Y=/''/g,V=/[a-zA-Z]/;function X(e,t,n){Object(o.a)(2,arguments);var i=String(t),u=n||{},s=u.locale||p,c=s.options&&s.options.firstWeekContainsDate,l=null==c?1:Object(h.a)(c),f=null==u.firstWeekContainsDate?l:Object(h.a)(u.firstWeekContainsDate);if(!(f>=1&&f<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=s.options&&s.options.weekStartsOn,m=null==d?0:Object(h.a)(d),v=null==u.weekStartsOn?m:Object(h.a)(u.weekStartsOn);if(!(v>=0&&v<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!s.localize)throw new RangeError("locale must contain localize property");if(!s.formatLong)throw new RangeError("locale must contain formatLong property");var y=Object(r.a)(e);if(!a(y))throw new RangeError("Invalid time value");var b=Object(U.a)(y),w=g(y,b),_={firstWeekContainsDate:f,weekStartsOn:v,locale:s,_originalDate:y},O=i.match(q).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,M[t])(e,s.formatLong,_):e})).join("").match(G).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return K(n);var o=I[r];if(o)return!u.useAdditionalWeekYearTokens&&H(n)&&W(n,t,e),!u.useAdditionalDayOfYearTokens&&z(n)&&W(n,t,e),o(w,n,s.localize,_);if(r.match(V))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("");return O}function K(e){return e.match($)[1].replace(Y,"'")}},,,function(e,t,n){"use strict";n.r(t);var r=n(2),o=n.n(r),a=n(0),i=n.n(a),u=n(24),s=n.n(u),c=n(189),l=n(120),f=n(8),d=n(12),p=n(35),h=n(7),m=n(4),g=n(3),v=n.n(g),y=n(207),b=n(33),w=n(187),_=(n(205),n(34)),O=n(197),E=n(69),S=n(68),x=n(181),j=n(5),k=n(13),T=n(222),C=n.n(T);function A(e,t,n,r,o,a,i){try{var u=e[a](i),s=u.value}catch(e){return void n(e)}u.done?t(s):Promise.resolve(s).then(r,o)}function N(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){A(a,r,o,i,u,"next",e)}function u(e){A(a,r,o,i,u,"throw",e)}i(void 0)}))}}var P=v()(C.a),R=function(e){var t=e.isActive,n=e.nextStep,r=Object(_.a)(!1).sendEvent;Object(a.useEffect)((function(){t&&N(o.a.mark((function e(){var t;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(j.a)(m.a.UID);case 2:return t=e.sent,e.next=5,r("show","auth",{datetime:Date.now(),extension_brand:d.b,extension_version:Object(k.f)(),uid:t,url:window.location.href,version:d.f});case 5:case"end":return e.stop()}}),e)})))()}),[t,r]);var u=Object(a.useContext)(w.a),s=function(){var e=N(o.a.mark((function e(){var t;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(j.a)(m.a.LIVE_SETTINGS);case 2:(t=e.sent)&&t.hidden?u():n&&n();case 4:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();return i.a.createElement(x.a,null,i.a.createElement("div",{className:P("languageSwitcher")()},i.a.createElement(E.a,null)),i.a.createElement(S.a,{height:46,size:"m"}),i.a.createElement(O.a,{isActive:t,name:"auth",onSkip:u,onSubmit:s}))},I=n(115),D=n(16),L=n(223),M=n.n(L);function U(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function F(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?U(Object(n),!0).forEach((function(t){B(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):U(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function B(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var z=v()(M.a),H=function(e){var t=e.children;return i.a.createElement("ol",{className:z("orderedList")()},i.a.Children.map(t,(function(e){var t=F(F({},e.props),{},{className:z("item")()});return i.a.cloneElement(e,t)})))},W=n(56),G=n(224),q=n.n(G);function $(e,t,n,r,o,a,i){try{var u=e[a](i),s=u.value}catch(e){return void n(e)}u.done?t(s):Promise.resolve(s).then(r,o)}function Y(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){$(a,r,o,i,u,"next",e)}function u(e){$(a,r,o,i,u,"throw",e)}i(void 0)}))}}var V=v()(q.a),X=function(e){var t=e.goToStep,n=void 0===t?k.g:t,r=e.isActive,u=e.nextStep,s=void 0===u?k.g:u,c=Object(I.a)(),l=Object(_.a)(!1).sendEvent;Object(a.useEffect)((function(){r&&Y(o.a.mark((function e(){var t;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(j.a)(m.a.UID);case 2:return t=e.sent,e.next=5,l("show","welcome_1",{datetime:Date.now(),extension_brand:d.b,extension_version:Object(k.f)(),uid:t,url:window.location.href,version:d.f});case 5:case"end":return e.stop()}}),e)})))()}),[r,l]);var h=Object(a.useCallback)(Y(o.a.mark((function e(){var t;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(j.a)(m.a.UID);case 2:return t=e.sent,e.next=5,l("click","".concat("welcome_1","_skip"),{datetime:Date.now(),extension_brand:d.b,extension_version:Object(k.f)(),uid:t,url:window.location.href,version:d.f});case 5:n(3);case 6:case"end":return e.stop()}}),e)}))),[n,l]),g=Object(a.useCallback)(Y(o.a.mark((function e(){var t;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(j.a)(m.a.UID);case 2:return t=e.sent,e.next=5,l("click","".concat("welcome_1","_next"),{datetime:Date.now(),extension_brand:d.b,extension_version:Object(k.f)(),uid:t,url:window.location.href,version:d.f});case 5:s();case 6:case"end":return e.stop()}}),e)}))),[s,l]);return i.a.createElement(x.a,{style:{backgroundImage:"url(".concat(f.browser.runtime.getURL(p.a.images.BG_ECONOMY_STEP),")")}},i.a.createElement("div",{className:V("languageSwitcher")()},i.a.createElement(E.a,null)),i.a.createElement(S.a,{height:46,size:"m"}),i.a.createElement(W.a,{className:V("title")(),size:"m"},c.formatMessage({id:"economy.title"})),i.a.createElement(H,null,i.a.createElement("li",null,c.formatMessage({id:"economy.list.first"})),i.a.createElement("li",null,c.formatMessage({id:"economy.list.second"})),i.a.createElement("li",null,c.formatMessage({id:"economy.list.third"}))),i.a.createElement("div",{className:V("buttons")()},i.a.createElement(D.d,{className:V("button")(),onClick:h,size:D.a.M,type:D.b.BUTTON,view:D.c.LIGHT},c.formatMessage({id:"economy.skipButton"})),i.a.createElement(D.d,{className:V("button")(),onClick:g,size:D.a.M,type:D.b.BUTTON},c.formatMessage({id:"economy.nextButton"}))))},K=n(199),Q=n(545),Z=n(213),J=n(19),ee=n(225),te=n.n(ee);function ne(e,t,n,r,o,a,i){try{var u=e[a](i),s=u.value}catch(e){return void n(e)}u.done?t(s):Promise.resolve(s).then(r,o)}function re(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){ne(a,r,o,i,u,"next",e)}function u(e){ne(a,r,o,i,u,"throw",e)}i(void 0)}))}}var oe=v()(te.a),ae=function(e){var t=e.isActive,n=Object(I.a)(),r=Object(_.a)(!1).sendEvent;Object(a.useEffect)((function(){t&&re(o.a.mark((function e(){var t,n;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(j.a)(m.a.UID);case 2:return t=e.sent,e.next=5,Object(j.a)(m.a.USER_ID);case 5:return n=e.sent,e.next=8,r("show","onboarding",{datetime:Date.now(),extension_brand:d.b,extension_version:Object(k.f)(),uid:t,url:window.location.href,user_id:n,version:d.f});case 8:case"end":return e.stop()}}),e)})))()}),[t,r]);var u=Object(a.useContext)(w.a),s=Object(a.useCallback)(re(o.a.mark((function e(){var t,n,a,i,s,c;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(j.a)(m.a.UID);case 2:return t=e.sent,e.next=5,Object(j.a)(m.a.LANGUAGE);case 5:return n=e.sent,e.next=8,Object(j.a)(m.a.USER_ID);case 8:return a=e.sent,e.next=11,r("click","".concat("onboarding","_example"),{datetime:Date.now(),extension_brand:d.b,extension_version:Object(k.f)(),uid:t,url:window.location.href,user_id:a,version:d.f});case 11:i=Object(K.a)(new Date),s=Object(Q.a)(Object(Z.a)(i,60),"yyyy-MM-dd"),c=Object(Q.a)(Object(Z.a)(i,61),"yyyy-MM-dd"),window.open("".concat(J.b.FIRST_EXAMPLE,".").concat(n===h.a.RU?"ru":"en-GB",".html?checkin=").concat(s,";checkout=").concat(c,";room1=A,A")),u();case 16:case"end":return e.stop()}}),e)}))),[r,u]),c=Object(a.useCallback)(re(o.a.mark((function e(){var t,n;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(j.a)(m.a.UID);case 2:return t=e.sent,e.next=5,Object(j.a)(m.a.USER_ID);case 5:return n=e.sent,e.next=8,r("click","".concat("onboarding","_skip"),{datetime:Date.now(),extension_brand:d.b,extension_version:Object(k.f)(),uid:t,url:window.location.href,user_id:n,version:d.f});case 8:u();case 9:case"end":return e.stop()}}),e)}))),[r,u]);return i.a.createElement(x.a,{style:{backgroundImage:"url(".concat(f.browser.runtime.getURL(p.a.images.BG_INSTRUCTIONS_STEP),")")}},i.a.createElement("div",{className:oe("languageSwitcher")()},i.a.createElement(E.a,null)),i.a.createElement(S.a,{className:oe("logo")(),height:46,size:"m"}),i.a.createElement(W.a,{className:oe("title")(),size:"m"},n.formatMessage({id:"instructions.title"})),i.a.createElement(W.a,{className:oe("title")(),size:"s"},n.formatMessage({id:"instructions.subtitle"})),i.a.createElement(H,null,i.a.createElement("li",null,n.formatMessage({id:"instructions.list.first"})),i.a.createElement("li",null,n.formatMessage({id:"instructions.list.second"})),i.a.createElement("li",null,n.formatMessage({id:"instructions.list.third"})),i.a.createElement("li",null,n.formatMessage({id:"instructions.list.fourth"})),i.a.createElement("li",null,n.formatMessage({id:"instructions.list.fifth"}))),i.a.createElement(D.d,{className:oe("button")(),onClick:s,size:D.a.M,type:D.b.BUTTON,wide:!0},n.formatMessage({id:"instructions.exampleButton"})),i.a.createElement(D.d,{className:oe("button")(),onClick:c,size:D.a.M,type:D.b.BUTTON,view:D.c.LIGHT,wide:!0},n.formatMessage({id:"instructions.skipButton"})))},ie=n(188),ue=n.n(ie),se=n(211),ce=n.n(se);function le(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function fe(e,t){return(fe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function de(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=me(e);if(t){var o=me(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return pe(this,n)}}function pe(e,t){return!t||"object"!==ge(t)&&"function"!=typeof t?he(e):t}function he(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function me(e){return(me=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ge(e){return(ge="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var ve=function(){return decodeURI(window.location.hash).replace(/^#/,"")},ye=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&fe(e,t)}(a,e);var t,n,r,o=de(a);function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=o.call(this,e)).state=t.initialState(),t.initialState=t.initialState.bind(he(t)),t.getTransitions=t.getTransitions.bind(he(t)),t.onHashChange=t.onHashChange.bind(he(t)),t.isInvalidStep=t.isInvalidStep.bind(he(t)),t.setActiveStep=t.setActiveStep.bind(he(t)),t.onStepChange=t.onStepChange.bind(he(t)),t.firstStep=t.firstStep.bind(he(t)),t.lastStep=t.lastStep.bind(he(t)),t.nextStep=t.nextStep.bind(he(t)),t.previousStep=t.previousStep.bind(he(t)),t.goToStep=t.goToStep.bind(he(t)),t.updateHash=t.updateHash.bind(he(t)),t}return t=a,(n=[{key:"componentDidMount",value:function(){var e=this.props,t=e.instance;e.isHashEnabled&&window.addEventListener("hashchange",this.onHashChange),t&&t(this)}},{key:"componentWillUnmount",value:function(){this.props.isHashEnabled&&window.removeEventListener("hashchange",this.onHashChange)}},{key:"onHashChange",value:function(){var e=this.state.hashKeys[ve()];void 0!==e&&this.setActiveStep(e)}},{key:"onStepChange",value:function(e){var t=this.state.activeStep,n=this.props,r=n.isHashEnabled,o=n.onStepChange;o&&o(e),r&&this.updateHash(t)}},{key:"getTransitions",value:function(){return this.props.transitions||{enterRight:"".concat(ue.a.animated," ").concat(ue.a.fadeInRight),enterLeft:"".concat(ue.a.animated," ").concat(ue.a.fadeInLeft),exitRight:"".concat(ue.a.animated," ").concat(ue.a.fadeOutRight),exitLeft:"".concat(ue.a.animated," ").concat(ue.a.fadeOutLeft)}}},{key:"setActiveStep",value:function(e){var t=this,n=this.state.activeStep;if(n!==e)if(this.isInvalidStep(e))console.error("".concat(e+1," is an invalid step"));else{var r=this.state.classes,o=this.getTransitions();n<e?(r[n]=o.exitLeft||"",r[e]=o.enterRight||""):(r[n]=o.exitRight||"",r[e]=o.enterLeft||""),this.setState({activeStep:e,classes:r},(function(){t.onStepChange({previousStep:n+1,activeStep:e+1})}))}}},{key:"isInvalidStep",value:function(e){var t=this.props.children;return e<0||e>=t.length}},{key:"initialState",value:function(){var e={activeStep:0,classes:{},hashKeys:{}},t=this.props,n=t.children,r=t.initialStep,o=void 0===r?1:r,a=t.isHashEnabled,u=void 0!==a&&a,s=t.transitions,c=void 0===s?"":s,l="object"===("undefined"==typeof window?"undefined":ge(window))?ve():"";i.a.Children.toArray(n).forEach((function(t,n){e.hashKeys[n]=t.props&&t.props.hashKey||"step".concat(n+1),e.hashKeys[e.hashKeys[n]]=n}));var f=o-1;return f&&n[f]&&(e.activeStep=f),u&&l&&void 0!==e.hashKeys[l]&&(e.activeStep=e.hashKeys[l]),c&&(e.classes[e.activeStep]=c.intro||""),e}},{key:"firstStep",value:function(){this.goToStep(1)}},{key:"lastStep",value:function(){var e=this.props.children;this.goToStep(e.length)}},{key:"nextStep",value:function(){var e=this.state.activeStep;this.setActiveStep(e+1)}},{key:"previousStep",value:function(){var e=this.state.activeStep;this.setActiveStep(e-1)}},{key:"goToStep",value:function(e){this.setActiveStep(e-1)}},{key:"updateHash",value:function(e){var t=this.state.hashKeys;window.location.hash="".concat(t[e])}},{key:"render",value:function(){var e=this.state.activeStep,t=this.props,n=t.children,r=t.className,o=t.isLazyMount,a=t.nav,u={currentStep:e+1,totalSteps:n.length,nextStep:this.nextStep,previousStep:this.previousStep,goToStep:this.goToStep,firstStep:this.firstStep,lastStep:this.lastStep,isActive:!1,transitions:""},s=this.state.classes,c=i.a.Children.map(n,(function(t,n){return u.isActive=n===e,u.transitions=s[n],!o||o&&u.isActive?i.a.createElement(be,u,"function"==typeof(r=t.type)||"object"===ge(r)?i.a.cloneElement(t,u):t):null;var r}));return i.a.createElement("div",{className:r},a&&i.a.cloneElement(a,u),i.a.createElement("div",{className:ce.a["step-wrapper"]},c))}}])&&le(t.prototype,n),r&&le(t,r),a}(a.PureComponent),be=function(e){var t=e.children,n=e.isActive,r=void 0!==n&&n,o=e.transitions,a=void 0===o?"":o;return i.a.createElement("div",{className:"".concat(ce.a.step," ").concat(a," ").concat(r?ce.a.active:"").trim()},t)},we=n(226),_e=n.n(we);function Oe(e,t,n,r,o,a,i){try{var u=e[a](i),s=u.value}catch(e){return void n(e)}u.done?t(s):Promise.resolve(s).then(r,o)}function Ee(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Oe(a,r,o,i,u,"next",e)}function u(e){Oe(a,r,o,i,u,"throw",e)}i(void 0)}))}}var Se,xe=v()(_e.a),je=function(e){var t=e.isActive,n=e.nextStep,r=void 0===n?k.g:n,u=Object(I.a)(),s=Object(_.a)(!1).sendEvent;Object(a.useEffect)((function(){t&&Ee(o.a.mark((function e(){var t;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(j.a)(m.a.UID);case 2:return t=e.sent,e.next=5,s("show","".concat("welcome","_start"),{datetime:Date.now(),extension_brand:d.b,extension_version:Object(k.f)(),uid:t,url:window.location.href,version:d.f});case 5:case"end":return e.stop()}}),e)})))()}),[t,s]);var c=Object(a.useCallback)(Ee(o.a.mark((function e(){var t;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(j.a)(m.a.UID);case 2:return t=e.sent,e.next=5,s("click","".concat("welcome","_start"),{datetime:Date.now(),extension_brand:d.b,extension_version:Object(k.f)(),uid:t,url:window.location.href,version:d.f});case 5:r();case 6:case"end":return e.stop()}}),e)}))),[r,s]);return i.a.createElement(x.a,{className:xe("welcome")(),style:{backgroundImage:"url(".concat(f.browser.runtime.getURL(p.a.images.BG_WELCOME_STEP),")")}},i.a.createElement("div",{className:xe("languageSwitcher")()},i.a.createElement(E.a,null)),i.a.createElement(S.a,{className:xe("logo")(),height:56,size:"l"}),i.a.createElement(W.a,{className:xe("title")(),size:"l"},u.formatMessage({id:"welcome.title"})),i.a.createElement("p",{className:xe("text")()},u.formatMessage({id:"welcome.text"})),i.a.createElement(D.d,{className:xe("button")(),onClick:c,size:D.a.M,type:D.b.BUTTON},u.formatMessage({id:"welcome.button"})))},ke=n(227),Te=n.n(ke),Ce=v()(Te.a),Ae={entered:Ce("entered")(),exiting:Ce("exiting")(),exited:Ce("exited")()},Ne={enter:100,exit:400},Pe=function(e){var t=e.isLogged,n=e.unMount;return Object(a.useEffect)((function(){return function(){f.browser.runtime.sendMessage({command:b.a.CLOSE_ONBOARDING})}}),[]),Object(a.useEffect)((function(){var e=function(e){return e.stopPropagation()};return document.addEventListener("keypress",e,{capture:!0}),document.addEventListener("keydown",e,{capture:!0}),document.addEventListener("keyup",e,{capture:!0}),document.addEventListener("input",e,{capture:!0}),function(){document.removeEventListener("keypress",e,{capture:!0}),document.removeEventListener("keydown",e,{capture:!0}),document.removeEventListener("keyup",e,{capture:!0}),document.removeEventListener("input",e,{capture:!0})}}),[]),i.a.createElement(w.a.Provider,{value:n},i.a.createElement(y.a,{appear:!0,in:!0,timeout:Ne,unmountOnExit:!0},(function(e){return i.a.createElement("section",{className:Ce("onBoarding")(null,Ae[e]),style:{display:"none"}},t?i.a.createElement(ye,null,i.a.createElement(je,null),i.a.createElement(X,null),i.a.createElement(ae,null)):i.a.createElement(ye,null,i.a.createElement(je,null),i.a.createElement(X,null),i.a.createElement(R,null),i.a.createElement(ae,null)))})))},Re=n(114),Ie=n(46),De=n(89),Le=n(183),Me=n(71),Ue=n(184);function Fe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Be(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Fe(Object(n),!0).forEach((function(t){ze(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Fe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ze(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var He=(ze(Se={},h.a.EN,{lang:"en",messages:Be(Be(Be({"welcome.title":"Thank you for installing!","welcome.text":"Earn more by booking hotels on RateHawk!","welcome.button":"Begin","economy.title":"How the RateHawk extension helps you to earn more","economy.list.first":"You are looking for a hotel in any part of the world","economy.list.second":"We check our price for it","economy.list.third":"If the price on RateHawk is lower, we will send you a notification. You will be just one click away from a bargain price!","economy.skipButton":"Skip","economy.nextButton":"OK","features.title":"What you get","features.list.first":"The opportunity to book a hotel at a more attractive price","features.list.second":"Bonuses: additional promo codes and loyalty points","features.list.third":"A quick tool to compare prices with RateHawk rates","features.skipButton":"Skip","features.nextButton":"Get","instructions.title":"How it works","instructions.subtitle":"Here’s an example to learn from!","instructions.list.first":"We will now transfer you to a third-party hotel booking site","instructions.list.second":"Look at the hotel price on that site","instructions.list.third":"Read the notification of the price on RateHawk","instructions.list.fourth":"Click the button in the notification","instructions.list.fifth":"See just how much cheaper the same room is on RateHawk","instructions.exampleButton":"Watch an example","instructions.skipButton":"Skip"},Le.a[h.a.EN].messages),Me.a[h.a.EN].messages),Ue.a[h.a.EN].messages)}),ze(Se,h.a.RU,{lang:"ru",messages:Be(Be(Be({"welcome.title":"Спасибо за установку!","welcome.text":"Зарабатывайте больше, бронируя отели на RateHawk!","welcome.button":"Начать","economy.title":"Как расширение RateHawk помогает заработать больше","economy.list.first":"Вы ищете отель где угодно","economy.list.second":"Мы проверяем, сколько он стоит у нас","economy.list.third":"Если на RateHawk цена ниже, мы пришлём уведомление.\nОт выгодной цены вас будет отделять всего один клик!","economy.skipButton":"Пропустить","economy.nextButton":"Ok","features.title":"Что вы получите","features.list.first":"Возможность забронировать отель по более выгодной цене","features.list.second":"Бонусы: дополнительные промокоды и баллы лояльности","features.list.third":"Быстрый способ сравнить цены с тарифами RateHawk","features.skipButton":"Пропустить","features.nextButton":"Получить","instructions.title":"Как это работает","instructions.subtitle":"Разберём на примере!","instructions.list.first":"Сейчас переведём вас на сторонний сайт бронирования отелей","instructions.list.second":"Посмотрите на стоимость отеля на этом сайте","instructions.list.third":"Прочитайте уведомление с тарифом на RateHawk","instructions.list.fourth":"Нажмите на кнопку из уведомления","instructions.list.fifth":"Сравните, насколько этот номер дешевле на RateHawk","instructions.exampleButton":"Посмотреть пример","instructions.skipButton":"Пропустить"},Le.a[h.a.RU].messages),Me.a[h.a.RU].messages),Ue.a[h.a.RU].messages)}),Se);function We(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Ge(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Ge(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ge(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function qe(e,t,n,r,o,a,i){try{var u=e[a](i),s=u.value}catch(e){return void n(e)}u.done?t(s):Promise.resolve(s).then(r,o)}function $e(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){qe(a,r,o,i,u,"next",e)}function u(e){qe(a,r,o,i,u,"throw",e)}i(void 0)}))}}document.addEventListener("DOMContentLoaded",(function(){Object(De.a)()})),$e(o.a.mark((function e(){var t,n,r,u,g;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(j.a)(m.a.LANGUAGE);case 2:return t=e.sent,e.next=5,Object(j.a)(m.a.PARTNERS_AUTH_KEY);case 5:n=e.sent,r=Object(k.e)(d.e),u=function(){var e=$e(o.a.mark((function e(){return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",s.a.unmountComponentAtNode(r));case 1:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),g=function(){var e,r,o=We(Object(a.useState)(t),2),s=o[0],d=o[1];return i.a.createElement(l.a.div,null,i.a.createElement(Re.a,null,i.a.createElement("link",{href:f.browser.runtime.getURL(p.a.css.ONBOARDING),rel:"stylesheet"}),i.a.createElement(c.a,{locale:s,messages:null!==(e=null===(r=He[s])||void 0===r?void 0:r.messages)&&void 0!==e?e:He[h.a.EN].messages},i.a.createElement(Ie.a.Provider,{value:{language:s,setLanguage:d}},i.a.createElement(Pe,{isLogged:Boolean(n),unMount:u})))))},s.a.render(i.a.createElement(g,null),r);case 10:case"end":return e.stop()}}),e)})))()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3NtZW0vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnN0YW50cy9zdG9yYWdlLnRzIiwid2VicGFjazovLy8uL3NyYy9oZWxwZXJzL3N0b3JhZ2UudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWludGwvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb25zdGFudHMvbGFuZ3VhZ2VzLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93ZWJleHRlbnNpb24tcG9seWZpbGwtdHMvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9pcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uc3RhbnRzL2NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy91dGlscy50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9taXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL0J1dHRvbi9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL29iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb25zdGFudHMvdXJscy50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW50bC1mb3JtYXQtY2FjaGUvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vdG9EYXRlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9ob29rcy91c2VQcmV2aW91cy50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JbnB1dC9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvcmVkdWNlcnMvdGhlbWUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3RvSW50ZWdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uc3RhbnRzL2NvbW1hbmRzLmpzIiwid2VicGFjazovLy8uL3NyYy9ob29rcy91c2VGdW5uZWwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnN0YW50cy9maWxlcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy9hcGkudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvc3RvcmUudHMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vbm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaW50bC9saWIvY29tcG9uZW50cy9pbmplY3RJbnRsLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0ljb24vSWNvbkNyb3NzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvanMvQmFja2dyb3VuZC9mdW5uZWwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hlbHBlcnMvdGFicy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy9MYW5ndWFnZUNvbnRleHQudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3N0YWNrdHJhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQnV0dG9uSWNvbi9CdXR0b25JY29uLnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9yZWR1Y2Vycy90aGVtZS9jb25zdGFudHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvcmVkdWNlcnMvbDEwbi9jb25zdGFudHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvcmVkdWNlcnMvc2V0dGluZ3MvY29uc3RhbnRzL2luZGV4LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnRsLW1lc3NhZ2Vmb3JtYXQtcGFyc2VyL2xpYi90eXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW50bC1tZXNzYWdlZm9ybWF0LXBhcnNlci9saWIvcGFyc2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnRsLW1lc3NhZ2Vmb3JtYXQtcGFyc2VyL2xpYi9ub3JtYWxpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludGwtbWVzc2FnZWZvcm1hdC1wYXJzZXIvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnRsLW1lc3NhZ2Vmb3JtYXQtcGFyc2VyL2xpYi9za2VsZXRvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW50bC1tZXNzYWdlZm9ybWF0L2xpYi9mb3JtYXR0ZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnRsLW1lc3NhZ2Vmb3JtYXQvbGliL2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludGwtbWVzc2FnZWZvcm1hdC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvRG90c0xvYWRlci9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1RpdGxlL1RpdGxlLnRzeCIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvVG9vbHRpcGVkL1Rvb2x0aXBlZENvbXBvbmVudC9pbnRlcmZhY2VzLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL2hlbHBlcnMvZ2V0UmVmQm91bmRpbmcudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvVG9vbHRpcGVkL1Rvb2x0aXBDb250ZW50L2dldFVwZGF0ZWRDb29yZGluYXRlcy50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9Ub29sdGlwZWQvVG9vbHRpcENvbnRlbnQvaW5kZXgudHN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL1Rvb2x0aXBlZC9Ub29sdGlwZWRDb21wb25lbnQvaW5kZXgudHN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL1Rvb2x0aXBlZC9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvaGVscGVycy90b2dnbGVQYWdlU2Nyb2xsLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL01vZGFsL2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9DYXJkL2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9IaW50L2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ecm9wZG93bi9Ecm9wZG93bi50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSWNvbi9JY29uR2Vhci50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ29udGV4dE1lbnUvQ29udGV4dE1lbnUudHN4Iiwid2VicGFjazovLy8uL3NyYy9ob29rcy91c2VCYWNrZ3JvdW5kUmVxdWVzdEhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvaGVscGVycy90aGVtZS50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9oZWxwZXJzL2FkYXB0aXZlLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tb2RhbC9saWIvaGVscGVycy9zYWZlSFRNTEVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTG9nby9Mb2dvLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9JY29uL0ljb25DaGVjay50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSWNvbi9JY29uRmxhZ0VuLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9JY29uL0ljb25GbGFnUnVzc2lhLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9MYW5ndWFnZVN3aXRjaGVyL0xhbmd1YWdlU3dpdGNoZXIudHN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tb2RhbC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTGFuZ3VhZ2VTd2l0Y2hlci9tZXNzYWdlcy50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhbGxvdy1lcXVhbC9vYmplY3RzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC10aHVuay9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9JY29uL0Nyb3NzLnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvRG90c0xvYWRlci9Eb3RzTG9hZGVyLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9CdXR0b24vQnV0dG9uLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvcG9ueWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL21lbW8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vaW50ZWdyYXRpb25zL2Z1bmN0aW9udG9zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3N5bmNwcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2h1Yi9lc20vc2NvcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2xvZ2dlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS90eXBlcy9lc20vc2Vzc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9odWIvZXNtL3Nlc3Npb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvaHViL2VzbS9odWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vaW50ZWdyYXRpb25zL2luYm91bmRmaWx0ZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vZXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2Rzbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9pbnRlZ3JhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9iYXNlY2xpZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3R5cGVzL2VzbS9zdGF0dXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vdHJhbnNwb3J0cy9ub29wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3R5cGVzL2VzbS9zZXZlcml0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9iYXNlYmFja2VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vc3VwcG9ydHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vdHJhY2VraXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vcGFyc2Vycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2VzbS9ldmVudGJ1aWxkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vcmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3Byb21pc2VidWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vdHJhbnNwb3J0cy9iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2Jyb3dzZXIvZXNtL3RyYW5zcG9ydHMvZmV0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vdHJhbnNwb3J0cy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vYmFja2VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9taW5pbWFsL2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2VzbS9oZWxwZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9pbnN0cnVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2Jyb3dzZXIvZXNtL2ludGVncmF0aW9ucy9icmVhZGNydW1icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2VzbS9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2VzbS9pbnRlZ3JhdGlvbnMvdHJ5Y2F0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vaW50ZWdyYXRpb25zL2dsb2JhbGhhbmRsZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2Jyb3dzZXIvZXNtL2ludGVncmF0aW9ucy9saW5rZWRlcnJvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9lc20vaW50ZWdyYXRpb25zL3VzZXJhZ2VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2VzbS9zZGsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vc2RrLmpzIiwid2VicGFjazovLy8uL3NyYy9oZWxwZXJzL3NlbnRyeS50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9yZWR1Y2Vycy9sMTBuL2luZGV4LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL3JlZHVjZXJzL2F2aWFEZXN0aW5hdGlvbi9jb25zdGFudHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvcmVkdWNlcnMvYXZpYURlc3RpbmF0aW9uL2luZGV4LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL3JlZHVjZXJzL3RyYW5zZmVyRGVzdGluYXRpb24vY29uc3RhbnRzL2luZGV4LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL3JlZHVjZXJzL3RyYW5zZmVyRGVzdGluYXRpb24vaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvcmVkdWNlcnMvZGVzdGluYXRpb24vY29uc3RhbnRzL2luZGV4LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL3JlZHVjZXJzL2Rlc3RpbmF0aW9uL2luZGV4LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL3JlZHVjZXJzL2hvbGlkYXlzL2NvbnN0YW50cy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9yZWR1Y2Vycy9ob2xpZGF5cy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9yZWR1Y2Vycy9jb3VudHJpZXMvY29uc3RhbnRzL2luZGV4LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL3JlZHVjZXJzL2NvdW50cmllcy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9yZWR1Y2Vycy9jaXRpemVuc2hpcC9jb25zdGFudHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvcmVkdWNlcnMvY2l0aXplbnNoaXAvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvcmVkdWNlcnMvc2V0dGluZ3MvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvcmVkdWNlcnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vZGFsL2xpYi9oZWxwZXJzL3RhYmJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tb2RhbC9saWIvaGVscGVycy9hcmlhQXBwSGlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vZGFsL2xpYi9oZWxwZXJzL3BvcnRhbE9wZW5JbnN0YW5jZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvVG9vbHRpcGVkL1Rvb2x0aXBDb250ZW50L1Rvb2x0aXBDb250ZW50LmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9Nb2RhbC9Nb2RhbC5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvQ2FyZC9DYXJkLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9IaW50L0hpbnQuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL0lucHV0L0lucHV0LmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9UaXRsZS9UaXRsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQnV0dG9uSWNvbi9CdXR0b25JY29uLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ecm9wZG93bi9Ecm9wZG93bi5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ29udGV4dE1lbnUvQ29udGV4dE1lbnUuY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0xhbmd1YWdlU3dpdGNoZXIvTGFuZ3VhZ2VTd2l0Y2hlci5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTG9nby9Mb2dvLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvcmVkdWNlcnMvdGhlbWUvYWN0aW9ucy9zZXRUaGVtZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uc3RhbnRzL3RoZW1lLnRzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1RoZW1lL1RoZW1lLnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaW50bC9saWIvY29tcG9uZW50cy91c2VJbnRsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2hhZG93L3JlYWN0LXNoYWRvdy5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93ZWJleHRlbnNpb24tcG9seWZpbGwvZGlzdC9icm93c2VyLXBvbHlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0F4aW9zRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ludGwtdXRpbHMvbGliL2ludmFyaWFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9kYWwvbGliL2NvbXBvbmVudHMvTW9kYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vZGFsL2xpYi9jb21wb25lbnRzL01vZGFsUG9ydGFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tb2RhbC9saWIvaGVscGVycy9mb2N1c01hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vZGFsL2xpYi9oZWxwZXJzL3Njb3BlVGFiLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93YXJuaW5nL3dhcm5pbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V4ZW52L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tb2RhbC9saWIvaGVscGVycy9jbGFzc0xpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vZGFsL2xpYi9oZWxwZXJzL2JvZHlUcmFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1saWZlY3ljbGVzLWNvbXBhdC9yZWFjdC1saWZlY3ljbGVzLWNvbXBhdC5lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50cy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnRzL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudHMvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TdGVwL1N0ZXAudHN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0F1dGgvbWVzc2FnZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2lnbkluL21lc3NhZ2VzLnRzIiwid2VicGFjazovLy8uL3NyYy9oZWxwZXJzL1VuTW91bnRDb250ZXh0LnRzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL09uQm9hcmRpbmcvY29tcG9uZW50cy9TdGVwV2l6YXJkL0FuaW1hdGVkLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaW50bC9saWIvZm9ybWF0dGVycy9udW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWludGwvbGliL2Zvcm1hdHRlcnMvcmVsYXRpdmVUaW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pbnRsL2xpYi9mb3JtYXR0ZXJzL2RhdGVUaW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pbnRsL2xpYi9mb3JtYXR0ZXJzL3BsdXJhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaW50bC9saWIvZm9ybWF0dGVycy9tZXNzYWdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pbnRsL2xpYi9mb3JtYXR0ZXJzL2xpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWludGwvbGliL2Zvcm1hdHRlcnMvZGlzcGxheU5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWludGwvbGliL2NvbXBvbmVudHMvcHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRXJyb3JNZXNzYWdlL0Vycm9yTWVzc2FnZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUmVzdG9yZVBhc3N3b3JkL1Jlc3RvcmVQYXNzd29yZC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2lnbkluL1NpZ25Jbi5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVGV4dEJ1dHRvbi9UZXh0QnV0dG9uLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BdXRoL0F1dGguY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0Vycm9yTWVzc2FnZS9FcnJvck1lc3NhZ2UudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1Jlc3RvcmVQYXNzd29yZC9SZXN0b3JlUGFzc3dvcmQudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NpZ25Jbi9TaWduSW4udHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1RleHRCdXR0b24vVGV4dEJ1dHRvbi50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQXV0aC9BdXRoLnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3N0YXJ0T2ZEYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3RpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TdGVwL1N0ZXAuY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL09uQm9hcmRpbmcvY29tcG9uZW50cy9TdGVwV2l6YXJkL1N0ZXBXaXphcmQuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vYWRkRGF5cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9PbkJvYXJkaW5nL2NvbXBvbmVudHMvQXV0aFN0ZXAvQXV0aFN0ZXAuY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL09yZGVyZWRMaXN0L09yZGVyZWRMaXN0LmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9PbkJvYXJkaW5nL2NvbXBvbmVudHMvRWNvbm9teVN0ZXAvRWNvbm9teVN0ZXAuY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL09uQm9hcmRpbmcvY29tcG9uZW50cy9JbnN0cnVjdGlvbnNTdGVwL0luc3RydWN0aW9uc1N0ZXAuY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL09uQm9hcmRpbmcvY29tcG9uZW50cy9XZWxjb21lU3RlcC9XZWxjb21lU3RlcC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvT25Cb2FyZGluZy9PbkJvYXJkaW5nLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzVmFsaWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0TG9uZy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbWF0Y2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbG9jYWxpemUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdWJNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZm9ybWF0L2xpZ2h0Rm9ybWF0dGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvZm9ybWF0dGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDSVNPV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2Zvcm1hdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9PbkJvYXJkaW5nL2NvbXBvbmVudHMvQXV0aFN0ZXAvQXV0aFN0ZXAudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL09yZGVyZWRMaXN0L09yZGVyZWRMaXN0LnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9PbkJvYXJkaW5nL2NvbXBvbmVudHMvRWNvbm9teVN0ZXAvRWNvbm9teVN0ZXAudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL09uQm9hcmRpbmcvY29tcG9uZW50cy9JbnN0cnVjdGlvbnNTdGVwL0luc3RydWN0aW9uc1N0ZXAudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL09uQm9hcmRpbmcvY29tcG9uZW50cy9TdGVwV2l6YXJkL1N0ZXBXaXphcmQudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL09uQm9hcmRpbmcvY29tcG9uZW50cy9XZWxjb21lU3RlcC9XZWxjb21lU3RlcC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvT25Cb2FyZGluZy9PbkJvYXJkaW5nLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9PbkJvYXJkaW5nL21lc3NhZ2VzLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9Db250ZW50U2NyaXB0cy9PbkJvYXJkaW5nLnRzeCJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImV4dGVuZFN0YXRpY3MiLCJiIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsIl9fZXh0ZW5kcyIsIl9fIiwidGhpcyIsImNvbnN0cnVjdG9yIiwiX19hc3NpZ24iLCJhc3NpZ24iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcHBseSIsIl9fdmFsdWVzIiwiaXRlcmF0b3IiLCJuZXh0IiwiZG9uZSIsIlR5cGVFcnJvciIsIl9fcmVhZCIsImUiLCJhciIsInB1c2giLCJlcnJvciIsIl9fc3ByZWFkIiwiY29uY2F0Iiwic3R5bGVzIiwiZWxlbSIsIm1vZHMiLCJtaXgiLCJjbGFzc2VzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImZvckVhY2giLCJtb2ROYW1lIiwibW9kVmFsIiwiam9pbiIsIm1hcCIsImNsYXNzTmFtZSIsImZpbHRlciIsIkJvb2xlYW4iLCJTdG9yYWdlIiwiZ2V0RnJvbVN0b3JhZ2UiLCJwYXJhbSIsImEiLCJicm93c2VyIiwic3RvcmFnZSIsImxvY2FsIiwic2F2ZVRvU3RvcmFnZSIsInNldCIsInJlbW92ZUZyb21TdG9yYWdlIiwicmVtb3ZlIiwiRVNDQVBFRF9DSEFSUyIsIjM4IiwiNjIiLCI2MCIsIjM0IiwiMzkiLCJVTlNBRkVfQ0hBUlNfUkVHRVgiLCJlc2NhcGUiLCJzdHIiLCJyZXBsYWNlIiwibWF0Y2giLCJjaGFyQ29kZUF0IiwiZmlsdGVyUHJvcHMiLCJwcm9wcyIsIndoaXRlbGlzdCIsImRlZmF1bHRzIiwicmVkdWNlIiwiZmlsdGVyZWQiLCJpbnZhcmlhbnRJbnRsQ29udGV4dCIsImludGwiLCJjcmVhdGVFcnJvciIsIm1lc3NhZ2UiLCJleGNlcHRpb24iLCJzdGFjayIsIkRFRkFVTFRfSU5UTF9DT05GSUciLCJmb3JtYXRzIiwibWVzc2FnZXMiLCJ0aW1lWm9uZSIsInVuZGVmaW5lZCIsInRleHRDb21wb25lbnQiLCJkZWZhdWx0TG9jYWxlIiwiZGVmYXVsdEZvcm1hdHMiLCJvbkVycm9yIiwiY3JlYXRlSW50bENhY2hlIiwiZGF0ZVRpbWUiLCJudW1iZXIiLCJyZWxhdGl2ZVRpbWUiLCJwbHVyYWxSdWxlcyIsImxpc3QiLCJkaXNwbGF5TmFtZXMiLCJjcmVhdGVGb3JtYXR0ZXJzIiwiY2FjaGUiLCJSZWxhdGl2ZVRpbWVGb3JtYXQiLCJJbnRsIiwiTGlzdEZvcm1hdCIsIkRpc3BsYXlOYW1lcyIsImdldERhdGVUaW1lRm9ybWF0IiwiRGF0ZVRpbWVGb3JtYXQiLCJnZXROdW1iZXJGb3JtYXQiLCJOdW1iZXJGb3JtYXQiLCJnZXRNZXNzYWdlRm9ybWF0IiwiZ2V0UmVsYXRpdmVUaW1lRm9ybWF0IiwiZ2V0UGx1cmFsUnVsZXMiLCJQbHVyYWxSdWxlcyIsImdldExpc3RGb3JtYXQiLCJnZXREaXNwbGF5TmFtZXMiLCJnZXROYW1lZEZvcm1hdCIsInR5cGUiLCJmb3JtYXRUeXBlIiwiZm9ybWF0IiwiTGFuZ3VhZ2UiLCJMYW5ndWFnZUxhYmVsIiwiRU4iLCJSVSIsIm5hdGlvbmFsaXRpZXNUb0xhbmd1YWdlcyIsImdiIiwiZGUiLCJERSIsImVzIiwiRVMiLCJpdCIsIklUIiwiZnIiLCJGUiIsInBsIiwiUEwiLCJ0ayIsIlRLIiwicnUiLCJiZyIsIkJHIiwiaHUiLCJnciIsInJvIiwiUk8iLCJhZSIsInJzIiwiYWwiLCJwdCIsIlBUIiwiaXNFcnJvciIsIndhdCIsInRvU3RyaW5nIiwiaXNJbnN0YW5jZU9mIiwiRXJyb3IiLCJpc0Vycm9yRXZlbnQiLCJpc0RPTUVycm9yIiwiaXNET01FeGNlcHRpb24iLCJpc1N0cmluZyIsImlzUHJpbWl0aXZlIiwiaXNQbGFpbk9iamVjdCIsImlzRXZlbnQiLCJFdmVudCIsImlzRWxlbWVudCIsIkVsZW1lbnQiLCJpc1JlZ0V4cCIsImlzVGhlbmFibGUiLCJ0aGVuIiwiaXNTeW50aGV0aWNFdmVudCIsImJhc2UiLCJfZSIsIkJBU0lDX1BSSUNJTkdfQVVUSF9JRCIsIkJSQU5EIiwiREVGQVVMVF9USFJFU0hPTEQiLCJMQU5HIiwiUk9PVF9JRCIsIlZFUlNJT04iLCJub29wIiwiZ2V0Q29va2llcyIsInVybCIsImRldGFpbHMiLCJjb29raWVzIiwiY29va2llIiwiZ2V0VmVyc2lvbiIsInJ1bnRpbWUiLCJnZXRNYW5pZmVzdCIsInZlcnNpb24iLCJnZXRSb290IiwiaWQiLCJyb290IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY3JlYXRlRWxlbWVudCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImdldExpbmsiLCJocmVmIiwibGluayIsInJlbCIsIm51bWJlcldpdGhTZXBhcmF0b3JzIiwic3RyaW5nIiwiZ2V0QnJvd3Nlck5hbWUiLCJ1c2VyQWdlbnQiLCJ3aW5kb3ciLCJuYXZpZ2F0b3IiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwiZ2V0TmF0aW9uYWxpdHkiLCJuYXRpb25hbGl0eSIsImZhbGxiYWNrTmF0aW9uYWxpdHkiLCJrZXlzIiwiZmluZCIsInJoTmF0aW9uYWxpdHkiLCJyZXF1aXJlZEFyZ3MiLCJyZXF1aXJlZCIsImFyZ3MiLCJmYWxsYmFja0dsb2JhbE9iamVjdCIsImdldEdsb2JhbE9iamVjdCIsImdsb2JhbCIsInNlbGYiLCJ1dWlkNCIsImNyeXB0byIsIm1zQ3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwiYXJyIiwiVWludDE2QXJyYXkiLCJwYWQiLCJudW0iLCJ2IiwiTWF0aCIsInJhbmRvbSIsInBhcnNlVXJsIiwicXVlcnkiLCJmcmFnbWVudCIsImhvc3QiLCJwYXRoIiwicHJvdG9jb2wiLCJyZWxhdGl2ZSIsImdldEV2ZW50RGVzY3JpcHRpb24iLCJldmVudCIsInZhbHVlcyIsImV2ZW50X2lkIiwiY29uc29sZVNhbmRib3giLCJjYWxsYmFjayIsIm9yaWdpbmFsQ29uc29sZSIsImNvbnNvbGUiLCJ3cmFwcGVkTGV2ZWxzIiwibGV2ZWwiLCJfX3NlbnRyeV9vcmlnaW5hbF9fIiwicmVzdWx0IiwiYWRkRXhjZXB0aW9uVHlwZVZhbHVlIiwiYWRkRXhjZXB0aW9uTWVjaGFuaXNtIiwibWVjaGFuaXNtIiwiX29PIiwiZ2V0TG9jYXRpb25IcmVmIiwibG9jYXRpb24iLCJvTyIsInBhcnNlUmV0cnlBZnRlckhlYWRlciIsIm5vdyIsImhlYWRlciIsImhlYWRlckRlbGF5IiwicGFyc2VJbnQiLCJpc05hTiIsImhlYWRlckRhdGUiLCJEYXRlIiwicGFyc2UiLCJTSVpFIiwiVklFVyIsIlRZUEUiLCJlbSIsImNzc21lbSIsIkJ1dHRvbiIsImNoaWxkcmVuIiwic2l6ZSIsIk0iLCJ2aWV3Iiwib3BlbkluTmV3VGFiIiwid2lkZSIsImRpc2FibGVkIiwiZm9jdXNlZCIsImxvYWRpbmciLCJvbkNsaWNrIiwic3R5bGUiLCJ0ZXN0aWQiLCJ0cnVlRGlzYWJsZWQiLCJjbGFzc05hbWVzIiwiY29udGVudCIsInRhYkluZGV4IiwiZGF0YS1kaXNhYmxlZCIsInRhcmdldCIsImRhdGEtdGVzdGlkIiwiZmlsbCIsInNvdXJjZSIsInJlcGxhY2VtZW50Iiwib3JpZ2luYWwiLCJ3cmFwcGVkIiwiZGVmaW5lUHJvcGVydGllcyIsIl9PbyIsInVybEVuY29kZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImdldFdhbGtTb3VyY2UiLCJlcnIiLCJldmVudF8xIiwiY3VycmVudFRhcmdldCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwianNvblNpemUiLCJlbmNvZGVVUkkiLCJzcGxpdCIsInV0ZjhMZW5ndGgiLCJKU09OIiwic3RyaW5naWZ5Iiwibm9ybWFsaXplVG9TaXplIiwiZGVwdGgiLCJtYXhTaXplIiwic2VyaWFsaXplZCIsIm5vcm1hbGl6ZSIsIm5vcm1hbGl6ZVZhbHVlIiwiX2V2ZW50cyIsIndhbGsiLCJtZW1vIiwiSW5maW5pdHkiLCJub3JtYWxpemVkIiwic2VyaWFsaXplVmFsdWUiLCJ0b0pTT04iLCJhY2MiLCJpc0FycmF5IiwibWVtb2l6ZSIsImlubmVyS2V5IiwidW5tZW1vaXplIiwiaW5wdXQiLCJleHRyYWN0RXhjZXB0aW9uS2V5c0Zvck1lc3NhZ2UiLCJtYXhMZW5ndGgiLCJzb3J0IiwiaW5jbHVkZWRLZXlzIiwic2xpY2UiLCJkcm9wVW5kZWZpbmVkS2V5cyIsInZhbCIsImVfMSIsIl9hIiwib2JqIiwicnYiLCJfYiIsIl9jIiwiZV8xXzEiLCJyZXR1cm4iLCJpc1VuZGVmaW5lZCIsImlzT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJpc0Z1bmN0aW9uIiwiZm4iLCJpc0FycmF5QnVmZmVyIiwiaXNCdWZmZXIiLCJpc0Zvcm1EYXRhIiwiRm9ybURhdGEiLCJpc0FycmF5QnVmZmVyVmlldyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiYnVmZmVyIiwiaXNOdW1iZXIiLCJpc0RhdGUiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc1N0cmVhbSIsInBpcGUiLCJpc1VSTFNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwicHJvZHVjdCIsIm1lcmdlIiwiYXNzaWduVmFsdWUiLCJleHRlbmQiLCJ0aGlzQXJnIiwidHJpbSIsInN0cmlwQk9NIiwiYmFzZVVSTCIsIkIyQiIsIk9TVFJPVk9LIiwiUEFSVE5FUlMiLCJBUEkiLCJCMkJfSE9URUxTIiwiQjJCX1JPT01TIiwiSE9URUxTIiwiUkVHSVNUUkFUSU9OIiwiU0VBUkNIX0hQIiwiU0VBUkNIX1NFUlAiLCJHRVRfUEFSVE5FUlNfQVVUSF9LRVkiLCJSRVNUT1JFX1BBU1NXT1JEIiwiU0lHTl9JTiIsIlNJR05fT1VUIiwiRlVOTkVMIiwiSENfQ0hST01FX0ZPUk1fUElOR0VSIiwiSENfQ0hST01FX0ZPUk1fVEFCIiwiSENfRVhURU5TSU9OX1NFUlAiLCJIQ19SVU0iLCJGSVJTVF9FWEFNUExFIiwiTElWRV9TRVRUSU5HUyIsIlBST01PQ09ERSIsIlBST01PQ09ERVMiLCJDSFJPTUVfU1RPUkVfUkVWSUVXUyIsIkNIUk9NRV9FWFRFTlNJT05TIiwiQ0hST01FX05FV19UQUIiLCJFWFRFTlNJT05fRU1BSUwiLCJMQU5ESU5HIiwiUFJJVkFDWV9QT0xJQ1kiLCJfX3NwcmVhZEFycmF5cyIsImlsIiwiayIsImoiLCJqbCIsImdldENhY2hlSWQiLCJpbnB1dHMiLCJGb3JtYXRDb25zdHJ1Y3RvciIsIl9pIiwiY2FjaGVJZCIsInRvRGF0ZSIsImFyZ3VtZW50IiwiYXJnU3RyIiwiZ2V0VGltZSIsIndhcm4iLCJOYU4iLCJyZXF1aXJlIiwiZGVlcE1lcmdlIiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJ1c2VQcmV2aW91cyIsInJlZiIsIlJlYWN0IiwidXNlUmVmIiwidXNlRWZmZWN0IiwiY3VycmVudCIsIlBzZXVkb0NvbnRyb2wiLCJmb3J3YXJkUmVmIiwicGxhY2Vob2xkZXIiLCJvbkZvY3VzIiwib25CbHVyIiwib25LZXlEb3duIiwiaGFzVmFsdWUiLCJoYXNQbGFjZWhvbGRlciIsInJvbGUiLCJDb250cm9sIiwib25DaGFuZ2UiLCJhdXRvQ29tcGxldGUiLCJyZWFkT25seSIsImF1dG9Db3JyZWN0IiwiYXV0b0NhcGl0YWxpemUiLCJzcGVsbENoZWNrIiwiSW5wdXQiLCJsYWJlbCIsInRvb2x0aXBDb250ZW50IiwiaW5wdXRSZWYiLCJvbkljb25DbGljayIsInBzZXVkbyIsInN0YXJ0QWRvcm5tZW50IiwiaWNvbiIsInJlc2VydmVJY29uUGxhY2UiLCJoYXNFcnJvciIsInZhbGlkYXRvcnMiLCJ0b29sdGlwQ2FsbGJhY2siLCJDb250cm9sQ29tcG9uZW50IiwidXNlU3RhdGUiLCJleHRlcm5hbEVycm9yIiwic2V0RXh0ZXJuYWxFcnJvciIsImludGVybmFsRXJyb3IiLCJzZXRJbnRlcm5hbEVycm9yIiwidmFsaWRhdGVWYWx1ZSIsInNldFZhbGlkYXRlVmFsdWUiLCJwcmV2aW91c1ZhbGlkYXRlVmFsdWUiLCJ0b3RhbEVycm9yIiwiaXNQcmV2aW91cyIsImN1cnJlbnRFcnJvciIsImV2ZXJ5IiwidmFsaWRhdGUiLCJjbGlja2FibGUiLCJIaW50IiwicG9zaXRpb24iLCJQb3NpdGlvbiIsIlRPUCIsImluaXRpYWxTdGF0ZSIsInNpemVzIiwiREVTS1RPUCIsIk1PQklMRSIsIlRBQkxFVCIsIlN0YXRlIiwic3RhdGUiLCJhY3Rpb24iLCJBQ1RJT05fVFlQRSIsIlNFVF9USEVNRSIsInRoZW1lIiwidG9JbnRlZ2VyIiwiZGlydHlOdW1iZXIiLCJOdW1iZXIiLCJjZWlsIiwiZmxvb3IiLCJyYW5kb21TdHJpbmciLCJzdWJzdHJpbmciLCJBY3Rpb25UeXBlcyIsIklOSVQiLCJSRVBMQUNFIiwiUFJPQkVfVU5LTk9XTl9BQ1RJT04iLCJwcm90byIsImNyZWF0ZVN0b3JlIiwicmVkdWNlciIsInByZWxvYWRlZFN0YXRlIiwiZW5oYW5jZXIiLCJfcmVmMiIsImN1cnJlbnRSZWR1Y2VyIiwiY3VycmVudFN0YXRlIiwiY3VycmVudExpc3RlbmVycyIsIm5leHRMaXN0ZW5lcnMiLCJpc0Rpc3BhdGNoaW5nIiwiZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycyIsImdldFN0YXRlIiwic3Vic2NyaWJlIiwibGlzdGVuZXIiLCJpc1N1YnNjcmliZWQiLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJkaXNwYXRjaCIsImxpc3RlbmVycyIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJvYnNlcnZhYmxlIiwiX3JlZiIsIm91dGVyU3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJvYnNlcnZlU3RhdGUiLCJ1bnN1YnNjcmliZSIsImdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlIiwiYWN0aW9uVHlwZSIsIlN0cmluZyIsImNvbWJpbmVSZWR1Y2VycyIsInJlZHVjZXJzIiwicmVkdWNlcktleXMiLCJmaW5hbFJlZHVjZXJzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsImZpbmFsUmVkdWNlcktleXMiLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJoYXNDaGFuZ2VkIiwibmV4dFN0YXRlIiwiX2tleSIsInByZXZpb3VzU3RhdGVGb3JLZXkiLCJuZXh0U3RhdGVGb3JLZXkiLCJlcnJvck1lc3NhZ2UiLCJiaW5kQWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3IiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJfZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIm93bktleXMiLCJlbnVtZXJhYmxlT25seSIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9vYmplY3RTcHJlYWQyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImNvbXBvc2UiLCJfbGVuIiwiZnVuY3MiLCJhcmciLCJhcHBseU1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsInN0b3JlIiwiX2Rpc3BhdGNoIiwibWlkZGxld2FyZUFQSSIsImNoYWluIiwibWlkZGxld2FyZSIsInRydW5jYXRlIiwibWF4Iiwic3Vic3RyIiwic25pcExpbmUiLCJsaW5lIiwiY29sbm8iLCJuZXdMaW5lIiwibGwiLCJzdGFydCIsImVuZCIsIm1pbiIsInNhZmVKb2luIiwiZGVsaW1pdGVyIiwib3V0cHV0IiwiaXNNYXRjaGluZ1BhdHRlcm4iLCJwYXR0ZXJuIiwidGVzdCIsIkNMT1NFX09OQk9BUkRJTkciLCJPUEVOX1JBVEUiLCJTSE9XX09GRkVSIiwiU0hPV19UQk9fQkZfT0ZGRVIiLCJDSEFOR0VfTk9USUZJQ0FUSU9OU19TRVRUSU5HUyIsIkdFVF9DT01QRVRJVE9SX1NFUlBfREFUQSIsIkdFVF9DT01QRVRJVE9SX0FMTF9TRVJQX0RBVEEiLCJHRVRfQ09NUEVUSVRPUl9PUkRFUl9EQVRBIiwiR0VUX1RCT19PUkRFUl9EQVRBIiwiVVBEQVRFX0xJVkVfU0VUVElOR1MiLCJPUEVOX05FV19XSU5ET1ciLCJpblBvcHVwIiwiaW5qZWN0IiwidXNlQ2FsbGJhY2siLCJwYWdlVHlwZSIsImdldEN1cnJlbnRUYWIiLCJ0YWIiLCJpbmplY3RGdW5uZWwiLCJzZW5kRXZlbnQiLCJkYXRhIiwidGFicyIsImV4ZWN1dGVTY3JpcHQiLCJjb2RlIiwibG9nIiwiaGNmdW5uZWwiLCJmaWxlcyIsImh0bWwiLCJTRUFSQ0hfRk9STSIsImpzIiwiRklSU1RfQk9PS0lORyIsIk9GRkVSIiwiT05CT0FSRElORyIsIklORk9STUFUSU9OIiwiY3NzIiwiRk9OVFMiLCJpbWFnZXMiLCJCR19FQ09OT01ZX1NURVAiLCJCR19GSVJTVF9CT09LSU5HIiwiQkdfSU5TVFJVQ1RJT05TX1NURVAiLCJCR19XRUxDT01FX1NURVAiLCJGQVZJQ09OX0RFRkFVTFQiLCJGQVZJQ09OX1NVQ0NFU1MiLCJJQ09OX0hFQVJUIiwiSUNPTl9ORVciLCJJQ09OX1BJTiIsIkxPR08iLCJhcGkiLCJheGlvcyIsIndpdGhDcmVkZW50aWFscyIsImVuaGFuY2VycyIsInRodW5rIiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyIsIngiLCJyb290UmVkdWNlciIsImciLCJGdW5jdGlvbiIsImlzTm9kZUVudiIsInByb2Nlc3MiLCJkeW5hbWljUmVxdWlyZSIsIm1vZCIsInJlcXVlc3QiLCJJbnRsQ29udGV4dCIsIkNvbnN1bWVyIiwiSW50bENvbnN1bWVyIiwiUHJvdmlkZXIiLCJJbnRsUHJvdmlkZXIiLCJDb250ZXh0IiwiSWNvbkNyb3NzIiwiaGVpZ2h0Iiwid2lkdGgiLCJ2aWV3Qm94IiwiZmlsbFJ1bGUiLCJQYWdlVHlwZSIsIkdldERhdGFLZXkiLCJQb3N0RGF0YUtleSIsIkRhdGFLZXkiLCJ0YWJJZCIsIlVJRCIsInVpZCIsIlVTRVJfSUQiLCJ1c2VySWQiLCJSQVRFUyIsInJhdGVzIiwidXJscyIsImZ1bm5lbENvZGUiLCJQQUdFVFlQRSIsImdldERhdGEiLCJyYXRlIiwiTk9fUkFURV9EQVRBIiwibm9SYXRlRGF0YSIsInByb21vQ29kZSIsInBvc3REYXRhIiwiQkFSX1BSSUNFIiwiY29tbWlzc2lvbkluZm8iLCJzaG93IiwiYW1vdW50X2dyb3NzX21hcmt1cCIsIkJBVEhST09NX1RZUEUiLCJiYXRocm9vbVR5cGUiLCJCRURfVFlQRSIsImJlZFR5cGUiLCJDSEVDS0lOIiwiY2hlY2tJbiIsIkNIRUNLT1VUIiwiY2hlY2tPdXQiLCJDT01QRVRJVE9SX0NVUlJFTkNZIiwiY3VycmVuY3kiLCJDT01QRVRJVE9SX0lEIiwiY29tcGV0aXRvciIsIkRBVEVUSU1FIiwiRVhURU5TSU9OX0JSQU5EIiwiRVhURU5TSU9OX0xBTkciLCJFWFRFTlNJT05fVkVSU0lPTiIsIkVYVEVSTkFMX0NVUlJFTkNZIiwiZXh0ZXJuYWxDdXJyZW5jeSIsIkVYVEVSTkFMX0hPVEVMX0lEIiwiZXh0ZXJuYWxIb3RlbElkIiwiRVhURVJOQUxfSE9URUxfTkFNRSIsImV4dGVybmFsSG90ZWxOYW1lIiwiRlVOTkVMX1NURVAiLCJmdW5uZWxTdGVwIiwiR1VFU1RTIiwiZ3Vlc3RzIiwiYWNjdW0iLCJhZHVsdHMiLCJraWRzIiwiR1VFU1RTX0RFVEFJTEVEIiwiZ3Vlc3QiLCJIQVNfQkFMQ09OWSIsImhhc0JhbGNvbnkiLCJJU19FVEciLCJpc0V0ZyIsIk1BSU5fQ09NUEVUSVRPUl9QUklDRSIsInByaWNlT2xkV2l0aG91dFRheGVzIiwiUFJJQ0VfV0lUSF9UQVhFUyIsInByaWNlT2xkV2l0aFRheGVzIiwiTUVBTF9UWVBFIiwibWVhbFR5cGUiLCJNSU5fT1NUUk9WT0tfTE9ZQUxUWSIsImxveWFsdHkiLCJNSU5fT1NUUk9WT0tfUFJJQ0UiLCJwcmljZVdpdGhvdXRUYXhlcyIsIk1JTl9PU1RST1ZPS19QUklDRV9XSVRIX1RBWEVTIiwicHJpY2VXaXRoVGF4ZXMiLCJORVRfUFJJQ0UiLCJhbW91bnRfbmV0IiwiTlVNX0lOX1BBR0UiLCJyYXRlSW5kZXgiLCJPU1RST1ZPS19DVVJSRU5DWSIsIk9UQUhPVEVMX0lEIiwiaG90ZWxJZCIsIlBST01PX0FNT1VOVCIsInBhcnNlRmxvYXQiLCJkaXNjb3VudCIsIlJFU0lERU5DWSIsInJlc2lkZW5jeSIsIlJPT01fTkFNRSIsInJvb21OYW1lIiwiVEFYRVMiLCJ0YXhlcyIsIkNBTkNFTExBVElPTl9CRUZPUkUiLCJjYW5jZWxsYXRpb25CZWZvcmUiLCJIQVNfTUVBTCIsImhhc01lYWwiLCJzZW5kRnVubmVsIiwic2VuZENvbXBldGl0b3JTZXJwRGF0YSIsIlNFUlAiLCJzZW5kQ29tcGV0aXRvck9yZGVyRGF0YSIsIk9SREVSIiwic2VuZFByaWNlU2V0dGluZ3MiLCJQUklDRV9TRVRUSU5HUyIsInNlbmRCcm93c2VySGlzdG9yeSIsIm9uZU1vbnRoQWdvIiwiaGlzdG9yeSIsInNlYXJjaCIsIm1heFJlc3VsdHMiLCJzdGFydFRpbWUiLCJ0ZXh0IiwiaGlzdG9yeVVybHMiLCJoaXN0b3J5SXRlbUEiLCJoaXN0b3J5SXRlbUIiLCJ2aXNpdENvdW50IiwiaG9zdG5hbWUiLCJVUkwiLCJ1bmlxdWVIaXN0b3J5VXJscyIsIlNldCIsIkhJU1RPUlkiLCJhY3RpdmUiLCJjdXJyZW50V2luZG93IiwiY3JlYXRlQ29udGV4dCIsImxhbmd1YWdlIiwic2V0TGFuZ3VhZ2UiLCJnZXRGdW5jdGlvbk5hbWUiLCJCdXR0b25JY29uIiwiaXNMaXRlcmFsRWxlbWVudCIsImVsIiwibGl0ZXJhbCIsImlzQXJndW1lbnRFbGVtZW50IiwiaXNOdW1iZXJFbGVtZW50IiwiaXNEYXRlRWxlbWVudCIsImRhdGUiLCJpc1RpbWVFbGVtZW50IiwidGltZSIsImlzU2VsZWN0RWxlbWVudCIsInNlbGVjdCIsImlzUGx1cmFsRWxlbWVudCIsInBsdXJhbCIsImlzUG91bmRFbGVtZW50IiwicG91bmQiLCJpc051bWJlclNrZWxldG9uIiwiaXNEYXRlVGltZVNrZWxldG9uIiwiU3ludGF4RXJyb3IiLCJfc3VwZXIiLCJleHBlY3RlZCIsImZvdW5kIiwiX3RoaXMiLCJjYXB0dXJlU3RhY2tUcmFjZSIsImJ1aWxkTWVzc2FnZSIsImhleCIsImNoIiwidG9VcHBlckNhc2UiLCJsaXRlcmFsRXNjYXBlIiwiY2xhc3NFc2NhcGUiLCJkZXNjcmliZUV4cGVjdGF0aW9uIiwiZXhwZWN0YXRpb24iLCJlc2NhcGVkUGFydHMiLCJwYXJ0cyIsInBhcnQiLCJpbnZlcnRlZCIsImRlc2NyaXB0aW9uIiwiZXhwZWN0ZWQxIiwiZGVzY3JpcHRpb25zIiwiZGVzY3JpYmVFeHBlY3RlZCIsImZvdW5kMSIsInBlZ1BhcnNlIiwib3B0aW9ucyIsInBlZyRyZXN1bHQiLCJwZWckRkFJTEVEIiwicGVnJHN0YXJ0UnVsZUZ1bmN0aW9ucyIsInBlZyRwYXJzZXN0YXJ0IiwicGVnJHN0YXJ0UnVsZUZ1bmN0aW9uIiwicGVnJGMzIiwicGVnJGxpdGVyYWxFeHBlY3RhdGlvbiIsInBlZyRjNSIsInBlZyRvdGhlckV4cGVjdGF0aW9uIiwicGVnJGM3IiwicGVnJGM5IiwicGVnJGMxMSIsInBlZyRjMTIiLCJwZWckYzEzIiwicGVnJGNsYXNzRXhwZWN0YXRpb24iLCJwZWckYzE0IiwicGVnJGMxNSIsInBlZyRjMTciLCJwZWckYzE5IiwicGVnJGMyMyIsInBlZyRjMjYiLCJtZXNzYWdlQ3R4IiwicG9wIiwicGVnJGMyOCIsInBlZyRjMzAiLCJwZWckYzMxIiwiaW5zZXJ0TG9jYXRpb24iLCJwZWckYzMzIiwicGVnJGMzNCIsInBlZyRjMzUiLCJwZWckYzM2IiwicGVnJGMzNyIsInBlZyRjMzgiLCJwZWckYzM5IiwicGVnJGM0MyIsInBlZyRjNDUiLCJwZWckYzQ3IiwicGVnJGM0OSIsInBlZyRjNTEiLCJwZWckYzU0IiwicGVnJGM1NyIsInBlZyRjNjIiLCJwZWckYzYzIiwicGVnJGM2NCIsInBlZyRjNjUiLCJwZWckYzY2IiwicGVnJGM2NyIsInBlZyRjNjgiLCJwZWckYzY5IiwicGVnJGM3MSIsInBlZyRjNzQiLCJwZWckYzc2IiwicGVnJGM3OSIsImlzSW5QbHVyYWxPcHRpb24iLCJwZWckYzgxIiwicGVnJGM4MyIsInBlZyRjODQiLCJwZWckYzg2IiwicGVnJGM4OCIsInBlZyRjODkiLCJwZWckYzkwIiwicGVnJGM5MSIsInBlZyRjOTMiLCJwZWckY3VyclBvcyIsInBlZyRzYXZlZFBvcyIsInBlZyRwb3NEZXRhaWxzQ2FjaGUiLCJjb2x1bW4iLCJwZWckbWF4RmFpbFBvcyIsInBlZyRtYXhGYWlsRXhwZWN0ZWQiLCJwZWckc2lsZW50RmFpbHMiLCJzdGFydFJ1bGUiLCJwZWckY29tcHV0ZUxvY2F0aW9uIiwibG9jYXRpb24xIiwicGVnJGJ1aWxkU2ltcGxlRXJyb3IiLCJ0ZXh0MSIsImlnbm9yZUNhc2UiLCJwZWckY29tcHV0ZVBvc0RldGFpbHMiLCJwb3MiLCJzdGFydFBvcyIsImVuZFBvcyIsInN0YXJ0UG9zRGV0YWlscyIsImVuZFBvc0RldGFpbHMiLCJvZmZzZXQiLCJwZWckZmFpbCIsInBlZyRidWlsZFN0cnVjdHVyZWRFcnJvciIsInBlZyRwYXJzZW1lc3NhZ2UiLCJzMCIsInMxIiwicGVnJHBhcnNlbWVzc2FnZUVsZW1lbnQiLCJwZWckcGFyc2VtZXNzYWdlVGV4dCIsIm1lc3NhZ2VUZXh0IiwicGVnJHBhcnNlbGl0ZXJhbEVsZW1lbnQiLCJzMyIsInM1IiwicGVnJHBhcnNlXyIsInBlZyRwYXJzZWFyZ05hbWVPck51bWJlciIsInBlZyRwYXJzZWFyZ3VtZW50RWxlbWVudCIsInM3IiwiczkiLCJzMTAiLCJzMTEiLCJzMTIiLCJzMiIsInBlZyRwYXJzZW51bWJlclNrZWxldG9uVG9rZW4iLCJ0b2tlbnMiLCJwZWckcGFyc2VudW1iZXJTa2VsZXRvbiIsInBlZyRwYXJzZW51bWJlckFyZ1N0eWxlIiwicGVnJHBhcnNlbnVtYmVyRm9ybWF0RWxlbWVudCIsInBlZyRwYXJzZWRhdGVUaW1lU2tlbGV0b25MaXRlcmFsIiwicGVnJHBhcnNlZGF0ZVRpbWVTa2VsZXRvblBhdHRlcm4iLCJwZWckcGFyc2VkYXRlVGltZVNrZWxldG9uIiwicGVnJHBhcnNlZGF0ZU9yVGltZUFyZ1N0eWxlIiwicGVnJHBhcnNlZGF0ZU9yVGltZUZvcm1hdEVsZW1lbnQiLCJwZWckcGFyc2VzaW1wbGVGb3JtYXRFbGVtZW50IiwiczEzIiwiczE0IiwiczE1IiwicGVnJHBhcnNlbnVtYmVyIiwicGVnJHBhcnNlcGx1cmFsT3B0aW9uIiwicGx1cmFsVHlwZSIsImFsbCIsIm9wdGlvbkxvY2F0aW9uIiwicGVnJGM1MiIsInBlZyRwYXJzZXBsdXJhbEVsZW1lbnQiLCJwZWckcGFyc2VzZWxlY3RPcHRpb24iLCJwZWckYzU1IiwicGVnJHBhcnNlc2VsZWN0RWxlbWVudCIsInBlZyRwYXJzZXBvdW5kRWxlbWVudCIsInBlZyRwYXJzZWRvdWJsZUFwb3N0cm9waGVzIiwicGVnJHBhcnNlcXVvdGVkU3RyaW5nIiwicGVnJHBhcnNldW5xdW90ZWRTdHJpbmciLCJwZWckcGFyc2VudW1iZXJTa2VsZXRvbklkIiwiczQiLCJwZWckcGFyc2V3aGl0ZVNwYWNlIiwiY2hhckF0IiwicGVnJHBhcnNlbnVtYmVyU2tlbGV0b25Ub2tlbk9wdGlvbiIsInN0ZW0iLCJwZWckYzIwIiwiczYiLCJwZWckcGFyc2VhcmdOYW1lIiwicGVnJHBhcnNlcGx1cmFsUnVsZVNlbGVjdFZhbHVlIiwicGVnJHBhcnNlcGF0dGVyblN5bnRheCIsIm5lZ2F0aXZlIiwicGVnJHBhcnNlYXJnTnVtYmVyIiwicGVnJHBhcnNlZXNjYXBlZENoYXIiLCJjYXB0dXJlTG9jYXRpb24iLCJQTFVSQUxfSEFTSFRBR19SRUdFWCIsIm9wdHMiLCJlbHMiLCJub3JtYWxpemVIYXNodGFnSW5QbHVyYWwiLCJvcHQiLCJtYXRjaGluZ0xpdGVyYWxFbEluZGV4IiwibGl0ZXJhbEVsIiwiZWxfMSIsIm5ld1ZhbHVlIiwibmV3RWxzIiwiREFURV9USU1FX1JFR0VYIiwicGFyc2VEYXRlVGltZVNrZWxldG9uIiwic2tlbGV0b24iLCJsZW4iLCJlcmEiLCJ5ZWFyIiwiUmFuZ2VFcnJvciIsIm1vbnRoIiwiZGF5Iiwid2Vla2RheSIsImhvdXIxMiIsImhvdXJDeWNsZSIsImhvdXIiLCJtaW51dGUiLCJzZWNvbmQiLCJ0aW1lWm9uZU5hbWUiLCJGUkFDVElPTl9QUkVDSVNJT05fUkVHRVgiLCJTSUdOSUZJQ0FOVF9QUkVDSVNJT05fUkVHRVgiLCJwYXJzZVNpZ25pZmljYW50UHJlY2lzaW9uIiwiXyIsImcxIiwiZzIiLCJtaW5pbXVtU2lnbmlmaWNhbnREaWdpdHMiLCJtYXhpbXVtU2lnbmlmaWNhbnREaWdpdHMiLCJwYXJzZVNpZ24iLCJzaWduRGlzcGxheSIsImN1cnJlbmN5U2lnbiIsInBhcnNlTm90YXRpb25PcHRpb25zIiwic2lnbk9wdHMiLCJjb252ZXJ0TnVtYmVyU2tlbGV0b25Ub051bWJlckZvcm1hdE9wdGlvbnMiLCJ0b2tlbnNfMSIsInRva2VuIiwidXNlR3JvdXBpbmciLCJtYXhpbXVtRnJhY3Rpb25EaWdpdHMiLCJ1bml0Iiwibm90YXRpb24iLCJjb21wYWN0RGlzcGxheSIsImN1cnJlbmN5RGlzcGxheSIsInVuaXREaXNwbGF5IiwibWluaW11bUZyYWN0aW9uRGlnaXRzIiwiZG9tUGFyc2VyIiwiRm9ybWF0RXJyb3IiLCJtc2ciLCJ2YXJpYWJsZUlkIiwiZm9ybWF0VG9QYXJ0cyIsImxvY2FsZXMiLCJmb3JtYXR0ZXJzIiwiY3VycmVudFBsdXJhbFZhbHVlIiwib3JpZ2luYWxNZXNzYWdlIiwiZWxzXzEiLCJ2YXJOYW1lIiwib3RoZXIiLCJydWxlIiwibGFzdFBhcnQiLCJUT0tFTl9SRUdFWCIsImNvdW50ZXIiLCJyZXN0b3JlUmljaFBsYWNlaG9sZGVyTWVzc2FnZSIsIm9iamVjdFBhcnRzIiwiU0lNUExFX1hNTF9SRUdFWCIsIlRFTVBMQVRFX0lEIiwiVk9JRF9FTEVNRU5UUyIsImZvcm1hdEhUTUxNZXNzYWdlIiwiZm9ybWF0dGVkTWVzc2FnZSIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsImdldEVsZW1lbnRCeUlkIiwidGFnc1RvRm9ybWF0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjYXNlU2Vuc2l0aXZlVGFncyIsInRhZ05hbWUiLCJjaGlsZE5vZGVzIiwiY2hpbGQiLCJmb3JtYXRIVE1MRWxlbWVudCIsIm91dGVySFRNTCIsInRleHRDb250ZW50IiwiaXNWb2lkRWxlbWVudCIsImZvcm1hdEZuT3JWYWx1ZSIsImNodW5rcyIsIm1lcmdlQ29uZmlncyIsImRlZmF1bHRDb25maWciLCJjb25maWdzIiwiYzEiLCJjMiIsIkludGxNZXNzYWdlRm9ybWF0Iiwib3ZlcnJpZGVGb3JtYXRzIiwiZm9ybWF0dGVyQ2FjaGUiLCJmb3JtYXRUb1N0cmluZyIsImFzdCIsInJlc29sdmVkT3B0aW9ucyIsImxvY2FsZSIsInN1cHBvcnRlZExvY2FsZXNPZiIsImdldEFzdCIsIl9fcGFyc2UiLCJwZXJjZW50Iiwic2hvcnQiLCJtZWRpdW0iLCJsb25nIiwiZnVsbCIsIkRvdHNMb2FkZXIiLCJmaXJzdCIsInRoaXJkIiwiZm91cnRoIiwicmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZGlzcGxheU5hbWUiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJNZW1vIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImRlc2NyaXB0b3IiLCJUaXRsZSIsIm9yaWdpbmFsTW9kdWxlIiwid2VicGFja1BvbHlmaWxsIiwiaHRtbFRyZWVBc1N0cmluZyIsImN1cnJlbnRFbGVtIiwib3V0Iiwic2VwTGVuZ3RoIiwibmV4dFN0ciIsIl9odG1sRWxlbWVudEFzU3RyaW5nIiwicGFyZW50Tm9kZSIsInJldmVyc2UiLCJhdHRyIiwiYWxsb3dlZEF0dHJzIiwiZ2V0QXR0cmlidXRlIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5IiwibmV4dFRpY2siLCJ0aXRsZSIsImVudiIsImFyZ3YiLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiZ2V0UmVmQm91bmRpbmciLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJnZXRVcGRhdGVkQ29vcmRpbmF0ZXMiLCJuZXdDb250YWluZXJSZWN0IiwidG9vbHRpcFBhcmFtcyIsImlzT3BlbmVkIiwidG9vbHRpcENvb3JkaW5hdGVzIiwidG9wIiwibGVmdCIsImxlZnRDb3JlTGVmdENvb3JkaW5hdGUiLCJUT09MVElQX0FSUk9XX0hFSUdIVCIsInJpZ2h0Q29yZUNvb3JkaW5hdGUiLCJ0b3BDb3JlQ29vcmRpbmF0ZSIsInBhZ2VZT2Zmc2V0IiwiYm90dG9tQ29yZUNvb3JkaW5hdGUiLCJzaWRlc1RvcENvb3JkaW5hdGVPZkVuZFBvc2l0aW9uIiwic2lkZXNUb3BDb29yZGluYXRlT2ZDZW50ZXJQb3NpdGlvbiIsInRvcEFuZEJvdHRvbUNvb3JkaW5hdGVPZkNlbnRlclBvc2l0aW9uIiwiVE9QX1NUQVJUIiwiVE9QX0VORCIsIkxFRlRfU1RBUlQiLCJMRUZUIiwiTEVGVF9FTkQiLCJCT1RUT01fU1RBUlQiLCJCT1RUT00iLCJCT1RUT01fRU5EIiwiUklHSFRfU1RBUlQiLCJSSUdIVCIsIlJJR0hUX0VORCIsImFzc2VydE5ldmVyIiwiZW1Ub29sdGlwIiwiZW1Ub29sdGlwVW5kZXJsYXkiLCJlbVRvb2x0aXBXcmFwcGVyIiwiZW1Ub29sdGlwVGl0bGUiLCJUb29sdGlwQ29udGVudCIsImNvbnRhaW5lclJlZiIsInBhcmVudFJlZiIsImlzTGltaXRlZEJ5Q29udGFpbmVyIiwic2V0VG9vbHRpcFBhcmFtcyIsImNvb3JkaW5hdGVzIiwic2V0VG9vbHRpcENvb3JkaW5hdGVzIiwidG9vbHRpcFJlZiIsImNvbnRhaW5lclJlY3QiLCJwYXJlbnRSZWN0IiwidXBkYXRlVG9vbHRpcENvb3JkaW5hdGVzIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicmVjdCIsInVzZUxheW91dEVmZmVjdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYXJlQ29vcmRpbmF0ZXNDYWxjdWxhdGVkIiwidG9vbHRpcFdpZHRoIiwiUmVhY3RET00iLCJjcmVhdGVQb3J0YWwiLCJzaG93biIsIm1heFdpZHRoIiwiYXJpYS1oaWRkZW4iLCJ0aXRsZWQiLCJUb29sdGlwZWRDb21wb25lbnQiLCJpc09wZW5lZEJ5RGVmYXVsdCIsImdldEV2ZW50cyIsInNldElzT3BlbmVkIiwib3BlblRvb2x0aXAiLCJjbG9zZVRvb2x0aXAiLCJnZXRIb3ZlckV2ZW50cyIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VMZWF2ZSIsIlRvb2x0aXBlZCIsInRvZ2dsZVBhZ2VTY3JvbGwiLCJzaG91bGRMb2NrV2luZG93Iiwib3ZlcmZsb3ciLCJNb2RhbCIsIm92ZXJsYXlFbGVtZW50IiwidHJpZ2dlckVsZW1lbnQiLCJpc0FsZXJ0Iiwib25DbG9zZSIsInBvcHVwIiwiaXNPcGVuIiwic2V0T3BlbiIsImNsb3NlIiwiY2xvc2VPbkVzYyIsImNsb3NlT25DbGlja091dHNpZGUiLCJhcmlhSGlkZUFwcCIsIm92ZXJsYXlDbGFzc05hbWUiLCJzaG91bGRDbG9zZU9uT3ZlcmxheUNsaWNrIiwib25BZnRlck9wZW4iLCJvdmVybGF5UmVmIiwibm9kZSIsIlBhZGRpbmciLCJTaGFkb3dTaXplIiwiQ2FyZCIsInBhZGRpbmciLCJzaGFkb3dTaXplIiwiVmFyaWFudCIsInZhcmlhbnQiLCJSRUdVTEFSIiwiaXNNb2JpbGVSZXN1bHQiLCJzZXRJc01vYmlsZVJlc3VsdCIsImlzTW9iaWxlIiwiZGVza3RvcEhpbnQiLCJ0b29sdGlwUHJvcHMiLCJ0cmFuc2l0aW9uQ2xhc3NNYXAiLCJlbnRlcmVkIiwiZXhpdGluZyIsImV4aXRlZCIsIkFOSU1BVElPTl9USU1FT1VUIiwiZW50ZXIiLCJleGl0IiwiRHJvcGRvd24iLCJpc0Z1bGxXaWR0aCIsImlzVmlzaWJsZSIsIlRyYW5zaXRpb24iLCJpbiIsInVubW91bnRPbkV4aXQiLCJmdWxsV2lkdGgiLCJJY29uR2VhciIsIkNvbnRleHRNZW51IiwiaGFuZGxlVHJpZ2dlckNsaWNrIiwiaGFuZGxlQnV0dG9uQ2xvc2VDbGljayIsIkNoaWxkcmVuIiwiY2hpbGRQcm9wcyIsImNsb25lRWxlbWVudCIsInNldEVycm9yIiwiaXNMb2FkaW5nIiwic2V0TG9hZGluZ1N0YXRlIiwic3RhdHVzIiwic2V0U3RhdHVzIiwiaGFuZGxlQmFja2dyb3VuZFJlcXVlc3QiLCJjb21tYW5kIiwicmVzdCIsInNlbmRNZXNzYWdlIiwicmVzcG9uc2UiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsImdldFNpemUiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRXaWR0aCIsImNhblVzZURPTSIsIl9leGVudiIsIkVFIiwiZGVmYXVsdCIsIlNhZmVIVE1MRWxlbWVudCIsIkhUTUxFbGVtZW50IiwiTG9nbyIsImFsdCIsInNyYyIsImdldFVSTCIsIkljb25DaGVjayIsIkljb25GbGFnRW4iLCJ4bWxucyIsIm9wYWNpdHkiLCJyeCIsIm1hc2stdHlwZSIsIm1hc2tVbml0cyIsInkiLCJtYXNrIiwiY2xpcFJ1bGUiLCJJY29uRmxhZ1J1c3NpYSIsIkZsYWciLCJMYW5ndWFnZVN3aXRjaGVyIiwidXNlSW50bCIsImlzQ29udGV4dE1lbnVWaXNpYmxlIiwic2V0Q29udGV4dE1lbnVWaXNpYmxlU3RhdGUiLCJ1c2VDb250ZXh0IiwiTGFuZ3VhZ2VDb250ZXh0IiwiaGFuZGxlTGFuZ3VhZ2VDbGljayIsImV2dCIsImxhbmciLCJkYXRhc2V0IiwiTEFOR1VBR0UiLCJmb3JtYXRNZXNzYWdlIiwiZW50cmllcyIsImRhdGEtbGFuZ3VhZ2UiLCJfTW9kYWwiLCJfTW9kYWwyIiwib2JqQSIsIm9iakIiLCJhS2V5cyIsImJLZXlzIiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwiZXh0cmFBcmd1bWVudCIsIndpdGhFeHRyYUFyZ3VtZW50IiwiQ3Jvc3MiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInRlc3QxIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsImZyb20iLCJzeW1ib2xzIiwidG8iLCJ1dGlscyIsImVuY29kZSIsInBhcmFtcyIsInBhcmFtc1NlcmlhbGl6ZXIiLCJzZXJpYWxpemVkUGFyYW1zIiwidG9JU09TdHJpbmciLCJoYXNobWFya0luZGV4IiwiX19DQU5DRUxfXyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsImhlYWRlcnMiLCJhZGFwdGVyIiwiWE1MSHR0cFJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsIm1heEJvZHlMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsImNvbW1vbiIsIm1ldGhvZCIsInNldHRsZSIsImJ1aWxkVVJMIiwiYnVpbGRGdWxsUGF0aCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNvbmZpZyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsImF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidW5lc2NhcGUiLCJBdXRob3JpemF0aW9uIiwiYnRvYSIsImZ1bGxQYXRoIiwib3BlbiIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJvbmFib3J0Iiwib25lcnJvciIsIm9udGltZW91dCIsInRpbWVvdXRFcnJvck1lc3NhZ2UiLCJ4c3JmVmFsdWUiLCJyZWFkIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWxUb2tlbiIsInByb21pc2UiLCJjYW5jZWwiLCJhYm9ydCIsInNlbmQiLCJlbmhhbmNlRXJyb3IiLCJjb25maWcxIiwiY29uZmlnMiIsInZhbHVlRnJvbUNvbmZpZzJLZXlzIiwibWVyZ2VEZWVwUHJvcGVydGllc0tleXMiLCJkZWZhdWx0VG9Db25maWcyS2V5cyIsImRpcmVjdE1lcmdlS2V5cyIsImdldE1lcmdlZFZhbHVlIiwibWVyZ2VEZWVwUHJvcGVydGllcyIsInByb3AiLCJheGlvc0tleXMiLCJvdGhlcktleXMiLCJDYW5jZWwiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJfaGFzV2Vha1NldCIsIldlYWtTZXQiLCJfaW5uZXIiLCJoYXMiLCJhZGQiLCJkZWxldGUiLCJvcmlnaW5hbEZ1bmN0aW9uVG9TdHJpbmciLCJTdGF0ZXMiLCJGdW5jdGlvblRvU3RyaW5nIiwic2V0dXBPbmNlIiwiY29udGV4dCIsIlN5bmNQcm9taXNlIiwiZXhlY3V0b3IiLCJfc3RhdGUiLCJQRU5ESU5HIiwiX2hhbmRsZXJzIiwiX3Jlc29sdmUiLCJfc2V0UmVzdWx0IiwiUkVTT0xWRUQiLCJfcmVqZWN0IiwicmVhc29uIiwiUkVKRUNURUQiLCJpcyIsIl92YWx1ZSIsIl9leGVjdXRlSGFuZGxlcnMiLCJfYXR0YWNoSGFuZGxlciIsImhhbmRsZXIiLCJjYWNoZWRIYW5kbGVycyIsIm9uZnVsZmlsbGVkIiwib25yZWplY3RlZCIsImNvbGxlY3Rpb24iLCJyZXNvbHZlZENvbGxlY3Rpb24iLCJpdGVtIiwiY2F0Y2giLCJmaW5hbGx5Iiwib25maW5hbGx5IiwiaXNSZWplY3RlZCIsIlNjb3BlIiwiX25vdGlmeWluZ0xpc3RlbmVycyIsIl9zY29wZUxpc3RlbmVycyIsIl9ldmVudFByb2Nlc3NvcnMiLCJfYnJlYWRjcnVtYnMiLCJfdXNlciIsIl90YWdzIiwiX2V4dHJhIiwiX2NvbnRleHRzIiwiY2xvbmUiLCJzY29wZSIsIm5ld1Njb3BlIiwiX2xldmVsIiwiX3NwYW4iLCJfc2Vzc2lvbiIsIl90cmFuc2FjdGlvbk5hbWUiLCJfZmluZ2VycHJpbnQiLCJhZGRTY29wZUxpc3RlbmVyIiwiYWRkRXZlbnRQcm9jZXNzb3IiLCJzZXRVc2VyIiwidXNlciIsInVwZGF0ZSIsIl9ub3RpZnlTY29wZUxpc3RlbmVycyIsImdldFVzZXIiLCJzZXRUYWdzIiwidGFncyIsInNldFRhZyIsInNldEV4dHJhcyIsImV4dHJhcyIsInNldEV4dHJhIiwiZXh0cmEiLCJzZXRGaW5nZXJwcmludCIsImZpbmdlcnByaW50Iiwic2V0TGV2ZWwiLCJzZXRUcmFuc2FjdGlvbk5hbWUiLCJzZXRUcmFuc2FjdGlvbiIsInNldENvbnRleHQiLCJzZXRTcGFuIiwic3BhbiIsImdldFNwYW4iLCJnZXRUcmFuc2FjdGlvbiIsIl9kIiwidHJhbnNhY3Rpb24iLCJzcGFuUmVjb3JkZXIiLCJzcGFucyIsInNldFNlc3Npb24iLCJzZXNzaW9uIiwiZ2V0U2Vzc2lvbiIsImNhcHR1cmVDb250ZXh0IiwidXBkYXRlZFNjb3BlIiwiY29udGV4dHMiLCJjbGVhciIsImFkZEJyZWFkY3J1bWIiLCJicmVhZGNydW1iIiwibWF4QnJlYWRjcnVtYnMiLCJtZXJnZWRCcmVhZGNydW1iIiwidGltZXN0YW1wIiwiY2xlYXJCcmVhZGNydW1icyIsImFwcGx5VG9FdmVudCIsImhpbnQiLCJ0cmFjZSIsImdldFRyYWNlQ29udGV4dCIsInRyYW5zYWN0aW9uTmFtZSIsIl9hcHBseUZpbmdlcnByaW50IiwiYnJlYWRjcnVtYnMiLCJfbm90aWZ5RXZlbnRQcm9jZXNzb3JzIiwiZ2V0R2xvYmFsRXZlbnRQcm9jZXNzb3JzIiwicHJvY2Vzc29ycyIsInByb2Nlc3NvciIsImZpbmFsIiwiX19TRU5UUllfXyIsImdsb2JhbEV2ZW50UHJvY2Vzc29ycyIsImFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yIiwiUFJFRklYIiwiTG9nZ2VyIiwiX2VuYWJsZWQiLCJkaXNhYmxlIiwiZW5hYmxlIiwiU2Vzc2lvblN0YXR1cyIsImxvZ2dlciIsIlNlc3Npb24iLCJlcnJvcnMiLCJzaWQiLCJzdGFydGVkIiwiZHVyYXRpb24iLCJPayIsImlwX2FkZHJlc3MiLCJpcEFkZHJlc3MiLCJkaWQiLCJlbWFpbCIsInJlbGVhc2UiLCJlbnZpcm9ubWVudCIsIkV4aXRlZCIsImluaXQiLCJhdHRycyIsInVzZXJfYWdlbnQiLCJIdWIiLCJjbGllbnQiLCJfdmVyc2lvbiIsIl9zdGFjayIsImdldFN0YWNrVG9wIiwiYmluZENsaWVudCIsImlzT2xkZXJUaGFuIiwic2V0dXBJbnRlZ3JhdGlvbnMiLCJwdXNoU2NvcGUiLCJnZXRTY29wZSIsImdldFN0YWNrIiwiZ2V0Q2xpZW50IiwicG9wU2NvcGUiLCJ3aXRoU2NvcGUiLCJjYXB0dXJlRXhjZXB0aW9uIiwiZXZlbnRJZCIsIl9sYXN0RXZlbnRJZCIsImZpbmFsSGludCIsInN5bnRoZXRpY0V4Y2VwdGlvbiIsIm9yaWdpbmFsRXhjZXB0aW9uIiwiX2ludm9rZUNsaWVudCIsImNhcHR1cmVNZXNzYWdlIiwiY2FwdHVyZUV2ZW50IiwibGFzdEV2ZW50SWQiLCJnZXRPcHRpb25zIiwiYmVmb3JlQnJlYWRjcnVtYiIsImZpbmFsQnJlYWRjcnVtYiIsImNvbmZpZ3VyZVNjb3BlIiwib2xkSHViIiwibWFrZU1haW4iLCJnZXRJbnRlZ3JhdGlvbiIsImludGVncmF0aW9uIiwic3RhcnRTcGFuIiwiX2NhbGxFeHRlbnNpb25NZXRob2QiLCJzdGFydFRyYW5zYWN0aW9uIiwiY3VzdG9tU2FtcGxpbmdDb250ZXh0IiwidHJhY2VIZWFkZXJzIiwic3RhcnRTZXNzaW9uIiwiZW5kU2Vzc2lvbiIsImNhcHR1cmVTZXNzaW9uIiwiY2FycmllciIsImdldE1haW5DYXJyaWVyIiwic2VudHJ5IiwiZXh0ZW5zaW9ucyIsImh1YiIsInJlZ2lzdHJ5IiwiZ2V0SHViRnJvbUNhcnJpZXIiLCJzZXRIdWJPbkNhcnJpZXIiLCJnZXRDdXJyZW50SHViIiwiaGFzSHViT25DYXJyaWVyIiwiYWN0aXZlRG9tYWluIiwiZG9tYWluIiwicmVnaXN0cnlIdWJUb3BTdGFjayIsImdldEh1YkZyb21BY3RpdmVEb21haW4iLCJERUZBVUxUX0lHTk9SRV9FUlJPUlMiLCJJbmJvdW5kRmlsdGVycyIsIl9vcHRpb25zIiwiY2xpZW50T3B0aW9ucyIsIl9tZXJnZU9wdGlvbnMiLCJfc2hvdWxkRHJvcEV2ZW50IiwiX2lzU2VudHJ5RXJyb3IiLCJfaXNJZ25vcmVkRXJyb3IiLCJfaXNEZW5pZWRVcmwiLCJfZ2V0RXZlbnRGaWx0ZXJVcmwiLCJfaXNBbGxvd2VkVXJsIiwiaWdub3JlSW50ZXJuYWwiLCJpZ25vcmVFcnJvcnMiLCJfZ2V0UG9zc2libGVFdmVudE1lc3NhZ2VzIiwic29tZSIsImRlbnlVcmxzIiwiYWxsb3dVcmxzIiwid2hpdGVsaXN0VXJscyIsImJsYWNrbGlzdFVybHMiLCJzdGFja3RyYWNlIiwiZnJhbWVzXzEiLCJmcmFtZXMiLCJmaWxlbmFtZSIsImZyYW1lc18yIiwiU2VudHJ5RXJyb3IiLCJfbmV3VGFyZ2V0IiwiRFNOX1JFR0VYIiwiRHNuIiwiX2Zyb21TdHJpbmciLCJfZnJvbUNvbXBvbmVudHMiLCJfdmFsaWRhdGUiLCJ3aXRoUGFzc3dvcmQiLCJwYXNzIiwicG9ydCIsInByb2plY3RJZCIsImV4ZWMiLCJwcm9qZWN0TWF0Y2giLCJjb21wb25lbnRzIiwiRVJST1JfTUVTU0FHRSIsImluc3RhbGxlZEludGVncmF0aW9ucyIsImludGVncmF0aW9ucyIsImRlZmF1bHRJbnRlZ3JhdGlvbnMiLCJ1c2VySW50ZWdyYXRpb25zIiwidXNlckludGVncmF0aW9uc05hbWVzXzEiLCJwaWNrZWRJbnRlZ3JhdGlvbnNOYW1lc18xIiwiZGVmYXVsdEludGVncmF0aW9uIiwidXNlckludGVncmF0aW9uIiwiaW50ZWdyYXRpb25zTmFtZXMiLCJnZXRJbnRlZ3JhdGlvbnNUb1NldHVwIiwic2V0dXBJbnRlZ3JhdGlvbiIsIlN0YXR1cyIsIkJhc2VDbGllbnQiLCJiYWNrZW5kQ2xhc3MiLCJfaW50ZWdyYXRpb25zIiwiX3Byb2Nlc3NpbmciLCJfYmFja2VuZCIsImRzbiIsIl9kc24iLCJfcHJvY2VzcyIsIl9nZXRCYWNrZW5kIiwiZXZlbnRGcm9tRXhjZXB0aW9uIiwiX2NhcHR1cmVFdmVudCIsInByb21pc2VkRXZlbnQiLCJldmVudEZyb21NZXNzYWdlIiwiX3NlbmRTZXNzaW9uIiwiZ2V0RHNuIiwiZmx1c2giLCJfaXNDbGllbnRQcm9jZXNzaW5nIiwicmVhZHkiLCJnZXRUcmFuc3BvcnQiLCJ0cmFuc3BvcnRGbHVzaGVkIiwiZW5hYmxlZCIsIl9pc0VuYWJsZWQiLCJfdXBkYXRlU2Vzc2lvbkZyb21FdmVudCIsImNyYXNoZWQiLCJlcnJvcmVkIiwiZXhjZXB0aW9ucyIsImV4Y2VwdGlvbnNfMSIsImV4Y2VwdGlvbnNfMV8xIiwiaGFuZGxlZCIsIkNyYXNoZWQiLCJzZW5kU2Vzc2lvbiIsInRpY2tlZCIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiX3ByZXBhcmVFdmVudCIsIm5vcm1hbGl6ZURlcHRoIiwicHJlcGFyZWQiLCJfYXBwbHlDbGllbnRPcHRpb25zIiwiX2FwcGx5SW50ZWdyYXRpb25zTWV0YWRhdGEiLCJmaW5hbFNjb3BlIiwiX25vcm1hbGl6ZUV2ZW50IiwiZGlzdCIsIm1heFZhbHVlTGVuZ3RoIiwic2RrSW5mbyIsInNkayIsImludGVncmF0aW9uc0FycmF5IiwiX3NlbmRFdmVudCIsIl9wcm9jZXNzRXZlbnQiLCJmaW5hbEV2ZW50IiwiYmVmb3JlU2VuZCIsInNhbXBsZVJhdGUiLCJpc1RyYW5zYWN0aW9uIiwiX19zZW50cnlfXyIsImJlZm9yZVNlbmRSZXN1bHQiLCJwcm9jZXNzZWRFdmVudCIsImZyb21IdHRwQ29kZSIsIlN1Y2Nlc3MiLCJSYXRlTGltaXQiLCJJbnZhbGlkIiwiRmFpbGVkIiwiVW5rbm93biIsIlNldmVyaXR5IiwiTm9vcFRyYW5zcG9ydCIsIlNraXBwZWQiLCJCYXNlQmFja2VuZCIsIl90cmFuc3BvcnQiLCJfc2V0dXBUcmFuc3BvcnQiLCJfZXhjZXB0aW9uIiwiX2hpbnQiLCJfbWVzc2FnZSIsInN1cHBvcnRzRmV0Y2giLCJIZWFkZXJzIiwiUmVxdWVzdCIsIlJlc3BvbnNlIiwiaXNOYXRpdmVGZXRjaCIsImZ1bmMiLCJzdXBwb3J0c1JlZmVycmVyUG9saWN5IiwicmVmZXJyZXJQb2xpY3kiLCJmcm9tU3RyaW5nIiwiRGVidWciLCJJbmZvIiwiV2FybmluZyIsIkZhdGFsIiwiQ3JpdGljYWwiLCJMb2ciLCJnZWNrbyIsIndpbmpzIiwiZ2Vja29FdmFsIiwiY2hyb21lRXZhbCIsInJlYWN0TWluaWZpZWRSZWdleHAiLCJjb21wdXRlU3RhY2tUcmFjZSIsImV4IiwicG9wU2l6ZSIsImZyYW1lc1RvUG9wIiwib3BlcmExMFJlZ2V4Iiwib3BlcmExMVJlZ2V4IiwibGluZXMiLCJlbGVtZW50IiwiZXh0cmFjdE1lc3NhZ2UiLCJjb21wdXRlU3RhY2tUcmFjZUZyb21TdGFja3RyYWNlUHJvcCIsInBvcEZyYW1lcyIsInN1Ym1hdGNoIiwiaXNOYXRpdmUiLCJjb2x1bW5OdW1iZXIiLCJjb21wdXRlU3RhY2tUcmFjZUZyb21TdGFja1Byb3AiLCJmYWlsZWQiLCJleGNlcHRpb25Gcm9tU3RhY2t0cmFjZSIsInByZXBhcmVGcmFtZXNGb3JFdmVudCIsImV2ZW50RnJvbVN0YWNrdHJhY2UiLCJsb2NhbFN0YWNrIiwiZmlyc3RGcmFtZUZ1bmN0aW9uIiwibGFzdEZyYW1lRnVuY3Rpb24iLCJmcmFtZSIsImZ1bmN0aW9uIiwiaW5fYXBwIiwibGluZW5vIiwiZXZlbnRGcm9tVW5rbm93bklucHV0IiwiZG9tRXhjZXB0aW9uIiwibmFtZV8xIiwiZXZlbnRGcm9tU3RyaW5nIiwicmVqZWN0aW9uIiwiX19zZXJpYWxpemVkX18iLCJldmVudEZyb21QbGFpbk9iamVjdCIsInN5bnRoZXRpYyIsImF0dGFjaFN0YWNrdHJhY2UiLCJzZXNzaW9uVG9TZW50cnlSZXF1ZXN0Iiwic2VudF9hdCIsImdldEVudmVsb3BlRW5kcG9pbnRXaXRoVXJsRW5jb2RlZEF1dGgiLCJldmVudFRvU2VudHJ5UmVxdWVzdCIsInVzZUVudmVsb3BlIiwicmVxIiwiZ2V0U3RvcmVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aCIsImVudmVsb3BlIiwiX2Rzbk9iamVjdCIsImdldEJhc2VBcGlFbmRwb2ludCIsImdldFN0b3JlRW5kcG9pbnQiLCJfZ2V0SW5nZXN0RW5kcG9pbnQiLCJfZW5jb2RlZEF1dGgiLCJfZ2V0RW52ZWxvcGVFbmRwb2ludCIsImdldFN0b3JlRW5kcG9pbnRQYXRoIiwiZ2V0UmVxdWVzdEhlYWRlcnMiLCJjbGllbnROYW1lIiwiY2xpZW50VmVyc2lvbiIsImdldFJlcG9ydERpYWxvZ0VuZHBvaW50IiwiZGlhbG9nT3B0aW9ucyIsImVuZHBvaW50IiwiZW5jb2RlZE9wdGlvbnMiLCJzZW50cnlfa2V5Iiwic2VudHJ5X3ZlcnNpb24iLCJQcm9taXNlQnVmZmVyIiwiX2xpbWl0IiwiX2J1ZmZlciIsImlzUmVhZHkiLCJ0YXNrIiwiZHJhaW4iLCJjYXB0dXJlZFNldFRpbWVvdXQiLCJCYXNlVHJhbnNwb3J0IiwiX3JhdGVMaW1pdHMiLCJfYXBpIiwiX2hhbmRsZVJlc3BvbnNlIiwicmVxdWVzdFR5cGUiLCJfaGFuZGxlUmF0ZUxpbWl0IiwiX2Rpc2FibGVkVW50aWwiLCJjYXRlZ29yeSIsIl9pc1JhdGVMaW1pdGVkIiwiZV8yIiwicmxIZWFkZXIiLCJyYUhlYWRlciIsInBhcmFtZXRlcnMiLCJkZWxheSIsIl9mIiwiZV8yXzEiLCJGZXRjaFRyYW5zcG9ydCIsIl9zZW5kUmVxdWVzdCIsInNlbnRyeVJlcXVlc3QiLCJvcmlnaW5hbFBheWxvYWQiLCJmZXRjaFBhcmFtZXRlcnMiLCJmZXRjaCIsIlhIUlRyYW5zcG9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiQnJvd3NlckJhY2tlbmQiLCJ0cmFuc3BvcnRPcHRpb25zIiwidHJhbnNwb3J0IiwiY2FsbE9uSHViIiwiaWdub3JlT25FcnJvciIsInNob3VsZElnbm9yZU9uRXJyb3IiLCJpZ25vcmVOZXh0T25FcnJvciIsIndyYXAiLCJiZWZvcmUiLCJfX3NlbnRyeV93cmFwcGVkX18iLCJzZW50cnlXcmFwcGVkIiwid3JhcHBlZEFyZ3VtZW50cyIsImhhbmRsZUV2ZW50IiwiaW5qZWN0UmVwb3J0RGlhbG9nIiwic2NyaXB0IiwiYXN5bmMiLCJvbkxvYWQiLCJvbmxvYWQiLCJoZWFkIiwibGFzdEhyZWYiLCJoYW5kbGVycyIsImluc3RydW1lbnRlZCIsImluc3RydW1lbnQiLCJvcmlnaW5hbENvbnNvbGVMZXZlbCIsInRyaWdnZXJIYW5kbGVycyIsImluc3RydW1lbnRDb25zb2xlIiwiZG9tRXZlbnRIYW5kbGVyIiwia2V5cHJlc3NFdmVudEhhbmRsZXIiLCJldmVudE5hbWUiLCJpbm5lck9yaWdpbmFsIiwiaW5zdHJ1bWVudERPTSIsInJlcXVlc3RLZXlzIiwicmVxdWVzdFZhbHVlcyIsInhocnByb3RvIiwib3JpZ2luYWxPcGVuIiwieGhyIiwiX19zZW50cnlfeGhyX18iLCJfX3NlbnRyeV9vd25fcmVxdWVzdF9fIiwib25yZWFkeXN0YXRlY2hhbmdlSGFuZGxlciIsInN0YXR1c19jb2RlIiwicmVxdWVzdFBvcyIsImFyZ3NfMSIsImVuZFRpbWVzdGFtcCIsInN0YXJ0VGltZXN0YW1wIiwicmVhZHlTdGF0ZUFyZ3MiLCJvcmlnaW5hbFNlbmQiLCJpbnN0cnVtZW50WEhSIiwiZG9jIiwic2FuZGJveCIsImhpZGRlbiIsImNvbnRlbnRXaW5kb3ciLCJyZW1vdmVDaGlsZCIsInN1cHBvcnRzTmF0aXZlRmV0Y2giLCJvcmlnaW5hbEZldGNoIiwiaGFuZGxlckRhdGEiLCJmZXRjaERhdGEiLCJnZXRGZXRjaE1ldGhvZCIsImdldEZldGNoVXJsIiwiaW5zdHJ1bWVudEZldGNoIiwiY2hyb21lIiwiaXNDaHJvbWVQYWNrYWdlZEFwcCIsImFwcCIsImhhc0hpc3RvcnlBcGkiLCJwdXNoU3RhdGUiLCJyZXBsYWNlU3RhdGUiLCJzdXBwb3J0c0hpc3RvcnkiLCJvbGRPblBvcFN0YXRlIiwib25wb3BzdGF0ZSIsImhpc3RvcnlSZXBsYWNlbWVudEZ1bmN0aW9uIiwib3JpZ2luYWxIaXN0b3J5RnVuY3Rpb24iLCJpbnN0cnVtZW50SGlzdG9yeSIsIl9vbGRPbkVycm9ySGFuZGxlciIsIl9vbGRPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsImFkZEluc3RydW1lbnRhdGlvbkhhbmRsZXIiLCJmZXRjaEFyZ3MiLCJrZXlwcmVzc1RpbWVvdXQiLCJsYXN0Q2FwdHVyZWRFdmVudCIsImRlYm91bmNlVGltZXIiLCJkZWJvdW5jZSIsImlzQ29udGVudEVkaXRhYmxlIiwiQnJlYWRjcnVtYnMiLCJkb20iLCJhZGRTZW50cnlCcmVhZGNydW1iIiwiX2NvbnNvbGVCcmVhZGNydW1iIiwiX2RvbUJyZWFkY3J1bWIiLCJfeGhyQnJlYWRjcnVtYiIsIl9mZXRjaEJyZWFkY3J1bWIiLCJfaGlzdG9yeUJyZWFkY3J1bWIiLCJwYXJzZWRMb2MiLCJwYXJzZWRGcm9tIiwicGFyc2VkVG8iLCJCcm93c2VyQ2xpZW50Iiwic2hvd1JlcG9ydERpYWxvZyIsInBsYXRmb3JtIiwicGFja2FnZXMiLCJERUZBVUxUX0VWRU5UX1RBUkdFVCIsIlRyeUNhdGNoIiwiZXZlbnRUYXJnZXQiLCJfd3JhcFRpbWVGdW5jdGlvbiIsIl93cmFwUkFGIiwiX3dyYXBYSFIiLCJfd3JhcEV2ZW50VGFyZ2V0Iiwib3JpZ2luYWxDYWxsYmFjayIsIm9yaWdpbmFsUmVtb3ZlRXZlbnRMaXN0ZW5lciIsIndyYXBwZWRFdmVudEhhbmRsZXIiLCJvcmlnaW5hbEV2ZW50SGFuZGxlciIsInhtbEh0dHBSZXF1ZXN0UHJvcHMiLCJ3cmFwT3B0aW9ucyIsIkdsb2JhbEhhbmRsZXJzIiwiX29uRXJyb3JIYW5kbGVySW5zdGFsbGVkIiwiX29uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlckluc3RhbGxlZCIsInN0YWNrVHJhY2VMaW1pdCIsIl9pbnN0YWxsR2xvYmFsT25FcnJvckhhbmRsZXIiLCJfaW5zdGFsbEdsb2JhbE9uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlciIsImN1cnJlbnRIdWIiLCJoYXNJbnRlZ3JhdGlvbiIsImlzRmFpbGVkT3duRGVsaXZlcnkiLCJfZXZlbnRGcm9tSW5jb21wbGV0ZU9uRXJyb3IiLCJfZW5oYW5jZUV2ZW50V2l0aEluaXRpYWxGcmFtZSIsIl9ldmVudEZyb21JbmNvbXBsZXRlUmVqZWN0aW9uIiwiZ3JvdXBzIiwiTGlua2VkRXJyb3JzIiwibGltaXQiLCJfaGFuZGxlciIsImxpbmtlZEVycm9ycyIsIl93YWxrRXJyb3JUcmVlIiwiVXNlckFnZW50IiwicmVmZXJyZXIiLCJSZWZlcmVyIiwid2luZG93XzEiLCJTRU5UUllfUkVMRUFTRSIsImF1dG9TZXNzaW9uVHJhY2tpbmciLCJjbGllbnRDbGFzcyIsImRlYnVnIiwiaW5pdEFuZEJpbmQiLCJsb2FkUmVzb2x2ZWQiLCJmY3BSZXNvbHZlZCIsInBvc3NpYmx5RW5kU2Vzc2lvbiIsInJlc29sdmVXaW5kb3dMb2FkZWQiLCJwbyIsIlBlcmZvcm1hbmNlT2JzZXJ2ZXIiLCJlbnRyeUxpc3QiLCJnZXRFbnRyaWVzIiwiZW50cnkiLCJmaXJzdEhpZGRlblRpbWVfMSIsImRpc2Nvbm5lY3QiLCJ2aXNpYmlsaXR5U3RhdGUiLCJ0aW1lU3RhbXAiLCJvYnNlcnZlIiwiYnVmZmVyZWQiLCJzdGFydFNlc3Npb25UcmFja2luZyIsImluaXRTZW50cnkiLCJTZW50cnkiLCJTRU5UUllfRFNOIiwiQVBQX1ZFUlNJT04iLCJXZWVrU3RhcnRzT25UeXBlIiwibG9jYWxlc1N0YXJ0c1dpdGhTdW5kYXkiLCJ3ZWVrU3RhcnRzT24iLCJsMTBuIiwiU0VUX0xPQ0FMRSIsIlN1biIsIk1vbiIsInN1Z2dlc3RzIiwiYXZpYURlc3RpbmF0aW9uIiwiU0VUX0FWSUFfU1VHR0VTVCIsInN1Z2dlc3QiLCJ0cmFuc2ZlckRlc3RpbmF0aW9uIiwiU0VUX1RSQU5TRkVSX1NVR0dFU1QiLCJkZXN0aW5hdGlvbiIsIlNFVF9TVUdHRVNUIiwiaG9saWRheXMiLCJTRVRfSE9MSURBWVMiLCJTRVRfSE9MSURBWVNfTE9BRElORyIsInRyeUNvdW50IiwiY291bnRyaWVzIiwiU0VUX0NPVU5UUklFUyIsIlNFVF9MT0FESU5HIiwiSU5DX1RSWV9DT1VOVCIsImdldFN0b3JlZFZhbHVlIiwiZGVmYXVsdFZhbHVlIiwicG9wdWxhciIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzZXRDaXRpemVuc2hpcEhhbmRsZXIiLCJjb3VudHJ5IiwiY2l0aXplbnNoaXAiLCJTRVRfQ0lUSVpFTlNISVAiLCJzZXR0aW5ncyIsIlNFVF9TRVRUSU5HUyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ0YWJiYWJsZSIsInRhYmJhYmxlTm9kZSIsImhpZGVzQ29udGVudHMiLCJ6ZXJvU2l6ZSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwiaW5uZXJIVE1MIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJzY3JvbGxXaWR0aCIsInNjcm9sbEhlaWdodCIsImZvY3VzYWJsZSIsImlzVGFiSW5kZXhOb3ROYU4iLCJub2RlTmFtZSIsInBhcmVudEVsZW1lbnQiLCJ2aXNpYmxlIiwiaXNUYWJJbmRleE5hTiIsImFzc2VydE5vZGVMaXN0Iiwic2V0RWxlbWVudCIsInVzZUVsZW1lbnQiLCJfc2FmZUhUTUxFbGVtZW50IiwiZ2xvYmFsRWxlbWVudCIsInZhbGlkYXRlRWxlbWVudCIsImhpZGUiLCJhcHBFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiZG9jdW1lbnROb3RSZWFkeU9yU1NSVGVzdGluZyIsInJlc2V0Rm9yVGVzdGluZyIsIl93YXJuaW5nIiwiX3dhcm5pbmcyIiwibm9kZUxpc3QiLCJzZWxlY3RvciIsInBvcnRhbE9wZW5JbnN0YW5jZXMiLCJQb3J0YWxPcGVuSW5zdGFuY2VzIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9jbGFzc0NhbGxDaGVjayIsInJlZ2lzdGVyIiwib3Blbkluc3RhbmNlIiwib3Blbkluc3RhbmNlcyIsImRlcmVnaXN0ZXIiLCJzdWJzY3JpYmVycyIsImV2ZW50VHlwZSIsInN1YnNjcmliZXIiLCJzZXRUaGVtZSIsImJvcmRlciIsInNoYWRvdyIsImFsZXJ0Iiwic3VjY2VzcyIsIlRoZW1lIiwiVEhFTUUiLCJzZXRUaGVtZUFjdGlvbiIsInRoZW1lQXJyIiwiZ2xvYmFsVGhpcyIsImYiLCJ1Iiwic2VwYXJhdG9yIiwiaCIsImNhbWVsaXplIiwiZGVjYW1lbGl6ZSIsInBhc2NhbGl6ZSIsImRlcGFzY2FsaXplIiwiY2FtZWxpemVLZXlzIiwiZGVjYW1lbGl6ZUtleXMiLCJwYXNjYWxpemVLZXlzIiwiZGVwYXNjYWxpemVLZXlzIiwiaHVtcHMiLCJTIiwidyIsIk8iLCJkZWxlZ2F0ZXNGb2N1cyIsInN0eWxlU2hlZXRzIiwic3NyIiwieiIsInNoYWRvd1Jvb3QiLCJhdHRhY2hTaGFkb3ciLCJhZG9wdGVkU3R5bGVTaGVldHMiLCJGcmFnbWVudCIsInRhZyIsInNoYWRvd3Jvb3QiLCJvbmVPZiIsImJvb2wiLCJhcnJheU9mIiwiaW5zdGFuY2VPZiIsIkNTU1N0eWxlU2hlZXQiLCJpc1JlcXVpcmVkIiwiTWFwIiwiQSIsIlByb3h5IiwiRSIsIk9wIiwiaGFzT3duIiwiJFN5bWJvbCIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsImRlZmluZSIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsIl9pbnZva2UiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJDb250aW51ZVNlbnRpbmVsIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJyZWNvcmQiLCJ0cnlDYXRjaCIsIm1ha2VJbnZva2VNZXRob2QiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRQcm90byIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImludm9rZSIsIl9fYXdhaXQiLCJ1bndyYXBwZWQiLCJpbmZvIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhYmxlIiwiaXRlcmF0b3JNZXRob2QiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJhd3JhcCIsIml0ZXIiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsInN0b3AiLCJyb290UmVjb3JkIiwicnZhbCIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiU3RyaWN0TW9kZSIsIlByb2ZpbGVyIiwicSIsIlN1c3BlbnNlIiwiZm9yIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsIkIiLCJDIiwicmVmcyIsInVwZGF0ZXIiLCJEIiwiaXNSZWFjdENvbXBvbmVudCIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJGIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJHIiwiSCIsIkkiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIkoiLCIkJHR5cGVvZiIsIl9vd25lciIsIkwiLCJOIiwiSyIsIlAiLCJRIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJSIiwiVCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsInRyYW5zaXRpb24iLCJSZWFjdEN1cnJlbnRPd25lciIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwiY291bnQiLCJ0b0FycmF5Iiwib25seSIsIkNvbXBvbmVudCIsIlB1cmVDb21wb25lbnQiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIl9jb250ZXh0IiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIl9wYXlsb2FkIiwiX2luaXQiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwiYWEiLCJiYSIsImNhIiwiZGEiLCJlYSIsImZhIiwiaGEiLCJpYSIsImphIiwia2EiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJyZW1vdmVFbXB0eVN0cmluZyIsIm9hIiwicGEiLCJxYSIsIm1hIiwibmEiLCJsYSIsInNldEF0dHJpYnV0ZU5TIiwieGxpbmtIcmVmIiwicmEiLCJzYSIsInRhIiwidWEiLCJ3YSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiTWEiLCJLYSIsIkxhIiwiTmEiLCJPYSIsIlBhIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiUWEiLCJfcmVuZGVyIiwiUmEiLCJTYSIsIlRhIiwiVmEiLCJfdmFsdWVUcmFja2VyIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlVhIiwiV2EiLCJjaGVja2VkIiwiWGEiLCJhY3RpdmVFbGVtZW50IiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIiRhIiwiYWIiLCJiYiIsImNiIiwib3duZXJEb2N1bWVudCIsImViIiwiZGIiLCJmYiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJoYiIsImliIiwiamIiLCJrYiIsImxiIiwibWIiLCJuYiIsIm9iIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm5hbWVzcGFjZVVSSSIsInZhbHVlT2YiLCJmaXJzdENoaWxkIiwicGIiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsInFiIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInJiIiwic2IiLCJ0YiIsInNldFByb3BlcnR5IiwidWIiLCJtZW51aXRlbSIsImFyZWEiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJrZXlnZW4iLCJtZXRhIiwidHJhY2siLCJ3YnIiLCJ2YiIsIndiIiwieGIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJ5YiIsInpiIiwiQWIiLCJCYiIsIkNiIiwic3RhdGVOb2RlIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJPYiIsIlBiIiwiUWIiLCJSYiIsIlNiIiwiVGIiLCJVYiIsIlZiIiwiV2IiLCJYYiIsIlpiIiwiYWx0ZXJuYXRlIiwiZmxhZ3MiLCIkYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiYWMiLCJjYyIsInNpYmxpbmciLCJiYyIsImRjIiwiZWMiLCJmYyIsImdjIiwiaGMiLCJpYyIsImpjIiwia2MiLCJsYyIsIm1jIiwibmMiLCJvYyIsInBjIiwicWMiLCJyYyIsImJsb2NrZWRPbiIsImRvbUV2ZW50TmFtZSIsImV2ZW50U3lzdGVtRmxhZ3MiLCJuYXRpdmVFdmVudCIsInRhcmdldENvbnRhaW5lcnMiLCJzYyIsInBvaW50ZXJJZCIsInRjIiwidmMiLCJ3YyIsImxhbmVQcmlvcml0eSIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInByaW9yaXR5IiwiaHlkcmF0ZSIsImNvbnRhaW5lckluZm8iLCJ4YyIsInljIiwic2hpZnQiLCJ6YyIsIkFjIiwiQmMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJDYyIsIkRjIiwiRWMiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJGYyIsIkdjIiwiSGMiLCJhbmltYXRpb24iLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiUWMiLCJ1bnN0YWJsZV9ub3ciLCJSYyIsIlVjIiwicGVuZGluZ0xhbmVzIiwiZXhwaXJlZExhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsIlZjIiwiZW50YW5nbGVkTGFuZXMiLCJlbnRhbmdsZW1lbnRzIiwiV2MiLCJYYyIsIlljIiwiWmMiLCIkYyIsImV2ZW50VGltZXMiLCJjbHozMiIsImJkIiwiY2QiLCJMTjIiLCJkZCIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiZWQiLCJmZCIsImdkIiwiaGQiLCJ1YyIsImpkIiwia2QiLCJsZCIsIm1kIiwibmQiLCJvZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsInBkIiwicWQiLCJyZCIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50Iiwid2QiLCJ4ZCIsInlkIiwic2QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmQiLCJBZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImdldE1vZGlmaWVyU3RhdGUiLCJ6ZCIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJCZCIsIkRkIiwiZGF0YVRyYW5zZmVyIiwiRmQiLCJIZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJKZCIsImNsaXBib2FyZERhdGEiLCJMZCIsIk1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIk5kIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM1IiwiMzYiLCIzNyIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsIk9kIiwiQWx0IiwiTWV0YSIsIlNoaWZ0IiwiUGQiLCJSZCIsInJlcGVhdCIsIndoaWNoIiwiVGQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVmQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiWGQiLCJaZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiJGQiLCJiZSIsImRvY3VtZW50TW9kZSIsImNlIiwiZWUiLCJmZSIsImdlIiwiaGUiLCJpZSIsImxlIiwiY29sb3IiLCJkYXRldGltZSIsInJhbmdlIiwidGVsIiwid2VlayIsIm1lIiwibmUiLCJvZSIsInBlIiwicWUiLCJyZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJvbmlucHV0IiwiQWUiLCJkZXRhY2hFdmVudCIsIkJlIiwiQ2UiLCJhdHRhY2hFdmVudCIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwiTGUiLCJuZXh0U2libGluZyIsIk5lIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJPZSIsImNvbnRlbnRFZGl0YWJsZSIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImRlZmF1bHRWaWV3IiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJWZSIsIldlIiwiWGUiLCJZZSIsIlplIiwiWWIiLCIkZSIsImFmIiwiYmYiLCJjZiIsImRmIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJOYiIsImVmIiwiZmYiLCJwYXJlbnRXaW5kb3ciLCJnZiIsImhmIiwiamUiLCJjaGFyIiwia2UiLCJ1bnNoaWZ0IiwiamYiLCJrZiIsImxmIiwibWYiLCJhdXRvRm9jdXMiLCJuZiIsIl9faHRtbCIsIm9mIiwicGYiLCJxZiIsInJmIiwic2YiLCJwcmV2aW91c1NpYmxpbmciLCJ0ZiIsInZmIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJEZiIsIkVmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiRmYiLCJHZiIsIkhmIiwiSWYiLCJnZXRDaGlsZENvbnRleHQiLCJKZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJPZiIsIlBmIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJRZiIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiUmYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJTZiIsIlRmIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJVZiIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiVmYiLCJXZiIsIlhmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJZZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIlpmIiwiJGYiLCJhZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwic2ciLCJjaGlsZExhbmVzIiwidGciLCJkZXBlbmRlbmNpZXMiLCJmaXJzdENvbnRleHQiLCJsYW5lcyIsInVnIiwidmciLCJvYnNlcnZlZEJpdHMiLCJyZXNwb25kZXJzIiwid2ciLCJ4ZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiZmlyc3RCYXNlVXBkYXRlIiwibGFzdEJhc2VVcGRhdGUiLCJzaGFyZWQiLCJwZW5kaW5nIiwiZWZmZWN0cyIsInlnIiwiemciLCJldmVudFRpbWUiLCJsYW5lIiwicGF5bG9hZCIsIkFnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkdnIiwiS2ciLCJfcmVhY3RJbnRlcm5hbHMiLCJIZyIsIklnIiwiSmciLCJMZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIk1nIiwiTmciLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJPZyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiUGciLCJRZyIsIl9zdHJpbmdSZWYiLCJSZyIsIlNnIiwibGFzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIlRnIiwiVWciLCJlbGVtZW50VHlwZSIsIlZnIiwiaW1wbGVtZW50YXRpb24iLCJXZyIsIlhnIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJiaCIsImRoIiwiZWgiLCJmaCIsImdoIiwiaGgiLCJpaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBlbmRpbmdQcm9wcyIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsIl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5IiwidmgiLCJ3aCIsInhoIiwieWgiLCJ6aCIsIkFoIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJGaCIsIkdoIiwiSGgiLCJiYXNlUXVldWUiLCJJaCIsIkpoIiwiS2giLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiZWFnZXJSZWR1Y2VyIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiTGgiLCJNaCIsIl9nZXRWZXJzaW9uIiwiX3NvdXJjZSIsIm11dGFibGVSZWFkTGFuZXMiLCJOaCIsIlUiLCJnZXRTbmFwc2hvdCIsInNldFNuYXBzaG90IiwiT2giLCJQaCIsIlFoIiwiUmgiLCJkZXN0cm95IiwiZGVwcyIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImRpIiwicmVhZENvbnRleHQiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVzZU11dGFibGVTb3VyY2UiLCJ1c2VPcGFxdWVJZGVudGlmaWVyIiwidW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyIiwidWYiLCJlaSIsImZpIiwiZ2kiLCJoaSIsImlpIiwiamkiLCJraSIsImxpIiwibWkiLCJiYXNlTGFuZXMiLCJuaSIsIm9pIiwicGkiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJxaSIsInJpIiwicGVuZGluZ0NvbnRleHQiLCJCaSIsIkRpIiwiRWkiLCJzaSIsInJldHJ5TGFuZSIsInRpIiwiZmFsbGJhY2siLCJ1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayIsInVpIiwidW5zdGFibGVfZXhwZWN0ZWRMb2FkVGltZSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsImxhc3QiLCJ0YWlsIiwidGFpbE1vZGUiLCJBaSIsIkZpIiwiR2kiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwib25jbGljayIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZVRleHROb2RlIiwiViIsIkhpIiwiSWkiLCJXIiwiSmkiLCJLaSIsIkxpIiwiTWkiLCJOaSIsIk9pIiwiV2Vha01hcCIsIlBpIiwiUWkiLCJSaSIsIlNpIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJUaSIsImNvbXBvbmVudFN0YWNrIiwiVWkiLCJWaSIsIldpIiwiWGkiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIllpIiwiWmkiLCIkaSIsImZvY3VzIiwiYWoiLCJkaXNwbGF5IiwiYmoiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiY2oiLCJkaiIsImVqIiwiZmoiLCJnaiIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJoaiIsImlqIiwiamoiLCJraiIsImxqIiwibWoiLCJuaiIsIm9qIiwicGoiLCJYIiwiWSIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIndqIiwiY2siLCJaIiwieGoiLCJ5aiIsInpqIiwiQWoiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsIklqIiwiSmoiLCJTYyIsIktqIiwiTGoiLCJNaiIsImNhbGxiYWNrTm9kZSIsImV4cGlyYXRpb25UaW1lcyIsImNhbGxiYWNrUHJpb3JpdHkiLCJUYyIsIk5qIiwiT2oiLCJQaiIsIlFqIiwiUmoiLCJTaiIsIlRqIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRMYW5lcyIsIlVqIiwidGltZW91dEhhbmRsZSIsIldqIiwiWGoiLCJwaW5nQ2FjaGUiLCJZaiIsIlpqIiwidmEiLCJhayIsImJrIiwiZGsiLCJyYW5nZUNvdW50IiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImVrIiwiTWUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwic2Nyb2xsTGVmdCIsInNjcm9sbFRvcCIsIm9uQ29tbWl0RmliZXJSb290IiwiZmsiLCJnayIsImlrIiwicGVuZGluZ0NoaWxkcmVuIiwiamsiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwia2siLCJsayIsIm1rIiwibmsiLCJvayIsInFrIiwiaHlkcmF0aW9uT3B0aW9ucyIsIm11dGFibGVTb3VyY2VzIiwiX2ludGVybmFsUm9vdCIsInJrIiwiaGFzQXR0cmlidXRlIiwic2siLCJ1ayIsImhrIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwidW5tb3VudCIsImZvcm0iLCJWaiIsInZrIiwiRXZlbnRzIiwid2siLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwieGsiLCJyZW5kZXJlckNvbmZpZyIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoIiwib3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoIiwib3ZlcnJpZGVQcm9wcyIsIm92ZXJyaWRlUHJvcHNEZWxldGVQYXRoIiwib3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGgiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsInlrIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJmaW5kRE9NTm9kZSIsImZsdXNoU3luYyIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwicGVyZm9ybWFuY2UiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJzb3J0SW5kZXgiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJSZWFjdFByb3BUeXBlcyIsInN5bWJvbCIsImFueSIsIm9iamVjdE9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiQ0hST01FX1NFTkRfTUVTU0FHRV9DQUxMQkFDS19OT19SRVNQT05TRV9NRVNTQUdFIiwiU0VORF9SRVNQT05TRV9ERVBSRUNBVElPTl9XQVJOSU5HIiwid3JhcEFQSXMiLCJleHRlbnNpb25BUElzIiwiYXBpTWV0YWRhdGEiLCJEZWZhdWx0V2Vha01hcCIsImNyZWF0ZUl0ZW0iLCJpdGVtcyIsInN1cGVyIiwibWFrZUNhbGxiYWNrIiwibWV0YWRhdGEiLCJjYWxsYmFja0FyZ3MiLCJsYXN0RXJyb3IiLCJzaW5nbGVDYWxsYmFja0FyZyIsInBsdXJhbGl6ZUFyZ3VtZW50cyIsIm51bUFyZ3MiLCJ3cmFwTWV0aG9kIiwid3JhcHBlciIsInRhcmdldE1ldGhvZCIsInRoaXNPYmoiLCJ3cmFwT2JqZWN0Iiwid3JhcHBlcnMiLCJwcm94eVRhcmdldCIsInJlY2VpdmVyIiwibWluQXJncyIsIm1heEFyZ3MiLCJmYWxsYmFja1RvTm9DYWxsYmFjayIsImNiRXJyb3IiLCJub0NhbGxiYWNrIiwid3JhcEFzeW5jRnVuY3Rpb24iLCJkZXNjIiwiZGVsZXRlUHJvcGVydHkiLCJ3cmFwRXZlbnQiLCJ3cmFwcGVyTWFwIiwiaGFzTGlzdGVuZXIiLCJsb2dnZWRTZW5kUmVzcG9uc2VEZXByZWNhdGlvbldhcm5pbmciLCJvbk1lc3NhZ2VXcmFwcGVycyIsInNlbmRlciIsInNlbmRSZXNwb25zZSIsIndyYXBwZWRTZW5kUmVzcG9uc2UiLCJkaWRDYWxsU2VuZFJlc3BvbnNlIiwic2VuZFJlc3BvbnNlUHJvbWlzZSIsImlzUmVzdWx0VGhlbmFibGUiLCJzZW5kUHJvbWlzZWRSZXN1bHQiLCJfX21veldlYkV4dGVuc2lvblBvbHlmaWxsUmVqZWN0X18iLCJ3cmFwcGVkU2VuZE1lc3NhZ2VDYWxsYmFjayIsInJlcGx5Iiwid3JhcHBlZFNlbmRNZXNzYWdlIiwiYXBpTmFtZXNwYWNlT2JqIiwid3JhcHBlZENiIiwic3RhdGljV3JhcHBlcnMiLCJvbk1lc3NhZ2UiLCJvbk1lc3NhZ2VFeHRlcm5hbCIsInNldHRpbmdNZXRhZGF0YSIsInByaXZhY3kiLCJuZXR3b3JrIiwic2VydmljZXMiLCJ3ZWJzaXRlcyIsIkF4aW9zIiwibWVyZ2VDb25maWciLCJjcmVhdGVJbnN0YW5jZSIsImluc3RhbmNlQ29uZmlnIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsInByb21pc2VzIiwic3ByZWFkIiwiaXNBeGlvc0Vycm9yIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiaW50ZXJjZXB0b3JzIiwiaW50ZXJjZXB0b3IiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsImdldFVyaSIsInVzZSIsImVqZWN0IiwidHJhbnNmb3JtRGF0YSIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0aHJvd0lmUmVxdWVzdGVkIiwiZm5zIiwibm9ybWFsaXplZE5hbWUiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJ3cml0ZSIsImV4cGlyZXMiLCJzZWN1cmUiLCJ0b0dNVFN0cmluZyIsIlJlZ0V4cCIsImRlY29kZVVSSUNvbXBvbmVudCIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInJlcXVlc3RlZFVSTCIsInJlbGF0aXZlVVJMIiwiaWdub3JlRHVwbGljYXRlT2YiLCJwYXJzZWQiLCJvcmlnaW5VUkwiLCJtc2llIiwidXJsUGFyc2luZ05vZGUiLCJyZXNvbHZlVVJMIiwiaGFzaCIsInBhdGhuYW1lIiwicmVxdWVzdFVSTCIsInJlc29sdmVQcm9taXNlIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJMYXp5IiwiUG9ydGFsIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIiwiaW52YXJpYW50IiwiY29uZGl0aW9uIiwiRXJyIiwiYm9keU9wZW5DbGFzc05hbWUiLCJwb3J0YWxDbGFzc05hbWUiLCJfZXh0ZW5kcyIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9yZWFjdCIsIl9yZWFjdDIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3JlYWN0RG9tMiIsIl9wcm9wVHlwZXMyIiwiX01vZGFsUG9ydGFsMiIsImFyaWFBcHBIaWRlciIsIm5ld09iaiIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3NhZmVIVE1MRWxlbWVudDIiLCJfcmVhY3RMaWZlY3ljbGVzQ29tcGF0IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSZWZlcmVuY2VFcnJvciIsImlzUmVhY3QxNiIsImdldENyZWF0ZVBvcnRhbCIsImdldFBhcmVudEVsZW1lbnQiLCJwYXJlbnRTZWxlY3RvciIsIl9Db21wb25lbnQiLCJfdGVtcCIsInJlbW92ZVBvcnRhbCIsInBhcmVudCIsInBvcnRhbFJlZiIsInBvcnRhbCIsInJlbmRlclBvcnRhbCIsImRlZmF1bHRTdHlsZXMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfaW5oZXJpdHMiLCJwcmV2UHJvcHMiLCJwcmV2UGFyZW50IiwibmV4dFBhcmVudCIsInNuYXBzaG90IiwiX3Byb3BzIiwiY2xvc2VzQXQiLCJjbG9zZVRpbWVvdXRNUyIsImJlZm9yZUNsb3NlIiwiY2xvc2VXaXRoVGltZW91dCIsIm92ZXJsYXkiLCJodG1sT3BlbkNsYXNzTmFtZSIsImFmdGVyT3BlbiIsIm9uUmVxdWVzdENsb3NlIiwic2hvdWxkRm9jdXNBZnRlclJlbmRlciIsInNob3VsZFJldHVybkZvY3VzQWZ0ZXJDbG9zZSIsInByZXZlbnRTY3JvbGwiLCJhcmlhIiwiY29udGVudExhYmVsIiwic2hvdWxkQ2xvc2VPbkVzYyIsImNvbnRlbnRSZWYiLCJjb250ZW50RWxlbWVudCIsImNvbnRlbnRFbCIsInJpZ2h0IiwiYm90dG9tIiwiYmFja2dyb3VuZENvbG9yIiwiYmFja2dyb3VuZCIsIldlYmtpdE92ZXJmbG93U2Nyb2xsaW5nIiwiYm9yZGVyUmFkaXVzIiwib3V0bGluZSIsInBvbHlmaWxsIiwiX3R5cGVvZiIsImZvY3VzTWFuYWdlciIsIl9zY29wZVRhYjIiLCJjbGFzc0xpc3QiLCJfcG9ydGFsT3Blbkluc3RhbmNlczIiLCJDTEFTU19OQU1FUyIsImFyaWFIaWRkZW5JbnN0YW5jZXMiLCJNb2RhbFBvcnRhbCIsInNldE92ZXJsYXlSZWYiLCJzZXRDb250ZW50UmVmIiwiYWZ0ZXJDbG9zZSIsIl90aGlzJHByb3BzIiwicmV0dXJuRm9jdXMiLCJ0ZWFyZG93blNjb3BlZEZvY3VzIiwicG9wV2l0aG91dEZvY3VzIiwib25BZnRlckNsb3NlIiwiYmVmb3JlT3BlbiIsImNsb3NlVGltZXIiLCJzZXR1cFNjb3BlZEZvY3VzIiwibWFya0ZvckZvY3VzTGF0ZXIiLCJvdmVybGF5RWwiLCJjbG9zZVdpdGhvdXRUaW1lb3V0IiwiZm9jdXNDb250ZW50IiwiY29udGVudEhhc0ZvY3VzIiwiaGFuZGxlS2V5RG93biIsInJlcXVlc3RDbG9zZSIsImhhbmRsZU92ZXJsYXlPbkNsaWNrIiwic2hvdWxkQ2xvc2UiLCJvd25lckhhbmRsZXNDbG9zZSIsImhhbmRsZUNvbnRlbnRPbk1vdXNlVXAiLCJoYW5kbGVPdmVybGF5T25Nb3VzZURvd24iLCJoYW5kbGVDb250ZW50T25DbGljayIsImhhbmRsZUNvbnRlbnRPbk1vdXNlRG93biIsInNob3VsZEJlQ2xvc2VkIiwiYnVpbGRDbGFzc05hbWUiLCJhZGRpdGlvbmFsIiwiYXR0cmlidXRlc0Zyb21PYmplY3QiLCJwcmVmaXgiLCJtb3ZlRnJvbUNvbnRlbnRUb092ZXJsYXkiLCJwcmV2U3RhdGUiLCJfcHJvcHMyIiwiY29udGVudFN0eWxlcyIsIm92ZXJsYXlTdHlsZXMiLCJvdmVybGF5UHJvcHMiLCJvbk1vdXNlRG93biIsImNvbnRlbnRQcm9wcyIsIm9uTW91c2VVcCIsIm1vZGFsIiwidGVzdElkIiwiaGFuZGxlQmx1ciIsImhhbmRsZUZvY3VzIiwiZm9jdXNMYXRlckVsZW1lbnRzIiwidG9Gb2N1cyIsIm1vZGFsRWxlbWVudCIsIl90YWJiYWJsZSIsIl90YWJiYWJsZTIiLCJuZWVkVG9Gb2N1cyIsImNoZWNrU2FmYXJpIiwid2FybmluZyIsIkV4ZWN1dGlvbkVudmlyb25tZW50IiwiY2FuVXNlV29ya2VycyIsIldvcmtlciIsImNhblVzZUV2ZW50TGlzdGVuZXJzIiwiY2FuVXNlVmlld3BvcnQiLCJzY3JlZW4iLCJkdW1wQ2xhc3NMaXN0cyIsImh0bWxDbGFzc0xpc3QiLCJkb2NCb2R5Q2xhc3NMaXN0IiwiY2xhc3NTdHJpbmciLCJjbGFzc0xpc3RSZWYiLCJwb2xsIiwiaW5jcmVtZW50UmVmZXJlbmNlIiwiZGVjcmVtZW50UmVmZXJlbmNlIiwiX3BvcnRhbE9wZW5JbnN0YW5jZXMiLCJhZnRlciIsImluc3RhbmNlcyIsImNsb25lTm9kZSIsIm5leHRQcm9wcyIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZyIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90IiwiZm91bmRXaWxsTW91bnROYW1lIiwiZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSIsImZvdW5kV2lsbFVwZGF0ZU5hbWUiLCJuZXdBcGlOYW1lIiwibWF5YmVTbmFwc2hvdCIsIl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmciLCJTdGVwIiwiZ2V0RGF0ZU1pbGxpc2Vjb25kc1BhcnQiLCJnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIiwiZGlydHlEYXRlIiwiYmFzZVRpbWV6b25lT2Zmc2V0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJzZXRTZWNvbmRzIiwiTlVNQkVSX0ZPUk1BVF9PUFRJT05TIiwiZ2V0Rm9ybWF0dGVyIiwiZm9ybWF0TnVtYmVyIiwiZm9ybWF0TnVtYmVyVG9QYXJ0cyIsIlJFTEFUSVZFX1RJTUVfRk9STUFUX09QVElPTlMiLCJmb3JtYXRSZWxhdGl2ZVRpbWUiLCJEQVRFX1RJTUVfRk9STUFUX09QVElPTlMiLCJmaWx0ZXJlZE9wdGlvbnMiLCJmb3JtYXREYXRlIiwiZm9ybWF0VGltZSIsImZvcm1hdERhdGVUb1BhcnRzIiwiZm9ybWF0VGltZVRvUGFydHMiLCJQTFVSQUxfRk9STUFUX09QVElPTlMiLCJmb3JtYXRQbHVyYWwiLCJzZXRUaW1lWm9uZUluT3B0aW9ucyIsImRlZXBNZXJnZU9wdGlvbnMiLCJvcHRzMSIsIm9wdHMyIiwiZGVlcE1lcmdlRm9ybWF0c0FuZFNldFRpbWVab25lIiwiZjEiLCJtZkZvcm1hdHMiLCJtZXNzYWdlRGVzY3JpcHRvciIsImRlZmF1bHRNZXNzYWdlIiwiZm9ybWF0dGVkTWVzc2FnZVBhcnRzIiwicmF3VmFsdWVzIiwiZXNjYXBlZCIsIkxJU1RfRk9STUFUX09QVElPTlMiLCJmb3JtYXRMaXN0IiwicmljaFZhbHVlcyIsInNlcmlhbGl6ZWRWYWx1ZXMiLCJnZW5lcmF0ZVRva2VuIiwiRElTUExBWV9OQU1FU19PUFRPTlMiLCJmb3JtYXREaXNwbGF5TmFtZSIsInNoYWxsb3dFcXVhbHMiLCJwcm9jZXNzSW50bENvbmZpZyIsImNyZWF0ZUludGwiLCJyZXNvbHZlZENvbmZpZyIsInByZXZDb25maWciLCJhZGRNaWxsaXNlY29uZHMiLCJkaXJ0eUFtb3VudCIsImFtb3VudCIsIkVycm9yTWVzc2FnZSIsIlJlc3RvcmVQYXNzd29yZCIsIm9uU3VibWl0Iiwic3VibWl0TGFiZWwiLCJzZXRVc2VybmFtZSIsInNldE1lc3NhZ2UiLCJpbnB1dEVtYWlsUmVmIiwidXNlQmFja2dyb3VuZFJlcXVlc3RIYW5kbGVyIiwiaGFuZGxlVXNlcm5hbWVDaGFuZ2UiLCJoYW5kbGVGb3JtU3VibWl0IiwiY29tbWFuZHMiLCJJTlBVVF9TSVpFIiwiQlVUVE9OX1NJWkUiLCJCVVRUT05fVFlQRSIsIlNVQk1JVCIsIlZpZXciLCJTaWduSW4iLCJpc0FjdGl2ZSIsInNldFBhc3N3b3JkIiwiaW5wdXRQYXNzd29yZFJlZiIsImhhbmRsZVBhc3N3b3JkQ2hhbmdlIiwiVGV4dEJ1dHRvbiIsIkF1dGgiLCJvblNraXAiLCJpc1Jlc3RvcmluZ1Bhc3N3b3JkIiwic2V0UmVzdG9yaW5nUGFzc3dvcmRTdGF0ZSIsInVzZUZ1bm5lbCIsImhhbmRsZUJ1dHRvblNpZ25VcENsaWNrIiwiZXh0ZW5zaW9uX2JyYW5kIiwiZXh0ZW5zaW9uX3ZlcnNpb24iLCJ1c2VyX2lkIiwiaGFuZGxlU2lnbkluU3VibWl0IiwiaGFuZGxlQnV0dG9uUmVzdG9yaW5nUGFzc3dvcmRDbGljayIsImhhbmRsZUJ1dHRvblNraXBDbGljayIsIkxJR0hUIiwicG9saWN5SHJlZiIsInN0YXJ0T2ZEYXkiLCJzZXRIb3VycyIsImRhdGVUaW1lc3RhbXBTb3VyY2UiLCJub3dTZWNvbmRzIiwicGxhdGZvcm1QZXJmb3JtYW5jZSIsImdldE5vZGVQZXJmb3JtYW5jZSIsInRpbWVPcmlnaW4iLCJnZXRCcm93c2VyUGVyZm9ybWFuY2UiLCJ0aW1lc3RhbXBTb3VyY2UiLCJkYXRlVGltZXN0YW1wSW5TZWNvbmRzIiwidGltaW5nIiwibmF2aWdhdGlvblN0YXJ0IiwiX1JlYWN0JENvbXBvbmVudCIsImluaXRpYWxTdGF0dXMiLCJhcHBlYXIiLCJpc01vdW50aW5nIiwiYXBwZWFyU3RhdHVzIiwibW91bnRPbkVudGVyIiwibmV4dENhbGxiYWNrIiwiX3Byb3RvIiwidXBkYXRlU3RhdHVzIiwibmV4dFN0YXR1cyIsImNhbmNlbE5leHRDYWxsYmFjayIsImdldFRpbWVvdXRzIiwibW91bnRpbmciLCJwZXJmb3JtRW50ZXIiLCJwZXJmb3JtRXhpdCIsIl90aGlzMiIsImFwcGVhcmluZyIsIm5vZGVSZWYiLCJtYXliZU5vZGUiLCJtYXliZUFwcGVhcmluZyIsInRpbWVvdXRzIiwiZW50ZXJUaW1lb3V0Iiwic2FmZVNldFN0YXRlIiwib25FbnRlcmVkIiwib25FbnRlciIsIm9uRW50ZXJpbmciLCJvblRyYW5zaXRpb25FbmQiLCJfdGhpczMiLCJvbkV4aXQiLCJvbkV4aXRpbmciLCJvbkV4aXRlZCIsInNldE5leHRDYWxsYmFjayIsIl90aGlzNCIsImRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIiLCJhZGRFbmRMaXN0ZW5lciIsIl9yZWYzIiwibWF5YmVOZXh0Q2FsbGJhY2siLCJUcmFuc2l0aW9uR3JvdXBDb250ZXh0IiwiVU5NT1VOVEVEIiwiRVhJVEVEIiwiRU5URVJJTkciLCJFTlRFUkVEIiwiRVhJVElORyIsImFkZERheXMiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsImlzVmFsaWQiLCJmb3JtYXREaXN0YW5jZUxvY2FsZSIsImxlc3NUaGFuWFNlY29uZHMiLCJvbmUiLCJ4U2Vjb25kcyIsImhhbGZBTWludXRlIiwibGVzc1RoYW5YTWludXRlcyIsInhNaW51dGVzIiwiYWJvdXRYSG91cnMiLCJ4SG91cnMiLCJ4RGF5cyIsImFib3V0WFdlZWtzIiwieFdlZWtzIiwiYWJvdXRYTW9udGhzIiwieE1vbnRocyIsImFib3V0WFllYXJzIiwieFllYXJzIiwib3ZlclhZZWFycyIsImFsbW9zdFhZZWFycyIsImJ1aWxkRm9ybWF0TG9uZ0ZuIiwiZGlydHlPcHRpb25zIiwiZGVmYXVsdFdpZHRoIiwiZm9ybWF0TG9uZyIsImZvcm1hdFJlbGF0aXZlTG9jYWxlIiwibGFzdFdlZWsiLCJ5ZXN0ZXJkYXkiLCJ0b2RheSIsInRvbW9ycm93IiwibmV4dFdlZWsiLCJidWlsZExvY2FsaXplRm4iLCJkaXJ0eUluZGV4IiwidmFsdWVzQXJyYXkiLCJmb3JtYXR0aW5nVmFsdWVzIiwiZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCIsIl9kZWZhdWx0V2lkdGgiLCJfd2lkdGgiLCJhcmd1bWVudENhbGxiYWNrIiwiYnVpbGRNYXRjaEZuIiwiZGlydHlTdHJpbmciLCJtYXRjaFBhdHRlcm4iLCJtYXRjaFBhdHRlcm5zIiwiZGVmYXVsdE1hdGNoV2lkdGgiLCJtYXRjaFJlc3VsdCIsIm1hdGNoZWRTdHJpbmciLCJwYXJzZVBhdHRlcm5zIiwiZGVmYXVsdFBhcnNlV2lkdGgiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJmaW5kS2V5IiwidmFsdWVDYWxsYmFjayIsImZvcm1hdERpc3RhbmNlIiwiYWRkU3VmZml4IiwiY29tcGFyaXNvbiIsImZvcm1hdFJlbGF0aXZlIiwiX2RhdGUiLCJfYmFzZURhdGUiLCJsb2NhbGl6ZSIsIm9yZGluYWxOdW1iZXIiLCJfZGlydHlPcHRpb25zIiwicmVtMTAwIiwibmFycm93IiwiYWJicmV2aWF0ZWQiLCJxdWFydGVyIiwiZGF5UGVyaW9kIiwiYW0iLCJwbSIsIm1pZG5pZ2h0Iiwibm9vbiIsIm1vcm5pbmciLCJhZnRlcm5vb24iLCJldmVuaW5nIiwibmlnaHQiLCJwYXJzZVBhdHRlcm4iLCJwYXJzZVJlc3VsdCIsImZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsInN1Yk1pbGxpc2Vjb25kcyIsImFkZExlYWRpbmdaZXJvcyIsInRhcmdldExlbmd0aCIsInNpZ24iLCJhYnMiLCJzaWduZWRZZWFyIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJkYXlQZXJpb2RFbnVtVmFsdWUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwibnVtYmVyT2ZEaWdpdHMiLCJtaWxsaXNlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJwb3ciLCJzdGFydE9mVVRDSVNPV2VlayIsImdldFVUQ0RheSIsImRpZmYiLCJzZXRVVENEYXRlIiwic2V0VVRDSG91cnMiLCJnZXRVVENJU09XZWVrWWVhciIsImZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIiLCJzZXRVVENGdWxsWWVhciIsInN0YXJ0T2ZOZXh0WWVhciIsImZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIiLCJzdGFydE9mVGhpc1llYXIiLCJzdGFydE9mVVRDSVNPV2Vla1llYXIiLCJmb3VydGhPZkphbnVhcnkiLCJzdGFydE9mVVRDV2VlayIsImxvY2FsZVdlZWtTdGFydHNPbiIsImRlZmF1bHRXZWVrU3RhcnRzT24iLCJnZXRVVENXZWVrWWVhciIsImxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsImRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUiLCJmaXJzdFdlZWtPZk5leHRZZWFyIiwiZmlyc3RXZWVrT2ZUaGlzWWVhciIsInN0YXJ0T2ZVVENXZWVrWWVhciIsImZpcnN0V2VlayIsImRheVBlcmlvZEVudW0iLCJmb3JtYXRUaW1lem9uZVNob3J0IiwiZGlydHlEZWxpbWl0ZXIiLCJhYnNPZmZzZXQiLCJob3VycyIsIm1pbnV0ZXMiLCJmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXMiLCJmb3JtYXRUaW1lem9uZSIsImxpZ2h0Rm9ybWF0dGVycyIsInNpZ25lZFdlZWtZZWFyIiwid2Vla1llYXIiLCJyb3VuZCIsImdldFVUQ1dlZWsiLCJpc29XZWVrIiwiZ2V0VVRDSVNPV2VlayIsImRheU9mWWVhciIsInNldFVUQ01vbnRoIiwic3RhcnRPZlllYXJUaW1lc3RhbXAiLCJkaWZmZXJlbmNlIiwiZ2V0VVRDRGF5T2ZZZWFyIiwiZGF5T2ZXZWVrIiwibG9jYWxEYXlPZldlZWsiLCJpc29EYXlPZldlZWsiLCJfbG9jYWxpemUiLCJ0aW1lem9uZU9mZnNldCIsIl9vcmlnaW5hbERhdGUiLCJvcmlnaW5hbERhdGUiLCJkYXRlTG9uZ0Zvcm1hdHRlciIsInRpbWVMb25nRm9ybWF0dGVyIiwiZGF0ZVRpbWVGb3JtYXQiLCJkYXRlUGF0dGVybiIsInRpbWVQYXR0ZXJuIiwicHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zIiwicHJvdGVjdGVkV2Vla1llYXJUb2tlbnMiLCJpc1Byb3RlY3RlZERheU9mWWVhclRva2VuIiwiaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuIiwidGhyb3dQcm90ZWN0ZWRFcnJvciIsImZvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImVzY2FwZWRTdHJpbmdSZWdFeHAiLCJkb3VibGVRdW90ZVJlZ0V4cCIsInVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwIiwiZGlydHlGb3JtYXRTdHIiLCJmb3JtYXRTdHIiLCJ1dGNEYXRlIiwiZm9ybWF0dGVyT3B0aW9ucyIsImZpcnN0Q2hhcmFjdGVyIiwibG9uZ0Zvcm1hdHRlciIsImNsZWFuRXNjYXBlZFN0cmluZyIsImZvcm1hdHRlciIsInVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucyIsInVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnMiLCJBdXRoU3RlcCIsIm5leHRTdGVwIiwidW5Nb3VudCIsIlVuTW91bnRDb250ZXh0IiwiaGFuZGxlU3VibWl0IiwibGl2ZVNldHRpbmdzIiwiT3JkZXJlZExpc3QiLCJFY29ub215U3RlcCIsImdvVG9TdGVwIiwiaGFuZGxlQnV0dG9uTmV4dENsaWNrIiwiYmFja2dyb3VuZEltYWdlIiwiQlVUVE9OIiwiSW5zdHJ1Y3Rpb25zU3RlcCIsImhhbmRsZUJ1dHRvbkV4YW1wbGVDbGljayIsIkVYQU1QTEVfQk9PS0lOR19XSU5ET1ciLCJnZXRIYXNoIiwiZGVjb2RlVVJJIiwiU3RlcFdpemFyZCIsImdldFRyYW5zaXRpb25zIiwib25IYXNoQ2hhbmdlIiwiaXNJbnZhbGlkU3RlcCIsInNldEFjdGl2ZVN0ZXAiLCJvblN0ZXBDaGFuZ2UiLCJmaXJzdFN0ZXAiLCJsYXN0U3RlcCIsInByZXZpb3VzU3RlcCIsInVwZGF0ZUhhc2giLCJpc0hhc2hFbmFibGVkIiwiaGFzaEtleXMiLCJzdGF0cyIsImFjdGl2ZVN0ZXAiLCJ0cmFuc2l0aW9ucyIsImVudGVyUmlnaHQiLCJBbmltYXRlIiwiYW5pbWF0ZWQiLCJmYWRlSW5SaWdodCIsImVudGVyTGVmdCIsImZhZGVJbkxlZnQiLCJleGl0UmlnaHQiLCJmYWRlT3V0UmlnaHQiLCJleGl0TGVmdCIsImZhZGVPdXRMZWZ0IiwiaW5pdGlhbFN0ZXAiLCJoYXNoS2V5IiwiX2luaXRpYWxTdGVwIiwiaW50cm8iLCJzdGVwIiwiaXNMYXp5TW91bnQiLCJuYXYiLCJjdXJyZW50U3RlcCIsInRvdGFsU3RlcHMiLCJjaGlsZHJlbldpdGhQcm9wcyIsIldlbGNvbWVTdGVwIiwiaGFuZGxlQnV0dG9uTmV4dFN0ZXBDbGljayIsIk9uQm9hcmRpbmciLCJpc0xvZ2dlZCIsImhhbmRsZURvY3VtZW50S2V5UHJlc3MiLCJBdXRoTWVzc2FnZXMiLCJMYW5ndWFnZU1lc3NhZ2VzIiwiU2lnbkluTWVzc2FnZXMiLCJwZXJzaXN0ZWRMYW5ndWFnZSIsIlBBUlRORVJTX0FVVEhfS0VZIiwicGFydG5lcnNBdXRoS2V5IiwiQXBwIiwiZGl2Il0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0cs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QUEsRUFBRCxLQUNFLDBCQUNFbjNELEtBQU0vSSxVQUFRbUksUUFBUTJtQyxPQUFPOXJCLElBQU1RLElBQUlGLFlBQ3ZDcmEsSUFBSSxlQUVOLGtCQUFDLElBQUQsQ0FDRXMyQixPQUFRblMsRUFDUm5yQixTQUFRLG9CQUNOQSxHQUFTbXJCLFVBREgsYUFDTixFQUFpRG5yQixnQkFEM0MsUUFFTkEsR0FBU2tDLElBQVNFLElBQUlwQyxVQUd4QixrQkFBQyt0QyxHQUFBLEVBQWdCenFCLFNBQWpCLENBQ0VscEIsTUFBTyxDQUNMK3dCLFdBQ0FDLGdCQUdGLGtCQUFDLEdBQUQsQ0FDRTJqRyxTQUFVcnhILFFBQVE0eEgsR0FDbEI1RCxRQUFTQSxTQVN2QjVrRixJQUFTcEgsT0FBTyxrQkFBQzZ2RixFQUFELE1BQVNocEgsR0ExQzFCLDJDQUFEIiwiZmlsZSI6ImpzL29uQm9hcmRpbmcuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDU0OCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NyZWF0ZUJpbmRpbmcobywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgZXhwb3J0cykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0LmRlZmF1bHQgPSBtb2Q7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHByaXZhdGVNYXApIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBnZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJpdmF0ZU1hcC5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgcHJpdmF0ZU1hcCwgdmFsdWUpIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlTWFwLnNldChyZWNlaXZlciwgdmFsdWUpO1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iLCJ2YXIgY3NzbWVtID0gZnVuY3Rpb24gKHN0eWxlcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGVsZW0pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1vZHMsIG1peCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKCFzdHlsZXMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZXJlIGlzIG5vIHN0eWxlcycpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFlbGVtKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGVyZSBpcyBubyBlbGVtZW50IG5hbWUnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgY2xhc3NlcyA9IFtlbGVtXTtcblxuICAgICAgaWYgKG1vZHMpIHtcbiAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMobW9kcykuZm9yRWFjaChmdW5jdGlvbiAobW9kTmFtZSkge1xuICAgICAgICAgIHZhciBtb2RWYWwgPSBtb2RzW21vZE5hbWVdO1xuXG4gICAgICAgICAgaWYgKG1vZFZhbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKFtlbGVtLCBtb2ROYW1lXS5qb2luKCdfJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAobW9kVmFsKSB7XG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goW2VsZW0sIG1vZE5hbWUsIG1vZFZhbF0uam9pbignXycpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2xhc3Nlc1xuICAgICAgICAubWFwKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHN0eWxlc1tjbGFzc05hbWVdID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gc3R5bGVzW2NsYXNzTmFtZV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybihjbGFzc05hbWUsICdwcm9wZXJ0eSBub3QgZm91bmQgaW4gc3R5bGVzJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgLmNvbmNhdChtaXggfHwgW10pXG4gICAgICAgIC5qb2luKCcgJyk7XG4gICAgfTtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY3NzbWVtO1xuIiwiZXhwb3J0IGVudW0gU3RvcmFnZSB7XG4gIC8vIEF1dGhcbiAgUEFSVE5FUlNfQVVUSF9LRVkgPSAnUEFSVE5FUlNfQVVUSF9LRVknLFxuICBVSUQgPSAnVUlEJyxcbiAgVVNFUl9JRCA9ICdVU0VSX0lEJyxcblxuICAvLyBBbmFseXRpY3NcbiAgUElOR0VSX1BFUklPRCA9ICdQSU5HRVJfUEVSSU9EJyxcblxuICAvLyBPbkJvYXJkaW5nXG4gIFdBU19PTkJPQVJESU5HX1NIT1dOID0gJ1dBU19PTkJPQVJESU5HX1NIT1dOJyxcbiAgT05CT0FSRElOR19UQUJfSUQgPSAnT05CT0FSRElOR19UQUJfSUQnLFxuICBCT09LSU5HX1NDUk9MTF9UT19UQUJMRV9PTl9GSVJTVF9PRkZFUiA9ICdCT09LSU5HX1NDUk9MTF9UT19UQUJMRV9PTl9GSVJTVF9PRkZFUicsXG5cbiAgLy8gRmlyc3RCb29raW5nXG4gIElTX0ZJUlNUX0JPT0tJTkcgPSAnSVNfRklSU1RfQk9PS0lORycsXG4gIFdBU19GSVJTVF9CT09LSU5HX1NIT1dOID0gJ1dBU19GSVJTVF9CT09LSU5HX1NIT1dOJyxcblxuICAvLyBPZmZlclxuICBOT19SQVRFX0RBVEEgPSAnTk9fUkFURV9EQVRBJyxcbiAgUkFURSA9ICdSQVRFJyxcbiAgUkFURVMgPSAnUkFURVMnLFxuXG4gIC8vIFByb21vY29kZXNcbiAgUFJPTU9DT0RFID0gJ1BST01PQ09ERScsXG5cbiAgLy8gRXRjXG4gIExBTkdVQUdFID0gJ0xBTkdVQUdFJyxcbiAgTElWRV9TRVRUSU5HUyA9ICdMSVZFX1NFVFRJTkdTJyxcbiAgTk9USUZJQ0FUSU9OU19TRVRUSU5HUyA9ICdOT1RJRklDQVRJT05TX1NFVFRJTkdTJyxcbiAgUFJJQ0VfU0VUVElOR1MgPSAnUFJJQ0VfU0VUVElOR1MnLFxuICBQUk9NT19DQU1QQUlHTiA9ICdQUk9NT19DQU1QQUlHTicsXG5cbiAgLy8gSW5mb3JtYXRpb24gd2luZG93c1xuICBJTkZPUk1BVElPTl9TVEVQID0gJ0lORk9STUFUSU9OX1NURVAnLFxuICBMQVNUX1RJTUVfSU5GT1JNQVRJT05fV0FTX1NIT1dOID0gJ0xBU1RfVElNRV9JTkZPUk1BVElPTl9XQVNfU0hPV04nLFxufVxuIiwiaW1wb3J0IHsgYnJvd3NlciB9IGZyb20gJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbC10cyc7XG5cbmltcG9ydCB7IFN0b3JhZ2UgfSBmcm9tICdAY29uc3RhbnRzL3N0b3JhZ2UnO1xuXG5leHBvcnQgY29uc3QgZ2V0RnJvbVN0b3JhZ2UgPSBhc3luYyAocGFyYW06IFN0b3JhZ2UpOiBQcm9taXNlPGFueT4gPT4ge1xuICBjb25zdCBzdG9yYWdlID0gYXdhaXQgYnJvd3Nlci5zdG9yYWdlLmxvY2FsLmdldChbcGFyYW1dKTtcbiAgcmV0dXJuIHN0b3JhZ2VbcGFyYW1dO1xufTtcblxuZXhwb3J0IGNvbnN0IHNhdmVUb1N0b3JhZ2UgPSBhc3luYyAoXG4gIHBhcmFtOiBTdG9yYWdlLFxuICB2YWx1ZTogYW55XG4pOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgYXdhaXQgYnJvd3Nlci5zdG9yYWdlLmxvY2FsLnNldCh7IFtwYXJhbV06IHZhbHVlIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IHJlbW92ZUZyb21TdG9yYWdlID0gYXN5bmMgKHBhcmFtOiBTdG9yYWdlKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGF3YWl0IGJyb3dzZXIuc3RvcmFnZS5sb2NhbC5yZW1vdmUocGFyYW0pO1xufTtcbiIsIi8qXG5IVE1MIGVzY2FwaW5nIGlzIHRoZSBzYW1lIGFzIFJlYWN0J3NcbihvbiBwdXJwb3NlLikgVGhlcmVmb3JlLCBpdCBoYXMgdGhlIGZvbGxvd2luZyBDb3B5cmlnaHQgYW5kIExpY2Vuc2luZzpcblxuQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbkFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cblRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFXG5maWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiBSZWFjdCdzIHNvdXJjZSB0cmVlLlxuKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbnRsTWVzc2FnZUZvcm1hdCBmcm9tICdpbnRsLW1lc3NhZ2Vmb3JtYXQnO1xuaW1wb3J0IG1lbW9pemVJbnRsQ29uc3RydWN0b3IgZnJvbSAnaW50bC1mb3JtYXQtY2FjaGUnO1xuaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnQGZvcm1hdGpzL2ludGwtdXRpbHMnO1xuY29uc3QgRVNDQVBFRF9DSEFSUyA9IHtcbiAgICAzODogJyZhbXA7JyxcbiAgICA2MjogJyZndDsnLFxuICAgIDYwOiAnJmx0OycsXG4gICAgMzQ6ICcmcXVvdDsnLFxuICAgIDM5OiAnJiN4Mjc7Jyxcbn07XG5jb25zdCBVTlNBRkVfQ0hBUlNfUkVHRVggPSAvWyY+PFwiJ10vZztcbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGUoc3RyKSB7XG4gICAgcmV0dXJuICgnJyArIHN0cikucmVwbGFjZShVTlNBRkVfQ0hBUlNfUkVHRVgsIG1hdGNoID0+IEVTQ0FQRURfQ0hBUlNbbWF0Y2guY2hhckNvZGVBdCgwKV0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlclByb3BzKHByb3BzLCB3aGl0ZWxpc3QsIGRlZmF1bHRzID0ge30pIHtcbiAgICByZXR1cm4gd2hpdGVsaXN0LnJlZHVjZSgoZmlsdGVyZWQsIG5hbWUpID0+IHtcbiAgICAgICAgaWYgKG5hbWUgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgIGZpbHRlcmVkW25hbWVdID0gcHJvcHNbbmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobmFtZSBpbiBkZWZhdWx0cykge1xuICAgICAgICAgICAgZmlsdGVyZWRbbmFtZV0gPSBkZWZhdWx0c1tuYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsdGVyZWQ7XG4gICAgfSwge30pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGludmFyaWFudEludGxDb250ZXh0KGludGwpIHtcbiAgICBpbnZhcmlhbnQoaW50bCwgJ1tSZWFjdCBJbnRsXSBDb3VsZCBub3QgZmluZCByZXF1aXJlZCBgaW50bGAgb2JqZWN0LiAnICtcbiAgICAgICAgJzxJbnRsUHJvdmlkZXI+IG5lZWRzIHRvIGV4aXN0IGluIHRoZSBjb21wb25lbnQgYW5jZXN0cnkuJyk7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgZXhjZXB0aW9uKSB7XG4gICAgY29uc3QgZU1zZyA9IGV4Y2VwdGlvbiA/IGBcXG4ke2V4Y2VwdGlvbi5zdGFja31gIDogJyc7XG4gICAgcmV0dXJuIGBbUmVhY3QgSW50bF0gJHttZXNzYWdlfSR7ZU1zZ31gO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRFcnJvckhhbmRsZXIoZXJyb3IpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgREVGQVVMVF9JTlRMX0NPTkZJRyA9IHtcbiAgICBmb3JtYXRzOiB7fSxcbiAgICBtZXNzYWdlczoge30sXG4gICAgdGltZVpvbmU6IHVuZGVmaW5lZCxcbiAgICB0ZXh0Q29tcG9uZW50OiBSZWFjdC5GcmFnbWVudCxcbiAgICBkZWZhdWx0TG9jYWxlOiAnZW4nLFxuICAgIGRlZmF1bHRGb3JtYXRzOiB7fSxcbiAgICBvbkVycm9yOiBkZWZhdWx0RXJyb3JIYW5kbGVyLFxufTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbnRsQ2FjaGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0ZVRpbWU6IHt9LFxuICAgICAgICBudW1iZXI6IHt9LFxuICAgICAgICBtZXNzYWdlOiB7fSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7fSxcbiAgICAgICAgcGx1cmFsUnVsZXM6IHt9LFxuICAgICAgICBsaXN0OiB7fSxcbiAgICAgICAgZGlzcGxheU5hbWVzOiB7fSxcbiAgICB9O1xufVxuLyoqXG4gKiBDcmVhdGUgaW50bCBmb3JtYXR0ZXJzIGFuZCBwb3B1bGF0ZSBjYWNoZVxuICogQHBhcmFtIGNhY2hlIGV4cGxpY2l0IGNhY2hlIHRvIHByZXZlbnQgbGVha2luZyBtZW1vcnlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZvcm1hdHRlcnMoY2FjaGUgPSBjcmVhdGVJbnRsQ2FjaGUoKSkge1xuICAgIGNvbnN0IFJlbGF0aXZlVGltZUZvcm1hdCA9IEludGwuUmVsYXRpdmVUaW1lRm9ybWF0O1xuICAgIGNvbnN0IExpc3RGb3JtYXQgPSBJbnRsLkxpc3RGb3JtYXQ7XG4gICAgY29uc3QgRGlzcGxheU5hbWVzID0gSW50bC5EaXNwbGF5TmFtZXM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0RGF0ZVRpbWVGb3JtYXQ6IG1lbW9pemVJbnRsQ29uc3RydWN0b3IoSW50bC5EYXRlVGltZUZvcm1hdCwgY2FjaGUuZGF0ZVRpbWUpLFxuICAgICAgICBnZXROdW1iZXJGb3JtYXQ6IG1lbW9pemVJbnRsQ29uc3RydWN0b3IoSW50bC5OdW1iZXJGb3JtYXQsIGNhY2hlLm51bWJlciksXG4gICAgICAgIGdldE1lc3NhZ2VGb3JtYXQ6IG1lbW9pemVJbnRsQ29uc3RydWN0b3IoSW50bE1lc3NhZ2VGb3JtYXQsIGNhY2hlLm1lc3NhZ2UpLFxuICAgICAgICBnZXRSZWxhdGl2ZVRpbWVGb3JtYXQ6IG1lbW9pemVJbnRsQ29uc3RydWN0b3IoUmVsYXRpdmVUaW1lRm9ybWF0LCBjYWNoZS5yZWxhdGl2ZVRpbWUpLFxuICAgICAgICBnZXRQbHVyYWxSdWxlczogbWVtb2l6ZUludGxDb25zdHJ1Y3RvcihJbnRsLlBsdXJhbFJ1bGVzLCBjYWNoZS5wbHVyYWxSdWxlcyksXG4gICAgICAgIGdldExpc3RGb3JtYXQ6IG1lbW9pemVJbnRsQ29uc3RydWN0b3IoTGlzdEZvcm1hdCwgY2FjaGUubGlzdCksXG4gICAgICAgIGdldERpc3BsYXlOYW1lczogbWVtb2l6ZUludGxDb25zdHJ1Y3RvcihEaXNwbGF5TmFtZXMsIGNhY2hlLmRpc3BsYXlOYW1lcyksXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXROYW1lZEZvcm1hdChmb3JtYXRzLCB0eXBlLCBuYW1lLCBvbkVycm9yKSB7XG4gICAgY29uc3QgZm9ybWF0VHlwZSA9IGZvcm1hdHMgJiYgZm9ybWF0c1t0eXBlXTtcbiAgICBsZXQgZm9ybWF0O1xuICAgIGlmIChmb3JtYXRUeXBlKSB7XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdFR5cGVbbmFtZV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICB9XG4gICAgb25FcnJvcihjcmVhdGVFcnJvcihgTm8gJHt0eXBlfSBmb3JtYXQgbmFtZWQ6ICR7bmFtZX1gKSk7XG59XG4iLCJleHBvcnQgZW51bSBMYW5ndWFnZSB7XG4gIEVOID0gJ2VuJyxcbiAgUlUgPSAncnUnLFxuICBERSA9ICdkZScsXG4gIEVTID0gJ2VzJyxcbiAgSVQgPSAnaXQnLFxuICBGUiA9ICdmcicsXG4gIFBMID0gJ3BsJyxcbiAgVEsgPSAndGsnLFxuICBCRyA9ICdiZycsXG4gIFJPID0gJ3JvJyxcbiAgUFQgPSAncHQnLFxufVxuXG5leHBvcnQgY29uc3QgTGFuZ3VhZ2VMYWJlbDogUGFydGlhbDxSZWNvcmQ8TGFuZ3VhZ2UsIHN0cmluZz4+ID0ge1xuICBbTGFuZ3VhZ2UuRU5dOiAnRW5nbGlzaCcsXG4gIFtMYW5ndWFnZS5SVV06ICfQoNGD0YHRgdC60LjQuScsXG59O1xuXG5leHBvcnQgY29uc3QgbmF0aW9uYWxpdGllc1RvTGFuZ3VhZ2VzOiBSZWNvcmQ8c3RyaW5nLCBMYW5ndWFnZT4gPSB7XG4gIGdiOiBMYW5ndWFnZS5FTixcbiAgZGU6IExhbmd1YWdlLkRFLFxuICBlczogTGFuZ3VhZ2UuRVMsXG4gIGl0OiBMYW5ndWFnZS5JVCxcbiAgZnI6IExhbmd1YWdlLkZSLFxuICBwbDogTGFuZ3VhZ2UuUEwsXG4gIHRrOiBMYW5ndWFnZS5USyxcbiAgcnU6IExhbmd1YWdlLlJVLFxuICBiZzogTGFuZ3VhZ2UuQkcsXG4gIGh1OiBMYW5ndWFnZS5FTixcbiAgZ3I6IExhbmd1YWdlLkVOLFxuICBybzogTGFuZ3VhZ2UuUk8sXG4gIGFlOiBMYW5ndWFnZS5FTixcbiAgcnM6IExhbmd1YWdlLkVOLFxuICBhbDogTGFuZ3VhZ2UuRU4sXG4gIHB0OiBMYW5ndWFnZS5QVCxcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuZXhwb3J0cy5icm93c2VyID0gcmVxdWlyZShcIndlYmV4dGVuc2lvbi1wb2x5ZmlsbFwiKTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXMgKi9cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUncyB0eXBlIGlzIG9uZSBvZiBhIGZldyBFcnJvciBvciBFcnJvci1saWtlXG4gKiB7QGxpbmsgaXNFcnJvcn0uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Vycm9yKHdhdCkge1xuICAgIHN3aXRjaCAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdhdCkpIHtcbiAgICAgICAgY2FzZSAnW29iamVjdCBFcnJvcl0nOlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGNhc2UgJ1tvYmplY3QgRXhjZXB0aW9uXSc6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgY2FzZSAnW29iamVjdCBET01FeGNlcHRpb25dJzpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGlzSW5zdGFuY2VPZih3YXQsIEVycm9yKTtcbiAgICB9XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBFcnJvckV2ZW50XG4gKiB7QGxpbmsgaXNFcnJvckV2ZW50fS5cbiAqXG4gKiBAcGFyYW0gd2F0IEEgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRXJyb3JFdmVudCh3YXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdhdCkgPT09ICdbb2JqZWN0IEVycm9yRXZlbnRdJztcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUncyB0eXBlIGlzIERPTUVycm9yXG4gKiB7QGxpbmsgaXNET01FcnJvcn0uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0RPTUVycm9yKHdhdCkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwod2F0KSA9PT0gJ1tvYmplY3QgRE9NRXJyb3JdJztcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUncyB0eXBlIGlzIERPTUV4Y2VwdGlvblxuICoge0BsaW5rIGlzRE9NRXhjZXB0aW9ufS5cbiAqXG4gKiBAcGFyYW0gd2F0IEEgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRE9NRXhjZXB0aW9uKHdhdCkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwod2F0KSA9PT0gJ1tvYmplY3QgRE9NRXhjZXB0aW9uXSc7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBhIHN0cmluZ1xuICoge0BsaW5rIGlzU3RyaW5nfS5cbiAqXG4gKiBAcGFyYW0gd2F0IEEgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyaW5nKHdhdCkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwod2F0KSA9PT0gJ1tvYmplY3QgU3RyaW5nXSc7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgaXMgYSBwcmltaXRpdmUgKHVuZGVmaW5lZCwgbnVsbCwgbnVtYmVyLCBib29sZWFuLCBzdHJpbmcpXG4gKiB7QGxpbmsgaXNQcmltaXRpdmV9LlxuICpcbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHJldHVybnMgQSBib29sZWFuIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNQcmltaXRpdmUod2F0KSB7XG4gICAgcmV0dXJuIHdhdCA9PT0gbnVsbCB8fCAodHlwZW9mIHdhdCAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIHdhdCAhPT0gJ2Z1bmN0aW9uJyk7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlJ3MgdHlwZSBpcyBhbiBvYmplY3QgbGl0ZXJhbFxuICoge0BsaW5rIGlzUGxhaW5PYmplY3R9LlxuICpcbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHJldHVybnMgQSBib29sZWFuIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh3YXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdhdCkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIHR5cGUgaXMgYW4gRXZlbnQgaW5zdGFuY2VcbiAqIHtAbGluayBpc0V2ZW50fS5cbiAqXG4gKiBAcGFyYW0gd2F0IEEgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRXZlbnQod2F0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBFdmVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNJbnN0YW5jZU9mKHdhdCwgRXZlbnQpO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIHR5cGUgaXMgYW4gRWxlbWVudCBpbnN0YW5jZVxuICoge0BsaW5rIGlzRWxlbWVudH0uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gcmVwcmVzZW50aW5nIHRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VsZW1lbnQod2F0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBpc0luc3RhbmNlT2Yod2F0LCBFbGVtZW50KTtcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUncyB0eXBlIGlzIGFuIHJlZ2V4cFxuICoge0BsaW5rIGlzUmVnRXhwfS5cbiAqXG4gKiBAcGFyYW0gd2F0IEEgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUmVnRXhwKHdhdCkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwod2F0KSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIHZhbHVlIGhhcyBhIHRoZW4gZnVuY3Rpb24uXG4gKiBAcGFyYW0gd2F0IEEgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVGhlbmFibGUod2F0KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgIHJldHVybiBCb29sZWFuKHdhdCAmJiB3YXQudGhlbiAmJiB0eXBlb2Ygd2F0LnRoZW4gPT09ICdmdW5jdGlvbicpO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB2YWx1ZSdzIHR5cGUgaXMgYSBTeW50aGV0aWNFdmVudFxuICoge0BsaW5rIGlzU3ludGhldGljRXZlbnR9LlxuICpcbiAqIEBwYXJhbSB3YXQgQSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHJldHVybnMgQSBib29sZWFuIHJlcHJlc2VudGluZyB0aGUgcmVzdWx0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTeW50aGV0aWNFdmVudCh3YXQpIHtcbiAgICByZXR1cm4gaXNQbGFpbk9iamVjdCh3YXQpICYmICduYXRpdmVFdmVudCcgaW4gd2F0ICYmICdwcmV2ZW50RGVmYXVsdCcgaW4gd2F0ICYmICdzdG9wUHJvcGFnYXRpb24nIGluIHdhdDtcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdmFsdWUncyB0eXBlIGlzIGFuIGluc3RhbmNlIG9mIHByb3ZpZGVkIGNvbnN0cnVjdG9yLlxuICoge0BsaW5rIGlzSW5zdGFuY2VPZn0uXG4gKlxuICogQHBhcmFtIHdhdCBBIHZhbHVlIHRvIGJlIGNoZWNrZWQuXG4gKiBAcGFyYW0gYmFzZSBBIGNvbnN0cnVjdG9yIHRvIGJlIHVzZWQgaW4gYSBjaGVjay5cbiAqIEByZXR1cm5zIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzSW5zdGFuY2VPZih3YXQsIGJhc2UpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gd2F0IGluc3RhbmNlb2YgYmFzZTtcbiAgICB9XG4gICAgY2F0Y2ggKF9lKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pcy5qcy5tYXAiLCJleHBvcnQgY29uc3QgQkFTSUNfUFJJQ0lOR19BVVRIX0lEID1cbiAgJ016ZzZaRFV4T0RReFltUXRZVE5sTmkwMFl6a3hMVGd3WVRrdFl6Sm1NbU5qTUdGbE9HTTUnO1xuZXhwb3J0IGNvbnN0IEJSQU5EID0gJ3JhdGVoYXdrJztcbmV4cG9ydCBjb25zdCBERUZBVUxUX1RIUkVTSE9MRCA9IDAuMDI7XG5leHBvcnQgY29uc3QgTEFORyA9ICdydSc7XG5leHBvcnQgY29uc3QgUk9PVF9JRCA9ICdyYXRlaGF3ay1leHRlbnNpb24nO1xuZXhwb3J0IGNvbnN0IFZFUlNJT04gPSAncmF0ZWhhd2snO1xuIiwiaW1wb3J0IHsgYnJvd3NlciB9IGZyb20gJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbC10cyc7XG5cbmltcG9ydCB7IExhbmd1YWdlLCBuYXRpb25hbGl0aWVzVG9MYW5ndWFnZXMgfSBmcm9tICdAY29uc3RhbnRzL2xhbmd1YWdlcyc7XG5cbmV4cG9ydCBjb25zdCBub29wID0gKCk6IHZvaWQgPT4ge307XG5cbmV4cG9ydCBjb25zdCBnZXRDb29raWVzID0gYXN5bmMgKFxuICB1cmw6IHN0cmluZyxcbiAgbmFtZTogc3RyaW5nXG4pOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD4gPT4ge1xuICBjb25zdCBkZXRhaWxzID0geyB1cmwsIG5hbWUgfTtcbiAgY29uc3QgY29va2llID0gYXdhaXQgYnJvd3Nlci5jb29raWVzLmdldChkZXRhaWxzKTtcbiAgcmV0dXJuIGNvb2tpZT8udmFsdWU7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0VmVyc2lvbiA9ICgpOiBzdHJpbmcgPT4gYnJvd3Nlci5ydW50aW1lLmdldE1hbmlmZXN0KCkudmVyc2lvbjtcblxuZXhwb3J0IGNvbnN0IGdldFJvb3QgPSAoaWQ6IHN0cmluZyk6IEVsZW1lbnQgPT4ge1xuICBsZXQgcm9vdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke2lkfWApO1xuXG4gIGlmIChyb290KSB7XG4gICAgcm9vdC5yZW1vdmUoKTtcbiAgfVxuXG4gIHJvb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgcm9vdC5pZCA9IGlkO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHJvb3QpO1xuXG4gIHJldHVybiByb290O1xufTtcblxuZXhwb3J0IGNvbnN0IGdldExpbmsgPSAoaHJlZjogc3RyaW5nKTogSFRNTExpbmtFbGVtZW50ID0+IHtcbiAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcbiAgbGluay5yZWwgPSAnc3R5bGVzaGVldCc7XG4gIGxpbmsuaHJlZiA9IGhyZWY7XG4gIHJldHVybiBsaW5rO1xufTtcblxuZXhwb3J0IGNvbnN0IG51bWJlcldpdGhTZXBhcmF0b3JzID0gKG51bWJlcjogbnVtYmVyKTogc3RyaW5nID0+IHtcbiAgY29uc3Qgc3RyaW5nID0gbnVtYmVyLnRvU3RyaW5nKCk7XG4gIHJldHVybiBzdHJpbmcubGVuZ3RoID4gNFxuICAgID8gc3RyaW5nLnJlcGxhY2UoL1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csICcgJylcbiAgICA6IHN0cmluZztcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRCcm93c2VyTmFtZSA9ICgpOiBzdHJpbmcgPT4ge1xuICBjb25zdCB1c2VyQWdlbnQgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuXG4gIGlmICh1c2VyQWdlbnQuaW5jbHVkZXMoJ2VkZycpKSB7XG4gICAgcmV0dXJuICdlZGdlJztcbiAgfVxuXG4gIGlmICh1c2VyQWdlbnQuaW5jbHVkZXMoJ29wcicpKSB7XG4gICAgcmV0dXJuICdvcGVyYSc7XG4gIH1cblxuICBpZiAodXNlckFnZW50LmluY2x1ZGVzKCdmaXJlZm94JykpIHtcbiAgICByZXR1cm4gJ2ZpcmVmb3gnO1xuICB9XG5cbiAgaWYgKHVzZXJBZ2VudC5pbmNsdWRlcygnc2FmYXJpJykgJiYgIXVzZXJBZ2VudC5pbmNsdWRlcygnY2hyb21lJykpIHtcbiAgICByZXR1cm4gJ3NhZmFyaSc7XG4gIH1cblxuICByZXR1cm4gJ2Nocm9tZSc7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0TmF0aW9uYWxpdHkgPSAoXG4gIG5hdGlvbmFsaXR5OiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gIGZhbGxiYWNrTmF0aW9uYWxpdHkgPSAnZ2InXG4pOiBzdHJpbmcgPT5cbiAgT2JqZWN0LmtleXMobmF0aW9uYWxpdGllc1RvTGFuZ3VhZ2VzKS5maW5kKFxuICAgIChyaE5hdGlvbmFsaXR5KSA9PiByaE5hdGlvbmFsaXR5ID09PSBuYXRpb25hbGl0eVxuICApIHx8IChmYWxsYmFja05hdGlvbmFsaXR5ID09PSBMYW5ndWFnZS5FTiA/ICdnYicgOiBmYWxsYmFja05hdGlvbmFsaXR5KTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcXVpcmVkQXJncyhyZXF1aXJlZCwgYXJncykge1xuICBpZiAoYXJncy5sZW5ndGggPCByZXF1aXJlZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocmVxdWlyZWQgKyAnIGFyZ3VtZW50JyArIChyZXF1aXJlZCA+IDEgPyAncycgOiAnJykgKyAnIHJlcXVpcmVkLCBidXQgb25seSAnICsgYXJncy5sZW5ndGggKyAnIHByZXNlbnQnKTtcbiAgfVxufSIsImltcG9ydCB7IGlzTm9kZUVudiB9IGZyb20gJy4vbm9kZSc7XG5pbXBvcnQgeyBzbmlwTGluZSB9IGZyb20gJy4vc3RyaW5nJztcbnZhciBmYWxsYmFja0dsb2JhbE9iamVjdCA9IHt9O1xuLyoqXG4gKiBTYWZlbHkgZ2V0IGdsb2JhbCBzY29wZSBvYmplY3RcbiAqXG4gKiBAcmV0dXJucyBHbG9iYWwgc2NvcGUgb2JqZWN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRHbG9iYWxPYmplY3QoKSB7XG4gICAgcmV0dXJuIChpc05vZGVFbnYoKVxuICAgICAgICA/IGdsb2JhbFxuICAgICAgICA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICA/IHdpbmRvd1xuICAgICAgICAgICAgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICA/IHNlbGZcbiAgICAgICAgICAgICAgICA6IGZhbGxiYWNrR2xvYmFsT2JqZWN0KTtcbn1cbi8qKlxuICogVVVJRDQgZ2VuZXJhdG9yXG4gKlxuICogQHJldHVybnMgc3RyaW5nIEdlbmVyYXRlZCBVVUlENC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHV1aWQ0KCkge1xuICAgIHZhciBnbG9iYWwgPSBnZXRHbG9iYWxPYmplY3QoKTtcbiAgICB2YXIgY3J5cHRvID0gZ2xvYmFsLmNyeXB0byB8fCBnbG9iYWwubXNDcnlwdG87XG4gICAgaWYgKCEoY3J5cHRvID09PSB2b2lkIDApICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAgICAgLy8gVXNlIHdpbmRvdy5jcnlwdG8gQVBJIGlmIGF2YWlsYWJsZVxuICAgICAgICB2YXIgYXJyID0gbmV3IFVpbnQxNkFycmF5KDgpO1xuICAgICAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycik7XG4gICAgICAgIC8vIHNldCA0IGluIGJ5dGUgN1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICAgICAgICBhcnJbM10gPSAoYXJyWzNdICYgMHhmZmYpIHwgMHg0MDAwO1xuICAgICAgICAvLyBzZXQgMiBtb3N0IHNpZ25pZmljYW50IGJpdHMgb2YgYnl0ZSA5IHRvICcxMCdcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgICAgICAgYXJyWzRdID0gKGFycls0XSAmIDB4M2ZmZikgfCAweDgwMDA7XG4gICAgICAgIHZhciBwYWQgPSBmdW5jdGlvbiAobnVtKSB7XG4gICAgICAgICAgICB2YXIgdiA9IG51bS50b1N0cmluZygxNik7XG4gICAgICAgICAgICB3aGlsZSAodi5sZW5ndGggPCA0KSB7XG4gICAgICAgICAgICAgICAgdiA9IFwiMFwiICsgdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gKHBhZChhcnJbMF0pICsgcGFkKGFyclsxXSkgKyBwYWQoYXJyWzJdKSArIHBhZChhcnJbM10pICsgcGFkKGFycls0XSkgKyBwYWQoYXJyWzVdKSArIHBhZChhcnJbNl0pICsgcGFkKGFycls3XSkpO1xuICAgIH1cbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwNTAzNC9ob3ctdG8tY3JlYXRlLWEtZ3VpZC11dWlkLWluLWphdmFzY3JpcHQvMjExNzUyMyMyMTE3NTIzXG4gICAgcmV0dXJuICd4eHh4eHh4eHh4eHg0eHh4eXh4eHh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICAgICAgICB2YXIgciA9IChNYXRoLnJhbmRvbSgpICogMTYpIHwgMDtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgICAgICAgdmFyIHYgPSBjID09PSAneCcgPyByIDogKHIgJiAweDMpIHwgMHg4O1xuICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgfSk7XG59XG4vKipcbiAqIFBhcnNlcyBzdHJpbmcgZm9ybSBvZiBVUkwgaW50byBhbiBvYmplY3RcbiAqIC8vIGJvcnJvd2VkIGZyb20gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjYXBwZW5kaXgtQlxuICogLy8gaW50ZW50aW9uYWxseSB1c2luZyByZWdleCBhbmQgbm90IDxhLz4gaHJlZiBwYXJzaW5nIHRyaWNrIGJlY2F1c2UgUmVhY3QgTmF0aXZlIGFuZCBvdGhlclxuICogLy8gZW52aXJvbm1lbnRzIHdoZXJlIERPTSBtaWdodCBub3QgYmUgYXZhaWxhYmxlXG4gKiBAcmV0dXJucyBwYXJzZWQgVVJMIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VVcmwodXJsKSB7XG4gICAgaWYgKCF1cmwpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICB2YXIgbWF0Y2ggPSB1cmwubWF0Y2goL14oKFteOi8/I10rKTopPyhcXC9cXC8oW14vPyNdKikpPyhbXj8jXSopKFxcPyhbXiNdKikpPygjKC4qKSk/JC8pO1xuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICAvLyBjb2VyY2UgdG8gdW5kZWZpbmVkIHZhbHVlcyB0byBlbXB0eSBzdHJpbmcgc28gd2UgZG9uJ3QgZ2V0ICd1bmRlZmluZWQnXG4gICAgdmFyIHF1ZXJ5ID0gbWF0Y2hbNl0gfHwgJyc7XG4gICAgdmFyIGZyYWdtZW50ID0gbWF0Y2hbOF0gfHwgJyc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaG9zdDogbWF0Y2hbNF0sXG4gICAgICAgIHBhdGg6IG1hdGNoWzVdLFxuICAgICAgICBwcm90b2NvbDogbWF0Y2hbMl0sXG4gICAgICAgIHJlbGF0aXZlOiBtYXRjaFs1XSArIHF1ZXJ5ICsgZnJhZ21lbnQsXG4gICAgfTtcbn1cbi8qKlxuICogRXh0cmFjdHMgZWl0aGVyIG1lc3NhZ2Ugb3IgdHlwZSt2YWx1ZSBmcm9tIGFuIGV2ZW50IHRoYXQgY2FuIGJlIHVzZWQgZm9yIHVzZXItZmFjaW5nIGxvZ3NcbiAqIEByZXR1cm5zIGV2ZW50J3MgZGVzY3JpcHRpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEV2ZW50RGVzY3JpcHRpb24oZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQubWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gZXZlbnQubWVzc2FnZTtcbiAgICB9XG4gICAgaWYgKGV2ZW50LmV4Y2VwdGlvbiAmJiBldmVudC5leGNlcHRpb24udmFsdWVzICYmIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0pIHtcbiAgICAgICAgdmFyIGV4Y2VwdGlvbiA9IGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF07XG4gICAgICAgIGlmIChleGNlcHRpb24udHlwZSAmJiBleGNlcHRpb24udmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBleGNlcHRpb24udHlwZSArIFwiOiBcIiArIGV4Y2VwdGlvbi52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXhjZXB0aW9uLnR5cGUgfHwgZXhjZXB0aW9uLnZhbHVlIHx8IGV2ZW50LmV2ZW50X2lkIHx8ICc8dW5rbm93bj4nO1xuICAgIH1cbiAgICByZXR1cm4gZXZlbnQuZXZlbnRfaWQgfHwgJzx1bmtub3duPic7XG59XG4vKiogSlNEb2MgKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25zb2xlU2FuZGJveChjYWxsYmFjaykge1xuICAgIHZhciBnbG9iYWwgPSBnZXRHbG9iYWxPYmplY3QoKTtcbiAgICB2YXIgbGV2ZWxzID0gWydkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InLCAnbG9nJywgJ2Fzc2VydCddO1xuICAgIGlmICghKCdjb25zb2xlJyBpbiBnbG9iYWwpKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgdmFyIG9yaWdpbmFsQ29uc29sZSA9IGdsb2JhbC5jb25zb2xlO1xuICAgIHZhciB3cmFwcGVkTGV2ZWxzID0ge307XG4gICAgLy8gUmVzdG9yZSBhbGwgd3JhcHBlZCBjb25zb2xlIG1ldGhvZHNcbiAgICBsZXZlbHMuZm9yRWFjaChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICBpZiAobGV2ZWwgaW4gZ2xvYmFsLmNvbnNvbGUgJiYgb3JpZ2luYWxDb25zb2xlW2xldmVsXS5fX3NlbnRyeV9vcmlnaW5hbF9fKSB7XG4gICAgICAgICAgICB3cmFwcGVkTGV2ZWxzW2xldmVsXSA9IG9yaWdpbmFsQ29uc29sZVtsZXZlbF07XG4gICAgICAgICAgICBvcmlnaW5hbENvbnNvbGVbbGV2ZWxdID0gb3JpZ2luYWxDb25zb2xlW2xldmVsXS5fX3NlbnRyeV9vcmlnaW5hbF9fO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy8gUGVyZm9ybSBjYWxsYmFjayBtYW5pcHVsYXRpb25zXG4gICAgdmFyIHJlc3VsdCA9IGNhbGxiYWNrKCk7XG4gICAgLy8gUmV2ZXJ0IHJlc3RvcmF0aW9uIHRvIHdyYXBwZWQgc3RhdGVcbiAgICBPYmplY3Qua2V5cyh3cmFwcGVkTGV2ZWxzKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXZlbCkge1xuICAgICAgICBvcmlnaW5hbENvbnNvbGVbbGV2ZWxdID0gd3JhcHBlZExldmVsc1tsZXZlbF07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogQWRkcyBleGNlcHRpb24gdmFsdWVzLCB0eXBlIGFuZCB2YWx1ZSB0byBhbiBzeW50aGV0aWMgRXhjZXB0aW9uLlxuICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCB0byBtb2RpZnkuXG4gKiBAcGFyYW0gdmFsdWUgVmFsdWUgb2YgdGhlIGV4Y2VwdGlvbi5cbiAqIEBwYXJhbSB0eXBlIFR5cGUgb2YgdGhlIGV4Y2VwdGlvbi5cbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZEV4Y2VwdGlvblR5cGVWYWx1ZShldmVudCwgdmFsdWUsIHR5cGUpIHtcbiAgICBldmVudC5leGNlcHRpb24gPSBldmVudC5leGNlcHRpb24gfHwge307XG4gICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyA9IGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMgfHwgW107XG4gICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXSA9IGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0gfHwge307XG4gICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS52YWx1ZSA9IGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0udmFsdWUgfHwgdmFsdWUgfHwgJyc7XG4gICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS50eXBlID0gZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS50eXBlIHx8IHR5cGUgfHwgJ0Vycm9yJztcbn1cbi8qKlxuICogQWRkcyBleGNlcHRpb24gbWVjaGFuaXNtIHRvIGEgZ2l2ZW4gZXZlbnQuXG4gKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSBtZWNoYW5pc20gTWVjaGFuaXNtIG9mIHRoZSBtZWNoYW5pc20uXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRFeGNlcHRpb25NZWNoYW5pc20oZXZlbnQsIG1lY2hhbmlzbSkge1xuICAgIGlmIChtZWNoYW5pc20gPT09IHZvaWQgMCkgeyBtZWNoYW5pc20gPSB7fTsgfVxuICAgIC8vIFRPRE86IFVzZSByZWFsIHR5cGUgd2l0aCBga2V5b2YgTWVjaGFuaXNtYCB0aGluZ3kgYW5kIG1heWJlIG1ha2UgaXQgYmV0dGVyP1xuICAgIHRyeSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgVHlwZSAnTWVjaGFuaXNtIHwge30nIGlzIG5vdCBhc3NpZ25hYmxlIHRvIHR5cGUgJ01lY2hhbmlzbSB8IHVuZGVmaW5lZCdcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS5tZWNoYW5pc20gPSBldmVudC5leGNlcHRpb24udmFsdWVzWzBdLm1lY2hhbmlzbSB8fCB7fTtcbiAgICAgICAgT2JqZWN0LmtleXMobWVjaGFuaXNtKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgTWVjaGFuaXNtIGhhcyBubyBpbmRleCBzaWduYXR1cmVcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICBldmVudC5leGNlcHRpb24udmFsdWVzWzBdLm1lY2hhbmlzbVtrZXldID0gbWVjaGFuaXNtW2tleV07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjYXRjaCAoX29PKSB7XG4gICAgICAgIC8vIG5vLWVtcHR5XG4gICAgfVxufVxuLyoqXG4gKiBBIHNhZmUgZm9ybSBvZiBsb2NhdGlvbi5ocmVmXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2NhdGlvbkhyZWYoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG4gICAgfVxuICAgIGNhdGNoIChvTykge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxufVxuLy8gaHR0cHM6Ly9zZW12ZXIub3JnLyNpcy10aGVyZS1hLXN1Z2dlc3RlZC1yZWd1bGFyLWV4cHJlc3Npb24tcmVnZXgtdG8tY2hlY2stYS1zZW12ZXItc3RyaW5nXG52YXIgU0VNVkVSX1JFR0VYUCA9IC9eKDB8WzEtOV1cXGQqKVxcLigwfFsxLTldXFxkKilcXC4oMHxbMS05XVxcZCopKD86LSgoPzowfFsxLTldXFxkKnxcXGQqW2EtekEtWi1dWzAtOWEtekEtWi1dKikoPzpcXC4oPzowfFsxLTldXFxkKnxcXGQqW2EtekEtWi1dWzAtOWEtekEtWi1dKikpKikpPyg/OlxcKyhbMC05YS16QS1aLV0rKD86XFwuWzAtOWEtekEtWi1dKykqKSk/JC87XG4vKipcbiAqIFBhcnNlcyBpbnB1dCBpbnRvIGEgU2VtVmVyIGludGVyZmFjZVxuICogQHBhcmFtIGlucHV0IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHNlbXZlciB2ZXJzaW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVNlbXZlcihpbnB1dCkge1xuICAgIHZhciBtYXRjaCA9IGlucHV0Lm1hdGNoKFNFTVZFUl9SRUdFWFApIHx8IFtdO1xuICAgIHZhciBtYWpvciA9IHBhcnNlSW50KG1hdGNoWzFdLCAxMCk7XG4gICAgdmFyIG1pbm9yID0gcGFyc2VJbnQobWF0Y2hbMl0sIDEwKTtcbiAgICB2YXIgcGF0Y2ggPSBwYXJzZUludChtYXRjaFszXSwgMTApO1xuICAgIHJldHVybiB7XG4gICAgICAgIGJ1aWxkbWV0YWRhdGE6IG1hdGNoWzVdLFxuICAgICAgICBtYWpvcjogaXNOYU4obWFqb3IpID8gdW5kZWZpbmVkIDogbWFqb3IsXG4gICAgICAgIG1pbm9yOiBpc05hTihtaW5vcikgPyB1bmRlZmluZWQgOiBtaW5vcixcbiAgICAgICAgcGF0Y2g6IGlzTmFOKHBhdGNoKSA/IHVuZGVmaW5lZCA6IHBhdGNoLFxuICAgICAgICBwcmVyZWxlYXNlOiBtYXRjaFs0XSxcbiAgICB9O1xufVxudmFyIGRlZmF1bHRSZXRyeUFmdGVyID0gNjAgKiAxMDAwOyAvLyA2MCBzZWNvbmRzXG4vKipcbiAqIEV4dHJhY3RzIFJldHJ5LUFmdGVyIHZhbHVlIGZyb20gdGhlIHJlcXVlc3QgaGVhZGVyIG9yIHJldHVybnMgZGVmYXVsdCB2YWx1ZVxuICogQHBhcmFtIG5vdyBjdXJyZW50IHVuaXggdGltZXN0YW1wXG4gKiBAcGFyYW0gaGVhZGVyIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiAnUmV0cnktQWZ0ZXInIGhlYWRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VSZXRyeUFmdGVySGVhZGVyKG5vdywgaGVhZGVyKSB7XG4gICAgaWYgKCFoZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRSZXRyeUFmdGVyO1xuICAgIH1cbiAgICB2YXIgaGVhZGVyRGVsYXkgPSBwYXJzZUludChcIlwiICsgaGVhZGVyLCAxMCk7XG4gICAgaWYgKCFpc05hTihoZWFkZXJEZWxheSkpIHtcbiAgICAgICAgcmV0dXJuIGhlYWRlckRlbGF5ICogMTAwMDtcbiAgICB9XG4gICAgdmFyIGhlYWRlckRhdGUgPSBEYXRlLnBhcnNlKFwiXCIgKyBoZWFkZXIpO1xuICAgIGlmICghaXNOYU4oaGVhZGVyRGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuIGhlYWRlckRhdGUgLSBub3c7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0UmV0cnlBZnRlcjtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhZGRzIGNvbnRleHQgKHByZS9wb3N0L2xpbmUpIGxpbmVzIHRvIHRoZSBwcm92aWRlZCBmcmFtZVxuICpcbiAqIEBwYXJhbSBsaW5lcyBzdHJpbmdbXSBjb250YWluaW5nIGFsbCBsaW5lc1xuICogQHBhcmFtIGZyYW1lIFN0YWNrRnJhbWUgdGhhdCB3aWxsIGJlIG11dGF0ZWRcbiAqIEBwYXJhbSBsaW5lc09mQ29udGV4dCBudW1iZXIgb2YgY29udGV4dCBsaW5lcyB3ZSB3YW50IHRvIGFkZCBwcmUvcG9zdFxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkQ29udGV4dFRvRnJhbWUobGluZXMsIGZyYW1lLCBsaW5lc09mQ29udGV4dCkge1xuICAgIGlmIChsaW5lc09mQ29udGV4dCA9PT0gdm9pZCAwKSB7IGxpbmVzT2ZDb250ZXh0ID0gNTsgfVxuICAgIHZhciBsaW5lbm8gPSBmcmFtZS5saW5lbm8gfHwgMDtcbiAgICB2YXIgbWF4TGluZXMgPSBsaW5lcy5sZW5ndGg7XG4gICAgdmFyIHNvdXJjZUxpbmUgPSBNYXRoLm1heChNYXRoLm1pbihtYXhMaW5lcywgbGluZW5vIC0gMSksIDApO1xuICAgIGZyYW1lLnByZV9jb250ZXh0ID0gbGluZXNcbiAgICAgICAgLnNsaWNlKE1hdGgubWF4KDAsIHNvdXJjZUxpbmUgLSBsaW5lc09mQ29udGV4dCksIHNvdXJjZUxpbmUpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGxpbmUpIHsgcmV0dXJuIHNuaXBMaW5lKGxpbmUsIDApOyB9KTtcbiAgICBmcmFtZS5jb250ZXh0X2xpbmUgPSBzbmlwTGluZShsaW5lc1tNYXRoLm1pbihtYXhMaW5lcyAtIDEsIHNvdXJjZUxpbmUpXSwgZnJhbWUuY29sbm8gfHwgMCk7XG4gICAgZnJhbWUucG9zdF9jb250ZXh0ID0gbGluZXNcbiAgICAgICAgLnNsaWNlKE1hdGgubWluKHNvdXJjZUxpbmUgKyAxLCBtYXhMaW5lcyksIHNvdXJjZUxpbmUgKyAxICsgbGluZXNPZkNvbnRleHQpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGxpbmUpIHsgcmV0dXJuIHNuaXBMaW5lKGxpbmUsIDApOyB9KTtcbn1cbi8qKlxuICogU3RyaXAgdGhlIHF1ZXJ5IHN0cmluZyBhbmQgZnJhZ21lbnQgb2ZmIG9mIGEgZ2l2ZW4gVVJMIG9yIHBhdGggKGlmIHByZXNlbnQpXG4gKlxuICogQHBhcmFtIHVybFBhdGggRnVsbCBVUkwgb3IgcGF0aCwgaW5jbHVkaW5nIHBvc3NpYmxlIHF1ZXJ5IHN0cmluZyBhbmQvb3IgZnJhZ21lbnRcbiAqIEByZXR1cm5zIFVSTCBvciBwYXRoIHdpdGhvdXQgcXVlcnkgc3RyaW5nIG9yIGZyYWdtZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpcFVybFF1ZXJ5QW5kRnJhZ21lbnQodXJsUGF0aCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuICAgIHJldHVybiB1cmxQYXRoLnNwbGl0KC9bXFw/I10vLCAxKVswXTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pc2MuanMubWFwIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcblxuaW1wb3J0IERvdHNMb2FkZXIgZnJvbSAnLi4vRG90c0xvYWRlcic7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9CdXR0b24uY3NzJztcblxuZXhwb3J0IGVudW0gU0laRSB7XG4gIFhMID0gJ3hsJyxcbiAgTCA9ICdsJyxcbiAgTSA9ICdtJyxcbiAgUyA9ICdzJyxcbn1cblxuZXhwb3J0IGVudW0gVklFVyB7XG4gIExJR0hUID0gJ2xpZ2h0JyxcbiAgR0hPU1QgPSAnZ2hvc3QnLFxuICBGTEFUID0gJ2ZsYXQnLFxufVxuXG5leHBvcnQgZW51bSBUWVBFIHtcbiAgQlVUVE9OID0gJ2J1dHRvbicsXG4gIFNVQk1JVCA9ICdzdWJtaXQnLFxuICBSRVNFVCA9ICdyZXNldCcsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuICBzaXplPzogU0laRTtcbiAgdmlldz86IFZJRVc7XG4gIHR5cGU/OiBUWVBFO1xuICAvKiog0JXRgdC70Lgg0L/QtdGA0LXQtNCw0L0sINC60L3QvtC/0LrQsCDRgdGC0LDQvdC+0LLQuNGC0YHRjyDRgdGB0YvQu9C60L7QuSAqL1xuICBocmVmPzogc3RyaW5nO1xuICAvKiB0YXJnZXQ9XCJfYmxhbmtcIiAqL1xuICBvcGVuSW5OZXdUYWI/OiBib29sZWFuO1xuICB3aWRlPzogYm9vbGVhbjtcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICBmb2N1c2VkPzogYm9vbGVhbjtcbiAgbG9hZGluZz86IGJvb2xlYW47XG4gIG9uQ2xpY2s/OiAoKSA9PiB2b2lkO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIHN0eWxlPzogUmVhY3QuQ1NTUHJvcGVydGllcztcbiAgdGVzdGlkPzogc3RyaW5nO1xufVxuXG5jb25zdCBlbSA9IGNzc21lbShzdHlsZXMpO1xuXG5jb25zdCBCdXR0b246IFJlYWN0LkZDPFByb3BzPiA9ICh7XG4gIGNoaWxkcmVuLFxuICBzaXplID0gU0laRS5NLFxuICB2aWV3LFxuICB0eXBlLFxuICBocmVmLFxuICBvcGVuSW5OZXdUYWIsXG4gIHdpZGUsXG4gIGRpc2FibGVkLFxuICBmb2N1c2VkLFxuICBsb2FkaW5nLFxuICBvbkNsaWNrLFxuICBjbGFzc05hbWUsXG4gIHN0eWxlLFxuICB0ZXN0aWQsXG59KSA9PiB7XG4gIGNvbnN0IHRydWVEaXNhYmxlZCA9IGRpc2FibGVkIHx8IGxvYWRpbmc7XG4gIGNvbnN0IGNsYXNzTmFtZXMgPSBlbSgnYnV0dG9uJykoeyBzaXplLCB2aWV3LCB3aWRlLCBmb2N1c2VkIH0sIGNsYXNzTmFtZSk7XG4gIGNvbnN0IGNvbnRlbnQgPSBsb2FkaW5nID8gPERvdHNMb2FkZXIgdmlldz17dmlld30gLz4gOiBjaGlsZHJlbjtcbiAgcmV0dXJuIGhyZWYgPyAoXG4gICAgPGFcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lc31cbiAgICAgIHRhYkluZGV4PXt0cnVlRGlzYWJsZWQgPyAtMSA6IDB9XG4gICAgICBkYXRhLWRpc2FibGVkPXt0cnVlRGlzYWJsZWR9XG4gICAgICBzdHlsZT17c3R5bGV9XG4gICAgICBocmVmPXt0cnVlRGlzYWJsZWQgPyB1bmRlZmluZWQgOiBocmVmfVxuICAgICAgdGFyZ2V0PXtvcGVuSW5OZXdUYWIgPyAnX2JsYW5rJyA6IHVuZGVmaW5lZH1cbiAgICAgIGRhdGEtdGVzdGlkPXt0ZXN0aWR9XG4gICAgPlxuICAgICAge2NvbnRlbnR9XG4gICAgPC9hPlxuICApIDogKFxuICAgIDxidXR0b25cbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lc31cbiAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICB0YWJJbmRleD17dHJ1ZURpc2FibGVkID8gLTEgOiAwfVxuICAgICAgc3R5bGU9e3N0eWxlfVxuICAgICAgZGlzYWJsZWQ9e3RydWVEaXNhYmxlZH1cbiAgICAgIHR5cGU9e3R5cGV9XG4gICAgICBkYXRhLXRlc3RpZD17dGVzdGlkfVxuICAgID5cbiAgICAgIHtjb250ZW50fVxuICAgIDwvYnV0dG9uPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uO1xuIiwiaW1wb3J0IHsgX192YWx1ZXMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGh0bWxUcmVlQXNTdHJpbmcgfSBmcm9tICcuL2Jyb3dzZXInO1xuaW1wb3J0IHsgaXNFbGVtZW50LCBpc0Vycm9yLCBpc0V2ZW50LCBpc0luc3RhbmNlT2YsIGlzUGxhaW5PYmplY3QsIGlzUHJpbWl0aXZlLCBpc1N5bnRoZXRpY0V2ZW50IH0gZnJvbSAnLi9pcyc7XG5pbXBvcnQgeyBNZW1vIH0gZnJvbSAnLi9tZW1vJztcbmltcG9ydCB7IGdldEZ1bmN0aW9uTmFtZSB9IGZyb20gJy4vc3RhY2t0cmFjZSc7XG5pbXBvcnQgeyB0cnVuY2F0ZSB9IGZyb20gJy4vc3RyaW5nJztcbi8qKlxuICogV3JhcCBhIGdpdmVuIG9iamVjdCBtZXRob2Qgd2l0aCBhIGhpZ2hlci1vcmRlciBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSBzb3VyY2UgQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBtZXRob2QgdG8gYmUgd3JhcHBlZC5cbiAqIEBwYXJhbSBuYW1lIEEgbmFtZSBvZiBtZXRob2QgdG8gYmUgd3JhcHBlZC5cbiAqIEBwYXJhbSByZXBsYWNlbWVudCBBIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gd3JhcCBhIGdpdmVuIG1ldGhvZC5cbiAqIEByZXR1cm5zIHZvaWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbGwoc291cmNlLCBuYW1lLCByZXBsYWNlbWVudCkge1xuICAgIGlmICghKG5hbWUgaW4gc291cmNlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBvcmlnaW5hbCA9IHNvdXJjZVtuYW1lXTtcbiAgICB2YXIgd3JhcHBlZCA9IHJlcGxhY2VtZW50KG9yaWdpbmFsKTtcbiAgICAvLyBNYWtlIHN1cmUgaXQncyBhIGZ1bmN0aW9uIGZpcnN0LCBhcyB3ZSBuZWVkIHRvIGF0dGFjaCBhbiBlbXB0eSBwcm90b3R5cGUgZm9yIGBkZWZpbmVQcm9wZXJ0aWVzYCB0byB3b3JrXG4gICAgLy8gb3RoZXJ3aXNlIGl0J2xsIHRocm93IFwiVHlwZUVycm9yOiBPYmplY3QuZGVmaW5lUHJvcGVydGllcyBjYWxsZWQgb24gbm9uLW9iamVjdFwiXG4gICAgaWYgKHR5cGVvZiB3cmFwcGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3cmFwcGVkLnByb3RvdHlwZSA9IHdyYXBwZWQucHJvdG90eXBlIHx8IHt9O1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMod3JhcHBlZCwge1xuICAgICAgICAgICAgICAgIF9fc2VudHJ5X29yaWdpbmFsX186IHtcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBvcmlnaW5hbCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKF9Pbykge1xuICAgICAgICAgICAgLy8gVGhpcyBjYW4gdGhyb3cgaWYgbXVsdGlwbGUgZmlsbCBoYXBwZW5zIG9uIGEgZ2xvYmFsIG9iamVjdCBsaWtlIFhNTEh0dHBSZXF1ZXN0XG4gICAgICAgICAgICAvLyBGaXhlcyBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L2lzc3Vlcy8yMDQzXG4gICAgICAgIH1cbiAgICB9XG4gICAgc291cmNlW25hbWVdID0gd3JhcHBlZDtcbn1cbi8qKlxuICogRW5jb2RlcyBnaXZlbiBvYmplY3QgaW50byB1cmwtZnJpZW5kbHkgZm9ybWF0XG4gKlxuICogQHBhcmFtIG9iamVjdCBBbiBvYmplY3QgdGhhdCBjb250YWlucyBzZXJpYWxpemFibGUgdmFsdWVzXG4gKiBAcmV0dXJucyBzdHJpbmcgRW5jb2RlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXJsRW5jb2RlKG9iamVjdCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmplY3QpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudChvYmplY3Rba2V5XSk7IH0pXG4gICAgICAgIC5qb2luKCcmJyk7XG59XG4vKipcbiAqIFRyYW5zZm9ybXMgYW55IG9iamVjdCBpbnRvIGFuIG9iamVjdCBsaXRlcmFsIHdpdGggYWxsIGl0J3MgYXR0cmlidXRlc1xuICogYXR0YWNoZWQgdG8gaXQuXG4gKlxuICogQHBhcmFtIHZhbHVlIEluaXRpYWwgc291cmNlIHRoYXQgd2UgaGF2ZSB0byB0cmFuc2Zvcm0gaW4gb3JkZXIgdG8gYmUgdXNhYmxlIGJ5IHRoZSBzZXJpYWxpemVyXG4gKi9cbmZ1bmN0aW9uIGdldFdhbGtTb3VyY2UodmFsdWUpIHtcbiAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICAgICAgdmFyIGVycm9yID0gdmFsdWU7XG4gICAgICAgIHZhciBlcnIgPSB7XG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAgbmFtZTogZXJyb3IubmFtZSxcbiAgICAgICAgICAgIHN0YWNrOiBlcnJvci5zdGFjayxcbiAgICAgICAgfTtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBlcnJvcikge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlcnJvciwgaSkpIHtcbiAgICAgICAgICAgICAgICBlcnJbaV0gPSBlcnJvcltpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXJyO1xuICAgIH1cbiAgICBpZiAoaXNFdmVudCh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIGV2ZW50XzEgPSB2YWx1ZTtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHt9O1xuICAgICAgICBzb3VyY2UudHlwZSA9IGV2ZW50XzEudHlwZTtcbiAgICAgICAgLy8gQWNjZXNzaW5nIGV2ZW50LnRhcmdldCBjYW4gdGhyb3cgKHNlZSBnZXRzZW50cnkvcmF2ZW4tanMjODM4LCAjNzY4KVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc291cmNlLnRhcmdldCA9IGlzRWxlbWVudChldmVudF8xLnRhcmdldClcbiAgICAgICAgICAgICAgICA/IGh0bWxUcmVlQXNTdHJpbmcoZXZlbnRfMS50YXJnZXQpXG4gICAgICAgICAgICAgICAgOiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZXZlbnRfMS50YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChfb08pIHtcbiAgICAgICAgICAgIHNvdXJjZS50YXJnZXQgPSAnPHVua25vd24+JztcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc291cmNlLmN1cnJlbnRUYXJnZXQgPSBpc0VsZW1lbnQoZXZlbnRfMS5jdXJyZW50VGFyZ2V0KVxuICAgICAgICAgICAgICAgID8gaHRtbFRyZWVBc1N0cmluZyhldmVudF8xLmN1cnJlbnRUYXJnZXQpXG4gICAgICAgICAgICAgICAgOiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZXZlbnRfMS5jdXJyZW50VGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoX29PKSB7XG4gICAgICAgICAgICBzb3VyY2UuY3VycmVudFRhcmdldCA9ICc8dW5rbm93bj4nO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgQ3VzdG9tRXZlbnQgIT09ICd1bmRlZmluZWQnICYmIGlzSW5zdGFuY2VPZih2YWx1ZSwgQ3VzdG9tRXZlbnQpKSB7XG4gICAgICAgICAgICBzb3VyY2UuZGV0YWlsID0gZXZlbnRfMS5kZXRhaWw7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSBpbiBldmVudF8xKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV2ZW50XzEsIGkpKSB7XG4gICAgICAgICAgICAgICAgc291cmNlW2ldID0gZXZlbnRfMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG4vKiogQ2FsY3VsYXRlcyBieXRlcyBzaXplIG9mIGlucHV0IHN0cmluZyAqL1xuZnVuY3Rpb24gdXRmOExlbmd0aCh2YWx1ZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgcmV0dXJuIH4tZW5jb2RlVVJJKHZhbHVlKS5zcGxpdCgvJS4ufC4vKS5sZW5ndGg7XG59XG4vKiogQ2FsY3VsYXRlcyBieXRlcyBzaXplIG9mIGlucHV0IG9iamVjdCAqL1xuZnVuY3Rpb24ganNvblNpemUodmFsdWUpIHtcbiAgICByZXR1cm4gdXRmOExlbmd0aChKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xufVxuLyoqIEpTRG9jICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplVG9TaXplKG9iamVjdCwgXG4vLyBEZWZhdWx0IE5vZGUuanMgUkVQTCBkZXB0aFxuZGVwdGgsIFxuLy8gMTAwa0IsIGFzIDIwMGtCIGlzIG1heCBwYXlsb2FkIHNpemUsIHNvIGhhbGYgc291bmRzIHJlYXNvbmFibGVcbm1heFNpemUpIHtcbiAgICBpZiAoZGVwdGggPT09IHZvaWQgMCkgeyBkZXB0aCA9IDM7IH1cbiAgICBpZiAobWF4U2l6ZSA9PT0gdm9pZCAwKSB7IG1heFNpemUgPSAxMDAgKiAxMDI0OyB9XG4gICAgdmFyIHNlcmlhbGl6ZWQgPSBub3JtYWxpemUob2JqZWN0LCBkZXB0aCk7XG4gICAgaWYgKGpzb25TaXplKHNlcmlhbGl6ZWQpID4gbWF4U2l6ZSkge1xuICAgICAgICByZXR1cm4gbm9ybWFsaXplVG9TaXplKG9iamVjdCwgZGVwdGggLSAxLCBtYXhTaXplKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlcmlhbGl6ZWQ7XG59XG4vKiogVHJhbnNmb3JtcyBhbnkgaW5wdXQgdmFsdWUgaW50byBhIHN0cmluZyBmb3JtLCBlaXRoZXIgcHJpbWl0aXZlIHZhbHVlIG9yIGEgdHlwZSBvZiB0aGUgaW5wdXQgKi9cbmZ1bmN0aW9uIHNlcmlhbGl6ZVZhbHVlKHZhbHVlKSB7XG4gICAgdmFyIHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgIC8vIE5vZGUuanMgUkVQTCBub3RhdGlvblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICAgIHJldHVybiAnW09iamVjdF0nO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgICByZXR1cm4gJ1tBcnJheV0nO1xuICAgIH1cbiAgICB2YXIgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcbiAgICByZXR1cm4gaXNQcmltaXRpdmUobm9ybWFsaXplZCkgPyBub3JtYWxpemVkIDogdHlwZTtcbn1cbi8qKlxuICogbm9ybWFsaXplVmFsdWUoKVxuICpcbiAqIFRha2VzIHVuc2VyaWFsaXphYmxlIGlucHV0IGFuZCBtYWtlIGl0IHNlcmlhbGl6YWJsZSBmcmllbmRseVxuICpcbiAqIC0gdHJhbnNsYXRlcyB1bmRlZmluZWQvTmFOIHZhbHVlcyB0byBcIlt1bmRlZmluZWRdXCIvXCJbTmFOXVwiIHJlc3BlY3RpdmVseSxcbiAqIC0gc2VyaWFsaXplcyBFcnJvciBvYmplY3RzXG4gKiAtIGZpbHRlciBnbG9iYWwgb2JqZWN0c1xuICovXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSwga2V5KSB7XG4gICAgaWYgKGtleSA9PT0gJ2RvbWFpbicgJiYgdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZS5fZXZlbnRzKSB7XG4gICAgICAgIHJldHVybiAnW0RvbWFpbl0nO1xuICAgIH1cbiAgICBpZiAoa2V5ID09PSAnZG9tYWluRW1pdHRlcicpIHtcbiAgICAgICAgcmV0dXJuICdbRG9tYWluRW1pdHRlcl0nO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgPT09IGdsb2JhbCkge1xuICAgICAgICByZXR1cm4gJ1tHbG9iYWxdJztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlID09PSB3aW5kb3cpIHtcbiAgICAgICAgcmV0dXJuICdbV2luZG93XSc7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlID09PSBkb2N1bWVudCkge1xuICAgICAgICByZXR1cm4gJ1tEb2N1bWVudF0nO1xuICAgIH1cbiAgICAvLyBSZWFjdCdzIFN5bnRoZXRpY0V2ZW50IHRoaW5neVxuICAgIGlmIChpc1N5bnRoZXRpY0V2ZW50KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gJ1tTeW50aGV0aWNFdmVudF0nO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB2YWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICdbTmFOXSc7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHJldHVybiAnW3VuZGVmaW5lZF0nO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBcIltGdW5jdGlvbjogXCIgKyBnZXRGdW5jdGlvbk5hbWUodmFsdWUpICsgXCJdXCI7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbi8qKlxuICogV2Fsa3MgYW4gb2JqZWN0IHRvIHBlcmZvcm0gYSBub3JtYWxpemF0aW9uIG9uIGl0XG4gKlxuICogQHBhcmFtIGtleSBvZiBvYmplY3QgdGhhdCdzIHdhbGtlZCBpbiBjdXJyZW50IGl0ZXJhdGlvblxuICogQHBhcmFtIHZhbHVlIG9iamVjdCB0byBiZSB3YWxrZWRcbiAqIEBwYXJhbSBkZXB0aCBPcHRpb25hbCBudW1iZXIgaW5kaWNhdGluZyBob3cgZGVlcCBzaG91bGQgd2Fsa2luZyBiZSBwZXJmb3JtZWRcbiAqIEBwYXJhbSBtZW1vIE9wdGlvbmFsIE1lbW8gY2xhc3MgaGFuZGxpbmcgZGVjeWNsaW5nXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzXG5leHBvcnQgZnVuY3Rpb24gd2FsayhrZXksIHZhbHVlLCBkZXB0aCwgbWVtbykge1xuICAgIGlmIChkZXB0aCA9PT0gdm9pZCAwKSB7IGRlcHRoID0gK0luZmluaXR5OyB9XG4gICAgaWYgKG1lbW8gPT09IHZvaWQgMCkgeyBtZW1vID0gbmV3IE1lbW8oKTsgfVxuICAgIC8vIElmIHdlIHJlYWNoIHRoZSBtYXhpbXVtIGRlcHRoLCBzZXJpYWxpemUgd2hhdGV2ZXIgaGFzIGxlZnRcbiAgICBpZiAoZGVwdGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZVZhbHVlKHZhbHVlKTtcbiAgICB9XG4gICAgLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzICovXG4gICAgLy8gSWYgdmFsdWUgaW1wbGVtZW50cyBgdG9KU09OYCBtZXRob2QsIGNhbGwgaXQgYW5kIHJldHVybiBlYXJseVxuICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB2YWx1ZS50b0pTT04gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnRvSlNPTigpO1xuICAgIH1cbiAgICAvKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcyAqL1xuICAgIC8vIElmIG5vcm1hbGl6ZWQgdmFsdWUgaXMgYSBwcmltaXRpdmUsIHRoZXJlIGFyZSBubyBicmFuY2hlcyBsZWZ0IHRvIHdhbGssIHNvIHdlIGNhbiBqdXN0IGJhaWwgb3V0LCBhcyB0aGVyZXMgbm8gcG9pbnQgaW4gZ29pbmcgZG93biB0aGF0IGJyYW5jaCBhbnkgZnVydGhlclxuICAgIHZhciBub3JtYWxpemVkID0gbm9ybWFsaXplVmFsdWUodmFsdWUsIGtleSk7XG4gICAgaWYgKGlzUHJpbWl0aXZlKG5vcm1hbGl6ZWQpKSB7XG4gICAgICAgIHJldHVybiBub3JtYWxpemVkO1xuICAgIH1cbiAgICAvLyBDcmVhdGUgc291cmNlIHRoYXQgd2Ugd2lsbCB1c2UgZm9yIG5leHQgaXR0ZXJhdGlvbnMsIGVpdGhlciBvYmplY3RpZmllZCBlcnJvciBvYmplY3QgKEVycm9yIHR5cGUgd2l0aCBleHRyYWN0ZWQga2V5czp2YWx1ZSBwYWlycykgb3IgdGhlIGlucHV0IGl0c2VsZlxuICAgIHZhciBzb3VyY2UgPSBnZXRXYWxrU291cmNlKHZhbHVlKTtcbiAgICAvLyBDcmVhdGUgYW4gYWNjdW11bGF0b3IgdGhhdCB3aWxsIGFjdCBhcyBhIHBhcmVudCBmb3IgYWxsIGZ1dHVyZSBpdHRlcmF0aW9ucyBvZiB0aGF0IGJyYW5jaFxuICAgIHZhciBhY2MgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IFtdIDoge307XG4gICAgLy8gSWYgd2UgYWxyZWFkeSB3YWxrZWQgdGhhdCBicmFuY2gsIGJhaWwgb3V0LCBhcyBpdCdzIGNpcmN1bGFyIHJlZmVyZW5jZVxuICAgIGlmIChtZW1vLm1lbW9pemUodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAnW0NpcmN1bGFyIH5dJztcbiAgICB9XG4gICAgLy8gV2FsayBhbGwga2V5cyBvZiB0aGUgc291cmNlXG4gICAgZm9yICh2YXIgaW5uZXJLZXkgaW4gc291cmNlKSB7XG4gICAgICAgIC8vIEF2b2lkIGl0ZXJhdGluZyBvdmVyIGZpZWxkcyBpbiB0aGUgcHJvdG90eXBlIGlmIHRoZXkndmUgc29tZWhvdyBiZWVuIGV4cG9zZWQgdG8gZW51bWVyYXRpb24uXG4gICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwgaW5uZXJLZXkpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSB3YWxrIHRocm91Z2ggYWxsIHRoZSBjaGlsZCBub2Rlc1xuICAgICAgICBhY2NbaW5uZXJLZXldID0gd2Fsayhpbm5lcktleSwgc291cmNlW2lubmVyS2V5XSwgZGVwdGggLSAxLCBtZW1vKTtcbiAgICB9XG4gICAgLy8gT25jZSB3YWxrZWQgdGhyb3VnaCBhbGwgdGhlIGJyYW5jaGVzLCByZW1vdmUgdGhlIHBhcmVudCBmcm9tIG1lbW8gc3RvcmFnZVxuICAgIG1lbW8udW5tZW1vaXplKHZhbHVlKTtcbiAgICAvLyBSZXR1cm4gYWNjdW11bGF0ZWQgdmFsdWVzXG4gICAgcmV0dXJuIGFjYztcbn1cbi8qKlxuICogbm9ybWFsaXplKClcbiAqXG4gKiAtIENyZWF0ZXMgYSBjb3B5IHRvIHByZXZlbnQgb3JpZ2luYWwgaW5wdXQgbXV0YXRpb25cbiAqIC0gU2tpcCBub24tZW51bWVyYWJsZXJzXG4gKiAtIENhbGxzIGB0b0pTT05gIGlmIGltcGxlbWVudGVkXG4gKiAtIFJlbW92ZXMgY2lyY3VsYXIgcmVmZXJlbmNlc1xuICogLSBUcmFuc2xhdGVzIG5vbi1zZXJpYWxpemVhYmxlIHZhbHVlcyAodW5kZWZpbmVkL05hTi9GdW5jdGlvbnMpIHRvIHNlcmlhbGl6YWJsZSBmb3JtYXRcbiAqIC0gVHJhbnNsYXRlcyBrbm93biBnbG9iYWwgb2JqZWN0cy9DbGFzc2VzIHRvIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uc1xuICogLSBUYWtlcyBjYXJlIG9mIEVycm9yIG9iamVjdHMgc2VyaWFsaXphdGlvblxuICogLSBPcHRpb25hbGx5IGxpbWl0IGRlcHRoIG9mIGZpbmFsIG91dHB1dFxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlc1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShpbnB1dCwgZGVwdGgpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShpbnB1dCwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHsgcmV0dXJuIHdhbGsoa2V5LCB2YWx1ZSwgZGVwdGgpOyB9KSk7XG4gICAgfVxuICAgIGNhdGNoIChfb08pIHtcbiAgICAgICAgcmV0dXJuICcqKm5vbi1zZXJpYWxpemFibGUqKic7XG4gICAgfVxufVxuLyoqXG4gKiBHaXZlbiBhbnkgY2FwdHVyZWQgZXhjZXB0aW9uLCBleHRyYWN0IGl0cyBrZXlzIGFuZCBjcmVhdGUgYSBzb3J0ZWRcbiAqIGFuZCB0cnVuY2F0ZWQgbGlzdCB0aGF0IHdpbGwgYmUgdXNlZCBpbnNpZGUgdGhlIGV2ZW50IG1lc3NhZ2UuXG4gKiBlZy4gYE5vbi1lcnJvciBleGNlcHRpb24gY2FwdHVyZWQgd2l0aCBrZXlzOiBmb28sIGJhciwgYmF6YFxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlc1xuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RFeGNlcHRpb25LZXlzRm9yTWVzc2FnZShleGNlcHRpb24sIG1heExlbmd0aCkge1xuICAgIGlmIChtYXhMZW5ndGggPT09IHZvaWQgMCkgeyBtYXhMZW5ndGggPSA0MDsgfVxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZ2V0V2Fsa1NvdXJjZShleGNlcHRpb24pKTtcbiAgICBrZXlzLnNvcnQoKTtcbiAgICBpZiAoIWtleXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAnW29iamVjdCBoYXMgbm8ga2V5c10nO1xuICAgIH1cbiAgICBpZiAoa2V5c1swXS5sZW5ndGggPj0gbWF4TGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0cnVuY2F0ZShrZXlzWzBdLCBtYXhMZW5ndGgpO1xuICAgIH1cbiAgICBmb3IgKHZhciBpbmNsdWRlZEtleXMgPSBrZXlzLmxlbmd0aDsgaW5jbHVkZWRLZXlzID4gMDsgaW5jbHVkZWRLZXlzLS0pIHtcbiAgICAgICAgdmFyIHNlcmlhbGl6ZWQgPSBrZXlzLnNsaWNlKDAsIGluY2x1ZGVkS2V5cykuam9pbignLCAnKTtcbiAgICAgICAgaWYgKHNlcmlhbGl6ZWQubGVuZ3RoID4gbWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5jbHVkZWRLZXlzID09PSBrZXlzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydW5jYXRlKHNlcmlhbGl6ZWQsIG1heExlbmd0aCk7XG4gICAgfVxuICAgIHJldHVybiAnJztcbn1cbi8qKlxuICogR2l2ZW4gYW55IG9iamVjdCwgcmV0dXJuIHRoZSBuZXcgb2JqZWN0IHdpdGggcmVtb3ZlZCBrZXlzIHRoYXQgdmFsdWUgd2FzIGB1bmRlZmluZWRgLlxuICogV29ya3MgcmVjdXJzaXZlbHkgb24gb2JqZWN0cyBhbmQgYXJyYXlzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZHJvcFVuZGVmaW5lZEtleXModmFsKSB7XG4gICAgdmFyIGVfMSwgX2E7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgICB2YXIgb2JqID0gdmFsO1xuICAgICAgICB2YXIgcnYgPSB7fTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIF9iID0gX192YWx1ZXMoT2JqZWN0LmtleXMob2JqKSksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gX2MudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmpba2V5XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcnZba2V5XSA9IGRyb3BVbmRlZmluZWRLZXlzKG9ialtrZXldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcnY7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAgcmV0dXJuIHZhbC5tYXAoZHJvcFVuZGVmaW5lZEtleXMpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JqZWN0LmpzLm1hcCIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xuXG4vKmdsb2JhbCB0b1N0cmluZzp0cnVlKi9cblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbCkge1xuICBpZiAodG9TdHJpbmcuY2FsbCh2YWwpICE9PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsKTtcbiAgcmV0dXJuIHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGU7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOYXRpdmVTY3JpcHQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOUycpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QocmVzdWx0W2tleV0pICYmIGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWwuc2xpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIFJlbW92ZSBieXRlIG9yZGVyIG1hcmtlci4gVGhpcyBjYXRjaGVzIEVGIEJCIEJGICh0aGUgVVRGLTggQk9NKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IHdpdGggQk9NXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuZnVuY3Rpb24gc3RyaXBCT00oY29udGVudCkge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1BsYWluT2JqZWN0OiBpc1BsYWluT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW0sXG4gIHN0cmlwQk9NOiBzdHJpcEJPTVxufTtcbiIsImltcG9ydCB7IGJyb3dzZXIgfSBmcm9tICd3ZWJleHRlbnNpb24tcG9seWZpbGwtdHMnO1xuXG5leHBvcnQgY29uc3QgYmFzZVVSTDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgQjJCOlxuICAgIHByb2Nlc3MuZW52LkFQSV9FTlYgPT09ICdwcm9kdWN0aW9uJ1xuICAgICAgPyAnaHR0cHM6Ly93d3cucmF0ZWhhd2suY29tJ1xuICAgICAgOiAnaHR0cHM6Ly9yYXRlaGF3ay5wLm9zdHJvdm9rLnJ1JyxcbiAgT1NUUk9WT0s6ICdodHRwczovL29zdHJvdm9rLnJ1JyxcbiAgUEFSVE5FUlM6XG4gICAgcHJvY2Vzcy5lbnYuQVBJX0VOViA9PT0gJ3Byb2R1Y3Rpb24nXG4gICAgICA/ICdodHRwczovL3BhcnRuZXIub3N0cm92b2sucnUnXG4gICAgICA6ICdodHRwczovL3BhcnRuZXIucC5vc3Ryb3Zvay5ydScsXG4gIEFQSTpcbiAgICBwcm9jZXNzLmVudi5BUElfRU5WID09PSAncHJvZHVjdGlvbidcbiAgICAgID8gJ2h0dHBzOi8vYXBpLndvcmxkb3RhLm5ldCdcbiAgICAgIDogJ2h0dHA6Ly9kYXBpLnAub3N0cm92b2sucnUnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAvLyBCMkJcbiAgQjJCOiBiYXNlVVJMLkIyQixcbiAgQjJCX0hPVEVMUzogYCR7YmFzZVVSTC5CMkJ9L2hvdGVscy9gLFxuICBCMkJfUk9PTVM6IGAke2Jhc2VVUkwuQjJCfS9yb29tcy9gLFxuICBIT1RFTFM6IGAke2Jhc2VVUkwuUEFSVE5FUlN9L2FwaS9leHRlbnNpb24vdjEvaG90ZWxfc3RhdGljL2AsXG4gIFJFR0lTVFJBVElPTjogYCR7YmFzZVVSTC5CMkJ9L3JlZ2lzdHJhdGlvbmAsXG4gIFNFQVJDSF9IUDogYCR7YmFzZVVSTC5BUEl9L2FwaS9iMmIvdjMvc2VhcmNoL2hwL2V4dGAsXG4gIFNFQVJDSF9TRVJQOiBgJHtiYXNlVVJMLkFQSX0vYXBpL2IyYi92My9zZWFyY2gvc2VycC9leHRgLFxuXG4gIC8vIEF1dGhcbiAgR0VUX1BBUlRORVJTX0FVVEhfS0VZOiBgJHtiYXNlVVJMLkIyQn0vcGFydG5lcnMvZnJvbnRlbmQvdjMvcHJveHkvZXh0ZW5zaW9uL2F1dGgvYCxcbiAgUkVTVE9SRV9QQVNTV09SRDogYCR7YmFzZVVSTC5CMkJ9L3BhcnRuZXJzL2Zyb250ZW5kL3Y0L3Byb3h5L3Bhc3N3b3JkL3JlY292ZXJ5L2AsXG4gIFNJR05fSU46IGAke2Jhc2VVUkwuQjJCfS9hcGkvdjMvc2l0ZS9hY2NvdW50cy9sb2dpbi9gLFxuICBTSUdOX09VVDogYCR7YmFzZVVSTC5CMkJ9L2FjY291bnRzL2xvZ291dC9gLFxuXG4gIC8vIEFuYWx5dGljc1xuICBGVU5ORUw6ICdodHRwczovL2NudC53b3JsZG90YS5uZXQvZnVubmVsLmpzJyxcbiAgSENfQ0hST01FX0ZPUk1fUElOR0VSOiBgJHtiYXNlVVJMLkIyQn0vaGMvY2hyb21lZm9ybS9waW5nZXJgLFxuICBIQ19DSFJPTUVfRk9STV9UQUI6IGAke2Jhc2VVUkwuT1NUUk9WT0t9L2hjL2Nocm9tZWZvcm0vdGFiYCxcbiAgSENfRVhURU5TSU9OX1NFUlA6IGAke2Jhc2VVUkwuQjJCfS9oYy9leHRlbnNpb24vc2VycGAsXG4gIEhDX1JVTTogYCR7YmFzZVVSTC5CMkJ9L2hjL3J1bS5naWZgLFxuXG4gIC8vIEV4YW1wbGVzXG4gIEZJUlNUX0VYQU1QTEU6ICdodHRwczovL3d3dy5ib29raW5nLmNvbS9ob3RlbC9mci90aW1xdWFydGllcmxhdGlucGFudGhlbycsXG5cbiAgLy8gU2V0dGluZ3NcbiAgTElWRV9TRVRUSU5HUzogYCR7YmFzZVVSTC5CMkJ9L2FwaS92MS9ncm93dGgvZXh0L2NvbmYvYCxcblxuICAvLyBQcm9tb2NvZGVzXG4gIFBST01PQ09ERTogYCR7YmFzZVVSTC5CMkJ9L2FwaS92MS9ncm93dGgvZXh0L3Byb21vY29kZS9gLFxuICBQUk9NT0NPREVTOiBgJHtiYXNlVVJMLkIyQn0vYXBpL3YxL2dyb3d0aC9leHQvcHJvbW9jb2Rlcy9gLFxuXG4gIC8vIENocm9tZSBzdG9yZSByZXZpZXdzXG4gIENIUk9NRV9TVE9SRV9SRVZJRVdTOiBgaHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvJHticm93c2VyLnJ1bnRpbWUuaWR9L3Jldmlld3NgLFxuXG4gIC8vIEV0Y1xuICBDSFJPTUVfRVhURU5TSU9OUzogJ2Nocm9tZTovL2V4dGVuc2lvbnMvJyxcbiAgQ0hST01FX05FV19UQUI6ICdjaHJvbWU6Ly9uZXd0YWIvJyxcbiAgRVhURU5TSU9OX0VNQUlMOiAnZXh0ZW5zaW9uQHJhdGVoYXdrLmNvbScsXG4gIExBTkRJTkc6ICdodHRwczovL3d3dy5yYXRlaGF3ay5jb20vdHJhdmVsL2V4dGVuc2lvbl9yLycsXG4gIFBSSVZBQ1lfUE9MSUNZOiAnaHR0cHM6Ly9vc3Ryb3Zvay5ydS9sZWdhbC9zaXRlL3ByaXZhY3ktcG9saWN5LycsXG59O1xuIiwiLypcbkNvcHlyaWdodCAoYykgMjAxNCwgWWFob28hIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbkNvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS5cblNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4qL1xudmFyIF9fc3ByZWFkQXJyYXlzID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5cykgfHwgZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcbiAgICByZXR1cm4gcjtcbn07XG4vLyAtLSBVdGlsaXRpZXMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gZ2V0Q2FjaGVJZChpbnB1dHMpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoaW5wdXRzLm1hcChmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ICYmIHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcgPyBvcmRlcmVkUHJvcHMoaW5wdXQpIDogaW5wdXQ7XG4gICAgfSkpO1xufVxuZnVuY3Rpb24gb3JkZXJlZFByb3BzKG9iaikge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopXG4gICAgICAgIC5zb3J0KClcbiAgICAgICAgLm1hcChmdW5jdGlvbiAoaykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSB7fSwgX2Fba10gPSBvYmpba10sIF9hKTtcbiAgICB9KTtcbn1cbnZhciBtZW1vaXplRm9ybWF0Q29uc3RydWN0b3IgPSBmdW5jdGlvbiAoRm9ybWF0Q29uc3RydWN0b3IsIGNhY2hlKSB7XG4gICAgaWYgKGNhY2hlID09PSB2b2lkIDApIHsgY2FjaGUgPSB7fTsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FjaGVJZCA9IGdldENhY2hlSWQoYXJncyk7XG4gICAgICAgIHZhciBmb3JtYXQgPSBjYWNoZUlkICYmIGNhY2hlW2NhY2hlSWRdO1xuICAgICAgICBpZiAoIWZvcm1hdCkge1xuICAgICAgICAgICAgZm9ybWF0ID0gbmV3ICgoX2EgPSBGb3JtYXRDb25zdHJ1Y3RvcikuYmluZC5hcHBseShfYSwgX19zcHJlYWRBcnJheXMoW3ZvaWQgMF0sIGFyZ3MpKSkoKTtcbiAgICAgICAgICAgIGlmIChjYWNoZUlkKSB7XG4gICAgICAgICAgICAgICAgY2FjaGVbY2FjaGVJZF0gPSBmb3JtYXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICB9O1xufTtcbmV4cG9ydCBkZWZhdWx0IG1lbW9pemVGb3JtYXRDb25zdHJ1Y3RvcjtcbiIsImltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnO1xuLyoqXG4gKiBAbmFtZSB0b0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0cyBjbG9uZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXAuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIG5vbmUgb2YgdGhlIGFib3ZlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogKipOb3RlKio6ICphbGwqIERhdGUgYXJndW1lbnRzIHBhc3NlZCB0byBhbnkgKmRhdGUtZm5zKiBmdW5jdGlvbiBpcyBwcm9jZXNzZWQgYnkgYHRvRGF0ZWAuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gYXJndW1lbnQgLSB0aGUgdmFsdWUgdG8gY29udmVydFxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ2xvbmUgdGhlIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUobmV3IERhdGUoMjAxNCwgMSwgMTEsIDExLCAzMCwgMzApKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCB0aGUgdGltZXN0YW1wIHRvIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUoMTM5MjA5ODQzMDAwMClcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9EYXRlKGFyZ3VtZW50KSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgYXJnU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KTsgLy8gQ2xvbmUgdGhlIGRhdGVcblxuICBpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiBhcmd1bWVudCA9PT0gJ29iamVjdCcgJiYgYXJnU3RyID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQuZ2V0VGltZSgpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdudW1iZXInIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IFN0cmluZ10nKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJTdGFydGluZyB3aXRoIHYyLjAuMC1iZXRhLjEgZGF0ZS1mbnMgZG9lc24ndCBhY2NlcHQgc3RyaW5ncyBhcyBhcmd1bWVudHMuIFBsZWFzZSB1c2UgYHBhcnNlSVNPYCB0byBwYXJzZSBzdHJpbmdzLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2ZqdWxlXCIpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuXG4gICAgICBjb25zb2xlLndhcm4obmV3IEVycm9yKCkuc3RhY2spO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRnVuY3Rpb24gZXF1YWwgdG8gbWVyZ2Ugd2l0aCB0aGUgZGlmZmVyZW5jZSBiZWluZyB0aGF0IG5vIHJlZmVyZW5jZVxuICogdG8gb3JpZ2luYWwgb2JqZWN0cyBpcyBrZXB0LlxuICpcbiAqIEBzZWUgbWVyZ2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGRlZXBNZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZXBNZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZXBNZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBkZWVwTWVyZ2U6IGRlZXBNZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jb25zdCB1c2VQcmV2aW91cyA9IDxUIGV4dGVuZHMgdW5rbm93bj4odmFsdWU6IFQpID0+IHtcbiAgY29uc3QgcmVmID0gUmVhY3QudXNlUmVmPFQ+KCk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZWYuY3VycmVudCA9IHZhbHVlO1xuICB9KTtcblxuICByZXR1cm4gcmVmLmN1cnJlbnQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VQcmV2aW91cztcbiIsIi8qIGVzbGludC1kaXNhYmxlIGpzeC1hMTF5L25vLW5vbmludGVyYWN0aXZlLWVsZW1lbnQtaW50ZXJhY3Rpb25zICovXG4vKiBlc2xpbnQtZGlzYWJsZSBqc3gtYTExeS9sYWJlbC1oYXMtYXNzb2NpYXRlZC1jb250cm9sICovXG5pbXBvcnQgUmVhY3QsIHsgZm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcblxuaW1wb3J0IEhpbnQsIHsgUG9zaXRpb24gfSBmcm9tICcuLi9IaW50JztcblxuaW1wb3J0IHVzZVByZXZpb3VzIGZyb20gJy4uL2hvb2tzL3VzZVByZXZpb3VzJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0lucHV0LmNzcyc7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmludGVyZmFjZSBQc2V1ZG9Qcm9wcyB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgdmFsdWU/OiBzdHJpbmcgfCBudW1iZXI7XG4gIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG4gIHRlc3RpZD86IHN0cmluZztcbiAgb25Gb2N1cz86IChldmVudDogUmVhY3QuRm9jdXNFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbiAgb25CbHVyPzogKGV2ZW50OiBSZWFjdC5Gb2N1c0V2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB2b2lkO1xuICBvbktleURvd24/OiAoZXZlbnQ6IFJlYWN0LktleWJvYXJkRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHZvaWQ7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5jb25zdCBQc2V1ZG9Db250cm9sID0gUmVhY3QuZm9yd2FyZFJlZjxhbnksIFBzZXVkb1Byb3BzPihcbiAgKFxuICAgIHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIHZhbHVlLFxuICAgICAgcGxhY2Vob2xkZXIsXG4gICAgICBkaXNhYmxlZCxcbiAgICAgIHRlc3RpZCxcbiAgICAgIG9uRm9jdXMsXG4gICAgICBvbkJsdXIsXG4gICAgICBvbktleURvd24sXG4gICAgfSxcbiAgICByZWZcbiAgKSA9PiB7XG4gICAgY29uc3QgaGFzVmFsdWUgPSB2YWx1ZSAhPSBudWxsICYmIHZhbHVlICE9PSAnJzsgLy8gQ2hlY2tzICcnLCBudWxsIGFuZCB1bmRlZmluZWRcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17ZW0oJ2NvbnRyb2wnKShcbiAgICAgICAgICB7XG4gICAgICAgICAgICBoYXNQbGFjZWhvbGRlcjogIWhhc1ZhbHVlICYmICEhcGxhY2Vob2xkZXIsXG4gICAgICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNsYXNzTmFtZVxuICAgICAgICApfVxuICAgICAgICB0YWJJbmRleD17MH1cbiAgICAgICAgb25Gb2N1cz17b25Gb2N1c31cbiAgICAgICAgb25CbHVyPXtvbkJsdXJ9XG4gICAgICAgIG9uS2V5RG93bj17b25LZXlEb3dufVxuICAgICAgICBkYXRhLXRlc3RpZD17dGVzdGlkfVxuICAgICAgICByZWY9e3JlZn1cbiAgICAgICAgcm9sZT1cInRleHRib3hcIlxuICAgICAgPlxuICAgICAgICB7aGFzVmFsdWUgPyB2YWx1ZSA6IHBsYWNlaG9sZGVyfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuKTtcblxudHlwZSBJbnB1dFByb3BzID0ge1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIHZhbHVlPzogc3RyaW5nIHwgbnVtYmVyO1xuICBwbGFjZWhvbGRlcj86IHN0cmluZztcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICB0ZXN0aWQ/OiBzdHJpbmc7XG4gIG9uRm9jdXM/OiAoZXZlbnQ6IFJlYWN0LkZvY3VzRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHZvaWQ7XG4gIG9uQmx1cj86IChldmVudDogUmVhY3QuRm9jdXNFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbiAgb25LZXlEb3duPzogKGV2ZW50OiBSZWFjdC5LZXlib2FyZEV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB2b2lkO1xuICBvbkNoYW5nZT86IChldmVudDogUmVhY3QuRm9jdXNFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbiAgbmFtZT86IHN0cmluZztcbiAgdHlwZT86IHN0cmluZztcbiAgcmVxdWlyZWQ/OiBib29sZWFuO1xuICBhdXRvQ29tcGxldGU/OiBzdHJpbmc7XG4gIG1heExlbmd0aD86IG51bWJlcjtcbiAgcmVhZE9ubHk/OiBib29sZWFuO1xufTtcblxuY29uc3QgQ29udHJvbCA9IGZvcndhcmRSZWY8SFRNTElucHV0RWxlbWVudCwgSW5wdXRQcm9wcz4oXG4gIChcbiAgICB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBvbkZvY3VzLFxuICAgICAgb25DaGFuZ2UsXG4gICAgICBvbkJsdXIsXG4gICAgICBvbktleURvd24sXG4gICAgICB2YWx1ZSxcbiAgICAgIHBsYWNlaG9sZGVyLFxuICAgICAgbmFtZSxcbiAgICAgIHR5cGUsXG4gICAgICByZXF1aXJlZCxcbiAgICAgIGRpc2FibGVkLFxuICAgICAgdGVzdGlkLFxuICAgICAgYXV0b0NvbXBsZXRlLFxuICAgICAgbWF4TGVuZ3RoLFxuICAgICAgcmVhZE9ubHksXG4gICAgfSxcbiAgICByZWZcbiAgKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxpbnB1dFxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICAgICAgb25Gb2N1cz17b25Gb2N1c31cbiAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgICBvbkJsdXI9e29uQmx1cn1cbiAgICAgICAgb25LZXlEb3duPXtvbktleURvd259XG4gICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgcGxhY2Vob2xkZXI9e3BsYWNlaG9sZGVyfVxuICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICBkYXRhLXRlc3RpZD17dGVzdGlkfVxuICAgICAgICB0eXBlPXt0eXBlfVxuICAgICAgICByZXF1aXJlZD17cmVxdWlyZWR9XG4gICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgYXV0b0NvbXBsZXRlPXthdXRvQ29tcGxldGV9XG4gICAgICAgIGF1dG9Db3JyZWN0PVwib2ZmXCJcbiAgICAgICAgYXV0b0NhcGl0YWxpemU9XCJvZmZcIlxuICAgICAgICBzcGVsbENoZWNrPXtmYWxzZX1cbiAgICAgICAgcmVmPXtyZWZ9XG4gICAgICAgIG1heExlbmd0aD17bWF4TGVuZ3RofVxuICAgICAgICByZWFkT25seT17cmVhZE9ubHl9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbik7XG5cbmV4cG9ydCBlbnVtIFNJWkUge1xuICBYUyA9ICd4cycsXG4gIEwgPSAnbCcsXG4gIE0gPSAnbScsXG4gIFMgPSAncycsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXJyb3Ige1xuICBjb2RlOiBzdHJpbmc7XG4gIG1lc3NhZ2U6IHN0cmluZyB8IFJlYWN0LlJlYWN0Tm9kZUFycmF5O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBzdHlsZT86IFJlYWN0LkNTU1Byb3BlcnRpZXM7XG4gIHNpemU/OiBTSVpFO1xuICBsYWJlbD86IHN0cmluZztcbiAgdG9vbHRpcENvbnRlbnQ/OiAoKSA9PiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIG1heExlbmd0aD86IG51bWJlcjtcbiAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XG4gIGlucHV0UmVmPzpcbiAgICB8IFJlYWN0LlJlZk9iamVjdDxIVE1MSW5wdXRFbGVtZW50PlxuICAgIHwgKChyZWZOb2RlOiBIVE1MSW5wdXRFbGVtZW50IHwgbnVsbCkgPT4gdm9pZCk7XG4gIG9uRm9jdXM/OiAoZXZlbnQ6IFJlYWN0LkZvY3VzRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHZvaWQ7XG4gIG9uQ2hhbmdlPzogKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbiAgb25DbGljaz86IChldmVudDogUmVhY3QuTW91c2VFdmVudDxIVE1MTGFiZWxFbGVtZW50LCBNb3VzZUV2ZW50PikgPT4gdm9pZDtcbiAgb25CbHVyPzogKFxuICAgIGV2ZW50OiBSZWFjdC5Gb2N1c0V2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+LFxuICAgIGVycm9yOiBFcnJvciB8IG51bGwsXG4gICAgaXNQcmV2aW91czogYm9vbGVhblxuICApID0+IHZvaWQ7XG4gIG9uS2V5RG93bj86IChldmVudDogUmVhY3QuS2V5Ym9hcmRFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbiAgb25JY29uQ2xpY2s/OiAoZXZlbnQ6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTERpdkVsZW1lbnQsIE1vdXNlRXZlbnQ+KSA9PiB2b2lkO1xuICB2YWx1ZT86IHN0cmluZyB8IG51bWJlcjtcbiAgcHNldWRvPzogYm9vbGVhbjtcbiAgZm9jdXNlZD86IGJvb2xlYW47XG4gIHdpZGU/OiBib29sZWFuO1xuICBzdGFydEFkb3JubWVudD86IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgaWNvbj86IFJlYWN0LlJlYWN0RWxlbWVudCB8IG51bGw7XG4gIHJlc2VydmVJY29uUGxhY2U/OiBib29sZWFuO1xuICBoYXNFcnJvcj86IGJvb2xlYW47XG4gIGVycm9yPzogRXJyb3IgfCBudWxsO1xuICBuYW1lPzogc3RyaW5nO1xuICB0eXBlPzogc3RyaW5nO1xuICBhdXRvQ29tcGxldGU/OiBzdHJpbmc7XG4gIHJlYWRPbmx5PzogYm9vbGVhbjtcbiAgcmVxdWlyZWQ/OiBib29sZWFuO1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG4gIHRlc3RpZD86IHN0cmluZztcbiAgdmFsaWRhdG9ycz86ICgodmFsdWU6IHN0cmluZykgPT4gRXJyb3IgfCBudWxsKVtdO1xuICB0b29sdGlwQ2FsbGJhY2s/OiAoKSA9PiB2b2lkO1xufVxuXG5jb25zdCBJbnB1dDogUmVhY3QuRkM8UHJvcHM+ID0gKHtcbiAgY2xhc3NOYW1lLFxuICBzdHlsZSxcbiAgc2l6ZSxcbiAgbGFiZWwsXG4gIHRvb2x0aXBDb250ZW50LFxuICBwbGFjZWhvbGRlcixcbiAgaW5wdXRSZWYsXG4gIG9uRm9jdXMsXG4gIG9uQ2hhbmdlLFxuICBvbkNsaWNrLFxuICBvbkJsdXIsXG4gIG9uS2V5RG93bixcbiAgb25JY29uQ2xpY2ssXG4gIHZhbHVlLFxuICBwc2V1ZG8sXG4gIGZvY3VzZWQsXG4gIHdpZGUsXG4gIGNoaWxkcmVuLFxuICBzdGFydEFkb3JubWVudCxcbiAgaWNvbixcbiAgcmVzZXJ2ZUljb25QbGFjZSxcbiAgaGFzRXJyb3IsXG4gIGVycm9yID0gbnVsbCxcbiAgbmFtZSxcbiAgdHlwZSxcbiAgYXV0b0NvbXBsZXRlLFxuICByZWFkT25seSxcbiAgcmVxdWlyZWQsXG4gIGRpc2FibGVkLFxuICB0ZXN0aWQsXG4gIHZhbGlkYXRvcnMsXG4gIG1heExlbmd0aCxcbiAgdG9vbHRpcENhbGxiYWNrLFxufSkgPT4ge1xuICBjb25zdCBDb250cm9sQ29tcG9uZW50ID0gcHNldWRvID8gUHNldWRvQ29udHJvbCA6IENvbnRyb2w7XG5cbiAgY29uc3QgW2V4dGVybmFsRXJyb3IsIHNldEV4dGVybmFsRXJyb3JdID0gUmVhY3QudXNlU3RhdGU8RXJyb3IgfCBudWxsPihlcnJvcik7XG4gIGNvbnN0IFtpbnRlcm5hbEVycm9yLCBzZXRJbnRlcm5hbEVycm9yXSA9IFJlYWN0LnVzZVN0YXRlPEVycm9yIHwgbnVsbD4obnVsbCk7XG5cbiAgY29uc3Qgb25WYWxpZGF0ZUZvY3VzID0gKGV2ZW50OiBSZWFjdC5Gb2N1c0V2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XG4gICAgc2V0RXh0ZXJuYWxFcnJvcihudWxsKTtcbiAgICBzZXRJbnRlcm5hbEVycm9yKG51bGwpO1xuXG4gICAgaWYgKCFvbkZvY3VzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgb25Gb2N1cyhldmVudCk7XG4gIH07XG5cbiAgY29uc3QgW3ZhbGlkYXRlVmFsdWUsIHNldFZhbGlkYXRlVmFsdWVdID0gUmVhY3QudXNlU3RhdGUodmFsdWUpO1xuICBjb25zdCBwcmV2aW91c1ZhbGlkYXRlVmFsdWUgPSB1c2VQcmV2aW91cyh2YWxpZGF0ZVZhbHVlKTtcblxuICBjb25zdCBvblZhbGlkYXRlQmx1ciA9IChldmVudDogUmVhY3QuRm9jdXNFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgIGlmICghb25CbHVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2V0VmFsaWRhdGVWYWx1ZShldmVudC50YXJnZXQudmFsdWUpO1xuXG4gICAgY29uc3QgaXNQcmV2aW91cyA9IGV2ZW50LnRhcmdldC52YWx1ZSA9PT0gcHJldmlvdXNWYWxpZGF0ZVZhbHVlO1xuXG4gICAgaWYgKCF2YWxpZGF0b3JzKSB7XG4gICAgICBvbkJsdXIoZXZlbnQsIG51bGwsIGlzUHJldmlvdXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBjdXJyZW50RXJyb3IgPSBudWxsO1xuICAgIHZhbGlkYXRvcnMuZXZlcnkoKHZhbGlkYXRlKSA9PiB7XG4gICAgICBjdXJyZW50RXJyb3IgPSB2YWxpZGF0ZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgICAgc2V0SW50ZXJuYWxFcnJvcihjdXJyZW50RXJyb3IpO1xuICAgICAgcmV0dXJuICFjdXJyZW50RXJyb3I7XG4gICAgfSk7XG4gICAgb25CbHVyKGV2ZW50LCBjdXJyZW50RXJyb3IsIGlzUHJldmlvdXMpO1xuICB9O1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0RXh0ZXJuYWxFcnJvcihlcnJvcik7XG4gIH0sIFtlcnJvcl0pO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0SW50ZXJuYWxFcnJvcihudWxsKTtcbiAgfSwgW3ZhbHVlXSk7XG5cbiAgY29uc3QgdG90YWxFcnJvciA9IGV4dGVybmFsRXJyb3IgfHwgaW50ZXJuYWxFcnJvcjtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnd3JhcHBlcicpKHsgd2lkZSB9LCBjbGFzc05hbWUpfT5cbiAgICAgIHsvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvbGFiZWwtaGFzLWFzc29jaWF0ZWQtY29udHJvbCwganN4LWExMXkvbm8tbm9uaW50ZXJhY3RpdmUtZWxlbWVudC1pbnRlcmFjdGlvbnMgKi99XG4gICAgICA8bGFiZWxcbiAgICAgICAgY2xhc3NOYW1lPXtlbSgnbGFiZWwnKSh7XG4gICAgICAgICAgc2l6ZSxcbiAgICAgICAgICBmb2N1c2VkLFxuICAgICAgICAgIGhhc0Vycm9yOiBoYXNFcnJvciB8fCAhIXRvdGFsRXJyb3IsXG4gICAgICAgICAgZGlzYWJsZWQsXG4gICAgICAgICAgcmVxdWlyZWQsXG4gICAgICAgICAgcmVhZE9ubHksXG4gICAgICAgIH0pfVxuICAgICAgICBzdHlsZT17c3R5bGV9XG4gICAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICA+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ2NvbnRyb2xMaW5lJykoe1xuICAgICAgICAgICAgcmVzZXJ2ZUljb25QbGFjZTogIWljb24gJiYgcmVzZXJ2ZUljb25QbGFjZSxcbiAgICAgICAgICB9KX1cbiAgICAgICAgPlxuICAgICAgICAgIHtzdGFydEFkb3JubWVudH1cbiAgICAgICAgICA8Q29udHJvbENvbXBvbmVudFxuICAgICAgICAgICAgY2xhc3NOYW1lPXtlbSgnY29udHJvbCcpKCl9XG4gICAgICAgICAgICByZWY9e2lucHV0UmVmfVxuICAgICAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgICAgICAgb25Gb2N1cz17b25WYWxpZGF0ZUZvY3VzfVxuICAgICAgICAgICAgb25CbHVyPXtvblZhbGlkYXRlQmx1cn1cbiAgICAgICAgICAgIG9uS2V5RG93bj17b25LZXlEb3dufVxuICAgICAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3BsYWNlaG9sZGVyfVxuICAgICAgICAgICAgbmFtZT17bmFtZX1cbiAgICAgICAgICAgIHR5cGU9e3R5cGV9XG4gICAgICAgICAgICByZXF1aXJlZD17cmVxdWlyZWR9XG4gICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICB0ZXN0aWQ9e3Rlc3RpZH1cbiAgICAgICAgICAgIGF1dG9Db21wbGV0ZT17YXV0b0NvbXBsZXRlIHx8ICdpbnB1dC1vZmYnfVxuICAgICAgICAgICAgbWF4TGVuZ3RoPXttYXhMZW5ndGh9XG4gICAgICAgICAgICByZWFkT25seT17cmVhZE9ubHl9XG4gICAgICAgICAgLz5cbiAgICAgICAgICB7aWNvbiAmJiAoXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIHRhYkluZGV4PXswfVxuICAgICAgICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgb25DbGljaz17b25JY29uQ2xpY2t9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ2ljb24nKSh7IGNsaWNrYWJsZTogISFvbkljb25DbGljayB9KX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge2ljb259XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCd0aXRsZVdyYXBwZXInKSgpfT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ3RpdGxlJykoKX0+e2xhYmVsfTwvZGl2PlxuICAgICAgICAgIHshIXRvb2x0aXBDb250ZW50ICYmIChcbiAgICAgICAgICAgIDxIaW50XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ2hpbnQnKSgpfVxuICAgICAgICAgICAgICB0b29sdGlwQ29udGVudD17dG9vbHRpcENvbnRlbnR9XG4gICAgICAgICAgICAgIHBvc2l0aW9uPXtQb3NpdGlvbi5UT1B9XG4gICAgICAgICAgICAgIHRvb2x0aXBDYWxsYmFjaz17dG9vbHRpcENhbGxiYWNrfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvbGFiZWw+XG4gICAgICB7ISF0b3RhbEVycm9yICYmIDxwIGNsYXNzTmFtZT17ZW0oJ2Vycm9yJykoKX0+e3RvdGFsRXJyb3IubWVzc2FnZX08L3A+fVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSW5wdXQ7XG4iLCJpbXBvcnQgeyBBQ1RJT05fVFlQRSB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IFRoZW1lLCBUaGVtZUFjdGlvbiB9IGZyb20gJy4vYWN0aW9ucy9zZXRUaGVtZSc7XG5cbmV4cG9ydCBlbnVtIFNJWkUge1xuICBERVNLVE9QID0gJ2Rlc2t0b3AnLFxuICBNT0JJTEUgPSAnbW9iaWxlJyxcbiAgVEFCTEVUID0gJ3RhYmxldCcsXG59XG5cbmludGVyZmFjZSBUaGVtZVN0YXRlIGV4dGVuZHMgVGhlbWUge1xuICBzaXplczogUmVjb3JkPFNJWkUsIG51bWJlcj47XG59XG5cbmNvbnN0IGluaXRpYWxTdGF0ZTogVGhlbWVTdGF0ZSA9IHtcbiAgc2l6ZXM6IHtcbiAgICBbU0laRS5ERVNLVE9QXTogMTQ1MCxcbiAgICBbU0laRS5NT0JJTEVdOiA2ODAsXG4gICAgW1NJWkUuVEFCTEVUXTogMTA3NCxcbiAgfSxcbn07XG5cbmNvbnN0IFN0YXRlID0gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb246IFRoZW1lQWN0aW9uKTogVGhlbWVTdGF0ZSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIEFDVElPTl9UWVBFLlNFVF9USEVNRTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNpemVzOiBzdGF0ZS5zaXplcyxcbiAgICAgICAgLi4uYWN0aW9uLnRoZW1lLFxuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTdGF0ZTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvSW50ZWdlcihkaXJ0eU51bWJlcikge1xuICBpZiAoZGlydHlOdW1iZXIgPT09IG51bGwgfHwgZGlydHlOdW1iZXIgPT09IHRydWUgfHwgZGlydHlOdW1iZXIgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuXG4gIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuXG4gIHJldHVybiBudW1iZXIgPCAwID8gTWF0aC5jZWlsKG51bWJlcikgOiBNYXRoLmZsb29yKG51bWJlcik7XG59IiwiaW1wb3J0ICQkb2JzZXJ2YWJsZSBmcm9tICdzeW1ib2wtb2JzZXJ2YWJsZSc7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgcmFuZG9tU3RyaW5nID0gZnVuY3Rpb24gcmFuZG9tU3RyaW5nKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG59O1xuXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6IFwiQEByZWR1eC9JTklUXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUkVQTEFDRTogXCJAQHJlZHV4L1JFUExBQ0VcIiArIHJhbmRvbVN0cmluZygpLFxuICBQUk9CRV9VTktOT1dOX0FDVElPTjogZnVuY3Rpb24gUFJPQkVfVU5LTk9XTl9BQ1RJT04oKSB7XG4gICAgcmV0dXJuIFwiQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTlwiICsgcmFuZG9tU3RyaW5nKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IG9iaiBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYXJndW1lbnQgYXBwZWFycyB0byBiZSBhIHBsYWluIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcHJvdG8gPSBvYmo7XG5cbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0IGxvb2tzIGxpa2UgeW91IGFyZSBwYXNzaW5nIHNldmVyYWwgc3RvcmUgZW5oYW5jZXJzIHRvICcgKyAnY3JlYXRlU3RvcmUoKS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkLCBjb21wb3NlIHRoZW0gJyArICd0b2dldGhlciB0byBhIHNpbmdsZSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoaXMgbWFrZXMgYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudExpc3RlbmVycyBzbyB3ZSBjYW4gdXNlXG4gICAqIG5leHRMaXN0ZW5lcnMgYXMgYSB0ZW1wb3JhcnkgbGlzdCB3aGlsZSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogVGhpcyBwcmV2ZW50cyBhbnkgYnVncyBhcm91bmQgY29uc3VtZXJzIGNhbGxpbmdcbiAgICogc3Vic2NyaWJlL3Vuc3Vic2NyaWJlIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG5cblxuICBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgbmV4dExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICBpZiAoIWlzU3Vic2NyaWJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgdW5zdWJzY3JpYmUgZnJvbSBhIHN0b3JlIGxpc3RlbmVyIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgfVxuXG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgIHZhciBpbmRleCA9IG5leHRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBuZXh0TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICBjdXJyZW50TGlzdGVuZXJzID0gbnVsbDtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGFjdGlvbi4gSXQgaXMgdGhlIG9ubHkgd2F5IHRvIHRyaWdnZXIgYSBzdGF0ZSBjaGFuZ2UuXG4gICAqXG4gICAqIFRoZSBgcmVkdWNlcmAgZnVuY3Rpb24sIHVzZWQgdG8gY3JlYXRlIHRoZSBzdG9yZSwgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGVcbiAgICogY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgZ2l2ZW4gYGFjdGlvbmAuIEl0cyByZXR1cm4gdmFsdWUgd2lsbFxuICAgKiBiZSBjb25zaWRlcmVkIHRoZSAqKm5leHQqKiBzdGF0ZSBvZiB0aGUgdHJlZSwgYW5kIHRoZSBjaGFuZ2UgbGlzdGVuZXJzXG4gICAqIHdpbGwgYmUgbm90aWZpZWQuXG4gICAqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9ubHkgc3VwcG9ydHMgcGxhaW4gb2JqZWN0IGFjdGlvbnMuIElmIHlvdSB3YW50IHRvXG4gICAqIGRpc3BhdGNoIGEgUHJvbWlzZSwgYW4gT2JzZXJ2YWJsZSwgYSB0aHVuaywgb3Igc29tZXRoaW5nIGVsc2UsIHlvdSBuZWVkIHRvXG4gICAqIHdyYXAgeW91ciBzdG9yZSBjcmVhdGluZyBmdW5jdGlvbiBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIG1pZGRsZXdhcmUuIEZvclxuICAgKiBleGFtcGxlLCBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UuIEV2ZW4gdGhlXG4gICAqIG1pZGRsZXdhcmUgd2lsbCBldmVudHVhbGx5IGRpc3BhdGNoIHBsYWluIG9iamVjdCBhY3Rpb25zIHVzaW5nIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWN0aW9uIEEgcGxhaW4gb2JqZWN0IHJlcHJlc2VudGluZyDigJx3aGF0IGNoYW5nZWTigJ0uIEl0IGlzXG4gICAqIGEgZ29vZCBpZGVhIHRvIGtlZXAgYWN0aW9ucyBzZXJpYWxpemFibGUgc28geW91IGNhbiByZWNvcmQgYW5kIHJlcGxheSB1c2VyXG4gICAqIHNlc3Npb25zLCBvciB1c2UgdGhlIHRpbWUgdHJhdmVsbGluZyBgcmVkdXgtZGV2dG9vbHNgLiBBbiBhY3Rpb24gbXVzdCBoYXZlXG4gICAqIGEgYHR5cGVgIHByb3BlcnR5IHdoaWNoIG1heSBub3QgYmUgYHVuZGVmaW5lZGAuIEl0IGlzIGEgZ29vZCBpZGVhIHRvIHVzZVxuICAgKiBzdHJpbmcgY29uc3RhbnRzIGZvciBhY3Rpb24gdHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEZvciBjb252ZW5pZW5jZSwgdGhlIHNhbWUgYWN0aW9uIG9iamVjdCB5b3UgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogTm90ZSB0aGF0LCBpZiB5b3UgdXNlIGEgY3VzdG9tIG1pZGRsZXdhcmUsIGl0IG1heSB3cmFwIGBkaXNwYXRjaCgpYCB0b1xuICAgKiByZXR1cm4gc29tZXRoaW5nIGVsc2UgKGZvciBleGFtcGxlLCBhIFByb21pc2UgeW91IGNhbiBhd2FpdCkuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGFjdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuICcgKyAnVXNlIGN1c3RvbSBtaWRkbGV3YXJlIGZvciBhc3luYyBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gJyArICdIYXZlIHlvdSBtaXNzcGVsbGVkIGEgY29uc3RhbnQ/Jyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnRSZWR1Y2VyKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzID0gbmV4dExpc3RlbmVycztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoZSByZWR1Y2VyIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBzdG9yZSB0byBjYWxjdWxhdGUgdGhlIHN0YXRlLlxuICAgKlxuICAgKiBZb3UgbWlnaHQgbmVlZCB0aGlzIGlmIHlvdXIgYXBwIGltcGxlbWVudHMgY29kZSBzcGxpdHRpbmcgYW5kIHlvdSB3YW50IHRvXG4gICAqIGxvYWQgc29tZSBvZiB0aGUgcmVkdWNlcnMgZHluYW1pY2FsbHkuIFlvdSBtaWdodCBhbHNvIG5lZWQgdGhpcyBpZiB5b3VcbiAgICogaW1wbGVtZW50IGEgaG90IHJlbG9hZGluZyBtZWNoYW5pc20gZm9yIFJlZHV4LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0UmVkdWNlciBUaGUgcmVkdWNlciBmb3IgdGhlIHN0b3JlIHRvIHVzZSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cblxuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjsgLy8gVGhpcyBhY3Rpb24gaGFzIGEgc2ltaWxpYXIgZWZmZWN0IHRvIEFjdGlvblR5cGVzLklOSVQuXG4gICAgLy8gQW55IHJlZHVjZXJzIHRoYXQgZXhpc3RlZCBpbiBib3RoIHRoZSBuZXcgYW5kIG9sZCByb290UmVkdWNlclxuICAgIC8vIHdpbGwgcmVjZWl2ZSB0aGUgcHJldmlvdXMgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gICAgLy8gdGhlIG5ldyBzdGF0ZSB0cmVlIHdpdGggYW55IHJlbGV2YW50IGRhdGEgZnJvbSB0aGUgb2xkIG9uZS5cblxuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0VcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICByZXR1cm4gX3JlZiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMge3N1YnNjcmlwdGlvbn0gQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAodHlwZW9mIG9ic2VydmVyICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwgX3JlZlskJG9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgX3JlZjtcbiAgfSAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cblxuXG4gIGRpc3BhdGNoKHtcbiAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gIH0pO1xuICByZXR1cm4gX3JlZjIgPSB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgfSwgX3JlZjJbJCRvYnNlcnZhYmxlXSA9IG9ic2VydmFibGUsIF9yZWYyO1xufVxuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cblxuICB0cnkge1xuICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgaWYgeW91IGVuYWJsZVxuICAgIC8vIFwiYnJlYWsgb24gYWxsIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIGNvbnNvbGUsXG4gICAgLy8gaXQgd291bGQgcGF1c2UgdGhlIGV4ZWN1dGlvbiBhdCB0aGlzIGxpbmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9IGNhdGNoIChlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG5cbn1cblxuZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gIHZhciBhY3Rpb25EZXNjcmlwdGlvbiA9IGFjdGlvblR5cGUgJiYgXCJhY3Rpb24gXFxcIlwiICsgU3RyaW5nKGFjdGlvblR5cGUpICsgXCJcXFwiXCIgfHwgJ2FuIGFjdGlvbic7XG4gIHJldHVybiBcIkdpdmVuIFwiICsgYWN0aW9uRGVzY3JpcHRpb24gKyBcIiwgcmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiBcIiArIFwiVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiBcIiArIFwiSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCI7XG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiBcIlRoZSBcIiArIGFyZ3VtZW50TmFtZSArIFwiIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXFxcIlwiICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyBcIlxcXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgXCIgKyAoXCJrZXlzOiBcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG4gIGlmIChhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLlJFUExBQ0UpIHJldHVybjtcblxuICBpZiAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBcIlVuZXhwZWN0ZWQgXCIgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArIFwiIFwiICsgKFwiXFxcIlwiICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIgZm91bmQgaW4gXCIgKyBhcmd1bWVudE5hbWUgKyBcIi4gXCIpICsgXCJFeHBlY3RlZCB0byBmaW5kIG9uZSBvZiB0aGUga25vd24gcmVkdWNlciBrZXlzIGluc3RlYWQ6IFwiICsgKFwiXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFJlZHVjZXJTaGFwZShyZWR1Y2Vycykge1xuICBPYmplY3Qua2V5cyhyZWR1Y2VycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHJlZHVjZXIgPSByZWR1Y2Vyc1trZXldO1xuICAgIHZhciBpbml0aWFsU3RhdGUgPSByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiBcIiArIFwiSWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGUgcmVkdWNlciBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IFwiICsgXCJleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IFwiICsgXCJub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCBcIiArIFwieW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUFJPQkVfVU5LTk9XTl9BQ1RJT04oKVxuICAgIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlIFwiICsgQWN0aW9uVHlwZXMuSU5JVCArIFwiIG9yIG90aGVyIGFjdGlvbnMgaW4gXFxcInJlZHV4LypcXFwiIFwiKSArIFwibmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgXCIgKyBcImN1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsIFwiICsgXCJpbiB3aGljaCBjYXNlIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZSwgcmVnYXJkbGVzcyBvZiB0aGUgXCIgKyBcImFjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLlwiKTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5cblxuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZyhcIk5vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmaW5hbFJlZHVjZXJzW2tleV0gPSByZWR1Y2Vyc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7IC8vIFRoaXMgaXMgdXNlZCB0byBtYWtlIHN1cmUgd2UgZG9uJ3Qgd2FybiBhYm91dCB0aGUgc2FtZVxuICAvLyBrZXlzIG11bHRpcGxlIHRpbWVzLlxuXG4gIHZhciB1bmV4cGVjdGVkS2V5Q2FjaGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yO1xuXG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG5cbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9rZXkgPSBmaW5hbFJlZHVjZXJLZXlzW19pXTtcbiAgICAgIHZhciByZWR1Y2VyID0gZmluYWxSZWR1Y2Vyc1tfa2V5XTtcbiAgICAgIHZhciBwcmV2aW91c1N0YXRlRm9yS2V5ID0gc3RhdGVbX2tleV07XG4gICAgICB2YXIgbmV4dFN0YXRlRm9yS2V5ID0gcmVkdWNlcihwcmV2aW91c1N0YXRlRm9yS2V5LCBhY3Rpb24pO1xuXG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKF9rZXksIGFjdGlvbik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuXG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuXG4gICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKHN0YXRlKS5sZW5ndGg7XG4gICAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXh0U3RhdGUgOiBzdGF0ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYW4gYWN0aW9uIGNyZWF0b3IgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGRpc3BhdGNoIHdyYXBwZWQgZnVuY3Rpb24gaW4gcmV0dXJuLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBhY3Rpb25DcmVhdG9ycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb25cbiAqIGNyZWF0b3IgZnVuY3Rpb25zLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpbiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhc2BcbiAqIHN5bnRheC4gWW91IG1heSBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzcGF0Y2ggVGhlIGBkaXNwYXRjaGAgZnVuY3Rpb24gYXZhaWxhYmxlIG9uIHlvdXIgUmVkdXhcbiAqIHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFRoZSBvYmplY3QgbWltaWNraW5nIHRoZSBvcmlnaW5hbCBvYmplY3QsIGJ1dCB3aXRoXG4gKiBldmVyeSBhY3Rpb24gY3JlYXRvciB3cmFwcGVkIGludG8gdGhlIGBkaXNwYXRjaGAgY2FsbC4gSWYgeW91IHBhc3NlZCBhXG4gKiBmdW5jdGlvbiBhcyBgYWN0aW9uQ3JlYXRvcnNgLCB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYWxzbyBiZSBhIHNpbmdsZVxuICogZnVuY3Rpb24uXG4gKi9cblxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgIT09ICdvYmplY3QnIHx8IGFjdGlvbkNyZWF0b3JzID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBpbnN0ZWFkIHJlY2VpdmVkIFwiICsgKGFjdGlvbkNyZWF0b3JzID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGFjdGlvbkNyZWF0b3JzKSArIFwiLiBcIiArIFwiRGlkIHlvdSB3cml0ZSBcXFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiIGluc3RlYWQgb2YgXFxcImltcG9ydCAqIGFzIEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiP1wiKTtcbiAgfVxuXG4gIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIGFjdGlvbkNyZWF0b3JzKSB7XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KSk7XG4gIH1cblxuICBpZiAoZW51bWVyYWJsZU9ubHkpIGtleXMgPSBrZXlzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gIH0pO1xuICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZ1bmNzWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYShiLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0b3JlIGVuaGFuY2VyIHRoYXQgYXBwbGllcyBtaWRkbGV3YXJlIHRvIHRoZSBkaXNwYXRjaCBtZXRob2RcbiAqIG9mIHRoZSBSZWR1eCBzdG9yZS4gVGhpcyBpcyBoYW5keSBmb3IgYSB2YXJpZXR5IG9mIHRhc2tzLCBzdWNoIGFzIGV4cHJlc3NpbmdcbiAqIGFzeW5jaHJvbm91cyBhY3Rpb25zIGluIGEgY29uY2lzZSBtYW5uZXIsIG9yIGxvZ2dpbmcgZXZlcnkgYWN0aW9uIHBheWxvYWQuXG4gKlxuICogU2VlIGByZWR1eC10aHVua2AgcGFja2FnZSBhcyBhbiBleGFtcGxlIG9mIHRoZSBSZWR1eCBtaWRkbGV3YXJlLlxuICpcbiAqIEJlY2F1c2UgbWlkZGxld2FyZSBpcyBwb3RlbnRpYWxseSBhc3luY2hyb25vdXMsIHRoaXMgc2hvdWxkIGJlIHRoZSBmaXJzdFxuICogc3RvcmUgZW5oYW5jZXIgaW4gdGhlIGNvbXBvc2l0aW9uIGNoYWluLlxuICpcbiAqIE5vdGUgdGhhdCBlYWNoIG1pZGRsZXdhcmUgd2lsbCBiZSBnaXZlbiB0aGUgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBmdW5jdGlvbnNcbiAqIGFzIG5hbWVkIGFyZ3VtZW50cy5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBtaWRkbGV3YXJlcyBUaGUgbWlkZGxld2FyZSBjaGFpbiB0byBiZSBhcHBsaWVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHN0b3JlIGVuaGFuY2VyIGFwcGx5aW5nIHRoZSBtaWRkbGV3YXJlLlxuICovXG5cbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1pZGRsZXdhcmVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1pZGRsZXdhcmVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjcmVhdGVTdG9yZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG5cbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiAnICsgJ090aGVyIG1pZGRsZXdhcmUgd291bGQgbm90IGJlIGFwcGxpZWQgdG8gdGhpcyBkaXNwYXRjaC4nKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh2b2lkIDAsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZDIoe30sIHN0b3JlLCB7XG4gICAgICAgIGRpc3BhdGNoOiBfZGlzcGF0Y2hcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59XG5cbi8qXG4gKiBUaGlzIGlzIGEgZHVtbXkgZnVuY3Rpb24gdG8gY2hlY2sgaWYgdGhlIGZ1bmN0aW9uIG5hbWUgaGFzIGJlZW4gYWx0ZXJlZCBieSBtaW5pZmljYXRpb24uXG4gKiBJZiB0aGUgZnVuY3Rpb24gaGFzIGJlZW4gbWluaWZpZWQgYW5kIE5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsIHdhcm4gdGhlIHVzZXIuXG4gKi9cblxuZnVuY3Rpb24gaXNDcnVzaGVkKCkge31cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgd2FybmluZygnWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIi4gJyArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIHNldHRpbmcgbW9kZSB0byBwcm9kdWN0aW9uIGluIHdlYnBhY2sgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uY2VwdHMvbW9kZS8pICcgKyAndG8gZW5zdXJlIHlvdSBoYXZlIHRoZSBjb3JyZWN0IGNvZGUgZm9yIHlvdXIgcHJvZHVjdGlvbiBidWlsZC4nKTtcbn1cblxuZXhwb3J0IHsgQWN0aW9uVHlwZXMgYXMgX19ET19OT1RfVVNFX19BY3Rpb25UeXBlcywgYXBwbHlNaWRkbGV3YXJlLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGNvbWJpbmVSZWR1Y2VycywgY29tcG9zZSwgY3JlYXRlU3RvcmUgfTtcbiIsImltcG9ydCB7IGlzUmVnRXhwLCBpc1N0cmluZyB9IGZyb20gJy4vaXMnO1xuLyoqXG4gKiBUcnVuY2F0ZXMgZ2l2ZW4gc3RyaW5nIHRvIHRoZSBtYXhpbXVtIGNoYXJhY3RlcnMgY291bnRcbiAqXG4gKiBAcGFyYW0gc3RyIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHNlcmlhbGl6YWJsZSB2YWx1ZXNcbiAqIEBwYXJhbSBtYXggTWF4aW11bSBudW1iZXIgb2YgY2hhcmFjdGVycyBpbiB0cnVuY2F0ZWQgc3RyaW5nXG4gKiBAcmV0dXJucyBzdHJpbmcgRW5jb2RlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJ1bmNhdGUoc3RyLCBtYXgpIHtcbiAgICBpZiAobWF4ID09PSB2b2lkIDApIHsgbWF4ID0gMDsgfVxuICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJyB8fCBtYXggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgcmV0dXJuIHN0ci5sZW5ndGggPD0gbWF4ID8gc3RyIDogc3RyLnN1YnN0cigwLCBtYXgpICsgXCIuLi5cIjtcbn1cbi8qKlxuICogVGhpcyBpcyBiYXNpY2FsbHkganVzdCBgdHJpbV9saW5lYCBmcm9tXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS9ibG9iL21hc3Rlci9zcmMvc2VudHJ5L2xhbmcvamF2YXNjcmlwdC9wcm9jZXNzb3IucHkjTDY3XG4gKlxuICogQHBhcmFtIHN0ciBBbiBvYmplY3QgdGhhdCBjb250YWlucyBzZXJpYWxpemFibGUgdmFsdWVzXG4gKiBAcGFyYW0gbWF4IE1heGltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnMgaW4gdHJ1bmNhdGVkIHN0cmluZ1xuICogQHJldHVybnMgc3RyaW5nIEVuY29kZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNuaXBMaW5lKGxpbmUsIGNvbG5vKSB7XG4gICAgdmFyIG5ld0xpbmUgPSBsaW5lO1xuICAgIHZhciBsbCA9IG5ld0xpbmUubGVuZ3RoO1xuICAgIGlmIChsbCA8PSAxNTApIHtcbiAgICAgICAgcmV0dXJuIG5ld0xpbmU7XG4gICAgfVxuICAgIGlmIChjb2xubyA+IGxsKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBjb2xubyA9IGxsO1xuICAgIH1cbiAgICB2YXIgc3RhcnQgPSBNYXRoLm1heChjb2xubyAtIDYwLCAwKTtcbiAgICBpZiAoc3RhcnQgPCA1KSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICB9XG4gICAgdmFyIGVuZCA9IE1hdGgubWluKHN0YXJ0ICsgMTQwLCBsbCk7XG4gICAgaWYgKGVuZCA+IGxsIC0gNSkge1xuICAgICAgICBlbmQgPSBsbDtcbiAgICB9XG4gICAgaWYgKGVuZCA9PT0gbGwpIHtcbiAgICAgICAgc3RhcnQgPSBNYXRoLm1heChlbmQgLSAxNDAsIDApO1xuICAgIH1cbiAgICBuZXdMaW5lID0gbmV3TGluZS5zbGljZShzdGFydCwgZW5kKTtcbiAgICBpZiAoc3RhcnQgPiAwKSB7XG4gICAgICAgIG5ld0xpbmUgPSBcIid7c25pcH0gXCIgKyBuZXdMaW5lO1xuICAgIH1cbiAgICBpZiAoZW5kIDwgbGwpIHtcbiAgICAgICAgbmV3TGluZSArPSAnIHtzbmlwfSc7XG4gICAgfVxuICAgIHJldHVybiBuZXdMaW5lO1xufVxuLyoqXG4gKiBKb2luIHZhbHVlcyBpbiBhcnJheVxuICogQHBhcmFtIGlucHV0IGFycmF5IG9mIHZhbHVlcyB0byBiZSBqb2luZWQgdG9nZXRoZXJcbiAqIEBwYXJhbSBkZWxpbWl0ZXIgc3RyaW5nIHRvIGJlIHBsYWNlZCBpbi1iZXR3ZWVuIHZhbHVlc1xuICogQHJldHVybnMgSm9pbmVkIHZhbHVlc1xuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGZ1bmN0aW9uIHNhZmVKb2luKGlucHV0LCBkZWxpbWl0ZXIpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgdmFyIG91dHB1dCA9IFtdO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLWZvci1vZlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaW5wdXRbaV07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBvdXRwdXQucHVzaChTdHJpbmcodmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgb3V0cHV0LnB1c2goJ1t2YWx1ZSBjYW5ub3QgYmUgc2VyaWFsaXplZF0nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0LmpvaW4oZGVsaW1pdGVyKTtcbn1cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSB2YWx1ZSBtYXRjaGVzIGEgcmVnZXggb3IgaW5jbHVkZXMgdGhlIHN0cmluZ1xuICogQHBhcmFtIHZhbHVlIFRoZSBzdHJpbmcgdmFsdWUgdG8gYmUgY2hlY2tlZCBhZ2FpbnN0XG4gKiBAcGFyYW0gcGF0dGVybiBFaXRoZXIgYSByZWdleCBvciBhIHN0cmluZyB0aGF0IG11c3QgYmUgY29udGFpbmVkIGluIHZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc01hdGNoaW5nUGF0dGVybih2YWx1ZSwgcGF0dGVybikge1xuICAgIGlmICghaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHBhdHRlcm4pKSB7XG4gICAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QodmFsdWUpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5pbmRleE9mKHBhdHRlcm4pICE9PSAtMTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyaW5nLmpzLm1hcCIsImV4cG9ydCBkZWZhdWx0IHtcbiAgLy8gQXV0aFxuICBSRVNUT1JFX1BBU1NXT1JEOiAnUkVTVE9SRV9QQVNTV09SRCcsXG4gIFNJR05fSU46ICdTSUdOX0lOJyxcbiAgU0lHTl9PVVQ6ICdTSUdOX09VVCcsXG5cbiAgLy8gUG9wdXBzXG4gIENMT1NFX09OQk9BUkRJTkc6ICdDTE9TRV9PTkJPQVJESU5HJyxcbiAgT1BFTl9SQVRFOiAnT1BFTl9SQVRFJyxcbiAgU0hPV19PRkZFUjogJ1NIT1dfT0ZGRVInLFxuICBTSE9XX1RCT19CRl9PRkZFUjogJ1NIT1dfVEJPX0JGX09GRkVSJyxcbiAgLy8gTm90aWZpY2F0aW9uc1xuICBDSEFOR0VfTk9USUZJQ0FUSU9OU19TRVRUSU5HUzogJ0NIQU5HRV9OT1RJRklDQVRJT05TX1NFVFRJTkdTJyxcblxuICAvLyBDT01QRVRJVE9SX1NFUlBcbiAgR0VUX0NPTVBFVElUT1JfU0VSUF9EQVRBOiAnR0VUX0NPTVBFVElUT1JfU0VSUF9EQVRBJyxcbiAgR0VUX0NPTVBFVElUT1JfQUxMX1NFUlBfREFUQTogJ0dFVF9DT01QRVRJVE9SX0FMTF9TRVJQX0RBVEEnLFxuXG4gIC8vIEdldCBvcmRlciBkYXRhXG4gIEdFVF9DT01QRVRJVE9SX09SREVSX0RBVEE6ICdHRVRfQ09NUEVUSVRPUl9PUkRFUl9EQVRBJyxcbiAgR0VUX1RCT19PUkRFUl9EQVRBOiAnR0VUX1RCT19PUkRFUl9EQVRBJyxcblxuICAvLyBMaXZlU2V0dGluZ3NcbiAgVVBEQVRFX0xJVkVfU0VUVElOR1M6ICdVUERBVEVfTElWRV9TRVRUSU5HUycsXG5cbiAgT1BFTl9ORVdfV0lORE9XOiAnT1BFTl9ORVdfV0lORE9XJyxcbn07XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgYnJvd3NlciB9IGZyb20gJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbC10cyc7XG5cbmltcG9ydCB7IGluamVjdEZ1bm5lbCB9IGZyb20gJ0Bqcy9CYWNrZ3JvdW5kL2Z1bm5lbCc7XG5cbmltcG9ydCB7IGdldEN1cnJlbnRUYWIgfSBmcm9tICdAaGVscGVycy90YWJzJztcblxudHlwZSBVc2VGdW5uZWxSZXR1cm5UeXBlID0ge1xuICBpbmplY3Q6IChwYWdlVHlwZTogc3RyaW5nKSA9PiBQcm9taXNlPHZvaWQ+O1xuICBzZW5kRXZlbnQ6IChhY3Rpb246IHN0cmluZywgbGFiZWw6IHN0cmluZywgZGF0YTogYW55KSA9PiBQcm9taXNlPHZvaWQ+O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgKGluUG9wdXAgPSBmYWxzZSk6IFVzZUZ1bm5lbFJldHVyblR5cGUgPT4ge1xuICBjb25zdCBpbmplY3QgPSB1c2VDYWxsYmFjayhcbiAgICBhc3luYyAocGFnZVR5cGUpID0+IHtcbiAgICAgIGlmIChpblBvcHVwKSB7XG4gICAgICAgIGNvbnN0IHRhYiA9IGF3YWl0IGdldEN1cnJlbnRUYWIoKTtcbiAgICAgICAgaWYgKHRhYi5pZCkge1xuICAgICAgICAgIGF3YWl0IGluamVjdEZ1bm5lbCh0YWIuaWQsIHBhZ2VUeXBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgW2luUG9wdXBdXG4gICk7XG5cbiAgY29uc3Qgc2VuZEV2ZW50ID0gdXNlQ2FsbGJhY2soXG4gICAgYXN5bmMgKGFjdGlvbiwgbGFiZWwsIGRhdGEpID0+IHtcbiAgICAgIGlmIChpblBvcHVwKSB7XG4gICAgICAgIGNvbnN0IHRhYiA9IGF3YWl0IGdldEN1cnJlbnRUYWIoKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IGJyb3dzZXIudGFicy5leGVjdXRlU2NyaXB0KHRhYi5pZCwge1xuICAgICAgICAgICAgY29kZTogYGhjZnVubmVsKCdldmVudCcsICdjaHJvbWVfZXh0ZW5zaW9uJywgJyR7YWN0aW9ufScsICcke2xhYmVsfScsICR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgICAgIGRhdGFcbiAgICAgICAgICAgICl9KTtgLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnc2VuZEV2ZW50IGVycm9yOiAnLCBlcnIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoY2Z1bm5lbCgnZXZlbnQnLCAnY2hyb21lX2V4dGVuc2lvbicsIGFjdGlvbiwgbGFiZWwsIGRhdGEpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW2luUG9wdXBdXG4gICk7XG5cbiAgcmV0dXJuIHsgaW5qZWN0LCBzZW5kRXZlbnQgfTtcbn07XG4iLCJleHBvcnQgY29uc3QgZmlsZXMgPSB7XG4gIGh0bWw6IHtcbiAgICBTRUFSQ0hfRk9STTogJy9wb3B1cC5odG1sJyxcbiAgfSxcbiAganM6IHtcbiAgICBGSVJTVF9CT09LSU5HOiAnL2pzL2ZpcnN0Qm9va2luZy5idW5kbGUuanMnLFxuICAgIE9GRkVSOiAnL2pzL29mZmVyLmJ1bmRsZS5qcycsXG4gICAgT05CT0FSRElORzogJy9qcy9vbkJvYXJkaW5nLmJ1bmRsZS5qcycsXG4gICAgUFJPTU9DT0RFOiAnL2pzL3Byb21vQ29kZS5idW5kbGUuanMnLFxuICAgIElORk9STUFUSU9OOiAnL2pzL2luZm9ybWF0aW9uLmJ1bmRsZS5qcycsXG4gIH0sXG4gIGNzczoge1xuICAgIEZJUlNUX0JPT0tJTkc6ICdjc3MvZmlyc3RCb29raW5nLmNzcycsXG4gICAgRk9OVFM6ICcvY3NzL2ZvbnRzLmNzcycsXG4gICAgT0ZGRVI6ICdjc3Mvb2ZmZXIuY3NzJyxcbiAgICBPTkJPQVJESU5HOiAnY3NzL29uQm9hcmRpbmcuY3NzJyxcbiAgICBQUk9NT0NPREU6ICdjc3MvcHJvbW9Db2RlLmNzcycsXG4gICAgSU5GT1JNQVRJT046ICdjc3MvaW5mb3JtYXRpb24uY3NzJyxcbiAgfSxcbiAgaW1hZ2VzOiB7XG4gICAgQkdfRUNPTk9NWV9TVEVQOiAnL2Fzc2V0cy9pbWcvYmFja2dyb3VuZC1lY29ub215LXN0ZXAucG5nJyxcbiAgICBCR19GSVJTVF9CT09LSU5HOiAnL2Fzc2V0cy9pbWcvYmFja2dyb3VuZC1maXJzdC1ib29raW5nLnBuZycsXG4gICAgQkdfSU5TVFJVQ1RJT05TX1NURVA6ICcvYXNzZXRzL2ltZy9iYWNrZ3JvdW5kLWluc3RydWN0aW9ucy1zdGVwLnBuZycsXG4gICAgQkdfV0VMQ09NRV9TVEVQOiAnL2Fzc2V0cy9pbWcvYmFja2dyb3VuZC13ZWxjb21lLXN0ZXAucG5nJyxcbiAgICBGQVZJQ09OX0RFRkFVTFQ6ICcvYXNzZXRzL2ljb25zL2ljb24tMTI4LnBuZycsXG4gICAgRkFWSUNPTl9TVUNDRVNTOiAnL2Fzc2V0cy9pY29ucy9pY29uLXN1Y2Nlc3MucG5nJyxcbiAgICBJQ09OX0hFQVJUOiAnL2Fzc2V0cy9pY29ucy9pY29uLWhlYXJ0LnN2ZycsXG4gICAgSUNPTl9ORVc6ICcvYXNzZXRzL2ljb25zL2ljb24tbmV3LnN2ZycsXG4gICAgSUNPTl9QSU46ICcvYXNzZXRzL2ljb25zL2ljb24tcGluLnN2ZycsXG4gICAgTE9HTzogJy9hc3NldHMvaWNvbnMvbG9nby5zdmcnLFxuICB9LFxufTtcbiIsImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5cbmV4cG9ydCBjb25zdCBhcGkgPSBheGlvcy5jcmVhdGUoe1xuICB3aXRoQ3JlZGVudGlhbHM6IHRydWUsXG59KTtcbiIsImltcG9ydCB7IGNyZWF0ZVN0b3JlLCBjb21wb3NlLCBhcHBseU1pZGRsZXdhcmUgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgdGh1bmsgZnJvbSAncmVkdXgtdGh1bmsnO1xuXG5pbXBvcnQgcm9vdFJlZHVjZXIgZnJvbSAnLi9yZWR1Y2Vycyc7XG5cbmludGVyZmFjZSBSZWR1eFdpbmRvdyBleHRlbmRzIFdpbmRvdyB7XG4gIF9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX186IHR5cGVvZiBjb21wb3NlO1xufVxuZGVjbGFyZSBsZXQgZ2xvYmFsOiBSZWR1eFdpbmRvdztcblxuY29uc3QgZW5oYW5jZXJzID0gW1xuICBhcHBseU1pZGRsZXdhcmUodGh1bmspLFxuICBnbG9iYWwgJiZcbiAgICBnbG9iYWwuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyAmJlxuICAgIGdsb2JhbC5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fKCksXG5dLmZpbHRlcigoeCkgPT4geCk7XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN0b3JlKHJvb3RSZWR1Y2VyLCBjb21wb3NlKC4uLmVuaGFuY2VycykpO1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuL2lzJztcbmltcG9ydCB7IG5vcm1hbGl6ZSB9IGZyb20gJy4vb2JqZWN0Jztcbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgd2UncmUgaW4gdGhlIE5vZGUuanMgb3IgQnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIEByZXR1cm5zIEFuc3dlciB0byBnaXZlbiBxdWVzdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlRW52KCkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnID8gcHJvY2VzcyA6IDApID09PSAnW29iamVjdCBwcm9jZXNzXSc7XG59XG4vKipcbiAqIFJlcXVpcmVzIGEgbW9kdWxlIHdoaWNoIGlzIHByb3RlY3RlZCBhZ2FpbnN0IGJ1bmRsZXIgbWluaWZpY2F0aW9uLlxuICpcbiAqIEBwYXJhbSByZXF1ZXN0IFRoZSBtb2R1bGUgcGF0aCB0byByZXNvbHZlXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzXG5leHBvcnQgZnVuY3Rpb24gZHluYW1pY1JlcXVpcmUobW9kLCByZXF1ZXN0KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgIHJldHVybiBtb2QucmVxdWlyZShyZXF1ZXN0KTtcbn1cbi8qKiBEZWZhdWx0IHJlcXVlc3Qga2V5cyB0aGF0J2xsIGJlIHVzZWQgdG8gZXh0cmFjdCBkYXRhIGZyb20gdGhlIHJlcXVlc3QgKi9cbnZhciBERUZBVUxUX1JFUVVFU1RfS0VZUyA9IFsnY29va2llcycsICdkYXRhJywgJ2hlYWRlcnMnLCAnbWV0aG9kJywgJ3F1ZXJ5X3N0cmluZycsICd1cmwnXTtcbi8qKlxuICogTm9ybWFsaXplcyBkYXRhIGZyb20gdGhlIHJlcXVlc3Qgb2JqZWN0LCBhY2NvdW50aW5nIGZvciBmcmFtZXdvcmsgZGlmZmVyZW5jZXMuXG4gKlxuICogQHBhcmFtIHJlcSBUaGUgcmVxdWVzdCBvYmplY3QgZnJvbSB3aGljaCB0byBleHRyYWN0IGRhdGFcbiAqIEBwYXJhbSBrZXlzIEFuIG9wdGlvbmFsIGFycmF5IG9mIGtleXMgdG8gaW5jbHVkZSBpbiB0aGUgbm9ybWFsaXplZCBkYXRhLiBEZWZhdWx0cyB0byBERUZBVUxUX1JFUVVFU1RfS0VZUyBpZiBub3RcbiAqIHByb3ZpZGVkLlxuICogQHJldHVybnMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgbm9ybWFsaXplZCByZXF1ZXN0IGRhdGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3ROb2RlUmVxdWVzdERhdGEocmVxLCBrZXlzKSB7XG4gICAgaWYgKGtleXMgPT09IHZvaWQgMCkgeyBrZXlzID0gREVGQVVMVF9SRVFVRVNUX0tFWVM7IH1cbiAgICAvLyBtYWtlIHN1cmUgd2UgY2FuIHNhZmVseSB1c2UgZHluYW1pY1JlcXVpcmUgYmVsb3dcbiAgICBpZiAoIWlzTm9kZUVudigpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IGdldCBub2RlIHJlcXVlc3QgZGF0YSBvdXRzaWRlIG9mIGEgbm9kZSBlbnZpcm9ubWVudFwiKTtcbiAgICB9XG4gICAgdmFyIHJlcXVlc3REYXRhID0ge307XG4gICAgLy8gaGVhZGVyczpcbiAgICAvLyAgIG5vZGUsIGV4cHJlc3M6IHJlcS5oZWFkZXJzXG4gICAgLy8gICBrb2E6IHJlcS5oZWFkZXJcbiAgICB2YXIgaGVhZGVycyA9IChyZXEuaGVhZGVycyB8fCByZXEuaGVhZGVyIHx8IHt9KTtcbiAgICAvLyBtZXRob2Q6XG4gICAgLy8gICBub2RlLCBleHByZXNzLCBrb2E6IHJlcS5tZXRob2RcbiAgICB2YXIgbWV0aG9kID0gcmVxLm1ldGhvZDtcbiAgICAvLyBob3N0OlxuICAgIC8vICAgZXhwcmVzczogcmVxLmhvc3RuYW1lIGluID4gNCBhbmQgcmVxLmhvc3QgaW4gPCA0XG4gICAgLy8gICBrb2E6IHJlcS5ob3N0XG4gICAgLy8gICBub2RlOiByZXEuaGVhZGVycy5ob3N0XG4gICAgdmFyIGhvc3QgPSByZXEuaG9zdG5hbWUgfHwgcmVxLmhvc3QgfHwgaGVhZGVycy5ob3N0IHx8ICc8bm8gaG9zdD4nO1xuICAgIC8vIHByb3RvY29sOlxuICAgIC8vICAgbm9kZTogPG4vYT5cbiAgICAvLyAgIGV4cHJlc3MsIGtvYTogcmVxLnByb3RvY29sXG4gICAgdmFyIHByb3RvY29sID0gcmVxLnByb3RvY29sID09PSAnaHR0cHMnIHx8IHJlcS5zZWN1cmUgfHwgKHJlcS5zb2NrZXQgfHwge30pLmVuY3J5cHRlZFxuICAgICAgICA/ICdodHRwcydcbiAgICAgICAgOiAnaHR0cCc7XG4gICAgLy8gdXJsIChpbmNsdWRpbmcgcGF0aCBhbmQgcXVlcnkgc3RyaW5nKTpcbiAgICAvLyAgIG5vZGUsIGV4cHJlc3M6IHJlcS5vcmlnaW5hbFVybFxuICAgIC8vICAga29hOiByZXEudXJsXG4gICAgdmFyIG9yaWdpbmFsVXJsID0gKHJlcS5vcmlnaW5hbFVybCB8fCByZXEudXJsIHx8ICcnKTtcbiAgICAvLyBhYnNvbHV0ZSB1cmxcbiAgICB2YXIgYWJzb2x1dGVVcmwgPSBwcm90b2NvbCArIFwiOi8vXCIgKyBob3N0ICsgb3JpZ2luYWxVcmw7XG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ2hlYWRlcnMnOlxuICAgICAgICAgICAgICAgIHJlcXVlc3REYXRhLmhlYWRlcnMgPSBoZWFkZXJzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWV0aG9kJzpcbiAgICAgICAgICAgICAgICByZXF1ZXN0RGF0YS5tZXRob2QgPSBtZXRob2Q7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd1cmwnOlxuICAgICAgICAgICAgICAgIHJlcXVlc3REYXRhLnVybCA9IGFic29sdXRlVXJsO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY29va2llcyc6XG4gICAgICAgICAgICAgICAgLy8gY29va2llczpcbiAgICAgICAgICAgICAgICAvLyAgIG5vZGUsIGV4cHJlc3MsIGtvYTogcmVxLmhlYWRlcnMuY29va2llXG4gICAgICAgICAgICAgICAgLy8gICB2ZXJjZWwsIHNhaWxzLmpzLCBleHByZXNzICh3LyBjb29raWUgbWlkZGxld2FyZSk6IHJlcS5jb29raWVzXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICAgICAgICAgIHJlcXVlc3REYXRhLmNvb2tpZXMgPSByZXEuY29va2llcyB8fCBkeW5hbWljUmVxdWlyZShtb2R1bGUsICdjb29raWUnKS5wYXJzZShoZWFkZXJzLmNvb2tpZSB8fCAnJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdxdWVyeV9zdHJpbmcnOlxuICAgICAgICAgICAgICAgIC8vIHF1ZXJ5IHN0cmluZzpcbiAgICAgICAgICAgICAgICAvLyAgIG5vZGU6IHJlcS51cmwgKHJhdylcbiAgICAgICAgICAgICAgICAvLyAgIGV4cHJlc3MsIGtvYTogcmVxLnF1ZXJ5XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICAgICAgICAgIHJlcXVlc3REYXRhLnF1ZXJ5X3N0cmluZyA9IGR5bmFtaWNSZXF1aXJlKG1vZHVsZSwgJ3VybCcpLnBhcnNlKG9yaWdpbmFsVXJsIHx8ICcnLCBmYWxzZSkucXVlcnk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkYXRhJzpcbiAgICAgICAgICAgICAgICBpZiAobWV0aG9kID09PSAnR0VUJyB8fCBtZXRob2QgPT09ICdIRUFEJykge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gYm9keSBkYXRhOlxuICAgICAgICAgICAgICAgIC8vICAgbm9kZSwgZXhwcmVzcywga29hOiByZXEuYm9keVxuICAgICAgICAgICAgICAgIGlmIChyZXEuYm9keSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3REYXRhLmRhdGEgPSBpc1N0cmluZyhyZXEuYm9keSkgPyByZXEuYm9keSA6IEpTT04uc3RyaW5naWZ5KG5vcm1hbGl6ZShyZXEuYm9keSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaWYgKHt9Lmhhc093blByb3BlcnR5LmNhbGwocmVxLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3REYXRhW2tleV0gPSByZXFba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVxdWVzdERhdGE7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLmpzLm1hcCIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIGhvaXN0Tm9uUmVhY3RTdGF0aWNzXyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG4vLyBTaW5jZSByb2xsdXAgY2Fubm90IGRlYWwgd2l0aCBuYW1lc3BhY2UgYmVpbmcgYSBmdW5jdGlvbixcbi8vIHRoaXMgaXMgdG8gaW50ZXJvcCB3aXRoIFR5cGVTY3JpcHQgc2luY2UgYGludmFyaWFudGBcbi8vIGRvZXMgbm90IGV4cG9ydCBhIGRlZmF1bHRcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2xsdXAvcm9sbHVwL2lzc3Vlcy8xMjY3XG5jb25zdCBob2lzdE5vblJlYWN0U3RhdGljcyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzXy5kZWZhdWx0IHx8IGhvaXN0Tm9uUmVhY3RTdGF0aWNzXztcbmltcG9ydCB7IGludmFyaWFudEludGxDb250ZXh0IH0gZnJvbSAnLi4vdXRpbHMnO1xuZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSB7XG4gICAgcmV0dXJuIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50Jztcbn1cbi8vIFRPRE86IFdlIHNob3VsZCBwcm92aWRlIGluaXRpYWwgdmFsdWUgaGVyZVxuY29uc3QgSW50bENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuY29uc3QgeyBDb25zdW1lcjogSW50bENvbnN1bWVyLCBQcm92aWRlcjogSW50bFByb3ZpZGVyIH0gPSBJbnRsQ29udGV4dDtcbmV4cG9ydCBjb25zdCBQcm92aWRlciA9IEludGxQcm92aWRlcjtcbmV4cG9ydCBjb25zdCBDb250ZXh0ID0gSW50bENvbnRleHQ7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbmplY3RJbnRsKFdyYXBwZWRDb21wb25lbnQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IGludGxQcm9wTmFtZSA9ICdpbnRsJywgZm9yd2FyZFJlZiA9IGZhbHNlLCBlbmZvcmNlQ29udGV4dCA9IHRydWUgfSA9IG9wdGlvbnMgfHwge307XG4gICAgY29uc3QgV2l0aEludGwgPSBwcm9wcyA9PiAoUmVhY3QuY3JlYXRlRWxlbWVudChJbnRsQ29uc3VtZXIsIG51bGwsIChpbnRsKSA9PiB7XG4gICAgICAgIGlmIChlbmZvcmNlQ29udGV4dCkge1xuICAgICAgICAgICAgaW52YXJpYW50SW50bENvbnRleHQoaW50bCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIE9iamVjdC5hc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICAgICAgICBbaW50bFByb3BOYW1lXTogaW50bCxcbiAgICAgICAgfSwgeyByZWY6IGZvcndhcmRSZWYgPyBwcm9wcy5mb3J3YXJkZWRSZWYgOiBudWxsIH0pKSk7XG4gICAgfSkpO1xuICAgIFdpdGhJbnRsLmRpc3BsYXlOYW1lID0gYGluamVjdEludGwoJHtnZXREaXNwbGF5TmFtZShXcmFwcGVkQ29tcG9uZW50KX0pYDtcbiAgICBXaXRoSW50bC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICBpZiAoZm9yd2FyZFJlZikge1xuICAgICAgICByZXR1cm4gaG9pc3ROb25SZWFjdFN0YXRpY3MoUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoV2l0aEludGwsIE9iamVjdC5hc3NpZ24oe30sIHByb3BzLCB7IGZvcndhcmRlZFJlZjogcmVmIH0pKSkpLCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFdpdGhJbnRsLCBXcmFwcGVkQ29tcG9uZW50KTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IEljb24gYXMgSWNvblR5cGUgfSBmcm9tICdAaW50ZXJmYWNlcy9pbnRlcmZhY2VzJztcblxuY29uc3QgSWNvbkNyb3NzOiBSZWFjdC5GQzxJY29uVHlwZT4gPSAoe1xuICBjbGFzc05hbWUsXG4gIGZpbGwgPSAnIzg2ODY4NicsXG4gIGhlaWdodCA9IDE4LFxuICB3aWR0aCA9IDE4LFxufSkgPT4gKFxuICA8c3ZnXG4gICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgZmlsbD17ZmlsbH1cbiAgICBoZWlnaHQ9e2hlaWdodH1cbiAgICB2aWV3Qm94PVwiMCAwIDIwIDIxXCJcbiAgICB3aWR0aD17d2lkdGh9XG4gID5cbiAgICA8cGF0aFxuICAgICAgZD1cIk0xMS41OSAxMGw1LjE1OS01LjE2YTEuMTI2IDEuMTI2IDAgMCAwLTEuNTktMS41OUwxMCA4LjQxIDQuODQgMy4yNWExLjEyOCAxLjEyOCAwIDAgMC0xLjU5IDAgMS4xMjggMS4xMjggMCAwIDAgMCAxLjU5TDguNDA4IDEwIDMuMjUgMTUuMTZhMS4xMjggMS4xMjggMCAwIDAgMCAxLjU5IDEuMTI4IDEuMTI4IDAgMCAwIDEuNTkgMEwxMCAxMS41OWw1LjE1OCA1LjE2YTEuMTI2IDEuMTI2IDAgMCAwIDEuNTktMS41OUwxMS41OTIgMTB6XCJcbiAgICAgIGZpbGxSdWxlPVwibm9uemVyb1wiXG4gICAgLz5cbiAgPC9zdmc+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBJY29uQ3Jvc3M7XG4iLCJpbXBvcnQgeyBicm93c2VyIH0gZnJvbSAnd2ViZXh0ZW5zaW9uLXBvbHlmaWxsLXRzJztcblxuaW1wb3J0IHsgUHJvbW9Db2RlIH0gZnJvbSAnQGludGVyZmFjZXMvaW50ZXJmYWNlcyc7XG5cbmltcG9ydCB7IENvbXBldGl0b3IgfSBmcm9tICdAY29uc3RhbnRzL2NvbXBldGl0b3JzJztcbmltcG9ydCB7IEJSQU5ELCBMQU5HIH0gZnJvbSAnQGNvbnN0YW50cy9jb25zdGFudHMnO1xuaW1wb3J0IHsgU3RvcmFnZSB9IGZyb20gJ0Bjb25zdGFudHMvc3RvcmFnZSc7XG5pbXBvcnQgdXJscyBmcm9tICdAY29uc3RhbnRzL3VybHMnO1xuXG5pbXBvcnQgeyBQcmljZVNldHRpbmcgfSBmcm9tICdAY29tcG9uZW50cy9QcmljZVNldHRpbmdzL2NvbXBvbmVudHMvUm93L1Jvdyc7XG5cbmltcG9ydCB7IGFwaSB9IGZyb20gJ0BoZWxwZXJzL2FwaSc7XG5pbXBvcnQgeyBnZXRGcm9tU3RvcmFnZSB9IGZyb20gJ0BoZWxwZXJzL3N0b3JhZ2UnO1xuaW1wb3J0IHsgZ2V0VmVyc2lvbiB9IGZyb20gJ0BoZWxwZXJzL3V0aWxzJztcblxuY29uc3QgTU9TVF9WSVNJVEVEX1NJVEVTX0FNT1VOVCA9IDUwO1xuY29uc3QgTUFYX1NFQVJDSF9SRVNVTFRTID0gNTAwMDtcblxuZXhwb3J0IGVudW0gUGFnZVR5cGUge1xuICBDT05HUkFUVUxBVElPTlMgPSAnY29uZ3JhdHVsYXRpb25zJyxcbiAgSElTVE9SWSA9ICdoaXN0b3J5JyxcbiAgT0ZGRVIgPSAnb2ZmZXInLFxuICBPUkRFUiA9ICdvcmRlcicsXG4gIFBSSUNFX1NFVFRJTkdTID0gJ3ByaWNlX3NldHRpbmdzJyxcbiAgUFJPTU9DT0RFID0gJ3Byb21vY29kZScsXG4gIFNFUlAgPSAnc2VycCcsXG4gIFdFTENPTUUgPSAnd2VsY29tZScsXG4gIElORk9STUFUSU9OID0gJ2luZm9ybWF0aW9uJyxcbn1cblxuZW51bSBHZXREYXRhS2V5IHtcbiAgUEFHRVRZUEUgPSAncGFnZXR5cGUnLFxuICBVU0VSX0lEID0gJ3VzZXJfaWQnLFxufVxuXG5pbnRlcmZhY2UgR2V0RGF0YSB7XG4gIFtHZXREYXRhS2V5LlBBR0VUWVBFXTogUGFnZVR5cGU7XG4gIFtHZXREYXRhS2V5LlVTRVJfSURdOiBudW1iZXI7XG59XG5cbmNvbnN0IENIUk9NRV9FWFRFTlNJT05fSlNPTl9EQVRBX0tFWSA9ICdjaHJvbWVfZXh0ZW5zaW9uX2pzb25fZGF0YSc7XG5cbmVudW0gUG9zdERhdGFLZXkge1xuICBBRERSRVNTID0gJ2FkZHJlc3MnLFxuICBCQVJfUFJJQ0UgPSAnYmFyX3ByaWNlJyxcbiAgQkFUSFJPT01fVFlQRSA9ICdiYXRocm9vbV90eXBlJyxcbiAgQkVEX1RZUEUgPSAnYmVkX3R5cGUnLFxuICBDQU5DRUxMQVRJT05fQkVGT1JFID0gJ2NhbmNlbGxhdGlvbl9iZWZvcmUnLFxuICBDSEVDS0lOID0gJ2NoZWNraW4nLFxuICBDSEVDS09VVCA9ICdjaGVja291dCcsXG4gIENJVFkgPSAnY2l0eScsXG4gIENPTVBFVElUT1JfQ1VSUkVOQ1kgPSAnY29tcGV0aXRvcl9jdXJyZW5jeScsXG4gIENPTVBFVElUT1JfSUQgPSAnY29tcGV0aXRvcl9pZCcsXG4gIENPTVBFVElUT1JfTkVUX1BSSUNFID0gJ2NvbXBldGl0b3JfbmV0X3ByaWNlJyxcbiAgQ09NUEVUSVRPUl9QUklDRSA9ICdjb21wZXRpdG9yX3ByaWNlJyxcbiAgREFURVRJTUUgPSAnZGF0ZXRpbWUnLFxuICBFWFRFTlNJT05fQlJBTkQgPSAnZXh0ZW5zaW9uX2JyYW5kJyxcbiAgRVhURU5TSU9OX0xBTkcgPSAnZXh0ZW5zaW9uX2xhbmcnLFxuICBFWFRFTlNJT05fVkVSU0lPTiA9ICdleHRlbnNpb25fdmVyc2lvbicsXG4gIEVYVEVSTkFMX0NVUlJFTkNZID0gJ2V4dGVybmFsX2N1cnJlbmN5JyxcbiAgRVhURVJOQUxfSE9URUxfSUQgPSAnZXh0ZXJuYWxfaG90ZWxfaWQnLFxuICBFWFRFUk5BTF9IT1RFTF9OQU1FID0gJ2V4dGVybmFsX2hvdGVsX25hbWUnLFxuICBGVU5ORUxfU1RFUCA9ICdmdW5uZWxfc3RlcCcsXG4gIEdFTyA9ICdnZW8nLFxuICBHVUVTVFMgPSAnZ3Vlc3RzJyxcbiAgR1VFU1RTX0RFVEFJTEVEID0gJ2d1ZXN0c19kZXRhaWxlZCcsXG4gIEhBU19CQUxDT05ZID0gJ2hhc19iYWxjb255JyxcbiAgSEFTX01FQUwgPSAnaGFzX21lYWwnLFxuICBIT1RFTF9LSU5EID0gJ2hvdGVsX2tpbmQnLFxuICBIT1RFTF9OQU1FID0gJ2hvdGVsX25hbWUnLFxuICBJU19FVEcgPSAnaXNfZXRnJyxcbiAgTEFOR1VBR0UgPSAnbGFuZ3VhZ2UnLFxuICBMQVRJVFVERSA9ICdsYXRpdHVkZScsXG4gIExPTkdJVFVERSA9ICdsb25naXR1ZGUnLFxuICBNQUlOX0NPTVBFVElUT1JfUFJJQ0UgPSAnbWFpbl9jb21wZXRpdG9yX3ByaWNlJyxcbiAgTUVBTF9UWVBFID0gJ21lYWxfdHlwZScsXG4gIE1JTl9PU1RST1ZPS19MT1lBTFRZID0gJ21pbl9vc3Ryb3Zva19sb3lhbHR5JyxcbiAgTUlOX09TVFJPVk9LX1BSSUNFID0gJ21pbl9vc3Ryb3Zva19wcmljZScsXG4gIE1JTl9PU1RST1ZPS19QUklDRV9XSVRIX1RBWEVTID0gJ21pbl9vc3Ryb3Zva19wcmljZV93aXRoX3RheGVzJyxcbiAgTkVUX1BSSUNFID0gJ25ldF9wcmljZScsXG4gIE5VTV9JTl9QQUdFID0gJ251bV9pbl9wYWdlJyxcbiAgT1NUUk9WT0tfQ1VSUkVOQ1kgPSAnb3N0cm92b2tfY3VycmVuY3knLFxuICBPVEFIT1RFTF9JRCA9ICdvdGFob3RlbF9pZCcsXG4gIFBIT05FID0gJ3Bob25lJyxcbiAgUFJJQ0UgPSAncHJpY2UnLFxuICBQUklDRV9XSVRIX1RBWEVTID0gJ3ByaWNlX3dpdGhfdGF4ZXMnLFxuICBQUk9NT19BTU9VTlQgPSAncHJvbW9fYW1vdW50JyxcbiAgUkVHSU9OID0gJ3JlZ2lvbicsXG4gIFJFU0lERU5DWSA9ICdyZXNpZGVuY3knLFxuICBST09NX05BTUUgPSAncm9vbV9uYW1lJyxcbiAgU1RBUl9SQVRJTkcgPSAnc3Rhcl9yYXRpbmcnLFxuICBTVVBfTkFNRSA9ICdzdXBfbmFtZScsXG4gIFNVUF9QUklDRSA9ICdzdXBfcHJpY2UnLFxuICBUQVhFUyA9ICd0YXhlcycsXG59XG5cbnR5cGUgR3Vlc3QgPSB7XG4gIGFkdWx0czogbnVtYmVyO1xuICBjaGlsZHJlbjogbnVtYmVyW107XG59O1xuXG50eXBlIFBvc3REYXRhID1cbiAgfCB7XG4gICAgICBbUG9zdERhdGFLZXkuQkFSX1BSSUNFXTogc3RyaW5nO1xuICAgICAgW1Bvc3REYXRhS2V5LkJBVEhST09NX1RZUEVdOiAoc3RyaW5nIHwgbnVsbClbXSB8IG51bGw7XG4gICAgICBbUG9zdERhdGFLZXkuQkVEX1RZUEVdOiBzdHJpbmcgfCBudWxsO1xuICAgICAgW1Bvc3REYXRhS2V5LkNBTkNFTExBVElPTl9CRUZPUkVdOiAoc3RyaW5nIHwgbnVsbClbXSB8IG51bGw7XG4gICAgICBbUG9zdERhdGFLZXkuQ0hFQ0tJTl06IHN0cmluZztcbiAgICAgIFtQb3N0RGF0YUtleS5DSEVDS09VVF06IHN0cmluZztcbiAgICAgIFtQb3N0RGF0YUtleS5DT01QRVRJVE9SX0NVUlJFTkNZXTogc3RyaW5nO1xuICAgICAgW1Bvc3REYXRhS2V5LkNPTVBFVElUT1JfSURdOiBzdHJpbmc7XG4gICAgICBbUG9zdERhdGFLZXkuREFURVRJTUVdOiBudW1iZXI7XG4gICAgICBbUG9zdERhdGFLZXkuRVhURU5TSU9OX0JSQU5EXTogc3RyaW5nO1xuICAgICAgW1Bvc3REYXRhS2V5LkVYVEVOU0lPTl9MQU5HXTogc3RyaW5nO1xuICAgICAgW1Bvc3REYXRhS2V5LkVYVEVOU0lPTl9WRVJTSU9OXTogc3RyaW5nO1xuICAgICAgW1Bvc3REYXRhS2V5LkVYVEVSTkFMX0NVUlJFTkNZXTogc3RyaW5nO1xuICAgICAgW1Bvc3REYXRhS2V5LkVYVEVSTkFMX0hPVEVMX0lEXTogc3RyaW5nIHwgbnVtYmVyO1xuICAgICAgW1Bvc3REYXRhS2V5LkVYVEVSTkFMX0hPVEVMX05BTUVdOiBzdHJpbmc7XG4gICAgICBbUG9zdERhdGFLZXkuRlVOTkVMX1NURVBdOiBzdHJpbmc7XG4gICAgICBbUG9zdERhdGFLZXkuR1VFU1RTXTogbnVtYmVyO1xuICAgICAgW1Bvc3REYXRhS2V5LkdVRVNUU19ERVRBSUxFRF06IEd1ZXN0W107XG4gICAgICBbUG9zdERhdGFLZXkuSEFTX0JBTENPTlldOiBib29sZWFuW10gfCBib29sZWFuO1xuICAgICAgW1Bvc3REYXRhS2V5LkhBU19NRUFMXTogYm9vbGVhbltdIHwgYm9vbGVhbjtcbiAgICAgIFtQb3N0RGF0YUtleS5JU19FVEddOiBib29sZWFuO1xuICAgICAgW1Bvc3REYXRhS2V5Lk1BSU5fQ09NUEVUSVRPUl9QUklDRV06IHN0cmluZyB8IG51bWJlcjtcbiAgICAgIFtQb3N0RGF0YUtleS5NRUFMX1RZUEVdOiAoc3RyaW5nIHwgbnVsbClbXSB8IG51bGw7XG4gICAgICBbUG9zdERhdGFLZXkuTUlOX09TVFJPVk9LX0xPWUFMVFldOiBudW1iZXI7XG4gICAgICBbUG9zdERhdGFLZXkuTUlOX09TVFJPVk9LX1BSSUNFXTogc3RyaW5nO1xuICAgICAgW1Bvc3REYXRhS2V5Lk1JTl9PU1RST1ZPS19QUklDRV9XSVRIX1RBWEVTXTogc3RyaW5nO1xuICAgICAgW1Bvc3REYXRhS2V5LlBSSUNFX1dJVEhfVEFYRVNdOiBzdHJpbmc7XG4gICAgICBbUG9zdERhdGFLZXkuTkVUX1BSSUNFXTogc3RyaW5nO1xuICAgICAgW1Bvc3REYXRhS2V5Lk5VTV9JTl9QQUdFXTogbnVtYmVyO1xuICAgICAgW1Bvc3REYXRhS2V5Lk9TVFJPVk9LX0NVUlJFTkNZXTogc3RyaW5nO1xuICAgICAgW1Bvc3REYXRhS2V5Lk9UQUhPVEVMX0lEXTogc3RyaW5nO1xuICAgICAgW1Bvc3REYXRhS2V5LlBST01PX0FNT1VOVF06IG51bWJlcjtcbiAgICAgIFtQb3N0RGF0YUtleS5SRVNJREVOQ1ldOiBzdHJpbmc7XG4gICAgICBbUG9zdERhdGFLZXkuUk9PTV9OQU1FXTogKHN0cmluZyB8IG51bGwpW10gfCBudWxsO1xuICAgICAgW1Bvc3REYXRhS2V5LlRBWEVTXTogbnVtYmVyIHwgbnVtYmVyW10gfCBudWxsO1xuICAgIH1cbiAgfCB7XG4gICAgICBbUG9zdERhdGFLZXkuRVhURU5TSU9OX0JSQU5EXTogc3RyaW5nO1xuICAgICAgW1Bvc3REYXRhS2V5LkVYVEVOU0lPTl9MQU5HXTogc3RyaW5nO1xuICAgICAgW1Bvc3REYXRhS2V5LkVYVEVOU0lPTl9WRVJTSU9OXTogc3RyaW5nO1xuICAgICAgW1Bvc3REYXRhS2V5LlBST01PX0FNT1VOVF06IG51bWJlcjtcbiAgICB9O1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBldGl0b3JTZXJwUG9zdERhdGEge1xuICBbUG9zdERhdGFLZXkuQUREUkVTU106IHN0cmluZztcbiAgW1Bvc3REYXRhS2V5LkNBTkNFTExBVElPTl9CRUZPUkVdOiBzdHJpbmcgfCBudWxsO1xuICBbUG9zdERhdGFLZXkuQ0hFQ0tJTl06IHN0cmluZztcbiAgW1Bvc3REYXRhS2V5LkNIRUNLT1VUXTogc3RyaW5nO1xuICBbUG9zdERhdGFLZXkuQ0lUWV06IHN0cmluZztcbiAgW1Bvc3REYXRhS2V5LkNPTVBFVElUT1JfQ1VSUkVOQ1ldOiBzdHJpbmc7XG4gIFtQb3N0RGF0YUtleS5DT01QRVRJVE9SX0lEXTogc3RyaW5nO1xuICBbUG9zdERhdGFLZXkuQ09NUEVUSVRPUl9ORVRfUFJJQ0VdOiBudW1iZXI7XG4gIFtQb3N0RGF0YUtleS5DT01QRVRJVE9SX1BSSUNFXTogbnVtYmVyO1xuICBbUG9zdERhdGFLZXkuRVhURVJOQUxfSE9URUxfSURdOiBzdHJpbmcgfCBudW1iZXI7XG4gIFtQb3N0RGF0YUtleS5HRU9dOiBzdHJpbmcgfCBudWxsO1xuICBbUG9zdERhdGFLZXkuR1VFU1RTXTogR3Vlc3RbXTtcbiAgW1Bvc3REYXRhS2V5LkhBU19NRUFMXTogYm9vbGVhbltdO1xuICBbUG9zdERhdGFLZXkuSE9URUxfS0lORF06IHN0cmluZztcbiAgW1Bvc3REYXRhS2V5LkhPVEVMX05BTUVdOiBzdHJpbmc7XG4gIFtQb3N0RGF0YUtleS5MQU5HVUFHRV06IHN0cmluZztcbiAgW1Bvc3REYXRhS2V5LkxBVElUVURFXTogc3RyaW5nO1xuICBbUG9zdERhdGFLZXkuTE9OR0lUVURFXTogc3RyaW5nO1xuICBbUG9zdERhdGFLZXkuTUVBTF9UWVBFXTogc3RyaW5nW107XG4gIFtQb3N0RGF0YUtleS5OVU1fSU5fUEFHRV06IG51bWJlcjtcbiAgW1Bvc3REYXRhS2V5LlBIT05FXTogc3RyaW5nO1xuICBbUG9zdERhdGFLZXkuUkVHSU9OXTogc3RyaW5nO1xuICBbUG9zdERhdGFLZXkuUkVTSURFTkNZXTogc3RyaW5nO1xuICBbUG9zdERhdGFLZXkuUk9PTV9OQU1FXTogc3RyaW5nW107XG4gIFtQb3N0RGF0YUtleS5TVEFSX1JBVElOR106IG51bWJlcjtcbiAgW1Bvc3REYXRhS2V5LlNVUF9OQU1FXTogc3RyaW5nIHwgc3RyaW5nW107XG4gIFtQb3N0RGF0YUtleS5TVVBfUFJJQ0VdOiBudW1iZXI7XG59XG5cbmV4cG9ydCBjb25zdCBpbmplY3RGdW5uZWwgPSBhc3luYyAoXG4gIHRhYklkOiBudW1iZXIsXG4gIHBhZ2VUeXBlOiBQYWdlVHlwZVxuKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgY29uc3QgdWlkID0gYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoU3RvcmFnZS5VSUQpO1xuICBjb25zdCB1c2VySWQgPSBhd2FpdCBnZXRGcm9tU3RvcmFnZShTdG9yYWdlLlVTRVJfSUQpO1xuICBjb25zdCByYXRlcyA9IChhd2FpdCBnZXRGcm9tU3RvcmFnZShTdG9yYWdlLlJBVEVTKSkgfHwge307XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7IGRhdGE6IGZ1bm5lbENvZGUgfSA9IGF3YWl0IGFwaS5nZXQodXJscy5GVU5ORUwpO1xuXG4gICAgYXdhaXQgYnJvd3Nlci50YWJzLmV4ZWN1dGVTY3JpcHQodGFiSWQsIHtcbiAgICAgIGNvZGU6IGAoKCkgPT4ge1xuICAgICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgIH0pKCk7YCxcbiAgICB9KTtcbiAgICBhd2FpdCBicm93c2VyLnRhYnMuZXhlY3V0ZVNjcmlwdCh0YWJJZCwgeyBjb2RlOiBmdW5uZWxDb2RlIH0pO1xuICAgIGF3YWl0IGJyb3dzZXIudGFicy5leGVjdXRlU2NyaXB0KHRhYklkLCB7XG4gICAgICBjb2RlOiBgXG4gICAgICAgIGhjZnVubmVsKCdwbGF0Zm9ybScsICdjaHJvbWVfZXh0ZW5zaW9uJyk7XG4gICAgICAgIGhjZnVubmVsKCdzaXRlbGFuZycsICdydScpO1xuICAgICAgICBoY2Z1bm5lbCgndWlkJywgJyR7dWlkfScpO1xuICAgICAgYCxcbiAgICB9KTtcblxuICAgIGNvbnN0IGdldERhdGE6IEdldERhdGEgPSB7XG4gICAgICBbR2V0RGF0YUtleS5QQUdFVFlQRV06IHBhZ2VUeXBlLFxuICAgICAgW0dldERhdGFLZXkuVVNFUl9JRF06IHVzZXJJZCxcbiAgICB9O1xuXG4gICAgbGV0IHJhdGUgPSByYXRlc1t0YWJJZF07XG4gICAgbGV0IHBvc3REYXRhOiB7XG4gICAgICBbQ0hST01FX0VYVEVOU0lPTl9KU09OX0RBVEFfS0VZXTogUG9zdERhdGE7XG4gICAgfTtcblxuICAgIGlmICghcmF0ZSkge1xuICAgICAgY29uc3Qgbm9SYXRlRGF0YSA9IChhd2FpdCBnZXRGcm9tU3RvcmFnZShTdG9yYWdlLk5PX1JBVEVfREFUQSkpIHx8IHt9O1xuICAgICAgcmF0ZSA9IG5vUmF0ZURhdGFbdGFiSWRdO1xuICAgIH1cblxuICAgIGNvbnN0IHByb21vQ29kZSA9IChhd2FpdCBnZXRGcm9tU3RvcmFnZShTdG9yYWdlLlBST01PQ09ERSkpIGFzIFByb21vQ29kZTtcblxuICAgIGlmIChyYXRlKSB7XG4gICAgICBwb3N0RGF0YSA9IHtcbiAgICAgICAgW0NIUk9NRV9FWFRFTlNJT05fSlNPTl9EQVRBX0tFWV06IHtcbiAgICAgICAgICBbUG9zdERhdGFLZXkuQkFSX1BSSUNFXTpcbiAgICAgICAgICAgIHJhdGUuY29tbWlzc2lvbkluZm8/LnNob3cuYW1vdW50X2dyb3NzX21hcmt1cCxcbiAgICAgICAgICBbUG9zdERhdGFLZXkuQkFUSFJPT01fVFlQRV06IHJhdGUuYmF0aHJvb21UeXBlLFxuICAgICAgICAgIFtQb3N0RGF0YUtleS5CRURfVFlQRV06IHJhdGUuYmVkVHlwZSxcbiAgICAgICAgICBbUG9zdERhdGFLZXkuQ0hFQ0tJTl06IHJhdGUuY2hlY2tJbixcbiAgICAgICAgICBbUG9zdERhdGFLZXkuQ0hFQ0tPVVRdOiByYXRlLmNoZWNrT3V0LFxuICAgICAgICAgIFtQb3N0RGF0YUtleS5DT01QRVRJVE9SX0NVUlJFTkNZXTogcmF0ZS5jdXJyZW5jeSxcbiAgICAgICAgICBbUG9zdERhdGFLZXkuQ09NUEVUSVRPUl9JRF06IHJhdGUuY29tcGV0aXRvcixcbiAgICAgICAgICBbUG9zdERhdGFLZXkuREFURVRJTUVdOiBEYXRlLm5vdygpLFxuICAgICAgICAgIFtQb3N0RGF0YUtleS5FWFRFTlNJT05fQlJBTkRdOiBCUkFORCxcbiAgICAgICAgICBbUG9zdERhdGFLZXkuRVhURU5TSU9OX0xBTkddOiBMQU5HLFxuICAgICAgICAgIFtQb3N0RGF0YUtleS5FWFRFTlNJT05fVkVSU0lPTl06IGdldFZlcnNpb24oKSxcbiAgICAgICAgICBbUG9zdERhdGFLZXkuRVhURVJOQUxfQ1VSUkVOQ1ldOiByYXRlLmV4dGVybmFsQ3VycmVuY3ksXG4gICAgICAgICAgW1Bvc3REYXRhS2V5LkVYVEVSTkFMX0hPVEVMX0lEXTogcmF0ZS5leHRlcm5hbEhvdGVsSWQsXG4gICAgICAgICAgW1Bvc3REYXRhS2V5LkVYVEVSTkFMX0hPVEVMX05BTUVdOiByYXRlLmV4dGVybmFsSG90ZWxOYW1lLFxuICAgICAgICAgIFtQb3N0RGF0YUtleS5GVU5ORUxfU1RFUF06IHJhdGUuZnVubmVsU3RlcCxcbiAgICAgICAgICBbUG9zdERhdGFLZXkuR1VFU1RTXTogcmF0ZS5ndWVzdHMucmVkdWNlKFxuICAgICAgICAgICAgKFxuICAgICAgICAgICAgICBhY2N1bTogbnVtYmVyLFxuICAgICAgICAgICAgICB7IGFkdWx0cywga2lkcyB9OiB7IGFkdWx0czogbnVtYmVyOyBraWRzOiBudW1iZXJbXSB9XG4gICAgICAgICAgICApID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIGFjY3VtICsgK2FkdWx0cyArIChraWRzPy5sZW5ndGggfHwgMCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgMFxuICAgICAgICAgICksXG4gICAgICAgICAgW1Bvc3REYXRhS2V5LkdVRVNUU19ERVRBSUxFRF06IHJhdGUuZ3Vlc3RzLm1hcChcbiAgICAgICAgICAgIChndWVzdDogeyBhZHVsdHM6IG51bWJlcjsga2lkcz86IG51bWJlcltdIH0pID0+ICh7XG4gICAgICAgICAgICAgIGFkdWx0czogZ3Vlc3QuYWR1bHRzLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogZ3Vlc3Qua2lkcyxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKSxcbiAgICAgICAgICBbUG9zdERhdGFLZXkuSEFTX0JBTENPTlldOiByYXRlLmhhc0JhbGNvbnksXG4gICAgICAgICAgW1Bvc3REYXRhS2V5LklTX0VUR106IHJhdGUuaXNFdGcsXG4gICAgICAgICAgW1Bvc3REYXRhS2V5Lk1BSU5fQ09NUEVUSVRPUl9QUklDRV06IHJhdGUucHJpY2VPbGRXaXRob3V0VGF4ZXMsXG4gICAgICAgICAgW1Bvc3REYXRhS2V5LlBSSUNFX1dJVEhfVEFYRVNdOiByYXRlLnByaWNlT2xkV2l0aFRheGVzLFxuICAgICAgICAgIFtQb3N0RGF0YUtleS5NRUFMX1RZUEVdOiByYXRlLm1lYWxUeXBlLFxuICAgICAgICAgIFtQb3N0RGF0YUtleS5NSU5fT1NUUk9WT0tfTE9ZQUxUWV06IHJhdGUubG95YWx0eSxcbiAgICAgICAgICBbUG9zdERhdGFLZXkuTUlOX09TVFJPVk9LX1BSSUNFXTogcmF0ZS5wcmljZVdpdGhvdXRUYXhlcyxcbiAgICAgICAgICBbUG9zdERhdGFLZXkuTUlOX09TVFJPVk9LX1BSSUNFX1dJVEhfVEFYRVNdOiByYXRlLnByaWNlV2l0aFRheGVzLFxuICAgICAgICAgIFtQb3N0RGF0YUtleS5ORVRfUFJJQ0VdOiByYXRlLmNvbW1pc3Npb25JbmZvPy5zaG93LmFtb3VudF9uZXQsXG4gICAgICAgICAgW1Bvc3REYXRhS2V5Lk5VTV9JTl9QQUdFXTogKHJhdGUucmF0ZUluZGV4IHx8IDApICsgMSxcbiAgICAgICAgICBbUG9zdERhdGFLZXkuT1NUUk9WT0tfQ1VSUkVOQ1ldOiByYXRlLmN1cnJlbmN5LFxuICAgICAgICAgIFtQb3N0RGF0YUtleS5PVEFIT1RFTF9JRF06IHJhdGUuaG90ZWxJZCxcbiAgICAgICAgICBbUG9zdERhdGFLZXkuUFJPTU9fQU1PVU5UXTpcbiAgICAgICAgICAgIHByb21vQ29kZSAmJiBwYXJzZUZsb2F0KHByb21vQ29kZS5kaXNjb3VudCkgLyAxMDAsXG4gICAgICAgICAgW1Bvc3REYXRhS2V5LlJFU0lERU5DWV06IHJhdGUucmVzaWRlbmN5LFxuICAgICAgICAgIFtQb3N0RGF0YUtleS5ST09NX05BTUVdOiByYXRlLnJvb21OYW1lLFxuICAgICAgICAgIFtQb3N0RGF0YUtleS5UQVhFU106IHJhdGUudGF4ZXMsXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBpZiAocmF0ZS5mdW5uZWxTdGVwID09PSAnYm9va2luZ19mb3JtJykge1xuICAgICAgICBwb3N0RGF0YSA9IHtcbiAgICAgICAgICBbQ0hST01FX0VYVEVOU0lPTl9KU09OX0RBVEFfS0VZXToge1xuICAgICAgICAgICAgLi4ucG9zdERhdGFbQ0hST01FX0VYVEVOU0lPTl9KU09OX0RBVEFfS0VZXSxcbiAgICAgICAgICAgIFtQb3N0RGF0YUtleS5DQU5DRUxMQVRJT05fQkVGT1JFXTogcmF0ZS5jYW5jZWxsYXRpb25CZWZvcmUsXG4gICAgICAgICAgICBbUG9zdERhdGFLZXkuSEFTX01FQUxdOiByYXRlLmhhc01lYWwsXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcG9zdERhdGEgPSB7XG4gICAgICAgIFtDSFJPTUVfRVhURU5TSU9OX0pTT05fREFUQV9LRVldOiB7XG4gICAgICAgICAgW1Bvc3REYXRhS2V5LkVYVEVOU0lPTl9CUkFORF06IEJSQU5ELFxuICAgICAgICAgIFtQb3N0RGF0YUtleS5FWFRFTlNJT05fTEFOR106IExBTkcsXG4gICAgICAgICAgW1Bvc3REYXRhS2V5LkVYVEVOU0lPTl9WRVJTSU9OXTogZ2V0VmVyc2lvbigpLFxuICAgICAgICAgIFtQb3N0RGF0YUtleS5QUk9NT19BTU9VTlRdOlxuICAgICAgICAgICAgcHJvbW9Db2RlICYmIHBhcnNlRmxvYXQocHJvbW9Db2RlLmRpc2NvdW50KSAvIDEwMCxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgYXdhaXQgYnJvd3Nlci50YWJzLmV4ZWN1dGVTY3JpcHQodGFiSWQsIHtcbiAgICAgIGNvZGU6IGBoY2Z1bm5lbCgnc2VuZCcsICR7SlNPTi5zdHJpbmdpZnkoZ2V0RGF0YSl9LCAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICBwb3N0RGF0YVxuICAgICAgKX0pO2AsXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufTtcblxuZW51bSBEYXRhS2V5IHtcbiAgSElTVE9SWSA9ICdoaXN0b3J5JyxcbiAgT1JERVIgPSAnb3JkZXInLFxuICBTRVJQID0gJ3NlcnAnLFxuICBQUklDRV9TRVRUSU5HUyA9ICdwcmljZV9zZXR0aW5ncycsXG59XG5cbmludGVyZmFjZSBDb21wZXRpdG9yU2VycERhdGEge1xuICBbQ0hST01FX0VYVEVOU0lPTl9KU09OX0RBVEFfS0VZXToge1xuICAgIFtEYXRhS2V5LlNFUlBdOiBDb21wZXRpdG9yU2VycFBvc3REYXRhW107XG4gIH07XG59XG5cbmludGVyZmFjZSBDb21wZXRpdG9yT3JkZXJEYXRhIHtcbiAgW0NIUk9NRV9FWFRFTlNJT05fSlNPTl9EQVRBX0tFWV06IHtcbiAgICBbRGF0YUtleS5PUkRFUl06IFBvc3REYXRhO1xuICB9O1xufVxuXG5pbnRlcmZhY2UgSGlzdG9yeURhdGEge1xuICBbQ0hST01FX0VYVEVOU0lPTl9KU09OX0RBVEFfS0VZXToge1xuICAgIFtEYXRhS2V5LkhJU1RPUlldOiBzdHJpbmdbXTtcbiAgfTtcbn1cblxudHlwZSBQcmljZVNldHRpbmdzUG9zdERhdGEgPSB7XG4gIFtrZXkgaW4gQ29tcGV0aXRvcl06IHtcbiAgICB0eXBlOiBQcmljZVNldHRpbmc7XG4gICAgbWFya3VwOiBudW1iZXI7XG4gIH07XG59O1xuXG5pbnRlcmZhY2UgUHJpY2VTZXR0aW5nc0RhdGEge1xuICBbQ0hST01FX0VYVEVOU0lPTl9KU09OX0RBVEFfS0VZXToge1xuICAgIFtEYXRhS2V5LlBSSUNFX1NFVFRJTkdTXTogUHJpY2VTZXR0aW5nc1Bvc3REYXRhO1xuICB9O1xufVxuXG5pbnRlcmZhY2UgU2VuZEZ1bm5lbFByb3BzPFQ+IHtcbiAgdGFiSWQ6IG51bWJlcjtcbiAgcGFnZVR5cGU6IFBhZ2VUeXBlO1xuICBwb3N0RGF0YTogVDtcbn1cblxuZXhwb3J0IGNvbnN0IHNlbmRGdW5uZWwgPSBhc3luYyA8VD4oe1xuICBwYWdlVHlwZSxcbiAgcG9zdERhdGEsXG4gIHRhYklkLFxufTogU2VuZEZ1bm5lbFByb3BzPFQ+KTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGNvbnN0IHVpZCA9IGF3YWl0IGdldEZyb21TdG9yYWdlKFN0b3JhZ2UuVUlEKTtcbiAgY29uc3QgdXNlcklkID0gYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoU3RvcmFnZS5VU0VSX0lEKTtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IGRhdGE6IGZ1bm5lbENvZGUgfSA9IGF3YWl0IGFwaS5nZXQodXJscy5GVU5ORUwpO1xuICAgIGF3YWl0IGJyb3dzZXIudGFicy5leGVjdXRlU2NyaXB0KHRhYklkLCB7XG4gICAgICBjb2RlOiBgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7YCxcbiAgICB9KTtcbiAgICBhd2FpdCBicm93c2VyLnRhYnMuZXhlY3V0ZVNjcmlwdCh0YWJJZCwgeyBjb2RlOiBmdW5uZWxDb2RlIH0pO1xuICAgIGF3YWl0IGJyb3dzZXIudGFicy5leGVjdXRlU2NyaXB0KHRhYklkLCB7XG4gICAgICBjb2RlOiBgXG4gICAgICAgIGhjZnVubmVsKCdwbGF0Zm9ybScsICdjaHJvbWVfZXh0ZW5zaW9uJyk7XG4gICAgICAgIGhjZnVubmVsKCdzaXRlbGFuZycsICdydScpO1xuICAgICAgICBoY2Z1bm5lbCgndWlkJywgJyR7dWlkfScpO1xuICAgICAgYCxcbiAgICB9KTtcbiAgICBjb25zdCBnZXREYXRhOiBHZXREYXRhID0ge1xuICAgICAgW0dldERhdGFLZXkuUEFHRVRZUEVdOiBwYWdlVHlwZSxcbiAgICAgIFtHZXREYXRhS2V5LlVTRVJfSURdOiB1c2VySWQsXG4gICAgfTtcbiAgICBhd2FpdCBicm93c2VyLnRhYnMuZXhlY3V0ZVNjcmlwdCh0YWJJZCwge1xuICAgICAgY29kZTogYGhjZnVubmVsKCdzZW5kJywgJHtKU09OLnN0cmluZ2lmeShnZXREYXRhKX0sICR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgIHBvc3REYXRhXG4gICAgICApfSk7YCxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3Qgc2VuZENvbXBldGl0b3JTZXJwRGF0YSA9IGFzeW5jIChcbiAgdGFiSWQ6IG51bWJlcixcbiAgZGF0YTogQ29tcGV0aXRvclNlcnBQb3N0RGF0YVtdXG4pOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgY29uc3QgcG9zdERhdGEgPSB7XG4gICAgW0NIUk9NRV9FWFRFTlNJT05fSlNPTl9EQVRBX0tFWV06IHtcbiAgICAgIFtEYXRhS2V5LlNFUlBdOiBkYXRhLFxuICAgIH0sXG4gIH07XG4gIHJldHVybiBzZW5kRnVubmVsPENvbXBldGl0b3JTZXJwRGF0YT4oe1xuICAgIHBhZ2VUeXBlOiBQYWdlVHlwZS5TRVJQLFxuICAgIHBvc3REYXRhLFxuICAgIHRhYklkLFxuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZW5kQ29tcGV0aXRvck9yZGVyRGF0YSA9IGFzeW5jIChcbiAgdGFiSWQ6IG51bWJlcixcbiAgZGF0YTogUG9zdERhdGFcbik6IFByb21pc2U8dm9pZD4gPT4ge1xuICBjb25zdCBwb3N0RGF0YSA9IHtcbiAgICBbQ0hST01FX0VYVEVOU0lPTl9KU09OX0RBVEFfS0VZXToge1xuICAgICAgW0RhdGFLZXkuT1JERVJdOiBkYXRhLFxuICAgIH0sXG4gIH07XG4gIHJldHVybiBzZW5kRnVubmVsPENvbXBldGl0b3JPcmRlckRhdGE+KHtcbiAgICBwYWdlVHlwZTogUGFnZVR5cGUuT1JERVIsXG4gICAgcG9zdERhdGEsXG4gICAgdGFiSWQsXG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IHNlbmRQcmljZVNldHRpbmdzID0gYXN5bmMgKFxuICB0YWJJZDogbnVtYmVyLFxuICBkYXRhOiBQcmljZVNldHRpbmdzUG9zdERhdGFcbik6IFByb21pc2U8dm9pZD4gPT4ge1xuICBjb25zdCBwb3N0RGF0YSA9IHtcbiAgICBbQ0hST01FX0VYVEVOU0lPTl9KU09OX0RBVEFfS0VZXToge1xuICAgICAgW0RhdGFLZXkuUFJJQ0VfU0VUVElOR1NdOiBkYXRhLFxuICAgIH0sXG4gIH07XG4gIHJldHVybiBzZW5kRnVubmVsPFByaWNlU2V0dGluZ3NEYXRhPih7XG4gICAgcGFnZVR5cGU6IFBhZ2VUeXBlLlBSSUNFX1NFVFRJTkdTLFxuICAgIHBvc3REYXRhLFxuICAgIHRhYklkLFxuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZW5kQnJvd3Nlckhpc3RvcnkgPSBhc3luYyAodGFiSWQ6IG51bWJlcik6IFByb21pc2U8dm9pZD4gPT4ge1xuICBjb25zdCBtaWxsaXNlY29uZHNQZXJNb250aCA9IDEwMDAgKiA2MCAqIDYwICogMjQgKiAzMDtcbiAgY29uc3Qgb25lTW9udGhBZ28gPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIG1pbGxpc2Vjb25kc1Blck1vbnRoO1xuICBjb25zdCBoaXN0b3J5ID0gYXdhaXQgYnJvd3Nlci5oaXN0b3J5LnNlYXJjaCh7XG4gICAgbWF4UmVzdWx0czogTUFYX1NFQVJDSF9SRVNVTFRTLFxuICAgIHN0YXJ0VGltZTogb25lTW9udGhBZ28sXG4gICAgdGV4dDogJycsXG4gIH0pO1xuICBjb25zdCBoaXN0b3J5VXJscyA9IGhpc3RvcnlcbiAgICAuc29ydChcbiAgICAgIChoaXN0b3J5SXRlbUEsIGhpc3RvcnlJdGVtQikgPT5cbiAgICAgICAgKGhpc3RvcnlJdGVtQi52aXNpdENvdW50IHx8IDApIC0gKGhpc3RvcnlJdGVtQS52aXNpdENvdW50IHx8IDApXG4gICAgKVxuICAgIC5yZWR1Y2UoKGFjYywgeyB1cmwgfSkgPT4ge1xuICAgICAgY29uc3QgaG9zdG5hbWUgPSB1cmwgJiYgbmV3IFVSTCh1cmwpLmhvc3RuYW1lO1xuXG4gICAgICBpZiAoaG9zdG5hbWUpIHtcbiAgICAgICAgYWNjLnB1c2goaG9zdG5hbWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIFtdIGFzIHN0cmluZ1tdKTtcbiAgY29uc3QgdW5pcXVlSGlzdG9yeVVybHMgPSBbLi4ubmV3IFNldChoaXN0b3J5VXJscyldO1xuICBjb25zdCBwb3N0RGF0YSA9IHtcbiAgICBbQ0hST01FX0VYVEVOU0lPTl9KU09OX0RBVEFfS0VZXToge1xuICAgICAgW0RhdGFLZXkuSElTVE9SWV06IHVuaXF1ZUhpc3RvcnlVcmxzLnNsaWNlKDAsIE1PU1RfVklTSVRFRF9TSVRFU19BTU9VTlQpLFxuICAgIH0sXG4gIH07XG5cbiAgcmV0dXJuIHNlbmRGdW5uZWw8SGlzdG9yeURhdGE+KHtcbiAgICBwYWdlVHlwZTogUGFnZVR5cGUuSElTVE9SWSxcbiAgICBwb3N0RGF0YSxcbiAgICB0YWJJZCxcbiAgfSk7XG59O1xuIiwiaW1wb3J0IHsgYnJvd3NlciwgVGFicyB9IGZyb20gJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbC10cyc7XG5cbmV4cG9ydCBjb25zdCBnZXRDdXJyZW50VGFiID0gYXN5bmMgKCk6IFByb21pc2U8VGFicy5UYWI+ID0+IHtcbiAgY29uc3QgW3RhYl0gPSBhd2FpdCBicm93c2VyLnRhYnMucXVlcnkoe1xuICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICBjdXJyZW50V2luZG93OiB0cnVlLFxuICB9KTtcblxuICByZXR1cm4gdGFiO1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IExhbmd1YWdlIH0gZnJvbSAnQGNvbnN0YW50cy9sYW5ndWFnZXMnO1xuXG5pbnRlcmZhY2UgQ29udGV4dFByb3BzIHtcbiAgbGFuZ3VhZ2U6IExhbmd1YWdlO1xuICBzZXRMYW5ndWFnZShsYW5ndWFnZTogTGFuZ3VhZ2UpOiB2b2lkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZWFjdC5jcmVhdGVDb250ZXh0PENvbnRleHRQcm9wcz4oe1xuICBsYW5ndWFnZTogTGFuZ3VhZ2UuRU4sXG4gIHNldExhbmd1YWdlOiAoKSA9PiB7fSxcbn0pO1xuIiwidmFyIGRlZmF1bHRGdW5jdGlvbk5hbWUgPSAnPGFub255bW91cz4nO1xuLyoqXG4gKiBTYWZlbHkgZXh0cmFjdCBmdW5jdGlvbiBuYW1lIGZyb20gaXRzZWxmXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRGdW5jdGlvbk5hbWUoZm4pIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWZuIHx8IHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRGdW5jdGlvbk5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZuLm5hbWUgfHwgZGVmYXVsdEZ1bmN0aW9uTmFtZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gSnVzdCBhY2Nlc3NpbmcgY3VzdG9tIHByb3BzIGluIHNvbWUgU2VsZW5pdW0gZW52aXJvbm1lbnRzXG4gICAgICAgIC8vIGNhbiBjYXVzZSBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBleGNlcHRpb24gKHNlZSByYXZlbi1qcyM0OTUpLlxuICAgICAgICByZXR1cm4gZGVmYXVsdEZ1bmN0aW9uTmFtZTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGFja3RyYWNlLmpzLm1hcCIsImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcblxuaW1wb3J0IHsgbm9vcCB9IGZyb20gJ0BoZWxwZXJzL3V0aWxzJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0J1dHRvbkljb24uY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgY2hpbGRyZW4/OiBSZWFjdE5vZGU7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgb25DbGljaygpOiB2b2lkO1xufVxuXG5jb25zdCBCdXR0b25JY29uOiBSZWFjdC5GQzxQcm9wcz4gPSAoe1xuICBjaGlsZHJlbixcbiAgY2xhc3NOYW1lLFxuICBvbkNsaWNrID0gbm9vcCxcbn0pID0+IChcbiAgPGJ1dHRvblxuICAgIGNsYXNzTmFtZT17ZW0oJ2J1dHRvbkljb24nKShudWxsLCBjbGFzc05hbWUpfVxuICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgdHlwZT1cImJ1dHRvblwiXG4gID5cbiAgICB7Y2hpbGRyZW59XG4gIDwvYnV0dG9uPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uSWNvbjtcbiIsImV4cG9ydCBlbnVtIEFDVElPTl9UWVBFIHtcbiAgU0VUX1RIRU1FID0gJ1NFVF9USEVNRScsXG59XG4iLCJleHBvcnQgZW51bSBBQ1RJT05fVFlQRSB7XG4gIFNFVF9MT0NBTEUgPSAnU0VUX0xPQ0FMRScsXG59XG4iLCJleHBvcnQgZW51bSBBQ1RJT05fVFlQRSB7XG4gIFNFVF9TRVRUSU5HUyA9ICdTRVRfU0VUVElOR1MnLFxufVxuIiwiZXhwb3J0IHZhciBUWVBFO1xuKGZ1bmN0aW9uIChUWVBFKSB7XG4gICAgLyoqXG4gICAgICogUmF3IHRleHRcbiAgICAgKi9cbiAgICBUWVBFW1RZUEVbXCJsaXRlcmFsXCJdID0gMF0gPSBcImxpdGVyYWxcIjtcbiAgICAvKipcbiAgICAgKiBWYXJpYWJsZSB3L28gYW55IGZvcm1hdCwgZS5nIGB2YXJgIGluIGB0aGlzIGlzIGEge3Zhcn1gXG4gICAgICovXG4gICAgVFlQRVtUWVBFW1wiYXJndW1lbnRcIl0gPSAxXSA9IFwiYXJndW1lbnRcIjtcbiAgICAvKipcbiAgICAgKiBWYXJpYWJsZSB3LyBudW1iZXIgZm9ybWF0XG4gICAgICovXG4gICAgVFlQRVtUWVBFW1wibnVtYmVyXCJdID0gMl0gPSBcIm51bWJlclwiO1xuICAgIC8qKlxuICAgICAqIFZhcmlhYmxlIHcvIGRhdGUgZm9ybWF0XG4gICAgICovXG4gICAgVFlQRVtUWVBFW1wiZGF0ZVwiXSA9IDNdID0gXCJkYXRlXCI7XG4gICAgLyoqXG4gICAgICogVmFyaWFibGUgdy8gdGltZSBmb3JtYXRcbiAgICAgKi9cbiAgICBUWVBFW1RZUEVbXCJ0aW1lXCJdID0gNF0gPSBcInRpbWVcIjtcbiAgICAvKipcbiAgICAgKiBWYXJpYWJsZSB3LyBzZWxlY3QgZm9ybWF0XG4gICAgICovXG4gICAgVFlQRVtUWVBFW1wic2VsZWN0XCJdID0gNV0gPSBcInNlbGVjdFwiO1xuICAgIC8qKlxuICAgICAqIFZhcmlhYmxlIHcvIHBsdXJhbCBmb3JtYXRcbiAgICAgKi9cbiAgICBUWVBFW1RZUEVbXCJwbHVyYWxcIl0gPSA2XSA9IFwicGx1cmFsXCI7XG4gICAgLyoqXG4gICAgICogT25seSBwb3NzaWJsZSB3aXRoaW4gcGx1cmFsIGFyZ3VtZW50LlxuICAgICAqIFRoaXMgaXMgdGhlIGAjYCBzeW1ib2wgdGhhdCB3aWxsIGJlIHN1YnN0aXR1dGVkIHdpdGggdGhlIGNvdW50LlxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcInBvdW5kXCJdID0gN10gPSBcInBvdW5kXCI7XG59KShUWVBFIHx8IChUWVBFID0ge30pKTtcbi8qKlxuICogVHlwZSBHdWFyZHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTGl0ZXJhbEVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS5saXRlcmFsO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQXJndW1lbnRFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUuYXJndW1lbnQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXJFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUubnVtYmVyO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzRGF0ZUVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS5kYXRlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVGltZUVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS50aW1lO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzU2VsZWN0RWxlbWVudChlbCkge1xuICAgIHJldHVybiBlbC50eXBlID09PSBUWVBFLnNlbGVjdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1BsdXJhbEVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS5wbHVyYWw7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNQb3VuZEVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS5wb3VuZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc051bWJlclNrZWxldG9uKGVsKSB7XG4gICAgcmV0dXJuICEhKGVsICYmIHR5cGVvZiBlbCA9PT0gJ29iamVjdCcgJiYgZWwudHlwZSA9PT0gMCAvKiBudW1iZXIgKi8pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzRGF0ZVRpbWVTa2VsZXRvbihlbCkge1xuICAgIHJldHVybiAhIShlbCAmJiB0eXBlb2YgZWwgPT09ICdvYmplY3QnICYmIGVsLnR5cGUgPT09IDEgLyogZGF0ZVRpbWUgKi8pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUxpdGVyYWxFbGVtZW50KHZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogVFlQRS5saXRlcmFsLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOdW1iZXJFbGVtZW50KHZhbHVlLCBzdHlsZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFRZUEUubnVtYmVyLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICB9O1xufVxuIiwiLy8gdHNsaW50OmRpc2FibGU6b25seS1hcnJvdy1mdW5jdGlvbnNcbi8vIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNob3J0aGFuZFxuLy8gdHNsaW50OmRpc2FibGU6dHJhaWxpbmctY29tbWFcbi8vIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5c1xuLy8gdHNsaW50OmRpc2FibGU6b25lLXZhcmlhYmxlLXBlci1kZWNsYXJhdGlvblxuLy8gdHNsaW50OmRpc2FibGU6bWF4LWxpbmUtbGVuZ3RoXG4vLyB0c2xpbnQ6ZGlzYWJsZTpuby1jb25zZWN1dGl2ZS1ibGFuay1saW5lc1xuLy8gdHNsaW50OmRpc2FibGU6YWxpZ25cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbi8vIEdlbmVyYXRlZCBieSBQRUcuanMgdi4gMC4xMC4wICh0cy1wZWdqcyBwbHVnaW4gdi4gMC4yLjYgKVxuLy9cbi8vIGh0dHBzOi8vcGVnanMub3JnLyAgIGh0dHBzOi8vZ2l0aHViLmNvbS9tZXRhZGV2cHJvL3RzLXBlZ2pzXG5pbXBvcnQgeyBUWVBFLCB9IGZyb20gJy4vdHlwZXMnO1xudmFyIFN5bnRheEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTeW50YXhFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTeW50YXhFcnJvcihtZXNzYWdlLCBleHBlY3RlZCwgZm91bmQsIGxvY2F0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICBfdGhpcy5leHBlY3RlZCA9IGV4cGVjdGVkO1xuICAgICAgICBfdGhpcy5mb3VuZCA9IGZvdW5kO1xuICAgICAgICBfdGhpcy5sb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICBfdGhpcy5uYW1lID0gXCJTeW50YXhFcnJvclwiO1xuICAgICAgICBpZiAodHlwZW9mIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKF90aGlzLCBTeW50YXhFcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTeW50YXhFcnJvci5idWlsZE1lc3NhZ2UgPSBmdW5jdGlvbiAoZXhwZWN0ZWQsIGZvdW5kKSB7XG4gICAgICAgIGZ1bmN0aW9uIGhleChjaCkge1xuICAgICAgICAgICAgcmV0dXJuIGNoLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbGl0ZXJhbEVzY2FwZShzKSB7XG4gICAgICAgICAgICByZXR1cm4gc1xuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcL2csIFwiXFxcXFxcXFxcIilcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXCIvZywgXCJcXFxcXFxcIlwiKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXDAvZywgXCJcXFxcMFwiKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXHQvZywgXCJcXFxcdFwiKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXHIvZywgXCJcXFxcclwiKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXFx4MDAtXFx4MEZdL2csIGZ1bmN0aW9uIChjaCkgeyByZXR1cm4gXCJcXFxceDBcIiArIGhleChjaCk7IH0pXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1tcXHgxMC1cXHgxRlxceDdGLVxceDlGXS9nLCBmdW5jdGlvbiAoY2gpIHsgcmV0dXJuIFwiXFxcXHhcIiArIGhleChjaCk7IH0pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNsYXNzRXNjYXBlKHMpIHtcbiAgICAgICAgICAgIHJldHVybiBzXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFwvZywgXCJcXFxcXFxcXFwiKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXF0vZywgXCJcXFxcXVwiKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXF4vZywgXCJcXFxcXlwiKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8tL2csIFwiXFxcXC1cIilcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwwL2csIFwiXFxcXDBcIilcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFx0L2csIFwiXFxcXHRcIilcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIilcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxyL2csIFwiXFxcXHJcIilcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvW1xceDAwLVxceDBGXS9nLCBmdW5jdGlvbiAoY2gpIHsgcmV0dXJuIFwiXFxcXHgwXCIgKyBoZXgoY2gpOyB9KVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXFx4MTAtXFx4MUZcXHg3Ri1cXHg5Rl0vZywgZnVuY3Rpb24gKGNoKSB7IHJldHVybiBcIlxcXFx4XCIgKyBoZXgoY2gpOyB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBkZXNjcmliZUV4cGVjdGF0aW9uKGV4cGVjdGF0aW9uKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGV4cGVjdGF0aW9uLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwibGl0ZXJhbFwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcXFwiXCIgKyBsaXRlcmFsRXNjYXBlKGV4cGVjdGF0aW9uLnRleHQpICsgXCJcXFwiXCI7XG4gICAgICAgICAgICAgICAgY2FzZSBcImNsYXNzXCI6XG4gICAgICAgICAgICAgICAgICAgIHZhciBlc2NhcGVkUGFydHMgPSBleHBlY3RhdGlvbi5wYXJ0cy5tYXAoZnVuY3Rpb24gKHBhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHBhcnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBjbGFzc0VzY2FwZShwYXJ0WzBdKSArIFwiLVwiICsgY2xhc3NFc2NhcGUocGFydFsxXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGNsYXNzRXNjYXBlKHBhcnQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiW1wiICsgKGV4cGVjdGF0aW9uLmludmVydGVkID8gXCJeXCIgOiBcIlwiKSArIGVzY2FwZWRQYXJ0cyArIFwiXVwiO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJhbnlcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiYW55IGNoYXJhY3RlclwiO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiZW5kIG9mIGlucHV0XCI7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm90aGVyXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBleHBlY3RhdGlvbi5kZXNjcmlwdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBkZXNjcmliZUV4cGVjdGVkKGV4cGVjdGVkMSkge1xuICAgICAgICAgICAgdmFyIGRlc2NyaXB0aW9ucyA9IGV4cGVjdGVkMS5tYXAoZGVzY3JpYmVFeHBlY3RhdGlvbik7XG4gICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgIHZhciBqO1xuICAgICAgICAgICAgZGVzY3JpcHRpb25zLnNvcnQoKTtcbiAgICAgICAgICAgIGlmIChkZXNjcmlwdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDEsIGogPSAxOyBpIDwgZGVzY3JpcHRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXNjcmlwdGlvbnNbaSAtIDFdICE9PSBkZXNjcmlwdGlvbnNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uc1tqXSA9IGRlc2NyaXB0aW9uc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbnMubGVuZ3RoID0gajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAoZGVzY3JpcHRpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0aW9uc1swXTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdGlvbnNbMF0gKyBcIiBvciBcIiArIGRlc2NyaXB0aW9uc1sxXTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVzY3JpcHRpb25zLnNsaWNlKDAsIC0xKS5qb2luKFwiLCBcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICsgXCIsIG9yIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICArIGRlc2NyaXB0aW9uc1tkZXNjcmlwdGlvbnMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZGVzY3JpYmVGb3VuZChmb3VuZDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3VuZDEgPyBcIlxcXCJcIiArIGxpdGVyYWxFc2NhcGUoZm91bmQxKSArIFwiXFxcIlwiIDogXCJlbmQgb2YgaW5wdXRcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJFeHBlY3RlZCBcIiArIGRlc2NyaWJlRXhwZWN0ZWQoZXhwZWN0ZWQpICsgXCIgYnV0IFwiICsgZGVzY3JpYmVGb3VuZChmb3VuZCkgKyBcIiBmb3VuZC5cIjtcbiAgICB9O1xuICAgIHJldHVybiBTeW50YXhFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydCB7IFN5bnRheEVycm9yIH07XG5mdW5jdGlvbiBwZWckcGFyc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucyA6IHt9O1xuICAgIHZhciBwZWckRkFJTEVEID0ge307XG4gICAgdmFyIHBlZyRzdGFydFJ1bGVGdW5jdGlvbnMgPSB7IHN0YXJ0OiBwZWckcGFyc2VzdGFydCB9O1xuICAgIHZhciBwZWckc3RhcnRSdWxlRnVuY3Rpb24gPSBwZWckcGFyc2VzdGFydDtcbiAgICB2YXIgcGVnJGMwID0gZnVuY3Rpb24gKHBhcnRzKSB7XG4gICAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcnKTtcbiAgICB9O1xuICAgIHZhciBwZWckYzEgPSBmdW5jdGlvbiAobWVzc2FnZVRleHQpIHtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKHsgdHlwZTogVFlQRS5saXRlcmFsLCB2YWx1ZTogbWVzc2FnZVRleHQgfSwgaW5zZXJ0TG9jYXRpb24oKSk7XG4gICAgfTtcbiAgICB2YXIgcGVnJGMyID0gXCIjXCI7XG4gICAgdmFyIHBlZyRjMyA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCIjXCIsIGZhbHNlKTtcbiAgICB2YXIgcGVnJGM0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oeyB0eXBlOiBUWVBFLnBvdW5kIH0sIGluc2VydExvY2F0aW9uKCkpO1xuICAgIH07XG4gICAgdmFyIHBlZyRjNSA9IHBlZyRvdGhlckV4cGVjdGF0aW9uKFwiYXJndW1lbnRFbGVtZW50XCIpO1xuICAgIHZhciBwZWckYzYgPSBcIntcIjtcbiAgICB2YXIgcGVnJGM3ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIntcIiwgZmFsc2UpO1xuICAgIHZhciBwZWckYzggPSBcIn1cIjtcbiAgICB2YXIgcGVnJGM5ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIn1cIiwgZmFsc2UpO1xuICAgIHZhciBwZWckYzEwID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbih7IHR5cGU6IFRZUEUuYXJndW1lbnQsIHZhbHVlOiB2YWx1ZSB9LCBpbnNlcnRMb2NhdGlvbigpKTtcbiAgICB9O1xuICAgIHZhciBwZWckYzExID0gcGVnJG90aGVyRXhwZWN0YXRpb24oXCJudW1iZXJTa2VsZXRvbklkXCIpO1xuICAgIHZhciBwZWckYzEyID0gL15bJ1xcL3t9XS87XG4gICAgdmFyIHBlZyRjMTMgPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbXCInXCIsIFwiL1wiLCBcIntcIiwgXCJ9XCJdLCBmYWxzZSwgZmFsc2UpO1xuICAgIHZhciBwZWckYzE0ID0gcGVnJGFueUV4cGVjdGF0aW9uKCk7XG4gICAgdmFyIHBlZyRjMTUgPSBwZWckb3RoZXJFeHBlY3RhdGlvbihcIm51bWJlclNrZWxldG9uVG9rZW5PcHRpb25cIik7XG4gICAgdmFyIHBlZyRjMTYgPSBcIi9cIjtcbiAgICB2YXIgcGVnJGMxNyA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCIvXCIsIGZhbHNlKTtcbiAgICB2YXIgcGVnJGMxOCA9IGZ1bmN0aW9uIChvcHRpb24pIHsgcmV0dXJuIG9wdGlvbjsgfTtcbiAgICB2YXIgcGVnJGMxOSA9IHBlZyRvdGhlckV4cGVjdGF0aW9uKFwibnVtYmVyU2tlbGV0b25Ub2tlblwiKTtcbiAgICB2YXIgcGVnJGMyMCA9IGZ1bmN0aW9uIChzdGVtLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB7IHN0ZW06IHN0ZW0sIG9wdGlvbnM6IG9wdGlvbnMgfTtcbiAgICB9O1xuICAgIHZhciBwZWckYzIxID0gZnVuY3Rpb24gKHRva2Vucykge1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oeyB0eXBlOiAwIC8qIG51bWJlciAqLywgdG9rZW5zOiB0b2tlbnMgfSwgaW5zZXJ0TG9jYXRpb24oKSk7XG4gICAgfTtcbiAgICB2YXIgcGVnJGMyMiA9IFwiOjpcIjtcbiAgICB2YXIgcGVnJGMyMyA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCI6OlwiLCBmYWxzZSk7XG4gICAgdmFyIHBlZyRjMjQgPSBmdW5jdGlvbiAoc2tlbGV0b24pIHsgcmV0dXJuIHNrZWxldG9uOyB9O1xuICAgIHZhciBwZWckYzI1ID0gZnVuY3Rpb24gKCkgeyBtZXNzYWdlQ3R4LnB1c2goJ251bWJlckFyZ1N0eWxlJyk7IHJldHVybiB0cnVlOyB9O1xuICAgIHZhciBwZWckYzI2ID0gZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgICAgIG1lc3NhZ2VDdHgucG9wKCk7XG4gICAgICAgIHJldHVybiBzdHlsZS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbiAgICB9O1xuICAgIHZhciBwZWckYzI3ID0gXCIsXCI7XG4gICAgdmFyIHBlZyRjMjggPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiLFwiLCBmYWxzZSk7XG4gICAgdmFyIHBlZyRjMjkgPSBcIm51bWJlclwiO1xuICAgIHZhciBwZWckYzMwID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIm51bWJlclwiLCBmYWxzZSk7XG4gICAgdmFyIHBlZyRjMzEgPSBmdW5jdGlvbiAodmFsdWUsIHR5cGUsIHN0eWxlKSB7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbih7IHR5cGU6IHR5cGUgPT09ICdudW1iZXInID8gVFlQRS5udW1iZXIgOiB0eXBlID09PSAnZGF0ZScgPyBUWVBFLmRhdGUgOiBUWVBFLnRpbWUsIHN0eWxlOiBzdHlsZSAmJiBzdHlsZVsyXSwgdmFsdWU6IHZhbHVlIH0sIGluc2VydExvY2F0aW9uKCkpO1xuICAgIH07XG4gICAgdmFyIHBlZyRjMzIgPSBcIidcIjtcbiAgICB2YXIgcGVnJGMzMyA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCInXCIsIGZhbHNlKTtcbiAgICB2YXIgcGVnJGMzNCA9IC9eW14nXS87XG4gICAgdmFyIHBlZyRjMzUgPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbXCInXCJdLCB0cnVlLCBmYWxzZSk7XG4gICAgdmFyIHBlZyRjMzYgPSAvXlteYS16QS1aJ3t9XS87XG4gICAgdmFyIHBlZyRjMzcgPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbW1wiYVwiLCBcInpcIl0sIFtcIkFcIiwgXCJaXCJdLCBcIidcIiwgXCJ7XCIsIFwifVwiXSwgdHJ1ZSwgZmFsc2UpO1xuICAgIHZhciBwZWckYzM4ID0gL15bYS16QS1aXS87XG4gICAgdmFyIHBlZyRjMzkgPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbW1wiYVwiLCBcInpcIl0sIFtcIkFcIiwgXCJaXCJdXSwgZmFsc2UsIGZhbHNlKTtcbiAgICB2YXIgcGVnJGM0MCA9IGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbih7IHR5cGU6IDEgLyogZGF0ZVRpbWUgKi8sIHBhdHRlcm46IHBhdHRlcm4gfSwgaW5zZXJ0TG9jYXRpb24oKSk7XG4gICAgfTtcbiAgICB2YXIgcGVnJGM0MSA9IGZ1bmN0aW9uICgpIHsgbWVzc2FnZUN0eC5wdXNoKCdkYXRlT3JUaW1lQXJnU3R5bGUnKTsgcmV0dXJuIHRydWU7IH07XG4gICAgdmFyIHBlZyRjNDIgPSBcImRhdGVcIjtcbiAgICB2YXIgcGVnJGM0MyA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJkYXRlXCIsIGZhbHNlKTtcbiAgICB2YXIgcGVnJGM0NCA9IFwidGltZVwiO1xuICAgIHZhciBwZWckYzQ1ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcInRpbWVcIiwgZmFsc2UpO1xuICAgIHZhciBwZWckYzQ2ID0gXCJwbHVyYWxcIjtcbiAgICB2YXIgcGVnJGM0NyA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJwbHVyYWxcIiwgZmFsc2UpO1xuICAgIHZhciBwZWckYzQ4ID0gXCJzZWxlY3RvcmRpbmFsXCI7XG4gICAgdmFyIHBlZyRjNDkgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwic2VsZWN0b3JkaW5hbFwiLCBmYWxzZSk7XG4gICAgdmFyIHBlZyRjNTAgPSBcIm9mZnNldDpcIjtcbiAgICB2YXIgcGVnJGM1MSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJvZmZzZXQ6XCIsIGZhbHNlKTtcbiAgICB2YXIgcGVnJGM1MiA9IGZ1bmN0aW9uICh2YWx1ZSwgcGx1cmFsVHlwZSwgb2Zmc2V0LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbih7IHR5cGU6IFRZUEUucGx1cmFsLCBwbHVyYWxUeXBlOiBwbHVyYWxUeXBlID09PSAncGx1cmFsJyA/ICdjYXJkaW5hbCcgOiAnb3JkaW5hbCcsIHZhbHVlOiB2YWx1ZSwgb2Zmc2V0OiBvZmZzZXQgPyBvZmZzZXRbMl0gOiAwLCBvcHRpb25zOiBvcHRpb25zLnJlZHVjZShmdW5jdGlvbiAoYWxsLCBfYSkge1xuICAgICAgICAgICAgICAgIHZhciBpZCA9IF9hLmlkLCB2YWx1ZSA9IF9hLnZhbHVlLCBvcHRpb25Mb2NhdGlvbiA9IF9hLmxvY2F0aW9uO1xuICAgICAgICAgICAgICAgIGlmIChpZCBpbiBhbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IoXCJEdXBsaWNhdGUgb3B0aW9uIFxcXCJcIiArIGlkICsgXCJcXFwiIGluIHBsdXJhbCBlbGVtZW50OiBcXFwiXCIgKyB0ZXh0KCkgKyBcIlxcXCJcIiwgbG9jYXRpb24oKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFsbFtpZF0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IG9wdGlvbkxvY2F0aW9uXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWxsO1xuICAgICAgICAgICAgfSwge30pIH0sIGluc2VydExvY2F0aW9uKCkpO1xuICAgIH07XG4gICAgdmFyIHBlZyRjNTMgPSBcInNlbGVjdFwiO1xuICAgIHZhciBwZWckYzU0ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcInNlbGVjdFwiLCBmYWxzZSk7XG4gICAgdmFyIHBlZyRjNTUgPSBmdW5jdGlvbiAodmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKHsgdHlwZTogVFlQRS5zZWxlY3QsIHZhbHVlOiB2YWx1ZSwgb3B0aW9uczogb3B0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKGFsbCwgX2EpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSBfYS5pZCwgdmFsdWUgPSBfYS52YWx1ZSwgb3B0aW9uTG9jYXRpb24gPSBfYS5sb2NhdGlvbjtcbiAgICAgICAgICAgICAgICBpZiAoaWQgaW4gYWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yKFwiRHVwbGljYXRlIG9wdGlvbiBcXFwiXCIgKyBpZCArIFwiXFxcIiBpbiBzZWxlY3QgZWxlbWVudDogXFxcIlwiICsgdGV4dCgpICsgXCJcXFwiXCIsIGxvY2F0aW9uKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhbGxbaWRdID0ge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBvcHRpb25Mb2NhdGlvblxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFsbDtcbiAgICAgICAgICAgIH0sIHt9KSB9LCBpbnNlcnRMb2NhdGlvbigpKTtcbiAgICB9O1xuICAgIHZhciBwZWckYzU2ID0gXCI9XCI7XG4gICAgdmFyIHBlZyRjNTcgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiPVwiLCBmYWxzZSk7XG4gICAgdmFyIHBlZyRjNTggPSBmdW5jdGlvbiAoaWQpIHsgbWVzc2FnZUN0eC5wdXNoKCdzZWxlY3QnKTsgcmV0dXJuIHRydWU7IH07XG4gICAgdmFyIHBlZyRjNTkgPSBmdW5jdGlvbiAoaWQsIHZhbHVlKSB7XG4gICAgICAgIG1lc3NhZ2VDdHgucG9wKCk7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbih7IGlkOiBpZCxcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSB9LCBpbnNlcnRMb2NhdGlvbigpKTtcbiAgICB9O1xuICAgIHZhciBwZWckYzYwID0gZnVuY3Rpb24gKGlkKSB7IG1lc3NhZ2VDdHgucHVzaCgncGx1cmFsJyk7IHJldHVybiB0cnVlOyB9O1xuICAgIHZhciBwZWckYzYxID0gZnVuY3Rpb24gKGlkLCB2YWx1ZSkge1xuICAgICAgICBtZXNzYWdlQ3R4LnBvcCgpO1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oeyBpZDogaWQsXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUgfSwgaW5zZXJ0TG9jYXRpb24oKSk7XG4gICAgfTtcbiAgICB2YXIgcGVnJGM2MiA9IHBlZyRvdGhlckV4cGVjdGF0aW9uKFwid2hpdGVzcGFjZVwiKTtcbiAgICB2YXIgcGVnJGM2MyA9IC9eW1xcdC1cXHIgXFx4ODVcXHhBMFxcdTE2ODBcXHUyMDAwLVxcdTIwMEFcXHUyMDI4XFx1MjAyOVxcdTIwMkZcXHUyMDVGXFx1MzAwMF0vO1xuICAgIHZhciBwZWckYzY0ID0gcGVnJGNsYXNzRXhwZWN0YXRpb24oW1tcIlxcdFwiLCBcIlxcclwiXSwgXCIgXCIsIFwiXFx4ODVcIiwgXCJcXHhBMFwiLCBcIlxcdTE2ODBcIiwgW1wiXFx1MjAwMFwiLCBcIlxcdTIwMEFcIl0sIFwiXFx1MjAyOFwiLCBcIlxcdTIwMjlcIiwgXCJcXHUyMDJGXCIsIFwiXFx1MjA1RlwiLCBcIlxcdTMwMDBcIl0sIGZhbHNlLCBmYWxzZSk7XG4gICAgdmFyIHBlZyRjNjUgPSBwZWckb3RoZXJFeHBlY3RhdGlvbihcInN5bnRheCBwYXR0ZXJuXCIpO1xuICAgIHZhciBwZWckYzY2ID0gL15bIS1cXC86LUBbLVxcXmB7LX5cXHhBMS1cXHhBN1xceEE5XFx4QUJcXHhBQ1xceEFFXFx4QjBcXHhCMVxceEI2XFx4QkJcXHhCRlxceEQ3XFx4RjdcXHUyMDEwLVxcdTIwMjdcXHUyMDMwLVxcdTIwM0VcXHUyMDQxLVxcdTIwNTNcXHUyMDU1LVxcdTIwNUVcXHUyMTkwLVxcdTI0NUZcXHUyNTAwLVxcdTI3NzVcXHUyNzk0LVxcdTJCRkZcXHUyRTAwLVxcdTJFN0ZcXHUzMDAxLVxcdTMwMDNcXHUzMDA4LVxcdTMwMjBcXHUzMDMwXFx1RkQzRVxcdUZEM0ZcXHVGRTQ1XFx1RkU0Nl0vO1xuICAgIHZhciBwZWckYzY3ID0gcGVnJGNsYXNzRXhwZWN0YXRpb24oW1tcIiFcIiwgXCIvXCJdLCBbXCI6XCIsIFwiQFwiXSwgW1wiW1wiLCBcIl5cIl0sIFwiYFwiLCBbXCJ7XCIsIFwiflwiXSwgW1wiXFx4QTFcIiwgXCJcXHhBN1wiXSwgXCJcXHhBOVwiLCBcIlxceEFCXCIsIFwiXFx4QUNcIiwgXCJcXHhBRVwiLCBcIlxceEIwXCIsIFwiXFx4QjFcIiwgXCJcXHhCNlwiLCBcIlxceEJCXCIsIFwiXFx4QkZcIiwgXCJcXHhEN1wiLCBcIlxceEY3XCIsIFtcIlxcdTIwMTBcIiwgXCJcXHUyMDI3XCJdLCBbXCJcXHUyMDMwXCIsIFwiXFx1MjAzRVwiXSwgW1wiXFx1MjA0MVwiLCBcIlxcdTIwNTNcIl0sIFtcIlxcdTIwNTVcIiwgXCJcXHUyMDVFXCJdLCBbXCJcXHUyMTkwXCIsIFwiXFx1MjQ1RlwiXSwgW1wiXFx1MjUwMFwiLCBcIlxcdTI3NzVcIl0sIFtcIlxcdTI3OTRcIiwgXCJcXHUyQkZGXCJdLCBbXCJcXHUyRTAwXCIsIFwiXFx1MkU3RlwiXSwgW1wiXFx1MzAwMVwiLCBcIlxcdTMwMDNcIl0sIFtcIlxcdTMwMDhcIiwgXCJcXHUzMDIwXCJdLCBcIlxcdTMwMzBcIiwgXCJcXHVGRDNFXCIsIFwiXFx1RkQzRlwiLCBcIlxcdUZFNDVcIiwgXCJcXHVGRTQ2XCJdLCBmYWxzZSwgZmFsc2UpO1xuICAgIHZhciBwZWckYzY4ID0gcGVnJG90aGVyRXhwZWN0YXRpb24oXCJvcHRpb25hbCB3aGl0ZXNwYWNlXCIpO1xuICAgIHZhciBwZWckYzY5ID0gcGVnJG90aGVyRXhwZWN0YXRpb24oXCJudW1iZXJcIik7XG4gICAgdmFyIHBlZyRjNzAgPSBcIi1cIjtcbiAgICB2YXIgcGVnJGM3MSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCItXCIsIGZhbHNlKTtcbiAgICB2YXIgcGVnJGM3MiA9IGZ1bmN0aW9uIChuZWdhdGl2ZSwgbnVtKSB7XG4gICAgICAgIHJldHVybiBudW1cbiAgICAgICAgICAgID8gbmVnYXRpdmVcbiAgICAgICAgICAgICAgICA/IC1udW1cbiAgICAgICAgICAgICAgICA6IG51bVxuICAgICAgICAgICAgOiAwO1xuICAgIH07XG4gICAgdmFyIHBlZyRjNzMgPSBwZWckb3RoZXJFeHBlY3RhdGlvbihcImFwb3N0cm9waGVcIik7XG4gICAgdmFyIHBlZyRjNzQgPSBwZWckb3RoZXJFeHBlY3RhdGlvbihcImRvdWJsZSBhcG9zdHJvcGhlc1wiKTtcbiAgICB2YXIgcGVnJGM3NSA9IFwiJydcIjtcbiAgICB2YXIgcGVnJGM3NiA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCInJ1wiLCBmYWxzZSk7XG4gICAgdmFyIHBlZyRjNzcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBcIidcIjsgfTtcbiAgICB2YXIgcGVnJGM3OCA9IGZ1bmN0aW9uIChlc2NhcGVkQ2hhciwgcXVvdGVkQ2hhcnMpIHtcbiAgICAgICAgcmV0dXJuIGVzY2FwZWRDaGFyICsgcXVvdGVkQ2hhcnMucmVwbGFjZShcIicnXCIsIFwiJ1wiKTtcbiAgICB9O1xuICAgIHZhciBwZWckYzc5ID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuICh4ICE9PSAneycgJiZcbiAgICAgICAgICAgICEoaXNJblBsdXJhbE9wdGlvbigpICYmIHggPT09ICcjJykgJiZcbiAgICAgICAgICAgICEoaXNOZXN0ZWRNZXNzYWdlVGV4dCgpICYmIHggPT09ICd9JykpO1xuICAgIH07XG4gICAgdmFyIHBlZyRjODAgPSBcIlxcblwiO1xuICAgIHZhciBwZWckYzgxID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIlxcblwiLCBmYWxzZSk7XG4gICAgdmFyIHBlZyRjODIgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4geCA9PT0gJ3snIHx8IHggPT09ICd9JyB8fCAoaXNJblBsdXJhbE9wdGlvbigpICYmIHggPT09ICcjJyk7XG4gICAgfTtcbiAgICB2YXIgcGVnJGM4MyA9IHBlZyRvdGhlckV4cGVjdGF0aW9uKFwiYXJnTmFtZU9yTnVtYmVyXCIpO1xuICAgIHZhciBwZWckYzg0ID0gcGVnJG90aGVyRXhwZWN0YXRpb24oXCJhcmdOdW1iZXJcIik7XG4gICAgdmFyIHBlZyRjODUgPSBcIjBcIjtcbiAgICB2YXIgcGVnJGM4NiA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCIwXCIsIGZhbHNlKTtcbiAgICB2YXIgcGVnJGM4NyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDA7IH07XG4gICAgdmFyIHBlZyRjODggPSAvXlsxLTldLztcbiAgICB2YXIgcGVnJGM4OSA9IHBlZyRjbGFzc0V4cGVjdGF0aW9uKFtbXCIxXCIsIFwiOVwiXV0sIGZhbHNlLCBmYWxzZSk7XG4gICAgdmFyIHBlZyRjOTAgPSAvXlswLTldLztcbiAgICB2YXIgcGVnJGM5MSA9IHBlZyRjbGFzc0V4cGVjdGF0aW9uKFtbXCIwXCIsIFwiOVwiXV0sIGZhbHNlLCBmYWxzZSk7XG4gICAgdmFyIHBlZyRjOTIgPSBmdW5jdGlvbiAoZGlnaXRzKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludChkaWdpdHMuam9pbignJyksIDEwKTtcbiAgICB9O1xuICAgIHZhciBwZWckYzkzID0gcGVnJG90aGVyRXhwZWN0YXRpb24oXCJhcmdOYW1lXCIpO1xuICAgIHZhciBwZWckY3VyclBvcyA9IDA7XG4gICAgdmFyIHBlZyRzYXZlZFBvcyA9IDA7XG4gICAgdmFyIHBlZyRwb3NEZXRhaWxzQ2FjaGUgPSBbeyBsaW5lOiAxLCBjb2x1bW46IDEgfV07XG4gICAgdmFyIHBlZyRtYXhGYWlsUG9zID0gMDtcbiAgICB2YXIgcGVnJG1heEZhaWxFeHBlY3RlZCA9IFtdO1xuICAgIHZhciBwZWckc2lsZW50RmFpbHMgPSAwO1xuICAgIHZhciBwZWckcmVzdWx0O1xuICAgIGlmIChvcHRpb25zLnN0YXJ0UnVsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICghKG9wdGlvbnMuc3RhcnRSdWxlIGluIHBlZyRzdGFydFJ1bGVGdW5jdGlvbnMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBzdGFydCBwYXJzaW5nIGZyb20gcnVsZSBcXFwiXCIgKyBvcHRpb25zLnN0YXJ0UnVsZSArIFwiXFxcIi5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcGVnJHN0YXJ0UnVsZUZ1bmN0aW9uID0gcGVnJHN0YXJ0UnVsZUZ1bmN0aW9uc1tvcHRpb25zLnN0YXJ0UnVsZV07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRleHQoKSB7XG4gICAgICAgIHJldHVybiBpbnB1dC5zdWJzdHJpbmcocGVnJHNhdmVkUG9zLCBwZWckY3VyclBvcyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxvY2F0aW9uKCkge1xuICAgICAgICByZXR1cm4gcGVnJGNvbXB1dGVMb2NhdGlvbihwZWckc2F2ZWRQb3MsIHBlZyRjdXJyUG9zKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZXhwZWN0ZWQoZGVzY3JpcHRpb24sIGxvY2F0aW9uMSkge1xuICAgICAgICBsb2NhdGlvbjEgPSBsb2NhdGlvbjEgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBsb2NhdGlvbjFcbiAgICAgICAgICAgIDogcGVnJGNvbXB1dGVMb2NhdGlvbihwZWckc2F2ZWRQb3MsIHBlZyRjdXJyUG9zKTtcbiAgICAgICAgdGhyb3cgcGVnJGJ1aWxkU3RydWN0dXJlZEVycm9yKFtwZWckb3RoZXJFeHBlY3RhdGlvbihkZXNjcmlwdGlvbildLCBpbnB1dC5zdWJzdHJpbmcocGVnJHNhdmVkUG9zLCBwZWckY3VyclBvcyksIGxvY2F0aW9uMSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVycm9yKG1lc3NhZ2UsIGxvY2F0aW9uMSkge1xuICAgICAgICBsb2NhdGlvbjEgPSBsb2NhdGlvbjEgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBsb2NhdGlvbjFcbiAgICAgICAgICAgIDogcGVnJGNvbXB1dGVMb2NhdGlvbihwZWckc2F2ZWRQb3MsIHBlZyRjdXJyUG9zKTtcbiAgICAgICAgdGhyb3cgcGVnJGJ1aWxkU2ltcGxlRXJyb3IobWVzc2FnZSwgbG9jYXRpb24xKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbih0ZXh0MSwgaWdub3JlQ2FzZSkge1xuICAgICAgICByZXR1cm4geyB0eXBlOiBcImxpdGVyYWxcIiwgdGV4dDogdGV4dDEsIGlnbm9yZUNhc2U6IGlnbm9yZUNhc2UgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJGNsYXNzRXhwZWN0YXRpb24ocGFydHMsIGludmVydGVkLCBpZ25vcmVDYXNlKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6IFwiY2xhc3NcIiwgcGFydHM6IHBhcnRzLCBpbnZlcnRlZDogaW52ZXJ0ZWQsIGlnbm9yZUNhc2U6IGlnbm9yZUNhc2UgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJGFueUV4cGVjdGF0aW9uKCkge1xuICAgICAgICByZXR1cm4geyB0eXBlOiBcImFueVwiIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRlbmRFeHBlY3RhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJlbmRcIiB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckb3RoZXJFeHBlY3RhdGlvbihkZXNjcmlwdGlvbikge1xuICAgICAgICByZXR1cm4geyB0eXBlOiBcIm90aGVyXCIsIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbiB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckY29tcHV0ZVBvc0RldGFpbHMocG9zKSB7XG4gICAgICAgIHZhciBkZXRhaWxzID0gcGVnJHBvc0RldGFpbHNDYWNoZVtwb3NdO1xuICAgICAgICB2YXIgcDtcbiAgICAgICAgaWYgKGRldGFpbHMpIHtcbiAgICAgICAgICAgIHJldHVybiBkZXRhaWxzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcCA9IHBvcyAtIDE7XG4gICAgICAgICAgICB3aGlsZSAoIXBlZyRwb3NEZXRhaWxzQ2FjaGVbcF0pIHtcbiAgICAgICAgICAgICAgICBwLS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZXRhaWxzID0gcGVnJHBvc0RldGFpbHNDYWNoZVtwXTtcbiAgICAgICAgICAgIGRldGFpbHMgPSB7XG4gICAgICAgICAgICAgICAgbGluZTogZGV0YWlscy5saW5lLFxuICAgICAgICAgICAgICAgIGNvbHVtbjogZGV0YWlscy5jb2x1bW5cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aGlsZSAocCA8IHBvcykge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHApID09PSAxMCkge1xuICAgICAgICAgICAgICAgICAgICBkZXRhaWxzLmxpbmUrKztcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlscy5jb2x1bW4gPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlscy5jb2x1bW4rKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGVnJHBvc0RldGFpbHNDYWNoZVtwb3NdID0gZGV0YWlscztcbiAgICAgICAgICAgIHJldHVybiBkZXRhaWxzO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRjb21wdXRlTG9jYXRpb24oc3RhcnRQb3MsIGVuZFBvcykge1xuICAgICAgICB2YXIgc3RhcnRQb3NEZXRhaWxzID0gcGVnJGNvbXB1dGVQb3NEZXRhaWxzKHN0YXJ0UG9zKTtcbiAgICAgICAgdmFyIGVuZFBvc0RldGFpbHMgPSBwZWckY29tcHV0ZVBvc0RldGFpbHMoZW5kUG9zKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBzdGFydFBvcyxcbiAgICAgICAgICAgICAgICBsaW5lOiBzdGFydFBvc0RldGFpbHMubGluZSxcbiAgICAgICAgICAgICAgICBjb2x1bW46IHN0YXJ0UG9zRGV0YWlscy5jb2x1bW5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbmQ6IHtcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IGVuZFBvcyxcbiAgICAgICAgICAgICAgICBsaW5lOiBlbmRQb3NEZXRhaWxzLmxpbmUsXG4gICAgICAgICAgICAgICAgY29sdW1uOiBlbmRQb3NEZXRhaWxzLmNvbHVtblxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckZmFpbChleHBlY3RlZDEpIHtcbiAgICAgICAgaWYgKHBlZyRjdXJyUG9zIDwgcGVnJG1heEZhaWxQb3MpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGVnJGN1cnJQb3MgPiBwZWckbWF4RmFpbFBvcykge1xuICAgICAgICAgICAgcGVnJG1heEZhaWxQb3MgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgIHBlZyRtYXhGYWlsRXhwZWN0ZWQgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBwZWckbWF4RmFpbEV4cGVjdGVkLnB1c2goZXhwZWN0ZWQxKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJGJ1aWxkU2ltcGxlRXJyb3IobWVzc2FnZSwgbG9jYXRpb24xKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3ludGF4RXJyb3IobWVzc2FnZSwgW10sIFwiXCIsIGxvY2F0aW9uMSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRidWlsZFN0cnVjdHVyZWRFcnJvcihleHBlY3RlZDEsIGZvdW5kLCBsb2NhdGlvbjEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTeW50YXhFcnJvcihTeW50YXhFcnJvci5idWlsZE1lc3NhZ2UoZXhwZWN0ZWQxLCBmb3VuZCksIGV4cGVjdGVkMSwgZm91bmQsIGxvY2F0aW9uMSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZXN0YXJ0KCkge1xuICAgICAgICB2YXIgczA7XG4gICAgICAgIHMwID0gcGVnJHBhcnNlbWVzc2FnZSgpO1xuICAgICAgICByZXR1cm4gczA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZW1lc3NhZ2UoKSB7XG4gICAgICAgIHZhciBzMCwgczE7XG4gICAgICAgIHMwID0gW107XG4gICAgICAgIHMxID0gcGVnJHBhcnNlbWVzc2FnZUVsZW1lbnQoKTtcbiAgICAgICAgd2hpbGUgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMC5wdXNoKHMxKTtcbiAgICAgICAgICAgIHMxID0gcGVnJHBhcnNlbWVzc2FnZUVsZW1lbnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gczA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZW1lc3NhZ2VFbGVtZW50KCkge1xuICAgICAgICB2YXIgczA7XG4gICAgICAgIHMwID0gcGVnJHBhcnNlbGl0ZXJhbEVsZW1lbnQoKTtcbiAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRwYXJzZWFyZ3VtZW50RWxlbWVudCgpO1xuICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckcGFyc2VzaW1wbGVGb3JtYXRFbGVtZW50KCk7XG4gICAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJHBhcnNlcGx1cmFsRWxlbWVudCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJHBhcnNlc2VsZWN0RWxlbWVudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckcGFyc2Vwb3VuZEVsZW1lbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gczA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZW1lc3NhZ2VUZXh0KCkge1xuICAgICAgICB2YXIgczAsIHMxLCBzMjtcbiAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgczEgPSBbXTtcbiAgICAgICAgczIgPSBwZWckcGFyc2Vkb3VibGVBcG9zdHJvcGhlcygpO1xuICAgICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gcGVnJHBhcnNlcXVvdGVkU3RyaW5nKCk7XG4gICAgICAgICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMiA9IHBlZyRwYXJzZXVucXVvdGVkU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICB3aGlsZSAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMS5wdXNoKHMyKTtcbiAgICAgICAgICAgICAgICBzMiA9IHBlZyRwYXJzZWRvdWJsZUFwb3N0cm9waGVzKCk7XG4gICAgICAgICAgICAgICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHMyID0gcGVnJHBhcnNlcXVvdGVkU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzMiA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgczIgPSBwZWckcGFyc2V1bnF1b3RlZFN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICBzMSA9IHBlZyRjMChzMSk7XG4gICAgICAgIH1cbiAgICAgICAgczAgPSBzMTtcbiAgICAgICAgcmV0dXJuIHMwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VsaXRlcmFsRWxlbWVudCgpIHtcbiAgICAgICAgdmFyIHMwLCBzMTtcbiAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgczEgPSBwZWckcGFyc2VtZXNzYWdlVGV4dCgpO1xuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzEoczEpO1xuICAgICAgICB9XG4gICAgICAgIHMwID0gczE7XG4gICAgICAgIHJldHVybiBzMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlcG91bmRFbGVtZW50KCkge1xuICAgICAgICB2YXIgczAsIHMxO1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDM1KSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRjMjtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGMzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzQoKTtcbiAgICAgICAgfVxuICAgICAgICBzMCA9IHMxO1xuICAgICAgICByZXR1cm4gczA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZWFyZ3VtZW50RWxlbWVudCgpIHtcbiAgICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczU7XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDEyMykge1xuICAgICAgICAgICAgczEgPSBwZWckYzY7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjNyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJHBhcnNlYXJnTmFtZU9yTnVtYmVyKCk7XG4gICAgICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNlXygpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMTI1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczUgPSBwZWckYzg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjOSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzEwKHMzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlbnVtYmVyU2tlbGV0b25JZCgpIHtcbiAgICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNDtcbiAgICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHMxID0gW107XG4gICAgICAgIHMyID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICBzNCA9IHBlZyRwYXJzZXdoaXRlU3BhY2UoKTtcbiAgICAgICAgaWYgKHM0ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBpZiAocGVnJGMxMi50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICAgICAgczQgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzEzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgIGlmIChzNCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgaWYgKGlucHV0Lmxlbmd0aCA+IHBlZyRjdXJyUG9zKSB7XG4gICAgICAgICAgICAgICAgczQgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzE0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMyA9IFtzMywgczRdO1xuICAgICAgICAgICAgICAgIHMyID0gczM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczI7XG4gICAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICB3aGlsZSAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMS5wdXNoKHMyKTtcbiAgICAgICAgICAgICAgICBzMiA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICAgICAgICAgICAgczQgPSBwZWckcGFyc2V3aGl0ZVNwYWNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKHM0ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwZWckYzEyLnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHM0ID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGMxMyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgICAgICAgICAgaWYgKHM0ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHMzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0Lmxlbmd0aCA+IHBlZyRjdXJyUG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzNCA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMTQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgczMgPSBbczMsIHM0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMyID0gczM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgICAgICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczAgPSBpbnB1dC5zdWJzdHJpbmcoczAsIHBlZyRjdXJyUG9zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH1cbiAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMTEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlbnVtYmVyU2tlbGV0b25Ub2tlbk9wdGlvbigpIHtcbiAgICAgICAgdmFyIHMwLCBzMSwgczI7XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ3KSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRjMTY7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMTcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckcGFyc2VudW1iZXJTa2VsZXRvbklkKCk7XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMTgoczIpO1xuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMTUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlbnVtYmVyU2tlbGV0b25Ub2tlbigpIHtcbiAgICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNDtcbiAgICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHMxID0gcGVnJHBhcnNlXygpO1xuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gcGVnJHBhcnNlbnVtYmVyU2tlbGV0b25JZCgpO1xuICAgICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczMgPSBbXTtcbiAgICAgICAgICAgICAgICBzNCA9IHBlZyRwYXJzZW51bWJlclNrZWxldG9uVG9rZW5PcHRpb24oKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgczMucHVzaChzNCk7XG4gICAgICAgICAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNlbnVtYmVyU2tlbGV0b25Ub2tlbk9wdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGMyMChzMiwgczMpO1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGMxOSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHMwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VudW1iZXJTa2VsZXRvbigpIHtcbiAgICAgICAgdmFyIHMwLCBzMSwgczI7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHMxID0gW107XG4gICAgICAgIHMyID0gcGVnJHBhcnNlbnVtYmVyU2tlbGV0b25Ub2tlbigpO1xuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHdoaWxlIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMxLnB1c2goczIpO1xuICAgICAgICAgICAgICAgIHMyID0gcGVnJHBhcnNlbnVtYmVyU2tlbGV0b25Ub2tlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICBzMSA9IHBlZyRjMjEoczEpO1xuICAgICAgICB9XG4gICAgICAgIHMwID0gczE7XG4gICAgICAgIHJldHVybiBzMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlbnVtYmVyQXJnU3R5bGUoKSB7XG4gICAgICAgIHZhciBzMCwgczEsIHMyO1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGMyMikge1xuICAgICAgICAgICAgczEgPSBwZWckYzIyO1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzIzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gcGVnJHBhcnNlbnVtYmVyU2tlbGV0b24oKTtcbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJGMyNChzMik7XG4gICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgIHMxID0gcGVnJGMyNSgpO1xuICAgICAgICAgICAgaWYgKHMxKSB7XG4gICAgICAgICAgICAgICAgczEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMiA9IHBlZyRwYXJzZW1lc3NhZ2VUZXh0KCk7XG4gICAgICAgICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMjYoczIpO1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlbnVtYmVyRm9ybWF0RWxlbWVudCgpIHtcbiAgICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2LCBzNywgczgsIHM5LCBzMTAsIHMxMSwgczEyO1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDEyMykge1xuICAgICAgICAgICAgczEgPSBwZWckYzY7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjNyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJHBhcnNlYXJnTmFtZU9yTnVtYmVyKCk7XG4gICAgICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNlXygpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNSA9IHBlZyRjMjc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMjgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM2ID0gcGVnJHBhcnNlXygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA2KSA9PT0gcGVnJGMyOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczcgPSBwZWckYzI5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gNjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzMwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM4ID0gcGVnJHBhcnNlXygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHM4ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMCA9IHBlZyRjMjc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzI4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczEwICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMSA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEyID0gcGVnJHBhcnNlbnVtYmVyQXJnU3R5bGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTAgPSBbczEwLCBzMTEsIHMxMl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczkgPSBzMTA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHM5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM5ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzOSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM5ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHM5ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM5ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHM5ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMCA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAxMjUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTEgPSBwZWckYzg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMzEoczMsIHM3LCBzOSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gczA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZWRhdGVUaW1lU2tlbGV0b25MaXRlcmFsKCkge1xuICAgICAgICB2YXIgczAsIHMxLCBzMiwgczM7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMzkpIHtcbiAgICAgICAgICAgIHMxID0gcGVnJGMzMjtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGMzMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IFtdO1xuICAgICAgICAgICAgczMgPSBwZWckcGFyc2Vkb3VibGVBcG9zdHJvcGhlcygpO1xuICAgICAgICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBlZyRjMzQudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgICAgICAgICAgICBzMyA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMzUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICAgICAgICAgICAgICBzMyA9IHBlZyRwYXJzZWRvdWJsZUFwb3N0cm9waGVzKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRjMzQudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMzID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGMzNSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAzOSkge1xuICAgICAgICAgICAgICAgICAgICBzMyA9IHBlZyRjMzI7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMzMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzMSA9IFtzMSwgczIsIHMzXTtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMCA9IFtdO1xuICAgICAgICAgICAgczEgPSBwZWckcGFyc2Vkb3VibGVBcG9zdHJvcGhlcygpO1xuICAgICAgICAgICAgaWYgKHMxID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBlZyRjMzYudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgICAgICAgICAgICBzMSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMzcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHMwLnB1c2goczEpO1xuICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRwYXJzZWRvdWJsZUFwb3N0cm9waGVzKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRjMzYudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGMzNyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlZGF0ZVRpbWVTa2VsZXRvblBhdHRlcm4oKSB7XG4gICAgICAgIHZhciBzMCwgczE7XG4gICAgICAgIHMwID0gW107XG4gICAgICAgIGlmIChwZWckYzM4LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgIHMxID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGMzOSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICB3aGlsZSAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMC5wdXNoKHMxKTtcbiAgICAgICAgICAgICAgICBpZiAocGVnJGMzOC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICAgICAgICAgIHMxID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGMzOSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHMwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VkYXRlVGltZVNrZWxldG9uKCkge1xuICAgICAgICB2YXIgczAsIHMxLCBzMiwgczM7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHMxID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHMyID0gW107XG4gICAgICAgIHMzID0gcGVnJHBhcnNlZGF0ZVRpbWVTa2VsZXRvbkxpdGVyYWwoKTtcbiAgICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRwYXJzZWRhdGVUaW1lU2tlbGV0b25QYXR0ZXJuKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgICAgICAgICBzMyA9IHBlZyRwYXJzZWRhdGVUaW1lU2tlbGV0b25MaXRlcmFsKCk7XG4gICAgICAgICAgICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHMzID0gcGVnJHBhcnNlZGF0ZVRpbWVTa2VsZXRvblBhdHRlcm4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMSA9IGlucHV0LnN1YnN0cmluZyhzMSwgcGVnJGN1cnJQb3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgczEgPSBzMjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzQwKHMxKTtcbiAgICAgICAgfVxuICAgICAgICBzMCA9IHMxO1xuICAgICAgICByZXR1cm4gczA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZWRhdGVPclRpbWVBcmdTdHlsZSgpIHtcbiAgICAgICAgdmFyIHMwLCBzMSwgczI7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzIyKSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRjMjI7XG4gICAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMjMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckcGFyc2VkYXRlVGltZVNrZWxldG9uKCk7XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMjQoczIpO1xuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICBzMSA9IHBlZyRjNDEoKTtcbiAgICAgICAgICAgIGlmIChzMSkge1xuICAgICAgICAgICAgICAgIHMxID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczIgPSBwZWckcGFyc2VtZXNzYWdlVGV4dCgpO1xuICAgICAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzI2KHMyKTtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gczA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZWRhdGVPclRpbWVGb3JtYXRFbGVtZW50KCkge1xuICAgICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczYsIHM3LCBzOCwgczksIHMxMCwgczExLCBzMTI7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMTIzKSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRjNjtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGM3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gcGVnJHBhcnNlXygpO1xuICAgICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckcGFyc2VhcmdOYW1lT3JOdW1iZXIoKTtcbiAgICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgczQgPSBwZWckcGFyc2VfKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0NCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM1ID0gcGVnJGMyNztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGMyOCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczYgPSBwZWckcGFyc2VfKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDQpID09PSBwZWckYzQyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNyA9IHBlZyRjNDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSA0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczcgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjNDMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzNyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgNCkgPT09IHBlZyRjNDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNyA9IHBlZyRjNDQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gNDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjNDUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM4ID0gcGVnJHBhcnNlXygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHM4ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMCA9IHBlZyRjMjc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzI4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczEwICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMSA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEyID0gcGVnJHBhcnNlZGF0ZU9yVGltZUFyZ1N0eWxlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczEyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEwID0gW3MxMCwgczExLCBzMTJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM5ID0gczEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzOTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzOSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHM5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHM5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzOSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzOSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzOSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzOSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTAgPSBwZWckcGFyc2VfKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTAgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMTI1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczExID0gcGVnJGM4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGM5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczExICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzMxKHMzLCBzNywgczkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHMwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VzaW1wbGVGb3JtYXRFbGVtZW50KCkge1xuICAgICAgICB2YXIgczA7XG4gICAgICAgIHMwID0gcGVnJHBhcnNlbnVtYmVyRm9ybWF0RWxlbWVudCgpO1xuICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMwID0gcGVnJHBhcnNlZGF0ZU9yVGltZUZvcm1hdEVsZW1lbnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gczA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZXBsdXJhbEVsZW1lbnQoKSB7XG4gICAgICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNiwgczcsIHM4LCBzOSwgczEwLCBzMTEsIHMxMiwgczEzLCBzMTQsIHMxNTtcbiAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAxMjMpIHtcbiAgICAgICAgICAgIHMxID0gcGVnJGM2O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckcGFyc2VfKCk7XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMyA9IHBlZyRwYXJzZWFyZ05hbWVPck51bWJlcigpO1xuICAgICAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzNCA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczUgPSBwZWckYzI3O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzI4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNiA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgNikgPT09IHBlZyRjNDYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJGM0NjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGM0Nyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHM3ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAxMykgPT09IHBlZyRjNDgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNyA9IHBlZyRjNDg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMTM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzQ5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzOCA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzOCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckYzI3O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzI4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEwID0gcGVnJHBhcnNlXygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczEwICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTEgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDcpID09PSBwZWckYzUwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEyID0gcGVnJGM1MDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSA3O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjNTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTMgPSBwZWckcGFyc2VfKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTQgPSBwZWckcGFyc2VudW1iZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEyID0gW3MxMiwgczEzLCBzMTRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczExID0gczEyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMxMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczExID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMxMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczExICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEyID0gcGVnJHBhcnNlXygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxNCA9IHBlZyRwYXJzZXBsdXJhbE9wdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczE0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoczE0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEzLnB1c2goczE0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTQgPSBwZWckcGFyc2VwbHVyYWxPcHRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczE0ID0gcGVnJHBhcnNlXygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMTI1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxNSA9IHBlZyRjODtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjOSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzUyKHMzLCBzNywgczExLCBzMTMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gczA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZXNlbGVjdEVsZW1lbnQoKSB7XG4gICAgICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNiwgczcsIHM4LCBzOSwgczEwLCBzMTEsIHMxMiwgczEzO1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDEyMykge1xuICAgICAgICAgICAgczEgPSBwZWckYzY7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjNyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJHBhcnNlYXJnTmFtZU9yTnVtYmVyKCk7XG4gICAgICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNlXygpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNSA9IHBlZyRjMjc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMjgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM2ID0gcGVnJHBhcnNlXygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA2KSA9PT0gcGVnJGM1Mykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczcgPSBwZWckYzUzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gNjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzU0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM4ID0gcGVnJHBhcnNlXygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHM4ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0NCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzOSA9IHBlZyRjMjc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzOSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMjgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzOSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTAgPSBwZWckcGFyc2VfKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTAgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEyID0gcGVnJHBhcnNlc2VsZWN0T3B0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczEyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHMxMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTEucHVzaChzMTIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTIgPSBwZWckcGFyc2VzZWxlY3RPcHRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMiA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczEyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMTI1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTMgPSBwZWckYzg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzU1KHMzLCBzMTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHMwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VwbHVyYWxSdWxlU2VsZWN0VmFsdWUoKSB7XG4gICAgICAgIHZhciBzMCwgczEsIHMyLCBzMztcbiAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgczEgPSBwZWckY3VyclBvcztcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA2MSkge1xuICAgICAgICAgICAgczIgPSBwZWckYzU2O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzU3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMzID0gcGVnJHBhcnNlbnVtYmVyKCk7XG4gICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMiA9IFtzMiwgczNdO1xuICAgICAgICAgICAgICAgIHMxID0gczI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMCA9IGlucHV0LnN1YnN0cmluZyhzMCwgcGVnJGN1cnJQb3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMwID0gcGVnJHBhcnNlYXJnTmFtZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlc2VsZWN0T3B0aW9uKCkge1xuICAgICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczYsIHM3O1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzMSA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRwYXJzZWFyZ05hbWUoKTtcbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJHBhcnNlXygpO1xuICAgICAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDEyMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgczQgPSBwZWckYzY7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjNyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHM1ID0gcGVnJGM1OChzMik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoczUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM2ID0gcGVnJHBhcnNlbWVzc2FnZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDEyNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczcgPSBwZWckYzg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczcgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjOSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGM1OShzMiwgczYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHMwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VwbHVyYWxPcHRpb24oKSB7XG4gICAgICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNiwgczc7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHMxID0gcGVnJHBhcnNlXygpO1xuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gcGVnJHBhcnNlcGx1cmFsUnVsZVNlbGVjdFZhbHVlKCk7XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMyA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAxMjMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHM0ID0gcGVnJGM2O1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHM0ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBzNSA9IHBlZyRjNjAoczIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHM1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNiA9IHBlZyRwYXJzZW1lc3NhZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAxMjUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJGM4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjNjEoczIsIHM2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJHBhcnNld2hpdGVTcGFjZSgpIHtcbiAgICAgICAgdmFyIHMwLCBzMTtcbiAgICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICAgIGlmIChwZWckYzYzLnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgIHMwID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGM2NCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjNjIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlcGF0dGVyblN5bnRheCgpIHtcbiAgICAgICAgdmFyIHMwLCBzMTtcbiAgICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICAgIGlmIChwZWckYzY2LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgIHMwID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGM2Nyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjNjUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlXygpIHtcbiAgICAgICAgdmFyIHMwLCBzMSwgczI7XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzMSA9IFtdO1xuICAgICAgICBzMiA9IHBlZyRwYXJzZXdoaXRlU3BhY2UoKTtcbiAgICAgICAgd2hpbGUgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMS5wdXNoKHMyKTtcbiAgICAgICAgICAgIHMyID0gcGVnJHBhcnNld2hpdGVTcGFjZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczAgPSBpbnB1dC5zdWJzdHJpbmcoczAsIHBlZyRjdXJyUG9zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH1cbiAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjNjgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlbnVtYmVyKCkge1xuICAgICAgICB2YXIgczAsIHMxLCBzMjtcbiAgICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDUpIHtcbiAgICAgICAgICAgIHMxID0gcGVnJGM3MDtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGM3MSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRwYXJzZWFyZ051bWJlcigpO1xuICAgICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckYzcyKHMxLCBzMik7XG4gICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGM2OSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHMwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VhcG9zdHJvcGhlKCkge1xuICAgICAgICB2YXIgczAsIHMxO1xuICAgICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAzOSkge1xuICAgICAgICAgICAgczAgPSBwZWckYzMyO1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzMzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGM3Myk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHMwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckcGFyc2Vkb3VibGVBcG9zdHJvcGhlcygpIHtcbiAgICAgICAgdmFyIHMwLCBzMTtcbiAgICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzc1KSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRjNzU7XG4gICAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjNzYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICBzMSA9IHBlZyRjNzcoKTtcbiAgICAgICAgfVxuICAgICAgICBzMCA9IHMxO1xuICAgICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGM3NCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHMwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VxdW90ZWRTdHJpbmcoKSB7XG4gICAgICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQsIHM1O1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDM5KSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRjMzI7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMzMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckcGFyc2Vlc2NhcGVkQ2hhcigpO1xuICAgICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgICAgICBzNCA9IFtdO1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzc1KSB7XG4gICAgICAgICAgICAgICAgICAgIHM1ID0gcGVnJGM3NTtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGM3Nik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHM1ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwZWckYzM0LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHM1ID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGMzNSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgd2hpbGUgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHM0LnB1c2goczUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGM3NSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgczUgPSBwZWckYzc1O1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzc2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoczUgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckYzM0LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzNSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMzUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgczMgPSBpbnB1dC5zdWJzdHJpbmcoczMsIHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDM5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzNCA9IHBlZyRjMzI7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMzMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzNCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgczQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjNzgoczIsIHMzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJHBhcnNldW5xdW90ZWRTdHJpbmcoKSB7XG4gICAgICAgIHZhciBzMCwgczEsIHMyLCBzMztcbiAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgczEgPSBwZWckY3VyclBvcztcbiAgICAgICAgaWYgKGlucHV0Lmxlbmd0aCA+IHBlZyRjdXJyUG9zKSB7XG4gICAgICAgICAgICBzMiA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjMTQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICBzMyA9IHBlZyRjNzkoczIpO1xuICAgICAgICAgICAgaWYgKHMzKSB7XG4gICAgICAgICAgICAgICAgczMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMiA9IFtzMiwgczNdO1xuICAgICAgICAgICAgICAgIHMxID0gczI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDEwKSB7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckYzgwO1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzgxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMCA9IGlucHV0LnN1YnN0cmluZyhzMCwgcGVnJGN1cnJQb3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gczA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZWVzY2FwZWRDaGFyKCkge1xuICAgICAgICB2YXIgczAsIHMxLCBzMiwgczM7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHMxID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIGlmIChpbnB1dC5sZW5ndGggPiBwZWckY3VyclBvcykge1xuICAgICAgICAgICAgczIgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzE0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgczMgPSBwZWckYzgyKHMyKTtcbiAgICAgICAgICAgIGlmIChzMykge1xuICAgICAgICAgICAgICAgIHMzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczIgPSBbczIsIHMzXTtcbiAgICAgICAgICAgICAgICBzMSA9IHMyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczAgPSBpbnB1dC5zdWJzdHJpbmcoczAsIHBlZyRjdXJyUG9zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHMwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VhcmdOYW1lT3JOdW1iZXIoKSB7XG4gICAgICAgIHZhciBzMCwgczE7XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzMSA9IHBlZyRwYXJzZWFyZ051bWJlcigpO1xuICAgICAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMxID0gcGVnJHBhcnNlYXJnTmFtZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczAgPSBpbnB1dC5zdWJzdHJpbmcoczAsIHBlZyRjdXJyUG9zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH1cbiAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjODMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlYXJnTnVtYmVyKCkge1xuICAgICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0O1xuICAgICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0OCkge1xuICAgICAgICAgICAgczEgPSBwZWckYzg1O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzg2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzg3KCk7XG4gICAgICAgIH1cbiAgICAgICAgczAgPSBzMTtcbiAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgczEgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgIGlmIChwZWckYzg4LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgICAgICBzMiA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjODkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMzID0gW107XG4gICAgICAgICAgICAgICAgaWYgKHBlZyRjOTAudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgICAgICAgICAgICBzNCA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRjOTEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdoaWxlIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzMy5wdXNoKHM0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRjOTAudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgczQgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHM0ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzkxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgczIgPSBbczIsIHMzXTtcbiAgICAgICAgICAgICAgICAgICAgczEgPSBzMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJGM5MihzMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICB9XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzg0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gczA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZWFyZ05hbWUoKSB7XG4gICAgICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQ7XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzMSA9IFtdO1xuICAgICAgICBzMiA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgICAgczQgPSBwZWckcGFyc2V3aGl0ZVNwYWNlKCk7XG4gICAgICAgIGlmIChzNCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczQgPSBwZWckcGFyc2VwYXR0ZXJuU3ludGF4KCk7XG4gICAgICAgIH1cbiAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgIGlmIChzNCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgaWYgKGlucHV0Lmxlbmd0aCA+IHBlZyRjdXJyUG9zKSB7XG4gICAgICAgICAgICAgICAgczQgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBwZWckZmFpbChwZWckYzE0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMyA9IFtzMywgczRdO1xuICAgICAgICAgICAgICAgIHMyID0gczM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczI7XG4gICAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICB3aGlsZSAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMS5wdXNoKHMyKTtcbiAgICAgICAgICAgICAgICBzMiA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICAgICAgICAgICAgczQgPSBwZWckcGFyc2V3aGl0ZVNwYWNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKHM0ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNlcGF0dGVyblN5bnRheCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgICAgICAgICAgICBpZiAoczQgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgczMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQubGVuZ3RoID4gcGVnJGN1cnJQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHM0ID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGMxNCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMyA9IFtzMywgczRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgczIgPSBzMztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczI7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczI7XG4gICAgICAgICAgICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMCA9IGlucHV0LnN1YnN0cmluZyhzMCwgcGVnJGN1cnJQb3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfVxuICAgICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcGVnJGZhaWwocGVnJGM5Myk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHMwO1xuICAgIH1cbiAgICB2YXIgbWVzc2FnZUN0eCA9IFsncm9vdCddO1xuICAgIGZ1bmN0aW9uIGlzTmVzdGVkTWVzc2FnZVRleHQoKSB7XG4gICAgICAgIHJldHVybiBtZXNzYWdlQ3R4Lmxlbmd0aCA+IDE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzSW5QbHVyYWxPcHRpb24oKSB7XG4gICAgICAgIHJldHVybiBtZXNzYWdlQ3R4W21lc3NhZ2VDdHgubGVuZ3RoIC0gMV0gPT09ICdwbHVyYWwnO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpbnNlcnRMb2NhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5jYXB0dXJlTG9jYXRpb24gPyB7XG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24oKVxuICAgICAgICB9IDoge307XG4gICAgfVxuICAgIHBlZyRyZXN1bHQgPSBwZWckc3RhcnRSdWxlRnVuY3Rpb24oKTtcbiAgICBpZiAocGVnJHJlc3VsdCAhPT0gcGVnJEZBSUxFRCAmJiBwZWckY3VyclBvcyA9PT0gaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBwZWckcmVzdWx0O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKHBlZyRyZXN1bHQgIT09IHBlZyRGQUlMRUQgJiYgcGVnJGN1cnJQb3MgPCBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHBlZyRmYWlsKHBlZyRlbmRFeHBlY3RhdGlvbigpKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBwZWckYnVpbGRTdHJ1Y3R1cmVkRXJyb3IocGVnJG1heEZhaWxFeHBlY3RlZCwgcGVnJG1heEZhaWxQb3MgPCBpbnB1dC5sZW5ndGggPyBpbnB1dC5jaGFyQXQocGVnJG1heEZhaWxQb3MpIDogbnVsbCwgcGVnJG1heEZhaWxQb3MgPCBpbnB1dC5sZW5ndGhcbiAgICAgICAgICAgID8gcGVnJGNvbXB1dGVMb2NhdGlvbihwZWckbWF4RmFpbFBvcywgcGVnJG1heEZhaWxQb3MgKyAxKVxuICAgICAgICAgICAgOiBwZWckY29tcHV0ZUxvY2F0aW9uKHBlZyRtYXhGYWlsUG9zLCBwZWckbWF4RmFpbFBvcykpO1xuICAgIH1cbn1cbmV4cG9ydCB2YXIgcGVnUGFyc2UgPSBwZWckcGFyc2U7XG4iLCJ2YXIgX19zcHJlYWRBcnJheXMgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXlzKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xuICAgIHJldHVybiByO1xufTtcbmltcG9ydCB7IGlzUGx1cmFsRWxlbWVudCwgaXNMaXRlcmFsRWxlbWVudCwgaXNTZWxlY3RFbGVtZW50LCB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgcGVnUGFyc2UgfSBmcm9tICcuL3BhcnNlcic7XG52YXIgUExVUkFMX0hBU0hUQUdfUkVHRVggPSAvKF58W15cXFxcXSkjL2c7XG4vKipcbiAqIFdoZXRoZXIgdG8gY29udmVydCBgI2AgaW4gcGx1cmFsIHJ1bGUgb3B0aW9uc1xuICogdG8gYHt2YXIsIG51bWJlcn1gXG4gKiBAcGFyYW0gZWwgQVNUIEVsZW1lbnRcbiAqIEBwYXJhbSBwbHVyYWxTdGFjayBjdXJyZW50IHBsdXJhbCBzdGFja1xuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplSGFzaHRhZ0luUGx1cmFsKGVscykge1xuICAgIGVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAvLyBJZiB3ZSdyZSBlbmNvdW50ZXJpbmcgYSBwbHVyYWwgZWxcbiAgICAgICAgaWYgKCFpc1BsdXJhbEVsZW1lbnQoZWwpICYmICFpc1NlbGVjdEVsZW1lbnQoZWwpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gR28gZG93biB0aGUgb3B0aW9ucyBhbmQgc2VhcmNoIGZvciAjIGluIGFueSBsaXRlcmFsIGVsZW1lbnRcbiAgICAgICAgT2JqZWN0LmtleXMoZWwub3B0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHZhciBvcHQgPSBlbC5vcHRpb25zW2lkXTtcbiAgICAgICAgICAgIC8vIElmIHdlIGdvdCBhIG1hdGNoLCB3ZSBoYXZlIHRvIHNwbGl0IHRoaXNcbiAgICAgICAgICAgIC8vIGFuZCBpbmplY3QgYSBOdW1iZXJFbGVtZW50IGluIHRoZSBtaWRkbGVcbiAgICAgICAgICAgIHZhciBtYXRjaGluZ0xpdGVyYWxFbEluZGV4ID0gLTE7XG4gICAgICAgICAgICB2YXIgbGl0ZXJhbEVsID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcHQudmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZWxfMSA9IG9wdC52YWx1ZVtpXTtcbiAgICAgICAgICAgICAgICBpZiAoaXNMaXRlcmFsRWxlbWVudChlbF8xKSAmJiBQTFVSQUxfSEFTSFRBR19SRUdFWC50ZXN0KGVsXzEudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoaW5nTGl0ZXJhbEVsSW5kZXggPSBpO1xuICAgICAgICAgICAgICAgICAgICBsaXRlcmFsRWwgPSBlbF8xO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobGl0ZXJhbEVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gbGl0ZXJhbEVsLnZhbHVlLnJlcGxhY2UoUExVUkFMX0hBU0hUQUdfUkVHRVgsIFwiJDF7XCIgKyBlbC52YWx1ZSArIFwiLCBudW1iZXJ9XCIpO1xuICAgICAgICAgICAgICAgIHZhciBuZXdFbHMgPSBwZWdQYXJzZShuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgKF9hID0gb3B0LnZhbHVlKS5zcGxpY2UuYXBwbHkoX2EsIF9fc3ByZWFkQXJyYXlzKFttYXRjaGluZ0xpdGVyYWxFbEluZGV4LCAxXSwgbmV3RWxzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub3JtYWxpemVIYXNodGFnSW5QbHVyYWwob3B0LnZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4iLCJpbXBvcnQgeyBwZWdQYXJzZSB9IGZyb20gJy4vcGFyc2VyJztcbmltcG9ydCB7IG5vcm1hbGl6ZUhhc2h0YWdJblBsdXJhbCB9IGZyb20gJy4vbm9ybWFsaXplJztcbmV4cG9ydCAqIGZyb20gJy4vdHlwZXMnO1xuZXhwb3J0ICogZnJvbSAnLi9wYXJzZXInO1xuZXhwb3J0ICogZnJvbSAnLi9za2VsZXRvbic7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2UoaW5wdXQsIG9wdHMpIHtcbiAgICB2YXIgZWxzID0gcGVnUGFyc2UoaW5wdXQsIG9wdHMpO1xuICAgIGlmICghb3B0cyB8fCBvcHRzLm5vcm1hbGl6ZUhhc2h0YWdJblBsdXJhbCAhPT0gZmFsc2UpIHtcbiAgICAgICAgbm9ybWFsaXplSGFzaHRhZ0luUGx1cmFsKGVscyk7XG4gICAgfVxuICAgIHJldHVybiBlbHM7XG59XG4iLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuLyoqXG4gKiBodHRwczovL3VuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGVcbiAqIENyZWRpdDogaHR0cHM6Ly9naXRodWIuY29tL2NhcmlkeS9pbnRsLWRhdGV0aW1lZm9ybWF0LXBhdHRlcm4vYmxvYi9tYXN0ZXIvaW5kZXguanNcbiAqIHdpdGggc29tZSB0d2Vha3NcbiAqL1xudmFyIERBVEVfVElNRV9SRUdFWCA9IC8oPzpbRWVjXXsxLDZ9fEd7MSw1fXxbUXFdezEsNX18KD86W3lZdXJdK3xVezEsNX0pfFtNTF17MSw1fXxkezEsMn18RHsxLDN9fEZ7MX18W2FiQl17MSw1fXxbaGtIS117MSwyfXx3ezEsMn18V3sxfXxtezEsMn18c3sxLDJ9fFt6Wk92VnhYXXsxLDR9KSg/PShbXiddKidbXiddKicpKlteJ10qJCkvZztcbi8qKlxuICogUGFyc2UgRGF0ZSB0aW1lIHNrZWxldG9uIGludG8gSW50bC5EYXRlVGltZUZvcm1hdE9wdGlvbnNcbiAqIFJlZjogaHR0cHM6Ly91bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlXG4gKiBAcHVibGljXG4gKiBAcGFyYW0gc2tlbGV0b24gc2tlbGV0b24gc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZURhdGVUaW1lU2tlbGV0b24oc2tlbGV0b24pIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgc2tlbGV0b24ucmVwbGFjZShEQVRFX1RJTUVfUkVHRVgsIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICB2YXIgbGVuID0gbWF0Y2gubGVuZ3RoO1xuICAgICAgICBzd2l0Y2ggKG1hdGNoWzBdKSB7XG4gICAgICAgICAgICAvLyBFcmFcbiAgICAgICAgICAgIGNhc2UgJ0cnOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5lcmEgPSBsZW4gPT09IDQgPyAnbG9uZycgOiBsZW4gPT09IDUgPyAnbmFycm93JyA6ICdzaG9ydCc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAvLyBZZWFyXG4gICAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgICAgICByZXN1bHQueWVhciA9IGxlbiA9PT0gMiA/ICcyLWRpZ2l0JyA6ICdudW1lcmljJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ1knOlxuICAgICAgICAgICAgY2FzZSAndSc6XG4gICAgICAgICAgICBjYXNlICdVJzpcbiAgICAgICAgICAgIGNhc2UgJ3InOlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdgWS91L1UvcmAgKHllYXIpIHBhdHRlcm5zIGFyZSBub3Qgc3VwcG9ydGVkLCB1c2UgYHlgIGluc3RlYWQnKTtcbiAgICAgICAgICAgIC8vIFF1YXJ0ZXJcbiAgICAgICAgICAgIGNhc2UgJ3EnOlxuICAgICAgICAgICAgY2FzZSAnUSc6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2BxL1FgIChxdWFydGVyKSBwYXR0ZXJucyBhcmUgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgICAgICAgLy8gTW9udGhcbiAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgY2FzZSAnTCc6XG4gICAgICAgICAgICAgICAgcmVzdWx0Lm1vbnRoID0gWydudW1lcmljJywgJzItZGlnaXQnLCAnc2hvcnQnLCAnbG9uZycsICduYXJyb3cnXVtsZW4gLSAxXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8vIFdlZWtcbiAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2B3L1dgICh3ZWVrKSBwYXR0ZXJucyBhcmUgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgcmVzdWx0LmRheSA9IFsnbnVtZXJpYycsICcyLWRpZ2l0J11bbGVuIC0gMV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgIGNhc2UgJ0YnOlxuICAgICAgICAgICAgY2FzZSAnZyc6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2BEL0YvZ2AgKGRheSkgcGF0dGVybnMgYXJlIG5vdCBzdXBwb3J0ZWQsIHVzZSBgZGAgaW5zdGVhZCcpO1xuICAgICAgICAgICAgLy8gV2Vla2RheVxuICAgICAgICAgICAgY2FzZSAnRSc6XG4gICAgICAgICAgICAgICAgcmVzdWx0LndlZWtkYXkgPSBsZW4gPT09IDQgPyAnc2hvcnQnIDogbGVuID09PSA1ID8gJ25hcnJvdycgOiAnc2hvcnQnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZSc6XG4gICAgICAgICAgICAgICAgaWYgKGxlbiA8IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2BlLi5lZWVgICh3ZWVrZGF5KSBwYXR0ZXJucyBhcmUgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXN1bHQud2Vla2RheSA9IFsnc2hvcnQnLCAnbG9uZycsICduYXJyb3cnLCAnc2hvcnQnXVtsZW4gLSA0XTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2MnOlxuICAgICAgICAgICAgICAgIGlmIChsZW4gPCA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdgYy4uY2NjYCAod2Vla2RheSkgcGF0dGVybnMgYXJlIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0LndlZWtkYXkgPSBbJ3Nob3J0JywgJ2xvbmcnLCAnbmFycm93JywgJ3Nob3J0J11bbGVuIC0gNF07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAvLyBQZXJpb2RcbiAgICAgICAgICAgIGNhc2UgJ2EnOiAvLyBBTSwgUE1cbiAgICAgICAgICAgICAgICByZXN1bHQuaG91cjEyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2InOiAvLyBhbSwgcG0sIG5vb24sIG1pZG5pZ2h0XG4gICAgICAgICAgICBjYXNlICdCJzogLy8gZmxleGlibGUgZGF5IHBlcmlvZHNcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignYGIvQmAgKHBlcmlvZCkgcGF0dGVybnMgYXJlIG5vdCBzdXBwb3J0ZWQsIHVzZSBgYWAgaW5zdGVhZCcpO1xuICAgICAgICAgICAgLy8gSG91clxuICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgcmVzdWx0LmhvdXJDeWNsZSA9ICdoMTInO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5ob3VyID0gWydudW1lcmljJywgJzItZGlnaXQnXVtsZW4gLSAxXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0gnOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5ob3VyQ3ljbGUgPSAnaDIzJztcbiAgICAgICAgICAgICAgICByZXN1bHQuaG91ciA9IFsnbnVtZXJpYycsICcyLWRpZ2l0J11bbGVuIC0gMV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdLJzpcbiAgICAgICAgICAgICAgICByZXN1bHQuaG91ckN5Y2xlID0gJ2gxMSc7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmhvdXIgPSBbJ251bWVyaWMnLCAnMi1kaWdpdCddW2xlbiAtIDFdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnayc6XG4gICAgICAgICAgICAgICAgcmVzdWx0LmhvdXJDeWNsZSA9ICdoMjQnO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5ob3VyID0gWydudW1lcmljJywgJzItZGlnaXQnXVtsZW4gLSAxXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2onOlxuICAgICAgICAgICAgY2FzZSAnSic6XG4gICAgICAgICAgICBjYXNlICdDJzpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignYGovSi9DYCAoaG91cikgcGF0dGVybnMgYXJlIG5vdCBzdXBwb3J0ZWQsIHVzZSBgaC9IL0sva2AgaW5zdGVhZCcpO1xuICAgICAgICAgICAgLy8gTWludXRlXG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXN1bHQubWludXRlID0gWydudW1lcmljJywgJzItZGlnaXQnXVtsZW4gLSAxXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8vIFNlY29uZFxuICAgICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICAgICAgcmVzdWx0LnNlY29uZCA9IFsnbnVtZXJpYycsICcyLWRpZ2l0J11bbGVuIC0gMV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdTJzpcbiAgICAgICAgICAgIGNhc2UgJ0EnOlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdgUy9BYCAoc2Vjb25kKSBwYXR0ZW5ycyBhcmUgbm90IHN1cHBvcnRlZCwgdXNlIGBzYCBpbnN0ZWFkJyk7XG4gICAgICAgICAgICAvLyBab25lXG4gICAgICAgICAgICBjYXNlICd6JzogLy8gMS4uMywgNDogc3BlY2lmaWMgbm9uLWxvY2F0aW9uIGZvcm1hdFxuICAgICAgICAgICAgICAgIHJlc3VsdC50aW1lWm9uZU5hbWUgPSBsZW4gPCA0ID8gJ3Nob3J0JyA6ICdsb25nJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ1onOiAvLyAxLi4zLCA0LCA1OiBUaGUgSVNPODYwMSB2YXJpb3MgZm9ybWF0c1xuICAgICAgICAgICAgY2FzZSAnTyc6IC8vIDEsIDQ6IG1pbGlzZWNvbmRzIGluIGRheSBzaG9ydCwgbG9uZ1xuICAgICAgICAgICAgY2FzZSAndic6IC8vIDEsIDQ6IGdlbmVyaWMgbm9uLWxvY2F0aW9uIGZvcm1hdFxuICAgICAgICAgICAgY2FzZSAnVic6IC8vIDEsIDIsIDMsIDQ6IHRpbWUgem9uZSBJRCBvciBjaXR5XG4gICAgICAgICAgICBjYXNlICdYJzogLy8gMSwgMiwgMywgNDogVGhlIElTTzg2MDEgdmFyaW9zIGZvcm1hdHNcbiAgICAgICAgICAgIGNhc2UgJ3gnOiAvLyAxLCAyLCAzLCA0OiBUaGUgSVNPODYwMSB2YXJpb3MgZm9ybWF0c1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdgWi9PL3YvVi9YL3hgICh0aW1lWm9uZSkgcGF0dGVucnMgYXJlIG5vdCBzdXBwb3J0ZWQsIHVzZSBgemAgaW5zdGVhZCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gaWN1VW5pdFRvRWNtYSh1bml0KSB7XG4gICAgcmV0dXJuIHVuaXQucmVwbGFjZSgvXiguKj8pLS8sICcnKTtcbn1cbnZhciBGUkFDVElPTl9QUkVDSVNJT05fUkVHRVggPSAvXlxcLig/OigwKykoXFwrfCMrKT8pPyQvZztcbnZhciBTSUdOSUZJQ0FOVF9QUkVDSVNJT05fUkVHRVggPSAvXihAKyk/KFxcK3wjKyk/JC9nO1xuZnVuY3Rpb24gcGFyc2VTaWduaWZpY2FudFByZWNpc2lvbihzdHIpIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgc3RyLnJlcGxhY2UoU0lHTklGSUNBTlRfUFJFQ0lTSU9OX1JFR0VYLCBmdW5jdGlvbiAoXywgZzEsIGcyKSB7XG4gICAgICAgIC8vIEBAQCBjYXNlXG4gICAgICAgIGlmICh0eXBlb2YgZzIgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXN1bHQubWluaW11bVNpZ25pZmljYW50RGlnaXRzID0gZzEubGVuZ3RoO1xuICAgICAgICAgICAgcmVzdWx0Lm1heGltdW1TaWduaWZpY2FudERpZ2l0cyA9IGcxLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICAvLyBAQEArIGNhc2VcbiAgICAgICAgZWxzZSBpZiAoZzIgPT09ICcrJykge1xuICAgICAgICAgICAgcmVzdWx0Lm1pbmltdW1TaWduaWZpY2FudERpZ2l0cyA9IGcxLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICAvLyAuIyMjIGNhc2VcbiAgICAgICAgZWxzZSBpZiAoZzFbMF0gPT09ICcjJykge1xuICAgICAgICAgICAgcmVzdWx0Lm1heGltdW1TaWduaWZpY2FudERpZ2l0cyA9IGcxLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICAvLyAuQEAjIyBvciAuQEBAIGNhc2VcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQubWluaW11bVNpZ25pZmljYW50RGlnaXRzID0gZzEubGVuZ3RoO1xuICAgICAgICAgICAgcmVzdWx0Lm1heGltdW1TaWduaWZpY2FudERpZ2l0cyA9XG4gICAgICAgICAgICAgICAgZzEubGVuZ3RoICsgKHR5cGVvZiBnMiA9PT0gJ3N0cmluZycgPyBnMi5sZW5ndGggOiAwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHBhcnNlU2lnbihzdHIpIHtcbiAgICBzd2l0Y2ggKHN0cikge1xuICAgICAgICBjYXNlICdzaWduLWF1dG8nOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzaWduRGlzcGxheTogJ2F1dG8nLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSAnc2lnbi1hY2NvdW50aW5nJzpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY3VycmVuY3lTaWduOiAnYWNjb3VudGluZycsXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlICdzaWduLWFsd2F5cyc6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNpZ25EaXNwbGF5OiAnYWx3YXlzJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgJ3NpZ24tYWNjb3VudGluZy1hbHdheXMnOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzaWduRGlzcGxheTogJ2Fsd2F5cycsXG4gICAgICAgICAgICAgICAgY3VycmVuY3lTaWduOiAnYWNjb3VudGluZycsXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlICdzaWduLWV4Y2VwdC16ZXJvJzpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc2lnbkRpc3BsYXk6ICdleGNlcHRaZXJvJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgJ3NpZ24tYWNjb3VudGluZy1leGNlcHQtemVybyc6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNpZ25EaXNwbGF5OiAnZXhjZXB0WmVybycsXG4gICAgICAgICAgICAgICAgY3VycmVuY3lTaWduOiAnYWNjb3VudGluZycsXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlICdzaWduLW5ldmVyJzpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc2lnbkRpc3BsYXk6ICduZXZlcicsXG4gICAgICAgICAgICB9O1xuICAgIH1cbn1cbmZ1bmN0aW9uIHBhcnNlTm90YXRpb25PcHRpb25zKG9wdCkge1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgc2lnbk9wdHMgPSBwYXJzZVNpZ24ob3B0KTtcbiAgICBpZiAoc2lnbk9wdHMpIHtcbiAgICAgICAgcmV0dXJuIHNpZ25PcHRzO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vdW5pY29kZS1vcmcvaWN1L2Jsb2IvbWFzdGVyL2RvY3MvdXNlcmd1aWRlL2Zvcm1hdF9wYXJzZS9udW1iZXJzL3NrZWxldG9ucy5tZCNza2VsZXRvbi1zdGVtcy1hbmQtb3B0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gY29udmVydE51bWJlclNrZWxldG9uVG9OdW1iZXJGb3JtYXRPcHRpb25zKHRva2Vucykge1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIHRva2Vuc18xID0gdG9rZW5zOyBfaSA8IHRva2Vuc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgdG9rZW4gPSB0b2tlbnNfMVtfaV07XG4gICAgICAgIHN3aXRjaCAodG9rZW4uc3RlbSkge1xuICAgICAgICAgICAgY2FzZSAncGVyY2VudCc6XG4gICAgICAgICAgICAgICAgcmVzdWx0LnN0eWxlID0gJ3BlcmNlbnQnO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgY2FzZSAnY3VycmVuY3knOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5zdHlsZSA9ICdjdXJyZW5jeSc7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmN1cnJlbmN5ID0gdG9rZW4ub3B0aW9uc1swXTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGNhc2UgJ2dyb3VwLW9mZic6XG4gICAgICAgICAgICAgICAgcmVzdWx0LnVzZUdyb3VwaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBjYXNlICdwcmVjaXNpb24taW50ZWdlcic6XG4gICAgICAgICAgICAgICAgcmVzdWx0Lm1heGltdW1GcmFjdGlvbkRpZ2l0cyA9IDA7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBjYXNlICdtZWFzdXJlLXVuaXQnOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5zdHlsZSA9ICd1bml0JztcbiAgICAgICAgICAgICAgICByZXN1bHQudW5pdCA9IGljdVVuaXRUb0VjbWEodG9rZW4ub3B0aW9uc1swXSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBjYXNlICdjb21wYWN0LXNob3J0JzpcbiAgICAgICAgICAgICAgICByZXN1bHQubm90YXRpb24gPSAnY29tcGFjdCc7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmNvbXBhY3REaXNwbGF5ID0gJ3Nob3J0JztcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGNhc2UgJ2NvbXBhY3QtbG9uZyc6XG4gICAgICAgICAgICAgICAgcmVzdWx0Lm5vdGF0aW9uID0gJ2NvbXBhY3QnO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5jb21wYWN0RGlzcGxheSA9ICdsb25nJztcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGNhc2UgJ3NjaWVudGlmaWMnOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKHt9LCByZXN1bHQpLCB7IG5vdGF0aW9uOiAnc2NpZW50aWZpYycgfSksIHRva2VuLm9wdGlvbnMucmVkdWNlKGZ1bmN0aW9uIChhbGwsIG9wdCkgeyByZXR1cm4gKF9fYXNzaWduKF9fYXNzaWduKHt9LCBhbGwpLCBwYXJzZU5vdGF0aW9uT3B0aW9ucyhvcHQpKSk7IH0sIHt9KSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBjYXNlICdlbmdpbmVlcmluZyc6XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oe30sIHJlc3VsdCksIHsgbm90YXRpb246ICdlbmdpbmVlcmluZycgfSksIHRva2VuLm9wdGlvbnMucmVkdWNlKGZ1bmN0aW9uIChhbGwsIG9wdCkgeyByZXR1cm4gKF9fYXNzaWduKF9fYXNzaWduKHt9LCBhbGwpLCBwYXJzZU5vdGF0aW9uT3B0aW9ucyhvcHQpKSk7IH0sIHt9KSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBjYXNlICdub3RhdGlvbi1zaW1wbGUnOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5ub3RhdGlvbiA9ICdzdGFuZGFyZCc7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdW5pY29kZS1vcmcvaWN1L2Jsb2IvbWFzdGVyL2ljdTRjL3NvdXJjZS9pMThuL3VuaWNvZGUvdW51bWJlcmZvcm1hdHRlci5oXG4gICAgICAgICAgICBjYXNlICd1bml0LXdpZHRoLW5hcnJvdyc6XG4gICAgICAgICAgICAgICAgcmVzdWx0LmN1cnJlbmN5RGlzcGxheSA9ICduYXJyb3dTeW1ib2wnO1xuICAgICAgICAgICAgICAgIHJlc3VsdC51bml0RGlzcGxheSA9ICduYXJyb3cnO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgY2FzZSAndW5pdC13aWR0aC1zaG9ydCc6XG4gICAgICAgICAgICAgICAgcmVzdWx0LmN1cnJlbmN5RGlzcGxheSA9ICdjb2RlJztcbiAgICAgICAgICAgICAgICByZXN1bHQudW5pdERpc3BsYXkgPSAnc2hvcnQnO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgY2FzZSAndW5pdC13aWR0aC1mdWxsLW5hbWUnOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5jdXJyZW5jeURpc3BsYXkgPSAnbmFtZSc7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnVuaXREaXNwbGF5ID0gJ2xvbmcnO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgY2FzZSAndW5pdC13aWR0aC1pc28tY29kZSc6XG4gICAgICAgICAgICAgICAgcmVzdWx0LmN1cnJlbmN5RGlzcGxheSA9ICdzeW1ib2wnO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFByZWNpc2lvblxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdW5pY29kZS1vcmcvaWN1L2Jsb2IvbWFzdGVyL2RvY3MvdXNlcmd1aWRlL2Zvcm1hdF9wYXJzZS9udW1iZXJzL3NrZWxldG9ucy5tZCNmcmFjdGlvbi1wcmVjaXNpb25cbiAgICAgICAgaWYgKEZSQUNUSU9OX1BSRUNJU0lPTl9SRUdFWC50ZXN0KHRva2VuLnN0ZW0pKSB7XG4gICAgICAgICAgICBpZiAodG9rZW4ub3B0aW9ucy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ZyYWN0aW9uLXByZWNpc2lvbiBzdGVtcyBvbmx5IGFjY2VwdCBhIHNpbmdsZSBvcHRpb25hbCBvcHRpb24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRva2VuLnN0ZW0ucmVwbGFjZShGUkFDVElPTl9QUkVDSVNJT05fUkVHRVgsIGZ1bmN0aW9uIChtYXRjaCwgZzEsIGcyKSB7XG4gICAgICAgICAgICAgICAgLy8gcHJlY2lzaW9uLWludGVnZXIgY2FzZVxuICAgICAgICAgICAgICAgIGlmIChtYXRjaCA9PT0gJy4nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5tYXhpbXVtRnJhY3Rpb25EaWdpdHMgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyAuMDAwKyBjYXNlXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZzIgPT09ICcrJykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQubWluaW11bUZyYWN0aW9uRGlnaXRzID0gZzIubGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyAuIyMjIGNhc2VcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChnMVswXSA9PT0gJyMnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5tYXhpbXVtRnJhY3Rpb25EaWdpdHMgPSBnMS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIC4wMCMjIG9yIC4wMDAgY2FzZVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQubWluaW11bUZyYWN0aW9uRGlnaXRzID0gZzEubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQubWF4aW11bUZyYWN0aW9uRGlnaXRzID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGcxLmxlbmd0aCArICh0eXBlb2YgZzIgPT09ICdzdHJpbmcnID8gZzIubGVuZ3RoIDogMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHRva2VuLm9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHJlc3VsdCksIHBhcnNlU2lnbmlmaWNhbnRQcmVjaXNpb24odG9rZW4ub3B0aW9uc1swXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFNJR05JRklDQU5UX1BSRUNJU0lPTl9SRUdFWC50ZXN0KHRva2VuLnN0ZW0pKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcmVzdWx0KSwgcGFyc2VTaWduaWZpY2FudFByZWNpc2lvbih0b2tlbi5zdGVtKSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2lnbk9wdHMgPSBwYXJzZVNpZ24odG9rZW4uc3RlbSk7XG4gICAgICAgIGlmIChzaWduT3B0cykge1xuICAgICAgICAgICAgcmVzdWx0ID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHJlc3VsdCksIHNpZ25PcHRzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIiwidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX19zcHJlYWRBcnJheXMgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXlzKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xuICAgIHJldHVybiByO1xufTtcbmltcG9ydCB7IGNvbnZlcnROdW1iZXJTa2VsZXRvblRvTnVtYmVyRm9ybWF0T3B0aW9ucywgaXNBcmd1bWVudEVsZW1lbnQsIGlzRGF0ZUVsZW1lbnQsIGlzRGF0ZVRpbWVTa2VsZXRvbiwgaXNMaXRlcmFsRWxlbWVudCwgaXNOdW1iZXJFbGVtZW50LCBpc051bWJlclNrZWxldG9uLCBpc1BsdXJhbEVsZW1lbnQsIGlzUG91bmRFbGVtZW50LCBpc1NlbGVjdEVsZW1lbnQsIGlzVGltZUVsZW1lbnQsIHBhcnNlRGF0ZVRpbWVTa2VsZXRvbiwgfSBmcm9tICdpbnRsLW1lc3NhZ2Vmb3JtYXQtcGFyc2VyJztcbnZhciBGb3JtYXRFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRm9ybWF0RXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRm9ybWF0RXJyb3IobXNnLCB2YXJpYWJsZUlkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1zZykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudmFyaWFibGVJZCA9IHZhcmlhYmxlSWQ7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIEZvcm1hdEVycm9yO1xufShFcnJvcikpO1xuZnVuY3Rpb24gbWVyZ2VMaXRlcmFsKHBhcnRzKSB7XG4gICAgaWYgKHBhcnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIHBhcnRzO1xuICAgIH1cbiAgICByZXR1cm4gcGFydHMucmVkdWNlKGZ1bmN0aW9uIChhbGwsIHBhcnQpIHtcbiAgICAgICAgdmFyIGxhc3RQYXJ0ID0gYWxsW2FsbC5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKCFsYXN0UGFydCB8fFxuICAgICAgICAgICAgbGFzdFBhcnQudHlwZSAhPT0gMCAvKiBsaXRlcmFsICovIHx8XG4gICAgICAgICAgICBwYXJ0LnR5cGUgIT09IDAgLyogbGl0ZXJhbCAqLykge1xuICAgICAgICAgICAgYWxsLnB1c2gocGFydCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsYXN0UGFydC52YWx1ZSArPSBwYXJ0LnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbGw7XG4gICAgfSwgW10pO1xufVxuLy8gVE9ETyhza2VsZXRvbik6IGFkZCBza2VsZXRvbiBzdXBwb3J0XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0VG9QYXJ0cyhlbHMsIGxvY2FsZXMsIGZvcm1hdHRlcnMsIGZvcm1hdHMsIHZhbHVlcywgY3VycmVudFBsdXJhbFZhbHVlLCBcbi8vIEZvciBkZWJ1Z2dpbmdcbm9yaWdpbmFsTWVzc2FnZSkge1xuICAgIC8vIEhvdCBwYXRoIGZvciBzdHJhaWdodCBzaW1wbGUgbXNnIHRyYW5zbGF0aW9uc1xuICAgIGlmIChlbHMubGVuZ3RoID09PSAxICYmIGlzTGl0ZXJhbEVsZW1lbnQoZWxzWzBdKSkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGU6IDAgLyogbGl0ZXJhbCAqLyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogZWxzWzBdLnZhbHVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMCwgZWxzXzEgPSBlbHM7IF9pIDwgZWxzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBlbCA9IGVsc18xW19pXTtcbiAgICAgICAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5nIHBhcnRzLlxuICAgICAgICBpZiAoaXNMaXRlcmFsRWxlbWVudChlbCkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAwIC8qIGxpdGVyYWwgKi8sXG4gICAgICAgICAgICAgICAgdmFsdWU6IGVsLnZhbHVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPOiBzaG91bGQgdGhpcyBwYXJ0IGJlIGxpdGVyYWwgdHlwZT9cbiAgICAgICAgLy8gUmVwbGFjZSBgI2AgaW4gcGx1cmFsIHJ1bGVzIHdpdGggdGhlIGFjdHVhbCBudW1lcmljIHZhbHVlLlxuICAgICAgICBpZiAoaXNQb3VuZEVsZW1lbnQoZWwpKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnRQbHVyYWxWYWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IDAgLyogbGl0ZXJhbCAqLyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZvcm1hdHRlcnMuZ2V0TnVtYmVyRm9ybWF0KGxvY2FsZXMpLmZvcm1hdChjdXJyZW50UGx1cmFsVmFsdWUpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhck5hbWUgPSBlbC52YWx1ZTtcbiAgICAgICAgLy8gRW5mb3JjZSB0aGF0IGFsbCByZXF1aXJlZCB2YWx1ZXMgYXJlIHByb3ZpZGVkIGJ5IHRoZSBjYWxsZXIuXG4gICAgICAgIGlmICghKHZhbHVlcyAmJiB2YXJOYW1lIGluIHZhbHVlcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcihcIlRoZSBpbnRsIHN0cmluZyBjb250ZXh0IHZhcmlhYmxlIFxcXCJcIiArIHZhck5hbWUgKyBcIlxcXCIgd2FzIG5vdCBwcm92aWRlZCB0byB0aGUgc3RyaW5nIFxcXCJcIiArIG9yaWdpbmFsTWVzc2FnZSArIFwiXFxcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmFsdWUgPSB2YWx1ZXNbdmFyTmFtZV07XG4gICAgICAgIGlmIChpc0FyZ3VtZW50RWxlbWVudChlbCkpIHtcbiAgICAgICAgICAgIGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPVxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcidcbiAgICAgICAgICAgICAgICAgICAgICAgID8gU3RyaW5nKHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAxIC8qIGFyZ3VtZW50ICovLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgZm9ybWF0IHBsdXJhbCBhbmQgc2VsZWN0IHBhcnRzJyBvcHRpb24g4oCUIHdoaWNoIGNhbiBiZSBhXG4gICAgICAgIC8vIG5lc3RlZCBwYXR0ZXJuIHN0cnVjdHVyZS4gVGhlIGNob29zaW5nIG9mIHRoZSBvcHRpb24gdG8gdXNlIGlzXG4gICAgICAgIC8vIGFic3RyYWN0ZWQtYnkgYW5kIGRlbGVnYXRlZC10byB0aGUgcGFydCBoZWxwZXIgb2JqZWN0LlxuICAgICAgICBpZiAoaXNEYXRlRWxlbWVudChlbCkpIHtcbiAgICAgICAgICAgIHZhciBzdHlsZSA9IHR5cGVvZiBlbC5zdHlsZSA9PT0gJ3N0cmluZycgPyBmb3JtYXRzLmRhdGVbZWwuc3R5bGVdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgIHR5cGU6IDAgLyogbGl0ZXJhbCAqLyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogZm9ybWF0dGVyc1xuICAgICAgICAgICAgICAgICAgICAuZ2V0RGF0ZVRpbWVGb3JtYXQobG9jYWxlcywgc3R5bGUpXG4gICAgICAgICAgICAgICAgICAgIC5mb3JtYXQodmFsdWUpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNUaW1lRWxlbWVudChlbCkpIHtcbiAgICAgICAgICAgIHZhciBzdHlsZSA9IHR5cGVvZiBlbC5zdHlsZSA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICA/IGZvcm1hdHMudGltZVtlbC5zdHlsZV1cbiAgICAgICAgICAgICAgICA6IGlzRGF0ZVRpbWVTa2VsZXRvbihlbC5zdHlsZSlcbiAgICAgICAgICAgICAgICAgICAgPyBwYXJzZURhdGVUaW1lU2tlbGV0b24oZWwuc3R5bGUucGF0dGVybilcbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogMCAvKiBsaXRlcmFsICovLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmb3JtYXR0ZXJzXG4gICAgICAgICAgICAgICAgICAgIC5nZXREYXRlVGltZUZvcm1hdChsb2NhbGVzLCBzdHlsZSlcbiAgICAgICAgICAgICAgICAgICAgLmZvcm1hdCh2YWx1ZSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc051bWJlckVsZW1lbnQoZWwpKSB7XG4gICAgICAgICAgICB2YXIgc3R5bGUgPSB0eXBlb2YgZWwuc3R5bGUgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgPyBmb3JtYXRzLm51bWJlcltlbC5zdHlsZV1cbiAgICAgICAgICAgICAgICA6IGlzTnVtYmVyU2tlbGV0b24oZWwuc3R5bGUpXG4gICAgICAgICAgICAgICAgICAgID8gY29udmVydE51bWJlclNrZWxldG9uVG9OdW1iZXJGb3JtYXRPcHRpb25zKGVsLnN0eWxlLnRva2VucylcbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogMCAvKiBsaXRlcmFsICovLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmb3JtYXR0ZXJzXG4gICAgICAgICAgICAgICAgICAgIC5nZXROdW1iZXJGb3JtYXQobG9jYWxlcywgc3R5bGUpXG4gICAgICAgICAgICAgICAgICAgIC5mb3JtYXQodmFsdWUpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTZWxlY3RFbGVtZW50KGVsKSkge1xuICAgICAgICAgICAgdmFyIG9wdCA9IGVsLm9wdGlvbnNbdmFsdWVdIHx8IGVsLm9wdGlvbnMub3RoZXI7XG4gICAgICAgICAgICBpZiAoIW9wdCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCB2YWx1ZXMgZm9yIFxcXCJcIiArIGVsLnZhbHVlICsgXCJcXFwiOiBcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIi4gT3B0aW9ucyBhcmUgXFxcIlwiICsgT2JqZWN0LmtleXMoZWwub3B0aW9ucykuam9pbignXCIsIFwiJykgKyBcIlxcXCJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQucHVzaC5hcHBseShyZXN1bHQsIGZvcm1hdFRvUGFydHMob3B0LnZhbHVlLCBsb2NhbGVzLCBmb3JtYXR0ZXJzLCBmb3JtYXRzLCB2YWx1ZXMpKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1BsdXJhbEVsZW1lbnQoZWwpKSB7XG4gICAgICAgICAgICB2YXIgb3B0ID0gZWwub3B0aW9uc1tcIj1cIiArIHZhbHVlXTtcbiAgICAgICAgICAgIGlmICghb3B0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFJbnRsLlBsdXJhbFJ1bGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcihcIkludGwuUGx1cmFsUnVsZXMgaXMgbm90IGF2YWlsYWJsZSBpbiB0aGlzIGVudmlyb25tZW50LlxcblRyeSBwb2x5ZmlsbGluZyBpdCB1c2luZyBcXFwiQGZvcm1hdGpzL2ludGwtcGx1cmFscnVsZXNcXFwiXFxuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgcnVsZSA9IGZvcm1hdHRlcnNcbiAgICAgICAgICAgICAgICAgICAgLmdldFBsdXJhbFJ1bGVzKGxvY2FsZXMsIHsgdHlwZTogZWwucGx1cmFsVHlwZSB9KVxuICAgICAgICAgICAgICAgICAgICAuc2VsZWN0KHZhbHVlIC0gKGVsLm9mZnNldCB8fCAwKSk7XG4gICAgICAgICAgICAgICAgb3B0ID0gZWwub3B0aW9uc1tydWxlXSB8fCBlbC5vcHRpb25zLm90aGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFvcHQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgdmFsdWVzIGZvciBcXFwiXCIgKyBlbC52YWx1ZSArIFwiXFxcIjogXFxcIlwiICsgdmFsdWUgKyBcIlxcXCIuIE9wdGlvbnMgYXJlIFxcXCJcIiArIE9iamVjdC5rZXlzKGVsLm9wdGlvbnMpLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LnB1c2guYXBwbHkocmVzdWx0LCBmb3JtYXRUb1BhcnRzKG9wdC52YWx1ZSwgbG9jYWxlcywgZm9ybWF0dGVycywgZm9ybWF0cywgdmFsdWVzLCB2YWx1ZSAtIChlbC5vZmZzZXQgfHwgMCkpKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtZXJnZUxpdGVyYWwocmVzdWx0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRUb1N0cmluZyhlbHMsIGxvY2FsZXMsIGZvcm1hdHRlcnMsIGZvcm1hdHMsIHZhbHVlcywgXG4vLyBGb3IgZGVidWdnaW5nXG5vcmlnaW5hbE1lc3NhZ2UpIHtcbiAgICB2YXIgcGFydHMgPSBmb3JtYXRUb1BhcnRzKGVscywgbG9jYWxlcywgZm9ybWF0dGVycywgZm9ybWF0cywgdmFsdWVzLCB1bmRlZmluZWQsIG9yaWdpbmFsTWVzc2FnZSk7XG4gICAgLy8gSG90IHBhdGggZm9yIHN0cmFpZ2h0IHNpbXBsZSBtc2cgdHJhbnNsYXRpb25zXG4gICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gcGFydHNbMF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBwYXJ0cy5yZWR1Y2UoZnVuY3Rpb24gKGFsbCwgcGFydCkgeyByZXR1cm4gKGFsbCArPSBwYXJ0LnZhbHVlKTsgfSwgJycpO1xufVxuLy8gU2luZ2xldG9uXG52YXIgZG9tUGFyc2VyO1xudmFyIFRPS0VOX0RFTElNSVRFUiA9ICdAQCc7XG52YXIgVE9LRU5fUkVHRVggPSAvQEAoXFxkK19cXGQrKUBAL2c7XG52YXIgY291bnRlciA9IDA7XG5mdW5jdGlvbiBnZW5lcmF0ZUlkKCkge1xuICAgIHJldHVybiBEYXRlLm5vdygpICsgXCJfXCIgKyArK2NvdW50ZXI7XG59XG5mdW5jdGlvbiByZXN0b3JlUmljaFBsYWNlaG9sZGVyTWVzc2FnZSh0ZXh0LCBvYmplY3RQYXJ0cykge1xuICAgIHJldHVybiB0ZXh0XG4gICAgICAgIC5zcGxpdChUT0tFTl9SRUdFWClcbiAgICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiAob2JqZWN0UGFydHNbY10gIT0gbnVsbCA/IG9iamVjdFBhcnRzW2NdIDogYyk7IH0pXG4gICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGFsbCwgYykge1xuICAgICAgICBpZiAoIWFsbC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFsbC5wdXNoKGMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBjID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgdHlwZW9mIGFsbFthbGwubGVuZ3RoIC0gMV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBhbGxbYWxsLmxlbmd0aCAtIDFdICs9IGM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhbGwucHVzaChjKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWxsO1xuICAgIH0sIFtdKTtcbn1cbi8qKlxuICogTm90IGV4aGF1c3RpdmUsIGp1c3QgZm9yIHNhbml0eSBjaGVja1xuICovXG52YXIgU0lNUExFX1hNTF9SRUdFWCA9IC8oPChbMC05YS16QS1aLV9dKj8pPiguKj8pPFxcLyhbMC05YS16QS1aLV9dKj8pPil8KDxbMC05YS16QS1aLV9dKj9cXC8+KS87XG52YXIgVEVNUExBVEVfSUQgPSBEYXRlLm5vdygpICsgJ0BAJztcbnZhciBWT0lEX0VMRU1FTlRTID0gW1xuICAgICdhcmVhJyxcbiAgICAnYmFzZScsXG4gICAgJ2JyJyxcbiAgICAnY29sJyxcbiAgICAnZW1iZWQnLFxuICAgICdocicsXG4gICAgJ2ltZycsXG4gICAgJ2lucHV0JyxcbiAgICAnbGluaycsXG4gICAgJ21ldGEnLFxuICAgICdwYXJhbScsXG4gICAgJ3NvdXJjZScsXG4gICAgJ3RyYWNrJyxcbiAgICAnd2JyJyxcbl07XG5mdW5jdGlvbiBmb3JtYXRIVE1MRWxlbWVudChlbCwgb2JqZWN0UGFydHMsIHZhbHVlcykge1xuICAgIHZhciB0YWdOYW1lID0gZWwudGFnTmFtZTtcbiAgICB2YXIgb3V0ZXJIVE1MID0gZWwub3V0ZXJIVE1MLCB0ZXh0Q29udGVudCA9IGVsLnRleHRDb250ZW50LCBjaGlsZE5vZGVzID0gZWwuY2hpbGROb2RlcztcbiAgICAvLyBSZWd1bGFyIHRleHRcbiAgICBpZiAoIXRhZ05hbWUpIHtcbiAgICAgICAgcmV0dXJuIHJlc3RvcmVSaWNoUGxhY2Vob2xkZXJNZXNzYWdlKHRleHRDb250ZW50IHx8ICcnLCBvYmplY3RQYXJ0cyk7XG4gICAgfVxuICAgIHRhZ05hbWUgPSB0YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFyIGlzVm9pZEVsZW1lbnQgPSB+Vk9JRF9FTEVNRU5UUy5pbmRleE9mKHRhZ05hbWUpO1xuICAgIHZhciBmb3JtYXRGbk9yVmFsdWUgPSB2YWx1ZXNbdGFnTmFtZV07XG4gICAgaWYgKGZvcm1hdEZuT3JWYWx1ZSAmJiBpc1ZvaWRFbGVtZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcih0YWdOYW1lICsgXCIgaXMgYSBzZWxmLWNsb3NpbmcgdGFnIGFuZCBjYW4gbm90IGJlIHVzZWQsIHBsZWFzZSB1c2UgYW5vdGhlciB0YWcgbmFtZS5cIik7XG4gICAgfVxuICAgIGlmICghY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtvdXRlckhUTUxdO1xuICAgIH1cbiAgICB2YXIgY2h1bmtzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoY2hpbGROb2RlcykucmVkdWNlKGZ1bmN0aW9uIChhbGwsIGNoaWxkKSB7XG4gICAgICAgIHJldHVybiBhbGwuY29uY2F0KGZvcm1hdEhUTUxFbGVtZW50KGNoaWxkLCBvYmplY3RQYXJ0cywgdmFsdWVzKSk7XG4gICAgfSwgW10pO1xuICAgIC8vIExlZ2FjeSBIVE1MXG4gICAgaWYgKCFmb3JtYXRGbk9yVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIF9fc3ByZWFkQXJyYXlzKFtcIjxcIiArIHRhZ05hbWUgKyBcIj5cIl0sIGNodW5rcywgW1wiPC9cIiArIHRhZ05hbWUgKyBcIj5cIl0pO1xuICAgIH1cbiAgICAvLyBIVE1MIFRhZyByZXBsYWNlbWVudFxuICAgIGlmICh0eXBlb2YgZm9ybWF0Rm5PclZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBbZm9ybWF0Rm5PclZhbHVlLmFwcGx5KHZvaWQgMCwgY2h1bmtzKV07XG4gICAgfVxuICAgIHJldHVybiBbZm9ybWF0Rm5PclZhbHVlXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRIVE1MTWVzc2FnZShlbHMsIGxvY2FsZXMsIGZvcm1hdHRlcnMsIGZvcm1hdHMsIHZhbHVlcywgXG4vLyBGb3IgZGVidWdnaW5nXG5vcmlnaW5hbE1lc3NhZ2UpIHtcbiAgICB2YXIgcGFydHMgPSBmb3JtYXRUb1BhcnRzKGVscywgbG9jYWxlcywgZm9ybWF0dGVycywgZm9ybWF0cywgdmFsdWVzLCB1bmRlZmluZWQsIG9yaWdpbmFsTWVzc2FnZSk7XG4gICAgdmFyIG9iamVjdFBhcnRzID0ge307XG4gICAgdmFyIGZvcm1hdHRlZE1lc3NhZ2UgPSBwYXJ0cy5yZWR1Y2UoZnVuY3Rpb24gKGFsbCwgcGFydCkge1xuICAgICAgICBpZiAocGFydC50eXBlID09PSAwIC8qIGxpdGVyYWwgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiAoYWxsICs9IHBhcnQudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpZCA9IGdlbmVyYXRlSWQoKTtcbiAgICAgICAgb2JqZWN0UGFydHNbaWRdID0gcGFydC52YWx1ZTtcbiAgICAgICAgcmV0dXJuIChhbGwgKz0gXCJcIiArIFRPS0VOX0RFTElNSVRFUiArIGlkICsgVE9LRU5fREVMSU1JVEVSKTtcbiAgICB9LCAnJyk7XG4gICAgLy8gTm90IGRlc2lnbmVkIHRvIGZpbHRlciBvdXQgYWdncmVzc2l2ZWx5XG4gICAgaWYgKCFTSU1QTEVfWE1MX1JFR0VYLnRlc3QoZm9ybWF0dGVkTWVzc2FnZSkpIHtcbiAgICAgICAgcmV0dXJuIHJlc3RvcmVSaWNoUGxhY2Vob2xkZXJNZXNzYWdlKGZvcm1hdHRlZE1lc3NhZ2UsIG9iamVjdFBhcnRzKTtcbiAgICB9XG4gICAgaWYgKCF2YWx1ZXMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKCdNZXNzYWdlIGhhcyBwbGFjZWhvbGRlcnMgYnV0IG5vIHZhbHVlcyB3YXMgZ2l2ZW4nKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBET01QYXJzZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBGb3JtYXRFcnJvcignQ2Fubm90IGZvcm1hdCBYTUwgbWVzc2FnZSB3aXRob3V0IERPTVBhcnNlcicpO1xuICAgIH1cbiAgICBpZiAoIWRvbVBhcnNlcikge1xuICAgICAgICBkb21QYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG4gICAgfVxuICAgIHZhciBjb250ZW50ID0gZG9tUGFyc2VyXG4gICAgICAgIC5wYXJzZUZyb21TdHJpbmcoXCI8Zm9ybWF0dGVkLW1lc3NhZ2UgaWQ9XFxcIlwiICsgVEVNUExBVEVfSUQgKyBcIlxcXCI+XCIgKyBmb3JtYXR0ZWRNZXNzYWdlICsgXCI8L2Zvcm1hdHRlZC1tZXNzYWdlPlwiLCAndGV4dC9odG1sJylcbiAgICAgICAgLmdldEVsZW1lbnRCeUlkKFRFTVBMQVRFX0lEKTtcbiAgICBpZiAoIWNvbnRlbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEZvcm1hdEVycm9yKFwiTWFsZm9ybWVkIEhUTUwgbWVzc2FnZSBcIiArIGZvcm1hdHRlZE1lc3NhZ2UpO1xuICAgIH1cbiAgICB2YXIgdGFnc1RvRm9ybWF0ID0gT2JqZWN0LmtleXModmFsdWVzKS5maWx0ZXIoZnVuY3Rpb24gKHZhck5hbWUpIHsgcmV0dXJuICEhY29udGVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSh2YXJOYW1lKS5sZW5ndGg7IH0pO1xuICAgIC8vIE5vIHRhZ3MgdG8gZm9ybWF0XG4gICAgaWYgKCF0YWdzVG9Gb3JtYXQubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN0b3JlUmljaFBsYWNlaG9sZGVyTWVzc2FnZShmb3JtYXR0ZWRNZXNzYWdlLCBvYmplY3RQYXJ0cyk7XG4gICAgfVxuICAgIHZhciBjYXNlU2Vuc2l0aXZlVGFncyA9IHRhZ3NUb0Zvcm1hdC5maWx0ZXIoZnVuY3Rpb24gKHRhZ05hbWUpIHsgcmV0dXJuIHRhZ05hbWUgIT09IHRhZ05hbWUudG9Mb3dlckNhc2UoKTsgfSk7XG4gICAgaWYgKGNhc2VTZW5zaXRpdmVUYWdzLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRm9ybWF0RXJyb3IoXCJIVE1MIHRhZyBtdXN0IGJlIGxvd2VyY2FzZWQgYnV0IHRoZSBmb2xsb3dpbmcgdGFncyBhcmUgbm90OiBcIiArIGNhc2VTZW5zaXRpdmVUYWdzLmpvaW4oJywgJykpO1xuICAgIH1cbiAgICAvLyBXZSdyZSBkb2luZyB0aGlzIHNpbmNlIHRvcCBub2RlIGlzIGA8Zm9ybWF0dGVkLW1lc3NhZ2UvPmAgd2hpY2ggZG9lcyBub3QgaGF2ZSBhIGZvcm1hdHRlclxuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2VcbiAgICAgICAgLmNhbGwoY29udGVudC5jaGlsZE5vZGVzKVxuICAgICAgICAucmVkdWNlKGZ1bmN0aW9uIChhbGwsIGNoaWxkKSB7IHJldHVybiBhbGwuY29uY2F0KGZvcm1hdEhUTUxFbGVtZW50KGNoaWxkLCBvYmplY3RQYXJ0cywgdmFsdWVzKSk7IH0sIFtdKTtcbn1cbiIsIi8qXG5Db3B5cmlnaHQgKGMpIDIwMTQsIFlhaG9vISBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5Db3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuXG5TZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuKi9cbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gJ2ludGwtbWVzc2FnZWZvcm1hdC1wYXJzZXInO1xuaW1wb3J0IG1lbW9pemVJbnRsQ29uc3RydWN0b3IgZnJvbSAnaW50bC1mb3JtYXQtY2FjaGUnO1xuaW1wb3J0IHsgZm9ybWF0VG9TdHJpbmcsIGZvcm1hdFRvUGFydHMsIGZvcm1hdEhUTUxNZXNzYWdlLCB9IGZyb20gJy4vZm9ybWF0dGVycyc7XG4vLyAtLSBNZXNzYWdlRm9ybWF0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBtZXJnZUNvbmZpZyhjMSwgYzIpIHtcbiAgICBpZiAoIWMyKSB7XG4gICAgICAgIHJldHVybiBjMTtcbiAgICB9XG4gICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKHt9LCAoYzEgfHwge30pKSwgKGMyIHx8IHt9KSksIE9iamVjdC5rZXlzKGMxKS5yZWR1Y2UoZnVuY3Rpb24gKGFsbCwgaykge1xuICAgICAgICBhbGxba10gPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgYzFba10pLCAoYzJba10gfHwge30pKTtcbiAgICAgICAgcmV0dXJuIGFsbDtcbiAgICB9LCB7fSkpO1xufVxuZnVuY3Rpb24gbWVyZ2VDb25maWdzKGRlZmF1bHRDb25maWcsIGNvbmZpZ3MpIHtcbiAgICBpZiAoIWNvbmZpZ3MpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRDb25maWc7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3Qua2V5cyhkZWZhdWx0Q29uZmlnKS5yZWR1Y2UoZnVuY3Rpb24gKGFsbCwgaykge1xuICAgICAgICBhbGxba10gPSBtZXJnZUNvbmZpZyhkZWZhdWx0Q29uZmlnW2tdLCBjb25maWdzW2tdKTtcbiAgICAgICAgcmV0dXJuIGFsbDtcbiAgICB9LCBfX2Fzc2lnbih7fSwgZGVmYXVsdENvbmZpZykpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRGb3JtYXR0ZXJzKGNhY2hlKSB7XG4gICAgaWYgKGNhY2hlID09PSB2b2lkIDApIHsgY2FjaGUgPSB7XG4gICAgICAgIG51bWJlcjoge30sXG4gICAgICAgIGRhdGVUaW1lOiB7fSxcbiAgICAgICAgcGx1cmFsUnVsZXM6IHt9LFxuICAgIH07IH1cbiAgICByZXR1cm4ge1xuICAgICAgICBnZXROdW1iZXJGb3JtYXQ6IG1lbW9pemVJbnRsQ29uc3RydWN0b3IoSW50bC5OdW1iZXJGb3JtYXQsIGNhY2hlLm51bWJlciksXG4gICAgICAgIGdldERhdGVUaW1lRm9ybWF0OiBtZW1vaXplSW50bENvbnN0cnVjdG9yKEludGwuRGF0ZVRpbWVGb3JtYXQsIGNhY2hlLmRhdGVUaW1lKSxcbiAgICAgICAgZ2V0UGx1cmFsUnVsZXM6IG1lbW9pemVJbnRsQ29uc3RydWN0b3IoSW50bC5QbHVyYWxSdWxlcywgY2FjaGUucGx1cmFsUnVsZXMpLFxuICAgIH07XG59XG52YXIgSW50bE1lc3NhZ2VGb3JtYXQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSW50bE1lc3NhZ2VGb3JtYXQobWVzc2FnZSwgbG9jYWxlcywgb3ZlcnJpZGVGb3JtYXRzLCBvcHRzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChsb2NhbGVzID09PSB2b2lkIDApIHsgbG9jYWxlcyA9IEludGxNZXNzYWdlRm9ybWF0LmRlZmF1bHRMb2NhbGU7IH1cbiAgICAgICAgdGhpcy5mb3JtYXR0ZXJDYWNoZSA9IHtcbiAgICAgICAgICAgIG51bWJlcjoge30sXG4gICAgICAgICAgICBkYXRlVGltZToge30sXG4gICAgICAgICAgICBwbHVyYWxSdWxlczoge30sXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZm9ybWF0ID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdFRvU3RyaW5nKF90aGlzLmFzdCwgX3RoaXMubG9jYWxlcywgX3RoaXMuZm9ybWF0dGVycywgX3RoaXMuZm9ybWF0cywgdmFsdWVzLCBfdGhpcy5tZXNzYWdlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5mb3JtYXRUb1BhcnRzID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdFRvUGFydHMoX3RoaXMuYXN0LCBfdGhpcy5sb2NhbGVzLCBfdGhpcy5mb3JtYXR0ZXJzLCBfdGhpcy5mb3JtYXRzLCB2YWx1ZXMsIHVuZGVmaW5lZCwgX3RoaXMubWVzc2FnZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZm9ybWF0SFRNTE1lc3NhZ2UgPSBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0SFRNTE1lc3NhZ2UoX3RoaXMuYXN0LCBfdGhpcy5sb2NhbGVzLCBfdGhpcy5mb3JtYXR0ZXJzLCBfdGhpcy5mb3JtYXRzLCB2YWx1ZXMsIF90aGlzLm1lc3NhZ2UpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnJlc29sdmVkT3B0aW9ucyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7XG4gICAgICAgICAgICBsb2NhbGU6IEludGwuTnVtYmVyRm9ybWF0LnN1cHBvcnRlZExvY2FsZXNPZihfdGhpcy5sb2NhbGVzKVswXSxcbiAgICAgICAgfSk7IH07XG4gICAgICAgIHRoaXMuZ2V0QXN0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuYXN0OyB9O1xuICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICAgICAgaWYgKCFJbnRsTWVzc2FnZUZvcm1hdC5fX3BhcnNlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW50bE1lc3NhZ2VGb3JtYXQuX19wYXJzZSBtdXN0IGJlIHNldCB0byBwcm9jZXNzIGBtZXNzYWdlYCBvZiB0eXBlIGBzdHJpbmdgJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBQYXJzZSBzdHJpbmcgbWVzc2FnZXMgaW50byBhbiBBU1QuXG4gICAgICAgICAgICB0aGlzLmFzdCA9IEludGxNZXNzYWdlRm9ybWF0Ll9fcGFyc2UobWVzc2FnZSwge1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZUhhc2h0YWdJblBsdXJhbDogZmFsc2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYXN0ID0gbWVzc2FnZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodGhpcy5hc3QpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBIG1lc3NhZ2UgbXVzdCBiZSBwcm92aWRlZCBhcyBhIFN0cmluZyBvciBBU1QuJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ3JlYXRlcyBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgc3BlY2lmaWVkIGBmb3JtYXRzYCBtZXJnZWQgd2l0aCB0aGUgZGVmYXVsdFxuICAgICAgICAvLyBmb3JtYXRzLlxuICAgICAgICB0aGlzLmZvcm1hdHMgPSBtZXJnZUNvbmZpZ3MoSW50bE1lc3NhZ2VGb3JtYXQuZm9ybWF0cywgb3ZlcnJpZGVGb3JtYXRzKTtcbiAgICAgICAgLy8gRGVmaW5lZCBmaXJzdCBiZWNhdXNlIGl0J3MgdXNlZCB0byBidWlsZCB0aGUgZm9ybWF0IHBhdHRlcm4uXG4gICAgICAgIHRoaXMubG9jYWxlcyA9IGxvY2FsZXM7XG4gICAgICAgIHRoaXMuZm9ybWF0dGVycyA9XG4gICAgICAgICAgICAob3B0cyAmJiBvcHRzLmZvcm1hdHRlcnMpIHx8IGNyZWF0ZURlZmF1bHRGb3JtYXR0ZXJzKHRoaXMuZm9ybWF0dGVyQ2FjaGUpO1xuICAgIH1cbiAgICBJbnRsTWVzc2FnZUZvcm1hdC5kZWZhdWx0TG9jYWxlID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KCkucmVzb2x2ZWRPcHRpb25zKCkubG9jYWxlO1xuICAgIEludGxNZXNzYWdlRm9ybWF0Ll9fcGFyc2UgPSBwYXJzZTtcbiAgICAvLyBEZWZhdWx0IGZvcm1hdCBvcHRpb25zIHVzZWQgYXMgdGhlIHByb3RvdHlwZSBvZiB0aGUgYGZvcm1hdHNgIHByb3ZpZGVkIHRvIHRoZVxuICAgIC8vIGNvbnN0cnVjdG9yLiBUaGVzZSBhcmUgdXNlZCB3aGVuIGNvbnN0cnVjdGluZyB0aGUgaW50ZXJuYWwgSW50bC5OdW1iZXJGb3JtYXRcbiAgICAvLyBhbmQgSW50bC5EYXRlVGltZUZvcm1hdCBpbnN0YW5jZXMuXG4gICAgSW50bE1lc3NhZ2VGb3JtYXQuZm9ybWF0cyA9IHtcbiAgICAgICAgbnVtYmVyOiB7XG4gICAgICAgICAgICBjdXJyZW5jeToge1xuICAgICAgICAgICAgICAgIHN0eWxlOiAnY3VycmVuY3knLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBlcmNlbnQ6IHtcbiAgICAgICAgICAgICAgICBzdHlsZTogJ3BlcmNlbnQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgc2hvcnQ6IHtcbiAgICAgICAgICAgICAgICBtb250aDogJ251bWVyaWMnLFxuICAgICAgICAgICAgICAgIGRheTogJ251bWVyaWMnLFxuICAgICAgICAgICAgICAgIHllYXI6ICcyLWRpZ2l0JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtZWRpdW06IHtcbiAgICAgICAgICAgICAgICBtb250aDogJ3Nob3J0JyxcbiAgICAgICAgICAgICAgICBkYXk6ICdudW1lcmljJyxcbiAgICAgICAgICAgICAgICB5ZWFyOiAnbnVtZXJpYycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbG9uZzoge1xuICAgICAgICAgICAgICAgIG1vbnRoOiAnbG9uZycsXG4gICAgICAgICAgICAgICAgZGF5OiAnbnVtZXJpYycsXG4gICAgICAgICAgICAgICAgeWVhcjogJ251bWVyaWMnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZ1bGw6IHtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5OiAnbG9uZycsXG4gICAgICAgICAgICAgICAgbW9udGg6ICdsb25nJyxcbiAgICAgICAgICAgICAgICBkYXk6ICdudW1lcmljJyxcbiAgICAgICAgICAgICAgICB5ZWFyOiAnbnVtZXJpYycsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB0aW1lOiB7XG4gICAgICAgICAgICBzaG9ydDoge1xuICAgICAgICAgICAgICAgIGhvdXI6ICdudW1lcmljJyxcbiAgICAgICAgICAgICAgICBtaW51dGU6ICdudW1lcmljJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtZWRpdW06IHtcbiAgICAgICAgICAgICAgICBob3VyOiAnbnVtZXJpYycsXG4gICAgICAgICAgICAgICAgbWludXRlOiAnbnVtZXJpYycsXG4gICAgICAgICAgICAgICAgc2Vjb25kOiAnbnVtZXJpYycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbG9uZzoge1xuICAgICAgICAgICAgICAgIGhvdXI6ICdudW1lcmljJyxcbiAgICAgICAgICAgICAgICBtaW51dGU6ICdudW1lcmljJyxcbiAgICAgICAgICAgICAgICBzZWNvbmQ6ICdudW1lcmljJyxcbiAgICAgICAgICAgICAgICB0aW1lWm9uZU5hbWU6ICdzaG9ydCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVsbDoge1xuICAgICAgICAgICAgICAgIGhvdXI6ICdudW1lcmljJyxcbiAgICAgICAgICAgICAgICBtaW51dGU6ICdudW1lcmljJyxcbiAgICAgICAgICAgICAgICBzZWNvbmQ6ICdudW1lcmljJyxcbiAgICAgICAgICAgICAgICB0aW1lWm9uZU5hbWU6ICdzaG9ydCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIEludGxNZXNzYWdlRm9ybWF0O1xufSgpKTtcbmV4cG9ydCB7IEludGxNZXNzYWdlRm9ybWF0IH07XG5leHBvcnQgZGVmYXVsdCBJbnRsTWVzc2FnZUZvcm1hdDtcbiIsIi8qXG5Db3B5cmlnaHQgKGMpIDIwMTQsIFlhaG9vISBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5Db3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuXG5TZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuKi9cbmltcG9ydCBJbnRsTWVzc2FnZUZvcm1hdCBmcm9tICcuL2NvcmUnO1xuZXhwb3J0ICogZnJvbSAnLi9mb3JtYXR0ZXJzJztcbmV4cG9ydCAqIGZyb20gJy4vY29yZSc7XG5leHBvcnQgZGVmYXVsdCBJbnRsTWVzc2FnZUZvcm1hdDtcbiIsImltcG9ydCBSZWFjdCwgeyBGQyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcblxuaW1wb3J0IHsgVklFVyB9IGZyb20gJy4uL0J1dHRvbic7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vRG90c0xvYWRlci5jc3MnO1xuXG5jb25zdCBlbSA9IGNzc21lbShzdHlsZXMpO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIHZpZXc/OiBWSUVXO1xufVxuXG5jb25zdCBEb3RzTG9hZGVyOiBGQzxQcm9wcz4gPSAoeyB2aWV3LCBjbGFzc05hbWUgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnd3JhcHBlcicpKG51bGwsIGNsYXNzTmFtZSl9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCdkb3QnKSh7IHZpZXcsIGZpcnN0OiB0cnVlIH0pfSAvPlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCdkb3QnKSh7IHZpZXcsIHNlY29uZDogdHJ1ZSB9KX0gLz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnZG90JykoeyB2aWV3LCB0aGlyZDogdHJ1ZSB9KX0gLz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnZG90JykoeyB2aWV3LCBmb3VydGg6IHRydWUgfSl9IC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBEb3RzTG9hZGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgY3NzbWVtIGZyb20gJ2Nzc21lbSc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9UaXRsZS5jc3MnO1xuXG5jb25zdCBlbSA9IGNzc21lbShzdHlsZXMpO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBjaGlsZHJlbj86IFJlYWN0Tm9kZTtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBzaXplOiBzdHJpbmc7XG59XG5cbmNvbnN0IFRpdGxlOiBSZWFjdC5GQzxQcm9wcz4gPSAoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBzaXplIH0pID0+IChcbiAgPGgyIGNsYXNzTmFtZT17ZW0oJ3RpdGxlJykoeyBzaXplIH0sIGNsYXNzTmFtZSl9PntjaGlsZHJlbn08L2gyPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgVGl0bGU7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCJpbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gJy4vaXMnO1xuLyoqXG4gKiBHaXZlbiBhIGNoaWxkIERPTSBlbGVtZW50LCByZXR1cm5zIGEgcXVlcnktc2VsZWN0b3Igc3RhdGVtZW50IGRlc2NyaWJpbmcgdGhhdFxuICogYW5kIGl0cyBhbmNlc3RvcnNcbiAqIGUuZy4gW0hUTUxFbGVtZW50XSA9PiBib2R5ID4gZGl2ID4gaW5wdXQjZm9vLmJ0bltuYW1lPWJhel1cbiAqIEByZXR1cm5zIGdlbmVyYXRlZCBET00gcGF0aFxuICovXG5leHBvcnQgZnVuY3Rpb24gaHRtbFRyZWVBc1N0cmluZyhlbGVtKSB7XG4gICAgLy8gdHJ5L2NhdGNoIGJvdGg6XG4gICAgLy8gLSBhY2Nlc3NpbmcgZXZlbnQudGFyZ2V0IChzZWUgZ2V0c2VudHJ5L3JhdmVuLWpzIzgzOCwgIzc2OClcbiAgICAvLyAtIGBodG1sVHJlZUFzU3RyaW5nYCBiZWNhdXNlIGl0J3MgY29tcGxleCwgYW5kIGp1c3QgYWNjZXNzaW5nIHRoZSBET00gaW5jb3JyZWN0bHlcbiAgICAvLyAtIGNhbiB0aHJvdyBhbiBleGNlcHRpb24gaW4gc29tZSBjaXJjdW1zdGFuY2VzLlxuICAgIHRyeSB7XG4gICAgICAgIHZhciBjdXJyZW50RWxlbSA9IGVsZW07XG4gICAgICAgIHZhciBNQVhfVFJBVkVSU0VfSEVJR0hUID0gNTtcbiAgICAgICAgdmFyIE1BWF9PVVRQVVRfTEVOID0gODA7XG4gICAgICAgIHZhciBvdXQgPSBbXTtcbiAgICAgICAgdmFyIGhlaWdodCA9IDA7XG4gICAgICAgIHZhciBsZW4gPSAwO1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gJyA+ICc7XG4gICAgICAgIHZhciBzZXBMZW5ndGggPSBzZXBhcmF0b3IubGVuZ3RoO1xuICAgICAgICB2YXIgbmV4dFN0ciA9IHZvaWQgMDtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBsdXNwbHVzXG4gICAgICAgIHdoaWxlIChjdXJyZW50RWxlbSAmJiBoZWlnaHQrKyA8IE1BWF9UUkFWRVJTRV9IRUlHSFQpIHtcbiAgICAgICAgICAgIG5leHRTdHIgPSBfaHRtbEVsZW1lbnRBc1N0cmluZyhjdXJyZW50RWxlbSk7XG4gICAgICAgICAgICAvLyBiYWlsIG91dCBpZlxuICAgICAgICAgICAgLy8gLSBuZXh0U3RyIGlzIHRoZSAnaHRtbCcgZWxlbWVudFxuICAgICAgICAgICAgLy8gLSB0aGUgbGVuZ3RoIG9mIHRoZSBzdHJpbmcgdGhhdCB3b3VsZCBiZSBjcmVhdGVkIGV4Y2VlZHMgTUFYX09VVFBVVF9MRU5cbiAgICAgICAgICAgIC8vICAgKGlnbm9yZSB0aGlzIGxpbWl0IGlmIHdlIGFyZSBvbiB0aGUgZmlyc3QgaXRlcmF0aW9uKVxuICAgICAgICAgICAgaWYgKG5leHRTdHIgPT09ICdodG1sJyB8fCAoaGVpZ2h0ID4gMSAmJiBsZW4gKyBvdXQubGVuZ3RoICogc2VwTGVuZ3RoICsgbmV4dFN0ci5sZW5ndGggPj0gTUFYX09VVFBVVF9MRU4pKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXQucHVzaChuZXh0U3RyKTtcbiAgICAgICAgICAgIGxlbiArPSBuZXh0U3RyLmxlbmd0aDtcbiAgICAgICAgICAgIGN1cnJlbnRFbGVtID0gY3VycmVudEVsZW0ucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0LnJldmVyc2UoKS5qb2luKHNlcGFyYXRvcik7XG4gICAgfVxuICAgIGNhdGNoIChfb08pIHtcbiAgICAgICAgcmV0dXJuICc8dW5rbm93bj4nO1xuICAgIH1cbn1cbi8qKlxuICogUmV0dXJucyBhIHNpbXBsZSwgcXVlcnktc2VsZWN0b3IgcmVwcmVzZW50YXRpb24gb2YgYSBET00gZWxlbWVudFxuICogZS5nLiBbSFRNTEVsZW1lbnRdID0+IGlucHV0I2Zvby5idG5bbmFtZT1iYXpdXG4gKiBAcmV0dXJucyBnZW5lcmF0ZWQgRE9NIHBhdGhcbiAqL1xuZnVuY3Rpb24gX2h0bWxFbGVtZW50QXNTdHJpbmcoZWwpIHtcbiAgICB2YXIgZWxlbSA9IGVsO1xuICAgIHZhciBvdXQgPSBbXTtcbiAgICB2YXIgY2xhc3NOYW1lO1xuICAgIHZhciBjbGFzc2VzO1xuICAgIHZhciBrZXk7XG4gICAgdmFyIGF0dHI7XG4gICAgdmFyIGk7XG4gICAgaWYgKCFlbGVtIHx8ICFlbGVtLnRhZ05hbWUpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBvdXQucHVzaChlbGVtLnRhZ05hbWUudG9Mb3dlckNhc2UoKSk7XG4gICAgaWYgKGVsZW0uaWQpIHtcbiAgICAgICAgb3V0LnB1c2goXCIjXCIgKyBlbGVtLmlkKTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1jb25zdFxuICAgIGNsYXNzTmFtZSA9IGVsZW0uY2xhc3NOYW1lO1xuICAgIGlmIChjbGFzc05hbWUgJiYgaXNTdHJpbmcoY2xhc3NOYW1lKSkge1xuICAgICAgICBjbGFzc2VzID0gY2xhc3NOYW1lLnNwbGl0KC9cXHMrLyk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjbGFzc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBvdXQucHVzaChcIi5cIiArIGNsYXNzZXNbaV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBhbGxvd2VkQXR0cnMgPSBbJ3R5cGUnLCAnbmFtZScsICd0aXRsZScsICdhbHQnXTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgYWxsb3dlZEF0dHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGtleSA9IGFsbG93ZWRBdHRyc1tpXTtcbiAgICAgICAgYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKGtleSk7XG4gICAgICAgIGlmIChhdHRyKSB7XG4gICAgICAgICAgICBvdXQucHVzaChcIltcIiArIGtleSArIFwiPVxcXCJcIiArIGF0dHIgKyBcIlxcXCJdXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXQuam9pbignJyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1icm93c2VyLmpzLm1hcCIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJpbXBvcnQgeyBSZWFjdE5vZGUsIFJlZk9iamVjdCB9IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGVudW0gUG9zaXRpb24ge1xuICBUT1AgPSAndG9wJyxcbiAgVE9QX1NUQVJUID0gJ3RvcC1zdGFydCcsXG4gIFRPUF9FTkQgPSAndG9wLWVuZCcsXG4gIFJJR0hUID0gJ3JpZ2h0JyxcbiAgUklHSFRfU1RBUlQgPSAncmlnaHQtc3RhcnQnLFxuICBSSUdIVF9FTkQgPSAncmlnaHQtZW5kJyxcbiAgQk9UVE9NID0gJ2JvdHRvbScsXG4gIEJPVFRPTV9TVEFSVCA9ICdib3R0b20tc3RhcnQnLFxuICBCT1RUT01fRU5EID0gJ2JvdHRvbS1lbmQnLFxuICBMRUZUID0gJ2xlZnQnLFxuICBMRUZUX1NUQVJUID0gJ2xlZnQtc3RhcnQnLFxuICBMRUZUX0VORCA9ICdsZWZ0LWVuZCcsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgT2Zmc2V0IHtcbiAgdG9wOiBudW1iZXI7XG4gIGxlZnQ6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBIb3ZlckV2ZW50cyB7XG4gIG9uTW91c2VFbnRlcjogKCkgPT4gdm9pZDtcbiAgb25Nb3VzZUxlYXZlOiAoKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZvY3VzRXZlbnRzIHtcbiAgb25Gb2N1czogKCkgPT4gdm9pZDtcbiAgb25CbHVyOiAoKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRvb2x0aXBlZFByb3BzIHtcbiAgLyoqINCa0L7QvdGC0LXQvdGCINCy0L3Rg9GC0YDQuCDRgtGD0LvRgtC40L/QsCAqL1xuICB0b29sdGlwQ29udGVudD86ICgpID0+IFJlYWN0Tm9kZTtcbiAgLyoqINCf0L7Qt9C40YbQuNGPINGC0YPQu9GC0LjQv9CwINC+0YLQvdC+0YHQuNGC0LXQu9GM0L3QviDQsdC70L7QutCwLdC60L7QvdGC0LXQudC90LXRgNCwICovXG4gIHBvc2l0aW9uOiBQb3NpdGlvbjtcbiAgLyoqINCh0LzQtdGJ0LXQvdC40LUg0L/QvtC30LjRhtC40Lgg0YLRg9C70YLQuNC/0LAg0L7RgtC90L7RgdC40YLQtdC70YzQvdC+INCx0LvQvtC60LAt0LrQvtC90YLQtdC50L3QtdGA0LAgKi9cbiAgb2Zmc2V0PzogT2Zmc2V0O1xuICAvKiog0JfQsNCz0L7Qu9C+0LLQvtC6INGC0YPQu9GC0LjQv9CwLlxuICAgKiDQntGCINC10LPQviDQvdCw0LvQuNGH0LjRjyDQt9Cw0LLQuNGB0Y/RgiDRgNCw0LfQvNC10YDRiyDQvtGC0YHRgtGD0L/QvtCyINCyINGC0YPQu9GC0LjQv9C1ICovXG4gIHRpdGxlPzogc3RyaW5nIHwgdW5kZWZpbmVkIHwgSlNYLkVsZW1lbnQ7XG4gIC8qKlxuICAgKiDQotGD0LvRgtC40L8g0YHQutGA0YvRgiDQv9C+INGD0LzQvtC70YfQsNC90LjRjlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaXNPcGVuZWQ/OiBib29sZWFuO1xuICAvKipcbiAgICog0KLRg9C70YLQuNC/INC40LzQtdC10YIg0LzQsNC60YHQuNC80LDQu9GM0L3Rg9GOINGI0LjRgNC40L3RgyxcbiAgICog0YDQsNCy0L3Rg9GOINGI0LjRgNC40L3QtSDQutC+0L3RgtC10LnQvdC10YDQsC3RgtGA0LjQs9Cz0LXRgNCwXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBpc0xpbWl0ZWRCeUNvbnRhaW5lcj86IGJvb2xlYW47XG4gIC8qKlxuICAgKiDQodGB0YvQu9C60LAg0L3QsCBET00t0Y3Qu9C10LzQtdC90YIg0YDQvtC00LjRgtC10LvRjNGB0LrQvtCz0L4g0LHQu9C+0LrQsC3QutC+0L3RgtC10LnQvdC10YDQsFxuICAgKlxuICAgKiDQmNGB0L/QvtC70YzQt9GD0LXRgtGB0Y8g0L/RgNC4INCy0LrQu9GO0YfQtdC90L3QvtC8INGE0LvQsNCz0LUgaXNMaW1pdGVkQnlDb250YWluZXIg0LTQu9GPINGC0L7Qs9C+LFxuICAgKiDRh9GC0L7QsdGLINCy0YvRh9C40YHQu9C40YLRjCDRiNC40YDQuNC90YMg0YLRg9C70YLQuNC/0LAg0L7RgtC90L7RgdC40YLQtdC70YzQvdC+INCy0L3QtdGI0L3QtdCz0L4g0LrQvtC90YLQtdC50L3QtdGA0LBcbiAgICovXG4gIHBhcmVudFJlZj86IFJlZk9iamVjdDxIVE1MRWxlbWVudD47XG5cbiAgLyoqINCa0L7Qu9C70LHQtdC6INC00LvRjyDQvtGC0L/RgNCw0LLQutC4INCw0L3QsNC70LjRgtC40LrQuCDQuCDQv9C+0LTQvtCx0L3Ri9GFINC40LLQtdC90YLQvtCyICovXG4gIHRvb2x0aXBDYWxsYmFjaz86ICgpID0+IHZvaWQ7XG59XG4iLCJpbXBvcnQgeyBSZWZPYmplY3QgfSBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IGdldFJlZkJvdW5kaW5nID0gKHtcbiAgY3VycmVudCxcbn06IFJlZk9iamVjdDxIVE1MRWxlbWVudD4pOiBDbGllbnRSZWN0IHwgbnVsbCA9PiB7XG4gIGlmICghY3VycmVudCkgcmV0dXJuIG51bGw7XG5cbiAgcmV0dXJuIGN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBnZXRSZWZCb3VuZGluZztcbiIsIi8qIGVzbGludC1kaXNhYmxlIHJlYWN0LWhvb2tzLXNzci9yZWFjdC1ob29rcy1nbG9iYWwtc3NyICovXG5pbXBvcnQgeyBQb3NpdGlvbiwgT2Zmc2V0IH0gZnJvbSAnLi4vVG9vbHRpcGVkQ29tcG9uZW50L2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgQ29vcmRpbmF0ZXNTdGF0ZSwgYXNzZXJ0TmV2ZXIgfSBmcm9tICcuL2luZGV4JztcblxuY29uc3QgVE9PTFRJUF9BUlJPV19IRUlHSFQgPSAyNTtcbmNvbnN0IFRPT0xUSVBfTUFSR0lOID0gODtcbmV4cG9ydCBjb25zdCBUT09MVElQX0NBTENVTEFURURfTUFSR0lOID0gVE9PTFRJUF9BUlJPV19IRUlHSFQgLSBUT09MVElQX01BUkdJTjtcbmV4cG9ydCBjb25zdCBBUlJPV19NQVJHSU4gPSAxNTtcblxuY29uc3QgZ2V0VXBkYXRlZENvb3JkaW5hdGVzID0gKFxuICBuZXdDb250YWluZXJSZWN0OiBDbGllbnRSZWN0LFxuICB0b29sdGlwUGFyYW1zOiBDbGllbnRSZWN0IHwgbnVsbCxcbiAgcG9zaXRpb246IFBvc2l0aW9uLFxuICBvZmZzZXQ/OiBPZmZzZXQsXG4gIGlzT3BlbmVkPzogYm9vbGVhblxuKTogQ29vcmRpbmF0ZXNTdGF0ZSB8IG51bGwgPT4ge1xuICBjb25zdCB0b29sdGlwQ29vcmRpbmF0ZXMgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG4gIGlmICghdG9vbHRpcFBhcmFtcyB8fCAhaXNPcGVuZWQgfHwgIW5ld0NvbnRhaW5lclJlY3QpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGxlZnRDb3JlTGVmdENvb3JkaW5hdGUgPVxuICAgIG5ld0NvbnRhaW5lclJlY3QubGVmdCAtIHRvb2x0aXBQYXJhbXMud2lkdGggLSBUT09MVElQX0NBTENVTEFURURfTUFSR0lOO1xuXG4gIGNvbnN0IHJpZ2h0Q29yZUNvb3JkaW5hdGUgPVxuICAgIG5ld0NvbnRhaW5lclJlY3QubGVmdCArIG5ld0NvbnRhaW5lclJlY3Qud2lkdGggKyBUT09MVElQX0NBTENVTEFURURfTUFSR0lOO1xuXG4gIGNvbnN0IHRvcENvcmVDb29yZGluYXRlID1cbiAgICBuZXdDb250YWluZXJSZWN0LnRvcCArXG4gICAgd2luZG93LnBhZ2VZT2Zmc2V0IC1cbiAgICB0b29sdGlwUGFyYW1zLmhlaWdodCAtXG4gICAgVE9PTFRJUF9DQUxDVUxBVEVEX01BUkdJTjtcblxuICBjb25zdCBib3R0b21Db3JlQ29vcmRpbmF0ZSA9XG4gICAgbmV3Q29udGFpbmVyUmVjdC50b3AgK1xuICAgIHdpbmRvdy5wYWdlWU9mZnNldCArXG4gICAgbmV3Q29udGFpbmVyUmVjdC5oZWlnaHQgK1xuICAgIFRPT0xUSVBfQ0FMQ1VMQVRFRF9NQVJHSU47XG5cbiAgY29uc3Qgc2lkZXNUb3BDb29yZGluYXRlT2ZFbmRQb3NpdGlvbiA9XG4gICAgbmV3Q29udGFpbmVyUmVjdC50b3AgK1xuICAgIHdpbmRvdy5wYWdlWU9mZnNldCAtXG4gICAgdG9vbHRpcFBhcmFtcy5oZWlnaHQgK1xuICAgIG5ld0NvbnRhaW5lclJlY3QuaGVpZ2h0ICtcbiAgICBBUlJPV19NQVJHSU47XG5cbiAgY29uc3Qgc2lkZXNUb3BDb29yZGluYXRlT2ZDZW50ZXJQb3NpdGlvbiA9XG4gICAgbmV3Q29udGFpbmVyUmVjdC50b3AgK1xuICAgIHdpbmRvdy5wYWdlWU9mZnNldCAtXG4gICAgdG9vbHRpcFBhcmFtcy5oZWlnaHQgLyAyICtcbiAgICBuZXdDb250YWluZXJSZWN0LmhlaWdodCAvIDI7XG5cbiAgY29uc3QgdG9wQW5kQm90dG9tQ29vcmRpbmF0ZU9mQ2VudGVyUG9zaXRpb24gPVxuICAgIG5ld0NvbnRhaW5lclJlY3QubGVmdCAtXG4gICAgdG9vbHRpcFBhcmFtcy53aWR0aCAvIDIgK1xuICAgIG5ld0NvbnRhaW5lclJlY3Qud2lkdGggLyAyO1xuXG4gIHN3aXRjaCAocG9zaXRpb24pIHtcbiAgICAvLyBUT1BcbiAgICBjYXNlIFBvc2l0aW9uLlRPUF9TVEFSVDpcbiAgICAgIHRvb2x0aXBDb29yZGluYXRlcy50b3AgPSB0b3BDb3JlQ29vcmRpbmF0ZTtcbiAgICAgIHRvb2x0aXBDb29yZGluYXRlcy5sZWZ0ID0gbmV3Q29udGFpbmVyUmVjdC5sZWZ0IC0gQVJST1dfTUFSR0lOO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFBvc2l0aW9uLlRPUDpcbiAgICAgIHRvb2x0aXBDb29yZGluYXRlcy50b3AgPSB0b3BDb3JlQ29vcmRpbmF0ZTtcbiAgICAgIHRvb2x0aXBDb29yZGluYXRlcy5sZWZ0ID0gdG9wQW5kQm90dG9tQ29vcmRpbmF0ZU9mQ2VudGVyUG9zaXRpb247XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgUG9zaXRpb24uVE9QX0VORDpcbiAgICAgIHRvb2x0aXBDb29yZGluYXRlcy50b3AgPSB0b3BDb3JlQ29vcmRpbmF0ZTtcbiAgICAgIHRvb2x0aXBDb29yZGluYXRlcy5sZWZ0ID1cbiAgICAgICAgbmV3Q29udGFpbmVyUmVjdC5sZWZ0IC1cbiAgICAgICAgdG9vbHRpcFBhcmFtcy53aWR0aCArXG4gICAgICAgIG5ld0NvbnRhaW5lclJlY3Qud2lkdGggK1xuICAgICAgICBBUlJPV19NQVJHSU47XG4gICAgICBicmVhaztcblxuICAgIC8vIExFRlRcbiAgICBjYXNlIFBvc2l0aW9uLkxFRlRfU1RBUlQ6XG4gICAgICB0b29sdGlwQ29vcmRpbmF0ZXMudG9wID1cbiAgICAgICAgbmV3Q29udGFpbmVyUmVjdC50b3AgKyB3aW5kb3cucGFnZVlPZmZzZXQgLSBBUlJPV19NQVJHSU47XG4gICAgICB0b29sdGlwQ29vcmRpbmF0ZXMubGVmdCA9IGxlZnRDb3JlTGVmdENvb3JkaW5hdGU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgUG9zaXRpb24uTEVGVDpcbiAgICAgIHRvb2x0aXBDb29yZGluYXRlcy50b3AgPSBzaWRlc1RvcENvb3JkaW5hdGVPZkNlbnRlclBvc2l0aW9uO1xuICAgICAgdG9vbHRpcENvb3JkaW5hdGVzLmxlZnQgPSBsZWZ0Q29yZUxlZnRDb29yZGluYXRlO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFBvc2l0aW9uLkxFRlRfRU5EOlxuICAgICAgdG9vbHRpcENvb3JkaW5hdGVzLnRvcCA9IHNpZGVzVG9wQ29vcmRpbmF0ZU9mRW5kUG9zaXRpb247XG4gICAgICB0b29sdGlwQ29vcmRpbmF0ZXMubGVmdCA9IGxlZnRDb3JlTGVmdENvb3JkaW5hdGU7XG4gICAgICBicmVhaztcblxuICAgIC8vIEJPVFRPTVxuICAgIGNhc2UgUG9zaXRpb24uQk9UVE9NX1NUQVJUOlxuICAgICAgdG9vbHRpcENvb3JkaW5hdGVzLnRvcCA9IGJvdHRvbUNvcmVDb29yZGluYXRlO1xuICAgICAgdG9vbHRpcENvb3JkaW5hdGVzLmxlZnQgPSBuZXdDb250YWluZXJSZWN0LmxlZnQgLSBBUlJPV19NQVJHSU47XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgUG9zaXRpb24uQk9UVE9NOlxuICAgICAgdG9vbHRpcENvb3JkaW5hdGVzLnRvcCA9IGJvdHRvbUNvcmVDb29yZGluYXRlO1xuICAgICAgdG9vbHRpcENvb3JkaW5hdGVzLmxlZnQgPSB0b3BBbmRCb3R0b21Db29yZGluYXRlT2ZDZW50ZXJQb3NpdGlvbjtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBQb3NpdGlvbi5CT1RUT01fRU5EOlxuICAgICAgdG9vbHRpcENvb3JkaW5hdGVzLnRvcCA9IGJvdHRvbUNvcmVDb29yZGluYXRlO1xuICAgICAgdG9vbHRpcENvb3JkaW5hdGVzLmxlZnQgPVxuICAgICAgICBuZXdDb250YWluZXJSZWN0LmxlZnQgLVxuICAgICAgICB0b29sdGlwUGFyYW1zLndpZHRoICtcbiAgICAgICAgbmV3Q29udGFpbmVyUmVjdC53aWR0aCArXG4gICAgICAgIEFSUk9XX01BUkdJTjtcbiAgICAgIGJyZWFrO1xuXG4gICAgLy8gUklHSFRcbiAgICBjYXNlIFBvc2l0aW9uLlJJR0hUX1NUQVJUOlxuICAgICAgdG9vbHRpcENvb3JkaW5hdGVzLnRvcCA9XG4gICAgICAgIG5ld0NvbnRhaW5lclJlY3QudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0IC0gQVJST1dfTUFSR0lOO1xuICAgICAgdG9vbHRpcENvb3JkaW5hdGVzLmxlZnQgPSByaWdodENvcmVDb29yZGluYXRlO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFBvc2l0aW9uLlJJR0hUOlxuICAgICAgdG9vbHRpcENvb3JkaW5hdGVzLnRvcCA9IHNpZGVzVG9wQ29vcmRpbmF0ZU9mQ2VudGVyUG9zaXRpb247XG4gICAgICB0b29sdGlwQ29vcmRpbmF0ZXMubGVmdCA9IHJpZ2h0Q29yZUNvb3JkaW5hdGU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgUG9zaXRpb24uUklHSFRfRU5EOlxuICAgICAgdG9vbHRpcENvb3JkaW5hdGVzLnRvcCA9IHNpZGVzVG9wQ29vcmRpbmF0ZU9mRW5kUG9zaXRpb247XG4gICAgICB0b29sdGlwQ29vcmRpbmF0ZXMubGVmdCA9IHJpZ2h0Q29yZUNvb3JkaW5hdGU7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBhc3NlcnROZXZlcihwb3NpdGlvbik7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiAhb2Zmc2V0XG4gICAgPyB0b29sdGlwQ29vcmRpbmF0ZXNcbiAgICA6IHtcbiAgICAgICAgdG9wOiB0b29sdGlwQ29vcmRpbmF0ZXMudG9wICsgb2Zmc2V0LnRvcCxcbiAgICAgICAgbGVmdDogdG9vbHRpcENvb3JkaW5hdGVzLmxlZnQgKyBvZmZzZXQubGVmdCxcbiAgICAgIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBnZXRVcGRhdGVkQ29vcmRpbmF0ZXM7XG4iLCJpbXBvcnQgUmVhY3QsIHtcbiAgdXNlU3RhdGUsXG4gIEZDLFxuICB1c2VFZmZlY3QsXG4gIHVzZVJlZixcbiAgUmVmT2JqZWN0LFxuICB1c2VMYXlvdXRFZmZlY3QsXG59IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGNzc21lbSBmcm9tICdjc3NtZW0nO1xuaW1wb3J0IHsgUG9zaXRpb24sIE9mZnNldCB9IGZyb20gJy4uL1Rvb2x0aXBlZENvbXBvbmVudC9pbnRlcmZhY2VzJztcbmltcG9ydCBnZXRSZWZCb3VuZGluZyBmcm9tICcuLi8uLi9oZWxwZXJzL2dldFJlZkJvdW5kaW5nJztcbmltcG9ydCBnZXRVcGRhdGVkQ29vcmRpbmF0ZXMgZnJvbSAnLi9nZXRVcGRhdGVkQ29vcmRpbmF0ZXMnO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vVG9vbHRpcENvbnRlbnQuY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcbmNvbnN0IGVtVG9vbHRpcCA9IGVtKCd0b29sdGlwJyk7XG5jb25zdCBlbVRvb2x0aXBVbmRlcmxheSA9IGVtKCd0b29sdGlwVW5kZXJsYXknKTtcbmNvbnN0IGVtVG9vbHRpcFdyYXBwZXIgPSBlbSgndG9vbHRpcFdyYXBwZXInKTtcbmNvbnN0IGVtVG9vbHRpcFRpdGxlID0gZW0oJ3Rvb2x0aXBUaXRsZScpO1xuXG5leHBvcnQgY29uc3QgYXNzZXJ0TmV2ZXIgPSAocG9zaXRpb246IG5ldmVyKTogbmV2ZXIgPT4ge1xuICB0aHJvdyBFcnJvcihgVW5leHBlY3RlZCBwb3NpdGlvbiAke3Bvc2l0aW9ufWApO1xufTtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgLyoqINCX0LDQs9C+0LvQvtCy0L7QuiDRgtGD0LvRgtC40L/QsC4g0J7RgiDQtdCz0L4g0L3QsNC70LjRh9C40Y8g0LfQsNCy0LjRgdGP0YIg0YDQsNC30LzQtdGA0Ysg0L7RgtGB0YLRg9C/0L7QsiDQsiDRgtGD0LvRgtC40L/QtSAqL1xuICB0aXRsZT86IHN0cmluZyB8IEpTWC5FbGVtZW50O1xuICAvKiog0J/QvtC30LjRhtC40Y8g0YLRg9C70YLQuNC/0LAg0L7RgtC90L7RgdC40YLQtdC70YzQvdC+INCy0YvQt9GL0LLQsNGO0YnQtdCz0L4g0LXQs9C+INGN0LvQtdC80LXQvdGC0LAgKi9cbiAgcG9zaXRpb246IFBvc2l0aW9uO1xuICAvKiog0KHQvNC10YnQtdC90LjQtSDQv9C+0LfQuNGG0LjQuCDRgtGD0LvRgtC40L/QsCDQvtGC0L3QvtGB0LjRgtC10LvRjNC90L4g0LHQu9C+0LrQsC3QutC+0L3RgtC10LnQvdC10YDQsCAqL1xuICBvZmZzZXQ/OiBPZmZzZXQ7XG4gIC8qKiDQodGB0YvQu9C60LAg0L3QsCBET00t0Y3Qu9C10LzQtdC90YIg0LHQu9C+0LrQsC3QutC+0L3RgtC10LnQvdC10YDQsCAqL1xuICBjb250YWluZXJSZWY6IFJlZk9iamVjdDxIVE1MRWxlbWVudD47XG4gIC8qKlxuICAgKiDQodGB0YvQu9C60LAg0L3QsCBET00t0Y3Qu9C10LzQtdC90YIg0YDQvtC00LjRgtC10LvRjNGB0LrQvtCz0L4g0LHQu9C+0LrQsC3QutC+0L3RgtC10LnQvdC10YDQsFxuICAgKlxuICAgKiDQmNGB0L/QvtC70YzQt9GD0LXRgtGB0Y8g0L/RgNC4INCy0LrQu9GO0YfQtdC90L3QvtC8INGE0LvQsNCz0LUgaXNMaW1pdGVkQnlDb250YWluZXIg0LTQu9GPINGC0L7Qs9C+LFxuICAgKiDRh9GC0L7QsdGLINCy0YvRh9C40YHQu9C40YLRjCDRiNC40YDQuNC90YMg0YLRg9C70YLQuNC/0LAg0L7RgtC90L7RgdC40YLQtdC70YzQvdC+INCy0L3QtdGI0L3QtdCz0L4g0LrQvtC90YLQtdC50L3QtdGA0LBcbiAgICovXG4gIHBhcmVudFJlZj86IFJlZk9iamVjdDxIVE1MRWxlbWVudD47XG4gIC8qKlxuICAgKiDQotGD0LvRgtC40L8g0YHQutGA0YvRgiDQv9C+INGD0LzQvtC70YfQsNC90LjRjlxuICAgKlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaXNPcGVuZWQ/OiBib29sZWFuO1xuICAvKipcbiAgICog0KLRg9C70YLQuNC/INC40LzQtdC10YIg0LzQsNC60YHQuNC80LDQu9GM0L3Rg9GOINGI0LjRgNC40L3RgyxcbiAgICog0YDQsNCy0L3Rg9GOINGI0LjRgNC40L3QtSDQutC+0L3RgtC10LnQvdC10YDQsC3RgtGA0LjQs9Cz0LXRgNCwXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBpc0xpbWl0ZWRCeUNvbnRhaW5lcj86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29vcmRpbmF0ZXNTdGF0ZSB7XG4gIHRvcDogbnVtYmVyO1xuICBsZWZ0OiBudW1iZXI7XG59XG5cbmNvbnN0IFRvb2x0aXBDb250ZW50OiBGQzxQcm9wcz4gPSAoe1xuICBpc09wZW5lZCA9IGZhbHNlLFxuICBjaGlsZHJlbixcbiAgdGl0bGUsXG4gIHBvc2l0aW9uLFxuICBvZmZzZXQsXG4gIGNvbnRhaW5lclJlZixcbiAgcGFyZW50UmVmLFxuICBpc0xpbWl0ZWRCeUNvbnRhaW5lciA9IGZhbHNlLFxufSkgPT4ge1xuICBjb25zdCBbdG9vbHRpcFBhcmFtcywgc2V0VG9vbHRpcFBhcmFtc10gPSB1c2VTdGF0ZTxDbGllbnRSZWN0IHwgbnVsbD4obnVsbCk7XG5cbiAgY29uc3QgW1xuICAgIGNvb3JkaW5hdGVzLFxuICAgIHNldFRvb2x0aXBDb29yZGluYXRlcyxcbiAgXSA9IHVzZVN0YXRlPENvb3JkaW5hdGVzU3RhdGUgfCBudWxsPih7XG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6IDAsXG4gIH0pO1xuXG4gIGNvbnN0IHRvb2x0aXBSZWYgPSB1c2VSZWYobnVsbCk7XG5cbiAgY29uc3QgY29udGFpbmVyUmVjdCA9IGdldFJlZkJvdW5kaW5nKGNvbnRhaW5lclJlZik7XG4gIGNvbnN0IHBhcmVudFJlY3QgPSBwYXJlbnRSZWYgJiYgZ2V0UmVmQm91bmRpbmcocGFyZW50UmVmKTtcblxuICBjb25zdCB1cGRhdGVUb29sdGlwQ29vcmRpbmF0ZXMgPSAoKSA9PlxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBjb25zdCByZWN0ID0gZ2V0UmVmQm91bmRpbmcoY29udGFpbmVyUmVmKTtcblxuICAgICAgaWYgKHJlY3QpIHtcbiAgICAgICAgc2V0VG9vbHRpcENvb3JkaW5hdGVzKFxuICAgICAgICAgIGdldFVwZGF0ZWRDb29yZGluYXRlcyhyZWN0LCB0b29sdGlwUGFyYW1zLCBwb3NpdGlvbiwgb2Zmc2V0LCBpc09wZW5lZClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIHNldFRvb2x0aXBQYXJhbXMoZ2V0UmVmQm91bmRpbmcodG9vbHRpcFJlZikpO1xuICB9LCBbY2hpbGRyZW5dKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHVwZGF0ZVRvb2x0aXBDb29yZGluYXRlcygpO1xuXG4gICAgaWYgKHdpbmRvdykge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHVwZGF0ZVRvb2x0aXBDb29yZGluYXRlcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmICh3aW5kb3cpIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHVwZGF0ZVRvb2x0aXBDb29yZGluYXRlcyk7XG4gICAgICB9XG4gICAgfTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtpc09wZW5lZCwgdG9vbHRpcFBhcmFtcywgcG9zaXRpb25dKTtcblxuICBpZiAoIWNvb3JkaW5hdGVzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBhcmVDb29yZGluYXRlc0NhbGN1bGF0ZWQgPVxuICAgIEJvb2xlYW4oY29vcmRpbmF0ZXMudG9wKSAmJiBCb29sZWFuKGNvb3JkaW5hdGVzLmxlZnQpO1xuXG4gIGxldCB0b29sdGlwV2lkdGggPVxuICAgIGNvbnRhaW5lclJlY3QgJiYgaXNMaW1pdGVkQnlDb250YWluZXIgPyBjb250YWluZXJSZWN0LndpZHRoIDogdW5kZWZpbmVkO1xuXG4gIGlmIChwYXJlbnRSZWN0ICYmIGlzTGltaXRlZEJ5Q29udGFpbmVyKSB7XG4gICAgdG9vbHRpcFdpZHRoID0gcGFyZW50UmVjdC53aWR0aDtcbiAgfVxuXG4gIHJldHVybiBSZWFjdERPTS5jcmVhdGVQb3J0YWwoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtlbVRvb2x0aXAoe1xuICAgICAgICBzaG93bjogYXJlQ29vcmRpbmF0ZXNDYWxjdWxhdGVkLFxuICAgICAgfSl9XG4gICAgICBzdHlsZT17e1xuICAgICAgICAuLi5jb29yZGluYXRlcyxcbiAgICAgICAgd2lkdGg6IHRvb2x0aXBXaWR0aCxcbiAgICAgICAgbWF4V2lkdGg6IHRvb2x0aXBXaWR0aCxcbiAgICAgIH19XG4gICAgICByZWY9e3Rvb2x0aXBSZWZ9XG4gICAgPlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2VtVG9vbHRpcFVuZGVybGF5KHsgcG9zaXRpb24gfSl9IGFyaWEtaGlkZGVuPVwidHJ1ZVwiIC8+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZW1Ub29sdGlwV3JhcHBlcih7IHRpdGxlZDogQm9vbGVhbih0aXRsZSkgfSl9PlxuICAgICAgICB7dGl0bGUgJiYgPHAgY2xhc3NOYW1lPXtlbVRvb2x0aXBUaXRsZSgpfT57dGl0bGV9PC9wPn1cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+LFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy1zc3IvcmVhY3QtaG9va3MtZ2xvYmFsLXNzclxuICAgIGRvY3VtZW50LmJvZHlcbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRvb2x0aXBDb250ZW50O1xuIiwiLyogZXNsaW50LWVudiBicm93c2VyICovXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIEZDLCB1c2VSZWYsIFJlYWN0Tm9kZSwgUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRvb2x0aXBDb250ZW50IGZyb20gJy4uL1Rvb2x0aXBDb250ZW50JztcbmltcG9ydCB7XG4gIFBvc2l0aW9uLFxuICBIb3ZlckV2ZW50cyxcbiAgRm9jdXNFdmVudHMsXG4gIFRvb2x0aXBlZFByb3BzLFxufSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG5leHBvcnQgeyBQb3NpdGlvbiB9O1xuXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBUb29sdGlwZWRQcm9wcyB7XG4gIGdldEV2ZW50czogKFxuICAgIG9wZW5Ub29sdGlwOiAoKSA9PiB2b2lkLFxuICAgIGNsb3NlVG9vbHRpcDogKCkgPT4gdm9pZFxuICApID0+IEhvdmVyRXZlbnRzIHwgRm9jdXNFdmVudHM7XG59XG5cbmNvbnN0IFRvb2x0aXBlZENvbXBvbmVudDogRkM8XG4gIHwgKFByb3BzICYge1xuICAgICAgY2hpbGRyZW4oXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIGNvbnRhaW5lclByb3BzOiBIb3ZlckV2ZW50cyB8IChGb2N1c0V2ZW50cyAmIHsgcmVmOiBSZWY8YW55PiB9KVxuICAgICAgKTogUmVhY3ROb2RlO1xuICAgIH0pXG4gIHwgUHJvcHNcbj4gPSAoe1xuICBjaGlsZHJlbixcbiAgdG9vbHRpcENvbnRlbnQsXG4gIGlzT3BlbmVkOiBpc09wZW5lZEJ5RGVmYXVsdCA9IGZhbHNlLFxuICB0aXRsZSxcbiAgcG9zaXRpb24sXG4gIG9mZnNldCxcbiAgZ2V0RXZlbnRzLFxuICBwYXJlbnRSZWYsXG4gIGlzTGltaXRlZEJ5Q29udGFpbmVyID0gZmFsc2UsXG4gIHRvb2x0aXBDYWxsYmFjayxcbn0pID0+IHtcbiAgY29uc3QgW2lzT3BlbmVkLCBzZXRJc09wZW5lZF0gPSB1c2VTdGF0ZTxib29sZWFuPihpc09wZW5lZEJ5RGVmYXVsdCk7XG4gIGNvbnN0IGNvbnRhaW5lclJlZiA9IHVzZVJlZihudWxsKTtcblxuICBjb25zdCBvcGVuVG9vbHRpcCA9ICgpID0+IHtcbiAgICBpZiAodG9vbHRpcENhbGxiYWNrKSB7XG4gICAgICB0b29sdGlwQ2FsbGJhY2soKTtcbiAgICB9XG4gICAgc2V0SXNPcGVuZWQodHJ1ZSk7XG4gIH07XG4gIGNvbnN0IGNsb3NlVG9vbHRpcCA9ICgpID0+IHNldElzT3BlbmVkKGZhbHNlKTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICB7dG9vbHRpcENvbnRlbnQgJiYgaXNPcGVuZWQgJiYgKFxuICAgICAgICA8VG9vbHRpcENvbnRlbnRcbiAgICAgICAgICBpc09wZW5lZD17aXNPcGVuZWR9XG4gICAgICAgICAgcG9zaXRpb249e3Bvc2l0aW9ufVxuICAgICAgICAgIG9mZnNldD17b2Zmc2V0fVxuICAgICAgICAgIHRpdGxlPXt0aXRsZX1cbiAgICAgICAgICBjb250YWluZXJSZWY9e2NvbnRhaW5lclJlZn1cbiAgICAgICAgICBwYXJlbnRSZWY9e3BhcmVudFJlZn1cbiAgICAgICAgICBpc0xpbWl0ZWRCeUNvbnRhaW5lcj17aXNMaW1pdGVkQnlDb250YWluZXJ9XG4gICAgICAgID5cbiAgICAgICAgICB7dG9vbHRpcENvbnRlbnQoKX1cbiAgICAgICAgPC9Ub29sdGlwQ29udGVudD5cbiAgICAgICl9XG5cbiAgICAgIHt0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicgPyAoXG4gICAgICAgIGNoaWxkcmVuKHtcbiAgICAgICAgICAuLi5nZXRFdmVudHMob3BlblRvb2x0aXAsIGNsb3NlVG9vbHRpcCksXG4gICAgICAgICAgcmVmOiBjb250YWluZXJSZWYsXG4gICAgICAgIH0pXG4gICAgICApIDogKFxuICAgICAgICA8ZGl2IHsuLi5nZXRFdmVudHMob3BlblRvb2x0aXAsIGNsb3NlVG9vbHRpcCl9IHJlZj17Y29udGFpbmVyUmVmfT5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRvb2x0aXBlZENvbXBvbmVudDtcbiIsImltcG9ydCBSZWFjdCwgeyBGQywgUmVhY3ROb2RlLCBSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVG9vbHRpcGVkQ29tcG9uZW50IGZyb20gJy4vVG9vbHRpcGVkQ29tcG9uZW50JztcbmltcG9ydCB7XG4gIFRvb2x0aXBlZFByb3BzLFxuICBIb3ZlckV2ZW50cyxcbiAgUG9zaXRpb24sXG59IGZyb20gJy4vVG9vbHRpcGVkQ29tcG9uZW50L2ludGVyZmFjZXMnO1xuXG5leHBvcnQgeyBQb3NpdGlvbiB9O1xuXG5mdW5jdGlvbiBnZXRIb3ZlckV2ZW50cyhcbiAgb3BlblRvb2x0aXA6ICgpID0+IHZvaWQsXG4gIGNsb3NlVG9vbHRpcDogKCkgPT4gdm9pZFxuKTogSG92ZXJFdmVudHMge1xuICByZXR1cm4ge1xuICAgIG9uTW91c2VFbnRlcjogb3BlblRvb2x0aXAsXG4gICAgb25Nb3VzZUxlYXZlOiBjbG9zZVRvb2x0aXAsXG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29udGFpbmVyUHJvcHMgZXh0ZW5kcyBIb3ZlckV2ZW50cyB7XG4gIHJlZjogUmVmPGFueT47XG59XG5cbmNvbnN0IFRvb2x0aXBlZDogRkM8XG4gIHwgKFRvb2x0aXBlZFByb3BzICYge1xuICAgICAgY2hpbGRyZW4oY29udGFpbmVyUHJvcHM6IENvbnRhaW5lclByb3BzKTogUmVhY3ROb2RlO1xuICAgIH0pXG4gIHwgVG9vbHRpcGVkUHJvcHNcbj4gPSAocHJvcHMpID0+IHtcbiAgcmV0dXJuIDxUb29sdGlwZWRDb21wb25lbnQgZ2V0RXZlbnRzPXtnZXRIb3ZlckV2ZW50c30gey4uLnByb3BzfSAvPjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRvb2x0aXBlZDtcbiIsIi8qKiDQpNGD0L3QutGG0LjRjyDQtNC70Y8g0LHQu9C+0LrQuNGA0L7QstC60Lgg0YHQutGA0L7Qu9C70LAg0L3QsCDRgdGC0YDQsNC90LjRhtC1LiAgKi9cbmV4cG9ydCBjb25zdCB0b2dnbGVQYWdlU2Nyb2xsID0gKHNob3VsZExvY2tXaW5kb3c6IGJvb2xlYW4pOiB2b2lkID0+IHtcbiAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9IHNob3VsZExvY2tXaW5kb3cgPyAnaGlkZGVuJyA6ICd2aXNpYmxlJztcbn07XG4iLCIvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cbmltcG9ydCBSZWFjdCwgeyBGQywgUmVhY3RFbGVtZW50LCB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0TW9kYWwgZnJvbSAncmVhY3QtbW9kYWwnO1xuaW1wb3J0IGNzc21lbSBmcm9tICdjc3NtZW0nO1xuaW1wb3J0IHsgdG9nZ2xlUGFnZVNjcm9sbCB9IGZyb20gJy4uL2hlbHBlcnMvdG9nZ2xlUGFnZVNjcm9sbCc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9Nb2RhbC5jc3MnO1xuXG5jb25zdCBlbSA9IGNzc21lbShzdHlsZXMpO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICAvKiDQmtC+0LzQv9C+0L3QtdC90YIt0YLRgNC40LPQs9C10YAsINCy0YvQt9GL0LLQsNGO0YnQuNC5INC80L7QtNCw0LvRjNC90L7QtSDQvtC60L3QviAqL1xuICB0cmlnZ2VyRWxlbWVudD86IChvbkNsaWNrOiAoKSA9PiB2b2lkKSA9PiBSZWFjdEVsZW1lbnQ7XG4gIC8qKlxuICAgKiDQntGC0LrRgNGL0YLQviDQvNC+0LTQsNC70YzQvdC+0LUg0L7QutC90L4g0LjQu9C4INC90LXRgi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGlzT3BlbmVkPzogYm9vbGVhbjtcbiAgLyog0JrQvtC80L/QvtC90LXQvdGCLdC60L7QvdGC0LXQvdGCLCDRgNCw0LfQvNC10YnQsNC10LzRi9C5INCy0L3Rg9GC0YDQuCDQvNC+0LTQsNC70YzQvdC+0LPQviDQvtC60L3QsCAqL1xuICBjaGlsZHJlbjogKGNsb3NlOiAoKSA9PiB2b2lkKSA9PiBSZWFjdEVsZW1lbnQ7XG4gIC8qKlxuICAgKiDQnNC+0LTQsNC70YzQvdC+0LUg0L7QutC90L4g0LTQu9GPINC/0L7QutCw0LfQsCDQv9GA0LXQtNGD0L/RgNC10LbQtNC10L3QuNGPINC40LvQuCDQvtGI0LjQsdC60LgsXG4gICAqINC60L7RgtC+0YDQvtC1INCy0YHQtdCz0LTQsCDQvtGC0LrRgNGL0YLQviDQuCDQtdCz0L4g0L3QtdC70YzQt9GPINC30LDQutGA0YvRgtGMXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBpc0FsZXJ0PzogYm9vbGVhbjtcbiAgb25DbG9zZT86ICgpID0+IHZvaWQ7XG4gIHBvcHVwPzogYm9vbGVhbjtcbn1cblxuY29uc3QgTW9kYWw6IEZDPFByb3BzPiA9ICh7XG4gIHRyaWdnZXJFbGVtZW50LFxuICBjaGlsZHJlbixcbiAgaXNPcGVuZWQgPSBmYWxzZSxcbiAgaXNBbGVydCA9IGZhbHNlLFxuICBvbkNsb3NlLFxuICBwb3B1cCxcbn0pID0+IHtcbiAgY29uc3QgW2lzT3Blbiwgc2V0T3Blbl0gPSB1c2VTdGF0ZTxib29sZWFuPihpc09wZW5lZCk7XG5cbiAgY29uc3Qgb3BlbiA9ICgpID0+IHtcbiAgICBzZXRPcGVuKHRydWUpO1xuICAgIHRvZ2dsZVBhZ2VTY3JvbGwodHJ1ZSk7XG4gIH07XG5cbiAgY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgc2V0T3BlbihmYWxzZSk7XG4gICAgdG9nZ2xlUGFnZVNjcm9sbChmYWxzZSk7XG4gICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgIG9uQ2xvc2UoKTtcbiAgICB9XG4gIH07XG5cbiAgbGV0IG92ZXJsYXlFbGVtZW50OiBIVE1MRWxlbWVudDtcblxuICBjb25zdCBjbG9zZU9uRXNjID0gKHsga2V5IH06IHsga2V5OiBzdHJpbmcgfSkgPT4ge1xuICAgIGlmIChrZXkgPT09ICdFc2NhcGUnKSB7XG4gICAgICBjbG9zZSgpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBjbG9zZU9uQ2xpY2tPdXRzaWRlID0gKHsgdGFyZ2V0IH06IEV2ZW50KSA9PiB7XG4gICAgY29uc3QgY2xpY2tlZE91dHNpZGUgPSB0YXJnZXQgPT09IG92ZXJsYXlFbGVtZW50O1xuICAgIGlmIChjbGlja2VkT3V0c2lkZSkge1xuICAgICAgY2xvc2UoKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgb25BZnRlck9wZW4gPSAoKSA9PiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzLXNzci9yZWFjdC1ob29rcy1nbG9iYWwtc3NyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGNsb3NlT25Fc2MpO1xuICAgIG92ZXJsYXlFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2xvc2VPbkNsaWNrT3V0c2lkZSk7XG4gIH07XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKG92ZXJsYXlFbGVtZW50KSB7XG4gICAgICAgIG92ZXJsYXlFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2xvc2VPbkNsaWNrT3V0c2lkZSk7XG4gICAgICB9XG5cbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBjbG9zZU9uRXNjKTtcbiAgICB9O1xuICB9KTtcblxuICBpZiAoaXNBbGVydCkge1xuICAgIHJldHVybiAoXG4gICAgICA8UmVhY3RNb2RhbFxuICAgICAgICBpc09wZW5cbiAgICAgICAgYXJpYUhpZGVBcHA9e2ZhbHNlfVxuICAgICAgICBjbGFzc05hbWU9e2VtKCdyb290JykoKX1cbiAgICAgICAgb3ZlcmxheUNsYXNzTmFtZT17ZW0oJ292ZXJsYXknKSh7IHBvcHVwIH0pfVxuICAgICAgPlxuICAgICAgICB7Y2hpbGRyZW4oKCkgPT4gdW5kZWZpbmVkKX1cbiAgICAgIDwvUmVhY3RNb2RhbD5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAge3RyaWdnZXJFbGVtZW50ICYmIHRyaWdnZXJFbGVtZW50KG9wZW4pfVxuICAgICAgPFJlYWN0TW9kYWxcbiAgICAgICAgaXNPcGVuPXtpc09wZW59XG4gICAgICAgIGFyaWFIaWRlQXBwPXtmYWxzZX1cbiAgICAgICAgY2xhc3NOYW1lPXtlbSgncm9vdCcpKCl9XG4gICAgICAgIG92ZXJsYXlDbGFzc05hbWU9e2VtKCdvdmVybGF5JykoeyBwb3B1cCB9KX1cbiAgICAgICAgc2hvdWxkQ2xvc2VPbk92ZXJsYXlDbGlja1xuICAgICAgICBvbkFmdGVyT3Blbj17b25BZnRlck9wZW59XG4gICAgICAgIG92ZXJsYXlSZWY9eyhub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICAgIG92ZXJsYXlFbGVtZW50ID0gbm9kZTtcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAge2NoaWxkcmVuKGNsb3NlKX1cbiAgICAgIDwvUmVhY3RNb2RhbD5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1vZGFsO1xuIiwiaW1wb3J0IFJlYWN0LCB7IEZDLCBSZWFjdE5vZGUsIENTU1Byb3BlcnRpZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3NzbWVtIGZyb20gJ2Nzc21lbSc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9DYXJkLmNzcyc7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmV4cG9ydCBlbnVtIFBhZGRpbmcge1xuICBYUyA9ICd4cycsXG4gIFMgPSAncycsXG4gIE0gPSAnbScsXG59XG5cbmV4cG9ydCBlbnVtIFNoYWRvd1NpemUge1xuICBTID0gJ3MnLFxuICBNID0gJ20nLFxuICBMID0gJ2wnLFxufVxuXG50eXBlIFByb3BzID0ge1xuICAvKiogUNCw0LfQvNC10YAg0LLQvdGD0YLRgNC10L3QvdC40YUg0L7RgtGB0YLRg9C/0L7QsiAqL1xuICBwYWRkaW5nPzogUGFkZGluZztcbiAgLyoqINCg0LDQt9C80LXRgCDRgtC10L3QuCDQv9C+0LQg0LrQsNGA0YLQvtGH0LrQvtC5ICovXG4gIHNoYWRvd1NpemU/OiBTaGFkb3dTaXplO1xuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xuICBzdHlsZT86IENTU1Byb3BlcnRpZXM7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbn07XG5cbmNvbnN0IENhcmQ6IEZDPFByb3BzPiA9ICh7IHBhZGRpbmcsIHNoYWRvd1NpemUsIGNsYXNzTmFtZSwgLi4ucHJvcHMgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIHsuLi5wcm9wc31cbiAgICAgIGNsYXNzTmFtZT17ZW0oJ2NhcmQnKSh7IHBhZGRpbmcsIHNoYWRvd1NpemUgfSwgY2xhc3NOYW1lKX1cbiAgICAvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FyZDtcbiIsImltcG9ydCBSZWFjdCwgeyBGQywgUmVhY3ROb2RlLCB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNzc21lbSBmcm9tICdjc3NtZW0nO1xuXG5pbXBvcnQgVG9vbHRpcGVkLCB7IFBvc2l0aW9uIH0gZnJvbSAnLi4vVG9vbHRpcGVkJztcbmltcG9ydCBNb2RhbCBmcm9tICcuLi9Nb2RhbCc7XG5pbXBvcnQgQ2FyZCwgeyBQYWRkaW5nIH0gZnJvbSAnLi4vQ2FyZCc7XG5cbmltcG9ydCBDbG9zZUljb24gZnJvbSAnLi4vSWNvbi9Dcm9zcyc7XG5cbmltcG9ydCB7IGlzTW9iaWxlIH0gZnJvbSAnLi4vaGVscGVycy9hZGFwdGl2ZSc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9IaW50LmNzcyc7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmV4cG9ydCB7IFBvc2l0aW9uIH07XG5cbmV4cG9ydCBlbnVtIFZhcmlhbnQge1xuICBSRUdVTEFSID0gJ3JlZ3VsYXInLFxuICBNSU5JID0gJ21pbmknLFxufVxuXG5pbnRlcmZhY2UgUHJvcHMge1xuICB0b29sdGlwQ29udGVudDogKCkgPT4gUmVhY3ROb2RlO1xuICBwb3NpdGlvbjogUG9zaXRpb247XG4gIHRpdGxlPzogc3RyaW5nIHwgSlNYLkVsZW1lbnQ7XG4gIHZhcmlhbnQ/OiBWYXJpYW50O1xuICBvZmZzZXQ/OiB7IHRvcDogbnVtYmVyOyBsZWZ0OiBudW1iZXIgfTtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICB0b29sdGlwQ2FsbGJhY2s/OiAoKSA9PiB2b2lkO1xufVxuXG5jb25zdCBIaW50OiBGQzxQcm9wcz4gPSAoe1xuICB2YXJpYW50ID0gVmFyaWFudC5SRUdVTEFSLFxuICBjbGFzc05hbWUsXG4gIC4uLnByb3BzXG59KSA9PiB7XG4gIGNvbnN0IFtpc01vYmlsZVJlc3VsdCwgc2V0SXNNb2JpbGVSZXN1bHRdID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0SXNNb2JpbGVSZXN1bHQoaXNNb2JpbGUoKSk7XG4gIH0sIFtdKTtcblxuICBjb25zdCB7IHRpdGxlLCB0b29sdGlwQ29udGVudCB9ID0gcHJvcHM7XG5cbiAgY29uc3QgZGVza3RvcEhpbnQgPSAoXG4gICAgPFRvb2x0aXBlZCB7Li4ucHJvcHN9PlxuICAgICAgeyh0b29sdGlwUHJvcHMpID0+IChcbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIHsuLi50b29sdGlwUHJvcHN9XG4gICAgICAgICAgY2xhc3NOYW1lPXtlbSgnaGludCcpKHsgdmFyaWFudCB9LCBjbGFzc05hbWUpfVxuICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgIHRhYkluZGV4PXstMX1cbiAgICAgICAgPlxuICAgICAgICAgID9cbiAgICAgICAgPC9idXR0b24+XG4gICAgICApfVxuICAgIDwvVG9vbHRpcGVkPlxuICApO1xuXG4gIGNvbnN0IG1vYmlsZUhpbnQgPSAoXG4gICAgPE1vZGFsXG4gICAgICB0cmlnZ2VyRWxlbWVudD17KG9uQ2xpY2spID0+IChcbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICAgICAgY2xhc3NOYW1lPXtlbSgnaGludCcpKHsgdmFyaWFudCB9LCBjbGFzc05hbWUpfVxuICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgIHRhYkluZGV4PXstMX1cbiAgICAgICAgPlxuICAgICAgICAgID9cbiAgICAgICAgPC9idXR0b24+XG4gICAgICApfVxuICAgID5cbiAgICAgIHsoY2xvc2UpID0+IChcbiAgICAgICAgPENhcmQgcGFkZGluZz17UGFkZGluZy5NfT5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBvbkNsaWNrPXtjbG9zZX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ21vYmlsZUNsb3NlQnV0dG9uJykoKX1cbiAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxDbG9zZUljb24gd2lkdGg9XCIyMlwiIGhlaWdodD1cIjIyXCIgZmlsbD1cIndoaXRlXCIgLz5cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICB7dGl0bGUgJiYgPHAgY2xhc3NOYW1lPXtlbSgnaGludFRpdGxlJykoKX0+e3RpdGxlfTwvcD59XG4gICAgICAgICAge3Rvb2x0aXBDb250ZW50KCl9XG4gICAgICAgIDwvQ2FyZD5cbiAgICAgICl9XG4gICAgPC9Nb2RhbD5cbiAgKTtcblxuICByZXR1cm4gaXNNb2JpbGVSZXN1bHQgPyBtb2JpbGVIaW50IDogZGVza3RvcEhpbnQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBIaW50O1xuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IGNzc21lbSBmcm9tICdjc3NtZW0nO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vRHJvcGRvd24uY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuY29uc3QgdHJhbnNpdGlvbkNsYXNzTWFwID0ge1xuICBlbnRlcmVkOiBlbSgnZW50ZXJlZCcpKCksXG4gIGV4aXRpbmc6IGVtKCdleGl0aW5nJykoKSxcbiAgZXhpdGVkOiBlbSgnZXhpdGVkJykoKSxcbn07XG5cbmNvbnN0IEFOSU1BVElPTl9USU1FT1VUID0ge1xuICBlbnRlcjogMCxcbiAgZXhpdDogMjQwLFxufTtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgY2hpbGRyZW46IFJlYWN0Tm9kZTtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBpc0Z1bGxXaWR0aD86IGJvb2xlYW47XG4gIGlzVmlzaWJsZT86IGJvb2xlYW47XG59XG5cbmNvbnN0IERyb3Bkb3duOiBSZWFjdC5GQzxQcm9wcz4gPSAoe1xuICBjaGlsZHJlbixcbiAgY2xhc3NOYW1lID0gJycsXG4gIGlzRnVsbFdpZHRoID0gZmFsc2UsXG4gIGlzVmlzaWJsZSA9IHRydWUsXG59KSA9PiAoXG4gIDxkaXY+XG4gICAgPFRyYW5zaXRpb24gaW49e2lzVmlzaWJsZX0gdGltZW91dD17QU5JTUFUSU9OX1RJTUVPVVR9IHVubW91bnRPbkV4aXQ+XG4gICAgICB7KHN0YXRlOiBrZXlvZiB0eXBlb2YgdHJhbnNpdGlvbkNsYXNzTWFwKSA9PiAoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9e2VtKCdkcm9wZG93bicpKHsgZnVsbFdpZHRoOiBpc0Z1bGxXaWR0aCB9LCBbXG4gICAgICAgICAgICB0cmFuc2l0aW9uQ2xhc3NNYXBbc3RhdGVdLFxuICAgICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICAgIF0pfVxuICAgICAgICA+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgPC9UcmFuc2l0aW9uPlxuICA8L2Rpdj5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IERyb3Bkb3duO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgSWNvbiBhcyBJY29uVHlwZSB9IGZyb20gJ0BpbnRlcmZhY2VzL2ludGVyZmFjZXMnO1xuXG5jb25zdCBJY29uR2VhcjogUmVhY3QuRkM8SWNvblR5cGU+ID0gKHtcbiAgY2xhc3NOYW1lLFxuICBmaWxsID0gJyM4Njg2ODYnLFxuICBoZWlnaHQgPSAxOCxcbiAgd2lkdGggPSAxOCxcbn0pID0+IChcbiAgPHN2Z1xuICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgIGZpbGw9e2ZpbGx9XG4gICAgaGVpZ2h0PXtoZWlnaHR9XG4gICAgdmlld0JveD1cIjAgMCAyMCAyMVwiXG4gICAgd2lkdGg9e3dpZHRofVxuICA+XG4gICAgPHBhdGhcbiAgICAgIGZpbGxSdWxlPVwibm9uemVyb1wiXG4gICAgICBkPVwiTTcuMTI4IDE4Ljk3OGE5LjQ0NyA5LjQ0NyAwIDAgMS0xLjQ0Ny0uNi42NzIuNjcyIDAgMCAxLS4zNTMtLjYzbC4wNjEtMS4xNzlhLjY1MS42NTEgMCAwIDAtLjI1LS41NCA3LjkzNSA3LjkzNSAwIDAgMS0xLjE2OC0xLjE2OC42NS42NSAwIDAgMC0uNTQtLjI0OWwtMS4xNzkuMDU5YS42NjkuNjY5IDAgMCAxLS42My0uMzUxIDkuNDQ3IDkuNDQ3IDAgMCAxLS42LTEuNDQ3LjY3My42NzMgMCAwIDEgLjE5Ni0uNjk4bDEuMTI1LTEuMDE2QTcuNjkgNy42OSAwIDAgMSAyLjI1NyAxMGMwLS4zOTMuMDI4LS43ODEuMDg2LTEuMTU4TDEuMjE4IDcuODI1YS42NzIuNjcyIDAgMCAxLS4xOTYtLjY5OGMuMTYtLjUwMi4zNjItLjk4NC42LTEuNDQ2YS42Ny42NyAwIDAgMSAuNjMtLjM1MmwxLjE3OS4wNTlhLjY0Ni42NDYgMCAwIDAgLjU0LS4yNDljLjM0Ny0uNDI4LjczOS0uODIxIDEuMTY5LTEuMTY4YS42NTQuNjU0IDAgMCAwIC4yNS0uNTRsLS4wNjItMS4xOGEuNjcyLjY3MiAwIDAgMSAuMzUzLS42M2MuNDYxLS4yMzcuOTQ1LS40NCAxLjQ0Ny0uNmEuNjc1LjY3NSAwIDAgMSAuNjk2LjE5Nkw4Ljg0IDIuMzQyYTcuODcgNy44NyAwIDAgMSAyLjMyIDBsMS4wMTUtMS4xMjVhLjY3Ni42NzYgMCAwIDEgLjY5Ny0uMTk2Yy41MDMuMTYuOTg3LjM2MyAxLjQ0Ny42YS42Ny42NyAwIDAgMSAuMzUyLjYzbC0uMDYgMS4xOGEuNjUuNjUgMCAwIDAgLjI0OS41NGMuNDMuMzQ3LjgyMi43NCAxLjE2OSAxLjE2OC4xMzIuMTY1LjMzLjI2LjU0LjI0OWwxLjE4LS4wNmMuMjYtLjAxMy41MS4xMjIuNjI5LjM1My4yMzguNDYyLjQ0Ljk0NC42IDEuNDQ2YS42NzUuNjc1IDAgMCAxLS4xOTYuNjk4TDE3LjY1OCA4Ljg0YTcuODU0IDcuODU0IDAgMCAxIDAgMi4zMThsMS4xMjQgMS4wMTZjLjE5My4xNzUuMjc1LjQ1LjE5Ny42OThhOS40NTIgOS40NTIgMCAwIDEtLjYwMSAxLjQ0Ny42NjYuNjY2IDAgMCAxLS42My4zNWwtMS4xOC0uMDU4YS42NS42NSAwIDAgMC0uNTQuMjQ5Yy0uMzQ2LjQyOC0uNzM5LjgyMS0xLjE2OCAxLjE2OWEuNjQ3LjY0NyAwIDAgMC0uMjQ5LjU0bC4wNiAxLjE3OGEuNjcuNjcgMCAwIDEtLjM1Mi42M2MtLjQ2LjIzOC0uOTQ0LjQ0LTEuNDQ3LjZhLjY3My42NzMgMCAwIDEtLjY5Ny0uMTk2bC0xLjAxNS0xLjEyNGE3Ljg2NiA3Ljg2NiAwIDAgMS0yLjMyIDBsLTEuMDE2IDEuMTI0YS42NzMuNjczIDAgMCAxLS42OTYuMTk2TTEwIDEzLjA4YTMuMDggMy4wOCAwIDEgMC0uMDAyLTYuMTZBMy4wOCAzLjA4IDAgMCAwIDEwIDEzLjA4XCJcbiAgICAvPlxuICA8L3N2Zz5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IEljb25HZWFyO1xuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcblxuaW1wb3J0IEJ1dHRvbkljb24gZnJvbSAnQGNvbXBvbmVudHMvQnV0dG9uSWNvbi9CdXR0b25JY29uJztcbmltcG9ydCBEcm9wZG93biBmcm9tICdAY29tcG9uZW50cy9Ecm9wZG93bi9Ecm9wZG93bic7XG5pbXBvcnQgSWNvbkNyb3NzIGZyb20gJ0Bjb21wb25lbnRzL0ljb24vSWNvbkNyb3NzJztcbmltcG9ydCBJY29uR2VhciBmcm9tICdAY29tcG9uZW50cy9JY29uL0ljb25HZWFyJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0NvbnRleHRNZW51LmNzcyc7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGNoaWxkcmVuOiBKU1guRWxlbWVudFtdO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIGljb24/OiBSZWFjdE5vZGU7XG4gIGlzVmlzaWJsZT86IGJvb2xlYW47XG4gIG9uQ2hhbmdlPyhpc1Zpc2libGU6IGJvb2xlYW4pOiB2b2lkO1xuICB0aXRsZT86IHN0cmluZztcbn1cblxuY29uc3QgQ29udGV4dE1lbnU6IFJlYWN0LkZDPFByb3BzPiA9ICh7XG4gIGNoaWxkcmVuLFxuICBjbGFzc05hbWUsXG4gIGljb24gPSA8SWNvbkdlYXIgLz4sXG4gIGlzVmlzaWJsZSA9IGZhbHNlLFxuICBvbkNoYW5nZSxcbiAgdGl0bGUsXG59KSA9PiB7XG4gIGNvbnN0IGhhbmRsZVRyaWdnZXJDbGljayA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKHRydWUpO1xuICAgIH1cbiAgfSwgW29uQ2hhbmdlXSk7XG5cbiAgY29uc3QgaGFuZGxlQnV0dG9uQ2xvc2VDbGljayA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGZhbHNlKTtcbiAgICB9XG4gIH0sIFtvbkNoYW5nZV0pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2VtKCdjb250ZXh0TWVudScpKG51bGwsIGNsYXNzTmFtZSl9PlxuICAgICAgPEJ1dHRvbkljb25cbiAgICAgICAgY2xhc3NOYW1lPXtlbSgnZG90c0NvbnRhaW5lcicpKCl9XG4gICAgICAgIG9uQ2xpY2s9e2hhbmRsZVRyaWdnZXJDbGlja31cbiAgICAgID5cbiAgICAgICAge2ljb259XG4gICAgICA8L0J1dHRvbkljb24+XG4gICAgICA8RHJvcGRvd24gY2xhc3NOYW1lPXtlbSgnZHJvcGRvd24nKSgpfSBpc1Zpc2libGU9e2lzVmlzaWJsZX0+XG4gICAgICAgIDxwIGNsYXNzTmFtZT17ZW0oJ3RpdGxlJykoKX0+e3RpdGxlfTwvcD5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCdvcHRpb25Db250YWluZXInKSgpfT5cbiAgICAgICAgICB7UmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCAoY2hpbGQ6IEpTWC5FbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZFByb3BzID0ge1xuICAgICAgICAgICAgICAuLi5jaGlsZC5wcm9wcyxcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBlbSgnb3B0aW9uSXRlbScpKG51bGwsIGNoaWxkLnByb3BzLmNsYXNzTmFtZSksXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCBjaGlsZFByb3BzKTtcbiAgICAgICAgICB9KX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxCdXR0b25JY29uXG4gICAgICAgICAgY2xhc3NOYW1lPXtlbSgnY2xvc2VCdXR0b24nKSgpfVxuICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUJ1dHRvbkNsb3NlQ2xpY2t9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbkNyb3NzIC8+XG4gICAgICAgIDwvQnV0dG9uSWNvbj5cbiAgICAgIDwvRHJvcGRvd24+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSZWFjdC5tZW1vKENvbnRleHRNZW51KTtcbiIsImltcG9ydCB7IHVzZVN0YXRlLCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgYnJvd3NlciB9IGZyb20gJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbC10cyc7XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW2lzTG9hZGluZywgc2V0TG9hZGluZ1N0YXRlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3N0YXR1cywgc2V0U3RhdHVzXSA9IHVzZVN0YXRlKG51bGwpO1xuXG4gIGNvbnN0IGhhbmRsZUJhY2tncm91bmRSZXF1ZXN0ID0gdXNlQ2FsbGJhY2soYXN5bmMgKHsgY29tbWFuZCwgLi4ucmVzdCB9KSA9PiB7XG4gICAgc2V0RXJyb3IobnVsbCk7XG4gICAgc2V0TG9hZGluZ1N0YXRlKHRydWUpO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBicm93c2VyLnJ1bnRpbWUuc2VuZE1lc3NhZ2Uoe1xuICAgICAgY29tbWFuZCxcbiAgICAgIC4uLnJlc3QsXG4gICAgfSk7XG5cbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAnZXJyb3InICYmIHJlc3BvbnNlLmVycm9yKSB7XG4gICAgICBzZXRFcnJvcihyZXNwb25zZS5lcnJvcik7XG4gICAgfVxuXG4gICAgc2V0TG9hZGluZ1N0YXRlKGZhbHNlKTtcbiAgICBzZXRTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiB7XG4gICAgZXJyb3IsXG4gICAgaGFuZGxlQmFja2dyb3VuZFJlcXVlc3QsXG4gICAgaXNMb2FkaW5nLFxuICAgIHN0YXR1cyxcbiAgfTtcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgc3RvcmUgZnJvbSAnLi4vc3RvcmUnO1xuaW1wb3J0IHsgU0laRSB9IGZyb20gJy4uL3JlZHVjZXJzL3RoZW1lJztcblxuY29uc3QgZ2V0VGhlbWUgPSAoa2V5OiBzdHJpbmcpID0+IHN0b3JlLmdldFN0YXRlKCkudGhlbWVba2V5XTtcbmNvbnN0IGdldFNpemUgPSAoa2V5OiBTSVpFKSA9PiBzdG9yZS5nZXRTdGF0ZSgpLnRoZW1lLnNpemVzW2tleV07XG5cbmV4cG9ydCBkZWZhdWx0IGdldFRoZW1lO1xuZXhwb3J0IHsgZ2V0U2l6ZSB9O1xuIiwiaW1wb3J0IHsgZ2V0U2l6ZSB9IGZyb20gJy4vdGhlbWUnO1xuaW1wb3J0IHsgU0laRSB9IGZyb20gJy4uL3JlZHVjZXJzL3RoZW1lJztcblxuLyogSlMgaGVscGVycyAqL1xuY29uc3QgaXNNb2JpbGUgPSAoKSA9PiB7XG4gIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggPD0gZ2V0U2l6ZShTSVpFLk1PQklMRSk7XG59O1xuXG5jb25zdCBpc1RhYmxldCA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggPiBnZXRTaXplKFNJWkUuTU9CSUxFKSAmJlxuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCA8PSBnZXRTaXplKFNJWkUuVEFCTEVUKVxuICApO1xufTtcblxuY29uc3QgaXNEZXNrdG9wID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCA+IGdldFNpemUoU0laRS5UQUJMRVQpICYmXG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoIDw9IGdldFNpemUoU0laRS5ERVNLVE9QKVxuICApO1xufTtcblxuY29uc3QgaXNEZXNrdG9wV2lkZSA9ICgpID0+IHtcbiAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCA+IGdldFNpemUoU0laRS5ERVNLVE9QKTtcbn07XG5cbmNvbnN0IGlzVGFibGV0VXAgPSAoKSA9PiB7XG4gIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggPiBnZXRTaXplKFNJWkUuTU9CSUxFKTtcbn07XG5cbmNvbnN0IGlzRGVza3RvcFVwID0gKCkgPT4ge1xuICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoID4gZ2V0U2l6ZShTSVpFLlRBQkxFVCk7XG59O1xuXG5leHBvcnQge1xuICBpc01vYmlsZSxcbiAgaXNUYWJsZXQsXG4gIGlzRGVza3RvcCxcbiAgaXNEZXNrdG9wV2lkZSxcbiAgaXNUYWJsZXRVcCxcbiAgaXNEZXNrdG9wVXAsXG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNhblVzZURPTSA9IHVuZGVmaW5lZDtcblxudmFyIF9leGVudiA9IHJlcXVpcmUoXCJleGVudlwiKTtcblxudmFyIF9leGVudjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVudik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBFRSA9IF9leGVudjIuZGVmYXVsdDtcblxudmFyIFNhZmVIVE1MRWxlbWVudCA9IEVFLmNhblVzZURPTSA/IHdpbmRvdy5IVE1MRWxlbWVudCA6IHt9O1xuXG52YXIgY2FuVXNlRE9NID0gZXhwb3J0cy5jYW5Vc2VET00gPSBFRS5jYW5Vc2VET007XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFNhZmVIVE1MRWxlbWVudDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgY3NzbWVtIGZyb20gJ2Nzc21lbSc7XG5pbXBvcnQgeyBicm93c2VyIH0gZnJvbSAnd2ViZXh0ZW5zaW9uLXBvbHlmaWxsLXRzJztcblxuaW1wb3J0IHsgZmlsZXMgfSBmcm9tICdAY29uc3RhbnRzL2ZpbGVzJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0xvZ28uY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBoZWlnaHQ/OiBudW1iZXI7XG4gIHNpemU/OiBzdHJpbmc7XG4gIHdpZHRoPzogc3RyaW5nO1xufVxuXG5jb25zdCBMb2dvOiBSZWFjdC5GQzxQcm9wcz4gPSAoeyBjbGFzc05hbWUsIGhlaWdodCwgc2l6ZSA9ICdtJywgd2lkdGggfSkgPT4gKFxuICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2xvZ28nKSh7IHNpemUgfSwgY2xhc3NOYW1lKX0+XG4gICAgPGltZ1xuICAgICAgYWx0PVwiXCJcbiAgICAgIGNsYXNzTmFtZT17ZW0oJ2lubmVyJykoKX1cbiAgICAgIGhlaWdodD17aGVpZ2h0fVxuICAgICAgc3JjPXticm93c2VyLnJ1bnRpbWUuZ2V0VVJMKGZpbGVzLmltYWdlcy5MT0dPKX1cbiAgICAgIHdpZHRoPXt3aWR0aH1cbiAgICAvPlxuICA8L2Rpdj5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IExvZ287XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBJY29uIGFzIEljb25UeXBlIH0gZnJvbSAnQGludGVyZmFjZXMvaW50ZXJmYWNlcyc7XG5cbmNvbnN0IEljb25DaGVjazogUmVhY3QuRkM8SWNvblR5cGU+ID0gKHtcbiAgY2xhc3NOYW1lLFxuICBoZWlnaHQgPSAxNixcbiAgd2lkdGggPSAxNixcbn0pID0+IChcbiAgPHN2ZyBjbGFzc05hbWU9e2NsYXNzTmFtZX0gaGVpZ2h0PXtoZWlnaHR9IHZpZXdCb3g9XCIwIDAgMTYgMTZcIiB3aWR0aD17d2lkdGh9PlxuICAgIDxwYXRoXG4gICAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICAgIGQ9XCJtMTMuNzAyNzUgNC4zMDA3NWMtLjQwMS0uNDAxLTEuMDU5LS40MDEtMS40NiAwbC01Ljk4OSA1Ljk4OC0yLjQ5OC0yLjQ5OGMtLjM5My0uMzkzLTEuMDM3LS4zOTMtMS40MzEgMGwtLjAzLjAzYy0uMzkzLjM5My0uMzkzIDEuMDM4IDAgMS40MzFsMy4yNDQgMy4yNDNjLjM5My4zOTQgMS4wMzguMzk0IDEuNDMxIDBsLjAxNS0uMDE0LjAxNC0uMDE1IDYuNzA0LTYuNzA0Yy40MDItLjQwMS40MDItMS4wNTkgMC0xLjQ2MVwiXG4gICAgLz5cbiAgPC9zdmc+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBJY29uQ2hlY2s7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBJY29uIGFzIEljb25UeXBlIH0gZnJvbSAnQGludGVyZmFjZXMvaW50ZXJmYWNlcyc7XG5cbmNvbnN0IEljb25GbGFnRW46IFJlYWN0LkZDPEljb25UeXBlPiA9ICh7XG4gIGNsYXNzTmFtZSxcbiAgaGVpZ2h0ID0gMjAsXG4gIHdpZHRoID0gMjAsXG59KSA9PiAoXG4gIDxzdmdcbiAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICBmaWxsPVwibm9uZVwiXG4gICAgaGVpZ2h0PXtoZWlnaHR9XG4gICAgdmlld0JveD1cIjAgMCAyMCAyMFwiXG4gICAgd2lkdGg9e3dpZHRofVxuICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICA+XG4gICAgPHJlY3Qgb3BhY2l0eT1cIjAuNFwiIHdpZHRoPVwiMjBcIiBoZWlnaHQ9XCIyMFwiIHJ4PVwiM1wiIGZpbGw9XCJ3aGl0ZVwiIC8+XG4gICAgPG1hc2tcbiAgICAgIGlkPVwibWFzazBcIlxuICAgICAgbWFzay10eXBlPVwiYWxwaGFcIlxuICAgICAgbWFza1VuaXRzPVwidXNlclNwYWNlT25Vc2VcIlxuICAgICAgeD1cIjBcIlxuICAgICAgeT1cIjBcIlxuICAgICAgd2lkdGg9XCIyMFwiXG4gICAgICBoZWlnaHQ9XCIyMFwiXG4gICAgPlxuICAgICAgPHJlY3Qgd2lkdGg9XCIyMFwiIGhlaWdodD1cIjIwXCIgcng9XCIzXCIgZmlsbD1cIndoaXRlXCIgLz5cbiAgICA8L21hc2s+XG4gICAgPGcgbWFzaz1cInVybCgjbWFzazApXCI+XG4gICAgICA8cGF0aFxuICAgICAgICBkPVwiTTIzLjIyNTMgMEgtMi43MTUwMUMtMy45NzcwMSAwIC01IDEuMDIyOTkgLTUgMi4yODQ5OVYxNy43MDQ1Qy01IDE4Ljk2NjUgLTMuOTc3MDEgMTkuOTg5NSAtMi43MTUwMSAxOS45ODk1SDIzLjIyNTNDMjQuNDg3MiAxOS45ODk1IDI1LjUxMDIgMTguOTY2NSAyNS41MTAyIDE3LjcwNDVWMi4yODQ5OUMyNS41MTAyIDEuMDIyOTkgMjQuNDg3MyAwIDIzLjIyNTMgMFpcIlxuICAgICAgICBmaWxsPVwiIzM3NDFDRlwiXG4gICAgICAvPlxuICAgICAgPHBhdGhcbiAgICAgICAgZD1cIk0yNS40Nzg2IDEuOTA3MzFDMjUuMjk4NSAwLjgyNTIwNyAyNC4zNTg1IDAgMjMuMjI1MyAwSDIyLjYzMDdMMTIuODg1MyA2LjM4NDkyVjUuOTU5MDNlLTA1SDcuNjI0OTJWNi4zODQ5OEwtMi4xMjA0OCA1Ljk1OTAzZS0wNUgtMi43MTUwMUMtMy44NDgyNCA1Ljk1OTAzZS0wNSAtNC43ODgyOCAwLjgyNTIwNyAtNC45NjgzNiAxLjkwNzM3TDMuMzYxMDYgNy4zNjQ2NUgtNVYxMi42MjVIMy4zNjEwNkwtNC45NjgzNiAxOC4wODIyQy00Ljc4ODI4IDE5LjE2NDMgLTMuODQ4MjQgMTkuOTg5NSAtMi43MTUwMSAxOS45ODk1SC0yLjEyMDQ4TDcuNjI0OTIgMTMuNjA0NlYxOS45ODk1SDEyLjg4NTNWMTMuNjA0NkwyMi42MzA3IDE5Ljk4OTVIMjMuMjI1M0MyNC4zNTg1IDE5Ljk4OTUgMjUuMjk4NSAxOS4xNjQ0IDI1LjQ3ODYgMTguMDgyMkwxNy4xNDkyIDEyLjYyNDlIMjUuNTEwMlY3LjM2NDUzSDE3LjE0OTJMMjUuNDc4NiAxLjkwNzMxWlwiXG4gICAgICAgIGZpbGw9XCIjRjVGNUY1XCJcbiAgICAgIC8+XG4gICAgICA8cGF0aFxuICAgICAgICBkPVwiTTExLjgzMzMgMEg4LjY3Njk5VjguNDE2NkgtNVYxMS41NzI5SDguNjc2OTlWMTkuOTg5NUgxMS44MzMzVjExLjU3MjlIMjUuNTEwMlY4LjQxNjZIMTEuODMzM1YwWlwiXG4gICAgICAgIGZpbGw9XCIjRTYwMDBEXCJcbiAgICAgIC8+XG4gICAgICA8cGF0aFxuICAgICAgICBjbGlwUnVsZT1cImV2ZW5vZGRcIlxuICAgICAgICBkPVwiTTI0Ljk1MDEgMC43ODcyODhMMTQuODE3NiA3LjM2NDU3SDEyLjg4NTNMMjQuMDE0NiAwLjE0MDEzN0MyNC4zNzU5IDAuMjczNjcgMjQuNjk3NyAwLjQ5NjI2NSAyNC45NTAxIDAuNzg3Mjg4Wk0tNC43NTg3OSAxLjI2MzJMNC42NDAzOSA3LjM2NDQ3SDYuNTcyNzlMLTQuMDc3OTEgMC40NTA4MDZDLTQuMzY1MTggMC42NjQ3NCAtNC41OTgzNiAwLjk0Mjk2NCAtNC43NTg3OSAxLjI2MzJaTTcuNTk1NzQgMTIuNjI0OUwtMy41MjI4IDE5Ljg0MjFDLTMuODgxODcgMTkuNzA2MSAtNC4yMDA5MiAxOS40ODE4IC00LjQ1MDU2IDE5LjE5MDFMNS42NjMzNSAxMi42MjQ5SDcuNTk1NzRaTTEzLjcwODYgMTIuNjI0OUgxNS42NDFMMjUuMjA5NyAxOC44MzZDMjUuMDMwNCAxOS4xNDk3IDI0Ljc3OTUgMTkuNDE2NyAyNC40Nzc1IDE5LjYxNTFMMTMuNzA4NiAxMi42MjQ5WlwiXG4gICAgICAgIGZpbGw9XCIjRTYwMDBEXCJcbiAgICAgICAgZmlsbFJ1bGU9XCJldmVub2RkXCJcbiAgICAgIC8+XG4gICAgPC9nPlxuICA8L3N2Zz5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IEljb25GbGFnRW47XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBJY29uIGFzIEljb25UeXBlIH0gZnJvbSAnQGludGVyZmFjZXMvaW50ZXJmYWNlcyc7XG5cbmNvbnN0IEljb25GbGFnUnVzc2lhOiBSZWFjdC5GQzxJY29uVHlwZT4gPSAoe1xuICBjbGFzc05hbWUsXG4gIGhlaWdodCA9IDIwLFxuICB3aWR0aCA9IDIwLFxufSkgPT4gKFxuICA8c3ZnXG4gICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgZmlsbD1cIm5vbmVcIlxuICAgIGhlaWdodD17aGVpZ2h0fVxuICAgIHZpZXdCb3g9XCIwIDAgMjAgMjBcIlxuICAgIHdpZHRoPXt3aWR0aH1cbiAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgPlxuICAgIDxyZWN0IHdpZHRoPVwiMjBcIiBoZWlnaHQ9XCIyMFwiIHJ4PVwiM1wiIGZpbGw9XCIjRTVFNUU1XCIgLz5cbiAgICA8bWFza1xuICAgICAgaWQ9XCJtYXNrMFwiXG4gICAgICBtYXNrLXR5cGU9XCJhbHBoYVwiXG4gICAgICBtYXNrVW5pdHM9XCJ1c2VyU3BhY2VPblVzZVwiXG4gICAgICB4PVwiMFwiXG4gICAgICB5PVwiMFwiXG4gICAgICB3aWR0aD1cIjIwXCJcbiAgICAgIGhlaWdodD1cIjIwXCJcbiAgICA+XG4gICAgICA8cmVjdCB3aWR0aD1cIjIwXCIgaGVpZ2h0PVwiMjBcIiByeD1cIjNcIiBmaWxsPVwid2hpdGVcIiAvPlxuICAgIDwvbWFzaz5cbiAgICA8ZyBtYXNrPVwidXJsKCNtYXNrMClcIj5cbiAgICAgIDxyZWN0XG4gICAgICAgIHg9XCIxLjI1XCJcbiAgICAgICAgeT1cIjEuMTEwODRcIlxuICAgICAgICB3aWR0aD1cIjE3LjVcIlxuICAgICAgICBoZWlnaHQ9XCI3Ljc3Nzc4XCJcbiAgICAgICAgcng9XCIyXCJcbiAgICAgICAgZmlsbD1cIndoaXRlXCJcbiAgICAgIC8+XG4gICAgICA8cmVjdCB5PVwiNi41MjczNFwiIHdpZHRoPVwiMjBcIiBoZWlnaHQ9XCI2LjY2NjY3XCIgZmlsbD1cIiM0MDg2RTRcIiAvPlxuICAgICAgPHJlY3QgeT1cIjEzLjE5NDNcIiB3aWR0aD1cIjIwXCIgaGVpZ2h0PVwiNi42NjY2N1wiIGZpbGw9XCIjRTA0MjQyXCIgLz5cbiAgICA8L2c+XG4gIDwvc3ZnPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgSWNvbkZsYWdSdXNzaWE7XG4iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlLCB1c2VDYWxsYmFjaywgdXNlQ29udGV4dCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcbmltcG9ydCB7IHVzZUludGwgfSBmcm9tICdyZWFjdC1pbnRsJztcblxuaW1wb3J0IHsgTGFuZ3VhZ2UsIExhbmd1YWdlTGFiZWwgfSBmcm9tICdAY29uc3RhbnRzL2xhbmd1YWdlcyc7XG5pbXBvcnQgeyBTdG9yYWdlIH0gZnJvbSAnQGNvbnN0YW50cy9zdG9yYWdlJztcblxuaW1wb3J0IENvbnRleHRNZW51IGZyb20gJ0Bjb21wb25lbnRzL0NvbnRleHRNZW51L0NvbnRleHRNZW51JztcbmltcG9ydCBJY29uQ2hlY2sgZnJvbSAnQGNvbXBvbmVudHMvSWNvbi9JY29uQ2hlY2snO1xuaW1wb3J0IEljb25GbGFnRW4gZnJvbSAnQGNvbXBvbmVudHMvSWNvbi9JY29uRmxhZ0VuJztcbmltcG9ydCBJY29uRmxhZ1J1c3NpYSBmcm9tICdAY29tcG9uZW50cy9JY29uL0ljb25GbGFnUnVzc2lhJztcblxuaW1wb3J0IExhbmd1YWdlQ29udGV4dCBmcm9tICdAaGVscGVycy9MYW5ndWFnZUNvbnRleHQnO1xuaW1wb3J0IHsgc2F2ZVRvU3RvcmFnZSB9IGZyb20gJ0BoZWxwZXJzL3N0b3JhZ2UnO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJ0BoZWxwZXJzL3V0aWxzJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0xhbmd1YWdlU3dpdGNoZXIuY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuY29uc3QgRmxhZzogUGFydGlhbDxSZWNvcmQ8TGFuZ3VhZ2UsIFJlYWN0Tm9kZT4+ID0ge1xuICBbTGFuZ3VhZ2UuRU5dOiA8SWNvbkZsYWdFbiAvPixcbiAgW0xhbmd1YWdlLlJVXTogPEljb25GbGFnUnVzc2lhIC8+LFxufTtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgb25DaGFuZ2U/KGxhbmc6IExhbmd1YWdlKTogdm9pZDtcbn1cblxuY29uc3QgTGFuZ3VhZ2VTd2l0Y2hlcjogUmVhY3QuRkM8UHJvcHM+ID0gKHsgb25DaGFuZ2UgPSBub29wIH0pID0+IHtcbiAgY29uc3QgaW50bCA9IHVzZUludGwoKTtcblxuICBjb25zdCBbaXNDb250ZXh0TWVudVZpc2libGUsIHNldENvbnRleHRNZW51VmlzaWJsZVN0YXRlXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCB7IGxhbmd1YWdlLCBzZXRMYW5ndWFnZSB9ID0gdXNlQ29udGV4dChMYW5ndWFnZUNvbnRleHQpO1xuXG4gIGNvbnN0IGhhbmRsZUxhbmd1YWdlQ2xpY2sgPSB1c2VDYWxsYmFjayhcbiAgICBhc3luYyAoZXZ0KSA9PiB7XG4gICAgICBjb25zdCBsYW5nOiBMYW5ndWFnZSA9IGV2dC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQubGFuZ3VhZ2U7XG4gICAgICBhd2FpdCBzYXZlVG9TdG9yYWdlKFN0b3JhZ2UuTEFOR1VBR0UsIGxhbmcpO1xuICAgICAgb25DaGFuZ2UobGFuZyk7XG4gICAgICBzZXRMYW5ndWFnZShsYW5nKTtcbiAgICB9LFxuICAgIFtvbkNoYW5nZSwgc2V0TGFuZ3VhZ2VdXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8Q29udGV4dE1lbnVcbiAgICAgIGljb249e0ZsYWdbbGFuZ3VhZ2VdfVxuICAgICAgaXNWaXNpYmxlPXtpc0NvbnRleHRNZW51VmlzaWJsZX1cbiAgICAgIG9uQ2hhbmdlPXtzZXRDb250ZXh0TWVudVZpc2libGVTdGF0ZX1cbiAgICAgIHRpdGxlPXtpbnRsLmZvcm1hdE1lc3NhZ2UoeyBpZDogJ2xhbmd1YWdlLnRpdGxlJyB9KX1cbiAgICA+XG4gICAgICB7T2JqZWN0LmVudHJpZXMoTGFuZ3VhZ2VMYWJlbCkubWFwKChbbGFuZywgbGFiZWxdKSA9PiAoXG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBjbGFzc05hbWU9e2VtKCdidXR0b24nKSgpfVxuICAgICAgICAgIGRhdGEtbGFuZ3VhZ2U9e2xhbmd9XG4gICAgICAgICAga2V5PXtsYW5nfVxuICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUxhbmd1YWdlQ2xpY2t9XG4gICAgICAgID5cbiAgICAgICAgICB7RmxhZ1tsYW5nIGFzIExhbmd1YWdlXX1cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e2VtKCdsYWJlbCcpKCl9PntsYWJlbH08L3NwYW4+XG4gICAgICAgICAge2xhbmcgPT09IGxhbmd1YWdlICYmIDxJY29uQ2hlY2sgLz59XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgKSl9XG4gICAgPC9Db250ZXh0TWVudT5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExhbmd1YWdlU3dpdGNoZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9Nb2RhbCA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvTW9kYWxcIik7XG5cbnZhciBfTW9kYWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTW9kYWwpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfTW9kYWwyLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsImltcG9ydCB7IE1lc3NhZ2VzIH0gZnJvbSAnQGludGVyZmFjZXMvaW50ZXJmYWNlcyc7XG5cbmltcG9ydCB7IExhbmd1YWdlIH0gZnJvbSAnQGNvbnN0YW50cy9sYW5ndWFnZXMnO1xuXG5jb25zdCBtZXNzYWdlczogTWVzc2FnZXMgPSB7XG4gIFtMYW5ndWFnZS5FTl06IHtcbiAgICBsYW5nOiBMYW5ndWFnZS5FTixcbiAgICBtZXNzYWdlczoge1xuICAgICAgJ2xhbmd1YWdlLnRpdGxlJzogJ0Nob29zZSBsYW5ndWFnZScsXG4gICAgfSxcbiAgfSxcbiAgW0xhbmd1YWdlLlJVXToge1xuICAgIGxhbmc6IExhbmd1YWdlLlJVLFxuICAgIG1lc3NhZ2VzOiB7XG4gICAgICAnbGFuZ3VhZ2UudGl0bGUnOiAn0JLRi9Cx0LXRgNC40YLQtSDRj9C30YvQuicsXG4gICAgfSxcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1lc3NhZ2VzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBzaGFsbG93RXF1YWxPYmplY3RzKG9iakEsIG9iakIpIHtcbiAgaWYgKG9iakEgPT09IG9iakIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICghb2JqQSB8fCAhb2JqQikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBhS2V5cyA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIgYktleXMgPSBPYmplY3Qua2V5cyhvYmpCKTtcbiAgdmFyIGxlbiA9IGFLZXlzLmxlbmd0aDtcblxuICBpZiAoYktleXMubGVuZ3RoICE9PSBsZW4pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGFLZXlzW2ldO1xuXG4gICAgaWYgKG9iakFba2V5XSAhPT0gb2JqQltrZXldIHx8ICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNoYWxsb3dFcXVhbE9iamVjdHM7XG4iLCJmdW5jdGlvbiBjcmVhdGVUaHVua01pZGRsZXdhcmUoZXh0cmFBcmd1bWVudCkge1xuICByZXR1cm4gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoLFxuICAgICAgICBnZXRTdGF0ZSA9IF9yZWYuZ2V0U3RhdGU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBhY3Rpb24oZGlzcGF0Y2gsIGdldFN0YXRlLCBleHRyYUFyZ3VtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59XG5cbnZhciB0aHVuayA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZSgpO1xudGh1bmsud2l0aEV4dHJhQXJndW1lbnQgPSBjcmVhdGVUaHVua01pZGRsZXdhcmU7XG5cbmV4cG9ydCBkZWZhdWx0IHRodW5rOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IEljb25GQyB9IGZyb20gJy4nO1xuXG5jb25zdCBDcm9zczogSWNvbkZDID0gKHtcbiAgZmlsbCA9ICdjdXJyZW50Q29sb3InLFxuICB3aWR0aCA9IDE4LFxuICBoZWlnaHQgPSAxOCxcbiAgLi4ucmVzdFxufSkgPT4gKFxuICA8c3ZnIHdpZHRoPXt3aWR0aH0gaGVpZ2h0PXtoZWlnaHR9IHZpZXdCb3g9XCIwIDAgMjAgMjBcIiB7Li4ucmVzdH0+XG4gICAgPHBhdGhcbiAgICAgIGZpbGw9e2ZpbGx9XG4gICAgICBmaWxsUnVsZT1cIm5vbnplcm9cIlxuICAgICAgZD1cIk0xMS42IDEwbDUuMS01LjJhMS4xIDEuMSAwIDAwLTEuNS0xLjZMMTAgOC40IDQuOCAzLjJhMS4xIDEuMSAwIDAwLTEuNiAwIDEuMSAxLjEgMCAwMDAgMS42TDguNCAxMGwtNS4yIDUuMmExLjEgMS4xIDAgMDAwIDEuNiAxLjEgMS4xIDAgMDAxLjYgMGw1LjItNS4yIDUuMiA1LjJhMS4xIDEuMSAwIDAwMS41LTEuNkwxMS42IDEwelwiXG4gICAgLz5cbiAgPC9zdmc+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBDcm9zcztcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdmFyIGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBidWlsZEZ1bGxQYXRoID0gcmVxdWlyZSgnLi4vY29yZS9idWlsZEZ1bGxQYXRoJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgPyB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoY29uZmlnLmF1dGgucGFzc3dvcmQpKSA6ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICB2YXIgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlXG4gICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFjb25maWcucmVzcG9uc2VUeXBlIHx8IGNvbmZpZy5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JyA/IHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICB2YXIgdGltZW91dEVycm9yTWVzc2FnZSA9ICd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCc7XG4gICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKHRpbWVvdXRFcnJvck1lc3NhZ2UsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBFeHBlY3RlZCBET01FeGNlcHRpb24gdGhyb3duIGJ5IGJyb3dzZXJzIG5vdCBjb21wYXRpYmxlIFhNTEh0dHBSZXF1ZXN0IExldmVsIDIuXG4gICAgICAgIC8vIEJ1dCwgdGhpcyBjYW4gYmUgc3VwcHJlc3NlZCBmb3IgJ2pzb24nIHR5cGUgYXMgaXQgY2FuIGJlIHBhcnNlZCBieSBkZWZhdWx0ICd0cmFuc2Zvcm1SZXNwb25zZScgZnVuY3Rpb24uXG4gICAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjYW5jZWwpO1xuICAgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFyZXF1ZXN0RGF0YSkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIHZhciB2YWx1ZUZyb21Db25maWcyS2V5cyA9IFsndXJsJywgJ21ldGhvZCcsICdkYXRhJ107XG4gIHZhciBtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cyA9IFsnaGVhZGVycycsICdhdXRoJywgJ3Byb3h5JywgJ3BhcmFtcyddO1xuICB2YXIgZGVmYXVsdFRvQ29uZmlnMktleXMgPSBbXG4gICAgJ2Jhc2VVUkwnLCAndHJhbnNmb3JtUmVxdWVzdCcsICd0cmFuc2Zvcm1SZXNwb25zZScsICdwYXJhbXNTZXJpYWxpemVyJyxcbiAgICAndGltZW91dCcsICd0aW1lb3V0TWVzc2FnZScsICd3aXRoQ3JlZGVudGlhbHMnLCAnYWRhcHRlcicsICdyZXNwb25zZVR5cGUnLCAneHNyZkNvb2tpZU5hbWUnLFxuICAgICd4c3JmSGVhZGVyTmFtZScsICdvblVwbG9hZFByb2dyZXNzJywgJ29uRG93bmxvYWRQcm9ncmVzcycsICdkZWNvbXByZXNzJyxcbiAgICAnbWF4Q29udGVudExlbmd0aCcsICdtYXhCb2R5TGVuZ3RoJywgJ21heFJlZGlyZWN0cycsICd0cmFuc3BvcnQnLCAnaHR0cEFnZW50JyxcbiAgICAnaHR0cHNBZ2VudCcsICdjYW5jZWxUb2tlbicsICdzb2NrZXRQYXRoJywgJ3Jlc3BvbnNlRW5jb2RpbmcnXG4gIF07XG4gIHZhciBkaXJlY3RNZXJnZUtleXMgPSBbJ3ZhbGlkYXRlU3RhdHVzJ107XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICB1dGlscy5mb3JFYWNoKHZhbHVlRnJvbUNvbmZpZzJLZXlzLCBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cywgbWVyZ2VEZWVwUHJvcGVydGllcyk7XG5cbiAgdXRpbHMuZm9yRWFjaChkZWZhdWx0VG9Db25maWcyS2V5cywgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goZGlyZWN0TWVyZ2VLZXlzLCBmdW5jdGlvbiBtZXJnZShwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgYXhpb3NLZXlzID0gdmFsdWVGcm9tQ29uZmlnMktleXNcbiAgICAuY29uY2F0KG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzKVxuICAgIC5jb25jYXQoZGVmYXVsdFRvQ29uZmlnMktleXMpXG4gICAgLmNvbmNhdChkaXJlY3RNZXJnZUtleXMpO1xuXG4gIHZhciBvdGhlcktleXMgPSBPYmplY3RcbiAgICAua2V5cyhjb25maWcxKVxuICAgIC5jb25jYXQoT2JqZWN0LmtleXMoY29uZmlnMikpXG4gICAgLmZpbHRlcihmdW5jdGlvbiBmaWx0ZXJBeGlvc0tleXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXhpb3NLZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTE7XG4gICAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChvdGhlcktleXMsIG1lcmdlRGVlcFByb3BlcnRpZXMpO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcIndyYXBwZXJcIjpcIkRvdHNMb2FkZXJfX3dyYXBwZXItLVNNaGRPXCIsXCJkb3RcIjpcIkRvdHNMb2FkZXJfX2RvdC0tM2xJQzhcIixcInBlbmRpbmdcIjpcIkRvdHNMb2FkZXJfX3BlbmRpbmctLTJ4U0ZJXCIsXCJkb3Rfdmlld19saWdodFwiOlwiRG90c0xvYWRlcl9fZG90X3ZpZXdfbGlnaHQtLTJnak9jXCIsXCJkb3RfZmlyc3RcIjpcIkRvdHNMb2FkZXJfX2RvdF9maXJzdC0tMjJxaWJcIixcImRvdF9zZWNvbmRcIjpcIkRvdHNMb2FkZXJfX2RvdF9zZWNvbmQtLTFvRmtmXCIsXCJkb3RfdGhpcmRcIjpcIkRvdHNMb2FkZXJfX2RvdF90aGlyZC0tM2VORXNcIixcImRvdF9mb3VydGhcIjpcIkRvdHNMb2FkZXJfX2RvdF9mb3VydGgtLTFNc1VzXCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJidXR0b25cIjpcIkJ1dHRvbl9fYnV0dG9uLS0xRlQ2aFwiLFwiY2hpbGRfbG9hZGluZ1wiOlwiQnV0dG9uX19jaGlsZF9sb2FkaW5nLS0yd0N3VlwiLFwic3Bpbm5lclwiOlwiQnV0dG9uX19zcGlubmVyLS1FcmU0TVwiLFwiYnV0dG9uX3NpemVfc1wiOlwiQnV0dG9uX19idXR0b25fc2l6ZV9zLS0yRnBYNFwiLFwiYnV0dG9uX3NpemVfbVwiOlwiQnV0dG9uX19idXR0b25fc2l6ZV9tLS0zTWlkQVwiLFwiYnV0dG9uX3NpemVfbFwiOlwiQnV0dG9uX19idXR0b25fc2l6ZV9sLS0yZ1dITFwiLFwiYnV0dG9uX3NpemVfeGxcIjpcIkJ1dHRvbl9fYnV0dG9uX3NpemVfeGwtLTNncEV2XCIsXCJidXR0b25fd2lkZVwiOlwiQnV0dG9uX19idXR0b25fd2lkZS0teXkyeGJcIixcImJ1dHRvbl92aWV3X2xpZ2h0XCI6XCJCdXR0b25fX2J1dHRvbl92aWV3X2xpZ2h0LS1hTWVsVFwiLFwiYnV0dG9uX3ZpZXdfZ2hvc3RcIjpcIkJ1dHRvbl9fYnV0dG9uX3ZpZXdfZ2hvc3QtLTNBdTUwXCIsXCJidXR0b25fdmlld19mbGF0XCI6XCJCdXR0b25fX2J1dHRvbl92aWV3X2ZsYXQtLV8wcVpMXCIsXCJidXR0b25fZm9jdXNlZFwiOlwiQnV0dG9uX19idXR0b25fZm9jdXNlZC0tMkpVaEVcIn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0dmFyIHJlc3VsdDtcblx0dmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aWYgKFN5bWJvbC5vYnNlcnZhYmxlKSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cdFx0XHRTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcyAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlcyAqL1xuLyoqXG4gKiBNZW1vIGNsYXNzIHVzZWQgZm9yIGRlY3ljbGUganNvbiBvYmplY3RzLiBVc2VzIFdlYWtTZXQgaWYgYXZhaWxhYmxlIG90aGVyd2lzZSBhcnJheS5cbiAqL1xudmFyIE1lbW8gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWVtbygpIHtcbiAgICAgICAgdGhpcy5faGFzV2Vha1NldCA9IHR5cGVvZiBXZWFrU2V0ID09PSAnZnVuY3Rpb24nO1xuICAgICAgICB0aGlzLl9pbm5lciA9IHRoaXMuX2hhc1dlYWtTZXQgPyBuZXcgV2Vha1NldCgpIDogW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgb2JqIHRvIHJlbWVtYmVyLlxuICAgICAqIEBwYXJhbSBvYmogT2JqZWN0IHRvIHJlbWVtYmVyXG4gICAgICovXG4gICAgTWVtby5wcm90b3R5cGUubWVtb2l6ZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgaWYgKHRoaXMuX2hhc1dlYWtTZXQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbm5lci5oYXMob2JqKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5faW5uZXIuYWRkKG9iaik7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9wcmVmZXItZm9yLW9mXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5faW5uZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX2lubmVyW2ldO1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBvYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pbm5lci5wdXNoKG9iaik7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgb2JqZWN0IGZyb20gaW50ZXJuYWwgc3RvcmFnZS5cbiAgICAgKiBAcGFyYW0gb2JqIE9iamVjdCB0byBmb3JnZXRcbiAgICAgKi9cbiAgICBNZW1vLnByb3RvdHlwZS51bm1lbW9pemUgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIGlmICh0aGlzLl9oYXNXZWFrU2V0KSB7XG4gICAgICAgICAgICB0aGlzLl9pbm5lci5kZWxldGUob2JqKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5faW5uZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faW5uZXJbaV0gPT09IG9iaikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbm5lci5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE1lbW87XG59KCkpO1xuZXhwb3J0IHsgTWVtbyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVtby5qcy5tYXAiLCJ2YXIgb3JpZ2luYWxGdW5jdGlvblRvU3RyaW5nO1xuLyoqIFBhdGNoIHRvU3RyaW5nIGNhbGxzIHRvIHJldHVybiBwcm9wZXIgbmFtZSBmb3Igd3JhcHBlZCBmdW5jdGlvbnMgKi9cbnZhciBGdW5jdGlvblRvU3RyaW5nID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZ1bmN0aW9uVG9TdHJpbmcoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gRnVuY3Rpb25Ub1N0cmluZy5pZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBGdW5jdGlvblRvU3RyaW5nLnByb3RvdHlwZS5zZXR1cE9uY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgICAgICAgb3JpZ2luYWxGdW5jdGlvblRvU3RyaW5nID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMuX19zZW50cnlfb3JpZ2luYWxfXyB8fCB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsRnVuY3Rpb25Ub1N0cmluZy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgRnVuY3Rpb25Ub1N0cmluZy5pZCA9ICdGdW5jdGlvblRvU3RyaW5nJztcbiAgICByZXR1cm4gRnVuY3Rpb25Ub1N0cmluZztcbn0oKSk7XG5leHBvcnQgeyBGdW5jdGlvblRvU3RyaW5nIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mdW5jdGlvbnRvc3RyaW5nLmpzLm1hcCIsIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1mdW5jdGlvbi1yZXR1cm4tdHlwZSAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L3R5cGVkZWYgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXMgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbmltcG9ydCB7IGlzVGhlbmFibGUgfSBmcm9tICcuL2lzJztcbi8qKiBTeW5jUHJvbWlzZSBpbnRlcm5hbCBzdGF0ZXMgKi9cbnZhciBTdGF0ZXM7XG4oZnVuY3Rpb24gKFN0YXRlcykge1xuICAgIC8qKiBQZW5kaW5nICovXG4gICAgU3RhdGVzW1wiUEVORElOR1wiXSA9IFwiUEVORElOR1wiO1xuICAgIC8qKiBSZXNvbHZlZCAvIE9LICovXG4gICAgU3RhdGVzW1wiUkVTT0xWRURcIl0gPSBcIlJFU09MVkVEXCI7XG4gICAgLyoqIFJlamVjdGVkIC8gRXJyb3IgKi9cbiAgICBTdGF0ZXNbXCJSRUpFQ1RFRFwiXSA9IFwiUkVKRUNURURcIjtcbn0pKFN0YXRlcyB8fCAoU3RhdGVzID0ge30pKTtcbi8qKlxuICogVGhlbmFibGUgY2xhc3MgdGhhdCBiZWhhdmVzIGxpa2UgYSBQcm9taXNlIGFuZCBmb2xsb3dzIGl0J3MgaW50ZXJmYWNlXG4gKiBidXQgaXMgbm90IGFzeW5jIGludGVybmFsbHlcbiAqL1xudmFyIFN5bmNQcm9taXNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN5bmNQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gU3RhdGVzLlBFTkRJTkc7XG4gICAgICAgIHRoaXMuX2hhbmRsZXJzID0gW107XG4gICAgICAgIC8qKiBKU0RvYyAqL1xuICAgICAgICB0aGlzLl9yZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBfdGhpcy5fc2V0UmVzdWx0KFN0YXRlcy5SRVNPTFZFRCwgdmFsdWUpO1xuICAgICAgICB9O1xuICAgICAgICAvKiogSlNEb2MgKi9cbiAgICAgICAgdGhpcy5fcmVqZWN0ID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgX3RoaXMuX3NldFJlc3VsdChTdGF0ZXMuUkVKRUNURUQsIHJlYXNvbik7XG4gICAgICAgIH07XG4gICAgICAgIC8qKiBKU0RvYyAqL1xuICAgICAgICB0aGlzLl9zZXRSZXN1bHQgPSBmdW5jdGlvbiAoc3RhdGUsIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuX3N0YXRlICE9PSBTdGF0ZXMuUEVORElORykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlLnRoZW4oX3RoaXMuX3Jlc29sdmUsIF90aGlzLl9yZWplY3QpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLl9zdGF0ZSA9IHN0YXRlO1xuICAgICAgICAgICAgX3RoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICBfdGhpcy5fZXhlY3V0ZUhhbmRsZXJzKCk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFRPRE86IEZJWE1FXG4gICAgICAgIC8qKiBKU0RvYyAqL1xuICAgICAgICB0aGlzLl9hdHRhY2hIYW5kbGVyID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgICAgIF90aGlzLl9oYW5kbGVycyA9IF90aGlzLl9oYW5kbGVycy5jb25jYXQoaGFuZGxlcik7XG4gICAgICAgICAgICBfdGhpcy5fZXhlY3V0ZUhhbmRsZXJzKCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKiBKU0RvYyAqL1xuICAgICAgICB0aGlzLl9leGVjdXRlSGFuZGxlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuX3N0YXRlID09PSBTdGF0ZXMuUEVORElORykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjYWNoZWRIYW5kbGVycyA9IF90aGlzLl9oYW5kbGVycy5zbGljZSgpO1xuICAgICAgICAgICAgX3RoaXMuX2hhbmRsZXJzID0gW107XG4gICAgICAgICAgICBjYWNoZWRIYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhbmRsZXIuZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fc3RhdGUgPT09IFN0YXRlcy5SRVNPTFZFRCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaGFuZGxlci5vbmZ1bGZpbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5vbmZ1bGZpbGxlZChfdGhpcy5fdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fc3RhdGUgPT09IFN0YXRlcy5SRUpFQ1RFRCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaGFuZGxlci5vbnJlamVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLm9ucmVqZWN0ZWQoX3RoaXMuX3ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBoYW5kbGVyLmRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBleGVjdXRvcih0aGlzLl9yZXNvbHZlLCB0aGlzLl9yZWplY3QpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqIEpTRG9jICovXG4gICAgU3luY1Byb21pc2UucmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gbmV3IFN5bmNQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBTeW5jUHJvbWlzZS5yZWplY3QgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3luY1Byb21pc2UoZnVuY3Rpb24gKF8sIHJlamVjdCkge1xuICAgICAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgU3luY1Byb21pc2UuYWxsID0gZnVuY3Rpb24gKGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTeW5jUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcihcIlByb21pc2UuYWxsIHJlcXVpcmVzIGFuIGFycmF5IGFzIGlucHV0LlwiKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbGxlY3Rpb24ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShbXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNvdW50ZXIgPSBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciByZXNvbHZlZENvbGxlY3Rpb24gPSBbXTtcbiAgICAgICAgICAgIGNvbGxlY3Rpb24uZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBTeW5jUHJvbWlzZS5yZXNvbHZlKGl0ZW0pXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlZENvbGxlY3Rpb25baW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50ZXIgLT0gMTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50ZXIgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc29sdmVkQ29sbGVjdGlvbik7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4obnVsbCwgcmVqZWN0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFN5bmNQcm9taXNlLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24gKG9uZnVsZmlsbGVkLCBvbnJlamVjdGVkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgU3luY1Byb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgX3RoaXMuX2F0dGFjaEhhbmRsZXIoe1xuICAgICAgICAgICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG9uZnVsZmlsbGVkOiBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghb25mdWxmaWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IMKvXFxfKOODhClfL8KvXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBGSVhNRVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG9uZnVsZmlsbGVkKHJlc3VsdCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9ucmVqZWN0ZWQ6IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFvbnJlamVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShvbnJlamVjdGVkKHJlYXNvbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgU3luY1Byb21pc2UucHJvdG90eXBlLmNhdGNoID0gZnVuY3Rpb24gKG9ucmVqZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbiAodmFsKSB7IHJldHVybiB2YWw7IH0sIG9ucmVqZWN0ZWQpO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgU3luY1Byb21pc2UucHJvdG90eXBlLmZpbmFsbHkgPSBmdW5jdGlvbiAob25maW5hbGx5KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgU3luY1Byb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHZhbDtcbiAgICAgICAgICAgIHZhciBpc1JlamVjdGVkO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaXNSZWplY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZhbCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGlmIChvbmZpbmFsbHkpIHtcbiAgICAgICAgICAgICAgICAgICAgb25maW5hbGx5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgICAgIGlzUmVqZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhbCA9IHJlYXNvbjtcbiAgICAgICAgICAgICAgICBpZiAob25maW5hbGx5KSB7XG4gICAgICAgICAgICAgICAgICAgIG9uZmluYWxseSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChpc1JlamVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCh2YWwpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc29sdmUodmFsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFN5bmNQcm9taXNlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICdbb2JqZWN0IFN5bmNQcm9taXNlXSc7XG4gICAgfTtcbiAgICByZXR1cm4gU3luY1Byb21pc2U7XG59KCkpO1xuZXhwb3J0IHsgU3luY1Byb21pc2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN5bmNwcm9taXNlLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduLCBfX3JlYWQsIF9fc3ByZWFkIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBkYXRlVGltZXN0YW1wSW5TZWNvbmRzLCBnZXRHbG9iYWxPYmplY3QsIGlzUGxhaW5PYmplY3QsIGlzVGhlbmFibGUsIFN5bmNQcm9taXNlIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG4vKipcbiAqIEhvbGRzIGFkZGl0aW9uYWwgZXZlbnQgaW5mb3JtYXRpb24uIHtAbGluayBTY29wZS5hcHBseVRvRXZlbnR9IHdpbGwgYmVcbiAqIGNhbGxlZCBieSB0aGUgY2xpZW50IGJlZm9yZSBhbiBldmVudCB3aWxsIGJlIHNlbnQuXG4gKi9cbnZhciBTY29wZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTY29wZSgpIHtcbiAgICAgICAgLyoqIEZsYWcgaWYgbm90aWZpeWluZyBpcyBoYXBwZW5pbmcuICovXG4gICAgICAgIHRoaXMuX25vdGlmeWluZ0xpc3RlbmVycyA9IGZhbHNlO1xuICAgICAgICAvKiogQ2FsbGJhY2sgZm9yIGNsaWVudCB0byByZWNlaXZlIHNjb3BlIGNoYW5nZXMuICovXG4gICAgICAgIHRoaXMuX3Njb3BlTGlzdGVuZXJzID0gW107XG4gICAgICAgIC8qKiBDYWxsYmFjayBsaXN0IHRoYXQgd2lsbCBiZSBjYWxsZWQgYWZ0ZXIge0BsaW5rIGFwcGx5VG9FdmVudH0uICovXG4gICAgICAgIHRoaXMuX2V2ZW50UHJvY2Vzc29ycyA9IFtdO1xuICAgICAgICAvKiogQXJyYXkgb2YgYnJlYWRjcnVtYnMuICovXG4gICAgICAgIHRoaXMuX2JyZWFkY3J1bWJzID0gW107XG4gICAgICAgIC8qKiBVc2VyICovXG4gICAgICAgIHRoaXMuX3VzZXIgPSB7fTtcbiAgICAgICAgLyoqIFRhZ3MgKi9cbiAgICAgICAgdGhpcy5fdGFncyA9IHt9O1xuICAgICAgICAvKiogRXh0cmEgKi9cbiAgICAgICAgdGhpcy5fZXh0cmEgPSB7fTtcbiAgICAgICAgLyoqIENvbnRleHRzICovXG4gICAgICAgIHRoaXMuX2NvbnRleHRzID0ge307XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluaGVyaXQgdmFsdWVzIGZyb20gdGhlIHBhcmVudCBzY29wZS5cbiAgICAgKiBAcGFyYW0gc2NvcGUgdG8gY2xvbmUuXG4gICAgICovXG4gICAgU2NvcGUuY2xvbmUgPSBmdW5jdGlvbiAoc2NvcGUpIHtcbiAgICAgICAgdmFyIG5ld1Njb3BlID0gbmV3IFNjb3BlKCk7XG4gICAgICAgIGlmIChzY29wZSkge1xuICAgICAgICAgICAgbmV3U2NvcGUuX2JyZWFkY3J1bWJzID0gX19zcHJlYWQoc2NvcGUuX2JyZWFkY3J1bWJzKTtcbiAgICAgICAgICAgIG5ld1Njb3BlLl90YWdzID0gX19hc3NpZ24oe30sIHNjb3BlLl90YWdzKTtcbiAgICAgICAgICAgIG5ld1Njb3BlLl9leHRyYSA9IF9fYXNzaWduKHt9LCBzY29wZS5fZXh0cmEpO1xuICAgICAgICAgICAgbmV3U2NvcGUuX2NvbnRleHRzID0gX19hc3NpZ24oe30sIHNjb3BlLl9jb250ZXh0cyk7XG4gICAgICAgICAgICBuZXdTY29wZS5fdXNlciA9IHNjb3BlLl91c2VyO1xuICAgICAgICAgICAgbmV3U2NvcGUuX2xldmVsID0gc2NvcGUuX2xldmVsO1xuICAgICAgICAgICAgbmV3U2NvcGUuX3NwYW4gPSBzY29wZS5fc3BhbjtcbiAgICAgICAgICAgIG5ld1Njb3BlLl9zZXNzaW9uID0gc2NvcGUuX3Nlc3Npb247XG4gICAgICAgICAgICBuZXdTY29wZS5fdHJhbnNhY3Rpb25OYW1lID0gc2NvcGUuX3RyYW5zYWN0aW9uTmFtZTtcbiAgICAgICAgICAgIG5ld1Njb3BlLl9maW5nZXJwcmludCA9IHNjb3BlLl9maW5nZXJwcmludDtcbiAgICAgICAgICAgIG5ld1Njb3BlLl9ldmVudFByb2Nlc3NvcnMgPSBfX3NwcmVhZChzY29wZS5fZXZlbnRQcm9jZXNzb3JzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3U2NvcGU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBZGQgaW50ZXJuYWwgb24gY2hhbmdlIGxpc3RlbmVyLiBVc2VkIGZvciBzdWIgU0RLcyB0aGF0IG5lZWQgdG8gc3RvcmUgdGhlIHNjb3BlLlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuYWRkU2NvcGVMaXN0ZW5lciA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9zY29wZUxpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLmFkZEV2ZW50UHJvY2Vzc29yID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50UHJvY2Vzc29ycy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5zZXRVc2VyID0gZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgICAgdGhpcy5fdXNlciA9IHVzZXIgfHwge307XG4gICAgICAgIGlmICh0aGlzLl9zZXNzaW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXNzaW9uLnVwZGF0ZSh7IHVzZXI6IHVzZXIgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5nZXRVc2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdXNlcjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLnNldFRhZ3MgPSBmdW5jdGlvbiAodGFncykge1xuICAgICAgICB0aGlzLl90YWdzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuX3RhZ3MpLCB0YWdzKTtcbiAgICAgICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5zZXRUYWcgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMuX3RhZ3MgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5fdGFncyksIChfYSA9IHt9LCBfYVtrZXldID0gdmFsdWUsIF9hKSk7XG4gICAgICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuc2V0RXh0cmFzID0gZnVuY3Rpb24gKGV4dHJhcykge1xuICAgICAgICB0aGlzLl9leHRyYSA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLl9leHRyYSksIGV4dHJhcyk7XG4gICAgICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuc2V0RXh0cmEgPSBmdW5jdGlvbiAoa2V5LCBleHRyYSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMuX2V4dHJhID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuX2V4dHJhKSwgKF9hID0ge30sIF9hW2tleV0gPSBleHRyYSwgX2EpKTtcbiAgICAgICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5zZXRGaW5nZXJwcmludCA9IGZ1bmN0aW9uIChmaW5nZXJwcmludCkge1xuICAgICAgICB0aGlzLl9maW5nZXJwcmludCA9IGZpbmdlcnByaW50O1xuICAgICAgICB0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLnNldExldmVsID0gZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgICAgIHRoaXMuX2xldmVsID0gbGV2ZWw7XG4gICAgICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuc2V0VHJhbnNhY3Rpb25OYW1lID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdGhpcy5fdHJhbnNhY3Rpb25OYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDYW4gYmUgcmVtb3ZlZCBpbiBtYWpvciB2ZXJzaW9uLlxuICAgICAqIEBkZXByZWNhdGVkIGluIGZhdm9yIG9mIHtAbGluayB0aGlzLnNldFRyYW5zYWN0aW9uTmFtZX1cbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuc2V0VHJhbnNhY3Rpb24gPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRUcmFuc2FjdGlvbk5hbWUobmFtZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5zZXRDb250ZXh0ID0gZnVuY3Rpb24gKGtleSwgY29udGV4dCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChjb250ZXh0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWR5bmFtaWMtZGVsZXRlXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fY29udGV4dHNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHRzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuX2NvbnRleHRzKSwgKF9hID0ge30sIF9hW2tleV0gPSBjb250ZXh0LCBfYSkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuc2V0U3BhbiA9IGZ1bmN0aW9uIChzcGFuKSB7XG4gICAgICAgIHRoaXMuX3NwYW4gPSBzcGFuO1xuICAgICAgICB0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLmdldFNwYW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zcGFuO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuZ2V0VHJhbnNhY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgLy8gb2Z0ZW4sIHRoaXMgc3BhbiB3aWxsIGJlIGEgdHJhbnNhY3Rpb24sIGJ1dCBpdCdzIG5vdCBndWFyYW50ZWVkIHRvIGJlXG4gICAgICAgIHZhciBzcGFuID0gdGhpcy5nZXRTcGFuKCk7XG4gICAgICAgIC8vIHRyeSBpdCB0aGUgbmV3IHdheSBmaXJzdFxuICAgICAgICBpZiAoKF9hID0gc3BhbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gKF9iID0gc3BhbikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnRyYW5zYWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIC8vIGZhbGxiYWNrIHRvIHRoZSBvbGQgd2F5IChrbm93biBidWc6IHRoaXMgb25seSBmaW5kcyB0cmFuc2FjdGlvbnMgd2l0aCBzYW1wbGVkID0gdHJ1ZSlcbiAgICAgICAgaWYgKChfZCA9IChfYyA9IHNwYW4pID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5zcGFuUmVjb3JkZXIpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5zcGFuc1swXSkge1xuICAgICAgICAgICAgcmV0dXJuIHNwYW4uc3BhblJlY29yZGVyLnNwYW5zWzBdO1xuICAgICAgICB9XG4gICAgICAgIC8vIG5laXRoZXIgd2F5IGZvdW5kIGEgdHJhbnNhY3Rpb25cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLnNldFNlc3Npb24gPSBmdW5jdGlvbiAoc2Vzc2lvbikge1xuICAgICAgICBpZiAoIXNlc3Npb24pIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9zZXNzaW9uO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc2Vzc2lvbiA9IHNlc3Npb247XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5nZXRTZXNzaW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2Vzc2lvbjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgU2NvcGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChjYXB0dXJlQ29udGV4dCkge1xuICAgICAgICBpZiAoIWNhcHR1cmVDb250ZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGNhcHR1cmVDb250ZXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2YXIgdXBkYXRlZFNjb3BlID0gY2FwdHVyZUNvbnRleHQodGhpcyk7XG4gICAgICAgICAgICByZXR1cm4gdXBkYXRlZFNjb3BlIGluc3RhbmNlb2YgU2NvcGUgPyB1cGRhdGVkU2NvcGUgOiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYXB0dXJlQ29udGV4dCBpbnN0YW5jZW9mIFNjb3BlKSB7XG4gICAgICAgICAgICB0aGlzLl90YWdzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuX3RhZ3MpLCBjYXB0dXJlQ29udGV4dC5fdGFncyk7XG4gICAgICAgICAgICB0aGlzLl9leHRyYSA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLl9leHRyYSksIGNhcHR1cmVDb250ZXh0Ll9leHRyYSk7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0cyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLl9jb250ZXh0cyksIGNhcHR1cmVDb250ZXh0Ll9jb250ZXh0cyk7XG4gICAgICAgICAgICBpZiAoY2FwdHVyZUNvbnRleHQuX3VzZXIgJiYgT2JqZWN0LmtleXMoY2FwdHVyZUNvbnRleHQuX3VzZXIpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VzZXIgPSBjYXB0dXJlQ29udGV4dC5fdXNlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYXB0dXJlQ29udGV4dC5fbGV2ZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sZXZlbCA9IGNhcHR1cmVDb250ZXh0Ll9sZXZlbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYXB0dXJlQ29udGV4dC5fZmluZ2VycHJpbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9maW5nZXJwcmludCA9IGNhcHR1cmVDb250ZXh0Ll9maW5nZXJwcmludDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KGNhcHR1cmVDb250ZXh0KSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICBjYXB0dXJlQ29udGV4dCA9IGNhcHR1cmVDb250ZXh0O1xuICAgICAgICAgICAgdGhpcy5fdGFncyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLl90YWdzKSwgY2FwdHVyZUNvbnRleHQudGFncyk7XG4gICAgICAgICAgICB0aGlzLl9leHRyYSA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLl9leHRyYSksIGNhcHR1cmVDb250ZXh0LmV4dHJhKTtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHRzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuX2NvbnRleHRzKSwgY2FwdHVyZUNvbnRleHQuY29udGV4dHMpO1xuICAgICAgICAgICAgaWYgKGNhcHR1cmVDb250ZXh0LnVzZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91c2VyID0gY2FwdHVyZUNvbnRleHQudXNlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYXB0dXJlQ29udGV4dC5sZXZlbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xldmVsID0gY2FwdHVyZUNvbnRleHQubGV2ZWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FwdHVyZUNvbnRleHQuZmluZ2VycHJpbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9maW5nZXJwcmludCA9IGNhcHR1cmVDb250ZXh0LmZpbmdlcnByaW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2JyZWFkY3J1bWJzID0gW107XG4gICAgICAgIHRoaXMuX3RhZ3MgPSB7fTtcbiAgICAgICAgdGhpcy5fZXh0cmEgPSB7fTtcbiAgICAgICAgdGhpcy5fdXNlciA9IHt9O1xuICAgICAgICB0aGlzLl9jb250ZXh0cyA9IHt9O1xuICAgICAgICB0aGlzLl9sZXZlbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fdHJhbnNhY3Rpb25OYW1lID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9maW5nZXJwcmludCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc3BhbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc2Vzc2lvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5hZGRCcmVhZGNydW1iID0gZnVuY3Rpb24gKGJyZWFkY3J1bWIsIG1heEJyZWFkY3J1bWJzKSB7XG4gICAgICAgIHZhciBtZXJnZWRCcmVhZGNydW1iID0gX19hc3NpZ24oeyB0aW1lc3RhbXA6IGRhdGVUaW1lc3RhbXBJblNlY29uZHMoKSB9LCBicmVhZGNydW1iKTtcbiAgICAgICAgdGhpcy5fYnJlYWRjcnVtYnMgPVxuICAgICAgICAgICAgbWF4QnJlYWRjcnVtYnMgIT09IHVuZGVmaW5lZCAmJiBtYXhCcmVhZGNydW1icyA+PSAwXG4gICAgICAgICAgICAgICAgPyBfX3NwcmVhZCh0aGlzLl9icmVhZGNydW1icywgW21lcmdlZEJyZWFkY3J1bWJdKS5zbGljZSgtbWF4QnJlYWRjcnVtYnMpXG4gICAgICAgICAgICAgICAgOiBfX3NwcmVhZCh0aGlzLl9icmVhZGNydW1icywgW21lcmdlZEJyZWFkY3J1bWJdKTtcbiAgICAgICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5jbGVhckJyZWFkY3J1bWJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9icmVhZGNydW1icyA9IFtdO1xuICAgICAgICB0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgdGhlIGN1cnJlbnQgY29udGV4dCBhbmQgZmluZ2VycHJpbnQgdG8gdGhlIGV2ZW50LlxuICAgICAqIE5vdGUgdGhhdCBicmVhZGNydW1icyB3aWxsIGJlIGFkZGVkIGJ5IHRoZSBjbGllbnQuXG4gICAgICogQWxzbyBpZiB0aGUgZXZlbnQgaGFzIGFscmVhZHkgYnJlYWRjcnVtYnMgb24gaXQsIHdlIGRvIG5vdCBtZXJnZSB0aGVtLlxuICAgICAqIEBwYXJhbSBldmVudCBFdmVudFxuICAgICAqIEBwYXJhbSBoaW50IE1heSBjb250YWluIGFkZGl0aW9uYWwgaW5mb3JtYXJ0aW9uIGFib3V0IHRoZSBvcmlnaW5hbCBleGNlcHRpb24uXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIFNjb3BlLnByb3RvdHlwZS5hcHBseVRvRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQsIGhpbnQpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGhpcy5fZXh0cmEgJiYgT2JqZWN0LmtleXModGhpcy5fZXh0cmEpLmxlbmd0aCkge1xuICAgICAgICAgICAgZXZlbnQuZXh0cmEgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5fZXh0cmEpLCBldmVudC5leHRyYSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3RhZ3MgJiYgT2JqZWN0LmtleXModGhpcy5fdGFncykubGVuZ3RoKSB7XG4gICAgICAgICAgICBldmVudC50YWdzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuX3RhZ3MpLCBldmVudC50YWdzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fdXNlciAmJiBPYmplY3Qua2V5cyh0aGlzLl91c2VyKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGV2ZW50LnVzZXIgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5fdXNlciksIGV2ZW50LnVzZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9jb250ZXh0cyAmJiBPYmplY3Qua2V5cyh0aGlzLl9jb250ZXh0cykubGVuZ3RoKSB7XG4gICAgICAgICAgICBldmVudC5jb250ZXh0cyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLl9jb250ZXh0cyksIGV2ZW50LmNvbnRleHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fbGV2ZWwpIHtcbiAgICAgICAgICAgIGV2ZW50LmxldmVsID0gdGhpcy5fbGV2ZWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3RyYW5zYWN0aW9uTmFtZSkge1xuICAgICAgICAgICAgZXZlbnQudHJhbnNhY3Rpb24gPSB0aGlzLl90cmFuc2FjdGlvbk5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2Ugd2FudCB0byBzZXQgdGhlIHRyYWNlIGNvbnRleHQgZm9yIG5vcm1hbCBldmVudHMgb25seSBpZiB0aGVyZSBpc24ndCBhbHJlYWR5XG4gICAgICAgIC8vIGEgdHJhY2UgY29udGV4dCBvbiB0aGUgZXZlbnQuIFRoZXJlIGlzIGEgcHJvZHVjdCBmZWF0dXJlIGluIHBsYWNlIHdoZXJlIHdlIGxpbmtcbiAgICAgICAgLy8gZXJyb3JzIHdpdGggdHJhbnNhY3Rpb24gYW5kIGl0IHJlbHlzIG9uIHRoYXQuXG4gICAgICAgIGlmICh0aGlzLl9zcGFuKSB7XG4gICAgICAgICAgICBldmVudC5jb250ZXh0cyA9IF9fYXNzaWduKHsgdHJhY2U6IHRoaXMuX3NwYW4uZ2V0VHJhY2VDb250ZXh0KCkgfSwgZXZlbnQuY29udGV4dHMpO1xuICAgICAgICAgICAgdmFyIHRyYW5zYWN0aW9uTmFtZSA9IChfYSA9IHRoaXMuX3NwYW4udHJhbnNhY3Rpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uYW1lO1xuICAgICAgICAgICAgaWYgKHRyYW5zYWN0aW9uTmFtZSkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnRhZ3MgPSBfX2Fzc2lnbih7IHRyYW5zYWN0aW9uOiB0cmFuc2FjdGlvbk5hbWUgfSwgZXZlbnQudGFncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYXBwbHlGaW5nZXJwcmludChldmVudCk7XG4gICAgICAgIGV2ZW50LmJyZWFkY3J1bWJzID0gX19zcHJlYWQoKGV2ZW50LmJyZWFkY3J1bWJzIHx8IFtdKSwgdGhpcy5fYnJlYWRjcnVtYnMpO1xuICAgICAgICBldmVudC5icmVhZGNydW1icyA9IGV2ZW50LmJyZWFkY3J1bWJzLmxlbmd0aCA+IDAgPyBldmVudC5icmVhZGNydW1icyA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25vdGlmeUV2ZW50UHJvY2Vzc29ycyhfX3NwcmVhZChnZXRHbG9iYWxFdmVudFByb2Nlc3NvcnMoKSwgdGhpcy5fZXZlbnRQcm9jZXNzb3JzKSwgZXZlbnQsIGhpbnQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhpcyB3aWxsIGJlIGNhbGxlZCBhZnRlciB7QGxpbmsgYXBwbHlUb0V2ZW50fSBpcyBmaW5pc2hlZC5cbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuX25vdGlmeUV2ZW50UHJvY2Vzc29ycyA9IGZ1bmN0aW9uIChwcm9jZXNzb3JzLCBldmVudCwgaGludCwgaW5kZXgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKGluZGV4ID09PSB2b2lkIDApIHsgaW5kZXggPSAwOyB9XG4gICAgICAgIHJldHVybiBuZXcgU3luY1Byb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHByb2Nlc3NvciA9IHByb2Nlc3NvcnNbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKGV2ZW50ID09PSBudWxsIHx8IHR5cGVvZiBwcm9jZXNzb3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBwcm9jZXNzb3IoX19hc3NpZ24oe30sIGV2ZW50KSwgaGludCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChmaW5hbCkgeyByZXR1cm4gX3RoaXMuX25vdGlmeUV2ZW50UHJvY2Vzc29ycyhwcm9jZXNzb3JzLCBmaW5hbCwgaGludCwgaW5kZXggKyAxKS50aGVuKHJlc29sdmUpOyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4obnVsbCwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9ub3RpZnlFdmVudFByb2Nlc3NvcnMocHJvY2Vzc29ycywgcmVzdWx0LCBoaW50LCBpbmRleCArIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNvbHZlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4obnVsbCwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhpcyB3aWxsIGJlIGNhbGxlZCBvbiBldmVyeSBzZXQgY2FsbC5cbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuX25vdGlmeVNjb3BlTGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuX25vdGlmeWluZ0xpc3RlbmVycykge1xuICAgICAgICAgICAgdGhpcy5fbm90aWZ5aW5nTGlzdGVuZXJzID0gdHJ1ZTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9zY29wZUxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhfdGhpcyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX25vdGlmeWluZ0xpc3RlbmVycyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgZmluZ2VycHJpbnQgZnJvbSB0aGUgc2NvcGUgdG8gdGhlIGV2ZW50IGlmIHRoZXJlJ3Mgb25lLFxuICAgICAqIHVzZXMgbWVzc2FnZSBpZiB0aGVyZSdzIG9uZSBpbnN0ZWFkIG9yIGdldCByaWQgb2YgZW1wdHkgZmluZ2VycHJpbnRcbiAgICAgKi9cbiAgICBTY29wZS5wcm90b3R5cGUuX2FwcGx5RmluZ2VycHJpbnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgLy8gTWFrZSBzdXJlIGl0J3MgYW4gYXJyYXkgZmlyc3QgYW5kIHdlIGFjdHVhbGx5IGhhdmUgc29tZXRoaW5nIGluIHBsYWNlXG4gICAgICAgIGV2ZW50LmZpbmdlcnByaW50ID0gZXZlbnQuZmluZ2VycHJpbnRcbiAgICAgICAgICAgID8gQXJyYXkuaXNBcnJheShldmVudC5maW5nZXJwcmludClcbiAgICAgICAgICAgICAgICA/IGV2ZW50LmZpbmdlcnByaW50XG4gICAgICAgICAgICAgICAgOiBbZXZlbnQuZmluZ2VycHJpbnRdXG4gICAgICAgICAgICA6IFtdO1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIHNvbWV0aGluZyBvbiB0aGUgc2NvcGUsIHRoZW4gbWVyZ2UgaXQgd2l0aCBldmVudFxuICAgICAgICBpZiAodGhpcy5fZmluZ2VycHJpbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LmZpbmdlcnByaW50ID0gZXZlbnQuZmluZ2VycHJpbnQuY29uY2F0KHRoaXMuX2ZpbmdlcnByaW50KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB3ZSBoYXZlIG5vIGRhdGEgYXQgYWxsLCByZW1vdmUgZW1wdHkgYXJyYXkgZGVmYXVsdFxuICAgICAgICBpZiAoZXZlbnQuZmluZ2VycHJpbnQgJiYgIWV2ZW50LmZpbmdlcnByaW50Lmxlbmd0aCkge1xuICAgICAgICAgICAgZGVsZXRlIGV2ZW50LmZpbmdlcnByaW50O1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU2NvcGU7XG59KCkpO1xuZXhwb3J0IHsgU2NvcGUgfTtcbi8qKlxuICogUmV0cnVucyB0aGUgZ2xvYmFsIGV2ZW50IHByb2Nlc3NvcnMuXG4gKi9cbmZ1bmN0aW9uIGdldEdsb2JhbEV2ZW50UHJvY2Vzc29ycygpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MgICovXG4gICAgdmFyIGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdCgpO1xuICAgIGdsb2JhbC5fX1NFTlRSWV9fID0gZ2xvYmFsLl9fU0VOVFJZX18gfHwge307XG4gICAgZ2xvYmFsLl9fU0VOVFJZX18uZ2xvYmFsRXZlbnRQcm9jZXNzb3JzID0gZ2xvYmFsLl9fU0VOVFJZX18uZ2xvYmFsRXZlbnRQcm9jZXNzb3JzIHx8IFtdO1xuICAgIHJldHVybiBnbG9iYWwuX19TRU5UUllfXy5nbG9iYWxFdmVudFByb2Nlc3NvcnM7XG4gICAgLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MgKi9cbn1cbi8qKlxuICogQWRkIGEgRXZlbnRQcm9jZXNzb3IgdG8gYmUga2VwdCBnbG9iYWxseS5cbiAqIEBwYXJhbSBjYWxsYmFjayBFdmVudFByb2Nlc3NvciB0byBhZGRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yKGNhbGxiYWNrKSB7XG4gICAgZ2V0R2xvYmFsRXZlbnRQcm9jZXNzb3JzKCkucHVzaChjYWxsYmFjayk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY29wZS5qcy5tYXAiLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5pbXBvcnQgeyBjb25zb2xlU2FuZGJveCwgZ2V0R2xvYmFsT2JqZWN0IH0gZnJvbSAnLi9taXNjJztcbi8vIFRPRE86IEltcGxlbWVudCBkaWZmZXJlbnQgbG9nZ2VycyBmb3IgZGlmZmVyZW50IGVudmlyb25tZW50c1xudmFyIGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdCgpO1xuLyoqIFByZWZpeCBmb3IgbG9nZ2luZyBzdHJpbmdzICovXG52YXIgUFJFRklYID0gJ1NlbnRyeSBMb2dnZXIgJztcbi8qKiBKU0RvYyAqL1xudmFyIExvZ2dlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBmdW5jdGlvbiBMb2dnZXIoKSB7XG4gICAgICAgIHRoaXMuX2VuYWJsZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgLyoqIEpTRG9jICovXG4gICAgTG9nZ2VyLnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9lbmFibGVkID0gZmFsc2U7XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBMb2dnZXIucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fZW5hYmxlZCA9IHRydWU7XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBMb2dnZXIucHJvdG90eXBlLmxvZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2VuYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlU2FuZGJveChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBnbG9iYWwuY29uc29sZS5sb2coUFJFRklYICsgXCJbTG9nXTogXCIgKyBhcmdzLmpvaW4oJyAnKSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgTG9nZ2VyLnByb3RvdHlwZS53YXJuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fZW5hYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGVTYW5kYm94KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGdsb2JhbC5jb25zb2xlLndhcm4oUFJFRklYICsgXCJbV2Fybl06IFwiICsgYXJncy5qb2luKCcgJykpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIExvZ2dlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9lbmFibGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZVNhbmRib3goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZ2xvYmFsLmNvbnNvbGUuZXJyb3IoUFJFRklYICsgXCJbRXJyb3JdOiBcIiArIGFyZ3Muam9pbignICcpKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gTG9nZ2VyO1xufSgpKTtcbi8vIEVuc3VyZSB3ZSBvbmx5IGhhdmUgYSBzaW5nbGUgbG9nZ2VyIGluc3RhbmNlLCBldmVuIGlmIG11bHRpcGxlIHZlcnNpb25zIG9mIEBzZW50cnkvdXRpbHMgYXJlIGJlaW5nIHVzZWRcbmdsb2JhbC5fX1NFTlRSWV9fID0gZ2xvYmFsLl9fU0VOVFJZX18gfHwge307XG52YXIgbG9nZ2VyID0gZ2xvYmFsLl9fU0VOVFJZX18ubG9nZ2VyIHx8IChnbG9iYWwuX19TRU5UUllfXy5sb2dnZXIgPSBuZXcgTG9nZ2VyKCkpO1xuZXhwb3J0IHsgbG9nZ2VyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dnZXIuanMubWFwIiwiLyoqXG4gKiBTZXNzaW9uIFN0YXR1c1xuICovXG5leHBvcnQgdmFyIFNlc3Npb25TdGF0dXM7XG4oZnVuY3Rpb24gKFNlc3Npb25TdGF0dXMpIHtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBTZXNzaW9uU3RhdHVzW1wiT2tcIl0gPSBcIm9rXCI7XG4gICAgLyoqIEpTRG9jICovXG4gICAgU2Vzc2lvblN0YXR1c1tcIkV4aXRlZFwiXSA9IFwiZXhpdGVkXCI7XG4gICAgLyoqIEpTRG9jICovXG4gICAgU2Vzc2lvblN0YXR1c1tcIkNyYXNoZWRcIl0gPSBcImNyYXNoZWRcIjtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBTZXNzaW9uU3RhdHVzW1wiQWJub3JtYWxcIl0gPSBcImFibm9ybWFsXCI7XG59KShTZXNzaW9uU3RhdHVzIHx8IChTZXNzaW9uU3RhdHVzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlc3Npb24uanMubWFwIiwiaW1wb3J0IHsgU2Vzc2lvblN0YXR1cyB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuaW1wb3J0IHsgZHJvcFVuZGVmaW5lZEtleXMsIHV1aWQ0IH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG4vKipcbiAqIEBpbmhlcml0ZG9jXG4gKi9cbnZhciBTZXNzaW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNlc3Npb24oY29udGV4dCkge1xuICAgICAgICB0aGlzLmVycm9ycyA9IDA7XG4gICAgICAgIHRoaXMuc2lkID0gdXVpZDQoKTtcbiAgICAgICAgdGhpcy50aW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuICAgICAgICB0aGlzLnN0YXJ0ZWQgPSBEYXRlLm5vdygpO1xuICAgICAgICB0aGlzLmR1cmF0aW9uID0gMDtcbiAgICAgICAgdGhpcy5zdGF0dXMgPSBTZXNzaW9uU3RhdHVzLk9rO1xuICAgICAgICBpZiAoY29udGV4dCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGUoY29udGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqIEpTRG9jICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbiAgICBTZXNzaW9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7IGNvbnRleHQgPSB7fTsgfVxuICAgICAgICBpZiAoY29udGV4dC51c2VyKSB7XG4gICAgICAgICAgICBpZiAoY29udGV4dC51c2VyLmlwX2FkZHJlc3MpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlwQWRkcmVzcyA9IGNvbnRleHQudXNlci5pcF9hZGRyZXNzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjb250ZXh0LmRpZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlkID0gY29udGV4dC51c2VyLmlkIHx8IGNvbnRleHQudXNlci5lbWFpbCB8fCBjb250ZXh0LnVzZXIudXNlcm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50aW1lc3RhbXAgPSBjb250ZXh0LnRpbWVzdGFtcCB8fCBEYXRlLm5vdygpO1xuICAgICAgICBpZiAoY29udGV4dC5zaWQpIHtcbiAgICAgICAgICAgIC8vIEdvb2QgZW5vdWdoIHV1aWQgdmFsaWRhdGlvbi4g4oCUIEthbWlsXG4gICAgICAgICAgICB0aGlzLnNpZCA9IGNvbnRleHQuc2lkLmxlbmd0aCA9PT0gMzIgPyBjb250ZXh0LnNpZCA6IHV1aWQ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRleHQuZGlkKSB7XG4gICAgICAgICAgICB0aGlzLmRpZCA9IFwiXCIgKyBjb250ZXh0LmRpZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGNvbnRleHQuc3RhcnRlZCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRlZCA9IGNvbnRleHQuc3RhcnRlZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGNvbnRleHQuZHVyYXRpb24gPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLmR1cmF0aW9uID0gY29udGV4dC5kdXJhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZHVyYXRpb24gPSB0aGlzLnRpbWVzdGFtcCAtIHRoaXMuc3RhcnRlZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGV4dC5yZWxlYXNlKSB7XG4gICAgICAgICAgICB0aGlzLnJlbGVhc2UgPSBjb250ZXh0LnJlbGVhc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRleHQuZW52aXJvbm1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZW52aXJvbm1lbnQgPSBjb250ZXh0LmVudmlyb25tZW50O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZXh0LmlwQWRkcmVzcykge1xuICAgICAgICAgICAgdGhpcy5pcEFkZHJlc3MgPSBjb250ZXh0LmlwQWRkcmVzcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGV4dC51c2VyQWdlbnQpIHtcbiAgICAgICAgICAgIHRoaXMudXNlckFnZW50ID0gY29udGV4dC51c2VyQWdlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjb250ZXh0LmVycm9ycyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gY29udGV4dC5lcnJvcnM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRleHQuc3RhdHVzKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXR1cyA9IGNvbnRleHQuc3RhdHVzO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBTZXNzaW9uLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIChzdGF0dXMpIHtcbiAgICAgICAgaWYgKHN0YXR1cykge1xuICAgICAgICAgICAgdGhpcy51cGRhdGUoeyBzdGF0dXM6IHN0YXR1cyB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnN0YXR1cyA9PT0gU2Vzc2lvblN0YXR1cy5Paykge1xuICAgICAgICAgICAgdGhpcy51cGRhdGUoeyBzdGF0dXM6IFNlc3Npb25TdGF0dXMuRXhpdGVkIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgU2Vzc2lvbi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZHJvcFVuZGVmaW5lZEtleXMoe1xuICAgICAgICAgICAgc2lkOiBcIlwiICsgdGhpcy5zaWQsXG4gICAgICAgICAgICBpbml0OiB0cnVlLFxuICAgICAgICAgICAgc3RhcnRlZDogbmV3IERhdGUodGhpcy5zdGFydGVkKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSh0aGlzLnRpbWVzdGFtcCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgICAgICAgICBlcnJvcnM6IHRoaXMuZXJyb3JzLFxuICAgICAgICAgICAgZGlkOiB0eXBlb2YgdGhpcy5kaWQgPT09ICdudW1iZXInIHx8IHR5cGVvZiB0aGlzLmRpZCA9PT0gJ3N0cmluZycgPyBcIlwiICsgdGhpcy5kaWQgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBkdXJhdGlvbjogdGhpcy5kdXJhdGlvbixcbiAgICAgICAgICAgIGF0dHJzOiBkcm9wVW5kZWZpbmVkS2V5cyh7XG4gICAgICAgICAgICAgICAgcmVsZWFzZTogdGhpcy5yZWxlYXNlLFxuICAgICAgICAgICAgICAgIGVudmlyb25tZW50OiB0aGlzLmVudmlyb25tZW50LFxuICAgICAgICAgICAgICAgIGlwX2FkZHJlc3M6IHRoaXMuaXBBZGRyZXNzLFxuICAgICAgICAgICAgICAgIHVzZXJfYWdlbnQ6IHRoaXMudXNlckFnZW50LFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFNlc3Npb247XG59KCkpO1xuZXhwb3J0IHsgU2Vzc2lvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2Vzc2lvbi5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19yZWFkLCBfX3NwcmVhZCB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgY29uc29sZVNhbmRib3gsIGRhdGVUaW1lc3RhbXBJblNlY29uZHMsIGdldEdsb2JhbE9iamVjdCwgaXNOb2RlRW52LCBsb2dnZXIsIHV1aWQ0IH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBTY29wZSB9IGZyb20gJy4vc2NvcGUnO1xuaW1wb3J0IHsgU2Vzc2lvbiB9IGZyb20gJy4vc2Vzc2lvbic7XG4vKipcbiAqIEFQSSBjb21wYXRpYmlsaXR5IHZlcnNpb24gb2YgdGhpcyBodWIuXG4gKlxuICogV0FSTklORzogVGhpcyBudW1iZXIgc2hvdWxkIG9ubHkgYmUgaW5jcmVhc2VkIHdoZW4gdGhlIGdsb2JhbCBpbnRlcmZhY2VcbiAqIGNoYW5nZXMgYW5kIG5ldyBtZXRob2RzIGFyZSBpbnRyb2R1Y2VkLlxuICpcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IHZhciBBUElfVkVSU0lPTiA9IDM7XG4vKipcbiAqIERlZmF1bHQgbWF4aW11bSBudW1iZXIgb2YgYnJlYWRjcnVtYnMgYWRkZWQgdG8gYW4gZXZlbnQuIENhbiBiZSBvdmVyd3JpdHRlblxuICogd2l0aCB7QGxpbmsgT3B0aW9ucy5tYXhCcmVhZGNydW1ic30uXG4gKi9cbnZhciBERUZBVUxUX0JSRUFEQ1JVTUJTID0gMTAwO1xuLyoqXG4gKiBBYnNvbHV0ZSBtYXhpbXVtIG51bWJlciBvZiBicmVhZGNydW1icyBhZGRlZCB0byBhbiBldmVudC4gVGhlXG4gKiBgbWF4QnJlYWRjcnVtYnNgIG9wdGlvbiBjYW5ub3QgYmUgaGlnaGVyIHRoYW4gdGhpcyB2YWx1ZS5cbiAqL1xudmFyIE1BWF9CUkVBRENSVU1CUyA9IDEwMDtcbi8qKlxuICogQGluaGVyaXREb2NcbiAqL1xudmFyIEh1YiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBodWIsIHdpbGwgcHVzaCBvbmUge0BsaW5rIExheWVyfSBpbnRvIHRoZVxuICAgICAqIGludGVybmFsIHN0YWNrIG9uIGNyZWF0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNsaWVudCBib3VuZCB0byB0aGUgaHViLlxuICAgICAqIEBwYXJhbSBzY29wZSBib3VuZCB0byB0aGUgaHViLlxuICAgICAqIEBwYXJhbSB2ZXJzaW9uIG51bWJlciwgaGlnaGVyIG51bWJlciBtZWFucyBoaWdoZXIgcHJpb3JpdHkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gSHViKGNsaWVudCwgc2NvcGUsIF92ZXJzaW9uKSB7XG4gICAgICAgIGlmIChzY29wZSA9PT0gdm9pZCAwKSB7IHNjb3BlID0gbmV3IFNjb3BlKCk7IH1cbiAgICAgICAgaWYgKF92ZXJzaW9uID09PSB2b2lkIDApIHsgX3ZlcnNpb24gPSBBUElfVkVSU0lPTjsgfVxuICAgICAgICB0aGlzLl92ZXJzaW9uID0gX3ZlcnNpb247XG4gICAgICAgIC8qKiBJcyBhIHtAbGluayBMYXllcn1bXSBjb250YWluaW5nIHRoZSBjbGllbnQgYW5kIHNjb3BlICovXG4gICAgICAgIHRoaXMuX3N0YWNrID0gW3t9XTtcbiAgICAgICAgdGhpcy5nZXRTdGFja1RvcCgpLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuYmluZENsaWVudChjbGllbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuaXNPbGRlclRoYW4gPSBmdW5jdGlvbiAodmVyc2lvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmVyc2lvbiA8IHZlcnNpb247XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuYmluZENsaWVudCA9IGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgICAgdmFyIHRvcCA9IHRoaXMuZ2V0U3RhY2tUb3AoKTtcbiAgICAgICAgdG9wLmNsaWVudCA9IGNsaWVudDtcbiAgICAgICAgaWYgKGNsaWVudCAmJiBjbGllbnQuc2V0dXBJbnRlZ3JhdGlvbnMpIHtcbiAgICAgICAgICAgIGNsaWVudC5zZXR1cEludGVncmF0aW9ucygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUucHVzaFNjb3BlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBXZSB3YW50IHRvIGNsb25lIHRoZSBjb250ZW50IG9mIHByZXYgc2NvcGVcbiAgICAgICAgdmFyIHNjb3BlID0gU2NvcGUuY2xvbmUodGhpcy5nZXRTY29wZSgpKTtcbiAgICAgICAgdGhpcy5nZXRTdGFjaygpLnB1c2goe1xuICAgICAgICAgICAgY2xpZW50OiB0aGlzLmdldENsaWVudCgpLFxuICAgICAgICAgICAgc2NvcGU6IHNjb3BlLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHNjb3BlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLnBvcFNjb3BlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5nZXRTdGFjaygpLmxlbmd0aCA8PSAxKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gISF0aGlzLmdldFN0YWNrKCkucG9wKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUud2l0aFNjb3BlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBzY29wZSA9IHRoaXMucHVzaFNjb3BlKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjYWxsYmFjayhzY29wZSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLnBvcFNjb3BlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5nZXRDbGllbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFN0YWNrVG9wKCkuY2xpZW50O1xuICAgIH07XG4gICAgLyoqIFJldHVybnMgdGhlIHNjb3BlIG9mIHRoZSB0b3Agc3RhY2suICovXG4gICAgSHViLnByb3RvdHlwZS5nZXRTY29wZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RhY2tUb3AoKS5zY29wZTtcbiAgICB9O1xuICAgIC8qKiBSZXR1cm5zIHRoZSBzY29wZSBzdGFjayBmb3IgZG9tYWlucyBvciB0aGUgcHJvY2Vzcy4gKi9cbiAgICBIdWIucHJvdG90eXBlLmdldFN0YWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhY2s7XG4gICAgfTtcbiAgICAvKiogUmV0dXJucyB0aGUgdG9wbW9zdCBzY29wZSBsYXllciBpbiB0aGUgb3JkZXIgZG9tYWluID4gbG9jYWwgPiBwcm9jZXNzLiAqL1xuICAgIEh1Yi5wcm90b3R5cGUuZ2V0U3RhY2tUb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGFja1t0aGlzLl9zdGFjay5sZW5ndGggLSAxXTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnksIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcbiAgICBIdWIucHJvdG90eXBlLmNhcHR1cmVFeGNlcHRpb24gPSBmdW5jdGlvbiAoZXhjZXB0aW9uLCBoaW50KSB7XG4gICAgICAgIHZhciBldmVudElkID0gKHRoaXMuX2xhc3RFdmVudElkID0gdXVpZDQoKSk7XG4gICAgICAgIHZhciBmaW5hbEhpbnQgPSBoaW50O1xuICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIGV4cGxpY2l0IGhpbnQgcHJvdmlkZWQsIG1pbWljayB0aGUgc2FtZSB0aGluZyB0aGF0IHdvdWxkIGhhcHBlblxuICAgICAgICAvLyBpbiB0aGUgbWluaW1hbCBpdHNlbGYgdG8gY3JlYXRlIGEgY29uc2lzdGVudCBiZWhhdmlvci5cbiAgICAgICAgLy8gV2UgZG9uJ3QgZG8gdGhpcyBpbiB0aGUgY2xpZW50LCBhcyBpdCdzIHRoZSBsb3dlc3QgbGV2ZWwgQVBJLCBhbmQgZG9pbmcgdGhpcyxcbiAgICAgICAgLy8gd291bGQgcHJldmVudCB1c2VyIGZyb20gaGF2aW5nIGZ1bGwgY29udHJvbCBvdmVyIGRpcmVjdCBjYWxscy5cbiAgICAgICAgaWYgKCFoaW50KSB7XG4gICAgICAgICAgICB2YXIgc3ludGhldGljRXhjZXB0aW9uID0gdm9pZCAwO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlbnRyeSBzeW50aGV0aWNFeGNlcHRpb24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgICBzeW50aGV0aWNFeGNlcHRpb24gPSBleGNlcHRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbEhpbnQgPSB7XG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFeGNlcHRpb246IGV4Y2VwdGlvbixcbiAgICAgICAgICAgICAgICBzeW50aGV0aWNFeGNlcHRpb246IHN5bnRoZXRpY0V4Y2VwdGlvbixcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faW52b2tlQ2xpZW50KCdjYXB0dXJlRXhjZXB0aW9uJywgZXhjZXB0aW9uLCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZmluYWxIaW50KSwgeyBldmVudF9pZDogZXZlbnRJZCB9KSk7XG4gICAgICAgIHJldHVybiBldmVudElkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLmNhcHR1cmVNZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UsIGxldmVsLCBoaW50KSB7XG4gICAgICAgIHZhciBldmVudElkID0gKHRoaXMuX2xhc3RFdmVudElkID0gdXVpZDQoKSk7XG4gICAgICAgIHZhciBmaW5hbEhpbnQgPSBoaW50O1xuICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIGV4cGxpY2l0IGhpbnQgcHJvdmlkZWQsIG1pbWljayB0aGUgc2FtZSB0aGluZyB0aGF0IHdvdWxkIGhhcHBlblxuICAgICAgICAvLyBpbiB0aGUgbWluaW1hbCBpdHNlbGYgdG8gY3JlYXRlIGEgY29uc2lzdGVudCBiZWhhdmlvci5cbiAgICAgICAgLy8gV2UgZG9uJ3QgZG8gdGhpcyBpbiB0aGUgY2xpZW50LCBhcyBpdCdzIHRoZSBsb3dlc3QgbGV2ZWwgQVBJLCBhbmQgZG9pbmcgdGhpcyxcbiAgICAgICAgLy8gd291bGQgcHJldmVudCB1c2VyIGZyb20gaGF2aW5nIGZ1bGwgY29udHJvbCBvdmVyIGRpcmVjdCBjYWxscy5cbiAgICAgICAgaWYgKCFoaW50KSB7XG4gICAgICAgICAgICB2YXIgc3ludGhldGljRXhjZXB0aW9uID0gdm9pZCAwO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgc3ludGhldGljRXhjZXB0aW9uID0gZXhjZXB0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxIaW50ID0ge1xuICAgICAgICAgICAgICAgIG9yaWdpbmFsRXhjZXB0aW9uOiBtZXNzYWdlLFxuICAgICAgICAgICAgICAgIHN5bnRoZXRpY0V4Y2VwdGlvbjogc3ludGhldGljRXhjZXB0aW9uLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pbnZva2VDbGllbnQoJ2NhcHR1cmVNZXNzYWdlJywgbWVzc2FnZSwgbGV2ZWwsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBmaW5hbEhpbnQpLCB7IGV2ZW50X2lkOiBldmVudElkIH0pKTtcbiAgICAgICAgcmV0dXJuIGV2ZW50SWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuY2FwdHVyZUV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50LCBoaW50KSB7XG4gICAgICAgIHZhciBldmVudElkID0gKHRoaXMuX2xhc3RFdmVudElkID0gdXVpZDQoKSk7XG4gICAgICAgIHRoaXMuX2ludm9rZUNsaWVudCgnY2FwdHVyZUV2ZW50JywgZXZlbnQsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBoaW50KSwgeyBldmVudF9pZDogZXZlbnRJZCB9KSk7XG4gICAgICAgIHJldHVybiBldmVudElkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLmxhc3RFdmVudElkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGFzdEV2ZW50SWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuYWRkQnJlYWRjcnVtYiA9IGZ1bmN0aW9uIChicmVhZGNydW1iLCBoaW50KSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuZ2V0U3RhY2tUb3AoKSwgc2NvcGUgPSBfYS5zY29wZSwgY2xpZW50ID0gX2EuY2xpZW50O1xuICAgICAgICBpZiAoIXNjb3BlIHx8ICFjbGllbnQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgICAgICAgdmFyIF9iID0gKGNsaWVudC5nZXRPcHRpb25zICYmIGNsaWVudC5nZXRPcHRpb25zKCkpIHx8IHt9LCBfYyA9IF9iLmJlZm9yZUJyZWFkY3J1bWIsIGJlZm9yZUJyZWFkY3J1bWIgPSBfYyA9PT0gdm9pZCAwID8gbnVsbCA6IF9jLCBfZCA9IF9iLm1heEJyZWFkY3J1bWJzLCBtYXhCcmVhZGNydW1icyA9IF9kID09PSB2b2lkIDAgPyBERUZBVUxUX0JSRUFEQ1JVTUJTIDogX2Q7XG4gICAgICAgIGlmIChtYXhCcmVhZGNydW1icyA8PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgdGltZXN0YW1wID0gZGF0ZVRpbWVzdGFtcEluU2Vjb25kcygpO1xuICAgICAgICB2YXIgbWVyZ2VkQnJlYWRjcnVtYiA9IF9fYXNzaWduKHsgdGltZXN0YW1wOiB0aW1lc3RhbXAgfSwgYnJlYWRjcnVtYik7XG4gICAgICAgIHZhciBmaW5hbEJyZWFkY3J1bWIgPSBiZWZvcmVCcmVhZGNydW1iXG4gICAgICAgICAgICA/IGNvbnNvbGVTYW5kYm94KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJlZm9yZUJyZWFkY3J1bWIobWVyZ2VkQnJlYWRjcnVtYiwgaGludCk7IH0pXG4gICAgICAgICAgICA6IG1lcmdlZEJyZWFkY3J1bWI7XG4gICAgICAgIGlmIChmaW5hbEJyZWFkY3J1bWIgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHNjb3BlLmFkZEJyZWFkY3J1bWIoZmluYWxCcmVhZGNydW1iLCBNYXRoLm1pbihtYXhCcmVhZGNydW1icywgTUFYX0JSRUFEQ1JVTUJTKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuc2V0VXNlciA9IGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgIHZhciBzY29wZSA9IHRoaXMuZ2V0U2NvcGUoKTtcbiAgICAgICAgaWYgKHNjb3BlKVxuICAgICAgICAgICAgc2NvcGUuc2V0VXNlcih1c2VyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5zZXRUYWdzID0gZnVuY3Rpb24gKHRhZ3MpIHtcbiAgICAgICAgdmFyIHNjb3BlID0gdGhpcy5nZXRTY29wZSgpO1xuICAgICAgICBpZiAoc2NvcGUpXG4gICAgICAgICAgICBzY29wZS5zZXRUYWdzKHRhZ3MpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLnNldEV4dHJhcyA9IGZ1bmN0aW9uIChleHRyYXMpIHtcbiAgICAgICAgdmFyIHNjb3BlID0gdGhpcy5nZXRTY29wZSgpO1xuICAgICAgICBpZiAoc2NvcGUpXG4gICAgICAgICAgICBzY29wZS5zZXRFeHRyYXMoZXh0cmFzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5zZXRUYWcgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgc2NvcGUgPSB0aGlzLmdldFNjb3BlKCk7XG4gICAgICAgIGlmIChzY29wZSlcbiAgICAgICAgICAgIHNjb3BlLnNldFRhZyhrZXksIHZhbHVlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5zZXRFeHRyYSA9IGZ1bmN0aW9uIChrZXksIGV4dHJhKSB7XG4gICAgICAgIHZhciBzY29wZSA9IHRoaXMuZ2V0U2NvcGUoKTtcbiAgICAgICAgaWYgKHNjb3BlKVxuICAgICAgICAgICAgc2NvcGUuc2V0RXh0cmEoa2V5LCBleHRyYSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgSHViLnByb3RvdHlwZS5zZXRDb250ZXh0ID0gZnVuY3Rpb24gKG5hbWUsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIHNjb3BlID0gdGhpcy5nZXRTY29wZSgpO1xuICAgICAgICBpZiAoc2NvcGUpXG4gICAgICAgICAgICBzY29wZS5zZXRDb250ZXh0KG5hbWUsIGNvbnRleHQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLmNvbmZpZ3VyZVNjb3BlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuZ2V0U3RhY2tUb3AoKSwgc2NvcGUgPSBfYS5zY29wZSwgY2xpZW50ID0gX2EuY2xpZW50O1xuICAgICAgICBpZiAoc2NvcGUgJiYgY2xpZW50KSB7XG4gICAgICAgICAgICBjYWxsYmFjayhzY29wZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9sZEh1YiA9IG1ha2VNYWluKHRoaXMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2FsbGJhY2sodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBtYWtlTWFpbihvbGRIdWIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuZ2V0SW50ZWdyYXRpb24gPSBmdW5jdGlvbiAoaW50ZWdyYXRpb24pIHtcbiAgICAgICAgdmFyIGNsaWVudCA9IHRoaXMuZ2V0Q2xpZW50KCk7XG4gICAgICAgIGlmICghY2xpZW50KVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gY2xpZW50LmdldEludGVncmF0aW9uKGludGVncmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoX29PKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybihcIkNhbm5vdCByZXRyaWV2ZSBpbnRlZ3JhdGlvbiBcIiArIGludGVncmF0aW9uLmlkICsgXCIgZnJvbSB0aGUgY3VycmVudCBIdWJcIik7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIdWIucHJvdG90eXBlLnN0YXJ0U3BhbiA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWxsRXh0ZW5zaW9uTWV0aG9kKCdzdGFydFNwYW4nLCBjb250ZXh0KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSHViLnByb3RvdHlwZS5zdGFydFRyYW5zYWN0aW9uID0gZnVuY3Rpb24gKGNvbnRleHQsIGN1c3RvbVNhbXBsaW5nQ29udGV4dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2FsbEV4dGVuc2lvbk1ldGhvZCgnc3RhcnRUcmFuc2FjdGlvbicsIGNvbnRleHQsIGN1c3RvbVNhbXBsaW5nQ29udGV4dCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUudHJhY2VIZWFkZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2FsbEV4dGVuc2lvbk1ldGhvZCgndHJhY2VIZWFkZXJzJyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuc3RhcnRTZXNzaW9uID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgLy8gRW5kIGV4aXN0aW5nIHNlc3Npb24gaWYgdGhlcmUncyBvbmVcbiAgICAgICAgdGhpcy5lbmRTZXNzaW9uKCk7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuZ2V0U3RhY2tUb3AoKSwgc2NvcGUgPSBfYS5zY29wZSwgY2xpZW50ID0gX2EuY2xpZW50O1xuICAgICAgICB2YXIgX2IgPSAoY2xpZW50ICYmIGNsaWVudC5nZXRPcHRpb25zKCkpIHx8IHt9LCByZWxlYXNlID0gX2IucmVsZWFzZSwgZW52aXJvbm1lbnQgPSBfYi5lbnZpcm9ubWVudDtcbiAgICAgICAgdmFyIHNlc3Npb24gPSBuZXcgU2Vzc2lvbihfX2Fzc2lnbihfX2Fzc2lnbih7IHJlbGVhc2U6IHJlbGVhc2UsXG4gICAgICAgICAgICBlbnZpcm9ubWVudDogZW52aXJvbm1lbnQgfSwgKHNjb3BlICYmIHsgdXNlcjogc2NvcGUuZ2V0VXNlcigpIH0pKSwgY29udGV4dCkpO1xuICAgICAgICBpZiAoc2NvcGUpIHtcbiAgICAgICAgICAgIHNjb3BlLnNldFNlc3Npb24oc2Vzc2lvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlc3Npb247XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEh1Yi5wcm90b3R5cGUuZW5kU2Vzc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5nZXRTdGFja1RvcCgpLCBzY29wZSA9IF9hLnNjb3BlLCBjbGllbnQgPSBfYS5jbGllbnQ7XG4gICAgICAgIGlmICghc2NvcGUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBzZXNzaW9uID0gc2NvcGUuZ2V0U2Vzc2lvbiAmJiBzY29wZS5nZXRTZXNzaW9uKCk7XG4gICAgICAgIGlmIChzZXNzaW9uKSB7XG4gICAgICAgICAgICBzZXNzaW9uLmNsb3NlKCk7XG4gICAgICAgICAgICBpZiAoY2xpZW50ICYmIGNsaWVudC5jYXB0dXJlU2Vzc2lvbikge1xuICAgICAgICAgICAgICAgIGNsaWVudC5jYXB0dXJlU2Vzc2lvbihzZXNzaW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNjb3BlLnNldFNlc3Npb24oKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgaGVscGVyIGZ1bmN0aW9uIHRvIGNhbGwgYSBtZXRob2Qgb24gdGhlIHRvcCBjbGllbnQgaWYgaXQgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHBhcmFtIG1ldGhvZCBUaGUgbWV0aG9kIHRvIGNhbGwgb24gdGhlIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gYXJncyBBcmd1bWVudHMgdG8gcGFzcyB0byB0aGUgY2xpZW50IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgSHViLnByb3RvdHlwZS5faW52b2tlQ2xpZW50ID0gZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfYiA9IHRoaXMuZ2V0U3RhY2tUb3AoKSwgc2NvcGUgPSBfYi5zY29wZSwgY2xpZW50ID0gX2IuY2xpZW50O1xuICAgICAgICBpZiAoY2xpZW50ICYmIGNsaWVudFttZXRob2RdKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICAoX2EgPSBjbGllbnQpW21ldGhvZF0uYXBwbHkoX2EsIF9fc3ByZWFkKGFyZ3MsIFtzY29wZV0pKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2FsbHMgZ2xvYmFsIGV4dGVuc2lvbiBtZXRob2QgYW5kIGJpbmRpbmcgY3VycmVudCBpbnN0YW5jZSB0byB0aGUgZnVuY3Rpb24gY2FsbFxuICAgICAqL1xuICAgIC8vIEB0cy1pZ25vcmUgRnVuY3Rpb24gbGFja3MgZW5kaW5nIHJldHVybiBzdGF0ZW1lbnQgYW5kIHJldHVybiB0eXBlIGRvZXMgbm90IGluY2x1ZGUgJ3VuZGVmaW5lZCcuIHRzKDIzNjYpXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBIdWIucHJvdG90eXBlLl9jYWxsRXh0ZW5zaW9uTWV0aG9kID0gZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FycmllciA9IGdldE1haW5DYXJyaWVyKCk7XG4gICAgICAgIHZhciBzZW50cnkgPSBjYXJyaWVyLl9fU0VOVFJZX187XG4gICAgICAgIGlmIChzZW50cnkgJiYgc2VudHJ5LmV4dGVuc2lvbnMgJiYgdHlwZW9mIHNlbnRyeS5leHRlbnNpb25zW21ldGhvZF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBzZW50cnkuZXh0ZW5zaW9uc1ttZXRob2RdLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlci53YXJuKFwiRXh0ZW5zaW9uIG1ldGhvZCBcIiArIG1ldGhvZCArIFwiIGNvdWxkbid0IGJlIGZvdW5kLCBkb2luZyBub3RoaW5nLlwiKTtcbiAgICB9O1xuICAgIHJldHVybiBIdWI7XG59KCkpO1xuZXhwb3J0IHsgSHViIH07XG4vKiogUmV0dXJucyB0aGUgZ2xvYmFsIHNoaW0gcmVnaXN0cnkuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWFpbkNhcnJpZXIoKSB7XG4gICAgdmFyIGNhcnJpZXIgPSBnZXRHbG9iYWxPYmplY3QoKTtcbiAgICBjYXJyaWVyLl9fU0VOVFJZX18gPSBjYXJyaWVyLl9fU0VOVFJZX18gfHwge1xuICAgICAgICBleHRlbnNpb25zOiB7fSxcbiAgICAgICAgaHViOiB1bmRlZmluZWQsXG4gICAgfTtcbiAgICByZXR1cm4gY2Fycmllcjtcbn1cbi8qKlxuICogUmVwbGFjZXMgdGhlIGN1cnJlbnQgbWFpbiBodWIgd2l0aCB0aGUgcGFzc2VkIG9uZSBvbiB0aGUgZ2xvYmFsIG9iamVjdFxuICpcbiAqIEByZXR1cm5zIFRoZSBvbGQgcmVwbGFjZWQgaHViXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlTWFpbihodWIpIHtcbiAgICB2YXIgcmVnaXN0cnkgPSBnZXRNYWluQ2FycmllcigpO1xuICAgIHZhciBvbGRIdWIgPSBnZXRIdWJGcm9tQ2FycmllcihyZWdpc3RyeSk7XG4gICAgc2V0SHViT25DYXJyaWVyKHJlZ2lzdHJ5LCBodWIpO1xuICAgIHJldHVybiBvbGRIdWI7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGRlZmF1bHQgaHViIGluc3RhbmNlLlxuICpcbiAqIElmIGEgaHViIGlzIGFscmVhZHkgcmVnaXN0ZXJlZCBpbiB0aGUgZ2xvYmFsIGNhcnJpZXIgYnV0IHRoaXMgbW9kdWxlXG4gKiBjb250YWlucyBhIG1vcmUgcmVjZW50IHZlcnNpb24sIGl0IHJlcGxhY2VzIHRoZSByZWdpc3RlcmVkIHZlcnNpb24uXG4gKiBPdGhlcndpc2UsIHRoZSBjdXJyZW50bHkgcmVnaXN0ZXJlZCBodWIgd2lsbCBiZSByZXR1cm5lZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnJlbnRIdWIoKSB7XG4gICAgLy8gR2V0IG1haW4gY2FycmllciAoZ2xvYmFsIGZvciBldmVyeSBlbnZpcm9ubWVudClcbiAgICB2YXIgcmVnaXN0cnkgPSBnZXRNYWluQ2FycmllcigpO1xuICAgIC8vIElmIHRoZXJlJ3Mgbm8gaHViLCBvciBpdHMgYW4gb2xkIEFQSSwgYXNzaWduIGEgbmV3IG9uZVxuICAgIGlmICghaGFzSHViT25DYXJyaWVyKHJlZ2lzdHJ5KSB8fCBnZXRIdWJGcm9tQ2FycmllcihyZWdpc3RyeSkuaXNPbGRlclRoYW4oQVBJX1ZFUlNJT04pKSB7XG4gICAgICAgIHNldEh1Yk9uQ2FycmllcihyZWdpc3RyeSwgbmV3IEh1YigpKTtcbiAgICB9XG4gICAgLy8gUHJlZmVyIGRvbWFpbnMgb3ZlciBnbG9iYWwgaWYgdGhleSBhcmUgdGhlcmUgKGFwcGxpY2FibGUgb25seSB0byBOb2RlIGVudmlyb25tZW50KVxuICAgIGlmIChpc05vZGVFbnYoKSkge1xuICAgICAgICByZXR1cm4gZ2V0SHViRnJvbUFjdGl2ZURvbWFpbihyZWdpc3RyeSk7XG4gICAgfVxuICAgIC8vIFJldHVybiBodWIgdGhhdCBsaXZlcyBvbiBhIGdsb2JhbCBvYmplY3RcbiAgICByZXR1cm4gZ2V0SHViRnJvbUNhcnJpZXIocmVnaXN0cnkpO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBhY3RpdmUgZG9tYWluLCBpZiBvbmUgZXhpc3RzXG4gKlxuICogQHJldHVybnMgVGhlIGRvbWFpbiwgb3IgdW5kZWZpbmVkIGlmIHRoZXJlIGlzIG5vIGFjdGl2ZSBkb21haW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFjdGl2ZURvbWFpbigpIHtcbiAgICB2YXIgc2VudHJ5ID0gZ2V0TWFpbkNhcnJpZXIoKS5fX1NFTlRSWV9fO1xuICAgIHJldHVybiBzZW50cnkgJiYgc2VudHJ5LmV4dGVuc2lvbnMgJiYgc2VudHJ5LmV4dGVuc2lvbnMuZG9tYWluICYmIHNlbnRyeS5leHRlbnNpb25zLmRvbWFpbi5hY3RpdmU7XG59XG4vKipcbiAqIFRyeSB0byByZWFkIHRoZSBodWIgZnJvbSBhbiBhY3RpdmUgZG9tYWluLCBhbmQgZmFsbGJhY2sgdG8gdGhlIHJlZ2lzdHJ5IGlmIG9uZSBkb2Vzbid0IGV4aXN0XG4gKiBAcmV0dXJucyBkaXNjb3ZlcmVkIGh1YlxuICovXG5mdW5jdGlvbiBnZXRIdWJGcm9tQWN0aXZlRG9tYWluKHJlZ2lzdHJ5KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIGFjdGl2ZURvbWFpbiA9IGdldEFjdGl2ZURvbWFpbigpO1xuICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIGFjdGl2ZSBkb21haW4sIGp1c3QgcmV0dXJuIGdsb2JhbCBodWJcbiAgICAgICAgaWYgKCFhY3RpdmVEb21haW4pIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRIdWJGcm9tQ2FycmllcihyZWdpc3RyeSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlcmUncyBubyBodWIgb24gY3VycmVudCBkb21haW4sIG9yIGl0J3MgYW4gb2xkIEFQSSwgYXNzaWduIGEgbmV3IG9uZVxuICAgICAgICBpZiAoIWhhc0h1Yk9uQ2FycmllcihhY3RpdmVEb21haW4pIHx8IGdldEh1YkZyb21DYXJyaWVyKGFjdGl2ZURvbWFpbikuaXNPbGRlclRoYW4oQVBJX1ZFUlNJT04pKSB7XG4gICAgICAgICAgICB2YXIgcmVnaXN0cnlIdWJUb3BTdGFjayA9IGdldEh1YkZyb21DYXJyaWVyKHJlZ2lzdHJ5KS5nZXRTdGFja1RvcCgpO1xuICAgICAgICAgICAgc2V0SHViT25DYXJyaWVyKGFjdGl2ZURvbWFpbiwgbmV3IEh1YihyZWdpc3RyeUh1YlRvcFN0YWNrLmNsaWVudCwgU2NvcGUuY2xvbmUocmVnaXN0cnlIdWJUb3BTdGFjay5zY29wZSkpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXR1cm4gaHViIHRoYXQgbGl2ZXMgb24gYSBkb21haW5cbiAgICAgICAgcmV0dXJuIGdldEh1YkZyb21DYXJyaWVyKGFjdGl2ZURvbWFpbik7XG4gICAgfVxuICAgIGNhdGNoIChfT28pIHtcbiAgICAgICAgLy8gUmV0dXJuIGh1YiB0aGF0IGxpdmVzIG9uIGEgZ2xvYmFsIG9iamVjdFxuICAgICAgICByZXR1cm4gZ2V0SHViRnJvbUNhcnJpZXIocmVnaXN0cnkpO1xuICAgIH1cbn1cbi8qKlxuICogVGhpcyB3aWxsIHRlbGwgd2hldGhlciBhIGNhcnJpZXIgaGFzIGEgaHViIG9uIGl0IG9yIG5vdFxuICogQHBhcmFtIGNhcnJpZXIgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGhhc0h1Yk9uQ2FycmllcihjYXJyaWVyKSB7XG4gICAgcmV0dXJuICEhKGNhcnJpZXIgJiYgY2Fycmllci5fX1NFTlRSWV9fICYmIGNhcnJpZXIuX19TRU5UUllfXy5odWIpO1xufVxuLyoqXG4gKiBUaGlzIHdpbGwgY3JlYXRlIGEgbmV3IHtAbGluayBIdWJ9IGFuZCBhZGQgdG8gdGhlIHBhc3NlZCBvYmplY3Qgb25cbiAqIF9fU0VOVFJZX18uaHViLlxuICogQHBhcmFtIGNhcnJpZXIgb2JqZWN0XG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRIdWJGcm9tQ2FycmllcihjYXJyaWVyKSB7XG4gICAgaWYgKGNhcnJpZXIgJiYgY2Fycmllci5fX1NFTlRSWV9fICYmIGNhcnJpZXIuX19TRU5UUllfXy5odWIpXG4gICAgICAgIHJldHVybiBjYXJyaWVyLl9fU0VOVFJZX18uaHViO1xuICAgIGNhcnJpZXIuX19TRU5UUllfXyA9IGNhcnJpZXIuX19TRU5UUllfXyB8fCB7fTtcbiAgICBjYXJyaWVyLl9fU0VOVFJZX18uaHViID0gbmV3IEh1YigpO1xuICAgIHJldHVybiBjYXJyaWVyLl9fU0VOVFJZX18uaHViO1xufVxuLyoqXG4gKiBUaGlzIHdpbGwgc2V0IHBhc3NlZCB7QGxpbmsgSHVifSBvbiB0aGUgcGFzc2VkIG9iamVjdCdzIF9fU0VOVFJZX18uaHViIGF0dHJpYnV0ZVxuICogQHBhcmFtIGNhcnJpZXIgb2JqZWN0XG4gKiBAcGFyYW0gaHViIEh1YlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0SHViT25DYXJyaWVyKGNhcnJpZXIsIGh1Yikge1xuICAgIGlmICghY2FycmllcilcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNhcnJpZXIuX19TRU5UUllfXyA9IGNhcnJpZXIuX19TRU5UUllfXyB8fCB7fTtcbiAgICBjYXJyaWVyLl9fU0VOVFJZX18uaHViID0gaHViO1xuICAgIHJldHVybiB0cnVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHViLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWQgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yLCBnZXRDdXJyZW50SHViIH0gZnJvbSAnQHNlbnRyeS9odWInO1xuaW1wb3J0IHsgZ2V0RXZlbnREZXNjcmlwdGlvbiwgaXNNYXRjaGluZ1BhdHRlcm4sIGxvZ2dlciB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuLy8gXCJTY3JpcHQgZXJyb3IuXCIgaXMgaGFyZCBjb2RlZCBpbnRvIGJyb3dzZXJzIGZvciBlcnJvcnMgdGhhdCBpdCBjYW4ndCByZWFkLlxuLy8gdGhpcyBpcyB0aGUgcmVzdWx0IG9mIGEgc2NyaXB0IGJlaW5nIHB1bGxlZCBpbiBmcm9tIGFuIGV4dGVybmFsIGRvbWFpbiBhbmQgQ09SUy5cbnZhciBERUZBVUxUX0lHTk9SRV9FUlJPUlMgPSBbL15TY3JpcHQgZXJyb3JcXC4/JC8sIC9eSmF2YXNjcmlwdCBlcnJvcjogU2NyaXB0IGVycm9yXFwuPyBvbiBsaW5lIDAkL107XG4vKiogSW5ib3VuZCBmaWx0ZXJzIGNvbmZpZ3VyYWJsZSBieSB0aGUgdXNlciAqL1xudmFyIEluYm91bmRGaWx0ZXJzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEluYm91bmRGaWx0ZXJzKF9vcHRpb25zKSB7XG4gICAgICAgIGlmIChfb3B0aW9ucyA9PT0gdm9pZCAwKSB7IF9vcHRpb25zID0ge307IH1cbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IF9vcHRpb25zO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubmFtZSA9IEluYm91bmRGaWx0ZXJzLmlkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEluYm91bmRGaWx0ZXJzLnByb3RvdHlwZS5zZXR1cE9uY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgdmFyIGh1YiA9IGdldEN1cnJlbnRIdWIoKTtcbiAgICAgICAgICAgIGlmICghaHViKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHNlbGYgPSBodWIuZ2V0SW50ZWdyYXRpb24oSW5ib3VuZEZpbHRlcnMpO1xuICAgICAgICAgICAgaWYgKHNlbGYpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2xpZW50ID0gaHViLmdldENsaWVudCgpO1xuICAgICAgICAgICAgICAgIHZhciBjbGllbnRPcHRpb25zID0gY2xpZW50ID8gY2xpZW50LmdldE9wdGlvbnMoKSA6IHt9O1xuICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0gc2VsZi5fbWVyZ2VPcHRpb25zKGNsaWVudE9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLl9zaG91bGREcm9wRXZlbnQoZXZlbnQsIG9wdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBldmVudDtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBJbmJvdW5kRmlsdGVycy5wcm90b3R5cGUuX3Nob3VsZERyb3BFdmVudCA9IGZ1bmN0aW9uIChldmVudCwgb3B0aW9ucykge1xuICAgICAgICBpZiAodGhpcy5faXNTZW50cnlFcnJvcihldmVudCwgb3B0aW9ucykpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKFwiRXZlbnQgZHJvcHBlZCBkdWUgdG8gYmVpbmcgaW50ZXJuYWwgU2VudHJ5IEVycm9yLlxcbkV2ZW50OiBcIiArIGdldEV2ZW50RGVzY3JpcHRpb24oZXZlbnQpKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9pc0lnbm9yZWRFcnJvcihldmVudCwgb3B0aW9ucykpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKFwiRXZlbnQgZHJvcHBlZCBkdWUgdG8gYmVpbmcgbWF0Y2hlZCBieSBgaWdub3JlRXJyb3JzYCBvcHRpb24uXFxuRXZlbnQ6IFwiICsgZ2V0RXZlbnREZXNjcmlwdGlvbihldmVudCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lzRGVuaWVkVXJsKGV2ZW50LCBvcHRpb25zKSkge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJFdmVudCBkcm9wcGVkIGR1ZSB0byBiZWluZyBtYXRjaGVkIGJ5IGBkZW55VXJsc2Agb3B0aW9uLlxcbkV2ZW50OiBcIiArIGdldEV2ZW50RGVzY3JpcHRpb24oZXZlbnQpICsgXCIuXFxuVXJsOiBcIiArIHRoaXMuX2dldEV2ZW50RmlsdGVyVXJsKGV2ZW50KSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2lzQWxsb3dlZFVybChldmVudCwgb3B0aW9ucykpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKFwiRXZlbnQgZHJvcHBlZCBkdWUgdG8gbm90IGJlaW5nIG1hdGNoZWQgYnkgYGFsbG93VXJsc2Agb3B0aW9uLlxcbkV2ZW50OiBcIiArIGdldEV2ZW50RGVzY3JpcHRpb24oZXZlbnQpICsgXCIuXFxuVXJsOiBcIiArIHRoaXMuX2dldEV2ZW50RmlsdGVyVXJsKGV2ZW50KSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBJbmJvdW5kRmlsdGVycy5wcm90b3R5cGUuX2lzU2VudHJ5RXJyb3IgPSBmdW5jdGlvbiAoZXZlbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zLmlnbm9yZUludGVybmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiAoKGV2ZW50ICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuZXhjZXB0aW9uICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0gJiZcbiAgICAgICAgICAgICAgICBldmVudC5leGNlcHRpb24udmFsdWVzWzBdLnR5cGUgPT09ICdTZW50cnlFcnJvcicpIHx8XG4gICAgICAgICAgICAgICAgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChfb08pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgSW5ib3VuZEZpbHRlcnMucHJvdG90eXBlLl9pc0lnbm9yZWRFcnJvciA9IGZ1bmN0aW9uIChldmVudCwgb3B0aW9ucykge1xuICAgICAgICBpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JzIHx8ICFvcHRpb25zLmlnbm9yZUVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0UG9zc2libGVFdmVudE1lc3NhZ2VzKGV2ZW50KS5zb21lKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgICAvLyBOb3Qgc3VyZSB3aHkgVHlwZVNjcmlwdCBjb21wbGFpbnMgaGVyZS4uLlxuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuaWdub3JlRXJyb3JzLnNvbWUoZnVuY3Rpb24gKHBhdHRlcm4pIHsgcmV0dXJuIGlzTWF0Y2hpbmdQYXR0ZXJuKG1lc3NhZ2UsIHBhdHRlcm4pOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBJbmJvdW5kRmlsdGVycy5wcm90b3R5cGUuX2lzRGVuaWVkVXJsID0gZnVuY3Rpb24gKGV2ZW50LCBvcHRpb25zKSB7XG4gICAgICAgIC8vIFRPRE86IFVzZSBHbG9iIGluc3RlYWQ/XG4gICAgICAgIGlmICghb3B0aW9ucy5kZW55VXJscyB8fCAhb3B0aW9ucy5kZW55VXJscy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdXJsID0gdGhpcy5fZ2V0RXZlbnRGaWx0ZXJVcmwoZXZlbnQpO1xuICAgICAgICByZXR1cm4gIXVybCA/IGZhbHNlIDogb3B0aW9ucy5kZW55VXJscy5zb21lKGZ1bmN0aW9uIChwYXR0ZXJuKSB7IHJldHVybiBpc01hdGNoaW5nUGF0dGVybih1cmwsIHBhdHRlcm4pOyB9KTtcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIEluYm91bmRGaWx0ZXJzLnByb3RvdHlwZS5faXNBbGxvd2VkVXJsID0gZnVuY3Rpb24gKGV2ZW50LCBvcHRpb25zKSB7XG4gICAgICAgIC8vIFRPRE86IFVzZSBHbG9iIGluc3RlYWQ/XG4gICAgICAgIGlmICghb3B0aW9ucy5hbGxvd1VybHMgfHwgIW9wdGlvbnMuYWxsb3dVcmxzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHVybCA9IHRoaXMuX2dldEV2ZW50RmlsdGVyVXJsKGV2ZW50KTtcbiAgICAgICAgcmV0dXJuICF1cmwgPyB0cnVlIDogb3B0aW9ucy5hbGxvd1VybHMuc29tZShmdW5jdGlvbiAocGF0dGVybikgeyByZXR1cm4gaXNNYXRjaGluZ1BhdHRlcm4odXJsLCBwYXR0ZXJuKTsgfSk7XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBJbmJvdW5kRmlsdGVycy5wcm90b3R5cGUuX21lcmdlT3B0aW9ucyA9IGZ1bmN0aW9uIChjbGllbnRPcHRpb25zKSB7XG4gICAgICAgIGlmIChjbGllbnRPcHRpb25zID09PSB2b2lkIDApIHsgY2xpZW50T3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhbGxvd1VybHM6IF9fc3ByZWFkKCh0aGlzLl9vcHRpb25zLndoaXRlbGlzdFVybHMgfHwgW10pLCAodGhpcy5fb3B0aW9ucy5hbGxvd1VybHMgfHwgW10pLCAoY2xpZW50T3B0aW9ucy53aGl0ZWxpc3RVcmxzIHx8IFtdKSwgKGNsaWVudE9wdGlvbnMuYWxsb3dVcmxzIHx8IFtdKSksXG4gICAgICAgICAgICBkZW55VXJsczogX19zcHJlYWQoKHRoaXMuX29wdGlvbnMuYmxhY2tsaXN0VXJscyB8fCBbXSksICh0aGlzLl9vcHRpb25zLmRlbnlVcmxzIHx8IFtdKSwgKGNsaWVudE9wdGlvbnMuYmxhY2tsaXN0VXJscyB8fCBbXSksIChjbGllbnRPcHRpb25zLmRlbnlVcmxzIHx8IFtdKSksXG4gICAgICAgICAgICBpZ25vcmVFcnJvcnM6IF9fc3ByZWFkKCh0aGlzLl9vcHRpb25zLmlnbm9yZUVycm9ycyB8fCBbXSksIChjbGllbnRPcHRpb25zLmlnbm9yZUVycm9ycyB8fCBbXSksIERFRkFVTFRfSUdOT1JFX0VSUk9SUyksXG4gICAgICAgICAgICBpZ25vcmVJbnRlcm5hbDogdHlwZW9mIHRoaXMuX29wdGlvbnMuaWdub3JlSW50ZXJuYWwgIT09ICd1bmRlZmluZWQnID8gdGhpcy5fb3B0aW9ucy5pZ25vcmVJbnRlcm5hbCA6IHRydWUsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBJbmJvdW5kRmlsdGVycy5wcm90b3R5cGUuX2dldFBvc3NpYmxlRXZlbnRNZXNzYWdlcyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQubWVzc2FnZSkge1xuICAgICAgICAgICAgcmV0dXJuIFtldmVudC5tZXNzYWdlXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQuZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBfYSA9IChldmVudC5leGNlcHRpb24udmFsdWVzICYmIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0pIHx8IHt9LCBfYiA9IF9hLnR5cGUsIHR5cGUgPSBfYiA9PT0gdm9pZCAwID8gJycgOiBfYiwgX2MgPSBfYS52YWx1ZSwgdmFsdWUgPSBfYyA9PT0gdm9pZCAwID8gJycgOiBfYztcbiAgICAgICAgICAgICAgICByZXR1cm4gW1wiXCIgKyB2YWx1ZSwgdHlwZSArIFwiOiBcIiArIHZhbHVlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChvTykge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihcIkNhbm5vdCBleHRyYWN0IG1lc3NhZ2UgZm9yIGV2ZW50IFwiICsgZ2V0RXZlbnREZXNjcmlwdGlvbihldmVudCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW107XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBJbmJvdW5kRmlsdGVycy5wcm90b3R5cGUuX2dldEV2ZW50RmlsdGVyVXJsID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc3RhY2t0cmFjZSkge1xuICAgICAgICAgICAgICAgIHZhciBmcmFtZXNfMSA9IGV2ZW50LnN0YWNrdHJhY2UuZnJhbWVzO1xuICAgICAgICAgICAgICAgIHJldHVybiAoZnJhbWVzXzEgJiYgZnJhbWVzXzFbZnJhbWVzXzEubGVuZ3RoIC0gMV0uZmlsZW5hbWUpIHx8IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXZlbnQuZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZyYW1lc18yID0gZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyAmJiBldmVudC5leGNlcHRpb24udmFsdWVzWzBdLnN0YWNrdHJhY2UgJiYgZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS5zdGFja3RyYWNlLmZyYW1lcztcbiAgICAgICAgICAgICAgICByZXR1cm4gKGZyYW1lc18yICYmIGZyYW1lc18yW2ZyYW1lc18yLmxlbmd0aCAtIDFdLmZpbGVuYW1lKSB8fCBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKG9PKSB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoXCJDYW5ub3QgZXh0cmFjdCB1cmwgZm9yIGV2ZW50IFwiICsgZ2V0RXZlbnREZXNjcmlwdGlvbihldmVudCkpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSW5ib3VuZEZpbHRlcnMuaWQgPSAnSW5ib3VuZEZpbHRlcnMnO1xuICAgIHJldHVybiBJbmJvdW5kRmlsdGVycztcbn0oKSk7XG5leHBvcnQgeyBJbmJvdW5kRmlsdGVycyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5ib3VuZGZpbHRlcnMuanMubWFwIiwiZXhwb3J0IHZhciBzZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSA/IHNldFByb3RvT2YgOiBtaXhpblByb3BlcnRpZXMpO1xuLyoqXG4gKiBzZXRQcm90b3R5cGVPZiBwb2x5ZmlsbCB1c2luZyBfX3Byb3RvX19cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbmZ1bmN0aW9uIHNldFByb3RvT2Yob2JqLCBwcm90bykge1xuICAgIC8vIEB0cy1pZ25vcmUgX19wcm90b19fIGRvZXMgbm90IGV4aXN0IG9uIG9ialxuICAgIG9iai5fX3Byb3RvX18gPSBwcm90bztcbiAgICByZXR1cm4gb2JqO1xufVxuLyoqXG4gKiBzZXRQcm90b3R5cGVPZiBwb2x5ZmlsbCB1c2luZyBtaXhpblxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xuZnVuY3Rpb24gbWl4aW5Qcm9wZXJ0aWVzKG9iaiwgcHJvdG8pIHtcbiAgICBmb3IgKHZhciBwcm9wIGluIHByb3RvKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICAgICAgaWYgKCFvYmouaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgdHlwZXNjcmlwdCBjb21wbGFpbnMgYWJvdXQgaW5kZXhpbmcgc28gd2UgcmVtb3ZlXG4gICAgICAgICAgICBvYmpbcHJvcF0gPSBwcm90b1twcm9wXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9seWZpbGwuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBzZXRQcm90b3R5cGVPZiB9IGZyb20gJy4vcG9seWZpbGwnO1xuLyoqIEFuIGVycm9yIGVtaXR0ZWQgYnkgU2VudHJ5IFNES3MgYW5kIHJlbGF0ZWQgdXRpbGl0aWVzLiAqL1xudmFyIFNlbnRyeUVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTZW50cnlFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTZW50cnlFcnJvcihtZXNzYWdlKSB7XG4gICAgICAgIHZhciBfbmV3VGFyZ2V0ID0gdGhpcy5jb25zdHJ1Y3RvcjtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbWVzc2FnZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIF90aGlzLm5hbWUgPSBfbmV3VGFyZ2V0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgICAgICBzZXRQcm90b3R5cGVPZihfdGhpcywgX25ld1RhcmdldC5wcm90b3R5cGUpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBTZW50cnlFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydCB7IFNlbnRyeUVycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvci5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFNlbnRyeUVycm9yIH0gZnJvbSAnLi9lcnJvcic7XG4vKiogUmVndWxhciBleHByZXNzaW9uIHVzZWQgdG8gcGFyc2UgYSBEc24uICovXG52YXIgRFNOX1JFR0VYID0gL14oPzooXFx3Kyk6KVxcL1xcLyg/OihcXHcrKSg/OjooXFx3KykpP0ApKFtcXHcuLV0rKSg/OjooXFxkKykpP1xcLyguKykvO1xuLyoqIEVycm9yIG1lc3NhZ2UgKi9cbnZhciBFUlJPUl9NRVNTQUdFID0gJ0ludmFsaWQgRHNuJztcbi8qKiBUaGUgU2VudHJ5IERzbiwgaWRlbnRpZnlpbmcgYSBTZW50cnkgaW5zdGFuY2UgYW5kIHByb2plY3QuICovXG52YXIgRHNuID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKiBDcmVhdGVzIGEgbmV3IERzbiBjb21wb25lbnQgKi9cbiAgICBmdW5jdGlvbiBEc24oZnJvbSkge1xuICAgICAgICBpZiAodHlwZW9mIGZyb20gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLl9mcm9tU3RyaW5nKGZyb20pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZnJvbUNvbXBvbmVudHMoZnJvbSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdmFsaWRhdGUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVuZGVycyB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRHNuLlxuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCwgdGhpcyB3aWxsIHJlbmRlciB0aGUgcHVibGljIHJlcHJlc2VudGF0aW9uIHdpdGhvdXQgdGhlIHBhc3N3b3JkXG4gICAgICogY29tcG9uZW50LiBUbyBnZXQgdGhlIGRlcHJlY2F0ZWQgcHJpdmF0ZSByZXByZXNlbnRhdGlvbiwgc2V0IGB3aXRoUGFzc3dvcmRgXG4gICAgICogdG8gdHJ1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB3aXRoUGFzc3dvcmQgV2hlbiBzZXQgdG8gdHJ1ZSwgdGhlIHBhc3N3b3JkIHdpbGwgYmUgaW5jbHVkZWQuXG4gICAgICovXG4gICAgRHNuLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICh3aXRoUGFzc3dvcmQpIHtcbiAgICAgICAgaWYgKHdpdGhQYXNzd29yZCA9PT0gdm9pZCAwKSB7IHdpdGhQYXNzd29yZCA9IGZhbHNlOyB9XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGhvc3QgPSBfYS5ob3N0LCBwYXRoID0gX2EucGF0aCwgcGFzcyA9IF9hLnBhc3MsIHBvcnQgPSBfYS5wb3J0LCBwcm9qZWN0SWQgPSBfYS5wcm9qZWN0SWQsIHByb3RvY29sID0gX2EucHJvdG9jb2wsIHVzZXIgPSBfYS51c2VyO1xuICAgICAgICByZXR1cm4gKHByb3RvY29sICsgXCI6Ly9cIiArIHVzZXIgKyAod2l0aFBhc3N3b3JkICYmIHBhc3MgPyBcIjpcIiArIHBhc3MgOiAnJykgK1xuICAgICAgICAgICAgKFwiQFwiICsgaG9zdCArIChwb3J0ID8gXCI6XCIgKyBwb3J0IDogJycpICsgXCIvXCIgKyAocGF0aCA/IHBhdGggKyBcIi9cIiA6IHBhdGgpICsgcHJvamVjdElkKSk7XG4gICAgfTtcbiAgICAvKiogUGFyc2VzIGEgc3RyaW5nIGludG8gdGhpcyBEc24uICovXG4gICAgRHNuLnByb3RvdHlwZS5fZnJvbVN0cmluZyA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gRFNOX1JFR0VYLmV4ZWMoc3RyKTtcbiAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFNlbnRyeUVycm9yKEVSUk9SX01FU1NBR0UpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfYSA9IF9fcmVhZChtYXRjaC5zbGljZSgxKSwgNiksIHByb3RvY29sID0gX2FbMF0sIHVzZXIgPSBfYVsxXSwgX2IgPSBfYVsyXSwgcGFzcyA9IF9iID09PSB2b2lkIDAgPyAnJyA6IF9iLCBob3N0ID0gX2FbM10sIF9jID0gX2FbNF0sIHBvcnQgPSBfYyA9PT0gdm9pZCAwID8gJycgOiBfYywgbGFzdFBhdGggPSBfYVs1XTtcbiAgICAgICAgdmFyIHBhdGggPSAnJztcbiAgICAgICAgdmFyIHByb2plY3RJZCA9IGxhc3RQYXRoO1xuICAgICAgICB2YXIgc3BsaXQgPSBwcm9qZWN0SWQuc3BsaXQoJy8nKTtcbiAgICAgICAgaWYgKHNwbGl0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHBhdGggPSBzcGxpdC5zbGljZSgwLCAtMSkuam9pbignLycpO1xuICAgICAgICAgICAgcHJvamVjdElkID0gc3BsaXQucG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb2plY3RJZCkge1xuICAgICAgICAgICAgdmFyIHByb2plY3RNYXRjaCA9IHByb2plY3RJZC5tYXRjaCgvXlxcZCsvKTtcbiAgICAgICAgICAgIGlmIChwcm9qZWN0TWF0Y2gpIHtcbiAgICAgICAgICAgICAgICBwcm9qZWN0SWQgPSBwcm9qZWN0TWF0Y2hbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZnJvbUNvbXBvbmVudHMoeyBob3N0OiBob3N0LCBwYXNzOiBwYXNzLCBwYXRoOiBwYXRoLCBwcm9qZWN0SWQ6IHByb2plY3RJZCwgcG9ydDogcG9ydCwgcHJvdG9jb2w6IHByb3RvY29sLCB1c2VyOiB1c2VyIH0pO1xuICAgIH07XG4gICAgLyoqIE1hcHMgRHNuIGNvbXBvbmVudHMgaW50byB0aGlzIGluc3RhbmNlLiAqL1xuICAgIERzbi5wcm90b3R5cGUuX2Zyb21Db21wb25lbnRzID0gZnVuY3Rpb24gKGNvbXBvbmVudHMpIHtcbiAgICAgICAgdGhpcy5wcm90b2NvbCA9IGNvbXBvbmVudHMucHJvdG9jb2w7XG4gICAgICAgIHRoaXMudXNlciA9IGNvbXBvbmVudHMudXNlcjtcbiAgICAgICAgdGhpcy5wYXNzID0gY29tcG9uZW50cy5wYXNzIHx8ICcnO1xuICAgICAgICB0aGlzLmhvc3QgPSBjb21wb25lbnRzLmhvc3Q7XG4gICAgICAgIHRoaXMucG9ydCA9IGNvbXBvbmVudHMucG9ydCB8fCAnJztcbiAgICAgICAgdGhpcy5wYXRoID0gY29tcG9uZW50cy5wYXRoIHx8ICcnO1xuICAgICAgICB0aGlzLnByb2plY3RJZCA9IGNvbXBvbmVudHMucHJvamVjdElkO1xuICAgIH07XG4gICAgLyoqIFZhbGlkYXRlcyB0aGlzIERzbiBhbmQgdGhyb3dzIG9uIGVycm9yLiAqL1xuICAgIERzbi5wcm90b3R5cGUuX3ZhbGlkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBbJ3Byb3RvY29sJywgJ3VzZXInLCAnaG9zdCcsICdwcm9qZWN0SWQnXS5mb3JFYWNoKGZ1bmN0aW9uIChjb21wb25lbnQpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXNbY29tcG9uZW50XSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBTZW50cnlFcnJvcihFUlJPUl9NRVNTQUdFICsgXCI6IFwiICsgY29tcG9uZW50ICsgXCIgbWlzc2luZ1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghdGhpcy5wcm9qZWN0SWQubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgU2VudHJ5RXJyb3IoRVJST1JfTUVTU0FHRSArIFwiOiBJbnZhbGlkIHByb2plY3RJZCBcIiArIHRoaXMucHJvamVjdElkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wcm90b2NvbCAhPT0gJ2h0dHAnICYmIHRoaXMucHJvdG9jb2wgIT09ICdodHRwcycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBTZW50cnlFcnJvcihFUlJPUl9NRVNTQUdFICsgXCI6IEludmFsaWQgcHJvdG9jb2wgXCIgKyB0aGlzLnByb3RvY29sKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wb3J0ICYmIGlzTmFOKHBhcnNlSW50KHRoaXMucG9ydCwgMTApKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFNlbnRyeUVycm9yKEVSUk9SX01FU1NBR0UgKyBcIjogSW52YWxpZCBwb3J0IFwiICsgdGhpcy5wb3J0KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIERzbjtcbn0oKSk7XG5leHBvcnQgeyBEc24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRzbi5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBhZGRHbG9iYWxFdmVudFByb2Nlc3NvciwgZ2V0Q3VycmVudEh1YiB9IGZyb20gJ0BzZW50cnkvaHViJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuZXhwb3J0IHZhciBpbnN0YWxsZWRJbnRlZ3JhdGlvbnMgPSBbXTtcbi8qKiBHZXRzIGludGVncmF0aW9uIHRvIGluc3RhbGwgKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnRlZ3JhdGlvbnNUb1NldHVwKG9wdGlvbnMpIHtcbiAgICB2YXIgZGVmYXVsdEludGVncmF0aW9ucyA9IChvcHRpb25zLmRlZmF1bHRJbnRlZ3JhdGlvbnMgJiYgX19zcHJlYWQob3B0aW9ucy5kZWZhdWx0SW50ZWdyYXRpb25zKSkgfHwgW107XG4gICAgdmFyIHVzZXJJbnRlZ3JhdGlvbnMgPSBvcHRpb25zLmludGVncmF0aW9ucztcbiAgICB2YXIgaW50ZWdyYXRpb25zID0gW107XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodXNlckludGVncmF0aW9ucykpIHtcbiAgICAgICAgdmFyIHVzZXJJbnRlZ3JhdGlvbnNOYW1lc18xID0gdXNlckludGVncmF0aW9ucy5tYXAoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGkubmFtZTsgfSk7XG4gICAgICAgIHZhciBwaWNrZWRJbnRlZ3JhdGlvbnNOYW1lc18xID0gW107XG4gICAgICAgIC8vIExlYXZlIG9ubHkgdW5pcXVlIGRlZmF1bHQgaW50ZWdyYXRpb25zLCB0aGF0IHdlcmUgbm90IG92ZXJyaWRkZW4gd2l0aCBwcm92aWRlZCB1c2VyIGludGVncmF0aW9uc1xuICAgICAgICBkZWZhdWx0SW50ZWdyYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGRlZmF1bHRJbnRlZ3JhdGlvbikge1xuICAgICAgICAgICAgaWYgKHVzZXJJbnRlZ3JhdGlvbnNOYW1lc18xLmluZGV4T2YoZGVmYXVsdEludGVncmF0aW9uLm5hbWUpID09PSAtMSAmJlxuICAgICAgICAgICAgICAgIHBpY2tlZEludGVncmF0aW9uc05hbWVzXzEuaW5kZXhPZihkZWZhdWx0SW50ZWdyYXRpb24ubmFtZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgaW50ZWdyYXRpb25zLnB1c2goZGVmYXVsdEludGVncmF0aW9uKTtcbiAgICAgICAgICAgICAgICBwaWNrZWRJbnRlZ3JhdGlvbnNOYW1lc18xLnB1c2goZGVmYXVsdEludGVncmF0aW9uLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gRG9uJ3QgYWRkIHNhbWUgdXNlciBpbnRlZ3JhdGlvbiB0d2ljZVxuICAgICAgICB1c2VySW50ZWdyYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKHVzZXJJbnRlZ3JhdGlvbikge1xuICAgICAgICAgICAgaWYgKHBpY2tlZEludGVncmF0aW9uc05hbWVzXzEuaW5kZXhPZih1c2VySW50ZWdyYXRpb24ubmFtZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgaW50ZWdyYXRpb25zLnB1c2godXNlckludGVncmF0aW9uKTtcbiAgICAgICAgICAgICAgICBwaWNrZWRJbnRlZ3JhdGlvbnNOYW1lc18xLnB1c2godXNlckludGVncmF0aW9uLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHVzZXJJbnRlZ3JhdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaW50ZWdyYXRpb25zID0gdXNlckludGVncmF0aW9ucyhkZWZhdWx0SW50ZWdyYXRpb25zKTtcbiAgICAgICAgaW50ZWdyYXRpb25zID0gQXJyYXkuaXNBcnJheShpbnRlZ3JhdGlvbnMpID8gaW50ZWdyYXRpb25zIDogW2ludGVncmF0aW9uc107XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpbnRlZ3JhdGlvbnMgPSBfX3NwcmVhZChkZWZhdWx0SW50ZWdyYXRpb25zKTtcbiAgICB9XG4gICAgLy8gTWFrZSBzdXJlIHRoYXQgaWYgcHJlc2VudCwgYERlYnVnYCBpbnRlZ3JhdGlvbiB3aWxsIGFsd2F5cyBydW4gbGFzdFxuICAgIHZhciBpbnRlZ3JhdGlvbnNOYW1lcyA9IGludGVncmF0aW9ucy5tYXAoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGkubmFtZTsgfSk7XG4gICAgdmFyIGFsd2F5c0xhc3RUb1J1biA9ICdEZWJ1Zyc7XG4gICAgaWYgKGludGVncmF0aW9uc05hbWVzLmluZGV4T2YoYWx3YXlzTGFzdFRvUnVuKSAhPT0gLTEpIHtcbiAgICAgICAgaW50ZWdyYXRpb25zLnB1c2guYXBwbHkoaW50ZWdyYXRpb25zLCBfX3NwcmVhZChpbnRlZ3JhdGlvbnMuc3BsaWNlKGludGVncmF0aW9uc05hbWVzLmluZGV4T2YoYWx3YXlzTGFzdFRvUnVuKSwgMSkpKTtcbiAgICB9XG4gICAgcmV0dXJuIGludGVncmF0aW9ucztcbn1cbi8qKiBTZXR1cCBnaXZlbiBpbnRlZ3JhdGlvbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldHVwSW50ZWdyYXRpb24oaW50ZWdyYXRpb24pIHtcbiAgICBpZiAoaW5zdGFsbGVkSW50ZWdyYXRpb25zLmluZGV4T2YoaW50ZWdyYXRpb24ubmFtZSkgIT09IC0xKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW50ZWdyYXRpb24uc2V0dXBPbmNlKGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yLCBnZXRDdXJyZW50SHViKTtcbiAgICBpbnN0YWxsZWRJbnRlZ3JhdGlvbnMucHVzaChpbnRlZ3JhdGlvbi5uYW1lKTtcbiAgICBsb2dnZXIubG9nKFwiSW50ZWdyYXRpb24gaW5zdGFsbGVkOiBcIiArIGludGVncmF0aW9uLm5hbWUpO1xufVxuLyoqXG4gKiBHaXZlbiBhIGxpc3Qgb2YgaW50ZWdyYXRpb24gaW5zdGFuY2VzIHRoaXMgaW5zdGFsbHMgdGhlbSBhbGwuIFdoZW4gYHdpdGhEZWZhdWx0c2AgaXMgc2V0IHRvIGB0cnVlYCB0aGVuIGFsbCBkZWZhdWx0XG4gKiBpbnRlZ3JhdGlvbnMgYXJlIGFkZGVkIHVubGVzcyB0aGV5IHdlcmUgYWxyZWFkeSBwcm92aWRlZCBiZWZvcmUuXG4gKiBAcGFyYW0gaW50ZWdyYXRpb25zIGFycmF5IG9mIGludGVncmF0aW9uIGluc3RhbmNlc1xuICogQHBhcmFtIHdpdGhEZWZhdWx0IHNob3VsZCBlbmFibGUgZGVmYXVsdCBpbnRlZ3JhdGlvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldHVwSW50ZWdyYXRpb25zKG9wdGlvbnMpIHtcbiAgICB2YXIgaW50ZWdyYXRpb25zID0ge307XG4gICAgZ2V0SW50ZWdyYXRpb25zVG9TZXR1cChvcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChpbnRlZ3JhdGlvbikge1xuICAgICAgICBpbnRlZ3JhdGlvbnNbaW50ZWdyYXRpb24ubmFtZV0gPSBpbnRlZ3JhdGlvbjtcbiAgICAgICAgc2V0dXBJbnRlZ3JhdGlvbihpbnRlZ3JhdGlvbik7XG4gICAgfSk7XG4gICAgcmV0dXJuIGludGVncmF0aW9ucztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVncmF0aW9uLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduLCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuLyogZXNsaW50LWRpc2FibGUgbWF4LWxpbmVzICovXG5pbXBvcnQgeyBTY29wZSB9IGZyb20gJ0BzZW50cnkvaHViJztcbmltcG9ydCB7IFNlc3Npb25TdGF0dXMsIH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBkYXRlVGltZXN0YW1wSW5TZWNvbmRzLCBEc24sIGlzUHJpbWl0aXZlLCBpc1RoZW5hYmxlLCBsb2dnZXIsIG5vcm1hbGl6ZSwgU2VudHJ5RXJyb3IsIFN5bmNQcm9taXNlLCB0cnVuY2F0ZSwgdXVpZDQsIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBzZXR1cEludGVncmF0aW9ucyB9IGZyb20gJy4vaW50ZWdyYXRpb24nO1xuLyoqXG4gKiBCYXNlIGltcGxlbWVudGF0aW9uIGZvciBhbGwgSmF2YVNjcmlwdCBTREsgY2xpZW50cy5cbiAqXG4gKiBDYWxsIHRoZSBjb25zdHJ1Y3RvciB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIGJhY2tlbmQgY29uc3RydWN0b3IgYW5kIG9wdGlvbnNcbiAqIHNwZWNpZmljIHRvIHRoZSBjbGllbnQgc3ViY2xhc3MuIFRvIGFjY2VzcyB0aGVzZSBvcHRpb25zIGxhdGVyLCB1c2VcbiAqIHtAbGluayBDbGllbnQuZ2V0T3B0aW9uc30uIEFsc28sIHRoZSBCYWNrZW5kIGluc3RhbmNlIGlzIGF2YWlsYWJsZSB2aWFcbiAqIHtAbGluayBDbGllbnQuZ2V0QmFja2VuZH0uXG4gKlxuICogSWYgYSBEc24gaXMgc3BlY2lmaWVkIGluIHRoZSBvcHRpb25zLCBpdCB3aWxsIGJlIHBhcnNlZCBhbmQgc3RvcmVkLiBVc2VcbiAqIHtAbGluayBDbGllbnQuZ2V0RHNufSB0byByZXRyaWV2ZSB0aGUgRHNuIGF0IGFueSBtb21lbnQuIEluIGNhc2UgdGhlIERzbiBpc1xuICogaW52YWxpZCwgdGhlIGNvbnN0cnVjdG9yIHdpbGwgdGhyb3cgYSB7QGxpbmsgU2VudHJ5RXhjZXB0aW9ufS4gTm90ZSB0aGF0XG4gKiB3aXRob3V0IGEgdmFsaWQgRHNuLCB0aGUgU0RLIHdpbGwgbm90IHNlbmQgYW55IGV2ZW50cyB0byBTZW50cnkuXG4gKlxuICogQmVmb3JlIHNlbmRpbmcgYW4gZXZlbnQgdmlhIHRoZSBiYWNrZW5kLCBpdCBpcyBwYXNzZWQgdGhyb3VnaFxuICoge0BsaW5rIEJhc2VDbGllbnQucHJlcGFyZUV2ZW50fSB0byBhZGQgU0RLIGluZm9ybWF0aW9uIGFuZCBzY29wZSBkYXRhXG4gKiAoYnJlYWRjcnVtYnMgYW5kIGNvbnRleHQpLiBUbyBhZGQgbW9yZSBjdXN0b20gaW5mb3JtYXRpb24sIG92ZXJyaWRlIHRoaXNcbiAqIG1ldGhvZCBhbmQgZXh0ZW5kIHRoZSByZXN1bHRpbmcgcHJlcGFyZWQgZXZlbnQuXG4gKlxuICogVG8gaXNzdWUgYXV0b21hdGljYWxseSBjcmVhdGVkIGV2ZW50cyAoZS5nLiB2aWEgaW5zdHJ1bWVudGF0aW9uKSwgdXNlXG4gKiB7QGxpbmsgQ2xpZW50LmNhcHR1cmVFdmVudH0uIEl0IHdpbGwgcHJlcGFyZSB0aGUgZXZlbnQgYW5kIHBhc3MgaXQgdGhyb3VnaFxuICogdGhlIGNhbGxiYWNrIGxpZmVjeWNsZS4gVG8gaXNzdWUgYXV0by1icmVhZGNydW1icywgdXNlXG4gKiB7QGxpbmsgQ2xpZW50LmFkZEJyZWFkY3J1bWJ9LlxuICpcbiAqIEBleGFtcGxlXG4gKiBjbGFzcyBOb2RlQ2xpZW50IGV4dGVuZHMgQmFzZUNsaWVudDxOb2RlQmFja2VuZCwgTm9kZU9wdGlvbnM+IHtcbiAqICAgcHVibGljIGNvbnN0cnVjdG9yKG9wdGlvbnM6IE5vZGVPcHRpb25zKSB7XG4gKiAgICAgc3VwZXIoTm9kZUJhY2tlbmQsIG9wdGlvbnMpO1xuICogICB9XG4gKlxuICogICAvLyAuLi5cbiAqIH1cbiAqL1xudmFyIEJhc2VDbGllbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhpcyBjbGllbnQgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYmFja2VuZENsYXNzIEEgY29uc3RydWN0b3IgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBiYWNrZW5kLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgZm9yIHRoZSBjbGllbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gQmFzZUNsaWVudChiYWNrZW5kQ2xhc3MsIG9wdGlvbnMpIHtcbiAgICAgICAgLyoqIEFycmF5IG9mIHVzZWQgaW50ZWdyYXRpb25zLiAqL1xuICAgICAgICB0aGlzLl9pbnRlZ3JhdGlvbnMgPSB7fTtcbiAgICAgICAgLyoqIE51bWJlciBvZiBjYWxsIGJlaW5nIHByb2Nlc3NlZCAqL1xuICAgICAgICB0aGlzLl9wcm9jZXNzaW5nID0gMDtcbiAgICAgICAgdGhpcy5fYmFja2VuZCA9IG5ldyBiYWNrZW5kQ2xhc3Mob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBpZiAob3B0aW9ucy5kc24pIHtcbiAgICAgICAgICAgIHRoaXMuX2RzbiA9IG5ldyBEc24ob3B0aW9ucy5kc24pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnksIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5jYXB0dXJlRXhjZXB0aW9uID0gZnVuY3Rpb24gKGV4Y2VwdGlvbiwgaGludCwgc2NvcGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGV2ZW50SWQgPSBoaW50ICYmIGhpbnQuZXZlbnRfaWQ7XG4gICAgICAgIHRoaXMuX3Byb2Nlc3ModGhpcy5fZ2V0QmFja2VuZCgpXG4gICAgICAgICAgICAuZXZlbnRGcm9tRXhjZXB0aW9uKGV4Y2VwdGlvbiwgaGludClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChldmVudCkgeyByZXR1cm4gX3RoaXMuX2NhcHR1cmVFdmVudChldmVudCwgaGludCwgc2NvcGUpOyB9KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgZXZlbnRJZCA9IHJlc3VsdDtcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gZXZlbnRJZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuY2FwdHVyZU1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSwgbGV2ZWwsIGhpbnQsIHNjb3BlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBldmVudElkID0gaGludCAmJiBoaW50LmV2ZW50X2lkO1xuICAgICAgICB2YXIgcHJvbWlzZWRFdmVudCA9IGlzUHJpbWl0aXZlKG1lc3NhZ2UpXG4gICAgICAgICAgICA/IHRoaXMuX2dldEJhY2tlbmQoKS5ldmVudEZyb21NZXNzYWdlKFwiXCIgKyBtZXNzYWdlLCBsZXZlbCwgaGludClcbiAgICAgICAgICAgIDogdGhpcy5fZ2V0QmFja2VuZCgpLmV2ZW50RnJvbUV4Y2VwdGlvbihtZXNzYWdlLCBoaW50KTtcbiAgICAgICAgdGhpcy5fcHJvY2Vzcyhwcm9taXNlZEV2ZW50XG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIF90aGlzLl9jYXB0dXJlRXZlbnQoZXZlbnQsIGhpbnQsIHNjb3BlKTsgfSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGV2ZW50SWQgPSByZXN1bHQ7XG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIGV2ZW50SWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJhc2VDbGllbnQucHJvdG90eXBlLmNhcHR1cmVFdmVudCA9IGZ1bmN0aW9uIChldmVudCwgaGludCwgc2NvcGUpIHtcbiAgICAgICAgdmFyIGV2ZW50SWQgPSBoaW50ICYmIGhpbnQuZXZlbnRfaWQ7XG4gICAgICAgIHRoaXMuX3Byb2Nlc3ModGhpcy5fY2FwdHVyZUV2ZW50KGV2ZW50LCBoaW50LCBzY29wZSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICBldmVudElkID0gcmVzdWx0O1xuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBldmVudElkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5jYXB0dXJlU2Vzc2lvbiA9IGZ1bmN0aW9uIChzZXNzaW9uKSB7XG4gICAgICAgIGlmICghc2Vzc2lvbi5yZWxlYXNlKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybignRGlzY2FyZGVkIHNlc3Npb24gYmVjYXVzZSBvZiBtaXNzaW5nIHJlbGVhc2UnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3NlbmRTZXNzaW9uKHNlc3Npb24pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJhc2VDbGllbnQucHJvdG90eXBlLmdldERzbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RzbjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJhc2VDbGllbnQucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKHRpbWVvdXQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzQ2xpZW50UHJvY2Vzc2luZyh0aW1lb3V0KS50aGVuKGZ1bmN0aW9uIChyZWFkeSkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9nZXRCYWNrZW5kKClcbiAgICAgICAgICAgICAgICAuZ2V0VHJhbnNwb3J0KClcbiAgICAgICAgICAgICAgICAuY2xvc2UodGltZW91dClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodHJhbnNwb3J0Rmx1c2hlZCkgeyByZXR1cm4gcmVhZHkgJiYgdHJhbnNwb3J0Rmx1c2hlZDsgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLmZsdXNoKHRpbWVvdXQpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgX3RoaXMuZ2V0T3B0aW9ucygpLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0cyB1cCB0aGUgaW50ZWdyYXRpb25zXG4gICAgICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuc2V0dXBJbnRlZ3JhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0VuYWJsZWQoKSkge1xuICAgICAgICAgICAgdGhpcy5faW50ZWdyYXRpb25zID0gc2V0dXBJbnRlZ3JhdGlvbnModGhpcy5fb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuZ2V0SW50ZWdyYXRpb24gPSBmdW5jdGlvbiAoaW50ZWdyYXRpb24pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbnRlZ3JhdGlvbnNbaW50ZWdyYXRpb24uaWRdIHx8IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKF9vTykge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJDYW5ub3QgcmV0cmlldmUgaW50ZWdyYXRpb24gXCIgKyBpbnRlZ3JhdGlvbi5pZCArIFwiIGZyb20gdGhlIGN1cnJlbnQgQ2xpZW50XCIpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKiBVcGRhdGVzIGV4aXN0aW5nIHNlc3Npb24gYmFzZWQgb24gdGhlIHByb3ZpZGVkIGV2ZW50ICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuX3VwZGF0ZVNlc3Npb25Gcm9tRXZlbnQgPSBmdW5jdGlvbiAoc2Vzc2lvbiwgZXZlbnQpIHtcbiAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgICAgIHZhciBjcmFzaGVkID0gZmFsc2U7XG4gICAgICAgIHZhciBlcnJvcmVkID0gZmFsc2U7XG4gICAgICAgIHZhciB1c2VyQWdlbnQ7XG4gICAgICAgIHZhciBleGNlcHRpb25zID0gZXZlbnQuZXhjZXB0aW9uICYmIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXM7XG4gICAgICAgIGlmIChleGNlcHRpb25zKSB7XG4gICAgICAgICAgICBlcnJvcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZXhjZXB0aW9uc18xID0gX192YWx1ZXMoZXhjZXB0aW9ucyksIGV4Y2VwdGlvbnNfMV8xID0gZXhjZXB0aW9uc18xLm5leHQoKTsgIWV4Y2VwdGlvbnNfMV8xLmRvbmU7IGV4Y2VwdGlvbnNfMV8xID0gZXhjZXB0aW9uc18xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXggPSBleGNlcHRpb25zXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lY2hhbmlzbSA9IGV4Lm1lY2hhbmlzbTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lY2hhbmlzbSAmJiBtZWNoYW5pc20uaGFuZGxlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyYXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4Y2VwdGlvbnNfMV8xICYmICFleGNlcHRpb25zXzFfMS5kb25lICYmIChfYSA9IGV4Y2VwdGlvbnNfMS5yZXR1cm4pKSBfYS5jYWxsKGV4Y2VwdGlvbnNfMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgdXNlciA9IGV2ZW50LnVzZXI7XG4gICAgICAgIGlmICghc2Vzc2lvbi51c2VyQWdlbnQpIHtcbiAgICAgICAgICAgIHZhciBoZWFkZXJzID0gZXZlbnQucmVxdWVzdCA/IGV2ZW50LnJlcXVlc3QuaGVhZGVycyA6IHt9O1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5LnRvTG93ZXJDYXNlKCkgPT09ICd1c2VyLWFnZW50Jykge1xuICAgICAgICAgICAgICAgICAgICB1c2VyQWdlbnQgPSBoZWFkZXJzW2tleV07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzZXNzaW9uLnVwZGF0ZShfX2Fzc2lnbihfX2Fzc2lnbih7fSwgKGNyYXNoZWQgJiYgeyBzdGF0dXM6IFNlc3Npb25TdGF0dXMuQ3Jhc2hlZCB9KSksIHsgdXNlcjogdXNlcixcbiAgICAgICAgICAgIHVzZXJBZ2VudDogdXNlckFnZW50LCBlcnJvcnM6IHNlc3Npb24uZXJyb3JzICsgTnVtYmVyKGVycm9yZWQgfHwgY3Jhc2hlZCkgfSkpO1xuICAgIH07XG4gICAgLyoqIERlbGl2ZXIgY2FwdHVyZWQgc2Vzc2lvbiB0byBTZW50cnkgKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5fc2VuZFNlc3Npb24gPSBmdW5jdGlvbiAoc2Vzc2lvbikge1xuICAgICAgICB0aGlzLl9nZXRCYWNrZW5kKCkuc2VuZFNlc3Npb24oc2Vzc2lvbik7XG4gICAgfTtcbiAgICAvKiogV2FpdHMgZm9yIHRoZSBjbGllbnQgdG8gYmUgZG9uZSB3aXRoIHByb2Nlc3NpbmcuICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuX2lzQ2xpZW50UHJvY2Vzc2luZyA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgU3luY1Byb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgIHZhciB0aWNrZWQgPSAwO1xuICAgICAgICAgICAgdmFyIHRpY2sgPSAxO1xuICAgICAgICAgICAgdmFyIGludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fcHJvY2Vzc2luZyA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGlja2VkICs9IHRpY2s7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0ICYmIHRpY2tlZCA+PSB0aW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGljayk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqIFJldHVybnMgdGhlIGN1cnJlbnQgYmFja2VuZC4gKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5fZ2V0QmFja2VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JhY2tlbmQ7XG4gICAgfTtcbiAgICAvKiogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoaXMgU0RLIGlzIGVuYWJsZWQgYW5kIGEgdmFsaWQgRHNuIGlzIHByZXNlbnQuICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuX2lzRW5hYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T3B0aW9ucygpLmVuYWJsZWQgIT09IGZhbHNlICYmIHRoaXMuX2RzbiAhPT0gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkcyBjb21tb24gaW5mb3JtYXRpb24gdG8gZXZlbnRzLlxuICAgICAqXG4gICAgICogVGhlIGluZm9ybWF0aW9uIGluY2x1ZGVzIHJlbGVhc2UgYW5kIGVudmlyb25tZW50IGZyb20gYG9wdGlvbnNgLFxuICAgICAqIGJyZWFkY3J1bWJzIGFuZCBjb250ZXh0IChleHRyYSwgdGFncyBhbmQgdXNlcikgZnJvbSB0aGUgc2NvcGUuXG4gICAgICpcbiAgICAgKiBJbmZvcm1hdGlvbiB0aGF0IGlzIGFscmVhZHkgcHJlc2VudCBpbiB0aGUgZXZlbnQgaXMgbmV2ZXIgb3ZlcndyaXR0ZW4uIEZvclxuICAgICAqIG5lc3RlZCBvYmplY3RzLCBzdWNoIGFzIHRoZSBjb250ZXh0LCBrZXlzIGFyZSBtZXJnZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnQgVGhlIG9yaWdpbmFsIGV2ZW50LlxuICAgICAqIEBwYXJhbSBoaW50IE1heSBjb250YWluIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9yaWdpbmFsIGV4Y2VwdGlvbi5cbiAgICAgKiBAcGFyYW0gc2NvcGUgQSBzY29wZSBjb250YWluaW5nIGV2ZW50IG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIEEgbmV3IGV2ZW50IHdpdGggbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5fcHJlcGFyZUV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50LCBzY29wZSwgaGludCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLmdldE9wdGlvbnMoKS5ub3JtYWxpemVEZXB0aCwgbm9ybWFsaXplRGVwdGggPSBfYSA9PT0gdm9pZCAwID8gMyA6IF9hO1xuICAgICAgICB2YXIgcHJlcGFyZWQgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZXZlbnQpLCB7IGV2ZW50X2lkOiBldmVudC5ldmVudF9pZCB8fCAoaGludCAmJiBoaW50LmV2ZW50X2lkID8gaGludC5ldmVudF9pZCA6IHV1aWQ0KCkpLCB0aW1lc3RhbXA6IGV2ZW50LnRpbWVzdGFtcCB8fCBkYXRlVGltZXN0YW1wSW5TZWNvbmRzKCkgfSk7XG4gICAgICAgIHRoaXMuX2FwcGx5Q2xpZW50T3B0aW9ucyhwcmVwYXJlZCk7XG4gICAgICAgIHRoaXMuX2FwcGx5SW50ZWdyYXRpb25zTWV0YWRhdGEocHJlcGFyZWQpO1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIHNjb3BlIGdpdmVuIHRvIHVzLCB1c2UgaXQgYXMgdGhlIGJhc2UgZm9yIGZ1cnRoZXIgbW9kaWZpY2F0aW9ucy5cbiAgICAgICAgLy8gVGhpcyBhbGxvd3MgdXMgdG8gcHJldmVudCB1bm5lY2Vzc2FyeSBjb3B5aW5nIG9mIGRhdGEgaWYgYGNhcHR1cmVDb250ZXh0YCBpcyBub3QgcHJvdmlkZWQuXG4gICAgICAgIHZhciBmaW5hbFNjb3BlID0gc2NvcGU7XG4gICAgICAgIGlmIChoaW50ICYmIGhpbnQuY2FwdHVyZUNvbnRleHQpIHtcbiAgICAgICAgICAgIGZpbmFsU2NvcGUgPSBTY29wZS5jbG9uZShmaW5hbFNjb3BlKS51cGRhdGUoaGludC5jYXB0dXJlQ29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgcHJlcGFyZSB0aGUgcmVzdWx0IGhlcmUgd2l0aCBhIHJlc29sdmVkIEV2ZW50LlxuICAgICAgICB2YXIgcmVzdWx0ID0gU3luY1Byb21pc2UucmVzb2x2ZShwcmVwYXJlZCk7XG4gICAgICAgIC8vIFRoaXMgc2hvdWxkIGJlIHRoZSBsYXN0IHRoaW5nIGNhbGxlZCwgc2luY2Ugd2Ugd2FudCB0aGF0XG4gICAgICAgIC8vIHtAbGluayBIdWIuYWRkRXZlbnRQcm9jZXNzb3J9IGdldHMgdGhlIGZpbmlzaGVkIHByZXBhcmVkIGV2ZW50LlxuICAgICAgICBpZiAoZmluYWxTY29wZSkge1xuICAgICAgICAgICAgLy8gSW4gY2FzZSB3ZSBoYXZlIGEgaHViIHdlIHJlYXNzaWduIGl0LlxuICAgICAgICAgICAgcmVzdWx0ID0gZmluYWxTY29wZS5hcHBseVRvRXZlbnQocHJlcGFyZWQsIGhpbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQudGhlbihmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5vcm1hbGl6ZURlcHRoID09PSAnbnVtYmVyJyAmJiBub3JtYWxpemVEZXB0aCA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuX25vcm1hbGl6ZUV2ZW50KGV2dCwgbm9ybWFsaXplRGVwdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGV2dDtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIGBub3JtYWxpemVgIGZ1bmN0aW9uIG9uIG5lY2Vzc2FyeSBgRXZlbnRgIGF0dHJpYnV0ZXMgdG8gbWFrZSB0aGVtIHNhZmUgZm9yIHNlcmlhbGl6YXRpb24uXG4gICAgICogTm9ybWFsaXplZCBrZXlzOlxuICAgICAqIC0gYGJyZWFkY3J1bWJzLmRhdGFgXG4gICAgICogLSBgdXNlcmBcbiAgICAgKiAtIGBjb250ZXh0c2BcbiAgICAgKiAtIGBleHRyYWBcbiAgICAgKiBAcGFyYW0gZXZlbnQgRXZlbnRcbiAgICAgKiBAcmV0dXJucyBOb3JtYWxpemVkIGV2ZW50XG4gICAgICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuX25vcm1hbGl6ZUV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50LCBkZXB0aCkge1xuICAgICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbm9ybWFsaXplZCA9IF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKHt9LCBldmVudCksIChldmVudC5icmVhZGNydW1icyAmJiB7XG4gICAgICAgICAgICBicmVhZGNydW1iczogZXZlbnQuYnJlYWRjcnVtYnMubWFwKGZ1bmN0aW9uIChiKSB7IHJldHVybiAoX19hc3NpZ24oX19hc3NpZ24oe30sIGIpLCAoYi5kYXRhICYmIHtcbiAgICAgICAgICAgICAgICBkYXRhOiBub3JtYWxpemUoYi5kYXRhLCBkZXB0aCksXG4gICAgICAgICAgICB9KSkpOyB9KSxcbiAgICAgICAgfSkpLCAoZXZlbnQudXNlciAmJiB7XG4gICAgICAgICAgICB1c2VyOiBub3JtYWxpemUoZXZlbnQudXNlciwgZGVwdGgpLFxuICAgICAgICB9KSksIChldmVudC5jb250ZXh0cyAmJiB7XG4gICAgICAgICAgICBjb250ZXh0czogbm9ybWFsaXplKGV2ZW50LmNvbnRleHRzLCBkZXB0aCksXG4gICAgICAgIH0pKSwgKGV2ZW50LmV4dHJhICYmIHtcbiAgICAgICAgICAgIGV4dHJhOiBub3JtYWxpemUoZXZlbnQuZXh0cmEsIGRlcHRoKSxcbiAgICAgICAgfSkpO1xuICAgICAgICAvLyBldmVudC5jb250ZXh0cy50cmFjZSBzdG9yZXMgaW5mb3JtYXRpb24gYWJvdXQgYSBUcmFuc2FjdGlvbi4gU2ltaWxhcmx5LFxuICAgICAgICAvLyBldmVudC5zcGFuc1tdIHN0b3JlcyBpbmZvcm1hdGlvbiBhYm91dCBjaGlsZCBTcGFucy4gR2l2ZW4gdGhhdCBhXG4gICAgICAgIC8vIFRyYW5zYWN0aW9uIGlzIGNvbmNlcHR1YWxseSBhIFNwYW4sIG5vcm1hbGl6YXRpb24gc2hvdWxkIGFwcGx5IHRvIGJvdGhcbiAgICAgICAgLy8gVHJhbnNhY3Rpb25zIGFuZCBTcGFucyBjb25zaXN0ZW50bHkuXG4gICAgICAgIC8vIEZvciBub3cgdGhlIGRlY2lzaW9uIGlzIHRvIHNraXAgbm9ybWFsaXphdGlvbiBvZiBUcmFuc2FjdGlvbnMgYW5kIFNwYW5zLFxuICAgICAgICAvLyBzbyB0aGlzIGJsb2NrIG92ZXJ3cml0ZXMgdGhlIG5vcm1hbGl6ZWQgZXZlbnQgdG8gYWRkIGJhY2sgdGhlIG9yaWdpbmFsXG4gICAgICAgIC8vIFRyYW5zYWN0aW9uIGluZm9ybWF0aW9uIHByaW9yIHRvIG5vcm1hbGl6YXRpb24uXG4gICAgICAgIGlmIChldmVudC5jb250ZXh0cyAmJiBldmVudC5jb250ZXh0cy50cmFjZSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICAgICAgbm9ybWFsaXplZC5jb250ZXh0cy50cmFjZSA9IGV2ZW50LmNvbnRleHRzLnRyYWNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub3JtYWxpemVkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogIEVuaGFuY2VzIGV2ZW50IHVzaW5nIHRoZSBjbGllbnQgY29uZmlndXJhdGlvbi5cbiAgICAgKiAgSXQgdGFrZXMgY2FyZSBvZiBhbGwgXCJzdGF0aWNcIiB2YWx1ZXMgbGlrZSBlbnZpcm9ubWVudCwgcmVsZWFzZSBhbmQgYGRpc3RgLFxuICAgICAqICBhcyB3ZWxsIGFzIHRydW5jYXRpbmcgb3Zlcmx5IGxvbmcgdmFsdWVzLlxuICAgICAqIEBwYXJhbSBldmVudCBldmVudCBpbnN0YW5jZSB0byBiZSBlbmhhbmNlZFxuICAgICAqL1xuICAgIEJhc2VDbGllbnQucHJvdG90eXBlLl9hcHBseUNsaWVudE9wdGlvbnMgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcbiAgICAgICAgdmFyIGVudmlyb25tZW50ID0gb3B0aW9ucy5lbnZpcm9ubWVudCwgcmVsZWFzZSA9IG9wdGlvbnMucmVsZWFzZSwgZGlzdCA9IG9wdGlvbnMuZGlzdCwgX2EgPSBvcHRpb25zLm1heFZhbHVlTGVuZ3RoLCBtYXhWYWx1ZUxlbmd0aCA9IF9hID09PSB2b2lkIDAgPyAyNTAgOiBfYTtcbiAgICAgICAgaWYgKCEoJ2Vudmlyb25tZW50JyBpbiBldmVudCkpIHtcbiAgICAgICAgICAgIGV2ZW50LmVudmlyb25tZW50ID0gJ2Vudmlyb25tZW50JyBpbiBvcHRpb25zID8gZW52aXJvbm1lbnQgOiAncHJvZHVjdGlvbic7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50LnJlbGVhc2UgPT09IHVuZGVmaW5lZCAmJiByZWxlYXNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGV2ZW50LnJlbGVhc2UgPSByZWxlYXNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudC5kaXN0ID09PSB1bmRlZmluZWQgJiYgZGlzdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBldmVudC5kaXN0ID0gZGlzdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQubWVzc2FnZSkge1xuICAgICAgICAgICAgZXZlbnQubWVzc2FnZSA9IHRydW5jYXRlKGV2ZW50Lm1lc3NhZ2UsIG1heFZhbHVlTGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXhjZXB0aW9uID0gZXZlbnQuZXhjZXB0aW9uICYmIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMgJiYgZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXTtcbiAgICAgICAgaWYgKGV4Y2VwdGlvbiAmJiBleGNlcHRpb24udmFsdWUpIHtcbiAgICAgICAgICAgIGV4Y2VwdGlvbi52YWx1ZSA9IHRydW5jYXRlKGV4Y2VwdGlvbi52YWx1ZSwgbWF4VmFsdWVMZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXF1ZXN0ID0gZXZlbnQucmVxdWVzdDtcbiAgICAgICAgaWYgKHJlcXVlc3QgJiYgcmVxdWVzdC51cmwpIHtcbiAgICAgICAgICAgIHJlcXVlc3QudXJsID0gdHJ1bmNhdGUocmVxdWVzdC51cmwsIG1heFZhbHVlTGVuZ3RoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBhZGRzIGFsbCB1c2VkIGludGVncmF0aW9ucyB0byB0aGUgU0RLIGluZm8gaW4gdGhlIGV2ZW50LlxuICAgICAqIEBwYXJhbSBzZGtJbmZvIFRoZSBzZGtJbmZvIG9mIHRoZSBldmVudCB0aGF0IHdpbGwgYmUgZmlsbGVkIHdpdGggYWxsIGludGVncmF0aW9ucy5cbiAgICAgKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5fYXBwbHlJbnRlZ3JhdGlvbnNNZXRhZGF0YSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgc2RrSW5mbyA9IGV2ZW50LnNkaztcbiAgICAgICAgdmFyIGludGVncmF0aW9uc0FycmF5ID0gT2JqZWN0LmtleXModGhpcy5faW50ZWdyYXRpb25zKTtcbiAgICAgICAgaWYgKHNka0luZm8gJiYgaW50ZWdyYXRpb25zQXJyYXkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc2RrSW5mby5pbnRlZ3JhdGlvbnMgPSBpbnRlZ3JhdGlvbnNBcnJheTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogVGVsbHMgdGhlIGJhY2tlbmQgdG8gc2VuZCB0aGlzIGV2ZW50XG4gICAgICogQHBhcmFtIGV2ZW50IFRoZSBTZW50cnkgZXZlbnQgdG8gc2VuZFxuICAgICAqL1xuICAgIEJhc2VDbGllbnQucHJvdG90eXBlLl9zZW5kRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5fZ2V0QmFja2VuZCgpLnNlbmRFdmVudChldmVudCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQcm9jZXNzZXMgdGhlIGV2ZW50IGFuZCBsb2dzIGFuIGVycm9yIGluIGNhc2Ugb2YgcmVqZWN0aW9uXG4gICAgICogQHBhcmFtIGV2ZW50XG4gICAgICogQHBhcmFtIGhpbnRcbiAgICAgKiBAcGFyYW0gc2NvcGVcbiAgICAgKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5fY2FwdHVyZUV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50LCBoaW50LCBzY29wZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvY2Vzc0V2ZW50KGV2ZW50LCBoaW50LCBzY29wZSkudGhlbihmdW5jdGlvbiAoZmluYWxFdmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGZpbmFsRXZlbnQuZXZlbnRfaWQ7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihyZWFzb24pO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQcm9jZXNzZXMgYW4gZXZlbnQgKGVpdGhlciBlcnJvciBvciBtZXNzYWdlKSBhbmQgc2VuZHMgaXQgdG8gU2VudHJ5LlxuICAgICAqXG4gICAgICogVGhpcyBhbHNvIGFkZHMgYnJlYWRjcnVtYnMgYW5kIGNvbnRleHQgaW5mb3JtYXRpb24gdG8gdGhlIGV2ZW50LiBIb3dldmVyLFxuICAgICAqIHBsYXRmb3JtIHNwZWNpZmljIG1ldGEgZGF0YSAoc3VjaCBhcyB0aGUgVXNlcidzIElQIGFkZHJlc3MpIG11c3QgYmUgYWRkZWRcbiAgICAgKiBieSB0aGUgU0RLIGltcGxlbWVudG9yLlxuICAgICAqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50IHRvIHNlbmQgdG8gU2VudHJ5LlxuICAgICAqIEBwYXJhbSBoaW50IE1heSBjb250YWluIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9yaWdpbmFsIGV4Y2VwdGlvbi5cbiAgICAgKiBAcGFyYW0gc2NvcGUgQSBzY29wZSBjb250YWluaW5nIGV2ZW50IG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIEEgU3luY1Byb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBldmVudCBvciByZWplY3RzIGluIGNhc2UgZXZlbnQgd2FzL3dpbGwgbm90IGJlIHNlbmQuXG4gICAgICovXG4gICAgQmFzZUNsaWVudC5wcm90b3R5cGUuX3Byb2Nlc3NFdmVudCA9IGZ1bmN0aW9uIChldmVudCwgaGludCwgc2NvcGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZFxuICAgICAgICB2YXIgX2EgPSB0aGlzLmdldE9wdGlvbnMoKSwgYmVmb3JlU2VuZCA9IF9hLmJlZm9yZVNlbmQsIHNhbXBsZVJhdGUgPSBfYS5zYW1wbGVSYXRlO1xuICAgICAgICBpZiAoIXRoaXMuX2lzRW5hYmxlZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gU3luY1Byb21pc2UucmVqZWN0KG5ldyBTZW50cnlFcnJvcignU0RLIG5vdCBlbmFibGVkLCB3aWxsIG5vdCBzZW5kIGV2ZW50LicpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaXNUcmFuc2FjdGlvbiA9IGV2ZW50LnR5cGUgPT09ICd0cmFuc2FjdGlvbic7XG4gICAgICAgIC8vIDEuMCA9PT0gMTAwJSBldmVudHMgYXJlIHNlbnRcbiAgICAgICAgLy8gMC4wID09PSAwJSBldmVudHMgYXJlIHNlbnRcbiAgICAgICAgLy8gU2FtcGxpbmcgZm9yIHRyYW5zYWN0aW9uIGhhcHBlbnMgc29tZXdoZXJlIGVsc2VcbiAgICAgICAgaWYgKCFpc1RyYW5zYWN0aW9uICYmIHR5cGVvZiBzYW1wbGVSYXRlID09PSAnbnVtYmVyJyAmJiBNYXRoLnJhbmRvbSgpID4gc2FtcGxlUmF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIFN5bmNQcm9taXNlLnJlamVjdChuZXcgU2VudHJ5RXJyb3IoJ1RoaXMgZXZlbnQgaGFzIGJlZW4gc2FtcGxlZCwgd2lsbCBub3Qgc2VuZCBldmVudC4nKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByZXBhcmVFdmVudChldmVudCwgc2NvcGUsIGhpbnQpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocHJlcGFyZWQpIHtcbiAgICAgICAgICAgIGlmIChwcmVwYXJlZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBTZW50cnlFcnJvcignQW4gZXZlbnQgcHJvY2Vzc29yIHJldHVybmVkIG51bGwsIHdpbGwgbm90IHNlbmQgZXZlbnQuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaXNJbnRlcm5hbEV4Y2VwdGlvbiA9IGhpbnQgJiYgaGludC5kYXRhICYmIGhpbnQuZGF0YS5fX3NlbnRyeV9fID09PSB0cnVlO1xuICAgICAgICAgICAgaWYgKGlzSW50ZXJuYWxFeGNlcHRpb24gfHwgaXNUcmFuc2FjdGlvbiB8fCAhYmVmb3JlU2VuZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcmVwYXJlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBiZWZvcmVTZW5kUmVzdWx0ID0gYmVmb3JlU2VuZChwcmVwYXJlZCwgaGludCk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGJlZm9yZVNlbmRSZXN1bHQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNlbnRyeUVycm9yKCdgYmVmb3JlU2VuZGAgbWV0aG9kIGhhcyB0byByZXR1cm4gYG51bGxgIG9yIGEgdmFsaWQgZXZlbnQuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc1RoZW5hYmxlKGJlZm9yZVNlbmRSZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJlZm9yZVNlbmRSZXN1bHQudGhlbihmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIGV2ZW50OyB9LCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU2VudHJ5RXJyb3IoXCJiZWZvcmVTZW5kIHJlamVjdGVkIHdpdGggXCIgKyBlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBiZWZvcmVTZW5kUmVzdWx0O1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHByb2Nlc3NlZEV2ZW50KSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzc2VkRXZlbnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU2VudHJ5RXJyb3IoJ2BiZWZvcmVTZW5kYCByZXR1cm5lZCBgbnVsbGAsIHdpbGwgbm90IHNlbmQgZXZlbnQuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc2Vzc2lvbiA9IHNjb3BlICYmIHNjb3BlLmdldFNlc3Npb24gJiYgc2NvcGUuZ2V0U2Vzc2lvbigpO1xuICAgICAgICAgICAgaWYgKCFpc1RyYW5zYWN0aW9uICYmIHNlc3Npb24pIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fdXBkYXRlU2Vzc2lvbkZyb21FdmVudChzZXNzaW9uLCBwcm9jZXNzZWRFdmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5fc2VuZEV2ZW50KHByb2Nlc3NlZEV2ZW50KTtcbiAgICAgICAgICAgIHJldHVybiBwcm9jZXNzZWRFdmVudDtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKG51bGwsIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgIGlmIChyZWFzb24gaW5zdGFuY2VvZiBTZW50cnlFcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IHJlYXNvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLmNhcHR1cmVFeGNlcHRpb24ocmVhc29uLCB7XG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBfX3NlbnRyeV9fOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFeGNlcHRpb246IHJlYXNvbixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFNlbnRyeUVycm9yKFwiRXZlbnQgcHJvY2Vzc2luZyBwaXBlbGluZSB0aHJldyBhbiBlcnJvciwgb3JpZ2luYWwgZXZlbnQgd2lsbCBub3QgYmUgc2VudC4gRGV0YWlscyBoYXZlIGJlZW4gc2VudCBhcyBhIG5ldyBldmVudC5cXG5SZWFzb246IFwiICsgcmVhc29uKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBPY2N1cGllcyB0aGUgY2xpZW50IHdpdGggcHJvY2Vzc2luZyBhbmQgZXZlbnRcbiAgICAgKi9cbiAgICBCYXNlQ2xpZW50LnByb3RvdHlwZS5fcHJvY2VzcyA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3Byb2Nlc3NpbmcgKz0gMTtcbiAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgX3RoaXMuX3Byb2Nlc3NpbmcgLT0gMTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgX3RoaXMuX3Byb2Nlc3NpbmcgLT0gMTtcbiAgICAgICAgICAgIHJldHVybiByZWFzb247XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEJhc2VDbGllbnQ7XG59KCkpO1xuZXhwb3J0IHsgQmFzZUNsaWVudCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZWNsaWVudC5qcy5tYXAiLCIvKiogVGhlIHN0YXR1cyBvZiBhbiBldmVudC4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvZXhwb3J0XG5leHBvcnQgdmFyIFN0YXR1cztcbihmdW5jdGlvbiAoU3RhdHVzKSB7XG4gICAgLyoqIFRoZSBzdGF0dXMgY291bGQgbm90IGJlIGRldGVybWluZWQuICovXG4gICAgU3RhdHVzW1wiVW5rbm93blwiXSA9IFwidW5rbm93blwiO1xuICAgIC8qKiBUaGUgZXZlbnQgd2FzIHNraXBwZWQgZHVlIHRvIGNvbmZpZ3VyYXRpb24gb3IgY2FsbGJhY2tzLiAqL1xuICAgIFN0YXR1c1tcIlNraXBwZWRcIl0gPSBcInNraXBwZWRcIjtcbiAgICAvKiogVGhlIGV2ZW50IHdhcyBzZW50IHRvIFNlbnRyeSBzdWNjZXNzZnVsbHkuICovXG4gICAgU3RhdHVzW1wiU3VjY2Vzc1wiXSA9IFwic3VjY2Vzc1wiO1xuICAgIC8qKiBUaGUgY2xpZW50IGlzIGN1cnJlbnRseSByYXRlIGxpbWl0ZWQgYW5kIHdpbGwgdHJ5IGFnYWluIGxhdGVyLiAqL1xuICAgIFN0YXR1c1tcIlJhdGVMaW1pdFwiXSA9IFwicmF0ZV9saW1pdFwiO1xuICAgIC8qKiBUaGUgZXZlbnQgY291bGQgbm90IGJlIHByb2Nlc3NlZC4gKi9cbiAgICBTdGF0dXNbXCJJbnZhbGlkXCJdID0gXCJpbnZhbGlkXCI7XG4gICAgLyoqIEEgc2VydmVyLXNpZGUgZXJyb3Igb2N1cnJlZCBkdXJpbmcgc3VibWlzc2lvbi4gKi9cbiAgICBTdGF0dXNbXCJGYWlsZWRcIl0gPSBcImZhaWxlZFwiO1xufSkoU3RhdHVzIHx8IChTdGF0dXMgPSB7fSkpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2UsIGltcG9ydC9leHBvcnRcbihmdW5jdGlvbiAoU3RhdHVzKSB7XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSBIVFRQIHN0YXR1cyBjb2RlIGludG8gYSB7QGxpbmsgU3RhdHVzfS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2RlIFRoZSBIVFRQIHJlc3BvbnNlIHN0YXR1cyBjb2RlLlxuICAgICAqIEByZXR1cm5zIFRoZSBzZW5kIHN0YXR1cyBvciB7QGxpbmsgU3RhdHVzLlVua25vd259LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21IdHRwQ29kZShjb2RlKSB7XG4gICAgICAgIGlmIChjb2RlID49IDIwMCAmJiBjb2RlIDwgMzAwKSB7XG4gICAgICAgICAgICByZXR1cm4gU3RhdHVzLlN1Y2Nlc3M7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvZGUgPT09IDQyOSkge1xuICAgICAgICAgICAgcmV0dXJuIFN0YXR1cy5SYXRlTGltaXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvZGUgPj0gNDAwICYmIGNvZGUgPCA1MDApIHtcbiAgICAgICAgICAgIHJldHVybiBTdGF0dXMuSW52YWxpZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29kZSA+PSA1MDApIHtcbiAgICAgICAgICAgIHJldHVybiBTdGF0dXMuRmFpbGVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBTdGF0dXMuVW5rbm93bjtcbiAgICB9XG4gICAgU3RhdHVzLmZyb21IdHRwQ29kZSA9IGZyb21IdHRwQ29kZTtcbn0pKFN0YXR1cyB8fCAoU3RhdHVzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXR1cy5qcy5tYXAiLCJpbXBvcnQgeyBTdGF0dXMgfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IFN5bmNQcm9taXNlIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG4vKiogTm9vcCB0cmFuc3BvcnQgKi9cbnZhciBOb29wVHJhbnNwb3J0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5vb3BUcmFuc3BvcnQoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgTm9vcFRyYW5zcG9ydC5wcm90b3R5cGUuc2VuZEV2ZW50ID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgICAgcmV0dXJuIFN5bmNQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgICAgcmVhc29uOiBcIk5vb3BUcmFuc3BvcnQ6IEV2ZW50IGhhcyBiZWVuIHNraXBwZWQgYmVjYXVzZSBubyBEc24gaXMgY29uZmlndXJlZC5cIixcbiAgICAgICAgICAgIHN0YXR1czogU3RhdHVzLlNraXBwZWQsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBOb29wVHJhbnNwb3J0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICAgIHJldHVybiBTeW5jUHJvbWlzZS5yZXNvbHZlKHRydWUpO1xuICAgIH07XG4gICAgcmV0dXJuIE5vb3BUcmFuc3BvcnQ7XG59KCkpO1xuZXhwb3J0IHsgTm9vcFRyYW5zcG9ydCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9vcC5qcy5tYXAiLCIvKiogSlNEb2MgKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvZXhwb3J0XG5leHBvcnQgdmFyIFNldmVyaXR5O1xuKGZ1bmN0aW9uIChTZXZlcml0eSkge1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIFNldmVyaXR5W1wiRmF0YWxcIl0gPSBcImZhdGFsXCI7XG4gICAgLyoqIEpTRG9jICovXG4gICAgU2V2ZXJpdHlbXCJFcnJvclwiXSA9IFwiZXJyb3JcIjtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBTZXZlcml0eVtcIldhcm5pbmdcIl0gPSBcIndhcm5pbmdcIjtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBTZXZlcml0eVtcIkxvZ1wiXSA9IFwibG9nXCI7XG4gICAgLyoqIEpTRG9jICovXG4gICAgU2V2ZXJpdHlbXCJJbmZvXCJdID0gXCJpbmZvXCI7XG4gICAgLyoqIEpTRG9jICovXG4gICAgU2V2ZXJpdHlbXCJEZWJ1Z1wiXSA9IFwiZGVidWdcIjtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBTZXZlcml0eVtcIkNyaXRpY2FsXCJdID0gXCJjcml0aWNhbFwiO1xufSkoU2V2ZXJpdHkgfHwgKFNldmVyaXR5ID0ge30pKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlLCBpbXBvcnQvZXhwb3J0XG4oZnVuY3Rpb24gKFNldmVyaXR5KSB7XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSBzdHJpbmctYmFzZWQgbGV2ZWwgaW50byBhIHtAbGluayBTZXZlcml0eX0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGV2ZWwgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIFNldmVyaXR5XG4gICAgICogQHJldHVybnMgU2V2ZXJpdHlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tU3RyaW5nKGxldmVsKSB7XG4gICAgICAgIHN3aXRjaCAobGV2ZWwpIHtcbiAgICAgICAgICAgIGNhc2UgJ2RlYnVnJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gU2V2ZXJpdHkuRGVidWc7XG4gICAgICAgICAgICBjYXNlICdpbmZvJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gU2V2ZXJpdHkuSW5mbztcbiAgICAgICAgICAgIGNhc2UgJ3dhcm4nOlxuICAgICAgICAgICAgY2FzZSAnd2FybmluZyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFNldmVyaXR5Lldhcm5pbmc7XG4gICAgICAgICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFNldmVyaXR5LkVycm9yO1xuICAgICAgICAgICAgY2FzZSAnZmF0YWwnOlxuICAgICAgICAgICAgICAgIHJldHVybiBTZXZlcml0eS5GYXRhbDtcbiAgICAgICAgICAgIGNhc2UgJ2NyaXRpY2FsJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gU2V2ZXJpdHkuQ3JpdGljYWw7XG4gICAgICAgICAgICBjYXNlICdsb2cnOlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gU2V2ZXJpdHkuTG9nO1xuICAgICAgICB9XG4gICAgfVxuICAgIFNldmVyaXR5LmZyb21TdHJpbmcgPSBmcm9tU3RyaW5nO1xufSkoU2V2ZXJpdHkgfHwgKFNldmVyaXR5ID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNldmVyaXR5LmpzLm1hcCIsImltcG9ydCB7IGxvZ2dlciwgU2VudHJ5RXJyb3IgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IE5vb3BUcmFuc3BvcnQgfSBmcm9tICcuL3RyYW5zcG9ydHMvbm9vcCc7XG4vKipcbiAqIFRoaXMgaXMgdGhlIGJhc2UgaW1wbGVtZW50aW9uIG9mIGEgQmFja2VuZC5cbiAqIEBoaWRkZW5cbiAqL1xudmFyIEJhc2VCYWNrZW5kID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKiBDcmVhdGVzIGEgbmV3IGJhY2tlbmQgaW5zdGFuY2UuICovXG4gICAgZnVuY3Rpb24gQmFzZUJhY2tlbmQob3B0aW9ucykge1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgaWYgKCF0aGlzLl9vcHRpb25zLmRzbikge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ05vIERTTiBwcm92aWRlZCwgYmFja2VuZCB3aWxsIG5vdCBkbyBhbnl0aGluZy4nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90cmFuc3BvcnQgPSB0aGlzLl9zZXR1cFRyYW5zcG9ydCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LCBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzXG4gICAgQmFzZUJhY2tlbmQucHJvdG90eXBlLmV2ZW50RnJvbUV4Y2VwdGlvbiA9IGZ1bmN0aW9uIChfZXhjZXB0aW9uLCBfaGludCkge1xuICAgICAgICB0aHJvdyBuZXcgU2VudHJ5RXJyb3IoJ0JhY2tlbmQgaGFzIHRvIGltcGxlbWVudCBgZXZlbnRGcm9tRXhjZXB0aW9uYCBtZXRob2QnKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQmFzZUJhY2tlbmQucHJvdG90eXBlLmV2ZW50RnJvbU1lc3NhZ2UgPSBmdW5jdGlvbiAoX21lc3NhZ2UsIF9sZXZlbCwgX2hpbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFNlbnRyeUVycm9yKCdCYWNrZW5kIGhhcyB0byBpbXBsZW1lbnQgYGV2ZW50RnJvbU1lc3NhZ2VgIG1ldGhvZCcpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCYXNlQmFja2VuZC5wcm90b3R5cGUuc2VuZEV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydC5zZW5kRXZlbnQoZXZlbnQpLnRoZW4obnVsbCwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKFwiRXJyb3Igd2hpbGUgc2VuZGluZyBldmVudDogXCIgKyByZWFzb24pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQmFzZUJhY2tlbmQucHJvdG90eXBlLnNlbmRTZXNzaW9uID0gZnVuY3Rpb24gKHNlc3Npb24pIHtcbiAgICAgICAgaWYgKCF0aGlzLl90cmFuc3BvcnQuc2VuZFNlc3Npb24pIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKFwiRHJvcHBpbmcgc2Vzc2lvbiBiZWNhdXNlIGN1c3RvbSB0cmFuc3BvcnQgZG9lc24ndCBpbXBsZW1lbnQgc2VuZFNlc3Npb25cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0LnNlbmRTZXNzaW9uKHNlc3Npb24pLnRoZW4obnVsbCwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKFwiRXJyb3Igd2hpbGUgc2VuZGluZyBzZXNzaW9uOiBcIiArIHJlYXNvbik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCYXNlQmFja2VuZC5wcm90b3R5cGUuZ2V0VHJhbnNwb3J0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0cyB1cCB0aGUgdHJhbnNwb3J0IHNvIGl0IGNhbiBiZSB1c2VkIGxhdGVyIHRvIHNlbmQgcmVxdWVzdHMuXG4gICAgICovXG4gICAgQmFzZUJhY2tlbmQucHJvdG90eXBlLl9zZXR1cFRyYW5zcG9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBOb29wVHJhbnNwb3J0KCk7XG4gICAgfTtcbiAgICByZXR1cm4gQmFzZUJhY2tlbmQ7XG59KCkpO1xuZXhwb3J0IHsgQmFzZUJhY2tlbmQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2ViYWNrZW5kLmpzLm1hcCIsImltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IGdldEdsb2JhbE9iamVjdCB9IGZyb20gJy4vbWlzYyc7XG4vKipcbiAqIFRlbGxzIHdoZXRoZXIgY3VycmVudCBlbnZpcm9ubWVudCBzdXBwb3J0cyBFcnJvckV2ZW50IG9iamVjdHNcbiAqIHtAbGluayBzdXBwb3J0c0Vycm9yRXZlbnR9LlxuICpcbiAqIEByZXR1cm5zIEFuc3dlciB0byB0aGUgZ2l2ZW4gcXVlc3Rpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdXBwb3J0c0Vycm9yRXZlbnQoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgbmV3IEVycm9yRXZlbnQoJycpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbi8qKlxuICogVGVsbHMgd2hldGhlciBjdXJyZW50IGVudmlyb25tZW50IHN1cHBvcnRzIERPTUVycm9yIG9iamVjdHNcbiAqIHtAbGluayBzdXBwb3J0c0RPTUVycm9yfS5cbiAqXG4gKiBAcmV0dXJucyBBbnN3ZXIgdG8gdGhlIGdpdmVuIHF1ZXN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNET01FcnJvcigpIHtcbiAgICB0cnkge1xuICAgICAgICAvLyBDaHJvbWU6IFZNODk6MSBVbmNhdWdodCBUeXBlRXJyb3I6IEZhaWxlZCB0byBjb25zdHJ1Y3QgJ0RPTUVycm9yJzpcbiAgICAgICAgLy8gMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LlxuICAgICAgICAvLyBAdHMtaWdub3JlIEl0IHJlYWxseSBuZWVkcyAxIGFyZ3VtZW50LCBub3QgMC5cbiAgICAgICAgbmV3IERPTUVycm9yKCcnKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4vKipcbiAqIFRlbGxzIHdoZXRoZXIgY3VycmVudCBlbnZpcm9ubWVudCBzdXBwb3J0cyBET01FeGNlcHRpb24gb2JqZWN0c1xuICoge0BsaW5rIHN1cHBvcnRzRE9NRXhjZXB0aW9ufS5cbiAqXG4gKiBAcmV0dXJucyBBbnN3ZXIgdG8gdGhlIGdpdmVuIHF1ZXN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNET01FeGNlcHRpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgbmV3IERPTUV4Y2VwdGlvbignJyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuLyoqXG4gKiBUZWxscyB3aGV0aGVyIGN1cnJlbnQgZW52aXJvbm1lbnQgc3VwcG9ydHMgRmV0Y2ggQVBJXG4gKiB7QGxpbmsgc3VwcG9ydHNGZXRjaH0uXG4gKlxuICogQHJldHVybnMgQW5zd2VyIHRvIHRoZSBnaXZlbiBxdWVzdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRzRmV0Y2goKSB7XG4gICAgaWYgKCEoJ2ZldGNoJyBpbiBnZXRHbG9iYWxPYmplY3QoKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBuZXcgSGVhZGVycygpO1xuICAgICAgICBuZXcgUmVxdWVzdCgnJyk7XG4gICAgICAgIG5ldyBSZXNwb25zZSgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbi8qKlxuICogaXNOYXRpdmVGZXRjaCBjaGVja3MgaWYgdGhlIGdpdmVuIGZ1bmN0aW9uIGlzIGEgbmF0aXZlIGltcGxlbWVudGF0aW9uIG9mIGZldGNoKClcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbmZ1bmN0aW9uIGlzTmF0aXZlRmV0Y2goZnVuYykge1xuICAgIHJldHVybiBmdW5jICYmIC9eZnVuY3Rpb24gZmV0Y2hcXChcXClcXHMrXFx7XFxzK1xcW25hdGl2ZSBjb2RlXFxdXFxzK1xcfSQvLnRlc3QoZnVuYy50b1N0cmluZygpKTtcbn1cbi8qKlxuICogVGVsbHMgd2hldGhlciBjdXJyZW50IGVudmlyb25tZW50IHN1cHBvcnRzIEZldGNoIEFQSSBuYXRpdmVseVxuICoge0BsaW5rIHN1cHBvcnRzTmF0aXZlRmV0Y2h9LlxuICpcbiAqIEByZXR1cm5zIHRydWUgaWYgYHdpbmRvdy5mZXRjaGAgaXMgbmF0aXZlbHkgaW1wbGVtZW50ZWQsIGZhbHNlIG90aGVyd2lzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNOYXRpdmVGZXRjaCgpIHtcbiAgICBpZiAoIXN1cHBvcnRzRmV0Y2goKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBnbG9iYWwgPSBnZXRHbG9iYWxPYmplY3QoKTtcbiAgICAvLyBGYXN0IHBhdGggdG8gYXZvaWQgRE9NIEkvT1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgICBpZiAoaXNOYXRpdmVGZXRjaChnbG9iYWwuZmV0Y2gpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyB3aW5kb3cuZmV0Y2ggaXMgaW1wbGVtZW50ZWQsIGJ1dCBpcyBwb2x5ZmlsbGVkIG9yIGFscmVhZHkgd3JhcHBlZCAoZS5nOiBieSBhIGNocm9tZSBleHRlbnNpb24pXG4gICAgLy8gc28gY3JlYXRlIGEgXCJwdXJlXCIgaWZyYW1lIHRvIHNlZSBpZiB0aGF0IGhhcyBuYXRpdmUgZmV0Y2hcbiAgICB2YXIgcmVzdWx0ID0gZmFsc2U7XG4gICAgdmFyIGRvYyA9IGdsb2JhbC5kb2N1bWVudDtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBpZiAoZG9jICYmIHR5cGVvZiBkb2MuY3JlYXRlRWxlbWVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgc2FuZGJveCA9IGRvYy5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgICAgICAgIHNhbmRib3guaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIGRvYy5oZWFkLmFwcGVuZENoaWxkKHNhbmRib3gpO1xuICAgICAgICAgICAgaWYgKHNhbmRib3guY29udGVudFdpbmRvdyAmJiBzYW5kYm94LmNvbnRlbnRXaW5kb3cuZmV0Y2gpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gaXNOYXRpdmVGZXRjaChzYW5kYm94LmNvbnRlbnRXaW5kb3cuZmV0Y2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9jLmhlYWQucmVtb3ZlQ2hpbGQoc2FuZGJveCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ0NvdWxkIG5vdCBjcmVhdGUgc2FuZGJveCBpZnJhbWUgZm9yIHB1cmUgZmV0Y2ggY2hlY2ssIGJhaWxpbmcgdG8gd2luZG93LmZldGNoOiAnLCBlcnIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFRlbGxzIHdoZXRoZXIgY3VycmVudCBlbnZpcm9ubWVudCBzdXBwb3J0cyBSZXBvcnRpbmdPYnNlcnZlciBBUElcbiAqIHtAbGluayBzdXBwb3J0c1JlcG9ydGluZ09ic2VydmVyfS5cbiAqXG4gKiBAcmV0dXJucyBBbnN3ZXIgdG8gdGhlIGdpdmVuIHF1ZXN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNSZXBvcnRpbmdPYnNlcnZlcigpIHtcbiAgICByZXR1cm4gJ1JlcG9ydGluZ09ic2VydmVyJyBpbiBnZXRHbG9iYWxPYmplY3QoKTtcbn1cbi8qKlxuICogVGVsbHMgd2hldGhlciBjdXJyZW50IGVudmlyb25tZW50IHN1cHBvcnRzIFJlZmVycmVyIFBvbGljeSBBUElcbiAqIHtAbGluayBzdXBwb3J0c1JlZmVycmVyUG9saWN5fS5cbiAqXG4gKiBAcmV0dXJucyBBbnN3ZXIgdG8gdGhlIGdpdmVuIHF1ZXN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNSZWZlcnJlclBvbGljeSgpIHtcbiAgICAvLyBEZXNwaXRlIGFsbCBzdGFycyBpbiB0aGUgc2t5IHNheWluZyB0aGF0IEVkZ2Ugc3VwcG9ydHMgb2xkIGRyYWZ0IHN5bnRheCwgYWthICduZXZlcicsICdhbHdheXMnLCAnb3JpZ2luJyBhbmQgJ2RlZmF1bHRcbiAgICAvLyBodHRwczovL2Nhbml1c2UuY29tLyNmZWF0PXJlZmVycmVyLXBvbGljeVxuICAgIC8vIEl0IGRvZXNuJ3QuIEFuZCBpdCB0aHJvdyBleGNlcHRpb24gaW5zdGVhZCBvZiBpZ25vcmluZyB0aGlzIHBhcmFtZXRlci4uLlxuICAgIC8vIFJFRjogaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9yYXZlbi1qcy9pc3N1ZXMvMTIzM1xuICAgIGlmICghc3VwcG9ydHNGZXRjaCgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgbmV3IFJlcXVlc3QoJ18nLCB7XG4gICAgICAgICAgICByZWZlcnJlclBvbGljeTogJ29yaWdpbicsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbi8qKlxuICogVGVsbHMgd2hldGhlciBjdXJyZW50IGVudmlyb25tZW50IHN1cHBvcnRzIEhpc3RvcnkgQVBJXG4gKiB7QGxpbmsgc3VwcG9ydHNIaXN0b3J5fS5cbiAqXG4gKiBAcmV0dXJucyBBbnN3ZXIgdG8gdGhlIGdpdmVuIHF1ZXN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICAgIC8vIE5PVEU6IGluIENocm9tZSBBcHAgZW52aXJvbm1lbnQsIHRvdWNoaW5nIGhpc3RvcnkucHVzaFN0YXRlLCAqZXZlbiBpbnNpZGVcbiAgICAvLyAgICAgICBhIHRyeS9jYXRjaCBibG9jayosIHdpbGwgY2F1c2UgQ2hyb21lIHRvIG91dHB1dCBhbiBlcnJvciB0byBjb25zb2xlLmVycm9yXG4gICAgLy8gYm9ycm93ZWQgZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9wdWxsLzEzOTQ1L2ZpbGVzXG4gICAgdmFyIGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdCgpO1xuICAgIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcyAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgdmFyIGNocm9tZSA9IGdsb2JhbC5jaHJvbWU7XG4gICAgdmFyIGlzQ2hyb21lUGFja2FnZWRBcHAgPSBjaHJvbWUgJiYgY2hyb21lLmFwcCAmJiBjaHJvbWUuYXBwLnJ1bnRpbWU7XG4gICAgLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MgKi9cbiAgICB2YXIgaGFzSGlzdG9yeUFwaSA9ICdoaXN0b3J5JyBpbiBnbG9iYWwgJiYgISFnbG9iYWwuaGlzdG9yeS5wdXNoU3RhdGUgJiYgISFnbG9iYWwuaGlzdG9yeS5yZXBsYWNlU3RhdGU7XG4gICAgcmV0dXJuICFpc0Nocm9tZVBhY2thZ2VkQXBwICYmIGhhc0hpc3RvcnlBcGk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdXBwb3J0cy5qcy5tYXAiLCIvKipcbiAqIFRoaXMgd2FzIG9yaWdpbmFsbHkgZm9ya2VkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL29jYy9UcmFjZUtpdCwgYnV0IGhhcyBzaW5jZSBiZWVuXG4gKiBsYXJnZWx5IG1vZGlmaWVkIGFuZCBpcyBub3cgbWFpbnRhaW5lZCBhcyBwYXJ0IG9mIFNlbnRyeSBKUyBTREsuXG4gKi9cbmltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG4vLyBnbG9iYWwgcmVmZXJlbmNlIHRvIHNsaWNlXG52YXIgVU5LTk9XTl9GVU5DVElPTiA9ICc/Jztcbi8vIENocm9taXVtIGJhc2VkIGJyb3dzZXJzOiBDaHJvbWUsIEJyYXZlLCBuZXcgT3BlcmEsIG5ldyBFZGdlXG52YXIgY2hyb21lID0gL15cXHMqYXQgKD86KC4qPykgP1xcKCk/KCg/OmZpbGV8aHR0cHM/fGJsb2J8Y2hyb21lLWV4dGVuc2lvbnxhZGRyZXNzfG5hdGl2ZXxldmFsfHdlYnBhY2t8PGFub255bW91cz58Wy1hLXpdKzp8LipidW5kbGV8XFwvKS4qPykoPzo6KFxcZCspKT8oPzo6KFxcZCspKT9cXCk/XFxzKiQvaTtcbi8vIGdlY2tvIHJlZ2V4OiBgKD86YnVuZGxlfFxcZCtcXC5qcylgOiBgYnVuZGxlYCBpcyBmb3IgcmVhY3QgbmF0aXZlLCBgXFxkK1xcLmpzYCBhbHNvIGJ1dCBzcGVjaWZpY2FsbHkgZm9yIHJhbSBidW5kbGVzIGJlY2F1c2UgaXRcbi8vIGdlbmVyYXRlcyBmaWxlbmFtZXMgd2l0aG91dCBhIHByZWZpeCBsaWtlIGBmaWxlOi8vYCB0aGUgZmlsZW5hbWVzIGluIHRoZSBzdGFja3RyYWNlIGFyZSBqdXN0IDQyLmpzXG4vLyBXZSBuZWVkIHRoaXMgc3BlY2lmaWMgY2FzZSBmb3Igbm93IGJlY2F1c2Ugd2Ugd2FudCBubyBvdGhlciByZWdleCB0byBtYXRjaC5cbnZhciBnZWNrbyA9IC9eXFxzKiguKj8pKD86XFwoKC4qPylcXCkpPyg/Ol58QCk/KCg/OmZpbGV8aHR0cHM/fGJsb2J8Y2hyb21lfHdlYnBhY2t8cmVzb3VyY2V8bW96LWV4dGVuc2lvbnxjYXBhY2l0b3IpLio/OlxcLy4qP3xcXFtuYXRpdmUgY29kZVxcXXxbXkBdKig/OmJ1bmRsZXxcXGQrXFwuanMpKSg/OjooXFxkKykpPyg/OjooXFxkKykpP1xccyokL2k7XG52YXIgd2luanMgPSAvXlxccyphdCAoPzooKD86XFxbb2JqZWN0IG9iamVjdFxcXSk/LispICk/XFwoPygoPzpmaWxlfG1zLWFwcHh8aHR0cHM/fHdlYnBhY2t8YmxvYik6Lio/KTooXFxkKykoPzo6KFxcZCspKT9cXCk/XFxzKiQvaTtcbnZhciBnZWNrb0V2YWwgPSAvKFxcUyspIGxpbmUgKFxcZCspKD86ID4gZXZhbCBsaW5lIFxcZCspKiA+IGV2YWwvaTtcbnZhciBjaHJvbWVFdmFsID0gL1xcKChcXFMqKSg/OjooXFxkKykpKD86OihcXGQrKSlcXCkvO1xuLy8gQmFzZWQgb24gb3VyIG93biBtYXBwaW5nIHBhdHRlcm4gLSBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS9ibG9iLzlmMDgzMDVlMDk4NjZjOGJkNmQwYzI0ZjViMGFhYmRkN2RkNmM1OWMvc3JjL3NlbnRyeS9sYW5nL2phdmFzY3JpcHQvZXJyb3JtYXBwaW5nLnB5I0w4My1MMTA4XG52YXIgcmVhY3RNaW5pZmllZFJlZ2V4cCA9IC9NaW5pZmllZCBSZWFjdCBlcnJvciAjXFxkKzsvaTtcbi8qKiBKU0RvYyAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnksIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlU3RhY2tUcmFjZShleCkge1xuICAgIHZhciBzdGFjayA9IG51bGw7XG4gICAgdmFyIHBvcFNpemUgPSAwO1xuICAgIGlmIChleCkge1xuICAgICAgICBpZiAodHlwZW9mIGV4LmZyYW1lc1RvUG9wID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcG9wU2l6ZSA9IGV4LmZyYW1lc1RvUG9wO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHJlYWN0TWluaWZpZWRSZWdleHAudGVzdChleC5tZXNzYWdlKSkge1xuICAgICAgICAgICAgcG9wU2l6ZSA9IDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyBtdXN0IGJlIHRyaWVkIGZpcnN0IGJlY2F1c2UgT3BlcmEgMTAgKmRlc3Ryb3lzKlxuICAgICAgICAvLyBpdHMgc3RhY2t0cmFjZSBwcm9wZXJ0eSBpZiB5b3UgdHJ5IHRvIGFjY2VzcyB0aGUgc3RhY2tcbiAgICAgICAgLy8gcHJvcGVydHkgZmlyc3QhIVxuICAgICAgICBzdGFjayA9IGNvbXB1dGVTdGFja1RyYWNlRnJvbVN0YWNrdHJhY2VQcm9wKGV4KTtcbiAgICAgICAgaWYgKHN0YWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gcG9wRnJhbWVzKHN0YWNrLCBwb3BTaXplKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICAvLyBuby1lbXB0eVxuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBzdGFjayA9IGNvbXB1dGVTdGFja1RyYWNlRnJvbVN0YWNrUHJvcChleCk7XG4gICAgICAgIGlmIChzdGFjaykge1xuICAgICAgICAgICAgcmV0dXJuIHBvcEZyYW1lcyhzdGFjaywgcG9wU2l6ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gbm8tZW1wdHlcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWVzc2FnZTogZXh0cmFjdE1lc3NhZ2UoZXgpLFxuICAgICAgICBuYW1lOiBleCAmJiBleC5uYW1lLFxuICAgICAgICBzdGFjazogW10sXG4gICAgICAgIGZhaWxlZDogdHJ1ZSxcbiAgICB9O1xufVxuLyoqIEpTRG9jICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgY29tcGxleGl0eVxuZnVuY3Rpb24gY29tcHV0ZVN0YWNrVHJhY2VGcm9tU3RhY2tQcm9wKGV4KSB7XG4gICAgaWYgKCFleCB8fCAhZXguc3RhY2spIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBzdGFjayA9IFtdO1xuICAgIHZhciBsaW5lcyA9IGV4LnN0YWNrLnNwbGl0KCdcXG4nKTtcbiAgICB2YXIgaXNFdmFsO1xuICAgIHZhciBzdWJtYXRjaDtcbiAgICB2YXIgcGFydHM7XG4gICAgdmFyIGVsZW1lbnQ7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoKHBhcnRzID0gY2hyb21lLmV4ZWMobGluZXNbaV0pKSkge1xuICAgICAgICAgICAgdmFyIGlzTmF0aXZlID0gcGFydHNbMl0gJiYgcGFydHNbMl0uaW5kZXhPZignbmF0aXZlJykgPT09IDA7IC8vIHN0YXJ0IG9mIGxpbmVcbiAgICAgICAgICAgIGlzRXZhbCA9IHBhcnRzWzJdICYmIHBhcnRzWzJdLmluZGV4T2YoJ2V2YWwnKSA9PT0gMDsgLy8gc3RhcnQgb2YgbGluZVxuICAgICAgICAgICAgaWYgKGlzRXZhbCAmJiAoc3VibWF0Y2ggPSBjaHJvbWVFdmFsLmV4ZWMocGFydHNbMl0pKSkge1xuICAgICAgICAgICAgICAgIC8vIHRocm93IG91dCBldmFsIGxpbmUvY29sdW1uIGFuZCB1c2UgdG9wLW1vc3QgbGluZS9jb2x1bW4gbnVtYmVyXG4gICAgICAgICAgICAgICAgcGFydHNbMl0gPSBzdWJtYXRjaFsxXTsgLy8gdXJsXG4gICAgICAgICAgICAgICAgcGFydHNbM10gPSBzdWJtYXRjaFsyXTsgLy8gbGluZVxuICAgICAgICAgICAgICAgIHBhcnRzWzRdID0gc3VibWF0Y2hbM107IC8vIGNvbHVtblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxlbWVudCA9IHtcbiAgICAgICAgICAgICAgICAvLyB3b3JraW5nIHdpdGggdGhlIHJlZ2V4cCBhYm92ZSBpcyBzdXBlciBwYWluZnVsLiBpdCBpcyBxdWl0ZSBhIGhhY2ssIGJ1dCBqdXN0IHN0cmlwcGluZyB0aGUgYGFkZHJlc3MgYXQgYFxuICAgICAgICAgICAgICAgIC8vIHByZWZpeCBoZXJlIHNlZW1zIGxpa2UgdGhlIHF1aWNrZXN0IHNvbHV0aW9uIGZvciBub3cuXG4gICAgICAgICAgICAgICAgdXJsOiBwYXJ0c1syXSAmJiBwYXJ0c1syXS5pbmRleE9mKCdhZGRyZXNzIGF0ICcpID09PSAwID8gcGFydHNbMl0uc3Vic3RyKCdhZGRyZXNzIGF0ICcubGVuZ3RoKSA6IHBhcnRzWzJdLFxuICAgICAgICAgICAgICAgIGZ1bmM6IHBhcnRzWzFdIHx8IFVOS05PV05fRlVOQ1RJT04sXG4gICAgICAgICAgICAgICAgYXJnczogaXNOYXRpdmUgPyBbcGFydHNbMl1dIDogW10sXG4gICAgICAgICAgICAgICAgbGluZTogcGFydHNbM10gPyArcGFydHNbM10gOiBudWxsLFxuICAgICAgICAgICAgICAgIGNvbHVtbjogcGFydHNbNF0gPyArcGFydHNbNF0gOiBudWxsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgocGFydHMgPSB3aW5qcy5leGVjKGxpbmVzW2ldKSkpIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSB7XG4gICAgICAgICAgICAgICAgdXJsOiBwYXJ0c1syXSxcbiAgICAgICAgICAgICAgICBmdW5jOiBwYXJ0c1sxXSB8fCBVTktOT1dOX0ZVTkNUSU9OLFxuICAgICAgICAgICAgICAgIGFyZ3M6IFtdLFxuICAgICAgICAgICAgICAgIGxpbmU6ICtwYXJ0c1szXSxcbiAgICAgICAgICAgICAgICBjb2x1bW46IHBhcnRzWzRdID8gK3BhcnRzWzRdIDogbnVsbCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKHBhcnRzID0gZ2Vja28uZXhlYyhsaW5lc1tpXSkpKSB7XG4gICAgICAgICAgICBpc0V2YWwgPSBwYXJ0c1szXSAmJiBwYXJ0c1szXS5pbmRleE9mKCcgPiBldmFsJykgPiAtMTtcbiAgICAgICAgICAgIGlmIChpc0V2YWwgJiYgKHN1Ym1hdGNoID0gZ2Vja29FdmFsLmV4ZWMocGFydHNbM10pKSkge1xuICAgICAgICAgICAgICAgIC8vIHRocm93IG91dCBldmFsIGxpbmUvY29sdW1uIGFuZCB1c2UgdG9wLW1vc3QgbGluZSBudW1iZXJcbiAgICAgICAgICAgICAgICBwYXJ0c1sxXSA9IHBhcnRzWzFdIHx8IFwiZXZhbFwiO1xuICAgICAgICAgICAgICAgIHBhcnRzWzNdID0gc3VibWF0Y2hbMV07XG4gICAgICAgICAgICAgICAgcGFydHNbNF0gPSBzdWJtYXRjaFsyXTtcbiAgICAgICAgICAgICAgICBwYXJ0c1s1XSA9ICcnOyAvLyBubyBjb2x1bW4gd2hlbiBldmFsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpID09PSAwICYmICFwYXJ0c1s1XSAmJiBleC5jb2x1bW5OdW1iZXIgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgIC8vIEZpcmVGb3ggdXNlcyB0aGlzIGF3ZXNvbWUgY29sdW1uTnVtYmVyIHByb3BlcnR5IGZvciBpdHMgdG9wIGZyYW1lXG4gICAgICAgICAgICAgICAgLy8gQWxzbyBub3RlLCBGaXJlZm94J3MgY29sdW1uIG51bWJlciBpcyAwLWJhc2VkIGFuZCBldmVyeXRoaW5nIGVsc2UgZXhwZWN0cyAxLWJhc2VkLFxuICAgICAgICAgICAgICAgIC8vIHNvIGFkZGluZyAxXG4gICAgICAgICAgICAgICAgLy8gTk9URTogdGhpcyBoYWNrIGRvZXNuJ3Qgd29yayBpZiB0b3AtbW9zdCBmcmFtZSBpcyBldmFsXG4gICAgICAgICAgICAgICAgc3RhY2tbMF0uY29sdW1uID0gZXguY29sdW1uTnVtYmVyICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsZW1lbnQgPSB7XG4gICAgICAgICAgICAgICAgdXJsOiBwYXJ0c1szXSxcbiAgICAgICAgICAgICAgICBmdW5jOiBwYXJ0c1sxXSB8fCBVTktOT1dOX0ZVTkNUSU9OLFxuICAgICAgICAgICAgICAgIGFyZ3M6IHBhcnRzWzJdID8gcGFydHNbMl0uc3BsaXQoJywnKSA6IFtdLFxuICAgICAgICAgICAgICAgIGxpbmU6IHBhcnRzWzRdID8gK3BhcnRzWzRdIDogbnVsbCxcbiAgICAgICAgICAgICAgICBjb2x1bW46IHBhcnRzWzVdID8gK3BhcnRzWzVdIDogbnVsbCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWVsZW1lbnQuZnVuYyAmJiBlbGVtZW50LmxpbmUpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuZnVuYyA9IFVOS05PV05fRlVOQ1RJT047XG4gICAgICAgIH1cbiAgICAgICAgc3RhY2sucHVzaChlbGVtZW50KTtcbiAgICB9XG4gICAgaWYgKCFzdGFjay5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIG1lc3NhZ2U6IGV4dHJhY3RNZXNzYWdlKGV4KSxcbiAgICAgICAgbmFtZTogZXgubmFtZSxcbiAgICAgICAgc3RhY2s6IHN0YWNrLFxuICAgIH07XG59XG4vKiogSlNEb2MgKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBjb21wdXRlU3RhY2tUcmFjZUZyb21TdGFja3RyYWNlUHJvcChleCkge1xuICAgIGlmICghZXggfHwgIWV4LnN0YWNrdHJhY2UpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8vIEFjY2VzcyBhbmQgc3RvcmUgdGhlIHN0YWNrdHJhY2UgcHJvcGVydHkgYmVmb3JlIGRvaW5nIEFOWVRISU5HXG4gICAgLy8gZWxzZSB0byBpdCBiZWNhdXNlIE9wZXJhIGlzIG5vdCB2ZXJ5IGdvb2QgYXQgcHJvdmlkaW5nIGl0XG4gICAgLy8gcmVsaWFibHkgaW4gb3RoZXIgY2lyY3Vtc3RhbmNlcy5cbiAgICB2YXIgc3RhY2t0cmFjZSA9IGV4LnN0YWNrdHJhY2U7XG4gICAgdmFyIG9wZXJhMTBSZWdleCA9IC8gbGluZSAoXFxkKykuKnNjcmlwdCAoPzppbiApPyhcXFMrKSg/OjogaW4gZnVuY3Rpb24gKFxcUyspKT8kL2k7XG4gICAgdmFyIG9wZXJhMTFSZWdleCA9IC8gbGluZSAoXFxkKyksIGNvbHVtbiAoXFxkKylcXHMqKD86aW4gKD86PGFub255bW91cyBmdW5jdGlvbjogKFtePl0rKT58KFteKV0rKSlcXCgoLiopXFwpKT8gaW4gKC4qKTpcXHMqJC9pO1xuICAgIHZhciBsaW5lcyA9IHN0YWNrdHJhY2Uuc3BsaXQoJ1xcbicpO1xuICAgIHZhciBzdGFjayA9IFtdO1xuICAgIHZhciBwYXJ0cztcbiAgICBmb3IgKHZhciBsaW5lID0gMDsgbGluZSA8IGxpbmVzLmxlbmd0aDsgbGluZSArPSAyKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gbnVsbDtcbiAgICAgICAgaWYgKChwYXJ0cyA9IG9wZXJhMTBSZWdleC5leGVjKGxpbmVzW2xpbmVdKSkpIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSB7XG4gICAgICAgICAgICAgICAgdXJsOiBwYXJ0c1syXSxcbiAgICAgICAgICAgICAgICBmdW5jOiBwYXJ0c1szXSxcbiAgICAgICAgICAgICAgICBhcmdzOiBbXSxcbiAgICAgICAgICAgICAgICBsaW5lOiArcGFydHNbMV0sXG4gICAgICAgICAgICAgICAgY29sdW1uOiBudWxsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgocGFydHMgPSBvcGVyYTExUmVnZXguZXhlYyhsaW5lc1tsaW5lXSkpKSB7XG4gICAgICAgICAgICBlbGVtZW50ID0ge1xuICAgICAgICAgICAgICAgIHVybDogcGFydHNbNl0sXG4gICAgICAgICAgICAgICAgZnVuYzogcGFydHNbM10gfHwgcGFydHNbNF0sXG4gICAgICAgICAgICAgICAgYXJnczogcGFydHNbNV0gPyBwYXJ0c1s1XS5zcGxpdCgnLCcpIDogW10sXG4gICAgICAgICAgICAgICAgbGluZTogK3BhcnRzWzFdLFxuICAgICAgICAgICAgICAgIGNvbHVtbjogK3BhcnRzWzJdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKCFlbGVtZW50LmZ1bmMgJiYgZWxlbWVudC5saW5lKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5mdW5jID0gVU5LTk9XTl9GVU5DVElPTjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YWNrLnB1c2goZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFzdGFjay5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIG1lc3NhZ2U6IGV4dHJhY3RNZXNzYWdlKGV4KSxcbiAgICAgICAgbmFtZTogZXgubmFtZSxcbiAgICAgICAgc3RhY2s6IHN0YWNrLFxuICAgIH07XG59XG4vKiogUmVtb3ZlIE4gbnVtYmVyIG9mIGZyYW1lcyBmcm9tIHRoZSBzdGFjayAqL1xuZnVuY3Rpb24gcG9wRnJhbWVzKHN0YWNrdHJhY2UsIHBvcFNpemUpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHN0YWNrdHJhY2UpLCB7IHN0YWNrOiBzdGFja3RyYWNlLnN0YWNrLnNsaWNlKHBvcFNpemUpIH0pO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gc3RhY2t0cmFjZTtcbiAgICB9XG59XG4vKipcbiAqIFRoZXJlIGFyZSBjYXNlcyB3aGVyZSBzdGFja3RyYWNlLm1lc3NhZ2UgaXMgYW4gRXZlbnQgb2JqZWN0XG4gKiBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L2lzc3Vlcy8xOTQ5XG4gKiBJbiB0aGlzIHNwZWNpZmljIGNhc2Ugd2UgdHJ5IHRvIGV4dHJhY3Qgc3RhY2t0cmFjZS5tZXNzYWdlLmVycm9yLm1lc3NhZ2VcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIGV4dHJhY3RNZXNzYWdlKGV4KSB7XG4gICAgdmFyIG1lc3NhZ2UgPSBleCAmJiBleC5tZXNzYWdlO1xuICAgIGlmICghbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gJ05vIGVycm9yIG1lc3NhZ2UnO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5lcnJvciAmJiB0eXBlb2YgbWVzc2FnZS5lcnJvci5tZXNzYWdlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gbWVzc2FnZS5lcnJvci5tZXNzYWdlO1xuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYWNla2l0LmpzLm1hcCIsImltcG9ydCB7IGV4dHJhY3RFeGNlcHRpb25LZXlzRm9yTWVzc2FnZSwgaXNFdmVudCwgbm9ybWFsaXplVG9TaXplIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBjb21wdXRlU3RhY2tUcmFjZSB9IGZyb20gJy4vdHJhY2VraXQnO1xudmFyIFNUQUNLVFJBQ0VfTElNSVQgPSA1MDtcbi8qKlxuICogVGhpcyBmdW5jdGlvbiBjcmVhdGVzIGFuIGV4Y2VwdGlvbiBmcm9tIGFuIFRyYWNlS2l0U3RhY2tUcmFjZVxuICogQHBhcmFtIHN0YWNrdHJhY2UgVHJhY2VLaXRTdGFja1RyYWNlIHRoYXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYW4gZXhjZXB0aW9uXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleGNlcHRpb25Gcm9tU3RhY2t0cmFjZShzdGFja3RyYWNlKSB7XG4gICAgdmFyIGZyYW1lcyA9IHByZXBhcmVGcmFtZXNGb3JFdmVudChzdGFja3RyYWNlLnN0YWNrKTtcbiAgICB2YXIgZXhjZXB0aW9uID0ge1xuICAgICAgICB0eXBlOiBzdGFja3RyYWNlLm5hbWUsXG4gICAgICAgIHZhbHVlOiBzdGFja3RyYWNlLm1lc3NhZ2UsXG4gICAgfTtcbiAgICBpZiAoZnJhbWVzICYmIGZyYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgZXhjZXB0aW9uLnN0YWNrdHJhY2UgPSB7IGZyYW1lczogZnJhbWVzIH07XG4gICAgfVxuICAgIGlmIChleGNlcHRpb24udHlwZSA9PT0gdW5kZWZpbmVkICYmIGV4Y2VwdGlvbi52YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgZXhjZXB0aW9uLnZhbHVlID0gJ1VucmVjb3ZlcmFibGUgZXJyb3IgY2F1Z2h0JztcbiAgICB9XG4gICAgcmV0dXJuIGV4Y2VwdGlvbjtcbn1cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gZXZlbnRGcm9tUGxhaW5PYmplY3QoZXhjZXB0aW9uLCBzeW50aGV0aWNFeGNlcHRpb24sIHJlamVjdGlvbikge1xuICAgIHZhciBldmVudCA9IHtcbiAgICAgICAgZXhjZXB0aW9uOiB7XG4gICAgICAgICAgICB2YWx1ZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IGlzRXZlbnQoZXhjZXB0aW9uKSA/IGV4Y2VwdGlvbi5jb25zdHJ1Y3Rvci5uYW1lIDogcmVqZWN0aW9uID8gJ1VuaGFuZGxlZFJlamVjdGlvbicgOiAnRXJyb3InLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogXCJOb24tRXJyb3IgXCIgKyAocmVqZWN0aW9uID8gJ3Byb21pc2UgcmVqZWN0aW9uJyA6ICdleGNlcHRpb24nKSArIFwiIGNhcHR1cmVkIHdpdGgga2V5czogXCIgKyBleHRyYWN0RXhjZXB0aW9uS2V5c0Zvck1lc3NhZ2UoZXhjZXB0aW9uKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgZXh0cmE6IHtcbiAgICAgICAgICAgIF9fc2VyaWFsaXplZF9fOiBub3JtYWxpemVUb1NpemUoZXhjZXB0aW9uKSxcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIGlmIChzeW50aGV0aWNFeGNlcHRpb24pIHtcbiAgICAgICAgdmFyIHN0YWNrdHJhY2UgPSBjb21wdXRlU3RhY2tUcmFjZShzeW50aGV0aWNFeGNlcHRpb24pO1xuICAgICAgICB2YXIgZnJhbWVzXzEgPSBwcmVwYXJlRnJhbWVzRm9yRXZlbnQoc3RhY2t0cmFjZS5zdGFjayk7XG4gICAgICAgIGV2ZW50LnN0YWNrdHJhY2UgPSB7XG4gICAgICAgICAgICBmcmFtZXM6IGZyYW1lc18xLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZXZlbnQ7XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV2ZW50RnJvbVN0YWNrdHJhY2Uoc3RhY2t0cmFjZSkge1xuICAgIHZhciBleGNlcHRpb24gPSBleGNlcHRpb25Gcm9tU3RhY2t0cmFjZShzdGFja3RyYWNlKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBleGNlcHRpb246IHtcbiAgICAgICAgICAgIHZhbHVlczogW2V4Y2VwdGlvbl0sXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZUZyYW1lc0ZvckV2ZW50KHN0YWNrKSB7XG4gICAgaWYgKCFzdGFjayB8fCAhc3RhY2subGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgdmFyIGxvY2FsU3RhY2sgPSBzdGFjaztcbiAgICB2YXIgZmlyc3RGcmFtZUZ1bmN0aW9uID0gbG9jYWxTdGFja1swXS5mdW5jIHx8ICcnO1xuICAgIHZhciBsYXN0RnJhbWVGdW5jdGlvbiA9IGxvY2FsU3RhY2tbbG9jYWxTdGFjay5sZW5ndGggLSAxXS5mdW5jIHx8ICcnO1xuICAgIC8vIElmIHN0YWNrIHN0YXJ0cyB3aXRoIG9uZSBvZiBvdXIgQVBJIGNhbGxzLCByZW1vdmUgaXQgKHN0YXJ0cywgbWVhbmluZyBpdCdzIHRoZSB0b3Agb2YgdGhlIHN0YWNrIC0gYWthIGxhc3QgY2FsbClcbiAgICBpZiAoZmlyc3RGcmFtZUZ1bmN0aW9uLmluZGV4T2YoJ2NhcHR1cmVNZXNzYWdlJykgIT09IC0xIHx8IGZpcnN0RnJhbWVGdW5jdGlvbi5pbmRleE9mKCdjYXB0dXJlRXhjZXB0aW9uJykgIT09IC0xKSB7XG4gICAgICAgIGxvY2FsU3RhY2sgPSBsb2NhbFN0YWNrLnNsaWNlKDEpO1xuICAgIH1cbiAgICAvLyBJZiBzdGFjayBlbmRzIHdpdGggb25lIG9mIG91ciBpbnRlcm5hbCBBUEkgY2FsbHMsIHJlbW92ZSBpdCAoZW5kcywgbWVhbmluZyBpdCdzIHRoZSBib3R0b20gb2YgdGhlIHN0YWNrIC0gYWthIHRvcC1tb3N0IGNhbGwpXG4gICAgaWYgKGxhc3RGcmFtZUZ1bmN0aW9uLmluZGV4T2YoJ3NlbnRyeVdyYXBwZWQnKSAhPT0gLTEpIHtcbiAgICAgICAgbG9jYWxTdGFjayA9IGxvY2FsU3RhY2suc2xpY2UoMCwgLTEpO1xuICAgIH1cbiAgICAvLyBUaGUgZnJhbWUgd2hlcmUgdGhlIGNyYXNoIGhhcHBlbmVkLCBzaG91bGQgYmUgdGhlIGxhc3QgZW50cnkgaW4gdGhlIGFycmF5XG4gICAgcmV0dXJuIGxvY2FsU3RhY2tcbiAgICAgICAgLnNsaWNlKDAsIFNUQUNLVFJBQ0VfTElNSVQpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGZyYW1lKSB7IHJldHVybiAoe1xuICAgICAgICBjb2xubzogZnJhbWUuY29sdW1uID09PSBudWxsID8gdW5kZWZpbmVkIDogZnJhbWUuY29sdW1uLFxuICAgICAgICBmaWxlbmFtZTogZnJhbWUudXJsIHx8IGxvY2FsU3RhY2tbMF0udXJsLFxuICAgICAgICBmdW5jdGlvbjogZnJhbWUuZnVuYyB8fCAnPycsXG4gICAgICAgIGluX2FwcDogdHJ1ZSxcbiAgICAgICAgbGluZW5vOiBmcmFtZS5saW5lID09PSBudWxsID8gdW5kZWZpbmVkIDogZnJhbWUubGluZSxcbiAgICB9KTsgfSlcbiAgICAgICAgLnJldmVyc2UoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlcnMuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFNldmVyaXR5IH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBhZGRFeGNlcHRpb25NZWNoYW5pc20sIGFkZEV4Y2VwdGlvblR5cGVWYWx1ZSwgaXNET01FcnJvciwgaXNET01FeGNlcHRpb24sIGlzRXJyb3IsIGlzRXJyb3JFdmVudCwgaXNFdmVudCwgaXNQbGFpbk9iamVjdCwgU3luY1Byb21pc2UsIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBldmVudEZyb21QbGFpbk9iamVjdCwgZXZlbnRGcm9tU3RhY2t0cmFjZSwgcHJlcGFyZUZyYW1lc0ZvckV2ZW50IH0gZnJvbSAnLi9wYXJzZXJzJztcbmltcG9ydCB7IGNvbXB1dGVTdGFja1RyYWNlIH0gZnJvbSAnLi90cmFjZWtpdCc7XG4vKipcbiAqIEJ1aWxkcyBhbmQgRXZlbnQgZnJvbSBhIEV4Y2VwdGlvblxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gZXZlbnRGcm9tRXhjZXB0aW9uKG9wdGlvbnMsIGV4Y2VwdGlvbiwgaGludCkge1xuICAgIHZhciBzeW50aGV0aWNFeGNlcHRpb24gPSAoaGludCAmJiBoaW50LnN5bnRoZXRpY0V4Y2VwdGlvbikgfHwgdW5kZWZpbmVkO1xuICAgIHZhciBldmVudCA9IGV2ZW50RnJvbVVua25vd25JbnB1dChleGNlcHRpb24sIHN5bnRoZXRpY0V4Y2VwdGlvbiwge1xuICAgICAgICBhdHRhY2hTdGFja3RyYWNlOiBvcHRpb25zLmF0dGFjaFN0YWNrdHJhY2UsXG4gICAgfSk7XG4gICAgYWRkRXhjZXB0aW9uTWVjaGFuaXNtKGV2ZW50LCB7XG4gICAgICAgIGhhbmRsZWQ6IHRydWUsXG4gICAgICAgIHR5cGU6ICdnZW5lcmljJyxcbiAgICB9KTtcbiAgICBldmVudC5sZXZlbCA9IFNldmVyaXR5LkVycm9yO1xuICAgIGlmIChoaW50ICYmIGhpbnQuZXZlbnRfaWQpIHtcbiAgICAgICAgZXZlbnQuZXZlbnRfaWQgPSBoaW50LmV2ZW50X2lkO1xuICAgIH1cbiAgICByZXR1cm4gU3luY1Byb21pc2UucmVzb2x2ZShldmVudCk7XG59XG4vKipcbiAqIEJ1aWxkcyBhbmQgRXZlbnQgZnJvbSBhIE1lc3NhZ2VcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV2ZW50RnJvbU1lc3NhZ2Uob3B0aW9ucywgbWVzc2FnZSwgbGV2ZWwsIGhpbnQpIHtcbiAgICBpZiAobGV2ZWwgPT09IHZvaWQgMCkgeyBsZXZlbCA9IFNldmVyaXR5LkluZm87IH1cbiAgICB2YXIgc3ludGhldGljRXhjZXB0aW9uID0gKGhpbnQgJiYgaGludC5zeW50aGV0aWNFeGNlcHRpb24pIHx8IHVuZGVmaW5lZDtcbiAgICB2YXIgZXZlbnQgPSBldmVudEZyb21TdHJpbmcobWVzc2FnZSwgc3ludGhldGljRXhjZXB0aW9uLCB7XG4gICAgICAgIGF0dGFjaFN0YWNrdHJhY2U6IG9wdGlvbnMuYXR0YWNoU3RhY2t0cmFjZSxcbiAgICB9KTtcbiAgICBldmVudC5sZXZlbCA9IGxldmVsO1xuICAgIGlmIChoaW50ICYmIGhpbnQuZXZlbnRfaWQpIHtcbiAgICAgICAgZXZlbnQuZXZlbnRfaWQgPSBoaW50LmV2ZW50X2lkO1xuICAgIH1cbiAgICByZXR1cm4gU3luY1Byb21pc2UucmVzb2x2ZShldmVudCk7XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV2ZW50RnJvbVVua25vd25JbnB1dChleGNlcHRpb24sIHN5bnRoZXRpY0V4Y2VwdGlvbiwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgdmFyIGV2ZW50O1xuICAgIGlmIChpc0Vycm9yRXZlbnQoZXhjZXB0aW9uKSAmJiBleGNlcHRpb24uZXJyb3IpIHtcbiAgICAgICAgLy8gSWYgaXQgaXMgYW4gRXJyb3JFdmVudCB3aXRoIGBlcnJvcmAgcHJvcGVydHksIGV4dHJhY3QgaXQgdG8gZ2V0IGFjdHVhbCBFcnJvclxuICAgICAgICB2YXIgZXJyb3JFdmVudCA9IGV4Y2VwdGlvbjtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIGV4Y2VwdGlvbiA9IGVycm9yRXZlbnQuZXJyb3I7XG4gICAgICAgIGV2ZW50ID0gZXZlbnRGcm9tU3RhY2t0cmFjZShjb21wdXRlU3RhY2tUcmFjZShleGNlcHRpb24pKTtcbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH1cbiAgICBpZiAoaXNET01FcnJvcihleGNlcHRpb24pIHx8IGlzRE9NRXhjZXB0aW9uKGV4Y2VwdGlvbikpIHtcbiAgICAgICAgLy8gSWYgaXQgaXMgYSBET01FcnJvciBvciBET01FeGNlcHRpb24gKHdoaWNoIGFyZSBsZWdhY3kgQVBJcywgYnV0IHN0aWxsIHN1cHBvcnRlZCBpbiBzb21lIGJyb3dzZXJzKVxuICAgICAgICAvLyB0aGVuIHdlIGp1c3QgZXh0cmFjdCB0aGUgbmFtZSwgY29kZSwgYW5kIG1lc3NhZ2UsIGFzIHRoZXkgZG9uJ3QgcHJvdmlkZSBhbnl0aGluZyBlbHNlXG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9ET01FcnJvclxuICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRE9NRXhjZXB0aW9uXG4gICAgICAgIHZhciBkb21FeGNlcHRpb24gPSBleGNlcHRpb247XG4gICAgICAgIHZhciBuYW1lXzEgPSBkb21FeGNlcHRpb24ubmFtZSB8fCAoaXNET01FcnJvcihkb21FeGNlcHRpb24pID8gJ0RPTUVycm9yJyA6ICdET01FeGNlcHRpb24nKTtcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSBkb21FeGNlcHRpb24ubWVzc2FnZSA/IG5hbWVfMSArIFwiOiBcIiArIGRvbUV4Y2VwdGlvbi5tZXNzYWdlIDogbmFtZV8xO1xuICAgICAgICBldmVudCA9IGV2ZW50RnJvbVN0cmluZyhtZXNzYWdlLCBzeW50aGV0aWNFeGNlcHRpb24sIG9wdGlvbnMpO1xuICAgICAgICBhZGRFeGNlcHRpb25UeXBlVmFsdWUoZXZlbnQsIG1lc3NhZ2UpO1xuICAgICAgICBpZiAoJ2NvZGUnIGluIGRvbUV4Y2VwdGlvbikge1xuICAgICAgICAgICAgZXZlbnQudGFncyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBldmVudC50YWdzKSwgeyAnRE9NRXhjZXB0aW9uLmNvZGUnOiBcIlwiICsgZG9tRXhjZXB0aW9uLmNvZGUgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH1cbiAgICBpZiAoaXNFcnJvcihleGNlcHRpb24pKSB7XG4gICAgICAgIC8vIHdlIGhhdmUgYSByZWFsIEVycm9yIG9iamVjdCwgZG8gbm90aGluZ1xuICAgICAgICBldmVudCA9IGV2ZW50RnJvbVN0YWNrdHJhY2UoY29tcHV0ZVN0YWNrVHJhY2UoZXhjZXB0aW9uKSk7XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICB9XG4gICAgaWYgKGlzUGxhaW5PYmplY3QoZXhjZXB0aW9uKSB8fCBpc0V2ZW50KGV4Y2VwdGlvbikpIHtcbiAgICAgICAgLy8gSWYgaXQgaXMgcGxhaW4gT2JqZWN0IG9yIEV2ZW50LCBzZXJpYWxpemUgaXQgbWFudWFsbHkgYW5kIGV4dHJhY3Qgb3B0aW9uc1xuICAgICAgICAvLyBUaGlzIHdpbGwgYWxsb3cgdXMgdG8gZ3JvdXAgZXZlbnRzIGJhc2VkIG9uIHRvcC1sZXZlbCBrZXlzXG4gICAgICAgIC8vIHdoaWNoIGlzIG11Y2ggYmV0dGVyIHRoYW4gY3JlYXRpbmcgbmV3IGdyb3VwIHdoZW4gYW55IGtleS92YWx1ZSBjaGFuZ2VcbiAgICAgICAgdmFyIG9iamVjdEV4Y2VwdGlvbiA9IGV4Y2VwdGlvbjtcbiAgICAgICAgZXZlbnQgPSBldmVudEZyb21QbGFpbk9iamVjdChvYmplY3RFeGNlcHRpb24sIHN5bnRoZXRpY0V4Y2VwdGlvbiwgb3B0aW9ucy5yZWplY3Rpb24pO1xuICAgICAgICBhZGRFeGNlcHRpb25NZWNoYW5pc20oZXZlbnQsIHtcbiAgICAgICAgICAgIHN5bnRoZXRpYzogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICB9XG4gICAgLy8gSWYgbm9uZSBvZiBwcmV2aW91cyBjaGVja3Mgd2VyZSB2YWxpZCwgdGhlbiBpdCBtZWFucyB0aGF0IGl0J3Mgbm90OlxuICAgIC8vIC0gYW4gaW5zdGFuY2Ugb2YgRE9NRXJyb3JcbiAgICAvLyAtIGFuIGluc3RhbmNlIG9mIERPTUV4Y2VwdGlvblxuICAgIC8vIC0gYW4gaW5zdGFuY2Ugb2YgRXZlbnRcbiAgICAvLyAtIGFuIGluc3RhbmNlIG9mIEVycm9yXG4gICAgLy8gLSBhIHZhbGlkIEVycm9yRXZlbnQgKG9uZSB3aXRoIGFuIGVycm9yIHByb3BlcnR5KVxuICAgIC8vIC0gYSBwbGFpbiBPYmplY3RcbiAgICAvL1xuICAgIC8vIFNvIGJhaWwgb3V0IGFuZCBjYXB0dXJlIGl0IGFzIGEgc2ltcGxlIG1lc3NhZ2U6XG4gICAgZXZlbnQgPSBldmVudEZyb21TdHJpbmcoZXhjZXB0aW9uLCBzeW50aGV0aWNFeGNlcHRpb24sIG9wdGlvbnMpO1xuICAgIGFkZEV4Y2VwdGlvblR5cGVWYWx1ZShldmVudCwgXCJcIiArIGV4Y2VwdGlvbiwgdW5kZWZpbmVkKTtcbiAgICBhZGRFeGNlcHRpb25NZWNoYW5pc20oZXZlbnQsIHtcbiAgICAgICAgc3ludGhldGljOiB0cnVlLFxuICAgIH0pO1xuICAgIHJldHVybiBldmVudDtcbn1cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gZXZlbnRGcm9tU3RyaW5nKGlucHV0LCBzeW50aGV0aWNFeGNlcHRpb24sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIHZhciBldmVudCA9IHtcbiAgICAgICAgbWVzc2FnZTogaW5wdXQsXG4gICAgfTtcbiAgICBpZiAob3B0aW9ucy5hdHRhY2hTdGFja3RyYWNlICYmIHN5bnRoZXRpY0V4Y2VwdGlvbikge1xuICAgICAgICB2YXIgc3RhY2t0cmFjZSA9IGNvbXB1dGVTdGFja1RyYWNlKHN5bnRoZXRpY0V4Y2VwdGlvbik7XG4gICAgICAgIHZhciBmcmFtZXNfMSA9IHByZXBhcmVGcmFtZXNGb3JFdmVudChzdGFja3RyYWNlLnN0YWNrKTtcbiAgICAgICAgZXZlbnQuc3RhY2t0cmFjZSA9IHtcbiAgICAgICAgICAgIGZyYW1lczogZnJhbWVzXzEsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBldmVudDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2ZW50YnVpbGRlci5qcy5tYXAiLCIvKiogQ3JlYXRlcyBhIFNlbnRyeVJlcXVlc3QgZnJvbSBhbiBldmVudC4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXNzaW9uVG9TZW50cnlSZXF1ZXN0KHNlc3Npb24sIGFwaSkge1xuICAgIHZhciBlbnZlbG9wZUhlYWRlcnMgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHNlbnRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICB9KTtcbiAgICB2YXIgaXRlbUhlYWRlcnMgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHR5cGU6ICdzZXNzaW9uJyxcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBib2R5OiBlbnZlbG9wZUhlYWRlcnMgKyBcIlxcblwiICsgaXRlbUhlYWRlcnMgKyBcIlxcblwiICsgSlNPTi5zdHJpbmdpZnkoc2Vzc2lvbiksXG4gICAgICAgIHR5cGU6ICdzZXNzaW9uJyxcbiAgICAgICAgdXJsOiBhcGkuZ2V0RW52ZWxvcGVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aCgpLFxuICAgIH07XG59XG4vKiogQ3JlYXRlcyBhIFNlbnRyeVJlcXVlc3QgZnJvbSBhbiBldmVudC4gKi9cbmV4cG9ydCBmdW5jdGlvbiBldmVudFRvU2VudHJ5UmVxdWVzdChldmVudCwgYXBpKSB7XG4gICAgdmFyIHVzZUVudmVsb3BlID0gZXZlbnQudHlwZSA9PT0gJ3RyYW5zYWN0aW9uJztcbiAgICB2YXIgcmVxID0ge1xuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShldmVudCksXG4gICAgICAgIHR5cGU6IGV2ZW50LnR5cGUgfHwgJ2V2ZW50JyxcbiAgICAgICAgdXJsOiB1c2VFbnZlbG9wZSA/IGFwaS5nZXRFbnZlbG9wZUVuZHBvaW50V2l0aFVybEVuY29kZWRBdXRoKCkgOiBhcGkuZ2V0U3RvcmVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aCgpLFxuICAgIH07XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wLnNlbnRyeS5kZXYvc2RrL2VudmVsb3Blcy9cbiAgICAvLyBTaW5jZSB3ZSBkb24ndCBuZWVkIHRvIG1hbmlwdWxhdGUgZW52ZWxvcGVzIG5vciBzdG9yZSB0aGVtLCB0aGVyZSBpcyBub1xuICAgIC8vIGV4cG9ydGVkIGNvbmNlcHQgb2YgYW4gRW52ZWxvcGUgd2l0aCBvcGVyYXRpb25zIGluY2x1ZGluZyBzZXJpYWxpemF0aW9uIGFuZFxuICAgIC8vIGRlc2VyaWFsaXphdGlvbi4gSW5zdGVhZCwgd2Ugb25seSBpbXBsZW1lbnQgYSBtaW5pbWFsIHN1YnNldCBvZiB0aGUgc3BlYyB0b1xuICAgIC8vIHNlcmlhbGl6ZSBldmVudHMgaW5saW5lIGhlcmUuXG4gICAgaWYgKHVzZUVudmVsb3BlKSB7XG4gICAgICAgIHZhciBlbnZlbG9wZUhlYWRlcnMgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBldmVudF9pZDogZXZlbnQuZXZlbnRfaWQsXG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGFkZCAqIDEwMDAgc2luY2Ugd2UgZGl2aWRlIGl0IGJ5IDEwMDAgYnkgZGVmYXVsdCBidXQgSlMgd29ya3Mgd2l0aCBtcyBwcmVjaXNpb25cbiAgICAgICAgICAgIC8vIFRoZSByZWFzb24gd2UgdXNlIHRpbWVzdGFtcFdpdGhNcyBoZXJlIGlzIHRoYXQgYWxsIGNsb2NrcyBhY3Jvc3MgdGhlIFNESyB1c2UgdGhlIHNhbWUgY2xvY2tcbiAgICAgICAgICAgIHNlbnRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBpdGVtSGVhZGVycyA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIHR5cGU6IGV2ZW50LnR5cGUsXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBUaGUgdHJhaWxpbmcgbmV3bGluZSBpcyBvcHRpb25hbC4gV2UgaW50ZW50aW9uYWxseSBkb24ndCBzZW5kIGl0IHRvIGF2b2lkXG4gICAgICAgIC8vIHNlbmRpbmcgdW5uZWNlc3NhcnkgYnl0ZXMuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIGNvbnN0IGVudmVsb3BlID0gYCR7ZW52ZWxvcGVIZWFkZXJzfVxcbiR7aXRlbUhlYWRlcnN9XFxuJHtyZXEuYm9keX1cXG5gO1xuICAgICAgICB2YXIgZW52ZWxvcGUgPSBlbnZlbG9wZUhlYWRlcnMgKyBcIlxcblwiICsgaXRlbUhlYWRlcnMgKyBcIlxcblwiICsgcmVxLmJvZHk7XG4gICAgICAgIHJlcS5ib2R5ID0gZW52ZWxvcGU7XG4gICAgfVxuICAgIHJldHVybiByZXE7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXF1ZXN0LmpzLm1hcCIsImltcG9ydCB7IERzbiwgdXJsRW5jb2RlIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG52YXIgU0VOVFJZX0FQSV9WRVJTSU9OID0gJzcnO1xuLyoqIEhlbHBlciBjbGFzcyB0byBwcm92aWRlIHVybHMgdG8gZGlmZmVyZW50IFNlbnRyeSBlbmRwb2ludHMuICovXG52YXIgQVBJID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQVBJICovXG4gICAgZnVuY3Rpb24gQVBJKGRzbikge1xuICAgICAgICB0aGlzLmRzbiA9IGRzbjtcbiAgICAgICAgdGhpcy5fZHNuT2JqZWN0ID0gbmV3IERzbihkc24pO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyB0aGUgRHNuIG9iamVjdC4gKi9cbiAgICBBUEkucHJvdG90eXBlLmdldERzbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rzbk9iamVjdDtcbiAgICB9O1xuICAgIC8qKiBSZXR1cm5zIHRoZSBwcmVmaXggdG8gY29uc3RydWN0IFNlbnRyeSBpbmdlc3Rpb24gQVBJIGVuZHBvaW50cy4gKi9cbiAgICBBUEkucHJvdG90eXBlLmdldEJhc2VBcGlFbmRwb2ludCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRzbiA9IHRoaXMuX2Rzbk9iamVjdDtcbiAgICAgICAgdmFyIHByb3RvY29sID0gZHNuLnByb3RvY29sID8gZHNuLnByb3RvY29sICsgXCI6XCIgOiAnJztcbiAgICAgICAgdmFyIHBvcnQgPSBkc24ucG9ydCA/IFwiOlwiICsgZHNuLnBvcnQgOiAnJztcbiAgICAgICAgcmV0dXJuIHByb3RvY29sICsgXCIvL1wiICsgZHNuLmhvc3QgKyBwb3J0ICsgKGRzbi5wYXRoID8gXCIvXCIgKyBkc24ucGF0aCA6ICcnKSArIFwiL2FwaS9cIjtcbiAgICB9O1xuICAgIC8qKiBSZXR1cm5zIHRoZSBzdG9yZSBlbmRwb2ludCBVUkwuICovXG4gICAgQVBJLnByb3RvdHlwZS5nZXRTdG9yZUVuZHBvaW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0SW5nZXN0RW5kcG9pbnQoJ3N0b3JlJyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzdG9yZSBlbmRwb2ludCBVUkwgd2l0aCBhdXRoIGluIHRoZSBxdWVyeSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBTZW5kaW5nIGF1dGggYXMgcGFydCBvZiB0aGUgcXVlcnkgc3RyaW5nIGFuZCBub3QgYXMgY3VzdG9tIEhUVFAgaGVhZGVycyBhdm9pZHMgQ09SUyBwcmVmbGlnaHQgcmVxdWVzdHMuXG4gICAgICovXG4gICAgQVBJLnByb3RvdHlwZS5nZXRTdG9yZUVuZHBvaW50V2l0aFVybEVuY29kZWRBdXRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTdG9yZUVuZHBvaW50KCkgKyBcIj9cIiArIHRoaXMuX2VuY29kZWRBdXRoKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBlbnZlbG9wZSBlbmRwb2ludCBVUkwgd2l0aCBhdXRoIGluIHRoZSBxdWVyeSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBTZW5kaW5nIGF1dGggYXMgcGFydCBvZiB0aGUgcXVlcnkgc3RyaW5nIGFuZCBub3QgYXMgY3VzdG9tIEhUVFAgaGVhZGVycyBhdm9pZHMgQ09SUyBwcmVmbGlnaHQgcmVxdWVzdHMuXG4gICAgICovXG4gICAgQVBJLnByb3RvdHlwZS5nZXRFbnZlbG9wZUVuZHBvaW50V2l0aFVybEVuY29kZWRBdXRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0RW52ZWxvcGVFbmRwb2ludCgpICsgXCI/XCIgKyB0aGlzLl9lbmNvZGVkQXV0aCgpO1xuICAgIH07XG4gICAgLyoqIFJldHVybnMgb25seSB0aGUgcGF0aCBjb21wb25lbnQgZm9yIHRoZSBzdG9yZSBlbmRwb2ludC4gKi9cbiAgICBBUEkucHJvdG90eXBlLmdldFN0b3JlRW5kcG9pbnRQYXRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZHNuID0gdGhpcy5fZHNuT2JqZWN0O1xuICAgICAgICByZXR1cm4gKGRzbi5wYXRoID8gXCIvXCIgKyBkc24ucGF0aCA6ICcnKSArIFwiL2FwaS9cIiArIGRzbi5wcm9qZWN0SWQgKyBcIi9zdG9yZS9cIjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgaW4gcmVxdWVzdCBoZWFkZXJzLlxuICAgICAqIFRoaXMgaXMgbmVlZGVkIGZvciBub2RlIGFuZCB0aGUgb2xkIC9zdG9yZSBlbmRwb2ludCBpbiBzZW50cnlcbiAgICAgKi9cbiAgICBBUEkucHJvdG90eXBlLmdldFJlcXVlc3RIZWFkZXJzID0gZnVuY3Rpb24gKGNsaWVudE5hbWUsIGNsaWVudFZlcnNpb24pIHtcbiAgICAgICAgdmFyIGRzbiA9IHRoaXMuX2Rzbk9iamVjdDtcbiAgICAgICAgdmFyIGhlYWRlciA9IFtcIlNlbnRyeSBzZW50cnlfdmVyc2lvbj1cIiArIFNFTlRSWV9BUElfVkVSU0lPTl07XG4gICAgICAgIGhlYWRlci5wdXNoKFwic2VudHJ5X2NsaWVudD1cIiArIGNsaWVudE5hbWUgKyBcIi9cIiArIGNsaWVudFZlcnNpb24pO1xuICAgICAgICBoZWFkZXIucHVzaChcInNlbnRyeV9rZXk9XCIgKyBkc24udXNlcik7XG4gICAgICAgIGlmIChkc24ucGFzcykge1xuICAgICAgICAgICAgaGVhZGVyLnB1c2goXCJzZW50cnlfc2VjcmV0PVwiICsgZHNuLnBhc3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgJ1gtU2VudHJ5LUF1dGgnOiBoZWFkZXIuam9pbignLCAnKSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKiBSZXR1cm5zIHRoZSB1cmwgdG8gdGhlIHJlcG9ydCBkaWFsb2cgZW5kcG9pbnQuICovXG4gICAgQVBJLnByb3RvdHlwZS5nZXRSZXBvcnREaWFsb2dFbmRwb2ludCA9IGZ1bmN0aW9uIChkaWFsb2dPcHRpb25zKSB7XG4gICAgICAgIGlmIChkaWFsb2dPcHRpb25zID09PSB2b2lkIDApIHsgZGlhbG9nT3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHZhciBkc24gPSB0aGlzLl9kc25PYmplY3Q7XG4gICAgICAgIHZhciBlbmRwb2ludCA9IHRoaXMuZ2V0QmFzZUFwaUVuZHBvaW50KCkgKyBcImVtYmVkL2Vycm9yLXBhZ2UvXCI7XG4gICAgICAgIHZhciBlbmNvZGVkT3B0aW9ucyA9IFtdO1xuICAgICAgICBlbmNvZGVkT3B0aW9ucy5wdXNoKFwiZHNuPVwiICsgZHNuLnRvU3RyaW5nKCkpO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gZGlhbG9nT3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ3VzZXInKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFkaWFsb2dPcHRpb25zLnVzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkaWFsb2dPcHRpb25zLnVzZXIubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBlbmNvZGVkT3B0aW9ucy5wdXNoKFwibmFtZT1cIiArIGVuY29kZVVSSUNvbXBvbmVudChkaWFsb2dPcHRpb25zLnVzZXIubmFtZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZGlhbG9nT3B0aW9ucy51c2VyLmVtYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuY29kZWRPcHRpb25zLnB1c2goXCJlbWFpbD1cIiArIGVuY29kZVVSSUNvbXBvbmVudChkaWFsb2dPcHRpb25zLnVzZXIuZW1haWwpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbmNvZGVkT3B0aW9ucy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoZGlhbG9nT3B0aW9uc1trZXldKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuY29kZWRPcHRpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGVuZHBvaW50ICsgXCI/XCIgKyBlbmNvZGVkT3B0aW9ucy5qb2luKCcmJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVuZHBvaW50O1xuICAgIH07XG4gICAgLyoqIFJldHVybnMgdGhlIGVudmVsb3BlIGVuZHBvaW50IFVSTC4gKi9cbiAgICBBUEkucHJvdG90eXBlLl9nZXRFbnZlbG9wZUVuZHBvaW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0SW5nZXN0RW5kcG9pbnQoJ2VudmVsb3BlJyk7XG4gICAgfTtcbiAgICAvKiogUmV0dXJucyB0aGUgaW5nZXN0IEFQSSBlbmRwb2ludCBmb3IgdGFyZ2V0LiAqL1xuICAgIEFQSS5wcm90b3R5cGUuX2dldEluZ2VzdEVuZHBvaW50ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICB2YXIgYmFzZSA9IHRoaXMuZ2V0QmFzZUFwaUVuZHBvaW50KCk7XG4gICAgICAgIHZhciBkc24gPSB0aGlzLl9kc25PYmplY3Q7XG4gICAgICAgIHJldHVybiBcIlwiICsgYmFzZSArIGRzbi5wcm9qZWN0SWQgKyBcIi9cIiArIHRhcmdldCArIFwiL1wiO1xuICAgIH07XG4gICAgLyoqIFJldHVybnMgYSBVUkwtZW5jb2RlZCBzdHJpbmcgd2l0aCBhdXRoIGNvbmZpZyBzdWl0YWJsZSBmb3IgYSBxdWVyeSBzdHJpbmcuICovXG4gICAgQVBJLnByb3RvdHlwZS5fZW5jb2RlZEF1dGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkc24gPSB0aGlzLl9kc25PYmplY3Q7XG4gICAgICAgIHZhciBhdXRoID0ge1xuICAgICAgICAgICAgLy8gV2Ugc2VuZCBvbmx5IHRoZSBtaW5pbXVtIHNldCBvZiByZXF1aXJlZCBpbmZvcm1hdGlvbi4gU2VlXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L2lzc3Vlcy8yNTcyLlxuICAgICAgICAgICAgc2VudHJ5X2tleTogZHNuLnVzZXIsXG4gICAgICAgICAgICBzZW50cnlfdmVyc2lvbjogU0VOVFJZX0FQSV9WRVJTSU9OLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdXJsRW5jb2RlKGF1dGgpO1xuICAgIH07XG4gICAgcmV0dXJuIEFQSTtcbn0oKSk7XG5leHBvcnQgeyBBUEkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwaS5qcy5tYXAiLCJpbXBvcnQgeyBTZW50cnlFcnJvciB9IGZyb20gJy4vZXJyb3InO1xuaW1wb3J0IHsgU3luY1Byb21pc2UgfSBmcm9tICcuL3N5bmNwcm9taXNlJztcbi8qKiBBIHNpbXBsZSBxdWV1ZSB0aGF0IGhvbGRzIHByb21pc2VzLiAqL1xudmFyIFByb21pc2VCdWZmZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUHJvbWlzZUJ1ZmZlcihfbGltaXQpIHtcbiAgICAgICAgdGhpcy5fbGltaXQgPSBfbGltaXQ7XG4gICAgICAgIC8qKiBJbnRlcm5hbCBzZXQgb2YgcXVldWVkIFByb21pc2VzICovXG4gICAgICAgIHRoaXMuX2J1ZmZlciA9IFtdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTYXlzIGlmIHRoZSBidWZmZXIgaXMgcmVhZHkgdG8gdGFrZSBtb3JlIHJlcXVlc3RzXG4gICAgICovXG4gICAgUHJvbWlzZUJ1ZmZlci5wcm90b3R5cGUuaXNSZWFkeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpbWl0ID09PSB1bmRlZmluZWQgfHwgdGhpcy5sZW5ndGgoKSA8IHRoaXMuX2xpbWl0O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkIGEgcHJvbWlzZSB0byB0aGUgcXVldWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGFzayBDYW4gYmUgYW55IFByb21pc2VMaWtlPFQ+XG4gICAgICogQHJldHVybnMgVGhlIG9yaWdpbmFsIHByb21pc2UuXG4gICAgICovXG4gICAgUHJvbWlzZUJ1ZmZlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHRhc2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLmlzUmVhZHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuIFN5bmNQcm9taXNlLnJlamVjdChuZXcgU2VudHJ5RXJyb3IoJ05vdCBhZGRpbmcgUHJvbWlzZSBkdWUgdG8gYnVmZmVyIGxpbWl0IHJlYWNoZWQuJykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9idWZmZXIuaW5kZXhPZih0YXNrKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlci5wdXNoKHRhc2spO1xuICAgICAgICB9XG4gICAgICAgIHRhc2tcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnJlbW92ZSh0YXNrKTsgfSlcbiAgICAgICAgICAgIC50aGVuKG51bGwsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5yZW1vdmUodGFzaykudGhlbihudWxsLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byBhZGQgdGhpcyBjYXRjaCBoZXJlIG90aGVyd2lzZSB3ZSBoYXZlIGFuIHVuaGFuZGxlZFByb21pc2VSZWplY3Rpb25cbiAgICAgICAgICAgICAgICAvLyBiZWNhdXNlIGl0J3MgYSBuZXcgUHJvbWlzZSBjaGFpbi5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRhc2s7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBwcm9taXNlIHRvIHRoZSBxdWV1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0YXNrIENhbiBiZSBhbnkgUHJvbWlzZUxpa2U8VD5cbiAgICAgKiBAcmV0dXJucyBSZW1vdmVkIHByb21pc2UuXG4gICAgICovXG4gICAgUHJvbWlzZUJ1ZmZlci5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHRhc2spIHtcbiAgICAgICAgdmFyIHJlbW92ZWRUYXNrID0gdGhpcy5fYnVmZmVyLnNwbGljZSh0aGlzLl9idWZmZXIuaW5kZXhPZih0YXNrKSwgMSlbMF07XG4gICAgICAgIHJldHVybiByZW1vdmVkVGFzaztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgbnVtYmVyIG9mIHVucmVzb2x2ZWQgcHJvbWlzZXMgaW4gdGhlIHF1ZXVlLlxuICAgICAqL1xuICAgIFByb21pc2VCdWZmZXIucHJvdG90eXBlLmxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J1ZmZlci5sZW5ndGg7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGlzIHdpbGwgZHJhaW4gdGhlIHdob2xlIHF1ZXVlLCByZXR1cm5zIHRydWUgaWYgcXVldWUgaXMgZW1wdHkgb3IgZHJhaW5lZC5cbiAgICAgKiBJZiB0aW1lb3V0IGlzIHByb3ZpZGVkIGFuZCB0aGUgcXVldWUgdGFrZXMgbG9uZ2VyIHRvIGRyYWluLCB0aGUgcHJvbWlzZSBzdGlsbCByZXNvbHZlcyBidXQgd2l0aCBmYWxzZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0aW1lb3V0IE51bWJlciBpbiBtcyB0byB3YWl0IHVudGlsIGl0IHJlc29sdmVzIHdpdGggZmFsc2UuXG4gICAgICovXG4gICAgUHJvbWlzZUJ1ZmZlci5wcm90b3R5cGUuZHJhaW4gPSBmdW5jdGlvbiAodGltZW91dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFN5bmNQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICB2YXIgY2FwdHVyZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRpbWVvdXQgJiYgdGltZW91dCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICAgICAgICBTeW5jUHJvbWlzZS5hbGwoX3RoaXMuX2J1ZmZlcilcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGNhcHR1cmVkU2V0VGltZW91dCk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4obnVsbCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gUHJvbWlzZUJ1ZmZlcjtcbn0oKSk7XG5leHBvcnQgeyBQcm9taXNlQnVmZmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9taXNlYnVmZmVyLmpzLm1hcCIsImltcG9ydCB7IF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBBUEkgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgU3RhdHVzLCB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuaW1wb3J0IHsgbG9nZ2VyLCBwYXJzZVJldHJ5QWZ0ZXJIZWFkZXIsIFByb21pc2VCdWZmZXIsIFNlbnRyeUVycm9yIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG4vKiogQmFzZSBUcmFuc3BvcnQgY2xhc3MgaW1wbGVtZW50YXRpb24gKi9cbnZhciBCYXNlVHJhbnNwb3J0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJhc2VUcmFuc3BvcnQob3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICAvKiogQSBzaW1wbGUgYnVmZmVyIGhvbGRpbmcgYWxsIHJlcXVlc3RzLiAqL1xuICAgICAgICB0aGlzLl9idWZmZXIgPSBuZXcgUHJvbWlzZUJ1ZmZlcigzMCk7XG4gICAgICAgIC8qKiBMb2NrcyB0cmFuc3BvcnQgYWZ0ZXIgcmVjZWl2aW5nIHJhdGUgbGltaXRzIGluIGEgcmVzcG9uc2UgKi9cbiAgICAgICAgdGhpcy5fcmF0ZUxpbWl0cyA9IHt9O1xuICAgICAgICB0aGlzLl9hcGkgPSBuZXcgQVBJKHRoaXMub3B0aW9ucy5kc24pO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgdGhpcy51cmwgPSB0aGlzLl9hcGkuZ2V0U3RvcmVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJhc2VUcmFuc3BvcnQucHJvdG90eXBlLnNlbmRFdmVudCA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICAgIHRocm93IG5ldyBTZW50cnlFcnJvcignVHJhbnNwb3J0IENsYXNzIGhhcyB0byBpbXBsZW1lbnQgYHNlbmRFdmVudGAgbWV0aG9kJyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJhc2VUcmFuc3BvcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKHRpbWVvdXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J1ZmZlci5kcmFpbih0aW1lb3V0KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEhhbmRsZSBTZW50cnkgcmVwc29uc2UgZm9yIHByb21pc2UtYmFzZWQgdHJhbnNwb3J0cy5cbiAgICAgKi9cbiAgICBCYXNlVHJhbnNwb3J0LnByb3RvdHlwZS5faGFuZGxlUmVzcG9uc2UgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIHJlcXVlc3RUeXBlID0gX2EucmVxdWVzdFR5cGUsIHJlc3BvbnNlID0gX2EucmVzcG9uc2UsIGhlYWRlcnMgPSBfYS5oZWFkZXJzLCByZXNvbHZlID0gX2EucmVzb2x2ZSwgcmVqZWN0ID0gX2EucmVqZWN0O1xuICAgICAgICB2YXIgc3RhdHVzID0gU3RhdHVzLmZyb21IdHRwQ29kZShyZXNwb25zZS5zdGF0dXMpO1xuICAgICAgICAvKipcbiAgICAgICAgICogXCJUaGUgbmFtZSBpcyBjYXNlLWluc2Vuc2l0aXZlLlwiXG4gICAgICAgICAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IZWFkZXJzL2dldFxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGxpbWl0ZWQgPSB0aGlzLl9oYW5kbGVSYXRlTGltaXQoaGVhZGVycyk7XG4gICAgICAgIGlmIChsaW1pdGVkKVxuICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJUb28gbWFueSByZXF1ZXN0cywgYmFja2luZyBvZmYgdGlsbDogXCIgKyB0aGlzLl9kaXNhYmxlZFVudGlsKHJlcXVlc3RUeXBlKSk7XG4gICAgICAgIGlmIChzdGF0dXMgPT09IFN0YXR1cy5TdWNjZXNzKSB7XG4gICAgICAgICAgICByZXNvbHZlKHsgc3RhdHVzOiBzdGF0dXMgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHRpbWUgdGhhdCBnaXZlbiBjYXRlZ29yeSBpcyBkaXNhYmxlZCB1bnRpbCBmb3IgcmF0ZSBsaW1pdGluZ1xuICAgICAqL1xuICAgIEJhc2VUcmFuc3BvcnQucHJvdG90eXBlLl9kaXNhYmxlZFVudGlsID0gZnVuY3Rpb24gKGNhdGVnb3J5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yYXRlTGltaXRzW2NhdGVnb3J5XSB8fCB0aGlzLl9yYXRlTGltaXRzLmFsbDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGNhdGVnb3J5IGlzIHJhdGUgbGltaXRlZFxuICAgICAqL1xuICAgIEJhc2VUcmFuc3BvcnQucHJvdG90eXBlLl9pc1JhdGVMaW1pdGVkID0gZnVuY3Rpb24gKGNhdGVnb3J5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZFVudGlsKGNhdGVnb3J5KSA+IG5ldyBEYXRlKERhdGUubm93KCkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0cyBpbnRlcm5hbCBfcmF0ZUxpbWl0cyBmcm9tIGluY29taW5nIGhlYWRlcnMuIFJldHVybnMgdHJ1ZSBpZiBoZWFkZXJzIGNvbnRhaW5zIGEgbm9uLWVtcHR5IHJhdGUgbGltaXRpbmcgaGVhZGVyLlxuICAgICAqL1xuICAgIEJhc2VUcmFuc3BvcnQucHJvdG90eXBlLl9oYW5kbGVSYXRlTGltaXQgPSBmdW5jdGlvbiAoaGVhZGVycykge1xuICAgICAgICB2YXIgZV8xLCBfYSwgZV8yLCBfYjtcbiAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIHZhciBybEhlYWRlciA9IGhlYWRlcnNbJ3gtc2VudHJ5LXJhdGUtbGltaXRzJ107XG4gICAgICAgIHZhciByYUhlYWRlciA9IGhlYWRlcnNbJ3JldHJ5LWFmdGVyJ107XG4gICAgICAgIGlmIChybEhlYWRlcikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfYyA9IF9fdmFsdWVzKHJsSGVhZGVyLnRyaW0oKS5zcGxpdCgnLCcpKSwgX2QgPSBfYy5uZXh0KCk7ICFfZC5kb25lOyBfZCA9IF9jLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGltaXQgPSBfZC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFtZXRlcnMgPSBsaW1pdC5zcGxpdCgnOicsIDIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVyRGVsYXkgPSBwYXJzZUludChwYXJhbWV0ZXJzWzBdLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWxheSA9ICghaXNOYU4oaGVhZGVyRGVsYXkpID8gaGVhZGVyRGVsYXkgOiA2MCkgKiAxMDAwOyAvLyA2MHNlYyBkZWZhdWx0XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZSA9IChlXzIgPSB2b2lkIDAsIF9fdmFsdWVzKHBhcmFtZXRlcnNbMV0uc3BsaXQoJzsnKSkpLCBfZiA9IF9lLm5leHQoKTsgIV9mLmRvbmU7IF9mID0gX2UubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhdGVnb3J5ID0gX2YudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmF0ZUxpbWl0c1tjYXRlZ29yeSB8fCAnYWxsJ10gPSBuZXcgRGF0ZShub3cgKyBkZWxheSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVfMl8xKSB7IGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07IH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZiAmJiAhX2YuZG9uZSAmJiAoX2IgPSBfZS5yZXR1cm4pKSBfYi5jYWxsKF9lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2QgJiYgIV9kLmRvbmUgJiYgKF9hID0gX2MucmV0dXJuKSkgX2EuY2FsbChfYyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHJhSGVhZGVyKSB7XG4gICAgICAgICAgICB0aGlzLl9yYXRlTGltaXRzLmFsbCA9IG5ldyBEYXRlKG5vdyArIHBhcnNlUmV0cnlBZnRlckhlYWRlcihub3csIHJhSGVhZGVyKSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICByZXR1cm4gQmFzZVRyYW5zcG9ydDtcbn0oKSk7XG5leHBvcnQgeyBCYXNlVHJhbnNwb3J0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgZXZlbnRUb1NlbnRyeVJlcXVlc3QsIHNlc3Npb25Ub1NlbnRyeVJlcXVlc3QgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgZ2V0R2xvYmFsT2JqZWN0LCBzdXBwb3J0c1JlZmVycmVyUG9saWN5LCBTeW5jUHJvbWlzZSB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgQmFzZVRyYW5zcG9ydCB9IGZyb20gJy4vYmFzZSc7XG52YXIgZ2xvYmFsID0gZ2V0R2xvYmFsT2JqZWN0KCk7XG4vKiogYGZldGNoYCBiYXNlZCB0cmFuc3BvcnQgKi9cbnZhciBGZXRjaFRyYW5zcG9ydCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRmV0Y2hUcmFuc3BvcnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRmV0Y2hUcmFuc3BvcnQoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBGZXRjaFRyYW5zcG9ydC5wcm90b3R5cGUuc2VuZEV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZW5kUmVxdWVzdChldmVudFRvU2VudHJ5UmVxdWVzdChldmVudCwgdGhpcy5fYXBpKSwgZXZlbnQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBGZXRjaFRyYW5zcG9ydC5wcm90b3R5cGUuc2VuZFNlc3Npb24gPSBmdW5jdGlvbiAoc2Vzc2lvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VuZFJlcXVlc3Qoc2Vzc2lvblRvU2VudHJ5UmVxdWVzdChzZXNzaW9uLCB0aGlzLl9hcGkpLCBzZXNzaW9uKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBzZW50cnlSZXF1ZXN0IFByZXBhcmVkIFNlbnRyeVJlcXVlc3QgdG8gYmUgZGVsaXZlcmVkXG4gICAgICogQHBhcmFtIG9yaWdpbmFsUGF5bG9hZCBPcmlnaW5hbCBwYXlsb2FkIHVzZWQgdG8gY3JlYXRlIFNlbnRyeVJlcXVlc3RcbiAgICAgKi9cbiAgICBGZXRjaFRyYW5zcG9ydC5wcm90b3R5cGUuX3NlbmRSZXF1ZXN0ID0gZnVuY3Rpb24gKHNlbnRyeVJlcXVlc3QsIG9yaWdpbmFsUGF5bG9hZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5faXNSYXRlTGltaXRlZChzZW50cnlSZXF1ZXN0LnR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3Qoe1xuICAgICAgICAgICAgICAgIGV2ZW50OiBvcmlnaW5hbFBheWxvYWQsXG4gICAgICAgICAgICAgICAgdHlwZTogc2VudHJ5UmVxdWVzdC50eXBlLFxuICAgICAgICAgICAgICAgIHJlYXNvbjogXCJUcmFuc3BvcnQgbG9ja2VkIHRpbGwgXCIgKyB0aGlzLl9kaXNhYmxlZFVudGlsKHNlbnRyeVJlcXVlc3QudHlwZSkgKyBcIiBkdWUgdG8gdG9vIG1hbnkgcmVxdWVzdHMuXCIsXG4gICAgICAgICAgICAgICAgc3RhdHVzOiA0MjksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGJvZHk6IHNlbnRyeVJlcXVlc3QuYm9keSxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgLy8gRGVzcGl0ZSBhbGwgc3RhcnMgaW4gdGhlIHNreSBzYXlpbmcgdGhhdCBFZGdlIHN1cHBvcnRzIG9sZCBkcmFmdCBzeW50YXgsIGFrYSAnbmV2ZXInLCAnYWx3YXlzJywgJ29yaWdpbicgYW5kICdkZWZhdWx0XG4gICAgICAgICAgICAvLyBodHRwczovL2Nhbml1c2UuY29tLyNmZWF0PXJlZmVycmVyLXBvbGljeVxuICAgICAgICAgICAgLy8gSXQgZG9lc24ndC4gQW5kIGl0IHRocm93IGV4Y2VwdGlvbiBpbnN0ZWFkIG9mIGlnbm9yaW5nIHRoaXMgcGFyYW1ldGVyLi4uXG4gICAgICAgICAgICAvLyBSRUY6IGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvcmF2ZW4tanMvaXNzdWVzLzEyMzNcbiAgICAgICAgICAgIHJlZmVycmVyUG9saWN5OiAoc3VwcG9ydHNSZWZlcnJlclBvbGljeSgpID8gJ29yaWdpbicgOiAnJyksXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZmV0Y2hQYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ob3B0aW9ucywgdGhpcy5vcHRpb25zLmZldGNoUGFyYW1ldGVycyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5oZWFkZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuaGVhZGVycyA9IHRoaXMub3B0aW9ucy5oZWFkZXJzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9idWZmZXIuYWRkKG5ldyBTeW5jUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBnbG9iYWxcbiAgICAgICAgICAgICAgICAuZmV0Y2goc2VudHJ5UmVxdWVzdC51cmwsIG9wdGlvbnMpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICd4LXNlbnRyeS1yYXRlLWxpbWl0cyc6IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdYLVNlbnRyeS1SYXRlLUxpbWl0cycpLFxuICAgICAgICAgICAgICAgICAgICAncmV0cnktYWZ0ZXInOiByZXNwb25zZS5oZWFkZXJzLmdldCgnUmV0cnktQWZ0ZXInKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIF90aGlzLl9oYW5kbGVSZXNwb25zZSh7IHJlcXVlc3RUeXBlOiBzZW50cnlSZXF1ZXN0LnR5cGUsIHJlc3BvbnNlOiByZXNwb25zZSwgaGVhZGVyczogaGVhZGVycywgcmVzb2x2ZTogcmVzb2x2ZSwgcmVqZWN0OiByZWplY3QgfSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaChyZWplY3QpO1xuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICByZXR1cm4gRmV0Y2hUcmFuc3BvcnQ7XG59KEJhc2VUcmFuc3BvcnQpKTtcbmV4cG9ydCB7IEZldGNoVHJhbnNwb3J0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mZXRjaC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGV2ZW50VG9TZW50cnlSZXF1ZXN0LCBzZXNzaW9uVG9TZW50cnlSZXF1ZXN0IH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IFN5bmNQcm9taXNlIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBCYXNlVHJhbnNwb3J0IH0gZnJvbSAnLi9iYXNlJztcbi8qKiBgWEhSYCBiYXNlZCB0cmFuc3BvcnQgKi9cbnZhciBYSFJUcmFuc3BvcnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFhIUlRyYW5zcG9ydCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBYSFJUcmFuc3BvcnQoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBYSFJUcmFuc3BvcnQucHJvdG90eXBlLnNlbmRFdmVudCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VuZFJlcXVlc3QoZXZlbnRUb1NlbnRyeVJlcXVlc3QoZXZlbnQsIHRoaXMuX2FwaSksIGV2ZW50KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgWEhSVHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kU2Vzc2lvbiA9IGZ1bmN0aW9uIChzZXNzaW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZW5kUmVxdWVzdChzZXNzaW9uVG9TZW50cnlSZXF1ZXN0KHNlc3Npb24sIHRoaXMuX2FwaSksIHNlc3Npb24pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHNlbnRyeVJlcXVlc3QgUHJlcGFyZWQgU2VudHJ5UmVxdWVzdCB0byBiZSBkZWxpdmVyZWRcbiAgICAgKiBAcGFyYW0gb3JpZ2luYWxQYXlsb2FkIE9yaWdpbmFsIHBheWxvYWQgdXNlZCB0byBjcmVhdGUgU2VudHJ5UmVxdWVzdFxuICAgICAqL1xuICAgIFhIUlRyYW5zcG9ydC5wcm90b3R5cGUuX3NlbmRSZXF1ZXN0ID0gZnVuY3Rpb24gKHNlbnRyeVJlcXVlc3QsIG9yaWdpbmFsUGF5bG9hZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5faXNSYXRlTGltaXRlZChzZW50cnlSZXF1ZXN0LnR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3Qoe1xuICAgICAgICAgICAgICAgIGV2ZW50OiBvcmlnaW5hbFBheWxvYWQsXG4gICAgICAgICAgICAgICAgdHlwZTogc2VudHJ5UmVxdWVzdC50eXBlLFxuICAgICAgICAgICAgICAgIHJlYXNvbjogXCJUcmFuc3BvcnQgbG9ja2VkIHRpbGwgXCIgKyB0aGlzLl9kaXNhYmxlZFVudGlsKHNlbnRyeVJlcXVlc3QudHlwZSkgKyBcIiBkdWUgdG8gdG9vIG1hbnkgcmVxdWVzdHMuXCIsXG4gICAgICAgICAgICAgICAgc3RhdHVzOiA0MjksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fYnVmZmVyLmFkZChuZXcgU3luY1Byb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAneC1zZW50cnktcmF0ZS1saW1pdHMnOiByZXF1ZXN0LmdldFJlc3BvbnNlSGVhZGVyKCdYLVNlbnRyeS1SYXRlLUxpbWl0cycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3JldHJ5LWFmdGVyJzogcmVxdWVzdC5nZXRSZXNwb25zZUhlYWRlcignUmV0cnktQWZ0ZXInKSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2hhbmRsZVJlc3BvbnNlKHsgcmVxdWVzdFR5cGU6IHNlbnRyeVJlcXVlc3QudHlwZSwgcmVzcG9uc2U6IHJlcXVlc3QsIGhlYWRlcnM6IGhlYWRlcnMsIHJlc29sdmU6IHJlc29sdmUsIHJlamVjdDogcmVqZWN0IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXF1ZXN0Lm9wZW4oJ1BPU1QnLCBzZW50cnlSZXF1ZXN0LnVybCk7XG4gICAgICAgICAgICBmb3IgKHZhciBoZWFkZXIgaW4gX3RoaXMub3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuaGVhZGVycy5oYXNPd25Qcm9wZXJ0eShoZWFkZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihoZWFkZXIsIF90aGlzLm9wdGlvbnMuaGVhZGVyc1toZWFkZXJdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXF1ZXN0LnNlbmQoc2VudHJ5UmVxdWVzdC5ib2R5KTtcbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgcmV0dXJuIFhIUlRyYW5zcG9ydDtcbn0oQmFzZVRyYW5zcG9ydCkpO1xuZXhwb3J0IHsgWEhSVHJhbnNwb3J0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD14aHIuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQmFzZUJhY2tlbmQgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgU2V2ZXJpdHkgfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IHN1cHBvcnRzRmV0Y2ggfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IGV2ZW50RnJvbUV4Y2VwdGlvbiwgZXZlbnRGcm9tTWVzc2FnZSB9IGZyb20gJy4vZXZlbnRidWlsZGVyJztcbmltcG9ydCB7IEZldGNoVHJhbnNwb3J0LCBYSFJUcmFuc3BvcnQgfSBmcm9tICcuL3RyYW5zcG9ydHMnO1xuLyoqXG4gKiBUaGUgU2VudHJ5IEJyb3dzZXIgU0RLIEJhY2tlbmQuXG4gKiBAaGlkZGVuXG4gKi9cbnZhciBCcm93c2VyQmFja2VuZCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQnJvd3NlckJhY2tlbmQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQnJvd3NlckJhY2tlbmQoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCcm93c2VyQmFja2VuZC5wcm90b3R5cGUuZXZlbnRGcm9tRXhjZXB0aW9uID0gZnVuY3Rpb24gKGV4Y2VwdGlvbiwgaGludCkge1xuICAgICAgICByZXR1cm4gZXZlbnRGcm9tRXhjZXB0aW9uKHRoaXMuX29wdGlvbnMsIGV4Y2VwdGlvbiwgaGludCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJyb3dzZXJCYWNrZW5kLnByb3RvdHlwZS5ldmVudEZyb21NZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UsIGxldmVsLCBoaW50KSB7XG4gICAgICAgIGlmIChsZXZlbCA9PT0gdm9pZCAwKSB7IGxldmVsID0gU2V2ZXJpdHkuSW5mbzsgfVxuICAgICAgICByZXR1cm4gZXZlbnRGcm9tTWVzc2FnZSh0aGlzLl9vcHRpb25zLCBtZXNzYWdlLCBsZXZlbCwgaGludCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJyb3dzZXJCYWNrZW5kLnByb3RvdHlwZS5fc2V0dXBUcmFuc3BvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5fb3B0aW9ucy5kc24pIHtcbiAgICAgICAgICAgIC8vIFdlIHJldHVybiB0aGUgbm9vcCB0cmFuc3BvcnQgaGVyZSBpbiBjYXNlIHRoZXJlIGlzIG5vIERzbi5cbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLl9zZXR1cFRyYW5zcG9ydC5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0cmFuc3BvcnRPcHRpb25zID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuX29wdGlvbnMudHJhbnNwb3J0T3B0aW9ucyksIHsgZHNuOiB0aGlzLl9vcHRpb25zLmRzbiB9KTtcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudHJhbnNwb3J0KSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IHRoaXMuX29wdGlvbnMudHJhbnNwb3J0KHRyYW5zcG9ydE9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdXBwb3J0c0ZldGNoKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmV0Y2hUcmFuc3BvcnQodHJhbnNwb3J0T3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBYSFJUcmFuc3BvcnQodHJhbnNwb3J0T3B0aW9ucyk7XG4gICAgfTtcbiAgICByZXR1cm4gQnJvd3NlckJhY2tlbmQ7XG59KEJhc2VCYWNrZW5kKSk7XG5leHBvcnQgeyBCcm93c2VyQmFja2VuZCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFja2VuZC5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19yZWFkLCBfX3NwcmVhZCB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgZ2V0Q3VycmVudEh1YiB9IGZyb20gJ0BzZW50cnkvaHViJztcbi8qKlxuICogVGhpcyBjYWxscyBhIGZ1bmN0aW9uIG9uIHRoZSBjdXJyZW50IGh1Yi5cbiAqIEBwYXJhbSBtZXRob2QgZnVuY3Rpb24gdG8gY2FsbCBvbiBodWIuXG4gKiBAcGFyYW0gYXJncyB0byBwYXNzIHRvIGZ1bmN0aW9uLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gY2FsbE9uSHViKG1ldGhvZCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIGh1YiA9IGdldEN1cnJlbnRIdWIoKTtcbiAgICBpZiAoaHViICYmIGh1YlttZXRob2RdKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHJldHVybiBodWJbbWV0aG9kXS5hcHBseShodWIsIF9fc3ByZWFkKGFyZ3MpKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gaHViIGRlZmluZWQgb3IgXCIgKyBtZXRob2QgKyBcIiB3YXMgbm90IGZvdW5kIG9uIHRoZSBodWIsIHBsZWFzZSBvcGVuIGEgYnVnIHJlcG9ydC5cIik7XG59XG4vKipcbiAqIENhcHR1cmVzIGFuIGV4Y2VwdGlvbiBldmVudCBhbmQgc2VuZHMgaXQgdG8gU2VudHJ5LlxuICpcbiAqIEBwYXJhbSBleGNlcHRpb24gQW4gZXhjZXB0aW9uLWxpa2Ugb2JqZWN0LlxuICogQHJldHVybnMgVGhlIGdlbmVyYXRlZCBldmVudElkLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlc1xuZXhwb3J0IGZ1bmN0aW9uIGNhcHR1cmVFeGNlcHRpb24oZXhjZXB0aW9uLCBjYXB0dXJlQ29udGV4dCkge1xuICAgIHZhciBzeW50aGV0aWNFeGNlcHRpb247XG4gICAgdHJ5IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZW50cnkgc3ludGhldGljRXhjZXB0aW9uJyk7XG4gICAgfVxuICAgIGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgc3ludGhldGljRXhjZXB0aW9uID0gZXhjZXB0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gY2FsbE9uSHViKCdjYXB0dXJlRXhjZXB0aW9uJywgZXhjZXB0aW9uLCB7XG4gICAgICAgIGNhcHR1cmVDb250ZXh0OiBjYXB0dXJlQ29udGV4dCxcbiAgICAgICAgb3JpZ2luYWxFeGNlcHRpb246IGV4Y2VwdGlvbixcbiAgICAgICAgc3ludGhldGljRXhjZXB0aW9uOiBzeW50aGV0aWNFeGNlcHRpb24sXG4gICAgfSk7XG59XG4vKipcbiAqIENhcHR1cmVzIGEgbWVzc2FnZSBldmVudCBhbmQgc2VuZHMgaXQgdG8gU2VudHJ5LlxuICpcbiAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIHNlbmQgdG8gU2VudHJ5LlxuICogQHBhcmFtIGxldmVsIERlZmluZSB0aGUgbGV2ZWwgb2YgdGhlIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyBUaGUgZ2VuZXJhdGVkIGV2ZW50SWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYXB0dXJlTWVzc2FnZShtZXNzYWdlLCBjYXB0dXJlQ29udGV4dCkge1xuICAgIHZhciBzeW50aGV0aWNFeGNlcHRpb247XG4gICAgdHJ5IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbiAgICBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgIHN5bnRoZXRpY0V4Y2VwdGlvbiA9IGV4Y2VwdGlvbjtcbiAgICB9XG4gICAgLy8gVGhpcyBpcyBuZWNlc3NhcnkgdG8gcHJvdmlkZSBleHBsaWNpdCBzY29wZXMgdXBncmFkZSwgd2l0aG91dCBjaGFuZ2luZyB0aGUgb3JpZ2luYWxcbiAgICAvLyBhcml0eSBvZiB0aGUgYGNhcHR1cmVNZXNzYWdlKG1lc3NhZ2UsIGxldmVsKWAgbWV0aG9kLlxuICAgIHZhciBsZXZlbCA9IHR5cGVvZiBjYXB0dXJlQ29udGV4dCA9PT0gJ3N0cmluZycgPyBjYXB0dXJlQ29udGV4dCA6IHVuZGVmaW5lZDtcbiAgICB2YXIgY29udGV4dCA9IHR5cGVvZiBjYXB0dXJlQ29udGV4dCAhPT0gJ3N0cmluZycgPyB7IGNhcHR1cmVDb250ZXh0OiBjYXB0dXJlQ29udGV4dCB9IDogdW5kZWZpbmVkO1xuICAgIHJldHVybiBjYWxsT25IdWIoJ2NhcHR1cmVNZXNzYWdlJywgbWVzc2FnZSwgbGV2ZWwsIF9fYXNzaWduKHsgb3JpZ2luYWxFeGNlcHRpb246IG1lc3NhZ2UsIHN5bnRoZXRpY0V4Y2VwdGlvbjogc3ludGhldGljRXhjZXB0aW9uIH0sIGNvbnRleHQpKTtcbn1cbi8qKlxuICogQ2FwdHVyZXMgYSBtYW51YWxseSBjcmVhdGVkIGV2ZW50IGFuZCBzZW5kcyBpdCB0byBTZW50cnkuXG4gKlxuICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCB0byBzZW5kIHRvIFNlbnRyeS5cbiAqIEByZXR1cm5zIFRoZSBnZW5lcmF0ZWQgZXZlbnRJZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhcHR1cmVFdmVudChldmVudCkge1xuICAgIHJldHVybiBjYWxsT25IdWIoJ2NhcHR1cmVFdmVudCcsIGV2ZW50KTtcbn1cbi8qKlxuICogQ2FsbGJhY2sgdG8gc2V0IGNvbnRleHQgaW5mb3JtYXRpb24gb250byB0aGUgc2NvcGUuXG4gKiBAcGFyYW0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24gdGhhdCByZWNlaXZlcyBTY29wZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ3VyZVNjb3BlKGNhbGxiYWNrKSB7XG4gICAgY2FsbE9uSHViKCdjb25maWd1cmVTY29wZScsIGNhbGxiYWNrKTtcbn1cbi8qKlxuICogUmVjb3JkcyBhIG5ldyBicmVhZGNydW1iIHdoaWNoIHdpbGwgYmUgYXR0YWNoZWQgdG8gZnV0dXJlIGV2ZW50cy5cbiAqXG4gKiBCcmVhZGNydW1icyB3aWxsIGJlIGFkZGVkIHRvIHN1YnNlcXVlbnQgZXZlbnRzIHRvIHByb3ZpZGUgbW9yZSBjb250ZXh0IG9uXG4gKiB1c2VyJ3MgYWN0aW9ucyBwcmlvciB0byBhbiBlcnJvciBvciBjcmFzaC5cbiAqXG4gKiBAcGFyYW0gYnJlYWRjcnVtYiBUaGUgYnJlYWRjcnVtYiB0byByZWNvcmQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRCcmVhZGNydW1iKGJyZWFkY3J1bWIpIHtcbiAgICBjYWxsT25IdWIoJ2FkZEJyZWFkY3J1bWInLCBicmVhZGNydW1iKTtcbn1cbi8qKlxuICogU2V0cyBjb250ZXh0IGRhdGEgd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cbiAqIEBwYXJhbSBuYW1lIG9mIHRoZSBjb250ZXh0XG4gKiBAcGFyYW0gY29udGV4dCBBbnkga2luZCBvZiBkYXRhLiBUaGlzIGRhdGEgd2lsbCBiZSBub3JtYWxpemVkLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGZ1bmN0aW9uIHNldENvbnRleHQobmFtZSwgY29udGV4dCkge1xuICAgIGNhbGxPbkh1Yignc2V0Q29udGV4dCcsIG5hbWUsIGNvbnRleHQpO1xufVxuLyoqXG4gKiBTZXQgYW4gb2JqZWN0IHRoYXQgd2lsbCBiZSBtZXJnZWQgc2VudCBhcyBleHRyYSBkYXRhIHdpdGggdGhlIGV2ZW50LlxuICogQHBhcmFtIGV4dHJhcyBFeHRyYXMgb2JqZWN0IHRvIG1lcmdlIGludG8gY3VycmVudCBjb250ZXh0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0RXh0cmFzKGV4dHJhcykge1xuICAgIGNhbGxPbkh1Yignc2V0RXh0cmFzJywgZXh0cmFzKTtcbn1cbi8qKlxuICogU2V0IGFuIG9iamVjdCB0aGF0IHdpbGwgYmUgbWVyZ2VkIHNlbnQgYXMgdGFncyBkYXRhIHdpdGggdGhlIGV2ZW50LlxuICogQHBhcmFtIHRhZ3MgVGFncyBjb250ZXh0IG9iamVjdCB0byBtZXJnZSBpbnRvIGN1cnJlbnQgY29udGV4dC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFRhZ3ModGFncykge1xuICAgIGNhbGxPbkh1Yignc2V0VGFncycsIHRhZ3MpO1xufVxuLyoqXG4gKiBTZXQga2V5OnZhbHVlIHRoYXQgd2lsbCBiZSBzZW50IGFzIGV4dHJhIGRhdGEgd2l0aCB0aGUgZXZlbnQuXG4gKiBAcGFyYW0ga2V5IFN0cmluZyBvZiBleHRyYVxuICogQHBhcmFtIGV4dHJhIEFueSBraW5kIG9mIGRhdGEuIFRoaXMgZGF0YSB3aWxsIGJlIG5vcm1hbGl6ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRFeHRyYShrZXksIGV4dHJhKSB7XG4gICAgY2FsbE9uSHViKCdzZXRFeHRyYScsIGtleSwgZXh0cmEpO1xufVxuLyoqXG4gKiBTZXQga2V5OnZhbHVlIHRoYXQgd2lsbCBiZSBzZW50IGFzIHRhZ3MgZGF0YSB3aXRoIHRoZSBldmVudC5cbiAqIEBwYXJhbSBrZXkgU3RyaW5nIGtleSBvZiB0YWdcbiAqIEBwYXJhbSB2YWx1ZSBTdHJpbmcgdmFsdWUgb2YgdGFnXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRUYWcoa2V5LCB2YWx1ZSkge1xuICAgIGNhbGxPbkh1Yignc2V0VGFnJywga2V5LCB2YWx1ZSk7XG59XG4vKipcbiAqIFVwZGF0ZXMgdXNlciBjb250ZXh0IGluZm9ybWF0aW9uIGZvciBmdXR1cmUgZXZlbnRzLlxuICpcbiAqIEBwYXJhbSB1c2VyIFVzZXIgY29udGV4dCBvYmplY3QgdG8gYmUgc2V0IGluIHRoZSBjdXJyZW50IGNvbnRleHQuIFBhc3MgYG51bGxgIHRvIHVuc2V0IHRoZSB1c2VyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0VXNlcih1c2VyKSB7XG4gICAgY2FsbE9uSHViKCdzZXRVc2VyJywgdXNlcik7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgc2NvcGUgd2l0aCBhbmQgZXhlY3V0ZXMgdGhlIGdpdmVuIG9wZXJhdGlvbiB3aXRoaW4uXG4gKiBUaGUgc2NvcGUgaXMgYXV0b21hdGljYWxseSByZW1vdmVkIG9uY2UgdGhlIG9wZXJhdGlvblxuICogZmluaXNoZXMgb3IgdGhyb3dzLlxuICpcbiAqIFRoaXMgaXMgZXNzZW50aWFsbHkgYSBjb252ZW5pZW5jZSBmdW5jdGlvbiBmb3I6XG4gKlxuICogICAgIHB1c2hTY29wZSgpO1xuICogICAgIGNhbGxiYWNrKCk7XG4gKiAgICAgcG9wU2NvcGUoKTtcbiAqXG4gKiBAcGFyYW0gY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGVuY2xvc2VkIGludG8gcHVzaC9wb3BTY29wZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdpdGhTY29wZShjYWxsYmFjaykge1xuICAgIGNhbGxPbkh1Yignd2l0aFNjb3BlJywgY2FsbGJhY2spO1xufVxuLyoqXG4gKiBDYWxscyBhIGZ1bmN0aW9uIG9uIHRoZSBsYXRlc3QgY2xpZW50LiBVc2UgdGhpcyB3aXRoIGNhdXRpb24sIGl0J3MgbWVhbnQgYXNcbiAqIGluIFwiaW50ZXJuYWxcIiBoZWxwZXIgc28gd2UgZG9uJ3QgbmVlZCB0byBleHBvc2UgZXZlcnkgcG9zc2libGUgZnVuY3Rpb24gaW5cbiAqIHRoZSBzaGltLiBJdCBpcyBub3QgZ3VhcmFudGVlZCB0aGF0IHRoZSBjbGllbnQgYWN0dWFsbHkgaW1wbGVtZW50cyB0aGVcbiAqIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSBtZXRob2QgVGhlIG1ldGhvZCB0byBjYWxsIG9uIHRoZSBjbGllbnQvY2xpZW50LlxuICogQHBhcmFtIGFyZ3MgQXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlIGNsaWVudC9mb250ZW5kLlxuICogQGhpZGRlblxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGZ1bmN0aW9uIF9jYWxsT25DbGllbnQobWV0aG9kKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICBjYWxsT25IdWIuYXBwbHkodm9pZCAwLCBfX3NwcmVhZChbJ19pbnZva2VDbGllbnQnLCBtZXRob2RdLCBhcmdzKSk7XG59XG4vKipcbiAqIFN0YXJ0cyBhIG5ldyBgVHJhbnNhY3Rpb25gIGFuZCByZXR1cm5zIGl0LiBUaGlzIGlzIHRoZSBlbnRyeSBwb2ludCB0byBtYW51YWwgdHJhY2luZyBpbnN0cnVtZW50YXRpb24uXG4gKlxuICogQSB0cmVlIHN0cnVjdHVyZSBjYW4gYmUgYnVpbHQgYnkgYWRkaW5nIGNoaWxkIHNwYW5zIHRvIHRoZSB0cmFuc2FjdGlvbiwgYW5kIGNoaWxkIHNwYW5zIHRvIG90aGVyIHNwYW5zLiBUbyBzdGFydCBhXG4gKiBuZXcgY2hpbGQgc3BhbiB3aXRoaW4gdGhlIHRyYW5zYWN0aW9uIG9yIGFueSBzcGFuLCBjYWxsIHRoZSByZXNwZWN0aXZlIGAuc3RhcnRDaGlsZCgpYCBtZXRob2QuXG4gKlxuICogRXZlcnkgY2hpbGQgc3BhbiBtdXN0IGJlIGZpbmlzaGVkIGJlZm9yZSB0aGUgdHJhbnNhY3Rpb24gaXMgZmluaXNoZWQsIG90aGVyd2lzZSB0aGUgdW5maW5pc2hlZCBzcGFucyBhcmUgZGlzY2FyZGVkLlxuICpcbiAqIFRoZSB0cmFuc2FjdGlvbiBtdXN0IGJlIGZpbmlzaGVkIHdpdGggYSBjYWxsIHRvIGl0cyBgLmZpbmlzaCgpYCBtZXRob2QsIGF0IHdoaWNoIHBvaW50IHRoZSB0cmFuc2FjdGlvbiB3aXRoIGFsbCBpdHNcbiAqIGZpbmlzaGVkIGNoaWxkIHNwYW5zIHdpbGwgYmUgc2VudCB0byBTZW50cnkuXG4gKlxuICogQHBhcmFtIGNvbnRleHQgUHJvcGVydGllcyBvZiB0aGUgbmV3IGBUcmFuc2FjdGlvbmAuXG4gKiBAcGFyYW0gY3VzdG9tU2FtcGxpbmdDb250ZXh0IEluZm9ybWF0aW9uIGdpdmVuIHRvIHRoZSB0cmFuc2FjdGlvbiBzYW1wbGluZyBmdW5jdGlvbiAoYWxvbmcgd2l0aCBjb250ZXh0LWRlcGVuZGVudFxuICogZGVmYXVsdCB2YWx1ZXMpLiBTZWUge0BsaW5rIE9wdGlvbnMudHJhY2VzU2FtcGxlcn0uXG4gKlxuICogQHJldHVybnMgVGhlIHRyYW5zYWN0aW9uIHdoaWNoIHdhcyBqdXN0IHN0YXJ0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0VHJhbnNhY3Rpb24oY29udGV4dCwgY3VzdG9tU2FtcGxpbmdDb250ZXh0KSB7XG4gICAgcmV0dXJuIGNhbGxPbkh1Yignc3RhcnRUcmFuc2FjdGlvbicsIF9fYXNzaWduKHt9LCBjb250ZXh0KSwgY3VzdG9tU2FtcGxpbmdDb250ZXh0KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBBUEksIGNhcHR1cmVFeGNlcHRpb24sIHdpdGhTY29wZSB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBhZGRFeGNlcHRpb25NZWNoYW5pc20sIGFkZEV4Y2VwdGlvblR5cGVWYWx1ZSwgbG9nZ2VyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG52YXIgaWdub3JlT25FcnJvciA9IDA7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZElnbm9yZU9uRXJyb3IoKSB7XG4gICAgcmV0dXJuIGlnbm9yZU9uRXJyb3IgPiAwO1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpZ25vcmVOZXh0T25FcnJvcigpIHtcbiAgICAvLyBvbmVycm9yIHNob3VsZCB0cmlnZ2VyIGJlZm9yZSBzZXRUaW1lb3V0XG4gICAgaWdub3JlT25FcnJvciArPSAxO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZ25vcmVPbkVycm9yIC09IDE7XG4gICAgfSk7XG59XG4vKipcbiAqIEluc3RydW1lbnRzIHRoZSBnaXZlbiBmdW5jdGlvbiBhbmQgc2VuZHMgYW4gZXZlbnQgdG8gU2VudHJ5IGV2ZXJ5IHRpbWUgdGhlXG4gKiBmdW5jdGlvbiB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuICpcbiAqIEBwYXJhbSBmbiBBIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcmV0dXJucyBUaGUgd3JhcHBlZCBmdW5jdGlvbi5cbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdyYXAoZm4sIG9wdGlvbnMsIGJlZm9yZSkge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gZm47XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIFdlIGRvbid0IHdhbm5hIHdyYXAgaXQgdHdpY2VcbiAgICAgICAgaWYgKGZuLl9fc2VudHJ5X18pIHtcbiAgICAgICAgICAgIHJldHVybiBmbjtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGlzIGhhcyBhbHJlYWR5IGJlZW4gd3JhcHBlZCBpbiB0aGUgcGFzdCwgcmV0dXJuIHRoYXQgd3JhcHBlZCBmdW5jdGlvblxuICAgICAgICBpZiAoZm4uX19zZW50cnlfd3JhcHBlZF9fKSB7XG4gICAgICAgICAgICByZXR1cm4gZm4uX19zZW50cnlfd3JhcHBlZF9fO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEp1c3QgYWNjZXNzaW5nIGN1c3RvbSBwcm9wcyBpbiBzb21lIFNlbGVuaXVtIGVudmlyb25tZW50c1xuICAgICAgICAvLyBjYW4gY2F1c2UgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXhjZXB0aW9uIChzZWUgcmF2ZW4tanMjNDk1KS5cbiAgICAgICAgLy8gQmFpbCBvbiB3cmFwcGluZyBhbmQgcmV0dXJuIHRoZSBmdW5jdGlvbiBhcy1pcyAoZGVmZXJzIHRvIHdpbmRvdy5vbmVycm9yKS5cbiAgICAgICAgcmV0dXJuIGZuO1xuICAgIH1cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItcmVzdC1wYXJhbXMgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIHZhciBzZW50cnlXcmFwcGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoYmVmb3JlICYmIHR5cGVvZiBiZWZvcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBiZWZvcmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgICAgIHZhciB3cmFwcGVkQXJndW1lbnRzID0gYXJncy5tYXAoZnVuY3Rpb24gKGFyZykgeyByZXR1cm4gd3JhcChhcmcsIG9wdGlvbnMpOyB9KTtcbiAgICAgICAgICAgIGlmIChmbi5oYW5kbGVFdmVudCkge1xuICAgICAgICAgICAgICAgIC8vIEF0dGVtcHQgdG8gaW52b2tlIHVzZXItbGFuZCBmdW5jdGlvblxuICAgICAgICAgICAgICAgIC8vIE5PVEU6IElmIHlvdSBhcmUgYSBTZW50cnkgdXNlciwgYW5kIHlvdSBhcmUgc2VlaW5nIHRoaXMgc3RhY2sgZnJhbWUsIGl0XG4gICAgICAgICAgICAgICAgLy8gICAgICAgbWVhbnMgdGhlIHNlbnRyeS5qYXZhc2NyaXB0IFNESyBjYXVnaHQgYW4gZXJyb3IgaW52b2tpbmcgeW91ciBhcHBsaWNhdGlvbiBjb2RlLiBUaGlzXG4gICAgICAgICAgICAgICAgLy8gICAgICAgaXMgZXhwZWN0ZWQgYmVoYXZpb3IgYW5kIE5PVCBpbmRpY2F0aXZlIG9mIGEgYnVnIHdpdGggc2VudHJ5LmphdmFzY3JpcHQuXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICAgICAgICAgIHJldHVybiBmbi5oYW5kbGVFdmVudC5hcHBseSh0aGlzLCB3cmFwcGVkQXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEF0dGVtcHQgdG8gaW52b2tlIHVzZXItbGFuZCBmdW5jdGlvblxuICAgICAgICAgICAgLy8gTk9URTogSWYgeW91IGFyZSBhIFNlbnRyeSB1c2VyLCBhbmQgeW91IGFyZSBzZWVpbmcgdGhpcyBzdGFjayBmcmFtZSwgaXRcbiAgICAgICAgICAgIC8vICAgICAgIG1lYW5zIHRoZSBzZW50cnkuamF2YXNjcmlwdCBTREsgY2F1Z2h0IGFuIGVycm9yIGludm9raW5nIHlvdXIgYXBwbGljYXRpb24gY29kZS4gVGhpc1xuICAgICAgICAgICAgLy8gICAgICAgaXMgZXhwZWN0ZWQgYmVoYXZpb3IgYW5kIE5PVCBpbmRpY2F0aXZlIG9mIGEgYnVnIHdpdGggc2VudHJ5LmphdmFzY3JpcHQuXG4gICAgICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgd3JhcHBlZEFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICBpZ25vcmVOZXh0T25FcnJvcigpO1xuICAgICAgICAgICAgd2l0aFNjb3BlKGZ1bmN0aW9uIChzY29wZSkge1xuICAgICAgICAgICAgICAgIHNjb3BlLmFkZEV2ZW50UHJvY2Vzc29yKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvY2Vzc2VkRXZlbnQgPSBfX2Fzc2lnbih7fSwgZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5tZWNoYW5pc20pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEV4Y2VwdGlvblR5cGVWYWx1ZShwcm9jZXNzZWRFdmVudCwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkRXhjZXB0aW9uTWVjaGFuaXNtKHByb2Nlc3NlZEV2ZW50LCBvcHRpb25zLm1lY2hhbmlzbSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc2VkRXZlbnQuZXh0cmEgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcHJvY2Vzc2VkRXZlbnQuZXh0cmEpLCB7IGFyZ3VtZW50czogYXJncyB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NlZEV2ZW50O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNhcHR1cmVFeGNlcHRpb24oZXgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aHJvdyBleDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyogZXNsaW50LWVuYWJsZSBwcmVmZXItcmVzdC1wYXJhbXMgKi9cbiAgICAvLyBBY2Nlc3Npbmcgc29tZSBvYmplY3RzIG1heSB0aHJvd1xuICAgIC8vIHJlZjogaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvMTE2OFxuICAgIHRyeSB7XG4gICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIGZuKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGZuLCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICBzZW50cnlXcmFwcGVkW3Byb3BlcnR5XSA9IGZuW3Byb3BlcnR5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoX29PKSB7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgIGZuLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZSB8fCB7fTtcbiAgICBzZW50cnlXcmFwcGVkLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICdfX3NlbnRyeV93cmFwcGVkX18nLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogc2VudHJ5V3JhcHBlZCxcbiAgICB9KTtcbiAgICAvLyBTaWduYWwgdGhhdCB0aGlzIGZ1bmN0aW9uIGhhcyBiZWVuIHdyYXBwZWQvZmlsbGVkIGFscmVhZHlcbiAgICAvLyBmb3IgYm90aCBkZWJ1Z2dpbmcgYW5kIHRvIHByZXZlbnQgaXQgdG8gYmVpbmcgd3JhcHBlZC9maWxsZWQgdHdpY2VcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzZW50cnlXcmFwcGVkLCB7XG4gICAgICAgIF9fc2VudHJ5X186IHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIF9fc2VudHJ5X29yaWdpbmFsX186IHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IGZuLFxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIC8vIFJlc3RvcmUgb3JpZ2luYWwgZnVuY3Rpb24gbmFtZSAobm90IGFsbCBicm93c2VycyBhbGxvdyB0aGF0KVxuICAgIHRyeSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzZW50cnlXcmFwcGVkLCAnbmFtZScpO1xuICAgICAgICBpZiAoZGVzY3JpcHRvci5jb25maWd1cmFibGUpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZW50cnlXcmFwcGVkLCAnbmFtZScsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZuLm5hbWU7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH1cbiAgICBjYXRjaCAoX29PKSB7IH1cbiAgICByZXR1cm4gc2VudHJ5V3JhcHBlZDtcbn1cbi8qKlxuICogSW5qZWN0cyB0aGUgUmVwb3J0IERpYWxvZyBzY3JpcHRcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluamVjdFJlcG9ydERpYWxvZyhvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICBpZiAoIW9wdGlvbnMuZXZlbnRJZCkge1xuICAgICAgICBsb2dnZXIuZXJyb3IoXCJNaXNzaW5nIGV2ZW50SWQgb3B0aW9uIGluIHNob3dSZXBvcnREaWFsb2cgY2FsbFwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIW9wdGlvbnMuZHNuKSB7XG4gICAgICAgIGxvZ2dlci5lcnJvcihcIk1pc3NpbmcgZHNuIG9wdGlvbiBpbiBzaG93UmVwb3J0RGlhbG9nIGNhbGxcIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gICAgc2NyaXB0LnNyYyA9IG5ldyBBUEkob3B0aW9ucy5kc24pLmdldFJlcG9ydERpYWxvZ0VuZHBvaW50KG9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLm9uTG9hZCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gICAgICAgIHNjcmlwdC5vbmxvYWQgPSBvcHRpb25zLm9uTG9hZDtcbiAgICB9XG4gICAgKGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuYm9keSkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlcnMuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0luc3RhbmNlT2YsIGlzU3RyaW5nIH0gZnJvbSAnLi9pcyc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyBnZXRHbG9iYWxPYmplY3QgfSBmcm9tICcuL21pc2MnO1xuaW1wb3J0IHsgZmlsbCB9IGZyb20gJy4vb2JqZWN0JztcbmltcG9ydCB7IGdldEZ1bmN0aW9uTmFtZSB9IGZyb20gJy4vc3RhY2t0cmFjZSc7XG5pbXBvcnQgeyBzdXBwb3J0c0hpc3RvcnksIHN1cHBvcnRzTmF0aXZlRmV0Y2ggfSBmcm9tICcuL3N1cHBvcnRzJztcbnZhciBnbG9iYWwgPSBnZXRHbG9iYWxPYmplY3QoKTtcbi8qKlxuICogSW5zdHJ1bWVudCBuYXRpdmUgQVBJcyB0byBjYWxsIGhhbmRsZXJzIHRoYXQgY2FuIGJlIHVzZWQgdG8gY3JlYXRlIGJyZWFkY3J1bWJzLCBBUE0gc3BhbnMgZXRjLlxuICogIC0gQ29uc29sZSBBUElcbiAqICAtIEZldGNoIEFQSVxuICogIC0gWEhSIEFQSVxuICogIC0gSGlzdG9yeSBBUElcbiAqICAtIERPTSBBUEkgKGNsaWNrL3R5cGluZylcbiAqICAtIEVycm9yIEFQSVxuICogIC0gVW5oYW5kbGVkUmVqZWN0aW9uIEFQSVxuICovXG52YXIgaGFuZGxlcnMgPSB7fTtcbnZhciBpbnN0cnVtZW50ZWQgPSB7fTtcbi8qKiBJbnN0cnVtZW50cyBnaXZlbiBBUEkgKi9cbmZ1bmN0aW9uIGluc3RydW1lbnQodHlwZSkge1xuICAgIGlmIChpbnN0cnVtZW50ZWRbdHlwZV0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnN0cnVtZW50ZWRbdHlwZV0gPSB0cnVlO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdjb25zb2xlJzpcbiAgICAgICAgICAgIGluc3RydW1lbnRDb25zb2xlKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZG9tJzpcbiAgICAgICAgICAgIGluc3RydW1lbnRET00oKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd4aHInOlxuICAgICAgICAgICAgaW5zdHJ1bWVudFhIUigpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2ZldGNoJzpcbiAgICAgICAgICAgIGluc3RydW1lbnRGZXRjaCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2hpc3RvcnknOlxuICAgICAgICAgICAgaW5zdHJ1bWVudEhpc3RvcnkoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgICAgICBpbnN0cnVtZW50RXJyb3IoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd1bmhhbmRsZWRyZWplY3Rpb24nOlxuICAgICAgICAgICAgaW5zdHJ1bWVudFVuaGFuZGxlZFJlamVjdGlvbigpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBsb2dnZXIud2FybigndW5rbm93biBpbnN0cnVtZW50YXRpb24gdHlwZTonLCB0eXBlKTtcbiAgICB9XG59XG4vKipcbiAqIEFkZCBoYW5kbGVyIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbiBnaXZlbiB0eXBlIG9mIGluc3RydW1lbnRhdGlvbiB0cmlnZ2Vycy5cbiAqIFVzZSBhdCB5b3VyIG93biByaXNrLCB0aGlzIG1pZ2h0IGJyZWFrIHdpdGhvdXQgY2hhbmdlbG9nIG5vdGljZSwgb25seSB1c2VkIGludGVybmFsbHkuXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRJbnN0cnVtZW50YXRpb25IYW5kbGVyKGhhbmRsZXIpIHtcbiAgICBpZiAoIWhhbmRsZXIgfHwgdHlwZW9mIGhhbmRsZXIudHlwZSAhPT0gJ3N0cmluZycgfHwgdHlwZW9mIGhhbmRsZXIuY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBoYW5kbGVyc1toYW5kbGVyLnR5cGVdID0gaGFuZGxlcnNbaGFuZGxlci50eXBlXSB8fCBbXTtcbiAgICBoYW5kbGVyc1toYW5kbGVyLnR5cGVdLnB1c2goaGFuZGxlci5jYWxsYmFjayk7XG4gICAgaW5zdHJ1bWVudChoYW5kbGVyLnR5cGUpO1xufVxuLyoqIEpTRG9jICovXG5mdW5jdGlvbiB0cmlnZ2VySGFuZGxlcnModHlwZSwgZGF0YSkge1xuICAgIHZhciBlXzEsIF9hO1xuICAgIGlmICghdHlwZSB8fCAhaGFuZGxlcnNbdHlwZV0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKGhhbmRsZXJzW3R5cGVdIHx8IFtdKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSBfYy52YWx1ZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcihkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKFwiRXJyb3Igd2hpbGUgdHJpZ2dlcmluZyBpbnN0cnVtZW50YXRpb24gaGFuZGxlci5cXG5UeXBlOiBcIiArIHR5cGUgKyBcIlxcbk5hbWU6IFwiICsgZ2V0RnVuY3Rpb25OYW1lKGhhbmRsZXIpICsgXCJcXG5FcnJvcjogXCIgKyBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICB9XG59XG4vKiogSlNEb2MgKi9cbmZ1bmN0aW9uIGluc3RydW1lbnRDb25zb2xlKCkge1xuICAgIGlmICghKCdjb25zb2xlJyBpbiBnbG9iYWwpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgWydkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InLCAnbG9nJywgJ2Fzc2VydCddLmZvckVhY2goZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgICAgIGlmICghKGxldmVsIGluIGdsb2JhbC5jb25zb2xlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZpbGwoZ2xvYmFsLmNvbnNvbGUsIGxldmVsLCBmdW5jdGlvbiAob3JpZ2luYWxDb25zb2xlTGV2ZWwpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyaWdnZXJIYW5kbGVycygnY29uc29sZScsIHsgYXJnczogYXJncywgbGV2ZWw6IGxldmVsIH0pO1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgZmFpbHMgZm9yIHNvbWUgYnJvd3NlcnMuIDooXG4gICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsQ29uc29sZUxldmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKG9yaWdpbmFsQ29uc29sZUxldmVsLCBnbG9iYWwuY29uc29sZSwgYXJncyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vKiogSlNEb2MgKi9cbmZ1bmN0aW9uIGluc3RydW1lbnRGZXRjaCgpIHtcbiAgICBpZiAoIXN1cHBvcnRzTmF0aXZlRmV0Y2goKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGZpbGwoZ2xvYmFsLCAnZmV0Y2gnLCBmdW5jdGlvbiAob3JpZ2luYWxGZXRjaCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGhhbmRsZXJEYXRhID0ge1xuICAgICAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXG4gICAgICAgICAgICAgICAgZmV0Y2hEYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogZ2V0RmV0Y2hNZXRob2QoYXJncyksXG4gICAgICAgICAgICAgICAgICAgIHVybDogZ2V0RmV0Y2hVcmwoYXJncyksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzdGFydFRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0cmlnZ2VySGFuZGxlcnMoJ2ZldGNoJywgX19hc3NpZ24oe30sIGhhbmRsZXJEYXRhKSk7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxGZXRjaC5hcHBseShnbG9iYWwsIGFyZ3MpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdHJpZ2dlckhhbmRsZXJzKCdmZXRjaCcsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBoYW5kbGVyRGF0YSksIHsgZW5kVGltZXN0YW1wOiBEYXRlLm5vdygpLCByZXNwb25zZTogcmVzcG9uc2UgfSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRyaWdnZXJIYW5kbGVycygnZmV0Y2gnLCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgaGFuZGxlckRhdGEpLCB7IGVuZFRpbWVzdGFtcDogRGF0ZS5ub3coKSwgZXJyb3I6IGVycm9yIH0pKTtcbiAgICAgICAgICAgICAgICAvLyBOT1RFOiBJZiB5b3UgYXJlIGEgU2VudHJ5IHVzZXIsIGFuZCB5b3UgYXJlIHNlZWluZyB0aGlzIHN0YWNrIGZyYW1lLFxuICAgICAgICAgICAgICAgIC8vICAgICAgIGl0IG1lYW5zIHRoZSBzZW50cnkuamF2YXNjcmlwdCBTREsgY2F1Z2h0IGFuIGVycm9yIGludm9raW5nIHlvdXIgYXBwbGljYXRpb24gY29kZS5cbiAgICAgICAgICAgICAgICAvLyAgICAgICBUaGlzIGlzIGV4cGVjdGVkIGJlaGF2aW9yIGFuZCBOT1QgaW5kaWNhdGl2ZSBvZiBhIGJ1ZyB3aXRoIHNlbnRyeS5qYXZhc2NyaXB0LlxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfSk7XG59XG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MgKi9cbi8qKiBFeHRyYWN0IGBtZXRob2RgIGZyb20gZmV0Y2ggY2FsbCBhcmd1bWVudHMgKi9cbmZ1bmN0aW9uIGdldEZldGNoTWV0aG9kKGZldGNoQXJncykge1xuICAgIGlmIChmZXRjaEFyZ3MgPT09IHZvaWQgMCkgeyBmZXRjaEFyZ3MgPSBbXTsgfVxuICAgIGlmICgnUmVxdWVzdCcgaW4gZ2xvYmFsICYmIGlzSW5zdGFuY2VPZihmZXRjaEFyZ3NbMF0sIFJlcXVlc3QpICYmIGZldGNoQXJnc1swXS5tZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyhmZXRjaEFyZ3NbMF0ubWV0aG9kKS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cbiAgICBpZiAoZmV0Y2hBcmdzWzFdICYmIGZldGNoQXJnc1sxXS5tZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyhmZXRjaEFyZ3NbMV0ubWV0aG9kKS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cbiAgICByZXR1cm4gJ0dFVCc7XG59XG4vKiogRXh0cmFjdCBgdXJsYCBmcm9tIGZldGNoIGNhbGwgYXJndW1lbnRzICovXG5mdW5jdGlvbiBnZXRGZXRjaFVybChmZXRjaEFyZ3MpIHtcbiAgICBpZiAoZmV0Y2hBcmdzID09PSB2b2lkIDApIHsgZmV0Y2hBcmdzID0gW107IH1cbiAgICBpZiAodHlwZW9mIGZldGNoQXJnc1swXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGZldGNoQXJnc1swXTtcbiAgICB9XG4gICAgaWYgKCdSZXF1ZXN0JyBpbiBnbG9iYWwgJiYgaXNJbnN0YW5jZU9mKGZldGNoQXJnc1swXSwgUmVxdWVzdCkpIHtcbiAgICAgICAgcmV0dXJuIGZldGNoQXJnc1swXS51cmw7XG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcoZmV0Y2hBcmdzWzBdKTtcbn1cbi8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzICovXG4vKiogSlNEb2MgKi9cbmZ1bmN0aW9uIGluc3RydW1lbnRYSFIoKSB7XG4gICAgaWYgKCEoJ1hNTEh0dHBSZXF1ZXN0JyBpbiBnbG9iYWwpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gUG9vciBtYW4ncyBpbXBsZW1lbnRhdGlvbiBvZiBFUzYgYE1hcGAsIHRyYWNraW5nIGFuZCBrZWVwaW5nIGluIHN5bmMga2V5IGFuZCB2YWx1ZSBzZXBhcmF0ZWx5LlxuICAgIHZhciByZXF1ZXN0S2V5cyA9IFtdO1xuICAgIHZhciByZXF1ZXN0VmFsdWVzID0gW107XG4gICAgdmFyIHhocnByb3RvID0gWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlO1xuICAgIGZpbGwoeGhycHJvdG8sICdvcGVuJywgZnVuY3Rpb24gKG9yaWdpbmFsT3Blbikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby10aGlzLWFsaWFzXG4gICAgICAgICAgICB2YXIgeGhyID0gdGhpcztcbiAgICAgICAgICAgIHZhciB1cmwgPSBhcmdzWzFdO1xuICAgICAgICAgICAgeGhyLl9fc2VudHJ5X3hocl9fID0ge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgICAgICAgICBtZXRob2Q6IGlzU3RyaW5nKGFyZ3NbMF0pID8gYXJnc1swXS50b1VwcGVyQ2FzZSgpIDogYXJnc1swXSxcbiAgICAgICAgICAgICAgICB1cmw6IGFyZ3NbMV0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gaWYgU2VudHJ5IGtleSBhcHBlYXJzIGluIFVSTCwgZG9uJ3QgY2FwdHVyZSBpdCBhcyBhIHJlcXVlc3RcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgICAgIGlmIChpc1N0cmluZyh1cmwpICYmIHhoci5fX3NlbnRyeV94aHJfXy5tZXRob2QgPT09ICdQT1NUJyAmJiB1cmwubWF0Y2goL3NlbnRyeV9rZXkvKSkge1xuICAgICAgICAgICAgICAgIHhoci5fX3NlbnRyeV9vd25fcmVxdWVzdF9fID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBvbnJlYWR5c3RhdGVjaGFuZ2VIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG91Y2hpbmcgc3RhdHVzQ29kZSBpbiBzb21lIHBsYXRmb3JtcyB0aHJvd3NcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuIGV4Y2VwdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5fX3NlbnRyeV94aHJfXykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhoci5fX3NlbnRyeV94aHJfXy5zdGF0dXNfY29kZSA9IHhoci5zdGF0dXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIGRvIG5vdGhpbmcgKi9cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlcXVlc3RQb3MgPSByZXF1ZXN0S2V5cy5pbmRleE9mKHhocik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdFBvcyAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgdG8gcG9wIGJvdGgga2V5IGFuZCB2YWx1ZSB0byBrZWVwIGl0IGluIHN5bmMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEtleXMuc3BsaWNlKHJlcXVlc3RQb3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmdzXzEgPSByZXF1ZXN0VmFsdWVzLnNwbGljZShyZXF1ZXN0UG9zKVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLl9fc2VudHJ5X3hocl9fICYmIGFyZ3NfMVswXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhoci5fX3NlbnRyeV94aHJfXy5ib2R5ID0gYXJnc18xWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLyogZG8gbm90aGluZyAqL1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJIYW5kbGVycygneGhyJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnczogYXJncyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZFRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0VGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgeGhyOiB4aHIsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoJ29ucmVhZHlzdGF0ZWNoYW5nZScgaW4geGhyICYmIHR5cGVvZiB4aHIub25yZWFkeXN0YXRlY2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgZmlsbCh4aHIsICdvbnJlYWR5c3RhdGVjaGFuZ2UnLCBmdW5jdGlvbiAob3JpZ2luYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWFkeVN0YXRlQXJncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkeVN0YXRlQXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25yZWFkeXN0YXRlY2hhbmdlSGFuZGxlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmFwcGx5KHhociwgcmVhZHlTdGF0ZUFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoJ3JlYWR5c3RhdGVjaGFuZ2UnLCBvbnJlYWR5c3RhdGVjaGFuZ2VIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbE9wZW4uYXBwbHkoeGhyLCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICBmaWxsKHhocnByb3RvLCAnc2VuZCcsIGZ1bmN0aW9uIChvcmlnaW5hbFNlbmQpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcXVlc3RLZXlzLnB1c2godGhpcyk7XG4gICAgICAgICAgICByZXF1ZXN0VmFsdWVzLnB1c2goYXJncyk7XG4gICAgICAgICAgICB0cmlnZ2VySGFuZGxlcnMoJ3hocicsIHtcbiAgICAgICAgICAgICAgICBhcmdzOiBhcmdzLFxuICAgICAgICAgICAgICAgIHN0YXJ0VGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgICAgIHhocjogdGhpcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsU2VuZC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbnZhciBsYXN0SHJlZjtcbi8qKiBKU0RvYyAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudEhpc3RvcnkoKSB7XG4gICAgaWYgKCFzdXBwb3J0c0hpc3RvcnkoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBvbGRPblBvcFN0YXRlID0gZ2xvYmFsLm9ucG9wc3RhdGU7XG4gICAgZ2xvYmFsLm9ucG9wc3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRvID0gZ2xvYmFsLmxvY2F0aW9uLmhyZWY7XG4gICAgICAgIC8vIGtlZXAgdHJhY2sgb2YgdGhlIGN1cnJlbnQgVVJMIHN0YXRlLCBhcyB3ZSBhbHdheXMgcmVjZWl2ZSBvbmx5IHRoZSB1cGRhdGVkIHN0YXRlXG4gICAgICAgIHZhciBmcm9tID0gbGFzdEhyZWY7XG4gICAgICAgIGxhc3RIcmVmID0gdG87XG4gICAgICAgIHRyaWdnZXJIYW5kbGVycygnaGlzdG9yeScsIHtcbiAgICAgICAgICAgIGZyb206IGZyb20sXG4gICAgICAgICAgICB0bzogdG8sXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAob2xkT25Qb3BTdGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9sZE9uUG9wU3RhdGUuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgZnVuY3Rpb24gaGlzdG9yeVJlcGxhY2VtZW50RnVuY3Rpb24ob3JpZ2luYWxIaXN0b3J5RnVuY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB1cmwgPSBhcmdzLmxlbmd0aCA+IDIgPyBhcmdzWzJdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKHVybCkge1xuICAgICAgICAgICAgICAgIC8vIGNvZXJjZSB0byBzdHJpbmcgKHRoaXMgaXMgd2hhdCBwdXNoU3RhdGUgZG9lcylcbiAgICAgICAgICAgICAgICB2YXIgZnJvbSA9IGxhc3RIcmVmO1xuICAgICAgICAgICAgICAgIHZhciB0byA9IFN0cmluZyh1cmwpO1xuICAgICAgICAgICAgICAgIC8vIGtlZXAgdHJhY2sgb2YgdGhlIGN1cnJlbnQgVVJMIHN0YXRlLCBhcyB3ZSBhbHdheXMgcmVjZWl2ZSBvbmx5IHRoZSB1cGRhdGVkIHN0YXRlXG4gICAgICAgICAgICAgICAgbGFzdEhyZWYgPSB0bztcbiAgICAgICAgICAgICAgICB0cmlnZ2VySGFuZGxlcnMoJ2hpc3RvcnknLCB7XG4gICAgICAgICAgICAgICAgICAgIGZyb206IGZyb20sXG4gICAgICAgICAgICAgICAgICAgIHRvOiB0byxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbEhpc3RvcnlGdW5jdGlvbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZmlsbChnbG9iYWwuaGlzdG9yeSwgJ3B1c2hTdGF0ZScsIGhpc3RvcnlSZXBsYWNlbWVudEZ1bmN0aW9uKTtcbiAgICBmaWxsKGdsb2JhbC5oaXN0b3J5LCAncmVwbGFjZVN0YXRlJywgaGlzdG9yeVJlcGxhY2VtZW50RnVuY3Rpb24pO1xufVxuLyoqIEpTRG9jICovXG5mdW5jdGlvbiBpbnN0cnVtZW50RE9NKCkge1xuICAgIGlmICghKCdkb2N1bWVudCcgaW4gZ2xvYmFsKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIENhcHR1cmUgYnJlYWRjcnVtYnMgZnJvbSBhbnkgY2xpY2sgdGhhdCBpcyB1bmhhbmRsZWQgLyBidWJibGVkIHVwIGFsbCB0aGUgd2F5XG4gICAgLy8gdG8gdGhlIGRvY3VtZW50LiBEbyB0aGlzIGJlZm9yZSB3ZSBpbnN0cnVtZW50IGFkZEV2ZW50TGlzdGVuZXIuXG4gICAgZ2xvYmFsLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZG9tRXZlbnRIYW5kbGVyKCdjbGljaycsIHRyaWdnZXJIYW5kbGVycy5iaW5kKG51bGwsICdkb20nKSksIGZhbHNlKTtcbiAgICBnbG9iYWwuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCBrZXlwcmVzc0V2ZW50SGFuZGxlcih0cmlnZ2VySGFuZGxlcnMuYmluZChudWxsLCAnZG9tJykpLCBmYWxzZSk7XG4gICAgLy8gQWZ0ZXIgaG9va2luZyBpbnRvIGRvY3VtZW50IGJ1YmJsZWQgdXAgY2xpY2sgYW5kIGtleXByZXNzZXMgZXZlbnRzLCB3ZSBhbHNvIGhvb2sgaW50byB1c2VyIGhhbmRsZWQgY2xpY2sgJiBrZXlwcmVzc2VzLlxuICAgIFsnRXZlbnRUYXJnZXQnLCAnTm9kZSddLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MgKi9cbiAgICAgICAgdmFyIHByb3RvID0gZ2xvYmFsW3RhcmdldF0gJiYgZ2xvYmFsW3RhcmdldF0ucHJvdG90eXBlO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gICAgICAgIGlmICghcHJvdG8gfHwgIXByb3RvLmhhc093blByb3BlcnR5IHx8ICFwcm90by5oYXNPd25Qcm9wZXJ0eSgnYWRkRXZlbnRMaXN0ZW5lcicpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MgKi9cbiAgICAgICAgZmlsbChwcm90bywgJ2FkZEV2ZW50TGlzdGVuZXInLCBmdW5jdGlvbiAob3JpZ2luYWwpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnROYW1lLCBmbiwgb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGlmIChmbiAmJiBmbi5oYW5kbGVFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnROYW1lID09PSAnY2xpY2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsKGZuLCAnaGFuZGxlRXZlbnQnLCBmdW5jdGlvbiAoaW5uZXJPcmlnaW5hbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tRXZlbnRIYW5kbGVyKCdjbGljaycsIHRyaWdnZXJIYW5kbGVycy5iaW5kKG51bGwsICdkb20nKSkoZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5uZXJPcmlnaW5hbC5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50TmFtZSA9PT0gJ2tleXByZXNzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbChmbiwgJ2hhbmRsZUV2ZW50JywgZnVuY3Rpb24gKGlubmVyT3JpZ2luYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleXByZXNzRXZlbnRIYW5kbGVyKHRyaWdnZXJIYW5kbGVycy5iaW5kKG51bGwsICdkb20nKSkoZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5uZXJPcmlnaW5hbC5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudE5hbWUgPT09ICdjbGljaycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbUV2ZW50SGFuZGxlcignY2xpY2snLCB0cmlnZ2VySGFuZGxlcnMuYmluZChudWxsLCAnZG9tJyksIHRydWUpKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudE5hbWUgPT09ICdrZXlwcmVzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleXByZXNzRXZlbnRIYW5kbGVyKHRyaWdnZXJIYW5kbGVycy5iaW5kKG51bGwsICdkb20nKSkodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmNhbGwodGhpcywgZXZlbnROYW1lLCBmbiwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgZmlsbChwcm90bywgJ3JlbW92ZUV2ZW50TGlzdGVuZXInLCBmdW5jdGlvbiAob3JpZ2luYWwpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnROYW1lLCBmbiwgb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsLmNhbGwodGhpcywgZXZlbnROYW1lLCBmbi5fX3NlbnRyeV93cmFwcGVkX18sIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmUsIGFjY2Vzc2luZyBfX3NlbnRyeV93cmFwcGVkX18gd2lsbCB0aHJvdyBpbiBzb21lIFNlbGVuaXVtIGVudmlyb25tZW50c1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwuY2FsbCh0aGlzLCBldmVudE5hbWUsIGZuLCBvcHRpb25zKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxudmFyIGRlYm91bmNlRHVyYXRpb24gPSAxMDAwO1xudmFyIGRlYm91bmNlVGltZXIgPSAwO1xudmFyIGtleXByZXNzVGltZW91dDtcbnZhciBsYXN0Q2FwdHVyZWRFdmVudDtcbi8qKlxuICogV3JhcHMgYWRkRXZlbnRMaXN0ZW5lciB0byBjYXB0dXJlIFVJIGJyZWFkY3J1bWJzXG4gKiBAcGFyYW0gbmFtZSB0aGUgZXZlbnQgbmFtZSAoZS5nLiBcImNsaWNrXCIpXG4gKiBAcGFyYW0gaGFuZGxlciBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgdHJpZ2dlcmVkXG4gKiBAcGFyYW0gZGVib3VuY2UgZGVjaWRlcyB3aGV0aGVyIGl0IHNob3VsZCB3YWl0IHRpbGwgYW5vdGhlciBldmVudCBsb29wXG4gKiBAcmV0dXJucyB3cmFwcGVkIGJyZWFkY3J1bWIgZXZlbnRzIGhhbmRsZXJcbiAqIEBoaWRkZW5cbiAqL1xuZnVuY3Rpb24gZG9tRXZlbnRIYW5kbGVyKG5hbWUsIGhhbmRsZXIsIGRlYm91bmNlKSB7XG4gICAgaWYgKGRlYm91bmNlID09PSB2b2lkIDApIHsgZGVib3VuY2UgPSBmYWxzZTsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgLy8gcmVzZXQga2V5cHJlc3MgdGltZW91dDsgZS5nLiB0cmlnZ2VyaW5nIGEgJ2NsaWNrJyBhZnRlclxuICAgICAgICAvLyBhICdrZXlwcmVzcycgd2lsbCByZXNldCB0aGUga2V5cHJlc3MgZGVib3VuY2Ugc28gdGhhdCBhIG5ld1xuICAgICAgICAvLyBzZXQgb2Yga2V5cHJlc3NlcyBjYW4gYmUgcmVjb3JkZWRcbiAgICAgICAga2V5cHJlc3NUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAvLyBJdCdzIHBvc3NpYmxlIHRoaXMgaGFuZGxlciBtaWdodCB0cmlnZ2VyIG11bHRpcGxlIHRpbWVzIGZvciB0aGUgc2FtZVxuICAgICAgICAvLyBldmVudCAoZS5nLiBldmVudCBwcm9wYWdhdGlvbiB0aHJvdWdoIG5vZGUgYW5jZXN0b3JzKS4gSWdub3JlIGlmIHdlJ3ZlXG4gICAgICAgIC8vIGFscmVhZHkgY2FwdHVyZWQgdGhlIGV2ZW50LlxuICAgICAgICBpZiAoIWV2ZW50IHx8IGxhc3RDYXB0dXJlZEV2ZW50ID09PSBldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RDYXB0dXJlZEV2ZW50ID0gZXZlbnQ7XG4gICAgICAgIGlmIChkZWJvdW5jZVRpbWVyKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoZGVib3VuY2VUaW1lcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlYm91bmNlKSB7XG4gICAgICAgICAgICBkZWJvdW5jZVRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcih7IGV2ZW50OiBldmVudCwgbmFtZTogbmFtZSB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaGFuZGxlcih7IGV2ZW50OiBldmVudCwgbmFtZTogbmFtZSB9KTtcbiAgICAgICAgfVxuICAgIH07XG59XG4vKipcbiAqIFdyYXBzIGFkZEV2ZW50TGlzdGVuZXIgdG8gY2FwdHVyZSBrZXlwcmVzcyBVSSBldmVudHNcbiAqIEBwYXJhbSBoYW5kbGVyIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB0cmlnZ2VyZWRcbiAqIEByZXR1cm5zIHdyYXBwZWQga2V5cHJlc3MgZXZlbnRzIGhhbmRsZXJcbiAqIEBoaWRkZW5cbiAqL1xuZnVuY3Rpb24ga2V5cHJlc3NFdmVudEhhbmRsZXIoaGFuZGxlcikge1xuICAgIC8vIFRPRE86IGlmIHNvbWVob3cgdXNlciBzd2l0Y2hlcyBrZXlwcmVzcyB0YXJnZXQgYmVmb3JlXG4gICAgLy8gICAgICAgZGVib3VuY2UgdGltZW91dCBpcyB0cmlnZ2VyZWQsIHdlIHdpbGwgb25seSBjYXB0dXJlXG4gICAgLy8gICAgICAgYSBzaW5nbGUgYnJlYWRjcnVtYiBmcm9tIHRoZSBGSVJTVCB0YXJnZXQgKGFjY2VwdGFibGU/KVxuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIHRhcmdldDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8ganVzdCBhY2Nlc3NpbmcgZXZlbnQgcHJvcGVydGllcyBjYW4gdGhyb3cgYW4gZXhjZXB0aW9uIGluIHNvbWUgcmFyZSBjaXJjdW1zdGFuY2VzXG4gICAgICAgICAgICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvcmF2ZW4tanMvaXNzdWVzLzgzOFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0YWdOYW1lID0gdGFyZ2V0ICYmIHRhcmdldC50YWdOYW1lO1xuICAgICAgICAvLyBvbmx5IGNvbnNpZGVyIGtleXByZXNzIGV2ZW50cyBvbiBhY3R1YWwgaW5wdXQgZWxlbWVudHNcbiAgICAgICAgLy8gdGhpcyB3aWxsIGRpc3JlZ2FyZCBrZXlwcmVzc2VzIHRhcmdldGluZyBib2R5IChlLmcuIHRhYmJpbmdcbiAgICAgICAgLy8gdGhyb3VnaCBlbGVtZW50cywgaG90a2V5cywgZXRjKVxuICAgICAgICBpZiAoIXRhZ05hbWUgfHwgKHRhZ05hbWUgIT09ICdJTlBVVCcgJiYgdGFnTmFtZSAhPT0gJ1RFWFRBUkVBJyAmJiAhdGFyZ2V0LmlzQ29udGVudEVkaXRhYmxlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlY29yZCBmaXJzdCBrZXlwcmVzcyBpbiBhIHNlcmllcywgYnV0IGlnbm9yZSBzdWJzZXF1ZW50XG4gICAgICAgIC8vIGtleXByZXNzZXMgdW50aWwgZGVib3VuY2UgY2xlYXJzXG4gICAgICAgIGlmICgha2V5cHJlc3NUaW1lb3V0KSB7XG4gICAgICAgICAgICBkb21FdmVudEhhbmRsZXIoJ2lucHV0JywgaGFuZGxlcikoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNsZWFyVGltZW91dChrZXlwcmVzc1RpbWVvdXQpO1xuICAgICAgICBrZXlwcmVzc1RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGtleXByZXNzVGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfSwgZGVib3VuY2VEdXJhdGlvbik7XG4gICAgfTtcbn1cbnZhciBfb2xkT25FcnJvckhhbmRsZXIgPSBudWxsO1xuLyoqIEpTRG9jICovXG5mdW5jdGlvbiBpbnN0cnVtZW50RXJyb3IoKSB7XG4gICAgX29sZE9uRXJyb3JIYW5kbGVyID0gZ2xvYmFsLm9uZXJyb3I7XG4gICAgZ2xvYmFsLm9uZXJyb3IgPSBmdW5jdGlvbiAobXNnLCB1cmwsIGxpbmUsIGNvbHVtbiwgZXJyb3IpIHtcbiAgICAgICAgdHJpZ2dlckhhbmRsZXJzKCdlcnJvcicsIHtcbiAgICAgICAgICAgIGNvbHVtbjogY29sdW1uLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgbGluZTogbGluZSxcbiAgICAgICAgICAgIG1zZzogbXNnLFxuICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoX29sZE9uRXJyb3JIYW5kbGVyKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgICAgICAgICByZXR1cm4gX29sZE9uRXJyb3JIYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG59XG52YXIgX29sZE9uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlciA9IG51bGw7XG4vKiogSlNEb2MgKi9cbmZ1bmN0aW9uIGluc3RydW1lbnRVbmhhbmRsZWRSZWplY3Rpb24oKSB7XG4gICAgX29sZE9uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlciA9IGdsb2JhbC5vbnVuaGFuZGxlZHJlamVjdGlvbjtcbiAgICBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB0cmlnZ2VySGFuZGxlcnMoJ3VuaGFuZGxlZHJlamVjdGlvbicsIGUpO1xuICAgICAgICBpZiAoX29sZE9uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlcikge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgICAgICAgICAgcmV0dXJuIF9vbGRPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5zdHJ1bWVudC5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19yZWFkLCBfX3NwcmVhZCB9IGZyb20gXCJ0c2xpYlwiO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGluZXMgKi9cbmltcG9ydCB7IGdldEN1cnJlbnRIdWIgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgU2V2ZXJpdHkgfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IGFkZEluc3RydW1lbnRhdGlvbkhhbmRsZXIsIGdldEV2ZW50RGVzY3JpcHRpb24sIGdldEdsb2JhbE9iamVjdCwgaHRtbFRyZWVBc1N0cmluZywgcGFyc2VVcmwsIHNhZmVKb2luLCB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuLyoqXG4gKiBEZWZhdWx0IEJyZWFkY3J1bWJzIGluc3RydW1lbnRhdGlvbnNcbiAqIFRPRE86IERlcHJlY2F0ZWQgLSB3aXRoIHY2LCB0aGlzIHdpbGwgYmUgcmVuYW1lZCB0byBgSW5zdHJ1bWVudGBcbiAqL1xudmFyIEJyZWFkY3J1bWJzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgZnVuY3Rpb24gQnJlYWRjcnVtYnMob3B0aW9ucykge1xuICAgICAgICAvKipcbiAgICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubmFtZSA9IEJyZWFkY3J1bWJzLmlkO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gX19hc3NpZ24oeyBjb25zb2xlOiB0cnVlLCBkb206IHRydWUsIGZldGNoOiB0cnVlLCBoaXN0b3J5OiB0cnVlLCBzZW50cnk6IHRydWUsIHhocjogdHJ1ZSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgYnJlYWRjcnVtYiBvZiBgc2VudHJ5YCBmcm9tIHRoZSBldmVudHMgdGhlbXNlbHZlc1xuICAgICAqL1xuICAgIEJyZWFkY3J1bWJzLnByb3RvdHlwZS5hZGRTZW50cnlCcmVhZGNydW1iID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5fb3B0aW9ucy5zZW50cnkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBnZXRDdXJyZW50SHViKCkuYWRkQnJlYWRjcnVtYih7XG4gICAgICAgICAgICBjYXRlZ29yeTogXCJzZW50cnkuXCIgKyAoZXZlbnQudHlwZSA9PT0gJ3RyYW5zYWN0aW9uJyA/ICd0cmFuc2FjdGlvbicgOiAnZXZlbnQnKSxcbiAgICAgICAgICAgIGV2ZW50X2lkOiBldmVudC5ldmVudF9pZCxcbiAgICAgICAgICAgIGxldmVsOiBldmVudC5sZXZlbCxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGdldEV2ZW50RGVzY3JpcHRpb24oZXZlbnQpLFxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSW5zdHJ1bWVudCBicm93c2VyIGJ1aWx0LWlucyB3LyBicmVhZGNydW1iIGNhcHR1cmluZ1xuICAgICAqICAtIENvbnNvbGUgQVBJXG4gICAgICogIC0gRE9NIEFQSSAoY2xpY2svdHlwaW5nKVxuICAgICAqICAtIFhNTEh0dHBSZXF1ZXN0IEFQSVxuICAgICAqICAtIEZldGNoIEFQSVxuICAgICAqICAtIEhpc3RvcnkgQVBJXG4gICAgICovXG4gICAgQnJlYWRjcnVtYnMucHJvdG90eXBlLnNldHVwT25jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuY29uc29sZSkge1xuICAgICAgICAgICAgYWRkSW5zdHJ1bWVudGF0aW9uSGFuZGxlcih7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fY29uc29sZUJyZWFkY3J1bWIuYXBwbHkoX3RoaXMsIF9fc3ByZWFkKGFyZ3MpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHR5cGU6ICdjb25zb2xlJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmRvbSkge1xuICAgICAgICAgICAgYWRkSW5zdHJ1bWVudGF0aW9uSGFuZGxlcih7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fZG9tQnJlYWRjcnVtYi5hcHBseShfdGhpcywgX19zcHJlYWQoYXJncykpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdHlwZTogJ2RvbScsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy54aHIpIHtcbiAgICAgICAgICAgIGFkZEluc3RydW1lbnRhdGlvbkhhbmRsZXIoe1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3hockJyZWFkY3J1bWIuYXBwbHkoX3RoaXMsIF9fc3ByZWFkKGFyZ3MpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHR5cGU6ICd4aHInLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuZmV0Y2gpIHtcbiAgICAgICAgICAgIGFkZEluc3RydW1lbnRhdGlvbkhhbmRsZXIoe1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2ZldGNoQnJlYWRjcnVtYi5hcHBseShfdGhpcywgX19zcHJlYWQoYXJncykpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdHlwZTogJ2ZldGNoJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmhpc3RvcnkpIHtcbiAgICAgICAgICAgIGFkZEluc3RydW1lbnRhdGlvbkhhbmRsZXIoe1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2hpc3RvcnlCcmVhZGNydW1iLmFwcGx5KF90aGlzLCBfX3NwcmVhZChhcmdzKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0eXBlOiAnaGlzdG9yeScsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBicmVhZGNydW1icyBmcm9tIGNvbnNvbGUgQVBJIGNhbGxzXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBCcmVhZGNydW1icy5wcm90b3R5cGUuX2NvbnNvbGVCcmVhZGNydW1iID0gZnVuY3Rpb24gKGhhbmRsZXJEYXRhKSB7XG4gICAgICAgIHZhciBicmVhZGNydW1iID0ge1xuICAgICAgICAgICAgY2F0ZWdvcnk6ICdjb25zb2xlJyxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBhcmd1bWVudHM6IGhhbmRsZXJEYXRhLmFyZ3MsXG4gICAgICAgICAgICAgICAgbG9nZ2VyOiAnY29uc29sZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGV2ZWw6IFNldmVyaXR5LmZyb21TdHJpbmcoaGFuZGxlckRhdGEubGV2ZWwpLFxuICAgICAgICAgICAgbWVzc2FnZTogc2FmZUpvaW4oaGFuZGxlckRhdGEuYXJncywgJyAnKSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGhhbmRsZXJEYXRhLmxldmVsID09PSAnYXNzZXJ0Jykge1xuICAgICAgICAgICAgaWYgKGhhbmRsZXJEYXRhLmFyZ3NbMF0gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgYnJlYWRjcnVtYi5tZXNzYWdlID0gXCJBc3NlcnRpb24gZmFpbGVkOiBcIiArIChzYWZlSm9pbihoYW5kbGVyRGF0YS5hcmdzLnNsaWNlKDEpLCAnICcpIHx8ICdjb25zb2xlLmFzc2VydCcpO1xuICAgICAgICAgICAgICAgIGJyZWFkY3J1bWIuZGF0YS5hcmd1bWVudHMgPSBoYW5kbGVyRGF0YS5hcmdzLnNsaWNlKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRG9uJ3QgY2FwdHVyZSBhIGJyZWFkY3J1bWIgZm9yIHBhc3NlZCBhc3NlcnRpb25zXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdldEN1cnJlbnRIdWIoKS5hZGRCcmVhZGNydW1iKGJyZWFkY3J1bWIsIHtcbiAgICAgICAgICAgIGlucHV0OiBoYW5kbGVyRGF0YS5hcmdzLFxuICAgICAgICAgICAgbGV2ZWw6IGhhbmRsZXJEYXRhLmxldmVsLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYnJlYWRjcnVtYnMgZnJvbSBET00gQVBJIGNhbGxzXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBCcmVhZGNydW1icy5wcm90b3R5cGUuX2RvbUJyZWFkY3J1bWIgPSBmdW5jdGlvbiAoaGFuZGxlckRhdGEpIHtcbiAgICAgICAgdmFyIHRhcmdldDtcbiAgICAgICAgLy8gQWNjZXNzaW5nIGV2ZW50LnRhcmdldCBjYW4gdGhyb3cgKHNlZSBnZXRzZW50cnkvcmF2ZW4tanMjODM4LCAjNzY4KVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGFyZ2V0ID0gaGFuZGxlckRhdGEuZXZlbnQudGFyZ2V0XG4gICAgICAgICAgICAgICAgPyBodG1sVHJlZUFzU3RyaW5nKGhhbmRsZXJEYXRhLmV2ZW50LnRhcmdldClcbiAgICAgICAgICAgICAgICA6IGh0bWxUcmVlQXNTdHJpbmcoaGFuZGxlckRhdGEuZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0YXJnZXQgPSAnPHVua25vd24+JztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGdldEN1cnJlbnRIdWIoKS5hZGRCcmVhZGNydW1iKHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiBcInVpLlwiICsgaGFuZGxlckRhdGEubmFtZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHRhcmdldCxcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgZXZlbnQ6IGhhbmRsZXJEYXRhLmV2ZW50LFxuICAgICAgICAgICAgbmFtZTogaGFuZGxlckRhdGEubmFtZSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGJyZWFkY3J1bWJzIGZyb20gWEhSIEFQSSBjYWxsc1xuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgQnJlYWRjcnVtYnMucHJvdG90eXBlLl94aHJCcmVhZGNydW1iID0gZnVuY3Rpb24gKGhhbmRsZXJEYXRhKSB7XG4gICAgICAgIGlmIChoYW5kbGVyRGF0YS5lbmRUaW1lc3RhbXApIHtcbiAgICAgICAgICAgIC8vIFdlIG9ubHkgY2FwdHVyZSBjb21wbGV0ZSwgbm9uLXNlbnRyeSByZXF1ZXN0c1xuICAgICAgICAgICAgaWYgKGhhbmRsZXJEYXRhLnhoci5fX3NlbnRyeV9vd25fcmVxdWVzdF9fKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIF9hID0gaGFuZGxlckRhdGEueGhyLl9fc2VudHJ5X3hocl9fIHx8IHt9LCBtZXRob2QgPSBfYS5tZXRob2QsIHVybCA9IF9hLnVybCwgc3RhdHVzX2NvZGUgPSBfYS5zdGF0dXNfY29kZSwgYm9keSA9IF9hLmJvZHk7XG4gICAgICAgICAgICBnZXRDdXJyZW50SHViKCkuYWRkQnJlYWRjcnVtYih7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6ICd4aHInLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgICAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXNfY29kZTogc3RhdHVzX2NvZGUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0eXBlOiAnaHR0cCcsXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgeGhyOiBoYW5kbGVyRGF0YS54aHIsXG4gICAgICAgICAgICAgICAgaW5wdXQ6IGJvZHksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBicmVhZGNydW1icyBmcm9tIGZldGNoIEFQSSBjYWxsc1xuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgQnJlYWRjcnVtYnMucHJvdG90eXBlLl9mZXRjaEJyZWFkY3J1bWIgPSBmdW5jdGlvbiAoaGFuZGxlckRhdGEpIHtcbiAgICAgICAgLy8gV2Ugb25seSBjYXB0dXJlIGNvbXBsZXRlIGZldGNoIHJlcXVlc3RzXG4gICAgICAgIGlmICghaGFuZGxlckRhdGEuZW5kVGltZXN0YW1wKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhbmRsZXJEYXRhLmZldGNoRGF0YS51cmwubWF0Y2goL3NlbnRyeV9rZXkvKSAmJiBoYW5kbGVyRGF0YS5mZXRjaERhdGEubWV0aG9kID09PSAnUE9TVCcpIHtcbiAgICAgICAgICAgIC8vIFdlIHdpbGwgbm90IGNyZWF0ZSBicmVhZGNydW1icyBmb3IgZmV0Y2ggcmVxdWVzdHMgdGhhdCBjb250YWluIGBzZW50cnlfa2V5YCAoaW50ZXJuYWwgc2VudHJ5IHJlcXVlc3RzKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYW5kbGVyRGF0YS5lcnJvcikge1xuICAgICAgICAgICAgZ2V0Q3VycmVudEh1YigpLmFkZEJyZWFkY3J1bWIoe1xuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiAnZmV0Y2gnLFxuICAgICAgICAgICAgICAgIGRhdGE6IGhhbmRsZXJEYXRhLmZldGNoRGF0YSxcbiAgICAgICAgICAgICAgICBsZXZlbDogU2V2ZXJpdHkuRXJyb3IsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2h0dHAnLFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGRhdGE6IGhhbmRsZXJEYXRhLmVycm9yLFxuICAgICAgICAgICAgICAgIGlucHV0OiBoYW5kbGVyRGF0YS5hcmdzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBnZXRDdXJyZW50SHViKCkuYWRkQnJlYWRjcnVtYih7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6ICdmZXRjaCcsXG4gICAgICAgICAgICAgICAgZGF0YTogX19hc3NpZ24oX19hc3NpZ24oe30sIGhhbmRsZXJEYXRhLmZldGNoRGF0YSksIHsgc3RhdHVzX2NvZGU6IGhhbmRsZXJEYXRhLnJlc3BvbnNlLnN0YXR1cyB9KSxcbiAgICAgICAgICAgICAgICB0eXBlOiAnaHR0cCcsXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgaW5wdXQ6IGhhbmRsZXJEYXRhLmFyZ3MsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2U6IGhhbmRsZXJEYXRhLnJlc3BvbnNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYnJlYWRjcnVtYnMgZnJvbSBoaXN0b3J5IEFQSSBjYWxsc1xuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgQnJlYWRjcnVtYnMucHJvdG90eXBlLl9oaXN0b3J5QnJlYWRjcnVtYiA9IGZ1bmN0aW9uIChoYW5kbGVyRGF0YSkge1xuICAgICAgICB2YXIgZ2xvYmFsID0gZ2V0R2xvYmFsT2JqZWN0KCk7XG4gICAgICAgIHZhciBmcm9tID0gaGFuZGxlckRhdGEuZnJvbTtcbiAgICAgICAgdmFyIHRvID0gaGFuZGxlckRhdGEudG87XG4gICAgICAgIHZhciBwYXJzZWRMb2MgPSBwYXJzZVVybChnbG9iYWwubG9jYXRpb24uaHJlZik7XG4gICAgICAgIHZhciBwYXJzZWRGcm9tID0gcGFyc2VVcmwoZnJvbSk7XG4gICAgICAgIHZhciBwYXJzZWRUbyA9IHBhcnNlVXJsKHRvKTtcbiAgICAgICAgLy8gSW5pdGlhbCBwdXNoU3RhdGUgZG9lc24ndCBwcm92aWRlIGBmcm9tYCBpbmZvcm1hdGlvblxuICAgICAgICBpZiAoIXBhcnNlZEZyb20ucGF0aCkge1xuICAgICAgICAgICAgcGFyc2VkRnJvbSA9IHBhcnNlZExvYztcbiAgICAgICAgfVxuICAgICAgICAvLyBVc2Ugb25seSB0aGUgcGF0aCBjb21wb25lbnQgb2YgdGhlIFVSTCBpZiB0aGUgVVJMIG1hdGNoZXMgdGhlIGN1cnJlbnRcbiAgICAgICAgLy8gZG9jdW1lbnQgKGFsbW9zdCBhbGwgdGhlIHRpbWUgd2hlbiB1c2luZyBwdXNoU3RhdGUpXG4gICAgICAgIGlmIChwYXJzZWRMb2MucHJvdG9jb2wgPT09IHBhcnNlZFRvLnByb3RvY29sICYmIHBhcnNlZExvYy5ob3N0ID09PSBwYXJzZWRUby5ob3N0KSB7XG4gICAgICAgICAgICB0byA9IHBhcnNlZFRvLnJlbGF0aXZlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJzZWRMb2MucHJvdG9jb2wgPT09IHBhcnNlZEZyb20ucHJvdG9jb2wgJiYgcGFyc2VkTG9jLmhvc3QgPT09IHBhcnNlZEZyb20uaG9zdCkge1xuICAgICAgICAgICAgZnJvbSA9IHBhcnNlZEZyb20ucmVsYXRpdmU7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0Q3VycmVudEh1YigpLmFkZEJyZWFkY3J1bWIoe1xuICAgICAgICAgICAgY2F0ZWdvcnk6ICduYXZpZ2F0aW9uJyxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBmcm9tOiBmcm9tLFxuICAgICAgICAgICAgICAgIHRvOiB0byxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCcmVhZGNydW1icy5pZCA9ICdCcmVhZGNydW1icyc7XG4gICAgcmV0dXJuIEJyZWFkY3J1bWJzO1xufSgpKTtcbmV4cG9ydCB7IEJyZWFkY3J1bWJzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1icmVhZGNydW1icy5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzLCBfX3JlYWQsIF9fc3ByZWFkIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBCYXNlQ2xpZW50IH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IGdldEdsb2JhbE9iamVjdCwgbG9nZ2VyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBCcm93c2VyQmFja2VuZCB9IGZyb20gJy4vYmFja2VuZCc7XG5pbXBvcnQgeyBpbmplY3RSZXBvcnREaWFsb2cgfSBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IHsgQnJlYWRjcnVtYnMgfSBmcm9tICcuL2ludGVncmF0aW9ucyc7XG5pbXBvcnQgeyBTREtfTkFNRSwgU0RLX1ZFUlNJT04gfSBmcm9tICcuL3ZlcnNpb24nO1xuLyoqXG4gKiBUaGUgU2VudHJ5IEJyb3dzZXIgU0RLIENsaWVudC5cbiAqXG4gKiBAc2VlIEJyb3dzZXJPcHRpb25zIGZvciBkb2N1bWVudGF0aW9uIG9uIGNvbmZpZ3VyYXRpb24gb3B0aW9ucy5cbiAqIEBzZWUgU2VudHJ5Q2xpZW50IGZvciB1c2FnZSBkb2N1bWVudGF0aW9uLlxuICovXG52YXIgQnJvd3NlckNsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQnJvd3NlckNsaWVudCwgX3N1cGVyKTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEJyb3dzZXIgU0RLIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGlzIFNESy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBCcm93c2VyQ2xpZW50KG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIEJyb3dzZXJCYWNrZW5kLCBvcHRpb25zKSB8fCB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTaG93IGEgcmVwb3J0IGRpYWxvZyB0byB0aGUgdXNlciB0byBzZW5kIGZlZWRiYWNrIHRvIGEgc3BlY2lmaWMgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBTZXQgaW5kaXZpZHVhbCBvcHRpb25zIGZvciB0aGUgZGlhbG9nXG4gICAgICovXG4gICAgQnJvd3NlckNsaWVudC5wcm90b3R5cGUuc2hvd1JlcG9ydERpYWxvZyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIC8vIGRvZXNuJ3Qgd29yayB3aXRob3V0IGEgZG9jdW1lbnQgKFJlYWN0IE5hdGl2ZSlcbiAgICAgICAgdmFyIGRvY3VtZW50ID0gZ2V0R2xvYmFsT2JqZWN0KCkuZG9jdW1lbnQ7XG4gICAgICAgIGlmICghZG9jdW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2lzRW5hYmxlZCgpKSB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ1RyeWluZyB0byBjYWxsIHNob3dSZXBvcnREaWFsb2cgd2l0aCBTZW50cnkgQ2xpZW50IGRpc2FibGVkJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaW5qZWN0UmVwb3J0RGlhbG9nKF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRpb25zKSwgeyBkc246IG9wdGlvbnMuZHNuIHx8IHRoaXMuZ2V0RHNuKCkgfSkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCcm93c2VyQ2xpZW50LnByb3RvdHlwZS5fcHJlcGFyZUV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50LCBzY29wZSwgaGludCkge1xuICAgICAgICBldmVudC5wbGF0Zm9ybSA9IGV2ZW50LnBsYXRmb3JtIHx8ICdqYXZhc2NyaXB0JztcbiAgICAgICAgZXZlbnQuc2RrID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGV2ZW50LnNkayksIHsgbmFtZTogU0RLX05BTUUsIHBhY2thZ2VzOiBfX3NwcmVhZCgoKGV2ZW50LnNkayAmJiBldmVudC5zZGsucGFja2FnZXMpIHx8IFtdKSwgW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ25wbTpAc2VudHJ5L2Jyb3dzZXInLFxuICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uOiBTREtfVkVSU0lPTixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSksIHZlcnNpb246IFNES19WRVJTSU9OIH0pO1xuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5fcHJlcGFyZUV2ZW50LmNhbGwodGhpcywgZXZlbnQsIHNjb3BlLCBoaW50KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgQnJvd3NlckNsaWVudC5wcm90b3R5cGUuX3NlbmRFdmVudCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgaW50ZWdyYXRpb24gPSB0aGlzLmdldEludGVncmF0aW9uKEJyZWFkY3J1bWJzKTtcbiAgICAgICAgaWYgKGludGVncmF0aW9uKSB7XG4gICAgICAgICAgICBpbnRlZ3JhdGlvbi5hZGRTZW50cnlCcmVhZGNydW1iKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9zZW5kRXZlbnQuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfTtcbiAgICByZXR1cm4gQnJvd3NlckNsaWVudDtcbn0oQmFzZUNsaWVudCkpO1xuZXhwb3J0IHsgQnJvd3NlckNsaWVudCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xpZW50LmpzLm1hcCIsImV4cG9ydCB2YXIgU0RLX05BTUUgPSAnc2VudHJ5LmphdmFzY3JpcHQuYnJvd3Nlcic7XG5leHBvcnQgdmFyIFNES19WRVJTSU9OID0gJzUuMjcuNCc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBmaWxsLCBnZXRGdW5jdGlvbk5hbWUsIGdldEdsb2JhbE9iamVjdCB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgd3JhcCB9IGZyb20gJy4uL2hlbHBlcnMnO1xudmFyIERFRkFVTFRfRVZFTlRfVEFSR0VUID0gW1xuICAgICdFdmVudFRhcmdldCcsXG4gICAgJ1dpbmRvdycsXG4gICAgJ05vZGUnLFxuICAgICdBcHBsaWNhdGlvbkNhY2hlJyxcbiAgICAnQXVkaW9UcmFja0xpc3QnLFxuICAgICdDaGFubmVsTWVyZ2VyTm9kZScsXG4gICAgJ0NyeXB0b09wZXJhdGlvbicsXG4gICAgJ0V2ZW50U291cmNlJyxcbiAgICAnRmlsZVJlYWRlcicsXG4gICAgJ0hUTUxVbmtub3duRWxlbWVudCcsXG4gICAgJ0lEQkRhdGFiYXNlJyxcbiAgICAnSURCUmVxdWVzdCcsXG4gICAgJ0lEQlRyYW5zYWN0aW9uJyxcbiAgICAnS2V5T3BlcmF0aW9uJyxcbiAgICAnTWVkaWFDb250cm9sbGVyJyxcbiAgICAnTWVzc2FnZVBvcnQnLFxuICAgICdNb2RhbFdpbmRvdycsXG4gICAgJ05vdGlmaWNhdGlvbicsXG4gICAgJ1NWR0VsZW1lbnRJbnN0YW5jZScsXG4gICAgJ1NjcmVlbicsXG4gICAgJ1RleHRUcmFjaycsXG4gICAgJ1RleHRUcmFja0N1ZScsXG4gICAgJ1RleHRUcmFja0xpc3QnLFxuICAgICdXZWJTb2NrZXQnLFxuICAgICdXZWJTb2NrZXRXb3JrZXInLFxuICAgICdXb3JrZXInLFxuICAgICdYTUxIdHRwUmVxdWVzdCcsXG4gICAgJ1hNTEh0dHBSZXF1ZXN0RXZlbnRUYXJnZXQnLFxuICAgICdYTUxIdHRwUmVxdWVzdFVwbG9hZCcsXG5dO1xuLyoqIFdyYXAgdGltZXIgZnVuY3Rpb25zIGFuZCBldmVudCB0YXJnZXRzIHRvIGNhdGNoIGVycm9ycyBhbmQgcHJvdmlkZSBiZXR0ZXIgbWV0YSBkYXRhICovXG52YXIgVHJ5Q2F0Y2ggPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBUcnlDYXRjaChvcHRpb25zKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gVHJ5Q2F0Y2guaWQ7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBfX2Fzc2lnbih7IFhNTEh0dHBSZXF1ZXN0OiB0cnVlLCBldmVudFRhcmdldDogdHJ1ZSwgcmVxdWVzdEFuaW1hdGlvbkZyYW1lOiB0cnVlLCBzZXRJbnRlcnZhbDogdHJ1ZSwgc2V0VGltZW91dDogdHJ1ZSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV3JhcCB0aW1lciBmdW5jdGlvbnMgYW5kIGV2ZW50IHRhcmdldHMgdG8gY2F0Y2ggZXJyb3JzXG4gICAgICogYW5kIHByb3ZpZGUgYmV0dGVyIG1ldGFkYXRhLlxuICAgICAqL1xuICAgIFRyeUNhdGNoLnByb3RvdHlwZS5zZXR1cE9uY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBnbG9iYWwgPSBnZXRHbG9iYWxPYmplY3QoKTtcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuc2V0VGltZW91dCkge1xuICAgICAgICAgICAgZmlsbChnbG9iYWwsICdzZXRUaW1lb3V0JywgdGhpcy5fd3JhcFRpbWVGdW5jdGlvbi5iaW5kKHRoaXMpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5zZXRJbnRlcnZhbCkge1xuICAgICAgICAgICAgZmlsbChnbG9iYWwsICdzZXRJbnRlcnZhbCcsIHRoaXMuX3dyYXBUaW1lRnVuY3Rpb24uYmluZCh0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgICAgICBmaWxsKGdsb2JhbCwgJ3JlcXVlc3RBbmltYXRpb25GcmFtZScsIHRoaXMuX3dyYXBSQUYuYmluZCh0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuWE1MSHR0cFJlcXVlc3QgJiYgJ1hNTEh0dHBSZXF1ZXN0JyBpbiBnbG9iYWwpIHtcbiAgICAgICAgICAgIGZpbGwoWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLCAnc2VuZCcsIHRoaXMuX3dyYXBYSFIuYmluZCh0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuZXZlbnRUYXJnZXQpIHtcbiAgICAgICAgICAgIHZhciBldmVudFRhcmdldCA9IEFycmF5LmlzQXJyYXkodGhpcy5fb3B0aW9ucy5ldmVudFRhcmdldCkgPyB0aGlzLl9vcHRpb25zLmV2ZW50VGFyZ2V0IDogREVGQVVMVF9FVkVOVF9UQVJHRVQ7XG4gICAgICAgICAgICBldmVudFRhcmdldC5mb3JFYWNoKHRoaXMuX3dyYXBFdmVudFRhcmdldC5iaW5kKHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgVHJ5Q2F0Y2gucHJvdG90eXBlLl93cmFwVGltZUZ1bmN0aW9uID0gZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgb3JpZ2luYWxDYWxsYmFjayA9IGFyZ3NbMF07XG4gICAgICAgICAgICBhcmdzWzBdID0gd3JhcChvcmlnaW5hbENhbGxiYWNrLCB7XG4gICAgICAgICAgICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgZnVuY3Rpb246IGdldEZ1bmN0aW9uTmFtZShvcmlnaW5hbCkgfSxcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2luc3RydW1lbnQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgVHJ5Q2F0Y2gucHJvdG90eXBlLl93cmFwUkFGID0gZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5jYWxsKHRoaXMsIHdyYXAoY2FsbGJhY2ssIHtcbiAgICAgICAgICAgICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb246ICdyZXF1ZXN0QW5pbWF0aW9uRnJhbWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcjogZ2V0RnVuY3Rpb25OYW1lKG9yaWdpbmFsKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2luc3RydW1lbnQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBUcnlDYXRjaC5wcm90b3R5cGUuX3dyYXBFdmVudFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgdmFyIGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdCgpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICAgIHZhciBwcm90byA9IGdsb2JhbFt0YXJnZXRdICYmIGdsb2JhbFt0YXJnZXRdLnByb3RvdHlwZTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICBpZiAoIXByb3RvIHx8ICFwcm90by5oYXNPd25Qcm9wZXJ0eSB8fCAhcHJvdG8uaGFzT3duUHJvcGVydHkoJ2FkZEV2ZW50TGlzdGVuZXInKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZpbGwocHJvdG8sICdhZGRFdmVudExpc3RlbmVyJywgZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50TmFtZSwgZm4sIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZuLmhhbmRsZUV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmbi5oYW5kbGVFdmVudCA9IHdyYXAoZm4uaGFuZGxlRXZlbnQuYmluZChmbiksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb246ICdoYW5kbGVFdmVudCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyOiBnZXRGdW5jdGlvbk5hbWUoZm4pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdpbnN0cnVtZW50JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAvLyBjYW4gc29tZXRpbWVzIGdldCAnUGVybWlzc2lvbiBkZW5pZWQgdG8gYWNjZXNzIHByb3BlcnR5IFwiaGFuZGxlIEV2ZW50J1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwuY2FsbCh0aGlzLCBldmVudE5hbWUsIFxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICAgICAgd3JhcChmbiwge1xuICAgICAgICAgICAgICAgICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbjogJ2FkZEV2ZW50TGlzdGVuZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXI6IGdldEZ1bmN0aW9uTmFtZShmbiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdpbnN0cnVtZW50JyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KSwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgZmlsbChwcm90bywgJ3JlbW92ZUV2ZW50TGlzdGVuZXInLCBmdW5jdGlvbiAob3JpZ2luYWxSZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50TmFtZSwgZm4sIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogVGhlcmUgYXJlIDIgcG9zc2libGUgc2NlbmFyaW9zIGhlcmU6XG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiAxLiBTb21lb25lIHBhc3NlcyBhIGNhbGxiYWNrLCB3aGljaCB3YXMgYXR0YWNoZWQgcHJpb3IgdG8gU2VudHJ5IGluaXRpYWxpemF0aW9uLCBvciBieSB1c2luZyB1bm1vZGlmaWVkXG4gICAgICAgICAgICAgICAgICogbWV0aG9kLCBlZy4gYGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIuY2FsbChlbCwgbmFtZSwgaGFuZGxlcikuIEluIHRoaXMgY2FzZSwgd2UgdHJlYXQgdGhpcyBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAqIGFzIGEgcGFzcy10aHJvdWdoLCBhbmQgY2FsbCBvcmlnaW5hbCBgcmVtb3ZlRXZlbnRMaXN0ZW5lcmAgd2l0aCBpdC5cbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIDIuIFNvbWVvbmUgcGFzc2VzIGEgY2FsbGJhY2ssIHdoaWNoIHdhcyBhdHRhY2hlZCBhZnRlciBTZW50cnkgd2FzIGluaXRpYWxpemVkLCB3aGljaCBtZWFucyB0aGF0IGl0IHdhcyB1c2luZ1xuICAgICAgICAgICAgICAgICAqIG91ciB3cmFwcGVkIHZlcnNpb24gb2YgYGFkZEV2ZW50TGlzdGVuZXJgLCB3aGljaCBpbnRlcm5hbGx5IGNhbGxzIGB3cmFwYCBoZWxwZXIuXG4gICAgICAgICAgICAgICAgICogVGhpcyBoZWxwZXIgXCJ3cmFwc1wiIHdob2xlIGNhbGxiYWNrIGluc2lkZSBhIHRyeS9jYXRjaCBzdGF0ZW1lbnQsIGFuZCBhdHRhY2hlZCBhcHByb3ByaWF0ZSBtZXRhZGF0YSB0byBpdCxcbiAgICAgICAgICAgICAgICAgKiBpbiBvcmRlciBmb3IgdXMgdG8gbWFrZSBhIGRpc3RpbmN0aW9uIGJldHdlZW4gd3JhcHBlZC9ub24td3JhcHBlZCBmdW5jdGlvbnMgcG9zc2libGUuXG4gICAgICAgICAgICAgICAgICogSWYgYSBmdW5jdGlvbiB3YXMgd3JhcHBlZCwgaXQgaGFzIGFkZGl0aW9uYWwgcHJvcGVydHkgb2YgYF9fc2VudHJ5X3dyYXBwZWRfX2AsIGhvbGRpbmcgdGhlIGhhbmRsZXIuXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBXaGVuIHNvbWVvbmUgYWRkcyBhIGhhbmRsZXIgcHJpb3IgdG8gaW5pdGlhbGl6YXRpb24sIGFuZCB0aGVuIGRvIGl0IGFnYWluLCBidXQgYWZ0ZXIsXG4gICAgICAgICAgICAgICAgICogdGhlbiB3ZSBoYXZlIHRvIGRldGFjaCBib3RoIG9mIHRoZW0uIE90aGVyd2lzZSwgaWYgd2UnZCBkZXRhY2ggb25seSB3cmFwcGVkIG9uZSwgaXQnZCBiZSBpbXBvc3NpYmxlXG4gICAgICAgICAgICAgICAgICogdG8gZ2V0IHJpZCBvZiB0aGUgaW5pdGlhbCBoYW5kbGVyIGFuZCBpdCdkIHN0aWNrIHRoZXJlIGZvcmV2ZXIuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdmFyIHdyYXBwZWRFdmVudEhhbmRsZXIgPSBmbjtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3JpZ2luYWxFdmVudEhhbmRsZXIgPSAoX2EgPSB3cmFwcGVkRXZlbnRIYW5kbGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuX19zZW50cnlfd3JhcHBlZF9fO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWxFdmVudEhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsUmVtb3ZlRXZlbnRMaXN0ZW5lci5jYWxsKHRoaXMsIGV2ZW50TmFtZSwgb3JpZ2luYWxFdmVudEhhbmRsZXIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlnbm9yZSwgYWNjZXNzaW5nIF9fc2VudHJ5X3dyYXBwZWRfXyB3aWxsIHRocm93IGluIHNvbWUgU2VsZW5pdW0gZW52aXJvbm1lbnRzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbFJlbW92ZUV2ZW50TGlzdGVuZXIuY2FsbCh0aGlzLCBldmVudE5hbWUsIHdyYXBwZWRFdmVudEhhbmRsZXIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBUcnlDYXRjaC5wcm90b3R5cGUuX3dyYXBYSFIgPSBmdW5jdGlvbiAob3JpZ2luYWxTZW5kKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXNcbiAgICAgICAgICAgIHZhciB4aHIgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHhtbEh0dHBSZXF1ZXN0UHJvcHMgPSBbJ29ubG9hZCcsICdvbmVycm9yJywgJ29ucHJvZ3Jlc3MnLCAnb25yZWFkeXN0YXRlY2hhbmdlJ107XG4gICAgICAgICAgICB4bWxIdHRwUmVxdWVzdFByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvcCBpbiB4aHIgJiYgdHlwZW9mIHhocltwcm9wXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICAgICAgICBmaWxsKHhociwgcHJvcCwgZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgd3JhcE9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uOiBwcm9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcjogZ2V0RnVuY3Rpb25OYW1lKG9yaWdpbmFsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2luc3RydW1lbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgSW5zdHJ1bWVudCBpbnRlZ3JhdGlvbiBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlIFRyeUNhdGNoLCBnZXQgdGhlIG5hbWUgb2Ygb3JpZ2luYWwgZnVuY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbC5fX3NlbnRyeV9vcmlnaW5hbF9fKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JhcE9wdGlvbnMubWVjaGFuaXNtLmRhdGEuaGFuZGxlciA9IGdldEZ1bmN0aW9uTmFtZShvcmlnaW5hbC5fX3NlbnRyeV9vcmlnaW5hbF9fKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSB3cmFwIGRpcmVjdGx5XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd3JhcChvcmlnaW5hbCwgd3JhcE9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbFNlbmQuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFRyeUNhdGNoLmlkID0gJ1RyeUNhdGNoJztcbiAgICByZXR1cm4gVHJ5Q2F0Y2g7XG59KCkpO1xuZXhwb3J0IHsgVHJ5Q2F0Y2ggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyeWNhdGNoLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MgKi9cbmltcG9ydCB7IGdldEN1cnJlbnRIdWIgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgU2V2ZXJpdHkgfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IGFkZEV4Y2VwdGlvbk1lY2hhbmlzbSwgYWRkSW5zdHJ1bWVudGF0aW9uSGFuZGxlciwgZ2V0TG9jYXRpb25IcmVmLCBpc0Vycm9yRXZlbnQsIGlzUHJpbWl0aXZlLCBpc1N0cmluZywgbG9nZ2VyLCB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgZXZlbnRGcm9tVW5rbm93bklucHV0IH0gZnJvbSAnLi4vZXZlbnRidWlsZGVyJztcbmltcG9ydCB7IHNob3VsZElnbm9yZU9uRXJyb3IgfSBmcm9tICcuLi9oZWxwZXJzJztcbi8qKiBHbG9iYWwgaGFuZGxlcnMgKi9cbnZhciBHbG9iYWxIYW5kbGVycyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBmdW5jdGlvbiBHbG9iYWxIYW5kbGVycyhvcHRpb25zKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gR2xvYmFsSGFuZGxlcnMuaWQ7XG4gICAgICAgIC8qKiBKU0RvYyAqL1xuICAgICAgICB0aGlzLl9vbkVycm9ySGFuZGxlckluc3RhbGxlZCA9IGZhbHNlO1xuICAgICAgICAvKiogSlNEb2MgKi9cbiAgICAgICAgdGhpcy5fb25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVySW5zdGFsbGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBfX2Fzc2lnbih7IG9uZXJyb3I6IHRydWUsIG9udW5oYW5kbGVkcmVqZWN0aW9uOiB0cnVlIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEdsb2JhbEhhbmRsZXJzLnByb3RvdHlwZS5zZXR1cE9uY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIEVycm9yLnN0YWNrVHJhY2VMaW1pdCA9IDUwO1xuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5vbmVycm9yKSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKCdHbG9iYWwgSGFuZGxlciBhdHRhY2hlZDogb25lcnJvcicpO1xuICAgICAgICAgICAgdGhpcy5faW5zdGFsbEdsb2JhbE9uRXJyb3JIYW5kbGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICAgIGxvZ2dlci5sb2coJ0dsb2JhbCBIYW5kbGVyIGF0dGFjaGVkOiBvbnVuaGFuZGxlZHJlamVjdGlvbicpO1xuICAgICAgICAgICAgdGhpcy5faW5zdGFsbEdsb2JhbE9uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBHbG9iYWxIYW5kbGVycy5wcm90b3R5cGUuX2luc3RhbGxHbG9iYWxPbkVycm9ySGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX29uRXJyb3JIYW5kbGVySW5zdGFsbGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYWRkSW5zdHJ1bWVudGF0aW9uSGFuZGxlcih7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVycm9yID0gZGF0YS5lcnJvcjtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudEh1YiA9IGdldEN1cnJlbnRIdWIoKTtcbiAgICAgICAgICAgICAgICB2YXIgaGFzSW50ZWdyYXRpb24gPSBjdXJyZW50SHViLmdldEludGVncmF0aW9uKEdsb2JhbEhhbmRsZXJzKTtcbiAgICAgICAgICAgICAgICB2YXIgaXNGYWlsZWRPd25EZWxpdmVyeSA9IGVycm9yICYmIGVycm9yLl9fc2VudHJ5X293bl9yZXF1ZXN0X18gPT09IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNJbnRlZ3JhdGlvbiB8fCBzaG91bGRJZ25vcmVPbkVycm9yKCkgfHwgaXNGYWlsZWRPd25EZWxpdmVyeSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBjbGllbnQgPSBjdXJyZW50SHViLmdldENsaWVudCgpO1xuICAgICAgICAgICAgICAgIHZhciBldmVudCA9IGlzUHJpbWl0aXZlKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICA/IF90aGlzLl9ldmVudEZyb21JbmNvbXBsZXRlT25FcnJvcihkYXRhLm1zZywgZGF0YS51cmwsIGRhdGEubGluZSwgZGF0YS5jb2x1bW4pXG4gICAgICAgICAgICAgICAgICAgIDogX3RoaXMuX2VuaGFuY2VFdmVudFdpdGhJbml0aWFsRnJhbWUoZXZlbnRGcm9tVW5rbm93bklucHV0KGVycm9yLCB1bmRlZmluZWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dGFjaFN0YWNrdHJhY2U6IGNsaWVudCAmJiBjbGllbnQuZ2V0T3B0aW9ucygpLmF0dGFjaFN0YWNrdHJhY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB9KSwgZGF0YS51cmwsIGRhdGEubGluZSwgZGF0YS5jb2x1bW4pO1xuICAgICAgICAgICAgICAgIGFkZEV4Y2VwdGlvbk1lY2hhbmlzbShldmVudCwge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ29uZXJyb3InLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRIdWIuY2FwdHVyZUV2ZW50KGV2ZW50LCB7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsRXhjZXB0aW9uOiBlcnJvcixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fb25FcnJvckhhbmRsZXJJbnN0YWxsZWQgPSB0cnVlO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgR2xvYmFsSGFuZGxlcnMucHJvdG90eXBlLl9pbnN0YWxsR2xvYmFsT25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5fb25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVySW5zdGFsbGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYWRkSW5zdHJ1bWVudGF0aW9uSGFuZGxlcih7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVycm9yID0gZTtcbiAgICAgICAgICAgICAgICAvLyBkaWcgdGhlIG9iamVjdCBvZiB0aGUgcmVqZWN0aW9uIG91dCBvZiBrbm93biBldmVudCB0eXBlc1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFByb21pc2VSZWplY3Rpb25FdmVudHMgc3RvcmUgdGhlIG9iamVjdCBvZiB0aGUgcmVqZWN0aW9uIHVuZGVyICdyZWFzb24nXG4gICAgICAgICAgICAgICAgICAgIC8vIHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvUHJvbWlzZVJlamVjdGlvbkV2ZW50XG4gICAgICAgICAgICAgICAgICAgIGlmICgncmVhc29uJyBpbiBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IGUucmVhc29uO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIHNvbWV0aGluZywgc29tZXdoZXJlLCAobGlrZWx5IGEgYnJvd3NlciBleHRlbnNpb24pIGVmZmVjdGl2ZWx5IGNhc3RzIFByb21pc2VSZWplY3Rpb25FdmVudHNcbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gQ3VzdG9tRXZlbnRzLCBtb3ZpbmcgdGhlIGBwcm9taXNlYCBhbmQgYHJlYXNvbmAgYXR0cmlidXRlcyBvZiB0aGUgUFJFIGludG9cbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIEN1c3RvbUV2ZW50J3MgYGRldGFpbGAgYXR0cmlidXRlLCBzaW5jZSB0aGV5J3JlIG5vdCBwYXJ0IG9mIEN1c3RvbUV2ZW50J3Mgc3BlY1xuICAgICAgICAgICAgICAgICAgICAvLyBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0N1c3RvbUV2ZW50IGFuZFxuICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L2lzc3Vlcy8yMzgwXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCdkZXRhaWwnIGluIGUgJiYgJ3JlYXNvbicgaW4gZS5kZXRhaWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gZS5kZXRhaWwucmVhc29uO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChfb08pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbm8tZW1wdHlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRIdWIgPSBnZXRDdXJyZW50SHViKCk7XG4gICAgICAgICAgICAgICAgdmFyIGhhc0ludGVncmF0aW9uID0gY3VycmVudEh1Yi5nZXRJbnRlZ3JhdGlvbihHbG9iYWxIYW5kbGVycyk7XG4gICAgICAgICAgICAgICAgdmFyIGlzRmFpbGVkT3duRGVsaXZlcnkgPSBlcnJvciAmJiBlcnJvci5fX3NlbnRyeV9vd25fcmVxdWVzdF9fID09PSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmICghaGFzSW50ZWdyYXRpb24gfHwgc2hvdWxkSWdub3JlT25FcnJvcigpIHx8IGlzRmFpbGVkT3duRGVsaXZlcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBjbGllbnQgPSBjdXJyZW50SHViLmdldENsaWVudCgpO1xuICAgICAgICAgICAgICAgIHZhciBldmVudCA9IGlzUHJpbWl0aXZlKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICA/IF90aGlzLl9ldmVudEZyb21JbmNvbXBsZXRlUmVqZWN0aW9uKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICA6IGV2ZW50RnJvbVVua25vd25JbnB1dChlcnJvciwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRhY2hTdGFja3RyYWNlOiBjbGllbnQgJiYgY2xpZW50LmdldE9wdGlvbnMoKS5hdHRhY2hTdGFja3RyYWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0aW9uOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBldmVudC5sZXZlbCA9IFNldmVyaXR5LkVycm9yO1xuICAgICAgICAgICAgICAgIGFkZEV4Y2VwdGlvbk1lY2hhbmlzbShldmVudCwge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ29udW5oYW5kbGVkcmVqZWN0aW9uJyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjdXJyZW50SHViLmNhcHR1cmVFdmVudChldmVudCwge1xuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEV4Y2VwdGlvbjogZXJyb3IsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHR5cGU6ICd1bmhhbmRsZWRyZWplY3Rpb24nLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fb25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVySW5zdGFsbGVkID0gdHJ1ZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gY3JlYXRlcyBhIHN0YWNrIGZyb20gYW4gb2xkLCBlcnJvci1sZXNzIG9uZXJyb3IgaGFuZGxlci5cbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIEdsb2JhbEhhbmRsZXJzLnByb3RvdHlwZS5fZXZlbnRGcm9tSW5jb21wbGV0ZU9uRXJyb3IgPSBmdW5jdGlvbiAobXNnLCB1cmwsIGxpbmUsIGNvbHVtbikge1xuICAgICAgICB2YXIgRVJST1JfVFlQRVNfUkUgPSAvXig/OltVdV1uY2F1Z2h0ICg/OmV4Y2VwdGlvbjogKT8pPyg/OigoPzpFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkl8KUVycm9yKTogKT8oLiopJC9pO1xuICAgICAgICAvLyBJZiAnbWVzc2FnZScgaXMgRXJyb3JFdmVudCwgZ2V0IHJlYWwgbWVzc2FnZSBmcm9tIGluc2lkZVxuICAgICAgICB2YXIgbWVzc2FnZSA9IGlzRXJyb3JFdmVudChtc2cpID8gbXNnLm1lc3NhZ2UgOiBtc2c7XG4gICAgICAgIHZhciBuYW1lO1xuICAgICAgICBpZiAoaXNTdHJpbmcobWVzc2FnZSkpIHtcbiAgICAgICAgICAgIHZhciBncm91cHMgPSBtZXNzYWdlLm1hdGNoKEVSUk9SX1RZUEVTX1JFKTtcbiAgICAgICAgICAgIGlmIChncm91cHMpIHtcbiAgICAgICAgICAgICAgICBuYW1lID0gZ3JvdXBzWzFdO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBncm91cHNbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGV2ZW50ID0ge1xuICAgICAgICAgICAgZXhjZXB0aW9uOiB7XG4gICAgICAgICAgICAgICAgdmFsdWVzOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG5hbWUgfHwgJ0Vycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBtZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5oYW5jZUV2ZW50V2l0aEluaXRpYWxGcmFtZShldmVudCwgdXJsLCBsaW5lLCBjb2x1bW4pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBjcmVhdGVzIGFuIEV2ZW50IGZyb20gYW4gVHJhY2VLaXRTdGFja1RyYWNlIHRoYXQgaGFzIHBhcnQgb2YgaXQgbWlzc2luZy5cbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIEdsb2JhbEhhbmRsZXJzLnByb3RvdHlwZS5fZXZlbnRGcm9tSW5jb21wbGV0ZVJlamVjdGlvbiA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXhjZXB0aW9uOiB7XG4gICAgICAgICAgICAgICAgdmFsdWVzOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdVbmhhbmRsZWRSZWplY3Rpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwiTm9uLUVycm9yIHByb21pc2UgcmVqZWN0aW9uIGNhcHR1cmVkIHdpdGggdmFsdWU6IFwiICsgZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIEdsb2JhbEhhbmRsZXJzLnByb3RvdHlwZS5fZW5oYW5jZUV2ZW50V2l0aEluaXRpYWxGcmFtZSA9IGZ1bmN0aW9uIChldmVudCwgdXJsLCBsaW5lLCBjb2x1bW4pIHtcbiAgICAgICAgZXZlbnQuZXhjZXB0aW9uID0gZXZlbnQuZXhjZXB0aW9uIHx8IHt9O1xuICAgICAgICBldmVudC5leGNlcHRpb24udmFsdWVzID0gZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyB8fCBbXTtcbiAgICAgICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXSA9IGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0gfHwge307XG4gICAgICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0uc3RhY2t0cmFjZSA9IGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0uc3RhY2t0cmFjZSB8fCB7fTtcbiAgICAgICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS5zdGFja3RyYWNlLmZyYW1lcyA9IGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0uc3RhY2t0cmFjZS5mcmFtZXMgfHwgW107XG4gICAgICAgIHZhciBjb2xubyA9IGlzTmFOKHBhcnNlSW50KGNvbHVtbiwgMTApKSA/IHVuZGVmaW5lZCA6IGNvbHVtbjtcbiAgICAgICAgdmFyIGxpbmVubyA9IGlzTmFOKHBhcnNlSW50KGxpbmUsIDEwKSkgPyB1bmRlZmluZWQgOiBsaW5lO1xuICAgICAgICB2YXIgZmlsZW5hbWUgPSBpc1N0cmluZyh1cmwpICYmIHVybC5sZW5ndGggPiAwID8gdXJsIDogZ2V0TG9jYXRpb25IcmVmKCk7XG4gICAgICAgIGlmIChldmVudC5leGNlcHRpb24udmFsdWVzWzBdLnN0YWNrdHJhY2UuZnJhbWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXS5zdGFja3RyYWNlLmZyYW1lcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBjb2xubzogY29sbm8sXG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IGZpbGVuYW1lLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uOiAnPycsXG4gICAgICAgICAgICAgICAgaW5fYXBwOiB0cnVlLFxuICAgICAgICAgICAgICAgIGxpbmVubzogbGluZW5vLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBHbG9iYWxIYW5kbGVycy5pZCA9ICdHbG9iYWxIYW5kbGVycyc7XG4gICAgcmV0dXJuIEdsb2JhbEhhbmRsZXJzO1xufSgpKTtcbmV4cG9ydCB7IEdsb2JhbEhhbmRsZXJzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbG9iYWxoYW5kbGVycy5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBhZGRHbG9iYWxFdmVudFByb2Nlc3NvciwgZ2V0Q3VycmVudEh1YiB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBpc0luc3RhbmNlT2YgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IGV4Y2VwdGlvbkZyb21TdGFja3RyYWNlIH0gZnJvbSAnLi4vcGFyc2Vycyc7XG5pbXBvcnQgeyBjb21wdXRlU3RhY2tUcmFjZSB9IGZyb20gJy4uL3RyYWNla2l0JztcbnZhciBERUZBVUxUX0tFWSA9ICdjYXVzZSc7XG52YXIgREVGQVVMVF9MSU1JVCA9IDU7XG4vKiogQWRkcyBTREsgaW5mbyB0byBhbiBldmVudC4gKi9cbnZhciBMaW5rZWRFcnJvcnMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMaW5rZWRFcnJvcnMob3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICAvKipcbiAgICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubmFtZSA9IExpbmtlZEVycm9ycy5pZDtcbiAgICAgICAgdGhpcy5fa2V5ID0gb3B0aW9ucy5rZXkgfHwgREVGQVVMVF9LRVk7XG4gICAgICAgIHRoaXMuX2xpbWl0ID0gb3B0aW9ucy5saW1pdCB8fCBERUZBVUxUX0xJTUlUO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIExpbmtlZEVycm9ycy5wcm90b3R5cGUuc2V0dXBPbmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBhZGRHbG9iYWxFdmVudFByb2Nlc3NvcihmdW5jdGlvbiAoZXZlbnQsIGhpbnQpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gZ2V0Q3VycmVudEh1YigpLmdldEludGVncmF0aW9uKExpbmtlZEVycm9ycyk7XG4gICAgICAgICAgICBpZiAoc2VsZikge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLl9oYW5kbGVyKGV2ZW50LCBoaW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBldmVudDtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIExpbmtlZEVycm9ycy5wcm90b3R5cGUuX2hhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQsIGhpbnQpIHtcbiAgICAgICAgaWYgKCFldmVudC5leGNlcHRpb24gfHwgIWV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMgfHwgIWhpbnQgfHwgIWlzSW5zdGFuY2VPZihoaW50Lm9yaWdpbmFsRXhjZXB0aW9uLCBFcnJvcikpIHtcbiAgICAgICAgICAgIHJldHVybiBldmVudDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGlua2VkRXJyb3JzID0gdGhpcy5fd2Fsa0Vycm9yVHJlZShoaW50Lm9yaWdpbmFsRXhjZXB0aW9uLCB0aGlzLl9rZXkpO1xuICAgICAgICBldmVudC5leGNlcHRpb24udmFsdWVzID0gX19zcHJlYWQobGlua2VkRXJyb3JzLCBldmVudC5leGNlcHRpb24udmFsdWVzKTtcbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBMaW5rZWRFcnJvcnMucHJvdG90eXBlLl93YWxrRXJyb3JUcmVlID0gZnVuY3Rpb24gKGVycm9yLCBrZXksIHN0YWNrKSB7XG4gICAgICAgIGlmIChzdGFjayA9PT0gdm9pZCAwKSB7IHN0YWNrID0gW107IH1cbiAgICAgICAgaWYgKCFpc0luc3RhbmNlT2YoZXJyb3Jba2V5XSwgRXJyb3IpIHx8IHN0YWNrLmxlbmd0aCArIDEgPj0gdGhpcy5fbGltaXQpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGFjaztcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RhY2t0cmFjZSA9IGNvbXB1dGVTdGFja1RyYWNlKGVycm9yW2tleV0pO1xuICAgICAgICB2YXIgZXhjZXB0aW9uID0gZXhjZXB0aW9uRnJvbVN0YWNrdHJhY2Uoc3RhY2t0cmFjZSk7XG4gICAgICAgIHJldHVybiB0aGlzLl93YWxrRXJyb3JUcmVlKGVycm9yW2tleV0sIGtleSwgX19zcHJlYWQoW2V4Y2VwdGlvbl0sIHN0YWNrKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIExpbmtlZEVycm9ycy5pZCA9ICdMaW5rZWRFcnJvcnMnO1xuICAgIHJldHVybiBMaW5rZWRFcnJvcnM7XG59KCkpO1xuZXhwb3J0IHsgTGlua2VkRXJyb3JzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saW5rZWRlcnJvcnMuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yLCBnZXRDdXJyZW50SHViIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IGdldEdsb2JhbE9iamVjdCB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xudmFyIGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdCgpO1xuLyoqIFVzZXJBZ2VudCAqL1xudmFyIFVzZXJBZ2VudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBVc2VyQWdlbnQoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gVXNlckFnZW50LmlkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFVzZXJBZ2VudC5wcm90b3R5cGUuc2V0dXBPbmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBhZGRHbG9iYWxFdmVudFByb2Nlc3NvcihmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICAgICAgaWYgKGdldEN1cnJlbnRIdWIoKS5nZXRJbnRlZ3JhdGlvbihVc2VyQWdlbnQpKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgbm9uZSBvZiB0aGUgaW5mb3JtYXRpb24gd2Ugd2FudCBleGlzdHMsIGRvbid0IGJvdGhlclxuICAgICAgICAgICAgICAgIGlmICghZ2xvYmFsLm5hdmlnYXRvciAmJiAhZ2xvYmFsLmxvY2F0aW9uICYmICFnbG9iYWwuZG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBncmFiIGFzIG11Y2ggaW5mbyBhcyBleGlzdHMgYW5kIGFkZCBpdCB0byB0aGUgZXZlbnRcbiAgICAgICAgICAgICAgICB2YXIgdXJsID0gKChfYSA9IGV2ZW50LnJlcXVlc3QpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS51cmwpIHx8ICgoX2IgPSBnbG9iYWwubG9jYXRpb24pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5ocmVmKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVmZXJyZXIgPSAoZ2xvYmFsLmRvY3VtZW50IHx8IHt9KS5yZWZlcnJlcjtcbiAgICAgICAgICAgICAgICB2YXIgdXNlckFnZW50ID0gKGdsb2JhbC5uYXZpZ2F0b3IgfHwge30pLnVzZXJBZ2VudDtcbiAgICAgICAgICAgICAgICB2YXIgaGVhZGVycyA9IF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKHt9LCAoX2MgPSBldmVudC5yZXF1ZXN0KSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuaGVhZGVycyksIChyZWZlcnJlciAmJiB7IFJlZmVyZXI6IHJlZmVycmVyIH0pKSwgKHVzZXJBZ2VudCAmJiB7ICdVc2VyLUFnZW50JzogdXNlckFnZW50IH0pKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdCA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCAodXJsICYmIHsgdXJsOiB1cmwgfSkpLCB7IGhlYWRlcnM6IGhlYWRlcnMgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBldmVudCksIHsgcmVxdWVzdDogcmVxdWVzdCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBldmVudDtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIFVzZXJBZ2VudC5pZCA9ICdVc2VyQWdlbnQnO1xuICAgIHJldHVybiBVc2VyQWdlbnQ7XG59KCkpO1xuZXhwb3J0IHsgVXNlckFnZW50IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VyYWdlbnQuanMubWFwIiwiaW1wb3J0IHsgZ2V0Q3VycmVudEh1YiwgaW5pdEFuZEJpbmQsIEludGVncmF0aW9ucyBhcyBDb3JlSW50ZWdyYXRpb25zIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IGdldEdsb2JhbE9iamVjdCwgU3luY1Byb21pc2UgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IEJyb3dzZXJDbGllbnQgfSBmcm9tICcuL2NsaWVudCc7XG5pbXBvcnQgeyB3cmFwIGFzIGludGVybmFsV3JhcCB9IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQgeyBCcmVhZGNydW1icywgR2xvYmFsSGFuZGxlcnMsIExpbmtlZEVycm9ycywgVHJ5Q2F0Y2gsIFVzZXJBZ2VudCB9IGZyb20gJy4vaW50ZWdyYXRpb25zJztcbmV4cG9ydCB2YXIgZGVmYXVsdEludGVncmF0aW9ucyA9IFtcbiAgICBuZXcgQ29yZUludGVncmF0aW9ucy5JbmJvdW5kRmlsdGVycygpLFxuICAgIG5ldyBDb3JlSW50ZWdyYXRpb25zLkZ1bmN0aW9uVG9TdHJpbmcoKSxcbiAgICBuZXcgVHJ5Q2F0Y2goKSxcbiAgICBuZXcgQnJlYWRjcnVtYnMoKSxcbiAgICBuZXcgR2xvYmFsSGFuZGxlcnMoKSxcbiAgICBuZXcgTGlua2VkRXJyb3JzKCksXG4gICAgbmV3IFVzZXJBZ2VudCgpLFxuXTtcbi8qKlxuICogVGhlIFNlbnRyeSBCcm93c2VyIFNESyBDbGllbnQuXG4gKlxuICogVG8gdXNlIHRoaXMgU0RLLCBjYWxsIHRoZSB7QGxpbmsgaW5pdH0gZnVuY3Rpb24gYXMgZWFybHkgYXMgcG9zc2libGUgd2hlblxuICogbG9hZGluZyB0aGUgd2ViIHBhZ2UuIFRvIHNldCBjb250ZXh0IGluZm9ybWF0aW9uIG9yIHNlbmQgbWFudWFsIGV2ZW50cywgdXNlXG4gKiB0aGUgcHJvdmlkZWQgbWV0aG9kcy5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYFxuICpcbiAqIGltcG9ydCB7IGluaXQgfSBmcm9tICdAc2VudHJ5L2Jyb3dzZXInO1xuICpcbiAqIGluaXQoe1xuICogICBkc246ICdfX0RTTl9fJyxcbiAqICAgLy8gLi4uXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqXG4gKiBpbXBvcnQgeyBjb25maWd1cmVTY29wZSB9IGZyb20gJ0BzZW50cnkvYnJvd3Nlcic7XG4gKiBjb25maWd1cmVTY29wZSgoc2NvcGU6IFNjb3BlKSA9PiB7XG4gKiAgIHNjb3BlLnNldEV4dHJhKHsgYmF0dGVyeTogMC43IH0pO1xuICogICBzY29wZS5zZXRUYWcoeyB1c2VyX21vZGU6ICdhZG1pbicgfSk7XG4gKiAgIHNjb3BlLnNldFVzZXIoeyBpZDogJzQ3MTEnIH0pO1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKlxuICogaW1wb3J0IHsgYWRkQnJlYWRjcnVtYiB9IGZyb20gJ0BzZW50cnkvYnJvd3Nlcic7XG4gKiBhZGRCcmVhZGNydW1iKHtcbiAqICAgbWVzc2FnZTogJ015IEJyZWFkY3J1bWInLFxuICogICAvLyAuLi5cbiAqIH0pO1xuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBcbiAqXG4gKiBpbXBvcnQgKiBhcyBTZW50cnkgZnJvbSAnQHNlbnRyeS9icm93c2VyJztcbiAqIFNlbnRyeS5jYXB0dXJlTWVzc2FnZSgnSGVsbG8sIHdvcmxkIScpO1xuICogU2VudHJ5LmNhcHR1cmVFeGNlcHRpb24obmV3IEVycm9yKCdHb29kIGJ5ZScpKTtcbiAqIFNlbnRyeS5jYXB0dXJlRXZlbnQoe1xuICogICBtZXNzYWdlOiAnTWFudWFsJyxcbiAqICAgc3RhY2t0cmFjZTogW1xuICogICAgIC8vIC4uLlxuICogICBdLFxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAc2VlIHtAbGluayBCcm93c2VyT3B0aW9uc30gZm9yIGRvY3VtZW50YXRpb24gb24gY29uZmlndXJhdGlvbiBvcHRpb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICBpZiAob3B0aW9ucy5kZWZhdWx0SW50ZWdyYXRpb25zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgb3B0aW9ucy5kZWZhdWx0SW50ZWdyYXRpb25zID0gZGVmYXVsdEludGVncmF0aW9ucztcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMucmVsZWFzZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciB3aW5kb3dfMSA9IGdldEdsb2JhbE9iamVjdCgpO1xuICAgICAgICAvLyBUaGlzIHN1cHBvcnRzIHRoZSB2YXJpYWJsZSB0aGF0IHNlbnRyeS13ZWJwYWNrLXBsdWdpbiBpbmplY3RzXG4gICAgICAgIGlmICh3aW5kb3dfMS5TRU5UUllfUkVMRUFTRSAmJiB3aW5kb3dfMS5TRU5UUllfUkVMRUFTRS5pZCkge1xuICAgICAgICAgICAgb3B0aW9ucy5yZWxlYXNlID0gd2luZG93XzEuU0VOVFJZX1JFTEVBU0UuaWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuYXV0b1Nlc3Npb25UcmFja2luZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG9wdGlvbnMuYXV0b1Nlc3Npb25UcmFja2luZyA9IGZhbHNlO1xuICAgIH1cbiAgICBpbml0QW5kQmluZChCcm93c2VyQ2xpZW50LCBvcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucy5hdXRvU2Vzc2lvblRyYWNraW5nKSB7XG4gICAgICAgIHN0YXJ0U2Vzc2lvblRyYWNraW5nKCk7XG4gICAgfVxufVxuLyoqXG4gKiBQcmVzZW50IHRoZSB1c2VyIHdpdGggYSByZXBvcnQgZGlhbG9nLlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIEV2ZXJ5dGhpbmcgaXMgb3B0aW9uYWwsIHdlIHRyeSB0byBmZXRjaCBhbGwgaW5mbyBuZWVkIGZyb20gdGhlIGdsb2JhbCBzY29wZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNob3dSZXBvcnREaWFsb2cob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgaWYgKCFvcHRpb25zLmV2ZW50SWQpIHtcbiAgICAgICAgb3B0aW9ucy5ldmVudElkID0gZ2V0Q3VycmVudEh1YigpLmxhc3RFdmVudElkKCk7XG4gICAgfVxuICAgIHZhciBjbGllbnQgPSBnZXRDdXJyZW50SHViKCkuZ2V0Q2xpZW50KCk7XG4gICAgaWYgKGNsaWVudCkge1xuICAgICAgICBjbGllbnQuc2hvd1JlcG9ydERpYWxvZyhvcHRpb25zKTtcbiAgICB9XG59XG4vKipcbiAqIFRoaXMgaXMgdGhlIGdldHRlciBmb3IgbGFzdEV2ZW50SWQuXG4gKlxuICogQHJldHVybnMgVGhlIGxhc3QgZXZlbnQgaWQgb2YgYSBjYXB0dXJlZCBldmVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxhc3RFdmVudElkKCkge1xuICAgIHJldHVybiBnZXRDdXJyZW50SHViKCkubGFzdEV2ZW50SWQoKTtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBoZXJlIHRvIGJlIEFQSSBjb21wYXRpYmxlIHdpdGggdGhlIGxvYWRlci5cbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcmNlTG9hZCgpIHtcbiAgICAvLyBOb29wXG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgaGVyZSB0byBiZSBBUEkgY29tcGF0aWJsZSB3aXRoIHRoZSBsb2FkZXIuXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbkxvYWQoY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjaygpO1xufVxuLyoqXG4gKiBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGFsbCBjdXJyZW50IGV2ZW50cyBoYXZlIGJlZW4gc2VudC5cbiAqIElmIHlvdSBwcm92aWRlIGEgdGltZW91dCBhbmQgdGhlIHF1ZXVlIHRha2VzIGxvbmdlciB0byBkcmFpbiB0aGUgcHJvbWlzZSByZXR1cm5zIGZhbHNlLlxuICpcbiAqIEBwYXJhbSB0aW1lb3V0IE1heGltdW0gdGltZSBpbiBtcyB0aGUgY2xpZW50IHNob3VsZCB3YWl0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZmx1c2godGltZW91dCkge1xuICAgIHZhciBjbGllbnQgPSBnZXRDdXJyZW50SHViKCkuZ2V0Q2xpZW50KCk7XG4gICAgaWYgKGNsaWVudCkge1xuICAgICAgICByZXR1cm4gY2xpZW50LmZsdXNoKHRpbWVvdXQpO1xuICAgIH1cbiAgICByZXR1cm4gU3luY1Byb21pc2UucmVqZWN0KGZhbHNlKTtcbn1cbi8qKlxuICogQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBhbGwgY3VycmVudCBldmVudHMgaGF2ZSBiZWVuIHNlbnQuXG4gKiBJZiB5b3UgcHJvdmlkZSBhIHRpbWVvdXQgYW5kIHRoZSBxdWV1ZSB0YWtlcyBsb25nZXIgdG8gZHJhaW4gdGhlIHByb21pc2UgcmV0dXJucyBmYWxzZS5cbiAqXG4gKiBAcGFyYW0gdGltZW91dCBNYXhpbXVtIHRpbWUgaW4gbXMgdGhlIGNsaWVudCBzaG91bGQgd2FpdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsb3NlKHRpbWVvdXQpIHtcbiAgICB2YXIgY2xpZW50ID0gZ2V0Q3VycmVudEh1YigpLmdldENsaWVudCgpO1xuICAgIGlmIChjbGllbnQpIHtcbiAgICAgICAgcmV0dXJuIGNsaWVudC5jbG9zZSh0aW1lb3V0KTtcbiAgICB9XG4gICAgcmV0dXJuIFN5bmNQcm9taXNlLnJlamVjdChmYWxzZSk7XG59XG4vKipcbiAqIFdyYXAgY29kZSB3aXRoaW4gYSB0cnkvY2F0Y2ggYmxvY2sgc28gdGhlIFNESyBpcyBhYmxlIHRvIGNhcHR1cmUgZXJyb3JzLlxuICpcbiAqIEBwYXJhbSBmbiBBIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKlxuICogQHJldHVybnMgVGhlIHJlc3VsdCBvZiB3cmFwcGVkIGZ1bmN0aW9uIGNhbGwuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5leHBvcnQgZnVuY3Rpb24gd3JhcChmbikge1xuICAgIHJldHVybiBpbnRlcm5hbFdyYXAoZm4pKCk7XG59XG4vKipcbiAqIEVuYWJsZSBhdXRvbWF0aWMgU2Vzc2lvbiBUcmFja2luZyBmb3IgdGhlIGluaXRpYWwgcGFnZSBsb2FkLlxuICovXG5mdW5jdGlvbiBzdGFydFNlc3Npb25UcmFja2luZygpIHtcbiAgICB2YXIgd2luZG93ID0gZ2V0R2xvYmFsT2JqZWN0KCk7XG4gICAgdmFyIGh1YiA9IGdldEN1cnJlbnRIdWIoKTtcbiAgICAvKipcbiAgICAgKiBXZSBzaG91bGQgYmUgdXNpbmcgYFByb21pc2UuYWxsKFt3aW5kb3dMb2FkZWQsIGZpcnN0Q29udGVudGZ1bFBhaW50XSlgIGhlcmUsXG4gICAgICogYnV0LCBhcyBhbHdheXMsIGl0J3Mgbm90IGF2YWlsYWJsZSBpbiB0aGUgSUUxMC0xMS4gVGhhbmtzIElFLlxuICAgICAqL1xuICAgIHZhciBsb2FkUmVzb2x2ZWQgPSBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnO1xuICAgIHZhciBmY3BSZXNvbHZlZCA9IGZhbHNlO1xuICAgIHZhciBwb3NzaWJseUVuZFNlc3Npb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChmY3BSZXNvbHZlZCAmJiBsb2FkUmVzb2x2ZWQpIHtcbiAgICAgICAgICAgIGh1Yi5lbmRTZXNzaW9uKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZXNvbHZlV2luZG93TG9hZGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBsb2FkUmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICBwb3NzaWJseUVuZFNlc3Npb24oKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xvYWQnLCByZXNvbHZlV2luZG93TG9hZGVkKTtcbiAgICB9O1xuICAgIGh1Yi5zdGFydFNlc3Npb24oKTtcbiAgICBpZiAoIWxvYWRSZXNvbHZlZCkge1xuICAgICAgICAvLyBJRSBkb2Vzbid0IHN1cHBvcnQgYHsgb25jZTogdHJ1ZSB9YCBmb3IgZXZlbnQgbGlzdGVuZXJzLCBzbyB3ZSBoYXZlIHRvIG1hbnVhbGx5XG4gICAgICAgIC8vIGF0dGFjaCBhbmQgdGhlbiBkZXRhY2ggaXQgb25jZSBjb21wbGV0ZWQuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgcmVzb2x2ZVdpbmRvd0xvYWRlZCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHZhciBwbyA9IG5ldyBQZXJmb3JtYW5jZU9ic2VydmVyKGZ1bmN0aW9uIChlbnRyeUxpc3QsIHBvKSB7XG4gICAgICAgICAgICBlbnRyeUxpc3QuZ2V0RW50cmllcygpLmZvckVhY2goZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5Lm5hbWUgPT09ICdmaXJzdC1jb250ZW50ZnVsLXBhaW50JyAmJiBlbnRyeS5zdGFydFRpbWUgPCBmaXJzdEhpZGRlblRpbWVfMSkge1xuICAgICAgICAgICAgICAgICAgICBwby5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIGZjcFJlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcG9zc2libHlFbmRTZXNzaW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBUaGVyZSdzIG5vIG5lZWQgdG8gZXZlbiBhdHRhY2ggdGhpcyBsaXN0ZW5lciBpZiBgUGVyZm9ybWFuY2VPYnNlcnZlcmAgY29uc3RydWN0b3Igd2lsbCBmYWlsLFxuICAgICAgICAvLyBzbyB3ZSBkbyBpdCBiZWxvdyBoZXJlLlxuICAgICAgICB2YXIgZmlyc3RIaWRkZW5UaW1lXzEgPSBkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09ICdoaWRkZW4nID8gMCA6IEluZmluaXR5O1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBmaXJzdEhpZGRlblRpbWVfMSA9IE1hdGgubWluKGZpcnN0SGlkZGVuVGltZV8xLCBldmVudC50aW1lU3RhbXApO1xuICAgICAgICB9LCB7IG9uY2U6IHRydWUgfSk7XG4gICAgICAgIHBvLm9ic2VydmUoe1xuICAgICAgICAgICAgdHlwZTogJ3BhaW50JyxcbiAgICAgICAgICAgIGJ1ZmZlcmVkOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgZmNwUmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICBwb3NzaWJseUVuZFNlc3Npb24oKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZGsuanMubWFwIiwiaW1wb3J0IHsgZ2V0Q3VycmVudEh1YiB9IGZyb20gJ0BzZW50cnkvaHViJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuLyoqXG4gKiBJbnRlcm5hbCBmdW5jdGlvbiB0byBjcmVhdGUgYSBuZXcgU0RLIGNsaWVudCBpbnN0YW5jZS4gVGhlIGNsaWVudCBpc1xuICogaW5zdGFsbGVkIGFuZCB0aGVuIGJvdW5kIHRvIHRoZSBjdXJyZW50IHNjb3BlLlxuICpcbiAqIEBwYXJhbSBjbGllbnRDbGFzcyBUaGUgY2xpZW50IGNsYXNzIHRvIGluc3RhbnRpYXRlLlxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyB0byBwYXNzIHRvIHRoZSBjbGllbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0QW5kQmluZChjbGllbnRDbGFzcywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLmRlYnVnID09PSB0cnVlKSB7XG4gICAgICAgIGxvZ2dlci5lbmFibGUoKTtcbiAgICB9XG4gICAgdmFyIGh1YiA9IGdldEN1cnJlbnRIdWIoKTtcbiAgICB2YXIgY2xpZW50ID0gbmV3IGNsaWVudENsYXNzKG9wdGlvbnMpO1xuICAgIGh1Yi5iaW5kQ2xpZW50KGNsaWVudCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZGsuanMubWFwIiwiaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gJ0BzZW50cnkvYnJvd3Nlcic7XG5cbmV4cG9ydCBjb25zdCBpbml0U2VudHJ5ID0gKCk6IHZvaWQgPT5cbiAgU2VudHJ5LmluaXQoe1xuICAgIGRzbjogU0VOVFJZX0RTTixcbiAgICByZWxlYXNlOiBBUFBfVkVSU0lPTixcbiAgfSk7XG4iLCJpbXBvcnQgeyBMb2NhbGVBY3Rpb24gfSBmcm9tICcuL2FjdGlvbnMvc2V0TG9jYWxlJztcbmltcG9ydCB7IEFDVElPTl9UWVBFIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5jb25zdCBsb2NhbGVzU3RhcnRzV2l0aFN1bmRheSA9IFsnZW4nXTtcblxuZXhwb3J0IGVudW0gV2Vla1N0YXJ0c09uVHlwZSB7XG4gIFN1biA9IDAsXG4gIE1vbiA9IDEsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTDEwblN0YXRlIHtcbiAgbG9jYWxlOiBzdHJpbmc7XG4gIHdlZWtTdGFydHNPbjogV2Vla1N0YXJ0c09uVHlwZTtcbn1cblxuY29uc3QgaW5pdGlhbFN0YXRlOiBMMTBuU3RhdGUgPSB7XG4gIGxvY2FsZTogJ3J1JyxcbiAgd2Vla1N0YXJ0c09uOiAxLFxufTtcblxuY29uc3QgbDEwbiA9IChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uOiBMb2NhbGVBY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgQUNUSU9OX1RZUEUuU0VUX0xPQ0FMRTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAvLyBIYWNrIGZvciBzZXJiaWFuIGxvY2FsZSwgYmVjYXVzZSBkZWZhdWx0IERhdGVUaW1lRm9ybWF0ZSBmb3Igc3IgbG9jYWxlIGlzIEN5cmlsbGljLiBXZSBuZWVkIExhdGluIHZlcnNpb24uXG4gICAgICAgIGxvY2FsZTogYWN0aW9uLmxvY2FsZSA9PT0gJ3NyJyA/ICdzci1MYXRuJyA6IGFjdGlvbi5sb2NhbGUsXG4gICAgICAgIHdlZWtTdGFydHNPbjogbG9jYWxlc1N0YXJ0c1dpdGhTdW5kYXkuaW5jbHVkZXMoYWN0aW9uLmxvY2FsZSlcbiAgICAgICAgICA/IFdlZWtTdGFydHNPblR5cGUuU3VuXG4gICAgICAgICAgOiBXZWVrU3RhcnRzT25UeXBlLk1vbixcbiAgICAgIH07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgbDEwbjtcbiIsImV4cG9ydCBlbnVtIEFDVElPTl9UWVBFIHtcbiAgU0VUX0FWSUFfU1VHR0VTVCA9ICdTRVRfQVZJQV9TVUdHRVNUJyxcbn1cbiIsImltcG9ydCB7IFN1Z2dlc3QgfSBmcm9tICcuL3BhcnNlcnMvcGFyc2VTdWdnZXN0JztcbmltcG9ydCB7IFN1Z2dlc3RBY3Rpb24gfSBmcm9tICcuL2FjdGlvbnMvc2V0U3VnZ2VzdCc7XG5pbXBvcnQgeyBBQ1RJT05fVFlQRSB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuZXhwb3J0IGludGVyZmFjZSBBdmlhRGVzdGluYXRpb25TdGF0ZSB7XG4gIHN1Z2dlc3RzOiBSZWNvcmQ8c3RyaW5nLCBTdWdnZXN0Pjtcbn1cblxuY29uc3QgaW5pdGlhbFN0YXRlOiBBdmlhRGVzdGluYXRpb25TdGF0ZSA9IHtcbiAgc3VnZ2VzdHM6IHt9LFxufTtcblxuY29uc3QgYXZpYURlc3RpbmF0aW9uID0gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb246IFN1Z2dlc3RBY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgQUNUSU9OX1RZUEUuU0VUX0FWSUFfU1VHR0VTVDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Z2dlc3RzOiB7XG4gICAgICAgICAgLi4uc3RhdGUuc3VnZ2VzdHMsXG4gICAgICAgICAgW2FjdGlvbi5xdWVyeV06IGFjdGlvbi5zdWdnZXN0LFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhdmlhRGVzdGluYXRpb247XG4iLCJleHBvcnQgZW51bSBBQ1RJT05fVFlQRSB7XG4gIFNFVF9UUkFOU0ZFUl9TVUdHRVNUID0gJ1NFVF9UUkFOU0ZFUl9TVUdHRVNUJyxcbn1cbiIsImltcG9ydCB7IFN1Z2dlc3QgfSBmcm9tICcuL3BhcnNlcnMvcGFyc2VTdWdnZXN0JztcbmltcG9ydCB7IFN1Z2dlc3RBY3Rpb24gfSBmcm9tICcuL2FjdGlvbnMvc2V0U3VnZ2VzdCc7XG5pbXBvcnQgeyBBQ1RJT05fVFlQRSB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuZXhwb3J0IGludGVyZmFjZSBUcmFuc2ZlckRlc3RpbmF0aW9uU3RhdGUge1xuICBzdWdnZXN0czogUmVjb3JkPHN0cmluZywgU3VnZ2VzdD47XG59XG5cbmNvbnN0IGluaXRpYWxTdGF0ZTogVHJhbnNmZXJEZXN0aW5hdGlvblN0YXRlID0ge1xuICBzdWdnZXN0czoge30sXG59O1xuXG5jb25zdCB0cmFuc2ZlckRlc3RpbmF0aW9uID0gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb246IFN1Z2dlc3RBY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgQUNUSU9OX1RZUEUuU0VUX1RSQU5TRkVSX1NVR0dFU1Q6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWdnZXN0czoge1xuICAgICAgICAgIC4uLnN0YXRlLnN1Z2dlc3RzLFxuICAgICAgICAgIFthY3Rpb24ucXVlcnldOiBhY3Rpb24uc3VnZ2VzdCxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNmZXJEZXN0aW5hdGlvbjtcbiIsImV4cG9ydCBlbnVtIEFDVElPTl9UWVBFIHtcbiAgU0VUX1NVR0dFU1QgPSAnU0VUX1NVR0dFU1QnLFxufVxuIiwiaW1wb3J0IHsgU3VnZ2VzdCB9IGZyb20gJy4vcGFyc2Vycy9wYXJzZVN1Z2dlc3QnO1xuaW1wb3J0IHsgU3VnZ2VzdEFjdGlvbiB9IGZyb20gJy4vYWN0aW9ucy9zZXRTdWdnZXN0JztcbmltcG9ydCB7IEFDVElPTl9UWVBFIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERlc3RpbmF0aW9uU3RhdGUge1xuICBzdWdnZXN0czogUmVjb3JkPHN0cmluZywgU3VnZ2VzdD47XG59XG5cbmNvbnN0IGluaXRpYWxTdGF0ZTogRGVzdGluYXRpb25TdGF0ZSA9IHtcbiAgc3VnZ2VzdHM6IHt9LFxufTtcblxuY29uc3QgZGVzdGluYXRpb24gPSAoXG4gIHN0YXRlID0gaW5pdGlhbFN0YXRlLFxuICBhY3Rpb246IFN1Z2dlc3RBY3Rpb25cbik6IERlc3RpbmF0aW9uU3RhdGUgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBBQ1RJT05fVFlQRS5TRVRfU1VHR0VTVDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Z2dlc3RzOiB7XG4gICAgICAgICAgLi4uc3RhdGUuc3VnZ2VzdHMsXG4gICAgICAgICAgW2FjdGlvbi5xdWVyeV06IGFjdGlvbi5zdWdnZXN0LFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBkZXN0aW5hdGlvbjtcbiIsImV4cG9ydCBlbnVtIEFDVElPTl9UWVBFIHtcbiAgU0VUX0hPTElEQVlTID0gJ1NFVF9IT0xJREFZUycsXG4gIFNFVF9IT0xJREFZU19MT0FESU5HID0gJ1NFVF9IT0xJREFZU19MT0FESU5HJyxcbn1cbiIsImltcG9ydCB7IEFDVElPTl9UWVBFIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgSG9saWRheXMgfSBmcm9tICcuL3BhcnNlcnMvcGFyc2VIb2xpZGF5cyc7XG5pbXBvcnQgeyBIb2xpZGF5c0FjdGlvbiB9IGZyb20gJy4vYWN0aW9ucy9zZXRIb2xpZGF5cyc7XG5pbXBvcnQgeyBMb2FkaW5nQWN0aW9uIH0gZnJvbSAnLi9hY3Rpb25zL3NldExvYWRpbmcnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEhvbGlkYXlzU3RhdGUge1xuICBsaXN0OiBIb2xpZGF5cyB8IG51bGw7XG4gIGxvYWRpbmc6IGJvb2xlYW47XG59XG5cbmNvbnN0IGluaXRpYWxTdGF0ZTogSG9saWRheXNTdGF0ZSA9IHtcbiAgbGlzdDogbnVsbCxcbiAgbG9hZGluZzogZmFsc2UsXG59O1xuXG5jb25zdCBob2xpZGF5cyA9IChcbiAgc3RhdGUgPSBpbml0aWFsU3RhdGUsXG4gIGFjdGlvbjogSG9saWRheXNBY3Rpb24gJiBMb2FkaW5nQWN0aW9uXG4pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgQUNUSU9OX1RZUEUuU0VUX0hPTElEQVlTOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGlzdDogYWN0aW9uLmxpc3QgfHwgc3RhdGUubGlzdCxcbiAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICB9O1xuICAgIGNhc2UgQUNUSU9OX1RZUEUuU0VUX0hPTElEQVlTX0xPQURJTkc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgbG9hZGluZzogYWN0aW9uLmxvYWRpbmcsXG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGhvbGlkYXlzO1xuIiwiZXhwb3J0IGVudW0gQUNUSU9OX1RZUEUge1xuICBTRVRfQ09VTlRSSUVTID0gJ1NFVF9DT1VOVFJJRVMnLFxuICBTRVRfTE9BRElORyA9ICdTRVRfTE9BRElORycsXG4gIElOQ19UUllfQ09VTlQgPSAnSU5DX1RSWV9DT1VOVCcsXG59XG5cbmV4cG9ydCBjb25zdCBSRVRSSUVTX0xJTUlUID0gMTA7XG4iLCJpbXBvcnQgeyBDb3VudHJ5IH0gZnJvbSAnLi9wYXJzZXJzL3BhcnNlQ291bnRyaWVzJztcbmltcG9ydCB7IENvdW50cmllc0FjdGlvbiB9IGZyb20gJy4vYWN0aW9ucy9zZXRDb3VudHJpZXMnO1xuaW1wb3J0IHsgTG9hZGluZ0FjdGlvbiB9IGZyb20gJy4vYWN0aW9ucy9zZXRMb2FkaW5nJztcbmltcG9ydCB7IEFDVElPTl9UWVBFIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvdW50cmllc1N0YXRlIHtcbiAgbGlzdDogQ291bnRyeVtdO1xuICBsb2FkaW5nOiBib29sZWFuO1xuICB0cnlDb3VudDogbnVtYmVyO1xufVxuXG5jb25zdCBpbml0aWFsU3RhdGU6IENvdW50cmllc1N0YXRlID0ge1xuICBsaXN0OiBbXSxcbiAgbG9hZGluZzogZmFsc2UsXG4gIHRyeUNvdW50OiAwLFxufTtcblxuY29uc3QgY291bnRyaWVzID0gKFxuICBzdGF0ZSA9IGluaXRpYWxTdGF0ZSxcbiAgYWN0aW9uOiBDb3VudHJpZXNBY3Rpb24gJiBMb2FkaW5nQWN0aW9uXG4pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgQUNUSU9OX1RZUEUuU0VUX0NPVU5UUklFUzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBsaXN0OiBhY3Rpb24uY291bnRyaWVzLFxuICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgIH07XG4gICAgY2FzZSBBQ1RJT05fVFlQRS5TRVRfTE9BRElORzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBsb2FkaW5nOiBhY3Rpb24ubG9hZGluZyxcbiAgICAgIH07XG4gICAgY2FzZSBBQ1RJT05fVFlQRS5JTkNfVFJZX0NPVU5UOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHRyeUNvdW50OiBzdGF0ZS50cnlDb3VudCArIDEsXG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvdW50cmllcztcbiIsImV4cG9ydCBlbnVtIEFDVElPTl9UWVBFIHtcbiAgU0VUX0NJVElaRU5TSElQID0gJ1NFVF9DSVRJWkVOU0hJUCcsXG59XG5cbmV4cG9ydCBjb25zdCBMT0NBTF9TVE9SQUdFX0tFWSA9ICdjaXRpemVuc2hpcCc7XG4iLCJpbXBvcnQgeyBDaXRpemVuc2hpcEFjdGlvbiB9IGZyb20gJy4vYWN0aW9ucy9zZXRDaXRpemVuc2hpcCc7XG5pbXBvcnQgeyBDb3VudHJ5IH0gZnJvbSAnLi4vY291bnRyaWVzL3BhcnNlcnMvcGFyc2VDb3VudHJpZXMnO1xuaW1wb3J0IHsgQUNUSU9OX1RZUEUsIExPQ0FMX1NUT1JBR0VfS0VZIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIENpdGl6ZW5zaGlwU3RhdGUge1xuICBwb3B1bGFyOiBDb3VudHJ5W107XG4gIHZhbHVlOiBDb3VudHJ5IHwgbnVsbDtcbn1cblxuY29uc3QgZ2V0U3RvcmVkVmFsdWUgPSAoKTogQ2l0aXplbnNoaXBTdGF0ZSA9PiB7XG4gIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IHtcbiAgICBwb3B1bGFyOiBbXSxcbiAgICB2YWx1ZTogbnVsbCxcbiAgfTtcblxuICB0cnkge1xuICAgIGNvbnN0IHN0b3JlZFZhbHVlID0gSlNPTi5wYXJzZShcbiAgICAgIGxvY2FsU3RvcmFnZS5nZXRJdGVtKExPQ0FMX1NUT1JBR0VfS0VZKSB8fCAnJ1xuICAgICk7XG5cbiAgICByZXR1cm4gc3RvcmVkVmFsdWUgfHwgZGVmYXVsdFZhbHVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgfVxufTtcblxuY29uc3Qgc2V0Q2l0aXplbnNoaXBIYW5kbGVyID0gKFxuICBzdGF0ZTogQ2l0aXplbnNoaXBTdGF0ZSxcbiAgY291bnRyeTogQ291bnRyeSB8IG51bGxcbik6IENpdGl6ZW5zaGlwU3RhdGUgPT4ge1xuICBpZiAoIWNvdW50cnkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcG9wdWxhcjogc3RhdGUucG9wdWxhcixcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgIH07XG4gIH1cblxuICBpZiAoc3RhdGUucG9wdWxhci5zb21lKChpdGVtKSA9PiBpdGVtLmNvZGUgPT09IGNvdW50cnkuY29kZSkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcG9wdWxhcjogc3RhdGUucG9wdWxhcixcbiAgICAgIHZhbHVlOiBjb3VudHJ5LFxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBvcHVsYXI6IFsuLi5zdGF0ZS5wb3B1bGFyLCBjb3VudHJ5XS5zbGljZSgtMyksXG4gICAgdmFsdWU6IGNvdW50cnksXG4gIH07XG59O1xuXG5jb25zdCBjaXRpemVuc2hpcCA9IChzdGF0ZSA9IGdldFN0b3JlZFZhbHVlKCksIGFjdGlvbjogQ2l0aXplbnNoaXBBY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgQUNUSU9OX1RZUEUuU0VUX0NJVElaRU5TSElQOlxuICAgICAgcmV0dXJuIHNldENpdGl6ZW5zaGlwSGFuZGxlcihzdGF0ZSwgYWN0aW9uLmNvdW50cnkpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNpdGl6ZW5zaGlwO1xuIiwiaW1wb3J0IHsgU2V0dGluZ3MsIFNldHRpbmdzQWN0aW9uIH0gZnJvbSAnLi9hY3Rpb25zL3NldFNldHRpbmdzJztcbmltcG9ydCB7IEFDVElPTl9UWVBFIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5jb25zdCBpbml0aWFsU3RhdGU6IFNldHRpbmdzID0ge307XG5cbmNvbnN0IHNldHRpbmdzID0gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb246IFNldHRpbmdzQWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIEFDVElPTl9UWVBFLlNFVF9TRVRUSU5HUzpcbiAgICAgIHJldHVybiBhY3Rpb24uc2V0dGluZ3M7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgc2V0dGluZ3M7XG4iLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdyZWR1eCc7XG5cbmltcG9ydCB0aGVtZSBmcm9tICcuL3RoZW1lJztcbmltcG9ydCBsMTBuIGZyb20gJy4vbDEwbic7XG5pbXBvcnQgYXZpYURlc3RpbmF0aW9uIGZyb20gJy4vYXZpYURlc3RpbmF0aW9uJztcbmltcG9ydCB0cmFuc2ZlckRlc3RpbmF0aW9uIGZyb20gJy4vdHJhbnNmZXJEZXN0aW5hdGlvbic7XG5pbXBvcnQgZGVzdGluYXRpb24gZnJvbSAnLi9kZXN0aW5hdGlvbic7XG5pbXBvcnQgaG9saWRheXMgZnJvbSAnLi9ob2xpZGF5cyc7XG5pbXBvcnQgY291bnRyaWVzIGZyb20gJy4vY291bnRyaWVzJztcbmltcG9ydCBjaXRpemVuc2hpcCBmcm9tICcuL2NpdGl6ZW5zaGlwJztcbmltcG9ydCBzZXR0aW5ncyBmcm9tICcuL3NldHRpbmdzJztcblxuZXhwb3J0IGRlZmF1bHQgY29tYmluZVJlZHVjZXJzKHtcbiAgdGhlbWUsXG4gIGwxMG4sXG4gIGF2aWFEZXN0aW5hdGlvbixcbiAgdHJhbnNmZXJEZXN0aW5hdGlvbixcbiAgZGVzdGluYXRpb24sXG4gIGhvbGlkYXlzLFxuICBjb3VudHJpZXMsXG4gIGNpdGl6ZW5zaGlwLFxuICBzZXR0aW5ncyxcbn0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBmaW5kVGFiYmFibGVEZXNjZW5kYW50cztcbi8qIVxuICogQWRhcHRlZCBmcm9tIGpRdWVyeSBVSSBjb3JlXG4gKlxuICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICpcbiAqIENvcHlyaWdodCAyMDE0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9jYXRlZ29yeS91aS1jb3JlL1xuICovXG5cbnZhciB0YWJiYWJsZU5vZGUgPSAvaW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbnxvYmplY3QvO1xuXG5mdW5jdGlvbiBoaWRlc0NvbnRlbnRzKGVsZW1lbnQpIHtcbiAgdmFyIHplcm9TaXplID0gZWxlbWVudC5vZmZzZXRXaWR0aCA8PSAwICYmIGVsZW1lbnQub2Zmc2V0SGVpZ2h0IDw9IDA7XG5cbiAgLy8gSWYgdGhlIG5vZGUgaXMgZW1wdHksIHRoaXMgaXMgZ29vZCBlbm91Z2hcbiAgaWYgKHplcm9TaXplICYmICFlbGVtZW50LmlubmVySFRNTCkgcmV0dXJuIHRydWU7XG5cbiAgLy8gT3RoZXJ3aXNlIHdlIG5lZWQgdG8gY2hlY2sgc29tZSBzdHlsZXNcbiAgdmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIHJldHVybiB6ZXJvU2l6ZSA/IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoXCJvdmVyZmxvd1wiKSAhPT0gXCJ2aXNpYmxlXCIgfHxcbiAgLy8gaWYgJ292ZXJmbG93OiB2aXNpYmxlJyBzZXQsIGNoZWNrIGlmIHRoZXJlIGlzIGFjdHVhbGx5IGFueSBvdmVyZmxvd1xuICBlbGVtZW50LnNjcm9sbFdpZHRoIDw9IDAgJiYgZWxlbWVudC5zY3JvbGxIZWlnaHQgPD0gMCA6IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoXCJkaXNwbGF5XCIpID09IFwibm9uZVwiO1xufVxuXG5mdW5jdGlvbiB2aXNpYmxlKGVsZW1lbnQpIHtcbiAgdmFyIHBhcmVudEVsZW1lbnQgPSBlbGVtZW50O1xuICB3aGlsZSAocGFyZW50RWxlbWVudCkge1xuICAgIGlmIChwYXJlbnRFbGVtZW50ID09PSBkb2N1bWVudC5ib2R5KSBicmVhaztcbiAgICBpZiAoaGlkZXNDb250ZW50cyhwYXJlbnRFbGVtZW50KSkgcmV0dXJuIGZhbHNlO1xuICAgIHBhcmVudEVsZW1lbnQgPSBwYXJlbnRFbGVtZW50LnBhcmVudE5vZGU7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGZvY3VzYWJsZShlbGVtZW50LCBpc1RhYkluZGV4Tm90TmFOKSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgdmFyIHJlcyA9IHRhYmJhYmxlTm9kZS50ZXN0KG5vZGVOYW1lKSAmJiAhZWxlbWVudC5kaXNhYmxlZCB8fCAobm9kZU5hbWUgPT09IFwiYVwiID8gZWxlbWVudC5ocmVmIHx8IGlzVGFiSW5kZXhOb3ROYU4gOiBpc1RhYkluZGV4Tm90TmFOKTtcbiAgcmV0dXJuIHJlcyAmJiB2aXNpYmxlKGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiB0YWJiYWJsZShlbGVtZW50KSB7XG4gIHZhciB0YWJJbmRleCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIik7XG4gIGlmICh0YWJJbmRleCA9PT0gbnVsbCkgdGFiSW5kZXggPSB1bmRlZmluZWQ7XG4gIHZhciBpc1RhYkluZGV4TmFOID0gaXNOYU4odGFiSW5kZXgpO1xuICByZXR1cm4gKGlzVGFiSW5kZXhOYU4gfHwgdGFiSW5kZXggPj0gMCkgJiYgZm9jdXNhYmxlKGVsZW1lbnQsICFpc1RhYkluZGV4TmFOKTtcbn1cblxuZnVuY3Rpb24gZmluZFRhYmJhYmxlRGVzY2VuZGFudHMoZWxlbWVudCkge1xuICByZXR1cm4gW10uc2xpY2UuY2FsbChlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqXCIpLCAwKS5maWx0ZXIodGFiYmFibGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYXNzZXJ0Tm9kZUxpc3QgPSBhc3NlcnROb2RlTGlzdDtcbmV4cG9ydHMuc2V0RWxlbWVudCA9IHNldEVsZW1lbnQ7XG5leHBvcnRzLnZhbGlkYXRlRWxlbWVudCA9IHZhbGlkYXRlRWxlbWVudDtcbmV4cG9ydHMuaGlkZSA9IGhpZGU7XG5leHBvcnRzLnNob3cgPSBzaG93O1xuZXhwb3J0cy5kb2N1bWVudE5vdFJlYWR5T3JTU1JUZXN0aW5nID0gZG9jdW1lbnROb3RSZWFkeU9yU1NSVGVzdGluZztcbmV4cG9ydHMucmVzZXRGb3JUZXN0aW5nID0gcmVzZXRGb3JUZXN0aW5nO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKFwid2FybmluZ1wiKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX3NhZmVIVE1MRWxlbWVudCA9IHJlcXVpcmUoXCIuL3NhZmVIVE1MRWxlbWVudFwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGdsb2JhbEVsZW1lbnQgPSBudWxsO1xuXG5mdW5jdGlvbiBhc3NlcnROb2RlTGlzdChub2RlTGlzdCwgc2VsZWN0b3IpIHtcbiAgaWYgKCFub2RlTGlzdCB8fCAhbm9kZUxpc3QubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwicmVhY3QtbW9kYWw6IE5vIGVsZW1lbnRzIHdlcmUgZm91bmQgZm9yIHNlbGVjdG9yIFwiICsgc2VsZWN0b3IgKyBcIi5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0RWxlbWVudChlbGVtZW50KSB7XG4gIHZhciB1c2VFbGVtZW50ID0gZWxlbWVudDtcbiAgaWYgKHR5cGVvZiB1c2VFbGVtZW50ID09PSBcInN0cmluZ1wiICYmIF9zYWZlSFRNTEVsZW1lbnQuY2FuVXNlRE9NKSB7XG4gICAgdmFyIGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh1c2VFbGVtZW50KTtcbiAgICBhc3NlcnROb2RlTGlzdChlbCwgdXNlRWxlbWVudCk7XG4gICAgdXNlRWxlbWVudCA9IFwibGVuZ3RoXCIgaW4gZWwgPyBlbFswXSA6IGVsO1xuICB9XG4gIGdsb2JhbEVsZW1lbnQgPSB1c2VFbGVtZW50IHx8IGdsb2JhbEVsZW1lbnQ7XG4gIHJldHVybiBnbG9iYWxFbGVtZW50O1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUVsZW1lbnQoYXBwRWxlbWVudCkge1xuICBpZiAoIWFwcEVsZW1lbnQgJiYgIWdsb2JhbEVsZW1lbnQpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCBbXCJyZWFjdC1tb2RhbDogQXBwIGVsZW1lbnQgaXMgbm90IGRlZmluZWQuXCIsIFwiUGxlYXNlIHVzZSBgTW9kYWwuc2V0QXBwRWxlbWVudChlbClgIG9yIHNldCBgYXBwRWxlbWVudD17ZWx9YC5cIiwgXCJUaGlzIGlzIG5lZWRlZCBzbyBzY3JlZW4gcmVhZGVycyBkb24ndCBzZWUgbWFpbiBjb250ZW50XCIsIFwid2hlbiBtb2RhbCBpcyBvcGVuZWQuIEl0IGlzIG5vdCByZWNvbW1lbmRlZCwgYnV0IHlvdSBjYW4gb3B0LW91dFwiLCBcImJ5IHNldHRpbmcgYGFyaWFIaWRlQXBwPXtmYWxzZX1gLlwiXS5qb2luKFwiIFwiKSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaGlkZShhcHBFbGVtZW50KSB7XG4gIGlmICh2YWxpZGF0ZUVsZW1lbnQoYXBwRWxlbWVudCkpIHtcbiAgICAoYXBwRWxlbWVudCB8fCBnbG9iYWxFbGVtZW50KS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLCBcInRydWVcIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2hvdyhhcHBFbGVtZW50KSB7XG4gIGlmICh2YWxpZGF0ZUVsZW1lbnQoYXBwRWxlbWVudCkpIHtcbiAgICAoYXBwRWxlbWVudCB8fCBnbG9iYWxFbGVtZW50KS5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkb2N1bWVudE5vdFJlYWR5T3JTU1JUZXN0aW5nKCkge1xuICBnbG9iYWxFbGVtZW50ID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gcmVzZXRGb3JUZXN0aW5nKCkge1xuICBnbG9iYWxFbGVtZW50ID0gbnVsbDtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLy8gVHJhY2tzIHBvcnRhbHMgdGhhdCBhcmUgb3BlbiBhbmQgZW1pdHMgZXZlbnRzIHRvIHN1YnNjcmliZXJzXG5cbnZhciBQb3J0YWxPcGVuSW5zdGFuY2VzID0gZnVuY3Rpb24gUG9ydGFsT3Blbkluc3RhbmNlcygpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9ydGFsT3Blbkluc3RhbmNlcyk7XG5cbiAgdGhpcy5yZWdpc3RlciA9IGZ1bmN0aW9uIChvcGVuSW5zdGFuY2UpIHtcbiAgICBpZiAoX3RoaXMub3Blbkluc3RhbmNlcy5pbmRleE9mKG9wZW5JbnN0YW5jZSkgIT09IC0xKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybihcIlJlYWN0LU1vZGFsOiBDYW5ub3QgcmVnaXN0ZXIgbW9kYWwgaW5zdGFuY2UgdGhhdCdzIGFscmVhZHkgb3BlblwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgX3RoaXMub3Blbkluc3RhbmNlcy5wdXNoKG9wZW5JbnN0YW5jZSk7XG4gICAgX3RoaXMuZW1pdChcInJlZ2lzdGVyXCIpO1xuICB9O1xuXG4gIHRoaXMuZGVyZWdpc3RlciA9IGZ1bmN0aW9uIChvcGVuSW5zdGFuY2UpIHtcbiAgICB2YXIgaW5kZXggPSBfdGhpcy5vcGVuSW5zdGFuY2VzLmluZGV4T2Yob3Blbkluc3RhbmNlKTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybihcIlJlYWN0LU1vZGFsOiBVbmFibGUgdG8gZGVyZWdpc3RlciBcIiArIG9wZW5JbnN0YW5jZSArIFwiIGFzIFwiICsgXCJpdCB3YXMgbmV2ZXIgcmVnaXN0ZXJlZFwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgX3RoaXMub3Blbkluc3RhbmNlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIF90aGlzLmVtaXQoXCJkZXJlZ2lzdGVyXCIpO1xuICB9O1xuXG4gIHRoaXMuc3Vic2NyaWJlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgX3RoaXMuc3Vic2NyaWJlcnMucHVzaChjYWxsYmFjayk7XG4gIH07XG5cbiAgdGhpcy5lbWl0ID0gZnVuY3Rpb24gKGV2ZW50VHlwZSkge1xuICAgIF90aGlzLnN1YnNjcmliZXJzLmZvckVhY2goZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgIHJldHVybiBzdWJzY3JpYmVyKGV2ZW50VHlwZSxcbiAgICAgIC8vIHNoYWxsb3cgY29weSB0byBhdm9pZCBhY2NpZGVudGFsIG11dGF0aW9uXG4gICAgICBfdGhpcy5vcGVuSW5zdGFuY2VzLnNsaWNlKCkpO1xuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMub3Blbkluc3RhbmNlcyA9IFtdO1xuICB0aGlzLnN1YnNjcmliZXJzID0gW107XG59O1xuXG52YXIgcG9ydGFsT3Blbkluc3RhbmNlcyA9IG5ldyBQb3J0YWxPcGVuSW5zdGFuY2VzKCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHBvcnRhbE9wZW5JbnN0YW5jZXM7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdmFyIGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCB8fCAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgdmFyIGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZVxuICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgdmFyIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcih0aW1lb3V0RXJyb3JNZXNzYWdlLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBFeHBlY3RlZCBET01FeGNlcHRpb24gdGhyb3duIGJ5IGJyb3dzZXJzIG5vdCBjb21wYXRpYmxlIFhNTEh0dHBSZXF1ZXN0IExldmVsIDIuXG4gICAgICAgIC8vIEJ1dCwgdGhpcyBjYW4gYmUgc3VwcHJlc3NlZCBmb3IgJ2pzb24nIHR5cGUgYXMgaXQgY2FuIGJlIHBhcnNlZCBieSBkZWZhdWx0ICd0cmFuc2Zvcm1SZXNwb25zZScgZnVuY3Rpb24uXG4gICAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjYW5jZWwpO1xuICAgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlcXVlc3REYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICB2YXIgdmFsdWVGcm9tQ29uZmlnMktleXMgPSBbJ3VybCcsICdtZXRob2QnLCAncGFyYW1zJywgJ2RhdGEnXTtcbiAgdmFyIG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzID0gWydoZWFkZXJzJywgJ2F1dGgnLCAncHJveHknXTtcbiAgdmFyIGRlZmF1bHRUb0NvbmZpZzJLZXlzID0gW1xuICAgICdiYXNlVVJMJywgJ3VybCcsICd0cmFuc2Zvcm1SZXF1ZXN0JywgJ3RyYW5zZm9ybVJlc3BvbnNlJywgJ3BhcmFtc1NlcmlhbGl6ZXInLFxuICAgICd0aW1lb3V0JywgJ3dpdGhDcmVkZW50aWFscycsICdhZGFwdGVyJywgJ3Jlc3BvbnNlVHlwZScsICd4c3JmQ29va2llTmFtZScsXG4gICAgJ3hzcmZIZWFkZXJOYW1lJywgJ29uVXBsb2FkUHJvZ3Jlc3MnLCAnb25Eb3dubG9hZFByb2dyZXNzJyxcbiAgICAnbWF4Q29udGVudExlbmd0aCcsICd2YWxpZGF0ZVN0YXR1cycsICdtYXhSZWRpcmVjdHMnLCAnaHR0cEFnZW50JyxcbiAgICAnaHR0cHNBZ2VudCcsICdjYW5jZWxUb2tlbicsICdzb2NrZXRQYXRoJ1xuICBdO1xuXG4gIHV0aWxzLmZvckVhY2godmFsdWVGcm9tQ29uZmlnMktleXMsIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzLCBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAodXRpbHMuaXNPYmplY3QoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IHV0aWxzLmRlZXBNZXJnZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSB1dGlscy5kZWVwTWVyZ2UoY29uZmlnMVtwcm9wXSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMVtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzFbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKGRlZmF1bHRUb0NvbmZpZzJLZXlzLCBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGF4aW9zS2V5cyA9IHZhbHVlRnJvbUNvbmZpZzJLZXlzXG4gICAgLmNvbmNhdChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cylcbiAgICAuY29uY2F0KGRlZmF1bHRUb0NvbmZpZzJLZXlzKTtcblxuICB2YXIgb3RoZXJLZXlzID0gT2JqZWN0XG4gICAgLmtleXMoY29uZmlnMilcbiAgICAuZmlsdGVyKGZ1bmN0aW9uIGZpbHRlckF4aW9zS2V5cyhrZXkpIHtcbiAgICAgIHJldHVybiBheGlvc0tleXMuaW5kZXhPZihrZXkpID09PSAtMTtcbiAgICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG90aGVyS2V5cywgZnVuY3Rpb24gb3RoZXJLZXlzRGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1widG9vbHRpcFwiOlwiVG9vbHRpcENvbnRlbnRfX3Rvb2x0aXAtLTNja21lXCIsXCJ0b29sdGlwX3Nob3duXCI6XCJUb29sdGlwQ29udGVudF9fdG9vbHRpcF9zaG93bi0tM2R6bThcIixcInRvb2x0aXBXcmFwcGVyXCI6XCJUb29sdGlwQ29udGVudF9fdG9vbHRpcFdyYXBwZXItLTJUNVUxXCIsXCJ0b29sdGlwV3JhcHBlcl90aXRsZWRcIjpcIlRvb2x0aXBDb250ZW50X190b29sdGlwV3JhcHBlcl90aXRsZWQtLTJEN1ZMXCIsXCJ0b29sdGlwVW5kZXJsYXlcIjpcIlRvb2x0aXBDb250ZW50X190b29sdGlwVW5kZXJsYXktLTJTWXJpXCIsXCJ0b29sdGlwVW5kZXJsYXlfcG9zaXRpb25fdG9wLXN0YXJ0XCI6XCJUb29sdGlwQ29udGVudF9fdG9vbHRpcFVuZGVybGF5X3Bvc2l0aW9uX3RvcC1zdGFydC0tMmZDYmVcIixcInRvb2x0aXBVbmRlcmxheV9wb3NpdGlvbl90b3BcIjpcIlRvb2x0aXBDb250ZW50X190b29sdGlwVW5kZXJsYXlfcG9zaXRpb25fdG9wLS1KRzRDelwiLFwidG9vbHRpcFVuZGVybGF5X3Bvc2l0aW9uX3RvcC1lbmRcIjpcIlRvb2x0aXBDb250ZW50X190b29sdGlwVW5kZXJsYXlfcG9zaXRpb25fdG9wLWVuZC0tMm9JZUVcIixcInRvb2x0aXBVbmRlcmxheV9wb3NpdGlvbl9yaWdodC1zdGFydFwiOlwiVG9vbHRpcENvbnRlbnRfX3Rvb2x0aXBVbmRlcmxheV9wb3NpdGlvbl9yaWdodC1zdGFydC0tMjFjcW5cIixcInRvb2x0aXBVbmRlcmxheV9wb3NpdGlvbl9yaWdodFwiOlwiVG9vbHRpcENvbnRlbnRfX3Rvb2x0aXBVbmRlcmxheV9wb3NpdGlvbl9yaWdodC0tM2xpYzRcIixcInRvb2x0aXBVbmRlcmxheV9wb3NpdGlvbl9yaWdodC1lbmRcIjpcIlRvb2x0aXBDb250ZW50X190b29sdGlwVW5kZXJsYXlfcG9zaXRpb25fcmlnaHQtZW5kLS1oZ1NHZlwiLFwidG9vbHRpcFVuZGVybGF5X3Bvc2l0aW9uX2xlZnQtc3RhcnRcIjpcIlRvb2x0aXBDb250ZW50X190b29sdGlwVW5kZXJsYXlfcG9zaXRpb25fbGVmdC1zdGFydC0tMzd3WmxcIixcInRvb2x0aXBVbmRlcmxheV9wb3NpdGlvbl9sZWZ0XCI6XCJUb29sdGlwQ29udGVudF9fdG9vbHRpcFVuZGVybGF5X3Bvc2l0aW9uX2xlZnQtLXBVVFNnXCIsXCJ0b29sdGlwVW5kZXJsYXlfcG9zaXRpb25fbGVmdC1lbmRcIjpcIlRvb2x0aXBDb250ZW50X190b29sdGlwVW5kZXJsYXlfcG9zaXRpb25fbGVmdC1lbmQtLTlOdUNHXCIsXCJ0b29sdGlwVW5kZXJsYXlfcG9zaXRpb25fYm90dG9tLXN0YXJ0XCI6XCJUb29sdGlwQ29udGVudF9fdG9vbHRpcFVuZGVybGF5X3Bvc2l0aW9uX2JvdHRvbS1zdGFydC0tUkFneHRcIixcInRvb2x0aXBVbmRlcmxheV9wb3NpdGlvbl9ib3R0b21cIjpcIlRvb2x0aXBDb250ZW50X190b29sdGlwVW5kZXJsYXlfcG9zaXRpb25fYm90dG9tLS0xanJtbVwiLFwidG9vbHRpcFVuZGVybGF5X3Bvc2l0aW9uX2JvdHRvbS1lbmRcIjpcIlRvb2x0aXBDb250ZW50X190b29sdGlwVW5kZXJsYXlfcG9zaXRpb25fYm90dG9tLWVuZC0tMnhvd1pcIixcInRvb2x0aXBUaXRsZVwiOlwiVG9vbHRpcENvbnRlbnRfX3Rvb2x0aXBUaXRsZS0tMWpTNVlcIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcInJvb3RcIjpcIk1vZGFsX19yb290LS01Z0hQb1wiLFwib3ZlcmxheVwiOlwiTW9kYWxfX292ZXJsYXktLTNoVks2XCIsXCJvdmVybGF5X3BvcHVwXCI6XCJNb2RhbF9fb3ZlcmxheV9wb3B1cC0tY0xqWjNcIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImNhcmRcIjpcIkNhcmRfX2NhcmQtLXR5VTRDXCIsXCJjYXJkX3BhZGRpbmdfeHNcIjpcIkNhcmRfX2NhcmRfcGFkZGluZ194cy0tMlVrY3hcIixcImNhcmRfcGFkZGluZ19zXCI6XCJDYXJkX19jYXJkX3BhZGRpbmdfcy0tUWNkaEhcIixcImNhcmRfcGFkZGluZ19tXCI6XCJDYXJkX19jYXJkX3BhZGRpbmdfbS0tMXpkNmlcIixcImNhcmRfc2hhZG93U2l6ZV9zXCI6XCJDYXJkX19jYXJkX3NoYWRvd1NpemVfcy0tM1UwXzVcIixcImNhcmRfc2hhZG93U2l6ZV9tXCI6XCJDYXJkX19jYXJkX3NoYWRvd1NpemVfbS0tMTJIVkhcIixcImNhcmRfc2hhZG93U2l6ZV9sXCI6XCJDYXJkX19jYXJkX3NoYWRvd1NpemVfbC0tMWd4NWlcIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImhpbnRcIjpcIkhpbnRfX2hpbnQtLTFJMDNjXCIsXCJoaW50X3ZhcmlhbnRfcmVndWxhclwiOlwiSGludF9faGludF92YXJpYW50X3JlZ3VsYXItLTFiSW5iXCIsXCJoaW50X3ZhcmlhbnRfbWluaVwiOlwiSGludF9faGludF92YXJpYW50X21pbmktLVoxa3l1XCIsXCJoaW50VGl0bGVcIjpcIkhpbnRfX2hpbnRUaXRsZS0tMUtONExcIixcIm1vYmlsZUNsb3NlQnV0dG9uXCI6XCJIaW50X19tb2JpbGVDbG9zZUJ1dHRvbi0tMmNxb0dcIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcInRpdGxlV3JhcHBlclwiOlwiSW5wdXRfX3RpdGxlV3JhcHBlci0tMjlQR3hcIixcInRpdGxlXCI6XCJJbnB1dF9fdGl0bGUtLVFfRllrXCIsXCJ3cmFwcGVyXCI6XCJJbnB1dF9fd3JhcHBlci0tM1I1TDZcIixcIndyYXBwZXJfd2lkZVwiOlwiSW5wdXRfX3dyYXBwZXJfd2lkZS0tYWNLUGdcIixcImxhYmVsXCI6XCJJbnB1dF9fbGFiZWwtLTM1a2pNXCIsXCJsYWJlbF9zaXplX3hzXCI6XCJJbnB1dF9fbGFiZWxfc2l6ZV94cy0tM09tTUdcIixcImxhYmVsX3NpemVfc1wiOlwiSW5wdXRfX2xhYmVsX3NpemVfcy0tQ3U2VHJcIixcImxhYmVsX3NpemVfbVwiOlwiSW5wdXRfX2xhYmVsX3NpemVfbS0tMi1zY3JcIixcImxhYmVsX3NpemVfbFwiOlwiSW5wdXRfX2xhYmVsX3NpemVfbC0tOXBiY3dcIixcImxhYmVsX2hhc0Vycm9yXCI6XCJJbnB1dF9fbGFiZWxfaGFzRXJyb3ItLTNIdkJqXCIsXCJjb250cm9sXCI6XCJJbnB1dF9fY29udHJvbC0tcWpDQVJcIixcImxhYmVsX2Rpc2FibGVkXCI6XCJJbnB1dF9fbGFiZWxfZGlzYWJsZWQtLTNMU2EwXCIsXCJsYWJlbF9yZXF1aXJlZFwiOlwiSW5wdXRfX2xhYmVsX3JlcXVpcmVkLS0zMG1welwiLFwibGFiZWxfcmVhZE9ubHlcIjpcIklucHV0X19sYWJlbF9yZWFkT25seS0tMjNtR3VcIixcImxhYmVsX2ZvY3VzZWRcIjpcIklucHV0X19sYWJlbF9mb2N1c2VkLS0yUWl0ZlwiLFwiY29udHJvbF9oYXNQbGFjZWhvbGRlclwiOlwiSW5wdXRfX2NvbnRyb2xfaGFzUGxhY2Vob2xkZXItLTNObnYxXCIsXCJjb250cm9sTGluZVwiOlwiSW5wdXRfX2NvbnRyb2xMaW5lLS0yUnRZTlwiLFwiY29udHJvbExpbmVfcmVzZXJ2ZUljb25QbGFjZVwiOlwiSW5wdXRfX2NvbnRyb2xMaW5lX3Jlc2VydmVJY29uUGxhY2UtLTN3My1fXCIsXCJoaW50XCI6XCJJbnB1dF9faGludC0tMXBaM1JcIixcImljb25cIjpcIklucHV0X19pY29uLS0yM2Z3TVwiLFwiaWNvbl9jbGlja2FibGVcIjpcIklucHV0X19pY29uX2NsaWNrYWJsZS0tOHlJSnhcIixcImVycm9yXCI6XCJJbnB1dF9fZXJyb3ItLTdZSDYtXCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJ0aXRsZVwiOlwiVGl0bGVfX3RpdGxlLS0yN0IwY1wiLFwidGl0bGVfc2l6ZV9zXCI6XCJUaXRsZV9fdGl0bGVfc2l6ZV9zLS13a2p3Z1wiLFwidGl0bGVfc2l6ZV9tXCI6XCJUaXRsZV9fdGl0bGVfc2l6ZV9tLS0yaUVXN1wiLFwidGl0bGVfc2l6ZV9sXCI6XCJUaXRsZV9fdGl0bGVfc2l6ZV9sLS0yUTNkMVwifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiYnV0dG9uSWNvblwiOlwiQnV0dG9uSWNvbl9fYnV0dG9uSWNvbi0tc0JyTmRcIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImRyb3Bkb3duXCI6XCJEcm9wZG93bl9fZHJvcGRvd24tLTJWSktyXCIsXCJkcm9wZG93bl9mdWxsV2lkdGhcIjpcIkRyb3Bkb3duX19kcm9wZG93bl9mdWxsV2lkdGgtLTJpQkNnXCIsXCJleGl0aW5nXCI6XCJEcm9wZG93bl9fZXhpdGluZy0tMmtIdjJcIixcImV4aXRlZFwiOlwiRHJvcGRvd25fX2V4aXRlZC0tMUNTSVFcIixcImVudGVyZWRcIjpcIkRyb3Bkb3duX19lbnRlcmVkLS0zUl8wQVwifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiY29udGV4dE1lbnVcIjpcIkNvbnRleHRNZW51X19jb250ZXh0TWVudS0tMU40UVJcIixcImRyb3Bkb3duXCI6XCJDb250ZXh0TWVudV9fZHJvcGRvd24tLTJFQjE5XCIsXCJ0aXRsZVwiOlwiQ29udGV4dE1lbnVfX3RpdGxlLS11amROQ1wiLFwib3B0aW9uQ29udGFpbmVyXCI6XCJDb250ZXh0TWVudV9fb3B0aW9uQ29udGFpbmVyLS1ZVVg5U1wiLFwib3B0aW9uSXRlbVwiOlwiQ29udGV4dE1lbnVfX29wdGlvbkl0ZW0tLTFGTzZaXCIsXCJkb3RzQ29udGFpbmVyXCI6XCJDb250ZXh0TWVudV9fZG90c0NvbnRhaW5lci0tMV9tRk1cIixcImNsb3NlQnV0dG9uXCI6XCJDb250ZXh0TWVudV9fY2xvc2VCdXR0b24tLTNfRlZLXCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJidXR0b25cIjpcIkxhbmd1YWdlU3dpdGNoZXJfX2J1dHRvbi0tMVlGaXRcIixcImxhYmVsXCI6XCJMYW5ndWFnZVN3aXRjaGVyX19sYWJlbC0tNjg0dXJcIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImlubmVyXCI6XCJMb2dvX19pbm5lci0tMnBkWkRcIixcImxvZ29cIjpcIkxvZ29fX2xvZ28tLTN5dEJtXCIsXCJsb2dvX3NpemVfc1wiOlwiTG9nb19fbG9nb19zaXplX3MtLTdoNE9uXCIsXCJsb2dvX3NpemVfbVwiOlwiTG9nb19fbG9nb19zaXplX20tLTFPODhlXCIsXCJsb2dvX3NpemVfbFwiOlwiTG9nb19fbG9nb19zaXplX2wtLTFaTDJBXCJ9OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCJpbXBvcnQgeyBBQ1RJT05fVFlQRSB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGhlbWUge1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGhlbWVBY3Rpb24ge1xuICB0aGVtZTogVGhlbWU7XG4gIHR5cGU6IEFDVElPTl9UWVBFO1xufVxuXG5jb25zdCBzZXRUaGVtZSA9ICh0aGVtZTogVGhlbWUpOiBUaGVtZUFjdGlvbiA9PiB7XG4gIHJldHVybiB7XG4gICAgdGhlbWUsXG4gICAgdHlwZTogQUNUSU9OX1RZUEUuU0VUX1RIRU1FLFxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgc2V0VGhlbWU7XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gICdwYWxldHRlLWJsYWNrJzogJyMyZDMxMzcnLFxuICAncGFsZXR0ZS1kYXJrJzogJyM4Njg2ODYnLFxuICAncGFsZXR0ZS1ncmF5JzogJyNjOGM4YzgnLFxuICAncGFsZXR0ZS1saWdodCc6ICcjZTVlNWU1JyxcbiAgJ3BhbGV0dGUtdWxpZ2h0JzogJyNmNGY0ZjQnLFxuICAncGFsZXR0ZS13aGl0ZSc6ICcjZmZmZmZmJyxcbiAgJ3BhbGV0dGUtZGlzYWJsZWQnOiAnI2FmYWZhZicsXG4gICdwYWxldHRlLW1haW4nOiAnI2ZmZGM4MicsXG4gICdwYWxldHRlLXNlYyc6ICcjZTVlNWU1JyxcbiAgYm9yZGVyOiAncmdiYSg0NSwgNDksIDU1LCAwLjEyKScsXG4gICdkaXNhYmxlZC1vdmVybGF5JzogJ3JnYmEoMjQ2LCAyNDYsIDI0NiwgMC44KScsXG4gICdkaXNhYmxlZC1maWx0ZXInOiAnZ3JheXNjYWxlKDAuNSkgb3BhY2l0eSgwLjQpJyxcbiAgJ2hlYWRlci1iZyc6ICcjZmZmZmZmJyxcbiAgJ2hlYWRlci1iZy1zZWNvbmRhcnknOiAnI2Y5ZjlmOScsXG4gICdoZWFkZXItbWFpbic6ICcjODY4Njg2JyxcbiAgJ2hlYWRlci1zZWNvbmRhcnknOiAnI2M4YzhjOCcsXG4gICdoZWFkZXItbWVudS10eXBvJzogJyM4Njg2ODYnLFxuICAnaGVhZGVyLWFjdGl2ZSc6ICcjMmQzMTM3JyxcbiAgJ2J1dHRvbi1wcmltYXJ5LWJnJzogJyNmZmRjODInLFxuICAnYnV0dG9uLXByaW1hcnktdHlwbyc6ICcjMmQzMTM3JyxcbiAgJ2J1dHRvbi1wcmltYXJ5LWhvdmVyLWJnJzogJyNmZmQyNmQnLFxuICAnYnV0dG9uLXByaW1hcnktYWN0aXZlLWJnJzogJyNmZmNiNWUnLFxuICAnYnV0dG9uLXNlY29uZGFyeS1iZyc6ICcjZTVlNWU1JyxcbiAgJ2J1dHRvbi1zZWNvbmRhcnktdHlwbyc6ICcjMmQzMTM3JyxcbiAgJ2J1dHRvbi1zZWNvbmRhcnktaG92ZXItYmcnOiAnI2M4YzhjOCcsXG4gICdidXR0b24tc2Vjb25kYXJ5LWFjdGl2ZS1iZyc6ICcjYjBiMGIwJyxcbiAgJ2J1dHRvbi1vdXRsaW5lLWJvcmRlcic6ICdyZ2JhKDQ1LCA0OSwgNTUsIDAuMTUpJyxcbiAgJ2J1dHRvbi1vdXRsaW5lLXR5cG8nOiAnIzJkMzEzNycsXG4gICdidXR0b24tb3V0bGluZS1ob3Zlci1ib3JkZXInOiAnI2ZmZDI2ZCcsXG4gICdidXR0b24tb3V0bGluZS1hY3RpdmUtYm9yZGVyJzogJyNmZmNiNWUnLFxuICAnbXVsdGlidXR0b24tYm9yZGVyJzogJ3JnYmEoNDUsIDQ5LCA1NSwgMC4xMiknLFxuICAnbXVsdGlidXR0b24tb24tYmcnOiAnI2ZmZmZmZicsXG4gICdtdWx0aWJ1dHRvbi1vbi10eXBvJzogJyMyZDMxMzcnLFxuICAnbXVsdGlidXR0b24tb2ZmLWJnJzogJyNmNGY0ZjQnLFxuICAnbXVsdGlidXR0b24tb2ZmLXR5cG8nOiAnIzg2ODY4NicsXG4gICdmaWVsZC1iZyc6ICcjZmZmZmZmJyxcbiAgJ2ZpZWxkLXR5cG8nOiAnIzJkMzEzNycsXG4gICdmaWVsZC1wbGFjZWhvbGRlcic6ICcjYWZhZmFmJyxcbiAgJ2ZpZWxkLWxhYmVsJzogJyMyZDMxMzcnLFxuICAnZmllbGQtYm9yZGVyJzogJ3JnYmEoNDUsIDQ5LCA1NSwgMC4xMiknLFxuICAnZmllbGQtaG92ZXItYm9yZGVyJzogJ3JnYmEoNDUsIDQ5LCA1NSwgMC40KScsXG4gICdmaWVsZC1hY3RpdmUtYm9yZGVyJzogJ3JnYmEoNDUsIDQ5LCA1NSwgMC4xNSknLFxuICAnZHJvcGRvd24tc2VsZWN0ZWQtYmcnOiAncmdiYSgyNTUsIDIyMCwgMTMwLCAwLjQpJyxcbiAgJ2JveC1ib3JkZXInOiAncmdiYSg0NSwgNDksIDU1LCAwLjEyKScsXG4gICdib3gtYmcnOiAnI2ZmZmZmZicsXG4gICdib3gtb24tYmcnOiAnI2ZmZGM4MicsXG4gICdib3gtb24tdHlwbyc6ICcjMmQzMTM3JyxcbiAgJ2JveC1ob3Zlci1ib3JkZXInOiAnI2ZmZDI2ZCcsXG4gICdib3gtYWN0aXZlLWJnJzogJyMyZDMxMzcnLFxuICAnYnJhbmQtbG9nby1wYXJ0bmVyJzogJycsXG4gICdjYWxlbmRhci1ob2xpZGF5LWNvbG9yLWVkZ2UnOiAnI2JlMDAwMCcsXG4gICdjYWxlbmRhci1ob2xpZGF5LWNvbG9yJzogJyNiZTAwMDAnLFxuICBsaW5rOiAnIzQwODZlNCcsXG4gICdsaW5rLWhvdmVyJzogJyNjZTIxMjEnLFxuICAnbGluay1hY3RpdmUnOiAnI2NlMjEyMScsXG4gIHRleHQ6ICcjMmQzMTM3JyxcbiAgJ3RleHQtc2Vjb25kYXJ5JzogJyM4Njg2ODYnLFxuICAndGV4dC1hbHQnOiAnI2ZmZmZmZicsXG4gICdibG9jay1iZyc6ICcjZmZmZmZmJyxcbiAgJ2Jsb2NrLWJnLXNlY29uZGFyeSc6ICcjZjRmNGY0JyxcbiAgJ2Jsb2NrLWJnLWFsdCc6ICcjMmQzMTM3JyxcbiAgc2hhZG93OiAncmdiYSg0NSwgNDksIDU1LCAwLjMpJyxcbiAgYWxlcnQ6ICcjY2UyMTIxJyxcbiAgJ2FsZXJ0LWJnJzogJ3JnYmEoMjA2LCAzMywgMzMsIDAuMSknLFxuICAnYWxlcnQtb3V0bGluZSc6ICdyZ2JhKDIwNiwgMzMsIDMzLCAwLjQpJyxcbiAgc3VjY2VzczogJyM1M2IxMjQnLFxuICAnc3VjY2Vzcy1iZyc6ICdyZ2JhKDgzLCAxNzUsIDM2LCAwLjEpJyxcbiAgJ2hpZ2hsaWdodC1iZyc6ICcjZmZmOGU2JyxcbiAgJ2ZvY3VzLW91dGxpbmUnOiAncmdiYSgyNTUsIDIyMCwgMTMwLCAwLjQpJyxcbiAgJ2ZpZGVsaXR5LWRyZWFtcyc6ICcjZmY2NDY0JyxcbiAgJ2ZpZGVsaXR5LXJhdGVoYXdrLXBvaW50cyc6ICcjNDA4NmU0JyxcbiAgJ2ZpZGVsaXR5LXplbi1wb2ludHMnOiAnIzVjNzdjYycsXG4gICdmaWRlbGl0eS1zZWdtZW50LWJsYWNrJzogJyM0NjRhNTAnLFxuICAnZmlkZWxpdHktc2VnbWVudC1nb2xkJzogJyNmZmM5MzcnLFxuICAnZmlkZWxpdHktc2VnbWVudC1wbGF0aW51bSc6ICcjZDZjZGMwJyxcbiAgJ2ZpZGVsaXR5LXNlZ21lbnQtc2lsdmVyJzogJyNiM2M2ZDgnLFxuICAnc29jaWFsLWZhY2Vib29rLWNvbG9yJzogJyMxMzgyZmYnLFxuICAnc29jaWFsLXRlbGVncmFtLWNvbG9yJzogJyMyM2EyZTMnLFxuICAnc29jaWFsLXZpYmVyLWNvbG9yJzogJyM2NzViYWMnLFxuICAnc29jaWFsLWFwcGxlLWNvbG9yJzogJyMyZDMxMzcnLFxuICAnei1pbmRleC1zdGFydCc6ICcxJyxcbiAgJ3otaW5kZXgtdGlwJzogJzInLFxuICAnei1pbmRleC1wb3B1cCc6ICcxMicsXG4gICd6LWluZGV4LXBvcHVwLWltcG9ydGFudCc6ICcyMicsXG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgc2V0VGhlbWUgfSBmcm9tICdjb21wb25lbnRzJztcblxuaW1wb3J0IFRIRU1FIGZyb20gJ0Bjb25zdGFudHMvdGhlbWUnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbn1cblxuY29uc3QgVGhlbWUgPSAoeyBjaGlsZHJlbiB9OiBQcm9wcyk6IEpTWC5FbGVtZW50ID0+IHtcbiAgc2V0VGhlbWUoVEhFTUUpO1xuICBjb25zdCB0aGVtZUFyciA9IE9iamVjdC5lbnRyaWVzKFRIRU1FKTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8c3R5bGU+e2BcbiAgICAgICAgOnJvb3QsXG4gICAgICAgIDpob3N0IHtcbiAgICAgICAgICAke3RoZW1lQXJyXG4gICAgICAgICAgICAucmVkdWNlKChhY2MsIFtuYW1lLCB2YWx1ZV0pID0+IGAke2FjY30gLS0ke25hbWV9OiAke3ZhbHVlfTtcXG5gLCAnJylcbiAgICAgICAgICAgIC50cmltKCl9XG4gICAgICAgIH1cbiAgICAgIGB9PC9zdHlsZT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRoZW1lO1xuIiwiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCBzZXRUaGVtZUFjdGlvbiwgeyBUaGVtZSB9IGZyb20gJy4vcmVkdWNlcnMvdGhlbWUvYWN0aW9ucy9zZXRUaGVtZSc7XG5pbXBvcnQgc2V0U2V0dGluZ3NBY3Rpb24sIHtcbiAgU2V0dGluZ3MsXG59IGZyb20gJy4vcmVkdWNlcnMvc2V0dGluZ3MvYWN0aW9ucy9zZXRTZXR0aW5ncyc7XG5pbXBvcnQgc2V0TG9jYWxlQWN0aW9uIGZyb20gJy4vcmVkdWNlcnMvbDEwbi9hY3Rpb25zL3NldExvY2FsZSc7XG5cbmltcG9ydCBzdG9yZSBmcm9tICcuL3N0b3JlJztcblxuY29uc3Qgc2V0VGhlbWUgPSAodGhlbWU6IFRoZW1lKSA9PiBzdG9yZS5kaXNwYXRjaChzZXRUaGVtZUFjdGlvbih0aGVtZSkpO1xuZXhwb3J0IHsgc2V0VGhlbWUgfTtcblxuY29uc3Qgc2V0U2V0dGluZ3MgPSAoc2V0dGluZ3M6IFNldHRpbmdzKSA9PlxuICBzdG9yZS5kaXNwYXRjaChzZXRTZXR0aW5nc0FjdGlvbihzZXR0aW5ncykpO1xuZXhwb3J0IHsgc2V0U2V0dGluZ3MgfTtcblxuY29uc3Qgc2V0TG9jYWxlID0gKGxvY2FsZTogc3RyaW5nKSA9PiBzdG9yZS5kaXNwYXRjaChzZXRMb2NhbGVBY3Rpb24obG9jYWxlKSk7XG5leHBvcnQgeyBzZXRMb2NhbGUgfTtcblxuY29uc3Qgc2V0QmFzZVVSTCA9ICh1cmw6IHN0cmluZykgPT4ge1xuICBheGlvcy5kZWZhdWx0cy5iYXNlVVJMID0gdXJsO1xufTtcbmV4cG9ydCB7IHNldEJhc2VVUkwgfTtcbiIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb250ZXh0IH0gZnJvbSAnLi9pbmplY3RJbnRsJztcbmltcG9ydCB7IGludmFyaWFudEludGxDb250ZXh0IH0gZnJvbSAnLi4vdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlSW50bCgpIHtcbiAgICBjb25zdCBpbnRsID0gdXNlQ29udGV4dChDb250ZXh0KTtcbiAgICBpbnZhcmlhbnRJbnRsQ29udGV4dChpbnRsKTtcbiAgICByZXR1cm4gaW50bDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiaW1wb3J0IGUse3VzZVJlZiBhcyByLHVzZUVmZmVjdCBhcyB0LGNyZWF0ZUNvbnRleHQgYXMgbixmb3J3YXJkUmVmIGFzIG8sdXNlU3RhdGUgYXMgYSx1c2VDb250ZXh0IGFzIGN9ZnJvbVwicmVhY3RcIjtpbXBvcnR7Y3JlYXRlUG9ydGFsIGFzIHV9ZnJvbVwicmVhY3QtZG9tXCI7aW1wb3J0IGwgZnJvbVwicHJvcC10eXBlc1wiO3ZhciBpPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjp7fTtmdW5jdGlvbiBzKGUscil7cmV0dXJuIGUocj17ZXhwb3J0czp7fX0sci5leHBvcnRzKSxyLmV4cG9ydHN9dmFyIGY9cygoZnVuY3Rpb24oZSl7IWZ1bmN0aW9uKHIpe3ZhciB0PWZ1bmN0aW9uKGUscixuKXtpZighbChyKXx8cyhyKXx8ZihyKXx8cChyKXx8dShyKSlyZXR1cm4gcjt2YXIgbyxhPTAsYz0wO2lmKGkocikpZm9yKG89W10sYz1yLmxlbmd0aDthPGM7YSsrKW8ucHVzaCh0KGUsclthXSxuKSk7ZWxzZSBmb3IodmFyIGQgaW4gbz17fSxyKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyLGQpJiYob1tlKGQsbildPXQoZSxyW2RdLG4pKTtyZXR1cm4gb30sbj1mdW5jdGlvbihlKXtyZXR1cm4gZChlKT9lOihlPWUucmVwbGFjZSgvW1xcLV9cXHNdKyguKT8vZywoZnVuY3Rpb24oZSxyKXtyZXR1cm4gcj9yLnRvVXBwZXJDYXNlKCk6XCJcIn0pKSkuc3Vic3RyKDAsMSkudG9Mb3dlckNhc2UoKStlLnN1YnN0cigxKX0sbz1mdW5jdGlvbihlKXt2YXIgcj1uKGUpO3JldHVybiByLnN1YnN0cigwLDEpLnRvVXBwZXJDYXNlKCkrci5zdWJzdHIoMSl9LGE9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gZnVuY3Rpb24oZSxyKXt2YXIgdD0ocj1yfHx7fSkuc2VwYXJhdG9yfHxcIl9cIixuPXIuc3BsaXR8fC8oPz1bQS1aXSkvO3JldHVybiBlLnNwbGl0KG4pLmpvaW4odCl9KGUscikudG9Mb3dlckNhc2UoKX0sYz1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLHU9ZnVuY3Rpb24oZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZX0sbD1mdW5jdGlvbihlKXtyZXR1cm4gZT09PU9iamVjdChlKX0saT1mdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PWMuY2FsbChlKX0scz1mdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgRGF0ZV1cIj09Yy5jYWxsKGUpfSxmPWZ1bmN0aW9uKGUpe3JldHVyblwiW29iamVjdCBSZWdFeHBdXCI9PWMuY2FsbChlKX0scD1mdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgQm9vbGVhbl1cIj09Yy5jYWxsKGUpfSxkPWZ1bmN0aW9uKGUpe3JldHVybihlLT0wKT09ZX0seT1mdW5jdGlvbihlLHIpe3ZhciB0PXImJlwicHJvY2Vzc1wiaW4gcj9yLnByb2Nlc3M6cjtyZXR1cm5cImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6ZnVuY3Rpb24ocixuKXtyZXR1cm4gdChyLGUsbil9fSxoPXtjYW1lbGl6ZTpuLGRlY2FtZWxpemU6YSxwYXNjYWxpemU6byxkZXBhc2NhbGl6ZTphLGNhbWVsaXplS2V5czpmdW5jdGlvbihlLHIpe3JldHVybiB0KHkobixyKSxlKX0sZGVjYW1lbGl6ZUtleXM6ZnVuY3Rpb24oZSxyKXtyZXR1cm4gdCh5KGEsciksZSxyKX0scGFzY2FsaXplS2V5czpmdW5jdGlvbihlLHIpe3JldHVybiB0KHkobyxyKSxlKX0sZGVwYXNjYWxpemVLZXlzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGVjYW1lbGl6ZUtleXMuYXBwbHkodGhpcyxhcmd1bWVudHMpfX07ZS5leHBvcnRzP2UuZXhwb3J0cz1oOnIuaHVtcHM9aH0oaSl9KSkuZGVjYW1lbGl6ZSxwPXMoKGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHIoKXtyZXR1cm4gZS5leHBvcnRzPXI9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24oZSl7Zm9yKHZhciByPTE7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyl7dmFyIHQ9YXJndW1lbnRzW3JdO2Zvcih2YXIgbiBpbiB0KU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LG4pJiYoZVtuXT10W25dKX1yZXR1cm4gZX0sci5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZS5leHBvcnRzPXJ9KSk7dmFyIGQ9ZnVuY3Rpb24oZSl7aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gZX07dmFyIHk9ZnVuY3Rpb24oZSxyKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGUpKXt2YXIgdD1bXSxuPSEwLG89ITEsYT12b2lkIDA7dHJ5e2Zvcih2YXIgYyx1PWVbU3ltYm9sLml0ZXJhdG9yXSgpOyEobj0oYz11Lm5leHQoKSkuZG9uZSkmJih0LnB1c2goYy52YWx1ZSksIXJ8fHQubGVuZ3RoIT09cik7bj0hMCk7fWNhdGNoKGUpe289ITAsYT1lfWZpbmFsbHl7dHJ5e258fG51bGw9PXUucmV0dXJufHx1LnJldHVybigpfWZpbmFsbHl7aWYobyl0aHJvdyBhfX1yZXR1cm4gdH19O3ZhciBoPWZ1bmN0aW9uKGUscil7KG51bGw9PXJ8fHI+ZS5sZW5ndGgpJiYocj1lLmxlbmd0aCk7Zm9yKHZhciB0PTAsbj1uZXcgQXJyYXkocik7dDxyO3QrKyluW3RdPWVbdF07cmV0dXJuIG59O3ZhciB2PWZ1bmN0aW9uKGUscil7aWYoZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIGgoZSxyKTt2YXIgdD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7cmV0dXJuXCJPYmplY3RcIj09PXQmJmUuY29uc3RydWN0b3ImJih0PWUuY29uc3RydWN0b3IubmFtZSksXCJNYXBcIj09PXR8fFwiU2V0XCI9PT10P0FycmF5LmZyb20oZSk6XCJBcmd1bWVudHNcIj09PXR8fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpP2goZSxyKTp2b2lkIDB9fTt2YXIgbT1mdW5jdGlvbigpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9O3ZhciBiPWZ1bmN0aW9uKGUscil7cmV0dXJuIGQoZSl8fHkoZSxyKXx8dihlLHIpfHxtKCl9O3ZhciBnPWZ1bmN0aW9uKGUscil7aWYobnVsbD09ZSlyZXR1cm57fTt2YXIgdCxuLG89e30sYT1PYmplY3Qua2V5cyhlKTtmb3Iobj0wO248YS5sZW5ndGg7bisrKXQ9YVtuXSxyLmluZGV4T2YodCk+PTB8fChvW3RdPWVbdF0pO3JldHVybiBvfTt2YXIgUz1mdW5jdGlvbihlLHIpe2lmKG51bGw9PWUpcmV0dXJue307dmFyIHQsbixvPWcoZSxyKTtpZihPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKXt2YXIgYT1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpO2ZvcihuPTA7bjxhLmxlbmd0aDtuKyspdD1hW25dLHIuaW5kZXhPZih0KT49MHx8T2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKGUsdCkmJihvW3RdPWVbdF0pfXJldHVybiBvfTt2YXIgdz1uKG51bGwpO2Z1bmN0aW9uIE8oZSl7dmFyIHI9ZS5yb290LHQ9ZS5jaGlsZHJlbjtyZXR1cm4gdSh0LHIpfWZ1bmN0aW9uIGoobil7dmFyIGM9bygoZnVuY3Rpb24obyxjKXt2YXIgdSxsLGk9by5tb2RlLHM9by5kZWxlZ2F0ZXNGb2N1cyxmPW8uc3R5bGVTaGVldHMsZD1vLnNzcix5PW8uY2hpbGRyZW4saD1TKG8sW1wibW9kZVwiLFwiZGVsZWdhdGVzRm9jdXNcIixcInN0eWxlU2hlZXRzXCIsXCJzc3JcIixcImNoaWxkcmVuXCJdKSx2PShsPXIoKHU9YykmJnUuY3VycmVudCksdCgoZnVuY3Rpb24oKXt1JiYodS5jdXJyZW50PWwuY3VycmVudCl9KSxbdV0pLGwpLG09YShudWxsKSxnPWIobSwyKSxqPWdbMF0seD1nWzFdLHo9XCJub2RlX1wiLmNvbmNhdChpKS5jb25jYXQocyk7cmV0dXJuIHQoKGZ1bmN0aW9uKCl7aWYodi5jdXJyZW50KXRyeXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBjJiZjKHYuY3VycmVudCksZCl7dmFyIGU9di5jdXJyZW50LnNoYWRvd1Jvb3Q7cmV0dXJuIHZvaWQgeChlKX12YXIgcj12LmN1cnJlbnQuYXR0YWNoU2hhZG93KHttb2RlOmksZGVsZWdhdGVzRm9jdXM6c30pO2YubGVuZ3RoPjAmJihyLmFkb3B0ZWRTdHlsZVNoZWV0cz1mKSx4KHIpfWNhdGNoKGUpeyFmdW5jdGlvbihlKXt2YXIgcj1lLmVycm9yLHQ9ZS5zdHlsZVNoZWV0cyxuPWUucm9vdDtzd2l0Y2goci5uYW1lKXtjYXNlXCJOb3RTdXBwb3J0ZWRFcnJvclwiOnQubGVuZ3RoPjAmJihuLmFkb3B0ZWRTdHlsZVNoZWV0cz10KTticmVhaztkZWZhdWx0OnRocm93IHJ9fSh7ZXJyb3I6ZSxzdHlsZVNoZWV0czpmLHJvb3Q6an0pfX0pLFtjLHYsZl0pLGUuY3JlYXRlRWxlbWVudChlLkZyYWdtZW50LG51bGwsZS5jcmVhdGVFbGVtZW50KG4udGFnLHAoe2tleTp6LHJlZjp2fSxoKSwoanx8ZCkmJmUuY3JlYXRlRWxlbWVudCh3LlByb3ZpZGVyLHt2YWx1ZTpqfSxkP2UuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIse3NoYWRvd3Jvb3Q6XCJvcGVuXCJ9LG4ucmVuZGVyKHtyb290Omosc3NyOmQsY2hpbGRyZW46eX0pKTplLmNyZWF0ZUVsZW1lbnQoTyx7cm9vdDpqfSxuLnJlbmRlcih7cm9vdDpqLHNzcjpkLGNoaWxkcmVuOnl9KSkpKSl9KSk7cmV0dXJuIGMucHJvcFR5cGVzPXttb2RlOmwub25lT2YoW1wib3BlblwiLFwiY2xvc2VkXCJdKSxkZWxlZ2F0ZXNGb2N1czpsLmJvb2wsc3R5bGVTaGVldHM6bC5hcnJheU9mKGwuaW5zdGFuY2VPZihnbG9iYWwuQ1NTU3R5bGVTaGVldCkpLHNzcjpsLmJvb2wsY2hpbGRyZW46bC5ub2RlfSxjLmRlZmF1bHRQcm9wcz17bW9kZTpcIm9wZW5cIixkZWxlZ2F0ZXNGb2N1czohMSxzdHlsZVNoZWV0czpbXSxzc3I6ITEsY2hpbGRyZW46bnVsbH0sY31PLnByb3BUeXBlcz17cm9vdDpsLm9iamVjdC5pc1JlcXVpcmVkLGNoaWxkcmVuOmwubm9kZX0sTy5kZWZhdWx0UHJvcHM9e2NoaWxkcmVuOm51bGx9O3ZhciB4PW5ldyBNYXA7ZnVuY3Rpb24geigpe3JldHVybiBjKHcpfWZ1bmN0aW9uIEUoKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e30scj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06XCJjb3JlXCIsdD1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06ZnVuY3Rpb24oZSl7cmV0dXJuIGUuY2hpbGRyZW59O3JldHVybiBuZXcgUHJveHkoZSx7Z2V0OmZ1bmN0aW9uKGUsbil7dmFyIG89ZihuLHtzZXBhcmF0b3I6XCItXCJ9KSxhPVwiXCIuY29uY2F0KHIsXCItXCIpLmNvbmNhdChvKTtyZXR1cm4geC5oYXMoYSl8fHguc2V0KGEsaih7dGFnOm8scmVuZGVyOnR9KSkseC5nZXQoYSl9fSl9dmFyIEE9RSgpO2V4cG9ydCBkZWZhdWx0IEE7ZXhwb3J0e0UgYXMgY3JlYXRlUHJveHkseiBhcyB1c2VTaGFkb3dSb290fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXNoYWRvdy5lc20uanMubWFwXG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gSUUgOCBoYXMgYSBicm9rZW4gT2JqZWN0LmRlZmluZVByb3BlcnR5IHRoYXQgb25seSB3b3JrcyBvbiBET00gb2JqZWN0cy5cbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4xXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj02MDEwMyxwPTYwMTA2O2V4cG9ydHMuRnJhZ21lbnQ9NjAxMDc7ZXhwb3J0cy5TdHJpY3RNb2RlPTYwMTA4O2V4cG9ydHMuUHJvZmlsZXI9NjAxMTQ7dmFyIHE9NjAxMDkscj02MDExMCx0PTYwMTEyO2V4cG9ydHMuU3VzcGVuc2U9NjAxMTM7dmFyIHU9NjAxMTUsdj02MDExNjtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciB3PVN5bWJvbC5mb3I7bj13KFwicmVhY3QuZWxlbWVudFwiKTtwPXcoXCJyZWFjdC5wb3J0YWxcIik7ZXhwb3J0cy5GcmFnbWVudD13KFwicmVhY3QuZnJhZ21lbnRcIik7ZXhwb3J0cy5TdHJpY3RNb2RlPXcoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtleHBvcnRzLlByb2ZpbGVyPXcoXCJyZWFjdC5wcm9maWxlclwiKTtxPXcoXCJyZWFjdC5wcm92aWRlclwiKTtyPXcoXCJyZWFjdC5jb250ZXh0XCIpO3Q9dyhcInJlYWN0LmZvcndhcmRfcmVmXCIpO2V4cG9ydHMuU3VzcGVuc2U9dyhcInJlYWN0LnN1c3BlbnNlXCIpO3U9dyhcInJlYWN0Lm1lbW9cIik7dj13KFwicmVhY3QubGF6eVwiKX12YXIgeD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiB5KGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT14JiZhW3hdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9ZnVuY3Rpb24geihhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBBPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxCPXt9O2Z1bmN0aW9uIEMoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX1DLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0MucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcih6KDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtDLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEQoKXt9RC5wcm90b3R5cGU9Qy5wcm90b3R5cGU7ZnVuY3Rpb24gRShhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfXZhciBGPUUucHJvdG90eXBlPW5ldyBEO0YuY29uc3RydWN0b3I9RTtsKEYsQy5wcm90b3R5cGUpO0YuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEc9e2N1cnJlbnQ6bnVsbH0sSD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEk9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEooYSxiLGMpe3ZhciBlLGQ9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSC5jYWxsKGIsZSkmJiFJLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWRbZV0mJihkW2VdPWdbZV0pO3JldHVybnskJHR5cGVvZjpuLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpkLF9vd25lcjpHLmN1cnJlbnR9fVxuZnVuY3Rpb24gSyhhLGIpe3JldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTChhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bn1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE09L1xcLysvZztmdW5jdGlvbiBOKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gTyhhLGIsYyxlLGQpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBuOmNhc2UgcDpoPSEwfX1pZihoKXJldHVybiBoPWEsZD1kKGgpLGE9XCJcIj09PWU/XCIuXCIrTihoLDApOmUsQXJyYXkuaXNBcnJheShkKT8oYz1cIlwiLG51bGwhPWEmJihjPWEucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSxPKGQsYixjLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9ZCYmKEwoZCkmJihkPUsoZCxjKyghZC5rZXl8fGgmJmgua2V5PT09ZC5rZXk/XCJcIjooXCJcIitkLmtleSkucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGQpKSwxO2g9MDtlPVwiXCI9PT1lP1wiLlwiOmUrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGc9XG4wO2c8YS5sZW5ndGg7ZysrKXtrPWFbZ107dmFyIGY9ZStOKGssZyk7aCs9TyhrLGIsYyxmLGQpfWVsc2UgaWYoZj15KGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1lK04oayxnKyspLGgrPU8oayxiLGMsZixkKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9XCJcIithLEVycm9yKHooMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO3JldHVybiBofWZ1bmN0aW9uIFAoYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W10sZD0wO08oYSxlLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGMsYSxkKyspfSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBRKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7YS5fc3RhdHVzPTA7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQ7dGhyb3cgYS5fcmVzdWx0O312YXIgUj17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBTKCl7dmFyIGE9Ui5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKHooMzIxKSk7cmV0dXJuIGF9dmFyIFQ9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6UixSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7dHJhbnNpdGlvbjowfSxSZWFjdEN1cnJlbnRPd25lcjpHLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07XG5leHBvcnRzLkNoaWxkcmVuPXttYXA6UCxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtQKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sYyl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UChhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFAoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTChhKSl0aHJvdyBFcnJvcih6KDE0MykpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9QztleHBvcnRzLlB1cmVDb21wb25lbnQ9RTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVQ7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoeigyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Ry5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilILmNhbGwoYixmKSYmIUkuaGFzT3duUHJvcGVydHkoZikmJihlW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO2Zvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6ayxwcm9wczplLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6cixfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnEsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PUo7ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPUouYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnQscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PUw7XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYsX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpRfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnUsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMVwiO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjFcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG09cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHkoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9aWYoIWFhKXRocm93IEVycm9yKHkoMjI3KSk7dmFyIGJhPW5ldyBTZXQsY2E9e307ZnVuY3Rpb24gZGEoYSxiKXtlYShhLGIpO2VhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBlYShhLGIpe2NhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKyliYS5hZGQoYlthXSl9XG52YXIgZmE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGhhPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxpYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxuamE9e30sa2E9e307ZnVuY3Rpb24gbGEoYSl7aWYoaWEuY2FsbChrYSxhKSlyZXR1cm4hMDtpZihpYS5jYWxsKGphLGEpKXJldHVybiExO2lmKGhhLnRlc3QoYSkpcmV0dXJuIGthW2FdPSEwO2phW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIG1hKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gbmEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8bWEoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBCKGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgRD17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtEW2JdPW5ldyBCKGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIG9hPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gcGEoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EsXG5wYSk7RFtiXT1uZXcgQihiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLHBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLHBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5ELnhsaW5rSHJlZj1uZXcgQihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiBxYShhLGIsYyxkKXt2YXIgZT1ELmhhc093blByb3BlcnR5KGIpP0RbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChuYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/bGEoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbnZhciByYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCxzYT02MDEwMyx0YT02MDEwNix1YT02MDEwNyx3YT02MDEwOCx4YT02MDExNCx5YT02MDEwOSx6YT02MDExMCxBYT02MDExMixCYT02MDExMyxDYT02MDEyMCxEYT02MDExNSxFYT02MDExNixGYT02MDEyMSxHYT02MDEyOCxIYT02MDEyOSxJYT02MDEzMCxKYT02MDEzMTtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciBFPVN5bWJvbC5mb3I7c2E9RShcInJlYWN0LmVsZW1lbnRcIik7dGE9RShcInJlYWN0LnBvcnRhbFwiKTt1YT1FKFwicmVhY3QuZnJhZ21lbnRcIik7d2E9RShcInJlYWN0LnN0cmljdF9tb2RlXCIpO3hhPUUoXCJyZWFjdC5wcm9maWxlclwiKTt5YT1FKFwicmVhY3QucHJvdmlkZXJcIik7emE9RShcInJlYWN0LmNvbnRleHRcIik7QWE9RShcInJlYWN0LmZvcndhcmRfcmVmXCIpO0JhPUUoXCJyZWFjdC5zdXNwZW5zZVwiKTtDYT1FKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTtEYT1FKFwicmVhY3QubWVtb1wiKTtFYT1FKFwicmVhY3QubGF6eVwiKTtGYT1FKFwicmVhY3QuYmxvY2tcIik7RShcInJlYWN0LnNjb3BlXCIpO0dhPUUoXCJyZWFjdC5vcGFxdWUuaWRcIik7SGE9RShcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7SWE9RShcInJlYWN0Lm9mZnNjcmVlblwiKTtKYT1FKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKX1cbnZhciBLYT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gTGEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUthJiZhW0thXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfXZhciBNYTtmdW5jdGlvbiBOYShhKXtpZih2b2lkIDA9PT1NYSl0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goYyl7dmFyIGI9Yy5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtNYT1iJiZiWzFdfHxcIlwifXJldHVyblwiXFxuXCIrTWErYX12YXIgT2E9ITE7XG5mdW5jdGlvbiBQYShhLGIpe2lmKCFhfHxPYSlyZXR1cm5cIlwiO09hPSEwO3ZhciBjPUVycm9yLnByZXBhcmVTdGFja1RyYWNlO0Vycm9yLnByZXBhcmVTdGFja1RyYWNlPXZvaWQgMDt0cnl7aWYoYilpZihiPWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInByb3BzXCIse3NldDpmdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fX0pLFwib2JqZWN0XCI9PT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5jb25zdHJ1Y3Qpe3RyeXtSZWZsZWN0LmNvbnN0cnVjdChiLFtdKX1jYXRjaChrKXt2YXIgZD1rfVJlZmxlY3QuY29uc3RydWN0KGEsW10sYil9ZWxzZXt0cnl7Yi5jYWxsKCl9Y2F0Y2goayl7ZD1rfWEuY2FsbChiLnByb3RvdHlwZSl9ZWxzZXt0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goayl7ZD1rfWEoKX19Y2F0Y2goayl7aWYoayYmZCYmXCJzdHJpbmdcIj09PXR5cGVvZiBrLnN0YWNrKXtmb3IodmFyIGU9ay5zdGFjay5zcGxpdChcIlxcblwiKSxcbmY9ZC5zdGFjay5zcGxpdChcIlxcblwiKSxnPWUubGVuZ3RoLTEsaD1mLmxlbmd0aC0xOzE8PWcmJjA8PWgmJmVbZ10hPT1mW2hdOyloLS07Zm9yKDsxPD1nJiYwPD1oO2ctLSxoLS0paWYoZVtnXSE9PWZbaF0pe2lmKDEhPT1nfHwxIT09aCl7ZG8gaWYoZy0tLGgtLSwwPmh8fGVbZ10hPT1mW2hdKXJldHVyblwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7d2hpbGUoMTw9ZyYmMDw9aCl9YnJlYWt9fX1maW5hbGx5e09hPSExLEVycm9yLnByZXBhcmVTdGFja1RyYWNlPWN9cmV0dXJuKGE9YT9hLmRpc3BsYXlOYW1lfHxhLm5hbWU6XCJcIik/TmEoYSk6XCJcIn1cbmZ1bmN0aW9uIFFhKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBOYShhLnR5cGUpO2Nhc2UgMTY6cmV0dXJuIE5hKFwiTGF6eVwiKTtjYXNlIDEzOnJldHVybiBOYShcIlN1c3BlbnNlXCIpO2Nhc2UgMTk6cmV0dXJuIE5hKFwiU3VzcGVuc2VMaXN0XCIpO2Nhc2UgMDpjYXNlIDI6Y2FzZSAxNTpyZXR1cm4gYT1QYShhLnR5cGUsITEpLGE7Y2FzZSAxMTpyZXR1cm4gYT1QYShhLnR5cGUucmVuZGVyLCExKSxhO2Nhc2UgMjI6cmV0dXJuIGE9UGEoYS50eXBlLl9yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPVBhKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUmEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB1YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB0YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgeGE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2Ugd2E6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBCYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBDYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB6YTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSB5YTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBBYTp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtcbnJldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgRGE6cmV0dXJuIFJhKGEudHlwZSk7Y2FzZSBGYTpyZXR1cm4gUmEoYS5fcmVuZGVyKTtjYXNlIEVhOmI9YS5fcGF5bG9hZDthPWEuX2luaXQ7dHJ5e3JldHVybiBSYShhKGIpKX1jYXRjaChjKXt9fXJldHVybiBudWxsfWZ1bmN0aW9uIFNhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiBUYShhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gVWEoYSl7dmFyIGI9VGEoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFZhKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1VYShhKSl9ZnVuY3Rpb24gV2EoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVRhKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gWGEoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fVxuZnVuY3Rpb24gWWEoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG0oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIFphKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPVNhKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gJGEoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZxYShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gYWIoYSxiKXskYShhLGIpO3ZhciBjPVNhKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP2JiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJmJiKGEsYi50eXBlLFNhKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gY2IoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIGJiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8WGEoYS5vd25lckRvY3VtZW50KSE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfWZ1bmN0aW9uIGRiKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIGViKGEsYil7YT1tKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9ZGIoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gZmIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK1NhKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBnYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IoeSg5MSkpO3JldHVybiBtKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGhiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHkoOTIpKTtpZihBcnJheS5pc0FycmF5KGMpKXtpZighKDE+PWMubGVuZ3RoKSl0aHJvdyBFcnJvcih5KDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6U2EoYyl9fVxuZnVuY3Rpb24gaWIoYSxiKXt2YXIgYz1TYShiLnZhbHVlKSxkPVNhKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gamIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX12YXIga2I9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gbGIoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBtYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/bGIoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbmIsb2I9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09a2Iuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bmI9bmJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bmIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9bmIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gcGIoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBxYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxyYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMocWIpLmZvckVhY2goZnVuY3Rpb24oYSl7cmIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtxYltiXT1xYlthXX0pfSk7ZnVuY3Rpb24gc2IoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHFiLmhhc093blByb3BlcnR5KGEpJiZxYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiB0YihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1zYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciB1Yj1tKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdmIoYSxiKXtpZihiKXtpZih1YlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHkoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHkoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHkoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHkoNjIpKTt9fVxuZnVuY3Rpb24gd2IoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fWZ1bmN0aW9uIHhiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeWI9bnVsbCx6Yj1udWxsLEFiPW51bGw7XG5mdW5jdGlvbiBCYihhKXtpZihhPUNiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeWIpdGhyb3cgRXJyb3IoeSgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1EYihiKSx5YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBFYihhKXt6Yj9BYj9BYi5wdXNoKGEpOkFiPVthXTp6Yj1hfWZ1bmN0aW9uIEZiKCl7aWYoemIpe3ZhciBhPXpiLGI9QWI7QWI9emI9bnVsbDtCYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQmIoYlthXSl9fWZ1bmN0aW9uIEdiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gSGIoYSxiLGMsZCxlKXtyZXR1cm4gYShiLGMsZCxlKX1mdW5jdGlvbiBJYigpe312YXIgSmI9R2IsS2I9ITEsTGI9ITE7ZnVuY3Rpb24gTWIoKXtpZihudWxsIT09emJ8fG51bGwhPT1BYilJYigpLEZiKCl9XG5mdW5jdGlvbiBOYihhLGIsYyl7aWYoTGIpcmV0dXJuIGEoYixjKTtMYj0hMDt0cnl7cmV0dXJuIEpiKGEsYixjKX1maW5hbGx5e0xiPSExLE1iKCl9fVxuZnVuY3Rpb24gT2IoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDt2YXIgZD1EYihjKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgYyl0aHJvdyBFcnJvcih5KDIzMSxiLHR5cGVvZiBjKSk7cmV0dXJuIGN9dmFyIFBiPSExO2lmKGZhKXRyeXt2YXIgUWI9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KFFiLFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtQYj0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYik7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsUWIsUWIpfWNhdGNoKGEpe1BiPSExfWZ1bmN0aW9uIFJiKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChuKXt0aGlzLm9uRXJyb3Iobil9fXZhciBTYj0hMSxUYj1udWxsLFViPSExLFZiPW51bGwsV2I9e29uRXJyb3I6ZnVuY3Rpb24oYSl7U2I9ITA7VGI9YX19O2Z1bmN0aW9uIFhiKGEsYixjLGQsZSxmLGcsaCxrKXtTYj0hMTtUYj1udWxsO1JiLmFwcGx5KFdiLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBZYihhLGIsYyxkLGUsZixnLGgsayl7WGIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKFNiKXtpZihTYil7dmFyIGw9VGI7U2I9ITE7VGI9bnVsbH1lbHNlIHRocm93IEVycm9yKHkoMTk4KSk7VWJ8fChVYj0hMCxWYj1sKX19ZnVuY3Rpb24gWmIoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmZsYWdzJjEwMjYpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiAkYihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIGFjKGEpe2lmKFpiKGEpIT09YSl0aHJvdyBFcnJvcih5KDE4OCkpO31cbmZ1bmN0aW9uIGJjKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPVpiKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIGFjKGUpLGE7aWYoZj09PWQpcmV0dXJuIGFjKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IoeSgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcih5KDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHkoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gY2MoYSl7YT1iYyhhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGRjKGEsYil7Zm9yKHZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1iOyl7aWYoYj09PWF8fGI9PT1jKXJldHVybiEwO2I9Yi5yZXR1cm59cmV0dXJuITF9dmFyIGVjLGZjLGdjLGhjLGljPSExLGpjPVtdLGtjPW51bGwsbGM9bnVsbCxtYz1udWxsLG5jPW5ldyBNYXAsb2M9bmV3IE1hcCxwYz1bXSxxYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiByYyhhLGIsYyxkLGUpe3JldHVybntibG9ja2VkT246YSxkb21FdmVudE5hbWU6YixldmVudFN5c3RlbUZsYWdzOmN8MTYsbmF0aXZlRXZlbnQ6ZSx0YXJnZXRDb250YWluZXJzOltkXX19ZnVuY3Rpb24gc2MoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjprYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6bGM9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6bWM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOm5jLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOm9jLmRlbGV0ZShiLnBvaW50ZXJJZCl9fVxuZnVuY3Rpb24gdGMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT1yYyhiLGMsZCxlLGYpLG51bGwhPT1iJiYoYj1DYihiKSxudWxsIT09YiYmZmMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO2I9YS50YXJnZXRDb250YWluZXJzO251bGwhPT1lJiYtMT09PWIuaW5kZXhPZihlKSYmYi5wdXNoKGUpO3JldHVybiBhfVxuZnVuY3Rpb24gdWMoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzaW5cIjpyZXR1cm4ga2M9dGMoa2MsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIGxjPXRjKGxjLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBtYz10YyhtYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO25jLnNldChmLHRjKG5jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxvYy5zZXQoZix0YyhvYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiB2YyhhKXt2YXIgYj13YyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPVpiKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPSRiKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO2hjKGEubGFuZVByaW9yaXR5LGZ1bmN0aW9uKCl7ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoYS5wcmlvcml0eSxmdW5jdGlvbigpe2djKGMpfSl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmh5ZHJhdGUpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfVxuZnVuY3Rpb24geGMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO2Zvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXJldHVybiBiPUNiKGMpLG51bGwhPT1iJiZmYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiB6YyhhLGIsYyl7eGMoYSkmJmMuZGVsZXRlKGIpfVxuZnVuY3Rpb24gQWMoKXtmb3IoaWM9ITE7MDxqYy5sZW5ndGg7KXt2YXIgYT1qY1swXTtpZihudWxsIT09YS5ibG9ja2VkT24pe2E9Q2IoYS5ibG9ja2VkT24pO251bGwhPT1hJiZlYyhhKTticmVha31mb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz15YyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09Yyl7YS5ibG9ja2VkT249YzticmVha31iLnNoaWZ0KCl9bnVsbD09PWEuYmxvY2tlZE9uJiZqYy5zaGlmdCgpfW51bGwhPT1rYyYmeGMoa2MpJiYoa2M9bnVsbCk7bnVsbCE9PWxjJiZ4YyhsYykmJihsYz1udWxsKTtudWxsIT09bWMmJnhjKG1jKSYmKG1jPW51bGwpO25jLmZvckVhY2goemMpO29jLmZvckVhY2goemMpfVxuZnVuY3Rpb24gQmMoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLGljfHwoaWM9ITAsci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksQWMpKSl9XG5mdW5jdGlvbiBDYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBCYyhiLGEpfWlmKDA8amMubGVuZ3RoKXtCYyhqY1swXSxhKTtmb3IodmFyIGM9MTtjPGpjLmxlbmd0aDtjKyspe3ZhciBkPWpjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09a2MmJkJjKGtjLGEpO251bGwhPT1sYyYmQmMobGMsYSk7bnVsbCE9PW1jJiZCYyhtYyxhKTtuYy5mb3JFYWNoKGIpO29jLmZvckVhY2goYik7Zm9yKGM9MDtjPHBjLmxlbmd0aDtjKyspZD1wY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8cGMubGVuZ3RoJiYoYz1wY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOyl2YyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJnBjLnNoaWZ0KCl9XG5mdW5jdGlvbiBEYyhhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBFYz17YW5pbWF0aW9uZW5kOkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6RGMoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxGYz17fSxHYz17fTtcbmZhJiYoR2M9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgRWMuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgRWMuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgRWMuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgRWMudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBIYyhhKXtpZihGY1thXSlyZXR1cm4gRmNbYV07aWYoIUVjW2FdKXJldHVybiBhO3ZhciBiPUVjW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIEdjKXJldHVybiBGY1thXT1iW2NdO3JldHVybiBhfVxudmFyIEljPUhjKFwiYW5pbWF0aW9uZW5kXCIpLEpjPUhjKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLEtjPUhjKFwiYW5pbWF0aW9uc3RhcnRcIiksTGM9SGMoXCJ0cmFuc2l0aW9uZW5kXCIpLE1jPW5ldyBNYXAsTmM9bmV3IE1hcCxPYz1bXCJhYm9ydFwiLFwiYWJvcnRcIixJYyxcImFuaW1hdGlvbkVuZFwiLEpjLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCIsS2MsXCJhbmltYXRpb25TdGFydFwiLFwiY2FucGxheVwiLFwiY2FuUGxheVwiLFwiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCIsXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIixcImVtcHRpZWRcIixcImVtcHRpZWRcIixcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmRlZFwiLFwiZW5kZWRcIixcImVycm9yXCIsXCJlcnJvclwiLFwiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCIsXCJsb2FkXCIsXCJsb2FkXCIsXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCIsXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIixcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCIsXG5cImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIixcInNlZWtpbmdcIixcInNlZWtpbmdcIixcInN0YWxsZWRcIixcInN0YWxsZWRcIixcInN1c3BlbmRcIixcInN1c3BlbmRcIixcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIixMYyxcInRyYW5zaXRpb25FbmRcIixcIndhaXRpbmdcIixcIndhaXRpbmdcIl07ZnVuY3Rpb24gUGMoYSxiKXtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrPTIpe3ZhciBkPWFbY10sZT1hW2MrMV07ZT1cIm9uXCIrKGVbMF0udG9VcHBlckNhc2UoKStlLnNsaWNlKDEpKTtOYy5zZXQoZCxiKTtNYy5zZXQoZCxlKTtkYShlLFtkXSl9fXZhciBRYz1yLnVuc3RhYmxlX25vdztRYygpO3ZhciBGPTg7XG5mdW5jdGlvbiBSYyhhKXtpZigwIT09KDEmYSkpcmV0dXJuIEY9MTUsMTtpZigwIT09KDImYSkpcmV0dXJuIEY9MTQsMjtpZigwIT09KDQmYSkpcmV0dXJuIEY9MTMsNDt2YXIgYj0yNCZhO2lmKDAhPT1iKXJldHVybiBGPTEyLGI7aWYoMCE9PShhJjMyKSlyZXR1cm4gRj0xMSwzMjtiPTE5MiZhO2lmKDAhPT1iKXJldHVybiBGPTEwLGI7aWYoMCE9PShhJjI1NikpcmV0dXJuIEY9OSwyNTY7Yj0zNTg0JmE7aWYoMCE9PWIpcmV0dXJuIEY9OCxiO2lmKDAhPT0oYSY0MDk2KSlyZXR1cm4gRj03LDQwOTY7Yj00MTg2MTEyJmE7aWYoMCE9PWIpcmV0dXJuIEY9NixiO2I9NjI5MTQ1NjAmYTtpZigwIT09YilyZXR1cm4gRj01LGI7aWYoYSY2NzEwODg2NClyZXR1cm4gRj00LDY3MTA4ODY0O2lmKDAhPT0oYSYxMzQyMTc3MjgpKXJldHVybiBGPTMsMTM0MjE3NzI4O2I9ODA1MzA2MzY4JmE7aWYoMCE9PWIpcmV0dXJuIEY9MixiO2lmKDAhPT0oMTA3Mzc0MTgyNCZhKSlyZXR1cm4gRj0xLDEwNzM3NDE4MjQ7XG5GPTg7cmV0dXJuIGF9ZnVuY3Rpb24gU2MoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIDE1O2Nhc2UgOTg6cmV0dXJuIDEwO2Nhc2UgOTc6Y2FzZSA5NjpyZXR1cm4gODtjYXNlIDk1OnJldHVybiAyO2RlZmF1bHQ6cmV0dXJuIDB9fWZ1bmN0aW9uIFRjKGEpe3N3aXRjaChhKXtjYXNlIDE1OmNhc2UgMTQ6cmV0dXJuIDk5O2Nhc2UgMTM6Y2FzZSAxMjpjYXNlIDExOmNhc2UgMTA6cmV0dXJuIDk4O2Nhc2UgOTpjYXNlIDg6Y2FzZSA3OmNhc2UgNjpjYXNlIDQ6Y2FzZSA1OnJldHVybiA5NztjYXNlIDM6Y2FzZSAyOmNhc2UgMTpyZXR1cm4gOTU7Y2FzZSAwOnJldHVybiA5MDtkZWZhdWx0OnRocm93IEVycm9yKHkoMzU4LGEpKTt9fVxuZnVuY3Rpb24gVWMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gRj0wO3ZhciBkPTAsZT0wLGY9YS5leHBpcmVkTGFuZXMsZz1hLnN1c3BlbmRlZExhbmVzLGg9YS5waW5nZWRMYW5lcztpZigwIT09ZilkPWYsZT1GPTE1O2Vsc2UgaWYoZj1jJjEzNDIxNzcyNywwIT09Zil7dmFyIGs9ZiZ+ZzswIT09az8oZD1SYyhrKSxlPUYpOihoJj1mLDAhPT1oJiYoZD1SYyhoKSxlPUYpKX1lbHNlIGY9YyZ+ZywwIT09Zj8oZD1SYyhmKSxlPUYpOjAhPT1oJiYoZD1SYyhoKSxlPUYpO2lmKDA9PT1kKXJldHVybiAwO2Q9MzEtVmMoZCk7ZD1jJigoMD5kPzA6MTw8ZCk8PDEpLTE7aWYoMCE9PWImJmIhPT1kJiYwPT09KGImZykpe1JjKGIpO2lmKGU8PUYpcmV0dXJuIGI7Rj1lfWI9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtVmMoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiBXYyhhKXthPWEucGVuZGluZ0xhbmVzJi0xMDczNzQxODI1O3JldHVybiAwIT09YT9hOmEmMTA3Mzc0MTgyND8xMDczNzQxODI0OjB9ZnVuY3Rpb24gWGMoYSxiKXtzd2l0Y2goYSl7Y2FzZSAxNTpyZXR1cm4gMTtjYXNlIDE0OnJldHVybiAyO2Nhc2UgMTI6cmV0dXJuIGE9WWMoMjQmfmIpLDA9PT1hP1hjKDEwLGIpOmE7Y2FzZSAxMDpyZXR1cm4gYT1ZYygxOTImfmIpLDA9PT1hP1hjKDgsYik6YTtjYXNlIDg6cmV0dXJuIGE9WWMoMzU4NCZ+YiksMD09PWEmJihhPVljKDQxODYxMTImfmIpLDA9PT1hJiYoYT01MTIpKSxhO2Nhc2UgMjpyZXR1cm4gYj1ZYyg4MDUzMDYzNjgmfmIpLDA9PT1iJiYoYj0yNjg0MzU0NTYpLGJ9dGhyb3cgRXJyb3IoeSgzNTgsYSkpO31mdW5jdGlvbiBZYyhhKXtyZXR1cm4gYSYtYX1mdW5jdGlvbiBaYyhhKXtmb3IodmFyIGI9W10sYz0wOzMxPmM7YysrKWIucHVzaChhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uICRjKGEsYixjKXthLnBlbmRpbmdMYW5lc3w9Yjt2YXIgZD1iLTE7YS5zdXNwZW5kZWRMYW5lcyY9ZDthLnBpbmdlZExhbmVzJj1kO2E9YS5ldmVudFRpbWVzO2I9MzEtVmMoYik7YVtiXT1jfXZhciBWYz1NYXRoLmNsejMyP01hdGguY2x6MzI6YWQsYmQ9TWF0aC5sb2csY2Q9TWF0aC5MTjI7ZnVuY3Rpb24gYWQoYSl7cmV0dXJuIDA9PT1hPzMyOjMxLShiZChhKS9jZHwwKXwwfXZhciBkZD1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGVkPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LGZkPSEwO2Z1bmN0aW9uIGdkKGEsYixjLGQpe0tifHxJYigpO3ZhciBlPWhkLGY9S2I7S2I9ITA7dHJ5e0hiKGUsYSxiLGMsZCl9ZmluYWxseXsoS2I9Zil8fE1iKCl9fWZ1bmN0aW9uIGlkKGEsYixjLGQpe2VkKGRkLGhkLmJpbmQobnVsbCxhLGIsYyxkKSl9XG5mdW5jdGlvbiBoZChhLGIsYyxkKXtpZihmZCl7dmFyIGU7aWYoKGU9MD09PShiJjQpKSYmMDxqYy5sZW5ndGgmJi0xPHFjLmluZGV4T2YoYSkpYT1yYyhudWxsLGEsYixjLGQpLGpjLnB1c2goYSk7ZWxzZXt2YXIgZj15YyhhLGIsYyxkKTtpZihudWxsPT09ZillJiZzYyhhLGQpO2Vsc2V7aWYoZSl7aWYoLTE8cWMuaW5kZXhPZihhKSl7YT1yYyhmLGEsYixjLGQpO2pjLnB1c2goYSk7cmV0dXJufWlmKHVjKGYsYSxiLGMsZCkpcmV0dXJuO3NjKGEsZCl9amQoYSxiLGQsbnVsbCxjKX19fX1cbmZ1bmN0aW9uIHljKGEsYixjLGQpe3ZhciBlPXhiKGQpO2U9d2MoZSk7aWYobnVsbCE9PWUpe3ZhciBmPVpiKGUpO2lmKG51bGw9PT1mKWU9bnVsbDtlbHNle3ZhciBnPWYudGFnO2lmKDEzPT09Zyl7ZT0kYihmKTtpZihudWxsIT09ZSlyZXR1cm4gZTtlPW51bGx9ZWxzZSBpZigzPT09Zyl7aWYoZi5zdGF0ZU5vZGUuaHlkcmF0ZSlyZXR1cm4gMz09PWYudGFnP2Yuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtlPW51bGx9ZWxzZSBmIT09ZSYmKGU9bnVsbCl9fWpkKGEsYixkLGUsYyk7cmV0dXJuIG51bGx9dmFyIGtkPW51bGwsbGQ9bnVsbCxtZD1udWxsO1xuZnVuY3Rpb24gbmQoKXtpZihtZClyZXR1cm4gbWQ7dmFyIGEsYj1sZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBtZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIG9kKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfWZ1bmN0aW9uIHBkKCl7cmV0dXJuITB9ZnVuY3Rpb24gcWQoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHJkKGEpe2Z1bmN0aW9uIGIoYixkLGUsZixnKXt0aGlzLl9yZWFjdE5hbWU9Yjt0aGlzLl90YXJnZXRJbnN0PWU7dGhpcy50eXBlPWQ7dGhpcy5uYXRpdmVFdmVudD1mO3RoaXMudGFyZ2V0PWc7dGhpcy5jdXJyZW50VGFyZ2V0PW51bGw7Zm9yKHZhciBjIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShjKSYmKGI9YVtjXSx0aGlzW2NdPWI/YihmKTpmW2NdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Zi5kZWZhdWx0UHJldmVudGVkP2YuZGVmYXVsdFByZXZlbnRlZDohMT09PWYucmV0dXJuVmFsdWUpP3BkOnFkO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cWQ7cmV0dXJuIHRoaXN9bShiLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmXG4oYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9cGQpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cGQpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7fSxpc1BlcnNpc3RlbnQ6cGR9KTtyZXR1cm4gYn1cbnZhciBzZD17ZXZlbnRQaGFzZTowLGJ1YmJsZXM6MCxjYW5jZWxhYmxlOjAsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDowLGlzVHJ1c3RlZDowfSx0ZD1yZChzZCksdWQ9bSh7fSxzZCx7dmlldzowLGRldGFpbDowfSksdmQ9cmQodWQpLHdkLHhkLHlkLEFkPW0oe30sdWQse3NjcmVlblg6MCxzY3JlZW5ZOjAsY2xpZW50WDowLGNsaWVudFk6MCxwYWdlWDowLHBhZ2VZOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLGdldE1vZGlmaWVyU3RhdGU6emQsYnV0dG9uOjAsYnV0dG9uczowLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWEucmVsYXRlZFRhcmdldD9hLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQ6YS5yZWxhdGVkVGFyZ2V0fSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluXG5hKXJldHVybiBhLm1vdmVtZW50WDthIT09eWQmJih5ZCYmXCJtb3VzZW1vdmVcIj09PWEudHlwZT8od2Q9YS5zY3JlZW5YLXlkLnNjcmVlblgseGQ9YS5zY3JlZW5ZLXlkLnNjcmVlblkpOnhkPXdkPTAseWQ9YSk7cmV0dXJuIHdkfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJtb3ZlbWVudFlcImluIGE/YS5tb3ZlbWVudFk6eGR9fSksQmQ9cmQoQWQpLENkPW0oe30sQWQse2RhdGFUcmFuc2ZlcjowfSksRGQ9cmQoQ2QpLEVkPW0oe30sdWQse3JlbGF0ZWRUYXJnZXQ6MH0pLEZkPXJkKEVkKSxHZD1tKHt9LHNkLHthbmltYXRpb25OYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxIZD1yZChHZCksSWQ9bSh7fSxzZCx7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLEpkPXJkKElkKSxLZD1tKHt9LHNkLHtkYXRhOjB9KSxMZD1yZChLZCksTWQ9e0VzYzpcIkVzY2FwZVwiLFxuU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sTmQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsXG4xMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LE9kPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9kW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gemQoKXtyZXR1cm4gUGR9XG52YXIgUWQ9bSh7fSx1ZCx7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1NZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1vZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/TmRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxjb2RlOjAsbG9jYXRpb246MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAscmVwZWF0OjAsbG9jYWxlOjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2QoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9vZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLFJkPXJkKFFkKSxTZD1tKHt9LEFkLHtwb2ludGVySWQ6MCx3aWR0aDowLGhlaWdodDowLHByZXNzdXJlOjAsdGFuZ2VudGlhbFByZXNzdXJlOjAsdGlsdFg6MCx0aWx0WTowLHR3aXN0OjAscG9pbnRlclR5cGU6MCxpc1ByaW1hcnk6MH0pLFRkPXJkKFNkKSxVZD1tKHt9LHVkLHt0b3VjaGVzOjAsdGFyZ2V0VG91Y2hlczowLGNoYW5nZWRUb3VjaGVzOjAsYWx0S2V5OjAsbWV0YUtleTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGdldE1vZGlmaWVyU3RhdGU6emR9KSxWZD1yZChVZCksV2Q9bSh7fSxzZCx7cHJvcGVydHlOYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxYZD1yZChXZCksWWQ9bSh7fSxBZCx7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluIGE/LWEud2hlZWxEZWx0YVg6MH0sXG5kZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6MCxkZWx0YU1vZGU6MH0pLFpkPXJkKFlkKSwkZD1bOSwxMywyNywzMl0sYWU9ZmEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGJlPW51bGw7ZmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGJlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIGNlPWZhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhYmUsZGU9ZmEmJighYWV8fGJlJiY4PGJlJiYxMT49YmUpLGVlPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLGZlPSExO1xuZnVuY3Rpb24gZ2UoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT0kZC5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiZm9jdXNvdXRcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBoZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBpZT0hMTtmdW5jdGlvbiBqZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gaGUoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO2ZlPSEwO3JldHVybiBlZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1lZSYmZmU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24ga2UoYSxiKXtpZihpZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhYWUmJmdlKGEsYik/KGE9bmQoKSxtZD1sZD1rZD1udWxsLGllPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBkZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgbGU9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gbWUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFsZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gbmUoYSxiLGMsZCl7RWIoZCk7Yj1vZShiLFwib25DaGFuZ2VcIik7MDxiLmxlbmd0aCYmKGM9bmV3IHRkKFwib25DaGFuZ2VcIixcImNoYW5nZVwiLG51bGwsYyxkKSxhLnB1c2goe2V2ZW50OmMsbGlzdGVuZXJzOmJ9KSl9dmFyIHBlPW51bGwscWU9bnVsbDtmdW5jdGlvbiByZShhKXtzZShhLDApfWZ1bmN0aW9uIHRlKGEpe3ZhciBiPXVlKGEpO2lmKFdhKGIpKXJldHVybiBhfVxuZnVuY3Rpb24gdmUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgd2U9ITE7aWYoZmEpe3ZhciB4ZTtpZihmYSl7dmFyIHllPVwib25pbnB1dFwiaW4gZG9jdW1lbnQ7aWYoIXllKXt2YXIgemU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt6ZS5zZXRBdHRyaWJ1dGUoXCJvbmlucHV0XCIsXCJyZXR1cm47XCIpO3llPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB6ZS5vbmlucHV0fXhlPXllfWVsc2UgeGU9ITE7d2U9eGUmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSl9ZnVuY3Rpb24gQWUoKXtwZSYmKHBlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSxxZT1wZT1udWxsKX1mdW5jdGlvbiBCZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmdGUocWUpKXt2YXIgYj1bXTtuZShiLHFlLGEseGIoYSkpO2E9cmU7aWYoS2IpYShiKTtlbHNle0tiPSEwO3RyeXtHYihhLGIpfWZpbmFsbHl7S2I9ITEsTWIoKX19fX1cbmZ1bmN0aW9uIENlKGEsYixjKXtcImZvY3VzaW5cIj09PWE/KEFlKCkscGU9YixxZT1jLHBlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSk6XCJmb2N1c291dFwiPT09YSYmQWUoKX1mdW5jdGlvbiBEZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiB0ZShxZSl9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBGZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBHZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIEhlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOkdlLEllPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBKZShhLGIpe2lmKEhlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighSWUuY2FsbChiLGNbZF0pfHwhSGUoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBLZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBMZShhLGIpe3ZhciBjPUtlKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUtlKGMpfX1mdW5jdGlvbiBNZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP01lKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE5lKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVhhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVhhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE9lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgUGU9ZmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxRZT1udWxsLFJlPW51bGwsU2U9bnVsbCxUZT0hMTtcbmZ1bmN0aW9uIFVlKGEsYixjKXt2YXIgZD1jLndpbmRvdz09PWM/Yy5kb2N1bWVudDo5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtUZXx8bnVsbD09UWV8fFFlIT09WGEoZCl8fChkPVFlLFwic2VsZWN0aW9uU3RhcnRcImluIGQmJk9lKGQpP2Q9e3N0YXJ0OmQuc2VsZWN0aW9uU3RhcnQsZW5kOmQuc2VsZWN0aW9uRW5kfTooZD0oZC5vd25lckRvY3VtZW50JiZkLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksZD17YW5jaG9yTm9kZTpkLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmQuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpkLmZvY3VzTm9kZSxmb2N1c09mZnNldDpkLmZvY3VzT2Zmc2V0fSksU2UmJkplKFNlLGQpfHwoU2U9ZCxkPW9lKFJlLFwib25TZWxlY3RcIiksMDxkLmxlbmd0aCYmKGI9bmV3IHRkKFwib25TZWxlY3RcIixcInNlbGVjdFwiLG51bGwsYixjKSxhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmR9KSxiLnRhcmdldD1RZSkpKX1cblBjKFwiY2FuY2VsIGNhbmNlbCBjbGljayBjbGljayBjbG9zZSBjbG9zZSBjb250ZXh0bWVudSBjb250ZXh0TWVudSBjb3B5IGNvcHkgY3V0IGN1dCBhdXhjbGljayBhdXhDbGljayBkYmxjbGljayBkb3VibGVDbGljayBkcmFnZW5kIGRyYWdFbmQgZHJhZ3N0YXJ0IGRyYWdTdGFydCBkcm9wIGRyb3AgZm9jdXNpbiBmb2N1cyBmb2N1c291dCBibHVyIGlucHV0IGlucHV0IGludmFsaWQgaW52YWxpZCBrZXlkb3duIGtleURvd24ga2V5cHJlc3Mga2V5UHJlc3Mga2V5dXAga2V5VXAgbW91c2Vkb3duIG1vdXNlRG93biBtb3VzZXVwIG1vdXNlVXAgcGFzdGUgcGFzdGUgcGF1c2UgcGF1c2UgcGxheSBwbGF5IHBvaW50ZXJjYW5jZWwgcG9pbnRlckNhbmNlbCBwb2ludGVyZG93biBwb2ludGVyRG93biBwb2ludGVydXAgcG9pbnRlclVwIHJhdGVjaGFuZ2UgcmF0ZUNoYW5nZSByZXNldCByZXNldCBzZWVrZWQgc2Vla2VkIHN1Ym1pdCBzdWJtaXQgdG91Y2hjYW5jZWwgdG91Y2hDYW5jZWwgdG91Y2hlbmQgdG91Y2hFbmQgdG91Y2hzdGFydCB0b3VjaFN0YXJ0IHZvbHVtZWNoYW5nZSB2b2x1bWVDaGFuZ2VcIi5zcGxpdChcIiBcIiksXG4wKTtQYyhcImRyYWcgZHJhZyBkcmFnZW50ZXIgZHJhZ0VudGVyIGRyYWdleGl0IGRyYWdFeGl0IGRyYWdsZWF2ZSBkcmFnTGVhdmUgZHJhZ292ZXIgZHJhZ092ZXIgbW91c2Vtb3ZlIG1vdXNlTW92ZSBtb3VzZW91dCBtb3VzZU91dCBtb3VzZW92ZXIgbW91c2VPdmVyIHBvaW50ZXJtb3ZlIHBvaW50ZXJNb3ZlIHBvaW50ZXJvdXQgcG9pbnRlck91dCBwb2ludGVyb3ZlciBwb2ludGVyT3ZlciBzY3JvbGwgc2Nyb2xsIHRvZ2dsZSB0b2dnbGUgdG91Y2htb3ZlIHRvdWNoTW92ZSB3aGVlbCB3aGVlbFwiLnNwbGl0KFwiIFwiKSwxKTtQYyhPYywyKTtmb3IodmFyIFZlPVwiY2hhbmdlIHNlbGVjdGlvbmNoYW5nZSB0ZXh0SW5wdXQgY29tcG9zaXRpb25zdGFydCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnVwZGF0ZVwiLnNwbGl0KFwiIFwiKSxXZT0wO1dlPFZlLmxlbmd0aDtXZSsrKU5jLnNldChWZVtXZV0sMCk7ZWEoXCJvbk1vdXNlRW50ZXJcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtcbmVhKFwib25Nb3VzZUxlYXZlXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7ZWEoXCJvblBvaW50ZXJFbnRlclwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtlYShcIm9uUG9pbnRlckxlYXZlXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2RhKFwib25DaGFuZ2VcIixcImNoYW5nZSBjbGljayBmb2N1c2luIGZvY3Vzb3V0IGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uU2VsZWN0XCIsXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25CZWZvcmVJbnB1dFwiLFtcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXSk7ZGEoXCJvbkNvbXBvc2l0aW9uRW5kXCIsXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7XG5kYShcIm9uQ29tcG9zaXRpb25TdGFydFwiLFwiY29tcG9zaXRpb25zdGFydCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7dmFyIFhlPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxZZT1uZXcgU2V0KFwiY2FuY2VsIGNsb3NlIGludmFsaWQgbG9hZCBzY3JvbGwgdG9nZ2xlXCIuc3BsaXQoXCIgXCIpLmNvbmNhdChYZSkpO1xuZnVuY3Rpb24gWmUoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PWM7WWIoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIHNlKGEsYil7Yj0wIT09KGImNCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWFbY10sZT1kLmV2ZW50O2Q9ZC5saXN0ZW5lcnM7YTp7dmFyIGY9dm9pZCAwO2lmKGIpZm9yKHZhciBnPWQubGVuZ3RoLTE7MDw9ZztnLS0pe3ZhciBoPWRbZ10saz1oLmluc3RhbmNlLGw9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7WmUoZSxoLGwpO2Y9a31lbHNlIGZvcihnPTA7ZzxkLmxlbmd0aDtnKyspe2g9ZFtnXTtrPWguaW5zdGFuY2U7bD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfX19aWYoVWIpdGhyb3cgYT1WYixVYj0hMSxWYj1udWxsLGE7fVxuZnVuY3Rpb24gRyhhLGIpe3ZhciBjPSRlKGIpLGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChhZihiLGEsMiwhMSksYy5hZGQoZCkpfXZhciBiZj1cIl9yZWFjdExpc3RlbmluZ1wiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO2Z1bmN0aW9uIGNmKGEpe2FbYmZdfHwoYVtiZl09ITAsYmEuZm9yRWFjaChmdW5jdGlvbihiKXtZZS5oYXMoYil8fGRmKGIsITEsYSxudWxsKTtkZihiLCEwLGEsbnVsbCl9KSl9XG5mdW5jdGlvbiBkZihhLGIsYyxkKXt2YXIgZT00PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06MCxmPWM7XCJzZWxlY3Rpb25jaGFuZ2VcIj09PWEmJjkhPT1jLm5vZGVUeXBlJiYoZj1jLm93bmVyRG9jdW1lbnQpO2lmKG51bGwhPT1kJiYhYiYmWWUuaGFzKGEpKXtpZihcInNjcm9sbFwiIT09YSlyZXR1cm47ZXw9MjtmPWR9dmFyIGc9JGUoZiksaD1hK1wiX19cIisoYj9cImNhcHR1cmVcIjpcImJ1YmJsZVwiKTtnLmhhcyhoKXx8KGImJihlfD00KSxhZihmLGEsZSxiKSxnLmFkZChoKSl9XG5mdW5jdGlvbiBhZihhLGIsYyxkKXt2YXIgZT1OYy5nZXQoYik7c3dpdGNoKHZvaWQgMD09PWU/MjplKXtjYXNlIDA6ZT1nZDticmVhaztjYXNlIDE6ZT1pZDticmVhaztkZWZhdWx0OmU9aGR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IVBifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGpkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9d2MoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufU5iKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXhiKGMpLGc9W107XG5hOnt2YXIgaD1NYy5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9dGQseD1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2QoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9UmQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjp4PVwiZm9jdXNcIjtrPUZkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOng9XCJibHVyXCI7az1GZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUZkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az1CZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxuRGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1WZDticmVhaztjYXNlIEljOmNhc2UgSmM6Y2FzZSBLYzprPUhkO2JyZWFrO2Nhc2UgTGM6az1YZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az12ZDticmVhaztjYXNlIFwid2hlZWxcIjprPVpkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9SmQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1UZH12YXIgdz0wIT09KGImNCksej0hdyYmXCJzY3JvbGxcIj09PWEsdT13P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3c9W107Zm9yKHZhciB0PWQscTtudWxsIT09XG50Oyl7cT10O3ZhciB2PXEuc3RhdGVOb2RlOzU9PT1xLnRhZyYmbnVsbCE9PXYmJihxPXYsbnVsbCE9PXUmJih2PU9iKHQsdSksbnVsbCE9diYmdy5wdXNoKGVmKHQsdixxKSkpKTtpZih6KWJyZWFrO3Q9dC5yZXR1cm59MDx3Lmxlbmd0aCYmKGg9bmV3IGsoaCx4LG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnd9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiYwPT09KGImMTYpJiYoeD1jLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpJiYod2MoeCl8fHhbZmZdKSlicmVhayBhO2lmKGt8fGgpe2g9ZS53aW5kb3c9PT1lP2U6KGg9ZS5vd25lckRvY3VtZW50KT9oLmRlZmF1bHRWaWV3fHxoLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoayl7aWYoeD1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50LGs9ZCx4PXg/d2MoeCk6bnVsbCxudWxsIT09XG54JiYoej1aYih4KSx4IT09enx8NSE9PXgudGFnJiY2IT09eC50YWcpKXg9bnVsbH1lbHNlIGs9bnVsbCx4PWQ7aWYoayE9PXgpe3c9QmQ7dj1cIm9uTW91c2VMZWF2ZVwiO3U9XCJvbk1vdXNlRW50ZXJcIjt0PVwibW91c2VcIjtpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpdz1UZCx2PVwib25Qb2ludGVyTGVhdmVcIix1PVwib25Qb2ludGVyRW50ZXJcIix0PVwicG9pbnRlclwiO3o9bnVsbD09az9oOnVlKGspO3E9bnVsbD09eD9oOnVlKHgpO2g9bmV3IHcodix0K1wibGVhdmVcIixrLGMsZSk7aC50YXJnZXQ9ejtoLnJlbGF0ZWRUYXJnZXQ9cTt2PW51bGw7d2MoZSk9PT1kJiYodz1uZXcgdyh1LHQrXCJlbnRlclwiLHgsYyxlKSx3LnRhcmdldD1xLHcucmVsYXRlZFRhcmdldD16LHY9dyk7ej12O2lmKGsmJngpYjp7dz1rO3U9eDt0PTA7Zm9yKHE9dztxO3E9Z2YocSkpdCsrO3E9MDtmb3Iodj11O3Y7dj1nZih2KSlxKys7Zm9yKDswPHQtcTspdz1nZih3KSx0LS07Zm9yKDswPHEtdDspdT1cbmdmKHUpLHEtLTtmb3IoO3QtLTspe2lmKHc9PT11fHxudWxsIT09dSYmdz09PXUuYWx0ZXJuYXRlKWJyZWFrIGI7dz1nZih3KTt1PWdmKHUpfXc9bnVsbH1lbHNlIHc9bnVsbDtudWxsIT09ayYmaGYoZyxoLGssdywhMSk7bnVsbCE9PXgmJm51bGwhPT16JiZoZihnLHoseCx3LCEwKX19fWE6e2g9ZD91ZShkKTp3aW5kb3c7az1oLm5vZGVOYW1lJiZoLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWt8fFwiaW5wdXRcIj09PWsmJlwiZmlsZVwiPT09aC50eXBlKXZhciBKPXZlO2Vsc2UgaWYobWUoaCkpaWYod2UpSj1GZTtlbHNle0o9RGU7dmFyIEs9Q2V9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihKPUVlKTtpZihKJiYoSj1KKGEsZCkpKXtuZShnLEosYyxlKTticmVhayBhfUsmJksoYSxoLGQpO1wiZm9jdXNvdXRcIj09PWEmJihLPWguX3dyYXBwZXJTdGF0ZSkmJlxuSy5jb250cm9sbGVkJiZcIm51bWJlclwiPT09aC50eXBlJiZiYihoLFwibnVtYmVyXCIsaC52YWx1ZSl9Sz1kP3VlKGQpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjppZihtZShLKXx8XCJ0cnVlXCI9PT1LLmNvbnRlbnRFZGl0YWJsZSlRZT1LLFJlPWQsU2U9bnVsbDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpTZT1SZT1RZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpUZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6VGU9ITE7VWUoZyxjLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihQZSlicmVhaztjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOlVlKGcsYyxlKX12YXIgUTtpZihhZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgTD1cIm9uQ29tcG9zaXRpb25TdGFydFwiO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6TD1cIm9uQ29tcG9zaXRpb25FbmRcIjticmVhayBiO1xuY2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6TD1cIm9uQ29tcG9zaXRpb25VcGRhdGVcIjticmVhayBifUw9dm9pZCAwfWVsc2UgaWU/Z2UoYSxjKSYmKEw9XCJvbkNvbXBvc2l0aW9uRW5kXCIpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoTD1cIm9uQ29tcG9zaXRpb25TdGFydFwiKTtMJiYoZGUmJlwia29cIiE9PWMubG9jYWxlJiYoaWV8fFwib25Db21wb3NpdGlvblN0YXJ0XCIhPT1MP1wib25Db21wb3NpdGlvbkVuZFwiPT09TCYmaWUmJihRPW5kKCkpOihrZD1lLGxkPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGllPSEwKSksSz1vZShkLEwpLDA8Sy5sZW5ndGgmJihMPW5ldyBMZChMLGEsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6TCxsaXN0ZW5lcnM6S30pLFE/TC5kYXRhPVE6KFE9aGUoYyksbnVsbCE9PVEmJihMLmRhdGE9USkpKSk7aWYoUT1jZT9qZShhLGMpOmtlKGEsYykpZD1vZShkLFwib25CZWZvcmVJbnB1dFwiKSwwPGQubGVuZ3RoJiYoZT1uZXcgTGQoXCJvbkJlZm9yZUlucHV0XCIsXG5cImJlZm9yZWlucHV0XCIsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6ZSxsaXN0ZW5lcnM6ZH0pLGUuZGF0YT1RKX1zZShnLGIpfSl9ZnVuY3Rpb24gZWYoYSxiLGMpe3JldHVybntpbnN0YW5jZTphLGxpc3RlbmVyOmIsY3VycmVudFRhcmdldDpjfX1mdW5jdGlvbiBvZShhLGIpe2Zvcih2YXIgYz1iK1wiQ2FwdHVyZVwiLGQ9W107bnVsbCE9PWE7KXt2YXIgZT1hLGY9ZS5zdGF0ZU5vZGU7NT09PWUudGFnJiZudWxsIT09ZiYmKGU9ZixmPU9iKGEsYyksbnVsbCE9ZiYmZC51bnNoaWZ0KGVmKGEsZixlKSksZj1PYihhLGIpLG51bGwhPWYmJmQucHVzaChlZihhLGYsZSkpKTthPWEucmV0dXJufXJldHVybiBkfWZ1bmN0aW9uIGdmKGEpe2lmKG51bGw9PT1hKXJldHVybiBudWxsO2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiBoZihhLGIsYyxkLGUpe2Zvcih2YXIgZj1iLl9yZWFjdE5hbWUsZz1bXTtudWxsIT09YyYmYyE9PWQ7KXt2YXIgaD1jLGs9aC5hbHRlcm5hdGUsbD1oLnN0YXRlTm9kZTtpZihudWxsIT09ayYmaz09PWQpYnJlYWs7NT09PWgudGFnJiZudWxsIT09bCYmKGg9bCxlPyhrPU9iKGMsZiksbnVsbCE9ayYmZy51bnNoaWZ0KGVmKGMsayxoKSkpOmV8fChrPU9iKGMsZiksbnVsbCE9ayYmZy5wdXNoKGVmKGMsayxoKSkpKTtjPWMucmV0dXJufTAhPT1nLmxlbmd0aCYmYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpnfSl9ZnVuY3Rpb24gamYoKXt9dmFyIGtmPW51bGwsbGY9bnVsbDtmdW5jdGlvbiBtZihhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG5mdW5jdGlvbiBuZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIG9mPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLHBmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtmdW5jdGlvbiBxZihhKXsxPT09YS5ub2RlVHlwZT9hLnRleHRDb250ZW50PVwiXCI6OT09PWEubm9kZVR5cGUmJihhPWEuYm9keSxudWxsIT1hJiYoYS50ZXh0Q29udGVudD1cIlwiKSl9XG5mdW5jdGlvbiByZihhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVha31yZXR1cm4gYX1mdW5jdGlvbiBzZihhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiJFwiPT09Y3x8XCIkIVwiPT09Y3x8XCIkP1wiPT09Yyl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2VcIi8kXCI9PT1jJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgdGY9MDtmdW5jdGlvbiB1ZihhKXtyZXR1cm57JCR0eXBlb2Y6R2EsdG9TdHJpbmc6YSx2YWx1ZU9mOmF9fXZhciB2Zj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSx3Zj1cIl9fcmVhY3RGaWJlciRcIit2Zix4Zj1cIl9fcmVhY3RQcm9wcyRcIit2ZixmZj1cIl9fcmVhY3RDb250YWluZXIkXCIrdmYseWY9XCJfX3JlYWN0RXZlbnRzJFwiK3ZmO1xuZnVuY3Rpb24gd2MoYSl7dmFyIGI9YVt3Zl07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbZmZdfHxjW3dmXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPXNmKGEpO251bGwhPT1hOyl7aWYoYz1hW3dmXSlyZXR1cm4gYzthPXNmKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDYihhKXthPWFbd2ZdfHxhW2ZmXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gdWUoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHkoMzMpKTt9ZnVuY3Rpb24gRGIoYSl7cmV0dXJuIGFbeGZdfHxudWxsfVxuZnVuY3Rpb24gJGUoYSl7dmFyIGI9YVt5Zl07dm9pZCAwPT09YiYmKGI9YVt5Zl09bmV3IFNldCk7cmV0dXJuIGJ9dmFyIHpmPVtdLEFmPS0xO2Z1bmN0aW9uIEJmKGEpe3JldHVybntjdXJyZW50OmF9fWZ1bmN0aW9uIEgoYSl7MD5BZnx8KGEuY3VycmVudD16ZltBZl0semZbQWZdPW51bGwsQWYtLSl9ZnVuY3Rpb24gSShhLGIpe0FmKys7emZbQWZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgQ2Y9e30sTT1CZihDZiksTj1CZighMSksRGY9Q2Y7XG5mdW5jdGlvbiBFZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIENmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEZmKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gR2YoKXtIKE4pO0goTSl9ZnVuY3Rpb24gSGYoYSxiLGMpe2lmKE0uY3VycmVudCE9PUNmKXRocm93IEVycm9yKHkoMTY4KSk7SShNLGIpO0koTixjKX1cbmZ1bmN0aW9uIElmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYSkpdGhyb3cgRXJyb3IoeSgxMDgsUmEoYil8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gbSh7fSxjLGQpfWZ1bmN0aW9uIEpmKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxDZjtEZj1NLmN1cnJlbnQ7SShNLGEpO0koTixOLmN1cnJlbnQpO3JldHVybiEwfWZ1bmN0aW9uIEtmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcih5KDE2OSkpO2M/KGE9SWYoYSxiLERmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsSChOKSxIKE0pLEkoTSxhKSk6SChOKTtJKE4sYyl9XG52YXIgTGY9bnVsbCxNZj1udWxsLE5mPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LE9mPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxQZj1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLFFmPXIudW5zdGFibGVfc2hvdWxkWWllbGQsUmY9ci51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsU2Y9ci51bnN0YWJsZV9ub3csVGY9ci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxVZj1yLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LFZmPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksV2Y9ci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxYZj1yLnVuc3RhYmxlX0xvd1ByaW9yaXR5LFlmPXIudW5zdGFibGVfSWRsZVByaW9yaXR5LFpmPXt9LCRmPXZvaWQgMCE9PVJmP1JmOmZ1bmN0aW9uKCl7fSxhZz1udWxsLGJnPW51bGwsY2c9ITEsZGc9U2YoKSxPPTFFND5kZz9TZjpmdW5jdGlvbigpe3JldHVybiBTZigpLWRnfTtcbmZ1bmN0aW9uIGVnKCl7c3dpdGNoKFRmKCkpe2Nhc2UgVWY6cmV0dXJuIDk5O2Nhc2UgVmY6cmV0dXJuIDk4O2Nhc2UgV2Y6cmV0dXJuIDk3O2Nhc2UgWGY6cmV0dXJuIDk2O2Nhc2UgWWY6cmV0dXJuIDk1O2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGZnKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiBVZjtjYXNlIDk4OnJldHVybiBWZjtjYXNlIDk3OnJldHVybiBXZjtjYXNlIDk2OnJldHVybiBYZjtjYXNlIDk1OnJldHVybiBZZjtkZWZhdWx0OnRocm93IEVycm9yKHkoMzMyKSk7fX1mdW5jdGlvbiBnZyhhLGIpe2E9ZmcoYSk7cmV0dXJuIE5mKGEsYil9ZnVuY3Rpb24gaGcoYSxiLGMpe2E9ZmcoYSk7cmV0dXJuIE9mKGEsYixjKX1mdW5jdGlvbiBpZygpe2lmKG51bGwhPT1iZyl7dmFyIGE9Ymc7Ymc9bnVsbDtQZihhKX1qZygpfVxuZnVuY3Rpb24gamcoKXtpZighY2cmJm51bGwhPT1hZyl7Y2c9ITA7dmFyIGE9MDt0cnl7dmFyIGI9YWc7Z2coOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO2FnPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PWFnJiYoYWc9YWcuc2xpY2UoYSsxKSksT2YoVWYsaWcpLGM7fWZpbmFsbHl7Y2c9ITF9fX12YXIga2c9cmEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc7ZnVuY3Rpb24gbGcoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1tKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSk7cmV0dXJuIGJ9cmV0dXJuIGJ9dmFyIG1nPUJmKG51bGwpLG5nPW51bGwsb2c9bnVsbCxwZz1udWxsO2Z1bmN0aW9uIHFnKCl7cGc9b2c9bmc9bnVsbH1cbmZ1bmN0aW9uIHJnKGEpe3ZhciBiPW1nLmN1cnJlbnQ7SChtZyk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBzZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmFsdGVybmF0ZTtpZigoYS5jaGlsZExhbmVzJmIpPT09YilpZihudWxsPT09Y3x8KGMuY2hpbGRMYW5lcyZiKT09PWIpYnJlYWs7ZWxzZSBjLmNoaWxkTGFuZXN8PWI7ZWxzZSBhLmNoaWxkTGFuZXN8PWIsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpO2E9YS5yZXR1cm59fWZ1bmN0aW9uIHRnKGEsYil7bmc9YTtwZz1vZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKDAhPT0oYS5sYW5lcyZiKSYmKHVnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIHZnKGEsYil7aWYocGchPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKXBnPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O2lmKG51bGw9PT1vZyl7aWYobnVsbD09PW5nKXRocm93IEVycm9yKHkoMzA4KSk7b2c9YjtuZy5kZXBlbmRlbmNpZXM9e2xhbmVzOjAsZmlyc3RDb250ZXh0OmIscmVzcG9uZGVyczpudWxsfX1lbHNlIG9nPW9nLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciB3Zz0hMTtmdW5jdGlvbiB4ZyhhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGx9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiB5ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6YS5maXJzdEJhc2VVcGRhdGUsbGFzdEJhc2VVcGRhdGU6YS5sYXN0QmFzZVVwZGF0ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiB6ZyhhLGIpe3JldHVybntldmVudFRpbWU6YSxsYW5lOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfX1mdW5jdGlvbiBBZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YSl7YT1hLnNoYXJlZDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifX1cbmZ1bmN0aW9uIEJnKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZSxkPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1kJiYoZD1kLnVwZGF0ZVF1ZXVlLGM9PT1kKSl7dmFyIGU9bnVsbCxmPW51bGw7Yz1jLmZpcnN0QmFzZVVwZGF0ZTtpZihudWxsIT09Yyl7ZG97dmFyIGc9e2V2ZW50VGltZTpjLmV2ZW50VGltZSxsYW5lOmMubGFuZSx0YWc6Yy50YWcscGF5bG9hZDpjLnBheWxvYWQsY2FsbGJhY2s6Yy5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT1mP2U9Zj1nOmY9Zi5uZXh0PWc7Yz1jLm5leHR9d2hpbGUobnVsbCE9PWMpO251bGw9PT1mP2U9Zj1iOmY9Zi5uZXh0PWJ9ZWxzZSBlPWY9YjtjPXtiYXNlU3RhdGU6ZC5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmUsbGFzdEJhc2VVcGRhdGU6ZixzaGFyZWQ6ZC5zaGFyZWQsZWZmZWN0czpkLmVmZmVjdHN9O2EudXBkYXRlUXVldWU9YztyZXR1cm59YT1jLmxhc3RCYXNlVXBkYXRlO251bGw9PT1hP2MuZmlyc3RCYXNlVXBkYXRlPWI6YS5uZXh0PVxuYjtjLmxhc3RCYXNlVXBkYXRlPWJ9XG5mdW5jdGlvbiBDZyhhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3dnPSExO3ZhciBmPWUuZmlyc3RCYXNlVXBkYXRlLGc9ZS5sYXN0QmFzZVVwZGF0ZSxoPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWgpe2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDt2YXIgaz1oLGw9ay5uZXh0O2submV4dD1udWxsO251bGw9PT1nP2Y9bDpnLm5leHQ9bDtnPWs7dmFyIG49YS5hbHRlcm5hdGU7aWYobnVsbCE9PW4pe249bi51cGRhdGVRdWV1ZTt2YXIgQT1uLmxhc3RCYXNlVXBkYXRlO0EhPT1nJiYobnVsbD09PUE/bi5maXJzdEJhc2VVcGRhdGU9bDpBLm5leHQ9bCxuLmxhc3RCYXNlVXBkYXRlPWspfX1pZihudWxsIT09Zil7QT1lLmJhc2VTdGF0ZTtnPTA7bj1sPWs9bnVsbDtkb3toPWYubGFuZTt2YXIgcD1mLmV2ZW50VGltZTtpZigoZCZoKT09PWgpe251bGwhPT1uJiYobj1uLm5leHQ9e2V2ZW50VGltZTpwLGxhbmU6MCx0YWc6Zi50YWcscGF5bG9hZDpmLnBheWxvYWQsY2FsbGJhY2s6Zi5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBDPWEseD1mO2g9YjtwPWM7c3dpdGNoKHgudGFnKXtjYXNlIDE6Qz14LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEMpe0E9Qy5jYWxsKHAsQSxoKTticmVhayBhfUE9QzticmVhayBhO2Nhc2UgMzpDLmZsYWdzPUMuZmxhZ3MmLTQwOTd8NjQ7Y2FzZSAwOkM9eC5wYXlsb2FkO2g9XCJmdW5jdGlvblwiPT09dHlwZW9mIEM/Qy5jYWxsKHAsQSxoKTpDO2lmKG51bGw9PT1ofHx2b2lkIDA9PT1oKWJyZWFrIGE7QT1tKHt9LEEsaCk7YnJlYWsgYTtjYXNlIDI6d2c9ITB9fW51bGwhPT1mLmNhbGxiYWNrJiYoYS5mbGFnc3w9MzIsaD1lLmVmZmVjdHMsbnVsbD09PWg/ZS5lZmZlY3RzPVtmXTpoLnB1c2goZikpfWVsc2UgcD17ZXZlbnRUaW1lOnAsbGFuZTpoLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLG5leHQ6bnVsbH0sbnVsbD09PW4/KGw9bj1wLGs9QSk6bj1uLm5leHQ9cCxnfD1oO2Y9Zi5uZXh0O2lmKG51bGw9PT1cbmYpaWYoaD1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1oKWJyZWFrO2Vsc2UgZj1oLm5leHQsaC5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1oLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09biYmKGs9QSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bjtEZ3w9ZzthLmxhbmVzPWc7YS5tZW1vaXplZFN0YXRlPUF9fWZ1bmN0aW9uIEVnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcih5KDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIEZnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO1xuZnVuY3Rpb24gR2coYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm0oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5sYW5lcyYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIEtnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbHMpP1piKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUhnKCksZT1JZyhhKSxmPXpnKGQsZSk7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO0FnKGEsZik7SmcoYSxlLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUhnKCksZT1JZyhhKSxmPXpnKGQsZSk7Zi50YWc9MTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGM9SGcoKSxkPUlnKGEpLGU9emcoYyxkKTtlLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZS5jYWxsYmFjaz1cbmIpO0FnKGEsZSk7SmcoYSxkLGMpfX07ZnVuY3Rpb24gTGcoYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hSmUoYyxkKXx8IUplKGUsZik6ITB9XG5mdW5jdGlvbiBNZyhhLGIsYyl7dmFyIGQ9ITEsZT1DZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj12ZyhmKTooZT1GZihiKT9EZjpNLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9FZihhLGUpOkNmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9S2c7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFscz1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBOZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmS2cuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBPZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPUZnO3hnKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9dmcoZik6KGY9RmYoYik/RGY6TS5jdXJyZW50LGUuY29udGV4dD1FZihhLGYpKTtDZyhhLGMsZSxkKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoR2coYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8XG4oYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmS2cuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksQ2coYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5mbGFnc3w9NCl9dmFyIFBnPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBRZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHkoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IoeSgxNDcsYSkpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09RmcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IoeSgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IoeSgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIFJnKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IEVycm9yKHkoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiKSk7fVxuZnVuY3Rpb24gU2coYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5mbGFncz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1UZyhhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5mbGFncz0yLFxuYyk6ZDtiLmZsYWdzPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1VZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1RZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9VmcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9UWcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9XG5XZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbihhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9WGcoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBBKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1VZyhcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYz1WZyhiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1RZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgdGE6cmV0dXJuIGI9V2coYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKFBnKGIpfHxMYShiKSlyZXR1cm4gYj1YZyhiLFxuYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO1JnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PXVhP24oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSB0YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihQZyhjKXx8TGEoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bihhLGIsYyxkLG51bGwpO1JnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQyhhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxcbm51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT11YT9uKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSB0YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihQZyhkKXx8TGEoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbihiLGEsZCxlLG51bGwpO1JnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geChlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCx0PW51bGwsdT1nLHo9Zz0wLHE9bnVsbDtudWxsIT09dSYmejxoLmxlbmd0aDt6Kyspe3UuaW5kZXg+ej8ocT11LHU9bnVsbCk6cT11LnNpYmxpbmc7dmFyIG49cChlLHUsaFt6XSxrKTtpZihudWxsPT09bil7bnVsbD09PXUmJih1PXEpO2JyZWFrfWEmJnUmJm51bGw9PT1cbm4uYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKG4sZyx6KTtudWxsPT09dD9sPW46dC5zaWJsaW5nPW47dD1uO3U9cX1pZih6PT09aC5sZW5ndGgpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoO3o8aC5sZW5ndGg7eisrKXU9QShlLGhbel0sayksbnVsbCE9PXUmJihnPWYodSxnLHopLG51bGw9PT10P2w9dTp0LnNpYmxpbmc9dSx0PXUpO3JldHVybiBsfWZvcih1PWQoZSx1KTt6PGgubGVuZ3RoO3orKylxPUModSxlLHosaFt6XSxrKSxudWxsIT09cSYmKGEmJm51bGwhPT1xLmFsdGVybmF0ZSYmdS5kZWxldGUobnVsbD09PXEua2V5P3o6cS5rZXkpLGc9ZihxLGcseiksbnVsbD09PXQ/bD1xOnQuc2libGluZz1xLHQ9cSk7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiB3KGUsZyxoLGspe3ZhciBsPUxhKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IEVycm9yKHkoMTUwKSk7aD1sLmNhbGwoaCk7aWYobnVsbD09XG5oKXRocm93IEVycm9yKHkoMTUxKSk7Zm9yKHZhciB0PWw9bnVsbCx1PWcsej1nPTAscT1udWxsLG49aC5uZXh0KCk7bnVsbCE9PXUmJiFuLmRvbmU7eisrLG49aC5uZXh0KCkpe3UuaW5kZXg+ej8ocT11LHU9bnVsbCk6cT11LnNpYmxpbmc7dmFyIHc9cChlLHUsbi52YWx1ZSxrKTtpZihudWxsPT09dyl7bnVsbD09PXUmJih1PXEpO2JyZWFrfWEmJnUmJm51bGw9PT13LmFsdGVybmF0ZSYmYihlLHUpO2c9Zih3LGcseik7bnVsbD09PXQ/bD13OnQuc2libGluZz13O3Q9dzt1PXF9aWYobi5kb25lKXJldHVybiBjKGUsdSksbDtpZihudWxsPT09dSl7Zm9yKDshbi5kb25lO3orKyxuPWgubmV4dCgpKW49QShlLG4udmFsdWUsayksbnVsbCE9PW4mJihnPWYobixnLHopLG51bGw9PT10P2w9bjp0LnNpYmxpbmc9bix0PW4pO3JldHVybiBsfWZvcih1PWQoZSx1KTshbi5kb25lO3orKyxuPWgubmV4dCgpKW49Qyh1LGUseixuLnZhbHVlLGspLG51bGwhPT1uJiYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlJiZcbnUuZGVsZXRlKG51bGw9PT1uLmtleT96Om4ua2V5KSxnPWYobixnLHopLG51bGw9PT10P2w9bjp0LnNpYmxpbmc9bix0PW4pO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXVhJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHNhOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bCl7c3dpdGNoKGsudGFnKXtjYXNlIDc6aWYoZi50eXBlPT09dWEpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YnJlYWs7ZGVmYXVsdDppZihrLmVsZW1lbnRUeXBlPT09Zi50eXBlKXtjKGEsay5zaWJsaW5nKTtcbmQ9ZShrLGYucHJvcHMpO2QucmVmPVFnKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1jKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1rLnNpYmxpbmd9Zi50eXBlPT09dWE/KGQ9WGcoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVZnKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPVFnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSB0YTphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1cbldnKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6KGMoYSxkKSxkPVVnKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKFBnKGYpKXJldHVybiB4KGEsZCxmLGgpO2lmKExhKGYpKXJldHVybiB3KGEsZCxmLGgpO2wmJlJnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDIyOmNhc2UgMDpjYXNlIDExOmNhc2UgMTU6dGhyb3cgRXJyb3IoeSgxNTIsUmEoYS50eXBlKXx8XCJDb21wb25lbnRcIikpO31yZXR1cm4gYyhhLGQpfX12YXIgWWc9U2coITApLFpnPVNnKCExKSwkZz17fSxhaD1CZigkZyksYmg9QmYoJGcpLGNoPUJmKCRnKTtcbmZ1bmN0aW9uIGRoKGEpe2lmKGE9PT0kZyl0aHJvdyBFcnJvcih5KDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIGVoKGEsYil7SShjaCxiKTtJKGJoLGEpO0koYWgsJGcpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bWIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPW1iKGIsYSl9SChhaCk7SShhaCxiKX1mdW5jdGlvbiBmaCgpe0goYWgpO0goYmgpO0goY2gpfWZ1bmN0aW9uIGdoKGEpe2RoKGNoLmN1cnJlbnQpO3ZhciBiPWRoKGFoLmN1cnJlbnQpO3ZhciBjPW1iKGIsYS50eXBlKTtiIT09YyYmKEkoYmgsYSksSShhaCxjKSl9ZnVuY3Rpb24gaGgoYSl7YmguY3VycmVudD09PWEmJihIKGFoKSxIKGJoKSl9dmFyIFA9QmYoMCk7XG5mdW5jdGlvbiBpaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxcIiQ/XCI9PT1jLmRhdGF8fFwiJCFcIj09PWMuZGF0YSkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5mbGFncyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBqaD1udWxsLGtoPW51bGwsbGg9ITE7XG5mdW5jdGlvbiBtaChhLGIpe3ZhciBjPW5oKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmZsYWdzPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31mdW5jdGlvbiBvaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcGgoYSl7aWYobGgpe3ZhciBiPWtoO2lmKGIpe3ZhciBjPWI7aWYoIW9oKGEsYikpe2I9cmYoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFvaChhLGIpKXthLmZsYWdzPWEuZmxhZ3MmLTEwMjV8MjtsaD0hMTtqaD1hO3JldHVybn1taChqaCxjKX1qaD1hO2toPXJmKGIuZmlyc3RDaGlsZCl9ZWxzZSBhLmZsYWdzPWEuZmxhZ3MmLTEwMjV8MixsaD0hMSxqaD1hfX1mdW5jdGlvbiBxaChhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47amg9YX1cbmZ1bmN0aW9uIHJoKGEpe2lmKGEhPT1qaClyZXR1cm4hMTtpZighbGgpcmV0dXJuIHFoKGEpLGxoPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhbmYoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPWtoO2I7KW1oKGEsYiksYj1yZihiLm5leHRTaWJsaW5nKTtxaChhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHkoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIvJFwiPT09Yyl7aWYoMD09PWIpe2toPXJmKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2VcIiRcIiE9PWMmJlwiJCFcIiE9PWMmJlwiJD9cIiE9PWN8fGIrK31hPWEubmV4dFNpYmxpbmd9a2g9bnVsbH19ZWxzZSBraD1qaD9yZihhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1cbmZ1bmN0aW9uIHNoKCl7a2g9amg9bnVsbDtsaD0hMX12YXIgdGg9W107ZnVuY3Rpb24gdWgoKXtmb3IodmFyIGE9MDthPHRoLmxlbmd0aDthKyspdGhbYV0uX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9bnVsbDt0aC5sZW5ndGg9MH12YXIgdmg9cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcix3aD1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyx4aD0wLFI9bnVsbCxTPW51bGwsVD1udWxsLHloPSExLHpoPSExO2Z1bmN0aW9uIEFoKCl7dGhyb3cgRXJyb3IoeSgzMjEpKTt9ZnVuY3Rpb24gQmgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighSGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIENoKGEsYixjLGQsZSxmKXt4aD1mO1I9YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5sYW5lcz0wO3ZoLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/RGg6RWg7YT1jKGQsZSk7aWYoemgpe2Y9MDtkb3t6aD0hMTtpZighKDI1PmYpKXRocm93IEVycm9yKHkoMzAxKSk7Zis9MTtUPVM9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7dmguY3VycmVudD1GaDthPWMoZCxlKX13aGlsZSh6aCl9dmguY3VycmVudD1HaDtiPW51bGwhPT1TJiZudWxsIT09Uy5uZXh0O3hoPTA7VD1TPVI9bnVsbDt5aD0hMTtpZihiKXRocm93IEVycm9yKHkoMzAwKSk7cmV0dXJuIGF9ZnVuY3Rpb24gSGgoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWE7cmV0dXJuIFR9XG5mdW5jdGlvbiBJaCgpe2lmKG51bGw9PT1TKXt2YXIgYT1SLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1TLm5leHQ7dmFyIGI9bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlOlQubmV4dDtpZihudWxsIT09YilUPWIsUz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoeSgzMTApKTtTPWE7YT17bWVtb2l6ZWRTdGF0ZTpTLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOlMuYmFzZVN0YXRlLGJhc2VRdWV1ZTpTLmJhc2VRdWV1ZSxxdWV1ZTpTLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlPVQ9YTpUPVQubmV4dD1hfXJldHVybiBUfWZ1bmN0aW9uIEpoKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gS2goYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1TLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2U9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1mPW51bGwsaz1lO2Rve3ZhciBsPWsubGFuZTtpZigoeGgmbCk9PT1sKW51bGwhPT1oJiYoaD1oLm5leHQ9e2xhbmU6MCxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9ay5lYWdlclJlZHVjZXI9PT1hP2suZWFnZXJTdGF0ZTphKGQsay5hY3Rpb24pO2Vsc2V7dmFyIG49e2xhbmU6bCxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLFxuZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09aD8oZz1oPW4sZj1kKTpoPWgubmV4dD1uO1IubGFuZXN8PWw7RGd8PWx9az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1lKTtudWxsPT09aD9mPWQ6aC5uZXh0PWc7SGUoZCxiLm1lbW9pemVkU3RhdGUpfHwodWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWY7Yi5iYXNlUXVldWU9aDtjLmxhc3RSZW5kZXJlZFN0YXRlPWR9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIExoKGEpe3ZhciBiPUloKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHkoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTtIZShmLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfVxuZnVuY3Rpb24gTWgoYSxiLGMpe3ZhciBkPWIuX2dldFZlcnNpb247ZD1kKGIuX3NvdXJjZSk7dmFyIGU9Yi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeTtpZihudWxsIT09ZSlhPWU9PT1kO2Vsc2UgaWYoYT1hLm11dGFibGVSZWFkTGFuZXMsYT0oeGgmYSk9PT1hKWIuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9ZCx0aC5wdXNoKGIpO2lmKGEpcmV0dXJuIGMoYi5fc291cmNlKTt0aC5wdXNoKGIpO3Rocm93IEVycm9yKHkoMzUwKSk7fVxuZnVuY3Rpb24gTmgoYSxiLGMsZCl7dmFyIGU9VTtpZihudWxsPT09ZSl0aHJvdyBFcnJvcih5KDM0OSkpO3ZhciBmPWIuX2dldFZlcnNpb24sZz1mKGIuX3NvdXJjZSksaD12aC5jdXJyZW50LGs9aC51c2VTdGF0ZShmdW5jdGlvbigpe3JldHVybiBNaChlLGIsYyl9KSxsPWtbMV0sbj1rWzBdO2s9VDt2YXIgQT1hLm1lbW9pemVkU3RhdGUscD1BLnJlZnMsQz1wLmdldFNuYXBzaG90LHg9QS5zb3VyY2U7QT1BLnN1YnNjcmliZTt2YXIgdz1SO2EubWVtb2l6ZWRTdGF0ZT17cmVmczpwLHNvdXJjZTpiLHN1YnNjcmliZTpkfTtoLnVzZUVmZmVjdChmdW5jdGlvbigpe3AuZ2V0U25hcHNob3Q9YztwLnNldFNuYXBzaG90PWw7dmFyIGE9ZihiLl9zb3VyY2UpO2lmKCFIZShnLGEpKXthPWMoYi5fc291cmNlKTtIZShuLGEpfHwobChhKSxhPUlnKHcpLGUubXV0YWJsZVJlYWRMYW5lc3w9YSZlLnBlbmRpbmdMYW5lcyk7YT1lLm11dGFibGVSZWFkTGFuZXM7ZS5lbnRhbmdsZWRMYW5lc3w9YTtmb3IodmFyIGQ9XG5lLmVudGFuZ2xlbWVudHMsaD1hOzA8aDspe3ZhciBrPTMxLVZjKGgpLHY9MTw8aztkW2tdfD1hO2gmPX52fX19LFtjLGIsZF0pO2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cmV0dXJuIGQoYi5fc291cmNlLGZ1bmN0aW9uKCl7dmFyIGE9cC5nZXRTbmFwc2hvdCxjPXAuc2V0U25hcHNob3Q7dHJ5e2MoYShiLl9zb3VyY2UpKTt2YXIgZD1JZyh3KTtlLm11dGFibGVSZWFkTGFuZXN8PWQmZS5wZW5kaW5nTGFuZXN9Y2F0Y2gocSl7YyhmdW5jdGlvbigpe3Rocm93IHE7fSl9fSl9LFtiLGRdKTtIZShDLGMpJiZIZSh4LGIpJiZIZShBLGQpfHwoYT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpKaCxsYXN0UmVuZGVyZWRTdGF0ZTpufSxhLmRpc3BhdGNoPWw9T2guYmluZChudWxsLFIsYSksay5xdWV1ZT1hLGsuYmFzZVF1ZXVlPW51bGwsbj1NaChlLGIsYyksay5tZW1vaXplZFN0YXRlPWsuYmFzZVN0YXRlPW4pO3JldHVybiBufVxuZnVuY3Rpb24gUGgoYSxiLGMpe3ZhciBkPUloKCk7cmV0dXJuIE5oKGQsYSxiLGMpfWZ1bmN0aW9uIFFoKGEpe3ZhciBiPUhoKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT1iLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD1PaC5iaW5kKG51bGwsUixhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfVxuZnVuY3Rpb24gUmgoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ui51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsfSxSLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfWZ1bmN0aW9uIFNoKGEpe3ZhciBiPUhoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9ZnVuY3Rpb24gVGgoKXtyZXR1cm4gSWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIFVoKGEsYixjLGQpe3ZhciBlPUhoKCk7Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIFZoKGEsYixjLGQpe3ZhciBlPUloKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PVMpe3ZhciBnPVMubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmQmgoZCxnLmRlcHMpKXtSaChiLGMsZixkKTtyZXR1cm59fVIuZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPVJoKDF8YixjLGYsZCl9ZnVuY3Rpb24gV2goYSxiKXtyZXR1cm4gVWgoNTE2LDQsYSxiKX1mdW5jdGlvbiBYaChhLGIpe3JldHVybiBWaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFloKGEsYil7cmV0dXJuIFZoKDQsMixhLGIpfWZ1bmN0aW9uIFpoKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19XG5mdW5jdGlvbiAkaChhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIFZoKDQsMixaaC5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBhaSgpe31mdW5jdGlvbiBiaShhLGIpe3ZhciBjPUloKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZCaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBjaShhLGIpe3ZhciBjPUloKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZCaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIGRpKGEsYil7dmFyIGM9ZWcoKTtnZyg5OD5jPzk4OmMsZnVuY3Rpb24oKXthKCEwKX0pO2dnKDk3PGM/OTc6YyxmdW5jdGlvbigpe3ZhciBjPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXthKCExKSxiKCl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWN9fSl9XG5mdW5jdGlvbiBPaChhLGIsYyl7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9e2xhbmU6ZSxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfSxnPWIucGVuZGluZztudWxsPT09Zz9mLm5leHQ9ZjooZi5uZXh0PWcubmV4dCxnLm5leHQ9Zik7Yi5wZW5kaW5nPWY7Zz1hLmFsdGVybmF0ZTtpZihhPT09Unx8bnVsbCE9PWcmJmc9PT1SKXpoPXloPSEwO2Vsc2V7aWYoMD09PWEubGFuZXMmJihudWxsPT09Z3x8MD09PWcubGFuZXMpJiYoZz1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWcpKXRyeXt2YXIgaD1iLmxhc3RSZW5kZXJlZFN0YXRlLGs9ZyhoLGMpO2YuZWFnZXJSZWR1Y2VyPWc7Zi5lYWdlclN0YXRlPWs7aWYoSGUoayxoKSlyZXR1cm59Y2F0Y2gobCl7fWZpbmFsbHl7fUpnKGEsZSxkKX19XG52YXIgR2g9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOkFoLHVzZUNvbnRleHQ6QWgsdXNlRWZmZWN0OkFoLHVzZUltcGVyYXRpdmVIYW5kbGU6QWgsdXNlTGF5b3V0RWZmZWN0OkFoLHVzZU1lbW86QWgsdXNlUmVkdWNlcjpBaCx1c2VSZWY6QWgsdXNlU3RhdGU6QWgsdXNlRGVidWdWYWx1ZTpBaCx1c2VEZWZlcnJlZFZhbHVlOkFoLHVzZVRyYW5zaXRpb246QWgsdXNlTXV0YWJsZVNvdXJjZTpBaCx1c2VPcGFxdWVJZGVudGlmaWVyOkFoLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRGg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7SGgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6V2gsdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIFVoKDQsMixaaC5iaW5kKG51bGwsXG5iLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVWgoNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1IaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT1kLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpTaCx1c2VTdGF0ZTpRaCx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9UWgoYSksYz1iWzBdLGQ9YlsxXTtXaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247XG53aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9UWgoITEpLGI9YVswXTthPWRpLmJpbmQobnVsbCxhWzFdKTtTaChhKTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9SGgoKTtkLm1lbW9pemVkU3RhdGU9e3JlZnM6e2dldFNuYXBzaG90OmIsc2V0U25hcHNob3Q6bnVsbH0sc291cmNlOmEsc3Vic2NyaWJlOmN9O3JldHVybiBOaChkLGEsYixjKX0sdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe2lmKGxoKXt2YXIgYT0hMSxiPXVmKGZ1bmN0aW9uKCl7YXx8KGE9ITAsYyhcInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KSkpO3Rocm93IEVycm9yKHkoMzU1KSk7fSksYz1RaChiKVsxXTswPT09KFIubW9kZSYyKSYmKFIuZmxhZ3N8PTUxNixSaCg1LGZ1bmN0aW9uKCl7YyhcInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KSl9LFxudm9pZCAwLG51bGwpKTtyZXR1cm4gYn1iPVwicjpcIisodGYrKykudG9TdHJpbmcoMzYpO1FoKGIpO3JldHVybiBifSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEVoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6S2gsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIEtoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUtoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9S2goSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIEtoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxGaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6YmksdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6WGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTokaCx1c2VMYXlvdXRFZmZlY3Q6WWgsdXNlTWVtbzpjaSx1c2VSZWR1Y2VyOkxoLHVzZVJlZjpUaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBMaChKaCl9LHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1MaChKaCksYz1iWzBdLGQ9YlsxXTtYaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPUxoKEpoKVswXTtyZXR1cm5bVGgoKS5jdXJyZW50LFxuYV19LHVzZU11dGFibGVTb3VyY2U6UGgsdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe3JldHVybiBMaChKaClbMF19LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sZWk9cmEuUmVhY3RDdXJyZW50T3duZXIsdWc9ITE7ZnVuY3Rpb24gZmkoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9aZyhiLG51bGwsYyxkKTpZZyhiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBnaShhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7dGcoYixlKTtkPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGlpKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGc9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiYhamkoZykmJnZvaWQgMD09PWcuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWcsa2koYSxiLGcsZCxlLGYpO2E9VmcoYy50eXBlLG51bGwsZCxiLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zz1hLmNoaWxkO2lmKDA9PT0oZSZmKSYmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpKZSxjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiBoaShhLGIsZik7Yi5mbGFnc3w9MTthPVRnKGcsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24ga2koYSxiLGMsZCxlLGYpe2lmKG51bGwhPT1hJiZKZShhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYpaWYodWc9ITEsMCE9PShmJmUpKTAhPT0oYS5mbGFncyYxNjM4NCkmJih1Zz0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLGhpKGEsYixmKTtyZXR1cm4gbGkoYSxiLGMsZCxmKX1cbmZ1bmN0aW9uIG1pKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlfHxcInVuc3RhYmxlLWRlZmVyLXdpdGhvdXQtaGlkaW5nXCI9PT1kLm1vZGUpaWYoMD09PShiLm1vZGUmNCkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MH0sbmkoYixjKTtlbHNlIGlmKDAhPT0oYyYxMDczNzQxODI0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLG51bGwhPT1mP2YuYmFzZUxhbmVzOmMpO2Vsc2UgcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YX0sbmkoYixhKSxudWxsO2Vsc2UgbnVsbCE9PWY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLG5pKGIsZCk7ZmkoYSxiLGUsYyk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBvaShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmZsYWdzfD0xMjh9ZnVuY3Rpb24gbGkoYSxiLGMsZCxlKXt2YXIgZj1GZihjKT9EZjpNLmN1cnJlbnQ7Zj1FZihiLGYpO3RnKGIsZSk7Yz1DaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiF1ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS01MTcsYS5sYW5lcyY9fmUsaGkoYSxiLGUpO2IuZmxhZ3N8PTE7ZmkoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBwaShhLGIsYyxkLGUpe2lmKEZmKGMpKXt2YXIgZj0hMDtKZihiKX1lbHNlIGY9ITE7dGcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksTWcoYixjLGQpLE9nKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXZnKGwpOihsPUZmKGMpP0RmOk0uY3VycmVudCxsPUVmKGIsbCkpO3ZhciBuPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLEE9XCJmdW5jdGlvblwiPT09dHlwZW9mIG58fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO0F8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZOZyhiLGcsZCxsKTt3Zz0hMTt2YXIgcD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHxwIT09a3x8Ti5jdXJyZW50fHx3Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG4mJihHZyhiLGMsbixkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9d2d8fExnKGIsYyxoLGQscCxrLGwpKT8oQXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO3lnKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6bGcoYi50eXBlLGgpO2cucHJvcHM9bDtBPWIucGVuZGluZ1Byb3BzO3A9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9dmcoayk6KGs9RmYoYyk/RGY6TS5jdXJyZW50LGs9RWYoYixrKSk7dmFyIEM9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG49XCJmdW5jdGlvblwiPT09dHlwZW9mIEN8fFxuXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1BfHxwIT09aykmJk5nKGIsZyxkLGspO3dnPSExO3A9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cDtDZyhiLGQsZyxlKTt2YXIgeD1iLm1lbW9pemVkU3RhdGU7aCE9PUF8fHAhPT14fHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyYmKEdnKGIsYyxDLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobD13Z3x8TGcoYixjLGwsZCxwLHgsaykpPyhufHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLFxueCxrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsaykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5mbGFnc3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9eCksZy5wcm9wcz1kLGcuc3RhdGU9eCxnLmNvbnRleHQ9ayxkPWwpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fFxuaD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MjU2KSxkPSExKX1yZXR1cm4gcWkoYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gcWkoYSxiLGMsZCxlLGYpe29pKGEsYik7dmFyIGc9MCE9PShiLmZsYWdzJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJktmKGIsYywhMSksaGkoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7ZWkuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1ZZyhiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPVlnKGIsbnVsbCxoLGYpKTpmaShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZLZihiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHJpKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/SGYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmSGYoYSxiLmNvbnRleHQsITEpO2VoKGEsYi5jb250YWluZXJJbmZvKX1cbnZhciBzaT17ZGVoeWRyYXRlZDpudWxsLHJldHJ5TGFuZTowfTtcbmZ1bmN0aW9uIHRpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPVAuY3VycmVudCxmPSExLGc7KGc9MCE9PShiLmZsYWdzJjY0KSl8fChnPW51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlPyExOjAhPT0oZSYyKSk7Zz8oZj0hMCxiLmZsYWdzJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1kLmZhbGxiYWNrfHwhMD09PWQudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChlfD0xKTtJKFAsZSYxKTtpZihudWxsPT09YSl7dm9pZCAwIT09ZC5mYWxsYmFjayYmcGgoYik7YT1kLmNoaWxkcmVuO2U9ZC5mYWxsYmFjaztpZihmKXJldHVybiBhPXVpKGIsYSxlLGMpLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmN9LGIubWVtb2l6ZWRTdGF0ZT1zaSxhO2lmKFwibnVtYmVyXCI9PT10eXBlb2YgZC51bnN0YWJsZV9leHBlY3RlZExvYWRUaW1lKXJldHVybiBhPXVpKGIsYSxlLGMpLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmN9LFxuYi5tZW1vaXplZFN0YXRlPXNpLGIubGFuZXM9MzM1NTQ0MzIsYTtjPXZpKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmF9LGIubW9kZSxjLG51bGwpO2MucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9Y31pZihudWxsIT09YS5tZW1vaXplZFN0YXRlKXtpZihmKXJldHVybiBkPXdpKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLGYubWVtb2l6ZWRTdGF0ZT1udWxsPT09ZT97YmFzZUxhbmVzOmN9OntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWlmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306XG57YmFzZUxhbmVzOmUuYmFzZUxhbmVzfGN9LGYuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmMsYi5tZW1vaXplZFN0YXRlPXNpLGQ7Yz14aShhLGIsZC5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gY31mdW5jdGlvbiB1aShhLGIsYyxkKXt2YXIgZT1hLm1vZGUsZj1hLmNoaWxkO2I9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpifTswPT09KGUmMikmJm51bGwhPT1mPyhmLmNoaWxkTGFuZXM9MCxmLnBlbmRpbmdQcm9wcz1iKTpmPXZpKGIsZSwwLG51bGwpO2M9WGcoYyxlLGQsbnVsbCk7Zi5yZXR1cm49YTtjLnJldHVybj1hO2Yuc2libGluZz1jO2EuY2hpbGQ9ZjtyZXR1cm4gY31cbmZ1bmN0aW9uIHhpKGEsYixjLGQpe3ZhciBlPWEuY2hpbGQ7YT1lLnNpYmxpbmc7Yz1UZyhlLHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmN9KTswPT09KGIubW9kZSYyKSYmKGMubGFuZXM9ZCk7Yy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbDtudWxsIT09YSYmKGEubmV4dEVmZmVjdD1udWxsLGEuZmxhZ3M9OCxiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1hKTtyZXR1cm4gYi5jaGlsZD1jfVxuZnVuY3Rpb24gd2koYSxiLGMsZCxlKXt2YXIgZj1iLm1vZGUsZz1hLmNoaWxkO2E9Zy5zaWJsaW5nO3ZhciBoPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Y307MD09PShmJjIpJiZiLmNoaWxkIT09Zz8oYz1iLmNoaWxkLGMuY2hpbGRMYW5lcz0wLGMucGVuZGluZ1Byb3BzPWgsZz1jLmxhc3RFZmZlY3QsbnVsbCE9PWc/KGIuZmlyc3RFZmZlY3Q9Yy5maXJzdEVmZmVjdCxiLmxhc3RFZmZlY3Q9ZyxnLm5leHRFZmZlY3Q9bnVsbCk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbCk6Yz1UZyhnLGgpO251bGwhPT1hP2Q9VGcoYSxkKTooZD1YZyhkLGYsZSxudWxsKSxkLmZsYWdzfD0yKTtkLnJldHVybj1iO2MucmV0dXJuPWI7Yy5zaWJsaW5nPWQ7Yi5jaGlsZD1jO3JldHVybiBkfWZ1bmN0aW9uIHlpKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO3NnKGEucmV0dXJuLGIpfVxuZnVuY3Rpb24gemkoYSxiLGMsZCxlLGYpe3ZhciBnPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zz9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsTW9kZTplLGxhc3RFZmZlY3Q6Zn06KGcuaXNCYWNrd2FyZHM9YixnLnJlbmRlcmluZz1udWxsLGcucmVuZGVyaW5nU3RhcnRUaW1lPTAsZy5sYXN0PWQsZy50YWlsPWMsZy50YWlsTW9kZT1lLGcubGFzdEVmZmVjdD1mKX1cbmZ1bmN0aW9uIEFpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7ZmkoYSxiLGQuY2hpbGRyZW4sYyk7ZD1QLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5mbGFnc3w9NjQ7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJnlpKGEsYyk7ZWxzZSBpZigxOT09PWEudGFnKXlpKGEsYyk7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUkoUCxkKTtpZigwPT09KGIubW9kZSYyKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09aWgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTt6aShiLCExLGUsYyxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1paChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9emkoYiwhMCxjLG51bGwsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOnppKGIsITEsbnVsbCxudWxsLHZvaWQgMCxiLmxhc3RFZmZlY3QpO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBoaShhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7RGd8PWIubGFuZXM7aWYoMCE9PShjJmIuY2hpbGRMYW5lcykpe2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcih5KDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1UZyhhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9VGcoYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1yZXR1cm4gbnVsbH12YXIgQmksQ2ksRGksRWk7XG5CaT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07Q2k9ZnVuY3Rpb24oKXt9O1xuRGk9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5tZW1vaXplZFByb3BzO2lmKGUhPT1kKXthPWIuc3RhdGVOb2RlO2RoKGFoLmN1cnJlbnQpO3ZhciBmPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmU9WWEoYSxlKTtkPVlhKGEsZCk7Zj1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGUpO2Q9ZWIoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPW0oe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1nYihhLGUpO2Q9Z2IoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1qZil9dmIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1cbmwpe3ZhciBoPWVbbF07Zm9yKGcgaW4gaCloLmhhc093blByb3BlcnR5KGcpJiYoY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8XG4oYz17fSksY1tnXT1rW2ddKX1lbHNlIGN8fChmfHwoZj1bXSksZi5wdXNoKGwsYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoY2EuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkcoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTpcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rJiZrLiQkdHlwZW9mPT09R2E/ay50b1N0cmluZygpOihmPWZ8fFtdKS5wdXNoKGwsaykpfWMmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixcbmMpO3ZhciBsPWY7aWYoYi51cGRhdGVRdWV1ZT1sKWIuZmxhZ3N8PTR9fTtFaT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZmxhZ3N8PTQpfTtmdW5jdGlvbiBGaShhLGIpe2lmKCFsaClzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gR2koYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxOnJldHVybiBGZihiLnR5cGUpJiZHZigpLG51bGw7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7ZD1iLnN0YXRlTm9kZTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpcmgoYik/Yi5mbGFnc3w9NDpkLmh5ZHJhdGV8fChiLmZsYWdzfD0yNTYpO0NpKGIpO3JldHVybiBudWxsO2Nhc2UgNTpoaChiKTt2YXIgZT1kaChjaC5jdXJyZW50KTtjPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRGkoYSxiLGMsZCxlKSxhLnJlZiE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KTtlbHNle2lmKCFkKXtpZihudWxsPT09XG5iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2NikpO3JldHVybiBudWxsfWE9ZGgoYWguY3VycmVudCk7aWYocmgoYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2Rbd2ZdPWI7ZFt4Zl09Zjtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkcoXCJjYW5jZWxcIixkKTtHKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkcoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGE9MDthPFhlLmxlbmd0aDthKyspRyhYZVthXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RyhcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsZCk7RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpaYShkLGYpO0coXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0coXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoZCxmKSxHKFwiaW52YWxpZFwiLGQpfXZiKGMsZik7YT1udWxsO2Zvcih2YXIgZyBpbiBmKWYuaGFzT3duUHJvcGVydHkoZykmJihlPWZbZ10sXCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGU/ZC50ZXh0Q29udGVudCE9PWUmJihhPVtcImNoaWxkcmVuXCIsZV0pOlwibnVtYmVyXCI9PT10eXBlb2YgZSYmZC50ZXh0Q29udGVudCE9PVwiXCIrZSYmKGE9W1wiY2hpbGRyZW5cIixcIlwiK2VdKTpjYS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9ZSYmXCJvblNjcm9sbFwiPT09ZyYmRyhcInNjcm9sbFwiLGQpKTtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoZCk7Y2IoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShkKTtqYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz1cbmpmKX1kPWE7Yi51cGRhdGVRdWV1ZT1kO251bGwhPT1kJiYoYi5mbGFnc3w9NCl9ZWxzZXtnPTk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50O2E9PT1rYi5odG1sJiYoYT1sYihjKSk7YT09PWtiLmh0bWw/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChjLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGMpLFwic2VsZWN0XCI9PT1jJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxjKTthW3dmXT1iO2FbeGZdPWQ7QmkoYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2c9d2IoYyxkKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkcoXCJjYW5jZWxcIixhKTtHKFwiY2xvc2VcIixhKTtcbmU9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkcoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxYZS5sZW5ndGg7ZSsrKUcoWGVbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsYSk7RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpHKFwidG9nZ2xlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGEsZCk7ZT1ZYShhLGQpO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZWIoYSxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2U9bSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGEsZCk7ZT1cbmdiKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH12YihjLGUpO3ZhciBoPWU7Zm9yKGYgaW4gaClpZihoLmhhc093blByb3BlcnR5KGYpKXt2YXIgaz1oW2ZdO1wic3R5bGVcIj09PWY/dGIoYSxrKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJm9iKGEsaykpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1jfHxcIlwiIT09aykmJnBiKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZwYihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKGNhLmhhc093blByb3BlcnR5KGYpP251bGwhPWsmJlwib25TY3JvbGxcIj09PWYmJkcoXCJzY3JvbGxcIixhKTpudWxsIT1rJiZxYShhLGYsayxnKSl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGEpO2NiKGEsZCwhMSk7XG5icmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShhKTtqYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrU2EoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtmPWQudmFsdWU7bnVsbCE9Zj9mYihhLCEhZC5tdWx0aXBsZSxmLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmZmIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGUub25DbGljayYmKGEub25jbGljaz1qZil9bWYoYyxkKSYmKGIuZmxhZ3N8PTQpfW51bGwhPT1iLnJlZiYmKGIuZmxhZ3N8PTEyOCl9cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKUVpKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2NikpO1xuYz1kaChjaC5jdXJyZW50KTtkaChhaC5jdXJyZW50KTtyaChiKT8oZD1iLnN0YXRlTm9kZSxjPWIubWVtb2l6ZWRQcm9wcyxkW3dmXT1iLGQubm9kZVZhbHVlIT09YyYmKGIuZmxhZ3N8PTQpKTooZD0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGRbd2ZdPWIsYi5zdGF0ZU5vZGU9ZCl9cmV0dXJuIG51bGw7Y2FzZSAxMzpIKFApO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5mbGFncyY2NCkpcmV0dXJuIGIubGFuZXM9YyxiO2Q9bnVsbCE9PWQ7Yz0hMTtudWxsPT09YT92b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMuZmFsbGJhY2smJnJoKGIpOmM9bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZTtpZihkJiYhYyYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWEmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KFAuY3VycmVudCYxKSkwPT09ViYmKFY9Myk7ZWxzZXtpZigwPT09Vnx8Mz09PVYpVj1cbjQ7bnVsbD09PVV8fDA9PT0oRGcmMTM0MjE3NzI3KSYmMD09PShIaSYxMzQyMTc3MjcpfHxJaShVLFcpfWlmKGR8fGMpYi5mbGFnc3w9NDtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIGZoKCksQ2koYiksbnVsbD09PWEmJmNmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYiksbnVsbDtjYXNlIDE3OnJldHVybiBGZihiLnR5cGUpJiZHZigpLG51bGw7Y2FzZSAxOTpIKFApO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2Y9MCE9PShiLmZsYWdzJjY0KTtnPWQucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGYpRmkoZCwhMSk7ZWxzZXtpZigwIT09Vnx8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyY2NCkpZm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2c9aWgoYSk7aWYobnVsbCE9PWcpe2IuZmxhZ3N8PTY0O0ZpKGQsITEpO2Y9Zy51cGRhdGVRdWV1ZTtudWxsIT09ZiYmKGIudXBkYXRlUXVldWU9ZixiLmZsYWdzfD00KTtcbm51bGw9PT1kLmxhc3RFZmZlY3QmJihiLmZpcnN0RWZmZWN0PW51bGwpO2IubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3Q7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MixmLm5leHRFZmZlY3Q9bnVsbCxmLmZpcnN0RWZmZWN0PW51bGwsZi5sYXN0RWZmZWN0PW51bGwsZz1mLmFsdGVybmF0ZSxudWxsPT09Zz8oZi5jaGlsZExhbmVzPTAsZi5sYW5lcz1hLGYuY2hpbGQ9bnVsbCxmLm1lbW9pemVkUHJvcHM9bnVsbCxmLm1lbW9pemVkU3RhdGU9bnVsbCxmLnVwZGF0ZVF1ZXVlPW51bGwsZi5kZXBlbmRlbmNpZXM9bnVsbCxmLnN0YXRlTm9kZT1udWxsKTooZi5jaGlsZExhbmVzPWcuY2hpbGRMYW5lcyxmLmxhbmVzPWcubGFuZXMsZi5jaGlsZD1nLmNoaWxkLGYubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZi5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxmLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZi50eXBlPWcudHlwZSxhPWcuZGVwZW5kZW5jaWVzLFxuZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztJKFAsUC5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1hLnNpYmxpbmd9bnVsbCE9PWQudGFpbCYmTygpPkppJiYoYi5mbGFnc3w9NjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKX1lbHNle2lmKCFmKWlmKGE9aWgoZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTY0LGY9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLEZpKGQsITApLG51bGw9PT1kLnRhaWwmJlwiaGlkZGVuXCI9PT1kLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFsaClyZXR1cm4gYj1iLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0LG51bGwhPT1iJiYoYi5uZXh0RWZmZWN0PW51bGwpLG51bGx9ZWxzZSAyKk8oKS1kLnJlbmRlcmluZ1N0YXJ0VGltZT5KaSYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD1cbjY0LGY9ITAsRmkoZCwhMSksYi5sYW5lcz0zMzU1NDQzMik7ZC5pc0JhY2t3YXJkcz8oZy5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1nKTooYz1kLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWc6Yi5jaGlsZD1nLGQubGFzdD1nKX1yZXR1cm4gbnVsbCE9PWQudGFpbD8oYz1kLnRhaWwsZC5yZW5kZXJpbmc9YyxkLnRhaWw9Yy5zaWJsaW5nLGQubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QsZC5yZW5kZXJpbmdTdGFydFRpbWU9TygpLGMuc2libGluZz1udWxsLGI9UC5jdXJyZW50LEkoUCxmP2ImMXwyOmImMSksYyk6bnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT0obnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSkmJlwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIiE9PWQubW9kZSYmKGIuZmxhZ3N8PTQpLG51bGx9dGhyb3cgRXJyb3IoeSgxNTYsYi50YWcpKTt9XG5mdW5jdGlvbiBMaShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpGZihhLnR5cGUpJiZHZigpO3ZhciBiPWEuZmxhZ3M7cmV0dXJuIGImNDA5Nj8oYS5mbGFncz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7Yj1hLmZsYWdzO2lmKDAhPT0oYiY2NCkpdGhyb3cgRXJyb3IoeSgyODUpKTthLmZsYWdzPWImLTQwOTd8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBoaChhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoUCksYj1hLmZsYWdzLGImNDA5Nj8oYS5mbGFncz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAxOTpyZXR1cm4gSChQKSxudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIHJnKGEpLG51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBLaSgpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBNaShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1RYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZX19ZnVuY3Rpb24gTmkoYSxiKXt0cnl7Y29uc29sZS5lcnJvcihiLnZhbHVlKX1jYXRjaChjKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYzt9KX19dmFyIE9pPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIFBpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe1FpfHwoUWk9ITAsUmk9ZCk7TmkoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBTaShhLGIsYyl7Yz16ZygtMSxjKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7TmkoYSxiKTtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PVRpP1RpPW5ldyBTZXQoW3RoaXNdKTpUaS5hZGQodGhpcyksTmkoYSxiKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9dmFyIFVpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0O1xuZnVuY3Rpb24gVmkoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7V2koYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfWZ1bmN0aW9uIFhpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6cmV0dXJuO2Nhc2UgMTppZihiLmZsYWdzJjI1NiYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP2M6bGcoYi50eXBlLGMpLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1yZXR1cm47Y2FzZSAzOmIuZmxhZ3MmMjU2JiZxZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtyZXR1cm47Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBZaShhLGIsYyl7c3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6Yj1jLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe2E9Yj1iLm5leHQ7ZG97aWYoMz09PShhLnRhZyYzKSl7dmFyIGQ9YS5jcmVhdGU7YS5kZXN0cm95PWQoKX1hPWEubmV4dH13aGlsZShhIT09Yil9Yj1jLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe2E9Yj1iLm5leHQ7ZG97dmFyIGU9YTtkPWUubmV4dDtlPWUudGFnOzAhPT0oZSY0KSYmMCE9PShlJjEpJiYoWmkoYyxhKSwkaShjLGEpKTthPWR9d2hpbGUoYSE9PWIpfXJldHVybjtjYXNlIDE6YT1jLnN0YXRlTm9kZTtjLmZsYWdzJjQmJihudWxsPT09Yj9hLmNvbXBvbmVudERpZE1vdW50KCk6KGQ9Yy5lbGVtZW50VHlwZT09PWMudHlwZT9iLm1lbW9pemVkUHJvcHM6bGcoYy50eXBlLGIubWVtb2l6ZWRQcm9wcyksYS5jb21wb25lbnREaWRVcGRhdGUoZCxcbmIubWVtb2l6ZWRTdGF0ZSxhLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKSkpO2I9Yy51cGRhdGVRdWV1ZTtudWxsIT09YiYmRWcoYyxiLGEpO3JldHVybjtjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1jLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6YT1jLmNoaWxkLnN0YXRlTm9kZX1FZyhjLGIsYSl9cmV0dXJuO2Nhc2UgNTphPWMuc3RhdGVOb2RlO251bGw9PT1iJiZjLmZsYWdzJjQmJm1mKGMudHlwZSxjLm1lbW9pemVkUHJvcHMpJiZhLmZvY3VzKCk7cmV0dXJuO2Nhc2UgNjpyZXR1cm47Y2FzZSA0OnJldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGw9PT1jLm1lbW9pemVkU3RhdGUmJihjPWMuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYz1jLm1lbW9pemVkU3RhdGUsbnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsIT09YyYmQ2MoYykpKSk7XG5yZXR1cm47Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjA6Y2FzZSAyMTpjYXNlIDIzOmNhc2UgMjQ6cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fVxuZnVuY3Rpb24gYWooYSxiKXtmb3IodmFyIGM9YTs7KXtpZig1PT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKGIpZD1kLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnNldFByb3BlcnR5P2Quc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6ZC5kaXNwbGF5PVwibm9uZVwiO2Vsc2V7ZD1jLnN0YXRlTm9kZTt2YXIgZT1jLm1lbW9pemVkUHJvcHMuc3R5bGU7ZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGw7ZC5zdHlsZS5kaXNwbGF5PXNiKFwiZGlzcGxheVwiLGUpfX1lbHNlIGlmKDY9PT1jLnRhZyljLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yj9cIlwiOmMubWVtb2l6ZWRQcm9wcztlbHNlIGlmKCgyMyE9PWMudGFnJiYyNCE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHxjPT09YSkmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09XG5hKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1hKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gYmooYSxiKXtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJVbm1vdW50KXRyeXtNZi5vbkNvbW1pdEZpYmVyVW5tb3VudChMZixiKX1jYXRjaChmKXt9c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBjPWE9YS5uZXh0O2Rve3ZhciBkPWMsZT1kLmRlc3Ryb3k7ZD1kLnRhZztpZih2b2lkIDAhPT1lKWlmKDAhPT0oZCY0KSlaaShiLGMpO2Vsc2V7ZD1iO3RyeXtlKCl9Y2F0Y2goZil7V2koZCxmKX19Yz1jLm5leHR9d2hpbGUoYyE9PWEpfWJyZWFrO2Nhc2UgMTpWaShiKTthPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXthLnByb3BzPWIubWVtb2l6ZWRQcm9wcyxhLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxhLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goZil7V2koYixcbmYpfWJyZWFrO2Nhc2UgNTpWaShiKTticmVhaztjYXNlIDQ6Y2ooYSxiKX19ZnVuY3Rpb24gZGooYSl7YS5hbHRlcm5hdGU9bnVsbDthLmNoaWxkPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLmZpcnN0RWZmZWN0PW51bGw7YS5sYXN0RWZmZWN0PW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnJldHVybj1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBlaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIGZqKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKGVqKGIpKWJyZWFrIGE7Yj1iLnJldHVybn10aHJvdyBFcnJvcih5KDE2MCkpO312YXIgYz1iO2I9Yy5zdGF0ZU5vZGU7c3dpdGNoKGMudGFnKXtjYXNlIDU6dmFyIGQ9ITE7YnJlYWs7Y2FzZSAzOmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDE2MSkpO31jLmZsYWdzJjE2JiYocGIoYixcIlwiKSxjLmZsYWdzJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8ZWooYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5mbGFncyYyKWNvbnRpbnVlIGI7aWYobnVsbD09PVxuYy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZmxhZ3MmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19ZD9naihhLGMsYik6aGooYSxjLGIpfVxuZnVuY3Rpb24gZ2ooYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/OD09PWMubm9kZVR5cGU/Yy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGIpOmMuaW5zZXJ0QmVmb3JlKGEsYik6KDg9PT1jLm5vZGVUeXBlPyhiPWMucGFyZW50Tm9kZSxiLmluc2VydEJlZm9yZShhLGMpKTooYj1jLGIuYXBwZW5kQ2hpbGQoYSkpLGM9Yy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1jJiZ2b2lkIDAhPT1jfHxudWxsIT09Yi5vbmNsaWNrfHwoYi5vbmNsaWNrPWpmKSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGdqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspZ2ooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gaGooYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/Yy5pbnNlcnRCZWZvcmUoYSxiKTpjLmFwcGVuZENoaWxkKGEpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihoaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KWhqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIGNqKGEsYil7Zm9yKHZhciBjPWIsZD0hMSxlLGY7Oyl7aWYoIWQpe2Q9Yy5yZXR1cm47YTpmb3IoOzspe2lmKG51bGw9PT1kKXRocm93IEVycm9yKHkoMTYwKSk7ZT1kLnN0YXRlTm9kZTtzd2l0Y2goZC50YWcpe2Nhc2UgNTpmPSExO2JyZWFrIGE7Y2FzZSAzOmU9ZS5jb250YWluZXJJbmZvO2Y9ITA7YnJlYWsgYTtjYXNlIDQ6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhfWQ9ZC5yZXR1cm59ZD0hMH1pZig1PT09Yy50YWd8fDY9PT1jLnRhZyl7YTpmb3IodmFyIGc9YSxoPWMsaz1oOzspaWYoYmooZyxrKSxudWxsIT09ay5jaGlsZCYmNCE9PWsudGFnKWsuY2hpbGQucmV0dXJuPWssaz1rLmNoaWxkO2Vsc2V7aWYoaz09PWgpYnJlYWsgYTtmb3IoO251bGw9PT1rLnNpYmxpbmc7KXtpZihudWxsPT09ay5yZXR1cm58fGsucmV0dXJuPT09aClicmVhayBhO2s9ay5yZXR1cm59ay5zaWJsaW5nLnJldHVybj1rLnJldHVybjtrPWsuc2libGluZ31mPyhnPWUsaD1jLnN0YXRlTm9kZSxcbjg9PT1nLm5vZGVUeXBlP2cucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChoKTpnLnJlbW92ZUNoaWxkKGgpKTplLnJlbW92ZUNoaWxkKGMuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1jLnRhZyl7aWYobnVsbCE9PWMuY2hpbGQpe2U9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztmPSEwO2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKGJqKGEsYyksbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJuOzQ9PT1jLnRhZyYmKGQ9ITEpfWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gaWooYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOnZhciBjPWIudXBkYXRlUXVldWU7Yz1udWxsIT09Yz9jLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yyl7dmFyIGQ9Yz1jLm5leHQ7ZG8gMz09PShkLnRhZyYzKSYmKGE9ZC5kZXN0cm95LGQuZGVzdHJveT12b2lkIDAsdm9pZCAwIT09YSYmYSgpKSxkPWQubmV4dDt3aGlsZShkIT09Yyl9cmV0dXJuO2Nhc2UgMTpyZXR1cm47Y2FzZSA1OmM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7ZD1iLm1lbW9pemVkUHJvcHM7dmFyIGU9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7YT1iLnR5cGU7dmFyIGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWYpe2NbeGZdPWQ7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJiRhKGMsZCk7d2IoYSxlKTtiPXdiKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPVxuMil7dmFyIGc9ZltlXSxoPWZbZSsxXTtcInN0eWxlXCI9PT1nP3RiKGMsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9vYihjLGgpOlwiY2hpbGRyZW5cIj09PWc/cGIoYyxoKTpxYShjLGcsaCxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6YWIoYyxkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihjLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxjLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGY9ZC52YWx1ZSxudWxsIT1mP2ZiKGMsISFkLm11bHRpcGxlLGYsITEpOmEhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9mYihjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6ZmIoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fX1yZXR1cm47Y2FzZSA2OmlmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2MikpO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1cbmIubWVtb2l6ZWRQcm9wcztyZXR1cm47Y2FzZSAzOmM9Yi5zdGF0ZU5vZGU7Yy5oeWRyYXRlJiYoYy5oeWRyYXRlPSExLENjKGMuY29udGFpbmVySW5mbykpO3JldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGwhPT1iLm1lbW9pemVkU3RhdGUmJihqaj1PKCksYWooYi5jaGlsZCwhMCkpO2tqKGIpO3JldHVybjtjYXNlIDE5OmtqKGIpO3JldHVybjtjYXNlIDE3OnJldHVybjtjYXNlIDIzOmNhc2UgMjQ6YWooYixudWxsIT09Yi5tZW1vaXplZFN0YXRlKTtyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9ZnVuY3Rpb24ga2ooYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgVWkpO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1sai5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX1cbmZ1bmN0aW9uIG1qKGEsYil7cmV0dXJuIG51bGwhPT1hJiYoYT1hLm1lbW9pemVkU3RhdGUsbnVsbD09PWF8fG51bGwhPT1hLmRlaHlkcmF0ZWQpPyhiPWIubWVtb2l6ZWRTdGF0ZSxudWxsIT09YiYmbnVsbD09PWIuZGVoeWRyYXRlZCk6ITF9dmFyIG5qPU1hdGguY2VpbCxvaj1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHBqPXJhLlJlYWN0Q3VycmVudE93bmVyLFg9MCxVPW51bGwsWT1udWxsLFc9MCxxaj0wLHJqPUJmKDApLFY9MCxzaj1udWxsLHRqPTAsRGc9MCxIaT0wLHVqPTAsdmo9bnVsbCxqaj0wLEppPUluZmluaXR5O2Z1bmN0aW9uIHdqKCl7Smk9TygpKzUwMH12YXIgWj1udWxsLFFpPSExLFJpPW51bGwsVGk9bnVsbCx4aj0hMSx5aj1udWxsLHpqPTkwLEFqPVtdLEJqPVtdLENqPW51bGwsRGo9MCxFaj1udWxsLEZqPS0xLEdqPTAsSGo9MCxJaj1udWxsLEpqPSExO2Z1bmN0aW9uIEhnKCl7cmV0dXJuIDAhPT0oWCY0OCk/TygpOi0xIT09Rmo/Rmo6Rmo9TygpfVxuZnVuY3Rpb24gSWcoYSl7YT1hLm1vZGU7aWYoMD09PShhJjIpKXJldHVybiAxO2lmKDA9PT0oYSY0KSlyZXR1cm4gOTk9PT1lZygpPzE6MjswPT09R2omJihHaj10aik7aWYoMCE9PWtnLnRyYW5zaXRpb24pezAhPT1IaiYmKEhqPW51bGwhPT12aj92ai5wZW5kaW5nTGFuZXM6MCk7YT1Hajt2YXIgYj00MTg2MTEyJn5IajtiJj0tYjswPT09YiYmKGE9NDE4NjExMiZ+YSxiPWEmLWEsMD09PWImJihiPTgxOTIpKTtyZXR1cm4gYn1hPWVnKCk7MCE9PShYJjQpJiY5OD09PWE/YT1YYygxMixHaik6KGE9U2MoYSksYT1YYyhhLEdqKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBKZyhhLGIsYyl7aWYoNTA8RGopdGhyb3cgRGo9MCxFaj1udWxsLEVycm9yKHkoMTg1KSk7YT1LaihhLGIpO2lmKG51bGw9PT1hKXJldHVybiBudWxsOyRjKGEsYixjKTthPT09VSYmKEhpfD1iLDQ9PT1WJiZJaShhLFcpKTt2YXIgZD1lZygpOzE9PT1iPzAhPT0oWCY4KSYmMD09PShYJjQ4KT9MaihhKTooTWooYSxjKSwwPT09WCYmKHdqKCksaWcoKSkpOigwPT09KFgmNCl8fDk4IT09ZCYmOTkhPT1kfHwobnVsbD09PUNqP0NqPW5ldyBTZXQoW2FdKTpDai5hZGQoYSkpLE1qKGEsYykpO3ZqPWF9ZnVuY3Rpb24gS2ooYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfVxuZnVuY3Rpb24gTWooYSxiKXtmb3IodmFyIGM9YS5jYWxsYmFja05vZGUsZD1hLnN1c3BlbmRlZExhbmVzLGU9YS5waW5nZWRMYW5lcyxmPWEuZXhwaXJhdGlvblRpbWVzLGc9YS5wZW5kaW5nTGFuZXM7MDxnOyl7dmFyIGg9MzEtVmMoZyksaz0xPDxoLGw9ZltoXTtpZigtMT09PWwpe2lmKDA9PT0oayZkKXx8MCE9PShrJmUpKXtsPWI7UmMoayk7dmFyIG49RjtmW2hdPTEwPD1uP2wrMjUwOjY8PW4/bCs1RTM6LTF9fWVsc2UgbDw9YiYmKGEuZXhwaXJlZExhbmVzfD1rKTtnJj1+a31kPVVjKGEsYT09PVU/VzowKTtiPUY7aWYoMD09PWQpbnVsbCE9PWMmJihjIT09WmYmJlBmKGMpLGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja1ByaW9yaXR5PTApO2Vsc2V7aWYobnVsbCE9PWMpe2lmKGEuY2FsbGJhY2tQcmlvcml0eT09PWIpcmV0dXJuO2MhPT1aZiYmUGYoYyl9MTU9PT1iPyhjPUxqLmJpbmQobnVsbCxhKSxudWxsPT09YWc/KGFnPVtjXSxiZz1PZihVZixqZykpOmFnLnB1c2goYyksXG5jPVpmKToxND09PWI/Yz1oZyg5OSxMai5iaW5kKG51bGwsYSkpOihjPVRjKGIpLGM9aGcoYyxOai5iaW5kKG51bGwsYSkpKTthLmNhbGxiYWNrUHJpb3JpdHk9YjthLmNhbGxiYWNrTm9kZT1jfX1cbmZ1bmN0aW9uIE5qKGEpe0ZqPS0xO0hqPUdqPTA7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO3ZhciBiPWEuY2FsbGJhY2tOb2RlO2lmKE9qKCkmJmEuY2FsbGJhY2tOb2RlIT09YilyZXR1cm4gbnVsbDt2YXIgYz1VYyhhLGE9PT1VP1c6MCk7aWYoMD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9Yzt2YXIgZT1YO1h8PTE2O3ZhciBmPVBqKCk7aWYoVSE9PWF8fFchPT1kKXdqKCksUWooYSxkKTtkbyB0cnl7UmooKTticmVha31jYXRjaChoKXtTaihhLGgpfXdoaWxlKDEpO3FnKCk7b2ouY3VycmVudD1mO1g9ZTtudWxsIT09WT9kPTA6KFU9bnVsbCxXPTAsZD1WKTtpZigwIT09KHRqJkhpKSlRaihhLDApO2Vsc2UgaWYoMCE9PWQpezI9PT1kJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGM9V2MoYSksMCE9PWMmJihkPVRqKGEsYykpKTtpZigxPT09ZCl0aHJvdyBiPXNqLFFqKGEsMCksSWkoYSxjKSxNaihhLE8oKSksYjthLmZpbmlzaGVkV29yaz1cbmEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWM7c3dpdGNoKGQpe2Nhc2UgMDpjYXNlIDE6dGhyb3cgRXJyb3IoeSgzNDUpKTtjYXNlIDI6VWooYSk7YnJlYWs7Y2FzZSAzOklpKGEsYyk7aWYoKGMmNjI5MTQ1NjApPT09YyYmKGQ9amorNTAwLU8oKSwxMDxkKSl7aWYoMCE9PVVjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmMpIT09Yyl7SGcoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmU7YnJlYWt9YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxkKTticmVha31VaihhKTticmVhaztjYXNlIDQ6SWkoYSxjKTtpZigoYyY0MTg2MTEyKT09PWMpYnJlYWs7ZD1hLmV2ZW50VGltZXM7Zm9yKGU9LTE7MDxjOyl7dmFyIGc9MzEtVmMoYyk7Zj0xPDxnO2c9ZFtnXTtnPmUmJihlPWcpO2MmPX5mfWM9ZTtjPU8oKS1jO2M9KDEyMD5jPzEyMDo0ODA+Yz80ODA6MTA4MD5jPzEwODA6MTkyMD5jPzE5MjA6M0UzPmM/M0UzOjQzMjA+XG5jPzQzMjA6MTk2MCpuaihjLzE5NjApKS1jO2lmKDEwPGMpe2EudGltZW91dEhhbmRsZT1vZihVai5iaW5kKG51bGwsYSksYyk7YnJlYWt9VWooYSk7YnJlYWs7Y2FzZSA1OlVqKGEpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMjkpKTt9fU1qKGEsTygpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1iP05qLmJpbmQobnVsbCxhKTpudWxsfWZ1bmN0aW9uIElpKGEsYil7YiY9fnVqO2ImPX5IaTthLnN1c3BlbmRlZExhbmVzfD1iO2EucGluZ2VkTGFuZXMmPX5iO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yjspe3ZhciBjPTMxLVZjKGIpLGQ9MTw8YzthW2NdPS0xO2ImPX5kfX1cbmZ1bmN0aW9uIExqKGEpe2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTtPaigpO2lmKGE9PT1VJiYwIT09KGEuZXhwaXJlZExhbmVzJlcpKXt2YXIgYj1XO3ZhciBjPVRqKGEsYik7MCE9PSh0aiZIaSkmJihiPVVjKGEsYiksYz1UaihhLGIpKX1lbHNlIGI9VWMoYSwwKSxjPVRqKGEsYik7MCE9PWEudGFnJiYyPT09YyYmKFh8PTY0LGEuaHlkcmF0ZSYmKGEuaHlkcmF0ZT0hMSxxZihhLmNvbnRhaW5lckluZm8pKSxiPVdjKGEpLDAhPT1iJiYoYz1UaihhLGIpKSk7aWYoMT09PWMpdGhyb3cgYz1zaixRaihhLDApLElpKGEsYiksTWooYSxPKCkpLGM7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9YjtVaihhKTtNaihhLE8oKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBWaigpe2lmKG51bGwhPT1Dail7dmFyIGE9Q2o7Q2o9bnVsbDthLmZvckVhY2goZnVuY3Rpb24oYSl7YS5leHBpcmVkTGFuZXN8PTI0JmEucGVuZGluZ0xhbmVzO01qKGEsTygpKX0pfWlnKCl9ZnVuY3Rpb24gV2ooYSxiKXt2YXIgYz1YO1h8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19ZnVuY3Rpb24gWGooYSxiKXt2YXIgYz1YO1gmPS0yO1h8PTg7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19ZnVuY3Rpb24gbmkoYSxiKXtJKHJqLHFqKTtxanw9Yjt0anw9Yn1mdW5jdGlvbiBLaSgpe3FqPXJqLmN1cnJlbnQ7SChyail9XG5mdW5jdGlvbiBRaihhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxwZihjKSk7aWYobnVsbCE9PVkpZm9yKGM9WS5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiZHZigpO2JyZWFrO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2JyZWFrO2Nhc2UgNTpoaChkKTticmVhaztjYXNlIDQ6ZmgoKTticmVhaztjYXNlIDEzOkgoUCk7YnJlYWs7Y2FzZSAxOTpIKFApO2JyZWFrO2Nhc2UgMTA6cmcoZCk7YnJlYWs7Y2FzZSAyMzpjYXNlIDI0OktpKCl9Yz1jLnJldHVybn1VPWE7WT1UZyhhLmN1cnJlbnQsbnVsbCk7Vz1xaj10aj1iO1Y9MDtzaj1udWxsO3VqPUhpPURnPTB9XG5mdW5jdGlvbiBTaihhLGIpe2Rve3ZhciBjPVk7dHJ5e3FnKCk7dmguY3VycmVudD1HaDtpZih5aCl7Zm9yKHZhciBkPVIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZDspe3ZhciBlPWQucXVldWU7bnVsbCE9PWUmJihlLnBlbmRpbmc9bnVsbCk7ZD1kLm5leHR9eWg9ITF9eGg9MDtUPVM9Uj1udWxsO3poPSExO3BqLmN1cnJlbnQ9bnVsbDtpZihudWxsPT09Y3x8bnVsbD09PWMucmV0dXJuKXtWPTE7c2o9YjtZPW51bGw7YnJlYWt9YTp7dmFyIGY9YSxnPWMucmV0dXJuLGg9YyxrPWI7Yj1XO2guZmxhZ3N8PTIwNDg7aC5maXJzdEVmZmVjdD1oLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rO2lmKDA9PT0oaC5tb2RlJjIpKXt2YXIgbj1oLmFsdGVybmF0ZTtuPyhoLnVwZGF0ZVF1ZXVlPW4udXBkYXRlUXVldWUsaC5tZW1vaXplZFN0YXRlPW4ubWVtb2l6ZWRTdGF0ZSxoLmxhbmVzPW4ubGFuZXMpOlxuKGgudXBkYXRlUXVldWU9bnVsbCxoLm1lbW9pemVkU3RhdGU9bnVsbCl9dmFyIEE9MCE9PShQLmN1cnJlbnQmMSkscD1nO2Rve3ZhciBDO2lmKEM9MTM9PT1wLnRhZyl7dmFyIHg9cC5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT14KUM9bnVsbCE9PXguZGVoeWRyYXRlZD8hMDohMTtlbHNle3ZhciB3PXAubWVtb2l6ZWRQcm9wcztDPXZvaWQgMD09PXcuZmFsbGJhY2s/ITE6ITAhPT13LnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrPyEwOkE/ITE6ITB9fWlmKEMpe3ZhciB6PXAudXBkYXRlUXVldWU7aWYobnVsbD09PXope3ZhciB1PW5ldyBTZXQ7dS5hZGQobCk7cC51cGRhdGVRdWV1ZT11fWVsc2Ugei5hZGQobCk7aWYoMD09PShwLm1vZGUmMikpe3AuZmxhZ3N8PTY0O2guZmxhZ3N8PTE2Mzg0O2guZmxhZ3MmPS0yOTgxO2lmKDE9PT1oLnRhZylpZihudWxsPT09aC5hbHRlcm5hdGUpaC50YWc9MTc7ZWxzZXt2YXIgdD16ZygtMSwxKTt0LnRhZz0yO0FnKGgsdCl9aC5sYW5lc3w9MTticmVhayBhfWs9XG52b2lkIDA7aD1iO3ZhciBxPWYucGluZ0NhY2hlO251bGw9PT1xPyhxPWYucGluZ0NhY2hlPW5ldyBPaSxrPW5ldyBTZXQscS5zZXQobCxrKSk6KGs9cS5nZXQobCksdm9pZCAwPT09ayYmKGs9bmV3IFNldCxxLnNldChsLGspKSk7aWYoIWsuaGFzKGgpKXtrLmFkZChoKTt2YXIgdj1Zai5iaW5kKG51bGwsZixsLGgpO2wudGhlbih2LHYpfXAuZmxhZ3N8PTQwOTY7cC5sYW5lcz1iO2JyZWFrIGF9cD1wLnJldHVybn13aGlsZShudWxsIT09cCk7az1FcnJvcigoUmEoaC50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiKX01IT09ViYmKFY9Mik7az1NaShrLGgpO3A9XG5nO2Rve3N3aXRjaChwLnRhZyl7Y2FzZSAzOmY9aztwLmZsYWdzfD00MDk2O2ImPS1iO3AubGFuZXN8PWI7dmFyIEo9UGkocCxmLGIpO0JnKHAsSik7YnJlYWsgYTtjYXNlIDE6Zj1rO3ZhciBLPXAudHlwZSxRPXAuc3RhdGVOb2RlO2lmKDA9PT0ocC5mbGFncyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgSy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT1RJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgUS5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhRKSkpKXtwLmZsYWdzfD00MDk2O2ImPS1iO3AubGFuZXN8PWI7dmFyIEw9U2kocCxmLGIpO0JnKHAsTCk7YnJlYWsgYX19cD1wLnJldHVybn13aGlsZShudWxsIT09cCl9WmooYyl9Y2F0Y2godmEpe2I9dmE7WT09PWMmJm51bGwhPT1jJiYoWT1jPWMucmV0dXJuKTtjb250aW51ZX1icmVha313aGlsZSgxKX1cbmZ1bmN0aW9uIFBqKCl7dmFyIGE9b2ouY3VycmVudDtvai5jdXJyZW50PUdoO3JldHVybiBudWxsPT09YT9HaDphfWZ1bmN0aW9uIFRqKGEsYil7dmFyIGM9WDtYfD0xNjt2YXIgZD1QaigpO1U9PT1hJiZXPT09Ynx8UWooYSxiKTtkbyB0cnl7YWsoKTticmVha31jYXRjaChlKXtTaihhLGUpfXdoaWxlKDEpO3FnKCk7WD1jO29qLmN1cnJlbnQ9ZDtpZihudWxsIT09WSl0aHJvdyBFcnJvcih5KDI2MSkpO1U9bnVsbDtXPTA7cmV0dXJuIFZ9ZnVuY3Rpb24gYWsoKXtmb3IoO251bGwhPT1ZOyliayhZKX1mdW5jdGlvbiBSaigpe2Zvcig7bnVsbCE9PVkmJiFRZigpOyliayhZKX1mdW5jdGlvbiBiayhhKXt2YXIgYj1jayhhLmFsdGVybmF0ZSxhLHFqKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWI/WmooYSk6WT1iO3BqLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIFpqKGEpe3ZhciBiPWE7ZG97dmFyIGM9Yi5hbHRlcm5hdGU7YT1iLnJldHVybjtpZigwPT09KGIuZmxhZ3MmMjA0OCkpe2M9R2koYyxiLHFqKTtpZihudWxsIT09Yyl7WT1jO3JldHVybn1jPWI7aWYoMjQhPT1jLnRhZyYmMjMhPT1jLnRhZ3x8bnVsbD09PWMubWVtb2l6ZWRTdGF0ZXx8MCE9PShxaiYxMDczNzQxODI0KXx8MD09PShjLm1vZGUmNCkpe2Zvcih2YXIgZD0wLGU9Yy5jaGlsZDtudWxsIT09ZTspZHw9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZT1lLnNpYmxpbmc7Yy5jaGlsZExhbmVzPWR9bnVsbCE9PWEmJjA9PT0oYS5mbGFncyYyMDQ4KSYmKG51bGw9PT1hLmZpcnN0RWZmZWN0JiYoYS5maXJzdEVmZmVjdD1iLmZpcnN0RWZmZWN0KSxudWxsIT09Yi5sYXN0RWZmZWN0JiYobnVsbCE9PWEubGFzdEVmZmVjdCYmKGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLGEubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QpLDE8Yi5mbGFncyYmKG51bGwhPT1cbmEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iOmEuZmlyc3RFZmZlY3Q9YixhLmxhc3RFZmZlY3Q9YikpfWVsc2V7Yz1MaShiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MjA0NztZPWM7cmV0dXJufW51bGwhPT1hJiYoYS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9bnVsbCxhLmZsYWdzfD0yMDQ4KX1iPWIuc2libGluZztpZihudWxsIT09Yil7WT1iO3JldHVybn1ZPWI9YX13aGlsZShudWxsIT09Yik7MD09PVYmJihWPTUpfWZ1bmN0aW9uIFVqKGEpe3ZhciBiPWVnKCk7Z2coOTksZGsuYmluZChudWxsLGEsYikpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gZGsoYSxiKXtkbyBPaigpO3doaWxlKG51bGwhPT15aik7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO3ZhciBjPWEuZmluaXNoZWRXb3JrO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcih5KDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7dmFyIGQ9Yy5sYW5lc3xjLmNoaWxkTGFuZXMsZT1kLGY9YS5wZW5kaW5nTGFuZXMmfmU7YS5wZW5kaW5nTGFuZXM9ZTthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1lO2EubXV0YWJsZVJlYWRMYW5lcyY9ZTthLmVudGFuZ2xlZExhbmVzJj1lO2U9YS5lbnRhbmdsZW1lbnRzO2Zvcih2YXIgZz1hLmV2ZW50VGltZXMsaD1hLmV4cGlyYXRpb25UaW1lczswPGY7KXt2YXIgaz0zMS1WYyhmKSxsPTE8PGs7ZVtrXT0wO2dba109LTE7aFtrXT0tMTtmJj1+bH1udWxsIT09XG5DaiYmMD09PShkJjI0KSYmQ2ouaGFzKGEpJiZDai5kZWxldGUoYSk7YT09PVUmJihZPVU9bnVsbCxXPTApOzE8Yy5mbGFncz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGQ9Yy5maXJzdEVmZmVjdCk6ZD1jOmQ9Yy5maXJzdEVmZmVjdDtpZihudWxsIT09ZCl7ZT1YO1h8PTMyO3BqLmN1cnJlbnQ9bnVsbDtrZj1mZDtnPU5lKCk7aWYoT2UoZykpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGcpaD17c3RhcnQ6Zy5zZWxlY3Rpb25TdGFydCxlbmQ6Zy5zZWxlY3Rpb25FbmR9O2Vsc2UgYTppZihoPShoPWcub3duZXJEb2N1bWVudCkmJmguZGVmYXVsdFZpZXd8fHdpbmRvdywobD1oLmdldFNlbGVjdGlvbiYmaC5nZXRTZWxlY3Rpb24oKSkmJjAhPT1sLnJhbmdlQ291bnQpe2g9bC5hbmNob3JOb2RlO2Y9bC5hbmNob3JPZmZzZXQ7az1sLmZvY3VzTm9kZTtsPWwuZm9jdXNPZmZzZXQ7dHJ5e2gubm9kZVR5cGUsay5ub2RlVHlwZX1jYXRjaCh2YSl7aD1udWxsO1xuYnJlYWsgYX12YXIgbj0wLEE9LTEscD0tMSxDPTAseD0wLHc9Zyx6PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgdTs7KXt3IT09aHx8MCE9PWYmJjMhPT13Lm5vZGVUeXBlfHwoQT1uK2YpO3chPT1rfHwwIT09bCYmMyE9PXcubm9kZVR5cGV8fChwPW4rbCk7Mz09PXcubm9kZVR5cGUmJihuKz13Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0odT13LmZpcnN0Q2hpbGQpKWJyZWFrO3o9dzt3PXV9Zm9yKDs7KXtpZih3PT09ZylicmVhayBiO3o9PT1oJiYrK0M9PT1mJiYoQT1uKTt6PT09ayYmKyt4PT09bCYmKHA9bik7aWYobnVsbCE9PSh1PXcubmV4dFNpYmxpbmcpKWJyZWFrO3c9ejt6PXcucGFyZW50Tm9kZX13PXV9aD0tMT09PUF8fC0xPT09cD9udWxsOntzdGFydDpBLGVuZDpwfX1lbHNlIGg9bnVsbDtoPWh8fHtzdGFydDowLGVuZDowfX1lbHNlIGg9bnVsbDtsZj17Zm9jdXNlZEVsZW06ZyxzZWxlY3Rpb25SYW5nZTpofTtmZD0hMTtJaj1udWxsO0pqPSExO1o9ZDtkbyB0cnl7ZWsoKX1jYXRjaCh2YSl7aWYobnVsbD09PVxuWil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtJaj1udWxsO1o9ZDtkbyB0cnl7Zm9yKGc9YTtudWxsIT09Wjspe3ZhciB0PVouZmxhZ3M7dCYxNiYmcGIoWi5zdGF0ZU5vZGUsXCJcIik7aWYodCYxMjgpe3ZhciBxPVouYWx0ZXJuYXRlO2lmKG51bGwhPT1xKXt2YXIgdj1xLnJlZjtudWxsIT09diYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB2P3YobnVsbCk6di5jdXJyZW50PW51bGwpfX1zd2l0Y2godCYxMDM4KXtjYXNlIDI6ZmooWik7Wi5mbGFncyY9LTM7YnJlYWs7Y2FzZSA2OmZqKFopO1ouZmxhZ3MmPS0zO2lqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgMTAyNDpaLmZsYWdzJj0tMTAyNTticmVhaztjYXNlIDEwMjg6Wi5mbGFncyY9LTEwMjU7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA0OmlqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgODpoPVo7Y2ooZyxoKTt2YXIgSj1oLmFsdGVybmF0ZTtkaihoKTtudWxsIT09XG5KJiZkaihKKX1aPVoubmV4dEVmZmVjdH19Y2F0Y2godmEpe2lmKG51bGw9PT1aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO3Y9bGY7cT1OZSgpO3Q9di5mb2N1c2VkRWxlbTtnPXYuc2VsZWN0aW9uUmFuZ2U7aWYocSE9PXQmJnQmJnQub3duZXJEb2N1bWVudCYmTWUodC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCx0KSl7bnVsbCE9PWcmJk9lKHQpJiYocT1nLnN0YXJ0LHY9Zy5lbmQsdm9pZCAwPT09diYmKHY9cSksXCJzZWxlY3Rpb25TdGFydFwiaW4gdD8odC5zZWxlY3Rpb25TdGFydD1xLHQuc2VsZWN0aW9uRW5kPU1hdGgubWluKHYsdC52YWx1ZS5sZW5ndGgpKToodj0ocT10Lm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmcS5kZWZhdWx0Vmlld3x8d2luZG93LHYuZ2V0U2VsZWN0aW9uJiYodj12LmdldFNlbGVjdGlvbigpLGg9dC50ZXh0Q29udGVudC5sZW5ndGgsSj1NYXRoLm1pbihnLnN0YXJ0LGgpLGc9dm9pZCAwPT09XG5nLmVuZD9KOk1hdGgubWluKGcuZW5kLGgpLCF2LmV4dGVuZCYmSj5nJiYoaD1nLGc9SixKPWgpLGg9TGUodCxKKSxmPUxlKHQsZyksaCYmZiYmKDEhPT12LnJhbmdlQ291bnR8fHYuYW5jaG9yTm9kZSE9PWgubm9kZXx8di5hbmNob3JPZmZzZXQhPT1oLm9mZnNldHx8di5mb2N1c05vZGUhPT1mLm5vZGV8fHYuZm9jdXNPZmZzZXQhPT1mLm9mZnNldCkmJihxPXEuY3JlYXRlUmFuZ2UoKSxxLnNldFN0YXJ0KGgubm9kZSxoLm9mZnNldCksdi5yZW1vdmVBbGxSYW5nZXMoKSxKPmc/KHYuYWRkUmFuZ2UocSksdi5leHRlbmQoZi5ub2RlLGYub2Zmc2V0KSk6KHEuc2V0RW5kKGYubm9kZSxmLm9mZnNldCksdi5hZGRSYW5nZShxKSkpKSkpO3E9W107Zm9yKHY9dDt2PXYucGFyZW50Tm9kZTspMT09PXYubm9kZVR5cGUmJnEucHVzaCh7ZWxlbWVudDp2LGxlZnQ6di5zY3JvbGxMZWZ0LHRvcDp2LnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiB0LmZvY3VzJiZ0LmZvY3VzKCk7Zm9yKHQ9XG4wO3Q8cS5sZW5ndGg7dCsrKXY9cVt0XSx2LmVsZW1lbnQuc2Nyb2xsTGVmdD12LmxlZnQsdi5lbGVtZW50LnNjcm9sbFRvcD12LnRvcH1mZD0hIWtmO2xmPWtmPW51bGw7YS5jdXJyZW50PWM7Wj1kO2RvIHRyeXtmb3IodD1hO251bGwhPT1aOyl7dmFyIEs9Wi5mbGFncztLJjM2JiZZaSh0LFouYWx0ZXJuYXRlLFopO2lmKEsmMTI4KXtxPXZvaWQgMDt2YXIgUT1aLnJlZjtpZihudWxsIT09USl7dmFyIEw9Wi5zdGF0ZU5vZGU7c3dpdGNoKFoudGFnKXtjYXNlIDU6cT1MO2JyZWFrO2RlZmF1bHQ6cT1MfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBRP1EocSk6US5jdXJyZW50PXF9fVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7Wj1udWxsOyRmKCk7WD1lfWVsc2UgYS5jdXJyZW50PWM7aWYoeGopeGo9ITEseWo9YSx6aj1iO2Vsc2UgZm9yKFo9ZDtudWxsIT09WjspYj1cbloubmV4dEVmZmVjdCxaLm5leHRFZmZlY3Q9bnVsbCxaLmZsYWdzJjgmJihLPVosSy5zaWJsaW5nPW51bGwsSy5zdGF0ZU5vZGU9bnVsbCksWj1iO2Q9YS5wZW5kaW5nTGFuZXM7MD09PWQmJihUaT1udWxsKTsxPT09ZD9hPT09RWo/RGorKzooRGo9MCxFaj1hKTpEaj0wO2M9Yy5zdGF0ZU5vZGU7aWYoTWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBNZi5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7TWYub25Db21taXRGaWJlclJvb3QoTGYsYyx2b2lkIDAsNjQ9PT0oYy5jdXJyZW50LmZsYWdzJjY0KSl9Y2F0Y2godmEpe31NaihhLE8oKSk7aWYoUWkpdGhyb3cgUWk9ITEsYT1SaSxSaT1udWxsLGE7aWYoMCE9PShYJjgpKXJldHVybiBudWxsO2lnKCk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBlaygpe2Zvcig7bnVsbCE9PVo7KXt2YXIgYT1aLmFsdGVybmF0ZTtKanx8bnVsbD09PUlqfHwoMCE9PShaLmZsYWdzJjgpP2RjKFosSWopJiYoSmo9ITApOjEzPT09Wi50YWcmJm1qKGEsWikmJmRjKFosSWopJiYoSmo9ITApKTt2YXIgYj1aLmZsYWdzOzAhPT0oYiYyNTYpJiZYaShhLFopOzA9PT0oYiY1MTIpfHx4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKTtaPVoubmV4dEVmZmVjdH19ZnVuY3Rpb24gT2ooKXtpZig5MCE9PXpqKXt2YXIgYT05Nzx6aj85Nzp6ajt6aj05MDtyZXR1cm4gZ2coYSxmayl9cmV0dXJuITF9ZnVuY3Rpb24gJGkoYSxiKXtBai5wdXNoKGIsYSk7eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSl9ZnVuY3Rpb24gWmkoYSxiKXtCai5wdXNoKGIsYSk7eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSl9XG5mdW5jdGlvbiBmaygpe2lmKG51bGw9PT15ailyZXR1cm4hMTt2YXIgYT15ajt5aj1udWxsO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMzEpKTt2YXIgYj1YO1h8PTMyO3ZhciBjPUJqO0JqPVtdO2Zvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCs9Mil7dmFyIGU9Y1tkXSxmPWNbZCsxXSxnPWUuZGVzdHJveTtlLmRlc3Ryb3k9dm9pZCAwO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnKXRyeXtnKCl9Y2F0Y2goayl7aWYobnVsbD09PWYpdGhyb3cgRXJyb3IoeSgzMzApKTtXaShmLGspfX1jPUFqO0FqPVtdO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKz0yKXtlPWNbZF07Zj1jW2QrMV07dHJ5e3ZhciBoPWUuY3JlYXRlO2UuZGVzdHJveT1oKCl9Y2F0Y2goayl7aWYobnVsbD09PWYpdGhyb3cgRXJyb3IoeSgzMzApKTtXaShmLGspfX1mb3IoaD1hLmN1cnJlbnQuZmlyc3RFZmZlY3Q7bnVsbCE9PWg7KWE9aC5uZXh0RWZmZWN0LGgubmV4dEVmZmVjdD1udWxsLGguZmxhZ3MmOCYmKGguc2libGluZz1cbm51bGwsaC5zdGF0ZU5vZGU9bnVsbCksaD1hO1g9YjtpZygpO3JldHVybiEwfWZ1bmN0aW9uIGdrKGEsYixjKXtiPU1pKGMsYik7Yj1QaShhLGIsMSk7QWcoYSxiKTtiPUhnKCk7YT1LaihhLDEpO251bGwhPT1hJiYoJGMoYSwxLGIpLE1qKGEsYikpfVxuZnVuY3Rpb24gV2koYSxiKXtpZigzPT09YS50YWcpZ2soYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXtnayhjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpe2E9TWkoYixhKTt2YXIgZT1TaShjLGEsMSk7QWcoYyxlKTtlPUhnKCk7Yz1LaihjLDEpO2lmKG51bGwhPT1jKSRjKGMsMSxlKSxNaihjLGUpO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoZCkpKXRyeXtkLmNvbXBvbmVudERpZENhdGNoKGIsYSl9Y2F0Y2goZil7fWJyZWFrfX1jPWMucmV0dXJufX1cbmZ1bmN0aW9uIFlqKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7Yj1IZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztVPT09YSYmKFcmYyk9PT1jJiYoND09PVZ8fDM9PT1WJiYoVyY2MjkxNDU2MCk9PT1XJiY1MDA+TygpLWpqP1FqKGEsMCk6dWp8PWMpO01qKGEsYil9ZnVuY3Rpb24gbGooYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yj0wOzA9PT1iJiYoYj1hLm1vZGUsMD09PShiJjIpP2I9MTowPT09KGImNCk/Yj05OT09PWVnKCk/MToyOigwPT09R2omJihHaj10aiksYj1ZYyg2MjkxNDU2MCZ+R2opLDA9PT1iJiYoYj00MTk0MzA0KSkpO2M9SGcoKTthPUtqKGEsYik7bnVsbCE9PWEmJigkYyhhLGIsYyksTWooYSxjKSl9dmFyIGNrO1xuY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWIubGFuZXM7aWYobnVsbCE9PWEpaWYoYS5tZW1vaXplZFByb3BzIT09Yi5wZW5kaW5nUHJvcHN8fE4uY3VycmVudCl1Zz0hMDtlbHNlIGlmKDAhPT0oYyZkKSl1Zz0wIT09KGEuZmxhZ3MmMTYzODQpPyEwOiExO2Vsc2V7dWc9ITE7c3dpdGNoKGIudGFnKXtjYXNlIDM6cmkoYik7c2goKTticmVhaztjYXNlIDU6Z2goYik7YnJlYWs7Y2FzZSAxOkZmKGIudHlwZSkmJkpmKGIpO2JyZWFrO2Nhc2UgNDplaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6ZD1iLm1lbW9pemVkUHJvcHMudmFsdWU7dmFyIGU9Yi50eXBlLl9jb250ZXh0O0kobWcsZS5fY3VycmVudFZhbHVlKTtlLl9jdXJyZW50VmFsdWU9ZDticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2lmKDAhPT0oYyZiLmNoaWxkLmNoaWxkTGFuZXMpKXJldHVybiB0aShhLGIsYyk7SShQLFAuY3VycmVudCYxKTtiPWhpKGEsYixjKTtyZXR1cm4gbnVsbCE9PVxuYj9iLnNpYmxpbmc6bnVsbH1JKFAsUC5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD0wIT09KGMmYi5jaGlsZExhbmVzKTtpZigwIT09KGEuZmxhZ3MmNjQpKXtpZihkKXJldHVybiBBaShhLGIsYyk7Yi5mbGFnc3w9NjR9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsLGUubGFzdEVmZmVjdD1udWxsKTtJKFAsUC5jdXJyZW50KTtpZihkKWJyZWFrO2Vsc2UgcmV0dXJuIG51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBiLmxhbmVzPTAsbWkoYSxiLGMpfXJldHVybiBoaShhLGIsYyl9ZWxzZSB1Zz0hMTtiLmxhbmVzPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPUVmKGIsTS5jdXJyZW50KTt0ZyhiLGMpO2U9Q2gobnVsbCxiLGQsYSxlLGMpO2IuZmxhZ3N8PTE7aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKEZmKGQpKXt2YXIgZj0hMDtKZihiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt4ZyhiKTt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmR2coYixkLGcsYSk7ZS51cGRhdGVyPUtnO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbHM9YjtPZyhiLGQsYSxjKTtiPXFpKG51bGwsYixkLCEwLGYsYyl9ZWxzZSBiLnRhZz0wLGZpKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtyZXR1cm4gYjtjYXNlIDE2OmU9Yi5lbGVtZW50VHlwZTthOntudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTtcbmE9Yi5wZW5kaW5nUHJvcHM7Zj1lLl9pbml0O2U9ZihlLl9wYXlsb2FkKTtiLnR5cGU9ZTtmPWIudGFnPWhrKGUpO2E9bGcoZSxhKTtzd2l0Y2goZil7Y2FzZSAwOmI9bGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTpiPXBpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9Z2kobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1paShudWxsLGIsZSxsZyhlLnR5cGUsYSksZCxjKTticmVhayBhfXRocm93IEVycm9yKHkoMzA2LGUsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbGkoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSkscGkoYSxiLGQsZSxjKTtjYXNlIDM6cmkoYik7ZD1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1hfHxudWxsPT09ZCl0aHJvdyBFcnJvcih5KDI4MikpO1xuZD1iLnBlbmRpbmdQcm9wcztlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3lnKGEsYik7Q2coYixkLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlzaCgpLGI9aGkoYSxiLGMpO2Vsc2V7ZT1iLnN0YXRlTm9kZTtpZihmPWUuaHlkcmF0ZSlraD1yZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLGpoPWIsZj1saD0hMDtpZihmKXthPWUubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YTtpZihudWxsIT1hKWZvcihlPTA7ZTxhLmxlbmd0aDtlKz0yKWY9YVtlXSxmLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PWFbZSsxXSx0aC5wdXNoKGYpO2M9WmcoYixudWxsLGQsYyk7Zm9yKGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8MTAyNCxjPWMuc2libGluZ31lbHNlIGZpKGEsYixkLGMpLHNoKCk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gZ2goYiksbnVsbD09PWEmJlxucGgoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbixuZihkLGUpP2c9bnVsbDpudWxsIT09ZiYmbmYoZCxmKSYmKGIuZmxhZ3N8PTE2KSxvaShhLGIpLGZpKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmcGgoYiksbnVsbDtjYXNlIDEzOnJldHVybiB0aShhLGIsYyk7Y2FzZSA0OnJldHVybiBlaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1ZZyhiLG51bGwsZCxjKTpmaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksZ2koYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO3ZhciBoPWIudHlwZS5fY29udGV4dDtJKG1nLGguX2N1cnJlbnRWYWx1ZSk7aC5fY3VycmVudFZhbHVlPWY7aWYobnVsbCE9PWcpaWYoaD1nLnZhbHVlLGY9SGUoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwLDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIU4uY3VycmVudCl7Yj1oaShhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgaz1oLmRlcGVuZGVuY2llcztpZihudWxsIT09ayl7Zz1oLmNoaWxkO2Zvcih2YXIgbD1cbmsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYobD16ZygtMSxjJi1jKSxsLnRhZz0yLEFnKGgsbCkpO2gubGFuZXN8PWM7bD1oLmFsdGVybmF0ZTtudWxsIT09bCYmKGwubGFuZXN8PWMpO3NnKGgucmV0dXJuLGMpO2subGFuZXN8PWM7YnJlYWt9bD1sLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9Z31maShhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbix0ZyhiLGMpLGU9dmcoZSxcbmYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5mbGFnc3w9MSxmaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9bGcoZSxiLnBlbmRpbmdQcm9wcyksZj1sZyhlLnR5cGUsZiksaWkoYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIGtpKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpLGIudGFnPTEsRmYoZCk/KGE9ITAsSmYoYikpOmE9ITEsdGcoYixjKSxNZyhiLGQsZSksT2coYixkLGUsYykscWkobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiBBaShhLGIsYyk7Y2FzZSAyMzpyZXR1cm4gbWkoYSxiLGMpO2Nhc2UgMjQ6cmV0dXJuIG1pKGEsYixjKX10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO1xufTtmdW5jdGlvbiBpayhhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZmxhZ3M9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkTGFuZXM9dGhpcy5sYW5lcz0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gbmgoYSxiLGMsZCl7cmV0dXJuIG5ldyBpayhhLGIsYyxkKX1mdW5jdGlvbiBqaShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfVxuZnVuY3Rpb24gaGsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGppKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1BYSlyZXR1cm4gMTE7aWYoYT09PURhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIFRnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9bmgoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy50eXBlPWEudHlwZSxjLmZsYWdzPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzO2MubGFuZXM9YS5sYW5lcztjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2xhbmVzOmIubGFuZXMsZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0fTtcbmMuc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gVmcoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWppKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIHVhOnJldHVybiBYZyhjLmNoaWxkcmVuLGUsZixiKTtjYXNlIEhhOmc9ODtlfD0xNjticmVhaztjYXNlIHdhOmc9ODtlfD0xO2JyZWFrO2Nhc2UgeGE6cmV0dXJuIGE9bmgoMTIsYyxiLGV8OCksYS5lbGVtZW50VHlwZT14YSxhLnR5cGU9eGEsYS5sYW5lcz1mLGE7Y2FzZSBCYTpyZXR1cm4gYT1uaCgxMyxjLGIsZSksYS50eXBlPUJhLGEuZWxlbWVudFR5cGU9QmEsYS5sYW5lcz1mLGE7Y2FzZSBDYTpyZXR1cm4gYT1uaCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1DYSxhLmxhbmVzPWYsYTtjYXNlIElhOnJldHVybiB2aShjLGUsZixiKTtjYXNlIEphOnJldHVybiBhPW5oKDI0LGMsYixlKSxhLmVsZW1lbnRUeXBlPUphLGEubGFuZXM9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHlhOmc9MTA7YnJlYWsgYTtjYXNlIHphOmc9OTticmVhayBhO2Nhc2UgQWE6Zz0xMTticmVhayBhO2Nhc2UgRGE6Zz0xNDticmVhayBhO2Nhc2UgRWE6Zz0xNjtkPW51bGw7YnJlYWsgYTtjYXNlIEZhOmc9MjI7YnJlYWsgYX10aHJvdyBFcnJvcih5KDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPW5oKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmxhbmVzPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gWGcoYSxiLGMsZCl7YT1uaCg3LGEsZCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gdmkoYSxiLGMsZCl7YT1uaCgyMyxhLGQsYik7YS5lbGVtZW50VHlwZT1JYTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gVWcoYSxiLGMpe2E9bmgoNixhLG51bGwsYik7YS5sYW5lcz1jO3JldHVybiBhfVxuZnVuY3Rpb24gV2coYSxiLGMpe2I9bmgoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IubGFuZXM9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBqayhhLGIsYyl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmh5ZHJhdGU9Yzt0aGlzLmNhbGxiYWNrTm9kZT1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT0wO3RoaXMuZXZlbnRUaW1lcz1aYygwKTt0aGlzLmV4cGlyYXRpb25UaW1lcz1aYygtMSk7dGhpcy5lbnRhbmdsZWRMYW5lcz10aGlzLmZpbmlzaGVkTGFuZXM9dGhpcy5tdXRhYmxlUmVhZExhbmVzPXRoaXMuZXhwaXJlZExhbmVzPXRoaXMucGluZ2VkTGFuZXM9dGhpcy5zdXNwZW5kZWRMYW5lcz10aGlzLnBlbmRpbmdMYW5lcz0wO3RoaXMuZW50YW5nbGVtZW50cz1aYygwKTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9bnVsbH1cbmZ1bmN0aW9uIGtrKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6dGEsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5mdW5jdGlvbiBsayhhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1IZygpLGc9SWcoZSk7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxzO2I6e2lmKFpiKGMpIT09Y3x8MSE9PWMudGFnKXRocm93IEVycm9yKHkoMTcwKSk7dmFyIGg9Yztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoPWguc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoRmYoaC50eXBlKSl7aD1oLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKTt0aHJvdyBFcnJvcih5KDE3MSkpO31pZigxPT09Yy50YWcpe3ZhciBrPWMudHlwZTtpZihGZihrKSl7Yz1JZihjLGssaCk7YnJlYWsgYX19Yz1ofWVsc2UgYz1DZjtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPXpnKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09ZD9udWxsOmQ7bnVsbCE9PVxuZCYmKGIuY2FsbGJhY2s9ZCk7QWcoZSxiKTtKZyhlLGcsZik7cmV0dXJuIGd9ZnVuY3Rpb24gbWsoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBuayhhLGIpe2E9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXt2YXIgYz1hLnJldHJ5TGFuZTthLnJldHJ5TGFuZT0wIT09YyYmYzxiP2M6Yn19ZnVuY3Rpb24gb2soYSxiKXtuayhhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmbmsoYSxiKX1mdW5jdGlvbiBwaygpe3JldHVybiBudWxsfVxuZnVuY3Rpb24gcWsoYSxiLGMpe3ZhciBkPW51bGwhPWMmJm51bGwhPWMuaHlkcmF0aW9uT3B0aW9ucyYmYy5oeWRyYXRpb25PcHRpb25zLm11dGFibGVTb3VyY2VzfHxudWxsO2M9bmV3IGprKGEsYixudWxsIT1jJiYhMD09PWMuaHlkcmF0ZSk7Yj1uaCgzLG51bGwsbnVsbCwyPT09Yj83OjE9PT1iPzM6MCk7Yy5jdXJyZW50PWI7Yi5zdGF0ZU5vZGU9Yzt4ZyhiKTthW2ZmXT1jLmN1cnJlbnQ7Y2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO2lmKGQpZm9yKGE9MDthPGQubGVuZ3RoO2ErKyl7Yj1kW2FdO3ZhciBlPWIuX2dldFZlcnNpb247ZT1lKGIuX3NvdXJjZSk7bnVsbD09Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2MubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYixlXTpjLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChiLGUpfXRoaXMuX2ludGVybmFsUm9vdD1jfVxucWsucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXtsayhhLHRoaXMuX2ludGVybmFsUm9vdCxudWxsLG51bGwpfTtxay5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdCxiPWEuY29udGFpbmVySW5mbztsayhudWxsLGEsbnVsbCxmdW5jdGlvbigpe2JbZmZdPW51bGx9KX07ZnVuY3Rpb24gcmsoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfVxuZnVuY3Rpb24gc2soYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBxayhhLDAsYj97aHlkcmF0ZTohMH06dm9pZCAwKX1cbmZ1bmN0aW9uIHRrKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7aC5jYWxsKGEpfX1sayhiLGcsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPXNrKGMsZCk7Zz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPW1rKGcpO2suY2FsbChhKX19WGooZnVuY3Rpb24oKXtsayhiLGcsYSxlKX0pfXJldHVybiBtayhnKX1lYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNCxiKTtvayhhLDQpfX07ZmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKTtKZyhhLDY3MTA4ODY0LGIpO29rKGEsNjcxMDg4NjQpfX07XG5nYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpLGM9SWcoYSk7SmcoYSxjLGIpO29rKGEsYyl9fTtoYz1mdW5jdGlvbihhLGIpe3JldHVybiBiKCl9O1xueWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjphYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9RGIoZCk7aWYoIWUpdGhyb3cgRXJyb3IoeSg5MCkpO1dhKGQpO2FiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtHYj1XajtcbkhiPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9WDtYfD00O3RyeXtyZXR1cm4gZ2coOTgsYS5iaW5kKG51bGwsYixjLGQsZSkpfWZpbmFsbHl7WD1mLDA9PT1YJiYod2ooKSxpZygpKX19O0liPWZ1bmN0aW9uKCl7MD09PShYJjQ5KSYmKFZqKCksT2ooKSl9O0piPWZ1bmN0aW9uKGEsYil7dmFyIGM9WDtYfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fTtmdW5jdGlvbiB1ayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiBrayhhLGIsbnVsbCxjKX12YXIgdms9e0V2ZW50czpbQ2IsdWUsRGIsRWIsRmIsT2ose2N1cnJlbnQ6ITF9XX0sd2s9e2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTcuMC4xXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifTtcbnZhciB4az17YnVuZGxlVHlwZTp3ay5idW5kbGVUeXBlLHZlcnNpb246d2sudmVyc2lvbixyZW5kZXJlclBhY2thZ2VOYW1lOndrLnJlbmRlcmVyUGFja2FnZU5hbWUscmVuZGVyZXJDb25maWc6d2sucmVuZGVyZXJDb25maWcsb3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzUmVuYW1lUGF0aDpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPWNjKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp3ay5maW5kRmliZXJCeUhvc3RJbnN0YW5jZXx8XG5wayxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsfTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyl7dmFyIHlrPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZigheWsuaXNEaXNhYmxlZCYmeWsuc3VwcG9ydHNGaWJlcil0cnl7TGY9eWsuaW5qZWN0KHhrKSxNZj15a31jYXRjaChhKXt9fWV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9dms7ZXhwb3J0cy5jcmVhdGVQb3J0YWw9dWs7XG5leHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbHM7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHkoMTg4KSk7dGhyb3cgRXJyb3IoeSgyNjgsT2JqZWN0LmtleXMoYSkpKTt9YT1jYyhiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O2V4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEsYil7dmFyIGM9WDtpZigwIT09KGMmNDgpKXJldHVybiBhKGIpO1h8PTE7dHJ5e2lmKGEpcmV0dXJuIGdnKDk5LGEuYmluZChudWxsLGIpKX1maW5hbGx5e1g9YyxpZygpfX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4gdGsobnVsbCxhLGIsITAsYyl9O1xuZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFyayhhKSl0aHJvdyBFcnJvcih5KDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oWGooZnVuY3Rpb24oKXt0ayhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbZmZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1XajtleHBvcnRzLnVuc3RhYmxlX2NyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3JldHVybiB1ayhhLGIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGwpfTtcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIXJrKGMpKXRocm93IEVycm9yKHkoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IoeSgzOCkpO3JldHVybiB0ayhhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTcuMC4xXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjIwLjFcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGYsZyxoLGs7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIGw9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gbC5ub3coKX19ZWxzZXt2YXIgcD1EYXRlLHE9cC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpLXF9fVxuaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIHQ9bnVsbCx1PW51bGwsdz1mdW5jdGlvbigpe2lmKG51bGwhPT10KXRyeXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO3QoITAsYSk7dD1udWxsfWNhdGNoKGIpe3Rocm93IHNldFRpbWVvdXQodywwKSxiO319O2Y9ZnVuY3Rpb24oYSl7bnVsbCE9PXQ/c2V0VGltZW91dChmLDAsYSk6KHQ9YSxzZXRUaW1lb3V0KHcsMCkpfTtnPWZ1bmN0aW9uKGEsYil7dT1zZXRUaW1lb3V0KGEsYil9O2g9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodSl9O2V4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4hMX07az1leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKCl7fX1lbHNle3ZhciB4PXdpbmRvdy5zZXRUaW1lb3V0LHk9d2luZG93LmNsZWFyVGltZW91dDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUpe3ZhciB6PVxud2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIik7XCJmdW5jdGlvblwiIT09dHlwZW9mIHomJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvcmVhY3QtcG9seWZpbGxzXCIpfXZhciBBPSExLEI9bnVsbCxDPS0xLEQ9NSxFPTA7ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpPj1cbkV9O2s9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCIpOkQ9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O3ZhciBGPW5ldyBNZXNzYWdlQ2hhbm5lbCxHPUYucG9ydDI7Ri5wb3J0MS5vbm1lc3NhZ2U9ZnVuY3Rpb24oKXtpZihudWxsIT09Qil7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtFPWErRDt0cnl7QighMCxhKT9HLnBvc3RNZXNzYWdlKG51bGwpOihBPSExLEI9bnVsbCl9Y2F0Y2goYil7dGhyb3cgRy5wb3N0TWVzc2FnZShudWxsKSxiO319ZWxzZSBBPSExfTtmPWZ1bmN0aW9uKGEpe0I9YTtBfHwoQT0hMCxHLnBvc3RNZXNzYWdlKG51bGwpKX07Zz1mdW5jdGlvbihhLGIpe0M9XG54KGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9O2g9ZnVuY3Rpb24oKXt5KEMpO0M9LTF9fWZ1bmN0aW9uIEgoYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKHZvaWQgMCE9PWUmJjA8SShlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gSihhKXthPWFbMF07cmV0dXJuIHZvaWQgMD09PWE/bnVsbDphfVxuZnVuY3Rpb24gSyhhKXt2YXIgYj1hWzBdO2lmKHZvaWQgMCE9PWIpe3ZhciBjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlOyl7dmFyIG09MiooZCsxKS0xLG49YVttXSx2PW0rMSxyPWFbdl07aWYodm9pZCAwIT09biYmMD5JKG4sYykpdm9pZCAwIT09ciYmMD5JKHIsbik/KGFbZF09cixhW3ZdPWMsZD12KTooYVtkXT1uLGFbbV09YyxkPW0pO2Vsc2UgaWYodm9pZCAwIT09ciYmMD5JKHIsYykpYVtkXT1yLGFbdl09YyxkPXY7ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBJKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfXZhciBMPVtdLE09W10sTj0xLE89bnVsbCxQPTMsUT0hMSxSPSExLFM9ITE7XG5mdW5jdGlvbiBUKGEpe2Zvcih2YXIgYj1KKE0pO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spSyhNKTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKUsoTSksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxIKEwsYik7ZWxzZSBicmVhaztiPUooTSl9fWZ1bmN0aW9uIFUoYSl7Uz0hMTtUKGEpO2lmKCFSKWlmKG51bGwhPT1KKEwpKVI9ITAsZihWKTtlbHNle3ZhciBiPUooTSk7bnVsbCE9PWImJmcoVSxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBWKGEsYil7Uj0hMTtTJiYoUz0hMSxoKCkpO1E9ITA7dmFyIGM9UDt0cnl7VChiKTtmb3IoTz1KKEwpO251bGwhPT1PJiYoIShPLmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZCgpKTspe3ZhciBkPU8uY2FsbGJhY2s7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe08uY2FsbGJhY2s9bnVsbDtQPU8ucHJpb3JpdHlMZXZlbDt2YXIgZT1kKE8uZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT9PLmNhbGxiYWNrPWU6Tz09PUooTCkmJksoTCk7VChiKX1lbHNlIEsoTCk7Tz1KKEwpfWlmKG51bGwhPT1PKXZhciBtPSEwO2Vsc2V7dmFyIG49SihNKTtudWxsIT09biYmZyhVLG4uc3RhcnRUaW1lLWIpO209ITF9cmV0dXJuIG19ZmluYWxseXtPPW51bGwsUD1jLFE9ITF9fXZhciBXPWs7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtcbmV4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7Unx8UXx8KFI9ITAsZihWKSl9O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gUH07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBKKEwpfTtcbmV4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goUCl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9UH12YXIgYz1QO1A9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e1A9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PVc7ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz1QO1A9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e1A9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWM/KGM9Yy5kZWxheSxjPVwibnVtYmVyXCI9PT10eXBlb2YgYyYmMDxjP2QrYzpkKTpjPWQ7c3dpdGNoKGEpe2Nhc2UgMTp2YXIgZT0tMTticmVhaztjYXNlIDI6ZT0yNTA7YnJlYWs7Y2FzZSA1OmU9MTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6ZT0xRTQ7YnJlYWs7ZGVmYXVsdDplPTVFM31lPWMrZTthPXtpZDpOKyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmMsZXhwaXJhdGlvblRpbWU6ZSxzb3J0SW5kZXg6LTF9O2M+ZD8oYS5zb3J0SW5kZXg9YyxIKE0sYSksbnVsbD09PUooTCkmJmE9PT1KKE0pJiYoUz9oKCk6Uz0hMCxnKFUsYy1kKSkpOihhLnNvcnRJbmRleD1lLEgoTCxhKSxSfHxRfHwoUj0hMCxmKFYpKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9UDtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1QO1A9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7UD1jfX19O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShcIndlYmV4dGVuc2lvbi1wb2x5ZmlsbFwiLCBbXCJtb2R1bGVcIl0sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShtb2R1bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QpO1xuICAgIGdsb2JhbC5icm93c2VyID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHRoaXMsIGZ1bmN0aW9uIChtb2R1bGUpIHtcbiAgLyogd2ViZXh0ZW5zaW9uLXBvbHlmaWxsIC0gdjAuNy4wIC0gVHVlIE5vdiAxMCAyMDIwIDIwOjI0OjA0ICovXG5cbiAgLyogLSotIE1vZGU6IGluZGVudC10YWJzLW1vZGU6IG5pbDsganMtaW5kZW50LWxldmVsOiAyIC0qLSAqL1xuXG4gIC8qIHZpbTogc2V0IHN0cz0yIHN3PTIgZXQgdHc9ODA6ICovXG5cbiAgLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICAgKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gICAqIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIGlmICh0eXBlb2YgYnJvd3NlciA9PT0gXCJ1bmRlZmluZWRcIiB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYnJvd3NlcikgIT09IE9iamVjdC5wcm90b3R5cGUpIHtcbiAgICBjb25zdCBDSFJPTUVfU0VORF9NRVNTQUdFX0NBTExCQUNLX05PX1JFU1BPTlNFX01FU1NBR0UgPSBcIlRoZSBtZXNzYWdlIHBvcnQgY2xvc2VkIGJlZm9yZSBhIHJlc3BvbnNlIHdhcyByZWNlaXZlZC5cIjtcbiAgICBjb25zdCBTRU5EX1JFU1BPTlNFX0RFUFJFQ0FUSU9OX1dBUk5JTkcgPSBcIlJldHVybmluZyBhIFByb21pc2UgaXMgdGhlIHByZWZlcnJlZCB3YXkgdG8gc2VuZCBhIHJlcGx5IGZyb20gYW4gb25NZXNzYWdlL29uTWVzc2FnZUV4dGVybmFsIGxpc3RlbmVyLCBhcyB0aGUgc2VuZFJlc3BvbnNlIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBzcGVjcyAoU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvTW96aWxsYS9BZGQtb25zL1dlYkV4dGVuc2lvbnMvQVBJL3J1bnRpbWUvb25NZXNzYWdlKVwiOyAvLyBXcmFwcGluZyB0aGUgYnVsayBvZiB0aGlzIHBvbHlmaWxsIGluIGEgb25lLXRpbWUtdXNlIGZ1bmN0aW9uIGlzIGEgbWlub3JcbiAgICAvLyBvcHRpbWl6YXRpb24gZm9yIEZpcmVmb3guIFNpbmNlIFNwaWRlcm1vbmtleSBkb2VzIG5vdCBmdWxseSBwYXJzZSB0aGVcbiAgICAvLyBjb250ZW50cyBvZiBhIGZ1bmN0aW9uIHVudGlsIHRoZSBmaXJzdCB0aW1lIGl0J3MgY2FsbGVkLCBhbmQgc2luY2UgaXQgd2lsbFxuICAgIC8vIG5ldmVyIGFjdHVhbGx5IG5lZWQgdG8gYmUgY2FsbGVkLCB0aGlzIGFsbG93cyB0aGUgcG9seWZpbGwgdG8gYmUgaW5jbHVkZWRcbiAgICAvLyBpbiBGaXJlZm94IG5lYXJseSBmb3IgZnJlZS5cblxuICAgIGNvbnN0IHdyYXBBUElzID0gZXh0ZW5zaW9uQVBJcyA9PiB7XG4gICAgICAvLyBOT1RFOiBhcGlNZXRhZGF0YSBpcyBhc3NvY2lhdGVkIHRvIHRoZSBjb250ZW50IG9mIHRoZSBhcGktbWV0YWRhdGEuanNvbiBmaWxlXG4gICAgICAvLyBhdCBidWlsZCB0aW1lIGJ5IHJlcGxhY2luZyB0aGUgZm9sbG93aW5nIFwiaW5jbHVkZVwiIHdpdGggdGhlIGNvbnRlbnQgb2YgdGhlXG4gICAgICAvLyBKU09OIGZpbGUuXG4gICAgICBjb25zdCBhcGlNZXRhZGF0YSA9IHtcbiAgICAgICAgXCJhbGFybXNcIjoge1xuICAgICAgICAgIFwiY2xlYXJcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjbGVhckFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImJvb2ttYXJrc1wiOiB7XG4gICAgICAgICAgXCJjcmVhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRDaGlsZHJlblwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFJlY2VudFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFN1YlRyZWVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRUcmVlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibW92ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZVRyZWVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZWFyY2hcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1cGRhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJicm93c2VyQWN0aW9uXCI6IHtcbiAgICAgICAgICBcImRpc2FibGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJlbmFibGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRCYWRnZUJhY2tncm91bmRDb2xvclwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEJhZGdlVGV4dFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFBvcHVwXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0VGl0bGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJvcGVuUG9wdXBcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRCYWRnZUJhY2tncm91bmRDb2xvclwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldEJhZGdlVGV4dFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldEljb25cIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRQb3B1cFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldFRpdGxlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiYnJvd3NpbmdEYXRhXCI6IHtcbiAgICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZUNhY2hlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlQ29va2llc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZURvd25sb2Fkc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZUZvcm1EYXRhXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlSGlzdG9yeVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZUxvY2FsU3RvcmFnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZVBhc3N3b3Jkc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZVBsdWdpbkRhdGFcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXR0aW5nc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImNvbW1hbmRzXCI6IHtcbiAgICAgICAgICBcImdldEFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImNvbnRleHRNZW51c1wiOiB7XG4gICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1cGRhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJjb29raWVzXCI6IHtcbiAgICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEFsbENvb2tpZVN0b3Jlc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImRldnRvb2xzXCI6IHtcbiAgICAgICAgICBcImluc3BlY3RlZFdpbmRvd1wiOiB7XG4gICAgICAgICAgICBcImV2YWxcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDIsXG4gICAgICAgICAgICAgIFwic2luZ2xlQ2FsbGJhY2tBcmdcIjogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFuZWxzXCI6IHtcbiAgICAgICAgICAgIFwiY3JlYXRlXCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDMsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAzLFxuICAgICAgICAgICAgICBcInNpbmdsZUNhbGxiYWNrQXJnXCI6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImVsZW1lbnRzXCI6IHtcbiAgICAgICAgICAgICAgXCJjcmVhdGVTaWRlYmFyUGFuZVwiOiB7XG4gICAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJkb3dubG9hZHNcIjoge1xuICAgICAgICAgIFwiY2FuY2VsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZG93bmxvYWRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJlcmFzZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEZpbGVJY29uXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwib3BlblwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhdXNlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlRmlsZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlc3VtZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlYXJjaFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNob3dcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJleHRlbnNpb25cIjoge1xuICAgICAgICAgIFwiaXNBbGxvd2VkRmlsZVNjaGVtZUFjY2Vzc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImlzQWxsb3dlZEluY29nbml0b0FjY2Vzc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImhpc3RvcnlcIjoge1xuICAgICAgICAgIFwiYWRkVXJsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZGVsZXRlQWxsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZGVsZXRlUmFuZ2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkZWxldGVVcmxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRWaXNpdHNcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZWFyY2hcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJpMThuXCI6IHtcbiAgICAgICAgICBcImRldGVjdExhbmd1YWdlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0QWNjZXB0TGFuZ3VhZ2VzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiaWRlbnRpdHlcIjoge1xuICAgICAgICAgIFwibGF1bmNoV2ViQXV0aEZsb3dcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJpZGxlXCI6IHtcbiAgICAgICAgICBcInF1ZXJ5U3RhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJtYW5hZ2VtZW50XCI6IHtcbiAgICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFNlbGZcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRFbmFibGVkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidW5pbnN0YWxsU2VsZlwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIm5vdGlmaWNhdGlvbnNcIjoge1xuICAgICAgICAgIFwiY2xlYXJcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjcmVhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRQZXJtaXNzaW9uTGV2ZWxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1cGRhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJwYWdlQWN0aW9uXCI6IHtcbiAgICAgICAgICBcImdldFBvcHVwXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0VGl0bGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJoaWRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0SWNvblwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldFBvcHVwXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0VGl0bGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzaG93XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwicGVybWlzc2lvbnNcIjoge1xuICAgICAgICAgIFwiY29udGFpbnNcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXF1ZXN0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwicnVudGltZVwiOiB7XG4gICAgICAgICAgXCJnZXRCYWNrZ3JvdW5kUGFnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFBsYXRmb3JtSW5mb1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm9wZW5PcHRpb25zUGFnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlcXVlc3RVcGRhdGVDaGVja1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlbmRNZXNzYWdlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDNcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VuZE5hdGl2ZU1lc3NhZ2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRVbmluc3RhbGxVUkxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJzZXNzaW9uc1wiOiB7XG4gICAgICAgICAgXCJnZXREZXZpY2VzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0UmVjZW50bHlDbG9zZWRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXN0b3JlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwic3RvcmFnZVwiOiB7XG4gICAgICAgICAgXCJsb2NhbFwiOiB7XG4gICAgICAgICAgICBcImNsZWFyXCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImdldEJ5dGVzSW5Vc2VcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwic2V0XCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm1hbmFnZWRcIjoge1xuICAgICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImdldEJ5dGVzSW5Vc2VcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic3luY1wiOiB7XG4gICAgICAgICAgICBcImNsZWFyXCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImdldEJ5dGVzSW5Vc2VcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwic2V0XCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInRhYnNcIjoge1xuICAgICAgICAgIFwiY2FwdHVyZVZpc2libGVUYWJcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjcmVhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkZXRlY3RMYW5ndWFnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImRpc2NhcmRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkdXBsaWNhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJleGVjdXRlU2NyaXB0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0Q3VycmVudFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFpvb21cIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRab29tU2V0dGluZ3NcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnb0JhY2tcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnb0ZvcndhcmRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJoaWdobGlnaHRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJpbnNlcnRDU1NcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJtb3ZlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicXVlcnlcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZWxvYWRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVDU1NcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZW5kTWVzc2FnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAzXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldFpvb21cIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRab29tU2V0dGluZ3NcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1cGRhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0b3BTaXRlc1wiOiB7XG4gICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ3ZWJOYXZpZ2F0aW9uXCI6IHtcbiAgICAgICAgICBcImdldEFsbEZyYW1lc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEZyYW1lXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwid2ViUmVxdWVzdFwiOiB7XG4gICAgICAgICAgXCJoYW5kbGVyQmVoYXZpb3JDaGFuZ2VkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwid2luZG93c1wiOiB7XG4gICAgICAgICAgXCJjcmVhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRDdXJyZW50XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0TGFzdEZvY3VzZWRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1cGRhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKE9iamVjdC5rZXlzKGFwaU1ldGFkYXRhKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXBpLW1ldGFkYXRhLmpzb24gaGFzIG5vdCBiZWVuIGluY2x1ZGVkIGluIGJyb3dzZXItcG9seWZpbGxcIik7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIEEgV2Vha01hcCBzdWJjbGFzcyB3aGljaCBjcmVhdGVzIGFuZCBzdG9yZXMgYSB2YWx1ZSBmb3IgYW55IGtleSB3aGljaCBkb2VzXG4gICAgICAgKiBub3QgZXhpc3Qgd2hlbiBhY2Nlc3NlZCwgYnV0IGJlaGF2ZXMgZXhhY3RseSBhcyBhbiBvcmRpbmFyeSBXZWFrTWFwXG4gICAgICAgKiBvdGhlcndpc2UuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY3JlYXRlSXRlbVxuICAgICAgICogICAgICAgIEEgZnVuY3Rpb24gd2hpY2ggd2lsbCBiZSBjYWxsZWQgaW4gb3JkZXIgdG8gY3JlYXRlIHRoZSB2YWx1ZSBmb3IgYW55XG4gICAgICAgKiAgICAgICAga2V5IHdoaWNoIGRvZXMgbm90IGV4aXN0LCB0aGUgZmlyc3QgdGltZSBpdCBpcyBhY2Nlc3NlZC4gVGhlXG4gICAgICAgKiAgICAgICAgZnVuY3Rpb24gcmVjZWl2ZXMsIGFzIGl0cyBvbmx5IGFyZ3VtZW50LCB0aGUga2V5IGJlaW5nIGNyZWF0ZWQuXG4gICAgICAgKi9cblxuXG4gICAgICBjbGFzcyBEZWZhdWx0V2Vha01hcCBleHRlbmRzIFdlYWtNYXAge1xuICAgICAgICBjb25zdHJ1Y3RvcihjcmVhdGVJdGVtLCBpdGVtcyA9IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHN1cGVyKGl0ZW1zKTtcbiAgICAgICAgICB0aGlzLmNyZWF0ZUl0ZW0gPSBjcmVhdGVJdGVtO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0KGtleSkge1xuICAgICAgICAgIGlmICghdGhpcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCB0aGlzLmNyZWF0ZUl0ZW0oa2V5KSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHN1cGVyLmdldChrZXkpO1xuICAgICAgICB9XG5cbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBvYmplY3QgaXMgYW4gb2JqZWN0IHdpdGggYSBgdGhlbmAgbWV0aG9kLCBhbmQgY2FuXG4gICAgICAgKiB0aGVyZWZvcmUgYmUgYXNzdW1lZCB0byBiZWhhdmUgYXMgYSBQcm9taXNlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHRlc3QuXG4gICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdGhlbmFibGUuXG4gICAgICAgKi9cblxuXG4gICAgICBjb25zdCBpc1RoZW5hYmxlID0gdmFsdWUgPT4ge1xuICAgICAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSBcImZ1bmN0aW9uXCI7XG4gICAgICB9O1xuICAgICAgLyoqXG4gICAgICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2gsIHdoZW4gY2FsbGVkLCB3aWxsIHJlc29sdmUgb3IgcmVqZWN0XG4gICAgICAgKiB0aGUgZ2l2ZW4gcHJvbWlzZSBiYXNlZCBvbiBob3cgaXQgaXMgY2FsbGVkOlxuICAgICAgICpcbiAgICAgICAqIC0gSWYsIHdoZW4gY2FsbGVkLCBgY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yYCBjb250YWlucyBhIG5vbi1udWxsIG9iamVjdCxcbiAgICAgICAqICAgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQgd2l0aCB0aGF0IHZhbHVlLlxuICAgICAgICogLSBJZiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggZXhhY3RseSBvbmUgYXJndW1lbnQsIHRoZSBwcm9taXNlIGlzXG4gICAgICAgKiAgIHJlc29sdmVkIHRvIHRoYXQgdmFsdWUuXG4gICAgICAgKiAtIE90aGVyd2lzZSwgdGhlIHByb21pc2UgaXMgcmVzb2x2ZWQgdG8gYW4gYXJyYXkgY29udGFpbmluZyBhbGwgb2YgdGhlXG4gICAgICAgKiAgIGZ1bmN0aW9uJ3MgYXJndW1lbnRzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9taXNlXG4gICAgICAgKiAgICAgICAgQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHJlc29sdXRpb24gYW5kIHJlamVjdGlvbiBmdW5jdGlvbnMgb2YgYVxuICAgICAgICogICAgICAgIHByb21pc2UuXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcm9taXNlLnJlc29sdmVcbiAgICAgICAqICAgICAgICBUaGUgcHJvbWlzZSdzIHJlc29sdXRpb24gZnVuY3Rpb24uXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcm9taXNlLnJlamVjdGlvblxuICAgICAgICogICAgICAgIFRoZSBwcm9taXNlJ3MgcmVqZWN0aW9uIGZ1bmN0aW9uLlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IG1ldGFkYXRhXG4gICAgICAgKiAgICAgICAgTWV0YWRhdGEgYWJvdXQgdGhlIHdyYXBwZWQgbWV0aG9kIHdoaWNoIGhhcyBjcmVhdGVkIHRoZSBjYWxsYmFjay5cbiAgICAgICAqIEBwYXJhbSB7aW50ZWdlcn0gbWV0YWRhdGEubWF4UmVzb2x2ZWRBcmdzXG4gICAgICAgKiAgICAgICAgVGhlIG1heGltdW0gbnVtYmVyIG9mIGFyZ3VtZW50cyB3aGljaCBtYXkgYmUgcGFzc2VkIHRvIHRoZVxuICAgICAgICogICAgICAgIGNhbGxiYWNrIGNyZWF0ZWQgYnkgdGhlIHdyYXBwZWQgYXN5bmMgZnVuY3Rpb24uXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge2Z1bmN0aW9ufVxuICAgICAgICogICAgICAgIFRoZSBnZW5lcmF0ZWQgY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICAgKi9cblxuXG4gICAgICBjb25zdCBtYWtlQ2FsbGJhY2sgPSAocHJvbWlzZSwgbWV0YWRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuICguLi5jYWxsYmFja0FyZ3MpID0+IHtcbiAgICAgICAgICBpZiAoZXh0ZW5zaW9uQVBJcy5ydW50aW1lLmxhc3RFcnJvcikge1xuICAgICAgICAgICAgcHJvbWlzZS5yZWplY3QoZXh0ZW5zaW9uQVBJcy5ydW50aW1lLmxhc3RFcnJvcik7XG4gICAgICAgICAgfSBlbHNlIGlmIChtZXRhZGF0YS5zaW5nbGVDYWxsYmFja0FyZyB8fCBjYWxsYmFja0FyZ3MubGVuZ3RoIDw9IDEgJiYgbWV0YWRhdGEuc2luZ2xlQ2FsbGJhY2tBcmcgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBwcm9taXNlLnJlc29sdmUoY2FsbGJhY2tBcmdzWzBdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKGNhbGxiYWNrQXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfTtcblxuICAgICAgY29uc3QgcGx1cmFsaXplQXJndW1lbnRzID0gbnVtQXJncyA9PiBudW1BcmdzID09IDEgPyBcImFyZ3VtZW50XCIgOiBcImFyZ3VtZW50c1wiO1xuICAgICAgLyoqXG4gICAgICAgKiBDcmVhdGVzIGEgd3JhcHBlciBmdW5jdGlvbiBmb3IgYSBtZXRob2Qgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBhbmQgbWV0YWRhdGEuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICAgICAqICAgICAgICBUaGUgbmFtZSBvZiB0aGUgbWV0aG9kIHdoaWNoIGlzIGJlaW5nIHdyYXBwZWQuXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gbWV0YWRhdGFcbiAgICAgICAqICAgICAgICBNZXRhZGF0YSBhYm91dCB0aGUgbWV0aG9kIGJlaW5nIHdyYXBwZWQuXG4gICAgICAgKiBAcGFyYW0ge2ludGVnZXJ9IG1ldGFkYXRhLm1pbkFyZ3NcbiAgICAgICAqICAgICAgICBUaGUgbWluaW11bSBudW1iZXIgb2YgYXJndW1lbnRzIHdoaWNoIG11c3QgYmUgcGFzc2VkIHRvIHRoZVxuICAgICAgICogICAgICAgIGZ1bmN0aW9uLiBJZiBjYWxsZWQgd2l0aCBmZXdlciB0aGFuIHRoaXMgbnVtYmVyIG9mIGFyZ3VtZW50cywgdGhlXG4gICAgICAgKiAgICAgICAgd3JhcHBlciB3aWxsIHJhaXNlIGFuIGV4Y2VwdGlvbi5cbiAgICAgICAqIEBwYXJhbSB7aW50ZWdlcn0gbWV0YWRhdGEubWF4QXJnc1xuICAgICAgICogICAgICAgIFRoZSBtYXhpbXVtIG51bWJlciBvZiBhcmd1bWVudHMgd2hpY2ggbWF5IGJlIHBhc3NlZCB0byB0aGVcbiAgICAgICAqICAgICAgICBmdW5jdGlvbi4gSWYgY2FsbGVkIHdpdGggbW9yZSB0aGFuIHRoaXMgbnVtYmVyIG9mIGFyZ3VtZW50cywgdGhlXG4gICAgICAgKiAgICAgICAgd3JhcHBlciB3aWxsIHJhaXNlIGFuIGV4Y2VwdGlvbi5cbiAgICAgICAqIEBwYXJhbSB7aW50ZWdlcn0gbWV0YWRhdGEubWF4UmVzb2x2ZWRBcmdzXG4gICAgICAgKiAgICAgICAgVGhlIG1heGltdW0gbnVtYmVyIG9mIGFyZ3VtZW50cyB3aGljaCBtYXkgYmUgcGFzc2VkIHRvIHRoZVxuICAgICAgICogICAgICAgIGNhbGxiYWNrIGNyZWF0ZWQgYnkgdGhlIHdyYXBwZWQgYXN5bmMgZnVuY3Rpb24uXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge2Z1bmN0aW9uKG9iamVjdCwgLi4uKil9XG4gICAgICAgKiAgICAgICBUaGUgZ2VuZXJhdGVkIHdyYXBwZXIgZnVuY3Rpb24uXG4gICAgICAgKi9cblxuXG4gICAgICBjb25zdCB3cmFwQXN5bmNGdW5jdGlvbiA9IChuYW1lLCBtZXRhZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gYXN5bmNGdW5jdGlvbldyYXBwZXIodGFyZ2V0LCAuLi5hcmdzKSB7XG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoIDwgbWV0YWRhdGEubWluQXJncykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBhdCBsZWFzdCAke21ldGFkYXRhLm1pbkFyZ3N9ICR7cGx1cmFsaXplQXJndW1lbnRzKG1ldGFkYXRhLm1pbkFyZ3MpfSBmb3IgJHtuYW1lfSgpLCBnb3QgJHthcmdzLmxlbmd0aH1gKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPiBtZXRhZGF0YS5tYXhBcmdzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGF0IG1vc3QgJHttZXRhZGF0YS5tYXhBcmdzfSAke3BsdXJhbGl6ZUFyZ3VtZW50cyhtZXRhZGF0YS5tYXhBcmdzKX0gZm9yICR7bmFtZX0oKSwgZ290ICR7YXJncy5sZW5ndGh9YCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGlmIChtZXRhZGF0YS5mYWxsYmFja1RvTm9DYWxsYmFjaykge1xuICAgICAgICAgICAgICAvLyBUaGlzIEFQSSBtZXRob2QgaGFzIGN1cnJlbnRseSBubyBjYWxsYmFjayBvbiBDaHJvbWUsIGJ1dCBpdCByZXR1cm4gYSBwcm9taXNlIG9uIEZpcmVmb3gsXG4gICAgICAgICAgICAgIC8vIGFuZCBzbyB0aGUgcG9seWZpbGwgd2lsbCB0cnkgdG8gY2FsbCBpdCB3aXRoIGEgY2FsbGJhY2sgZmlyc3QsIGFuZCBpdCB3aWxsIGZhbGxiYWNrXG4gICAgICAgICAgICAgIC8vIHRvIG5vdCBwYXNzaW5nIHRoZSBjYWxsYmFjayBpZiB0aGUgZmlyc3QgY2FsbCBmYWlscy5cbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0YXJnZXRbbmFtZV0oLi4uYXJncywgbWFrZUNhbGxiYWNrKHtcbiAgICAgICAgICAgICAgICAgIHJlc29sdmUsXG4gICAgICAgICAgICAgICAgICByZWplY3RcbiAgICAgICAgICAgICAgICB9LCBtZXRhZGF0YSkpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChjYkVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGAke25hbWV9IEFQSSBtZXRob2QgZG9lc24ndCBzZWVtIHRvIHN1cHBvcnQgdGhlIGNhbGxiYWNrIHBhcmFtZXRlciwgYCArIFwiZmFsbGluZyBiYWNrIHRvIGNhbGwgaXQgd2l0aG91dCBhIGNhbGxiYWNrOiBcIiwgY2JFcnJvcik7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdKC4uLmFyZ3MpOyAvLyBVcGRhdGUgdGhlIEFQSSBtZXRob2QgbWV0YWRhdGEsIHNvIHRoYXQgdGhlIG5leHQgQVBJIGNhbGxzIHdpbGwgbm90IHRyeSB0b1xuICAgICAgICAgICAgICAgIC8vIHVzZSB0aGUgdW5zdXBwb3J0ZWQgY2FsbGJhY2sgYW55bW9yZS5cblxuICAgICAgICAgICAgICAgIG1ldGFkYXRhLmZhbGxiYWNrVG9Ob0NhbGxiYWNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbWV0YWRhdGEubm9DYWxsYmFjayA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1ldGFkYXRhLm5vQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdKC4uLmFyZ3MpO1xuICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0YXJnZXRbbmFtZV0oLi4uYXJncywgbWFrZUNhbGxiYWNrKHtcbiAgICAgICAgICAgICAgICByZXNvbHZlLFxuICAgICAgICAgICAgICAgIHJlamVjdFxuICAgICAgICAgICAgICB9LCBtZXRhZGF0YSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICAgIC8qKlxuICAgICAgICogV3JhcHMgYW4gZXhpc3RpbmcgbWV0aG9kIG9mIHRoZSB0YXJnZXQgb2JqZWN0LCBzbyB0aGF0IGNhbGxzIHRvIGl0IGFyZVxuICAgICAgICogaW50ZXJjZXB0ZWQgYnkgdGhlIGdpdmVuIHdyYXBwZXIgZnVuY3Rpb24uIFRoZSB3cmFwcGVyIGZ1bmN0aW9uIHJlY2VpdmVzLFxuICAgICAgICogYXMgaXRzIGZpcnN0IGFyZ3VtZW50LCB0aGUgb3JpZ2luYWwgYHRhcmdldGAgb2JqZWN0LCBmb2xsb3dlZCBieSBlYWNoIG9mXG4gICAgICAgKiB0aGUgYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgb3JpZ2luYWwgbWV0aG9kLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YXJnZXRcbiAgICAgICAqICAgICAgICBUaGUgb3JpZ2luYWwgdGFyZ2V0IG9iamVjdCB0aGF0IHRoZSB3cmFwcGVkIG1ldGhvZCBiZWxvbmdzIHRvLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbWV0aG9kXG4gICAgICAgKiAgICAgICAgVGhlIG1ldGhvZCBiZWluZyB3cmFwcGVkLiBUaGlzIGlzIHVzZWQgYXMgdGhlIHRhcmdldCBvZiB0aGUgUHJveHlcbiAgICAgICAqICAgICAgICBvYmplY3Qgd2hpY2ggaXMgY3JlYXRlZCB0byB3cmFwIHRoZSBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSB3cmFwcGVyXG4gICAgICAgKiAgICAgICAgVGhlIHdyYXBwZXIgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGluIHBsYWNlIG9mIGEgZGlyZWN0IGludm9jYXRpb25cbiAgICAgICAqICAgICAgICBvZiB0aGUgd3JhcHBlZCBtZXRob2QuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge1Byb3h5PGZ1bmN0aW9uPn1cbiAgICAgICAqICAgICAgICBBIFByb3h5IG9iamVjdCBmb3IgdGhlIGdpdmVuIG1ldGhvZCwgd2hpY2ggaW52b2tlcyB0aGUgZ2l2ZW4gd3JhcHBlclxuICAgICAgICogICAgICAgIG1ldGhvZCBpbiBpdHMgcGxhY2UuXG4gICAgICAgKi9cblxuXG4gICAgICBjb25zdCB3cmFwTWV0aG9kID0gKHRhcmdldCwgbWV0aG9kLCB3cmFwcGVyKSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJveHkobWV0aG9kLCB7XG4gICAgICAgICAgYXBwbHkodGFyZ2V0TWV0aG9kLCB0aGlzT2JqLCBhcmdzKSB7XG4gICAgICAgICAgICByZXR1cm4gd3JhcHBlci5jYWxsKHRoaXNPYmosIHRhcmdldCwgLi4uYXJncyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgbGV0IGhhc093blByb3BlcnR5ID0gRnVuY3Rpb24uY2FsbC5iaW5kKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkpO1xuICAgICAgLyoqXG4gICAgICAgKiBXcmFwcyBhbiBvYmplY3QgaW4gYSBQcm94eSB3aGljaCBpbnRlcmNlcHRzIGFuZCB3cmFwcyBjZXJ0YWluIG1ldGhvZHNcbiAgICAgICAqIGJhc2VkIG9uIHRoZSBnaXZlbiBgd3JhcHBlcnNgIGFuZCBgbWV0YWRhdGFgIG9iamVjdHMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IHRhcmdldFxuICAgICAgICogICAgICAgIFRoZSB0YXJnZXQgb2JqZWN0IHRvIHdyYXAuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IFt3cmFwcGVycyA9IHt9XVxuICAgICAgICogICAgICAgIEFuIG9iamVjdCB0cmVlIGNvbnRhaW5pbmcgd3JhcHBlciBmdW5jdGlvbnMgZm9yIHNwZWNpYWwgY2FzZXMuIEFueVxuICAgICAgICogICAgICAgIGZ1bmN0aW9uIHByZXNlbnQgaW4gdGhpcyBvYmplY3QgdHJlZSBpcyBjYWxsZWQgaW4gcGxhY2Ugb2YgdGhlXG4gICAgICAgKiAgICAgICAgbWV0aG9kIGluIHRoZSBzYW1lIGxvY2F0aW9uIGluIHRoZSBgdGFyZ2V0YCBvYmplY3QgdHJlZS4gVGhlc2VcbiAgICAgICAqICAgICAgICB3cmFwcGVyIG1ldGhvZHMgYXJlIGludm9rZWQgYXMgZGVzY3JpYmVkIGluIHtAc2VlIHdyYXBNZXRob2R9LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbbWV0YWRhdGEgPSB7fV1cbiAgICAgICAqICAgICAgICBBbiBvYmplY3QgdHJlZSBjb250YWluaW5nIG1ldGFkYXRhIHVzZWQgdG8gYXV0b21hdGljYWxseSBnZW5lcmF0ZVxuICAgICAgICogICAgICAgIFByb21pc2UtYmFzZWQgd3JhcHBlciBmdW5jdGlvbnMgZm9yIGFzeW5jaHJvbm91cy4gQW55IGZ1bmN0aW9uIGluXG4gICAgICAgKiAgICAgICAgdGhlIGB0YXJnZXRgIG9iamVjdCB0cmVlIHdoaWNoIGhhcyBhIGNvcnJlc3BvbmRpbmcgbWV0YWRhdGEgb2JqZWN0XG4gICAgICAgKiAgICAgICAgaW4gdGhlIHNhbWUgbG9jYXRpb24gaW4gdGhlIGBtZXRhZGF0YWAgdHJlZSBpcyByZXBsYWNlZCB3aXRoIGFuXG4gICAgICAgKiAgICAgICAgYXV0b21hdGljYWxseS1nZW5lcmF0ZWQgd3JhcHBlciBmdW5jdGlvbiwgYXMgZGVzY3JpYmVkIGluXG4gICAgICAgKiAgICAgICAge0BzZWUgd3JhcEFzeW5jRnVuY3Rpb259XG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge1Byb3h5PG9iamVjdD59XG4gICAgICAgKi9cblxuICAgICAgY29uc3Qgd3JhcE9iamVjdCA9ICh0YXJnZXQsIHdyYXBwZXJzID0ge30sIG1ldGFkYXRhID0ge30pID0+IHtcbiAgICAgICAgbGV0IGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgbGV0IGhhbmRsZXJzID0ge1xuICAgICAgICAgIGhhcyhwcm94eVRhcmdldCwgcHJvcCkge1xuICAgICAgICAgICAgcmV0dXJuIHByb3AgaW4gdGFyZ2V0IHx8IHByb3AgaW4gY2FjaGU7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGdldChwcm94eVRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgICAgICAgIGlmIChwcm9wIGluIGNhY2hlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjYWNoZVtwcm9wXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCEocHJvcCBpbiB0YXJnZXQpKSB7XG4gICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHRhcmdldFtwcm9wXTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBtZXRob2Qgb24gdGhlIHVuZGVybHlpbmcgb2JqZWN0LiBDaGVjayBpZiB3ZSBuZWVkIHRvIGRvXG4gICAgICAgICAgICAgIC8vIGFueSB3cmFwcGluZy5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB3cmFwcGVyc1twcm9wXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSBhIHNwZWNpYWwtY2FzZSB3cmFwcGVyIGZvciB0aGlzIG1ldGhvZC5cbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHdyYXBNZXRob2QodGFyZ2V0LCB0YXJnZXRbcHJvcF0sIHdyYXBwZXJzW3Byb3BdKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChoYXNPd25Qcm9wZXJ0eShtZXRhZGF0YSwgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGFuIGFzeW5jIG1ldGhvZCB0aGF0IHdlIGhhdmUgbWV0YWRhdGEgZm9yLiBDcmVhdGUgYVxuICAgICAgICAgICAgICAgIC8vIFByb21pc2Ugd3JhcHBlciBmb3IgaXQuXG4gICAgICAgICAgICAgICAgbGV0IHdyYXBwZXIgPSB3cmFwQXN5bmNGdW5jdGlvbihwcm9wLCBtZXRhZGF0YVtwcm9wXSk7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB3cmFwTWV0aG9kKHRhcmdldCwgdGFyZ2V0W3Byb3BdLCB3cmFwcGVyKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgbWV0aG9kIHRoYXQgd2UgZG9uJ3Qga25vdyBvciBjYXJlIGFib3V0LiBSZXR1cm4gdGhlXG4gICAgICAgICAgICAgICAgLy8gb3JpZ2luYWwgbWV0aG9kLCBib3VuZCB0byB0aGUgdW5kZXJseWluZyBvYmplY3QuXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5iaW5kKHRhcmdldCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlICE9PSBudWxsICYmIChoYXNPd25Qcm9wZXJ0eSh3cmFwcGVycywgcHJvcCkgfHwgaGFzT3duUHJvcGVydHkobWV0YWRhdGEsIHByb3ApKSkge1xuICAgICAgICAgICAgICAvLyBUaGlzIGlzIGFuIG9iamVjdCB0aGF0IHdlIG5lZWQgdG8gZG8gc29tZSB3cmFwcGluZyBmb3IgdGhlIGNoaWxkcmVuXG4gICAgICAgICAgICAgIC8vIG9mLiBDcmVhdGUgYSBzdWItb2JqZWN0IHdyYXBwZXIgZm9yIGl0IHdpdGggdGhlIGFwcHJvcHJpYXRlIGNoaWxkXG4gICAgICAgICAgICAgIC8vIG1ldGFkYXRhLlxuICAgICAgICAgICAgICB2YWx1ZSA9IHdyYXBPYmplY3QodmFsdWUsIHdyYXBwZXJzW3Byb3BdLCBtZXRhZGF0YVtwcm9wXSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhhc093blByb3BlcnR5KG1ldGFkYXRhLCBcIipcIikpIHtcbiAgICAgICAgICAgICAgLy8gV3JhcCBhbGwgcHJvcGVydGllcyBpbiAqIG5hbWVzcGFjZS5cbiAgICAgICAgICAgICAgdmFsdWUgPSB3cmFwT2JqZWN0KHZhbHVlLCB3cmFwcGVyc1twcm9wXSwgbWV0YWRhdGFbXCIqXCJdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIFdlIGRvbid0IG5lZWQgdG8gZG8gYW55IHdyYXBwaW5nIGZvciB0aGlzIHByb3BlcnR5LFxuICAgICAgICAgICAgICAvLyBzbyBqdXN0IGZvcndhcmQgYWxsIGFjY2VzcyB0byB0aGUgdW5kZXJseWluZyBvYmplY3QuXG4gICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjYWNoZSwgcHJvcCwge1xuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldFtwcm9wXTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FjaGVbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgc2V0KHByb3h5VGFyZ2V0LCBwcm9wLCB2YWx1ZSwgcmVjZWl2ZXIpIHtcbiAgICAgICAgICAgIGlmIChwcm9wIGluIGNhY2hlKSB7XG4gICAgICAgICAgICAgIGNhY2hlW3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHByb3h5VGFyZ2V0LCBwcm9wLCBkZXNjKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShjYWNoZSwgcHJvcCwgZGVzYyk7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGRlbGV0ZVByb3BlcnR5KHByb3h5VGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5kZWxldGVQcm9wZXJ0eShjYWNoZSwgcHJvcCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH07IC8vIFBlciBjb250cmFjdCBvZiB0aGUgUHJveHkgQVBJLCB0aGUgXCJnZXRcIiBwcm94eSBoYW5kbGVyIG11c3QgcmV0dXJuIHRoZVxuICAgICAgICAvLyBvcmlnaW5hbCB2YWx1ZSBvZiB0aGUgdGFyZ2V0IGlmIHRoYXQgdmFsdWUgaXMgZGVjbGFyZWQgcmVhZC1vbmx5IGFuZFxuICAgICAgICAvLyBub24tY29uZmlndXJhYmxlLiBGb3IgdGhpcyByZWFzb24sIHdlIGNyZWF0ZSBhbiBvYmplY3Qgd2l0aCB0aGVcbiAgICAgICAgLy8gcHJvdG90eXBlIHNldCB0byBgdGFyZ2V0YCBpbnN0ZWFkIG9mIHVzaW5nIGB0YXJnZXRgIGRpcmVjdGx5LlxuICAgICAgICAvLyBPdGhlcndpc2Ugd2UgY2Fubm90IHJldHVybiBhIGN1c3RvbSBvYmplY3QgZm9yIEFQSXMgdGhhdFxuICAgICAgICAvLyBhcmUgZGVjbGFyZWQgcmVhZC1vbmx5IGFuZCBub24tY29uZmlndXJhYmxlLCBzdWNoIGFzIGBjaHJvbWUuZGV2dG9vbHNgLlxuICAgICAgICAvL1xuICAgICAgICAvLyBUaGUgcHJveHkgaGFuZGxlcnMgdGhlbXNlbHZlcyB3aWxsIHN0aWxsIHVzZSB0aGUgb3JpZ2luYWwgYHRhcmdldGBcbiAgICAgICAgLy8gaW5zdGVhZCBvZiB0aGUgYHByb3h5VGFyZ2V0YCwgc28gdGhhdCB0aGUgbWV0aG9kcyBhbmQgcHJvcGVydGllcyBhcmVcbiAgICAgICAgLy8gZGVyZWZlcmVuY2VkIHZpYSB0aGUgb3JpZ2luYWwgdGFyZ2V0cy5cblxuICAgICAgICBsZXQgcHJveHlUYXJnZXQgPSBPYmplY3QuY3JlYXRlKHRhcmdldCk7XG4gICAgICAgIHJldHVybiBuZXcgUHJveHkocHJveHlUYXJnZXQsIGhhbmRsZXJzKTtcbiAgICAgIH07XG4gICAgICAvKipcbiAgICAgICAqIENyZWF0ZXMgYSBzZXQgb2Ygd3JhcHBlciBmdW5jdGlvbnMgZm9yIGFuIGV2ZW50IG9iamVjdCwgd2hpY2ggaGFuZGxlc1xuICAgICAgICogd3JhcHBpbmcgb2YgbGlzdGVuZXIgZnVuY3Rpb25zIHRoYXQgdGhvc2UgbWVzc2FnZXMgYXJlIHBhc3NlZC5cbiAgICAgICAqXG4gICAgICAgKiBBIHNpbmdsZSB3cmFwcGVyIGlzIGNyZWF0ZWQgZm9yIGVhY2ggbGlzdGVuZXIgZnVuY3Rpb24sIGFuZCBzdG9yZWQgaW4gYVxuICAgICAgICogbWFwLiBTdWJzZXF1ZW50IGNhbGxzIHRvIGBhZGRMaXN0ZW5lcmAsIGBoYXNMaXN0ZW5lcmAsIG9yIGByZW1vdmVMaXN0ZW5lcmBcbiAgICAgICAqIHJldHJpZXZlIHRoZSBvcmlnaW5hbCB3cmFwcGVyLCBzbyB0aGF0ICBhdHRlbXB0cyB0byByZW1vdmUgYVxuICAgICAgICogcHJldmlvdXNseS1hZGRlZCBsaXN0ZW5lciB3b3JrIGFzIGV4cGVjdGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RGVmYXVsdFdlYWtNYXA8ZnVuY3Rpb24sIGZ1bmN0aW9uPn0gd3JhcHBlck1hcFxuICAgICAgICogICAgICAgIEEgRGVmYXVsdFdlYWtNYXAgb2JqZWN0IHdoaWNoIHdpbGwgY3JlYXRlIHRoZSBhcHByb3ByaWF0ZSB3cmFwcGVyXG4gICAgICAgKiAgICAgICAgZm9yIGEgZ2l2ZW4gbGlzdGVuZXIgZnVuY3Rpb24gd2hlbiBvbmUgZG9lcyBub3QgZXhpc3QsIGFuZCByZXRyaWV2ZVxuICAgICAgICogICAgICAgIGFuIGV4aXN0aW5nIG9uZSB3aGVuIGl0IGRvZXMuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge29iamVjdH1cbiAgICAgICAqL1xuXG5cbiAgICAgIGNvbnN0IHdyYXBFdmVudCA9IHdyYXBwZXJNYXAgPT4gKHtcbiAgICAgICAgYWRkTGlzdGVuZXIodGFyZ2V0LCBsaXN0ZW5lciwgLi4uYXJncykge1xuICAgICAgICAgIHRhcmdldC5hZGRMaXN0ZW5lcih3cmFwcGVyTWFwLmdldChsaXN0ZW5lciksIC4uLmFyZ3MpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGhhc0xpc3RlbmVyKHRhcmdldCwgbGlzdGVuZXIpIHtcbiAgICAgICAgICByZXR1cm4gdGFyZ2V0Lmhhc0xpc3RlbmVyKHdyYXBwZXJNYXAuZ2V0KGxpc3RlbmVyKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBsaXN0ZW5lcikge1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVMaXN0ZW5lcih3cmFwcGVyTWFwLmdldChsaXN0ZW5lcikpO1xuICAgICAgICB9XG5cbiAgICAgIH0pOyAvLyBLZWVwIHRyYWNrIGlmIHRoZSBkZXByZWNhdGlvbiB3YXJuaW5nIGhhcyBiZWVuIGxvZ2dlZCBhdCBsZWFzdCBvbmNlLlxuXG5cbiAgICAgIGxldCBsb2dnZWRTZW5kUmVzcG9uc2VEZXByZWNhdGlvbldhcm5pbmcgPSBmYWxzZTtcbiAgICAgIGNvbnN0IG9uTWVzc2FnZVdyYXBwZXJzID0gbmV3IERlZmF1bHRXZWFrTWFwKGxpc3RlbmVyID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgcmV0dXJuIGxpc3RlbmVyO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXcmFwcyBhIG1lc3NhZ2UgbGlzdGVuZXIgZnVuY3Rpb24gc28gdGhhdCBpdCBtYXkgc2VuZCByZXNwb25zZXMgYmFzZWQgb25cbiAgICAgICAgICogaXRzIHJldHVybiB2YWx1ZSwgcmF0aGVyIHRoYW4gYnkgcmV0dXJuaW5nIGEgc2VudGluZWwgdmFsdWUgYW5kIGNhbGxpbmcgYVxuICAgICAgICAgKiBjYWxsYmFjay4gSWYgdGhlIGxpc3RlbmVyIGZ1bmN0aW9uIHJldHVybnMgYSBQcm9taXNlLCB0aGUgcmVzcG9uc2UgaXNcbiAgICAgICAgICogc2VudCB3aGVuIHRoZSBwcm9taXNlIGVpdGhlciByZXNvbHZlcyBvciByZWplY3RzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0geyp9IG1lc3NhZ2VcbiAgICAgICAgICogICAgICAgIFRoZSBtZXNzYWdlIHNlbnQgYnkgdGhlIG90aGVyIGVuZCBvZiB0aGUgY2hhbm5lbC5cbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IHNlbmRlclxuICAgICAgICAgKiAgICAgICAgRGV0YWlscyBhYm91dCB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlLlxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCopfSBzZW5kUmVzcG9uc2VcbiAgICAgICAgICogICAgICAgIEEgY2FsbGJhY2sgd2hpY2gsIHdoZW4gY2FsbGVkIHdpdGggYW4gYXJiaXRyYXJ5IGFyZ3VtZW50LCBzZW5kc1xuICAgICAgICAgKiAgICAgICAgdGhhdCB2YWx1ZSBhcyBhIHJlc3BvbnNlLlxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgICAgICogICAgICAgIFRydWUgaWYgdGhlIHdyYXBwZWQgbGlzdGVuZXIgcmV0dXJuZWQgYSBQcm9taXNlLCB3aGljaCB3aWxsIGxhdGVyXG4gICAgICAgICAqICAgICAgICB5aWVsZCBhIHJlc3BvbnNlLiBGYWxzZSBvdGhlcndpc2UuXG4gICAgICAgICAqL1xuXG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG9uTWVzc2FnZShtZXNzYWdlLCBzZW5kZXIsIHNlbmRSZXNwb25zZSkge1xuICAgICAgICAgIGxldCBkaWRDYWxsU2VuZFJlc3BvbnNlID0gZmFsc2U7XG4gICAgICAgICAgbGV0IHdyYXBwZWRTZW5kUmVzcG9uc2U7XG4gICAgICAgICAgbGV0IHNlbmRSZXNwb25zZVByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIHdyYXBwZWRTZW5kUmVzcG9uc2UgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgaWYgKCFsb2dnZWRTZW5kUmVzcG9uc2VEZXByZWNhdGlvbldhcm5pbmcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oU0VORF9SRVNQT05TRV9ERVBSRUNBVElPTl9XQVJOSU5HLCBuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgICAgICAgICAgICAgbG9nZ2VkU2VuZFJlc3BvbnNlRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGRpZENhbGxTZW5kUmVzcG9uc2UgPSB0cnVlO1xuICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgbGV0IHJlc3VsdDtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSBsaXN0ZW5lcihtZXNzYWdlLCBzZW5kZXIsIHdyYXBwZWRTZW5kUmVzcG9uc2UpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmVzdWx0ID0gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBpc1Jlc3VsdFRoZW5hYmxlID0gcmVzdWx0ICE9PSB0cnVlICYmIGlzVGhlbmFibGUocmVzdWx0KTsgLy8gSWYgdGhlIGxpc3RlbmVyIGRpZG4ndCByZXR1cm5lZCB0cnVlIG9yIGEgUHJvbWlzZSwgb3IgY2FsbGVkXG4gICAgICAgICAgLy8gd3JhcHBlZFNlbmRSZXNwb25zZSBzeW5jaHJvbm91c2x5LCB3ZSBjYW4gZXhpdCBlYXJsaWVyXG4gICAgICAgICAgLy8gYmVjYXVzZSB0aGVyZSB3aWxsIGJlIG5vIHJlc3BvbnNlIHNlbnQgZnJvbSB0aGlzIGxpc3RlbmVyLlxuXG4gICAgICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSAmJiAhaXNSZXN1bHRUaGVuYWJsZSAmJiAhZGlkQ2FsbFNlbmRSZXNwb25zZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH0gLy8gQSBzbWFsbCBoZWxwZXIgdG8gc2VuZCB0aGUgbWVzc2FnZSBpZiB0aGUgcHJvbWlzZSByZXNvbHZlc1xuICAgICAgICAgIC8vIGFuZCBhbiBlcnJvciBpZiB0aGUgcHJvbWlzZSByZWplY3RzIChhIHdyYXBwZWQgc2VuZE1lc3NhZ2UgaGFzXG4gICAgICAgICAgLy8gdG8gdHJhbnNsYXRlIHRoZSBtZXNzYWdlIGludG8gYSByZXNvbHZlZCBwcm9taXNlIG9yIGEgcmVqZWN0ZWRcbiAgICAgICAgICAvLyBwcm9taXNlKS5cblxuXG4gICAgICAgICAgY29uc3Qgc2VuZFByb21pc2VkUmVzdWx0ID0gcHJvbWlzZSA9PiB7XG4gICAgICAgICAgICBwcm9taXNlLnRoZW4obXNnID0+IHtcbiAgICAgICAgICAgICAgLy8gc2VuZCB0aGUgbWVzc2FnZSB2YWx1ZS5cbiAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKG1zZyk7XG4gICAgICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgICAgIC8vIFNlbmQgYSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBlcnJvciBpZiB0aGUgcmVqZWN0ZWQgdmFsdWVcbiAgICAgICAgICAgICAgLy8gaXMgYW4gaW5zdGFuY2Ugb2YgZXJyb3IsIG9yIHRoZSBvYmplY3QgaXRzZWxmIG90aGVyd2lzZS5cbiAgICAgICAgICAgICAgbGV0IG1lc3NhZ2U7XG5cbiAgICAgICAgICAgICAgaWYgKGVycm9yICYmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yIHx8IHR5cGVvZiBlcnJvci5tZXNzYWdlID09PSBcInN0cmluZ1wiKSkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWRcIjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHNlbmRSZXNwb25zZSh7XG4gICAgICAgICAgICAgICAgX19tb3pXZWJFeHRlbnNpb25Qb2x5ZmlsbFJlamVjdF9fOiB0cnVlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAvLyBQcmludCBhbiBlcnJvciBvbiB0aGUgY29uc29sZSBpZiB1bmFibGUgdG8gc2VuZCB0aGUgcmVzcG9uc2UuXG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gc2VuZCBvbk1lc3NhZ2UgcmVqZWN0ZWQgcmVwbHlcIiwgZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07IC8vIElmIHRoZSBsaXN0ZW5lciByZXR1cm5lZCBhIFByb21pc2UsIHNlbmQgdGhlIHJlc29sdmVkIHZhbHVlIGFzIGFcbiAgICAgICAgICAvLyByZXN1bHQsIG90aGVyd2lzZSB3YWl0IHRoZSBwcm9taXNlIHJlbGF0ZWQgdG8gdGhlIHdyYXBwZWRTZW5kUmVzcG9uc2VcbiAgICAgICAgICAvLyBjYWxsYmFjayB0byByZXNvbHZlIGFuZCBzZW5kIGl0IGFzIGEgcmVzcG9uc2UuXG5cblxuICAgICAgICAgIGlmIChpc1Jlc3VsdFRoZW5hYmxlKSB7XG4gICAgICAgICAgICBzZW5kUHJvbWlzZWRSZXN1bHQocmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VuZFByb21pc2VkUmVzdWx0KHNlbmRSZXNwb25zZVByb21pc2UpO1xuICAgICAgICAgIH0gLy8gTGV0IENocm9tZSBrbm93IHRoYXQgdGhlIGxpc3RlbmVyIGlzIHJlcGx5aW5nLlxuXG5cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB3cmFwcGVkU2VuZE1lc3NhZ2VDYWxsYmFjayA9ICh7XG4gICAgICAgIHJlamVjdCxcbiAgICAgICAgcmVzb2x2ZVxuICAgICAgfSwgcmVwbHkpID0+IHtcbiAgICAgICAgaWYgKGV4dGVuc2lvbkFQSXMucnVudGltZS5sYXN0RXJyb3IpIHtcbiAgICAgICAgICAvLyBEZXRlY3Qgd2hlbiBub25lIG9mIHRoZSBsaXN0ZW5lcnMgcmVwbGllZCB0byB0aGUgc2VuZE1lc3NhZ2UgY2FsbCBhbmQgcmVzb2x2ZVxuICAgICAgICAgIC8vIHRoZSBwcm9taXNlIHRvIHVuZGVmaW5lZCBhcyBpbiBGaXJlZm94LlxuICAgICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS93ZWJleHRlbnNpb24tcG9seWZpbGwvaXNzdWVzLzEzMFxuICAgICAgICAgIGlmIChleHRlbnNpb25BUElzLnJ1bnRpbWUubGFzdEVycm9yLm1lc3NhZ2UgPT09IENIUk9NRV9TRU5EX01FU1NBR0VfQ0FMTEJBQ0tfTk9fUkVTUE9OU0VfTUVTU0FHRSkge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QoZXh0ZW5zaW9uQVBJcy5ydW50aW1lLmxhc3RFcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHJlcGx5ICYmIHJlcGx5Ll9fbW96V2ViRXh0ZW5zaW9uUG9seWZpbGxSZWplY3RfXykge1xuICAgICAgICAgIC8vIENvbnZlcnQgYmFjayB0aGUgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgZXJyb3IgaW50b1xuICAgICAgICAgIC8vIGFuIEVycm9yIGluc3RhbmNlLlxuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IocmVwbHkubWVzc2FnZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUocmVwbHkpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBjb25zdCB3cmFwcGVkU2VuZE1lc3NhZ2UgPSAobmFtZSwgbWV0YWRhdGEsIGFwaU5hbWVzcGFjZU9iaiwgLi4uYXJncykgPT4ge1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggPCBtZXRhZGF0YS5taW5BcmdzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBhdCBsZWFzdCAke21ldGFkYXRhLm1pbkFyZ3N9ICR7cGx1cmFsaXplQXJndW1lbnRzKG1ldGFkYXRhLm1pbkFyZ3MpfSBmb3IgJHtuYW1lfSgpLCBnb3QgJHthcmdzLmxlbmd0aH1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA+IG1ldGFkYXRhLm1heEFyZ3MpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGF0IG1vc3QgJHttZXRhZGF0YS5tYXhBcmdzfSAke3BsdXJhbGl6ZUFyZ3VtZW50cyhtZXRhZGF0YS5tYXhBcmdzKX0gZm9yICR7bmFtZX0oKSwgZ290ICR7YXJncy5sZW5ndGh9YCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHdyYXBwZWRDYiA9IHdyYXBwZWRTZW5kTWVzc2FnZUNhbGxiYWNrLmJpbmQobnVsbCwge1xuICAgICAgICAgICAgcmVzb2x2ZSxcbiAgICAgICAgICAgIHJlamVjdFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGFyZ3MucHVzaCh3cmFwcGVkQ2IpO1xuICAgICAgICAgIGFwaU5hbWVzcGFjZU9iai5zZW5kTWVzc2FnZSguLi5hcmdzKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBzdGF0aWNXcmFwcGVycyA9IHtcbiAgICAgICAgcnVudGltZToge1xuICAgICAgICAgIG9uTWVzc2FnZTogd3JhcEV2ZW50KG9uTWVzc2FnZVdyYXBwZXJzKSxcbiAgICAgICAgICBvbk1lc3NhZ2VFeHRlcm5hbDogd3JhcEV2ZW50KG9uTWVzc2FnZVdyYXBwZXJzKSxcbiAgICAgICAgICBzZW5kTWVzc2FnZTogd3JhcHBlZFNlbmRNZXNzYWdlLmJpbmQobnVsbCwgXCJzZW5kTWVzc2FnZVwiLCB7XG4gICAgICAgICAgICBtaW5BcmdzOiAxLFxuICAgICAgICAgICAgbWF4QXJnczogM1xuICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIHRhYnM6IHtcbiAgICAgICAgICBzZW5kTWVzc2FnZTogd3JhcHBlZFNlbmRNZXNzYWdlLmJpbmQobnVsbCwgXCJzZW5kTWVzc2FnZVwiLCB7XG4gICAgICAgICAgICBtaW5BcmdzOiAyLFxuICAgICAgICAgICAgbWF4QXJnczogM1xuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjb25zdCBzZXR0aW5nTWV0YWRhdGEgPSB7XG4gICAgICAgIGNsZWFyOiB7XG4gICAgICAgICAgbWluQXJnczogMSxcbiAgICAgICAgICBtYXhBcmdzOiAxXG4gICAgICAgIH0sXG4gICAgICAgIGdldDoge1xuICAgICAgICAgIG1pbkFyZ3M6IDEsXG4gICAgICAgICAgbWF4QXJnczogMVxuICAgICAgICB9LFxuICAgICAgICBzZXQ6IHtcbiAgICAgICAgICBtaW5BcmdzOiAxLFxuICAgICAgICAgIG1heEFyZ3M6IDFcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGFwaU1ldGFkYXRhLnByaXZhY3kgPSB7XG4gICAgICAgIG5ldHdvcms6IHtcbiAgICAgICAgICBcIipcIjogc2V0dGluZ01ldGFkYXRhXG4gICAgICAgIH0sXG4gICAgICAgIHNlcnZpY2VzOiB7XG4gICAgICAgICAgXCIqXCI6IHNldHRpbmdNZXRhZGF0YVxuICAgICAgICB9LFxuICAgICAgICB3ZWJzaXRlczoge1xuICAgICAgICAgIFwiKlwiOiBzZXR0aW5nTWV0YWRhdGFcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJldHVybiB3cmFwT2JqZWN0KGV4dGVuc2lvbkFQSXMsIHN0YXRpY1dyYXBwZXJzLCBhcGlNZXRhZGF0YSk7XG4gICAgfTtcblxuICAgIGlmICh0eXBlb2YgY2hyb21lICE9IFwib2JqZWN0XCIgfHwgIWNocm9tZSB8fCAhY2hyb21lLnJ1bnRpbWUgfHwgIWNocm9tZS5ydW50aW1lLmlkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIHNjcmlwdCBzaG91bGQgb25seSBiZSBsb2FkZWQgaW4gYSBicm93c2VyIGV4dGVuc2lvbi5cIik7XG4gICAgfSAvLyBUaGUgYnVpbGQgcHJvY2VzcyBhZGRzIGEgVU1EIHdyYXBwZXIgYXJvdW5kIHRoaXMgZmlsZSwgd2hpY2ggbWFrZXMgdGhlXG4gICAgLy8gYG1vZHVsZWAgdmFyaWFibGUgYXZhaWxhYmxlLlxuXG5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IHdyYXBBUElzKGNocm9tZSk7XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBicm93c2VyO1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJyb3dzZXItcG9seWZpbGwuanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9jb3JlL21lcmdlQ29uZmlnJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGF4aW9zLmRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzQXhpb3NFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcbiAgICBjb25maWcudXJsID0gYXJndW1lbnRzWzBdO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgaWYgKGNvbmZpZy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdHMubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IHRoaXMuZGVmYXVsdHMubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnLm1ldGhvZCA9ICdnZXQnO1xuICB9XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHJldHVybiBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcikucmVwbGFjZSgvXlxcPy8sICcnKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IChjb25maWcgfHwge30pLmRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzXG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZVxuICAgIH07XG4gIH07XG4gIHJldHVybiBlcnJvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiAodHlwZW9mIHBheWxvYWQgPT09ICdvYmplY3QnKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCJleHBvcnQgZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSwgRXJyKSB7XG4gICAgaWYgKEVyciA9PT0gdm9pZCAwKSB7IEVyciA9IEVycm9yOyB9XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycihtZXNzYWdlKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnZhcmlhbnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmJvZHlPcGVuQ2xhc3NOYW1lID0gZXhwb3J0cy5wb3J0YWxDbGFzc05hbWUgPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZShcInJlYWN0LWRvbVwiKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZShcInByb3AtdHlwZXNcIik7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfTW9kYWxQb3J0YWwgPSByZXF1aXJlKFwiLi9Nb2RhbFBvcnRhbFwiKTtcblxudmFyIF9Nb2RhbFBvcnRhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Nb2RhbFBvcnRhbCk7XG5cbnZhciBfYXJpYUFwcEhpZGVyID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvYXJpYUFwcEhpZGVyXCIpO1xuXG52YXIgYXJpYUFwcEhpZGVyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2FyaWFBcHBIaWRlcik7XG5cbnZhciBfc2FmZUhUTUxFbGVtZW50ID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvc2FmZUhUTUxFbGVtZW50XCIpO1xuXG52YXIgX3NhZmVIVE1MRWxlbWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zYWZlSFRNTEVsZW1lbnQpO1xuXG52YXIgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdCA9IHJlcXVpcmUoXCJyZWFjdC1saWZlY3ljbGVzLWNvbXBhdFwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgcG9ydGFsQ2xhc3NOYW1lID0gZXhwb3J0cy5wb3J0YWxDbGFzc05hbWUgPSBcIlJlYWN0TW9kYWxQb3J0YWxcIjtcbnZhciBib2R5T3BlbkNsYXNzTmFtZSA9IGV4cG9ydHMuYm9keU9wZW5DbGFzc05hbWUgPSBcIlJlYWN0TW9kYWxfX0JvZHktLW9wZW5cIjtcblxudmFyIGlzUmVhY3QxNiA9IF9zYWZlSFRNTEVsZW1lbnQuY2FuVXNlRE9NICYmIF9yZWFjdERvbTIuZGVmYXVsdC5jcmVhdGVQb3J0YWwgIT09IHVuZGVmaW5lZDtcblxudmFyIGdldENyZWF0ZVBvcnRhbCA9IGZ1bmN0aW9uIGdldENyZWF0ZVBvcnRhbCgpIHtcbiAgcmV0dXJuIGlzUmVhY3QxNiA/IF9yZWFjdERvbTIuZGVmYXVsdC5jcmVhdGVQb3J0YWwgOiBfcmVhY3REb20yLmRlZmF1bHQudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI7XG59O1xuXG5mdW5jdGlvbiBnZXRQYXJlbnRFbGVtZW50KHBhcmVudFNlbGVjdG9yKSB7XG4gIHJldHVybiBwYXJlbnRTZWxlY3RvcigpO1xufVxuXG52YXIgTW9kYWwgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTW9kYWwsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1vZGFsKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNb2RhbCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTW9kYWwuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihNb2RhbCkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnJlbW92ZVBvcnRhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1JlYWN0MTYgJiYgX3JlYWN0RG9tMi5kZWZhdWx0LnVubW91bnRDb21wb25lbnRBdE5vZGUoX3RoaXMubm9kZSk7XG4gICAgICB2YXIgcGFyZW50ID0gZ2V0UGFyZW50RWxlbWVudChfdGhpcy5wcm9wcy5wYXJlbnRTZWxlY3Rvcik7XG4gICAgICBpZiAocGFyZW50ICYmIHBhcmVudC5jb250YWlucyhfdGhpcy5ub2RlKSkge1xuICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoX3RoaXMubm9kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oJ1JlYWN0LU1vZGFsOiBcInBhcmVudFNlbGVjdG9yXCIgcHJvcCBkaWQgbm90IHJldHVybmVkIGFueSBET00gJyArIFwiZWxlbWVudC4gTWFrZSBzdXJlIHRoYXQgdGhlIHBhcmVudCBlbGVtZW50IGlzIHVubW91bnRlZCB0byBcIiArIFwiYXZvaWQgYW55IG1lbW9yeSBsZWFrcy5cIik7XG4gICAgICB9XG4gICAgfSwgX3RoaXMucG9ydGFsUmVmID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgX3RoaXMucG9ydGFsID0gcmVmO1xuICAgIH0sIF90aGlzLnJlbmRlclBvcnRhbCA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgdmFyIGNyZWF0ZVBvcnRhbCA9IGdldENyZWF0ZVBvcnRhbCgpO1xuICAgICAgdmFyIHBvcnRhbCA9IGNyZWF0ZVBvcnRhbChfdGhpcywgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX01vZGFsUG9ydGFsMi5kZWZhdWx0LCBfZXh0ZW5kcyh7IGRlZmF1bHRTdHlsZXM6IE1vZGFsLmRlZmF1bHRTdHlsZXMgfSwgcHJvcHMpKSwgX3RoaXMubm9kZSk7XG4gICAgICBfdGhpcy5wb3J0YWxSZWYocG9ydGFsKTtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNb2RhbCwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAoIV9zYWZlSFRNTEVsZW1lbnQuY2FuVXNlRE9NKSByZXR1cm47XG5cbiAgICAgIGlmICghaXNSZWFjdDE2KSB7XG4gICAgICAgIHRoaXMubm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICB9XG4gICAgICB0aGlzLm5vZGUuY2xhc3NOYW1lID0gdGhpcy5wcm9wcy5wb3J0YWxDbGFzc05hbWU7XG5cbiAgICAgIHZhciBwYXJlbnQgPSBnZXRQYXJlbnRFbGVtZW50KHRoaXMucHJvcHMucGFyZW50U2VsZWN0b3IpO1xuICAgICAgcGFyZW50LmFwcGVuZENoaWxkKHRoaXMubm9kZSk7XG5cbiAgICAgICFpc1JlYWN0MTYgJiYgdGhpcy5yZW5kZXJQb3J0YWwodGhpcy5wcm9wcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFNuYXBzaG90QmVmb3JlVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgdmFyIHByZXZQYXJlbnQgPSBnZXRQYXJlbnRFbGVtZW50KHByZXZQcm9wcy5wYXJlbnRTZWxlY3Rvcik7XG4gICAgICB2YXIgbmV4dFBhcmVudCA9IGdldFBhcmVudEVsZW1lbnQodGhpcy5wcm9wcy5wYXJlbnRTZWxlY3Rvcik7XG4gICAgICByZXR1cm4geyBwcmV2UGFyZW50OiBwcmV2UGFyZW50LCBuZXh0UGFyZW50OiBuZXh0UGFyZW50IH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBfLCBzbmFwc2hvdCkge1xuICAgICAgaWYgKCFfc2FmZUhUTUxFbGVtZW50LmNhblVzZURPTSkgcmV0dXJuO1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaXNPcGVuID0gX3Byb3BzLmlzT3BlbixcbiAgICAgICAgICBwb3J0YWxDbGFzc05hbWUgPSBfcHJvcHMucG9ydGFsQ2xhc3NOYW1lO1xuXG5cbiAgICAgIGlmIChwcmV2UHJvcHMucG9ydGFsQ2xhc3NOYW1lICE9PSBwb3J0YWxDbGFzc05hbWUpIHtcbiAgICAgICAgdGhpcy5ub2RlLmNsYXNzTmFtZSA9IHBvcnRhbENsYXNzTmFtZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZQYXJlbnQgPSBzbmFwc2hvdC5wcmV2UGFyZW50LFxuICAgICAgICAgIG5leHRQYXJlbnQgPSBzbmFwc2hvdC5uZXh0UGFyZW50O1xuXG4gICAgICBpZiAobmV4dFBhcmVudCAhPT0gcHJldlBhcmVudCkge1xuICAgICAgICBwcmV2UGFyZW50LnJlbW92ZUNoaWxkKHRoaXMubm9kZSk7XG4gICAgICAgIG5leHRQYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5ub2RlKTtcbiAgICAgIH1cblxuICAgICAgLy8gU3RvcCB1bm5lY2Vzc2FyeSByZW5kZXJzIGlmIG1vZGFsIGlzIHJlbWFpbmluZyBjbG9zZWRcbiAgICAgIGlmICghcHJldlByb3BzLmlzT3BlbiAmJiAhaXNPcGVuKSByZXR1cm47XG5cbiAgICAgICFpc1JlYWN0MTYgJiYgdGhpcy5yZW5kZXJQb3J0YWwodGhpcy5wcm9wcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKCFfc2FmZUhUTUxFbGVtZW50LmNhblVzZURPTSB8fCAhdGhpcy5ub2RlIHx8ICF0aGlzLnBvcnRhbCkgcmV0dXJuO1xuXG4gICAgICB2YXIgc3RhdGUgPSB0aGlzLnBvcnRhbC5zdGF0ZTtcbiAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgdmFyIGNsb3Nlc0F0ID0gc3RhdGUuaXNPcGVuICYmIHRoaXMucHJvcHMuY2xvc2VUaW1lb3V0TVMgJiYgKHN0YXRlLmNsb3Nlc0F0IHx8IG5vdyArIHRoaXMucHJvcHMuY2xvc2VUaW1lb3V0TVMpO1xuXG4gICAgICBpZiAoY2xvc2VzQXQpIHtcbiAgICAgICAgaWYgKCFzdGF0ZS5iZWZvcmVDbG9zZSkge1xuICAgICAgICAgIHRoaXMucG9ydGFsLmNsb3NlV2l0aFRpbWVvdXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldFRpbWVvdXQodGhpcy5yZW1vdmVQb3J0YWwsIGNsb3Nlc0F0IC0gbm93KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVtb3ZlUG9ydGFsKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICBpZiAoIV9zYWZlSFRNTEVsZW1lbnQuY2FuVXNlRE9NIHx8ICFpc1JlYWN0MTYpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5ub2RlICYmIGlzUmVhY3QxNikge1xuICAgICAgICB0aGlzLm5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY3JlYXRlUG9ydGFsID0gZ2V0Q3JlYXRlUG9ydGFsKCk7XG4gICAgICByZXR1cm4gY3JlYXRlUG9ydGFsKF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Nb2RhbFBvcnRhbDIuZGVmYXVsdCwgX2V4dGVuZHMoe1xuICAgICAgICByZWY6IHRoaXMucG9ydGFsUmVmLFxuICAgICAgICBkZWZhdWx0U3R5bGVzOiBNb2RhbC5kZWZhdWx0U3R5bGVzXG4gICAgICB9LCB0aGlzLnByb3BzKSksIHRoaXMubm9kZSk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwic2V0QXBwRWxlbWVudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRBcHBFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIGFyaWFBcHBIaWRlci5zZXRFbGVtZW50KGVsZW1lbnQpO1xuICAgIH1cblxuICAgIC8qIGVzbGludC1kaXNhYmxlIHJlYWN0L25vLXVudXNlZC1wcm9wLXR5cGVzICovXG5cbiAgICAvKiBlc2xpbnQtZW5hYmxlIHJlYWN0L25vLXVudXNlZC1wcm9wLXR5cGVzICovXG5cbiAgfV0pO1xuXG4gIHJldHVybiBNb2RhbDtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbk1vZGFsLnByb3BUeXBlcyA9IHtcbiAgaXNPcGVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wuaXNSZXF1aXJlZCxcbiAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc2hhcGUoe1xuICAgIGNvbnRlbnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAgIG92ZXJsYXk6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XG4gIH0pLFxuICBwb3J0YWxDbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBib2R5T3BlbkNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGh0bWxPcGVuQ2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMyLmRlZmF1bHQuc2hhcGUoe1xuICAgIGJhc2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgYWZ0ZXJPcGVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGJlZm9yZUNsb3NlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZy5pc1JlcXVpcmVkXG4gIH0pXSksXG4gIG92ZXJsYXlDbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5zaGFwZSh7XG4gICAgYmFzZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBhZnRlck9wZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgYmVmb3JlQ2xvc2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLmlzUmVxdWlyZWRcbiAgfSldKSxcbiAgYXBwRWxlbWVudDogX3Byb3BUeXBlczIuZGVmYXVsdC5pbnN0YW5jZU9mKF9zYWZlSFRNTEVsZW1lbnQyLmRlZmF1bHQpLFxuICBvbkFmdGVyT3BlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBvblJlcXVlc3RDbG9zZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBjbG9zZVRpbWVvdXRNUzogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIGFyaWFIaWRlQXBwOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHNob3VsZEZvY3VzQWZ0ZXJSZW5kZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgc2hvdWxkQ2xvc2VPbk92ZXJsYXlDbGljazogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBzaG91bGRSZXR1cm5Gb2N1c0FmdGVyQ2xvc2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgcHJldmVudFNjcm9sbDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBwYXJlbnRTZWxlY3RvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBhcmlhOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgZGF0YTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIHJvbGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBjb250ZW50TGFiZWw6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBzaG91bGRDbG9zZU9uRXNjOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIG92ZXJsYXlSZWY6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgY29udGVudFJlZjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBpZDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIG92ZXJsYXlFbGVtZW50OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGNvbnRlbnRFbGVtZW50OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmNcbn07XG5Nb2RhbC5kZWZhdWx0UHJvcHMgPSB7XG4gIGlzT3BlbjogZmFsc2UsXG4gIHBvcnRhbENsYXNzTmFtZTogcG9ydGFsQ2xhc3NOYW1lLFxuICBib2R5T3BlbkNsYXNzTmFtZTogYm9keU9wZW5DbGFzc05hbWUsXG4gIHJvbGU6IFwiZGlhbG9nXCIsXG4gIGFyaWFIaWRlQXBwOiB0cnVlLFxuICBjbG9zZVRpbWVvdXRNUzogMCxcbiAgc2hvdWxkRm9jdXNBZnRlclJlbmRlcjogdHJ1ZSxcbiAgc2hvdWxkQ2xvc2VPbkVzYzogdHJ1ZSxcbiAgc2hvdWxkQ2xvc2VPbk92ZXJsYXlDbGljazogdHJ1ZSxcbiAgc2hvdWxkUmV0dXJuRm9jdXNBZnRlckNsb3NlOiB0cnVlLFxuICBwcmV2ZW50U2Nyb2xsOiBmYWxzZSxcbiAgcGFyZW50U2VsZWN0b3I6IGZ1bmN0aW9uIHBhcmVudFNlbGVjdG9yKCkge1xuICAgIHJldHVybiBkb2N1bWVudC5ib2R5O1xuICB9LFxuICBvdmVybGF5RWxlbWVudDogZnVuY3Rpb24gb3ZlcmxheUVsZW1lbnQocHJvcHMsIGNvbnRlbnRFbCkge1xuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgIFwiZGl2XCIsXG4gICAgICBwcm9wcyxcbiAgICAgIGNvbnRlbnRFbFxuICAgICk7XG4gIH0sXG4gIGNvbnRlbnRFbGVtZW50OiBmdW5jdGlvbiBjb250ZW50RWxlbWVudChwcm9wcywgY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBcImRpdlwiLFxuICAgICAgcHJvcHMsXG4gICAgICBjaGlsZHJlblxuICAgICk7XG4gIH1cbn07XG5Nb2RhbC5kZWZhdWx0U3R5bGVzID0ge1xuICBvdmVybGF5OiB7XG4gICAgcG9zaXRpb246IFwiZml4ZWRcIixcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgYmFja2dyb3VuZENvbG9yOiBcInJnYmEoMjU1LCAyNTUsIDI1NSwgMC43NSlcIlxuICB9LFxuICBjb250ZW50OiB7XG4gICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICB0b3A6IFwiNDBweFwiLFxuICAgIGxlZnQ6IFwiNDBweFwiLFxuICAgIHJpZ2h0OiBcIjQwcHhcIixcbiAgICBib3R0b206IFwiNDBweFwiLFxuICAgIGJvcmRlcjogXCIxcHggc29saWQgI2NjY1wiLFxuICAgIGJhY2tncm91bmQ6IFwiI2ZmZlwiLFxuICAgIG92ZXJmbG93OiBcImF1dG9cIixcbiAgICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogXCJ0b3VjaFwiLFxuICAgIGJvcmRlclJhZGl1czogXCI0cHhcIixcbiAgICBvdXRsaW5lOiBcIm5vbmVcIixcbiAgICBwYWRkaW5nOiBcIjIwcHhcIlxuICB9XG59O1xuXG5cbigwLCBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0LnBvbHlmaWxsKShNb2RhbCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE1vZGFsOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZShcInByb3AtdHlwZXNcIik7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfZm9jdXNNYW5hZ2VyID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvZm9jdXNNYW5hZ2VyXCIpO1xuXG52YXIgZm9jdXNNYW5hZ2VyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2ZvY3VzTWFuYWdlcik7XG5cbnZhciBfc2NvcGVUYWIgPSByZXF1aXJlKFwiLi4vaGVscGVycy9zY29wZVRhYlwiKTtcblxudmFyIF9zY29wZVRhYjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zY29wZVRhYik7XG5cbnZhciBfYXJpYUFwcEhpZGVyID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvYXJpYUFwcEhpZGVyXCIpO1xuXG52YXIgYXJpYUFwcEhpZGVyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2FyaWFBcHBIaWRlcik7XG5cbnZhciBfY2xhc3NMaXN0ID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvY2xhc3NMaXN0XCIpO1xuXG52YXIgY2xhc3NMaXN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2NsYXNzTGlzdCk7XG5cbnZhciBfc2FmZUhUTUxFbGVtZW50ID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvc2FmZUhUTUxFbGVtZW50XCIpO1xuXG52YXIgX3NhZmVIVE1MRWxlbWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zYWZlSFRNTEVsZW1lbnQpO1xuXG52YXIgX3BvcnRhbE9wZW5JbnN0YW5jZXMgPSByZXF1aXJlKFwiLi4vaGVscGVycy9wb3J0YWxPcGVuSW5zdGFuY2VzXCIpO1xuXG52YXIgX3BvcnRhbE9wZW5JbnN0YW5jZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9ydGFsT3Blbkluc3RhbmNlcyk7XG5cbnJlcXVpcmUoXCIuLi9oZWxwZXJzL2JvZHlUcmFwXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8vIHNvIHRoYXQgb3VyIENTUyBpcyBzdGF0aWNhbGx5IGFuYWx5emFibGVcbnZhciBDTEFTU19OQU1FUyA9IHtcbiAgb3ZlcmxheTogXCJSZWFjdE1vZGFsX19PdmVybGF5XCIsXG4gIGNvbnRlbnQ6IFwiUmVhY3RNb2RhbF9fQ29udGVudFwiXG59O1xuXG52YXIgVEFCX0tFWSA9IDk7XG52YXIgRVNDX0tFWSA9IDI3O1xuXG52YXIgYXJpYUhpZGRlbkluc3RhbmNlcyA9IDA7XG5cbnZhciBNb2RhbFBvcnRhbCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNb2RhbFBvcnRhbCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTW9kYWxQb3J0YWwocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9kYWxQb3J0YWwpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKE1vZGFsUG9ydGFsLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTW9kYWxQb3J0YWwpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5zZXRPdmVybGF5UmVmID0gZnVuY3Rpb24gKG92ZXJsYXkpIHtcbiAgICAgIF90aGlzLm92ZXJsYXkgPSBvdmVybGF5O1xuICAgICAgX3RoaXMucHJvcHMub3ZlcmxheVJlZiAmJiBfdGhpcy5wcm9wcy5vdmVybGF5UmVmKG92ZXJsYXkpO1xuICAgIH07XG5cbiAgICBfdGhpcy5zZXRDb250ZW50UmVmID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICAgIF90aGlzLmNvbnRlbnQgPSBjb250ZW50O1xuICAgICAgX3RoaXMucHJvcHMuY29udGVudFJlZiAmJiBfdGhpcy5wcm9wcy5jb250ZW50UmVmKGNvbnRlbnQpO1xuICAgIH07XG5cbiAgICBfdGhpcy5hZnRlckNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYXBwRWxlbWVudCA9IF90aGlzJHByb3BzLmFwcEVsZW1lbnQsXG4gICAgICAgICAgYXJpYUhpZGVBcHAgPSBfdGhpcyRwcm9wcy5hcmlhSGlkZUFwcCxcbiAgICAgICAgICBodG1sT3BlbkNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmh0bWxPcGVuQ2xhc3NOYW1lLFxuICAgICAgICAgIGJvZHlPcGVuQ2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuYm9keU9wZW5DbGFzc05hbWU7XG5cbiAgICAgIC8vIFJlbW92ZSBjbGFzc2VzLlxuXG4gICAgICBib2R5T3BlbkNsYXNzTmFtZSAmJiBjbGFzc0xpc3QucmVtb3ZlKGRvY3VtZW50LmJvZHksIGJvZHlPcGVuQ2xhc3NOYW1lKTtcblxuICAgICAgaHRtbE9wZW5DbGFzc05hbWUgJiYgY2xhc3NMaXN0LnJlbW92ZShkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImh0bWxcIilbMF0sIGh0bWxPcGVuQ2xhc3NOYW1lKTtcblxuICAgICAgLy8gUmVzZXQgYXJpYS1oaWRkZW4gYXR0cmlidXRlIGlmIGFsbCBtb2RhbHMgaGF2ZSBiZWVuIHJlbW92ZWRcbiAgICAgIGlmIChhcmlhSGlkZUFwcCAmJiBhcmlhSGlkZGVuSW5zdGFuY2VzID4gMCkge1xuICAgICAgICBhcmlhSGlkZGVuSW5zdGFuY2VzIC09IDE7XG5cbiAgICAgICAgaWYgKGFyaWFIaWRkZW5JbnN0YW5jZXMgPT09IDApIHtcbiAgICAgICAgICBhcmlhQXBwSGlkZXIuc2hvdyhhcHBFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMuc2hvdWxkRm9jdXNBZnRlclJlbmRlcikge1xuICAgICAgICBpZiAoX3RoaXMucHJvcHMuc2hvdWxkUmV0dXJuRm9jdXNBZnRlckNsb3NlKSB7XG4gICAgICAgICAgZm9jdXNNYW5hZ2VyLnJldHVybkZvY3VzKF90aGlzLnByb3BzLnByZXZlbnRTY3JvbGwpO1xuICAgICAgICAgIGZvY3VzTWFuYWdlci50ZWFyZG93blNjb3BlZEZvY3VzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9jdXNNYW5hZ2VyLnBvcFdpdGhvdXRGb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkFmdGVyQ2xvc2UpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25BZnRlckNsb3NlKCk7XG4gICAgICB9XG5cbiAgICAgIF9wb3J0YWxPcGVuSW5zdGFuY2VzMi5kZWZhdWx0LmRlcmVnaXN0ZXIoX3RoaXMpO1xuICAgIH07XG5cbiAgICBfdGhpcy5vcGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuYmVmb3JlT3BlbigpO1xuICAgICAgaWYgKF90aGlzLnN0YXRlLmFmdGVyT3BlbiAmJiBfdGhpcy5zdGF0ZS5iZWZvcmVDbG9zZSkge1xuICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMuY2xvc2VUaW1lcik7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHsgYmVmb3JlQ2xvc2U6IGZhbHNlIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKF90aGlzLnByb3BzLnNob3VsZEZvY3VzQWZ0ZXJSZW5kZXIpIHtcbiAgICAgICAgICBmb2N1c01hbmFnZXIuc2V0dXBTY29wZWRGb2N1cyhfdGhpcy5ub2RlKTtcbiAgICAgICAgICBmb2N1c01hbmFnZXIubWFya0ZvckZvY3VzTGF0ZXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKHsgaXNPcGVuOiB0cnVlIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGFmdGVyT3BlbjogdHJ1ZSB9KTtcblxuICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5pc09wZW4gJiYgX3RoaXMucHJvcHMub25BZnRlck9wZW4pIHtcbiAgICAgICAgICAgIF90aGlzLnByb3BzLm9uQWZ0ZXJPcGVuKHtcbiAgICAgICAgICAgICAgb3ZlcmxheUVsOiBfdGhpcy5vdmVybGF5LFxuICAgICAgICAgICAgICBjb250ZW50RWw6IF90aGlzLmNvbnRlbnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLmNsb3NlVGltZW91dE1TID4gMCkge1xuICAgICAgICBfdGhpcy5jbG9zZVdpdGhUaW1lb3V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5jbG9zZVdpdGhvdXRUaW1lb3V0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmZvY3VzQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5jb250ZW50ICYmICFfdGhpcy5jb250ZW50SGFzRm9jdXMoKSAmJiBfdGhpcy5jb250ZW50LmZvY3VzKHsgcHJldmVudFNjcm9sbDogdHJ1ZSB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuY2xvc2VXaXRoVGltZW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjbG9zZXNBdCA9IERhdGUubm93KCkgKyBfdGhpcy5wcm9wcy5jbG9zZVRpbWVvdXRNUztcbiAgICAgIF90aGlzLnNldFN0YXRlKHsgYmVmb3JlQ2xvc2U6IHRydWUsIGNsb3Nlc0F0OiBjbG9zZXNBdCB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLmNsb3NlVGltZXIgPSBzZXRUaW1lb3V0KF90aGlzLmNsb3NlV2l0aG91dFRpbWVvdXQsIF90aGlzLnN0YXRlLmNsb3Nlc0F0IC0gRGF0ZS5ub3coKSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuY2xvc2VXaXRob3V0VGltZW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgYmVmb3JlQ2xvc2U6IGZhbHNlLFxuICAgICAgICBpc09wZW46IGZhbHNlLFxuICAgICAgICBhZnRlck9wZW46IGZhbHNlLFxuICAgICAgICBjbG9zZXNBdDogbnVsbFxuICAgICAgfSwgX3RoaXMuYWZ0ZXJDbG9zZSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUtleURvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSBUQUJfS0VZKSB7XG4gICAgICAgICgwLCBfc2NvcGVUYWIyLmRlZmF1bHQpKF90aGlzLmNvbnRlbnQsIGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnByb3BzLnNob3VsZENsb3NlT25Fc2MgJiYgZXZlbnQua2V5Q29kZSA9PT0gRVNDX0tFWSkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgX3RoaXMucmVxdWVzdENsb3NlKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlT3ZlcmxheU9uQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5zaG91bGRDbG9zZSA9PT0gbnVsbCkge1xuICAgICAgICBfdGhpcy5zaG91bGRDbG9zZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5zaG91bGRDbG9zZSAmJiBfdGhpcy5wcm9wcy5zaG91bGRDbG9zZU9uT3ZlcmxheUNsaWNrKSB7XG4gICAgICAgIGlmIChfdGhpcy5vd25lckhhbmRsZXNDbG9zZSgpKSB7XG4gICAgICAgICAgX3RoaXMucmVxdWVzdENsb3NlKGV2ZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5mb2N1c0NvbnRlbnQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgX3RoaXMuc2hvdWxkQ2xvc2UgPSBudWxsO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVDb250ZW50T25Nb3VzZVVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2hvdWxkQ2xvc2UgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlT3ZlcmxheU9uTW91c2VEb3duID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoIV90aGlzLnByb3BzLnNob3VsZENsb3NlT25PdmVybGF5Q2xpY2sgJiYgZXZlbnQudGFyZ2V0ID09IF90aGlzLm92ZXJsYXkpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQ29udGVudE9uQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zaG91bGRDbG9zZSA9IGZhbHNlO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVDb250ZW50T25Nb3VzZURvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zaG91bGRDbG9zZSA9IGZhbHNlO1xuICAgIH07XG5cbiAgICBfdGhpcy5yZXF1ZXN0Q2xvc2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJldHVybiBfdGhpcy5vd25lckhhbmRsZXNDbG9zZSgpICYmIF90aGlzLnByb3BzLm9uUmVxdWVzdENsb3NlKGV2ZW50KTtcbiAgICB9O1xuXG4gICAgX3RoaXMub3duZXJIYW5kbGVzQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMub25SZXF1ZXN0Q2xvc2U7XG4gICAgfTtcblxuICAgIF90aGlzLnNob3VsZEJlQ2xvc2VkID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICFfdGhpcy5zdGF0ZS5pc09wZW4gJiYgIV90aGlzLnN0YXRlLmJlZm9yZUNsb3NlO1xuICAgIH07XG5cbiAgICBfdGhpcy5jb250ZW50SGFzRm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gX3RoaXMuY29udGVudCB8fCBfdGhpcy5jb250ZW50LmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpO1xuICAgIH07XG5cbiAgICBfdGhpcy5idWlsZENsYXNzTmFtZSA9IGZ1bmN0aW9uICh3aGljaCwgYWRkaXRpb25hbCkge1xuICAgICAgdmFyIGNsYXNzTmFtZXMgPSAodHlwZW9mIGFkZGl0aW9uYWwgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihhZGRpdGlvbmFsKSkgPT09IFwib2JqZWN0XCIgPyBhZGRpdGlvbmFsIDoge1xuICAgICAgICBiYXNlOiBDTEFTU19OQU1FU1t3aGljaF0sXG4gICAgICAgIGFmdGVyT3BlbjogQ0xBU1NfTkFNRVNbd2hpY2hdICsgXCItLWFmdGVyLW9wZW5cIixcbiAgICAgICAgYmVmb3JlQ2xvc2U6IENMQVNTX05BTUVTW3doaWNoXSArIFwiLS1iZWZvcmUtY2xvc2VcIlxuICAgICAgfTtcbiAgICAgIHZhciBjbGFzc05hbWUgPSBjbGFzc05hbWVzLmJhc2U7XG4gICAgICBpZiAoX3RoaXMuc3RhdGUuYWZ0ZXJPcGVuKSB7XG4gICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZSArIFwiIFwiICsgY2xhc3NOYW1lcy5hZnRlck9wZW47XG4gICAgICB9XG4gICAgICBpZiAoX3RoaXMuc3RhdGUuYmVmb3JlQ2xvc2UpIHtcbiAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lICsgXCIgXCIgKyBjbGFzc05hbWVzLmJlZm9yZUNsb3NlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHR5cGVvZiBhZGRpdGlvbmFsID09PSBcInN0cmluZ1wiICYmIGFkZGl0aW9uYWwgPyBjbGFzc05hbWUgKyBcIiBcIiArIGFkZGl0aW9uYWwgOiBjbGFzc05hbWU7XG4gICAgfTtcblxuICAgIF90aGlzLmF0dHJpYnV0ZXNGcm9tT2JqZWN0ID0gZnVuY3Rpb24gKHByZWZpeCwgaXRlbXMpIHtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhpdGVtcykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIG5hbWUpIHtcbiAgICAgICAgYWNjW3ByZWZpeCArIFwiLVwiICsgbmFtZV0gPSBpdGVtc1tuYW1lXTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sIHt9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBhZnRlck9wZW46IGZhbHNlLFxuICAgICAgYmVmb3JlQ2xvc2U6IGZhbHNlXG4gICAgfTtcblxuICAgIF90aGlzLnNob3VsZENsb3NlID0gbnVsbDtcbiAgICBfdGhpcy5tb3ZlRnJvbUNvbnRlbnRUb092ZXJsYXkgPSBudWxsO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNb2RhbFBvcnRhbCwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5pc09wZW4pIHtcbiAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgaWYgKHByZXZQcm9wcy5ib2R5T3BlbkNsYXNzTmFtZSAhPT0gdGhpcy5wcm9wcy5ib2R5T3BlbkNsYXNzTmFtZSkge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgY29uc29sZS53YXJuKCdSZWFjdC1Nb2RhbDogXCJib2R5T3BlbkNsYXNzTmFtZVwiIHByb3AgaGFzIGJlZW4gbW9kaWZpZWQuICcgKyBcIlRoaXMgbWF5IGNhdXNlIHVuZXhwZWN0ZWQgYmVoYXZpb3Igd2hlbiBtdWx0aXBsZSBtb2RhbHMgYXJlIG9wZW4uXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmV2UHJvcHMuaHRtbE9wZW5DbGFzc05hbWUgIT09IHRoaXMucHJvcHMuaHRtbE9wZW5DbGFzc05hbWUpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgIGNvbnNvbGUud2FybignUmVhY3QtTW9kYWw6IFwiaHRtbE9wZW5DbGFzc05hbWVcIiBwcm9wIGhhcyBiZWVuIG1vZGlmaWVkLiAnICsgXCJUaGlzIG1heSBjYXVzZSB1bmV4cGVjdGVkIGJlaGF2aW9yIHdoZW4gbXVsdGlwbGUgbW9kYWxzIGFyZSBvcGVuLlwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5wcm9wcy5pc09wZW4gJiYgIXByZXZQcm9wcy5pc09wZW4pIHtcbiAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLnByb3BzLmlzT3BlbiAmJiBwcmV2UHJvcHMuaXNPcGVuKSB7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgIH1cblxuICAgICAgLy8gRm9jdXMgb25seSBuZWVkcyB0byBiZSBzZXQgb25jZSB3aGVuIHRoZSBtb2RhbCBpcyBiZWluZyBvcGVuZWRcbiAgICAgIGlmICh0aGlzLnByb3BzLnNob3VsZEZvY3VzQWZ0ZXJSZW5kZXIgJiYgdGhpcy5zdGF0ZS5pc09wZW4gJiYgIXByZXZTdGF0ZS5pc09wZW4pIHtcbiAgICAgICAgdGhpcy5mb2N1c0NvbnRlbnQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5pc09wZW4pIHtcbiAgICAgICAgdGhpcy5hZnRlckNsb3NlKCk7XG4gICAgICB9XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5jbG9zZVRpbWVyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYmVmb3JlT3BlblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBiZWZvcmVPcGVuKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYXBwRWxlbWVudCA9IF9wcm9wcy5hcHBFbGVtZW50LFxuICAgICAgICAgIGFyaWFIaWRlQXBwID0gX3Byb3BzLmFyaWFIaWRlQXBwLFxuICAgICAgICAgIGh0bWxPcGVuQ2xhc3NOYW1lID0gX3Byb3BzLmh0bWxPcGVuQ2xhc3NOYW1lLFxuICAgICAgICAgIGJvZHlPcGVuQ2xhc3NOYW1lID0gX3Byb3BzLmJvZHlPcGVuQ2xhc3NOYW1lO1xuXG4gICAgICAvLyBBZGQgY2xhc3Nlcy5cblxuICAgICAgYm9keU9wZW5DbGFzc05hbWUgJiYgY2xhc3NMaXN0LmFkZChkb2N1bWVudC5ib2R5LCBib2R5T3BlbkNsYXNzTmFtZSk7XG5cbiAgICAgIGh0bWxPcGVuQ2xhc3NOYW1lICYmIGNsYXNzTGlzdC5hZGQoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJodG1sXCIpWzBdLCBodG1sT3BlbkNsYXNzTmFtZSk7XG5cbiAgICAgIGlmIChhcmlhSGlkZUFwcCkge1xuICAgICAgICBhcmlhSGlkZGVuSW5zdGFuY2VzICs9IDE7XG4gICAgICAgIGFyaWFBcHBIaWRlci5oaWRlKGFwcEVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBfcG9ydGFsT3Blbkluc3RhbmNlczIuZGVmYXVsdC5yZWdpc3Rlcih0aGlzKTtcbiAgICB9XG5cbiAgICAvLyBEb24ndCBzdGVhbCBmb2N1cyBmcm9tIGlubmVyIGVsZW1lbnRzXG5cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGlkID0gX3Byb3BzMi5pZCxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMyLmNsYXNzTmFtZSxcbiAgICAgICAgICBvdmVybGF5Q2xhc3NOYW1lID0gX3Byb3BzMi5vdmVybGF5Q2xhc3NOYW1lLFxuICAgICAgICAgIGRlZmF1bHRTdHlsZXMgPSBfcHJvcHMyLmRlZmF1bHRTdHlsZXMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMyLmNoaWxkcmVuO1xuXG4gICAgICB2YXIgY29udGVudFN0eWxlcyA9IGNsYXNzTmFtZSA/IHt9IDogZGVmYXVsdFN0eWxlcy5jb250ZW50O1xuICAgICAgdmFyIG92ZXJsYXlTdHlsZXMgPSBvdmVybGF5Q2xhc3NOYW1lID8ge30gOiBkZWZhdWx0U3R5bGVzLm92ZXJsYXk7XG5cbiAgICAgIGlmICh0aGlzLnNob3VsZEJlQ2xvc2VkKCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBvdmVybGF5UHJvcHMgPSB7XG4gICAgICAgIHJlZjogdGhpcy5zZXRPdmVybGF5UmVmLFxuICAgICAgICBjbGFzc05hbWU6IHRoaXMuYnVpbGRDbGFzc05hbWUoXCJvdmVybGF5XCIsIG92ZXJsYXlDbGFzc05hbWUpLFxuICAgICAgICBzdHlsZTogX2V4dGVuZHMoe30sIG92ZXJsYXlTdHlsZXMsIHRoaXMucHJvcHMuc3R5bGUub3ZlcmxheSksXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlT3ZlcmxheU9uQ2xpY2ssXG4gICAgICAgIG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU92ZXJsYXlPbk1vdXNlRG93blxuICAgICAgfTtcblxuICAgICAgdmFyIGNvbnRlbnRQcm9wcyA9IF9leHRlbmRzKHtcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICByZWY6IHRoaXMuc2V0Q29udGVudFJlZixcbiAgICAgICAgc3R5bGU6IF9leHRlbmRzKHt9LCBjb250ZW50U3R5bGVzLCB0aGlzLnByb3BzLnN0eWxlLmNvbnRlbnQpLFxuICAgICAgICBjbGFzc05hbWU6IHRoaXMuYnVpbGRDbGFzc05hbWUoXCJjb250ZW50XCIsIGNsYXNzTmFtZSksXG4gICAgICAgIHRhYkluZGV4OiBcIi0xXCIsXG4gICAgICAgIG9uS2V5RG93bjogdGhpcy5oYW5kbGVLZXlEb3duLFxuICAgICAgICBvbk1vdXNlRG93bjogdGhpcy5oYW5kbGVDb250ZW50T25Nb3VzZURvd24sXG4gICAgICAgIG9uTW91c2VVcDogdGhpcy5oYW5kbGVDb250ZW50T25Nb3VzZVVwLFxuICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNvbnRlbnRPbkNsaWNrLFxuICAgICAgICByb2xlOiB0aGlzLnByb3BzLnJvbGUsXG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiB0aGlzLnByb3BzLmNvbnRlbnRMYWJlbFxuICAgICAgfSwgdGhpcy5hdHRyaWJ1dGVzRnJvbU9iamVjdChcImFyaWFcIiwgX2V4dGVuZHMoeyBtb2RhbDogdHJ1ZSB9LCB0aGlzLnByb3BzLmFyaWEpKSwgdGhpcy5hdHRyaWJ1dGVzRnJvbU9iamVjdChcImRhdGFcIiwgdGhpcy5wcm9wcy5kYXRhIHx8IHt9KSwge1xuICAgICAgICBcImRhdGEtdGVzdGlkXCI6IHRoaXMucHJvcHMudGVzdElkXG4gICAgICB9KTtcblxuICAgICAgdmFyIGNvbnRlbnRFbGVtZW50ID0gdGhpcy5wcm9wcy5jb250ZW50RWxlbWVudChjb250ZW50UHJvcHMsIGNoaWxkcmVuKTtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLm92ZXJsYXlFbGVtZW50KG92ZXJsYXlQcm9wcywgY29udGVudEVsZW1lbnQpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNb2RhbFBvcnRhbDtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbk1vZGFsUG9ydGFsLmRlZmF1bHRQcm9wcyA9IHtcbiAgc3R5bGU6IHtcbiAgICBvdmVybGF5OiB7fSxcbiAgICBjb250ZW50OiB7fVxuICB9LFxuICBkZWZhdWx0U3R5bGVzOiB7fVxufTtcbk1vZGFsUG9ydGFsLnByb3BUeXBlcyA9IHtcbiAgaXNPcGVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wuaXNSZXF1aXJlZCxcbiAgZGVmYXVsdFN0eWxlczogX3Byb3BUeXBlczIuZGVmYXVsdC5zaGFwZSh7XG4gICAgY29udGVudDogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gICAgb3ZlcmxheTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3RcbiAgfSksXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnNoYXBlKHtcbiAgICBjb250ZW50OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgICBvdmVybGF5OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdFxuICB9KSxcbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XSksXG4gIG92ZXJsYXlDbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3RdKSxcbiAgYm9keU9wZW5DbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBodG1sT3BlbkNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGFyaWFIaWRlQXBwOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIGFwcEVsZW1lbnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuaW5zdGFuY2VPZihfc2FmZUhUTUxFbGVtZW50Mi5kZWZhdWx0KSxcbiAgb25BZnRlck9wZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgb25BZnRlckNsb3NlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIG9uUmVxdWVzdENsb3NlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGNsb3NlVGltZW91dE1TOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgc2hvdWxkRm9jdXNBZnRlclJlbmRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBzaG91bGRDbG9zZU9uT3ZlcmxheUNsaWNrOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHNob3VsZFJldHVybkZvY3VzQWZ0ZXJDbG9zZTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBwcmV2ZW50U2Nyb2xsOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHJvbGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBjb250ZW50TGFiZWw6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBhcmlhOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgZGF0YTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIHNob3VsZENsb3NlT25Fc2M6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgb3ZlcmxheVJlZjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBjb250ZW50UmVmOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGlkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgb3ZlcmxheUVsZW1lbnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgY29udGVudEVsZW1lbnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgdGVzdElkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IE1vZGFsUG9ydGFsO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaGFuZGxlQmx1ciA9IGhhbmRsZUJsdXI7XG5leHBvcnRzLmhhbmRsZUZvY3VzID0gaGFuZGxlRm9jdXM7XG5leHBvcnRzLm1hcmtGb3JGb2N1c0xhdGVyID0gbWFya0ZvckZvY3VzTGF0ZXI7XG5leHBvcnRzLnJldHVybkZvY3VzID0gcmV0dXJuRm9jdXM7XG5leHBvcnRzLnBvcFdpdGhvdXRGb2N1cyA9IHBvcFdpdGhvdXRGb2N1cztcbmV4cG9ydHMuc2V0dXBTY29wZWRGb2N1cyA9IHNldHVwU2NvcGVkRm9jdXM7XG5leHBvcnRzLnRlYXJkb3duU2NvcGVkRm9jdXMgPSB0ZWFyZG93blNjb3BlZEZvY3VzO1xuXG52YXIgX3RhYmJhYmxlID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdGFiYmFibGVcIik7XG5cbnZhciBfdGFiYmFibGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdGFiYmFibGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZm9jdXNMYXRlckVsZW1lbnRzID0gW107XG52YXIgbW9kYWxFbGVtZW50ID0gbnVsbDtcbnZhciBuZWVkVG9Gb2N1cyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBoYW5kbGVCbHVyKCkge1xuICBuZWVkVG9Gb2N1cyA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUZvY3VzKCkge1xuICBpZiAobmVlZFRvRm9jdXMpIHtcbiAgICBuZWVkVG9Gb2N1cyA9IGZhbHNlO1xuICAgIGlmICghbW9kYWxFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIG5lZWQgdG8gc2VlIGhvdyBqUXVlcnkgc2hpbXMgZG9jdW1lbnQub24oJ2ZvY3VzaW4nKSBzbyB3ZSBkb24ndCBuZWVkIHRoZVxuICAgIC8vIHNldFRpbWVvdXQsIGZpcmVmb3ggZG9lc24ndCBzdXBwb3J0IGZvY3VzaW4sIGlmIGl0IGRpZCwgd2UgY291bGQgZm9jdXNcbiAgICAvLyB0aGUgZWxlbWVudCBvdXRzaWRlIG9mIGEgc2V0VGltZW91dC4gU2lkZS1lZmZlY3Qgb2YgdGhpcyBpbXBsZW1lbnRhdGlvblxuICAgIC8vIGlzIHRoYXQgdGhlIGRvY3VtZW50LmJvZHkgZ2V0cyBmb2N1cywgYW5kIHRoZW4gd2UgZm9jdXMgb3VyIGVsZW1lbnQgcmlnaHRcbiAgICAvLyBhZnRlciwgc2VlbXMgZmluZS5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChtb2RhbEVsZW1lbnQuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGVsID0gKDAsIF90YWJiYWJsZTIuZGVmYXVsdCkobW9kYWxFbGVtZW50KVswXSB8fCBtb2RhbEVsZW1lbnQ7XG4gICAgICBlbC5mb2N1cygpO1xuICAgIH0sIDApO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtGb3JGb2N1c0xhdGVyKCkge1xuICBmb2N1c0xhdGVyRWxlbWVudHMucHVzaChkb2N1bWVudC5hY3RpdmVFbGVtZW50KTtcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuZnVuY3Rpb24gcmV0dXJuRm9jdXMoKSB7XG4gIHZhciBwcmV2ZW50U2Nyb2xsID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICB2YXIgdG9Gb2N1cyA9IG51bGw7XG4gIHRyeSB7XG4gICAgaWYgKGZvY3VzTGF0ZXJFbGVtZW50cy5sZW5ndGggIT09IDApIHtcbiAgICAgIHRvRm9jdXMgPSBmb2N1c0xhdGVyRWxlbWVudHMucG9wKCk7XG4gICAgICB0b0ZvY3VzLmZvY3VzKHsgcHJldmVudFNjcm9sbDogcHJldmVudFNjcm9sbCB9KTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS53YXJuKFtcIllvdSB0cmllZCB0byByZXR1cm4gZm9jdXMgdG9cIiwgdG9Gb2N1cywgXCJidXQgaXQgaXMgbm90IGluIHRoZSBET00gYW55bW9yZVwiXS5qb2luKFwiIFwiKSk7XG4gIH1cbn1cbi8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuXG5mdW5jdGlvbiBwb3BXaXRob3V0Rm9jdXMoKSB7XG4gIGZvY3VzTGF0ZXJFbGVtZW50cy5sZW5ndGggPiAwICYmIGZvY3VzTGF0ZXJFbGVtZW50cy5wb3AoKTtcbn1cblxuZnVuY3Rpb24gc2V0dXBTY29wZWRGb2N1cyhlbGVtZW50KSB7XG4gIG1vZGFsRWxlbWVudCA9IGVsZW1lbnQ7XG5cbiAgaWYgKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIGhhbmRsZUJsdXIsIGZhbHNlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgaGFuZGxlRm9jdXMsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHdpbmRvdy5hdHRhY2hFdmVudChcIm9uQmx1clwiLCBoYW5kbGVCbHVyKTtcbiAgICBkb2N1bWVudC5hdHRhY2hFdmVudChcIm9uRm9jdXNcIiwgaGFuZGxlRm9jdXMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRlYXJkb3duU2NvcGVkRm9jdXMoKSB7XG4gIG1vZGFsRWxlbWVudCA9IG51bGw7XG5cbiAgaWYgKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIGhhbmRsZUJsdXIpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCBoYW5kbGVGb2N1cyk7XG4gIH0gZWxzZSB7XG4gICAgd2luZG93LmRldGFjaEV2ZW50KFwib25CbHVyXCIsIGhhbmRsZUJsdXIpO1xuICAgIGRvY3VtZW50LmRldGFjaEV2ZW50KFwib25Gb2N1c1wiLCBoYW5kbGVGb2N1cyk7XG4gIH1cbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNjb3BlVGFiO1xuXG52YXIgX3RhYmJhYmxlID0gcmVxdWlyZShcIi4vdGFiYmFibGVcIik7XG5cbnZhciBfdGFiYmFibGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdGFiYmFibGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBzY29wZVRhYihub2RlLCBldmVudCkge1xuICB2YXIgdGFiYmFibGUgPSAoMCwgX3RhYmJhYmxlMi5kZWZhdWx0KShub2RlKTtcblxuICBpZiAoIXRhYmJhYmxlLmxlbmd0aCkge1xuICAgIC8vIERvIG5vdGhpbmcsIHNpbmNlIHRoZXJlIGFyZSBubyBlbGVtZW50cyB0aGF0IGNhbiByZWNlaXZlIGZvY3VzLlxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHRhcmdldCA9IHZvaWQgMDtcblxuICB2YXIgc2hpZnRLZXkgPSBldmVudC5zaGlmdEtleTtcbiAgdmFyIGhlYWQgPSB0YWJiYWJsZVswXTtcbiAgdmFyIHRhaWwgPSB0YWJiYWJsZVt0YWJiYWJsZS5sZW5ndGggLSAxXTtcblxuICAvLyBwcm9jZWVkIHdpdGggZGVmYXVsdCBicm93c2VyIGJlaGF2aW9yIG9uIHRhYi5cbiAgLy8gRm9jdXMgb24gbGFzdCBlbGVtZW50IG9uIHNoaWZ0ICsgdGFiLlxuICBpZiAobm9kZSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgIGlmICghc2hpZnRLZXkpIHJldHVybjtcbiAgICB0YXJnZXQgPSB0YWlsO1xuICB9XG5cbiAgaWYgKHRhaWwgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgIXNoaWZ0S2V5KSB7XG4gICAgdGFyZ2V0ID0gaGVhZDtcbiAgfVxuXG4gIGlmIChoZWFkID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIHNoaWZ0S2V5KSB7XG4gICAgdGFyZ2V0ID0gdGFpbDtcbiAgfVxuXG4gIGlmICh0YXJnZXQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRhcmdldC5mb2N1cygpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFNhZmFyaSByYWRpbyBpc3N1ZS5cbiAgLy9cbiAgLy8gU2FmYXJpIGRvZXMgbm90IG1vdmUgdGhlIGZvY3VzIHRvIHRoZSByYWRpbyBidXR0b24sXG4gIC8vIHNvIHdlIG5lZWQgdG8gZm9yY2UgaXQgdG8gcmVhbGx5IHdhbGsgdGhyb3VnaCBhbGwgZWxlbWVudHMuXG4gIC8vXG4gIC8vIFRoaXMgaXMgdmVyeSBlcnJvciBwcm9uZSwgc2luY2Ugd2UgYXJlIHRyeWluZyB0byBndWVzc1xuICAvLyBpZiBpdCBpcyBhIHNhZmFyaSBicm93c2VyIGZyb20gdGhlIGZpcnN0IG9jY3VyZW5jZSBiZXR3ZWVuXG4gIC8vIGNocm9tZSBvciBzYWZhcmkuXG4gIC8vXG4gIC8vIFRoZSBjaHJvbWUgdXNlciBhZ2VudCBjb250YWlucyB0aGUgZmlyc3Qgb2N1cnJlbmNlXG4gIC8vIGFzIHRoZSAnY2hyb21lL3ZlcnNpb24nIGFuZCBsYXRlciB0aGUgJ3NhZmFyaS92ZXJzaW9uJy5cbiAgdmFyIGNoZWNrU2FmYXJpID0gLyhcXGJDaHJvbWVcXGJ8XFxiU2FmYXJpXFxiKVxcLy8uZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgdmFyIGlzU2FmYXJpRGVza3RvcCA9IGNoZWNrU2FmYXJpICE9IG51bGwgJiYgY2hlY2tTYWZhcmlbMV0gIT0gXCJDaHJvbWVcIiAmJiAvXFxiaVBvZFxcYnxcXGJpUGFkXFxiL2cuZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50KSA9PSBudWxsO1xuXG4gIC8vIElmIHdlIGFyZSBub3QgaW4gc2FmYXJpIGRlc2t0b3AsIGxldCB0aGUgYnJvd3NlciBjb250cm9sXG4gIC8vIHRoZSBmb2N1c1xuICBpZiAoIWlzU2FmYXJpRGVza3RvcCkgcmV0dXJuO1xuXG4gIHZhciB4ID0gdGFiYmFibGUuaW5kZXhPZihkb2N1bWVudC5hY3RpdmVFbGVtZW50KTtcblxuICBpZiAoeCA+IC0xKSB7XG4gICAgeCArPSBzaGlmdEtleSA/IC0xIDogMTtcbiAgfVxuXG4gIHRhcmdldCA9IHRhYmJhYmxlW3hdO1xuXG4gIC8vIElmIHRoZSB0YWJiYWJsZSBlbGVtZW50IGRvZXMgbm90IGV4aXN0LFxuICAvLyBmb2N1cyBoZWFkL3RhaWwgYmFzZWQgb24gc2hpZnRLZXlcbiAgaWYgKHR5cGVvZiB0YXJnZXQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRhcmdldCA9IHNoaWZ0S2V5ID8gdGFpbCA6IGhlYWQ7XG4gICAgdGFyZ2V0LmZvY3VzKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICB0YXJnZXQuZm9jdXMoKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciBfX0RFVl9fID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJztcblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAoX19ERVZfXykge1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMSA/IGxlbiAtIDEgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAxOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDFdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfVxuXG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBwcmludFdhcm5pbmcuYXBwbHkobnVsbCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTUgSmVkIFdhdHNvbi5cbiAgQmFzZWQgb24gY29kZSB0aGF0IGlzIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGNhblVzZURPTSA9ICEhKFxuXHRcdHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG5cdFx0d2luZG93LmRvY3VtZW50ICYmXG5cdFx0d2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnRcblx0KTtcblxuXHR2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cblx0XHRjYW5Vc2VET006IGNhblVzZURPTSxcblxuXHRcdGNhblVzZVdvcmtlcnM6IHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnLFxuXG5cdFx0Y2FuVXNlRXZlbnRMaXN0ZW5lcnM6XG5cdFx0XHRjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuXHRcdGNhblVzZVZpZXdwb3J0OiBjYW5Vc2VET00gJiYgISF3aW5kb3cuc2NyZWVuXG5cblx0fTtcblxuXHRpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdGRlZmluZShmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gRXhlY3V0aW9uRW52aXJvbm1lbnQ7XG5cdFx0fSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50O1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5FeGVjdXRpb25FbnZpcm9ubWVudCA9IEV4ZWN1dGlvbkVudmlyb25tZW50O1xuXHR9XG5cbn0oKSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZHVtcENsYXNzTGlzdHMgPSBkdW1wQ2xhc3NMaXN0cztcbnZhciBodG1sQ2xhc3NMaXN0ID0ge307XG52YXIgZG9jQm9keUNsYXNzTGlzdCA9IHt9O1xuXG5mdW5jdGlvbiBkdW1wQ2xhc3NMaXN0cygpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHZhciBjbGFzc2VzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJodG1sXCIpWzBdLmNsYXNzTmFtZTtcbiAgICB2YXIgYnVmZmVyID0gXCJTaG93IHRyYWNrZWQgY2xhc3NlczpcXG5cXG5cIjtcblxuICAgIGJ1ZmZlciArPSBcIjxodG1sIC8+IChcIiArIGNsYXNzZXMgKyBcIik6XFxuXCI7XG4gICAgZm9yICh2YXIgeCBpbiBodG1sQ2xhc3NMaXN0KSB7XG4gICAgICBidWZmZXIgKz0gXCIgIFwiICsgeCArIFwiIFwiICsgaHRtbENsYXNzTGlzdFt4XSArIFwiXFxuXCI7XG4gICAgfVxuXG4gICAgY2xhc3NlcyA9IGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW5cbiAgICBidWZmZXIgKz0gXCJcXG5cXG5kb2MuYm9keSAoXCIgKyBjbGFzc2VzICsgXCIpOlxcblwiO1xuICAgIGZvciAodmFyIF94IGluIGRvY0JvZHlDbGFzc0xpc3QpIHtcbiAgICAgIGJ1ZmZlciArPSBcIiAgXCIgKyBfeCArIFwiIFwiICsgZG9jQm9keUNsYXNzTGlzdFtfeF0gKyBcIlxcblwiO1xuICAgIH1cblxuICAgIGJ1ZmZlciArPSBcIlxcblwiO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZyhidWZmZXIpO1xuICB9XG59XG5cbi8qKlxuICogVHJhY2sgdGhlIG51bWJlciBvZiByZWZlcmVuY2Ugb2YgYSBjbGFzcy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBwb2xsIFRoZSBwb2xsIHRvIHJlY2VpdmUgdGhlIHJlZmVyZW5jZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgVGhlIGNsYXNzIG5hbWUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnZhciBpbmNyZW1lbnRSZWZlcmVuY2UgPSBmdW5jdGlvbiBpbmNyZW1lbnRSZWZlcmVuY2UocG9sbCwgY2xhc3NOYW1lKSB7XG4gIGlmICghcG9sbFtjbGFzc05hbWVdKSB7XG4gICAgcG9sbFtjbGFzc05hbWVdID0gMDtcbiAgfVxuICBwb2xsW2NsYXNzTmFtZV0gKz0gMTtcbiAgcmV0dXJuIGNsYXNzTmFtZTtcbn07XG5cbi8qKlxuICogRHJvcCB0aGUgcmVmZXJlbmNlIG9mIGEgY2xhc3MuXG4gKiBAcGFyYW0ge29iamVjdH0gcG9sbCBUaGUgcG9sbCB0byByZWNlaXZlIHRoZSByZWZlcmVuY2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIFRoZSBjbGFzcyBuYW1lLlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG52YXIgZGVjcmVtZW50UmVmZXJlbmNlID0gZnVuY3Rpb24gZGVjcmVtZW50UmVmZXJlbmNlKHBvbGwsIGNsYXNzTmFtZSkge1xuICBpZiAocG9sbFtjbGFzc05hbWVdKSB7XG4gICAgcG9sbFtjbGFzc05hbWVdIC09IDE7XG4gIH1cbiAgcmV0dXJuIGNsYXNzTmFtZTtcbn07XG5cbi8qKlxuICogVHJhY2sgYSBjbGFzcyBhbmQgYWRkIHRvIHRoZSBnaXZlbiBjbGFzcyBsaXN0LlxuICogQHBhcmFtIHtPYmplY3R9IGNsYXNzTGlzdFJlZiBBIGNsYXNzIGxpc3Qgb2YgYW4gZWxlbWVudC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBwb2xsICAgICAgICAgVGhlIHBvbGwgdG8gYmUgdXNlZC5cbiAqIEBwYXJhbSB7QXJyYXl9ICBjbGFzc2VzICAgICAgVGhlIGxpc3Qgb2YgY2xhc3NlcyB0byBiZSB0cmFja2VkLlxuICovXG52YXIgdHJhY2tDbGFzcyA9IGZ1bmN0aW9uIHRyYWNrQ2xhc3MoY2xhc3NMaXN0UmVmLCBwb2xsLCBjbGFzc2VzKSB7XG4gIGNsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgaW5jcmVtZW50UmVmZXJlbmNlKHBvbGwsIGNsYXNzTmFtZSk7XG4gICAgY2xhc3NMaXN0UmVmLmFkZChjbGFzc05hbWUpO1xuICB9KTtcbn07XG5cbi8qKlxuICogVW50cmFjayBhIGNsYXNzIGFuZCByZW1vdmUgZnJvbSB0aGUgZ2l2ZW4gY2xhc3MgbGlzdCBpZiB0aGUgcmVmZXJlbmNlXG4gKiByZWFjaGVzIDAuXG4gKiBAcGFyYW0ge09iamVjdH0gY2xhc3NMaXN0UmVmIEEgY2xhc3MgbGlzdCBvZiBhbiBlbGVtZW50LlxuICogQHBhcmFtIHtPYmplY3R9IHBvbGwgICAgICAgICBUaGUgcG9sbCB0byBiZSB1c2VkLlxuICogQHBhcmFtIHtBcnJheX0gIGNsYXNzZXMgICAgICBUaGUgbGlzdCBvZiBjbGFzc2VzIHRvIGJlIHVudHJhY2tlZC5cbiAqL1xudmFyIHVudHJhY2tDbGFzcyA9IGZ1bmN0aW9uIHVudHJhY2tDbGFzcyhjbGFzc0xpc3RSZWYsIHBvbGwsIGNsYXNzZXMpIHtcbiAgY2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICBkZWNyZW1lbnRSZWZlcmVuY2UocG9sbCwgY2xhc3NOYW1lKTtcbiAgICBwb2xsW2NsYXNzTmFtZV0gPT09IDAgJiYgY2xhc3NMaXN0UmVmLnJlbW92ZShjbGFzc05hbWUpO1xuICB9KTtcbn07XG5cbi8qKlxuICogUHVibGljIGluZmVyZmFjZSB0byBhZGQgY2xhc3NlcyB0byB0aGUgZG9jdW1lbnQuYm9keS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBib2R5Q2xhc3MgVGhlIGNsYXNzIHN0cmluZyB0byBiZSBhZGRlZC5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgSXQgbWF5IGNvbnRhaW4gbW9yZSB0aGVuIG9uZSBjbGFzc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoICcgJyBhcyBzZXBhcmF0b3IuXG4gKi9cbnZhciBhZGQgPSBleHBvcnRzLmFkZCA9IGZ1bmN0aW9uIGFkZChlbGVtZW50LCBjbGFzc1N0cmluZykge1xuICByZXR1cm4gdHJhY2tDbGFzcyhlbGVtZW50LmNsYXNzTGlzdCwgZWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09IFwiaHRtbFwiID8gaHRtbENsYXNzTGlzdCA6IGRvY0JvZHlDbGFzc0xpc3QsIGNsYXNzU3RyaW5nLnNwbGl0KFwiIFwiKSk7XG59O1xuXG4vKipcbiAqIFB1YmxpYyBpbmZlcmZhY2UgdG8gcmVtb3ZlIGNsYXNzZXMgZnJvbSB0aGUgZG9jdW1lbnQuYm9keS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBib2R5Q2xhc3MgVGhlIGNsYXNzIHN0cmluZyB0byBiZSBhZGRlZC5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgSXQgbWF5IGNvbnRhaW4gbW9yZSB0aGVuIG9uZSBjbGFzc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoICcgJyBhcyBzZXBhcmF0b3IuXG4gKi9cbnZhciByZW1vdmUgPSBleHBvcnRzLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShlbGVtZW50LCBjbGFzc1N0cmluZykge1xuICByZXR1cm4gdW50cmFja0NsYXNzKGVsZW1lbnQuY2xhc3NMaXN0LCBlbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT0gXCJodG1sXCIgPyBodG1sQ2xhc3NMaXN0IDogZG9jQm9keUNsYXNzTGlzdCwgY2xhc3NTdHJpbmcuc3BsaXQoXCIgXCIpKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfcG9ydGFsT3Blbkluc3RhbmNlcyA9IHJlcXVpcmUoXCIuL3BvcnRhbE9wZW5JbnN0YW5jZXNcIik7XG5cbnZhciBfcG9ydGFsT3Blbkluc3RhbmNlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3J0YWxPcGVuSW5zdGFuY2VzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gQm9keSBmb2N1cyB0cmFwIHNlZSBJc3N1ZSAjNzQyXG5cbnZhciBiZWZvcmUgPSB2b2lkIDAsXG4gICAgYWZ0ZXIgPSB2b2lkIDAsXG4gICAgaW5zdGFuY2VzID0gW107XG5cbmZ1bmN0aW9uIGZvY3VzQ29udGVudCgpIHtcbiAgaWYgKGluc3RhbmNlcy5sZW5ndGggPT09IDApIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFwiUmVhY3QtTW9kYWw6IE9wZW4gaW5zdGFuY2VzID4gMCBleHBlY3RlZFwiKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGluc3RhbmNlc1tpbnN0YW5jZXMubGVuZ3RoIC0gMV0uZm9jdXNDb250ZW50KCk7XG59XG5cbmZ1bmN0aW9uIGJvZHlUcmFwKGV2ZW50VHlwZSwgb3Blbkluc3RhbmNlcykge1xuICBpZiAoIWJlZm9yZSB8fCAhYWZ0ZXIpIHtcbiAgICBiZWZvcmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGJlZm9yZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0LW1vZGFsLWJvZHktdHJhcFwiLCBcIlwiKTtcbiAgICBiZWZvcmUuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgYmVmb3JlLnN0eWxlLm9wYWNpdHkgPSBcIjBcIjtcbiAgICBiZWZvcmUuc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIiwgXCIwXCIpO1xuICAgIGJlZm9yZS5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgZm9jdXNDb250ZW50KTtcbiAgICBhZnRlciA9IGJlZm9yZS5jbG9uZU5vZGUoKTtcbiAgICBhZnRlci5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgZm9jdXNDb250ZW50KTtcbiAgfVxuXG4gIGluc3RhbmNlcyA9IG9wZW5JbnN0YW5jZXM7XG5cbiAgaWYgKGluc3RhbmNlcy5sZW5ndGggPiAwKSB7XG4gICAgLy8gQWRkIGZvY3VzIHRyYXBcbiAgICBpZiAoZG9jdW1lbnQuYm9keS5maXJzdENoaWxkICE9PSBiZWZvcmUpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuaW5zZXJ0QmVmb3JlKGJlZm9yZSwgZG9jdW1lbnQuYm9keS5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgaWYgKGRvY3VtZW50LmJvZHkubGFzdENoaWxkICE9PSBhZnRlcikge1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhZnRlcik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFJlbW92ZSBmb2N1cyB0cmFwXG4gICAgaWYgKGJlZm9yZS5wYXJlbnRFbGVtZW50KSB7XG4gICAgICBiZWZvcmUucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChiZWZvcmUpO1xuICAgIH1cbiAgICBpZiAoYWZ0ZXIucGFyZW50RWxlbWVudCkge1xuICAgICAgYWZ0ZXIucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChhZnRlcik7XG4gICAgfVxuICB9XG59XG5cbl9wb3J0YWxPcGVuSW5zdGFuY2VzMi5kZWZhdWx0LnN1YnNjcmliZShib2R5VHJhcCk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gIC8vIENhbGwgdGhpcy5jb25zdHJ1Y3Rvci5nRFNGUCB0byBzdXBwb3J0IHN1Yi1jbGFzc2VzLlxuICB2YXIgc3RhdGUgPSB0aGlzLmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyh0aGlzLnByb3BzLCB0aGlzLnN0YXRlKTtcbiAgaWYgKHN0YXRlICE9PSBudWxsICYmIHN0YXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAvLyBDYWxsIHRoaXMuY29uc3RydWN0b3IuZ0RTRlAgdG8gc3VwcG9ydCBzdWItY2xhc3Nlcy5cbiAgLy8gVXNlIHRoZSBzZXRTdGF0ZSgpIHVwZGF0ZXIgdG8gZW5zdXJlIHN0YXRlIGlzbid0IHN0YWxlIGluIGNlcnRhaW4gZWRnZSBjYXNlcy5cbiAgZnVuY3Rpb24gdXBkYXRlcihwcmV2U3RhdGUpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSk7XG4gICAgcmV0dXJuIHN0YXRlICE9PSBudWxsICYmIHN0YXRlICE9PSB1bmRlZmluZWQgPyBzdGF0ZSA6IG51bGw7XG4gIH1cbiAgLy8gQmluZGluZyBcInRoaXNcIiBpcyBpbXBvcnRhbnQgZm9yIHNoYWxsb3cgcmVuZGVyZXIgc3VwcG9ydC5cbiAgdGhpcy5zZXRTdGF0ZSh1cGRhdGVyLmJpbmQodGhpcykpO1xufVxuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gIHRyeSB7XG4gICAgdmFyIHByZXZQcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHByZXZTdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgdGhpcy5wcm9wcyA9IG5leHRQcm9wcztcbiAgICB0aGlzLnN0YXRlID0gbmV4dFN0YXRlO1xuICAgIHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnID0gdHJ1ZTtcbiAgICB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90ID0gdGhpcy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShcbiAgICAgIHByZXZQcm9wcyxcbiAgICAgIHByZXZTdGF0ZVxuICAgICk7XG4gIH0gZmluYWxseSB7XG4gICAgdGhpcy5wcm9wcyA9IHByZXZQcm9wcztcbiAgICB0aGlzLnN0YXRlID0gcHJldlN0YXRlO1xuICB9XG59XG5cbi8vIFJlYWN0IG1heSB3YXJuIGFib3V0IGNXTS9jV1JQL2NXVSBtZXRob2RzIGJlaW5nIGRlcHJlY2F0ZWQuXG4vLyBBZGQgYSBmbGFnIHRvIHN1cHByZXNzIHRoZXNlIHdhcm5pbmdzIGZvciB0aGlzIHNwZWNpYWwgY2FzZS5cbmNvbXBvbmVudFdpbGxNb3VudC5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTtcbmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyA9IHRydWU7XG5jb21wb25lbnRXaWxsVXBkYXRlLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgPSB0cnVlO1xuXG5mdW5jdGlvbiBwb2x5ZmlsbChDb21wb25lbnQpIHtcbiAgdmFyIHByb3RvdHlwZSA9IENvbXBvbmVudC5wcm90b3R5cGU7XG5cbiAgaWYgKCFwcm90b3R5cGUgfHwgIXByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gb25seSBwb2x5ZmlsbCBjbGFzcyBjb21wb25lbnRzJyk7XG4gIH1cblxuICBpZiAoXG4gICAgdHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgIT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgcHJvdG90eXBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybiBDb21wb25lbnQ7XG4gIH1cblxuICAvLyBJZiBuZXcgY29tcG9uZW50IEFQSXMgYXJlIGRlZmluZWQsIFwidW5zYWZlXCIgbGlmZWN5Y2xlcyB3b24ndCBiZSBjYWxsZWQuXG4gIC8vIEVycm9yIGlmIGFueSBvZiB0aGVzZSBsaWZlY3ljbGVzIGFyZSBwcmVzZW50LFxuICAvLyBCZWNhdXNlIHRoZXkgd291bGQgd29yayBkaWZmZXJlbnRseSBiZXR3ZWVuIG9sZGVyIGFuZCBuZXdlciAoMTYuMyspIHZlcnNpb25zIG9mIFJlYWN0LlxuICB2YXIgZm91bmRXaWxsTW91bnROYW1lID0gbnVsbDtcbiAgdmFyIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgPSBudWxsO1xuICB2YXIgZm91bmRXaWxsVXBkYXRlTmFtZSA9IG51bGw7XG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbE1vdW50TmFtZSA9ICdjb21wb25lbnRXaWxsTW91bnQnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbE1vdW50TmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JztcbiAgfVxuICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJztcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyc7XG4gIH1cbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSAnY29tcG9uZW50V2lsbFVwZGF0ZSc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUnO1xuICB9XG4gIGlmIChcbiAgICBmb3VuZFdpbGxNb3VudE5hbWUgIT09IG51bGwgfHxcbiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lICE9PSBudWxsIHx8XG4gICAgZm91bmRXaWxsVXBkYXRlTmFtZSAhPT0gbnVsbFxuICApIHtcbiAgICB2YXIgY29tcG9uZW50TmFtZSA9IENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZTtcbiAgICB2YXIgbmV3QXBpTmFtZSA9XG4gICAgICB0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/ICdnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoKSdcbiAgICAgICAgOiAnZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoKSc7XG5cbiAgICB0aHJvdyBFcnJvcihcbiAgICAgICdVbnNhZmUgbGVnYWN5IGxpZmVjeWNsZXMgd2lsbCBub3QgYmUgY2FsbGVkIGZvciBjb21wb25lbnRzIHVzaW5nIG5ldyBjb21wb25lbnQgQVBJcy5cXG5cXG4nICtcbiAgICAgICAgY29tcG9uZW50TmFtZSArXG4gICAgICAgICcgdXNlcyAnICtcbiAgICAgICAgbmV3QXBpTmFtZSArXG4gICAgICAgICcgYnV0IGFsc28gY29udGFpbnMgdGhlIGZvbGxvd2luZyBsZWdhY3kgbGlmZWN5Y2xlczonICtcbiAgICAgICAgKGZvdW5kV2lsbE1vdW50TmFtZSAhPT0gbnVsbCA/ICdcXG4gICcgKyBmb3VuZFdpbGxNb3VudE5hbWUgOiAnJykgK1xuICAgICAgICAoZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSAhPT0gbnVsbFxuICAgICAgICAgID8gJ1xcbiAgJyArIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWVcbiAgICAgICAgICA6ICcnKSArXG4gICAgICAgIChmb3VuZFdpbGxVcGRhdGVOYW1lICE9PSBudWxsID8gJ1xcbiAgJyArIGZvdW5kV2lsbFVwZGF0ZU5hbWUgOiAnJykgK1xuICAgICAgICAnXFxuXFxuVGhlIGFib3ZlIGxpZmVjeWNsZXMgc2hvdWxkIGJlIHJlbW92ZWQuIExlYXJuIG1vcmUgYWJvdXQgdGhpcyB3YXJuaW5nIGhlcmU6XFxuJyArXG4gICAgICAgICdodHRwczovL2ZiLm1lL3JlYWN0LWFzeW5jLWNvbXBvbmVudC1saWZlY3ljbGUtaG9va3MnXG4gICAgKTtcbiAgfVxuXG4gIC8vIFJlYWN0IDw9IDE2LjIgZG9lcyBub3Qgc3VwcG9ydCBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLlxuICAvLyBBcyBhIHdvcmthcm91bmQsIHVzZSBjV00gYW5kIGNXUlAgdG8gaW52b2tlIHRoZSBuZXcgc3RhdGljIGxpZmVjeWNsZS5cbiAgLy8gTmV3ZXIgdmVyc2lvbnMgb2YgUmVhY3Qgd2lsbCBpZ25vcmUgdGhlc2UgbGlmZWN5Y2xlcyBpZiBnRFNGUCBleGlzdHMuXG4gIGlmICh0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBjb21wb25lbnRXaWxsTW91bnQ7XG4gICAgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzO1xuICB9XG5cbiAgLy8gUmVhY3QgPD0gMTYuMiBkb2VzIG5vdCBzdXBwb3J0IGdldFNuYXBzaG90QmVmb3JlVXBkYXRlLlxuICAvLyBBcyBhIHdvcmthcm91bmQsIHVzZSBjV1UgdG8gaW52b2tlIHRoZSBuZXcgbGlmZWN5Y2xlLlxuICAvLyBOZXdlciB2ZXJzaW9ucyBvZiBSZWFjdCB3aWxsIGlnbm9yZSB0aGF0IGxpZmVjeWNsZSBpZiBnU0JVIGV4aXN0cy5cbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCBwb2x5ZmlsbCBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpIGZvciBjb21wb25lbnRzIHRoYXQgZG8gbm90IGRlZmluZSBjb21wb25lbnREaWRVcGRhdGUoKSBvbiB0aGUgcHJvdG90eXBlJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBwcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9IGNvbXBvbmVudFdpbGxVcGRhdGU7XG5cbiAgICB2YXIgY29tcG9uZW50RGlkVXBkYXRlID0gcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZTtcblxuICAgIHByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGVQb2x5ZmlsbChcbiAgICAgIHByZXZQcm9wcyxcbiAgICAgIHByZXZTdGF0ZSxcbiAgICAgIG1heWJlU25hcHNob3RcbiAgICApIHtcbiAgICAgIC8vIDE2LjMrIHdpbGwgbm90IGV4ZWN1dGUgb3VyIHdpbGwtdXBkYXRlIG1ldGhvZDtcbiAgICAgIC8vIEl0IHdpbGwgcGFzcyBhIHNuYXBzaG90IHZhbHVlIHRvIGRpZC11cGRhdGUgdGhvdWdoLlxuICAgICAgLy8gT2xkZXIgdmVyc2lvbnMgd2lsbCByZXF1aXJlIG91ciBwb2x5ZmlsbGVkIHdpbGwtdXBkYXRlIHZhbHVlLlxuICAgICAgLy8gV2UgbmVlZCB0byBoYW5kbGUgYm90aCBjYXNlcywgYnV0IGNhbid0IGp1c3QgY2hlY2sgZm9yIHRoZSBwcmVzZW5jZSBvZiBcIm1heWJlU25hcHNob3RcIixcbiAgICAgIC8vIEJlY2F1c2UgZm9yIDw9IDE1LnggdmVyc2lvbnMgdGhpcyBtaWdodCBiZSBhIFwicHJldkNvbnRleHRcIiBvYmplY3QuXG4gICAgICAvLyBXZSBhbHNvIGNhbid0IGp1c3QgY2hlY2sgXCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdFwiLFxuICAgICAgLy8gQmVjYXVzZSBnZXQtc25hcHNob3QgbWlnaHQgcmV0dXJuIGEgZmFsc3kgdmFsdWUuXG4gICAgICAvLyBTbyBjaGVjayBmb3IgdGhlIGV4cGxpY2l0IF9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZyBmbGFnIHRvIGRldGVybWluZSBiZWhhdmlvci5cbiAgICAgIHZhciBzbmFwc2hvdCA9IHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnXG4gICAgICAgID8gdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdFxuICAgICAgICA6IG1heWJlU25hcHNob3Q7XG5cbiAgICAgIGNvbXBvbmVudERpZFVwZGF0ZS5jYWxsKHRoaXMsIHByZXZQcm9wcywgcHJldlN0YXRlLCBzbmFwc2hvdCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBDb21wb25lbnQ7XG59XG5cbmV4cG9ydCB7IHBvbHlmaWxsIH07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9jb3JlL21lcmdlQ29uZmlnJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGF4aW9zLmRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBhcmd1bWVudHNbMV0gfHwge307XG4gICAgY29uZmlnLnVybCA9IGFyZ3VtZW50c1swXTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gIC8vIFNldCBjb25maWcubWV0aG9kXG4gIGlmIChjb25maWcubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSB0aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5tZXRob2QgPSAnZ2V0JztcbiAgfVxuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzXG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cblxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgZXJyb3IuaXNBeGlvc0Vycm9yID0gdHJ1ZTtcblxuICBlcnJvci50b0pTT04gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZVxuICAgIH07XG4gIH07XG4gIHJldHVybiBlcnJvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRGdWxsUGF0aChiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpIHtcbiAgaWYgKGJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwocmVxdWVzdGVkVVJMKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHZhciBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsImltcG9ydCBSZWFjdCwgeyBDU1NQcm9wZXJ0aWVzLCBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL1N0ZXAuY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgY2hpbGRyZW4/OiBBcnJheTxSZWFjdE5vZGU+IHwgUmVhY3ROb2RlO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIHN0eWxlPzogQ1NTUHJvcGVydGllcztcbn1cblxuY29uc3QgU3RlcDogUmVhY3QuRkM8UHJvcHM+ID0gKHsgY2hpbGRyZW4sIGNsYXNzTmFtZSwgc3R5bGUgfSkgPT4gKFxuICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ3N0ZXAnKShudWxsLCBjbGFzc05hbWUpfSBzdHlsZT17c3R5bGV9PlxuICAgIHtjaGlsZHJlbn1cbiAgPC9kaXY+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBTdGVwO1xuIiwidmFyIE1JTExJU0VDT05EU19JTl9NSU5VVEUgPSA2MDAwMDtcblxuZnVuY3Rpb24gZ2V0RGF0ZU1pbGxpc2Vjb25kc1BhcnQoZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgJSBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFO1xufVxuLyoqXG4gKiBHb29nbGUgQ2hyb21lIGFzIG9mIDY3LjAuMzM5Ni44NyBpbnRyb2R1Y2VkIHRpbWV6b25lcyB3aXRoIG9mZnNldCB0aGF0IGluY2x1ZGVzIHNlY29uZHMuXG4gKiBUaGV5IHVzdWFsbHkgYXBwZWFyIGZvciBkYXRlcyB0aGF0IGRlbm90ZSB0aW1lIGJlZm9yZSB0aGUgdGltZXpvbmVzIHdlcmUgaW50cm9kdWNlZFxuICogKGUuZy4gZm9yICdFdXJvcGUvUHJhZ3VlJyB0aW1lem9uZSB0aGUgb2Zmc2V0IGlzIEdNVCswMDo1Nzo0NCBiZWZvcmUgMSBPY3RvYmVyIDE4OTFcbiAqIGFuZCBHTVQrMDE6MDA6MDAgYWZ0ZXIgdGhhdCBkYXRlKVxuICpcbiAqIERhdGUjZ2V0VGltZXpvbmVPZmZzZXQgcmV0dXJucyB0aGUgb2Zmc2V0IGluIG1pbnV0ZXMgYW5kIHdvdWxkIHJldHVybiA1NyBmb3IgdGhlIGV4YW1wbGUgYWJvdmUsXG4gKiB3aGljaCB3b3VsZCBsZWFkIHRvIGluY29ycmVjdCBjYWxjdWxhdGlvbnMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSB0aW1lem9uZSBvZmZzZXQgaW4gbWlsbGlzZWNvbmRzIHRoYXQgdGFrZXMgc2Vjb25kcyBpbiBhY2NvdW50LlxuICovXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkaXJ0eURhdGUpIHtcbiAgdmFyIGRhdGUgPSBuZXcgRGF0ZShkaXJ0eURhdGUuZ2V0VGltZSgpKTtcbiAgdmFyIGJhc2VUaW1lem9uZU9mZnNldCA9IE1hdGguY2VpbChkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICBkYXRlLnNldFNlY29uZHMoMCwgMCk7XG4gIHZhciBoYXNOZWdhdGl2ZVVUQ09mZnNldCA9IGJhc2VUaW1lem9uZU9mZnNldCA+IDA7XG4gIHZhciBtaWxsaXNlY29uZHNQYXJ0T2ZUaW1lem9uZU9mZnNldCA9IGhhc05lZ2F0aXZlVVRDT2Zmc2V0ID8gKE1JTExJU0VDT05EU19JTl9NSU5VVEUgKyBnZXREYXRlTWlsbGlzZWNvbmRzUGFydChkYXRlKSkgJSBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFIDogZ2V0RGF0ZU1pbGxpc2Vjb25kc1BhcnQoZGF0ZSk7XG4gIHJldHVybiBiYXNlVGltZXpvbmVPZmZzZXQgKiBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFICsgbWlsbGlzZWNvbmRzUGFydE9mVGltZXpvbmVPZmZzZXQ7XG59IiwiaW1wb3J0IHsgTWVzc2FnZXMgfSBmcm9tICdAaW50ZXJmYWNlcy9pbnRlcmZhY2VzJztcblxuaW1wb3J0IHsgTGFuZ3VhZ2UgfSBmcm9tICdAY29uc3RhbnRzL2xhbmd1YWdlcyc7XG5cbmNvbnN0IG1lc3NhZ2VzOiBNZXNzYWdlcyA9IHtcbiAgW0xhbmd1YWdlLkVOXToge1xuICAgIGxhbmc6IExhbmd1YWdlLkVOLFxuICAgIG1lc3NhZ2VzOiB7XG4gICAgICAnYXV0aC5zZWN1cml0eVBvbGljeSc6XG4gICAgICAgICdCeSB1c2luZyB0aGlzIGV4dGVuc2lvbiwgeW91IGFncmVlIHRvIHRoZSA8YSBocmVmPVwie3BvbGljeUhyZWZ9XCIgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiIHRhcmdldD1cIl9ibGFua1wiPnNlY3VyaXR5IHBvbGljeTwvYT4uJyxcbiAgICAgICdhdXRoLnJlbWVtYmVyUGFzc3dvcmQnOiAnSSByZW1lbWJlciBwYXNzd29yZCcsXG4gICAgICAnYXV0aC5yZW1pbmRQYXNzd29yZCc6ICdJZiB5b3UgaGF2ZSBmb3Jnb3R0ZW4geW91ciBwYXNzd29yZCwgY2xpY2sgaGVyZScsXG4gICAgICAnYXV0aC5yZW1pbmRQYXNzd29yZFN1Y2Nlc3NNZXNzYWdlJzpcbiAgICAgICAgJ1dlIGhhdmUgc2VudCB5b3UgYSBwYXNzd29yZCByZWNvdmVyeSBsaW5rIGluIHRoZSBtYWlsLicsXG4gICAgICAnYXV0aC5yZXNldFBhc3N3b3JkJzogJ1Jlc2V0IHBhc3N3b3JkJyxcbiAgICAgICdhdXRoLnJlc2V0JzogJ1Jlc2V0IHBhc3N3b3JkJyxcbiAgICAgICdhdXRoLmxvZ2luTGF0ZXInOiAnTG9nIGluIGxhdGVyJyxcbiAgICAgICdhdXRoLmVycm9yQnVzeSc6ICdTZXJ2ZXIgZXJyb3IuIFJlbG9hZCB0aGUgcGFnZSBhbmQgdHJ5IG9uY2UgYWdhaW4uJyxcbiAgICAgICdhdXRoLmVycm9ySW5jb3JyZWN0UGFzc3dvcmRPclVzZXJuYW1lJzpcbiAgICAgICAgJ1dyb25nIHBhc3N3b3JkIG9yIGUtbWFpbCBhZGRyZXNzLicsXG4gICAgICAnYXV0aC5lcnJvclByb2ZpbGVOb3RGb3VuZCc6XG4gICAgICAgICdUaGUgZS1tYWlsIGFkZHJlc3MgdGhhdCB5b3UgZW50ZXJlZCB3YXMgbm90IGZvdW5kLicsXG4gICAgICAnYXV0aC5lcnJvclRvb01hbnlBdHRlbXB0cyc6ICdUb28gbWFueSBhdHRlbXB0cy4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci4nLFxuICAgICAgJ2F1dGguZXJyb3JBdXRoRGF0YSc6ICdDYW4gbm90IHZlcmlmeSB0aGUgYXV0aG9yaXphdGlvbiBkYXRhLicsXG4gICAgICAnYXV0aC5lcnJvckF1dGhDb29raWUnOlxuICAgICAgICAnUGxlYXNlIGxvZyBpbiB0byBodHRwczovL3d3dy5yYXRlaGF3ay5jb20gZmlyc3QuJyxcbiAgICAgICdhdXRoLmF1dGhPcic6ICdMb2cgaW4gb3IgJyxcbiAgICAgICdhdXRoLnNpZ25VcCc6ICdzaWduIHVwJyxcbiAgICAgICdhdXRoLmF1dGhSZWFzb24nOiAnIHRvIGVhcm4gbW9yZScsXG4gICAgfSxcbiAgfSxcbiAgW0xhbmd1YWdlLlJVXToge1xuICAgIGxhbmc6IExhbmd1YWdlLlJVLFxuICAgIG1lc3NhZ2VzOiB7XG4gICAgICAnYXV0aC5zZWN1cml0eVBvbGljeSc6XG4gICAgICAgICfQmNGB0L/QvtC70YzQt9GD0Y8g0LTQsNC90L3QvtC1INGA0LDRgdGI0LjRgNC10L3QuNC1LCDQstGLINGB0L7Qs9C70LDRiNCw0LXRgtC10YHRjCDRgSA8YSBocmVmPVwie3BvbGljeUhyZWZ9XCIgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiIHRhcmdldD1cIl9ibGFua1wiPtC/0L7Qu9C40YLQuNC60L7QuSDQutC+0L3RhNC40LTQtdC90YbQuNCw0LvRjNC90L7RgdGC0Lg8L2E+LicsXG4gICAgICAnYXV0aC5yZW1lbWJlclBhc3N3b3JkJzogJ9CvINC/0L7QvNC90Y4g0L/QsNGA0L7Qu9GMJyxcbiAgICAgICdhdXRoLnJlbWluZFBhc3N3b3JkJzogJ9CV0YHQu9C4INCy0Ysg0LfQsNCx0YvQu9C4INC/0LDRgNC+0LvRjCwg0L3QsNC20LzQuNGC0LUg0YHRjtC00LAnLFxuICAgICAgJ2F1dGgucmVtaW5kUGFzc3dvcmRTdWNjZXNzTWVzc2FnZSc6XG4gICAgICAgICfQnNGLINC+0YLQv9GA0LDQstC40LvQuCDQstCw0Lwg0L3QsCDQv9C+0YfRgtGDINGB0YHRi9C70LrRgyDQtNC70Y8g0LLQvtGB0YHRgtCw0L3QvtCy0LvQtdC90LjRjyDQv9Cw0YDQvtC70Y8uJyxcbiAgICAgICdhdXRoLnJlc2V0UGFzc3dvcmQnOiAn0JLQvtGB0YHRgtCw0L3QvtCy0LjRgtGMJyxcbiAgICAgICdhdXRoLnJlc2V0JzogJ9CS0L7RgdGB0YLQsNC90L7QstC70LXQvdC40LUg0L/QsNGA0L7Qu9GPJyxcbiAgICAgICdhdXRoLmxvZ2luTGF0ZXInOiAn0JDQstGC0L7RgNC40LfQvtCy0LDRgtGM0YHRjyDQv9C+0LfQttC1JyxcbiAgICAgICdhdXRoLmVycm9yQnVzeSc6ICfQntGI0LjQsdC60LAg0YHQtdGA0LLQtdGA0LAuINCf0L7Qv9GA0L7QsdGD0LnRgtC1INC10YnQtSDRgNCw0Lcg0L/QvtC30LbQtS4nLFxuICAgICAgJ2F1dGguZXJyb3JJbmNvcnJlY3RQYXNzd29yZE9yVXNlcm5hbWUnOlxuICAgICAgICAn0KPQutCw0LfQsNC9INC90LXQv9GA0LDQstC40LvRjNC90YvQuSDQv9Cw0YDQvtC70Ywg0LjQu9C4INGN0LvQtdC60YLRgNC+0L3QvdGL0Lkg0LDQtNGA0LXRgS4nLFxuICAgICAgJ2F1dGguZXJyb3JQcm9maWxlTm90Rm91bmQnOlxuICAgICAgICAn0JzRiyDQvdC1INC90LDRiNC70Lgg0LLQstC10LTQtdC90L3Ri9C5INCy0LDQvNC4INCw0LTRgNC10YEg0Y3Qu9C10LrRgtGA0L7QvdC90L7QuSDQv9C+0YfRgtGLLicsXG4gICAgICAnYXV0aC5lcnJvclRvb01hbnlBdHRlbXB0cyc6XG4gICAgICAgICfQodC70LjRiNC60L7QvCDQvNC90L7Qs9C+INC/0L7Qv9GL0YLQvtC6LiDQn9C+0L/RgNC+0LHRg9C50YLQtSDQtdGJ0LUg0YDQsNC3INC/0L7Qt9C20LUuJyxcbiAgICAgICdhdXRoLmVycm9yQXV0aERhdGEnOiAn0J3QtSDQvNC+0LPRgyDQv9GA0L7QstC10YDQuNGC0Ywg0LDQstGC0L7RgNC40LfQsNGG0LjQvtC90L3Ri9C1INC00LDQvdC90YvQtS4nLFxuICAgICAgJ2F1dGguZXJyb3JBdXRoQ29va2llJzpcbiAgICAgICAgJ9Cf0L7QttCw0LvRg9C50YHRgtCwLCDRgdC90LDRh9Cw0LvQsCDQsNCy0YLQvtGA0LjQt9GD0LnRgtC10YHRjCDQvdCwIGh0dHBzOi8vd3d3LnJhdGVoYXdrLmNvbS4nLFxuICAgICAgJ2F1dGguYXV0aE9yJzogJ9CQ0LLRgtC+0YDQuNC30YPQudGC0LXRgdGMINC40LvQuDxicj4nLFxuICAgICAgJ2F1dGguc2lnblVwJzogJ9C30LDRgNC10LPQuNGB0YLRgNC40YDRg9C50YLQtdGB0YwnLFxuICAgICAgJ2F1dGguYXV0aFJlYXNvbic6ICcsINGH0YLQvtCx0Ysg0LfQsNGA0LDQsdC+0YLQsNGC0Ywg0LHQvtC70YzRiNC1JyxcbiAgICB9LFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgbWVzc2FnZXM7XG4iLCJpbXBvcnQgeyBNZXNzYWdlcyB9IGZyb20gJ0BpbnRlcmZhY2VzL2ludGVyZmFjZXMnO1xuXG5pbXBvcnQgeyBMYW5ndWFnZSB9IGZyb20gJ0Bjb25zdGFudHMvbGFuZ3VhZ2VzJztcblxuY29uc3QgbWVzc2FnZXM6IE1lc3NhZ2VzID0ge1xuICBbTGFuZ3VhZ2UuRU5dOiB7XG4gICAgbGFuZzogTGFuZ3VhZ2UuRU4sXG4gICAgbWVzc2FnZXM6IHtcbiAgICAgICdzaWduaW4uZW1haWwnOiAnRW1haWwnLFxuICAgICAgJ3NpZ25pbi5wYXNzd29yZCc6ICdQYXNzd29yZCcsXG4gICAgICAnc2lnbmluLnN1Ym1pdEJ1dHRvbic6ICdFbnRlcicsXG4gICAgfSxcbiAgfSxcbiAgW0xhbmd1YWdlLlJVXToge1xuICAgIGxhbmc6IExhbmd1YWdlLlJVLFxuICAgIG1lc3NhZ2VzOiB7XG4gICAgICAnc2lnbmluLmVtYWlsJzogJ0VtYWlsJyxcbiAgICAgICdzaWduaW4ucGFzc3dvcmQnOiAn0J/QsNGA0L7Qu9GMJyxcbiAgICAgICdzaWduaW4uc3VibWl0QnV0dG9uJzogJ9CS0L7QudGC0LgnLFxuICAgIH0sXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBtZXNzYWdlcztcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0LmNyZWF0ZUNvbnRleHQoKCkgPT4ge30pO1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImFuaW1hdGVkXCI6XCJBbmltYXRlZF9fYW5pbWF0ZWQtLUJtYWxrXCIsXCJmYWRlSW5SaWdodFwiOlwiQW5pbWF0ZWRfX2ZhZGVJblJpZ2h0LS0zcTJEQVwiLFwiZmFkZUluTGVmdFwiOlwiQW5pbWF0ZWRfX2ZhZGVJbkxlZnQtLTJSaWl5XCIsXCJmYWRlT3V0UmlnaHRcIjpcIkFuaW1hdGVkX19mYWRlT3V0UmlnaHQtLTM0ZnhyXCIsXCJmYWRlT3V0TGVmdFwiOlwiQW5pbWF0ZWRfX2ZhZGVPdXRMZWZ0LS0xOVdIQ1wifTsiLCJpbXBvcnQgeyBnZXROYW1lZEZvcm1hdCwgZmlsdGVyUHJvcHMsIGNyZWF0ZUVycm9yIH0gZnJvbSAnLi4vdXRpbHMnO1xuY29uc3QgTlVNQkVSX0ZPUk1BVF9PUFRJT05TID0gW1xuICAgICdsb2NhbGVNYXRjaGVyJyxcbiAgICAnc3R5bGUnLFxuICAgICdjdXJyZW5jeScsXG4gICAgJ2N1cnJlbmN5RGlzcGxheScsXG4gICAgJ3VuaXQnLFxuICAgICd1bml0RGlzcGxheScsXG4gICAgJ3VzZUdyb3VwaW5nJyxcbiAgICAnbWluaW11bUludGVnZXJEaWdpdHMnLFxuICAgICdtaW5pbXVtRnJhY3Rpb25EaWdpdHMnLFxuICAgICdtYXhpbXVtRnJhY3Rpb25EaWdpdHMnLFxuICAgICdtaW5pbXVtU2lnbmlmaWNhbnREaWdpdHMnLFxuICAgICdtYXhpbXVtU2lnbmlmaWNhbnREaWdpdHMnLFxuICAgIC8vIFVuaWZpZWQgTnVtYmVyRm9ybWF0IChTdGFnZSAzIGFzIG9mIDEwLzIyLzE5KVxuICAgICdjb21wYWN0RGlzcGxheScsXG4gICAgJ2N1cnJlbmN5RGlzcGxheScsXG4gICAgJ2N1cnJlbmN5U2lnbicsXG4gICAgJ25vdGF0aW9uJyxcbiAgICAnc2lnbkRpc3BsYXknLFxuICAgICd1bml0JyxcbiAgICAndW5pdERpc3BsYXknLFxuXTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRGb3JtYXR0ZXIoeyBsb2NhbGUsIGZvcm1hdHMsIG9uRXJyb3IsIH0sIGdldE51bWJlckZvcm1hdCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgeyBmb3JtYXQgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgZGVmYXVsdHMgPSAoKGZvcm1hdCAmJlxuICAgICAgICBnZXROYW1lZEZvcm1hdChmb3JtYXRzLCAnbnVtYmVyJywgZm9ybWF0LCBvbkVycm9yKSkgfHxcbiAgICAgICAge30pO1xuICAgIGNvbnN0IGZpbHRlcmVkT3B0aW9ucyA9IGZpbHRlclByb3BzKG9wdGlvbnMsIE5VTUJFUl9GT1JNQVRfT1BUSU9OUywgZGVmYXVsdHMpO1xuICAgIHJldHVybiBnZXROdW1iZXJGb3JtYXQobG9jYWxlLCBmaWx0ZXJlZE9wdGlvbnMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdE51bWJlcihjb25maWcsIGdldE51bWJlckZvcm1hdCwgdmFsdWUsIG9wdGlvbnMgPSB7fSkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBnZXRGb3JtYXR0ZXIoY29uZmlnLCBnZXROdW1iZXJGb3JtYXQsIG9wdGlvbnMpLmZvcm1hdCh2YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbmZpZy5vbkVycm9yKGNyZWF0ZUVycm9yKCdFcnJvciBmb3JtYXR0aW5nIG51bWJlci4nLCBlKSk7XG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdE51bWJlclRvUGFydHMoY29uZmlnLCBnZXROdW1iZXJGb3JtYXQsIHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gZ2V0Rm9ybWF0dGVyKGNvbmZpZywgZ2V0TnVtYmVyRm9ybWF0LCBvcHRpb25zKS5mb3JtYXRUb1BhcnRzKHZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uZmlnLm9uRXJyb3IoY3JlYXRlRXJyb3IoJ0Vycm9yIGZvcm1hdHRpbmcgbnVtYmVyLicsIGUpKTtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xufVxuIiwiaW1wb3J0IHsgZ2V0TmFtZWRGb3JtYXQsIGZpbHRlclByb3BzLCBjcmVhdGVFcnJvciB9IGZyb20gJy4uL3V0aWxzJztcbmNvbnN0IFJFTEFUSVZFX1RJTUVfRk9STUFUX09QVElPTlMgPSBbXG4gICAgJ251bWVyaWMnLFxuICAgICdzdHlsZScsXG5dO1xuZnVuY3Rpb24gZ2V0Rm9ybWF0dGVyKHsgbG9jYWxlLCBmb3JtYXRzLCBvbkVycm9yLCB9LCBnZXRSZWxhdGl2ZVRpbWVGb3JtYXQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgZm9ybWF0IH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGRlZmF1bHRzID0gKCEhZm9ybWF0ICYmIGdldE5hbWVkRm9ybWF0KGZvcm1hdHMsICdyZWxhdGl2ZScsIGZvcm1hdCwgb25FcnJvcikpIHx8IHt9O1xuICAgIGNvbnN0IGZpbHRlcmVkT3B0aW9ucyA9IGZpbHRlclByb3BzKG9wdGlvbnMsIFJFTEFUSVZFX1RJTUVfRk9STUFUX09QVElPTlMsIGRlZmF1bHRzKTtcbiAgICByZXR1cm4gZ2V0UmVsYXRpdmVUaW1lRm9ybWF0KGxvY2FsZSwgZmlsdGVyZWRPcHRpb25zKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZVRpbWUoY29uZmlnLCBnZXRSZWxhdGl2ZVRpbWVGb3JtYXQsIHZhbHVlLCB1bml0LCBvcHRpb25zID0ge30pIHtcbiAgICBpZiAoIXVuaXQpIHtcbiAgICAgICAgdW5pdCA9ICdzZWNvbmQnO1xuICAgIH1cbiAgICBjb25zdCBSZWxhdGl2ZVRpbWVGb3JtYXQgPSBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdDtcbiAgICBpZiAoIVJlbGF0aXZlVGltZUZvcm1hdCkge1xuICAgICAgICBjb25maWcub25FcnJvcihjcmVhdGVFcnJvcihgSW50bC5SZWxhdGl2ZVRpbWVGb3JtYXQgaXMgbm90IGF2YWlsYWJsZSBpbiB0aGlzIGVudmlyb25tZW50LlxuVHJ5IHBvbHlmaWxsaW5nIGl0IHVzaW5nIFwiQGZvcm1hdGpzL2ludGwtcmVsYXRpdmV0aW1lZm9ybWF0XCJcbmApKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGdldEZvcm1hdHRlcihjb25maWcsIGdldFJlbGF0aXZlVGltZUZvcm1hdCwgb3B0aW9ucykuZm9ybWF0KHZhbHVlLCB1bml0KTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uZmlnLm9uRXJyb3IoY3JlYXRlRXJyb3IoJ0Vycm9yIGZvcm1hdHRpbmcgcmVsYXRpdmUgdGltZS4nLCBlKSk7XG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xufVxuIiwiLypcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuXG4gKiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG5pbXBvcnQgeyBjcmVhdGVFcnJvciwgZmlsdGVyUHJvcHMsIGdldE5hbWVkRm9ybWF0IH0gZnJvbSAnLi4vdXRpbHMnO1xuY29uc3QgREFURV9USU1FX0ZPUk1BVF9PUFRJT05TID0gW1xuICAgICdsb2NhbGVNYXRjaGVyJyxcbiAgICAnZm9ybWF0TWF0Y2hlcicsXG4gICAgJ3RpbWVab25lJyxcbiAgICAnaG91cjEyJyxcbiAgICAnd2Vla2RheScsXG4gICAgJ2VyYScsXG4gICAgJ3llYXInLFxuICAgICdtb250aCcsXG4gICAgJ2RheScsXG4gICAgJ2hvdXInLFxuICAgICdtaW51dGUnLFxuICAgICdzZWNvbmQnLFxuICAgICd0aW1lWm9uZU5hbWUnLFxuXTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRGb3JtYXR0ZXIoeyBsb2NhbGUsIGZvcm1hdHMsIG9uRXJyb3IsIHRpbWVab25lLCB9LCB0eXBlLCBnZXREYXRlVGltZUZvcm1hdCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgeyBmb3JtYXQgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgZGVmYXVsdHMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sICh0aW1lWm9uZSAmJiB7IHRpbWVab25lIH0pKSwgKGZvcm1hdCAmJiBnZXROYW1lZEZvcm1hdChmb3JtYXRzLCB0eXBlLCBmb3JtYXQsIG9uRXJyb3IpKSk7XG4gICAgbGV0IGZpbHRlcmVkT3B0aW9ucyA9IGZpbHRlclByb3BzKG9wdGlvbnMsIERBVEVfVElNRV9GT1JNQVRfT1BUSU9OUywgZGVmYXVsdHMpO1xuICAgIGlmICh0eXBlID09PSAndGltZScgJiZcbiAgICAgICAgIWZpbHRlcmVkT3B0aW9ucy5ob3VyICYmXG4gICAgICAgICFmaWx0ZXJlZE9wdGlvbnMubWludXRlICYmXG4gICAgICAgICFmaWx0ZXJlZE9wdGlvbnMuc2Vjb25kKSB7XG4gICAgICAgIC8vIEFkZCBkZWZhdWx0IGZvcm1hdHRpbmcgb3B0aW9ucyBpZiBob3VyLCBtaW51dGUsIG9yIHNlY29uZCBpc24ndCBkZWZpbmVkLlxuICAgICAgICBmaWx0ZXJlZE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGZpbHRlcmVkT3B0aW9ucyksIHsgaG91cjogJ251bWVyaWMnLCBtaW51dGU6ICdudW1lcmljJyB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGdldERhdGVUaW1lRm9ybWF0KGxvY2FsZSwgZmlsdGVyZWRPcHRpb25zKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXREYXRlKGNvbmZpZywgZ2V0RGF0ZVRpbWVGb3JtYXQsIHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBkYXRlID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IG5ldyBEYXRlKHZhbHVlIHx8IDApIDogdmFsdWU7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGdldEZvcm1hdHRlcihjb25maWcsICdkYXRlJywgZ2V0RGF0ZVRpbWVGb3JtYXQsIG9wdGlvbnMpLmZvcm1hdChkYXRlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uZmlnLm9uRXJyb3IoY3JlYXRlRXJyb3IoJ0Vycm9yIGZvcm1hdHRpbmcgZGF0ZS4nLCBlKSk7XG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcoZGF0ZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0VGltZShjb25maWcsIGdldERhdGVUaW1lRm9ybWF0LCB2YWx1ZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgZGF0ZSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBuZXcgRGF0ZSh2YWx1ZSB8fCAwKSA6IHZhbHVlO1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBnZXRGb3JtYXR0ZXIoY29uZmlnLCAndGltZScsIGdldERhdGVUaW1lRm9ybWF0LCBvcHRpb25zKS5mb3JtYXQoZGF0ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbmZpZy5vbkVycm9yKGNyZWF0ZUVycm9yKCdFcnJvciBmb3JtYXR0aW5nIHRpbWUuJywgZSkpO1xuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nKGRhdGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdERhdGVUb1BhcnRzKGNvbmZpZywgZ2V0RGF0ZVRpbWVGb3JtYXQsIHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBkYXRlID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IG5ldyBEYXRlKHZhbHVlIHx8IDApIDogdmFsdWU7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGdldEZvcm1hdHRlcihjb25maWcsICdkYXRlJywgZ2V0RGF0ZVRpbWVGb3JtYXQsIG9wdGlvbnMpLmZvcm1hdFRvUGFydHMoZGF0ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbmZpZy5vbkVycm9yKGNyZWF0ZUVycm9yKCdFcnJvciBmb3JtYXR0aW5nIGRhdGUuJywgZSkpO1xuICAgIH1cbiAgICByZXR1cm4gW107XG59XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0VGltZVRvUGFydHMoY29uZmlnLCBnZXREYXRlVGltZUZvcm1hdCwgdmFsdWUsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGRhdGUgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gbmV3IERhdGUodmFsdWUgfHwgMCkgOiB2YWx1ZTtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gZ2V0Rm9ybWF0dGVyKGNvbmZpZywgJ3RpbWUnLCBnZXREYXRlVGltZUZvcm1hdCwgb3B0aW9ucykuZm9ybWF0VG9QYXJ0cyhkYXRlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uZmlnLm9uRXJyb3IoY3JlYXRlRXJyb3IoJ0Vycm9yIGZvcm1hdHRpbmcgdGltZS4nLCBlKSk7XG4gICAgfVxuICAgIHJldHVybiBbXTtcbn1cbiIsImltcG9ydCB7IGZpbHRlclByb3BzLCBjcmVhdGVFcnJvciB9IGZyb20gJy4uL3V0aWxzJztcbmNvbnN0IFBMVVJBTF9GT1JNQVRfT1BUSU9OUyA9IFtcbiAgICAnbG9jYWxlTWF0Y2hlcicsXG4gICAgJ3R5cGUnLFxuXTtcbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRQbHVyYWwoeyBsb2NhbGUsIG9uRXJyb3IgfSwgZ2V0UGx1cmFsUnVsZXMsIHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgICBpZiAoIUludGwuUGx1cmFsUnVsZXMpIHtcbiAgICAgICAgb25FcnJvcihjcmVhdGVFcnJvcihgSW50bC5QbHVyYWxSdWxlcyBpcyBub3QgYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnQuXG5UcnkgcG9seWZpbGxpbmcgaXQgdXNpbmcgXCJAZm9ybWF0anMvaW50bC1wbHVyYWxydWxlc1wiXG5gKSk7XG4gICAgfVxuICAgIGNvbnN0IGZpbHRlcmVkT3B0aW9ucyA9IGZpbHRlclByb3BzKG9wdGlvbnMsIFBMVVJBTF9GT1JNQVRfT1BUSU9OUyk7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGdldFBsdXJhbFJ1bGVzKGxvY2FsZSwgZmlsdGVyZWRPcHRpb25zKS5zZWxlY3QodmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBvbkVycm9yKGNyZWF0ZUVycm9yKCdFcnJvciBmb3JtYXR0aW5nIHBsdXJhbC4nLCBlKSk7XG4gICAgfVxuICAgIHJldHVybiAnb3RoZXInO1xufVxuIiwiLypcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuXG4gKiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICdAZm9ybWF0anMvaW50bC11dGlscyc7XG5pbXBvcnQgeyBjcmVhdGVFcnJvciwgZXNjYXBlIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IEludGxNZXNzYWdlRm9ybWF0IGZyb20gJ2ludGwtbWVzc2FnZWZvcm1hdCc7XG5mdW5jdGlvbiBzZXRUaW1lWm9uZUluT3B0aW9ucyhvcHRzLCB0aW1lWm9uZSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvcHRzKS5yZWR1Y2UoKGFsbCwgaykgPT4ge1xuICAgICAgICBhbGxba10gPSBPYmplY3QuYXNzaWduKHsgdGltZVpvbmUgfSwgb3B0c1trXSk7XG4gICAgICAgIHJldHVybiBhbGw7XG4gICAgfSwge30pO1xufVxuZnVuY3Rpb24gZGVlcE1lcmdlT3B0aW9ucyhvcHRzMSwgb3B0czIpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRzMSksIG9wdHMyKSk7XG4gICAgcmV0dXJuIGtleXMucmVkdWNlKChhbGwsIGspID0+IHtcbiAgICAgICAgYWxsW2tdID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCAob3B0czFba10gfHwge30pKSwgKG9wdHMyW2tdIHx8IHt9KSk7XG4gICAgICAgIHJldHVybiBhbGw7XG4gICAgfSwge30pO1xufVxuZnVuY3Rpb24gZGVlcE1lcmdlRm9ybWF0c0FuZFNldFRpbWVab25lKGYxLCB0aW1lWm9uZSkge1xuICAgIGlmICghdGltZVpvbmUpIHtcbiAgICAgICAgcmV0dXJuIGYxO1xuICAgIH1cbiAgICBjb25zdCBtZkZvcm1hdHMgPSBJbnRsTWVzc2FnZUZvcm1hdC5mb3JtYXRzO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbWZGb3JtYXRzKSwgZjEpLCB7IGRhdGU6IGRlZXBNZXJnZU9wdGlvbnMoc2V0VGltZVpvbmVJbk9wdGlvbnMobWZGb3JtYXRzLmRhdGUsIHRpbWVab25lKSwgc2V0VGltZVpvbmVJbk9wdGlvbnMoZjEuZGF0ZSB8fCB7fSwgdGltZVpvbmUpKSwgdGltZTogZGVlcE1lcmdlT3B0aW9ucyhzZXRUaW1lWm9uZUluT3B0aW9ucyhtZkZvcm1hdHMudGltZSwgdGltZVpvbmUpLCBzZXRUaW1lWm9uZUluT3B0aW9ucyhmMS50aW1lIHx8IHt9LCB0aW1lWm9uZSkpIH0pO1xufVxuZXhwb3J0IGNvbnN0IHByZXBhcmVJbnRsTWVzc2FnZUZvcm1hdEh0bWxPdXRwdXQgPSAoY2h1bmtzKSA9PiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAuLi5jaHVua3MpO1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2UoeyBsb2NhbGUsIGZvcm1hdHMsIG1lc3NhZ2VzLCBkZWZhdWx0TG9jYWxlLCBkZWZhdWx0Rm9ybWF0cywgb25FcnJvciwgdGltZVpvbmUsIH0sIHN0YXRlLCBtZXNzYWdlRGVzY3JpcHRvciA9IHsgaWQ6ICcnIH0sIHZhbHVlcyA9IHt9KSB7XG4gICAgY29uc3QgeyBpZCwgZGVmYXVsdE1lc3NhZ2UgfSA9IG1lc3NhZ2VEZXNjcmlwdG9yO1xuICAgIC8vIGBpZGAgaXMgYSByZXF1aXJlZCBmaWVsZCBvZiBhIE1lc3NhZ2UgRGVzY3JpcHRvci5cbiAgICBpbnZhcmlhbnQoISFpZCwgJ1tSZWFjdCBJbnRsXSBBbiBgaWRgIG11c3QgYmUgcHJvdmlkZWQgdG8gZm9ybWF0IGEgbWVzc2FnZS4nKTtcbiAgICBjb25zdCBtZXNzYWdlID0gbWVzc2FnZXMgJiYgbWVzc2FnZXNbU3RyaW5nKGlkKV07XG4gICAgZm9ybWF0cyA9IGRlZXBNZXJnZUZvcm1hdHNBbmRTZXRUaW1lWm9uZShmb3JtYXRzLCB0aW1lWm9uZSk7XG4gICAgZGVmYXVsdEZvcm1hdHMgPSBkZWVwTWVyZ2VGb3JtYXRzQW5kU2V0VGltZVpvbmUoZGVmYXVsdEZvcm1hdHMsIHRpbWVab25lKTtcbiAgICBsZXQgZm9ybWF0dGVkTWVzc2FnZVBhcnRzID0gW107XG4gICAgaWYgKG1lc3NhZ2UpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlciA9IHN0YXRlLmdldE1lc3NhZ2VGb3JtYXQobWVzc2FnZSwgbG9jYWxlLCBmb3JtYXRzLCB7XG4gICAgICAgICAgICAgICAgZm9ybWF0dGVyczogc3RhdGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZvcm1hdHRlZE1lc3NhZ2VQYXJ0cyA9IGZvcm1hdHRlci5mb3JtYXRIVE1MTWVzc2FnZSh2YWx1ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBvbkVycm9yKGNyZWF0ZUVycm9yKGBFcnJvciBmb3JtYXR0aW5nIG1lc3NhZ2U6IFwiJHtpZH1cIiBmb3IgbG9jYWxlOiBcIiR7bG9jYWxlfVwiYCArXG4gICAgICAgICAgICAgICAgKGRlZmF1bHRNZXNzYWdlID8gJywgdXNpbmcgZGVmYXVsdCBtZXNzYWdlIGFzIGZhbGxiYWNrLicgOiAnJyksIGUpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gVGhpcyBwcmV2ZW50cyB3YXJuaW5ncyBmcm9tIGxpdHRlcmluZyB0aGUgY29uc29sZSBpbiBkZXZlbG9wbWVudFxuICAgICAgICAvLyB3aGVuIG5vIGBtZXNzYWdlc2AgYXJlIHBhc3NlZCBpbnRvIHRoZSA8SW50bFByb3ZpZGVyPiBmb3IgdGhlXG4gICAgICAgIC8vIGRlZmF1bHQgbG9jYWxlLCBhbmQgYSBkZWZhdWx0IG1lc3NhZ2UgaXMgaW4gdGhlIHNvdXJjZS5cbiAgICAgICAgaWYgKCFkZWZhdWx0TWVzc2FnZSB8fFxuICAgICAgICAgICAgKGxvY2FsZSAmJiBsb2NhbGUudG9Mb3dlckNhc2UoKSAhPT0gZGVmYXVsdExvY2FsZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgICAgb25FcnJvcihjcmVhdGVFcnJvcihgTWlzc2luZyBtZXNzYWdlOiBcIiR7aWR9XCIgZm9yIGxvY2FsZTogXCIke2xvY2FsZX1cImAgK1xuICAgICAgICAgICAgICAgIChkZWZhdWx0TWVzc2FnZSA/ICcsIHVzaW5nIGRlZmF1bHQgbWVzc2FnZSBhcyBmYWxsYmFjay4nIDogJycpKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFmb3JtYXR0ZWRNZXNzYWdlUGFydHMubGVuZ3RoICYmIGRlZmF1bHRNZXNzYWdlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBmb3JtYXR0ZXIgPSBzdGF0ZS5nZXRNZXNzYWdlRm9ybWF0KGRlZmF1bHRNZXNzYWdlLCBkZWZhdWx0TG9jYWxlLCBkZWZhdWx0Rm9ybWF0cyk7XG4gICAgICAgICAgICBmb3JtYXR0ZWRNZXNzYWdlUGFydHMgPSBmb3JtYXR0ZXIuZm9ybWF0SFRNTE1lc3NhZ2UodmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgb25FcnJvcihjcmVhdGVFcnJvcihgRXJyb3IgZm9ybWF0dGluZyB0aGUgZGVmYXVsdCBtZXNzYWdlIGZvcjogXCIke2lkfVwiYCwgZSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghZm9ybWF0dGVkTWVzc2FnZVBhcnRzLmxlbmd0aCkge1xuICAgICAgICBvbkVycm9yKGNyZWF0ZUVycm9yKGBDYW5ub3QgZm9ybWF0IG1lc3NhZ2U6IFwiJHtpZH1cIiwgYCArXG4gICAgICAgICAgICBgdXNpbmcgbWVzc2FnZSAke21lc3NhZ2UgfHwgZGVmYXVsdE1lc3NhZ2UgPyAnc291cmNlJyA6ICdpZCd9IGFzIGZhbGxiYWNrLmApKTtcbiAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2UgfHwgZGVmYXVsdE1lc3NhZ2UgfHwgU3RyaW5nKGlkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVmYXVsdE1lc3NhZ2UgfHwgU3RyaW5nKGlkKTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdHRlZE1lc3NhZ2VQYXJ0cy5sZW5ndGggPT09IDEgJiZcbiAgICAgICAgdHlwZW9mIGZvcm1hdHRlZE1lc3NhZ2VQYXJ0c1swXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlZE1lc3NhZ2VQYXJ0c1swXSB8fCBkZWZhdWx0TWVzc2FnZSB8fCBTdHJpbmcoaWQpO1xuICAgIH1cbiAgICByZXR1cm4gcHJlcGFyZUludGxNZXNzYWdlRm9ybWF0SHRtbE91dHB1dChmb3JtYXR0ZWRNZXNzYWdlUGFydHMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEhUTUxNZXNzYWdlKGNvbmZpZywgc3RhdGUsIG1lc3NhZ2VEZXNjcmlwdG9yID0geyBpZDogJycgfSwgcmF3VmFsdWVzID0ge30pIHtcbiAgICAvLyBQcm9jZXNzIGFsbCB0aGUgdmFsdWVzIGJlZm9yZSB0aGV5IGFyZSB1c2VkIHdoZW4gZm9ybWF0dGluZyB0aGUgSUNVXG4gICAgLy8gTWVzc2FnZSBzdHJpbmcuIFNpbmNlIHRoZSBmb3JtYXR0ZWQgbWVzc2FnZSBtaWdodCBiZSBpbmplY3RlZCB2aWFcbiAgICAvLyBgaW5uZXJIVE1MYCwgYWxsIFN0cmluZy1iYXNlZCB2YWx1ZXMgbmVlZCB0byBiZSBIVE1MLWVzY2FwZWQuXG4gICAgY29uc3QgZXNjYXBlZFZhbHVlcyA9IE9iamVjdC5rZXlzKHJhd1ZhbHVlcykucmVkdWNlKChlc2NhcGVkLCBuYW1lKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcmF3VmFsdWVzW25hbWVdO1xuICAgICAgICBlc2NhcGVkW25hbWVdID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IGVzY2FwZSh2YWx1ZSkgOiB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGVzY2FwZWQ7XG4gICAgfSwge30pO1xuICAgIHJldHVybiBmb3JtYXRNZXNzYWdlKGNvbmZpZywgc3RhdGUsIG1lc3NhZ2VEZXNjcmlwdG9yLCBlc2NhcGVkVmFsdWVzKTtcbn1cbiIsImltcG9ydCB7IGZpbHRlclByb3BzLCBjcmVhdGVFcnJvciB9IGZyb20gJy4uL3V0aWxzJztcbmNvbnN0IExJU1RfRk9STUFUX09QVElPTlMgPSBbXG4gICAgJ2xvY2FsZU1hdGNoZXInLFxuICAgICd0eXBlJyxcbiAgICAnc3R5bGUnLFxuXTtcbmNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5mdW5jdGlvbiBnZW5lcmF0ZVRva2VuKGkpIHtcbiAgICByZXR1cm4gYCR7bm93fV8ke2l9XyR7bm93fWA7XG59XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0TGlzdCh7IGxvY2FsZSwgb25FcnJvciB9LCBnZXRMaXN0Rm9ybWF0LCB2YWx1ZXMsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IExpc3RGb3JtYXQgPSBJbnRsLkxpc3RGb3JtYXQ7XG4gICAgaWYgKCFMaXN0Rm9ybWF0KSB7XG4gICAgICAgIG9uRXJyb3IoY3JlYXRlRXJyb3IoYEludGwuTGlzdEZvcm1hdCBpcyBub3QgYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnQuXG5UcnkgcG9seWZpbGxpbmcgaXQgdXNpbmcgXCJAZm9ybWF0anMvaW50bC1saXN0Zm9ybWF0XCJcbmApKTtcbiAgICB9XG4gICAgY29uc3QgZmlsdGVyZWRPcHRpb25zID0gZmlsdGVyUHJvcHMob3B0aW9ucywgTElTVF9GT1JNQVRfT1BUSU9OUyk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmljaFZhbHVlcyA9IHt9O1xuICAgICAgICBjb25zdCBzZXJpYWxpemVkVmFsdWVzID0gdmFsdWVzLm1hcCgodiwgaSkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gZ2VuZXJhdGVUb2tlbihpKTtcbiAgICAgICAgICAgICAgICByaWNoVmFsdWVzW2lkXSA9IHY7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyh2KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghT2JqZWN0LmtleXMocmljaFZhbHVlcykubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0TGlzdEZvcm1hdChsb2NhbGUsIGZpbHRlcmVkT3B0aW9ucykuZm9ybWF0KHNlcmlhbGl6ZWRWYWx1ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnRzID0gZ2V0TGlzdEZvcm1hdChsb2NhbGUsIGZpbHRlcmVkT3B0aW9ucykuZm9ybWF0VG9QYXJ0cyhzZXJpYWxpemVkVmFsdWVzKTtcbiAgICAgICAgcmV0dXJuIHBhcnRzLnJlZHVjZSgoYWxsLCBlbCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsID0gZWwudmFsdWU7XG4gICAgICAgICAgICBpZiAocmljaFZhbHVlc1t2YWxdKSB7XG4gICAgICAgICAgICAgICAgYWxsLnB1c2gocmljaFZhbHVlc1t2YWxdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhbGxbYWxsLmxlbmd0aCAtIDFdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGFsbFthbGwubGVuZ3RoIC0gMV0gKz0gdmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYWxsLnB1c2godmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhbGw7XG4gICAgICAgIH0sIFtdKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgb25FcnJvcihjcmVhdGVFcnJvcignRXJyb3IgZm9ybWF0dGluZyBsaXN0LicsIGUpKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlcztcbn1cbiIsImltcG9ydCB7IGZpbHRlclByb3BzLCBjcmVhdGVFcnJvciB9IGZyb20gJy4uL3V0aWxzJztcbmNvbnN0IERJU1BMQVlfTkFNRVNfT1BUT05TID0gW1xuICAgICdsb2NhbGVNYXRjaGVyJyxcbiAgICAnc3R5bGUnLFxuICAgICd0eXBlJyxcbiAgICAnZmFsbGJhY2snLFxuXTtcbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXREaXNwbGF5TmFtZSh7IGxvY2FsZSwgb25FcnJvciB9LCBnZXREaXNwbGF5TmFtZXMsIHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBEaXNwbGF5TmFtZXMgPSBJbnRsLkRpc3BsYXlOYW1lcztcbiAgICBpZiAoIURpc3BsYXlOYW1lcykge1xuICAgICAgICBvbkVycm9yKGNyZWF0ZUVycm9yKGBJbnRsLkRpc3BsYXlOYW1lcyBpcyBub3QgYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnQuXG5UcnkgcG9seWZpbGxpbmcgaXQgdXNpbmcgXCJAZm9ybWF0anMvaW50bC1kaXNwbGF5bmFtZXNcIlxuYCkpO1xuICAgIH1cbiAgICBjb25zdCBmaWx0ZXJlZE9wdGlvbnMgPSBmaWx0ZXJQcm9wcyhvcHRpb25zLCBESVNQTEFZX05BTUVTX09QVE9OUyk7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGdldERpc3BsYXlOYW1lcyhsb2NhbGUsIGZpbHRlcmVkT3B0aW9ucykub2YodmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBvbkVycm9yKGNyZWF0ZUVycm9yKCdFcnJvciBmb3JtYXR0aW5nIGRpc3BsYXkgbmFtZS4nLCBlKSk7XG4gICAgfVxufVxuIiwiLypcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuXG4gKiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJy4vaW5qZWN0SW50bCc7XG5pbXBvcnQgeyBjcmVhdGVFcnJvciwgREVGQVVMVF9JTlRMX0NPTkZJRywgY3JlYXRlRm9ybWF0dGVycywgaW52YXJpYW50SW50bENvbnRleHQsIGNyZWF0ZUludGxDYWNoZSwgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBmb3JtYXROdW1iZXIsIGZvcm1hdE51bWJlclRvUGFydHMgfSBmcm9tICcuLi9mb3JtYXR0ZXJzL251bWJlcic7XG5pbXBvcnQgeyBmb3JtYXRSZWxhdGl2ZVRpbWUgfSBmcm9tICcuLi9mb3JtYXR0ZXJzL3JlbGF0aXZlVGltZSc7XG5pbXBvcnQgeyBmb3JtYXREYXRlLCBmb3JtYXRUaW1lLCBmb3JtYXREYXRlVG9QYXJ0cywgZm9ybWF0VGltZVRvUGFydHMsIH0gZnJvbSAnLi4vZm9ybWF0dGVycy9kYXRlVGltZSc7XG5pbXBvcnQgeyBmb3JtYXRQbHVyYWwgfSBmcm9tICcuLi9mb3JtYXR0ZXJzL3BsdXJhbCc7XG5pbXBvcnQgeyBmb3JtYXRNZXNzYWdlLCBmb3JtYXRIVE1MTWVzc2FnZSB9IGZyb20gJy4uL2Zvcm1hdHRlcnMvbWVzc2FnZSc7XG5pbXBvcnQgKiBhcyBzaGFsbG93RXF1YWxzXyBmcm9tICdzaGFsbG93LWVxdWFsL29iamVjdHMnO1xuaW1wb3J0IHsgZm9ybWF0TGlzdCB9IGZyb20gJy4uL2Zvcm1hdHRlcnMvbGlzdCc7XG5pbXBvcnQgeyBmb3JtYXREaXNwbGF5TmFtZSB9IGZyb20gJy4uL2Zvcm1hdHRlcnMvZGlzcGxheU5hbWUnO1xuY29uc3Qgc2hhbGxvd0VxdWFscyA9IHNoYWxsb3dFcXVhbHNfLmRlZmF1bHQgfHwgc2hhbGxvd0VxdWFsc187XG5mdW5jdGlvbiBwcm9jZXNzSW50bENvbmZpZyhjb25maWcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBsb2NhbGU6IGNvbmZpZy5sb2NhbGUsXG4gICAgICAgIHRpbWVab25lOiBjb25maWcudGltZVpvbmUsXG4gICAgICAgIGZvcm1hdHM6IGNvbmZpZy5mb3JtYXRzLFxuICAgICAgICB0ZXh0Q29tcG9uZW50OiBjb25maWcudGV4dENvbXBvbmVudCxcbiAgICAgICAgbWVzc2FnZXM6IGNvbmZpZy5tZXNzYWdlcyxcbiAgICAgICAgZGVmYXVsdExvY2FsZTogY29uZmlnLmRlZmF1bHRMb2NhbGUsXG4gICAgICAgIGRlZmF1bHRGb3JtYXRzOiBjb25maWcuZGVmYXVsdEZvcm1hdHMsXG4gICAgICAgIG9uRXJyb3I6IGNvbmZpZy5vbkVycm9yLFxuICAgIH07XG59XG4vKipcbiAqIENyZWF0ZSBpbnRsIG9iamVjdFxuICogQHBhcmFtIGNvbmZpZyBpbnRsIGNvbmZpZ1xuICogQHBhcmFtIGNhY2hlIGNhY2hlIGZvciBmb3JtYXR0ZXIgaW5zdGFuY2VzIHRvIHByZXZlbnQgbWVtb3J5IGxlYWtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUludGwoY29uZmlnLCBjYWNoZSkge1xuICAgIGNvbnN0IGZvcm1hdHRlcnMgPSBjcmVhdGVGb3JtYXR0ZXJzKGNhY2hlKTtcbiAgICBjb25zdCByZXNvbHZlZENvbmZpZyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9JTlRMX0NPTkZJRyksIGNvbmZpZyk7XG4gICAgY29uc3QgeyBsb2NhbGUsIGRlZmF1bHRMb2NhbGUsIG9uRXJyb3IgfSA9IHJlc29sdmVkQ29uZmlnO1xuICAgIGlmICghbG9jYWxlKSB7XG4gICAgICAgIGlmIChvbkVycm9yKSB7XG4gICAgICAgICAgICBvbkVycm9yKGNyZWF0ZUVycm9yKGBcImxvY2FsZVwiIHdhcyBub3QgY29uZmlndXJlZCwgdXNpbmcgXCIke2RlZmF1bHRMb2NhbGV9XCIgYXMgZmFsbGJhY2suIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZm9ybWF0anMvcmVhY3QtaW50bC9ibG9iL21hc3Rlci9kb2NzL0FQSS5tZCNpbnRsc2hhcGUgZm9yIG1vcmUgZGV0YWlsc2ApKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTaW5jZSB0aGVyZSdzIG5vIHJlZ2lzdGVyZWQgbG9jYWxlIGRhdGEgZm9yIGBsb2NhbGVgLCB0aGlzIHdpbGxcbiAgICAgICAgLy8gZmFsbGJhY2sgdG8gdGhlIGBkZWZhdWx0TG9jYWxlYCB0byBtYWtlIHN1cmUgdGhpbmdzIGNhbiByZW5kZXIuXG4gICAgICAgIC8vIFRoZSBgbWVzc2FnZXNgIGFyZSBvdmVycmlkZGVuIHRvIHRoZSBgZGVmYXVsdFByb3BzYCBlbXB0eSBvYmplY3RcbiAgICAgICAgLy8gdG8gbWFpbnRhaW4gcmVmZXJlbnRpYWwgZXF1YWxpdHkgYWNyb3NzIHJlLXJlbmRlcnMuIEl0J3MgYXNzdW1lZFxuICAgICAgICAvLyBlYWNoIDxGb3JtYXR0ZWRNZXNzYWdlPiBjb250YWlucyBhIGBkZWZhdWx0TWVzc2FnZWAgcHJvcC5cbiAgICAgICAgcmVzb2x2ZWRDb25maWcubG9jYWxlID0gcmVzb2x2ZWRDb25maWcuZGVmYXVsdExvY2FsZSB8fCAnZW4nO1xuICAgIH1cbiAgICBlbHNlIGlmICghSW50bC5OdW1iZXJGb3JtYXQuc3VwcG9ydGVkTG9jYWxlc09mKGxvY2FsZSkubGVuZ3RoICYmIG9uRXJyb3IpIHtcbiAgICAgICAgb25FcnJvcihjcmVhdGVFcnJvcihgTWlzc2luZyBsb2NhbGUgZGF0YSBmb3IgbG9jYWxlOiBcIiR7bG9jYWxlfVwiIGluIEludGwuTnVtYmVyRm9ybWF0LiBVc2luZyBkZWZhdWx0IGxvY2FsZTogXCIke2RlZmF1bHRMb2NhbGV9XCIgYXMgZmFsbGJhY2suIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZm9ybWF0anMvcmVhY3QtaW50bC9ibG9iL21hc3Rlci9kb2NzL0dldHRpbmctU3RhcnRlZC5tZCNydW50aW1lLXJlcXVpcmVtZW50cyBmb3IgbW9yZSBkZXRhaWxzYCkpO1xuICAgIH1cbiAgICBlbHNlIGlmICghSW50bC5EYXRlVGltZUZvcm1hdC5zdXBwb3J0ZWRMb2NhbGVzT2YobG9jYWxlKS5sZW5ndGggJiZcbiAgICAgICAgb25FcnJvcikge1xuICAgICAgICBvbkVycm9yKGNyZWF0ZUVycm9yKGBNaXNzaW5nIGxvY2FsZSBkYXRhIGZvciBsb2NhbGU6IFwiJHtsb2NhbGV9XCIgaW4gSW50bC5EYXRlVGltZUZvcm1hdC4gVXNpbmcgZGVmYXVsdCBsb2NhbGU6IFwiJHtkZWZhdWx0TG9jYWxlfVwiIGFzIGZhbGxiYWNrLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2Zvcm1hdGpzL3JlYWN0LWludGwvYmxvYi9tYXN0ZXIvZG9jcy9HZXR0aW5nLVN0YXJ0ZWQubWQjcnVudGltZS1yZXF1aXJlbWVudHMgZm9yIG1vcmUgZGV0YWlsc2ApKTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzb2x2ZWRDb25maWcpLCB7IGZvcm1hdHRlcnMsIGZvcm1hdE51bWJlcjogZm9ybWF0TnVtYmVyLmJpbmQobnVsbCwgcmVzb2x2ZWRDb25maWcsIGZvcm1hdHRlcnMuZ2V0TnVtYmVyRm9ybWF0KSwgZm9ybWF0TnVtYmVyVG9QYXJ0czogZm9ybWF0TnVtYmVyVG9QYXJ0cy5iaW5kKG51bGwsIHJlc29sdmVkQ29uZmlnLCBmb3JtYXR0ZXJzLmdldE51bWJlckZvcm1hdCksIGZvcm1hdFJlbGF0aXZlVGltZTogZm9ybWF0UmVsYXRpdmVUaW1lLmJpbmQobnVsbCwgcmVzb2x2ZWRDb25maWcsIGZvcm1hdHRlcnMuZ2V0UmVsYXRpdmVUaW1lRm9ybWF0KSwgZm9ybWF0RGF0ZTogZm9ybWF0RGF0ZS5iaW5kKG51bGwsIHJlc29sdmVkQ29uZmlnLCBmb3JtYXR0ZXJzLmdldERhdGVUaW1lRm9ybWF0KSwgZm9ybWF0RGF0ZVRvUGFydHM6IGZvcm1hdERhdGVUb1BhcnRzLmJpbmQobnVsbCwgcmVzb2x2ZWRDb25maWcsIGZvcm1hdHRlcnMuZ2V0RGF0ZVRpbWVGb3JtYXQpLCBmb3JtYXRUaW1lOiBmb3JtYXRUaW1lLmJpbmQobnVsbCwgcmVzb2x2ZWRDb25maWcsIGZvcm1hdHRlcnMuZ2V0RGF0ZVRpbWVGb3JtYXQpLCBmb3JtYXRUaW1lVG9QYXJ0czogZm9ybWF0VGltZVRvUGFydHMuYmluZChudWxsLCByZXNvbHZlZENvbmZpZywgZm9ybWF0dGVycy5nZXREYXRlVGltZUZvcm1hdCksIGZvcm1hdFBsdXJhbDogZm9ybWF0UGx1cmFsLmJpbmQobnVsbCwgcmVzb2x2ZWRDb25maWcsIGZvcm1hdHRlcnMuZ2V0UGx1cmFsUnVsZXMpLCBmb3JtYXRNZXNzYWdlOiBmb3JtYXRNZXNzYWdlLmJpbmQobnVsbCwgcmVzb2x2ZWRDb25maWcsIGZvcm1hdHRlcnMpLCBmb3JtYXRIVE1MTWVzc2FnZTogZm9ybWF0SFRNTE1lc3NhZ2UuYmluZChudWxsLCByZXNvbHZlZENvbmZpZywgZm9ybWF0dGVycyksIGZvcm1hdExpc3Q6IGZvcm1hdExpc3QuYmluZChudWxsLCByZXNvbHZlZENvbmZpZywgZm9ybWF0dGVycy5nZXRMaXN0Rm9ybWF0KSwgZm9ybWF0RGlzcGxheU5hbWU6IGZvcm1hdERpc3BsYXlOYW1lLmJpbmQobnVsbCwgcmVzb2x2ZWRDb25maWcsIGZvcm1hdHRlcnMuZ2V0RGlzcGxheU5hbWVzKSB9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEludGxQcm92aWRlciBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNhY2hlID0gY3JlYXRlSW50bENhY2hlKCk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBjYWNoZTogdGhpcy5jYWNoZSxcbiAgICAgICAgICAgIGludGw6IGNyZWF0ZUludGwocHJvY2Vzc0ludGxDb25maWcodGhpcy5wcm9wcyksIHRoaXMuY2FjaGUpLFxuICAgICAgICAgICAgcHJldkNvbmZpZzogcHJvY2Vzc0ludGxDb25maWcodGhpcy5wcm9wcyksXG4gICAgICAgIH07XG4gICAgfVxuICAgIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIHsgcHJldkNvbmZpZywgY2FjaGUgfSkge1xuICAgICAgICBjb25zdCBjb25maWcgPSBwcm9jZXNzSW50bENvbmZpZyhwcm9wcyk7XG4gICAgICAgIGlmICghc2hhbGxvd0VxdWFscyhwcmV2Q29uZmlnLCBjb25maWcpKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGludGw6IGNyZWF0ZUludGwoY29uZmlnLCBjYWNoZSksXG4gICAgICAgICAgICAgICAgcHJldkNvbmZpZzogY29uZmlnLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBpbnZhcmlhbnRJbnRsQ29udGV4dCh0aGlzLnN0YXRlLmludGwpO1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChQcm92aWRlciwgeyB2YWx1ZTogdGhpcy5zdGF0ZS5pbnRsIH0sIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIH1cbn1cbkludGxQcm92aWRlci5kaXNwbGF5TmFtZSA9ICdJbnRsUHJvdmlkZXInO1xuSW50bFByb3ZpZGVyLmRlZmF1bHRQcm9wcyA9IERFRkFVTFRfSU5UTF9DT05GSUc7XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiZXJyb3JNZXNzYWdlXCI6XCJFcnJvck1lc3NhZ2VfX2Vycm9yTWVzc2FnZS0tMkxDbW5cIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImlucHV0XCI6XCJSZXN0b3JlUGFzc3dvcmRfX2lucHV0LS0yNHl3UlwiLFwibWVzc2FnZVwiOlwiUmVzdG9yZVBhc3N3b3JkX19tZXNzYWdlLS0yZGFwa1wifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiaW5wdXRcIjpcIlNpZ25Jbl9faW5wdXQtLTFtUXZyXCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJ0ZXh0QnV0dG9uXCI6XCJUZXh0QnV0dG9uX190ZXh0QnV0dG9uLS0yamNpaVwiLFwidGV4dEJ1dHRvbl92aWV3X2xpZ2h0XCI6XCJUZXh0QnV0dG9uX190ZXh0QnV0dG9uX3ZpZXdfbGlnaHQtLWo2NlBRXCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJ0aXRsZVwiOlwiQXV0aF9fdGl0bGUtLTFlNVBKXCIsXCJsaW5rXCI6XCJBdXRoX19saW5rLS0zOVpScVwiLFwicHJpdmFjeVBvbGljeVwiOlwiQXV0aF9fcHJpdmFjeVBvbGljeS0tM1Y5Vm9cIn07IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tICcuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qcyc7XG5pbXBvcnQgdG9EYXRlIGZyb20gJy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbi8qKlxuICogQG5hbWUgYWRkTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBhZGRlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBZGQgNzUwIG1pbGxpc2Vjb25kcyB0byAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogdmFyIHJlc3VsdCA9IGFkZE1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjMwLjc1MFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgdGltZXN0YW1wID0gdG9EYXRlKGRpcnR5RGF0ZSkuZ2V0VGltZSgpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIGFtb3VudCk7XG59IiwiaW1wb3J0IFJlYWN0LCB7IEZDLCBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0Vycm9yTWVzc2FnZS5jc3MnO1xuXG5jb25zdCBlbSA9IGNzc21lbShzdHlsZXMpO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBjaGlsZHJlbj86IFJlYWN0Tm9kZTtcbn1cblxuY29uc3QgRXJyb3JNZXNzYWdlOiBGQzxQcm9wcz4gPSAoeyBjaGlsZHJlbiB9KSA9PiAoXG4gIDxkaXYgY2xhc3NOYW1lPXtlbSgnZXJyb3JNZXNzYWdlJykoKX0+e2NoaWxkcmVufTwvZGl2PlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgRXJyb3JNZXNzYWdlO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrLCB1c2VSZWYsIEZDIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgY3NzbWVtIGZyb20gJ2Nzc21lbSc7XG5pbXBvcnQgeyB1c2VJbnRsIH0gZnJvbSAncmVhY3QtaW50bCc7XG5cbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBjb21tYW5kcyBmcm9tICdAY29uc3RhbnRzL2NvbW1hbmRzJztcblxuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHVzZUJhY2tncm91bmRSZXF1ZXN0SGFuZGxlciBmcm9tICdAaG9va3MvdXNlQmFja2dyb3VuZFJlcXVlc3RIYW5kbGVyJztcblxuaW1wb3J0IEJ1dHRvbiwge1xuICBTSVpFIGFzIEJVVFRPTl9TSVpFLFxuICBUWVBFIGFzIEJVVFRPTl9UWVBFLFxufSBmcm9tICdjb21wb25lbnRzL0J1dHRvbic7XG5pbXBvcnQgSW5wdXQsIHsgU0laRSBhcyBJTlBVVF9TSVpFIH0gZnJvbSAnY29tcG9uZW50cy9JbnB1dCc7XG5cbmltcG9ydCBFcnJvck1lc3NhZ2UgZnJvbSAnQGNvbXBvbmVudHMvRXJyb3JNZXNzYWdlL0Vycm9yTWVzc2FnZSc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9SZXN0b3JlUGFzc3dvcmQuY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgb25TdWJtaXQ/KCk6IHZvaWQ7XG4gIHN1Ym1pdExhYmVsPzogc3RyaW5nO1xufVxuXG5jb25zdCBSZXN0b3JlUGFzc3dvcmQ6IEZDPFByb3BzPiA9ICh7IG9uU3VibWl0LCBzdWJtaXRMYWJlbCB9KSA9PiB7XG4gIGNvbnN0IGludGwgPSB1c2VJbnRsKCk7XG5cbiAgY29uc3QgW3VzZXJuYW1lLCBzZXRVc2VybmFtZV0gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFttZXNzYWdlLCBzZXRNZXNzYWdlXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuXG4gIGNvbnN0IGlucHV0RW1haWxSZWYgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3Qge1xuICAgIGVycm9yLFxuICAgIGhhbmRsZUJhY2tncm91bmRSZXF1ZXN0LFxuICAgIGlzTG9hZGluZyxcbiAgICBzdGF0dXMsXG4gIH0gPSB1c2VCYWNrZ3JvdW5kUmVxdWVzdEhhbmRsZXIoKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpbnB1dEVtYWlsUmVmLmN1cnJlbnQpIHtcbiAgICAgIGlucHV0RW1haWxSZWYuY3VycmVudC5mb2N1cygpO1xuICAgIH1cbiAgfSwgW10pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHN0YXR1cyA9PT0gJ29rJykge1xuICAgICAgaWYgKG9uU3VibWl0KSB7XG4gICAgICAgIG9uU3VibWl0KCk7XG4gICAgICB9XG4gICAgICBzZXRNZXNzYWdlKFxuICAgICAgICBpbnRsLmZvcm1hdE1lc3NhZ2UoeyBpZDogJ2F1dGgucmVtaW5kUGFzc3dvcmRTdWNjZXNzTWVzc2FnZScgfSlcbiAgICAgICk7XG4gICAgfVxuICB9LCBbc3RhdHVzLCBvblN1Ym1pdCwgaW50bF0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlucHV0RW1haWxSZWYuY3VycmVudCkge1xuICAgICAgaW5wdXRFbWFpbFJlZi5jdXJyZW50LmRpc2FibGVkID0gaXNMb2FkaW5nO1xuICAgIH1cbiAgfSwgW2lzTG9hZGluZ10pO1xuXG4gIGNvbnN0IGhhbmRsZVVzZXJuYW1lQ2hhbmdlID0gdXNlQ2FsbGJhY2soXG4gICAgKHsgdGFyZ2V0IH0pID0+IHNldFVzZXJuYW1lKHRhcmdldC52YWx1ZSksXG4gICAgW11cbiAgKTtcblxuICBjb25zdCBoYW5kbGVGb3JtU3VibWl0ID0gdXNlQ2FsbGJhY2soXG4gICAgYXN5bmMgKGV2dCkgPT4ge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBzZXRNZXNzYWdlKG51bGwpO1xuICAgICAgYXdhaXQgaGFuZGxlQmFja2dyb3VuZFJlcXVlc3Qoe1xuICAgICAgICBjb21tYW5kOiBjb21tYW5kcy5SRVNUT1JFX1BBU1NXT1JELFxuICAgICAgICB1c2VybmFtZSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgW2hhbmRsZUJhY2tncm91bmRSZXF1ZXN0LCB1c2VybmFtZV1cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8Zm9ybSBvblN1Ym1pdD17aGFuZGxlRm9ybVN1Ym1pdH0+XG4gICAgICAgIHtlcnJvciAmJiAoXG4gICAgICAgICAgPEVycm9yTWVzc2FnZT57aW50bC5mb3JtYXRNZXNzYWdlKHsgaWQ6IGVycm9yIH0pfTwvRXJyb3JNZXNzYWdlPlxuICAgICAgICApfVxuICAgICAgICB7bWVzc2FnZSA/IChcbiAgICAgICAgICA8cCBjbGFzc05hbWU9e2VtKCdtZXNzYWdlJykoKX0+e21lc3NhZ2V9PC9wPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDw+XG4gICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtlbSgnaW5wdXQnKSgpfVxuICAgICAgICAgICAgICBpbnB1dFJlZj17aW5wdXRFbWFpbFJlZn1cbiAgICAgICAgICAgICAgbGFiZWw9e2ludGwuZm9ybWF0TWVzc2FnZSh7IGlkOiAnc2lnbmluLmVtYWlsJyB9KX1cbiAgICAgICAgICAgICAgbmFtZT1cInVzZXJuYW1lXCJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZVVzZXJuYW1lQ2hhbmdlfVxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cImV4YW1wbGVAbWFpbC5ydVwiXG4gICAgICAgICAgICAgIHJlcXVpcmVkXG4gICAgICAgICAgICAgIHNpemU9e0lOUFVUX1NJWkUuTX1cbiAgICAgICAgICAgICAgdHlwZT1cImVtYWlsXCJcbiAgICAgICAgICAgICAgdmFsdWU9e3VzZXJuYW1lfVxuICAgICAgICAgICAgICB3aWRlXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICBkaXNhYmxlZD17aXNMb2FkaW5nfVxuICAgICAgICAgICAgICBzaXplPXtCVVRUT05fU0laRS5NfVxuICAgICAgICAgICAgICB0eXBlPXtCVVRUT05fVFlQRS5TVUJNSVR9XG4gICAgICAgICAgICAgIHdpZGVcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3N1Ym1pdExhYmVsfVxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC8+XG4gICAgICAgICl9XG4gICAgICA8L2Zvcm0+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSZXN0b3JlUGFzc3dvcmQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2ssIHVzZVJlZiwgRkMgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcbmltcG9ydCB7IHVzZUludGwgfSBmcm9tICdyZWFjdC1pbnRsJztcblxuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IGNvbW1hbmRzIGZyb20gJ0Bjb25zdGFudHMvY29tbWFuZHMnO1xuXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgdXNlQmFja2dyb3VuZFJlcXVlc3RIYW5kbGVyIGZyb20gJ0Bob29rcy91c2VCYWNrZ3JvdW5kUmVxdWVzdEhhbmRsZXInO1xuXG5pbXBvcnQgQnV0dG9uLCB7XG4gIFNJWkUgYXMgQlVUVE9OX1NJWkUsXG4gIFRZUEUgYXMgQlVUVE9OX1RZUEUsXG59IGZyb20gJ2NvbXBvbmVudHMvQnV0dG9uJztcbmltcG9ydCBJbnB1dCwgeyBTSVpFIGFzIElOUFVUX1NJWkUgfSBmcm9tICdjb21wb25lbnRzL0lucHV0JztcblxuaW1wb3J0IEVycm9yTWVzc2FnZSBmcm9tICdAY29tcG9uZW50cy9FcnJvck1lc3NhZ2UvRXJyb3JNZXNzYWdlJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL1NpZ25Jbi5jc3MnO1xuXG5jb25zdCBlbSA9IGNzc21lbShzdHlsZXMpO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBpc0FjdGl2ZT86IGJvb2xlYW47XG4gIG9uU3VibWl0KCk6IHZvaWQ7XG59XG5cbmNvbnN0IFNpZ25JbjogRkM8UHJvcHM+ID0gKHsgaXNBY3RpdmUsIG9uU3VibWl0IH0pID0+IHtcbiAgY29uc3QgaW50bCA9IHVzZUludGwoKTtcblxuICBjb25zdCBbdXNlcm5hbWUsIHNldFVzZXJuYW1lXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW3Bhc3N3b3JkLCBzZXRQYXNzd29yZF0gPSB1c2VTdGF0ZSgnJyk7XG5cbiAgY29uc3QgaW5wdXRFbWFpbFJlZiA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgaW5wdXRQYXNzd29yZFJlZiA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcblxuICBjb25zdCB7XG4gICAgZXJyb3IsXG4gICAgaGFuZGxlQmFja2dyb3VuZFJlcXVlc3QsXG4gICAgaXNMb2FkaW5nLFxuICAgIHN0YXR1cyxcbiAgfSA9IHVzZUJhY2tncm91bmRSZXF1ZXN0SGFuZGxlcigpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlzQWN0aXZlICYmIGlucHV0RW1haWxSZWYuY3VycmVudCkge1xuICAgICAgaW5wdXRFbWFpbFJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfVxuICB9LCBbaXNBY3RpdmVdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChzdGF0dXMgPT09ICdvaycpIHtcbiAgICAgIG9uU3VibWl0KCk7XG4gICAgfVxuICB9LCBbc3RhdHVzLCBvblN1Ym1pdF0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlucHV0RW1haWxSZWYuY3VycmVudCkge1xuICAgICAgaW5wdXRFbWFpbFJlZi5jdXJyZW50LmRpc2FibGVkID0gaXNMb2FkaW5nO1xuICAgIH1cbiAgICBpZiAoaW5wdXRQYXNzd29yZFJlZi5jdXJyZW50KSB7XG4gICAgICBpbnB1dFBhc3N3b3JkUmVmLmN1cnJlbnQuZGlzYWJsZWQgPSBpc0xvYWRpbmc7XG4gICAgfVxuICB9LCBbaXNMb2FkaW5nXSk7XG5cbiAgY29uc3QgaGFuZGxlVXNlcm5hbWVDaGFuZ2UgPSB1c2VDYWxsYmFjayhcbiAgICAoeyB0YXJnZXQgfSkgPT4gc2V0VXNlcm5hbWUodGFyZ2V0LnZhbHVlKSxcbiAgICBbXVxuICApO1xuICBjb25zdCBoYW5kbGVQYXNzd29yZENoYW5nZSA9IHVzZUNhbGxiYWNrKFxuICAgICh7IHRhcmdldCB9KSA9PiBzZXRQYXNzd29yZCh0YXJnZXQudmFsdWUpLFxuICAgIFtdXG4gICk7XG5cbiAgY29uc3QgaGFuZGxlRm9ybVN1Ym1pdCA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jIChldnQpID0+IHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgYXdhaXQgaGFuZGxlQmFja2dyb3VuZFJlcXVlc3Qoe1xuICAgICAgICBjb21tYW5kOiBjb21tYW5kcy5TSUdOX0lOLFxuICAgICAgICB1c2VybmFtZSxcbiAgICAgICAgcGFzc3dvcmQsXG4gICAgICB9KTtcbiAgICB9LFxuICAgIFtoYW5kbGVCYWNrZ3JvdW5kUmVxdWVzdCwgdXNlcm5hbWUsIHBhc3N3b3JkXVxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxmb3JtIG9uU3VibWl0PXtoYW5kbGVGb3JtU3VibWl0fT5cbiAgICAgICAge2Vycm9yICYmIChcbiAgICAgICAgICA8RXJyb3JNZXNzYWdlPntpbnRsLmZvcm1hdE1lc3NhZ2UoeyBpZDogZXJyb3IgfSl9PC9FcnJvck1lc3NhZ2U+XG4gICAgICAgICl9XG4gICAgICAgIDxJbnB1dFxuICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ2lucHV0JykoKX1cbiAgICAgICAgICBpbnB1dFJlZj17aW5wdXRFbWFpbFJlZn1cbiAgICAgICAgICBsYWJlbD17aW50bC5mb3JtYXRNZXNzYWdlKHsgaWQ6ICdzaWduaW4uZW1haWwnIH0pfVxuICAgICAgICAgIG5hbWU9XCJ1c2VybmFtZVwiXG4gICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZVVzZXJuYW1lQ2hhbmdlfVxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiZXhhbXBsZUBtYWlsLnJ1XCJcbiAgICAgICAgICByZXF1aXJlZFxuICAgICAgICAgIHNpemU9e0lOUFVUX1NJWkUuTX1cbiAgICAgICAgICB0eXBlPVwiZW1haWxcIlxuICAgICAgICAgIHZhbHVlPXt1c2VybmFtZX1cbiAgICAgICAgICB3aWRlXG4gICAgICAgIC8+XG4gICAgICAgIDxJbnB1dFxuICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ2lucHV0JykoKX1cbiAgICAgICAgICBpbnB1dFJlZj17aW5wdXRQYXNzd29yZFJlZn1cbiAgICAgICAgICBsYWJlbD17aW50bC5mb3JtYXRNZXNzYWdlKHsgaWQ6ICdzaWduaW4ucGFzc3dvcmQnIH0pfVxuICAgICAgICAgIG5hbWU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZVBhc3N3b3JkQ2hhbmdlfVxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwi4oCi4oCi4oCi4oCi4oCi4oCiXCJcbiAgICAgICAgICByZXF1aXJlZFxuICAgICAgICAgIHNpemU9e0lOUFVUX1NJWkUuTX1cbiAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxuICAgICAgICAgIHZhbHVlPXtwYXNzd29yZH1cbiAgICAgICAgICB3aWRlXG4gICAgICAgIC8+XG4gICAgICAgIDxCdXR0b25cbiAgICAgICAgICBkaXNhYmxlZD17aXNMb2FkaW5nfVxuICAgICAgICAgIHNpemU9e0JVVFRPTl9TSVpFLk19XG4gICAgICAgICAgdHlwZT17QlVUVE9OX1RZUEUuU1VCTUlUfVxuICAgICAgICAgIHdpZGVcbiAgICAgICAgPlxuICAgICAgICAgIHtpbnRsLmZvcm1hdE1lc3NhZ2UoeyBpZDogJ3NpZ25pbi5zdWJtaXRCdXR0b24nIH0pfVxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgIDwvZm9ybT5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNpZ25JbjtcbiIsImltcG9ydCBSZWFjdCwgeyBGQywgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgY3NzbWVtIGZyb20gJ2Nzc21lbSc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9UZXh0QnV0dG9uLmNzcyc7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmV4cG9ydCBlbnVtIFZpZXcge1xuICBMSUdIVCA9ICdsaWdodCcsXG59XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGNoaWxkcmVuOiBSZWFjdE5vZGU7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgaHJlZj86IHN0cmluZztcbiAgb25DbGljaygpOiB2b2lkO1xuICB0YXJnZXQ/OiBzdHJpbmc7XG4gIHZpZXc/OiBWaWV3O1xufVxuXG5jb25zdCBUZXh0QnV0dG9uOiBGQzxQcm9wcz4gPSAoe1xuICBjaGlsZHJlbixcbiAgY2xhc3NOYW1lLFxuICBocmVmLFxuICBvbkNsaWNrLFxuICB0YXJnZXQgPSAnX2JsYW5rJyxcbiAgdmlldyxcbn06IFByb3BzKSA9PiB7XG4gIGlmIChocmVmKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxhXG4gICAgICAgIGNsYXNzTmFtZT17ZW0oJ3RleHRCdXR0b24nKSh7IHZpZXcgfSwgY2xhc3NOYW1lKX1cbiAgICAgICAgaHJlZj17aHJlZn1cbiAgICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgICAgdGFyZ2V0PXt0YXJnZXR9XG4gICAgICA+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvYT5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8YnV0dG9uXG4gICAgICBjbGFzc05hbWU9e2VtKCd0ZXh0QnV0dG9uJykoeyB2aWV3IH0sIGNsYXNzTmFtZSl9XG4gICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvYnV0dG9uPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVGV4dEJ1dHRvbjtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2ssIEZDIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgY3NzbWVtIGZyb20gJ2Nzc21lbSc7XG5pbXBvcnQgeyB1c2VJbnRsIH0gZnJvbSAncmVhY3QtaW50bCc7XG5cbmltcG9ydCB7IEJSQU5ELCBWRVJTSU9OIH0gZnJvbSAnQGNvbnN0YW50cy9jb25zdGFudHMnO1xuaW1wb3J0IHsgU3RvcmFnZSB9IGZyb20gJ0Bjb25zdGFudHMvc3RvcmFnZSc7XG5pbXBvcnQgdXJscyBmcm9tICdAY29uc3RhbnRzL3VybHMnO1xuXG5pbXBvcnQgdXNlRnVubmVsIGZyb20gJ0Bob29rcy91c2VGdW5uZWwnO1xuXG5pbXBvcnQgUmVzdG9yZVBhc3N3b3JkIGZyb20gJ0Bjb21wb25lbnRzL1Jlc3RvcmVQYXNzd29yZC9SZXN0b3JlUGFzc3dvcmQnO1xuaW1wb3J0IFNpZ25JbiBmcm9tICdAY29tcG9uZW50cy9TaWduSW4vU2lnbkluJztcbmltcG9ydCBUZXh0QnV0dG9uLCB7IFZpZXcgfSBmcm9tICdAY29tcG9uZW50cy9UZXh0QnV0dG9uL1RleHRCdXR0b24nO1xuaW1wb3J0IFRpdGxlIGZyb20gJ0Bjb21wb25lbnRzL1RpdGxlL1RpdGxlJztcblxuaW1wb3J0IHsgZ2V0RnJvbVN0b3JhZ2UgfSBmcm9tICdAaGVscGVycy9zdG9yYWdlJztcbmltcG9ydCB7IGdldFZlcnNpb24gfSBmcm9tICdAaGVscGVycy91dGlscyc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9BdXRoLmNzcyc7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgaW5Qb3B1cD86IGJvb2xlYW47XG4gIGlzQWN0aXZlPzogYm9vbGVhbjtcbiAgbmFtZTogc3RyaW5nO1xuICBvblNraXAoKTogdm9pZDtcbiAgb25TdWJtaXQoKTogdm9pZDtcbn1cblxuY29uc3QgQXV0aDogRkM8UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgY2xhc3NOYW1lLCBpblBvcHVwLCBpc0FjdGl2ZSwgbmFtZSwgb25Ta2lwLCBvblN1Ym1pdCB9ID0gcHJvcHM7XG5cbiAgY29uc3QgaW50bCA9IHVzZUludGwoKTtcblxuICBjb25zdCBbaXNSZXN0b3JpbmdQYXNzd29yZCwgc2V0UmVzdG9yaW5nUGFzc3dvcmRTdGF0ZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3QgeyBzZW5kRXZlbnQgfSA9IHVzZUZ1bm5lbChpblBvcHVwKTtcblxuICBjb25zdCBoYW5kbGVCdXR0b25TaWduVXBDbGljayA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB1aWQgPSBhd2FpdCBnZXRGcm9tU3RvcmFnZShTdG9yYWdlLlVJRCk7XG4gICAgY29uc3QgdXNlcklkID0gYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoU3RvcmFnZS5VU0VSX0lEKTtcbiAgICBhd2FpdCBzZW5kRXZlbnQoJ2NsaWNrJywgYCR7bmFtZX1fc2lnbnVwYCwge1xuICAgICAgZGF0ZXRpbWU6IERhdGUubm93KCksXG4gICAgICBleHRlbnNpb25fYnJhbmQ6IEJSQU5ELFxuICAgICAgZXh0ZW5zaW9uX3ZlcnNpb246IGdldFZlcnNpb24oKSxcbiAgICAgIHVpZCxcbiAgICAgIHVybDogd2luZG93LmxvY2F0aW9uLmhyZWYsXG4gICAgICB1c2VyX2lkOiB1c2VySWQsXG4gICAgICB2ZXJzaW9uOiBWRVJTSU9OLFxuICAgIH0pO1xuICB9LCBbbmFtZSwgc2VuZEV2ZW50XSk7XG5cbiAgY29uc3QgaGFuZGxlU2lnbkluU3VibWl0ID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHVpZCA9IGF3YWl0IGdldEZyb21TdG9yYWdlKFN0b3JhZ2UuVUlEKTtcbiAgICBjb25zdCB1c2VySWQgPSBhd2FpdCBnZXRGcm9tU3RvcmFnZShTdG9yYWdlLlVTRVJfSUQpO1xuICAgIGF3YWl0IHNlbmRFdmVudCgnY2xpY2snLCBgJHtuYW1lfV9sb2dpbmAsIHtcbiAgICAgIGRhdGV0aW1lOiBEYXRlLm5vdygpLFxuICAgICAgZXh0ZW5zaW9uX2JyYW5kOiBCUkFORCxcbiAgICAgIGV4dGVuc2lvbl92ZXJzaW9uOiBnZXRWZXJzaW9uKCksXG4gICAgICB1aWQsXG4gICAgICB1cmw6IHdpbmRvdy5sb2NhdGlvbi5ocmVmLFxuICAgICAgdXNlcl9pZDogdXNlcklkLFxuICAgICAgdmVyc2lvbjogVkVSU0lPTixcbiAgICB9KTtcblxuICAgIG9uU3VibWl0KCk7XG4gIH0sIFtuYW1lLCBvblN1Ym1pdCwgc2VuZEV2ZW50XSk7XG5cbiAgY29uc3QgaGFuZGxlQnV0dG9uUmVzdG9yaW5nUGFzc3dvcmRDbGljayA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB1aWQgPSBhd2FpdCBnZXRGcm9tU3RvcmFnZShTdG9yYWdlLlVJRCk7XG4gICAgY29uc3QgdXNlcklkID0gYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoU3RvcmFnZS5VU0VSX0lEKTtcbiAgICBhd2FpdCBzZW5kRXZlbnQoJ2NsaWNrJywgYCR7bmFtZX1fZm9yZ2V0YCwge1xuICAgICAgZGF0ZXRpbWU6IERhdGUubm93KCksXG4gICAgICBleHRlbnNpb25fYnJhbmQ6IEJSQU5ELFxuICAgICAgZXh0ZW5zaW9uX3ZlcnNpb246IGdldFZlcnNpb24oKSxcbiAgICAgIHVpZCxcbiAgICAgIHVybDogd2luZG93LmxvY2F0aW9uLmhyZWYsXG4gICAgICB1c2VyX2lkOiB1c2VySWQsXG4gICAgICB2ZXJzaW9uOiBWRVJTSU9OLFxuICAgIH0pO1xuXG4gICAgc2V0UmVzdG9yaW5nUGFzc3dvcmRTdGF0ZSgocHJldlN0YXRlKSA9PiAhcHJldlN0YXRlKTtcbiAgfSwgW25hbWUsIHNlbmRFdmVudF0pO1xuXG4gIGNvbnN0IGhhbmRsZUJ1dHRvblNraXBDbGljayA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB1aWQgPSBhd2FpdCBnZXRGcm9tU3RvcmFnZShTdG9yYWdlLlVJRCk7XG4gICAgY29uc3QgdXNlcklkID0gYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoU3RvcmFnZS5VU0VSX0lEKTtcbiAgICBhd2FpdCBzZW5kRXZlbnQoJ2NsaWNrJywgYCR7bmFtZX1fbGF0ZXJgLCB7XG4gICAgICBkYXRldGltZTogRGF0ZS5ub3coKSxcbiAgICAgIGV4dGVuc2lvbl9icmFuZDogQlJBTkQsXG4gICAgICBleHRlbnNpb25fdmVyc2lvbjogZ2V0VmVyc2lvbigpLFxuICAgICAgdWlkLFxuICAgICAgdXJsOiB3aW5kb3cubG9jYXRpb24uaHJlZixcbiAgICAgIHVzZXJfaWQ6IHVzZXJJZCxcbiAgICAgIHZlcnNpb246IFZFUlNJT04sXG4gICAgfSk7XG5cbiAgICBvblNraXAoKTtcbiAgfSwgW25hbWUsIG9uU2tpcCwgc2VuZEV2ZW50XSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfT5cbiAgICAgIDxUaXRsZSBjbGFzc05hbWU9e2VtKCd0aXRsZScpKCl9IHNpemU9XCJtXCI+XG4gICAgICAgIHtpc1Jlc3RvcmluZ1Bhc3N3b3JkID8gKFxuICAgICAgICAgIGludGwuZm9ybWF0TWVzc2FnZSh7IGlkOiAnYXV0aC5yZXNldCcgfSlcbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8PlxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tcbiAgICAgICAgICAgICAgICBfX2h0bWw6IGludGwuZm9ybWF0TWVzc2FnZSh7IGlkOiAnYXV0aC5hdXRoT3InIH0pLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxUZXh0QnV0dG9uXG4gICAgICAgICAgICAgIGhyZWY9e3VybHMuUkVHSVNUUkFUSU9OfVxuICAgICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVCdXR0b25TaWduVXBDbGlja31cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge2ludGwuZm9ybWF0TWVzc2FnZSh7IGlkOiAnYXV0aC5zaWduVXAnIH0pfVxuICAgICAgICAgICAgPC9UZXh0QnV0dG9uPlxuICAgICAgICAgICAge2ludGwuZm9ybWF0TWVzc2FnZSh7IGlkOiAnYXV0aC5hdXRoUmVhc29uJyB9KX1cbiAgICAgICAgICA8Lz5cbiAgICAgICAgKX1cbiAgICAgIDwvVGl0bGU+XG4gICAgICB7aXNSZXN0b3JpbmdQYXNzd29yZCA/IChcbiAgICAgICAgPFJlc3RvcmVQYXNzd29yZFxuICAgICAgICAgIHN1Ym1pdExhYmVsPXtpbnRsLmZvcm1hdE1lc3NhZ2UoeyBpZDogJ2F1dGgucmVzZXRQYXNzd29yZCcgfSl9XG4gICAgICAgIC8+XG4gICAgICApIDogKFxuICAgICAgICA8U2lnbkluIGlzQWN0aXZlPXtpc0FjdGl2ZX0gb25TdWJtaXQ9e2hhbmRsZVNpZ25JblN1Ym1pdH0gLz5cbiAgICAgICl9XG4gICAgICA8ZGl2PlxuICAgICAgICA8VGV4dEJ1dHRvblxuICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ2xpbmsnKSgpfVxuICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUJ1dHRvblJlc3RvcmluZ1Bhc3N3b3JkQ2xpY2t9XG4gICAgICAgID5cbiAgICAgICAgICB7aXNSZXN0b3JpbmdQYXNzd29yZFxuICAgICAgICAgICAgPyBpbnRsLmZvcm1hdE1lc3NhZ2UoeyBpZDogJ2F1dGgucmVtZW1iZXJQYXNzd29yZCcgfSlcbiAgICAgICAgICAgIDogaW50bC5mb3JtYXRNZXNzYWdlKHsgaWQ6ICdhdXRoLnJlbWluZFBhc3N3b3JkJyB9KX1cbiAgICAgICAgPC9UZXh0QnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8VGV4dEJ1dHRvblxuICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ2xpbmsnKSgpfVxuICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUJ1dHRvblNraXBDbGlja31cbiAgICAgICAgICB2aWV3PXtWaWV3LkxJR0hUfVxuICAgICAgICA+XG4gICAgICAgICAge2ludGwuZm9ybWF0TWVzc2FnZSh7IGlkOiAnYXV0aC5sb2dpbkxhdGVyJyB9KX1cbiAgICAgICAgPC9UZXh0QnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8cFxuICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ3ByaXZhY3lQb2xpY3knKSgpfVxuICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICAgICAgICBfX2h0bWw6IGludGwuZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICAgICAgeyBpZDogJ2F1dGguc2VjdXJpdHlQb2xpY3knIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwb2xpY3lIcmVmOiB1cmxzLlBSSVZBQ1lfUE9MSUNZLFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApLFxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEF1dGg7XG4iLCJpbXBvcnQgdG9EYXRlIGZyb20gJy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbi8qKlxuICogQG5hbWUgc3RhcnRPZkRheVxuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgZGF5IGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHJldHVybnMge0RhdGV9IHRoZSBzdGFydCBvZiBhIGRheVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhIGRheSBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIHZhciByZXN1bHQgPSBzdGFydE9mRGF5KG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCkpXG4gKiAvLz0+IFR1ZSBTZXAgMDIgMjAxNCAwMDowMDowMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZEYXkoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgeyBnZXRHbG9iYWxPYmplY3QgfSBmcm9tICcuL21pc2MnO1xuaW1wb3J0IHsgZHluYW1pY1JlcXVpcmUsIGlzTm9kZUVudiB9IGZyb20gJy4vbm9kZSc7XG4vKipcbiAqIEEgVGltZXN0YW1wU291cmNlIGltcGxlbWVudGF0aW9uIGZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3Qgc3VwcG9ydCB0aGUgUGVyZm9ybWFuY2UgV2ViIEFQSSBuYXRpdmVseS5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBUaW1lc3RhbXBTb3VyY2UgZG9lcyBub3QgdXNlIGEgbW9ub3RvbmljIGNsb2NrLiBBIGNhbGwgdG8gYG5vd1NlY29uZHNgIG1heSByZXR1cm4gYSB0aW1lc3RhbXAgZWFybGllclxuICogdGhhbiBhIHByZXZpb3VzbHkgcmV0dXJuZWQgdmFsdWUuIFdlIGRvIG5vdCB0cnkgdG8gZW11bGF0ZSBhIG1vbm90b25pYyBiZWhhdmlvciBpbiBvcmRlciB0byBmYWNpbGl0YXRlIGRlYnVnZ2luZy4gSXRcbiAqIGlzIG1vcmUgb2J2aW91cyB0byBleHBsYWluIFwid2h5IGRvZXMgbXkgc3BhbiBoYXZlIG5lZ2F0aXZlIGR1cmF0aW9uXCIgdGhhbiBcIndoeSBteSBzcGFucyBoYXZlIHplcm8gZHVyYXRpb25cIi5cbiAqL1xudmFyIGRhdGVUaW1lc3RhbXBTb3VyY2UgPSB7XG4gICAgbm93U2Vjb25kczogZnVuY3Rpb24gKCkgeyByZXR1cm4gRGF0ZS5ub3coKSAvIDEwMDA7IH0sXG59O1xuLyoqXG4gKiBSZXR1cm5zIGEgd3JhcHBlciBhcm91bmQgdGhlIG5hdGl2ZSBQZXJmb3JtYW5jZSBBUEkgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiwgb3IgdW5kZWZpbmVkIGZvciBicm93c2VycyB0aGF0IGRvIG5vdFxuICogc3VwcG9ydCB0aGUgQVBJLlxuICpcbiAqIFdyYXBwaW5nIHRoZSBuYXRpdmUgQVBJIHdvcmtzIGFyb3VuZCBkaWZmZXJlbmNlcyBpbiBiZWhhdmlvciBmcm9tIGRpZmZlcmVudCBicm93c2Vycy5cbiAqL1xuZnVuY3Rpb24gZ2V0QnJvd3NlclBlcmZvcm1hbmNlKCkge1xuICAgIHZhciBwZXJmb3JtYW5jZSA9IGdldEdsb2JhbE9iamVjdCgpLnBlcmZvcm1hbmNlO1xuICAgIGlmICghcGVyZm9ybWFuY2UgfHwgIXBlcmZvcm1hbmNlLm5vdykge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLyBSZXBsYWNlIHBlcmZvcm1hbmNlLnRpbWVPcmlnaW4gd2l0aCBvdXIgb3duIHRpbWVPcmlnaW4gYmFzZWQgb24gRGF0ZS5ub3coKS5cbiAgICAvL1xuICAgIC8vIFRoaXMgaXMgYSBwYXJ0aWFsIHdvcmthcm91bmQgZm9yIGJyb3dzZXJzIHJlcG9ydGluZyBwZXJmb3JtYW5jZS50aW1lT3JpZ2luIHN1Y2ggdGhhdCBwZXJmb3JtYW5jZS50aW1lT3JpZ2luICtcbiAgICAvLyBwZXJmb3JtYW5jZS5ub3coKSBnaXZlcyBhIGRhdGUgYXJiaXRyYXJpbHkgaW4gdGhlIHBhc3QuXG4gICAgLy9cbiAgICAvLyBBZGRpdGlvbmFsbHksIGNvbXB1dGluZyB0aW1lT3JpZ2luIGluIHRoaXMgd2F5IGZpbGxzIHRoZSBnYXAgZm9yIGJyb3dzZXJzIHdoZXJlIHBlcmZvcm1hbmNlLnRpbWVPcmlnaW4gaXNcbiAgICAvLyB1bmRlZmluZWQuXG4gICAgLy9cbiAgICAvLyBUaGUgYXNzdW1wdGlvbiB0aGF0IHBlcmZvcm1hbmNlLnRpbWVPcmlnaW4gKyBwZXJmb3JtYW5jZS5ub3coKSB+PSBEYXRlLm5vdygpIGlzIGZsYXdlZCwgYnV0IHdlIGRlcGVuZCBvbiBpdCB0b1xuICAgIC8vIGludGVyYWN0IHdpdGggZGF0YSBjb21pbmcgb3V0IG9mIHBlcmZvcm1hbmNlIGVudHJpZXMuXG4gICAgLy9cbiAgICAvLyBOb3RlIHRoYXQgZGVzcGl0ZSByZWNvbW1lbmRhdGlvbnMgYWdhaW5zdCBpdCBpbiB0aGUgc3BlYywgYnJvd3NlcnMgaW1wbGVtZW50IHRoZSBQZXJmb3JtYW5jZSBBUEkgd2l0aCBhIGNsb2NrIHRoYXRcbiAgICAvLyBtaWdodCBzdG9wIHdoZW4gdGhlIGNvbXB1dGVyIGlzIGFzbGVlcCAoYW5kIHBlcmhhcHMgdW5kZXIgb3RoZXIgY2lyY3Vtc3RhbmNlcykuIFN1Y2ggYmVoYXZpb3IgY2F1c2VzXG4gICAgLy8gcGVyZm9ybWFuY2UudGltZU9yaWdpbiArIHBlcmZvcm1hbmNlLm5vdygpIHRvIGhhdmUgYW4gYXJiaXRyYXJ5IHNrZXcgb3ZlciBEYXRlLm5vdygpLiBJbiBsYXB0b3AgY29tcHV0ZXJzLCB3ZSBoYXZlXG4gICAgLy8gb2JzZXJ2ZWQgc2tld3MgdGhhdCBjYW4gYmUgYXMgbG9uZyBhcyBkYXlzLCB3ZWVrcyBvciBtb250aHMuXG4gICAgLy9cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvMjU5MC5cbiAgICAvL1xuICAgIC8vIEJVRzogZGVzcGl0ZSBvdXIgYmVzdCBpbnRlbnRpb25zLCB0aGlzIHdvcmthcm91bmQgaGFzIGl0cyBsaW1pdGF0aW9ucy4gSXQgbW9zdGx5IGFkZHJlc3NlcyB0aW1pbmdzIG9mIHBhZ2Vsb2FkXG4gICAgLy8gdHJhbnNhY3Rpb25zLCBidXQgaWdub3JlcyB0aGUgc2tldyBidWlsdCB1cCBvdmVyIHRpbWUgdGhhdCBjYW4gYXZlcnNlbHkgYWZmZWN0IHRpbWVzdGFtcHMgb2YgbmF2aWdhdGlvblxuICAgIC8vIHRyYW5zYWN0aW9ucyBvZiBsb25nLWxpdmVkIHdlYiBwYWdlcy5cbiAgICB2YXIgdGltZU9yaWdpbiA9IERhdGUubm93KCkgLSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBub3c6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpOyB9LFxuICAgICAgICB0aW1lT3JpZ2luOiB0aW1lT3JpZ2luLFxuICAgIH07XG59XG4vKipcbiAqIFJldHVybnMgdGhlIG5hdGl2ZSBQZXJmb3JtYW5jZSBBUEkgaW1wbGVtZW50YXRpb24gZnJvbSBOb2RlLmpzLiBSZXR1cm5zIHVuZGVmaW5lZCBpbiBvbGQgTm9kZS5qcyB2ZXJzaW9ucyB0aGF0IGRvbid0XG4gKiBpbXBsZW1lbnQgdGhlIEFQSS5cbiAqL1xuZnVuY3Rpb24gZ2V0Tm9kZVBlcmZvcm1hbmNlKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHZhciBwZXJmSG9va3MgPSBkeW5hbWljUmVxdWlyZShtb2R1bGUsICdwZXJmX2hvb2tzJyk7XG4gICAgICAgIHJldHVybiBwZXJmSG9va3MucGVyZm9ybWFuY2U7XG4gICAgfVxuICAgIGNhdGNoIChfKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuLyoqXG4gKiBUaGUgUGVyZm9ybWFuY2UgQVBJIGltcGxlbWVudGF0aW9uIGZvciB0aGUgY3VycmVudCBwbGF0Zm9ybSwgaWYgYXZhaWxhYmxlLlxuICovXG52YXIgcGxhdGZvcm1QZXJmb3JtYW5jZSA9IGlzTm9kZUVudigpID8gZ2V0Tm9kZVBlcmZvcm1hbmNlKCkgOiBnZXRCcm93c2VyUGVyZm9ybWFuY2UoKTtcbnZhciB0aW1lc3RhbXBTb3VyY2UgPSBwbGF0Zm9ybVBlcmZvcm1hbmNlID09PSB1bmRlZmluZWRcbiAgICA/IGRhdGVUaW1lc3RhbXBTb3VyY2VcbiAgICA6IHtcbiAgICAgICAgbm93U2Vjb25kczogZnVuY3Rpb24gKCkgeyByZXR1cm4gKHBsYXRmb3JtUGVyZm9ybWFuY2UudGltZU9yaWdpbiArIHBsYXRmb3JtUGVyZm9ybWFuY2Uubm93KCkpIC8gMTAwMDsgfSxcbiAgICB9O1xuLyoqXG4gKiBSZXR1cm5zIGEgdGltZXN0YW1wIGluIHNlY29uZHMgc2luY2UgdGhlIFVOSVggZXBvY2ggdXNpbmcgdGhlIERhdGUgQVBJLlxuICovXG5leHBvcnQgdmFyIGRhdGVUaW1lc3RhbXBJblNlY29uZHMgPSBkYXRlVGltZXN0YW1wU291cmNlLm5vd1NlY29uZHMuYmluZChkYXRlVGltZXN0YW1wU291cmNlKTtcbi8qKlxuICogUmV0dXJucyBhIHRpbWVzdGFtcCBpbiBzZWNvbmRzIHNpbmNlIHRoZSBVTklYIGVwb2NoIHVzaW5nIGVpdGhlciB0aGUgUGVyZm9ybWFuY2Ugb3IgRGF0ZSBBUElzLCBkZXBlbmRpbmcgb24gdGhlXG4gKiBhdmFpbGFiaWxpdHkgb2YgdGhlIFBlcmZvcm1hbmNlIEFQSS5cbiAqXG4gKiBTZWUgYHVzaW5nUGVyZm9ybWFuY2VBUElgIHRvIHRlc3Qgd2hldGhlciB0aGUgUGVyZm9ybWFuY2UgQVBJIGlzIHVzZWQuXG4gKlxuICogQlVHOiBOb3RlIHRoYXQgYmVjYXVzZSBvZiBob3cgYnJvd3NlcnMgaW1wbGVtZW50IHRoZSBQZXJmb3JtYW5jZSBBUEksIHRoZSBjbG9jayBtaWdodCBzdG9wIHdoZW4gdGhlIGNvbXB1dGVyIGlzXG4gKiBhc2xlZXAuIFRoaXMgY3JlYXRlcyBhIHNrZXcgYmV0d2VlbiBgZGF0ZVRpbWVzdGFtcEluU2Vjb25kc2AgYW5kIGB0aW1lc3RhbXBJblNlY29uZHNgLiBUaGVcbiAqIHNrZXcgY2FuIGdyb3cgdG8gYXJiaXRyYXJ5IGFtb3VudHMgbGlrZSBkYXlzLCB3ZWVrcyBvciBtb250aHMuXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvMjU5MC5cbiAqL1xuZXhwb3J0IHZhciB0aW1lc3RhbXBJblNlY29uZHMgPSB0aW1lc3RhbXBTb3VyY2Uubm93U2Vjb25kcy5iaW5kKHRpbWVzdGFtcFNvdXJjZSk7XG4vLyBSZS1leHBvcnRlZCB3aXRoIGFuIG9sZCBuYW1lIGZvciBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eS5cbmV4cG9ydCB2YXIgdGltZXN0YW1wV2l0aE1zID0gdGltZXN0YW1wSW5TZWNvbmRzO1xuLyoqXG4gKiBBIGJvb2xlYW4gdGhhdCBpcyB0cnVlIHdoZW4gdGltZXN0YW1wSW5TZWNvbmRzIHVzZXMgdGhlIFBlcmZvcm1hbmNlIEFQSSB0byBwcm9kdWNlIG1vbm90b25pYyB0aW1lc3RhbXBzLlxuICovXG5leHBvcnQgdmFyIHVzaW5nUGVyZm9ybWFuY2VBUEkgPSBwbGF0Zm9ybVBlcmZvcm1hbmNlICE9PSB1bmRlZmluZWQ7XG4vKipcbiAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHNpbmNlIHRoZSBVTklYIGVwb2NoLiBUaGlzIHZhbHVlIGlzIG9ubHkgdXNhYmxlIGluIGEgYnJvd3NlciwgYW5kIG9ubHkgd2hlbiB0aGVcbiAqIHBlcmZvcm1hbmNlIEFQSSBpcyBhdmFpbGFibGUuXG4gKi9cbmV4cG9ydCB2YXIgYnJvd3NlclBlcmZvcm1hbmNlVGltZU9yaWdpbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBlcmZvcm1hbmNlID0gZ2V0R2xvYmFsT2JqZWN0KCkucGVyZm9ybWFuY2U7XG4gICAgaWYgKCFwZXJmb3JtYW5jZSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAocGVyZm9ybWFuY2UudGltZU9yaWdpbikge1xuICAgICAgICByZXR1cm4gcGVyZm9ybWFuY2UudGltZU9yaWdpbjtcbiAgICB9XG4gICAgLy8gV2hpbGUgcGVyZm9ybWFuY2UudGltaW5nLm5hdmlnYXRpb25TdGFydCBpcyBkZXByZWNhdGVkIGluIGZhdm9yIG9mIHBlcmZvcm1hbmNlLnRpbWVPcmlnaW4sIHBlcmZvcm1hbmNlLnRpbWVPcmlnaW5cbiAgICAvLyBpcyBub3QgYXMgd2lkZWx5IHN1cHBvcnRlZC4gTmFtZWx5LCBwZXJmb3JtYW5jZS50aW1lT3JpZ2luIGlzIHVuZGVmaW5lZCBpbiBTYWZhcmkgYXMgb2Ygd3JpdGluZy5cbiAgICAvLyBBbHNvIGFzIG9mIHdyaXRpbmcsIHBlcmZvcm1hbmNlLnRpbWluZyBpcyBub3QgYXZhaWxhYmxlIGluIFdlYiBXb3JrZXJzIGluIG1haW5zdHJlYW0gYnJvd3NlcnMsIHNvIGl0IGlzIG5vdCBhbHdheXNcbiAgICAvLyBhIHZhbGlkIGZhbGxiYWNrLiBJbiB0aGUgYWJzZW5jZSBvZiBhbiBpbml0aWFsIHRpbWUgcHJvdmlkZWQgYnkgdGhlIGJyb3dzZXIsIGZhbGxiYWNrIHRvIHRoZSBjdXJyZW50IHRpbWUgZnJvbSB0aGVcbiAgICAvLyBEYXRlIEFQSS5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICByZXR1cm4gKHBlcmZvcm1hbmNlLnRpbWluZyAmJiBwZXJmb3JtYW5jZS50aW1pbmcubmF2aWdhdGlvblN0YXJ0KSB8fCBEYXRlLm5vdygpO1xufSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWUuanMubWFwIiwiZXhwb3J0IGRlZmF1bHQge1xuICBkaXNhYmxlZDogZmFsc2Vcbn07IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY29uZmlnIGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IHRpbWVvdXRzU2hhcGUgfSBmcm9tICcuL3V0aWxzL1Byb3BUeXBlcyc7XG5pbXBvcnQgVHJhbnNpdGlvbkdyb3VwQ29udGV4dCBmcm9tICcuL1RyYW5zaXRpb25Hcm91cENvbnRleHQnO1xuZXhwb3J0IHZhciBVTk1PVU5URUQgPSAndW5tb3VudGVkJztcbmV4cG9ydCB2YXIgRVhJVEVEID0gJ2V4aXRlZCc7XG5leHBvcnQgdmFyIEVOVEVSSU5HID0gJ2VudGVyaW5nJztcbmV4cG9ydCB2YXIgRU5URVJFRCA9ICdlbnRlcmVkJztcbmV4cG9ydCB2YXIgRVhJVElORyA9ICdleGl0aW5nJztcbi8qKlxuICogVGhlIFRyYW5zaXRpb24gY29tcG9uZW50IGxldHMgeW91IGRlc2NyaWJlIGEgdHJhbnNpdGlvbiBmcm9tIG9uZSBjb21wb25lbnRcbiAqIHN0YXRlIHRvIGFub3RoZXIgX292ZXIgdGltZV8gd2l0aCBhIHNpbXBsZSBkZWNsYXJhdGl2ZSBBUEkuIE1vc3QgY29tbW9ubHlcbiAqIGl0J3MgdXNlZCB0byBhbmltYXRlIHRoZSBtb3VudGluZyBhbmQgdW5tb3VudGluZyBvZiBhIGNvbXBvbmVudCwgYnV0IGNhbiBhbHNvXG4gKiBiZSB1c2VkIHRvIGRlc2NyaWJlIGluLXBsYWNlIHRyYW5zaXRpb24gc3RhdGVzIGFzIHdlbGwuXG4gKlxuICogLS0tXG4gKlxuICogKipOb3RlKio6IGBUcmFuc2l0aW9uYCBpcyBhIHBsYXRmb3JtLWFnbm9zdGljIGJhc2UgY29tcG9uZW50LiBJZiB5b3UncmUgdXNpbmdcbiAqIHRyYW5zaXRpb25zIGluIENTUywgeW91J2xsIHByb2JhYmx5IHdhbnQgdG8gdXNlXG4gKiBbYENTU1RyYW5zaXRpb25gXShodHRwczovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Nzcy10cmFuc2l0aW9uKVxuICogaW5zdGVhZC4gSXQgaW5oZXJpdHMgYWxsIHRoZSBmZWF0dXJlcyBvZiBgVHJhbnNpdGlvbmAsIGJ1dCBjb250YWluc1xuICogYWRkaXRpb25hbCBmZWF0dXJlcyBuZWNlc3NhcnkgdG8gcGxheSBuaWNlIHdpdGggQ1NTIHRyYW5zaXRpb25zIChoZW5jZSB0aGVcbiAqIG5hbWUgb2YgdGhlIGNvbXBvbmVudCkuXG4gKlxuICogLS0tXG4gKlxuICogQnkgZGVmYXVsdCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2VzIG5vdCBhbHRlciB0aGUgYmVoYXZpb3Igb2YgdGhlXG4gKiBjb21wb25lbnQgaXQgcmVuZGVycywgaXQgb25seSB0cmFja3MgXCJlbnRlclwiIGFuZCBcImV4aXRcIiBzdGF0ZXMgZm9yIHRoZVxuICogY29tcG9uZW50cy4gSXQncyB1cCB0byB5b3UgdG8gZ2l2ZSBtZWFuaW5nIGFuZCBlZmZlY3QgdG8gdGhvc2Ugc3RhdGVzLiBGb3JcbiAqIGV4YW1wbGUgd2UgY2FuIGFkZCBzdHlsZXMgdG8gYSBjb21wb25lbnQgd2hlbiBpdCBlbnRlcnMgb3IgZXhpdHM6XG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG4gKlxuICogY29uc3QgZHVyYXRpb24gPSAzMDA7XG4gKlxuICogY29uc3QgZGVmYXVsdFN0eWxlID0ge1xuICogICB0cmFuc2l0aW9uOiBgb3BhY2l0eSAke2R1cmF0aW9ufW1zIGVhc2UtaW4tb3V0YCxcbiAqICAgb3BhY2l0eTogMCxcbiAqIH1cbiAqXG4gKiBjb25zdCB0cmFuc2l0aW9uU3R5bGVzID0ge1xuICogICBlbnRlcmluZzogeyBvcGFjaXR5OiAxIH0sXG4gKiAgIGVudGVyZWQ6ICB7IG9wYWNpdHk6IDEgfSxcbiAqICAgZXhpdGluZzogIHsgb3BhY2l0eTogMCB9LFxuICogICBleGl0ZWQ6ICB7IG9wYWNpdHk6IDAgfSxcbiAqIH07XG4gKlxuICogY29uc3QgRmFkZSA9ICh7IGluOiBpblByb3AgfSkgPT4gKFxuICogICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXtkdXJhdGlvbn0+XG4gKiAgICAge3N0YXRlID0+IChcbiAqICAgICAgIDxkaXYgc3R5bGU9e3tcbiAqICAgICAgICAgLi4uZGVmYXVsdFN0eWxlLFxuICogICAgICAgICAuLi50cmFuc2l0aW9uU3R5bGVzW3N0YXRlXVxuICogICAgICAgfX0+XG4gKiAgICAgICAgIEknbSBhIGZhZGUgVHJhbnNpdGlvbiFcbiAqICAgICAgIDwvZGl2PlxuICogICAgICl9XG4gKiAgIDwvVHJhbnNpdGlvbj5cbiAqICk7XG4gKiBgYGBcbiAqXG4gKiBUaGVyZSBhcmUgNCBtYWluIHN0YXRlcyBhIFRyYW5zaXRpb24gY2FuIGJlIGluOlxuICogIC0gYCdlbnRlcmluZydgXG4gKiAgLSBgJ2VudGVyZWQnYFxuICogIC0gYCdleGl0aW5nJ2BcbiAqICAtIGAnZXhpdGVkJ2BcbiAqXG4gKiBUcmFuc2l0aW9uIHN0YXRlIGlzIHRvZ2dsZWQgdmlhIHRoZSBgaW5gIHByb3AuIFdoZW4gYHRydWVgIHRoZSBjb21wb25lbnRcbiAqIGJlZ2lucyB0aGUgXCJFbnRlclwiIHN0YWdlLiBEdXJpbmcgdGhpcyBzdGFnZSwgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IGZyb21cbiAqIGl0cyBjdXJyZW50IHRyYW5zaXRpb24gc3RhdGUsIHRvIGAnZW50ZXJpbmcnYCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZVxuICogdHJhbnNpdGlvbiBhbmQgdGhlbiB0byB0aGUgYCdlbnRlcmVkJ2Agc3RhZ2Ugb25jZSBpdCdzIGNvbXBsZXRlLiBMZXQncyB0YWtlXG4gKiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgKHdlJ2xsIHVzZSB0aGVcbiAqIFt1c2VTdGF0ZV0oaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2hvb2tzLXJlZmVyZW5jZS5odG1sI3VzZXN0YXRlKSBob29rKTpcbiAqXG4gKiBgYGBqc3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgW2luUHJvcCwgc2V0SW5Qcm9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17NTAwfT5cbiAqICAgICAgICAge3N0YXRlID0+IChcbiAqICAgICAgICAgICAvLyAuLi5cbiAqICAgICAgICAgKX1cbiAqICAgICAgIDwvVHJhbnNpdGlvbj5cbiAqICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gc2V0SW5Qcm9wKHRydWUpfT5cbiAqICAgICAgICAgQ2xpY2sgdG8gRW50ZXJcbiAqICAgICAgIDwvYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IHRvIHRoZSBgJ2VudGVyaW5nJ2Agc3RhdGVcbiAqIGFuZCBzdGF5IHRoZXJlIGZvciA1MDBtcyAodGhlIHZhbHVlIG9mIGB0aW1lb3V0YCkgYmVmb3JlIGl0IGZpbmFsbHkgc3dpdGNoZXNcbiAqIHRvIGAnZW50ZXJlZCdgLlxuICpcbiAqIFdoZW4gYGluYCBpcyBgZmFsc2VgIHRoZSBzYW1lIHRoaW5nIGhhcHBlbnMgZXhjZXB0IHRoZSBzdGF0ZSBtb3ZlcyBmcm9tXG4gKiBgJ2V4aXRpbmcnYCB0byBgJ2V4aXRlZCdgLlxuICovXG5cbnZhciBUcmFuc2l0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb24ocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICB2YXIgcGFyZW50R3JvdXAgPSBjb250ZXh0OyAvLyBJbiB0aGUgY29udGV4dCBvZiBhIFRyYW5zaXRpb25Hcm91cCBhbGwgZW50ZXJzIGFyZSByZWFsbHkgYXBwZWFyc1xuXG4gICAgdmFyIGFwcGVhciA9IHBhcmVudEdyb3VwICYmICFwYXJlbnRHcm91cC5pc01vdW50aW5nID8gcHJvcHMuZW50ZXIgOiBwcm9wcy5hcHBlYXI7XG4gICAgdmFyIGluaXRpYWxTdGF0dXM7XG4gICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcm9wcy5pbikge1xuICAgICAgaWYgKGFwcGVhcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBFTlRFUklORztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFTlRFUkVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcHMudW5tb3VudE9uRXhpdCB8fCBwcm9wcy5tb3VudE9uRW50ZXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IFVOTU9VTlRFRDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzdGF0dXM6IGluaXRpYWxTdGF0dXNcbiAgICB9O1xuICAgIF90aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgVHJhbnNpdGlvbi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZiwgcHJldlN0YXRlKSB7XG4gICAgdmFyIG5leHRJbiA9IF9yZWYuaW47XG5cbiAgICBpZiAobmV4dEluICYmIHByZXZTdGF0ZS5zdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0gLy8gZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUocHJldlByb3BzKSB7XG4gIC8vICAgbGV0IG5leHRTdGF0dXMgPSBudWxsXG4gIC8vICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAvLyAgICAgY29uc3QgeyBzdGF0dXMgfSA9IHRoaXMuc3RhdGVcbiAgLy8gICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9IGVsc2Uge1xuICAvLyAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyAgIHJldHVybiB7IG5leHRTdGF0dXMgfVxuICAvLyB9XG4gIDtcblxuICB2YXIgX3Byb3RvID0gVHJhbnNpdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy51cGRhdGVTdGF0dXModHJ1ZSwgdGhpcy5hcHBlYXJTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIG5leHRTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAgICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVTdGF0dXMoZmFsc2UsIG5leHRTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFRpbWVvdXRzID0gZnVuY3Rpb24gZ2V0VGltZW91dHMoKSB7XG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzLnByb3BzLnRpbWVvdXQ7XG4gICAgdmFyIGV4aXQsIGVudGVyLCBhcHBlYXI7XG4gICAgZXhpdCA9IGVudGVyID0gYXBwZWFyID0gdGltZW91dDtcblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwgJiYgdHlwZW9mIHRpbWVvdXQgIT09ICdudW1iZXInKSB7XG4gICAgICBleGl0ID0gdGltZW91dC5leGl0O1xuICAgICAgZW50ZXIgPSB0aW1lb3V0LmVudGVyOyAvLyBUT0RPOiByZW1vdmUgZmFsbGJhY2sgZm9yIG5leHQgbWFqb3JcblxuICAgICAgYXBwZWFyID0gdGltZW91dC5hcHBlYXIgIT09IHVuZGVmaW5lZCA/IHRpbWVvdXQuYXBwZWFyIDogZW50ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGV4aXQ6IGV4aXQsXG4gICAgICBlbnRlcjogZW50ZXIsXG4gICAgICBhcHBlYXI6IGFwcGVhclxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVN0YXR1cyA9IGZ1bmN0aW9uIHVwZGF0ZVN0YXR1cyhtb3VudGluZywgbmV4dFN0YXR1cykge1xuICAgIGlmIChtb3VudGluZyA9PT0gdm9pZCAwKSB7XG4gICAgICBtb3VudGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChuZXh0U3RhdHVzICE9PSBudWxsKSB7XG4gICAgICAvLyBuZXh0U3RhdHVzIHdpbGwgYWx3YXlzIGJlIEVOVEVSSU5HIG9yIEVYSVRJTkcuXG4gICAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuXG4gICAgICBpZiAobmV4dFN0YXR1cyA9PT0gRU5URVJJTkcpIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRW50ZXIobW91bnRpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRXhpdCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy51bm1vdW50T25FeGl0ICYmIHRoaXMuc3RhdGUuc3RhdHVzID09PSBFWElURUQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IFVOTU9VTlRFRFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRW50ZXIgPSBmdW5jdGlvbiBwZXJmb3JtRW50ZXIobW91bnRpbmcpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBlbnRlciA9IHRoaXMucHJvcHMuZW50ZXI7XG4gICAgdmFyIGFwcGVhcmluZyA9IHRoaXMuY29udGV4dCA/IHRoaXMuY29udGV4dC5pc01vdW50aW5nIDogbW91bnRpbmc7XG5cbiAgICB2YXIgX3JlZjIgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyBbYXBwZWFyaW5nXSA6IFtSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKSwgYXBwZWFyaW5nXSxcbiAgICAgICAgbWF5YmVOb2RlID0gX3JlZjJbMF0sXG4gICAgICAgIG1heWJlQXBwZWFyaW5nID0gX3JlZjJbMV07XG5cbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7XG4gICAgdmFyIGVudGVyVGltZW91dCA9IGFwcGVhcmluZyA/IHRpbWVvdXRzLmFwcGVhciA6IHRpbWVvdXRzLmVudGVyOyAvLyBubyBlbnRlciBhbmltYXRpb24gc2tpcCByaWdodCB0byBFTlRFUkVEXG4gICAgLy8gaWYgd2UgYXJlIG1vdW50aW5nIGFuZCBydW5uaW5nIHRoaXMgaXQgbWVhbnMgYXBwZWFyIF9tdXN0XyBiZSBzZXRcblxuICAgIGlmICghbW91bnRpbmcgJiYgIWVudGVyIHx8IGNvbmZpZy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChtYXliZU5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkVudGVyKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRU5URVJJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucHJvcHMub25FbnRlcmluZyhtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcblxuICAgICAgX3RoaXMyLm9uVHJhbnNpdGlvbkVuZChlbnRlclRpbWVvdXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIucHJvcHMub25FbnRlcmVkKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRXhpdCA9IGZ1bmN0aW9uIHBlcmZvcm1FeGl0KCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGV4aXQgPSB0aGlzLnByb3BzLmV4aXQ7XG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBtYXliZU5vZGUgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyB1bmRlZmluZWQgOiBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTsgLy8gbm8gZXhpdCBhbmltYXRpb24gc2tpcCByaWdodCB0byBFWElURURcblxuICAgIGlmICghZXhpdCB8fCBjb25maWcuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG1heWJlTm9kZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uRXhpdChtYXliZU5vZGUpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRVhJVElOR1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRpbmcobWF5YmVOb2RlKTtcblxuICAgICAgX3RoaXMzLm9uVHJhbnNpdGlvbkVuZCh0aW1lb3V0cy5leGl0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczMucHJvcHMub25FeGl0ZWQobWF5YmVOb2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY2FuY2VsTmV4dENhbGxiYWNrID0gZnVuY3Rpb24gY2FuY2VsTmV4dENhbGxiYWNrKCkge1xuICAgIGlmICh0aGlzLm5leHRDYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsKCk7XG4gICAgICB0aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zYWZlU2V0U3RhdGUgPSBmdW5jdGlvbiBzYWZlU2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjaykge1xuICAgIC8vIFRoaXMgc2hvdWxkbid0IGJlIG5lY2Vzc2FyeSwgYnV0IHRoZXJlIGFyZSB3ZWlyZCByYWNlIGNvbmRpdGlvbnMgd2l0aFxuICAgIC8vIHNldFN0YXRlIGNhbGxiYWNrcyBhbmQgdW5tb3VudGluZyBpbiB0ZXN0aW5nLCBzbyBhbHdheXMgbWFrZSBzdXJlIHRoYXRcbiAgICAvLyB3ZSBjYW4gY2FuY2VsIGFueSBwZW5kaW5nIHNldFN0YXRlIGNhbGxiYWNrcyBhZnRlciB3ZSB1bm1vdW50LlxuICAgIGNhbGxiYWNrID0gdGhpcy5zZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spO1xuICAgIHRoaXMuc2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgX3Byb3RvLnNldE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIHNldE5leHRDYWxsYmFjayhjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgdmFyIGFjdGl2ZSA9IHRydWU7XG5cbiAgICB0aGlzLm5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXM0Lm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgICAgIGNhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLm5leHRDYWxsYmFjaztcbiAgfTtcblxuICBfcHJvdG8ub25UcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKHRpbWVvdXQsIGhhbmRsZXIpIHtcbiAgICB0aGlzLnNldE5leHRDYWxsYmFjayhoYW5kbGVyKTtcbiAgICB2YXIgbm9kZSA9IHRoaXMucHJvcHMubm9kZVJlZiA/IHRoaXMucHJvcHMubm9kZVJlZi5jdXJyZW50IDogUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7XG4gICAgdmFyIGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIgPSB0aW1lb3V0ID09IG51bGwgJiYgIXRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXI7XG5cbiAgICBpZiAoIW5vZGUgfHwgZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lcikge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgIHZhciBfcmVmMyA9IHRoaXMucHJvcHMubm9kZVJlZiA/IFt0aGlzLm5leHRDYWxsYmFja10gOiBbbm9kZSwgdGhpcy5uZXh0Q2FsbGJhY2tdLFxuICAgICAgICAgIG1heWJlTm9kZSA9IF9yZWYzWzBdLFxuICAgICAgICAgIG1heWJlTmV4dENhbGxiYWNrID0gX3JlZjNbMV07XG5cbiAgICAgIHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIobWF5YmVOb2RlLCBtYXliZU5leHRDYWxsYmFjayk7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgdGltZW91dCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgaWYgKHN0YXR1cyA9PT0gVU5NT1VOVEVEKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBfaW4gPSBfdGhpcyRwcm9wcy5pbixcbiAgICAgICAgX21vdW50T25FbnRlciA9IF90aGlzJHByb3BzLm1vdW50T25FbnRlcixcbiAgICAgICAgX3VubW91bnRPbkV4aXQgPSBfdGhpcyRwcm9wcy51bm1vdW50T25FeGl0LFxuICAgICAgICBfYXBwZWFyID0gX3RoaXMkcHJvcHMuYXBwZWFyLFxuICAgICAgICBfZW50ZXIgPSBfdGhpcyRwcm9wcy5lbnRlcixcbiAgICAgICAgX2V4aXQgPSBfdGhpcyRwcm9wcy5leGl0LFxuICAgICAgICBfdGltZW91dCA9IF90aGlzJHByb3BzLnRpbWVvdXQsXG4gICAgICAgIF9hZGRFbmRMaXN0ZW5lciA9IF90aGlzJHByb3BzLmFkZEVuZExpc3RlbmVyLFxuICAgICAgICBfb25FbnRlciA9IF90aGlzJHByb3BzLm9uRW50ZXIsXG4gICAgICAgIF9vbkVudGVyaW5nID0gX3RoaXMkcHJvcHMub25FbnRlcmluZyxcbiAgICAgICAgX29uRW50ZXJlZCA9IF90aGlzJHByb3BzLm9uRW50ZXJlZCxcbiAgICAgICAgX29uRXhpdCA9IF90aGlzJHByb3BzLm9uRXhpdCxcbiAgICAgICAgX29uRXhpdGluZyA9IF90aGlzJHByb3BzLm9uRXhpdGluZyxcbiAgICAgICAgX29uRXhpdGVkID0gX3RoaXMkcHJvcHMub25FeGl0ZWQsXG4gICAgICAgIF9ub2RlUmVmID0gX3RoaXMkcHJvcHMubm9kZVJlZixcbiAgICAgICAgY2hpbGRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImluXCIsIFwibW91bnRPbkVudGVyXCIsIFwidW5tb3VudE9uRXhpdFwiLCBcImFwcGVhclwiLCBcImVudGVyXCIsIFwiZXhpdFwiLCBcInRpbWVvdXRcIiwgXCJhZGRFbmRMaXN0ZW5lclwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FbnRlcmVkXCIsIFwib25FeGl0XCIsIFwib25FeGl0aW5nXCIsIFwib25FeGl0ZWRcIiwgXCJub2RlUmVmXCJdKTtcblxuICAgIHJldHVybiAoXG4gICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAvLyBhbGxvd3MgZm9yIG5lc3RlZCBUcmFuc2l0aW9uc1xuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBudWxsXG4gICAgICB9LCB0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicgPyBjaGlsZHJlbihzdGF0dXMsIGNoaWxkUHJvcHMpIDogUmVhY3QuY2xvbmVFbGVtZW50KFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pLCBjaGlsZFByb3BzKSlcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uLmNvbnRleHRUeXBlID0gVHJhbnNpdGlvbkdyb3VwQ29udGV4dDtcblRyYW5zaXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQSBSZWFjdCByZWZlcmVuY2UgdG8gRE9NIGVsZW1lbnQgdGhhdCBuZWVkIHRvIHRyYW5zaXRpb246XG4gICAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81MTEyNzEzMC80NjcxOTMyXG4gICAqXG4gICAqICAgLSBXaGVuIGBub2RlUmVmYCBwcm9wIGlzIHVzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkIHRvIGNhbGxiYWNrIGZ1bmN0aW9uc1xuICAgKiAgICAgIChlLmcuIGBvbkVudGVyYCkgYmVjYXVzZSB1c2VyIGFscmVhZHkgaGFzIGRpcmVjdCBhY2Nlc3MgdG8gdGhlIG5vZGUuXG4gICAqICAgLSBXaGVuIGNoYW5naW5nIGBrZXlgIHByb3Agb2YgYFRyYW5zaXRpb25gIGluIGEgYFRyYW5zaXRpb25Hcm91cGAgYSBuZXdcbiAgICogICAgIGBub2RlUmVmYCBuZWVkIHRvIGJlIHByb3ZpZGVkIHRvIGBUcmFuc2l0aW9uYCB3aXRoIGNoYW5nZWQgYGtleWAgcHJvcFxuICAgKiAgICAgKHNlZVxuICAgKiAgICAgW3Rlc3QvQ1NTVHJhbnNpdGlvbi10ZXN0LmpzXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Jsb2IvMTM0MzVmODk3YjNhYjcxZjZlMTlkNzI0ZjE0NTU5NmY1OTEwNTgxYy90ZXN0L0NTU1RyYW5zaXRpb24tdGVzdC5qcyNMMzYyLUw0MzcpKS5cbiAgICovXG4gIG5vZGVSZWY6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogdHlwZW9mIEVsZW1lbnQgPT09ICd1bmRlZmluZWQnID8gUHJvcFR5cGVzLmFueSA6IFByb3BUeXBlcy5pbnN0YW5jZU9mKEVsZW1lbnQpXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBIGBmdW5jdGlvbmAgY2hpbGQgY2FuIGJlIHVzZWQgaW5zdGVhZCBvZiBhIFJlYWN0IGVsZW1lbnQuIFRoaXMgZnVuY3Rpb24gaXNcbiAgICogY2FsbGVkIHdpdGggdGhlIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0dXMgKGAnZW50ZXJpbmcnYCwgYCdlbnRlcmVkJ2AsXG4gICAqIGAnZXhpdGluZydgLCBgJ2V4aXRlZCdgKSwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gYXBwbHkgY29udGV4dFxuICAgKiBzcGVjaWZpYyBwcm9wcyB0byBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIDxUcmFuc2l0aW9uIGluPXt0aGlzLnN0YXRlLmlufSB0aW1lb3V0PXsxNTB9PlxuICAgKiAgIHtzdGF0ZSA9PiAoXG4gICAqICAgICA8TXlDb21wb25lbnQgY2xhc3NOYW1lPXtgZmFkZSBmYWRlLSR7c3RhdGV9YH0gLz5cbiAgICogICApfVxuICAgKiA8L1RyYW5zaXRpb24+XG4gICAqIGBgYFxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsIFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRdKS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBTaG93IHRoZSBjb21wb25lbnQ7IHRyaWdnZXJzIHRoZSBlbnRlciBvciBleGl0IHN0YXRlc1xuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBjaGlsZCBjb21wb25lbnQgaXMgbW91bnRlZCBpbW1lZGlhdGVseSBhbG9uZyB3aXRoXG4gICAqIHRoZSBwYXJlbnQgYFRyYW5zaXRpb25gIGNvbXBvbmVudC4gSWYgeW91IHdhbnQgdG8gXCJsYXp5IG1vdW50XCIgdGhlIGNvbXBvbmVudCBvbiB0aGVcbiAgICogZmlyc3QgYGluPXt0cnVlfWAgeW91IGNhbiBzZXQgYG1vdW50T25FbnRlcmAuIEFmdGVyIHRoZSBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIHRoZSBjb21wb25lbnQgd2lsbCBzdGF5XG4gICAqIG1vdW50ZWQsIGV2ZW4gb24gXCJleGl0ZWRcIiwgdW5sZXNzIHlvdSBhbHNvIHNwZWNpZnkgYHVubW91bnRPbkV4aXRgLlxuICAgKi9cbiAgbW91bnRPbkVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IHN0YXlzIG1vdW50ZWQgYWZ0ZXIgaXQgcmVhY2hlcyB0aGUgYCdleGl0ZWQnYCBzdGF0ZS5cbiAgICogU2V0IGB1bm1vdW50T25FeGl0YCBpZiB5b3UnZCBwcmVmZXIgdG8gdW5tb3VudCB0aGUgY29tcG9uZW50IGFmdGVyIGl0IGZpbmlzaGVzIGV4aXRpbmcuXG4gICAqL1xuICB1bm1vdW50T25FeGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGRvZXMgbm90IHBlcmZvcm0gdGhlIGVudGVyIHRyYW5zaXRpb24gd2hlblxuICAgKiBpdCBmaXJzdCBtb3VudHMsIHJlZ2FyZGxlc3Mgb2YgdGhlIHZhbHVlIG9mIGBpbmAuIElmIHlvdSB3YW50IHRoaXNcbiAgICogYmVoYXZpb3IsIHNldCBib3RoIGBhcHBlYXJgIGFuZCBgaW5gIHRvIGB0cnVlYC5cbiAgICpcbiAgICogPiAqKk5vdGUqKjogdGhlcmUgYXJlIG5vIHNwZWNpYWwgYXBwZWFyIHN0YXRlcyBsaWtlIGBhcHBlYXJpbmdgL2BhcHBlYXJlZGAsIHRoaXMgcHJvcFxuICAgKiA+IG9ubHkgYWRkcyBhbiBhZGRpdGlvbmFsIGVudGVyIHRyYW5zaXRpb24uIEhvd2V2ZXIsIGluIHRoZVxuICAgKiA+IGA8Q1NTVHJhbnNpdGlvbj5gIGNvbXBvbmVudCB0aGF0IGZpcnN0IGVudGVyIHRyYW5zaXRpb24gZG9lcyByZXN1bHQgaW5cbiAgICogPiBhZGRpdGlvbmFsIGAuYXBwZWFyLSpgIGNsYXNzZXMsIHRoYXQgd2F5IHlvdSBjYW4gY2hvb3NlIHRvIHN0eWxlIGl0XG4gICAqID4gZGlmZmVyZW50bHkuXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBlbnRlciB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZXhpdCB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogUmVxdWlyZWQgdW5sZXNzIGBhZGRFbmRMaXN0ZW5lcmAgaXMgcHJvdmlkZWQuXG4gICAqXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnM6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXs1MDB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBvciBpbmRpdmlkdWFsbHk6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXt7XG4gICAqICBhcHBlYXI6IDUwMCxcbiAgICogIGVudGVyOiAzMDAsXG4gICAqICBleGl0OiA1MDAsXG4gICAqIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiAtIGBhcHBlYXJgIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSBvZiBgZW50ZXJgXG4gICAqIC0gYGVudGVyYCBkZWZhdWx0cyB0byBgMGBcbiAgICogLSBgZXhpdGAgZGVmYXVsdHMgdG8gYDBgXG4gICAqXG4gICAqIEB0eXBlIHtudW1iZXIgfCB7IGVudGVyPzogbnVtYmVyLCBleGl0PzogbnVtYmVyLCBhcHBlYXI/OiBudW1iZXIgfX1cbiAgICovXG4gIHRpbWVvdXQ6IGZ1bmN0aW9uIHRpbWVvdXQocHJvcHMpIHtcbiAgICB2YXIgcHQgPSB0aW1lb3V0c1NoYXBlO1xuICAgIGlmICghcHJvcHMuYWRkRW5kTGlzdGVuZXIpIHB0ID0gcHQuaXNSZXF1aXJlZDtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBwdC5hcHBseSh2b2lkIDAsIFtwcm9wc10uY29uY2F0KGFyZ3MpKTtcbiAgfSxcblxuICAvKipcbiAgICogQWRkIGEgY3VzdG9tIHRyYW5zaXRpb24gZW5kIHRyaWdnZXIuIENhbGxlZCB3aXRoIHRoZSB0cmFuc2l0aW9uaW5nXG4gICAqIERPTSBub2RlIGFuZCBhIGBkb25lYCBjYWxsYmFjay4gQWxsb3dzIGZvciBtb3JlIGZpbmUgZ3JhaW5lZCB0cmFuc2l0aW9uIGVuZFxuICAgKiBsb2dpYy4gVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIGFkZEVuZExpc3RlbmVyPXsobm9kZSwgZG9uZSkgPT4ge1xuICAgKiAgIC8vIHVzZSB0aGUgY3NzIHRyYW5zaXRpb25lbmQgZXZlbnQgdG8gbWFyayB0aGUgZmluaXNoIG9mIGEgdHJhbnNpdGlvblxuICAgKiAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGRvbmUsIGZhbHNlKTtcbiAgICogfX1cbiAgICogYGBgXG4gICAqL1xuICBhZGRFbmRMaXN0ZW5lcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyZWRcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0ZWRcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jXG59IDoge307IC8vIE5hbWUgdGhlIGZ1bmN0aW9uIHNvIGl0IGlzIGNsZWFyZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cblRyYW5zaXRpb24uZGVmYXVsdFByb3BzID0ge1xuICBpbjogZmFsc2UsXG4gIG1vdW50T25FbnRlcjogZmFsc2UsXG4gIHVubW91bnRPbkV4aXQ6IGZhbHNlLFxuICBhcHBlYXI6IGZhbHNlLFxuICBlbnRlcjogdHJ1ZSxcbiAgZXhpdDogdHJ1ZSxcbiAgb25FbnRlcjogbm9vcCxcbiAgb25FbnRlcmluZzogbm9vcCxcbiAgb25FbnRlcmVkOiBub29wLFxuICBvbkV4aXQ6IG5vb3AsXG4gIG9uRXhpdGluZzogbm9vcCxcbiAgb25FeGl0ZWQ6IG5vb3Bcbn07XG5UcmFuc2l0aW9uLlVOTU9VTlRFRCA9IFVOTU9VTlRFRDtcblRyYW5zaXRpb24uRVhJVEVEID0gRVhJVEVEO1xuVHJhbnNpdGlvbi5FTlRFUklORyA9IEVOVEVSSU5HO1xuVHJhbnNpdGlvbi5FTlRFUkVEID0gRU5URVJFRDtcblRyYW5zaXRpb24uRVhJVElORyA9IEVYSVRJTkc7XG5leHBvcnQgZGVmYXVsdCBUcmFuc2l0aW9uOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn0iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wic3RlcFwiOlwiU3RlcF9fc3RlcC0tMWhraTlcIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcInN0ZXAtd3JhcHBlclwiOlwiU3RlcFdpemFyZF9fc3RlcC13cmFwcGVyLS0ydXIyaFwiLFwic3RlcFwiOlwiU3RlcFdpemFyZF9fc3RlcC0tMWM1YWRcIixcImFjdGl2ZVwiOlwiU3RlcFdpemFyZF9fYWN0aXZlLS0xNUdyWlwifTsiLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gJy4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzJztcbmltcG9ydCB0b0RhdGUgZnJvbSAnLi4vdG9EYXRlL2luZGV4LmpzJztcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnO1xuLyoqXG4gKiBAbmFtZSBhZGREYXlzXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBkYXlzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRheXMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgZGF5cyB0byBiZSBhZGRlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBkYXlzIGFkZGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFkZCAxMCBkYXlzIHRvIDEgU2VwdGVtYmVyIDIwMTQ6XG4gKiB2YXIgcmVzdWx0ID0gYWRkRGF5cyhuZXcgRGF0ZSgyMDE0LCA4LCAxKSwgMTApXG4gKiAvLz0+IFRodSBTZXAgMTEgMjAxNCAwMDowMDowMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZERheXMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG5cbiAgaWYgKGlzTmFOKGFtb3VudCkpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxuXG4gIGlmICghYW1vdW50KSB7XG4gICAgLy8gSWYgMCBkYXlzLCBuby1vcCB0byBhdm9pZCBjaGFuZ2luZyB0aW1lcyBpbiB0aGUgaG91ciBiZWZvcmUgZW5kIG9mIERTVFxuICAgIHJldHVybiBkYXRlO1xuICB9XG5cbiAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgYW1vdW50KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImxhbmd1YWdlU3dpdGNoZXJcIjpcIkF1dGhTdGVwX19sYW5ndWFnZVN3aXRjaGVyLS0yaUs5d1wifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wib3JkZXJlZExpc3RcIjpcIk9yZGVyZWRMaXN0X19vcmRlcmVkTGlzdC0tdnNkRmpcIixcIml0ZW1cIjpcIk9yZGVyZWRMaXN0X19pdGVtLS0yaFNHOVwifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wibGFuZ3VhZ2VTd2l0Y2hlclwiOlwiRWNvbm9teVN0ZXBfX2xhbmd1YWdlU3dpdGNoZXItLTJBWDVvXCIsXCJ0aXRsZVwiOlwiRWNvbm9teVN0ZXBfX3RpdGxlLS0zX1c5TVwiLFwiYnV0dG9uc1wiOlwiRWNvbm9teVN0ZXBfX2J1dHRvbnMtLTE2RjBJXCIsXCJidXR0b25cIjpcIkVjb25vbXlTdGVwX19idXR0b24tLTdsUkJrXCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJsYW5ndWFnZVN3aXRjaGVyXCI6XCJJbnN0cnVjdGlvbnNTdGVwX19sYW5ndWFnZVN3aXRjaGVyLS0xZXFNQ1wiLFwibG9nb1wiOlwiSW5zdHJ1Y3Rpb25zU3RlcF9fbG9nby0tMVR0UkNcIixcInRpdGxlXCI6XCJJbnN0cnVjdGlvbnNTdGVwX190aXRsZS0temdvRjNcIixcImJ1dHRvblwiOlwiSW5zdHJ1Y3Rpb25zU3RlcF9fYnV0dG9uLS0xLVlTdVwifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wid2VsY29tZVwiOlwiV2VsY29tZVN0ZXBfX3dlbGNvbWUtLTM4SUJRXCIsXCJsYW5ndWFnZVN3aXRjaGVyXCI6XCJXZWxjb21lU3RlcF9fbGFuZ3VhZ2VTd2l0Y2hlci0tM3dWN2VcIixcImxvZ29cIjpcIldlbGNvbWVTdGVwX19sb2dvLS0yVEhWUlwiLFwidGl0bGVcIjpcIldlbGNvbWVTdGVwX190aXRsZS0tM25EUFRcIixcInRleHRcIjpcIldlbGNvbWVTdGVwX190ZXh0LS0xNjRIZVwiLFwiYnV0dG9uXCI6XCJXZWxjb21lU3RlcF9fYnV0dG9uLS11R1JPVlwifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wib25Cb2FyZGluZ1wiOlwiT25Cb2FyZGluZ19fb25Cb2FyZGluZy0tUzZLZTNcIixcImV4aXRpbmdcIjpcIk9uQm9hcmRpbmdfX2V4aXRpbmctLTNrWGhmXCIsXCJleGl0ZWRcIjpcIk9uQm9hcmRpbmdfX2V4aXRlZC0taDBZcUdcIixcImVudGVyZWRcIjpcIk9uQm9hcmRpbmdfX2VudGVyZWQtLTM5akd5XCIsXCJsYW5ndWFnZVN3aXRjaGVyXCI6XCJPbkJvYXJkaW5nX19sYW5ndWFnZVN3aXRjaGVyLS0xWUloWlwifTsiLCJpbXBvcnQgdG9EYXRlIGZyb20gJy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbi8qKlxuICogQG5hbWUgaXNWYWxpZFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB2YWxpZD9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgZmFsc2UgaWYgYXJndW1lbnQgaXMgSW52YWxpZCBEYXRlIGFuZCB0cnVlIG90aGVyd2lzZS5cbiAqIEFyZ3VtZW50IGlzIGNvbnZlcnRlZCB0byBEYXRlIHVzaW5nIGB0b0RhdGVgLiBTZWUgW3RvRGF0ZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy90b0RhdGV9XG4gKiBJbnZhbGlkIERhdGUgaXMgYSBEYXRlLCB3aG9zZSB0aW1lIHZhbHVlIGlzIE5hTi5cbiAqXG4gKiBUaW1lIHZhbHVlIG9mIERhdGU6IGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuOS4xLjFcbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIC0gTm93IGBpc1ZhbGlkYCBkb2Vzbid0IHRocm93IGFuIGV4Y2VwdGlvblxuICogICBpZiB0aGUgZmlyc3QgYXJndW1lbnQgaXMgbm90IGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKiAgIEluc3RlYWQsIGFyZ3VtZW50IGlzIGNvbnZlcnRlZCBiZWZvcmVoYW5kIHVzaW5nIGB0b0RhdGVgLlxuICpcbiAqICAgRXhhbXBsZXM6XG4gKlxuICogICB8IGBpc1ZhbGlkYCBhcmd1bWVudCAgICAgICAgfCBCZWZvcmUgdjIuMC4wIHwgdjIuMC4wIG9ud2FyZCB8XG4gKiAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLXxcbiAqICAgfCBgbmV3IERhdGUoKWAgICAgICAgICAgICAgIHwgYHRydWVgICAgICAgICB8IGB0cnVlYCAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZSgnMjAxNi0wMS0wMScpYCAgfCBgdHJ1ZWAgICAgICAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKCcnKWAgICAgICAgICAgICB8IGBmYWxzZWAgICAgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgbmV3IERhdGUoMTQ4ODM3MDgzNTA4MSlgIHwgYHRydWVgICAgICAgICB8IGB0cnVlYCAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZShOYU4pYCAgICAgICAgICAgfCBgZmFsc2VgICAgICAgIHwgYGZhbHNlYCAgICAgICB8XG4gKiAgIHwgYCcyMDE2LTAxLTAxJ2AgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgJydgICAgICAgICAgICAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGAxNDg4MzcwODM1MDgxYCAgICAgICAgICAgfCBgVHlwZUVycm9yYCAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYE5hTmAgICAgICAgICAgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqXG4gKiAgIFdlIGludHJvZHVjZSB0aGlzIGNoYW5nZSB0byBtYWtlICpkYXRlLWZucyogY29uc2lzdGVudCB3aXRoIEVDTUFTY3JpcHQgYmVoYXZpb3JcbiAqICAgdGhhdCB0cnkgdG8gY29lcmNlIGFyZ3VtZW50cyB0byB0aGUgZXhwZWN0ZWQgdHlwZVxuICogICAod2hpY2ggaXMgYWxzbyB0aGUgY2FzZSB3aXRoIG90aGVyICpkYXRlLWZucyogZnVuY3Rpb25zKS5cbiAqXG4gKiBAcGFyYW0geyp9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlIGlzIHZhbGlkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWxpZCBkYXRlOlxuICogdmFyIHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoMjAxNCwgMSwgMzEpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgdmFsdWUsIGNvbnZlcnRhYmxlIGludG8gYSBkYXRlOlxuICogdmFyIHJlc3VsdCA9IGlzVmFsaWQoMTM5MzgwNDgwMDAwMClcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIGludmFsaWQgZGF0ZTpcbiAqIHZhciByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKCcnKSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1ZhbGlkKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgcmV0dXJuICFpc05hTihkYXRlKTtcbn0iLCJ2YXIgZm9ybWF0RGlzdGFuY2VMb2NhbGUgPSB7XG4gIGxlc3NUaGFuWFNlY29uZHM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBzZWNvbmQnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBzZWNvbmRzJ1xuICB9LFxuICB4U2Vjb25kczoge1xuICAgIG9uZTogJzEgc2Vjb25kJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBzZWNvbmRzJ1xuICB9LFxuICBoYWxmQU1pbnV0ZTogJ2hhbGYgYSBtaW51dGUnLFxuICBsZXNzVGhhblhNaW51dGVzOiB7XG4gICAgb25lOiAnbGVzcyB0aGFuIGEgbWludXRlJyxcbiAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gbWludXRlcydcbiAgfSxcbiAgeE1pbnV0ZXM6IHtcbiAgICBvbmU6ICcxIG1pbnV0ZScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbWludXRlcydcbiAgfSxcbiAgYWJvdXRYSG91cnM6IHtcbiAgICBvbmU6ICdhYm91dCAxIGhvdXInLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IGhvdXJzJ1xuICB9LFxuICB4SG91cnM6IHtcbiAgICBvbmU6ICcxIGhvdXInLFxuICAgIG90aGVyOiAne3tjb3VudH19IGhvdXJzJ1xuICB9LFxuICB4RGF5czoge1xuICAgIG9uZTogJzEgZGF5JyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBkYXlzJ1xuICB9LFxuICBhYm91dFhXZWVrczoge1xuICAgIG9uZTogJ2Fib3V0IDEgd2VlaycsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gd2Vla3MnXG4gIH0sXG4gIHhXZWVrczoge1xuICAgIG9uZTogJzEgd2VlaycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gd2Vla3MnXG4gIH0sXG4gIGFib3V0WE1vbnRoczoge1xuICAgIG9uZTogJ2Fib3V0IDEgbW9udGgnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IG1vbnRocydcbiAgfSxcbiAgeE1vbnRoczoge1xuICAgIG9uZTogJzEgbW9udGgnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1vbnRocydcbiAgfSxcbiAgYWJvdXRYWWVhcnM6IHtcbiAgICBvbmU6ICdhYm91dCAxIHllYXInLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICB4WWVhcnM6IHtcbiAgICBvbmU6ICcxIHllYXInLFxuICAgIG90aGVyOiAne3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBvdmVyWFllYXJzOiB7XG4gICAgb25lOiAnb3ZlciAxIHllYXInLFxuICAgIG90aGVyOiAnb3ZlciB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIGFsbW9zdFhZZWFyczoge1xuICAgIG9uZTogJ2FsbW9zdCAxIHllYXInLFxuICAgIG90aGVyOiAnYWxtb3N0IHt7Y291bnR9fSB5ZWFycydcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlKHRva2VuLCBjb3VudCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHJlc3VsdDtcblxuICBpZiAodHlwZW9mIGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub25lO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudCk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuICdpbiAnICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJyBhZ28nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRGb3JtYXRMb25nRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpcnR5T3B0aW9ucykge1xuICAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICB2YXIgZm9ybWF0ID0gYXJncy5mb3JtYXRzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHNbYXJncy5kZWZhdWx0V2lkdGhdO1xuICAgIHJldHVybiBmb3JtYXQ7XG4gIH07XG59IiwiaW1wb3J0IGJ1aWxkRm9ybWF0TG9uZ0ZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanMnO1xudmFyIGRhdGVGb3JtYXRzID0ge1xuICBmdWxsOiAnRUVFRSwgTU1NTSBkbywgeScsXG4gIGxvbmc6ICdNTU1NIGRvLCB5JyxcbiAgbWVkaXVtOiAnTU1NIGQsIHknLFxuICBzaG9ydDogJ01NL2RkL3l5eXknXG59O1xudmFyIHRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiAnaDptbTpzcyBhIHp6enonLFxuICBsb25nOiAnaDptbTpzcyBhIHonLFxuICBtZWRpdW06ICdoOm1tOnNzIGEnLFxuICBzaG9ydDogJ2g6bW0gYSdcbn07XG52YXIgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbG9uZzogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIG1lZGl1bTogJ3t7ZGF0ZX19LCB7e3RpbWV9fScsXG4gIHNob3J0OiAne3tkYXRlfX0sIHt7dGltZX19J1xufTtcbnZhciBmb3JtYXRMb25nID0ge1xuICBkYXRlOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIHRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiB0aW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgZGF0ZVRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlVGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXRMb25nOyIsInZhciBmb3JtYXRSZWxhdGl2ZUxvY2FsZSA9IHtcbiAgbGFzdFdlZWs6IFwiJ2xhc3QnIGVlZWUgJ2F0JyBwXCIsXG4gIHllc3RlcmRheTogXCIneWVzdGVyZGF5IGF0JyBwXCIsXG4gIHRvZGF5OiBcIid0b2RheSBhdCcgcFwiLFxuICB0b21vcnJvdzogXCIndG9tb3Jyb3cgYXQnIHBcIixcbiAgbmV4dFdlZWs6IFwiZWVlZSAnYXQnIHBcIixcbiAgb3RoZXI6ICdQJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlKHRva2VuLCBfZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykge1xuICByZXR1cm4gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTG9jYWxpemVGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlydHlJbmRleCwgZGlydHlPcHRpb25zKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gICAgdmFyIGNvbnRleHQgPSBvcHRpb25zLmNvbnRleHQgPyBTdHJpbmcob3B0aW9ucy5jb250ZXh0KSA6ICdzdGFuZGFsb25lJztcbiAgICB2YXIgdmFsdWVzQXJyYXk7XG5cbiAgICBpZiAoY29udGV4dCA9PT0gJ2Zvcm1hdHRpbmcnICYmIGFyZ3MuZm9ybWF0dGluZ1ZhbHVlcykge1xuICAgICAgdmFyIGRlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCB8fCBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBkZWZhdWx0V2lkdGg7XG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1t3aWR0aF0gfHwgYXJncy5mb3JtYXR0aW5nVmFsdWVzW2RlZmF1bHRXaWR0aF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhciBfd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy52YWx1ZXNbX3dpZHRoXSB8fCBhcmdzLnZhbHVlc1tfZGVmYXVsdFdpZHRoXTtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXggPSBhcmdzLmFyZ3VtZW50Q2FsbGJhY2sgPyBhcmdzLmFyZ3VtZW50Q2FsbGJhY2soZGlydHlJbmRleCkgOiBkaXJ0eUluZGV4O1xuICAgIHJldHVybiB2YWx1ZXNBcnJheVtpbmRleF07XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaEZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXJ0eVN0cmluZywgZGlydHlPcHRpb25zKSB7XG4gICAgdmFyIHN0cmluZyA9IFN0cmluZyhkaXJ0eVN0cmluZyk7XG4gICAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICB2YXIgbWF0Y2hQYXR0ZXJuID0gd2lkdGggJiYgYXJncy5tYXRjaFBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLm1hdGNoUGF0dGVybnNbYXJncy5kZWZhdWx0TWF0Y2hXaWR0aF07XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKG1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVBhdHRlcm5zID0gd2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLnBhcnNlUGF0dGVybnNbYXJncy5kZWZhdWx0UGFyc2VXaWR0aF07XG4gICAgdmFyIHZhbHVlO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwYXJzZVBhdHRlcm5zKSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgdmFsdWUgPSBmaW5kSW5kZXgocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSA9IGZpbmRLZXkocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpXG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHByZWRpY2F0ZShvYmplY3Rba2V5XSkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSA9IDA7IGtleSA8IGFycmF5Lmxlbmd0aDsga2V5KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxufSIsImltcG9ydCBidWlsZE1hdGNoUGF0dGVybkZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qcyc7XG5pbXBvcnQgYnVpbGRNYXRjaEZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzJztcbnZhciBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL14oXFxkKykodGh8c3R8bmR8cmQpPy9pO1xudmFyIHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xudmFyIG1hdGNoRXJhUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYnxhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oYlxcLj9cXHM/Y1xcLj98YlxcLj9cXHM/Y1xcLj9cXHM/ZVxcLj98YVxcLj9cXHM/ZFxcLj98Y1xcLj9cXHM/ZVxcLj8pL2ksXG4gIHdpZGU6IC9eKGJlZm9yZSBjaHJpc3R8YmVmb3JlIGNvbW1vbiBlcmF8YW5ubyBkb21pbml8Y29tbW9uIGVyYSkvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXmIvaSwgL14oYXxjKS9pXVxufTtcbnZhciBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15xWzEyMzRdL2ksXG4gIHdpZGU6IC9eWzEyMzRdKHRofHN0fG5kfHJkKT8gcXVhcnRlci9pXG59O1xudmFyIHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXVxufTtcbnZhciBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bamZtYXNvbmRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXihqYW58ZmVifG1hcnxhcHJ8bWF5fGp1bnxqdWx8YXVnfHNlcHxvY3R8bm92fGRlYykvaSxcbiAgd2lkZTogL14oamFudWFyeXxmZWJydWFyeXxtYXJjaHxhcHJpbHxtYXl8anVuZXxqdWx5fGF1Z3VzdHxzZXB0ZW1iZXJ8b2N0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcikvaVxufTtcbnZhciBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9eai9pLCAvXmYvaSwgL15tL2ksIC9eYS9pLCAvXm0vaSwgL15qL2ksIC9eai9pLCAvXmEvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldLFxuICBhbnk6IFsvXmphL2ksIC9eZi9pLCAvXm1hci9pLCAvXmFwL2ksIC9ebWF5L2ksIC9eanVuL2ksIC9eanVsL2ksIC9eYXUvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bc210d2ZdL2ksXG4gIHNob3J0OiAvXihzdXxtb3x0dXx3ZXx0aHxmcnxzYSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHN1bnxtb258dHVlfHdlZHx0aHV8ZnJpfHNhdCkvaSxcbiAgd2lkZTogL14oc3VuZGF5fG1vbmRheXx0dWVzZGF5fHdlZG5lc2RheXx0aHVyc2RheXxmcmlkYXl8c2F0dXJkYXkpL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15zL2ksIC9ebS9pLCAvXnQvaSwgL153L2ksIC9edC9pLCAvXmYvaSwgL15zL2ldLFxuICBhbnk6IFsvXnN1L2ksIC9ebS9pLCAvXnR1L2ksIC9edy9pLCAvXnRoL2ksIC9eZi9pLCAvXnNhL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXxwfG1pfG58KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pLFxuICBhbnk6IC9eKFthcF1cXC4/XFxzP21cXC4/fG1pZG5pZ2h0fG5vb258KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXmEvaSxcbiAgICBwbTogL15wL2ksXG4gICAgbWlkbmlnaHQ6IC9ebWkvaSxcbiAgICBub29uOiAvXm5vL2ksXG4gICAgbW9ybmluZzogL21vcm5pbmcvaSxcbiAgICBhZnRlcm5vb246IC9hZnRlcm5vb24vaSxcbiAgICBldmVuaW5nOiAvZXZlbmluZy9pLFxuICAgIG5pZ2h0OiAvbmlnaHQvaVxuICB9XG59O1xudmFyIG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9KSxcbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55JyxcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICdhbnknLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbWF0Y2g7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaFBhdHRlcm5GbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlydHlTdHJpbmcsIGRpcnR5T3B0aW9ucykge1xuICAgIHZhciBzdHJpbmcgPSBTdHJpbmcoZGlydHlTdHJpbmcpO1xuICAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLm1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLnBhcnNlUGF0dGVybik7XG5cbiAgICBpZiAoIXBhcnNlUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2socGFyc2VSZXN1bHRbMF0pIDogcGFyc2VSZXN1bHRbMF07XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2sgPyBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aClcbiAgICB9O1xuICB9O1xufSIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tICcuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSAnLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gJy4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyc7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSAnLi9fbGliL2xvY2FsaXplL2luZGV4LmpzJztcbmltcG9ydCBtYXRjaCBmcm9tICcuL19saWIvbWF0Y2gvaW5kZXguanMnO1xuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IEVuZ2xpc2ggbG9jYWxlIChVbml0ZWQgU3RhdGVzKS5cbiAqIEBsYW5ndWFnZSBFbmdsaXNoXG4gKiBAaXNvLTYzOS0yIGVuZ1xuICogQGF1dGhvciBTYXNoYSBLb3NzIFtAa29zc25vY29ycF17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2tvc3Nub2NvcnB9XG4gKiBAYXV0aG9yIExlc2hhIEtvc3MgW0BsZXNoYWtvc3Nde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9sZXNoYWtvc3N9XG4gKi9cblxudmFyIGxvY2FsZSA9IHtcbiAgY29kZTogJ2VuLVVTJyxcbiAgZm9ybWF0RGlzdGFuY2U6IGZvcm1hdERpc3RhbmNlLFxuICBmb3JtYXRMb25nOiBmb3JtYXRMb25nLFxuICBmb3JtYXRSZWxhdGl2ZTogZm9ybWF0UmVsYXRpdmUsXG4gIGxvY2FsaXplOiBsb2NhbGl6ZSxcbiAgbWF0Y2g6IG1hdGNoLFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAwXG4gICAgLyogU3VuZGF5ICovXG4gICAgLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogMVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsImltcG9ydCBidWlsZExvY2FsaXplRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMnO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0InLCAnQSddLFxuICBhYmJyZXZpYXRlZDogWydCQycsICdBRCddLFxuICB3aWRlOiBbJ0JlZm9yZSBDaHJpc3QnLCAnQW5ubyBEb21pbmknXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydRMScsICdRMicsICdRMycsICdRNCddLFxuICB3aWRlOiBbJzFzdCBxdWFydGVyJywgJzJuZCBxdWFydGVyJywgJzNyZCBxdWFydGVyJywgJzR0aCBxdWFydGVyJ10gLy8gTm90ZTogaW4gRW5nbGlzaCwgdGhlIG5hbWVzIG9mIGRheXMgb2YgdGhlIHdlZWsgYW5kIG1vbnRocyBhcmUgY2FwaXRhbGl6ZWQuXG4gIC8vIElmIHlvdSBhcmUgbWFraW5nIGEgbmV3IGxvY2FsZSBiYXNlZCBvbiB0aGlzIG9uZSwgY2hlY2sgaWYgdGhlIHNhbWUgaXMgdHJ1ZSBmb3IgdGhlIGxhbmd1YWdlIHlvdSdyZSB3b3JraW5nIG9uLlxuICAvLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbiAgLy8gZS5nLiBpbiBTcGFuaXNoIGxhbmd1YWdlIHRoZSB3ZWVrZGF5cyBhbmQgbW9udGhzIHNob3VsZCBiZSBpbiB0aGUgbG93ZXJjYXNlLlxuXG59O1xudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdBJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgd2lkZTogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnUycsICdNJywgJ1QnLCAnVycsICdUJywgJ0YnLCAnUyddLFxuICBzaG9ydDogWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICBhYmJyZXZpYXRlZDogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgd2lkZTogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfVxufTtcblxuZnVuY3Rpb24gb3JkaW5hbE51bWJlcihkaXJ0eU51bWJlciwgX2RpcnR5T3B0aW9ucykge1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTsgLy8gSWYgb3JkaW5hbCBudW1iZXJzIGRlcGVuZCBvbiBjb250ZXh0LCBmb3IgZXhhbXBsZSxcbiAgLy8gaWYgdGhleSBhcmUgZGlmZmVyZW50IGZvciBkaWZmZXJlbnQgZ3JhbW1hdGljYWwgZ2VuZGVycyxcbiAgLy8gdXNlIGBvcHRpb25zLnVuaXRgOlxuICAvL1xuICAvLyAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9XG4gIC8vICAgdmFyIHVuaXQgPSBTdHJpbmcob3B0aW9ucy51bml0KVxuICAvL1xuICAvLyB3aGVyZSBgdW5pdGAgY2FuIGJlICd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXRlJywgJ2RheU9mWWVhcicsXG4gIC8vICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJ1xuXG4gIHZhciByZW0xMDAgPSBudW1iZXIgJSAxMDA7XG5cbiAgaWYgKHJlbTEwMCA+IDIwIHx8IHJlbTEwMCA8IDEwKSB7XG4gICAgc3dpdGNoIChyZW0xMDAgJSAxMCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3N0JztcblxuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ25kJztcblxuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3JkJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVtYmVyICsgJ3RoJztcbn1cblxudmFyIGxvY2FsaXplID0ge1xuICBvcmRpbmFsTnVtYmVyOiBvcmRpbmFsTnVtYmVyLFxuICBlcmE6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBlcmFWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IGZ1bmN0aW9uIChxdWFydGVyKSB7XG4gICAgICByZXR1cm4gTnVtYmVyKHF1YXJ0ZXIpIC0gMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IG1vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXk6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBmb3JtYXR0aW5nVmFsdWVzOiBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRGb3JtYXR0aW5nV2lkdGg6ICd3aWRlJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsaXplOyIsImltcG9ydCB0b0ludGVnZXIgZnJvbSAnLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanMnO1xuaW1wb3J0IGFkZE1pbGxpc2Vjb25kcyBmcm9tICcuLi9hZGRNaWxsaXNlY29uZHMvaW5kZXguanMnO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tICcuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyc7XG4vKipcbiAqIEBuYW1lIHN1Yk1pbGxpc2Vjb25kc1xuICogQGNhdGVnb3J5IE1pbGxpc2Vjb25kIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIHN1YnRyYWN0ZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIHN1YnRyYWN0ZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU3VidHJhY3QgNzUwIG1pbGxpc2Vjb25kcyBmcm9tIDEwIEp1bHkgMjAxNCAxMjo0NTozMC4wMDA6XG4gKiB2YXIgcmVzdWx0ID0gc3ViTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MjkuMjUwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ViTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gYWRkTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgLWFtb3VudCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCA/ICctJyA6ICcnO1xuICB2YXIgb3V0cHV0ID0gTWF0aC5hYnMobnVtYmVyKS50b1N0cmluZygpO1xuXG4gIHdoaWxlIChvdXRwdXQubGVuZ3RoIDwgdGFyZ2V0TGVuZ3RoKSB7XG4gICAgb3V0cHV0ID0gJzAnICsgb3V0cHV0O1xuICB9XG5cbiAgcmV0dXJuIHNpZ24gKyBvdXRwdXQ7XG59IiwiaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tICcuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanMnO1xuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKi9cblxudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgLy8gRnJvbSBodHRwOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LTMxL3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0Zvcm1hdF90b2tlbnNcbiAgICAvLyB8IFllYXIgICAgIHwgICAgIHkgfCB5eSB8ICAgeXl5IHwgIHl5eXkgfCB5eXl5eSB8XG4gICAgLy8gfC0tLS0tLS0tLS18LS0tLS0tLXwtLS0tfC0tLS0tLS18LS0tLS0tLXwtLS0tLS0tfFxuICAgIC8vIHwgQUQgMSAgICAgfCAgICAgMSB8IDAxIHwgICAwMDEgfCAgMDAwMSB8IDAwMDAxIHxcbiAgICAvLyB8IEFEIDEyICAgIHwgICAgMTIgfCAxMiB8ICAgMDEyIHwgIDAwMTIgfCAwMDAxMiB8XG4gICAgLy8gfCBBRCAxMjMgICB8ICAgMTIzIHwgMjMgfCAgIDEyMyB8ICAwMTIzIHwgMDAxMjMgfFxuICAgIC8vIHwgQUQgMTIzNCAgfCAgMTIzNCB8IDM0IHwgIDEyMzQgfCAgMTIzNCB8IDAxMjM0IHxcbiAgICAvLyB8IEFEIDEyMzQ1IHwgMTIzNDUgfCA0NSB8IDEyMzQ1IHwgMTIzNDUgfCAxMjM0NSB8XG4gICAgdmFyIHNpZ25lZFllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7IC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG5cbiAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModG9rZW4gPT09ICd5eScgPyB5ZWFyICUgMTAwIDogeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgIHJldHVybiB0b2tlbiA9PT0gJ00nID8gU3RyaW5nKG1vbnRoICsgMSkgOiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHRoZSBtb250aFxuICBkOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDRGF0ZSgpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF0ZS5nZXRVVENIb3VycygpIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYSc6XG4gICAgICBjYXNlICdhYSc6XG4gICAgICBjYXNlICdhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZVswXTtcblxuICAgICAgY2FzZSAnYWFhYSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlID09PSAnYW0nID8gJ2EubS4nIDogJ3AubS4nO1xuICAgIH1cbiAgfSxcbiAgLy8gSG91ciBbMS0xMl1cbiAgaDogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMiB8fCAxMiwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ0hvdXJzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDTWludXRlcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBTZWNvbmRcbiAgczogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ1NlY29uZHMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRnJhY3Rpb24gb2Ygc2Vjb25kXG4gIFM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBudW1iZXJPZkRpZ2l0cyA9IHRva2VuLmxlbmd0aDtcbiAgICB2YXIgbWlsbGlzZWNvbmRzID0gZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgICB2YXIgZnJhY3Rpb25hbFNlY29uZHMgPSBNYXRoLmZsb29yKG1pbGxpc2Vjb25kcyAqIE1hdGgucG93KDEwLCBudW1iZXJPZkRpZ2l0cyAtIDMpKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGZyYWN0aW9uYWxTZWNvbmRzLCB0b2tlbi5sZW5ndGgpO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0dGVyczsiLCJpbXBvcnQgdG9EYXRlIGZyb20gJy4uLy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL3JlcXVpcmVkQXJncy9pbmRleC5qcyc7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2VlayhkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSAxO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgdmFyIGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uO1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSBkaWZmKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tICcuLi8uLi90b0RhdGUvaW5kZXguanMnO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gJy4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzJztcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzJzsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0VVRDRnVsbFllYXIoeWVhciArIDEsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhcik7XG4gIHZhciBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyKTtcblxuICBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59IiwiaW1wb3J0IGdldFVUQ0lTT1dlZWtZZWFyIGZyb20gJy4uL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzJztcbmltcG9ydCBzdGFydE9mVVRDSVNPV2VlayBmcm9tICcuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL3JlcXVpcmVkQXJncy9pbmRleC5qcyc7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgeWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSk7XG4gIHZhciBmb3VydGhPZkphbnVhcnkgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tICcuLi90b0ludGVnZXIvaW5kZXguanMnO1xuaW1wb3J0IHRvRGF0ZSBmcm9tICcuLi8uLi90b0RhdGUvaW5kZXguanMnO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tICcuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ1dlZWsoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGU7XG4gIHZhciBsb2NhbGVXZWVrU3RhcnRzT24gPSBsb2NhbGUgJiYgbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMud2Vla1N0YXJ0c09uO1xuICB2YXIgZGVmYXVsdFdlZWtTdGFydHNPbiA9IGxvY2FsZVdlZWtTdGFydHNPbiA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihsb2NhbGVXZWVrU3RhcnRzT24pO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gb3B0aW9ucy53ZWVrU3RhcnRzT24gPT0gbnVsbCA/IGRlZmF1bHRXZWVrU3RhcnRzT24gOiB0b0ludGVnZXIob3B0aW9ucy53ZWVrU3RhcnRzT24pOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKHdlZWtTdGFydHNPbiA+PSAwICYmIHdlZWtTdGFydHNPbiA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gJy4uL3RvSW50ZWdlci9pbmRleC5qcyc7XG5pbXBvcnQgdG9EYXRlIGZyb20gJy4uLy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSAnLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanMnO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tICcuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDV2Vla1llYXIoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSwgZGlydHlPcHRpb25zKTtcbiAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGU7XG4gIHZhciBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGUgJiYgbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlO1xuICB2YXIgZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gMSA6IHRvSW50ZWdlcihsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgOiB0b0ludGVnZXIob3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDEgYW5kIDcgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciBmaXJzdFdlZWtPZk5leHRZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDRnVsbFllYXIoeWVhciArIDEsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWtPZk5leHRZZWFyLCBkaXJ0eU9wdGlvbnMpO1xuICB2YXIgZmlyc3RXZWVrT2ZUaGlzWWVhciA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWtPZlRoaXNZZWFyLCBkaXJ0eU9wdGlvbnMpO1xuXG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gJy4uL3RvSW50ZWdlci9pbmRleC5qcyc7XG5pbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSAnLi4vZ2V0VVRDV2Vla1llYXIvaW5kZXguanMnO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gJy4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzJztcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzJzsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrWWVhcihkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZSAmJiBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU7XG4gIHZhciBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyAxIDogdG9JbnRlZ2VyKGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA6IHRvSW50ZWdlcihvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciB5ZWFyID0gZ2V0VVRDV2Vla1llYXIoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpO1xuICB2YXIgZmlyc3RXZWVrID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vlay5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWsuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrLCBkaXJ0eU9wdGlvbnMpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgbGlnaHRGb3JtYXR0ZXJzIGZyb20gJy4uL2xpZ2h0Rm9ybWF0dGVycy9pbmRleC5qcyc7XG5pbXBvcnQgZ2V0VVRDRGF5T2ZZZWFyIGZyb20gJy4uLy4uLy4uL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzJztcbmltcG9ydCBnZXRVVENJU09XZWVrIGZyb20gJy4uLy4uLy4uL19saWIvZ2V0VVRDSVNPV2Vlay9pbmRleC5qcyc7XG5pbXBvcnQgZ2V0VVRDSVNPV2Vla1llYXIgZnJvbSAnLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qcyc7XG5pbXBvcnQgZ2V0VVRDV2VlayBmcm9tICcuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWsvaW5kZXguanMnO1xuaW1wb3J0IGdldFVUQ1dlZWtZZWFyIGZyb20gJy4uLy4uLy4uL19saWIvZ2V0VVRDV2Vla1llYXIvaW5kZXguanMnO1xuaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tICcuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanMnO1xudmFyIGRheVBlcmlvZEVudW0gPSB7XG4gIGFtOiAnYW0nLFxuICBwbTogJ3BtJyxcbiAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gIG5vb246ICdub29uJyxcbiAgbW9ybmluZzogJ21vcm5pbmcnLFxuICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICBldmVuaW5nOiAnZXZlbmluZycsXG4gIG5pZ2h0OiAnbmlnaHQnXG4gIC8qXG4gICAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICAgKiB8ICBhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBBKiB8IE1pbGxpc2Vjb25kcyBpbiBkYXkgICAgICAgICAgICB8XG4gICAqIHwgIGIgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgIHwgIEIgIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgIHxcbiAgICogfCAgYyAgfCBTdGFuZC1hbG9uZSBsb2NhbCBkYXkgb2Ygd2VlayAgfCAgQyogfCBMb2NhbGl6ZWQgaG91ciB3LyBkYXkgcGVyaW9kICAgfFxuICAgKiB8ICBkICB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICB8ICBEICB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gICAqIHwgIGUgIHwgTG9jYWwgZGF5IG9mIHdlZWsgICAgICAgICAgICAgIHwgIEUgIHwgRGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgICAgIHxcbiAgICogfCAgZiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgRiogfCBEYXkgb2Ygd2VlayBpbiBtb250aCAgICAgICAgICAgfFxuICAgKiB8ICBnKiB8IE1vZGlmaWVkIEp1bGlhbiBkYXkgICAgICAgICAgICB8ICBHICB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAgICogfCAgaSEgfCBJU08gZGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgfCAgSSEgfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgfFxuICAgKiB8ICBqKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8ICBKKiB8IExvY2FsaXplZCBob3VyIHcvbyBkYXkgcGVyaW9kICB8XG4gICAqIHwgIGsgIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgIHwgIEsgIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgIHxcbiAgICogfCAgbCogfCAoZGVwcmVjYXRlZCkgICAgICAgICAgICAgICAgICAgfCAgTCAgfCBTdGFuZC1hbG9uZSBtb250aCAgICAgICAgICAgICAgfFxuICAgKiB8ICBtICB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBNICB8IE1vbnRoICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAqIHwgIG4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICogfCAgbyEgfCBPcmRpbmFsIG51bWJlciBtb2RpZmllciAgICAgICAgfCAgTyAgfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgfFxuICAgKiB8ICBwISB8IExvbmcgbG9jYWxpemVkIHRpbWUgICAgICAgICAgICB8ICBQISB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICB8XG4gICAqIHwgIHEgIHwgU3RhbmQtYWxvbmUgcXVhcnRlciAgICAgICAgICAgIHwgIFEgIHwgUXVhcnRlciAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICogfCAgciogfCBSZWxhdGVkIEdyZWdvcmlhbiB5ZWFyICAgICAgICAgfCAgUiEgfCBJU08gd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICAgfFxuICAgKiB8ICBzICB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICB8ICBTICB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICB8XG4gICAqIHwgIHQhIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgIHwgIFQhIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgIHxcbiAgICogfCAgdSAgfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgfCAgVSogfCBDeWNsaWMgeWVhciAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8ICB2KiB8IFRpbWV6b25lIChnZW5lcmljIG5vbi1sb2NhdC4pICB8ICBWKiB8IFRpbWV6b25lIChsb2NhdGlvbikgICAgICAgICAgICB8XG4gICAqIHwgIHcgIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgIHwgIFcqIHwgV2VlayBvZiBtb250aCAgICAgICAgICAgICAgICAgIHxcbiAgICogfCAgeCAgfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgfCAgWCAgfCBUaW1lem9uZSAoSVNPLTg2MDEpICAgICAgICAgICAgfFxuICAgKiB8ICB5ICB8IFllYXIgKGFicykgICAgICAgICAgICAgICAgICAgICB8ICBZICB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICB8XG4gICAqIHwgIHogIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pIHwgIFoqIHwgVGltZXpvbmUgKGFsaWFzZXMpICAgICAgICAgICAgIHxcbiAgICpcbiAgICogTGV0dGVycyBtYXJrZWQgYnkgKiBhcmUgbm90IGltcGxlbWVudGVkIGJ1dCByZXNlcnZlZCBieSBVbmljb2RlIHN0YW5kYXJkLlxuICAgKlxuICAgKiBMZXR0ZXJzIG1hcmtlZCBieSAhIGFyZSBub24tc3RhbmRhcmQsIGJ1dCBpbXBsZW1lbnRlZCBieSBkYXRlLWZuczpcbiAgICogLSBgb2AgbW9kaWZpZXMgdGhlIHByZXZpb3VzIHRva2VuIHRvIHR1cm4gaXQgaW50byBhbiBvcmRpbmFsIChzZWUgYGZvcm1hdGAgZG9jcylcbiAgICogLSBgaWAgaXMgSVNPIGRheSBvZiB3ZWVrLiBGb3IgYGlgIGFuZCBgaWlgIGlzIHJldHVybnMgbnVtZXJpYyBJU08gd2VlayBkYXlzLFxuICAgKiAgIGkuZS4gNyBmb3IgU3VuZGF5LCAxIGZvciBNb25kYXksIGV0Yy5cbiAgICogLSBgSWAgaXMgSVNPIHdlZWsgb2YgeWVhciwgYXMgb3Bwb3NlZCB0byBgd2Agd2hpY2ggaXMgbG9jYWwgd2VlayBvZiB5ZWFyLlxuICAgKiAtIGBSYCBpcyBJU08gd2Vlay1udW1iZXJpbmcgeWVhciwgYXMgb3Bwb3NlZCB0byBgWWAgd2hpY2ggaXMgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhci5cbiAgICogICBgUmAgaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGBJYCBhbmQgYGlgXG4gICAqICAgZm9yIHVuaXZlcnNhbCBJU08gd2Vlay1udW1iZXJpbmcgZGF0ZSwgd2hlcmVhc1xuICAgKiAgIGBZYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHdgIGFuZCBgZWBcbiAgICogICBmb3Igd2Vlay1udW1iZXJpbmcgZGF0ZSBzcGVjaWZpYyB0byB0aGUgbG9jYWxlLlxuICAgKiAtIGBQYCBpcyBsb25nIGxvY2FsaXplZCBkYXRlIGZvcm1hdFxuICAgKiAtIGBwYCBpcyBsb25nIGxvY2FsaXplZCB0aW1lIGZvcm1hdFxuICAgKi9cblxufTtcbnZhciBmb3JtYXR0ZXJzID0ge1xuICAvLyBFcmFcbiAgRzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBlcmEgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgPiAwID8gMSA6IDA7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBBRCwgQkNcbiAgICAgIGNhc2UgJ0cnOlxuICAgICAgY2FzZSAnR0cnOlxuICAgICAgY2FzZSAnR0dHJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEEsIEJcblxuICAgICAgY2FzZSAnR0dHR0cnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93J1xuICAgICAgICB9KTtcbiAgICAgIC8vIEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0XG5cbiAgICAgIGNhc2UgJ0dHR0cnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgLy8gT3JkaW5hbCBudW1iZXJcbiAgICBpZiAodG9rZW4gPT09ICd5bycpIHtcbiAgICAgIHZhciBzaWduZWRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoeWVhciwge1xuICAgICAgICB1bml0OiAneWVhcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMueShkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgWTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBzaWduZWRXZWVrWWVhciA9IGdldFVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgdmFyIHdlZWtZZWFyID0gc2lnbmVkV2Vla1llYXIgPiAwID8gc2lnbmVkV2Vla1llYXIgOiAxIC0gc2lnbmVkV2Vla1llYXI7IC8vIFR3byBkaWdpdCB5ZWFyXG5cbiAgICBpZiAodG9rZW4gPT09ICdZWScpIHtcbiAgICAgIHZhciB0d29EaWdpdFllYXIgPSB3ZWVrWWVhciAlIDEwMDtcbiAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModHdvRGlnaXRZZWFyLCAyKTtcbiAgICB9IC8vIE9yZGluYWwgbnVtYmVyXG5cblxuICAgIGlmICh0b2tlbiA9PT0gJ1lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vla1llYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9IC8vIFBhZGRpbmdcblxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh3ZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgUjogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIGlzb1dlZWtZZWFyID0gZ2V0VVRDSVNPV2Vla1llYXIoZGF0ZSk7IC8vIFBhZGRpbmdcblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvV2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEV4dGVuZGVkIHllYXIuIFRoaXMgaXMgYSBzaW5nbGUgbnVtYmVyIGRlc2lnbmF0aW5nIHRoZSB5ZWFyIG9mIHRoaXMgY2FsZW5kYXIgc3lzdGVtLlxuICAvLyBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgbG9jYWxpemVycyBhcmUgQi5DLiB5ZWFyczpcbiAgLy8gfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAgLy8gfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAgLy8gfCBBQyAxIHwgICAxIHwgICAxIHxcbiAgLy8gfCBCQyAxIHwgICAxIHwgICAwIHxcbiAgLy8gfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAgLy8gQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICAvLyB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQuXG4gIHU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gUXVhcnRlclxuICBROiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdRJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG5cbiAgICAgIGNhc2UgJ1FRJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuXG4gICAgICBjYXNlICdRbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuXG4gICAgICBjYXNlICdRUVEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG5cbiAgICAgIGNhc2UgJ1FRUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuXG4gICAgICBjYXNlICdRUVFRJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIHF1YXJ0ZXJcbiAgcTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSAvIDMpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAncSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuXG4gICAgICBjYXNlICdxcSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcblxuICAgICAgY2FzZSAncW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7XG4gICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcblxuICAgICAgY2FzZSAncXFxJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuXG4gICAgICBjYXNlICdxcXFxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cblxuICAgICAgY2FzZSAncXFxcSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnTSc6XG4gICAgICBjYXNlICdNTSc6XG4gICAgICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuTShkYXRlLCB0b2tlbik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG5cbiAgICAgIGNhc2UgJ01vJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobW9udGggKyAxLCB7XG4gICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuXG4gICAgICBjYXNlICdNTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBKLCBGLCAuLi4sIERcblxuICAgICAgY2FzZSAnTU1NTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcblxuICAgICAgY2FzZSAnTU1NTSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIG1vbnRoXG4gIEw6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAuLi4sIDEyXG4gICAgICBjYXNlICdMJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhtb250aCArIDEpO1xuICAgICAgLy8gMDEsIDAyLCAuLi4sIDEyXG5cbiAgICAgIGNhc2UgJ0xMJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuXG4gICAgICBjYXNlICdMbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcblxuICAgICAgY2FzZSAnTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG5cbiAgICAgIGNhc2UgJ0xMTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG5cbiAgICAgIGNhc2UgJ0xMTEwnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBMb2NhbCB3ZWVrIG9mIHllYXJcbiAgdzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciB3ZWVrID0gZ2V0VVRDV2VlayhkYXRlLCBvcHRpb25zKTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ3dvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWsgb2YgeWVhclxuICBJOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGlzb1dlZWsgPSBnZXRVVENJU09XZWVrKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSAnSW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29XZWVrLCB7XG4gICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdkbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDRGF0ZSgpLCB7XG4gICAgICAgIHVuaXQ6ICdkYXRlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5kKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHllYXJcbiAgRDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZlllYXIgPSBnZXRVVENEYXlPZlllYXIoZGF0ZSk7XG5cbiAgICBpZiAodG9rZW4gPT09ICdEbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRheU9mWWVhciwge1xuICAgICAgICB1bml0OiAnZGF5T2ZZZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXlPZlllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIERheSBvZiB3ZWVrXG4gIEU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFR1ZVxuICAgICAgY2FzZSAnRSc6XG4gICAgICBjYXNlICdFRSc6XG4gICAgICBjYXNlICdFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdFRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnRUVFRSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgZGF5IG9mIHdlZWtcbiAgZTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChOdGggZGF5IG9mIHdlZWsgd2l0aCBjdXJyZW50IGxvY2FsZSBvciB3ZWVrU3RhcnRzT24pXG4gICAgICBjYXNlICdlJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG5cbiAgICAgIGNhc2UgJ2VlJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcblxuICAgICAgY2FzZSAnZW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihsb2NhbERheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdlZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnZWVlZSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWtcbiAgYzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChzYW1lIGFzIGluIGBlYClcbiAgICAgIGNhc2UgJ2MnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcblxuICAgICAgY2FzZSAnY2MnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGxvY2FsRGF5T2ZXZWVrLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG5cbiAgICAgIGNhc2UgJ2NvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnY2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2NjY2MnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIElTTyBkYXkgb2Ygd2Vla1xuICBpOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGlzb0RheU9mV2VlayA9IGRheU9mV2VlayA9PT0gMCA/IDcgOiBkYXlPZldlZWs7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAyXG4gICAgICBjYXNlICdpJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhpc29EYXlPZldlZWspO1xuICAgICAgLy8gMDJcblxuICAgICAgY2FzZSAnaWknOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb0RheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDJuZFxuXG4gICAgICBjYXNlICdpbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb0RheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlXG5cbiAgICAgIGNhc2UgJ2lpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2lpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdpaWlpJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgY2FzZSAnYWEnOlxuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdhYWFhJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSwgUE0sIG1pZG5pZ2h0LCBub29uXG4gIGI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgIGlmIChob3VycyA9PT0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID09PSAwKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1pZG5pZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdiJzpcbiAgICAgIGNhc2UgJ2JiJzpcbiAgICAgIGNhc2UgJ2JiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdiYmJiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYmJiYic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gaW4gdGhlIG1vcm5pbmcsIGluIHRoZSBhZnRlcm5vb24sIGluIHRoZSBldmVuaW5nLCBhdCBuaWdodFxuICBCOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWU7XG5cbiAgICBpZiAoaG91cnMgPj0gMTcpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uZXZlbmluZztcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmFmdGVybm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDQpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubW9ybmluZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5uaWdodDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdCJzpcbiAgICAgIGNhc2UgJ0JCJzpcbiAgICAgIGNhc2UgJ0JCQic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdCQkJCQic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnQkJCQic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gSG91ciBbMS0xMl1cbiAgaDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ2hvJykge1xuICAgICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG4gICAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMTI7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuaChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdIbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDSG91cnMoKSwge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuSChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMTFdXG4gIEs6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMjtcblxuICAgIGlmICh0b2tlbiA9PT0gJ0tvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGhvdXJzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBIb3VyIFsxLTI0XVxuICBrOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIGlmIChob3VycyA9PT0gMCkgaG91cnMgPSAyNDtcblxuICAgIGlmICh0b2tlbiA9PT0gJ2tvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGhvdXJzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ21vJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENNaW51dGVzKCksIHtcbiAgICAgICAgdW5pdDogJ21pbnV0ZSdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMubShkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIFNlY29uZFxuICBzOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnc28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ1NlY29uZHMoKSwge1xuICAgICAgICB1bml0OiAnc2Vjb25kJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5zKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gRnJhY3Rpb24gb2Ygc2Vjb25kXG4gIFM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuUyhkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gSWYgb2Zmc2V0IGlzIDAsIG91dHB1dCBpcyBhbHdheXMgYCdaJ2ApXG4gIFg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgaWYgKHRpbWV6b25lT2Zmc2V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gJ1onO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICdYJzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWGBcblxuICAgICAgY2FzZSAnWFhYWCc6XG4gICAgICBjYXNlICdYWCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhYYFxuXG4gICAgICBjYXNlICdYWFhYWCc6XG4gICAgICBjYXNlICdYWFgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGAnKzAwOjAwJ2Agb3IgZXF1aXZhbGVudClcbiAgeDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBIb3VycyBhbmQgb3B0aW9uYWwgbWludXRlc1xuICAgICAgY2FzZSAneCc6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXModGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgeHhgXG5cbiAgICAgIGNhc2UgJ3h4eHgnOlxuICAgICAgY2FzZSAneHgnOlxuICAgICAgICAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4eGBcblxuICAgICAgY2FzZSAneHh4eHgnOlxuICAgICAgY2FzZSAneHh4JzogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aCBgOmAgZGVsaW1pdGVyXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChHTVQpXG4gIE86IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gU2hvcnRcbiAgICAgIGNhc2UgJ08nOlxuICAgICAgY2FzZSAnT08nOlxuICAgICAgY2FzZSAnT09PJzpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmVTaG9ydCh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICAgIC8vIExvbmdcblxuICAgICAgY2FzZSAnT09PTyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXRpb24pXG4gIHo6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gU2hvcnRcbiAgICAgIGNhc2UgJ3onOlxuICAgICAgY2FzZSAnenonOlxuICAgICAgY2FzZSAnenp6JzpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmVTaG9ydCh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICAgIC8vIExvbmdcblxuICAgICAgY2FzZSAnenp6eic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFNlY29uZHMgdGltZXN0YW1wXG4gIHQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCkgLyAxMDAwKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICBUOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXN0YW1wID0gb3JpZ2luYWxEYXRlLmdldFRpbWUoKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVTaG9ydChvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9IE1hdGguZmxvb3IoYWJzT2Zmc2V0IC8gNjApO1xuICB2YXIgbWludXRlcyA9IGFic09mZnNldCAlIDYwO1xuXG4gIGlmIChtaW51dGVzID09PSAwKSB7XG4gICAgcmV0dXJuIHNpZ24gKyBTdHJpbmcoaG91cnMpO1xuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICByZXR1cm4gc2lnbiArIFN0cmluZyhob3VycykgKyBkZWxpbWl0ZXIgKyBhZGRMZWFkaW5nWmVyb3MobWludXRlcywgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyhvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIGlmIChvZmZzZXQgJSA2MCA9PT0gMCkge1xuICAgIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgICByZXR1cm4gc2lnbiArIGFkZExlYWRpbmdaZXJvcyhNYXRoLmFicyhvZmZzZXQpIC8gNjAsIDIpO1xuICB9XG5cbiAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIHZhciBkZWxpbWl0ZXIgPSBkaXJ0eURlbGltaXRlciB8fCAnJztcbiAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICB2YXIgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgdmFyIGhvdXJzID0gYWRkTGVhZGluZ1plcm9zKE1hdGguZmxvb3IoYWJzT2Zmc2V0IC8gNjApLCAyKTtcbiAgdmFyIG1pbnV0ZXMgPSBhZGRMZWFkaW5nWmVyb3MoYWJzT2Zmc2V0ICUgNjAsIDIpO1xuICByZXR1cm4gc2lnbiArIGhvdXJzICsgZGVsaW1pdGVyICsgbWludXRlcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0dGVyczsiLCJpbXBvcnQgdG9EYXRlIGZyb20gJy4uLy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSAnLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanMnO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrWWVhciBmcm9tICcuLi9zdGFydE9mVVRDV2Vla1llYXIvaW5kZXguanMnO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tICcuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnO1xudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDV2VlayhkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkaWZmID0gc3RhcnRPZlVUQ1dlZWsoZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpIC0gc3RhcnRPZlVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpLmdldFRpbWUoKTsgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcblxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gJy4uLy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSAnLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanMnO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrWWVhciBmcm9tICcuLi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanMnO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tICcuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnO1xudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2VlayhkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkaWZmID0gc3RhcnRPZlVUQ0lTT1dlZWsoZGF0ZSkuZ2V0VGltZSgpIC0gc3RhcnRPZlVUQ0lTT1dlZWtZZWFyKGRhdGUpLmdldFRpbWUoKTsgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcblxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gJy4uLy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL3JlcXVpcmVkQXJncy9pbmRleC5qcyc7XG52YXIgTUlMTElTRUNPTkRTX0lOX0RBWSA9IDg2NDAwMDAwOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDRGF5T2ZZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlllYXJUaW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgdmFyIGRpZmZlcmVuY2UgPSB0aW1lc3RhbXAgLSBzdGFydE9mWWVhclRpbWVzdGFtcDtcbiAgcmV0dXJuIE1hdGguZmxvb3IoZGlmZmVyZW5jZSAvIE1JTExJU0VDT05EU19JTl9EQVkpICsgMTtcbn0iLCJmdW5jdGlvbiBkYXRlTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgJ1AnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ1BQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ1BQUFAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdwcCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwcCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdwcHBwJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRhdGVUaW1lTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHZhciBtYXRjaFJlc3VsdCA9IHBhdHRlcm4ubWF0Y2goLyhQKykocCspPy8pO1xuICB2YXIgZGF0ZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsxXTtcbiAgdmFyIHRpbWVQYXR0ZXJuID0gbWF0Y2hSZXN1bHRbMl07XG5cbiAgaWYgKCF0aW1lUGF0dGVybikge1xuICAgIHJldHVybiBkYXRlTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKTtcbiAgfVxuXG4gIHZhciBkYXRlVGltZUZvcm1hdDtcblxuICBzd2l0Y2ggKGRhdGVQYXR0ZXJuKSB7XG4gICAgY2FzZSAnUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1BQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1BQUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFBQUCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gZGF0ZVRpbWVGb3JtYXQucmVwbGFjZSgne3tkYXRlfX0nLCBkYXRlTG9uZ0Zvcm1hdHRlcihkYXRlUGF0dGVybiwgZm9ybWF0TG9uZykpLnJlcGxhY2UoJ3t7dGltZX19JywgdGltZUxvbmdGb3JtYXR0ZXIodGltZVBhdHRlcm4sIGZvcm1hdExvbmcpKTtcbn1cblxudmFyIGxvbmdGb3JtYXR0ZXJzID0ge1xuICBwOiB0aW1lTG9uZ0Zvcm1hdHRlcixcbiAgUDogZGF0ZVRpbWVMb25nRm9ybWF0dGVyXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9uZ0Zvcm1hdHRlcnM7IiwidmFyIHByb3RlY3RlZERheU9mWWVhclRva2VucyA9IFsnRCcsICdERCddO1xudmFyIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zID0gWydZWScsICdZWVlZJ107XG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4odG9rZW4pIHtcbiAgcmV0dXJuIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0aHJvd1Byb3RlY3RlZEVycm9yKHRva2VuLCBmb3JtYXQsIGlucHV0KSB7XG4gIGlmICh0b2tlbiA9PT0gJ1lZWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdZWScpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgeXlgIGluc3RlYWQgb2YgYFlZYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnRCcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0REJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH1cbn0iLCJpbXBvcnQgaXNWYWxpZCBmcm9tICcuLi9pc1ZhbGlkL2luZGV4LmpzJztcbmltcG9ydCBkZWZhdWx0TG9jYWxlIGZyb20gJy4uL2xvY2FsZS9lbi1VUy9pbmRleC5qcyc7XG5pbXBvcnQgc3ViTWlsbGlzZWNvbmRzIGZyb20gJy4uL3N1Yk1pbGxpc2Vjb25kcy9pbmRleC5qcyc7XG5pbXBvcnQgdG9EYXRlIGZyb20gJy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybWF0dGVycyBmcm9tICcuLi9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzJztcbmltcG9ydCBsb25nRm9ybWF0dGVycyBmcm9tICcuLi9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy9pbmRleC5qcyc7XG5pbXBvcnQgZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyBmcm9tICcuLi9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanMnO1xuaW1wb3J0IHsgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbiwgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuLCB0aHJvd1Byb3RlY3RlZEVycm9yIH0gZnJvbSAnLi4vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanMnO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tICcuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJzsgLy8gVGhpcyBSZWdFeHAgY29uc2lzdHMgb2YgdGhyZWUgcGFydHMgc2VwYXJhdGVkIGJ5IGB8YDpcbi8vIC0gW3lZUXFNTHdJZERlY2loSEtrbXNdbyBtYXRjaGVzIGFueSBhdmFpbGFibGUgb3JkaW5hbCBudW1iZXIgdG9rZW5cbi8vICAgKG9uZSBvZiB0aGUgY2VydGFpbiBsZXR0ZXJzIGZvbGxvd2VkIGJ5IGBvYClcbi8vIC0gKFxcdylcXDEqIG1hdGNoZXMgYW55IHNlcXVlbmNlcyBvZiB0aGUgc2FtZSBsZXR0ZXJcbi8vIC0gJycgbWF0Y2hlcyB0d28gcXVvdGUgY2hhcmFjdGVycyBpbiBhIHJvd1xuLy8gLSAnKCcnfFteJ10pKygnfCQpIG1hdGNoZXMgYW55dGhpbmcgc3Vycm91bmRlZCBieSB0d28gcXVvdGUgY2hhcmFjdGVycyAoJyksXG4vLyAgIGV4Y2VwdCBhIHNpbmdsZSBxdW90ZSBzeW1ib2wsIHdoaWNoIGVuZHMgdGhlIHNlcXVlbmNlLlxuLy8gICBUd28gcXVvdGUgY2hhcmFjdGVycyBkbyBub3QgZW5kIHRoZSBzZXF1ZW5jZS5cbi8vICAgSWYgdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc2luZ2xlIHF1b3RlXG4vLyAgIHRoZW4gdGhlIHNlcXVlbmNlIHdpbGwgY29udGludWUgdW50aWwgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLlxuLy8gLSAuIG1hdGNoZXMgYW55IHNpbmdsZSBjaGFyYWN0ZXIgdW5tYXRjaGVkIGJ5IHByZXZpb3VzIHBhcnRzIG9mIHRoZSBSZWdFeHBzXG5cbnZhciBmb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1t5WVFxTUx3SWREZWNpaEhLa21zXW98KFxcdylcXDEqfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nOyAvLyBUaGlzIFJlZ0V4cCBjYXRjaGVzIHN5bWJvbHMgZXNjYXBlZCBieSBxdW90ZXMsIGFuZCBhbHNvXG4vLyBzZXF1ZW5jZXMgb2Ygc3ltYm9scyBQLCBwLCBhbmQgdGhlIGNvbWJpbmF0aW9ucyBsaWtlIGBQUFBQUFBQcHBwcHBgXG5cbnZhciBsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9QK3ArfFArfHArfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nO1xudmFyIGVzY2FwZWRTdHJpbmdSZWdFeHAgPSAvXicoW15dKj8pJz8kLztcbnZhciBkb3VibGVRdW90ZVJlZ0V4cCA9IC8nJy9nO1xudmFyIHVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwID0gL1thLXpBLVpdLztcbi8qKlxuICogQG5hbWUgZm9ybWF0XG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEZvcm1hdCB0aGUgZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nIGluIHRoZSBnaXZlbiBmb3JtYXQuIFRoZSByZXN1bHQgbWF5IHZhcnkgYnkgbG9jYWxlLlxuICpcbiAqID4g4pqg77iPIFBsZWFzZSBub3RlIHRoYXQgdGhlIGBmb3JtYXRgIHRva2VucyBkaWZmZXIgZnJvbSBNb21lbnQuanMgYW5kIG90aGVyIGxpYnJhcmllcy5cbiAqID4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqIFRoZSBjaGFyYWN0ZXJzIHdyYXBwZWQgYmV0d2VlbiB0d28gc2luZ2xlIHF1b3RlcyBjaGFyYWN0ZXJzICgnKSBhcmUgZXNjYXBlZC5cbiAqIFR3byBzaW5nbGUgcXVvdGVzIGluIGEgcm93LCB3aGV0aGVyIGluc2lkZSBvciBvdXRzaWRlIGEgcXVvdGVkIHNlcXVlbmNlLCByZXByZXNlbnQgYSAncmVhbCcgc2luZ2xlIHF1b3RlLlxuICogKHNlZSB0aGUgbGFzdCBleGFtcGxlKVxuICpcbiAqIEZvcm1hdCBvZiB0aGUgc3RyaW5nIGlzIGJhc2VkIG9uIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGVcbiAqIHdpdGggYSBmZXcgYWRkaXRpb25zIChzZWUgbm90ZSA3IGJlbG93IHRoZSB0YWJsZSkuXG4gKlxuICogQWNjZXB0ZWQgcGF0dGVybnM6XG4gKiB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQYXR0ZXJuIHwgUmVzdWx0IGV4YW1wbGVzICAgICAgICAgICAgICAgICAgIHwgTm90ZXMgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLXxcbiAqIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEcuLkdHRyAgfCBBRCwgQkMgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHICAgIHwgQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3QgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHR0cgICB8IEEsIEIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQ2FsZW5kYXIgeWVhciAgICAgICAgICAgICAgICAgICB8IHkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5byAgICAgIHwgNDR0aCwgMXN0LCAwdGgsIDE3dGggICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5ICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eXkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICB8IFkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZbyAgICAgIHwgNDR0aCwgMXN0LCAxOTAwdGgsIDIwMTd0aCAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWVkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgICB8IFIgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUiAgICAgIHwgLTQzLCAwMCwgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSICAgICB8IC0wNDMsIDAwMCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlIgICAgfCAtMDA0MywgMDAwMCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSUiAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1LDcgfFxuICogfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgIHwgdSAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1ICAgICAgfCAtNDMsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXUgICAgIHwgLTA0MywgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dSAgICB8IC0wMDQzLCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXV1ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IFF1YXJ0ZXIgKGZvcm1hdHRpbmcpICAgICAgICAgICAgfCBRICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVFRICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IFF1YXJ0ZXIgKHN0YW5kLWFsb25lKSAgICAgICAgICAgfCBxICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXFxICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IE1vbnRoIChmb3JtYXR0aW5nKSAgICAgICAgICAgICAgfCBNICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU0gICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTSAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU1NICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1vbnRoIChzdGFuZC1hbG9uZSkgICAgICAgICAgICAgfCBMICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTEwgICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTCAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTExMICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgfCB3ICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHd3ICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICAgfCBJICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElJICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICAgfCBkICAgICAgIHwgMSwgMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDMxc3QgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRkICAgICAgfCAwMSwgMDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICAgfCBEICAgICAgIHwgMSwgMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDM2NXRoLCAzNjZ0aCAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREICAgICAgfCAwMSwgMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREQgICAgIHwgMDAxLCAwMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRERERCAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgRGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgICAgICB8IEUuLkVFRSAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFRSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFN1LCBTYSAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgfCBpICAgICAgIHwgMSwgMiwgMywgLi4uLCA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDd0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpICAgICAgfCAwMSwgMDIsIC4uLiwgMDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWkgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaWkgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTdSwgU2EgICAgICAgIHwgNyAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgIHwgZSAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZSAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWVlICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU3UsIFNhICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKHN0YW5kLWFsb25lKSB8IGMgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2MgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjYyAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2MgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjYyAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFN1LCBTYSAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhLi5hYWEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYSAgICB8IGEubS4sIHAubS4gICAgICAgICAgICAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWFhICAgfCBhLCBwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgfCBiLi5iYmIgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYiAgICB8IGEubS4sIHAubS4sIG5vb24sIG1pZG5pZ2h0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmJiICAgfCBhLCBwLCBuLCBtaSAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICAgfCBCLi5CQkIgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQiAgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkJCICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICAgfCBoICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDEydGggICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhoICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICAgfCBIICAgICAgIHwgMCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSG8gICAgICB8IDB0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhIICAgICAgfCAwMCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICAgfCBLICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMCAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDB0aCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtLICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICAgfCBrICAgICAgIHwgMjQsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga28gICAgICB8IDI0dGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtrICAgICAgfCAyNCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW8gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1tICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc28gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNzICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICAgfCBTICAgICAgIHwgMCwgMSwgLi4uLCA5ICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1MgICAgICB8IDAwLCAwMSwgLi4uLCA5OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTUyAgICAgfCAwMDAsIDAwMDEsIC4uLiwgOTk5ICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1NTICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy8gWikgICAgICAgIHwgWCAgICAgICB8IC0wOCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYICAgICAgfCAtMDgwMCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFggICAgIHwgLTA4OjAwLCArMDU6MzAsIFogICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWCAgICB8IC0wODAwLCArMDUzMCwgWiwgKzEyMzQ1NiAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFhYICAgfCAtMDg6MDAsICswNTozMCwgWiwgKzEyOjM0OjU2ICAgICAgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICAgfCB4ICAgICAgIHwgLTA4LCArMDUzMCwgKzAwICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHggICAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eCAgICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4ICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCwgKzEyMzQ1NiAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eHggICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAsICsxMjozNDo1NiB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgICB8IE8uLi5PT08gfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBPT09PICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiAgICAgfFxuICogfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgIHwgei4uLnp6eiB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8IDYgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHp6enogICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyLDYgICB8XG4gKiB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICAgfCB0ICAgICAgIHwgNTEyOTY5NTIwICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdHQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICB8IFQgICAgICAgfCA1MTI5Njk1MjA5MDAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBUVCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgIHwgUCAgICAgICB8IDA1LzI5LzE0NTMgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQICAgICAgfCBNYXkgMjksIDE0NTMgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFAgICAgIHwgTWF5IDI5dGgsIDE0NTMgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUCAgICB8IFN1bmRheSwgTWF5IDI5dGgsIDE0NTMgICAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgICB8IHAgICAgICAgfCAxMjowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcCAgICAgIHwgMTI6MDA6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwICAgICB8IDEyOjAwOjAwIEFNIEdNVCsyICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcHAgICAgfCAxMjowMDowMCBBTSBHTVQrMDI6MDAgICAgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IENvbWJpbmF0aW9uIG9mIGRhdGUgYW5kIHRpbWUgICAgfCBQcCAgICAgIHwgMDUvMjkvMTQ1MywgMTI6MDAgQU0gICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBwcCAgICB8IE1heSAyOSwgMTQ1MywgMTI6MDA6MDAgQU0gICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUHBwcCAgfCBNYXkgMjl0aCwgMTQ1MyBhdCAuLi4gICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQcHBwcHwgU3VuZGF5LCBNYXkgMjl0aCwgMTQ1MyBhdCAuLi4gICAgIHwgMiw3ICAgfFxuICogTm90ZXM6XG4gKiAxLiBcIkZvcm1hdHRpbmdcIiB1bml0cyAoZS5nLiBmb3JtYXR0aW5nIHF1YXJ0ZXIpIGluIHRoZSBkZWZhdWx0IGVuLVVTIGxvY2FsZVxuICogICAgYXJlIHRoZSBzYW1lIGFzIFwic3RhbmQtYWxvbmVcIiB1bml0cywgYnV0IGFyZSBkaWZmZXJlbnQgaW4gc29tZSBsYW5ndWFnZXMuXG4gKiAgICBcIkZvcm1hdHRpbmdcIiB1bml0cyBhcmUgZGVjbGluZWQgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBvZiB0aGUgbGFuZ3VhZ2VcbiAqICAgIGluIHRoZSBjb250ZXh0IG9mIGEgZGF0ZS4gXCJTdGFuZC1hbG9uZVwiIHVuaXRzIGFyZSBhbHdheXMgbm9taW5hdGl2ZSBzaW5ndWxhcjpcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIExMTEwnLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIE1NTU0nLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkdSdgXG4gKlxuICogMi4gQW55IHNlcXVlbmNlIG9mIHRoZSBpZGVudGljYWwgbGV0dGVycyBpcyBhIHBhdHRlcm4sIHVubGVzcyBpdCBpcyBlc2NhcGVkIGJ5XG4gKiAgICB0aGUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgKHNlZSBiZWxvdykuXG4gKiAgICBJZiB0aGUgc2VxdWVuY2UgaXMgbG9uZ2VyIHRoYW4gbGlzdGVkIGluIHRhYmxlIChlLmcuIGBFRUVFRUVFRUVFRWApXG4gKiAgICB0aGUgb3V0cHV0IHdpbGwgYmUgdGhlIHNhbWUgYXMgZGVmYXVsdCBwYXR0ZXJuIGZvciB0aGlzIHVuaXQsIHVzdWFsbHlcbiAqICAgIHRoZSBsb25nZXN0IG9uZSAoaW4gY2FzZSBvZiBJU08gd2Vla2RheXMsIGBFRUVFYCkuIERlZmF1bHQgcGF0dGVybnMgZm9yIHVuaXRzXG4gKiAgICBhcmUgbWFya2VkIHdpdGggXCIyXCIgaW4gdGhlIGxhc3QgY29sdW1uIG9mIHRoZSB0YWJsZS5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTScpIC8vPT4gJ05vdidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU0nKSAvLz0+ICdOJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogMy4gU29tZSBwYXR0ZXJucyBjb3VsZCBiZSB1bmxpbWl0ZWQgbGVuZ3RoIChzdWNoIGFzIGB5eXl5eXl5eWApLlxuICogICAgVGhlIG91dHB1dCB3aWxsIGJlIHBhZGRlZCB3aXRoIHplcm9zIHRvIG1hdGNoIHRoZSBsZW5ndGggb2YgdGhlIHBhdHRlcm4uXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICd5eXl5eXl5eScpIC8vPT4gJzAwMDAyMDE3J2BcbiAqXG4gKiA0LiBgUVFRUVFgIGFuZCBgcXFxcXFgIGNvdWxkIGJlIG5vdCBzdHJpY3RseSBudW1lcmljYWwgaW4gc29tZSBsb2NhbGVzLlxuICogICAgVGhlc2UgdG9rZW5zIHJlcHJlc2VudCB0aGUgc2hvcnRlc3QgZm9ybSBvZiB0aGUgcXVhcnRlci5cbiAqXG4gKiA1LiBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgcGF0dGVybnMgYXJlIEIuQy4geWVhcnM6XG4gKlxuICogICAgfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS18LS0tLS18XG4gKiAgICB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICogICAgfCBCQyAxIHwgICAxIHwgICAwIHxcbiAqICAgIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gKlxuICogICAgQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICogICAgd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkOlxuICpcbiAqICAgIHwgWWVhciB8IGB5eWAgfCBgdXVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS0tfC0tLS0tLXxcbiAqICAgIHwgMSAgICB8ICAgMDEgfCAgIDAxIHxcbiAqICAgIHwgMTQgICB8ICAgMTQgfCAgIDE0IHxcbiAqICAgIHwgMzc2ICB8ICAgNzYgfCAgMzc2IHxcbiAqICAgIHwgMTQ1MyB8ICAgNTMgfCAxNDUzIHxcbiAqXG4gKiAgICBUaGUgc2FtZSBkaWZmZXJlbmNlIGlzIHRydWUgZm9yIGxvY2FsIGFuZCBJU08gd2Vlay1udW1iZXJpbmcgeWVhcnMgKGBZYCBhbmQgYFJgKSxcbiAqICAgIGV4Y2VwdCBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFycyBhcmUgZGVwZW5kZW50IG9uIGBvcHRpb25zLndlZWtTdGFydHNPbmBcbiAqICAgIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIChjb21wYXJlIFtnZXRJU09XZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRJU09XZWVrWWVhcn1cbiAqICAgIGFuZCBbZ2V0V2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0V2Vla1llYXJ9KS5cbiAqXG4gKiA2LiBTcGVjaWZpYyBub24tbG9jYXRpb24gdGltZXpvbmVzIGFyZSBjdXJyZW50bHkgdW5hdmFpbGFibGUgaW4gYGRhdGUtZm5zYCxcbiAqICAgIHNvIHJpZ2h0IG5vdyB0aGVzZSB0b2tlbnMgZmFsbCBiYWNrIHRvIEdNVCB0aW1lem9uZXMuXG4gKlxuICogNy4gVGhlc2UgcGF0dGVybnMgYXJlIG5vdCBpbiB0aGUgVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogICAgLSBgaWA6IElTTyBkYXkgb2Ygd2Vla1xuICogICAgLSBgSWA6IElTTyB3ZWVrIG9mIHllYXJcbiAqICAgIC0gYFJgOiBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICogICAgLSBgdGA6IHNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBUYDogbWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgb2A6IG9yZGluYWwgbnVtYmVyIG1vZGlmaWVyXG4gKiAgICAtIGBQYDogbG9uZyBsb2NhbGl6ZWQgZGF0ZVxuICogICAgLSBgcGA6IGxvbmcgbG9jYWxpemVkIHRpbWVcbiAqXG4gKiA4LiBgWVlgIGFuZCBgWVlZWWAgdG9rZW5zIHJlcHJlc2VudCB3ZWVrLW51bWJlcmluZyB5ZWFycyBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCB5ZWFycy5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqXG4gKiA5LiBgRGAgYW5kIGBERGAgdG9rZW5zIHJlcHJlc2VudCBkYXlzIG9mIHRoZSB5ZWFyIGJ1dCB0aGV5IGFyZSBvZnRoZW4gY29uZnVzZWQgd2l0aCBkYXlzIG9mIHRoZSBtb250aC5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiAtIFRoZSBzZWNvbmQgYXJndW1lbnQgaXMgbm93IHJlcXVpcmVkIGZvciB0aGUgc2FrZSBvZiBleHBsaWNpdG5lc3MuXG4gKlxuICogICBgYGBqYXZhc2NyaXB0XG4gKiAgIC8vIEJlZm9yZSB2Mi4wLjBcbiAqICAgZm9ybWF0KG5ldyBEYXRlKDIwMTYsIDAsIDEpKVxuICpcbiAqICAgLy8gdjIuMC4wIG9ud2FyZFxuICogICBmb3JtYXQobmV3IERhdGUoMjAxNiwgMCwgMSksIFwieXl5eS1NTS1kZCdUJ0hIOm1tOnNzLlNTU3h4eFwiKVxuICogICBgYGBcbiAqXG4gKiAtIE5ldyBmb3JtYXQgc3RyaW5nIEFQSSBmb3IgYGZvcm1hdGAgZnVuY3Rpb25cbiAqICAgd2hpY2ggaXMgYmFzZWQgb24gW1VuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNV0oaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0ZpZWxkX1N5bWJvbF9UYWJsZSkuXG4gKiAgIFNlZSBbdGhpcyBwb3N0XShodHRwczovL2Jsb2cuZGF0ZS1mbnMub3JnL3Bvc3QvdW5pY29kZS10b2tlbnMtaW4tZGF0ZS1mbnMtdjItc3JlYXR5a2k5MWpnKSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIC0gQ2hhcmFjdGVycyBhcmUgbm93IGVzY2FwZWQgdXNpbmcgc2luZ2xlIHF1b3RlIHN5bWJvbHMgKGAnYCkgaW5zdGVhZCBvZiBzcXVhcmUgYnJhY2tldHMuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0IC0gdGhlIHN0cmluZyBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcGFyYW0gezB8MXwyfDN8NHw1fDZ9IFtvcHRpb25zLndlZWtTdGFydHNPbj0wXSAtIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrICgwIC0gU3VuZGF5KVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZT0xXSAtIHRoZSBkYXkgb2YgSmFudWFyeSwgd2hpY2ggaXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgd2Vlay1udW1iZXJpbmcgeWVhciB0b2tlbnMgYFlZYCBhbmQgYFlZWVlgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIHRoZSBkYXkgb2YgeWVhciB0b2tlbnMgYERgIGFuZCBgRERgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgZGF0ZWAgbXVzdCBub3QgYmUgSW52YWxpZCBEYXRlXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgbG9jYWxpemVgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgZm9ybWF0TG9uZ2AgcHJvcGVydHlcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDdcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXlgIGluc3RlYWQgb2YgYFlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBmb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDExIEZlYnJ1YXJ5IDIwMTQgaW4gbWlkZGxlLWVuZGlhbiBmb3JtYXQ6XG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDEsIDExKSwgJ01NL2RkL3l5eXknKVxuICogLy89PiAnMDIvMTEvMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDIgSnVseSAyMDE0IGluIEVzcGVyYW50bzpcbiAqIGltcG9ydCB7IGVvTG9jYWxlIH0gZnJvbSAnZGF0ZS1mbnMvbG9jYWxlL2VvJ1xuICogdmFyIHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyKSwgXCJkbyAnZGUnIE1NTU0geXl5eVwiLCB7XG4gKiAgIGxvY2FsZTogZW9Mb2NhbGVcbiAqIH0pXG4gKiAvLz0+ICcyLWEgZGUganVsaW8gMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRXNjYXBlIHN0cmluZyBieSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyczpcbiAqIHZhciByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiwgMTUpLCBcImggJ28nJ2Nsb2NrJ1wiKVxuICogLy89PiBcIjMgbydjbG9ja1wiXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0KGRpcnR5RGF0ZSwgZGlydHlGb3JtYXRTdHIsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGZvcm1hdFN0ciA9IFN0cmluZyhkaXJ0eUZvcm1hdFN0cik7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUgfHwgZGVmYXVsdExvY2FsZTtcbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZTtcbiAgdmFyIGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IDEgOiB0b0ludGVnZXIobG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIDogdG9JbnRlZ2VyKG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoIShmaXJzdFdlZWtDb250YWluc0RhdGUgPj0gMSAmJiBmaXJzdFdlZWtDb250YWluc0RhdGUgPD0gNykpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZmlyc3RXZWVrQ29udGFpbnNEYXRlIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgbG9jYWxlV2Vla1N0YXJ0c09uID0gbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMud2Vla1N0YXJ0c09uO1xuICB2YXIgZGVmYXVsdFdlZWtTdGFydHNPbiA9IGxvY2FsZVdlZWtTdGFydHNPbiA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihsb2NhbGVXZWVrU3RhcnRzT24pO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gb3B0aW9ucy53ZWVrU3RhcnRzT24gPT0gbnVsbCA/IGRlZmF1bHRXZWVrU3RhcnRzT24gOiB0b0ludGVnZXIob3B0aW9ucy53ZWVrU3RhcnRzT24pOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKHdlZWtTdGFydHNPbiA+PSAwICYmIHdlZWtTdGFydHNPbiA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIGlmICghbG9jYWxlLmxvY2FsaXplKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gbG9jYWxpemUgcHJvcGVydHknKTtcbiAgfVxuXG4gIGlmICghbG9jYWxlLmZvcm1hdExvbmcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBmb3JtYXRMb25nIHByb3BlcnR5Jyk7XG4gIH1cblxuICB2YXIgb3JpZ2luYWxEYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG5cbiAgaWYgKCFpc1ZhbGlkKG9yaWdpbmFsRGF0ZSkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIH0gLy8gQ29udmVydCB0aGUgZGF0ZSBpbiBzeXN0ZW0gdGltZXpvbmUgdG8gdGhlIHNhbWUgZGF0ZSBpbiBVVEMrMDA6MDAgdGltZXpvbmUuXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0IHdoZW4gVVRDIGZ1bmN0aW9ucyB3aWxsIGJlIGltcGxlbWVudGVkLCBsb2NhbGVzIHdpbGwgYmUgY29tcGF0aWJsZSB3aXRoIHRoZW0uXG4gIC8vIFNlZSBhbiBpc3N1ZSBhYm91dCBVVEMgZnVuY3Rpb25zOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5cbiAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhvcmlnaW5hbERhdGUpO1xuICB2YXIgdXRjRGF0ZSA9IHN1Yk1pbGxpc2Vjb25kcyhvcmlnaW5hbERhdGUsIHRpbWV6b25lT2Zmc2V0KTtcbiAgdmFyIGZvcm1hdHRlck9wdGlvbnMgPSB7XG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiBmaXJzdFdlZWtDb250YWluc0RhdGUsXG4gICAgd2Vla1N0YXJ0c09uOiB3ZWVrU3RhcnRzT24sXG4gICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgX29yaWdpbmFsRGF0ZTogb3JpZ2luYWxEYXRlXG4gIH07XG4gIHZhciByZXN1bHQgPSBmb3JtYXRTdHIubWF0Y2gobG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuXG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSAncCcgfHwgZmlyc3RDaGFyYWN0ZXIgPT09ICdQJykge1xuICAgICAgdmFyIGxvbmdGb3JtYXR0ZXIgPSBsb25nRm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG4gICAgICByZXR1cm4gbG9uZ0Zvcm1hdHRlcihzdWJzdHJpbmcsIGxvY2FsZS5mb3JtYXRMb25nLCBmb3JtYXR0ZXJPcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3Vic3RyaW5nO1xuICB9KS5qb2luKCcnKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIC8vIFJlcGxhY2UgdHdvIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIHdpdGggb25lIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJcbiAgICBpZiAoc3Vic3RyaW5nID09PSBcIicnXCIpIHtcbiAgICAgIHJldHVybiBcIidcIjtcbiAgICB9XG5cbiAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09IFwiJ1wiKSB7XG4gICAgICByZXR1cm4gY2xlYW5Fc2NhcGVkU3RyaW5nKHN1YnN0cmluZyk7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1hdHRlciA9IGZvcm1hdHRlcnNbZmlyc3RDaGFyYWN0ZXJdO1xuXG4gICAgaWYgKGZvcm1hdHRlcikge1xuICAgICAgaWYgKCFvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucyAmJiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIGRpcnR5RGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zICYmIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIGRpcnR5RGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmb3JtYXR0ZXIodXRjRGF0ZSwgc3Vic3RyaW5nLCBsb2NhbGUubG9jYWxpemUsIGZvcm1hdHRlck9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChmaXJzdENoYXJhY3Rlci5tYXRjaCh1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCkpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdGb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXIgYCcgKyBmaXJzdENoYXJhY3RlciArICdgJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1YnN0cmluZztcbiAgfSkuam9pbignJyk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGNsZWFuRXNjYXBlZFN0cmluZyhpbnB1dCkge1xuICByZXR1cm4gaW5wdXQubWF0Y2goZXNjYXBlZFN0cmluZ1JlZ0V4cClbMV0ucmVwbGFjZShkb3VibGVRdW90ZVJlZ0V4cCwgXCInXCIpO1xufSIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcbmltcG9ydCB7IFN0ZXBXaXphcmRDaGlsZFByb3BzIH0gZnJvbSAncmVhY3Qtc3RlcC13aXphcmQnO1xuXG5pbXBvcnQgeyBMaXZlU2V0dGluZ3MgfSBmcm9tICdAaW50ZXJmYWNlcy9pbnRlcmZhY2VzJztcblxuaW1wb3J0IHsgQlJBTkQsIFZFUlNJT04gfSBmcm9tICdAY29uc3RhbnRzL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBTdG9yYWdlIH0gZnJvbSAnQGNvbnN0YW50cy9zdG9yYWdlJztcblxuaW1wb3J0IHVzZUZ1bm5lbCBmcm9tICdAaG9va3MvdXNlRnVubmVsJztcblxuaW1wb3J0IEF1dGggZnJvbSAnQGNvbXBvbmVudHMvQXV0aC9BdXRoJztcbmltcG9ydCBMYW5ndWFnZVN3aXRjaGVyIGZyb20gJ0Bjb21wb25lbnRzL0xhbmd1YWdlU3dpdGNoZXIvTGFuZ3VhZ2VTd2l0Y2hlcic7XG5pbXBvcnQgTG9nbyBmcm9tICdAY29tcG9uZW50cy9Mb2dvL0xvZ28nO1xuaW1wb3J0IFN0ZXAgZnJvbSAnQGNvbXBvbmVudHMvU3RlcC9TdGVwJztcblxuaW1wb3J0IHsgZ2V0RnJvbVN0b3JhZ2UgfSBmcm9tICdAaGVscGVycy9zdG9yYWdlJztcbmltcG9ydCBVbk1vdW50Q29udGV4dCBmcm9tICdAaGVscGVycy9Vbk1vdW50Q29udGV4dCc7XG5pbXBvcnQgeyBnZXRWZXJzaW9uIH0gZnJvbSAnQGhlbHBlcnMvdXRpbHMnO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vQXV0aFN0ZXAuY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuY29uc3QgbmFtZSA9ICdhdXRoJztcblxuY29uc3QgQXV0aFN0ZXAgPSAoe1xuICBpc0FjdGl2ZSxcbiAgbmV4dFN0ZXAsXG59OiBQYXJ0aWFsPFN0ZXBXaXphcmRDaGlsZFByb3BzPik6IEpTWC5FbGVtZW50ID0+IHtcbiAgY29uc3QgeyBzZW5kRXZlbnQgfSA9IHVzZUZ1bm5lbChmYWxzZSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHVpZCA9IGF3YWl0IGdldEZyb21TdG9yYWdlKFN0b3JhZ2UuVUlEKTtcbiAgICAgICAgYXdhaXQgc2VuZEV2ZW50KCdzaG93JywgbmFtZSwge1xuICAgICAgICAgIGRhdGV0aW1lOiBEYXRlLm5vdygpLFxuICAgICAgICAgIGV4dGVuc2lvbl9icmFuZDogQlJBTkQsXG4gICAgICAgICAgZXh0ZW5zaW9uX3ZlcnNpb246IGdldFZlcnNpb24oKSxcbiAgICAgICAgICB1aWQsXG4gICAgICAgICAgdXJsOiB3aW5kb3cubG9jYXRpb24uaHJlZixcbiAgICAgICAgICB2ZXJzaW9uOiBWRVJTSU9OLFxuICAgICAgICB9KTtcbiAgICAgIH0pKCk7XG4gICAgfVxuICB9LCBbaXNBY3RpdmUsIHNlbmRFdmVudF0pO1xuXG4gIGNvbnN0IHVuTW91bnQgPSB1c2VDb250ZXh0KFVuTW91bnRDb250ZXh0KTtcblxuICBjb25zdCBoYW5kbGVTdWJtaXQgPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbGl2ZVNldHRpbmdzOiBMaXZlU2V0dGluZ3MgfCB1bmRlZmluZWQgPSBhd2FpdCBnZXRGcm9tU3RvcmFnZShcbiAgICAgIFN0b3JhZ2UuTElWRV9TRVRUSU5HU1xuICAgICk7XG5cbiAgICBpZiAobGl2ZVNldHRpbmdzICYmIGxpdmVTZXR0aW5ncy5oaWRkZW4pIHtcbiAgICAgIHVuTW91bnQoKTtcbiAgICB9IGVsc2UgaWYgKG5leHRTdGVwKSB7XG4gICAgICBuZXh0U3RlcCgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxTdGVwPlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2VtKCdsYW5ndWFnZVN3aXRjaGVyJykoKX0+XG4gICAgICAgIDxMYW5ndWFnZVN3aXRjaGVyIC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxMb2dvIGhlaWdodD17NDZ9IHNpemU9XCJtXCIgLz5cbiAgICAgIDxBdXRoXG4gICAgICAgIGlzQWN0aXZlPXtpc0FjdGl2ZX0gLy8g0J3Rg9C20L3QviDQtNC70Y8g0YPRgdGC0LDQvdC+0LLQutC4INGE0L7QutGD0YHQsCDQvdCwINC40L3Qv9GD0YIg0YEgZW1haWwn0L7QvFxuICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICBvblNraXA9e3VuTW91bnR9XG4gICAgICAgIG9uU3VibWl0PXtoYW5kbGVTdWJtaXR9XG4gICAgICAvPlxuICAgIDwvU3RlcD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEF1dGhTdGVwO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IGNzc21lbSBmcm9tICdjc3NtZW0nO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vT3JkZXJlZExpc3QuY3NzJztcblxuY29uc3QgZW0gPSBjc3NtZW0oc3R5bGVzKTtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0RWxlbWVudFtdO1xufVxuXG5jb25zdCBPcmRlcmVkTGlzdDogUmVhY3QuRkM8UHJvcHM+ID0gKHsgY2hpbGRyZW4gfSkgPT4gKFxuICA8b2wgY2xhc3NOYW1lPXtlbSgnb3JkZXJlZExpc3QnKSgpfT5cbiAgICB7UmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCAoY2hpbGQpID0+IHtcbiAgICAgIGNvbnN0IGNoaWxkUHJvcHMgPSB7XG4gICAgICAgIC4uLmNoaWxkLnByb3BzLFxuICAgICAgICBjbGFzc05hbWU6IGVtKCdpdGVtJykoKSxcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIGNoaWxkUHJvcHMpO1xuICAgIH0pfVxuICA8L29sPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgT3JkZXJlZExpc3Q7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VDYWxsYmFjaywgRkMgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcbmltcG9ydCB7IHVzZUludGwgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCB7IFN0ZXBXaXphcmRDaGlsZFByb3BzIH0gZnJvbSAncmVhY3Qtc3RlcC13aXphcmQnO1xuaW1wb3J0IHsgYnJvd3NlciB9IGZyb20gJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbC10cyc7XG5cbmltcG9ydCB7IEJSQU5ELCBWRVJTSU9OIH0gZnJvbSAnQGNvbnN0YW50cy9jb25zdGFudHMnO1xuaW1wb3J0IHsgZmlsZXMgfSBmcm9tICdAY29uc3RhbnRzL2ZpbGVzJztcbmltcG9ydCB7IFN0b3JhZ2UgfSBmcm9tICdAY29uc3RhbnRzL3N0b3JhZ2UnO1xuXG5pbXBvcnQgdXNlRnVubmVsIGZyb20gJ0Bob29rcy91c2VGdW5uZWwnO1xuXG5pbXBvcnQgQnV0dG9uLCB7IFNJWkUsIFRZUEUsIFZJRVcgfSBmcm9tICdjb21wb25lbnRzL0J1dHRvbic7XG5cbmltcG9ydCBMYW5ndWFnZVN3aXRjaGVyIGZyb20gJ0Bjb21wb25lbnRzL0xhbmd1YWdlU3dpdGNoZXIvTGFuZ3VhZ2VTd2l0Y2hlcic7XG5pbXBvcnQgTG9nbyBmcm9tICdAY29tcG9uZW50cy9Mb2dvL0xvZ28nO1xuaW1wb3J0IE9yZGVyZWRMaXN0IGZyb20gJ0Bjb21wb25lbnRzL09yZGVyZWRMaXN0L09yZGVyZWRMaXN0JztcbmltcG9ydCBTdGVwIGZyb20gJ0Bjb21wb25lbnRzL1N0ZXAvU3RlcCc7XG5pbXBvcnQgVGl0bGUgZnJvbSAnQGNvbXBvbmVudHMvVGl0bGUvVGl0bGUnO1xuXG5pbXBvcnQgeyBnZXRGcm9tU3RvcmFnZSB9IGZyb20gJ0BoZWxwZXJzL3N0b3JhZ2UnO1xuaW1wb3J0IHsgZ2V0VmVyc2lvbiwgbm9vcCB9IGZyb20gJ0BoZWxwZXJzL3V0aWxzJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0Vjb25vbXlTdGVwLmNzcyc7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmNvbnN0IG5hbWUgPSAnd2VsY29tZV8xJztcblxuY29uc3QgRWNvbm9teVN0ZXA6IEZDPFBhcnRpYWw8U3RlcFdpemFyZENoaWxkUHJvcHM+PiA9ICh7XG4gIGdvVG9TdGVwID0gbm9vcCxcbiAgaXNBY3RpdmUsXG4gIG5leHRTdGVwID0gbm9vcCxcbn0pID0+IHtcbiAgY29uc3QgaW50bCA9IHVzZUludGwoKTtcblxuICBjb25zdCB7IHNlbmRFdmVudCB9ID0gdXNlRnVubmVsKGZhbHNlKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgdWlkID0gYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoU3RvcmFnZS5VSUQpO1xuICAgICAgICBhd2FpdCBzZW5kRXZlbnQoJ3Nob3cnLCBuYW1lLCB7XG4gICAgICAgICAgZGF0ZXRpbWU6IERhdGUubm93KCksXG4gICAgICAgICAgZXh0ZW5zaW9uX2JyYW5kOiBCUkFORCxcbiAgICAgICAgICBleHRlbnNpb25fdmVyc2lvbjogZ2V0VmVyc2lvbigpLFxuICAgICAgICAgIHVpZCxcbiAgICAgICAgICB1cmw6IHdpbmRvdy5sb2NhdGlvbi5ocmVmLFxuICAgICAgICAgIHZlcnNpb246IFZFUlNJT04sXG4gICAgICAgIH0pO1xuICAgICAgfSkoKTtcbiAgICB9XG4gIH0sIFtpc0FjdGl2ZSwgc2VuZEV2ZW50XSk7XG5cbiAgY29uc3QgaGFuZGxlQnV0dG9uU2tpcENsaWNrID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHVpZCA9IGF3YWl0IGdldEZyb21TdG9yYWdlKFN0b3JhZ2UuVUlEKTtcbiAgICBhd2FpdCBzZW5kRXZlbnQoJ2NsaWNrJywgYCR7bmFtZX1fc2tpcGAsIHtcbiAgICAgIGRhdGV0aW1lOiBEYXRlLm5vdygpLFxuICAgICAgZXh0ZW5zaW9uX2JyYW5kOiBCUkFORCxcbiAgICAgIGV4dGVuc2lvbl92ZXJzaW9uOiBnZXRWZXJzaW9uKCksXG4gICAgICB1aWQsXG4gICAgICB1cmw6IHdpbmRvdy5sb2NhdGlvbi5ocmVmLFxuICAgICAgdmVyc2lvbjogVkVSU0lPTixcbiAgICB9KTtcbiAgICBnb1RvU3RlcCgzKTtcbiAgfSwgW2dvVG9TdGVwLCBzZW5kRXZlbnRdKTtcblxuICBjb25zdCBoYW5kbGVCdXR0b25OZXh0Q2xpY2sgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdWlkID0gYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoU3RvcmFnZS5VSUQpO1xuICAgIGF3YWl0IHNlbmRFdmVudCgnY2xpY2snLCBgJHtuYW1lfV9uZXh0YCwge1xuICAgICAgZGF0ZXRpbWU6IERhdGUubm93KCksXG4gICAgICBleHRlbnNpb25fYnJhbmQ6IEJSQU5ELFxuICAgICAgZXh0ZW5zaW9uX3ZlcnNpb246IGdldFZlcnNpb24oKSxcbiAgICAgIHVpZCxcbiAgICAgIHVybDogd2luZG93LmxvY2F0aW9uLmhyZWYsXG4gICAgICB2ZXJzaW9uOiBWRVJTSU9OLFxuICAgIH0pO1xuICAgIG5leHRTdGVwKCk7XG4gIH0sIFtuZXh0U3RlcCwgc2VuZEV2ZW50XSk7XG5cbiAgcmV0dXJuIChcbiAgICA8U3RlcFxuICAgICAgc3R5bGU9e3tcbiAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7YnJvd3Nlci5ydW50aW1lLmdldFVSTChcbiAgICAgICAgICBmaWxlcy5pbWFnZXMuQkdfRUNPTk9NWV9TVEVQXG4gICAgICAgICl9KWAsXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnbGFuZ3VhZ2VTd2l0Y2hlcicpKCl9PlxuICAgICAgICA8TGFuZ3VhZ2VTd2l0Y2hlciAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8TG9nbyBoZWlnaHQ9ezQ2fSBzaXplPVwibVwiIC8+XG4gICAgICA8VGl0bGUgY2xhc3NOYW1lPXtlbSgndGl0bGUnKSgpfSBzaXplPVwibVwiPlxuICAgICAgICB7aW50bC5mb3JtYXRNZXNzYWdlKHsgaWQ6ICdlY29ub215LnRpdGxlJyB9KX1cbiAgICAgIDwvVGl0bGU+XG4gICAgICA8T3JkZXJlZExpc3Q+XG4gICAgICAgIDxsaT57aW50bC5mb3JtYXRNZXNzYWdlKHsgaWQ6ICdlY29ub215Lmxpc3QuZmlyc3QnIH0pfTwvbGk+XG4gICAgICAgIDxsaT57aW50bC5mb3JtYXRNZXNzYWdlKHsgaWQ6ICdlY29ub215Lmxpc3Quc2Vjb25kJyB9KX08L2xpPlxuICAgICAgICA8bGk+e2ludGwuZm9ybWF0TWVzc2FnZSh7IGlkOiAnZWNvbm9teS5saXN0LnRoaXJkJyB9KX08L2xpPlxuICAgICAgPC9PcmRlcmVkTGlzdD5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnYnV0dG9ucycpKCl9PlxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgY2xhc3NOYW1lPXtlbSgnYnV0dG9uJykoKX1cbiAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVCdXR0b25Ta2lwQ2xpY2t9XG4gICAgICAgICAgc2l6ZT17U0laRS5NfVxuICAgICAgICAgIHR5cGU9e1RZUEUuQlVUVE9OfVxuICAgICAgICAgIHZpZXc9e1ZJRVcuTElHSFR9XG4gICAgICAgID5cbiAgICAgICAgICB7aW50bC5mb3JtYXRNZXNzYWdlKHsgaWQ6ICdlY29ub215LnNraXBCdXR0b24nIH0pfVxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIGNsYXNzTmFtZT17ZW0oJ2J1dHRvbicpKCl9XG4gICAgICAgICAgb25DbGljaz17aGFuZGxlQnV0dG9uTmV4dENsaWNrfVxuICAgICAgICAgIHNpemU9e1NJWkUuTX1cbiAgICAgICAgICB0eXBlPXtUWVBFLkJVVFRPTn1cbiAgICAgICAgPlxuICAgICAgICAgIHtpbnRsLmZvcm1hdE1lc3NhZ2UoeyBpZDogJ2Vjb25vbXkubmV4dEJ1dHRvbicgfSl9XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9TdGVwPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRWNvbm9teVN0ZXA7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VDYWxsYmFjaywgdXNlQ29udGV4dCwgRkMgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBjc3NtZW0gZnJvbSAnY3NzbWVtJztcbmltcG9ydCB7IGFkZERheXMsIGZvcm1hdCwgc3RhcnRPZkRheSB9IGZyb20gJ2RhdGUtZm5zJztcbmltcG9ydCB7IHVzZUludGwgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCB7IFN0ZXBXaXphcmRDaGlsZFByb3BzIH0gZnJvbSAncmVhY3Qtc3RlcC13aXphcmQnO1xuaW1wb3J0IHsgYnJvd3NlciB9IGZyb20gJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbC10cyc7XG5cbmltcG9ydCB7IEJSQU5ELCBWRVJTSU9OIH0gZnJvbSAnQGNvbnN0YW50cy9jb25zdGFudHMnO1xuaW1wb3J0IHsgZmlsZXMgfSBmcm9tICdAY29uc3RhbnRzL2ZpbGVzJztcbmltcG9ydCB7IExhbmd1YWdlIH0gZnJvbSAnQGNvbnN0YW50cy9sYW5ndWFnZXMnO1xuaW1wb3J0IHsgU3RvcmFnZSB9IGZyb20gJ0Bjb25zdGFudHMvc3RvcmFnZSc7XG5pbXBvcnQgdXJscyBmcm9tICdAY29uc3RhbnRzL3VybHMnO1xuXG5pbXBvcnQgdXNlRnVubmVsIGZyb20gJ0Bob29rcy91c2VGdW5uZWwnO1xuXG5pbXBvcnQgQnV0dG9uLCB7IFNJWkUsIFRZUEUsIFZJRVcgfSBmcm9tICdjb21wb25lbnRzL0J1dHRvbic7XG5cbmltcG9ydCBMYW5ndWFnZVN3aXRjaGVyIGZyb20gJ0Bjb21wb25lbnRzL0xhbmd1YWdlU3dpdGNoZXIvTGFuZ3VhZ2VTd2l0Y2hlcic7XG5pbXBvcnQgTG9nbyBmcm9tICdAY29tcG9uZW50cy9Mb2dvL0xvZ28nO1xuaW1wb3J0IE9yZGVyZWRMaXN0IGZyb20gJ0Bjb21wb25lbnRzL09yZGVyZWRMaXN0L09yZGVyZWRMaXN0JztcbmltcG9ydCBTdGVwIGZyb20gJ0Bjb21wb25lbnRzL1N0ZXAvU3RlcCc7XG5pbXBvcnQgVGl0bGUgZnJvbSAnQGNvbXBvbmVudHMvVGl0bGUvVGl0bGUnO1xuXG5pbXBvcnQgeyBnZXRGcm9tU3RvcmFnZSB9IGZyb20gJ0BoZWxwZXJzL3N0b3JhZ2UnO1xuaW1wb3J0IFVuTW91bnRDb250ZXh0IGZyb20gJ0BoZWxwZXJzL1VuTW91bnRDb250ZXh0JztcbmltcG9ydCB7IGdldFZlcnNpb24gfSBmcm9tICdAaGVscGVycy91dGlscyc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9JbnN0cnVjdGlvbnNTdGVwLmNzcyc7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmNvbnN0IEVYQU1QTEVfQk9PS0lOR19XSU5ET1cgPSA2MDtcbmNvbnN0IG5hbWUgPSAnb25ib2FyZGluZyc7XG5cbmNvbnN0IEluc3RydWN0aW9uc1N0ZXA6IEZDPFBhcnRpYWw8U3RlcFdpemFyZENoaWxkUHJvcHM+PiA9ICh7IGlzQWN0aXZlIH0pID0+IHtcbiAgY29uc3QgaW50bCA9IHVzZUludGwoKTtcblxuICBjb25zdCB7IHNlbmRFdmVudCB9ID0gdXNlRnVubmVsKGZhbHNlKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgdWlkID0gYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoU3RvcmFnZS5VSUQpO1xuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCBnZXRGcm9tU3RvcmFnZShTdG9yYWdlLlVTRVJfSUQpO1xuICAgICAgICBhd2FpdCBzZW5kRXZlbnQoJ3Nob3cnLCBuYW1lLCB7XG4gICAgICAgICAgZGF0ZXRpbWU6IERhdGUubm93KCksXG4gICAgICAgICAgZXh0ZW5zaW9uX2JyYW5kOiBCUkFORCxcbiAgICAgICAgICBleHRlbnNpb25fdmVyc2lvbjogZ2V0VmVyc2lvbigpLFxuICAgICAgICAgIHVpZCxcbiAgICAgICAgICB1cmw6IHdpbmRvdy5sb2NhdGlvbi5ocmVmLFxuICAgICAgICAgIHVzZXJfaWQ6IHVzZXJJZCxcbiAgICAgICAgICB2ZXJzaW9uOiBWRVJTSU9OLFxuICAgICAgICB9KTtcbiAgICAgIH0pKCk7XG4gICAgfVxuICB9LCBbaXNBY3RpdmUsIHNlbmRFdmVudF0pO1xuXG4gIGNvbnN0IHVuTW91bnQgPSB1c2VDb250ZXh0KFVuTW91bnRDb250ZXh0KTtcblxuICBjb25zdCBoYW5kbGVCdXR0b25FeGFtcGxlQ2xpY2sgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdWlkID0gYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoU3RvcmFnZS5VSUQpO1xuICAgIGNvbnN0IGxhbmd1YWdlID0gYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoU3RvcmFnZS5MQU5HVUFHRSk7XG4gICAgY29uc3QgdXNlcklkID0gYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoU3RvcmFnZS5VU0VSX0lEKTtcbiAgICBhd2FpdCBzZW5kRXZlbnQoJ2NsaWNrJywgYCR7bmFtZX1fZXhhbXBsZWAsIHtcbiAgICAgIGRhdGV0aW1lOiBEYXRlLm5vdygpLFxuICAgICAgZXh0ZW5zaW9uX2JyYW5kOiBCUkFORCxcbiAgICAgIGV4dGVuc2lvbl92ZXJzaW9uOiBnZXRWZXJzaW9uKCksXG4gICAgICB1aWQsXG4gICAgICB1cmw6IHdpbmRvdy5sb2NhdGlvbi5ocmVmLFxuICAgICAgdXNlcl9pZDogdXNlcklkLFxuICAgICAgdmVyc2lvbjogVkVSU0lPTixcbiAgICB9KTtcbiAgICBjb25zdCBub3cgPSBzdGFydE9mRGF5KG5ldyBEYXRlKCkpO1xuICAgIGNvbnN0IGNoZWNrSW4gPSBmb3JtYXQoYWRkRGF5cyhub3csIEVYQU1QTEVfQk9PS0lOR19XSU5ET1cpLCAneXl5eS1NTS1kZCcpO1xuICAgIGNvbnN0IGNoZWNrT3V0ID0gZm9ybWF0KFxuICAgICAgYWRkRGF5cyhub3csIEVYQU1QTEVfQk9PS0lOR19XSU5ET1cgKyAxKSxcbiAgICAgICd5eXl5LU1NLWRkJ1xuICAgICk7XG4gICAgd2luZG93Lm9wZW4oXG4gICAgICBgJHt1cmxzLkZJUlNUX0VYQU1QTEV9LiR7XG4gICAgICAgIGxhbmd1YWdlID09PSBMYW5ndWFnZS5SVSA/ICdydScgOiAnZW4tR0InXG4gICAgICB9Lmh0bWw/Y2hlY2tpbj0ke2NoZWNrSW59O2NoZWNrb3V0PSR7Y2hlY2tPdXR9O3Jvb20xPUEsQWBcbiAgICApO1xuICAgIHVuTW91bnQoKTtcbiAgfSwgW3NlbmRFdmVudCwgdW5Nb3VudF0pO1xuXG4gIGNvbnN0IGhhbmRsZUJ1dHRvblNraXBDbGljayA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB1aWQgPSBhd2FpdCBnZXRGcm9tU3RvcmFnZShTdG9yYWdlLlVJRCk7XG4gICAgY29uc3QgdXNlcklkID0gYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoU3RvcmFnZS5VU0VSX0lEKTtcbiAgICBhd2FpdCBzZW5kRXZlbnQoJ2NsaWNrJywgYCR7bmFtZX1fc2tpcGAsIHtcbiAgICAgIGRhdGV0aW1lOiBEYXRlLm5vdygpLFxuICAgICAgZXh0ZW5zaW9uX2JyYW5kOiBCUkFORCxcbiAgICAgIGV4dGVuc2lvbl92ZXJzaW9uOiBnZXRWZXJzaW9uKCksXG4gICAgICB1aWQsXG4gICAgICB1cmw6IHdpbmRvdy5sb2NhdGlvbi5ocmVmLFxuICAgICAgdXNlcl9pZDogdXNlcklkLFxuICAgICAgdmVyc2lvbjogVkVSU0lPTixcbiAgICB9KTtcbiAgICB1bk1vdW50KCk7XG4gIH0sIFtzZW5kRXZlbnQsIHVuTW91bnRdKTtcblxuICByZXR1cm4gKFxuICAgIDxTdGVwXG4gICAgICBzdHlsZT17e1xuICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHticm93c2VyLnJ1bnRpbWUuZ2V0VVJMKFxuICAgICAgICAgIGZpbGVzLmltYWdlcy5CR19JTlNUUlVDVElPTlNfU1RFUFxuICAgICAgICApfSlgLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZW0oJ2xhbmd1YWdlU3dpdGNoZXInKSgpfT5cbiAgICAgICAgPExhbmd1YWdlU3dpdGNoZXIgLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPExvZ28gY2xhc3NOYW1lPXtlbSgnbG9nbycpKCl9IGhlaWdodD17NDZ9IHNpemU9XCJtXCIgLz5cbiAgICAgIDxUaXRsZSBjbGFzc05hbWU9e2VtKCd0aXRsZScpKCl9IHNpemU9XCJtXCI+XG4gICAgICAgIHtpbnRsLmZvcm1hdE1lc3NhZ2UoeyBpZDogJ2luc3RydWN0aW9ucy50aXRsZScgfSl9XG4gICAgICA8L1RpdGxlPlxuICAgICAgPFRpdGxlIGNsYXNzTmFtZT17ZW0oJ3RpdGxlJykoKX0gc2l6ZT1cInNcIj5cbiAgICAgICAge2ludGwuZm9ybWF0TWVzc2FnZSh7IGlkOiAnaW5zdHJ1Y3Rpb25zLnN1YnRpdGxlJyB9KX1cbiAgICAgIDwvVGl0bGU+XG4gICAgICA8T3JkZXJlZExpc3Q+XG4gICAgICAgIDxsaT57aW50bC5mb3JtYXRNZXNzYWdlKHsgaWQ6ICdpbnN0cnVjdGlvbnMubGlzdC5maXJzdCcgfSl9PC9saT5cbiAgICAgICAgPGxpPntpbnRsLmZvcm1hdE1lc3NhZ2UoeyBpZDogJ2luc3RydWN0aW9ucy5saXN0LnNlY29uZCcgfSl9PC9saT5cbiAgICAgICAgPGxpPntpbnRsLmZvcm1hdE1lc3NhZ2UoeyBpZDogJ2luc3RydWN0aW9ucy5saXN0LnRoaXJkJyB9KX08L2xpPlxuICAgICAgICA8bGk+e2ludGwuZm9ybWF0TWVzc2FnZSh7IGlkOiAnaW5zdHJ1Y3Rpb25zLmxpc3QuZm91cnRoJyB9KX08L2xpPlxuICAgICAgICA8bGk+e2ludGwuZm9ybWF0TWVzc2FnZSh7IGlkOiAnaW5zdHJ1Y3Rpb25zLmxpc3QuZmlmdGgnIH0pfTwvbGk+XG4gICAgICA8L09yZGVyZWRMaXN0PlxuICAgICAgPEJ1dHRvblxuICAgICAgICBjbGFzc05hbWU9e2VtKCdidXR0b24nKSgpfVxuICAgICAgICBvbkNsaWNrPXtoYW5kbGVCdXR0b25FeGFtcGxlQ2xpY2t9XG4gICAgICAgIHNpemU9e1NJWkUuTX1cbiAgICAgICAgdHlwZT17VFlQRS5CVVRUT059XG4gICAgICAgIHdpZGVcbiAgICAgID5cbiAgICAgICAge2ludGwuZm9ybWF0TWVzc2FnZSh7IGlkOiAnaW5zdHJ1Y3Rpb25zLmV4YW1wbGVCdXR0b24nIH0pfVxuICAgICAgPC9CdXR0b24+XG4gICAgICA8QnV0dG9uXG4gICAgICAgIGNsYXNzTmFtZT17ZW0oJ2J1dHRvbicpKCl9XG4gICAgICAgIG9uQ2xpY2s9e2hhbmRsZUJ1dHRvblNraXBDbGlja31cbiAgICAgICAgc2l6ZT17U0laRS5NfVxuICAgICAgICB0eXBlPXtUWVBFLkJVVFRPTn1cbiAgICAgICAgdmlldz17VklFVy5MSUdIVH1cbiAgICAgICAgd2lkZVxuICAgICAgPlxuICAgICAgICB7aW50bC5mb3JtYXRNZXNzYWdlKHsgaWQ6ICdpbnN0cnVjdGlvbnMuc2tpcEJ1dHRvbicgfSl9XG4gICAgICA8L0J1dHRvbj5cbiAgICA8L1N0ZXA+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBJbnN0cnVjdGlvbnNTdGVwO1xuIiwiaW1wb3J0IFJlYWN0LCB7IEZDLCBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQge1xuICBTdGVwV2l6YXJkQ2hpbGRQcm9wcyxcbiAgU3RlcFdpemFyZFByb3BzLFxuICBUcmFuc2l0aW9ucyxcbiAgT25TdGVwQ2hhbmdlUHJvcHMsXG59IGZyb20gJ3JlYWN0LXN0ZXAtd2l6YXJkJztcblxuaW1wb3J0IEFuaW1hdGUgZnJvbSAnLi9BbmltYXRlZC5jc3MnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL1N0ZXBXaXphcmQuY3NzJztcblxuY29uc3QgZ2V0SGFzaCA9ICgpOiBzdHJpbmcgPT4gZGVjb2RlVVJJKHdpbmRvdy5sb2NhdGlvbi5oYXNoKS5yZXBsYWNlKC9eIy8sICcnKTtcbi8vIEFsbG93cyBmb3IgdXNpbmcgSFRNTCBlbGVtZW50cyBhcyBhIHN0ZXBcbmNvbnN0IGlzUmVhY3RDb21wb25lbnQgPSAoe1xuICB0eXBlLFxufToge1xuICB0eXBlOiAoKSA9PiB2b2lkIHwgUmVjb3JkPHN0cmluZywgYW55Pjtcbn0pID0+IHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JztcblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgYWN0aXZlU3RlcDogbnVtYmVyO1xuICBjbGFzc2VzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuICBoYXNoS2V5czogUmVjb3JkPHN0cmluZywgbnVtYmVyPjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RlcFdpemFyZCBleHRlbmRzIFB1cmVDb21wb25lbnQ8U3RlcFdpemFyZFByb3BzLCBTdGF0ZT4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogU3RlcFdpemFyZFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHRoaXMuaW5pdGlhbFN0YXRlKCk7XG5cbiAgICB0aGlzLmluaXRpYWxTdGF0ZSA9IHRoaXMuaW5pdGlhbFN0YXRlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5nZXRUcmFuc2l0aW9ucyA9IHRoaXMuZ2V0VHJhbnNpdGlvbnMuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uSGFzaENoYW5nZSA9IHRoaXMub25IYXNoQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5pc0ludmFsaWRTdGVwID0gdGhpcy5pc0ludmFsaWRTdGVwLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zZXRBY3RpdmVTdGVwID0gdGhpcy5zZXRBY3RpdmVTdGVwLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblN0ZXBDaGFuZ2UgPSB0aGlzLm9uU3RlcENoYW5nZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZmlyc3RTdGVwID0gdGhpcy5maXJzdFN0ZXAuYmluZCh0aGlzKTtcbiAgICB0aGlzLmxhc3RTdGVwID0gdGhpcy5sYXN0U3RlcC5iaW5kKHRoaXMpO1xuICAgIHRoaXMubmV4dFN0ZXAgPSB0aGlzLm5leHRTdGVwLmJpbmQodGhpcyk7XG4gICAgdGhpcy5wcmV2aW91c1N0ZXAgPSB0aGlzLnByZXZpb3VzU3RlcC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZ29Ub1N0ZXAgPSB0aGlzLmdvVG9TdGVwLmJpbmQodGhpcyk7XG4gICAgdGhpcy51cGRhdGVIYXNoID0gdGhpcy51cGRhdGVIYXNoLmJpbmQodGhpcyk7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpOiB2b2lkIHtcbiAgICBjb25zdCB7IGluc3RhbmNlLCBpc0hhc2hFbmFibGVkIH0gPSB0aGlzLnByb3BzO1xuICAgIC8vIEhhc2ggY2hhbmdlIGxpc3RlbmVyIC0gZm9yIGJhY2svZm9yd2FyZCBidXR0b25cbiAgICBpZiAoaXNIYXNoRW5hYmxlZCkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCB0aGlzLm9uSGFzaENoYW5nZSk7XG4gICAgfVxuXG4gICAgLy8gUHJvdmlkZSBpbnN0YW5jZSB0byBwYXJlbnRcbiAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgIGluc3RhbmNlKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCk6IHZvaWQge1xuICAgIGNvbnN0IHsgaXNIYXNoRW5hYmxlZCB9ID0gdGhpcy5wcm9wcztcbiAgICAvLyBSZW1vdmUgbGlzdGVuZXJcbiAgICBpZiAoaXNIYXNoRW5hYmxlZCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCB0aGlzLm9uSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgb25IYXNoQ2hhbmdlKCk6IHZvaWQge1xuICAgIGNvbnN0IHsgaGFzaEtleXMgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgbmV4dCA9IGhhc2hLZXlzW2dldEhhc2goKV07XG5cbiAgICBpZiAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnNldEFjdGl2ZVN0ZXAobmV4dCk7XG4gICAgfVxuICB9XG5cbiAgb25TdGVwQ2hhbmdlKHN0YXRzOiBPblN0ZXBDaGFuZ2VQcm9wcyk6IHZvaWQge1xuICAgIGNvbnN0IHsgYWN0aXZlU3RlcCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IGlzSGFzaEVuYWJsZWQsIG9uU3RlcENoYW5nZSB9ID0gdGhpcy5wcm9wcztcbiAgICAvLyBVc2VyIGNhbGxiYWNrXG4gICAgaWYgKG9uU3RlcENoYW5nZSkge1xuICAgICAgb25TdGVwQ2hhbmdlKHN0YXRzKTtcbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgaGFzaCBpZiBwcm9wIHNldFxuICAgIGlmIChpc0hhc2hFbmFibGVkKSB7XG4gICAgICB0aGlzLnVwZGF0ZUhhc2goYWN0aXZlU3RlcCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0VHJhbnNpdGlvbnMoKTogVHJhbnNpdGlvbnMge1xuICAgIGNvbnN0IHsgdHJhbnNpdGlvbnMgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgdHJhbnNpdGlvbnMgfHwge1xuICAgICAgICBlbnRlclJpZ2h0OiBgJHtBbmltYXRlLmFuaW1hdGVkfSAke0FuaW1hdGUuZmFkZUluUmlnaHR9YCxcbiAgICAgICAgZW50ZXJMZWZ0OiBgJHtBbmltYXRlLmFuaW1hdGVkfSAke0FuaW1hdGUuZmFkZUluTGVmdH1gLFxuICAgICAgICBleGl0UmlnaHQ6IGAke0FuaW1hdGUuYW5pbWF0ZWR9ICR7QW5pbWF0ZS5mYWRlT3V0UmlnaHR9YCxcbiAgICAgICAgZXhpdExlZnQ6IGAke0FuaW1hdGUuYW5pbWF0ZWR9ICR7QW5pbWF0ZS5mYWRlT3V0TGVmdH1gLFxuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBzZXRBY3RpdmVTdGVwKG5leHQ6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHsgYWN0aXZlU3RlcCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBhY3RpdmUgPSBhY3RpdmVTdGVwO1xuXG4gICAgaWYgKGFjdGl2ZSA9PT0gbmV4dCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzSW52YWxpZFN0ZXAobmV4dCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYCR7bmV4dCArIDF9IGlzIGFuIGludmFsaWQgc3RlcGApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHsgY2xhc3NlcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB0cmFuc2l0aW9ucyA9IHRoaXMuZ2V0VHJhbnNpdGlvbnMoKTtcblxuICAgIGlmIChhY3RpdmUgPCBuZXh0KSB7XG4gICAgICAvLyBzbGlkZSBsZWZ0XG4gICAgICBjbGFzc2VzW2FjdGl2ZV0gPSB0cmFuc2l0aW9ucy5leGl0TGVmdCB8fCAnJztcbiAgICAgIGNsYXNzZXNbbmV4dF0gPSB0cmFuc2l0aW9ucy5lbnRlclJpZ2h0IHx8ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzbGlkZSByaWdodFxuICAgICAgY2xhc3Nlc1thY3RpdmVdID0gdHJhbnNpdGlvbnMuZXhpdFJpZ2h0IHx8ICcnO1xuICAgICAgY2xhc3Nlc1tuZXh0XSA9IHRyYW5zaXRpb25zLmVudGVyTGVmdCB8fCAnJztcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKFxuICAgICAge1xuICAgICAgICBhY3RpdmVTdGVwOiBuZXh0LFxuICAgICAgICBjbGFzc2VzLFxuICAgICAgfSxcbiAgICAgICgpID0+IHtcbiAgICAgICAgLy8gU3RlcCBjaGFuZ2UgY2FsbGJhY2tcbiAgICAgICAgdGhpcy5vblN0ZXBDaGFuZ2Uoe1xuICAgICAgICAgIHByZXZpb3VzU3RlcDogYWN0aXZlICsgMSxcbiAgICAgICAgICBhY3RpdmVTdGVwOiBuZXh0ICsgMSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIGlzSW52YWxpZFN0ZXAobmV4dDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gbmV4dCA8IDAgfHwgbmV4dCA+PSBjaGlsZHJlbi5sZW5ndGg7XG4gIH1cblxuICAvKiogU2V0dXAgU3RlcHMgKi9cbiAgaW5pdGlhbFN0YXRlKCk6IFN0YXRlIHtcbiAgICBjb25zdCBzdGF0ZTogU3RhdGUgPSB7XG4gICAgICBhY3RpdmVTdGVwOiAwLFxuICAgICAgY2xhc3Nlczoge30sXG4gICAgICBoYXNoS2V5czoge30sXG4gICAgfTtcblxuICAgIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgaW5pdGlhbFN0ZXAgPSAxLFxuICAgICAgaXNIYXNoRW5hYmxlZCA9IGZhbHNlLFxuICAgICAgdHJhbnNpdGlvbnMgPSAnJyxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIC8vIFNldCBpbml0aWFsIGNsYXNzZXNcbiAgICAvLyBHZXQgaGFzaCBvbmx5IGluIGNsaWVudCBzaWRlXG4gICAgY29uc3QgaGFzaCA9IHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnID8gZ2V0SGFzaCgpIDogJyc7XG4gICAgY29uc3QgX2NoaWxkcmVuID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShjaGlsZHJlbik7XG4gICAgX2NoaWxkcmVuLmZvckVhY2goKGNoaWxkOiBhbnksIGkpID0+IHtcbiAgICAgIC8vIENyZWF0ZSBoYXNoS2V5IG1hcFxuICAgICAgc3RhdGUuaGFzaEtleXNbaV0gPVxuICAgICAgICAoY2hpbGQucHJvcHMgJiYgY2hpbGQucHJvcHMuaGFzaEtleSkgfHwgYHN0ZXAke2kgKyAxfWA7XG4gICAgICBzdGF0ZS5oYXNoS2V5c1tzdGF0ZS5oYXNoS2V5c1tpXV0gPSBpO1xuICAgIH0pO1xuXG4gICAgLy8gU2V0IGFjdGl2ZVN0ZXAgdG8gaW5pdGlhbFN0ZXAgaWYgZXhpc3RzXG4gICAgY29uc3QgX2luaXRpYWxTdGVwID0gaW5pdGlhbFN0ZXAgLSAxO1xuICAgIGlmIChfaW5pdGlhbFN0ZXAgJiYgY2hpbGRyZW5bX2luaXRpYWxTdGVwXSkge1xuICAgICAgc3RhdGUuYWN0aXZlU3RlcCA9IF9pbml0aWFsU3RlcDtcbiAgICB9XG5cbiAgICAvLyBTZXQgYWN0aXZlU3RlcCBmcm9tIGhhc2ggLSB0cnVtcHMgaW5pdGlhbFN0ZXBcbiAgICBpZiAoaXNIYXNoRW5hYmxlZCAmJiBoYXNoICYmIHN0YXRlLmhhc2hLZXlzW2hhc2hdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIFJlZmVyZW5jZXMgaGFzaEtleVxuICAgICAgc3RhdGUuYWN0aXZlU3RlcCA9IHN0YXRlLmhhc2hLZXlzW2hhc2hdO1xuICAgIH1cblxuICAgIC8vIEdpdmUgaW5pdGlhbCBzdGVwIGFuIGludHJvIGNsYXNzXG4gICAgaWYgKHRyYW5zaXRpb25zKSB7XG4gICAgICBzdGF0ZS5jbGFzc2VzW3N0YXRlLmFjdGl2ZVN0ZXBdID0gdHJhbnNpdGlvbnMuaW50cm8gfHwgJyc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgLyoqIEdvIHRvIGZpcnN0IHN0ZXAgKi9cbiAgZmlyc3RTdGVwKCk6IHZvaWQge1xuICAgIHRoaXMuZ29Ub1N0ZXAoMSk7XG4gIH1cblxuICAvKiogR28gdG8gbGFzdCBzdGVwICovXG4gIGxhc3RTdGVwKCk6IHZvaWQge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHM7XG4gICAgdGhpcy5nb1RvU3RlcChjaGlsZHJlbi5sZW5ndGgpO1xuICB9XG5cbiAgLyoqIE5leHQgU3RlcCAqL1xuICBuZXh0U3RlcCgpOiB2b2lkIHtcbiAgICBjb25zdCB7IGFjdGl2ZVN0ZXAgfSA9IHRoaXMuc3RhdGU7XG4gICAgdGhpcy5zZXRBY3RpdmVTdGVwKGFjdGl2ZVN0ZXAgKyAxKTtcbiAgfVxuXG4gIC8qKiBQcmV2aW91cyBTdGVwICovXG4gIHByZXZpb3VzU3RlcCgpOiB2b2lkIHtcbiAgICBjb25zdCB7IGFjdGl2ZVN0ZXAgfSA9IHRoaXMuc3RhdGU7XG4gICAgdGhpcy5zZXRBY3RpdmVTdGVwKGFjdGl2ZVN0ZXAgLSAxKTtcbiAgfVxuXG4gIC8qKiBHbyB0byBzdGVwIGluZGV4ICovXG4gIGdvVG9TdGVwKHN0ZXA6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuc2V0QWN0aXZlU3RlcChzdGVwIC0gMSk7XG4gIH1cblxuICB1cGRhdGVIYXNoKGFjdGl2ZVN0ZXA6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHsgaGFzaEtleXMgfSA9IHRoaXMuc3RhdGU7XG4gICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBgJHtoYXNoS2V5c1thY3RpdmVTdGVwXX1gO1xuICB9XG5cbiAgLyoqIFJlbmRlciAqL1xuICByZW5kZXIoKTogSlNYLkVsZW1lbnQge1xuICAgIGNvbnN0IHsgYWN0aXZlU3RlcCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IGNoaWxkcmVuLCBjbGFzc05hbWUsIGlzTGF6eU1vdW50LCBuYXYgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBwcm9wczogU3RlcFdpemFyZENoaWxkUHJvcHMgPSB7XG4gICAgICBjdXJyZW50U3RlcDogYWN0aXZlU3RlcCArIDEsXG4gICAgICB0b3RhbFN0ZXBzOiBjaGlsZHJlbi5sZW5ndGgsXG4gICAgICAvKiogRnVuY3Rpb25zICovXG4gICAgICBuZXh0U3RlcDogdGhpcy5uZXh0U3RlcCxcbiAgICAgIHByZXZpb3VzU3RlcDogdGhpcy5wcmV2aW91c1N0ZXAsXG4gICAgICBnb1RvU3RlcDogdGhpcy5nb1RvU3RlcCxcbiAgICAgIGZpcnN0U3RlcDogdGhpcy5maXJzdFN0ZXAsXG4gICAgICBsYXN0U3RlcDogdGhpcy5sYXN0U3RlcCxcbiAgICAgIGlzQWN0aXZlOiBmYWxzZSxcbiAgICAgIHRyYW5zaXRpb25zOiAnJyxcbiAgICB9O1xuXG4gICAgY29uc3QgeyBjbGFzc2VzIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IGNoaWxkcmVuV2l0aFByb3BzID0gUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCAoY2hpbGQsIGkpID0+IHtcbiAgICAgIHByb3BzLmlzQWN0aXZlID0gaSA9PT0gYWN0aXZlU3RlcDtcbiAgICAgIHByb3BzLnRyYW5zaXRpb25zID0gY2xhc3Nlc1tpXTtcblxuICAgICAgLy8gTm90IExhenkgTW91bnQgfHwgaXNMYXp5TW91bnQgJiYgaXNBY3RpdmVcbiAgICAgIGlmICghaXNMYXp5TW91bnQgfHwgKGlzTGF6eU1vdW50ICYmIHByb3BzLmlzQWN0aXZlKSkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxTdGVwXG4gICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvanN4LXByb3BzLW5vLXNwcmVhZGluZyAqL1xuICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtpc1JlYWN0Q29tcG9uZW50KGNoaWxkKSA/IFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgcHJvcHMpIDogY2hpbGR9XG4gICAgICAgICAgPC9TdGVwPlxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9KTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfT5cbiAgICAgICAge25hdiAmJiBSZWFjdC5jbG9uZUVsZW1lbnQobmF2LCBwcm9wcyl9XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXNbJ3N0ZXAtd3JhcHBlciddfT57Y2hpbGRyZW5XaXRoUHJvcHN9PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBTdGVwOiBGQzxTdGVwV2l6YXJkQ2hpbGRQcm9wcz4gPSAoe1xuICBjaGlsZHJlbixcbiAgaXNBY3RpdmUgPSBmYWxzZSxcbiAgdHJhbnNpdGlvbnMgPSAnJyxcbn0pID0+IChcbiAgPGRpdlxuICAgIGNsYXNzTmFtZT17YCR7c3R5bGVzLnN0ZXB9ICR7dHJhbnNpdGlvbnN9ICR7XG4gICAgICBpc0FjdGl2ZSA/IHN0eWxlcy5hY3RpdmUgOiAnJ1xuICAgIH1gLnRyaW0oKX1cbiAgPlxuICAgIHtjaGlsZHJlbn1cbiAgPC9kaXY+XG4pO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2ssIEZDIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgY3NzbWVtIGZyb20gJ2Nzc21lbSc7XG5pbXBvcnQgeyB1c2VJbnRsIH0gZnJvbSAncmVhY3QtaW50bCc7XG5pbXBvcnQgeyBTdGVwV2l6YXJkQ2hpbGRQcm9wcyB9IGZyb20gJ3JlYWN0LXN0ZXAtd2l6YXJkJztcbmltcG9ydCB7IGJyb3dzZXIgfSBmcm9tICd3ZWJleHRlbnNpb24tcG9seWZpbGwtdHMnO1xuXG5pbXBvcnQgeyBCUkFORCwgVkVSU0lPTiB9IGZyb20gJ0Bjb25zdGFudHMvY29uc3RhbnRzJztcbmltcG9ydCB7IGZpbGVzIH0gZnJvbSAnQGNvbnN0YW50cy9maWxlcyc7XG5pbXBvcnQgeyBTdG9yYWdlIH0gZnJvbSAnQGNvbnN0YW50cy9zdG9yYWdlJztcblxuaW1wb3J0IHVzZUZ1bm5lbCBmcm9tICdAaG9va3MvdXNlRnVubmVsJztcblxuaW1wb3J0IEJ1dHRvbiwgeyBTSVpFLCBUWVBFIH0gZnJvbSAnY29tcG9uZW50cy9CdXR0b24nO1xuXG5pbXBvcnQgTGFuZ3VhZ2VTd2l0Y2hlciBmcm9tICdAY29tcG9uZW50cy9MYW5ndWFnZVN3aXRjaGVyL0xhbmd1YWdlU3dpdGNoZXInO1xuaW1wb3J0IExvZ28gZnJvbSAnQGNvbXBvbmVudHMvTG9nby9Mb2dvJztcbmltcG9ydCBTdGVwIGZyb20gJ0Bjb21wb25lbnRzL1N0ZXAvU3RlcCc7XG5pbXBvcnQgVGl0bGUgZnJvbSAnQGNvbXBvbmVudHMvVGl0bGUvVGl0bGUnO1xuXG5pbXBvcnQgeyBnZXRGcm9tU3RvcmFnZSB9IGZyb20gJ0BoZWxwZXJzL3N0b3JhZ2UnO1xuaW1wb3J0IHsgZ2V0VmVyc2lvbiwgbm9vcCB9IGZyb20gJ0BoZWxwZXJzL3V0aWxzJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL1dlbGNvbWVTdGVwLmNzcyc7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmNvbnN0IG5hbWUgPSAnd2VsY29tZSc7XG5cbmNvbnN0IFdlbGNvbWVTdGVwOiBGQzxQYXJ0aWFsPFN0ZXBXaXphcmRDaGlsZFByb3BzPj4gPSAoe1xuICBpc0FjdGl2ZSxcbiAgbmV4dFN0ZXAgPSBub29wLFxufSkgPT4ge1xuICBjb25zdCBpbnRsID0gdXNlSW50bCgpO1xuXG4gIGNvbnN0IHsgc2VuZEV2ZW50IH0gPSB1c2VGdW5uZWwoZmFsc2UpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCB1aWQgPSBhd2FpdCBnZXRGcm9tU3RvcmFnZShTdG9yYWdlLlVJRCk7XG4gICAgICAgIGF3YWl0IHNlbmRFdmVudCgnc2hvdycsIGAke25hbWV9X3N0YXJ0YCwge1xuICAgICAgICAgIGRhdGV0aW1lOiBEYXRlLm5vdygpLFxuICAgICAgICAgIGV4dGVuc2lvbl9icmFuZDogQlJBTkQsXG4gICAgICAgICAgZXh0ZW5zaW9uX3ZlcnNpb246IGdldFZlcnNpb24oKSxcbiAgICAgICAgICB1aWQsXG4gICAgICAgICAgdXJsOiB3aW5kb3cubG9jYXRpb24uaHJlZixcbiAgICAgICAgICB2ZXJzaW9uOiBWRVJTSU9OLFxuICAgICAgICB9KTtcbiAgICAgIH0pKCk7XG4gICAgfVxuICB9LCBbaXNBY3RpdmUsIHNlbmRFdmVudF0pO1xuXG4gIGNvbnN0IGhhbmRsZUJ1dHRvbk5leHRTdGVwQ2xpY2sgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdWlkID0gYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoU3RvcmFnZS5VSUQpO1xuICAgIGF3YWl0IHNlbmRFdmVudCgnY2xpY2snLCBgJHtuYW1lfV9zdGFydGAsIHtcbiAgICAgIGRhdGV0aW1lOiBEYXRlLm5vdygpLFxuICAgICAgZXh0ZW5zaW9uX2JyYW5kOiBCUkFORCxcbiAgICAgIGV4dGVuc2lvbl92ZXJzaW9uOiBnZXRWZXJzaW9uKCksXG4gICAgICB1aWQsXG4gICAgICB1cmw6IHdpbmRvdy5sb2NhdGlvbi5ocmVmLFxuICAgICAgdmVyc2lvbjogVkVSU0lPTixcbiAgICB9KTtcbiAgICBuZXh0U3RlcCgpO1xuICB9LCBbbmV4dFN0ZXAsIHNlbmRFdmVudF0pO1xuXG4gIHJldHVybiAoXG4gICAgPFN0ZXBcbiAgICAgIGNsYXNzTmFtZT17ZW0oJ3dlbGNvbWUnKSgpfVxuICAgICAgc3R5bGU9e3tcbiAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7YnJvd3Nlci5ydW50aW1lLmdldFVSTChcbiAgICAgICAgICBmaWxlcy5pbWFnZXMuQkdfV0VMQ09NRV9TVEVQXG4gICAgICAgICl9KWAsXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtlbSgnbGFuZ3VhZ2VTd2l0Y2hlcicpKCl9PlxuICAgICAgICA8TGFuZ3VhZ2VTd2l0Y2hlciAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8TG9nbyBjbGFzc05hbWU9e2VtKCdsb2dvJykoKX0gaGVpZ2h0PXs1Nn0gc2l6ZT1cImxcIiAvPlxuICAgICAgPFRpdGxlIGNsYXNzTmFtZT17ZW0oJ3RpdGxlJykoKX0gc2l6ZT1cImxcIj5cbiAgICAgICAge2ludGwuZm9ybWF0TWVzc2FnZSh7IGlkOiAnd2VsY29tZS50aXRsZScgfSl9XG4gICAgICA8L1RpdGxlPlxuICAgICAgPHAgY2xhc3NOYW1lPXtlbSgndGV4dCcpKCl9PlxuICAgICAgICB7aW50bC5mb3JtYXRNZXNzYWdlKHsgaWQ6ICd3ZWxjb21lLnRleHQnIH0pfVxuICAgICAgPC9wPlxuICAgICAgPEJ1dHRvblxuICAgICAgICBjbGFzc05hbWU9e2VtKCdidXR0b24nKSgpfVxuICAgICAgICBvbkNsaWNrPXtoYW5kbGVCdXR0b25OZXh0U3RlcENsaWNrfVxuICAgICAgICBzaXplPXtTSVpFLk19XG4gICAgICAgIHR5cGU9e1RZUEUuQlVUVE9OfVxuICAgICAgPlxuICAgICAgICB7aW50bC5mb3JtYXRNZXNzYWdlKHsgaWQ6ICd3ZWxjb21lLmJ1dHRvbicgfSl9XG4gICAgICA8L0J1dHRvbj5cbiAgICA8L1N0ZXA+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBXZWxjb21lU3RlcDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIEZDIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgY3NzbWVtIGZyb20gJ2Nzc21lbSc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5pbXBvcnQgeyBicm93c2VyIH0gZnJvbSAnd2ViZXh0ZW5zaW9uLXBvbHlmaWxsLXRzJztcblxuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IGNvbW1hbmRzIGZyb20gJ0Bjb25zdGFudHMvY29tbWFuZHMnO1xuXG5pbXBvcnQgVW5Nb3VudENvbnRleHQgZnJvbSAnQGhlbHBlcnMvVW5Nb3VudENvbnRleHQnO1xuXG5pbXBvcnQgJ0Bjc3MvZm9udHMuY3NzJztcblxuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IEF1dGhTdGVwIGZyb20gJy4vY29tcG9uZW50cy9BdXRoU3RlcC9BdXRoU3RlcCc7XG5pbXBvcnQgRWNvbm9teVN0ZXAgZnJvbSAnLi9jb21wb25lbnRzL0Vjb25vbXlTdGVwL0Vjb25vbXlTdGVwJztcbmltcG9ydCBJbnN0cnVjdGlvbnNTdGVwIGZyb20gJy4vY29tcG9uZW50cy9JbnN0cnVjdGlvbnNTdGVwL0luc3RydWN0aW9uc1N0ZXAnO1xuaW1wb3J0IFN0ZXBXaXphcmQgZnJvbSAnLi9jb21wb25lbnRzL1N0ZXBXaXphcmQvU3RlcFdpemFyZCc7XG5pbXBvcnQgV2VsY29tZVN0ZXAgZnJvbSAnLi9jb21wb25lbnRzL1dlbGNvbWVTdGVwL1dlbGNvbWVTdGVwJztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9PbkJvYXJkaW5nLmNzcyc7XG5cbmNvbnN0IGVtID0gY3NzbWVtKHN0eWxlcyk7XG5cbmNvbnN0IHRyYW5zaXRpb25DbGFzc01hcDogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHtcbiAgZW50ZXJlZDogZW0oJ2VudGVyZWQnKSgpLFxuICBleGl0aW5nOiBlbSgnZXhpdGluZycpKCksXG4gIGV4aXRlZDogZW0oJ2V4aXRlZCcpKCksXG59O1xuXG5jb25zdCBBTklNQVRJT05fVElNRU9VVCA9IHtcbiAgZW50ZXI6IDEwMCxcbiAgZXhpdDogNDAwLFxufTtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgaXNMb2dnZWQ6IGJvb2xlYW47XG4gIHVuTW91bnQoKTogdm9pZDtcbn1cblxuY29uc3QgT25Cb2FyZGluZzogRkM8UHJvcHM+ID0gKHsgaXNMb2dnZWQsIHVuTW91bnQgfSkgPT4ge1xuICB1c2VFZmZlY3QoXG4gICAgKCkgPT4gKCkgPT4ge1xuICAgICAgYnJvd3Nlci5ydW50aW1lLnNlbmRNZXNzYWdlKHsgY29tbWFuZDogY29tbWFuZHMuQ0xPU0VfT05CT0FSRElORyB9KTtcbiAgICB9LFxuICAgIFtdXG4gICk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVEb2N1bWVudEtleVByZXNzID0gKGV2dDogS2V5Ym9hcmRFdmVudCB8IEV2ZW50KSA9PlxuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgLy8g0YPQsdC40YDQsNC10YIg0L/RgNC+0LHQu9C10LzRiyDRgSDQuNC90L/Rg9GC0LDQvNC4INC4IHNoYWRvdyBkb21cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIGhhbmRsZURvY3VtZW50S2V5UHJlc3MsIHtcbiAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgfSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZURvY3VtZW50S2V5UHJlc3MsIHtcbiAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgfSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBoYW5kbGVEb2N1bWVudEtleVByZXNzLCB7XG4gICAgICBjYXB0dXJlOiB0cnVlLFxuICAgIH0pO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgaGFuZGxlRG9jdW1lbnRLZXlQcmVzcywge1xuICAgICAgY2FwdHVyZTogdHJ1ZSxcbiAgICB9KTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIGhhbmRsZURvY3VtZW50S2V5UHJlc3MsIHtcbiAgICAgICAgY2FwdHVyZTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZURvY3VtZW50S2V5UHJlc3MsIHtcbiAgICAgICAgY2FwdHVyZTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBoYW5kbGVEb2N1bWVudEtleVByZXNzLCB7XG4gICAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgICB9KTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2lucHV0JywgaGFuZGxlRG9jdW1lbnRLZXlQcmVzcywge1xuICAgICAgICBjYXB0dXJlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiAoXG4gICAgPFVuTW91bnRDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt1bk1vdW50fT5cbiAgICAgIDxUcmFuc2l0aW9uIGFwcGVhciBpbiB0aW1lb3V0PXtBTklNQVRJT05fVElNRU9VVH0gdW5tb3VudE9uRXhpdD5cbiAgICAgICAgeyhzdGF0ZSkgPT4gKFxuICAgICAgICAgIDxzZWN0aW9uXG4gICAgICAgICAgICBjbGFzc05hbWU9e2VtKCdvbkJvYXJkaW5nJykobnVsbCwgdHJhbnNpdGlvbkNsYXNzTWFwW3N0YXRlXSl9XG4gICAgICAgICAgICBzdHlsZT17eyBkaXNwbGF5OiAnbm9uZScgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7aXNMb2dnZWQgPyAoXG4gICAgICAgICAgICAgIDxTdGVwV2l6YXJkPlxuICAgICAgICAgICAgICAgIDxXZWxjb21lU3RlcCAvPlxuICAgICAgICAgICAgICAgIDxFY29ub215U3RlcCAvPlxuICAgICAgICAgICAgICAgIDxJbnN0cnVjdGlvbnNTdGVwIC8+XG4gICAgICAgICAgICAgIDwvU3RlcFdpemFyZD5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxTdGVwV2l6YXJkPlxuICAgICAgICAgICAgICAgIDxXZWxjb21lU3RlcCAvPlxuICAgICAgICAgICAgICAgIDxFY29ub215U3RlcCAvPlxuICAgICAgICAgICAgICAgIDxBdXRoU3RlcCAvPlxuICAgICAgICAgICAgICAgIDxJbnN0cnVjdGlvbnNTdGVwIC8+XG4gICAgICAgICAgICAgIDwvU3RlcFdpemFyZD5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICApfVxuICAgICAgPC9UcmFuc2l0aW9uPlxuICAgIDwvVW5Nb3VudENvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBPbkJvYXJkaW5nO1xuIiwiaW1wb3J0IHsgTGFuZ3VhZ2UgfSBmcm9tICdAY29uc3RhbnRzL2xhbmd1YWdlcyc7XG5cbmltcG9ydCBBdXRoTWVzc2FnZXMgZnJvbSAnQGNvbXBvbmVudHMvQXV0aC9tZXNzYWdlcyc7XG5pbXBvcnQgTGFuZ3VhZ2VNZXNzYWdlcyBmcm9tICdAY29tcG9uZW50cy9MYW5ndWFnZVN3aXRjaGVyL21lc3NhZ2VzJztcbmltcG9ydCBTaWduSW5NZXNzYWdlcyBmcm9tICdAY29tcG9uZW50cy9TaWduSW4vbWVzc2FnZXMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIFtMYW5ndWFnZS5FTl06IHtcbiAgICBsYW5nOiAnZW4nLFxuICAgIG1lc3NhZ2VzOiB7XG4gICAgICAnd2VsY29tZS50aXRsZSc6ICdUaGFuayB5b3UgZm9yIGluc3RhbGxpbmchJyxcbiAgICAgICd3ZWxjb21lLnRleHQnOiAnRWFybiBtb3JlIGJ5IGJvb2tpbmcgaG90ZWxzIG9uIFJhdGVIYXdrIScsXG4gICAgICAnd2VsY29tZS5idXR0b24nOiAnQmVnaW4nLFxuICAgICAgJ2Vjb25vbXkudGl0bGUnOiAnSG93IHRoZSBSYXRlSGF3ayBleHRlbnNpb24gaGVscHMgeW91IHRvIGVhcm4gbW9yZScsXG4gICAgICAnZWNvbm9teS5saXN0LmZpcnN0JzpcbiAgICAgICAgJ1lvdSBhcmUgbG9va2luZyBmb3IgYSBob3RlbCBpbiBhbnkgcGFydCBvZiB0aGUgd29ybGQnLFxuICAgICAgJ2Vjb25vbXkubGlzdC5zZWNvbmQnOiAnV2UgY2hlY2sgb3VyIHByaWNlIGZvciBpdCcsXG4gICAgICAnZWNvbm9teS5saXN0LnRoaXJkJzpcbiAgICAgICAgJ0lmIHRoZSBwcmljZSBvbiBSYXRlSGF3ayBpcyBsb3dlciwgd2Ugd2lsbCBzZW5kIHlvdSBhIG5vdGlmaWNhdGlvbi4gWW91IHdpbGwgYmUganVzdCBvbmUgY2xpY2sgYXdheSBmcm9tIGEgYmFyZ2FpbiBwcmljZSEnLFxuICAgICAgJ2Vjb25vbXkuc2tpcEJ1dHRvbic6ICdTa2lwJyxcbiAgICAgICdlY29ub215Lm5leHRCdXR0b24nOiAnT0snLFxuICAgICAgJ2ZlYXR1cmVzLnRpdGxlJzogJ1doYXQgeW91IGdldCcsXG4gICAgICAnZmVhdHVyZXMubGlzdC5maXJzdCc6XG4gICAgICAgICdUaGUgb3Bwb3J0dW5pdHkgdG8gYm9vayBhIGhvdGVsIGF0IGEgbW9yZSBhdHRyYWN0aXZlIHByaWNlJyxcbiAgICAgICdmZWF0dXJlcy5saXN0LnNlY29uZCc6XG4gICAgICAgICdCb251c2VzOiBhZGRpdGlvbmFsIHByb21vIGNvZGVzIGFuZCBsb3lhbHR5IHBvaW50cycsXG4gICAgICAnZmVhdHVyZXMubGlzdC50aGlyZCc6XG4gICAgICAgICdBIHF1aWNrIHRvb2wgdG8gY29tcGFyZSBwcmljZXMgd2l0aCBSYXRlSGF3ayByYXRlcycsXG4gICAgICAnZmVhdHVyZXMuc2tpcEJ1dHRvbic6ICdTa2lwJyxcbiAgICAgICdmZWF0dXJlcy5uZXh0QnV0dG9uJzogJ0dldCcsXG4gICAgICAnaW5zdHJ1Y3Rpb25zLnRpdGxlJzogJ0hvdyBpdCB3b3JrcycsXG4gICAgICAnaW5zdHJ1Y3Rpb25zLnN1YnRpdGxlJzogJ0hlcmXigJlzIGFuIGV4YW1wbGUgdG8gbGVhcm4gZnJvbSEnLFxuICAgICAgJ2luc3RydWN0aW9ucy5saXN0LmZpcnN0JzpcbiAgICAgICAgJ1dlIHdpbGwgbm93IHRyYW5zZmVyIHlvdSB0byBhIHRoaXJkLXBhcnR5IGhvdGVsIGJvb2tpbmcgc2l0ZScsXG4gICAgICAnaW5zdHJ1Y3Rpb25zLmxpc3Quc2Vjb25kJzogJ0xvb2sgYXQgdGhlIGhvdGVsIHByaWNlIG9uIHRoYXQgc2l0ZScsXG4gICAgICAnaW5zdHJ1Y3Rpb25zLmxpc3QudGhpcmQnOlxuICAgICAgICAnUmVhZCB0aGUgbm90aWZpY2F0aW9uIG9mIHRoZSBwcmljZSBvbiBSYXRlSGF3aycsXG4gICAgICAnaW5zdHJ1Y3Rpb25zLmxpc3QuZm91cnRoJzogJ0NsaWNrIHRoZSBidXR0b24gaW4gdGhlIG5vdGlmaWNhdGlvbicsXG4gICAgICAnaW5zdHJ1Y3Rpb25zLmxpc3QuZmlmdGgnOlxuICAgICAgICAnU2VlIGp1c3QgaG93IG11Y2ggY2hlYXBlciB0aGUgc2FtZSByb29tIGlzIG9uIFJhdGVIYXdrJyxcbiAgICAgICdpbnN0cnVjdGlvbnMuZXhhbXBsZUJ1dHRvbic6ICdXYXRjaCBhbiBleGFtcGxlJyxcbiAgICAgICdpbnN0cnVjdGlvbnMuc2tpcEJ1dHRvbic6ICdTa2lwJyxcbiAgICAgIC4uLkF1dGhNZXNzYWdlc1tMYW5ndWFnZS5FTl0ubWVzc2FnZXMsXG4gICAgICAuLi5MYW5ndWFnZU1lc3NhZ2VzW0xhbmd1YWdlLkVOXS5tZXNzYWdlcyxcbiAgICAgIC4uLlNpZ25Jbk1lc3NhZ2VzW0xhbmd1YWdlLkVOXS5tZXNzYWdlcyxcbiAgICB9LFxuICB9LFxuICBbTGFuZ3VhZ2UuUlVdOiB7XG4gICAgbGFuZzogJ3J1JyxcbiAgICBtZXNzYWdlczoge1xuICAgICAgJ3dlbGNvbWUudGl0bGUnOiAn0KHQv9Cw0YHQuNCx0L4g0LfQsCDRg9GB0YLQsNC90L7QstC60YMhJyxcbiAgICAgICd3ZWxjb21lLnRleHQnOiAn0JfQsNGA0LDQsdCw0YLRi9Cy0LDQudGC0LUg0LHQvtC70YzRiNC1LCDQsdGA0L7QvdC40YDRg9GPINC+0YLQtdC70Lgg0L3QsCBSYXRlSGF3ayEnLFxuICAgICAgJ3dlbGNvbWUuYnV0dG9uJzogJ9Cd0LDRh9Cw0YLRjCcsXG4gICAgICAnZWNvbm9teS50aXRsZSc6ICfQmtCw0Log0YDQsNGB0YjQuNGA0LXQvdC40LUgUmF0ZUhhd2sg0L/QvtC80L7Qs9Cw0LXRgiDQt9Cw0YDQsNCx0L7RgtCw0YLRjCDQsdC+0LvRjNGI0LUnLFxuICAgICAgJ2Vjb25vbXkubGlzdC5maXJzdCc6ICfQktGLINC40YnQtdGC0LUg0L7RgtC10LvRjCDQs9C00LUg0YPQs9C+0LTQvdC+JyxcbiAgICAgICdlY29ub215Lmxpc3Quc2Vjb25kJzogJ9Cc0Ysg0L/RgNC+0LLQtdGA0Y/QtdC8LCDRgdC60L7Qu9GM0LrQviDQvtC9INGB0YLQvtC40YIg0YMg0L3QsNGBJyxcbiAgICAgICdlY29ub215Lmxpc3QudGhpcmQnOlxuICAgICAgICAn0JXRgdC70Lgg0L3QsCBSYXRlSGF3ayDRhtC10L3QsCDQvdC40LbQtSwg0LzRiyDQv9GA0LjRiNC70ZHQvCDRg9Cy0LXQtNC+0LzQu9C10L3QuNC1LlxcbtCe0YIg0LLRi9Cz0L7QtNC90L7QuSDRhtC10L3RiyDQstCw0YEg0LHRg9C00LXRgiDQvtGC0LTQtdC70Y/RgtGMINCy0YHQtdCz0L4g0L7QtNC40L0g0LrQu9C40LohJyxcbiAgICAgICdlY29ub215LnNraXBCdXR0b24nOiAn0J/RgNC+0L/Rg9GB0YLQuNGC0YwnLFxuICAgICAgJ2Vjb25vbXkubmV4dEJ1dHRvbic6ICdPaycsXG4gICAgICAnZmVhdHVyZXMudGl0bGUnOiAn0KfRgtC+INCy0Ysg0L/QvtC70YPRh9C40YLQtScsXG4gICAgICAnZmVhdHVyZXMubGlzdC5maXJzdCc6XG4gICAgICAgICfQktC+0LfQvNC+0LbQvdC+0YHRgtGMINC30LDQsdGA0L7QvdC40YDQvtCy0LDRgtGMINC+0YLQtdC70Ywg0L/QviDQsdC+0LvQtdC1INCy0YvQs9C+0LTQvdC+0Lkg0YbQtdC90LUnLFxuICAgICAgJ2ZlYXR1cmVzLmxpc3Quc2Vjb25kJzpcbiAgICAgICAgJ9CR0L7QvdGD0YHRizog0LTQvtC/0L7Qu9C90LjRgtC10LvRjNC90YvQtSDQv9GA0L7QvNC+0LrQvtC00Ysg0Lgg0LHQsNC70LvRiyDQu9C+0Y/Qu9GM0L3QvtGB0YLQuCcsXG4gICAgICAnZmVhdHVyZXMubGlzdC50aGlyZCc6ICfQkdGL0YHRgtGA0YvQuSDRgdC/0L7RgdC+0LEg0YHRgNCw0LLQvdC40YLRjCDRhtC10L3RiyDRgSDRgtCw0YDQuNGE0LDQvNC4IFJhdGVIYXdrJyxcbiAgICAgICdmZWF0dXJlcy5za2lwQnV0dG9uJzogJ9Cf0YDQvtC/0YPRgdGC0LjRgtGMJyxcbiAgICAgICdmZWF0dXJlcy5uZXh0QnV0dG9uJzogJ9Cf0L7Qu9GD0YfQuNGC0YwnLFxuICAgICAgJ2luc3RydWN0aW9ucy50aXRsZSc6ICfQmtCw0Log0Y3RgtC+INGA0LDQsdC+0YLQsNC10YInLFxuICAgICAgJ2luc3RydWN0aW9ucy5zdWJ0aXRsZSc6ICfQoNCw0LfQsdC10YDRkdC8INC90LAg0L/RgNC40LzQtdGA0LUhJyxcbiAgICAgICdpbnN0cnVjdGlvbnMubGlzdC5maXJzdCc6XG4gICAgICAgICfQodC10LnRh9Cw0YEg0L/QtdGA0LXQstC10LTRkdC8INCy0LDRgSDQvdCwINGB0YLQvtGA0L7QvdC90LjQuSDRgdCw0LnRgiDQsdGA0L7QvdC40YDQvtCy0LDQvdC40Y8g0L7RgtC10LvQtdC5JyxcbiAgICAgICdpbnN0cnVjdGlvbnMubGlzdC5zZWNvbmQnOiAn0J/QvtGB0LzQvtGC0YDQuNGC0LUg0L3QsCDRgdGC0L7QuNC80L7RgdGC0Ywg0L7RgtC10LvRjyDQvdCwINGN0YLQvtC8INGB0LDQudGC0LUnLFxuICAgICAgJ2luc3RydWN0aW9ucy5saXN0LnRoaXJkJzogJ9Cf0YDQvtGH0LjRgtCw0LnRgtC1INGD0LLQtdC00L7QvNC70LXQvdC40LUg0YEg0YLQsNGA0LjRhNC+0Lwg0L3QsCBSYXRlSGF3aycsXG4gICAgICAnaW5zdHJ1Y3Rpb25zLmxpc3QuZm91cnRoJzogJ9Cd0LDQttC80LjRgtC1INC90LAg0LrQvdC+0L/QutGDINC40Lcg0YPQstC10LTQvtC80LvQtdC90LjRjycsXG4gICAgICAnaW5zdHJ1Y3Rpb25zLmxpc3QuZmlmdGgnOlxuICAgICAgICAn0KHRgNCw0LLQvdC40YLQtSwg0L3QsNGB0LrQvtC70YzQutC+INGN0YLQvtGCINC90L7QvNC10YAg0LTQtdGI0LXQstC70LUg0L3QsCBSYXRlSGF3aycsXG4gICAgICAnaW5zdHJ1Y3Rpb25zLmV4YW1wbGVCdXR0b24nOiAn0J/QvtGB0LzQvtGC0YDQtdGC0Ywg0L/RgNC40LzQtdGAJyxcbiAgICAgICdpbnN0cnVjdGlvbnMuc2tpcEJ1dHRvbic6ICfQn9GA0L7Qv9GD0YHRgtC40YLRjCcsXG4gICAgICAuLi5BdXRoTWVzc2FnZXNbTGFuZ3VhZ2UuUlVdLm1lc3NhZ2VzLFxuICAgICAgLi4uTGFuZ3VhZ2VNZXNzYWdlc1tMYW5ndWFnZS5SVV0ubWVzc2FnZXMsXG4gICAgICAuLi5TaWduSW5NZXNzYWdlc1tMYW5ndWFnZS5SVV0ubWVzc2FnZXMsXG4gICAgfSxcbiAgfSxcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgSW50bFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtaW50bCc7XG5pbXBvcnQgU2hhZG93IGZyb20gJ3JlYWN0LXNoYWRvdyc7XG5pbXBvcnQgeyBicm93c2VyIH0gZnJvbSAnd2ViZXh0ZW5zaW9uLXBvbHlmaWxsLXRzJztcblxuaW1wb3J0IHsgUk9PVF9JRCB9IGZyb20gJ0Bjb25zdGFudHMvY29uc3RhbnRzJztcbmltcG9ydCB7IGZpbGVzIH0gZnJvbSAnQGNvbnN0YW50cy9maWxlcyc7XG5pbXBvcnQgeyBMYW5ndWFnZSB9IGZyb20gJ0Bjb25zdGFudHMvbGFuZ3VhZ2VzJztcbmltcG9ydCB7IFN0b3JhZ2UgfSBmcm9tICdAY29uc3RhbnRzL3N0b3JhZ2UnO1xuXG5pbXBvcnQgT25Cb2FyZGluZyBmcm9tICdAY29tcG9uZW50cy9PbkJvYXJkaW5nL09uQm9hcmRpbmcnO1xuaW1wb3J0IFRoZW1lIGZyb20gJ0Bjb21wb25lbnRzL1RoZW1lL1RoZW1lJztcblxuaW1wb3J0IExhbmd1YWdlQ29udGV4dCBmcm9tICdAaGVscGVycy9MYW5ndWFnZUNvbnRleHQnO1xuaW1wb3J0IHsgaW5pdFNlbnRyeSB9IGZyb20gJ0BoZWxwZXJzL3NlbnRyeSc7XG5pbXBvcnQgeyBnZXRGcm9tU3RvcmFnZSB9IGZyb20gJ0BoZWxwZXJzL3N0b3JhZ2UnO1xuaW1wb3J0IHsgZ2V0Um9vdCB9IGZyb20gJ0BoZWxwZXJzL3V0aWxzJztcblxuaW1wb3J0IG1lc3NhZ2VzIGZyb20gJ0Bjb21wb25lbnRzL09uQm9hcmRpbmcvbWVzc2FnZXMnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICAgIGluaXRTZW50cnkoKTtcbiAgfSk7XG59XG5cbihhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHBlcnNpc3RlZExhbmd1YWdlID0gYXdhaXQgZ2V0RnJvbVN0b3JhZ2UoU3RvcmFnZS5MQU5HVUFHRSk7XG4gIGNvbnN0IHBhcnRuZXJzQXV0aEtleSA9IGF3YWl0IGdldEZyb21TdG9yYWdlKFN0b3JhZ2UuUEFSVE5FUlNfQVVUSF9LRVkpO1xuXG4gIGNvbnN0IHJvb3QgPSBnZXRSb290KFJPT1RfSUQpO1xuXG4gIGNvbnN0IHVuTW91bnQgPSBhc3luYyAoKSA9PiBSZWFjdERPTS51bm1vdW50Q29tcG9uZW50QXROb2RlKHJvb3QpO1xuXG4gIGNvbnN0IEFwcCA9ICgpID0+IHtcbiAgICBjb25zdCBbbGFuZ3VhZ2UsIHNldExhbmd1YWdlXSA9IHVzZVN0YXRlPExhbmd1YWdlPihwZXJzaXN0ZWRMYW5ndWFnZSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFNoYWRvdy5kaXY+XG4gICAgICAgIDxUaGVtZT5cbiAgICAgICAgICA8bGlua1xuICAgICAgICAgICAgaHJlZj17YnJvd3Nlci5ydW50aW1lLmdldFVSTChmaWxlcy5jc3MuT05CT0FSRElORyl9XG4gICAgICAgICAgICByZWw9XCJzdHlsZXNoZWV0XCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIDxJbnRsUHJvdmlkZXJcbiAgICAgICAgICAgIGxvY2FsZT17bGFuZ3VhZ2V9XG4gICAgICAgICAgICBtZXNzYWdlcz17XG4gICAgICAgICAgICAgIG1lc3NhZ2VzW2xhbmd1YWdlIGFzIExhbmd1YWdlLkVOIHwgTGFuZ3VhZ2UuUlVdPy5tZXNzYWdlcyA/P1xuICAgICAgICAgICAgICBtZXNzYWdlc1tMYW5ndWFnZS5FTl0ubWVzc2FnZXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8TGFuZ3VhZ2VDb250ZXh0LlByb3ZpZGVyXG4gICAgICAgICAgICAgIHZhbHVlPXt7XG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2UsXG4gICAgICAgICAgICAgICAgc2V0TGFuZ3VhZ2UsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxPbkJvYXJkaW5nXG4gICAgICAgICAgICAgICAgaXNMb2dnZWQ9e0Jvb2xlYW4ocGFydG5lcnNBdXRoS2V5KX1cbiAgICAgICAgICAgICAgICB1bk1vdW50PXt1bk1vdW50fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9MYW5ndWFnZUNvbnRleHQuUHJvdmlkZXI+XG4gICAgICAgICAgPC9JbnRsUHJvdmlkZXI+XG4gICAgICAgIDwvVGhlbWU+XG4gICAgICA8L1NoYWRvdy5kaXY+XG4gICAgKTtcbiAgfTtcblxuICBSZWFjdERPTS5yZW5kZXIoPEFwcCAvPiwgcm9vdCk7XG59KSgpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==