Okta.StorageBase=function(t,e){const s={},u=Okta.StorageMultiAccount(s);var a=Okta._okta;const r=a.partial,c=a.each,i=Okta.fn.base.keyToCamelCase,l=Okta.fn.base.orDefault,A=Okta.fn.promises.composeP,g={Session:{get:t.getSessionState,set:t.setSessionState},Persistent:{get:t.getPersistentState,set:t.setPersistentState,remove:t.removePersistentState},Tab:{get:t.getTabState,set:t.setTabState,update:t.updateTabState}};c(e,function(t){!function(a){var c=g[a.type];if(c){var n=a.name||i(a.key);let t=c.set,e=c.get;var o=c.update;t&&e&&(a.multiAccount&&(u.addMultiAccountMethods(c,n,a),t=u.makeMultiAccountKey(c.set),e=u.makeMultiAccountKey(c.get)),s["get"+n]=A(l(a.def),r(e,a.key,void 0)),s["set"+n]=r(t,a.key),s["clear"+n]=r(t,a.key,a.def),o&&(s["update"+n]=r(o,a.key)))}else Log.warn("StorageBase::not supported storage type: "+a.type)}(t)});const n=s.setAllowListedOktaAccounts;return s.setAllowListedOktaAccounts=function(t){return u.setAllowListedOktaAccounts(t),n&&n(t)},s.readMultiAccount=u.readMultiAccount,s.getCurrentAccountIndex=u.getCurrentAccountIndex,s.setCurrentAccountIndex=u.setCurrentAccountIndex,s.clearAccountData=u.clearAccountData,s.copyMultiAccountData=u.copyMultiAccountData,s.migrateToMultiAccount=u.migrateToMultiAccount,s.migrateToSingleAccount=u.migrateToSingleAccount,s};