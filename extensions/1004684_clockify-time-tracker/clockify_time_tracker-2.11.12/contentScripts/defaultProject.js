var DefaultProjectEnums={DEFAULT_PROJECTS:"defaultProjects",POMODORO_BREAK_DEFAULT_PROJECTS:"PomodoroBreakDefaultProjects",LAST_USED_PROJECT:"lastUsedProject"};class DefaultProject{constructor(t,{userId:e,workspaceId:s,forceTasks:a}){this.userId=e,this.workspaceId=s,this.forceTasks=a,this.project=t.project,this.enabled=t.enabled}get isLastUsed(){return this.project&&this.project.id===DefaultProjectEnums.LAST_USED_PROJECT}get apiEndpoint(){return localStorage.getItem("permanent_baseUrl")}get token(){return localStorage.getItem("token")}static async getStorage(t=!1){const e=t?DefaultProjectEnums.POMODORO_BREAK_DEFAULT_PROJECTS:DefaultProjectEnums.DEFAULT_PROJECTS,s=await localStorage.getItem("activeWorkspaceId"),a=await localStorage.getItem("userId"),r=await localStorage.getItem("workspaceSettings"),o=await localStorage.getItem(`permanent_${e}`),c=new UserWorkspaceStorage(e,{workspaceId:s,userId:a,ws:r,str:o});return{storage:c,defaultProject:c.defaultProject}}static async getProjectTaskFromDB(t=!1){const e={projectDB:null,taskDB:null,msg:"",msgId:null};if(await isNavigatorOffline())return e;const{storage:s,defaultProject:a}=await this.getStorage(t);if(!a)return e;if(!a.enabled||!a.project)return e;if(t&&a.project.id===DefaultProjectEnums.LAST_USED_PROJECT)return{projectDB:a.project,taskDB:null};const{projectDB:r,taskDB:o,msg:c,msgId:l}=await a._getProjectTaskFromDB();return c&&TimeEntry.doAlert&&localStorage.setItem("integrationAlert",c),{projectDB:r,taskDB:o,msg:c,msgId:l}}getProjectTaskIds(){return{projectId:this.project.id,taskId:this.project.selectedTask?this.project.selectedTask.id:null}}async _getProjectTask(t=!1){const{id:e,selectedTask:s}=this.project;if(e===DefaultProjectEnums.LAST_USED_PROJECT){const t=this.project.name.includes("task");let e,s=null,a=null;const r=await ProjectTaskService.getLastUsedProjectFromTimeEntries(t);return r.error||(e={project:r.data.project??r.data,task:r.data.task??null},e&&e.project&&(({projectDB:s,taskDB:a}=await ProjectTaskService.getProjectsByIds([e.project.id])),s&&!s.archived&&t&&e.task?.id&&(a=await ProjectTaskService.getTask(e.task.id),a&&(a.isDone="DONE"===a.status)))),{projectDB:s,taskDB:a}}{const t=s?[s.id]:null,{projectDB:a}=await ProjectTaskService.getProjectsByIds([e],t);let r=null;return a&&!a.archived&&s&&(r=await ProjectTaskService.getTask(s.id),r&&(r.isDone="DONE"===r.status)),{projectDB:a,taskDB:r}}}async _getProjectTaskFromDB(){if(await isNavigatorOffline())return{projectDB:null,taskDB:null,msg:null,msgId:null};let t=null,e=null;if(this.enabled){let{projectDB:s,taskDB:a}=await this._getProjectTask(this.forceTasks);if(s){if(s.archived)t=`${clockifyLocales.DEFAULT_PROJECT_ARCHIVED}. ${clockifyLocales.YOU_CAN_SET_A_NEW_ONE_IN_SETTINGS}.`,e="projectArchived",s=null;else{const s="lastUsedProject"===this.project.id&&this.project.name.includes("task");this.forceTasks&&s&&(a?a.isDone&&(a=null,t=`${clockifyLocales.DEFAULT_TASK_DONE}. ${clockifyLocales.YOU_CAN_SET_A_NEW_ONE_IN_SETTINGS}.`,e="taskDone"):(t=`${clockifyLocales.DEFAULT_TASK_DOES_NOT_EXIST}. ${clockifyLocales.YOU_CAN_SET_A_NEW_ONE_IN_SETTINGS}.`,e="taskDoesNotExist"))}return{projectDB:s,taskDB:a,msg:t,msgId:e}}t=`${clockifyLocales.DEFAULT_PROJECT_NOT_AVAILABLE} ${clockifyLocales.YOU_CAN_SET_A_NEW_ONE_IN_SETTINGS}`,e="projectDoesNotExist"}return{projectDB:null,taskDB:null,msg:t,msgId:e}}}