{"version":3,"file":"popup.bundle.js","mappings":"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","sources":["webpack://history-cleaner/./src/we.ts","webpack://history-cleaner/./src/OptionsInterface.ts","webpack://history-cleaner/./src/MessageInterface.ts","webpack://history-cleaner/./src/PermissionCheckbox.ts","webpack://history-cleaner/./src/i18n.ts","webpack://history-cleaner/./src/ff_popup.ts"],"sourcesContent":["export default \"browser\" in self ? browser : chrome;\n","import browser from \"./we\";\n/** Creates Options object */\nexport class Options {\n    /**\n     * Creates default options object, with overrides from optionsObj\n     * @param optionsObj Initial options object, likely from storage\n     */\n    constructor(optionsObj) {\n        this.behavior = \"disable\";\n        this.days = 0;\n        this.idleLength = 60;\n        this.timerInterval = 1440;\n        this.deleteMode = \"timer\";\n        this.notifications = false;\n        this.downloads = false;\n        this.icon = \"theme\";\n        // filterHistory = false\n        // filterList = [\"example.com\", \"example.org\"]\n        this.lastRun = browser.i18n.getMessage(\"lastRunNever\");\n        this.deleteCount = 0;\n        if (optionsObj === undefined) {\n            return;\n        }\n        const manifest_version = browser.runtime.getManifest().manifest_version;\n        if (typeof optionsObj.behavior === \"string\" && [\"disable\", \"days\", \"all\"].includes(optionsObj.behavior)) {\n            this.behavior = optionsObj.behavior;\n        }\n        else {\n            if (typeof optionsObj.days === \"number\" && optionsObj.days > 0) {\n                this.behavior = \"days\";\n            }\n        }\n        if (typeof optionsObj.days === \"number\" && optionsObj.days >= 0) {\n            this.days = optionsObj.days;\n        }\n        if (typeof optionsObj.idleLength === \"number\" && optionsObj.idleLength >= 15) {\n            this.idleLength = optionsObj.idleLength;\n        }\n        if (typeof optionsObj.timerInterval === \"number\" && optionsObj.timerInterval >= 1) {\n            this.timerInterval = optionsObj.timerInterval;\n        }\n        if (typeof optionsObj.deleteMode === \"string\" && [\"idle\", \"startup\", \"timer\"].includes(optionsObj.deleteMode)) {\n            this.deleteMode = optionsObj.deleteMode;\n        }\n        // if set to idle on manifest v3, switch to timer\n        if (manifest_version === 3 && this.deleteMode === \"idle\") {\n            this.deleteMode = \"timer\";\n        }\n        if (typeof optionsObj.notifications === \"boolean\") {\n            this.notifications = optionsObj.notifications;\n        }\n        if (typeof optionsObj.downloads === \"boolean\") {\n            this.downloads = optionsObj.downloads;\n        }\n        // if (typeof optionsObj.filterHistory === \"boolean\") {\n        //     this.filterHistory = optionsObj.filterHistory;\n        // }\n        // if (Array.isArray(optionsObj.filterList) && optionsObj.filterList.every(item => typeof item === \"string\")) {\n        //     this.filterList = optionsObj.filterList;\n        // }\n        if (typeof optionsObj.lastRun === \"string\") {\n            this.lastRun = optionsObj.lastRun;\n        }\n        if (typeof optionsObj.icon === \"string\") {\n            this.icon = optionsObj.icon;\n        }\n        if (manifest_version === 3 && this.icon === \"theme\") {\n            this.icon = \"icon_circle_gradient\";\n        }\n    }\n}\n","/** Possible states for a message */\nexport var MessageState;\n(function (MessageState) {\n    MessageState[MessageState[\"INVALID\"] = -1] = \"INVALID\";\n    MessageState[MessageState[\"DELETE\"] = 0] = \"DELETE\";\n    MessageState[MessageState[\"SET_IDLE\"] = 1] = \"SET_IDLE\";\n    MessageState[MessageState[\"SET_STARTUP\"] = 2] = \"SET_STARTUP\";\n    MessageState[MessageState[\"SET_TIMER\"] = 3] = \"SET_TIMER\";\n    MessageState[MessageState[\"SET_ICON\"] = 4] = \"SET_ICON\";\n})(MessageState || (MessageState = {}));\n/** Creates Message object */\nexport class Message {\n    constructor(msgObj) {\n        this.state = msgObj?.state ?? -1;\n        this.idleLength = msgObj?.idleLength ?? -1;\n        this.timerInterval = msgObj?.timerInterval ?? -1;\n        this.icon = msgObj?.icon ?? \"theme\";\n    }\n}\n","import browser from \"./we\";\nexport async function PermissionCheckbox(permissions, e, save) {\n    const target = e.target;\n    // if the user checked the box, make sure permission is granted first\n    if (target.checked) {\n        // prevent default stops the form listener from saving until *after* permission is granted\n        e.preventDefault();\n        const granted = await browser.permissions.request({ permissions });\n        target.checked = granted;\n        // I don't really like this.\n        // because we prevent default, the checkbox never triggers the save function\n        // but if we don't prevent default, it saves the wrong value!\n        // as a fix, we manually call the save function once we know if the permission was granted\n        save();\n    }\n}\n","import browser from \"./we\";\n/**\n * Loads i18n text to page\n *\n * Affects innerText of elements with class i18n\n *\n * Elements must have dataset.i18n present with the id of the i18n string\n */\nexport function i18n() {\n    [...document.getElementsByClassName(\"i18n\")]\n        .forEach(item => {\n        if (typeof item.dataset.i18n === \"string\") {\n            item.innerText = browser.i18n.getMessage(item.dataset.i18n);\n        }\n    });\n}\n","import { Options } from \"./OptionsInterface\";\nimport { Message, MessageState } from \"./MessageInterface\";\nimport browser from \"./we\";\nimport { PermissionCheckbox } from \"./PermissionCheckbox\";\nimport { i18n } from \"./i18n\";\nimport \"./popup.css\";\ni18n();\nconst form = document.querySelector(\"form\");\nconst formElements = form.elements;\nconst lastRunVisible = document.querySelector(\"#last-run\");\nconst nextRun = document.querySelector(\"#next-run\");\n// sync buttons\nconst uploadButton = document.querySelector(\"#sync-up\");\nconst downloadButton = document.querySelector(\"#sync-down\");\nconst exportButton = document.querySelector(\"#export\");\nconst importButton = document.querySelector(\"#import\");\nconst importFile = document.querySelector(\"#import-file\");\n// manual delete button\nconst manualDeleteButton = document.querySelector(\"#manual-delete\");\n/**\n * Resets the trigger mode\n * Used when importing from file or sync\n * @param opts - The imported options to apply\n */\nfunction resetTriggerMode(opts) {\n    // typically the trigger mode is initialized on startup or right as it's changed in the form\n    // but if you import, the form is not updated and startup is not ran\n    // so we have to reset the trigger mode manually\n    const msg = new Message();\n    switch (opts.deleteMode) {\n        case \"idle\":\n            msg.state = MessageState.SET_IDLE;\n            msg.idleLength = opts.idleLength;\n            break;\n        case \"startup\":\n            msg.state = MessageState.SET_STARTUP;\n            break;\n        case \"timer\":\n            msg.state = MessageState.SET_TIMER;\n            msg.timerInterval = opts.timerInterval;\n            break;\n    }\n    browser.runtime.sendMessage(msg);\n}\n/**\n * Sends a message to the background script telling it to delete history\n */\nfunction manualDelete(e) {\n    e.preventDefault();\n    const msg = new Message({ state: MessageState.DELETE });\n    browser.runtime.sendMessage(msg);\n}\n/**\n * Upload current local storage to sync storage\n */\nasync function upload(e) {\n    e.preventDefault();\n    const res = new Options(await browser.storage.local.get());\n    await browser.storage.sync.set(res);\n    // location.reload();\n}\n/**\n * Download current sync storage to local storage\n *\n * Sets idle or startup based on the contents of the downloaded options\n */\nasync function download(e) {\n    e.preventDefault();\n    const res = new Options(await browser.storage.sync.get());\n    resetTriggerMode(res);\n    browser.storage.local.set(res);\n    // location.reload();\n}\n/**\n * Imports the config from a file.\n */\nfunction importConfig() {\n    const reader = new FileReader();\n    reader.addEventListener(\"load\", () => {\n        if (typeof reader.result === \"string\") {\n            const importedConfig = new Options(JSON.parse(reader.result));\n            resetTriggerMode(importedConfig);\n            browser.storage.local.set(importedConfig);\n        }\n    });\n    if (importFile.files !== null && importFile.files.length > 0) {\n        reader.readAsText(importFile.files[0]);\n    }\n}\n/**\n * Saves inputs on options page to storage\n *  * Runs when input is changed by user\n *  * If user input is not valid, does not save\n *  * Set idle or startup based on input\n * @param e event object\n */\nasync function save(e) {\n    if (form.checkValidity()) {\n        const opts = {\n            behavior: formElements.behavior.value,\n            days: parseInt(formElements.days.value),\n            deleteMode: formElements.deleteMode.value,\n            idleLength: parseInt(formElements.idleLength.value),\n            timerInterval: parseInt(formElements.timerInterval.value),\n            notifications: formElements.notifications.checked,\n            downloads: formElements.downloads.checked,\n            // filterHistory: formElements.filterHistory.checked,\n            // filterList: formElements.filterList.value.split(\"\\n\"),\n            lastRun: formElements.lastRun.value,\n            icon: formElements.icon.value,\n        };\n        if (opts.behavior === \"disable\") {\n            manualDeleteButton.disabled = true;\n            console.log(\"Disabled\");\n        }\n        else {\n            manualDeleteButton.disabled = false;\n            console.log(\"Enabled\");\n        }\n        if (e !== undefined) {\n            const target = e.target;\n            // if changing the setting will update idle / startup\n            const msg = new Message();\n            if ((target.name === \"idleLength\" || target.name === \"deleteMode\") && opts.deleteMode === \"idle\") {\n                msg.state = MessageState.SET_IDLE;\n                msg.idleLength = opts.idleLength;\n                browser.runtime.sendMessage(msg);\n            }\n            else if (target.name === \"deleteMode\" && opts.deleteMode === \"startup\") {\n                msg.state = MessageState.SET_STARTUP;\n                browser.runtime.sendMessage(msg);\n            }\n            else if ((target.name === \"timerInterval\" || target.name === \"deleteMode\") && opts.deleteMode === \"timer\") {\n                msg.state = MessageState.SET_TIMER;\n                msg.timerInterval = opts.timerInterval;\n                browser.runtime.sendMessage(msg);\n            }\n            else if (target.name === \"icon\") {\n                msg.state = MessageState.SET_ICON;\n                msg.icon = opts.icon;\n                browser.runtime.sendMessage(msg);\n            }\n            // const isNotificationPermissionGranted = await browser.permissions.contains({ permissions: [\"notifications\"] });\n            // if (!isNotificationPermissionGranted) {\n            //     opts.notifications = false;\n            // }\n            // const isDownloadPermissionGranted = await browser.permissions.contains({ permissions: [\"downloads\"] });\n            // if (!isDownloadPermissionGranted) {\n            //     opts.downloads = false;\n            // }\n            // if notifications were enabled\n            // if (isNotificationPermissionGranted && target.name === \"notifications\" && opts.notifications) {\n            //     browser.notifications.create({\n            //         type: \"basic\",\n            //         iconUrl: \"icons/icon-96.png\",\n            //         title: browser.i18n.getMessage(\"notificationEnabled\"),\n            //         message: browser.i18n.getMessage(\"notificationEnabledBody\")\n            //     });\n            // }\n        }\n        console.log(\"Saving\", opts);\n        // save options\n        browser.storage.local.set(opts);\n    }\n}\n/**\n * Runs on page load\n * Loads current options to inputs on page\n */\nasync function load() {\n    const res = new Options(await browser.storage.local.get());\n    console.log(\"Loading\", res);\n    formElements.behavior.value = res.behavior.toString();\n    formElements.days.value = res.days.toString();\n    formElements.idleLength.value = res.idleLength.toString();\n    formElements.timerInterval.value = res.timerInterval.toString();\n    formElements.deleteMode.value = res.deleteMode;\n    // formElements.filterHistory.checked = res.filterHistory;\n    // formElements.filterList.value = res.filterList.join(\"\\n\");\n    formElements.icon.value = res.icon;\n    if (await browser.permissions.contains({ permissions: [\"notifications\"] })) {\n        formElements.notifications.checked = res.notifications;\n    }\n    else {\n        formElements.notifications.checked = false;\n    }\n    if (await browser.permissions.contains({ permissions: [\"downloads\"] })) {\n        formElements.downloads.checked = res.downloads;\n    }\n    else {\n        formElements.downloads.checked = false;\n    }\n    if (res.behavior === \"disable\") {\n        nextRun.innerText = browser.i18n.getMessage(\"statisticsNextRunDisable\");\n    }\n    else {\n        const alarm = await browser.alarms.get(\"DeleteHistoryAlarm\");\n        if (res.deleteMode === \"timer\" && alarm !== undefined) {\n            nextRun.innerText = browser.i18n.getMessage(\"statisticsNextRunTimer\", [new Date(alarm.scheduledTime).toLocaleString()]);\n        }\n        if (res.deleteMode === \"idle\") {\n            nextRun.innerText = browser.i18n.getMessage(\"statisticsNextRunIdle\");\n        }\n        if (res.deleteMode === \"startup\") {\n            nextRun.innerText = browser.i18n.getMessage(\"statisticsNextRunStartup\");\n        }\n    }\n    formElements.lastRun.value = res.lastRun;\n    lastRunVisible.innerText = res.lastRun;\n    if (res.behavior === \"disable\") {\n        manualDeleteButton.disabled = true;\n    }\n    else {\n        manualDeleteButton.disabled = false;\n    }\n    // allow config to be exported\n    exportButton.href = \"data:application/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(res));\n}\ndocument.addEventListener(\"DOMContentLoaded\", load);\n// notificationRequestButton.getElement().addEventListener(\"click\", togglePermission);\nform.addEventListener(\"input\", save);\nmanualDeleteButton.addEventListener(\"click\", manualDelete);\nformElements.notifications.addEventListener(\"change\", (e) => PermissionCheckbox([\"notifications\"], e, save));\nformElements.downloads.addEventListener(\"change\", (e) => PermissionCheckbox([\"downloads\"], e, save));\nuploadButton.addEventListener(\"click\", upload);\ndownloadButton.addEventListener(\"click\", download);\nimportButton.addEventListener(\"click\", () => importFile.click());\nimportFile.addEventListener(\"change\", importConfig);\nbrowser.storage.onChanged.addListener(load);\n"],"names":["self","browser","chrome","Options","constructor","optionsObj","this","behavior","days","idleLength","timerInterval","deleteMode","notifications","downloads","icon","lastRun","i18n","getMessage","deleteCount","undefined","manifest_version","runtime","getManifest","includes","MessageState","Message","msgObj","state","async","PermissionCheckbox","permissions","e","save","target","checked","preventDefault","granted","request","document","getElementsByClassName","forEach","item","dataset","innerText","querySelector","formElements","elements","lastRunVisible","nextRun","uploadButton","downloadButton","exportButton","importButton","importFile","manualDeleteButton","resetTriggerMode","opts","msg","SET_IDLE","SET_STARTUP","SET_TIMER","sendMessage","checkValidity","value","parseInt","disabled","console","log","name","SET_ICON","storage","local","set","load","res","get","toString","contains","alarm","alarms","Date","scheduledTime","toLocaleString","href","encodeURIComponent","JSON","stringify","addEventListener","DELETE","sync","click","reader","FileReader","result","importedConfig","parse","files","length","readAsText","onChanged","addListener"],"sourceRoot":""}