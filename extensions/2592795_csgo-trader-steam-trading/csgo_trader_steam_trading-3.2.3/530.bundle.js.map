{"version":3,"file":"530.bundle.js","mappings":"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","sources":["webpack://csgotrader.app-extension/./src/components/CustomA11yButton/CustomA11yButton.js","webpack://csgotrader.app-extension/./src/utils/pricing.js","webpack://csgotrader.app-extension/./src/utils/simpleUtils.js","webpack://csgotrader.app-extension/./src/utils/static/defaultPopupLinks.js","webpack://csgotrader.app-extension/./src/utils/static/friendRequests.js","webpack://csgotrader.app-extension/./src/utils/static/notifications.js","webpack://csgotrader.app-extension/./src/utils/static/offers.js","webpack://csgotrader.app-extension/./src/utils/static/pricing.js","webpack://csgotrader.app-extension/./src/utils/static/sortingModes.js","webpack://csgotrader.app-extension/./src/utils/static/storageKeys.js"],"sourcesContent":["import React from 'react';\n\nconst CustomA11yButton = ({\n  action, children, className, title, id,\n}) => {\n  return (\n    <span\n      role=\"button\"\n      tabIndex=\"0\"\n      onClick={action}\n      onKeyDown={action}\n      className={`${className} customButton`}\n      title={title}\n      id={id}\n    >\n      {children}\n    </span>\n  );\n};\n\nexport default CustomA11yButton;\n","import {\n  currencies,\n  pricingProviders,\n  realTimePricingModes,\n  steamCurrencyCodes,\n} from 'utils/static/pricing';\n\nimport DOMPurify from 'dompurify';\nimport { findElementByIDs } from 'utils/itemsToElementsToItems';\nimport { getItemMarketLink } from 'utils/simpleUtils';\nimport { injectScript } from 'utils/injection';\nimport { storageKeys } from 'utils/static/storageKeys';\n\nconst priceQueue = {\n  active: false,\n  jobs: [],\n  delaySuccess: storageKeys.realTimePricesFreqSuccess,\n  delayFailure: storageKeys.realTimePricesFreqFailure,\n  lastJobSuccessful: true,\n  localCache: {},\n  cleanupFunction: () => { }, // optional function that is executed when all jobs are done\n};\n\n// tested and works in inventories, offers and market pages\n// does not work on profiles and incoming offers page\nconst getSteamWalletInfo = () => {\n  const getWalletInfoScript = 'document.querySelector(\\'body\\').setAttribute(\\'steamWallet\\', JSON.stringify(\"g_rgWalletInfo\" in window ? g_rgWalletInfo : null));';\n  return JSON.parse(injectScript(getWalletInfoScript, true, 'steamWalletScript', 'steamWallet'));\n};\n\nconst initPriceQueue = (cleanupFunction) => {\n  chrome.storage.local.get(\n    ['realTimePricesFreqSuccess', 'realTimePricesFreqFailure'],\n    ({ realTimePricesFreqSuccess, realTimePricesFreqFailure }) => {\n      priceQueue.delaySuccess = realTimePricesFreqSuccess;\n      priceQueue.delayFailure = realTimePricesFreqFailure;\n      priceQueue.cleanupFunction = cleanupFunction !== undefined ? cleanupFunction : () => { };\n    },\n  );\n};\n\nconst getSteamWalletCurrency = () => {\n  const walletInfo = getSteamWalletInfo();\n  if (walletInfo) {\n    const getCurrencyScript = `\n  document.querySelector('body').setAttribute('steamWalletCurrency', GetCurrencyCode(${DOMPurify.sanitize(walletInfo.wallet_currency)}));\n  `;\n    return injectScript(getCurrencyScript, true, 'steamWalletCurrencyScript', 'steamWalletCurrency');\n  } return null;\n};\n\nconst getHighestBuyOrder = (appID, marketHashName) => {\n  return new Promise((resolve, reject) => {\n    chrome.storage.local.get(['currency'], ({ currency }) => {\n      const steamWalletInfo = getSteamWalletInfo();\n      let currencyID = 1;\n      if (steamWalletInfo !== null) currencyID = steamWalletInfo.wallet_currency;\n      else {\n        for (const [code, short] of Object.entries(steamCurrencyCodes)) {\n          if (short === currency) currencyID = code;\n        }\n      }\n      chrome.runtime.sendMessage(\n        { getBuyOrderInfo: { appID, currencyID, marketHashName } }, (response) => {\n          if (response !== 'error') resolve(response.getBuyOrderInfo.highest_buy_order);\n          else reject('error');\n        },\n      );\n    });\n  });\n};\n\nconst getPriceOverview = (appID, marketHashName) => {\n  return new Promise((resolve, reject) => {\n    const walletInfo = getSteamWalletInfo();\n\n    if (walletInfo) {\n      const currencyID = walletInfo.wallet_currency;\n      const request = new Request(`https://steamcommunity.com/market/priceoverview/?appid=${appID}&country=US&currency=${currencyID}&market_hash_name=${marketHashName}`);\n\n      fetch(request).then((response) => {\n        if (!response.ok) {\n          console.log(`Error code: ${response.status} Status: ${response.statusText}`);\n          reject({ status: response.status, statusText: response.statusText });\n        }\n        return response.json();\n      }).then((priceOverviewJSON) => {\n        if (priceOverviewJSON === null) reject('success:false');\n        else if (priceOverviewJSON.success === true) resolve(priceOverviewJSON);\n        else reject('success:false');\n      }).catch((err) => {\n        console.log(err);\n        reject(err);\n      });\n    } else reject('unable to parse steam wallet info');\n  });\n};\n\nconst getLowestListingPrice = (appID, marketHashName) => {\n  return new Promise((resolve, reject) => {\n    chrome.storage.local.get(['currency'], ({ currency }) => {\n      const steamWalletInfo = getSteamWalletInfo();\n      let currencyID = 1;\n      if (steamWalletInfo !== null) currencyID = steamWalletInfo.wallet_currency;\n      else {\n        for (const [code, short] of Object.entries(steamCurrencyCodes)) {\n          if (short === currency) currencyID = code;\n        }\n      }\n      const request = new Request(\n        `${getItemMarketLink(appID, marketHashName)}/render/?query=&start=0&count=10&country=US&language=english&currency=${currencyID}`,\n      );\n\n      fetch(request).then((response) => {\n        if (!response.ok) {\n          console.log(`Error code: ${response.status} Status: ${response.statusText}`);\n          reject({ status: response.status, statusText: response.statusText });\n        }\n        return response.json();\n      }).then((listingsJSONData) => {\n        if (listingsJSONData === null) reject('success:false');\n        else if (listingsJSONData.success === true) {\n          if (listingsJSONData.listinginfo) {\n            const listingInfo = Object.values(listingsJSONData.listinginfo);\n            if (listingInfo.length !== 0) {\n              for (const listing of listingInfo) {\n                if (listing.converted_price !== undefined && listing.converted_fee !== undefined) {\n                  resolve(listing.converted_price + listing.converted_fee);\n                  return;\n                }\n              }\n              reject('no_prices_on_listings');\n            } else reject('empty_listings_array'); // no listings at all on the market\n          } else reject('no listing data');\n          resolve(listingsJSONData);\n        } else reject('success:false');\n      }).catch((err) => {\n        console.log(err);\n        reject(err);\n      });\n    });\n  });\n};\n\nconst getMidPrice = (appID, marketHashName) => {\n  return new Promise((resolve, reject) => {\n    getHighestBuyOrder(appID, marketHashName).then((highestBuyOrder) => {\n      if (highestBuyOrder !== undefined && highestBuyOrder !== null) {\n        let highestOrderPrice = 0;\n        try {\n          highestOrderPrice = parseFloat(highestBuyOrder);\n        } catch (e) {\n          // most likely there aren't any orders\n          console.log(e);\n        }\n        getLowestListingPrice(appID, marketHashName).then((lowestListing) => {\n          if (lowestListing !== undefined) {\n            resolve((highestOrderPrice + lowestListing) / 2);\n          }\n        }).catch((err) => {\n          console.log(err);\n          reject(err);\n        });\n      } else reject('highest_order_undef_or_null');\n    }).catch((err) => {\n      console.log(err);\n      reject(err);\n    });\n  });\n};\n\nconst priceQueueSuccess = () => {\n  priceQueue.lastJobSuccessful = true;\n  setTimeout(() => {\n    priceQueue.active = false;\n    // eslint-disable-next-line no-use-before-define\n    workOnPriceQueue();\n  }, priceQueue.delaySuccess);\n};\n\nconst priceQueueFailure = (error, job) => {\n  console.log(error, job);\n  priceQueue.lastJobSuccessful = false;\n\n  if (error !== 'empty_listings_array' && error !== 'highest_order_undef_or_null') {\n    priceQueue.jobs.push({ ...job, retries: job.retries + 1 });\n\n    setTimeout(() => {\n      priceQueue.active = false;\n      // eslint-disable-next-line no-use-before-define\n      workOnPriceQueue();\n    }, priceQueue.delayFailure);\n  } else priceQueueSuccess();\n};\n\nconst priceQueueCacheHit = () => {\n  priceQueue.active = false;\n  // eslint-disable-next-line no-use-before-define\n  workOnPriceQueue();\n};\n\nconst workOnPriceQueue = () => {\n  if (priceQueue.jobs.length !== 0) { // if there are no jobs then there is no recursion\n    if (!priceQueue.active) { // only start the work if the queue is inactive at the moment\n      priceQueue.active = true; // marks the queue active\n      chrome.storage.local.get(['priceQueueActivity'], ({ priceQueueActivity }) => {\n        const job = priceQueue.jobs.shift();\n        const secondsFromLastUse = ((Date.now()\n          - new Date(priceQueueActivity.lastUsed)) / 1000);\n\n        // tries to avoid having multiple price queues running concurrently on different pages\n        if (secondsFromLastUse > 10 || priceQueueActivity.usedAt === window.location.pathname) {\n          if (job.retries < 5) { // limits the number of retries to avoid infinite loop\n            if (job.type === 'my_buy_order' || job.type === 'inventory_mass_sell_instant_sell'\n              || job.type === `offer_${realTimePricingModes.bid_price.key}`\n              || job.type === `offers_${realTimePricingModes.bid_price.key}`\n              || job.type === `inventory_${realTimePricingModes.bid_price.key}`) {\n              if (priceQueue.localCache[\n                job.appID + job.market_hash_name + job.type\n              ] !== undefined) {\n                if (job.type === 'my_buy_order') job.callBackFunction(job, priceQueue.localCache[job.appID + job.market_hash_name + job.type]);\n                else if (job.type === 'inventory_mass_sell_instant_sell'\n                  || job.type === `offer_${realTimePricingModes.highest_order.key}`) {\n                  job.callBackFunction(\n                    job.market_hash_name,\n                    priceQueue.localCache[job.appID + job.market_hash_name + job.type],\n                    job.appID,\n                    job.assetID,\n                    job.contextID,\n                  );\n                }\n                priceQueueCacheHit();\n              } else {\n                getHighestBuyOrder(job.appID, job.market_hash_name).then(\n                  (highestBuyOrder) => {\n                    if (highestBuyOrder !== undefined) {\n                      if (job.type === 'my_buy_order') job.callBackFunction(job, highestBuyOrder);\n                      else if (job.type === 'inventory_mass_sell_instant_sell'\n                        || job.type === `offer_${realTimePricingModes.bid_price.key}`) {\n                        job.callBackFunction(\n                          job.market_hash_name,\n                          highestBuyOrder,\n                          job.appID,\n                          job.assetID,\n                          job.contextID,\n                        );\n                      }\n                      priceQueue.localCache[\n                        job.appID + job.market_hash_name + job.type\n                      ] = highestBuyOrder;\n                      priceQueueSuccess();\n                    } else priceQueueFailure('highestBuyOrder is undefined', job);\n                  }, (error) => {\n                    priceQueueFailure(error, job);\n                  },\n                );\n              }\n            } else if (job.type === 'inventory_mass_sell_starting_at'\n              || job.type === `offer_${realTimePricingModes.ask_price.key}`\n              || job.type === `offers_${realTimePricingModes.ask_price.key}`\n              || job.type === `inventory_${realTimePricingModes.ask_price.key}`\n              || job.type === 'my_listing'\n              || job.type === 'history_row') {\n              if (priceQueue.localCache[\n                job.appID + job.market_hash_name + job.type\n              ] !== undefined) {\n                if (job.type === 'my_listing') {\n                  job.callBackFunction(\n                    job.listingID,\n                    priceQueue.localCache[job.appID + job.market_hash_name + job.type],\n                  );\n                } else if (job.type === 'history_row') {\n                  job.callBackFunction(\n                    job.rowID,\n                    priceQueue.localCache[job.appID + job.market_hash_name + job.type],\n                  );\n                } else {\n                  job.callBackFunction(\n                    job.market_hash_name,\n                    priceQueue.localCache[job.appID + job.market_hash_name + job.type],\n                    job.appID,\n                    job.assetID,\n                    job.contextID,\n                    job.type,\n                    job.showContrastingLook,\n                  );\n                }\n                priceQueueCacheHit();\n              } else {\n                getLowestListingPrice(job.appID, job.market_hash_name).then(\n                  (lowestListingPrice) => {\n                    if (lowestListingPrice !== undefined) {\n                      if (job.type === 'my_listing') {\n                        job.callBackFunction(\n                          job.listingID,\n                          lowestListingPrice,\n                        );\n                      } else if (job.type === 'history_row') {\n                        job.callBackFunction(\n                          job.rowID,\n                          lowestListingPrice,\n                        );\n                      } else {\n                        job.callBackFunction(\n                          job.market_hash_name,\n                          lowestListingPrice,\n                          job.appID,\n                          job.assetID,\n                          job.contextID,\n                          job.type,\n                          job.showContrastingLook,\n                        );\n                      }\n                      priceQueue\n                        .localCache[\n                          job.appID + job.market_hash_name + job.type\n                        ] = lowestListingPrice;\n                      priceQueueSuccess();\n                    } else priceQueueFailure('lowest_price is undefined', job);\n                  }, (error) => {\n                    priceQueueFailure(error, job);\n                  },\n                );\n              }\n            } else if (job.type === `offer_${realTimePricingModes.mid_price.key}`\n              || job.type === `offers_${realTimePricingModes.mid_price.key}`\n              || job.type === `inventory_${realTimePricingModes.mid_price.key}`\n              || job.type === 'inventory_mass_sell_mid_price') {\n              if (priceQueue.localCache[\n                job.appID + job.market_hash_name + job.type\n              ] !== undefined) {\n                job.callBackFunction(\n                  job.market_hash_name,\n                  priceQueue.localCache[job.appID + job.market_hash_name + job.type],\n                  job.appID,\n                  job.assetID,\n                  job.contextID,\n                  job.type,\n                  job.showContrastingLook,\n                );\n                priceQueueCacheHit();\n              } else {\n                getMidPrice(job.appID, job.market_hash_name).then((midPrice) => {\n                  job.callBackFunction(\n                    job.market_hash_name,\n                    midPrice,\n                    job.appID,\n                    job.assetID,\n                    job.contextID,\n                    job.type,\n                    job.showContrastingLook,\n                  );\n                  priceQueue.localCache[\n                    job.appID + job.market_hash_name + job.type\n                  ] = midPrice;\n                  priceQueueSuccess();\n                }, (error) => {\n                  priceQueueFailure(error, job);\n                });\n              }\n            }\n            // updates storage to signal that the price queue is being used\n            chrome.storage.local.set({\n              priceQueueActivity: {\n                lastUsed: Date.now(),\n                usedAt: window.location.pathname,\n              },\n            });\n          } else workOnPriceQueue();\n        } else priceQueueFailure('other_active_pricequeue', job);\n      });\n    }\n  } else {\n    priceQueue.cleanupFunction();\n    priceQueue.active = false;\n  }\n};\n\nconst updatePrices = () => {\n  chrome.storage.local.get(['itemPricing', 'pricingProvider', 'pricingMode'], (result) => {\n    const provider = result.pricingProvider;\n    const mode = result.pricingMode;\n    const headers = new Headers();\n\n    headers.append('Accept-Encoding', 'gzip');\n    const init = {\n      method: 'GET',\n      headers,\n      mode: 'cors',\n      cache: 'default',\n    };\n\n    const request = new Request(`https://prices.csgotrader.app/latest/${provider}.json`, init);\n    fetch(request).then((response) => {\n      if (!response.ok) {\n        console.log(`Error code: ${response.status} Status: ${response.statusText}`);\n      }\n      return response.json();\n    }).then((pricesJSON) => {\n      if (result.itemPricing) {\n        const prices = {};\n        const keys = Object.keys(pricesJSON);\n\n        if (provider === pricingProviders.steam.name\n          || provider === pricingProviders.bitskins.name\n          || provider === pricingProviders.skinport.name) {\n          let pricingMode = mode;\n          if (mode === pricingProviders.bitskins.pricing_modes.bitskins.name) pricingMode = 'price';\n          else if (mode === pricingProviders.bitskins.pricing_modes.instant_sale.name) {\n            pricingMode = 'instant_sale_price';\n          }\n\n          for (const key of keys) {\n            if (pricesJSON[key][pricingMode] !== undefined) {\n              prices[key] = { price: pricesJSON[key][pricingMode] };\n            } else {\n              prices[key] = { price: null };\n              console.log(key);\n            }\n          }\n        } else if (provider === pricingProviders.lootfarm.name\n          || provider === pricingProviders.csgotm.name\n          || provider === pricingProviders.csgoempire.name\n          || provider === pricingProviders.swapgg.name\n          || provider === pricingProviders.csgoexo.name\n          || provider === pricingProviders.skinwallet.name\n          || provider === pricingProviders.youpin.name) {\n          for (const key of keys) {\n            prices[key] = { price: pricesJSON[key] };\n          }\n        } else if (provider === pricingProviders.csmoney.name\n          || provider === pricingProviders.csgotrader.name\n          || provider === pricingProviders.cstrade.name\n          || provider === pricingProviders.csfloat.name) {\n          for (const key of keys) {\n            if (pricesJSON[key].doppler !== undefined) {\n              prices[key] = {\n                price: pricesJSON[key].price,\n                doppler: pricesJSON[key].doppler,\n              };\n            } else prices[key] = { price: pricesJSON[key].price };\n          }\n        } else if (provider === pricingProviders.buff163.name) {\n          for (const key of keys) {\n            if (pricesJSON[key][mode] !== undefined) {\n              if (pricesJSON[key][mode].doppler !== undefined) {\n                prices[key] = {\n                  price: pricesJSON[key][mode].price,\n                  doppler: pricesJSON[key][mode].doppler,\n                };\n              } else prices[key] = { price: pricesJSON[key][mode].price };\n            } else {\n              prices[key] = { price: null };\n              console.log(key);\n            }\n          }\n        }\n        chrome.storage.local.set({ prices }, () => { });\n      }\n    }).catch((err) => { console.log(err); });\n  });\n};\n\nconst updateExchangeRates = () => {\n  const request = new Request('https://prices.csgotrader.app/latest/exchange_rates.json');\n\n  fetch(request).then((response) => {\n    if (!response.ok) console.log(`Error code: ${response.status} Status: ${response.statusText}`);\n    return response.json();\n  }).then((exchangeRatesJSON) => {\n    chrome.storage.local.set({ exchangeRates: exchangeRatesJSON }, () => { });\n    chrome.storage.local.get('currency', ({ currency }) => {\n      chrome.storage.local.set({ exchangeRate: exchangeRatesJSON[currency] }, () => { });\n    });\n  }).catch((err) => { console.log(err); });\n};\n\nconst getPrice = (marketHashName, dopplerInfo, prices, provider, mode, exchangeRate, currency) => {\n  let price = 0.0;\n  if (prices[marketHashName] !== undefined && prices[marketHashName] !== 'null'\n    && prices[marketHashName] !== null && prices[marketHashName].price !== undefined\n    && prices[marketHashName].price !== 'null') {\n    // csgotrader, csmoney and buff have doppler phase prices so they are handled differently\n    if ((provider === pricingProviders.csgotrader.name || provider === pricingProviders.csmoney.name\n      || provider === pricingProviders.buff163.name || provider === pricingProviders.cstrade.name\n      || provider === pricingProviders.csfloat.name)) { // other providers have no doppler info\n      if (dopplerInfo !== null) {\n        // when there is price for the specific doppler phase take that\n        if (prices[marketHashName].doppler !== undefined && prices[marketHashName].doppler\n          !== 'null' && prices[marketHashName].doppler[dopplerInfo.name] !== 'null'\n          && prices[marketHashName].doppler[dopplerInfo.name] !== undefined\n          && prices[marketHashName].doppler[dopplerInfo.name] !== null) {\n          price = (prices[marketHashName].doppler[dopplerInfo.name] * exchangeRate).toFixed(2);\n        } else if (provider === pricingProviders.buff163.name\n          && mode === pricingProviders.buff163.pricing_modes.starting_at.name) {\n          price = 0.0;\n        } else price = (prices[marketHashName].price * exchangeRate).toFixed(2);\n      } else price = (prices[marketHashName].price * exchangeRate).toFixed(2);\n    } else price = (prices[marketHashName].price * exchangeRate).toFixed(2);\n  }\n  return {\n    price,\n    display: price === 0.0 ? '' : currencies[currency].sign + price,\n  };\n};\n\nconst getStickerPriceTotal = (stickers, currency) => {\n  let total = 0.0;\n  if (stickers !== null) {\n    stickers.forEach((sticker) => {\n      if (sticker.price !== null) total += parseFloat(sticker.price.price);\n    });\n  }\n  return total === 0\n    ? null\n    : { price: total, display: currencies[currency].sign + total.toFixed(2) };\n};\n\nconst prettyPrintPrice = (currency, price) => {\n  const nf = new Intl.NumberFormat();\n  return price >= 0 ? currencies[currency].sign + nf.format(price) : `-${currencies[currency].sign}${nf.format(Math.abs(price))}`;\n};\n\nconst getPriceAfterFees = (priceBeforeFees) => {\n  // TODO get the publisher fee dynamically\n  const priceAfterFeesScript = `\n        document.querySelector('body').setAttribute(\n          'priceAfterFees',\n          ${DOMPurify.sanitize(priceBeforeFees)} - CalculateFeeAmount( ${DOMPurify.sanitize(priceBeforeFees)}, g_rgWalletInfo['wallet_publisher_fee_percent_default'] ).fees);`;\n  return parseInt(injectScript(priceAfterFeesScript, true, 'priceAfterFeesScript', 'priceAfterFees'));\n};\n\nconst userPriceToProperPrice = (userInput) => {\n  const strippedFromExtraChars = userInput.replace(/[^0-9.,]/g, '');\n  const splitChar = strippedFromExtraChars.includes('.')\n    ? '.'\n    : strippedFromExtraChars.includes(',')\n      ? ','\n      : '';\n  if (splitChar === '') return parseInt(`${strippedFromExtraChars}00`); // whole number\n\n  const parts = strippedFromExtraChars.split(splitChar);\n  const wholePart = parts[0];\n  let decimalPart = parts[1] === undefined ? '00' : parts[1];\n\n  if (decimalPart.length === 1) decimalPart += '0'; // turns 0.3 into 0.30\n  else if (decimalPart.length > 2) decimalPart = decimalPart.substr(0, 2); // turns 0.0003 into 0.00\n  return parseInt(wholePart + decimalPart);\n};\n\n// converts cent integers to pretty formatted string\nconst centsToSteamFormattedPrice = (centsPrice) => {\n  const intToFormattedScript = `document.querySelector('body').setAttribute('intToFormatted', v_currencyformat(${DOMPurify.sanitize(centsPrice.toString())}, GetCurrencyCode(g_rgWalletInfo.wallet_currency)));`;\n  return injectScript(intToFormattedScript, true, 'intToFormattedScript', 'intToFormatted');\n};\n\n// to convert the formatted price string\n// that the price overview api call returns to cent int (for market listing)\nconst steamFormattedPriceToCents = (formattedPrice) => {\n  const formattedToIntScript = `document.querySelector('body').setAttribute('formattedToInt', GetPriceValueAsInt('${DOMPurify.sanitize(formattedPrice).toString()}'));`;\n  return injectScript(formattedToIntScript, true, 'formattedToIntScript', 'formattedToInt');\n};\n\nconst getUserCurrencyBestGuess = () => new Promise((resolve) => {\n  const getRequest = new Request('https://steamcommunity.com/market/');\n\n  fetch(getRequest).then((response) => {\n    if (!response.ok) {\n      console.log(`Error code: ${response.status} Status: ${response.statusText}`);\n      resolve(currencies.USD.short);\n    }\n    return response.text();\n  }).then((body) => {\n    const valueStart = body.split('var g_nWalletCurrency = ')[1];\n    if (valueStart !== undefined) {\n      const value = valueStart.split(';')[0];\n      const currencyFromCode = steamCurrencyCodes[value];\n      if (currencyFromCode !== undefined) {\n        if (currencies[currencyFromCode] !== undefined) {\n          resolve(currencies[currencyFromCode].short);\n        }\n      }\n    }\n  }).catch((err) => {\n    console.log(err);\n    resolve(currencies.USD.short);\n  });\n});\n\nconst addRealTimePriceIndicator = (itemElement, price, showContrastingLook) => {\n  const contrastingLookClass = showContrastingLook ? 'contrastingBackground' : '';\n\n  itemElement.insertAdjacentHTML(\n    'beforeend',\n    DOMPurify.sanitize(`<div class=\"realTimePriceIndicator ${contrastingLookClass}\">${price}</div>`),\n  );\n};\n\nconst addRealTimePriceToPage = (\n  marketHashName, price, appID, assetID, contextID, type, showContrastingLook,\n) => {\n  const itemElement = findElementByIDs(appID, contextID, assetID, type);\n\n  // the steam wallet global var is not defined in the trade offer page\n  // this is a workaround to that\n  if (type.includes('offers')) {\n    chrome.storage.local.get(['userSteamWalletCurrency'], ({ userSteamWalletCurrency }) => {\n      addRealTimePriceIndicator(\n        itemElement,\n        price !== null ? prettyPrintPrice(userSteamWalletCurrency, (price / 100).toFixed(2)) : 'No Data',\n        showContrastingLook,\n      );\n    });\n  } else {\n    addRealTimePriceIndicator(\n      itemElement,\n      price !== null ? centsToSteamFormattedPrice(price) : 'No Data',\n      showContrastingLook,\n    );\n  }\n  itemElement.setAttribute(\n    'data-realtime-price',\n    price !== null ? price.toString() : '0',\n  );\n};\n\nconst updateWalletCurrency = () => {\n  const walletCurrency = getSteamWalletCurrency();\n  chrome.storage.local.set({\n    userSteamWalletCurrency: (walletCurrency !== 'Unknown' && walletCurrency !== undefined && walletCurrency !== null) ? walletCurrency : currencies.USD.short,\n  });\n};\n\nexport {\n  updatePrices, updateExchangeRates, getPrice, getUserCurrencyBestGuess,\n  getStickerPriceTotal, prettyPrintPrice, getPriceOverview, getMidPrice,\n  getPriceAfterFees, userPriceToProperPrice, centsToSteamFormattedPrice,\n  steamFormattedPriceToCents, priceQueue, workOnPriceQueue,\n  getHighestBuyOrder, getSteamWalletCurrency, getSteamWalletInfo,\n  addRealTimePriceIndicator, initPriceQueue, getLowestListingPrice,\n  addRealTimePriceToPage, updateWalletCurrency,\n};\n","// this utils module should never have any non-static dependencies\n\nconst getItemMarketLink = (appID, marketHashName) => {\n  return `https://steamcommunity.com/market/listings/${appID}/${marketHashName}`;\n};\n\nconst getItemInventoryLink = (steamID, appID, contextID, assetID) => {\n  return `https://steamcommunity.com/profiles/${steamID}/inventory/#${appID}_${contextID}_${assetID}`;\n};\n\nconst getOfferLink = (offerID) => {\n  return `https://steamcommunity.com/tradeoffer/${offerID}`;\n};\n\n// true when chrome or edge, false on ff\nconst isChromium = () => {\n  return chrome.runtime.getURL('/index.html').includes('chrome-extension');\n};\n\n// Create the offscreen document if it doesn't already exist\nconst createOffscreen = async (reasons, justification) => {\n  if (await chrome.offscreen.hasDocument()) return;\n  await chrome.offscreen.createDocument({\n    url: '/offScreen/offscreen.html',\n    reasons,\n    justification,\n  });\n};\n\n// https://stackoverflow.com/questions/67437180/play-audio-from-background-script-in-chrome-extention-manifest-v3\nconst playAudioChromium = async (source, sourceType, volume) => {\n  const sourceURL = sourceType === 'local'\n    ? chrome.runtime.getURL(source)\n    : source;\n  await createOffscreen([chrome.offscreen.Reason.AUDIO_PLAYBACK], 'to play notification sound in the background');\n  await chrome.runtime.sendMessage({ playAudio: { sourceURL, volume } });\n};\n\nconst playAudioFirefox = (source, sourceType, volume) => {\n  const sourceURL = sourceType === 'local'\n    ? chrome.runtime.getURL(source)\n    : source;\n  const audio = new Audio(sourceURL);\n  audio.volume = volume;\n  audio.play();\n};\n\nconst playAudio = isChromium() ? playAudioChromium : playAudioFirefox;\n\nconst getItemByNameAndGame = (inventory, appID, contextID, itemName) => {\n  return inventory.find((item) => {\n    return (item.market_hash_name === itemName\n      && item.appid === appID && item.contextid === contextID);\n  });\n};\n\nconst closeTab = () => new Promise((resolve, reject) => {\n  if (window.opener) {\n    window.close(); // only tabs opened by js can be closed by js\n    resolve('closed');\n  } else {\n    chrome.runtime.sendMessage({\n      closeTab: window.location.href,\n    }, () => {\n      reject('couldnt_close');\n    });\n  }\n});\n\nconst getFormattedPLPercentage = (giving, receiving) => {\n  return (giving === 0 || receiving === 0)\n    ? ''\n    : `(${(((receiving / giving) - 1) * 100).toFixed(2)}%)`;\n};\n\n// for phase detection we have to know if th item is a doppler\nconst isDopplerInName = (name) => {\n  // english and many other languages, polish iirc, simplified chinese, korean, bulgarian, russian\n  const patterns = ['Doppler', 'doppler', '多普勒', '도플러', 'Доплер', 'Волны'];\n  const dopplerCheckRegex = new RegExp(patterns.join('|'), 'i');\n  return dopplerCheckRegex.test(name);\n};\n\n// tries to parse which collection the item belongs to\n// if it find a collection it return its name as a string\n// otherwise return null\nconst getCollection = (descriptions) => {\n  let collectionName = null;\n\n  if (descriptions) {\n    descriptions.forEach((description) => {\n      if (description.value.slice(description.value.length - 11) === ' Collection') {\n        collectionName = description.value;\n      } else if (description.value.slice(description.value.length - 7) === ' Agents') {\n        collectionName = description.value;\n      }\n    });\n  }\n  return collectionName;\n};\n\n// not used atm\nconst generateInspectCommand = (fullName, fv, paintindex, defindex, paintseed, stickers) => {\n  // glove code starts with different name\n  const isGloves = fullName.includes('Gloves')\n    || fullName.includes('Wrap');\n\n  let stickerInfo = ' ';\n\n  if (stickers && stickers.length > 0) {\n    // parse the sticker array to a string like:\n    // `firstStickerId firstStickerWear secondStickerId secondStickerWear...`\n\n    for (let index = 0; index < 4; index += 1) {\n      const sticker = stickers.filter((stckr) => {\n        return stckr.slot === index;\n      })[0];\n\n      if (sticker) {\n        stickerInfo += `${sticker.stickerId} ${sticker.wear ? parseFloat(sticker.wear) : 0} `;\n      } else stickerInfo += '0 0 ';\n    }\n  }\n\n  // Join all into a string\n  return (\n    `!${isGloves ? 'gengl' : 'gen'} ${defindex} ${paintindex} ${paintseed} ${fv}${stickers ? stickerInfo : ''}`\n  );\n};\n\n// when the extension is updated or reloaded\n// the content scrips lose the ability to comminicate with the background script\n// this function reloads the page to fix that\nconst reloadPageOnExtensionUpdate = () => {\n  setInterval(() => {\n    if (!chrome.runtime?.id) window.location.reload();\n  }, 5000);\n};\n\nexport {\n  getItemMarketLink, getItemInventoryLink, getOfferLink, playAudio, isChromium,\n  getItemByNameAndGame, closeTab, isDopplerInName, getFormattedPLPercentage,\n  getCollection, generateInspectCommand, createOffscreen, reloadPageOnExtensionUpdate,\n};\n","const defaultPopupLinks = [\n  {\n    active: true,\n    id: 'faq',\n    name: 'FAQ',\n    url: 'https://csgotrader.app/faq/',\n  },\n  {\n    active: true,\n    id: 'options',\n    name: 'Options',\n    url: 'index.html',\n  },\n  {\n    active: true,\n    id: 'changelog',\n    name: 'Changelog',\n    url: 'https://csgotrader.app/changelog/',\n  },\n  {\n    active: true,\n    id: 'bookmarks',\n    name: 'Bookmarks',\n    url: 'index.html?page=bookmarks',\n  },\n  {\n    active: true,\n    id: 'tradehistory',\n    name: 'Trade History',\n    url: 'index.html?page=trade-history',\n  },\n  {\n    active: true,\n    id: 'inventory',\n    name: 'Inventory',\n    url: 'https://steamcommunity.com/my/inventory/',\n  },\n  {\n    active: true,\n    id: 'tradeoffers',\n    name: 'Trade Offers',\n    url: 'https://steamcommunity.com/my/tradeoffers',\n  },\n];\n\nexport default defaultPopupLinks;\n","const conditions = {\n  profile_private: {\n    key: 'profile_private',\n    pretty: 'Private profile',\n    description: 'The user has a private Steam profile',\n    with_value: false,\n  },\n  profile_public: {\n    key: 'profile_public',\n    pretty: 'Private public',\n    description: 'The user has a public Steam profile',\n    with_value: false,\n  },\n  steam_level_under: {\n    key: 'steam_level_under',\n    pretty: 'Steam level under',\n    description: 'User\\' Steam profile lever is under or the same as the set number',\n    with_value: true,\n    value_type: 'number',\n    default_value: 5,\n  },\n  steam_level_over: {\n    key: 'steam_level_over',\n    pretty: 'Steam level over',\n    description: 'User\\' Steam profile lever is over the set number',\n    with_value: true,\n    value_type: 'number',\n    default_value: 50,\n  },\n  vac_banned: {\n    key: 'vac_banned',\n    pretty: 'Vac banned',\n    description: 'The user has VAC ban(s) on their account',\n    with_value: false,\n  },\n  community_banned: {\n    key: 'community_banned',\n    pretty: 'Community banned',\n    description: 'The user is community banned on Steam',\n    with_value: false,\n  },\n  game_banned: {\n    key: 'game_banned',\n    pretty: 'Game banned',\n    description: 'The user is banned in some games (for example CS2 Overwatch banned)',\n    with_value: false,\n  },\n  trade_banned: {\n    key: 'trade_banned',\n    pretty: 'Trade banned',\n    description: 'The user is trade banned or on trade ban probation',\n    with_value: false,\n  },\n  csgo_inventory_value_over: {\n    key: 'csgo_inventory_value_over',\n    pretty: 'CS2 Inventory value over',\n    description: 'The user\\'s inventory value is over',\n    with_value: true,\n    value_type: 'number',\n    default_value: 500,\n  },\n  csgo_inventory_value_under: {\n    key: 'csgo_inventory_value_under',\n    pretty: 'CS2 Inventory value under',\n    description: 'The user\\'s inventory value is under or the equal to',\n    with_value: true,\n    value_type: 'number',\n    default_value: 50,\n  },\n  inventory_private: {\n    key: 'inventory_private',\n    pretty: 'Private inventory',\n    description: 'The user\\'s inventory is not publicly viewable',\n    with_value: false,\n  },\n  common_friends_over: {\n    key: 'common_friends_over',\n    pretty: 'Common friends more than',\n    description: 'You have more common friends with the user than this number',\n    with_value: true,\n    value_type: 'number',\n    default_value: 10,\n  },\n  common_friends_under: {\n    key: 'common_friends_under',\n    pretty: 'Common friends same or less than',\n    description: 'You have fewer or the same number of common friends with the user than this number',\n    with_value: true,\n    value_type: 'number',\n    default_value: 5,\n  },\n  name_includes: {\n    key: 'name_includes',\n    pretty: 'Username includes',\n    description: 'The user\\'s Steam username includes the specified string of characters',\n    with_value: true,\n    value_type: 'string',\n    default_value: '',\n  },\n  request_received: {\n    key: 'request_received',\n    pretty: 'Received multiple friend request from',\n    description: 'The user has already sent a friend request in the past week',\n    with_value: false,\n  },\n  from_country: {\n    key: 'from_country',\n    pretty: 'From country',\n    description: 'The user has this country set on their profile',\n    with_value: true,\n    value_type: 'country',\n    default_value: 'US',\n  },\n  all_users: {\n    key: 'all_users',\n    pretty: 'All users',\n    description: 'Matches all users, useful if you want to accept or ignore everyone for example',\n    with_value: false,\n  },\n};\n\nconst actions = {\n  accept: {\n    key: 'accept',\n    pretty: 'Accept',\n    description: 'Accept friend request',\n  },\n  ignore: {\n    key: 'ignore',\n    pretty: 'Ignore',\n    description: 'Ignore friend request',\n  },\n  block: {\n    key: 'block',\n    pretty: 'Block',\n    description: 'Ignore friend request and block user',\n  },\n  no_action: {\n    key: 'no_action',\n    pretty: 'No action',\n    description: 'Do nothing',\n  },\n};\n\nconst eventTypes = {\n  new: {\n    key: 'new',\n    pretty: 'New Invite',\n    description: 'New invite spotted by the extension',\n  },\n  disappeared: {\n    key: 'disappeared',\n    pretty: 'Invite Disappeared',\n    description: 'The invite was either canceled or accepted / ignored / blocked by you',\n  },\n  no_action: {\n    key: 'no_action',\n    pretty: 'No action',\n    description: 'No action taken by the extension',\n  },\n  auto_ignored: {\n    key: 'auto_ignored',\n    pretty: 'Auto-ignored',\n    description: 'Automatically ignored by the extension',\n  },\n  auto_accepted: {\n    key: 'auto_accepted',\n    pretty: 'Auto-accepted',\n    description: 'Automatically accepted by the extension',\n  },\n  auto_blocked: {\n    key: 'auto_blocked',\n    pretty: 'Auto-blocked',\n    description: 'Automatically blocked by the extension',\n  },\n};\n\nexport { conditions, actions, eventTypes };\n","const notificationSounds = {\n  'done-for-you': {\n    key: 'done-for-you',\n    name: 'Done for you',\n  },\n  juntos: {\n    key: 'juntos',\n    name: 'Juntos',\n  },\n  'piece-of-cake': {\n    key: 'piece-of-cake',\n    name: 'Piece of cake',\n  },\n  pristine: {\n    key: 'pristine',\n    name: 'Pristine',\n  },\n  swiftly: {\n    key: 'swiftly',\n    name: 'Swifty',\n  },\n  when: {\n    key: 'when',\n    name: 'When',\n  },\n  custom: {\n    key: 'custom',\n    name: 'Custom',\n  },\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport { notificationSounds };\n","const actions = {\n  accept: {\n    key: 'accept',\n    pretty: 'Accept',\n    description: 'Accept trade offer',\n  },\n  decline: {\n    key: 'decline',\n    pretty: 'Decline',\n    description: 'Decline trade offer',\n  },\n  notify: {\n    key: 'notify',\n    pretty: 'Notify',\n    description: 'Send a browser notification',\n  },\n  notify_discord: {\n    key: 'notify_discord',\n    pretty: 'Notify on Discord',\n    description: 'Send a Discord message.',\n  },\n  no_action: {\n    key: 'no_action',\n    pretty: 'No action',\n    description: 'Do nothing',\n  },\n};\n\nconst eventTypes = {\n  new: {\n    key: 'new',\n    pretty: 'New Trade Offer',\n    description: 'New trade offer spotted by the extension',\n  },\n  notify: {\n    key: 'notify',\n    pretty: 'Notified',\n    description: 'You were notified about this trade offer!',\n  },\n  notify_discord: {\n    key: 'notify_discord',\n    pretty: 'Notified on Discord',\n    description: 'A message was sent to you on Discord!',\n  },\n  decline: {\n    key: 'decline',\n    pretty: 'Declined',\n    description: 'The extension declined this trade offer!',\n  },\n  accept: {\n    key: 'accept',\n    pretty: 'Accepted',\n    description: 'The extension accepted this trade offer!',\n  },\n};\n\nconst conditions = {\n  profit_over: {\n    key: 'profit_over',\n    pretty: 'Profit over',\n    description: 'Projected profit equal or over the specified value',\n    with_value: true,\n    value_type: 'number',\n    default_value: 5,\n  },\n  profit_under: {\n    key: 'profit_under',\n    pretty: 'Profit under',\n    description: 'Projected profit is less than the specified value',\n    with_value: true,\n    value_type: 'number',\n    default_value: -50,\n  },\n  profit_percentage_over: {\n    key: 'profit_percentage_over',\n    pretty: 'Profit percentage over',\n    description: 'Projected profit percentage equal or over the specified value',\n    with_value: true,\n    value_type: 'number',\n    default_value: 10,\n  },\n  profit_percentage_under: {\n    key: 'profit_percentage_under',\n    pretty: 'Profit percentage under',\n    description: 'Projected profit percentage is less than the specified value',\n    with_value: true,\n    value_type: 'number',\n    default_value: -80,\n  },\n  has_message: {\n    key: 'has_message',\n    pretty: 'Has message',\n    description: 'The offer has a message attached',\n    with_value: false,\n  },\n  no_message: {\n    key: 'no_message',\n    pretty: 'Has no message',\n    description: 'The offer has no message attached',\n    with_value: false,\n  },\n  message_includes: {\n    key: 'message_includes',\n    pretty: 'Message includes',\n    description: 'The offer message includes the specified string',\n    with_value: true,\n    value_type: 'string',\n    default_value: 'please',\n  },\n  message_doesnt_include: {\n    key: 'message_doesnt_include',\n    pretty: 'Message does not include',\n    description: 'The offer has a message but it does not include the specified string',\n    with_value: true,\n    value_type: 'string',\n    default_value: 'please',\n  },\n  receiving_items_over: {\n    key: 'receiving_items_over',\n    pretty: 'Receiving x or more items',\n    description: 'Receiving x or more items in the offer',\n    with_value: true,\n    value_type: 'number',\n    default_value: 50,\n  },\n  receiving_items_under: {\n    key: 'receiving_items_under',\n    pretty: 'Receiving fewer than x items',\n    description: 'Receiving fewer than x items in the offer',\n    with_value: true,\n    value_type: 'number',\n    default_value: 1,\n  },\n  receiving_value_over: {\n    key: 'receiving_value_over',\n    pretty: 'Receiving items valued x or more',\n    description: 'Receiving items valued in total x or more in the offer',\n    with_value: true,\n    value_type: 'number',\n    default_value: 1000,\n  },\n  receiving_value_under: {\n    key: 'receiving_value_under',\n    pretty: 'Receiving items valued x or less',\n    description: 'Receiving items valued in total x or less in the offer',\n    with_value: true,\n    value_type: 'number',\n    default_value: 900,\n  },\n  giving_items_over: {\n    key: 'giving_items_over',\n    pretty: 'Giving x or more items',\n    description: 'Giving x or more items in the offer',\n    with_value: true,\n    value_type: 'number',\n    default_value: 50,\n  },\n  giving_items_under: {\n    key: 'giving_items_under',\n    pretty: 'Giving fewer than x items',\n    description: 'Giving fewer than x items in the offer',\n    with_value: true,\n    value_type: 'number',\n    default_value: 1,\n  },\n  giving_value_over: {\n    key: 'giving_value_over',\n    pretty: 'Giving items valued x or more',\n    description: 'Giving items valued in total x or more in the offer',\n    with_value: true,\n    value_type: 'number',\n    default_value: 2000,\n  },\n  giving_value_under: {\n    key: 'giving_value_under',\n    pretty: 'Giving items valued x or less',\n    description: 'Giving items valued in total x or less in the offer',\n    with_value: true,\n    value_type: 'number',\n    default_value: 1800,\n  },\n  receiving_non_csgo_items: {\n    key: 'receiving_non_csgo_items',\n    pretty: 'Receiving non-cs2 items',\n    description: 'The list of items to receive includes one or more non-cs2 items',\n    with_value: false,\n  },\n  giving_non_csgo_items: {\n    key: 'giving_non_csgo_items',\n    pretty: 'Giving non-cs2 items',\n    description: 'The list of items to give includes one or more non-cs2 items',\n    with_value: false,\n  },\n  receiving_no_price_items: {\n    key: 'receiving_no_price_items',\n    pretty: 'Receiving items with no price',\n    description: 'The list of items to receive includes one or more items that does not have extension price',\n    with_value: false,\n  },\n  giving_no_price_items: {\n    key: 'giving_no_price_items',\n    pretty: 'Giving items with no price',\n    description: 'The list of items to give includes one or more items that does not have extension price',\n    with_value: false,\n  },\n};\n\n// from: https://developer.valvesoftware.com/wiki/Steam_Web_API/IEconService\nconst offerStates = {\n  1: {\n    key: 1,\n    short: 'invalid',\n    pretty: 'Invalid',\n    description: 'Invalid',\n  },\n  2: {\n    key: 2,\n    short: 'valid',\n    pretty: 'Valid',\n    description: 'This trade offer has been sent, neither party has acted on it yet. ',\n  },\n  3: {\n    key: 3,\n    short: 'accepted',\n    pretty: 'Accepted',\n    description: 'The trade offer was accepted by the recipient and items were exchanged.',\n  },\n  4: {\n    key: 4,\n    short: 'countered',\n    pretty: 'Countered',\n    description: 'The recipient made a counter offer',\n  },\n  5: {\n    key: 5,\n    short: 'expired',\n    pretty: 'Expired',\n    description: 'The trade offer was not accepted before the expiration date',\n  },\n  6: {\n    key: 6,\n    short: 'canceled',\n    pretty: 'Canceled',\n    description: 'The sender cancelled the offer',\n  },\n  7: {\n    key: 7,\n    short: 'declined',\n    pretty: 'Declined',\n    description: 'The recipient declined the offer',\n  },\n  8: {\n    key: 8,\n    short: 'invalid_items',\n    pretty: 'Some items no longer available',\n    description: 'Some of the items in the offer are no longer available',\n  },\n  9: {\n    key: 9,\n    short: 'needs_confirmation',\n    pretty: 'Awaiting confirmation',\n    description: 'The offer hasn\\'t been sent yet and is awaiting email/mobile confirmation. The offer is only visible to the sender.',\n  },\n  10: {\n    key: 10,\n    short: 'canceled_second_factor',\n    pretty: 'Canceled before mobil confirmation',\n    description: 'Either party canceled the offer via email/mobile. The offer is visible to both parties, even if the sender canceled it before it was sent.',\n  },\n  11: {\n    key: 11,\n    short: 'in_escrow',\n    pretty: 'In trade-hold',\n    description: 'The trade has been placed on hold. The items involved in the trade have all been removed from both parties\\' inventories and will be automatically delivered in the future.',\n  },\n};\n\nconst operators = {\n  or: {\n    key: 'or',\n    pretty: 'OR',\n    description: 'OR operator',\n  },\n  and: {\n    key: 'and',\n    pretty: 'AND',\n    description: 'AND operator',\n  },\n};\n\nexport {\n  actions, eventTypes, offerStates, conditions, operators,\n};\n","const currencies = {\n  USD: {\n    short: 'USD',\n    long: 'United States dollar',\n    sign: '$',\n  },\n  EUR: {\n    short: 'EUR',\n    long: 'Euro',\n    sign: '€',\n  },\n  GBP: {\n    short: 'GBP',\n    long: 'Pound sterling',\n    sign: '£',\n  },\n  KEY: {\n    short: 'KEY',\n    long: 'Case Key',\n    sign: 'K',\n  },\n  CNY: {\n    short: 'CNY',\n    long: 'Renminbi',\n    sign: '¥',\n  },\n  JPY: {\n    short: 'JPY',\n    long: 'Japanese yen',\n    sign: '¥',\n  },\n  CAD: {\n    short: 'CAD',\n    long: 'Canadian dollar',\n    sign: 'C$',\n  },\n  AUD: {\n    short: 'AUD',\n    long: 'Australian dollar',\n    sign: 'A$',\n  },\n  HKD: {\n    short: 'HKD',\n    long: 'Hong Kong dollar',\n    sign: 'HK$',\n  },\n  ISK: {\n    short: 'ISK',\n    long: 'Icelandic króna',\n    sign: 'kr',\n  },\n  PHP: {\n    short: 'PHP',\n    long: 'Philippine peso',\n    sign: '₱',\n  },\n  DKK: {\n    short: 'DKK',\n    long: 'Danish krone',\n    sign: 'kr',\n  },\n  HUF: {\n    short: 'HUF',\n    long: 'Hungarian forint',\n    sign: 'Ft',\n  },\n  CZK: {\n    short: 'CZK',\n    long: 'Czech koruna',\n    sign: 'Kč',\n  },\n  RON: {\n    short: 'RON',\n    long: 'Romanian leu',\n    sign: 'L',\n  },\n  SEK: {\n    short: 'SEK',\n    long: 'Swedish krona',\n    sign: 'kr',\n  },\n  IDR: {\n    short: 'IDR',\n    long: 'Indonesian rupiah',\n    sign: 'Rp',\n  },\n  INR: {\n    short: 'INR',\n    long: 'Indian rupee',\n    sign: '₹',\n  },\n  BRL: {\n    short: 'BRL',\n    long: 'Brazilian real',\n    sign: 'R$',\n  },\n  RUB: {\n    short: 'RUB',\n    long: 'Russian ruble',\n    sign: '₽',\n  },\n  HRK: {\n    short: 'HRK',\n    long: 'Croatian kuna',\n    sign: 'kn',\n  },\n  THB: {\n    short: 'THB',\n    long: 'Thai baht',\n    sign: '฿',\n  },\n  CHF: {\n    short: 'CHF',\n    long: 'Swiss franc',\n    sign: 'CHF',\n  },\n  MYR: {\n    short: 'MYR',\n    long: 'Malaysian ringgit',\n    sign: 'RM',\n  },\n  BGN: {\n    short: 'BGN',\n    long: 'Bulgarian lev',\n    sign: 'лв',\n  },\n  TRY: {\n    short: 'TRY',\n    long: 'Turkish lira',\n    sign: '₺',\n  },\n  NOK: {\n    short: 'NOK',\n    long: 'Norwegian krone',\n    sign: 'kr',\n  },\n  NZD: {\n    short: 'NZD',\n    long: 'New Zealand dollar',\n    sign: 'NZ$',\n  },\n  ZAR: {\n    short: 'ZAR',\n    long: 'South African rand',\n    sign: 'R',\n  },\n  MXN: {\n    short: 'MXN',\n    long: 'Mexican peso',\n    sign: 'Mex$',\n  },\n  SGD: {\n    short: 'SGD',\n    long: 'Singapore dollar',\n    sign: 'S$',\n  },\n  ILS: {\n    short: 'ILS',\n    long: 'Israeli new shekel',\n    sign: '₪',\n  },\n  KRW: {\n    short: 'KRW',\n    long: 'South Korean won',\n    sign: '₩',\n  },\n  PLN: {\n    short: 'PLN',\n    long: 'Polish złoty',\n    sign: 'zł',\n  },\n  BTC: {\n    short: 'BTC',\n    long: 'Bitcoin',\n    sign: '₿',\n  },\n  ETH: {\n    short: 'ETH',\n    long: 'Ethereum',\n    sign: 'Ξ',\n  },\n  FET: {\n    short: 'FET',\n    long: 'Finney (0.001 of an Ether)',\n    sign: 'fΞ',\n  },\n  AED: {\n    short: 'AED',\n    long: 'United Arab Emirates Dirham',\n    sign: 'د.إ',\n  },\n  ARS: {\n    short: 'ARS',\n    long: 'Argentine Peso',\n    sign: 'AP$',\n  },\n  CLP: {\n    short: 'CLP',\n    long: 'Chilean Peso',\n    sign: 'CP$',\n  },\n  COP: {\n    short: 'COP',\n    long: 'Colombian Peso',\n    sign: 'COL$',\n  },\n  CRC: {\n    short: 'CRC',\n    long: 'Costa Rican Colón',\n    sign: '₡',\n  },\n  KWD: {\n    short: 'KWD',\n    long: 'Kuwaiti Dinar',\n    sign: 'د.ك',\n  },\n  KZT: {\n    short: 'KZT',\n    long: 'Kazakhstani Tenge',\n    sign: '₸',\n  },\n  PEN: {\n    short: 'PEN',\n    long: 'Peruvian Nuevo Sol',\n    sign: 'S/',\n  },\n  QAR: {\n    short: 'QAR',\n    long: 'Qatari Riyal',\n    sign: 'ر.ق',\n  },\n  SAR: {\n    short: 'SAR',\n    long: 'Saudi Riyal',\n    sign: '﷼',\n  },\n  TWD: {\n    short: 'TWD',\n    long: 'New Taiwan Dollar',\n    sign: 'NT$',\n  },\n  UAH: {\n    short: 'UAH',\n    long: 'Ukrainian Hryvnia',\n    sign: '₴',\n  },\n  UYU: {\n    short: 'UYU',\n    long: 'Uruguayan Peso',\n    sign: '$U',\n  },\n  VND: {\n    short: 'VND',\n    long: 'Vietnamese Dong',\n    sign: '₫',\n  },\n  GEL: {\n    short: 'GEL',\n    long: 'Georgian Lari',\n    sign: '₾',\n  },\n};\n\nconst pricingProviders = {\n  csgotrader: {\n    name: 'csgotrader',\n    long: 'CS2 Trader',\n    short: 'CS',\n    url: 'http://csgotrader.app/prices/',\n    description: 'The extension\\'s own pricing, aims to be accurate and to provide some kind of price for every item.',\n    pricing_modes: {\n      csgotrader: {\n        description: 'CS2 Trader price',\n        name: 'csgotrader',\n        long: 'CS2 Trader price',\n      },\n    },\n  },\n  bitskins: {\n    name: 'bitskins',\n    long: 'BITSKINS',\n    short: 'BS',\n    url: 'https://bitskins.com/',\n    description: 'BITSKINS is a \"real money\" marketplace where you can buy and sell skins. They provide sales data through their API.',\n    pricing_modes: {\n      bitskins: {\n        description: 'Standard BITSKINS price, I am not sure how they calculate it',\n        name: 'bitskins',\n        long: 'Standard BITSKINS price',\n      },\n      instant_sale: {\n        description: 'Instant sale - what bitskins pays for your item when they buy it themselves',\n        name: 'instant_sale',\n        long: 'Instant sale price',\n      },\n    },\n  },\n  steam: {\n    name: 'steam',\n    long: 'Steam Market',\n    short: 'SM',\n    url: 'https://steamcommunity.com/market/',\n    description: 'Steam Community Market sales history.',\n    pricing_modes: {\n      last_24h: {\n        description: 'Sales from the past 24 hours',\n        name: 'last_24h',\n        long: 'Last 24 Hours',\n      },\n      last_7d: {\n        description: 'Sales from the past 7 days',\n        name: 'last_7d',\n        long: 'Last 7 days',\n      },\n      last_30d: {\n        description: 'Sales from the past 30 days',\n        name: 'last_30d',\n        long: 'Last 30 days',\n      },\n    },\n  },\n  csmoney: {\n    name: 'csmoney',\n    long: 'CS.MONEY',\n    short: 'CM',\n    url: 'https://cs.money/',\n    description: \"CS.MONEY is a tradebot site that has it's own pricing. They also have different prices for each doppler phase.\",\n    pricing_modes: {\n      csmoney: {\n        description: 'CS.MONEY price',\n        name: 'csmoney',\n        long: 'CS.MONEY Price',\n      },\n    },\n  },\n  csgotm: {\n    name: 'csgotm',\n    long: 'CSGO.TM',\n    short: 'CT',\n    url: 'https://market.csgo.com/',\n    description: \"CSGO.TM or market.csgo.com is a Russian site for real money sales. They also provide pricing, but prices are missing for many items so I don't recommend using it.\",\n    pricing_modes: {\n      csgotm: {\n        description: 'CSGO.TM price',\n        name: 'csgotm',\n        long: 'CSGO.TM Price',\n      },\n    },\n  },\n  lootfarm: {\n    name: 'lootfarm',\n    long: 'LOOT.FARM',\n    short: 'LF',\n    url: 'https://loot.farm/',\n    description: 'LOOT.FARM is a tradebot site with public pricing, they tend to overvalue everything in general, so their prices differ from the others.',\n    pricing_modes: {\n      lootfarm: {\n        description: 'LOOT.FARM price',\n        name: 'lootfarm',\n        long: 'LOOT.FARM Price',\n      },\n    },\n  },\n  skinport: {\n    name: 'skinport',\n    long: 'Skinport.com',\n    short: 'SC',\n    url: 'https://skinport.com/?r=gery',\n    description: 'Skinport is a real money skin marketplace offering good prices and premium service',\n    pricing_modes: {\n      suggested_price: {\n        description: 'Skinport suggested price',\n        name: 'suggested_price',\n        long: 'Skinport suggested price',\n      },\n      starting_at: {\n        description: 'Skinport starting at price',\n        name: 'starting_at',\n        long: 'Skinport starting at',\n      },\n    },\n  },\n  csgoempire: {\n    name: 'csgoempire',\n    long: 'CSGOEmpire',\n    short: 'EM',\n    url: 'https://csgoempire.com/',\n    description: 'CSGOEmpire is a popular gambling site',\n    pricing_modes: {\n      csgoempire: {\n        description: 'CSGOEmpire price',\n        name: 'csgoempire',\n        long: 'CSGOEmpire price (by pricempire.com)',\n      },\n    },\n  },\n  swapgg: {\n    name: 'swapgg',\n    long: 'swap.gg',\n    short: 'SW',\n    url: 'https://swap.gg/',\n    description: 'swap.gg is an automated trade bot site',\n    pricing_modes: {\n      swapgg: {\n        description: 'swap.gg price',\n        name: 'swapgg',\n        long: 'swap.gg price (by pricempire.com)',\n      },\n    },\n  },\n  csgoexo: {\n    name: 'csgoexo',\n    long: 'CSGOEXO.COM',\n    short: 'EX',\n    url: 'https://csgoexo.com/',\n    description: 'CSGOEXO.COM is an automated trade bot site',\n    pricing_modes: {\n      csgoexo: {\n        description: 'CSGOEXO.COM.gg price',\n        name: 'csgoexo',\n        long: 'CSGOEXO.COM price (by pricempire.com)',\n      },\n    },\n  },\n  buff163: {\n    name: 'buff163',\n    long: 'BUFF163',\n    short: 'BF',\n    url: 'https://buff.163.com/',\n    description: 'BUFF is a Chinese peer to peer skin marketplace',\n    pricing_modes: {\n      starting_at: {\n        description: 'BUFF Starting at (lowest listing) price',\n        name: 'starting_at',\n        long: 'BUFF Starting at (by pricempire.com)',\n      },\n      highest_order: {\n        description: 'BUFF Highest order price',\n        name: 'highest_order',\n        long: 'BUFF Highest order (by pricempire.com)',\n      },\n    },\n  },\n  skinwallet: {\n    name: 'skinwallet',\n    long: 'Skinwallet.com',\n    short: 'SW',\n    url: 'https://www.skinwallet.com/',\n    description: 'SkinWallet is a market place and instant cash-for-skin service',\n    pricing_modes: {\n      skinwallet: {\n        description: 'Skinwallet.com price',\n        name: 'skinwallet',\n        long: 'Skinwallet.com price',\n      },\n    },\n  },\n  cstrade: {\n    name: 'cstrade',\n    long: 'CS.TRADE',\n    short: 'CSTR',\n    url: 'https://cs.trade/',\n    description: 'CS.TRADE is a trade is a less-known trade bot site',\n    pricing_modes: {\n      cstrade: {\n        description: 'CS.TRADE price',\n        name: 'cstrade',\n        long: 'CS.TRADE price',\n      },\n    },\n  },\n  csfloat: {\n    name: 'csfloat',\n    long: 'CSFloat.com',\n    short: 'CSFL',\n    url: 'https://csfloat.com/',\n    description: 'CSFloat Database amd p2p market',\n    pricing_modes: {\n      csfloat: {\n        description: 'CSFloat market price',\n        name: 'csfloat',\n        long: 'CSFloat price',\n      },\n    },\n  },\n  youpin: {\n    name: 'youpin',\n    long: 'YOUPIN898',\n    short: 'YP',\n    url: 'https://youpin898.com/',\n    description: 'New, emerging, china focused Buff alternative',\n    pricing_modes: {\n      youpin: {\n        description: 'YOUPIN898 market price',\n        name: 'youpin',\n        long: 'YOUPIN898 price',\n      },\n    },\n  },\n};\n\nconst realTimePricingModes = {\n  bid_price: {\n    key: 'bid_price',\n    name: 'Bid price - Current highest buy order',\n    description: 'Bid price - The value of the current highest buy order / bid for the item, also known as instant sell',\n  },\n  mid_price: {\n    key: 'mid_price',\n    name: 'Mid price - Average of the ask and bid prices',\n    description: 'Mid price - The average of ask and bid prices',\n  },\n  ask_price: {\n    key: 'ask_price',\n    name: 'Ask price - Current lowest listing / starting at',\n    description: 'The asking price, the price of the current lowest listing for the item, also known as the starting at price',\n  },\n};\n\n// Steam stores this data in the g_rgCurrencyData var in global.js\nconst steamCurrencyCodes = {\n  1: 'USD',\n  2: 'GBP',\n  3: 'EUR',\n  4: 'CHF',\n  5: 'RUB',\n  6: 'PLN',\n  7: 'BRL',\n  9: 'NOK',\n  10: 'IDR',\n  11: 'MYR',\n  12: 'PHP',\n  13: 'SGD',\n  14: 'THB',\n  15: 'VND',\n  16: 'KRW',\n  17: 'TRY',\n  18: 'UAH',\n  19: 'MXN',\n  20: 'CAD',\n  21: 'AUD',\n  22: 'NZD',\n  23: 'CNY',\n  24: 'INR',\n  25: 'CLP',\n  26: 'PEN',\n  27: 'COP',\n  28: 'ZAR',\n  29: 'HKD',\n  30: 'TWD',\n  31: 'SAR',\n  32: 'AED',\n  34: 'ARS',\n  35: 'ILS',\n  36: 'BYN',\n  37: 'KZT',\n  38: 'KWD',\n  39: 'QAR',\n  40: 'CRC',\n  41: 'UYU',\n  9000: 'RMB',\n};\n\nexport {\n  currencies, pricingProviders, realTimePricingModes, steamCurrencyCodes,\n};\n","const sortingModes = {\n  default: {\n    key: 'default',\n    name: 'Default (position last to first)',\n  },\n  reverse: {\n    key: 'reverse',\n    name: 'Reverse (position first to last)',\n  },\n  price_desc: {\n    key: 'price_desc',\n    name: 'Price (expensive to cheap)',\n  },\n  price_asc: {\n    key: 'price_asc',\n    name: 'Price (cheap to expensive)',\n  },\n  name_asc: {\n    key: 'name_asc',\n    name: 'Alphabetical (a to z)',\n  },\n  name_desc: {\n    key: 'name_desc',\n    name: 'Alphabetical (z to a)',\n  },\n  tradability_desc: {\n    key: 'tradability_desc',\n    name: 'Tradability (untradable to tradable)',\n  },\n  tradability_asc: {\n    key: 'tradability_asc',\n    name: 'Tradability (tradable to untradable)',\n  },\n  float_asc: {\n    key: 'float_asc',\n    name: 'Float (lowest to highest)',\n  },\n  float_desc: {\n    key: 'float_desc',\n    name: 'Float (highest to lowest)',\n  },\n  sticker_price_asc: {\n    key: 'sticker_price_asc',\n    name: 'Sticker price (cheap to expensive)',\n  },\n  sticker_price_desc: {\n    key: 'sticker_price_desc',\n    name: 'Sticker price (expensive to cheap)',\n  },\n  charm_price_asc: {\n    key: 'charm_price_asc',\n    name: 'Charm price (cheap to expensive)',\n  },\n  charm_price_desc: {\n    key: 'charm_price_desc',\n    name: 'Charm price (expensive to cheap)',\n  },\n};\n\nconst offersSortingModes = {\n  default: {\n    key: 'default',\n    name: 'Default (received last to first)',\n  },\n  reverse: {\n    key: 'reverse',\n    name: 'Reverse (received first to last)',\n  },\n  profit_amount: {\n    key: 'profit_amount',\n    name: 'Profit amount (most profitable to biggest loss)',\n  },\n  loss_amount: {\n    key: 'loss_amount',\n    name: 'Loss amount (biggest loss to most profitable)',\n  },\n  profit_percentage: {\n    key: 'profit_percentage',\n    name: 'Profit percentage (highest to lowest)',\n  },\n  loss_percentage: {\n    key: 'loss_percentage',\n    name: 'Loss percentage (lowest to highest)',\n  },\n  receiving_value: {\n    key: 'receiving_value',\n    name: 'Receiving side total value',\n  },\n  giving_value: {\n    key: 'giving_value',\n    name: 'Giving side total value',\n  },\n};\n\nconst listingsSortingModes = {\n  default: {\n    key: 'default',\n    name: 'Default Steam Order',\n  },\n  price_asc: sortingModes.price_asc,\n  price_desc: sortingModes.price_desc,\n  float_asc: sortingModes.float_asc,\n  float_desc: sortingModes.float_desc,\n  sticker_price_asc: sortingModes.sticker_price_asc,\n  sticker_price_desc: sortingModes.sticker_price_desc,\n  paint_index_asc: {\n    key: 'paint_index_asc',\n    name: 'Paint index (low to high)',\n  },\n  paint_index_desc: {\n    key: 'paint_index_desc',\n    name: 'Paint index (high to low)',\n  },\n  paint_seed_asc: {\n    key: 'paint_seed_asc',\n    name: 'Paint seed (low to high)',\n  },\n  paint_seed_desc: {\n    key: 'paint_seed_desc',\n    name: 'Paint seed (high to low)',\n  },\n};\n\nexport { sortingModes, offersSortingModes, listingsSortingModes };\n","import { currencies, pricingProviders, realTimePricingModes } from 'utils/static/pricing';\nimport { listingsSortingModes, offersSortingModes, sortingModes } from 'utils/static/sortingModes';\nimport defaultPopupLinks from 'utils/static/defaultPopupLinks';\nimport { actions, conditions } from 'utils/static/friendRequests';\nimport { actions as offerActions, conditions as offerConditions, operators } from 'utils/static/offers';\nimport { notificationSounds } from 'utils/static/notifications';\n\nconst storageKeys = {\n  quickDeclineOffer: true,\n  openOfferInTab: true,\n  showPlusRepButton: true,\n  reputationMessage: '+rep',\n  showReoccButton: true,\n  reoccuringMessage: 'I don\\'t have other accounts. If someone adds you with my name and picture they are scammers.',\n  nsfwFilter: false,\n  bookmarks: [],\n  steamAPIKey: '',\n  apiKeyValid: false,\n  steamAcessToken: '',\n  steamAcessTokenValid: false,\n  showRealStatus: true,\n  colorfulItems: true,\n  tradersBump: false,\n  markScammers: true,\n  numberOfListings: 10,\n  itemPricing: true,\n  pricingProvider: pricingProviders.csgotrader.name,\n  pricingMode: pricingProviders.csgotrader.pricing_modes.csgotrader.name,\n  prices: null,\n  currency: currencies.USD.short,\n  exchangeRate: 1.0,\n  exchangeRates: null,\n  hideOtherExtensionPrices: true,\n  inventorySortingMode: sortingModes.default.key,\n  notifyOnUpdate: false,\n  offerSortingMode: sortingModes.default.key,\n  switchToOtherInventory: false,\n  popupLinks: defaultPopupLinks,\n  steamIDOfUser: '',\n  nickNameOfUser: '',\n  autoFloatMarket: true,\n  autoFloatOffer: true,\n  autoFloatInventory: true,\n  tradeOffersLargerItems: true,\n  tradeOffersSortingMode: offersSortingModes.default.key,\n  defaultConverterCurrency1: currencies.USD.short,\n  defaultConverterCurrency2: currencies.EUR.short,\n  marketOriginalPrice: true,\n  autoSetSteamAPIKey: true,\n  autoOpenIDLogin: false,\n  csgotradersAutoLogin: false,\n  tradeHistoryLastUpdate: 0,\n  tradeHistoryOffers: true,\n  tradeHistoryInventory: true,\n  tradeOfferHeaderToLeft: true,\n  showStickerPrice: true,\n  activeOffers: {\n    lastFullUpdate: '',\n    items: [],\n    sent: [],\n    received: [],\n    descriptions: [],\n  },\n  itemInOffersInventory: true,\n  itemInOtherOffers: true,\n  showUpdatedRibbon: false,\n  friendRequests: {\n    inviters: [],\n    lastUpdated: Date.now(),\n  },\n  groupInvites: {\n    invitedTo: [],\n    lastUpdated: Date.now(),\n  },\n  steamSessionID: '',\n  friendRequestLogs: [],\n  friendRequestEvalRules: [\n    {\n      active: false,\n      condition: {\n        type: conditions.profile_private.key,\n      },\n      action: actions.ignore.key,\n    },\n    {\n      active: false,\n      condition: {\n        type: conditions.steam_level_under.key,\n        value: 5,\n      },\n      action: actions.ignore.key,\n    },\n    {\n      active: false,\n      condition: {\n        type: conditions.vac_banned.key,\n      },\n      action: actions.ignore.key,\n    },\n    {\n      active: false,\n      condition: {\n        type: conditions.community_banned.key,\n      },\n      action: actions.ignore.key,\n    },\n    {\n      active: false,\n      condition: {\n        type: conditions.trade_banned.key,\n      },\n      action: actions.ignore.key,\n    },\n    {\n      active: false,\n      condition: {\n        type: conditions.inventory_private.key,\n      },\n      action: actions.ignore.key,\n    },\n  ],\n  ignoreGroupInvites: false,\n  floatQueueActivity: {\n    lastUsed: Date.now(),\n    usedAt: '',\n  },\n  removeWebChatHeader: true,\n  discussionsToAutoBump: [],\n  discussionsToAutoBumpToDelete: [],\n  usefulTitles: false,\n  reloadListingOnError: true,\n  monitorFriendRequests: false,\n  showRealMoneySiteLinks: true,\n  realTimePricesFreqSuccess: 3000,\n  realTimePricesFreqFailure: 15000,\n  realTimePricesMode: realTimePricingModes.ask_price.key,\n  realTimePricesAutoLoadOffer: false,\n  realTimePricesAutoLoadInventory: false,\n  priceQueueActivity: {\n    lastUsed: Date.now(),\n    usedAt: '',\n  },\n  userSteamWalletCurrency: currencies.USD.short,\n  linkFilterOff: false,\n  marketListingsInstantBuy: true,\n  inventoryInstantQuickButtons: true,\n  safeInstantQuickSell: false,\n  marketMainPagePricesAutoLoad: true,\n  marketHistoryEventsToShow: 50,\n  marketShowFloatValuesOnly: false,\n  marketListingsDefaultSorting: listingsSortingModes.default.key,\n  marketAlwaysShowFloatTechnical: false,\n  showSelectedItemsTable: true,\n  highlightSeenListings: true,\n  calculatorConversionPlaceholder: 100,\n  calculatorPercentagePercentage: 3,\n  calculatorPercentageOf: 90,\n  calculatorReversePercentage: 30,\n  calculatorReverseValue: 2.7,\n  calculatorIncDecPercentage: 27,\n  calculatorIncDecResult: 1000,\n  monitorIncomingOffers: false,\n  tradeOffersEventLogs: [],\n  offerEvalRules: [\n    {\n      active: false,\n      conditions: [\n        {\n          type: offerConditions.giving_items_under.key,\n          value: 1,\n        },\n        {\n          type: offerConditions.no_message.key,\n        },\n      ],\n      operators: [\n        operators.and.key,\n      ],\n      action: offerActions.notify.key,\n    },\n    {\n      active: false,\n      conditions: [\n        {\n          type: offerConditions.profit_over.key,\n          value: offerConditions.profit_over.default_value,\n        },\n      ],\n      operators: [],\n      action: offerActions.notify.key,\n    },\n    {\n      active: false,\n      conditions: [\n        {\n          type: offerConditions.profit_percentage_over.key,\n          value: offerConditions.profit_percentage_over.default_value,\n        },\n      ],\n      operators: [],\n      action: offerActions.notify.key,\n    },\n    {\n      active: false,\n      conditions: [\n        {\n          type: offerConditions.receiving_items_under.key,\n          value: 1,\n        },\n        {\n          type: offerConditions.no_message.key,\n        },\n      ],\n      operators: [\n        operators.and.key,\n      ],\n      action: offerActions.decline.key,\n    },\n    {\n      active: false,\n      conditions: [\n        {\n          type: offerConditions.receiving_items_under.key,\n          value: 1,\n        },\n        {\n          type: offerConditions.message_includes.key,\n          value: offerConditions.message_includes.default_value,\n        },\n      ],\n      operators: [\n        operators.and.key,\n      ],\n      action: offerActions.accept.key,\n    },\n  ],\n  marketShowBuySellNonCommodity: true,\n  marketShowRecentActivityNonCommodity: true,\n  notificationSoundOn: true,\n  notificationSoundToPlay: notificationSounds['done-for-you'].key,\n  notificationVolume: 50,\n  customNotificationURL: 'https://csgotrader.app/extension/sound/notification/glitch-in-the-matrix.ogg',\n  showNumberOfOfferOnBadge: true,\n  notifyOnFriendRequest: false,\n  sendOfferBasedOnQueryParams: false,\n  showPriceEmpireLinkInInventory: true,\n  selectItemsBasedOnQueryParams: true,\n  discordNotificationHook: '',\n  allowDiscordNotification: false,\n  showBuffLookupInInventory: false,\n  removeAnimatedProfileBackgrounds: false,\n  inventoryShowCopyButtons: true,\n  outBidPercentage: 1,\n  showShortExteriorsInventory: true,\n  showShortExteriorsOffers: true,\n  clickChangeOfferAutomatically: false,\n  offerPresetMessages: [\n    'Feel free to counter!',\n    'That is the max I can do here, sorry!',\n    'Feel free to add me to discuss this further',\n  ],\n  showChatPresetMessages: true,\n  chatPresetMessages: [\n    'Hello! How can I help you today?',\n    'Hi! I have seen you added me but you are offline now. Message me later and tell me what I can do for you.',\n  ],\n  notifyAboutBeingLoggedOut: false,\n  notifyAboutBeingLoggedOutOnDiscord: false,\n  showTradeLockIndicatorInInventories: true,\n  numberOfFloatDigitsToShow: 4,\n  disableCancelEscrowedTrades: false,\n  showPaintSeedOnItems: false,\n  showFloatRankOnItems: false,\n  priceUpdateFreq: 24,\n  contrastingLook: false,\n  showFloatDBLookupInInventory: false,\n  fixTradeURLToken: true,\n  showYearsOnMarketGraphs: true,\n  logOutDetected: false,\n  lastLogoutNotified: new Date('2020-01-01T00:00:00.000Z').getTime(),\n  inventoryShowDuplicateCount: true,\n  legitSiteBotGroup: [\n    'bitskinsbots',\n    'skinportbots',\n    'tradeitggbots',\n    'SkinwalletBotsOfficial',\n    'skinswapbots',\n  ],\n  moveWithArrowKeysInventory: true,\n  showAllExteriorsInventory: false,\n  marketEnhanceStickers: true,\n  tradeOfferPricEmpireAction: true,\n  tradeOfferBuffAction: true,\n};\n\nconst nonSettingStorageKeys = ['bookmarks', 'prices', 'exchangeRates', 'clientID',\n  'tradeHistoryLastUpdate', 'activeOffers', 'showUpdatedRibbon', 'steamSessionID', 'groupInvites',\n  'friendRequests', 'friendRequestLogs', 'friendRequestEvalRules', 'floatQueueActivity',\n  'priceQueueActivity', 'userSteamWalletCurrency', 'tradeOffersEventLogs', 'numberOfNewItems', 'numberOfComments',\n  'recent401Detected', 'acessToken', 'activeOffers'];\n\nexport { storageKeys, nonSettingStorageKeys };\n"],"names":["CustomA11yButton","action","children","className","title","id","React","role","tabIndex","onClick","onKeyDown","storageKeys","realTimePricesFreqSuccess","realTimePricesFreqFailure","updatePrices","chrome","storage","local","get","result","provider","pricingProvider","mode","pricingMode","headers","Headers","append","request","Request","method","cache","fetch","then","response","ok","console","log","status","statusText","json","pricesJSON","itemPricing","prices","keys","Object","pricingProviders","steam","name","bitskins","skinport","pricing_modes","instant_sale","key","undefined","price","lootfarm","csgotm","csgoempire","swapgg","csgoexo","skinwallet","youpin","csmoney","csgotrader","cstrade","csfloat","doppler","buff163","set","catch","err","getPrice","marketHashName","dopplerInfo","exchangeRate","currency","toFixed","starting_at","display","currencies","sign","getStickerPriceTotal","stickers","total","forEach","sticker","parseFloat","prettyPrintPrice","nf","Intl","NumberFormat","format","Math","abs","getItemMarketLink","appID","getItemInventoryLink","steamID","contextID","assetID","getOfferLink","offerID","createOffscreen","async","reasons","justification","offscreen","hasDocument","createDocument","url","playAudio","runtime","getURL","includes","source","sourceType","volume","sourceURL","Reason","AUDIO_PLAYBACK","sendMessage","playAudioFirefox","audio","Audio","play","getFormattedPLPercentage","giving","receiving","isDopplerInName","RegExp","join","test","getCollection","descriptions","collectionName","description","value","slice","length","active","conditions","profile_private","pretty","with_value","profile_public","steam_level_under","value_type","default_value","steam_level_over","vac_banned","community_banned","game_banned","trade_banned","csgo_inventory_value_over","csgo_inventory_value_under","inventory_private","common_friends_over","common_friends_under","name_includes","request_received","from_country","all_users","actions","accept","ignore","block","no_action","eventTypes","new","disappeared","auto_ignored","auto_accepted","auto_blocked","notificationSounds","juntos","pristine","swiftly","when","custom","decline","notify","notify_discord","profit_over","profit_under","profit_percentage_over","profit_percentage_under","has_message","no_message","message_includes","message_doesnt_include","receiving_items_over","receiving_items_under","receiving_value_over","receiving_value_under","giving_items_over","giving_items_under","giving_value_over","giving_value_under","receiving_non_csgo_items","giving_non_csgo_items","receiving_no_price_items","giving_no_price_items","offerStates","short","operators","or","and","USD","long","EUR","GBP","KEY","CNY","JPY","CAD","AUD","HKD","ISK","PHP","DKK","HUF","CZK","RON","SEK","IDR","INR","BRL","RUB","HRK","THB","CHF","MYR","BGN","TRY","NOK","NZD","ZAR","MXN","SGD","ILS","KRW","PLN","BTC","ETH","FET","AED","ARS","CLP","COP","CRC","KWD","KZT","PEN","QAR","SAR","TWD","UAH","UYU","VND","GEL","last_24h","last_7d","last_30d","suggested_price","highest_order","realTimePricingModes","bid_price","mid_price","ask_price","sortingModes","default","reverse","price_desc","price_asc","name_asc","name_desc","tradability_desc","tradability_asc","float_asc","float_desc","sticker_price_asc","sticker_price_desc","charm_price_asc","charm_price_desc","offersSortingModes","profit_amount","loss_amount","profit_percentage","loss_percentage","receiving_value","giving_value","listingsSortingModes","paint_index_asc","paint_index_desc","paint_seed_asc","paint_seed_desc","quickDeclineOffer","openOfferInTab","showPlusRepButton","reputationMessage","showReoccButton","reoccuringMessage","nsfwFilter","bookmarks","steamAPIKey","apiKeyValid","steamAcessToken","steamAcessTokenValid","showRealStatus","colorfulItems","tradersBump","markScammers","numberOfListings","exchangeRates","hideOtherExtensionPrices","inventorySortingMode","notifyOnUpdate","offerSortingMode","switchToOtherInventory","popupLinks","defaultPopupLinks","steamIDOfUser","nickNameOfUser","autoFloatMarket","autoFloatOffer","autoFloatInventory","tradeOffersLargerItems","tradeOffersSortingMode","defaultConverterCurrency1","defaultConverterCurrency2","marketOriginalPrice","autoSetSteamAPIKey","autoOpenIDLogin","csgotradersAutoLogin","tradeHistoryLastUpdate","tradeHistoryOffers","tradeHistoryInventory","tradeOfferHeaderToLeft","showStickerPrice","activeOffers","lastFullUpdate","items","sent","received","itemInOffersInventory","itemInOtherOffers","showUpdatedRibbon","friendRequests","inviters","lastUpdated","Date","now","groupInvites","invitedTo","steamSessionID","friendRequestLogs","friendRequestEvalRules","condition","type","ignoreGroupInvites","floatQueueActivity","lastUsed","usedAt","removeWebChatHeader","discussionsToAutoBump","discussionsToAutoBumpToDelete","usefulTitles","reloadListingOnError","monitorFriendRequests","showRealMoneySiteLinks","realTimePricesMode","realTimePricesAutoLoadOffer","realTimePricesAutoLoadInventory","priceQueueActivity","userSteamWalletCurrency","linkFilterOff","marketListingsInstantBuy","inventoryInstantQuickButtons","safeInstantQuickSell","marketMainPagePricesAutoLoad","marketHistoryEventsToShow","marketShowFloatValuesOnly","marketListingsDefaultSorting","marketAlwaysShowFloatTechnical","showSelectedItemsTable","highlightSeenListings","calculatorConversionPlaceholder","calculatorPercentagePercentage","calculatorPercentageOf","calculatorReversePercentage","calculatorReverseValue","calculatorIncDecPercentage","calculatorIncDecResult","monitorIncomingOffers","tradeOffersEventLogs","offerEvalRules","offerConditions","offerActions","marketShowBuySellNonCommodity","marketShowRecentActivityNonCommodity","notificationSoundOn","notificationSoundToPlay","notificationVolume","customNotificationURL","showNumberOfOfferOnBadge","notifyOnFriendRequest","sendOfferBasedOnQueryParams","showPriceEmpireLinkInInventory","selectItemsBasedOnQueryParams","discordNotificationHook","allowDiscordNotification","showBuffLookupInInventory","removeAnimatedProfileBackgrounds","inventoryShowCopyButtons","outBidPercentage","showShortExteriorsInventory","showShortExteriorsOffers","clickChangeOfferAutomatically","offerPresetMessages","showChatPresetMessages","chatPresetMessages","notifyAboutBeingLoggedOut","notifyAboutBeingLoggedOutOnDiscord","showTradeLockIndicatorInInventories","numberOfFloatDigitsToShow","disableCancelEscrowedTrades","showPaintSeedOnItems","showFloatRankOnItems","priceUpdateFreq","contrastingLook","showFloatDBLookupInInventory","fixTradeURLToken","showYearsOnMarketGraphs","logOutDetected","lastLogoutNotified","getTime","inventoryShowDuplicateCount","legitSiteBotGroup","moveWithArrowKeysInventory","showAllExteriorsInventory","marketEnhanceStickers","tradeOfferPricEmpireAction","tradeOfferBuffAction"],"sourceRoot":""}