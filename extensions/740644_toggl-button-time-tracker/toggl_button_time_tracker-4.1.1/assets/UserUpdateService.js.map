{"version":3,"file":"UserUpdateService.js","sources":["../../../src/v4/services/WSPreferencesService.ts","../../../src/lib/full-fetch.ts","../../../src/onboarding/config.ts","../../../src/v4/services/TEConstraintsService.ts","../../../src/pomodoro/utils/getRemainingSessionTime.ts","../../../src/v4/services/OrganizationsListService.ts","../../../src/v4/services/TagsCreateService.ts","../../../src/v4/services/UserUpdateService.ts"],"sourcesContent":["import apiClient from '@src/background/_internal/_api'\n\nimport { type WorkspacePreferences } from '@toggl/track-types'\n\nimport { BaseService } from '../lib/BaseService'\nimport { useBrowserStorageLocal } from '../lib/use-browser-storage'\n\nclass Service<K extends string> extends BaseService<WorkspacePreferences, K> {\n  async invoke(wid: number, opts: { store?: boolean } = { store: false }) {\n    const { data } = await apiClient.workspaces.preferences.fetch(wid)\n\n    // Insert into storage\n    if (opts.store) {\n      await this.store(data)\n    }\n\n    return data\n  }\n}\n\nconst WSPreferencesService = new Service('FETCH_WS_PREFERENCES_V4')\n\ntype StorageData = Awaited<ReturnType<typeof WSPreferencesService['invoke']>>\n\nconst useWSPreferencesStorage = (initial: StorageData | null = null) => {\n  return useBrowserStorageLocal<StorageData>(\n    WSPreferencesService.storageKey,\n    initial\n  )\n}\n\nexport { WSPreferencesService, useWSPreferencesStorage }\n","import { LOCAL_STATE } from '@src/lib/constants'\nimport { Db } from '@src/lib/db'\nimport { useBrowserStorageLocal } from '@src/v4/lib/use-browser-storage'\nimport { ClientsListService } from '@src/v4/services/ClientsListService'\nimport { CurrentTEService } from '@src/v4/services/CurrentTEService'\nimport { OrgFeaturesService } from '@src/v4/services/OrgFeaturesService'\nimport { ProjectsListService } from '@src/v4/services/ProjectsListService'\nimport { SelectedWorkspaceService } from '@src/v4/services/SelectedWorkspaceService'\nimport { TagsListService } from '@src/v4/services/TagsListService'\nimport { TasksListService } from '@src/v4/services/TasksListService'\nimport { UsersService } from '@src/v4/services/UsersService'\nimport { WorkspacesListService } from '@src/v4/services/WorkspacesListService'\nimport { WSPreferencesService } from '@src/v4/services/WSPreferencesService'\nimport Browser from 'webextension-polyfill'\n\nimport { RequestError } from '@toggl/track-api'\n\nimport { logger } from './errorReport'\n\nexport const FullFetchAlarm = {\n  name: 'FULL_FETCH_ALARM',\n  retryAlarmName: 'FULL_FETCH_RETRY',\n  statusKey: 'fullFetchStatus' as const,\n\n  handler: async () => {\n    logger.debug('Alarm::FullFetchAlarm.handler')\n    const status = await FullFetchAlarm.updateStatus({\n      loading: true,\n      error: null,\n      lastRunAt: new Date().toISOString(),\n    })\n    // Run a full fetch if the user is logged in.\n    try {\n      // No user? Throw an error.\n      await UsersService.invoke({ store: true })\n\n      await Promise.all([\n        CurrentTEService.invoke({ store: true }),\n        WorkspacesListService.invoke(null),\n        TagsListService.invoke(null),\n        TasksListService.invoke(null),\n        ClientsListService.invoke(null),\n        ProjectsListService.invoke(null),\n        OrgFeaturesService.invoke(),\n\n        // This one needs to be invoked with a workspace ID\n        WSPreferencesService.invoke(\n          (await SelectedWorkspaceService.retrieve()) ?? 0,\n          {\n            store: true,\n          }\n        ),\n      ])\n      await FullFetchAlarm.updateStatus({\n        loading: false,\n        lastSuccessfulAt: new Date().toISOString(),\n        retryCount: 0,\n      })\n      await Browser.alarms.clear(FullFetchAlarm.retryAlarmName)\n    } catch (error) {\n      const newStatus = await FullFetchAlarm.updateStatus({\n        loading: false,\n        error: error.message,\n        retryCount: (status.retryCount ?? 0) + 1,\n      })\n\n      if (error instanceof RequestError && error.response?.status !== 403) {\n        // Exponential backoff with a max of 60 minutes\n        const backOffMinutes = Math.min(Math.pow(2, newStatus.retryCount), 30)\n        Browser.alarms.create(FullFetchAlarm.retryAlarmName, {\n          when: Date.now() + 60 * 1000 * backOffMinutes,\n        })\n      }\n      logger.error(error) // TODO: Does this needs to go to Sentry as well? @with-shrey @askides\n    }\n  },\n\n  updateStatus: async (\n    upsertData: Partial<typeof LOCAL_STATE['fullFetchStatus']>\n  ) => {\n    const lastFullFetch = await Db.getLocal(FullFetchAlarm.statusKey)\n    const newState = {\n      ...lastFullFetch,\n      ...upsertData,\n    }\n    await Db.setLocal(FullFetchAlarm.statusKey, newState)\n    return newState\n  },\n\n  configure() {\n    Browser.alarms.create(FullFetchAlarm.name, {\n      periodInMinutes: 2 * 60, // 2 hours\n    })\n  },\n}\n\nexport const useFullFetchStatus = () => {\n  return useBrowserStorageLocal<typeof LOCAL_STATE['fullFetchStatus']>(\n    FullFetchAlarm.statusKey,\n    LOCAL_STATE[FullFetchAlarm.statusKey]\n  )\n}\n","export const config = {\n  storage: 'tesListOnboardingStep' as const,\n}\n","import { type TimeEntryConstraints, type TimeEntryV9 } from '@toggl/track-types'\n\nconst TEConstraintsService = {\n  check(\n    constraints: TimeEntryConstraints | null,\n    data?: Pick<\n      TimeEntryV9,\n      'description' | 'project_id' | 'tag_ids' | 'task_id'\n    >\n  ) {\n    if (\n      !data ||\n      !constraints ||\n      constraints.time_entry_constraints_enabled === false\n    ) {\n      return []\n    }\n\n    const missing: Array<string> = []\n\n    if (constraints.description_present && !data.description.length) {\n      missing.push('description')\n    }\n\n    if (constraints.project_present && !data.project_id) {\n      missing.push('project')\n    }\n\n    if (constraints.tag_present && !data.tag_ids?.length) {\n      missing.push('tag')\n    }\n\n    if (constraints.task_present && !data.task_id) {\n      missing.push('task')\n    }\n\n    return missing\n  },\n}\n\nexport { TEConstraintsService }\n","import { DateTime } from 'luxon'\n\nexport const getRemainingSessionTime = (\n  startedAt: number,\n  duration: number\n) => {\n  const startedAtInLuxon = DateTime.fromMillis(startedAt)\n  const elapsed = DateTime.now().diff(startedAtInLuxon, 'seconds').seconds\n  const result = duration - elapsed\n\n  // Avoid NaN or Infinity values, the alarm will not be set.\n  if (Number.isFinite(result)) {\n    return result\n  }\n\n  return duration\n}\n","import apiClient from '@src/background/_internal/_api'\nimport { BaseService } from '@src/v4/lib/BaseService'\n\nimport { type Organization } from '@toggl/track-types'\n\nimport { useBrowserStorageLocal } from '../lib/use-browser-storage'\n\nclass ListService<K extends string> extends BaseService<Organization[], K> {\n  async invoke() {\n    const { data } = await apiClient.me.organizations.list()\n    await this.store(data)\n    return data\n  }\n}\n\nconst OrganizationsListService = new ListService('FETCH_ORGANIZATIONS_V4')\n\ntype StorageData = Awaited<\n  ReturnType<typeof OrganizationsListService['invoke']>\n>\n\nconst useOrganizationsListStorage = (initial: StorageData | null = null) => {\n  return useBrowserStorageLocal<StorageData>(\n    OrganizationsListService.storageKey,\n    initial\n  )\n}\n\nexport { OrganizationsListService, useOrganizationsListStorage }\n","import apiClient from '@src/background/_internal/_api'\nimport { logger } from '@src/lib/errorReport'\nimport { useMutation } from '@tanstack/react-query'\nimport Browser from 'webextension-polyfill'\n\nimport { type Tag } from '@toggl/track-types'\n\nimport { useTagsListStorage } from './TagsListService'\n\ntype MutationContext = { name: string; workspaceId: number }\n\nconst TagsCreateService = {\n  create: async (name: string, workspaceId: number) => {\n    const { data } = await apiClient.tag.create(name, workspaceId)\n    return data\n  },\n\n  dispatch(data: MutationContext): Promise<Tag> {\n    return Browser.runtime.sendMessage({\n      type: 'CREATE_TAG_V4',\n      payload: data,\n    })\n  },\n}\n\ntype MutationData = Awaited<ReturnType<typeof TagsCreateService['create']>>\n\nconst useTagsCreateMutation = () => {\n  const [, setTagsList] = useTagsListStorage()\n\n  return useMutation<MutationData, Error, MutationContext>(\n    (data) => TagsCreateService.dispatch(data),\n    {\n      onError: (error) => {\n        return logger.error(error)\n      },\n\n      // Unsure about if will be useful.\n      onSuccess: (data) => {\n        setTagsList((old) => {\n          return { ...old, [data.id]: data }\n        })\n      },\n    }\n  )\n}\n\nexport { TagsCreateService, useTagsCreateMutation }\n","import apiClient from '@src/background/_internal/_api'\nimport { logger } from '@src/lib/errorReport'\nimport { useUserStorage } from '@src/v4/services/UsersService'\nimport { useMutation } from '@tanstack/react-query'\nimport Browser from 'webextension-polyfill'\n\nimport { type CurrentUser } from '@toggl/track-types'\n\ntype MutationContext = Partial<CurrentUser>\n\nconst UserUpdateService = {\n  eventKey: 'UPDATE_USER_V4' as const,\n\n  invoke: async (payload: Partial<CurrentUser>) => {\n    // @ts-expect-error No overload matches this call // TODO: fix upstream\n    await apiClient.me.update(payload)\n  },\n\n  dispatch(data: MutationContext): Promise<void> {\n    return Browser.runtime.sendMessage({\n      type: UserUpdateService.eventKey,\n      payload: data,\n    })\n  },\n}\n\ntype MutationData = Awaited<ReturnType<typeof UserUpdateService['invoke']>>\n\nconst useUserUpdateMutation = () => {\n  const [, setUser] = useUserStorage()\n  return useMutation<MutationData, Error, MutationContext>(\n    (data) => UserUpdateService.dispatch(data),\n    {\n      onError: (error) => {\n        return logger.error(error)\n      },\n      onSuccess: (_, payload) => {\n        setUser((prev) => ({ ...prev, ...payload } as CurrentUser))\n      },\n    }\n  )\n}\n\nexport { UserUpdateService, useUserUpdateMutation }\n"],"names":["Service","BaseService","invoke","wid","opts","store","data","apiClient","workspaces","preferences","fetch","WSPreferencesService","useWSPreferencesStorage","initial","useBrowserStorageLocal","storageKey","FullFetchAlarm","name","retryAlarmName","statusKey","handler","logger","debug","status","updateStatus","loading","error","lastRunAt","Date","toISOString","UsersService","Promise","all","CurrentTEService","WorkspacesListService","TagsListService","TasksListService","ClientsListService","ProjectsListService","OrgFeaturesService","SelectedWorkspaceService","retrieve","lastSuccessfulAt","retryCount","Browser","alarms","clear","newStatus","message","RequestError","response","backOffMinutes","Math","min","pow","create","when","now","upsertData","newState","Db","getLocal","setLocal","configure","periodInMinutes","useFullFetchStatus","LOCAL_STATE","config","storage","TEConstraintsService","check","constraints","time_entry_constraints_enabled","missing","description_present","description","length","push","project_present","project_id","tag_present","tag_ids","task_present","task_id","getRemainingSessionTime","startedAt","duration","startedAtInLuxon","DateTime","fromMillis","elapsed","diff","seconds","result","Number","isFinite","ListService","me","organizations","list","OrganizationsListService","useOrganizationsListStorage","TagsCreateService","workspaceId","tag","dispatch","runtime","sendMessage","type","payload","useTagsCreateMutation","setTagsList","useTagsListStorage","useMutation","onError","onSuccess","old","id","UserUpdateService","eventKey","update","useUserUpdateMutation","setUser","useUserStorage","_","prev"],"mappings":"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"}