class WebauthnUtils{static fromB64ToArray(str){if(null==str)return null;const binaryString=atob(str);return new Uint8Array(Array.from(binaryString,char=>char.charCodeAt(0)))}static fromUrlB64ToB64(urlB64Str){const cleanedStr=urlB64Str.replace(/-/g,"+").replace(/_/g,"/"),padding="=".repeat((4-cleanedStr.length%4)%4);return cleanedStr+(padding.length>0?padding:"")}static fromBufferToB64(buffer){if(null==buffer)return null;const bytes=new Uint8Array(buffer);return btoa(String.fromCharCode(...bytes))}static fromUrlB64ToArray(str){return WebauthnUtils.fromB64ToArray(WebauthnUtils.fromUrlB64ToB64(str))}static fromBufferToUrlB64(buffer){return WebauthnUtils.fromB64ToUrlB64(WebauthnUtils.fromBufferToB64(buffer))}static fromB64ToUrlB64(b64Str){return b64Str.replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}static bufferToString(bufferSource){const buffer=WebauthnUtils.bufferSourceToUint8Array(bufferSource);return WebauthnUtils.fromBufferToUrlB64(buffer)}static stringToBuffer(str){return WebauthnUtils.fromUrlB64ToArray(str)}static bufferSourceToUint8Array(bufferSource){return new Uint8Array(bufferSource instanceof ArrayBuffer?bufferSource:bufferSource.buffer)}static isArrayBuffer(bufferSource){return bufferSource instanceof ArrayBuffer||void 0===bufferSource.buffer}static formatCredentialCreation(options,origin,sameOriginWithAncestors,fallbackSupported){const{publicKey:keyOptions}=options;if(!keyOptions)throw new Error("Public-key options not found");const{authenticatorSelection:authenticatorSelection={},excludeCredentials:excludeCredentials=[],pubKeyCredParams:pubKeyCredParams=[]}=keyOptions;return{origin:origin,attestation:keyOptions.attestation,authenticatorSelection:{requireResidentKey:authenticatorSelection.requireResidentKey,residentKey:authenticatorSelection.residentKey,userVerification:authenticatorSelection.userVerification},challenge:WebauthnUtils.bufferToString(keyOptions.challenge),excludeCredentials:excludeCredentials.map(({id:id,transports:transports,type:type})=>({id:WebauthnUtils.bufferToString(id),transports:transports,type:type})),extensions:void 0,pubKeyCredParams:pubKeyCredParams.map(({alg:alg,type:type})=>({alg:alg,type:type})),rp:{id:keyOptions.rp.id,name:keyOptions.rp.name},user:{id:WebauthnUtils.bufferToString(keyOptions.user.id),displayName:keyOptions.user.displayName},timeout:keyOptions.timeout,sameOriginWithAncestors:sameOriginWithAncestors,fallbackSupported:fallbackSupported}}static formatCredentialCreateResult(result){const credential={id:result.credentialId,rawId:WebauthnUtils.stringToBuffer(result.credentialId),type:"public-key",authenticatorAttachment:"platform",response:{clientDataJSON:WebauthnUtils.stringToBuffer(result.clientDataJSON),attestationObject:WebauthnUtils.stringToBuffer(result.attestationObject),getAuthenticatorData:()=>WebauthnUtils.stringToBuffer(result.authData),getPublicKey:()=>WebauthnUtils.stringToBuffer(result.publicKey),getPublicKeyAlgorithm:()=>result.publicKeyAlgorithm,getTransports:()=>result.transports},getClientExtensionResults:()=>({})};return Object.setPrototypeOf(credential.response,AuthenticatorAttestationResponse.prototype),Object.setPrototypeOf(credential,PublicKeyCredential.prototype),credential}static formatCredentialRequest(options,origin,sameOriginWithAncestors,fallbackSupported){const{publicKey:keyOptions}=options;if(!keyOptions)throw new Error("Public-key options not found");const{allowCredentials:allowCredentials=[]}=keyOptions;return{origin:origin,allowedCredentialIds:allowCredentials.map(c=>WebauthnUtils.bufferToString(c.id)),challenge:WebauthnUtils.bufferToString(keyOptions.challenge),rpId:keyOptions.rpId,userVerification:keyOptions.userVerification,timeout:keyOptions.timeout,sameOriginWithAncestors:sameOriginWithAncestors,fallbackSupported:fallbackSupported}}static formatCredentialAssertResult(result){const credential={id:result.credentialId,rawId:WebauthnUtils.stringToBuffer(result.credentialId),type:"public-key",response:{authenticatorData:WebauthnUtils.stringToBuffer(result.authenticatorData),clientDataJSON:WebauthnUtils.stringToBuffer(result.clientDataJSON),signature:WebauthnUtils.stringToBuffer(result.signature),userHandle:WebauthnUtils.stringToBuffer(result.userHandle)},getClientExtensionResults:()=>({}),authenticatorAttachment:"platform"};return Object.setPrototypeOf(credential.response,AuthenticatorAssertionResponse.prototype),Object.setPrototypeOf(credential,PublicKeyCredential.prototype),credential}}const BrowserPublicKeyCredential=window.PublicKeyCredential,browserNativeWebauthnSupport=null!=window.PublicKeyCredential;let browserNativeWebauthnPlatformAuthenticatorSupport=!1;if(!browserNativeWebauthnSupport)try{navigator.credentials={create(){throw new Error("Webauthn not supported in this browser.")},get(){throw new Error("Webauthn not supported in this browser.")}},window.PublicKeyCredential=class PolyfillPublicKeyCredential{static isUserVerifyingPlatformAuthenticatorAvailable(){return Promise.resolve(!0)}},window.AuthenticatorAttestationResponse=class PolyfillAuthenticatorAttestationResponse{}}catch{}browserNativeWebauthnSupport&&BrowserPublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable().then(available=>{browserNativeWebauthnPlatformAuthenticatorSupport=available,available||(window.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable=()=>Promise.resolve(!0))});const webauthnCallbacks={},nativeCredentials={create:navigator.credentials.create.bind(navigator.credentials),get:navigator.credentials.get.bind(navigator.credentials)},psCredentials={};function sendWebauthnRequest(request){const cb=new Promise((res,rej)=>{webauthnCallbacks[request.requestId]=res});return window.postMessage(request,window.location.origin),cb}function handleWebauthnResponse(msg){msg.requestId&&webauthnCallbacks[msg.requestId]&&(webauthnCallbacks[msg.requestId](msg),delete webauthnCallbacks[msg.requestId])}psCredentials.create=async function(options,abortController){const publicKeyOptions=options.publicKey,authenticatorAttachment=publicKeyOptions.authenticatorSelection.authenticatorAttachment,fallbackSupported="platform"===authenticatorAttachment&&browserNativeWebauthnPlatformAuthenticatorSupport||"platform"!==authenticatorAttachment&&browserNativeWebauthnSupport;if(options&&"publicKey"in options){let runningInFrame=!1;try{runningInFrame=window.self===window.top}catch{}if(null!=abortController&&null!=abortController){const abortListener=()=>window.postMessage({type:"webauthn_abort_request"});abortController.signal.addEventListener("abort",abortListener)}const requestId=Date.now(),registerRequest={options:WebauthnUtils.formatCredentialCreation(options,window.location.origin,runningInFrame,fallbackSupported),requestId:requestId,type:"webauthn_register_request"},webauthnResponse=await sendWebauthnRequest(registerRequest);return null!=abortController&&null!=abortController&&abortController.signal.removeEventListener("abort",abortListener),null!=webauthnResponse.response.fallbackRequested&&1==webauthnResponse.response.fallbackRequested&&fallbackSupported?nativeCredentials.create(options):WebauthnUtils.formatCredentialCreateResult(webauthnResponse.response)}return nativeCredentials.create(options)},psCredentials.get=async function(options,abortController){if(options&&"publicKey"in options){if(options.mediation&&"optional"!==options.mediation)return nativeCredentials.get(options);if(null!=abortController&&null!=abortController){const abortListener=()=>window.postMessage({type:"webauthn_abort_request"});abortController.signal.addEventListener("abort",abortListener)}const requestId=Date.now(),signRequest={options:WebauthnUtils.formatCredentialRequest(options,window.location.origin,!0,browserNativeWebauthnSupport),requestId:requestId,type:"webauthn_sign_request"},webauthnResponse=await sendWebauthnRequest(signRequest);return null!=webauthnResponse.response.fallbackRequested&&1==webauthnResponse.response.fallbackRequested&&browserNativeWebauthnSupport?nativeCredentials.get(options):WebauthnUtils.formatCredentialAssertResult(webauthnResponse.response)}return nativeCredentials.get(options)},Object.assign(navigator.credentials,psCredentials),window.addEventListener("message",(function(evt){const msg=evt.data,supportedTypes=["webauthn_register_response","webauthn_sign_response"];supportedTypes.includes(msg.type)&&handleWebauthnResponse(msg)}),!0);