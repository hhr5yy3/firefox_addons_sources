(()=>{var e,t,r,n={1755:(e,t,r)=>{"use strict";r.d(t,{C3:()=>h,H9:()=>m,Kp:()=>u,R_:()=>d,pw:()=>p,r:()=>s});var n=r(1413),o=r(1002),i=r(2138),a=r(7294),l=r(334),c=r(8186);function u(e,t){(0,l.ZP)(e,"[@ant-design/icons] ".concat(t))}function s(e){return"object"===(0,o.Z)(e)&&"string"==typeof e.name&&"string"==typeof e.theme&&("object"===(0,o.Z)(e.icon)||"function"==typeof e.icon)}function f(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object.keys(e).reduce((function(t,r){var n=e[r];if("class"===r)t.className=n,delete t.class;else t[r]=n;return t}),{})}function d(e,t,r){return r?a.createElement(e.tag,(0,n.Z)((0,n.Z)({key:t},f(e.attrs)),r),(e.children||[]).map((function(r,n){return d(r,"".concat(t,"-").concat(e.tag,"-").concat(n))}))):a.createElement(e.tag,(0,n.Z)({key:t},f(e.attrs)),(e.children||[]).map((function(r,n){return d(r,"".concat(t,"-").concat(e.tag,"-").concat(n))})))}function p(e){return(0,i.R_)(e)[0]}function m(e){return e?Array.isArray(e)?e:[e]:[]}var y=!1,h=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n";(0,a.useEffect)((function(){y||((0,c.insertCss)(e,{prepend:!0}),y=!0)}),[])}},1808:(e,t,r)=>{"use strict";r.d(t,{fk:()=>i});var n,o=r(8924),i=function(){if(!(0,o.Z)()||!window.document.documentElement)return!1;if(void 0!==n)return n;var e=document.createElement("div");return e.style.display="flex",e.style.flexDirection="column",e.style.rowGap="1px",e.appendChild(document.createElement("div")),e.appendChild(document.createElement("div")),document.body.appendChild(e),n=1===e.scrollHeight,document.body.removeChild(e),n}},3008:(e,t,r)=>{"use strict";r.d(t,{f:()=>a});var n=r(7462),o=r(6805),i=(0,n.Z)({},o.Z.Modal);function a(e){i=e?(0,n.Z)((0,n.Z)({},i),e):(0,n.Z)({},o.Z.Modal)}},9669:(e,t,r)=>{e.exports=r(1609)},8665:(e,t,r)=>{"use strict";r.d(t,{Z:()=>l,k:()=>i});var n=r(7294),o=r(334),i="RC_FORM_INTERNAL_HOOKS",a=function(){(0,o.ZP)(!1,"Can not find FormContext. Please make sure you wrap Field under Form.")};const l=n.createContext({getFieldValue:a,getFieldsValue:a,getFieldError:a,getFieldWarning:a,getFieldsError:a,isFieldsTouched:a,isFieldTouched:a,isFieldValidating:a,isFieldsValidating:a,resetFields:a,setFields:a,setFieldsValue:a,validateFields:a,submit:a,getInternalHooks:function(){return a(),{dispatch:a,initEntityValue:a,registerField:a,useSubscribe:a,setInitialValues:a,destroyForm:a,setCallbacks:a,registerWatch:a,getFields:a,setValidateMessages:a,setPreserve:a,getInitialValue:a}}})},2131:(e,t,r)=>{"use strict";r.d(t,{Z:()=>n});const n=r(7294).createContext(null)},6077:(e,t,r)=>{"use strict";r.d(t,{RV:()=>c.R,ZM:()=>s.Z,ZP:()=>p,aV:()=>i.Z,cI:()=>a.Z,gN:()=>o.Z,qo:()=>f.Z,zb:()=>u.Z});var n=r(7294),o=r(1045),i=r(5378),a=r(4294),l=r(5318),c=r(1696),u=r(8665),s=r(2131),f=r(1806),d=n.forwardRef(l.Z);d.FormProvider=c.R,d.Field=o.Z,d.List=i.Z,d.useForm=a.Z,d.useWatch=f.Z;const p=d},2408:(e,t,r)=>{"use strict";var n=r(7418),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,c=o?Symbol.for("react.strict_mode"):60108,u=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.forward_ref"):60112,p=o?Symbol.for("react.suspense"):60113,m=o?Symbol.for("react.memo"):60115,y=o?Symbol.for("react.lazy"):60116,h="function"==typeof Symbol&&Symbol.iterator;function b(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var v={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function w(e,t,r){this.props=e,this.context=t,this.refs=g,this.updater=r||v}function j(){}function S(e,t,r){this.props=e,this.context=t,this.refs=g,this.updater=r||v}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(b(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},j.prototype=w.prototype;var x=S.prototype=new j;x.constructor=S,n(x,w.prototype),x.isPureReactComponent=!0;var O={current:null},k=Object.prototype.hasOwnProperty,P={key:!0,ref:!0,__self:!0,__source:!0};function Z(e,t,r){var n,o={},a=null,l=null;if(null!=t)for(n in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,n)&&!P.hasOwnProperty(n)&&(o[n]=t[n]);var c=arguments.length-2;if(1===c)o.children=r;else if(1<c){for(var u=Array(c),s=0;s<c;s++)u[s]=arguments[s+2];o.children=u}if(e&&e.defaultProps)for(n in c=e.defaultProps)void 0===o[n]&&(o[n]=c[n]);return{$$typeof:i,type:e,key:a,ref:l,props:o,_owner:O.current}}function _(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var C=/\/+/g,E=[];function R(e,t,r,n){if(E.length){var o=E.pop();return o.result=e,o.keyPrefix=t,o.func=r,o.context=n,o.count=0,o}return{result:e,keyPrefix:t,func:r,context:n,count:0}}function F(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>E.length&&E.push(e)}function N(e,t,r,n){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var l=!1;if(null===e)l=!0;else switch(o){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case i:case a:l=!0}}if(l)return r(n,e,""===t?"."+A(e,0):t),1;if(l=0,t=""===t?".":t+":",Array.isArray(e))for(var c=0;c<e.length;c++){var u=t+A(o=e[c],c);l+=N(o,u,r,n)}else if(null===e||"object"!=typeof e?u=null:u="function"==typeof(u=h&&e[h]||e["@@iterator"])?u:null,"function"==typeof u)for(e=u.call(e),c=0;!(o=e.next()).done;)l+=N(o=o.value,u=t+A(o,c++),r,n);else if("object"===o)throw r=""+e,Error(b(31,"[object Object]"===r?"object with keys {"+Object.keys(e).join(", ")+"}":r,""));return l}function I(e,t,r){return null==e?0:N(e,"",t,r)}function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function $(e,t){e.func.call(e.context,t,e.count++)}function T(e,t,r){var n=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?V(e,n,r,(function(e){return e})):null!=e&&(_(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(C,"$&/")+"/")+r)),n.push(e))}function V(e,t,r,n,o){var i="";null!=r&&(i=(""+r).replace(C,"$&/")+"/"),I(e,T,t=R(t,i,n,o)),F(t)}var q={current:null};function B(){var e=q.current;if(null===e)throw Error(b(321));return e}var M={ReactCurrentDispatcher:q,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:O,IsSomeRendererActing:{current:!1},assign:n};t.Children={map:function(e,t,r){if(null==e)return e;var n=[];return V(e,n,null,t,r),n},forEach:function(e,t,r){if(null==e)return e;I(e,$,t=R(null,null,t,r)),F(t)},count:function(e){return I(e,(function(){return null}),null)},toArray:function(e){var t=[];return V(e,t,null,(function(e){return e})),t},only:function(e){if(!_(e))throw Error(b(143));return e}},t.Component=w,t.Fragment=l,t.Profiler=u,t.PureComponent=S,t.StrictMode=c,t.Suspense=p,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=M,t.cloneElement=function(e,t,r){if(null==e)throw Error(b(267,e));var o=n({},e.props),a=e.key,l=e.ref,c=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,c=O.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)k.call(t,s)&&!P.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=r;else if(1<s){u=Array(s);for(var f=0;f<s;f++)u[f]=arguments[f+2];o.children=u}return{$$typeof:i,type:e.type,key:a,ref:l,props:o,_owner:c}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=Z,t.createFactory=function(e){var t=Z.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:d,render:e}},t.isValidElement=_,t.lazy=function(e){return{$$typeof:y,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return B().useCallback(e,t)},t.useContext=function(e,t){return B().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return B().useEffect(e,t)},t.useImperativeHandle=function(e,t,r){return B().useImperativeHandle(e,t,r)},t.useLayoutEffect=function(e,t){return B().useLayoutEffect(e,t)},t.useMemo=function(e,t){return B().useMemo(e,t)},t.useReducer=function(e,t,r){return B().useReducer(e,t,r)},t.useRef=function(e){return B().useRef(e)},t.useState=function(e){return B().useState(e)},t.version="16.14.0"},7673:(e,t,r)=>{"use strict";r(4239);var n=r(9676),o=(r(1886),r(5777)),i=(r(3416),r(4272)),a=(r(4529),r(3044)),l=(r(2648),r(1577)),c=(r(8727),r(9228)),u=(r(8032),r(4041)),s=r(7294),f=r(3935),d=r(2961),p=r(6252),m=function(e,t){return s.createElement(p.Z,Object.assign({},e,{ref:t,icon:d.Z}))};m.displayName="CheckCircleFilled";const y=s.forwardRef(m);var h=r(6688),b=function(e,t){return s.createElement(p.Z,Object.assign({},e,{ref:t,icon:h.Z}))};b.displayName="QuestionCircleOutlined";const v=s.forwardRef(b);var g=r(1795),w=r.n(g),j=r(9669),S=["/premium/stripe/create_plan","/premium/stripe/change_plan","/folder/create","/folder/add_items","/folder/change_name","/trash/throw_into","/image/change_title","/video/update_title","/trash/restore","/trash/delete","/image/upload"],x=r.n(j)().create({baseURL:"https://www.awesomescreenshot.com/api/v1"});x.interceptors.request.use((function(e){return e}),(function(e){return c.ZP.error("Network error, Request timeout!"),Promise.reject()})),x.interceptors.response.use((function(e){if(e&&e.data&&1===e.data.code)return Promise.resolve(e.data.data);if(e.data.code,e.data.msg){if(-1!==S.indexOf(e.config.url))return Promise.reject(e.data.msg);if(c.ZP.error(e.data.msg),"/pricing"!==window.location.pathname)return Promise.reject(e.data.msg)}}),(function(e){var t=e.response.status;return c.ZP.error("Network error! Error Code "+t),Promise.reject(e)}));var O=r(5893);function k(e){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},k(e)}function P(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Z(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?P(Object(r),!0).forEach((function(t){_(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):P(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function _(e,t,r){var n;return n=function(e,t){if("object"!=k(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=k(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(t,"string"),(t="symbol"==k(n)?n:String(n))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function C(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,l=[],c=!0,u=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(l.push(n.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return E(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return E(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function E(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var R=u.Z.Option;function F(e){var t=C((0,s.useState)(!1),2),r=t[0],f=t[1],d=C((0,s.useState)(!1),2),p=d[0],m=d[1],h=C((0,s.useState)("Screenshot Bug"),2),b=h[0],g=h[1],j={"Screenshot Bug":{name:"Bug Report-Screenshot",title:{label:"Bug Summary",tip:"Let us know what went wrong in a few words."},detail:{label:"Bug Details",tip:"Please clarify the URL of the page you had trouble with, describe the actions you took, and any result or notification you got."}},"Video Bug":{name:"Bug Report-Screenshot",title:{label:"Bug Summary",tip:"Let us know what went wrong in a few words."},detail:{label:"Bug Details",tip:"Please clarify the URL of the page you had trouble with, describe the actions you took, and any result or notification you got."}},"Feature Request":{name:"Feature Request",title:{label:"Title",tip:"What's your request about?"},detail:{label:"Description",tip:"Please provide a detailed description of new feature you want."}},"Other Issue":{name:"Other Issue",title:{label:"Title"},detail:{label:"Description",tip:"Let us know your thoughts on Awesome Screenshot. Any questions, comments or suggestions are welcome."}}};return(0,O.jsxs)("div",{className:"main",children:[(0,O.jsx)("div",{className:"top",children:(0,O.jsx)("div",{className:"logo",children:(0,O.jsx)("a",{href:"https://www.awesomescreenshot.com"})})}),(0,O.jsx)("div",{className:"options-container",children:p?(0,O.jsxs)("div",{className:"sent-message",children:[(0,O.jsx)("div",{children:(0,O.jsx)(y,{})}),(0,O.jsx)("div",{className:"title",children:"Thank you"}),(0,O.jsx)("div",{className:"content",children:"The form was submitted successfully. We will contact you shortly."}),(0,O.jsx)(l.Z,{type:"primary",onClick:function(){m(!1)},children:"Submit another issue"})]}):(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("div",{className:"main-title",children:"Send Feedback"}),(0,O.jsxs)("div",{className:"title-tip",children:["Please fill out the form below to submit an issue."," "]}),(0,O.jsxs)(a.Z,{onFinish:function(e){var t={};t["Extension Version"]=chrome.runtime.getManifest().version,localStorage.last_info&&(t=Z(Z({},t),JSON.parse(localStorage.last_info))),t.Browser||(t.Browser=w().name+" "+w().version),t.OS||(t.OS=w().os.toString()),t["Screen Size"]||(t["Screen Size"]=window.screen.width+"x"+window.screen.height);var r=!0===e.isSendInfo||void 0===e.isSendInfo?function(e,t){var r="";for(var n in r+=e+"<br/><br/><br/><hr>",t)r+="<b>"+n+"</b>: "+t[n]+"<br/>";return r}(e.content,t):e.content,n={email:e.email,name:e.name,subject:"[".concat(e.type,"] ").concat(e.title),content:r};f(!0),m(!0),function(e){return x({method:"POST",url:"/common/contact_us",data:e})}(n).then((function(e){f(!1),m(!0)})).catch((function(e){f(!1),c.ZP.error("Submission failed. Please retry or copy summary and details to send an email to care@awesomescreenshot.com.")}))},children:[(0,O.jsx)("div",{className:"label",children:"Issue Type"}),(0,O.jsx)(a.Z.Item,{name:"type",initialValue:b,rules:[{required:!0}],children:(0,O.jsx)(u.Z,{onChange:function(e){g(e)},children:["Screenshot Bug","Video Bug","Feature Request","Other Issue"].map((function(e){return(0,O.jsx)(R,{value:e,children:e},e)}))})}),(0,O.jsx)("div",{className:"label",children:j[b].title.label}),(0,O.jsx)("div",{className:"label-tip",children:j[b].title.tip}),(0,O.jsx)(a.Z.Item,{name:"title",rules:[{required:!0}],children:(0,O.jsx)(i.Z,{})}),(0,O.jsx)("div",{className:"label",children:j[b].detail.label}),(0,O.jsx)("div",{className:"label-tip",children:j[b].detail.tip}),(0,O.jsx)(a.Z.Item,{name:"content",rules:[{required:!0}],children:(0,O.jsx)(i.Z.TextArea,{autoSize:{minRows:3}})}),(0,O.jsx)("div",{className:"label",children:"Your Email Address"}),(0,O.jsx)("div",{className:"label-tip",children:"Enter an email address to receive updates on the issue."}),(0,O.jsx)(a.Z.Item,{name:"email",rules:[{required:!0}],children:(0,O.jsx)(i.Z,{type:"email"})}),(0,O.jsx)("div",{className:"label",children:"Your Name"}),(0,O.jsx)("div",{className:"label-tip",children:"Only for email correspondence."}),(0,O.jsx)(a.Z.Item,{name:"name",children:(0,O.jsx)(i.Z,{})}),(0,O.jsx)(a.Z.Item,{name:"isSendInfo",valuePropName:"checked",initialValue:!0,children:(0,O.jsxs)(n.Z,{children:["Include OS and browser info to help developers debug errors"," ",(0,O.jsx)(o.Z,{title:"Specifically, version number of your OS, browser, extension, and screen size will be included. ",children:(0,O.jsx)(v,{})})]})}),(0,O.jsx)(a.Z.Item,{children:(0,O.jsx)(l.Z,{type:"primary",htmlType:"submit",loading:r,size:"large",block:!0,children:"Submit"})})]})]})})]})}f.render((0,O.jsx)(F,{}),document.getElementById("feedback-page"))}},o={};function i(e){var t=o[e];if(void 0!==t)return t.exports;var r=o[e]={id:e,loaded:!1,exports:{}};return n[e].call(r.exports,r,r.exports,i),r.loaded=!0,r.exports}i.m=n,e=[],i.O=(t,r,n,o)=>{if(!r){var a=1/0;for(s=0;s<e.length;s++){for(var[r,n,o]=e[s],l=!0,c=0;c<r.length;c++)(!1&o||a>=o)&&Object.keys(i.O).every((e=>i.O[e](r[c])))?r.splice(c--,1):(l=!1,o<a&&(a=o));if(l){e.splice(s--,1);var u=n();void 0!==u&&(t=u)}}return t}o=o||0;for(var s=e.length;s>0&&e[s-1][2]>o;s--)e[s]=e[s-1];e[s]=[r,n,o]},i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},r=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,i.t=function(e,n){if(1&n&&(e=this(e)),8&n)return e;if("object"==typeof e&&e){if(4&n&&e.__esModule)return e;if(16&n&&"function"==typeof e.then)return e}var o=Object.create(null);i.r(o);var a={};t=t||[null,r({}),r([]),r(r)];for(var l=2&n&&e;"object"==typeof l&&!~t.indexOf(l);l=r(l))Object.getOwnPropertyNames(l).forEach((t=>a[t]=()=>e[t]));return a.default=()=>e,i.d(o,a),o},i.d=(e,t)=>{for(var r in t)i.o(t,r)&&!i.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e={656:0};i.O.j=t=>0===e[t];var t=(t,r)=>{var n,o,[a,l,c]=r,u=0;if(a.some((t=>0!==e[t]))){for(n in l)i.o(l,n)&&(i.m[n]=l[n]);if(c)var s=c(i)}for(t&&t(r);u<a.length;u++)o=a[u],i.o(e,o)&&e[o]&&e[o][0](),e[o]=0;return i.O(s)},r=self.webpackChunkAwesomeScreenshot=self.webpackChunkAwesomeScreenshot||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})(),i.O(void 0,[700,733,769,257,402],(()=>i(2082)));var a=i.O(void 0,[700,733,769,257,402],(()=>i(7673)));a=i.O(a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,