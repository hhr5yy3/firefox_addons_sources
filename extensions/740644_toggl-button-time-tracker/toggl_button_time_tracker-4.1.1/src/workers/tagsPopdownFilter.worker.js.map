{"version":3,"file":"tagsPopdownFilter.worker.js","sources":["../../../../src/workers/tagsPopdownFilter.worker.ts"],"sourcesContent":["/* eslint-disable no-console */\n\nimport {\n  type TagsPopdownFilterWorkerProps,\n  type TagsPopdownFilterWorkerResponse,\n  type WorkerData,\n} from '@src/workers/types'\n\nfunction handleEvent(\n  e: WorkerData<TagsPopdownFilterWorkerProps>\n): TagsPopdownFilterWorkerResponse {\n  const { tags, filter, wid, selectedTagIds } = e.data\n  const selectedIdsMap = selectedTagIds.reduce((map, id) => {\n    map[id] = true\n    return map\n  }, {} as { [key: number]: boolean })\n\n  const workspaceTags = Object.values(tags ?? {})\n    .filter((tag) => tag.workspace_id === wid || selectedIdsMap[Number(tag.id)])\n    .sort((t1, t2) => {\n      // Check if t1 and t2 are selected\n      const t1Selected = selectedIdsMap[t1.id]\n      const t2Selected = selectedIdsMap[t2.id]\n\n      // If only one is selected, prioritize it\n      if (t1Selected && !t2Selected) {\n        return -1\n      } else if (!t1Selected && t2Selected) {\n        return 1\n      } else {\n        // Both are selected or both are not selected, sort by name\n        return t1.name.localeCompare(t2.name)\n      }\n    })\n\n  const filteredTags =\n    filter === ''\n      ? workspaceTags\n      : workspaceTags.filter((item) =>\n          item?.name?.toLowerCase()?.includes(filter.toLowerCase())\n        )\n\n  const filteredTagExists = !!filteredTags.find((tag) => tag.name === filter)\n\n  return {\n    filteredTags,\n    filteredTagExists,\n    selectedIdsMap,\n  }\n}\n\nself.onmessage = function (e: WorkerData<TagsPopdownFilterWorkerProps>) {\n  try {\n    console.time('toggl:tagsPopdownFilterWorker')\n    const response = handleEvent(e)\n    self.postMessage(response)\n\n    console.timeEnd('toggl:tagsPopdownFilterWorker')\n  } catch (error) {\n    console.error(error, 'toggl:tagsPopdownFilterWorker')\n  }\n}\n"],"names":["handleEvent","e","tags","filter","wid","selectedTagIds","data","selectedIdsMap","reduce","map","id","workspaceTags","Object","values","tag","workspace_id","Number","sort","t1","t2","t1Selected","t2Selected","name","localeCompare","filteredTags","item","_a","_b","toLowerCase","includes","filteredTagExists","find","self","onmessage","console","time","response","postMessage","timeEnd","error"],"mappings":"AAQA,SAASA,EACPC,EACiC,CAC3B,KAAA,CAAEC,KAAAA,EAAMC,OAAAA,EAAQC,IAAAA,EAAKC,eAAAA,GAAmBJ,EAAEK,KAC1CC,EAAiBF,EAAeG,OAAO,CAACC,EAAKC,KACjDD,EAAIC,GAAM,GACHD,GACN,CAAgC,CAAA,EAE7BE,EAAgBC,OAAOC,OAAOX,GAAAA,KAAAA,EAAQ,CAAA,CAAE,EAC3CC,OAAgBW,GAAAA,EAAIC,eAAiBX,GAAOG,EAAeS,OAAOF,EAAIJ,EAAE,EAAE,EAC1EO,KAAK,CAACC,EAAIC,IAAO,CAEVC,MAAAA,EAAab,EAAeW,EAAGR,IAC/BW,EAAad,EAAeY,EAAGT,IAGjCU,OAAAA,GAAc,CAACC,EACV,GACE,CAACD,GAAcC,EACjB,EAGAH,EAAGI,KAAKC,cAAcJ,EAAGG,IAAI,CAExC,CAAC,EAEGE,EACJrB,IAAW,GACPQ,EACAA,EAAcR,OAAQsB,GAAAA,CA9B9B,IAAAC,EAAAC,EA+BUF,OAAAA,GAAAA,EAAAA,GAAAA,YAAAA,EAAMH,OAANG,YAAAA,EAAYG,gBAAZH,YAAAA,EAA2BI,SAAS1B,EAAOyB,YAAa,GAC1D,EAEAE,EAAoB,CAAC,CAACN,EAAaO,KAAcjB,GAAAA,EAAIQ,OAASnB,CAAM,EAEnE,MAAA,CACLqB,aAAAA,EACAM,kBAAAA,EACAvB,eAAAA,EAEJ,CAEAyB,KAAKC,UAAY,SAAUhC,EAA6C,CAClE,GAAA,CACFiC,QAAQC,KAAK,+BAA+B,EACtCC,MAAAA,EAAWpC,EAAYC,CAAC,EAC9B+B,KAAKK,YAAYD,CAAQ,EAEzBF,QAAQI,QAAQ,+BAA+B,QACxCC,GACCA,QAAAA,MAAMA,EAAO,+BAA+B,CACtD,CACF"}