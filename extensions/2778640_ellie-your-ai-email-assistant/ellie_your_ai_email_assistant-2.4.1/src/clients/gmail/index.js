const outputSelector=".Am.aO9.Al.editable.LW-avf, .Am.Al.editable.LW-avf",expandSelector='.ajR img[src="//ssl.gstatic.com/ui/v1/icons/mail/images/cleardot.gif"]',scrollerSelector=".Tm.aeJ";class GmailEllie extends Ellie{constructor(){super("gmail")}async setCurrentEML(e){this.eml=e,this.parsedEml=await parseEml(e)}getEml(){return this.parsedEml}getCompose(){return gmail.dom.composes().find((e=>{const{$el:t}=e;let l=document.querySelector(".aSs")?.contains(t[0]),n=document.querySelector(".dw")?.contains(t[0]);return!l&&!n&&t[0].querySelector(outputSelector)}))}isOnComposePage(){return!!this.getCompose()}onStartCompose(){this.attached=!0,this.attachHandlers(),this.getLimits(),this.insertEllie()}onEndCompose(){console.log("[ellie]: removing Ellie"),this.attached=!1,this.destroy()}insertEllie(){console.log(`[ellie]: inserting Ellie for ${this.client}`),this.scrollableContainer=document.querySelector(".Tm.aeJ");const{$el:e}=this.getCompose();try{this.$sendBtn=e[0].querySelector(".T-I.J-J5-Ji.aoO"),this.$sendBtn.addEventListener("click",this.onSendEmail)}catch(e){console.error("[ellie]: error selecting send button",e)}const t=[...e[0].querySelectorAll(expandSelector)];if(t.length)for(let e of t){const t=window.getSelection();let l=!1;"None"!==t.type&&(t.collapseToEnd(),l=!0),e.parentElement.parentElement.click();const n=window.getSelection();if("None"!==n.type){const e=n.anchorNode;try{t.setBaseAndExtent(e,l?e.textContent.length:n.anchorOffset,e,l?e.textContent.length:n.anchorOffset)}catch(e){console.warn("[ellie]: couldn't set cursor")}}}waitForElement(outputSelector,(e=>{e.parentElement.insertBefore(this.UI.$el,e.parentElement.firstChild)})),this.isReady=!0}addElementToDOM(e){this.UI.$el.parentNode.insertBefore(e,this.UI.$el.nextSibling)}removeElementFromDOM(e){try{this.UI.$el.parentNode.removeChild(e)}catch(e){}}getEditor(){return gmail.dom.composes()[0].$el[0].querySelector(".Am.aO9.Al.editable.LW-avf, .Am.Al.editable.LW-avf")}getReplyText(){const e=this.getEditor().cloneNode(!0),t=e.querySelector(".gmail_quote");t&&t.parentElement.removeChild(t);const l=getNewlineLocations(e);return{text:e.textContent,newlines:l}}getThreadText(){const e=this.getEditor();return this.getThread(e.cloneNode(!0))[0].text}getThread(e=this.getEditor().cloneNode(!0)){let t=[];const l=[...e.querySelectorAll("blockquote")];for(let e=l.length-1;e>=0;e--)try{const n=l[e];let o="";n.previousElementSibling&&(o=n.previousElementSibling.textContent.trim()),t.push({text:n.textContent.trim(),author:o}),n.parentElement.removeChild(n.previousElementSibling),n.parentElement.removeChild(n)}catch(e){console.error(e);continue}return t.reverse()}writeChar(e,{insertIndex:t,lastEditableElement:l}={}){if("\n"===e){const e=document.createElement("div");"#text"===l.nodeName?l.parentNode.insertBefore(e,l.nextSibling):l.insertAdjacentElement("afterend",e),l&&"\n"===l.textContent&&l.replaceWith(document.createElement("br")),l=e}let n="#text"===l.nodeName?l:l.firstChild;if("BR"===l.nodeName){let t=document.createElement("div"),n=document.createTextNode(e);t.appendChild(n),l.parentNode.insertBefore(t,l.nextSibling),l=t}else if(n&&"#text"===n.nodeName){const o=n.textContent;n.textContent=[o.substring(0,t),e,o.substring(t)].join(""),l=n}else{let t=document.createTextNode(e);l.insertBefore(t,l.childNodes[0]),l=t}return l}streamReply(e){const t=this.getEditor();if(t.blur(),!t)return!1;!this.lastEditableElement&&this.selected&&this.selected.textSelected&&(this.reselectSelected(),this.lastEditableElement=this.selected?this.selected.node:null),this.lastEditableElement||(this.lastEditableElement=this.getLastEditableElement(t));for(let t=0;t<e.length;t++)this.lastEditableElement=this.writeChar(e[t],{insertIndex:this.insertIndex+t,lastEditableElement:this.lastEditableElement});this.insertIndex=this.insertIndex+e.length}writeReply(e){const t=this.getEditor();if(!t)return!1;this.reselectSelected();let l=this.getLastEditableElement(t),n=this.selected?this.selected.insertIndex:0,o=0;const i=()=>{let t=e[o++];void 0!==t?(l=this.writeChar(t,{insertIndex:n++,lastEditableElement:l}),setTimeout(i,5)):this.setStatus("waiting",!0)};i()}getLastEditableElement(e){let t=this.selected?this.selected.node:null;return t?"DIV"===t.nodeName&&t.hasAttribute("contenteditable")&&(t=t.children[0]):t=getLastElement(e),t}getThreadId(){return gmail.new.get.thread_id()}removeHandlers(){this.$sendBtn&&this.$sendBtn.removeEventListener("click",this.onSendEmail),super.removeHandlers()}}function getLastElement(e){const t=[...e.children];let l=t[0];for(let e=0;e<t.length;e++)if("BR"!==t[e].nodeName){if(t[e].classList.contains("gmail_quote")||t[e].querySelector(".gmail_quote"))break;l=t[e]}return 1===l.children.length&&"BR"===l.firstChild.nodeName&&l.removeChild(l.firstChild),l}const emlcache=new Map;async function getThreadEML(e){try{let t=emlcache.get(e);for(t?console.log("[ellie]: using eml from cache",e):(console.log("[ellie]: fetching eml",e),t=gmail.get.email_source_promise(e),emlcache.set(e,t),t.then((()=>console.log("[ellie]: fetched successfully",e))));emlcache.size>10;)emlcache.delete(emlcache.keys().next().value);return t}catch(t){return console.error("[ellie]: failed to fetch eml",e),console.error("[ellie]: this happens if we download the same one too much"),null}}const gmail=new Gmail;gmail.observe.on("load",(()=>{console.log("[ellie]: recorded gmail loaded");const e=new GmailEllie;gmail.observe.on("view_thread",(async function(e){let t=Date.now();console.log("[ellie]: conversation thread opened",e.id);await getThreadEML(e.id);let l=Date.now()-t;console.log("[ellie]: loaded EML from thread, took",l)})),gmail.observe.on("view_email",(async function(t){let l=Date.now();console.log("[ellie]: email opened",t);const n=await getThreadEML(t.id);e.setCurrentEML(n);let o=Date.now()-l;console.log("[ellie]: loaded EML from email, took",o)})),gmail.observe.on("compose",(function(t,l){const n=gmail.new.get.thread_id(),o=(gmail.new.get.email_id(),gmail.get.email_id());e.eml||getThreadEML(o).then((t=>{t&&e.setCurrentEML(t)})),console.log("[ellie]: thread id:",n),console.log(`[ellie]: compose box opened - type = ${l}`),"compose"!==l?(console.log("[ellie]: waiting for the reply screen to be ready..."),e.watchForCompose()):console.warn("[ellie]: not adding ellie to page because this is the compose screen, not a reply")}))}));