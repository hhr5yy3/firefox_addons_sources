{"version":3,"file":"firefox/data/js/crypto-worker.js","mappings":"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AAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,KACxL,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,EAAM,EAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IACxL,CAAC,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,KACxL,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,EAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,IAAM,IAAM,GAAM,EAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IACxL,CAAC,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,KACxL,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,EAAM,GAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,EAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GACxL,CAAC,GAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,GAAM,EAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,EAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,GAAM,GAAM,KACxL,CAAC,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,EAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,GAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,EAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,KACxL,CAAC,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,EAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IACxL,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IACxL,CAAC,GAAM,GAAM,GAAM,EAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,GAAM,EAAM,IAAM,EAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,KACxL,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,EAAM,MAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GACxL,CAAC,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,MAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GACxL,CAAC,EAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,MAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,EAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IACxL,CAAC,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,EAAM,GAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,EAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,MAC/L,CAAC,CAAC,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,KACxL,CAAC,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,EAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,KACxL,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IACxL,CAAC,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IACxL,CAAC,EAAM,IAAM,GAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GACxL,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IACxL,CAAC,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,EAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IACxL,CAAC,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,MAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,EAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,GAAM,GAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,EAAM,IAAM,IACxL,CAAC,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,MAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IACxL,CAAC,GAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,MAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,KACxL,CAAC,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IACxL,CAAC,EAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,MAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,GAAM,IACxL,CAAC,IAAM,GAAM,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,EAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IACxL,CAAC,GAAM,EAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IACxL,CAAC,GAAM,IAAM,GAAM,IAAM,EAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,KACxL,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IACxL,CAAC,IAAM,GAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,EAAM,GAAM,IAAM,EAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,MAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,EAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IACxL,CAAC,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,MAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IACxL,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IACxL,CAAC,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,MAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IACxL,CAAC,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,MAC/L,CAAC,CAAC,IAAM,EAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,EAAM,GAAM,IAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,EAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GACxL,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IACxL,CAAC,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,EAAM,IAAM,IACxL,CAAC,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IACxL,CAAC,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,EAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IACxL,CAAC,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IACxL,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,EAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GACxL,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,EAAM,GAAM,IAAM,EAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IACxL,CAAC,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,EAAM,GAAM,GAAM,GAAM,IACxL,CAAC,IAAM,GAAM,IAAM,EAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IACxL,CAAC,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,EAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IACxL,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IACxL,CAAC,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,EAAM,EAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GACxL,CAAC,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,MAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,EAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,MAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IACxL,CAAC,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GACxL,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,EAAM,GAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,IAAM,IAAM,GAAM,KACxL,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,KACxL,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,EAAM,GAAM,GAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,E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AAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,EAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,EAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,EAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,KACxL,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IACxL,CAAC,IAAM,IAAM,EAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,EAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,EAAM,GAAM,IAAM,GAAM,EAAM,IAAM,IAAM,GAAM,EAAM,GAAM,GACxL,CAAC,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,MAC/L,CAAC,CAAC,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IACxL,CAAC,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,EAAM,GAAM,IAAM,IAAM,EAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAC/L,CAAC,CAAC,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,KACxL,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,EAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GACxL,CAAC,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,EAAM,IAAM,EAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,KACxL,CAAC,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,EAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,KACxL,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,EAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,EAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,EAAM,KACxL,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,EAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,KACxL,CAAC,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IACxL,CAAC,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,MAC/L,CAAC,CAAC,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,EAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,KACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,EAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IACxL,CAAC,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,KACxL,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,GAAM,GAAM,MAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,IAAM,EAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,EAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,EAAM,GAAM,IAAM,GAAM,EAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,EAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,GAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IACxL,CAAC,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,EAAM,MAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IACxL,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,EAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,GAAM,IAAM,GAAM,IAAM,GAAM,EAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,EAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IACxL,CAAC,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GACxL,CAAC,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IACxL,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,EAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IACxL,CAAC,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IACxL,CAAC,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,EAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GACxL,CAAC,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,GAAM,IAAM,GAAM,EAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,GAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IACxL,CAAC,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,EAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,EAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,GAAM,GAAM,GAAM,GAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,EAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GACxL,CAAC,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,KACxL,CAAC,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IACxL,CAAC,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,EAAM,GAAM,EAAM,GAAM,IACxL,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,EAAM,GAAM,MAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,KACxL,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,EAAM,EAAM,EAAM,GAAM,IAAM,GAAM,IAAM,IAAM,EAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,KACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,EAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IACxL,CAAC,GAAM,IAAM,IAAM,EAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KACxL,CAAC,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,KACxL,CAAC,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,GAAM,GAAM,GAAM,IAAM,EAAM,IAAM,IAAM,EAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,MAC/L,CAAC,CAAC,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,EAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,EAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IACxL,CAAC,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,EAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,EAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IACxL,CAAC,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,GAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,IAAM,IAAM,EAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,EAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,EAAM,GAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,MAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,GAAM,IACxL,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,EAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,EAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,EAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,EAAM,IAAM,IAAM,IACxL,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,GAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,EAAM,GAAM,GAAM,EAAM,GAAM,IAAM,IAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,EAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,EAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IACxL,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,EAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,EAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IACxL,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,MAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IACxL,CAAC,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,EAAM,IAAM,GAAM,GAAM,EAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,EAAM,EAAM,EAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,EAAM,EAAM,IAAM,IAAM,GAAM,GAAM,KACxL,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,EAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,EAAM,GAAM,GACxL,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,EAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IACxL,CAAC,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IACxL,CAAC,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,EAAM,MAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,KACxL,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,KACxL,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAC/L,CAAC,CAAC,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,KACxL,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,EAAM,EAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IACxL,CAAC,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,KACxL,CAAC,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,EAAM,IAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,GAAM,GAAM,EAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GACxL,CAAC,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,EAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IACxL,CAAC,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,MAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,EAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,GAAM,EAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,EAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IACxL,CAAC,IAAM,IAAM,EAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,EAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,GAAM,GACxL,CAAC,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,EAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,GAAM,EAAM,IAAM,GAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,KACxL,CAAC,EAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GACxL,CAAC,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,EAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,IAAM,GAAM,GAAM,GAAM,IACxL,CAAC,GAAM,GAAM,GAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,EAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,MAC/L,CAAC,CAAC,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,EAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IACxL,CAAC,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,GAAM,MAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,KACxL,CAAC,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,EAAM,EAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IACxL,CAAC,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,KACxL,CAAC,GAAM,GAAM,GAAM,IAAM,GAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,MAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,EAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,EAAM,GAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IACxL,CAAC,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,KACxL,CAAC,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,EAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAM,GAAM,GAAM,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IACxL,CAAC,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IACxL,CAAC,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IACxL,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,EAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,KACxL,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,EAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GACxL,CAAC,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GACxL,CAAC,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,GAAM,GAAM,IAAM,EAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,KACxL,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,EAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,EAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GACxL,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,EAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GACxL,CAAC,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,GAAM,IAAM,GAAM,IAAM,EAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,EAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,EAAM,IAAM,IAAM,GAAM,IACxL,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,MAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IACxL,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,EAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,EAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IACxL,CAAC,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IACxL,CAAC,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,EAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,GAAM,GAAM,IAAM,IAAM,EAAM,IAAM,GAAM,GAAM,GAAM,EAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IACxL,CAAC,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,GAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IACxL,CAAC,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,EAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,GAAM,IAAM,EAAM,GAAM,GAAM,EAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,EAAM,EAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,EAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,EAAM,KAC/L,CAAC,CAAC,GAAM,GAAM,GAAM,EAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IACxL,CAAC,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,MAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,GAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,EAAM,GAAM,IACxL,CAAC,GAAM,IAAM,IAAM,EAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,EAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IACxL,CAAC,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,EAAM,MAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IACxL,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IACxL,CAAC,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,GAAM,GAAM,EAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,EAAM,KACxL,CAAC,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,EAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,GAAM,EAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IACxL,CAAC,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,EAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GACxL,CAAC,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,EAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,MAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,EAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,EAAM,GAAM,EAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,GAAM,IAAM,GACxL,CAAC,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,GAAM,IAAM,IAAM,EAAM,EAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,EAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IACxL,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,KACxL,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,GAAM,GAAM,EAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IACxL,CAAC,GAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,MAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,KACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IACxL,CAAC,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KACxL,CAAC,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAC/L,CAAC,CAAC,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,EAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,KACxL,CAAC,IAAM,GAAM,EAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,MAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,EAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,KACxL,CAAC,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IACxL,CAAC,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,EAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,EAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,EAAM,GAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,KACxL,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,EAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IACxL,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,GAAM,GAAM,IACxL,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,EAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,MAC/L,CAAC,CAAC,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IACxL,CAAC,IAAM,IAAM,GAAM,IAAM,EAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,MAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GACxL,CAAC,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,EAAM,IAAM,EAAM,IAAM,IAAM,GAAM,EAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,EAAM,GAAM,IAAM,EAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IACxL,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,EAAM,IACxL,CAAC,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IACxL,CAAC,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,GAAM,EAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,MAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,EAAM,GAAM,IAAM,GAAM,EAAM,IAAM,GAAM,GAAM,IAAM,KACxL,CAAC,IAAM,EAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,EAAM,GAAM,GAAM,IAAM,GAAM,EAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IACxL,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,EAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,MAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IACxL,CAAC,GAAM,EAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IACxL,CAAC,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,MAC/L,CAAC,CAAC,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,EAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,MAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IACxL,CAAC,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,KACxL,CAAC,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IACxL,CAAC,GAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,EAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IACxL,CAAC,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,EAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IACxL,CAAC,GAAM,GAAM,GAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,EAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,EAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GACxL,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,KACxL,CAAC,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,EAAM,IAAM,EAAM,GAAM,EAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IACxL,CAAC,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GACxL,CAAC,IAAM,IAAM,IAAM,EAAM,GAAM,GAAM,EAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IACxL,CAAC,IAAM,GAAM,EAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IACxL,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,EAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IACxL,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,IAAM,IAAM,GAAM,GAAM,IAAM,EAAM,GAAM,GAAM,GAAM,EAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IACxL,CAAC,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,GAAM,EAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,KACxL,CAAC,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,MAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,EAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IACxL,CAAC,IAAM,EAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,KACxL,CAAC,IAAM,GAAM,EAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GACxL,CAAC,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,EAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IACxL,CAAC,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IACxL,CAAC,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,EAAM,GAAM,IAAM,GAAM,IAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,MAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,EAAM,GAAM,GAAM,GAAM,IAAM,EAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IACxL,CAAC,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,EAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IACxL,CAAC,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,MAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,EAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,EAAM,GAAM,GAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,KACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,GAAM,GAAM,GAAM,EAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,GAAM,GAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,EAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,EAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,KACxL,CAAC,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,EAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,MAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,EAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,EAAM,EAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,EAAM,IAAM,EAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,IAAM,GAAM,EAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,EAAM,IAAM,IAAM,GAAM,IAAM,EAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,EAAM,GAAM,GAAM,KACxL,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,EAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,EAAM,IAAM,KACxL,CAAC,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,KACxL,CAAC,IAAM,EAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,EAAM,EAAM,IAAM,GAAM,GAAM,IAAM,IAAM,EAAM,GAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,EAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,EAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,GAAM,GAAM,EAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GACxL,CAAC,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,EAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,EAAM,IAAM,GAAM,GAAM,IAAM,GAAM,EAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,KACxL,CAAC,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,KACxL,CAAC,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,EAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IACxL,CAAC,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IACxL,CAAC,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,KACxL,CAAC,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,GAAM,IAAM,EAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IACxL,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,EAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,EAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,EAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,EAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,EAAM,GAAM,KACxL,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAC/L,CAAC,CAAC,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,KACxL,CAAC,EAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,GAAM,IAAM,GAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,EAAM,IAAM,EAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GACxL,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IACxL,CAAC,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,EAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,MAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IACxL,CAAC,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,EAAM,GAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,EAAM,IAAM,GAAM,GAAM,GACxL,CAAC,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,KACxL,CAAC,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,EAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,EAAM,IAAM,GAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IACxL,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IACxL,CAAC,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IACxL,CAAC,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,EAAM,GAAM,IAAM,IAAM,EAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,EAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IACxL,CAAC,GAAM,GAAM,IAAM,EAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,KACxL,CAAC,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IACxL,CAAC,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,EAAM,GAAM,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IACxL,CAAC,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,EAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,MAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,GAAM,EAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IACxL,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GACxL,CAAC,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IACxL,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GACxL,CAAC,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GACxL,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,EAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,KACxL,CAAC,IAAM,GAAM,GAAM,EAAM,IAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,IACxL,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAC/L,CAAC,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GACxL,CAAC,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,MAC/L,CAAC,CAAC,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,EAAM,GAAM,GACxL,CAAC,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,MAC/LC,EAAUzZ,EAAOa,cACZkE,EAAI,EAAGA,EAAI,IAAKA,GAAK,EAC1B1E,EAAQ+W,sBAAsBrS,GAAKsU,EAAiBI,GACpDpZ,EAAQ+W,sBAAsBrS,GAAG+H,EAAEnH,IAAI6T,EAAUzU,GAAG,IACpD1E,EAAQ+W,sBAAsBrS,GAAGgI,EAAEpH,IAAI6T,EAAUzU,GAAG,IAExDyU,EAAY,IACf,CA31BD,GA41BAzX,OAAOC,OAAO3B,E,gBCv2BdA,EAAQqZ,aAHR,SAAsBlZ,GAClB,OAAOA,EAAWkF,eAAe,GACrC,EAKArF,EAAQsZ,kBAHR,SAA2BnZ,GACvB,OAAOA,EAAWkF,eAAe,GACrC,EAMA,IAAIhE,EAAI,IAAIjB,WAAW,CAAC,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAC9D,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAC1C,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC1C,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,KAK1CmZ,EAAK,IAAInZ,WAAW,CAAC,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAC/D,IAAM,GAAM,GAAM,EAAM,GAAM,GAAM,EAAM,GAC1C,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAC1C,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAC1C,KAKJ,SAASoZ,EAAGrT,EAAGC,GACX,OAAQD,EAAIC,EAAK,EAAI,CAEzB,CAKA,SAASgP,EAAejQ,EAAGhF,GAKvB,IAJA,IACIiG,EACAqT,EAFAC,EAAK,EAGLjV,EAAItE,EAAWO,cAAc,IACxBgE,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBgV,GAAMrY,EAAEqD,GACR0B,EAAIoT,EAAGrU,EAAET,GAAIgV,GACbjV,EAAEC,GAAKS,EAAET,GAAKgV,GAAMtT,GAAK,GACzBsT,EAAKtT,EAETqT,EAAQrT,EAAI,EAAK,EACjB,IAAS1B,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBS,EAAET,IAAM+U,GAAQtU,EAAET,GAAKD,EAAEC,IAE7BvE,EAAWqF,QAAQf,EACvB,CAKA,SAASkV,EAAexU,EAAGsH,EAAGtM,GAS1B,IAPA,IAIIyZ,EAEAxT,EANAyT,EAAK1Z,EAAWkF,eAAe,IAC/ByU,EAAKD,EAAG7S,SAAS,IACjB+S,EAAK5Z,EAAWkF,eAAe,IAC/B2U,EAAK7Z,EAAWkF,eAAe,IAE/BqU,EAAK,EAEAhV,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBmV,EAAGnV,GAAK,EAEZ,IAASA,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBsV,EAAGtV,GAAK,EAEZ,IAASA,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzB,IAAK,IAAIK,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACrBL,EAAIK,GAAK,KACT8U,EAAGnV,EAAIK,IAAMwU,EAAG7U,GAAK+H,EAAE1H,EAAI,KAIvC6U,EAAQC,EAAG,MAAQ,EACnBA,EAAG,KAAOD,EACVA,EAAQC,EAAG,MAAQ,EACnBA,EAAG,KAAOD,EACV,IAASlV,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBqV,EAAGrV,GAAK+H,EAAE/H,GAEd,IAASA,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzB,IAASK,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACrBL,EAAIK,EAAI,KACRiV,EAAGtV,EAAIK,IAAM1D,EAAEqD,GAAKoV,EAAG/U,IAInC,IAASL,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBkV,EAAQI,EAAGtV,KAAO,EAClBsV,EAAGtV,EAAI,IAAMkV,EACbI,EAAGtV,IAAM,IAEb,IAASA,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBgV,GAAMM,EAAGtV,GACT0B,EAAIoT,EAAGO,EAAGrV,GAAIgV,GACdvU,EAAET,GAAKqV,EAAGrV,GAAKgV,GAAMtT,GAAK,GAC1BsT,EAAKtT,EAKTgP,EAAejQ,EAAGhF,GAClBiV,EAAejQ,EAAGhF,GAClBA,EAAWqF,QAAQqU,EAAIE,EAAIC,EAC/B,CAeAha,EAAQia,YAXR,SAAqB9U,EAAGsH,EAAGtM,GAEvB,IADA,IAAIsE,EAAItE,EAAWkF,eAAe,IACzBX,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBD,EAAEC,GAAK+H,EAAE/H,GAEb,IAASA,EAAI,GAAIA,EAAI,GAAIA,GAAK,EAC1BD,EAAEC,GAAK,EAEXiV,EAAexU,EAAGV,EAAGtE,GACrBA,EAAWqF,QAAQf,EACvB,EAaAzE,EAAQka,YARR,SAAqB/U,EAAGsH,EAAGtM,GAEvB,IADA,IAAIsE,EAAItE,EAAWkF,eAAe,IACzBX,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBD,EAAEC,GAAK+H,EAAE/H,GAEbiV,EAAexU,EAAGV,EAAGtE,GACrBA,EAAWqF,QAAQf,EACvB,EAUAzE,EAAQma,UALR,SAAmBhV,EAAGsH,GAClB,IAAK,IAAI/H,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBS,EAAET,GAAK+H,EAAE/H,EAEjB,EAiBA1E,EAAQ4E,IAZR,SAAaO,EAAGsH,EAAGC,EAAGvM,GAElB,IADA,IAAIyZ,EACKlV,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBS,EAAET,GAAK+H,EAAE/H,GAAKgI,EAAEhI,GAEpB,IAASA,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBkV,EAAQzU,EAAET,KAAO,EACjBS,EAAET,EAAI,IAAMkV,EACZzU,EAAET,IAAM,IAEZ0Q,EAAejQ,EAAGhF,EACtB,EAyBAH,EAAQwV,IApBR,SAAarQ,EAAGsH,EAAGC,EAAGvM,GAGlB,IAFA,IAAIyZ,EACAnV,EAAItE,EAAWkF,eAAe,IACzBX,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBD,EAAEC,GAAK,EAEX,IAASA,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzB,IAAK,IAAIK,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBN,EAAEC,EAAIK,IAAM0H,EAAE/H,GAAKgI,EAAE3H,GAI7B,IAASL,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBkV,EAAQnV,EAAEC,KAAO,EACjBD,EAAEC,EAAI,IAAMkV,EACZnV,EAAEC,IAAM,IAEZiV,EAAexU,EAAGV,EAAGtE,GACrBA,EAAWqF,QAAQf,EACvB,EAmCAzE,EAAQiZ,QA9BR,SAAiB9T,EAAGlE,GAChB,IAAK,IAAIyD,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBS,EAAE,EAAIT,EAAI,GAAoB,EAAfzD,EAAE,EAAIyD,EAAI,GACzBS,EAAE,EAAIT,EAAI,GAAMzD,EAAE,EAAIyD,EAAI,KAAO,EAAK,EACtCS,EAAE,EAAIT,EAAI,GAAMzD,EAAE,EAAIyD,EAAI,KAAO,EAAK,EACtCS,EAAE,EAAIT,EAAI,IAAOzD,EAAE,EAAIyD,EAAI,IAAM,EAAK,EACtCS,EAAE,EAAIT,EAAI,GAAMzD,EAAE,EAAIyD,EAAI,KAAO,EAAK,EACtCS,EAAE,EAAIT,EAAI,GAAMzD,EAAE,EAAIyD,EAAI,KAAO,EAAK,EACtCS,EAAE,EAAIT,EAAI,GAAMzD,EAAE,EAAIyD,EAAI,KAAO,EAAK,EACtCS,EAAE,EAAIT,EAAI,IAAOzD,EAAE,EAAIyD,EAAI,IAAM,EAAK,EACtCS,EAAE,EAAIT,EAAI,GAAMzD,EAAE,EAAIyD,EAAI,KAAO,EAAK,EACtCS,EAAE,EAAIT,EAAI,GAAMzD,EAAE,EAAIyD,EAAI,KAAO,EAAK,EAE1CS,EAAE,EAAIT,EAAI,GAAoB,EAAfzD,EAAE,EAAIyD,EAAI,GACzBS,EAAE,EAAIT,EAAI,GAAMzD,EAAE,EAAIyD,EAAI,KAAO,EAAK,EACtCS,EAAE,EAAIT,EAAI,GAAMzD,EAAE,EAAIyD,EAAI,KAAO,EAAK,EACtCS,EAAE,EAAIT,EAAI,IAAOzD,EAAE,EAAIyD,EAAI,IAAM,EAAK,EACtCS,EAAE,EAAIT,EAAI,GAAMzD,EAAE,EAAIyD,EAAI,KAAO,EAAK,EACtCS,EAAE,EAAIT,EAAI,GAAMzD,EAAE,EAAIyD,EAAI,KAAO,EAAK,EAEtC,IAAIkV,EAAQ,EACZ,IAASlV,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBS,EAAET,IAAMkV,EACRzU,EAAET,EAAI,IAAMS,EAAET,KAAO,EACrBS,EAAET,IAAM,EACRkV,EAAQzU,EAAET,KAAO,EACjBS,EAAET,IAAMkV,GAAS,EAErBzU,EAAE,KAAOyU,CACb,EAgBA5Z,EAAQ6Y,YAXR,SAAqB1T,EAAGkT,EAAIE,GACxB,IAAK,IAAI7T,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBS,EAAE,EAAIT,GAAc,EAAR2T,EAAG3T,IAAoB,EAAR6T,EAAG7T,KAAW,EACzCS,EAAE,EAAIT,EAAI,GAAO2T,EAAG3T,KAAO,EAAK,GAAQ6T,EAAG7T,KAAO,EAAK,IAAM,EAC7DS,EAAE,EAAIT,EAAI,GAAO2T,EAAG3T,KAAO,EAAK,GAAQ6T,EAAG7T,KAAO,EAAK,IAAM,EAC7DS,EAAE,EAAIT,EAAI,GAAO2T,EAAG3T,KAAO,EAAK,GAAQ6T,EAAG7T,KAAO,EAAK,IAAM,EAEjES,EAAE,KAAiB,EAATkT,EAAG,KAAsB,EAATE,EAAG,MAAY,EACzCpT,EAAE,KAASkT,EAAG,MAAQ,EAAK,GAAQE,EAAG,MAAQ,EAAK,IAAM,EACzDpT,EAAE,KAASkT,EAAG,MAAQ,EAAK,GAAQE,EAAG,MAAQ,EAAK,IAAM,CAC7D,EAEA7W,OAAOC,OAAO3B,E,kBC7Od,IAAIoa,EAAK,EAAQ,OACb/D,EAAK,EAAQ,OACblK,EAAS,EAAQ,MACjBxM,EAAS,EAAQ,OACjB0a,EAAa,EAAQ,OAuCzBra,EAAQsa,iBAnCR,SAA0BC,EAAMpa,GAC5B,KAAMoa,aAAgBna,YAClB,MAAM,IAAIC,UAAU,4BAExB,GAAoB,KAAhBka,EAAKja,OACL,MAAM,IAAIC,MAAM,yDAC2Bga,EAAKja,OAC5C,mBAEHH,IACDA,EAAaR,EAAOa,eAExB,IAAIga,EAAOnE,EAAGgD,aAAalZ,GACvBsa,EAAOL,EAAG7D,aAAapW,GACvBua,EAAKvO,EAAOC,KAAKmO,EAAMpa,GAC3Bua,EAAG,IAAM,IACTA,EAAG,KAAO,IACVA,EAAG,KAAO,GACVrE,EAAG4D,YAAYO,EAAME,EAAIva,GACzBia,EAAGtB,gBAAgB2B,EAAMD,EAAMra,GAC/B,IAAIM,EAAKN,EAAWO,cAAc,IAClC0Z,EAAGhZ,KAAKX,EAAIga,EAAMta,GAElB,IADA,IAAID,EAAKC,EAAWO,cAAc,IACzBgE,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBxE,EAAGwE,GAAK6V,EAAK7V,GAEjB,IAASA,EAAI,GAAIA,EAAI,GAAIA,GAAK,EAC1BxE,EAAGwE,GAAKjE,EAAGiE,EAAI,IAGnB,OADAvE,EAAWS,eACJ,CACH+Z,KAAMza,EACN0a,KAAMna,EAEd,EAgBAT,EAAQ6a,aAdR,SAAsB3a,GAClB,GAA6B,IAAzBA,EAAG4a,kBACH,MAAM,IAAIza,UAAU,oCAExB,GAAkB,KAAdH,EAAGI,OACH,MAAM,IAAIC,MAAM,iEAC2BL,EAAGI,OAAS,mBAG3D,IADA,IAAIG,EAAK,IAAIL,WAAW,IACfsE,EAAI,GAAIA,EAAI,GAAIA,GAAK,EAC1BjE,EAAGiE,EAAI,IAAMxE,EAAGwE,GAEpB,OAAOjE,CACX,EAqDAT,EAAQ+a,KAhDR,SAAc1Z,EAAGnB,EAAIC,GACjB,KAAMD,aAAcE,YAChB,MAAM,IAAIC,UAAU,oCAExB,GAAkB,KAAdH,EAAGI,OACH,MAAM,IAAIC,MAAM,iEAC2BL,EAAGI,OAAS,mBAEtDH,IACDA,EAAaR,EAAOa,eAExB,IAAIwa,EAAM3E,EAAGgD,aAAalZ,GACtB8a,EAAM5E,EAAGgD,aAAalZ,GACtBqa,EAAOnE,EAAGgD,aAAalZ,GACvB+a,EAAMd,EAAG7D,aAAapW,GACtBM,EAAKN,EAAWO,cAAc,IAClCD,EAAG6E,IAAIpF,EAAG8G,SAAS,KAEnB,IAAI0T,EAAKvO,EAAOC,KAAKlM,EAAG8G,SAAS,EAAG,IAAK7G,GACzCua,EAAG,IAAM,IACTA,EAAG,KAAO,IACVA,EAAG,KAAO,GAEV,IAAI9a,EAAK,IAAIQ,WAAWiB,EAAEf,OAAS,IACnCV,EAAGoH,SAAS,IAAI1B,IAAIjE,GACpBzB,EAAGoH,SAAS,GAAI,IAAI1B,IAAIoV,EAAG1T,SAAS,KAEpC,IAAI+E,EAAQI,EAAOC,KAAKxM,EAAGoH,SAAS,IAAK7G,GAEzCkW,EAAG6D,YAAYc,EAAKjP,EAAO5L,GAC3Bia,EAAGtB,gBAAgBoC,EAAKF,EAAK7a,GAC7Bia,EAAGhZ,KAAKxB,EAAGoH,SAAS,EAAG,IAAKkU,EAAK/a,GAEjCP,EAAG0F,IAAI7E,EAAI,IAEX,IAAI0a,EAAOhP,EAAOC,KAAKxM,EAAIO,GAW3B,OATAkW,EAAG6D,YAAYe,EAAKE,EAAMhb,GAC1BkW,EAAG4D,YAAYO,EAAME,EAAIva,GACzBkW,EAAGb,IAAIyF,EAAKA,EAAKT,EAAMra,GACvBkW,EAAGzR,IAAIqW,EAAKA,EAAKD,EAAK7a,GAEtBkW,EAAG8D,UAAUva,EAAGoH,SAAS,GAAI,IAAKiU,GAElC9a,EAAWqF,QAAQkV,EAAI3O,EAAOoP,EAAMH,EAAKC,EAAKT,EAAM/Z,GACpDN,EAAWS,eACJhB,CACX,EAuDAI,EAAQob,UArDR,SAAmB/Z,EAAGnB,EAAIC,GACtB,KAAMD,aAAcE,YAChB,MAAM,IAAIC,UAAU,oCAExB,GAAkB,KAAdH,EAAGI,OACH,MAAM,IAAIC,MAAM,iEAC2BL,EAAGI,OAAS,mBAEtDH,IACDA,EAAaR,EAAOa,eAExB,IAAI6a,EAASlP,EAAOE,YAAW,EAAOlM,GAClC6a,EAAM3E,EAAGgD,aAAalZ,GACtB8a,EAAM5E,EAAGgD,aAAalZ,GACtBqa,EAAOnE,EAAGgD,aAAalZ,GACvB+a,EAAMd,EAAG7D,aAAapW,GACtBM,EAAKN,EAAWO,cAAc,IAClCD,EAAG6E,IAAIpF,EAAG8G,SAAS,KAEnBqU,EAAOnL,OAAOhQ,EAAG8G,SAAS,EAAG,KAC7B,IAAI0T,EAAKW,EAAOjL,SAChBsK,EAAG,IAAM,IACTA,EAAG,KAAO,IACVA,EAAG,KAAO,GAEV,IAAIY,EAAMnb,EAAWO,cAAc,IACnC4a,EAAItU,SAAS,GAAI,IAAI1B,IAAIoV,EAAG1T,SAAS,KAErCqU,EAAOnL,OAAOoL,EAAItU,SAAS,KAC3BqU,EAAOnL,OAAO7O,GACd,IAAI0K,EAAQsP,EAAOjL,SAEnBiG,EAAG6D,YAAYc,EAAKjP,EAAO5L,GAC3Bia,EAAGtB,gBAAgBoC,EAAKF,EAAK7a,GAC7Bia,EAAGhZ,KAAKka,EAAItU,SAAS,EAAG,IAAKkU,EAAK/a,GAElCkb,EAAOnL,OAAOoL,EAAItU,SAAS,EAAG,KAC9BqU,EAAOnL,OAAOzP,GACd4a,EAAOnL,OAAO7O,GACd,IAAI8Z,EAAOE,EAAOjL,SAYlB,OAVAiG,EAAG6D,YAAYe,EAAKE,EAAMhb,GAC1BkW,EAAG4D,YAAYO,EAAME,EAAIva,GACzBkW,EAAGb,IAAIyF,EAAKA,EAAKT,EAAMra,GACvBkW,EAAGzR,IAAIqW,EAAKA,EAAKD,EAAK7a,GAEtBkW,EAAG8D,UAAUmB,EAAItU,SAAS,IAAKiU,GAE/B9a,EAAWqF,QAAQkV,EAAI3O,EAAOoP,EAAMH,EAAKC,EAAKT,EAAM/Z,GACpD4a,EAAOxQ,UACP1K,EAAWS,eACJ0a,CACX,EA4CAtb,EAAQyB,KAvCR,SAAc7B,EAAIa,EAAIN,GAClB,KAAMM,aAAcL,YAChB,MAAM,IAAIC,UAAU,oCAExB,GAAkB,KAAdI,EAAGH,OACH,MAAM,IAAIC,MAAM,iEAC2BE,EAAGH,OAAS,mBAEtDH,IACDA,EAAaR,EAAOa,eAExB,IAAI+a,EAAQpb,EAAWO,cAAc,IACjC8a,EAASrb,EAAWO,cAAc,IAClC+a,EAAOrB,EAAG7D,aAAapW,GACvBub,EAAOtB,EAAG7D,aAAapW,GACvBwb,EAAStF,EAAGgD,aAAalZ,GACzB8a,EAAM5E,EAAGgD,aAAalZ,GAC1B,GAAKP,EAAGU,OAAS,IAAiB,IAATV,EAAG,MACvBwa,EAAG3C,kBAAkBgE,EAAMhb,EAAIN,GAChC,OAAO,KAEXob,EAAMjW,IAAI1F,EAAGoH,SAAS,EAAG,KACzBqP,EAAG4D,YAAYgB,EAAKrb,EAAGoH,SAAS,GAAI,IAAK7G,GACzC,IAAIkB,EAAI,IAAIjB,WAAWR,EAAGU,QAC1Be,EAAEiE,IAAI1F,GACNyB,EAAEiE,IAAI7E,EAAI,IACV,IAAI0a,EAAOhP,EAAOC,KAAK/K,EAAGlB,GAC1BkW,EAAG6D,YAAYyB,EAAQR,EAAMhb,GAC7Bia,EAAGjC,0BAA0BuD,EAAMD,EAAME,EAAQvB,EAAG7Q,KAAM0R,EAAK9a,GAC/Dia,EAAGhZ,KAAKoa,EAAQE,EAAMvb,GAEtB,IADA,IAAIyb,EAAOvB,EAAWwB,IAAIN,EAAOC,GACxB9W,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBrD,EAAEqD,GAAK,EAKX,OAHAvE,EAAWqF,QAAQ+V,EAAOC,EAAQL,EAAMQ,EAAQV,GAChDb,EAAG3D,gBAAgBtW,EAAYsb,EAAMC,GACrCvb,EAAWS,eACHgb,EAAOva,EAAE2F,SAAS,IAAM,IACpC,EAwCAhH,EAAQ2E,OAtCR,SAAgB2W,EAAKja,EAAGZ,EAAIN,GACxB,KAAMM,aAAcL,YAChB,MAAM,IAAIC,UAAU,oCAExB,GAAkB,KAAdI,EAAGH,OACH,MAAM,IAAIC,MAAM,iEAC2BE,EAAGH,OAAS,mBAEtDH,IACDA,EAAaR,EAAOa,eAExB,IAAI+a,EAAQpb,EAAWO,cAAc,IACjC8a,EAASrb,EAAWO,cAAc,IAClC+a,EAAOrB,EAAG7D,aAAapW,GACvBub,EAAOtB,EAAG7D,aAAapW,GACvBwb,EAAStF,EAAGgD,aAAalZ,GACzB8a,EAAM5E,EAAGgD,aAAalZ,GAC1B,GAAKmb,EAAIhb,OAAS,IAAkB,IAAVgb,EAAI,MACzBlB,EAAG3C,kBAAkBgE,EAAMhb,EAAIN,GAChC,OAAO,EAEXob,EAAMjW,IAAIgW,EAAItU,SAAS,EAAG,KAC1BqP,EAAG4D,YAAYgB,EAAKK,EAAItU,SAAS,GAAI,IAAK7G,GAC1C,IAAIkb,EAASlP,EAAOE,YAAW,EAAMlM,GACrCkb,EAAOnL,OAAOoL,EAAItU,SAAS,EAAG,KAC9BqU,EAAOnL,OAAOzP,GACd4a,EAAOnL,OAAO7O,GACd,IAAI8Z,EAAOE,EAAOjL,SAClBiG,EAAG6D,YAAYyB,EAAQR,EAAMhb,GAC7Bia,EAAGjC,0BAA0BuD,EAAMD,EAAME,EAAQvB,EAAG7Q,KAAM0R,EAAK9a,GAC/Dia,EAAGhZ,KAAKoa,EAAQE,EAAMvb,GACtB,IAAIyb,EAAOvB,EAAWwB,IAAIN,EAAOC,GAKjC,OAJArb,EAAWqF,QAAQ+V,EAAOC,EAAQL,EAAMQ,EAAQV,GAChDb,EAAG3D,gBAAgBtW,EAAYsb,EAAMC,GACrCL,EAAOxQ,UACP1K,EAAWS,eACJgb,CACX,EAEA5b,EAAQqC,aAAe,oBACvBrC,EAAQ8b,kBAAoB,GAC5B9b,EAAQ+b,kBAAoB,GAC5Bra,OAAOC,OAAO3B,E,gBCrPd,IAAIgc,EAAkB,WAClB,SAASA,EAAeC,GACpB3L,KAAKnQ,WAAa,KAClBmQ,KAAK4L,KAAO,IAAIvD,MAAM,IACtBrI,KAAK6L,WAAa,EAClB7L,KAAK8L,YAAc,EACnB9L,KAAK2L,gBAAkBA,EACvBva,OAAO2a,KAAK/L,KAChB,CA6DA,OA5DA0L,EAAeM,mBAAqB,SAAUL,GAC1C,IAAIC,EAAO,IAAIF,EAAeC,GAI9B,OAHAC,EAAK/b,WAAa,WACd,OAAO,IAAIC,WAAW8b,EAAKD,gBAC/B,EACOC,CACX,EACAF,EAAeO,oBAAsB,SAAUN,GAC3C,IAAIC,EAAO,IAAIF,EAAeC,GAI9B,OAHAC,EAAK/b,WAAa,WACd,OAAO,IAAI8E,YAAYiX,EAAKD,gBAChC,EACOC,CACX,EAWAF,EAAeQ,UAAUC,IAAM,WAC3B,IAAIC,EAYJ,OAXIpM,KAAK6L,UAAY,EACjBO,EAAMpM,KAAKnQ,cAGXuc,EAAMpM,KAAK4L,KAAK5L,KAAK6L,WACrB7L,KAAK4L,KAAK5L,KAAK6L,WAAa,KAC5B7L,KAAK6L,WAAa,EACd7L,KAAK6L,UAAY7L,KAAK8L,aACtB9L,KAAK8L,WAAa9L,KAAK6L,YAGxBO,CACX,EAKAV,EAAeQ,UAAUhX,QAAU,SAAUkX,GACzCpM,KAAK6L,WAAa,EAClB7L,KAAK4L,KAAK5L,KAAK6L,WAAaO,CAChC,EAIAV,EAAeQ,UAAUva,KAAO,WAE5B,IADA,IAAI0a,EACKjY,EAAK4L,KAAK8L,WAAa,EAAI1X,GAAK4L,KAAK6L,UAAWzX,GAAK,EAAG,CAC7DiY,EAAUrM,KAAK4L,KAAKxX,GACpB,IAAK,IAAIK,EAAI,EAAGA,EAAI4X,EAAQrc,OAAQyE,GAAK,EACrC4X,EAAQ5X,GAAK,CAErB,CACAuL,KAAK8L,WAAa9L,KAAK6L,SAC3B,EACOH,CACX,CAtEqB,GAkFrBhc,EAAQQ,YAXR,WACI,IAAIgS,EAAI,IAAIoK,EACZ,MAAO,CACHlc,cAAe8R,EAAE9R,cAAcmc,KAAKrK,GACpCnN,eAAgBmN,EAAEnN,eAAewX,KAAKrK,GACtChN,QAASgN,EAAEhN,QAAQqX,KAAKrK,GACxB5R,aAAc4R,EAAE5R,aAAaic,KAAKrK,GAClCsK,MAAOtK,EAAEsK,MAAMD,KAAKrK,GACpBvQ,KAAMA,EAEd,EAEA,IAAI2a,EAAc,WACd,SAASA,IACLtM,KAAKyM,OAAS,CAAC,EACfzM,KAAK0M,QAAU,CAAC,EAChB1M,KAAKrO,KAAOA,EACZP,OAAOC,OAAO2O,KAClB,CAqEA,OApEAsM,EAAWJ,UAAU9b,cAAgB,SAAUkQ,GAC3C,IAAIsL,EAAO5L,KAAKyM,OAAOnM,GACvB,OAAQsL,EAAOA,EAAKO,MAAQ,IAAIrc,WAAWwQ,EAC/C,EACAgM,EAAWJ,UAAUnX,eAAiB,SAAUuL,GAC5C,IAAIsL,EAAO5L,KAAK0M,QAAQpM,GACxB,OAAQsL,EAAOA,EAAKO,MAAQ,IAAIxX,YAAY2L,EAChD,EACAgM,EAAWJ,UAAUS,kBAAoB,SAAUP,GAC/C,IAAIR,EAAO5L,KAAKyM,OAAOL,EAAIpc,QACtB4b,IACDA,EAAOF,EAAeM,mBAAmBI,EAAIpc,QAC7CgQ,KAAKyM,OAAOL,EAAIpc,QAAU4b,GAE9BA,EAAK1W,QAAQkX,EACjB,EACAE,EAAWJ,UAAUU,mBAAqB,SAAUR,GAChD,IAAIR,EAAO5L,KAAK0M,QAAQN,EAAIpc,QACvB4b,IACDA,EAAOF,EAAeO,oBAAoBG,EAAIpc,QAC9CgQ,KAAK0M,QAAQN,EAAIpc,QAAU4b,GAE/BA,EAAK1W,QAAQkX,EACjB,EACAE,EAAWJ,UAAUhX,QAAU,WAE3B,IADA,IAIIkX,EAJA/c,EAAS,GACJsT,EAAK,EAAGA,EAAKC,UAAU5S,OAAQ2S,IACpCtT,EAAOsT,EAAK,GAAKC,UAAUD,GAG/B,IAAK,IAAIvO,EAAI,EAAGA,EAAI/E,EAAOW,OAAQoE,GAAK,EAEpC,GADAgY,EAAM/c,EAAO+E,GACb,CAEA,GAAwB,IAAnBgY,EAAIS,YACJT,EAAIpc,OAASoc,EAAI5B,oBAAsB4B,EAAIrR,OAAO+R,WACnD,MAAM,IAAI/c,UAAU,wBAA0BqE,EAAI,GAA9B,sEAGxB,GAAIgY,aAAetc,WACfkQ,KAAK2M,kBAAkBP,OAEtB,MAAIA,aAAezX,aAIpB,MAAM,IAAI5E,UAAU,4FAC0BqE,EAC1C,yBAA2BgY,EAAI5B,mBALnCxK,KAAK4M,mBAAmBR,EAM5B,CAhBY,CAkBpB,EACAE,EAAWJ,UAAU5b,aAAe,WAChC,IAAK,IAAIyc,KAAa/M,KAAKyM,OACvBzM,KAAKyM,OAAOM,GAAWpb,OAE3B,IAAK,IAAIob,KAAa/M,KAAK0M,QACvB1M,KAAK0M,QAAQK,GAAWpb,MAEhC,EACA2a,EAAWJ,UAAUM,MAAQ,WACzB,IAAK,IAAIO,KAAa/M,KAAKyM,cAChBzM,KAAKyM,OAAOM,GAEvB,IAAK,IAAIA,KAAa/M,KAAK0M,eAChB1M,KAAK0M,QAAQK,EAE5B,EACOT,CACX,CA5EiB,GAoFjB,SAAS3a,IAEL,IADA,IAIIya,EAJA/c,EAAS,GACJsT,EAAK,EAAGA,EAAKC,UAAU5S,OAAQ2S,IACpCtT,EAAOsT,EAAK,GAAKC,UAAUD,GAG/B,IAAK,IAAIvO,EAAI,EAAGA,EAAI/E,EAAOW,OAAQoE,GAAK,EAEpC,GADAgY,EAAM/c,EAAO+E,GAGb,IACI,IAAK,IAAIK,EAAI,EAAGA,EAAI2X,EAAIpc,OAAQyE,GAAK,EACjC2X,EAAI3X,GAAK,CAEjB,CACA,MAAO+B,GAAK,CAEpB,CAxBApF,OAAOC,OAAOib,GACdlb,OAAOC,OAAOib,EAAWJ,WAwBzBxc,EAAQiC,KAAOA,EACfP,OAAOC,OAAO3B,E,gBCrLd,SAASsd,EAAOnX,EAAGC,GACf,IAAI0G,EAAI3G,EAAE,GAAKC,EAAE,GACbvB,EAAIsB,EAAE,GAAKC,EAAE,IAAO0G,EAAI,WAAe,GAC3C,OAAO,IAAI7H,YAAY,CAAC6H,EAAGjI,GAC/B,CACA,SAAS0Y,EAAOpX,EAAGC,GACf,IAAIvB,EAAIsB,EAAE,GAAKC,EAAE,GACb0G,EAAI3G,EAAE,GAAKC,EAAE,GAKjB,OAJI0G,EAAI,IACJjI,GAAK,EACLiI,GAAK,YAEF,IAAI7H,YAAY,CAAC6H,EAAGjI,GAC/B,CAGA,SAAS2Y,EAAU/Q,EAAG/H,GAClB,IAAIoI,EAAKL,EAAE/H,EAAI,IAAM,GAAO+H,EAAE/H,EAAI,IAAM,GAAO+H,EAAE/H,EAAI,IAAM,EAAK+H,EAAE/H,GAC9DG,EAAK4H,EAAE/H,EAAI,IAAM,GAAO+H,EAAE/H,EAAI,IAAM,GAAO+H,EAAE/H,EAAI,IAAM,EAAK+H,EAAE/H,EAAI,GACtE,OAAO,IAAIO,YAAY,CAAC6H,EAAGjI,GAC/B,CACA,SAAS4Y,EAAWhR,EAAG/H,EAAGI,GACtB2H,EAAE/H,EAAI,GAAKI,EAAE,KAAO,GACpB2H,EAAE/H,EAAI,GAAKI,EAAE,KAAO,GACpB2H,EAAE/H,EAAI,GAAKI,EAAE,KAAO,EACpB2H,EAAE/H,EAAI,GAAKI,EAAE,GACb2H,EAAE/H,EAAI,GAAKI,EAAE,KAAO,GACpB2H,EAAE/H,EAAI,GAAKI,EAAE,KAAO,GACpB2H,EAAE/H,EAAI,GAAKI,EAAE,KAAO,EACpB2H,EAAE/H,GAAKI,EAAE,EACb,CAOA,SAAS8F,EAAQtJ,EAAGS,GAChB,GAAiB,KAAbT,EAAEhB,OACF,MAAM,IAAIC,MAAM,kEACZe,EAAEhB,OAAS,mBAEnB,GAAKyB,EAAQ,GAAOA,EAAQ,IACxB,MAAM,IAAIxB,MAAM,iCAGpB,IADA,IAAImd,EAAW,IAAIzY,YAAY,CAAClD,EAAO,IAC9B2C,EAAI,EAAGA,EAAI,EAAGA,GAAK,EACxB+Y,EAAWnc,EAAO,EAAJoD,EAAO4Y,EAAOE,EAAUlc,EAAO,EAAJoD,GAAQgZ,GAEzD,CAlDA1d,EAAQ2d,QANR,SAAiB7Y,GACb,KAAIA,EAAE,GAAK,SAGX,OAAc,WAAPA,EAAE,GAAmBA,EAAE,EAClC,EAoDA9E,EAAQ4K,QAAUA,EASlB5K,EAAQ4d,aAHR,SAAsBtc,GAClBsJ,EAAQtJ,EAAG,EACf,EAUAtB,EAAQ6d,cAHR,SAAuBvc,GACnBsJ,EAAQtJ,EAAG,EACf,EA0BAtB,EAAQ8d,eAjBR,SAAwBC,EAAWhc,EAAO5B,GACtC,IAAIud,EACJ,GAAqB,iBAAV3b,EAAoB,CAC3B,GAAKA,EAAQ,iBAAqBA,EAAQ,EACtC,MAAM,IAAIxB,MAAM,iCAEpBmd,EAAW,IAAIzY,YAAY,CAAClD,EAAOA,EAAQ,YAC/C,MAEI2b,EAAW3b,EAGf,IADA,IAAIT,EAAKnB,EAAaA,EAAWO,cAAc,IAAM,IAAIN,WAAW,IAC3DsE,EAAI,EAAGA,EAAI,EAAGA,GAAK,EACxB+Y,EAAWnc,EAAO,EAAJoD,EAAO4Y,EAAOE,EAAUO,EAAe,EAAJrZ,GAAQgZ,IAE7D,OAAOpc,CACX,EAoBAtB,EAAQge,eAXR,SAAwBC,EAAIC,GAGxB,IAFA,IACIC,EADApc,EAAQwb,EAAOC,EAAUU,EAAI,GAAIV,EAAUS,EAAI,IAE1CvZ,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAExB,GADAyZ,EAAKZ,EAAOC,EAAUU,EAAQ,EAAJxZ,GAAQ8Y,EAAUS,EAAQ,EAAJvZ,IAC3C3C,EAAM,KAAOoc,EAAG,IAAQpc,EAAM,KAAOoc,EAAG,GACzC,OAGR,OAAOpc,CACX,EAEAL,OAAOC,OAAO3B,E,gBC9Gd,SAAS2E,EAAO8H,EAAGC,EAAGkE,GAElB,IADA,IAAIwN,EAAgB,EACX1Z,EAAI,EAAGA,EAAIkM,EAAKlM,GAAK,EAC1B0Z,GAAiB3R,EAAE/H,GAAKgI,EAAEhI,GAE9B,OAA0B,IAAlB0Z,CACZ,CACApe,EAAQ2E,OAASA,EAYjB3E,EAAQkG,IAHR,SAAauG,EAAGC,GACZ,OAAO/H,EAAO8H,EAAGC,EAAG,GACxB,EAaA1M,EAAQ6b,IAHR,SAAapP,EAAGC,GACZ,OAAO/H,EAAO8H,EAAGC,EAAG,GACxB,EAEAhL,OAAOC,OAAO3B,E,GCjDVqe,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaxe,QAGrB,IAAI0e,EAASL,EAAyBE,GAAY,CAGjDve,QAAS,CAAC,GAOX,OAHA2e,EAAoBJ,GAAUG,EAAQA,EAAO1e,QAASse,GAG/CI,EAAO1e,OACf,CCrBAse,EAAoBhd,EAAKod,IACxB,IAAIE,EAASF,GAAUA,EAAOG,WAC7B,IAAOH,EAAiB,QACxB,IAAM,EAEP,OADAJ,EAAoB/L,EAAEqM,EAAQ,CAAEzY,EAAGyY,IAC5BA,CAAM,ECLdN,EAAoB/L,EAAI,CAACvS,EAAS8e,KACjC,IAAI,IAAItU,KAAOsU,EACXR,EAAoBS,EAAED,EAAYtU,KAAS8T,EAAoBS,EAAE/e,EAASwK,IAC5E9I,OAAOsd,eAAehf,EAASwK,EAAK,CAAEyU,YAAY,EAAMxC,IAAKqC,EAAWtU,IAE1E,ECND8T,EAAoBS,EAAI,CAACG,EAAKC,IAAUzd,OAAO8a,UAAU4C,eAAeC,KAAKH,EAAKC,G,oBCwBlFG,KAAKC,UAAY,SAAUC,GACvB,OAAQA,EAAIC,KAAKC,KACb,IAAK,gBAxBb,SAAsBD,EAAMle,EAAGD,GAC3Bme,EAAO,IAAIrf,WAAWqf,GACtBle,EAAI,IAAInB,WAAWmB,GACnBD,EAAI,IAAIlB,WAAWkB,GAEnB,IACMqe,EADiBC,IAAAA,WAAgB9e,SAASM,KAAKqe,EAAMne,EAAGC,GACtB8J,OAExCiU,KAAKO,YAAY,CAAEC,OAAQH,GAAoB,CAACA,GACpD,CAgBYI,CAAaP,EAAIC,KAAKK,OAAOL,KAAMD,EAAIC,KAAKK,OAAOve,EAAGie,EAAIC,KAAKK,OAAOxe,GACtE,MACJ,IAAK,gBAhBb,SAAsB0e,EAAMze,GACxBye,EAAO,IAAI5f,WAAW4f,GACtBze,EAAI,IAAInB,WAAWmB,GAEnB,IACI0e,EADmBL,IAAAA,WAAgB9e,SAASW,KAAKue,EAAMze,GACrB8J,OACtC4U,EAAmBA,EAAiBC,MAAM,GAAID,EAAiB7C,YAE/DkC,KAAKO,YAAY,CAAEC,OAAQG,GAAoB,CAACA,GACpD,CAQYE,CAAaX,EAAIC,KAAKK,OAAOE,KAAMR,EAAIC,KAAKK,OAAOve,GACnD,MACJ,QACI,KAAM,6BAA+Bie,EAAIC,KAAKC,IAE1D,C","sources":["webpack://psono-client/./node_modules/ecma-nacl/dist/lib/boxes/box.js","webpack://psono-client/./node_modules/ecma-nacl/dist/lib/boxes/core.js","webpack://psono-client/./node_modules/ecma-nacl/dist/lib/boxes/onetimeauth.js","webpack://psono-client/./node_modules/ecma-nacl/dist/lib/boxes/scalarmult.js","webpack://psono-client/./node_modules/ecma-nacl/dist/lib/boxes/secret_box.js","webpack://psono-client/./node_modules/ecma-nacl/dist/lib/boxes/stream.js","webpack://psono-client/./node_modules/ecma-nacl/dist/lib/ecma-nacl.js","webpack://psono-client/./node_modules/ecma-nacl/dist/lib/hash/sha512.js","webpack://psono-client/./node_modules/ecma-nacl/dist/lib/scrypt/scrypt.js","webpack://psono-client/./node_modules/ecma-nacl/dist/lib/scrypt/sha256.js","webpack://psono-client/./node_modules/ecma-nacl/dist/lib/signing/fe25519.js","webpack://psono-client/./node_modules/ecma-nacl/dist/lib/signing/ge25519.js","webpack://psono-client/./node_modules/ecma-nacl/dist/lib/signing/ge25519_base.data.js","webpack://psono-client/./node_modules/ecma-nacl/dist/lib/signing/sc25519.js","webpack://psono-client/./node_modules/ecma-nacl/dist/lib/signing/sign.js","webpack://psono-client/./node_modules/ecma-nacl/dist/lib/util/arrays.js","webpack://psono-client/./node_modules/ecma-nacl/dist/lib/util/nonce.js","webpack://psono-client/./node_modules/ecma-nacl/dist/lib/util/verify.js","webpack://psono-client/webpack/bootstrap","webpack://psono-client/webpack/runtime/compat get default export","webpack://psono-client/webpack/runtime/define property getters","webpack://psono-client/webpack/runtime/hasOwnProperty shorthand","webpack://psono-client/./src/js/crypto-worker.js"],"sourcesContent":["/* Copyright(c) 2013 - 2015 3NSoft Inc.\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, you can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\nvar arrays = require('../util/arrays');\nvar sm = require('./scalarmult');\nvar core = require('./core');\nvar sbox = require('./secret_box');\nvar streamMod = require('./stream');\nvar SIGMA = streamMod.SIGMA;\n/**\n * Replacement of crypto_box_keypair in\n * crypto_box/curve25519xsalsa20poly1305/ref/keypair.c\n * Public key can be generated for any given secret key, which itself should be\n * randomly generated.\n * @param sk is Uint8Array of 32 bytes of a secret key.\n * @param arrFactory is typed arrays factory, used to allocated/find an array\n * for use. It may be undefined, in which case an internally created one is used.\n * @returns Uint8Array with 32 bytes of a public key, that corresponds given\n * secret key.\n */\nfunction generate_pubkey(sk, arrFactory) {\n    if (!(sk instanceof Uint8Array)) {\n        throw new TypeError(\"Key array k must be Uint8Array.\");\n    }\n    if (sk.length !== 32) {\n        throw new Error(\"Key array sk should have 32 \" +\n            \"elements (bytes) in it, but it is \" + sk.length + \" elements long.\");\n    }\n    if (!arrFactory) {\n        arrFactory = arrays.makeFactory();\n    }\n    var pk = arrFactory.getUint8Array(32);\n    sm.curve25519_base(pk, sk, arrFactory);\n    arrFactory.wipeRecycled();\n    return pk;\n}\nexports.generate_pubkey = generate_pubkey;\n/**\n * n array in crypto_box/curve25519xsalsa20poly1305/ref/before.c\n */\nvar n_to_calc_dhshared_key = new Uint8Array(16);\n/**\n * Analog of crypto_box_beforenm in\n * crypto_box/curve25519xsalsa20poly1305/ref/before.c\n * @param pk is Uint8Array, 32 items long.\n * @param sk is Uint8Array, 32 items long.\n * @param arrFactory is typed arrays factory, used to allocated/find an array\n * for use. It may be undefined, in which case an internally created one is used.\n * @return Uint8Array with 32 bytes of stream key for the box, under given\n * public and secret keys.\n */\nfunction calc_dhshared_key(pk, sk, arrFactory) {\n    if (!(pk instanceof Uint8Array)) {\n        throw new TypeError(\"Public key array pk must be Uint8Array.\");\n    }\n    if (pk.length !== 32) {\n        throw new Error(\"Public key array pk should have 32 elements (bytes) in it, but it is \" +\n            pk.length + \" elements long.\");\n    }\n    if (!(sk instanceof Uint8Array)) {\n        throw new TypeError(\"Secret key array sk must be Uint8Array.\");\n    }\n    if (sk.length !== 32) {\n        throw new Error(\"Secret key array sk should have 32 elements (bytes) in it, but it is \" +\n            sk.length + \" elements long.\");\n    }\n    if (!arrFactory) {\n        arrFactory = arrays.makeFactory();\n    }\n    var s = new Uint8Array(32);\n    sm.curve25519(s, sk, pk, arrFactory);\n    core.hsalsa20(s, n_to_calc_dhshared_key, s, SIGMA);\n    arrFactory.wipeRecycled();\n    return s;\n}\nexports.calc_dhshared_key = calc_dhshared_key;\n/**\n * Analog of crypto_box in crypto_box/curve25519xsalsa20poly1305/ref/box.c\n * @param m is Uint8Array of message bytes that need to be encrypted to given\n * secret and public keys.\n * @param n is Uint8Array, 24 bytes long nonce.\n * @param pk is Uint8Array, 32 bytes long public key of message receiving party.\n * @param sk is Uint8Array, 32 bytes long secret key of message sending party.\n * @param arrFactory is typed arrays factory, used to allocated/find an array\n * for use. It may be undefined, in which case an internally created one is used.\n * @return Uint8Array with resulting cipher of incoming message, packaged according\n * to NaCl's xsalsa20+poly1305 secret-box bytes layout, trimmed of initial zeros.\n */\nfunction pack(m, n, pk, sk, arrFactory) {\n    if (!arrFactory) {\n        arrFactory = arrays.makeFactory();\n    }\n    var k = calc_dhshared_key(pk, sk, arrFactory);\n    var c = sbox.pack(m, n, k, arrFactory);\n    arrFactory.wipeRecycled();\n    return c;\n}\nexports.pack = pack;\n/**\n * Analog of crypto_box_open in crypto_box/curve25519xsalsa20poly1305/ref/box.c\n * @param c is Uint8Array of cipher bytes that need to be opened.\n * @param n is Uint8Array, 24 bytes long nonce.\n * @param pk is Uint8Array, 32 bytes long public key of message receiving party.\n * @param sk is Uint8Array, 32 bytes long secret key of message sending party.\n * @param arrFactory is typed arrays factory, used to allocated/find an array\n * for use. It may be undefined, in which case an internally created one is used.\n * @return Uint8Array with decrypted message bytes.\n * Array is a view of buffer, which has 32 zeros preceding message bytes.\n * @throws Error when cipher bytes fail verification.\n */\nfunction open(c, n, pk, sk, arrFactory) {\n    if (!arrFactory) {\n        arrFactory = arrays.makeFactory();\n    }\n    var k = calc_dhshared_key(pk, sk, arrFactory);\n    var m = sbox.open(c, n, k, arrFactory);\n    arrFactory.wipeRecycled();\n    return m;\n}\nexports.open = open;\nvar stream;\n(function (stream) {\n    stream.pack = sbox.pack;\n    stream.open = sbox.open;\n})(stream = exports.stream || (exports.stream = {}));\nObject.freeze(stream);\nvar formatWN;\n(function (formatWN) {\n    /**\n     * @param m is Uint8Array of message bytes that need to be encrypted by secret key.\n     * @param n is Uint8Array, 24 bytes long nonce.\n     * @param pk is Uint8Array, 32 bytes long public key of message receiving party.\n     * @param sk is Uint8Array, 32 bytes long secret key of message sending party.\n     * @param arrFactory is typed arrays factory, used to allocated/find an array\n     * for use. It may be undefined, in which case an internally created one is used.\n     * @returns Uint8Array, where nonce is packed together with cipher.\n     * Length of the returned array is 40 bytes greater than that of a message.\n     */\n    function pack(m, n, pk, sk, arrFactory) {\n        if (!arrFactory) {\n            arrFactory = arrays.makeFactory();\n        }\n        var k = calc_dhshared_key(pk, sk, arrFactory);\n        var c = sbox.formatWN.pack(m, n, k, arrFactory);\n        arrFactory.wipeRecycled();\n        return c;\n    }\n    formatWN.pack = pack;\n    /**\n     * @param c is Uint8Array with nonce and cipher bytes that need to be opened by\n     * secret key.\n     * @param pk is Uint8Array, 32 bytes long public key of message receiving party.\n     * @param sk is Uint8Array, 32 bytes long secret key of message sending party.\n     * @param arrFactory is typed arrays factory, used to allocated/find an array\n     * for use. It may be undefined, in which case an internally created one is used.\n     * @return Uint8Array with decrypted message bytes.\n     * Array is a view of buffer, which has 32 zeros preceding message bytes.\n     */\n    function open(c, pk, sk, arrFactory) {\n        if (!arrFactory) {\n            arrFactory = arrays.makeFactory();\n        }\n        var k = calc_dhshared_key(pk, sk, arrFactory);\n        var m = sbox.formatWN.open(c, k, arrFactory);\n        arrFactory.wipeRecycled();\n        return m;\n    }\n    formatWN.open = open;\n    formatWN.copyNonceFrom = sbox.formatWN.copyNonceFrom;\n    /**\n     * @param pk is Uint8Array, 32 bytes long public key of message receiving party.\n     * @param sk is Uint8Array, 32 bytes long secret key of message sending party.\n     * @param nextNonce is nonce, which should be used for the very first packing.\n     * All further packing will be done with new nonce, as it is automatically evenly\n     * advanced.\n     * Note that nextNonce will be copied.\n     * @param delta is a number between 1 and 255 inclusive, used to advance nonce.\n     * When missing, it defaults to two.\n     * @param arrFactory is typed arrays factory, used to allocated/find an array\n     * for use. It may be undefined, in which case an internally created one is used.\n     * @return a frozen object with pack & open functions, and destroy\n     * It is NaCl's secret box for a calculated DH-shared key, with automatically\n     * evenly advancing nonce.\n     */\n    function makeEncryptor(pk, sk, nextNonce, delta, arrFactory) {\n        if ('number' !== typeof delta) {\n            delta = 2;\n        }\n        if (!arrFactory) {\n            arrFactory = arrays.makeFactory();\n        }\n        var k = calc_dhshared_key(pk, sk, arrFactory);\n        var enc = sbox.formatWN.makeEncryptor(k, nextNonce, delta, arrFactory);\n        arrFactory.wipe(k);\n        return enc;\n    }\n    formatWN.makeEncryptor = makeEncryptor;\n    /**\n     * @param pk is Uint8Array, 32 bytes long public key of message receiving party.\n     * @param sk is Uint8Array, 32 bytes long secret key of message sending party.\n     * @param arrFactory is typed arrays factory, used to allocated/find an array\n     * for use. It may be undefined, in which case an internally created one is used.\n     * @return a frozen object with open and destroy functions.\n     * It is NaCl's secret box for a calculated DH-shared key.\n     */\n    function makeDecryptor(pk, sk, arrFactory) {\n        if (!arrFactory) {\n            arrFactory = arrays.makeFactory();\n        }\n        var k = calc_dhshared_key(pk, sk, arrFactory);\n        var enc = sbox.formatWN.makeDecryptor(k, arrFactory);\n        arrFactory.wipe(k);\n        return enc;\n    }\n    formatWN.makeDecryptor = makeDecryptor;\n})(formatWN = exports.formatWN || (exports.formatWN = {}));\nObject.freeze(formatWN);\nexports.NONCE_LENGTH = 24;\nexports.KEY_LENGTH = 32;\nexports.JWK_ALG_NAME = 'NaCl-box-CXSP';\nObject.freeze(exports);\n","/* Copyright(c) 2013-2015 3NSoft Inc.\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, you can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n/**\n * Analog of crypto_core in crypto_core/salsa20/ref/core.c\n * It makes nicer, shorter code to have variables of this function sitting in\n * one array, but expanded version runs faster.\n * We inlined load_littleendian(() & store_littleendian(), and rotate()\n * functions from the original source.\n * @param out is Uint8Array, 64 bytes long, into which result is placed.\n * @param inArr is Uint8Array, 16 bytes long, of incoming bytes.\n * @param k is Uint8Array, 32 bytes long.\n * @param c is Uint8Array, 16 bytes long.\n */\nfunction salsa20(out, inArr, k, c) {\n    // inlined load_littleendian()'s\n    var x0 = c[0] | (c[1] << 8) | (c[2] << 16) | (c[3] << 24);\n    var j0 = x0;\n    var x1 = k[0] | (k[1] << 8) | (k[2] << 16) | (k[3] << 24);\n    var j1 = x1;\n    var x2 = k[4] | (k[5] << 8) | (k[6] << 16) | (k[7] << 24);\n    var j2 = x2;\n    var x3 = k[8] | (k[9] << 8) | (k[10] << 16) | (k[11] << 24);\n    var j3 = x3;\n    var x4 = k[12] | (k[13] << 8) | (k[14] << 16) | (k[15] << 24);\n    var j4 = x4;\n    var x5 = c[4] | (c[5] << 8) | (c[6] << 16) | (c[7] << 24);\n    var j5 = x5;\n    var x6 = inArr[0] | (inArr[1] << 8) | (inArr[2] << 16) | (inArr[3] << 24);\n    var j6 = x6;\n    var x7 = inArr[4] | (inArr[5] << 8) | (inArr[6] << 16) | (inArr[7] << 24);\n    var j7 = x7;\n    var x8 = inArr[8] | (inArr[9] << 8) | (inArr[10] << 16) | (inArr[11] << 24);\n    var j8 = x8;\n    var x9 = inArr[12] | (inArr[13] << 8) | (inArr[14] << 16) | (inArr[15] << 24);\n    var j9 = x9;\n    var x10 = c[8] | (c[9] << 8) | (c[10] << 16) | (c[11] << 24);\n    var j10 = x10;\n    var x11 = k[16] | (k[17] << 8) | (k[18] << 16) | (k[19] << 24);\n    var j11 = x11;\n    var x12 = k[20] | (k[21] << 8) | (k[22] << 16) | (k[23] << 24);\n    var j12 = x12;\n    var x13 = k[24] | (k[25] << 8) | (k[26] << 16) | (k[27] << 24);\n    var j13 = x13;\n    var x14 = k[28] | (k[29] << 8) | (k[30] << 16) | (k[31] << 24);\n    var j14 = x14;\n    var x15 = c[12] | (c[13] << 8) | (c[14] << 16) | (c[15] << 24);\n    var j15 = x15;\n    var t = 0;\n    for (var i = 20; i > 0; i -= 2) {\n        // inlined rotate()'s\n        t = (x0 + x12);\n        x4 ^= (t << 7) | (t >>> 25);\n        t = (x4 + x0);\n        x8 ^= (t << 9) | (t >>> 23);\n        t = (x8 + x4);\n        x12 ^= (t << 13) | (t >>> 19);\n        t = (x12 + x8);\n        x0 ^= (t << 18) | (t >>> 14);\n        t = (x5 + x1);\n        x9 ^= (t << 7) | (t >>> 25);\n        t = (x9 + x5);\n        x13 ^= (t << 9) | (t >>> 23);\n        t = (x13 + x9);\n        x1 ^= (t << 13) | (t >>> 19);\n        t = (x1 + x13);\n        x5 ^= (t << 18) | (t >>> 14);\n        t = (x10 + x6);\n        x14 ^= (t << 7) | (t >>> 25);\n        t = (x14 + x10);\n        x2 ^= (t << 9) | (t >>> 23);\n        t = (x2 + x14);\n        x6 ^= (t << 13) | (t >>> 19);\n        t = (x6 + x2);\n        x10 ^= (t << 18) | (t >>> 14);\n        t = (x15 + x11);\n        x3 ^= (t << 7) | (t >>> 25);\n        t = (x3 + x15);\n        x7 ^= (t << 9) | (t >>> 23);\n        t = (x7 + x3);\n        x11 ^= (t << 13) | (t >>> 19);\n        t = (x11 + x7);\n        x15 ^= (t << 18) | (t >>> 14);\n        t = (x0 + x3);\n        x1 ^= (t << 7) | (t >>> 25);\n        t = (x1 + x0);\n        x2 ^= (t << 9) | (t >>> 23);\n        t = (x2 + x1);\n        x3 ^= (t << 13) | (t >>> 19);\n        t = (x3 + x2);\n        x0 ^= (t << 18) | (t >>> 14);\n        t = (x5 + x4);\n        x6 ^= (t << 7) | (t >>> 25);\n        t = (x6 + x5);\n        x7 ^= (t << 9) | (t >>> 23);\n        t = (x7 + x6);\n        x4 ^= (t << 13) | (t >>> 19);\n        t = (x4 + x7);\n        x5 ^= (t << 18) | (t >>> 14);\n        t = (x10 + x9);\n        x11 ^= (t << 7) | (t >>> 25);\n        t = (x11 + x10);\n        x8 ^= (t << 9) | (t >>> 23);\n        t = (x8 + x11);\n        x9 ^= (t << 13) | (t >>> 19);\n        t = (x9 + x8);\n        x10 ^= (t << 18) | (t >>> 14);\n        t = (x15 + x14);\n        x12 ^= (t << 7) | (t >>> 25);\n        t = (x12 + x15);\n        x13 ^= (t << 9) | (t >>> 23);\n        t = (x13 + x12);\n        x14 ^= (t << 13) | (t >>> 19);\n        t = (x14 + x13);\n        x15 ^= (t << 18) | (t >>> 14);\n    }\n    x0 = (x0 + j0);\n    x1 = (x1 + j1);\n    x2 = (x2 + j2);\n    x3 = (x3 + j3);\n    x4 = (x4 + j4);\n    x5 = (x5 + j5);\n    x6 = (x6 + j6);\n    x7 = (x7 + j7);\n    x8 = (x8 + j8);\n    x9 = (x9 + j9);\n    x10 = (x10 + j10);\n    x11 = (x11 + j11);\n    x12 = (x12 + j12);\n    x13 = (x13 + j13);\n    x14 = (x14 + j14);\n    x15 = (x15 + j15);\n    // inlined store_littleendian()'s\n    out[0] = x0;\n    out[1] = x0 >>> 8;\n    out[2] = x0 >>> 16;\n    out[3] = x0 >>> 24;\n    out[4] = x1;\n    out[5] = x1 >>> 8;\n    out[6] = x1 >>> 16;\n    out[7] = x1 >>> 24;\n    out[8] = x2;\n    out[9] = x2 >>> 8;\n    out[10] = x2 >>> 16;\n    out[11] = x2 >>> 24;\n    out[12] = x3;\n    out[13] = x3 >>> 8;\n    out[14] = x3 >>> 16;\n    out[15] = x3 >>> 24;\n    out[16] = x4;\n    out[17] = x4 >>> 8;\n    out[18] = x4 >>> 16;\n    out[19] = x4 >>> 24;\n    out[20] = x5;\n    out[21] = x5 >>> 8;\n    out[22] = x5 >>> 16;\n    out[23] = x5 >>> 24;\n    out[24] = x6;\n    out[25] = x6 >>> 8;\n    out[26] = x6 >>> 16;\n    out[27] = x6 >>> 24;\n    out[28] = x7;\n    out[29] = x7 >>> 8;\n    out[30] = x7 >>> 16;\n    out[31] = x7 >>> 24;\n    out[32] = x8;\n    out[33] = x8 >>> 8;\n    out[34] = x8 >>> 16;\n    out[35] = x8 >>> 24;\n    out[36] = x9;\n    out[37] = x9 >>> 8;\n    out[38] = x9 >>> 16;\n    out[39] = x9 >>> 24;\n    out[40] = x10;\n    out[41] = x10 >>> 8;\n    out[42] = x10 >>> 16;\n    out[43] = x10 >>> 24;\n    out[44] = x11;\n    out[45] = x11 >>> 8;\n    out[46] = x11 >>> 16;\n    out[47] = x11 >>> 24;\n    out[48] = x12;\n    out[49] = x12 >>> 8;\n    out[50] = x12 >>> 16;\n    out[51] = x12 >>> 24;\n    out[52] = x13;\n    out[53] = x13 >>> 8;\n    out[54] = x13 >>> 16;\n    out[55] = x13 >>> 24;\n    out[56] = x14;\n    out[57] = x14 >>> 8;\n    out[58] = x14 >>> 16;\n    out[59] = x14 >>> 24;\n    out[60] = x15;\n    out[61] = x15 >>> 8;\n    out[62] = x15 >>> 16;\n    out[63] = x15 >>> 24;\n}\nexports.salsa20 = salsa20;\n/**\n * Analog of crypto_core in crypto_core/hsalsa20/ref2/core.c\n * It makes nicer, shorter code to have variables of this function sitting in\n * one array, but expanded version runs faster.\n * We inlined load_littleendian(() & store_littleendian(), and rotate()\n * functions from the original source.\n * @param out is Uint8Array, 32 bytes long, into which result is placed.\n * @param inArr is Uint8Array, 16 bytes long, of incoming bytes.\n * @param k is Uint8Array, 32 bytes long.\n * @param c is Uint8Array, 16 bytes long.\n */\nfunction hsalsa20(out, inArr, k, c) {\n    // inlined load_littleendian()'s\n    var x0 = c[0] | (c[1] << 8) | (c[2] << 16) | (c[3] << 24);\n    var x1 = k[0] | (k[1] << 8) | (k[2] << 16) | (k[3] << 24);\n    var x2 = k[4] | (k[5] << 8) | (k[6] << 16) | (k[7] << 24);\n    var x3 = k[8] | (k[9] << 8) | (k[10] << 16) | (k[11] << 24);\n    var x4 = k[12] | (k[13] << 8) | (k[14] << 16) | (k[15] << 24);\n    var x5 = c[4] | (c[5] << 8) | (c[6] << 16) | (c[7] << 24);\n    var x6 = inArr[0] | (inArr[1] << 8) | (inArr[2] << 16) | (inArr[3] << 24);\n    var x7 = inArr[4] | (inArr[5] << 8) | (inArr[6] << 16) | (inArr[7] << 24);\n    var x8 = inArr[8] | (inArr[9] << 8) | (inArr[10] << 16) | (inArr[11] << 24);\n    var x9 = inArr[12] | (inArr[13] << 8) | (inArr[14] << 16) | (inArr[15] << 24);\n    var x10 = c[8] | (c[9] << 8) | (c[10] << 16) | (c[11] << 24);\n    var x11 = k[16] | (k[17] << 8) | (k[18] << 16) | (k[19] << 24);\n    var x12 = k[20] | (k[21] << 8) | (k[22] << 16) | (k[23] << 24);\n    var x13 = k[24] | (k[25] << 8) | (k[26] << 16) | (k[27] << 24);\n    var x14 = k[28] | (k[29] << 8) | (k[30] << 16) | (k[31] << 24);\n    var x15 = c[12] | (c[13] << 8) | (c[14] << 16) | (c[15] << 24);\n    var t = 0;\n    for (var i = 20; i > 0; i -= 2) {\n        // inlined rotate()'s\n        t = (x0 + x12);\n        x4 ^= (t << 7) | (t >>> 25);\n        t = (x4 + x0);\n        x8 ^= (t << 9) | (t >>> 23);\n        t = (x8 + x4);\n        x12 ^= (t << 13) | (t >>> 19);\n        t = (x12 + x8);\n        x0 ^= (t << 18) | (t >>> 14);\n        t = (x5 + x1);\n        x9 ^= (t << 7) | (t >>> 25);\n        t = (x9 + x5);\n        x13 ^= (t << 9) | (t >>> 23);\n        t = (x13 + x9);\n        x1 ^= (t << 13) | (t >>> 19);\n        t = (x1 + x13);\n        x5 ^= (t << 18) | (t >>> 14);\n        t = (x10 + x6);\n        x14 ^= (t << 7) | (t >>> 25);\n        t = (x14 + x10);\n        x2 ^= (t << 9) | (t >>> 23);\n        t = (x2 + x14);\n        x6 ^= (t << 13) | (t >>> 19);\n        t = (x6 + x2);\n        x10 ^= (t << 18) | (t >>> 14);\n        t = (x15 + x11);\n        x3 ^= (t << 7) | (t >>> 25);\n        t = (x3 + x15);\n        x7 ^= (t << 9) | (t >>> 23);\n        t = (x7 + x3);\n        x11 ^= (t << 13) | (t >>> 19);\n        t = (x11 + x7);\n        x15 ^= (t << 18) | (t >>> 14);\n        t = (x0 + x3);\n        x1 ^= (t << 7) | (t >>> 25);\n        t = (x1 + x0);\n        x2 ^= (t << 9) | (t >>> 23);\n        t = (x2 + x1);\n        x3 ^= (t << 13) | (t >>> 19);\n        t = (x3 + x2);\n        x0 ^= (t << 18) | (t >>> 14);\n        t = (x5 + x4);\n        x6 ^= (t << 7) | (t >>> 25);\n        t = (x6 + x5);\n        x7 ^= (t << 9) | (t >>> 23);\n        t = (x7 + x6);\n        x4 ^= (t << 13) | (t >>> 19);\n        t = (x4 + x7);\n        x5 ^= (t << 18) | (t >>> 14);\n        t = (x10 + x9);\n        x11 ^= (t << 7) | (t >>> 25);\n        t = (x11 + x10);\n        x8 ^= (t << 9) | (t >>> 23);\n        t = (x8 + x11);\n        x9 ^= (t << 13) | (t >>> 19);\n        t = (x9 + x8);\n        x10 ^= (t << 18) | (t >>> 14);\n        t = (x15 + x14);\n        x12 ^= (t << 7) | (t >>> 25);\n        t = (x12 + x15);\n        x13 ^= (t << 9) | (t >>> 23);\n        t = (x13 + x12);\n        x14 ^= (t << 13) | (t >>> 19);\n        t = (x14 + x13);\n        x15 ^= (t << 18) | (t >>> 14);\n    }\n    // inlined store_littleendian()'s\n    out[0] = x0;\n    out[1] = x0 >>> 8;\n    out[2] = x0 >>> 16;\n    out[3] = x0 >>> 24;\n    out[4] = x5;\n    out[5] = x5 >>> 8;\n    out[6] = x5 >>> 16;\n    out[7] = x5 >>> 24;\n    out[8] = x10;\n    out[9] = x10 >>> 8;\n    out[10] = x10 >>> 16;\n    out[11] = x10 >>> 24;\n    out[12] = x15;\n    out[13] = x15 >>> 8;\n    out[14] = x15 >>> 16;\n    out[15] = x15 >>> 24;\n    out[16] = x6;\n    out[17] = x6 >>> 8;\n    out[18] = x6 >>> 16;\n    out[19] = x6 >>> 24;\n    out[20] = x7;\n    out[21] = x7 >>> 8;\n    out[22] = x7 >>> 16;\n    out[23] = x7 >>> 24;\n    out[24] = x8;\n    out[25] = x8 >>> 8;\n    out[26] = x8 >>> 16;\n    out[27] = x8 >>> 24;\n    out[28] = x9;\n    out[29] = x9 >>> 8;\n    out[30] = x9 >>> 16;\n    out[31] = x9 >>> 24;\n}\nexports.hsalsa20 = hsalsa20;\nObject.freeze(exports);\n","/* Copyright(c) 2013-2015 3NSoft Inc.\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, you can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\nvar verify = require('../util/verify');\n/**\n * Analog of add in crypto_onetimeauth/poly1305/ref/auth.c\n * @param h is array of 17 uint32's.\n * @param c is array of 17 uint32's.\n */\nfunction add(h, c) {\n    var u = 0;\n    for (var j = 0; j < 17; j += 1) {\n        u += h[j] + c[j];\n        u &= 0xffffffff;\n        h[j] = u & 255;\n        u >>>= 8;\n    }\n}\n/**\n * Analog of squeeze in crypto_onetimeauth/poly1305/ref/auth.c\n * @param h is array of 17 uint32's.\n */\nfunction squeeze(h) {\n    var u = 0;\n    for (var j = 0; j < 16; j += 1) {\n        u += h[j];\n        u &= 0xffffffff;\n        h[j] = u & 255;\n        u >>>= 8;\n    }\n    u += h[16];\n    u &= 0xffffffff;\n    h[16] = u & 3;\n    u = 5 * (u >>> 2); // multiplication by 5 is safe here\n    u &= 0xffffffff;\n    for (j = 0; j < 16; j += 1) {\n        u += h[j];\n        u &= 0xffffffff;\n        h[j] = u & 255;\n        u >>>= 8;\n    }\n    u += h[16];\n    u &= 0xffffffff;\n    h[16] = u;\n}\n/**\n * minusp array in crypto_onetimeauth/poly1305/ref/auth.c\n * Length === 17.\n */\nvar minusp = new Uint32Array([5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252]);\n/**\n * Analog of freeze in crypto_onetimeauth/poly1305/ref/auth.c\n * @param h is array of 17 uint32's.\n * @param arrFactory is typed arrays factory, used to allocated/find an array\n * for use.\n */\nfunction freeze(h, arrFactory) {\n    var horig = arrFactory.getUint32Array(17);\n    horig.set(h);\n    add(h, minusp);\n    var negative = -(h[16] >>> 7);\n    negative &= 0xffffffff;\n    for (var j = 0; j < 17; j += 1) {\n        h[j] ^= negative & (horig[j] ^ h[j]);\n    }\n    arrFactory.recycle(horig);\n}\n/**\n * Analog of mulmod in crypto_onetimeauth/poly1305/ref/auth.c\n * @param h is array of 17 uint32's.\n * @param r is array of 17 uint32's.\n * @param arrFactory is typed arrays factory, used to allocated/find an array\n * for use.\n */\nfunction mulmod(h, r, arrFactory) {\n    var hr = arrFactory.getUint32Array(17), u = 0;\n    for (var i = 0; i < 17; i += 1) {\n        u = 0;\n        for (var j = 0; j <= i; j += 1) {\n            u += h[j] * r[i - j];\n            u &= 0xffffffff;\n        }\n        for (var j = i + 1; j < 17; j += 1) {\n            u += 320 * h[j] * r[i + 17 - j];\n            u &= 0xffffffff;\n        }\n        hr[i] = u;\n    }\n    h.set(hr);\n    squeeze(h);\n    arrFactory.recycle(hr);\n}\n/**\n * Analog of crypto_onetimeauth in crypto_onetimeauth/poly1305/ref/auth.c\n * @param outArr is Uint8Array, 16 bytes long, into which poly hash is placed.\n * @param inArr is Uint8Array, with incoming bytes, whatever the length there is.\n * @param k is Uint8Array, 32 bytes long.\n * @param arrFactory is typed arrays factory, used to allocated/find an array\n * for use.\n */\nfunction poly1305(outArr, inArr, k, arrFactory) {\n    var r = arrFactory.getUint32Array(17), h = arrFactory.getUint32Array(17), c = arrFactory.getUint32Array(17), inlen = inArr.length, inArrInd = 0;\n    r[0] = k[0];\n    r[1] = k[1];\n    r[2] = k[2];\n    r[3] = k[3] & 15;\n    r[4] = k[4] & 252;\n    r[5] = k[5];\n    r[6] = k[6];\n    r[7] = k[7] & 15;\n    r[8] = k[8] & 252;\n    r[9] = k[9];\n    r[10] = k[10];\n    r[11] = k[11] & 15;\n    r[12] = k[12] & 252;\n    r[13] = k[13];\n    r[14] = k[14];\n    r[15] = k[15] & 15;\n    r[16] = 0;\n    for (var j = 0; j < 17; j += 1) {\n        h[j] = 0;\n    }\n    var j = 0;\n    while (inlen > 0) {\n        for (j = 0; j < 17; j += 1) {\n            c[j] = 0;\n        }\n        for (j = 0; (j < 16) && (j < inlen); j += 1) {\n            c[j] = inArr[inArrInd + j];\n        }\n        c[j] = 1;\n        inArrInd += j;\n        inlen -= j;\n        add(h, c);\n        mulmod(h, r, arrFactory);\n    }\n    freeze(h, arrFactory);\n    for (var j = 0; j < 16; j += 1) {\n        c[j] = k[j + 16];\n    }\n    c[16] = 0;\n    add(h, c);\n    for (var j = 0; j < 16; j += 1) {\n        outArr[j] = h[j];\n    }\n}\nexports.poly1305 = poly1305;\n/**\n * Analog of crypto_onetimeauth in crypto_onetimeauth/poly1305/ref/verify.c\n * @param h is Uint8Array, 16 bytes long poly hash.\n * @param inArr is Uint8Array, with incoming bytes, whatever the length there is.\n * @param k is Uint8Array, 32 bytes long.\n * @param arrFactory is typed arrays factory, used to allocated/find an array\n * for use.\n * @return true, if calculated poly hash is identical to the given hash, otherwise,\n * false.\n */\nfunction poly1305_verify(h, inArr, k, arrFactory) {\n    var correct = arrFactory.getUint8Array(16);\n    poly1305(correct, inArr, k, arrFactory);\n    var areSame = verify.v16(h, correct);\n    arrFactory.recycle(correct);\n    return areSame;\n}\nexports.poly1305_verify = poly1305_verify;\nObject.freeze(exports);\n","/* Copyright(c) 2013-2015 3NSoft Inc.\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, you can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n/**\n * Analog of add in crypto_scalarmult/curve25519/ref/smult.c\n * @param out is Uint32Array, 32 items long.\n * @param a is Uint32Array, 32 items long.\n * @param b is Uint32Array, 32 items long.\n */\nfunction add(out, a, b) {\n    var u = 0;\n    for (var j = 0; j < 31; j += 1) {\n        u += a[j] + b[j];\n        u &= 0xffffffff;\n        out[j] = u & 255;\n        u >>>= 8;\n    }\n    u += a[31] + b[31];\n    u &= 0xffffffff;\n    out[31] = u;\n}\n/**\n * Analog of sub in crypto_scalarmult/curve25519/ref/smult.c\n * @param out is Uint32Array, 32 items long.\n * @param a is Uint32Array, 32 items long.\n * @param b is Uint32Array, 32 items long.\n */\nfunction sub(out, a, b) {\n    var u = 218;\n    for (var j = 0; j < 31; j += 1) {\n        u += a[j] + 65280 - b[j];\n        u &= 0xffffffff;\n        out[j] = u & 255;\n        u >>>= 8;\n    }\n    u += a[31] - b[31];\n    u &= 0xffffffff;\n    out[31] = u;\n}\n/**\n * Analog of squeeze in crypto_scalarmult/curve25519/ref/smult.c\n * @param a is Uint32Array, 32 items long.\n */\nfunction squeeze(a) {\n    var u = 0;\n    for (var j = 0; j < 31; j += 1) {\n        u += a[j];\n        u &= 0xffffffff;\n        a[j] = u & 255;\n        u >>>= 8;\n    }\n    u += a[31];\n    u &= 0xffffffff;\n    a[31] = u & 127;\n    u = 19 * (u >>> 7);\n    u &= 0xffffffff;\n    for (var j = 0; j < 31; j += 1) {\n        u += a[j];\n        u &= 0xffffffff;\n        a[j] = u & 255;\n        u >>>= 8;\n    }\n    u += a[31];\n    u &= 0xffffffff;\n    a[31] = u;\n}\n/**\n * minusp array in crypto_scalarmult/curve25519/ref/smult.c\n * Length === 32.\n */\nvar minusp = new Uint32Array([19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]);\n/**\n * Analog of freeze in crypto_scalarmult/curve25519/ref/smult.c\n * @param a is Uint32Array, 32 items long.\n * @param arrFactory is typed arrays factory, used to allocated/find an array\n * for use.\n */\nfunction freeze(a, arrFactory) {\n    var aorig = arrFactory.getUint32Array(32);\n    aorig.set(a);\n    add(a, a, minusp);\n    var negative = -((a[31] >>> 7) & 1);\n    negative &= 0xffffffff;\n    for (var j = 0; j < 32; j += 1) {\n        a[j] ^= negative & (aorig[j] ^ a[j]);\n    }\n    arrFactory.recycle(aorig);\n}\n/**\n * Analog of mult in crypto_scalarmult/curve25519/ref/smult.c\n * @param out is Uint32Array, 32 items long.\n * @param a is Uint32Array, 32 items long.\n * @param b is Uint32Array, 32 items long.\n */\nfunction mult(out, a, b) {\n    var u = 0;\n    for (var i = 0; i < 32; i += 1) {\n        u = 0;\n        for (var j = 0; j <= i; j += 1) {\n            u += a[j] * b[i - j];\n            u &= 0xffffffff;\n        }\n        for (var j = i + 1; j < 32; j += 1) {\n            u += 38 * a[j] * b[i + 32 - j];\n            u &= 0xffffffff;\n        }\n        out[i] = u;\n    }\n    squeeze(out);\n}\n/**\n * Analog of mult121665 in crypto_scalarmult/curve25519/ref/smult.c\n * @param out is Uint32Array, 32 items long.\n * @param a is Uint32Array, 32 items long.\n */\nfunction mult121665(out, a) {\n    var u = 0;\n    for (var j = 0; j < 31; j += 1) {\n        u += 121665 * a[j];\n        u &= 0xffffffff;\n        out[j] = u & 255;\n        u >>>= 8;\n    }\n    u += 121665 * a[31];\n    u &= 0xffffffff;\n    out[31] = u & 127;\n    u = 19 * (u >>> 7);\n    u &= 0xffffffff;\n    for (var j = 0; j < 31; j += 1) {\n        u += out[j];\n        u &= 0xffffffff;\n        out[j] = u & 255;\n        u >>>= 8;\n    }\n    u += out[31];\n    u &= 0xffffffff;\n    out[31] = u;\n}\n/**\n * Analog of square in crypto_scalarmult/curve25519/ref/smult.c\n * @param out is Uint32Array, 32 items long.\n * @param a is Uint32Array, 32 items long.\n */\nfunction square(out, a) {\n    var u = 0;\n    for (var i = 0; i < 32; i += 1) {\n        u = 0;\n        for (var j = 0; j < (i - j); j += 1) {\n            u += a[j] * a[i - j];\n            u &= 0xffffffff;\n        }\n        for (var j = (i + 1); j < (i + 32 - j); j += 1) {\n            u += 38 * a[j] * a[i + 32 - j];\n            u &= 0xffffffff;\n        }\n        u *= 2;\n        u &= 0xffffffff;\n        if ((i & 1) === 0) {\n            u += a[i / 2] * a[i / 2];\n            u &= 0xffffffff;\n            u += 38 * a[i / 2 + 16] * a[i / 2 + 16];\n            u &= 0xffffffff;\n        }\n        out[i] = u;\n    }\n    squeeze(out);\n}\n/**\n * Analog of select in crypto_scalarmult/curve25519/ref/smult.c\n * @param p is Uint32Array, 64 items long.\n * @param q is Uint32Array, 64 items long.\n * @param r is Uint32Array, 64 items long.\n * @param s is Uint32Array, 64 items long.\n * @param b is a number within Uint32 limits.\n */\nfunction select(p, q, r, s, b) {\n    b &= 0xffffffff;\n    var t = 0;\n    var bminus1 = b - 1;\n    bminus1 &= 0xffffffff;\n    for (var j = 0; j < 64; j += 1) {\n        t = bminus1 & (r[j] ^ s[j]);\n        p[j] = s[j] ^ t;\n        q[j] = r[j] ^ t;\n    }\n}\n/**\n * Analog of mainloop in crypto_scalarmult/curve25519/ref/smult.c\n * @param work is Uint32Array, 64 items long.\n * @param e is Uint8Array, 32 items long.\n * @param arrFactory is typed arrays factory, used to allocated/find an array\n * for use.\n */\nfunction mainloop(work, e, arrFactory) {\n    var xzm1 = arrFactory.getUint32Array(64);\n    var xzm = arrFactory.getUint32Array(64);\n    var xzmb = arrFactory.getUint32Array(64);\n    var xzm1b = arrFactory.getUint32Array(64);\n    var xznb = arrFactory.getUint32Array(64);\n    var xzn1b = arrFactory.getUint32Array(64);\n    var a0 = arrFactory.getUint32Array(64);\n    var a1 = arrFactory.getUint32Array(64);\n    var b0 = arrFactory.getUint32Array(64);\n    var b1 = arrFactory.getUint32Array(64);\n    var c1 = arrFactory.getUint32Array(64);\n    var r = arrFactory.getUint32Array(32);\n    var s = arrFactory.getUint32Array(32);\n    var t = arrFactory.getUint32Array(32);\n    var u = arrFactory.getUint32Array(32);\n    var b = 0;\n    for (var j = 0; j < 32; j += 1) {\n        xzm1[j] = work[j];\n    }\n    xzm1[32] = 1;\n    for (var j = 33; j < 64; j += 1) {\n        xzm1[j] = 0;\n    }\n    xzm[0] = 1;\n    for (var j = 1; j < 64; j += 1) {\n        xzm[j] = 0;\n    }\n    // views of last 32 elements of original arrays\n    var xzmb_32 = xzmb.subarray(32, 64), xzm1b_32 = xzm1b.subarray(32, 64), a0_32 = a0.subarray(32, 64), a1_32 = a1.subarray(32, 64), b0_32 = b0.subarray(32, 64), b1_32 = b1.subarray(32, 64), c1_32 = c1.subarray(32, 64), xznb_32 = xznb.subarray(32, 64), xzn1b_32 = xzn1b.subarray(32, 64);\n    for (var pos = 254; pos >= 0; pos -= 1) {\n        b = e[Math.floor(pos / 8)] >>> (pos & 7);\n        b &= 1;\n        select(xzmb, xzm1b, xzm, xzm1, b);\n        add(a0, xzmb, xzmb_32);\n        sub(a0_32, xzmb, xzmb_32);\n        add(a1, xzm1b, xzm1b_32);\n        sub(a1_32, xzm1b, xzm1b_32);\n        square(b0, a0);\n        square(b0_32, a0_32);\n        mult(b1, a1, a0_32);\n        mult(b1_32, a1_32, a0);\n        add(c1, b1, b1_32);\n        sub(c1_32, b1, b1_32);\n        square(r, c1_32);\n        sub(s, b0, b0_32);\n        mult121665(t, s);\n        add(u, t, b0);\n        mult(xznb, b0, b0_32);\n        mult(xznb_32, s, u);\n        square(xzn1b, c1);\n        mult(xzn1b_32, r, work);\n        select(xzm, xzm1, xznb, xzn1b, b);\n    }\n    work.set(xzm);\n    arrFactory.recycle(xzm1, xzm, xzmb, xzm1b, xznb, xzn1b, a0, a1, b0, b1, c1, r, s, t, u);\n}\n/**\n * Analog of recip in crypto_scalarmult/curve25519/ref/smult.c\n * @param out is Uint32Array, 32 items long.\n * @param z is Uint32Array, 32 items long.\n * @param arrFactory is typed arrays factory, used to allocated/find an array\n * for use.\n */\nfunction recip(out, z, arrFactory) {\n    var z2 = arrFactory.getUint32Array(32);\n    var z9 = arrFactory.getUint32Array(32);\n    var z11 = arrFactory.getUint32Array(32);\n    var z2_5_0 = arrFactory.getUint32Array(32);\n    var z2_10_0 = arrFactory.getUint32Array(32);\n    var z2_20_0 = arrFactory.getUint32Array(32);\n    var z2_50_0 = arrFactory.getUint32Array(32);\n    var z2_100_0 = arrFactory.getUint32Array(32);\n    var t0 = arrFactory.getUint32Array(32);\n    var t1 = arrFactory.getUint32Array(32);\n    /* 2 */ square(z2, z);\n    /* 4 */ square(t1, z2);\n    /* 8 */ square(t0, t1);\n    /* 9 */ mult(z9, t0, z);\n    /* 11 */ mult(z11, z9, z2);\n    /* 22 */ square(t0, z11);\n    /* 2^5 - 2^0 = 31 */ mult(z2_5_0, t0, z9);\n    /* 2^6 - 2^1 */ square(t0, z2_5_0);\n    /* 2^7 - 2^2 */ square(t1, t0);\n    /* 2^8 - 2^3 */ square(t0, t1);\n    /* 2^9 - 2^4 */ square(t1, t0);\n    /* 2^10 - 2^5 */ square(t0, t1);\n    /* 2^10 - 2^0 */ mult(z2_10_0, t0, z2_5_0);\n    /* 2^11 - 2^1 */ square(t0, z2_10_0);\n    /* 2^12 - 2^2 */ square(t1, t0);\n    /* 2^20 - 2^10 */ for (var i = 2; i < 10; i += 2) {\n        square(t0, t1);\n        square(t1, t0);\n    }\n    /* 2^20 - 2^0 */ mult(z2_20_0, t1, z2_10_0);\n    /* 2^21 - 2^1 */ square(t0, z2_20_0);\n    /* 2^22 - 2^2 */ square(t1, t0);\n    /* 2^40 - 2^20 */ for (var i = 2; i < 20; i += 2) {\n        square(t0, t1);\n        square(t1, t0);\n    }\n    /* 2^40 - 2^0 */ mult(t0, t1, z2_20_0);\n    /* 2^41 - 2^1 */ square(t1, t0);\n    /* 2^42 - 2^2 */ square(t0, t1);\n    /* 2^50 - 2^10 */ for (var i = 2; i < 10; i += 2) {\n        square(t1, t0);\n        square(t0, t1);\n    }\n    /* 2^50 - 2^0 */ mult(z2_50_0, t0, z2_10_0);\n    /* 2^51 - 2^1 */ square(t0, z2_50_0);\n    /* 2^52 - 2^2 */ square(t1, t0);\n    /* 2^100 - 2^50 */ for (var i = 2; i < 50; i += 2) {\n        square(t0, t1);\n        square(t1, t0);\n    }\n    /* 2^100 - 2^0 */ mult(z2_100_0, t1, z2_50_0);\n    /* 2^101 - 2^1 */ square(t1, z2_100_0);\n    /* 2^102 - 2^2 */ square(t0, t1);\n    /* 2^200 - 2^100 */ for (var i = 2; i < 100; i += 2) {\n        square(t1, t0);\n        square(t0, t1);\n    }\n    /* 2^200 - 2^0 */ mult(t1, t0, z2_100_0);\n    /* 2^201 - 2^1 */ square(t0, t1);\n    /* 2^202 - 2^2 */ square(t1, t0);\n    /* 2^250 - 2^50 */ for (var i = 2; i < 50; i += 2) {\n        square(t0, t1);\n        square(t1, t0);\n    }\n    /* 2^250 - 2^0 */ mult(t0, t1, z2_50_0);\n    /* 2^251 - 2^1 */ square(t1, t0);\n    /* 2^252 - 2^2 */ square(t0, t1);\n    /* 2^253 - 2^3 */ square(t1, t0);\n    /* 2^254 - 2^4 */ square(t0, t1);\n    /* 2^255 - 2^5 */ square(t1, t0);\n    /* 2^255 - 21 */ mult(out, t1, z11);\n    arrFactory.recycle(z2, z9, z11, z2_5_0, z2_10_0, z2_20_0, z2_50_0, z2_100_0, t0, t1);\n}\n/**\n * Analog of crypto_scalarmult in crypto_scalarmult/curve25519/ref/smult.c\n * @param q is Uint8Array, 32 items long.\n * @param n is Uint8Array, 32 items long.\n * @param p is Uint8Array, 32 items long.\n * @param arrFactory is typed arrays factory, used to allocated/find an array\n * for use.\n */\nfunction curve25519(q, n, p, arrFactory) {\n    var work = arrFactory.getUint32Array(96);\n    var e = arrFactory.getUint8Array(32);\n    e.set(n);\n    e[0] &= 248;\n    e[31] &= 127;\n    e[31] |= 64;\n    // partial views of work array\n    var work_32 = work.subarray(32, 64);\n    var work_64 = work.subarray(64, 96);\n    work.set(p); // sets first 32 elements, as p.length===32\n    mainloop(work, e, arrFactory);\n    recip(work_32, work_32, arrFactory);\n    mult(work_64, work, work_32);\n    freeze(work_64, arrFactory);\n    q.set(work_64);\n    arrFactory.recycle(work, e);\n}\nexports.curve25519 = curve25519;\n/**\n * base array in crypto_scalarmult/curve25519/ref/base.c\n */\nvar base = new Uint8Array(32);\nbase[0] = 9;\n/**\n * Analog of crypto_scalarmult_base in crypto_scalarmult/curve25519/ref/base.c\n * @param q is Uint8Array, 32 items long.\n * @param n is Uint8Array, 32 items long.\n * @param arrFactory is typed arrays factory, used to allocated/find an array\n * for use.\n */\nfunction curve25519_base(q, n, arrFactory) {\n    curve25519(q, n, base, arrFactory);\n}\nexports.curve25519_base = curve25519_base;\nObject.freeze(exports);\n","/* Copyright(c) 2013 - 2015 3NSoft Inc.\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, you can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\nvar stream = require('./stream');\nvar auth = require('./onetimeauth');\nvar arrays = require('../util/arrays');\nvar nonceUtils = require('../util/nonce');\nfunction checkPackArgs(m, n, k) {\n    if (!(m instanceof Uint8Array)) {\n        throw new TypeError(\"Message array m must be Uint8Array.\");\n    }\n    if (m.length === 0) {\n        throw new Error(\"Message array should have at least one byte.\");\n    }\n    if (!(n instanceof Uint8Array)) {\n        throw new TypeError(\"Nonce array n must be Uint8Array.\");\n    }\n    if (n.length !== 24) {\n        throw new Error(\"Nonce array n should have 24 elements (bytes) in it, but it is \" +\n            n.length + \" elements long.\");\n    }\n    if (!(k instanceof Uint8Array)) {\n        throw new TypeError(\"Key array k must be Uint8Array.\");\n    }\n    if (k.length !== 32) {\n        throw new Error(\"Key array k should have 32 elements (bytes) in it, but it is \" +\n            k.length + \" elements long.\");\n    }\n}\n/**\n * Analog of crypto_secretbox in crypto_secretbox/xsalsa20poly1305/ref/box.c\n * with an addition that given message should not be padded with zeros, and all\n * padding happen automagically without copying message array.\n * @param c is Uint8Array for resulting cipher, with length being 32 bytes longer\n * than message.\n * Resulting cipher of incoming message, packaged according to NaCl's\n * xsalsa20+poly1305 secret-box bytes layout, with 16 leading zeros.\n * @param m is Uint8Array of message bytes that need to be encrypted by secret key.\n * @param n is Uint8Array, 24 bytes long nonce.\n * @param k is Uint8Array, 32 bytes long secret key.\n * @param arrFactory is typed arrays factory, used to allocated/find an array\n * for use.\n */\nfunction xsalsa20poly1305_pad_and_pack(c, m, n, k, arrFactory) {\n    if (c.length < 32 + m.length) {\n        throw new Error(\"Given array c is too short for output.\");\n    }\n    stream.xsalsa20_xor(c, m, 32, n, k, arrFactory);\n    var dataPartOfC = c.subarray(32), polyOut = c.subarray(16, 32), polyKey = c.subarray(0, 32);\n    auth.poly1305(polyOut, dataPartOfC, polyKey, arrFactory);\n    // clear poly key part, which is not overwritten by poly output\n    for (var i = 0; i < 16; i += 1) {\n        c[i] = 0;\n    }\n}\n/**\n * @param m is Uint8Array of message bytes that need to be encrypted by secret key.\n * @param n is Uint8Array, 24 bytes long nonce.\n * @param k is Uint8Array, 32 bytes long secret key.\n * @param arrFactory is typed arrays factory, used to allocated/find an array\n * for use. It may be undefined, in which case an internally created one is used.\n * @return Uint8Array with resulting cipher of incoming message, packaged according\n * to NaCl's xsalsa20+poly1305 secret-box bytes layout, trimmed of initial zeros,\n * by having a view on array, starting with non-zero part.\n */\nfunction pack(m, n, k, arrFactory) {\n    checkPackArgs(m, n, k);\n    if (!arrFactory) {\n        arrFactory = arrays.makeFactory();\n    }\n    var c = new Uint8Array(m.length + 32);\n    xsalsa20poly1305_pad_and_pack(c, m, n, k, arrFactory);\n    c = c.subarray(16);\n    arrFactory.wipeRecycled();\n    return c;\n}\nexports.pack = pack;\n/**\n * Analog of crypto_secretbox_open in crypto_secretbox/xsalsa20poly1305/ref/box.c\n * with an addition that given cipher should not be padded with zeros, and all\n * padding happen automagically without copying cipher array.\n * @param c is Uint8Array of cipher bytes that need to be opened by secret key.\n * @param n is Uint8Array, 24 bytes long nonce.\n * @param k is Uint8Array, 32 bytes long secret key.\n * @param arrFactory is typed arrays factory, used to allocated/find an array\n * for use. It may be undefined, in which case an internally created one is used.\n * @return Uint8Array with opened message.\n * Array is a view of buffer, which has 32 zeros preceding message bytes.\n */\nfunction open(c, n, k, arrFactory) {\n    if (!(c instanceof Uint8Array)) {\n        throw new TypeError(\"Cipher array c must be Uint8Array.\");\n    }\n    if (c.length < 17) {\n        throw new Error(\"Cipher array c should have at least 17 elements (bytes) in it, but is only \" +\n            c.length + \" elements long.\");\n    }\n    if (!(n instanceof Uint8Array)) {\n        throw new TypeError(\"Nonce array n must be Uint8Array.\");\n    }\n    if (n.length !== 24) {\n        throw new Error(\"Nonce array n should have 24 elements (bytes) in it, but it is \" +\n            n.length + \" elements long.\");\n    }\n    if (!(k instanceof Uint8Array)) {\n        throw new TypeError(\"Key array k must be Uint8Array.\");\n    }\n    if (k.length !== 32) {\n        throw new Error(\"Key array k should have 32 elements (bytes) in it, but it is \" +\n            k.length + \" elements long.\");\n    }\n    if (!arrFactory) {\n        arrFactory = arrays.makeFactory();\n    }\n    var subkey = arrFactory.getUint8Array(32);\n    stream.xsalsa20(subkey, n, k, arrFactory);\n    var polyPartOfC = c.subarray(0, 16);\n    var msgPartOfC = c.subarray(16);\n    if (!auth.poly1305_verify(polyPartOfC, msgPartOfC, subkey, arrFactory)) {\n        var err = new Error(\"Cipher bytes fail verification.\");\n        err.failedCipherVerification = true;\n        throw err;\n    }\n    var m = new Uint8Array(c.length + 16);\n    stream.xsalsa20_xor(m, c, 16, n, k, arrFactory);\n    // first 32 bytes of the opened thing should be cleared\n    for (var i = 0; i < 32; i += 1) {\n        m[i] = 0;\n    }\n    arrFactory.recycle(subkey);\n    arrFactory.wipeRecycled();\n    return m.subarray(32);\n}\nexports.open = open;\n/**\n * @param c is Uint8Array for packing nonce together with cipher.\n * Its length should be 40 bytes longer than that of a message.\n * @param m is Uint8Array of message bytes that need to be encrypted by secret key.\n * @param n is Uint8Array, 24 bytes long nonce.\n * @param k is Uint8Array, 32 bytes long secret key.\n * @param arrFactory is typed arrays factory, used to allocated/find an array\n * for use. It may be undefined, in which case an internally created one is used.\n */\nfunction packWithNonceInto(c, m, n, k, arrFactory) {\n    checkPackArgs(m, n, k);\n    if (c.length < 40 + m.length) {\n        throw new Error(\"Array c, for packing nonce and cipher, is too short.\");\n    }\n    if (!arrFactory) {\n        arrFactory = arrays.makeFactory();\n    }\n    xsalsa20poly1305_pad_and_pack(c.subarray(8), m, n, k, arrFactory);\n    c.set(n); // sets first 24 bytes (length of n) to nonce value\n    arrFactory.wipeRecycled();\n}\nvar regularOpen = open;\nvar formatWN;\n(function (formatWN) {\n    /**\n     * @param m is Uint8Array of message bytes that need to be encrypted by secret key.\n     * @param n is Uint8Array, 24 bytes long nonce.\n     * @param k is Uint8Array, 32 bytes long secret key.\n     * @param arrFactory is typed arrays factory, used to allocated/find an array\n     * for use. It may be undefined, in which case an internally created one is used.\n     * @returns Uint8Array, where nonce is packed together with cipher.\n     * Length of the returned array is 40 bytes greater than that of a message.\n     */\n    function pack(m, n, k, arrFactory) {\n        if (!arrFactory) {\n            arrFactory = arrays.makeFactory();\n        }\n        var c = new Uint8Array(40 + m.length);\n        packWithNonceInto(c, m, n, k, arrFactory);\n        arrFactory.wipeRecycled();\n        return c;\n    }\n    formatWN.pack = pack;\n    /**\n     * @param c is Uint8Array with nonce and cipher bytes that need to be opened by secret key.\n     * @param k is Uint8Array, 32 bytes long secret key.\n     * @param arrFactory is typed arrays factory, used to allocated/find an array for use.\n     * It may be undefined, in which case an internally created one is used.\n     * @return Uint8Array with opened message.\n     * Array is a view of buffer, which has 32 zeros preceding message bytes.\n     */\n    function open(c, k, arrFactory) {\n        if (c.length < 41) {\n            throw new Error(\"Array c with nonce and cipher should \" +\n                \"have at least 41 elements (bytes) in it, but is only \" +\n                c.length + \" elements long.\");\n        }\n        if (!arrFactory) {\n            arrFactory = arrays.makeFactory();\n        }\n        var n = c.subarray(0, 24);\n        c = c.subarray(24);\n        var m = regularOpen(c, n, k, arrFactory);\n        arrFactory.wipeRecycled();\n        return m;\n    }\n    formatWN.open = open;\n    /**\n     * @param c is Uint8Array with nonce and cipher bytes\n     * @returns Uint8Array, which is a copy of 24-byte nonce from a given array c\n     */\n    function copyNonceFrom(c) {\n        if (c.length < 41) {\n            throw new Error(\"Array c with nonce and cipher should have at \" +\n                \"least 41 elements (bytes) in it, but is only \" + c.length + \" elements long.\");\n        }\n        return new Uint8Array(c.subarray(0, 24));\n    }\n    formatWN.copyNonceFrom = copyNonceFrom;\n    /**\n     *\n     * @param key for new encryptor.\n     * Note that key will be copied, thus, if given array shall never be used anywhere, it should\n     * be wiped after this call.\n     * @param nextNonce is nonce, which should be used for the very first packing.\n     * All further packing will be done with new nonce, as it is automatically advanced.\n     * Note that nextNonce will be copied.\n     * @param delta is a number between 1 and 255 inclusive, used to advance nonce.\n     * When missing, it defaults to one.\n     * @param arrFactory is typed arrays factory, used to allocated/find an array for use.\n     * It may be undefined, in which case an internally created one is used.\n     * @return a frozen object with pack & open functions, and destroy\n     * It is NaCl's secret box for a given key, with automatically advancing nonce.\n     */\n    function makeEncryptor(key, nextNonce, delta, arrFactory) {\n        if (!(nextNonce instanceof Uint8Array)) {\n            throw new TypeError(\"Nonce array nextNonce must be Uint8Array.\");\n        }\n        if (nextNonce.length !== 24) {\n            throw new Error(\"Nonce array nextNonce should have 24 elements (bytes) in it, but it is \" +\n                nextNonce.length + \" elements long.\");\n        }\n        if (!(key instanceof Uint8Array)) {\n            throw new TypeError(\"Key array key must be Uint8Array.\");\n        }\n        if (key.length !== 32) {\n            throw new Error(\"Key array key should have 32 elements (bytes) in it, but it is \" +\n                key.length + \" elements long.\");\n        }\n        if ('number' !== typeof delta) {\n            delta = 1;\n        }\n        else if ((delta < 1) || (delta > 255)) {\n            throw new Error(\"Given delta is out of bounds.\");\n        }\n        // set variable in the closure\n        if (!arrFactory) {\n            arrFactory = arrays.makeFactory();\n        }\n        key = new Uint8Array(key);\n        nextNonce = new Uint8Array(nextNonce);\n        var counter = 0;\n        var counterMax = Math.floor(0xfffffffffffff / delta);\n        // arrange and freeze resulting object\n        var encryptor = {\n            pack: function (m) {\n                if (!key) {\n                    throw new Error(\"This encryptor cannot be used, \" +\n                        \"as it had already been destroyed.\");\n                }\n                if (counter > counterMax) {\n                    throw new Error(\"This encryptor \" +\n                        \"has been used too many times. Further use may \" +\n                        \"lead to duplication of nonces.\");\n                }\n                var c = pack(m, nextNonce, key, arrFactory);\n                nonceUtils.advance(nextNonce, delta);\n                counter += 1;\n                return c;\n            },\n            destroy: function () {\n                if (!key) {\n                    return;\n                }\n                arrFactory.wipe(key, nextNonce);\n                key = null;\n                nextNonce = null;\n                arrFactory = null;\n            },\n            getDelta: function () {\n                return delta;\n            }\n        };\n        Object.freeze(encryptor);\n        return encryptor;\n    }\n    formatWN.makeEncryptor = makeEncryptor;\n    /**\n     *\n     * @param key for new decryptor.\n     * @param arrFactory is typed arrays factory, used to allocated/find an array for use.\n     * It may be undefined, in which case an internally created one is used.\n     * Note that key will be copied, thus, if given array shall never be used anywhere,\n     * it should be wiped after this call.\n     * @return a frozen object with pack & open and destroy functions.\n     */\n    function makeDecryptor(key, arrFactory) {\n        if (!(key instanceof Uint8Array)) {\n            throw new TypeError(\"Key array key must be Uint8Array.\");\n        }\n        if (key.length !== 32) {\n            throw new Error(\"Key array key should have 32 elements (bytes) in it, but it is \" +\n                key.length + \" elements long.\");\n        }\n        // set variable in the closure\n        if (!arrFactory) {\n            arrFactory = arrays.makeFactory();\n        }\n        key = new Uint8Array(key);\n        // arrange and freeze resulting object\n        var decryptor = {\n            open: function (c) {\n                if (!key) {\n                    throw new Error(\"This decryptor cannot be used, \" +\n                        \"as it had already been destroyed.\");\n                }\n                return open(c, key, arrFactory);\n            },\n            destroy: function () {\n                if (!key) {\n                    return;\n                }\n                arrFactory.wipe(key);\n                key = null;\n                arrFactory = null;\n            }\n        };\n        Object.freeze(decryptor);\n        return decryptor;\n    }\n    formatWN.makeDecryptor = makeDecryptor;\n})(formatWN = exports.formatWN || (exports.formatWN = {}));\nObject.freeze(formatWN);\nexports.NONCE_LENGTH = 24;\nexports.KEY_LENGTH = 32;\nexports.POLY_LENGTH = 16;\nexports.JWK_ALG_NAME = 'NaCl-sbox-XSP';\nObject.freeze(exports);\n","/* Copyright(c) 2013 - 2015 3NSoft Inc.\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, you can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\nvar arrays = require('../util/arrays');\nvar core = require('./core');\n/**\n * sigma array in crypto_stream/salsa20/ref/stream.c\n */\nexports.SIGMA = new Uint8Array(16);\n(function () {\n    var str = \"expand 32-byte k\";\n    for (var i = 0; i < 16; i += 1) {\n        exports.SIGMA[i] = str.charCodeAt(i);\n    }\n})();\n/**\n * Analog of crypto_stream in crypto_stream/salsa20/ref/stream.c\n * @param c is Uint8Array of some length, for outgoing bytes (cipher).\n * @param n is Uint8Array, 8 bytes long nonce.\n * @param k is Uint8Array, 32 bytes long key.\n * @param arrFactory is typed arrays factory, used to allocated/find an array\n * for use. It may be undefined, in which case an internally created one is used.\n */\nfunction stream_salsa20(c, n, k, arrFactory) {\n    if (!arrFactory) {\n        arrFactory = arrays.makeFactory();\n    }\n    var inArr = arrFactory.getUint8Array(16), u = 0;\n    if (c.length === 0) {\n        return;\n    }\n    inArr.set(n);\n    for (var i = 8; i < 16; i += 1) {\n        inArr[i] = 0;\n    }\n    var cstart = 0, clen = c.length, outArr;\n    while (clen >= 64) {\n        outArr = new Uint8Array(c.buffer, cstart, 64);\n        core.salsa20(outArr, inArr, k, exports.SIGMA);\n        u = 1;\n        for (var i = 8; i < 16; i += 1) {\n            u += inArr[i];\n            u &= 0xffffffff;\n            inArr[i] = u;\n            u >>>= 8;\n        }\n        clen -= 64;\n        cstart += 64;\n    }\n    if (clen > 0) {\n        var block = arrFactory.getUint8Array(64);\n        core.salsa20(block, inArr, k, exports.SIGMA);\n        for (var i = 0; i < clen; i += 1) {\n            c[cstart + i] = block[i];\n        }\n        arrFactory.recycle(block);\n    }\n    arrFactory.recycle(inArr);\n}\n/**\n * Analog of crypto_stream_xor in crypto_stream/salsa20/ref/xor.c\n * with an addition of pad parameter for incoming array, which creates the pad on\n * the fly, without wasteful copying of potentially big xor-ed incoming array.\n * @param c is Uint8Array of outgoing bytes with resulting cipher, of the same\n * length as incoming array m, plus the pad.\n * @param m is Uint8Array of incoming bytes, that are xor-ed into cryptographic\n * stream.\n * @param mPadLen is number of zeros that should be in front of message array,\n * always between 0 and 63.\n * @param n is Uint8Array, 8 bytes long nonce.\n * @param k is Uint8Array, 32 bytes long key.\n * @param arrFactory is typed arrays factory, used to allocated/find an array\n * for use. It may be undefined, in which case an internally created one is used.\n */\nfunction stream_salsa20_xor(c, m, mPadLen, n, k, arrFactory) {\n    if (!arrFactory) {\n        arrFactory = arrays.makeFactory();\n    }\n    var inArr = arrFactory.getUint8Array(16), block = arrFactory.getUint8Array(64), u = 0;\n    if (m.length === 0) {\n        return;\n    }\n    inArr.set(n);\n    for (var i = 8; i < 16; i += 1) {\n        inArr[i] = 0;\n    }\n    var mWithPadLen = m.length + mPadLen;\n    if (mWithPadLen < 64) {\n        core.salsa20(block, inArr, k, exports.SIGMA);\n        for (var i = 0; i < mPadLen; i += 1) {\n            c[i] = block[i];\n        }\n        for (var i = mPadLen; i < mWithPadLen; i += 1) {\n            c[i] = m[i - mPadLen] ^ block[i];\n        }\n        return;\n    }\n    var cp = 0, mp = 0;\n    {\n        core.salsa20(block, inArr, k, exports.SIGMA);\n        for (var i = 0; i < mPadLen; i += 1) {\n            c[i] = block[i];\n        }\n        for (var i = mPadLen; i < 64; i += 1) {\n            c[i] = m[i - mPadLen] ^ block[i];\n        }\n        u = 1;\n        for (var i = 8; i < 16; i += 1) {\n            u += inArr[i];\n            u &= 0xffffffff;\n            inArr[i] = u;\n            u >>>= 8;\n        }\n        mWithPadLen -= 64;\n        mp = 64 - mPadLen;\n        cp = 64;\n    }\n    while (mWithPadLen >= 64) {\n        core.salsa20(block, inArr, k, exports.SIGMA);\n        for (var i = 0; i < 64; i += 1) {\n            c[cp + i] = m[mp + i] ^ block[i];\n        }\n        u = 1;\n        for (var i = 8; i < 16; i += 1) {\n            u += inArr[i];\n            u &= 0xffffffff;\n            inArr[i] = u;\n            u >>>= 8;\n        }\n        mWithPadLen -= 64;\n        mp += 64;\n        cp += 64;\n    }\n    if (mWithPadLen > 0) {\n        core.salsa20(block, inArr, k, exports.SIGMA);\n        for (var i = 0; i < mWithPadLen; i += 1) {\n            c[cp + i] = m[mp + i] ^ block[i];\n        }\n    }\n    arrFactory.recycle(inArr, block);\n}\n/**\n * Analog of crypto_stream in crypto_stream/xsalsa20/ref/stream.c\n * @param c is Uint8Array of some length, for outgoing bytes (cipher).\n * @param n is Uint8Array, 24 bytes long nonce.\n * @param k is Uint8Array, 32 bytes long key.\n * @param arrFactory is typed arrays factory, used to allocated/find an array\n * for use.\n */\nfunction xsalsa20(c, n, k, arrFactory) {\n    var subkey = arrFactory.getUint8Array(32), n_16 = n.subarray(16, 24);\n    core.hsalsa20(subkey, n, k, exports.SIGMA);\n    stream_salsa20(c, n_16, subkey, arrFactory);\n    arrFactory.recycle(subkey);\n}\nexports.xsalsa20 = xsalsa20;\n/**\n * Analog of crypto_stream_xor in crypto_stream/xsalsa20/ref/xor.c\n * @param c is Uint8Array of outgoing bytes with resulting cipher, of the same\n * length as incoming array m.\n * @param m is Uint8Array of incoming bytes, of some plain text message.\n * @param mPadLen is number of zeros that should be in front of message array,\n * always between 0 and 63.\n * @param n is Uint8Array, 24 bytes long nonce.\n * @param k is Uint8Array, 32 bytes long key.\n * @param arrFactory is typed arrays factory, used to allocated/find an array\n * for use. It may be undefined, in which case an internally created one is used.\n */\nfunction xsalsa20_xor(c, m, mPadLen, n, k, arrFactory) {\n    if (!arrFactory) {\n        arrFactory = arrays.makeFactory();\n    }\n    var subkey = arrFactory.getUint8Array(32), n_16 = n.subarray(16, 24);\n    core.hsalsa20(subkey, n, k, exports.SIGMA);\n    stream_salsa20_xor(c, m, mPadLen, n_16, subkey, arrFactory);\n    arrFactory.recycle(subkey);\n}\nexports.xsalsa20_xor = xsalsa20_xor;\nObject.freeze(exports);\n","/* Copyright(c) 2013 - 2015 3NSoft Inc.\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, you can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n/**\n * This file is an external interface of Ecma-NaCl library.\n */\nexports.secret_box = require('./boxes/secret_box');\nexports.box = require('./boxes/box');\nexports.nonce = require('./util/nonce');\nexports.signing = require('./signing/sign');\nvar sha512Mod = require('./hash/sha512');\nvar hashing;\n(function (hashing) {\n    var sha512;\n    (function (sha512) {\n        sha512.hash = sha512Mod.hash;\n        sha512.makeHasher = sha512Mod.makeHasher;\n    })(sha512 = hashing.sha512 || (hashing.sha512 = {}));\n})(hashing = exports.hashing || (exports.hashing = {}));\nObject.freeze(hashing);\nObject.freeze(hashing.sha512);\nvar scryptMod = require('./scrypt/scrypt');\nexports.scrypt = scryptMod.scrypt;\nexports.arrays = require('./util/arrays');\nvar verify = require('./util/verify');\n/**\n * @param x typed array\n * @param y typed array\n * @returns true, if arrays have the same length and their elements are equal;\n * and false, otherwise.\n */\nfunction compareVectors(x, y) {\n    if (x.length !== y.length) {\n        return false;\n    }\n    return verify.verify(x, y, x.length);\n}\nexports.compareVectors = compareVectors;\nObject.freeze(exports);\n","/* Copyright(c) 2015 3NSoft Inc.\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, you can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n/*\n * This contains implementation of SHA512.\n * Implementation note 1:\n * All C macros shuffle variables with digits in their names.\n * This gives a possibilty to have functions that except indecies,\n * which are shuffled/set at call point.\n * In everything else we try to keep as close to original code as\n * possible.\n * Implementation note 2:\n * Since there are no unsigned 64-bit integers in JavaScript, we\n * use 32-bit integers.\n * Notice that in array we keep high int first, with lower int following.\n */\nvar arrays = require('../util/arrays');\n/**\n * This adds 64 bit integer from x into s.\n */\nfunction addInto(s, si, x, xi) {\n    var h = s[si] + x[xi];\n    var l = s[si + 1] + x[xi + 1];\n    s[si] = h + ((l / 0x100000000) | 0);\n    s[si + 1] = l;\n}\nfunction shr(t, x, xi, c) {\n    var h = x[xi];\n    var l = x[xi + 1];\n    t[0] = h >>> c;\n    t[1] = (h << (32 - c)) | (l >>> c);\n}\n/**\n * Analog of load_bigendian in crypto_hashblocks/sha512/inplace/blocks.c\n */\nfunction load_bigendian(s, si, x, i) {\n    s[si] = (x[i + 3] | x[i + 2] << 8) | (x[i + 1] << 16) | (x[i] << 24);\n    s[si + 1] = (x[i + 7] | x[i + 6] << 8) | (x[i + 5] << 16) | (x[i + 4] << 24);\n}\n/**\n * Analog of store_bigendian in crypto_hashblocks/sha512/inplace/blocks.c\n */\nfunction store_bigendian(x, i, u, ui) {\n    var h = u[ui];\n    var l = u[ui + 1];\n    x[i + 7] = l;\n    x[i + 6] = l >>> 8;\n    x[i + 5] = l >>> 16;\n    x[i + 4] = l >>> 24;\n    x[i + 3] = h;\n    x[i + 2] = h >>> 8;\n    x[i + 1] = h >>> 16;\n    x[i] = h >>> 24;\n}\n/**\n * Analog of macro ROTR in crypto_hashblocks/sha512/inplace/blocks.c\n */\nfunction ROTRandXorInto(t, x, xi, c) {\n    var h = x[xi];\n    var l = x[xi + 1];\n    if (c <= 32) {\n        t[0] ^= (l << (32 - c)) | (h >>> c);\n        t[1] ^= (h << (32 - c)) | (l >>> c);\n    }\n    else {\n        t[0] ^= (h << (64 - c)) | (l >>> (c - 32));\n        t[1] ^= (l << (64 - c)) | (h >>> (c - 32));\n    }\n}\n/**\n * Analog of macro Ch in crypto_hashblocks/sha512/inplace/blocks.c\n */\nfunction Ch(t, r, xi, yi, zi) {\n    var xh = r[xi];\n    var xl = r[xi + 1];\n    t[0] = (xh & r[yi]) ^ (~xh & r[zi]);\n    t[1] = (xl & r[yi + 1]) ^ (~xl & r[zi + 1]);\n}\n/**\n * Analog of macro Maj in crypto_hashblocks/sha512/inplace/blocks.c\n */\nfunction Maj(t, r, xi, yi, zi) {\n    var xh = r[xi];\n    var xl = r[xi + 1];\n    var yh = r[yi];\n    var yl = r[yi + 1];\n    var zh = r[zi];\n    var zl = r[zi + 1];\n    t[0] = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n    t[1] = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n}\n/**\n * Analog of macro Sigma0 in crypto_hashblocks/sha512/inplace/blocks.c\n */\nfunction Sigma0(t, x, xi) {\n    t[0] = 0;\n    t[1] = 0;\n    ROTRandXorInto(t, x, xi, 28);\n    ROTRandXorInto(t, x, xi, 34);\n    ROTRandXorInto(t, x, xi, 39);\n}\n/**\n * Analog of macro Sigma1 in crypto_hashblocks/sha512/inplace/blocks.c\n */\nfunction Sigma1(t, x, xi) {\n    t[0] = 0;\n    t[1] = 0;\n    ROTRandXorInto(t, x, xi, 14);\n    ROTRandXorInto(t, x, xi, 18);\n    ROTRandXorInto(t, x, xi, 41);\n}\n/**\n * Analog of macro sigma0 in crypto_hashblocks/sha512/inplace/blocks.c\n */\nfunction sigma0(t, x, xi) {\n    shr(t, x, xi, 7);\n    ROTRandXorInto(t, x, xi, 1);\n    ROTRandXorInto(t, x, xi, 8);\n}\n/**\n * Analog of macro sigma1 in crypto_hashblocks/sha512/inplace/blocks.c\n */\nfunction sigma1(t, x, xi) {\n    shr(t, x, xi, 6);\n    ROTRandXorInto(t, x, xi, 19);\n    ROTRandXorInto(t, x, xi, 61);\n}\n/**\n * Analog of macro M in crypto_hashblocks/sha512/inplace/blocks.c\n */\nfunction M(w, i0, i14, i9, i1, t) {\n    sigma1(t, w, i14);\n    addInto(w, i0, t, 0);\n    addInto(w, i0, w, i9);\n    sigma0(t, w, i1);\n    addInto(w, i0, t, 0);\n}\n/**\n * Analog of macro EXPAND in crypto_hashblocks/sha512/inplace/blocks.c\n */\nfunction EXPAND(w, t) {\n    M(w, 0, 28, 18, 2, t);\n    M(w, 2, 30, 20, 4, t);\n    M(w, 4, 0, 22, 6, t);\n    M(w, 6, 2, 24, 8, t);\n    M(w, 8, 4, 26, 10, t);\n    M(w, 10, 6, 28, 12, t);\n    M(w, 12, 8, 30, 14, t);\n    M(w, 14, 10, 0, 16, t);\n    M(w, 16, 12, 2, 18, t);\n    M(w, 18, 14, 4, 20, t);\n    M(w, 20, 16, 6, 22, t);\n    M(w, 22, 18, 8, 24, t);\n    M(w, 24, 20, 10, 26, t);\n    M(w, 26, 22, 12, 28, t);\n    M(w, 28, 24, 14, 30, t);\n    M(w, 30, 26, 16, 0, t);\n}\n/**\n * Analog of macro F in crypto_hashblocks/sha512/inplace/blocks.c\n */\nfunction F(r, i0, i1, i2, i3, i4, i5, i6, i7, w, wi, k, ki, t) {\n    Sigma1(t, r, i4);\n    addInto(r, i7, t, 0);\n    Ch(t, r, i4, i5, i6);\n    addInto(r, i7, t, 0);\n    addInto(r, i7, k, ki);\n    addInto(r, i7, w, wi);\n    addInto(r, i3, r, i7);\n    Sigma0(t, r, i0);\n    addInto(r, i7, t, 0);\n    Maj(t, r, i0, i1, i2);\n    addInto(r, i7, t, 0);\n}\n/**\n * Analog of round in crypto_hashblocks/sha512/inplace/blocks.c\n */\nvar round = new Uint32Array([\n    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f,\n    0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242,\n    0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235,\n    0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275,\n    0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f,\n    0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc,\n    0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6,\n    0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218,\n    0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99,\n    0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc,\n    0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915,\n    0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba,\n    0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc,\n    0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817]);\n/**\n * Analog of macro G in crypto_hashblocks/sha512/inplace/blocks.c\n */\nfunction G(r, w, i, t) {\n    F(r, 0, 2, 4, 6, 8, 10, 12, 14, w, 0, round, (i) * 2, t);\n    F(r, 14, 0, 2, 4, 6, 8, 10, 12, w, 2, round, (i + 1) * 2, t);\n    F(r, 12, 14, 0, 2, 4, 6, 8, 10, w, 4, round, (i + 2) * 2, t);\n    F(r, 10, 12, 14, 0, 2, 4, 6, 8, w, 6, round, (i + 3) * 2, t);\n    F(r, 8, 10, 12, 14, 0, 2, 4, 6, w, 8, round, (i + 4) * 2, t);\n    F(r, 6, 8, 10, 12, 14, 0, 2, 4, w, 10, round, (i + 5) * 2, t);\n    F(r, 4, 6, 8, 10, 12, 14, 0, 2, w, 12, round, (i + 6) * 2, t);\n    F(r, 2, 4, 6, 8, 10, 12, 14, 0, w, 14, round, (i + 7) * 2, t);\n    F(r, 0, 2, 4, 6, 8, 10, 12, 14, w, 16, round, (i + 8) * 2, t);\n    F(r, 14, 0, 2, 4, 6, 8, 10, 12, w, 18, round, (i + 9) * 2, t);\n    F(r, 12, 14, 0, 2, 4, 6, 8, 10, w, 20, round, (i + 10) * 2, t);\n    F(r, 10, 12, 14, 0, 2, 4, 6, 8, w, 22, round, (i + 11) * 2, t);\n    F(r, 8, 10, 12, 14, 0, 2, 4, 6, w, 24, round, (i + 12) * 2, t);\n    F(r, 6, 8, 10, 12, 14, 0, 2, 4, w, 26, round, (i + 13) * 2, t);\n    F(r, 4, 6, 8, 10, 12, 14, 0, 2, w, 28, round, (i + 14) * 2, t);\n    F(r, 2, 4, 6, 8, 10, 12, 14, 0, w, 30, round, (i + 15) * 2, t);\n}\n/**\n * Analog of crypto_hashblocks in crypto_hashblocks/sha512/inplace/blocks.c\n */\nfunction crypto_hashblocks(statebytes, inArr, arrFactory) {\n    var state = arrFactory.getUint32Array(16);\n    var r = arrFactory.getUint32Array(16);\n    var w = arrFactory.getUint32Array(32);\n    var t = arrFactory.getUint32Array(2);\n    var inlen = inArr.length;\n    var inInd = 0;\n    for (var i = 0; i < 8; i += 1) {\n        load_bigendian(r, i * 2, statebytes, i * 8);\n    }\n    state.set(r);\n    while (inlen >= 128) {\n        for (var i = 0; i < 16; i += 1) {\n            load_bigendian(w, i * 2, inArr, inInd + i * 8);\n        }\n        G(r, w, 0, t);\n        EXPAND(w, t);\n        G(r, w, 16, t);\n        EXPAND(w, t);\n        G(r, w, 32, t);\n        EXPAND(w, t);\n        G(r, w, 48, t);\n        EXPAND(w, t);\n        G(r, w, 64, t);\n        for (var i = 0; i < 8; i += 1) {\n            addInto(r, i * 2, state, i * 2);\n        }\n        state.set(r);\n        inInd += 128;\n        inlen -= 128;\n    }\n    for (var i = 0; i < 8; i += 1) {\n        store_bigendian(statebytes, i * 8, state, i * 2);\n    }\n    arrFactory.recycle(r, w, t);\n    return inlen;\n}\n/**\n * Analog of iv in crypto_hash/sha512/ref/hash.c\n * Length === 64.\n */\nvar iv = new Uint8Array([0x6a, 0x09, 0xe6, 0x67, 0xf3, 0xbc, 0xc9, 0x08,\n    0xbb, 0x67, 0xae, 0x85, 0x84, 0xca, 0xa7, 0x3b,\n    0x3c, 0x6e, 0xf3, 0x72, 0xfe, 0x94, 0xf8, 0x2b,\n    0xa5, 0x4f, 0xf5, 0x3a, 0x5f, 0x1d, 0x36, 0xf1,\n    0x51, 0x0e, 0x52, 0x7f, 0xad, 0xe6, 0x82, 0xd1,\n    0x9b, 0x05, 0x68, 0x8c, 0x2b, 0x3e, 0x6c, 0x1f,\n    0x1f, 0x83, 0xd9, 0xab, 0xfb, 0x41, 0xbd, 0x6b,\n    0x5b, 0xe0, 0xcd, 0x19, 0x13, 0x7e, 0x21, 0x79]);\nfunction hash_padded_block(h, oddBytes, totalLen, arrFactory) {\n    var padded = arrFactory.getUint8Array(256);\n    var oddLen = oddBytes.length;\n    var bytes = arrFactory.getUint32Array(2);\n    bytes[0] = (totalLen / 0x20000000) | 0;\n    bytes[1] = totalLen << 3;\n    for (var i = 0; i < oddLen; i += 1) {\n        padded[i] = oddBytes[i];\n    }\n    padded[oddLen] = 0x80;\n    if (oddLen < 112) {\n        for (var i = oddLen + 1; i < 120; i += 1) {\n            padded[i] = 0;\n        }\n        store_bigendian(padded, 120, bytes, 0);\n        crypto_hashblocks(h, padded.subarray(0, 128), arrFactory);\n    }\n    else {\n        for (var i = oddLen + 1; i < 248; i += 1) {\n            padded[i] = 0;\n        }\n        store_bigendian(padded, 248, bytes, 0);\n        crypto_hashblocks(h, padded, arrFactory);\n    }\n    arrFactory.recycle(padded, bytes);\n}\n/**\n * Analog of crypto_hash in crypto_hash/sha512/ref/hash.c\n * with ending part of make hash of padded arranged into its\n * own function.\n */\nfunction hash(inArr, arrFactory) {\n    if (inArr.length > 0xffffffffffff) {\n        new Error(\"This implementation \" +\n            \"cannot handle byte arrays longer than 2^48 (256 TB).\");\n    }\n    if (!arrFactory) {\n        arrFactory = arrays.makeFactory();\n    }\n    var h = arrFactory.getUint8Array(64);\n    var totalLen = inArr.length;\n    h.set(iv);\n    var oddLen = crypto_hashblocks(h, inArr, arrFactory);\n    inArr = inArr.subarray(totalLen - oddLen);\n    hash_padded_block(h, inArr, totalLen, arrFactory);\n    arrFactory.wipeRecycled();\n    return h;\n}\nexports.hash = hash;\nfunction makeHasher(isSingleUse, arrFactory) {\n    if (isSingleUse === void 0) { isSingleUse = true; }\n    if (!arrFactory) {\n        arrFactory = arrays.makeFactory();\n    }\n    var cache = arrFactory.getUint8Array(128);\n    var cachedBytes = 0;\n    var totalLen = 0;\n    var h = null;\n    return {\n        update: function (m) {\n            if (!cache) {\n                throw new Error(\"Cannot use destroyed hasher.\");\n            }\n            if (m.length === 0) {\n                return;\n            }\n            totalLen += m.length;\n            if (!h) {\n                h = arrFactory.getUint8Array(64);\n                h.set(iv);\n            }\n            if (cachedBytes > 0) {\n                var delta = Math.min(m.length, 128 - cachedBytes);\n                for (var i = 0; i < delta; i += 1) {\n                    cache[cachedBytes + i] = m[i];\n                }\n                if ((cachedBytes + delta) < 128) {\n                    cachedBytes += delta;\n                    return;\n                }\n                else {\n                    crypto_hashblocks(h, cache, arrFactory);\n                    cachedBytes = 0;\n                    m = m.subarray(delta);\n                    if (m.length === 0) {\n                        arrFactory.wipe(cache);\n                        return;\n                    }\n                }\n            }\n            cachedBytes = crypto_hashblocks(h, m, arrFactory);\n            m = m.subarray(m.length - cachedBytes);\n            for (var i = 0; i < cachedBytes; i += 1) {\n                cache[i] = m[i];\n            }\n            for (var i = cachedBytes; i < cache.length; i += 1) {\n                cache[i] = 0;\n            }\n        },\n        digest: function () {\n            if (!cache) {\n                throw new Error(\"Cannot use destroyed hasher.\");\n            }\n            if (!h) {\n                throw new Error(\"No bytes were hashed so far.\");\n            }\n            hash_padded_block(h, cache.subarray(0, cachedBytes), totalLen, arrFactory);\n            var hashResult = h;\n            h = null;\n            arrFactory.wipe(cache);\n            totalLen = 0;\n            cachedBytes = 0;\n            arrFactory.wipeRecycled();\n            if (isSingleUse) {\n                this.destroy();\n            }\n            return hashResult;\n        },\n        destroy: function () {\n            if (!cache) {\n                return;\n            }\n            arrFactory.recycle(cache);\n            if (!h) {\n                arrFactory.recycle(h);\n                h = null;\n            }\n            arrFactory.wipeRecycled();\n            cache = null;\n            arrFactory = null;\n        }\n    };\n}\nexports.makeHasher = makeHasher;\nObject.freeze(exports);\n","/* Copyright(c) 2015 3NSoft Inc.\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, you can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n/**\n * This is a TypeScrypt rewrite of scrypt-1.1.6.\n * In particular this file contains scrypt algorithm's main part.\n */\nvar arrays = require('../util/arrays');\nvar sha256 = require('./sha256');\n/**\n * Analog of blkcpy in lib/crypto/crypto_scrypt-ref.c\n */\nfunction blkcpy(dest, di, src, si, len) {\n    for (var i = 0; i < len; i += 1) {\n        dest[di + i] = src[si + i];\n    }\n}\n/**\n * Analog of blkxor in lib/crypto/crypto_scrypt-ref.c\n */\nfunction blkxor(dest, di, src, si, len) {\n    for (var i = 0; i < len; i += 1) {\n        dest[di + i] ^= src[si + i];\n    }\n}\n/**\n * Analog of salsa20_8 in lib/crypto/crypto_scrypt-ref.c\n * salsa20_8(B):\n * Apply the salsa20/8 core to the provided block.\n */\nfunction salsa20_8(B) {\n    // inlined load_littleendian()'s\n    var x0 = B[0] | (B[1] << 8) | (B[2] << 16) | (B[3] << 24);\n    var j0 = x0;\n    var x1 = B[4] | (B[5] << 8) | (B[6] << 16) | (B[7] << 24);\n    var j1 = x1;\n    var x2 = B[8] | (B[9] << 8) | (B[10] << 16) | (B[11] << 24);\n    var j2 = x2;\n    var x3 = B[12] | (B[13] << 8) | (B[14] << 16) | (B[15] << 24);\n    var j3 = x3;\n    var x4 = B[16] | (B[17] << 8) | (B[18] << 16) | (B[19] << 24);\n    var j4 = x4;\n    var x5 = B[20] | (B[21] << 8) | (B[22] << 16) | (B[23] << 24);\n    var j5 = x5;\n    var x6 = B[24] | (B[25] << 8) | (B[26] << 16) | (B[27] << 24);\n    var j6 = x6;\n    var x7 = B[28] | (B[29] << 8) | (B[30] << 16) | (B[31] << 24);\n    var j7 = x7;\n    var x8 = B[32] | (B[33] << 8) | (B[34] << 16) | (B[35] << 24);\n    var j8 = x8;\n    var x9 = B[36] | (B[37] << 8) | (B[38] << 16) | (B[39] << 24);\n    var j9 = x9;\n    var x10 = B[40] | (B[41] << 8) | (B[42] << 16) | (B[43] << 24);\n    var j10 = x10;\n    var x11 = B[44] | (B[45] << 8) | (B[46] << 16) | (B[47] << 24);\n    var j11 = x11;\n    var x12 = B[48] | (B[49] << 8) | (B[50] << 16) | (B[51] << 24);\n    var j12 = x12;\n    var x13 = B[52] | (B[53] << 8) | (B[54] << 16) | (B[55] << 24);\n    var j13 = x13;\n    var x14 = B[56] | (B[57] << 8) | (B[58] << 16) | (B[59] << 24);\n    var j14 = x14;\n    var x15 = B[60] | (B[61] << 8) | (B[62] << 16) | (B[63] << 24);\n    var j15 = x15;\n    var t = 0;\n    for (var i = 0; i < 8; i += 2) {\n        // inlined rotate()'s\n        t = (x0 + x12);\n        x4 ^= (t << 7) | (t >>> 25);\n        t = (x4 + x0);\n        x8 ^= (t << 9) | (t >>> 23);\n        t = (x8 + x4);\n        x12 ^= (t << 13) | (t >>> 19);\n        t = (x12 + x8);\n        x0 ^= (t << 18) | (t >>> 14);\n        t = (x5 + x1);\n        x9 ^= (t << 7) | (t >>> 25);\n        t = (x9 + x5);\n        x13 ^= (t << 9) | (t >>> 23);\n        t = (x13 + x9);\n        x1 ^= (t << 13) | (t >>> 19);\n        t = (x1 + x13);\n        x5 ^= (t << 18) | (t >>> 14);\n        t = (x10 + x6);\n        x14 ^= (t << 7) | (t >>> 25);\n        t = (x14 + x10);\n        x2 ^= (t << 9) | (t >>> 23);\n        t = (x2 + x14);\n        x6 ^= (t << 13) | (t >>> 19);\n        t = (x6 + x2);\n        x10 ^= (t << 18) | (t >>> 14);\n        t = (x15 + x11);\n        x3 ^= (t << 7) | (t >>> 25);\n        t = (x3 + x15);\n        x7 ^= (t << 9) | (t >>> 23);\n        t = (x7 + x3);\n        x11 ^= (t << 13) | (t >>> 19);\n        t = (x11 + x7);\n        x15 ^= (t << 18) | (t >>> 14);\n        t = (x0 + x3);\n        x1 ^= (t << 7) | (t >>> 25);\n        t = (x1 + x0);\n        x2 ^= (t << 9) | (t >>> 23);\n        t = (x2 + x1);\n        x3 ^= (t << 13) | (t >>> 19);\n        t = (x3 + x2);\n        x0 ^= (t << 18) | (t >>> 14);\n        t = (x5 + x4);\n        x6 ^= (t << 7) | (t >>> 25);\n        t = (x6 + x5);\n        x7 ^= (t << 9) | (t >>> 23);\n        t = (x7 + x6);\n        x4 ^= (t << 13) | (t >>> 19);\n        t = (x4 + x7);\n        x5 ^= (t << 18) | (t >>> 14);\n        t = (x10 + x9);\n        x11 ^= (t << 7) | (t >>> 25);\n        t = (x11 + x10);\n        x8 ^= (t << 9) | (t >>> 23);\n        t = (x8 + x11);\n        x9 ^= (t << 13) | (t >>> 19);\n        t = (x9 + x8);\n        x10 ^= (t << 18) | (t >>> 14);\n        t = (x15 + x14);\n        x12 ^= (t << 7) | (t >>> 25);\n        t = (x12 + x15);\n        x13 ^= (t << 9) | (t >>> 23);\n        t = (x13 + x12);\n        x14 ^= (t << 13) | (t >>> 19);\n        t = (x14 + x13);\n        x15 ^= (t << 18) | (t >>> 14);\n    }\n    x0 = (x0 + j0);\n    x1 = (x1 + j1);\n    x2 = (x2 + j2);\n    x3 = (x3 + j3);\n    x4 = (x4 + j4);\n    x5 = (x5 + j5);\n    x6 = (x6 + j6);\n    x7 = (x7 + j7);\n    x8 = (x8 + j8);\n    x9 = (x9 + j9);\n    x10 = (x10 + j10);\n    x11 = (x11 + j11);\n    x12 = (x12 + j12);\n    x13 = (x13 + j13);\n    x14 = (x14 + j14);\n    x15 = (x15 + j15);\n    // inlined store_littleendian()'s\n    B[0] = x0;\n    B[1] = x0 >>> 8;\n    B[2] = x0 >>> 16;\n    B[3] = x0 >>> 24;\n    B[4] = x1;\n    B[5] = x1 >>> 8;\n    B[6] = x1 >>> 16;\n    B[7] = x1 >>> 24;\n    B[8] = x2;\n    B[9] = x2 >>> 8;\n    B[10] = x2 >>> 16;\n    B[11] = x2 >>> 24;\n    B[12] = x3;\n    B[13] = x3 >>> 8;\n    B[14] = x3 >>> 16;\n    B[15] = x3 >>> 24;\n    B[16] = x4;\n    B[17] = x4 >>> 8;\n    B[18] = x4 >>> 16;\n    B[19] = x4 >>> 24;\n    B[20] = x5;\n    B[21] = x5 >>> 8;\n    B[22] = x5 >>> 16;\n    B[23] = x5 >>> 24;\n    B[24] = x6;\n    B[25] = x6 >>> 8;\n    B[26] = x6 >>> 16;\n    B[27] = x6 >>> 24;\n    B[28] = x7;\n    B[29] = x7 >>> 8;\n    B[30] = x7 >>> 16;\n    B[31] = x7 >>> 24;\n    B[32] = x8;\n    B[33] = x8 >>> 8;\n    B[34] = x8 >>> 16;\n    B[35] = x8 >>> 24;\n    B[36] = x9;\n    B[37] = x9 >>> 8;\n    B[38] = x9 >>> 16;\n    B[39] = x9 >>> 24;\n    B[40] = x10;\n    B[41] = x10 >>> 8;\n    B[42] = x10 >>> 16;\n    B[43] = x10 >>> 24;\n    B[44] = x11;\n    B[45] = x11 >>> 8;\n    B[46] = x11 >>> 16;\n    B[47] = x11 >>> 24;\n    B[48] = x12;\n    B[49] = x12 >>> 8;\n    B[50] = x12 >>> 16;\n    B[51] = x12 >>> 24;\n    B[52] = x13;\n    B[53] = x13 >>> 8;\n    B[54] = x13 >>> 16;\n    B[55] = x13 >>> 24;\n    B[56] = x14;\n    B[57] = x14 >>> 8;\n    B[58] = x14 >>> 16;\n    B[59] = x14 >>> 24;\n    B[60] = x15;\n    B[61] = x15 >>> 8;\n    B[62] = x15 >>> 16;\n    B[63] = x15 >>> 24;\n}\n/**\n * Analog of blockmix_salsa8 in lib/crypto/crypto_scrypt-ref.c\n * blockmix_salsa8(B, Y, r):\n * Compute B = BlockMix_{salsa20/8, r}(B).  The input B must be 128r bytes in\n * length; the temporary space Y must also be the same size.\n */\nfunction blockmix_salsa8(B, Y, r, arrFactory) {\n    var X = arrFactory.getUint8Array(64);\n    /* 1: X <-- B_{2r - 1} */\n    blkcpy(X, 0, B, (2 * r - 1) * 64, 64);\n    /* 2: for i = 0 to 2r - 1 do */\n    for (var i = 0; i < 2 * r; i += 1) {\n        /* 3: X <-- H(X \\xor B_i) */\n        blkxor(X, 0, B, i * 64, 64);\n        salsa20_8(X);\n        /* 4: Y_i <-- X */\n        blkcpy(Y, i * 64, X, 0, 64);\n    }\n    /* 6: B' <-- (Y_0, Y_2 ... Y_{2r-2}, Y_1, Y_3 ... Y_{2r-1}) */\n    for (var i = 0; i < r; i += 1) {\n        blkcpy(B, i * 64, Y, (i * 2) * 64, 64);\n    }\n    for (var i = 0; i < r; i += 1) {\n        blkcpy(B, (i + r) * 64, Y, (i * 2 + 1) * 64, 64);\n    }\n    arrFactory.recycle(X);\n}\n/**\n * Analog of integerify in lib/crypto/crypto_scrypt-ref.c\n * plus another operation.\n * Return the result of parsing B_{2r-1} as a little-endian integer,\n * mod (N-1), where it is assumed that logN < 32.\n * As a result of a limit on N, only 32-bit integer should be read,\n * instead of an original 64-bit.\n */\nfunction integerifyAndMod(B, r, N) {\n    var i = (2 * r - 1) * 64;\n    return (B[i] + (B[i + 1] << 8) + (B[i + 2] << 16) + (B[i + 3] << 24)) & (N - 1);\n}\n/**\n * Analog of smix in lib/crypto/crypto_scrypt-ref.c\n * smix(B, r, N, V, XY):\n * Compute B = SMix_r(B, N).  The input B must be 128r bytes in length; the\n * temporary storage V must be 128rN bytes in length; the temporary storage\n * XY must be 256r bytes in length.  The value N must be a power of 2, and\n * logN < 32.\n */\nfunction smix(B, r, N, V, XY, progress, arrFactory) {\n    var X = XY.subarray(0, 128 * r);\n    var Y = XY.subarray(128 * r);\n    var nextProgInd = progress.deltaN;\n    /* 1: X <-- B */\n    blkcpy(X, 0, B, 0, 128 * r);\n    /* 2: for i = 0 to N - 1 do */\n    for (var i = 0; i < N; i += 1) {\n        /* 3: V_i <-- X */\n        blkcpy(V, i * (128 * r), X, 0, 128 * r);\n        /* 4: X <-- H(X) */\n        blockmix_salsa8(X, Y, r, arrFactory);\n        if (i === nextProgInd) {\n            progress.addDelta();\n            nextProgInd += progress.deltaN;\n        }\n    }\n    nextProgInd = progress.deltaN;\n    /* 6: for i = 0 to N - 1 do */\n    var j;\n    for (var i = 0; i < N; i += 1) {\n        /* 7: j <-- Integerify(X) mod N */\n        j = integerifyAndMod(X, r, N);\n        /* 8: X <-- H(X \\xor V_j) */\n        blkxor(X, 0, V, j * (128 * r), 128 * r);\n        blockmix_salsa8(X, Y, r, arrFactory);\n        if (i === nextProgInd) {\n            progress.addDelta();\n            nextProgInd += progress.deltaN;\n        }\n    }\n    /* 10: B' <-- X */\n    blkcpy(B, 0, X, 0, 128 * r);\n}\n/**\n * Analog of crypto_scrypt in lib/crypto/crypto_scrypt-ref.c\n * crypto_scrypt(passwd, passwdlen, salt, saltlen, N, r, p, buf, buflen):\n * Compute scrypt(passwd[0 .. passwdlen - 1], salt[0 .. saltlen - 1], N, r,\n * p, buflen) and write the result into buf.  The parameters r, p, and buflen\n * must satisfy r * p < 2^30 and buflen <= (2^32 - 1) * 32.  The parameter N\n * must be a power of 2.\n *\n * Return Uint8Array with result; or throw an error.\n */\nfunction scrypt(passwd, salt, logN, r, p, dkLen, progressCB, arrFactory) {\n    if (!arrFactory) {\n        arrFactory = arrays.makeFactory();\n    }\n    if ((logN >= 32) || (logN < 1)) {\n        throw new Error('Parameter logN is out of bounds.');\n    }\n    if ((r < 1) || (p < 1) || (r * p >= (1 << 30))) {\n        throw new Error('Parameters p and r are out of bounds.');\n    }\n    var N = (1 << logN);\n    var V;\n    var B;\n    var XY;\n    /* Allocate memory. */\n    try {\n        V = arrFactory.getUint8Array(128 * r * N);\n        B = arrFactory.getUint8Array(128 * r * p);\n        XY = arrFactory.getUint8Array(256 * r);\n    }\n    catch (e) {\n        e.message = \"Cannot allocate memory for given parameters: \" + e.message;\n        throw e;\n    }\n    /* 1: (B_0 ... B_{p-1}) <-- PBKDF2(P, S, 1, p * MFLen) */\n    sha256.PBKDF2_SHA256(passwd, salt, 1, B, arrFactory);\n    progressCB(3); // set 3% progress after the first PBKDF run\n    var progShow = {\n        completed: 3,\n        deltaWork: 1,\n        deltaN: Math.floor(2 * N * p / 93),\n        addDelta: function () {\n            this.completed += this.deltaWork;\n            progressCB(this.completed);\n        }\n    };\n    /* 2: for i = 0 to p - 1 do */\n    for (var i = 0; i < p; i += 1) {\n        /* 3: B_i <-- MF(B_i, N) */\n        smix(B.subarray(i * 128 * r), r, N, V, XY, progShow, arrFactory);\n    }\n    /* 5: DK <-- PBKDF2(P, B, 1, dkLen) */\n    var buf = arrFactory.getUint8Array(dkLen);\n    sha256.PBKDF2_SHA256(passwd, B, 1, buf, arrFactory);\n    progressCB(99); // set 99% progress after the last PBKDF run\n    arrFactory.wipe(V, B, XY);\n    arrFactory.wipeRecycled();\n    progressCB(100); // set 100% progress after the cleanup\n    return buf;\n}\nexports.scrypt = scrypt;\n","/* Copyright(c) 2015 3NSoft Inc.\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, you can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n/**\n * Analog of round in crypto_hashblocks/sha256/inplace/blocks.c\n * Length === 64.\n */\nvar round = new Uint32Array([0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,\n    0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,\n    0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,\n    0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,\n    0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n    0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,\n    0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,\n    0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,\n    0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,\n    0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]);\n/**\n * Analog of SHA256_Transform in lib/crypto/sha256.h\n * with all C macros expanded.\n */\nfunction crypto_hashblocks(state, inArr, arrFactory) {\n    var W = arrFactory.getUint32Array(64);\n    var inlen = inArr.length;\n    var inInd = 0;\n    var a;\n    var b;\n    var c;\n    var d;\n    var e;\n    var f;\n    var g;\n    var h;\n    var t0;\n    var t1;\n    var t;\n    while (inlen >= 64) {\n        /* Prepare message schedule W. */\n        for (var i = 0; i < 16; i += 1) {\n            t = inInd + i * 4;\n            W[i] = (inArr[t] << 24) + (inArr[t + 1] << 16) +\n                (inArr[t + 2] << 8) + inArr[t + 3];\n        }\n        for (var i = 16; i < 64; i += 1) {\n            t = W[i - 2];\n            // t0 = sigma1(t); expanded below\n            t0 = ((t >>> 17) | (t << 15)) ^\n                ((t >>> 19) | (t << 13)) ^\n                (t >>> 10);\n            t = W[i - 15];\n            // t1 = sigma0(t); expanded below\n            t1 = ((t >>> 7) | (t << 25)) ^\n                ((t >>> 18) | (t << 14)) ^\n                (t >>> 3);\n            W[i] = t0 + W[i - 7] + t1 + W[i - 16];\n        }\n        /* Mix.\n           All RNDr's are put into one loop for 0<=i<64.\n           All index calculations inside RNDr are equivalent to having\n           8 local variables (a...h) instead of array S, with values\n           rotation on every loop, with last rotation returning values\n           to initial mapping.\n           All macros are inlined, instead of having them as function\n           calls (less calls and a use of local variables instead of\n           arrays, make faster this heavily used part of code). */\n        a = state[0];\n        b = state[1];\n        c = state[2];\n        d = state[3];\n        e = state[4];\n        f = state[5];\n        g = state[6];\n        h = state[7];\n        for (var i = 0; i < 64; i += 1) {\n            t0 = h + W[i] + round[i];\n            // t0 += Sigma1(e);\n            t0 += ((e >>> 6) | (e << 26)) ^\n                ((e >>> 11) | (e << 21)) ^\n                ((e >>> 25) | (e << 7));\n            // t0 += Ch(e, f, g);\n            t0 += (e & (f ^ g)) ^ g;\n            // t1 = Sigma0(a);\n            t1 = ((a >>> 2) | (a << 30)) ^\n                ((a >>> 13) | (a << 19)) ^\n                ((a >>> 22) | (a << 10));\n            // t1 += Maj(a, b, c);\n            t1 += (a & (b | c)) | (b & c);\n            d += t0;\n            h = t0 + t1;\n            // do values flipping\n            t0 = h;\n            h = g;\n            g = f;\n            f = e;\n            e = d;\n            d = c;\n            c = b;\n            b = a;\n            a = t0;\n        }\n        state[0] += a;\n        state[1] += b;\n        state[2] += c;\n        state[3] += d;\n        state[4] += e;\n        state[5] += f;\n        state[6] += g;\n        state[7] += h;\n        inInd += 64;\n        inlen -= 64;\n    }\n    arrFactory.recycle(W);\n    return inlen;\n}\nfunction hashFromU32toU8(statebytes, state) {\n    var u;\n    for (var i = 0; i < 8; i += 1) {\n        u = state[i];\n        statebytes[i * 4 + 3] = u;\n        statebytes[i * 4 + 2] = u >>> 8;\n        statebytes[i * 4 + 1] = u >>> 16;\n        statebytes[i * 4] = u >>> 24;\n    }\n}\n/**\n * Analog of iv in crypto_hash/sha256/inplace/ref.c\n * Length === 8.\n */\nvar iv = new Uint32Array([0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]);\nfunction hash_padded_block(h, oddBytes, totalLen, arrFactory) {\n    var padded = arrFactory.getUint8Array(128);\n    var oddLen = oddBytes.length;\n    var bits = arrFactory.getUint32Array(2);\n    bits[0] = (totalLen / 0x20000000) | 0;\n    bits[1] = totalLen << 3;\n    for (var i = 0; i < oddLen; i += 1) {\n        padded[i] = oddBytes[i];\n    }\n    padded[oddLen] = 0x80;\n    if (oddLen < 56) {\n        for (var i = oddLen + 1; i < 56; i += 1) {\n            padded[i] = 0;\n        }\n        padded[56] = bits[0] >>> 24;\n        padded[57] = bits[0] >>> 16;\n        padded[58] = bits[0] >>> 8;\n        padded[59] = bits[0];\n        padded[60] = bits[1] >>> 24;\n        padded[61] = bits[1] >>> 16;\n        padded[62] = bits[1] >>> 8;\n        padded[63] = bits[1];\n        crypto_hashblocks(h, padded.subarray(0, 64), arrFactory);\n    }\n    else {\n        for (var i = oddLen + 1; i < 120; i += 1) {\n            padded[i] = 0;\n        }\n        padded[120] = bits[0] >>> 24;\n        padded[121] = bits[0] >>> 16;\n        padded[122] = bits[0] >>> 8;\n        padded[123] = bits[0];\n        padded[124] = bits[1] >>> 24;\n        padded[125] = bits[1] >>> 16;\n        padded[126] = bits[1] >>> 8;\n        padded[127] = bits[1];\n        crypto_hashblocks(h, padded, arrFactory);\n    }\n    arrFactory.recycle(padded, bits);\n}\nfunction makeSha256Ctx(arrFactory) {\n    return {\n        buf: arrFactory.getUint8Array(64),\n        bufBytes: 0,\n        state: arrFactory.getUint32Array(8),\n        count: 0,\n        arrFactory: arrFactory\n    };\n}\nexports.makeSha256Ctx = makeSha256Ctx;\nfunction recycleSha256Ctxs() {\n    var ctxs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        ctxs[_i - 0] = arguments[_i];\n    }\n    var ctx;\n    for (var i = 0; i < ctxs.length; i += 1) {\n        ctx = ctxs[i];\n        ctx.arrFactory.recycle(ctx.state, ctx.buf);\n        ctx.state = null;\n        ctx.buf = null;\n        ctx.arrFactory = null;\n    }\n}\nexports.recycleSha256Ctxs = recycleSha256Ctxs;\nfunction SHA256_Init(ctx) {\n    ctx.state.set(iv);\n    ctx.bufBytes = 0;\n    ctx.count = 0;\n}\nexports.SHA256_Init = SHA256_Init;\nfunction SHA256_Update(ctx, m, mi, mlen) {\n    if (mlen === 0) {\n        return;\n    }\n    ctx.count += mlen;\n    if (ctx.bufBytes > 0) {\n        var delta = Math.min(mlen, 64 - ctx.bufBytes);\n        for (var i = 0; i < delta; i += 1) {\n            ctx.buf[ctx.bufBytes + i] = m[mi + i];\n        }\n        ctx.bufBytes += delta;\n        if (ctx.bufBytes < 64) {\n            return;\n        }\n        else {\n            crypto_hashblocks(ctx.state, ctx.buf, ctx.arrFactory);\n            ctx.bufBytes = 0;\n            mi += delta;\n            mlen -= delta;\n            if (mlen === 0) {\n                return;\n            }\n        }\n    }\n    ctx.bufBytes = crypto_hashblocks(ctx.state, m.subarray(mi, mi + mlen), ctx.arrFactory);\n    mi += mlen - ctx.bufBytes;\n    for (var i = 0; i < ctx.bufBytes; i += 1) {\n        ctx.buf[i] = m[mi + i];\n    }\n}\nexports.SHA256_Update = SHA256_Update;\nfunction SHA256_Final(h, ctx) {\n    hash_padded_block(ctx.state, ctx.buf.subarray(0, ctx.bufBytes), ctx.count, ctx.arrFactory);\n    ctx.count = 0;\n    ctx.bufBytes = 0;\n    hashFromU32toU8(h, ctx.state);\n}\nexports.SHA256_Final = SHA256_Final;\nfunction makeHmacSHA256Context(arrFactory) {\n    return {\n        ictx: makeSha256Ctx(arrFactory),\n        octx: makeSha256Ctx(arrFactory),\n        arrFactory: arrFactory\n    };\n}\nfunction recycleHmacSHA256Context() {\n    var ctxs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        ctxs[_i - 0] = arguments[_i];\n    }\n    var ctx;\n    for (var i = 0; i < ctxs.length; i += 1) {\n        ctx = ctxs[i];\n        recycleSha256Ctxs(ctx.ictx, ctx.octx);\n    }\n}\nfunction copyHmacSHA256Context(dst, src) {\n    dst.ictx.state.set(src.ictx.state);\n    dst.ictx.count = src.ictx.count;\n    dst.ictx.buf.set(src.ictx.buf);\n    dst.ictx.bufBytes = src.ictx.bufBytes;\n    dst.octx.state.set(src.octx.state);\n    dst.octx.count = src.octx.count;\n    dst.octx.buf.set(src.octx.buf);\n    dst.octx.bufBytes = src.octx.bufBytes;\n}\nfunction copyBytes(dst, di, src, si, len) {\n    for (var i = 0; i < len; i += 1) {\n        dst[di + i] = src[si + i];\n    }\n}\n/**\n * Analog of HMAC_SHA256_Init in lib/crypto/sha256.c\n * Initialize an HMAC-SHA256 operation with the given key.\n */\nfunction HMAC_SHA256_Init(ctx, K, KInd, Klen) {\n    var pad = ctx.arrFactory.getUint8Array(64);\n    var khash = ctx.arrFactory.getUint8Array(32);\n    /* If Klen > 64, the key is really SHA256(K). */\n    if (Klen > 64) {\n        SHA256_Init(ctx.ictx);\n        SHA256_Update(ctx.ictx, K, KInd, Klen);\n        SHA256_Final(khash, ctx.ictx);\n        K = khash;\n        KInd = 0;\n        Klen = 32;\n    }\n    /* Inner SHA256 operation is SHA256(K xor [block of 0x36] || data). */\n    SHA256_Init(ctx.ictx);\n    for (var i = 0; i < Klen; i += 1) {\n        pad[i] = K[i] ^ 0x36;\n    }\n    for (var i = Klen; i < 64; i += 1) {\n        pad[i] = 0x36;\n    }\n    SHA256_Update(ctx.ictx, pad, 0, 64);\n    /* Outer SHA256 operation is SHA256(K xor [block of 0x5c] || hash). */\n    SHA256_Init(ctx.octx);\n    for (var i = 0; i < Klen; i += 1) {\n        pad[i] = K[i] ^ 0x5c;\n    }\n    for (var i = Klen; i < 64; i += 1) {\n        pad[i] = 0x5c;\n    }\n    SHA256_Update(ctx.octx, pad, 0, 64);\n    ctx.arrFactory.recycle(khash, pad);\n}\n/**\n * Analog of HMAC_SHA256_Update in lib/crypto/sha256.c\n * Add bytes to the HMAC-SHA256 operation.\n */\nfunction HMAC_SHA256_Update(ctx, inArr, inInd, len) {\n    /* Feed data to the inner SHA256 operation. */\n    SHA256_Update(ctx.ictx, inArr, inInd, len);\n}\n/**\n * Analog of HMAC_SHA256_Update in lib/crypto/sha256.c\n * Finish an HMAC-SHA256 operation.\n */\nfunction HMAC_SHA256_Final(digest, ctx) {\n    var ihash = ctx.arrFactory.getUint8Array(32);\n    /* Finish the inner SHA256 operation. */\n    SHA256_Final(ihash, ctx.ictx);\n    /* Feed the inner hash to the outer SHA256 operation. */\n    SHA256_Update(ctx.octx, ihash, 0, 32);\n    /* Finish the outer SHA256 operation. */\n    SHA256_Final(digest, ctx.octx);\n    ctx.arrFactory.recycle(ihash);\n}\n/**\n * Analog of be32enc in lib/util/sysendian.h\n */\nfunction be32enc(p, pi, x) {\n    p[pi + 3] = x;\n    p[pi + 2] = (x >>> 8);\n    p[pi + 1] = (x >>> 16);\n    p[pi] = (x >>> 24);\n}\nexports.be32enc = be32enc;\n/**\n * Analog of PBKDF2_SHA256 in lib/crypto/sha256.c\n * PBKDF2_SHA256(passwd, passwdlen, salt, saltlen, c, buf, dkLen):\n * Compute PBKDF2(passwd, salt, c, dkLen) using HMAC-SHA256 as the PRF, and\n * write the output to buf, length dkLen, which must be at most 32 * (2^32 - 1).\n */\nfunction PBKDF2_SHA256(passwd, salt, c, buf, arrFactory) {\n    var dkLen = buf.length;\n    var PShctx = makeHmacSHA256Context(arrFactory);\n    var hctx = makeHmacSHA256Context(arrFactory);\n    var ivec = arrFactory.getUint8Array(4);\n    var U = arrFactory.getUint8Array(32);\n    var T = arrFactory.getUint8Array(32);\n    /* Compute HMAC state after processing P and S. */\n    HMAC_SHA256_Init(PShctx, passwd, 0, passwd.length);\n    HMAC_SHA256_Update(PShctx, salt, 0, salt.length);\n    /* Iterate through the blocks. */\n    for (var i = 0; (i * 32) < dkLen; i += 1) {\n        /* Generate INT(i + 1). */\n        be32enc(ivec, 0, i + 1);\n        /* Compute U_1 = PRF(P, S || INT(i)). */\n        copyHmacSHA256Context(hctx, PShctx);\n        HMAC_SHA256_Update(hctx, ivec, 0, 4);\n        HMAC_SHA256_Final(U, hctx);\n        /* T_i = U_1 ... */\n        copyBytes(T, 0, U, 0, 32);\n        for (var j = 2; j <= c; j += 1) {\n            /* Compute U_j. */\n            HMAC_SHA256_Init(hctx, passwd, 0, passwd.length);\n            HMAC_SHA256_Update(hctx, U, 0, 32);\n            HMAC_SHA256_Final(U, hctx);\n            /* ... xor U_j ... */\n            for (var k = 0; k < 32; k += 1) {\n                T[k] ^= U[k];\n            }\n        }\n        /* Copy as many bytes as necessary into buf. */\n        var clen = dkLen - i * 32;\n        if (clen > 32) {\n            clen = 32;\n        }\n        copyBytes(buf, (i * 32), T, 0, clen);\n    }\n    recycleHmacSHA256Context(PShctx, hctx);\n    arrFactory.recycle(ivec, U, T);\n}\nexports.PBKDF2_SHA256 = PBKDF2_SHA256;\nObject.freeze(exports);\n","/* Copyright(c) 2015 3NSoft Inc.\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, you can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\nfunction make_fe25519(arrFactory) {\n    return arrFactory.getUint32Array(32);\n}\nexports.make_fe25519 = make_fe25519;\nfunction make_copy_fe25519(x, arrFactory) {\n    var c = arrFactory.getUint32Array(32);\n    c.set(x);\n    return c;\n}\n// The following defs are not used in crypto_sign/ed25519/ref/fe25519.c\n//#define WINDOWSIZE 1 /* Should be 1,2, or 4 */\n//#define WINDOWMASK ((1<<WINDOWSIZE)-1)\n/**\n * Analog of equal in crypto_sign/ed25519/ref/fe25519.c\n * All inputs are 16-bit.\n */\nfunction equal(a, b) {\n    return (a === b) ? 1 : 0;\n    //\treturn (((a ^ b) - 1) >>> 31); /* (a equals b) ? 1: yes; 0: no */\n}\n/**\n * Analog of ge in crypto_sign/ed25519/ref/fe25519.c\n * All inputs are 16-bit.\n */\nfunction ge(a, b) {\n    return (a >= b) ? 1 : 0;\n    //\treturn (((a - b) >>> 31) ^ 1); /* (a greater or equals b) ? 1: yes; 0: no */\n}\n/**\n * Analog of times19 in crypto_sign/ed25519/ref/fe25519.c\n */\nfunction times19(a) {\n    return (a << 4) + (a << 1) + a;\n}\n/**\n * Analog of times38 in crypto_sign/ed25519/ref/fe25519.c\n */\nfunction times38(a) {\n    return (a << 5) + (a << 2) + (a << 1);\n}\n/**\n * Analog of reduce_add_sub in crypto_sign/ed25519/ref/fe25519.c\n */\nfunction reduce_add_sub(r) {\n    var t;\n    for (var rep = 0; rep < 4; rep += 1) {\n        t = r[31] >>> 7;\n        r[31] &= 127;\n        t = times19(t);\n        r[0] += t;\n        for (var i = 0; i < 31; i += 1) {\n            t = r[i] >>> 8;\n            r[i + 1] += t;\n            r[i] &= 255;\n        }\n    }\n}\n/**\n * Analog of reduce_mul in crypto_sign/ed25519/ref/fe25519.c\n */\nfunction reduce_mul(r) {\n    var t;\n    for (var rep = 0; rep < 2; rep += 1) {\n        t = r[31] >>> 7;\n        r[31] &= 127;\n        t = times19(t);\n        r[0] += t;\n        for (var i = 0; i < 31; i += 1) {\n            t = r[i] >>> 8;\n            r[i + 1] += t;\n            r[i] &= 255;\n        }\n    }\n}\n/**\n * Analog of fe25519_freeze in crypto_sign/ed25519/ref/fe25519.c\n * reduction modulo 2^255-19\n */\nfunction fe25519_freeze(r) {\n    var m = equal(r[31], 127);\n    for (var i = 30; i > 0; i -= 1) {\n        m &= equal(r[i], 255);\n    }\n    m &= ge(r[0], 237);\n    m = -m;\n    r[31] -= m & 127;\n    for (var i = 30; i > 0; i -= 1) {\n        r[i] -= m & 255;\n    }\n    r[0] -= m & 237;\n}\n/**\n * Analog of fe25519_unpack in crypto_sign/ed25519/ref/fe25519.c\n */\nfunction unpack(r, x) {\n    for (var i = 0; i < 32; i += 1) {\n        r[i] = x[i];\n    }\n    r[31] &= 127;\n}\nexports.unpack = unpack;\n/**\n * Analog of fe25519_unpack in crypto_sign/ed25519/ref/fe25519.c\n * Assumes input x being reduced below 2^255\n */\nfunction pack(r, x, arrFactory) {\n    var y = make_copy_fe25519(x, arrFactory);\n    fe25519_freeze(y);\n    for (var i = 0; i < 32; i += 1) {\n        r[i] = y[i];\n    }\n    arrFactory.recycle(y);\n}\nexports.pack = pack;\n/**\n * Analog of fe25519_iseq_vartime in crypto_sign/ed25519/ref/fe25519.c\n */\nfunction iseq_vartime(x, y, arrFactory) {\n    var t1 = make_copy_fe25519(x, arrFactory);\n    var t2 = make_copy_fe25519(y, arrFactory);\n    fe25519_freeze(t1);\n    fe25519_freeze(t2);\n    for (var i = 0; i < 32; i += 1) {\n        if (t1[i] !== t2[i]) {\n            return false;\n        }\n    }\n    arrFactory.recycle(t1, t2);\n    return true;\n}\nexports.iseq_vartime = iseq_vartime;\n/**\n * Analog of fe25519_cmov in crypto_sign/ed25519/ref/fe25519.c\n */\nfunction cmov(r, x, b) {\n    for (var i = 0; i < 32; i += 1) {\n        r[i] ^= (-b) & (x[i] ^ r[i]);\n    }\n}\nexports.cmov = cmov;\n/**\n * Analog of fe25519_getparity in crypto_sign/ed25519/ref/fe25519.c\n */\nfunction getparity(x, arrFactory) {\n    var t = make_copy_fe25519(x, arrFactory);\n    fe25519_freeze(t);\n    var res = t[0] & 1;\n    arrFactory.recycle(t);\n    return res;\n}\nexports.getparity = getparity;\n/**\n * Analog of fe25519_setone in crypto_sign/ed25519/ref/fe25519.c\n */\nfunction setone(r) {\n    r[0] = 1;\n    for (var i = 1; i < 32; i += 1) {\n        r[i] = 0;\n    }\n}\nexports.setone = setone;\n/**\n * Analog of fe25519_setzero in crypto_sign/ed25519/ref/fe25519.c\n */\nfunction setzero(r) {\n    for (var i = 0; i < 32; i += 1) {\n        r[i] = 0;\n    }\n}\nexports.setzero = setzero;\n/**\n * Analog of fe25519_neg in crypto_sign/ed25519/ref/fe25519.c\n */\nfunction neg(r, x, arrFactory) {\n    var t = make_copy_fe25519(x, arrFactory);\n    setzero(r);\n    sub(r, r, t, arrFactory);\n    arrFactory.recycle(t);\n}\nexports.neg = neg;\n/**\n * Analog of fe25519_add in crypto_sign/ed25519/ref/fe25519.c\n */\nfunction add(r, x, y) {\n    for (var i = 0; i < 32; i += 1) {\n        r[i] = x[i] + y[i];\n    }\n    reduce_add_sub(r);\n}\nexports.add = add;\n/**\n * Analog of fe25519_sub in crypto_sign/ed25519/ref/fe25519.c\n */\nfunction sub(r, x, y, arrFactory) {\n    var t = make_fe25519(arrFactory);\n    t[0] = x[0] + 0x1da;\n    for (var i = 1; i < 31; i += 1) {\n        t[i] = x[i] + 0x1fe;\n    }\n    t[31] = x[31] + 0xfe;\n    for (var i = 0; i < 32; i += 1) {\n        r[i] = t[i] - y[i];\n    }\n    reduce_add_sub(r);\n    arrFactory.recycle(t);\n}\nexports.sub = sub;\n/**\n * Analog of fe25519_mul in crypto_sign/ed25519/ref/fe25519.c\n */\nfunction mul(r, x, y, arrFactory) {\n    var t = arrFactory.getUint32Array(63);\n    for (var i = 0; i < 63; i += 1) {\n        t[i] = 0;\n    }\n    for (var i = 0; i < 32; i += 1) {\n        for (var j = 0; j < 32; j += 1) {\n            t[i + j] += x[i] * y[j];\n        }\n    }\n    for (var i = 32; i < 63; i += 1) {\n        r[i - 32] = t[i - 32] + times38(t[i]);\n    }\n    r[31] = t[31]; /* result now in r[0]...r[31] */\n    reduce_mul(r);\n    arrFactory.recycle(t);\n}\nexports.mul = mul;\n/**\n * Analog of fe25519_square in crypto_sign/ed25519/ref/fe25519.c\n */\nfunction square(r, x, arrFactory) {\n    mul(r, x, x, arrFactory);\n}\nexports.square = square;\n/**\n * Analog of fe25519_invert in crypto_sign/ed25519/ref/fe25519.c\n */\nfunction invert(r, x, arrFactory) {\n    var z2 = make_fe25519(arrFactory);\n    var z9 = make_fe25519(arrFactory);\n    var z11 = make_fe25519(arrFactory);\n    var z2_5_0 = make_fe25519(arrFactory);\n    var z2_10_0 = make_fe25519(arrFactory);\n    var z2_20_0 = make_fe25519(arrFactory);\n    var z2_50_0 = make_fe25519(arrFactory);\n    var z2_100_0 = make_fe25519(arrFactory);\n    var t0 = make_fe25519(arrFactory);\n    var t1 = make_fe25519(arrFactory);\n    /* 2 */ square(z2, x, arrFactory);\n    /* 4 */ square(t1, z2, arrFactory);\n    /* 8 */ square(t0, t1, arrFactory);\n    /* 9 */ mul(z9, t0, x, arrFactory);\n    /* 11 */ mul(z11, z9, z2, arrFactory);\n    /* 22 */ square(t0, z11, arrFactory);\n    /* 2^5 - 2^0 = 31 */ mul(z2_5_0, t0, z9, arrFactory);\n    /* 2^6 - 2^1 */ square(t0, z2_5_0, arrFactory);\n    /* 2^7 - 2^2 */ square(t1, t0, arrFactory);\n    /* 2^8 - 2^3 */ square(t0, t1, arrFactory);\n    /* 2^9 - 2^4 */ square(t1, t0, arrFactory);\n    /* 2^10 - 2^5 */ square(t0, t1, arrFactory);\n    /* 2^10 - 2^0 */ mul(z2_10_0, t0, z2_5_0, arrFactory);\n    /* 2^11 - 2^1 */ square(t0, z2_10_0, arrFactory);\n    /* 2^12 - 2^2 */ square(t1, t0, arrFactory);\n    /* 2^20 - 2^10 */ for (var i = 2; i < 10; i += 2) {\n        square(t0, t1, arrFactory);\n        square(t1, t0, arrFactory);\n    }\n    /* 2^20 - 2^0 */ mul(z2_20_0, t1, z2_10_0, arrFactory);\n    /* 2^21 - 2^1 */ square(t0, z2_20_0, arrFactory);\n    /* 2^22 - 2^2 */ square(t1, t0, arrFactory);\n    /* 2^40 - 2^20 */ for (var i = 2; i < 20; i += 2) {\n        square(t0, t1, arrFactory);\n        square(t1, t0, arrFactory);\n    }\n    /* 2^40 - 2^0 */ mul(t0, t1, z2_20_0, arrFactory);\n    /* 2^41 - 2^1 */ square(t1, t0, arrFactory);\n    /* 2^42 - 2^2 */ square(t0, t1, arrFactory);\n    /* 2^50 - 2^10 */ for (var i = 2; i < 10; i += 2) {\n        square(t1, t0, arrFactory);\n        square(t0, t1, arrFactory);\n    }\n    /* 2^50 - 2^0 */ mul(z2_50_0, t0, z2_10_0, arrFactory);\n    /* 2^51 - 2^1 */ square(t0, z2_50_0, arrFactory);\n    /* 2^52 - 2^2 */ square(t1, t0, arrFactory);\n    /* 2^100 - 2^50 */ for (var i = 2; i < 50; i += 2) {\n        square(t0, t1, arrFactory);\n        square(t1, t0, arrFactory);\n    }\n    /* 2^100 - 2^0 */ mul(z2_100_0, t1, z2_50_0, arrFactory);\n    /* 2^101 - 2^1 */ square(t1, z2_100_0, arrFactory);\n    /* 2^102 - 2^2 */ square(t0, t1, arrFactory);\n    /* 2^200 - 2^100 */ for (var i = 2; i < 100; i += 2) {\n        square(t1, t0, arrFactory);\n        square(t0, t1, arrFactory);\n    }\n    /* 2^200 - 2^0 */ mul(t1, t0, z2_100_0, arrFactory);\n    /* 2^201 - 2^1 */ square(t0, t1, arrFactory);\n    /* 2^202 - 2^2 */ square(t1, t0, arrFactory);\n    /* 2^250 - 2^50 */ for (var i = 2; i < 50; i += 2) {\n        square(t0, t1, arrFactory);\n        square(t1, t0, arrFactory);\n    }\n    /* 2^250 - 2^0 */ mul(t0, t1, z2_50_0, arrFactory);\n    /* 2^251 - 2^1 */ square(t1, t0, arrFactory);\n    /* 2^252 - 2^2 */ square(t0, t1, arrFactory);\n    /* 2^253 - 2^3 */ square(t1, t0, arrFactory);\n    /* 2^254 - 2^4 */ square(t0, t1, arrFactory);\n    /* 2^255 - 2^5 */ square(t1, t0, arrFactory);\n    /* 2^255 - 21 */ mul(r, t1, z11, arrFactory);\n    arrFactory.recycle(z2, z9, z11, z2_5_0, z2_10_0, z2_20_0, z2_50_0, z2_100_0, t0, t1);\n}\nexports.invert = invert;\n/**\n * Analog of fe25519_pow2523 in crypto_sign/ed25519/ref/fe25519.c\n */\nfunction pow2523(r, x, arrFactory) {\n    var z2 = make_fe25519(arrFactory);\n    var z9 = make_fe25519(arrFactory);\n    var z11 = make_fe25519(arrFactory);\n    var z2_5_0 = make_fe25519(arrFactory);\n    var z2_10_0 = make_fe25519(arrFactory);\n    var z2_20_0 = make_fe25519(arrFactory);\n    var z2_50_0 = make_fe25519(arrFactory);\n    var z2_100_0 = make_fe25519(arrFactory);\n    var t = make_fe25519(arrFactory);\n    /* 2 */ square(z2, x, arrFactory);\n    /* 4 */ square(t, z2, arrFactory);\n    /* 8 */ square(t, t, arrFactory);\n    /* 9 */ mul(z9, t, x, arrFactory);\n    /* 11 */ mul(z11, z9, z2, arrFactory);\n    /* 22 */ square(t, z11, arrFactory);\n    /* 2^5 - 2^0 = 31 */ mul(z2_5_0, t, z9, arrFactory);\n    /* 2^6 - 2^1 */ square(t, z2_5_0, arrFactory);\n    /* 2^10 - 2^5 */ for (var i = 1; i < 5; i += 1) {\n        square(t, t, arrFactory);\n    }\n    /* 2^10 - 2^0 */ mul(z2_10_0, t, z2_5_0, arrFactory);\n    /* 2^11 - 2^1 */ square(t, z2_10_0, arrFactory);\n    /* 2^20 - 2^10 */ for (var i = 1; i < 10; i += 1) {\n        square(t, t, arrFactory);\n    }\n    /* 2^20 - 2^0 */ mul(z2_20_0, t, z2_10_0, arrFactory);\n    /* 2^21 - 2^1 */ square(t, z2_20_0, arrFactory);\n    /* 2^40 - 2^20 */ for (var i = 1; i < 20; i += 1) {\n        square(t, t, arrFactory);\n    }\n    /* 2^40 - 2^0 */ mul(t, t, z2_20_0, arrFactory);\n    /* 2^41 - 2^1 */ square(t, t, arrFactory);\n    /* 2^50 - 2^10 */ for (var i = 1; i < 10; i += 1) {\n        square(t, t, arrFactory);\n    }\n    /* 2^50 - 2^0 */ mul(z2_50_0, t, z2_10_0, arrFactory);\n    /* 2^51 - 2^1 */ square(t, z2_50_0, arrFactory);\n    /* 2^100 - 2^50 */ for (var i = 1; i < 50; i += 1) {\n        square(t, t, arrFactory);\n    }\n    /* 2^100 - 2^0 */ mul(z2_100_0, t, z2_50_0, arrFactory);\n    /* 2^101 - 2^1 */ square(t, z2_100_0, arrFactory);\n    /* 2^200 - 2^100 */ for (var i = 1; i < 100; i += 1) {\n        square(t, t, arrFactory);\n    }\n    /* 2^200 - 2^0 */ mul(t, t, z2_100_0, arrFactory);\n    /* 2^201 - 2^1 */ square(t, t, arrFactory);\n    /* 2^250 - 2^50 */ for (var i = 1; i < 50; i += 1) {\n        square(t, t, arrFactory);\n    }\n    /* 2^250 - 2^0 */ mul(t, t, z2_50_0, arrFactory);\n    /* 2^251 - 2^1 */ square(t, t, arrFactory);\n    /* 2^252 - 2^2 */ square(t, t, arrFactory);\n    /* 2^252 - 3 */ mul(r, t, x, arrFactory);\n    arrFactory.recycle(z2, z9, z11, z2_5_0, z2_10_0, z2_20_0, z2_50_0, z2_100_0, t);\n}\nexports.pow2523 = pow2523;\nObject.freeze(exports);\n","/* Copyright(c) 2015 3NSoft Inc.\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, you can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\nvar fe = require('./fe25519');\nvar sc = require('./sc25519');\nvar ge_base = require('./ge25519_base.data');\nvar arrays = require('../util/arrays');\nfunction make_ge25519(arrFactory) {\n    return {\n        x: fe.make_fe25519(arrFactory),\n        y: fe.make_fe25519(arrFactory),\n        z: fe.make_fe25519(arrFactory),\n        t: fe.make_fe25519(arrFactory),\n    };\n}\nexports.make_ge25519 = make_ge25519;\nfunction make_ge25519_p1p1(arrFactory) {\n    return make_ge25519(arrFactory);\n}\nfunction make_ge25519_p2(arrFactory) {\n    return {\n        x: fe.make_fe25519(arrFactory),\n        y: fe.make_fe25519(arrFactory),\n        z: fe.make_fe25519(arrFactory),\n    };\n}\nfunction make_ge25519_p3(arrFactory) {\n    return make_ge25519(arrFactory);\n}\nfunction copy_ge25519_p3(c, x) {\n    c.x.set(x.x);\n    c.y.set(x.y);\n    c.z.set(x.z);\n    c.t.set(x.t);\n}\nfunction copy_ge25519_aff(c, x) {\n    c.x.set(x.x);\n    c.y.set(x.y);\n}\nfunction recycle_ge25519_aff(arrFactory) {\n    var ges = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        ges[_i - 1] = arguments[_i];\n    }\n    var x;\n    for (var i = 0; i < ges.length; i += 1) {\n        x = ges[i];\n        arrFactory.recycle(x.x, x.y);\n    }\n}\nfunction recycle_ge25519(arrFactory) {\n    var ges = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        ges[_i - 1] = arguments[_i];\n    }\n    var x;\n    for (var i = 0; i < ges.length; i += 1) {\n        x = ges[i];\n        arrFactory.recycle(x.x, x.y, x.z);\n        if (x.t) {\n            arrFactory.recycle(x.t);\n        }\n    }\n}\nexports.recycle_ge25519 = recycle_ge25519;\n/**\n * Analog of constant ge25519_ecd in crypto_sign/ed25519/ref/ge25519.c\n *  d\n */\nvar ge25519_ecd = new Uint32Array([0xA3, 0x78, 0x59, 0x13, 0xCA, 0x4D, 0xEB, 0x75, 0xAB, 0xD8,\n    0x41, 0x41, 0x4D, 0x0A, 0x70, 0x00, 0x98, 0xE8, 0x79, 0x77,\n    0x79, 0x40, 0xC7, 0x8C, 0x73, 0xFE, 0x6F, 0x2B, 0xEE, 0x6C,\n    0x03, 0x52]);\n/**\n * Analog of constant ge25519_ec2d in crypto_sign/ed25519/ref/ge25519.c\n *  2*d\n */\nvar ge25519_ec2d = new Uint32Array([0x59, 0xF1, 0xB2, 0x26, 0x94, 0x9B, 0xD6, 0xEB, 0x56, 0xB1,\n    0x83, 0x82, 0x9A, 0x14, 0xE0, 0x00, 0x30, 0xD1, 0xF3, 0xEE,\n    0xF2, 0x80, 0x8E, 0x19, 0xE7, 0xFC, 0xDF, 0x56, 0xDC, 0xD9,\n    0x06, 0x24]);\n/**\n * Analog of constant ge25519_sqrtm1 in crypto_sign/ed25519/ref/ge25519.c\n *  sqrt(-1)\n */\nvar ge25519_sqrtm1 = new Uint32Array([0xB0, 0xA0, 0x0E, 0x4A, 0x27, 0x1B, 0xEE, 0xC4, 0x78, 0xE4,\n    0x2F, 0xAD, 0x06, 0x18, 0x43, 0x2F, 0xA7, 0xD7, 0xFB, 0x3D,\n    0x99, 0x00, 0x4D, 0x2B, 0x0B, 0xDF, 0xC1, 0x4F, 0x80, 0x24,\n    0x83, 0x2B]);\n/**\n * Analog of constant ge25519_base in crypto_sign/ed25519/ref/ge25519.c\n * Packed coordinates of the base point\n */\nexports.base = make_ge25519(arrays.makeFactory());\nexports.base.x.set([0x1A, 0xD5, 0x25, 0x8F, 0x60, 0x2D, 0x56, 0xC9, 0xB2, 0xA7,\n    0x25, 0x95, 0x60, 0xC7, 0x2C, 0x69, 0x5C, 0xDC, 0xD6, 0xFD,\n    0x31, 0xE2, 0xA4, 0xC0, 0xFE, 0x53, 0x6E, 0xCD, 0xD3, 0x36,\n    0x69, 0x21]);\nexports.base.y.set([0x58, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,\n    0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,\n    0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,\n    0x66, 0x66]);\nexports.base.z.set([0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00]);\nexports.base.t.set([0xA3, 0xDD, 0xB7, 0xA5, 0xB3, 0x8A, 0xDE, 0x6D, 0xF5, 0x52,\n    0x51, 0x77, 0x80, 0x9F, 0xF0, 0x20, 0x7D, 0xE3, 0xAB, 0x64,\n    0x8E, 0x4E, 0xEA, 0x66, 0x65, 0x76, 0x8B, 0xD7, 0x0F, 0x5F,\n    0x87, 0x67]);\n/**\n * Analog of constant ge25519_base_multiples_affine in\n * crypto_sign/ed25519/ref/ge25519.c\n * Multiples of the base point in affine representation\n */\nvar ge25519_base_multiples_affine = ge_base.base_multiples_affine;\n/**\n * Analog of p1p1_to_p2 in crypto_sign/ed25519/ref/ge25519.c\n */\nfunction p1p1_to_p2(r, p, arrFactory) {\n    fe.mul(r.x, p.x, p.t, arrFactory);\n    fe.mul(r.y, p.y, p.z, arrFactory);\n    fe.mul(r.z, p.z, p.t, arrFactory);\n}\n/**\n * Analog of p1p1_to_p3 in crypto_sign/ed25519/ref/ge25519.c\n */\nfunction p1p1_to_p3(r, p, arrFactory) {\n    p1p1_to_p2(r, p, arrFactory);\n    fe.mul(r.t, p.x, p.y, arrFactory);\n}\n/**\n * Analog of ge25519_mixadd2 in crypto_sign/ed25519/ref/ge25519.c\n */\nfunction ge25519_mixadd2(r, q, arrFactory) {\n    var a = fe.make_fe25519(arrFactory);\n    var b = fe.make_fe25519(arrFactory);\n    var t1 = fe.make_fe25519(arrFactory);\n    var t2 = fe.make_fe25519(arrFactory);\n    var c = fe.make_fe25519(arrFactory);\n    var d = fe.make_fe25519(arrFactory);\n    var e = fe.make_fe25519(arrFactory);\n    var f = fe.make_fe25519(arrFactory);\n    var g = fe.make_fe25519(arrFactory);\n    var h = fe.make_fe25519(arrFactory);\n    var qt = fe.make_fe25519(arrFactory);\n    fe.mul(qt, q.x, q.y, arrFactory);\n    fe.sub(a, r.y, r.x, arrFactory); /* A = (Y1-X1)*(Y2-X2) */\n    fe.add(b, r.y, r.x); /* B = (Y1+X1)*(Y2+X2) */\n    fe.sub(t1, q.y, q.x, arrFactory);\n    fe.add(t2, q.y, q.x);\n    fe.mul(a, a, t1, arrFactory);\n    fe.mul(b, b, t2, arrFactory);\n    fe.sub(e, b, a, arrFactory); /* E = B-A */\n    fe.add(h, b, a); /* H = B+A */\n    fe.mul(c, r.t, qt, arrFactory); /* C = T1*k*T2 */\n    fe.mul(c, c, ge25519_ec2d, arrFactory);\n    fe.add(d, r.z, r.z); /*a, b, c, d, t D = Z1*2 */\n    fe.sub(f, d, c, arrFactory); /* F = D-C */\n    fe.add(g, d, c); /* G = D+C */\n    fe.mul(r.x, e, f, arrFactory);\n    fe.mul(r.y, h, g, arrFactory);\n    fe.mul(r.z, g, f, arrFactory);\n    fe.mul(r.t, e, h, arrFactory);\n    arrFactory.recycle(a, b, t1, t2, c, d, e, f, g, h, qt);\n}\n/**\n * Analog of add_p1p1 in crypto_sign/ed25519/ref/ge25519.c\n */\nfunction add_p1p1(r, p, q, arrFactory) {\n    var a = fe.make_fe25519(arrFactory);\n    var b = fe.make_fe25519(arrFactory);\n    var c = fe.make_fe25519(arrFactory);\n    var d = fe.make_fe25519(arrFactory);\n    var t = fe.make_fe25519(arrFactory);\n    fe.sub(a, p.y, p.x, arrFactory); /* A = (Y1-X1)*(Y2-X2) */\n    fe.sub(t, q.y, q.x, arrFactory);\n    fe.mul(a, a, t, arrFactory);\n    fe.add(b, p.x, p.y); /* B = (Y1+X1)*(Y2+X2) */\n    fe.add(t, q.x, q.y);\n    fe.mul(b, b, t, arrFactory);\n    fe.mul(c, p.t, q.t, arrFactory); /* C = T1*k*T2 */\n    fe.mul(c, c, ge25519_ec2d, arrFactory);\n    fe.mul(d, p.z, q.z, arrFactory); /* D = Z1*2*Z2 */\n    fe.add(d, d, d);\n    fe.sub(r.x, b, a, arrFactory); /* E = B-A */\n    fe.sub(r.t, d, c, arrFactory); /* F = D-C */\n    fe.add(r.z, d, c); /* G = D+C */\n    fe.add(r.y, b, a); /* H = B+A */\n    arrFactory.recycle(a, b, c, d, t);\n}\n/**\n * Analog of dbl_p1p1 in crypto_sign/ed25519/ref/ge25519.c\n * See http://www.hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#doubling-dbl-2008-hwcd\n */\nfunction dbl_p1p1(r, p, arrFactory) {\n    var a = fe.make_fe25519(arrFactory);\n    var b = fe.make_fe25519(arrFactory);\n    var c = fe.make_fe25519(arrFactory);\n    var d = fe.make_fe25519(arrFactory);\n    fe.square(a, p.x, arrFactory);\n    fe.square(b, p.y, arrFactory);\n    fe.square(c, p.z, arrFactory);\n    fe.add(c, c, c);\n    fe.neg(d, a, arrFactory);\n    fe.add(r.x, p.x, p.y);\n    fe.square(r.x, r.x, arrFactory);\n    fe.sub(r.x, r.x, a, arrFactory);\n    fe.sub(r.x, r.x, b, arrFactory);\n    fe.add(r.z, d, b);\n    fe.sub(r.t, r.z, c, arrFactory);\n    fe.sub(r.y, d, b, arrFactory);\n    arrFactory.recycle(a, b, c, d);\n}\n/**\n * Analog of add_p1p1 in crypto_sign/ed25519/ref/ge25519.c\n * Constant-time version of: if(b) r = p\n */\nfunction cmov_aff(r, p, b) {\n    fe.cmov(r.x, p.x, b);\n    fe.cmov(r.y, p.y, b);\n}\n/**\n * Analog of equal in crypto_sign/ed25519/ref/ge25519.c\n */\nfunction equal(b, c) {\n    return (b === c) ? 1 : 0;\n    //\treturn ((b ^ c) - 1) >>> 31; /* 1: yes; 0: no */\n}\n/**\n * Analog of negative in crypto_sign/ed25519/ref/ge25519.c\n */\nfunction negative(b) {\n    return (b < 0) ? 1 : 0;\n    //\treturn (b >>> 31); /* 1: yes; 0: no */\n}\n/**\n * Analog of choose_t in crypto_sign/ed25519/ref/ge25519.c\n */\nfunction choose_t(t, pos, b, arrFactory) {\n    /* constant time */\n    var v = fe.make_fe25519(arrFactory);\n    copy_ge25519_aff(t, ge25519_base_multiples_affine[5 * pos + 0]);\n    cmov_aff(t, ge25519_base_multiples_affine[5 * pos + 1], equal(b, 1) | equal(b, -1));\n    cmov_aff(t, ge25519_base_multiples_affine[5 * pos + 2], equal(b, 2) | equal(b, -2));\n    cmov_aff(t, ge25519_base_multiples_affine[5 * pos + 3], equal(b, 3) | equal(b, -3));\n    cmov_aff(t, ge25519_base_multiples_affine[5 * pos + 4], equal(b, -4));\n    fe.neg(v, t.x, arrFactory);\n    fe.cmov(t.x, v, negative(b));\n    arrFactory.recycle(v);\n}\n/**\n * Analog of setneutral in crypto_sign/ed25519/ref/ge25519.c\n */\nfunction setneutral(r) {\n    fe.setzero(r.x);\n    fe.setone(r.y);\n    fe.setone(r.z);\n    fe.setzero(r.t);\n}\nfunction unpackneg_vartime(r, p, arrFactory) {\n    var t = fe.make_fe25519(arrFactory);\n    var chk = fe.make_fe25519(arrFactory);\n    var num = fe.make_fe25519(arrFactory);\n    var den = fe.make_fe25519(arrFactory);\n    var den2 = fe.make_fe25519(arrFactory);\n    var den4 = fe.make_fe25519(arrFactory);\n    var den6 = fe.make_fe25519(arrFactory);\n    fe.setone(r.z);\n    var par = p[31] >>> 7;\n    fe.unpack(r.y, p);\n    fe.square(num, r.y, arrFactory); /* x = y^2 */\n    fe.mul(den, num, ge25519_ecd, arrFactory); /* den = dy^2 */\n    fe.sub(num, num, r.z, arrFactory); /* x = y^2-1 */\n    fe.add(den, r.z, den); /* den = dy^2+1 */\n    /* Computation of sqrt(num/den) */\n    /* 1.: computation of num^((p-5)/8)*den^((7p-35)/8) = (num*den^7)^((p-5)/8) */\n    fe.square(den2, den, arrFactory);\n    fe.square(den4, den2, arrFactory);\n    fe.mul(den6, den4, den2, arrFactory);\n    fe.mul(t, den6, num, arrFactory);\n    fe.mul(t, t, den, arrFactory);\n    fe.pow2523(t, t, arrFactory);\n    /* 2. computation of r->x = t * num * den^3 */\n    fe.mul(t, t, num, arrFactory);\n    fe.mul(t, t, den, arrFactory);\n    fe.mul(t, t, den, arrFactory);\n    fe.mul(r.x, t, den, arrFactory);\n    /* 3. Check whether sqrt computation gave correct result, multiply by sqrt(-1) if not: */\n    fe.square(chk, r.x, arrFactory);\n    fe.mul(chk, chk, den, arrFactory);\n    if (!fe.iseq_vartime(chk, num, arrFactory)) {\n        fe.mul(r.x, r.x, ge25519_sqrtm1, arrFactory);\n    }\n    /* 4. Now we have one of the two square roots, except if input was not a square */\n    fe.square(chk, r.x, arrFactory);\n    fe.mul(chk, chk, den, arrFactory);\n    if (!fe.iseq_vartime(chk, num, arrFactory)) {\n        return false;\n    }\n    /* 5. Choose the desired square root according to parity: */\n    if (fe.getparity(r.x, arrFactory) !== (1 - par)) {\n        fe.neg(r.x, r.x, arrFactory);\n    }\n    fe.mul(r.t, r.x, r.y, arrFactory);\n    arrFactory.recycle(t, chk, num, den, den2, den4, den6);\n    return true;\n}\nexports.unpackneg_vartime = unpackneg_vartime;\nfunction pack(r, p, arrFactory) {\n    var tx = fe.make_fe25519(arrFactory);\n    var ty = fe.make_fe25519(arrFactory);\n    var zi = fe.make_fe25519(arrFactory);\n    fe.invert(zi, p.z, arrFactory);\n    fe.mul(tx, p.x, zi, arrFactory);\n    fe.mul(ty, p.y, zi, arrFactory);\n    fe.pack(r, ty, arrFactory);\n    r[31] ^= fe.getparity(tx, arrFactory) << 7;\n    arrFactory.recycle(tx, ty, zi);\n}\nexports.pack = pack;\nfunction double_scalarmult_vartime(r, p1, s1, p2, s2, arF) {\n    var tp1p1 = make_ge25519_p1p1(arF);\n    var pre = new Array(16);\n    for (var i = 0; i < 16; i += 1) {\n        if ((i !== 1) || (i !== 4)) {\n            pre[i] = make_ge25519_p3(arF);\n        }\n    }\n    var b = arF.getUint8Array(127);\n    /* precomputation                                                        s2 s1 */\n    setneutral(pre[0]); /* 00 00 */\n    pre[1] = p1; /* 00 01 */\n    dbl_p1p1(tp1p1, p1, arF);\n    p1p1_to_p3(pre[2], tp1p1, arF); /* 00 10 */\n    add_p1p1(tp1p1, pre[1], pre[2], arF);\n    p1p1_to_p3(pre[3], tp1p1, arF); /* 00 11 */\n    pre[4] = p2; /* 01 00 */\n    add_p1p1(tp1p1, pre[1], pre[4], arF);\n    p1p1_to_p3(pre[5], tp1p1, arF); /* 01 01 */\n    add_p1p1(tp1p1, pre[2], pre[4], arF);\n    p1p1_to_p3(pre[6], tp1p1, arF); /* 01 10 */\n    add_p1p1(tp1p1, pre[3], pre[4], arF);\n    p1p1_to_p3(pre[7], tp1p1, arF); /* 01 11 */\n    dbl_p1p1(tp1p1, p2, arF);\n    p1p1_to_p3(pre[8], tp1p1, arF); /* 10 00 */\n    add_p1p1(tp1p1, pre[1], pre[8], arF);\n    p1p1_to_p3(pre[9], tp1p1, arF); /* 10 01 */\n    dbl_p1p1(tp1p1, pre[5], arF);\n    p1p1_to_p3(pre[10], tp1p1, arF); /* 10 10 */\n    add_p1p1(tp1p1, pre[3], pre[8], arF);\n    p1p1_to_p3(pre[11], tp1p1, arF); /* 10 11 */\n    add_p1p1(tp1p1, pre[4], pre[8], arF);\n    p1p1_to_p3(pre[12], tp1p1, arF); /* 11 00 */\n    add_p1p1(tp1p1, pre[1], pre[12], arF);\n    p1p1_to_p3(pre[13], tp1p1, arF); /* 11 01 */\n    add_p1p1(tp1p1, pre[2], pre[12], arF);\n    p1p1_to_p3(pre[14], tp1p1, arF); /* 11 10 */\n    add_p1p1(tp1p1, pre[3], pre[12], arF);\n    p1p1_to_p3(pre[15], tp1p1, arF); /* 11 11 */\n    sc.interleave2(b, s1, s2);\n    /* scalar multiplication */\n    copy_ge25519_p3(r, pre[b[126]]);\n    for (var i = 125; i >= 0; i -= 1) {\n        dbl_p1p1(tp1p1, r, arF);\n        p1p1_to_p2(r, tp1p1, arF);\n        dbl_p1p1(tp1p1, r, arF);\n        if (b[i] !== 0) {\n            p1p1_to_p3(r, tp1p1, arF);\n            add_p1p1(tp1p1, r, pre[b[i]], arF);\n        }\n        if (i !== 0) {\n            p1p1_to_p2(r, tp1p1, arF);\n        }\n        else {\n            p1p1_to_p3(r, tp1p1, arF);\n        }\n    }\n    recycle_ge25519(arF, tp1p1);\n    for (var i = 0; i < 16; i += 1) {\n        if ((i !== 1) && (i !== 4)) {\n            recycle_ge25519(arF, pre[i]);\n        }\n    }\n    arF.recycle(b);\n}\nexports.double_scalarmult_vartime = double_scalarmult_vartime;\nfunction scalarmult_base(r, s, arrFactory) {\n    var b = new Int8Array(85);\n    var t = ge_base.make_ge25519_aff(arrFactory);\n    sc.window3(b, s);\n    choose_t(r, 0, b[0], arrFactory);\n    fe.setone(r.z);\n    fe.mul(r.t, r.x, r.y, arrFactory);\n    for (var i = 1; i < 85; i += 1) {\n        choose_t(t, i, b[i], arrFactory);\n        ge25519_mixadd2(r, t, arrFactory);\n    }\n    recycle_ge25519_aff(arrFactory, t);\n}\nexports.scalarmult_base = scalarmult_base;\nObject.freeze(exports);\n","/* Copyright(c) 2015 3NSoft Inc.\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, you can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n/**\n * This whole file is an analogy of crypto_sign/ed25519/ref/ge25519_base.data\n * producing one big array with points.\n */\nvar fe = require('./fe25519');\nvar arrays = require('../util/arrays');\nfunction make_ge25519_aff(arrFactory) {\n    return {\n        x: fe.make_fe25519(arrFactory),\n        y: fe.make_fe25519(arrFactory)\n    };\n}\nexports.make_ge25519_aff = make_ge25519_aff;\nexports.base_multiples_affine = new Array(425);\n(function () {\n    var init_data = [\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x1a, 0xd5, 0x25, 0x8f, 0x60, 0x2d, 0x56, 0xc9, 0xb2, 0xa7, 0x25, 0x95, 0x60, 0xc7, 0x2c, 0x69, 0x5c, 0xdc, 0xd6, 0xfd, 0x31, 0xe2, 0xa4, 0xc0, 0xfe, 0x53, 0x6e, 0xcd, 0xd3, 0x36, 0x69, 0x21],\n            [0x58, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66]],\n        [[0x0e, 0xce, 0x43, 0x28, 0x4e, 0xa1, 0xc5, 0x83, 0x5f, 0xa4, 0xd7, 0x15, 0x45, 0x8e, 0x0d, 0x08, 0xac, 0xe7, 0x33, 0x18, 0x7d, 0x3b, 0x04, 0x3d, 0x6c, 0x04, 0x5a, 0x9f, 0x4c, 0x38, 0xab, 0x36],\n            [0xc9, 0xa3, 0xf8, 0x6a, 0xae, 0x46, 0x5f, 0x0e, 0x56, 0x51, 0x38, 0x64, 0x51, 0x0f, 0x39, 0x97, 0x56, 0x1f, 0xa2, 0xc9, 0xe8, 0x5e, 0xa2, 0x1d, 0xc2, 0x29, 0x23, 0x09, 0xf3, 0xcd, 0x60, 0x22]],\n        [[0x5c, 0xe2, 0xf8, 0xd3, 0x5f, 0x48, 0x62, 0xac, 0x86, 0x48, 0x62, 0x81, 0x19, 0x98, 0x43, 0x63, 0x3a, 0xc8, 0xda, 0x3e, 0x74, 0xae, 0xf4, 0x1f, 0x49, 0x8f, 0x92, 0x22, 0x4a, 0x9c, 0xae, 0x67],\n            [0xd4, 0xb4, 0xf5, 0x78, 0x48, 0x68, 0xc3, 0x02, 0x04, 0x03, 0x24, 0x67, 0x17, 0xec, 0x16, 0x9f, 0xf7, 0x9e, 0x26, 0x60, 0x8e, 0xa1, 0x26, 0xa1, 0xab, 0x69, 0xee, 0x77, 0xd1, 0xb1, 0x67, 0x12]],\n        [[0x70, 0xf8, 0xc9, 0xc4, 0x57, 0xa6, 0x3a, 0x49, 0x47, 0x15, 0xce, 0x93, 0xc1, 0x9e, 0x73, 0x1a, 0xf9, 0x20, 0x35, 0x7a, 0xb8, 0xd4, 0x25, 0x83, 0x46, 0xf1, 0xcf, 0x56, 0xdb, 0xa8, 0x3d, 0x20],\n            [0x2f, 0x11, 0x32, 0xca, 0x61, 0xab, 0x38, 0xdf, 0xf0, 0x0f, 0x2f, 0xea, 0x32, 0x28, 0xf2, 0x4c, 0x6c, 0x71, 0xd5, 0x80, 0x85, 0xb8, 0x0e, 0x47, 0xe1, 0x95, 0x15, 0xcb, 0x27, 0xe8, 0xd0, 0x47]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xc8, 0x84, 0xa5, 0x08, 0xbc, 0xfd, 0x87, 0x3b, 0x99, 0x8b, 0x69, 0x80, 0x7b, 0xc6, 0x3a, 0xeb, 0x93, 0xcf, 0x4e, 0xf8, 0x5c, 0x2d, 0x86, 0x42, 0xb6, 0x71, 0xd7, 0x97, 0x5f, 0xe1, 0x42, 0x67],\n            [0xb4, 0xb9, 0x37, 0xfc, 0xa9, 0x5b, 0x2f, 0x1e, 0x93, 0xe4, 0x1e, 0x62, 0xfc, 0x3c, 0x78, 0x81, 0x8f, 0xf3, 0x8a, 0x66, 0x09, 0x6f, 0xad, 0x6e, 0x79, 0x73, 0xe5, 0xc9, 0x00, 0x06, 0xd3, 0x21]],\n        [[0xf8, 0xf9, 0x28, 0x6c, 0x6d, 0x59, 0xb2, 0x59, 0x74, 0x23, 0xbf, 0xe7, 0x33, 0x8d, 0x57, 0x09, 0x91, 0x9c, 0x24, 0x08, 0x15, 0x2b, 0xe2, 0xb8, 0xee, 0x3a, 0xe5, 0x27, 0x06, 0x86, 0xa4, 0x23],\n            [0xeb, 0x27, 0x67, 0xc1, 0x37, 0xab, 0x7a, 0xd8, 0x27, 0x9c, 0x07, 0x8e, 0xff, 0x11, 0x6a, 0xb0, 0x78, 0x6e, 0xad, 0x3a, 0x2e, 0x0f, 0x98, 0x9f, 0x72, 0xc3, 0x7f, 0x82, 0xf2, 0x96, 0x96, 0x70]],\n        [[0x81, 0x6b, 0x88, 0xe8, 0x1e, 0xc7, 0x77, 0x96, 0x0e, 0xa1, 0xa9, 0x52, 0xe0, 0xd8, 0x0e, 0x61, 0x9e, 0x79, 0x2d, 0x95, 0x9c, 0x8d, 0x96, 0xe0, 0x06, 0x40, 0x5d, 0x87, 0x28, 0x5f, 0x98, 0x70],\n            [0xf1, 0x79, 0x7b, 0xed, 0x4f, 0x44, 0xb2, 0xe7, 0x08, 0x0d, 0xc2, 0x08, 0x12, 0xd2, 0x9f, 0xdf, 0xcd, 0x93, 0x20, 0x8a, 0xcf, 0x33, 0xca, 0x6d, 0x89, 0xb9, 0x77, 0xc8, 0x93, 0x1b, 0x4e, 0x60]],\n        [[0x26, 0x4f, 0x7e, 0x97, 0xf6, 0x40, 0xdd, 0x4f, 0xfc, 0x52, 0x78, 0xf9, 0x90, 0x31, 0x03, 0xe6, 0x7d, 0x56, 0x39, 0x0b, 0x1d, 0x56, 0x82, 0x85, 0xf9, 0x1a, 0x42, 0x17, 0x69, 0x6c, 0xcf, 0x39],\n            [0x69, 0xd2, 0x06, 0x3a, 0x4f, 0x39, 0x2d, 0xf9, 0x38, 0x40, 0x8c, 0x4c, 0xe7, 0x05, 0x12, 0xb4, 0x78, 0x8b, 0xf8, 0xc0, 0xec, 0x93, 0xde, 0x7a, 0x6b, 0xce, 0x2c, 0xe1, 0x0e, 0xa9, 0x34, 0x44]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x0b, 0xa4, 0x3c, 0xb0, 0x0f, 0x7a, 0x51, 0xf1, 0x78, 0xd6, 0xd9, 0x6a, 0xfd, 0x46, 0xe8, 0xb8, 0xa8, 0x79, 0x1d, 0x87, 0xf9, 0x90, 0xf2, 0x9c, 0x13, 0x29, 0xf8, 0x0b, 0x20, 0x64, 0xfa, 0x05],\n            [0x26, 0x09, 0xda, 0x17, 0xaf, 0x95, 0xd6, 0xfb, 0x6a, 0x19, 0x0d, 0x6e, 0x5e, 0x12, 0xf1, 0x99, 0x4c, 0xaa, 0xa8, 0x6f, 0x79, 0x86, 0xf4, 0x72, 0x28, 0x00, 0x26, 0xf9, 0xea, 0x9e, 0x19, 0x3d]],\n        [[0x87, 0xdd, 0xcf, 0xf0, 0x5b, 0x49, 0xa2, 0x5d, 0x40, 0x7a, 0x23, 0x26, 0xa4, 0x7a, 0x83, 0x8a, 0xb7, 0x8b, 0xd2, 0x1a, 0xbf, 0xea, 0x02, 0x24, 0x08, 0x5f, 0x7b, 0xa9, 0xb1, 0xbe, 0x9d, 0x37],\n            [0xfc, 0x86, 0x4b, 0x08, 0xee, 0xe7, 0xa0, 0xfd, 0x21, 0x45, 0x09, 0x34, 0xc1, 0x61, 0x32, 0x23, 0xfc, 0x9b, 0x55, 0x48, 0x53, 0x99, 0xf7, 0x63, 0xd0, 0x99, 0xce, 0x01, 0xe0, 0x9f, 0xeb, 0x28]],\n        [[0x47, 0xfc, 0xab, 0x5a, 0x17, 0xf0, 0x85, 0x56, 0x3a, 0x30, 0x86, 0x20, 0x28, 0x4b, 0x8e, 0x44, 0x74, 0x3a, 0x6e, 0x02, 0xf1, 0x32, 0x8f, 0x9f, 0x3f, 0x08, 0x35, 0xe9, 0xca, 0x16, 0x5f, 0x6e],\n            [0x1c, 0x59, 0x1c, 0x65, 0x5d, 0x34, 0xa4, 0x09, 0xcd, 0x13, 0x9c, 0x70, 0x7d, 0xb1, 0x2a, 0xc5, 0x88, 0xaf, 0x0b, 0x60, 0xc7, 0x9f, 0x34, 0x8d, 0xd6, 0xb7, 0x7f, 0xea, 0x78, 0x65, 0x8d, 0x77]],\n        [[0x56, 0xa5, 0xc2, 0x0c, 0xdd, 0xbc, 0xb8, 0x20, 0x6d, 0x57, 0x61, 0xb5, 0xfb, 0x78, 0xb5, 0xd4, 0x49, 0x54, 0x90, 0x26, 0xc1, 0xcb, 0xe9, 0xe6, 0xbf, 0xec, 0x1d, 0x4e, 0xed, 0x07, 0x7e, 0x5e],\n            [0xc7, 0xf6, 0x6c, 0x56, 0x31, 0x20, 0x14, 0x0e, 0xa8, 0xd9, 0x27, 0xc1, 0x9a, 0x3d, 0x1b, 0x7d, 0x0e, 0x26, 0xd3, 0x81, 0xaa, 0xeb, 0xf5, 0x6b, 0x79, 0x02, 0xf1, 0x51, 0x5c, 0x75, 0x55, 0x0f]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x0a, 0x34, 0xcd, 0x82, 0x3c, 0x33, 0x09, 0x54, 0xd2, 0x61, 0x39, 0x30, 0x9b, 0xfd, 0xef, 0x21, 0x26, 0xd4, 0x70, 0xfa, 0xee, 0xf9, 0x31, 0x33, 0x73, 0x84, 0xd0, 0xb3, 0x81, 0xbf, 0xec, 0x2e],\n            [0xe8, 0x93, 0x8b, 0x00, 0x64, 0xf7, 0x9c, 0xb8, 0x74, 0xe0, 0xe6, 0x49, 0x48, 0x4d, 0x4d, 0x48, 0xb6, 0x19, 0xa1, 0x40, 0xb7, 0xd9, 0x32, 0x41, 0x7c, 0x82, 0x37, 0xa1, 0x2d, 0xdc, 0xd2, 0x54]],\n        [[0x68, 0x2b, 0x4a, 0x5b, 0xd5, 0xc7, 0x51, 0x91, 0x1d, 0xe1, 0x2a, 0x4b, 0xc4, 0x47, 0xf1, 0xbc, 0x7a, 0xb3, 0xcb, 0xc8, 0xb6, 0x7c, 0xac, 0x90, 0x05, 0xfd, 0xf3, 0xf9, 0x52, 0x3a, 0x11, 0x6b],\n            [0x3d, 0xc1, 0x27, 0xf3, 0x59, 0x43, 0x95, 0x90, 0xc5, 0x96, 0x79, 0xf5, 0xf4, 0x95, 0x65, 0x29, 0x06, 0x9c, 0x51, 0x05, 0x18, 0xda, 0xb8, 0x2e, 0x79, 0x7e, 0x69, 0x59, 0x71, 0x01, 0xeb, 0x1a]],\n        [[0x15, 0x06, 0x49, 0xb6, 0x8a, 0x3c, 0xea, 0x2f, 0x34, 0x20, 0x14, 0xc3, 0xaa, 0xd6, 0xaf, 0x2c, 0x3e, 0xbd, 0x65, 0x20, 0xe2, 0x4d, 0x4b, 0x3b, 0xeb, 0x9f, 0x4a, 0xc3, 0xad, 0xa4, 0x3b, 0x60],\n            [0xbc, 0x58, 0xe6, 0xc0, 0x95, 0x2a, 0x2a, 0x81, 0x9a, 0x7a, 0xf3, 0xd2, 0x06, 0xbe, 0x48, 0xbc, 0x0c, 0xc5, 0x46, 0xe0, 0x6a, 0xd4, 0xac, 0x0f, 0xd9, 0xcc, 0x82, 0x34, 0x2c, 0xaf, 0xdb, 0x1f]],\n        [[0xf7, 0x17, 0x13, 0xbd, 0xfb, 0xbc, 0xd2, 0xec, 0x45, 0xb3, 0x15, 0x31, 0xe9, 0xaf, 0x82, 0x84, 0x3d, 0x28, 0xc6, 0xfc, 0x11, 0xf5, 0x41, 0xb5, 0x8b, 0xd3, 0x12, 0x76, 0x52, 0xe7, 0x1a, 0x3c],\n            [0x4e, 0x36, 0x11, 0x07, 0xa2, 0x15, 0x20, 0x51, 0xc4, 0x2a, 0xc3, 0x62, 0x8b, 0x5e, 0x7f, 0xa6, 0x0f, 0xf9, 0x45, 0x85, 0x6c, 0x11, 0x86, 0xb7, 0x7e, 0xe5, 0xd7, 0xf9, 0xc3, 0x91, 0x1c, 0x05]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xea, 0xd6, 0xde, 0x29, 0x3a, 0x00, 0xb9, 0x02, 0x59, 0xcb, 0x26, 0xc4, 0xba, 0x99, 0xb1, 0x97, 0x2f, 0x8e, 0x00, 0x92, 0x26, 0x4f, 0x52, 0xeb, 0x47, 0x1b, 0x89, 0x8b, 0x24, 0xc0, 0x13, 0x7d],\n            [0xd5, 0x20, 0x5b, 0x80, 0xa6, 0x80, 0x20, 0x95, 0xc3, 0xe9, 0x9f, 0x8e, 0x87, 0x9e, 0x1e, 0x9e, 0x7a, 0xc7, 0xcc, 0x75, 0x6c, 0xa5, 0xf1, 0x91, 0x1a, 0xa8, 0x01, 0x2c, 0xab, 0x76, 0xa9, 0x59]],\n        [[0xde, 0xc9, 0xb1, 0x31, 0x10, 0x16, 0xaa, 0x35, 0x14, 0x6a, 0xd4, 0xb5, 0x34, 0x82, 0x71, 0xd2, 0x4a, 0x5d, 0x9a, 0x1f, 0x53, 0x26, 0x3c, 0xe5, 0x8e, 0x8d, 0x33, 0x7f, 0xff, 0xa9, 0xd5, 0x17],\n            [0x89, 0xaf, 0xf6, 0xa4, 0x64, 0xd5, 0x10, 0xe0, 0x1d, 0xad, 0xef, 0x44, 0xbd, 0xda, 0x83, 0xac, 0x7a, 0xa8, 0xf0, 0x1c, 0x07, 0xf9, 0xc3, 0x43, 0x6c, 0x3f, 0xb7, 0xd3, 0x87, 0x22, 0x02, 0x73]],\n        [[0x64, 0x1d, 0x49, 0x13, 0x2f, 0x71, 0xec, 0x69, 0x87, 0xd0, 0x42, 0xee, 0x13, 0xec, 0xe3, 0xed, 0x56, 0x7b, 0xbf, 0xbd, 0x8c, 0x2f, 0x7d, 0x7b, 0x9d, 0x28, 0xec, 0x8e, 0x76, 0x2f, 0x6f, 0x08],\n            [0x22, 0xf5, 0x5f, 0x4d, 0x15, 0xef, 0xfc, 0x4e, 0x57, 0x03, 0x36, 0x89, 0xf0, 0xeb, 0x5b, 0x91, 0xd6, 0xe2, 0xca, 0x01, 0xa5, 0xee, 0x52, 0xec, 0xa0, 0x3c, 0x8f, 0x33, 0x90, 0x5a, 0x94, 0x72]],\n        [[0x8a, 0x4b, 0xe7, 0x38, 0xbc, 0xda, 0xc2, 0xb0, 0x85, 0xe1, 0x4a, 0xfe, 0x2d, 0x44, 0x84, 0xcb, 0x20, 0x6b, 0x2d, 0xbf, 0x11, 0x9c, 0xd7, 0xbe, 0xd3, 0x3e, 0x5f, 0xbf, 0x68, 0xbc, 0xa8, 0x07],\n            [0x01, 0x89, 0x28, 0x22, 0x6a, 0x78, 0xaa, 0x29, 0x03, 0xc8, 0x74, 0x95, 0x03, 0x3e, 0xdc, 0xbd, 0x07, 0x13, 0xa8, 0xa2, 0x20, 0x2d, 0xb3, 0x18, 0x70, 0x42, 0xfd, 0x7a, 0xc4, 0xd7, 0x49, 0x72]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x02, 0xff, 0x32, 0x2b, 0x5c, 0x93, 0x54, 0x32, 0xe8, 0x57, 0x54, 0x1a, 0x8b, 0x33, 0x60, 0x65, 0xd3, 0x67, 0xa4, 0xc1, 0x26, 0xc4, 0xa4, 0x34, 0x1f, 0x9b, 0xa7, 0xa9, 0xf4, 0xd9, 0x4f, 0x5b],\n            [0x46, 0x8d, 0xb0, 0x33, 0x54, 0x26, 0x5b, 0x68, 0xdf, 0xbb, 0xc5, 0xec, 0xc2, 0xf9, 0x3c, 0x5a, 0x37, 0xc1, 0x8e, 0x27, 0x47, 0xaa, 0x49, 0x5a, 0xf8, 0xfb, 0x68, 0x04, 0x23, 0xd1, 0xeb, 0x40]],\n        [[0x65, 0xa5, 0x11, 0x84, 0x8a, 0x67, 0x9d, 0x9e, 0xd1, 0x44, 0x68, 0x7a, 0x34, 0xe1, 0x9f, 0xa3, 0x54, 0xcd, 0x07, 0xca, 0x79, 0x1f, 0x54, 0x2f, 0x13, 0x70, 0x4e, 0xee, 0xa2, 0xfa, 0xe7, 0x5d],\n            [0x36, 0xec, 0x54, 0xf8, 0xce, 0xe4, 0x85, 0xdf, 0xf6, 0x6f, 0x1d, 0x90, 0x08, 0xbc, 0xe8, 0xc0, 0x92, 0x2d, 0x43, 0x6b, 0x92, 0xa9, 0x8e, 0xab, 0x0a, 0x2e, 0x1c, 0x1e, 0x64, 0x23, 0x9f, 0x2c]],\n        [[0xa7, 0xd6, 0x2e, 0xd5, 0xcc, 0xd4, 0xcb, 0x5a, 0x3b, 0xa7, 0xf9, 0x46, 0x03, 0x1d, 0xad, 0x2b, 0x34, 0x31, 0x90, 0x00, 0x46, 0x08, 0x82, 0x14, 0xc4, 0xe0, 0x9c, 0xf0, 0xe3, 0x55, 0x43, 0x31],\n            [0x60, 0xd6, 0xdd, 0x78, 0xe6, 0xd4, 0x22, 0x42, 0x1f, 0x00, 0xf9, 0xb1, 0x6a, 0x63, 0xe2, 0x92, 0x59, 0xd1, 0x1a, 0xb7, 0x00, 0x54, 0x29, 0xc9, 0xc1, 0xf6, 0x6f, 0x7a, 0xc5, 0x3c, 0x5f, 0x65]],\n        [[0x27, 0x4f, 0xd0, 0x72, 0xb1, 0x11, 0x14, 0x27, 0x15, 0x94, 0x48, 0x81, 0x7e, 0x74, 0xd8, 0x32, 0xd5, 0xd1, 0x11, 0x28, 0x60, 0x63, 0x36, 0x32, 0x37, 0xb5, 0x13, 0x1c, 0xa0, 0x37, 0xe3, 0x74],\n            [0xf1, 0x25, 0x4e, 0x11, 0x96, 0x67, 0xe6, 0x1c, 0xc2, 0xb2, 0x53, 0xe2, 0xda, 0x85, 0xee, 0xb2, 0x9f, 0x59, 0xf3, 0xba, 0xbd, 0xfa, 0xcf, 0x6e, 0xf9, 0xda, 0xa4, 0xb3, 0x02, 0x8f, 0x64, 0x08]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x34, 0x94, 0xf2, 0x64, 0x54, 0x47, 0x37, 0x07, 0x40, 0x8a, 0x20, 0xba, 0x4a, 0x55, 0xd7, 0x3f, 0x47, 0xba, 0x25, 0x23, 0x14, 0xb0, 0x2c, 0xe8, 0x55, 0xa8, 0xa6, 0xef, 0x51, 0xbd, 0x6f, 0x6a],\n            [0x71, 0xd6, 0x16, 0x76, 0xb2, 0x06, 0xea, 0x79, 0xf5, 0xc4, 0xc3, 0x52, 0x7e, 0x61, 0xd1, 0xe1, 0xad, 0x70, 0x78, 0x1d, 0x16, 0x11, 0xf8, 0x7c, 0x2b, 0xfc, 0x55, 0x9f, 0x52, 0xf8, 0xf5, 0x16]],\n        [[0x34, 0x96, 0x9a, 0xf6, 0xc5, 0xe0, 0x14, 0x03, 0x24, 0x0e, 0x4c, 0xad, 0x9e, 0x9a, 0x70, 0x23, 0x96, 0xb2, 0xf1, 0x2e, 0x9d, 0xc3, 0x32, 0x9b, 0x54, 0xa5, 0x73, 0xde, 0x88, 0xb1, 0x3e, 0x24],\n            [0xf6, 0xe2, 0x4c, 0x1f, 0x5b, 0xb2, 0xaf, 0x82, 0xa5, 0xcf, 0x81, 0x10, 0x04, 0xef, 0xdb, 0xa2, 0xcc, 0x24, 0xb2, 0x7e, 0x0b, 0x7a, 0xeb, 0x01, 0xd8, 0x52, 0xf4, 0x51, 0x89, 0x29, 0x79, 0x37]],\n        [[0x74, 0xde, 0x12, 0xf3, 0x68, 0xb7, 0x66, 0xc3, 0xee, 0x68, 0xdc, 0x81, 0xb5, 0x55, 0x99, 0xab, 0xd9, 0x28, 0x63, 0x6d, 0x8b, 0x40, 0x69, 0x75, 0x6c, 0xcd, 0x5c, 0x2a, 0x7e, 0x32, 0x7b, 0x29],\n            [0x02, 0xcc, 0x22, 0x74, 0x4d, 0x19, 0x07, 0xc0, 0xda, 0xb5, 0x76, 0x51, 0x2a, 0xaa, 0xa6, 0x0a, 0x5f, 0x26, 0xd4, 0xbc, 0xaf, 0x48, 0x88, 0x7f, 0x02, 0xbc, 0xf2, 0xe1, 0xcf, 0xe9, 0xdd, 0x15]],\n        [[0xed, 0xb5, 0x9a, 0x8c, 0x9a, 0xdd, 0x27, 0xf4, 0x7f, 0x47, 0xd9, 0x52, 0xa7, 0xcd, 0x65, 0xa5, 0x31, 0x22, 0xed, 0xa6, 0x63, 0x5b, 0x80, 0x4a, 0xad, 0x4d, 0xed, 0xbf, 0xee, 0x49, 0xb3, 0x06],\n            [0xf8, 0x64, 0x8b, 0x60, 0x90, 0xe9, 0xde, 0x44, 0x77, 0xb9, 0x07, 0x36, 0x32, 0xc2, 0x50, 0xf5, 0x65, 0xdf, 0x48, 0x4c, 0x37, 0xaa, 0x68, 0xab, 0x9a, 0x1f, 0x3e, 0xff, 0x89, 0x92, 0xa0, 0x07]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x7d, 0x4f, 0x9c, 0x19, 0xc0, 0x4a, 0x31, 0xec, 0xf9, 0xaa, 0xeb, 0xb2, 0x16, 0x9c, 0xa3, 0x66, 0x5f, 0xd1, 0xd4, 0xed, 0xb8, 0x92, 0x1c, 0xab, 0xda, 0xea, 0xd9, 0x57, 0xdf, 0x4c, 0x2a, 0x48],\n            [0x4b, 0xb0, 0x4e, 0x6e, 0x11, 0x3b, 0x51, 0xbd, 0x6a, 0xfd, 0xe4, 0x25, 0xa5, 0x5f, 0x11, 0x3f, 0x98, 0x92, 0x51, 0x14, 0xc6, 0x5f, 0x3c, 0x0b, 0xa8, 0xf7, 0xc2, 0x81, 0x43, 0xde, 0x91, 0x73]],\n        [[0x3c, 0x8f, 0x9f, 0x33, 0x2a, 0x1f, 0x43, 0x33, 0x8f, 0x68, 0xff, 0x1f, 0x3d, 0x73, 0x6b, 0xbf, 0x68, 0xcc, 0x7d, 0x13, 0x6c, 0x24, 0x4b, 0xcc, 0x4d, 0x24, 0x0d, 0xfe, 0xde, 0x86, 0xad, 0x3b],\n            [0x79, 0x51, 0x81, 0x01, 0xdc, 0x73, 0x53, 0xe0, 0x6e, 0x9b, 0xea, 0x68, 0x3f, 0x5c, 0x14, 0x84, 0x53, 0x8d, 0x4b, 0xc0, 0x9f, 0x9f, 0x89, 0x2b, 0x8c, 0xba, 0x86, 0xfa, 0xf2, 0xcd, 0xe3, 0x2d]],\n        [[0x06, 0xf9, 0x29, 0x5a, 0xdb, 0x3d, 0x84, 0x52, 0xab, 0xcc, 0x6b, 0x60, 0x9d, 0xb7, 0x4a, 0x0e, 0x36, 0x63, 0x91, 0xad, 0xa0, 0x95, 0xb0, 0x97, 0x89, 0x4e, 0xcf, 0x7d, 0x3c, 0xe5, 0x7c, 0x28],\n            [0x2e, 0x69, 0x98, 0xfd, 0xc6, 0xbd, 0xcc, 0xca, 0xdf, 0x9a, 0x44, 0x7e, 0x9d, 0xca, 0x89, 0x6d, 0xbf, 0x27, 0xc2, 0xf8, 0xcd, 0x46, 0x00, 0x2b, 0xb5, 0x58, 0x4e, 0xb7, 0x89, 0x09, 0xe9, 0x2d]],\n        [[0x54, 0xbe, 0x75, 0xcb, 0x05, 0xb0, 0x54, 0xb7, 0xe7, 0x26, 0x86, 0x4a, 0xfc, 0x19, 0xcf, 0x27, 0x46, 0xd4, 0x22, 0x96, 0x5a, 0x11, 0xe8, 0xd5, 0x1b, 0xed, 0x71, 0xc5, 0x5d, 0xc8, 0xaf, 0x45],\n            [0x40, 0x7b, 0x77, 0x57, 0x49, 0x9e, 0x80, 0x39, 0x23, 0xee, 0x81, 0x0b, 0x22, 0xcf, 0xdb, 0x7a, 0x2f, 0x14, 0xb8, 0x57, 0x8f, 0xa1, 0x39, 0x1e, 0x77, 0xfc, 0x0b, 0xa6, 0xbf, 0x8a, 0x0c, 0x6c]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x77, 0x3a, 0xd4, 0xd8, 0x27, 0xcf, 0xe8, 0xa1, 0x72, 0x9d, 0xca, 0xdd, 0x0d, 0x96, 0xda, 0x79, 0xed, 0x56, 0x42, 0x15, 0x60, 0xc7, 0x1c, 0x6b, 0x26, 0x30, 0xf6, 0x6a, 0x95, 0x67, 0xf3, 0x0a],\n            [0xc5, 0x08, 0xa4, 0x2b, 0x2f, 0xbd, 0x31, 0x81, 0x2a, 0xa6, 0xb6, 0xe4, 0x00, 0x91, 0xda, 0x3d, 0xb2, 0xb0, 0x96, 0xce, 0x8a, 0xd2, 0x8d, 0x70, 0xb3, 0xd3, 0x34, 0x01, 0x90, 0x8d, 0x10, 0x21]],\n        [[0x33, 0x0d, 0xe7, 0xba, 0x4f, 0x07, 0xdf, 0x8d, 0xea, 0x7d, 0xa0, 0xc5, 0xd6, 0xb1, 0xb0, 0xe5, 0x57, 0x1b, 0x5b, 0xf5, 0x45, 0x13, 0x14, 0x64, 0x5a, 0xeb, 0x5c, 0xfc, 0x54, 0x01, 0x76, 0x2b],\n            [0x02, 0x0c, 0xc2, 0xaf, 0x96, 0x36, 0xfe, 0x4a, 0xe2, 0x54, 0x20, 0x6a, 0xeb, 0xb2, 0x9f, 0x62, 0xd7, 0xce, 0xa2, 0x3f, 0x20, 0x11, 0x34, 0x37, 0xe0, 0x42, 0xed, 0x6f, 0xf9, 0x1a, 0xc8, 0x7d]],\n        [[0xd8, 0xb9, 0x11, 0xe8, 0x36, 0x3f, 0x42, 0xc1, 0xca, 0xdc, 0xd3, 0xf1, 0xc8, 0x23, 0x3d, 0x4f, 0x51, 0x7b, 0x9d, 0x8d, 0xd8, 0xe4, 0xa0, 0xaa, 0xf3, 0x04, 0xd6, 0x11, 0x93, 0xc8, 0x35, 0x45],\n            [0x61, 0x36, 0xd6, 0x08, 0x90, 0xbf, 0xa7, 0x7a, 0x97, 0x6c, 0x0f, 0x84, 0xd5, 0x33, 0x2d, 0x37, 0xc9, 0x6a, 0x80, 0x90, 0x3d, 0x0a, 0xa2, 0xaa, 0xe1, 0xb8, 0x84, 0xba, 0x61, 0x36, 0xdd, 0x69]],\n        [[0x6b, 0xdb, 0x5b, 0x9c, 0xc6, 0x92, 0xbc, 0x23, 0xaf, 0xc5, 0xb8, 0x75, 0xf8, 0x42, 0xfa, 0xd6, 0xb6, 0x84, 0x94, 0x63, 0x98, 0x93, 0x48, 0x78, 0x38, 0xcd, 0xbb, 0x18, 0x34, 0xc3, 0xdb, 0x67],\n            [0x96, 0xf3, 0x3a, 0x09, 0x56, 0xb0, 0x6f, 0x7c, 0x51, 0x1e, 0x1b, 0x39, 0x48, 0xea, 0xc9, 0x0c, 0x25, 0xa2, 0x7a, 0xca, 0xe7, 0x92, 0xfc, 0x59, 0x30, 0xa3, 0x89, 0x85, 0xdf, 0x6f, 0x43, 0x38]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x79, 0x84, 0x44, 0x19, 0xbd, 0xe9, 0x54, 0xc4, 0xc0, 0x6e, 0x2a, 0xa8, 0xa8, 0x9b, 0x43, 0xd5, 0x71, 0x22, 0x5f, 0xdc, 0x01, 0xfa, 0xdf, 0xb3, 0xb8, 0x47, 0x4b, 0x0a, 0xa5, 0x44, 0xea, 0x29],\n            [0x05, 0x90, 0x50, 0xaf, 0x63, 0x5f, 0x9d, 0x9e, 0xe1, 0x9d, 0x38, 0x97, 0x1f, 0x6c, 0xac, 0x30, 0x46, 0xb2, 0x6a, 0x19, 0xd1, 0x4b, 0xdb, 0xbb, 0x8c, 0xda, 0x2e, 0xab, 0xc8, 0x5a, 0x77, 0x6c]],\n        [[0x2b, 0xbe, 0xaf, 0xa1, 0x6d, 0x2f, 0x0b, 0xb1, 0x8f, 0xe3, 0xe0, 0x38, 0xcd, 0x0b, 0x41, 0x1b, 0x4a, 0x15, 0x07, 0xf3, 0x6f, 0xdc, 0xb8, 0xe9, 0xde, 0xb2, 0xa3, 0x40, 0x01, 0xa6, 0x45, 0x1e],\n            [0x76, 0x0a, 0xda, 0x8d, 0x2c, 0x07, 0x3f, 0x89, 0x7d, 0x04, 0xad, 0x43, 0x50, 0x6e, 0xd2, 0x47, 0xcb, 0x8a, 0xe6, 0x85, 0x1a, 0x24, 0xf3, 0xd2, 0x60, 0xfd, 0xdf, 0x73, 0xa4, 0x0d, 0x73, 0x0e]],\n        [[0xfd, 0x67, 0x6b, 0x71, 0x9b, 0x81, 0x53, 0x39, 0x39, 0xf4, 0xb8, 0xd5, 0xc3, 0x30, 0x9b, 0x3b, 0x7c, 0xa3, 0xf0, 0xd0, 0x84, 0x21, 0xd6, 0xbf, 0xb7, 0x4c, 0x87, 0x13, 0x45, 0x2d, 0xa7, 0x55],\n            [0x5d, 0x04, 0xb3, 0x40, 0x28, 0x95, 0x2d, 0x30, 0x83, 0xec, 0x5e, 0xe4, 0xff, 0x75, 0xfe, 0x79, 0x26, 0x9d, 0x1d, 0x36, 0xcd, 0x0a, 0x15, 0xd2, 0x24, 0x14, 0x77, 0x71, 0xd7, 0x8a, 0x1b, 0x04]],\n        [[0x5d, 0x93, 0xc9, 0xbe, 0xaa, 0x90, 0xcd, 0x9b, 0xfb, 0x73, 0x7e, 0xb0, 0x64, 0x98, 0x57, 0x44, 0x42, 0x41, 0xb1, 0xaf, 0xea, 0xc1, 0xc3, 0x22, 0xff, 0x60, 0x46, 0xcb, 0x61, 0x81, 0x70, 0x61],\n            [0x0d, 0x82, 0xb9, 0xfe, 0x21, 0xcd, 0xc4, 0xf5, 0x98, 0x0c, 0x4e, 0x72, 0xee, 0x87, 0x49, 0xf8, 0xa1, 0x95, 0xdf, 0x8f, 0x2d, 0xbd, 0x21, 0x06, 0x7c, 0x15, 0xe8, 0x12, 0x6d, 0x93, 0xd6, 0x38]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x91, 0xf7, 0x51, 0xd9, 0xef, 0x7d, 0x42, 0x01, 0x13, 0xe9, 0xb8, 0x7f, 0xa6, 0x49, 0x17, 0x64, 0x21, 0x80, 0x83, 0x2c, 0x63, 0x4c, 0x60, 0x09, 0x59, 0x91, 0x92, 0x77, 0x39, 0x51, 0xf4, 0x48],\n            [0x60, 0xd5, 0x22, 0x83, 0x08, 0x2f, 0xff, 0x99, 0x3e, 0x69, 0x6d, 0x88, 0xda, 0xe7, 0x5b, 0x52, 0x26, 0x31, 0x2a, 0xe5, 0x89, 0xde, 0x68, 0x90, 0xb6, 0x22, 0x5a, 0xbd, 0xd3, 0x85, 0x53, 0x31]],\n        [[0xd8, 0xce, 0xdc, 0xf9, 0x3c, 0x4b, 0xa2, 0x1d, 0x2c, 0x2f, 0x36, 0xbe, 0x7a, 0xfc, 0xcd, 0xbc, 0xdc, 0xf9, 0x30, 0xbd, 0xff, 0x05, 0xc7, 0xe4, 0x8e, 0x17, 0x62, 0xf8, 0x4d, 0xa0, 0x56, 0x79],\n            [0x82, 0xe7, 0xf6, 0xba, 0x53, 0x84, 0x0a, 0xa3, 0x34, 0xff, 0x3c, 0xa3, 0x6a, 0xa1, 0x37, 0xea, 0xdd, 0xb6, 0x95, 0xb3, 0x78, 0x19, 0x76, 0x1e, 0x55, 0x2f, 0x77, 0x2e, 0x7f, 0xc1, 0xea, 0x5e]],\n        [[0x83, 0xe1, 0x6e, 0xa9, 0x07, 0x33, 0x3e, 0x83, 0xff, 0xcb, 0x1c, 0x9f, 0xb1, 0xa3, 0xb4, 0xc9, 0xe1, 0x07, 0x97, 0xff, 0xf8, 0x23, 0x8f, 0xce, 0x40, 0xfd, 0x2e, 0x5e, 0xdb, 0x16, 0x43, 0x2d],\n            [0xba, 0x38, 0x02, 0xf7, 0x81, 0x43, 0x83, 0xa3, 0x20, 0x4f, 0x01, 0x3b, 0x8a, 0x04, 0x38, 0x31, 0xc6, 0x0f, 0xc8, 0xdf, 0xd7, 0xfa, 0x2f, 0x88, 0x3f, 0xfc, 0x0c, 0x76, 0xc4, 0xa6, 0x45, 0x72]],\n        [[0xbb, 0x0c, 0xbc, 0x6a, 0xa4, 0x97, 0x17, 0x93, 0x2d, 0x6f, 0xde, 0x72, 0x10, 0x1c, 0x08, 0x2c, 0x0f, 0x80, 0x32, 0x68, 0x27, 0xd4, 0xab, 0xdd, 0xc5, 0x58, 0x61, 0x13, 0x6d, 0x11, 0x1e, 0x4d],\n            [0x1a, 0xb9, 0xc9, 0x10, 0xfb, 0x1e, 0x4e, 0xf4, 0x84, 0x4b, 0x8a, 0x5e, 0x7b, 0x4b, 0xe8, 0x43, 0x8c, 0x8f, 0x00, 0xb5, 0x54, 0x13, 0xc5, 0x5c, 0xb6, 0x35, 0x4e, 0x9d, 0xe4, 0x5b, 0x41, 0x6d]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x15, 0x7d, 0x12, 0x48, 0x82, 0x14, 0x42, 0xcd, 0x32, 0xd4, 0x4b, 0xc1, 0x72, 0x61, 0x2a, 0x8c, 0xec, 0xe2, 0xf8, 0x24, 0x45, 0x94, 0xe3, 0xbe, 0xdd, 0x67, 0xa8, 0x77, 0x5a, 0xae, 0x5b, 0x4b],\n            [0xcb, 0x77, 0x9a, 0x20, 0xde, 0xb8, 0x23, 0xd9, 0xa0, 0x0f, 0x8c, 0x7b, 0xa5, 0xcb, 0xae, 0xb6, 0xec, 0x42, 0x67, 0x0e, 0x58, 0xa4, 0x75, 0x98, 0x21, 0x71, 0x84, 0xb3, 0xe0, 0x76, 0x94, 0x73]],\n        [[0xdf, 0xfc, 0x69, 0x28, 0x23, 0x3f, 0x5b, 0xf8, 0x3b, 0x24, 0x37, 0xf3, 0x1d, 0xd5, 0x22, 0x6b, 0xd0, 0x98, 0xa8, 0x6c, 0xcf, 0xff, 0x06, 0xe1, 0x13, 0xdf, 0xb9, 0xc1, 0x0c, 0xa9, 0xbf, 0x33],\n            [0xd9, 0x81, 0xda, 0xb2, 0x4f, 0x82, 0x9d, 0x43, 0x81, 0x09, 0xf1, 0xd2, 0x01, 0xef, 0xac, 0xf4, 0x2d, 0x7d, 0x01, 0x09, 0xf1, 0xff, 0xa5, 0x9f, 0xe5, 0xca, 0x27, 0x63, 0xdb, 0x20, 0xb1, 0x53]],\n        [[0x67, 0x02, 0xe8, 0xad, 0xa9, 0x34, 0xd4, 0xf0, 0x15, 0x81, 0xaa, 0xc7, 0x4d, 0x87, 0x94, 0xea, 0x75, 0xe7, 0x4c, 0x94, 0x04, 0x0e, 0x69, 0x87, 0xe7, 0x51, 0x91, 0x10, 0x03, 0xc7, 0xbe, 0x56],\n            [0x32, 0xfb, 0x86, 0xec, 0x33, 0x6b, 0x2e, 0x51, 0x2b, 0xc8, 0xfa, 0x6c, 0x70, 0x47, 0x7e, 0xce, 0x05, 0x0c, 0x71, 0xf3, 0xb4, 0x56, 0xa6, 0xdc, 0xcc, 0x78, 0x07, 0x75, 0xd0, 0xdd, 0xb2, 0x6a]],\n        [[0xc6, 0xef, 0xb9, 0xc0, 0x2b, 0x22, 0x08, 0x1e, 0x71, 0x70, 0xb3, 0x35, 0x9c, 0x7a, 0x01, 0x92, 0x44, 0x9a, 0xf6, 0xb0, 0x58, 0x95, 0xc1, 0x9b, 0x02, 0xed, 0x2d, 0x7c, 0x34, 0x29, 0x49, 0x44],\n            [0x45, 0x62, 0x1d, 0x2e, 0xff, 0x2a, 0x1c, 0x21, 0xa4, 0x25, 0x7b, 0x0d, 0x8c, 0x15, 0x39, 0xfc, 0x8f, 0x7c, 0xa5, 0x7d, 0x1e, 0x25, 0xa3, 0x45, 0xd6, 0xab, 0xbd, 0xcb, 0xc5, 0x5e, 0x78, 0x77]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xd0, 0xd3, 0x42, 0xed, 0x1d, 0x00, 0x3c, 0x15, 0x2c, 0x9c, 0x77, 0x81, 0xd2, 0x73, 0xd1, 0x06, 0xd5, 0xc4, 0x7f, 0x94, 0xbb, 0x92, 0x2d, 0x2c, 0x4b, 0x45, 0x4b, 0xe9, 0x2a, 0x89, 0x6b, 0x2b],\n            [0xd2, 0x0c, 0x88, 0xc5, 0x48, 0x4d, 0xea, 0x0d, 0x4a, 0xc9, 0x52, 0x6a, 0x61, 0x79, 0xe9, 0x76, 0xf3, 0x85, 0x52, 0x5c, 0x1b, 0x2c, 0xe1, 0xd6, 0xc4, 0x0f, 0x18, 0x0e, 0x4e, 0xf6, 0x1c, 0x7f]],\n        [[0xb4, 0x04, 0x2e, 0x42, 0xcb, 0x1f, 0x2b, 0x11, 0x51, 0x7b, 0x08, 0xac, 0xaa, 0x3e, 0x9e, 0x52, 0x60, 0xb7, 0xc2, 0x61, 0x57, 0x8c, 0x84, 0xd5, 0x18, 0xa6, 0x19, 0xfc, 0xb7, 0x75, 0x91, 0x1b],\n            [0xe8, 0x68, 0xca, 0x44, 0xc8, 0x38, 0x38, 0xcc, 0x53, 0x0a, 0x32, 0x35, 0xcc, 0x52, 0xcb, 0x0e, 0xf7, 0xc5, 0xe7, 0xec, 0x3d, 0x85, 0xcc, 0x58, 0xe2, 0x17, 0x47, 0xff, 0x9f, 0xa5, 0x30, 0x17]],\n        [[0xe3, 0xae, 0xc8, 0xc1, 0x71, 0x75, 0x31, 0x00, 0x37, 0x41, 0x5c, 0x0e, 0x39, 0xda, 0x73, 0xa0, 0xc7, 0x97, 0x36, 0x6c, 0x5b, 0xf2, 0xee, 0x64, 0x0a, 0x3d, 0x89, 0x1e, 0x1d, 0x49, 0x8c, 0x37],\n            [0x4c, 0xe6, 0xb0, 0xc1, 0xa5, 0x2a, 0x82, 0x09, 0x08, 0xad, 0x79, 0x9c, 0x56, 0xf6, 0xf9, 0xc1, 0xd7, 0x7c, 0x39, 0x7f, 0x93, 0xca, 0x11, 0x55, 0xbf, 0x07, 0x1b, 0x82, 0x29, 0x69, 0x95, 0x5c]],\n        [[0x87, 0xee, 0xa6, 0x56, 0x9e, 0xc2, 0x9a, 0x56, 0x24, 0x42, 0x85, 0x4d, 0x98, 0x31, 0x1e, 0x60, 0x4d, 0x87, 0x85, 0x04, 0xae, 0x46, 0x12, 0xf9, 0x8e, 0x7f, 0xe4, 0x7f, 0xf6, 0x1c, 0x37, 0x01],\n            [0x73, 0x4c, 0xb6, 0xc5, 0xc4, 0xe9, 0x6c, 0x85, 0x48, 0x4a, 0x5a, 0xac, 0xd9, 0x1f, 0x43, 0xf8, 0x62, 0x5b, 0xee, 0x98, 0x2a, 0x33, 0x8e, 0x79, 0xce, 0x61, 0x06, 0x35, 0xd8, 0xd7, 0xca, 0x71]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x72, 0xd3, 0xae, 0xa6, 0xca, 0x8f, 0xcd, 0xcc, 0x78, 0x8e, 0x19, 0x4d, 0xa7, 0xd2, 0x27, 0xe9, 0xa4, 0x3c, 0x16, 0x5b, 0x84, 0x80, 0xf9, 0xd0, 0xcc, 0x6a, 0x1e, 0xca, 0x1e, 0x67, 0xbd, 0x63],\n            [0x7b, 0x6e, 0x2a, 0xd2, 0x87, 0x48, 0xff, 0xa1, 0xca, 0xe9, 0x15, 0x85, 0xdc, 0xdb, 0x2c, 0x39, 0x12, 0x91, 0xa9, 0x20, 0xaa, 0x4f, 0x29, 0xf4, 0x15, 0x7a, 0xd2, 0xf5, 0x32, 0xcc, 0x60, 0x04]],\n        [[0xe5, 0x10, 0x47, 0x3b, 0xfa, 0x90, 0xfc, 0x30, 0xb5, 0xea, 0x6f, 0x56, 0x8f, 0xfb, 0x0e, 0xa7, 0x3b, 0xc8, 0xb2, 0xff, 0x02, 0x7a, 0x33, 0x94, 0x93, 0x2a, 0x03, 0xe0, 0x96, 0x3a, 0x6c, 0x0f],\n            [0x5a, 0x63, 0x67, 0xe1, 0x9b, 0x47, 0x78, 0x9f, 0x38, 0x79, 0xac, 0x97, 0x66, 0x1d, 0x5e, 0x51, 0xee, 0x24, 0x42, 0xe8, 0x58, 0x4b, 0x8a, 0x03, 0x75, 0x86, 0x37, 0x86, 0xe2, 0x97, 0x4e, 0x3d]],\n        [[0x3f, 0x75, 0x8e, 0xb4, 0xff, 0xd8, 0xdd, 0xd6, 0x37, 0x57, 0x9d, 0x6d, 0x3b, 0xbd, 0xd5, 0x60, 0x88, 0x65, 0x9a, 0xb9, 0x4a, 0x68, 0x84, 0xa2, 0x67, 0xdd, 0x17, 0x25, 0x97, 0x04, 0x8b, 0x5e],\n            [0xbb, 0x40, 0x5e, 0xbc, 0x16, 0x92, 0x05, 0xc4, 0xc0, 0x4e, 0x72, 0x90, 0x0e, 0xab, 0xcf, 0x8a, 0xed, 0xef, 0xb9, 0x2d, 0x3b, 0xf8, 0x43, 0x5b, 0xba, 0x2d, 0xeb, 0x2f, 0x52, 0xd2, 0xd1, 0x5a]],\n        [[0x40, 0xb4, 0xab, 0xe6, 0xad, 0x9f, 0x46, 0x69, 0x4a, 0xb3, 0x8e, 0xaa, 0xea, 0x9c, 0x8a, 0x20, 0x16, 0x5d, 0x8c, 0x13, 0xbd, 0xf6, 0x1d, 0xc5, 0x24, 0xbd, 0x90, 0x2a, 0x1c, 0xc7, 0x13, 0x3b],\n            [0x54, 0xdc, 0x16, 0x0d, 0x18, 0xbe, 0x35, 0x64, 0x61, 0x52, 0x02, 0x80, 0xaf, 0x05, 0xf7, 0xa6, 0x42, 0xd3, 0x8f, 0x2e, 0x79, 0x26, 0xa8, 0xbb, 0xb2, 0x17, 0x48, 0xb2, 0x7a, 0x0a, 0x89, 0x14]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x20, 0xa8, 0x88, 0xe3, 0x91, 0xc0, 0x6e, 0xbb, 0x8a, 0x27, 0x82, 0x51, 0x83, 0xb2, 0x28, 0xa9, 0x83, 0xeb, 0xa6, 0xa9, 0x4d, 0x17, 0x59, 0x22, 0x54, 0x00, 0x50, 0x45, 0xcb, 0x48, 0x4b, 0x18],\n            [0x33, 0x7c, 0xe7, 0x26, 0xba, 0x4d, 0x32, 0xfe, 0x53, 0xf4, 0xfa, 0x83, 0xe3, 0xa5, 0x79, 0x66, 0x73, 0xef, 0x80, 0x23, 0x68, 0xc2, 0x60, 0xdd, 0xa9, 0x33, 0xdc, 0x03, 0x7a, 0xe0, 0xe0, 0x3e]],\n        [[0x34, 0x5c, 0x13, 0xfb, 0xc0, 0xe3, 0x78, 0x2b, 0x54, 0x58, 0x22, 0x9b, 0x76, 0x81, 0x7f, 0x93, 0x9c, 0x25, 0x3c, 0xd2, 0xe9, 0x96, 0x21, 0x26, 0x08, 0xf5, 0xed, 0x95, 0x11, 0xae, 0x04, 0x5a],\n            [0xb9, 0xe8, 0xc5, 0x12, 0x97, 0x1f, 0x83, 0xfe, 0x3e, 0x94, 0x99, 0xd4, 0x2d, 0xf9, 0x52, 0x59, 0x5c, 0x82, 0xa6, 0xf0, 0x75, 0x7e, 0xe8, 0xec, 0xcc, 0xac, 0x18, 0x21, 0x09, 0x67, 0x66, 0x67]],\n        [[0xb3, 0x40, 0x29, 0xd1, 0xcb, 0x1b, 0x08, 0x9e, 0x9c, 0xb7, 0x53, 0xb9, 0x3b, 0x71, 0x08, 0x95, 0x12, 0x1a, 0x58, 0xaf, 0x7e, 0x82, 0x52, 0x43, 0x4f, 0x11, 0x39, 0xf4, 0x93, 0x1a, 0x26, 0x05],\n            [0x6e, 0x44, 0xa3, 0xf9, 0x64, 0xaf, 0xe7, 0x6d, 0x7d, 0xdf, 0x1e, 0xac, 0x04, 0xea, 0x3b, 0x5f, 0x9b, 0xe8, 0x24, 0x9d, 0x0e, 0xe5, 0x2e, 0x3e, 0xdf, 0xa9, 0xf7, 0xd4, 0x50, 0x71, 0xf0, 0x78]],\n        [[0x3e, 0xa8, 0x38, 0xc2, 0x57, 0x56, 0x42, 0x9a, 0xb1, 0xe2, 0xf8, 0x45, 0xaa, 0x11, 0x48, 0x5f, 0x17, 0xc4, 0x54, 0x27, 0xdc, 0x5d, 0xaa, 0xdd, 0x41, 0xbc, 0xdf, 0x81, 0xb9, 0x53, 0xee, 0x52],\n            [0xc3, 0xf1, 0xa7, 0x6d, 0xb3, 0x5f, 0x92, 0x6f, 0xcc, 0x91, 0xb8, 0x95, 0x05, 0xdf, 0x3c, 0x64, 0x57, 0x39, 0x61, 0x51, 0xad, 0x8c, 0x38, 0x7b, 0xc8, 0xde, 0x00, 0x34, 0xbe, 0xa1, 0xb0, 0x7e]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x25, 0x24, 0x1d, 0x8a, 0x67, 0x20, 0xee, 0x42, 0xeb, 0x38, 0xed, 0x0b, 0x8b, 0xcd, 0x46, 0x9d, 0x5e, 0x6b, 0x1e, 0x24, 0x9d, 0x12, 0x05, 0x1a, 0xcc, 0x05, 0x4e, 0x92, 0x38, 0xe1, 0x1f, 0x50],\n            [0x4e, 0xee, 0x1c, 0x91, 0xe6, 0x11, 0xbd, 0x8e, 0x55, 0x1a, 0x18, 0x75, 0x66, 0xaf, 0x4d, 0x7b, 0x0f, 0xae, 0x6d, 0x85, 0xca, 0x82, 0x58, 0x21, 0x9c, 0x18, 0xe0, 0xed, 0xec, 0x22, 0x80, 0x2f]],\n        [[0x68, 0x3b, 0x0a, 0x39, 0x1d, 0x6a, 0x15, 0x57, 0xfc, 0xf0, 0x63, 0x54, 0xdb, 0x39, 0xdb, 0xe8, 0x5c, 0x64, 0xff, 0xa0, 0x09, 0x4f, 0x3b, 0xb7, 0x32, 0x60, 0x99, 0x94, 0xfd, 0x94, 0x82, 0x2d],\n            [0x24, 0xf6, 0x5a, 0x44, 0xf1, 0x55, 0x2c, 0xdb, 0xea, 0x7c, 0x84, 0x7c, 0x01, 0xac, 0xe3, 0xfd, 0xc9, 0x27, 0xc1, 0x5a, 0xb9, 0xde, 0x4f, 0x5a, 0x90, 0xdd, 0xc6, 0x67, 0xaa, 0x6f, 0x8a, 0x3a]],\n        [[0x78, 0x52, 0x87, 0xc9, 0x97, 0x63, 0xb1, 0xdd, 0x54, 0x5f, 0xc1, 0xf8, 0xf1, 0x06, 0xa6, 0xa8, 0xa3, 0x88, 0x82, 0xd4, 0xcb, 0xa6, 0x19, 0xdd, 0xd1, 0x11, 0x87, 0x08, 0x17, 0x4c, 0x37, 0x2a],\n            [0xa1, 0x0c, 0xf3, 0x08, 0x43, 0xd9, 0x24, 0x1e, 0x83, 0xa7, 0xdf, 0x91, 0xca, 0xbd, 0x69, 0x47, 0x8d, 0x1b, 0xe2, 0xb9, 0x4e, 0xb5, 0xe1, 0x76, 0xb3, 0x1c, 0x93, 0x03, 0xce, 0x5f, 0xb3, 0x5a]],\n        [[0x1d, 0xda, 0xe4, 0x61, 0x03, 0x50, 0xa9, 0x8b, 0x68, 0x18, 0xef, 0xb2, 0x1c, 0x84, 0x3b, 0xa2, 0x44, 0x95, 0xa3, 0x04, 0x3b, 0xd6, 0x99, 0x00, 0xaf, 0x76, 0x42, 0x67, 0x02, 0x7d, 0x85, 0x56],\n            [0xce, 0x72, 0x0e, 0x29, 0x84, 0xb2, 0x7d, 0xd2, 0x45, 0xbe, 0x57, 0x06, 0xed, 0x7f, 0xcf, 0xed, 0xcd, 0xef, 0x19, 0xd6, 0xbc, 0x15, 0x79, 0x64, 0xd2, 0x18, 0xe3, 0x20, 0x67, 0x3a, 0x54, 0x0b]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x52, 0xfd, 0x04, 0xc5, 0xfb, 0x99, 0xe7, 0xe8, 0xfb, 0x8c, 0xe1, 0x42, 0x03, 0xef, 0x9d, 0xd9, 0x9e, 0x4d, 0xf7, 0x80, 0xcf, 0x2e, 0xcc, 0x9b, 0x45, 0xc9, 0x7b, 0x7a, 0xbc, 0x37, 0xa8, 0x52],\n            [0x96, 0x11, 0x41, 0x8a, 0x47, 0x91, 0xfe, 0xb6, 0xda, 0x7a, 0x54, 0x63, 0xd1, 0x14, 0x35, 0x05, 0x86, 0x8c, 0xa9, 0x36, 0x3f, 0xf2, 0x85, 0x54, 0x4e, 0x92, 0xd8, 0x85, 0x01, 0x46, 0xd6, 0x50]],\n        [[0x53, 0xcd, 0xf3, 0x86, 0x40, 0xe6, 0x39, 0x42, 0x95, 0xd6, 0xcb, 0x45, 0x1a, 0x20, 0xc8, 0x45, 0x4b, 0x32, 0x69, 0x04, 0xb1, 0xaf, 0x20, 0x46, 0xc7, 0x6b, 0x23, 0x5b, 0x69, 0xee, 0x30, 0x3f],\n            [0x70, 0x83, 0x47, 0xc0, 0xdb, 0x55, 0x08, 0xa8, 0x7b, 0x18, 0x6d, 0xf5, 0x04, 0x5a, 0x20, 0x0c, 0x4a, 0x8c, 0x60, 0xae, 0xae, 0x0f, 0x64, 0x55, 0x55, 0x2e, 0xd5, 0x1d, 0x53, 0x31, 0x42, 0x41]],\n        [[0xca, 0xfc, 0x88, 0x6b, 0x96, 0x78, 0x0a, 0x8b, 0x83, 0xdc, 0xbc, 0xaf, 0x40, 0xb6, 0x8d, 0x7f, 0xef, 0xb4, 0xd1, 0x3f, 0xcc, 0xa2, 0x74, 0xc9, 0xc2, 0x92, 0x55, 0x00, 0xab, 0xdb, 0xbf, 0x4f],\n            [0x93, 0x1c, 0x06, 0x2d, 0x66, 0x65, 0x02, 0xa4, 0x97, 0x18, 0xfd, 0x00, 0xe7, 0xab, 0x03, 0xec, 0xce, 0xc1, 0xbf, 0x37, 0xf8, 0x13, 0x53, 0xa5, 0xe5, 0x0c, 0x3a, 0xa8, 0x55, 0xb9, 0xff, 0x68]],\n        [[0xe4, 0xe6, 0x6d, 0x30, 0x7d, 0x30, 0x35, 0xc2, 0x78, 0x87, 0xf9, 0xfc, 0x6b, 0x5a, 0xc3, 0xb7, 0x65, 0xd8, 0x2e, 0xc7, 0xa5, 0x0c, 0xc6, 0xdc, 0x12, 0xaa, 0xd6, 0x4f, 0xc5, 0x38, 0xbc, 0x0e],\n            [0xe2, 0x3c, 0x76, 0x86, 0x38, 0xf2, 0x7b, 0x2c, 0x16, 0x78, 0x8d, 0xf5, 0xa4, 0x15, 0xda, 0xdb, 0x26, 0x85, 0xa0, 0x56, 0xdd, 0x1d, 0xe3, 0xb3, 0xfd, 0x40, 0xef, 0xf2, 0xd9, 0xa1, 0xb3, 0x04]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xdb, 0x49, 0x0e, 0xe6, 0x58, 0x10, 0x7a, 0x52, 0xda, 0xb5, 0x7d, 0x37, 0x6a, 0x3e, 0xa1, 0x78, 0xce, 0xc7, 0x1c, 0x24, 0x23, 0xdb, 0x7d, 0xfb, 0x8c, 0x8d, 0xdc, 0x30, 0x67, 0x69, 0x75, 0x3b],\n            [0xa9, 0xea, 0x6d, 0x16, 0x16, 0x60, 0xf4, 0x60, 0x87, 0x19, 0x44, 0x8c, 0x4a, 0x8b, 0x3e, 0xfb, 0x16, 0x00, 0x00, 0x54, 0xa6, 0x9e, 0x9f, 0xef, 0xcf, 0xd9, 0xd2, 0x4c, 0x74, 0x31, 0xd0, 0x34]],\n        [[0xa4, 0xeb, 0x04, 0xa4, 0x8c, 0x8f, 0x71, 0x27, 0x95, 0x85, 0x5d, 0x55, 0x4b, 0xb1, 0x26, 0x26, 0xc8, 0xae, 0x6a, 0x7d, 0xa2, 0x21, 0xca, 0xce, 0x38, 0xab, 0x0f, 0xd0, 0xd5, 0x2b, 0x6b, 0x00],\n            [0xe5, 0x67, 0x0c, 0xf1, 0x3a, 0x9a, 0xea, 0x09, 0x39, 0xef, 0xd1, 0x30, 0xbc, 0x33, 0xba, 0xb1, 0x6a, 0xc5, 0x27, 0x08, 0x7f, 0x54, 0x80, 0x3d, 0xab, 0xf6, 0x15, 0x7a, 0xc2, 0x40, 0x73, 0x72]],\n        [[0x84, 0x56, 0x82, 0xb6, 0x12, 0x70, 0x7f, 0xf7, 0xf0, 0xbd, 0x5b, 0xa9, 0xd5, 0xc5, 0x5f, 0x59, 0xbf, 0x7f, 0xb3, 0x55, 0x22, 0x02, 0xc9, 0x44, 0x55, 0x87, 0x8f, 0x96, 0x98, 0x64, 0x6d, 0x15],\n            [0xb0, 0x8b, 0xaa, 0x1e, 0xec, 0xc7, 0xa5, 0x8f, 0x1f, 0x92, 0x04, 0xc6, 0x05, 0xf6, 0xdf, 0xa1, 0xcc, 0x1f, 0x81, 0xf5, 0x0e, 0x9c, 0x57, 0xdc, 0xe3, 0xbb, 0x06, 0x87, 0x1e, 0xfe, 0x23, 0x6c]],\n        [[0xd8, 0x2b, 0x5b, 0x16, 0xea, 0x20, 0xf1, 0xd3, 0x68, 0x8f, 0xae, 0x5b, 0xd0, 0xa9, 0x1a, 0x19, 0xa8, 0x36, 0xfb, 0x2b, 0x57, 0x88, 0x7d, 0x90, 0xd5, 0xa6, 0xf3, 0xdc, 0x38, 0x89, 0x4e, 0x1f],\n            [0xcc, 0x19, 0xda, 0x9b, 0x3b, 0x43, 0x48, 0x21, 0x2e, 0x23, 0x4d, 0x3d, 0xae, 0xf8, 0x8c, 0xfc, 0xdd, 0xa6, 0x74, 0x37, 0x65, 0xca, 0xee, 0x1a, 0x19, 0x8e, 0x9f, 0x64, 0x6f, 0x0c, 0x8b, 0x5a]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x25, 0xb9, 0xc2, 0xf0, 0x72, 0xb8, 0x15, 0x16, 0xcc, 0x8d, 0x3c, 0x6f, 0x25, 0xed, 0xf4, 0x46, 0x2e, 0x0c, 0x60, 0x0f, 0xe2, 0x84, 0x34, 0x55, 0x89, 0x59, 0x34, 0x1b, 0xf5, 0x8d, 0xfe, 0x08],\n            [0xf8, 0xab, 0x93, 0xbc, 0x44, 0xba, 0x1b, 0x75, 0x4b, 0x49, 0x6f, 0xd0, 0x54, 0x2e, 0x63, 0xba, 0xb5, 0xea, 0xed, 0x32, 0x14, 0xc9, 0x94, 0xd8, 0xc5, 0xce, 0xf4, 0x10, 0x68, 0xe0, 0x38, 0x27]],\n        [[0x74, 0x1c, 0x14, 0x9b, 0xd4, 0x64, 0x61, 0x71, 0x5a, 0xb6, 0x21, 0x33, 0x4f, 0xf7, 0x8e, 0xba, 0xa5, 0x48, 0x9a, 0xc7, 0xfa, 0x9a, 0xf0, 0xb4, 0x62, 0xad, 0xf2, 0x5e, 0xcc, 0x03, 0x24, 0x1a],\n            [0xf5, 0x76, 0xfd, 0xe4, 0xaf, 0xb9, 0x03, 0x59, 0xce, 0x63, 0xd2, 0x3b, 0x1f, 0xcd, 0x21, 0x0c, 0xad, 0x44, 0xa5, 0x97, 0xac, 0x80, 0x11, 0x02, 0x9b, 0x0c, 0xe5, 0x8b, 0xcd, 0xfb, 0x79, 0x77]],\n        [[0x15, 0xbe, 0x9a, 0x0d, 0xba, 0x38, 0x72, 0x20, 0x8a, 0xf5, 0xbe, 0x59, 0x93, 0x79, 0xb7, 0xf6, 0x6a, 0x0c, 0x38, 0x27, 0x1a, 0x60, 0xf4, 0x86, 0x3b, 0xab, 0x5a, 0x00, 0xa0, 0xce, 0x21, 0x7d],\n            [0x6c, 0xba, 0x14, 0xc5, 0xea, 0x12, 0x9e, 0x2e, 0x82, 0x63, 0xce, 0x9b, 0x4a, 0xe7, 0x1d, 0xec, 0xf1, 0x2e, 0x51, 0x1c, 0xf4, 0xd0, 0x69, 0x15, 0x42, 0x9d, 0xa3, 0x3f, 0x0e, 0xbf, 0xe9, 0x5c]],\n        [[0xe4, 0x0d, 0xf4, 0xbd, 0xee, 0x31, 0x10, 0xed, 0xcb, 0x12, 0x86, 0xad, 0xd4, 0x2f, 0x90, 0x37, 0x32, 0xc3, 0x0b, 0x73, 0xec, 0x97, 0x85, 0xa4, 0x01, 0x1c, 0x76, 0x35, 0xfe, 0x75, 0xdd, 0x71],\n            [0x11, 0xa4, 0x88, 0x9f, 0x3e, 0x53, 0x69, 0x3b, 0x1b, 0xe0, 0xf7, 0xba, 0x9b, 0xad, 0x4e, 0x81, 0x5f, 0xb5, 0x5c, 0xae, 0xbe, 0x67, 0x86, 0x37, 0x34, 0x8e, 0x07, 0x32, 0x45, 0x4a, 0x67, 0x39]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x90, 0x70, 0x58, 0x20, 0x03, 0x1e, 0x67, 0xb2, 0xc8, 0x9b, 0x58, 0xc5, 0xb1, 0xeb, 0x2d, 0x4a, 0xde, 0x82, 0x8c, 0xf2, 0xd2, 0x14, 0xb8, 0x70, 0x61, 0x4e, 0x73, 0xd6, 0x0b, 0x6b, 0x0d, 0x30],\n            [0x81, 0xfc, 0x55, 0x5c, 0xbf, 0xa7, 0xc4, 0xbd, 0xe2, 0xf0, 0x4b, 0x8f, 0xe9, 0x7d, 0x99, 0xfa, 0xd3, 0xab, 0xbc, 0xc7, 0x83, 0x2b, 0x04, 0x7f, 0x0c, 0x19, 0x43, 0x03, 0x3d, 0x07, 0xca, 0x40]],\n        [[0xf9, 0xc8, 0xbe, 0x8c, 0x16, 0x81, 0x39, 0x96, 0xf6, 0x17, 0x58, 0xc8, 0x30, 0x58, 0xfb, 0xc2, 0x03, 0x45, 0xd2, 0x52, 0x76, 0xe0, 0x6a, 0x26, 0x28, 0x5c, 0x88, 0x59, 0x6a, 0x5a, 0x54, 0x42],\n            [0x07, 0xb5, 0x2e, 0x2c, 0x67, 0x15, 0x9b, 0xfb, 0x83, 0x69, 0x1e, 0x0f, 0xda, 0xd6, 0x29, 0xb1, 0x60, 0xe0, 0xb2, 0xba, 0x69, 0xa2, 0x9e, 0xbd, 0xbd, 0xe0, 0x1c, 0xbd, 0xcd, 0x06, 0x64, 0x70]],\n        [[0x41, 0xfa, 0x8c, 0xe1, 0x89, 0x8f, 0x27, 0xc8, 0x25, 0x8f, 0x6f, 0x5f, 0x55, 0xf8, 0xde, 0x95, 0x6d, 0x2f, 0x75, 0x16, 0x2b, 0x4e, 0x44, 0xfd, 0x86, 0x6e, 0xe9, 0x70, 0x39, 0x76, 0x97, 0x7e],\n            [0x17, 0x62, 0x6b, 0x14, 0xa1, 0x7c, 0xd0, 0x79, 0x6e, 0xd8, 0x8a, 0xa5, 0x6d, 0x8c, 0x93, 0xd2, 0x3f, 0xec, 0x44, 0x8d, 0x6e, 0x91, 0x01, 0x8c, 0x8f, 0xee, 0x01, 0x8f, 0xc0, 0xb4, 0x85, 0x0e]],\n        [[0x02, 0x3a, 0x70, 0x41, 0xe4, 0x11, 0x57, 0x23, 0xac, 0xe6, 0xfc, 0x54, 0x7e, 0xcd, 0xd7, 0x22, 0xcb, 0x76, 0x9f, 0x20, 0xce, 0xa0, 0x73, 0x76, 0x51, 0x3b, 0xa4, 0xf8, 0xe3, 0x62, 0x12, 0x6c],\n            [0x7f, 0x00, 0x9c, 0x26, 0x0d, 0x6f, 0x48, 0x7f, 0x3a, 0x01, 0xed, 0xc5, 0x96, 0xb0, 0x1f, 0x4f, 0xa8, 0x02, 0x62, 0x27, 0x8a, 0x50, 0x8d, 0x9a, 0x8b, 0x52, 0x0f, 0x1e, 0xcf, 0x41, 0x38, 0x19]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xf5, 0x6c, 0xd4, 0x2f, 0x0f, 0x69, 0x0f, 0x87, 0x3f, 0x61, 0x65, 0x1e, 0x35, 0x34, 0x85, 0xba, 0x02, 0x30, 0xac, 0x25, 0x3d, 0xe2, 0x62, 0xf1, 0xcc, 0xe9, 0x1b, 0xc2, 0xef, 0x6a, 0x42, 0x57],\n            [0x34, 0x1f, 0x2e, 0xac, 0xd1, 0xc7, 0x04, 0x52, 0x32, 0x66, 0xb2, 0x33, 0x73, 0x21, 0x34, 0x54, 0xf7, 0x71, 0xed, 0x06, 0xb0, 0xff, 0xa6, 0x59, 0x6f, 0x8a, 0x4e, 0xfb, 0x02, 0xb0, 0x45, 0x6b]],\n        [[0xf5, 0x48, 0x0b, 0x03, 0xc5, 0x22, 0x7d, 0x80, 0x08, 0x53, 0xfe, 0x32, 0xb1, 0xa1, 0x8a, 0x74, 0x6f, 0xbd, 0x3f, 0x85, 0xf4, 0xcf, 0xf5, 0x60, 0xaf, 0x41, 0x7e, 0x3e, 0x46, 0xa3, 0x5a, 0x20],\n            [0xaa, 0x35, 0x87, 0x44, 0x63, 0x66, 0x97, 0xf8, 0x6e, 0x55, 0x0c, 0x04, 0x3e, 0x35, 0x50, 0xbf, 0x93, 0x69, 0xd2, 0x8b, 0x05, 0x55, 0x99, 0xbe, 0xe2, 0x53, 0x61, 0xec, 0xe8, 0x08, 0x0b, 0x32]],\n        [[0xb3, 0x10, 0x45, 0x02, 0x69, 0x59, 0x2e, 0x97, 0xd9, 0x64, 0xf8, 0xdb, 0x25, 0x80, 0xdc, 0xc4, 0xd5, 0x62, 0x3c, 0xed, 0x65, 0x91, 0xad, 0xd1, 0x57, 0x81, 0x94, 0xaa, 0xa1, 0x29, 0xfc, 0x68],\n            [0xdd, 0xb5, 0x7d, 0xab, 0x5a, 0x21, 0x41, 0x53, 0xbb, 0x17, 0x79, 0x0d, 0xd1, 0xa8, 0x0c, 0x0c, 0x20, 0x88, 0x09, 0xe9, 0x84, 0xe8, 0x25, 0x11, 0x67, 0x7a, 0x8b, 0x1a, 0xe4, 0x5d, 0xe1, 0x5d]],\n        [[0x37, 0xea, 0xfe, 0x65, 0x3b, 0x25, 0xe8, 0xe1, 0xc2, 0xc5, 0x02, 0xa4, 0xbe, 0x98, 0x0a, 0x2b, 0x61, 0xc1, 0x9b, 0xe2, 0xd5, 0x92, 0xe6, 0x9e, 0x7d, 0x1f, 0xca, 0x43, 0x88, 0x8b, 0x2c, 0x59],\n            [0xe0, 0xb5, 0x00, 0x1d, 0x2a, 0x6f, 0xaf, 0x79, 0x86, 0x2f, 0xa6, 0x5a, 0x93, 0xd1, 0xfe, 0xae, 0x3a, 0xee, 0xdb, 0x7c, 0x61, 0xbe, 0x7c, 0x01, 0xf9, 0xfe, 0x52, 0xdc, 0xd8, 0x52, 0xa3, 0x42]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x22, 0xaf, 0x13, 0x37, 0xbd, 0x37, 0x71, 0xac, 0x04, 0x46, 0x63, 0xac, 0xa4, 0x77, 0xed, 0x25, 0x38, 0xe0, 0x15, 0xa8, 0x64, 0x00, 0x0d, 0xce, 0x51, 0x01, 0xa9, 0xbc, 0x0f, 0x03, 0x1c, 0x04],\n            [0x89, 0xf9, 0x80, 0x07, 0xcf, 0x3f, 0xb3, 0xe9, 0xe7, 0x45, 0x44, 0x3d, 0x2a, 0x7c, 0xe9, 0xe4, 0x16, 0x5c, 0x5e, 0x65, 0x1c, 0xc7, 0x7d, 0xc6, 0x7a, 0xfb, 0x43, 0xee, 0x25, 0x76, 0x46, 0x72]],\n        [[0x02, 0xa2, 0xed, 0xf4, 0x8f, 0x6b, 0x0b, 0x3e, 0xeb, 0x35, 0x1a, 0xd5, 0x7e, 0xdb, 0x78, 0x00, 0x96, 0x8a, 0xa0, 0xb4, 0xcf, 0x60, 0x4b, 0xd4, 0xd5, 0xf9, 0x2d, 0xbf, 0x88, 0xbd, 0x22, 0x62],\n            [0x13, 0x53, 0xe4, 0x82, 0x57, 0xfa, 0x1e, 0x8f, 0x06, 0x2b, 0x90, 0xba, 0x08, 0xb6, 0x10, 0x54, 0x4f, 0x7c, 0x1b, 0x26, 0xed, 0xda, 0x6b, 0xdd, 0x25, 0xd0, 0x4e, 0xea, 0x42, 0xbb, 0x25, 0x03]],\n        [[0x51, 0x16, 0x50, 0x7c, 0xd5, 0x5d, 0xf6, 0x99, 0xe8, 0x77, 0x72, 0x4e, 0xfa, 0x62, 0xcb, 0x76, 0x75, 0x0c, 0xe2, 0x71, 0x98, 0x92, 0xd5, 0xfa, 0x45, 0xdf, 0x5c, 0x6f, 0x1e, 0x9e, 0x28, 0x69],\n            [0x0d, 0xac, 0x66, 0x6d, 0xc3, 0x8b, 0xba, 0x16, 0xb5, 0xe2, 0xa0, 0x0d, 0x0c, 0xbd, 0xa4, 0x8e, 0x18, 0x6c, 0xf2, 0xdc, 0xf9, 0xdc, 0x4a, 0x86, 0x25, 0x95, 0x14, 0xcb, 0xd8, 0x1a, 0x04, 0x0f]],\n        [[0x97, 0xa5, 0xdb, 0x8b, 0x2d, 0xaa, 0x42, 0x11, 0x09, 0xf2, 0x93, 0xbb, 0xd9, 0x06, 0x84, 0x4e, 0x11, 0xa8, 0xa0, 0x25, 0x2b, 0xa6, 0x5f, 0xae, 0xc4, 0xb4, 0x4c, 0xc8, 0xab, 0xc7, 0x3b, 0x02],\n            [0xee, 0xc9, 0x29, 0x0f, 0xdf, 0x11, 0x85, 0xed, 0xce, 0x0d, 0x62, 0x2c, 0x8f, 0x4b, 0xf9, 0x04, 0xe9, 0x06, 0x72, 0x1d, 0x37, 0x20, 0x50, 0xc9, 0x14, 0xeb, 0xec, 0x39, 0xa7, 0x97, 0x2b, 0x4d]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x69, 0xd1, 0x39, 0xbd, 0xfb, 0x33, 0xbe, 0xc4, 0xf0, 0x5c, 0xef, 0xf0, 0x56, 0x68, 0xfc, 0x97, 0x47, 0xc8, 0x72, 0xb6, 0x53, 0xa4, 0x0a, 0x98, 0xa5, 0xb4, 0x37, 0x71, 0xcf, 0x66, 0x50, 0x6d],\n            [0x17, 0xa4, 0x19, 0x52, 0x11, 0x47, 0xb3, 0x5c, 0x5b, 0xa9, 0x2e, 0x22, 0xb4, 0x00, 0x52, 0xf9, 0x57, 0x18, 0xb8, 0xbe, 0x5a, 0xe3, 0xab, 0x83, 0xc8, 0x87, 0x0a, 0x2a, 0xd8, 0x8c, 0xbb, 0x54]],\n        [[0xa9, 0x62, 0x93, 0x85, 0xbe, 0xe8, 0x73, 0x4a, 0x0e, 0xb0, 0xb5, 0x2d, 0x94, 0x50, 0xaa, 0xd3, 0xb2, 0xea, 0x9d, 0x62, 0x76, 0x3b, 0x07, 0x34, 0x4e, 0x2d, 0x70, 0xc8, 0x9a, 0x15, 0x66, 0x6b],\n            [0xc5, 0x96, 0xca, 0xc8, 0x22, 0x1a, 0xee, 0x5f, 0xe7, 0x31, 0x60, 0x22, 0x83, 0x08, 0x63, 0xce, 0xb9, 0x32, 0x44, 0x58, 0x5d, 0x3a, 0x9b, 0xe4, 0x04, 0xd5, 0xef, 0x38, 0xef, 0x4b, 0xdd, 0x19]],\n        [[0x4d, 0xc2, 0x17, 0x75, 0xa1, 0x68, 0xcd, 0xc3, 0xc6, 0x03, 0x44, 0xe3, 0x78, 0x09, 0x91, 0x47, 0x3f, 0x0f, 0xe4, 0x92, 0x58, 0xfa, 0x7d, 0x1f, 0x20, 0x94, 0x58, 0x5e, 0xbc, 0x19, 0x02, 0x6f],\n            [0x20, 0xd6, 0xd8, 0x91, 0x54, 0xa7, 0xf3, 0x20, 0x4b, 0x34, 0x06, 0xfa, 0x30, 0xc8, 0x6f, 0x14, 0x10, 0x65, 0x74, 0x13, 0x4e, 0xf0, 0x69, 0x26, 0xce, 0xcf, 0x90, 0xf4, 0xd0, 0xc5, 0xc8, 0x64]],\n        [[0x26, 0xa2, 0x50, 0x02, 0x24, 0x72, 0xf1, 0xf0, 0x4e, 0x2d, 0x93, 0xd5, 0x08, 0xe7, 0xae, 0x38, 0xf7, 0x18, 0xa5, 0x32, 0x34, 0xc2, 0xf0, 0xa6, 0xec, 0xb9, 0x61, 0x7b, 0x64, 0x99, 0xac, 0x71],\n            [0x25, 0xcf, 0x74, 0x55, 0x1b, 0xaa, 0xa9, 0x38, 0x41, 0x40, 0xd5, 0x95, 0x95, 0xab, 0x1c, 0x5e, 0xbc, 0x41, 0x7e, 0x14, 0x30, 0xbe, 0x13, 0x89, 0xf4, 0xe5, 0xeb, 0x28, 0xc0, 0xc2, 0x96, 0x3a]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x2b, 0x77, 0x45, 0xec, 0x67, 0x76, 0x32, 0x4c, 0xb9, 0xdf, 0x25, 0x32, 0x6b, 0xcb, 0xe7, 0x14, 0x61, 0x43, 0xee, 0xba, 0x9b, 0x71, 0xef, 0xd2, 0x48, 0x65, 0xbb, 0x1b, 0x8a, 0x13, 0x1b, 0x22],\n            [0x84, 0xad, 0x0c, 0x18, 0x38, 0x5a, 0xba, 0xd0, 0x98, 0x59, 0xbf, 0x37, 0xb0, 0x4f, 0x97, 0x60, 0x20, 0xb3, 0x9b, 0x97, 0xf6, 0x08, 0x6c, 0xa4, 0xff, 0xfb, 0xb7, 0xfa, 0x95, 0xb2, 0x51, 0x79]],\n        [[0x28, 0x5c, 0x3f, 0xdb, 0x6b, 0x18, 0x3b, 0x5c, 0xd1, 0x04, 0x28, 0xde, 0x85, 0x52, 0x31, 0xb5, 0xbb, 0xf6, 0xa9, 0xed, 0xbe, 0x28, 0x4f, 0xb3, 0x7e, 0x05, 0x6a, 0xdb, 0x95, 0x0d, 0x1b, 0x1c],\n            [0xd5, 0xc5, 0xc3, 0x9a, 0x0a, 0xd0, 0x31, 0x3e, 0x07, 0x36, 0x8e, 0xc0, 0x8a, 0x62, 0xb1, 0xca, 0xd6, 0x0e, 0x1e, 0x9d, 0xef, 0xab, 0x98, 0x4d, 0xbb, 0x6c, 0x05, 0xe0, 0xe4, 0x5d, 0xbd, 0x57]],\n        [[0xcc, 0x21, 0x27, 0xce, 0xfd, 0xa9, 0x94, 0x8e, 0xe1, 0xab, 0x49, 0xe0, 0x46, 0x26, 0xa1, 0xa8, 0x8c, 0xa1, 0x99, 0x1d, 0xb4, 0x27, 0x6d, 0x2d, 0xc8, 0x39, 0x30, 0x5e, 0x37, 0x52, 0xc4, 0x6e],\n            [0xa9, 0x85, 0xf4, 0xe7, 0xb0, 0x15, 0x33, 0x84, 0x1b, 0x14, 0x1a, 0x02, 0xd9, 0x3b, 0xad, 0x0f, 0x43, 0x6c, 0xea, 0x3e, 0x0f, 0x7e, 0xda, 0xdd, 0x6b, 0x4c, 0x7f, 0x6e, 0xd4, 0x6b, 0xbf, 0x0f]],\n        [[0x47, 0x9f, 0x7c, 0x56, 0x7c, 0x43, 0x91, 0x1c, 0xbb, 0x4e, 0x72, 0x3e, 0x64, 0xab, 0xa0, 0xa0, 0xdf, 0xb4, 0xd8, 0x87, 0x3a, 0xbd, 0xa8, 0x48, 0xc9, 0xb8, 0xef, 0x2e, 0xad, 0x6f, 0x84, 0x4f],\n            [0x2d, 0x2d, 0xf0, 0x1b, 0x7e, 0x2a, 0x6c, 0xf8, 0xa9, 0x6a, 0xe1, 0xf0, 0x99, 0xa1, 0x67, 0x9a, 0xd4, 0x13, 0xca, 0xca, 0xba, 0x27, 0x92, 0xaa, 0xa1, 0x5d, 0x50, 0xde, 0xcc, 0x40, 0x26, 0x0a]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x9f, 0x3e, 0xf2, 0xb2, 0x90, 0xce, 0xdb, 0x64, 0x3e, 0x03, 0xdd, 0x37, 0x36, 0x54, 0x70, 0x76, 0x24, 0xb5, 0x69, 0x03, 0xfc, 0xa0, 0x2b, 0x74, 0xb2, 0x05, 0x0e, 0xcc, 0xd8, 0x1f, 0x6a, 0x1f],\n            [0x19, 0x5e, 0x60, 0x69, 0x58, 0x86, 0xa0, 0x31, 0xbd, 0x32, 0xe9, 0x2c, 0x5c, 0xd2, 0x85, 0xba, 0x40, 0x64, 0xa8, 0x74, 0xf8, 0x0e, 0x1c, 0xb3, 0xa9, 0x69, 0xe8, 0x1e, 0x40, 0x64, 0x99, 0x77]],\n        [[0x6c, 0x32, 0x4f, 0xfd, 0xbb, 0x5c, 0xbb, 0x8d, 0x64, 0x66, 0x4a, 0x71, 0x1f, 0x79, 0xa3, 0xad, 0x8d, 0xf9, 0xd4, 0xec, 0xcf, 0x67, 0x70, 0xfa, 0x05, 0x4a, 0x0f, 0x6e, 0xaf, 0x87, 0x0a, 0x6f],\n            [0xc6, 0x36, 0x6e, 0x6c, 0x8c, 0x24, 0x09, 0x60, 0xbe, 0x26, 0xd2, 0x4c, 0x5e, 0x17, 0xca, 0x5f, 0x1d, 0xcc, 0x87, 0xe8, 0x42, 0x6a, 0xcb, 0xcb, 0x7d, 0x92, 0x05, 0x35, 0x81, 0x13, 0x60, 0x6b]],\n        [[0xf4, 0x15, 0xcd, 0x0f, 0x0a, 0xaf, 0x4e, 0x6b, 0x51, 0xfd, 0x14, 0xc4, 0x2e, 0x13, 0x86, 0x74, 0x44, 0xcb, 0x66, 0x6b, 0xb6, 0x9d, 0x74, 0x56, 0x32, 0xac, 0x8d, 0x8e, 0x8c, 0x8c, 0x8c, 0x39],\n            [0xca, 0x59, 0x74, 0x1a, 0x11, 0xef, 0x6d, 0xf7, 0x39, 0x5c, 0x3b, 0x1f, 0xfa, 0xe3, 0x40, 0x41, 0x23, 0x9e, 0xf6, 0xd1, 0x21, 0xa2, 0xbf, 0xad, 0x65, 0x42, 0x6b, 0x59, 0x8a, 0xe8, 0xc5, 0x7f]],\n        [[0x64, 0x05, 0x7a, 0x84, 0x4a, 0x13, 0xc3, 0xf6, 0xb0, 0x6e, 0x9a, 0x6b, 0x53, 0x6b, 0x32, 0xda, 0xd9, 0x74, 0x75, 0xc4, 0xba, 0x64, 0x3d, 0x3b, 0x08, 0xdd, 0x10, 0x46, 0xef, 0xc7, 0x90, 0x1f],\n            [0x7b, 0x2f, 0x3a, 0xce, 0xc8, 0xa1, 0x79, 0x3c, 0x30, 0x12, 0x44, 0x28, 0xf6, 0xbc, 0xff, 0xfd, 0xf4, 0xc0, 0x97, 0xb0, 0xcc, 0xc3, 0x13, 0x7a, 0xb9, 0x9a, 0x16, 0xe4, 0xcb, 0x4c, 0x34, 0x63]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x07, 0x4e, 0xd3, 0x2d, 0x09, 0x33, 0x0e, 0xd2, 0x0d, 0xbe, 0x3e, 0xe7, 0xe4, 0xaa, 0xb7, 0x00, 0x8b, 0xe8, 0xad, 0xaa, 0x7a, 0x8d, 0x34, 0x28, 0xa9, 0x81, 0x94, 0xc5, 0xe7, 0x42, 0xac, 0x47],\n            [0x24, 0x89, 0x7a, 0x8f, 0xb5, 0x9b, 0xf0, 0xc2, 0x03, 0x64, 0xd0, 0x1e, 0xf5, 0xa4, 0xb2, 0xf3, 0x74, 0xe9, 0x1a, 0x16, 0xfd, 0xcb, 0x15, 0xea, 0xeb, 0x10, 0x6c, 0x35, 0xd1, 0xc1, 0xa6, 0x28]],\n        [[0xcc, 0xd5, 0x39, 0xfc, 0xa5, 0xa4, 0xad, 0x32, 0x15, 0xce, 0x19, 0xe8, 0x34, 0x2b, 0x1c, 0x60, 0x91, 0xfc, 0x05, 0xa9, 0xb3, 0xdc, 0x80, 0x29, 0xc4, 0x20, 0x79, 0x06, 0x39, 0xc0, 0xe2, 0x22],\n            [0xbb, 0xa8, 0xe1, 0x89, 0x70, 0x57, 0x18, 0x54, 0x3c, 0xf6, 0x0d, 0x82, 0x12, 0x05, 0x87, 0x96, 0x06, 0x39, 0xe3, 0xf8, 0xb3, 0x95, 0xe5, 0xd7, 0x26, 0xbf, 0x09, 0x5a, 0x94, 0xf9, 0x1c, 0x63]],\n        [[0x2b, 0x8c, 0x2d, 0x9a, 0x8b, 0x84, 0xf2, 0x56, 0xfb, 0xad, 0x2e, 0x7f, 0xb7, 0xfc, 0x30, 0xe1, 0x35, 0x89, 0xba, 0x4d, 0xa8, 0x6d, 0xce, 0x8c, 0x8b, 0x30, 0xe0, 0xda, 0x29, 0x18, 0x11, 0x17],\n            [0x19, 0xa6, 0x5a, 0x65, 0x93, 0xc3, 0xb5, 0x31, 0x22, 0x4f, 0xf3, 0xf6, 0x0f, 0xeb, 0x28, 0xc3, 0x7c, 0xeb, 0xce, 0x86, 0xec, 0x67, 0x76, 0x6e, 0x35, 0x45, 0x7b, 0xd8, 0x6b, 0x92, 0x01, 0x65]],\n        [[0x3d, 0xd5, 0x9a, 0x64, 0x73, 0x36, 0xb1, 0xd6, 0x86, 0x98, 0x42, 0x3f, 0x8a, 0xf1, 0xc7, 0xf5, 0x42, 0xa8, 0x9c, 0x52, 0xa8, 0xdc, 0xf9, 0x24, 0x3f, 0x4a, 0xa1, 0xa4, 0x5b, 0xe8, 0x62, 0x1a],\n            [0xc5, 0xbd, 0xc8, 0x14, 0xd5, 0x0d, 0xeb, 0xe1, 0xa5, 0xe6, 0x83, 0x11, 0x09, 0x00, 0x1d, 0x55, 0x83, 0x51, 0x7e, 0x75, 0x00, 0x81, 0xb9, 0xcb, 0xd8, 0xc5, 0xe5, 0xa1, 0xd9, 0x17, 0x6d, 0x1f]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xea, 0xf9, 0xe4, 0xe9, 0xe1, 0x52, 0x3f, 0x51, 0x19, 0x0d, 0xdd, 0xd9, 0x9d, 0x93, 0x31, 0x87, 0x23, 0x09, 0xd5, 0x83, 0xeb, 0x92, 0x09, 0x76, 0x6e, 0xe3, 0xf8, 0xc0, 0xa2, 0x66, 0xb5, 0x36],\n            [0x3a, 0xbb, 0x39, 0xed, 0x32, 0x02, 0xe7, 0x43, 0x7a, 0x38, 0x14, 0x84, 0xe3, 0x44, 0xd2, 0x5e, 0x94, 0xdd, 0x78, 0x89, 0x55, 0x4c, 0x73, 0x9e, 0xe1, 0xe4, 0x3e, 0x43, 0xd0, 0x4a, 0xde, 0x1b]],\n        [[0xb2, 0xe7, 0x8f, 0xe3, 0xa3, 0xc5, 0xcb, 0x72, 0xee, 0x79, 0x41, 0xf8, 0xdf, 0xee, 0x65, 0xc5, 0x45, 0x77, 0x27, 0x3c, 0xbd, 0x58, 0xd3, 0x75, 0xe2, 0x04, 0x4b, 0xbb, 0x65, 0xf3, 0xc8, 0x0f],\n            [0x24, 0x7b, 0x93, 0x34, 0xb5, 0xe2, 0x74, 0x48, 0xcd, 0xa0, 0x0b, 0x92, 0x97, 0x66, 0x39, 0xf4, 0xb0, 0xe2, 0x5d, 0x39, 0x6a, 0x5b, 0x45, 0x17, 0x78, 0x1e, 0xdb, 0x91, 0x81, 0x1c, 0xf9, 0x16]],\n        [[0x16, 0xdf, 0xd1, 0x5a, 0xd5, 0xe9, 0x4e, 0x58, 0x95, 0x93, 0x5f, 0x51, 0x09, 0xc3, 0x2a, 0xc9, 0xd4, 0x55, 0x48, 0x79, 0xa4, 0xa3, 0xb2, 0xc3, 0x62, 0xaa, 0x8c, 0xe8, 0xad, 0x47, 0x39, 0x1b],\n            [0x46, 0xda, 0x9e, 0x51, 0x3a, 0xe6, 0xd1, 0xa6, 0xbb, 0x4d, 0x7b, 0x08, 0xbe, 0x8c, 0xd5, 0xf3, 0x3f, 0xfd, 0xf7, 0x44, 0x80, 0x2d, 0x53, 0x4b, 0xd0, 0x87, 0x68, 0xc1, 0xb5, 0xd8, 0xf7, 0x07]],\n        [[0xf4, 0x10, 0x46, 0xbe, 0xb7, 0xd2, 0xd1, 0xce, 0x5e, 0x76, 0xa2, 0xd7, 0x03, 0xdc, 0xe4, 0x81, 0x5a, 0xf6, 0x3c, 0xde, 0xae, 0x7a, 0x9d, 0x21, 0x34, 0xa5, 0xf6, 0xa9, 0x73, 0xe2, 0x8d, 0x60],\n            [0xfa, 0x44, 0x71, 0xf6, 0x41, 0xd8, 0xc6, 0x58, 0x13, 0x37, 0xeb, 0x84, 0x0f, 0x96, 0xc7, 0xdc, 0xc8, 0xa9, 0x7a, 0x83, 0xb2, 0x2f, 0x31, 0xb1, 0x1a, 0xd8, 0x98, 0x3f, 0x11, 0xd0, 0x31, 0x3b]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x81, 0xd5, 0x34, 0x16, 0x01, 0xa3, 0x93, 0xea, 0x52, 0x94, 0xec, 0x93, 0xb7, 0x81, 0x11, 0x2d, 0x58, 0xf9, 0xb5, 0x0a, 0xaa, 0x4f, 0xf6, 0x2e, 0x3f, 0x36, 0xbf, 0x33, 0x5a, 0xe7, 0xd1, 0x08],\n            [0x1a, 0xcf, 0x42, 0xae, 0xcc, 0xb5, 0x77, 0x39, 0xc4, 0x5b, 0x5b, 0xd0, 0x26, 0x59, 0x27, 0xd0, 0x55, 0x71, 0x12, 0x9d, 0x88, 0x3d, 0x9c, 0xea, 0x41, 0x6a, 0xf0, 0x50, 0x93, 0x93, 0xdd, 0x47]],\n        [[0x6f, 0xc9, 0x51, 0x6d, 0x1c, 0xaa, 0xf5, 0xa5, 0x90, 0x3f, 0x14, 0xe2, 0x6e, 0x8e, 0x64, 0xfd, 0xac, 0xe0, 0x4e, 0x22, 0xe5, 0xc1, 0xbc, 0x29, 0x0a, 0x6a, 0x9e, 0xa1, 0x60, 0xcb, 0x2f, 0x0b],\n            [0xdc, 0x39, 0x32, 0xf3, 0xa1, 0x44, 0xe9, 0xc5, 0xc3, 0x78, 0xfb, 0x95, 0x47, 0x34, 0x35, 0x34, 0xe8, 0x25, 0xde, 0x93, 0xc6, 0xb4, 0x76, 0x6d, 0x86, 0x13, 0xc6, 0xe9, 0x68, 0xb5, 0x01, 0x63]],\n        [[0x1f, 0x9a, 0x52, 0x64, 0x97, 0xd9, 0x1c, 0x08, 0x51, 0x6f, 0x26, 0x9d, 0xaa, 0x93, 0x33, 0x43, 0xfa, 0x77, 0xe9, 0x62, 0x9b, 0x5d, 0x18, 0x75, 0xeb, 0x78, 0xf7, 0x87, 0x8f, 0x41, 0xb4, 0x4d],\n            [0x13, 0xa8, 0x82, 0x3e, 0xe9, 0x13, 0xad, 0xeb, 0x01, 0xca, 0xcf, 0xda, 0xcd, 0xf7, 0x6c, 0xc7, 0x7a, 0xdc, 0x1e, 0x6e, 0xc8, 0x4e, 0x55, 0x62, 0x80, 0xea, 0x78, 0x0c, 0x86, 0xb9, 0x40, 0x51]],\n        [[0x27, 0xae, 0xd3, 0x0d, 0x4c, 0x8f, 0x34, 0xea, 0x7d, 0x3c, 0xe5, 0x8a, 0xcf, 0x5b, 0x92, 0xd8, 0x30, 0x16, 0xb4, 0xa3, 0x75, 0xff, 0xeb, 0x27, 0xc8, 0x5c, 0x6c, 0xc2, 0xee, 0x6c, 0x21, 0x0b],\n            [0xc3, 0xba, 0x12, 0x53, 0x2a, 0xaa, 0x77, 0xad, 0x19, 0x78, 0x55, 0x8a, 0x2e, 0x60, 0x87, 0xc2, 0x6e, 0x91, 0x38, 0x91, 0x3f, 0x7a, 0xc5, 0x24, 0x8f, 0x51, 0xc5, 0xde, 0xb0, 0x53, 0x30, 0x56]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x02, 0xfe, 0x54, 0x12, 0x18, 0xca, 0x7d, 0xa5, 0x68, 0x43, 0xa3, 0x6d, 0x14, 0x2a, 0x6a, 0xa5, 0x8e, 0x32, 0xe7, 0x63, 0x4f, 0xe3, 0xc6, 0x44, 0x3e, 0xab, 0x63, 0xca, 0x17, 0x86, 0x74, 0x3f],\n            [0x1e, 0x64, 0xc1, 0x7d, 0x52, 0xdc, 0x13, 0x5a, 0xa1, 0x9c, 0x4e, 0xee, 0x99, 0x28, 0xbb, 0x4c, 0xee, 0xac, 0xa9, 0x1b, 0x89, 0xa2, 0x38, 0x39, 0x7b, 0xc4, 0x0f, 0x42, 0xe6, 0x89, 0xed, 0x0f]],\n        [[0xf3, 0x3c, 0x8c, 0x80, 0x83, 0x10, 0x8a, 0x37, 0x50, 0x9c, 0xb4, 0xdf, 0x3f, 0x8c, 0xf7, 0x23, 0x07, 0xd6, 0xff, 0xa0, 0x82, 0x6c, 0x75, 0x3b, 0xe4, 0xb5, 0xbb, 0xe4, 0xe6, 0x50, 0xf0, 0x08],\n            [0x62, 0xee, 0x75, 0x48, 0x92, 0x33, 0xf2, 0xf4, 0xad, 0x15, 0x7a, 0xa1, 0x01, 0x46, 0xa9, 0x32, 0x06, 0x88, 0xb6, 0x36, 0x47, 0x35, 0xb9, 0xb4, 0x42, 0x85, 0x76, 0xf0, 0x48, 0x00, 0x90, 0x38]],\n        [[0x51, 0x15, 0x9d, 0xc3, 0x95, 0xd1, 0x39, 0xbb, 0x64, 0x9d, 0x15, 0x81, 0xc1, 0x68, 0xd0, 0xb6, 0xa4, 0x2c, 0x7d, 0x5e, 0x02, 0x39, 0x00, 0xe0, 0x3b, 0xa4, 0xcc, 0xca, 0x1d, 0x81, 0x24, 0x10],\n            [0xe7, 0x29, 0xf9, 0x37, 0xd9, 0x46, 0x5a, 0xcd, 0x70, 0xfe, 0x4d, 0x5b, 0xbf, 0xa5, 0xcf, 0x91, 0xf4, 0xef, 0xee, 0x8a, 0x29, 0xd0, 0xe7, 0xc4, 0x25, 0x92, 0x8a, 0xff, 0x36, 0xfc, 0xe4, 0x49]],\n        [[0xbd, 0x00, 0xb9, 0x04, 0x7d, 0x35, 0xfc, 0xeb, 0xd0, 0x0b, 0x05, 0x32, 0x52, 0x7a, 0x89, 0x24, 0x75, 0x50, 0xe1, 0x63, 0x02, 0x82, 0x8e, 0xe7, 0x85, 0x0c, 0xf2, 0x56, 0x44, 0x37, 0x83, 0x25],\n            [0x8f, 0xa1, 0xce, 0xcb, 0x60, 0xda, 0x12, 0x02, 0x1e, 0x29, 0x39, 0x2a, 0x03, 0xb7, 0xeb, 0x77, 0x40, 0xea, 0xc9, 0x2b, 0x2c, 0xd5, 0x7d, 0x7e, 0x2c, 0xc7, 0x5a, 0xfd, 0xff, 0xc4, 0xd1, 0x62]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x1d, 0x88, 0x98, 0x5b, 0x4e, 0xfc, 0x41, 0x24, 0x05, 0xe6, 0x50, 0x2b, 0xae, 0x96, 0x51, 0xd9, 0x6b, 0x72, 0xb2, 0x33, 0x42, 0x98, 0x68, 0xbb, 0x10, 0x5a, 0x7a, 0x8c, 0x9d, 0x07, 0xb4, 0x05],\n            [0x2f, 0x61, 0x9f, 0xd7, 0xa8, 0x3f, 0x83, 0x8c, 0x10, 0x69, 0x90, 0xe6, 0xcf, 0xd2, 0x63, 0xa3, 0xe4, 0x54, 0x7e, 0xe5, 0x69, 0x13, 0x1c, 0x90, 0x57, 0xaa, 0xe9, 0x53, 0x22, 0x43, 0x29, 0x23]],\n        [[0xe5, 0x1c, 0xf8, 0x0a, 0xfd, 0x2d, 0x7e, 0xf5, 0xf5, 0x70, 0x7d, 0x41, 0x6b, 0x11, 0xfe, 0xbe, 0x99, 0xd1, 0x55, 0x29, 0x31, 0xbf, 0xc0, 0x97, 0x6c, 0xd5, 0x35, 0xcc, 0x5e, 0x8b, 0xd9, 0x69],\n            [0x8e, 0x4e, 0x9f, 0x25, 0xf8, 0x81, 0x54, 0x2d, 0x0e, 0xd5, 0x54, 0x81, 0x9b, 0xa6, 0x92, 0xce, 0x4b, 0xe9, 0x8f, 0x24, 0x3b, 0xca, 0xe0, 0x44, 0xab, 0x36, 0xfe, 0xfb, 0x87, 0xd4, 0x26, 0x3e]],\n        [[0x0f, 0x93, 0x9c, 0x11, 0xe7, 0xdb, 0xf1, 0xf0, 0x85, 0x43, 0x28, 0x15, 0x37, 0xdd, 0xde, 0x27, 0xdf, 0xad, 0x3e, 0x49, 0x4f, 0xe0, 0x5b, 0xf6, 0x80, 0x59, 0x15, 0x3c, 0x85, 0xb7, 0x3e, 0x12],\n            [0xf5, 0xff, 0xcc, 0xf0, 0xb4, 0x12, 0x03, 0x5f, 0xc9, 0x84, 0xcb, 0x1d, 0x17, 0xe0, 0xbc, 0xcc, 0x03, 0x62, 0xa9, 0x8b, 0x94, 0xa6, 0xaa, 0x18, 0xcb, 0x27, 0x8d, 0x49, 0xa6, 0x17, 0x15, 0x07]],\n        [[0xd9, 0xb6, 0xd4, 0x9d, 0xd4, 0x6a, 0xaf, 0x70, 0x07, 0x2c, 0x10, 0x9e, 0xbd, 0x11, 0xad, 0xe4, 0x26, 0x33, 0x70, 0x92, 0x78, 0x1c, 0x74, 0x9f, 0x75, 0x60, 0x56, 0xf4, 0x39, 0xa8, 0xa8, 0x62],\n            [0x3b, 0xbf, 0x55, 0x35, 0x61, 0x8b, 0x44, 0x97, 0xe8, 0x3a, 0x55, 0xc1, 0xc8, 0x3b, 0xfd, 0x95, 0x29, 0x11, 0x60, 0x96, 0x1e, 0xcb, 0x11, 0x9d, 0xc2, 0x03, 0x8a, 0x1b, 0xc6, 0xd6, 0x45, 0x3d]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x7e, 0x0e, 0x50, 0xb2, 0xcc, 0x0d, 0x6b, 0xa6, 0x71, 0x5b, 0x42, 0xed, 0xbd, 0xaf, 0xac, 0xf0, 0xfc, 0x12, 0xa2, 0x3f, 0x4e, 0xda, 0xe8, 0x11, 0xf3, 0x23, 0xe1, 0x04, 0x62, 0x03, 0x1c, 0x4e],\n            [0xc8, 0xb1, 0x1b, 0x6f, 0x73, 0x61, 0x3d, 0x27, 0x0d, 0x7d, 0x7a, 0x25, 0x5f, 0x73, 0x0e, 0x2f, 0x93, 0xf6, 0x24, 0xd8, 0x4f, 0x90, 0xac, 0xa2, 0x62, 0x0a, 0xf0, 0x61, 0xd9, 0x08, 0x59, 0x6a]],\n        [[0x6f, 0x2d, 0x55, 0xf8, 0x2f, 0x8e, 0xf0, 0x18, 0x3b, 0xea, 0xdd, 0x26, 0x72, 0xd1, 0xf5, 0xfe, 0xe5, 0xb8, 0xe6, 0xd3, 0x10, 0x48, 0x46, 0x49, 0x3a, 0x9f, 0x5e, 0x45, 0x6b, 0x90, 0xe8, 0x7f],\n            [0xd3, 0x76, 0x69, 0x33, 0x7b, 0xb9, 0x40, 0x70, 0xee, 0xa6, 0x29, 0x6b, 0xdd, 0xd0, 0x5d, 0x8d, 0xc1, 0x3e, 0x4a, 0xea, 0x37, 0xb1, 0x03, 0x02, 0x03, 0x35, 0xf1, 0x28, 0x9d, 0xff, 0x00, 0x13]],\n        [[0x7a, 0xdb, 0x12, 0xd2, 0x8a, 0x82, 0x03, 0x1b, 0x1e, 0xaf, 0xf9, 0x4b, 0x9c, 0xbe, 0xae, 0x7c, 0xe4, 0x94, 0x2a, 0x23, 0xb3, 0x62, 0x86, 0xe7, 0xfd, 0x23, 0xaa, 0x99, 0xbd, 0x2b, 0x11, 0x6c],\n            [0x8d, 0xa6, 0xd5, 0xac, 0x9d, 0xcc, 0x68, 0x75, 0x7f, 0xc3, 0x4d, 0x4b, 0xdd, 0x6c, 0xbb, 0x11, 0x5a, 0x60, 0xe5, 0xbd, 0x7d, 0x27, 0x8b, 0xda, 0xb4, 0x95, 0xf6, 0x03, 0x27, 0xa4, 0x92, 0x3f]],\n        [[0x22, 0xd6, 0xb5, 0x17, 0x84, 0xbf, 0x12, 0xcc, 0x23, 0x14, 0x4a, 0xdf, 0x14, 0x31, 0xbc, 0xa1, 0xac, 0x6e, 0xab, 0xfa, 0x57, 0x11, 0x53, 0xb3, 0x27, 0xe6, 0xf9, 0x47, 0x33, 0x44, 0x34, 0x1e],\n            [0x79, 0xfc, 0xa6, 0xb4, 0x0b, 0x35, 0x20, 0xc9, 0x4d, 0x22, 0x84, 0xc4, 0xa9, 0x20, 0xec, 0x89, 0x94, 0xba, 0x66, 0x56, 0x48, 0xb9, 0x87, 0x7f, 0xca, 0x1e, 0x06, 0xed, 0xa5, 0x55, 0x59, 0x29]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x56, 0xe1, 0xf5, 0xf1, 0xd5, 0xab, 0xa8, 0x2b, 0xae, 0x89, 0xf3, 0xcf, 0x56, 0x9f, 0xf2, 0x4b, 0x31, 0xbc, 0x18, 0xa9, 0x06, 0x5b, 0xbe, 0xb4, 0x61, 0xf8, 0xb2, 0x06, 0x9c, 0x81, 0xab, 0x4c],\n            [0x1f, 0x68, 0x76, 0x01, 0x16, 0x38, 0x2b, 0x0f, 0x77, 0x97, 0x92, 0x67, 0x4e, 0x86, 0x6a, 0x8b, 0xe5, 0xe8, 0x0c, 0xf7, 0x36, 0x39, 0xb5, 0x33, 0xe6, 0xcf, 0x5e, 0xbd, 0x18, 0xfb, 0x10, 0x1f]],\n        [[0x83, 0xf0, 0x0d, 0x63, 0xef, 0x53, 0x6b, 0xb5, 0x6b, 0xf9, 0x83, 0xcf, 0xde, 0x04, 0x22, 0x9b, 0x2c, 0x0a, 0xe0, 0xa5, 0xd8, 0xc7, 0x9c, 0xa5, 0xa3, 0xf6, 0x6f, 0xcf, 0x90, 0x6b, 0x68, 0x7c],\n            [0x33, 0x15, 0xd7, 0x7f, 0x1a, 0xd5, 0x21, 0x58, 0xc4, 0x18, 0xa5, 0xf0, 0xcc, 0x73, 0xa8, 0xfd, 0xfa, 0x18, 0xd1, 0x03, 0x91, 0x8d, 0x52, 0xd2, 0xa3, 0xa4, 0xd3, 0xb1, 0xea, 0x1d, 0x0f, 0x00]],\n        [[0xcc, 0x48, 0x83, 0x90, 0xe5, 0xfd, 0x3f, 0x84, 0xaa, 0xf9, 0x8b, 0x82, 0x59, 0x24, 0x34, 0x68, 0x4f, 0x1c, 0x23, 0xd9, 0xcc, 0x71, 0xe1, 0x7f, 0x8c, 0xaf, 0xf1, 0xee, 0x00, 0xb6, 0xa0, 0x77],\n            [0xf5, 0x1a, 0x61, 0xf7, 0x37, 0x9d, 0x00, 0xf4, 0xf2, 0x69, 0x6f, 0x4b, 0x01, 0x85, 0x19, 0x45, 0x4d, 0x7f, 0x02, 0x7c, 0x6a, 0x05, 0x47, 0x6c, 0x1f, 0x81, 0x20, 0xd4, 0xe8, 0x50, 0x27, 0x72]],\n        [[0x2c, 0x3a, 0xe5, 0xad, 0xf4, 0xdd, 0x2d, 0xf7, 0x5c, 0x44, 0xb5, 0x5b, 0x21, 0xa3, 0x89, 0x5f, 0x96, 0x45, 0xca, 0x4d, 0xa4, 0x21, 0x99, 0x70, 0xda, 0xc4, 0xc4, 0xa0, 0xe5, 0xf4, 0xec, 0x0a],\n            [0x07, 0x68, 0x21, 0x65, 0xe9, 0x08, 0xa0, 0x0b, 0x6a, 0x4a, 0xba, 0xb5, 0x80, 0xaf, 0xd0, 0x1b, 0xc5, 0xf5, 0x4b, 0x73, 0x50, 0x60, 0x2d, 0x71, 0x69, 0x61, 0x0e, 0xc0, 0x20, 0x40, 0x30, 0x19]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xd0, 0x75, 0x57, 0x3b, 0xeb, 0x5c, 0x14, 0x56, 0x50, 0xc9, 0x4f, 0xb8, 0xb8, 0x1e, 0xa3, 0xf4, 0xab, 0xf5, 0xa9, 0x20, 0x15, 0x94, 0x82, 0xda, 0x96, 0x1c, 0x9b, 0x59, 0x8c, 0xff, 0xf4, 0x51],\n            [0xc1, 0x3a, 0x86, 0xd7, 0xb0, 0x06, 0x84, 0x7f, 0x1b, 0xbd, 0xd4, 0x07, 0x78, 0x80, 0x2e, 0xb1, 0xb4, 0xee, 0x52, 0x38, 0xee, 0x9a, 0xf9, 0xf6, 0xf3, 0x41, 0x6e, 0xd4, 0x88, 0x95, 0xac, 0x35]],\n        [[0x41, 0x97, 0xbf, 0x71, 0x6a, 0x9b, 0x72, 0xec, 0xf3, 0xf8, 0x6b, 0xe6, 0x0e, 0x6c, 0x69, 0xa5, 0x2f, 0x68, 0x52, 0xd8, 0x61, 0x81, 0xc0, 0x63, 0x3f, 0xa6, 0x3c, 0x13, 0x90, 0xe6, 0x8d, 0x56],\n            [0xe8, 0x39, 0x30, 0x77, 0x23, 0xb1, 0xfd, 0x1b, 0x3d, 0x3e, 0x74, 0x4d, 0x7f, 0xae, 0x5b, 0x3a, 0xb4, 0x65, 0x0e, 0x3a, 0x43, 0xdc, 0xdc, 0x41, 0x47, 0xe6, 0xe8, 0x92, 0x09, 0x22, 0x48, 0x4c]],\n        [[0x85, 0x57, 0x9f, 0xb5, 0xc8, 0x06, 0xb2, 0x9f, 0x47, 0x3f, 0xf0, 0xfa, 0xe6, 0xa9, 0xb1, 0x9b, 0x6f, 0x96, 0x7d, 0xf9, 0xa4, 0x65, 0x09, 0x75, 0x32, 0xa6, 0x6c, 0x7f, 0x47, 0x4b, 0x2f, 0x4f],\n            [0x34, 0xe9, 0x59, 0x93, 0x9d, 0x26, 0x80, 0x54, 0xf2, 0xcc, 0x3c, 0xc2, 0x25, 0x85, 0xe3, 0x6a, 0xc1, 0x62, 0x04, 0xa7, 0x08, 0x32, 0x6d, 0xa1, 0x39, 0x84, 0x8a, 0x3b, 0x87, 0x5f, 0x11, 0x13]],\n        [[0xda, 0x03, 0x34, 0x66, 0xc4, 0x0c, 0x73, 0x6e, 0xbc, 0x24, 0xb5, 0xf9, 0x70, 0x81, 0x52, 0xe9, 0xf4, 0x7c, 0x23, 0xdd, 0x9f, 0xb8, 0x46, 0xef, 0x1d, 0x22, 0x55, 0x7d, 0x71, 0xc4, 0x42, 0x33],\n            [0xc5, 0x37, 0x69, 0x5b, 0xa8, 0xc6, 0x9d, 0xa4, 0xfc, 0x61, 0x6e, 0x68, 0x46, 0xea, 0xd7, 0x1c, 0x67, 0xd2, 0x7d, 0xfa, 0xf1, 0xcc, 0x54, 0x8d, 0x36, 0x35, 0xc9, 0x00, 0xdf, 0x6c, 0x67, 0x50]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x9a, 0x4d, 0x42, 0x29, 0x5d, 0xa4, 0x6b, 0x6f, 0xa8, 0x8a, 0x4d, 0x91, 0x7b, 0xd2, 0xdf, 0x36, 0xef, 0x01, 0x22, 0xc5, 0xcc, 0x8d, 0xeb, 0x58, 0x3d, 0xb3, 0x50, 0xfc, 0x8b, 0x97, 0x96, 0x33],\n            [0x93, 0x33, 0x07, 0xc8, 0x4a, 0xca, 0xd0, 0xb1, 0xab, 0xbd, 0xdd, 0xa7, 0x7c, 0xac, 0x3e, 0x45, 0xcb, 0xcc, 0x07, 0x91, 0xbf, 0x35, 0x9d, 0xcb, 0x7d, 0x12, 0x3c, 0x11, 0x59, 0x13, 0xcf, 0x5c]],\n        [[0x45, 0xb8, 0x41, 0xd7, 0xab, 0x07, 0x15, 0x00, 0x8e, 0xce, 0xdf, 0xb2, 0x43, 0x5c, 0x01, 0xdc, 0xf4, 0x01, 0x51, 0x95, 0x10, 0x5a, 0xf6, 0x24, 0x24, 0xa0, 0x19, 0x3a, 0x09, 0x2a, 0xaa, 0x3f],\n            [0xdc, 0x8e, 0xeb, 0xc6, 0xbf, 0xdd, 0x11, 0x7b, 0xe7, 0x47, 0xe6, 0xce, 0xe7, 0xb6, 0xc5, 0xe8, 0x8a, 0xdc, 0x4b, 0x57, 0x15, 0x3b, 0x66, 0xca, 0x89, 0xa3, 0xfd, 0xac, 0x0d, 0xe1, 0x1d, 0x7a]],\n        [[0x89, 0xef, 0xbf, 0x03, 0x75, 0xd0, 0x29, 0x50, 0xcb, 0x7d, 0xd6, 0xbe, 0xad, 0x5f, 0x7b, 0x00, 0x32, 0xaa, 0x98, 0xed, 0x3f, 0x8f, 0x92, 0xcb, 0x81, 0x56, 0x01, 0x63, 0x64, 0xa3, 0x38, 0x39],\n            [0x8b, 0xa4, 0xd6, 0x50, 0xb4, 0xaa, 0x5d, 0x64, 0x64, 0x76, 0x2e, 0xa1, 0xa6, 0xb3, 0xb8, 0x7c, 0x7a, 0x56, 0xf5, 0x5c, 0x4e, 0x84, 0x5c, 0xfb, 0xdd, 0xca, 0x48, 0x8b, 0x48, 0xb9, 0xba, 0x34]],\n        [[0xc5, 0xe3, 0xe8, 0xae, 0x17, 0x27, 0xe3, 0x64, 0x60, 0x71, 0x47, 0x29, 0x02, 0x0f, 0x92, 0x5d, 0x10, 0x93, 0xc8, 0x0e, 0xa1, 0xed, 0xba, 0xa9, 0x96, 0x1c, 0xc5, 0x76, 0x30, 0xcd, 0xf9, 0x30],\n            [0x95, 0xb0, 0xbd, 0x8c, 0xbc, 0xa7, 0x4f, 0x7e, 0xfd, 0x4e, 0x3a, 0xbf, 0x5f, 0x04, 0x79, 0x80, 0x2b, 0x5a, 0x9f, 0x4f, 0x68, 0x21, 0x19, 0x71, 0xc6, 0x20, 0x01, 0x42, 0xaa, 0xdf, 0xae, 0x2c]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x90, 0x6e, 0x7e, 0x4b, 0x71, 0x93, 0xc0, 0x72, 0xed, 0xeb, 0x71, 0x24, 0x97, 0x26, 0x9c, 0xfe, 0xcb, 0x3e, 0x59, 0x19, 0xa8, 0x0f, 0x75, 0x7d, 0xbe, 0x18, 0xe6, 0x96, 0x1e, 0x95, 0x70, 0x60],\n            [0x89, 0x66, 0x3e, 0x1d, 0x4c, 0x5f, 0xfe, 0xc0, 0x04, 0x43, 0xd6, 0x44, 0x19, 0xb5, 0xad, 0xc7, 0x22, 0xdc, 0x71, 0x28, 0x64, 0xde, 0x41, 0x38, 0x27, 0x8f, 0x2c, 0x6b, 0x08, 0xb8, 0xb8, 0x7b]],\n        [[0x3d, 0x70, 0x27, 0x9d, 0xd9, 0xaf, 0xb1, 0x27, 0xaf, 0xe3, 0x5d, 0x1e, 0x3a, 0x30, 0x54, 0x61, 0x60, 0xe8, 0xc3, 0x26, 0x3a, 0xbc, 0x7e, 0xf5, 0x81, 0xdd, 0x64, 0x01, 0x04, 0xeb, 0xc0, 0x1e],\n            [0xda, 0x2c, 0xa4, 0xd1, 0xa1, 0xc3, 0x5c, 0x6e, 0x32, 0x07, 0x1f, 0xb8, 0x0e, 0x19, 0x9e, 0x99, 0x29, 0x33, 0x9a, 0xae, 0x7a, 0xed, 0x68, 0x42, 0x69, 0x7c, 0x07, 0xb3, 0x38, 0x2c, 0xf6, 0x3d]],\n        [[0x64, 0xaa, 0xb5, 0x88, 0x79, 0x65, 0x38, 0x8c, 0x94, 0xd6, 0x62, 0x37, 0x7d, 0x64, 0xcd, 0x3a, 0xeb, 0xff, 0xe8, 0x81, 0x09, 0xc7, 0x6a, 0x50, 0x09, 0x0d, 0x28, 0x03, 0x0d, 0x9a, 0x93, 0x0a],\n            [0x42, 0xa3, 0xf1, 0xc5, 0xb4, 0x0f, 0xd8, 0xc8, 0x8d, 0x15, 0x31, 0xbd, 0xf8, 0x07, 0x8b, 0xcd, 0x08, 0x8a, 0xfb, 0x18, 0x07, 0xfe, 0x8e, 0x52, 0x86, 0xef, 0xbe, 0xec, 0x49, 0x52, 0x99, 0x08]],\n        [[0x0f, 0xa9, 0xd5, 0x01, 0xaa, 0x48, 0x4f, 0x28, 0x66, 0x32, 0x1a, 0xba, 0x7c, 0xea, 0x11, 0x80, 0x17, 0x18, 0x9b, 0x56, 0x88, 0x25, 0x06, 0x69, 0x12, 0x2c, 0xea, 0x56, 0x69, 0x41, 0x24, 0x19],\n            [0xde, 0x21, 0xf0, 0xda, 0x8a, 0xfb, 0xb1, 0xb8, 0xcd, 0xc8, 0x6a, 0x82, 0x19, 0x73, 0xdb, 0xc7, 0xcf, 0x88, 0xeb, 0x96, 0xee, 0x6f, 0xfb, 0x06, 0xd2, 0xcd, 0x7d, 0x7b, 0x12, 0x28, 0x8e, 0x0c]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x93, 0x44, 0x97, 0xce, 0x28, 0xff, 0x3a, 0x40, 0xc4, 0xf5, 0xf6, 0x9b, 0xf4, 0x6b, 0x07, 0x84, 0xfb, 0x98, 0xd8, 0xec, 0x8c, 0x03, 0x57, 0xec, 0x49, 0xed, 0x63, 0xb6, 0xaa, 0xff, 0x98, 0x28],\n            [0x3d, 0x16, 0x35, 0xf3, 0x46, 0xbc, 0xb3, 0xf4, 0xc6, 0xb6, 0x4f, 0xfa, 0xf4, 0xa0, 0x13, 0xe6, 0x57, 0x45, 0x93, 0xb9, 0xbc, 0xd6, 0x59, 0xe7, 0x77, 0x94, 0x6c, 0xab, 0x96, 0x3b, 0x4f, 0x09]],\n        [[0x5a, 0xf7, 0x6b, 0x01, 0x12, 0x4f, 0x51, 0xc1, 0x70, 0x84, 0x94, 0x47, 0xb2, 0x01, 0x6c, 0x71, 0xd7, 0xcc, 0x17, 0x66, 0x0f, 0x59, 0x5d, 0x5d, 0x10, 0x01, 0x57, 0x11, 0xf5, 0xdd, 0xe2, 0x34],\n            [0x26, 0xd9, 0x1f, 0x5c, 0x58, 0xac, 0x8b, 0x03, 0xd2, 0xc3, 0x85, 0x0f, 0x3a, 0xc3, 0x7f, 0x6d, 0x8e, 0x86, 0xcd, 0x52, 0x74, 0x8f, 0x55, 0x77, 0x17, 0xb7, 0x8e, 0xb7, 0x88, 0xea, 0xda, 0x1b]],\n        [[0xb6, 0xea, 0x0e, 0x40, 0x93, 0x20, 0x79, 0x35, 0x6a, 0x61, 0x84, 0x5a, 0x07, 0x6d, 0xf9, 0x77, 0x6f, 0xed, 0x69, 0x1c, 0x0d, 0x25, 0x76, 0xcc, 0xf0, 0xdb, 0xbb, 0xc5, 0xad, 0xe2, 0x26, 0x57],\n            [0xcf, 0xe8, 0x0e, 0x6b, 0x96, 0x7d, 0xed, 0x27, 0xd1, 0x3c, 0xa9, 0xd9, 0x50, 0xa9, 0x98, 0x84, 0x5e, 0x86, 0xef, 0xd6, 0xf0, 0xf8, 0x0e, 0x89, 0x05, 0x2f, 0xd9, 0x5f, 0x15, 0x5f, 0x73, 0x79]],\n        [[0xc8, 0x5c, 0x16, 0xfe, 0xed, 0x9f, 0x26, 0x56, 0xf6, 0x4b, 0x9f, 0xa7, 0x0a, 0x85, 0xfe, 0xa5, 0x8c, 0x87, 0xdd, 0x98, 0xce, 0x4e, 0xc3, 0x58, 0x55, 0xb2, 0x7b, 0x3d, 0xd8, 0x6b, 0xb5, 0x4c],\n            [0x65, 0x38, 0xa0, 0x15, 0xfa, 0xa7, 0xb4, 0x8f, 0xeb, 0xc4, 0x86, 0x9b, 0x30, 0xa5, 0x5e, 0x4d, 0xea, 0x8a, 0x9a, 0x9f, 0x1a, 0xd8, 0x5b, 0x53, 0x14, 0x19, 0x25, 0x63, 0xb4, 0x6f, 0x1f, 0x5d]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xac, 0x8f, 0xbc, 0x1e, 0x7d, 0x8b, 0x5a, 0x0b, 0x8d, 0xaf, 0x76, 0x2e, 0x71, 0xe3, 0x3b, 0x6f, 0x53, 0x2f, 0x3e, 0x90, 0x95, 0xd4, 0x35, 0x14, 0x4f, 0x8c, 0x3c, 0xce, 0x57, 0x1c, 0x76, 0x49],\n            [0xa8, 0x50, 0xe1, 0x61, 0x6b, 0x57, 0x35, 0xeb, 0x44, 0x0b, 0x0c, 0x6e, 0xf9, 0x25, 0x80, 0x74, 0xf2, 0x8f, 0x6f, 0x7a, 0x3e, 0x7f, 0x2d, 0xf3, 0x4e, 0x09, 0x65, 0x10, 0x5e, 0x03, 0x25, 0x32]],\n        [[0xa9, 0x60, 0xdc, 0x0f, 0x64, 0xe5, 0x1d, 0xe2, 0x8d, 0x4f, 0x79, 0x2f, 0x0e, 0x24, 0x02, 0x00, 0x05, 0x77, 0x43, 0x25, 0x3d, 0x6a, 0xc7, 0xb7, 0xbf, 0x04, 0x08, 0x65, 0xf4, 0x39, 0x4b, 0x65],\n            [0x96, 0x19, 0x12, 0x6b, 0x6a, 0xb7, 0xe3, 0xdc, 0x45, 0x9b, 0xdb, 0xb4, 0xa8, 0xae, 0xdc, 0xa8, 0x14, 0x44, 0x65, 0x62, 0xce, 0x34, 0x9a, 0x84, 0x18, 0x12, 0x01, 0xf1, 0xe2, 0x7b, 0xce, 0x50]],\n        [[0x41, 0x21, 0x30, 0x53, 0x1b, 0x47, 0x01, 0xb7, 0x18, 0xd8, 0x82, 0x57, 0xbd, 0xa3, 0x60, 0xf0, 0x32, 0xf6, 0x5b, 0xf0, 0x30, 0x88, 0x91, 0x59, 0xfd, 0x90, 0xa2, 0xb9, 0x55, 0x93, 0x21, 0x34],\n            [0x97, 0x67, 0x9e, 0xeb, 0x6a, 0xf9, 0x6e, 0xd6, 0x73, 0xe8, 0x6b, 0x29, 0xec, 0x63, 0x82, 0x00, 0xa8, 0x99, 0x1c, 0x1d, 0x30, 0xc8, 0x90, 0x52, 0x90, 0xb6, 0x6a, 0x80, 0x4e, 0xff, 0x4b, 0x51]],\n        [[0x0f, 0x7d, 0x63, 0x8c, 0x6e, 0x5c, 0xde, 0x30, 0xdf, 0x65, 0xfa, 0x2e, 0xb0, 0xa3, 0x25, 0x05, 0x54, 0xbd, 0x25, 0xba, 0x06, 0xae, 0xdf, 0x8b, 0xd9, 0x1b, 0xea, 0x38, 0xb3, 0x05, 0x16, 0x09],\n            [0xc7, 0x8c, 0xbf, 0x64, 0x28, 0xad, 0xf8, 0xa5, 0x5a, 0x6f, 0xc9, 0xba, 0xd5, 0x7f, 0xd5, 0xd6, 0xbd, 0x66, 0x2f, 0x3d, 0xaa, 0x54, 0xf6, 0xba, 0x32, 0x22, 0x9a, 0x1e, 0x52, 0x05, 0xf4, 0x1d]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xaa, 0x1f, 0xbb, 0xeb, 0xfe, 0xe4, 0x87, 0xfc, 0xb1, 0x2c, 0xb7, 0x88, 0xf4, 0xc6, 0xb9, 0xf5, 0x24, 0x46, 0xf2, 0xa5, 0x9f, 0x8f, 0x8a, 0x93, 0x70, 0x69, 0xd4, 0x56, 0xec, 0xfd, 0x06, 0x46],\n            [0x4e, 0x66, 0xcf, 0x4e, 0x34, 0xce, 0x0c, 0xd9, 0xa6, 0x50, 0xd6, 0x5e, 0x95, 0xaf, 0xe9, 0x58, 0xfa, 0xee, 0x9b, 0xb8, 0xa5, 0x0f, 0x35, 0xe0, 0x43, 0x82, 0x6d, 0x65, 0xe6, 0xd9, 0x00, 0x0f]],\n        [[0x7b, 0x75, 0x3a, 0xfc, 0x64, 0xd3, 0x29, 0x7e, 0xdd, 0x49, 0x9a, 0x59, 0x53, 0xbf, 0xb4, 0xa7, 0x52, 0xb3, 0x05, 0xab, 0xc3, 0xaf, 0x16, 0x1a, 0x85, 0x42, 0x32, 0xa2, 0x86, 0xfa, 0x39, 0x43],\n            [0x0e, 0x4b, 0xa3, 0x63, 0x8a, 0xfe, 0xa5, 0x58, 0xf1, 0x13, 0xbd, 0x9d, 0xaa, 0x7f, 0x76, 0x40, 0x70, 0x81, 0x10, 0x75, 0x99, 0xbb, 0xbe, 0x0b, 0x16, 0xe9, 0xba, 0x62, 0x34, 0xcc, 0x07, 0x6d]],\n        [[0xc3, 0xf1, 0xc6, 0x93, 0x65, 0xee, 0x0b, 0xbc, 0xea, 0x14, 0xf0, 0xc1, 0xf8, 0x84, 0x89, 0xc2, 0xc9, 0xd7, 0xea, 0x34, 0xca, 0xa7, 0xc4, 0x99, 0xd5, 0x50, 0x69, 0xcb, 0xd6, 0x21, 0x63, 0x7c],\n            [0x99, 0xeb, 0x7c, 0x31, 0x73, 0x64, 0x67, 0x7f, 0x0c, 0x66, 0xaa, 0x8c, 0x69, 0x91, 0xe2, 0x26, 0xd3, 0x23, 0xe2, 0x76, 0x5d, 0x32, 0x52, 0xdf, 0x5d, 0xc5, 0x8f, 0xb7, 0x7c, 0x84, 0xb3, 0x70]],\n        [[0xeb, 0x01, 0xc7, 0x36, 0x97, 0x4e, 0xb6, 0xab, 0x5f, 0x0d, 0x2c, 0xba, 0x67, 0x64, 0x55, 0xde, 0xbc, 0xff, 0xa6, 0xec, 0x04, 0xd3, 0x8d, 0x39, 0x56, 0x5e, 0xee, 0xf8, 0xe4, 0x2e, 0x33, 0x62],\n            [0x65, 0xef, 0xb8, 0x9f, 0xc8, 0x4b, 0xa7, 0xfd, 0x21, 0x49, 0x9b, 0x92, 0x35, 0x82, 0xd6, 0x0a, 0x9b, 0xf2, 0x79, 0xf1, 0x47, 0x2f, 0x6a, 0x7e, 0x9f, 0xcf, 0x18, 0x02, 0x3c, 0xfb, 0x1b, 0x3e]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x2f, 0x8b, 0xc8, 0x40, 0x51, 0xd1, 0xac, 0x1a, 0x0b, 0xe4, 0xa9, 0xa2, 0x42, 0x21, 0x19, 0x2f, 0x7b, 0x97, 0xbf, 0xf7, 0x57, 0x6d, 0x3f, 0x3d, 0x4f, 0x0f, 0xe2, 0xb2, 0x81, 0x00, 0x9e, 0x7b],\n            [0x8c, 0x85, 0x2b, 0xc4, 0xfc, 0xf1, 0xab, 0xe8, 0x79, 0x22, 0xc4, 0x84, 0x17, 0x3a, 0xfa, 0x86, 0xa6, 0x7d, 0xf9, 0xf3, 0x6f, 0x03, 0x57, 0x20, 0x4d, 0x79, 0xf9, 0x6e, 0x71, 0x54, 0x38, 0x09]],\n        [[0x40, 0x29, 0x74, 0xa8, 0x2f, 0x5e, 0xf9, 0x79, 0xa4, 0xf3, 0x3e, 0xb9, 0xfd, 0x33, 0x31, 0xac, 0x9a, 0x69, 0x88, 0x1e, 0x77, 0x21, 0x2d, 0xf3, 0x91, 0x52, 0x26, 0x15, 0xb2, 0xa6, 0xcf, 0x7e],\n            [0xc6, 0x20, 0x47, 0x6c, 0xa4, 0x7d, 0xcb, 0x63, 0xea, 0x5b, 0x03, 0xdf, 0x3e, 0x88, 0x81, 0x6d, 0xce, 0x07, 0x42, 0x18, 0x60, 0x7e, 0x7b, 0x55, 0xfe, 0x6a, 0xf3, 0xda, 0x5c, 0x8b, 0x95, 0x10]],\n        [[0x62, 0xe4, 0x0d, 0x03, 0xb4, 0xd7, 0xcd, 0xfa, 0xbd, 0x46, 0xdf, 0x93, 0x71, 0x10, 0x2c, 0xa8, 0x3b, 0xb6, 0x09, 0x05, 0x70, 0x84, 0x43, 0x29, 0xa8, 0x59, 0xf5, 0x8e, 0x10, 0xe4, 0xd7, 0x20],\n            [0x57, 0x82, 0x1c, 0xab, 0xbf, 0x62, 0x70, 0xe8, 0xc4, 0xcf, 0xf0, 0x28, 0x6e, 0x16, 0x3c, 0x08, 0x78, 0x89, 0x85, 0x46, 0x0f, 0xf6, 0x7f, 0xcf, 0xcb, 0x7e, 0xb8, 0x25, 0xe9, 0x5a, 0xfa, 0x03]],\n        [[0xfb, 0x95, 0x92, 0x63, 0x50, 0xfc, 0x62, 0xf0, 0xa4, 0x5e, 0x8c, 0x18, 0xc2, 0x17, 0x24, 0xb7, 0x78, 0xc2, 0xa9, 0xe7, 0x6a, 0x32, 0xd6, 0x29, 0x85, 0xaf, 0xcb, 0x8d, 0x91, 0x13, 0xda, 0x6b],\n            [0x36, 0x0a, 0xc2, 0xb6, 0x4b, 0xa5, 0x5d, 0x07, 0x17, 0x41, 0x31, 0x5f, 0x62, 0x46, 0xf8, 0x92, 0xf9, 0x66, 0x48, 0x73, 0xa6, 0x97, 0x0d, 0x7d, 0x88, 0xee, 0x62, 0xb1, 0x03, 0xa8, 0x3f, 0x2c]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x4a, 0xb1, 0x70, 0x8a, 0xa9, 0xe8, 0x63, 0x79, 0x00, 0xe2, 0x25, 0x16, 0xca, 0x4b, 0x0f, 0xa4, 0x66, 0xad, 0x19, 0x9f, 0x88, 0x67, 0x0c, 0x8b, 0xc2, 0x4a, 0x5b, 0x2b, 0x6d, 0x95, 0xaf, 0x19],\n            [0x8b, 0x9d, 0xb6, 0xcc, 0x60, 0xb4, 0x72, 0x4f, 0x17, 0x69, 0x5a, 0x4a, 0x68, 0x34, 0xab, 0xa1, 0x45, 0x32, 0x3c, 0x83, 0x87, 0x72, 0x30, 0x54, 0x77, 0x68, 0xae, 0xfb, 0xb5, 0x8b, 0x22, 0x5e]],\n        [[0xf1, 0xb9, 0x87, 0x35, 0xc5, 0xbb, 0xb9, 0xcf, 0xf5, 0xd6, 0xcd, 0xd5, 0x0c, 0x7c, 0x0e, 0xe6, 0x90, 0x34, 0xfb, 0x51, 0x42, 0x1e, 0x6d, 0xac, 0x9a, 0x46, 0xc4, 0x97, 0x29, 0x32, 0xbf, 0x45],\n            [0x66, 0x9e, 0xc6, 0x24, 0xc0, 0xed, 0xa5, 0x5d, 0x88, 0xd4, 0xf0, 0x73, 0x97, 0x7b, 0xea, 0x7f, 0x42, 0xff, 0x21, 0xa0, 0x9b, 0x2f, 0x9a, 0xfd, 0x53, 0x57, 0x07, 0x84, 0x48, 0x88, 0x9d, 0x52]],\n        [[0xc6, 0x96, 0x48, 0x34, 0x2a, 0x06, 0xaf, 0x94, 0x3d, 0xf4, 0x1a, 0xcf, 0xf2, 0xc0, 0x21, 0xc2, 0x42, 0x5e, 0xc8, 0x2f, 0x35, 0xa2, 0x3e, 0x29, 0xfa, 0x0c, 0x84, 0xe5, 0x89, 0x72, 0x7c, 0x06],\n            [0x32, 0x65, 0x03, 0xe5, 0x89, 0xa6, 0x6e, 0xb3, 0x5b, 0x8e, 0xca, 0xeb, 0xfe, 0x22, 0x56, 0x8b, 0x5d, 0x14, 0x4b, 0x4d, 0xf9, 0xbe, 0xb5, 0xf5, 0xe6, 0x5c, 0x7b, 0x8b, 0xf4, 0x13, 0x11, 0x34]],\n        [[0x07, 0xc6, 0x22, 0x15, 0xe2, 0x9c, 0x60, 0xa2, 0x19, 0xd9, 0x27, 0xae, 0x37, 0x4e, 0xa6, 0xc9, 0x80, 0xa6, 0x91, 0x8f, 0x12, 0x49, 0xe5, 0x00, 0x18, 0x47, 0xd1, 0xd7, 0x28, 0x22, 0x63, 0x39],\n            [0xe8, 0xe2, 0x00, 0x7e, 0xf2, 0x9e, 0x1e, 0x99, 0x39, 0x95, 0x04, 0xbd, 0x1e, 0x67, 0x7b, 0xb2, 0x26, 0xac, 0xe6, 0xaa, 0xe2, 0x46, 0xd5, 0xe4, 0xe8, 0x86, 0xbd, 0xab, 0x7c, 0x55, 0x59, 0x6f]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x24, 0x64, 0x6e, 0x9b, 0x35, 0x71, 0x78, 0xce, 0x33, 0x03, 0x21, 0x33, 0x36, 0xf1, 0x73, 0x9b, 0xb9, 0x15, 0x8b, 0x2c, 0x69, 0xcf, 0x4d, 0xed, 0x4f, 0x4d, 0x57, 0x14, 0x13, 0x82, 0xa4, 0x4d],\n            [0x65, 0x6e, 0x0a, 0xa4, 0x59, 0x07, 0x17, 0xf2, 0x6b, 0x4a, 0x1f, 0x6e, 0xf6, 0xb5, 0xbc, 0x62, 0xe4, 0xb6, 0xda, 0xa2, 0x93, 0xbc, 0x29, 0x05, 0xd2, 0xd2, 0x73, 0x46, 0x03, 0x16, 0x40, 0x31]],\n        [[0x4c, 0x73, 0x6d, 0x15, 0xbd, 0xa1, 0x4d, 0x5c, 0x13, 0x0b, 0x24, 0x06, 0x98, 0x78, 0x1c, 0x5b, 0xeb, 0x1f, 0x18, 0x54, 0x43, 0xd9, 0x55, 0x66, 0xda, 0x29, 0x21, 0xe8, 0xb8, 0x3c, 0x42, 0x22],\n            [0xb4, 0xcd, 0x08, 0x6f, 0x15, 0x23, 0x1a, 0x0b, 0x22, 0xed, 0xd1, 0xf1, 0xa7, 0xc7, 0x73, 0x45, 0xf3, 0x9e, 0xce, 0x76, 0xb7, 0xf6, 0x39, 0xb6, 0x8e, 0x79, 0xbe, 0xe9, 0x9b, 0xcf, 0x7d, 0x62]],\n        [[0x92, 0x5b, 0xfc, 0x72, 0xfd, 0xba, 0xf1, 0xfd, 0xa6, 0x7c, 0x95, 0xe3, 0x61, 0x3f, 0xe9, 0x03, 0xd4, 0x2b, 0xd4, 0x20, 0xd9, 0xdb, 0x4d, 0x32, 0x3e, 0xf5, 0x11, 0x64, 0xe3, 0xb4, 0xbe, 0x32],\n            [0x86, 0x17, 0x90, 0xe7, 0xc9, 0x1f, 0x10, 0xa5, 0x6a, 0x2d, 0x39, 0xd0, 0x3b, 0xc4, 0xa6, 0xe9, 0x59, 0x13, 0xda, 0x1a, 0xe6, 0xa0, 0xb9, 0x3c, 0x50, 0xb8, 0x40, 0x7c, 0x15, 0x36, 0x5a, 0x42]],\n        [[0xb4, 0x0b, 0x32, 0xab, 0xdc, 0x04, 0x51, 0x55, 0x21, 0x1e, 0x0b, 0x75, 0x99, 0x89, 0x73, 0x35, 0x3a, 0x91, 0x2b, 0xfe, 0xe7, 0x49, 0xea, 0x76, 0xc1, 0xf9, 0x46, 0xb9, 0x53, 0x02, 0x23, 0x04],\n            [0xfc, 0x5a, 0x1e, 0x1d, 0x74, 0x58, 0x95, 0xa6, 0x8f, 0x7b, 0x97, 0x3e, 0x17, 0x3b, 0x79, 0x2d, 0xa6, 0x57, 0xef, 0x45, 0x02, 0x0b, 0x4d, 0x6e, 0x9e, 0x93, 0x8d, 0x2f, 0xd9, 0x9d, 0xdb, 0x04]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xc0, 0xd7, 0x56, 0x97, 0x58, 0x91, 0xde, 0x09, 0x4f, 0x9f, 0xbe, 0x63, 0xb0, 0x83, 0x86, 0x43, 0x5d, 0xbc, 0xe0, 0xf3, 0xc0, 0x75, 0xbf, 0x8b, 0x8e, 0xaa, 0xf7, 0x8b, 0x64, 0x6e, 0xb0, 0x63],\n            [0x16, 0xae, 0x8b, 0xe0, 0x9b, 0x24, 0x68, 0x5c, 0x44, 0xc2, 0xd0, 0x08, 0xb7, 0x7b, 0x62, 0xfd, 0x7f, 0xd8, 0xd4, 0xb7, 0x50, 0xfd, 0x2c, 0x1b, 0xbf, 0x41, 0x95, 0xd9, 0x8e, 0xd8, 0x17, 0x1b]],\n        [[0x86, 0x55, 0x37, 0x8e, 0xc3, 0x38, 0x48, 0x14, 0xb5, 0x97, 0xd2, 0xa7, 0x54, 0x45, 0xf1, 0x35, 0x44, 0x38, 0x9e, 0xf1, 0x1b, 0xb6, 0x34, 0x00, 0x3c, 0x96, 0xee, 0x29, 0x00, 0xea, 0x2c, 0x0b],\n            [0xea, 0xda, 0x99, 0x9e, 0x19, 0x83, 0x66, 0x6d, 0xe9, 0x76, 0x87, 0x50, 0xd1, 0xfd, 0x3c, 0x60, 0x87, 0xc6, 0x41, 0xd9, 0x8e, 0xdb, 0x5e, 0xde, 0xaa, 0x9a, 0xd3, 0x28, 0xda, 0x95, 0xea, 0x47]],\n        [[0xd0, 0x80, 0xba, 0x19, 0xae, 0x1d, 0xa9, 0x79, 0xf6, 0x3f, 0xac, 0x5d, 0x6f, 0x96, 0x1f, 0x2a, 0xce, 0x29, 0xb2, 0xff, 0x37, 0xf1, 0x94, 0x8f, 0x0c, 0xb5, 0x28, 0xba, 0x9a, 0x21, 0xf6, 0x66],\n            [0x02, 0xfb, 0x54, 0xb8, 0x05, 0xf3, 0x81, 0x52, 0x69, 0x34, 0x46, 0x9d, 0x86, 0x76, 0x8f, 0xd7, 0xf8, 0x6a, 0x66, 0xff, 0xe6, 0xa7, 0x90, 0xf7, 0x5e, 0xcd, 0x6a, 0x9b, 0x55, 0xfc, 0x9d, 0x48]],\n        [[0xbd, 0xaa, 0x13, 0xe6, 0xcd, 0x45, 0x4a, 0xa4, 0x59, 0x0a, 0x64, 0xb1, 0x98, 0xd6, 0x34, 0x13, 0x04, 0xe6, 0x97, 0x94, 0x06, 0xcb, 0xd4, 0x4e, 0xbb, 0x96, 0xcd, 0xd1, 0x57, 0xd1, 0xe3, 0x06],\n            [0x7a, 0x6c, 0x45, 0x27, 0xc4, 0x93, 0x7f, 0x7d, 0x7c, 0x62, 0x50, 0x38, 0x3a, 0x6b, 0xb5, 0x88, 0xc6, 0xd9, 0xf1, 0x78, 0x19, 0xb9, 0x39, 0x93, 0x3d, 0xc9, 0xe0, 0x9c, 0x3c, 0xce, 0xf5, 0x72]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x24, 0xea, 0x23, 0x7d, 0x56, 0x2c, 0xe2, 0x59, 0x0e, 0x85, 0x60, 0x04, 0x88, 0x5a, 0x74, 0x1e, 0x4b, 0xef, 0x13, 0xda, 0x4c, 0xff, 0x83, 0x45, 0x85, 0x3f, 0x08, 0x95, 0x2c, 0x20, 0x13, 0x1f],\n            [0x48, 0x5f, 0x27, 0x90, 0x5c, 0x02, 0x42, 0xad, 0x78, 0x47, 0x5c, 0xb5, 0x7e, 0x08, 0x85, 0x00, 0xfa, 0x7f, 0xfd, 0xfd, 0xe7, 0x09, 0x11, 0xf2, 0x7e, 0x1b, 0x38, 0x6c, 0x35, 0x6d, 0x33, 0x66]],\n        [[0x93, 0x03, 0x36, 0x81, 0xac, 0xe4, 0x20, 0x09, 0x35, 0x4c, 0x45, 0xb2, 0x1e, 0x4c, 0x14, 0x21, 0xe6, 0xe9, 0x8a, 0x7b, 0x8d, 0xfe, 0x1e, 0xc6, 0x3e, 0xc1, 0x35, 0xfa, 0xe7, 0x70, 0x4e, 0x1d],\n            [0x61, 0x2e, 0xc2, 0xdd, 0x95, 0x57, 0xd1, 0xab, 0x80, 0xe8, 0x63, 0x17, 0xb5, 0x48, 0xe4, 0x8a, 0x11, 0x9e, 0x72, 0xbe, 0x85, 0x8d, 0x51, 0x0a, 0xf2, 0x9f, 0xe0, 0x1c, 0xa9, 0x07, 0x28, 0x7b]],\n        [[0xbb, 0x71, 0x14, 0x5e, 0x26, 0x8c, 0x3d, 0xc8, 0xe9, 0x7c, 0xd3, 0xd6, 0xd1, 0x2f, 0x07, 0x6d, 0xe6, 0xdf, 0xfb, 0x79, 0xd6, 0x99, 0x59, 0x96, 0x48, 0x40, 0x0f, 0x3a, 0x7b, 0xb2, 0xa0, 0x72],\n            [0x4e, 0x3b, 0x69, 0xc8, 0x43, 0x75, 0x51, 0x6c, 0x79, 0x56, 0xe4, 0xcb, 0xf7, 0xa6, 0x51, 0xc2, 0x2c, 0x42, 0x0b, 0xd4, 0x82, 0x20, 0x1c, 0x01, 0x08, 0x66, 0xd7, 0xbf, 0x04, 0x56, 0xfc, 0x02]],\n        [[0x24, 0xe8, 0xb7, 0x60, 0xae, 0x47, 0x80, 0xfc, 0xe5, 0x23, 0xe7, 0xc2, 0xc9, 0x85, 0xe6, 0x98, 0xa0, 0x29, 0x4e, 0xe1, 0x84, 0x39, 0x2d, 0x95, 0x2c, 0xf3, 0x45, 0x3c, 0xff, 0xaf, 0x27, 0x4c],\n            [0x6b, 0xa6, 0xf5, 0x4b, 0x11, 0xbd, 0xba, 0x5b, 0x9e, 0xc4, 0xa4, 0x51, 0x1e, 0xbe, 0xd0, 0x90, 0x3a, 0x9c, 0xc2, 0x26, 0xb6, 0x1e, 0xf1, 0x95, 0x7d, 0xc8, 0x6d, 0x52, 0xe6, 0x99, 0x2c, 0x5f]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x85, 0xe0, 0x24, 0x32, 0xb4, 0xd1, 0xef, 0xfc, 0x69, 0xa2, 0xbf, 0x8f, 0x72, 0x2c, 0x95, 0xf6, 0xe4, 0x6e, 0x7d, 0x90, 0xf7, 0x57, 0x81, 0xa0, 0xf7, 0xda, 0xef, 0x33, 0x07, 0xe3, 0x6b, 0x78],\n            [0x36, 0x27, 0x3e, 0xc6, 0x12, 0x07, 0xab, 0x4e, 0xbe, 0x69, 0x9d, 0xb3, 0xbe, 0x08, 0x7c, 0x2a, 0x47, 0x08, 0xfd, 0xd4, 0xcd, 0x0e, 0x27, 0x34, 0x5b, 0x98, 0x34, 0x2f, 0x77, 0x5f, 0x3a, 0x65]],\n        [[0x13, 0xaa, 0x2e, 0x4c, 0xf0, 0x22, 0xb8, 0x6c, 0xb3, 0x19, 0x4d, 0xeb, 0x6b, 0xd0, 0xa4, 0xc6, 0x9c, 0xdd, 0xc8, 0x5b, 0x81, 0x57, 0x89, 0xdf, 0x33, 0xa9, 0x68, 0x49, 0x80, 0xe4, 0xfe, 0x21],\n            [0x00, 0x17, 0x90, 0x30, 0xe9, 0xd3, 0x60, 0x30, 0x31, 0xc2, 0x72, 0x89, 0x7a, 0x36, 0xa5, 0xbd, 0x39, 0x83, 0x85, 0x50, 0xa1, 0x5d, 0x6c, 0x41, 0x1d, 0xb5, 0x2c, 0x07, 0x40, 0x77, 0x0b, 0x50]],\n        [[0x64, 0x34, 0xec, 0xc0, 0x9e, 0x44, 0x41, 0xaf, 0xa0, 0x36, 0x05, 0x6d, 0xea, 0x30, 0x25, 0x46, 0x35, 0x24, 0x9d, 0x86, 0xbd, 0x95, 0xf1, 0x6a, 0x46, 0xd7, 0x94, 0x54, 0xf9, 0x3b, 0xbd, 0x5d],\n            [0x77, 0x5b, 0xe2, 0x37, 0xc7, 0xe1, 0x7c, 0x13, 0x8c, 0x9f, 0x7b, 0x7b, 0x2a, 0xce, 0x42, 0xa3, 0xb9, 0x2a, 0x99, 0xa8, 0xc0, 0xd8, 0x3c, 0x86, 0xb0, 0xfb, 0xe9, 0x76, 0x77, 0xf7, 0xf5, 0x56]],\n        [[0xdf, 0xb3, 0x46, 0x11, 0x6e, 0x13, 0xb7, 0x28, 0x4e, 0x56, 0xdd, 0xf1, 0xac, 0xad, 0x58, 0xc3, 0xf8, 0x88, 0x94, 0x5e, 0x06, 0x98, 0xa1, 0xe4, 0x6a, 0xfb, 0x0a, 0x49, 0x5d, 0x8a, 0xfe, 0x77],\n            [0x46, 0x02, 0xf5, 0xa5, 0xaf, 0xc5, 0x75, 0x6d, 0xba, 0x45, 0x35, 0x0a, 0xfe, 0xc9, 0xac, 0x22, 0x91, 0x8d, 0x21, 0x95, 0x33, 0x03, 0xc0, 0x8a, 0x16, 0xf3, 0x39, 0xe0, 0x01, 0x0f, 0x53, 0x3c]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x34, 0x75, 0x37, 0x1f, 0x34, 0x4e, 0xa9, 0x1d, 0x68, 0x67, 0xf8, 0x49, 0x98, 0x96, 0xfc, 0x4c, 0x65, 0x97, 0xf7, 0x02, 0x4a, 0x52, 0x6c, 0x01, 0xbd, 0x48, 0xbb, 0x1b, 0xed, 0xa4, 0xe2, 0x53],\n            [0x59, 0xd5, 0x9b, 0x5a, 0xa2, 0x90, 0xd3, 0xb8, 0x37, 0x4c, 0x55, 0x82, 0x28, 0x08, 0x0f, 0x7f, 0xaa, 0x81, 0x65, 0xe0, 0x0c, 0x52, 0xc9, 0xa3, 0x32, 0x27, 0x64, 0xda, 0xfd, 0x34, 0x23, 0x5a]],\n        [[0xb5, 0xb0, 0x0c, 0x4d, 0xb3, 0x7b, 0x23, 0xc8, 0x1f, 0x8a, 0x39, 0x66, 0xe6, 0xba, 0x4c, 0x10, 0x37, 0xca, 0x9c, 0x7c, 0x05, 0x9e, 0xff, 0xc0, 0xf8, 0x8e, 0xb1, 0x8f, 0x6f, 0x67, 0x18, 0x26],\n            [0x4b, 0x41, 0x13, 0x54, 0x23, 0x1a, 0xa4, 0x4e, 0xa9, 0x8b, 0x1e, 0x4b, 0xfc, 0x15, 0x24, 0xbb, 0x7e, 0xcb, 0xb6, 0x1e, 0x1b, 0xf5, 0xf2, 0xc8, 0x56, 0xec, 0x32, 0xa2, 0x60, 0x5b, 0xa0, 0x2a]],\n        [[0xa4, 0x29, 0x47, 0x86, 0x2e, 0x92, 0x4f, 0x11, 0x4f, 0xf3, 0xb2, 0x5c, 0xd5, 0x3e, 0xa6, 0xb9, 0xc8, 0xe2, 0x33, 0x11, 0x1f, 0x01, 0x8f, 0xb0, 0x9b, 0xc7, 0xa5, 0xff, 0x83, 0x0f, 0x1e, 0x28],\n            [0x1d, 0x29, 0x7a, 0xa1, 0xec, 0x8e, 0xb5, 0xad, 0xea, 0x02, 0x68, 0x60, 0x74, 0x29, 0x1c, 0xa5, 0xcf, 0xc8, 0x3b, 0x7d, 0x8b, 0x2b, 0x7c, 0xad, 0xa4, 0x40, 0x17, 0x51, 0x59, 0x7c, 0x2e, 0x5d]],\n        [[0x0a, 0x6c, 0x4f, 0xbc, 0x3e, 0x32, 0xe7, 0x4a, 0x1a, 0x13, 0xc1, 0x49, 0x38, 0xbf, 0xf7, 0xc2, 0xd3, 0x8f, 0x6b, 0xad, 0x52, 0xf7, 0xcf, 0xbc, 0x27, 0xcb, 0x40, 0x67, 0x76, 0xcd, 0x6d, 0x56],\n            [0xe5, 0xb0, 0x27, 0xad, 0xbe, 0x9b, 0xf2, 0xb5, 0x63, 0xde, 0x3a, 0x23, 0x95, 0xb7, 0x0a, 0x7e, 0xf3, 0x9e, 0x45, 0x6f, 0x19, 0x39, 0x75, 0x8f, 0x39, 0x3d, 0x0f, 0xc0, 0x9f, 0xf1, 0xe9, 0x51]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x88, 0xaa, 0x14, 0x24, 0x86, 0x94, 0x11, 0x12, 0x3e, 0x1a, 0xb5, 0xcc, 0xbb, 0xe0, 0x9c, 0xd5, 0x9c, 0x6d, 0xba, 0x58, 0x72, 0x8d, 0xfb, 0x22, 0x7b, 0x9f, 0x7c, 0x94, 0x30, 0xb3, 0x51, 0x21],\n            [0xf6, 0x74, 0x3d, 0xf2, 0xaf, 0xd0, 0x1e, 0x03, 0x7c, 0x23, 0x6b, 0xc9, 0xfc, 0x25, 0x70, 0x90, 0xdc, 0x9a, 0xa4, 0xfb, 0x49, 0xfc, 0x3d, 0x0a, 0x35, 0x38, 0x6f, 0xe4, 0x7e, 0x50, 0x01, 0x2a]],\n        [[0xd6, 0xe3, 0x96, 0x61, 0x3a, 0xfd, 0xef, 0x9b, 0x1f, 0x90, 0xa4, 0x24, 0x14, 0x5b, 0xc8, 0xde, 0x50, 0xb1, 0x1d, 0xaf, 0xe8, 0x55, 0x8a, 0x87, 0x0d, 0xfe, 0xaa, 0x3b, 0x82, 0x2c, 0x8d, 0x7b],\n            [0x85, 0x0c, 0xaf, 0xf8, 0x83, 0x44, 0x49, 0xd9, 0x45, 0xcf, 0xf7, 0x48, 0xd9, 0x53, 0xb4, 0xf1, 0x65, 0xa0, 0xe1, 0xc3, 0xb3, 0x15, 0xed, 0x89, 0x9b, 0x4f, 0x62, 0xb3, 0x57, 0xa5, 0x45, 0x1c]],\n        [[0x8f, 0x12, 0xea, 0xaf, 0xd1, 0x1f, 0x79, 0x10, 0x0b, 0xf6, 0xa3, 0x7b, 0xea, 0xac, 0x8b, 0x57, 0x32, 0x62, 0xe7, 0x06, 0x12, 0x51, 0xa0, 0x3b, 0x43, 0x5e, 0xa4, 0x20, 0x78, 0x31, 0xce, 0x0d],\n            [0x84, 0x7c, 0xc2, 0xa6, 0x91, 0x23, 0xce, 0xbd, 0xdc, 0xf9, 0xce, 0xd5, 0x75, 0x30, 0x22, 0xe6, 0xf9, 0x43, 0x62, 0x0d, 0xf7, 0x75, 0x9d, 0x7f, 0x8c, 0xff, 0x7d, 0xe4, 0x72, 0xac, 0x9f, 0x1c]],\n        [[0x88, 0xc1, 0x99, 0xd0, 0x3c, 0x1c, 0x5d, 0xb4, 0xef, 0x13, 0x0f, 0x90, 0xb9, 0x36, 0x2f, 0x95, 0x95, 0xc6, 0xdc, 0xde, 0x0a, 0x51, 0xe2, 0x8d, 0xf3, 0xbc, 0x51, 0xec, 0xdf, 0xb1, 0xa2, 0x5f],\n            [0x2e, 0x68, 0xa1, 0x23, 0x7d, 0x9b, 0x40, 0x69, 0x85, 0x7b, 0x42, 0xbf, 0x90, 0x4b, 0xd6, 0x40, 0x2f, 0xd7, 0x52, 0x52, 0xb2, 0x21, 0xde, 0x64, 0xbd, 0x88, 0xc3, 0x6d, 0xa5, 0xfa, 0x81, 0x3f]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xfb, 0xfd, 0x47, 0x7b, 0x8a, 0x66, 0x9e, 0x79, 0x2e, 0x64, 0x82, 0xef, 0xf7, 0x21, 0xec, 0xf6, 0xd8, 0x86, 0x09, 0x31, 0x7c, 0xdd, 0x03, 0x6a, 0x58, 0xa0, 0x77, 0xb7, 0x9b, 0x8c, 0x87, 0x1f],\n            [0x55, 0x47, 0xe4, 0xa8, 0x3d, 0x55, 0x21, 0x34, 0xab, 0x1d, 0xae, 0xe0, 0xf4, 0xea, 0xdb, 0xc5, 0xb9, 0x58, 0xbf, 0xc4, 0x2a, 0x89, 0x31, 0x1a, 0xf4, 0x2d, 0xe1, 0xca, 0x37, 0x99, 0x47, 0x59]],\n        [[0xc7, 0xca, 0x63, 0xc1, 0x49, 0xa9, 0x35, 0x45, 0x55, 0x7e, 0xda, 0x64, 0x32, 0x07, 0x50, 0xf7, 0x32, 0xac, 0xde, 0x75, 0x58, 0x9b, 0x11, 0xb2, 0x3a, 0x1f, 0xf5, 0xf7, 0x79, 0x04, 0xe6, 0x08],\n            [0x46, 0xfa, 0x22, 0x4b, 0xfa, 0xe1, 0xfe, 0x96, 0xfc, 0x67, 0xba, 0x67, 0x97, 0xc4, 0xe7, 0x1b, 0x86, 0x90, 0x5f, 0xee, 0xf4, 0x5b, 0x11, 0xb2, 0xcd, 0xad, 0xee, 0xc2, 0x48, 0x6c, 0x2b, 0x1b]],\n        [[0xe3, 0x39, 0x62, 0xb4, 0x4f, 0x31, 0x04, 0xc9, 0xda, 0xd5, 0x73, 0x51, 0x57, 0xc5, 0xb8, 0xf3, 0xa3, 0x43, 0x70, 0xe4, 0x61, 0x81, 0x84, 0xe2, 0xbb, 0xbf, 0x4f, 0x9e, 0xa4, 0x5e, 0x74, 0x06],\n            [0x29, 0xac, 0xff, 0x27, 0xe0, 0x59, 0xbe, 0x39, 0x9c, 0x0d, 0x83, 0xd7, 0x10, 0x0b, 0x15, 0xb7, 0xe1, 0xc2, 0x2c, 0x30, 0x73, 0x80, 0x3a, 0x7d, 0x5d, 0xab, 0x58, 0x6b, 0xc1, 0xf0, 0xf4, 0x22]],\n        [[0xfe, 0x7f, 0xfb, 0x35, 0x7d, 0xc6, 0x01, 0x23, 0x28, 0xc4, 0x02, 0xac, 0x1f, 0x42, 0xb4, 0x9d, 0xfc, 0x00, 0x94, 0xa5, 0xee, 0xca, 0xda, 0x97, 0x09, 0x41, 0x77, 0x87, 0x5d, 0x7b, 0x87, 0x78],\n            [0xf5, 0xfb, 0x90, 0x2d, 0x81, 0x19, 0x9e, 0x2f, 0x6d, 0x85, 0x88, 0x8c, 0x40, 0x5c, 0x77, 0x41, 0x4d, 0x01, 0x19, 0x76, 0x60, 0xe8, 0x4c, 0x48, 0xe4, 0x33, 0x83, 0x32, 0x6c, 0xb4, 0x41, 0x03]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xff, 0x10, 0xc2, 0x09, 0x4f, 0x6e, 0xf4, 0xd2, 0xdf, 0x7e, 0xca, 0x7b, 0x1c, 0x1d, 0xba, 0xa3, 0xb6, 0xda, 0x67, 0x33, 0xd4, 0x87, 0x36, 0x4b, 0x11, 0x20, 0x05, 0xa6, 0x29, 0xc1, 0x87, 0x17],\n            [0xf6, 0x96, 0xca, 0x2f, 0xda, 0x38, 0xa7, 0x1b, 0xfc, 0xca, 0x7d, 0xfe, 0x08, 0x89, 0xe2, 0x47, 0x2b, 0x6a, 0x5d, 0x4b, 0xfa, 0xa1, 0xb4, 0xde, 0xb6, 0xc2, 0x31, 0x51, 0xf5, 0xe0, 0xa4, 0x0b]],\n        [[0x5c, 0xe5, 0xc6, 0x04, 0x8e, 0x2b, 0x57, 0xbe, 0x38, 0x85, 0x23, 0xcb, 0xb7, 0xbe, 0x4f, 0xa9, 0xd3, 0x6e, 0x12, 0xaa, 0xd5, 0xb2, 0x2e, 0x93, 0x29, 0x9a, 0x4a, 0x88, 0x18, 0x43, 0xf5, 0x01],\n            [0x50, 0xfc, 0xdb, 0xa2, 0x59, 0x21, 0x8d, 0xbd, 0x7e, 0x33, 0xae, 0x2f, 0x87, 0x1a, 0xd0, 0x97, 0xc7, 0x0d, 0x4d, 0x63, 0x01, 0xef, 0x05, 0x84, 0xec, 0x40, 0xdd, 0xa8, 0x0a, 0x4f, 0x70, 0x0b]],\n        [[0x41, 0x69, 0x01, 0x67, 0x5c, 0xd3, 0x8a, 0xc5, 0xcf, 0x3f, 0xd1, 0x57, 0xd1, 0x67, 0x3e, 0x01, 0x39, 0xb5, 0xcb, 0x81, 0x56, 0x96, 0x26, 0xb6, 0xc2, 0xe7, 0x5c, 0xfb, 0x63, 0x97, 0x58, 0x06],\n            [0x0c, 0x0e, 0xf3, 0xba, 0xf0, 0xe5, 0xba, 0xb2, 0x57, 0x77, 0xc6, 0x20, 0x9b, 0x89, 0x24, 0xbe, 0xf2, 0x9c, 0x8a, 0xba, 0x69, 0xc1, 0xf1, 0xb0, 0x4f, 0x2a, 0x05, 0x9a, 0xee, 0x10, 0x7e, 0x36]],\n        [[0x3f, 0x26, 0xe9, 0x40, 0xe9, 0x03, 0xad, 0x06, 0x69, 0x91, 0xe0, 0xd1, 0x89, 0x60, 0x84, 0x79, 0xde, 0x27, 0x6d, 0xe6, 0x76, 0xbd, 0xea, 0xe6, 0xae, 0x48, 0xc3, 0x67, 0xc0, 0x57, 0xcd, 0x2f],\n            [0x7f, 0xc1, 0xdc, 0xb9, 0xc7, 0xbc, 0x86, 0x3d, 0x55, 0x4b, 0x28, 0x7a, 0xfb, 0x4d, 0xc7, 0xf8, 0xbc, 0x67, 0x2a, 0x60, 0x4d, 0x8f, 0x07, 0x0b, 0x1a, 0x17, 0xbf, 0xfa, 0xac, 0xa7, 0x3d, 0x1a]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x91, 0x3f, 0xed, 0x5e, 0x18, 0x78, 0x3f, 0x23, 0x2c, 0x0d, 0x8c, 0x44, 0x00, 0xe8, 0xfb, 0xe9, 0x8e, 0xd6, 0xd1, 0x36, 0x58, 0x57, 0x9e, 0xae, 0x4b, 0x5c, 0x0b, 0x07, 0xbc, 0x6b, 0x55, 0x2b],\n            [0x6f, 0x4d, 0x17, 0xd7, 0xe1, 0x84, 0xd9, 0x78, 0xb1, 0x90, 0xfd, 0x2e, 0xb3, 0xb5, 0x19, 0x3f, 0x1b, 0xfa, 0xc0, 0x68, 0xb3, 0xdd, 0x00, 0x2e, 0x89, 0xbd, 0x7e, 0x80, 0x32, 0x13, 0xa0, 0x7b]],\n        [[0x1a, 0x6f, 0x40, 0xaf, 0x44, 0x44, 0xb0, 0x43, 0x8f, 0x0d, 0xd0, 0x1e, 0xc4, 0x0b, 0x19, 0x5d, 0x8e, 0xfe, 0xc1, 0xf3, 0xc5, 0x5c, 0x91, 0xf8, 0x04, 0x4e, 0xbe, 0x90, 0xb4, 0x47, 0x5c, 0x3f],\n            [0xb0, 0x3b, 0x2c, 0xf3, 0xfe, 0x32, 0x71, 0x07, 0x3f, 0xaa, 0xba, 0x45, 0x60, 0xa8, 0x8d, 0xea, 0x54, 0xcb, 0x39, 0x10, 0xb4, 0xf2, 0x8b, 0xd2, 0x14, 0x82, 0x42, 0x07, 0x8e, 0xe9, 0x7c, 0x53]],\n        [[0xb0, 0xae, 0xc1, 0x8d, 0xc9, 0x8f, 0xb9, 0x7a, 0x77, 0xef, 0xba, 0x79, 0xa0, 0x3c, 0xa8, 0xf5, 0x6a, 0xe2, 0x3f, 0x5d, 0x00, 0xe3, 0x4b, 0x45, 0x24, 0x7b, 0x43, 0x78, 0x55, 0x1d, 0x2b, 0x1e],\n            [0x01, 0xb8, 0xd6, 0x16, 0x67, 0xa0, 0x15, 0xb9, 0xe1, 0x58, 0xa4, 0xa7, 0x31, 0x37, 0x77, 0x2f, 0x8b, 0x12, 0x9f, 0xf4, 0x3f, 0xc7, 0x36, 0x66, 0xd2, 0xa8, 0x56, 0xf7, 0x7f, 0x74, 0xc6, 0x41]],\n        [[0x5d, 0xf8, 0xb4, 0xa8, 0x30, 0xdd, 0xcc, 0x38, 0xa5, 0xd3, 0xca, 0xd8, 0xd1, 0xf8, 0xb2, 0x31, 0x91, 0xd4, 0x72, 0x05, 0x57, 0x4a, 0x3b, 0x82, 0x4a, 0xc6, 0x68, 0x20, 0xe2, 0x18, 0x41, 0x61],\n            [0x19, 0xd4, 0x8d, 0x47, 0x29, 0x12, 0x65, 0xb0, 0x11, 0x78, 0x47, 0xb5, 0xcb, 0xa3, 0xa5, 0xfa, 0x05, 0x85, 0x54, 0xa9, 0x33, 0x97, 0x8d, 0x2b, 0xc2, 0xfe, 0x99, 0x35, 0x28, 0xe5, 0xeb, 0x63]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xb1, 0x3f, 0x3f, 0xef, 0xd8, 0xf4, 0xfc, 0xb3, 0xa0, 0x60, 0x50, 0x06, 0x2b, 0x29, 0x52, 0x70, 0x15, 0x0b, 0x24, 0x24, 0xf8, 0x5f, 0x79, 0x18, 0xcc, 0xff, 0x89, 0x99, 0x84, 0xa1, 0xae, 0x13],\n            [0x44, 0x1f, 0xb8, 0xc2, 0x01, 0xc1, 0x30, 0x19, 0x55, 0x05, 0x60, 0x10, 0xa4, 0x6c, 0x2d, 0x67, 0x70, 0xe5, 0x25, 0x1b, 0xf2, 0xbf, 0xdd, 0xfb, 0x70, 0x2b, 0xa1, 0x8c, 0x9c, 0x94, 0x84, 0x08]],\n        [[0xe7, 0xc4, 0x43, 0x4d, 0xc9, 0x2b, 0x69, 0x5d, 0x1d, 0x3c, 0xaf, 0xbb, 0x43, 0x38, 0x4e, 0x98, 0x3d, 0xed, 0x0d, 0x21, 0x03, 0xfd, 0xf0, 0x99, 0x47, 0x04, 0xb0, 0x98, 0x69, 0x55, 0x72, 0x0f],\n            [0x5e, 0xdf, 0x15, 0x53, 0x3b, 0x86, 0x80, 0xb0, 0xf1, 0x70, 0x68, 0x8f, 0x66, 0x7c, 0x0e, 0x49, 0x1a, 0xd8, 0x6b, 0xfe, 0x4e, 0xef, 0xca, 0x47, 0xd4, 0x03, 0xc1, 0x37, 0x50, 0x9c, 0xc1, 0x16]],\n        [[0xcd, 0x24, 0xc6, 0x3e, 0x0c, 0x82, 0x9b, 0x91, 0x2b, 0x61, 0x4a, 0xb2, 0x0f, 0x88, 0x55, 0x5f, 0x5a, 0x57, 0xff, 0xe5, 0x74, 0x0b, 0x13, 0x43, 0x00, 0xd8, 0x6b, 0xcf, 0xd2, 0x15, 0x03, 0x2c],\n            [0xdc, 0xff, 0x15, 0x61, 0x2f, 0x4a, 0x2f, 0x62, 0xf2, 0x04, 0x2f, 0xb5, 0x0c, 0xb7, 0x1e, 0x3f, 0x74, 0x1a, 0x0f, 0xd7, 0xea, 0xcd, 0xd9, 0x7d, 0xf6, 0x12, 0x0e, 0x2f, 0xdb, 0x5a, 0x3b, 0x16]],\n        [[0x1b, 0x37, 0x47, 0xe3, 0xf5, 0x9e, 0xea, 0x2c, 0x2a, 0xe7, 0x82, 0x36, 0xf4, 0x1f, 0x81, 0x47, 0x92, 0x4b, 0x69, 0x0e, 0x11, 0x8c, 0x5d, 0x53, 0x5b, 0x81, 0x27, 0x08, 0xbc, 0xa0, 0xae, 0x25],\n            [0x69, 0x32, 0xa1, 0x05, 0x11, 0x42, 0x00, 0xd2, 0x59, 0xac, 0x4d, 0x62, 0x8b, 0x13, 0xe2, 0x50, 0x5d, 0xa0, 0x9d, 0x9b, 0xfd, 0xbb, 0x12, 0x41, 0x75, 0x41, 0x9e, 0xcc, 0xdc, 0xc7, 0xdc, 0x5d]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xd9, 0xe3, 0x38, 0x06, 0x46, 0x70, 0x82, 0x5e, 0x28, 0x49, 0x79, 0xff, 0x25, 0xd2, 0x4e, 0x29, 0x8d, 0x06, 0xb0, 0x23, 0xae, 0x9b, 0x66, 0xe4, 0x7d, 0xc0, 0x70, 0x91, 0xa3, 0xfc, 0xec, 0x4e],\n            [0x62, 0x12, 0x37, 0x6a, 0x30, 0xf6, 0x1e, 0xfb, 0x14, 0x5c, 0x0d, 0x0e, 0xb7, 0x81, 0x6a, 0xe7, 0x08, 0x05, 0xac, 0xaa, 0x38, 0x46, 0xe2, 0x73, 0xea, 0x4b, 0x07, 0x81, 0x43, 0x7c, 0x9e, 0x5e]],\n        [[0xfc, 0xf9, 0x21, 0x4f, 0x2e, 0x76, 0x9b, 0x1f, 0x28, 0x60, 0x77, 0x43, 0x32, 0x9d, 0xbe, 0x17, 0x30, 0x2a, 0xc6, 0x18, 0x92, 0x66, 0x62, 0x30, 0x98, 0x40, 0x11, 0xa6, 0x7f, 0x18, 0x84, 0x28],\n            [0x3f, 0xab, 0xd3, 0xf4, 0x8a, 0x76, 0xa1, 0x3c, 0xca, 0x2d, 0x49, 0xc3, 0xea, 0x08, 0x0b, 0x85, 0x17, 0x2a, 0xc3, 0x6c, 0x08, 0xfd, 0x57, 0x9f, 0x3d, 0x5f, 0xdf, 0x67, 0x68, 0x42, 0x00, 0x32]],\n        [[0x51, 0x60, 0x1b, 0x06, 0x4f, 0x8a, 0x21, 0xba, 0x38, 0xa8, 0xba, 0xd6, 0x40, 0xf6, 0xe9, 0x9b, 0x76, 0x4d, 0x56, 0x21, 0x5b, 0x0a, 0x9b, 0x2e, 0x4f, 0x3d, 0x81, 0x32, 0x08, 0x9f, 0x97, 0x5b],\n            [0xe5, 0x44, 0xec, 0x06, 0x9d, 0x90, 0x79, 0x9f, 0xd3, 0xe0, 0x79, 0xaf, 0x8f, 0x10, 0xfd, 0xdd, 0x04, 0xae, 0x27, 0x97, 0x46, 0x33, 0x79, 0xea, 0xb8, 0x4e, 0xca, 0x5a, 0x59, 0x57, 0xe1, 0x0e]],\n        [[0x1a, 0xda, 0xf3, 0xa5, 0x41, 0x43, 0x28, 0xfc, 0x7e, 0xe7, 0x71, 0xea, 0xc6, 0x3b, 0x59, 0xcc, 0x2e, 0xd3, 0x40, 0xec, 0xb3, 0x13, 0x6f, 0x44, 0xcd, 0x13, 0xb2, 0x37, 0xf2, 0x6e, 0xd9, 0x1c],\n            [0xe3, 0xdb, 0x60, 0xcd, 0x5c, 0x4a, 0x18, 0x0f, 0xef, 0x73, 0x36, 0x71, 0x8c, 0xf6, 0x11, 0xb4, 0xd8, 0xce, 0x17, 0x5e, 0x4f, 0x26, 0x77, 0x97, 0x5f, 0xcb, 0xef, 0x91, 0xeb, 0x6a, 0x62, 0x7a]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x18, 0x4a, 0xa2, 0x97, 0x08, 0x81, 0x2d, 0x83, 0xc4, 0xcc, 0xf0, 0x83, 0x7e, 0xec, 0x0d, 0x95, 0x4c, 0x5b, 0xfb, 0xfa, 0x98, 0x80, 0x4a, 0x66, 0x56, 0x0c, 0x51, 0xb3, 0xf2, 0x04, 0x5d, 0x27],\n            [0x3b, 0xb9, 0xb8, 0x06, 0x5a, 0x2e, 0xfe, 0xc3, 0x82, 0x37, 0x9c, 0xa3, 0x11, 0x1f, 0x9c, 0xa6, 0xda, 0x63, 0x48, 0x9b, 0xad, 0xde, 0x2d, 0xa6, 0xbc, 0x6e, 0x32, 0xda, 0x27, 0x65, 0xdd, 0x57]],\n        [[0x84, 0x4f, 0x37, 0x31, 0x7d, 0x2e, 0xbc, 0xad, 0x87, 0x07, 0x2a, 0x6b, 0x37, 0xfc, 0x5f, 0xeb, 0x4e, 0x75, 0x35, 0xa6, 0xde, 0xab, 0x0a, 0x19, 0x3a, 0xb7, 0xb1, 0xef, 0x92, 0x6a, 0x3b, 0x3c],\n            [0x3b, 0xb2, 0x94, 0x6d, 0x39, 0x60, 0xac, 0xee, 0xe7, 0x81, 0x1a, 0x3b, 0x76, 0x87, 0x5c, 0x05, 0x94, 0x2a, 0x45, 0xb9, 0x80, 0xe9, 0x22, 0xb1, 0x07, 0xcb, 0x40, 0x9e, 0x70, 0x49, 0x6d, 0x12]],\n        [[0xfd, 0x18, 0x78, 0x84, 0xa8, 0x4c, 0x7d, 0x6e, 0x59, 0xa6, 0xe5, 0x74, 0xf1, 0x19, 0xa6, 0x84, 0x2e, 0x51, 0xc1, 0x29, 0x13, 0xf2, 0x14, 0x6b, 0x5d, 0x53, 0x51, 0xf7, 0xef, 0xbf, 0x01, 0x22],\n            [0xa4, 0x4b, 0x62, 0x4c, 0xe6, 0xfd, 0x72, 0x07, 0xf2, 0x81, 0xfc, 0xf2, 0xbd, 0x12, 0x7c, 0x68, 0x76, 0x2a, 0xba, 0xf5, 0x65, 0xb1, 0x1f, 0x17, 0x0a, 0x38, 0xb0, 0xbf, 0xc0, 0xf8, 0xf4, 0x2a]],\n        [[0x55, 0x60, 0x55, 0x5b, 0xe4, 0x1d, 0x71, 0x4c, 0x9d, 0x5b, 0x9f, 0x70, 0xa6, 0x85, 0x9a, 0x2c, 0xa0, 0xe2, 0x32, 0x48, 0xce, 0x9e, 0x2a, 0xa5, 0x07, 0x3b, 0xc7, 0x6c, 0x86, 0x77, 0xde, 0x3c],\n            [0xf7, 0x18, 0x7a, 0x96, 0x7e, 0x43, 0x57, 0xa9, 0x55, 0xfc, 0x4e, 0xb6, 0x72, 0x00, 0xf2, 0xe4, 0xd7, 0x52, 0xd3, 0xd3, 0xb6, 0x85, 0xf6, 0x71, 0xc7, 0x44, 0x3f, 0x7f, 0xd7, 0xb3, 0xf2, 0x79]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x46, 0xca, 0xa7, 0x55, 0x7b, 0x79, 0xf3, 0xca, 0x5a, 0x65, 0xf6, 0xed, 0x50, 0x14, 0x7b, 0xe4, 0xc4, 0x2a, 0x65, 0x9e, 0xe2, 0xf9, 0xca, 0xa7, 0x22, 0x26, 0x53, 0xcb, 0x21, 0x5b, 0xa7, 0x31],\n            [0x90, 0xd7, 0xc5, 0x26, 0x08, 0xbd, 0xb0, 0x53, 0x63, 0x58, 0xc3, 0x31, 0x5e, 0x75, 0x46, 0x15, 0x91, 0xa6, 0xf8, 0x2f, 0x1a, 0x08, 0x65, 0x88, 0x2f, 0x98, 0x04, 0xf1, 0x7c, 0x6e, 0x00, 0x77]],\n        [[0x81, 0x21, 0x61, 0x09, 0xf6, 0x4e, 0xf1, 0x92, 0xee, 0x63, 0x61, 0x73, 0x87, 0xc7, 0x54, 0x0e, 0x42, 0x4b, 0xc9, 0x47, 0xd1, 0xb8, 0x7e, 0x91, 0x75, 0x37, 0x99, 0x28, 0xb8, 0xdd, 0x7f, 0x50],\n            [0x89, 0x8f, 0xc0, 0xbe, 0x5d, 0xd6, 0x9f, 0xa0, 0xf0, 0x9d, 0x81, 0xce, 0x3a, 0x7b, 0x98, 0x58, 0xbb, 0xd7, 0x78, 0xc8, 0x3f, 0x13, 0xf1, 0x74, 0x19, 0xdf, 0xf8, 0x98, 0x89, 0x5d, 0xfa, 0x5f]],\n        [[0x9e, 0x35, 0x85, 0x94, 0x47, 0x1f, 0x90, 0x15, 0x26, 0xd0, 0x84, 0xed, 0x8a, 0x80, 0xf7, 0x63, 0x42, 0x86, 0x27, 0xd7, 0xf4, 0x75, 0x58, 0xdc, 0x9c, 0xc0, 0x22, 0x7e, 0x20, 0x35, 0xfd, 0x1f],\n            [0x68, 0x0e, 0x6f, 0x97, 0xba, 0x70, 0xbb, 0xa3, 0x0e, 0xe5, 0x0b, 0x12, 0xf4, 0xa2, 0xdc, 0x47, 0xf8, 0xe6, 0xd0, 0x23, 0x6c, 0x33, 0xa8, 0x99, 0x46, 0x6e, 0x0f, 0x44, 0xba, 0x76, 0x48, 0x0f]],\n        [[0xa3, 0x2a, 0x61, 0x37, 0xe2, 0x59, 0x12, 0x0e, 0x27, 0xba, 0x64, 0x43, 0xae, 0xc0, 0x42, 0x69, 0x79, 0xa4, 0x1e, 0x29, 0x8b, 0x15, 0xeb, 0xf8, 0xaf, 0xd4, 0xa2, 0x68, 0x33, 0xb5, 0x7a, 0x24],\n            [0x2c, 0x19, 0x33, 0xdd, 0x1b, 0xab, 0xec, 0x01, 0xb0, 0x23, 0xf8, 0x42, 0x2b, 0x06, 0x88, 0xea, 0x3d, 0x2d, 0x00, 0x2a, 0x78, 0x45, 0x4d, 0x38, 0xed, 0x2e, 0x2e, 0x44, 0x49, 0xed, 0xcb, 0x33]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xa0, 0x68, 0xe8, 0x41, 0x8f, 0x91, 0xf8, 0x11, 0x13, 0x90, 0x2e, 0xa7, 0xab, 0x30, 0xef, 0xad, 0xa0, 0x61, 0x00, 0x88, 0xef, 0xdb, 0xce, 0x5b, 0x5c, 0xbb, 0x62, 0xc8, 0x56, 0xf9, 0x00, 0x73],\n            [0x3f, 0x60, 0xc1, 0x82, 0x2d, 0xa3, 0x28, 0x58, 0x24, 0x9e, 0x9f, 0xe3, 0x70, 0xcc, 0x09, 0x4e, 0x1a, 0x3f, 0x11, 0x11, 0x15, 0x07, 0x3c, 0xa4, 0x41, 0xe0, 0x65, 0xa3, 0x0a, 0x41, 0x6d, 0x11]],\n        [[0x31, 0x40, 0x01, 0x52, 0x56, 0x94, 0x5b, 0x28, 0x8a, 0xaa, 0x52, 0xee, 0xd8, 0x0a, 0x05, 0x8d, 0xcd, 0xb5, 0xaa, 0x2e, 0x38, 0xaa, 0xb7, 0x87, 0xf7, 0x2b, 0xfb, 0x04, 0xcb, 0x84, 0x3d, 0x54],\n            [0x20, 0xef, 0x59, 0xde, 0xa4, 0x2b, 0x93, 0x6e, 0x2e, 0xec, 0x42, 0x9a, 0xd4, 0x2d, 0xf4, 0x46, 0x58, 0x27, 0x2b, 0x18, 0x8f, 0x83, 0x3d, 0x69, 0x9e, 0xd4, 0x3e, 0xb6, 0xc5, 0xfd, 0x58, 0x03]],\n        [[0x33, 0x89, 0xc9, 0x63, 0x62, 0x1c, 0x17, 0xb4, 0x60, 0xc4, 0x26, 0x68, 0x09, 0xc3, 0x2e, 0x37, 0x0f, 0x7b, 0xb4, 0x9c, 0xb6, 0xf9, 0xfb, 0xd4, 0x51, 0x78, 0xc8, 0x63, 0xea, 0x77, 0x47, 0x07],\n            [0x32, 0xb4, 0x18, 0x47, 0x79, 0xcb, 0xd4, 0x5a, 0x07, 0x14, 0x0f, 0xa0, 0xd5, 0xac, 0xd0, 0x41, 0x40, 0xab, 0x61, 0x23, 0xe5, 0x2a, 0x2a, 0x6f, 0xf7, 0xa8, 0xd4, 0x76, 0xef, 0xe7, 0x45, 0x6c]],\n        [[0xa1, 0x5e, 0x60, 0x4f, 0xfb, 0xe1, 0x70, 0x6a, 0x1f, 0x55, 0x4f, 0x09, 0xb4, 0x95, 0x33, 0x36, 0xc6, 0x81, 0x01, 0x18, 0x06, 0x25, 0x27, 0xa4, 0xb4, 0x24, 0xa4, 0x86, 0x03, 0x4c, 0xac, 0x02],\n            [0x77, 0x38, 0xde, 0xd7, 0x60, 0x48, 0x07, 0xf0, 0x74, 0xa8, 0xff, 0x54, 0xe5, 0x30, 0x43, 0xff, 0x77, 0xfb, 0x21, 0x07, 0xff, 0xb2, 0x07, 0x6b, 0xe4, 0xe5, 0x30, 0xfc, 0x19, 0x6c, 0xa3, 0x01]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x13, 0xc5, 0x2c, 0xac, 0xd3, 0x83, 0x82, 0x7c, 0x29, 0xf7, 0x05, 0xa5, 0x00, 0xb6, 0x1f, 0x86, 0x55, 0xf4, 0xd6, 0x2f, 0x0c, 0x99, 0xd0, 0x65, 0x9b, 0x6b, 0x46, 0x0d, 0x43, 0xf8, 0x16, 0x28],\n            [0x1e, 0x7f, 0xb4, 0x74, 0x7e, 0xb1, 0x89, 0x4f, 0x18, 0x5a, 0xab, 0x64, 0x06, 0xdf, 0x45, 0x87, 0xe0, 0x6a, 0xc6, 0xf0, 0x0e, 0xc9, 0x24, 0x35, 0x38, 0xea, 0x30, 0x54, 0xb4, 0xc4, 0x52, 0x54]],\n        [[0xe9, 0x9f, 0xdc, 0x3f, 0xc1, 0x89, 0x44, 0x74, 0x27, 0xe4, 0xc1, 0x90, 0xff, 0x4a, 0xa7, 0x3c, 0xee, 0xcd, 0xf4, 0x1d, 0x25, 0x94, 0x7f, 0x63, 0x16, 0x48, 0xbc, 0x64, 0xfe, 0x95, 0xc4, 0x0c],\n            [0x8b, 0x19, 0x75, 0x6e, 0x03, 0x06, 0x5e, 0x6a, 0x6f, 0x1a, 0x8c, 0xe3, 0xd3, 0x28, 0xf2, 0xe0, 0xb9, 0x7a, 0x43, 0x69, 0xe6, 0xd3, 0xc0, 0xfe, 0x7e, 0x97, 0xab, 0x6c, 0x7b, 0x8e, 0x13, 0x42]],\n        [[0xd4, 0xca, 0x70, 0x3d, 0xab, 0xfb, 0x5f, 0x5e, 0x00, 0x0c, 0xcc, 0x77, 0x22, 0xf8, 0x78, 0x55, 0xae, 0x62, 0x35, 0xfb, 0x9a, 0xc6, 0x03, 0xe4, 0x0c, 0xee, 0xab, 0xc7, 0xc0, 0x89, 0x87, 0x54],\n            [0x32, 0xad, 0xae, 0x85, 0x58, 0x43, 0xb8, 0xb1, 0xe6, 0x3e, 0x00, 0x9c, 0x78, 0x88, 0x56, 0xdb, 0x9c, 0xfc, 0x79, 0xf6, 0xf9, 0x41, 0x5f, 0xb7, 0xbc, 0x11, 0xf9, 0x20, 0x36, 0x1c, 0x53, 0x2b]],\n        [[0x5a, 0x20, 0x5b, 0xa1, 0xa5, 0x44, 0x91, 0x24, 0x02, 0x63, 0x12, 0x64, 0xb8, 0x55, 0xf6, 0xde, 0x2c, 0xdb, 0x47, 0xb8, 0xc6, 0x0a, 0xc3, 0x00, 0x78, 0x93, 0xd8, 0xf5, 0xf5, 0x18, 0x28, 0x0a],\n            [0xd6, 0x1b, 0x9a, 0x6c, 0xe5, 0x46, 0xea, 0x70, 0x96, 0x8d, 0x4e, 0x2a, 0x52, 0x21, 0x26, 0x4b, 0xb1, 0xbb, 0x0f, 0x7c, 0xa9, 0x9b, 0x04, 0xbb, 0x51, 0x08, 0xf1, 0x9a, 0xa4, 0x76, 0x7c, 0x18]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xfa, 0x94, 0xf7, 0x40, 0xd0, 0xd7, 0xeb, 0xa9, 0x82, 0x36, 0xd5, 0x15, 0xb9, 0x33, 0x7a, 0xbf, 0x8a, 0xf2, 0x63, 0xaa, 0x37, 0xf5, 0x59, 0xac, 0xbd, 0xbb, 0x32, 0x36, 0xbe, 0x73, 0x99, 0x38],\n            [0x2c, 0xb3, 0xda, 0x7a, 0xd8, 0x3d, 0x99, 0xca, 0xd2, 0xf4, 0xda, 0x99, 0x8e, 0x4f, 0x98, 0xb7, 0xf4, 0xae, 0x3e, 0x9f, 0x8e, 0x35, 0x60, 0xa4, 0x33, 0x75, 0xa4, 0x04, 0x93, 0xb1, 0x6b, 0x4d]],\n        [[0x97, 0x9d, 0xa8, 0xcd, 0x97, 0x7b, 0x9d, 0xb9, 0xe7, 0xa5, 0xef, 0xfd, 0xa8, 0x42, 0x6b, 0xc3, 0x62, 0x64, 0x7d, 0xa5, 0x1b, 0xc9, 0x9e, 0xd2, 0x45, 0xb9, 0xee, 0x03, 0xb0, 0xbf, 0xc0, 0x68],\n            [0xed, 0xb7, 0x84, 0x2c, 0xf6, 0xd3, 0xa1, 0x6b, 0x24, 0x6d, 0x87, 0x56, 0x97, 0x59, 0x79, 0x62, 0x9f, 0xac, 0xed, 0xf3, 0xc9, 0x89, 0x21, 0x2e, 0x04, 0xb3, 0xcc, 0x2f, 0xbe, 0xd6, 0x0a, 0x4b]],\n        [[0x39, 0x61, 0x05, 0xed, 0x25, 0x89, 0x8b, 0x5d, 0x1b, 0xcb, 0x0c, 0x55, 0xf4, 0x6a, 0x00, 0x8a, 0x46, 0xe8, 0x1e, 0xc6, 0x83, 0xc8, 0x5a, 0x76, 0xdb, 0xcc, 0x19, 0x7a, 0xcc, 0x67, 0x46, 0x0b],\n            [0x53, 0xcf, 0xc2, 0xa1, 0xad, 0x6a, 0xf3, 0xcd, 0x8f, 0xc9, 0xde, 0x1c, 0xf8, 0x6c, 0x8f, 0xf8, 0x76, 0x42, 0xe7, 0xfe, 0xb2, 0x72, 0x21, 0x0a, 0x66, 0x74, 0x8f, 0xb7, 0xeb, 0xe4, 0x6f, 0x01]],\n        [[0x22, 0x8c, 0x6b, 0xbe, 0xfc, 0x4d, 0x70, 0x62, 0x6e, 0x52, 0x77, 0x99, 0x88, 0x7e, 0x7b, 0x57, 0x7a, 0x0d, 0xfe, 0xdc, 0x72, 0x92, 0xf1, 0x68, 0x1d, 0x97, 0xd7, 0x7c, 0x8d, 0x53, 0x10, 0x37],\n            [0x53, 0x88, 0x77, 0x02, 0xca, 0x27, 0xa8, 0xe5, 0x45, 0xe2, 0xa8, 0x48, 0x2a, 0xab, 0x18, 0xca, 0xea, 0x2d, 0x2a, 0x54, 0x17, 0x37, 0x32, 0x09, 0xdc, 0xe0, 0x4a, 0xb7, 0x7d, 0x82, 0x10, 0x7d]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x8a, 0x64, 0x1e, 0x14, 0x0a, 0x57, 0xd4, 0xda, 0x5c, 0x96, 0x9b, 0x01, 0x4c, 0x67, 0xbf, 0x8b, 0x30, 0xfe, 0x08, 0xdb, 0x0d, 0xd5, 0xa8, 0xd7, 0x09, 0x11, 0x85, 0xa2, 0xd3, 0x45, 0xfb, 0x7e],\n            [0xda, 0x8c, 0xc2, 0xd0, 0xac, 0x18, 0xe8, 0x52, 0x36, 0xd4, 0x21, 0xa3, 0xdd, 0x57, 0x22, 0x79, 0xb7, 0xf8, 0x71, 0x9d, 0xc6, 0x91, 0x70, 0x86, 0x56, 0xbf, 0xa1, 0x11, 0x8b, 0x19, 0xe1, 0x0f]],\n        [[0x18, 0x32, 0x98, 0x2c, 0x8f, 0x91, 0xae, 0x12, 0xf0, 0x8c, 0xea, 0xf3, 0x3c, 0xb9, 0x5d, 0xe4, 0x69, 0xed, 0xb2, 0x47, 0x18, 0xbd, 0xce, 0x16, 0x52, 0x5c, 0x23, 0xe2, 0xa5, 0x25, 0x52, 0x5d],\n            [0xb9, 0xb1, 0xe7, 0x5d, 0x4e, 0xbc, 0xee, 0xbb, 0x40, 0x81, 0x77, 0x82, 0x19, 0xab, 0xb5, 0xc6, 0xee, 0xab, 0x5b, 0x6b, 0x63, 0x92, 0x8a, 0x34, 0x8d, 0xcd, 0xee, 0x4f, 0x49, 0xe5, 0xc9, 0x7e]],\n        [[0x21, 0xac, 0x8b, 0x22, 0xcd, 0xc3, 0x9a, 0xe9, 0x5e, 0x78, 0xbd, 0xde, 0xba, 0xad, 0xab, 0xbf, 0x75, 0x41, 0x09, 0xc5, 0x58, 0xa4, 0x7d, 0x92, 0xb0, 0x7f, 0xf2, 0xa1, 0xd1, 0xc0, 0xb3, 0x6d],\n            [0x62, 0x4f, 0xd0, 0x75, 0x77, 0xba, 0x76, 0x77, 0xd7, 0xb8, 0xd8, 0x92, 0x6f, 0x98, 0x34, 0x3d, 0xd6, 0x4e, 0x1c, 0x0f, 0xf0, 0x8f, 0x2e, 0xf1, 0xb3, 0xbd, 0xb1, 0xb9, 0xec, 0x99, 0xb4, 0x07]],\n        [[0x60, 0x57, 0x2e, 0x9a, 0x72, 0x1d, 0x6b, 0x6e, 0x58, 0x33, 0x24, 0x8c, 0x48, 0x39, 0x46, 0x8e, 0x89, 0x6a, 0x88, 0x51, 0x23, 0x62, 0xb5, 0x32, 0x09, 0x36, 0xe3, 0x57, 0xf5, 0x98, 0xde, 0x6f],\n            [0x8b, 0x2c, 0x00, 0x48, 0x4a, 0xf9, 0x5b, 0x87, 0x69, 0x52, 0xe5, 0x5b, 0xd1, 0xb1, 0xe5, 0x25, 0x25, 0xe0, 0x9c, 0xc2, 0x13, 0x44, 0xe8, 0xb9, 0x0a, 0x70, 0xad, 0xbd, 0x0f, 0x51, 0x94, 0x69]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xa2, 0xdc, 0xab, 0xa9, 0x25, 0x2d, 0xac, 0x5f, 0x03, 0x33, 0x08, 0xe7, 0x7e, 0xfe, 0x95, 0x36, 0x3c, 0x5b, 0x3a, 0xd3, 0x05, 0x82, 0x1c, 0x95, 0x2d, 0xd8, 0x77, 0x7e, 0x02, 0xd9, 0x5b, 0x70],\n            [0xc2, 0xfe, 0x1b, 0x0c, 0x67, 0xcd, 0xd6, 0xe0, 0x51, 0x8e, 0x2c, 0xe0, 0x79, 0x88, 0xf0, 0xcf, 0x41, 0x4a, 0xad, 0x23, 0xd4, 0x46, 0xca, 0x94, 0xa1, 0xc3, 0xeb, 0x28, 0x06, 0xfa, 0x17, 0x14]],\n        [[0x7b, 0xaa, 0x70, 0x0a, 0x4b, 0xfb, 0xf5, 0xbf, 0x80, 0xc5, 0xcf, 0x08, 0x7a, 0xdd, 0xa1, 0xf4, 0x9d, 0x54, 0x50, 0x53, 0x23, 0x77, 0x23, 0xf5, 0x34, 0xa5, 0x22, 0xd1, 0x0d, 0x96, 0x2e, 0x47],\n            [0xcc, 0xb7, 0x32, 0x89, 0x57, 0xd0, 0x98, 0x75, 0xe4, 0x37, 0x99, 0xa9, 0xe8, 0xba, 0xed, 0xba, 0xeb, 0xc7, 0x4f, 0x15, 0x76, 0x07, 0x0c, 0x4c, 0xef, 0x9f, 0x52, 0xfc, 0x04, 0x5d, 0x58, 0x10]],\n        [[0xce, 0x82, 0xf0, 0x8f, 0x79, 0x02, 0xa8, 0xd1, 0xda, 0x14, 0x09, 0x48, 0xee, 0x8a, 0x40, 0x98, 0x76, 0x60, 0x54, 0x5a, 0xde, 0x03, 0x24, 0xf5, 0xe6, 0x2f, 0xe1, 0x03, 0xbf, 0x68, 0x82, 0x7f],\n            [0x64, 0xe9, 0x28, 0xc7, 0xa4, 0xcf, 0x2a, 0xf9, 0x90, 0x64, 0x72, 0x2c, 0x8b, 0xeb, 0xec, 0xa0, 0xf2, 0x7d, 0x35, 0xb5, 0x90, 0x4d, 0x7f, 0x5b, 0x4a, 0x49, 0xe4, 0xb8, 0x3b, 0xc8, 0xa1, 0x2f]],\n        [[0x8b, 0xc5, 0xcc, 0x3d, 0x69, 0xa6, 0xa1, 0x18, 0x44, 0xbc, 0x4d, 0x77, 0x37, 0xc7, 0x86, 0xec, 0x0c, 0xc9, 0xd6, 0x44, 0xa9, 0x23, 0x27, 0xb9, 0x03, 0x34, 0xa7, 0x0a, 0xd5, 0xc7, 0x34, 0x37],\n            [0xf9, 0x7e, 0x3e, 0x66, 0xee, 0xf9, 0x99, 0x28, 0xff, 0xad, 0x11, 0xd8, 0xe2, 0x66, 0xc5, 0xcd, 0x0f, 0x0d, 0x0b, 0x6a, 0xfc, 0x7c, 0x24, 0xa8, 0x4f, 0xa8, 0x5e, 0x80, 0x45, 0x8b, 0x6c, 0x41]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xef, 0x1e, 0xec, 0xf7, 0x8d, 0x77, 0xf2, 0xea, 0xdb, 0x60, 0x03, 0x21, 0xc0, 0xff, 0x5e, 0x67, 0xc3, 0x71, 0x0b, 0x21, 0xb4, 0x41, 0xa0, 0x68, 0x38, 0xc6, 0x01, 0xa3, 0xd3, 0x51, 0x3c, 0x3c],\n            [0x92, 0xf8, 0xd6, 0x4b, 0xef, 0x42, 0x13, 0xb2, 0x4a, 0xc4, 0x2e, 0x72, 0x3f, 0xc9, 0x11, 0xbd, 0x74, 0x02, 0x0e, 0xf5, 0x13, 0x9d, 0x83, 0x1a, 0x1b, 0xd5, 0x54, 0xde, 0xc4, 0x1e, 0x16, 0x6c]],\n        [[0x27, 0x52, 0xe4, 0x63, 0xaa, 0x94, 0xe6, 0xc3, 0x28, 0x9c, 0xc6, 0x56, 0xac, 0xfa, 0xb6, 0xbd, 0xe2, 0xcc, 0x76, 0xc6, 0x27, 0x27, 0xa2, 0x8e, 0x78, 0x2b, 0x84, 0x72, 0x10, 0xbd, 0x4e, 0x2a],\n            [0xea, 0xa7, 0x23, 0xef, 0x04, 0x61, 0x80, 0x50, 0xc9, 0x6e, 0xa5, 0x96, 0xd1, 0xd1, 0xc8, 0xc3, 0x18, 0xd7, 0x2d, 0xfd, 0x26, 0xbd, 0xcb, 0x7b, 0x92, 0x51, 0x0e, 0x4a, 0x65, 0x57, 0xb8, 0x49]],\n        [[0xab, 0x55, 0x36, 0xc3, 0xec, 0x63, 0x55, 0x11, 0x55, 0xf6, 0xa5, 0xc7, 0x01, 0x5f, 0xfe, 0x79, 0xd8, 0x0a, 0xf7, 0x03, 0xd8, 0x98, 0x99, 0xf5, 0xd0, 0x00, 0x54, 0x6b, 0x66, 0x28, 0xf5, 0x25],\n            [0x7a, 0x8d, 0xa1, 0x5d, 0x70, 0x5d, 0x51, 0x27, 0xee, 0x30, 0x65, 0x56, 0x95, 0x46, 0xde, 0xbd, 0x03, 0x75, 0xb4, 0x57, 0x59, 0x89, 0xeb, 0x02, 0x9e, 0xcc, 0x89, 0x19, 0xa7, 0xcb, 0x17, 0x67]],\n        [[0x6a, 0xeb, 0xfc, 0x9a, 0x9a, 0x10, 0xce, 0xdb, 0x3a, 0x1c, 0x3c, 0x6a, 0x9d, 0xea, 0x46, 0xbc, 0x45, 0x49, 0xac, 0xe3, 0x41, 0x12, 0x7c, 0xf0, 0xf7, 0x4f, 0xf9, 0xf7, 0xff, 0x2c, 0x89, 0x04],\n            [0x30, 0x31, 0x54, 0x1a, 0x46, 0xca, 0xe6, 0xc6, 0xcb, 0xe2, 0xc3, 0xc1, 0x8b, 0x75, 0x81, 0xbe, 0xee, 0xf8, 0xa3, 0x11, 0x1c, 0x25, 0xa3, 0xa7, 0x35, 0x51, 0x55, 0xe2, 0x25, 0xaa, 0xe2, 0x3a]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xb4, 0x48, 0x10, 0x9f, 0x8a, 0x09, 0x76, 0xfa, 0xf0, 0x7a, 0xb0, 0x70, 0xf7, 0x83, 0x80, 0x52, 0x84, 0x2b, 0x26, 0xa2, 0xc4, 0x5d, 0x4f, 0xba, 0xb1, 0xc8, 0x40, 0x0d, 0x78, 0x97, 0xc4, 0x60],\n            [0xd4, 0xb1, 0x6c, 0x08, 0xc7, 0x40, 0x38, 0x73, 0x5f, 0x0b, 0xf3, 0x76, 0x5d, 0xb2, 0xa5, 0x2f, 0x57, 0x57, 0x07, 0xed, 0x08, 0xa2, 0x6c, 0x4f, 0x08, 0x02, 0xb5, 0x0e, 0xee, 0x44, 0xfa, 0x22]],\n        [[0x0f, 0x00, 0x3f, 0xa6, 0x04, 0x19, 0x56, 0x65, 0x31, 0x7f, 0x8b, 0xeb, 0x0d, 0xe1, 0x47, 0x89, 0x97, 0x16, 0x53, 0xfa, 0x81, 0xa7, 0xaa, 0xb2, 0xbf, 0x67, 0xeb, 0x72, 0x60, 0x81, 0x0d, 0x48],\n            [0x7e, 0x13, 0x33, 0xcd, 0xa8, 0x84, 0x56, 0x1e, 0x67, 0xaf, 0x6b, 0x43, 0xac, 0x17, 0xaf, 0x16, 0xc0, 0x52, 0x99, 0x49, 0x5b, 0x87, 0x73, 0x7e, 0xb5, 0x43, 0xda, 0x6b, 0x1d, 0x0f, 0x2d, 0x55]],\n        [[0xe9, 0x58, 0x1f, 0xff, 0x84, 0x3f, 0x93, 0x1c, 0xcb, 0xe1, 0x30, 0x69, 0xa5, 0x75, 0x19, 0x7e, 0x14, 0x5f, 0xf8, 0xfc, 0x09, 0xdd, 0xa8, 0x78, 0x9d, 0xca, 0x59, 0x8b, 0xd1, 0x30, 0x01, 0x13],\n            [0xff, 0x76, 0x03, 0xc5, 0x4b, 0x89, 0x99, 0x70, 0x00, 0x59, 0x70, 0x9c, 0xd5, 0xd9, 0x11, 0x89, 0x5a, 0x46, 0xfe, 0xef, 0xdc, 0xd9, 0x55, 0x2b, 0x45, 0xa7, 0xb0, 0x2d, 0xfb, 0x24, 0xc2, 0x29]],\n        [[0x38, 0x06, 0xf8, 0x0b, 0xac, 0x82, 0xc4, 0x97, 0x2b, 0x90, 0xe0, 0xf7, 0xa8, 0xab, 0x6c, 0x08, 0x80, 0x66, 0x90, 0x46, 0xf7, 0x26, 0x2d, 0xf8, 0xf1, 0xc4, 0x6b, 0x4a, 0x82, 0x98, 0x8e, 0x37],\n            [0x8e, 0xb4, 0xee, 0xb8, 0xd4, 0x3f, 0xb2, 0x1b, 0xe0, 0x0a, 0x3d, 0x75, 0x34, 0x28, 0xa2, 0x8e, 0xc4, 0x92, 0x7b, 0xfe, 0x60, 0x6e, 0x6d, 0xb8, 0x31, 0x1d, 0x62, 0x0d, 0x78, 0x14, 0x42, 0x11]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x5e, 0xa8, 0xd8, 0x04, 0x9b, 0x73, 0xc9, 0xc9, 0xdc, 0x0d, 0x73, 0xbf, 0x0a, 0x0a, 0x73, 0xff, 0x18, 0x1f, 0x9c, 0x51, 0xaa, 0xc6, 0xf1, 0x83, 0x25, 0xfd, 0xab, 0xa3, 0x11, 0xd3, 0x01, 0x24],\n            [0x4d, 0xe3, 0x7e, 0x38, 0x62, 0x5e, 0x64, 0xbb, 0x2b, 0x53, 0xb5, 0x03, 0x68, 0xc4, 0xf2, 0x2b, 0x5a, 0x03, 0x32, 0x99, 0x4a, 0x41, 0x9a, 0xe1, 0x1a, 0xae, 0x8c, 0x48, 0xf3, 0x24, 0x32, 0x65]],\n        [[0xe8, 0xdd, 0xad, 0x3a, 0x8c, 0xea, 0xf4, 0xb3, 0xb2, 0xe5, 0x73, 0xf2, 0xed, 0x8b, 0xbf, 0xed, 0xb1, 0x0c, 0x0c, 0xfb, 0x2b, 0xf1, 0x01, 0x48, 0xe8, 0x26, 0x03, 0x8e, 0x27, 0x4d, 0x96, 0x72],\n            [0xc8, 0x09, 0x3b, 0x60, 0xc9, 0x26, 0x4d, 0x7c, 0xf2, 0x9c, 0xd4, 0xa1, 0x3b, 0x26, 0xc2, 0x04, 0x33, 0x44, 0x76, 0x3c, 0x02, 0xbb, 0x11, 0x42, 0x0c, 0x22, 0xb7, 0xc6, 0xe1, 0xac, 0xb4, 0x0e]],\n        [[0x6f, 0x85, 0xe7, 0xef, 0xde, 0x67, 0x30, 0xfc, 0xbf, 0x5a, 0xe0, 0x7b, 0x7a, 0x2a, 0x54, 0x6b, 0x5d, 0x62, 0x85, 0xa1, 0xf8, 0x16, 0x88, 0xec, 0x61, 0xb9, 0x96, 0xb5, 0xef, 0x2d, 0x43, 0x4d],\n            [0x7c, 0x31, 0x33, 0xcc, 0xe4, 0xcf, 0x6c, 0xff, 0x80, 0x47, 0x77, 0xd1, 0xd8, 0xe9, 0x69, 0x97, 0x98, 0x7f, 0x20, 0x57, 0x1d, 0x1d, 0x4f, 0x08, 0x27, 0xc8, 0x35, 0x57, 0x40, 0xc6, 0x21, 0x0c]],\n        [[0xd2, 0x8e, 0x9b, 0xfa, 0x42, 0x8e, 0xdf, 0x8f, 0xc7, 0x86, 0xf9, 0xa4, 0xca, 0x70, 0x00, 0x9d, 0x21, 0xbf, 0xec, 0x57, 0x62, 0x30, 0x58, 0x8c, 0x0d, 0x35, 0xdb, 0x5d, 0x8b, 0x6a, 0xa0, 0x5a],\n            [0xc1, 0x58, 0x7c, 0x0d, 0x20, 0xdd, 0x11, 0x26, 0x5f, 0x89, 0x3b, 0x97, 0x58, 0xf8, 0x8b, 0xe3, 0xdf, 0x32, 0xe2, 0xfc, 0xd8, 0x67, 0xf2, 0xa5, 0x37, 0x1e, 0x6d, 0xec, 0x7c, 0x27, 0x20, 0x79]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xd0, 0xe9, 0xc0, 0xfa, 0x95, 0x45, 0x23, 0x96, 0xf1, 0x2c, 0x79, 0x25, 0x14, 0xce, 0x40, 0x14, 0x44, 0x2c, 0x36, 0x50, 0xd9, 0x63, 0x56, 0xb7, 0x56, 0x3b, 0x9e, 0xa7, 0xef, 0x89, 0xbb, 0x0e],\n            [0xce, 0x7f, 0xdc, 0x0a, 0xcc, 0x82, 0x1c, 0x0a, 0x78, 0x71, 0xe8, 0x74, 0x8d, 0x01, 0x30, 0x0f, 0xa7, 0x11, 0x4c, 0xdf, 0x38, 0xd7, 0xa7, 0x0d, 0xf8, 0x48, 0x52, 0x00, 0x80, 0x7b, 0x5f, 0x0e]],\n        [[0x25, 0x83, 0xe6, 0x94, 0x7b, 0x81, 0xb2, 0x91, 0xae, 0x0e, 0x05, 0xc9, 0xa3, 0x68, 0x2d, 0xd9, 0x88, 0x25, 0x19, 0x2a, 0x61, 0x61, 0x21, 0x97, 0x15, 0xa1, 0x35, 0xa5, 0x46, 0xc8, 0xa2, 0x0e],\n            [0x1b, 0x03, 0x0d, 0x8b, 0x5a, 0x1b, 0x97, 0x4b, 0xf2, 0x16, 0x31, 0x3d, 0x1f, 0x33, 0xa0, 0x50, 0x3a, 0x18, 0xbe, 0x13, 0xa1, 0x76, 0xc1, 0xba, 0x1b, 0xf1, 0x05, 0x7b, 0x33, 0xa8, 0x82, 0x3b]],\n        [[0xba, 0x36, 0x7b, 0x6d, 0xa9, 0xea, 0x14, 0x12, 0xc5, 0xfa, 0x91, 0x00, 0xba, 0x9b, 0x99, 0xcc, 0x56, 0x02, 0xe9, 0xa0, 0x26, 0x40, 0x66, 0x8c, 0xc4, 0xf8, 0x85, 0x33, 0x68, 0xe7, 0x03, 0x20],\n            [0x50, 0x5b, 0xff, 0xa9, 0xb2, 0xf1, 0xf1, 0x78, 0xcf, 0x14, 0xa4, 0xa9, 0xfc, 0x09, 0x46, 0x94, 0x54, 0x65, 0x0d, 0x9c, 0x5f, 0x72, 0x21, 0xe2, 0x97, 0xa5, 0x2d, 0x81, 0xce, 0x4a, 0x5f, 0x79]],\n        [[0x3d, 0x5f, 0x5c, 0xd2, 0xbc, 0x7d, 0x77, 0x0e, 0x2a, 0x6d, 0x22, 0x45, 0x84, 0x06, 0xc4, 0xdd, 0xc6, 0xa6, 0xc6, 0xd7, 0x49, 0xad, 0x6d, 0x87, 0x91, 0x0e, 0x3a, 0x67, 0x1d, 0x2c, 0x1d, 0x56],\n            [0xfe, 0x7a, 0x74, 0xcf, 0xd4, 0xd2, 0xe5, 0x19, 0xde, 0xd0, 0xdb, 0x70, 0x23, 0x69, 0xe6, 0x6d, 0xec, 0xec, 0xcc, 0x09, 0x33, 0x6a, 0x77, 0xdc, 0x6b, 0x22, 0x76, 0x5d, 0x92, 0x09, 0xac, 0x2d]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x23, 0x15, 0x17, 0xeb, 0xd3, 0xdb, 0x12, 0x5e, 0x01, 0xf0, 0x91, 0xab, 0x2c, 0x41, 0xce, 0xac, 0xed, 0x1b, 0x4b, 0x2d, 0xbc, 0xdb, 0x17, 0x66, 0x89, 0x46, 0xad, 0x4b, 0x1e, 0x6f, 0x0b, 0x14],\n            [0x11, 0xce, 0xbf, 0xb6, 0x77, 0x2d, 0x48, 0x22, 0x18, 0x4f, 0xa3, 0x5d, 0x4a, 0xb0, 0x70, 0x12, 0x3e, 0x54, 0xd7, 0xd8, 0x0e, 0x2b, 0x27, 0xdc, 0x53, 0xff, 0xca, 0x8c, 0x59, 0xb3, 0x4e, 0x44]],\n        [[0x07, 0x76, 0x61, 0x0f, 0x66, 0xb2, 0x21, 0x39, 0x7e, 0xc0, 0xec, 0x45, 0x28, 0x82, 0xa1, 0x29, 0x32, 0x44, 0x35, 0x13, 0x5e, 0x61, 0x5e, 0x54, 0xcb, 0x7c, 0xef, 0xf6, 0x41, 0xcf, 0x9f, 0x0a],\n            [0xdd, 0xf9, 0xda, 0x84, 0xc3, 0xe6, 0x8a, 0x9f, 0x24, 0xd2, 0x96, 0x5d, 0x39, 0x6f, 0x58, 0x8c, 0xc1, 0x56, 0x93, 0xab, 0xb5, 0x79, 0x3b, 0xd2, 0xa8, 0x73, 0x16, 0xed, 0xfa, 0xb4, 0x2f, 0x73]],\n        [[0x8b, 0xb1, 0x95, 0xe5, 0x92, 0x50, 0x35, 0x11, 0x76, 0xac, 0xf4, 0x4d, 0x24, 0xc3, 0x32, 0xe6, 0xeb, 0xfe, 0x2c, 0x87, 0xc4, 0xf1, 0x56, 0xc4, 0x75, 0x24, 0x7a, 0x56, 0x85, 0x5a, 0x3a, 0x13],\n            [0x0d, 0x16, 0xac, 0x3c, 0x4a, 0x58, 0x86, 0x3a, 0x46, 0x7f, 0x6c, 0xa3, 0x52, 0x6e, 0x37, 0xe4, 0x96, 0x9c, 0xe9, 0x5c, 0x66, 0x41, 0x67, 0xe4, 0xfb, 0x79, 0x0c, 0x05, 0xf6, 0x64, 0xd5, 0x7c]],\n        [[0x28, 0xc1, 0xe1, 0x54, 0x73, 0xf2, 0xbf, 0x76, 0x74, 0x19, 0x19, 0x1b, 0xe4, 0xb9, 0xa8, 0x46, 0x65, 0x73, 0xf3, 0x77, 0x9b, 0x29, 0x74, 0x5b, 0xc6, 0x89, 0x6c, 0x2c, 0x7c, 0xf8, 0xb3, 0x0f],\n            [0xf7, 0xd5, 0xe9, 0x74, 0x5d, 0xb8, 0x25, 0x16, 0xb5, 0x30, 0xbc, 0x84, 0xc5, 0xf0, 0xad, 0xca, 0x12, 0x28, 0xbc, 0x9d, 0xd4, 0xfa, 0x82, 0xe6, 0xe3, 0xbf, 0xa2, 0x15, 0x2c, 0xd4, 0x34, 0x10]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x61, 0xb1, 0x46, 0xba, 0x0e, 0x31, 0xa5, 0x67, 0x6c, 0x7f, 0xd6, 0xd9, 0x27, 0x85, 0x0f, 0x79, 0x14, 0xc8, 0x6c, 0x2f, 0x5f, 0x5b, 0x9c, 0x35, 0x3d, 0x38, 0x86, 0x77, 0x65, 0x55, 0x6a, 0x7b],\n            [0xd3, 0xb0, 0x3a, 0x66, 0x60, 0x1b, 0x43, 0xf1, 0x26, 0x58, 0x99, 0x09, 0x8f, 0x2d, 0xa3, 0x14, 0x71, 0x85, 0xdb, 0xed, 0xf6, 0x26, 0xd5, 0x61, 0x9a, 0x73, 0xac, 0x0e, 0xea, 0xac, 0xb7, 0x0c]],\n        [[0x5e, 0xf4, 0xe5, 0x17, 0x0e, 0x10, 0x9f, 0xe7, 0x43, 0x5f, 0x67, 0x5c, 0xac, 0x4b, 0xe5, 0x14, 0x41, 0xd2, 0xbf, 0x48, 0xf5, 0x14, 0xb0, 0x71, 0xc6, 0x61, 0xc1, 0xb2, 0x70, 0x58, 0xd2, 0x5a],\n            [0x2d, 0xba, 0x16, 0x07, 0x92, 0x94, 0xdc, 0xbd, 0x50, 0x2b, 0xc9, 0x7f, 0x42, 0x00, 0xba, 0x61, 0xed, 0xf8, 0x43, 0xed, 0xf5, 0xf9, 0x40, 0x60, 0xb2, 0xb0, 0x82, 0xcb, 0xed, 0x75, 0xc7, 0x65]],\n        [[0x80, 0xba, 0x0d, 0x09, 0x40, 0xa7, 0x39, 0xa6, 0x67, 0x34, 0x7e, 0x66, 0xbe, 0x56, 0xfb, 0x53, 0x78, 0xc4, 0x46, 0xe8, 0xed, 0x68, 0x6c, 0x7f, 0xce, 0xe8, 0x9f, 0xce, 0xa2, 0x64, 0x58, 0x53],\n            [0xe8, 0xc1, 0xa9, 0xc2, 0x7b, 0x59, 0x21, 0x33, 0xe2, 0x43, 0x73, 0x2b, 0xac, 0x2d, 0xc1, 0x89, 0x3b, 0x15, 0xe2, 0xd5, 0xc0, 0x97, 0x8a, 0xfd, 0x6f, 0x36, 0x33, 0xb7, 0xb9, 0xc3, 0x88, 0x09]],\n        [[0xd0, 0xb6, 0x56, 0x30, 0x5c, 0xae, 0xb3, 0x75, 0x44, 0xa4, 0x83, 0x51, 0x6e, 0x01, 0x65, 0xef, 0x45, 0x76, 0xe6, 0xf5, 0xa2, 0x0d, 0xd4, 0x16, 0x3b, 0x58, 0x2f, 0xf2, 0x2f, 0x36, 0x18, 0x3f],\n            [0xfd, 0x2f, 0xe0, 0x9b, 0x1e, 0x8c, 0xc5, 0x18, 0xa9, 0xca, 0xd4, 0x2b, 0x35, 0xb6, 0x95, 0x0a, 0x9f, 0x7e, 0xfb, 0xc4, 0xef, 0x88, 0x7b, 0x23, 0x43, 0xec, 0x2f, 0x0d, 0x0f, 0x7a, 0xfc, 0x5c]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x8d, 0xd2, 0xda, 0xc7, 0x44, 0xd6, 0x7a, 0xdb, 0x26, 0x7d, 0x1d, 0xb8, 0xe1, 0xde, 0x9d, 0x7a, 0x7d, 0x17, 0x7e, 0x1c, 0x37, 0x04, 0x8d, 0x2d, 0x7c, 0x5e, 0x18, 0x38, 0x1e, 0xaf, 0xc7, 0x1b],\n            [0x33, 0x48, 0x31, 0x00, 0x59, 0xf6, 0xf2, 0xca, 0x0f, 0x27, 0x1b, 0x63, 0x12, 0x7e, 0x02, 0x1d, 0x49, 0xc0, 0x5d, 0x79, 0x87, 0xef, 0x5e, 0x7a, 0x2f, 0x1f, 0x66, 0x55, 0xd8, 0x09, 0xd9, 0x61]],\n        [[0x54, 0x83, 0x02, 0x18, 0x82, 0x93, 0x99, 0x07, 0xd0, 0xa7, 0xda, 0xd8, 0x75, 0x89, 0xfa, 0xf2, 0xd9, 0xa3, 0xb8, 0x6b, 0x5a, 0x35, 0x28, 0xd2, 0x6b, 0x59, 0xc2, 0xf8, 0x45, 0xe2, 0xbc, 0x06],\n            [0x65, 0xc0, 0xa3, 0x88, 0x51, 0x95, 0xfc, 0x96, 0x94, 0x78, 0xe8, 0x0d, 0x8b, 0x41, 0xc9, 0xc2, 0x58, 0x48, 0x75, 0x10, 0x2f, 0xcd, 0x2a, 0xc9, 0xa0, 0x6d, 0x0f, 0xdd, 0x9c, 0x98, 0x26, 0x3d]],\n        [[0x2f, 0x66, 0x29, 0x1b, 0x04, 0x89, 0xbd, 0x7e, 0xee, 0x6e, 0xdd, 0xb7, 0x0e, 0xef, 0xb0, 0x0c, 0xb4, 0xfc, 0x7f, 0xc2, 0xc9, 0x3a, 0x3c, 0x64, 0xef, 0x45, 0x44, 0xaf, 0x8a, 0x90, 0x65, 0x76],\n            [0xa1, 0x4c, 0x70, 0x4b, 0x0e, 0xa0, 0x83, 0x70, 0x13, 0xa4, 0xaf, 0xb8, 0x38, 0x19, 0x22, 0x65, 0x09, 0xb4, 0x02, 0x4f, 0x06, 0xf8, 0x17, 0xce, 0x46, 0x45, 0xda, 0x50, 0x7c, 0x8a, 0xd1, 0x4e]],\n        [[0xf7, 0xd4, 0x16, 0x6c, 0x4e, 0x95, 0x9d, 0x5d, 0x0f, 0x91, 0x2b, 0x52, 0xfe, 0x5c, 0x34, 0xe5, 0x30, 0xe6, 0xa4, 0x3b, 0xf3, 0xf3, 0x34, 0x08, 0xa9, 0x4a, 0xa0, 0xb5, 0x6e, 0xb3, 0x09, 0x0a],\n            [0x26, 0xd9, 0x5e, 0xa3, 0x0f, 0xeb, 0xa2, 0xf3, 0x20, 0x3b, 0x37, 0xd4, 0xe4, 0x9e, 0xce, 0x06, 0x3d, 0x53, 0xed, 0xae, 0x2b, 0xeb, 0xb6, 0x24, 0x0a, 0x11, 0xa3, 0x0f, 0xd6, 0x7f, 0xa4, 0x3a]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xdb, 0x9f, 0x2c, 0xfc, 0xd6, 0xb2, 0x1e, 0x2e, 0x52, 0x7a, 0x06, 0x87, 0x2d, 0x86, 0x72, 0x2b, 0x6d, 0x90, 0x77, 0x46, 0x43, 0xb5, 0x7a, 0xf8, 0x60, 0x7d, 0x91, 0x60, 0x5b, 0x9d, 0x9e, 0x07],\n            [0x97, 0x87, 0xc7, 0x04, 0x1c, 0x38, 0x01, 0x39, 0x58, 0xc7, 0x85, 0xa3, 0xfc, 0x64, 0x00, 0x64, 0x25, 0xa2, 0xbf, 0x50, 0x94, 0xca, 0x26, 0x31, 0x45, 0x0a, 0x24, 0xd2, 0x51, 0x29, 0x51, 0x16]],\n        [[0x4d, 0x4a, 0xd7, 0x98, 0x71, 0x57, 0xac, 0x7d, 0x8b, 0x37, 0xbd, 0x63, 0xff, 0x87, 0xb1, 0x49, 0x95, 0x20, 0x7c, 0xcf, 0x7c, 0x59, 0xc4, 0x91, 0x9c, 0xef, 0xd0, 0xdb, 0x60, 0x09, 0x9d, 0x46],\n            [0xcb, 0x78, 0x94, 0x90, 0xe4, 0x45, 0xb3, 0xf6, 0xd9, 0xf6, 0x57, 0x74, 0xd5, 0xf8, 0x83, 0x4f, 0x39, 0xc9, 0xbd, 0x88, 0xc2, 0x57, 0x21, 0x1f, 0x24, 0x32, 0x68, 0xf8, 0xc7, 0x21, 0x5f, 0x0b]],\n        [[0x2a, 0x36, 0x68, 0xfc, 0x5f, 0xb6, 0x4f, 0xa5, 0xe3, 0x9d, 0x24, 0x2f, 0xc0, 0x93, 0x61, 0xcf, 0xf8, 0x0a, 0xed, 0xe1, 0xdb, 0x27, 0xec, 0x0e, 0x14, 0x32, 0x5f, 0x8e, 0xa1, 0x62, 0x41, 0x16],\n            [0x95, 0x21, 0x01, 0xce, 0x95, 0x5b, 0x0e, 0x57, 0xc7, 0xb9, 0x62, 0xb5, 0x28, 0xca, 0x11, 0xec, 0xb4, 0x46, 0x06, 0x73, 0x26, 0xff, 0xfb, 0x66, 0x7d, 0xee, 0x5f, 0xb2, 0x56, 0xfd, 0x2a, 0x08]],\n        [[0x92, 0x67, 0x77, 0x56, 0xa1, 0xff, 0xc4, 0xc5, 0x95, 0xf0, 0xe3, 0x3a, 0x0a, 0xca, 0x94, 0x4d, 0x9e, 0x7e, 0x3d, 0xb9, 0x6e, 0xb6, 0xb0, 0xce, 0xa4, 0x30, 0x89, 0x99, 0xe9, 0xad, 0x11, 0x59],\n            [0xf6, 0x48, 0x95, 0xa1, 0x6f, 0x5f, 0xb7, 0xa5, 0xbb, 0x30, 0x00, 0x1c, 0xd2, 0x8a, 0xd6, 0x25, 0x26, 0x1b, 0xb2, 0x0d, 0x37, 0x6a, 0x05, 0xf4, 0x9d, 0x3e, 0x17, 0x2a, 0x43, 0xd2, 0x3a, 0x06]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x32, 0x99, 0x93, 0xd1, 0x9a, 0x72, 0xf3, 0xa9, 0x16, 0xbd, 0xb4, 0x4c, 0xdd, 0xf9, 0xd4, 0xb2, 0x64, 0x9a, 0xd3, 0x05, 0xe4, 0xa3, 0x73, 0x1c, 0xcb, 0x7e, 0x57, 0x67, 0xff, 0x04, 0xb3, 0x10],\n            [0xb9, 0x4b, 0xa4, 0xad, 0xd0, 0x6d, 0x61, 0x23, 0xb4, 0xaf, 0x34, 0xa9, 0xaa, 0x65, 0xec, 0xd9, 0x69, 0xe3, 0x85, 0xcd, 0xcc, 0xe7, 0xb0, 0x9b, 0x41, 0xc1, 0x1c, 0xf9, 0xa0, 0xfa, 0xb7, 0x13]],\n        [[0x04, 0xfd, 0x88, 0x3c, 0x0c, 0xd0, 0x09, 0x52, 0x51, 0x4f, 0x06, 0x19, 0xcc, 0xc3, 0xbb, 0xde, 0x80, 0xc5, 0x33, 0xbc, 0xf9, 0xf3, 0x17, 0x36, 0xdd, 0xc6, 0xde, 0xe8, 0x9b, 0x5d, 0x79, 0x1b],\n            [0x65, 0x0a, 0xbe, 0x51, 0x57, 0xad, 0x50, 0x79, 0x08, 0x71, 0x9b, 0x07, 0x95, 0x8f, 0xfb, 0xae, 0x4b, 0x38, 0xba, 0xcf, 0x53, 0x2a, 0x86, 0x1e, 0xc0, 0x50, 0x5c, 0x67, 0x1b, 0xf6, 0x87, 0x6c]],\n        [[0x4f, 0x00, 0xb2, 0x66, 0x55, 0xed, 0x4a, 0xed, 0x8d, 0xe1, 0x66, 0x18, 0xb2, 0x14, 0x74, 0x8d, 0xfd, 0x1a, 0x36, 0x0f, 0x26, 0x5c, 0x8b, 0x89, 0xf3, 0xab, 0xf2, 0xf3, 0x24, 0x67, 0xfd, 0x70],\n            [0xfd, 0x4e, 0x2a, 0xc1, 0x3a, 0xca, 0x8f, 0x00, 0xd8, 0xec, 0x74, 0x67, 0xef, 0x61, 0xe0, 0x28, 0xd0, 0x96, 0xf4, 0x48, 0xde, 0x81, 0xe3, 0xef, 0xdc, 0xaa, 0x7d, 0xf3, 0xb6, 0x55, 0xa6, 0x65]],\n        [[0xeb, 0xcb, 0xc5, 0x70, 0x91, 0x31, 0x10, 0x93, 0x0d, 0xc8, 0xd0, 0xef, 0x62, 0xe8, 0x6f, 0x82, 0xe3, 0x69, 0x3d, 0x91, 0x7f, 0x31, 0xe1, 0x26, 0x35, 0x3c, 0x4a, 0x2f, 0xab, 0xc4, 0x9a, 0x5e],\n            [0xab, 0x1b, 0xb5, 0xe5, 0x2b, 0xc3, 0x0e, 0x29, 0xb0, 0xd0, 0x73, 0xe6, 0x4f, 0x64, 0xf2, 0xbc, 0xe4, 0xe4, 0xe1, 0x9a, 0x52, 0x33, 0x2f, 0xbd, 0xcc, 0x03, 0xee, 0x8a, 0xfa, 0x00, 0x5f, 0x50]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xf6, 0xdb, 0x0d, 0x22, 0x3d, 0xb5, 0x14, 0x75, 0x31, 0xf0, 0x81, 0xe2, 0xb9, 0x37, 0xa2, 0xa9, 0x84, 0x11, 0x9a, 0x07, 0xb5, 0x53, 0x89, 0x78, 0xa9, 0x30, 0x27, 0xa1, 0xf1, 0x4e, 0x5c, 0x2e],\n            [0x8b, 0x00, 0x54, 0xfb, 0x4d, 0xdc, 0xcb, 0x17, 0x35, 0x40, 0xff, 0xb7, 0x8c, 0xfe, 0x4a, 0xe4, 0x4e, 0x99, 0x4e, 0xa8, 0x74, 0x54, 0x5d, 0x5c, 0x96, 0xa3, 0x12, 0x55, 0x36, 0x31, 0x17, 0x5c]],\n        [[0xce, 0x24, 0xef, 0x7b, 0x86, 0xf2, 0x0f, 0x77, 0xe8, 0x5c, 0x7d, 0x87, 0x38, 0x2d, 0xef, 0xaf, 0xf2, 0x8c, 0x72, 0x2e, 0xeb, 0xb6, 0x55, 0x4b, 0x6e, 0xf1, 0x4e, 0x8a, 0x0e, 0x9a, 0x6c, 0x4c],\n            [0x25, 0xea, 0x86, 0xc2, 0xd1, 0x4f, 0xb7, 0x3e, 0xa8, 0x5c, 0x8d, 0x66, 0x81, 0x25, 0xed, 0xc5, 0x4c, 0x05, 0xb9, 0xd8, 0xd6, 0x70, 0xbe, 0x73, 0x82, 0xe8, 0xa1, 0xe5, 0x1e, 0x71, 0xd5, 0x26]],\n        [[0x4e, 0x6d, 0xc3, 0xa7, 0x4f, 0x22, 0x45, 0x26, 0xa2, 0x7e, 0x16, 0xf7, 0xf7, 0x63, 0xdc, 0x86, 0x01, 0x2a, 0x71, 0x38, 0x5c, 0x33, 0xc3, 0xce, 0x30, 0xff, 0xf9, 0x2c, 0x91, 0x71, 0x8a, 0x72],\n            [0x8c, 0x44, 0x09, 0x28, 0xd5, 0x23, 0xc9, 0x8f, 0xf3, 0x84, 0x45, 0xc6, 0x9a, 0x5e, 0xff, 0xd2, 0xc7, 0x57, 0x93, 0xa3, 0xc1, 0x69, 0xdd, 0x62, 0x0f, 0xda, 0x5c, 0x30, 0x59, 0x5d, 0xe9, 0x4c]],\n        [[0x92, 0x7e, 0x50, 0x27, 0x72, 0xd7, 0x0c, 0xd6, 0x69, 0x96, 0x81, 0x35, 0x84, 0x94, 0x35, 0x8b, 0x6c, 0xaa, 0x62, 0x86, 0x6e, 0x1c, 0x15, 0xf3, 0x6c, 0xb3, 0xff, 0x65, 0x1b, 0xa2, 0x9b, 0x59],\n            [0xe2, 0xa9, 0x65, 0x88, 0xc4, 0x50, 0xfa, 0xbb, 0x3b, 0x6e, 0x5f, 0x44, 0x01, 0xca, 0x97, 0xd4, 0xdd, 0xf6, 0xcd, 0x3f, 0x3f, 0xe5, 0x97, 0x67, 0x2b, 0x8c, 0x66, 0x0f, 0x35, 0x9b, 0xf5, 0x07]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xf1, 0x59, 0x27, 0xd8, 0xdb, 0x5a, 0x11, 0x5e, 0x82, 0xf3, 0x38, 0xff, 0x1c, 0xed, 0xfe, 0x3f, 0x64, 0x54, 0x3f, 0x7f, 0xd1, 0x81, 0xed, 0xef, 0x65, 0xc5, 0xcb, 0xfd, 0xe1, 0x80, 0xcd, 0x11],\n            [0xe0, 0xdb, 0x22, 0x28, 0xe6, 0xff, 0x61, 0x9d, 0x41, 0x14, 0x2d, 0x3b, 0x26, 0x22, 0xdf, 0xf1, 0x34, 0x81, 0xe9, 0x45, 0xee, 0x0f, 0x98, 0x8b, 0xa6, 0x3f, 0xef, 0xf7, 0x43, 0x19, 0xf1, 0x43]],\n        [[0xee, 0xf3, 0x00, 0xa1, 0x50, 0xde, 0xc0, 0xb6, 0x01, 0xe3, 0x8c, 0x3c, 0x4d, 0x31, 0xd2, 0xb0, 0x58, 0xcd, 0xed, 0x10, 0x4a, 0x7a, 0xef, 0x80, 0xa9, 0x19, 0x32, 0xf3, 0xd8, 0x33, 0x8c, 0x06],\n            [0xcb, 0x7d, 0x4f, 0xff, 0x30, 0xd8, 0x12, 0x3b, 0x39, 0x1c, 0x06, 0xf9, 0x4c, 0x34, 0x35, 0x71, 0xb5, 0x16, 0x94, 0x67, 0xdf, 0xee, 0x11, 0xde, 0xa4, 0x1d, 0x88, 0x93, 0x35, 0xa9, 0x32, 0x10]],\n        [[0xe9, 0xc3, 0xbc, 0x7b, 0x5c, 0xfc, 0xb2, 0xf9, 0xc9, 0x2f, 0xe5, 0xba, 0x3a, 0x0b, 0xab, 0x64, 0x38, 0x6f, 0x5b, 0x4b, 0x93, 0xda, 0x64, 0xec, 0x4d, 0x3d, 0xa0, 0xf5, 0xbb, 0xba, 0x47, 0x48],\n            [0x60, 0xbc, 0x45, 0x1f, 0x23, 0xa2, 0x3b, 0x70, 0x76, 0xe6, 0x97, 0x99, 0x4f, 0x77, 0x54, 0x67, 0x30, 0x9a, 0xe7, 0x66, 0xd6, 0xcd, 0x2e, 0x51, 0x24, 0x2c, 0x42, 0x4a, 0x11, 0xfe, 0x6f, 0x7e]],\n        [[0x87, 0xc0, 0xb1, 0xf0, 0xa3, 0x6f, 0x0c, 0x93, 0xa9, 0x0a, 0x72, 0xef, 0x5c, 0xbe, 0x65, 0x35, 0xa7, 0x6a, 0x4e, 0x2c, 0xbf, 0x21, 0x23, 0xe8, 0x2f, 0x97, 0xc7, 0x3e, 0xc8, 0x17, 0xac, 0x1e],\n            [0x7b, 0xef, 0x21, 0xe5, 0x40, 0xcc, 0x1e, 0xdc, 0xd6, 0xbd, 0x97, 0x7a, 0x7c, 0x75, 0x86, 0x7a, 0x25, 0x5a, 0x6e, 0x7c, 0xe5, 0x51, 0x3c, 0x1b, 0x5b, 0x82, 0x9a, 0x07, 0x60, 0xa1, 0x19, 0x04]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x96, 0x88, 0xa6, 0xab, 0x8f, 0xe3, 0x3a, 0x49, 0xf8, 0xfe, 0x34, 0xe7, 0x6a, 0xb2, 0xfe, 0x40, 0x26, 0x74, 0x57, 0x4c, 0xf6, 0xd4, 0x99, 0xce, 0x5d, 0x7b, 0x2f, 0x67, 0xd6, 0x5a, 0xe4, 0x4e],\n            [0x5c, 0x82, 0xb3, 0xbd, 0x55, 0x25, 0xf6, 0x6a, 0x93, 0xa4, 0x02, 0xc6, 0x7d, 0x5c, 0xb1, 0x2b, 0x5b, 0xff, 0xfb, 0x56, 0xf8, 0x01, 0x41, 0x90, 0xc6, 0xb6, 0xac, 0x4f, 0xfe, 0xa7, 0x41, 0x70]],\n        [[0xdb, 0xfa, 0x9b, 0x2c, 0xd4, 0x23, 0x67, 0x2c, 0x8a, 0x63, 0x6c, 0x07, 0x26, 0x48, 0x4f, 0xc2, 0x03, 0xd2, 0x53, 0x20, 0x28, 0xed, 0x65, 0x71, 0x47, 0xa9, 0x16, 0x16, 0x12, 0xbc, 0x28, 0x33],\n            [0x39, 0xc0, 0xfa, 0xfa, 0xcd, 0x33, 0x43, 0xc7, 0x97, 0x76, 0x9b, 0x93, 0x91, 0x72, 0xeb, 0xc5, 0x18, 0x67, 0x4c, 0x11, 0xf0, 0xf4, 0xe5, 0x73, 0xb2, 0x5c, 0x1b, 0xc2, 0x26, 0x3f, 0xbf, 0x2b]],\n        [[0x86, 0xe6, 0x8c, 0x1d, 0xdf, 0xca, 0xfc, 0xd5, 0xf8, 0x3a, 0xc3, 0x44, 0x72, 0xe6, 0x78, 0x9d, 0x2b, 0x97, 0xf8, 0x28, 0x45, 0xb4, 0x20, 0xc9, 0x2a, 0x8c, 0x67, 0xaa, 0x11, 0xc5, 0x5b, 0x2f],\n            [0x17, 0x0f, 0x86, 0x52, 0xd7, 0x9d, 0xc3, 0x44, 0x51, 0x76, 0x32, 0x65, 0xb4, 0x37, 0x81, 0x99, 0x46, 0x37, 0x62, 0xed, 0xcf, 0x64, 0x9d, 0x72, 0x40, 0x7a, 0x4c, 0x0b, 0x76, 0x2a, 0xfb, 0x56]],\n        [[0x33, 0xa7, 0x90, 0x7c, 0xc3, 0x6f, 0x17, 0xa5, 0xa0, 0x67, 0x72, 0x17, 0xea, 0x7e, 0x63, 0x14, 0x83, 0xde, 0xc1, 0x71, 0x2d, 0x41, 0x32, 0x7a, 0xf3, 0xd1, 0x2b, 0xd8, 0x2a, 0xa6, 0x46, 0x36],\n            [0xac, 0xcc, 0x6b, 0x7c, 0xf9, 0xb8, 0x8b, 0x08, 0x5c, 0xd0, 0x7d, 0x8f, 0x73, 0xea, 0x20, 0xda, 0x86, 0xca, 0x00, 0xc7, 0xad, 0x73, 0x4d, 0xe9, 0xe8, 0xa9, 0xda, 0x1f, 0x03, 0x06, 0xdd, 0x24]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x9c, 0xb2, 0x61, 0x0a, 0x98, 0x2a, 0xa5, 0xd7, 0xee, 0xa9, 0xac, 0x65, 0xcb, 0x0a, 0x1e, 0xe2, 0xbe, 0xdc, 0x85, 0x59, 0x0f, 0x9c, 0xa6, 0x57, 0x34, 0xa5, 0x87, 0xeb, 0x7b, 0x1e, 0x0c, 0x3c],\n            [0x2f, 0xbd, 0x84, 0x63, 0x0d, 0xb5, 0xa0, 0xf0, 0x4b, 0x9e, 0x93, 0xc6, 0x34, 0x9a, 0x34, 0xff, 0x73, 0x19, 0x2f, 0x6e, 0x54, 0x45, 0x2c, 0x92, 0x31, 0x76, 0x34, 0xf1, 0xb2, 0x26, 0xe8, 0x74]],\n        [[0x0a, 0x67, 0x90, 0x6d, 0x0c, 0x4c, 0xcc, 0xc0, 0xe6, 0xbd, 0xa7, 0x5e, 0x55, 0x8c, 0xcd, 0x58, 0x9b, 0x11, 0xa2, 0xbb, 0x4b, 0xb1, 0x43, 0x04, 0x3c, 0x55, 0xed, 0x23, 0xfe, 0xcd, 0xb1, 0x53],\n            [0x05, 0xfb, 0x75, 0xf5, 0x01, 0xaf, 0x38, 0x72, 0x58, 0xfc, 0x04, 0x29, 0x34, 0x7a, 0x67, 0xa2, 0x08, 0x50, 0x6e, 0xd0, 0x2b, 0x73, 0xd5, 0xb8, 0xe4, 0x30, 0x96, 0xad, 0x45, 0xdf, 0xa6, 0x5c]],\n        [[0x0d, 0x88, 0x1a, 0x90, 0x7e, 0xdc, 0xd8, 0xfe, 0xc1, 0x2f, 0x5d, 0x67, 0xee, 0x67, 0x2f, 0xed, 0x6f, 0x55, 0x43, 0x5f, 0x87, 0x14, 0x35, 0x42, 0xd3, 0x75, 0xae, 0xd5, 0xd3, 0x85, 0x1a, 0x76],\n            [0x87, 0xc8, 0xa0, 0x6e, 0xe1, 0xb0, 0xad, 0x6a, 0x4a, 0x34, 0x71, 0xed, 0x7c, 0xd6, 0x44, 0x03, 0x65, 0x4a, 0x5c, 0x5c, 0x04, 0xf5, 0x24, 0x3f, 0xb0, 0x16, 0x5e, 0x8c, 0xb2, 0xd2, 0xc5, 0x20]],\n        [[0x98, 0x83, 0xc2, 0x37, 0xa0, 0x41, 0xa8, 0x48, 0x5c, 0x5f, 0xbf, 0xc8, 0xfa, 0x24, 0xe0, 0x59, 0x2c, 0xbd, 0xf6, 0x81, 0x7e, 0x88, 0xe6, 0xca, 0x04, 0xd8, 0x5d, 0x60, 0xbb, 0x74, 0xa7, 0x0b],\n            [0x21, 0x13, 0x91, 0xbf, 0x77, 0x7a, 0x33, 0xbc, 0xe9, 0x07, 0x39, 0x0a, 0xdd, 0x7d, 0x06, 0x10, 0x9a, 0xee, 0x47, 0x73, 0x1b, 0x15, 0x5a, 0xfb, 0xcd, 0x4d, 0xd0, 0xd2, 0x3a, 0x01, 0xba, 0x54]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x48, 0xd5, 0x39, 0x4a, 0x0b, 0x20, 0x6a, 0x43, 0xa0, 0x07, 0x82, 0x5e, 0x49, 0x7c, 0xc9, 0x47, 0xf1, 0x7c, 0x37, 0xb9, 0x23, 0xef, 0x6b, 0x46, 0x45, 0x8c, 0x45, 0x76, 0xdf, 0x14, 0x6b, 0x6e],\n            [0x42, 0xc9, 0xca, 0x29, 0x4c, 0x76, 0x37, 0xda, 0x8a, 0x2d, 0x7c, 0x3a, 0x58, 0xf2, 0x03, 0xb4, 0xb5, 0xb9, 0x1a, 0x13, 0x2d, 0xde, 0x5f, 0x6b, 0x9d, 0xba, 0x52, 0xc9, 0x5d, 0xb3, 0xf3, 0x30]],\n        [[0x4c, 0x6f, 0xfe, 0x6b, 0x0c, 0x62, 0xd7, 0x48, 0x71, 0xef, 0xb1, 0x85, 0x79, 0xc0, 0xed, 0x24, 0xb1, 0x08, 0x93, 0x76, 0x8e, 0xf7, 0x38, 0x8e, 0xeb, 0xfe, 0x80, 0x40, 0xaf, 0x90, 0x64, 0x49],\n            [0x4a, 0x88, 0xda, 0xc1, 0x98, 0x44, 0x3c, 0x53, 0x4e, 0xdb, 0x4b, 0xb9, 0x12, 0x5f, 0xcd, 0x08, 0x04, 0xef, 0x75, 0xe7, 0xb1, 0x3a, 0xe5, 0x07, 0xfa, 0xca, 0x65, 0x7b, 0x72, 0x10, 0x64, 0x7f]],\n        [[0x3d, 0x81, 0xf0, 0xeb, 0x16, 0xfd, 0x58, 0x33, 0x8d, 0x7c, 0x1a, 0xfb, 0x20, 0x2c, 0x8a, 0xee, 0x90, 0xbb, 0x33, 0x6d, 0x45, 0xe9, 0x8e, 0x99, 0x85, 0xe1, 0x08, 0x1f, 0xc5, 0xf1, 0xb5, 0x46],\n            [0xe4, 0xe7, 0x43, 0x4b, 0xa0, 0x3f, 0x2b, 0x06, 0xba, 0x17, 0xae, 0x3d, 0xe6, 0xce, 0xbd, 0xb8, 0xed, 0x74, 0x11, 0x35, 0xec, 0x96, 0xfe, 0x31, 0xe3, 0x0e, 0x7a, 0x4e, 0xc9, 0x1d, 0xcb, 0x20]],\n        [[0xe0, 0x67, 0xe9, 0x7b, 0xdb, 0x96, 0x5c, 0xb0, 0x32, 0xd0, 0x59, 0x31, 0x90, 0xdc, 0x92, 0x97, 0xac, 0x09, 0x38, 0x31, 0x0f, 0x7e, 0xd6, 0x5d, 0xd0, 0x06, 0xb6, 0x1f, 0xea, 0xf0, 0x5b, 0x07],\n            [0x81, 0x9f, 0xc7, 0xde, 0x6b, 0x41, 0x22, 0x35, 0x14, 0x67, 0x77, 0x3e, 0x90, 0x81, 0xb0, 0xd9, 0x85, 0x4c, 0xca, 0x9b, 0x3f, 0x04, 0x59, 0xd6, 0xaa, 0x17, 0xc3, 0x88, 0x34, 0x37, 0xba, 0x43]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x4c, 0xb6, 0x69, 0xc8, 0x81, 0x95, 0x94, 0x33, 0x92, 0x34, 0xe9, 0x3c, 0x84, 0x0d, 0x3d, 0x5a, 0x37, 0x9c, 0x22, 0xa0, 0xaa, 0x65, 0xce, 0xb4, 0xc2, 0x2d, 0x66, 0x67, 0x02, 0xff, 0x74, 0x10],\n            [0x22, 0xb0, 0xd5, 0xe6, 0xc7, 0xef, 0xb1, 0xa7, 0x13, 0xda, 0x60, 0xb4, 0x80, 0xc1, 0x42, 0x7d, 0x10, 0x70, 0x97, 0x04, 0x4d, 0xda, 0x23, 0x89, 0xc2, 0x0e, 0x68, 0xcb, 0xde, 0xe0, 0x9b, 0x29]],\n        [[0x33, 0xfe, 0x42, 0x2a, 0x36, 0x2b, 0x2e, 0x36, 0x64, 0x5c, 0x8b, 0xcc, 0x81, 0x6a, 0x15, 0x08, 0xa1, 0x27, 0xe8, 0x57, 0xe5, 0x78, 0x8e, 0xf2, 0x58, 0x19, 0x12, 0x42, 0xae, 0xc4, 0x63, 0x3e],\n            [0x78, 0x96, 0x9c, 0xa7, 0xca, 0x80, 0xae, 0x02, 0x85, 0xb1, 0x7c, 0x04, 0x5c, 0xc1, 0x5b, 0x26, 0xc1, 0xba, 0xed, 0xa5, 0x59, 0x70, 0x85, 0x8c, 0x8c, 0xe8, 0x87, 0xac, 0x6a, 0x28, 0x99, 0x35]],\n        [[0x9f, 0x04, 0x08, 0x28, 0xbe, 0x87, 0xda, 0x80, 0x28, 0x38, 0xde, 0x9f, 0xcd, 0xe4, 0xe3, 0x62, 0xfb, 0x2e, 0x46, 0x8d, 0x01, 0xb3, 0x06, 0x51, 0xd4, 0x19, 0x3b, 0x11, 0xfa, 0xe2, 0xad, 0x1e],\n            [0xa0, 0x20, 0x99, 0x69, 0x0a, 0xae, 0xa3, 0x70, 0x4e, 0x64, 0x80, 0xb7, 0x85, 0x9c, 0x87, 0x54, 0x43, 0x43, 0x55, 0x80, 0x6d, 0x8d, 0x7c, 0xa9, 0x64, 0xca, 0x6c, 0x2e, 0x21, 0xd8, 0xc8, 0x6c]],\n        [[0x91, 0x4a, 0x07, 0xad, 0x08, 0x75, 0xc1, 0x4f, 0xa4, 0xb2, 0xc3, 0x6f, 0x46, 0x3e, 0xb1, 0xce, 0x52, 0xab, 0x67, 0x09, 0x54, 0x48, 0x6b, 0x6c, 0xd7, 0x1d, 0x71, 0x76, 0xcb, 0xff, 0xdd, 0x31],\n            [0x36, 0x88, 0xfa, 0xfd, 0xf0, 0x36, 0x6f, 0x07, 0x74, 0x88, 0x50, 0xd0, 0x95, 0x38, 0x4a, 0x48, 0x2e, 0x07, 0x64, 0x97, 0x11, 0x76, 0x01, 0x1a, 0x27, 0x4d, 0x8e, 0x25, 0x9a, 0x9b, 0x1c, 0x22]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xbe, 0x57, 0xbd, 0x0e, 0x0f, 0xac, 0x5e, 0x76, 0xa3, 0x71, 0xad, 0x2b, 0x10, 0x45, 0x02, 0xec, 0x59, 0xd5, 0x5d, 0xa9, 0x44, 0xcc, 0x25, 0x4c, 0xb3, 0x3c, 0x5b, 0x69, 0x07, 0x55, 0x26, 0x6b],\n            [0x30, 0x6b, 0xd4, 0xa7, 0x51, 0x29, 0xe3, 0xf9, 0x7a, 0x75, 0x2a, 0x82, 0x2f, 0xd6, 0x1d, 0x99, 0x2b, 0x80, 0xd5, 0x67, 0x1e, 0x15, 0x9d, 0xca, 0xfd, 0xeb, 0xac, 0x97, 0x35, 0x09, 0x7f, 0x3f]],\n        [[0x35, 0x0d, 0x34, 0x0a, 0xb8, 0x67, 0x56, 0x29, 0x20, 0xf3, 0x19, 0x5f, 0xe2, 0x83, 0x42, 0x73, 0x53, 0xa8, 0xc5, 0x02, 0x19, 0x33, 0xb4, 0x64, 0xbd, 0xc3, 0x87, 0x8c, 0xd7, 0x76, 0xed, 0x25],\n            [0x47, 0x39, 0x37, 0x76, 0x0d, 0x1d, 0x0c, 0xf5, 0x5a, 0x6d, 0x43, 0x88, 0x99, 0x15, 0xb4, 0x52, 0x0f, 0x2a, 0xb3, 0xb0, 0x3f, 0xa6, 0xb3, 0x26, 0xb3, 0xc7, 0x45, 0xf5, 0x92, 0x5f, 0x9b, 0x17]],\n        [[0x9d, 0x23, 0xbd, 0x15, 0xfe, 0x52, 0x52, 0x15, 0x26, 0x79, 0x86, 0xba, 0x06, 0x56, 0x66, 0xbb, 0x8c, 0x2e, 0x10, 0x11, 0xd5, 0x4a, 0x18, 0x52, 0xda, 0x84, 0x44, 0xf0, 0x3e, 0xe9, 0x8c, 0x35],\n            [0xad, 0xa0, 0x41, 0xec, 0xc8, 0x4d, 0xb9, 0xd2, 0x6e, 0x96, 0x4e, 0x5b, 0xc5, 0xc2, 0xa0, 0x1b, 0xcf, 0x0c, 0xbf, 0x17, 0x66, 0x57, 0xc1, 0x17, 0x90, 0x45, 0x71, 0xc2, 0xe1, 0x24, 0xeb, 0x27]],\n        [[0x2c, 0xb9, 0x42, 0xa4, 0xaf, 0x3b, 0x42, 0x0e, 0xc2, 0x0f, 0xf2, 0xea, 0x83, 0xaf, 0x9a, 0x13, 0x17, 0xb0, 0xbd, 0x89, 0x17, 0xe3, 0x72, 0xcb, 0x0e, 0x76, 0x7e, 0x41, 0x63, 0x04, 0x88, 0x71],\n            [0x75, 0x78, 0x38, 0x86, 0x57, 0xdd, 0x9f, 0xee, 0x54, 0x70, 0x65, 0xbf, 0xf1, 0x2c, 0xe0, 0x39, 0x0d, 0xe3, 0x89, 0xfd, 0x8e, 0x93, 0x4f, 0x43, 0xdc, 0xd5, 0x5b, 0xde, 0xf9, 0x98, 0xe5, 0x7b]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xe7, 0x3b, 0x65, 0x11, 0xdf, 0xb2, 0xf2, 0x63, 0x94, 0x12, 0x6f, 0x5c, 0x9e, 0x77, 0xc1, 0xb6, 0xd8, 0xab, 0x58, 0x7a, 0x1d, 0x95, 0x73, 0xdd, 0xe7, 0xe3, 0x6f, 0xf2, 0x03, 0x1d, 0xdb, 0x76],\n            [0xae, 0x06, 0x4e, 0x2c, 0x52, 0x1b, 0xbc, 0x5a, 0x5a, 0xa5, 0xbe, 0x27, 0xbd, 0xeb, 0xe1, 0x14, 0x17, 0x68, 0x26, 0x07, 0x03, 0xd1, 0x18, 0x0b, 0xdf, 0xf1, 0x06, 0x5c, 0xa6, 0x1b, 0xb9, 0x24]],\n        [[0xc5, 0x66, 0x80, 0x13, 0x0e, 0x48, 0x8c, 0x87, 0x31, 0x84, 0xb4, 0x60, 0xed, 0xc5, 0xec, 0xb6, 0xc5, 0x05, 0x33, 0x5f, 0x2f, 0x7d, 0x40, 0xb6, 0x32, 0x1d, 0x38, 0x74, 0x1b, 0xf1, 0x09, 0x3d],\n            [0xd4, 0x69, 0x82, 0xbc, 0x8d, 0xf8, 0x34, 0x36, 0x75, 0x55, 0x18, 0x55, 0x58, 0x3c, 0x79, 0xaf, 0x26, 0x80, 0xab, 0x9b, 0x95, 0x00, 0xf1, 0xcb, 0xda, 0xc1, 0x9f, 0xf6, 0x2f, 0xa2, 0xf4, 0x45]],\n        [[0x17, 0xbe, 0xeb, 0x85, 0xed, 0x9e, 0xcd, 0x56, 0xf5, 0x17, 0x45, 0x42, 0xb4, 0x1f, 0x44, 0x4c, 0x05, 0x74, 0x15, 0x47, 0x00, 0xc6, 0x6a, 0x3d, 0x24, 0x09, 0x0d, 0x58, 0xb1, 0x42, 0xd7, 0x04],\n            [0x8d, 0xbd, 0xa3, 0xc4, 0x06, 0x9b, 0x1f, 0x90, 0x58, 0x60, 0x74, 0xb2, 0x00, 0x3b, 0x3c, 0xd2, 0xda, 0x82, 0xbb, 0x10, 0x90, 0x69, 0x92, 0xa9, 0xb4, 0x30, 0x81, 0xe3, 0x7c, 0xa8, 0x89, 0x45]],\n        [[0x3f, 0xdc, 0x05, 0xcb, 0x41, 0x3c, 0xc8, 0x23, 0x04, 0x2c, 0x38, 0x99, 0xe3, 0x68, 0x55, 0xf9, 0xd3, 0x32, 0xc7, 0xbf, 0xfa, 0xd4, 0x1b, 0x5d, 0xde, 0xdc, 0x10, 0x42, 0xc0, 0x42, 0xd9, 0x75],\n            [0x2d, 0xab, 0x35, 0x4e, 0x87, 0xc4, 0x65, 0x97, 0x67, 0x24, 0xa4, 0x47, 0xad, 0x3f, 0x8e, 0xf3, 0xcb, 0x31, 0x17, 0x77, 0xc5, 0xe2, 0xd7, 0x8f, 0x3c, 0xc1, 0xcd, 0x56, 0x48, 0xc1, 0x6c, 0x69]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x14, 0xae, 0x5f, 0x88, 0x7b, 0xa5, 0x90, 0xdf, 0x10, 0xb2, 0x8b, 0x5e, 0x24, 0x17, 0xc3, 0xa3, 0xd4, 0x0f, 0x92, 0x61, 0x1a, 0x19, 0x5a, 0xad, 0x76, 0xbd, 0xd8, 0x1c, 0xdd, 0xe0, 0x12, 0x6d],\n            [0x8e, 0xbd, 0x70, 0x8f, 0x02, 0xa3, 0x24, 0x4d, 0x5a, 0x67, 0xc4, 0xda, 0xf7, 0x20, 0x0f, 0x81, 0x5b, 0x7a, 0x05, 0x24, 0x67, 0x83, 0x0b, 0x2a, 0x80, 0xe7, 0xfd, 0x74, 0x4b, 0x9e, 0x5c, 0x0d]],\n        [[0x94, 0xd5, 0x5f, 0x1f, 0xa2, 0xfb, 0xeb, 0xe1, 0x07, 0x34, 0xf8, 0x20, 0xad, 0x81, 0x30, 0x06, 0x2d, 0xa1, 0x81, 0x95, 0x36, 0xcf, 0x11, 0x0b, 0xaf, 0xc1, 0x2b, 0x9a, 0x6c, 0x55, 0xc1, 0x16],\n            [0x36, 0x4f, 0xf1, 0x5e, 0x74, 0x35, 0x13, 0x28, 0xd7, 0x11, 0xcf, 0xb8, 0xde, 0x93, 0xb3, 0x05, 0xb8, 0xb5, 0x73, 0xe9, 0xeb, 0xad, 0x19, 0x1e, 0x89, 0x0f, 0x8b, 0x15, 0xd5, 0x8c, 0xe3, 0x23]],\n        [[0x33, 0x79, 0xe7, 0x18, 0xe6, 0x0f, 0x57, 0x93, 0x15, 0xa0, 0xa7, 0xaa, 0xc4, 0xbf, 0x4f, 0x30, 0x74, 0x95, 0x5e, 0x69, 0x4a, 0x5b, 0x45, 0xe4, 0x00, 0xeb, 0x23, 0x74, 0x4c, 0xdf, 0x6b, 0x45],\n            [0x97, 0x29, 0x6c, 0xc4, 0x42, 0x0b, 0xdd, 0xc0, 0x29, 0x5c, 0x9b, 0x34, 0x97, 0xd0, 0xc7, 0x79, 0x80, 0x63, 0x74, 0xe4, 0x8e, 0x37, 0xb0, 0x2b, 0x7c, 0xe8, 0x68, 0x6c, 0xc3, 0x82, 0x97, 0x57]],\n        [[0x22, 0xbe, 0x83, 0xb6, 0x4b, 0x80, 0x6b, 0x43, 0x24, 0x5e, 0xef, 0x99, 0x9b, 0xa8, 0xfc, 0x25, 0x8d, 0x3b, 0x03, 0x94, 0x2b, 0x3e, 0xe7, 0x95, 0x76, 0x9b, 0xcc, 0x15, 0xdb, 0x32, 0xe6, 0x66],\n            [0x84, 0xf0, 0x4a, 0x13, 0xa6, 0xd6, 0xfa, 0x93, 0x46, 0x07, 0xf6, 0x7e, 0x5c, 0x6d, 0x5e, 0xf6, 0xa6, 0xe7, 0x48, 0xf0, 0x06, 0xea, 0xff, 0x90, 0xc1, 0xcc, 0x4c, 0x19, 0x9c, 0x3c, 0x4e, 0x53]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x2a, 0x50, 0xe3, 0x07, 0x15, 0x59, 0xf2, 0x8b, 0x81, 0xf2, 0xf3, 0xd3, 0x6c, 0x99, 0x8c, 0x70, 0x67, 0xec, 0xcc, 0xee, 0x9e, 0x59, 0x45, 0x59, 0x7d, 0x47, 0x75, 0x69, 0xf5, 0x24, 0x93, 0x5d],\n            [0x6a, 0x4f, 0x1b, 0xbe, 0x6b, 0x30, 0xcf, 0x75, 0x46, 0xe3, 0x7b, 0x9d, 0xfc, 0xcd, 0xd8, 0x5c, 0x1f, 0xb4, 0xc8, 0xe2, 0x24, 0xec, 0x1a, 0x28, 0x05, 0x32, 0x57, 0xfd, 0x3c, 0x5a, 0x98, 0x10]],\n        [[0xa3, 0xdb, 0xf7, 0x30, 0xd8, 0xc2, 0x9a, 0xe1, 0xd3, 0xce, 0x22, 0xe5, 0x80, 0x1e, 0xd9, 0xe4, 0x1f, 0xab, 0xc0, 0x71, 0x1a, 0x86, 0x0e, 0x27, 0x99, 0x5b, 0xfa, 0x76, 0x99, 0xb0, 0x08, 0x3c],\n            [0x2a, 0x93, 0xd2, 0x85, 0x1b, 0x6a, 0x5d, 0xa6, 0xee, 0xd1, 0xd1, 0x33, 0xbd, 0x6a, 0x36, 0x73, 0x37, 0x3a, 0x44, 0xb4, 0xec, 0xa9, 0x7a, 0xde, 0x83, 0x40, 0xd7, 0xdf, 0x28, 0xba, 0xa2, 0x30]],\n        [[0xd3, 0xb5, 0x6d, 0x05, 0x3f, 0x9f, 0xf3, 0x15, 0x8d, 0x7c, 0xca, 0xc9, 0xfc, 0x8a, 0x7c, 0x94, 0xb0, 0x63, 0x36, 0x9b, 0x78, 0xd1, 0x91, 0x1f, 0x93, 0xd8, 0x57, 0x43, 0xde, 0x76, 0xa3, 0x43],\n            [0x9b, 0x35, 0xe2, 0xa9, 0x3d, 0x32, 0x1e, 0xbb, 0x16, 0x28, 0x70, 0xe9, 0x45, 0x2f, 0x8f, 0x70, 0x7f, 0x08, 0x7e, 0x53, 0xc4, 0x7a, 0xbf, 0xf7, 0xe1, 0xa4, 0x6a, 0xd8, 0xac, 0x64, 0x1b, 0x11]],\n        [[0xb2, 0xeb, 0x47, 0x46, 0x18, 0x3e, 0x1f, 0x99, 0x0c, 0xcc, 0xf1, 0x2c, 0xe0, 0xe7, 0x8f, 0xe0, 0x01, 0x7e, 0x65, 0xb8, 0x0c, 0xd0, 0xfb, 0xc8, 0xb9, 0x90, 0x98, 0x33, 0x61, 0x3b, 0xd8, 0x27],\n            [0xa0, 0xbe, 0x72, 0x3a, 0x50, 0x4b, 0x74, 0xab, 0x01, 0xc8, 0x93, 0xc5, 0xe4, 0xc7, 0x08, 0x6c, 0xb4, 0xca, 0xee, 0xeb, 0x8e, 0xd7, 0x4e, 0x26, 0xc6, 0x1d, 0xe2, 0x71, 0xaf, 0x89, 0xa0, 0x2a]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x98, 0x0b, 0xe4, 0xde, 0xdb, 0xa8, 0xfa, 0x82, 0x74, 0x06, 0x52, 0x6d, 0x08, 0x52, 0x8a, 0xff, 0x62, 0xc5, 0x6a, 0x44, 0x0f, 0x51, 0x8c, 0x1f, 0x6e, 0xb6, 0xc6, 0x2c, 0x81, 0xd3, 0x76, 0x46],\n            [0xf4, 0x29, 0x74, 0x2e, 0x80, 0xa7, 0x1a, 0x8f, 0xf6, 0xbd, 0xd6, 0x8e, 0xbf, 0xc1, 0x95, 0x2a, 0xeb, 0xa0, 0x7f, 0x45, 0xa0, 0x50, 0x14, 0x05, 0xb1, 0x57, 0x4c, 0x74, 0xb7, 0xe2, 0x89, 0x7d]],\n        [[0x07, 0xee, 0xa7, 0xad, 0xb7, 0x09, 0x0b, 0x49, 0x4e, 0xbf, 0xca, 0xe5, 0x21, 0xe6, 0xe6, 0xaf, 0xd5, 0x67, 0xf3, 0xce, 0x7e, 0x7c, 0x93, 0x7b, 0x5a, 0x10, 0x12, 0x0e, 0x6c, 0x06, 0x11, 0x75],\n            [0xd5, 0xfc, 0x86, 0xa3, 0x3b, 0xa3, 0x3e, 0x0a, 0xfb, 0x0b, 0xf7, 0x36, 0xb1, 0x5b, 0xda, 0x70, 0xb7, 0x00, 0xa7, 0xda, 0x88, 0x8f, 0x84, 0xa8, 0xbc, 0x1c, 0x39, 0xb8, 0x65, 0xf3, 0x4d, 0x60]],\n        [[0x96, 0x9d, 0x31, 0xf4, 0xa2, 0xbe, 0x81, 0xb9, 0xa5, 0x59, 0x9e, 0xba, 0x07, 0xbe, 0x74, 0x58, 0xd8, 0xeb, 0xc5, 0x9f, 0x3d, 0xd1, 0xf4, 0xae, 0xce, 0x53, 0xdf, 0x4f, 0xc7, 0x2a, 0x89, 0x4d],\n            [0x29, 0xd8, 0xf2, 0xaa, 0xe9, 0x0e, 0xf7, 0x2e, 0x5f, 0x9d, 0x8a, 0x5b, 0x09, 0xed, 0xc9, 0x24, 0x22, 0xf4, 0x0f, 0x25, 0x8f, 0x1c, 0x84, 0x6e, 0x34, 0x14, 0x6c, 0xea, 0xb3, 0x86, 0x5d, 0x04]],\n        [[0x07, 0x98, 0x61, 0xe8, 0x6a, 0xd2, 0x81, 0x49, 0x25, 0xd5, 0x5b, 0x18, 0xc7, 0x35, 0x52, 0x51, 0xa4, 0x46, 0xad, 0x18, 0x0d, 0xc9, 0x5f, 0x18, 0x91, 0x3b, 0xb4, 0xc0, 0x60, 0x59, 0x8d, 0x66],\n            [0x03, 0x1b, 0x79, 0x53, 0x6e, 0x24, 0xae, 0x57, 0xd9, 0x58, 0x09, 0x85, 0x48, 0xa2, 0xd3, 0xb5, 0xe2, 0x4d, 0x11, 0x82, 0xe6, 0x86, 0x3c, 0xe9, 0xb1, 0x00, 0x19, 0xc2, 0x57, 0xf7, 0x66, 0x7a]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x0f, 0xe3, 0x89, 0x03, 0xd7, 0x22, 0x95, 0x9f, 0xca, 0xb4, 0x8d, 0x9e, 0x6d, 0x97, 0xff, 0x8d, 0x21, 0x59, 0x07, 0xef, 0x03, 0x2d, 0x5e, 0xf8, 0x44, 0x46, 0xe7, 0x85, 0x80, 0xc5, 0x89, 0x50],\n            [0x8b, 0xd8, 0x53, 0x86, 0x24, 0x86, 0x29, 0x52, 0x01, 0xfa, 0x20, 0xc3, 0x4e, 0x95, 0xcb, 0xad, 0x7b, 0x34, 0x94, 0x30, 0xb7, 0x7a, 0xfa, 0x96, 0x41, 0x60, 0x2b, 0xcb, 0x59, 0xb9, 0xca, 0x50]],\n        [[0xc2, 0x5b, 0x9b, 0x78, 0x23, 0x1b, 0x3a, 0x88, 0x94, 0x5f, 0x0a, 0x9b, 0x98, 0x2b, 0x6e, 0x53, 0x11, 0xf6, 0xff, 0xc6, 0x7d, 0x42, 0xcc, 0x02, 0x80, 0x40, 0x0d, 0x1e, 0xfb, 0xaf, 0x61, 0x07],\n            [0xb0, 0xe6, 0x2f, 0x81, 0x70, 0xa1, 0x2e, 0x39, 0x04, 0x7c, 0xc4, 0x2c, 0x87, 0x45, 0x4a, 0x5b, 0x69, 0x97, 0xac, 0x6d, 0x2c, 0x10, 0x42, 0x7c, 0x3b, 0x15, 0x70, 0x60, 0x0e, 0x11, 0x6d, 0x3a]],\n        [[0x9b, 0x18, 0x80, 0x5e, 0xdb, 0x05, 0xbd, 0xc6, 0xb7, 0x3c, 0xc2, 0x40, 0x4d, 0x5d, 0xce, 0x97, 0x8a, 0x34, 0x15, 0xab, 0x28, 0x5d, 0x10, 0xf0, 0x37, 0x0c, 0xcc, 0x16, 0xfa, 0x1f, 0x33, 0x0d],\n            [0x19, 0xf9, 0x35, 0xaa, 0x59, 0x1a, 0x0c, 0x5c, 0x06, 0xfc, 0x6a, 0x0b, 0x97, 0x53, 0x36, 0xfc, 0x2a, 0xa5, 0x5a, 0x9b, 0x30, 0xef, 0x23, 0xaf, 0x39, 0x5d, 0x9a, 0x6b, 0x75, 0x57, 0x48, 0x0b]],\n        [[0x26, 0xdc, 0x76, 0x3b, 0xfc, 0xf9, 0x9c, 0x3f, 0x89, 0x0b, 0x62, 0x53, 0xaf, 0x83, 0x01, 0x2e, 0xbc, 0x6a, 0xc6, 0x03, 0x0d, 0x75, 0x2a, 0x0d, 0xe6, 0x94, 0x54, 0xcf, 0xb3, 0xe5, 0x96, 0x25],\n            [0xfe, 0x82, 0xb1, 0x74, 0x31, 0x8a, 0xa7, 0x6f, 0x56, 0xbd, 0x8d, 0xf4, 0xe0, 0x94, 0x51, 0x59, 0xde, 0x2c, 0x5a, 0xf4, 0x84, 0x6b, 0x4a, 0x88, 0x93, 0xc0, 0x0c, 0x9a, 0xac, 0xa7, 0xa0, 0x68]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x25, 0x0d, 0xd6, 0xc7, 0x23, 0x47, 0x10, 0xad, 0xc7, 0x08, 0x5c, 0x87, 0x87, 0x93, 0x98, 0x18, 0xb8, 0xd3, 0x9c, 0xac, 0x5a, 0x3d, 0xc5, 0x75, 0xf8, 0x49, 0x32, 0x14, 0xcc, 0x51, 0x96, 0x24],\n            [0x65, 0x9c, 0x5d, 0xf0, 0x37, 0x04, 0xf0, 0x34, 0x69, 0x2a, 0xf0, 0xa5, 0x64, 0xca, 0xde, 0x2b, 0x5b, 0x15, 0x10, 0xd2, 0xab, 0x06, 0xdd, 0xc4, 0xb0, 0xb6, 0x5b, 0xc1, 0x17, 0xdf, 0x8f, 0x02]],\n        [[0xbd, 0x59, 0x3d, 0xbf, 0x5c, 0x31, 0x44, 0x2c, 0x32, 0x94, 0x04, 0x60, 0x84, 0x0f, 0xad, 0x00, 0xb6, 0x8f, 0xc9, 0x1d, 0xcc, 0x5c, 0xa2, 0x49, 0x0e, 0x50, 0x91, 0x08, 0x9a, 0x43, 0x55, 0x05],\n            [0x5d, 0x93, 0x55, 0xdf, 0x9b, 0x12, 0x19, 0xec, 0x93, 0x85, 0x42, 0x9e, 0x66, 0x0f, 0x9d, 0xaf, 0x99, 0xaf, 0x26, 0x89, 0xbc, 0x61, 0xfd, 0xff, 0xce, 0x4b, 0xf4, 0x33, 0x95, 0xc9, 0x35, 0x58]],\n        [[0x12, 0x55, 0xf9, 0xda, 0xcb, 0x44, 0xa7, 0xdc, 0x57, 0xe2, 0xf9, 0x9a, 0xe6, 0x07, 0x23, 0x60, 0x54, 0xa7, 0x39, 0xa5, 0x9b, 0x84, 0x56, 0x6e, 0xaa, 0x8b, 0x8f, 0xb0, 0x2c, 0x87, 0xaf, 0x67],\n            [0x00, 0xa9, 0x4c, 0xb2, 0x12, 0xf8, 0x32, 0xa8, 0x7a, 0x00, 0x4b, 0x49, 0x32, 0xba, 0x1f, 0x5d, 0x44, 0x8e, 0x44, 0x7a, 0xdc, 0x11, 0xfb, 0x39, 0x08, 0x57, 0x87, 0xa5, 0x12, 0x42, 0x93, 0x0e]],\n        [[0x17, 0xb4, 0xae, 0x72, 0x59, 0xd0, 0xaa, 0xa8, 0x16, 0x8b, 0x63, 0x11, 0xb3, 0x43, 0x04, 0xda, 0x0c, 0xa8, 0xb7, 0x68, 0xdd, 0x4e, 0x54, 0xe7, 0xaf, 0x5d, 0x5d, 0x05, 0x76, 0x36, 0xec, 0x0d],\n            [0x6d, 0x7c, 0x82, 0x32, 0x38, 0x55, 0x57, 0x74, 0x5b, 0x7d, 0xc3, 0xc4, 0xfb, 0x06, 0x29, 0xf0, 0x13, 0x55, 0x54, 0xc6, 0xa7, 0xdc, 0x4c, 0x9f, 0x98, 0x49, 0x20, 0xa8, 0xc3, 0x8d, 0xfa, 0x48]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x87, 0x47, 0x9d, 0xe9, 0x25, 0xd5, 0xe3, 0x47, 0x78, 0xdf, 0x85, 0xa7, 0x85, 0x5e, 0x7a, 0x4c, 0x5f, 0x79, 0x1a, 0xf3, 0xa2, 0xb2, 0x28, 0xa0, 0x9c, 0xdd, 0x30, 0x40, 0xd4, 0x38, 0xbd, 0x28],\n            [0xfc, 0xbb, 0xd5, 0x78, 0x6d, 0x1d, 0xd4, 0x99, 0xb4, 0xaa, 0x44, 0x44, 0x7a, 0x1b, 0xd8, 0xfe, 0xb4, 0x99, 0xb9, 0xcc, 0xe7, 0xc4, 0xd3, 0x3a, 0x73, 0x83, 0x41, 0x5c, 0x40, 0xd7, 0x2d, 0x55]],\n        [[0x26, 0xe1, 0x7b, 0x5f, 0xe5, 0xdc, 0x3f, 0x7d, 0xa1, 0xa7, 0x26, 0x44, 0x22, 0x23, 0xc0, 0x8f, 0x7d, 0xf1, 0xb5, 0x11, 0x47, 0x7b, 0x19, 0xd4, 0x75, 0x6f, 0x1e, 0xa5, 0x27, 0xfe, 0xc8, 0x0e],\n            [0xd3, 0x11, 0x3d, 0xab, 0xef, 0x2c, 0xed, 0xb1, 0x3d, 0x7c, 0x32, 0x81, 0x6b, 0xfe, 0xf8, 0x1c, 0x3c, 0x7b, 0xc0, 0x61, 0xdf, 0xb8, 0x75, 0x76, 0x7f, 0xaa, 0xd8, 0x93, 0xaf, 0x3d, 0xe8, 0x3d]],\n        [[0xfd, 0x5b, 0x4e, 0x8d, 0xb6, 0x7e, 0x82, 0x9b, 0xef, 0xce, 0x04, 0x69, 0x51, 0x52, 0xff, 0xef, 0xa0, 0x52, 0xb5, 0x79, 0x17, 0x5e, 0x2f, 0xde, 0xd6, 0x3c, 0x2d, 0xa0, 0x43, 0xb4, 0x0b, 0x19],\n            [0xc0, 0x61, 0x48, 0x48, 0x17, 0xf4, 0x9e, 0x18, 0x51, 0x2d, 0xea, 0x2f, 0xf2, 0xf2, 0xe0, 0xa3, 0x14, 0xb7, 0x8b, 0x3a, 0x30, 0xf5, 0x81, 0xc1, 0x5d, 0x71, 0x39, 0x62, 0x55, 0x1f, 0x60, 0x5a]],\n        [[0xe5, 0x89, 0x8a, 0x76, 0x6c, 0xdb, 0x4d, 0x0a, 0x5b, 0x72, 0x9d, 0x59, 0x6e, 0x63, 0x63, 0x18, 0x7c, 0xe3, 0xfa, 0xe2, 0xdb, 0xa1, 0x8d, 0xf4, 0xa5, 0xd7, 0x16, 0xb2, 0xd0, 0xb3, 0x3f, 0x39],\n            [0xce, 0x60, 0x09, 0x6c, 0xf5, 0x76, 0x17, 0x24, 0x80, 0x3a, 0x96, 0xc7, 0x94, 0x2e, 0xf7, 0x6b, 0xef, 0xb5, 0x05, 0x96, 0xef, 0xd3, 0x7b, 0x51, 0xda, 0x05, 0x44, 0x67, 0xbc, 0x07, 0x21, 0x4e]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xe9, 0x73, 0x6f, 0x21, 0xb9, 0xde, 0x22, 0x7d, 0xeb, 0x97, 0x31, 0x10, 0xa3, 0xea, 0xe1, 0xc6, 0x37, 0xeb, 0x8f, 0x43, 0x58, 0xde, 0x41, 0x64, 0x0e, 0x3e, 0x07, 0x99, 0x3d, 0xf1, 0xdf, 0x1e],\n            [0xf8, 0xad, 0x43, 0xc2, 0x17, 0x06, 0xe2, 0xe4, 0xa9, 0x86, 0xcd, 0x18, 0xd7, 0x78, 0xc8, 0x74, 0x66, 0xd2, 0x09, 0x18, 0xa5, 0xf1, 0xca, 0xa6, 0x62, 0x92, 0xc1, 0xcb, 0x00, 0xeb, 0x42, 0x2e]],\n        [[0x7b, 0x34, 0x24, 0x4c, 0xcf, 0x38, 0xe5, 0x6c, 0x0a, 0x01, 0x2c, 0x22, 0x0b, 0x24, 0x38, 0xad, 0x24, 0x7e, 0x19, 0xf0, 0x6c, 0xf9, 0x31, 0xf4, 0x35, 0x11, 0xf6, 0x46, 0x33, 0x3a, 0x23, 0x59],\n            [0x20, 0x0b, 0xa1, 0x08, 0x19, 0xad, 0x39, 0x54, 0xea, 0x3e, 0x23, 0x09, 0xb6, 0xe2, 0xd2, 0xbc, 0x4d, 0xfc, 0x9c, 0xf0, 0x13, 0x16, 0x22, 0x3f, 0xb9, 0xd2, 0x11, 0x86, 0x90, 0x55, 0xce, 0x3c]],\n        [[0xc4, 0x0b, 0x4b, 0x62, 0x99, 0x37, 0x84, 0x3f, 0x74, 0xa2, 0xf9, 0xce, 0xe2, 0x0b, 0x0f, 0x2a, 0x3d, 0xa3, 0xe3, 0xdb, 0x5a, 0x9d, 0x93, 0xcc, 0xa5, 0xef, 0x82, 0x91, 0x1d, 0xe6, 0x6c, 0x68],\n            [0xa3, 0x64, 0x17, 0x9b, 0x8b, 0xc8, 0x3a, 0x61, 0xe6, 0x9d, 0xc6, 0xed, 0x7b, 0x03, 0x52, 0x26, 0x9d, 0x3a, 0xb3, 0x13, 0xcc, 0x8a, 0xfd, 0x2c, 0x1a, 0x1d, 0xed, 0x13, 0xd0, 0x55, 0x57, 0x0e]],\n        [[0x1a, 0xea, 0xbf, 0xfd, 0x4a, 0x3c, 0x8e, 0xec, 0x29, 0x7e, 0x77, 0x77, 0x12, 0x99, 0xd7, 0x84, 0xf9, 0x55, 0x7f, 0xf1, 0x8b, 0xb4, 0xd2, 0x95, 0xa3, 0x8d, 0xf0, 0x8a, 0xa7, 0xeb, 0x82, 0x4b],\n            [0x2c, 0x28, 0xf4, 0x3a, 0xf6, 0xde, 0x0a, 0xe0, 0x41, 0x44, 0x23, 0xf8, 0x3f, 0x03, 0x64, 0x9f, 0xc3, 0x55, 0x4c, 0xc6, 0xc1, 0x94, 0x1c, 0x24, 0x5d, 0x5f, 0x92, 0x45, 0x96, 0x57, 0x37, 0x14]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xc1, 0xcd, 0x90, 0x66, 0xb9, 0x76, 0xa0, 0x5b, 0xa5, 0x85, 0x75, 0x23, 0xf9, 0x89, 0xa5, 0x82, 0xb2, 0x6f, 0xb1, 0xeb, 0xc4, 0x69, 0x6f, 0x18, 0x5a, 0xed, 0x94, 0x3d, 0x9d, 0xd9, 0x2c, 0x1a],\n            [0x35, 0xb0, 0xe6, 0x73, 0x06, 0xb7, 0x37, 0xe0, 0xf8, 0xb0, 0x22, 0xe8, 0xd2, 0xed, 0x0b, 0xef, 0xe6, 0xc6, 0x5a, 0x99, 0x9e, 0x1a, 0x9f, 0x04, 0x97, 0xe4, 0x4d, 0x0b, 0xbe, 0xba, 0x44, 0x40]],\n        [[0xc1, 0x56, 0x96, 0x91, 0x5f, 0x1f, 0xbb, 0x54, 0x6f, 0x88, 0x89, 0x0a, 0xb2, 0xd6, 0x41, 0x42, 0x6a, 0x82, 0xee, 0x14, 0xaa, 0x76, 0x30, 0x65, 0x0f, 0x67, 0x39, 0xa6, 0x51, 0x7c, 0x49, 0x24],\n            [0x35, 0xa3, 0x78, 0xd1, 0x11, 0x0f, 0x75, 0xd3, 0x70, 0x46, 0xdb, 0x20, 0x51, 0xcb, 0x92, 0x80, 0x54, 0x10, 0x74, 0x36, 0x86, 0xa9, 0xd7, 0xa3, 0x08, 0x78, 0xf1, 0x01, 0x29, 0xf8, 0x80, 0x3b]],\n        [[0xdb, 0xa7, 0x9d, 0x9d, 0xbf, 0xa0, 0xcc, 0xed, 0x53, 0xa2, 0xa2, 0x19, 0x39, 0x48, 0x83, 0x19, 0x37, 0x58, 0xd1, 0x04, 0x28, 0x40, 0xf7, 0x8a, 0xc2, 0x08, 0xb7, 0xa5, 0x42, 0xcf, 0x53, 0x4c],\n            [0xa7, 0xbb, 0xf6, 0x8e, 0xad, 0xdd, 0xf7, 0x90, 0xdd, 0x5f, 0x93, 0x89, 0xae, 0x04, 0x37, 0xe6, 0x9a, 0xb7, 0xe8, 0xc0, 0xdf, 0x16, 0x2a, 0xbf, 0xc4, 0x3a, 0x3c, 0x41, 0xd5, 0x89, 0x72, 0x5a]],\n        [[0x1f, 0x96, 0xff, 0x34, 0x2c, 0x13, 0x21, 0xcb, 0x0a, 0x89, 0x85, 0xbe, 0xb3, 0x70, 0x9e, 0x1e, 0xde, 0x97, 0xaf, 0x96, 0x30, 0xf7, 0x48, 0x89, 0x40, 0x8d, 0x07, 0xf1, 0x25, 0xf0, 0x30, 0x58],\n            [0x1e, 0xd4, 0x93, 0x57, 0xe2, 0x17, 0xe7, 0x9d, 0xab, 0x3c, 0x55, 0x03, 0x82, 0x2f, 0x2b, 0xdb, 0x56, 0x1e, 0x30, 0x2e, 0x24, 0x47, 0x6e, 0xe6, 0xff, 0x33, 0x24, 0x2c, 0x75, 0x51, 0xd4, 0x67]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0x2b, 0x06, 0xd9, 0xa1, 0x5d, 0xe1, 0xf4, 0xd1, 0x1e, 0x3c, 0x9a, 0xc6, 0x29, 0x2b, 0x13, 0x13, 0x78, 0xc0, 0xd8, 0x16, 0x17, 0x2d, 0x9e, 0xa9, 0xc9, 0x79, 0x57, 0xab, 0x24, 0x91, 0x92, 0x19],\n            [0x69, 0xfb, 0xa1, 0x9c, 0xa6, 0x75, 0x49, 0x7d, 0x60, 0x73, 0x40, 0x42, 0xc4, 0x13, 0x0a, 0x95, 0x79, 0x1e, 0x04, 0x83, 0x94, 0x99, 0x9b, 0x1e, 0x0c, 0xe8, 0x1f, 0x54, 0xef, 0xcb, 0xc0, 0x52]],\n        [[0x14, 0x89, 0x73, 0xa1, 0x37, 0x87, 0x6a, 0x7a, 0xcf, 0x1d, 0xd9, 0x2e, 0x1a, 0x67, 0xed, 0x74, 0xc0, 0xf0, 0x9c, 0x33, 0xdd, 0xdf, 0x08, 0xbf, 0x7b, 0xd1, 0x66, 0xda, 0xe6, 0xc9, 0x49, 0x08],\n            [0xe9, 0xdd, 0x5e, 0x55, 0xb0, 0x0a, 0xde, 0x21, 0x4c, 0x5a, 0x2e, 0xd4, 0x80, 0x3a, 0x57, 0x92, 0x7a, 0xf1, 0xc4, 0x2c, 0x40, 0xaf, 0x2f, 0xc9, 0x92, 0x03, 0xe5, 0x5a, 0xbc, 0xdc, 0xf4, 0x09]],\n        [[0xf3, 0xe1, 0x2b, 0x7c, 0x05, 0x86, 0x80, 0x93, 0x4a, 0xad, 0xb4, 0x8f, 0x7e, 0x99, 0x0c, 0xfd, 0xcd, 0xef, 0xd1, 0xff, 0x2c, 0x69, 0x34, 0x13, 0x41, 0x64, 0xcf, 0x3b, 0xd0, 0x90, 0x09, 0x1e],\n            [0x9d, 0x45, 0xd6, 0x80, 0xe6, 0x45, 0xaa, 0xf4, 0x15, 0xaa, 0x5c, 0x34, 0x87, 0x99, 0xa2, 0x8c, 0x26, 0x84, 0x62, 0x7d, 0xb6, 0x29, 0xc0, 0x52, 0xea, 0xf5, 0x81, 0x18, 0x0f, 0x35, 0xa9, 0x0e]],\n        [[0xe7, 0x20, 0x72, 0x7c, 0x6d, 0x94, 0x5f, 0x52, 0x44, 0x54, 0xe3, 0xf1, 0xb2, 0xb0, 0x36, 0x46, 0x0f, 0xae, 0x92, 0xe8, 0x70, 0x9d, 0x6e, 0x79, 0xb1, 0xad, 0x37, 0xa9, 0x5f, 0xc0, 0xde, 0x03],\n            [0x15, 0x55, 0x37, 0xc6, 0x1c, 0x27, 0x1c, 0x6d, 0x14, 0x4f, 0xca, 0xa4, 0xc4, 0x88, 0x25, 0x46, 0x39, 0xfc, 0x5a, 0xe5, 0xfe, 0x29, 0x11, 0x69, 0xf5, 0x72, 0x84, 0x4d, 0x78, 0x9f, 0x94, 0x15]],\n        [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n            [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]],\n        [[0xec, 0xd3, 0xff, 0x57, 0x0b, 0xb0, 0xb2, 0xdc, 0xf8, 0x4f, 0xe2, 0x12, 0xd5, 0x36, 0xbe, 0x6b, 0x09, 0x43, 0x6d, 0xa3, 0x4d, 0x90, 0x2d, 0xb8, 0x74, 0xe8, 0x71, 0x45, 0x19, 0x8b, 0x0c, 0x6a],\n            [0xb8, 0x42, 0x1c, 0x03, 0xad, 0x2c, 0x03, 0x8e, 0xac, 0xd7, 0x98, 0x29, 0x13, 0xc6, 0x02, 0x29, 0xb5, 0xd4, 0xe7, 0xcf, 0xcc, 0x8b, 0x83, 0xec, 0x35, 0xc7, 0x9c, 0x74, 0xb7, 0xad, 0x85, 0x5f]],\n        [[0x78, 0x84, 0xe1, 0x56, 0x45, 0x69, 0x68, 0x5a, 0x4f, 0xb8, 0xb1, 0x29, 0xff, 0x33, 0x03, 0x31, 0xb7, 0xcb, 0x96, 0x25, 0xe6, 0xe6, 0x41, 0x98, 0x1a, 0xbb, 0x03, 0x56, 0xf2, 0xb2, 0x91, 0x34],\n            [0x2c, 0x6c, 0xf7, 0x66, 0xa4, 0x62, 0x6b, 0x39, 0xb3, 0xba, 0x65, 0xd3, 0x1c, 0xf8, 0x11, 0xaa, 0xbe, 0xdc, 0x80, 0x59, 0x87, 0xf5, 0x7b, 0xe5, 0xe3, 0xb3, 0x3e, 0x39, 0xda, 0xbe, 0x88, 0x09]],\n        [[0x8b, 0xf1, 0xa0, 0xf5, 0xdc, 0x29, 0xb4, 0xe2, 0x07, 0xc6, 0x7a, 0x00, 0xd0, 0x89, 0x17, 0x51, 0xd4, 0xbb, 0xd4, 0x22, 0xea, 0x7e, 0x7d, 0x7c, 0x24, 0xea, 0xf2, 0xe8, 0x22, 0x12, 0x95, 0x06],\n            [0xda, 0x7c, 0xa4, 0x0c, 0xf4, 0xba, 0x6e, 0xe1, 0x89, 0xb5, 0x59, 0xca, 0xf1, 0xc0, 0x29, 0x36, 0x09, 0x44, 0xe2, 0x7f, 0xd1, 0x63, 0x15, 0x99, 0xea, 0x25, 0xcf, 0x0c, 0x9d, 0xc0, 0x44, 0x6f]],\n        [[0x1d, 0x86, 0x4e, 0xcf, 0xf7, 0x37, 0x10, 0x25, 0x8f, 0x12, 0xfb, 0x19, 0xfb, 0xe0, 0xed, 0x10, 0xc8, 0xe2, 0xf5, 0x75, 0xb1, 0x33, 0xc0, 0x96, 0x0d, 0xfb, 0x15, 0x6c, 0x0d, 0x07, 0x5f, 0x05],\n            [0x69, 0x3e, 0x47, 0x97, 0x2c, 0xaf, 0x52, 0x7c, 0x78, 0x83, 0xad, 0x1b, 0x39, 0x82, 0x2f, 0x02, 0x6f, 0x47, 0xdb, 0x2a, 0xb0, 0xe1, 0x91, 0x99, 0x55, 0xb8, 0x99, 0x3a, 0xa0, 0x44, 0x11, 0x51]]];\n    var arrFact = arrays.makeFactory();\n    for (var i = 0; i < 425; i += 1) {\n        exports.base_multiples_affine[i] = make_ge25519_aff(arrFact);\n        exports.base_multiples_affine[i].x.set(init_data[i][0]);\n        exports.base_multiples_affine[i].y.set(init_data[i][1]);\n    }\n    init_data = null;\n})();\nObject.freeze(exports);\n","/* Copyright(c) 2015 3NSoft Inc.\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, you can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\nfunction make_sc25519(arrFactory) {\n    return arrFactory.getUint32Array(32);\n}\nexports.make_sc25519 = make_sc25519;\nfunction make_shortsc25519(arrFactory) {\n    return arrFactory.getUint32Array(16);\n}\nexports.make_shortsc25519 = make_shortsc25519;\n/**\n * Analog of constant m in crypto_sign/ed25519/ref/sc25519.c\n * Length === 32.\n */\nvar m = new Uint8Array([0xED, 0xD3, 0xF5, 0x5C, 0x1A, 0x63, 0x12, 0x58,\n    0xD6, 0x9C, 0xF7, 0xA2, 0xDE, 0xF9, 0xDE, 0x14,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10]);\n/**\n * Analog of constant mu in crypto_sign/ed25519/ref/sc25519.c\n * Length === 33.\n */\nvar mu = new Uint8Array([0x1B, 0x13, 0x2C, 0x0A, 0xA3, 0xE5, 0x9C, 0xED,\n    0xA7, 0x29, 0x63, 0x08, 0x5D, 0x21, 0x06, 0x21,\n    0xEB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n    0x0F]);\n/**\n * Analog of lt in crypto_sign/ed25519/ref/sc25519.c\n * All inputs are 16-bit.\n */\nfunction lt(a, b) {\n    return (a < b) ? 1 : 0;\n    //\treturn ((a - b) >>> 31); /* (a less than b) ? 1: yes; 0: no */\n}\n/**\n * Analog of reduce_add_sub in crypto_sign/ed25519/ref/sc25519.c\n * Reduce coefficients of r before calling reduce_add_sub\n */\nfunction reduce_add_sub(r, arrFactory) {\n    var pb = 0;\n    var b;\n    var mask;\n    var t = arrFactory.getUint8Array(32);\n    for (var i = 0; i < 32; i += 1) {\n        pb += m[i];\n        b = lt(r[i], pb);\n        t[i] = r[i] - pb + (b << 8);\n        pb = b;\n    }\n    mask = (b - 1) | 0;\n    for (var i = 0; i < 32; i += 1) {\n        r[i] ^= mask & (r[i] ^ t[i]);\n    }\n    arrFactory.recycle(t);\n}\n/**\n * Analog of barrett_reduce in crypto_sign/ed25519/ref/sc25519.c\n * Reduce coefficients of x before calling barrett_reduce\n */\nfunction barrett_reduce(r, x, arrFactory) {\n    /* See HAC, Alg. 14.42 */\n    var q2 = arrFactory.getUint32Array(66);\n    var q3 = q2.subarray(33);\n    var r1 = arrFactory.getUint32Array(33);\n    var r2 = arrFactory.getUint32Array(33);\n    var carry;\n    var pb = 0;\n    var b;\n    for (var i = 0; i < 66; i += 1) {\n        q2[i] = 0;\n    }\n    for (var i = 0; i < 33; i += 1) {\n        r2[i] = 0;\n    }\n    for (var i = 0; i < 33; i += 1) {\n        for (var j = 0; j < 33; j += 1) {\n            if (i + j >= 31) {\n                q2[i + j] += mu[i] * x[j + 31];\n            }\n        }\n    }\n    carry = q2[31] >>> 8;\n    q2[32] += carry;\n    carry = q2[32] >>> 8;\n    q2[33] += carry;\n    for (var i = 0; i < 33; i += 1) {\n        r1[i] = x[i];\n    }\n    for (var i = 0; i < 32; i += 1) {\n        for (var j = 0; j < 33; j += 1) {\n            if (i + j < 33) {\n                r2[i + j] += m[i] * q3[j];\n            }\n        }\n    }\n    for (var i = 0; i < 32; i += 1) {\n        carry = r2[i] >>> 8;\n        r2[i + 1] += carry;\n        r2[i] &= 0xff;\n    }\n    for (var i = 0; i < 32; i += 1) {\n        pb += r2[i];\n        b = lt(r1[i], pb);\n        r[i] = r1[i] - pb + (b << 8);\n        pb = b;\n    }\n    /* XXX: Can it really happen that r<0?, See HAC, Alg 14.42, Step 3\n     * If so: Handle\tit here!\n     */\n    reduce_add_sub(r, arrFactory);\n    reduce_add_sub(r, arrFactory);\n    arrFactory.recycle(q2, r1, r2);\n}\n/**\n * Analog of sc25519_from32bytes in crypto_sign/ed25519/ref/sc25519.c\n */\nfunction from32bytes(r, x, arrFactory) {\n    var t = arrFactory.getUint32Array(64);\n    for (var i = 0; i < 32; i += 1) {\n        t[i] = x[i];\n    }\n    for (var i = 32; i < 64; i += 1) {\n        t[i] = 0;\n    }\n    barrett_reduce(r, t, arrFactory);\n    arrFactory.recycle(t);\n}\nexports.from32bytes = from32bytes;\n/**\n * Analog of sc25519_from64bytes in crypto_sign/ed25519/ref/sc25519.c\n */\nfunction from64bytes(r, x, arrFactory) {\n    var t = arrFactory.getUint32Array(64);\n    for (var i = 0; i < 64; i += 1) {\n        t[i] = x[i];\n    }\n    barrett_reduce(r, t, arrFactory);\n    arrFactory.recycle(t);\n}\nexports.from64bytes = from64bytes;\n/**\n * Analog of sc25519_to32bytes in crypto_sign/ed25519/ref/sc25519.c\n */\nfunction to32bytes(r, x) {\n    for (var i = 0; i < 32; i += 1) {\n        r[i] = x[i];\n    }\n}\nexports.to32bytes = to32bytes;\n/**\n * Analog of sc25519_add in crypto_sign/ed25519/ref/sc25519.c\n */\nfunction add(r, x, y, arrFactory) {\n    var carry;\n    for (var i = 0; i < 32; i += 1) {\n        r[i] = x[i] + y[i];\n    }\n    for (var i = 0; i < 31; i += 1) {\n        carry = r[i] >>> 8;\n        r[i + 1] += carry;\n        r[i] &= 0xff;\n    }\n    reduce_add_sub(r, arrFactory);\n}\nexports.add = add;\n/**\n * Analog of sc25519_mul in crypto_sign/ed25519/ref/sc25519.c\n */\nfunction mul(r, x, y, arrFactory) {\n    var carry;\n    var t = arrFactory.getUint32Array(64);\n    for (var i = 0; i < 64; i += 1) {\n        t[i] = 0;\n    }\n    for (var i = 0; i < 32; i += 1) {\n        for (var j = 0; j < 32; j += 1) {\n            t[i + j] += x[i] * y[j];\n        }\n    }\n    /* Reduce coefficients */\n    for (var i = 0; i < 63; i += 1) {\n        carry = t[i] >>> 8;\n        t[i + 1] += carry;\n        t[i] &= 0xff;\n    }\n    barrett_reduce(r, t, arrFactory);\n    arrFactory.recycle(t);\n}\nexports.mul = mul;\n/**\n * Analog of sc25519_window3 in crypto_sign/ed25519/ref/sc25519.c\n */\nfunction window3(r, s) {\n    for (var i = 0; i < 10; i += 1) {\n        r[8 * i + 0] = s[3 * i + 0] & 7;\n        r[8 * i + 1] = (s[3 * i + 0] >>> 3) & 7;\n        r[8 * i + 2] = (s[3 * i + 0] >>> 6) & 7;\n        r[8 * i + 2] ^= (s[3 * i + 1] << 2) & 7;\n        r[8 * i + 3] = (s[3 * i + 1] >>> 1) & 7;\n        r[8 * i + 4] = (s[3 * i + 1] >>> 4) & 7;\n        r[8 * i + 5] = (s[3 * i + 1] >>> 7) & 7;\n        r[8 * i + 5] ^= (s[3 * i + 2] << 1) & 7;\n        r[8 * i + 6] = (s[3 * i + 2] >>> 2) & 7;\n        r[8 * i + 7] = (s[3 * i + 2] >>> 5) & 7;\n    }\n    r[8 * i + 0] = s[3 * i + 0] & 7;\n    r[8 * i + 1] = (s[3 * i + 0] >>> 3) & 7;\n    r[8 * i + 2] = (s[3 * i + 0] >>> 6) & 7;\n    r[8 * i + 2] ^= (s[3 * i + 1] << 2) & 7;\n    r[8 * i + 3] = (s[3 * i + 1] >>> 1) & 7;\n    r[8 * i + 4] = (s[3 * i + 1] >>> 4) & 7;\n    /* Making it signed */\n    var carry = 0;\n    for (var i = 0; i < 84; i += 1) {\n        r[i] += carry;\n        r[i + 1] += r[i] >>> 3;\n        r[i] &= 7;\n        carry = r[i] >>> 2;\n        r[i] -= carry << 3;\n    }\n    r[84] += carry;\n}\nexports.window3 = window3;\n/**\n * Analog of sc25519_2interleave2 in crypto_sign/ed25519/ref/sc25519.c\n */\nfunction interleave2(r, s1, s2) {\n    for (var i = 0; i < 31; i += 1) {\n        r[4 * i] = (s1[i] & 3) ^ ((s2[i] & 3) << 2);\n        r[4 * i + 1] = ((s1[i] >>> 2) & 3) ^ (((s2[i] >>> 2) & 3) << 2);\n        r[4 * i + 2] = ((s1[i] >>> 4) & 3) ^ (((s2[i] >>> 4) & 3) << 2);\n        r[4 * i + 3] = ((s1[i] >>> 6) & 3) ^ (((s2[i] >>> 6) & 3) << 2);\n    }\n    r[124] = (s1[31] & 3) ^ ((s2[31] & 3) << 2);\n    r[125] = ((s1[31] >>> 2) & 3) ^ (((s2[31] >>> 2) & 3) << 2);\n    r[126] = ((s1[31] >>> 4) & 3) ^ (((s2[31] >>> 4) & 3) << 2);\n}\nexports.interleave2 = interleave2;\nObject.freeze(exports);\n","/* Copyright(c) 2015 3NSoft Inc.\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, you can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\nvar ge = require('./ge25519');\nvar sc = require('./sc25519');\nvar sha512 = require('../hash/sha512');\nvar arrays = require('../util/arrays');\nvar vectVerify = require('../util/verify');\n/**\n * Analog of crypto_sign_keypair in crypto_sign/ed25519/ref/keypair.c\n */\nfunction generate_keypair(seed, arrFactory) {\n    if (!(seed instanceof Uint8Array)) {\n        throw new TypeError(\"Seed must be Uint8Array.\");\n    }\n    if (seed.length !== 32) {\n        throw new Error(\"Seed should have 32 \" +\n            \"elements (bytes) in it, but it is \" + seed.length +\n            \" elements long.\");\n    }\n    if (!arrFactory) {\n        arrFactory = arrays.makeFactory();\n    }\n    var scsk = sc.make_sc25519(arrFactory);\n    var gepk = ge.make_ge25519(arrFactory);\n    var az = sha512.hash(seed, arrFactory);\n    az[0] &= 248;\n    az[31] &= 127;\n    az[31] |= 64;\n    sc.from32bytes(scsk, az, arrFactory);\n    ge.scalarmult_base(gepk, scsk, arrFactory);\n    var pk = arrFactory.getUint8Array(32);\n    ge.pack(pk, gepk, arrFactory);\n    var sk = arrFactory.getUint8Array(64);\n    for (var i = 0; i < 32; i += 1) {\n        sk[i] = seed[i];\n    }\n    for (var i = 32; i < 64; i += 1) {\n        sk[i] = pk[i - 32];\n    }\n    arrFactory.wipeRecycled();\n    return {\n        skey: sk,\n        pkey: pk\n    };\n}\nexports.generate_keypair = generate_keypair;\nfunction extract_pkey(sk) {\n    if (sk.BYTES_PER_ELEMENT !== 1) {\n        throw new TypeError(\"Key array sk must be Uint8Array.\");\n    }\n    if (sk.length !== 64) {\n        throw new Error(\"Key array sk should have 64 \" +\n            \"elements (bytes) in it, but it is \" + sk.length + \" elements long.\");\n    }\n    var pk = new Uint8Array(32);\n    for (var i = 32; i < 64; i += 1) {\n        pk[i - 32] = sk[i];\n    }\n    return pk;\n}\nexports.extract_pkey = extract_pkey;\n/**\n * Analog of crypto_sign in crypto_sign/ed25519/ref/sign.c\n */\nfunction sign(m, sk, arrFactory) {\n    if (!(sk instanceof Uint8Array)) {\n        throw new TypeError(\"Key array sk must be Uint8Array.\");\n    }\n    if (sk.length !== 64) {\n        throw new Error(\"Key array sk should have 64 \" +\n            \"elements (bytes) in it, but it is \" + sk.length + \" elements long.\");\n    }\n    if (!arrFactory) {\n        arrFactory = arrays.makeFactory();\n    }\n    var sck = sc.make_sc25519(arrFactory);\n    var scs = sc.make_sc25519(arrFactory);\n    var scsk = sc.make_sc25519(arrFactory);\n    var ger = ge.make_ge25519(arrFactory);\n    var pk = arrFactory.getUint8Array(32);\n    pk.set(sk.subarray(32));\n    /* pk: 32-byte public key A */\n    var az = sha512.hash(sk.subarray(0, 32), arrFactory);\n    az[0] &= 248;\n    az[31] &= 127;\n    az[31] |= 64;\n    /* az: 32-byte scalar a, 32-byte randomizer z */\n    var sm = new Uint8Array(m.length + 64);\n    sm.subarray(64).set(m);\n    sm.subarray(32, 64).set(az.subarray(32));\n    /* sm: 32-byte uninit, 32-byte z, mlen-byte m */\n    var nonce = sha512.hash(sm.subarray(32), arrFactory);\n    /* nonce: 64-byte H(z,m) */\n    sc.from64bytes(sck, nonce, arrFactory);\n    ge.scalarmult_base(ger, sck, arrFactory);\n    ge.pack(sm.subarray(0, 32), ger, arrFactory);\n    /* sm: 32-byte R, 32-byte z, mlen-byte m */\n    sm.set(pk, 32);\n    /* sm: 32-byte R, 32-byte A, mlen-byte m */\n    var hram = sha512.hash(sm, arrFactory);\n    /* hram: 64-byte H(R,A,m) */\n    sc.from64bytes(scs, hram, arrFactory);\n    sc.from32bytes(scsk, az, arrFactory);\n    sc.mul(scs, scs, scsk, arrFactory);\n    sc.add(scs, scs, sck, arrFactory);\n    /* scs: S = nonce + H(R,A,m)a */\n    sc.to32bytes(sm.subarray(32, 64), scs);\n    /* sm: 32-byte R, 32-byte S, mlen-byte m */\n    arrFactory.recycle(az, nonce, hram, sck, scs, scsk, pk);\n    arrFactory.wipeRecycled();\n    return sm;\n}\nexports.sign = sign;\nfunction signature(m, sk, arrFactory) {\n    if (!(sk instanceof Uint8Array)) {\n        throw new TypeError(\"Key array sk must be Uint8Array.\");\n    }\n    if (sk.length !== 64) {\n        throw new Error(\"Key array sk should have 64 \" +\n            \"elements (bytes) in it, but it is \" + sk.length + \" elements long.\");\n    }\n    if (!arrFactory) {\n        arrFactory = arrays.makeFactory();\n    }\n    var hasher = sha512.makeHasher(false, arrFactory);\n    var sck = sc.make_sc25519(arrFactory);\n    var scs = sc.make_sc25519(arrFactory);\n    var scsk = sc.make_sc25519(arrFactory);\n    var ger = ge.make_ge25519(arrFactory);\n    var pk = arrFactory.getUint8Array(32);\n    pk.set(sk.subarray(32));\n    /* pk: 32-byte public key A */\n    hasher.update(sk.subarray(0, 32));\n    var az = hasher.digest();\n    az[0] &= 248;\n    az[31] &= 127;\n    az[31] |= 64;\n    /* az: 32-byte scalar a, 32-byte randomizer z */\n    var sig = arrFactory.getUint8Array(64);\n    sig.subarray(32, 64).set(az.subarray(32));\n    /* sig: 32-byte uninit, 32-byte z */\n    hasher.update(sig.subarray(32));\n    hasher.update(m);\n    var nonce = hasher.digest();\n    /* nonce: 64-byte H(z,m) */\n    sc.from64bytes(sck, nonce, arrFactory);\n    ge.scalarmult_base(ger, sck, arrFactory);\n    ge.pack(sig.subarray(0, 32), ger, arrFactory);\n    /* sig: 32-byte R, 32-byte z */\n    hasher.update(sig.subarray(0, 32));\n    hasher.update(pk);\n    hasher.update(m);\n    var hram = hasher.digest();\n    /* hram: 64-byte H(R,A,m) */\n    sc.from64bytes(scs, hram, arrFactory);\n    sc.from32bytes(scsk, az, arrFactory);\n    sc.mul(scs, scs, scsk, arrFactory);\n    sc.add(scs, scs, sck, arrFactory);\n    /* scs: S = nonce + H(R,A,m)a */\n    sc.to32bytes(sig.subarray(32), scs);\n    /* sig: 32-byte R, 32-byte S */\n    arrFactory.recycle(az, nonce, hram, sck, scs, scsk, pk);\n    hasher.destroy();\n    arrFactory.wipeRecycled();\n    return sig;\n}\nexports.signature = signature;\n/**\n * Analog of crypto_sign_open in crypto_sign/ed25519/ref/open.c\n */\nfunction open(sm, pk, arrFactory) {\n    if (!(pk instanceof Uint8Array)) {\n        throw new TypeError(\"Key array pk must be Uint8Array.\");\n    }\n    if (pk.length !== 32) {\n        throw new Error(\"Key array pk should have 32 \" +\n            \"elements (bytes) in it, but it is \" + pk.length + \" elements long.\");\n    }\n    if (!arrFactory) {\n        arrFactory = arrays.makeFactory();\n    }\n    var rcopy = arrFactory.getUint8Array(32);\n    var rcheck = arrFactory.getUint8Array(32);\n    var get1 = ge.make_ge25519(arrFactory);\n    var get2 = ge.make_ge25519(arrFactory);\n    var schram = sc.make_sc25519(arrFactory);\n    var scs = sc.make_sc25519(arrFactory);\n    if ((sm.length < 64) || (sm[63] & 224) ||\n        !ge.unpackneg_vartime(get1, pk, arrFactory)) {\n        return null;\n    }\n    rcopy.set(sm.subarray(0, 32));\n    sc.from32bytes(scs, sm.subarray(32, 64), arrFactory);\n    var m = new Uint8Array(sm.length);\n    m.set(sm);\n    m.set(pk, 32);\n    var hram = sha512.hash(m, arrFactory);\n    sc.from64bytes(schram, hram, arrFactory);\n    ge.double_scalarmult_vartime(get2, get1, schram, ge.base, scs, arrFactory);\n    ge.pack(rcheck, get2, arrFactory);\n    var isOK = vectVerify.v32(rcopy, rcheck);\n    for (var i = 0; i < 64; i += 1) {\n        m[i] = 0;\n    }\n    arrFactory.recycle(rcopy, rcheck, hram, schram, scs);\n    ge.recycle_ge25519(arrFactory, get1, get2);\n    arrFactory.wipeRecycled();\n    return (isOK ? m.subarray(64) : null);\n}\nexports.open = open;\nfunction verify(sig, m, pk, arrFactory) {\n    if (!(pk instanceof Uint8Array)) {\n        throw new TypeError(\"Key array pk must be Uint8Array.\");\n    }\n    if (pk.length !== 32) {\n        throw new Error(\"Key array pk should have 32 \" +\n            \"elements (bytes) in it, but it is \" + pk.length + \" elements long.\");\n    }\n    if (!arrFactory) {\n        arrFactory = arrays.makeFactory();\n    }\n    var rcopy = arrFactory.getUint8Array(32);\n    var rcheck = arrFactory.getUint8Array(32);\n    var get1 = ge.make_ge25519(arrFactory);\n    var get2 = ge.make_ge25519(arrFactory);\n    var schram = sc.make_sc25519(arrFactory);\n    var scs = sc.make_sc25519(arrFactory);\n    if ((sig.length < 64) || (sig[63] & 224) ||\n        !ge.unpackneg_vartime(get1, pk, arrFactory)) {\n        return false;\n    }\n    rcopy.set(sig.subarray(0, 32));\n    sc.from32bytes(scs, sig.subarray(32, 64), arrFactory);\n    var hasher = sha512.makeHasher(true, arrFactory);\n    hasher.update(sig.subarray(0, 32));\n    hasher.update(pk);\n    hasher.update(m);\n    var hram = hasher.digest();\n    sc.from64bytes(schram, hram, arrFactory);\n    ge.double_scalarmult_vartime(get2, get1, schram, ge.base, scs, arrFactory);\n    ge.pack(rcheck, get2, arrFactory);\n    var isOK = vectVerify.v32(rcopy, rcheck);\n    arrFactory.recycle(rcopy, rcheck, hram, schram, scs);\n    ge.recycle_ge25519(arrFactory, get1, get2);\n    hasher.destroy();\n    arrFactory.wipeRecycled();\n    return isOK;\n}\nexports.verify = verify;\nexports.JWK_ALG_NAME = 'NaCl-sign-Ed25519';\nexports.PUBLIC_KEY_LENGTH = 32;\nexports.SECRET_KEY_LENGTH = 64;\nObject.freeze(exports);\n","/* Copyright(c) 2013-2015 3NSoft Inc.\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, you can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n/**\n * This module provide an object pool for typed arrays used in the library.\n * When we turn off reusing, by always making new arrays, time for boxes goes up\n * dramatically (due to arrays needed in stream?).\n */\nvar NumericArrPool = (function () {\n    function NumericArrPool(numOfElemsInObj) {\n        this.arrFactory = null;\n        this.pool = new Array(16);\n        this.poolIndex = -1;\n        this.wipedIndex = -1;\n        this.numOfElemsInObj = numOfElemsInObj;\n        Object.seal(this);\n    }\n    NumericArrPool.makeUint8ArrayPool = function (numOfElemsInObj) {\n        var pool = new NumericArrPool(numOfElemsInObj);\n        pool.arrFactory = function () {\n            return new Uint8Array(pool.numOfElemsInObj);\n        };\n        return pool;\n    };\n    NumericArrPool.makeUint32ArrayPool = function (numOfElemsInObj) {\n        var pool = new NumericArrPool(numOfElemsInObj);\n        pool.arrFactory = function () {\n            return new Uint32Array(pool.numOfElemsInObj);\n        };\n        return pool;\n    };\n    /**\n     * This either creates new, or gets a spare array from the pool.\n     * Newly created array is not put into pool, because it is given to someone for\n     * use.\n     * If someone forgets to return it, there shall be no leaking references.\n     * @returns TypedArray, created by set arrFactory, with set number of elements\n     * in it.\n     * Note that array may and shall have arbitrary data in it, thus, any\n     * initialization must be performed explicitly.\n     */\n    NumericArrPool.prototype.get = function () {\n        var arr;\n        if (this.poolIndex < 0) {\n            arr = this.arrFactory();\n        }\n        else {\n            arr = this.pool[this.poolIndex];\n            this.pool[this.poolIndex] = null;\n            this.poolIndex -= 1;\n            if (this.poolIndex < this.wipedIndex) {\n                this.wipedIndex = this.poolIndex;\n            }\n        }\n        return arr;\n    };\n    /**\n     * This puts array into the pool, but it does not touch a content of array.\n     * @param arr\n     */\n    NumericArrPool.prototype.recycle = function (arr) {\n        this.poolIndex += 1;\n        this.pool[this.poolIndex] = arr;\n    };\n    /**\n     * This wipes all arrays in this pool.\n     */\n    NumericArrPool.prototype.wipe = function () {\n        var uintArr;\n        for (var i = (this.wipedIndex + 1); i <= this.poolIndex; i += 1) {\n            uintArr = this.pool[i];\n            for (var j = 0; j < uintArr.length; j += 1) {\n                uintArr[j] = 0;\n            }\n        }\n        this.wipedIndex = this.poolIndex;\n    };\n    return NumericArrPool;\n}());\nfunction makeFactory() {\n    var f = new ArrFactory();\n    return {\n        getUint8Array: f.getUint8Array.bind(f),\n        getUint32Array: f.getUint32Array.bind(f),\n        recycle: f.recycle.bind(f),\n        wipeRecycled: f.wipeRecycled.bind(f),\n        clear: f.clear.bind(f),\n        wipe: wipe\n    };\n}\nexports.makeFactory = makeFactory;\nvar ArrFactory = (function () {\n    function ArrFactory() {\n        this.uint8s = {};\n        this.uint32s = {};\n        this.wipe = wipe;\n        Object.freeze(this);\n    }\n    ArrFactory.prototype.getUint8Array = function (len) {\n        var pool = this.uint8s[len];\n        return (pool ? pool.get() : new Uint8Array(len));\n    };\n    ArrFactory.prototype.getUint32Array = function (len) {\n        var pool = this.uint32s[len];\n        return (pool ? pool.get() : new Uint32Array(len));\n    };\n    ArrFactory.prototype.recycleUint8Array = function (arr) {\n        var pool = this.uint8s[arr.length];\n        if (!pool) {\n            pool = NumericArrPool.makeUint8ArrayPool(arr.length);\n            this.uint8s[arr.length] = pool;\n        }\n        pool.recycle(arr);\n    };\n    ArrFactory.prototype.recycleUint32Array = function (arr) {\n        var pool = this.uint32s[arr.length];\n        if (!pool) {\n            pool = NumericArrPool.makeUint32ArrayPool(arr.length);\n            this.uint32s[arr.length] = pool;\n        }\n        pool.recycle(arr);\n    };\n    ArrFactory.prototype.recycle = function () {\n        var arrays = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            arrays[_i - 0] = arguments[_i];\n        }\n        var arr;\n        for (var i = 0; i < arrays.length; i += 1) {\n            arr = arrays[i];\n            if (!arr)\n                continue;\n            if ((arr.byteOffset !== 0) ||\n                (arr.length * arr.BYTES_PER_ELEMENT !== arr.buffer.byteLength)) {\n                throw new TypeError(\"Given, as argument #\" + (i + 1) + \" is a view \" +\n                    \"of an array, and these are not supposed to be recycled.\");\n            }\n            if (arr instanceof Uint8Array) {\n                this.recycleUint8Array(arr);\n            }\n            else if (arr instanceof Uint32Array) {\n                this.recycleUint32Array(arr);\n            }\n            else {\n                throw new TypeError(\"This works with typed arrays that have 1 or 4 bytes \" +\n                    \"per element, while given at position \" + i +\n                    \" array claims to have \" + arr.BYTES_PER_ELEMENT);\n            }\n        }\n    };\n    ArrFactory.prototype.wipeRecycled = function () {\n        for (var fieldName in this.uint8s) {\n            this.uint8s[fieldName].wipe();\n        }\n        for (var fieldName in this.uint32s) {\n            this.uint32s[fieldName].wipe();\n        }\n    };\n    ArrFactory.prototype.clear = function () {\n        for (var fieldName in this.uint8s) {\n            delete this.uint8s[fieldName];\n        }\n        for (var fieldName in this.uint32s) {\n            delete this.uint32s[fieldName];\n        }\n    };\n    return ArrFactory;\n}());\nObject.freeze(ArrFactory);\nObject.freeze(ArrFactory.prototype);\n/**\n * This zeros all elements of given arrays, or given array views.\n * Use this function on things that needs secure cleanup, but should not be\n * recycled due to their odd and/or huge size, as it makes pooling inefficient.\n */\nfunction wipe() {\n    var arrays = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        arrays[_i - 0] = arguments[_i];\n    }\n    var arr;\n    for (var i = 0; i < arrays.length; i += 1) {\n        arr = arrays[i];\n        if (!arr)\n            continue;\n        try {\n            for (var j = 0; j < arr.length; j += 1) {\n                arr[j] = 0;\n            }\n        }\n        catch (e) { }\n    }\n}\nexports.wipe = wipe;\nObject.freeze(exports);\n","/* Copyright(c) 2013 - 2016 3NSoft Inc.\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, you can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n/**\n * @param u is a U64 object\n */\nfunction u64To52(u) {\n    if (u[1] > 0xfffff) {\n        return;\n    }\n    return u[1] * 0x100000000 + u[0];\n}\nexports.u64To52 = u64To52;\nfunction addU64(a, b) {\n    var l = a[0] + b[0];\n    var h = a[1] + b[1] + ((l / 0x100000000) | 0);\n    return new Uint32Array([l, h]);\n}\nfunction subU64(a, b) {\n    var h = a[1] - b[1];\n    var l = a[0] - b[0];\n    if (l < 0) {\n        h -= 1;\n        l += 0x100000000;\n    }\n    return new Uint32Array([l, h]);\n}\n// XXX read 64 bytes, into obj that represents 64 number and has addition\n//\t\tread/write and call of storing ops should be adjusted\nfunction loadLEU64(x, i) {\n    var l = (x[i + 3] << 24) | (x[i + 2] << 16) | (x[i + 1] << 8) | x[i];\n    var h = (x[i + 7] << 24) | (x[i + 6] << 16) | (x[i + 5] << 8) | x[i + 4];\n    return new Uint32Array([l, h]);\n}\nfunction storeLEU64(x, i, u) {\n    x[i + 7] = u[1] >>> 24;\n    x[i + 6] = u[1] >>> 16;\n    x[i + 5] = u[1] >>> 8;\n    x[i + 4] = u[1];\n    x[i + 3] = u[0] >>> 24;\n    x[i + 2] = u[0] >>> 16;\n    x[i + 1] = u[0] >>> 8;\n    x[i] = u[0];\n}\n/**\n * This takes a given 24-byte nonce as three 8-byte numbers, and adds\n * a given delta to each number.\n * @param n is Uint8Array, 24 bytes long nonce that will be changed in-place.\n * @param delta is a number from 1 to 255 inclusive.\n */\nfunction advance(n, delta) {\n    if (n.length !== 24) {\n        throw new Error(\"Nonce array n should have 24 elements (bytes) in it, but it is \" +\n            n.length + \" elements long.\");\n    }\n    if ((delta < 1) || (delta > 255)) {\n        throw new Error(\"Given delta is out of limits.\");\n    }\n    var deltaU64 = new Uint32Array([delta, 0]);\n    for (var i = 0; i < 3; i += 1) {\n        storeLEU64(n, i * 8, addU64(loadLEU64(n, i * 8), deltaU64));\n    }\n}\nexports.advance = advance;\n/**\n * This takes a given 24-byte nonce as three 8-byte numbers, and adds\n * 1 to each number.\n * @param n is Uint8Array, 24 bytes long nonce that will be changed in-place.\n */\nfunction advanceOddly(n) {\n    advance(n, 1);\n}\nexports.advanceOddly = advanceOddly;\n/**\n * This takes a given 24-byte nonce as three 8-byte numbers, and adds\n * 2 to each number.\n * @param n is Uint8Array, 24 bytes long nonce that will be changed in-place.\n */\nfunction advanceEvenly(n) {\n    advance(n, 2);\n}\nexports.advanceEvenly = advanceEvenly;\n/**\n * @param initNonce\n * @param delta\n * @param arrFactory is an optional factory, which provides array for a\n * calculated nonce.\n * @return new nonce, calculated from an initial one by adding a delta to it.\n */\nfunction calculateNonce(initNonce, delta, arrFactory) {\n    var deltaU64;\n    if (typeof delta === 'number') {\n        if ((delta > 0xfffffffffffff) || (delta < 0)) {\n            throw new Error(\"Given delta is out of limits.\");\n        }\n        deltaU64 = new Uint32Array([delta, delta / 0x100000000]);\n    }\n    else {\n        deltaU64 = delta;\n    }\n    var n = (arrFactory ? arrFactory.getUint8Array(24) : new Uint8Array(24));\n    for (var i = 0; i < 3; i += 1) {\n        storeLEU64(n, i * 8, addU64(loadLEU64(initNonce, i * 8), deltaU64));\n    }\n    return n;\n}\nexports.calculateNonce = calculateNonce;\n/**\n * @param n1\n * @param n2\n * @return delta (unsigned 64-bit integer), which, when added to the first\n * nonce (n1), produces the second nonce (n2).\n * Undefined is returned, if given nonces are not related to each other.\n */\nfunction calculateDelta(n1, n2) {\n    var delta = subU64(loadLEU64(n2, 0), loadLEU64(n1, 0));\n    var dx;\n    for (var i = 1; i < 3; i += 1) {\n        dx = subU64(loadLEU64(n2, i * 8), loadLEU64(n1, i * 8));\n        if ((delta[0] !== dx[0]) || (delta[1] !== dx[1])) {\n            return;\n        }\n    }\n    return delta;\n}\nexports.calculateDelta = calculateDelta;\nObject.freeze(exports);\n","/* Copyright(c) 2013 - 2015 3NSoft Inc.\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, you can obtain one at http://mozilla.org/MPL/2.0/. */\n\"use strict\";\n/**\n * @param x is typed array\n * @param y is typed array, of the same length as x\n * @param n is number of element to compare, starting from each arrays head.\n * If this number is greater than length of given arrays, behaviour is undefined.\n * Therefore, users of this function must check lengths of given arrays\n * before calling this function.\n * It also implies that this function cannot be directly expose by the library.\n * @returns true when n first elements of arrays were found to correspond in each array,\n *          and false otherwise.\n *          Notice, that C's crypto_verify 16 and 32 return 0 (falsy value), for same elements,\n *          and -1 (truethy value), for different elements.\n */\nfunction verify(x, y, len) {\n    var differentbits = 0;\n    for (var i = 0; i < len; i += 1) {\n        differentbits |= x[i] ^ y[i];\n    }\n    return (differentbits === 0);\n}\nexports.verify = verify;\n/**\n * @param x is typed array\n * @param y is typed array, of the same length as x\n * @returns true when 16 first elements of arrays were found to correspond in each array,\n *          and false otherwise.\n *          Notice, that C's crypto_verify 16 and 32 return 0 (falsy value), for same elements,\n *          and -1 (truethy value), for different elements.\n */\nfunction v16(x, y) {\n    return verify(x, y, 16);\n}\nexports.v16 = v16;\n/**\n * @param x is typed array\n * @param y is typed array, of the same length as x\n * @returns true when 32 first elements of arrays were found to correspond in each array,\n *          and false otherwise.\n *          Notice, that C's crypto_verify 16 and 32 return 0 (falsy value), for same elements,\n *          and -1 (truethy value), for different elements.\n */\nfunction v32(x, y) {\n    return verify(x, y, 32);\n}\nexports.v32 = v32;\nObject.freeze(exports);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import nacl from \"ecma-nacl\";\n\nfunction encrypt_file(data, k, n) {\n    data = new Uint8Array(data);\n    k = new Uint8Array(k);\n    n = new Uint8Array(n);\n\n    const encrypted_data = nacl.secret_box.formatWN.pack(data, n, k);\n    const encrypted_buffer = encrypted_data.buffer;\n\n    self.postMessage({ kwargs: encrypted_buffer }, [encrypted_buffer]);\n}\n\nfunction decrypt_file(text, k) {\n    text = new Uint8Array(text);\n    k = new Uint8Array(k);\n\n    const decrypted_data = nacl.secret_box.formatWN.open(text, k);\n    let decrypted_buffer = decrypted_data.buffer;\n    decrypted_buffer = decrypted_buffer.slice(32, decrypted_buffer.byteLength);\n\n    self.postMessage({ kwargs: decrypted_buffer }, [decrypted_buffer]);\n}\n\nself.onmessage = function (msg) {\n    switch (msg.data.job) {\n        case \"encrypt_file\":\n            encrypt_file(msg.data.kwargs.data, msg.data.kwargs.k, msg.data.kwargs.n);\n            break;\n        case \"decrypt_file\":\n            decrypt_file(msg.data.kwargs.text, msg.data.kwargs.k);\n            break;\n        default:\n            throw \"job could not be handled: \" + msg.data.job;\n    }\n};\n"],"names":["arrays","sm","core","sbox","SIGMA","exports","generate_pubkey","sk","arrFactory","Uint8Array","TypeError","length","Error","makeFactory","pk","getUint8Array","curve25519_base","wipeRecycled","stream","formatWN","n_to_calc_dhshared_key","calc_dhshared_key","s","curve25519","hsalsa20","pack","m","n","k","c","open","Object","freeze","copyNonceFrom","makeEncryptor","nextNonce","delta","enc","wipe","makeDecryptor","NONCE_LENGTH","KEY_LENGTH","JWK_ALG_NAME","salsa20","out","inArr","x0","j0","x1","j1","x2","j2","x3","j3","x4","j4","x5","j5","x6","j6","x7","j7","x8","j8","x9","j9","x10","j10","x11","j11","x12","j12","x13","j13","x14","j14","x15","j15","t","i","verify","add","h","u","j","minusp","Uint32Array","mulmod","r","hr","getUint32Array","set","squeeze","recycle","poly1305","outArr","inlen","inArrInd","horig","negative","poly1305_verify","correct","areSame","v16","a","b","sub","mult","mult121665","square","select","p","q","bminus1","work","e","work_32","subarray","work_64","xzm1","xzm","xzmb","xzm1b","xznb","xzn1b","a0","a1","b0","b1","c1","xzmb_32","xzm1b_32","a0_32","a1_32","b0_32","b1_32","c1_32","xznb_32","xzn1b_32","pos","Math","floor","mainloop","z","z2","z9","z11","z2_5_0","z2_10_0","z2_20_0","z2_50_0","z2_100_0","t0","t1","recip","aorig","base","auth","nonceUtils","checkPackArgs","xsalsa20poly1305_pad_and_pack","xsalsa20_xor","dataPartOfC","polyOut","polyKey","subkey","xsalsa20","polyPartOfC","msgPartOfC","err","failedCipherVerification","regularOpen","packWithNonceInto","key","counter","counterMax","encryptor","advance","destroy","getDelta","decryptor","POLY_LENGTH","charCodeAt","n_16","cstart","clen","buffer","block","stream_salsa20","mPadLen","mWithPadLen","cp","mp","stream_salsa20_xor","secret_box","box","nonce","signing","hashing","sha512Mod","sha512","hash","makeHasher","scryptMod","scrypt","compareVectors","x","y","addInto","si","xi","l","shr","load_bigendian","store_bigendian","ui","ROTRandXorInto","M","w","i0","i14","i9","i1","sigma1","sigma0","EXPAND","F","i2","i3","i4","i5","i6","i7","wi","ki","Sigma1","yi","zi","xh","xl","Ch","Sigma0","yh","yl","zh","zl","Maj","round","G","crypto_hashblocks","statebytes","state","inInd","iv","hash_padded_block","oddBytes","totalLen","padded","oddLen","bytes","isSingleUse","cache","cachedBytes","update","min","digest","hashResult","this","sha256","blkcpy","dest","di","src","len","blkxor","salsa20_8","B","blockmix_salsa8","Y","X","integerifyAndMod","N","smix","V","XY","progress","nextProgInd","deltaN","addDelta","passwd","salt","logN","dkLen","progressCB","message","PBKDF2_SHA256","progShow","completed","deltaWork","buf","d","f","g","W","makeSha256Ctx","bufBytes","count","recycleSha256Ctxs","ctx","ctxs","_i","arguments","SHA256_Init","SHA256_Update","mi","mlen","SHA256_Final","bits","hashFromU32toU8","makeHmacSHA256Context","ictx","octx","copyBytes","dst","HMAC_SHA256_Init","K","KInd","Klen","pad","khash","HMAC_SHA256_Update","HMAC_SHA256_Final","ihash","be32enc","pi","PShctx","hctx","ivec","U","T","recycleHmacSHA256Context","make_fe25519","make_copy_fe25519","equal","times19","reduce_add_sub","rep","fe25519_freeze","setzero","mul","reduce_mul","unpack","iseq_vartime","t2","cmov","getparity","res","setone","neg","invert","pow2523","fe","sc","ge_base","make_ge25519","make_ge25519_p3","recycle_ge25519","ges","ge25519_ecd","ge25519_ec2d","ge25519_sqrtm1","ge25519_base_multiples_affine","base_multiples_affine","p1p1_to_p2","p1p1_to_p3","ge25519_mixadd2","qt","add_p1p1","dbl_p1p1","cmov_aff","choose_t","v","unpackneg_vartime","chk","num","den","den2","den4","den6","par","tx","ty","double_scalarmult_vartime","p1","s1","p2","s2","arF","tp1p1","pre","Array","setneutral","interleave2","scalarmult_base","Int8Array","make_ge25519_aff","window3","recycle_ge25519_aff","init_data","arrFact","make_sc25519","make_shortsc25519","mu","lt","mask","pb","barrett_reduce","carry","q2","q3","r1","r2","from32bytes","from64bytes","to32bytes","ge","vectVerify","generate_keypair","seed","scsk","gepk","az","skey","pkey","extract_pkey","BYTES_PER_ELEMENT","sign","sck","scs","ger","hram","signature","hasher","sig","rcopy","rcheck","get1","get2","schram","isOK","v32","PUBLIC_KEY_LENGTH","SECRET_KEY_LENGTH","NumericArrPool","numOfElemsInObj","pool","poolIndex","wipedIndex","seal","makeUint8ArrayPool","makeUint32ArrayPool","prototype","get","arr","uintArr","ArrFactory","bind","clear","uint8s","uint32s","recycleUint8Array","recycleUint32Array","byteOffset","byteLength","fieldName","addU64","subU64","loadLEU64","storeLEU64","deltaU64","u64To52","advanceOddly","advanceEvenly","calculateNonce","initNonce","calculateDelta","n1","n2","dx","differentbits","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","module","__webpack_modules__","getter","__esModule","definition","o","defineProperty","enumerable","obj","prop","hasOwnProperty","call","self","onmessage","msg","data","job","encrypted_buffer","nacl","postMessage","kwargs","encrypt_file","text","decrypted_buffer","slice","decrypt_file"],"sourceRoot":""}